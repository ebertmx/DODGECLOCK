
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
   0:	200060a0 	.word	0x200060a0
   4:	000137a1 	.word	0x000137a1
   8:	000247b7 	.word	0x000247b7
   c:	000137f5 	.word	0x000137f5
  10:	000137f5 	.word	0x000137f5
  14:	000137f5 	.word	0x000137f5
  18:	000137f5 	.word	0x000137f5
	...
  2c:	000134a5 	.word	0x000134a5
  30:	000137f5 	.word	0x000137f5
  34:	00000000 	.word	0x00000000
  38:	0001344d 	.word	0x0001344d
  3c:	000235c7 	.word	0x000235c7

00000040 <_irq_vector_table>:
  40:	00013761 00028d5f 00013761 00013761     a7.._...a7..a7..
  50:	00013761 00013761 00013761 00013761     a7..a7..a7..a7..
  60:	00028d27 00013761 00013761 00028d45     '...a7..a7..E...
  70:	00013761 00013761 00013761 00013761     a7..a7..a7..a7..
  80:	00013761 00013761 00013761 00013761     a7..a7..a7..a7..
  90:	00013761 00013761 00013761 00013761     a7..a7..a7..a7..
  a0:	00013761 00013761 00013761 00013761     a7..a7..a7..a7..
  b0:	00013761 00013761 00013761 00013761     a7..a7..a7..a7..
  c0:	00013761 00013761 00013761 00013761     a7..a7..a7..a7..
  d0:	00013761 00013761 00013761              a7..a7..a7..

Disassembly of section text:

000000dc <__aeabi_uldivmod>:
      dc:	b953      	cbnz	r3, f4 <__aeabi_uldivmod+0x18>
      de:	b94a      	cbnz	r2, f4 <__aeabi_uldivmod+0x18>
      e0:	2900      	cmp	r1, #0
      e2:	bf08      	it	eq
      e4:	2800      	cmpeq	r0, #0
      e6:	bf1c      	itt	ne
      e8:	f04f 31ff 	movne.w	r1, #4294967295
      ec:	f04f 30ff 	movne.w	r0, #4294967295
      f0:	f000 b96c 	b.w	3cc <__aeabi_idiv0>
      f4:	f1ad 0c08 	sub.w	ip, sp, #8
      f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      fc:	f000 f806 	bl	10c <__udivmoddi4>
     100:	f8dd e004 	ldr.w	lr, [sp, #4]
     104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     108:	b004      	add	sp, #16
     10a:	4770      	bx	lr

0000010c <__udivmoddi4>:
     10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     110:	9e08      	ldr	r6, [sp, #32]
     112:	460d      	mov	r5, r1
     114:	4604      	mov	r4, r0
     116:	468e      	mov	lr, r1
     118:	2b00      	cmp	r3, #0
     11a:	f040 8082 	bne.w	222 <CONFIG_FLASH_SIZE+0x22>
     11e:	428a      	cmp	r2, r1
     120:	4617      	mov	r7, r2
     122:	d946      	bls.n	1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
     124:	fab2 f282 	clz	r2, r2
     128:	b14a      	cbz	r2, 13e <__udivmoddi4+0x32>
     12a:	f1c2 0120 	rsb	r1, r2, #32
     12e:	fa05 f302 	lsl.w	r3, r5, r2
     132:	fa20 f101 	lsr.w	r1, r0, r1
     136:	4097      	lsls	r7, r2
     138:	ea41 0e03 	orr.w	lr, r1, r3
     13c:	4094      	lsls	r4, r2
     13e:	ea4f 4817 	mov.w	r8, r7, lsr #16
     142:	0c23      	lsrs	r3, r4, #16
     144:	fbbe fcf8 	udiv	ip, lr, r8
     148:	b2b9      	uxth	r1, r7
     14a:	fb08 ee1c 	mls	lr, r8, ip, lr
     14e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     152:	fb0c f001 	mul.w	r0, ip, r1
     156:	4298      	cmp	r0, r3
     158:	d90a      	bls.n	170 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x26>
     15a:	18fb      	adds	r3, r7, r3
     15c:	f10c 35ff 	add.w	r5, ip, #4294967295
     160:	f080 8116 	bcs.w	390 <CONFIG_BT_DEVICE_APPEARANCE+0x4f>
     164:	4298      	cmp	r0, r3
     166:	f240 8113 	bls.w	390 <CONFIG_BT_DEVICE_APPEARANCE+0x4f>
     16a:	f1ac 0c02 	sub.w	ip, ip, #2
     16e:	443b      	add	r3, r7
     170:	1a1b      	subs	r3, r3, r0
     172:	b2a4      	uxth	r4, r4
     174:	fbb3 f0f8 	udiv	r0, r3, r8
     178:	fb08 3310 	mls	r3, r8, r0, r3
     17c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     180:	fb00 f101 	mul.w	r1, r0, r1
     184:	42a1      	cmp	r1, r4
     186:	d909      	bls.n	19c <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x52>
     188:	193c      	adds	r4, r7, r4
     18a:	f100 33ff 	add.w	r3, r0, #4294967295
     18e:	f080 8101 	bcs.w	394 <CONFIG_BT_DEVICE_APPEARANCE+0x53>
     192:	42a1      	cmp	r1, r4
     194:	f240 80fe 	bls.w	394 <CONFIG_BT_DEVICE_APPEARANCE+0x53>
     198:	3802      	subs	r0, #2
     19a:	443c      	add	r4, r7
     19c:	1a64      	subs	r4, r4, r1
     19e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1a2:	2100      	movs	r1, #0
     1a4:	b11e      	cbz	r6, 1ae <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x64>
     1a6:	40d4      	lsrs	r4, r2
     1a8:	2300      	movs	r3, #0
     1aa:	e9c6 4300 	strd	r4, r3, [r6]
     1ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1b2:	b902      	cbnz	r2, 1b6 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6c>
     1b4:	deff      	udf	#255	; 0xff
     1b6:	fab2 f282 	clz	r2, r2
     1ba:	2a00      	cmp	r2, #0
     1bc:	d14f      	bne.n	25e <CONFIG_FLASH_SIZE+0x5e>
     1be:	1bcb      	subs	r3, r1, r7
     1c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1c4:	fa1f f887 	uxth.w	r8, r7
     1c8:	2101      	movs	r1, #1
     1ca:	fbb3 fcfe 	udiv	ip, r3, lr
     1ce:	0c25      	lsrs	r5, r4, #16
     1d0:	fb0e 331c 	mls	r3, lr, ip, r3
     1d4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1d8:	fb08 f30c 	mul.w	r3, r8, ip
     1dc:	42ab      	cmp	r3, r5
     1de:	d907      	bls.n	1f0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa6>
     1e0:	197d      	adds	r5, r7, r5
     1e2:	f10c 30ff 	add.w	r0, ip, #4294967295
     1e6:	d202      	bcs.n	1ee <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa4>
     1e8:	42ab      	cmp	r3, r5
     1ea:	f200 80e7 	bhi.w	3bc <CONFIG_BT_DEVICE_APPEARANCE+0x7b>
     1ee:	4684      	mov	ip, r0
     1f0:	1aed      	subs	r5, r5, r3
     1f2:	b2a3      	uxth	r3, r4
     1f4:	fbb5 f0fe 	udiv	r0, r5, lr
     1f8:	fb0e 5510 	mls	r5, lr, r0, r5
     1fc:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     200:	fb08 f800 	mul.w	r8, r8, r0
     204:	45a0      	cmp	r8, r4
     206:	d907      	bls.n	218 <CONFIG_FLASH_SIZE+0x18>
     208:	193c      	adds	r4, r7, r4
     20a:	f100 33ff 	add.w	r3, r0, #4294967295
     20e:	d202      	bcs.n	216 <CONFIG_FLASH_SIZE+0x16>
     210:	45a0      	cmp	r8, r4
     212:	f200 80d7 	bhi.w	3c4 <CONFIG_BT_DEVICE_APPEARANCE+0x83>
     216:	4618      	mov	r0, r3
     218:	eba4 0408 	sub.w	r4, r4, r8
     21c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     220:	e7c0      	b.n	1a4 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x5a>
     222:	428b      	cmp	r3, r1
     224:	d908      	bls.n	238 <CONFIG_FLASH_SIZE+0x38>
     226:	2e00      	cmp	r6, #0
     228:	f000 80af 	beq.w	38a <CONFIG_BT_DEVICE_APPEARANCE+0x49>
     22c:	2100      	movs	r1, #0
     22e:	e9c6 0500 	strd	r0, r5, [r6]
     232:	4608      	mov	r0, r1
     234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     238:	fab3 f183 	clz	r1, r3
     23c:	2900      	cmp	r1, #0
     23e:	d14b      	bne.n	2d8 <CONFIG_FLASH_SIZE+0xd8>
     240:	42ab      	cmp	r3, r5
     242:	d302      	bcc.n	24a <CONFIG_FLASH_SIZE+0x4a>
     244:	4282      	cmp	r2, r0
     246:	f200 80b7 	bhi.w	3b8 <CONFIG_BT_DEVICE_APPEARANCE+0x77>
     24a:	1a84      	subs	r4, r0, r2
     24c:	eb65 0303 	sbc.w	r3, r5, r3
     250:	2001      	movs	r0, #1
     252:	469e      	mov	lr, r3
     254:	2e00      	cmp	r6, #0
     256:	d0aa      	beq.n	1ae <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x64>
     258:	e9c6 4e00 	strd	r4, lr, [r6]
     25c:	e7a7      	b.n	1ae <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x64>
     25e:	f1c2 0c20 	rsb	ip, r2, #32
     262:	fa01 f302 	lsl.w	r3, r1, r2
     266:	4097      	lsls	r7, r2
     268:	fa20 f00c 	lsr.w	r0, r0, ip
     26c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     270:	fa21 fc0c 	lsr.w	ip, r1, ip
     274:	4318      	orrs	r0, r3
     276:	fbbc f1fe 	udiv	r1, ip, lr
     27a:	0c05      	lsrs	r5, r0, #16
     27c:	fb0e cc11 	mls	ip, lr, r1, ip
     280:	fa1f f887 	uxth.w	r8, r7
     284:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     288:	fb01 f308 	mul.w	r3, r1, r8
     28c:	42ab      	cmp	r3, r5
     28e:	fa04 f402 	lsl.w	r4, r4, r2
     292:	d909      	bls.n	2a8 <CONFIG_FLASH_SIZE+0xa8>
     294:	197d      	adds	r5, r7, r5
     296:	f101 3cff 	add.w	ip, r1, #4294967295
     29a:	f080 808b 	bcs.w	3b4 <CONFIG_BT_DEVICE_APPEARANCE+0x73>
     29e:	42ab      	cmp	r3, r5
     2a0:	f240 8088 	bls.w	3b4 <CONFIG_BT_DEVICE_APPEARANCE+0x73>
     2a4:	3902      	subs	r1, #2
     2a6:	443d      	add	r5, r7
     2a8:	1aeb      	subs	r3, r5, r3
     2aa:	b285      	uxth	r5, r0
     2ac:	fbb3 f0fe 	udiv	r0, r3, lr
     2b0:	fb0e 3310 	mls	r3, lr, r0, r3
     2b4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2b8:	fb00 f308 	mul.w	r3, r0, r8
     2bc:	42ab      	cmp	r3, r5
     2be:	d907      	bls.n	2d0 <CONFIG_FLASH_SIZE+0xd0>
     2c0:	197d      	adds	r5, r7, r5
     2c2:	f100 3cff 	add.w	ip, r0, #4294967295
     2c6:	d271      	bcs.n	3ac <CONFIG_BT_DEVICE_APPEARANCE+0x6b>
     2c8:	42ab      	cmp	r3, r5
     2ca:	d96f      	bls.n	3ac <CONFIG_BT_DEVICE_APPEARANCE+0x6b>
     2cc:	3802      	subs	r0, #2
     2ce:	443d      	add	r5, r7
     2d0:	1aeb      	subs	r3, r5, r3
     2d2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2d6:	e778      	b.n	1ca <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x80>
     2d8:	f1c1 0c20 	rsb	ip, r1, #32
     2dc:	408b      	lsls	r3, r1
     2de:	fa22 f70c 	lsr.w	r7, r2, ip
     2e2:	431f      	orrs	r7, r3
     2e4:	fa20 f40c 	lsr.w	r4, r0, ip
     2e8:	fa05 f301 	lsl.w	r3, r5, r1
     2ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     2f0:	fa25 f50c 	lsr.w	r5, r5, ip
     2f4:	431c      	orrs	r4, r3
     2f6:	0c23      	lsrs	r3, r4, #16
     2f8:	fbb5 f9fe 	udiv	r9, r5, lr
     2fc:	fa1f f887 	uxth.w	r8, r7
     300:	fb0e 5519 	mls	r5, lr, r9, r5
     304:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     308:	fb09 fa08 	mul.w	sl, r9, r8
     30c:	45aa      	cmp	sl, r5
     30e:	fa02 f201 	lsl.w	r2, r2, r1
     312:	fa00 f301 	lsl.w	r3, r0, r1
     316:	d908      	bls.n	32a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x2a>
     318:	197d      	adds	r5, r7, r5
     31a:	f109 30ff 	add.w	r0, r9, #4294967295
     31e:	d247      	bcs.n	3b0 <CONFIG_BT_DEVICE_APPEARANCE+0x6f>
     320:	45aa      	cmp	sl, r5
     322:	d945      	bls.n	3b0 <CONFIG_BT_DEVICE_APPEARANCE+0x6f>
     324:	f1a9 0902 	sub.w	r9, r9, #2
     328:	443d      	add	r5, r7
     32a:	eba5 050a 	sub.w	r5, r5, sl
     32e:	b2a4      	uxth	r4, r4
     330:	fbb5 f0fe 	udiv	r0, r5, lr
     334:	fb0e 5510 	mls	r5, lr, r0, r5
     338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     33c:	fb00 f808 	mul.w	r8, r0, r8
     340:	45a0      	cmp	r8, r4
     342:	d907      	bls.n	354 <CONFIG_BT_DEVICE_APPEARANCE+0x13>
     344:	193c      	adds	r4, r7, r4
     346:	f100 35ff 	add.w	r5, r0, #4294967295
     34a:	d22d      	bcs.n	3a8 <CONFIG_BT_DEVICE_APPEARANCE+0x67>
     34c:	45a0      	cmp	r8, r4
     34e:	d92b      	bls.n	3a8 <CONFIG_BT_DEVICE_APPEARANCE+0x67>
     350:	3802      	subs	r0, #2
     352:	443c      	add	r4, r7
     354:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     358:	eba4 0408 	sub.w	r4, r4, r8
     35c:	fba0 8902 	umull	r8, r9, r0, r2
     360:	454c      	cmp	r4, r9
     362:	46c6      	mov	lr, r8
     364:	464d      	mov	r5, r9
     366:	d319      	bcc.n	39c <CONFIG_BT_DEVICE_APPEARANCE+0x5b>
     368:	d016      	beq.n	398 <CONFIG_BT_DEVICE_APPEARANCE+0x57>
     36a:	b15e      	cbz	r6, 384 <CONFIG_BT_DEVICE_APPEARANCE+0x43>
     36c:	ebb3 020e 	subs.w	r2, r3, lr
     370:	eb64 0405 	sbc.w	r4, r4, r5
     374:	fa04 fc0c 	lsl.w	ip, r4, ip
     378:	40ca      	lsrs	r2, r1
     37a:	ea4c 0202 	orr.w	r2, ip, r2
     37e:	40cc      	lsrs	r4, r1
     380:	e9c6 2400 	strd	r2, r4, [r6]
     384:	2100      	movs	r1, #0
     386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     38a:	4631      	mov	r1, r6
     38c:	4630      	mov	r0, r6
     38e:	e70e      	b.n	1ae <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x64>
     390:	46ac      	mov	ip, r5
     392:	e6ed      	b.n	170 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x26>
     394:	4618      	mov	r0, r3
     396:	e701      	b.n	19c <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x52>
     398:	4543      	cmp	r3, r8
     39a:	d2e6      	bcs.n	36a <CONFIG_BT_DEVICE_APPEARANCE+0x29>
     39c:	ebb8 0e02 	subs.w	lr, r8, r2
     3a0:	eb69 0507 	sbc.w	r5, r9, r7
     3a4:	3801      	subs	r0, #1
     3a6:	e7e0      	b.n	36a <CONFIG_BT_DEVICE_APPEARANCE+0x29>
     3a8:	4628      	mov	r0, r5
     3aa:	e7d3      	b.n	354 <CONFIG_BT_DEVICE_APPEARANCE+0x13>
     3ac:	4660      	mov	r0, ip
     3ae:	e78f      	b.n	2d0 <CONFIG_FLASH_SIZE+0xd0>
     3b0:	4681      	mov	r9, r0
     3b2:	e7ba      	b.n	32a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x2a>
     3b4:	4661      	mov	r1, ip
     3b6:	e777      	b.n	2a8 <CONFIG_FLASH_SIZE+0xa8>
     3b8:	4608      	mov	r0, r1
     3ba:	e74b      	b.n	254 <CONFIG_FLASH_SIZE+0x54>
     3bc:	f1ac 0c02 	sub.w	ip, ip, #2
     3c0:	443d      	add	r5, r7
     3c2:	e715      	b.n	1f0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa6>
     3c4:	3802      	subs	r0, #2
     3c6:	443c      	add	r4, r7
     3c8:	e726      	b.n	218 <CONFIG_FLASH_SIZE+0x18>
     3ca:	bf00      	nop

000003cc <__aeabi_idiv0>:
     3cc:	4770      	bx	lr
     3ce:	bf00      	nop
     3d0:	2800      	cmp	r0, #0
     3d2:	d019      	beq.n	408 <CONFIG_LOG_BUFFER_SIZE+0x8>
     3d4:	7803      	ldrb	r3, [r0, #0]
     3d6:	4913      	ldr	r1, [pc, #76]	; (424 <CONFIG_LOG_BUFFER_SIZE+0x24>)
     3d8:	4a13      	ldr	r2, [pc, #76]	; (428 <CONFIG_LOG_BUFFER_SIZE+0x28>)
     3da:	b113      	cbz	r3, 3e2 <__aeabi_idiv0+0x16>
     3dc:	2b01      	cmp	r3, #1
     3de:	d00e      	beq.n	3fe <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x16>
     3e0:	e011      	b.n	406 <CONFIG_LOG_BUFFER_SIZE+0x6>
     3e2:	7903      	ldrb	r3, [r0, #4]
     3e4:	2b01      	cmp	r3, #1
     3e6:	d000      	beq.n	3ea <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x2>
     3e8:	b96b      	cbnz	r3, 406 <CONFIG_LOG_BUFFER_SIZE+0x6>
     3ea:	7943      	ldrb	r3, [r0, #5]
     3ec:	b10b      	cbz	r3, 3f2 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0xa>
     3ee:	2b01      	cmp	r3, #1
     3f0:	d109      	bne.n	406 <CONFIG_LOG_BUFFER_SIZE+0x6>
     3f2:	6883      	ldr	r3, [r0, #8]
     3f4:	3b64      	subs	r3, #100	; 0x64
     3f6:	428b      	cmp	r3, r1
     3f8:	d205      	bcs.n	406 <CONFIG_LOG_BUFFER_SIZE+0x6>
     3fa:	68c0      	ldr	r0, [r0, #12]
     3fc:	e00e      	b.n	41c <CONFIG_LOG_BUFFER_SIZE+0x1c>
     3fe:	7903      	ldrb	r3, [r0, #4]
     400:	2b01      	cmp	r3, #1
     402:	d002      	beq.n	40a <CONFIG_LOG_BUFFER_SIZE+0xa>
     404:	b10b      	cbz	r3, 40a <CONFIG_LOG_BUFFER_SIZE+0xa>
     406:	2000      	movs	r0, #0
     408:	4770      	bx	lr
     40a:	7943      	ldrb	r3, [r0, #5]
     40c:	b10b      	cbz	r3, 412 <CONFIG_LOG_BUFFER_SIZE+0x12>
     40e:	2b01      	cmp	r3, #1
     410:	d1f9      	bne.n	406 <CONFIG_LOG_BUFFER_SIZE+0x6>
     412:	68c3      	ldr	r3, [r0, #12]
     414:	3b64      	subs	r3, #100	; 0x64
     416:	428b      	cmp	r3, r1
     418:	d2f5      	bcs.n	406 <CONFIG_LOG_BUFFER_SIZE+0x6>
     41a:	6880      	ldr	r0, [r0, #8]
     41c:	4290      	cmp	r0, r2
     41e:	d8f2      	bhi.n	406 <CONFIG_LOG_BUFFER_SIZE+0x6>
     420:	2001      	movs	r0, #1
     422:	4770      	bx	lr
     424:	0001863d 	.word	0x0001863d
     428:	07a11fff 	.word	0x07a11fff
     42c:	b510      	push	{r4, lr}
     42e:	4c05      	ldr	r4, [pc, #20]	; (444 <CONFIG_LOG_BUFFER_SIZE+0x44>)
     430:	6820      	ldr	r0, [r4, #0]
     432:	b110      	cbz	r0, 43a <CONFIG_LOG_BUFFER_SIZE+0x3a>
     434:	4780      	blx	r0
     436:	2000      	movs	r0, #0
     438:	6020      	str	r0, [r4, #0]
     43a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     43e:	f002 b819 	b.w	2474 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
     442:	0000      	.short	0x0000
     444:	20000000 	.word	0x20000000

00000448 <mpsl_timeslot_session_open>:
     448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     44c:	460e      	mov	r6, r1
     44e:	0005      	movs	r5, r0
     450:	d004      	beq.n	45c <mpsl_timeslot_session_open+0x14>
     452:	f000 f841 	bl	4d8 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
     456:	4607      	mov	r7, r0
     458:	2400      	movs	r4, #0
     45a:	e00a      	b.n	472 <mpsl_timeslot_session_open+0x2a>
     45c:	f06f 0015 	mvn.w	r0, #21
     460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     464:	4620      	mov	r0, r4
     466:	f000 f83d 	bl	4e4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
     46a:	7880      	ldrb	r0, [r0, #2]
     46c:	b138      	cbz	r0, 47e <CONFIG_BT_HCI_ECC_STACK_SIZE+0xa>
     46e:	1c64      	adds	r4, r4, #1
     470:	b2e4      	uxtb	r4, r4
     472:	42bc      	cmp	r4, r7
     474:	d3f6      	bcc.n	464 <mpsl_timeslot_session_open+0x1c>
     476:	bf00      	nop
     478:	f06f 000b 	mvn.w	r0, #11
     47c:	e7f0      	b.n	460 <mpsl_timeslot_session_open+0x18>
     47e:	4627      	mov	r7, r4
     480:	2cff      	cmp	r4, #255	; 0xff
     482:	d0f9      	beq.n	478 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x4>
     484:	4620      	mov	r0, r4
     486:	f000 f82d 	bl	4e4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
     48a:	4604      	mov	r4, r0
     48c:	f00b fc5d 	bl	bd4a <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x37e>
     490:	4807      	ldr	r0, [pc, #28]	; (4b0 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x3c>)
     492:	f001 ffcb 	bl	242c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
     496:	70e0      	strb	r0, [r4, #3]
     498:	2820      	cmp	r0, #32
     49a:	d005      	beq.n	4a8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x34>
     49c:	2001      	movs	r0, #1
     49e:	6065      	str	r5, [r4, #4]
     4a0:	70a0      	strb	r0, [r4, #2]
     4a2:	7037      	strb	r7, [r6, #0]
     4a4:	2000      	movs	r0, #0
     4a6:	e7db      	b.n	460 <mpsl_timeslot_session_open+0x18>
     4a8:	f06f 0022 	mvn.w	r0, #34	; 0x22
     4ac:	e7d8      	b.n	460 <mpsl_timeslot_session_open+0x18>
     4ae:	0000      	.short	0x0000
     4b0:	0000ba91 	.word	0x0000ba91

000004b4 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>:
     4b4:	b510      	push	{r4, lr}
     4b6:	0782      	lsls	r2, r0, #30
     4b8:	d002      	beq.n	4c0 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0xc>
     4ba:	f06f 000d 	mvn.w	r0, #13
     4be:	bd10      	pop	{r4, pc}
     4c0:	4a04      	ldr	r2, [pc, #16]	; (4d4 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x20>)
     4c2:	7011      	strb	r1, [r2, #0]
     4c4:	6050      	str	r0, [r2, #4]
     4c6:	b118      	cbz	r0, 4d0 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x1c>
     4c8:	014a      	lsls	r2, r1, #5
     4ca:	2100      	movs	r1, #0
     4cc:	f00b fec3 	bl	c256 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     4d0:	2000      	movs	r0, #0
     4d2:	bd10      	pop	{r4, pc}
     4d4:	20000004 	.word	0x20000004

000004d8 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     4d8:	4801      	ldr	r0, [pc, #4]	; (4e0 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     4da:	7800      	ldrb	r0, [r0, #0]
     4dc:	4770      	bx	lr
     4de:	0000      	.short	0x0000
     4e0:	20000004 	.word	0x20000004

000004e4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     4e4:	4904      	ldr	r1, [pc, #16]	; (4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>)
     4e6:	780a      	ldrb	r2, [r1, #0]
     4e8:	4290      	cmp	r0, r2
     4ea:	d301      	bcc.n	4f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8>
     4ec:	2000      	movs	r0, #0
     4ee:	4770      	bx	lr
     4f0:	6849      	ldr	r1, [r1, #4]
     4f2:	eb01 1040 	add.w	r0, r1, r0, lsl #5
     4f6:	4770      	bx	lr
     4f8:	20000004 	.word	0x20000004

000004fc <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY>:
     4fc:	4909      	ldr	r1, [pc, #36]	; (524 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x28>)
     4fe:	b510      	push	{r4, lr}
     500:	4603      	mov	r3, r0
     502:	684a      	ldr	r2, [r1, #4]
     504:	2000      	movs	r0, #0
     506:	7809      	ldrb	r1, [r1, #0]
     508:	e007      	b.n	51a <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x1e>
     50a:	bf00      	nop
     50c:	eb02 1440 	add.w	r4, r2, r0, lsl #5
     510:	78e4      	ldrb	r4, [r4, #3]
     512:	429c      	cmp	r4, r3
     514:	d004      	beq.n	520 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x24>
     516:	1c40      	adds	r0, r0, #1
     518:	b2c0      	uxtb	r0, r0
     51a:	4288      	cmp	r0, r1
     51c:	d3f6      	bcc.n	50c <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x10>
     51e:	20ff      	movs	r0, #255	; 0xff
     520:	bd10      	pop	{r4, pc}
     522:	0000      	.short	0x0000
     524:	20000004 	.word	0x20000004
     528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     52c:	4615      	mov	r5, r2
     52e:	4604      	mov	r4, r0
     530:	f100 0208 	add.w	r2, r0, #8
     534:	1cc8      	adds	r0, r1, #3
     536:	4241      	negs	r1, r0
     538:	f8df c09c 	ldr.w	ip, [pc, #156]	; 5d8 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0xdc>
     53c:	461f      	mov	r7, r3
     53e:	1a28      	subs	r0, r5, r0
     540:	2300      	movs	r3, #0
     542:	9e08      	ldr	r6, [sp, #32]
     544:	ebbc 0c05 	subs.w	ip, ip, r5
     548:	419b      	sbcs	r3, r3
     54a:	d204      	bcs.n	556 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x5a>
     54c:	f240 51f1 	movw	r1, #1521	; 0x5f1
     550:	2070      	movs	r0, #112	; 0x70
     552:	f003 f983 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     556:	4b21      	ldr	r3, [pc, #132]	; (5dc <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0xe0>)
     558:	4299      	cmp	r1, r3
     55a:	dd04      	ble.n	566 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x6a>
     55c:	f240 51f2 	movw	r1, #1522	; 0x5f2
     560:	2070      	movs	r0, #112	; 0x70
     562:	f003 f97b 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     566:	4b1e      	ldr	r3, [pc, #120]	; (5e0 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0xe4>)
     568:	4299      	cmp	r1, r3
     56a:	da04      	bge.n	576 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x7a>
     56c:	f240 51f3 	movw	r1, #1523	; 0x5f3
     570:	2070      	movs	r0, #112	; 0x70
     572:	f003 f973 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     576:	491b      	ldr	r1, [pc, #108]	; (5e4 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0xe8>)
     578:	4288      	cmp	r0, r1
     57a:	bfa8      	it	ge
     57c:	491a      	ldrge	r1, [pc, #104]	; (5e8 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0xec>)
     57e:	da03      	bge.n	588 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x8c>
     580:	2800      	cmp	r0, #0
     582:	bfb8      	it	lt
     584:	4917      	ldrlt	r1, [pc, #92]	; (5e4 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0xe8>)
     586:	da00      	bge.n	58a <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x8e>
     588:	1840      	adds	r0, r0, r1
     58a:	4621      	mov	r1, r4
     58c:	f002 fdce 	bl	312c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     590:	6820      	ldr	r0, [r4, #0]
     592:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     596:	19e8      	adds	r0, r5, r7
     598:	1cc0      	adds	r0, r0, #3
     59a:	6021      	str	r1, [r4, #0]
     59c:	2e00      	cmp	r6, #0
     59e:	bf08      	it	eq
     5a0:	307a      	addeq	r0, #122	; 0x7a
     5a2:	d008      	beq.n	5b6 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0xba>
     5a4:	2e01      	cmp	r6, #1
     5a6:	bf08      	it	eq
     5a8:	3045      	addeq	r0, #69	; 0x45
     5aa:	d004      	beq.n	5b6 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0xba>
     5ac:	f240 6199 	movw	r1, #1689	; 0x699
     5b0:	2070      	movs	r0, #112	; 0x70
     5b2:	f003 f953 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     5b6:	466a      	mov	r2, sp
     5b8:	1d21      	adds	r1, r4, #4
     5ba:	f002 fdb7 	bl	312c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     5be:	f99d 0000 	ldrsb.w	r0, [sp]
     5c2:	2800      	cmp	r0, #0
     5c4:	6860      	ldr	r0, [r4, #4]
     5c6:	bfc4      	itt	gt
     5c8:	1c40      	addgt	r0, r0, #1
     5ca:	6060      	strgt	r0, [r4, #4]
     5cc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     5d0:	6060      	str	r0, [r4, #4]
     5d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     5d6:	0000      	.short	0x0000
     5d8:	1e847fff 	.word	0x1e847fff
     5dc:	07a12000 	.word	0x07a12000
     5e0:	f85ee000 	.word	0xf85ee000
     5e4:	1e848000 	.word	0x1e848000
     5e8:	e17b8000 	.word	0xe17b8000
     5ec:	b570      	push	{r4, r5, r6, lr}
     5ee:	4605      	mov	r5, r0
     5f0:	2a20      	cmp	r2, #32
     5f2:	d027      	beq.n	644 <CONFIG_BT_HCI_TX_STACK_SIZE+0x44>
     5f4:	4819      	ldr	r0, [pc, #100]	; (65c <CONFIG_BT_HCI_TX_STACK_SIZE+0x5c>)
     5f6:	4c1a      	ldr	r4, [pc, #104]	; (660 <CONFIG_BT_HCI_TX_STACK_SIZE+0x60>)
     5f8:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
     5fc:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
     600:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     604:	2920      	cmp	r1, #32
     606:	d022      	beq.n	64e <CONFIG_BT_HCI_TX_STACK_SIZE+0x4e>
     608:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     60c:	7840      	ldrb	r0, [r0, #1]
     60e:	784c      	ldrb	r4, [r1, #1]
     610:	7048      	strb	r0, [r1, #1]
     612:	4620      	mov	r0, r4
     614:	4601      	mov	r1, r0
     616:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
     61a:	4291      	cmp	r1, r2
     61c:	7005      	strb	r5, [r0, #0]
     61e:	7840      	ldrb	r0, [r0, #1]
     620:	d1f8      	bne.n	614 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     622:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
     626:	2a20      	cmp	r2, #32
     628:	bf1a      	itte	ne
     62a:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
     62e:	7054      	strbne	r4, [r2, #1]
     630:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
     634:	2220      	movs	r2, #32
     636:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
     63a:	f88c 2001 	strb.w	r2, [ip, #1]
     63e:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
     642:	bd70      	pop	{r4, r5, r6, pc}
     644:	f44f 7123 	mov.w	r1, #652	; 0x28c
     648:	2070      	movs	r0, #112	; 0x70
     64a:	f003 f907 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     64e:	f893 4020 	ldrb.w	r4, [r3, #32]
     652:	7840      	ldrb	r0, [r0, #1]
     654:	f883 0020 	strb.w	r0, [r3, #32]
     658:	e7db      	b.n	612 <CONFIG_BT_HCI_TX_STACK_SIZE+0x12>
     65a:	0000      	.short	0x0000
     65c:	20000cdc 	.word	0x20000cdc
     660:	20000d5c 	.word	0x20000d5c
     664:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     668:	b087      	sub	sp, #28
     66a:	4604      	mov	r4, r0
     66c:	2000      	movs	r0, #0
     66e:	9002      	str	r0, [sp, #8]
     670:	489e      	ldr	r0, [pc, #632]	; (8ec <CONFIG_BT_RX_STACK_SIZE+0x54>)
     672:	9f08      	ldr	r7, [sp, #32]
     674:	4e9e      	ldr	r6, [pc, #632]	; (8f0 <CONFIG_BT_RX_STACK_SIZE+0x58>)
     676:	eb00 0087 	add.w	r0, r0, r7, lsl #2
     67a:	9003      	str	r0, [sp, #12]
     67c:	f890 5020 	ldrb.w	r5, [r0, #32]
     680:	2020      	movs	r0, #32
     682:	46e9      	mov	r9, sp
     684:	f10d 0804 	add.w	r8, sp, #4
     688:	f88d 0000 	strb.w	r0, [sp]
     68c:	f506 7a20 	add.w	sl, r6, #640	; 0x280
     690:	2d20      	cmp	r5, #32
     692:	bf18      	it	ne
     694:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
     698:	d032      	beq.n	700 <CONFIG_BT_HCI_TX_STACK_SIZE+0x100>
     69a:	bf00      	nop
     69c:	eb05 0085 	add.w	r0, r5, r5, lsl #2
     6a0:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     6a4:	1d01      	adds	r1, r0, #4
     6a6:	6880      	ldr	r0, [r0, #8]
     6a8:	6822      	ldr	r2, [r4, #0]
     6aa:	1a10      	subs	r0, r2, r0
     6ac:	0200      	lsls	r0, r0, #8
     6ae:	17c2      	asrs	r2, r0, #31
     6b0:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     6b4:	1200      	asrs	r0, r0, #8
     6b6:	d423      	bmi.n	700 <CONFIG_BT_HCI_TX_STACK_SIZE+0x100>
     6b8:	8960      	ldrh	r0, [r4, #10]
     6ba:	b1d0      	cbz	r0, 6f2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xf2>
     6bc:	8948      	ldrh	r0, [r1, #10]
     6be:	b9c0      	cbnz	r0, 6f2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xf2>
     6c0:	4608      	mov	r0, r1
     6c2:	f000 fcdb 	bl	107c <CONFIG_FPROTECT_BLOCK_SIZE+0x7c>
     6c6:	aa05      	add	r2, sp, #20
     6c8:	a904      	add	r1, sp, #16
     6ca:	f002 fd2f 	bl	312c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     6ce:	f99d 0014 	ldrsb.w	r0, [sp, #20]
     6d2:	2800      	cmp	r0, #0
     6d4:	bfcc      	ite	gt
     6d6:	2001      	movgt	r0, #1
     6d8:	2000      	movle	r0, #0
     6da:	f100 0133 	add.w	r1, r0, #51	; 0x33
     6de:	9804      	ldr	r0, [sp, #16]
     6e0:	6822      	ldr	r2, [r4, #0]
     6e2:	1a10      	subs	r0, r2, r0
     6e4:	0200      	lsls	r0, r0, #8
     6e6:	17c2      	asrs	r2, r0, #31
     6e8:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     6ec:	1200      	asrs	r0, r0, #8
     6ee:	4288      	cmp	r0, r1
     6f0:	db06      	blt.n	700 <CONFIG_BT_HCI_TX_STACK_SIZE+0x100>
     6f2:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     6f6:	f889 5000 	strb.w	r5, [r9]
     6fa:	7845      	ldrb	r5, [r0, #1]
     6fc:	2d20      	cmp	r5, #32
     6fe:	d1cd      	bne.n	69c <CONFIG_BT_HCI_TX_STACK_SIZE+0x9c>
     700:	f899 0000 	ldrb.w	r0, [r9]
     704:	f888 0000 	strb.w	r0, [r8]
     708:	46a1      	mov	r9, r4
     70a:	2d20      	cmp	r5, #32
     70c:	bf1c      	itt	ne
     70e:	4879      	ldrne	r0, [pc, #484]	; (8f4 <CONFIG_BT_RX_STACK_SIZE+0x5c>)
     710:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
     714:	f000 80e5 	beq.w	8e2 <CONFIG_BT_RX_STACK_SIZE+0x4a>
     718:	eb05 0185 	add.w	r1, r5, r5, lsl #2
     71c:	eb06 0a81 	add.w	sl, r6, r1, lsl #2
     720:	f8d9 2004 	ldr.w	r2, [r9, #4]
     724:	f8da 1004 	ldr.w	r1, [sl, #4]
     728:	4648      	mov	r0, r9
     72a:	1a89      	subs	r1, r1, r2
     72c:	0209      	lsls	r1, r1, #8
     72e:	17ca      	asrs	r2, r1, #31
     730:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     734:	f10a 0704 	add.w	r7, sl, #4
     738:	1209      	asrs	r1, r1, #8
     73a:	d41f      	bmi.n	77c <CONFIG_BT_HCI_TX_STACK_SIZE+0x17c>
     73c:	8979      	ldrh	r1, [r7, #10]
     73e:	2900      	cmp	r1, #0
     740:	f000 80cf 	beq.w	8e2 <CONFIG_BT_RX_STACK_SIZE+0x4a>
     744:	8941      	ldrh	r1, [r0, #10]
     746:	2900      	cmp	r1, #0
     748:	f040 80cb 	bne.w	8e2 <CONFIG_BT_RX_STACK_SIZE+0x4a>
     74c:	f000 fc96 	bl	107c <CONFIG_FPROTECT_BLOCK_SIZE+0x7c>
     750:	aa05      	add	r2, sp, #20
     752:	a904      	add	r1, sp, #16
     754:	f002 fcea 	bl	312c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     758:	f99d 0014 	ldrsb.w	r0, [sp, #20]
     75c:	2800      	cmp	r0, #0
     75e:	bfcc      	ite	gt
     760:	2001      	movgt	r0, #1
     762:	2000      	movle	r0, #0
     764:	f100 0133 	add.w	r1, r0, #51	; 0x33
     768:	9804      	ldr	r0, [sp, #16]
     76a:	683a      	ldr	r2, [r7, #0]
     76c:	1a10      	subs	r0, r2, r0
     76e:	0200      	lsls	r0, r0, #8
     770:	17c2      	asrs	r2, r0, #31
     772:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     776:	1200      	asrs	r0, r0, #8
     778:	4288      	cmp	r0, r1
     77a:	da7d      	bge.n	878 <CONFIG_ISR_STACK_SIZE+0x78>
     77c:	f888 5000 	strb.w	r5, [r8]
     780:	f89a 0010 	ldrb.w	r0, [sl, #16]
     784:	f899 100c 	ldrb.w	r1, [r9, #12]
     788:	4288      	cmp	r0, r1
     78a:	d905      	bls.n	798 <CONFIG_BT_HCI_TX_STACK_SIZE+0x198>
     78c:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     790:	7845      	ldrb	r5, [r0, #1]
     792:	2d20      	cmp	r5, #32
     794:	d1c0      	bne.n	718 <CONFIG_BT_HCI_TX_STACK_SIZE+0x118>
     796:	e0a4      	b.n	8e2 <CONFIG_BT_RX_STACK_SIZE+0x4a>
     798:	f89d 0004 	ldrb.w	r0, [sp, #4]
     79c:	e9d4 2100 	ldrd	r2, r1, [r4]
     7a0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
     7a4:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     7a8:	1a89      	subs	r1, r1, r2
     7aa:	6880      	ldr	r0, [r0, #8]
     7ac:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
     7b0:	4408      	add	r0, r1
     7b2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     7b6:	e9c4 2000 	strd	r2, r0, [r4]
     7ba:	2001      	movs	r0, #1
     7bc:	9002      	str	r0, [sp, #8]
     7be:	484b      	ldr	r0, [pc, #300]	; (8ec <CONFIG_BT_RX_STACK_SIZE+0x54>)
     7c0:	f890 002b 	ldrb.w	r0, [r0, #43]	; 0x2b
     7c4:	b118      	cbz	r0, 7ce <CONFIG_BT_HCI_TX_STACK_SIZE+0x1ce>
     7c6:	b009      	add	sp, #36	; 0x24
     7c8:	2000      	movs	r0, #0
     7ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7ce:	9803      	ldr	r0, [sp, #12]
     7d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
     7d4:	466f      	mov	r7, sp
     7d6:	f890 5020 	ldrb.w	r5, [r0, #32]
     7da:	2020      	movs	r0, #32
     7dc:	f10d 0a04 	add.w	sl, sp, #4
     7e0:	f88d 0000 	strb.w	r0, [sp]
     7e4:	2d20      	cmp	r5, #32
     7e6:	bf1c      	itt	ne
     7e8:	4842      	ldrne	r0, [pc, #264]	; (8f4 <CONFIG_BT_RX_STACK_SIZE+0x5c>)
     7ea:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
     7ee:	d030      	beq.n	852 <CONFIG_ISR_STACK_SIZE+0x52>
     7f0:	eb05 0085 	add.w	r0, r5, r5, lsl #2
     7f4:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     7f8:	1d01      	adds	r1, r0, #4
     7fa:	6880      	ldr	r0, [r0, #8]
     7fc:	6822      	ldr	r2, [r4, #0]
     7fe:	1a10      	subs	r0, r2, r0
     800:	0200      	lsls	r0, r0, #8
     802:	17c2      	asrs	r2, r0, #31
     804:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     808:	1200      	asrs	r0, r0, #8
     80a:	d422      	bmi.n	852 <CONFIG_ISR_STACK_SIZE+0x52>
     80c:	8960      	ldrh	r0, [r4, #10]
     80e:	b1d0      	cbz	r0, 846 <CONFIG_ISR_STACK_SIZE+0x46>
     810:	8948      	ldrh	r0, [r1, #10]
     812:	b9c0      	cbnz	r0, 846 <CONFIG_ISR_STACK_SIZE+0x46>
     814:	4608      	mov	r0, r1
     816:	f000 fc31 	bl	107c <CONFIG_FPROTECT_BLOCK_SIZE+0x7c>
     81a:	aa05      	add	r2, sp, #20
     81c:	a904      	add	r1, sp, #16
     81e:	f002 fc85 	bl	312c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     822:	f99d 0014 	ldrsb.w	r0, [sp, #20]
     826:	2800      	cmp	r0, #0
     828:	bfcc      	ite	gt
     82a:	2001      	movgt	r0, #1
     82c:	2000      	movle	r0, #0
     82e:	f100 0133 	add.w	r1, r0, #51	; 0x33
     832:	9804      	ldr	r0, [sp, #16]
     834:	6822      	ldr	r2, [r4, #0]
     836:	1a10      	subs	r0, r2, r0
     838:	0200      	lsls	r0, r0, #8
     83a:	17c2      	asrs	r2, r0, #31
     83c:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     840:	1200      	asrs	r0, r0, #8
     842:	4288      	cmp	r0, r1
     844:	db05      	blt.n	852 <CONFIG_ISR_STACK_SIZE+0x52>
     846:	eb09 0045 	add.w	r0, r9, r5, lsl #1
     84a:	703d      	strb	r5, [r7, #0]
     84c:	7845      	ldrb	r5, [r0, #1]
     84e:	2d20      	cmp	r5, #32
     850:	d1ce      	bne.n	7f0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1f0>
     852:	7838      	ldrb	r0, [r7, #0]
     854:	f88a 0000 	strb.w	r0, [sl]
     858:	4627      	mov	r7, r4
     85a:	2d20      	cmp	r5, #32
     85c:	bf1c      	itt	ne
     85e:	4825      	ldrne	r0, [pc, #148]	; (8f4 <CONFIG_BT_RX_STACK_SIZE+0x5c>)
     860:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     864:	d03d      	beq.n	8e2 <CONFIG_BT_RX_STACK_SIZE+0x4a>
     866:	eb05 0185 	add.w	r1, r5, r5, lsl #2
     86a:	eb06 0981 	add.w	r9, r6, r1, lsl #2
     86e:	4638      	mov	r0, r7
     870:	f109 0804 	add.w	r8, r9, #4
     874:	687a      	ldr	r2, [r7, #4]
     876:	e000      	b.n	87a <CONFIG_ISR_STACK_SIZE+0x7a>
     878:	e033      	b.n	8e2 <CONFIG_BT_RX_STACK_SIZE+0x4a>
     87a:	f8d9 1004 	ldr.w	r1, [r9, #4]
     87e:	1a89      	subs	r1, r1, r2
     880:	0209      	lsls	r1, r1, #8
     882:	17ca      	asrs	r2, r1, #31
     884:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     888:	1209      	asrs	r1, r1, #8
     88a:	d41d      	bmi.n	8c8 <CONFIG_BT_RX_STACK_SIZE+0x30>
     88c:	f8b8 100a 	ldrh.w	r1, [r8, #10]
     890:	b339      	cbz	r1, 8e2 <CONFIG_BT_RX_STACK_SIZE+0x4a>
     892:	8941      	ldrh	r1, [r0, #10]
     894:	bb29      	cbnz	r1, 8e2 <CONFIG_BT_RX_STACK_SIZE+0x4a>
     896:	f000 fbf1 	bl	107c <CONFIG_FPROTECT_BLOCK_SIZE+0x7c>
     89a:	aa05      	add	r2, sp, #20
     89c:	a904      	add	r1, sp, #16
     89e:	f002 fc45 	bl	312c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     8a2:	f99d 0014 	ldrsb.w	r0, [sp, #20]
     8a6:	2800      	cmp	r0, #0
     8a8:	bfcc      	ite	gt
     8aa:	2001      	movgt	r0, #1
     8ac:	2000      	movle	r0, #0
     8ae:	f100 0133 	add.w	r1, r0, #51	; 0x33
     8b2:	9804      	ldr	r0, [sp, #16]
     8b4:	f8d8 2000 	ldr.w	r2, [r8]
     8b8:	1a10      	subs	r0, r2, r0
     8ba:	0200      	lsls	r0, r0, #8
     8bc:	17c2      	asrs	r2, r0, #31
     8be:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     8c2:	1200      	asrs	r0, r0, #8
     8c4:	4288      	cmp	r0, r1
     8c6:	da0c      	bge.n	8e2 <CONFIG_BT_RX_STACK_SIZE+0x4a>
     8c8:	f88a 5000 	strb.w	r5, [sl]
     8cc:	f899 1010 	ldrb.w	r1, [r9, #16]
     8d0:	7b38      	ldrb	r0, [r7, #12]
     8d2:	4281      	cmp	r1, r0
     8d4:	f67f af60 	bls.w	798 <CONFIG_BT_HCI_TX_STACK_SIZE+0x198>
     8d8:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     8dc:	7845      	ldrb	r5, [r0, #1]
     8de:	2d20      	cmp	r5, #32
     8e0:	d1c1      	bne.n	866 <CONFIG_ISR_STACK_SIZE+0x66>
     8e2:	9802      	ldr	r0, [sp, #8]
     8e4:	b009      	add	sp, #36	; 0x24
     8e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     8ea:	0000      	.short	0x0000
     8ec:	20000d5c 	.word	0x20000d5c
     8f0:	20000a5c 	.word	0x20000a5c
     8f4:	20000cdc 	.word	0x20000cdc
     8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     8fc:	4604      	mov	r4, r0
     8fe:	4847      	ldr	r0, [pc, #284]	; (a1c <CONFIG_BT_RX_STACK_SIZE+0x184>)
     900:	460e      	mov	r6, r1
     902:	eb00 0086 	add.w	r0, r0, r6, lsl #2
     906:	4f46      	ldr	r7, [pc, #280]	; (a20 <CONFIG_BT_RX_STACK_SIZE+0x188>)
     908:	f890 5020 	ldrb.w	r5, [r0, #32]
     90c:	2020      	movs	r0, #32
     90e:	b083      	sub	sp, #12
     910:	4698      	mov	r8, r3
     912:	4692      	mov	sl, r2
     914:	7010      	strb	r0, [r2, #0]
     916:	f507 7920 	add.w	r9, r7, #640	; 0x280
     91a:	2d20      	cmp	r5, #32
     91c:	bf18      	it	ne
     91e:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
     922:	d031      	beq.n	988 <CONFIG_BT_RX_STACK_SIZE+0xf0>
     924:	eb05 0085 	add.w	r0, r5, r5, lsl #2
     928:	eb07 0080 	add.w	r0, r7, r0, lsl #2
     92c:	1d01      	adds	r1, r0, #4
     92e:	6880      	ldr	r0, [r0, #8]
     930:	6822      	ldr	r2, [r4, #0]
     932:	1a10      	subs	r0, r2, r0
     934:	0200      	lsls	r0, r0, #8
     936:	17c2      	asrs	r2, r0, #31
     938:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     93c:	1200      	asrs	r0, r0, #8
     93e:	d423      	bmi.n	988 <CONFIG_BT_RX_STACK_SIZE+0xf0>
     940:	8960      	ldrh	r0, [r4, #10]
     942:	b1d0      	cbz	r0, 97a <CONFIG_BT_RX_STACK_SIZE+0xe2>
     944:	8948      	ldrh	r0, [r1, #10]
     946:	b9c0      	cbnz	r0, 97a <CONFIG_BT_RX_STACK_SIZE+0xe2>
     948:	4608      	mov	r0, r1
     94a:	f000 fb97 	bl	107c <CONFIG_FPROTECT_BLOCK_SIZE+0x7c>
     94e:	aa01      	add	r2, sp, #4
     950:	4669      	mov	r1, sp
     952:	f002 fbeb 	bl	312c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     956:	f99d 0004 	ldrsb.w	r0, [sp, #4]
     95a:	2800      	cmp	r0, #0
     95c:	bfcc      	ite	gt
     95e:	2001      	movgt	r0, #1
     960:	2000      	movle	r0, #0
     962:	f100 0133 	add.w	r1, r0, #51	; 0x33
     966:	9800      	ldr	r0, [sp, #0]
     968:	6822      	ldr	r2, [r4, #0]
     96a:	1a10      	subs	r0, r2, r0
     96c:	0200      	lsls	r0, r0, #8
     96e:	17c2      	asrs	r2, r0, #31
     970:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     974:	1200      	asrs	r0, r0, #8
     976:	4288      	cmp	r0, r1
     978:	db06      	blt.n	988 <CONFIG_BT_RX_STACK_SIZE+0xf0>
     97a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     97e:	f88a 5000 	strb.w	r5, [sl]
     982:	7845      	ldrb	r5, [r0, #1]
     984:	2d20      	cmp	r5, #32
     986:	d1cd      	bne.n	924 <CONFIG_BT_RX_STACK_SIZE+0x8c>
     988:	f89a 0000 	ldrb.w	r0, [sl]
     98c:	f888 0000 	strb.w	r0, [r8]
     990:	2d20      	cmp	r5, #32
     992:	bf18      	it	ne
     994:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
     998:	d03c      	beq.n	a14 <CONFIG_BT_RX_STACK_SIZE+0x17c>
     99a:	eb05 0185 	add.w	r1, r5, r5, lsl #2
     99e:	eb07 0981 	add.w	r9, r7, r1, lsl #2
     9a2:	6861      	ldr	r1, [r4, #4]
     9a4:	f8d9 2004 	ldr.w	r2, [r9, #4]
     9a8:	4620      	mov	r0, r4
     9aa:	1a51      	subs	r1, r2, r1
     9ac:	0209      	lsls	r1, r1, #8
     9ae:	17ca      	asrs	r2, r1, #31
     9b0:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     9b4:	f109 0604 	add.w	r6, r9, #4
     9b8:	1209      	asrs	r1, r1, #8
     9ba:	d41b      	bmi.n	9f4 <CONFIG_BT_RX_STACK_SIZE+0x15c>
     9bc:	8971      	ldrh	r1, [r6, #10]
     9be:	b349      	cbz	r1, a14 <CONFIG_BT_RX_STACK_SIZE+0x17c>
     9c0:	8941      	ldrh	r1, [r0, #10]
     9c2:	bb39      	cbnz	r1, a14 <CONFIG_BT_RX_STACK_SIZE+0x17c>
     9c4:	f000 fb5a 	bl	107c <CONFIG_FPROTECT_BLOCK_SIZE+0x7c>
     9c8:	aa01      	add	r2, sp, #4
     9ca:	4669      	mov	r1, sp
     9cc:	f002 fbae 	bl	312c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     9d0:	f99d 0004 	ldrsb.w	r0, [sp, #4]
     9d4:	2800      	cmp	r0, #0
     9d6:	bfcc      	ite	gt
     9d8:	2001      	movgt	r0, #1
     9da:	2000      	movle	r0, #0
     9dc:	f100 0133 	add.w	r1, r0, #51	; 0x33
     9e0:	9800      	ldr	r0, [sp, #0]
     9e2:	6832      	ldr	r2, [r6, #0]
     9e4:	1a10      	subs	r0, r2, r0
     9e6:	0200      	lsls	r0, r0, #8
     9e8:	17c2      	asrs	r2, r0, #31
     9ea:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     9ee:	1200      	asrs	r0, r0, #8
     9f0:	4288      	cmp	r0, r1
     9f2:	da0f      	bge.n	a14 <CONFIG_BT_RX_STACK_SIZE+0x17c>
     9f4:	f888 5000 	strb.w	r5, [r8]
     9f8:	f899 0010 	ldrb.w	r0, [r9, #16]
     9fc:	7b21      	ldrb	r1, [r4, #12]
     9fe:	4288      	cmp	r0, r1
     a00:	d803      	bhi.n	a0a <CONFIG_BT_RX_STACK_SIZE+0x172>
     a02:	b003      	add	sp, #12
     a04:	2000      	movs	r0, #0
     a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     a0a:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
     a0e:	7845      	ldrb	r5, [r0, #1]
     a10:	2d20      	cmp	r5, #32
     a12:	d1c2      	bne.n	99a <CONFIG_BT_RX_STACK_SIZE+0x102>
     a14:	b003      	add	sp, #12
     a16:	2001      	movs	r0, #1
     a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     a1c:	20000d5c 	.word	0x20000d5c
     a20:	20000a5c 	.word	0x20000a5c
     a24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a28:	f04f 0800 	mov.w	r8, #0
     a2c:	b098      	sub	sp, #96	; 0x60
     a2e:	4616      	mov	r6, r2
     a30:	460d      	mov	r5, r1
     a32:	46c3      	mov	fp, r8
     a34:	f002 f8fc 	bl	2c30 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
     a38:	4604      	mov	r4, r0
     a3a:	2d01      	cmp	r5, #1
     a3c:	bf18      	it	ne
     a3e:	2d02      	cmpne	r5, #2
     a40:	d005      	beq.n	a4e <CONFIG_BT_RX_STACK_SIZE+0x1b6>
     a42:	f640 117b 	movw	r1, #2427	; 0x97b
     a46:	f04f 0070 	mov.w	r0, #112	; 0x70
     a4a:	f002 ff07 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     a4e:	49fe      	ldr	r1, [pc, #1016]	; (e48 <CONFIG_BT_RX_STACK_SIZE+0x5b0>)
     a50:	2001      	movs	r0, #1
     a52:	6008      	str	r0, [r1, #0]
     a54:	49fd      	ldr	r1, [pc, #1012]	; (e4c <CONFIG_BT_RX_STACK_SIZE+0x5b4>)
     a56:	6889      	ldr	r1, [r1, #8]
     a58:	6008      	str	r0, [r1, #0]
     a5a:	2000      	movs	r0, #0
     a5c:	9006      	str	r0, [sp, #24]
     a5e:	1e40      	subs	r0, r0, #1
     a60:	9008      	str	r0, [sp, #32]
     a62:	49fb      	ldr	r1, [pc, #1004]	; (e50 <CONFIG_BT_RX_STACK_SIZE+0x5b8>)
     a64:	eb06 0086 	add.w	r0, r6, r6, lsl #2
     a68:	eb01 0380 	add.w	r3, r1, r0, lsl #2
     a6c:	1d1b      	adds	r3, r3, #4
     a6e:	af09      	add	r7, sp, #36	; 0x24
     a70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     a72:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
     a76:	a809      	add	r0, sp, #36	; 0x24
     a78:	f000 fb00 	bl	107c <CONFIG_FPROTECT_BLOCK_SIZE+0x7c>
     a7c:	9007      	str	r0, [sp, #28]
     a7e:	48f4      	ldr	r0, [pc, #976]	; (e50 <CONFIG_BT_RX_STACK_SIZE+0x5b8>)
     a80:	f8bd 902e 	ldrh.w	r9, [sp, #46]	; 0x2e
     a84:	f8b0 031c 	ldrh.w	r0, [r0, #796]	; 0x31c
     a88:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
     a8c:	f1b9 0f00 	cmp.w	r9, #0
     a90:	bf14      	ite	ne
     a92:	f04f 0a01 	movne.w	sl, #1
     a96:	f04f 0a00 	moveq.w	sl, #0
     a9a:	9809      	ldr	r0, [sp, #36]	; 0x24
     a9c:	9012      	str	r0, [sp, #72]	; 0x48
     a9e:	f1ba 0f00 	cmp.w	sl, #0
     aa2:	d009      	beq.n	ab8 <CONFIG_BT_RX_STACK_SIZE+0x220>
     aa4:	48eb      	ldr	r0, [pc, #940]	; (e54 <CONFIG_BT_RX_STACK_SIZE+0x5bc>)
     aa6:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
     aaa:	b928      	cbnz	r0, ab8 <CONFIG_BT_RX_STACK_SIZE+0x220>
     aac:	f002 fe72 	bl	3794 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     ab0:	2800      	cmp	r0, #0
     ab2:	bf08      	it	eq
     ab4:	2701      	moveq	r7, #1
     ab6:	d000      	beq.n	aba <CONFIG_BT_RX_STACK_SIZE+0x222>
     ab8:	2700      	movs	r7, #0
     aba:	48e7      	ldr	r0, [pc, #924]	; (e58 <CONFIG_BT_RX_STACK_SIZE+0x5c0>)
     abc:	2200      	movs	r2, #0
     abe:	9214      	str	r2, [sp, #80]	; 0x50
     ac0:	7800      	ldrb	r0, [r0, #0]
     ac2:	4616      	mov	r6, r2
     ac4:	2801      	cmp	r0, #1
     ac6:	bf18      	it	ne
     ac8:	2803      	cmpne	r0, #3
     aca:	d143      	bne.n	b54 <CONFIG_BT_RX_STACK_SIZE+0x2bc>
     acc:	48e2      	ldr	r0, [pc, #904]	; (e58 <CONFIG_BT_RX_STACK_SIZE+0x5c0>)
     ace:	f8b0 8002 	ldrh.w	r8, [r0, #2]
     ad2:	eba8 0009 	sub.w	r0, r8, r9
     ad6:	9014      	str	r0, [sp, #80]	; 0x50
     ad8:	45c1      	cmp	r9, r8
     ada:	d23b      	bcs.n	b54 <CONFIG_BT_RX_STACK_SIZE+0x2bc>
     adc:	a803      	add	r0, sp, #12
     ade:	9005      	str	r0, [sp, #20]
     ae0:	a817      	add	r0, sp, #92	; 0x5c
     ae2:	9010      	str	r0, [sp, #64]	; 0x40
     ae4:	9907      	ldr	r1, [sp, #28]
     ae6:	f108 0003 	add.w	r0, r8, #3
     aea:	4242      	negs	r2, r0
     aec:	f8df c36c 	ldr.w	ip, [pc, #876]	; e5c <CONFIG_BT_RX_STACK_SIZE+0x5c4>
     af0:	1a08      	subs	r0, r1, r0
     af2:	2300      	movs	r3, #0
     af4:	ebbc 0101 	subs.w	r1, ip, r1
     af8:	eb73 0103 	sbcs.w	r1, r3, r3
     afc:	d204      	bcs.n	b08 <CONFIG_BT_RX_STACK_SIZE+0x270>
     afe:	f240 51f1 	movw	r1, #1521	; 0x5f1
     b02:	2070      	movs	r0, #112	; 0x70
     b04:	f002 feaa 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     b08:	49d5      	ldr	r1, [pc, #852]	; (e60 <CONFIG_BT_RX_STACK_SIZE+0x5c8>)
     b0a:	428a      	cmp	r2, r1
     b0c:	dd04      	ble.n	b18 <CONFIG_BT_RX_STACK_SIZE+0x280>
     b0e:	f240 51f2 	movw	r1, #1522	; 0x5f2
     b12:	2070      	movs	r0, #112	; 0x70
     b14:	f002 fea2 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     b18:	49d2      	ldr	r1, [pc, #840]	; (e64 <CONFIG_BT_RX_STACK_SIZE+0x5cc>)
     b1a:	428a      	cmp	r2, r1
     b1c:	da04      	bge.n	b28 <CONFIG_BT_RX_STACK_SIZE+0x290>
     b1e:	f240 51f3 	movw	r1, #1523	; 0x5f3
     b22:	2070      	movs	r0, #112	; 0x70
     b24:	f002 fe9a 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     b28:	49cf      	ldr	r1, [pc, #828]	; (e68 <CONFIG_BT_RX_STACK_SIZE+0x5d0>)
     b2a:	4288      	cmp	r0, r1
     b2c:	bfa8      	it	ge
     b2e:	49cf      	ldrge	r1, [pc, #828]	; (e6c <CONFIG_BT_RX_STACK_SIZE+0x5d4>)
     b30:	da03      	bge.n	b3a <CONFIG_BT_RX_STACK_SIZE+0x2a2>
     b32:	2800      	cmp	r0, #0
     b34:	bfb8      	it	lt
     b36:	49cc      	ldrlt	r1, [pc, #816]	; (e68 <CONFIG_BT_RX_STACK_SIZE+0x5d0>)
     b38:	da00      	bge.n	b3c <CONFIG_BT_RX_STACK_SIZE+0x2a4>
     b3a:	1840      	adds	r0, r0, r1
     b3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
     b3e:	9905      	ldr	r1, [sp, #20]
     b40:	f002 faf4 	bl	312c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     b44:	9803      	ldr	r0, [sp, #12]
     b46:	9909      	ldr	r1, [sp, #36]	; 0x24
     b48:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     b4c:	9003      	str	r0, [sp, #12]
     b4e:	1a08      	subs	r0, r1, r0
     b50:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
     b54:	2f00      	cmp	r7, #0
     b56:	bf18      	it	ne
     b58:	2632      	movne	r6, #50	; 0x32
     b5a:	d104      	bne.n	b66 <CONFIG_BT_RX_STACK_SIZE+0x2ce>
     b5c:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
     b60:	2800      	cmp	r0, #0
     b62:	bf18      	it	ne
     b64:	2602      	movne	r6, #2
     b66:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     b6a:	d008      	beq.n	b7e <CONFIG_BT_RX_STACK_SIZE+0x2e6>
     b6c:	9809      	ldr	r0, [sp, #36]	; 0x24
     b6e:	1b00      	subs	r0, r0, r4
     b70:	0200      	lsls	r0, r0, #8
     b72:	17c1      	asrs	r1, r0, #31
     b74:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     b78:	1200      	asrs	r0, r0, #8
     b7a:	2801      	cmp	r0, #1
     b7c:	da02      	bge.n	b84 <CONFIG_BT_RX_STACK_SIZE+0x2ec>
     b7e:	2004      	movs	r0, #4
     b80:	9918      	ldr	r1, [sp, #96]	; 0x60
     b82:	e00b      	b.n	b9c <CONFIG_BT_RX_STACK_SIZE+0x304>
     b84:	b147      	cbz	r7, b98 <CONFIG_BT_RX_STACK_SIZE+0x300>
     b86:	48b3      	ldr	r0, [pc, #716]	; (e54 <CONFIG_BT_RX_STACK_SIZE+0x5bc>)
     b88:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
     b8c:	b120      	cbz	r0, b98 <CONFIG_BT_RX_STACK_SIZE+0x300>
     b8e:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
     b92:	1c06      	adds	r6, r0, #0
     b94:	bf18      	it	ne
     b96:	2602      	movne	r6, #2
     b98:	4621      	mov	r1, r4
     b9a:	2001      	movs	r0, #1
     b9c:	f1b9 0f00 	cmp.w	r9, #0
     ba0:	d002      	beq.n	ba8 <CONFIG_BT_RX_STACK_SIZE+0x310>
     ba2:	9b14      	ldr	r3, [sp, #80]	; 0x50
     ba4:	2b1e      	cmp	r3, #30
     ba6:	da02      	bge.n	bae <CONFIG_BT_RX_STACK_SIZE+0x316>
     ba8:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
     bac:	b113      	cbz	r3, bb4 <CONFIG_BT_RX_STACK_SIZE+0x31c>
     bae:	f04f 0b01 	mov.w	fp, #1
     bb2:	1e40      	subs	r0, r0, #1
     bb4:	1983      	adds	r3, r0, r6
     bb6:	48a8      	ldr	r0, [pc, #672]	; (e58 <CONFIG_BT_RX_STACK_SIZE+0x5c0>)
     bb8:	f89d 6035 	ldrb.w	r6, [sp, #53]	; 0x35
     bbc:	7800      	ldrb	r0, [r0, #0]
     bbe:	9015      	str	r0, [sp, #84]	; 0x54
     bc0:	9809      	ldr	r0, [sp, #36]	; 0x24
     bc2:	1a80      	subs	r0, r0, r2
     bc4:	f020 4c7f 	bic.w	ip, r0, #4278190080	; 0xff000000
     bc8:	ebac 0001 	sub.w	r0, ip, r1
     bcc:	0200      	lsls	r0, r0, #8
     bce:	ea4f 7ee0 	mov.w	lr, r0, asr #31
     bd2:	eb00 601e 	add.w	r0, r0, lr, lsr #24
     bd6:	1200      	asrs	r0, r0, #8
     bd8:	4298      	cmp	r0, r3
     bda:	db18      	blt.n	c0e <CONFIG_BT_RX_STACK_SIZE+0x376>
     bdc:	2a00      	cmp	r2, #0
     bde:	bf18      	it	ne
     be0:	f8cd c024 	strne.w	ip, [sp, #36]	; 0x24
     be4:	9e09      	ldr	r6, [sp, #36]	; 0x24
     be6:	9710      	str	r7, [sp, #64]	; 0x40
     be8:	2700      	movs	r7, #0
     bea:	f001 ff1b 	bl	2a24 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
     bee:	1a30      	subs	r0, r6, r0
     bf0:	0200      	lsls	r0, r0, #8
     bf2:	17c1      	asrs	r1, r0, #31
     bf4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     bf8:	1200      	asrs	r0, r0, #8
     bfa:	283e      	cmp	r0, #62	; 0x3e
     bfc:	da3e      	bge.n	c7c <CONFIG_BT_RX_STACK_SIZE+0x3e4>
     bfe:	2d01      	cmp	r5, #1
     c00:	d01f      	beq.n	c42 <CONFIG_BT_RX_STACK_SIZE+0x3aa>
     c02:	1e70      	subs	r0, r6, #1
     c04:	9910      	ldr	r1, [sp, #64]	; 0x40
     c06:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     c0a:	b311      	cbz	r1, c52 <CONFIG_BT_RX_STACK_SIZE+0x3ba>
     c0c:	e02c      	b.n	c68 <CONFIG_BT_RX_STACK_SIZE+0x3d0>
     c0e:	b17a      	cbz	r2, c30 <CONFIG_BT_RX_STACK_SIZE+0x398>
     c10:	2e00      	cmp	r6, #0
     c12:	bf04      	itt	eq
     c14:	9815      	ldreq	r0, [sp, #84]	; 0x54
     c16:	2803      	cmpeq	r0, #3
     c18:	d00a      	beq.n	c30 <CONFIG_BT_RX_STACK_SIZE+0x398>
     c1a:	b927      	cbnz	r7, c26 <CONFIG_BT_RX_STACK_SIZE+0x38e>
     c1c:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
     c20:	2800      	cmp	r0, #0
     c22:	bf18      	it	ne
     c24:	1e9b      	subne	r3, r3, #2
     c26:	2200      	movs	r2, #0
     c28:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
     c2c:	4690      	mov	r8, r2
     c2e:	e7c7      	b.n	bc0 <CONFIG_BT_RX_STACK_SIZE+0x328>
     c30:	bb07      	cbnz	r7, c74 <CONFIG_BT_RX_STACK_SIZE+0x3dc>
     c32:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
     c36:	b1e8      	cbz	r0, c74 <CONFIG_BT_RX_STACK_SIZE+0x3dc>
     c38:	2000      	movs	r0, #0
     c3a:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
     c3e:	1e9b      	subs	r3, r3, #2
     c40:	e7be      	b.n	bc0 <CONFIG_BT_RX_STACK_SIZE+0x328>
     c42:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     c46:	d120      	bne.n	c8a <CONFIG_BT_RX_STACK_SIZE+0x3f2>
     c48:	f640 01f4 	movw	r1, #2292	; 0x8f4
     c4c:	2070      	movs	r0, #112	; 0x70
     c4e:	f002 fe05 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c52:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     c56:	d007      	beq.n	c68 <CONFIG_BT_RX_STACK_SIZE+0x3d0>
     c58:	1a21      	subs	r1, r4, r0
     c5a:	0209      	lsls	r1, r1, #8
     c5c:	17ca      	asrs	r2, r1, #31
     c5e:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     c62:	1209      	asrs	r1, r1, #8
     c64:	2904      	cmp	r1, #4
     c66:	dd03      	ble.n	c70 <CONFIG_BT_RX_STACK_SIZE+0x3d8>
     c68:	4604      	mov	r4, r0
     c6a:	f001 fee1 	bl	2a30 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     c6e:	e00c      	b.n	c8a <CONFIG_BT_RX_STACK_SIZE+0x3f2>
     c70:	2900      	cmp	r1, #0
     c72:	dd0a      	ble.n	c8a <CONFIG_BT_RX_STACK_SIZE+0x3f2>
     c74:	b01b      	add	sp, #108	; 0x6c
     c76:	2000      	movs	r0, #0
     c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c7c:	1e70      	subs	r0, r6, #1
     c7e:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
     c82:	4620      	mov	r0, r4
     c84:	f001 fed4 	bl	2a30 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     c88:	4657      	mov	r7, sl
     c8a:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     c8e:	d028      	beq.n	ce2 <CONFIG_BT_RX_STACK_SIZE+0x44a>
     c90:	9809      	ldr	r0, [sp, #36]	; 0x24
     c92:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
     c96:	1b00      	subs	r0, r0, r4
     c98:	f08b 0301 	eor.w	r3, fp, #1
     c9c:	4a74      	ldr	r2, [pc, #464]	; (e70 <CONFIG_BT_RX_STACK_SIZE+0x5d8>)
     c9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     ca2:	ebac 0c04 	sub.w	ip, ip, r4
     ca6:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
     caa:	4283      	cmp	r3, r0
     cac:	bf98      	it	ls
     cae:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
     cb2:	d2df      	bcs.n	c74 <CONFIG_BT_RX_STACK_SIZE+0x3dc>
     cb4:	4562      	cmp	r2, ip
     cb6:	d3dd      	bcc.n	c74 <CONFIG_BT_RX_STACK_SIZE+0x3dc>
     cb8:	4620      	mov	r0, r4
     cba:	f00b f8e4 	bl	be86 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
     cbe:	4a67      	ldr	r2, [pc, #412]	; (e5c <CONFIG_BT_RX_STACK_SIZE+0x5c4>)
     cc0:	9907      	ldr	r1, [sp, #28]
     cc2:	1c53      	adds	r3, r2, #1
     cc4:	1a0e      	subs	r6, r1, r0
     cc6:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
     cca:	bf24      	itt	cs
     ccc:	eba0 0c01 	subcs.w	ip, r0, r1
     cd0:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
     cd4:	d310      	bcc.n	cf8 <CONFIG_BT_RX_STACK_SIZE+0x460>
     cd6:	42b2      	cmp	r2, r6
     cd8:	d208      	bcs.n	cec <CONFIG_BT_RX_STACK_SIZE+0x454>
     cda:	1a10      	subs	r0, r2, r0
     cdc:	4408      	add	r0, r1
     cde:	1c46      	adds	r6, r0, #1
     ce0:	e00a      	b.n	cf8 <CONFIG_BT_RX_STACK_SIZE+0x460>
     ce2:	f640 2113 	movw	r1, #2579	; 0xa13
     ce6:	2070      	movs	r0, #112	; 0x70
     ce8:	f002 fdb8 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     cec:	4562      	cmp	r2, ip
     cee:	d22c      	bcs.n	d4a <CONFIG_BT_RX_STACK_SIZE+0x4b2>
     cf0:	1a51      	subs	r1, r2, r1
     cf2:	4408      	add	r0, r1
     cf4:	1c40      	adds	r0, r0, #1
     cf6:	4246      	negs	r6, r0
     cf8:	4856      	ldr	r0, [pc, #344]	; (e54 <CONFIG_BT_RX_STACK_SIZE+0x5bc>)
     cfa:	7f80      	ldrb	r0, [r0, #30]
     cfc:	b350      	cbz	r0, d54 <CONFIG_BT_RX_STACK_SIZE+0x4bc>
     cfe:	4628      	mov	r0, r5
     d00:	4645      	mov	r5, r8
     d02:	f04f 0b00 	mov.w	fp, #0
     d06:	46d8      	mov	r8, fp
     d08:	2801      	cmp	r0, #1
     d0a:	d005      	beq.n	d18 <CONFIG_BT_RX_STACK_SIZE+0x480>
     d0c:	2002      	movs	r0, #2
     d0e:	f002 f8d7 	bl	2ec0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     d12:	2001      	movs	r0, #1
     d14:	f002 f8d4 	bl	2ec0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     d18:	45a9      	cmp	r9, r5
     d1a:	d22c      	bcs.n	d76 <CONFIG_BT_RX_STACK_SIZE+0x4de>
     d1c:	eba6 0105 	sub.w	r1, r6, r5
     d20:	f04f 0301 	mov.w	r3, #1
     d24:	f04f 0203 	mov.w	r2, #3
     d28:	f04f 0002 	mov.w	r0, #2
     d2c:	f002 f800 	bl	2d30 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     d30:	2800      	cmp	r0, #0
     d32:	bf08      	it	eq
     d34:	f04f 0801 	moveq.w	r8, #1
     d38:	f1b9 0f00 	cmp.w	r9, #0
     d3c:	d035      	beq.n	daa <CONFIG_BT_RX_STACK_SIZE+0x512>
     d3e:	2301      	movs	r3, #1
     d40:	eba6 0109 	sub.w	r1, r6, r9
     d44:	2203      	movs	r2, #3
     d46:	4618      	mov	r0, r3
     d48:	e023      	b.n	d92 <CONFIG_BT_RX_STACK_SIZE+0x4fa>
     d4a:	f640 21f3 	movw	r1, #2803	; 0xaf3
     d4e:	2070      	movs	r0, #112	; 0x70
     d50:	f002 fd84 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     d54:	45c1      	cmp	r9, r8
     d56:	bf34      	ite	cc
     d58:	4640      	movcc	r0, r8
     d5a:	4648      	movcs	r0, r9
     d5c:	f1bb 0f00 	cmp.w	fp, #0
     d60:	bf14      	ite	ne
     d62:	2100      	movne	r1, #0
     d64:	211e      	moveq	r1, #30
     d66:	4408      	add	r0, r1
     d68:	42b0      	cmp	r0, r6
     d6a:	dbc8      	blt.n	cfe <CONFIG_BT_RX_STACK_SIZE+0x466>
     d6c:	f640 2126 	movw	r1, #2598	; 0xa26
     d70:	2070      	movs	r0, #112	; 0x70
     d72:	f002 fd73 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     d76:	d910      	bls.n	d9a <CONFIG_BT_RX_STACK_SIZE+0x502>
     d78:	2301      	movs	r3, #1
     d7a:	eba6 0109 	sub.w	r1, r6, r9
     d7e:	2203      	movs	r2, #3
     d80:	4618      	mov	r0, r3
     d82:	f001 ffd5 	bl	2d30 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     d86:	b328      	cbz	r0, dd4 <CONFIG_BT_RX_STACK_SIZE+0x53c>
     d88:	b17d      	cbz	r5, daa <CONFIG_BT_RX_STACK_SIZE+0x512>
     d8a:	1b71      	subs	r1, r6, r5
     d8c:	2301      	movs	r3, #1
     d8e:	2203      	movs	r2, #3
     d90:	2002      	movs	r0, #2
     d92:	f001 ffcd 	bl	2d30 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     d96:	b1e8      	cbz	r0, dd4 <CONFIG_BT_RX_STACK_SIZE+0x53c>
     d98:	e007      	b.n	daa <CONFIG_BT_RX_STACK_SIZE+0x512>
     d9a:	ea55 0009 	orrs.w	r0, r5, r9
     d9e:	d004      	beq.n	daa <CONFIG_BT_RX_STACK_SIZE+0x512>
     da0:	f640 115e 	movw	r1, #2398	; 0x95e
     da4:	2070      	movs	r0, #112	; 0x70
     da6:	f002 fd59 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     daa:	2301      	movs	r3, #1
     dac:	2203      	movs	r2, #3
     dae:	4631      	mov	r1, r6
     db0:	2000      	movs	r0, #0
     db2:	f001 ffbd 	bl	2d30 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     db6:	b168      	cbz	r0, dd4 <CONFIG_BT_RX_STACK_SIZE+0x53c>
     db8:	2501      	movs	r5, #1
     dba:	f1b8 0f00 	cmp.w	r8, #0
     dbe:	d003      	beq.n	dc8 <CONFIG_BT_RX_STACK_SIZE+0x530>
     dc0:	9812      	ldr	r0, [sp, #72]	; 0x48
     dc2:	9009      	str	r0, [sp, #36]	; 0x24
     dc4:	f88d b034 	strb.w	fp, [sp, #52]	; 0x34
     dc8:	f8df 80a8 	ldr.w	r8, [pc, #168]	; e74 <CONFIG_BT_RX_STACK_SIZE+0x5dc>
     dcc:	f1ba 0f00 	cmp.w	sl, #0
     dd0:	d10e      	bne.n	df0 <CONFIG_BT_RX_STACK_SIZE+0x558>
     dd2:	e009      	b.n	de8 <CONFIG_BT_RX_STACK_SIZE+0x550>
     dd4:	2002      	movs	r0, #2
     dd6:	f002 f873 	bl	2ec0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     dda:	2001      	movs	r0, #1
     ddc:	f002 f870 	bl	2ec0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     de0:	b01b      	add	sp, #108	; 0x6c
     de2:	2000      	movs	r0, #0
     de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     de8:	481a      	ldr	r0, [pc, #104]	; (e54 <CONFIG_BT_RX_STACK_SIZE+0x5bc>)
     dea:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
     dee:	b100      	cbz	r0, df2 <CONFIG_BT_RX_STACK_SIZE+0x55a>
     df0:	b34f      	cbz	r7, e46 <CONFIG_BT_RX_STACK_SIZE+0x5ae>
     df2:	f8df a060 	ldr.w	sl, [pc, #96]	; e54 <CONFIG_BT_RX_STACK_SIZE+0x5bc>
     df6:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
     dfa:	b118      	cbz	r0, e04 <CONFIG_BT_RX_STACK_SIZE+0x56c>
     dfc:	f002 fb74 	bl	34e8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
     e00:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
     e04:	b3e7      	cbz	r7, e80 <CONFIG_BT_RX_STACK_SIZE+0x5e8>
     e06:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
     e0a:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     e0e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     e12:	f8c8 0000 	str.w	r0, [r8]
     e16:	2300      	movs	r3, #0
     e18:	2203      	movs	r2, #3
     e1a:	2005      	movs	r0, #5
     e1c:	f001 ff88 	bl	2d30 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     e20:	b378      	cbz	r0, e82 <CONFIG_BT_RX_STACK_SIZE+0x5ea>
     e22:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
     e26:	2005      	movs	r0, #5
     e28:	f002 f92a 	bl	3080 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
     e2c:	4912      	ldr	r1, [pc, #72]	; (e78 <CONFIG_BT_RX_STACK_SIZE+0x5e0>)
     e2e:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
     e32:	f8c1 4514 	str.w	r4, [r1, #1300]	; 0x514
     e36:	4911      	ldr	r1, [pc, #68]	; (e7c <CONFIG_BT_RX_STACK_SIZE+0x5e4>)
     e38:	12e0      	asrs	r0, r4, #11
     e3a:	6008      	str	r0, [r1, #0]
     e3c:	4c05      	ldr	r4, [pc, #20]	; (e54 <CONFIG_BT_RX_STACK_SIZE+0x5bc>)
     e3e:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
     e42:	b3e0      	cbz	r0, ebe <CONFIG_BT_RX_STACK_SIZE+0x626>
     e44:	e05d      	b.n	f02 <CONFIG_BT_RX_STACK_SIZE+0x66a>
     e46:	e01d      	b.n	e84 <CONFIG_BT_RX_STACK_SIZE+0x5ec>
     e48:	40000508 	.word	0x40000508
     e4c:	2000000c 	.word	0x2000000c
     e50:	20000a5c 	.word	0x20000a5c
     e54:	20000d5c 	.word	0x20000d5c
     e58:	2000000e 	.word	0x2000000e
     e5c:	1e847fff 	.word	0x1e847fff
     e60:	07a12000 	.word	0x07a12000
     e64:	f85ee000 	.word	0xf85ee000
     e68:	1e848000 	.word	0x1e848000
     e6c:	e17b8000 	.word	0xe17b8000
     e70:	003fffff 	.word	0x003fffff
     e74:	4001f508 	.word	0x4001f508
     e78:	4001f098 	.word	0x4001f098
     e7c:	4001f504 	.word	0x4001f504
     e80:	e005      	b.n	e8e <CONFIG_BT_RX_STACK_SIZE+0x5f6>
     e82:	e035      	b.n	ef0 <CONFIG_BT_RX_STACK_SIZE+0x658>
     e84:	f8df a0b8 	ldr.w	sl, [pc, #184]	; f40 <CONFIG_BT_RX_STACK_SIZE+0x6a8>
     e88:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
     e8c:	b358      	cbz	r0, ee6 <CONFIG_BT_RX_STACK_SIZE+0x64e>
     e8e:	4c2c      	ldr	r4, [pc, #176]	; (f40 <CONFIG_BT_RX_STACK_SIZE+0x6a8>)
     e90:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
     e94:	b150      	cbz	r0, eac <CONFIG_BT_RX_STACK_SIZE+0x614>
     e96:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     e9a:	f8c8 0000 	str.w	r0, [r8]
     e9e:	2005      	movs	r0, #5
     ea0:	f002 f80e 	bl	2ec0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     ea4:	f002 fb88 	bl	35b8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
     ea8:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
     eac:	ac06      	add	r4, sp, #24
     eae:	4825      	ldr	r0, [pc, #148]	; (f44 <CONFIG_BT_RX_STACK_SIZE+0x6ac>)
     eb0:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     eb4:	f8c0 1300 	str.w	r1, [r0, #768]	; 0x300
     eb8:	f8c0 2304 	str.w	r2, [r0, #772]	; 0x304
     ebc:	e000      	b.n	ec0 <CONFIG_BT_RX_STACK_SIZE+0x628>
     ebe:	e01c      	b.n	efa <CONFIG_BT_RX_STACK_SIZE+0x662>
     ec0:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
     ec4:	f8c0 c30c 	str.w	ip, [r0, #780]	; 0x30c
     ec8:	ac0a      	add	r4, sp, #40	; 0x28
     eca:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     ece:	f8c0 1310 	str.w	r1, [r0, #784]	; 0x310
     ed2:	f8c0 2314 	str.w	r2, [r0, #788]	; 0x314
     ed6:	f8c0 3318 	str.w	r3, [r0, #792]	; 0x318
     eda:	f8c0 c31c 	str.w	ip, [r0, #796]	; 0x31c
     ede:	b01b      	add	sp, #108	; 0x6c
     ee0:	2001      	movs	r0, #1
     ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ee6:	f002 fb1b 	bl	3520 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
     eea:	f88a 502c 	strb.w	r5, [sl, #44]	; 0x2c
     eee:	e789      	b.n	e04 <CONFIG_BT_RX_STACK_SIZE+0x56c>
     ef0:	f44f 7153 	mov.w	r1, #844	; 0x34c
     ef4:	2070      	movs	r0, #112	; 0x70
     ef6:	f002 fcb1 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     efa:	f002 fb4f 	bl	359c <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
     efe:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
     f02:	eba6 0009 	sub.w	r0, r6, r9
     f06:	f1a0 0119 	sub.w	r1, r0, #25
     f0a:	2900      	cmp	r1, #0
     f0c:	dc04      	bgt.n	f18 <CONFIG_BT_RX_STACK_SIZE+0x680>
     f0e:	f44f 6125 	mov.w	r1, #2640	; 0xa50
     f12:	2070      	movs	r0, #112	; 0x70
     f14:	f002 fca2 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f18:	2203      	movs	r2, #3
     f1a:	2301      	movs	r3, #1
     f1c:	4610      	mov	r0, r2
     f1e:	f001 ff07 	bl	2d30 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     f22:	b138      	cbz	r0, f34 <CONFIG_BT_RX_STACK_SIZE+0x69c>
     f24:	4808      	ldr	r0, [pc, #32]	; (f48 <CONFIG_BT_RX_STACK_SIZE+0x6b0>)
     f26:	6880      	ldr	r0, [r0, #8]
     f28:	f8c0 b000 	str.w	fp, [r0]
     f2c:	4807      	ldr	r0, [pc, #28]	; (f4c <CONFIG_BT_RX_STACK_SIZE+0x6b4>)
     f2e:	f8c0 b000 	str.w	fp, [r0]
     f32:	e7bb      	b.n	eac <CONFIG_BT_RX_STACK_SIZE+0x614>
     f34:	f640 215b 	movw	r1, #2651	; 0xa5b
     f38:	2070      	movs	r0, #112	; 0x70
     f3a:	f002 fc8f 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f3e:	0000      	.short	0x0000
     f40:	20000d5c 	.word	0x20000d5c
     f44:	20000a5c 	.word	0x20000a5c
     f48:	2000000c 	.word	0x2000000c
     f4c:	40000508 	.word	0x40000508
     f50:	b510      	push	{r4, lr}
     f52:	4c15      	ldr	r4, [pc, #84]	; (fa8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x8>)
     f54:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
     f58:	2820      	cmp	r0, #32
     f5a:	bf18      	it	ne
     f5c:	bd10      	popne	{r4, pc}
     f5e:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
     f62:	eb04 0082 	add.w	r0, r4, r2, lsl #2
     f66:	f890 1020 	ldrb.w	r1, [r0, #32]
     f6a:	2920      	cmp	r1, #32
     f6c:	d017      	beq.n	f9e <CONFIG_BT_RX_STACK_SIZE+0x706>
     f6e:	f8df c03c 	ldr.w	ip, [pc, #60]	; fac <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0xc>
     f72:	eb0c 1382 	add.w	r3, ip, r2, lsl #6
     f76:	eb03 0341 	add.w	r3, r3, r1, lsl #1
     f7a:	785b      	ldrb	r3, [r3, #1]
     f7c:	f880 3020 	strb.w	r3, [r0, #32]
     f80:	2301      	movs	r3, #1
     f82:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
     f86:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
     f8a:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
     f8e:	2002      	movs	r0, #2
     f90:	f000 f8b2 	bl	10f8 <CONFIG_FPROTECT_BLOCK_SIZE+0xf8>
     f94:	2000      	movs	r0, #0
     f96:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
     f9a:	77a0      	strb	r0, [r4, #30]
     f9c:	bd10      	pop	{r4, pc}
     f9e:	f240 3199 	movw	r1, #921	; 0x399
     fa2:	2070      	movs	r0, #112	; 0x70
     fa4:	f002 fc5a 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     fa8:	20000d5c 	.word	0x20000d5c
     fac:	20000cdc 	.word	0x20000cdc
     fb0:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     fb4:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 106c <CONFIG_FPROTECT_BLOCK_SIZE+0x6c>
     fb8:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
     fbc:	eb08 0085 	add.w	r0, r8, r5, lsl #2
     fc0:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
     fc4:	2c20      	cmp	r4, #32
     fc6:	bf08      	it	eq
     fc8:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     fcc:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>
     fd0:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 1074 <CONFIG_FPROTECT_BLOCK_SIZE+0x74>
     fd4:	f5a9 7b20 	sub.w	fp, r9, #640	; 0x280
     fd8:	eb09 1785 	add.w	r7, r9, r5, lsl #6
     fdc:	2607      	movs	r6, #7
     fde:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
     fe2:	2801      	cmp	r0, #1
     fe4:	d00e      	beq.n	1004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>
     fe6:	2804      	cmp	r0, #4
     fe8:	bf08      	it	eq
     fea:	2602      	moveq	r6, #2
     fec:	d00a      	beq.n	1004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>
     fee:	2805      	cmp	r0, #5
     ff0:	bf0c      	ite	eq
     ff2:	2603      	moveq	r6, #3
     ff4:	2806      	cmpne	r0, #6
     ff6:	d005      	beq.n	1004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>
     ff8:	f640 01c1 	movw	r1, #2241	; 0x8c1
     ffc:	f04f 0070 	mov.w	r0, #112	; 0x70
    1000:	f002 fc2c 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1004:	f1ba 0f00 	cmp.w	sl, #0
    1008:	bf18      	it	ne
    100a:	f3af 8000 	nopne.w
    100e:	f3ef 8010 	mrs	r0, PRIMASK
    1012:	b672      	cpsid	i
    1014:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    1018:	784a      	ldrb	r2, [r1, #1]
    101a:	eb08 0185 	add.w	r1, r8, r5, lsl #2
    101e:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    1022:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    1026:	42a2      	cmp	r2, r4
    1028:	bf04      	itt	eq
    102a:	2220      	moveq	r2, #32
    102c:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    1030:	b1a8      	cbz	r0, 105e <CONFIG_FPROTECT_BLOCK_SIZE+0x5e>
    1032:	462a      	mov	r2, r5
    1034:	4621      	mov	r1, r4
    1036:	2001      	movs	r0, #1
    1038:	f000 f85e 	bl	10f8 <CONFIG_FPROTECT_BLOCK_SIZE+0xf8>
    103c:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    1040:	4631      	mov	r1, r6
    1042:	f85b 2020 	ldr.w	r2, [fp, r0, lsl #2]
    1046:	4620      	mov	r0, r4
    1048:	4790      	blx	r2
    104a:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    104e:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    1052:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1056:	2c20      	cmp	r4, #32
    1058:	d1be      	bne.n	fd8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x38>
    105a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    105e:	4806      	ldr	r0, [pc, #24]	; (1078 <CONFIG_FPROTECT_BLOCK_SIZE+0x78>)
    1060:	2800      	cmp	r0, #0
    1062:	bf18      	it	ne
    1064:	f3af 8000 	nopne.w
    1068:	b662      	cpsie	i
    106a:	e7e2      	b.n	1032 <CONFIG_FPROTECT_BLOCK_SIZE+0x32>
    106c:	20000d5c 	.word	0x20000d5c
    1070:	00000000 	.word	0x00000000
    1074:	20000cdc 	.word	0x20000cdc
    1078:	00000000 	.word	0x00000000
    107c:	b510      	push	{r4, lr}
    107e:	4604      	mov	r4, r0
    1080:	6800      	ldr	r0, [r0, #0]
    1082:	f00a ff00 	bl	be86 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    1086:	4601      	mov	r1, r0
    1088:	8960      	ldrh	r0, [r4, #10]
    108a:	f994 2008 	ldrsb.w	r2, [r4, #8]
    108e:	f8df c054 	ldr.w	ip, [pc, #84]	; 10e4 <CONFIG_FPROTECT_BLOCK_SIZE+0xe4>
    1092:	4410      	add	r0, r2
    1094:	1cc2      	adds	r2, r0, #3
    1096:	1888      	adds	r0, r1, r2
    1098:	2300      	movs	r3, #0
    109a:	ebbc 0101 	subs.w	r1, ip, r1
    109e:	eb73 0103 	sbcs.w	r1, r3, r3
    10a2:	d204      	bcs.n	10ae <CONFIG_FPROTECT_BLOCK_SIZE+0xae>
    10a4:	f240 51f1 	movw	r1, #1521	; 0x5f1
    10a8:	2070      	movs	r0, #112	; 0x70
    10aa:	f002 fbd7 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10ae:	490e      	ldr	r1, [pc, #56]	; (10e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>)
    10b0:	428a      	cmp	r2, r1
    10b2:	dd04      	ble.n	10be <CONFIG_FPROTECT_BLOCK_SIZE+0xbe>
    10b4:	f240 51f2 	movw	r1, #1522	; 0x5f2
    10b8:	2070      	movs	r0, #112	; 0x70
    10ba:	f002 fbcf 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10be:	490b      	ldr	r1, [pc, #44]	; (10ec <CONFIG_FPROTECT_BLOCK_SIZE+0xec>)
    10c0:	428a      	cmp	r2, r1
    10c2:	da04      	bge.n	10ce <CONFIG_FPROTECT_BLOCK_SIZE+0xce>
    10c4:	f240 51f3 	movw	r1, #1523	; 0x5f3
    10c8:	2070      	movs	r0, #112	; 0x70
    10ca:	f002 fbc7 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10ce:	4908      	ldr	r1, [pc, #32]	; (10f0 <CONFIG_FPROTECT_BLOCK_SIZE+0xf0>)
    10d0:	4288      	cmp	r0, r1
    10d2:	bfa8      	it	ge
    10d4:	4907      	ldrge	r1, [pc, #28]	; (10f4 <CONFIG_FPROTECT_BLOCK_SIZE+0xf4>)
    10d6:	da03      	bge.n	10e0 <CONFIG_FPROTECT_BLOCK_SIZE+0xe0>
    10d8:	2800      	cmp	r0, #0
    10da:	bfb4      	ite	lt
    10dc:	4904      	ldrlt	r1, [pc, #16]	; (10f0 <CONFIG_FPROTECT_BLOCK_SIZE+0xf0>)
    10de:	bd10      	popge	{r4, pc}
    10e0:	1840      	adds	r0, r0, r1
    10e2:	bd10      	pop	{r4, pc}
    10e4:	1e847fff 	.word	0x1e847fff
    10e8:	07a12000 	.word	0x07a12000
    10ec:	f85ee000 	.word	0xf85ee000
    10f0:	1e848000 	.word	0x1e848000
    10f4:	e17b8000 	.word	0xe17b8000
    10f8:	f8df c054 	ldr.w	ip, [pc, #84]	; 1150 <CONFIG_FPROTECT_BLOCK_SIZE+0x150>
    10fc:	b510      	push	{r4, lr}
    10fe:	2300      	movs	r3, #0
    1100:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    1104:	2807      	cmp	r0, #7
    1106:	d21e      	bcs.n	1146 <CONFIG_FPROTECT_BLOCK_SIZE+0x146>
    1108:	e8df f000 	tbb	[pc, r0]
    110c:	05050505 	.word	0x05050505
    1110:	00040404 	.word	0x00040404
    1114:	2301      	movs	r3, #1
    1116:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    111a:	2b00      	cmp	r3, #0
    111c:	bf08      	it	eq
    111e:	bd10      	popeq	{r4, pc}
    1120:	480c      	ldr	r0, [pc, #48]	; (1154 <CONFIG_FPROTECT_BLOCK_SIZE+0x154>)
    1122:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    1126:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    112a:	2820      	cmp	r0, #32
    112c:	bf0e      	itee	eq
    112e:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    1132:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    1136:	7041      	strbne	r1, [r0, #1]
    1138:	2020      	movs	r0, #32
    113a:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    113e:	7058      	strb	r0, [r3, #1]
    1140:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    1144:	bd10      	pop	{r4, pc}
    1146:	f240 2162 	movw	r1, #610	; 0x262
    114a:	2070      	movs	r0, #112	; 0x70
    114c:	f002 fb86 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1150:	20000cdc 	.word	0x20000cdc
    1154:	20000d5c 	.word	0x20000d5c
    1158:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    115c:	b083      	sub	sp, #12
    115e:	485c      	ldr	r0, [pc, #368]	; (12d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d0>)
    1160:	9904      	ldr	r1, [sp, #16]
    1162:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    1166:	9001      	str	r0, [sp, #4]
    1168:	f890 4020 	ldrb.w	r4, [r0, #32]
    116c:	9803      	ldr	r0, [sp, #12]
    116e:	4625      	mov	r5, r4
    1170:	2801      	cmp	r0, #1
    1172:	bf18      	it	ne
    1174:	2802      	cmpne	r0, #2
    1176:	d005      	beq.n	1184 <CONFIG_FPROTECT_BLOCK_SIZE+0x184>
    1178:	f640 2197 	movw	r1, #2711	; 0xa97
    117c:	f04f 0070 	mov.w	r0, #112	; 0x70
    1180:	f002 fb6c 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1184:	2700      	movs	r7, #0
    1186:	2d20      	cmp	r5, #32
    1188:	d04a      	beq.n	1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>
    118a:	4851      	ldr	r0, [pc, #324]	; (12d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d0>)
    118c:	9100      	str	r1, [sp, #0]
    118e:	2600      	movs	r6, #0
    1190:	7f80      	ldrb	r0, [r0, #30]
    1192:	2800      	cmp	r0, #0
    1194:	bf08      	it	eq
    1196:	2602      	moveq	r6, #2
    1198:	f001 fc44 	bl	2a24 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    119c:	f8df a138 	ldr.w	sl, [pc, #312]	; 12d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d8>
    11a0:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    11a4:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
    11a8:	f8df 9128 	ldr.w	r9, [pc, #296]	; 12d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d4>
    11ac:	684a      	ldr	r2, [r1, #4]
    11ae:	6889      	ldr	r1, [r1, #8]
    11b0:	1a12      	subs	r2, r2, r0
    11b2:	1a09      	subs	r1, r1, r0
    11b4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    11b8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    11bc:	4296      	cmp	r6, r2
    11be:	bf98      	it	ls
    11c0:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    11c4:	d201      	bcs.n	11ca <CONFIG_FPROTECT_BLOCK_SIZE+0x1ca>
    11c6:	4589      	cmp	r9, r1
    11c8:	d228      	bcs.n	121c <CONFIG_FPROTECT_BLOCK_SIZE+0x21c>
    11ca:	4a44      	ldr	r2, [pc, #272]	; (12dc <CONFIG_FPROTECT_BLOCK_SIZE+0x2dc>)
    11cc:	9900      	ldr	r1, [sp, #0]
    11ce:	eb02 1b81 	add.w	fp, r2, r1, lsl #6
    11d2:	4622      	mov	r2, r4
    11d4:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    11d8:	784c      	ldrb	r4, [r1, #1]
    11da:	2c20      	cmp	r4, #32
    11dc:	d016      	beq.n	120c <CONFIG_FPROTECT_BLOCK_SIZE+0x20c>
    11de:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    11e2:	eb0a 0c81 	add.w	ip, sl, r1, lsl #2
    11e6:	f8dc 8004 	ldr.w	r8, [ip, #4]
    11ea:	f8dc c008 	ldr.w	ip, [ip, #8]
    11ee:	eba8 0800 	sub.w	r8, r8, r0
    11f2:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    11f6:	ebac 0100 	sub.w	r1, ip, r0
    11fa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    11fe:	4546      	cmp	r6, r8
    1200:	bf98      	it	ls
    1202:	f5b8 0f80 	cmpls.w	r8, #4194304	; 0x400000
    1206:	d2e4      	bcs.n	11d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d2>
    1208:	4589      	cmp	r9, r1
    120a:	d3e2      	bcc.n	11d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d2>
    120c:	2a20      	cmp	r2, #32
    120e:	d005      	beq.n	121c <CONFIG_FPROTECT_BLOCK_SIZE+0x21c>
    1210:	2120      	movs	r1, #32
    1212:	2004      	movs	r0, #4
    1214:	9b00      	ldr	r3, [sp, #0]
    1216:	f7ff f9e9 	bl	5ec <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0xf0>
    121a:	4604      	mov	r4, r0
    121c:	42ac      	cmp	r4, r5
    121e:	d115      	bne.n	124c <CONFIG_FPROTECT_BLOCK_SIZE+0x24c>
    1220:	482f      	ldr	r0, [pc, #188]	; (12e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e0>)
    1222:	2800      	cmp	r0, #0
    1224:	bf18      	it	ne
    1226:	f3af 8000 	nopne.w
    122a:	f001 fbfb 	bl	2a24 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    122e:	4c28      	ldr	r4, [pc, #160]	; (12d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d0>)
    1230:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    1234:	2920      	cmp	r1, #32
    1236:	d00d      	beq.n	1254 <CONFIG_FPROTECT_BLOCK_SIZE+0x254>
    1238:	68e1      	ldr	r1, [r4, #12]
    123a:	1c82      	adds	r2, r0, #2
    123c:	1a51      	subs	r1, r2, r1
    123e:	0209      	lsls	r1, r1, #8
    1240:	17ca      	asrs	r2, r1, #31
    1242:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1246:	1209      	asrs	r1, r1, #8
    1248:	2900      	cmp	r1, #0
    124a:	dd03      	ble.n	1254 <CONFIG_FPROTECT_BLOCK_SIZE+0x254>
    124c:	b005      	add	sp, #20
    124e:	2000      	movs	r0, #0
    1250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1254:	2d20      	cmp	r5, #32
    1256:	d00d      	beq.n	1274 <CONFIG_FPROTECT_BLOCK_SIZE+0x274>
    1258:	462a      	mov	r2, r5
    125a:	9903      	ldr	r1, [sp, #12]
    125c:	f7ff fbe2 	bl	a24 <CONFIG_BT_RX_STACK_SIZE+0x18c>
    1260:	b358      	cbz	r0, 12ba <CONFIG_FPROTECT_BLOCK_SIZE+0x2ba>
    1262:	9801      	ldr	r0, [sp, #4]
    1264:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
    1268:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    126c:	b005      	add	sp, #20
    126e:	2001      	movs	r0, #1
    1270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1274:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    1278:	b118      	cbz	r0, 1282 <CONFIG_FPROTECT_BLOCK_SIZE+0x282>
    127a:	f002 f935 	bl	34e8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    127e:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    1282:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1286:	b150      	cbz	r0, 129e <CONFIG_FPROTECT_BLOCK_SIZE+0x29e>
    1288:	4916      	ldr	r1, [pc, #88]	; (12e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e4>)
    128a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    128e:	6008      	str	r0, [r1, #0]
    1290:	2005      	movs	r0, #5
    1292:	f001 fe15 	bl	2ec0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1296:	f002 f98f 	bl	35b8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    129a:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    129e:	2004      	movs	r0, #4
    12a0:	f001 fe0e 	bl	2ec0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    12a4:	f001 fe74 	bl	2f90 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    12a8:	2020      	movs	r0, #32
    12aa:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    12ae:	480e      	ldr	r0, [pc, #56]	; (12e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e8>)
    12b0:	6880      	ldr	r0, [r0, #8]
    12b2:	6007      	str	r7, [r0, #0]
    12b4:	480d      	ldr	r0, [pc, #52]	; (12ec <CONFIG_FPROTECT_BLOCK_SIZE+0x2ec>)
    12b6:	6007      	str	r7, [r0, #0]
    12b8:	e7d8      	b.n	126c <CONFIG_FPROTECT_BLOCK_SIZE+0x26c>
    12ba:	462a      	mov	r2, r5
    12bc:	2120      	movs	r1, #32
    12be:	2004      	movs	r0, #4
    12c0:	9b04      	ldr	r3, [sp, #16]
    12c2:	f7ff f993 	bl	5ec <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0xf0>
    12c6:	b005      	add	sp, #20
    12c8:	2000      	movs	r0, #0
    12ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12ce:	0000      	.short	0x0000
    12d0:	20000d5c 	.word	0x20000d5c
    12d4:	003fffff 	.word	0x003fffff
    12d8:	20000a5c 	.word	0x20000a5c
    12dc:	20000cdc 	.word	0x20000cdc
    12e0:	00000000 	.word	0x00000000
    12e4:	4001f508 	.word	0x4001f508
    12e8:	2000000c 	.word	0x2000000c
    12ec:	40000508 	.word	0x40000508

000012f0 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    12f0:	4906      	ldr	r1, [pc, #24]	; (130c <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    12f2:	b510      	push	{r4, lr}
    12f4:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    12f8:	2a20      	cmp	r2, #32
    12fa:	bf1c      	itt	ne
    12fc:	7788      	strbne	r0, [r1, #30]
    12fe:	bd10      	popne	{r4, pc}
    1300:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    1304:	2070      	movs	r0, #112	; 0x70
    1306:	f002 faa9 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    130a:	0000      	.short	0x0000
    130c:	20000d5c 	.word	0x20000d5c

00001310 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    1310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1314:	4e68      	ldr	r6, [pc, #416]	; (14b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x130>)
    1316:	4607      	mov	r7, r0
    1318:	b087      	sub	sp, #28
    131a:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    131e:	468a      	mov	sl, r1
    1320:	2820      	cmp	r0, #32
    1322:	d059      	beq.n	13d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x50>
    1324:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1328:	f106 040c 	add.w	r4, r6, #12
    132c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1330:	f5a6 7940 	sub.w	r9, r6, #768	; 0x300
    1334:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    1338:	2020      	movs	r0, #32
    133a:	f88d 0000 	strb.w	r0, [sp]
    133e:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    1342:	aa02      	add	r2, sp, #8
    1344:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    1348:	a901      	add	r1, sp, #4
    134a:	f890 5020 	ldrb.w	r5, [r0, #32]
    134e:	6930      	ldr	r0, [r6, #16]
    1350:	9005      	str	r0, [sp, #20]
    1352:	6830      	ldr	r0, [r6, #0]
    1354:	4438      	add	r0, r7
    1356:	f001 fee9 	bl	312c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    135a:	f99d 0008 	ldrsb.w	r0, [sp, #8]
    135e:	2800      	cmp	r0, #0
    1360:	dd02      	ble.n	1368 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x58>
    1362:	9801      	ldr	r0, [sp, #4]
    1364:	1c40      	adds	r0, r0, #1
    1366:	9001      	str	r0, [sp, #4]
    1368:	f8d8 0008 	ldr.w	r0, [r8, #8]
    136c:	9901      	ldr	r1, [sp, #4]
    136e:	2f64      	cmp	r7, #100	; 0x64
    1370:	4401      	add	r1, r0
    1372:	d336      	bcc.n	13e2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5a>
    1374:	4b51      	ldr	r3, [pc, #324]	; (14bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x134>)
    1376:	2000      	movs	r0, #0
    1378:	1bdb      	subs	r3, r3, r7
    137a:	4180      	sbcs	r0, r0
    137c:	d331      	bcc.n	13e2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5a>
    137e:	f8d8 0004 	ldr.w	r0, [r8, #4]
    1382:	1a08      	subs	r0, r1, r0
    1384:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1388:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    138c:	d229      	bcs.n	13e2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5a>
    138e:	f021 407f 	bic.w	r0, r1, #4278190080	; 0xff000000
    1392:	6060      	str	r0, [r4, #4]
    1394:	4848      	ldr	r0, [pc, #288]	; (14b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x130>)
    1396:	f884 a00c 	strb.w	sl, [r4, #12]
    139a:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
    139e:	46ea      	mov	sl, sp
    13a0:	2d20      	cmp	r5, #32
    13a2:	bf1c      	itt	ne
    13a4:	4946      	ldrne	r1, [pc, #280]	; (14c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x138>)
    13a6:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    13aa:	d04a      	beq.n	1442 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xba>
    13ac:	eb05 0085 	add.w	r0, r5, r5, lsl #2
    13b0:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    13b4:	6860      	ldr	r0, [r4, #4]
    13b6:	f8d8 2004 	ldr.w	r2, [r8, #4]
    13ba:	4621      	mov	r1, r4
    13bc:	1a10      	subs	r0, r2, r0
    13be:	0200      	lsls	r0, r0, #8
    13c0:	17c2      	asrs	r2, r0, #31
    13c2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    13c6:	f108 0604 	add.w	r6, r8, #4
    13ca:	1200      	asrs	r0, r0, #8
    13cc:	d426      	bmi.n	141c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x94>
    13ce:	8970      	ldrh	r0, [r6, #10]
    13d0:	b388      	cbz	r0, 1436 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xae>
    13d2:	8948      	ldrh	r0, [r1, #10]
    13d4:	b148      	cbz	r0, 13ea <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x62>
    13d6:	e034      	b.n	1442 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xba>
    13d8:	f640 316a 	movw	r1, #2922	; 0xb6a
    13dc:	2070      	movs	r0, #112	; 0x70
    13de:	f002 fa3d 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    13e2:	b007      	add	sp, #28
    13e4:	2001      	movs	r0, #1
    13e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    13ea:	4620      	mov	r0, r4
    13ec:	f7ff fe46 	bl	107c <CONFIG_FPROTECT_BLOCK_SIZE+0x7c>
    13f0:	aa04      	add	r2, sp, #16
    13f2:	a903      	add	r1, sp, #12
    13f4:	f001 fe9a 	bl	312c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    13f8:	f99d 0010 	ldrsb.w	r0, [sp, #16]
    13fc:	2800      	cmp	r0, #0
    13fe:	bfcc      	ite	gt
    1400:	2001      	movgt	r0, #1
    1402:	2000      	movle	r0, #0
    1404:	f100 0133 	add.w	r1, r0, #51	; 0x33
    1408:	9803      	ldr	r0, [sp, #12]
    140a:	6832      	ldr	r2, [r6, #0]
    140c:	1a10      	subs	r0, r2, r0
    140e:	0200      	lsls	r0, r0, #8
    1410:	17c2      	asrs	r2, r0, #31
    1412:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1416:	1200      	asrs	r0, r0, #8
    1418:	4288      	cmp	r0, r1
    141a:	da12      	bge.n	1442 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xba>
    141c:	f88a 5000 	strb.w	r5, [sl]
    1420:	f898 1010 	ldrb.w	r1, [r8, #16]
    1424:	7b20      	ldrb	r0, [r4, #12]
    1426:	4281      	cmp	r1, r0
    1428:	d806      	bhi.n	1438 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb0>
    142a:	9805      	ldr	r0, [sp, #20]
    142c:	6060      	str	r0, [r4, #4]
    142e:	b007      	add	sp, #28
    1430:	2002      	movs	r0, #2
    1432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1436:	e004      	b.n	1442 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xba>
    1438:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    143c:	7845      	ldrb	r5, [r0, #1]
    143e:	2d20      	cmp	r5, #32
    1440:	d1b4      	bne.n	13ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x24>
    1442:	2005      	movs	r0, #5
    1444:	f001 fd3c 	bl	2ec0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1448:	4c1b      	ldr	r4, [pc, #108]	; (14b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x130>)
    144a:	f04f 30ff 	mov.w	r0, #4294967295
    144e:	60a0      	str	r0, [r4, #8]
    1450:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    1454:	f89d 2000 	ldrb.w	r2, [sp]
    1458:	2120      	movs	r1, #32
    145a:	2a20      	cmp	r2, #32
    145c:	bf13      	iteet	ne
    145e:	2005      	movne	r0, #5
    1460:	eb04 0083 	addeq.w	r0, r4, r3, lsl #2
    1464:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    1468:	f7ff f8c0 	blne	5ec <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0xf0>
    146c:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    1470:	4913      	ldr	r1, [pc, #76]	; (14c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x138>)
    1472:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    1476:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    147a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    147e:	7048      	strb	r0, [r1, #1]
    1480:	6820      	ldr	r0, [r4, #0]
    1482:	4438      	add	r0, r7
    1484:	6020      	str	r0, [r4, #0]
    1486:	2001      	movs	r0, #1
    1488:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    148c:	7e60      	ldrb	r0, [r4, #25]
    148e:	2801      	cmp	r0, #1
    1490:	d105      	bne.n	149e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x116>
    1492:	6920      	ldr	r0, [r4, #16]
    1494:	1e40      	subs	r0, r0, #1
    1496:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    149a:	f001 fb63 	bl	2b64 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    149e:	f89d 0000 	ldrb.w	r0, [sp]
    14a2:	2820      	cmp	r0, #32
    14a4:	d003      	beq.n	14ae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x126>
    14a6:	4807      	ldr	r0, [pc, #28]	; (14c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x13c>)
    14a8:	7840      	ldrb	r0, [r0, #1]
    14aa:	f002 faa7 	bl	39fc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    14ae:	b007      	add	sp, #28
    14b0:	2000      	movs	r0, #0
    14b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    14b6:	0000      	.short	0x0000
    14b8:	20000d5c 	.word	0x20000d5c
    14bc:	07a11fff 	.word	0x07a11fff
    14c0:	20000cdc 	.word	0x20000cdc
    14c4:	2000000c 	.word	0x2000000c

000014c8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    14c8:	4602      	mov	r2, r0
    14ca:	f8df c054 	ldr.w	ip, [pc, #84]	; 1520 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>
    14ce:	b510      	push	{r4, lr}
    14d0:	2300      	movs	r3, #0
    14d2:	ebbc 0202 	subs.w	r2, ip, r2
    14d6:	4408      	add	r0, r1
    14d8:	eb73 0203 	sbcs.w	r2, r3, r3
    14dc:	d204      	bcs.n	14e8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x20>
    14de:	f240 51f1 	movw	r1, #1521	; 0x5f1
    14e2:	2070      	movs	r0, #112	; 0x70
    14e4:	f002 f9ba 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    14e8:	4a0e      	ldr	r2, [pc, #56]	; (1524 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    14ea:	4291      	cmp	r1, r2
    14ec:	dd04      	ble.n	14f8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x30>
    14ee:	f240 51f2 	movw	r1, #1522	; 0x5f2
    14f2:	2070      	movs	r0, #112	; 0x70
    14f4:	f002 f9b2 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    14f8:	4a0b      	ldr	r2, [pc, #44]	; (1528 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    14fa:	4291      	cmp	r1, r2
    14fc:	da04      	bge.n	1508 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x40>
    14fe:	f240 51f3 	movw	r1, #1523	; 0x5f3
    1502:	2070      	movs	r0, #112	; 0x70
    1504:	f002 f9aa 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1508:	4908      	ldr	r1, [pc, #32]	; (152c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x64>)
    150a:	4288      	cmp	r0, r1
    150c:	bfa8      	it	ge
    150e:	4908      	ldrge	r1, [pc, #32]	; (1530 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x68>)
    1510:	da03      	bge.n	151a <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x52>
    1512:	2800      	cmp	r0, #0
    1514:	bfb4      	ite	lt
    1516:	4905      	ldrlt	r1, [pc, #20]	; (152c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x64>)
    1518:	bd10      	popge	{r4, pc}
    151a:	1840      	adds	r0, r0, r1
    151c:	bd10      	pop	{r4, pc}
    151e:	0000      	.short	0x0000
    1520:	1e847fff 	.word	0x1e847fff
    1524:	07a12000 	.word	0x07a12000
    1528:	f85ee000 	.word	0xf85ee000
    152c:	1e848000 	.word	0x1e848000
    1530:	e17b8000 	.word	0xe17b8000

00001534 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    1534:	4a10      	ldr	r2, [pc, #64]	; (1578 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x44>)
    1536:	1a0b      	subs	r3, r1, r0
    1538:	f102 0c01 	add.w	ip, r2, #1
    153c:	ebb3 0f9c 	cmp.w	r3, ip, lsr #2
    1540:	bf3c      	itt	cc
    1542:	4618      	movcc	r0, r3
    1544:	4770      	bxcc	lr
    1546:	b510      	push	{r4, lr}
    1548:	1a44      	subs	r4, r0, r1
    154a:	ebb4 0f9c 	cmp.w	r4, ip, lsr #2
    154e:	bf3c      	itt	cc
    1550:	4618      	movcc	r0, r3
    1552:	bd10      	popcc	{r4, pc}
    1554:	429a      	cmp	r2, r3
    1556:	d203      	bcs.n	1560 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x2c>
    1558:	1a10      	subs	r0, r2, r0
    155a:	4408      	add	r0, r1
    155c:	1c40      	adds	r0, r0, #1
    155e:	bd10      	pop	{r4, pc}
    1560:	42a2      	cmp	r2, r4
    1562:	d204      	bcs.n	156e <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x3a>
    1564:	1a51      	subs	r1, r2, r1
    1566:	4408      	add	r0, r1
    1568:	1c40      	adds	r0, r0, #1
    156a:	4240      	negs	r0, r0
    156c:	bd10      	pop	{r4, pc}
    156e:	f640 21f3 	movw	r1, #2803	; 0xaf3
    1572:	2070      	movs	r0, #112	; 0x70
    1574:	f002 f972 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1578:	1e847fff 	.word	0x1e847fff

0000157c <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    157c:	4907      	ldr	r1, [pc, #28]	; (159c <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x20>)
    157e:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
    1582:	4282      	cmp	r2, r0
    1584:	bf04      	itt	eq
    1586:	6848      	ldreq	r0, [r1, #4]
    1588:	4770      	bxeq	lr
    158a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    158e:	4904      	ldr	r1, [pc, #16]	; (15a0 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x24>)
    1590:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    1594:	1d00      	adds	r0, r0, #4
    1596:	f7ff bd71 	b.w	107c <CONFIG_FPROTECT_BLOCK_SIZE+0x7c>
    159a:	0000      	.short	0x0000
    159c:	20000d5c 	.word	0x20000d5c
    15a0:	20000a5c 	.word	0x20000a5c

000015a4 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    15a4:	490b      	ldr	r1, [pc, #44]	; (15d4 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x30>)
    15a6:	b510      	push	{r4, lr}
    15a8:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    15ac:	2820      	cmp	r0, #32
    15ae:	d00c      	beq.n	15ca <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x26>
    15b0:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    15b4:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    15b8:	4a07      	ldr	r2, [pc, #28]	; (15d8 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x34>)
    15ba:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    15be:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    15c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    15c6:	2104      	movs	r1, #4
    15c8:	4710      	bx	r2
    15ca:	f640 01a5 	movw	r1, #2213	; 0x8a5
    15ce:	2070      	movs	r0, #112	; 0x70
    15d0:	f002 f944 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15d4:	20000d5c 	.word	0x20000d5c
    15d8:	20000a5c 	.word	0x20000a5c

000015dc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    15dc:	b570      	push	{r4, r5, r6, lr}
    15de:	4e60      	ldr	r6, [pc, #384]	; (1760 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x184>)
    15e0:	4960      	ldr	r1, [pc, #384]	; (1764 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x188>)
    15e2:	2501      	movs	r5, #1
    15e4:	f506 7440 	add.w	r4, r6, #768	; 0x300
    15e8:	2808      	cmp	r0, #8
    15ea:	d27c      	bcs.n	16e6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10a>
    15ec:	e8df f000 	tbb	[pc, r0]
    15f0:	9a885704 	.word	0x9a885704
    15f4:	a49f3eb2 	.word	0xa49f3eb2
    15f8:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    15fc:	b918      	cbnz	r0, 1606 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    15fe:	f001 ff8f 	bl	3520 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1602:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    1606:	8ae0      	ldrh	r0, [r4, #22]
    1608:	b110      	cbz	r0, 1610 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    160a:	f002 f8c3 	bl	3794 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    160e:	b188      	cbz	r0, 1634 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
    1610:	f7ff fc9e 	bl	f50 <CONFIG_BT_RX_STACK_SIZE+0x6b8>
    1614:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
    1618:	68a1      	ldr	r1, [r4, #8]
    161a:	f1b1 3fff 	cmp.w	r1, #4294967295
    161e:	d005      	beq.n	162c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x50>
    1620:	2301      	movs	r3, #1
    1622:	2203      	movs	r2, #3
    1624:	2005      	movs	r0, #5
    1626:	f001 fb83 	bl	2d30 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    162a:	b140      	cbz	r0, 163e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    162c:	7e60      	ldrb	r0, [r4, #25]
    162e:	2801      	cmp	r0, #1
    1630:	d110      	bne.n	1654 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x78>
    1632:	e009      	b.n	1648 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    1634:	f640 015d 	movw	r1, #2141	; 0x85d
    1638:	2070      	movs	r0, #112	; 0x70
    163a:	f002 f90f 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    163e:	f640 0162 	movw	r1, #2146	; 0x862
    1642:	2070      	movs	r0, #112	; 0x70
    1644:	f002 f90a 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1648:	6920      	ldr	r0, [r4, #16]
    164a:	1e40      	subs	r0, r0, #1
    164c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1650:	f001 fa88 	bl	2b64 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1654:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1658:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    165c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    1660:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
    1664:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1668:	2101      	movs	r1, #1
    166a:	4710      	bx	r2
    166c:	f7ff fc70 	bl	f50 <CONFIG_BT_RX_STACK_SIZE+0x6b8>
    1670:	f04f 30ff 	mov.w	r0, #4294967295
    1674:	60a0      	str	r0, [r4, #8]
    1676:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    167a:	b158      	cbz	r0, 1694 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xb8>
    167c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1680:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1684:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    1688:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
    168c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1690:	2106      	movs	r1, #6
    1692:	4710      	bx	r2
    1694:	f640 0172 	movw	r1, #2162	; 0x872
    1698:	2070      	movs	r0, #112	; 0x70
    169a:	f002 f8df 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    169e:	f7ff fc57 	bl	f50 <CONFIG_BT_RX_STACK_SIZE+0x6b8>
    16a2:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    16a6:	f002 f875 	bl	3794 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    16aa:	b118      	cbz	r0, 16b4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xd8>
    16ac:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    16b0:	b128      	cbz	r0, 16be <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xe2>
    16b2:	e008      	b.n	16c6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xea>
    16b4:	f640 0181 	movw	r1, #2177	; 0x881
    16b8:	2070      	movs	r0, #112	; 0x70
    16ba:	f002 f8cf 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16be:	f001 ff2f 	bl	3520 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    16c2:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    16c6:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    16ca:	b158      	cbz	r0, 16e4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x108>
    16cc:	4926      	ldr	r1, [pc, #152]	; (1768 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x18c>)
    16ce:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    16d2:	6008      	str	r0, [r1, #0]
    16d4:	2005      	movs	r0, #5
    16d6:	f001 fbf3 	bl	2ec0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    16da:	f001 ff6d 	bl	35b8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    16de:	2000      	movs	r0, #0
    16e0:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    16e4:	e000      	b.n	16e8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10c>
    16e6:	e035      	b.n	1754 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x178>
    16e8:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    16ec:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    16f0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    16f4:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
    16f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    16fc:	2100      	movs	r1, #0
    16fe:	4710      	bx	r2
    1700:	f001 fc90 	bl	3024 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    1704:	8ae0      	ldrh	r0, [r4, #22]
    1706:	b110      	cbz	r0, 170e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x132>
    1708:	f002 f844 	bl	3794 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    170c:	b128      	cbz	r0, 171a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x13e>
    170e:	4817      	ldr	r0, [pc, #92]	; (176c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x190>)
    1710:	7800      	ldrb	r0, [r0, #0]
    1712:	2803      	cmp	r0, #3
    1714:	bf08      	it	eq
    1716:	7765      	strbeq	r5, [r4, #29]
    1718:	bd70      	pop	{r4, r5, r6, pc}
    171a:	f640 018b 	movw	r1, #2187	; 0x88b
    171e:	2070      	movs	r0, #112	; 0x70
    1720:	f002 f89c 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1724:	4812      	ldr	r0, [pc, #72]	; (1770 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x194>)
    1726:	6005      	str	r5, [r0, #0]
    1728:	6888      	ldr	r0, [r1, #8]
    172a:	6005      	str	r5, [r0, #0]
    172c:	bd70      	pop	{r4, r5, r6, pc}
    172e:	7808      	ldrb	r0, [r1, #0]
    1730:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1734:	f002 b962 	b.w	39fc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1738:	f7ff fc0a 	bl	f50 <CONFIG_BT_RX_STACK_SIZE+0x6b8>
    173c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1740:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1744:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    1748:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
    174c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1750:	2105      	movs	r1, #5
    1752:	4710      	bx	r2
    1754:	f640 019d 	movw	r1, #2205	; 0x89d
    1758:	2070      	movs	r0, #112	; 0x70
    175a:	f002 f87f 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    175e:	0000      	.short	0x0000
    1760:	20000a5c 	.word	0x20000a5c
    1764:	2000000c 	.word	0x2000000c
    1768:	4001f508 	.word	0x4001f508
    176c:	2000000e 	.word	0x2000000e
    1770:	40000508 	.word	0x40000508

00001774 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    1774:	4803      	ldr	r0, [pc, #12]	; (1784 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI+0x10>)
    1776:	b510      	push	{r4, lr}
    1778:	7840      	ldrb	r0, [r0, #1]
    177a:	f00a fb84 	bl	be86 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    177e:	b280      	uxth	r0, r0
    1780:	bd10      	pop	{r4, pc}
    1782:	0000      	.short	0x0000
    1784:	2000000e 	.word	0x2000000e

00001788 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    1788:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    178c:	48fe      	ldr	r0, [pc, #1016]	; (1b88 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x400>)
    178e:	b093      	sub	sp, #76	; 0x4c
    1790:	4688      	mov	r8, r1
    1792:	6800      	ldr	r0, [r0, #0]
    1794:	4dfd      	ldr	r5, [pc, #1012]	; (1b8c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x404>)
    1796:	05c0      	lsls	r0, r0, #23
    1798:	0dc0      	lsrs	r0, r0, #23
    179a:	d00e      	beq.n	17ba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    179c:	3810      	subs	r0, #16
    179e:	b240      	sxtb	r0, r0
    17a0:	2800      	cmp	r0, #0
    17a2:	bfb8      	it	lt
    17a4:	f000 000f 	andlt.w	r0, r0, #15
    17a8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    17ac:	bfac      	ite	ge
    17ae:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    17b2:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    17b6:	0940      	lsrs	r0, r0, #5
    17b8:	d00d      	beq.n	17d6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    17ba:	f898 0000 	ldrb.w	r0, [r8]
    17be:	f04f 0b00 	mov.w	fp, #0
    17c2:	2800      	cmp	r0, #0
    17c4:	bf18      	it	ne
    17c6:	2801      	cmpne	r0, #1
    17c8:	d018      	beq.n	17fc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    17ca:	f240 714a 	movw	r1, #1866	; 0x74a
    17ce:	f04f 0070 	mov.w	r0, #112	; 0x70
    17d2:	f002 f843 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17d6:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    17da:	f04f 0b01 	mov.w	fp, #1
    17de:	2820      	cmp	r0, #32
    17e0:	d007      	beq.n	17f2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    17e2:	f898 0000 	ldrb.w	r0, [r8]
    17e6:	b148      	cbz	r0, 17fc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    17e8:	f240 7146 	movw	r1, #1862	; 0x746
    17ec:	2070      	movs	r0, #112	; 0x70
    17ee:	f002 f835 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17f2:	f240 7143 	movw	r1, #1859	; 0x743
    17f6:	2070      	movs	r0, #112	; 0x70
    17f8:	f002 f830 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17fc:	4ce4      	ldr	r4, [pc, #912]	; (1b90 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x408>)
    17fe:	b124      	cbz	r4, 180a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    1800:	2100      	movs	r1, #0
    1802:	f240 704d 	movw	r0, #1869	; 0x74d
    1806:	f3af 8000 	nop.w
    180a:	9813      	ldr	r0, [sp, #76]	; 0x4c
    180c:	49e1      	ldr	r1, [pc, #900]	; (1b94 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x40c>)
    180e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1812:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    1816:	f04f 0901 	mov.w	r9, #1
    181a:	9001      	str	r0, [sp, #4]
    181c:	b124      	cbz	r4, 1828 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa0>
    181e:	2100      	movs	r1, #0
    1820:	f240 7055 	movw	r0, #1877	; 0x755
    1824:	f3af 8000 	nop.w
    1828:	f1b9 0f00 	cmp.w	r9, #0
    182c:	d00a      	beq.n	1844 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xbc>
    182e:	bf00      	nop
    1830:	f895 602e 	ldrb.w	r6, [r5, #46]	; 0x2e
    1834:	f04f 0a00 	mov.w	sl, #0
    1838:	f885 a02b 	strb.w	sl, [r5, #43]	; 0x2b
    183c:	f1bb 0f00 	cmp.w	fp, #0
    1840:	d007      	beq.n	1852 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xca>
    1842:	e02e      	b.n	18a2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x11a>
    1844:	48d4      	ldr	r0, [pc, #848]	; (1b98 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x410>)
    1846:	2800      	cmp	r0, #0
    1848:	bf18      	it	ne
    184a:	f3af 8000 	nopne.w
    184e:	b662      	cpsie	i
    1850:	e7ee      	b.n	1830 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa8>
    1852:	4637      	mov	r7, r6
    1854:	2001      	movs	r0, #1
    1856:	ea20 0607 	bic.w	r6, r0, r7
    185a:	48d0      	ldr	r0, [pc, #832]	; (1b9c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x414>)
    185c:	2240      	movs	r2, #64	; 0x40
    185e:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    1862:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    1866:	f00a fc7c 	bl	c162 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    186a:	b124      	cbz	r4, 1876 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xee>
    186c:	2100      	movs	r1, #0
    186e:	f240 50b5 	movw	r0, #1461	; 0x5b5
    1872:	f3af 8000 	nop.w
    1876:	eb05 0187 	add.w	r1, r5, r7, lsl #2
    187a:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    187e:	6a09      	ldr	r1, [r1, #32]
    1880:	6201      	str	r1, [r0, #32]
    1882:	b124      	cbz	r4, 188e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x106>
    1884:	2100      	movs	r1, #0
    1886:	f240 50b9 	movw	r0, #1465	; 0x5b9
    188a:	f3af 8000 	nop.w
    188e:	b124      	cbz	r4, 189a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x112>
    1890:	2100      	movs	r1, #0
    1892:	f240 705f 	movw	r0, #1887	; 0x75f
    1896:	f3af 8000 	nop.w
    189a:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    189e:	2800      	cmp	r0, #0
    18a0:	d1bc      	bne.n	181c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x94>
    18a2:	b124      	cbz	r4, 18ae <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x126>
    18a4:	2100      	movs	r1, #0
    18a6:	f240 7069 	movw	r0, #1897	; 0x769
    18aa:	f3af 8000 	nop.w
    18ae:	f001 f8b9 	bl	2a24 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    18b2:	4607      	mov	r7, r0
    18b4:	f898 0000 	ldrb.w	r0, [r8]
    18b8:	f88d 0016 	strb.w	r0, [sp, #22]
    18bc:	f898 000b 	ldrb.w	r0, [r8, #11]
    18c0:	f88d 0015 	strb.w	r0, [sp, #21]
    18c4:	f898 100a 	ldrb.w	r1, [r8, #10]
    18c8:	f88d 1014 	strb.w	r1, [sp, #20]
    18cc:	f8b8 1008 	ldrh.w	r1, [r8, #8]
    18d0:	f8ad 1012 	strh.w	r1, [sp, #18]
    18d4:	f898 2000 	ldrb.w	r2, [r8]
    18d8:	9000      	str	r0, [sp, #0]
    18da:	f8d8 3004 	ldr.w	r3, [r8, #4]
    18de:	f10d 0908 	add.w	r9, sp, #8
    18e2:	b19a      	cbz	r2, 190c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x184>
    18e4:	2200      	movs	r2, #0
    18e6:	4648      	mov	r0, r9
    18e8:	f7fe fe1e 	bl	528 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x2c>
    18ec:	9707      	str	r7, [sp, #28]
    18ee:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    18f2:	aa0f      	add	r2, sp, #60	; 0x3c
    18f4:	a90e      	add	r1, sp, #56	; 0x38
    18f6:	f001 fc19 	bl	312c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    18fa:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    18fe:	2820      	cmp	r0, #32
    1900:	d00a      	beq.n	1918 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x190>
    1902:	6928      	ldr	r0, [r5, #16]
    1904:	1d40      	adds	r0, r0, #5
    1906:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    190a:	e01e      	b.n	194a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c2>
    190c:	4648      	mov	r0, r9
    190e:	f8d8 200c 	ldr.w	r2, [r8, #12]
    1912:	f7fe fe09 	bl	528 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x2c>
    1916:	e04b      	b.n	19b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x228>
    1918:	9807      	ldr	r0, [sp, #28]
    191a:	3009      	adds	r0, #9
    191c:	9000      	str	r0, [sp, #0]
    191e:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    1922:	b128      	cbz	r0, 1930 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a8>
    1924:	f001 ff36 	bl	3794 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1928:	b910      	cbnz	r0, 1930 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a8>
    192a:	9800      	ldr	r0, [sp, #0]
    192c:	3032      	adds	r0, #50	; 0x32
    192e:	9000      	str	r0, [sp, #0]
    1930:	489b      	ldr	r0, [pc, #620]	; (1ba0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x418>)
    1932:	7841      	ldrb	r1, [r0, #1]
    1934:	980e      	ldr	r0, [sp, #56]	; 0x38
    1936:	4281      	cmp	r1, r0
    1938:	bf98      	it	ls
    193a:	9800      	ldrls	r0, [sp, #0]
    193c:	d903      	bls.n	1946 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1be>
    193e:	1a09      	subs	r1, r1, r0
    1940:	9800      	ldr	r0, [sp, #0]
    1942:	4408      	add	r0, r1
    1944:	9000      	str	r0, [sp, #0]
    1946:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    194a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    194e:	1a89      	subs	r1, r1, r2
    1950:	9002      	str	r0, [sp, #8]
    1952:	4408      	add	r0, r1
    1954:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1958:	9003      	str	r0, [sp, #12]
    195a:	4631      	mov	r1, r6
    195c:	4648      	mov	r0, r9
    195e:	f7fe fe81 	bl	664 <CONFIG_BT_HCI_TX_STACK_SIZE+0x64>
    1962:	f898 000b 	ldrb.w	r0, [r8, #11]
    1966:	9000      	str	r0, [sp, #0]
    1968:	46b9      	mov	r9, r7
    196a:	f8b8 1008 	ldrh.w	r1, [r8, #8]
    196e:	a80e      	add	r0, sp, #56	; 0x38
    1970:	f8d8 3004 	ldr.w	r3, [r8, #4]
    1974:	f8d8 200c 	ldr.w	r2, [r8, #12]
    1978:	f7fe fdd6 	bl	528 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x2c>
    197c:	9802      	ldr	r0, [sp, #8]
    197e:	9a03      	ldr	r2, [sp, #12]
    1980:	eba0 0009 	sub.w	r0, r0, r9
    1984:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1988:	eba2 0209 	sub.w	r2, r2, r9
    198c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    198e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1992:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    1996:	d201      	bcs.n	199c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x214>
    1998:	4291      	cmp	r1, r2
    199a:	d209      	bcs.n	19b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x228>
    199c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    19a0:	1a89      	subs	r1, r1, r2
    19a2:	1878      	adds	r0, r7, r1
    19a4:	f027 427f 	bic.w	r2, r7, #4278190080	; 0xff000000
    19a8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    19ac:	e9cd 2002 	strd	r2, r0, [sp, #8]
    19b0:	b124      	cbz	r4, 19bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x234>
    19b2:	2100      	movs	r1, #0
    19b4:	f44f 60ee 	mov.w	r0, #1904	; 0x770
    19b8:	f3af 8000 	nop.w
    19bc:	4a77      	ldr	r2, [pc, #476]	; (1b9c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x414>)
    19be:	4639      	mov	r1, r7
    19c0:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
    19c4:	eb02 1786 	add.w	r7, r2, r6, lsl #6
    19c8:	a802      	add	r0, sp, #8
    19ca:	f817 2019 	ldrb.w	r2, [r7, r9, lsl #1]
    19ce:	2a01      	cmp	r2, #1
    19d0:	bf18      	it	ne
    19d2:	2a02      	cmpne	r2, #2
    19d4:	d13c      	bne.n	1a50 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c8>
    19d6:	9a02      	ldr	r2, [sp, #8]
    19d8:	f8dd c00c 	ldr.w	ip, [sp, #12]
    19dc:	eba2 0201 	sub.w	r2, r2, r1
    19e0:	4b70      	ldr	r3, [pc, #448]	; (1ba4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x41c>)
    19e2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    19e6:	ebac 0101 	sub.w	r1, ip, r1
    19ea:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    19ee:	2a02      	cmp	r2, #2
    19f0:	d368      	bcc.n	1ac4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33c>
    19f2:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
    19f6:	d265      	bcs.n	1ac4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33c>
    19f8:	428b      	cmp	r3, r1
    19fa:	d363      	bcc.n	1ac4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33c>
    19fc:	f04f 0a01 	mov.w	sl, #1
    1a00:	ab0f      	add	r3, sp, #60	; 0x3c
    1a02:	aa0e      	add	r2, sp, #56	; 0x38
    1a04:	4631      	mov	r1, r6
    1a06:	f7fe ff77 	bl	8f8 <CONFIG_BT_RX_STACK_SIZE+0x60>
    1a0a:	b3e8      	cbz	r0, 1a88 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x300>
    1a0c:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    1a10:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
    1a14:	4633      	mov	r3, r6
    1a16:	428a      	cmp	r2, r1
    1a18:	d060      	beq.n	1adc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x354>
    1a1a:	2005      	movs	r0, #5
    1a1c:	f7fe fde6 	bl	5ec <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0xf0>
    1a20:	eb07 0149 	add.w	r1, r7, r9, lsl #1
    1a24:	7048      	strb	r0, [r1, #1]
    1a26:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    1a2a:	2820      	cmp	r0, #32
    1a2c:	bf03      	ittte	eq
    1a2e:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    1a32:	f880 9020 	strbeq.w	r9, [r0, #32]
    1a36:	f880 a023 	strbeq.w	sl, [r0, #35]	; 0x23
    1a3a:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    1a3e:	bf18      	it	ne
    1a40:	f880 9001 	strbne.w	r9, [r0, #1]
    1a44:	4632      	mov	r2, r6
    1a46:	4649      	mov	r1, r9
    1a48:	f05f 0003 	movs.w	r0, #3
    1a4c:	f7ff fb54 	bl	10f8 <CONFIG_FPROTECT_BLOCK_SIZE+0xf8>
    1a50:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1a54:	f890 7023 	ldrb.w	r7, [r0, #35]	; 0x23
    1a58:	b124      	cbz	r4, 1a64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2dc>
    1a5a:	2100      	movs	r1, #0
    1a5c:	f240 7077 	movw	r0, #1911	; 0x777
    1a60:	f3af 8000 	nop.w
    1a64:	4850      	ldr	r0, [pc, #320]	; (1ba8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x420>)
    1a66:	2800      	cmp	r0, #0
    1a68:	bf18      	it	ne
    1a6a:	f3af 8000 	nopne.w
    1a6e:	f3ef 8910 	mrs	r9, PRIMASK
    1a72:	b672      	cpsid	i
    1a74:	b124      	cbz	r4, 1a80 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f8>
    1a76:	2100      	movs	r1, #0
    1a78:	f240 707d 	movw	r0, #1917	; 0x77d
    1a7c:	f3af 8000 	nop.w
    1a80:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1a84:	2800      	cmp	r0, #0
    1a86:	e000      	b.n	1a8a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x302>
    1a88:	e024      	b.n	1ad4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x34c>
    1a8a:	f47f aec7 	bne.w	181c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x94>
    1a8e:	b124      	cbz	r4, 1a9a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x312>
    1a90:	2100      	movs	r1, #0
    1a92:	f240 7085 	movw	r0, #1925	; 0x785
    1a96:	f3af 8000 	nop.w
    1a9a:	f10d 0e04 	add.w	lr, sp, #4
    1a9e:	f1ba 0f00 	cmp.w	sl, #0
    1aa2:	e89e 100f 	ldmia.w	lr, {r0, r1, r2, r3, ip}
    1aa6:	f100 0004 	add.w	r0, r0, #4
    1aaa:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    1aae:	d041      	beq.n	1b34 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ac>
    1ab0:	b124      	cbz	r4, 1abc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x334>
    1ab2:	2100      	movs	r1, #0
    1ab4:	f240 7092 	movw	r0, #1938	; 0x792
    1ab8:	f3af 8000 	nop.w
    1abc:	f1bb 0f00 	cmp.w	fp, #0
    1ac0:	d12b      	bne.n	1b1a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x392>
    1ac2:	e015      	b.n	1af0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x368>
    1ac4:	4632      	mov	r2, r6
    1ac6:	4649      	mov	r1, r9
    1ac8:	2004      	movs	r0, #4
    1aca:	f7ff fb15 	bl	10f8 <CONFIG_FPROTECT_BLOCK_SIZE+0xf8>
    1ace:	f04f 0a01 	mov.w	sl, #1
    1ad2:	e7bd      	b.n	1a50 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c8>
    1ad4:	4632      	mov	r2, r6
    1ad6:	4649      	mov	r1, r9
    1ad8:	2004      	movs	r0, #4
    1ada:	e7b7      	b.n	1a4c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c4>
    1adc:	2920      	cmp	r1, #32
    1ade:	bf19      	ittee	ne
    1ae0:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    1ae4:	7840      	ldrbne	r0, [r0, #1]
    1ae6:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    1aea:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    1aee:	e797      	b.n	1a20 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x298>
    1af0:	b19f      	cbz	r7, 1b1a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x392>
    1af2:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    1af6:	2820      	cmp	r0, #32
    1af8:	d10f      	bne.n	1b1a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x392>
    1afa:	b124      	cbz	r4, 1b06 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37e>
    1afc:	2100      	movs	r1, #0
    1afe:	f240 7097 	movw	r0, #1943	; 0x797
    1b02:	f3af 8000 	nop.w
    1b06:	4631      	mov	r1, r6
    1b08:	2002      	movs	r0, #2
    1b0a:	f7ff fb25 	bl	1158 <CONFIG_FPROTECT_BLOCK_SIZE+0x158>
    1b0e:	b920      	cbnz	r0, 1b1a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x392>
    1b10:	f898 0000 	ldrb.w	r0, [r8]
    1b14:	b3b8      	cbz	r0, 1b86 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3fe>
    1b16:	2801      	cmp	r0, #1
    1b18:	d05d      	beq.n	1bd6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x44e>
    1b1a:	b124      	cbz	r4, 1b26 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x39e>
    1b1c:	2100      	movs	r1, #0
    1b1e:	f240 70b4 	movw	r0, #1972	; 0x7b4
    1b22:	f3af 8000 	nop.w
    1b26:	f885 602e 	strb.w	r6, [r5, #46]	; 0x2e
    1b2a:	2001      	movs	r0, #1
    1b2c:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    1b30:	f04f 0a01 	mov.w	sl, #1
    1b34:	b124      	cbz	r4, 1b40 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b8>
    1b36:	2100      	movs	r1, #0
    1b38:	f240 70bd 	movw	r0, #1981	; 0x7bd
    1b3c:	f3af 8000 	nop.w
    1b40:	f1b9 0f00 	cmp.w	r9, #0
    1b44:	d050      	beq.n	1be8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x460>
    1b46:	b124      	cbz	r4, 1b52 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ca>
    1b48:	2100      	movs	r1, #0
    1b4a:	f240 70c1 	movw	r0, #1985	; 0x7c1
    1b4e:	f3af 8000 	nop.w
    1b52:	f1ba 0f00 	cmp.w	sl, #0
    1b56:	d011      	beq.n	1b7c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f4>
    1b58:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1b5c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1b60:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    1b64:	2820      	cmp	r0, #32
    1b66:	d009      	beq.n	1b7c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f4>
    1b68:	b124      	cbz	r4, 1b74 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ec>
    1b6a:	2100      	movs	r1, #0
    1b6c:	f44f 60f9 	mov.w	r0, #1992	; 0x7c8
    1b70:	f3af 8000 	nop.w
    1b74:	480d      	ldr	r0, [pc, #52]	; (1bac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x424>)
    1b76:	7840      	ldrb	r0, [r0, #1]
    1b78:	f001 ff40 	bl	39fc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1b7c:	b1d4      	cbz	r4, 1bb4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x42c>
    1b7e:	2100      	movs	r1, #0
    1b80:	f240 70cd 	movw	r0, #1997	; 0x7cd
    1b84:	e014      	b.n	1bb0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x428>
    1b86:	e019      	b.n	1bbc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x434>
    1b88:	e000ed04 	.word	0xe000ed04
    1b8c:	20000d5c 	.word	0x20000d5c
    1b90:	00000000 	.word	0x00000000
    1b94:	20000a5c 	.word	0x20000a5c
    1b98:	00000000 	.word	0x00000000
    1b9c:	20000cdc 	.word	0x20000cdc
    1ba0:	2000000e 	.word	0x2000000e
    1ba4:	003fffff 	.word	0x003fffff
    1ba8:	00000000 	.word	0x00000000
    1bac:	2000000c 	.word	0x2000000c
    1bb0:	f3af 8000 	nop.w
    1bb4:	b015      	add	sp, #84	; 0x54
    1bb6:	4650      	mov	r0, sl
    1bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1bbc:	b124      	cbz	r4, 1bc8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x440>
    1bbe:	2100      	movs	r1, #0
    1bc0:	f240 709f 	movw	r0, #1951	; 0x79f
    1bc4:	f3af 8000 	nop.w
    1bc8:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    1bcc:	2004      	movs	r0, #4
    1bce:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1bd0:	f7ff fa92 	bl	10f8 <CONFIG_FPROTECT_BLOCK_SIZE+0xf8>
    1bd4:	e7ac      	b.n	1b30 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a8>
    1bd6:	2c00      	cmp	r4, #0
    1bd8:	f43f ae20 	beq.w	181c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x94>
    1bdc:	2100      	movs	r1, #0
    1bde:	f240 70aa 	movw	r0, #1962	; 0x7aa
    1be2:	f3af 8000 	nop.w
    1be6:	e619      	b.n	181c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x94>
    1be8:	4803      	ldr	r0, [pc, #12]	; (1bf8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x470>)
    1bea:	2800      	cmp	r0, #0
    1bec:	bf18      	it	ne
    1bee:	f3af 8000 	nopne.w
    1bf2:	b662      	cpsie	i
    1bf4:	e7a7      	b.n	1b46 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3be>
    1bf6:	0000      	.short	0x0000
    1bf8:	00000000 	.word	0x00000000

00001bfc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    1bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c00:	4605      	mov	r5, r0
    1c02:	48e4      	ldr	r0, [pc, #912]	; (1f94 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x248>)
    1c04:	b08d      	sub	sp, #52	; 0x34
    1c06:	6800      	ldr	r0, [r0, #0]
    1c08:	05c0      	lsls	r0, r0, #23
    1c0a:	0dc0      	lsrs	r0, r0, #23
    1c0c:	d011      	beq.n	1c32 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x36>
    1c0e:	3810      	subs	r0, #16
    1c10:	b240      	sxtb	r0, r0
    1c12:	2800      	cmp	r0, #0
    1c14:	bfb8      	it	lt
    1c16:	f000 000f 	andlt.w	r0, r0, #15
    1c1a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1c1e:	bfac      	ite	ge
    1c20:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    1c24:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    1c28:	0940      	lsrs	r0, r0, #5
    1c2a:	bf08      	it	eq
    1c2c:	f04f 0b01 	moveq.w	fp, #1
    1c30:	d001      	beq.n	1c36 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3a>
    1c32:	f04f 0b00 	mov.w	fp, #0
    1c36:	7828      	ldrb	r0, [r5, #0]
    1c38:	2800      	cmp	r0, #0
    1c3a:	f04f 0000 	mov.w	r0, #0
    1c3e:	bf1c      	itt	ne
    1c40:	b00d      	addne	sp, #52	; 0x34
    1c42:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c46:	f8df 8350 	ldr.w	r8, [pc, #848]	; 1f98 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x24c>
    1c4a:	4ed4      	ldr	r6, [pc, #848]	; (1f9c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x250>)
    1c4c:	f04f 0900 	mov.w	r9, #0
    1c50:	f8cd 0018 	str.w	r0, [sp, #24]
    1c54:	f1b8 0f00 	cmp.w	r8, #0
    1c58:	d004      	beq.n	1c64 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x68>
    1c5a:	2100      	movs	r1, #0
    1c5c:	f44f 60c8 	mov.w	r0, #1600	; 0x640
    1c60:	f3af 8000 	nop.w
    1c64:	f896 702e 	ldrb.w	r7, [r6, #46]	; 0x2e
    1c68:	f886 902b 	strb.w	r9, [r6, #43]	; 0x2b
    1c6c:	f04f 0a00 	mov.w	sl, #0
    1c70:	f1b8 0f00 	cmp.w	r8, #0
    1c74:	d004      	beq.n	1c80 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x84>
    1c76:	2100      	movs	r1, #0
    1c78:	f240 6045 	movw	r0, #1605	; 0x645
    1c7c:	f3af 8000 	nop.w
    1c80:	f1bb 0f00 	cmp.w	fp, #0
    1c84:	d121      	bne.n	1cca <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xce>
    1c86:	463c      	mov	r4, r7
    1c88:	2001      	movs	r0, #1
    1c8a:	ea20 0704 	bic.w	r7, r0, r4
    1c8e:	48c4      	ldr	r0, [pc, #784]	; (1fa0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x254>)
    1c90:	2240      	movs	r2, #64	; 0x40
    1c92:	eb00 1184 	add.w	r1, r0, r4, lsl #6
    1c96:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    1c9a:	f00a fa62 	bl	c162 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1c9e:	f1b8 0f00 	cmp.w	r8, #0
    1ca2:	d004      	beq.n	1cae <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xb2>
    1ca4:	2100      	movs	r1, #0
    1ca6:	f240 50b5 	movw	r0, #1461	; 0x5b5
    1caa:	f3af 8000 	nop.w
    1cae:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    1cb2:	eb06 0087 	add.w	r0, r6, r7, lsl #2
    1cb6:	6a09      	ldr	r1, [r1, #32]
    1cb8:	6201      	str	r1, [r0, #32]
    1cba:	f1b8 0f00 	cmp.w	r8, #0
    1cbe:	d004      	beq.n	1cca <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xce>
    1cc0:	2100      	movs	r1, #0
    1cc2:	f240 50b9 	movw	r0, #1465	; 0x5b9
    1cc6:	f3af 8000 	nop.w
    1cca:	f1b8 0f00 	cmp.w	r8, #0
    1cce:	d004      	beq.n	1cda <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xde>
    1cd0:	2100      	movs	r1, #0
    1cd2:	f240 604d 	movw	r0, #1613	; 0x64d
    1cd6:	f3af 8000 	nop.w
    1cda:	f000 fea3 	bl	2a24 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1cde:	4604      	mov	r4, r0
    1ce0:	a802      	add	r0, sp, #8
    1ce2:	9001      	str	r0, [sp, #4]
    1ce4:	7828      	ldrb	r0, [r5, #0]
    1ce6:	f88d 0016 	strb.w	r0, [sp, #22]
    1cea:	7ae8      	ldrb	r0, [r5, #11]
    1cec:	f88d 0015 	strb.w	r0, [sp, #21]
    1cf0:	7aa9      	ldrb	r1, [r5, #10]
    1cf2:	f88d 1014 	strb.w	r1, [sp, #20]
    1cf6:	8929      	ldrh	r1, [r5, #8]
    1cf8:	f8ad 1012 	strh.w	r1, [sp, #18]
    1cfc:	782a      	ldrb	r2, [r5, #0]
    1cfe:	9000      	str	r0, [sp, #0]
    1d00:	686b      	ldr	r3, [r5, #4]
    1d02:	b19a      	cbz	r2, 1d2c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x130>
    1d04:	2200      	movs	r2, #0
    1d06:	9801      	ldr	r0, [sp, #4]
    1d08:	f7fe fc0e 	bl	528 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x2c>
    1d0c:	9400      	str	r4, [sp, #0]
    1d0e:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    1d12:	aa08      	add	r2, sp, #32
    1d14:	a907      	add	r1, sp, #28
    1d16:	f001 fa09 	bl	312c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    1d1a:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1d1e:	2820      	cmp	r0, #32
    1d20:	d009      	beq.n	1d36 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x13a>
    1d22:	6930      	ldr	r0, [r6, #16]
    1d24:	1d40      	adds	r0, r0, #5
    1d26:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d2a:	e01d      	b.n	1d68 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c>
    1d2c:	68ea      	ldr	r2, [r5, #12]
    1d2e:	9801      	ldr	r0, [sp, #4]
    1d30:	f7fe fbfa 	bl	528 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x2c>
    1d34:	e046      	b.n	1dc4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x78>
    1d36:	9800      	ldr	r0, [sp, #0]
    1d38:	3009      	adds	r0, #9
    1d3a:	9000      	str	r0, [sp, #0]
    1d3c:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    1d40:	b128      	cbz	r0, 1d4e <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2>
    1d42:	f001 fd27 	bl	3794 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1d46:	b910      	cbnz	r0, 1d4e <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2>
    1d48:	9800      	ldr	r0, [sp, #0]
    1d4a:	3032      	adds	r0, #50	; 0x32
    1d4c:	9000      	str	r0, [sp, #0]
    1d4e:	4895      	ldr	r0, [pc, #596]	; (1fa4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x258>)
    1d50:	9907      	ldr	r1, [sp, #28]
    1d52:	7840      	ldrb	r0, [r0, #1]
    1d54:	4288      	cmp	r0, r1
    1d56:	bf98      	it	ls
    1d58:	9800      	ldrls	r0, [sp, #0]
    1d5a:	d903      	bls.n	1d64 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x18>
    1d5c:	1a41      	subs	r1, r0, r1
    1d5e:	9800      	ldr	r0, [sp, #0]
    1d60:	4408      	add	r0, r1
    1d62:	9000      	str	r0, [sp, #0]
    1d64:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d68:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1d6c:	1a89      	subs	r1, r1, r2
    1d6e:	9002      	str	r0, [sp, #8]
    1d70:	4408      	add	r0, r1
    1d72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d76:	9003      	str	r0, [sp, #12]
    1d78:	4639      	mov	r1, r7
    1d7a:	9801      	ldr	r0, [sp, #4]
    1d7c:	f7fe fc72 	bl	664 <CONFIG_BT_HCI_TX_STACK_SIZE+0x64>
    1d80:	9401      	str	r4, [sp, #4]
    1d82:	7ae8      	ldrb	r0, [r5, #11]
    1d84:	9000      	str	r0, [sp, #0]
    1d86:	8929      	ldrh	r1, [r5, #8]
    1d88:	a808      	add	r0, sp, #32
    1d8a:	686b      	ldr	r3, [r5, #4]
    1d8c:	68ea      	ldr	r2, [r5, #12]
    1d8e:	f7fe fbcb 	bl	528 <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY+0x2c>
    1d92:	e9dd 3001 	ldrd	r3, r0, [sp, #4]
    1d96:	9a03      	ldr	r2, [sp, #12]
    1d98:	1ac0      	subs	r0, r0, r3
    1d9a:	1ad2      	subs	r2, r2, r3
    1d9c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1da0:	9909      	ldr	r1, [sp, #36]	; 0x24
    1da2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1da6:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    1daa:	d201      	bcs.n	1db0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x64>
    1dac:	4291      	cmp	r1, r2
    1dae:	d209      	bcs.n	1dc4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x78>
    1db0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1db4:	1a89      	subs	r1, r1, r2
    1db6:	1860      	adds	r0, r4, r1
    1db8:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
    1dbc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1dc0:	e9cd 2002 	strd	r2, r0, [sp, #8]
    1dc4:	f1b8 0f00 	cmp.w	r8, #0
    1dc8:	d004      	beq.n	1dd4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x88>
    1dca:	2100      	movs	r1, #0
    1dcc:	f240 6053 	movw	r0, #1619	; 0x653
    1dd0:	f3af 8000 	nop.w
    1dd4:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1dd8:	2820      	cmp	r0, #32
    1dda:	d014      	beq.n	1e06 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xba>
    1ddc:	6930      	ldr	r0, [r6, #16]
    1dde:	9902      	ldr	r1, [sp, #8]
    1de0:	1a09      	subs	r1, r1, r0
    1de2:	0209      	lsls	r1, r1, #8
    1de4:	17ca      	asrs	r2, r1, #31
    1de6:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1dea:	1209      	asrs	r1, r1, #8
    1dec:	d50b      	bpl.n	1e06 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xba>
    1dee:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1df2:	1a89      	subs	r1, r1, r2
    1df4:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    1df8:	4408      	add	r0, r1
    1dfa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1dfe:	e9cd 2002 	strd	r2, r0, [sp, #8]
    1e02:	f04f 0a01 	mov.w	sl, #1
    1e06:	f1b8 0f00 	cmp.w	r8, #0
    1e0a:	d009      	beq.n	1e20 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd4>
    1e0c:	2100      	movs	r1, #0
    1e0e:	f240 605d 	movw	r0, #1629	; 0x65d
    1e12:	f3af 8000 	nop.w
    1e16:	2100      	movs	r1, #0
    1e18:	f240 6063 	movw	r0, #1635	; 0x663
    1e1c:	f3af 8000 	nop.w
    1e20:	9902      	ldr	r1, [sp, #8]
    1e22:	9a03      	ldr	r2, [sp, #12]
    1e24:	1b09      	subs	r1, r1, r4
    1e26:	1b12      	subs	r2, r2, r4
    1e28:	485f      	ldr	r0, [pc, #380]	; (1fa8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x25c>)
    1e2a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1e2e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1e32:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    1e36:	d205      	bcs.n	1e44 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf8>
    1e38:	4290      	cmp	r0, r2
    1e3a:	d303      	bcc.n	1e44 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf8>
    1e3c:	f1bb 0f00 	cmp.w	fp, #0
    1e40:	d10b      	bne.n	1e5a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10e>
    1e42:	e004      	b.n	1e4e <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x102>
    1e44:	464f      	mov	r7, r9
    1e46:	f1bb 0f00 	cmp.w	fp, #0
    1e4a:	d03a      	beq.n	1ec2 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x176>
    1e4c:	e098      	b.n	1f80 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x234>
    1e4e:	4639      	mov	r1, r7
    1e50:	a802      	add	r0, sp, #8
    1e52:	f7fe fc07 	bl	664 <CONFIG_BT_HCI_TX_STACK_SIZE+0x64>
    1e56:	ea4a 0a00 	orr.w	sl, sl, r0
    1e5a:	f1ba 0f00 	cmp.w	sl, #0
    1e5e:	d024      	beq.n	1eaa <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x15e>
    1e60:	9802      	ldr	r0, [sp, #8]
    1e62:	f00a f810 	bl	be86 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    1e66:	4601      	mov	r1, r0
    1e68:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    1e6c:	f99d 2010 	ldrsb.w	r2, [sp, #16]
    1e70:	f8df c138 	ldr.w	ip, [pc, #312]	; 1fac <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x260>
    1e74:	4410      	add	r0, r2
    1e76:	1cc0      	adds	r0, r0, #3
    1e78:	180a      	adds	r2, r1, r0
    1e7a:	2400      	movs	r4, #0
    1e7c:	ebbc 0101 	subs.w	r1, ip, r1
    1e80:	eb74 0109 	sbcs.w	r1, r4, r9
    1e84:	d346      	bcc.n	1f14 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c8>
    1e86:	494a      	ldr	r1, [pc, #296]	; (1fb0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x264>)
    1e88:	4288      	cmp	r0, r1
    1e8a:	dc5e      	bgt.n	1f4a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1fe>
    1e8c:	4249      	negs	r1, r1
    1e8e:	4288      	cmp	r0, r1
    1e90:	db63      	blt.n	1f5a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20e>
    1e92:	f10c 0001 	add.w	r0, ip, #1
    1e96:	4282      	cmp	r2, r0
    1e98:	bfa8      	it	ge
    1e9a:	4846      	ldrge	r0, [pc, #280]	; (1fb4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x268>)
    1e9c:	da03      	bge.n	1ea6 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x15a>
    1e9e:	2a00      	cmp	r2, #0
    1ea0:	bfb8      	it	lt
    1ea2:	4845      	ldrlt	r0, [pc, #276]	; (1fb8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x26c>)
    1ea4:	da00      	bge.n	1ea8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x15c>
    1ea6:	1812      	adds	r2, r2, r0
    1ea8:	60ea      	str	r2, [r5, #12]
    1eaa:	f04f 0001 	mov.w	r0, #1
    1eae:	9006      	str	r0, [sp, #24]
    1eb0:	f1b8 0f00 	cmp.w	r8, #0
    1eb4:	d064      	beq.n	1f80 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x234>
    1eb6:	2100      	movs	r1, #0
    1eb8:	f240 6076 	movw	r0, #1654	; 0x676
    1ebc:	f3af 8000 	nop.w
    1ec0:	e05e      	b.n	1f80 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x234>
    1ec2:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    1ec6:	aa01      	add	r2, sp, #4
    1ec8:	4669      	mov	r1, sp
    1eca:	f001 f92f 	bl	312c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    1ece:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1ed2:	2820      	cmp	r0, #32
    1ed4:	d023      	beq.n	1f1e <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d2>
    1ed6:	6930      	ldr	r0, [r6, #16]
    1ed8:	1d40      	adds	r0, r0, #5
    1eda:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1ede:	bf00      	nop
    1ee0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1ee4:	1a89      	subs	r1, r1, r2
    1ee6:	4401      	add	r1, r0
    1ee8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1eec:	e9cd 0102 	strd	r0, r1, [sp, #8]
    1ef0:	f009 ffc9 	bl	be86 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    1ef4:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    1ef8:	f99d 2010 	ldrsb.w	r2, [sp, #16]
    1efc:	f8df c0ac 	ldr.w	ip, [pc, #172]	; 1fac <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x260>
    1f00:	4411      	add	r1, r2
    1f02:	1cca      	adds	r2, r1, #3
    1f04:	4601      	mov	r1, r0
    1f06:	2300      	movs	r3, #0
    1f08:	ebbc 0101 	subs.w	r1, ip, r1
    1f0c:	4410      	add	r0, r2
    1f0e:	eb73 0107 	sbcs.w	r1, r3, r7
    1f12:	d217      	bcs.n	1f44 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1f8>
    1f14:	f240 51f1 	movw	r1, #1521	; 0x5f1
    1f18:	2070      	movs	r0, #112	; 0x70
    1f1a:	f001 fc9f 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1f1e:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    1f22:	3409      	adds	r4, #9
    1f24:	b120      	cbz	r0, 1f30 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e4>
    1f26:	f001 fc35 	bl	3794 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1f2a:	2800      	cmp	r0, #0
    1f2c:	bf08      	it	eq
    1f2e:	3432      	addeq	r4, #50	; 0x32
    1f30:	481c      	ldr	r0, [pc, #112]	; (1fa4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x258>)
    1f32:	9900      	ldr	r1, [sp, #0]
    1f34:	7840      	ldrb	r0, [r0, #1]
    1f36:	4288      	cmp	r0, r1
    1f38:	bf84      	itt	hi
    1f3a:	1a40      	subhi	r0, r0, r1
    1f3c:	4404      	addhi	r4, r0
    1f3e:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    1f42:	e7cd      	b.n	1ee0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x194>
    1f44:	491a      	ldr	r1, [pc, #104]	; (1fb0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x264>)
    1f46:	428a      	cmp	r2, r1
    1f48:	dd04      	ble.n	1f54 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x208>
    1f4a:	f240 51f2 	movw	r1, #1522	; 0x5f2
    1f4e:	2070      	movs	r0, #112	; 0x70
    1f50:	f001 fc84 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1f54:	4919      	ldr	r1, [pc, #100]	; (1fbc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x270>)
    1f56:	428a      	cmp	r2, r1
    1f58:	da04      	bge.n	1f64 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x218>
    1f5a:	f240 51f3 	movw	r1, #1523	; 0x5f3
    1f5e:	2070      	movs	r0, #112	; 0x70
    1f60:	f001 fc7c 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1f64:	4914      	ldr	r1, [pc, #80]	; (1fb8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x26c>)
    1f66:	4288      	cmp	r0, r1
    1f68:	bfa8      	it	ge
    1f6a:	4912      	ldrge	r1, [pc, #72]	; (1fb4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x268>)
    1f6c:	da03      	bge.n	1f76 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x22a>
    1f6e:	2800      	cmp	r0, #0
    1f70:	bfb8      	it	lt
    1f72:	4911      	ldrlt	r1, [pc, #68]	; (1fb8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x26c>)
    1f74:	da00      	bge.n	1f78 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x22c>
    1f76:	1840      	adds	r0, r0, r1
    1f78:	60e8      	str	r0, [r5, #12]
    1f7a:	f04f 0001 	mov.w	r0, #1
    1f7e:	9006      	str	r0, [sp, #24]
    1f80:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    1f84:	2800      	cmp	r0, #0
    1f86:	f47f ae65 	bne.w	1c54 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x58>
    1f8a:	9806      	ldr	r0, [sp, #24]
    1f8c:	b00d      	add	sp, #52	; 0x34
    1f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1f92:	0000      	.short	0x0000
    1f94:	e000ed04 	.word	0xe000ed04
    1f98:	00000000 	.word	0x00000000
    1f9c:	20000d5c 	.word	0x20000d5c
    1fa0:	20000cdc 	.word	0x20000cdc
    1fa4:	2000000e 	.word	0x2000000e
    1fa8:	003fffff 	.word	0x003fffff
    1fac:	1e847fff 	.word	0x1e847fff
    1fb0:	07a12000 	.word	0x07a12000
    1fb4:	e17b8000 	.word	0xe17b8000
    1fb8:	1e848000 	.word	0x1e848000
    1fbc:	f85ee000 	.word	0xf85ee000

00001fc0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    1fc0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1fc4:	4d80      	ldr	r5, [pc, #512]	; (21c8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1c8>)
    1fc6:	b08c      	sub	sp, #48	; 0x30
    1fc8:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1fcc:	2000      	movs	r0, #0
    1fce:	9009      	str	r0, [sp, #36]	; 0x24
    1fd0:	2001      	movs	r0, #1
    1fd2:	4c7e      	ldr	r4, [pc, #504]	; (21cc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1cc>)
    1fd4:	f04f 0800 	mov.w	r8, #0
    1fd8:	f1a5 0780 	sub.w	r7, r5, #128	; 0x80
    1fdc:	4683      	mov	fp, r0
    1fde:	9008      	str	r0, [sp, #32]
    1fe0:	b124      	cbz	r4, 1fec <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    1fe2:	2100      	movs	r1, #0
    1fe4:	f240 70dc 	movw	r0, #2012	; 0x7dc
    1fe8:	f3af 8000 	nop.w
    1fec:	9808      	ldr	r0, [sp, #32]
    1fee:	b390      	cbz	r0, 2056 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x56>
    1ff0:	f885 802b 	strb.w	r8, [r5, #43]	; 0x2b
    1ff4:	b124      	cbz	r4, 2000 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE>
    1ff6:	2100      	movs	r1, #0
    1ff8:	f240 70e1 	movw	r0, #2017	; 0x7e1
    1ffc:	f3af 8000 	nop.w
    2000:	f895 902e 	ldrb.w	r9, [r5, #46]	; 0x2e
    2004:	2240      	movs	r2, #64	; 0x40
    2006:	ea2b 0609 	bic.w	r6, fp, r9
    200a:	eb07 1086 	add.w	r0, r7, r6, lsl #6
    200e:	eb07 1189 	add.w	r1, r7, r9, lsl #6
    2012:	4682      	mov	sl, r0
    2014:	f00a f8a5 	bl	c162 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2018:	b124      	cbz	r4, 2024 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x24>
    201a:	2100      	movs	r1, #0
    201c:	f240 50b5 	movw	r0, #1461	; 0x5b5
    2020:	f3af 8000 	nop.w
    2024:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    2028:	eb05 0189 	add.w	r1, r5, r9, lsl #2
    202c:	9000      	str	r0, [sp, #0]
    202e:	6a09      	ldr	r1, [r1, #32]
    2030:	6201      	str	r1, [r0, #32]
    2032:	b124      	cbz	r4, 203e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3e>
    2034:	2100      	movs	r1, #0
    2036:	f240 50b9 	movw	r0, #1465	; 0x5b9
    203a:	f3af 8000 	nop.w
    203e:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2042:	b180      	cbz	r0, 2066 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x66>
    2044:	2c00      	cmp	r4, #0
    2046:	bf1c      	itt	ne
    2048:	2100      	movne	r1, #0
    204a:	f240 70e7 	movwne	r0, #2023	; 0x7e7
    204e:	d0c7      	beq.n	1fe0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2050:	f3af 8000 	nop.w
    2054:	e7c4      	b.n	1fe0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2056:	e7ff      	b.n	2058 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x58>
    2058:	485d      	ldr	r0, [pc, #372]	; (21d0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1d0>)
    205a:	2800      	cmp	r0, #0
    205c:	bf18      	it	ne
    205e:	f3af 8000 	nopne.w
    2062:	b662      	cpsie	i
    2064:	e7c4      	b.n	1ff0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x30>
    2066:	b124      	cbz	r4, 2072 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x72>
    2068:	2100      	movs	r1, #0
    206a:	f240 70eb 	movw	r0, #2027	; 0x7eb
    206e:	f3af 8000 	nop.w
    2072:	980c      	ldr	r0, [sp, #48]	; 0x30
    2074:	f81a 0010 	ldrb.w	r0, [sl, r0, lsl #1]
    2078:	2803      	cmp	r0, #3
    207a:	d178      	bne.n	216e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x16e>
    207c:	f8dd 9000 	ldr.w	r9, [sp]
    2080:	f8cd 9018 	str.w	r9, [sp, #24]
    2084:	990c      	ldr	r1, [sp, #48]	; 0x30
    2086:	f899 0020 	ldrb.w	r0, [r9, #32]
    208a:	4288      	cmp	r0, r1
    208c:	bf14      	ite	ne
    208e:	f04f 0a00 	movne.w	sl, #0
    2092:	f04f 0a01 	moveq.w	sl, #1
    2096:	f109 0c20 	add.w	ip, r9, #32
    209a:	4686      	mov	lr, r0
    209c:	2220      	movs	r2, #32
    209e:	eb07 1386 	add.w	r3, r7, r6, lsl #6
    20a2:	e003      	b.n	20ac <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xac>
    20a4:	4602      	mov	r2, r0
    20a6:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    20aa:	7840      	ldrb	r0, [r0, #1]
    20ac:	4288      	cmp	r0, r1
    20ae:	d002      	beq.n	20b6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xb6>
    20b0:	2820      	cmp	r0, #32
    20b2:	d00a      	beq.n	20ca <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xca>
    20b4:	e7f6      	b.n	20a4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xa4>
    20b6:	2820      	cmp	r0, #32
    20b8:	d007      	beq.n	20ca <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xca>
    20ba:	4586      	cmp	lr, r0
    20bc:	d107      	bne.n	20ce <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xce>
    20be:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    20c2:	7840      	ldrb	r0, [r0, #1]
    20c4:	f88c 0000 	strb.w	r0, [ip]
    20c8:	e007      	b.n	20da <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xda>
    20ca:	4640      	mov	r0, r8
    20cc:	e00c      	b.n	20e8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xe8>
    20ce:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    20d2:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    20d6:	7840      	ldrb	r0, [r0, #1]
    20d8:	7048      	strb	r0, [r1, #1]
    20da:	b124      	cbz	r4, 20e6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xe6>
    20dc:	2100      	movs	r1, #0
    20de:	f240 503a 	movw	r0, #1338	; 0x53a
    20e2:	f3af 8000 	nop.w
    20e6:	4658      	mov	r0, fp
    20e8:	ea10 0f0a 	tst.w	r0, sl
    20ec:	bf18      	it	ne
    20ee:	f889 b023 	strbne.w	fp, [r9, #35]	; 0x23
    20f2:	b3e0      	cbz	r0, 216e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x16e>
    20f4:	b124      	cbz	r4, 2100 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x100>
    20f6:	2100      	movs	r1, #0
    20f8:	f44f 60fe 	mov.w	r0, #2032	; 0x7f0
    20fc:	f3af 8000 	nop.w
    2100:	4632      	mov	r2, r6
    2102:	2001      	movs	r0, #1
    2104:	990c      	ldr	r1, [sp, #48]	; 0x30
    2106:	f7fe fff7 	bl	10f8 <CONFIG_FPROTECT_BLOCK_SIZE+0xf8>
    210a:	9806      	ldr	r0, [sp, #24]
    210c:	f890 9023 	ldrb.w	r9, [r0, #35]	; 0x23
    2110:	b124      	cbz	r4, 211c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x11c>
    2112:	2100      	movs	r1, #0
    2114:	f240 70fb 	movw	r0, #2043	; 0x7fb
    2118:	f3af 8000 	nop.w
    211c:	482d      	ldr	r0, [pc, #180]	; (21d4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1d4>)
    211e:	2800      	cmp	r0, #0
    2120:	bf18      	it	ne
    2122:	f3af 8000 	nopne.w
    2126:	f3ef 8010 	mrs	r0, PRIMASK
    212a:	b672      	cpsid	i
    212c:	9008      	str	r0, [sp, #32]
    212e:	b124      	cbz	r4, 213a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x13a>
    2130:	2100      	movs	r1, #0
    2132:	f44f 6000 	mov.w	r0, #2048	; 0x800
    2136:	f3af 8000 	nop.w
    213a:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    213e:	b138      	cbz	r0, 2150 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x150>
    2140:	2c00      	cmp	r4, #0
    2142:	bf1c      	itt	ne
    2144:	2100      	movne	r1, #0
    2146:	f640 0004 	movwne	r0, #2052	; 0x804
    214a:	f43f af49 	beq.w	1fe0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    214e:	e77f      	b.n	2050 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x50>
    2150:	f1b9 0f00 	cmp.w	r9, #0
    2154:	d008      	beq.n	2168 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x168>
    2156:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    215a:	2820      	cmp	r0, #32
    215c:	d104      	bne.n	2168 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x168>
    215e:	4631      	mov	r1, r6
    2160:	2002      	movs	r0, #2
    2162:	f7fe fff9 	bl	1158 <CONFIG_FPROTECT_BLOCK_SIZE+0x158>
    2166:	b1f8      	cbz	r0, 21a8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1a8>
    2168:	b134      	cbz	r4, 2178 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x178>
    216a:	2100      	movs	r1, #0
    216c:	e000      	b.n	2170 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x170>
    216e:	e009      	b.n	2184 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x184>
    2170:	f640 0018 	movw	r0, #2072	; 0x818
    2174:	f3af 8000 	nop.w
    2178:	f885 602e 	strb.w	r6, [r5, #46]	; 0x2e
    217c:	f885 b02b 	strb.w	fp, [r5, #43]	; 0x2b
    2180:	2001      	movs	r0, #1
    2182:	9009      	str	r0, [sp, #36]	; 0x24
    2184:	b124      	cbz	r4, 2190 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x190>
    2186:	2100      	movs	r1, #0
    2188:	f640 0021 	movw	r0, #2081	; 0x821
    218c:	f3af 8000 	nop.w
    2190:	9808      	ldr	r0, [sp, #32]
    2192:	b188      	cbz	r0, 21b8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1b8>
    2194:	b124      	cbz	r4, 21a0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1a0>
    2196:	2100      	movs	r1, #0
    2198:	f640 0025 	movw	r0, #2085	; 0x825
    219c:	f3af 8000 	nop.w
    21a0:	9809      	ldr	r0, [sp, #36]	; 0x24
    21a2:	b00d      	add	sp, #52	; 0x34
    21a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    21a8:	2c00      	cmp	r4, #0
    21aa:	d0f1      	beq.n	2190 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x190>
    21ac:	2100      	movs	r1, #0
    21ae:	f640 0013 	movw	r0, #2067	; 0x813
    21b2:	f3af 8000 	nop.w
    21b6:	e7e6      	b.n	2186 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x186>
    21b8:	4805      	ldr	r0, [pc, #20]	; (21d0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1d0>)
    21ba:	2800      	cmp	r0, #0
    21bc:	bf18      	it	ne
    21be:	f3af 8000 	nopne.w
    21c2:	b662      	cpsie	i
    21c4:	e7e6      	b.n	2194 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x194>
    21c6:	0000      	.short	0x0000
    21c8:	20000d5c 	.word	0x20000d5c
	...

000021d8 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    21d8:	b510      	push	{r4, lr}
    21da:	2820      	cmp	r0, #32
    21dc:	d211      	bcs.n	2202 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    21de:	490e      	ldr	r1, [pc, #56]	; (2218 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    21e0:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    21e4:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    21e8:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    21ec:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    21f0:	b13b      	cbz	r3, 2202 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    21f2:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    21f6:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    21fa:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    21fe:	2a01      	cmp	r2, #1
    2200:	d001      	beq.n	2206 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    2202:	2000      	movs	r0, #0
    2204:	bd10      	pop	{r4, pc}
    2206:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
    220a:	4601      	mov	r1, r0
    220c:	2000      	movs	r0, #0
    220e:	f7fe ff73 	bl	10f8 <CONFIG_FPROTECT_BLOCK_SIZE+0xf8>
    2212:	2001      	movs	r0, #1
    2214:	bd10      	pop	{r4, pc}
    2216:	0000      	.short	0x0000
    2218:	20000d5c 	.word	0x20000d5c

0000221c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    221c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    2220:	4e7e      	ldr	r6, [pc, #504]	; (241c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x200>)
    2222:	4680      	mov	r8, r0
    2224:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    2228:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    222c:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    2230:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2234:	2800      	cmp	r0, #0
    2236:	d065      	beq.n	2304 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    2238:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
    223c:	4d78      	ldr	r5, [pc, #480]	; (2420 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x204>)
    223e:	b125      	cbz	r5, 224a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    2240:	2100      	movs	r1, #0
    2242:	f640 30b3 	movw	r0, #2995	; 0xbb3
    2246:	f3af 8000 	nop.w
    224a:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    224e:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2252:	2801      	cmp	r0, #1
    2254:	d018      	beq.n	2288 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    2256:	b2c0      	uxtb	r0, r0
    2258:	2804      	cmp	r0, #4
    225a:	bf1c      	itt	ne
    225c:	2805      	cmpne	r0, #5
    225e:	2806      	cmpne	r0, #6
    2260:	d055      	beq.n	230e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf2>
    2262:	b12d      	cbz	r5, 2270 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    2264:	f04f 0100 	mov.w	r1, #0
    2268:	f640 30bf 	movw	r0, #3007	; 0xbbf
    226c:	f3af 8000 	nop.w
    2270:	f001 fc1a 	bl	3aa8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    2274:	b125      	cbz	r5, 2280 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    2276:	2100      	movs	r1, #0
    2278:	f640 30c3 	movw	r0, #3011	; 0xbc3
    227c:	f3af 8000 	nop.w
    2280:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2284:	2801      	cmp	r0, #1
    2286:	d1e6      	bne.n	2256 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    2288:	2401      	movs	r4, #1
    228a:	b125      	cbz	r5, 2296 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    228c:	2100      	movs	r1, #0
    228e:	f640 30ca 	movw	r0, #3018	; 0xbca
    2292:	f3af 8000 	nop.w
    2296:	b3a4      	cbz	r4, 2302 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe6>
    2298:	2000      	movs	r0, #0
    229a:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    229e:	b125      	cbz	r5, 22aa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x8e>
    22a0:	2100      	movs	r1, #0
    22a2:	f640 30cf 	movw	r0, #3023	; 0xbcf
    22a6:	f3af 8000 	nop.w
    22aa:	f896 b02e 	ldrb.w	fp, [r6, #46]	; 0x2e
    22ae:	2001      	movs	r0, #1
    22b0:	ea20 090b 	bic.w	r9, r0, fp
    22b4:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    22b8:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    22bc:	2240      	movs	r2, #64	; 0x40
    22be:	f009 ff50 	bl	c162 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    22c2:	b125      	cbz	r5, 22ce <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb2>
    22c4:	2100      	movs	r1, #0
    22c6:	f240 50b5 	movw	r0, #1461	; 0x5b5
    22ca:	f3af 8000 	nop.w
    22ce:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    22d2:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    22d6:	6a00      	ldr	r0, [r0, #32]
    22d8:	f8ca 0020 	str.w	r0, [sl, #32]
    22dc:	b125      	cbz	r5, 22e8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xcc>
    22de:	2100      	movs	r1, #0
    22e0:	f240 50b9 	movw	r0, #1465	; 0x5b9
    22e4:	f3af 8000 	nop.w
    22e8:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    22ec:	b1e0      	cbz	r0, 2328 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10c>
    22ee:	2d00      	cmp	r5, #0
    22f0:	bf1c      	itt	ne
    22f2:	2100      	movne	r1, #0
    22f4:	f640 30d5 	movwne	r0, #3029	; 0xbd5
    22f8:	d0c7      	beq.n	228a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    22fa:	bf00      	nop
    22fc:	f3af 8000 	nop.w
    2300:	e7c3      	b.n	228a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2302:	e00a      	b.n	231a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xfe>
    2304:	f640 31aa 	movw	r1, #2986	; 0xbaa
    2308:	2070      	movs	r0, #112	; 0x70
    230a:	f001 faa7 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    230e:	464a      	mov	r2, r9
    2310:	4641      	mov	r1, r8
    2312:	2001      	movs	r0, #1
    2314:	f7fe fef0 	bl	10f8 <CONFIG_FPROTECT_BLOCK_SIZE+0xf8>
    2318:	e7ac      	b.n	2274 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    231a:	4842      	ldr	r0, [pc, #264]	; (2424 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    231c:	2800      	cmp	r0, #0
    231e:	bf18      	it	ne
    2320:	f3af 8000 	nopne.w
    2324:	b662      	cpsie	i
    2326:	e7b7      	b.n	2298 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7c>
    2328:	b125      	cbz	r5, 2334 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x118>
    232a:	2100      	movs	r1, #0
    232c:	f640 30d9 	movw	r0, #3033	; 0xbd9
    2330:	f3af 8000 	nop.w
    2334:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    2338:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    233c:	4640      	mov	r0, r8
    233e:	461c      	mov	r4, r3
    2340:	f04f 0b20 	mov.w	fp, #32
    2344:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    2348:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    234c:	e004      	b.n	2358 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x13c>
    234e:	46a3      	mov	fp, r4
    2350:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    2354:	f89c 4001 	ldrb.w	r4, [ip, #1]
    2358:	4284      	cmp	r4, r0
    235a:	d002      	beq.n	2362 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x146>
    235c:	2c20      	cmp	r4, #32
    235e:	d02b      	beq.n	23b8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19c>
    2360:	e7f5      	b.n	234e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x132>
    2362:	2c20      	cmp	r4, #32
    2364:	d028      	beq.n	23b8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19c>
    2366:	42a3      	cmp	r3, r4
    2368:	d104      	bne.n	2374 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x158>
    236a:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    236e:	7840      	ldrb	r0, [r0, #1]
    2370:	7008      	strb	r0, [r1, #0]
    2372:	e005      	b.n	2380 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x164>
    2374:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    2378:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    237c:	7840      	ldrb	r0, [r0, #1]
    237e:	7048      	strb	r0, [r1, #1]
    2380:	f1ba 0f00 	cmp.w	sl, #0
    2384:	d011      	beq.n	23aa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    2386:	b125      	cbz	r5, 2392 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x176>
    2388:	2100      	movs	r1, #0
    238a:	f240 5032 	movw	r0, #1330	; 0x532
    238e:	f3af 8000 	nop.w
    2392:	f89a 0000 	ldrb.w	r0, [sl]
    2396:	42a0      	cmp	r0, r4
    2398:	d107      	bne.n	23aa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    239a:	b125      	cbz	r5, 23a6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18a>
    239c:	2100      	movs	r1, #0
    239e:	f240 5035 	movw	r0, #1333	; 0x535
    23a2:	f3af 8000 	nop.w
    23a6:	f88a b000 	strb.w	fp, [sl]
    23aa:	b15d      	cbz	r5, 23c4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a8>
    23ac:	2100      	movs	r1, #0
    23ae:	f240 503a 	movw	r0, #1338	; 0x53a
    23b2:	f3af 8000 	nop.w
    23b6:	e000      	b.n	23ba <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    23b8:	b125      	cbz	r5, 23c4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a8>
    23ba:	2100      	movs	r1, #0
    23bc:	f640 30dd 	movw	r0, #3037	; 0xbdd
    23c0:	f3af 8000 	nop.w
    23c4:	4818      	ldr	r0, [pc, #96]	; (2428 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    23c6:	2800      	cmp	r0, #0
    23c8:	bf18      	it	ne
    23ca:	f3af 8000 	nopne.w
    23ce:	f3ef 8410 	mrs	r4, PRIMASK
    23d2:	b672      	cpsid	i
    23d4:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    23d8:	b138      	cbz	r0, 23ea <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ce>
    23da:	2d00      	cmp	r5, #0
    23dc:	bf1c      	itt	ne
    23de:	2100      	movne	r1, #0
    23e0:	f640 30e3 	movwne	r0, #3043	; 0xbe3
    23e4:	f43f af51 	beq.w	228a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    23e8:	e788      	b.n	22fc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe0>
    23ea:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
    23ee:	2001      	movs	r0, #1
    23f0:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    23f4:	b154      	cbz	r4, 240c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1f0>
    23f6:	2d00      	cmp	r5, #0
    23f8:	bf08      	it	eq
    23fa:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    23fe:	2100      	movs	r1, #0
    2400:	f44f 603f 	mov.w	r0, #3056	; 0xbf0
    2404:	f3af 8000 	nop.w
    2408:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    240c:	4805      	ldr	r0, [pc, #20]	; (2424 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    240e:	2800      	cmp	r0, #0
    2410:	bf18      	it	ne
    2412:	f3af 8000 	nopne.w
    2416:	b662      	cpsie	i
    2418:	e7ed      	b.n	23f6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1da>
    241a:	0000      	.short	0x0000
    241c:	20000d5c 	.word	0x20000d5c
	...

0000242c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    242c:	b570      	push	{r4, r5, r6, lr}
    242e:	4605      	mov	r5, r0
    2430:	f001 f99e 	bl	3770 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    2434:	480d      	ldr	r0, [pc, #52]	; (246c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x40>)
    2436:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    243a:	2400      	movs	r4, #0
    243c:	3880      	subs	r0, #128	; 0x80
    243e:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    2442:	bf00      	nop
    2444:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    2448:	b129      	cbz	r1, 2456 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    244a:	1c61      	adds	r1, r4, #1
    244c:	b2cc      	uxtb	r4, r1
    244e:	2c20      	cmp	r4, #32
    2450:	d3f8      	bcc.n	2444 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    2452:	2020      	movs	r0, #32
    2454:	bd70      	pop	{r4, r5, r6, pc}
    2456:	4906      	ldr	r1, [pc, #24]	; (2470 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x44>)
    2458:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    245c:	f841 5020 	str.w	r5, [r1, r0, lsl #2]
    2460:	4621      	mov	r1, r4
    2462:	2001      	movs	r0, #1
    2464:	f7fe fe48 	bl	10f8 <CONFIG_FPROTECT_BLOCK_SIZE+0xf8>
    2468:	4620      	mov	r0, r4
    246a:	bd70      	pop	{r4, r5, r6, pc}
    246c:	20000d5c 	.word	0x20000d5c
    2470:	20000a5c 	.word	0x20000a5c

00002474 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    2474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2478:	b083      	sub	sp, #12
    247a:	f000 fad3 	bl	2a24 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    247e:	4605      	mov	r5, r0
    2480:	f000 fd86 	bl	2f90 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    2484:	4c60      	ldr	r4, [pc, #384]	; (2608 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x194>)
    2486:	68a0      	ldr	r0, [r4, #8]
    2488:	f1b0 3fff 	cmp.w	r0, #4294967295
    248c:	bf1c      	itt	ne
    248e:	f04f 30ff 	movne.w	r0, #4294967295
    2492:	60a0      	strne	r0, [r4, #8]
    2494:	7fa0      	ldrb	r0, [r4, #30]
    2496:	f8df b174 	ldr.w	fp, [pc, #372]	; 260c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x198>
    249a:	b9a8      	cbnz	r0, 24c8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x54>
    249c:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    24a0:	1a08      	subs	r0, r1, r0
    24a2:	0200      	lsls	r0, r0, #8
    24a4:	17c1      	asrs	r1, r0, #31
    24a6:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    24aa:	1200      	asrs	r0, r0, #8
    24ac:	f44f 710c 	mov.w	r1, #560	; 0x230
    24b0:	f009 fd16 	bl	bee0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    24b4:	6921      	ldr	r1, [r4, #16]
    24b6:	4408      	add	r0, r1
    24b8:	1a28      	subs	r0, r5, r0
    24ba:	0200      	lsls	r0, r0, #8
    24bc:	17c1      	asrs	r1, r0, #31
    24be:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    24c2:	1200      	asrs	r0, r0, #8
    24c4:	0fc0      	lsrs	r0, r0, #31
    24c6:	d00b      	beq.n	24e0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x6c>
    24c8:	7e60      	ldrb	r0, [r4, #25]
    24ca:	b1c0      	cbz	r0, 24fe <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x8a>
    24cc:	f000 fbb6 	bl	2c3c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    24d0:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    24d4:	b1c8      	cbz	r0, 250a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x96>
    24d6:	f240 414e 	movw	r1, #1102	; 0x44e
    24da:	2070      	movs	r0, #112	; 0x70
    24dc:	f001 f9be 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24e0:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    24e4:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    24e8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    24ec:	f85b 2021 	ldr.w	r2, [fp, r1, lsl #2]
    24f0:	2108      	movs	r1, #8
    24f2:	4790      	blx	r2
    24f4:	f240 413d 	movw	r1, #1085	; 0x43d
    24f8:	2070      	movs	r0, #112	; 0x70
    24fa:	f001 f9af 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24fe:	1ce8      	adds	r0, r5, #3
    2500:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2504:	f000 fa94 	bl	2a30 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2508:	e7e2      	b.n	24d0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x5c>
    250a:	f04f 0a01 	mov.w	sl, #1
    250e:	f884 a02a 	strb.w	sl, [r4, #42]	; 0x2a
    2512:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2516:	2820      	cmp	r0, #32
    2518:	d024      	beq.n	2564 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xf0>
    251a:	f894 802f 	ldrb.w	r8, [r4, #47]	; 0x2f
    251e:	2020      	movs	r0, #32
    2520:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    2524:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    2528:	2600      	movs	r6, #0
    252a:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    252e:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    2532:	4837      	ldr	r0, [pc, #220]	; (2610 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19c>)
    2534:	6026      	str	r6, [r4, #0]
    2536:	7800      	ldrb	r0, [r0, #0]
    2538:	2802      	cmp	r0, #2
    253a:	bf16      	itet	ne
    253c:	2803      	cmpne	r0, #3
    253e:	2001      	moveq	r0, #1
    2540:	2000      	movne	r0, #0
    2542:	7720      	strb	r0, [r4, #28]
    2544:	f894 702e 	ldrb.w	r7, [r4, #46]	; 0x2e
    2548:	eb04 0987 	add.w	r9, r4, r7, lsl #2
    254c:	f899 0020 	ldrb.w	r0, [r9, #32]
    2550:	2820      	cmp	r0, #32
    2552:	d030      	beq.n	25b6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x142>
    2554:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2558:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
    255c:	7c81      	ldrb	r1, [r0, #18]
    255e:	2901      	cmp	r1, #1
    2560:	d005      	beq.n	256e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfa>
    2562:	e028      	b.n	25b6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x142>
    2564:	f240 4151 	movw	r1, #1105	; 0x451
    2568:	2070      	movs	r0, #112	; 0x70
    256a:	f001 f977 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    256e:	46ab      	mov	fp, r5
    2570:	1d05      	adds	r5, r0, #4
    2572:	89c0      	ldrh	r0, [r0, #14]
    2574:	aa01      	add	r2, sp, #4
    2576:	4669      	mov	r1, sp
    2578:	f000 fdd8 	bl	312c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    257c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2580:	2820      	cmp	r0, #32
    2582:	d004      	beq.n	258e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x11a>
    2584:	6920      	ldr	r0, [r4, #16]
    2586:	1d40      	adds	r0, r0, #5
    2588:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    258c:	e00b      	b.n	25a6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x132>
    258e:	8968      	ldrh	r0, [r5, #10]
    2590:	f10b 0b09 	add.w	fp, fp, #9
    2594:	b128      	cbz	r0, 25a2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x12e>
    2596:	f001 f8fd 	bl	3794 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    259a:	2800      	cmp	r0, #0
    259c:	bf08      	it	eq
    259e:	f10b 0b32 	addeq.w	fp, fp, #50	; 0x32
    25a2:	f02b 407f 	bic.w	r0, fp, #4278190080	; 0xff000000
    25a6:	e9d5 2100 	ldrd	r2, r1, [r5]
    25aa:	1a89      	subs	r1, r1, r2
    25ac:	6028      	str	r0, [r5, #0]
    25ae:	4408      	add	r0, r1
    25b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    25b4:	6068      	str	r0, [r5, #4]
    25b6:	4639      	mov	r1, r7
    25b8:	2001      	movs	r0, #1
    25ba:	f7fe fdcd 	bl	1158 <CONFIG_FPROTECT_BLOCK_SIZE+0x158>
    25be:	2800      	cmp	r0, #0
    25c0:	d0f9      	beq.n	25b6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x142>
    25c2:	4814      	ldr	r0, [pc, #80]	; (2614 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a0>)
    25c4:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    25c8:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    25cc:	2802      	cmp	r0, #2
    25ce:	d104      	bne.n	25da <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x166>
    25d0:	463a      	mov	r2, r7
    25d2:	4641      	mov	r1, r8
    25d4:	2006      	movs	r0, #6
    25d6:	f7fe fd8f 	bl	10f8 <CONFIG_FPROTECT_BLOCK_SIZE+0xf8>
    25da:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
    25de:	f899 0021 	ldrb.w	r0, [r9, #33]	; 0x21
    25e2:	2820      	cmp	r0, #32
    25e4:	d003      	beq.n	25ee <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x17a>
    25e6:	480c      	ldr	r0, [pc, #48]	; (2618 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a4>)
    25e8:	7840      	ldrb	r0, [r0, #1]
    25ea:	f001 fa07 	bl	39fc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    25ee:	7f20      	ldrb	r0, [r4, #28]
    25f0:	2800      	cmp	r0, #0
    25f2:	bf04      	itt	eq
    25f4:	b003      	addeq	sp, #12
    25f6:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    25fa:	f000 fd13 	bl	3024 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    25fe:	7726      	strb	r6, [r4, #28]
    2600:	7766      	strb	r6, [r4, #29]
    2602:	b003      	add	sp, #12
    2604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2608:	20000d5c 	.word	0x20000d5c
    260c:	20000a5c 	.word	0x20000a5c
    2610:	2000000e 	.word	0x2000000e
    2614:	20000cdc 	.word	0x20000cdc
    2618:	2000000c 	.word	0x2000000c

0000261c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    261c:	b530      	push	{r4, r5, lr}
    261e:	4c30      	ldr	r4, [pc, #192]	; (26e0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc4>)
    2620:	b083      	sub	sp, #12
    2622:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2626:	2920      	cmp	r1, #32
    2628:	d008      	beq.n	263c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    262a:	68a1      	ldr	r1, [r4, #8]
    262c:	f1b1 3fff 	cmp.w	r1, #4294967295
    2630:	d009      	beq.n	2646 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    2632:	f44f 612d 	mov.w	r1, #2768	; 0xad0
    2636:	2070      	movs	r0, #112	; 0x70
    2638:	f001 f910 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    263c:	f640 21cf 	movw	r1, #2767	; 0xacf
    2640:	2070      	movs	r0, #112	; 0x70
    2642:	f001 f90b 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2646:	6861      	ldr	r1, [r4, #4]
    2648:	f8df c098 	ldr.w	ip, [pc, #152]	; 26e4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc8>
    264c:	180b      	adds	r3, r1, r0
    264e:	2200      	movs	r2, #0
    2650:	ebbc 0101 	subs.w	r1, ip, r1
    2654:	eb72 0102 	sbcs.w	r1, r2, r2
    2658:	d204      	bcs.n	2664 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x48>
    265a:	f240 51f1 	movw	r1, #1521	; 0x5f1
    265e:	2070      	movs	r0, #112	; 0x70
    2660:	f001 f8fc 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2664:	4920      	ldr	r1, [pc, #128]	; (26e8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    2666:	4288      	cmp	r0, r1
    2668:	dd04      	ble.n	2674 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x58>
    266a:	f240 51f2 	movw	r1, #1522	; 0x5f2
    266e:	2070      	movs	r0, #112	; 0x70
    2670:	f001 f8f4 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2674:	491d      	ldr	r1, [pc, #116]	; (26ec <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    2676:	4288      	cmp	r0, r1
    2678:	da04      	bge.n	2684 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x68>
    267a:	f240 51f3 	movw	r1, #1523	; 0x5f3
    267e:	2070      	movs	r0, #112	; 0x70
    2680:	f001 f8ec 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2684:	481a      	ldr	r0, [pc, #104]	; (26f0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    2686:	4283      	cmp	r3, r0
    2688:	bfa8      	it	ge
    268a:	481a      	ldrge	r0, [pc, #104]	; (26f4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd8>)
    268c:	da03      	bge.n	2696 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7a>
    268e:	2b00      	cmp	r3, #0
    2690:	bfb8      	it	lt
    2692:	4817      	ldrlt	r0, [pc, #92]	; (26f0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    2694:	da00      	bge.n	2698 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    2696:	181b      	adds	r3, r3, r0
    2698:	4618      	mov	r0, r3
    269a:	aa01      	add	r2, sp, #4
    269c:	4669      	mov	r1, sp
    269e:	f000 fd45 	bl	312c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    26a2:	f99d 0004 	ldrsb.w	r0, [sp, #4]
    26a6:	280f      	cmp	r0, #15
    26a8:	bfcc      	ite	gt
    26aa:	2001      	movgt	r0, #1
    26ac:	2000      	movle	r0, #0
    26ae:	9900      	ldr	r1, [sp, #0]
    26b0:	4408      	add	r0, r1
    26b2:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    26b6:	60a1      	str	r1, [r4, #8]
    26b8:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    26bc:	2800      	cmp	r0, #0
    26be:	bf04      	itt	eq
    26c0:	b003      	addeq	sp, #12
    26c2:	bd30      	popeq	{r4, r5, pc}
    26c4:	2301      	movs	r3, #1
    26c6:	2203      	movs	r2, #3
    26c8:	2005      	movs	r0, #5
    26ca:	f000 fb31 	bl	2d30 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    26ce:	2800      	cmp	r0, #0
    26d0:	bf1c      	itt	ne
    26d2:	b003      	addne	sp, #12
    26d4:	bd30      	popne	{r4, r5, pc}
    26d6:	f640 21d8 	movw	r1, #2776	; 0xad8
    26da:	2070      	movs	r0, #112	; 0x70
    26dc:	f001 f8be 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    26e0:	20000d5c 	.word	0x20000d5c
    26e4:	1e847fff 	.word	0x1e847fff
    26e8:	07a12000 	.word	0x07a12000
    26ec:	f85ee000 	.word	0xf85ee000
    26f0:	1e848000 	.word	0x1e848000
    26f4:	e17b8000 	.word	0xe17b8000

000026f8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    26f8:	b570      	push	{r4, r5, r6, lr}
    26fa:	4c1e      	ldr	r4, [pc, #120]	; (2774 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    26fc:	2120      	movs	r1, #32
    26fe:	f884 1020 	strb.w	r1, [r4, #32]
    2702:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    2706:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    270a:	2000      	movs	r0, #0
    270c:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    2710:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    2714:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    2718:	1e42      	subs	r2, r0, #1
    271a:	60a2      	str	r2, [r4, #8]
    271c:	6020      	str	r0, [r4, #0]
    271e:	77a0      	strb	r0, [r4, #30]
    2720:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    2724:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    2728:	7720      	strb	r0, [r4, #28]
    272a:	7760      	strb	r0, [r4, #29]
    272c:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    2730:	4911      	ldr	r1, [pc, #68]	; (2778 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    2732:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    2736:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    273a:	7008      	strb	r0, [r1, #0]
    273c:	7048      	strb	r0, [r1, #1]
    273e:	8048      	strh	r0, [r1, #2]
    2740:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    2744:	2210      	movs	r2, #16
    2746:	7088      	strb	r0, [r1, #2]
    2748:	f801 0f04 	strb.w	r0, [r1, #4]!
    274c:	1e52      	subs	r2, r2, #1
    274e:	d1fa      	bne.n	2746 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4e>
    2750:	4d0a      	ldr	r5, [pc, #40]	; (277c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    2752:	2601      	movs	r6, #1
    2754:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    2758:	20ff      	movs	r0, #255	; 0xff
    275a:	7028      	strb	r0, [r5, #0]
    275c:	4808      	ldr	r0, [pc, #32]	; (2780 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x88>)
    275e:	f001 f92f 	bl	39c0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    2762:	7068      	strb	r0, [r5, #1]
    2764:	f001 f98a 	bl	3a7c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    2768:	60a8      	str	r0, [r5, #8]
    276a:	f000 fca3 	bl	30b4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    276e:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    2772:	bd70      	pop	{r4, r5, r6, pc}
    2774:	20000d5c 	.word	0x20000d5c
    2778:	2000000e 	.word	0x2000000e
    277c:	2000000c 	.word	0x2000000c
    2780:	00000fb1 	.word	0x00000fb1

00002784 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    2784:	b570      	push	{r4, r5, r6, lr}
    2786:	4604      	mov	r4, r0
    2788:	4615      	mov	r5, r2
    278a:	4608      	mov	r0, r1
    278c:	f009 fb7b 	bl	be86 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    2790:	4a0f      	ldr	r2, [pc, #60]	; (27d0 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x4c>)
    2792:	1b01      	subs	r1, r0, r4
    2794:	f102 0c01 	add.w	ip, r2, #1
    2798:	ebb1 0f9c 	cmp.w	r1, ip, lsr #2
    279c:	bf24      	itt	cs
    279e:	1a23      	subcs	r3, r4, r0
    27a0:	ebb3 0f9c 	cmpcs.w	r3, ip, lsr #2
    27a4:	d30b      	bcc.n	27be <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    27a6:	428a      	cmp	r2, r1
    27a8:	d203      	bcs.n	27b2 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x2e>
    27aa:	1b11      	subs	r1, r2, r4
    27ac:	4408      	add	r0, r1
    27ae:	1c41      	adds	r1, r0, #1
    27b0:	e005      	b.n	27be <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    27b2:	429a      	cmp	r2, r3
    27b4:	d207      	bcs.n	27c6 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x42>
    27b6:	1a10      	subs	r0, r2, r0
    27b8:	4420      	add	r0, r4
    27ba:	1c40      	adds	r0, r0, #1
    27bc:	4241      	negs	r1, r0
    27be:	f101 000f 	add.w	r0, r1, #15
    27c2:	1a28      	subs	r0, r5, r0
    27c4:	bd70      	pop	{r4, r5, r6, pc}
    27c6:	f640 21f3 	movw	r1, #2803	; 0xaf3
    27ca:	2070      	movs	r0, #112	; 0x70
    27cc:	f001 f846 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    27d0:	1e847fff 	.word	0x1e847fff

000027d4 <MPSL_IRQ_RTC0_Handler>:
    27d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    27d8:	4c38      	ldr	r4, [pc, #224]	; (28bc <MPSL_IRQ_RTC0_Handler+0xe8>)
    27da:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    27de:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 28c0 <MPSL_IRQ_RTC0_Handler+0xec>
    27e2:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    27e6:	f44f 6600 	mov.w	r6, #2048	; 0x800
    27ea:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    27ee:	f04f 0500 	mov.w	r5, #0
    27f2:	bf1c      	itt	ne
    27f4:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    27f8:	2800      	cmpne	r0, #0
    27fa:	d017      	beq.n	282c <MPSL_IRQ_RTC0_Handler+0x58>
    27fc:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    2800:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2804:	482f      	ldr	r0, [pc, #188]	; (28c4 <MPSL_IRQ_RTC0_Handler+0xf0>)
    2806:	6800      	ldr	r0, [r0, #0]
    2808:	f8d8 1000 	ldr.w	r1, [r8]
    280c:	eba0 0001 	sub.w	r0, r0, r1
    2810:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2814:	2802      	cmp	r0, #2
    2816:	d302      	bcc.n	281e <MPSL_IRQ_RTC0_Handler+0x4a>
    2818:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    281c:	d306      	bcc.n	282c <MPSL_IRQ_RTC0_Handler+0x58>
    281e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    2822:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    2826:	2004      	movs	r0, #4
    2828:	f7fe fed8 	bl	15dc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    282c:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2830:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    2834:	bf1c      	itt	ne
    2836:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    283a:	2800      	cmpne	r0, #0
    283c:	d017      	beq.n	286e <MPSL_IRQ_RTC0_Handler+0x9a>
    283e:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    2842:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2846:	4820      	ldr	r0, [pc, #128]	; (28c8 <MPSL_IRQ_RTC0_Handler+0xf4>)
    2848:	6800      	ldr	r0, [r0, #0]
    284a:	f8d8 1000 	ldr.w	r1, [r8]
    284e:	eba0 0001 	sub.w	r0, r0, r1
    2852:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2856:	2802      	cmp	r0, #2
    2858:	d302      	bcc.n	2860 <MPSL_IRQ_RTC0_Handler+0x8c>
    285a:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    285e:	d306      	bcc.n	286e <MPSL_IRQ_RTC0_Handler+0x9a>
    2860:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    2864:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    2868:	2005      	movs	r0, #5
    286a:	f7fe feb7 	bl	15dc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    286e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2872:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    2876:	bf1a      	itte	ne
    2878:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    287c:	2800      	cmpne	r0, #0
    287e:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2882:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    2886:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    288a:	4810      	ldr	r0, [pc, #64]	; (28cc <MPSL_IRQ_RTC0_Handler+0xf8>)
    288c:	6800      	ldr	r0, [r0, #0]
    288e:	f8d8 1000 	ldr.w	r1, [r8]
    2892:	eba0 0001 	sub.w	r0, r0, r1
    2896:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    289a:	2802      	cmp	r0, #2
    289c:	d304      	bcc.n	28a8 <MPSL_IRQ_RTC0_Handler+0xd4>
    289e:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    28a2:	bf38      	it	cc
    28a4:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    28a8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    28ac:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    28b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    28b4:	2006      	movs	r0, #6
    28b6:	f7fe be91 	b.w	15dc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    28ba:	0000      	.short	0x0000
    28bc:	4000b000 	.word	0x4000b000
    28c0:	4000b504 	.word	0x4000b504
    28c4:	4000b540 	.word	0x4000b540
    28c8:	4000b544 	.word	0x4000b544
    28cc:	4000b548 	.word	0x4000b548

000028d0 <MPSL_IRQ_TIMER0_Handler>:
    28d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    28d4:	4d3a      	ldr	r5, [pc, #232]	; (29c0 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    28d6:	7828      	ldrb	r0, [r5, #0]
    28d8:	2804      	cmp	r0, #4
    28da:	d06c      	beq.n	29b6 <MPSL_IRQ_TIMER0_Handler+0xe6>
    28dc:	1ce8      	adds	r0, r5, #3
    28de:	2201      	movs	r2, #1
    28e0:	7801      	ldrb	r1, [r0, #0]
    28e2:	b159      	cbz	r1, 28fc <MPSL_IRQ_TIMER0_Handler+0x2c>
    28e4:	2901      	cmp	r1, #1
    28e6:	bf08      	it	eq
    28e8:	706a      	strbeq	r2, [r5, #1]
    28ea:	d002      	beq.n	28f2 <MPSL_IRQ_TIMER0_Handler+0x22>
    28ec:	7869      	ldrb	r1, [r5, #1]
    28ee:	2900      	cmp	r1, #0
    28f0:	d05c      	beq.n	29ac <MPSL_IRQ_TIMER0_Handler+0xdc>
    28f2:	2102      	movs	r1, #2
    28f4:	7001      	strb	r1, [r0, #0]
    28f6:	7840      	ldrb	r0, [r0, #1]
    28f8:	f000 fae2 	bl	2ec0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    28fc:	4c31      	ldr	r4, [pc, #196]	; (29c4 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    28fe:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2902:	f04f 0800 	mov.w	r8, #0
    2906:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    290a:	f44f 7680 	mov.w	r6, #256	; 0x100
    290e:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    2912:	bf1c      	itt	ne
    2914:	f8d4 014c 	ldrne.w	r0, [r4, #332]	; 0x14c
    2918:	2800      	cmpne	r0, #0
    291a:	d008      	beq.n	292e <MPSL_IRQ_TIMER0_Handler+0x5e>
    291c:	f04f 0003 	mov.w	r0, #3
    2920:	f000 face 	bl	2ec0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2924:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2928:	2003      	movs	r0, #3
    292a:	f7fe fe57 	bl	15dc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    292e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2932:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    2936:	bf1c      	itt	ne
    2938:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    293c:	2800      	cmpne	r0, #0
    293e:	d008      	beq.n	2952 <MPSL_IRQ_TIMER0_Handler+0x82>
    2940:	f04f 0002 	mov.w	r0, #2
    2944:	f000 fabc 	bl	2ec0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2948:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    294c:	2002      	movs	r0, #2
    294e:	f7fe fe45 	bl	15dc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2952:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2956:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    295a:	bf1c      	itt	ne
    295c:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    2960:	2800      	cmpne	r0, #0
    2962:	d008      	beq.n	2976 <MPSL_IRQ_TIMER0_Handler+0xa6>
    2964:	f04f 0001 	mov.w	r0, #1
    2968:	f000 faaa 	bl	2ec0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    296c:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2970:	2001      	movs	r0, #1
    2972:	f7fe fe33 	bl	15dc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2976:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    297a:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    297e:	bf1a      	itte	ne
    2980:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    2984:	2800      	cmpne	r0, #0
    2986:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    298a:	f04f 0000 	mov.w	r0, #0
    298e:	f000 fa97 	bl	2ec0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2992:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2996:	2004      	movs	r0, #4
    2998:	7028      	strb	r0, [r5, #0]
    299a:	f8c5 8008 	str.w	r8, [r5, #8]
    299e:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    29a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    29a6:	2000      	movs	r0, #0
    29a8:	f7fe be18 	b.w	15dc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    29ac:	f240 31c7 	movw	r1, #967	; 0x3c7
    29b0:	206c      	movs	r0, #108	; 0x6c
    29b2:	f000 ff53 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    29b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    29ba:	2007      	movs	r0, #7
    29bc:	f7fe be0e 	b.w	15dc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    29c0:	20000018 	.word	0x20000018
    29c4:	40008000 	.word	0x40008000
    29c8:	2201      	movs	r2, #1
    29ca:	0213      	lsls	r3, r2, #8
    29cc:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    29d0:	2000      	movs	r0, #0
    29d2:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    29d6:	f501 71c0 	add.w	r1, r1, #384	; 0x180
    29da:	f3bf 8f4f 	dsb	sy
    29de:	f3bf 8f6f 	isb	sy
    29e2:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
    29e6:	490c      	ldr	r1, [pc, #48]	; (2a18 <MPSL_IRQ_TIMER0_Handler+0x148>)
    29e8:	604a      	str	r2, [r1, #4]
    29ea:	1e43      	subs	r3, r0, #1
    29ec:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    29f0:	4b0a      	ldr	r3, [pc, #40]	; (2a1c <MPSL_IRQ_TIMER0_Handler+0x14c>)
    29f2:	6018      	str	r0, [r3, #0]
    29f4:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    29f8:	1d1b      	adds	r3, r3, #4
    29fa:	6018      	str	r0, [r3, #0]
    29fc:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2a00:	1d1b      	adds	r3, r3, #4
    2a02:	6018      	str	r0, [r3, #0]
    2a04:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    2a08:	1d1b      	adds	r3, r3, #4
    2a0a:	6018      	str	r0, [r3, #0]
    2a0c:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    2a10:	610a      	str	r2, [r1, #16]
    2a12:	4903      	ldr	r1, [pc, #12]	; (2a20 <MPSL_IRQ_TIMER0_Handler+0x150>)
    2a14:	7048      	strb	r0, [r1, #1]
    2a16:	4770      	bx	lr
    2a18:	40008000 	.word	0x40008000
    2a1c:	40008540 	.word	0x40008540
    2a20:	20000018 	.word	0x20000018

00002a24 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    2a24:	4801      	ldr	r0, [pc, #4]	; (2a2c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    2a26:	6800      	ldr	r0, [r0, #0]
    2a28:	4770      	bx	lr
    2a2a:	0000      	.short	0x0000
    2a2c:	4000b504 	.word	0x4000b504

00002a30 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    2a30:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    2a34:	4e41      	ldr	r6, [pc, #260]	; (2b3c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x10c>)
    2a36:	4604      	mov	r4, r0
    2a38:	1ef7      	subs	r7, r6, #3
    2a3a:	f896 c000 	ldrb.w	ip, [r6]
    2a3e:	68f8      	ldr	r0, [r7, #12]
    2a40:	f1bc 0f01 	cmp.w	ip, #1
    2a44:	bf04      	itt	eq
    2a46:	42a0      	cmpeq	r0, r4
    2a48:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2a4c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    2a50:	4a3b      	ldr	r2, [pc, #236]	; (2b40 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>)
    2a52:	6011      	str	r1, [r2, #0]
    2a54:	493b      	ldr	r1, [pc, #236]	; (2b44 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>)
    2a56:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    2a5a:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2a5e:	4a3a      	ldr	r2, [pc, #232]	; (2b48 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x118>)
    2a60:	f04f 0500 	mov.w	r5, #0
    2a64:	f1bc 0f00 	cmp.w	ip, #0
    2a68:	d057      	beq.n	2b1a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xea>
    2a6a:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    2a6e:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2a72:	6015      	str	r5, [r2, #0]
    2a74:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    2a78:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
    2a7c:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    2a80:	f04f 0801 	mov.w	r8, #1
    2a84:	2a00      	cmp	r2, #0
    2a86:	bf04      	itt	eq
    2a88:	f44f 6200 	moveq.w	r2, #2048	; 0x800
    2a8c:	f8c9 2280 	streq.w	r2, [r9, #640]	; 0x280
    2a90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2a94:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2a98:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2a9c:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    2aa0:	4a2a      	ldr	r2, [pc, #168]	; (2b4c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x11c>)
    2aa2:	f8d2 a000 	ldr.w	sl, [r2]
    2aa6:	eba4 0a0a 	sub.w	sl, r4, sl
    2aaa:	f02a 4b7f 	bic.w	fp, sl, #4278190080	; 0xff000000
    2aae:	f1bb 0f02 	cmp.w	fp, #2
    2ab2:	d33c      	bcc.n	2b2e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    2ab4:	f04f 0a02 	mov.w	sl, #2
    2ab8:	f5bb 0f80 	cmp.w	fp, #4194304	; 0x400000
    2abc:	d237      	bcs.n	2b2e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    2abe:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    2ac2:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    2ac6:	f1bc 0f00 	cmp.w	ip, #0
    2aca:	d005      	beq.n	2ad8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa8>
    2acc:	6811      	ldr	r1, [r2, #0]
    2ace:	1a41      	subs	r1, r0, r1
    2ad0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2ad4:	2902      	cmp	r1, #2
    2ad6:	d3f9      	bcc.n	2acc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9c>
    2ad8:	f8c7 8008 	str.w	r8, [r7, #8]
    2adc:	703d      	strb	r5, [r7, #0]
    2ade:	f7ff ff73 	bl	29c8 <MPSL_IRQ_TIMER0_Handler+0xf8>
    2ae2:	481b      	ldr	r0, [pc, #108]	; (2b50 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x120>)
    2ae4:	6005      	str	r5, [r0, #0]
    2ae6:	1d00      	adds	r0, r0, #4
    2ae8:	f8c0 a000 	str.w	sl, [r0]
    2aec:	4919      	ldr	r1, [pc, #100]	; (2b54 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    2aee:	2004      	movs	r0, #4
    2af0:	6008      	str	r0, [r1, #0]
    2af2:	4919      	ldr	r1, [pc, #100]	; (2b58 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    2af4:	f8c1 800c 	str.w	r8, [r1, #12]
    2af8:	68ba      	ldr	r2, [r7, #8]
    2afa:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
    2afe:	0181      	lsls	r1, r0, #6
    2b00:	f8c9 1280 	str.w	r1, [r9, #640]	; 0x280
    2b04:	f8c9 1100 	str.w	r1, [r9, #256]	; 0x100
    2b08:	4a14      	ldr	r2, [pc, #80]	; (2b5c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    2b0a:	0741      	lsls	r1, r0, #29
    2b0c:	6011      	str	r1, [r2, #0]
    2b0e:	60fc      	str	r4, [r7, #12]
    2b10:	7070      	strb	r0, [r6, #1]
    2b12:	f886 8000 	strb.w	r8, [r6]
    2b16:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2b1a:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2b1e:	4b10      	ldr	r3, [pc, #64]	; (2b60 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    2b20:	601d      	str	r5, [r3, #0]
    2b22:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    2b26:	6015      	str	r5, [r2, #0]
    2b28:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    2b2c:	e7a4      	b.n	2a78 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x48>
    2b2e:	f8c1 5540 	str.w	r5, [r1, #1344]	; 0x540
    2b32:	f240 11eb 	movw	r1, #491	; 0x1eb
    2b36:	206c      	movs	r0, #108	; 0x6c
    2b38:	f000 fe90 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b3c:	2000001b 	.word	0x2000001b
    2b40:	4001f508 	.word	0x4001f508
    2b44:	4000b000 	.word	0x4000b000
    2b48:	4000b544 	.word	0x4000b544
    2b4c:	4000b504 	.word	0x4000b504
    2b50:	40008504 	.word	0x40008504
    2b54:	40008510 	.word	0x40008510
    2b58:	40008000 	.word	0x40008000
    2b5c:	4001f504 	.word	0x4001f504
    2b60:	4000b540 	.word	0x4000b540

00002b64 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    2b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2b68:	4c2b      	ldr	r4, [pc, #172]	; (2c18 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    2b6a:	68e1      	ldr	r1, [r4, #12]
    2b6c:	4281      	cmp	r1, r0
    2b6e:	bf14      	ite	ne
    2b70:	2201      	movne	r2, #1
    2b72:	2200      	moveq	r2, #0
    2b74:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 2c1c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>
    2b78:	f89c 7000 	ldrb.w	r7, [ip]
    2b7c:	2f02      	cmp	r7, #2
    2b7e:	d002      	beq.n	2b86 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x22>
    2b80:	2a00      	cmp	r2, #0
    2b82:	d038      	beq.n	2bf6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    2b84:	e003      	b.n	2b8e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2a>
    2b86:	2a00      	cmp	r2, #0
    2b88:	bf08      	it	eq
    2b8a:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2b8e:	7862      	ldrb	r2, [r4, #1]
    2b90:	b382      	cbz	r2, 2bf4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x90>
    2b92:	4b23      	ldr	r3, [pc, #140]	; (2c20 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    2b94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2b98:	601a      	str	r2, [r3, #0]
    2b9a:	4b22      	ldr	r3, [pc, #136]	; (2c24 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    2b9c:	1395      	asrs	r5, r2, #14
    2b9e:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
    2ba2:	f8c3 5348 	str.w	r5, [r3, #840]	; 0x348
    2ba6:	2600      	movs	r6, #0
    2ba8:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    2bac:	4a1e      	ldr	r2, [pc, #120]	; (2c28 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc4>)
    2bae:	f8d2 8000 	ldr.w	r8, [r2]
    2bb2:	eba0 0808 	sub.w	r8, r0, r8
    2bb6:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    2bba:	f1b8 0f02 	cmp.w	r8, #2
    2bbe:	d324      	bcc.n	2c0a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    2bc0:	f5b8 0f80 	cmp.w	r8, #4194304	; 0x400000
    2bc4:	d221      	bcs.n	2c0a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    2bc6:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2bca:	f8c3 5344 	str.w	r5, [r3, #836]	; 0x344
    2bce:	b12f      	cbz	r7, 2bdc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x78>
    2bd0:	6813      	ldr	r3, [r2, #0]
    2bd2:	1acb      	subs	r3, r1, r3
    2bd4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2bd8:	2b02      	cmp	r3, #2
    2bda:	d3f9      	bcc.n	2bd0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x6c>
    2bdc:	4b13      	ldr	r3, [pc, #76]	; (2c2c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc8>)
    2bde:	2102      	movs	r1, #2
    2be0:	074a      	lsls	r2, r1, #29
    2be2:	601a      	str	r2, [r3, #0]
    2be4:	60e0      	str	r0, [r4, #12]
    2be6:	2004      	movs	r0, #4
    2be8:	f88c 0001 	strb.w	r0, [ip, #1]
    2bec:	f88c 1000 	strb.w	r1, [ip]
    2bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2bf4:	e004      	b.n	2c00 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    2bf6:	f240 11f9 	movw	r1, #505	; 0x1f9
    2bfa:	206c      	movs	r0, #108	; 0x6c
    2bfc:	f000 fe2e 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c00:	f240 11fd 	movw	r1, #509	; 0x1fd
    2c04:	206c      	movs	r0, #108	; 0x6c
    2c06:	f000 fe29 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c0a:	f8c3 6540 	str.w	r6, [r3, #1344]	; 0x540
    2c0e:	f240 2109 	movw	r1, #521	; 0x209
    2c12:	206c      	movs	r0, #108	; 0x6c
    2c14:	f000 fe22 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c18:	20000018 	.word	0x20000018
    2c1c:	2000001b 	.word	0x2000001b
    2c20:	4001f508 	.word	0x4001f508
    2c24:	4000b000 	.word	0x4000b000
    2c28:	4000b504 	.word	0x4000b504
    2c2c:	4001f504 	.word	0x4001f504

00002c30 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    2c30:	4801      	ldr	r0, [pc, #4]	; (2c38 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    2c32:	68c0      	ldr	r0, [r0, #12]
    2c34:	4770      	bx	lr
    2c36:	0000      	.short	0x0000
    2c38:	20000018 	.word	0x20000018

00002c3c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    2c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2c40:	4833      	ldr	r0, [pc, #204]	; (2d10 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd4>)
    2c42:	f46f 2480 	mvn.w	r4, #262144	; 0x40000
    2c46:	f8c0 4308 	str.w	r4, [r0, #776]	; 0x308
    2c4a:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 2d14 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd8>
    2c4e:	4a32      	ldr	r2, [pc, #200]	; (2d18 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    2c50:	2100      	movs	r1, #0
    2c52:	f89c 3000 	ldrb.w	r3, [ip]
    2c56:	b163      	cbz	r3, 2c72 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x36>
    2c58:	f46f 24a0 	mvn.w	r4, #327680	; 0x50000
    2c5c:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    2c60:	6011      	str	r1, [r2, #0]
    2c62:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2c66:	bf00      	nop
    2c68:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
    2c6c:	2201      	movs	r2, #1
    2c6e:	b980      	cbnz	r0, 2c92 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x56>
    2c70:	e009      	b.n	2c86 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x4a>
    2c72:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    2c76:	4c29      	ldr	r4, [pc, #164]	; (2d1c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    2c78:	6021      	str	r1, [r4, #0]
    2c7a:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    2c7e:	6011      	str	r1, [r2, #0]
    2c80:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2c84:	e7f0      	b.n	2c68 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x2c>
    2c86:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    2c8a:	f44f 6000 	mov.w	r0, #2048	; 0x800
    2c8e:	f8c4 0280 	str.w	r0, [r4, #640]	; 0x280
    2c92:	2b02      	cmp	r3, #2
    2c94:	d004      	beq.n	2ca0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x64>
    2c96:	f240 2115 	movw	r1, #533	; 0x215
    2c9a:	206c      	movs	r0, #108	; 0x6c
    2c9c:	f000 fdde 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2ca0:	4e1f      	ldr	r6, [pc, #124]	; (2d20 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    2ca2:	6830      	ldr	r0, [r6, #0]
    2ca4:	4c1f      	ldr	r4, [pc, #124]	; (2d24 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    2ca6:	1cc0      	adds	r0, r0, #3
    2ca8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2cac:	68e3      	ldr	r3, [r4, #12]
    2cae:	4d1e      	ldr	r5, [pc, #120]	; (2d28 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    2cb0:	4298      	cmp	r0, r3
    2cb2:	d00b      	beq.n	2ccc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2cb4:	6837      	ldr	r7, [r6, #0]
    2cb6:	1bdf      	subs	r7, r3, r7
    2cb8:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    2cbc:	2f04      	cmp	r7, #4
    2cbe:	d305      	bcc.n	2ccc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2cc0:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
    2cc4:	d202      	bcs.n	2ccc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2cc6:	f7ff feb3 	bl	2a30 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2cca:	e01b      	b.n	2d04 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    2ccc:	6830      	ldr	r0, [r6, #0]
    2cce:	1a18      	subs	r0, r3, r0
    2cd0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2cd4:	2802      	cmp	r0, #2
    2cd6:	d313      	bcc.n	2d00 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    2cd8:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2cdc:	d210      	bcs.n	2d00 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    2cde:	4b13      	ldr	r3, [pc, #76]	; (2d2c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    2ce0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    2ce4:	6018      	str	r0, [r3, #0]
    2ce6:	60a2      	str	r2, [r4, #8]
    2ce8:	7021      	strb	r1, [r4, #0]
    2cea:	606a      	str	r2, [r5, #4]
    2cec:	60ea      	str	r2, [r5, #12]
    2cee:	0040      	lsls	r0, r0, #1
    2cf0:	1f19      	subs	r1, r3, #4
    2cf2:	6008      	str	r0, [r1, #0]
    2cf4:	2004      	movs	r0, #4
    2cf6:	f88c 0001 	strb.w	r0, [ip, #1]
    2cfa:	f88c 2000 	strb.w	r2, [ip]
    2cfe:	e001      	b.n	2d04 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    2d00:	60a2      	str	r2, [r4, #8]
    2d02:	7021      	strb	r1, [r4, #0]
    2d04:	68a0      	ldr	r0, [r4, #8]
    2d06:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    2d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2d0e:	0000      	.short	0x0000
    2d10:	4000b000 	.word	0x4000b000
    2d14:	2000001b 	.word	0x2000001b
    2d18:	4000b544 	.word	0x4000b544
    2d1c:	4000b540 	.word	0x4000b540
    2d20:	4000b504 	.word	0x4000b504
    2d24:	20000018 	.word	0x20000018
    2d28:	40008000 	.word	0x40008000
    2d2c:	4001f508 	.word	0x4001f508

00002d30 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    2d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2d34:	f8df c174 	ldr.w	ip, [pc, #372]	; 2eac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x17c>
    2d38:	2701      	movs	r7, #1
    2d3a:	f04f 0800 	mov.w	r8, #0
    2d3e:	f89c 5000 	ldrb.w	r5, [ip]
    2d42:	f89c c001 	ldrb.w	ip, [ip, #1]
    2d46:	2807      	cmp	r0, #7
    2d48:	d27e      	bcs.n	2e48 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x118>
    2d4a:	e8df f000 	tbb	[pc, r0]
    2d4e:	0404      	.short	0x0404
    2d50:	6a6a0404 	.word	0x6a6a0404
    2d54:	006a      	.short	0x006a
    2d56:	4c56      	ldr	r4, [pc, #344]	; (2eb0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x180>)
    2d58:	68e6      	ldr	r6, [r4, #12]
    2d5a:	f1b6 7f80 	cmp.w	r6, #16777216	; 0x1000000
    2d5e:	bf04      	itt	eq
    2d60:	7864      	ldrbeq	r4, [r4, #1]
    2d62:	2c00      	cmpeq	r4, #0
    2d64:	d002      	beq.n	2d6c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    2d66:	2d02      	cmp	r5, #2
    2d68:	d005      	beq.n	2d76 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    2d6a:	e03c      	b.n	2de6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb6>
    2d6c:	f44f 7112 	mov.w	r1, #584	; 0x248
    2d70:	206c      	movs	r0, #108	; 0x6c
    2d72:	f000 fd73 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d76:	ea4f 048c 	mov.w	r4, ip, lsl #2
    2d7a:	f104 4680 	add.w	r6, r4, #1073741824	; 0x40000000
    2d7e:	f1ac 0404 	sub.w	r4, ip, #4
    2d82:	0624      	lsls	r4, r4, #24
    2d84:	0da4      	lsrs	r4, r4, #22
    2d86:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
    2d8a:	f506 4600 	add.w	r6, r6, #32768	; 0x8000
    2d8e:	f509 4930 	add.w	r9, r9, #45056	; 0xb000
    2d92:	2400      	movs	r4, #0
    2d94:	2d01      	cmp	r5, #1
    2d96:	d002      	beq.n	2d9e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6e>
    2d98:	2d02      	cmp	r5, #2
    2d9a:	d011      	beq.n	2dc0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x90>
    2d9c:	e020      	b.n	2de0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2d9e:	f1bc 0f04 	cmp.w	ip, #4
    2da2:	d205      	bcs.n	2db0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x80>
    2da4:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    2da8:	f1ba 0f00 	cmp.w	sl, #0
    2dac:	d118      	bne.n	2de0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2dae:	e004      	b.n	2dba <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    2db0:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    2db4:	f1ba 0f00 	cmp.w	sl, #0
    2db8:	d112      	bne.n	2de0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2dba:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    2dbe:	e00f      	b.n	2de0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2dc0:	f1bc 0f04 	cmp.w	ip, #4
    2dc4:	d205      	bcs.n	2dd2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa2>
    2dc6:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    2dca:	f1ba 0f00 	cmp.w	sl, #0
    2dce:	d107      	bne.n	2de0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2dd0:	e004      	b.n	2ddc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xac>
    2dd2:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    2dd6:	f1ba 0f00 	cmp.w	sl, #0
    2dda:	d101      	bne.n	2de0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2ddc:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    2de0:	f014 4f80 	tst.w	r4, #1073741824	; 0x40000000
    2de4:	d1d5      	bne.n	2d92 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x62>
    2de6:	4c33      	ldr	r4, [pc, #204]	; (2eb4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x184>)
    2de8:	f100 0c10 	add.w	ip, r0, #16
    2dec:	fa07 fc0c 	lsl.w	ip, r7, ip
    2df0:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    2df4:	0080      	lsls	r0, r0, #2
    2df6:	4420      	add	r0, r4
    2df8:	b152      	cbz	r2, 2e10 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    2dfa:	6407      	str	r7, [r0, #64]	; 0x40
    2dfc:	f8d0 6540 	ldr.w	r6, [r0, #1344]	; 0x540
    2e00:	1b8d      	subs	r5, r1, r6
    2e02:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    2e06:	42aa      	cmp	r2, r5
    2e08:	bf98      	it	ls
    2e0a:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    2e0e:	d243      	bcs.n	2e98 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    2e10:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2e14:	2b01      	cmp	r3, #1
    2e16:	bf08      	it	eq
    2e18:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    2e1c:	2001      	movs	r0, #1
    2e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2e22:	b135      	cbz	r5, 2e32 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    2e24:	4584      	cmp	ip, r0
    2e26:	d104      	bne.n	2e32 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    2e28:	f240 216b 	movw	r1, #619	; 0x26b
    2e2c:	206c      	movs	r0, #108	; 0x6c
    2e2e:	f000 fd15 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e32:	1f00      	subs	r0, r0, #4
    2e34:	b2c0      	uxtb	r0, r0
    2e36:	2b01      	cmp	r3, #1
    2e38:	bf0c      	ite	eq
    2e3a:	2401      	moveq	r4, #1
    2e3c:	2400      	movne	r4, #0
    2e3e:	2803      	cmp	r0, #3
    2e40:	d306      	bcc.n	2e50 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x120>
    2e42:	f240 1145 	movw	r1, #325	; 0x145
    2e46:	e000      	b.n	2e4a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x11a>
    2e48:	e02b      	b.n	2ea2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x172>
    2e4a:	206c      	movs	r0, #108	; 0x6c
    2e4c:	f000 fd06 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e50:	f8df c064 	ldr.w	ip, [pc, #100]	; 2eb8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    2e54:	f100 0310 	add.w	r3, r0, #16
    2e58:	fa07 f303 	lsl.w	r3, r7, r3
    2e5c:	f8cc 3308 	str.w	r3, [ip, #776]	; 0x308
    2e60:	f8cc 3348 	str.w	r3, [ip, #840]	; 0x348
    2e64:	0080      	lsls	r0, r0, #2
    2e66:	4460      	add	r0, ip
    2e68:	f8c0 8140 	str.w	r8, [r0, #320]	; 0x140
    2e6c:	b14a      	cbz	r2, 2e82 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x152>
    2e6e:	4d13      	ldr	r5, [pc, #76]	; (2ebc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x18c>)
    2e70:	682e      	ldr	r6, [r5, #0]
    2e72:	1b8d      	subs	r5, r1, r6
    2e74:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    2e78:	42aa      	cmp	r2, r5
    2e7a:	bf98      	it	ls
    2e7c:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    2e80:	d20a      	bcs.n	2e98 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    2e82:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2e86:	2c00      	cmp	r4, #0
    2e88:	bf18      	it	ne
    2e8a:	f8cc 3304 	strne.w	r3, [ip, #772]	; 0x304
    2e8e:	f8cc 3344 	str.w	r3, [ip, #836]	; 0x344
    2e92:	2001      	movs	r0, #1
    2e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2e98:	f8c0 8540 	str.w	r8, [r0, #1344]	; 0x540
    2e9c:	2000      	movs	r0, #0
    2e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2ea2:	f44f 711c 	mov.w	r1, #624	; 0x270
    2ea6:	206c      	movs	r0, #108	; 0x6c
    2ea8:	f000 fcd8 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2eac:	2000001b 	.word	0x2000001b
    2eb0:	20000018 	.word	0x20000018
    2eb4:	40008000 	.word	0x40008000
    2eb8:	4000b000 	.word	0x4000b000
    2ebc:	4000b504 	.word	0x4000b504

00002ec0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    2ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ec2:	2701      	movs	r7, #1
    2ec4:	2400      	movs	r4, #0
    2ec6:	2807      	cmp	r0, #7
    2ec8:	d24c      	bcs.n	2f64 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>
    2eca:	e8df f000 	tbb	[pc, r0]
    2ece:	0404      	.short	0x0404
    2ed0:	16160404 	.word	0x16160404
    2ed4:	0016      	.short	0x0016
    2ed6:	4a26      	ldr	r2, [pc, #152]	; (2f70 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
    2ed8:	f100 0110 	add.w	r1, r0, #16
    2edc:	fa07 f101 	lsl.w	r1, r7, r1
    2ee0:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    2ee4:	0081      	lsls	r1, r0, #2
    2ee6:	4411      	add	r1, r2
    2ee8:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    2eec:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    2ef0:	4920      	ldr	r1, [pc, #128]	; (2f74 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
    2ef2:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    2ef6:	9000      	str	r0, [sp, #0]
    2ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2efa:	4d1f      	ldr	r5, [pc, #124]	; (2f78 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb8>)
    2efc:	1f01      	subs	r1, r0, #4
    2efe:	b2ce      	uxtb	r6, r1
    2f00:	7829      	ldrb	r1, [r5, #0]
    2f02:	b179      	cbz	r1, 2f24 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    2f04:	786a      	ldrb	r2, [r5, #1]
    2f06:	4282      	cmp	r2, r0
    2f08:	d10c      	bne.n	2f24 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    2f0a:	4a1c      	ldr	r2, [pc, #112]	; (2f7c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xbc>)
    2f0c:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    2f10:	6010      	str	r0, [r2, #0]
    2f12:	2901      	cmp	r1, #1
    2f14:	bf08      	it	eq
    2f16:	f7ff fd57 	bleq	29c8 <MPSL_IRQ_TIMER0_Handler+0xf8>
    2f1a:	702c      	strb	r4, [r5, #0]
    2f1c:	4918      	ldr	r1, [pc, #96]	; (2f80 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    2f1e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    2f22:	60c8      	str	r0, [r1, #12]
    2f24:	f106 0010 	add.w	r0, r6, #16
    2f28:	fa07 f100 	lsl.w	r1, r7, r0
    2f2c:	4815      	ldr	r0, [pc, #84]	; (2f84 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    2f2e:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    2f32:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    2f36:	00b0      	lsls	r0, r6, #2
    2f38:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    2f3c:	f500 4030 	add.w	r0, r0, #45056	; 0xb000
    2f40:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    2f44:	4a10      	ldr	r2, [pc, #64]	; (2f88 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    2f46:	6812      	ldr	r2, [r2, #0]
    2f48:	1a89      	subs	r1, r1, r2
    2f4a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2f4e:	2902      	cmp	r1, #2
    2f50:	bf24      	itt	cs
    2f52:	f8c0 4540 	strcs.w	r4, [r0, #1344]	; 0x540
    2f56:	f8c0 4140 	strcs.w	r4, [r0, #320]	; 0x140
    2f5a:	480c      	ldr	r0, [pc, #48]	; (2f8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    2f5c:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    2f60:	9000      	str	r0, [sp, #0]
    2f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2f64:	f240 21e9 	movw	r1, #745	; 0x2e9
    2f68:	206c      	movs	r0, #108	; 0x6c
    2f6a:	f000 fc77 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2f6e:	0000      	.short	0x0000
    2f70:	40008000 	.word	0x40008000
    2f74:	40008140 	.word	0x40008140
    2f78:	2000001b 	.word	0x2000001b
    2f7c:	4001f508 	.word	0x4001f508
    2f80:	20000018 	.word	0x20000018
    2f84:	4000b000 	.word	0x4000b000
    2f88:	4000b504 	.word	0x4000b504
    2f8c:	4000b140 	.word	0x4000b140

00002f90 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    2f90:	491e      	ldr	r1, [pc, #120]	; (300c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x7c>)
    2f92:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    2f96:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2f9a:	481d      	ldr	r0, [pc, #116]	; (3010 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x80>)
    2f9c:	4a1d      	ldr	r2, [pc, #116]	; (3014 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    2f9e:	f890 c000 	ldrb.w	ip, [r0]
    2fa2:	2000      	movs	r0, #0
    2fa4:	f1bc 0f00 	cmp.w	ip, #0
    2fa8:	d00a      	beq.n	2fc0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x30>
    2faa:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    2fae:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2fb2:	6010      	str	r0, [r2, #0]
    2fb4:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2fb8:	f8d1 1148 	ldr.w	r1, [r1, #328]	; 0x148
    2fbc:	b981      	cbnz	r1, 2fe0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    2fbe:	e009      	b.n	2fd4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x44>
    2fc0:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2fc4:	4b14      	ldr	r3, [pc, #80]	; (3018 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    2fc6:	6018      	str	r0, [r3, #0]
    2fc8:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2fcc:	6010      	str	r0, [r2, #0]
    2fce:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2fd2:	e7f1      	b.n	2fb8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    2fd4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2fd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2fdc:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    2fe0:	490e      	ldr	r1, [pc, #56]	; (301c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    2fe2:	f04f 32ff 	mov.w	r2, #4294967295
    2fe6:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    2fea:	4a0d      	ldr	r2, [pc, #52]	; (3020 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    2fec:	6010      	str	r0, [r2, #0]
    2fee:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2ff2:	1d12      	adds	r2, r2, #4
    2ff4:	6010      	str	r0, [r2, #0]
    2ff6:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2ffa:	1d12      	adds	r2, r2, #4
    2ffc:	6010      	str	r0, [r2, #0]
    2ffe:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    3002:	1d12      	adds	r2, r2, #4
    3004:	6010      	str	r0, [r2, #0]
    3006:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    300a:	4770      	bx	lr
    300c:	4000b000 	.word	0x4000b000
    3010:	2000001b 	.word	0x2000001b
    3014:	4000b544 	.word	0x4000b544
    3018:	4000b540 	.word	0x4000b540
    301c:	40008000 	.word	0x40008000
    3020:	40008540 	.word	0x40008540

00003024 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    3024:	4808      	ldr	r0, [pc, #32]	; (3048 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    3026:	f990 0002 	ldrsb.w	r0, [r0, #2]
    302a:	2800      	cmp	r0, #0
    302c:	bfb8      	it	lt
    302e:	4770      	bxlt	lr
    3030:	f000 011f 	and.w	r1, r0, #31
    3034:	2201      	movs	r2, #1
    3036:	fa02 f101 	lsl.w	r1, r2, r1
    303a:	0940      	lsrs	r0, r0, #5
    303c:	0080      	lsls	r0, r0, #2
    303e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3042:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3046:	4770      	bx	lr
    3048:	20000018 	.word	0x20000018

0000304c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    304c:	b510      	push	{r4, lr}
    304e:	2807      	cmp	r0, #7
    3050:	d20d      	bcs.n	306e <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    3052:	e8df f000 	tbb	[pc, r0]
    3056:	0404      	.short	0x0404
    3058:	06060404 	.word	0x06060404
    305c:	0006      	.short	0x0006
    305e:	4906      	ldr	r1, [pc, #24]	; (3078 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    3060:	e002      	b.n	3068 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    3062:	1f00      	subs	r0, r0, #4
    3064:	4905      	ldr	r1, [pc, #20]	; (307c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    3066:	b2c0      	uxtb	r0, r0
    3068:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    306c:	bd10      	pop	{r4, pc}
    306e:	f44f 7125 	mov.w	r1, #660	; 0x294
    3072:	206c      	movs	r0, #108	; 0x6c
    3074:	f000 fbf2 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3078:	40008140 	.word	0x40008140
    307c:	4000b140 	.word	0x4000b140

00003080 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    3080:	b510      	push	{r4, lr}
    3082:	2807      	cmp	r0, #7
    3084:	d20d      	bcs.n	30a2 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    3086:	e8df f000 	tbb	[pc, r0]
    308a:	0404      	.short	0x0404
    308c:	06060404 	.word	0x06060404
    3090:	0006      	.short	0x0006
    3092:	4906      	ldr	r1, [pc, #24]	; (30ac <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    3094:	e002      	b.n	309c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    3096:	1f00      	subs	r0, r0, #4
    3098:	4905      	ldr	r1, [pc, #20]	; (30b0 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    309a:	b2c0      	uxtb	r0, r0
    309c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    30a0:	bd10      	pop	{r4, pc}
    30a2:	f44f 7125 	mov.w	r1, #660	; 0x294
    30a6:	206c      	movs	r0, #108	; 0x6c
    30a8:	f000 fbd8 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    30ac:	40008140 	.word	0x40008140
    30b0:	4000b140 	.word	0x4000b140

000030b4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    30b4:	b570      	push	{r4, r5, r6, lr}
    30b6:	4819      	ldr	r0, [pc, #100]	; (311c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x68>)
    30b8:	2400      	movs	r4, #0
    30ba:	2104      	movs	r1, #4
    30bc:	7004      	strb	r4, [r0, #0]
    30be:	1ec0      	subs	r0, r0, #3
    30c0:	7001      	strb	r1, [r0, #0]
    30c2:	0589      	lsls	r1, r1, #22
    30c4:	60c1      	str	r1, [r0, #12]
    30c6:	f7ff fc7f 	bl	29c8 <MPSL_IRQ_TIMER0_Handler+0xf8>
    30ca:	2501      	movs	r5, #1
    30cc:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    30d0:	02eb      	lsls	r3, r5, #11
    30d2:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    30d6:	f3bf 8f4f 	dsb	sy
    30da:	f3bf 8f6f 	isb	sy
    30de:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    30e2:	4a0f      	ldr	r2, [pc, #60]	; (3120 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x6c>)
    30e4:	6055      	str	r5, [r2, #4]
    30e6:	6095      	str	r5, [r2, #8]
    30e8:	480e      	ldr	r0, [pc, #56]	; (3124 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    30ea:	6801      	ldr	r1, [r0, #0]
    30ec:	2900      	cmp	r1, #0
    30ee:	d1fc      	bne.n	30ea <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x36>
    30f0:	1e48      	subs	r0, r1, #1
    30f2:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    30f6:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    30fa:	480b      	ldr	r0, [pc, #44]	; (3128 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    30fc:	6004      	str	r4, [r0, #0]
    30fe:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    3102:	1d00      	adds	r0, r0, #4
    3104:	6004      	str	r4, [r0, #0]
    3106:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    310a:	1d00      	adds	r0, r0, #4
    310c:	6004      	str	r4, [r0, #0]
    310e:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    3112:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    3116:	6015      	str	r5, [r2, #0]
    3118:	bd70      	pop	{r4, r5, r6, pc}
    311a:	0000      	.short	0x0000
    311c:	2000001b 	.word	0x2000001b
    3120:	4000b000 	.word	0x4000b000
    3124:	4000b504 	.word	0x4000b504
    3128:	4000b540 	.word	0x4000b540

0000312c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>:
    312c:	0b43      	lsrs	r3, r0, #13
    312e:	f248 6c37 	movw	ip, #34359	; 0x8637
    3132:	fb03 f30c 	mul.w	r3, r3, ip
    3136:	0c1b      	lsrs	r3, r3, #16
    3138:	ea4f 2c43 	mov.w	ip, r3, lsl #9
    313c:	f8c1 c000 	str.w	ip, [r1]
    3140:	f8df c038 	ldr.w	ip, [pc, #56]	; 317c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI+0x50>
    3144:	fb03 030c 	mla	r3, r3, ip, r0
    3148:	480d      	ldr	r0, [pc, #52]	; (3180 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI+0x54>)
    314a:	f24c 2cf7 	movw	ip, #49911	; 0xc2f7
    314e:	4358      	muls	r0, r3
    3150:	0d40      	lsrs	r0, r0, #21
    3152:	fb10 fc0c 	smulbb	ip, r0, ip
    3156:	eb0c 2343 	add.w	r3, ip, r3, lsl #9
    315a:	f503 7380 	add.w	r3, r3, #256	; 0x100
    315e:	125b      	asrs	r3, r3, #9
    3160:	7013      	strb	r3, [r2, #0]
    3162:	680b      	ldr	r3, [r1, #0]
    3164:	4418      	add	r0, r3
    3166:	6008      	str	r0, [r1, #0]
    3168:	7810      	ldrb	r0, [r2, #0]
    316a:	281f      	cmp	r0, #31
    316c:	bf18      	it	ne
    316e:	4770      	bxne	lr
    3170:	2000      	movs	r0, #0
    3172:	7010      	strb	r0, [r2, #0]
    3174:	6808      	ldr	r0, [r1, #0]
    3176:	1c40      	adds	r0, r0, #1
    3178:	6008      	str	r0, [r1, #0]
    317a:	4770      	bx	lr
    317c:	ffffc2f7 	.word	0xffffc2f7
    3180:	00010c6f 	.word	0x00010c6f

00003184 <MPSL_IRQ_CLOCK_Handler>:
    3184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3188:	4c16      	ldr	r4, [pc, #88]	; (31e4 <MPSL_IRQ_CLOCK_Handler+0x60>)
    318a:	7a60      	ldrb	r0, [r4, #9]
    318c:	2800      	cmp	r0, #0
    318e:	d027      	beq.n	31e0 <MPSL_IRQ_CLOCK_Handler+0x5c>
    3190:	f44f 7180 	mov.w	r1, #256	; 0x100
    3194:	058d      	lsls	r5, r1, #22
    3196:	4628      	mov	r0, r5
    3198:	f008 fec6 	bl	bf28 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    319c:	4680      	mov	r8, r0
    319e:	f44f 7182 	mov.w	r1, #260	; 0x104
    31a2:	4628      	mov	r0, r5
    31a4:	f008 fec0 	bl	bf28 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    31a8:	2600      	movs	r6, #0
    31aa:	4607      	mov	r7, r0
    31ac:	f1b8 0f00 	cmp.w	r8, #0
    31b0:	d009      	beq.n	31c6 <MPSL_IRQ_CLOCK_Handler+0x42>
    31b2:	2001      	movs	r0, #1
    31b4:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    31b8:	7920      	ldrb	r0, [r4, #4]
    31ba:	b120      	cbz	r0, 31c6 <MPSL_IRQ_CLOCK_Handler+0x42>
    31bc:	7126      	strb	r6, [r4, #4]
    31be:	69e0      	ldr	r0, [r4, #28]
    31c0:	b108      	cbz	r0, 31c6 <MPSL_IRQ_CLOCK_Handler+0x42>
    31c2:	4780      	blx	r0
    31c4:	61e6      	str	r6, [r4, #28]
    31c6:	b137      	cbz	r7, 31d6 <MPSL_IRQ_CLOCK_Handler+0x52>
    31c8:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    31cc:	2002      	movs	r0, #2
    31ce:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    31d2:	f000 fa8b 	bl	36ec <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    31d6:	4640      	mov	r0, r8
    31d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    31dc:	f000 b85a 	b.w	3294 <MPSL_IRQ_CLOCK_Handler+0x110>
    31e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    31e4:	20000028 	.word	0x20000028
    31e8:	b510      	push	{r4, lr}
    31ea:	f008 ff47 	bl	c07c <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    31ee:	b930      	cbnz	r0, 31fe <MPSL_IRQ_CLOCK_Handler+0x7a>
    31f0:	f008 ff65 	bl	c0be <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    31f4:	b918      	cbnz	r0, 31fe <MPSL_IRQ_CLOCK_Handler+0x7a>
    31f6:	f008 ff98 	bl	c12a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    31fa:	2800      	cmp	r0, #0
    31fc:	d002      	beq.n	3204 <MPSL_IRQ_CLOCK_Handler+0x80>
    31fe:	4902      	ldr	r1, [pc, #8]	; (3208 <MPSL_IRQ_CLOCK_Handler+0x84>)
    3200:	2002      	movs	r0, #2
    3202:	6008      	str	r0, [r1, #0]
    3204:	bd10      	pop	{r4, pc}
    3206:	0000      	.short	0x0000
    3208:	40000c34 	.word	0x40000c34
    320c:	b570      	push	{r4, r5, r6, lr}
    320e:	f000 f987 	bl	3520 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3212:	f000 fabf 	bl	3794 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3216:	4c09      	ldr	r4, [pc, #36]	; (323c <MPSL_IRQ_CLOCK_Handler+0xb8>)
    3218:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    321c:	b130      	cbz	r0, 322c <MPSL_IRQ_CLOCK_Handler+0xa8>
    321e:	f7ff ffe3 	bl	31e8 <MPSL_IRQ_CLOCK_Handler+0x64>
    3222:	2001      	movs	r0, #1
    3224:	6128      	str	r0, [r5, #16]
    3226:	2004      	movs	r0, #4
    3228:	72a0      	strb	r0, [r4, #10]
    322a:	e004      	b.n	3236 <MPSL_IRQ_CLOCK_Handler+0xb2>
    322c:	2003      	movs	r0, #3
    322e:	72a0      	strb	r0, [r4, #10]
    3230:	2001      	movs	r0, #1
    3232:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3236:	2000      	movs	r0, #0
    3238:	71e0      	strb	r0, [r4, #7]
    323a:	bd70      	pop	{r4, r5, r6, pc}
    323c:	20000028 	.word	0x20000028
    3240:	b570      	push	{r4, r5, r6, lr}
    3242:	4c13      	ldr	r4, [pc, #76]	; (3290 <MPSL_IRQ_CLOCK_Handler+0x10c>)
    3244:	79a0      	ldrb	r0, [r4, #6]
    3246:	b1f0      	cbz	r0, 3286 <MPSL_IRQ_CLOCK_Handler+0x102>
    3248:	2801      	cmp	r0, #1
    324a:	d003      	beq.n	3254 <MPSL_IRQ_CLOCK_Handler+0xd0>
    324c:	79e1      	ldrb	r1, [r4, #7]
    324e:	1e40      	subs	r0, r0, #1
    3250:	4281      	cmp	r1, r0
    3252:	da18      	bge.n	3286 <MPSL_IRQ_CLOCK_Handler+0x102>
    3254:	f000 fa9e 	bl	3794 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3258:	4605      	mov	r5, r0
    325a:	f000 fb6f 	bl	393c <mpsl_temperature_get>
    325e:	79a1      	ldrb	r1, [r4, #6]
    3260:	2901      	cmp	r1, #1
    3262:	d902      	bls.n	326a <MPSL_IRQ_CLOCK_Handler+0xe6>
    3264:	79e1      	ldrb	r1, [r4, #7]
    3266:	1c49      	adds	r1, r1, #1
    3268:	71e1      	strb	r1, [r4, #7]
    326a:	b10d      	cbz	r5, 3270 <MPSL_IRQ_CLOCK_Handler+0xec>
    326c:	6961      	ldr	r1, [r4, #20]
    326e:	e000      	b.n	3272 <MPSL_IRQ_CLOCK_Handler+0xee>
    3270:	6921      	ldr	r1, [r4, #16]
    3272:	1a41      	subs	r1, r0, r1
    3274:	2902      	cmp	r1, #2
    3276:	da02      	bge.n	327e <MPSL_IRQ_CLOCK_Handler+0xfa>
    3278:	f111 0f02 	cmn.w	r1, #2
    327c:	dc07      	bgt.n	328e <MPSL_IRQ_CLOCK_Handler+0x10a>
    327e:	b10d      	cbz	r5, 3284 <MPSL_IRQ_CLOCK_Handler+0x100>
    3280:	6160      	str	r0, [r4, #20]
    3282:	e000      	b.n	3286 <MPSL_IRQ_CLOCK_Handler+0x102>
    3284:	6120      	str	r0, [r4, #16]
    3286:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    328a:	f7ff bfbf 	b.w	320c <MPSL_IRQ_CLOCK_Handler+0x88>
    328e:	bd70      	pop	{r4, r5, r6, pc}
    3290:	20000028 	.word	0x20000028
    3294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3298:	4606      	mov	r6, r0
    329a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    329e:	f44f 7186 	mov.w	r1, #268	; 0x10c
    32a2:	4628      	mov	r0, r5
    32a4:	f008 fe40 	bl	bf28 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    32a8:	4680      	mov	r8, r0
    32aa:	f44f 7188 	mov.w	r1, #272	; 0x110
    32ae:	4628      	mov	r0, r5
    32b0:	f008 fe3a 	bl	bf28 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    32b4:	4c27      	ldr	r4, [pc, #156]	; (3354 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    32b6:	4682      	mov	sl, r0
    32b8:	7827      	ldrb	r7, [r4, #0]
    32ba:	f104 0008 	add.w	r0, r4, #8
    32be:	f008 fea7 	bl	c010 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    32c2:	b110      	cbz	r0, 32ca <MPSL_IRQ_CLOCK_Handler+0x146>
    32c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    32c8:	e016      	b.n	32f8 <MPSL_IRQ_CLOCK_Handler+0x174>
    32ca:	f04f 0901 	mov.w	r9, #1
    32ce:	b146      	cbz	r6, 32e2 <MPSL_IRQ_CLOCK_Handler+0x15e>
    32d0:	7aa0      	ldrb	r0, [r4, #10]
    32d2:	2803      	cmp	r0, #3
    32d4:	d105      	bne.n	32e2 <MPSL_IRQ_CLOCK_Handler+0x15e>
    32d6:	2004      	movs	r0, #4
    32d8:	72a0      	strb	r0, [r4, #10]
    32da:	f7ff ff85 	bl	31e8 <MPSL_IRQ_CLOCK_Handler+0x64>
    32de:	f8c5 9010 	str.w	r9, [r5, #16]
    32e2:	2600      	movs	r6, #0
    32e4:	f1b8 0f00 	cmp.w	r8, #0
    32e8:	d018      	beq.n	331c <MPSL_IRQ_CLOCK_Handler+0x198>
    32ea:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    32ee:	7aa0      	ldrb	r0, [r4, #10]
    32f0:	2804      	cmp	r0, #4
    32f2:	d004      	beq.n	32fe <MPSL_IRQ_CLOCK_Handler+0x17a>
    32f4:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    32f8:	206d      	movs	r0, #109	; 0x6d
    32fa:	f000 faaf 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    32fe:	f008 febd 	bl	c07c <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    3302:	b928      	cbnz	r0, 3310 <MPSL_IRQ_CLOCK_Handler+0x18c>
    3304:	f008 fedb 	bl	c0be <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3308:	b910      	cbnz	r0, 3310 <MPSL_IRQ_CLOCK_Handler+0x18c>
    330a:	f008 ff0e 	bl	c12a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    330e:	b108      	cbz	r0, 3314 <MPSL_IRQ_CLOCK_Handler+0x190>
    3310:	4811      	ldr	r0, [pc, #68]	; (3358 <MPSL_IRQ_CLOCK_Handler+0x1d4>)
    3312:	6006      	str	r6, [r0, #0]
    3314:	2002      	movs	r0, #2
    3316:	72a0      	strb	r0, [r4, #10]
    3318:	f000 f8e6 	bl	34e8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    331c:	f1ba 0f00 	cmp.w	sl, #0
    3320:	d008      	beq.n	3334 <MPSL_IRQ_CLOCK_Handler+0x1b0>
    3322:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    3326:	7aa0      	ldrb	r0, [r4, #10]
    3328:	2802      	cmp	r0, #2
    332a:	d101      	bne.n	3330 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    332c:	f7ff ff88 	bl	3240 <MPSL_IRQ_CLOCK_Handler+0xbc>
    3330:	f8c5 9014 	str.w	r9, [r5, #20]
    3334:	b13f      	cbz	r7, 3346 <MPSL_IRQ_CLOCK_Handler+0x1c2>
    3336:	7026      	strb	r6, [r4, #0]
    3338:	7aa0      	ldrb	r0, [r4, #10]
    333a:	2802      	cmp	r0, #2
    333c:	d101      	bne.n	3342 <MPSL_IRQ_CLOCK_Handler+0x1be>
    333e:	f7ff ff65 	bl	320c <MPSL_IRQ_CLOCK_Handler+0x88>
    3342:	f000 f8d1 	bl	34e8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3346:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    334a:	4802      	ldr	r0, [pc, #8]	; (3354 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    334c:	3008      	adds	r0, #8
    334e:	f008 be76 	b.w	c03e <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    3352:	0000      	.short	0x0000
    3354:	20000028 	.word	0x20000028
    3358:	40000c34 	.word	0x40000c34
    335c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3360:	4c5c      	ldr	r4, [pc, #368]	; (34d4 <MPSL_IRQ_CLOCK_Handler+0x350>)
    3362:	f04f 0800 	mov.w	r8, #0
    3366:	4606      	mov	r6, r0
    3368:	f8c4 8018 	str.w	r8, [r4, #24]
    336c:	7843      	ldrb	r3, [r0, #1]
    336e:	7882      	ldrb	r2, [r0, #2]
    3370:	7800      	ldrb	r0, [r0, #0]
    3372:	72e0      	strb	r0, [r4, #11]
    3374:	7163      	strb	r3, [r4, #5]
    3376:	2701      	movs	r7, #1
    3378:	71a2      	strb	r2, [r4, #6]
    337a:	07bd      	lsls	r5, r7, #30
    337c:	f884 8007 	strb.w	r8, [r4, #7]
    3380:	2805      	cmp	r0, #5
    3382:	d224      	bcs.n	33ce <MPSL_IRQ_CLOCK_Handler+0x24a>
    3384:	e8df f000 	tbb	[pc, r0]
    3388:	1f05030f 	.word	0x1f05030f
    338c:	0021      	.short	0x0021
    338e:	61a7      	str	r7, [r4, #24]
    3390:	e009      	b.n	33a6 <MPSL_IRQ_CLOCK_Handler+0x222>
    3392:	f000 f8c5 	bl	3520 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3396:	2101      	movs	r1, #1
    3398:	4628      	mov	r0, r5
    339a:	f008 fdca 	bl	bf32 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    339e:	2800      	cmp	r0, #0
    33a0:	d0f9      	beq.n	3396 <MPSL_IRQ_CLOCK_Handler+0x212>
    33a2:	2002      	movs	r0, #2
    33a4:	61a0      	str	r0, [r4, #24]
    33a6:	f008 fdf0 	bl	bf8a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    33aa:	b1b0      	cbz	r0, 33da <MPSL_IRQ_CLOCK_Handler+0x256>
    33ac:	f000 fa0c 	bl	37c8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    33b0:	7e21      	ldrb	r1, [r4, #24]
    33b2:	f001 0103 	and.w	r1, r1, #3
    33b6:	4288      	cmp	r0, r1
    33b8:	d10f      	bne.n	33da <MPSL_IRQ_CLOCK_Handler+0x256>
    33ba:	79b0      	ldrb	r0, [r6, #6]
    33bc:	b150      	cbz	r0, 33d4 <MPSL_IRQ_CLOCK_Handler+0x250>
    33be:	2002      	movs	r0, #2
    33c0:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    33c4:	e06a      	b.n	349c <MPSL_IRQ_CLOCK_Handler+0x318>
    33c6:	4844      	ldr	r0, [pc, #272]	; (34d8 <MPSL_IRQ_CLOCK_Handler+0x354>)
    33c8:	e7ec      	b.n	33a4 <MPSL_IRQ_CLOCK_Handler+0x220>
    33ca:	4844      	ldr	r0, [pc, #272]	; (34dc <MPSL_IRQ_CLOCK_Handler+0x358>)
    33cc:	e7ea      	b.n	33a4 <MPSL_IRQ_CLOCK_Handler+0x220>
    33ce:	f44f 714c 	mov.w	r1, #816	; 0x330
    33d2:	e049      	b.n	3468 <MPSL_IRQ_CLOCK_Handler+0x2e4>
    33d4:	f000 f9cc 	bl	3770 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    33d8:	e060      	b.n	349c <MPSL_IRQ_CLOCK_Handler+0x318>
    33da:	60ef      	str	r7, [r5, #12]
    33dc:	f44f 7a82 	mov.w	sl, #260	; 0x104
    33e0:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    33e4:	69a0      	ldr	r0, [r4, #24]
    33e6:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    33ea:	f008 fe33 	bl	c054 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    33ee:	b940      	cbnz	r0, 3402 <MPSL_IRQ_CLOCK_Handler+0x27e>
    33f0:	f008 fe3a 	bl	c068 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    33f4:	b928      	cbnz	r0, 3402 <MPSL_IRQ_CLOCK_Handler+0x27e>
    33f6:	f008 fe4e 	bl	c096 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    33fa:	b910      	cbnz	r0, 3402 <MPSL_IRQ_CLOCK_Handler+0x27e>
    33fc:	f008 fe5f 	bl	c0be <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3400:	b138      	cbz	r0, 3412 <MPSL_IRQ_CLOCK_Handler+0x28e>
    3402:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    3406:	4836      	ldr	r0, [pc, #216]	; (34e0 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    3408:	f8d1 1244 	ldr.w	r1, [r1, #580]	; 0x244
    340c:	f3c1 3142 	ubfx	r1, r1, #13, #3
    3410:	6001      	str	r1, [r0, #0]
    3412:	f008 fe1f 	bl	c054 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3416:	b940      	cbnz	r0, 342a <MPSL_IRQ_CLOCK_Handler+0x2a6>
    3418:	f008 fe26 	bl	c068 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    341c:	b928      	cbnz	r0, 342a <MPSL_IRQ_CLOCK_Handler+0x2a6>
    341e:	f008 fe3a 	bl	c096 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3422:	b910      	cbnz	r0, 342a <MPSL_IRQ_CLOCK_Handler+0x2a6>
    3424:	f008 fe4b 	bl	c0be <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3428:	b110      	cbz	r0, 3430 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    342a:	482d      	ldr	r0, [pc, #180]	; (34e0 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    342c:	3010      	adds	r0, #16
    342e:	6007      	str	r7, [r0, #0]
    3430:	60af      	str	r7, [r5, #8]
    3432:	2002      	movs	r0, #2
    3434:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3438:	79b0      	ldrb	r0, [r6, #6]
    343a:	bb78      	cbnz	r0, 349c <MPSL_IRQ_CLOCK_Handler+0x318>
    343c:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    3440:	f010 0f02 	tst.w	r0, #2
    3444:	d00e      	beq.n	3464 <MPSL_IRQ_CLOCK_Handler+0x2e0>
    3446:	f8df 909c 	ldr.w	r9, [pc, #156]	; 34e4 <MPSL_IRQ_CLOCK_Handler+0x360>
    344a:	f8d9 1000 	ldr.w	r1, [r9]
    344e:	43c9      	mvns	r1, r1
    3450:	f341 1700 	sbfx	r7, r1, #4, #1
    3454:	f8d9 1000 	ldr.w	r1, [r9]
    3458:	f041 0110 	orr.w	r1, r1, #16
    345c:	f8c9 1000 	str.w	r1, [r9]
    3460:	1c7f      	adds	r7, r7, #1
    3462:	e007      	b.n	3474 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    3464:	f240 21f1 	movw	r1, #753	; 0x2f1
    3468:	206d      	movs	r0, #109	; 0x6d
    346a:	f000 f9f7 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    346e:	bf00      	nop
    3470:	f000 fb1a 	bl	3aa8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3474:	4651      	mov	r1, sl
    3476:	4628      	mov	r0, r5
    3478:	f008 fd56 	bl	bf28 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    347c:	2800      	cmp	r0, #0
    347e:	d0f7      	beq.n	3470 <MPSL_IRQ_CLOCK_Handler+0x2ec>
    3480:	f000 f976 	bl	3770 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3484:	b92f      	cbnz	r7, 3492 <MPSL_IRQ_CLOCK_Handler+0x30e>
    3486:	f8d9 1000 	ldr.w	r1, [r9]
    348a:	f021 0110 	bic.w	r1, r1, #16
    348e:	f8c9 1000 	str.w	r1, [r9]
    3492:	2002      	movs	r0, #2
    3494:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3498:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    349c:	79a0      	ldrb	r0, [r4, #6]
    349e:	b170      	cbz	r0, 34be <MPSL_IRQ_CLOCK_Handler+0x33a>
    34a0:	7830      	ldrb	r0, [r6, #0]
    34a2:	b960      	cbnz	r0, 34be <MPSL_IRQ_CLOCK_Handler+0x33a>
    34a4:	f000 f976 	bl	3794 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    34a8:	4606      	mov	r6, r0
    34aa:	f000 fa47 	bl	393c <mpsl_temperature_get>
    34ae:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    34b2:	b116      	cbz	r6, 34ba <MPSL_IRQ_CLOCK_Handler+0x336>
    34b4:	e9c4 2004 	strd	r2, r0, [r4, #16]
    34b8:	e001      	b.n	34be <MPSL_IRQ_CLOCK_Handler+0x33a>
    34ba:	e9c4 0204 	strd	r0, r2, [r4, #16]
    34be:	2101      	movs	r1, #1
    34c0:	4628      	mov	r0, r5
    34c2:	f008 fd36 	bl	bf32 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    34c6:	b108      	cbz	r0, 34cc <MPSL_IRQ_CLOCK_Handler+0x348>
    34c8:	f000 f95e 	bl	3788 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    34cc:	f884 800a 	strb.w	r8, [r4, #10]
    34d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    34d4:	20000028 	.word	0x20000028
    34d8:	00020001 	.word	0x00020001
    34dc:	00030001 	.word	0x00030001
    34e0:	4000053c 	.word	0x4000053c
    34e4:	e000ed10 	.word	0xe000ed10

000034e8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    34e8:	b510      	push	{r4, lr}
    34ea:	f3ef 8410 	mrs	r4, PRIMASK
    34ee:	b672      	cpsid	i
    34f0:	480a      	ldr	r0, [pc, #40]	; (351c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    34f2:	7841      	ldrb	r1, [r0, #1]
    34f4:	b129      	cbz	r1, 3502 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    34f6:	7841      	ldrb	r1, [r0, #1]
    34f8:	1e49      	subs	r1, r1, #1
    34fa:	7041      	strb	r1, [r0, #1]
    34fc:	7841      	ldrb	r1, [r0, #1]
    34fe:	b129      	cbz	r1, 350c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    3500:	e008      	b.n	3514 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3502:	f240 110d 	movw	r1, #269	; 0x10d
    3506:	206d      	movs	r0, #109	; 0x6d
    3508:	f000 f9a8 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    350c:	7880      	ldrb	r0, [r0, #2]
    350e:	b908      	cbnz	r0, 3514 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3510:	f000 f94e 	bl	37b0 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3514:	2c00      	cmp	r4, #0
    3516:	d100      	bne.n	351a <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    3518:	b662      	cpsie	i
    351a:	bd10      	pop	{r4, pc}
    351c:	20000028 	.word	0x20000028

00003520 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    3520:	b510      	push	{r4, lr}
    3522:	f3ef 8410 	mrs	r4, PRIMASK
    3526:	b672      	cpsid	i
    3528:	4806      	ldr	r0, [pc, #24]	; (3544 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    352a:	7841      	ldrb	r1, [r0, #1]
    352c:	1c49      	adds	r1, r1, #1
    352e:	7041      	strb	r1, [r0, #1]
    3530:	7840      	ldrb	r0, [r0, #1]
    3532:	2801      	cmp	r0, #1
    3534:	d101      	bne.n	353a <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    3536:	f008 fd13 	bl	bf60 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    353a:	2c00      	cmp	r4, #0
    353c:	d100      	bne.n	3540 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    353e:	b662      	cpsie	i
    3540:	bd10      	pop	{r4, pc}
    3542:	0000      	.short	0x0000
    3544:	20000028 	.word	0x20000028

00003548 <mpsl_clock_hfclk_release>:
    3548:	4805      	ldr	r0, [pc, #20]	; (3560 <mpsl_clock_hfclk_release+0x18>)
    354a:	b510      	push	{r4, lr}
    354c:	78c1      	ldrb	r1, [r0, #3]
    354e:	b121      	cbz	r1, 355a <mpsl_clock_hfclk_release+0x12>
    3550:	2100      	movs	r1, #0
    3552:	7101      	strb	r1, [r0, #4]
    3554:	70c1      	strb	r1, [r0, #3]
    3556:	f7ff ffc7 	bl	34e8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    355a:	2000      	movs	r0, #0
    355c:	bd10      	pop	{r4, pc}
    355e:	0000      	.short	0x0000
    3560:	20000028 	.word	0x20000028

00003564 <mpsl_clock_hfclk_request>:
    3564:	b570      	push	{r4, r5, r6, lr}
    3566:	4c0c      	ldr	r4, [pc, #48]	; (3598 <mpsl_clock_hfclk_request+0x34>)
    3568:	78e1      	ldrb	r1, [r4, #3]
    356a:	b961      	cbnz	r1, 3586 <mpsl_clock_hfclk_request+0x22>
    356c:	2501      	movs	r5, #1
    356e:	70e5      	strb	r5, [r4, #3]
    3570:	61e0      	str	r0, [r4, #28]
    3572:	f7ff ffd5 	bl	3520 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3576:	f000 f90d 	bl	3794 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    357a:	b130      	cbz	r0, 358a <mpsl_clock_hfclk_request+0x26>
    357c:	69e0      	ldr	r0, [r4, #28]
    357e:	b110      	cbz	r0, 3586 <mpsl_clock_hfclk_request+0x22>
    3580:	4780      	blx	r0
    3582:	2000      	movs	r0, #0
    3584:	61e0      	str	r0, [r4, #28]
    3586:	2000      	movs	r0, #0
    3588:	bd70      	pop	{r4, r5, r6, pc}
    358a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    358e:	7125      	strb	r5, [r4, #4]
    3590:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    3594:	e7f7      	b.n	3586 <mpsl_clock_hfclk_request+0x22>
    3596:	0000      	.short	0x0000
    3598:	20000028 	.word	0x20000028

0000359c <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
    359c:	f3ef 8010 	mrs	r0, PRIMASK
    35a0:	b672      	cpsid	i
    35a2:	4904      	ldr	r1, [pc, #16]	; (35b4 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
    35a4:	788a      	ldrb	r2, [r1, #2]
    35a6:	1c52      	adds	r2, r2, #1
    35a8:	708a      	strb	r2, [r1, #2]
    35aa:	2800      	cmp	r0, #0
    35ac:	d100      	bne.n	35b0 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
    35ae:	b662      	cpsie	i
    35b0:	4770      	bx	lr
    35b2:	0000      	.short	0x0000
    35b4:	20000028 	.word	0x20000028

000035b8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
    35b8:	b510      	push	{r4, lr}
    35ba:	f3ef 8410 	mrs	r4, PRIMASK
    35be:	b672      	cpsid	i
    35c0:	480a      	ldr	r0, [pc, #40]	; (35ec <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
    35c2:	7881      	ldrb	r1, [r0, #2]
    35c4:	b129      	cbz	r1, 35d2 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x1a>
    35c6:	7881      	ldrb	r1, [r0, #2]
    35c8:	1e49      	subs	r1, r1, #1
    35ca:	7081      	strb	r1, [r0, #2]
    35cc:	7841      	ldrb	r1, [r0, #1]
    35ce:	b129      	cbz	r1, 35dc <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x24>
    35d0:	e008      	b.n	35e4 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    35d2:	f240 1125 	movw	r1, #293	; 0x125
    35d6:	206d      	movs	r0, #109	; 0x6d
    35d8:	f000 f940 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    35dc:	7880      	ldrb	r0, [r0, #2]
    35de:	b908      	cbnz	r0, 35e4 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    35e0:	f000 f8e6 	bl	37b0 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    35e4:	2c00      	cmp	r4, #0
    35e6:	d100      	bne.n	35ea <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x32>
    35e8:	b662      	cpsie	i
    35ea:	bd10      	pop	{r4, pc}
    35ec:	20000028 	.word	0x20000028

000035f0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    35f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    35f4:	0004      	movs	r4, r0
    35f6:	f06f 0015 	mvn.w	r0, #21
    35fa:	d03c      	beq.n	3676 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    35fc:	7821      	ldrb	r1, [r4, #0]
    35fe:	2904      	cmp	r1, #4
    3600:	d839      	bhi.n	3676 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3602:	2900      	cmp	r1, #0
    3604:	7861      	ldrb	r1, [r4, #1]
    3606:	d038      	beq.n	367a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8a>
    3608:	2900      	cmp	r1, #0
    360a:	d134      	bne.n	3676 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    360c:	78a1      	ldrb	r1, [r4, #2]
    360e:	2900      	cmp	r1, #0
    3610:	d131      	bne.n	3676 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3612:	2000      	movs	r0, #0
    3614:	f008 fc53 	bl	bebe <MPSL_IRQ_RADIO_Handler+0x1e>
    3618:	2000      	movs	r0, #0
    361a:	f008 fc43 	bl	bea4 <MPSL_IRQ_RADIO_Handler+0x4>
    361e:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    3622:	f04f 31ff 	mov.w	r1, #4294967295
    3626:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    362a:	2600      	movs	r6, #0
    362c:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    3630:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    3634:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    3638:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    363c:	4f14      	ldr	r7, [pc, #80]	; (3690 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    363e:	707e      	strb	r6, [r7, #1]
    3640:	88a0      	ldrh	r0, [r4, #4]
    3642:	81b8      	strh	r0, [r7, #12]
    3644:	f008 fc83 	bl	bf4e <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    3648:	2501      	movs	r5, #1
    364a:	b108      	cbz	r0, 3650 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    364c:	70fd      	strb	r5, [r7, #3]
    364e:	707d      	strb	r5, [r7, #1]
    3650:	2101      	movs	r1, #1
    3652:	4640      	mov	r0, r8
    3654:	f008 fc6d 	bl	bf32 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3658:	b108      	cbz	r0, 365e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    365a:	f000 f895 	bl	3788 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    365e:	4620      	mov	r0, r4
    3660:	f7ff fe7c 	bl	335c <MPSL_IRQ_CLOCK_Handler+0x1d8>
    3664:	727d      	strb	r5, [r7, #9]
    3666:	2000      	movs	r0, #0
    3668:	f008 fc1c 	bl	bea4 <MPSL_IRQ_RADIO_Handler+0x4>
    366c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3670:	4630      	mov	r0, r6
    3672:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
    3676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    367a:	2900      	cmp	r1, #0
    367c:	d0fb      	beq.n	3676 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    367e:	2920      	cmp	r1, #32
    3680:	d8f9      	bhi.n	3676 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3682:	78a1      	ldrb	r1, [r4, #2]
    3684:	2921      	cmp	r1, #33	; 0x21
    3686:	d8f6      	bhi.n	3676 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3688:	2901      	cmp	r1, #1
    368a:	d1c2      	bne.n	3612 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    368c:	e7f3      	b.n	3676 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    368e:	0000      	.short	0x0000
    3690:	20000028 	.word	0x20000028

00003694 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    3694:	4801      	ldr	r0, [pc, #4]	; (369c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    3696:	8980      	ldrh	r0, [r0, #12]
    3698:	4770      	bx	lr
    369a:	0000      	.short	0x0000
    369c:	20000028 	.word	0x20000028

000036a0 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    36a0:	b510      	push	{r4, lr}
    36a2:	480d      	ldr	r0, [pc, #52]	; (36d8 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    36a4:	f008 fcb4 	bl	c010 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    36a8:	490b      	ldr	r1, [pc, #44]	; (36d8 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    36aa:	3908      	subs	r1, #8
    36ac:	b148      	cbz	r0, 36c2 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    36ae:	2001      	movs	r0, #1
    36b0:	7008      	strb	r0, [r1, #0]
    36b2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    36b6:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    36ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    36be:	f7ff bf2f 	b.w	3520 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    36c2:	7a88      	ldrb	r0, [r1, #10]
    36c4:	2802      	cmp	r0, #2
    36c6:	d101      	bne.n	36cc <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    36c8:	f7ff fda0 	bl	320c <MPSL_IRQ_CLOCK_Handler+0x88>
    36cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    36d0:	4801      	ldr	r0, [pc, #4]	; (36d8 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    36d2:	f008 bcb4 	b.w	c03e <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    36d6:	0000      	.short	0x0000
    36d8:	20000030 	.word	0x20000030

000036dc <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    36dc:	4802      	ldr	r0, [pc, #8]	; (36e8 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    36de:	7a80      	ldrb	r0, [r0, #10]
    36e0:	2800      	cmp	r0, #0
    36e2:	d000      	beq.n	36e6 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    36e4:	2001      	movs	r0, #1
    36e6:	4770      	bx	lr
    36e8:	20000028 	.word	0x20000028

000036ec <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    36ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    36ee:	4d1f      	ldr	r5, [pc, #124]	; (376c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    36f0:	7ae8      	ldrb	r0, [r5, #11]
    36f2:	2800      	cmp	r0, #0
    36f4:	d10f      	bne.n	3716 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    36f6:	7e28      	ldrb	r0, [r5, #24]
    36f8:	f000 0003 	and.w	r0, r0, #3
    36fc:	f008 fc35 	bl	bf6a <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3700:	2800      	cmp	r0, #0
    3702:	d008      	beq.n	3716 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3704:	f3ef 8110 	mrs	r1, PRIMASK
    3708:	b672      	cpsid	i
    370a:	f7ff ffe7 	bl	36dc <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    370e:	b118      	cbz	r0, 3718 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    3710:	2900      	cmp	r1, #0
    3712:	d100      	bne.n	3716 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3714:	b662      	cpsie	i
    3716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3718:	2601      	movs	r6, #1
    371a:	72ae      	strb	r6, [r5, #10]
    371c:	b901      	cbnz	r1, 3720 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    371e:	b662      	cpsie	i
    3720:	2018      	movs	r0, #24
    3722:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    3726:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    372a:	61a6      	str	r6, [r4, #24]
    372c:	f44f 7020 	mov.w	r0, #640	; 0x280
    3730:	f8ad 0000 	strh.w	r0, [sp]
    3734:	f8bd 0000 	ldrh.w	r0, [sp]
    3738:	1e41      	subs	r1, r0, #1
    373a:	f8ad 1000 	strh.w	r1, [sp]
    373e:	d2f9      	bcs.n	3734 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    3740:	2700      	movs	r7, #0
    3742:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    3746:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    374a:	4808      	ldr	r0, [pc, #32]	; (376c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    374c:	3008      	adds	r0, #8
    374e:	f008 fc72 	bl	c036 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    3752:	702f      	strb	r7, [r5, #0]
    3754:	f7ff fd5a 	bl	320c <MPSL_IRQ_CLOCK_Handler+0x88>
    3758:	6166      	str	r6, [r4, #20]
    375a:	7968      	ldrb	r0, [r5, #5]
    375c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    3760:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    3764:	2018      	movs	r0, #24
    3766:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    376a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    376c:	20000028 	.word	0x20000028

00003770 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    3770:	b510      	push	{r4, lr}
    3772:	4c04      	ldr	r4, [pc, #16]	; (3784 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    3774:	7e20      	ldrb	r0, [r4, #24]
    3776:	f000 0003 	and.w	r0, r0, #3
    377a:	f008 fbf6 	bl	bf6a <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    377e:	2800      	cmp	r0, #0
    3780:	d0f8      	beq.n	3774 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    3782:	bd10      	pop	{r4, pc}
    3784:	20000028 	.word	0x20000028

00003788 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    3788:	4901      	ldr	r1, [pc, #4]	; (3790 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    378a:	2001      	movs	r0, #1
    378c:	7008      	strb	r0, [r1, #0]
    378e:	4770      	bx	lr
    3790:	20000288 	.word	0x20000288

00003794 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    3794:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3798:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    379c:	b918      	cbnz	r0, 37a6 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    379e:	4803      	ldr	r0, [pc, #12]	; (37ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    37a0:	7800      	ldrb	r0, [r0, #0]
    37a2:	2800      	cmp	r0, #0
    37a4:	d000      	beq.n	37a8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    37a6:	2001      	movs	r0, #1
    37a8:	4770      	bx	lr
    37aa:	0000      	.short	0x0000
    37ac:	20000288 	.word	0x20000288

000037b0 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    37b0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    37b4:	2101      	movs	r1, #1
    37b6:	6041      	str	r1, [r0, #4]
    37b8:	2100      	movs	r1, #0
    37ba:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    37be:	4801      	ldr	r0, [pc, #4]	; (37c4 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    37c0:	7001      	strb	r1, [r0, #0]
    37c2:	4770      	bx	lr
    37c4:	20000288 	.word	0x20000288

000037c8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    37c8:	4802      	ldr	r0, [pc, #8]	; (37d4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    37ca:	6800      	ldr	r0, [r0, #0]
    37cc:	f000 0003 	and.w	r0, r0, #3
    37d0:	4770      	bx	lr
    37d2:	0000      	.short	0x0000
    37d4:	4000041c 	.word	0x4000041c
    37d8:	b510      	push	{r4, lr}
    37da:	b131      	cbz	r1, 37ea <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    37dc:	2901      	cmp	r1, #1
    37de:	d007      	beq.n	37f0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    37e0:	f44f 7142 	mov.w	r1, #776	; 0x308
    37e4:	a005      	add	r0, pc, #20	; (adr r0, 37fc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    37e6:	f000 f80f 	bl	3808 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    37ea:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    37ee:	e001      	b.n	37f4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    37f0:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    37f4:	f000 0001 	and.w	r0, r0, #1
    37f8:	bd10      	pop	{r4, pc}
    37fa:	0000      	.short	0x0000
    37fc:	5f66726e 	.word	0x5f66726e
    3800:	636f6c63 	.word	0x636f6c63
    3804:	00682e6b 	.word	0x00682e6b

00003808 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    3808:	4a02      	ldr	r2, [pc, #8]	; (3814 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xc>)
    380a:	6852      	ldr	r2, [r2, #4]
    380c:	b102      	cbz	r2, 3810 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    380e:	4710      	bx	r2
    3810:	e7fe      	b.n	3810 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    3812:	0000      	.short	0x0000
    3814:	20000048 	.word	0x20000048
    3818:	4806      	ldr	r0, [pc, #24]	; (3834 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x2c>)
    381a:	b510      	push	{r4, lr}
    381c:	2100      	movs	r1, #0
    381e:	6001      	str	r1, [r0, #0]
    3820:	2101      	movs	r1, #1
    3822:	6001      	str	r1, [r0, #0]
    3824:	4608      	mov	r0, r1
    3826:	f008 fbc7 	bl	bfb8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    382a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    382e:	2001      	movs	r0, #1
    3830:	f008 bbb5 	b.w	bf9e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3834:	40001ffc 	.word	0x40001ffc
    3838:	4807      	ldr	r0, [pc, #28]	; (3858 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x50>)
    383a:	b510      	push	{r4, lr}
    383c:	2101      	movs	r1, #1
    383e:	6041      	str	r1, [r0, #4]
    3840:	1e89      	subs	r1, r1, #2
    3842:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3846:	200c      	movs	r0, #12
    3848:	f008 fbb6 	bl	bfb8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    384c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3850:	200c      	movs	r0, #12
    3852:	f008 bba4 	b.w	bf9e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3856:	0000      	.short	0x0000
    3858:	4000c000 	.word	0x4000c000

0000385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    385c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    385e:	4a10      	ldr	r2, [pc, #64]	; (38a0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    3860:	6855      	ldr	r5, [r2, #4]
    3862:	b1e5      	cbz	r5, 389e <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    3864:	2200      	movs	r2, #0
    3866:	4603      	mov	r3, r0
    3868:	466e      	mov	r6, sp
    386a:	240a      	movs	r4, #10
    386c:	e003      	b.n	3876 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1a>
    386e:	fbb0 f0f4 	udiv	r0, r0, r4
    3872:	1c52      	adds	r2, r2, #1
    3874:	b2d2      	uxtb	r2, r2
    3876:	2800      	cmp	r0, #0
    3878:	d1f9      	bne.n	386e <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x12>
    387a:	54b0      	strb	r0, [r6, r2]
    387c:	e00a      	b.n	3894 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    387e:	bf00      	nop
    3880:	fbb3 f0f4 	udiv	r0, r3, r4
    3884:	fb04 3010 	mls	r0, r4, r0, r3
    3888:	fbb3 f3f4 	udiv	r3, r3, r4
    388c:	1e52      	subs	r2, r2, #1
    388e:	b2d2      	uxtb	r2, r2
    3890:	3030      	adds	r0, #48	; 0x30
    3892:	54b0      	strb	r0, [r6, r2]
    3894:	2a00      	cmp	r2, #0
    3896:	d1f3      	bne.n	3880 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    3898:	4630      	mov	r0, r6
    389a:	47a8      	blx	r5
    389c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    389e:	e7fe      	b.n	389e <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    38a0:	20000048 	.word	0x20000048

000038a4 <mpsl_init>:
    38a4:	b570      	push	{r4, r5, r6, lr}
    38a6:	4c17      	ldr	r4, [pc, #92]	; (3904 <mpsl_init+0x60>)
    38a8:	4606      	mov	r6, r0
    38aa:	460d      	mov	r5, r1
    38ac:	7860      	ldrb	r0, [r4, #1]
    38ae:	b110      	cbz	r0, 38b6 <mpsl_init+0x12>
    38b0:	f04f 30ff 	mov.w	r0, #4294967295
    38b4:	bd70      	pop	{r4, r5, r6, pc}
    38b6:	b906      	cbnz	r6, 38ba <mpsl_init+0x16>
    38b8:	4e13      	ldr	r6, [pc, #76]	; (3908 <mpsl_init+0x64>)
    38ba:	6062      	str	r2, [r4, #4]
    38bc:	7025      	strb	r5, [r4, #0]
    38be:	f7ff ffab 	bl	3818 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>
    38c2:	f7ff ffb9 	bl	3838 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>
    38c6:	4630      	mov	r0, r6
    38c8:	f7ff fe92 	bl	35f0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    38cc:	0006      	movs	r6, r0
    38ce:	d1f1      	bne.n	38b4 <mpsl_init+0x10>
    38d0:	f7fe ff12 	bl	26f8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    38d4:	f7ff ff0a 	bl	36ec <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    38d8:	f008 fa3c 	bl	bd54 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    38dc:	4628      	mov	r0, r5
    38de:	f008 fb5e 	bl	bf9e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    38e2:	2001      	movs	r0, #1
    38e4:	2d00      	cmp	r5, #0
    38e6:	db09      	blt.n	38fc <mpsl_init+0x58>
    38e8:	f005 011f 	and.w	r1, r5, #31
    38ec:	fa00 f101 	lsl.w	r1, r0, r1
    38f0:	096a      	lsrs	r2, r5, #5
    38f2:	0092      	lsls	r2, r2, #2
    38f4:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    38f8:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    38fc:	7060      	strb	r0, [r4, #1]
    38fe:	4630      	mov	r0, r6
    3900:	bd70      	pop	{r4, r5, r6, pc}
    3902:	0000      	.short	0x0000
    3904:	20000048 	.word	0x20000048
    3908:	0000bfda 	.word	0x0000bfda

0000390c <mpsl_is_initialized>:
    390c:	4801      	ldr	r0, [pc, #4]	; (3914 <mpsl_is_initialized+0x8>)
    390e:	7840      	ldrb	r0, [r0, #1]
    3910:	4770      	bx	lr
    3912:	0000      	.short	0x0000
    3914:	20000048 	.word	0x20000048

00003918 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    3918:	4807      	ldr	r0, [pc, #28]	; (3938 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    391a:	f990 0000 	ldrsb.w	r0, [r0]
    391e:	2800      	cmp	r0, #0
    3920:	db09      	blt.n	3936 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    3922:	f000 021f 	and.w	r2, r0, #31
    3926:	2101      	movs	r1, #1
    3928:	4091      	lsls	r1, r2
    392a:	0940      	lsrs	r0, r0, #5
    392c:	0080      	lsls	r0, r0, #2
    392e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3932:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3936:	4770      	bx	lr
    3938:	20000048 	.word	0x20000048

0000393c <mpsl_temperature_get>:
    393c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3940:	2601      	movs	r6, #1
    3942:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3946:	0331      	lsls	r1, r6, #12
    3948:	f04f 0800 	mov.w	r8, #0
    394c:	4640      	mov	r0, r8
    394e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    3952:	f3bf 8f4f 	dsb	sy
    3956:	f3bf 8f6f 	isb	sy
    395a:	4c16      	ldr	r4, [pc, #88]	; (39b4 <mpsl_temperature_get+0x78>)
    395c:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    3960:	200c      	movs	r0, #12
    3962:	f008 fb48 	bl	bff6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    3966:	4d14      	ldr	r5, [pc, #80]	; (39b8 <mpsl_temperature_get+0x7c>)
    3968:	6828      	ldr	r0, [r5, #0]
    396a:	43c0      	mvns	r0, r0
    396c:	f340 1700 	sbfx	r7, r0, #4, #1
    3970:	6828      	ldr	r0, [r5, #0]
    3972:	f040 0010 	orr.w	r0, r0, #16
    3976:	6028      	str	r0, [r5, #0]
    3978:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    397c:	6026      	str	r6, [r4, #0]
    397e:	1c7f      	adds	r7, r7, #1
    3980:	e002      	b.n	3988 <mpsl_temperature_get+0x4c>
    3982:	bf00      	nop
    3984:	f000 f890 	bl	3aa8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3988:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    398c:	2800      	cmp	r0, #0
    398e:	d0f9      	beq.n	3984 <mpsl_temperature_get+0x48>
    3990:	b91f      	cbnz	r7, 399a <mpsl_temperature_get+0x5e>
    3992:	6828      	ldr	r0, [r5, #0]
    3994:	f020 0010 	bic.w	r0, r0, #16
    3998:	6028      	str	r0, [r5, #0]
    399a:	4808      	ldr	r0, [pc, #32]	; (39bc <mpsl_temperature_get+0x80>)
    399c:	6805      	ldr	r5, [r0, #0]
    399e:	6066      	str	r6, [r4, #4]
    39a0:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    39a4:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    39a8:	200c      	movs	r0, #12
    39aa:	f008 fb24 	bl	bff6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    39ae:	4628      	mov	r0, r5
    39b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    39b4:	4000c000 	.word	0x4000c000
    39b8:	e000ed10 	.word	0xe000ed10
    39bc:	4000c508 	.word	0x4000c508

000039c0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    39c0:	b510      	push	{r4, lr}
    39c2:	4602      	mov	r2, r0
    39c4:	2005      	movs	r0, #5
    39c6:	490c      	ldr	r1, [pc, #48]	; (39f8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    39c8:	e004      	b.n	39d4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    39ca:	bf00      	nop
    39cc:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    39d0:	791b      	ldrb	r3, [r3, #4]
    39d2:	b133      	cbz	r3, 39e2 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    39d4:	1e40      	subs	r0, r0, #1
    39d6:	b2c0      	uxtb	r0, r0
    39d8:	d2f8      	bcs.n	39cc <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    39da:	214b      	movs	r1, #75	; 0x4b
    39dc:	2069      	movs	r0, #105	; 0x69
    39de:	f7ff ff3d 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    39e2:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    39e6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    39ea:	2200      	movs	r2, #0
    39ec:	714a      	strb	r2, [r1, #5]
    39ee:	718a      	strb	r2, [r1, #6]
    39f0:	2201      	movs	r2, #1
    39f2:	710a      	strb	r2, [r1, #4]
    39f4:	bd10      	pop	{r4, pc}
    39f6:	0000      	.short	0x0000
    39f8:	20000d90 	.word	0x20000d90

000039fc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    39fc:	b510      	push	{r4, lr}
    39fe:	2805      	cmp	r0, #5
    3a00:	d301      	bcc.n	3a06 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    3a02:	215a      	movs	r1, #90	; 0x5a
    3a04:	e006      	b.n	3a14 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    3a06:	490a      	ldr	r1, [pc, #40]	; (3a30 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    3a08:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    3a0c:	7901      	ldrb	r1, [r0, #4]
    3a0e:	2901      	cmp	r1, #1
    3a10:	d003      	beq.n	3a1a <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    3a12:	215b      	movs	r1, #91	; 0x5b
    3a14:	2069      	movs	r0, #105	; 0x69
    3a16:	f7ff ff21 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3a1a:	7941      	ldrb	r1, [r0, #5]
    3a1c:	7982      	ldrb	r2, [r0, #6]
    3a1e:	1c49      	adds	r1, r1, #1
    3a20:	b2c9      	uxtb	r1, r1
    3a22:	428a      	cmp	r2, r1
    3a24:	d000      	beq.n	3a28 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    3a26:	7141      	strb	r1, [r0, #5]
    3a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3a2c:	f7ff bf74 	b.w	3918 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    3a30:	20000d90 	.word	0x20000d90

00003a34 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    3a34:	b570      	push	{r4, r5, r6, lr}
    3a36:	2505      	movs	r5, #5
    3a38:	4e0e      	ldr	r6, [pc, #56]	; (3a74 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    3a3a:	4c0f      	ldr	r4, [pc, #60]	; (3a78 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    3a3c:	e016      	b.n	3a6c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    3a3e:	7821      	ldrb	r1, [r4, #0]
    3a40:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    3a44:	7902      	ldrb	r2, [r0, #4]
    3a46:	2a01      	cmp	r2, #1
    3a48:	d108      	bne.n	3a5c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    3a4a:	7942      	ldrb	r2, [r0, #5]
    3a4c:	7983      	ldrb	r3, [r0, #6]
    3a4e:	429a      	cmp	r2, r3
    3a50:	d004      	beq.n	3a5c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    3a52:	7942      	ldrb	r2, [r0, #5]
    3a54:	7182      	strb	r2, [r0, #6]
    3a56:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    3a5a:	4780      	blx	r0
    3a5c:	7820      	ldrb	r0, [r4, #0]
    3a5e:	1c40      	adds	r0, r0, #1
    3a60:	b2c0      	uxtb	r0, r0
    3a62:	7020      	strb	r0, [r4, #0]
    3a64:	2805      	cmp	r0, #5
    3a66:	d301      	bcc.n	3a6c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    3a68:	2000      	movs	r0, #0
    3a6a:	7020      	strb	r0, [r4, #0]
    3a6c:	1e6d      	subs	r5, r5, #1
    3a6e:	b2ed      	uxtb	r5, r5
    3a70:	d2e5      	bcs.n	3a3e <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    3a72:	bd70      	pop	{r4, r5, r6, pc}
    3a74:	20000d90 	.word	0x20000d90
    3a78:	20000289 	.word	0x20000289

00003a7c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    3a7c:	b500      	push	{lr}
    3a7e:	f008 fae9 	bl	c054 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3a82:	b940      	cbnz	r0, 3a96 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3a84:	f008 faf0 	bl	c068 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3a88:	b928      	cbnz	r0, 3a96 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3a8a:	f008 fb04 	bl	c096 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3a8e:	b910      	cbnz	r0, 3a96 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3a90:	f008 fb15 	bl	c0be <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3a94:	b108      	cbz	r0, 3a9a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    3a96:	4802      	ldr	r0, [pc, #8]	; (3aa0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    3a98:	bd00      	pop	{pc}
    3a9a:	4802      	ldr	r0, [pc, #8]	; (3aa4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    3a9c:	bd00      	pop	{pc}
    3a9e:	0000      	.short	0x0000
    3aa0:	4000050c 	.word	0x4000050c
    3aa4:	4001e700 	.word	0x4001e700

00003aa8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    3aa8:	b510      	push	{r4, lr}
    3aaa:	f008 fb08 	bl	c0be <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3aae:	b330      	cbz	r0, 3afe <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    3ab0:	f3ef 8010 	mrs	r0, PRIMASK
    3ab4:	b1c8      	cbz	r0, 3aea <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    3ab6:	2100      	movs	r1, #0
    3ab8:	b672      	cpsid	i
    3aba:	4812      	ldr	r0, [pc, #72]	; (3b04 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    3abc:	6802      	ldr	r2, [r0, #0]
    3abe:	6803      	ldr	r3, [r0, #0]
    3ac0:	f3c2 1200 	ubfx	r2, r2, #4, #1
    3ac4:	f043 0310 	orr.w	r3, r3, #16
    3ac8:	6003      	str	r3, [r0, #0]
    3aca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3ace:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    3ad2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    3ad6:	431c      	orrs	r4, r3
    3ad8:	d000      	beq.n	3adc <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    3ada:	bf40      	sev
    3adc:	bf20      	wfe
    3ade:	bf00      	nop
    3ae0:	bf00      	nop
    3ae2:	bf00      	nop
    3ae4:	bf00      	nop
    3ae6:	b112      	cbz	r2, 3aee <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    3ae8:	e005      	b.n	3af6 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    3aea:	2101      	movs	r1, #1
    3aec:	e7e4      	b.n	3ab8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    3aee:	6802      	ldr	r2, [r0, #0]
    3af0:	f022 0210 	bic.w	r2, r2, #16
    3af4:	6002      	str	r2, [r0, #0]
    3af6:	2900      	cmp	r1, #0
    3af8:	d000      	beq.n	3afc <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    3afa:	b662      	cpsie	i
    3afc:	bd10      	pop	{r4, pc}
    3afe:	bf20      	wfe
    3b00:	bd10      	pop	{r4, pc}
    3b02:	0000      	.short	0x0000
    3b04:	e000ed10 	.word	0xe000ed10

00003b08 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    3b08:	0000c347 0000c335 0000c341 0000c32f     G...5...A.../...
    3b18:	0000c32d 0000c32b 0000c34d 0000c33b     -...+...M...;...
    3b28:	0000c325 0000c31d 0000c321 0000c317     %.......!.......

00003b38 <mpsl_fem_lna_configuration_clear>:
    3b38:	4801      	ldr	r0, [pc, #4]	; (3b40 <mpsl_fem_lna_configuration_clear+0x8>)
    3b3a:	6800      	ldr	r0, [r0, #0]
    3b3c:	68c0      	ldr	r0, [r0, #12]
    3b3e:	4700      	bx	r0
    3b40:	20000050 	.word	0x20000050

00003b44 <mpsl_fem_lna_configuration_set>:
    3b44:	4a01      	ldr	r2, [pc, #4]	; (3b4c <mpsl_fem_lna_configuration_set+0x8>)
    3b46:	6812      	ldr	r2, [r2, #0]
    3b48:	6852      	ldr	r2, [r2, #4]
    3b4a:	4710      	bx	r2
    3b4c:	20000050 	.word	0x20000050

00003b50 <mpsl_fem_pa_configuration_clear>:
    3b50:	4801      	ldr	r0, [pc, #4]	; (3b58 <mpsl_fem_pa_configuration_clear+0x8>)
    3b52:	6800      	ldr	r0, [r0, #0]
    3b54:	6880      	ldr	r0, [r0, #8]
    3b56:	4700      	bx	r0
    3b58:	20000050 	.word	0x20000050

00003b5c <mpsl_fem_pa_configuration_set>:
    3b5c:	4a01      	ldr	r2, [pc, #4]	; (3b64 <mpsl_fem_pa_configuration_set+0x8>)
    3b5e:	6812      	ldr	r2, [r2, #0]
    3b60:	6812      	ldr	r2, [r2, #0]
    3b62:	4710      	bx	r2
    3b64:	20000050 	.word	0x20000050

00003b68 <mpsl_fem_pa_is_configured>:
    3b68:	4901      	ldr	r1, [pc, #4]	; (3b70 <mpsl_fem_pa_is_configured+0x8>)
    3b6a:	6809      	ldr	r1, [r1, #0]
    3b6c:	69c9      	ldr	r1, [r1, #28]
    3b6e:	4708      	bx	r1
    3b70:	20000050 	.word	0x20000050

00003b74 <mpsl_fem_device_config_254_apply_get>:
    3b74:	4801      	ldr	r0, [pc, #4]	; (3b7c <mpsl_fem_device_config_254_apply_get+0x8>)
    3b76:	7800      	ldrb	r0, [r0, #0]
    3b78:	4770      	bx	lr
    3b7a:	0000      	.short	0x0000
    3b7c:	2000028a 	.word	0x2000028a

00003b80 <mpsl_fem_device_config_254_apply_set>:
    3b80:	4901      	ldr	r1, [pc, #4]	; (3b88 <mpsl_fem_device_config_254_apply_set+0x8>)
    3b82:	7008      	strb	r0, [r1, #0]
    3b84:	4770      	bx	lr
    3b86:	0000      	.short	0x0000
    3b88:	2000028a 	.word	0x2000028a
    3b8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3b8e:	4c17      	ldr	r4, [pc, #92]	; (3bec <mpsl_fem_device_config_254_apply_set+0x6c>)
    3b90:	79a0      	ldrb	r0, [r4, #6]
    3b92:	2802      	cmp	r0, #2
    3b94:	d200      	bcs.n	3b98 <mpsl_fem_device_config_254_apply_set+0x18>
    3b96:	2002      	movs	r0, #2
    3b98:	f88d 0001 	strb.w	r0, [sp, #1]
    3b9c:	7960      	ldrb	r0, [r4, #5]
    3b9e:	2803      	cmp	r0, #3
    3ba0:	d200      	bcs.n	3ba4 <mpsl_fem_device_config_254_apply_set+0x24>
    3ba2:	2003      	movs	r0, #3
    3ba4:	f88d 0000 	strb.w	r0, [sp]
    3ba8:	7920      	ldrb	r0, [r4, #4]
    3baa:	f8ad 0004 	strh.w	r0, [sp, #4]
    3bae:	78e0      	ldrb	r0, [r4, #3]
    3bb0:	f8ad 0002 	strh.w	r0, [sp, #2]
    3bb4:	4668      	mov	r0, sp
    3bb6:	f006 faaf 	bl	a118 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    3bba:	b108      	cbz	r0, 3bc0 <mpsl_fem_device_config_254_apply_set+0x40>
    3bbc:	219f      	movs	r1, #159	; 0x9f
    3bbe:	e010      	b.n	3be2 <mpsl_fem_device_config_254_apply_set+0x62>
    3bc0:	68a0      	ldr	r0, [r4, #8]
    3bc2:	9002      	str	r0, [sp, #8]
    3bc4:	a802      	add	r0, sp, #8
    3bc6:	f006 fabd 	bl	a144 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    3bca:	b108      	cbz	r0, 3bd0 <mpsl_fem_device_config_254_apply_set+0x50>
    3bcc:	21a3      	movs	r1, #163	; 0xa3
    3bce:	e008      	b.n	3be2 <mpsl_fem_device_config_254_apply_set+0x62>
    3bd0:	4807      	ldr	r0, [pc, #28]	; (3bf0 <mpsl_fem_device_config_254_apply_set+0x70>)
    3bd2:	6800      	ldr	r0, [r0, #0]
    3bd4:	9003      	str	r0, [sp, #12]
    3bd6:	a803      	add	r0, sp, #12
    3bd8:	f00b f933 	bl	ee42 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    3bdc:	2800      	cmp	r0, #0
    3bde:	d003      	beq.n	3be8 <mpsl_fem_device_config_254_apply_set+0x68>
    3be0:	21a7      	movs	r1, #167	; 0xa7
    3be2:	2003      	movs	r0, #3
    3be4:	f000 f8ba 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3be8:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    3bea:	0000      	.short	0x0000
    3bec:	2000005c 	.word	0x2000005c
    3bf0:	00003e34 	.word	0x00003e34

00003bf4 <sdc_build_revision_get>:
    3bf4:	b510      	push	{r4, lr}
    3bf6:	b128      	cbz	r0, 3c04 <sdc_build_revision_get+0x10>
    3bf8:	2214      	movs	r2, #20
    3bfa:	4904      	ldr	r1, [pc, #16]	; (3c0c <sdc_build_revision_get+0x18>)
    3bfc:	f008 fab1 	bl	c162 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3c00:	2000      	movs	r0, #0
    3c02:	bd10      	pop	{r4, pc}
    3c04:	f06f 0015 	mvn.w	r0, #21
    3c08:	bd10      	pop	{r4, pc}
    3c0a:	0000      	.short	0x0000
    3c0c:	00003e66 	.word	0x00003e66

00003c10 <sdc_cfg_set>:
    3c10:	b510      	push	{r4, lr}
    3c12:	f06f 042c 	mvn.w	r4, #44	; 0x2c
    3c16:	bb40      	cbnz	r0, 3c6a <sdc_cfg_set+0x5a>
    3c18:	4b15      	ldr	r3, [pc, #84]	; (3c70 <sdc_cfg_set+0x60>)
    3c1a:	7898      	ldrb	r0, [r3, #2]
    3c1c:	b108      	cbz	r0, 3c22 <sdc_cfg_set+0x12>
    3c1e:	11a0      	asrs	r0, r4, #6
    3c20:	bd10      	pop	{r4, pc}
    3c22:	b1c9      	cbz	r1, 3c58 <sdc_cfg_set+0x48>
    3c24:	b132      	cbz	r2, 3c34 <sdc_cfg_set+0x24>
    3c26:	2906      	cmp	r1, #6
    3c28:	d21f      	bcs.n	3c6a <sdc_cfg_set+0x5a>
    3c2a:	e8df f001 	tbb	[pc, r1]
    3c2e:	061e      	.short	0x061e
    3c30:	13100c09 	.word	0x13100c09
    3c34:	f06f 0015 	mvn.w	r0, #21
    3c38:	bd10      	pop	{r4, pc}
    3c3a:	7810      	ldrb	r0, [r2, #0]
    3c3c:	7218      	strb	r0, [r3, #8]
    3c3e:	e00b      	b.n	3c58 <sdc_cfg_set+0x48>
    3c40:	7810      	ldrb	r0, [r2, #0]
    3c42:	7258      	strb	r0, [r3, #9]
    3c44:	e008      	b.n	3c58 <sdc_cfg_set+0x48>
    3c46:	6810      	ldr	r0, [r2, #0]
    3c48:	f8c3 000b 	str.w	r0, [r3, #11]
    3c4c:	e004      	b.n	3c58 <sdc_cfg_set+0x48>
    3c4e:	6810      	ldr	r0, [r2, #0]
    3c50:	6118      	str	r0, [r3, #16]
    3c52:	e001      	b.n	3c58 <sdc_cfg_set+0x48>
    3c54:	7810      	ldrb	r0, [r2, #0]
    3c56:	7298      	strb	r0, [r3, #10]
    3c58:	4905      	ldr	r1, [pc, #20]	; (3c70 <sdc_cfg_set+0x60>)
    3c5a:	2201      	movs	r2, #1
    3c5c:	3108      	adds	r1, #8
    3c5e:	2000      	movs	r0, #0
    3c60:	f008 fb76 	bl	c350 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfa>
    3c64:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    3c68:	dbe6      	blt.n	3c38 <sdc_cfg_set+0x28>
    3c6a:	4620      	mov	r0, r4
    3c6c:	bd10      	pop	{r4, pc}
    3c6e:	0000      	.short	0x0000
    3c70:	20000054 	.word	0x20000054

00003c74 <sdc_enable>:
    3c74:	b538      	push	{r3, r4, r5, lr}
    3c76:	460d      	mov	r5, r1
    3c78:	0004      	movs	r4, r0
    3c7a:	d020      	beq.n	3cbe <sdc_enable+0x4a>
    3c7c:	b1fd      	cbz	r5, 3cbe <sdc_enable+0x4a>
    3c7e:	f000 f927 	bl	3ed0 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    3c82:	b1f8      	cbz	r0, 3cc4 <sdc_enable+0x50>
    3c84:	4620      	mov	r0, r4
    3c86:	f7ff fe9b 	bl	39c0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    3c8a:	4c10      	ldr	r4, [pc, #64]	; (3ccc <sdc_enable+0x58>)
    3c8c:	2200      	movs	r2, #0
    3c8e:	f104 0108 	add.w	r1, r4, #8
    3c92:	7020      	strb	r0, [r4, #0]
    3c94:	4628      	mov	r0, r5
    3c96:	f008 fb5b 	bl	c350 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfa>
    3c9a:	f00b fcab 	bl	f5f4 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    3c9e:	2100      	movs	r1, #0
    3ca0:	7820      	ldrb	r0, [r4, #0]
    3ca2:	f006 fcc9 	bl	a638 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    3ca6:	7860      	ldrb	r0, [r4, #1]
    3ca8:	f88d 0000 	strb.w	r0, [sp]
    3cac:	4668      	mov	r0, sp
    3cae:	f00b f8bc 	bl	ee2a <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY>
    3cb2:	f7ff ff6b 	bl	3b8c <mpsl_fem_device_config_254_apply_set+0xc>
    3cb6:	2001      	movs	r0, #1
    3cb8:	70a0      	strb	r0, [r4, #2]
    3cba:	2000      	movs	r0, #0
    3cbc:	bd38      	pop	{r3, r4, r5, pc}
    3cbe:	f06f 0015 	mvn.w	r0, #21
    3cc2:	bd38      	pop	{r3, r4, r5, pc}
    3cc4:	f04f 30ff 	mov.w	r0, #4294967295
    3cc8:	bd38      	pop	{r3, r4, r5, pc}
    3cca:	0000      	.short	0x0000
    3ccc:	20000054 	.word	0x20000054

00003cd0 <sdc_init>:
    3cd0:	b570      	push	{r4, r5, r6, lr}
    3cd2:	0004      	movs	r4, r0
    3cd4:	d00b      	beq.n	3cee <sdc_init+0x1e>
    3cd6:	f7ff fe19 	bl	390c <mpsl_is_initialized>
    3cda:	f04f 35ff 	mov.w	r5, #4294967295
    3cde:	b120      	cbz	r0, 3cea <sdc_init+0x1a>
    3ce0:	f7ff fcd8 	bl	3694 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    3ce4:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    3ce8:	d904      	bls.n	3cf4 <sdc_init+0x24>
    3cea:	4628      	mov	r0, r5
    3cec:	bd70      	pop	{r4, r5, r6, pc}
    3cee:	f06f 0015 	mvn.w	r0, #21
    3cf2:	bd70      	pop	{r4, r5, r6, pc}
    3cf4:	2200      	movs	r2, #0
    3cf6:	4b14      	ldr	r3, [pc, #80]	; (3d48 <sdc_init+0x78>)
    3cf8:	4611      	mov	r1, r2
    3cfa:	bf00      	nop
    3cfc:	f833 5021 	ldrh.w	r5, [r3, r1, lsl #2]
    3d00:	4285      	cmp	r5, r0
    3d02:	d303      	bcc.n	3d0c <sdc_init+0x3c>
    3d04:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    3d08:	7882      	ldrb	r2, [r0, #2]
    3d0a:	e003      	b.n	3d14 <sdc_init+0x44>
    3d0c:	1c49      	adds	r1, r1, #1
    3d0e:	b2c9      	uxtb	r1, r1
    3d10:	290c      	cmp	r1, #12
    3d12:	d3f3      	bcc.n	3cfc <sdc_init+0x2c>
    3d14:	480d      	ldr	r0, [pc, #52]	; (3d4c <sdc_init+0x7c>)
    3d16:	7042      	strb	r2, [r0, #1]
    3d18:	6044      	str	r4, [r0, #4]
    3d1a:	480d      	ldr	r0, [pc, #52]	; (3d50 <sdc_init+0x80>)
    3d1c:	f000 f9ea 	bl	40f4 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    3d20:	f3ef 8410 	mrs	r4, PRIMASK
    3d24:	b672      	cpsid	i
    3d26:	480b      	ldr	r0, [pc, #44]	; (3d54 <sdc_init+0x84>)
    3d28:	f06f 010c 	mvn.w	r1, #12
    3d2c:	f000 fd18 	bl	4760 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    3d30:	4809      	ldr	r0, [pc, #36]	; (3d58 <sdc_init+0x88>)
    3d32:	f000 fdd9 	bl	48e8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    3d36:	b118      	cbz	r0, 3d40 <sdc_init+0x70>
    3d38:	21b5      	movs	r1, #181	; 0xb5
    3d3a:	2003      	movs	r0, #3
    3d3c:	f000 f80e 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3d40:	b904      	cbnz	r4, 3d44 <sdc_init+0x74>
    3d42:	b662      	cpsie	i
    3d44:	2000      	movs	r0, #0
    3d46:	bd70      	pop	{r4, r5, r6, pc}
    3d48:	00003e36 	.word	0x00003e36
    3d4c:	20000054 	.word	0x20000054
    3d50:	00003b8d 	.word	0x00003b8d
    3d54:	4000c000 	.word	0x4000c000
    3d58:	00003efd 	.word	0x00003efd

00003d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    3d5c:	b50e      	push	{r1, r2, r3, lr}
    3d5e:	b672      	cpsid	i
    3d60:	4a15      	ldr	r2, [pc, #84]	; (3db8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    3d62:	6855      	ldr	r5, [r2, #4]
    3d64:	b1d5      	cbz	r5, 3d9c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    3d66:	2200      	movs	r2, #0
    3d68:	4603      	mov	r3, r0
    3d6a:	466e      	mov	r6, sp
    3d6c:	240a      	movs	r4, #10
    3d6e:	e003      	b.n	3d78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    3d70:	fbb0 f0f4 	udiv	r0, r0, r4
    3d74:	1c52      	adds	r2, r2, #1
    3d76:	b2d2      	uxtb	r2, r2
    3d78:	2800      	cmp	r0, #0
    3d7a:	d1f9      	bne.n	3d70 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    3d7c:	54b0      	strb	r0, [r6, r2]
    3d7e:	e009      	b.n	3d94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    3d80:	fbb3 f0f4 	udiv	r0, r3, r4
    3d84:	fb04 3010 	mls	r0, r4, r0, r3
    3d88:	fbb3 f3f4 	udiv	r3, r3, r4
    3d8c:	1e52      	subs	r2, r2, #1
    3d8e:	b2d2      	uxtb	r2, r2
    3d90:	3030      	adds	r0, #48	; 0x30
    3d92:	54b0      	strb	r0, [r6, r2]
    3d94:	2a00      	cmp	r2, #0
    3d96:	d1f3      	bne.n	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    3d98:	4630      	mov	r0, r6
    3d9a:	47a8      	blx	r5
    3d9c:	f3bf 8f4f 	dsb	sy
    3da0:	4806      	ldr	r0, [pc, #24]	; (3dbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    3da2:	6801      	ldr	r1, [r0, #0]
    3da4:	4a06      	ldr	r2, [pc, #24]	; (3dc0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    3da6:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    3daa:	4311      	orrs	r1, r2
    3dac:	6001      	str	r1, [r0, #0]
    3dae:	f3bf 8f4f 	dsb	sy
    3db2:	bf00      	nop
    3db4:	e7fd      	b.n	3db2 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    3db6:	0000      	.short	0x0000
    3db8:	20000054 	.word	0x20000054
    3dbc:	e000ed0c 	.word	0xe000ed0c
    3dc0:	05fa0004 	.word	0x05fa0004

00003dc4 <sdc_support_adv>:
    3dc4:	4805      	ldr	r0, [pc, #20]	; (3ddc <sdc_support_adv+0x18>)
    3dc6:	b510      	push	{r4, lr}
    3dc8:	7880      	ldrb	r0, [r0, #2]
    3dca:	b110      	cbz	r0, 3dd2 <sdc_support_adv+0xe>
    3dcc:	f04f 30ff 	mov.w	r0, #4294967295
    3dd0:	bd10      	pop	{r4, pc}
    3dd2:	f006 fc51 	bl	a678 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    3dd6:	2000      	movs	r0, #0
    3dd8:	bd10      	pop	{r4, pc}
    3dda:	0000      	.short	0x0000
    3ddc:	20000054 	.word	0x20000054

00003de0 <sdc_support_dle>:
    3de0:	4805      	ldr	r0, [pc, #20]	; (3df8 <sdc_support_dle+0x18>)
    3de2:	b510      	push	{r4, lr}
    3de4:	7880      	ldrb	r0, [r0, #2]
    3de6:	b110      	cbz	r0, 3dee <sdc_support_dle+0xe>
    3de8:	f04f 30ff 	mov.w	r0, #4294967295
    3dec:	bd10      	pop	{r4, pc}
    3dee:	f006 f9c1 	bl	a174 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>
    3df2:	2000      	movs	r0, #0
    3df4:	bd10      	pop	{r4, pc}
    3df6:	0000      	.short	0x0000
    3df8:	20000054 	.word	0x20000054

00003dfc <sdc_support_le_2m_phy>:
    3dfc:	4805      	ldr	r0, [pc, #20]	; (3e14 <sdc_support_le_2m_phy+0x18>)
    3dfe:	b510      	push	{r4, lr}
    3e00:	7880      	ldrb	r0, [r0, #2]
    3e02:	b110      	cbz	r0, 3e0a <sdc_support_le_2m_phy+0xe>
    3e04:	f04f 30ff 	mov.w	r0, #4294967295
    3e08:	bd10      	pop	{r4, pc}
    3e0a:	f00b f968 	bl	f0de <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    3e0e:	2000      	movs	r0, #0
    3e10:	bd10      	pop	{r4, pc}
    3e12:	0000      	.short	0x0000
    3e14:	20000054 	.word	0x20000054

00003e18 <sdc_support_slave>:
    3e18:	4805      	ldr	r0, [pc, #20]	; (3e30 <sdc_support_slave+0x18>)
    3e1a:	b510      	push	{r4, lr}
    3e1c:	7880      	ldrb	r0, [r0, #2]
    3e1e:	b110      	cbz	r0, 3e26 <sdc_support_slave+0xe>
    3e20:	f04f 30ff 	mov.w	r0, #4294967295
    3e24:	bd10      	pop	{r4, pc}
    3e26:	f006 fc39 	bl	a69c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    3e2a:	2000      	movs	r0, #0
    3e2c:	bd10      	pop	{r4, pc}
    3e2e:	0000      	.short	0x0000
    3e30:	20000054 	.word	0x20000054
    3e34:	00010001 	.word	0x00010001
    3e38:	0002000b 	.word	0x0002000b
    3e3c:	0005000a 	.word	0x0005000a
    3e40:	000a0009 	.word	0x000a0009
    3e44:	00140008 	.word	0x00140008
    3e48:	001e0007 	.word	0x001e0007
    3e4c:	00320006 	.word	0x00320006
    3e50:	004b0005 	.word	0x004b0005
    3e54:	00640004 	.word	0x00640004
    3e58:	00960003 	.word	0x00960003
    3e5c:	00fa0002 	.word	0x00fa0002
    3e60:	01f40001 	.word	0x01f40001
    3e64:	03ef0000 	.word	0x03ef0000
    3e68:	96799c09 	.word	0x96799c09
    3e6c:	08cc7db6 	.word	0x08cc7db6
    3e70:	0fcfb29d 	.word	0x0fcfb29d
    3e74:	ce973cda 	.word	0xce973cda
    3e78:	0000780d 	.word	0x0000780d

00003e7c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    3e7c:	4a05      	ldr	r2, [pc, #20]	; (3e94 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    3e7e:	b510      	push	{r4, lr}
    3e80:	6852      	ldr	r2, [r2, #4]
    3e82:	b112      	cbz	r2, 3e8a <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    3e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3e88:	4710      	bx	r2
    3e8a:	2183      	movs	r1, #131	; 0x83
    3e8c:	2004      	movs	r0, #4
    3e8e:	f7ff ff65 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e92:	0000      	.short	0x0000
    3e94:	20000db8 	.word	0x20000db8

00003e98 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>:
    3e98:	4a05      	ldr	r2, [pc, #20]	; (3eb0 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0x18>)
    3e9a:	b510      	push	{r4, lr}
    3e9c:	6812      	ldr	r2, [r2, #0]
    3e9e:	b112      	cbz	r2, 3ea6 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0xe>
    3ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3ea4:	4710      	bx	r2
    3ea6:	217d      	movs	r1, #125	; 0x7d
    3ea8:	2004      	movs	r0, #4
    3eaa:	f7ff ff57 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3eae:	0000      	.short	0x0000
    3eb0:	20000db8 	.word	0x20000db8

00003eb4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    3eb4:	4a05      	ldr	r2, [pc, #20]	; (3ecc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    3eb6:	b510      	push	{r4, lr}
    3eb8:	6892      	ldr	r2, [r2, #8]
    3eba:	b112      	cbz	r2, 3ec2 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    3ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3ec0:	4710      	bx	r2
    3ec2:	2189      	movs	r1, #137	; 0x89
    3ec4:	2004      	movs	r0, #4
    3ec6:	f7ff ff49 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3eca:	0000      	.short	0x0000
    3ecc:	20000db8 	.word	0x20000db8

00003ed0 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    3ed0:	4805      	ldr	r0, [pc, #20]	; (3ee8 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    3ed2:	6801      	ldr	r1, [r0, #0]
    3ed4:	b129      	cbz	r1, 3ee2 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3ed6:	6841      	ldr	r1, [r0, #4]
    3ed8:	b119      	cbz	r1, 3ee2 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3eda:	6880      	ldr	r0, [r0, #8]
    3edc:	b108      	cbz	r0, 3ee2 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3ede:	2001      	movs	r0, #1
    3ee0:	4770      	bx	lr
    3ee2:	2000      	movs	r0, #0
    3ee4:	4770      	bx	lr
    3ee6:	0000      	.short	0x0000
    3ee8:	20000db8 	.word	0x20000db8

00003eec <sdc_rand_source_register>:
    3eec:	4902      	ldr	r1, [pc, #8]	; (3ef8 <sdc_rand_source_register+0xc>)
    3eee:	c80d      	ldmia	r0, {r0, r2, r3}
    3ef0:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    3ef4:	2000      	movs	r0, #0
    3ef6:	4770      	bx	lr
    3ef8:	20000db8 	.word	0x20000db8

00003efc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    3efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3efe:	4c12      	ldr	r4, [pc, #72]	; (3f48 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    3f00:	2600      	movs	r6, #0
    3f02:	6825      	ldr	r5, [r4, #0]
    3f04:	e011      	b.n	3f2a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    3f06:	9800      	ldr	r0, [sp, #0]
    3f08:	2802      	cmp	r0, #2
    3f0a:	d002      	beq.n	3f12 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    3f0c:	2803      	cmp	r0, #3
    3f0e:	d10c      	bne.n	3f2a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    3f10:	e006      	b.n	3f20 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    3f12:	6820      	ldr	r0, [r4, #0]
    3f14:	b110      	cbz	r0, 3f1c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    3f16:	2000      	movs	r0, #0
    3f18:	6026      	str	r6, [r4, #0]
    3f1a:	e005      	b.n	3f28 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    3f1c:	2128      	movs	r1, #40	; 0x28
    3f1e:	e00c      	b.n	3f3a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    3f20:	6820      	ldr	r0, [r4, #0]
    3f22:	b168      	cbz	r0, 3f40 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    3f24:	2001      	movs	r0, #1
    3f26:	6026      	str	r6, [r4, #0]
    3f28:	47a8      	blx	r5
    3f2a:	4668      	mov	r0, sp
    3f2c:	f000 fcae 	bl	488c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    3f30:	2800      	cmp	r0, #0
    3f32:	d0e8      	beq.n	3f06 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    3f34:	2805      	cmp	r0, #5
    3f36:	d005      	beq.n	3f44 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    3f38:	2135      	movs	r1, #53	; 0x35
    3f3a:	2004      	movs	r0, #4
    3f3c:	f7ff ff0e 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f40:	212d      	movs	r1, #45	; 0x2d
    3f42:	e7fa      	b.n	3f3a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    3f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f46:	0000      	.short	0x0000
    3f48:	20000068 	.word	0x20000068
    3f4c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    3f4e:	4d21      	ldr	r5, [pc, #132]	; (3fd4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    3f50:	4606      	mov	r6, r0
    3f52:	7828      	ldrb	r0, [r5, #0]
    3f54:	b148      	cbz	r0, 3f6a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6e>
    3f56:	78ac      	ldrb	r4, [r5, #2]
    3f58:	1c69      	adds	r1, r5, #1
    3f5a:	1ca4      	adds	r4, r4, #2
    3f5c:	4622      	mov	r2, r4
    3f5e:	4630      	mov	r0, r6
    3f60:	f008 f8ff 	bl	c162 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3f64:	2000      	movs	r0, #0
    3f66:	7028      	strb	r0, [r5, #0]
    3f68:	e024      	b.n	3fb4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb8>
    3f6a:	481a      	ldr	r0, [pc, #104]	; (3fd4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    3f6c:	3844      	subs	r0, #68	; 0x44
    3f6e:	f006 f959 	bl	a224 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    3f72:	2800      	cmp	r0, #0
    3f74:	d01f      	beq.n	3fb6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xba>
    3f76:	4c17      	ldr	r4, [pc, #92]	; (3fd4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    3f78:	3c44      	subs	r4, #68	; 0x44
    3f7a:	7820      	ldrb	r0, [r4, #0]
    3f7c:	2811      	cmp	r0, #17
    3f7e:	d104      	bne.n	3f8a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x8e>
    3f80:	210a      	movs	r1, #10
    3f82:	203e      	movs	r0, #62	; 0x3e
    3f84:	f008 fa80 	bl	c488 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    3f88:	b118      	cbz	r0, 3f92 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x96>
    3f8a:	7820      	ldrb	r0, [r4, #0]
    3f8c:	2808      	cmp	r0, #8
    3f8e:	d006      	beq.n	3f9e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa2>
    3f90:	e00a      	b.n	3fa8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xac>
    3f92:	4910      	ldr	r1, [pc, #64]	; (3fd4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    3f94:	4630      	mov	r0, r6
    3f96:	3944      	subs	r1, #68	; 0x44
    3f98:	f008 fc7f 	bl	c89a <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    3f9c:	e009      	b.n	3fb2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb6>
    3f9e:	2105      	movs	r1, #5
    3fa0:	203e      	movs	r0, #62	; 0x3e
    3fa2:	f008 fa71 	bl	c488 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    3fa6:	b138      	cbz	r0, 3fb8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xbc>
    3fa8:	490a      	ldr	r1, [pc, #40]	; (3fd4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    3faa:	4630      	mov	r0, r6
    3fac:	3944      	subs	r1, #68	; 0x44
    3fae:	f008 fac9 	bl	c544 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    3fb2:	4604      	mov	r4, r0
    3fb4:	4620      	mov	r0, r4
    3fb6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    3fb8:	88a0      	ldrh	r0, [r4, #4]
    3fba:	f8ad 0000 	strh.w	r0, [sp]
    3fbe:	a901      	add	r1, sp, #4
    3fc0:	4668      	mov	r0, sp
    3fc2:	f008 fd84 	bl	cace <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    3fc6:	b118      	cbz	r0, 3fd0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>
    3fc8:	2197      	movs	r1, #151	; 0x97
    3fca:	2008      	movs	r0, #8
    3fcc:	f7ff fec6 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3fd0:	2400      	movs	r4, #0
    3fd2:	e7ef      	b.n	3fb4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb8>
    3fd4:	20000e9c 	.word	0x20000e9c
    3fd8:	b570      	push	{r4, r5, r6, lr}
    3fda:	780a      	ldrb	r2, [r1, #0]
    3fdc:	7082      	strb	r2, [r0, #2]
    3fde:	b33a      	cbz	r2, 4030 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x134>
    3fe0:	2a01      	cmp	r2, #1
    3fe2:	d825      	bhi.n	4030 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x134>
    3fe4:	2313      	movs	r3, #19
    3fe6:	7003      	strb	r3, [r0, #0]
    3fe8:	2300      	movs	r3, #0
    3fea:	e00a      	b.n	4002 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x106>
    3fec:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    3ff0:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    3ff4:	78a6      	ldrb	r6, [r4, #2]
    3ff6:	70ee      	strb	r6, [r5, #3]
    3ff8:	8864      	ldrh	r4, [r4, #2]
    3ffa:	0a24      	lsrs	r4, r4, #8
    3ffc:	1c5b      	adds	r3, r3, #1
    3ffe:	712c      	strb	r4, [r5, #4]
    4000:	b2db      	uxtb	r3, r3
    4002:	4293      	cmp	r3, r2
    4004:	d3f2      	bcc.n	3fec <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xf0>
    4006:	2300      	movs	r3, #0
    4008:	e00b      	b.n	4022 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x126>
    400a:	bf00      	nop
    400c:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    4010:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    4014:	792e      	ldrb	r6, [r5, #4]
    4016:	7166      	strb	r6, [r4, #5]
    4018:	88ad      	ldrh	r5, [r5, #4]
    401a:	0a2d      	lsrs	r5, r5, #8
    401c:	1c5b      	adds	r3, r3, #1
    401e:	71a5      	strb	r5, [r4, #6]
    4020:	b2db      	uxtb	r3, r3
    4022:	4293      	cmp	r3, r2
    4024:	d3f2      	bcc.n	400c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x110>
    4026:	2101      	movs	r1, #1
    4028:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    402c:	b2c0      	uxtb	r0, r0
    402e:	bd70      	pop	{r4, r5, r6, pc}
    4030:	2000      	movs	r0, #0
    4032:	bd70      	pop	{r4, r5, r6, pc}

00004034 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    4034:	2101      	movs	r1, #1
    4036:	4a0c      	ldr	r2, [pc, #48]	; (4068 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    4038:	2840      	cmp	r0, #64	; 0x40
    403a:	d20c      	bcs.n	4056 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    403c:	2820      	cmp	r0, #32
    403e:	d803      	bhi.n	4048 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    4040:	1e40      	subs	r0, r0, #1
    4042:	4081      	lsls	r1, r0
    4044:	6810      	ldr	r0, [r2, #0]
    4046:	e002      	b.n	404e <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    4048:	3821      	subs	r0, #33	; 0x21
    404a:	4081      	lsls	r1, r0
    404c:	6850      	ldr	r0, [r2, #4]
    404e:	4201      	tst	r1, r0
    4050:	d107      	bne.n	4062 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    4052:	2000      	movs	r0, #0
    4054:	4770      	bx	lr
    4056:	28ff      	cmp	r0, #255	; 0xff
    4058:	d003      	beq.n	4062 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    405a:	3840      	subs	r0, #64	; 0x40
    405c:	4081      	lsls	r1, r0
    405e:	6890      	ldr	r0, [r2, #8]
    4060:	e7f5      	b.n	404e <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    4062:	2001      	movs	r0, #1
    4064:	4770      	bx	lr
    4066:	0000      	.short	0x0000
    4068:	2000006c 	.word	0x2000006c

0000406c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    406c:	2101      	movs	r1, #1
    406e:	1e40      	subs	r0, r0, #1
    4070:	4081      	lsls	r1, r0
    4072:	4804      	ldr	r0, [pc, #16]	; (4084 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    4074:	68c0      	ldr	r0, [r0, #12]
    4076:	4201      	tst	r1, r0
    4078:	d001      	beq.n	407e <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    407a:	2001      	movs	r0, #1
    407c:	4770      	bx	lr
    407e:	2000      	movs	r0, #0
    4080:	4770      	bx	lr
    4082:	0000      	.short	0x0000
    4084:	2000006c 	.word	0x2000006c

00004088 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    4088:	4901      	ldr	r1, [pc, #4]	; (4090 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    408a:	6800      	ldr	r0, [r0, #0]
    408c:	60c8      	str	r0, [r1, #12]
    408e:	4770      	bx	lr
    4090:	2000006c 	.word	0x2000006c

00004094 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    4094:	4904      	ldr	r1, [pc, #16]	; (40a8 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    4096:	6802      	ldr	r2, [r0, #0]
    4098:	6840      	ldr	r0, [r0, #4]
    409a:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    409e:	600a      	str	r2, [r1, #0]
    40a0:	4a02      	ldr	r2, [pc, #8]	; (40ac <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    40a2:	4310      	orrs	r0, r2
    40a4:	6048      	str	r0, [r1, #4]
    40a6:	4770      	bx	lr
    40a8:	2000006c 	.word	0x2000006c
    40ac:	024007f8 	.word	0x024007f8

000040b0 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    40b0:	4901      	ldr	r1, [pc, #4]	; (40b8 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0x8>)
    40b2:	6800      	ldr	r0, [r0, #0]
    40b4:	6088      	str	r0, [r1, #8]
    40b6:	4770      	bx	lr
    40b8:	2000006c 	.word	0x2000006c

000040bc <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    40bc:	4805      	ldr	r0, [pc, #20]	; (40d4 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    40be:	f04f 31ff 	mov.w	r1, #4294967295
    40c2:	6001      	str	r1, [r0, #0]
    40c4:	0cc9      	lsrs	r1, r1, #19
    40c6:	6041      	str	r1, [r0, #4]
    40c8:	2100      	movs	r1, #0
    40ca:	6081      	str	r1, [r0, #8]
    40cc:	211f      	movs	r1, #31
    40ce:	60c1      	str	r1, [r0, #12]
    40d0:	4770      	bx	lr
    40d2:	0000      	.short	0x0000
    40d4:	2000006c 	.word	0x2000006c

000040d8 <sdc_hci_cmd_cb_reset>:
    40d8:	b510      	push	{r4, lr}
    40da:	f7ff ffef 	bl	40bc <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    40de:	f00a ff75 	bl	efcc <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    40e2:	4604      	mov	r4, r0
    40e4:	4802      	ldr	r0, [pc, #8]	; (40f0 <sdc_hci_cmd_cb_reset+0x18>)
    40e6:	6800      	ldr	r0, [r0, #0]
    40e8:	b100      	cbz	r0, 40ec <sdc_hci_cmd_cb_reset+0x14>
    40ea:	4780      	blx	r0
    40ec:	4620      	mov	r0, r4
    40ee:	bd10      	pop	{r4, pc}
    40f0:	2000007c 	.word	0x2000007c

000040f4 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    40f4:	4901      	ldr	r1, [pc, #4]	; (40fc <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    40f6:	6008      	str	r0, [r1, #0]
    40f8:	4770      	bx	lr
    40fa:	0000      	.short	0x0000
    40fc:	2000007c 	.word	0x2000007c

00004100 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    4100:	2102      	movs	r1, #2
    4102:	8001      	strh	r1, [r0, #0]
    4104:	8041      	strh	r1, [r0, #2]
    4106:	2100      	movs	r1, #0
    4108:	7101      	strb	r1, [r0, #4]
    410a:	21ef      	movs	r1, #239	; 0xef
    410c:	7141      	strb	r1, [r0, #5]
    410e:	f640 1103 	movw	r1, #2307	; 0x903
    4112:	80c1      	strh	r1, [r0, #6]
    4114:	4901      	ldr	r1, [pc, #4]	; (411c <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    4116:	6081      	str	r1, [r0, #8]
    4118:	2000      	movs	r0, #0
    411a:	4770      	bx	lr
    411c:	b696799c 	.word	0xb696799c

00004120 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    4120:	b510      	push	{r4, lr}
    4122:	2802      	cmp	r0, #2
    4124:	d304      	bcc.n	4130 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    4126:	f240 116b 	movw	r1, #363	; 0x16b
    412a:	2017      	movs	r0, #23
    412c:	f7ff fe16 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4130:	4901      	ldr	r1, [pc, #4]	; (4138 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    4132:	5c08      	ldrb	r0, [r1, r0]
    4134:	bd10      	pop	{r4, pc}
    4136:	0000      	.short	0x0000
    4138:	20000dc4 	.word	0x20000dc4

0000413c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    413c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    413e:	4605      	mov	r5, r0
    4140:	9000      	str	r0, [sp, #0]
    4142:	4291      	cmp	r1, r2
    4144:	d201      	bcs.n	414a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xe>
    4146:	4614      	mov	r4, r2
    4148:	e000      	b.n	414c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x10>
    414a:	460c      	mov	r4, r1
    414c:	b155      	cbz	r5, 4164 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
    414e:	2700      	movs	r7, #0
    4150:	1ce8      	adds	r0, r5, #3
    4152:	f020 0003 	bic.w	r0, r0, #3
    4156:	42a8      	cmp	r0, r5
    4158:	d006      	beq.n	4168 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2c>
    415a:	f240 113f 	movw	r1, #319	; 0x13f
    415e:	2017      	movs	r0, #23
    4160:	f7ff fdfc 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4164:	2701      	movs	r7, #1
    4166:	e7f3      	b.n	4150 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x14>
    4168:	4e12      	ldr	r6, [pc, #72]	; (41b4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x78>)
    416a:	4668      	mov	r0, sp
    416c:	7031      	strb	r1, [r6, #0]
    416e:	7072      	strb	r2, [r6, #1]
    4170:	4639      	mov	r1, r7
    4172:	f000 f8ed 	bl	4350 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf8>
    4176:	2000      	movs	r0, #0
    4178:	4603      	mov	r3, r0
    417a:	9900      	ldr	r1, [sp, #0]
    417c:	1cc9      	adds	r1, r1, #3
    417e:	f021 0103 	bic.w	r1, r1, #3
    4182:	9100      	str	r1, [sp, #0]
    4184:	b967      	cbnz	r7, 41a0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    4186:	eb06 0280 	add.w	r2, r6, r0, lsl #2
    418a:	60d1      	str	r1, [r2, #12]
    418c:	2100      	movs	r1, #0
    418e:	e005      	b.n	419c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x60>
    4190:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    4194:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
    4198:	1c49      	adds	r1, r1, #1
    419a:	b2c9      	uxtb	r1, r1
    419c:	42a1      	cmp	r1, r4
    419e:	d3f7      	bcc.n	4190 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x54>
    41a0:	9900      	ldr	r1, [sp, #0]
    41a2:	1c40      	adds	r0, r0, #1
    41a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    41a8:	b2c0      	uxtb	r0, r0
    41aa:	9100      	str	r1, [sp, #0]
    41ac:	2802      	cmp	r0, #2
    41ae:	d3e4      	bcc.n	417a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x3e>
    41b0:	1b48      	subs	r0, r1, r5
    41b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    41b4:	20000dc4 	.word	0x20000dc4

000041b8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    41b8:	b570      	push	{r4, r5, r6, lr}
    41ba:	4604      	mov	r4, r0
    41bc:	f009 f843 	bl	d246 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    41c0:	b108      	cbz	r0, 41c6 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    41c2:	2010      	movs	r0, #16
    41c4:	bd70      	pop	{r4, r5, r6, pc}
    41c6:	7825      	ldrb	r5, [r4, #0]
    41c8:	f000 f8fe 	bl	43c8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    41cc:	4602      	mov	r2, r0
    41ce:	480c      	ldr	r0, [pc, #48]	; (4200 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    41d0:	8861      	ldrh	r1, [r4, #2]
    41d2:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    41d6:	e00e      	b.n	41f6 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    41d8:	68c3      	ldr	r3, [r0, #12]
    41da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    41de:	b143      	cbz	r3, 41f2 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    41e0:	1c4a      	adds	r2, r1, #1
    41e2:	8062      	strh	r2, [r4, #2]
    41e4:	80a1      	strh	r1, [r4, #4]
    41e6:	68c0      	ldr	r0, [r0, #12]
    41e8:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    41ec:	60a0      	str	r0, [r4, #8]
    41ee:	2000      	movs	r0, #0
    41f0:	bd70      	pop	{r4, r5, r6, pc}
    41f2:	1c49      	adds	r1, r1, #1
    41f4:	b289      	uxth	r1, r1
    41f6:	4291      	cmp	r1, r2
    41f8:	d3ee      	bcc.n	41d8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    41fa:	8061      	strh	r1, [r4, #2]
    41fc:	2005      	movs	r0, #5
    41fe:	bd70      	pop	{r4, r5, r6, pc}
    4200:	20000dc4 	.word	0x20000dc4

00004204 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    4204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4208:	b121      	cbz	r1, 4214 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    420a:	2901      	cmp	r1, #1
    420c:	d002      	beq.n	4214 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    420e:	2000      	movs	r0, #0
    4210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4214:	4c0f      	ldr	r4, [pc, #60]	; (4254 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>)
    4216:	2700      	movs	r7, #0
    4218:	463b      	mov	r3, r7
    421a:	f64f 76ff 	movw	r6, #65535	; 0xffff
    421e:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    4222:	f814 c001 	ldrb.w	ip, [r4, r1]
    4226:	e00a      	b.n	423e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3a>
    4228:	19dc      	adds	r4, r3, r7
    422a:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    422e:	b2a4      	uxth	r4, r4
    4230:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
    4234:	f1be 0f00 	cmp.w	lr, #0
    4238:	d004      	beq.n	4244 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x40>
    423a:	1c5b      	adds	r3, r3, #1
    423c:	b29b      	uxth	r3, r3
    423e:	459c      	cmp	ip, r3
    4240:	d8f2      	bhi.n	4228 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x24>
    4242:	4634      	mov	r4, r6
    4244:	8004      	strh	r4, [r0, #0]
    4246:	4620      	mov	r0, r4
    4248:	42b4      	cmp	r4, r6
    424a:	d0e0      	beq.n	420e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xa>
    424c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4250:	f000 b834 	b.w	42bc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    4254:	20000dc4 	.word	0x20000dc4

00004258 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    4258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    425c:	4606      	mov	r6, r0
    425e:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    4262:	460c      	mov	r4, r1
    4264:	f243 0702 	movw	r7, #12290	; 0x3002
    4268:	38ff      	subs	r0, #255	; 0xff
    426a:	d020      	beq.n	42ae <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    426c:	2c02      	cmp	r4, #2
    426e:	d302      	bcc.n	4276 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    4270:	2007      	movs	r0, #7
    4272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4276:	4630      	mov	r0, r6
    4278:	f000 f85a 	bl	4330 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>
    427c:	0005      	movs	r5, r0
    427e:	d016      	beq.n	42ae <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4280:	480c      	ldr	r0, [pc, #48]	; (42b4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    4282:	4629      	mov	r1, r5
    4284:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    4288:	4630      	mov	r0, r6
    428a:	4790      	blx	r2
    428c:	480a      	ldr	r0, [pc, #40]	; (42b8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    428e:	2100      	movs	r1, #0
    4290:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    4294:	68f8      	ldr	r0, [r7, #12]
    4296:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
    429a:	4620      	mov	r0, r4
    429c:	f000 f88a 	bl	43b4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    42a0:	4602      	mov	r2, r0
    42a2:	4629      	mov	r1, r5
    42a4:	6878      	ldr	r0, [r7, #4]
    42a6:	f008 ff45 	bl	d134 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    42aa:	2000      	movs	r0, #0
    42ac:	e7e1      	b.n	4272 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    42ae:	4638      	mov	r0, r7
    42b0:	e7df      	b.n	4272 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    42b2:	0000      	.short	0x0000
    42b4:	000043e8 	.word	0x000043e8
    42b8:	20000dc4 	.word	0x20000dc4
    42bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    42c0:	4690      	mov	r8, r2
    42c2:	460d      	mov	r5, r1
    42c4:	4607      	mov	r7, r0
    42c6:	f008 ff79 	bl	d1bc <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    42ca:	b148      	cbz	r0, 42e0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    42cc:	4816      	ldr	r0, [pc, #88]	; (4328 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    42ce:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    42d2:	68f0      	ldr	r0, [r6, #12]
    42d4:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    42d8:	b128      	cbz	r0, 42e6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    42da:	f240 1109 	movw	r1, #265	; 0x109
    42de:	e015      	b.n	430c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    42e0:	f44f 7184 	mov.w	r1, #264	; 0x108
    42e4:	e012      	b.n	430c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    42e6:	6870      	ldr	r0, [r6, #4]
    42e8:	2800      	cmp	r0, #0
    42ea:	d01a      	beq.n	4322 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xca>
    42ec:	4628      	mov	r0, r5
    42ee:	f000 f861 	bl	43b4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    42f2:	4601      	mov	r1, r0
    42f4:	6870      	ldr	r0, [r6, #4]
    42f6:	f008 fecf 	bl	d098 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    42fa:	0004      	movs	r4, r0
    42fc:	d010      	beq.n	4320 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc8>
    42fe:	68f0      	ldr	r0, [r6, #12]
    4300:	2d02      	cmp	r5, #2
    4302:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    4306:	d304      	bcc.n	4312 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xba>
    4308:	f44f 718a 	mov.w	r1, #276	; 0x114
    430c:	2017      	movs	r0, #23
    430e:	f7ff fd25 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4312:	4806      	ldr	r0, [pc, #24]	; (432c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>)
    4314:	4642      	mov	r2, r8
    4316:	4621      	mov	r1, r4
    4318:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
    431c:	4638      	mov	r0, r7
    431e:	4798      	blx	r3
    4320:	4620      	mov	r0, r4
    4322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4326:	0000      	.short	0x0000
    4328:	20000dc4 	.word	0x20000dc4
    432c:	000043e0 	.word	0x000043e0
    4330:	b570      	push	{r4, r5, r6, lr}
    4332:	460c      	mov	r4, r1
    4334:	4605      	mov	r5, r0
    4336:	f008 ff41 	bl	d1bc <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    433a:	2800      	cmp	r0, #0
    433c:	d005      	beq.n	434a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf2>
    433e:	4803      	ldr	r0, [pc, #12]	; (434c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf4>)
    4340:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4344:	68c0      	ldr	r0, [r0, #12]
    4346:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    434a:	bd70      	pop	{r4, r5, r6, pc}
    434c:	20000dc4 	.word	0x20000dc4
    4350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4354:	4e16      	ldr	r6, [pc, #88]	; (43b0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    4356:	4688      	mov	r8, r1
    4358:	4605      	mov	r5, r0
    435a:	2400      	movs	r4, #0
    435c:	6828      	ldr	r0, [r5, #0]
    435e:	1cc0      	adds	r0, r0, #3
    4360:	f020 0003 	bic.w	r0, r0, #3
    4364:	6028      	str	r0, [r5, #0]
    4366:	4620      	mov	r0, r4
    4368:	f000 f824 	bl	43b4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    436c:	5d31      	ldrb	r1, [r6, r4]
    436e:	4348      	muls	r0, r1
    4370:	f1b8 0f00 	cmp.w	r8, #0
    4374:	d001      	beq.n	437a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    4376:	2200      	movs	r2, #0
    4378:	e000      	b.n	437c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    437a:	682a      	ldr	r2, [r5, #0]
    437c:	4601      	mov	r1, r0
    437e:	9200      	str	r2, [sp, #0]
    4380:	b132      	cbz	r2, 4390 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    4382:	2700      	movs	r7, #0
    4384:	ea4f 000d 	mov.w	r0, sp
    4388:	f008 feb3 	bl	d0f2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    438c:	b11f      	cbz	r7, 4396 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13e>
    438e:	e006      	b.n	439e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x146>
    4390:	2701      	movs	r7, #1
    4392:	2000      	movs	r0, #0
    4394:	e7f8      	b.n	4388 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x130>
    4396:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    439a:	9a00      	ldr	r2, [sp, #0]
    439c:	604a      	str	r2, [r1, #4]
    439e:	6829      	ldr	r1, [r5, #0]
    43a0:	1c64      	adds	r4, r4, #1
    43a2:	4408      	add	r0, r1
    43a4:	b2e4      	uxtb	r4, r4
    43a6:	6028      	str	r0, [r5, #0]
    43a8:	2c02      	cmp	r4, #2
    43aa:	d3d7      	bcc.n	435c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x104>
    43ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    43b0:	20000dc4 	.word	0x20000dc4
    43b4:	4903      	ldr	r1, [pc, #12]	; (43c4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16c>)
    43b6:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    43ba:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    43be:	1cc0      	adds	r0, r0, #3
    43c0:	4008      	ands	r0, r1
    43c2:	4770      	bx	lr
    43c4:	000043dc 	.word	0x000043dc
    43c8:	4803      	ldr	r0, [pc, #12]	; (43d8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x180>)
    43ca:	7801      	ldrb	r1, [r0, #0]
    43cc:	7840      	ldrb	r0, [r0, #1]
    43ce:	4281      	cmp	r1, r0
    43d0:	d300      	bcc.n	43d4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x17c>
    43d2:	4608      	mov	r0, r1
    43d4:	4770      	bx	lr
    43d6:	0000      	.short	0x0000
    43d8:	20000dc4 	.word	0x20000dc4
    43dc:	00dc0210 	.word	0x00dc0210
    43e0:	0000d1d1 	.word	0x0000d1d1
    43e4:	0000d1d1 	.word	0x0000d1d1
    43e8:	0000e6ab 	.word	0x0000e6ab
    43ec:	0000df43 	.word	0x0000df43

000043f0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    43f0:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    43f4:	4c26      	ldr	r4, [pc, #152]	; (4490 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
    43f6:	4680      	mov	r8, r0
    43f8:	b081      	sub	sp, #4
    43fa:	6820      	ldr	r0, [r4, #0]
    43fc:	469a      	mov	sl, r3
    43fe:	4693      	mov	fp, r2
    4400:	b158      	cbz	r0, 441a <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    4402:	7a02      	ldrb	r2, [r0, #8]
    4404:	4542      	cmp	r2, r8
    4406:	d903      	bls.n	4410 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    4408:	6841      	ldr	r1, [r0, #4]
    440a:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
    440e:	b140      	cbz	r0, 4422 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    4410:	f243 0002 	movw	r0, #12290	; 0x3002
    4414:	b005      	add	sp, #20
    4416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    441a:	21a5      	movs	r1, #165	; 0xa5
    441c:	2018      	movs	r0, #24
    441e:	f7ff fc9d 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4422:	4619      	mov	r1, r3
    4424:	9802      	ldr	r0, [sp, #8]
    4426:	f008 feeb 	bl	d200 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    442a:	b286      	uxth	r6, r0
    442c:	4658      	mov	r0, fp
    442e:	990e      	ldr	r1, [sp, #56]	; 0x38
    4430:	f008 fedd 	bl	d1ee <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    4434:	b285      	uxth	r5, r0
    4436:	1970      	adds	r0, r6, r5
    4438:	1d00      	adds	r0, r0, #4
    443a:	b287      	uxth	r7, r0
    443c:	6820      	ldr	r0, [r4, #0]
    443e:	46a1      	mov	r9, r4
    4440:	4639      	mov	r1, r7
    4442:	6800      	ldr	r0, [r0, #0]
    4444:	f008 fe28 	bl	d098 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4448:	0004      	movs	r4, r0
    444a:	d01f      	beq.n	448c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
    444c:	8067      	strh	r7, [r4, #2]
    444e:	8025      	strh	r5, [r4, #0]
    4450:	4629      	mov	r1, r5
    4452:	1d20      	adds	r0, r4, #4
    4454:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    4456:	4607      	mov	r7, r0
    4458:	465a      	mov	r2, fp
    445a:	2301      	movs	r3, #1
    445c:	9500      	str	r5, [sp, #0]
    445e:	f008 fd7a 	bl	cf56 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4462:	8820      	ldrh	r0, [r4, #0]
    4464:	4631      	mov	r1, r6
    4466:	4438      	add	r0, r7
    4468:	2301      	movs	r3, #1
    446a:	9a02      	ldr	r2, [sp, #8]
    446c:	f8cd a000 	str.w	sl, [sp]
    4470:	f008 fd71 	bl	cf56 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4474:	8820      	ldrh	r0, [r4, #0]
    4476:	19c1      	adds	r1, r0, r7
    4478:	4638      	mov	r0, r7
    447a:	f008 fd9d 	bl	cfb8 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    447e:	f8d9 0000 	ldr.w	r0, [r9]
    4482:	6841      	ldr	r1, [r0, #4]
    4484:	2000      	movs	r0, #0
    4486:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
    448a:	e7c3      	b.n	4414 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    448c:	2004      	movs	r0, #4
    448e:	e7c1      	b.n	4414 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4490:	20000080 	.word	0x20000080

00004494 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    4494:	b570      	push	{r4, r5, r6, lr}
    4496:	4c14      	ldr	r4, [pc, #80]	; (44e8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    4498:	6823      	ldr	r3, [r4, #0]
    449a:	b18b      	cbz	r3, 44c0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    449c:	7a19      	ldrb	r1, [r3, #8]
    449e:	4281      	cmp	r1, r0
    44a0:	d912      	bls.n	44c8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    44a2:	685a      	ldr	r2, [r3, #4]
    44a4:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    44a8:	b171      	cbz	r1, 44c8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    44aa:	2500      	movs	r5, #0
    44ac:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    44b0:	884a      	ldrh	r2, [r1, #2]
    44b2:	6818      	ldr	r0, [r3, #0]
    44b4:	f008 fe3e 	bl	d134 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    44b8:	6821      	ldr	r1, [r4, #0]
    44ba:	2000      	movs	r0, #0
    44bc:	7a0a      	ldrb	r2, [r1, #8]
    44be:	e00c      	b.n	44da <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    44c0:	21c8      	movs	r1, #200	; 0xc8
    44c2:	2018      	movs	r0, #24
    44c4:	f7ff fc4a 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    44c8:	f243 0002 	movw	r0, #12290	; 0x3002
    44cc:	bd70      	pop	{r4, r5, r6, pc}
    44ce:	684b      	ldr	r3, [r1, #4]
    44d0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    44d4:	b933      	cbnz	r3, 44e4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    44d6:	1c40      	adds	r0, r0, #1
    44d8:	b2c0      	uxtb	r0, r0
    44da:	4282      	cmp	r2, r0
    44dc:	d8f7      	bhi.n	44ce <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    44de:	6808      	ldr	r0, [r1, #0]
    44e0:	f008 fe1d 	bl	d11e <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    44e4:	2000      	movs	r0, #0
    44e6:	bd70      	pop	{r4, r5, r6, pc}
    44e8:	20000080 	.word	0x20000080

000044ec <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    44ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    44f0:	460d      	mov	r5, r1
    44f2:	0004      	movs	r4, r0
    44f4:	4690      	mov	r8, r2
    44f6:	f04f 0600 	mov.w	r6, #0
    44fa:	d009      	beq.n	4510 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    44fc:	2700      	movs	r7, #0
    44fe:	1ce0      	adds	r0, r4, #3
    4500:	f020 0003 	bic.w	r0, r0, #3
    4504:	42a0      	cmp	r0, r4
    4506:	d005      	beq.n	4514 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    4508:	2186      	movs	r1, #134	; 0x86
    450a:	2018      	movs	r0, #24
    450c:	f7ff fc26 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4510:	2701      	movs	r7, #1
    4512:	e7f4      	b.n	44fe <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    4514:	b1cd      	cbz	r5, 454a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    4516:	4611      	mov	r1, r2
    4518:	2000      	movs	r0, #0
    451a:	f008 fdea 	bl	d0f2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    451e:	300c      	adds	r0, #12
    4520:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    4524:	b98f      	cbnz	r7, 454a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    4526:	4f0a      	ldr	r7, [pc, #40]	; (4550 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    4528:	f104 000c 	add.w	r0, r4, #12
    452c:	00aa      	lsls	r2, r5, #2
    452e:	603c      	str	r4, [r7, #0]
    4530:	7225      	strb	r5, [r4, #8]
    4532:	6060      	str	r0, [r4, #4]
    4534:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    4538:	6020      	str	r0, [r4, #0]
    453a:	2100      	movs	r1, #0
    453c:	6860      	ldr	r0, [r4, #4]
    453e:	f007 fe8a 	bl	c256 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4542:	4641      	mov	r1, r8
    4544:	6838      	ldr	r0, [r7, #0]
    4546:	f008 fdd4 	bl	d0f2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    454a:	4630      	mov	r0, r6
    454c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4550:	20000080 	.word	0x20000080

00004554 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    4554:	b570      	push	{r4, r5, r6, lr}
    4556:	4d08      	ldr	r5, [pc, #32]	; (4578 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    4558:	6828      	ldr	r0, [r5, #0]
    455a:	2800      	cmp	r0, #0
    455c:	d00a      	beq.n	4574 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    455e:	2400      	movs	r4, #0
    4560:	e004      	b.n	456c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    4562:	4620      	mov	r0, r4
    4564:	f7ff ff96 	bl	4494 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    4568:	1c64      	adds	r4, r4, #1
    456a:	b2e4      	uxtb	r4, r4
    456c:	6828      	ldr	r0, [r5, #0]
    456e:	7a00      	ldrb	r0, [r0, #8]
    4570:	42a0      	cmp	r0, r4
    4572:	d8f6      	bhi.n	4562 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    4574:	bd70      	pop	{r4, r5, r6, pc}
    4576:	0000      	.short	0x0000
    4578:	20000080 	.word	0x20000080

0000457c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    457c:	4909      	ldr	r1, [pc, #36]	; (45a4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    457e:	b510      	push	{r4, lr}
    4580:	4602      	mov	r2, r0
    4582:	6809      	ldr	r1, [r1, #0]
    4584:	2000      	movs	r0, #0
    4586:	b149      	cbz	r1, 459c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    4588:	7a0b      	ldrb	r3, [r1, #8]
    458a:	4293      	cmp	r3, r2
    458c:	d905      	bls.n	459a <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    458e:	6849      	ldr	r1, [r1, #4]
    4590:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4594:	2900      	cmp	r1, #0
    4596:	d000      	beq.n	459a <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4598:	1d08      	adds	r0, r1, #4
    459a:	bd10      	pop	{r4, pc}
    459c:	21ee      	movs	r1, #238	; 0xee
    459e:	2018      	movs	r0, #24
    45a0:	f7ff fbdc 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    45a4:	20000080 	.word	0x20000080

000045a8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    45a8:	490a      	ldr	r1, [pc, #40]	; (45d4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    45aa:	b510      	push	{r4, lr}
    45ac:	4602      	mov	r2, r0
    45ae:	6809      	ldr	r1, [r1, #0]
    45b0:	2000      	movs	r0, #0
    45b2:	b159      	cbz	r1, 45cc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    45b4:	7a0b      	ldrb	r3, [r1, #8]
    45b6:	4293      	cmp	r3, r2
    45b8:	d907      	bls.n	45ca <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    45ba:	6849      	ldr	r1, [r1, #4]
    45bc:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    45c0:	2900      	cmp	r1, #0
    45c2:	d002      	beq.n	45ca <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    45c4:	f831 0b04 	ldrh.w	r0, [r1], #4
    45c8:	4408      	add	r0, r1
    45ca:	bd10      	pop	{r4, pc}
    45cc:	21fc      	movs	r1, #252	; 0xfc
    45ce:	2018      	movs	r0, #24
    45d0:	f7ff fbc4 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    45d4:	20000080 	.word	0x20000080

000045d8 <sym_AXKF6JGHLS2U2Y5QV7LNOO6EESEIJEBW7BXAIPY>:
    45d8:	b510      	push	{r4, lr}
    45da:	4604      	mov	r4, r0
    45dc:	2001      	movs	r0, #1
    45de:	f7ff fd9f 	bl	4120 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    45e2:	4284      	cmp	r4, r0
    45e4:	d206      	bcs.n	45f4 <sym_AXKF6JGHLS2U2Y5QV7LNOO6EESEIJEBW7BXAIPY+0x1c>
    45e6:	4904      	ldr	r1, [pc, #16]	; (45f8 <sym_AXKF6JGHLS2U2Y5QV7LNOO6EESEIJEBW7BXAIPY+0x20>)
    45e8:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    45ec:	6809      	ldr	r1, [r1, #0]
    45ee:	eb01 1040 	add.w	r0, r1, r0, lsl #5
    45f2:	bd10      	pop	{r4, pc}
    45f4:	2000      	movs	r0, #0
    45f6:	bd10      	pop	{r4, pc}
    45f8:	20000084 	.word	0x20000084

000045fc <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    45fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    45fe:	9800      	ldr	r0, [sp, #0]
    4600:	b158      	cbz	r0, 461a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x1e>
    4602:	2600      	movs	r6, #0
    4604:	ea4f 000d 	mov.w	r0, sp
    4608:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    460c:	0149      	lsls	r1, r1, #5
    460e:	460c      	mov	r4, r1
    4610:	f008 fd6f 	bl	d0f2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4614:	4605      	mov	r5, r0
    4616:	b11e      	cbz	r6, 4620 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x24>
    4618:	e00d      	b.n	4636 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x3a>
    461a:	2601      	movs	r6, #1
    461c:	2000      	movs	r0, #0
    461e:	e7f3      	b.n	4608 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0xc>
    4620:	4621      	mov	r1, r4
    4622:	9800      	ldr	r0, [sp, #0]
    4624:	f008 fd38 	bl	d098 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4628:	4906      	ldr	r1, [pc, #24]	; (4644 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>)
    462a:	6008      	str	r0, [r1, #0]
    462c:	b128      	cbz	r0, 463a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x3e>
    462e:	4622      	mov	r2, r4
    4630:	2100      	movs	r1, #0
    4632:	f007 fe10 	bl	c256 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4636:	4628      	mov	r0, r5
    4638:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    463a:	211e      	movs	r1, #30
    463c:	2009      	movs	r0, #9
    463e:	f7ff fb8d 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4642:	0000      	.short	0x0000
    4644:	20000084 	.word	0x20000084

00004648 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI>:
    4648:	b510      	push	{r4, lr}
    464a:	2001      	movs	r0, #1
    464c:	f7ff fd68 	bl	4120 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    4650:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4654:	0142      	lsls	r2, r0, #5
    4656:	4803      	ldr	r0, [pc, #12]	; (4664 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x1c>)
    4658:	2100      	movs	r1, #0
    465a:	6800      	ldr	r0, [r0, #0]
    465c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4660:	f007 bdf9 	b.w	c256 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4664:	20000084 	.word	0x20000084
    4668:	4909      	ldr	r1, [pc, #36]	; (4690 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x48>)
    466a:	b510      	push	{r4, lr}
    466c:	4807      	ldr	r0, [pc, #28]	; (468c <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x44>)
    466e:	6008      	str	r0, [r1, #0]
    4670:	4b08      	ldr	r3, [pc, #32]	; (4694 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x4c>)
    4672:	2011      	movs	r0, #17
    4674:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    4678:	2200      	movs	r2, #0
    467a:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    467e:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    4682:	1c40      	adds	r0, r0, #1
    4684:	b2c0      	uxtb	r0, r0
    4686:	2814      	cmp	r0, #20
    4688:	d3f4      	bcc.n	4674 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x2c>
    468a:	bd10      	pop	{r4, pc}
    468c:	fffe0000 	.word	0xfffe0000
    4690:	4001f508 	.word	0x4001f508
    4694:	4001f000 	.word	0x4001f000
    4698:	b570      	push	{r4, r5, r6, lr}
    469a:	2420      	movs	r4, #32
    469c:	2100      	movs	r1, #0
    469e:	2301      	movs	r3, #1
    46a0:	fa20 f201 	lsr.w	r2, r0, r1
    46a4:	07d2      	lsls	r2, r2, #31
    46a6:	d020      	beq.n	46ea <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0xa2>
    46a8:	b24a      	sxtb	r2, r1
    46aa:	2a00      	cmp	r2, #0
    46ac:	db10      	blt.n	46d0 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x88>
    46ae:	bf00      	nop
    46b0:	ea4f 1652 	mov.w	r6, r2, lsr #5
    46b4:	ea4f 0686 	mov.w	r6, r6, lsl #2
    46b8:	f002 051f 	and.w	r5, r2, #31
    46bc:	f106 26e0 	add.w	r6, r6, #3758153728	; 0xe000e000
    46c0:	fa03 f505 	lsl.w	r5, r3, r5
    46c4:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
    46c8:	f3bf 8f4f 	dsb	sy
    46cc:	f3bf 8f6f 	isb	sy
    46d0:	db0b      	blt.n	46ea <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0xa2>
    46d2:	f002 051f 	and.w	r5, r2, #31
    46d6:	ea4f 1252 	mov.w	r2, r2, lsr #5
    46da:	ea4f 0282 	mov.w	r2, r2, lsl #2
    46de:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    46e2:	fa03 f505 	lsl.w	r5, r3, r5
    46e6:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
    46ea:	f101 0101 	add.w	r1, r1, #1
    46ee:	42a1      	cmp	r1, r4
    46f0:	d3d6      	bcc.n	46a0 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x58>
    46f2:	bd70      	pop	{r4, r5, r6, pc}
    46f4:	b570      	push	{r4, r5, r6, lr}
    46f6:	0042      	lsls	r2, r0, #1
    46f8:	f04f 0100 	mov.w	r1, #0
    46fc:	d501      	bpl.n	4702 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0xba>
    46fe:	4a14      	ldr	r2, [pc, #80]	; (4750 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x108>)
    4700:	6011      	str	r1, [r2, #0]
    4702:	f3c0 3280 	ubfx	r2, r0, #14, #1
    4706:	f3c0 33c0 	ubfx	r3, r0, #15, #1
    470a:	429a      	cmp	r2, r3
    470c:	d003      	beq.n	4716 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0xce>
    470e:	2164      	movs	r1, #100	; 0x64
    4710:	201b      	movs	r0, #27
    4712:	f7ff fb23 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4716:	f410 4f40 	tst.w	r0, #49152	; 0xc000
    471a:	d014      	beq.n	4746 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0xfe>
    471c:	4a0d      	ldr	r2, [pc, #52]	; (4754 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x10c>)
    471e:	2001      	movs	r0, #1
    4720:	6050      	str	r0, [r2, #4]
    4722:	1e83      	subs	r3, r0, #2
    4724:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4728:	4a0b      	ldr	r2, [pc, #44]	; (4758 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x110>)
    472a:	6090      	str	r0, [r2, #8]
    472c:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    4730:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4734:	4c09      	ldr	r4, [pc, #36]	; (475c <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x114>)
    4736:	6021      	str	r1, [r4, #0]
    4738:	1d25      	adds	r5, r4, #4
    473a:	6028      	str	r0, [r5, #0]
    473c:	6090      	str	r0, [r2, #8]
    473e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4742:	6021      	str	r1, [r4, #0]
    4744:	6028      	str	r0, [r5, #0]
    4746:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    474a:	f7ff bf8d 	b.w	4668 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x20>
    474e:	0000      	.short	0x0000
    4750:	4001e504 	.word	0x4001e504
    4754:	4000e000 	.word	0x4000e000
    4758:	4000f000 	.word	0x4000f000
    475c:	4000f500 	.word	0x4000f500

00004760 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    4760:	b570      	push	{r4, r5, r6, lr}
    4762:	4c0a      	ldr	r4, [pc, #40]	; (478c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>)
    4764:	460d      	mov	r5, r1
    4766:	6020      	str	r0, [r4, #0]
    4768:	f7ff ffc4 	bl	46f4 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0xac>
    476c:	6820      	ldr	r0, [r4, #0]
    476e:	f7ff ff93 	bl	4698 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x50>
    4772:	f000 f877 	bl	4864 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    4776:	f7ff ff77 	bl	4668 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI+0x20>
    477a:	f008 fd59 	bl	d230 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>
    477e:	4628      	mov	r0, r5
    4780:	f000 f8aa 	bl	48d8 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    4784:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4788:	f000 b8c2 	b.w	4910 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    478c:	20000088 	.word	0x20000088

00004790 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    4790:	e92d 5ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    4794:	4e2f      	ldr	r6, [pc, #188]	; (4854 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc4>)
    4796:	4683      	mov	fp, r0
    4798:	6830      	ldr	r0, [r6, #0]
    479a:	9001      	str	r0, [sp, #4]
    479c:	2701      	movs	r7, #1
    479e:	482e      	ldr	r0, [pc, #184]	; (4858 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    47a0:	f007 fc36 	bl	c010 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    47a4:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 4858 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>
    47a8:	b920      	cbnz	r0, 47b4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x24>
    47aa:	2700      	movs	r7, #0
    47ac:	f108 0001 	add.w	r0, r8, #1
    47b0:	f007 fc45 	bl	c03e <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    47b4:	4c29      	ldr	r4, [pc, #164]	; (485c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xcc>)
    47b6:	2500      	movs	r5, #0
    47b8:	f04f 0903 	mov.w	r9, #3
    47bc:	2001      	movs	r0, #1
    47be:	6060      	str	r0, [r4, #4]
    47c0:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    47c4:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    47c8:	f8c6 b000 	str.w	fp, [r6]
    47cc:	6020      	str	r0, [r4, #0]
    47ce:	f8df a090 	ldr.w	sl, [pc, #144]	; 4860 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xd0>
    47d2:	e017      	b.n	4804 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    47d4:	f8da 0000 	ldr.w	r0, [sl]
    47d8:	06c0      	lsls	r0, r0, #27
    47da:	d513      	bpl.n	4804 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    47dc:	200e      	movs	r0, #14
    47de:	f008 fd18 	bl	d212 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    47e2:	f3ef 8010 	mrs	r0, PRIMASK
    47e6:	9000      	str	r0, [sp, #0]
    47e8:	b672      	cpsid	i
    47ea:	f8c4 9304 	str.w	r9, [r4, #772]	; 0x304
    47ee:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    47f2:	b920      	cbnz	r0, 47fe <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    47f4:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    47f8:	b908      	cbnz	r0, 47fe <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    47fa:	f7ff f955 	bl	3aa8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    47fe:	9800      	ldr	r0, [sp, #0]
    4800:	b900      	cbnz	r0, 4804 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    4802:	b662      	cpsie	i
    4804:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    4808:	b918      	cbnz	r0, 4812 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    480a:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    480e:	2800      	cmp	r0, #0
    4810:	d0e0      	beq.n	47d4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x44>
    4812:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    4816:	2800      	cmp	r0, #0
    4818:	d1d0      	bne.n	47bc <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x2c>
    481a:	b137      	cbz	r7, 482a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x9a>
    481c:	9801      	ldr	r0, [sp, #4]
    481e:	6030      	str	r0, [r6, #0]
    4820:	f108 0001 	add.w	r0, r8, #1
    4824:	f007 fbf4 	bl	c010 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4828:	e011      	b.n	484e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xbe>
    482a:	f108 0001 	add.w	r0, r8, #1
    482e:	f007 fbef 	bl	c010 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4832:	2800      	cmp	r0, #0
    4834:	d1ba      	bne.n	47ac <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x1c>
    4836:	f8c4 9308 	str.w	r9, [r4, #776]	; 0x308
    483a:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    483e:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    4842:	200e      	movs	r0, #14
    4844:	f008 fce5 	bl	d212 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    4848:	4803      	ldr	r0, [pc, #12]	; (4858 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    484a:	f007 fbf8 	bl	c03e <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    484e:	2000      	movs	r0, #0
    4850:	e8bd 9ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    4854:	4000e504 	.word	0x4000e504
    4858:	2000028b 	.word	0x2000028b
    485c:	4000e000 	.word	0x4000e000
    4860:	e000ed10 	.word	0xe000ed10

00004864 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    4864:	b510      	push	{r4, lr}
    4866:	4808      	ldr	r0, [pc, #32]	; (4888 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    4868:	f007 fbe5 	bl	c036 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    486c:	b108      	cbz	r0, 4872 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0xe>
    486e:	2124      	movs	r1, #36	; 0x24
    4870:	e006      	b.n	4880 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>
    4872:	4805      	ldr	r0, [pc, #20]	; (4888 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    4874:	1c40      	adds	r0, r0, #1
    4876:	f007 fbde 	bl	c036 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    487a:	2800      	cmp	r0, #0
    487c:	d003      	beq.n	4886 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x22>
    487e:	2128      	movs	r1, #40	; 0x28
    4880:	201d      	movs	r0, #29
    4882:	f7ff fa6b 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4886:	bd10      	pop	{r4, pc}
    4888:	2000028b 	.word	0x2000028b

0000488c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    488c:	b570      	push	{r4, r5, r6, lr}
    488e:	4911      	ldr	r1, [pc, #68]	; (48d4 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    4890:	680a      	ldr	r2, [r1, #0]
    4892:	b1ea      	cbz	r2, 48d0 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    4894:	2300      	movs	r3, #0
    4896:	461d      	mov	r5, r3
    4898:	2401      	movs	r4, #1
    489a:	684a      	ldr	r2, [r1, #4]
    489c:	1c52      	adds	r2, r2, #1
    489e:	604a      	str	r2, [r1, #4]
    48a0:	2a09      	cmp	r2, #9
    48a2:	d300      	bcc.n	48a6 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    48a4:	604d      	str	r5, [r1, #4]
    48a6:	790e      	ldrb	r6, [r1, #4]
    48a8:	fa04 f206 	lsl.w	r2, r4, r6
    48ac:	680e      	ldr	r6, [r1, #0]
    48ae:	4216      	tst	r6, r2
    48b0:	d00b      	beq.n	48ca <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    48b2:	f3ef 8310 	mrs	r3, PRIMASK
    48b6:	b672      	cpsid	i
    48b8:	680c      	ldr	r4, [r1, #0]
    48ba:	4394      	bics	r4, r2
    48bc:	600c      	str	r4, [r1, #0]
    48be:	b903      	cbnz	r3, 48c2 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    48c0:	b662      	cpsie	i
    48c2:	6849      	ldr	r1, [r1, #4]
    48c4:	6001      	str	r1, [r0, #0]
    48c6:	2000      	movs	r0, #0
    48c8:	bd70      	pop	{r4, r5, r6, pc}
    48ca:	1c5b      	adds	r3, r3, #1
    48cc:	2b09      	cmp	r3, #9
    48ce:	d3e4      	bcc.n	489a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    48d0:	2005      	movs	r0, #5
    48d2:	bd70      	pop	{r4, r5, r6, pc}
    48d4:	2000008c 	.word	0x2000008c

000048d8 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    48d8:	4802      	ldr	r0, [pc, #8]	; (48e4 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    48da:	2100      	movs	r1, #0
    48dc:	6001      	str	r1, [r0, #0]
    48de:	6041      	str	r1, [r0, #4]
    48e0:	4770      	bx	lr
    48e2:	0000      	.short	0x0000
    48e4:	2000008c 	.word	0x2000008c

000048e8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    48e8:	b510      	push	{r4, lr}
    48ea:	4c08      	ldr	r4, [pc, #32]	; (490c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    48ec:	7861      	ldrb	r1, [r4, #1]
    48ee:	b109      	cbz	r1, 48f4 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    48f0:	200f      	movs	r0, #15
    48f2:	bd10      	pop	{r4, pc}
    48f4:	f7ff f864 	bl	39c0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    48f8:	7020      	strb	r0, [r4, #0]
    48fa:	28ff      	cmp	r0, #255	; 0xff
    48fc:	d001      	beq.n	4902 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    48fe:	2000      	movs	r0, #0
    4900:	bd10      	pop	{r4, pc}
    4902:	2176      	movs	r1, #118	; 0x76
    4904:	201f      	movs	r0, #31
    4906:	f7ff fa29 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    490a:	0000      	.short	0x0000
    490c:	20000094 	.word	0x20000094

00004910 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    4910:	4901      	ldr	r1, [pc, #4]	; (4918 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    4912:	2000      	movs	r0, #0
    4914:	7048      	strb	r0, [r1, #1]
    4916:	4770      	bx	lr
    4918:	20000094 	.word	0x20000094

0000491c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    491c:	4806      	ldr	r0, [pc, #24]	; (4938 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    491e:	4a07      	ldr	r2, [pc, #28]	; (493c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    4920:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    4922:	8852      	ldrh	r2, [r2, #2]
    4924:	4291      	cmp	r1, r2
    4926:	d104      	bne.n	4932 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    4928:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    492c:	b108      	cbz	r0, 4932 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    492e:	2000      	movs	r0, #0
    4930:	4770      	bx	lr
    4932:	2001      	movs	r0, #1
    4934:	4770      	bx	lr
    4936:	0000      	.short	0x0000
    4938:	20000f9e 	.word	0x20000f9e
    493c:	20000278 	.word	0x20000278

00004940 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    4940:	4901      	ldr	r1, [pc, #4]	; (4948 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    4942:	8048      	strh	r0, [r1, #2]
    4944:	4770      	bx	lr
    4946:	0000      	.short	0x0000
    4948:	20000278 	.word	0x20000278

0000494c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    494c:	4808      	ldr	r0, [pc, #32]	; (4970 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    494e:	4a09      	ldr	r2, [pc, #36]	; (4974 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    4950:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    4952:	8852      	ldrh	r2, [r2, #2]
    4954:	4291      	cmp	r1, r2
    4956:	d109      	bne.n	496c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    4958:	f64f 71ff 	movw	r1, #65535	; 0xffff
    495c:	8481      	strh	r1, [r0, #36]	; 0x24
    495e:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    4962:	b119      	cbz	r1, 496c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    4964:	2100      	movs	r1, #0
    4966:	7001      	strb	r1, [r0, #0]
    4968:	2001      	movs	r0, #1
    496a:	4770      	bx	lr
    496c:	2000      	movs	r0, #0
    496e:	4770      	bx	lr
    4970:	20000f9e 	.word	0x20000f9e
    4974:	20000278 	.word	0x20000278

00004978 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    4978:	4807      	ldr	r0, [pc, #28]	; (4998 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    497a:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    497e:	2901      	cmp	r1, #1
    4980:	d007      	beq.n	4992 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    4982:	2101      	movs	r1, #1
    4984:	7001      	strb	r1, [r0, #0]
    4986:	4805      	ldr	r0, [pc, #20]	; (499c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    4988:	4903      	ldr	r1, [pc, #12]	; (4998 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    498a:	8800      	ldrh	r0, [r0, #0]
    498c:	8488      	strh	r0, [r1, #36]	; 0x24
    498e:	2001      	movs	r0, #1
    4990:	4770      	bx	lr
    4992:	2000      	movs	r0, #0
    4994:	4770      	bx	lr
    4996:	0000      	.short	0x0000
    4998:	20000f9e 	.word	0x20000f9e
    499c:	20000278 	.word	0x20000278

000049a0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    49a0:	4906      	ldr	r1, [pc, #24]	; (49bc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    49a2:	4b07      	ldr	r3, [pc, #28]	; (49c0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    49a4:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    49a6:	885b      	ldrh	r3, [r3, #2]
    49a8:	429a      	cmp	r2, r3
    49aa:	d105      	bne.n	49b8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    49ac:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    49b0:	b112      	cbz	r2, 49b8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    49b2:	6001      	str	r1, [r0, #0]
    49b4:	2001      	movs	r0, #1
    49b6:	4770      	bx	lr
    49b8:	2000      	movs	r0, #0
    49ba:	4770      	bx	lr
    49bc:	20000f9e 	.word	0x20000f9e
    49c0:	20000278 	.word	0x20000278

000049c4 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    49c4:	4909      	ldr	r1, [pc, #36]	; (49ec <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    49c6:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    49c8:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    49cc:	3bff      	subs	r3, #255	; 0xff
    49ce:	d002      	beq.n	49d6 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    49d0:	2100      	movs	r1, #0
    49d2:	6001      	str	r1, [r0, #0]
    49d4:	e007      	b.n	49e6 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    49d6:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    49da:	4904      	ldr	r1, [pc, #16]	; (49ec <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    49dc:	2a01      	cmp	r2, #1
    49de:	d002      	beq.n	49e6 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    49e0:	6001      	str	r1, [r0, #0]
    49e2:	2001      	movs	r0, #1
    49e4:	4770      	bx	lr
    49e6:	2000      	movs	r0, #0
    49e8:	4770      	bx	lr
    49ea:	0000      	.short	0x0000
    49ec:	20000f9e 	.word	0x20000f9e

000049f0 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    49f0:	4901      	ldr	r1, [pc, #4]	; (49f8 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    49f2:	8008      	strh	r0, [r1, #0]
    49f4:	4770      	bx	lr
    49f6:	0000      	.short	0x0000
    49f8:	20000278 	.word	0x20000278

000049fc <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    49fc:	4905      	ldr	r1, [pc, #20]	; (4a14 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    49fe:	2000      	movs	r0, #0
    4a00:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    4a04:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4a08:	8488      	strh	r0, [r1, #36]	; 0x24
    4a0a:	4903      	ldr	r1, [pc, #12]	; (4a18 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    4a0c:	8008      	strh	r0, [r1, #0]
    4a0e:	8048      	strh	r0, [r1, #2]
    4a10:	4770      	bx	lr
    4a12:	0000      	.short	0x0000
    4a14:	20000f9e 	.word	0x20000f9e
    4a18:	20000278 	.word	0x20000278
    4a1c:	4905      	ldr	r1, [pc, #20]	; (4a34 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    4a1e:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4a20:	4282      	cmp	r2, r0
    4a22:	d105      	bne.n	4a30 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    4a24:	2000      	movs	r0, #0
    4a26:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    4a2a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4a2e:	8488      	strh	r0, [r1, #36]	; 0x24
    4a30:	4770      	bx	lr
    4a32:	0000      	.short	0x0000
    4a34:	20000f9e 	.word	0x20000f9e

00004a38 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    4a38:	4a0a      	ldr	r2, [pc, #40]	; (4a64 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    4a3a:	b110      	cbz	r0, 4a42 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    4a3c:	2801      	cmp	r0, #1
    4a3e:	d007      	beq.n	4a50 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    4a40:	e00e      	b.n	4a60 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4a42:	7850      	ldrb	r0, [r2, #1]
    4a44:	b160      	cbz	r0, 4a60 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4a46:	f8d2 0002 	ldr.w	r0, [r2, #2]
    4a4a:	6008      	str	r0, [r1, #0]
    4a4c:	88d0      	ldrh	r0, [r2, #6]
    4a4e:	e004      	b.n	4a5a <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    4a50:	7810      	ldrb	r0, [r2, #0]
    4a52:	b128      	cbz	r0, 4a60 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4a54:	6890      	ldr	r0, [r2, #8]
    4a56:	6008      	str	r0, [r1, #0]
    4a58:	8990      	ldrh	r0, [r2, #12]
    4a5a:	8088      	strh	r0, [r1, #4]
    4a5c:	2001      	movs	r0, #1
    4a5e:	4770      	bx	lr
    4a60:	2000      	movs	r0, #0
    4a62:	4770      	bx	lr
    4a64:	2000028d 	.word	0x2000028d

00004a68 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    4a68:	4a08      	ldr	r2, [pc, #32]	; (4a8c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    4a6a:	2301      	movs	r3, #1
    4a6c:	b138      	cbz	r0, 4a7e <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    4a6e:	2801      	cmp	r0, #1
    4a70:	d104      	bne.n	4a7c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    4a72:	7013      	strb	r3, [r2, #0]
    4a74:	6808      	ldr	r0, [r1, #0]
    4a76:	6090      	str	r0, [r2, #8]
    4a78:	8888      	ldrh	r0, [r1, #4]
    4a7a:	8190      	strh	r0, [r2, #12]
    4a7c:	4770      	bx	lr
    4a7e:	7053      	strb	r3, [r2, #1]
    4a80:	6808      	ldr	r0, [r1, #0]
    4a82:	f8c2 0002 	str.w	r0, [r2, #2]
    4a86:	8888      	ldrh	r0, [r1, #4]
    4a88:	80d0      	strh	r0, [r2, #6]
    4a8a:	4770      	bx	lr
    4a8c:	2000028d 	.word	0x2000028d

00004a90 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    4a90:	4906      	ldr	r1, [pc, #24]	; (4aac <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    4a92:	b110      	cbz	r0, 4a9a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    4a94:	2801      	cmp	r0, #1
    4a96:	d002      	beq.n	4a9e <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    4a98:	e005      	b.n	4aa6 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    4a9a:	7848      	ldrb	r0, [r1, #1]
    4a9c:	e000      	b.n	4aa0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    4a9e:	7808      	ldrb	r0, [r1, #0]
    4aa0:	b108      	cbz	r0, 4aa6 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    4aa2:	2001      	movs	r0, #1
    4aa4:	4770      	bx	lr
    4aa6:	2000      	movs	r0, #0
    4aa8:	4770      	bx	lr
    4aaa:	0000      	.short	0x0000
    4aac:	2000028d 	.word	0x2000028d

00004ab0 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    4ab0:	4901      	ldr	r1, [pc, #4]	; (4ab8 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    4ab2:	7448      	strb	r0, [r1, #17]
    4ab4:	4770      	bx	lr
    4ab6:	0000      	.short	0x0000
    4ab8:	20000a4a 	.word	0x20000a4a

00004abc <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    4abc:	4801      	ldr	r0, [pc, #4]	; (4ac4 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    4abe:	78c0      	ldrb	r0, [r0, #3]
    4ac0:	4770      	bx	lr
    4ac2:	0000      	.short	0x0000
    4ac4:	200000b0 	.word	0x200000b0

00004ac8 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    4ac8:	4801      	ldr	r0, [pc, #4]	; (4ad0 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    4aca:	7900      	ldrb	r0, [r0, #4]
    4acc:	4770      	bx	lr
    4ace:	0000      	.short	0x0000
    4ad0:	200000b0 	.word	0x200000b0

00004ad4 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I>:
    4ad4:	b578      	push	{r3, r4, r5, r6, lr}
    4ad6:	4913      	ldr	r1, [pc, #76]	; (4b24 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x50>)
    4ad8:	7c4a      	ldrb	r2, [r1, #17]
    4ada:	b30a      	cbz	r2, 4b20 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    4adc:	7c0a      	ldrb	r2, [r1, #16]
    4ade:	f88d 2000 	strb.w	r2, [sp]
    4ae2:	9a00      	ldr	r2, [sp, #0]
    4ae4:	9200      	str	r2, [sp, #0]
    4ae6:	f89d 2000 	ldrb.w	r2, [sp]
    4aea:	b1ca      	cbz	r2, 4b20 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    4aec:	2300      	movs	r3, #0
    4aee:	f101 0210 	add.w	r2, r1, #16
    4af2:	241a      	movs	r4, #26
    4af4:	f1a1 0552 	sub.w	r5, r1, #82	; 0x52
    4af8:	7c0e      	ldrb	r6, [r1, #16]
    4afa:	f88d 6000 	strb.w	r6, [sp]
    4afe:	9e00      	ldr	r6, [sp, #0]
    4b00:	9600      	str	r6, [sp, #0]
    4b02:	f89d 6000 	ldrb.w	r6, [sp]
    4b06:	b14e      	cbz	r6, 4b1c <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x48>
    4b08:	7013      	strb	r3, [r2, #0]
    4b0a:	7043      	strb	r3, [r0, #1]
    4b0c:	7004      	strb	r4, [r0, #0]
    4b0e:	f8d5 605a 	ldr.w	r6, [r5, #90]	; 0x5a
    4b12:	6046      	str	r6, [r0, #4]
    4b14:	f8d5 605e 	ldr.w	r6, [r5, #94]	; 0x5e
    4b18:	6086      	str	r6, [r0, #8]
    4b1a:	e7ed      	b.n	4af8 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x24>
    4b1c:	2001      	movs	r0, #1
    4b1e:	bd78      	pop	{r3, r4, r5, r6, pc}
    4b20:	2000      	movs	r0, #0
    4b22:	bd78      	pop	{r3, r4, r5, r6, pc}
    4b24:	20000a4a 	.word	0x20000a4a

00004b28 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    4b28:	b570      	push	{r4, r5, r6, lr}
    4b2a:	460c      	mov	r4, r1
    4b2c:	4605      	mov	r5, r0
    4b2e:	f000 f931 	bl	4d94 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    4b32:	b118      	cbz	r0, 4b3c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x14>
    4b34:	21ab      	movs	r1, #171	; 0xab
    4b36:	2027      	movs	r0, #39	; 0x27
    4b38:	f7ff f910 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b3c:	4803      	ldr	r0, [pc, #12]	; (4b4c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    4b3e:	2101      	movs	r1, #1
    4b40:	f008 ff5e 	bl	da00 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    4b44:	4802      	ldr	r0, [pc, #8]	; (4b50 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x28>)
    4b46:	71c5      	strb	r5, [r0, #7]
    4b48:	62c4      	str	r4, [r0, #44]	; 0x2c
    4b4a:	bd70      	pop	{r4, r5, r6, pc}
    4b4c:	20000a28 	.word	0x20000a28
    4b50:	200000b0 	.word	0x200000b0

00004b54 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    4b54:	4901      	ldr	r1, [pc, #4]	; (4b5c <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    4b56:	2001      	movs	r0, #1
    4b58:	7188      	strb	r0, [r1, #6]
    4b5a:	4770      	bx	lr
    4b5c:	200000b0 	.word	0x200000b0

00004b60 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    4b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4b64:	4d4c      	ldr	r5, [pc, #304]	; (4c98 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x138>)
    4b66:	b086      	sub	sp, #24
    4b68:	782e      	ldrb	r6, [r5, #0]
    4b6a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    4b6c:	2e00      	cmp	r6, #0
    4b6e:	d174      	bne.n	4c5a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfa>
    4b70:	2a00      	cmp	r2, #0
    4b72:	d072      	beq.n	4c5a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfa>
    4b74:	2b00      	cmp	r3, #0
    4b76:	d070      	beq.n	4c5a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfa>
    4b78:	2c00      	cmp	r4, #0
    4b7a:	d06e      	beq.n	4c5a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfa>
    4b7c:	f105 0714 	add.w	r7, r5, #20
    4b80:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
    4b84:	e887 001c 	stmia.w	r7, {r2, r3, r4}
    4b88:	71ae      	strb	r6, [r5, #6]
    4b8a:	716e      	strb	r6, [r5, #5]
    4b8c:	70ee      	strb	r6, [r5, #3]
    4b8e:	70ae      	strb	r6, [r5, #2]
    4b90:	712e      	strb	r6, [r5, #4]
    4b92:	81ae      	strh	r6, [r5, #12]
    4b94:	81ee      	strh	r6, [r5, #14]
    4b96:	f000 f935 	bl	4e04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4b9a:	4607      	mov	r7, r0
    4b9c:	f000 f92c 	bl	4df8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    4ba0:	4604      	mov	r4, r0
    4ba2:	f006 fa1b 	bl	afdc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    4ba6:	f005 fef5 	bl	a994 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    4baa:	f994 006a 	ldrsb.w	r0, [r4, #106]	; 0x6a
    4bae:	f006 fa9d 	bl	b0ec <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    4bb2:	f104 0016 	add.w	r0, r4, #22
    4bb6:	f006 fb87 	bl	b2c8 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    4bba:	f104 0012 	add.w	r0, r4, #18
    4bbe:	f006 fb77 	bl	b2b0 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    4bc2:	7f38      	ldrb	r0, [r7, #28]
    4bc4:	f006 fb9a 	bl	b2fc <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    4bc8:	f105 0038 	add.w	r0, r5, #56	; 0x38
    4bcc:	6840      	ldr	r0, [r0, #4]
    4bce:	f890 016c 	ldrb.w	r0, [r0, #364]	; 0x16c
    4bd2:	b108      	cbz	r0, 4bd8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x78>
    4bd4:	f006 f952 	bl	ae7c <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    4bd8:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    4bdc:	2001      	movs	r0, #1
    4bde:	f006 f87d 	bl	acdc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    4be2:	2800      	cmp	r0, #0
    4be4:	d050      	beq.n	4c88 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x128>
    4be6:	46b0      	mov	r8, r6
    4be8:	2001      	movs	r0, #1
    4bea:	f006 f987 	bl	aefc <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>
    4bee:	2214      	movs	r2, #20
    4bf0:	492a      	ldr	r1, [pc, #168]	; (4c9c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x13c>)
    4bf2:	4668      	mov	r0, sp
    4bf4:	f007 fab5 	bl	c162 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4bf8:	4668      	mov	r0, sp
    4bfa:	f006 f8eb 	bl	add4 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    4bfe:	8820      	ldrh	r0, [r4, #0]
    4c00:	f7ff fcd2 	bl	45a8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    4c04:	6328      	str	r0, [r5, #48]	; 0x30
    4c06:	8820      	ldrh	r0, [r4, #0]
    4c08:	f7ff fcb8 	bl	457c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    4c0c:	6368      	str	r0, [r5, #52]	; 0x34
    4c0e:	f107 0058 	add.w	r0, r7, #88	; 0x58
    4c12:	4e23      	ldr	r6, [pc, #140]	; (4ca0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x140>)
    4c14:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    4c16:	f106 0c08 	add.w	ip, r6, #8
    4c1a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    4c1e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    4c20:	f8c6 0021 	str.w	r0, [r6, #33]	; 0x21
    4c24:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
    4c26:	f8c6 0025 	str.w	r0, [r6, #37]	; 0x25
    4c2a:	20ff      	movs	r0, #255	; 0xff
    4c2c:	7268      	strb	r0, [r5, #9]
    4c2e:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
    4c30:	8f21      	ldrh	r1, [r4, #56]	; 0x38
    4c32:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
    4c36:	7cf8      	ldrb	r0, [r7, #19]
    4c38:	f008 fb6e 	bl	d318 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    4c3c:	7cf9      	ldrb	r1, [r7, #19]
    4c3e:	b101      	cbz	r1, 4c42 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe2>
    4c40:	2104      	movs	r1, #4
    4c42:	4408      	add	r0, r1
    4c44:	b2c0      	uxtb	r0, r0
    4c46:	7228      	strb	r0, [r5, #8]
    4c48:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
    4c4c:	1d09      	adds	r1, r1, #4
    4c4e:	4281      	cmp	r1, r0
    4c50:	d205      	bcs.n	4c5e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    4c52:	f44f 71b5 	mov.w	r1, #362	; 0x16a
    4c56:	e01c      	b.n	4c92 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x132>
    4c58:	e7ff      	b.n	4c5a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfa>
    4c5a:	21d4      	movs	r1, #212	; 0xd4
    4c5c:	e019      	b.n	4c92 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x132>
    4c5e:	4645      	mov	r5, r8
    4c60:	2001      	movs	r0, #1
    4c62:	f000 fb49 	bl	52f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x548>
    4c66:	480f      	ldr	r0, [pc, #60]	; (4ca4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x144>)
    4c68:	6800      	ldr	r0, [r0, #0]
    4c6a:	2803      	cmp	r0, #3
    4c6c:	d00f      	beq.n	4c8e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x12e>
    4c6e:	280b      	cmp	r0, #11
    4c70:	d00d      	beq.n	4c8e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x12e>
    4c72:	f846 5f52 	str.w	r5, [r6, #82]!
    4c76:	6075      	str	r5, [r6, #4]
    4c78:	4809      	ldr	r0, [pc, #36]	; (4ca0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x140>)
    4c7a:	88b9      	ldrh	r1, [r7, #4]
    4c7c:	3052      	adds	r0, #82	; 0x52
    4c7e:	8041      	strh	r1, [r0, #2]
    4c80:	8821      	ldrh	r1, [r4, #0]
    4c82:	8001      	strh	r1, [r0, #0]
    4c84:	7f39      	ldrb	r1, [r7, #28]
    4c86:	7101      	strb	r1, [r0, #4]
    4c88:	b006      	add	sp, #24
    4c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4c8e:	f44f 71bd 	mov.w	r1, #378	; 0x17a
    4c92:	2027      	movs	r0, #39	; 0x27
    4c94:	f7ff f862 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c98:	200000b0 	.word	0x200000b0
    4c9c:	00005544 	.word	0x00005544
    4ca0:	200009f8 	.word	0x200009f8
    4ca4:	40001550 	.word	0x40001550

00004ca8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    4ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4cac:	4606      	mov	r6, r0
    4cae:	f000 f8a9 	bl	4e04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4cb2:	4d33      	ldr	r5, [pc, #204]	; (4d80 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd8>)
    4cb4:	4604      	mov	r4, r0
    4cb6:	6a68      	ldr	r0, [r5, #36]	; 0x24
    4cb8:	7847      	ldrb	r7, [r0, #1]
    4cba:	b10e      	cbz	r6, 4cc0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x18>
    4cbc:	2e01      	cmp	r6, #1
    4cbe:	d103      	bne.n	4cc8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    4cc0:	6b69      	ldr	r1, [r5, #52]	; 0x34
    4cc2:	f007 fbb9 	bl	c438 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>
    4cc6:	7068      	strb	r0, [r5, #1]
    4cc8:	7868      	ldrb	r0, [r5, #1]
    4cca:	f04f 0800 	mov.w	r8, #0
    4cce:	f04f 0901 	mov.w	r9, #1
    4cd2:	b150      	cbz	r0, 4cea <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x42>
    4cd4:	2801      	cmp	r0, #1
    4cd6:	d01a      	beq.n	4d0e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    4cd8:	2802      	cmp	r0, #2
    4cda:	d034      	beq.n	4d46 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9e>
    4cdc:	2803      	cmp	r0, #3
    4cde:	d049      	beq.n	4d74 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xcc>
    4ce0:	f240 31cd 	movw	r1, #973	; 0x3cd
    4ce4:	2027      	movs	r0, #39	; 0x27
    4ce6:	f7ff f839 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4cea:	2e01      	cmp	r6, #1
    4cec:	d032      	beq.n	4d54 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    4cee:	f000 f8f3 	bl	4ed8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x128>
    4cf2:	4639      	mov	r1, r7
    4cf4:	2201      	movs	r2, #1
    4cf6:	6b68      	ldr	r0, [r5, #52]	; 0x34
    4cf8:	f007 ffc2 	bl	cc80 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    4cfc:	e028      	b.n	4d50 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    4cfe:	bf00      	nop
    4d00:	f884 8008 	strb.w	r8, [r4, #8]
    4d04:	e031      	b.n	4d6a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4d06:	bf00      	nop
    4d08:	f884 9008 	strb.w	r9, [r4, #8]
    4d0c:	e02d      	b.n	4d6a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4d0e:	2e01      	cmp	r6, #1
    4d10:	d008      	beq.n	4d24 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x7c>
    4d12:	f000 f8e1 	bl	4ed8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x128>
    4d16:	4639      	mov	r1, r7
    4d18:	2200      	movs	r2, #0
    4d1a:	6b68      	ldr	r0, [r5, #52]	; 0x34
    4d1c:	f007 ffb0 	bl	cc80 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    4d20:	2e02      	cmp	r6, #2
    4d22:	d00b      	beq.n	4d3c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4d24:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
    4d28:	1c40      	adds	r0, r0, #1
    4d2a:	f141 0100 	adc.w	r1, r1, #0
    4d2e:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    4d32:	7a20      	ldrb	r0, [r4, #8]
    4d34:	2801      	cmp	r0, #1
    4d36:	d003      	beq.n	4d40 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x98>
    4d38:	f884 9008 	strb.w	r9, [r4, #8]
    4d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4d40:	f884 8008 	strb.w	r8, [r4, #8]
    4d44:	e7fa      	b.n	4d3c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4d46:	2e01      	cmp	r6, #1
    4d48:	d004      	beq.n	4d54 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    4d4a:	6b68      	ldr	r0, [r5, #52]	; 0x34
    4d4c:	f008 f99e 	bl	d08c <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    4d50:	2e02      	cmp	r6, #2
    4d52:	d0f3      	beq.n	4d3c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4d54:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
    4d58:	1c40      	adds	r0, r0, #1
    4d5a:	f141 0100 	adc.w	r1, r1, #0
    4d5e:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    4d62:	7a20      	ldrb	r0, [r4, #8]
    4d64:	2801      	cmp	r0, #1
    4d66:	d1cf      	bne.n	4d08 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x60>
    4d68:	e7ca      	b.n	4d00 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x58>
    4d6a:	79e8      	ldrb	r0, [r5, #7]
    4d6c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4d70:	f7fe be44 	b.w	39fc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    4d74:	2e01      	cmp	r6, #1
    4d76:	d0e1      	beq.n	4d3c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4d78:	6b68      	ldr	r0, [r5, #52]	; 0x34
    4d7a:	f008 f987 	bl	d08c <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    4d7e:	e7f4      	b.n	4d6a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4d80:	200000b0 	.word	0x200000b0

00004d84 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>:
    4d84:	4802      	ldr	r0, [pc, #8]	; (4d90 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI+0xc>)
    4d86:	89c0      	ldrh	r0, [r0, #14]
    4d88:	f3c0 2080 	ubfx	r0, r0, #10, #1
    4d8c:	4770      	bx	lr
    4d8e:	0000      	.short	0x0000
    4d90:	200000b0 	.word	0x200000b0

00004d94 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    4d94:	4804      	ldr	r0, [pc, #16]	; (4da8 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    4d96:	7800      	ldrb	r0, [r0, #0]
    4d98:	b108      	cbz	r0, 4d9e <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    4d9a:	200c      	movs	r0, #12
    4d9c:	4770      	bx	lr
    4d9e:	4903      	ldr	r1, [pc, #12]	; (4dac <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    4da0:	2000      	movs	r0, #0
    4da2:	7448      	strb	r0, [r1, #17]
    4da4:	4770      	bx	lr
    4da6:	0000      	.short	0x0000
    4da8:	200000b0 	.word	0x200000b0
    4dac:	20000a4a 	.word	0x20000a4a

00004db0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    4db0:	480c      	ldr	r0, [pc, #48]	; (4de4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>)
    4db2:	b510      	push	{r4, lr}
    4db4:	7801      	ldrb	r1, [r0, #0]
    4db6:	b149      	cbz	r1, 4dcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    4db8:	f100 0138 	add.w	r1, r0, #56	; 0x38
    4dbc:	7800      	ldrb	r0, [r0, #0]
    4dbe:	2802      	cmp	r0, #2
    4dc0:	d008      	beq.n	4dd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24>
    4dc2:	f44f 71cb 	mov.w	r1, #406	; 0x196
    4dc6:	2027      	movs	r0, #39	; 0x27
    4dc8:	f7fe ffc8 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4dd0:	f000 b9a8 	b.w	5124 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x374>
    4dd4:	6848      	ldr	r0, [r1, #4]
    4dd6:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    4dda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4dde:	f006 b801 	b.w	ade4 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    4de2:	0000      	.short	0x0000
    4de4:	200000b0 	.word	0x200000b0
    4de8:	4a02      	ldr	r2, [pc, #8]	; (4df4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44>)
    4dea:	8993      	ldrh	r3, [r2, #12]
    4dec:	4303      	orrs	r3, r0
    4dee:	8193      	strh	r3, [r2, #12]
    4df0:	6952      	ldr	r2, [r2, #20]
    4df2:	4710      	bx	r2
    4df4:	200000b0 	.word	0x200000b0
    4df8:	4801      	ldr	r0, [pc, #4]	; (4e00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>)
    4dfa:	6840      	ldr	r0, [r0, #4]
    4dfc:	4770      	bx	lr
    4dfe:	0000      	.short	0x0000
    4e00:	200000e8 	.word	0x200000e8
    4e04:	4801      	ldr	r0, [pc, #4]	; (4e0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    4e06:	6840      	ldr	r0, [r0, #4]
    4e08:	3070      	adds	r0, #112	; 0x70
    4e0a:	4770      	bx	lr
    4e0c:	200000e8 	.word	0x200000e8
    4e10:	4a01      	ldr	r2, [pc, #4]	; (4e18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    4e12:	2100      	movs	r1, #0
    4e14:	6952      	ldr	r2, [r2, #20]
    4e16:	4710      	bx	r2
    4e18:	200000b0 	.word	0x200000b0
    4e1c:	b570      	push	{r4, r5, r6, lr}
    4e1e:	f7ff fff1 	bl	4e04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4e22:	4604      	mov	r4, r0
    4e24:	f7ff ffe8 	bl	4df8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    4e28:	4605      	mov	r5, r0
    4e2a:	4621      	mov	r1, r4
    4e2c:	f008 fc09 	bl	d642 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    4e30:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
    4e34:	2901      	cmp	r1, #1
    4e36:	d117      	bne.n	4e68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    4e38:	2800      	cmp	r0, #0
    4e3a:	d015      	beq.n	4e68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    4e3c:	480b      	ldr	r0, [pc, #44]	; (4e6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xbc>)
    4e3e:	6842      	ldr	r2, [r0, #4]
    4e40:	8828      	ldrh	r0, [r5, #0]
    4e42:	f8a2 01ee 	strh.w	r0, [r2, #494]	; 0x1ee
    4e46:	7a60      	ldrb	r0, [r4, #9]
    4e48:	f882 01f0 	strb.w	r0, [r2, #496]	; 0x1f0
    4e4c:	7aa0      	ldrb	r0, [r4, #10]
    4e4e:	f882 01f1 	strb.w	r0, [r2, #497]	; 0x1f1
    4e52:	f502 72f6 	add.w	r2, r2, #492	; 0x1ec
    4e56:	2001      	movs	r0, #1
    4e58:	7010      	strb	r0, [r2, #0]
    4e5a:	4804      	ldr	r0, [pc, #16]	; (4e6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xbc>)
    4e5c:	3838      	subs	r0, #56	; 0x38
    4e5e:	79c0      	ldrb	r0, [r0, #7]
    4e60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4e64:	f7fe bdca 	b.w	39fc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    4e68:	bd70      	pop	{r4, r5, r6, pc}
    4e6a:	0000      	.short	0x0000
    4e6c:	200000e8 	.word	0x200000e8
    4e70:	b570      	push	{r4, r5, r6, lr}
    4e72:	4c18      	ldr	r4, [pc, #96]	; (4ed4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x124>)
    4e74:	4605      	mov	r5, r0
    4e76:	b939      	cbnz	r1, 4e88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd8>
    4e78:	2d01      	cmp	r5, #1
    4e7a:	d105      	bne.n	4e88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd8>
    4e7c:	78e0      	ldrb	r0, [r4, #3]
    4e7e:	1c40      	adds	r0, r0, #1
    4e80:	b2c0      	uxtb	r0, r0
    4e82:	70e0      	strb	r0, [r4, #3]
    4e84:	2801      	cmp	r0, #1
    4e86:	d818      	bhi.n	4eba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10a>
    4e88:	69a1      	ldr	r1, [r4, #24]
    4e8a:	4628      	mov	r0, r5
    4e8c:	4788      	blx	r1
    4e8e:	b1a0      	cbz	r0, 4eba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10a>
    4e90:	7960      	ldrb	r0, [r4, #5]
    4e92:	b990      	cbnz	r0, 4eba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10a>
    4e94:	b9e5      	cbnz	r5, 4ed0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
    4e96:	480f      	ldr	r0, [pc, #60]	; (4ed4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x124>)
    4e98:	3010      	adds	r0, #16
    4e9a:	7801      	ldrb	r1, [r0, #0]
    4e9c:	06c8      	lsls	r0, r1, #27
    4e9e:	d405      	bmi.n	4eac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfc>
    4ea0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    4ea2:	7800      	ldrb	r0, [r0, #0]
    4ea4:	06c0      	lsls	r0, r0, #27
    4ea6:	d401      	bmi.n	4eac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfc>
    4ea8:	2001      	movs	r0, #1
    4eaa:	e000      	b.n	4eae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    4eac:	2000      	movs	r0, #0
    4eae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4eb0:	b92a      	cbnz	r2, 4ebe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10e>
    4eb2:	8962      	ldrh	r2, [r4, #10]
    4eb4:	b11a      	cbz	r2, 4ebe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10e>
    4eb6:	06c9      	lsls	r1, r1, #27
    4eb8:	d401      	bmi.n	4ebe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10e>
    4eba:	2001      	movs	r0, #1
    4ebc:	bd70      	pop	{r4, r5, r6, pc}
    4ebe:	89a1      	ldrh	r1, [r4, #12]
    4ec0:	078a      	lsls	r2, r1, #30
    4ec2:	d503      	bpl.n	4ecc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x11c>
    4ec4:	6a22      	ldr	r2, [r4, #32]
    4ec6:	78d2      	ldrb	r2, [r2, #3]
    4ec8:	2a02      	cmp	r2, #2
    4eca:	d001      	beq.n	4ed0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
    4ecc:	4308      	orrs	r0, r1
    4ece:	d1f4      	bne.n	4eba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10a>
    4ed0:	2000      	movs	r0, #0
    4ed2:	bd70      	pop	{r4, r5, r6, pc}
    4ed4:	200000b0 	.word	0x200000b0
    4ed8:	b510      	push	{r4, lr}
    4eda:	4c08      	ldr	r4, [pc, #32]	; (4efc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x14c>)
    4edc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    4ede:	b138      	cbz	r0, 4ef0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x140>
    4ee0:	8962      	ldrh	r2, [r4, #10]
    4ee2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    4ee4:	1cd2      	adds	r2, r2, #3
    4ee6:	f007 f93c 	bl	c162 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4eea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    4eec:	6260      	str	r0, [r4, #36]	; 0x24
    4eee:	bd10      	pop	{r4, pc}
    4ef0:	f240 4114 	movw	r1, #1044	; 0x414
    4ef4:	2027      	movs	r0, #39	; 0x27
    4ef6:	f7fe ff31 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4efa:	0000      	.short	0x0000
    4efc:	200000b0 	.word	0x200000b0
    4f00:	b510      	push	{r4, lr}
    4f02:	f7ff ff79 	bl	4df8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    4f06:	4604      	mov	r4, r0
    4f08:	f7ff ff7c 	bl	4e04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4f0c:	4601      	mov	r1, r0
    4f0e:	7b42      	ldrb	r2, [r0, #13]
    4f10:	4815      	ldr	r0, [pc, #84]	; (4f68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1b8>)
    4f12:	2a24      	cmp	r2, #36	; 0x24
    4f14:	d00e      	beq.n	4f34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x184>
    4f16:	7b89      	ldrb	r1, [r1, #14]
    4f18:	2924      	cmp	r1, #36	; 0x24
    4f1a:	d00b      	beq.n	4f34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x184>
    4f1c:	2a1f      	cmp	r2, #31
    4f1e:	d00d      	beq.n	4f3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18c>
    4f20:	2a20      	cmp	r2, #32
    4f22:	d00b      	beq.n	4f3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18c>
    4f24:	2922      	cmp	r1, #34	; 0x22
    4f26:	d00f      	beq.n	4f48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x198>
    4f28:	f894 0066 	ldrb.w	r0, [r4, #102]	; 0x66
    4f2c:	2804      	cmp	r0, #4
    4f2e:	d100      	bne.n	4f32 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x182>
    4f30:	2008      	movs	r0, #8
    4f32:	bd10      	pop	{r4, pc}
    4f34:	6840      	ldr	r0, [r0, #4]
    4f36:	f890 118e 	ldrb.w	r1, [r0, #398]	; 0x18e
    4f3a:	e00e      	b.n	4f5a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1aa>
    4f3c:	2922      	cmp	r1, #34	; 0x22
    4f3e:	d003      	beq.n	4f48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x198>
    4f40:	6840      	ldr	r0, [r0, #4]
    4f42:	f890 01a8 	ldrb.w	r0, [r0, #424]	; 0x1a8
    4f46:	e005      	b.n	4f54 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a4>
    4f48:	6841      	ldr	r1, [r0, #4]
    4f4a:	f891 01a8 	ldrb.w	r0, [r1, #424]	; 0x1a8
    4f4e:	f891 105f 	ldrb.w	r1, [r1, #95]	; 0x5f
    4f52:	4008      	ands	r0, r1
    4f54:	f008 f9c8 	bl	d2e8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    4f58:	4601      	mov	r1, r0
    4f5a:	f894 0066 	ldrb.w	r0, [r4, #102]	; 0x66
    4f5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4f62:	f008 b9ec 	b.w	d33e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x5a>
    4f66:	0000      	.short	0x0000
    4f68:	200000e8 	.word	0x200000e8
    4f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4f70:	4688      	mov	r8, r1
    4f72:	4606      	mov	r6, r0
    4f74:	f7ff ff46 	bl	4e04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4f78:	4c45      	ldr	r4, [pc, #276]	; (5090 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e0>)
    4f7a:	2700      	movs	r7, #0
    4f7c:	4605      	mov	r5, r0
    4f7e:	f88d 7000 	strb.w	r7, [sp]
    4f82:	7820      	ldrb	r0, [r4, #0]
    4f84:	2802      	cmp	r0, #2
    4f86:	d004      	beq.n	4f92 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1e2>
    4f88:	f240 4166 	movw	r1, #1126	; 0x466
    4f8c:	2027      	movs	r0, #39	; 0x27
    4f8e:	f7fe fee5 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4f92:	7ba0      	ldrb	r0, [r4, #14]
    4f94:	0640      	lsls	r0, r0, #25
    4f96:	d406      	bmi.n	4fa6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1f6>
    4f98:	2040      	movs	r0, #64	; 0x40
    4f9a:	f7ff ff39 	bl	4e10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    4f9e:	89e0      	ldrh	r0, [r4, #14]
    4fa0:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    4fa4:	81e0      	strh	r0, [r4, #14]
    4fa6:	483b      	ldr	r0, [pc, #236]	; (5094 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e4>)
    4fa8:	b3ee      	cbz	r6, 5026 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x276>
    4faa:	7941      	ldrb	r1, [r0, #5]
    4fac:	1c49      	adds	r1, r1, #1
    4fae:	7141      	strb	r1, [r0, #5]
    4fb0:	7ce8      	ldrb	r0, [r5, #19]
    4fb2:	f005 fd67 	bl	aa84 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    4fb6:	f005 fd4b 	bl	aa50 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    4fba:	b968      	cbnz	r0, 4fd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x228>
    4fbc:	7ce8      	ldrb	r0, [r5, #19]
    4fbe:	b158      	cbz	r0, 4fd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x228>
    4fc0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4fc2:	7841      	ldrb	r1, [r0, #1]
    4fc4:	b141      	cbz	r1, 4fd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x228>
    4fc6:	7800      	ldrb	r0, [r0, #0]
    4fc8:	7a29      	ldrb	r1, [r5, #8]
    4fca:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    4fce:	4288      	cmp	r0, r1
    4fd0:	d102      	bne.n	4fd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x228>
    4fd2:	2001      	movs	r0, #1
    4fd4:	70a0      	strb	r0, [r4, #2]
    4fd6:	e043      	b.n	5060 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b0>
    4fd8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4fda:	7841      	ldrb	r1, [r0, #1]
    4fdc:	8161      	strh	r1, [r4, #10]
    4fde:	b121      	cbz	r1, 4fea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23a>
    4fe0:	6b60      	ldr	r0, [r4, #52]	; 0x34
    4fe2:	f008 f820 	bl	d026 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    4fe6:	62a0      	str	r0, [r4, #40]	; 0x28
    4fe8:	e000      	b.n	4fec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23c>
    4fea:	62a7      	str	r7, [r4, #40]	; 0x28
    4fec:	89e0      	ldrh	r0, [r4, #14]
    4fee:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    4ff2:	81e0      	strh	r0, [r4, #14]
    4ff4:	70e7      	strb	r7, [r4, #3]
    4ff6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4ff8:	79e9      	ldrb	r1, [r5, #7]
    4ffa:	7800      	ldrb	r0, [r0, #0]
    4ffc:	f3c0 0080 	ubfx	r0, r0, #2, #1
    5000:	4288      	cmp	r0, r1
    5002:	d005      	beq.n	5010 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x260>
    5004:	f000 f92a 	bl	525c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ac>
    5008:	89e0      	ldrh	r0, [r4, #14]
    500a:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    500e:	81e0      	strh	r0, [r4, #14]
    5010:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5012:	7a29      	ldrb	r1, [r5, #8]
    5014:	7800      	ldrb	r0, [r0, #0]
    5016:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    501a:	4288      	cmp	r0, r1
    501c:	d10f      	bne.n	503e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x28e>
    501e:	4668      	mov	r0, sp
    5020:	f000 f8d8 	bl	51d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x424>
    5024:	e00b      	b.n	503e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x28e>
    5026:	e7ff      	b.n	5028 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x278>
    5028:	7981      	ldrb	r1, [r0, #6]
    502a:	1c49      	adds	r1, r1, #1
    502c:	7181      	strb	r1, [r0, #6]
    502e:	7ce8      	ldrb	r0, [r5, #19]
    5030:	b108      	cbz	r0, 5036 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x286>
    5032:	f005 fd21 	bl	aa78 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    5036:	89e0      	ldrh	r0, [r4, #14]
    5038:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    503c:	81e0      	strh	r0, [r4, #14]
    503e:	f1b8 0f00 	cmp.w	r8, #0
    5042:	d104      	bne.n	504e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x29e>
    5044:	4631      	mov	r1, r6
    5046:	2001      	movs	r0, #1
    5048:	f7ff ff12 	bl	4e70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xc0>
    504c:	b160      	cbz	r0, 5068 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b8>
    504e:	f89d 0000 	ldrb.w	r0, [sp]
    5052:	b110      	cbz	r0, 505a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2aa>
    5054:	2000      	movs	r0, #0
    5056:	f7ff fe27 	bl	4ca8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    505a:	b10e      	cbz	r6, 5060 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b0>
    505c:	f7ff fede 	bl	4e1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5060:	f000 f860 	bl	5124 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x374>
    5064:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5068:	f89d 0000 	ldrb.w	r0, [sp]
    506c:	b110      	cbz	r0, 5074 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2c4>
    506e:	2001      	movs	r0, #1
    5070:	f7ff fe1a 	bl	4ca8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5074:	2000      	movs	r0, #0
    5076:	f000 f991 	bl	539c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ec>
    507a:	f89d 0000 	ldrb.w	r0, [sp]
    507e:	b110      	cbz	r0, 5086 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d6>
    5080:	2002      	movs	r0, #2
    5082:	f7ff fe11 	bl	4ca8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5086:	2e00      	cmp	r6, #0
    5088:	d0ec      	beq.n	5064 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b4>
    508a:	f7ff fec7 	bl	4e1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    508e:	e7e9      	b.n	5064 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b4>
    5090:	200000b0 	.word	0x200000b0
    5094:	20000a4a 	.word	0x20000a4a
    5098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    509c:	460e      	mov	r6, r1
    509e:	4680      	mov	r8, r0
    50a0:	f7ff feb0 	bl	4e04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    50a4:	4d1e      	ldr	r5, [pc, #120]	; (5120 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x370>)
    50a6:	4604      	mov	r4, r0
    50a8:	7828      	ldrb	r0, [r5, #0]
    50aa:	2801      	cmp	r0, #1
    50ac:	d004      	beq.n	50b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x308>
    50ae:	f240 4123 	movw	r1, #1059	; 0x423
    50b2:	2027      	movs	r0, #39	; 0x27
    50b4:	f7fe fe52 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    50b8:	7860      	ldrb	r0, [r4, #1]
    50ba:	2701      	movs	r7, #1
    50bc:	b130      	cbz	r0, 50cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x31c>
    50be:	2000      	movs	r0, #0
    50c0:	7060      	strb	r0, [r4, #1]
    50c2:	4601      	mov	r1, r0
    50c4:	2004      	movs	r0, #4
    50c6:	f7ff fe8f 	bl	4de8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    50ca:	70e7      	strb	r7, [r4, #3]
    50cc:	6a29      	ldr	r1, [r5, #32]
    50ce:	7808      	ldrb	r0, [r1, #0]
    50d0:	43c0      	mvns	r0, r0
    50d2:	0780      	lsls	r0, r0, #30
    50d4:	d109      	bne.n	50ea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x33a>
    50d6:	79a0      	ldrb	r0, [r4, #6]
    50d8:	b9d0      	cbnz	r0, 5110 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x360>
    50da:	2002      	movs	r0, #2
    50dc:	f7ff fe84 	bl	4de8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    50e0:	6a28      	ldr	r0, [r5, #32]
    50e2:	7800      	ldrb	r0, [r0, #0]
    50e4:	43c0      	mvns	r0, r0
    50e6:	0780      	lsls	r0, r0, #30
    50e8:	d012      	beq.n	5110 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x360>
    50ea:	6a28      	ldr	r0, [r5, #32]
    50ec:	7840      	ldrb	r0, [r0, #1]
    50ee:	b110      	cbz	r0, 50f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x346>
    50f0:	2002      	movs	r0, #2
    50f2:	71a0      	strb	r0, [r4, #6]
    50f4:	e000      	b.n	50f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x348>
    50f6:	71a7      	strb	r7, [r4, #6]
    50f8:	ea36 0608 	bics.w	r6, r6, r8
    50fc:	d004      	beq.n	5108 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x358>
    50fe:	2101      	movs	r1, #1
    5100:	2000      	movs	r0, #0
    5102:	f7ff feb5 	bl	4e70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xc0>
    5106:	b128      	cbz	r0, 5114 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x364>
    5108:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    510c:	f000 b80a 	b.w	5124 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x374>
    5110:	2003      	movs	r0, #3
    5112:	e7ee      	b.n	50f2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x342>
    5114:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5118:	2000      	movs	r0, #0
    511a:	f000 b8ed 	b.w	52f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x548>
    511e:	0000      	.short	0x0000
    5120:	200000b0 	.word	0x200000b0
    5124:	b510      	push	{r4, lr}
    5126:	f005 fd45 	bl	abb4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    512a:	f005 fc33 	bl	a994 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    512e:	4c0d      	ldr	r4, [pc, #52]	; (5164 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    5130:	89e0      	ldrh	r0, [r4, #14]
    5132:	f7ff fe6d 	bl	4e10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5136:	69e2      	ldr	r2, [r4, #28]
    5138:	7961      	ldrb	r1, [r4, #5]
    513a:	78a0      	ldrb	r0, [r4, #2]
    513c:	4790      	blx	r2
    513e:	480a      	ldr	r0, [pc, #40]	; (5168 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>)
    5140:	7c40      	ldrb	r0, [r0, #17]
    5142:	b160      	cbz	r0, 515e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ae>
    5144:	4808      	ldr	r0, [pc, #32]	; (5168 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>)
    5146:	3852      	subs	r0, #82	; 0x52
    5148:	f850 1f52 	ldr.w	r1, [r0, #82]!
    514c:	6081      	str	r1, [r0, #8]
    514e:	6841      	ldr	r1, [r0, #4]
    5150:	60c1      	str	r1, [r0, #12]
    5152:	4805      	ldr	r0, [pc, #20]	; (5168 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>)
    5154:	2101      	movs	r1, #1
    5156:	7401      	strb	r1, [r0, #16]
    5158:	79e0      	ldrb	r0, [r4, #7]
    515a:	f7fe fc4f 	bl	39fc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    515e:	2000      	movs	r0, #0
    5160:	7020      	strb	r0, [r4, #0]
    5162:	bd10      	pop	{r4, pc}
    5164:	200000b0 	.word	0x200000b0
    5168:	20000a4a 	.word	0x20000a4a
    516c:	4808      	ldr	r0, [pc, #32]	; (5190 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e0>)
    516e:	b510      	push	{r4, lr}
    5170:	7800      	ldrb	r0, [r0, #0]
    5172:	2802      	cmp	r0, #2
    5174:	d004      	beq.n	5180 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d0>
    5176:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
    517a:	2027      	movs	r0, #39	; 0x27
    517c:	f7fe fdee 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5180:	4904      	ldr	r1, [pc, #16]	; (5194 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e4>)
    5182:	2001      	movs	r0, #1
    5184:	71c8      	strb	r0, [r1, #7]
    5186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    518a:	f7ff bfcb 	b.w	5124 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x374>
    518e:	0000      	.short	0x0000
    5190:	200000b0 	.word	0x200000b0
    5194:	20000a4a 	.word	0x20000a4a
    5198:	b430      	push	{r4, r5}
    519a:	4b0d      	ldr	r3, [pc, #52]	; (51d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>)
    519c:	b94a      	cbnz	r2, 51b2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x402>
    519e:	7a1a      	ldrb	r2, [r3, #8]
    51a0:	7a5c      	ldrb	r4, [r3, #9]
    51a2:	42a2      	cmp	r2, r4
    51a4:	d105      	bne.n	51b2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x402>
    51a6:	f890 2067 	ldrb.w	r2, [r0, #103]	; 0x67
    51aa:	f890 4066 	ldrb.w	r4, [r0, #102]	; 0x66
    51ae:	42a2      	cmp	r2, r4
    51b0:	d00b      	beq.n	51ca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x41a>
    51b2:	b131      	cbz	r1, 51c2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x412>
    51b4:	7a1a      	ldrb	r2, [r3, #8]
    51b6:	f890 1067 	ldrb.w	r1, [r0, #103]	; 0x67
    51ba:	bc30      	pop	{r4, r5}
    51bc:	4610      	mov	r0, r2
    51be:	f006 b88b 	b.w	b2d8 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    51c2:	7a5a      	ldrb	r2, [r3, #9]
    51c4:	f890 1066 	ldrb.w	r1, [r0, #102]	; 0x66
    51c8:	e7f7      	b.n	51ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40a>
    51ca:	bc30      	pop	{r4, r5}
    51cc:	4770      	bx	lr
    51ce:	0000      	.short	0x0000
    51d0:	200000b0 	.word	0x200000b0
    51d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    51d8:	4607      	mov	r7, r0
    51da:	f7ff fe13 	bl	4e04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    51de:	4604      	mov	r4, r0
    51e0:	481d      	ldr	r0, [pc, #116]	; (5258 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a8>)
    51e2:	2600      	movs	r6, #0
    51e4:	2501      	movs	r5, #1
    51e6:	6a41      	ldr	r1, [r0, #36]	; 0x24
    51e8:	780a      	ldrb	r2, [r1, #0]
    51ea:	f002 0203 	and.w	r2, r2, #3
    51ee:	2a01      	cmp	r2, #1
    51f0:	d015      	beq.n	521e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x46e>
    51f2:	2a02      	cmp	r2, #2
    51f4:	d013      	beq.n	521e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x46e>
    51f6:	2a03      	cmp	r2, #3
    51f8:	d003      	beq.n	5202 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x452>
    51fa:	7941      	ldrb	r1, [r0, #5]
    51fc:	f041 0104 	orr.w	r1, r1, #4
    5200:	e024      	b.n	524c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x49c>
    5202:	7065      	strb	r5, [r4, #1]
    5204:	89c2      	ldrh	r2, [r0, #14]
    5206:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    520a:	81c2      	strh	r2, [r0, #14]
    520c:	2001      	movs	r0, #1
    520e:	f7ff fdeb 	bl	4de8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5212:	e01d      	b.n	5250 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a0>
    5214:	7226      	strb	r6, [r4, #8]
    5216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    521a:	7225      	strb	r5, [r4, #8]
    521c:	e7fb      	b.n	5216 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x466>
    521e:	7849      	ldrb	r1, [r1, #1]
    5220:	b1b1      	cbz	r1, 5250 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a0>
    5222:	89c2      	ldrh	r2, [r0, #14]
    5224:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    5228:	81c2      	strh	r2, [r0, #14]
    522a:	6a82      	ldr	r2, [r0, #40]	; 0x28
    522c:	2a00      	cmp	r2, #0
    522e:	d0f2      	beq.n	5216 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x466>
    5230:	29fb      	cmp	r1, #251	; 0xfb
    5232:	d808      	bhi.n	5246 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x496>
    5234:	7980      	ldrb	r0, [r0, #6]
    5236:	b120      	cbz	r0, 5242 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x492>
    5238:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    523c:	2020      	movs	r0, #32
    523e:	f7ff bde7 	b.w	4e10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5242:	703d      	strb	r5, [r7, #0]
    5244:	e7e7      	b.n	5216 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x466>
    5246:	7941      	ldrb	r1, [r0, #5]
    5248:	f041 0110 	orr.w	r1, r1, #16
    524c:	7141      	strb	r1, [r0, #5]
    524e:	e7e2      	b.n	5216 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x466>
    5250:	7a20      	ldrb	r0, [r4, #8]
    5252:	2801      	cmp	r0, #1
    5254:	d1e1      	bne.n	521a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x46a>
    5256:	e7dd      	b.n	5214 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x464>
    5258:	200000b0 	.word	0x200000b0
    525c:	b570      	push	{r4, r5, r6, lr}
    525e:	f7ff fdd1 	bl	4e04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5262:	4604      	mov	r4, r0
    5264:	7980      	ldrb	r0, [r0, #6]
    5266:	2800      	cmp	r0, #0
    5268:	d02f      	beq.n	52ca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x51a>
    526a:	2802      	cmp	r0, #2
    526c:	d10e      	bne.n	528c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4dc>
    526e:	4d1c      	ldr	r5, [pc, #112]	; (52e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x530>)
    5270:	6b28      	ldr	r0, [r5, #48]	; 0x30
    5272:	f007 fcde 	bl	cc32 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    5276:	b348      	cbz	r0, 52cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x51c>
    5278:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
    527c:	1c40      	adds	r0, r0, #1
    527e:	f141 0100 	adc.w	r1, r1, #0
    5282:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
    5286:	79e8      	ldrb	r0, [r5, #7]
    5288:	f7fe fbb8 	bl	39fc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    528c:	2500      	movs	r5, #0
    528e:	71a5      	strb	r5, [r4, #6]
    5290:	78e0      	ldrb	r0, [r4, #3]
    5292:	b120      	cbz	r0, 529e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ee>
    5294:	70e5      	strb	r5, [r4, #3]
    5296:	2100      	movs	r1, #0
    5298:	2010      	movs	r0, #16
    529a:	f7ff fda5 	bl	4de8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    529e:	78a0      	ldrb	r0, [r4, #2]
    52a0:	b170      	cbz	r0, 52c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x510>
    52a2:	70a5      	strb	r5, [r4, #2]
    52a4:	f7ff fb52 	bl	494c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    52a8:	b198      	cbz	r0, 52d2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x522>
    52aa:	2100      	movs	r1, #0
    52ac:	2008      	movs	r0, #8
    52ae:	f7ff fd9b 	bl	4de8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    52b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
    52b6:	1c40      	adds	r0, r0, #1
    52b8:	f141 0100 	adc.w	r1, r1, #0
    52bc:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
    52c0:	79e0      	ldrb	r0, [r4, #7]
    52c2:	2801      	cmp	r0, #1
    52c4:	d00a      	beq.n	52dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52c>
    52c6:	2001      	movs	r0, #1
    52c8:	71e0      	strb	r0, [r4, #7]
    52ca:	bd70      	pop	{r4, r5, r6, pc}
    52cc:	f44f 715a 	mov.w	r1, #872	; 0x368
    52d0:	e001      	b.n	52d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x526>
    52d2:	f44f 7160 	mov.w	r1, #896	; 0x380
    52d6:	2027      	movs	r0, #39	; 0x27
    52d8:	f7fe fd40 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    52dc:	71e5      	strb	r5, [r4, #7]
    52de:	bd70      	pop	{r4, r5, r6, pc}
    52e0:	200000b0 	.word	0x200000b0
    52e4:	4803      	ldr	r0, [pc, #12]	; (52f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x544>)
    52e6:	7800      	ldrb	r0, [r0, #0]
    52e8:	2800      	cmp	r0, #0
    52ea:	d001      	beq.n	52f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x540>
    52ec:	f7ff bf1a 	b.w	5124 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x374>
    52f0:	4770      	bx	lr
    52f2:	0000      	.short	0x0000
    52f4:	200000b0 	.word	0x200000b0
    52f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    52fc:	4681      	mov	r9, r0
    52fe:	f7ff fd7b 	bl	4df8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5302:	4604      	mov	r4, r0
    5304:	f7ff fd7e 	bl	4e04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5308:	4607      	mov	r7, r0
    530a:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
    530c:	8f21      	ldrh	r1, [r4, #56]	; 0x38
    530e:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
    5312:	7cc0      	ldrb	r0, [r0, #19]
    5314:	f008 f800 	bl	d318 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    5318:	4d1d      	ldr	r5, [pc, #116]	; (5390 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e0>)
    531a:	4606      	mov	r6, r0
    531c:	464a      	mov	r2, r9
    531e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    5320:	6268      	str	r0, [r5, #36]	; 0x24
    5322:	2101      	movs	r1, #1
    5324:	4620      	mov	r0, r4
    5326:	f7ff ff37 	bl	5198 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e8>
    532a:	7cf8      	ldrb	r0, [r7, #19]
    532c:	f04f 0800 	mov.w	r8, #0
    5330:	b1b8      	cbz	r0, 5362 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b2>
    5332:	4818      	ldr	r0, [pc, #96]	; (5394 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e4>)
    5334:	f005 fee0 	bl	b0f8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5338:	4817      	ldr	r0, [pc, #92]	; (5398 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>)
    533a:	2101      	movs	r1, #1
    533c:	7601      	strb	r1, [r0, #24]
    533e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
    5342:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5346:	4a13      	ldr	r2, [pc, #76]	; (5394 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e4>)
    5348:	6a69      	ldr	r1, [r5, #36]	; 0x24
    534a:	f005 fb13 	bl	a974 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>
    534e:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    5352:	f007 ffd3 	bl	d2fc <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    5356:	4602      	mov	r2, r0
    5358:	4631      	mov	r1, r6
    535a:	2001      	movs	r0, #1
    535c:	f005 fb38 	bl	a9d0 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>
    5360:	e004      	b.n	536c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5bc>
    5362:	6a68      	ldr	r0, [r5, #36]	; 0x24
    5364:	f005 fec8 	bl	b0f8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5368:	f005 fb14 	bl	a994 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    536c:	f1b9 0f00 	cmp.w	r9, #0
    5370:	d102      	bne.n	5378 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c8>
    5372:	4640      	mov	r0, r8
    5374:	f005 fd5a 	bl	ae2c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    5378:	2100      	movs	r1, #0
    537a:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
    537e:	2201      	movs	r2, #1
    5380:	4608      	mov	r0, r1
    5382:	f005 ff43 	bl	b20c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    5386:	2002      	movs	r0, #2
    5388:	7028      	strb	r0, [r5, #0]
    538a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    538e:	0000      	.short	0x0000
    5390:	200000b0 	.word	0x200000b0
    5394:	200008f8 	.word	0x200008f8
    5398:	20000a00 	.word	0x20000a00
    539c:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    53a0:	4604      	mov	r4, r0
    53a2:	f7ff fd2f 	bl	4e04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    53a6:	4606      	mov	r6, r0
    53a8:	f7ff fd26 	bl	4df8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    53ac:	4605      	mov	r5, r0
    53ae:	f8df 9188 	ldr.w	r9, [pc, #392]	; 5538 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x788>
    53b2:	4622      	mov	r2, r4
    53b4:	2100      	movs	r1, #0
    53b6:	f7ff feef 	bl	5198 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e8>
    53ba:	79b0      	ldrb	r0, [r6, #6]
    53bc:	2701      	movs	r7, #1
    53be:	f04f 0800 	mov.w	r8, #0
    53c2:	f1a9 0420 	sub.w	r4, r9, #32
    53c6:	b140      	cbz	r0, 53da <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x62a>
    53c8:	2801      	cmp	r0, #1
    53ca:	d028      	beq.n	541e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x66e>
    53cc:	2802      	cmp	r0, #2
    53ce:	d039      	beq.n	5444 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x694>
    53d0:	2803      	cmp	r0, #3
    53d2:	d045      	beq.n	5460 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6b0>
    53d4:	f44f 711d 	mov.w	r1, #628	; 0x274
    53d8:	e061      	b.n	549e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ee>
    53da:	f7ff fd91 	bl	4f00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x150>
    53de:	4601      	mov	r1, r0
    53e0:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
    53e2:	f008 f898 	bl	d516 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    53e6:	8e29      	ldrh	r1, [r5, #48]	; 0x30
    53e8:	4281      	cmp	r1, r0
    53ea:	d200      	bcs.n	53ee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x63e>
    53ec:	4608      	mov	r0, r1
    53ee:	214c      	movs	r1, #76	; 0x4c
    53f0:	f8ad 0004 	strh.w	r0, [sp, #4]
    53f4:	5348      	strh	r0, [r1, r5]
    53f6:	4648      	mov	r0, r9
    53f8:	f7ff fad2 	bl	49a0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    53fc:	b128      	cbz	r0, 540a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x65a>
    53fe:	2080      	movs	r0, #128	; 0x80
    5400:	6a21      	ldr	r1, [r4, #32]
    5402:	f7ff fcf1 	bl	4de8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5406:	70b7      	strb	r7, [r6, #2]
    5408:	e02e      	b.n	5468 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6b8>
    540a:	466a      	mov	r2, sp
    540c:	a901      	add	r1, sp, #4
    540e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5410:	f007 ff9f 	bl	d352 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x6e>
    5414:	6220      	str	r0, [r4, #32]
    5416:	b110      	cbz	r0, 541e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x66e>
    5418:	f896 103b 	ldrb.w	r1, [r6, #59]	; 0x3b
    541c:	b111      	cbz	r1, 5424 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x674>
    541e:	4847      	ldr	r0, [pc, #284]	; (553c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78c>)
    5420:	6220      	str	r0, [r4, #32]
    5422:	e021      	b.n	5468 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6b8>
    5424:	f89d 1000 	ldrb.w	r1, [sp]
    5428:	b931      	cbnz	r1, 5438 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x688>
    542a:	f8a0 8000 	strh.w	r8, [r0]
    542e:	f880 8002 	strb.w	r8, [r0, #2]
    5432:	2101      	movs	r1, #1
    5434:	f008 fae4 	bl	da00 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    5438:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    543c:	6a20      	ldr	r0, [r4, #32]
    543e:	f008 faa3 	bl	d988 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    5442:	e011      	b.n	5468 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6b8>
    5444:	f8b5 004c 	ldrh.w	r0, [r5, #76]	; 0x4c
    5448:	f8ad 0004 	strh.w	r0, [sp, #4]
    544c:	466a      	mov	r2, sp
    544e:	a901      	add	r1, sp, #4
    5450:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5452:	f007 ff7e 	bl	d352 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x6e>
    5456:	6220      	str	r0, [r4, #32]
    5458:	b930      	cbnz	r0, 5468 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6b8>
    545a:	f240 2165 	movw	r1, #613	; 0x265
    545e:	e01e      	b.n	549e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ee>
    5460:	4648      	mov	r0, r9
    5462:	f7ff fa9d 	bl	49a0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    5466:	b1c0      	cbz	r0, 549a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ea>
    5468:	6a20      	ldr	r0, [r4, #32]
    546a:	2308      	movs	r3, #8
    546c:	7801      	ldrb	r1, [r0, #0]
    546e:	f021 0108 	bic.w	r1, r1, #8
    5472:	7001      	strb	r1, [r0, #0]
    5474:	79f2      	ldrb	r2, [r6, #7]
    5476:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    547a:	4311      	orrs	r1, r2
    547c:	f021 0104 	bic.w	r1, r1, #4
    5480:	7001      	strb	r1, [r0, #0]
    5482:	7a32      	ldrb	r2, [r6, #8]
    5484:	2304      	movs	r3, #4
    5486:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    548a:	4311      	orrs	r1, r2
    548c:	f021 0110 	bic.w	r1, r1, #16
    5490:	7001      	strb	r1, [r0, #0]
    5492:	43c9      	mvns	r1, r1
    5494:	0789      	lsls	r1, r1, #30
    5496:	d005      	beq.n	54a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f4>
    5498:	e007      	b.n	54aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6fa>
    549a:	f240 216e 	movw	r1, #622	; 0x26e
    549e:	2027      	movs	r0, #39	; 0x27
    54a0:	f7fe fc5c 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    54a4:	78c0      	ldrb	r0, [r0, #3]
    54a6:	2802      	cmp	r0, #2
    54a8:	d00f      	beq.n	54ca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71a>
    54aa:	6b20      	ldr	r0, [r4, #48]	; 0x30
    54ac:	f007 fce6 	bl	ce7c <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    54b0:	b108      	cbz	r0, 54b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x706>
    54b2:	2101      	movs	r1, #1
    54b4:	e00a      	b.n	54cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
    54b6:	6a20      	ldr	r0, [r4, #32]
    54b8:	7800      	ldrb	r0, [r0, #0]
    54ba:	43c0      	mvns	r0, r0
    54bc:	0780      	lsls	r0, r0, #30
    54be:	d004      	beq.n	54ca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71a>
    54c0:	f7ff fa2c 	bl	491c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    54c4:	f080 0101 	eor.w	r1, r0, #1
    54c8:	e000      	b.n	54cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
    54ca:	2100      	movs	r1, #0
    54cc:	6a20      	ldr	r0, [r4, #32]
    54ce:	7802      	ldrb	r2, [r0, #0]
    54d0:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    54d4:	7001      	strb	r1, [r0, #0]
    54d6:	7cb1      	ldrb	r1, [r6, #18]
    54d8:	b1d1      	cbz	r1, 5510 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x760>
    54da:	7841      	ldrb	r1, [r0, #1]
    54dc:	b1c1      	cbz	r1, 5510 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x760>
    54de:	4818      	ldr	r0, [pc, #96]	; (5540 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x790>)
    54e0:	f005 fe0a 	bl	b0f8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    54e4:	4815      	ldr	r0, [pc, #84]	; (553c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78c>)
    54e6:	3828      	subs	r0, #40	; 0x28
    54e8:	f880 8018 	strb.w	r8, [r0, #24]
    54ec:	e9d6 1212 	ldrd	r1, r2, [r6, #72]	; 0x48
    54f0:	e9c0 1204 	strd	r1, r2, [r0, #16]
    54f4:	4912      	ldr	r1, [pc, #72]	; (5540 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x790>)
    54f6:	6a22      	ldr	r2, [r4, #32]
    54f8:	f005 fa3c 	bl	a974 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>
    54fc:	f895 0066 	ldrb.w	r0, [r5, #102]	; 0x66
    5500:	f007 fefc 	bl	d2fc <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    5504:	4602      	mov	r2, r0
    5506:	21fb      	movs	r1, #251	; 0xfb
    5508:	2000      	movs	r0, #0
    550a:	f005 fa61 	bl	a9d0 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>
    550e:	e003      	b.n	5518 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>
    5510:	f005 fdf2 	bl	b0f8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5514:	f005 fa3e 	bl	a994 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5518:	2201      	movs	r2, #1
    551a:	f895 3067 	ldrb.w	r3, [r5, #103]	; 0x67
    551e:	4611      	mov	r1, r2
    5520:	2000      	movs	r0, #0
    5522:	f005 fe73 	bl	b20c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    5526:	7127      	strb	r7, [r4, #4]
    5528:	6a20      	ldr	r0, [r4, #32]
    552a:	8801      	ldrh	r1, [r0, #0]
    552c:	8221      	strh	r1, [r4, #16]
    552e:	7880      	ldrb	r0, [r0, #2]
    5530:	74a0      	strb	r0, [r4, #18]
    5532:	7027      	strb	r7, [r4, #0]
    5534:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    5538:	200000d0 	.word	0x200000d0
    553c:	20000a28 	.word	0x20000a28
    5540:	200008f8 	.word	0x200008f8
    5544:	0000516d 	.word	0x0000516d
    5548:	00004f6d 	.word	0x00004f6d
    554c:	00005099 	.word	0x00005099
    5550:	000052e5 	.word	0x000052e5
    5554:	00007141 	.word	0x00007141

00005558 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    5558:	4800      	ldr	r0, [pc, #0]	; (555c <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    555a:	4770      	bx	lr
    555c:	20001205 	.word	0x20001205

00005560 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    5560:	4904      	ldr	r1, [pc, #16]	; (5574 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    5562:	788a      	ldrb	r2, [r1, #2]
    5564:	4282      	cmp	r2, r0
    5566:	d903      	bls.n	5570 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    5568:	4408      	add	r0, r1
    556a:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    556e:	4770      	bx	lr
    5570:	2000      	movs	r0, #0
    5572:	4770      	bx	lr
    5574:	20001032 	.word	0x20001032

00005578 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    5578:	4904      	ldr	r1, [pc, #16]	; (558c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    557a:	788a      	ldrb	r2, [r1, #2]
    557c:	4282      	cmp	r2, r0
    557e:	d903      	bls.n	5588 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    5580:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    5584:	3083      	adds	r0, #131	; 0x83
    5586:	4770      	bx	lr
    5588:	2000      	movs	r0, #0
    558a:	4770      	bx	lr
    558c:	20001032 	.word	0x20001032

00005590 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    5590:	4a05      	ldr	r2, [pc, #20]	; (55a8 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    5592:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5596:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    559a:	6802      	ldr	r2, [r0, #0]
    559c:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    55a0:	8880      	ldrh	r0, [r0, #4]
    55a2:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    55a6:	4770      	bx	lr
    55a8:	20001032 	.word	0x20001032

000055ac <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    55ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    55b0:	460e      	mov	r6, r1
    55b2:	4607      	mov	r7, r0
    55b4:	4615      	mov	r5, r2
    55b6:	2106      	movs	r1, #6
    55b8:	4630      	mov	r0, r6
    55ba:	f008 f8cb 	bl	d754 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    55be:	4c0d      	ldr	r4, [pc, #52]	; (55f4 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    55c0:	b160      	cbz	r0, 55dc <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    55c2:	2000      	movs	r0, #0
    55c4:	e004      	b.n	55d0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    55c6:	1821      	adds	r1, r4, r0
    55c8:	1c40      	adds	r0, r0, #1
    55ca:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    55ce:	b2c0      	uxtb	r0, r0
    55d0:	78a1      	ldrb	r1, [r4, #2]
    55d2:	4281      	cmp	r1, r0
    55d4:	d8f7      	bhi.n	55c6 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    55d6:	2001      	movs	r0, #1
    55d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    55dc:	4631      	mov	r1, r6
    55de:	4638      	mov	r0, r7
    55e0:	f007 fec6 	bl	d370 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    55e4:	2808      	cmp	r0, #8
    55e6:	d003      	beq.n	55f0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    55e8:	4420      	add	r0, r4
    55ea:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    55ee:	e7f2      	b.n	55d6 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    55f0:	2000      	movs	r0, #0
    55f2:	e7f1      	b.n	55d8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    55f4:	20001032 	.word	0x20001032

000055f8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    55f8:	4904      	ldr	r1, [pc, #16]	; (560c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    55fa:	788a      	ldrb	r2, [r1, #2]
    55fc:	4282      	cmp	r2, r0
    55fe:	d903      	bls.n	5608 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    5600:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    5604:	1cc0      	adds	r0, r0, #3
    5606:	4770      	bx	lr
    5608:	2000      	movs	r0, #0
    560a:	4770      	bx	lr
    560c:	20001032 	.word	0x20001032

00005610 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    5610:	b510      	push	{r4, lr}
    5612:	f240 12d3 	movw	r2, #467	; 0x1d3
    5616:	2100      	movs	r1, #0
    5618:	4808      	ldr	r0, [pc, #32]	; (563c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    561a:	f006 fe1c 	bl	c256 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    561e:	2208      	movs	r2, #8
    5620:	21ff      	movs	r1, #255	; 0xff
    5622:	4807      	ldr	r0, [pc, #28]	; (5640 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    5624:	f006 fe17 	bl	c256 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5628:	4805      	ldr	r0, [pc, #20]	; (5640 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    562a:	2100      	movs	r1, #0
    562c:	1f00      	subs	r0, r0, #4
    562e:	7001      	strb	r1, [r0, #0]
    5630:	7041      	strb	r1, [r0, #1]
    5632:	f44f 7161 	mov.w	r1, #900	; 0x384
    5636:	8041      	strh	r1, [r0, #2]
    5638:	bd10      	pop	{r4, pc}
    563a:	0000      	.short	0x0000
    563c:	20001032 	.word	0x20001032
    5640:	20000280 	.word	0x20000280

00005644 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    5644:	4901      	ldr	r1, [pc, #4]	; (564c <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    5646:	7008      	strb	r0, [r1, #0]
    5648:	4770      	bx	lr
    564a:	0000      	.short	0x0000
    564c:	2000027c 	.word	0x2000027c

00005650 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    5650:	4801      	ldr	r0, [pc, #4]	; (5658 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    5652:	7800      	ldrb	r0, [r0, #0]
    5654:	4770      	bx	lr
    5656:	0000      	.short	0x0000
    5658:	2000027c 	.word	0x2000027c

0000565c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    565c:	4b0b      	ldr	r3, [pc, #44]	; (568c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    565e:	b510      	push	{r4, lr}
    5660:	789c      	ldrb	r4, [r3, #2]
    5662:	4284      	cmp	r4, r0
    5664:	d90f      	bls.n	5686 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    5666:	4418      	add	r0, r3
    5668:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    566c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    5670:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    5674:	700b      	strb	r3, [r1, #0]
    5676:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    567a:	6011      	str	r1, [r2, #0]
    567c:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    5680:	8090      	strh	r0, [r2, #4]
    5682:	2001      	movs	r0, #1
    5684:	bd10      	pop	{r4, pc}
    5686:	2000      	movs	r0, #0
    5688:	bd10      	pop	{r4, pc}
    568a:	0000      	.short	0x0000
    568c:	20001032 	.word	0x20001032

00005690 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    5690:	4907      	ldr	r1, [pc, #28]	; (56b0 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    5692:	788a      	ldrb	r2, [r1, #2]
    5694:	4282      	cmp	r2, r0
    5696:	d909      	bls.n	56ac <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    5698:	4408      	add	r0, r1
    569a:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    569e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    56a2:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    56a6:	f000 0001 	and.w	r0, r0, #1
    56aa:	4770      	bx	lr
    56ac:	2000      	movs	r0, #0
    56ae:	4770      	bx	lr
    56b0:	20001032 	.word	0x20001032

000056b4 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    56b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    56b8:	4698      	mov	r8, r3
    56ba:	4691      	mov	r9, r2
    56bc:	460c      	mov	r4, r1
    56be:	4605      	mov	r5, r0
    56c0:	f000 f938 	bl	5934 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    56c4:	4606      	mov	r6, r0
    56c6:	2810      	cmp	r0, #16
    56c8:	d006      	beq.n	56d8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    56ca:	f000 f903 	bl	58d4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    56ce:	2810      	cmp	r0, #16
    56d0:	d002      	beq.n	56d8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    56d2:	2012      	movs	r0, #18
    56d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    56d8:	4f18      	ldr	r7, [pc, #96]	; (573c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    56da:	78b8      	ldrb	r0, [r7, #2]
    56dc:	2808      	cmp	r0, #8
    56de:	d22a      	bcs.n	5736 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    56e0:	2e10      	cmp	r6, #16
    56e2:	d105      	bne.n	56f0 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    56e4:	2200      	movs	r2, #0
    56e6:	4621      	mov	r1, r4
    56e8:	4628      	mov	r0, r5
    56ea:	f000 f907 	bl	58fc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xd0>
    56ee:	4606      	mov	r6, r0
    56f0:	78bc      	ldrb	r4, [r7, #2]
    56f2:	2210      	movs	r2, #16
    56f4:	1c60      	adds	r0, r4, #1
    56f6:	70b8      	strb	r0, [r7, #2]
    56f8:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    56fc:	1ce8      	adds	r0, r5, #3
    56fe:	4649      	mov	r1, r9
    5700:	f007 ff92 	bl	d628 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    5704:	f105 0083 	add.w	r0, r5, #131	; 0x83
    5708:	2210      	movs	r2, #16
    570a:	4641      	mov	r1, r8
    570c:	f007 ff8c 	bl	d628 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    5710:	2110      	movs	r1, #16
    5712:	4640      	mov	r0, r8
    5714:	f008 f81e 	bl	d754 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5718:	443c      	add	r4, r7
    571a:	2110      	movs	r1, #16
    571c:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    5720:	4648      	mov	r0, r9
    5722:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    5726:	f008 f815 	bl	d754 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    572a:	77e0      	strb	r0, [r4, #31]
    572c:	f804 6c29 	strb.w	r6, [r4, #-41]
    5730:	2000      	movs	r0, #0
    5732:	73e0      	strb	r0, [r4, #15]
    5734:	e7ce      	b.n	56d4 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    5736:	2007      	movs	r0, #7
    5738:	e7cc      	b.n	56d4 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    573a:	0000      	.short	0x0000
    573c:	20001032 	.word	0x20001032

00005740 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    5740:	4806      	ldr	r0, [pc, #24]	; (575c <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    5742:	b510      	push	{r4, lr}
    5744:	7880      	ldrb	r0, [r0, #2]
    5746:	1e40      	subs	r0, r0, #1
    5748:	b244      	sxtb	r4, r0
    574a:	e004      	b.n	5756 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    574c:	b2e0      	uxtb	r0, r4
    574e:	f000 f939 	bl	59c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x198>
    5752:	1e64      	subs	r4, r4, #1
    5754:	b264      	sxtb	r4, r4
    5756:	2c00      	cmp	r4, #0
    5758:	daf8      	bge.n	574c <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    575a:	bd10      	pop	{r4, pc}
    575c:	20001032 	.word	0x20001032

00005760 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    5760:	4801      	ldr	r0, [pc, #4]	; (5768 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    5762:	8840      	ldrh	r0, [r0, #2]
    5764:	4770      	bx	lr
    5766:	0000      	.short	0x0000
    5768:	2000027c 	.word	0x2000027c

0000576c <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    576c:	b138      	cbz	r0, 577e <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    576e:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    5772:	4288      	cmp	r0, r1
    5774:	d803      	bhi.n	577e <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    5776:	4903      	ldr	r1, [pc, #12]	; (5784 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    5778:	8048      	strh	r0, [r1, #2]
    577a:	2001      	movs	r0, #1
    577c:	4770      	bx	lr
    577e:	2000      	movs	r0, #0
    5780:	4770      	bx	lr
    5782:	0000      	.short	0x0000
    5784:	2000027c 	.word	0x2000027c

00005788 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    5788:	4905      	ldr	r1, [pc, #20]	; (57a0 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    578a:	788a      	ldrb	r2, [r1, #2]
    578c:	4282      	cmp	r2, r0
    578e:	d903      	bls.n	5798 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    5790:	4408      	add	r0, r1
    5792:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    5796:	b108      	cbz	r0, 579c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    5798:	2000      	movs	r0, #0
    579a:	4770      	bx	lr
    579c:	2001      	movs	r0, #1
    579e:	4770      	bx	lr
    57a0:	20001032 	.word	0x20001032

000057a4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    57a4:	b570      	push	{r4, r5, r6, lr}
    57a6:	460d      	mov	r5, r1
    57a8:	4606      	mov	r6, r0
    57aa:	f000 f8c3 	bl	5934 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    57ae:	4c10      	ldr	r4, [pc, #64]	; (57f0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    57b0:	2810      	cmp	r0, #16
    57b2:	d007      	beq.n	57c4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    57b4:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    57b8:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    57bc:	07c9      	lsls	r1, r1, #31
    57be:	d001      	beq.n	57c4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    57c0:	2001      	movs	r0, #1
    57c2:	bd70      	pop	{r4, r5, r6, pc}
    57c4:	7861      	ldrb	r1, [r4, #1]
    57c6:	2908      	cmp	r1, #8
    57c8:	d210      	bcs.n	57ec <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    57ca:	2810      	cmp	r0, #16
    57cc:	d008      	beq.n	57e0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    57ce:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    57d2:	2101      	movs	r1, #1
    57d4:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    57d8:	7860      	ldrb	r0, [r4, #1]
    57da:	1c40      	adds	r0, r0, #1
    57dc:	7060      	strb	r0, [r4, #1]
    57de:	e7ef      	b.n	57c0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    57e0:	2201      	movs	r2, #1
    57e2:	4629      	mov	r1, r5
    57e4:	4630      	mov	r0, r6
    57e6:	f000 f889 	bl	58fc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xd0>
    57ea:	e7f5      	b.n	57d8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    57ec:	2000      	movs	r0, #0
    57ee:	bd70      	pop	{r4, r5, r6, pc}
    57f0:	20001032 	.word	0x20001032

000057f4 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    57f4:	b570      	push	{r4, r5, r6, lr}
    57f6:	4d0b      	ldr	r5, [pc, #44]	; (5824 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    57f8:	7828      	ldrb	r0, [r5, #0]
    57fa:	1e40      	subs	r0, r0, #1
    57fc:	b244      	sxtb	r4, r0
    57fe:	e00a      	b.n	5816 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    5800:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    5804:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5808:	07c0      	lsls	r0, r0, #31
    580a:	d002      	beq.n	5812 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    580c:	b2e0      	uxtb	r0, r4
    580e:	f000 f921 	bl	5a54 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x228>
    5812:	1e64      	subs	r4, r4, #1
    5814:	b264      	sxtb	r4, r4
    5816:	2c00      	cmp	r4, #0
    5818:	daf2      	bge.n	5800 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    581a:	4903      	ldr	r1, [pc, #12]	; (5828 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    581c:	2000      	movs	r0, #0
    581e:	7048      	strb	r0, [r1, #1]
    5820:	bd70      	pop	{r4, r5, r6, pc}
    5822:	0000      	.short	0x0000
    5824:	20001032 	.word	0x20001032
    5828:	2000027c 	.word	0x2000027c

0000582c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    582c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5830:	2400      	movs	r4, #0
    5832:	4625      	mov	r5, r4
    5834:	4e18      	ldr	r6, [pc, #96]	; (5898 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    5836:	e029      	b.n	588c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    5838:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    583c:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    5840:	07c0      	lsls	r0, r0, #31
    5842:	d021      	beq.n	5888 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    5844:	4628      	mov	r0, r5
    5846:	f000 f845 	bl	58d4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    584a:	4603      	mov	r3, r0
    584c:	f7ff fed4 	bl	55f8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    5850:	4601      	mov	r1, r0
    5852:	2000      	movs	r0, #0
    5854:	2b10      	cmp	r3, #16
    5856:	d009      	beq.n	586c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    5858:	18f2      	adds	r2, r6, r3
    585a:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    585e:	f1bc 0f01 	cmp.w	ip, #1
    5862:	d002      	beq.n	586a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    5864:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    5868:	b102      	cbz	r2, 586c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    586a:	2001      	movs	r0, #1
    586c:	1e40      	subs	r0, r0, #1
    586e:	4201      	tst	r1, r0
    5870:	d10a      	bne.n	5888 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    5872:	480a      	ldr	r0, [pc, #40]	; (589c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    5874:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    5878:	5503      	strb	r3, [r0, r4]
    587a:	4620      	mov	r0, r4
    587c:	1c64      	adds	r4, r4, #1
    587e:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    5882:	b2e4      	uxtb	r4, r4
    5884:	f005 fe38 	bl	b4f8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    5888:	1c6d      	adds	r5, r5, #1
    588a:	b2ed      	uxtb	r5, r5
    588c:	7830      	ldrb	r0, [r6, #0]
    588e:	42a8      	cmp	r0, r5
    5890:	d8d2      	bhi.n	5838 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    5892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5896:	0000      	.short	0x0000
    5898:	20001032 	.word	0x20001032
    589c:	20000280 	.word	0x20000280
    58a0:	b570      	push	{r4, r5, r6, lr}
    58a2:	4b0a      	ldr	r3, [pc, #40]	; (58cc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    58a4:	781b      	ldrb	r3, [r3, #0]
    58a6:	b173      	cbz	r3, 58c6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9a>
    58a8:	4b09      	ldr	r3, [pc, #36]	; (58d0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>)
    58aa:	789c      	ldrb	r4, [r3, #2]
    58ac:	b15c      	cbz	r4, 58c6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9a>
    58ae:	1845      	adds	r5, r0, r1
    58b0:	4621      	mov	r1, r4
    58b2:	b10a      	cbz	r2, 58b8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    58b4:	1cd8      	adds	r0, r3, #3
    58b6:	e001      	b.n	58bc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    58b8:	4805      	ldr	r0, [pc, #20]	; (58d0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>)
    58ba:	3083      	adds	r0, #131	; 0x83
    58bc:	462a      	mov	r2, r5
    58be:	f004 ff7b 	bl	a7b8 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    58c2:	2001      	movs	r0, #1
    58c4:	bd70      	pop	{r4, r5, r6, pc}
    58c6:	2000      	movs	r0, #0
    58c8:	bd70      	pop	{r4, r5, r6, pc}
    58ca:	0000      	.short	0x0000
    58cc:	2000027c 	.word	0x2000027c
    58d0:	20001032 	.word	0x20001032
    58d4:	4908      	ldr	r1, [pc, #32]	; (58f8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>)
    58d6:	b510      	push	{r4, lr}
    58d8:	4603      	mov	r3, r0
    58da:	2000      	movs	r0, #0
    58dc:	788a      	ldrb	r2, [r1, #2]
    58de:	e006      	b.n	58ee <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc2>
    58e0:	180c      	adds	r4, r1, r0
    58e2:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    58e6:	429c      	cmp	r4, r3
    58e8:	d004      	beq.n	58f4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>
    58ea:	1c40      	adds	r0, r0, #1
    58ec:	b2c0      	uxtb	r0, r0
    58ee:	4282      	cmp	r2, r0
    58f0:	d8f6      	bhi.n	58e0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb4>
    58f2:	2010      	movs	r0, #16
    58f4:	bd10      	pop	{r4, pc}
    58f6:	0000      	.short	0x0000
    58f8:	20001032 	.word	0x20001032
    58fc:	b570      	push	{r4, r5, r6, lr}
    58fe:	4b0c      	ldr	r3, [pc, #48]	; (5930 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>)
    5900:	4604      	mov	r4, r0
    5902:	7818      	ldrb	r0, [r3, #0]
    5904:	1c45      	adds	r5, r0, #1
    5906:	701d      	strb	r5, [r3, #0]
    5908:	2810      	cmp	r0, #16
    590a:	d303      	bcc.n	5914 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe8>
    590c:	2146      	movs	r1, #70	; 0x46
    590e:	2028      	movs	r0, #40	; 0x28
    5910:	f7fe fa24 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5914:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    5918:	680d      	ldr	r5, [r1, #0]
    591a:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    591e:	8889      	ldrh	r1, [r1, #4]
    5920:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    5924:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    5928:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    592c:	bd70      	pop	{r4, r5, r6, pc}
    592e:	0000      	.short	0x0000
    5930:	20001032 	.word	0x20001032
    5934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5938:	460f      	mov	r7, r1
    593a:	4606      	mov	r6, r0
    593c:	2400      	movs	r4, #0
    593e:	4d0d      	ldr	r5, [pc, #52]	; (5974 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>)
    5940:	e00f      	b.n	5962 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x136>
    5942:	bf00      	nop
    5944:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    5948:	f890 1153 	ldrb.w	r1, [r0, #339]	; 0x153
    594c:	42b1      	cmp	r1, r6
    594e:	d106      	bne.n	595e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x132>
    5950:	2206      	movs	r2, #6
    5952:	4639      	mov	r1, r7
    5954:	f500 70aa 	add.w	r0, r0, #340	; 0x154
    5958:	f006 fbf1 	bl	c13e <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    595c:	b138      	cbz	r0, 596e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x142>
    595e:	1c64      	adds	r4, r4, #1
    5960:	b2e4      	uxtb	r4, r4
    5962:	7828      	ldrb	r0, [r5, #0]
    5964:	42a0      	cmp	r0, r4
    5966:	d8ed      	bhi.n	5944 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x118>
    5968:	2010      	movs	r0, #16
    596a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    596e:	4620      	mov	r0, r4
    5970:	e7fb      	b.n	596a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13e>
    5972:	0000      	.short	0x0000
    5974:	20001032 	.word	0x20001032
    5978:	b570      	push	{r4, r5, r6, lr}
    597a:	4605      	mov	r5, r0
    597c:	f7ff ffaa 	bl	58d4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    5980:	2810      	cmp	r0, #16
    5982:	d11c      	bne.n	59be <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x192>
    5984:	4c0e      	ldr	r4, [pc, #56]	; (59c0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>)
    5986:	7820      	ldrb	r0, [r4, #0]
    5988:	1e40      	subs	r0, r0, #1
    598a:	b2c0      	uxtb	r0, r0
    598c:	7020      	strb	r0, [r4, #0]
    598e:	42a8      	cmp	r0, r5
    5990:	d015      	beq.n	59be <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x192>
    5992:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    5996:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    599a:	f502 7080 	add.w	r0, r2, #256	; 0x100
    599e:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    59a2:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    59a6:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    59aa:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    59ae:	7820      	ldrb	r0, [r4, #0]
    59b0:	f7ff ff90 	bl	58d4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    59b4:	2810      	cmp	r0, #16
    59b6:	d002      	beq.n	59be <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x192>
    59b8:	4420      	add	r0, r4
    59ba:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    59be:	bd70      	pop	{r4, r5, r6, pc}
    59c0:	20001032 	.word	0x20001032
    59c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    59c8:	4c21      	ldr	r4, [pc, #132]	; (5a50 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>)
    59ca:	4606      	mov	r6, r0
    59cc:	19a7      	adds	r7, r4, r6
    59ce:	78a0      	ldrb	r0, [r4, #2]
    59d0:	1e40      	subs	r0, r0, #1
    59d2:	b2c5      	uxtb	r5, r0
    59d4:	70a5      	strb	r5, [r4, #2]
    59d6:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    59da:	42ae      	cmp	r6, r5
    59dc:	d02a      	beq.n	5a34 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x208>
    59de:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    59e2:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    59e6:	f10a 0103 	add.w	r1, sl, #3
    59ea:	f109 0003 	add.w	r0, r9, #3
    59ee:	2210      	movs	r2, #16
    59f0:	f006 fbb7 	bl	c162 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    59f4:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    59f8:	f109 0083 	add.w	r0, r9, #131	; 0x83
    59fc:	2210      	movs	r2, #16
    59fe:	f006 fbb0 	bl	c162 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5a02:	1960      	adds	r0, r4, r5
    5a04:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    5a08:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    5a0c:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    5a10:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    5a14:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    5a18:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    5a1c:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    5a20:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    5a24:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    5a28:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    5a2c:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    5a30:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    5a34:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    5a38:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5a3c:	07c0      	lsls	r0, r0, #31
    5a3e:	d104      	bne.n	5a4a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x21e>
    5a40:	4640      	mov	r0, r8
    5a42:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5a46:	f7ff bf97 	b.w	5978 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x14c>
    5a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5a4e:	0000      	.short	0x0000
    5a50:	20001032 	.word	0x20001032
    5a54:	4905      	ldr	r1, [pc, #20]	; (5a6c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x240>)
    5a56:	784a      	ldrb	r2, [r1, #1]
    5a58:	1e52      	subs	r2, r2, #1
    5a5a:	704a      	strb	r2, [r1, #1]
    5a5c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    5a60:	2200      	movs	r2, #0
    5a62:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    5a66:	f7ff bf87 	b.w	5978 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x14c>
    5a6a:	0000      	.short	0x0000
    5a6c:	20001032 	.word	0x20001032

00005a70 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ>:
    5a70:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a72:	f06f 021f 	mvn.w	r2, #31
    5a76:	0c01      	lsrs	r1, r0, #16
    5a78:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    5a7c:	251f      	movs	r5, #31
    5a7e:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    5a82:	3854      	subs	r0, #84	; 0x54
    5a84:	d00d      	beq.n	5aa2 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    5a86:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    5a8a:	3855      	subs	r0, #85	; 0x55
    5a8c:	d009      	beq.n	5aa2 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    5a8e:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    5a92:	38aa      	subs	r0, #170	; 0xaa
    5a94:	d005      	beq.n	5aa2 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    5a96:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    5a9a:	38aa      	subs	r0, #170	; 0xaa
    5a9c:	d001      	beq.n	5aa2 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    5a9e:	2001      	movs	r0, #1
    5aa0:	e000      	b.n	5aa4 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x34>
    5aa2:	2000      	movs	r0, #0
    5aa4:	2200      	movs	r2, #0
    5aa6:	4613      	mov	r3, r2
    5aa8:	ea4f 0402 	mov.w	r4, r2
    5aac:	ea82 0701 	eor.w	r7, r2, r1
    5ab0:	43ff      	mvns	r7, r7
    5ab2:	431f      	orrs	r7, r3
    5ab4:	1c7f      	adds	r7, r7, #1
    5ab6:	d00f      	beq.n	5ad8 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x68>
    5ab8:	f006 0701 	and.w	r7, r6, #1
    5abc:	0852      	lsrs	r2, r2, #1
    5abe:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    5ac2:	f005 0701 	and.w	r7, r5, #1
    5ac6:	085b      	lsrs	r3, r3, #1
    5ac8:	0876      	lsrs	r6, r6, #1
    5aca:	086d      	lsrs	r5, r5, #1
    5acc:	1c64      	adds	r4, r4, #1
    5ace:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    5ad2:	2c16      	cmp	r4, #22
    5ad4:	d3ea      	bcc.n	5aac <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x3c>
    5ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5ad8:	2000      	movs	r0, #0
    5ada:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005adc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    5adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5ae0:	4604      	mov	r4, r0
    5ae2:	2601      	movs	r6, #1
    5ae4:	f100 0570 	add.w	r5, r0, #112	; 0x70
    5ae8:	b159      	cbz	r1, 5b02 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x26>
    5aea:	2901      	cmp	r1, #1
    5aec:	d020      	beq.n	5b30 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x54>
    5aee:	2902      	cmp	r1, #2
    5af0:	d045      	beq.n	5b7e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa2>
    5af2:	2903      	cmp	r1, #3
    5af4:	d11a      	bne.n	5b2c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x50>
    5af6:	4601      	mov	r1, r0
    5af8:	4628      	mov	r0, r5
    5afa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5afe:	f007 be8f 	b.w	d820 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xcc>
    5b02:	f44f 7204 	mov.w	r2, #528	; 0x210
    5b06:	2100      	movs	r1, #0
    5b08:	f006 fba5 	bl	c256 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5b0c:	f004 fe44 	bl	a798 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    5b10:	f644 112b 	movw	r1, #18731	; 0x492b
    5b14:	4008      	ands	r0, r1
    5b16:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
    5b1a:	0a00      	lsrs	r0, r0, #8
    5b1c:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
    5b20:	20fe      	movs	r0, #254	; 0xfe
    5b22:	f885 0074 	strb.w	r0, [r5, #116]	; 0x74
    5b26:	207f      	movs	r0, #127	; 0x7f
    5b28:	7268      	strb	r0, [r5, #9]
    5b2a:	7466      	strb	r6, [r4, #17]
    5b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5b30:	2700      	movs	r7, #0
    5b32:	f8a4 7106 	strh.w	r7, [r4, #262]	; 0x106
    5b36:	f884 70fb 	strb.w	r7, [r4, #251]	; 0xfb
    5b3a:	6861      	ldr	r1, [r4, #4]
    5b3c:	4815      	ldr	r0, [pc, #84]	; (5b94 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xb8>)
    5b3e:	460a      	mov	r2, r1
    5b40:	4408      	add	r0, r1
    5b42:	fbb0 f0f1 	udiv	r0, r0, r1
    5b46:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
    5b4a:	f640 30b8 	movw	r0, #3000	; 0xbb8
    5b4e:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
    5b52:	8963      	ldrh	r3, [r4, #10]
    5b54:	4628      	mov	r0, r5
    5b56:	f000 f899 	bl	5c8c <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0xa0>
    5b5a:	4621      	mov	r1, r4
    5b5c:	4628      	mov	r0, r5
    5b5e:	f007 fe5f 	bl	d820 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xcc>
    5b62:	f006 fac8 	bl	c0f6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    5b66:	b120      	cbz	r0, 5b72 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x96>
    5b68:	f8d4 0012 	ldr.w	r0, [r4, #18]
    5b6c:	f7ff ff80 	bl	5a70 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ>
    5b70:	b110      	cbz	r0, 5b78 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x9c>
    5b72:	f884 716c 	strb.w	r7, [r4, #364]	; 0x16c
    5b76:	e7d9      	b.n	5b2c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x50>
    5b78:	f884 616c 	strb.w	r6, [r4, #364]	; 0x16c
    5b7c:	e7d6      	b.n	5b2c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x50>
    5b7e:	6841      	ldr	r1, [r0, #4]
    5b80:	f8b4 319a 	ldrh.w	r3, [r4, #410]	; 0x19a
    5b84:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
    5b88:	4628      	mov	r0, r5
    5b8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5b8e:	f000 b87d 	b.w	5c8c <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0xa0>
    5b92:	0000      	.short	0x0000
    5b94:	01c9c37f 	.word	0x01c9c37f

00005b98 <sym_BB6RZIMOYUNZ3USIQYGAVMTGA5KFSQWNGRSNZQA>:
    5b98:	b510      	push	{r4, lr}
    5b9a:	2820      	cmp	r0, #32
    5b9c:	d304      	bcc.n	5ba8 <sym_BB6RZIMOYUNZ3USIQYGAVMTGA5KFSQWNGRSNZQA+0x10>
    5b9e:	f240 117b 	movw	r1, #379	; 0x17b
    5ba2:	2029      	movs	r0, #41	; 0x29
    5ba4:	f7fe f8da 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5ba8:	4901      	ldr	r1, [pc, #4]	; (5bb0 <sym_BB6RZIMOYUNZ3USIQYGAVMTGA5KFSQWNGRSNZQA+0x18>)
    5baa:	5c08      	ldrb	r0, [r1, r0]
    5bac:	bd10      	pop	{r4, pc}
    5bae:	0000      	.short	0x0000
    5bb0:	20001004 	.word	0x20001004

00005bb4 <sym_43KCEMGXWEFGXOKHGAEYSP35KOJMVCZQOBXIS6I>:
    5bb4:	b510      	push	{r4, lr}
    5bb6:	2820      	cmp	r0, #32
    5bb8:	d304      	bcc.n	5bc4 <sym_43KCEMGXWEFGXOKHGAEYSP35KOJMVCZQOBXIS6I+0x10>
    5bba:	f240 1181 	movw	r1, #385	; 0x181
    5bbe:	2029      	movs	r0, #41	; 0x29
    5bc0:	f7fe f8cc 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5bc4:	4a01      	ldr	r2, [pc, #4]	; (5bcc <sym_43KCEMGXWEFGXOKHGAEYSP35KOJMVCZQOBXIS6I+0x18>)
    5bc6:	5411      	strb	r1, [r2, r0]
    5bc8:	bd10      	pop	{r4, pc}
    5bca:	0000      	.short	0x0000
    5bcc:	20001004 	.word	0x20001004

00005bd0 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>:
    5bd0:	b510      	push	{r4, lr}
    5bd2:	2820      	cmp	r0, #32
    5bd4:	d304      	bcc.n	5be0 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ+0x10>
    5bd6:	f44f 71b7 	mov.w	r1, #366	; 0x16e
    5bda:	2029      	movs	r0, #41	; 0x29
    5bdc:	f7fe f8be 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5be0:	4901      	ldr	r1, [pc, #4]	; (5be8 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ+0x18>)
    5be2:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    5be6:	bd10      	pop	{r4, pc}
    5be8:	20000fc4 	.word	0x20000fc4

00005bec <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ>:
    5bec:	b510      	push	{r4, lr}
    5bee:	2820      	cmp	r0, #32
    5bf0:	d304      	bcc.n	5bfc <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x10>
    5bf2:	f44f 71ba 	mov.w	r1, #372	; 0x174
    5bf6:	2029      	movs	r0, #41	; 0x29
    5bf8:	f7fe f8b0 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5bfc:	4a01      	ldr	r2, [pc, #4]	; (5c04 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x18>)
    5bfe:	f822 1010 	strh.w	r1, [r2, r0, lsl #1]
    5c02:	bd10      	pop	{r4, pc}
    5c04:	20000fc4 	.word	0x20000fc4
    5c08:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c0a:	7ec3      	ldrb	r3, [r0, #27]
    5c0c:	f891 4020 	ldrb.w	r4, [r1, #32]
    5c10:	2501      	movs	r5, #1
    5c12:	fb04 3202 	mla	r2, r4, r2, r3
    5c16:	2325      	movs	r3, #37	; 0x25
    5c18:	fbb2 f4f3 	udiv	r4, r2, r3
    5c1c:	fb03 2214 	mls	r2, r3, r4, r2
    5c20:	eb01 04d2 	add.w	r4, r1, r2, lsr #3
    5c24:	76c2      	strb	r2, [r0, #27]
    5c26:	f002 0307 	and.w	r3, r2, #7
    5c2a:	7b24      	ldrb	r4, [r4, #12]
    5c2c:	fa05 f303 	lsl.w	r3, r5, r3
    5c30:	421c      	tst	r4, r3
    5c32:	d001      	beq.n	5c38 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x4c>
    5c34:	7702      	strb	r2, [r0, #28]
    5c36:	e01e      	b.n	5c76 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x8a>
    5c38:	7e83      	ldrb	r3, [r0, #26]
    5c3a:	fbb2 f4f3 	udiv	r4, r2, r3
    5c3e:	fb03 2214 	mls	r2, r3, r4, r2
    5c42:	1c52      	adds	r2, r2, #1
    5c44:	b2d2      	uxtb	r2, r2
    5c46:	2300      	movs	r3, #0
    5c48:	18c4      	adds	r4, r0, r3
    5c4a:	7d64      	ldrb	r4, [r4, #21]
    5c4c:	4294      	cmp	r4, r2
    5c4e:	d314      	bcc.n	5c7a <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x8e>
    5c50:	2400      	movs	r4, #0
    5c52:	18ce      	adds	r6, r1, r3
    5c54:	f896 600c 	ldrb.w	r6, [r6, #12]
    5c58:	fa05 f704 	lsl.w	r7, r5, r4
    5c5c:	423e      	tst	r6, r7
    5c5e:	d001      	beq.n	5c64 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x78>
    5c60:	1e52      	subs	r2, r2, #1
    5c62:	b2d2      	uxtb	r2, r2
    5c64:	b122      	cbz	r2, 5c70 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x84>
    5c66:	1c64      	adds	r4, r4, #1
    5c68:	b2e4      	uxtb	r4, r4
    5c6a:	2c08      	cmp	r4, #8
    5c6c:	d3f4      	bcc.n	5c58 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x6c>
    5c6e:	e006      	b.n	5c7e <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x92>
    5c70:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
    5c74:	7701      	strb	r1, [r0, #28]
    5c76:	2000      	movs	r0, #0
    5c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c7a:	1b12      	subs	r2, r2, r4
    5c7c:	b2d2      	uxtb	r2, r2
    5c7e:	1c5b      	adds	r3, r3, #1
    5c80:	b2db      	uxtb	r3, r3
    5c82:	2b05      	cmp	r3, #5
    5c84:	d3e0      	bcc.n	5c48 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x5c>
    5c86:	201f      	movs	r0, #31
    5c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c8a:	0000      	movs	r0, r0
    5c8c:	b530      	push	{r4, r5, lr}
    5c8e:	2400      	movs	r4, #0
    5c90:	8584      	strh	r4, [r0, #44]	; 0x2c
    5c92:	8e04      	ldrh	r4, [r0, #48]	; 0x30
    5c94:	4d13      	ldr	r5, [pc, #76]	; (5ce4 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0xf8>)
    5c96:	434c      	muls	r4, r1
    5c98:	fbb4 f4f2 	udiv	r4, r4, r2
    5c9c:	8604      	strh	r4, [r0, #48]	; 0x30
    5c9e:	f242 7410 	movw	r4, #10000	; 0x2710
    5ca2:	4363      	muls	r3, r4
    5ca4:	fbb3 f3f2 	udiv	r3, r3, r2
    5ca8:	1c5b      	adds	r3, r3, #1
    5caa:	b29b      	uxth	r3, r3
    5cac:	fb03 f402 	mul.w	r4, r3, r2
    5cb0:	85c3      	strh	r3, [r0, #46]	; 0x2e
    5cb2:	42ac      	cmp	r4, r5
    5cb4:	d901      	bls.n	5cba <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0xce>
    5cb6:	1e5b      	subs	r3, r3, #1
    5cb8:	85c3      	strh	r3, [r0, #46]	; 0x2e
    5cba:	4b0b      	ldr	r3, [pc, #44]	; (5ce8 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0xfc>)
    5cbc:	f240 2471 	movw	r4, #625	; 0x271
    5cc0:	fbb3 f3f2 	udiv	r3, r3, r2
    5cc4:	1c5b      	adds	r3, r3, #1
    5cc6:	8683      	strh	r3, [r0, #52]	; 0x34
    5cc8:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    5cca:	4363      	muls	r3, r4
    5ccc:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    5cd0:	1e5b      	subs	r3, r3, #1
    5cd2:	fbb3 f3f2 	udiv	r3, r3, r2
    5cd6:	6243      	str	r3, [r0, #36]	; 0x24
    5cd8:	6a03      	ldr	r3, [r0, #32]
    5cda:	434b      	muls	r3, r1
    5cdc:	fbb3 f1f2 	udiv	r1, r3, r2
    5ce0:	6201      	str	r1, [r0, #32]
    5ce2:	bd30      	pop	{r4, r5, pc}
    5ce4:	01e84800 	.word	0x01e84800
    5ce8:	02625a00 	.word	0x02625a00

00005cec <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    5cec:	7841      	ldrb	r1, [r0, #1]
    5cee:	b141      	cbz	r1, 5d02 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    5cf0:	78c0      	ldrb	r0, [r0, #3]
    5cf2:	2819      	cmp	r0, #25
    5cf4:	d203      	bcs.n	5cfe <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    5cf6:	4a04      	ldr	r2, [pc, #16]	; (5d08 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    5cf8:	5c10      	ldrb	r0, [r2, r0]
    5cfa:	4288      	cmp	r0, r1
    5cfc:	d101      	bne.n	5d02 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    5cfe:	2001      	movs	r0, #1
    5d00:	4770      	bx	lr
    5d02:	2000      	movs	r0, #0
    5d04:	4770      	bx	lr
    5d06:	0000      	.short	0x0000
    5d08:	0000f836 	.word	0x0000f836

00005d0c <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>:
    5d0c:	b50c      	push	{r2, r3, lr}
    5d0e:	a20b      	add	r2, pc, #44	; (adr r2, 5d3c <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x30>)
    5d10:	e9d2 1200 	ldrd	r1, r2, [r2]
    5d14:	e9cd 1200 	strd	r1, r2, [sp]
    5d18:	7901      	ldrb	r1, [r0, #4]
    5d1a:	7940      	ldrb	r0, [r0, #5]
    5d1c:	f001 0207 	and.w	r2, r1, #7
    5d20:	4669      	mov	r1, sp
    5d22:	f81d 2002 	ldrb.w	r2, [sp, r2]
    5d26:	2a01      	cmp	r2, #1
    5d28:	d804      	bhi.n	5d34 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x28>
    5d2a:	f000 0007 	and.w	r0, r0, #7
    5d2e:	5c08      	ldrb	r0, [r1, r0]
    5d30:	2801      	cmp	r0, #1
    5d32:	d901      	bls.n	5d38 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x2c>
    5d34:	2000      	movs	r0, #0
    5d36:	bd0c      	pop	{r2, r3, pc}
    5d38:	2001      	movs	r0, #1
    5d3a:	bd0c      	pop	{r2, r3, pc}
    5d3c:	02010100 	.word	0x02010100
    5d40:	03020201 	.word	0x03020201

00005d44 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    5d44:	b510      	push	{r4, lr}
    5d46:	2201      	movs	r2, #1
    5d48:	70c1      	strb	r1, [r0, #3]
    5d4a:	2919      	cmp	r1, #25
    5d4c:	d202      	bcs.n	5d54 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    5d4e:	4a06      	ldr	r2, [pc, #24]	; (5d68 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    5d50:	5c52      	ldrb	r2, [r2, r1]
    5d52:	e006      	b.n	5d62 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    5d54:	29ff      	cmp	r1, #255	; 0xff
    5d56:	d004      	beq.n	5d62 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    5d58:	f44f 716e 	mov.w	r1, #952	; 0x3b8
    5d5c:	202a      	movs	r0, #42	; 0x2a
    5d5e:	f7fd fffd 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d62:	7042      	strb	r2, [r0, #1]
    5d64:	bd10      	pop	{r4, pc}
    5d66:	0000      	.short	0x0000
    5d68:	0000f836 	.word	0x0000f836

00005d6c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>:
    5d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5d70:	ea5f 0900 	movs.w	r9, r0
    5d74:	d006      	beq.n	5d84 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x18>
    5d76:	4d21      	ldr	r5, [pc, #132]	; (5dfc <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x90>)
    5d78:	f105 0010 	add.w	r0, r5, #16
    5d7c:	7b69      	ldrb	r1, [r5, #13]
    5d7e:	4682      	mov	sl, r0
    5d80:	b119      	cbz	r1, 5d8a <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x1e>
    5d82:	e00b      	b.n	5d9c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x30>
    5d84:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    5d88:	e005      	b.n	5d96 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x2a>
    5d8a:	2100      	movs	r1, #0
    5d8c:	f007 ff37 	bl	dbfe <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa6>
    5d90:	b120      	cbz	r0, 5d9c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x30>
    5d92:	f240 31d3 	movw	r1, #979	; 0x3d3
    5d96:	202b      	movs	r0, #43	; 0x2b
    5d98:	f7fd ffe0 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d9c:	8a2e      	ldrh	r6, [r5, #16]
    5d9e:	2000      	movs	r0, #0
    5da0:	f7fe f9be 	bl	4120 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    5da4:	4f16      	ldr	r7, [pc, #88]	; (5e00 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x94>)
    5da6:	f8df 805c 	ldr.w	r8, [pc, #92]	; 5e04 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x98>
    5daa:	4604      	mov	r4, r0
    5dac:	6838      	ldr	r0, [r7, #0]
    5dae:	b158      	cbz	r0, 5dc8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x5c>
    5db0:	8a28      	ldrh	r0, [r5, #16]
    5db2:	42a0      	cmp	r0, r4
    5db4:	d308      	bcc.n	5dc8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x5c>
    5db6:	1b00      	subs	r0, r0, r4
    5db8:	b2c0      	uxtb	r0, r0
    5dba:	2101      	movs	r1, #1
    5dbc:	f007 f9e3 	bl	d186 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    5dc0:	b148      	cbz	r0, 5dd6 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x6a>
    5dc2:	4649      	mov	r1, r9
    5dc4:	683a      	ldr	r2, [r7, #0]
    5dc6:	e004      	b.n	5dd2 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x66>
    5dc8:	f8d8 2000 	ldr.w	r2, [r8]
    5dcc:	b11a      	cbz	r2, 5dd6 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x6a>
    5dce:	8a28      	ldrh	r0, [r5, #16]
    5dd0:	4649      	mov	r1, r9
    5dd2:	4790      	blx	r2
    5dd4:	b968      	cbnz	r0, 5df2 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x86>
    5dd6:	2100      	movs	r1, #0
    5dd8:	4650      	mov	r0, sl
    5dda:	f007 ff10 	bl	dbfe <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa6>
    5dde:	b910      	cbnz	r0, 5de6 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x7a>
    5de0:	8a28      	ldrh	r0, [r5, #16]
    5de2:	42b0      	cmp	r0, r6
    5de4:	d1e2      	bne.n	5dac <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x40>
    5de6:	4808      	ldr	r0, [pc, #32]	; (5e08 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x9c>)
    5de8:	6801      	ldr	r1, [r0, #0]
    5dea:	b129      	cbz	r1, 5df8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x8c>
    5dec:	4648      	mov	r0, r9
    5dee:	4788      	blx	r1
    5df0:	b110      	cbz	r0, 5df8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x8c>
    5df2:	2001      	movs	r0, #1
    5df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5df8:	2000      	movs	r0, #0
    5dfa:	e7fb      	b.n	5df4 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x88>
    5dfc:	20000dd8 	.word	0x20000dd8
    5e00:	2000022c 	.word	0x2000022c
    5e04:	20000230 	.word	0x20000230
    5e08:	20000238 	.word	0x20000238

00005e0c <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI>:
    5e0c:	b570      	push	{r4, r5, r6, lr}
    5e0e:	0005      	movs	r5, r0
    5e10:	460c      	mov	r4, r1
    5e12:	d02e      	beq.n	5e72 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x66>
    5e14:	4818      	ldr	r0, [pc, #96]	; (5e78 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x6c>)
    5e16:	6802      	ldr	r2, [r0, #0]
    5e18:	b35a      	cbz	r2, 5e72 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x66>
    5e1a:	4628      	mov	r0, r5
    5e1c:	4790      	blx	r2
    5e1e:	b340      	cbz	r0, 5e72 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x66>
    5e20:	7820      	ldrb	r0, [r4, #0]
    5e22:	2811      	cmp	r0, #17
    5e24:	d002      	beq.n	5e2c <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x20>
    5e26:	2814      	cmp	r0, #20
    5e28:	d003      	beq.n	5e32 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x26>
    5e2a:	e020      	b.n	5e6e <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5e2c:	7920      	ldrb	r0, [r4, #4]
    5e2e:	b1f0      	cbz	r0, 5e6e <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5e30:	e00a      	b.n	5e48 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x3c>
    5e32:	7920      	ldrb	r0, [r4, #4]
    5e34:	b120      	cbz	r0, 5e40 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x34>
    5e36:	4628      	mov	r0, r5
    5e38:	f008 f8c8 	bl	dfcc <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    5e3c:	b120      	cbz	r0, 5e48 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x3c>
    5e3e:	e016      	b.n	5e6e <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5e40:	490e      	ldr	r1, [pc, #56]	; (5e7c <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x70>)
    5e42:	2000      	movs	r0, #0
    5e44:	7348      	strb	r0, [r1, #13]
    5e46:	e012      	b.n	5e6e <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5e48:	88e4      	ldrh	r4, [r4, #6]
    5e4a:	2100      	movs	r1, #0
    5e4c:	4620      	mov	r0, r4
    5e4e:	f007 f99a 	bl	d186 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    5e52:	b160      	cbz	r0, 5e6e <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5e54:	8800      	ldrh	r0, [r0, #0]
    5e56:	f007 f9fb 	bl	d250 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    5e5a:	2100      	movs	r1, #0
    5e5c:	4620      	mov	r0, r4
    5e5e:	f7fe f9fb 	bl	4258 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    5e62:	b120      	cbz	r0, 5e6e <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5e64:	f44f 719a 	mov.w	r1, #308	; 0x134
    5e68:	202b      	movs	r0, #43	; 0x2b
    5e6a:	f7fd ff77 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e6e:	2001      	movs	r0, #1
    5e70:	bd70      	pop	{r4, r5, r6, pc}
    5e72:	2000      	movs	r0, #0
    5e74:	bd70      	pop	{r4, r5, r6, pc}
    5e76:	0000      	.short	0x0000
    5e78:	20000228 	.word	0x20000228
    5e7c:	20000dd8 	.word	0x20000dd8

00005e80 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA>:
    5e80:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5e84:	b087      	sub	sp, #28
    5e86:	460c      	mov	r4, r1
    5e88:	a902      	add	r1, sp, #8
    5e8a:	9807      	ldr	r0, [sp, #28]
    5e8c:	f007 fab3 	bl	d3f6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    5e90:	2800      	cmp	r0, #0
    5e92:	d17c      	bne.n	5f8e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x10e>
    5e94:	f8df 9118 	ldr.w	r9, [pc, #280]	; 5fb0 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x130>
    5e98:	f04f 0a01 	mov.w	sl, #1
    5e9c:	4680      	mov	r8, r0
    5e9e:	9803      	ldr	r0, [sp, #12]
    5ea0:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    5ea4:	2800      	cmp	r0, #0
    5ea6:	d00c      	beq.n	5ec2 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x42>
    5ea8:	f8d9 2000 	ldr.w	r2, [r9]
    5eac:	b162      	cbz	r2, 5ec8 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x48>
    5eae:	4621      	mov	r1, r4
    5eb0:	9807      	ldr	r0, [sp, #28]
    5eb2:	4790      	blx	r2
    5eb4:	b140      	cbz	r0, 5ec8 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x48>
    5eb6:	4620      	mov	r0, r4
    5eb8:	f000 f916 	bl	60e8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe0>
    5ebc:	2800      	cmp	r0, #0
    5ebe:	d1ee      	bne.n	5e9e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x1e>
    5ec0:	2001      	movs	r0, #1
    5ec2:	b009      	add	sp, #36	; 0x24
    5ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5ec8:	9d03      	ldr	r5, [sp, #12]
    5eca:	f895 012c 	ldrb.w	r0, [r5, #300]	; 0x12c
    5ece:	3570      	adds	r5, #112	; 0x70
    5ed0:	b948      	cbnz	r0, 5ee6 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x66>
    5ed2:	7f68      	ldrb	r0, [r5, #29]
    5ed4:	f88d 0004 	strb.w	r0, [sp, #4]
    5ed8:	9801      	ldr	r0, [sp, #4]
    5eda:	9001      	str	r0, [sp, #4]
    5edc:	f89d 0004 	ldrb.w	r0, [sp, #4]
    5ee0:	b108      	cbz	r0, 5ee6 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x66>
    5ee2:	2001      	movs	r0, #1
    5ee4:	e000      	b.n	5ee8 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x68>
    5ee6:	2000      	movs	r0, #0
    5ee8:	4683      	mov	fp, r0
    5eea:	f895 003d 	ldrb.w	r0, [r5, #61]	; 0x3d
    5eee:	b1c0      	cbz	r0, 5f22 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xa2>
    5ef0:	f895 003e 	ldrb.w	r0, [r5, #62]	; 0x3e
    5ef4:	0780      	lsls	r0, r0, #30
    5ef6:	d514      	bpl.n	5f22 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xa2>
    5ef8:	f884 8001 	strb.w	r8, [r4, #1]
    5efc:	f884 a000 	strb.w	sl, [r4]
    5f00:	f884 8004 	strb.w	r8, [r4, #4]
    5f04:	9907      	ldr	r1, [sp, #28]
    5f06:	f8a4 1005 	strh.w	r1, [r4, #5]
    5f0a:	f895 103f 	ldrb.w	r1, [r5, #63]	; 0x3f
    5f0e:	71e1      	strb	r1, [r4, #7]
    5f10:	f8b5 1040 	ldrh.w	r1, [r5, #64]	; 0x40
    5f14:	8121      	strh	r1, [r4, #8]
    5f16:	f8b5 1042 	ldrh.w	r1, [r5, #66]	; 0x42
    5f1a:	8161      	strh	r1, [r4, #10]
    5f1c:	f885 803d 	strb.w	r8, [r5, #61]	; 0x3d
    5f20:	e7c9      	b.n	5eb6 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    5f22:	9807      	ldr	r0, [sp, #28]
    5f24:	f7fe fb40 	bl	45a8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5f28:	0007      	movs	r7, r0
    5f2a:	d00d      	beq.n	5f48 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xc8>
    5f2c:	f006 ff39 	bl	cda2 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
    5f30:	0006      	movs	r6, r0
    5f32:	d015      	beq.n	5f60 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xe0>
    5f34:	f884 8001 	strb.w	r8, [r4, #1]
    5f38:	200d      	movs	r0, #13
    5f3a:	7020      	strb	r0, [r4, #0]
    5f3c:	9807      	ldr	r0, [sp, #28]
    5f3e:	80e0      	strh	r0, [r4, #6]
    5f40:	8126      	strh	r6, [r4, #8]
    5f42:	f884 a004 	strb.w	sl, [r4, #4]
    5f46:	e007      	b.n	5f58 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xd8>
    5f48:	f240 213a 	movw	r1, #570	; 0x23a
    5f4c:	e02b      	b.n	5fa6 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x126>
    5f4e:	2100      	movs	r1, #0
    5f50:	4638      	mov	r0, r7
    5f52:	460a      	mov	r2, r1
    5f54:	f007 f833 	bl	cfbe <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    5f58:	1e76      	subs	r6, r6, #1
    5f5a:	b2b6      	uxth	r6, r6
    5f5c:	d2f7      	bcs.n	5f4e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xce>
    5f5e:	e7aa      	b.n	5eb6 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    5f60:	9807      	ldr	r0, [sp, #28]
    5f62:	f7fe fb0b 	bl	457c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    5f66:	b1e0      	cbz	r0, 5fa2 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x122>
    5f68:	f1bb 0f00 	cmp.w	fp, #0
    5f6c:	d01e      	beq.n	5fac <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x12c>
    5f6e:	f006 fe50 	bl	cc12 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    5f72:	b160      	cbz	r0, 5f8e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x10e>
    5f74:	9807      	ldr	r0, [sp, #28]
    5f76:	f007 f96b 	bl	d250 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    5f7a:	2100      	movs	r1, #0
    5f7c:	9807      	ldr	r0, [sp, #28]
    5f7e:	f7fe f96b 	bl	4258 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    5f82:	f884 8001 	strb.w	r8, [r4, #1]
    5f86:	210a      	movs	r1, #10
    5f88:	4640      	mov	r0, r8
    5f8a:	7021      	strb	r1, [r4, #0]
    5f8c:	e000      	b.n	5f90 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    5f8e:	e00d      	b.n	5fac <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x12c>
    5f90:	f884 8004 	strb.w	r8, [r4, #4]
    5f94:	9907      	ldr	r1, [sp, #28]
    5f96:	f8a4 1005 	strh.w	r1, [r4, #5]
    5f9a:	7fa9      	ldrb	r1, [r5, #30]
    5f9c:	71e1      	strb	r1, [r4, #7]
    5f9e:	7768      	strb	r0, [r5, #29]
    5fa0:	e789      	b.n	5eb6 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    5fa2:	f44f 7116 	mov.w	r1, #600	; 0x258
    5fa6:	202b      	movs	r0, #43	; 0x2b
    5fa8:	f7fd fed8 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5fac:	2000      	movs	r0, #0
    5fae:	e788      	b.n	5ec2 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x42>
    5fb0:	20000234 	.word	0x20000234

00005fb4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    5fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5fb8:	4c12      	ldr	r4, [pc, #72]	; (6004 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    5fba:	4607      	mov	r7, r0
    5fbc:	460e      	mov	r6, r1
    5fbe:	7de0      	ldrb	r0, [r4, #23]
    5fc0:	b110      	cbz	r0, 5fc8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
    5fc2:	8b20      	ldrh	r0, [r4, #24]
    5fc4:	2800      	cmp	r0, #0
    5fc6:	d012      	beq.n	5fee <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    5fc8:	480e      	ldr	r0, [pc, #56]	; (6004 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    5fca:	300e      	adds	r0, #14
    5fcc:	4680      	mov	r8, r0
    5fce:	f007 fdc0 	bl	db52 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    5fd2:	b9a8      	cbnz	r0, 6000 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    5fd4:	89e5      	ldrh	r5, [r4, #14]
    5fd6:	89e0      	ldrh	r0, [r4, #14]
    5fd8:	4632      	mov	r2, r6
    5fda:	4639      	mov	r1, r7
    5fdc:	f007 fdc8 	bl	db70 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x18>
    5fe0:	b138      	cbz	r0, 5ff2 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
    5fe2:	7de0      	ldrb	r0, [r4, #23]
    5fe4:	b110      	cbz	r0, 5fec <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
    5fe6:	8b20      	ldrh	r0, [r4, #24]
    5fe8:	1e40      	subs	r0, r0, #1
    5fea:	8320      	strh	r0, [r4, #24]
    5fec:	2001      	movs	r0, #1
    5fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5ff2:	4640      	mov	r0, r8
    5ff4:	f007 fdad 	bl	db52 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    5ff8:	b910      	cbnz	r0, 6000 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    5ffa:	89e0      	ldrh	r0, [r4, #14]
    5ffc:	42a8      	cmp	r0, r5
    5ffe:	d1ea      	bne.n	5fd6 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    6000:	2000      	movs	r0, #0
    6002:	e7f4      	b.n	5fee <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    6004:	20000dd8 	.word	0x20000dd8

00006008 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    6008:	b510      	push	{r4, lr}
    600a:	7901      	ldrb	r1, [r0, #4]
    600c:	b119      	cbz	r1, 6016 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    600e:	2901      	cmp	r1, #1
    6010:	d006      	beq.n	6020 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    6012:	2000      	movs	r0, #0
    6014:	bd10      	pop	{r4, pc}
    6016:	8842      	ldrh	r2, [r0, #2]
    6018:	6883      	ldr	r3, [r0, #8]
    601a:	8800      	ldrh	r0, [r0, #0]
    601c:	2102      	movs	r1, #2
    601e:	e003      	b.n	6028 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    6020:	8842      	ldrh	r2, [r0, #2]
    6022:	6883      	ldr	r3, [r0, #8]
    6024:	8800      	ldrh	r0, [r0, #0]
    6026:	2101      	movs	r1, #1
    6028:	f000 f808 	bl	603c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x34>
    602c:	b910      	cbnz	r0, 6034 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2c>
    602e:	4902      	ldr	r1, [pc, #8]	; (6038 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x30>)
    6030:	2001      	movs	r0, #1
    6032:	7008      	strb	r0, [r1, #0]
    6034:	2001      	movs	r0, #1
    6036:	bd10      	pop	{r4, pc}
    6038:	20000dd8 	.word	0x20000dd8
    603c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    6040:	468a      	mov	sl, r1
    6042:	4699      	mov	r9, r3
    6044:	4615      	mov	r5, r2
    6046:	4604      	mov	r4, r0
    6048:	a901      	add	r1, sp, #4
    604a:	f007 f9d4 	bl	d3f6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    604e:	bbe0      	cbnz	r0, 60ca <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xc2>
    6050:	9f02      	ldr	r7, [sp, #8]
    6052:	f04f 0800 	mov.w	r8, #0
    6056:	3770      	adds	r7, #112	; 0x70
    6058:	b18d      	cbz	r5, 607e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x76>
    605a:	4620      	mov	r0, r4
    605c:	f7fe faa4 	bl	45a8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6060:	0004      	movs	r4, r0
    6062:	d00f      	beq.n	6084 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x7c>
    6064:	4629      	mov	r1, r5
    6066:	f006 fedb 	bl	ce20 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    606a:	0006      	movs	r6, r0
    606c:	d003      	beq.n	6076 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6e>
    606e:	481d      	ldr	r0, [pc, #116]	; (60e4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xdc>)
    6070:	8880      	ldrh	r0, [r0, #4]
    6072:	42a8      	cmp	r0, r5
    6074:	d208      	bcs.n	6088 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x80>
    6076:	2000      	movs	r0, #0
    6078:	b004      	add	sp, #16
    607a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    607e:	2001      	movs	r0, #1
    6080:	7538      	strb	r0, [r7, #20]
    6082:	e029      	b.n	60d8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd0>
    6084:	2189      	movs	r1, #137	; 0x89
    6086:	e02a      	b.n	60de <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd6>
    6088:	4620      	mov	r0, r4
    608a:	4631      	mov	r1, r6
    608c:	aa03      	add	r2, sp, #12
    608e:	f006 fec0 	bl	ce12 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    6092:	9803      	ldr	r0, [sp, #12]
    6094:	f8a0 8000 	strh.w	r8, [r0]
    6098:	f880 8002 	strb.w	r8, [r0, #2]
    609c:	7d39      	ldrb	r1, [r7, #20]
    609e:	b109      	cbz	r1, 60a4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x9c>
    60a0:	f04f 0a02 	mov.w	sl, #2
    60a4:	4651      	mov	r1, sl
    60a6:	f007 fcab 	bl	da00 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    60aa:	4631      	mov	r1, r6
    60ac:	2603      	movs	r6, #3
    60ae:	4620      	mov	r0, r4
    60b0:	464a      	mov	r2, r9
    60b2:	462b      	mov	r3, r5
    60b4:	9600      	str	r6, [sp, #0]
    60b6:	f006 fd95 	bl	cbe4 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    60ba:	4620      	mov	r0, r4
    60bc:	4629      	mov	r1, r5
    60be:	f006 fe4c 	bl	cd5a <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    60c2:	b158      	cbz	r0, 60dc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd4>
    60c4:	4644      	mov	r4, r8
    60c6:	a801      	add	r0, sp, #4
    60c8:	e000      	b.n	60cc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xc4>
    60ca:	e005      	b.n	60d8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd0>
    60cc:	f007 fd44 	bl	db58 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    60d0:	9802      	ldr	r0, [sp, #8]
    60d2:	f8a0 40f2 	strh.w	r4, [r0, #242]	; 0xf2
    60d6:	753c      	strb	r4, [r7, #20]
    60d8:	2001      	movs	r0, #1
    60da:	e7cd      	b.n	6078 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x70>
    60dc:	219f      	movs	r1, #159	; 0x9f
    60de:	202b      	movs	r0, #43	; 0x2b
    60e0:	f7fd fe3c 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    60e4:	20000dd8 	.word	0x20000dd8
    60e8:	b510      	push	{r4, lr}
    60ea:	492c      	ldr	r1, [pc, #176]	; (619c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x194>)
    60ec:	b086      	sub	sp, #24
    60ee:	7d8a      	ldrb	r2, [r1, #22]
    60f0:	7801      	ldrb	r1, [r0, #0]
    60f2:	07d3      	lsls	r3, r2, #31
    60f4:	d101      	bne.n	60fa <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xf2>
    60f6:	2919      	cmp	r1, #25
    60f8:	d004      	beq.n	6104 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xfc>
    60fa:	2918      	cmp	r1, #24
    60fc:	d01e      	beq.n	613c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x134>
    60fe:	2912      	cmp	r1, #18
    6100:	d045      	beq.n	618e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x186>
    6102:	e049      	b.n	6198 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x190>
    6104:	8880      	ldrh	r0, [r0, #4]
    6106:	f8ad 0000 	strh.w	r0, [sp]
    610a:	a902      	add	r1, sp, #8
    610c:	f007 f973 	bl	d3f6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6110:	b108      	cbz	r0, 6116 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x10e>
    6112:	2158      	movs	r1, #88	; 0x58
    6114:	e035      	b.n	6182 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17a>
    6116:	9803      	ldr	r0, [sp, #12]
    6118:	f810 1f62 	ldrb.w	r1, [r0, #98]!
    611c:	f88d 1002 	strb.w	r1, [sp, #2]
    6120:	7841      	ldrb	r1, [r0, #1]
    6122:	f88d 1003 	strb.w	r1, [sp, #3]
    6126:	8840      	ldrh	r0, [r0, #2]
    6128:	f8ad 0004 	strh.w	r0, [sp, #4]
    612c:	2102      	movs	r1, #2
    612e:	4668      	mov	r0, sp
    6130:	f008 ff70 	bl	f014 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    6134:	b340      	cbz	r0, 6188 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x180>
    6136:	f240 114d 	movw	r1, #333	; 0x14d
    613a:	e022      	b.n	6182 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17a>
    613c:	0791      	lsls	r1, r2, #30
    613e:	d42b      	bmi.n	6198 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x190>
    6140:	8884      	ldrh	r4, [r0, #4]
    6142:	a903      	add	r1, sp, #12
    6144:	4620      	mov	r0, r4
    6146:	f008 fe4d 	bl	ede4 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    614a:	b110      	cbz	r0, 6152 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x14a>
    614c:	f44f 71aa 	mov.w	r1, #340	; 0x154
    6150:	e017      	b.n	6182 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17a>
    6152:	f8ad 4000 	strh.w	r4, [sp]
    6156:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    615a:	f8ad 0002 	strh.w	r0, [sp, #2]
    615e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    6162:	f8ad 0004 	strh.w	r0, [sp, #4]
    6166:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    616a:	f8ad 0006 	strh.w	r0, [sp, #6]
    616e:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    6172:	f8ad 0008 	strh.w	r0, [sp, #8]
    6176:	4668      	mov	r0, sp
    6178:	f008 fe6b 	bl	ee52 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    617c:	b120      	cbz	r0, 6188 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x180>
    617e:	f240 115d 	movw	r1, #349	; 0x15d
    6182:	202b      	movs	r0, #43	; 0x2b
    6184:	f7fd fdea 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6188:	2001      	movs	r0, #1
    618a:	b006      	add	sp, #24
    618c:	bd10      	pop	{r4, pc}
    618e:	0751      	lsls	r1, r2, #29
    6190:	d402      	bmi.n	6198 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x190>
    6192:	7b80      	ldrb	r0, [r0, #14]
    6194:	07c0      	lsls	r0, r0, #31
    6196:	d0f7      	beq.n	6188 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x180>
    6198:	2000      	movs	r0, #0
    619a:	e7f6      	b.n	618a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x182>
    619c:	20000dd8 	.word	0x20000dd8

000061a0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    61a0:	b570      	push	{r4, r5, r6, lr}
    61a2:	4604      	mov	r4, r0
    61a4:	7c00      	ldrb	r0, [r0, #16]
    61a6:	b300      	cbz	r0, 61ea <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    61a8:	2802      	cmp	r0, #2
    61aa:	d01e      	beq.n	61ea <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    61ac:	f05f 0001 	movs.w	r0, #1
    61b0:	f104 0141 	add.w	r1, r4, #65	; 0x41
    61b4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    61b8:	460d      	mov	r5, r1
    61ba:	b1c0      	cbz	r0, 61ee <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    61bc:	7de0      	ldrb	r0, [r4, #23]
    61be:	b1f0      	cbz	r0, 61fe <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    61c0:	f8d4 0011 	ldr.w	r0, [r4, #17]
    61c4:	f8c4 0041 	str.w	r0, [r4, #65]	; 0x41
    61c8:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    61cc:	f8a4 0045 	strh.w	r0, [r4, #69]	; 0x45
    61d0:	7c20      	ldrb	r0, [r4, #16]
    61d2:	f007 fe7c 	bl	dece <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    61d6:	7620      	strb	r0, [r4, #24]
    61d8:	2008      	movs	r0, #8
    61da:	7660      	strb	r0, [r4, #25]
    61dc:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    61e0:	4629      	mov	r1, r5
    61e2:	f007 fe60 	bl	dea6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa8>
    61e6:	b9a8      	cbnz	r0, 6214 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    61e8:	e00e      	b.n	6208 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    61ea:	2000      	movs	r0, #0
    61ec:	e7e0      	b.n	61b0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    61ee:	2000      	movs	r0, #0
    61f0:	f7fe fc22 	bl	4a38 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    61f4:	2800      	cmp	r0, #0
    61f6:	d1eb      	bne.n	61d0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    61f8:	f240 4172 	movw	r1, #1138	; 0x472
    61fc:	e001      	b.n	6202 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    61fe:	f240 4176 	movw	r1, #1142	; 0x476
    6202:	202d      	movs	r0, #45	; 0x2d
    6204:	f7fd fdaa 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6208:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    620c:	4629      	mov	r1, r5
    620e:	f007 fe53 	bl	deb8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    6212:	b100      	cbz	r0, 6216 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    6214:	2001      	movs	r0, #1
    6216:	76a0      	strb	r0, [r4, #26]
    6218:	7e20      	ldrb	r0, [r4, #24]
    621a:	b910      	cbnz	r0, 6222 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x82>
    621c:	78a0      	ldrb	r0, [r4, #2]
    621e:	0740      	lsls	r0, r0, #29
    6220:	d506      	bpl.n	6230 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x90>
    6222:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
    6226:	f104 0148 	add.w	r1, r4, #72	; 0x48
    622a:	f007 f8a1 	bl	d370 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    622e:	7660      	strb	r0, [r4, #25]
    6230:	2500      	movs	r5, #0
    6232:	63a5      	str	r5, [r4, #56]	; 0x38
    6234:	f005 fe20 	bl	be78 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    6238:	63e0      	str	r0, [r4, #60]	; 0x3c
    623a:	2100      	movs	r1, #0
    623c:	4620      	mov	r0, r4
    623e:	f007 ff55 	bl	e0ec <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8c>
    6242:	f884 504e 	strb.w	r5, [r4, #78]	; 0x4e
    6246:	78a0      	ldrb	r0, [r4, #2]
    6248:	0740      	lsls	r0, r0, #29
    624a:	d508      	bpl.n	625e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbe>
    624c:	7e20      	ldrb	r0, [r4, #24]
    624e:	2800      	cmp	r0, #0
    6250:	d005      	beq.n	625e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbe>
    6252:	4620      	mov	r0, r4
    6254:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6258:	2100      	movs	r1, #0
    625a:	f000 bdbb 	b.w	6dd4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5dc>
    625e:	bd70      	pop	{r4, r5, r6, pc}

00006260 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA>:
    6260:	b508      	push	{r3, lr}
    6262:	f890 209c 	ldrb.w	r2, [r0, #156]	; 0x9c
    6266:	f88d 2000 	strb.w	r2, [sp]
    626a:	9a00      	ldr	r2, [sp, #0]
    626c:	9200      	str	r2, [sp, #0]
    626e:	f89d 3000 	ldrb.w	r3, [sp]
    6272:	2200      	movs	r2, #0
    6274:	b163      	cbz	r3, 6290 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x30>
    6276:	704a      	strb	r2, [r1, #1]
    6278:	2317      	movs	r3, #23
    627a:	700b      	strb	r3, [r1, #0]
    627c:	f850 3f9d 	ldr.w	r3, [r0, #157]!
    6280:	604b      	str	r3, [r1, #4]
    6282:	6843      	ldr	r3, [r0, #4]
    6284:	608b      	str	r3, [r1, #8]
    6286:	7a03      	ldrb	r3, [r0, #8]
    6288:	730b      	strb	r3, [r1, #12]
    628a:	f800 2c01 	strb.w	r2, [r0, #-1]
    628e:	e03b      	b.n	6308 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    6290:	f890 3096 	ldrb.w	r3, [r0, #150]	; 0x96
    6294:	f88d 3000 	strb.w	r3, [sp]
    6298:	9b00      	ldr	r3, [sp, #0]
    629a:	9300      	str	r3, [sp, #0]
    629c:	f89d 3000 	ldrb.w	r3, [sp]
    62a0:	b143      	cbz	r3, 62b4 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x54>
    62a2:	704a      	strb	r2, [r1, #1]
    62a4:	2305      	movs	r3, #5
    62a6:	700b      	strb	r3, [r1, #0]
    62a8:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    62ac:	604b      	str	r3, [r1, #4]
    62ae:	f880 2096 	strb.w	r2, [r0, #150]	; 0x96
    62b2:	e029      	b.n	6308 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    62b4:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    62b8:	f88d 3000 	strb.w	r3, [sp]
    62bc:	9b00      	ldr	r3, [sp, #0]
    62be:	9300      	str	r3, [sp, #0]
    62c0:	f89d 3000 	ldrb.w	r3, [sp]
    62c4:	b11b      	cbz	r3, 62ce <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x6e>
    62c6:	bf00      	nop
    62c8:	f007 fee8 	bl	e09c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c>
    62cc:	e01c      	b.n	6308 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    62ce:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
    62d2:	f88d 3000 	strb.w	r3, [sp]
    62d6:	9b00      	ldr	r3, [sp, #0]
    62d8:	9300      	str	r3, [sp, #0]
    62da:	f89d 3000 	ldrb.w	r3, [sp]
    62de:	b1ab      	cbz	r3, 630c <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xac>
    62e0:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    62e4:	f88d 3000 	strb.w	r3, [sp]
    62e8:	9b00      	ldr	r3, [sp, #0]
    62ea:	9300      	str	r3, [sp, #0]
    62ec:	f89d 3000 	ldrb.w	r3, [sp]
    62f0:	2b00      	cmp	r3, #0
    62f2:	d1e9      	bne.n	62c8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x68>
    62f4:	704a      	strb	r2, [r1, #1]
    62f6:	2314      	movs	r3, #20
    62f8:	700b      	strb	r3, [r1, #0]
    62fa:	f850 3f90 	ldr.w	r3, [r0, #144]!
    62fe:	604b      	str	r3, [r1, #4]
    6300:	8883      	ldrh	r3, [r0, #4]
    6302:	810b      	strh	r3, [r1, #8]
    6304:	f800 2c02 	strb.w	r2, [r0, #-2]
    6308:	2001      	movs	r0, #1
    630a:	bd08      	pop	{r3, pc}
    630c:	2000      	movs	r0, #0
    630e:	bd08      	pop	{r3, pc}

00006310 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    6310:	b530      	push	{r4, r5, lr}
    6312:	460c      	mov	r4, r1
    6314:	b08d      	sub	sp, #52	; 0x34
    6316:	4605      	mov	r5, r0
    6318:	4601      	mov	r1, r0
    631a:	2220      	movs	r2, #32
    631c:	a802      	add	r0, sp, #8
    631e:	f005 ff20 	bl	c162 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6322:	a80a      	add	r0, sp, #40	; 0x28
    6324:	f007 ff8f 	bl	e246 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    6328:	7aa0      	ldrb	r0, [r4, #10]
    632a:	f88d 0018 	strb.w	r0, [sp, #24]
    632e:	7820      	ldrb	r0, [r4, #0]
    6330:	f88d 0008 	strb.w	r0, [sp, #8]
    6334:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    6338:	f8ad 0000 	strh.w	r0, [sp]
    633c:	f89d 0000 	ldrb.w	r0, [sp]
    6340:	f000 0101 	and.w	r1, r0, #1
    6344:	f3c0 0240 	ubfx	r2, r0, #1, #1
    6348:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    634c:	f3c0 0280 	ubfx	r2, r0, #2, #1
    6350:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    6354:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    6358:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    635c:	f3c0 1200 	ubfx	r2, r0, #4, #1
    6360:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    6364:	f3c0 1240 	ubfx	r2, r0, #5, #1
    6368:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    636c:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6370:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    6374:	f8ad 000a 	strh.w	r0, [sp, #10]
    6378:	7d20      	ldrb	r0, [r4, #20]
    637a:	2801      	cmp	r0, #1
    637c:	d006      	beq.n	638c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    637e:	2802      	cmp	r0, #2
    6380:	d004      	beq.n	638c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    6382:	f240 21af 	movw	r1, #687	; 0x2af
    6386:	2006      	movs	r0, #6
    6388:	f7fd fce8 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    638c:	f88d 000c 	strb.w	r0, [sp, #12]
    6390:	7a61      	ldrb	r1, [r4, #9]
    6392:	a80a      	add	r0, sp, #40	; 0x28
    6394:	f007 ff3e 	bl	e214 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    6398:	7d20      	ldrb	r0, [r4, #20]
    639a:	2101      	movs	r1, #1
    639c:	2802      	cmp	r0, #2
    639e:	d102      	bne.n	63a6 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    63a0:	7d60      	ldrb	r0, [r4, #21]
    63a2:	1c40      	adds	r0, r0, #1
    63a4:	b2c1      	uxtb	r1, r0
    63a6:	7ea0      	ldrb	r0, [r4, #26]
    63a8:	1c40      	adds	r0, r0, #1
    63aa:	b2c2      	uxtb	r2, r0
    63ac:	a80a      	add	r0, sp, #40	; 0x28
    63ae:	f007 fef8 	bl	e1a2 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    63b2:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    63b6:	0700      	lsls	r0, r0, #28
    63b8:	d501      	bpl.n	63be <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    63ba:	2000      	movs	r0, #0
    63bc:	e020      	b.n	6400 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    63be:	a80a      	add	r0, sp, #40	; 0x28
    63c0:	f007 ff01 	bl	e1c6 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    63c4:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    63c8:	2228      	movs	r2, #40	; 0x28
    63ca:	f000 fdab 	bl	6f24 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    63ce:	f240 2171 	movw	r1, #625	; 0x271
    63d2:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
    63d6:	fbb0 f0f1 	udiv	r0, r0, r1
    63da:	4348      	muls	r0, r1
    63dc:	f8d4 1002 	ldr.w	r1, [r4, #2]
    63e0:	f240 2371 	movw	r3, #625	; 0x271
    63e4:	0a0a      	lsrs	r2, r1, #8
    63e6:	f240 2171 	movw	r1, #625	; 0x271
    63ea:	434a      	muls	r2, r1
    63ec:	f8d4 1005 	ldr.w	r1, [r4, #5]
    63f0:	0a09      	lsrs	r1, r1, #8
    63f2:	4359      	muls	r1, r3
    63f4:	4290      	cmp	r0, r2
    63f6:	d801      	bhi.n	63fc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    63f8:	9204      	str	r2, [sp, #16]
    63fa:	e004      	b.n	6406 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    63fc:	4288      	cmp	r0, r1
    63fe:	d801      	bhi.n	6404 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    6400:	9004      	str	r0, [sp, #16]
    6402:	e000      	b.n	6406 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    6404:	9104      	str	r1, [sp, #16]
    6406:	7ca0      	ldrb	r0, [r4, #18]
    6408:	f88d 0017 	strb.w	r0, [sp, #23]
    640c:	7e20      	ldrb	r0, [r4, #24]
    640e:	2801      	cmp	r0, #1
    6410:	d000      	beq.n	6414 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    6412:	2000      	movs	r0, #0
    6414:	f88d 0014 	strb.w	r0, [sp, #20]
    6418:	f895 0064 	ldrb.w	r0, [r5, #100]	; 0x64
    641c:	f895 0065 	ldrb.w	r0, [r5, #101]	; 0x65
    6420:	2220      	movs	r2, #32
    6422:	a902      	add	r1, sp, #8
    6424:	4628      	mov	r0, r5
    6426:	f005 fe9c 	bl	c162 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    642a:	980a      	ldr	r0, [sp, #40]	; 0x28
    642c:	6228      	str	r0, [r5, #32]
    642e:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
    6432:	84a8      	strh	r0, [r5, #36]	; 0x24
    6434:	7ae0      	ldrb	r0, [r4, #11]
    6436:	b168      	cbz	r0, 6454 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x144>
    6438:	2802      	cmp	r0, #2
    643a:	d00b      	beq.n	6454 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x144>
    643c:	f05f 0001 	movs.w	r0, #1
    6440:	f885 0047 	strb.w	r0, [r5, #71]	; 0x47
    6444:	68e0      	ldr	r0, [r4, #12]
    6446:	64a8      	str	r0, [r5, #72]	; 0x48
    6448:	8a20      	ldrh	r0, [r4, #16]
    644a:	f8a5 004c 	strh.w	r0, [r5, #76]	; 0x4c
    644e:	b00d      	add	sp, #52	; 0x34
    6450:	2000      	movs	r0, #0
    6452:	bd30      	pop	{r4, r5, pc}
    6454:	2000      	movs	r0, #0
    6456:	e7f3      	b.n	6440 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x130>

00006458 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    6458:	4a0a      	ldr	r2, [pc, #40]	; (6484 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    645a:	b510      	push	{r4, lr}
    645c:	2100      	movs	r1, #0
    645e:	7011      	strb	r1, [r2, #0]
    6460:	4c09      	ldr	r4, [pc, #36]	; (6488 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    6462:	6060      	str	r0, [r4, #4]
    6464:	f000 f822 	bl	64ac <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    6468:	b110      	cbz	r0, 6470 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    646a:	f240 311e 	movw	r1, #798	; 0x31e
    646e:	e004      	b.n	647a <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    6470:	68a0      	ldr	r0, [r4, #8]
    6472:	2800      	cmp	r0, #0
    6474:	d104      	bne.n	6480 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    6476:	f240 3121 	movw	r1, #801	; 0x321
    647a:	202d      	movs	r0, #45	; 0x2d
    647c:	f7fd fc6e 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6480:	bd10      	pop	{r4, pc}
    6482:	0000      	.short	0x0000
    6484:	20000df4 	.word	0x20000df4
    6488:	200000f0 	.word	0x200000f0

0000648c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    648c:	4902      	ldr	r1, [pc, #8]	; (6498 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    648e:	4801      	ldr	r0, [pc, #4]	; (6494 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    6490:	6088      	str	r0, [r1, #8]
    6492:	4770      	bx	lr
    6494:	00006f0c 	.word	0x00006f0c
    6498:	200000f0 	.word	0x200000f0

0000649c <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    649c:	4902      	ldr	r1, [pc, #8]	; (64a8 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    649e:	6008      	str	r0, [r1, #0]
    64a0:	6889      	ldr	r1, [r1, #8]
    64a2:	6809      	ldr	r1, [r1, #0]
    64a4:	4708      	bx	r1
    64a6:	0000      	.short	0x0000
    64a8:	200000f0 	.word	0x200000f0

000064ac <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    64ac:	4808      	ldr	r0, [pc, #32]	; (64d0 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    64ae:	b510      	push	{r4, lr}
    64b0:	7801      	ldrb	r1, [r0, #0]
    64b2:	b111      	cbz	r1, 64ba <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    64b4:	240c      	movs	r4, #12
    64b6:	4620      	mov	r0, r4
    64b8:	bd10      	pop	{r4, pc}
    64ba:	2400      	movs	r4, #0
    64bc:	6004      	str	r4, [r0, #0]
    64be:	6044      	str	r4, [r0, #4]
    64c0:	6084      	str	r4, [r0, #8]
    64c2:	60c4      	str	r4, [r0, #12]
    64c4:	f004 fb4c 	bl	ab60 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    64c8:	f004 f98e 	bl	a7e8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    64cc:	e7f3      	b.n	64b6 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    64ce:	0000      	.short	0x0000
    64d0:	20000df4 	.word	0x20000df4

000064d4 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    64d4:	4904      	ldr	r1, [pc, #16]	; (64e8 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    64d6:	b510      	push	{r4, lr}
    64d8:	7809      	ldrb	r1, [r1, #0]
    64da:	2901      	cmp	r1, #1
    64dc:	d101      	bne.n	64e2 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    64de:	f000 fb65 	bl	6bac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b4>
    64e2:	2000      	movs	r0, #0
    64e4:	bd10      	pop	{r4, pc}
    64e6:	0000      	.short	0x0000
    64e8:	20000df4 	.word	0x20000df4

000064ec <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    64ec:	4902      	ldr	r1, [pc, #8]	; (64f8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    64ee:	4801      	ldr	r0, [pc, #4]	; (64f4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    64f0:	6008      	str	r0, [r1, #0]
    64f2:	4770      	bx	lr
    64f4:	00006cf9 	.word	0x00006cf9
    64f8:	200000fc 	.word	0x200000fc
    64fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6500:	000f      	movs	r7, r1
    6502:	4604      	mov	r4, r0
    6504:	d023      	beq.n	654e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x62>
    6506:	f104 0020 	add.w	r0, r4, #32
    650a:	4605      	mov	r5, r0
    650c:	f007 fe84 	bl	e218 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    6510:	b9b0      	cbnz	r0, 6540 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x54>
    6512:	78a0      	ldrb	r0, [r4, #2]
    6514:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    6518:	b350      	cbz	r0, 6570 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x84>
    651a:	4628      	mov	r0, r5
    651c:	f007 fe53 	bl	e1c6 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    6520:	4606      	mov	r6, r0
    6522:	4628      	mov	r0, r5
    6524:	f007 fe78 	bl	e218 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    6528:	1a30      	subs	r0, r6, r0
    652a:	b2c0      	uxtb	r0, r0
    652c:	f007 fec9 	bl	e2c2 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    6530:	4601      	mov	r1, r0
    6532:	4835      	ldr	r0, [pc, #212]	; (6608 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x11c>)
    6534:	6842      	ldr	r2, [r0, #4]
    6536:	4411      	add	r1, r2
    6538:	6041      	str	r1, [r0, #4]
    653a:	4628      	mov	r0, r5
    653c:	f007 fe8a 	bl	e254 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    6540:	4628      	mov	r0, r5
    6542:	f007 fe4c 	bl	e1de <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    6546:	4601      	mov	r1, r0
    6548:	4620      	mov	r0, r4
    654a:	f007 fe0b 	bl	e164 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x104>
    654e:	4d2f      	ldr	r5, [pc, #188]	; (660c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x120>)
    6550:	f894 604e 	ldrb.w	r6, [r4, #78]	; 0x4e
    6554:	2100      	movs	r1, #0
    6556:	6868      	ldr	r0, [r5, #4]
    6558:	8001      	strh	r1, [r0, #0]
    655a:	f007 fe19 	bl	e190 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x130>
    655e:	8860      	ldrh	r0, [r4, #2]
    6560:	2813      	cmp	r0, #19
    6562:	d013      	beq.n	658c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xa0>
    6564:	dc09      	bgt.n	657a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8e>
    6566:	2810      	cmp	r0, #16
    6568:	d036      	beq.n	65d8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xec>
    656a:	2812      	cmp	r0, #18
    656c:	d109      	bne.n	6582 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x96>
    656e:	e031      	b.n	65d4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe8>
    6570:	4620      	mov	r0, r4
    6572:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6576:	f000 bb19 	b.w	6bac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b4>
    657a:	2815      	cmp	r0, #21
    657c:	d00f      	beq.n	659e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    657e:	281d      	cmp	r0, #29
    6580:	d00d      	beq.n	659e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    6582:	f240 616f 	movw	r1, #1647	; 0x66f
    6586:	202d      	movs	r0, #45	; 0x2d
    6588:	f7fd fbe8 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    658c:	2100      	movs	r1, #0
    658e:	6868      	ldr	r0, [r5, #4]
    6590:	f007 fa98 	bl	dac4 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6594:	2101      	movs	r1, #1
    6596:	6868      	ldr	r0, [r5, #4]
    6598:	f007 fdfa 	bl	e190 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x130>
    659c:	e020      	b.n	65e0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    659e:	2101      	movs	r1, #1
    65a0:	6868      	ldr	r0, [r5, #4]
    65a2:	f007 fa8f 	bl	dac4 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    65a6:	2101      	movs	r1, #1
    65a8:	6868      	ldr	r0, [r5, #4]
    65aa:	f007 fdf1 	bl	e190 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x130>
    65ae:	b136      	cbz	r6, 65be <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xd2>
    65b0:	f104 014f 	add.w	r1, r4, #79	; 0x4f
    65b4:	6868      	ldr	r0, [r5, #4]
    65b6:	f007 faa0 	bl	dafa <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    65ba:	2101      	movs	r1, #1
    65bc:	e006      	b.n	65cc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe0>
    65be:	f104 0148 	add.w	r1, r4, #72	; 0x48
    65c2:	6868      	ldr	r0, [r5, #4]
    65c4:	f007 fa99 	bl	dafa <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    65c8:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
    65cc:	6868      	ldr	r0, [r5, #4]
    65ce:	f007 fa9a 	bl	db06 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    65d2:	e005      	b.n	65e0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    65d4:	2106      	movs	r1, #6
    65d6:	e000      	b.n	65da <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xee>
    65d8:	2102      	movs	r1, #2
    65da:	6868      	ldr	r0, [r5, #4]
    65dc:	f007 fa72 	bl	dac4 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    65e0:	4620      	mov	r0, r4
    65e2:	f000 fc6b 	bl	6ebc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6c4>
    65e6:	8860      	ldrh	r0, [r4, #2]
    65e8:	281d      	cmp	r0, #29
    65ea:	d006      	beq.n	65fa <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    65ec:	2815      	cmp	r0, #21
    65ee:	d004      	beq.n	65fa <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    65f0:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    65f2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    65f4:	6868      	ldr	r0, [r5, #4]
    65f6:	f007 fa55 	bl	daa4 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>
    65fa:	4639      	mov	r1, r7
    65fc:	4620      	mov	r0, r4
    65fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6602:	f000 b9d9 	b.w	69b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1c0>
    6606:	0000      	.short	0x0000
    6608:	20000df4 	.word	0x20000df4
    660c:	200000f0 	.word	0x200000f0
    6610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6614:	4d28      	ldr	r5, [pc, #160]	; (66b8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1cc>)
    6616:	4680      	mov	r8, r0
    6618:	7828      	ldrb	r0, [r5, #0]
    661a:	2802      	cmp	r0, #2
    661c:	d005      	beq.n	662a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    661e:	7828      	ldrb	r0, [r5, #0]
    6620:	2803      	cmp	r0, #3
    6622:	d002      	beq.n	662a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    6624:	f44f 6148 	mov.w	r1, #3200	; 0xc80
    6628:	e01f      	b.n	666a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x17e>
    662a:	4c24      	ldr	r4, [pc, #144]	; (66bc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1d0>)
    662c:	6820      	ldr	r0, [r4, #0]
    662e:	7b01      	ldrb	r1, [r0, #12]
    6630:	b109      	cbz	r1, 6636 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14a>
    6632:	f007 fda2 	bl	e17a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11a>
    6636:	6860      	ldr	r0, [r4, #4]
    6638:	2700      	movs	r7, #0
    663a:	f1b8 0f00 	cmp.w	r8, #0
    663e:	7800      	ldrb	r0, [r0, #0]
    6640:	f000 060f 	and.w	r6, r0, #15
    6644:	d01f      	beq.n	6686 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x19a>
    6646:	f004 fc93 	bl	af70 <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA>
    664a:	b1e0      	cbz	r0, 6686 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x19a>
    664c:	4639      	mov	r1, r7
    664e:	6860      	ldr	r0, [r4, #4]
    6650:	f007 f9ee 	bl	da30 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>
    6654:	b1b8      	cbz	r0, 6686 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x19a>
    6656:	782a      	ldrb	r2, [r5, #0]
    6658:	6820      	ldr	r0, [r4, #0]
    665a:	4631      	mov	r1, r6
    665c:	2a02      	cmp	r2, #2
    665e:	d007      	beq.n	6670 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x184>
    6660:	782a      	ldrb	r2, [r5, #0]
    6662:	2a03      	cmp	r2, #3
    6664:	d004      	beq.n	6670 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x184>
    6666:	f640 4159 	movw	r1, #3161	; 0xc59
    666a:	202d      	movs	r0, #45	; 0x2d
    666c:	f7fd fb76 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6670:	68a2      	ldr	r2, [r4, #8]
    6672:	782b      	ldrb	r3, [r5, #0]
    6674:	6952      	ldr	r2, [r2, #20]
    6676:	f06f 0607 	mvn.w	r6, #7
    667a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    667e:	58d2      	ldr	r2, [r2, r3]
    6680:	4790      	blx	r2
    6682:	4606      	mov	r6, r0
    6684:	e000      	b.n	6688 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x19c>
    6686:	2601      	movs	r6, #1
    6688:	7ba8      	ldrb	r0, [r5, #14]
    668a:	b118      	cbz	r0, 6694 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1a8>
    668c:	f004 fa68 	bl	ab60 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6690:	f004 f8aa 	bl	a7e8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6694:	2e00      	cmp	r6, #0
    6696:	d00d      	beq.n	66b4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1c8>
    6698:	6820      	ldr	r0, [r4, #0]
    669a:	f007 fe25 	bl	e2e8 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    669e:	b120      	cbz	r0, 66aa <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1be>
    66a0:	68a0      	ldr	r0, [r4, #8]
    66a2:	6880      	ldr	r0, [r0, #8]
    66a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    66a8:	4700      	bx	r0
    66aa:	6820      	ldr	r0, [r4, #0]
    66ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    66b0:	f000 ba7c 	b.w	6bac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b4>
    66b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    66b8:	20000df4 	.word	0x20000df4
    66bc:	200000f0 	.word	0x200000f0
    66c0:	b510      	push	{r4, lr}
    66c2:	2903      	cmp	r1, #3
    66c4:	d002      	beq.n	66cc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e0>
    66c6:	2905      	cmp	r1, #5
    66c8:	d10a      	bne.n	66e0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f4>
    66ca:	e002      	b.n	66d2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e6>
    66cc:	f000 fb48 	bl	6d60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x568>
    66d0:	e003      	b.n	66da <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ee>
    66d2:	4904      	ldr	r1, [pc, #16]	; (66e4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f8>)
    66d4:	6809      	ldr	r1, [r1, #0]
    66d6:	b109      	cbz	r1, 66dc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f0>
    66d8:	4788      	blx	r1
    66da:	b108      	cbz	r0, 66e0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f4>
    66dc:	2000      	movs	r0, #0
    66de:	bd10      	pop	{r4, pc}
    66e0:	2001      	movs	r0, #1
    66e2:	bd10      	pop	{r4, pc}
    66e4:	200000fc 	.word	0x200000fc
    66e8:	4a09      	ldr	r2, [pc, #36]	; (6710 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x224>)
    66ea:	0003      	movs	r3, r0
    66ec:	6810      	ldr	r0, [r2, #0]
    66ee:	d001      	beq.n	66f4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x208>
    66f0:	f000 ba5c 	b.w	6bac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b4>
    66f4:	2900      	cmp	r1, #0
    66f6:	d009      	beq.n	670c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x220>
    66f8:	6891      	ldr	r1, [r2, #8]
    66fa:	4a06      	ldr	r2, [pc, #24]	; (6714 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x228>)
    66fc:	6909      	ldr	r1, [r1, #16]
    66fe:	7812      	ldrb	r2, [r2, #0]
    6700:	f06f 030f 	mvn.w	r3, #15
    6704:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    6708:	5889      	ldr	r1, [r1, r2]
    670a:	4708      	bx	r1
    670c:	4770      	bx	lr
    670e:	0000      	.short	0x0000
    6710:	200000f0 	.word	0x200000f0
    6714:	20000df4 	.word	0x20000df4
    6718:	b570      	push	{r4, r5, r6, lr}
    671a:	4604      	mov	r4, r0
    671c:	8840      	ldrh	r0, [r0, #2]
    671e:	2500      	movs	r5, #0
    6720:	2810      	cmp	r0, #16
    6722:	d014      	beq.n	674e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x262>
    6724:	4e14      	ldr	r6, [pc, #80]	; (6778 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x28c>)
    6726:	7bb0      	ldrb	r0, [r6, #14]
    6728:	b120      	cbz	r0, 6734 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x248>
    672a:	f004 f87d 	bl	a828 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    672e:	2040      	movs	r0, #64	; 0x40
    6730:	f004 fa26 	bl	ab80 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    6734:	4811      	ldr	r0, [pc, #68]	; (677c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x290>)
    6736:	6840      	ldr	r0, [r0, #4]
    6738:	f004 fcde 	bl	b0f8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    673c:	78a0      	ldrb	r0, [r4, #2]
    673e:	0740      	lsls	r0, r0, #29
    6740:	d413      	bmi.n	676a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x27e>
    6742:	7be0      	ldrb	r0, [r4, #15]
    6744:	2801      	cmp	r0, #1
    6746:	d008      	beq.n	675a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x26e>
    6748:	2803      	cmp	r0, #3
    674a:	d006      	beq.n	675a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x26e>
    674c:	e006      	b.n	675c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x270>
    674e:	4620      	mov	r0, r4
    6750:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6754:	2101      	movs	r1, #1
    6756:	f7ff bed1 	b.w	64fc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    675a:	2510      	movs	r5, #16
    675c:	2100      	movs	r1, #0
    675e:	f045 020e 	orr.w	r2, r5, #14
    6762:	7923      	ldrb	r3, [r4, #4]
    6764:	4608      	mov	r0, r1
    6766:	f004 fd51 	bl	b20c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    676a:	2000      	movs	r0, #0
    676c:	f004 fb5e 	bl	ae2c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    6770:	2002      	movs	r0, #2
    6772:	7030      	strb	r0, [r6, #0]
    6774:	bd70      	pop	{r4, r5, r6, pc}
    6776:	0000      	.short	0x0000
    6778:	20000df4 	.word	0x20000df4
    677c:	200000f0 	.word	0x200000f0
    6780:	b510      	push	{r4, lr}
    6782:	4c12      	ldr	r4, [pc, #72]	; (67cc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e0>)
    6784:	6820      	ldr	r0, [r4, #0]
    6786:	f000 f825 	bl	67d4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e8>
    678a:	6820      	ldr	r0, [r4, #0]
    678c:	f007 fdac 	bl	e2e8 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    6790:	2800      	cmp	r0, #0
    6792:	6820      	ldr	r0, [r4, #0]
    6794:	d00b      	beq.n	67ae <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2c2>
    6796:	490e      	ldr	r1, [pc, #56]	; (67d0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e4>)
    6798:	780a      	ldrb	r2, [r1, #0]
    679a:	2a02      	cmp	r2, #2
    679c:	d00b      	beq.n	67b6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ca>
    679e:	780a      	ldrb	r2, [r1, #0]
    67a0:	2a03      	cmp	r2, #3
    67a2:	d008      	beq.n	67b6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ca>
    67a4:	f640 3194 	movw	r1, #2964	; 0xb94
    67a8:	202d      	movs	r0, #45	; 0x2d
    67aa:	f7fd fad7 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    67ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    67b2:	f000 b9fb 	b.w	6bac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b4>
    67b6:	68a2      	ldr	r2, [r4, #8]
    67b8:	7809      	ldrb	r1, [r1, #0]
    67ba:	68d2      	ldr	r2, [r2, #12]
    67bc:	f06f 0307 	mvn.w	r3, #7
    67c0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    67c4:	5851      	ldr	r1, [r2, r1]
    67c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    67ca:	4708      	bx	r1
    67cc:	200000f0 	.word	0x200000f0
    67d0:	20000df4 	.word	0x20000df4
    67d4:	b510      	push	{r4, lr}
    67d6:	7b01      	ldrb	r1, [r0, #12]
    67d8:	b109      	cbz	r1, 67de <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2f2>
    67da:	f007 fcce 	bl	e17a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11a>
    67de:	4805      	ldr	r0, [pc, #20]	; (67f4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x308>)
    67e0:	7b80      	ldrb	r0, [r0, #14]
    67e2:	2800      	cmp	r0, #0
    67e4:	d005      	beq.n	67f2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x306>
    67e6:	f004 f9bb 	bl	ab60 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    67ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    67ee:	f003 bffb 	b.w	a7e8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    67f2:	bd10      	pop	{r4, pc}
    67f4:	20000df4 	.word	0x20000df4

000067f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    67f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    67fc:	4d54      	ldr	r5, [pc, #336]	; (6950 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x158>)
    67fe:	4604      	mov	r4, r0
    6800:	b086      	sub	sp, #24
    6802:	7828      	ldrb	r0, [r5, #0]
    6804:	bbf0      	cbnz	r0, 6884 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8c>
    6806:	7820      	ldrb	r0, [r4, #0]
    6808:	28ff      	cmp	r0, #255	; 0xff
    680a:	d044      	beq.n	6896 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x9e>
    680c:	2600      	movs	r6, #0
    680e:	81ae      	strh	r6, [r5, #12]
    6810:	606e      	str	r6, [r5, #4]
    6812:	706e      	strb	r6, [r5, #1]
    6814:	70ae      	strb	r6, [r5, #2]
    6816:	f884 6059 	strb.w	r6, [r4, #89]	; 0x59
    681a:	4630      	mov	r0, r6
    681c:	f004 fb6e 	bl	aefc <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>
    6820:	2214      	movs	r2, #20
    6822:	494c      	ldr	r1, [pc, #304]	; (6954 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x15c>)
    6824:	4668      	mov	r0, sp
    6826:	f005 fc9c 	bl	c162 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    682a:	f8df 812c 	ldr.w	r8, [pc, #300]	; 6958 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x160>
    682e:	f8d8 0008 	ldr.w	r0, [r8, #8]
    6832:	6840      	ldr	r0, [r0, #4]
    6834:	9003      	str	r0, [sp, #12]
    6836:	4668      	mov	r0, sp
    6838:	f004 facc 	bl	add4 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    683c:	f004 fbce 	bl	afdc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    6840:	f004 f98e 	bl	ab60 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6844:	f003 ffd0 	bl	a7e8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6848:	4842      	ldr	r0, [pc, #264]	; (6954 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x15c>)
    684a:	1f40      	subs	r0, r0, #5
    684c:	f004 fd30 	bl	b2b0 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    6850:	4840      	ldr	r0, [pc, #256]	; (6954 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x15c>)
    6852:	3808      	subs	r0, #8
    6854:	f004 fd38 	bl	b2c8 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    6858:	f104 0020 	add.w	r0, r4, #32
    685c:	4607      	mov	r7, r0
    685e:	f007 fcf9 	bl	e254 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    6862:	4638      	mov	r0, r7
    6864:	f007 fcbb 	bl	e1de <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    6868:	4601      	mov	r1, r0
    686a:	4620      	mov	r0, r4
    686c:	f007 fc7a 	bl	e164 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x104>
    6870:	f994 000e 	ldrsb.w	r0, [r4, #14]
    6874:	f004 fc3a 	bl	b0ec <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    6878:	7921      	ldrb	r1, [r4, #4]
    687a:	2000      	movs	r0, #0
    687c:	f004 fa2e 	bl	acdc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    6880:	60a8      	str	r0, [r5, #8]
    6882:	e000      	b.n	6886 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8e>
    6884:	e007      	b.n	6896 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x9e>
    6886:	b150      	cbz	r0, 689e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa6>
    6888:	210f      	movs	r1, #15
    688a:	2005      	movs	r0, #5
    688c:	f004 f98c 	bl	aba8 <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y>
    6890:	7ea0      	ldrb	r0, [r4, #26]
    6892:	b960      	cbnz	r0, 68ae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb6>
    6894:	e006      	b.n	68a4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xac>
    6896:	200c      	movs	r0, #12
    6898:	b006      	add	sp, #24
    689a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    689e:	2001      	movs	r0, #1
    68a0:	7028      	strb	r0, [r5, #0]
    68a2:	e052      	b.n	694a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x152>
    68a4:	7e20      	ldrb	r0, [r4, #24]
    68a6:	b910      	cbnz	r0, 68ae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb6>
    68a8:	78a0      	ldrb	r0, [r4, #2]
    68aa:	0740      	lsls	r0, r0, #29
    68ac:	d52b      	bpl.n	6906 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10e>
    68ae:	f005 fae3 	bl	be78 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    68b2:	4682      	mov	sl, r0
    68b4:	4651      	mov	r1, sl
    68b6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    68b8:	f7fa fe3c 	bl	1534 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    68bc:	f8df 909c 	ldr.w	r9, [pc, #156]	; 695c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x164>
    68c0:	4607      	mov	r7, r0
    68c2:	fb90 f1f9 	sdiv	r1, r0, r9
    68c6:	fb09 7011 	mls	r0, r9, r1, r7
    68ca:	4241      	negs	r1, r0
    68cc:	4650      	mov	r0, sl
    68ce:	f7fa fdfb 	bl	14c8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    68d2:	63e0      	str	r0, [r4, #60]	; 0x3c
    68d4:	fb97 f0f9 	sdiv	r0, r7, r9
    68d8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    68da:	4408      	add	r0, r1
    68dc:	63a0      	str	r0, [r4, #56]	; 0x38
    68de:	f7fe ff3f 	bl	5760 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    68e2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    68e4:	4288      	cmp	r0, r1
    68e6:	d80e      	bhi.n	6906 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10e>
    68e8:	e9c4 6a0e 	strd	r6, sl, [r4, #56]	; 0x38
    68ec:	2101      	movs	r1, #1
    68ee:	4620      	mov	r0, r4
    68f0:	f007 fbfc 	bl	e0ec <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8c>
    68f4:	78a0      	ldrb	r0, [r4, #2]
    68f6:	0740      	lsls	r0, r0, #29
    68f8:	d505      	bpl.n	6906 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10e>
    68fa:	7e20      	ldrb	r0, [r4, #24]
    68fc:	b118      	cbz	r0, 6906 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10e>
    68fe:	2101      	movs	r1, #1
    6900:	4620      	mov	r0, r4
    6902:	f000 fa67 	bl	6dd4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5dc>
    6906:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
    690a:	f104 0041 	add.w	r0, r4, #65	; 0x41
    690e:	f004 fcc3 	bl	b298 <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ>
    6912:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
    6916:	b130      	cbz	r0, 6926 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x12e>
    6918:	f8b4 0066 	ldrh.w	r0, [r4, #102]	; 0x66
    691c:	86a0      	strh	r0, [r4, #52]	; 0x34
    691e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    6920:	62e0      	str	r0, [r4, #44]	; 0x2c
    6922:	f884 6064 	strb.w	r6, [r4, #100]	; 0x64
    6926:	f894 0065 	ldrb.w	r0, [r4, #101]	; 0x65
    692a:	b130      	cbz	r0, 693a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x142>
    692c:	f8b4 0068 	ldrh.w	r0, [r4, #104]	; 0x68
    6930:	86e0      	strh	r0, [r4, #54]	; 0x36
    6932:	6e20      	ldr	r0, [r4, #96]	; 0x60
    6934:	6320      	str	r0, [r4, #48]	; 0x30
    6936:	f884 6065 	strb.w	r6, [r4, #101]	; 0x65
    693a:	f7fe ff77 	bl	582c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    693e:	2103      	movs	r1, #3
    6940:	f8d8 0004 	ldr.w	r0, [r8, #4]
    6944:	f006 fd07 	bl	d356 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    6948:	73a8      	strb	r0, [r5, #14]
    694a:	2000      	movs	r0, #0
    694c:	e7a4      	b.n	6898 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa0>
    694e:	0000      	.short	0x0000
    6950:	20000df4 	.word	0x20000df4
    6954:	00006ee8 	.word	0x00006ee8
    6958:	200000f0 	.word	0x200000f0
    695c:	000f4240 	.word	0x000f4240
    6960:	b510      	push	{r4, lr}
    6962:	4604      	mov	r4, r0
    6964:	f7ff ff48 	bl	67f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    6968:	2800      	cmp	r0, #0
    696a:	d108      	bne.n	697e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x186>
    696c:	4804      	ldr	r0, [pc, #16]	; (6980 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x188>)
    696e:	7800      	ldrb	r0, [r0, #0]
    6970:	2801      	cmp	r0, #1
    6972:	d003      	beq.n	697c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x184>
    6974:	2100      	movs	r1, #0
    6976:	4620      	mov	r0, r4
    6978:	f7ff fdc0 	bl	64fc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    697c:	2000      	movs	r0, #0
    697e:	bd10      	pop	{r4, pc}
    6980:	20000df4 	.word	0x20000df4
    6984:	480a      	ldr	r0, [pc, #40]	; (69b0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b8>)
    6986:	b510      	push	{r4, lr}
    6988:	490a      	ldr	r1, [pc, #40]	; (69b4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1bc>)
    698a:	6804      	ldr	r4, [r0, #0]
    698c:	7808      	ldrb	r0, [r1, #0]
    698e:	2800      	cmp	r0, #0
    6990:	d00d      	beq.n	69ae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b6>
    6992:	7808      	ldrb	r0, [r1, #0]
    6994:	2802      	cmp	r0, #2
    6996:	d002      	beq.n	699e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1a6>
    6998:	7808      	ldrb	r0, [r1, #0]
    699a:	2803      	cmp	r0, #3
    699c:	d102      	bne.n	69a4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ac>
    699e:	4620      	mov	r0, r4
    69a0:	f7ff ff18 	bl	67d4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e8>
    69a4:	4620      	mov	r0, r4
    69a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    69aa:	f000 b8ff 	b.w	6bac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b4>
    69ae:	bd10      	pop	{r4, pc}
    69b0:	200000f0 	.word	0x200000f0
    69b4:	20000df4 	.word	0x20000df4
    69b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    69bc:	4604      	mov	r4, r0
    69be:	4824      	ldr	r0, [pc, #144]	; (6a50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x258>)
    69c0:	460e      	mov	r6, r1
    69c2:	6840      	ldr	r0, [r0, #4]
    69c4:	f004 fb98 	bl	b0f8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    69c8:	4d22      	ldr	r5, [pc, #136]	; (6a54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x25c>)
    69ca:	2004      	movs	r0, #4
    69cc:	7028      	strb	r0, [r5, #0]
    69ce:	b1f6      	cbz	r6, 6a0e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x216>
    69d0:	8860      	ldrh	r0, [r4, #2]
    69d2:	2810      	cmp	r0, #16
    69d4:	d024      	beq.n	6a20 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x228>
    69d6:	f104 0020 	add.w	r0, r4, #32
    69da:	4680      	mov	r8, r0
    69dc:	68ae      	ldr	r6, [r5, #8]
    69de:	f007 fbf2 	bl	e1c6 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    69e2:	4607      	mov	r7, r0
    69e4:	4640      	mov	r0, r8
    69e6:	f007 fc17 	bl	e218 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    69ea:	1a38      	subs	r0, r7, r0
    69ec:	1e40      	subs	r0, r0, #1
    69ee:	b2c0      	uxtb	r0, r0
    69f0:	8861      	ldrh	r1, [r4, #2]
    69f2:	2228      	movs	r2, #40	; 0x28
    69f4:	f000 fab6 	bl	6f64 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    69f8:	1981      	adds	r1, r0, r6
    69fa:	78a0      	ldrb	r0, [r4, #2]
    69fc:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    6a00:	b108      	cbz	r0, 6a06 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x20e>
    6a02:	6868      	ldr	r0, [r5, #4]
    6a04:	4401      	add	r1, r0
    6a06:	7922      	ldrb	r2, [r4, #4]
    6a08:	2000      	movs	r0, #0
    6a0a:	f004 fb83 	bl	b114 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    6a0e:	8860      	ldrh	r0, [r4, #2]
    6a10:	2813      	cmp	r0, #19
    6a12:	d013      	beq.n	6a3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x244>
    6a14:	dc09      	bgt.n	6a2a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x232>
    6a16:	2810      	cmp	r0, #16
    6a18:	d018      	beq.n	6a4c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x254>
    6a1a:	2812      	cmp	r0, #18
    6a1c:	d109      	bne.n	6a32 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x23a>
    6a1e:	e00d      	b.n	6a3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x244>
    6a20:	7921      	ldrb	r1, [r4, #4]
    6a22:	2000      	movs	r0, #0
    6a24:	f004 f90e 	bl	ac44 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    6a28:	e7f1      	b.n	6a0e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x216>
    6a2a:	2815      	cmp	r0, #21
    6a2c:	d006      	beq.n	6a3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x244>
    6a2e:	281d      	cmp	r0, #29
    6a30:	d004      	beq.n	6a3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x244>
    6a32:	f640 510a 	movw	r1, #3338	; 0xd0a
    6a36:	202d      	movs	r0, #45	; 0x2d
    6a38:	f7fd f990 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6a3c:	7923      	ldrb	r3, [r4, #4]
    6a3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6a42:	2201      	movs	r2, #1
    6a44:	4611      	mov	r1, r2
    6a46:	2000      	movs	r0, #0
    6a48:	f004 bbe0 	b.w	b20c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    6a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6a50:	200000f0 	.word	0x200000f0
    6a54:	20000df4 	.word	0x20000df4
    6a58:	b510      	push	{r4, lr}
    6a5a:	4604      	mov	r4, r0
    6a5c:	7800      	ldrb	r0, [r0, #0]
    6a5e:	460b      	mov	r3, r1
    6a60:	f884 009d 	strb.w	r0, [r4, #157]	; 0x9d
    6a64:	29ff      	cmp	r1, #255	; 0xff
    6a66:	d010      	beq.n	6a8a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x292>
    6a68:	f104 029f 	add.w	r2, r4, #159	; 0x9f
    6a6c:	1e51      	subs	r1, r2, #1
    6a6e:	4618      	mov	r0, r3
    6a70:	f7fe fdf4 	bl	565c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    6a74:	b130      	cbz	r0, 6a84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x28c>
    6a76:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    6a7a:	f040 0002 	orr.w	r0, r0, #2
    6a7e:	f884 009e 	strb.w	r0, [r4, #158]	; 0x9e
    6a82:	e011      	b.n	6aa8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2b0>
    6a84:	f640 7119 	movw	r1, #3865	; 0xf19
    6a88:	e01d      	b.n	6ac6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ce>
    6a8a:	4810      	ldr	r0, [pc, #64]	; (6acc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2d4>)
    6a8c:	6840      	ldr	r0, [r0, #4]
    6a8e:	7801      	ldrb	r1, [r0, #0]
    6a90:	f3c1 1180 	ubfx	r1, r1, #6, #1
    6a94:	f884 109e 	strb.w	r1, [r4, #158]	; 0x9e
    6a98:	f8d0 1003 	ldr.w	r1, [r0, #3]
    6a9c:	f8c4 109f 	str.w	r1, [r4, #159]	; 0x9f
    6aa0:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    6aa4:	f8a4 00a3 	strh.w	r0, [r4, #163]	; 0xa3
    6aa8:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
    6aac:	287f      	cmp	r0, #127	; 0x7f
    6aae:	d008      	beq.n	6ac2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ca>
    6ab0:	f884 00a5 	strb.w	r0, [r4, #165]	; 0xa5
    6ab4:	207f      	movs	r0, #127	; 0x7f
    6ab6:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    6aba:	3486      	adds	r4, #134	; 0x86
    6abc:	2001      	movs	r0, #1
    6abe:	75a0      	strb	r0, [r4, #22]
    6ac0:	bd10      	pop	{r4, pc}
    6ac2:	f640 51bb 	movw	r1, #3515	; 0xdbb
    6ac6:	202d      	movs	r0, #45	; 0x2d
    6ac8:	f7fd f948 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6acc:	200000f0 	.word	0x200000f0
    6ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6ad4:	4604      	mov	r4, r0
    6ad6:	8840      	ldrh	r0, [r0, #2]
    6ad8:	4617      	mov	r7, r2
    6ada:	4688      	mov	r8, r1
    6adc:	2903      	cmp	r1, #3
    6ade:	d006      	beq.n	6aee <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f6>
    6ae0:	f000 0501 	and.w	r5, r0, #1
    6ae4:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    6ae8:	b118      	cbz	r0, 6af2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2fa>
    6aea:	2001      	movs	r0, #1
    6aec:	e002      	b.n	6af4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2fc>
    6aee:	f3c0 0540 	ubfx	r5, r0, #1, #1
    6af2:	2000      	movs	r0, #0
    6af4:	4681      	mov	r9, r0
    6af6:	f004 f851 	bl	ab9c <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    6afa:	4606      	mov	r6, r0
    6afc:	f1b8 0f03 	cmp.w	r8, #3
    6b00:	d025      	beq.n	6b4e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x356>
    6b02:	2001      	movs	r0, #1
    6b04:	4680      	mov	r8, r0
    6b06:	ea35 0509 	bics.w	r5, r5, r9
    6b0a:	d046      	beq.n	6b9a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a2>
    6b0c:	4825      	ldr	r0, [pc, #148]	; (6ba4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ac>)
    6b0e:	7b80      	ldrb	r0, [r0, #14]
    6b10:	b138      	cbz	r0, 6b22 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x32a>
    6b12:	f006 fc23 	bl	d35c <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    6b16:	7038      	strb	r0, [r7, #0]
    6b18:	28ff      	cmp	r0, #255	; 0xff
    6b1a:	d002      	beq.n	6b22 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x32a>
    6b1c:	f7fe fdb8 	bl	5690 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    6b20:	4306      	orrs	r6, r0
    6b22:	4d21      	ldr	r5, [pc, #132]	; (6ba8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b0>)
    6b24:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
    6b28:	6868      	ldr	r0, [r5, #4]
    6b2a:	7801      	ldrb	r1, [r0, #0]
    6b2c:	f3c1 1180 	ubfx	r1, r1, #6, #1
    6b30:	4291      	cmp	r1, r2
    6b32:	d106      	bne.n	6b42 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x34a>
    6b34:	2206      	movs	r2, #6
    6b36:	f104 0148 	add.w	r1, r4, #72	; 0x48
    6b3a:	1cc0      	adds	r0, r0, #3
    6b3c:	f005 faff 	bl	c13e <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    6b40:	b138      	cbz	r0, 6b52 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x35a>
    6b42:	2000      	movs	r0, #0
    6b44:	7839      	ldrb	r1, [r7, #0]
    6b46:	29ff      	cmp	r1, #255	; 0xff
    6b48:	d009      	beq.n	6b5e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x366>
    6b4a:	b9b8      	cbnz	r0, 6b7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x384>
    6b4c:	e003      	b.n	6b56 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x35e>
    6b4e:	2002      	movs	r0, #2
    6b50:	e7d8      	b.n	6b04 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x30c>
    6b52:	2001      	movs	r0, #1
    6b54:	e7f6      	b.n	6b44 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x34c>
    6b56:	7e60      	ldrb	r0, [r4, #25]
    6b58:	4288      	cmp	r0, r1
    6b5a:	d00f      	beq.n	6b7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x384>
    6b5c:	e008      	b.n	6b70 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x378>
    6b5e:	b138      	cbz	r0, 6b70 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x378>
    6b60:	6869      	ldr	r1, [r5, #4]
    6b62:	f811 0b03 	ldrb.w	r0, [r1], #3
    6b66:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6b6a:	f007 fa7e 	bl	e06a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    6b6e:	b128      	cbz	r0, 6b7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x384>
    6b70:	2000      	movs	r0, #0
    6b72:	78a1      	ldrb	r1, [r4, #2]
    6b74:	0749      	lsls	r1, r1, #29
    6b76:	d503      	bpl.n	6b80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x388>
    6b78:	b990      	cbnz	r0, 6ba0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a8>
    6b7a:	e00e      	b.n	6b9a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a2>
    6b7c:	2001      	movs	r0, #1
    6b7e:	e7f8      	b.n	6b72 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x37a>
    6b80:	b976      	cbnz	r6, 6ba0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a8>
    6b82:	7be0      	ldrb	r0, [r4, #15]
    6b84:	b108      	cbz	r0, 6b8a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x392>
    6b86:	4540      	cmp	r0, r8
    6b88:	d107      	bne.n	6b9a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a2>
    6b8a:	6869      	ldr	r1, [r5, #4]
    6b8c:	f811 0b03 	ldrb.w	r0, [r1], #3
    6b90:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6b94:	f007 fa69 	bl	e06a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    6b98:	b110      	cbz	r0, 6ba0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a8>
    6b9a:	2000      	movs	r0, #0
    6b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6ba0:	2001      	movs	r0, #1
    6ba2:	e7fb      	b.n	6b9c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a4>
    6ba4:	20000df4 	.word	0x20000df4
    6ba8:	200000f0 	.word	0x200000f0
    6bac:	b570      	push	{r4, r5, r6, lr}
    6bae:	4604      	mov	r4, r0
    6bb0:	6a80      	ldr	r0, [r0, #40]	; 0x28
    6bb2:	4d10      	ldr	r5, [pc, #64]	; (6bf4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3fc>)
    6bb4:	1c40      	adds	r0, r0, #1
    6bb6:	62a0      	str	r0, [r4, #40]	; 0x28
    6bb8:	7ba8      	ldrb	r0, [r5, #14]
    6bba:	2600      	movs	r6, #0
    6bbc:	b120      	cbz	r0, 6bc8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d0>
    6bbe:	f003 ffcf 	bl	ab60 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6bc2:	f003 fe11 	bl	a7e8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6bc6:	73ae      	strb	r6, [r5, #14]
    6bc8:	702e      	strb	r6, [r5, #0]
    6bca:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
    6bce:	b108      	cbz	r0, 6bd4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    6bd0:	2101      	movs	r1, #1
    6bd2:	e00a      	b.n	6bea <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f2>
    6bd4:	7b60      	ldrb	r0, [r4, #13]
    6bd6:	b138      	cbz	r0, 6be8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    6bd8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    6bda:	4288      	cmp	r0, r1
    6bdc:	d804      	bhi.n	6be8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    6bde:	2101      	movs	r1, #1
    6be0:	4620      	mov	r0, r4
    6be2:	f000 f9eb 	bl	6fbc <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    6be6:	bd70      	pop	{r4, r5, r6, pc}
    6be8:	2100      	movs	r1, #0
    6bea:	4620      	mov	r0, r4
    6bec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6bf0:	f000 b9e4 	b.w	6fbc <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    6bf4:	20000df4 	.word	0x20000df4
    6bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6bfc:	4604      	mov	r4, r0
    6bfe:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
    6c02:	4616      	mov	r6, r2
    6c04:	460d      	mov	r5, r1
    6c06:	f88d 0000 	strb.w	r0, [sp]
    6c0a:	9800      	ldr	r0, [sp, #0]
    6c0c:	9000      	str	r0, [sp, #0]
    6c0e:	f89d 0000 	ldrb.w	r0, [sp]
    6c12:	b110      	cbz	r0, 6c1a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x422>
    6c14:	f640 31c8 	movw	r1, #3016	; 0xbc8
    6c18:	e057      	b.n	6cca <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4d2>
    6c1a:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
    6c1e:	8828      	ldrh	r0, [r5, #0]
    6c20:	f8a4 0070 	strh.w	r0, [r4, #112]	; 0x70
    6c24:	2b00      	cmp	r3, #0
    6c26:	d162      	bne.n	6cee <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4f6>
    6c28:	6868      	ldr	r0, [r5, #4]
    6c2a:	f006 fbf5 	bl	d418 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    6c2e:	f8a4 0086 	strh.w	r0, [r4, #134]	; 0x86
    6c32:	8928      	ldrh	r0, [r5, #8]
    6c34:	f8a4 0088 	strh.w	r0, [r4, #136]	; 0x88
    6c38:	8968      	ldrh	r0, [r5, #10]
    6c3a:	f8a4 008a 	strh.w	r0, [r4, #138]	; 0x8a
    6c3e:	f895 016d 	ldrb.w	r0, [r5, #365]	; 0x16d
    6c42:	f884 008c 	strb.w	r0, [r4, #140]	; 0x8c
    6c46:	7e21      	ldrb	r1, [r4, #24]
    6c48:	f104 0841 	add.w	r8, r4, #65	; 0x41
    6c4c:	2700      	movs	r7, #0
    6c4e:	b129      	cbz	r1, 6c5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x464>
    6c50:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    6c54:	4641      	mov	r1, r8
    6c56:	f007 f92f 	bl	deb8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    6c5a:	b940      	cbnz	r0, 6c6e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x476>
    6c5c:	f894 005a 	ldrb.w	r0, [r4, #90]	; 0x5a
    6c60:	b170      	cbz	r0, 6c80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x488>
    6c62:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    6c66:	4641      	mov	r1, r8
    6c68:	f007 f91d 	bl	dea6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa8>
    6c6c:	b140      	cbz	r0, 6c80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x488>
    6c6e:	f8d4 0041 	ldr.w	r0, [r4, #65]	; 0x41
    6c72:	f8c4 007a 	str.w	r0, [r4, #122]	; 0x7a
    6c76:	f8b4 0045 	ldrh.w	r0, [r4, #69]	; 0x45
    6c7a:	f8a4 007e 	strh.w	r0, [r4, #126]	; 0x7e
    6c7e:	e003      	b.n	6c88 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x490>
    6c80:	f8c4 707a 	str.w	r7, [r4, #122]	; 0x7a
    6c84:	f8a4 707e 	strh.w	r7, [r4, #126]	; 0x7e
    6c88:	481a      	ldr	r0, [pc, #104]	; (6cf4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4fc>)
    6c8a:	2eff      	cmp	r6, #255	; 0xff
    6c8c:	6841      	ldr	r1, [r0, #4]
    6c8e:	7808      	ldrb	r0, [r1, #0]
    6c90:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6c94:	f884 0073 	strb.w	r0, [r4, #115]	; 0x73
    6c98:	f104 0080 	add.w	r0, r4, #128	; 0x80
    6c9c:	d018      	beq.n	6cd0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4d8>
    6c9e:	f851 0f03 	ldr.w	r0, [r1, #3]!
    6ca2:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    6ca6:	8888      	ldrh	r0, [r1, #4]
    6ca8:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
    6cac:	f104 0274 	add.w	r2, r4, #116	; 0x74
    6cb0:	1e51      	subs	r1, r2, #1
    6cb2:	4630      	mov	r0, r6
    6cb4:	f7fe fcd2 	bl	565c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    6cb8:	b128      	cbz	r0, 6cc6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4ce>
    6cba:	f814 0f73 	ldrb.w	r0, [r4, #115]!
    6cbe:	f040 0002 	orr.w	r0, r0, #2
    6cc2:	7020      	strb	r0, [r4, #0]
    6cc4:	e00c      	b.n	6ce0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4e8>
    6cc6:	f640 31e9 	movw	r1, #3049	; 0xbe9
    6cca:	202d      	movs	r0, #45	; 0x2d
    6ccc:	f7fd f846 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6cd0:	f851 2f03 	ldr.w	r2, [r1, #3]!
    6cd4:	6762      	str	r2, [r4, #116]	; 0x74
    6cd6:	8889      	ldrh	r1, [r1, #4]
    6cd8:	f8a4 1078 	strh.w	r1, [r4, #120]	; 0x78
    6cdc:	6007      	str	r7, [r0, #0]
    6cde:	8087      	strh	r7, [r0, #4]
    6ce0:	8828      	ldrh	r0, [r5, #0]
    6ce2:	f7fd fc4b 	bl	457c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6ce6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6cea:	f006 b922 	b.w	cf32 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    6cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6cf2:	0000      	.short	0x0000
    6cf4:	200000f0 	.word	0x200000f0
    6cf8:	b538      	push	{r3, r4, r5, lr}
    6cfa:	4604      	mov	r4, r0
    6cfc:	20ff      	movs	r0, #255	; 0xff
    6cfe:	f88d 0000 	strb.w	r0, [sp]
    6d02:	2501      	movs	r5, #1
    6d04:	466a      	mov	r2, sp
    6d06:	2105      	movs	r1, #5
    6d08:	4620      	mov	r0, r4
    6d0a:	f7ff fee1 	bl	6ad0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2d8>
    6d0e:	b1f8      	cbz	r0, 6d50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x558>
    6d10:	4a11      	ldr	r2, [pc, #68]	; (6d58 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x560>)
    6d12:	69e0      	ldr	r0, [r4, #28]
    6d14:	6852      	ldr	r2, [r2, #4]
    6d16:	7c41      	ldrb	r1, [r0, #17]
    6d18:	7812      	ldrb	r2, [r2, #0]
    6d1a:	f3c2 1240 	ubfx	r2, r2, #5, #1
    6d1e:	4011      	ands	r1, r2
    6d20:	7441      	strb	r1, [r0, #17]
    6d22:	2201      	movs	r2, #1
    6d24:	4620      	mov	r0, r4
    6d26:	69e1      	ldr	r1, [r4, #28]
    6d28:	f000 f882 	bl	6e30 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x638>
    6d2c:	2300      	movs	r3, #0
    6d2e:	f89d 2000 	ldrb.w	r2, [sp]
    6d32:	4620      	mov	r0, r4
    6d34:	69e1      	ldr	r1, [r4, #28]
    6d36:	f7ff ff5f 	bl	6bf8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x400>
    6d3a:	2001      	movs	r0, #1
    6d3c:	f884 006c 	strb.w	r0, [r4, #108]	; 0x6c
    6d40:	4a06      	ldr	r2, [pc, #24]	; (6d5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x564>)
    6d42:	2100      	movs	r1, #0
    6d44:	69e0      	ldr	r0, [r4, #28]
    6d46:	7011      	strb	r1, [r2, #0]
    6d48:	2105      	movs	r1, #5
    6d4a:	f000 fa43 	bl	71d4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    6d4e:	e000      	b.n	6d52 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x55a>
    6d50:	2500      	movs	r5, #0
    6d52:	4628      	mov	r0, r5
    6d54:	bd38      	pop	{r3, r4, r5, pc}
    6d56:	0000      	.short	0x0000
    6d58:	200000f0 	.word	0x200000f0
    6d5c:	20000df4 	.word	0x20000df4
    6d60:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    6d62:	4604      	mov	r4, r0
    6d64:	20ff      	movs	r0, #255	; 0xff
    6d66:	f88d 0000 	strb.w	r0, [sp]
    6d6a:	2501      	movs	r5, #1
    6d6c:	466a      	mov	r2, sp
    6d6e:	2103      	movs	r1, #3
    6d70:	4620      	mov	r0, r4
    6d72:	f7ff fead 	bl	6ad0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2d8>
    6d76:	b328      	cbz	r0, 6dc4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5cc>
    6d78:	7b20      	ldrb	r0, [r4, #12]
    6d7a:	b168      	cbz	r0, 6d98 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5a0>
    6d7c:	f894 009c 	ldrb.w	r0, [r4, #156]	; 0x9c
    6d80:	f88d 0004 	strb.w	r0, [sp, #4]
    6d84:	9801      	ldr	r0, [sp, #4]
    6d86:	9001      	str	r0, [sp, #4]
    6d88:	f89d 0004 	ldrb.w	r0, [sp, #4]
    6d8c:	b920      	cbnz	r0, 6d98 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5a0>
    6d8e:	f89d 1000 	ldrb.w	r1, [sp]
    6d92:	4620      	mov	r0, r4
    6d94:	f7ff fe60 	bl	6a58 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x260>
    6d98:	4e0c      	ldr	r6, [pc, #48]	; (6dcc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d4>)
    6d9a:	2100      	movs	r1, #0
    6d9c:	6870      	ldr	r0, [r6, #4]
    6d9e:	8001      	strh	r1, [r0, #0]
    6da0:	2104      	movs	r1, #4
    6da2:	f006 fe8f 	bl	dac4 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6da6:	4620      	mov	r0, r4
    6da8:	f000 f888 	bl	6ebc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6c4>
    6dac:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
    6dae:	6b21      	ldr	r1, [r4, #48]	; 0x30
    6db0:	6870      	ldr	r0, [r6, #4]
    6db2:	f006 febe 	bl	db32 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>
    6db6:	4906      	ldr	r1, [pc, #24]	; (6dd0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d8>)
    6db8:	2005      	movs	r0, #5
    6dba:	7008      	strb	r0, [r1, #0]
    6dbc:	6870      	ldr	r0, [r6, #4]
    6dbe:	f004 f99b 	bl	b0f8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6dc2:	e000      	b.n	6dc6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5ce>
    6dc4:	2500      	movs	r5, #0
    6dc6:	4628      	mov	r0, r5
    6dc8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    6dca:	0000      	.short	0x0000
    6dcc:	200000f0 	.word	0x200000f0
    6dd0:	20000df4 	.word	0x20000df4
    6dd4:	b570      	push	{r4, r5, r6, lr}
    6dd6:	4604      	mov	r4, r0
    6dd8:	460e      	mov	r6, r1
    6dda:	7e40      	ldrb	r0, [r0, #25]
    6ddc:	f7fe fc0c 	bl	55f8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    6de0:	0005      	movs	r5, r0
    6de2:	d019      	beq.n	6e18 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x620>
    6de4:	2110      	movs	r1, #16
    6de6:	f006 fcb5 	bl	d754 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    6dea:	2800      	cmp	r0, #0
    6dec:	d114      	bne.n	6e18 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x620>
    6dee:	2001      	movs	r0, #1
    6df0:	f884 004e 	strb.w	r0, [r4, #78]	; 0x4e
    6df4:	f104 014f 	add.w	r1, r4, #79	; 0x4f
    6df8:	4632      	mov	r2, r6
    6dfa:	460c      	mov	r4, r1
    6dfc:	4628      	mov	r0, r5
    6dfe:	f006 fa3c 	bl	d27a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    6e02:	4621      	mov	r1, r4
    6e04:	4c05      	ldr	r4, [pc, #20]	; (6e1c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x624>)
    6e06:	6860      	ldr	r0, [r4, #4]
    6e08:	f006 fe77 	bl	dafa <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    6e0c:	6860      	ldr	r0, [r4, #4]
    6e0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6e12:	2101      	movs	r1, #1
    6e14:	f006 be77 	b.w	db06 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    6e18:	bd70      	pop	{r4, r5, r6, pc}
    6e1a:	0000      	.short	0x0000
    6e1c:	200000f0 	.word	0x200000f0
    6e20:	4802      	ldr	r0, [pc, #8]	; (6e2c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x634>)
    6e22:	2101      	movs	r1, #1
    6e24:	6800      	ldr	r0, [r0, #0]
    6e26:	f7ff bb69 	b.w	64fc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    6e2a:	0000      	.short	0x0000
    6e2c:	200000f0 	.word	0x200000f0
    6e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e34:	4e20      	ldr	r6, [pc, #128]	; (6eb8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6c0>)
    6e36:	4680      	mov	r8, r0
    6e38:	460c      	mov	r4, r1
    6e3a:	6870      	ldr	r0, [r6, #4]
    6e3c:	4615      	mov	r5, r2
    6e3e:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    6e42:	f8c4 1012 	str.w	r1, [r4, #18]
    6e46:	8881      	ldrh	r1, [r0, #4]
    6e48:	82e1      	strh	r1, [r4, #22]
    6e4a:	7981      	ldrb	r1, [r0, #6]
    6e4c:	7621      	strb	r1, [r4, #24]
    6e4e:	8940      	ldrh	r0, [r0, #10]
    6e50:	f006 fade 	bl	d410 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    6e54:	4607      	mov	r7, r0
    6e56:	6060      	str	r0, [r4, #4]
    6e58:	6870      	ldr	r0, [r6, #4]
    6e5a:	4639      	mov	r1, r7
    6e5c:	7d80      	ldrb	r0, [r0, #22]
    6e5e:	f006 fc74 	bl	d74a <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    6e62:	8360      	strh	r0, [r4, #26]
    6e64:	6870      	ldr	r0, [r6, #4]
    6e66:	4639      	mov	r1, r7
    6e68:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    6e6c:	f006 fc69 	bl	d742 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    6e70:	61e0      	str	r0, [r4, #28]
    6e72:	6870      	ldr	r0, [r6, #4]
    6e74:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    6e78:	8121      	strh	r1, [r4, #8]
    6e7a:	8841      	ldrh	r1, [r0, #2]
    6e7c:	8161      	strh	r1, [r4, #10]
    6e7e:	6841      	ldr	r1, [r0, #4]
    6e80:	60e1      	str	r1, [r4, #12]
    6e82:	7a01      	ldrb	r1, [r0, #8]
    6e84:	7421      	strb	r1, [r4, #16]
    6e86:	7a41      	ldrb	r1, [r0, #9]
    6e88:	f001 011f 	and.w	r1, r1, #31
    6e8c:	f884 1020 	strb.w	r1, [r4, #32]
    6e90:	7a40      	ldrb	r0, [r0, #9]
    6e92:	0940      	lsrs	r0, r0, #5
    6e94:	f884 016d 	strb.w	r0, [r4, #365]	; 0x16d
    6e98:	f104 005e 	add.w	r0, r4, #94	; 0x5e
    6e9c:	2101      	movs	r1, #1
    6e9e:	7205      	strb	r5, [r0, #8]
    6ea0:	7245      	strb	r5, [r0, #9]
    6ea2:	7281      	strb	r1, [r0, #10]
    6ea4:	2100      	movs	r1, #0
    6ea6:	3836      	subs	r0, #54	; 0x36
    6ea8:	f006 ff7e 	bl	dda8 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    6eac:	f898 000e 	ldrb.w	r0, [r8, #14]
    6eb0:	f884 006a 	strb.w	r0, [r4, #106]	; 0x6a
    6eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6eb8:	200000f0 	.word	0x200000f0
    6ebc:	b570      	push	{r4, r5, r6, lr}
    6ebe:	4d07      	ldr	r5, [pc, #28]	; (6edc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6e4>)
    6ec0:	4604      	mov	r4, r0
    6ec2:	f100 0141 	add.w	r1, r0, #65	; 0x41
    6ec6:	6868      	ldr	r0, [r5, #4]
    6ec8:	f006 fe24 	bl	db14 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    6ecc:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
    6ed0:	6868      	ldr	r0, [r5, #4]
    6ed2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6ed6:	f006 be23 	b.w	db20 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    6eda:	0000      	.short	0x0000
    6edc:	200000f0 	.word	0x200000f0
    6ee0:	d6555555 	.word	0xd6555555
    6ee4:	008e89be 	.word	0x008e89be
    6ee8:	00006781 	.word	0x00006781
    6eec:	00006611 	.word	0x00006611
    6ef0:	000066e9 	.word	0x000066e9
    6ef4:	00000000 	.word	0x00000000
    6ef8:	00007141 	.word	0x00007141
    6efc:	000066c1 	.word	0x000066c1
    6f00:	00006719 	.word	0x00006719
    6f04:	0000e091 	.word	0x0000e091
    6f08:	0000e097 	.word	0x0000e097
    6f0c:	00006961 	.word	0x00006961
    6f10:	00006985 	.word	0x00006985
    6f14:	00006e21 	.word	0x00006e21
    6f18:	00006f08 	.word	0x00006f08
    6f1c:	00006f00 	.word	0x00006f00
    6f20:	00006efc 	.word	0x00006efc

00006f24 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    6f24:	b510      	push	{r4, lr}
    6f26:	1e42      	subs	r2, r0, #1
    6f28:	2a02      	cmp	r2, #2
    6f2a:	d901      	bls.n	6f30 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    6f2c:	21ca      	movs	r1, #202	; 0xca
    6f2e:	e009      	b.n	6f44 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    6f30:	1e40      	subs	r0, r0, #1
    6f32:	2910      	cmp	r1, #16
    6f34:	d009      	beq.n	6f4a <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    6f36:	2912      	cmp	r1, #18
    6f38:	d00c      	beq.n	6f54 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    6f3a:	2913      	cmp	r1, #19
    6f3c:	d00a      	beq.n	6f54 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    6f3e:	2915      	cmp	r1, #21
    6f40:	d005      	beq.n	6f4e <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    6f42:	21d8      	movs	r1, #216	; 0xd8
    6f44:	202f      	movs	r0, #47	; 0x2f
    6f46:	f7fc ff09 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f4a:	4905      	ldr	r1, [pc, #20]	; (6f60 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    6f4c:	e004      	b.n	6f58 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    6f4e:	4904      	ldr	r1, [pc, #16]	; (6f60 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    6f50:	1d89      	adds	r1, r1, #6
    6f52:	e001      	b.n	6f58 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    6f54:	4902      	ldr	r1, [pc, #8]	; (6f60 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    6f56:	1f89      	subs	r1, r1, #6
    6f58:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    6f5c:	bd10      	pop	{r4, pc}
    6f5e:	0000      	.short	0x0000
    6f60:	0000e2dc 	.word	0x0000e2dc

00006f64 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    6f64:	1e42      	subs	r2, r0, #1
    6f66:	b510      	push	{r4, lr}
    6f68:	b2d2      	uxtb	r2, r2
    6f6a:	2a01      	cmp	r2, #1
    6f6c:	d903      	bls.n	6f76 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    6f6e:	291d      	cmp	r1, #29
    6f70:	d001      	beq.n	6f76 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    6f72:	21ee      	movs	r1, #238	; 0xee
    6f74:	e00d      	b.n	6f92 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    6f76:	2913      	cmp	r1, #19
    6f78:	d013      	beq.n	6fa2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    6f7a:	dc04      	bgt.n	6f86 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    6f7c:	2910      	cmp	r1, #16
    6f7e:	d00b      	beq.n	6f98 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    6f80:	2912      	cmp	r1, #18
    6f82:	d104      	bne.n	6f8e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    6f84:	e00d      	b.n	6fa2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    6f86:	2915      	cmp	r1, #21
    6f88:	d008      	beq.n	6f9c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    6f8a:	291d      	cmp	r1, #29
    6f8c:	d00e      	beq.n	6fac <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    6f8e:	f44f 7181 	mov.w	r1, #258	; 0x102
    6f92:	202f      	movs	r0, #47	; 0x2f
    6f94:	f7fc fee2 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f98:	4807      	ldr	r0, [pc, #28]	; (6fb8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    6f9a:	e004      	b.n	6fa6 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    6f9c:	4806      	ldr	r0, [pc, #24]	; (6fb8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    6f9e:	3008      	adds	r0, #8
    6fa0:	e001      	b.n	6fa6 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    6fa2:	4805      	ldr	r0, [pc, #20]	; (6fb8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    6fa4:	1d00      	adds	r0, r0, #4
    6fa6:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    6faa:	bd10      	pop	{r4, pc}
    6fac:	f240 315a 	movw	r1, #858	; 0x35a
    6fb0:	fb10 f001 	smulbb	r0, r0, r1
    6fb4:	bd10      	pop	{r4, pc}
    6fb6:	0000      	.short	0x0000
    6fb8:	0000e2ca 	.word	0x0000e2ca

00006fbc <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    6fbc:	b510      	push	{r4, lr}
    6fbe:	b131      	cbz	r1, 6fce <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    6fc0:	2901      	cmp	r1, #1
    6fc2:	d008      	beq.n	6fd6 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    6fc4:	f240 71c1 	movw	r1, #1985	; 0x7c1
    6fc8:	2030      	movs	r0, #48	; 0x30
    6fca:	f7fc fec7 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6fce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6fd2:	f000 bab1 	b.w	7538 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x364>
    6fd6:	2100      	movs	r1, #0
    6fd8:	f880 10b0 	strb.w	r1, [r0, #176]	; 0xb0
    6fdc:	f007 fac7 	bl	e56e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x13a>
    6fe0:	4802      	ldr	r0, [pc, #8]	; (6fec <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x30>)
    6fe2:	7940      	ldrb	r0, [r0, #5]
    6fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6fe8:	f7fc bd08 	b.w	39fc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    6fec:	20000100 	.word	0x20000100

00006ff0 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>:
    6ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ff4:	4604      	mov	r4, r0
    6ff6:	f890 00b8 	ldrb.w	r0, [r0, #184]	; 0xb8
    6ffa:	4615      	mov	r5, r2
    6ffc:	460e      	mov	r6, r1
    6ffe:	2800      	cmp	r0, #0
    7000:	d15f      	bne.n	70c2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc2>
    7002:	4846      	ldr	r0, [pc, #280]	; (711c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x11c>)
    7004:	f7fb fa12 	bl	242c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    7008:	4607      	mov	r7, r0
    700a:	2820      	cmp	r0, #32
    700c:	d059      	beq.n	70c2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc2>
    700e:	7821      	ldrb	r1, [r4, #0]
    7010:	f7fe fdd0 	bl	5bb4 <sym_43KCEMGXWEFGXOKHGAEYSP35KOJMVCZQOBXIS6I>
    7014:	2234      	movs	r2, #52	; 0x34
    7016:	2100      	movs	r1, #0
    7018:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
    701c:	f005 f91b 	bl	c256 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7020:	f884 70a8 	strb.w	r7, [r4, #168]	; 0xa8
    7024:	2703      	movs	r7, #3
    7026:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
    702a:	f884 70b8 	strb.w	r7, [r4, #184]	; 0xb8
    702e:	b15e      	cbz	r6, 7048 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x48>
    7030:	2101      	movs	r1, #1
    7032:	f506 708e 	add.w	r0, r6, #284	; 0x11c
    7036:	f7fc ff3d 	bl	3eb4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    703a:	f896 011c 	ldrb.w	r0, [r6, #284]	; 0x11c
    703e:	f000 0007 	and.w	r0, r0, #7
    7042:	1c40      	adds	r0, r0, #1
    7044:	f886 011c 	strb.w	r0, [r6, #284]	; 0x11c
    7048:	4620      	mov	r0, r4
    704a:	f007 faab 	bl	e5a4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x170>
    704e:	f8a4 00c4 	strh.w	r0, [r4, #196]	; 0xc4
    7052:	f884 70c6 	strb.w	r7, [r4, #198]	; 0xc6
    7056:	2701      	movs	r7, #1
    7058:	f884 70c7 	strb.w	r7, [r4, #199]	; 0xc7
    705c:	2600      	movs	r6, #0
    705e:	f804 6fbc 	strb.w	r6, [r4, #188]!
    7062:	f7fa fb87 	bl	1774 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    7066:	8921      	ldrh	r1, [r4, #8]
    7068:	3cbc      	subs	r4, #188	; 0xbc
    706a:	4288      	cmp	r0, r1
    706c:	d800      	bhi.n	7070 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x70>
    706e:	4608      	mov	r0, r1
    7070:	f200 60c3 	addw	r0, r0, #1731	; 0x6c3
    7074:	fa1f f880 	uxth.w	r8, r0
    7078:	4620      	mov	r0, r4
    707a:	f006 ffa7 	bl	dfcc <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    707e:	b318      	cbz	r0, 70c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc8>
    7080:	4827      	ldr	r0, [pc, #156]	; (7120 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x120>)
    7082:	7800      	ldrb	r0, [r0, #0]
    7084:	f000 f8e2 	bl	724c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x78>
    7088:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    708c:	b281      	uxth	r1, r0
    708e:	4628      	mov	r0, r5
    7090:	f004 ff26 	bl	bee0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7094:	4428      	add	r0, r5
    7096:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
    709a:	34ac      	adds	r4, #172	; 0xac
    709c:	f004 feec 	bl	be78 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    70a0:	4641      	mov	r1, r8
    70a2:	f7fa fa11 	bl	14c8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    70a6:	61e0      	str	r0, [r4, #28]
    70a8:	f804 6c03 	strb.w	r6, [r4, #-3]
    70ac:	7127      	strb	r7, [r4, #4]
    70ae:	2001      	movs	r0, #1
    70b0:	f007 f907 	bl	e2c2 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    70b4:	f200 100d 	addw	r0, r0, #269	; 0x10d
    70b8:	1a28      	subs	r0, r5, r0
    70ba:	62a6      	str	r6, [r4, #40]	; 0x28
    70bc:	60a0      	str	r0, [r4, #8]
    70be:	3cac      	subs	r4, #172	; 0xac
    70c0:	e017      	b.n	70f2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf2>
    70c2:	200c      	movs	r0, #12
    70c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    70c8:	4620      	mov	r0, r4
    70ca:	f007 fa19 	bl	e500 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xcc>
    70ce:	f844 0fc0 	str.w	r0, [r4, #192]!
    70d2:	f804 7c17 	strb.w	r7, [r4, #-23]
    70d6:	f004 fecf 	bl	be78 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    70da:	4607      	mov	r7, r0
    70dc:	2000      	movs	r0, #0
    70de:	f007 fa90 	bl	e602 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1ce>
    70e2:	eb00 0108 	add.w	r1, r0, r8
    70e6:	4638      	mov	r0, r7
    70e8:	f7fa f9ee 	bl	14c8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    70ec:	6165      	str	r5, [r4, #20]
    70ee:	60a0      	str	r0, [r4, #8]
    70f0:	3cc0      	subs	r4, #192	; 0xc0
    70f2:	f104 01bc 	add.w	r1, r4, #188	; 0xbc
    70f6:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
    70fa:	f007 fa51 	bl	e5a0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x16c>
    70fe:	b138      	cbz	r0, 7110 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x110>
    7100:	f8a4 60cc 	strh.w	r6, [r4, #204]	; 0xcc
    7104:	2100      	movs	r1, #0
    7106:	4620      	mov	r0, r4
    7108:	f006 ff95 	bl	e036 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    710c:	2000      	movs	r0, #0
    710e:	e7d9      	b.n	70c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc4>
    7110:	f44f 7109 	mov.w	r1, #548	; 0x224
    7114:	2030      	movs	r0, #48	; 0x30
    7116:	f7fc fe21 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    711a:	0000      	.short	0x0000
    711c:	0000e62d 	.word	0x0000e62d
    7120:	20000100 	.word	0x20000100

00007124 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY>:
    7124:	4905      	ldr	r1, [pc, #20]	; (713c <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY+0x18>)
    7126:	7148      	strb	r0, [r1, #5]
    7128:	2000      	movs	r0, #0
    712a:	7088      	strb	r0, [r1, #2]
    712c:	2201      	movs	r2, #1
    712e:	700a      	strb	r2, [r1, #0]
    7130:	7048      	strb	r0, [r1, #1]
    7132:	710a      	strb	r2, [r1, #4]
    7134:	70c8      	strb	r0, [r1, #3]
    7136:	f007 b922 	b.w	e37e <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>
    713a:	0000      	.short	0x0000
    713c:	20000100 	.word	0x20000100

00007140 <sym_7XLJMDJLN3HFZ62N4AZADQFCXDQ5POE6FAL5P2Q>:
    7140:	4905      	ldr	r1, [pc, #20]	; (7158 <sym_7XLJMDJLN3HFZ62N4AZADQFCXDQ5POE6FAL5P2Q+0x18>)
    7142:	788a      	ldrb	r2, [r1, #2]
    7144:	2a02      	cmp	r2, #2
    7146:	d003      	beq.n	7150 <sym_7XLJMDJLN3HFZ62N4AZADQFCXDQ5POE6FAL5P2Q+0x10>
    7148:	6a09      	ldr	r1, [r1, #32]
    714a:	f8c1 00d0 	str.w	r0, [r1, #208]	; 0xd0
    714e:	4770      	bx	lr
    7150:	6949      	ldr	r1, [r1, #20]
    7152:	f8c1 0164 	str.w	r0, [r1, #356]	; 0x164
    7156:	4770      	bx	lr
    7158:	20000100 	.word	0x20000100

0000715c <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI>:
    715c:	4901      	ldr	r1, [pc, #4]	; (7164 <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI+0x8>)
    715e:	7008      	strb	r0, [r1, #0]
    7160:	4770      	bx	lr
    7162:	0000      	.short	0x0000
    7164:	20000100 	.word	0x20000100

00007168 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A>:
    7168:	4901      	ldr	r1, [pc, #4]	; (7170 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0x8>)
    716a:	7048      	strb	r0, [r1, #1]
    716c:	4770      	bx	lr
    716e:	0000      	.short	0x0000
    7170:	20000100 	.word	0x20000100

00007174 <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ>:
    7174:	4905      	ldr	r1, [pc, #20]	; (718c <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ+0x18>)
    7176:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    717a:	fbb1 f1f2 	udiv	r1, r1, r2
    717e:	b510      	push	{r4, lr}
    7180:	f201 2193 	addw	r1, r1, #659	; 0x293
    7184:	f006 fe29 	bl	ddda <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    7188:	b280      	uxth	r0, r0
    718a:	bd10      	pop	{r4, pc}
    718c:	0001527d 	.word	0x0001527d

00007190 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    7190:	b570      	push	{r4, r5, r6, lr}
    7192:	4c0f      	ldr	r4, [pc, #60]	; (71d0 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x40>)
    7194:	f8d0 6164 	ldr.w	r6, [r0, #356]	; 0x164
    7198:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
    719c:	7860      	ldrb	r0, [r4, #1]
    719e:	b120      	cbz	r0, 71aa <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x1a>
    71a0:	4632      	mov	r2, r6
    71a2:	4628      	mov	r0, r5
    71a4:	f006 f93e 	bl	d424 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    71a8:	4605      	mov	r5, r0
    71aa:	68a0      	ldr	r0, [r4, #8]
    71ac:	4285      	cmp	r5, r0
    71ae:	d005      	beq.n	71bc <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x2c>
    71b0:	6921      	ldr	r1, [r4, #16]
    71b2:	1a28      	subs	r0, r5, r0
    71b4:	4408      	add	r0, r1
    71b6:	6120      	str	r0, [r4, #16]
    71b8:	f7fb fa30 	bl	261c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    71bc:	60a5      	str	r5, [r4, #8]
    71be:	42ae      	cmp	r6, r5
    71c0:	d801      	bhi.n	71c6 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x36>
    71c2:	78e0      	ldrb	r0, [r4, #3]
    71c4:	b108      	cbz	r0, 71ca <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3a>
    71c6:	2000      	movs	r0, #0
    71c8:	bd70      	pop	{r4, r5, r6, pc}
    71ca:	2001      	movs	r0, #1
    71cc:	bd70      	pop	{r4, r5, r6, pc}
    71ce:	0000      	.short	0x0000
    71d0:	20000100 	.word	0x20000100

000071d4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    71d4:	b570      	push	{r4, r5, r6, lr}
    71d6:	4d1c      	ldr	r5, [pc, #112]	; (7248 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x74>)
    71d8:	4604      	mov	r4, r0
    71da:	2906      	cmp	r1, #6
    71dc:	d22e      	bcs.n	723c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x68>
    71de:	e8df f001 	tbb	[pc, r1]
    71e2:	0b05      	.short	0x0b05
    71e4:	250f0e03 	.word	0x250f0e03
    71e8:	2100      	movs	r1, #0
    71ea:	e000      	b.n	71ee <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1a>
    71ec:	2101      	movs	r1, #1
    71ee:	4620      	mov	r0, r4
    71f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    71f4:	f000 ba1a 	b.w	762c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x458>
    71f8:	2003      	movs	r0, #3
    71fa:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    71fe:	bd70      	pop	{r4, r5, r6, pc}
    7200:	f003 feb0 	bl	af64 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    7204:	f8c4 0168 	str.w	r0, [r4, #360]	; 0x168
    7208:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    720c:	f008 fa65 	bl	f6da <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    7210:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
    7214:	1a08      	subs	r0, r1, r0
    7216:	68a9      	ldr	r1, [r5, #8]
    7218:	4401      	add	r1, r0
    721a:	60a9      	str	r1, [r5, #8]
    721c:	68e9      	ldr	r1, [r5, #12]
    721e:	4408      	add	r0, r1
    7220:	60e8      	str	r0, [r5, #12]
    7222:	4620      	mov	r0, r4
    7224:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7228:	f000 b926 	b.w	7478 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2a4>
    722c:	6a28      	ldr	r0, [r5, #32]
    722e:	2200      	movs	r2, #0
    7230:	f8d0 10d0 	ldr.w	r1, [r0, #208]	; 0xd0
    7234:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7238:	f000 b9be 	b.w	75b8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3e4>
    723c:	f240 71af 	movw	r1, #1967	; 0x7af
    7240:	2030      	movs	r0, #48	; 0x30
    7242:	f7fc fd8b 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7246:	0000      	.short	0x0000
    7248:	20000100 	.word	0x20000100
    724c:	b510      	push	{r4, lr}
    724e:	280c      	cmp	r0, #12
    7250:	d304      	bcc.n	725c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x88>
    7252:	f240 312a 	movw	r1, #810	; 0x32a
    7256:	2006      	movs	r0, #6
    7258:	f7fc fd80 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    725c:	4901      	ldr	r1, [pc, #4]	; (7264 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x90>)
    725e:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    7262:	bd10      	pop	{r4, pc}
    7264:	0000e67e 	.word	0x0000e67e
    7268:	b570      	push	{r4, r5, r6, lr}
    726a:	4604      	mov	r4, r0
    726c:	2601      	movs	r6, #1
    726e:	f007 f999 	bl	e5a4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x170>
    7272:	f8a4 00c4 	strh.w	r0, [r4, #196]	; 0xc4
    7276:	2000      	movs	r0, #0
    7278:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
    727c:	2001      	movs	r0, #1
    727e:	f884 00c7 	strb.w	r0, [r4, #199]	; 0xc7
    7282:	f894 00b0 	ldrb.w	r0, [r4, #176]	; 0xb0
    7286:	f104 05bc 	add.w	r5, r4, #188	; 0xbc
    728a:	b160      	cbz	r0, 72a6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xd2>
    728c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    7290:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
    7294:	f7fa f918 	bl	14c8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    7298:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
    729c:	2100      	movs	r1, #0
    729e:	4628      	mov	r0, r5
    72a0:	f006 f99f 	bl	d5e2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    72a4:	e00f      	b.n	72c6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xf2>
    72a6:	4620      	mov	r0, r4
    72a8:	f006 fe70 	bl	df8c <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    72ac:	4606      	mov	r6, r0
    72ae:	4631      	mov	r1, r6
    72b0:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
    72b4:	f7fa f908 	bl	14c8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    72b8:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
    72bc:	4631      	mov	r1, r6
    72be:	4628      	mov	r0, r5
    72c0:	f006 f98f 	bl	d5e2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    72c4:	1c46      	adds	r6, r0, #1
    72c6:	f8b4 00cc 	ldrh.w	r0, [r4, #204]	; 0xcc
    72ca:	1c41      	adds	r1, r0, #1
    72cc:	290a      	cmp	r1, #10
    72ce:	d202      	bcs.n	72d6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x102>
    72d0:	4430      	add	r0, r6
    72d2:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
    72d6:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
    72da:	b130      	cbz	r0, 72ea <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x116>
    72dc:	f8b4 00cc 	ldrh.w	r0, [r4, #204]	; 0xcc
    72e0:	1c40      	adds	r0, r0, #1
    72e2:	280a      	cmp	r0, #10
    72e4:	d301      	bcc.n	72ea <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x116>
    72e6:	2002      	movs	r0, #2
    72e8:	e000      	b.n	72ec <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x118>
    72ea:	2003      	movs	r0, #3
    72ec:	f884 00c6 	strb.w	r0, [r4, #198]	; 0xc6
    72f0:	2100      	movs	r1, #0
    72f2:	4620      	mov	r0, r4
    72f4:	f007 f90a 	bl	e50c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xd8>
    72f8:	b140      	cbz	r0, 730c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x138>
    72fa:	4620      	mov	r0, r4
    72fc:	f007 f8f7 	bl	e4ee <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xba>
    7300:	4809      	ldr	r0, [pc, #36]	; (7328 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x154>)
    7302:	7940      	ldrb	r0, [r0, #5]
    7304:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7308:	f7fc bb78 	b.w	39fc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    730c:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
    7310:	4629      	mov	r1, r5
    7312:	f007 f945 	bl	e5a0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x16c>
    7316:	2800      	cmp	r0, #0
    7318:	d104      	bne.n	7324 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x150>
    731a:	f240 61e4 	movw	r1, #1764	; 0x6e4
    731e:	2030      	movs	r0, #48	; 0x30
    7320:	f7fc fd1c 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7324:	bd70      	pop	{r4, r5, r6, pc}
    7326:	0000      	.short	0x0000
    7328:	20000100 	.word	0x20000100
    732c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    732e:	4c18      	ldr	r4, [pc, #96]	; (7390 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1bc>)
    7330:	2001      	movs	r0, #1
    7332:	70e0      	strb	r0, [r4, #3]
    7334:	f64f 75ff 	movw	r5, #65535	; 0xffff
    7338:	e00b      	b.n	7352 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x17e>
    733a:	2100      	movs	r1, #0
    733c:	f005 ff23 	bl	d186 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7340:	0006      	movs	r6, r0
    7342:	d010      	beq.n	7366 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x192>
    7344:	f896 0160 	ldrb.w	r0, [r6, #352]	; 0x160
    7348:	f7fa ff68 	bl	221c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    734c:	4630      	mov	r0, r6
    734e:	f007 f945 	bl	e5dc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1a8>
    7352:	4669      	mov	r1, sp
    7354:	2000      	movs	r0, #0
    7356:	f005 ff20 	bl	d19a <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    735a:	b180      	cbz	r0, 737e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1aa>
    735c:	f240 1137 	movw	r1, #311	; 0x137
    7360:	2030      	movs	r0, #48	; 0x30
    7362:	f7fc fcfb 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7366:	f240 1157 	movw	r1, #343	; 0x157
    736a:	e7f9      	b.n	7360 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x18c>
    736c:	9802      	ldr	r0, [sp, #8]
    736e:	b130      	cbz	r0, 737e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1aa>
    7370:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    7374:	b119      	cbz	r1, 737e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1aa>
    7376:	8800      	ldrh	r0, [r0, #0]
    7378:	42a8      	cmp	r0, r5
    737a:	d1de      	bne.n	733a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x166>
    737c:	e004      	b.n	7388 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1b4>
    737e:	4668      	mov	r0, sp
    7380:	f7fc ff1a 	bl	41b8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7384:	2800      	cmp	r0, #0
    7386:	d0f1      	beq.n	736c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x198>
    7388:	2000      	movs	r0, #0
    738a:	70e0      	strb	r0, [r4, #3]
    738c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    738e:	0000      	.short	0x0000
    7390:	20000100 	.word	0x20000100
    7394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7398:	4604      	mov	r4, r0
    739a:	4836      	ldr	r0, [pc, #216]	; (7474 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2a0>)
    739c:	461e      	mov	r6, r3
    739e:	4690      	mov	r8, r2
    73a0:	7900      	ldrb	r0, [r0, #4]
    73a2:	4689      	mov	r9, r1
    73a4:	2500      	movs	r5, #0
    73a6:	b368      	cbz	r0, 7404 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x230>
    73a8:	f7fc f998 	bl	36dc <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    73ac:	b350      	cbz	r0, 7404 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x230>
    73ae:	f8b4 0118 	ldrh.w	r0, [r4, #280]	; 0x118
    73b2:	2802      	cmp	r0, #2
    73b4:	d326      	bcc.n	7404 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x230>
    73b6:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    73ba:	2802      	cmp	r0, #2
    73bc:	d022      	beq.n	7404 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x230>
    73be:	f894 0142 	ldrb.w	r0, [r4, #322]	; 0x142
    73c2:	b9f8      	cbnz	r0, 7404 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x230>
    73c4:	f894 016d 	ldrb.w	r0, [r4, #365]	; 0x16d
    73c8:	f7ff ff40 	bl	724c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x78>
    73cc:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    73d0:	b281      	uxth	r1, r0
    73d2:	8031      	strh	r1, [r6, #0]
    73d4:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    73d8:	2700      	movs	r7, #0
    73da:	2801      	cmp	r0, #1
    73dc:	d015      	beq.n	740a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x236>
    73de:	6860      	ldr	r0, [r4, #4]
    73e0:	f004 fd7e 	bl	bee0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    73e4:	f8b4 2106 	ldrh.w	r2, [r4, #262]	; 0x106
    73e8:	b280      	uxth	r0, r0
    73ea:	4442      	add	r2, r8
    73ec:	eba2 0109 	sub.w	r1, r2, r9
    73f0:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
    73f4:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    73f8:	1a82      	subs	r2, r0, r2
    73fa:	fb01 7502 	mla	r5, r1, r2, r7
    73fe:	2001      	movs	r0, #1
    7400:	f884 0142 	strb.w	r0, [r4, #322]	; 0x142
    7404:	4628      	mov	r0, r5
    7406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    740a:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
    740e:	2803      	cmp	r0, #3
    7410:	d02c      	beq.n	746c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x298>
    7412:	2101      	movs	r1, #1
    7414:	2000      	movs	r0, #0
    7416:	f006 f8d2 	bl	d5be <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    741a:	69e1      	ldr	r1, [r4, #28]
    741c:	1847      	adds	r7, r0, r1
    741e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    7422:	8831      	ldrh	r1, [r6, #0]
    7424:	34c8      	adds	r4, #200	; 0xc8
    7426:	f004 fd5b 	bl	bee0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    742a:	6da2      	ldr	r2, [r4, #88]	; 0x58
    742c:	6e21      	ldr	r1, [r4, #96]	; 0x60
    742e:	1a82      	subs	r2, r0, r2
    7430:	fb01 5502 	mla	r5, r1, r2, r5
    7434:	65a0      	str	r0, [r4, #88]	; 0x58
    7436:	8831      	ldrh	r1, [r6, #0]
    7438:	4638      	mov	r0, r7
    743a:	f004 fd51 	bl	bee0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    743e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    7440:	66a0      	str	r0, [r4, #104]	; 0x68
    7442:	1a41      	subs	r1, r0, r1
    7444:	440d      	add	r5, r1
    7446:	8831      	ldrh	r1, [r6, #0]
    7448:	f854 0cc4 	ldr.w	r0, [r4, #-196]
    744c:	f004 fd48 	bl	bee0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7450:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    7452:	4442      	add	r2, r8
    7454:	eba2 0109 	sub.w	r1, r2, r9
    7458:	6e22      	ldr	r2, [r4, #96]	; 0x60
    745a:	1a89      	subs	r1, r1, r2
    745c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    745e:	1e49      	subs	r1, r1, #1
    7460:	1a82      	subs	r2, r0, r2
    7462:	fb01 5502 	mla	r5, r1, r2, r5
    7466:	66e0      	str	r0, [r4, #108]	; 0x6c
    7468:	3cc8      	subs	r4, #200	; 0xc8
    746a:	e7c8      	b.n	73fe <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x22a>
    746c:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    7470:	e7d3      	b.n	741a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x246>
    7472:	0000      	.short	0x0000
    7474:	20000100 	.word	0x20000100
    7478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    747c:	4604      	mov	r4, r0
    747e:	f890 0142 	ldrb.w	r0, [r0, #322]	; 0x142
    7482:	2800      	cmp	r0, #0
    7484:	d053      	beq.n	752e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x35a>
    7486:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    748a:	2803      	cmp	r0, #3
    748c:	d14f      	bne.n	752e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x35a>
    748e:	4829      	ldr	r0, [pc, #164]	; (7534 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x360>)
    7490:	f894 9067 	ldrb.w	r9, [r4, #103]	; 0x67
    7494:	7800      	ldrb	r0, [r0, #0]
    7496:	f7ff fed9 	bl	724c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x78>
    749a:	4605      	mov	r5, r0
    749c:	f894 016d 	ldrb.w	r0, [r4, #365]	; 0x16d
    74a0:	f7ff fed4 	bl	724c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x78>
    74a4:	4428      	add	r0, r5
    74a6:	b286      	uxth	r6, r0
    74a8:	f894 016d 	ldrb.w	r0, [r4, #365]	; 0x16d
    74ac:	f7ff fece 	bl	724c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x78>
    74b0:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    74b4:	fa1f f880 	uxth.w	r8, r0
    74b8:	4648      	mov	r0, r9
    74ba:	f008 f90e 	bl	f6da <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    74be:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
    74c2:	1a0d      	subs	r5, r1, r0
    74c4:	4648      	mov	r0, r9
    74c6:	f008 f916 	bl	f6f6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    74ca:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    74ce:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    74d2:	fbb0 f0fa 	udiv	r0, r0, sl
    74d6:	1a2d      	subs	r5, r5, r0
    74d8:	4648      	mov	r0, r9
    74da:	f008 f8fe 	bl	f6da <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    74de:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    74e2:	1a0f      	subs	r7, r1, r0
    74e4:	4648      	mov	r0, r9
    74e6:	f008 f906 	bl	f6f6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    74ea:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    74ee:	4401      	add	r1, r0
    74f0:	fbb1 f0fa 	udiv	r0, r1, sl
    74f4:	1a39      	subs	r1, r7, r0
    74f6:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
    74fa:	4370      	muls	r0, r6
    74fc:	fbb0 f2f8 	udiv	r2, r0, r8
    7500:	2029      	movs	r0, #41	; 0x29
    7502:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    7506:	3260      	adds	r2, #96	; 0x60
    7508:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
    750c:	eb00 0052 	add.w	r0, r0, r2, lsr #1
    7510:	42a9      	cmp	r1, r5
    7512:	d801      	bhi.n	7518 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x344>
    7514:	4285      	cmp	r5, r0
    7516:	d901      	bls.n	751c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x348>
    7518:	f7fc f8c2 	bl	36a0 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    751c:	4631      	mov	r1, r6
    751e:	6860      	ldr	r0, [r4, #4]
    7520:	f004 fcde 	bl	bee0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7524:	2100      	movs	r1, #0
    7526:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    752a:	f884 1142 	strb.w	r1, [r4, #322]	; 0x142
    752e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7532:	0000      	.short	0x0000
    7534:	20000100 	.word	0x20000100
    7538:	b570      	push	{r4, r5, r6, lr}
    753a:	4604      	mov	r4, r0
    753c:	f890 00a9 	ldrb.w	r0, [r0, #169]	; 0xa9
    7540:	2500      	movs	r5, #0
    7542:	b118      	cbz	r0, 754c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x378>
    7544:	2001      	movs	r0, #1
    7546:	f007 f85c 	bl	e602 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1ce>
    754a:	4605      	mov	r5, r0
    754c:	4620      	mov	r0, r4
    754e:	f006 fd1d 	bl	df8c <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    7552:	1941      	adds	r1, r0, r5
    7554:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
    7558:	34bc      	adds	r4, #188	; 0xbc
    755a:	f7f9 ffb5 	bl	14c8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    755e:	2600      	movs	r6, #0
    7560:	60e0      	str	r0, [r4, #12]
    7562:	f804 6b0b 	strb.w	r6, [r4], #11
    7566:	2001      	movs	r0, #1
    7568:	f804 0901 	strb.w	r0, [r4], #-1
    756c:	2003      	movs	r0, #3
    756e:	f804 09c6 	strb.w	r0, [r4], #-198
    7572:	4620      	mov	r0, r4
    7574:	f007 f816 	bl	e5a4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x170>
    7578:	f8a4 00c4 	strh.w	r0, [r4, #196]	; 0xc4
    757c:	4629      	mov	r1, r5
    757e:	4620      	mov	r0, r4
    7580:	f006 ffc4 	bl	e50c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xd8>
    7584:	b930      	cbnz	r0, 7594 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3c0>
    7586:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
    758a:	f104 01bc 	add.w	r1, r4, #188	; 0xbc
    758e:	f007 f807 	bl	e5a0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x16c>
    7592:	b148      	cbz	r0, 75a8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3d4>
    7594:	f8a4 60cc 	strh.w	r6, [r4, #204]	; 0xcc
    7598:	f006 ffe9 	bl	e56e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x13a>
    759c:	4805      	ldr	r0, [pc, #20]	; (75b4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3e0>)
    759e:	7940      	ldrb	r0, [r0, #5]
    75a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    75a4:	f7fc ba2a 	b.w	39fc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    75a8:	f44f 61e6 	mov.w	r1, #1840	; 0x730
    75ac:	2030      	movs	r0, #48	; 0x30
    75ae:	f7fc fbd5 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    75b2:	0000      	.short	0x0000
    75b4:	20000100 	.word	0x20000100
    75b8:	b570      	push	{r4, r5, r6, lr}
    75ba:	4604      	mov	r4, r0
    75bc:	2000      	movs	r0, #0
    75be:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0
    75c2:	f8d4 50c8 	ldr.w	r5, [r4, #200]	; 0xc8
    75c6:	460e      	mov	r6, r1
    75c8:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
    75cc:	2001      	movs	r0, #1
    75ce:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
    75d2:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
    75d6:	2101      	movs	r1, #1
    75d8:	34a8      	adds	r4, #168	; 0xa8
    75da:	f7fe fa7f 	bl	5adc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    75de:	6860      	ldr	r0, [r4, #4]
    75e0:	f8c0 5154 	str.w	r5, [r0, #340]	; 0x154
    75e4:	6861      	ldr	r1, [r4, #4]
    75e6:	7820      	ldrb	r0, [r4, #0]
    75e8:	f881 0160 	strb.w	r0, [r1, #352]	; 0x160
    75ec:	6860      	ldr	r0, [r4, #4]
    75ee:	f8c0 6164 	str.w	r6, [r0, #356]	; 0x164
    75f2:	6860      	ldr	r0, [r4, #4]
    75f4:	f8c0 5158 	str.w	r5, [r0, #344]	; 0x158
    75f8:	6860      	ldr	r0, [r4, #4]
    75fa:	8801      	ldrh	r1, [r0, #0]
    75fc:	f890 0160 	ldrb.w	r0, [r0, #352]	; 0x160
    7600:	f7fe faf4 	bl	5bec <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ>
    7604:	6860      	ldr	r0, [r4, #4]
    7606:	f006 feed 	bl	e3e4 <sym_RPU47CELOEFE6QEDGTIIWZGB4XELPLNKO5IHKTA>
    760a:	b120      	cbz	r0, 7616 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x442>
    760c:	f240 7159 	movw	r1, #1881	; 0x759
    7610:	2030      	movs	r0, #48	; 0x30
    7612:	f7fc fba3 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7616:	f006 ffaa 	bl	e56e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x13a>
    761a:	4803      	ldr	r0, [pc, #12]	; (7628 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x454>)
    761c:	7940      	ldrb	r0, [r0, #5]
    761e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7622:	f7fc b9eb 	b.w	39fc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    7626:	0000      	.short	0x0000
    7628:	20000100 	.word	0x20000100
    762c:	b538      	push	{r3, r4, r5, lr}
    762e:	2500      	movs	r5, #0
    7630:	4604      	mov	r4, r0
    7632:	2901      	cmp	r1, #1
    7634:	d102      	bne.n	763c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x468>
    7636:	4810      	ldr	r0, [pc, #64]	; (7678 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4a4>)
    7638:	78c0      	ldrb	r0, [r0, #3]
    763a:	b170      	cbz	r0, 765a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x486>
    763c:	2004      	movs	r0, #4
    763e:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    7642:	bf00      	nop
    7644:	f006 ff93 	bl	e56e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x13a>
    7648:	f8a4 515e 	strh.w	r5, [r4, #350]	; 0x15e
    764c:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
    7650:	f8a4 013e 	strh.w	r0, [r4, #318]	; 0x13e
    7654:	f884 5141 	strb.w	r5, [r4, #321]	; 0x141
    7658:	bd38      	pop	{r3, r4, r5, pc}
    765a:	9500      	str	r5, [sp, #0]
    765c:	f8b4 10f4 	ldrh.w	r1, [r4, #244]	; 0xf4
    7660:	2301      	movs	r3, #1
    7662:	2200      	movs	r2, #0
    7664:	4620      	mov	r0, r4
    7666:	f000 f809 	bl	767c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4a8>
    766a:	2800      	cmp	r0, #0
    766c:	d0ea      	beq.n	7644 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x470>
    766e:	f240 710e 	movw	r1, #1806	; 0x70e
    7672:	2030      	movs	r0, #48	; 0x30
    7674:	f7fc fb72 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7678:	20000100 	.word	0x20000100
    767c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7680:	4604      	mov	r4, r0
    7682:	b085      	sub	sp, #20
    7684:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    7688:	f8df b424 	ldr.w	fp, [pc, #1060]	; 7ab0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8dc>
    768c:	e9cd 3000 	strd	r3, r0, [sp]
    7690:	4699      	mov	r9, r3
    7692:	460f      	mov	r7, r1
    7694:	f89b 0000 	ldrb.w	r0, [fp]
    7698:	f7ff fdd8 	bl	724c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x78>
    769c:	4605      	mov	r5, r0
    769e:	f894 016d 	ldrb.w	r0, [r4, #365]	; 0x16d
    76a2:	f7ff fdd3 	bl	724c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x78>
    76a6:	4428      	add	r0, r5
    76a8:	f8ad 0008 	strh.w	r0, [sp, #8]
    76ac:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
    76b0:	280d      	cmp	r0, #13
    76b2:	d004      	beq.n	76be <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4ea>
    76b4:	2000      	movs	r0, #0
    76b6:	9003      	str	r0, [sp, #12]
    76b8:	9807      	ldr	r0, [sp, #28]
    76ba:	b110      	cbz	r0, 76c2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4ee>
    76bc:	e02e      	b.n	771c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x548>
    76be:	2001      	movs	r0, #1
    76c0:	e7f9      	b.n	76b6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4e2>
    76c2:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    76c6:	2803      	cmp	r0, #3
    76c8:	d128      	bne.n	771c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x548>
    76ca:	9803      	ldr	r0, [sp, #12]
    76cc:	b330      	cbz	r0, 771c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x548>
    76ce:	f8b4 018c 	ldrh.w	r0, [r4, #396]	; 0x18c
    76d2:	42b8      	cmp	r0, r7
    76d4:	d122      	bne.n	771c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x548>
    76d6:	f8d4 0134 	ldr.w	r0, [r4, #308]	; 0x134
    76da:	f8c4 0120 	str.w	r0, [r4, #288]	; 0x120
    76de:	6860      	ldr	r0, [r4, #4]
    76e0:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
    76e4:	f8b4 015e 	ldrh.w	r0, [r4, #350]	; 0x15e
    76e8:	f8b4 1106 	ldrh.w	r1, [r4, #262]	; 0x106
    76ec:	4408      	add	r0, r1
    76ee:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    76f2:	4620      	mov	r0, r4
    76f4:	f000 fb96 	bl	7e24 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    76f8:	f8d4 0190 	ldr.w	r0, [r4, #400]	; 0x190
    76fc:	61e0      	str	r0, [r4, #28]
    76fe:	f8b4 018e 	ldrh.w	r0, [r4, #398]	; 0x18e
    7702:	8360      	strh	r0, [r4, #26]
    7704:	f8d4 0194 	ldr.w	r0, [r4, #404]	; 0x194
    7708:	6060      	str	r0, [r4, #4]
    770a:	f8b4 0198 	ldrh.w	r0, [r4, #408]	; 0x198
    770e:	8120      	strh	r0, [r4, #8]
    7710:	f8b4 019a 	ldrh.w	r0, [r4, #410]	; 0x19a
    7714:	8160      	strh	r0, [r4, #10]
    7716:	2002      	movs	r0, #2
    7718:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    771c:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
    7720:	f504 75a2 	add.w	r5, r4, #324	; 0x144
    7724:	1a38      	subs	r0, r7, r0
    7726:	fa0f fa80 	sxth.w	sl, r0
    772a:	f8b4 015c 	ldrh.w	r0, [r4, #348]	; 0x15c
    772e:	1a38      	subs	r0, r7, r0
    7730:	fa0f f880 	sxth.w	r8, r0
    7734:	f1b8 0f00 	cmp.w	r8, #0
    7738:	da06      	bge.n	7748 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x574>
    773a:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    773e:	f8c4 0158 	str.w	r0, [r4, #344]	; 0x158
    7742:	2001      	movs	r0, #1
    7744:	46d0      	mov	r8, sl
    7746:	9000      	str	r0, [sp, #0]
    7748:	ab02      	add	r3, sp, #8
    774a:	4652      	mov	r2, sl
    774c:	4641      	mov	r1, r8
    774e:	4620      	mov	r0, r4
    7750:	f7ff fe20 	bl	7394 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1c0>
    7754:	9004      	str	r0, [sp, #16]
    7756:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    775a:	b140      	cbz	r0, 776e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x59a>
    775c:	2801      	cmp	r0, #1
    775e:	d07c      	beq.n	785a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x686>
    7760:	2802      	cmp	r0, #2
    7762:	d05a      	beq.n	781a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x646>
    7764:	2803      	cmp	r0, #3
    7766:	d079      	beq.n	785c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x688>
    7768:	f240 518e 	movw	r1, #1422	; 0x58e
    776c:	e19c      	b.n	7aa8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8d4>
    776e:	f8d4 0164 	ldr.w	r0, [r4, #356]	; 0x164
    7772:	b3e8      	cbz	r0, 77f0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x61c>
    7774:	2101      	movs	r1, #1
    7776:	2000      	movs	r0, #0
    7778:	f005 ff21 	bl	d5be <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    777c:	4606      	mov	r6, r0
    777e:	69e0      	ldr	r0, [r4, #28]
    7780:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    7784:	4430      	add	r0, r6
    7786:	f004 fbab 	bl	bee0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    778a:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
    778e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    7792:	6860      	ldr	r0, [r4, #4]
    7794:	f004 fba4 	bl	bee0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7798:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    779c:	a901      	add	r1, sp, #4
    779e:	4668      	mov	r0, sp
    77a0:	f003 fb10 	bl	adc4 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    77a4:	e9dd 1200 	ldrd	r1, r2, [sp]
    77a8:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    77ac:	f7fa ffea 	bl	2784 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    77b0:	4682      	mov	sl, r0
    77b2:	4620      	mov	r0, r4
    77b4:	f006 fecd 	bl	e552 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x11e>
    77b8:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    77bc:	f8d4 8164 	ldr.w	r8, [r4, #356]	; 0x164
    77c0:	f007 ff99 	bl	f6f6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    77c4:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    77c8:	4401      	add	r1, r0
    77ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    77ce:	fbb1 f0f0 	udiv	r0, r1, r0
    77d2:	69e1      	ldr	r1, [r4, #28]
    77d4:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
    77d8:	4431      	add	r1, r6
    77da:	1a08      	subs	r0, r1, r0
    77dc:	1a81      	subs	r1, r0, r2
    77de:	4441      	add	r1, r8
    77e0:	3920      	subs	r1, #32
    77e2:	eba1 060a 	sub.w	r6, r1, sl
    77e6:	0050      	lsls	r0, r2, #1
    77e8:	8b61      	ldrh	r1, [r4, #26]
    77ea:	3060      	adds	r0, #96	; 0x60
    77ec:	4401      	add	r1, r0
    77ee:	e000      	b.n	77f2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x61e>
    77f0:	e010      	b.n	7814 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x640>
    77f2:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    77f6:	f006 fec1 	bl	e57c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x148>
    77fa:	3024      	adds	r0, #36	; 0x24
    77fc:	f8cb 0018 	str.w	r0, [fp, #24]
    7800:	f8d4 0164 	ldr.w	r0, [r4, #356]	; 0x164
    7804:	4659      	mov	r1, fp
    7806:	1a30      	subs	r0, r6, r0
    7808:	f5b0 7fdb 	cmp.w	r0, #438	; 0x1b6
    780c:	d85c      	bhi.n	78c8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6f4>
    780e:	f240 5127 	movw	r1, #1319	; 0x527
    7812:	e149      	b.n	7aa8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8d4>
    7814:	f240 5105 	movw	r1, #1285	; 0x505
    7818:	e146      	b.n	7aa8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8d4>
    781a:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
    781e:	69e0      	ldr	r0, [r4, #28]
    7820:	4408      	add	r0, r1
    7822:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    7826:	f004 fb5b 	bl	bee0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    782a:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
    782e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    7832:	6860      	ldr	r0, [r4, #4]
    7834:	f004 fb54 	bl	bee0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7838:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    783c:	4620      	mov	r0, r4
    783e:	f006 fe88 	bl	e552 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x11e>
    7842:	f8b4 0106 	ldrh.w	r0, [r4, #262]	; 0x106
    7846:	bb10      	cbnz	r0, 788e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6ba>
    7848:	f1b9 0f00 	cmp.w	r9, #0
    784c:	d01f      	beq.n	788e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6ba>
    784e:	f894 8067 	ldrb.w	r8, [r4, #103]	; 0x67
    7852:	4640      	mov	r0, r8
    7854:	f007 ff4f 	bl	f6f6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7858:	e001      	b.n	785e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x68a>
    785a:	e036      	b.n	78ca <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6f6>
    785c:	e052      	b.n	7904 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x730>
    785e:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    7862:	4401      	add	r1, r0
    7864:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7868:	fbb1 f0f0 	udiv	r0, r1, r0
    786c:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
    7870:	69e2      	ldr	r2, [r4, #28]
    7872:	4408      	add	r0, r1
    7874:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
    7878:	4411      	add	r1, r2
    787a:	1a0e      	subs	r6, r1, r0
    787c:	4640      	mov	r0, r8
    787e:	f007 ff2c 	bl	f6da <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    7882:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
    7886:	1a08      	subs	r0, r1, r0
    7888:	4406      	add	r6, r0
    788a:	3e20      	subs	r6, #32
    788c:	e006      	b.n	789c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6c8>
    788e:	69e1      	ldr	r1, [r4, #28]
    7890:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    7894:	4408      	add	r0, r1
    7896:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
    789a:	1a46      	subs	r6, r0, r1
    789c:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
    78a0:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    78a4:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
    78a8:	fb01 0002 	mla	r0, r1, r2, r0
    78ac:	0040      	lsls	r0, r0, #1
    78ae:	8b61      	ldrh	r1, [r4, #26]
    78b0:	3060      	adds	r0, #96	; 0x60
    78b2:	4401      	add	r1, r0
    78b4:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    78b8:	f006 fe60 	bl	e57c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x148>
    78bc:	f8cb 0018 	str.w	r0, [fp, #24]
    78c0:	2001      	movs	r0, #1
    78c2:	4659      	mov	r1, fp
    78c4:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    78c8:	e066      	b.n	7998 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7c4>
    78ca:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    78ce:	6860      	ldr	r0, [r4, #4]
    78d0:	f8b4 2106 	ldrh.w	r2, [r4, #262]	; 0x106
    78d4:	1a46      	subs	r6, r0, r1
    78d6:	eb02 000a 	add.w	r0, r2, sl
    78da:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
    78de:	f8d4 c120 	ldr.w	ip, [r4, #288]	; 0x120
    78e2:	1a80      	subs	r0, r0, r2
    78e4:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
    78e8:	1e40      	subs	r0, r0, #1
    78ea:	fb0c 3202 	mla	r2, ip, r2, r3
    78ee:	fb00 2001 	mla	r0, r0, r1, r2
    78f2:	0040      	lsls	r0, r0, #1
    78f4:	8b61      	ldrh	r1, [r4, #26]
    78f6:	3060      	adds	r0, #96	; 0x60
    78f8:	4401      	add	r1, r0
    78fa:	fb06 f608 	mul.w	r6, r6, r8
    78fe:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    7902:	e044      	b.n	798e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7ba>
    7904:	6860      	ldr	r0, [r4, #4]
    7906:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    790a:	fb00 f008 	mul.w	r0, r0, r8
    790e:	fb08 0611 	mls	r6, r8, r1, r0
    7912:	f894 007d 	ldrb.w	r0, [r4, #125]	; 0x7d
    7916:	2824      	cmp	r0, #36	; 0x24
    7918:	d003      	beq.n	7922 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x74e>
    791a:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
    791e:	2824      	cmp	r0, #36	; 0x24
    7920:	d109      	bne.n	7936 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x762>
    7922:	f8b4 018c 	ldrh.w	r0, [r4, #396]	; 0x18c
    7926:	1a38      	subs	r0, r7, r0
    7928:	b200      	sxth	r0, r0
    792a:	2800      	cmp	r0, #0
    792c:	db03      	blt.n	7936 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x762>
    792e:	f894 018f 	ldrb.w	r0, [r4, #399]	; 0x18f
    7932:	b100      	cbz	r0, 7936 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x762>
    7934:	9001      	str	r0, [sp, #4]
    7936:	9800      	ldr	r0, [sp, #0]
    7938:	b1f8      	cbz	r0, 797a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7a6>
    793a:	f8b4 0106 	ldrh.w	r0, [r4, #262]	; 0x106
    793e:	b9e0      	cbnz	r0, 797a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7a6>
    7940:	f8d4 0168 	ldr.w	r0, [r4, #360]	; 0x168
    7944:	2800      	cmp	r0, #0
    7946:	d07d      	beq.n	7a44 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x870>
    7948:	f8d4 0164 	ldr.w	r0, [r4, #356]	; 0x164
    794c:	2800      	cmp	r0, #0
    794e:	d079      	beq.n	7a44 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x870>
    7950:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    7954:	f007 fecf 	bl	f6f6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7958:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    795c:	4401      	add	r1, r0
    795e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7962:	fbb1 f0f0 	udiv	r0, r1, r0
    7966:	1a36      	subs	r6, r6, r0
    7968:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    796c:	f007 feb5 	bl	f6da <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    7970:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
    7974:	1a08      	subs	r0, r1, r0
    7976:	4406      	add	r6, r0
    7978:	3e20      	subs	r6, #32
    797a:	f8b4 1106 	ldrh.w	r1, [r4, #262]	; 0x106
    797e:	eb01 000a 	add.w	r0, r1, sl
    7982:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    7986:	4348      	muls	r0, r1
    7988:	0041      	lsls	r1, r0, #1
    798a:	3160      	adds	r1, #96	; 0x60
    798c:	9801      	ldr	r0, [sp, #4]
    798e:	f006 fdf5 	bl	e57c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x148>
    7992:	4659      	mov	r1, fp
    7994:	f8cb 0018 	str.w	r0, [fp, #24]
    7998:	9804      	ldr	r0, [sp, #16]
    799a:	6989      	ldr	r1, [r1, #24]
    799c:	1a33      	subs	r3, r6, r0
    799e:	f8d4 6134 	ldr.w	r6, [r4, #308]	; 0x134
    79a2:	6860      	ldr	r0, [r4, #4]
    79a4:	1b80      	subs	r0, r0, r6
    79a6:	f2a0 2045 	subw	r0, r0, #581	; 0x245
    79aa:	f8cb 001c 	str.w	r0, [fp, #28]
    79ae:	4281      	cmp	r1, r0
    79b0:	d800      	bhi.n	79b4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7e0>
    79b2:	4608      	mov	r0, r1
    79b4:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    79b8:	2000      	movs	r0, #0
    79ba:	7028      	strb	r0, [r5, #0]
    79bc:	2064      	movs	r0, #100	; 0x64
    79be:	8128      	strh	r0, [r5, #8]
    79c0:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    79c4:	4619      	mov	r1, r3
    79c6:	34dc      	adds	r4, #220	; 0xdc
    79c8:	f7f9 fd7e 	bl	14c8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    79cc:	60e8      	str	r0, [r5, #12]
    79ce:	f854 0cb0 	ldr.w	r0, [r4, #-176]
    79d2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    79d4:	4408      	add	r0, r1
    79d6:	6068      	str	r0, [r5, #4]
    79d8:	68e8      	ldr	r0, [r5, #12]
    79da:	67e0      	str	r0, [r4, #124]	; 0x7c
    79dc:	f8a4 7080 	strh.w	r7, [r4, #128]	; 0x80
    79e0:	2001      	movs	r0, #1
    79e2:	72a8      	strb	r0, [r5, #10]
    79e4:	8aa1      	ldrh	r1, [r4, #20]
    79e6:	3cdc      	subs	r4, #220	; 0xdc
    79e8:	1bc9      	subs	r1, r1, r7
    79ea:	b209      	sxth	r1, r1
    79ec:	2900      	cmp	r1, #0
    79ee:	dd01      	ble.n	79f4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x820>
    79f0:	2103      	movs	r1, #3
    79f2:	72a9      	strb	r1, [r5, #10]
    79f4:	9903      	ldr	r1, [sp, #12]
    79f6:	b331      	cbz	r1, 7a46 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x872>
    79f8:	f1b9 0f00 	cmp.w	r9, #0
    79fc:	d027      	beq.n	7a4e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x87a>
    79fe:	bf00      	nop
    7a00:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
    7a04:	b392      	cbz	r2, 7a6c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x898>
    7a06:	f8b4 111a 	ldrh.w	r1, [r4, #282]	; 0x11a
    7a0a:	bf00      	nop
    7a0c:	f8a4 111a 	strh.w	r1, [r4, #282]	; 0x11a
    7a10:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
    7a14:	1c49      	adds	r1, r1, #1
    7a16:	434b      	muls	r3, r1
    7a18:	4293      	cmp	r3, r2
    7a1a:	d218      	bcs.n	7a4e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x87a>
    7a1c:	7aa9      	ldrb	r1, [r5, #10]
    7a1e:	1e49      	subs	r1, r1, #1
    7a20:	2900      	cmp	r1, #0
    7a22:	dd14      	ble.n	7a4e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x87a>
    7a24:	72a8      	strb	r0, [r5, #10]
    7a26:	f8b4 011a 	ldrh.w	r0, [r4, #282]	; 0x11a
    7a2a:	2101      	movs	r1, #1
    7a2c:	1c40      	adds	r0, r0, #1
    7a2e:	f8a4 011a 	strh.w	r0, [r4, #282]	; 0x11a
    7a32:	f504 708e 	add.w	r0, r4, #284	; 0x11c
    7a36:	f7fc fa21 	bl	3e7c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    7a3a:	f894 011c 	ldrb.w	r0, [r4, #284]	; 0x11c
    7a3e:	f000 0007 	and.w	r0, r0, #7
    7a42:	e001      	b.n	7a48 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x874>
    7a44:	e013      	b.n	7a6e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x89a>
    7a46:	e015      	b.n	7a74 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8a0>
    7a48:	1c40      	adds	r0, r0, #1
    7a4a:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
    7a4e:	f894 0160 	ldrb.w	r0, [r4, #352]	; 0x160
    7a52:	4629      	mov	r1, r5
    7a54:	f006 fda4 	bl	e5a0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x16c>
    7a58:	b320      	cbz	r0, 7aa4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8d0>
    7a5a:	9807      	ldr	r0, [sp, #28]
    7a5c:	f080 0001 	eor.w	r0, r0, #1
    7a60:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
    7a64:	2000      	movs	r0, #0
    7a66:	b009      	add	sp, #36	; 0x24
    7a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7a6c:	e018      	b.n	7aa0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8cc>
    7a6e:	f240 5179 	movw	r1, #1401	; 0x579
    7a72:	e019      	b.n	7aa8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8d4>
    7a74:	f1b9 0f00 	cmp.w	r9, #0
    7a78:	d1c2      	bne.n	7a00 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x82c>
    7a7a:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    7a7e:	2800      	cmp	r0, #0
    7a80:	d0e5      	beq.n	7a4e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x87a>
    7a82:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    7a86:	6860      	ldr	r0, [r4, #4]
    7a88:	1a41      	subs	r1, r0, r1
    7a8a:	4628      	mov	r0, r5
    7a8c:	f005 fda9 	bl	d5e2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    7a90:	0400      	lsls	r0, r0, #16
    7a92:	0c00      	lsrs	r0, r0, #16
    7a94:	d0db      	beq.n	7a4e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x87a>
    7a96:	9912      	ldr	r1, [sp, #72]	; 0x48
    7a98:	b101      	cbz	r1, 7a9c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8c8>
    7a9a:	8008      	strh	r0, [r1, #0]
    7a9c:	2001      	movs	r0, #1
    7a9e:	e7e2      	b.n	7a66 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x892>
    7aa0:	2100      	movs	r1, #0
    7aa2:	e7b3      	b.n	7a0c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x838>
    7aa4:	f240 51d9 	movw	r1, #1497	; 0x5d9
    7aa8:	2030      	movs	r0, #48	; 0x30
    7aaa:	f7fc f957 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7aae:	0000      	.short	0x0000
    7ab0:	20000100 	.word	0x20000100
    7ab4:	b570      	push	{r4, r5, r6, lr}
    7ab6:	2909      	cmp	r1, #9
    7ab8:	d24e      	bcs.n	7b58 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x984>
    7aba:	e8df f001 	tbb	[pc, r1]
    7abe:	1a05      	.short	0x1a05
    7ac0:	4d3c4040 	.word	0x4d3c4040
    7ac4:	0048442e 	.word	0x0048442e
    7ac8:	4d25      	ldr	r5, [pc, #148]	; (7b60 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x98c>)
    7aca:	4604      	mov	r4, r0
    7acc:	6228      	str	r0, [r5, #32]
    7ace:	2000      	movs	r0, #0
    7ad0:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
    7ad4:	4620      	mov	r0, r4
    7ad6:	f7fe fce1 	bl	649c <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    7ada:	b110      	cbz	r0, 7ae2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x90e>
    7adc:	f240 21b9 	movw	r1, #697	; 0x2b9
    7ae0:	e037      	b.n	7b52 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x97e>
    7ae2:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    7ae6:	38fa      	subs	r0, #250	; 0xfa
    7ae8:	f7fa fd98 	bl	261c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    7aec:	2003      	movs	r0, #3
    7aee:	70a8      	strb	r0, [r5, #2]
    7af0:	bd70      	pop	{r4, r5, r6, pc}
    7af2:	4605      	mov	r5, r0
    7af4:	f006 fa6a 	bl	dfcc <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    7af8:	b9a8      	cbnz	r0, 7b26 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x952>
    7afa:	4628      	mov	r0, r5
    7afc:	f006 fd00 	bl	e500 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xcc>
    7b00:	4604      	mov	r4, r0
    7b02:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
    7b06:	42a0      	cmp	r0, r4
    7b08:	d20b      	bcs.n	7b22 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94e>
    7b0a:	1a20      	subs	r0, r4, r0
    7b0c:	2104      	movs	r1, #4
    7b0e:	f7f9 fbff 	bl	1310 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    7b12:	b130      	cbz	r0, 7b22 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94e>
    7b14:	4628      	mov	r0, r5
    7b16:	f8c5 40c0 	str.w	r4, [r5, #192]	; 0xc0
    7b1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7b1e:	f006 ba33 	b.w	df88 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    7b22:	f8c5 40c0 	str.w	r4, [r5, #192]	; 0xc0
    7b26:	4628      	mov	r0, r5
    7b28:	f7fe fcd4 	bl	64d4 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    7b2c:	2800      	cmp	r0, #0
    7b2e:	d0df      	beq.n	7af0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x91c>
    7b30:	f240 21ed 	movw	r1, #749	; 0x2ed
    7b34:	e00d      	b.n	7b52 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x97e>
    7b36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7b3a:	f003 bbe5 	b.w	b308 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    7b3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7b42:	f7ff bb91 	b.w	7268 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    7b46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7b4a:	f006 bcd0 	b.w	e4ee <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xba>
    7b4e:	f44f 7184 	mov.w	r1, #264	; 0x108
    7b52:	2030      	movs	r0, #48	; 0x30
    7b54:	f7fc f902 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b58:	f44f 7186 	mov.w	r1, #268	; 0x10c
    7b5c:	e7f9      	b.n	7b52 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x97e>
    7b5e:	0000      	.short	0x0000
    7b60:	20000100 	.word	0x20000100
    7b64:	b570      	push	{r4, r5, r6, lr}
    7b66:	4d4f      	ldr	r5, [pc, #316]	; (7ca4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xad0>)
    7b68:	4606      	mov	r6, r0
    7b6a:	2909      	cmp	r1, #9
    7b6c:	d27e      	bcs.n	7c6c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa98>
    7b6e:	e8df f001 	tbb	[pc, r1]
    7b72:	4a05      	.short	0x4a05
    7b74:	964e5252 	.word	0x964e5252
    7b78:	00927069 	.word	0x00927069
    7b7c:	4630      	mov	r0, r6
    7b7e:	f7fe f827 	bl	5bd0 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>
    7b82:	2100      	movs	r1, #0
    7b84:	f005 faff 	bl	d186 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7b88:	0004      	movs	r4, r0
    7b8a:	d007      	beq.n	7b9c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x9c8>
    7b8c:	4630      	mov	r0, r6
    7b8e:	f7fe f81f 	bl	5bd0 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>
    7b92:	8821      	ldrh	r1, [r4, #0]
    7b94:	4288      	cmp	r0, r1
    7b96:	d003      	beq.n	7ba0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x9cc>
    7b98:	21a9      	movs	r1, #169	; 0xa9
    7b9a:	e07d      	b.n	7c98 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xac4>
    7b9c:	21a8      	movs	r1, #168	; 0xa8
    7b9e:	e07b      	b.n	7c98 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xac4>
    7ba0:	2100      	movs	r1, #0
    7ba2:	616c      	str	r4, [r5, #20]
    7ba4:	f8c4 1164 	str.w	r1, [r4, #356]	; 0x164
    7ba8:	f8c4 1168 	str.w	r1, [r4, #360]	; 0x168
    7bac:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
    7bb0:	4620      	mov	r0, r4
    7bb2:	b189      	cbz	r1, 7bd8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa04>
    7bb4:	f8b0 213e 	ldrh.w	r2, [r0, #318]	; 0x13e
    7bb8:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
    7bbc:	428a      	cmp	r2, r1
    7bbe:	d106      	bne.n	7bce <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x9fa>
    7bc0:	f8b0 20f4 	ldrh.w	r2, [r0, #244]	; 0xf4
    7bc4:	1a51      	subs	r1, r2, r1
    7bc6:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    7bca:	4611      	mov	r1, r2
    7bcc:	e00d      	b.n	7bea <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa16>
    7bce:	1a51      	subs	r1, r2, r1
    7bd0:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    7bd4:	b291      	uxth	r1, r2
    7bd6:	e008      	b.n	7bea <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa16>
    7bd8:	f8b0 113c 	ldrh.w	r1, [r0, #316]	; 0x13c
    7bdc:	f8b0 2074 	ldrh.w	r2, [r0, #116]	; 0x74
    7be0:	1a89      	subs	r1, r1, r2
    7be2:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    7be6:	f8b0 113c 	ldrh.w	r1, [r0, #316]	; 0x13c
    7bea:	f8a0 1074 	strh.w	r1, [r0, #116]	; 0x74
    7bee:	f8d0 1150 	ldr.w	r1, [r0, #336]	; 0x150
    7bf2:	f8c0 1154 	str.w	r1, [r0, #340]	; 0x154
    7bf6:	f000 fb29 	bl	824c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    7bfa:	4620      	mov	r0, r4
    7bfc:	f000 f854 	bl	7ca8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xad4>
    7c00:	2002      	movs	r0, #2
    7c02:	70a8      	strb	r0, [r5, #2]
    7c04:	bd70      	pop	{r4, r5, r6, pc}
    7c06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7c0a:	f006 bd52 	b.w	e6b2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    7c0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7c12:	f003 bb79 	b.w	b308 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    7c16:	4630      	mov	r0, r6
    7c18:	f7fd ffda 	bl	5bd0 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>
    7c1c:	2100      	movs	r1, #0
    7c1e:	f005 fab2 	bl	d186 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7c22:	0004      	movs	r4, r0
    7c24:	d007      	beq.n	7c36 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa62>
    7c26:	4630      	mov	r0, r6
    7c28:	f7fd ffd2 	bl	5bd0 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>
    7c2c:	8821      	ldrh	r1, [r4, #0]
    7c2e:	4288      	cmp	r0, r1
    7c30:	d003      	beq.n	7c3a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa66>
    7c32:	21c3      	movs	r1, #195	; 0xc3
    7c34:	e030      	b.n	7c98 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xac4>
    7c36:	21c2      	movs	r1, #194	; 0xc2
    7c38:	e02e      	b.n	7c98 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xac4>
    7c3a:	4620      	mov	r0, r4
    7c3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7c40:	f000 b866 	b.w	7d10 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb3c>
    7c44:	2001      	movs	r0, #1
    7c46:	f7f9 fb53 	bl	12f0 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    7c4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7c4e:	f005 bb49 	b.w	d2e4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    7c52:	4630      	mov	r0, r6
    7c54:	f7fd ffbc 	bl	5bd0 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>
    7c58:	2100      	movs	r1, #0
    7c5a:	f005 fa94 	bl	d186 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7c5e:	0004      	movs	r4, r0
    7c60:	d009      	beq.n	7c76 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xaa2>
    7c62:	4630      	mov	r0, r6
    7c64:	f7fd ffb4 	bl	5bd0 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>
    7c68:	8821      	ldrh	r1, [r4, #0]
    7c6a:	e000      	b.n	7c6e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa9a>
    7c6c:	e017      	b.n	7c9e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xaca>
    7c6e:	4288      	cmp	r0, r1
    7c70:	d003      	beq.n	7c7a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xaa6>
    7c72:	21d1      	movs	r1, #209	; 0xd1
    7c74:	e010      	b.n	7c98 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xac4>
    7c76:	21d0      	movs	r1, #208	; 0xd0
    7c78:	e00e      	b.n	7c98 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xac4>
    7c7a:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    7c7e:	2804      	cmp	r0, #4
    7c80:	d001      	beq.n	7c86 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xab2>
    7c82:	21d3      	movs	r1, #211	; 0xd3
    7c84:	e008      	b.n	7c98 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xac4>
    7c86:	4620      	mov	r0, r4
    7c88:	f006 fca8 	bl	e5dc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1a8>
    7c8c:	7968      	ldrb	r0, [r5, #5]
    7c8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7c92:	f7fb beb3 	b.w	39fc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    7c96:	21dc      	movs	r1, #220	; 0xdc
    7c98:	2030      	movs	r0, #48	; 0x30
    7c9a:	f7fc f85f 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c9e:	21e0      	movs	r1, #224	; 0xe0
    7ca0:	e7fa      	b.n	7c98 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xac4>
    7ca2:	0000      	.short	0x0000
    7ca4:	20000100 	.word	0x20000100
    7ca8:	b570      	push	{r4, r5, r6, lr}
    7caa:	4604      	mov	r4, r0
    7cac:	f7f9 fd62 	bl	1774 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    7cb0:	2864      	cmp	r0, #100	; 0x64
    7cb2:	d901      	bls.n	7cb8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xae4>
    7cb4:	4605      	mov	r5, r0
    7cb6:	e000      	b.n	7cba <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xae6>
    7cb8:	2564      	movs	r5, #100	; 0x64
    7cba:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    7cbe:	2128      	movs	r1, #40	; 0x28
    7cc0:	f006 fc13 	bl	e4ea <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb6>
    7cc4:	1946      	adds	r6, r0, r5
    7cc6:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    7cca:	2128      	movs	r1, #40	; 0x28
    7ccc:	f206 263f 	addw	r6, r6, #575	; 0x23f
    7cd0:	f006 fc0b 	bl	e4ea <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb6>
    7cd4:	f200 22a3 	addw	r2, r0, #675	; 0x2a3
    7cd8:	4620      	mov	r0, r4
    7cda:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    7cdc:	f005 fff1 	bl	dcc2 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    7ce0:	4605      	mov	r5, r0
    7ce2:	4632      	mov	r2, r6
    7ce4:	4620      	mov	r0, r4
    7ce6:	6861      	ldr	r1, [r4, #4]
    7ce8:	f005 ffeb 	bl	dcc2 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    7cec:	4907      	ldr	r1, [pc, #28]	; (7d0c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb38>)
    7cee:	4285      	cmp	r5, r0
    7cf0:	60c8      	str	r0, [r1, #12]
    7cf2:	d200      	bcs.n	7cf6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb22>
    7cf4:	4628      	mov	r0, r5
    7cf6:	6088      	str	r0, [r1, #8]
    7cf8:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
    7cfc:	f5a0 70b4 	sub.w	r0, r0, #360	; 0x168
    7d00:	6108      	str	r0, [r1, #16]
    7d02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7d06:	f7fa bc89 	b.w	261c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    7d0a:	0000      	.short	0x0000
    7d0c:	20000100 	.word	0x20000100
    7d10:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    7d12:	4604      	mov	r4, r0
    7d14:	f004 f8b0 	bl	be78 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    7d18:	4601      	mov	r1, r0
    7d1a:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    7d1e:	f7f9 fc09 	bl	1534 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    7d22:	6861      	ldr	r1, [r4, #4]
    7d24:	b111      	cbz	r1, 7d2c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb58>
    7d26:	fbb0 f0f1 	udiv	r0, r0, r1
    7d2a:	e000      	b.n	7d2e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb5a>
    7d2c:	2000      	movs	r0, #0
    7d2e:	f894 107e 	ldrb.w	r1, [r4, #126]	; 0x7e
    7d32:	290d      	cmp	r1, #13
    7d34:	d00c      	beq.n	7d50 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb7c>
    7d36:	f8b4 2074 	ldrh.w	r2, [r4, #116]	; 0x74
    7d3a:	f8b4 113e 	ldrh.w	r1, [r4, #318]	; 0x13e
    7d3e:	1813      	adds	r3, r2, r0
    7d40:	1acb      	subs	r3, r1, r3
    7d42:	b21b      	sxth	r3, r3
    7d44:	2b00      	cmp	r3, #0
    7d46:	db06      	blt.n	7d56 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb82>
    7d48:	1c49      	adds	r1, r1, #1
    7d4a:	f8a4 113e 	strh.w	r1, [r4, #318]	; 0x13e
    7d4e:	e006      	b.n	7d5e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb8a>
    7d50:	f8b4 013e 	ldrh.w	r0, [r4, #318]	; 0x13e
    7d54:	e00c      	b.n	7d70 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb9c>
    7d56:	1c40      	adds	r0, r0, #1
    7d58:	4410      	add	r0, r2
    7d5a:	f8a4 013e 	strh.w	r0, [r4, #318]	; 0x13e
    7d5e:	f894 0141 	ldrb.w	r0, [r4, #321]	; 0x141
    7d62:	b940      	cbnz	r0, 7d76 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xba2>
    7d64:	f8b4 013e 	ldrh.w	r0, [r4, #318]	; 0x13e
    7d68:	f8b4 10f4 	ldrh.w	r1, [r4, #244]	; 0xf4
    7d6c:	4288      	cmp	r0, r1
    7d6e:	d102      	bne.n	7d76 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xba2>
    7d70:	1c40      	adds	r0, r0, #1
    7d72:	f8a4 013e 	strh.w	r0, [r4, #318]	; 0x13e
    7d76:	f8b4 015e 	ldrh.w	r0, [r4, #350]	; 0x15e
    7d7a:	1c40      	adds	r0, r0, #1
    7d7c:	f8a4 015e 	strh.w	r0, [r4, #350]	; 0x15e
    7d80:	f8b4 009e 	ldrh.w	r0, [r4, #158]	; 0x9e
    7d84:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
    7d88:	1a40      	subs	r0, r0, r1
    7d8a:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    7d8e:	1e40      	subs	r0, r0, #1
    7d90:	4408      	add	r0, r1
    7d92:	b285      	uxth	r5, r0
    7d94:	e026      	b.n	7de4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc10>
    7d96:	a801      	add	r0, sp, #4
    7d98:	2300      	movs	r3, #0
    7d9a:	9000      	str	r0, [sp, #0]
    7d9c:	461a      	mov	r2, r3
    7d9e:	4620      	mov	r0, r4
    7da0:	f7ff fc6c 	bl	767c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4a8>
    7da4:	2800      	cmp	r0, #0
    7da6:	d03a      	beq.n	7e1e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc4a>
    7da8:	2801      	cmp	r0, #1
    7daa:	d004      	beq.n	7db6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xbe2>
    7dac:	f44f 61d2 	mov.w	r1, #1680	; 0x690
    7db0:	2030      	movs	r0, #48	; 0x30
    7db2:	f7fb ffd3 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7db6:	f8b4 013e 	ldrh.w	r0, [r4, #318]	; 0x13e
    7dba:	f8b4 10f0 	ldrh.w	r1, [r4, #240]	; 0xf0
    7dbe:	1a42      	subs	r2, r0, r1
    7dc0:	b212      	sxth	r2, r2
    7dc2:	2a00      	cmp	r2, #0
    7dc4:	da09      	bge.n	7dda <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc06>
    7dc6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    7dca:	4402      	add	r2, r0
    7dcc:	1aaa      	subs	r2, r5, r2
    7dce:	b212      	sxth	r2, r2
    7dd0:	2a00      	cmp	r2, #0
    7dd2:	da02      	bge.n	7dda <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc06>
    7dd4:	f8a4 113e 	strh.w	r1, [r4, #318]	; 0x13e
    7dd8:	e004      	b.n	7de4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc10>
    7dda:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    7dde:	4408      	add	r0, r1
    7de0:	f8a4 013e 	strh.w	r0, [r4, #318]	; 0x13e
    7de4:	f8b4 113e 	ldrh.w	r1, [r4, #318]	; 0x13e
    7de8:	1a68      	subs	r0, r5, r1
    7dea:	b200      	sxth	r0, r0
    7dec:	2800      	cmp	r0, #0
    7dee:	dad2      	bge.n	7d96 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xbc2>
    7df0:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
    7df4:	b188      	cbz	r0, 7e1a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc46>
    7df6:	2008      	movs	r0, #8
    7df8:	f884 008e 	strb.w	r0, [r4, #142]	; 0x8e
    7dfc:	2001      	movs	r0, #1
    7dfe:	f884 008d 	strb.w	r0, [r4, #141]	; 0x8d
    7e02:	4620      	mov	r0, r4
    7e04:	f006 fc57 	bl	e6b6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    7e08:	4620      	mov	r0, r4
    7e0a:	f006 fbe7 	bl	e5dc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1a8>
    7e0e:	4804      	ldr	r0, [pc, #16]	; (7e20 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc4c>)
    7e10:	7940      	ldrb	r0, [r0, #5]
    7e12:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    7e16:	f7fb bdf1 	b.w	39fc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    7e1a:	203e      	movs	r0, #62	; 0x3e
    7e1c:	e7ec      	b.n	7df8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc24>
    7e1e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    7e20:	20000100 	.word	0x20000100

00007e24 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    7e24:	b510      	push	{r4, lr}
    7e26:	4604      	mov	r4, r0
    7e28:	f8d0 0194 	ldr.w	r0, [r0, #404]	; 0x194
    7e2c:	6861      	ldr	r1, [r4, #4]
    7e2e:	4288      	cmp	r0, r1
    7e30:	d109      	bne.n	7e46 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    7e32:	f8b4 1198 	ldrh.w	r1, [r4, #408]	; 0x198
    7e36:	8922      	ldrh	r2, [r4, #8]
    7e38:	4291      	cmp	r1, r2
    7e3a:	d104      	bne.n	7e46 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    7e3c:	f8b4 119a 	ldrh.w	r1, [r4, #410]	; 0x19a
    7e40:	8962      	ldrh	r2, [r4, #10]
    7e42:	4291      	cmp	r1, r2
    7e44:	d015      	beq.n	7e72 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4e>
    7e46:	8821      	ldrh	r1, [r4, #0]
    7e48:	f8a4 11b4 	strh.w	r1, [r4, #436]	; 0x1b4
    7e4c:	f005 fae4 	bl	d418 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    7e50:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
    7e54:	f8b4 0198 	ldrh.w	r0, [r4, #408]	; 0x198
    7e58:	f8a4 01b8 	strh.w	r0, [r4, #440]	; 0x1b8
    7e5c:	f8b4 019a 	ldrh.w	r0, [r4, #410]	; 0x19a
    7e60:	f8a4 01ba 	strh.w	r0, [r4, #442]	; 0x1ba
    7e64:	2001      	movs	r0, #1
    7e66:	f884 01b0 	strb.w	r0, [r4, #432]	; 0x1b0
    7e6a:	4807      	ldr	r0, [pc, #28]	; (7e88 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x64>)
    7e6c:	7880      	ldrb	r0, [r0, #2]
    7e6e:	f7fb fdc5 	bl	39fc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    7e72:	2102      	movs	r1, #2
    7e74:	4620      	mov	r0, r4
    7e76:	f7fd fe31 	bl	5adc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    7e7a:	2000      	movs	r0, #0
    7e7c:	f804 0f7e 	strb.w	r0, [r4, #126]!
    7e80:	2003      	movs	r0, #3
    7e82:	70e0      	strb	r0, [r4, #3]
    7e84:	bd10      	pop	{r4, pc}
    7e86:	0000      	.short	0x0000
    7e88:	20000124 	.word	0x20000124

00007e8c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    7e8c:	4806      	ldr	r0, [pc, #24]	; (7ea8 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    7e8e:	4905      	ldr	r1, [pc, #20]	; (7ea4 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    7e90:	6501      	str	r1, [r0, #80]	; 0x50
    7e92:	4906      	ldr	r1, [pc, #24]	; (7eac <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    7e94:	6541      	str	r1, [r0, #84]	; 0x54
    7e96:	4807      	ldr	r0, [pc, #28]	; (7eb4 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    7e98:	4905      	ldr	r1, [pc, #20]	; (7eb0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    7e9a:	6501      	str	r1, [r0, #80]	; 0x50
    7e9c:	4906      	ldr	r1, [pc, #24]	; (7eb8 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    7e9e:	6541      	str	r1, [r0, #84]	; 0x54
    7ea0:	4770      	bx	lr
    7ea2:	0000      	.short	0x0000
    7ea4:	0000933d 	.word	0x0000933d
    7ea8:	20000138 	.word	0x20000138
    7eac:	00009401 	.word	0x00009401
    7eb0:	00009a55 	.word	0x00009a55
    7eb4:	2000019c 	.word	0x2000019c
    7eb8:	00009a85 	.word	0x00009a85

00007ebc <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA>:
    7ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7ebe:	460d      	mov	r5, r1
    7ec0:	4607      	mov	r7, r0
    7ec2:	2100      	movs	r1, #0
    7ec4:	f005 f95f 	bl	d186 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7ec8:	1e04      	subs	r4, r0, #0
    7eca:	d04f      	beq.n	7f6c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    7ecc:	f894 0070 	ldrb.w	r0, [r4, #112]	; 0x70
    7ed0:	2800      	cmp	r0, #0
    7ed2:	d04b      	beq.n	7f6c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    7ed4:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    7ed8:	f88d 0000 	strb.w	r0, [sp]
    7edc:	9800      	ldr	r0, [sp, #0]
    7ede:	9000      	str	r0, [sp, #0]
    7ee0:	f89d 0000 	ldrb.w	r0, [sp]
    7ee4:	2600      	movs	r6, #0
    7ee6:	b1d8      	cbz	r0, 7f20 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x64>
    7ee8:	706e      	strb	r6, [r5, #1]
    7eea:	2007      	movs	r0, #7
    7eec:	7028      	strb	r0, [r5, #0]
    7eee:	e00b      	b.n	7f08 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x4c>
    7ef0:	f884 61b0 	strb.w	r6, [r4, #432]	; 0x1b0
    7ef4:	8466      	strh	r6, [r4, #34]	; 0x22
    7ef6:	f8d4 01b2 	ldr.w	r0, [r4, #434]	; 0x1b2
    7efa:	6068      	str	r0, [r5, #4]
    7efc:	f8d4 01b6 	ldr.w	r0, [r4, #438]	; 0x1b6
    7f00:	60a8      	str	r0, [r5, #8]
    7f02:	f8b4 01ba 	ldrh.w	r0, [r4, #442]	; 0x1ba
    7f06:	81a8      	strh	r0, [r5, #12]
    7f08:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    7f0c:	f88d 0000 	strb.w	r0, [sp]
    7f10:	9800      	ldr	r0, [sp, #0]
    7f12:	9000      	str	r0, [sp, #0]
    7f14:	f89d 0000 	ldrb.w	r0, [sp]
    7f18:	2800      	cmp	r0, #0
    7f1a:	d1e9      	bne.n	7ef0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x34>
    7f1c:	712e      	strb	r6, [r5, #4]
    7f1e:	e10b      	b.n	8138 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x138>
    7f20:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
    7f24:	b3a0      	cbz	r0, 7f90 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd4>
    7f26:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
    7f2a:	280b      	cmp	r0, #11
    7f2c:	d016      	beq.n	7f5c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xa0>
    7f2e:	280c      	cmp	r0, #12
    7f30:	d004      	beq.n	7f3c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x80>
    7f32:	f640 21ce 	movw	r1, #2766	; 0xace
    7f36:	2031      	movs	r0, #49	; 0x31
    7f38:	f7fb ff10 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f3c:	8820      	ldrh	r0, [r4, #0]
    7f3e:	f7fc fb1d 	bl	457c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7f42:	4607      	mov	r7, r0
    7f44:	f004 ffda 	bl	cefc <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    7f48:	b978      	cbnz	r0, 7f6a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xae>
    7f4a:	706e      	strb	r6, [r5, #1]
    7f4c:	200c      	movs	r0, #12
    7f4e:	7028      	strb	r0, [r5, #0]
    7f50:	f894 01be 	ldrb.w	r0, [r4, #446]	; 0x1be
    7f54:	7128      	strb	r0, [r5, #4]
    7f56:	8820      	ldrh	r0, [r4, #0]
    7f58:	80e8      	strh	r0, [r5, #6]
    7f5a:	e013      	b.n	7f84 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xc8>
    7f5c:	8820      	ldrh	r0, [r4, #0]
    7f5e:	f7fc fb0d 	bl	457c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7f62:	4607      	mov	r7, r0
    7f64:	f004 ffca 	bl	cefc <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    7f68:	b108      	cbz	r0, 7f6e <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb2>
    7f6a:	2000      	movs	r0, #0
    7f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7f6e:	706e      	strb	r6, [r5, #1]
    7f70:	200b      	movs	r0, #11
    7f72:	7028      	strb	r0, [r5, #0]
    7f74:	f894 01be 	ldrb.w	r0, [r4, #446]	; 0x1be
    7f78:	7128      	strb	r0, [r5, #4]
    7f7a:	8820      	ldrh	r0, [r4, #0]
    7f7c:	80e8      	strh	r0, [r5, #6]
    7f7e:	f894 01c2 	ldrb.w	r0, [r4, #450]	; 0x1c2
    7f82:	7228      	strb	r0, [r5, #8]
    7f84:	f884 61bc 	strb.w	r6, [r4, #444]	; 0x1bc
    7f88:	4638      	mov	r0, r7
    7f8a:	f004 ffcc 	bl	cf26 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    7f8e:	e0d3      	b.n	8138 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x138>
    7f90:	e7ff      	b.n	7f92 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd6>
    7f92:	f894 01f2 	ldrb.w	r0, [r4, #498]	; 0x1f2
    7f96:	f88d 0000 	strb.w	r0, [sp]
    7f9a:	9800      	ldr	r0, [sp, #0]
    7f9c:	9000      	str	r0, [sp, #0]
    7f9e:	f89d 0000 	ldrb.w	r0, [sp]
    7fa2:	b130      	cbz	r0, 7fb2 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xf6>
    7fa4:	706e      	strb	r6, [r5, #1]
    7fa6:	200e      	movs	r0, #14
    7fa8:	7028      	strb	r0, [r5, #0]
    7faa:	80af      	strh	r7, [r5, #4]
    7fac:	f884 61f2 	strb.w	r6, [r4, #498]	; 0x1f2
    7fb0:	e0c2      	b.n	8138 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x138>
    7fb2:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    7fb6:	f88d 0000 	strb.w	r0, [sp]
    7fba:	9800      	ldr	r0, [sp, #0]
    7fbc:	9000      	str	r0, [sp, #0]
    7fbe:	f89d 0000 	ldrb.w	r0, [sp]
    7fc2:	b198      	cbz	r0, 7fec <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x130>
    7fc4:	706e      	strb	r6, [r5, #1]
    7fc6:	2008      	movs	r0, #8
    7fc8:	7028      	strb	r0, [r5, #0]
    7fca:	8820      	ldrh	r0, [r4, #0]
    7fcc:	80a8      	strh	r0, [r5, #4]
    7fce:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
    7fd2:	f8c5 1006 	str.w	r1, [r5, #6]
    7fd6:	f8d4 11cc 	ldr.w	r1, [r4, #460]	; 0x1cc
    7fda:	f8c5 100a 	str.w	r1, [r5, #10]
    7fde:	f8b4 01d0 	ldrh.w	r0, [r4, #464]	; 0x1d0
    7fe2:	81e8      	strh	r0, [r5, #14]
    7fe4:	f504 74e2 	add.w	r4, r4, #452	; 0x1c4
    7fe8:	7026      	strb	r6, [r4, #0]
    7fea:	e0a5      	b.n	8138 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x138>
    7fec:	f894 01ec 	ldrb.w	r0, [r4, #492]	; 0x1ec
    7ff0:	f88d 0000 	strb.w	r0, [sp]
    7ff4:	9800      	ldr	r0, [sp, #0]
    7ff6:	9000      	str	r0, [sp, #0]
    7ff8:	f89d 0000 	ldrb.w	r0, [sp]
    7ffc:	b1a0      	cbz	r0, 8028 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x28>
    7ffe:	706e      	strb	r6, [r5, #1]
    8000:	2016      	movs	r0, #22
    8002:	7028      	strb	r0, [r5, #0]
    8004:	e005      	b.n	8012 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12>
    8006:	bf00      	nop
    8008:	f884 61ec 	strb.w	r6, [r4, #492]	; 0x1ec
    800c:	f8d4 01ee 	ldr.w	r0, [r4, #494]	; 0x1ee
    8010:	6068      	str	r0, [r5, #4]
    8012:	f894 01ec 	ldrb.w	r0, [r4, #492]	; 0x1ec
    8016:	f88d 0000 	strb.w	r0, [sp]
    801a:	9800      	ldr	r0, [sp, #0]
    801c:	9000      	str	r0, [sp, #0]
    801e:	f89d 0000 	ldrb.w	r0, [sp]
    8022:	2800      	cmp	r0, #0
    8024:	d1f0      	bne.n	8008 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8>
    8026:	e087      	b.n	8138 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x138>
    8028:	f894 0202 	ldrb.w	r0, [r4, #514]	; 0x202
    802c:	f88d 0000 	strb.w	r0, [sp]
    8030:	9800      	ldr	r0, [sp, #0]
    8032:	9000      	str	r0, [sp, #0]
    8034:	f89d 0000 	ldrb.w	r0, [sp]
    8038:	b170      	cbz	r0, 8058 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x58>
    803a:	706e      	strb	r6, [r5, #1]
    803c:	2006      	movs	r0, #6
    803e:	7028      	strb	r0, [r5, #0]
    8040:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
    8044:	6068      	str	r0, [r5, #4]
    8046:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
    804a:	60a8      	str	r0, [r5, #8]
    804c:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
    8050:	60e8      	str	r0, [r5, #12]
    8052:	f504 7401 	add.w	r4, r4, #516	; 0x204
    8056:	e03a      	b.n	80ce <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xce>
    8058:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
    805c:	f88d 0000 	strb.w	r0, [sp]
    8060:	9800      	ldr	r0, [sp, #0]
    8062:	9000      	str	r0, [sp, #0]
    8064:	f89d 0000 	ldrb.w	r0, [sp]
    8068:	b1d0      	cbz	r0, 80a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa0>
    806a:	706e      	strb	r6, [r5, #1]
    806c:	2012      	movs	r0, #18
    806e:	7028      	strb	r0, [r5, #0]
    8070:	e00b      	b.n	808a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8a>
    8072:	bf00      	nop
    8074:	f884 61d2 	strb.w	r6, [r4, #466]	; 0x1d2
    8078:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
    807c:	6068      	str	r0, [r5, #4]
    807e:	f8d4 01d8 	ldr.w	r0, [r4, #472]	; 0x1d8
    8082:	60a8      	str	r0, [r5, #8]
    8084:	f8d4 01dc 	ldr.w	r0, [r4, #476]	; 0x1dc
    8088:	60e8      	str	r0, [r5, #12]
    808a:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
    808e:	f88d 0000 	strb.w	r0, [sp]
    8092:	9800      	ldr	r0, [sp, #0]
    8094:	9000      	str	r0, [sp, #0]
    8096:	f89d 0000 	ldrb.w	r0, [sp]
    809a:	2800      	cmp	r0, #0
    809c:	d1ea      	bne.n	8074 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x74>
    809e:	e04b      	b.n	8138 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x138>
    80a0:	f894 01e0 	ldrb.w	r0, [r4, #480]	; 0x1e0
    80a4:	f88d 0000 	strb.w	r0, [sp]
    80a8:	9800      	ldr	r0, [sp, #0]
    80aa:	9000      	str	r0, [sp, #0]
    80ac:	f89d 0000 	ldrb.w	r0, [sp]
    80b0:	b180      	cbz	r0, 80d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd4>
    80b2:	706e      	strb	r6, [r5, #1]
    80b4:	2018      	movs	r0, #24
    80b6:	7028      	strb	r0, [r5, #0]
    80b8:	f8d4 01e2 	ldr.w	r0, [r4, #482]	; 0x1e2
    80bc:	6068      	str	r0, [r5, #4]
    80be:	f8d4 01e6 	ldr.w	r0, [r4, #486]	; 0x1e6
    80c2:	60a8      	str	r0, [r5, #8]
    80c4:	f8b4 01ea 	ldrh.w	r0, [r4, #490]	; 0x1ea
    80c8:	81a8      	strh	r0, [r5, #12]
    80ca:	f504 74f1 	add.w	r4, r4, #482	; 0x1e2
    80ce:	f804 6c02 	strb.w	r6, [r4, #-2]
    80d2:	e031      	b.n	8138 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x138>
    80d4:	f894 01f4 	ldrb.w	r0, [r4, #500]	; 0x1f4
    80d8:	f88d 0000 	strb.w	r0, [sp]
    80dc:	9800      	ldr	r0, [sp, #0]
    80de:	9000      	str	r0, [sp, #0]
    80e0:	f89d 0000 	ldrb.w	r0, [sp]
    80e4:	b138      	cbz	r0, 80f6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf6>
    80e6:	2019      	movs	r0, #25
    80e8:	7028      	strb	r0, [r5, #0]
    80ea:	f8d4 01f6 	ldr.w	r0, [r4, #502]	; 0x1f6
    80ee:	6068      	str	r0, [r5, #4]
    80f0:	f884 61f4 	strb.w	r6, [r4, #500]	; 0x1f4
    80f4:	e020      	b.n	8138 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x138>
    80f6:	f894 01fa 	ldrb.w	r0, [r4, #506]	; 0x1fa
    80fa:	f88d 0000 	strb.w	r0, [sp]
    80fe:	9800      	ldr	r0, [sp, #0]
    8100:	9000      	str	r0, [sp, #0]
    8102:	f89d 0000 	ldrb.w	r0, [sp]
    8106:	2800      	cmp	r0, #0
    8108:	f43f af30 	beq.w	7f6c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    810c:	706e      	strb	r6, [r5, #1]
    810e:	2013      	movs	r0, #19
    8110:	7028      	strb	r0, [r5, #0]
    8112:	e007      	b.n	8124 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x124>
    8114:	f884 61fa 	strb.w	r6, [r4, #506]	; 0x1fa
    8118:	f8d4 01fc 	ldr.w	r0, [r4, #508]	; 0x1fc
    811c:	6068      	str	r0, [r5, #4]
    811e:	f8b4 0200 	ldrh.w	r0, [r4, #512]	; 0x200
    8122:	8128      	strh	r0, [r5, #8]
    8124:	f894 01fa 	ldrb.w	r0, [r4, #506]	; 0x1fa
    8128:	f88d 0000 	strb.w	r0, [sp]
    812c:	9800      	ldr	r0, [sp, #0]
    812e:	9000      	str	r0, [sp, #0]
    8130:	f89d 0000 	ldrb.w	r0, [sp]
    8134:	2800      	cmp	r0, #0
    8136:	d1ed      	bne.n	8114 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x114>
    8138:	2001      	movs	r0, #1
    813a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000813c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    813c:	491b      	ldr	r1, [pc, #108]	; (81ac <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x70>)
    813e:	7088      	strb	r0, [r1, #2]
    8140:	481c      	ldr	r0, [pc, #112]	; (81b4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    8142:	491b      	ldr	r1, [pc, #108]	; (81b0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x74>)
    8144:	6081      	str	r1, [r0, #8]
    8146:	491c      	ldr	r1, [pc, #112]	; (81b8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    8148:	6041      	str	r1, [r0, #4]
    814a:	491c      	ldr	r1, [pc, #112]	; (81bc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    814c:	6001      	str	r1, [r0, #0]
    814e:	491c      	ldr	r1, [pc, #112]	; (81c0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    8150:	6281      	str	r1, [r0, #40]	; 0x28
    8152:	491c      	ldr	r1, [pc, #112]	; (81c4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    8154:	62c1      	str	r1, [r0, #44]	; 0x2c
    8156:	491c      	ldr	r1, [pc, #112]	; (81c8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    8158:	60c1      	str	r1, [r0, #12]
    815a:	491c      	ldr	r1, [pc, #112]	; (81cc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    815c:	6181      	str	r1, [r0, #24]
    815e:	491c      	ldr	r1, [pc, #112]	; (81d0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    8160:	6301      	str	r1, [r0, #48]	; 0x30
    8162:	491c      	ldr	r1, [pc, #112]	; (81d4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    8164:	6201      	str	r1, [r0, #32]
    8166:	491c      	ldr	r1, [pc, #112]	; (81d8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    8168:	64c1      	str	r1, [r0, #76]	; 0x4c
    816a:	491c      	ldr	r1, [pc, #112]	; (81dc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    816c:	6481      	str	r1, [r0, #72]	; 0x48
    816e:	491c      	ldr	r1, [pc, #112]	; (81e0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    8170:	6441      	str	r1, [r0, #68]	; 0x44
    8172:	491c      	ldr	r1, [pc, #112]	; (81e4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    8174:	6341      	str	r1, [r0, #52]	; 0x34
    8176:	491c      	ldr	r1, [pc, #112]	; (81e8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    8178:	61c1      	str	r1, [r0, #28]
    817a:	481d      	ldr	r0, [pc, #116]	; (81f0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    817c:	491b      	ldr	r1, [pc, #108]	; (81ec <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    817e:	6081      	str	r1, [r0, #8]
    8180:	491c      	ldr	r1, [pc, #112]	; (81f4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    8182:	61c1      	str	r1, [r0, #28]
    8184:	491c      	ldr	r1, [pc, #112]	; (81f8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    8186:	6241      	str	r1, [r0, #36]	; 0x24
    8188:	491c      	ldr	r1, [pc, #112]	; (81fc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    818a:	62c1      	str	r1, [r0, #44]	; 0x2c
    818c:	491c      	ldr	r1, [pc, #112]	; (8200 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    818e:	6101      	str	r1, [r0, #16]
    8190:	491c      	ldr	r1, [pc, #112]	; (8204 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    8192:	6141      	str	r1, [r0, #20]
    8194:	491c      	ldr	r1, [pc, #112]	; (8208 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    8196:	6441      	str	r1, [r0, #68]	; 0x44
    8198:	6341      	str	r1, [r0, #52]	; 0x34
    819a:	491c      	ldr	r1, [pc, #112]	; (820c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    819c:	6181      	str	r1, [r0, #24]
    819e:	491c      	ldr	r1, [pc, #112]	; (8210 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    81a0:	6301      	str	r1, [r0, #48]	; 0x30
    81a2:	491c      	ldr	r1, [pc, #112]	; (8214 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd8>)
    81a4:	6481      	str	r1, [r0, #72]	; 0x48
    81a6:	491c      	ldr	r1, [pc, #112]	; (8218 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xdc>)
    81a8:	64c1      	str	r1, [r0, #76]	; 0x4c
    81aa:	4770      	bx	lr
    81ac:	20000124 	.word	0x20000124
    81b0:	000097a5 	.word	0x000097a5
    81b4:	20000138 	.word	0x20000138
    81b8:	00009101 	.word	0x00009101
    81bc:	0000915d 	.word	0x0000915d
    81c0:	000094c9 	.word	0x000094c9
    81c4:	0000950d 	.word	0x0000950d
    81c8:	00009209 	.word	0x00009209
    81cc:	0000977d 	.word	0x0000977d
    81d0:	000098c1 	.word	0x000098c1
    81d4:	000092b9 	.word	0x000092b9
    81d8:	0000949d 	.word	0x0000949d
    81dc:	00009471 	.word	0x00009471
    81e0:	0000973d 	.word	0x0000973d
    81e4:	0000976d 	.word	0x0000976d
    81e8:	000097d9 	.word	0x000097d9
    81ec:	00009c3d 	.word	0x00009c3d
    81f0:	2000019c 	.word	0x2000019c
    81f4:	00009c65 	.word	0x00009c65
    81f8:	00009a25 	.word	0x00009a25
    81fc:	00009afd 	.word	0x00009afd
    8200:	000099f9 	.word	0x000099f9
    8204:	00009ba5 	.word	0x00009ba5
    8208:	00009b81 	.word	0x00009b81
    820c:	00009bc9 	.word	0x00009bc9
    8210:	00009cbd 	.word	0x00009cbd
    8214:	00009ab5 	.word	0x00009ab5
    8218:	00009ae5 	.word	0x00009ae5

0000821c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    821c:	4806      	ldr	r0, [pc, #24]	; (8238 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    821e:	4905      	ldr	r1, [pc, #20]	; (8234 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    8220:	6581      	str	r1, [r0, #88]	; 0x58
    8222:	4906      	ldr	r1, [pc, #24]	; (823c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    8224:	6601      	str	r1, [r0, #96]	; 0x60
    8226:	4807      	ldr	r0, [pc, #28]	; (8244 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    8228:	4905      	ldr	r1, [pc, #20]	; (8240 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    822a:	6581      	str	r1, [r0, #88]	; 0x58
    822c:	4906      	ldr	r1, [pc, #24]	; (8248 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    822e:	65c1      	str	r1, [r0, #92]	; 0x5c
    8230:	4770      	bx	lr
    8232:	0000      	.short	0x0000
    8234:	0000952d 	.word	0x0000952d
    8238:	20000138 	.word	0x20000138
    823c:	000095f9 	.word	0x000095f9
    8240:	00009b29 	.word	0x00009b29
    8244:	2000019c 	.word	0x2000019c
    8248:	00009b59 	.word	0x00009b59

0000824c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    824c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8250:	2701      	movs	r7, #1
    8252:	4c72      	ldr	r4, [pc, #456]	; (841c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d0>)
    8254:	2500      	movs	r5, #0
    8256:	f367 0107 	bfi	r1, r7, #0, #8
    825a:	80a5      	strh	r5, [r4, #4]
    825c:	7065      	strb	r5, [r4, #1]
    825e:	7025      	strb	r5, [r4, #0]
    8260:	60a0      	str	r0, [r4, #8]
    8262:	4689      	mov	r9, r1
    8264:	4680      	mov	r8, r0
    8266:	f880 70fb 	strb.w	r7, [r0, #251]	; 0xfb
    826a:	8800      	ldrh	r0, [r0, #0]
    826c:	f7fc f99c 	bl	45a8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    8270:	b180      	cbz	r0, 8294 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x48>
    8272:	68a0      	ldr	r0, [r4, #8]
    8274:	8800      	ldrh	r0, [r0, #0]
    8276:	f7fc fbbb 	bl	49f0 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    827a:	68a0      	ldr	r0, [r4, #8]
    827c:	8800      	ldrh	r0, [r0, #0]
    827e:	f7fc fb5f 	bl	4940 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    8282:	68a0      	ldr	r0, [r4, #8]
    8284:	f8b0 10f2 	ldrh.w	r1, [r0, #242]	; 0xf2
    8288:	b1a9      	cbz	r1, 82b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a>
    828a:	3070      	adds	r0, #112	; 0x70
    828c:	f006 fa22 	bl	e6d4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8290:	b128      	cbz	r0, 829e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x52>
    8292:	e010      	b.n	82b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a>
    8294:	f640 31ab 	movw	r1, #2987	; 0xbab
    8298:	2031      	movs	r0, #49	; 0x31
    829a:	f7fb fd5f 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    829e:	68a0      	ldr	r0, [r4, #8]
    82a0:	f890 1170 	ldrb.w	r1, [r0, #368]	; 0x170
    82a4:	b139      	cbz	r1, 82b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a>
    82a6:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    82aa:	2301      	movs	r3, #1
    82ac:	4619      	mov	r1, r3
    82ae:	3070      	adds	r0, #112	; 0x70
    82b0:	f005 f8cb 	bl	d44a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    82b4:	b180      	cbz	r0, 82d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8c>
    82b6:	68a0      	ldr	r0, [r4, #8]
    82b8:	3070      	adds	r0, #112	; 0x70
    82ba:	f006 fa0b 	bl	e6d4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    82be:	b128      	cbz	r0, 82cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    82c0:	68a0      	ldr	r0, [r4, #8]
    82c2:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
    82c6:	bf00      	nop
    82c8:	f000 fb86 	bl	89d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x78c>
    82cc:	68a0      	ldr	r0, [r4, #8]
    82ce:	f890 10fd 	ldrb.w	r1, [r0, #253]	; 0xfd
    82d2:	b189      	cbz	r1, 82f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xac>
    82d4:	80e5      	strh	r5, [r4, #6]
    82d6:	e01e      	b.n	8316 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca>
    82d8:	68a0      	ldr	r0, [r4, #8]
    82da:	f8a0 50a0 	strh.w	r5, [r0, #160]	; 0xa0
    82de:	f890 1171 	ldrb.w	r1, [r0, #369]	; 0x171
    82e2:	f880 10e6 	strb.w	r1, [r0, #230]	; 0xe6
    82e6:	2100      	movs	r1, #0
    82e8:	2002      	movs	r0, #2
    82ea:	f000 fe03 	bl	8ef4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    82ee:	68a0      	ldr	r0, [r4, #8]
    82f0:	f880 50fa 	strb.w	r5, [r0, #250]	; 0xfa
    82f4:	2002      	movs	r0, #2
    82f6:	e7e7      	b.n	82c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7c>
    82f8:	f890 11b0 	ldrb.w	r1, [r0, #432]	; 0x1b0
    82fc:	f88d 1000 	strb.w	r1, [sp]
    8300:	9900      	ldr	r1, [sp, #0]
    8302:	9100      	str	r1, [sp, #0]
    8304:	f89d 1000 	ldrb.w	r1, [sp]
    8308:	b919      	cbnz	r1, 8312 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6>
    830a:	8c41      	ldrh	r1, [r0, #34]	; 0x22
    830c:	8902      	ldrh	r2, [r0, #8]
    830e:	4291      	cmp	r1, r2
    8310:	d800      	bhi.n	8314 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc8>
    8312:	8901      	ldrh	r1, [r0, #8]
    8314:	80e1      	strh	r1, [r4, #6]
    8316:	f830 1ff6 	ldrh.w	r1, [r0, #246]!
    831a:	1e49      	subs	r1, r1, #1
    831c:	b28e      	uxth	r6, r1
    831e:	f830 1f02 	ldrh.w	r1, [r0, #2]!
    8322:	4431      	add	r1, r6
    8324:	f820 195c 	strh.w	r1, [r0], #-92
    8328:	8801      	ldrh	r1, [r0, #0]
    832a:	4431      	add	r1, r6
    832c:	8001      	strh	r1, [r0, #0]
    832e:	f001 fcf3 	bl	9d18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1acc>
    8332:	b120      	cbz	r0, 833e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf2>
    8334:	68a0      	ldr	r0, [r4, #8]
    8336:	f850 1f90 	ldr.w	r1, [r0, #144]!
    833a:	4431      	add	r1, r6
    833c:	6001      	str	r1, [r0, #0]
    833e:	68a0      	ldr	r0, [r4, #8]
    8340:	f8b0 10f2 	ldrh.w	r1, [r0, #242]	; 0xf2
    8344:	2901      	cmp	r1, #1
    8346:	d802      	bhi.n	834e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x102>
    8348:	1c49      	adds	r1, r1, #1
    834a:	f8a0 10f2 	strh.w	r1, [r0, #242]	; 0xf2
    834e:	b10e      	cbz	r6, 8354 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x108>
    8350:	f880 5104 	strb.w	r5, [r0, #260]	; 0x104
    8354:	f880 50fa 	strb.w	r5, [r0, #250]	; 0xfa
    8358:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    835c:	290b      	cmp	r1, #11
    835e:	d001      	beq.n	8364 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x118>
    8360:	290c      	cmp	r1, #12
    8362:	d116      	bne.n	8392 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x146>
    8364:	f8b0 2074 	ldrh.w	r2, [r0, #116]	; 0x74
    8368:	f8b0 318c 	ldrh.w	r3, [r0, #396]	; 0x18c
    836c:	1ad2      	subs	r2, r2, r3
    836e:	b212      	sxth	r2, r2
    8370:	2a00      	cmp	r2, #0
    8372:	db0e      	blt.n	8392 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x146>
    8374:	f8d0 118e 	ldr.w	r1, [r0, #398]	; 0x18e
    8378:	60c1      	str	r1, [r0, #12]
    837a:	f890 1192 	ldrb.w	r1, [r0, #402]	; 0x192
    837e:	7401      	strb	r1, [r0, #16]
    8380:	2103      	movs	r1, #3
    8382:	f7fd fbab 	bl	5adc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    8386:	68a0      	ldr	r0, [r4, #8]
    8388:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
    838c:	f880 70b6 	strb.w	r7, [r0, #182]	; 0xb6
    8390:	e024      	b.n	83dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190>
    8392:	2924      	cmp	r1, #36	; 0x24
    8394:	d10f      	bne.n	83b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16a>
    8396:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
    839a:	f8b0 218c 	ldrh.w	r2, [r0, #396]	; 0x18c
    839e:	1a89      	subs	r1, r1, r2
    83a0:	b209      	sxth	r1, r1
    83a2:	2900      	cmp	r1, #0
    83a4:	db07      	blt.n	83b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16a>
    83a6:	f000 fe51 	bl	904c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe00>
    83aa:	68a0      	ldr	r0, [r4, #8]
    83ac:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
    83b0:	f880 51a6 	strb.w	r5, [r0, #422]	; 0x1a6
    83b4:	e012      	b.n	83dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190>
    83b6:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    83ba:	2924      	cmp	r1, #36	; 0x24
    83bc:	d001      	beq.n	83c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x176>
    83be:	2925      	cmp	r1, #37	; 0x25
    83c0:	d10c      	bne.n	83dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190>
    83c2:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
    83c6:	f8b0 018c 	ldrh.w	r0, [r0, #396]	; 0x18c
    83ca:	1a08      	subs	r0, r1, r0
    83cc:	b200      	sxth	r0, r0
    83ce:	2800      	cmp	r0, #0
    83d0:	db04      	blt.n	83dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190>
    83d2:	f000 fe3b 	bl	904c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe00>
    83d6:	68a0      	ldr	r0, [r4, #8]
    83d8:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
    83dc:	68a0      	ldr	r0, [r4, #8]
    83de:	4601      	mov	r1, r0
    83e0:	f8b0 20f6 	ldrh.w	r2, [r0, #246]	; 0xf6
    83e4:	3070      	adds	r0, #112	; 0x70
    83e6:	f005 f8c9 	bl	d57c <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA>
    83ea:	480d      	ldr	r0, [pc, #52]	; (8420 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d4>)
    83ec:	9000      	str	r0, [sp, #0]
    83ee:	4b0d      	ldr	r3, [pc, #52]	; (8424 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d8>)
    83f0:	4a0d      	ldr	r2, [pc, #52]	; (8428 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dc>)
    83f2:	4641      	mov	r1, r8
    83f4:	4648      	mov	r0, r9
    83f6:	f7fc fbb3 	bl	4b60 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    83fa:	68a0      	ldr	r0, [r4, #8]
    83fc:	2301      	movs	r3, #1
    83fe:	2105      	movs	r1, #5
    8400:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8404:	3070      	adds	r0, #112	; 0x70
    8406:	f005 f820 	bl	d44a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    840a:	2800      	cmp	r0, #0
    840c:	d003      	beq.n	8416 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ca>
    840e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8412:	f7fc bb9f 	b.w	4b54 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    8416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    841a:	0000      	.short	0x0000
    841c:	20000124 	.word	0x20000124
    8420:	00008b89 	.word	0x00008b89
    8424:	000086a1 	.word	0x000086a1
    8428:	00008f99 	.word	0x00008f99
    842c:	b570      	push	{r4, r5, r6, lr}
    842e:	4c0f      	ldr	r4, [pc, #60]	; (846c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x220>)
    8430:	68a5      	ldr	r5, [r4, #8]
    8432:	f895 107d 	ldrb.w	r1, [r5, #125]	; 0x7d
    8436:	2920      	cmp	r1, #32
    8438:	d002      	beq.n	8440 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4>
    843a:	2926      	cmp	r1, #38	; 0x26
    843c:	d003      	beq.n	8446 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fa>
    843e:	e011      	b.n	8464 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x218>
    8440:	f000 fe3a 	bl	90b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    8444:	e008      	b.n	8458 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x20c>
    8446:	f895 207e 	ldrb.w	r2, [r5, #126]	; 0x7e
    844a:	2301      	movs	r3, #1
    844c:	210b      	movs	r1, #11
    844e:	f105 0070 	add.w	r0, r5, #112	; 0x70
    8452:	f004 fffa 	bl	d44a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8456:	b138      	cbz	r0, 8468 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    8458:	68a1      	ldr	r1, [r4, #8]
    845a:	2000      	movs	r0, #0
    845c:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    8460:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    8464:	2000      	movs	r0, #0
    8466:	bd70      	pop	{r4, r5, r6, pc}
    8468:	202a      	movs	r0, #42	; 0x2a
    846a:	e7e9      	b.n	8440 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4>
    846c:	20000124 	.word	0x20000124
    8470:	4804      	ldr	r0, [pc, #16]	; (8484 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x238>)
    8472:	2100      	movs	r1, #0
    8474:	6880      	ldr	r0, [r0, #8]
    8476:	f820 1fa8 	strh.w	r1, [r0, #168]!
    847a:	7881      	ldrb	r1, [r0, #2]
    847c:	1c49      	adds	r1, r1, #1
    847e:	7081      	strb	r1, [r0, #2]
    8480:	4770      	bx	lr
    8482:	0000      	.short	0x0000
    8484:	20000124 	.word	0x20000124
    8488:	4807      	ldr	r0, [pc, #28]	; (84a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x25c>)
    848a:	b510      	push	{r4, lr}
    848c:	6881      	ldr	r1, [r0, #8]
    848e:	f811 0faa 	ldrb.w	r0, [r1, #170]!
    8492:	1e40      	subs	r0, r0, #1
    8494:	b240      	sxtb	r0, r0
    8496:	7008      	strb	r0, [r1, #0]
    8498:	2800      	cmp	r0, #0
    849a:	da04      	bge.n	84a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x25a>
    849c:	f240 118f 	movw	r1, #399	; 0x18f
    84a0:	2031      	movs	r0, #49	; 0x31
    84a2:	f7fb fc5b 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    84a6:	bd10      	pop	{r4, pc}
    84a8:	20000124 	.word	0x20000124
    84ac:	4917      	ldr	r1, [pc, #92]	; (850c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c0>)
    84ae:	b510      	push	{r4, lr}
    84b0:	6889      	ldr	r1, [r1, #8]
    84b2:	f891 207e 	ldrb.w	r2, [r1, #126]	; 0x7e
    84b6:	b1b8      	cbz	r0, 84e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x29c>
    84b8:	2a10      	cmp	r2, #16
    84ba:	d006      	beq.n	84ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27e>
    84bc:	2a14      	cmp	r2, #20
    84be:	d007      	beq.n	84d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x284>
    84c0:	2a15      	cmp	r2, #21
    84c2:	d008      	beq.n	84d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x28a>
    84c4:	2a1b      	cmp	r2, #27
    84c6:	d11c      	bne.n	8502 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b6>
    84c8:	e008      	b.n	84dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x290>
    84ca:	2101      	movs	r1, #1
    84cc:	200b      	movs	r0, #11
    84ce:	e007      	b.n	84e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x294>
    84d0:	f001 fa54 	bl	997c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1730>
    84d4:	e006      	b.n	84e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x298>
    84d6:	f000 fd2b 	bl	8f30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce4>
    84da:	e003      	b.n	84e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x298>
    84dc:	2101      	movs	r1, #1
    84de:	2006      	movs	r0, #6
    84e0:	f000 fd08 	bl	8ef4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    84e4:	2001      	movs	r0, #1
    84e6:	bd10      	pop	{r4, pc}
    84e8:	2a21      	cmp	r2, #33	; 0x21
    84ea:	d10a      	bne.n	8502 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b6>
    84ec:	f891 01a6 	ldrb.w	r0, [r1, #422]	; 0x1a6
    84f0:	2802      	cmp	r0, #2
    84f2:	d008      	beq.n	8506 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ba>
    84f4:	f891 01a6 	ldrb.w	r0, [r1, #422]	; 0x1a6
    84f8:	2801      	cmp	r0, #1
    84fa:	d102      	bne.n	8502 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b6>
    84fc:	f891 01a7 	ldrb.w	r0, [r1, #423]	; 0x1a7
    8500:	b108      	cbz	r0, 8506 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ba>
    8502:	2000      	movs	r0, #0
    8504:	bd10      	pop	{r4, pc}
    8506:	2101      	movs	r1, #1
    8508:	2017      	movs	r0, #23
    850a:	e7e9      	b.n	84e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x294>
    850c:	20000124 	.word	0x20000124
    8510:	b510      	push	{r4, lr}
    8512:	bbe8      	cbnz	r0, 8590 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x344>
    8514:	4c31      	ldr	r4, [pc, #196]	; (85dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x390>)
    8516:	68a0      	ldr	r0, [r4, #8]
    8518:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    851c:	07ca      	lsls	r2, r1, #31
    851e:	d002      	beq.n	8526 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2da>
    8520:	2101      	movs	r1, #1
    8522:	2009      	movs	r0, #9
    8524:	e052      	b.n	85cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x380>
    8526:	078a      	lsls	r2, r1, #30
    8528:	d50a      	bpl.n	8540 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f4>
    852a:	2101      	movs	r1, #1
    852c:	200c      	movs	r0, #12
    852e:	f000 fce1 	bl	8ef4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    8532:	68a0      	ldr	r0, [r4, #8]
    8534:	f810 1fae 	ldrb.w	r1, [r0, #174]!
    8538:	f041 0101 	orr.w	r1, r1, #1
    853c:	7001      	strb	r1, [r0, #0]
    853e:	e047      	b.n	85d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x384>
    8540:	074a      	lsls	r2, r1, #29
    8542:	d502      	bpl.n	854a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2fe>
    8544:	2101      	movs	r1, #1
    8546:	2013      	movs	r0, #19
    8548:	e040      	b.n	85cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x380>
    854a:	070a      	lsls	r2, r1, #28
    854c:	d505      	bpl.n	855a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x30e>
    854e:	f810 1fe1 	ldrb.w	r1, [r0, #225]!
    8552:	7141      	strb	r1, [r0, #5]
    8554:	2101      	movs	r1, #1
    8556:	2007      	movs	r0, #7
    8558:	e038      	b.n	85cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x380>
    855a:	f011 0f30 	tst.w	r1, #48	; 0x30
    855e:	d03b      	beq.n	85d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x38c>
    8560:	f890 119d 	ldrb.w	r1, [r0, #413]	; 0x19d
    8564:	b9a1      	cbnz	r1, 8590 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x344>
    8566:	f890 119c 	ldrb.w	r1, [r0, #412]	; 0x19c
    856a:	b1e1      	cbz	r1, 85a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x35a>
    856c:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8570:	2924      	cmp	r1, #36	; 0x24
    8572:	d02f      	beq.n	85d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x388>
    8574:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    8578:	2924      	cmp	r1, #36	; 0x24
    857a:	d02b      	beq.n	85d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x388>
    857c:	f05f 0300 	movs.w	r3, #0
    8580:	f500 72c7 	add.w	r2, r0, #398	; 0x18e
    8584:	f500 71ce 	add.w	r1, r0, #412	; 0x19c
    8588:	f005 fb8d 	bl	dca6 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    858c:	68a1      	ldr	r1, [r4, #8]
    858e:	e000      	b.n	8592 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x346>
    8590:	e022      	b.n	85d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x38c>
    8592:	f811 0f7f 	ldrb.w	r0, [r1, #127]!
    8596:	f020 0020 	bic.w	r0, r0, #32
    859a:	f040 0010 	orr.w	r0, r0, #16
    859e:	7008      	strb	r0, [r1, #0]
    85a0:	2000      	movs	r0, #0
    85a2:	f881 011d 	strb.w	r0, [r1, #285]	; 0x11d
    85a6:	68a0      	ldr	r0, [r4, #8]
    85a8:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    85ac:	06c9      	lsls	r1, r1, #27
    85ae:	d513      	bpl.n	85d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x38c>
    85b0:	f005 fb94 	bl	dcdc <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    85b4:	f000 f906 	bl	87c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x578>
    85b8:	68a1      	ldr	r1, [r4, #8]
    85ba:	f101 0028 	add.w	r0, r1, #40	; 0x28
    85be:	8bc2      	ldrh	r2, [r0, #30]
    85c0:	f821 2fe6 	strh.w	r2, [r1, #230]!
    85c4:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    85c6:	8048      	strh	r0, [r1, #2]
    85c8:	2101      	movs	r1, #1
    85ca:	2015      	movs	r0, #21
    85cc:	f000 fc92 	bl	8ef4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    85d0:	2001      	movs	r0, #1
    85d2:	bd10      	pop	{r4, pc}
    85d4:	2301      	movs	r3, #1
    85d6:	e7d3      	b.n	8580 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x334>
    85d8:	2000      	movs	r0, #0
    85da:	bd10      	pop	{r4, pc}
    85dc:	20000124 	.word	0x20000124
    85e0:	b570      	push	{r4, r5, r6, lr}
    85e2:	460d      	mov	r5, r1
    85e4:	4606      	mov	r6, r0
    85e6:	f005 f9ab 	bl	d940 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    85ea:	4604      	mov	r4, r0
    85ec:	4630      	mov	r0, r6
    85ee:	f005 f9b3 	bl	d958 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    85f2:	4629      	mov	r1, r5
    85f4:	f000 f81e 	bl	8634 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e8>
    85f8:	b1b8      	cbz	r0, 862a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3de>
    85fa:	4620      	mov	r0, r4
    85fc:	f004 ffd1 	bl	d5a2 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    8600:	0001      	movs	r1, r0
    8602:	d00d      	beq.n	8620 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d4>
    8604:	480a      	ldr	r0, [pc, #40]	; (8630 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e4>)
    8606:	6880      	ldr	r0, [r0, #8]
    8608:	f890 2067 	ldrb.w	r2, [r0, #103]	; 0x67
    860c:	428a      	cmp	r2, r1
    860e:	d007      	beq.n	8620 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d4>
    8610:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    8614:	2901      	cmp	r1, #1
    8616:	d005      	beq.n	8624 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d8>
    8618:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    861c:	4220      	tst	r0, r4
    861e:	d004      	beq.n	862a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3de>
    8620:	2001      	movs	r0, #1
    8622:	bd70      	pop	{r4, r5, r6, pc}
    8624:	f890 01a9 	ldrb.w	r0, [r0, #425]	; 0x1a9
    8628:	e7f8      	b.n	861c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d0>
    862a:	2000      	movs	r0, #0
    862c:	bd70      	pop	{r4, r5, r6, pc}
    862e:	0000      	.short	0x0000
    8630:	20000124 	.word	0x20000124
    8634:	b570      	push	{r4, r5, r6, lr}
    8636:	460d      	mov	r5, r1
    8638:	4604      	mov	r4, r0
    863a:	f004 ffb2 	bl	d5a2 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    863e:	b350      	cbz	r0, 8696 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44a>
    8640:	4916      	ldr	r1, [pc, #88]	; (869c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x450>)
    8642:	6889      	ldr	r1, [r1, #8]
    8644:	f891 2066 	ldrb.w	r2, [r1, #102]	; 0x66
    8648:	4282      	cmp	r2, r0
    864a:	d024      	beq.n	8696 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44a>
    864c:	f891 31a6 	ldrb.w	r3, [r1, #422]	; 0x1a6
    8650:	2b01      	cmp	r3, #1
    8652:	d005      	beq.n	8660 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x414>
    8654:	f891 3062 	ldrb.w	r3, [r1, #98]	; 0x62
    8658:	4223      	tst	r3, r4
    865a:	d013      	beq.n	8684 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x438>
    865c:	b11d      	cbz	r5, 8666 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x41a>
    865e:	e01a      	b.n	8696 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44a>
    8660:	f891 31a8 	ldrb.w	r3, [r1, #424]	; 0x1a8
    8664:	e7f8      	b.n	8658 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x40c>
    8666:	f891 105f 	ldrb.w	r1, [r1, #95]	; 0x5f
    866a:	4221      	tst	r1, r4
    866c:	d113      	bne.n	8696 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44a>
    866e:	b15a      	cbz	r2, 8688 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x43c>
    8670:	2a04      	cmp	r2, #4
    8672:	d00e      	beq.n	8692 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x446>
    8674:	2804      	cmp	r0, #4
    8676:	d00c      	beq.n	8692 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x446>
    8678:	2a08      	cmp	r2, #8
    867a:	d00a      	beq.n	8692 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x446>
    867c:	2808      	cmp	r0, #8
    867e:	d008      	beq.n	8692 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x446>
    8680:	4282      	cmp	r2, r0
    8682:	d908      	bls.n	8696 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44a>
    8684:	2000      	movs	r0, #0
    8686:	bd70      	pop	{r4, r5, r6, pc}
    8688:	f240 118f 	movw	r1, #399	; 0x18f
    868c:	2006      	movs	r0, #6
    868e:	f7fb fb65 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8692:	4282      	cmp	r2, r0
    8694:	d3f6      	bcc.n	8684 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x438>
    8696:	2001      	movs	r0, #1
    8698:	bd70      	pop	{r4, r5, r6, pc}
    869a:	0000      	.short	0x0000
    869c:	20000124 	.word	0x20000124
    86a0:	490c      	ldr	r1, [pc, #48]	; (86d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x488>)
    86a2:	4602      	mov	r2, r0
    86a4:	7848      	ldrb	r0, [r1, #1]
    86a6:	b998      	cbnz	r0, 86d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x484>
    86a8:	4608      	mov	r0, r1
    86aa:	6880      	ldr	r0, [r0, #8]
    86ac:	b142      	cbz	r2, 86c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x474>
    86ae:	7909      	ldrb	r1, [r1, #4]
    86b0:	0709      	lsls	r1, r1, #28
    86b2:	d503      	bpl.n	86bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x470>
    86b4:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
    86b8:	2808      	cmp	r0, #8
    86ba:	d009      	beq.n	86d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x484>
    86bc:	2001      	movs	r0, #1
    86be:	4770      	bx	lr
    86c0:	f100 0128 	add.w	r1, r0, #40	; 0x28
    86c4:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    86c6:	8e01      	ldrh	r1, [r0, #48]	; 0x30
    86c8:	428a      	cmp	r2, r1
    86ca:	d801      	bhi.n	86d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x484>
    86cc:	f7fe bd60 	b.w	7190 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    86d0:	2000      	movs	r0, #0
    86d2:	4770      	bx	lr
    86d4:	20000124 	.word	0x20000124
    86d8:	b570      	push	{r4, r5, r6, lr}
    86da:	4c39      	ldr	r4, [pc, #228]	; (87c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x574>)
    86dc:	4605      	mov	r5, r0
    86de:	68a0      	ldr	r0, [r4, #8]
    86e0:	3070      	adds	r0, #112	; 0x70
    86e2:	f005 fff7 	bl	e6d4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    86e6:	2800      	cmp	r0, #0
    86e8:	d169      	bne.n	87be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x572>
    86ea:	2d00      	cmp	r5, #0
    86ec:	d167      	bne.n	87be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x572>
    86ee:	68a0      	ldr	r0, [r4, #8]
    86f0:	2301      	movs	r3, #1
    86f2:	4619      	mov	r1, r3
    86f4:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    86f8:	3070      	adds	r0, #112	; 0x70
    86fa:	f004 fea6 	bl	d44a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    86fe:	2800      	cmp	r0, #0
    8700:	d15d      	bne.n	87be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x572>
    8702:	68a0      	ldr	r0, [r4, #8]
    8704:	f890 1170 	ldrb.w	r1, [r0, #368]	; 0x170
    8708:	b149      	cbz	r1, 871e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d2>
    870a:	2100      	movs	r1, #0
    870c:	f8a0 10a0 	strh.w	r1, [r0, #160]	; 0xa0
    8710:	f890 1171 	ldrb.w	r1, [r0, #369]	; 0x171
    8714:	f880 10e6 	strb.w	r1, [r0, #230]	; 0xe6
    8718:	2100      	movs	r1, #0
    871a:	2002      	movs	r0, #2
    871c:	e045      	b.n	87aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x55e>
    871e:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8722:	2301      	movs	r3, #1
    8724:	2104      	movs	r1, #4
    8726:	3070      	adds	r0, #112	; 0x70
    8728:	f004 fe8f 	bl	d44a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    872c:	4605      	mov	r5, r0
    872e:	f7ff feef 	bl	8510 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c4>
    8732:	2800      	cmp	r0, #0
    8734:	d143      	bne.n	87be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x572>
    8736:	4628      	mov	r0, r5
    8738:	f7ff feb8 	bl	84ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x260>
    873c:	2800      	cmp	r0, #0
    873e:	d13e      	bne.n	87be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x572>
    8740:	68a0      	ldr	r0, [r4, #8]
    8742:	2301      	movs	r3, #1
    8744:	2100      	movs	r1, #0
    8746:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    874a:	3070      	adds	r0, #112	; 0x70
    874c:	f004 fe7d 	bl	d44a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8750:	b178      	cbz	r0, 8772 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x526>
    8752:	68a0      	ldr	r0, [r4, #8]
    8754:	2301      	movs	r3, #1
    8756:	2104      	movs	r1, #4
    8758:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    875c:	3070      	adds	r0, #112	; 0x70
    875e:	f004 fe74 	bl	d44a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8762:	b930      	cbnz	r0, 8772 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x526>
    8764:	68a0      	ldr	r0, [r4, #8]
    8766:	f890 009a 	ldrb.w	r0, [r0, #154]	; 0x9a
    876a:	b110      	cbz	r0, 8772 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x526>
    876c:	2100      	movs	r1, #0
    876e:	2012      	movs	r0, #18
    8770:	e01b      	b.n	87aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x55e>
    8772:	68a0      	ldr	r0, [r4, #8]
    8774:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    8778:	290a      	cmp	r1, #10
    877a:	d01a      	beq.n	87b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x566>
    877c:	2d00      	cmp	r5, #0
    877e:	d11e      	bne.n	87be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x572>
    8780:	f000 fb18 	bl	8db4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb68>
    8784:	2800      	cmp	r0, #0
    8786:	d11a      	bne.n	87be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x572>
    8788:	68a0      	ldr	r0, [r4, #8]
    878a:	2301      	movs	r3, #1
    878c:	2100      	movs	r1, #0
    878e:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    8792:	3070      	adds	r0, #112	; 0x70
    8794:	f004 fe59 	bl	d44a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8798:	2800      	cmp	r0, #0
    879a:	d010      	beq.n	87be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x572>
    879c:	68a0      	ldr	r0, [r4, #8]
    879e:	f890 0184 	ldrb.w	r0, [r0, #388]	; 0x184
    87a2:	2800      	cmp	r0, #0
    87a4:	d00b      	beq.n	87be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x572>
    87a6:	2100      	movs	r1, #0
    87a8:	20ff      	movs	r0, #255	; 0xff
    87aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    87ae:	f000 bba1 	b.w	8ef4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    87b2:	f810 1fe2 	ldrb.w	r1, [r0, #226]!
    87b6:	7101      	strb	r1, [r0, #4]
    87b8:	2100      	movs	r1, #0
    87ba:	2007      	movs	r0, #7
    87bc:	e7f5      	b.n	87aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x55e>
    87be:	bd70      	pop	{r4, r5, r6, pc}
    87c0:	20000124 	.word	0x20000124
    87c4:	b510      	push	{r4, lr}
    87c6:	4c0a      	ldr	r4, [pc, #40]	; (87f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5a4>)
    87c8:	68a1      	ldr	r1, [r4, #8]
    87ca:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    87ce:	2801      	cmp	r0, #1
    87d0:	d00a      	beq.n	87e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x59c>
    87d2:	8808      	ldrh	r0, [r1, #0]
    87d4:	f501 72e9 	add.w	r2, r1, #466	; 0x1d2
    87d8:	3128      	adds	r1, #40	; 0x28
    87da:	f005 fa40 	bl	dc5e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    87de:	78a0      	ldrb	r0, [r4, #2]
    87e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    87e4:	f7fb b90a 	b.w	39fc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    87e8:	2002      	movs	r0, #2
    87ea:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    87ee:	bd10      	pop	{r4, pc}
    87f0:	20000124 	.word	0x20000124
    87f4:	b570      	push	{r4, r5, r6, lr}
    87f6:	4c25      	ldr	r4, [pc, #148]	; (888c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x640>)
    87f8:	0005      	movs	r5, r0
    87fa:	d12f      	bne.n	885c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x610>
    87fc:	f000 f8a4 	bl	8948 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fc>
    8800:	f000 f848 	bl	8894 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x648>
    8804:	0005      	movs	r5, r0
    8806:	d129      	bne.n	885c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x610>
    8808:	88a0      	ldrh	r0, [r4, #4]
    880a:	0741      	lsls	r1, r0, #29
    880c:	d506      	bpl.n	881c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d0>
    880e:	68a1      	ldr	r1, [r4, #8]
    8810:	f891 1080 	ldrb.w	r1, [r1, #128]	; 0x80
    8814:	2907      	cmp	r1, #7
    8816:	d101      	bne.n	881c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d0>
    8818:	2101      	movs	r1, #1
    881a:	7021      	strb	r1, [r4, #0]
    881c:	0780      	lsls	r0, r0, #30
    881e:	d512      	bpl.n	8846 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5fa>
    8820:	68e0      	ldr	r0, [r4, #12]
    8822:	78c0      	ldrb	r0, [r0, #3]
    8824:	2819      	cmp	r0, #25
    8826:	d205      	bcs.n	8834 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5e8>
    8828:	4919      	ldr	r1, [pc, #100]	; (8890 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x644>)
    882a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    882e:	b109      	cbz	r1, 8834 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5e8>
    8830:	4788      	blx	r1
    8832:	e008      	b.n	8846 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5fa>
    8834:	28ff      	cmp	r0, #255	; 0xff
    8836:	d004      	beq.n	8842 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5f6>
    8838:	f240 713c 	movw	r1, #1852	; 0x73c
    883c:	2031      	movs	r0, #49	; 0x31
    883e:	f7fb fa8d 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8842:	f001 f8cd 	bl	99e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1794>
    8846:	7920      	ldrb	r0, [r4, #4]
    8848:	06c0      	lsls	r0, r0, #27
    884a:	d507      	bpl.n	885c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x610>
    884c:	68a0      	ldr	r0, [r4, #8]
    884e:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8852:	290b      	cmp	r1, #11
    8854:	d102      	bne.n	885c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x610>
    8856:	210c      	movs	r1, #12
    8858:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    885c:	7860      	ldrb	r0, [r4, #1]
    885e:	0700      	lsls	r0, r0, #28
    8860:	d511      	bpl.n	8886 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63a>
    8862:	68a0      	ldr	r0, [r4, #8]
    8864:	2301      	movs	r3, #1
    8866:	2105      	movs	r1, #5
    8868:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    886c:	3070      	adds	r0, #112	; 0x70
    886e:	f004 fdec 	bl	d44a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8872:	b128      	cbz	r0, 8880 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x634>
    8874:	68a1      	ldr	r1, [r4, #8]
    8876:	2508      	movs	r5, #8
    8878:	2000      	movs	r0, #0
    887a:	f881 01bc 	strb.w	r0, [r1, #444]	; 0x1bc
    887e:	e002      	b.n	8886 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63a>
    8880:	2000      	movs	r0, #0
    8882:	f7fc fa11 	bl	4ca8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    8886:	4628      	mov	r0, r5
    8888:	bd70      	pop	{r4, r5, r6, pc}
    888a:	0000      	.short	0x0000
    888c:	20000124 	.word	0x20000124
    8890:	2000019c 	.word	0x2000019c
    8894:	b570      	push	{r4, r5, r6, lr}
    8896:	4c2a      	ldr	r4, [pc, #168]	; (8940 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6f4>)
    8898:	2000      	movs	r0, #0
    889a:	7921      	ldrb	r1, [r4, #4]
    889c:	07c9      	lsls	r1, r1, #31
    889e:	d015      	beq.n	88cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x680>
    88a0:	6920      	ldr	r0, [r4, #16]
    88a2:	2301      	movs	r3, #1
    88a4:	2105      	movs	r1, #5
    88a6:	78c5      	ldrb	r5, [r0, #3]
    88a8:	68a0      	ldr	r0, [r4, #8]
    88aa:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    88ae:	3070      	adds	r0, #112	; 0x70
    88b0:	f004 fdcb 	bl	d44a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    88b4:	b158      	cbz	r0, 88ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x682>
    88b6:	1ead      	subs	r5, r5, #2
    88b8:	2d0a      	cmp	r5, #10
    88ba:	d206      	bcs.n	88ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x67e>
    88bc:	e8df f005 	tbb	[pc, r5]
    88c0:	05050707 	.word	0x05050707
    88c4:	05050707 	.word	0x05050707
    88c8:	0707      	.short	0x0707
    88ca:	2008      	movs	r0, #8
    88cc:	bd70      	pop	{r4, r5, r6, pc}
    88ce:	6920      	ldr	r0, [r4, #16]
    88d0:	f7fd fa0c 	bl	5cec <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    88d4:	b138      	cbz	r0, 88e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x69a>
    88d6:	6920      	ldr	r0, [r4, #16]
    88d8:	78c5      	ldrb	r5, [r0, #3]
    88da:	b145      	cbz	r5, 88ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a2>
    88dc:	2d01      	cmp	r5, #1
    88de:	d006      	beq.n	88ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a2>
    88e0:	2d16      	cmp	r5, #22
    88e2:	d118      	bne.n	8916 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ca>
    88e4:	e003      	b.n	88ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a2>
    88e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    88ea:	f000 bd0f 	b.w	930c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10c0>
    88ee:	68a0      	ldr	r0, [r4, #8]
    88f0:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    88f4:	f004 fdf7 	bl	d4e6 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    88f8:	b168      	cbz	r0, 8916 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ca>
    88fa:	68a1      	ldr	r1, [r4, #8]
    88fc:	f891 007d 	ldrb.w	r0, [r1, #125]	; 0x7d
    8900:	281f      	cmp	r0, #31
    8902:	d008      	beq.n	8916 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ca>
    8904:	2820      	cmp	r0, #32
    8906:	d003      	beq.n	8910 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c4>
    8908:	2d16      	cmp	r5, #22
    890a:	d00c      	beq.n	8926 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
    890c:	2002      	movs	r0, #2
    890e:	bd70      	pop	{r4, r5, r6, pc}
    8910:	2026      	movs	r0, #38	; 0x26
    8912:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    8916:	2d19      	cmp	r5, #25
    8918:	d207      	bcs.n	892a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6de>
    891a:	480a      	ldr	r0, [pc, #40]	; (8944 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6f8>)
    891c:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    8920:	b118      	cbz	r0, 892a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6de>
    8922:	4780      	blx	r0
    8924:	e003      	b.n	892e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e2>
    8926:	2020      	movs	r0, #32
    8928:	bd70      	pop	{r4, r5, r6, pc}
    892a:	f000 fcef 	bl	930c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10c0>
    892e:	68a2      	ldr	r2, [r4, #8]
    8930:	e9f2 1330 	ldrd	r1, r3, [r2, #192]!	; 0xc0
    8934:	1c49      	adds	r1, r1, #1
    8936:	f143 0300 	adc.w	r3, r3, #0
    893a:	e9c2 1300 	strd	r1, r3, [r2]
    893e:	bd70      	pop	{r4, r5, r6, pc}
    8940:	20000124 	.word	0x20000124
    8944:	20000138 	.word	0x20000138
    8948:	b570      	push	{r4, r5, r6, lr}
    894a:	4c22      	ldr	r4, [pc, #136]	; (89d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x788>)
    894c:	7920      	ldrb	r0, [r4, #4]
    894e:	0700      	lsls	r0, r0, #28
    8950:	d53e      	bpl.n	89d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x784>
    8952:	68a0      	ldr	r0, [r4, #8]
    8954:	3070      	adds	r0, #112	; 0x70
    8956:	f005 febd 	bl	e6d4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    895a:	b148      	cbz	r0, 8970 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x724>
    895c:	68a0      	ldr	r0, [r4, #8]
    895e:	21fe      	movs	r1, #254	; 0xfe
    8960:	2500      	movs	r5, #0
    8962:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
    8966:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    896a:	2919      	cmp	r1, #25
    896c:	d10c      	bne.n	8988 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x73c>
    896e:	e004      	b.n	897a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72e>
    8970:	f240 7146 	movw	r1, #1862	; 0x746
    8974:	2031      	movs	r0, #49	; 0x31
    8976:	f7fb f9f1 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    897a:	f880 50ab 	strb.w	r5, [r0, #171]	; 0xab
    897e:	f7ff fd83 	bl	8488 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>
    8982:	68a0      	ldr	r0, [r4, #8]
    8984:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
    8988:	68a0      	ldr	r0, [r4, #8]
    898a:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    898e:	291f      	cmp	r1, #31
    8990:	d002      	beq.n	8998 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x74c>
    8992:	2927      	cmp	r1, #39	; 0x27
    8994:	d113      	bne.n	89be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x772>
    8996:	e00b      	b.n	89b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x764>
    8998:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    899c:	f004 fda3 	bl	d4e6 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    89a0:	b108      	cbz	r0, 89a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x75a>
    89a2:	2026      	movs	r0, #38	; 0x26
    89a4:	e000      	b.n	89a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x75c>
    89a6:	2020      	movs	r0, #32
    89a8:	68a1      	ldr	r1, [r4, #8]
    89aa:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    89ae:	e006      	b.n	89be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x772>
    89b0:	2101      	movs	r1, #1
    89b2:	f880 1185 	strb.w	r1, [r0, #389]	; 0x185
    89b6:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
    89ba:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    89be:	68a0      	ldr	r0, [r4, #8]
    89c0:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
    89c4:	2908      	cmp	r1, #8
    89c6:	d103      	bne.n	89d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x784>
    89c8:	2102      	movs	r1, #2
    89ca:	7021      	strb	r1, [r4, #0]
    89cc:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
    89d0:	bd70      	pop	{r4, r5, r6, pc}
    89d2:	0000      	.short	0x0000
    89d4:	20000124 	.word	0x20000124
    89d8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    89da:	4605      	mov	r5, r0
    89dc:	4668      	mov	r0, sp
    89de:	f7fb fff1 	bl	49c4 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    89e2:	b318      	cbz	r0, 8a2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e0>
    89e4:	2222      	movs	r2, #34	; 0x22
    89e6:	2100      	movs	r1, #0
    89e8:	9800      	ldr	r0, [sp, #0]
    89ea:	f003 fc34 	bl	c256 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    89ee:	2103      	movs	r1, #3
    89f0:	9800      	ldr	r0, [sp, #0]
    89f2:	f005 f805 	bl	da00 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    89f6:	9800      	ldr	r0, [sp, #0]
    89f8:	7801      	ldrb	r1, [r0, #0]
    89fa:	f021 0110 	bic.w	r1, r1, #16
    89fe:	7001      	strb	r1, [r0, #0]
    8a00:	4629      	mov	r1, r5
    8a02:	f7fd f99f 	bl	5d44 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    8a06:	2100      	movs	r1, #0
    8a08:	4c5e      	ldr	r4, [pc, #376]	; (8b84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x938>)
    8a0a:	f644 162f 	movw	r6, #18735	; 0x492f
    8a0e:	2d0e      	cmp	r5, #14
    8a10:	d07e      	beq.n	8b10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8c4>
    8a12:	dc0e      	bgt.n	8a32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e6>
    8a14:	f1a5 0502 	sub.w	r5, r5, #2
    8a18:	2d0c      	cmp	r5, #12
    8a1a:	d21c      	bcs.n	8a56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80a>
    8a1c:	e8df f005 	tbb	[pc, r5]
    8a20:	a7451b1e 	.word	0xa7451b1e
    8a24:	511b1ea7 	.word	0x511b1ea7
    8a28:	3723a71b 	.word	0x3723a71b
    8a2c:	f640 116b 	movw	r1, #2411	; 0x96b
    8a30:	e0a3      	b.n	8b7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x92e>
    8a32:	2d15      	cmp	r5, #21
    8a34:	d058      	beq.n	8ae8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x89c>
    8a36:	dc08      	bgt.n	8a4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7fe>
    8a38:	2d11      	cmp	r5, #17
    8a3a:	d01f      	beq.n	8a7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x830>
    8a3c:	2d12      	cmp	r5, #18
    8a3e:	d01c      	beq.n	8a7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x82e>
    8a40:	2d13      	cmp	r5, #19
    8a42:	d01a      	beq.n	8a7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x82e>
    8a44:	2d14      	cmp	r5, #20
    8a46:	d106      	bne.n	8a56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80a>
    8a48:	e04e      	b.n	8ae8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x89c>
    8a4a:	2d16      	cmp	r5, #22
    8a4c:	d023      	beq.n	8a96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84a>
    8a4e:	2d17      	cmp	r5, #23
    8a50:	d065      	beq.n	8b1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8d2>
    8a52:	2dff      	cmp	r5, #255	; 0xff
    8a54:	d07e      	beq.n	8b54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x908>
    8a56:	f640 11dd 	movw	r1, #2525	; 0x9dd
    8a5a:	e08e      	b.n	8b7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x92e>
    8a5c:	68a1      	ldr	r1, [r4, #8]
    8a5e:	9800      	ldr	r0, [sp, #0]
    8a60:	f891 10e6 	ldrb.w	r1, [r1, #230]	; 0xe6
    8a64:	e015      	b.n	8a92 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x846>
    8a66:	9800      	ldr	r0, [sp, #0]
    8a68:	220b      	movs	r2, #11
    8a6a:	7102      	strb	r2, [r0, #4]
    8a6c:	2259      	movs	r2, #89	; 0x59
    8a6e:	7142      	strb	r2, [r0, #5]
    8a70:	7181      	strb	r1, [r0, #6]
    8a72:	212b      	movs	r1, #43	; 0x2b
    8a74:	71c1      	strb	r1, [r0, #7]
    8a76:	2112      	movs	r1, #18
    8a78:	7201      	strb	r1, [r0, #8]
    8a7a:	e078      	b.n	8b6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x922>
    8a7c:	2103      	movs	r1, #3
    8a7e:	9800      	ldr	r0, [sp, #0]
    8a80:	f004 ff9a 	bl	d9b8 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    8a84:	2106      	movs	r1, #6
    8a86:	9800      	ldr	r0, [sp, #0]
    8a88:	f004 ff98 	bl	d9bc <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    8a8c:	e06f      	b.n	8b6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x922>
    8a8e:	9800      	ldr	r0, [sp, #0]
    8a90:	2106      	movs	r1, #6
    8a92:	7101      	strb	r1, [r0, #4]
    8a94:	e06b      	b.n	8b6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x922>
    8a96:	9800      	ldr	r0, [sp, #0]
    8a98:	f8d4 1008 	ldr.w	r1, [r4, #8]
    8a9c:	f891 21a8 	ldrb.w	r2, [r1, #424]	; 0x1a8
    8aa0:	7102      	strb	r2, [r0, #4]
    8aa2:	f891 11a9 	ldrb.w	r1, [r1, #425]	; 0x1a9
    8aa6:	7141      	strb	r1, [r0, #5]
    8aa8:	e061      	b.n	8b6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x922>
    8aaa:	68a1      	ldr	r1, [r4, #8]
    8aac:	9800      	ldr	r0, [sp, #0]
    8aae:	f501 7188 	add.w	r1, r1, #272	; 0x110
    8ab2:	f004 ff96 	bl	d9e2 <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>
    8ab6:	68a1      	ldr	r1, [r4, #8]
    8ab8:	9800      	ldr	r0, [sp, #0]
    8aba:	31dc      	adds	r1, #220	; 0xdc
    8abc:	f004 ff8e 	bl	d9dc <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>
    8ac0:	e055      	b.n	8b6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x922>
    8ac2:	9101      	str	r1, [sp, #4]
    8ac4:	9102      	str	r1, [sp, #8]
    8ac6:	f001 fe67 	bl	a798 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    8aca:	68a1      	ldr	r1, [r4, #8]
    8acc:	4030      	ands	r0, r6
    8ace:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
    8ad2:	4001      	ands	r1, r0
    8ad4:	f88d 1004 	strb.w	r1, [sp, #4]
    8ad8:	0a00      	lsrs	r0, r0, #8
    8ada:	f88d 0005 	strb.w	r0, [sp, #5]
    8ade:	a901      	add	r1, sp, #4
    8ae0:	9800      	ldr	r0, [sp, #0]
    8ae2:	f004 ff88 	bl	d9f6 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>
    8ae6:	e042      	b.n	8b6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x922>
    8ae8:	68a0      	ldr	r0, [r4, #8]
    8aea:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    8aee:	9800      	ldr	r0, [sp, #0]
    8af0:	f004 ff8e 	bl	da10 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    8af4:	68a0      	ldr	r0, [r4, #8]
    8af6:	f8b0 10e8 	ldrh.w	r1, [r0, #232]	; 0xe8
    8afa:	9800      	ldr	r0, [sp, #0]
    8afc:	f004 ff8c 	bl	da18 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    8b00:	68a0      	ldr	r0, [r4, #8]
    8b02:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
    8b06:	9800      	ldr	r0, [sp, #0]
    8b08:	f004 ff8a 	bl	da20 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    8b0c:	68a0      	ldr	r0, [r4, #8]
    8b0e:	e000      	b.n	8b12 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8c6>
    8b10:	e010      	b.n	8b34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8e8>
    8b12:	f8b0 10e6 	ldrh.w	r1, [r0, #230]	; 0xe6
    8b16:	9800      	ldr	r0, [sp, #0]
    8b18:	f004 ff86 	bl	da28 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    8b1c:	e027      	b.n	8b6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x922>
    8b1e:	68a1      	ldr	r1, [r4, #8]
    8b20:	f891 01a6 	ldrb.w	r0, [r1, #422]	; 0x1a6
    8b24:	2801      	cmp	r0, #1
    8b26:	9800      	ldr	r0, [sp, #0]
    8b28:	d0b8      	beq.n	8a9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x850>
    8b2a:	f811 2f62 	ldrb.w	r2, [r1, #98]!
    8b2e:	7102      	strb	r2, [r0, #4]
    8b30:	7849      	ldrb	r1, [r1, #1]
    8b32:	e7b8      	b.n	8aa6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x85a>
    8b34:	9101      	str	r1, [sp, #4]
    8b36:	9102      	str	r1, [sp, #8]
    8b38:	f001 fe2e 	bl	a798 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    8b3c:	68a1      	ldr	r1, [r4, #8]
    8b3e:	4030      	ands	r0, r6
    8b40:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
    8b44:	4001      	ands	r1, r0
    8b46:	f88d 1004 	strb.w	r1, [sp, #4]
    8b4a:	0a00      	lsrs	r0, r0, #8
    8b4c:	f88d 0005 	strb.w	r0, [sp, #5]
    8b50:	a901      	add	r1, sp, #4
    8b52:	e000      	b.n	8b56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x90a>
    8b54:	e003      	b.n	8b5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x912>
    8b56:	9800      	ldr	r0, [sp, #0]
    8b58:	f004 ff48 	bl	d9ec <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    8b5c:	e007      	b.n	8b6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x922>
    8b5e:	68a0      	ldr	r0, [r4, #8]
    8b60:	f890 2187 	ldrb.w	r2, [r0, #391]	; 0x187
    8b64:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
    8b68:	9800      	ldr	r0, [sp, #0]
    8b6a:	f004 ff29 	bl	d9c0 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>
    8b6e:	f7fb ff03 	bl	4978 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    8b72:	2800      	cmp	r0, #0
    8b74:	d104      	bne.n	8b80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x934>
    8b76:	f640 11e1 	movw	r1, #2529	; 0x9e1
    8b7a:	2031      	movs	r0, #49	; 0x31
    8b7c:	f7fb f8ee 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8b82:	0000      	.short	0x0000
    8b84:	20000124 	.word	0x20000124
    8b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8b8c:	4c88      	ldr	r4, [pc, #544]	; (8db0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb64>)
    8b8e:	4682      	mov	sl, r0
    8b90:	4689      	mov	r9, r1
    8b92:	68a0      	ldr	r0, [r4, #8]
    8b94:	8800      	ldrh	r0, [r0, #0]
    8b96:	f7fb fd07 	bl	45a8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    8b9a:	0006      	movs	r6, r0
    8b9c:	d00a      	beq.n	8bb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x968>
    8b9e:	88a0      	ldrh	r0, [r4, #4]
    8ba0:	f04f 0500 	mov.w	r5, #0
    8ba4:	05c0      	lsls	r0, r0, #23
    8ba6:	68a0      	ldr	r0, [r4, #8]
    8ba8:	d509      	bpl.n	8bbe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x972>
    8baa:	f8a0 509c 	strh.w	r5, [r0, #156]	; 0x9c
    8bae:	f880 5104 	strb.w	r5, [r0, #260]	; 0x104
    8bb2:	e008      	b.n	8bc6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    8bb4:	f640 517d 	movw	r1, #3453	; 0xd7d
    8bb8:	2031      	movs	r0, #49	; 0x31
    8bba:	f7fb f8cf 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8bbe:	f830 1f9c 	ldrh.w	r1, [r0, #156]!
    8bc2:	1c49      	adds	r1, r1, #1
    8bc4:	8001      	strh	r1, [r0, #0]
    8bc6:	f001 f8a7 	bl	9d18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1acc>
    8bca:	f04f 0801 	mov.w	r8, #1
    8bce:	b328      	cbz	r0, 8c1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9d0>
    8bd0:	88a0      	ldrh	r0, [r4, #4]
    8bd2:	0500      	lsls	r0, r0, #20
    8bd4:	d506      	bpl.n	8be4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x998>
    8bd6:	68a0      	ldr	r0, [r4, #8]
    8bd8:	f890 1083 	ldrb.w	r1, [r0, #131]	; 0x83
    8bdc:	b111      	cbz	r1, 8be4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x998>
    8bde:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    8be2:	e01b      	b.n	8c1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9d0>
    8be4:	68a0      	ldr	r0, [r4, #8]
    8be6:	f8d0 1090 	ldr.w	r1, [r0, #144]	; 0x90
    8bea:	1c49      	adds	r1, r1, #1
    8bec:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
    8bf0:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
    8bf4:	428a      	cmp	r2, r1
    8bf6:	d301      	bcc.n	8bfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9b0>
    8bf8:	1a53      	subs	r3, r2, r1
    8bfa:	e000      	b.n	8bfe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9b2>
    8bfc:	2300      	movs	r3, #0
    8bfe:	88e7      	ldrh	r7, [r4, #6]
    8c00:	1d7f      	adds	r7, r7, #5
    8c02:	42bb      	cmp	r3, r7
    8c04:	d801      	bhi.n	8c0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9be>
    8c06:	f880 809a 	strb.w	r8, [r0, #154]	; 0x9a
    8c0a:	4291      	cmp	r1, r2
    8c0c:	d306      	bcc.n	8c1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9d0>
    8c0e:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    8c12:	f880 81f2 	strb.w	r8, [r0, #498]	; 0x1f2
    8c16:	78a0      	ldrb	r0, [r4, #2]
    8c18:	f7fa fef0 	bl	39fc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    8c1c:	88a0      	ldrh	r0, [r4, #4]
    8c1e:	f04f 0702 	mov.w	r7, #2
    8c22:	f410 7f40 	tst.w	r0, #768	; 0x300
    8c26:	d00e      	beq.n	8c46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9fa>
    8c28:	68a0      	ldr	r0, [r4, #8]
    8c2a:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    8c2e:	b111      	cbz	r1, 8c36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ea>
    8c30:	2903      	cmp	r1, #3
    8c32:	d108      	bne.n	8c46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9fa>
    8c34:	e002      	b.n	8c3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f0>
    8c36:	f880 8081 	strb.w	r8, [r0, #129]	; 0x81
    8c3a:	e001      	b.n	8c40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f4>
    8c3c:	f880 7081 	strb.w	r7, [r0, #129]	; 0x81
    8c40:	2101      	movs	r1, #1
    8c42:	f7fe fac7 	bl	71d4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    8c46:	68a0      	ldr	r0, [r4, #8]
    8c48:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    8c4c:	2901      	cmp	r1, #1
    8c4e:	d104      	bne.n	8c5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa0e>
    8c50:	88a1      	ldrh	r1, [r4, #4]
    8c52:	0549      	lsls	r1, r1, #21
    8c54:	d501      	bpl.n	8c5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa0e>
    8c56:	f880 7081 	strb.w	r7, [r0, #129]	; 0x81
    8c5a:	f1ba 0f00 	cmp.w	sl, #0
    8c5e:	d175      	bne.n	8d4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb00>
    8c60:	7921      	ldrb	r1, [r4, #4]
    8c62:	0649      	lsls	r1, r1, #25
    8c64:	d502      	bpl.n	8c6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa20>
    8c66:	f8a0 5118 	strh.w	r5, [r0, #280]	; 0x118
    8c6a:	e004      	b.n	8c76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa2a>
    8c6c:	f8b0 1118 	ldrh.w	r1, [r0, #280]	; 0x118
    8c70:	1c49      	adds	r1, r1, #1
    8c72:	f8a0 1118 	strh.w	r1, [r0, #280]	; 0x118
    8c76:	4648      	mov	r0, r9
    8c78:	f7ff fdbc 	bl	87f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5a8>
    8c7c:	ea40 0009 	orr.w	r0, r0, r9
    8c80:	4681      	mov	r9, r0
    8c82:	f7ff fd29 	bl	86d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x48c>
    8c86:	68a7      	ldr	r7, [r4, #8]
    8c88:	f8b7 00f8 	ldrh.w	r0, [r7, #248]	; 0xf8
    8c8c:	1c40      	adds	r0, r0, #1
    8c8e:	f8a7 00f8 	strh.w	r0, [r7, #248]	; 0xf8
    8c92:	f897 00fc 	ldrb.w	r0, [r7, #252]	; 0xfc
    8c96:	b128      	cbz	r0, 8ca4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa58>
    8c98:	f7fc f874 	bl	4d84 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>
    8c9c:	b1a8      	cbz	r0, 8cca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa7e>
    8c9e:	f8a7 50f8 	strh.w	r5, [r7, #248]	; 0xf8
    8ca2:	e012      	b.n	8cca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa7e>
    8ca4:	f7fb ff10 	bl	4ac8 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    8ca8:	b108      	cbz	r0, 8cae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa62>
    8caa:	f8a7 50f8 	strh.w	r5, [r7, #248]	; 0xf8
    8cae:	f7fb ff05 	bl	4abc <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    8cb2:	b150      	cbz	r0, 8cca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa7e>
    8cb4:	f897 0104 	ldrb.w	r0, [r7, #260]	; 0x104
    8cb8:	1c40      	adds	r0, r0, #1
    8cba:	b2c0      	uxtb	r0, r0
    8cbc:	f887 0104 	strb.w	r0, [r7, #260]	; 0x104
    8cc0:	2802      	cmp	r0, #2
    8cc2:	d902      	bls.n	8cca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa7e>
    8cc4:	f827 5ff8 	strh.w	r5, [r7, #248]!
    8cc8:	733d      	strb	r5, [r7, #12]
    8cca:	68a0      	ldr	r0, [r4, #8]
    8ccc:	2301      	movs	r3, #1
    8cce:	2100      	movs	r1, #0
    8cd0:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8cd4:	3070      	adds	r0, #112	; 0x70
    8cd6:	f004 fbb8 	bl	d44a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8cda:	b920      	cbnz	r0, 8ce6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa9a>
    8cdc:	68a0      	ldr	r0, [r4, #8]
    8cde:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    8ce2:	280c      	cmp	r0, #12
    8ce4:	d149      	bne.n	8d7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb2e>
    8ce6:	68a0      	ldr	r0, [r4, #8]
    8ce8:	2301      	movs	r3, #1
    8cea:	2100      	movs	r1, #0
    8cec:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    8cf0:	3070      	adds	r0, #112	; 0x70
    8cf2:	f004 fbaa 	bl	d44a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8cf6:	b350      	cbz	r0, 8d4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb02>
    8cf8:	68a0      	ldr	r0, [r4, #8]
    8cfa:	2301      	movs	r3, #1
    8cfc:	2100      	movs	r1, #0
    8cfe:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    8d02:	3070      	adds	r0, #112	; 0x70
    8d04:	f004 fba1 	bl	d44a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8d08:	b308      	cbz	r0, 8d4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb02>
    8d0a:	68a0      	ldr	r0, [r4, #8]
    8d0c:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    8d10:	2902      	cmp	r1, #2
    8d12:	d132      	bne.n	8d7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb2e>
    8d14:	f890 0104 	ldrb.w	r0, [r0, #260]	; 0x104
    8d18:	b9c8      	cbnz	r0, 8d4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb02>
    8d1a:	4630      	mov	r0, r6
    8d1c:	f003 ff79 	bl	cc12 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    8d20:	b1a8      	cbz	r0, 8d4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb02>
    8d22:	68a0      	ldr	r0, [r4, #8]
    8d24:	3070      	adds	r0, #112	; 0x70
    8d26:	f005 fcd5 	bl	e6d4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8d2a:	b980      	cbnz	r0, 8d4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb02>
    8d2c:	68a2      	ldr	r2, [r4, #8]
    8d2e:	f8b2 00f2 	ldrh.w	r0, [r2, #242]	; 0xf2
    8d32:	2801      	cmp	r0, #1
    8d34:	d921      	bls.n	8d7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb2e>
    8d36:	f882 80fa 	strb.w	r8, [r2, #250]	; 0xfa
    8d3a:	f8b2 109e 	ldrh.w	r1, [r2, #158]	; 0x9e
    8d3e:	f8b2 009c 	ldrh.w	r0, [r2, #156]	; 0x9c
    8d42:	1e8b      	subs	r3, r1, #2
    8d44:	4298      	cmp	r0, r3
    8d46:	db03      	blt.n	8d50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb04>
    8d48:	2001      	movs	r0, #1
    8d4a:	e004      	b.n	8d56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    8d4c:	e021      	b.n	8d92 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb46>
    8d4e:	e014      	b.n	8d7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb2e>
    8d50:	1a08      	subs	r0, r1, r0
    8d52:	1e40      	subs	r0, r0, #1
    8d54:	b280      	uxth	r0, r0
    8d56:	f8b2 10f8 	ldrh.w	r1, [r2, #248]	; 0xf8
    8d5a:	88e3      	ldrh	r3, [r4, #6]
    8d5c:	4299      	cmp	r1, r3
    8d5e:	d301      	bcc.n	8d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb18>
    8d60:	2101      	movs	r1, #1
    8d62:	e002      	b.n	8d6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb1e>
    8d64:	1a59      	subs	r1, r3, r1
    8d66:	1c49      	adds	r1, r1, #1
    8d68:	b289      	uxth	r1, r1
    8d6a:	4288      	cmp	r0, r1
    8d6c:	d900      	bls.n	8d70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb24>
    8d6e:	4608      	mov	r0, r1
    8d70:	2801      	cmp	r0, #1
    8d72:	d106      	bne.n	8d82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb36>
    8d74:	f882 50fa 	strb.w	r5, [r2, #250]	; 0xfa
    8d78:	e003      	b.n	8d82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb36>
    8d7a:	68a1      	ldr	r1, [r4, #8]
    8d7c:	2001      	movs	r0, #1
    8d7e:	f881 50fa 	strb.w	r5, [r1, #250]	; 0xfa
    8d82:	68a1      	ldr	r1, [r4, #8]
    8d84:	f8b1 2074 	ldrh.w	r2, [r1, #116]	; 0x74
    8d88:	4410      	add	r0, r2
    8d8a:	f8a1 00f4 	strh.w	r0, [r1, #244]	; 0xf4
    8d8e:	f001 f883 	bl	9e98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c4c>
    8d92:	7920      	ldrb	r0, [r4, #4]
    8d94:	464a      	mov	r2, r9
    8d96:	f3c0 1180 	ubfx	r1, r0, #6, #1
    8d9a:	4650      	mov	r0, sl
    8d9c:	f000 ffd0 	bl	9d40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af4>
    8da0:	68a0      	ldr	r0, [r4, #8]
    8da2:	f880 50fb 	strb.w	r5, [r0, #251]	; 0xfb
    8da6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8daa:	f7fb bdcf 	b.w	494c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    8dae:	0000      	.short	0x0000
    8db0:	20000124 	.word	0x20000124
    8db4:	b570      	push	{r4, r5, r6, lr}
    8db6:	4c4e      	ldr	r4, [pc, #312]	; (8ef0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca4>)
    8db8:	2301      	movs	r3, #1
    8dba:	2100      	movs	r1, #0
    8dbc:	68a0      	ldr	r0, [r4, #8]
    8dbe:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    8dc2:	3070      	adds	r0, #112	; 0x70
    8dc4:	f004 fb41 	bl	d44a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8dc8:	2800      	cmp	r0, #0
    8dca:	d076      	beq.n	8eba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6e>
    8dcc:	68a0      	ldr	r0, [r4, #8]
    8dce:	f890 11ad 	ldrb.w	r1, [r0, #429]	; 0x1ad
    8dd2:	2500      	movs	r5, #0
    8dd4:	b139      	cbz	r1, 8de6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb9a>
    8dd6:	2100      	movs	r1, #0
    8dd8:	200e      	movs	r0, #14
    8dda:	f000 f88b 	bl	8ef4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    8dde:	68a0      	ldr	r0, [r4, #8]
    8de0:	f880 51ad 	strb.w	r5, [r0, #429]	; 0x1ad
    8de4:	e082      	b.n	8eec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca0>
    8de6:	f890 11ac 	ldrb.w	r1, [r0, #428]	; 0x1ac
    8dea:	b119      	cbz	r1, 8df4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xba8>
    8dec:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    8df0:	0789      	lsls	r1, r1, #30
    8df2:	d00a      	beq.n	8e0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbbe>
    8df4:	f890 119c 	ldrb.w	r1, [r0, #412]	; 0x19c
    8df8:	b111      	cbz	r1, 8e00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb4>
    8dfa:	f890 119d 	ldrb.w	r1, [r0, #413]	; 0x19d
    8dfe:	b189      	cbz	r1, 8e24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbd8>
    8e00:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    8e04:	2901      	cmp	r1, #1
    8e06:	d02f      	beq.n	8e68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc1c>
    8e08:	e06a      	b.n	8ee0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc94>
    8e0a:	2100      	movs	r1, #0
    8e0c:	200c      	movs	r0, #12
    8e0e:	f000 f871 	bl	8ef4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    8e12:	68a0      	ldr	r0, [r4, #8]
    8e14:	f810 1fae 	ldrb.w	r1, [r0, #174]!
    8e18:	f041 0101 	orr.w	r1, r1, #1
    8e1c:	7001      	strb	r1, [r0, #0]
    8e1e:	f880 50fe 	strb.w	r5, [r0, #254]	; 0xfe
    8e22:	e063      	b.n	8eec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca0>
    8e24:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8e28:	2924      	cmp	r1, #36	; 0x24
    8e2a:	d01b      	beq.n	8e64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc18>
    8e2c:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    8e30:	2924      	cmp	r1, #36	; 0x24
    8e32:	d017      	beq.n	8e64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc18>
    8e34:	f05f 0300 	movs.w	r3, #0
    8e38:	f500 72c7 	add.w	r2, r0, #398	; 0x18e
    8e3c:	f500 71ce 	add.w	r1, r0, #412	; 0x19c
    8e40:	f004 ff31 	bl	dca6 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    8e44:	68a0      	ldr	r0, [r4, #8]
    8e46:	f880 519c 	strb.w	r5, [r0, #412]	; 0x19c
    8e4a:	2100      	movs	r1, #0
    8e4c:	2014      	movs	r0, #20
    8e4e:	f000 f851 	bl	8ef4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    8e52:	68a1      	ldr	r1, [r4, #8]
    8e54:	f101 0028 	add.w	r0, r1, #40	; 0x28
    8e58:	8bc2      	ldrh	r2, [r0, #30]
    8e5a:	f821 2fe6 	strh.w	r2, [r1, #230]!
    8e5e:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    8e60:	8048      	strh	r0, [r1, #2]
    8e62:	e043      	b.n	8eec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca0>
    8e64:	2301      	movs	r3, #1
    8e66:	e7e7      	b.n	8e38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbec>
    8e68:	f890 11a7 	ldrb.w	r1, [r0, #423]	; 0x1a7
    8e6c:	bb21      	cbnz	r1, 8eb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6c>
    8e6e:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8e72:	2301      	movs	r3, #1
    8e74:	210b      	movs	r1, #11
    8e76:	3070      	adds	r0, #112	; 0x70
    8e78:	f004 fae7 	bl	d44a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8e7c:	b9e0      	cbnz	r0, 8eb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6c>
    8e7e:	68a0      	ldr	r0, [r4, #8]
    8e80:	f890 0066 	ldrb.w	r0, [r0, #102]	; 0x66
    8e84:	f005 fc2e 	bl	e6e4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    8e88:	4605      	mov	r5, r0
    8e8a:	68a0      	ldr	r0, [r4, #8]
    8e8c:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    8e90:	f005 fc28 	bl	e6e4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    8e94:	4606      	mov	r6, r0
    8e96:	68a0      	ldr	r0, [r4, #8]
    8e98:	f890 11a8 	ldrb.w	r1, [r0, #424]	; 0x1a8
    8e9c:	4628      	mov	r0, r5
    8e9e:	f005 fc2c 	bl	e6fa <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    8ea2:	b158      	cbz	r0, 8ebc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc70>
    8ea4:	68a0      	ldr	r0, [r4, #8]
    8ea6:	f890 11a9 	ldrb.w	r1, [r0, #425]	; 0x1a9
    8eaa:	4630      	mov	r0, r6
    8eac:	f005 fc25 	bl	e6fa <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    8eb0:	b120      	cbz	r0, 8ebc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc70>
    8eb2:	2000      	movs	r0, #0
    8eb4:	f000 f900 	bl	90b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    8eb8:	e012      	b.n	8ee0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc94>
    8eba:	e012      	b.n	8ee2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc96>
    8ebc:	68a0      	ldr	r0, [r4, #8]
    8ebe:	2301      	movs	r3, #1
    8ec0:	2103      	movs	r1, #3
    8ec2:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8ec6:	3070      	adds	r0, #112	; 0x70
    8ec8:	f004 fabf 	bl	d44a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8ecc:	b940      	cbnz	r0, 8ee0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc94>
    8ece:	68a0      	ldr	r0, [r4, #8]
    8ed0:	2301      	movs	r3, #1
    8ed2:	2102      	movs	r1, #2
    8ed4:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8ed8:	3070      	adds	r0, #112	; 0x70
    8eda:	f004 fab6 	bl	d44a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8ede:	b108      	cbz	r0, 8ee4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc98>
    8ee0:	2000      	movs	r0, #0
    8ee2:	bd70      	pop	{r4, r5, r6, pc}
    8ee4:	2100      	movs	r1, #0
    8ee6:	2016      	movs	r0, #22
    8ee8:	f000 f804 	bl	8ef4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    8eec:	2001      	movs	r0, #1
    8eee:	bd70      	pop	{r4, r5, r6, pc}
    8ef0:	20000124 	.word	0x20000124
    8ef4:	b570      	push	{r4, r5, r6, lr}
    8ef6:	4c0d      	ldr	r4, [pc, #52]	; (8f2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce0>)
    8ef8:	4606      	mov	r6, r0
    8efa:	460d      	mov	r5, r1
    8efc:	68a0      	ldr	r0, [r4, #8]
    8efe:	3070      	adds	r0, #112	; 0x70
    8f00:	f005 fbe8 	bl	e6d4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8f04:	b120      	cbz	r0, 8f10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcc4>
    8f06:	f640 11f4 	movw	r1, #2548	; 0x9f4
    8f0a:	2031      	movs	r0, #49	; 0x31
    8f0c:	f7fa ff26 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8f10:	68a2      	ldr	r2, [r4, #8]
    8f12:	2000      	movs	r0, #0
    8f14:	f882 60e4 	strb.w	r6, [r2, #228]	; 0xe4
    8f18:	b115      	cbz	r5, 8f20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcd4>
    8f1a:	f8a2 00a8 	strh.w	r0, [r2, #168]	; 0xa8
    8f1e:	bd70      	pop	{r4, r5, r6, pc}
    8f20:	f822 0fa2 	strh.w	r0, [r2, #162]!
    8f24:	2001      	movs	r0, #1
    8f26:	7110      	strb	r0, [r2, #4]
    8f28:	bd70      	pop	{r4, r5, r6, pc}
    8f2a:	0000      	.short	0x0000
    8f2c:	20000124 	.word	0x20000124
    8f30:	b570      	push	{r4, r5, r6, lr}
    8f32:	4c18      	ldr	r4, [pc, #96]	; (8f94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd48>)
    8f34:	2500      	movs	r5, #0
    8f36:	68a0      	ldr	r0, [r4, #8]
    8f38:	f890 1173 	ldrb.w	r1, [r0, #371]	; 0x173
    8f3c:	2901      	cmp	r1, #1
    8f3e:	d00a      	beq.n	8f56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0a>
    8f40:	2902      	cmp	r1, #2
    8f42:	d125      	bne.n	8f90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd44>
    8f44:	f890 10ac 	ldrb.w	r1, [r0, #172]	; 0xac
    8f48:	b1a9      	cbz	r1, 8f76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2a>
    8f4a:	2106      	movs	r1, #6
    8f4c:	f880 10e6 	strb.w	r1, [r0, #230]	; 0xe6
    8f50:	2101      	movs	r1, #1
    8f52:	2002      	movs	r0, #2
    8f54:	e017      	b.n	8f86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd3a>
    8f56:	f890 11bc 	ldrb.w	r1, [r0, #444]	; 0x1bc
    8f5a:	2900      	cmp	r1, #0
    8f5c:	d118      	bne.n	8f90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd44>
    8f5e:	f100 03c8 	add.w	r3, r0, #200	; 0xc8
    8f62:	f500 7184 	add.w	r1, r0, #264	; 0x108
    8f66:	2200      	movs	r2, #0
    8f68:	f500 70ba 	add.w	r0, r0, #372	; 0x174
    8f6c:	f004 fa25 	bl	d3ba <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    8f70:	2101      	movs	r1, #1
    8f72:	2005      	movs	r0, #5
    8f74:	e007      	b.n	8f86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd3a>
    8f76:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    8f7a:	0740      	lsls	r0, r0, #29
    8f7c:	d501      	bpl.n	8f82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd36>
    8f7e:	2011      	movs	r0, #17
    8f80:	e000      	b.n	8f84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd38>
    8f82:	200d      	movs	r0, #13
    8f84:	2101      	movs	r1, #1
    8f86:	f7ff ffb5 	bl	8ef4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    8f8a:	68a0      	ldr	r0, [r4, #8]
    8f8c:	f880 5173 	strb.w	r5, [r0, #371]	; 0x173
    8f90:	bd70      	pop	{r4, r5, r6, pc}
    8f92:	0000      	.short	0x0000
    8f94:	20000124 	.word	0x20000124
    8f98:	b570      	push	{r4, r5, r6, lr}
    8f9a:	4a2b      	ldr	r2, [pc, #172]	; (9048 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdfc>)
    8f9c:	4603      	mov	r3, r0
    8f9e:	8890      	ldrh	r0, [r2, #4]
    8fa0:	4318      	orrs	r0, r3
    8fa2:	8090      	strh	r0, [r2, #4]
    8fa4:	4610      	mov	r0, r2
    8fa6:	2b40      	cmp	r3, #64	; 0x40
    8fa8:	6880      	ldr	r0, [r0, #8]
    8faa:	d00d      	beq.n	8fc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd7c>
    8fac:	079e      	lsls	r6, r3, #30
    8fae:	f04f 0500 	mov.w	r5, #0
    8fb2:	f04f 0401 	mov.w	r4, #1
    8fb6:	ea4f 76c3 	mov.w	r6, r3, lsl #31
    8fba:	d50c      	bpl.n	8fd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd8a>
    8fbc:	b14e      	cbz	r6, 8fd2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd86>
    8fbe:	f44f 614f 	mov.w	r1, #3312	; 0xcf0
    8fc2:	2031      	movs	r0, #49	; 0x31
    8fc4:	f7fa feca 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8fc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8fcc:	2104      	movs	r1, #4
    8fce:	f7fe b901 	b.w	71d4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    8fd2:	60d1      	str	r1, [r2, #12]
    8fd4:	e01c      	b.n	9010 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc4>
    8fd6:	b1c6      	cbz	r6, 900a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdbe>
    8fd8:	6111      	str	r1, [r2, #16]
    8fda:	78c9      	ldrb	r1, [r1, #3]
    8fdc:	2906      	cmp	r1, #6
    8fde:	d002      	beq.n	8fe6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd9a>
    8fe0:	290b      	cmp	r1, #11
    8fe2:	d112      	bne.n	900a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdbe>
    8fe4:	e009      	b.n	8ffa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdae>
    8fe6:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8fea:	2917      	cmp	r1, #23
    8fec:	d10d      	bne.n	900a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdbe>
    8fee:	2100      	movs	r1, #0
    8ff0:	e9c0 112e 	strd	r1, r1, [r0, #184]	; 0xb8
    8ff4:	f880 4082 	strb.w	r4, [r0, #130]	; 0x82
    8ff8:	e007      	b.n	900a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdbe>
    8ffa:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8ffe:	2911      	cmp	r1, #17
    9000:	d103      	bne.n	900a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdbe>
    9002:	f880 5082 	strb.w	r5, [r0, #130]	; 0x82
    9006:	f880 40ac 	strb.w	r4, [r0, #172]	; 0xac
    900a:	0799      	lsls	r1, r3, #30
    900c:	d516      	bpl.n	903c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf0>
    900e:	68d1      	ldr	r1, [r2, #12]
    9010:	78c9      	ldrb	r1, [r1, #3]
    9012:	2905      	cmp	r1, #5
    9014:	d002      	beq.n	901c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
    9016:	290b      	cmp	r1, #11
    9018:	d110      	bne.n	903c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf0>
    901a:	e009      	b.n	9030 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xde4>
    901c:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9020:	2915      	cmp	r1, #21
    9022:	d10b      	bne.n	903c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf0>
    9024:	2100      	movs	r1, #0
    9026:	e9e0 1130 	strd	r1, r1, [r0, #192]!	; 0xc0
    902a:	f800 4c3d 	strb.w	r4, [r0, #-61]
    902e:	e005      	b.n	903c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf0>
    9030:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9034:	2910      	cmp	r1, #16
    9036:	d101      	bne.n	903c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf0>
    9038:	f880 5083 	strb.w	r5, [r0, #131]	; 0x83
    903c:	0698      	lsls	r0, r3, #26
    903e:	d501      	bpl.n	9044 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf8>
    9040:	2008      	movs	r0, #8
    9042:	7050      	strb	r0, [r2, #1]
    9044:	bd70      	pop	{r4, r5, r6, pc}
    9046:	0000      	.short	0x0000
    9048:	20000124 	.word	0x20000124
    904c:	b570      	push	{r4, r5, r6, lr}
    904e:	4c19      	ldr	r4, [pc, #100]	; (90b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe68>)
    9050:	68a0      	ldr	r0, [r4, #8]
    9052:	f890 118e 	ldrb.w	r1, [r0, #398]	; 0x18e
    9056:	b109      	cbz	r1, 905c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe10>
    9058:	2601      	movs	r6, #1
    905a:	e000      	b.n	905e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe12>
    905c:	2600      	movs	r6, #0
    905e:	f890 218f 	ldrb.w	r2, [r0, #399]	; 0x18f
    9062:	b10a      	cbz	r2, 9068 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe1c>
    9064:	2501      	movs	r5, #1
    9066:	e000      	b.n	906a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe1e>
    9068:	2500      	movs	r5, #0
    906a:	b90e      	cbnz	r6, 9070 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe24>
    906c:	f890 1066 	ldrb.w	r1, [r0, #102]	; 0x66
    9070:	b90d      	cbnz	r5, 9076 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe2a>
    9072:	f890 2067 	ldrb.w	r2, [r0, #103]	; 0x67
    9076:	f100 035e 	add.w	r3, r0, #94	; 0x5e
    907a:	7219      	strb	r1, [r3, #8]
    907c:	725a      	strb	r2, [r3, #9]
    907e:	2101      	movs	r1, #1
    9080:	7299      	strb	r1, [r3, #10]
    9082:	f890 01a6 	ldrb.w	r0, [r0, #422]	; 0x1a6
    9086:	2801      	cmp	r0, #1
    9088:	d001      	beq.n	908e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe42>
    908a:	b906      	cbnz	r6, 908e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe42>
    908c:	b115      	cbz	r5, 9094 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe48>
    908e:	2000      	movs	r0, #0
    9090:	f000 f812 	bl	90b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    9094:	68a0      	ldr	r0, [r4, #8]
    9096:	f004 fe21 	bl	dcdc <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    909a:	2800      	cmp	r0, #0
    909c:	d008      	beq.n	90b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe64>
    909e:	68a1      	ldr	r1, [r4, #8]
    90a0:	f501 72e9 	add.w	r2, r1, #466	; 0x1d2
    90a4:	8808      	ldrh	r0, [r1, #0]
    90a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    90aa:	3128      	adds	r1, #40	; 0x28
    90ac:	f004 bdd7 	b.w	dc5e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    90b0:	bd70      	pop	{r4, r5, r6, pc}
    90b2:	0000      	.short	0x0000
    90b4:	20000124 	.word	0x20000124
    90b8:	b510      	push	{r4, lr}
    90ba:	4c10      	ldr	r4, [pc, #64]	; (90fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb0>)
    90bc:	68a1      	ldr	r1, [r4, #8]
    90be:	880a      	ldrh	r2, [r1, #0]
    90c0:	f8a1 21fe 	strh.w	r2, [r1, #510]	; 0x1fe
    90c4:	f881 01fc 	strb.w	r0, [r1, #508]	; 0x1fc
    90c8:	f891 0066 	ldrb.w	r0, [r1, #102]	; 0x66
    90cc:	f005 fb0a 	bl	e6e4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    90d0:	68a1      	ldr	r1, [r4, #8]
    90d2:	f881 0200 	strb.w	r0, [r1, #512]	; 0x200
    90d6:	f891 0067 	ldrb.w	r0, [r1, #103]	; 0x67
    90da:	f005 fb03 	bl	e6e4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    90de:	68a2      	ldr	r2, [r4, #8]
    90e0:	f502 71fd 	add.w	r1, r2, #506	; 0x1fa
    90e4:	f882 0201 	strb.w	r0, [r2, #513]	; 0x201
    90e8:	2001      	movs	r0, #1
    90ea:	7008      	strb	r0, [r1, #0]
    90ec:	2000      	movs	r0, #0
    90ee:	f882 01a6 	strb.w	r0, [r2, #422]	; 0x1a6
    90f2:	78a0      	ldrb	r0, [r4, #2]
    90f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    90f8:	f7fa bc80 	b.w	39fc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    90fc:	20000124 	.word	0x20000124
    9100:	b510      	push	{r4, lr}
    9102:	4c15      	ldr	r4, [pc, #84]	; (9158 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf0c>)
    9104:	2301      	movs	r3, #1
    9106:	2100      	movs	r1, #0
    9108:	68a0      	ldr	r0, [r4, #8]
    910a:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    910e:	3070      	adds	r0, #112	; 0x70
    9110:	f004 f99b 	bl	d44a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9114:	b190      	cbz	r0, 913c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xef0>
    9116:	6920      	ldr	r0, [r4, #16]
    9118:	f004 fbeb 	bl	d8f2 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>
    911c:	68a1      	ldr	r1, [r4, #8]
    911e:	f8a1 018c 	strh.w	r0, [r1, #396]	; 0x18c
    9122:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
    9126:	f005 faf6 	bl	e716 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    912a:	b148      	cbz	r0, 9140 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xef4>
    912c:	68a0      	ldr	r0, [r4, #8]
    912e:	2128      	movs	r1, #40	; 0x28
    9130:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
    9134:	306f      	adds	r0, #111	; 0x6f
    9136:	2101      	movs	r1, #1
    9138:	7781      	strb	r1, [r0, #30]
    913a:	e00b      	b.n	9154 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf08>
    913c:	2001      	movs	r0, #1
    913e:	bd10      	pop	{r4, pc}
    9140:	68a1      	ldr	r1, [r4, #8]
    9142:	6920      	ldr	r0, [r4, #16]
    9144:	f501 71c7 	add.w	r1, r1, #398	; 0x18e
    9148:	f004 fbce 	bl	d8e8 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>
    914c:	68a1      	ldr	r1, [r4, #8]
    914e:	200b      	movs	r0, #11
    9150:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    9154:	2000      	movs	r0, #0
    9156:	bd10      	pop	{r4, pc}
    9158:	20000124 	.word	0x20000124
    915c:	b570      	push	{r4, r5, r6, lr}
    915e:	4c29      	ldr	r4, [pc, #164]	; (9204 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfb8>)
    9160:	2301      	movs	r3, #1
    9162:	2100      	movs	r1, #0
    9164:	68a0      	ldr	r0, [r4, #8]
    9166:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    916a:	3070      	adds	r0, #112	; 0x70
    916c:	f004 f96d 	bl	d44a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9170:	b1b8      	cbz	r0, 91a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf56>
    9172:	2100      	movs	r1, #0
    9174:	6920      	ldr	r0, [r4, #16]
    9176:	f004 fb8f 	bl	d898 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>
    917a:	b1a0      	cbz	r0, 91a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf5a>
    917c:	6920      	ldr	r0, [r4, #16]
    917e:	68a1      	ldr	r1, [r4, #8]
    9180:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    9184:	f8a1 018c 	strh.w	r0, [r1, #396]	; 0x18c
    9188:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
    918c:	f005 fac3 	bl	e716 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    9190:	b168      	cbz	r0, 91ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf62>
    9192:	68a0      	ldr	r0, [r4, #8]
    9194:	2128      	movs	r1, #40	; 0x28
    9196:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
    919a:	306f      	adds	r0, #111	; 0x6f
    919c:	2101      	movs	r1, #1
    919e:	7781      	strb	r1, [r0, #30]
    91a0:	e02e      	b.n	9200 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfb4>
    91a2:	2001      	movs	r0, #1
    91a4:	bd70      	pop	{r4, r5, r6, pc}
    91a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    91aa:	f000 b8af 	b.w	930c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10c0>
    91ae:	6920      	ldr	r0, [r4, #16]
    91b0:	f004 fba2 	bl	d8f8 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>
    91b4:	f004 f92c 	bl	d410 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    91b8:	4605      	mov	r5, r0
    91ba:	68a0      	ldr	r0, [r4, #8]
    91bc:	4629      	mov	r1, r5
    91be:	f8c0 5194 	str.w	r5, [r0, #404]	; 0x194
    91c2:	6920      	ldr	r0, [r4, #16]
    91c4:	7900      	ldrb	r0, [r0, #4]
    91c6:	f004 fac0 	bl	d74a <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    91ca:	68a1      	ldr	r1, [r4, #8]
    91cc:	f8a1 018e 	strh.w	r0, [r1, #398]	; 0x18e
    91d0:	6920      	ldr	r0, [r4, #16]
    91d2:	4629      	mov	r1, r5
    91d4:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    91d8:	f004 fab3 	bl	d742 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    91dc:	68a1      	ldr	r1, [r4, #8]
    91de:	f8c1 0190 	str.w	r0, [r1, #400]	; 0x190
    91e2:	6920      	ldr	r0, [r4, #16]
    91e4:	f004 fb8b 	bl	d8fe <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>
    91e8:	68a1      	ldr	r1, [r4, #8]
    91ea:	f8a1 0198 	strh.w	r0, [r1, #408]	; 0x198
    91ee:	6920      	ldr	r0, [r4, #16]
    91f0:	f004 fb88 	bl	d904 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>
    91f4:	68a1      	ldr	r1, [r4, #8]
    91f6:	f8a1 019a 	strh.w	r0, [r1, #410]	; 0x19a
    91fa:	200d      	movs	r0, #13
    91fc:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    9200:	2000      	movs	r0, #0
    9202:	bd70      	pop	{r4, r5, r6, pc}
    9204:	20000124 	.word	0x20000124
    9208:	b538      	push	{r3, r4, r5, lr}
    920a:	4c2a      	ldr	r4, [pc, #168]	; (92b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1068>)
    920c:	2301      	movs	r3, #1
    920e:	2100      	movs	r1, #0
    9210:	68a0      	ldr	r0, [r4, #8]
    9212:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9216:	3070      	adds	r0, #112	; 0x70
    9218:	f004 f917 	bl	d44a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    921c:	b970      	cbnz	r0, 923c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff0>
    921e:	68a0      	ldr	r0, [r4, #8]
    9220:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9224:	2a12      	cmp	r2, #18
    9226:	d009      	beq.n	923c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff0>
    9228:	2301      	movs	r3, #1
    922a:	2105      	movs	r1, #5
    922c:	3070      	adds	r0, #112	; 0x70
    922e:	f004 f90c 	bl	d44a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9232:	b108      	cbz	r0, 9238 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfec>
    9234:	2008      	movs	r0, #8
    9236:	bd38      	pop	{r3, r4, r5, pc}
    9238:	2001      	movs	r0, #1
    923a:	bd38      	pop	{r3, r4, r5, pc}
    923c:	68a0      	ldr	r0, [r4, #8]
    923e:	f890 00ac 	ldrb.w	r0, [r0, #172]	; 0xac
    9242:	b908      	cbnz	r0, 9248 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xffc>
    9244:	f7ff f914 	bl	8470 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x224>
    9248:	68a1      	ldr	r1, [r4, #8]
    924a:	6920      	ldr	r0, [r4, #16]
    924c:	f501 7184 	add.w	r1, r1, #264	; 0x108
    9250:	f004 fb67 	bl	d922 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>
    9254:	68a1      	ldr	r1, [r4, #8]
    9256:	6920      	ldr	r0, [r4, #16]
    9258:	31d8      	adds	r1, #216	; 0xd8
    925a:	f004 fb59 	bl	d910 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>
    925e:	68a1      	ldr	r1, [r4, #8]
    9260:	f891 01c4 	ldrb.w	r0, [r1, #452]	; 0x1c4
    9264:	f88d 0000 	strb.w	r0, [sp]
    9268:	9800      	ldr	r0, [sp, #0]
    926a:	9000      	str	r0, [sp, #0]
    926c:	f89d 0000 	ldrb.w	r0, [sp]
    9270:	b120      	cbz	r0, 927c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1030>
    9272:	f240 219d 	movw	r1, #669	; 0x29d
    9276:	2031      	movs	r0, #49	; 0x31
    9278:	f7fa fd70 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    927c:	8808      	ldrh	r0, [r1, #0]
    927e:	f8a1 01c6 	strh.w	r0, [r1, #454]	; 0x1c6
    9282:	f501 71e4 	add.w	r1, r1, #456	; 0x1c8
    9286:	6920      	ldr	r0, [r4, #16]
    9288:	f004 fb46 	bl	d918 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>
    928c:	68a1      	ldr	r1, [r4, #8]
    928e:	6920      	ldr	r0, [r4, #16]
    9290:	f501 71e8 	add.w	r1, r1, #464	; 0x1d0
    9294:	f004 fb39 	bl	d90a <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>
    9298:	68a0      	ldr	r0, [r4, #8]
    929a:	4601      	mov	r1, r0
    929c:	2201      	movs	r2, #1
    929e:	f880 21c4 	strb.w	r2, [r0, #452]	; 0x1c4
    92a2:	2014      	movs	r0, #20
    92a4:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    92a8:	78a0      	ldrb	r0, [r4, #2]
    92aa:	f7fa fba7 	bl	39fc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    92ae:	2000      	movs	r0, #0
    92b0:	bd38      	pop	{r3, r4, r5, pc}
    92b2:	0000      	.short	0x0000
    92b4:	20000124 	.word	0x20000124
    92b8:	b51c      	push	{r2, r3, r4, lr}
    92ba:	4c13      	ldr	r4, [pc, #76]	; (9308 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10bc>)
    92bc:	68a0      	ldr	r0, [r4, #8]
    92be:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    92c2:	07c0      	lsls	r0, r0, #31
    92c4:	d001      	beq.n	92ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x107e>
    92c6:	2001      	movs	r0, #1
    92c8:	bd1c      	pop	{r2, r3, r4, pc}
    92ca:	4669      	mov	r1, sp
    92cc:	6920      	ldr	r0, [r4, #16]
    92ce:	f004 fb2e 	bl	d92e <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>
    92d2:	f001 fa61 	bl	a798 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    92d6:	f644 112f 	movw	r1, #18735	; 0x492f
    92da:	4008      	ands	r0, r1
    92dc:	f89d 2000 	ldrb.w	r2, [sp]
    92e0:	68a1      	ldr	r1, [r4, #8]
    92e2:	4002      	ands	r2, r0
    92e4:	f801 2fb4 	strb.w	r2, [r1, #180]!
    92e8:	f89d 2001 	ldrb.w	r2, [sp, #1]
    92ec:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    92f0:	7048      	strb	r0, [r1, #1]
    92f2:	f7ff f8bd 	bl	8470 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x224>
    92f6:	68a0      	ldr	r0, [r4, #8]
    92f8:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    92fc:	f041 0101 	orr.w	r1, r1, #1
    9300:	7001      	strb	r1, [r0, #0]
    9302:	2000      	movs	r0, #0
    9304:	bd1c      	pop	{r2, r3, r4, pc}
    9306:	0000      	.short	0x0000
    9308:	20000124 	.word	0x20000124
    930c:	4a0a      	ldr	r2, [pc, #40]	; (9338 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ec>)
    930e:	b510      	push	{r4, lr}
    9310:	6890      	ldr	r0, [r2, #8]
    9312:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    9316:	070b      	lsls	r3, r1, #28
    9318:	d501      	bpl.n	931e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10d2>
    931a:	2001      	movs	r0, #1
    931c:	bd10      	pop	{r4, pc}
    931e:	f041 0108 	orr.w	r1, r1, #8
    9322:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    9326:	6911      	ldr	r1, [r2, #16]
    9328:	78c9      	ldrb	r1, [r1, #3]
    932a:	f880 10e1 	strb.w	r1, [r0, #225]	; 0xe1
    932e:	f7ff f89f 	bl	8470 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x224>
    9332:	2000      	movs	r0, #0
    9334:	bd10      	pop	{r4, pc}
    9336:	0000      	.short	0x0000
    9338:	20000124 	.word	0x20000124
    933c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    933e:	4c2f      	ldr	r4, [pc, #188]	; (93fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11b0>)
    9340:	68a0      	ldr	r0, [r4, #8]
    9342:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    9346:	f010 0f30 	tst.w	r0, #48	; 0x30
    934a:	d001      	beq.n	9350 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1104>
    934c:	2001      	movs	r0, #1
    934e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9350:	6920      	ldr	r0, [r4, #16]
    9352:	f004 fb07 	bl	d964 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    9356:	b350      	cbz	r0, 93ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1162>
    9358:	6920      	ldr	r0, [r4, #16]
    935a:	f004 faf5 	bl	d948 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    935e:	4607      	mov	r7, r0
    9360:	6920      	ldr	r0, [r4, #16]
    9362:	f004 faf5 	bl	d950 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    9366:	4606      	mov	r6, r0
    9368:	6920      	ldr	r0, [r4, #16]
    936a:	f004 faeb 	bl	d944 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    936e:	4605      	mov	r5, r0
    9370:	6920      	ldr	r0, [r4, #16]
    9372:	f004 faeb 	bl	d94c <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    9376:	4601      	mov	r1, r0
    9378:	9700      	str	r7, [sp, #0]
    937a:	68a0      	ldr	r0, [r4, #8]
    937c:	4633      	mov	r3, r6
    937e:	462a      	mov	r2, r5
    9380:	3028      	adds	r0, #40	; 0x28
    9382:	f004 fd35 	bl	ddf0 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    9386:	7920      	ldrb	r0, [r4, #4]
    9388:	0780      	lsls	r0, r0, #30
    938a:	d503      	bpl.n	9394 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1148>
    938c:	68e0      	ldr	r0, [r4, #12]
    938e:	78c0      	ldrb	r0, [r0, #3]
    9390:	2814      	cmp	r0, #20
    9392:	d010      	beq.n	93b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x116a>
    9394:	68a1      	ldr	r1, [r4, #8]
    9396:	f891 007d 	ldrb.w	r0, [r1, #125]	; 0x7d
    939a:	281c      	cmp	r0, #28
    939c:	d00b      	beq.n	93b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x116a>
    939e:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    93a2:	2801      	cmp	r0, #1
    93a4:	d00f      	beq.n	93c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x117a>
    93a6:	f891 019d 	ldrb.w	r0, [r1, #413]	; 0x19d
    93aa:	b960      	cbnz	r0, 93c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x117a>
    93ac:	e008      	b.n	93c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    93ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    93b2:	f7ff bfab 	b.w	930c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10c0>
    93b6:	68a1      	ldr	r1, [r4, #8]
    93b8:	2001      	movs	r0, #1
    93ba:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    93be:	e002      	b.n	93c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x117a>
    93c0:	f891 019c 	ldrb.w	r0, [r1, #412]	; 0x19c
    93c4:	b130      	cbz	r0, 93d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1188>
    93c6:	68a0      	ldr	r0, [r4, #8]
    93c8:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    93cc:	f041 0110 	orr.w	r1, r1, #16
    93d0:	7001      	strb	r1, [r0, #0]
    93d2:	e00e      	b.n	93f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11a6>
    93d4:	f891 007f 	ldrb.w	r0, [r1, #127]	; 0x7f
    93d8:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
    93dc:	f040 0020 	orr.w	r0, r0, #32
    93e0:	f881 007f 	strb.w	r0, [r1, #127]	; 0x7f
    93e4:	f831 0b28 	ldrh.w	r0, [r1], #40
    93e8:	f004 fd09 	bl	ddfe <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    93ec:	78a0      	ldrb	r0, [r4, #2]
    93ee:	f7fa fb05 	bl	39fc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    93f2:	f7ff f83d 	bl	8470 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x224>
    93f6:	2000      	movs	r0, #0
    93f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    93fa:	0000      	.short	0x0000
    93fc:	20000124 	.word	0x20000124
    9400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9402:	4c1a      	ldr	r4, [pc, #104]	; (946c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1220>)
    9404:	2301      	movs	r3, #1
    9406:	210a      	movs	r1, #10
    9408:	68a0      	ldr	r0, [r4, #8]
    940a:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    940e:	3070      	adds	r0, #112	; 0x70
    9410:	f004 f81b 	bl	d44a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9414:	b338      	cbz	r0, 9466 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x121a>
    9416:	6920      	ldr	r0, [r4, #16]
    9418:	f004 faa4 	bl	d964 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    941c:	b1c8      	cbz	r0, 9452 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1206>
    941e:	6920      	ldr	r0, [r4, #16]
    9420:	f004 fa92 	bl	d948 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    9424:	4607      	mov	r7, r0
    9426:	6920      	ldr	r0, [r4, #16]
    9428:	f004 fa92 	bl	d950 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    942c:	4606      	mov	r6, r0
    942e:	6920      	ldr	r0, [r4, #16]
    9430:	f004 fa88 	bl	d944 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    9434:	4605      	mov	r5, r0
    9436:	6920      	ldr	r0, [r4, #16]
    9438:	f004 fa88 	bl	d94c <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    943c:	4601      	mov	r1, r0
    943e:	9700      	str	r7, [sp, #0]
    9440:	68a0      	ldr	r0, [r4, #8]
    9442:	4633      	mov	r3, r6
    9444:	462a      	mov	r2, r5
    9446:	3028      	adds	r0, #40	; 0x28
    9448:	f004 fcd2 	bl	ddf0 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    944c:	68a0      	ldr	r0, [r4, #8]
    944e:	f004 fc45 	bl	dcdc <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    9452:	68a1      	ldr	r1, [r4, #8]
    9454:	2000      	movs	r0, #0
    9456:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    945a:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    945e:	f7ff f9b1 	bl	87c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x578>
    9462:	2000      	movs	r0, #0
    9464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9466:	2001      	movs	r0, #1
    9468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    946a:	0000      	.short	0x0000
    946c:	20000124 	.word	0x20000124
    9470:	b510      	push	{r4, lr}
    9472:	4c09      	ldr	r4, [pc, #36]	; (9498 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x124c>)
    9474:	68a0      	ldr	r0, [r4, #8]
    9476:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    947a:	0740      	lsls	r0, r0, #29
    947c:	d501      	bpl.n	9482 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1236>
    947e:	2001      	movs	r0, #1
    9480:	bd10      	pop	{r4, pc}
    9482:	f7fe fff5 	bl	8470 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x224>
    9486:	68a0      	ldr	r0, [r4, #8]
    9488:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    948c:	f041 0104 	orr.w	r1, r1, #4
    9490:	7001      	strb	r1, [r0, #0]
    9492:	2000      	movs	r0, #0
    9494:	bd10      	pop	{r4, pc}
    9496:	0000      	.short	0x0000
    9498:	20000124 	.word	0x20000124
    949c:	b510      	push	{r4, lr}
    949e:	4c09      	ldr	r4, [pc, #36]	; (94c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1278>)
    94a0:	2301      	movs	r3, #1
    94a2:	2109      	movs	r1, #9
    94a4:	68a0      	ldr	r0, [r4, #8]
    94a6:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    94aa:	3070      	adds	r0, #112	; 0x70
    94ac:	f003 ffcd 	bl	d44a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    94b0:	2800      	cmp	r0, #0
    94b2:	d006      	beq.n	94c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1276>
    94b4:	68a1      	ldr	r1, [r4, #8]
    94b6:	2000      	movs	r0, #0
    94b8:	f801 0f9a 	strb.w	r0, [r1, #154]!
    94bc:	7308      	strb	r0, [r1, #12]
    94be:	f801 0c1d 	strb.w	r0, [r1, #-29]
    94c2:	bd10      	pop	{r4, pc}
    94c4:	20000124 	.word	0x20000124
    94c8:	b510      	push	{r4, lr}
    94ca:	4c0f      	ldr	r4, [pc, #60]	; (9508 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12bc>)
    94cc:	2301      	movs	r3, #1
    94ce:	2100      	movs	r1, #0
    94d0:	68a0      	ldr	r0, [r4, #8]
    94d2:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    94d6:	3070      	adds	r0, #112	; 0x70
    94d8:	f003 ffb7 	bl	d44a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    94dc:	b138      	cbz	r0, 94ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12a2>
    94de:	f7fe ffc7 	bl	8470 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x224>
    94e2:	68a1      	ldr	r1, [r4, #8]
    94e4:	2010      	movs	r0, #16
    94e6:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    94ea:	2000      	movs	r0, #0
    94ec:	bd10      	pop	{r4, pc}
    94ee:	68a0      	ldr	r0, [r4, #8]
    94f0:	2301      	movs	r3, #1
    94f2:	2105      	movs	r1, #5
    94f4:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    94f8:	3070      	adds	r0, #112	; 0x70
    94fa:	f003 ffa6 	bl	d44a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    94fe:	b108      	cbz	r0, 9504 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12b8>
    9500:	2008      	movs	r0, #8
    9502:	bd10      	pop	{r4, pc}
    9504:	2001      	movs	r0, #1
    9506:	bd10      	pop	{r4, pc}
    9508:	20000124 	.word	0x20000124
    950c:	4806      	ldr	r0, [pc, #24]	; (9528 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12dc>)
    950e:	6880      	ldr	r0, [r0, #8]
    9510:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9514:	2911      	cmp	r1, #17
    9516:	d001      	beq.n	951c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12d0>
    9518:	2002      	movs	r0, #2
    951a:	4770      	bx	lr
    951c:	2112      	movs	r1, #18
    951e:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    9522:	2000      	movs	r0, #0
    9524:	4770      	bx	lr
    9526:	0000      	.short	0x0000
    9528:	20000124 	.word	0x20000124
    952c:	b570      	push	{r4, r5, r6, lr}
    952e:	4c31      	ldr	r4, [pc, #196]	; (95f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13a8>)
    9530:	2301      	movs	r3, #1
    9532:	210b      	movs	r1, #11
    9534:	68a0      	ldr	r0, [r4, #8]
    9536:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    953a:	3070      	adds	r0, #112	; 0x70
    953c:	f003 ff85 	bl	d44a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9540:	bb48      	cbnz	r0, 9596 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x134a>
    9542:	68a0      	ldr	r0, [r4, #8]
    9544:	2301      	movs	r3, #1
    9546:	2100      	movs	r1, #0
    9548:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    954c:	3070      	adds	r0, #112	; 0x70
    954e:	f003 ff7c 	bl	d44a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9552:	b1f0      	cbz	r0, 9592 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1346>
    9554:	68a0      	ldr	r0, [r4, #8]
    9556:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    955a:	2824      	cmp	r0, #36	; 0x24
    955c:	d01b      	beq.n	9596 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x134a>
    955e:	6920      	ldr	r0, [r4, #16]
    9560:	f004 fa1c 	bl	d99c <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    9564:	b1c8      	cbz	r0, 959a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x134e>
    9566:	68a0      	ldr	r0, [r4, #8]
    9568:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    956c:	f041 0104 	orr.w	r1, r1, #4
    9570:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    9574:	6921      	ldr	r1, [r4, #16]
    9576:	794a      	ldrb	r2, [r1, #5]
    9578:	f002 0207 	and.w	r2, r2, #7
    957c:	f880 205f 	strb.w	r2, [r0, #95]	; 0x5f
    9580:	7909      	ldrb	r1, [r1, #4]
    9582:	f001 0107 	and.w	r1, r1, #7
    9586:	f880 105e 	strb.w	r1, [r0, #94]	; 0x5e
    958a:	f890 31a7 	ldrb.w	r3, [r0, #423]	; 0x1a7
    958e:	bb43      	cbnz	r3, 95e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1396>
    9590:	e007      	b.n	95a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1356>
    9592:	2001      	movs	r0, #1
    9594:	bd70      	pop	{r4, r5, r6, pc}
    9596:	2020      	movs	r0, #32
    9598:	bd70      	pop	{r4, r5, r6, pc}
    959a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    959e:	f7ff beb5 	b.w	930c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10c0>
    95a2:	f890 31a6 	ldrb.w	r3, [r0, #422]	; 0x1a6
    95a6:	2b01      	cmp	r3, #1
    95a8:	d01b      	beq.n	95e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1396>
    95aa:	f100 0366 	add.w	r3, r0, #102	; 0x66
    95ae:	2501      	movs	r5, #1
    95b0:	785e      	ldrb	r6, [r3, #1]
    95b2:	428e      	cmp	r6, r1
    95b4:	d106      	bne.n	95c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1378>
    95b6:	7819      	ldrb	r1, [r3, #0]
    95b8:	4291      	cmp	r1, r2
    95ba:	d103      	bne.n	95c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1378>
    95bc:	2102      	movs	r1, #2
    95be:	f880 11a6 	strb.w	r1, [r0, #422]	; 0x1a6
    95c2:	e00e      	b.n	95e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1396>
    95c4:	f500 71fb 	add.w	r1, r0, #502	; 0x1f6
    95c8:	8802      	ldrh	r2, [r0, #0]
    95ca:	f821 2902 	strh.w	r2, [r1], #-2
    95ce:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
    95d2:	710a      	strb	r2, [r1, #4]
    95d4:	f890 005f 	ldrb.w	r0, [r0, #95]	; 0x5f
    95d8:	7148      	strb	r0, [r1, #5]
    95da:	700d      	strb	r5, [r1, #0]
    95dc:	78a0      	ldrb	r0, [r4, #2]
    95de:	f7fa fa0d 	bl	39fc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    95e2:	68a1      	ldr	r1, [r4, #8]
    95e4:	2021      	movs	r0, #33	; 0x21
    95e6:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    95ea:	f7fe ff41 	bl	8470 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x224>
    95ee:	2000      	movs	r0, #0
    95f0:	bd70      	pop	{r4, r5, r6, pc}
    95f2:	0000      	.short	0x0000
    95f4:	20000124 	.word	0x20000124
    95f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    95fc:	4c4e      	ldr	r4, [pc, #312]	; (9738 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14ec>)
    95fe:	68a0      	ldr	r0, [r4, #8]
    9600:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    9604:	2920      	cmp	r1, #32
    9606:	d009      	beq.n	961c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13d0>
    9608:	f05f 0700 	movs.w	r7, #0
    960c:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9610:	2922      	cmp	r1, #34	; 0x22
    9612:	d005      	beq.n	9620 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13d4>
    9614:	b387      	cbz	r7, 9678 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x142c>
    9616:	f100 057d 	add.w	r5, r0, #125	; 0x7d
    961a:	e003      	b.n	9624 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13d8>
    961c:	2701      	movs	r7, #1
    961e:	e7f5      	b.n	960c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13c0>
    9620:	f100 057e 	add.w	r5, r0, #126	; 0x7e
    9624:	f810 1fb4 	ldrb.w	r1, [r0, #180]!
    9628:	f041 0104 	orr.w	r1, r1, #4
    962c:	7001      	strb	r1, [r0, #0]
    962e:	6920      	ldr	r0, [r4, #16]
    9630:	f7fc fb6c 	bl	5d0c <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>
    9634:	f04f 0801 	mov.w	r8, #1
    9638:	2600      	movs	r6, #0
    963a:	b308      	cbz	r0, 9680 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1434>
    963c:	4639      	mov	r1, r7
    963e:	6920      	ldr	r0, [r4, #16]
    9640:	f7fe ffce 	bl	85e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x394>
    9644:	b1e0      	cbz	r0, 9680 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1434>
    9646:	466a      	mov	r2, sp
    9648:	6921      	ldr	r1, [r4, #16]
    964a:	68a0      	ldr	r0, [r4, #8]
    964c:	f004 f833 	bl	d6b6 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    9650:	b388      	cbz	r0, 96b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x146a>
    9652:	6920      	ldr	r0, [r4, #16]
    9654:	f004 f97e 	bl	d954 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    9658:	68a1      	ldr	r1, [r4, #8]
    965a:	f8a1 018c 	strh.w	r0, [r1, #396]	; 0x18c
    965e:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
    9662:	f005 f858 	bl	e716 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    9666:	b338      	cbz	r0, 96b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x146c>
    9668:	68a0      	ldr	r0, [r4, #8]
    966a:	2128      	movs	r1, #40	; 0x28
    966c:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
    9670:	306f      	adds	r0, #111	; 0x6f
    9672:	f880 801e 	strb.w	r8, [r0, #30]
    9676:	e053      	b.n	9720 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14d4>
    9678:	e7ff      	b.n	967a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x142e>
    967a:	2002      	movs	r0, #2
    967c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9680:	68a0      	ldr	r0, [r4, #8]
    9682:	f04f 0900 	mov.w	r9, #0
    9686:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    968a:	2901      	cmp	r1, #1
    968c:	d015      	beq.n	96ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x146e>
    968e:	f880 61a6 	strb.w	r6, [r0, #422]	; 0x1a6
    9692:	b1f7      	cbz	r7, 96d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1486>
    9694:	6920      	ldr	r0, [r4, #16]
    9696:	68a1      	ldr	r1, [r4, #8]
    9698:	78c0      	ldrb	r0, [r0, #3]
    969a:	f881 00e2 	strb.w	r0, [r1, #226]	; 0xe2
    969e:	fa08 f200 	lsl.w	r2, r8, r0
    96a2:	f3c2 6000 	ubfx	r0, r2, #24, #1
    96a6:	b160      	cbz	r0, 96c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1476>
    96a8:	200a      	movs	r0, #10
    96aa:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    96ae:	f891 00a6 	ldrb.w	r0, [r1, #166]	; 0xa6
    96b2:	b9a0      	cbnz	r0, 96de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1492>
    96b4:	e008      	b.n	96c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x147c>
    96b6:	e014      	b.n	96e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1496>
    96b8:	e027      	b.n	970a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14be>
    96ba:	201e      	movs	r0, #30
    96bc:	f7ff fcfc 	bl	90b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    96c0:	e7e7      	b.n	9692 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1446>
    96c2:	f44f 7172 	mov.w	r1, #968	; 0x3c8
    96c6:	e001      	b.n	96cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1480>
    96c8:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    96cc:	2031      	movs	r0, #49	; 0x31
    96ce:	f7fa fb45 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    96d2:	702e      	strb	r6, [r5, #0]
    96d4:	f7fe fed8 	bl	8488 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>
    96d8:	f7ff fe18 	bl	930c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10c0>
    96dc:	4681      	mov	r9, r0
    96de:	4648      	mov	r0, r9
    96e0:	e7cc      	b.n	967c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1430>
    96e2:	68a0      	ldr	r0, [r4, #8]
    96e4:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    96e8:	2901      	cmp	r1, #1
    96ea:	d009      	beq.n	9700 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14b4>
    96ec:	f880 61a6 	strb.w	r6, [r0, #422]	; 0x1a6
    96f0:	68a0      	ldr	r0, [r4, #8]
    96f2:	f100 017e 	add.w	r1, r0, #126	; 0x7e
    96f6:	428d      	cmp	r5, r1
    96f8:	d112      	bne.n	9720 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14d4>
    96fa:	f880 607e 	strb.w	r6, [r0, #126]	; 0x7e
    96fe:	e00f      	b.n	9720 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14d4>
    9700:	2000      	movs	r0, #0
    9702:	f7ff fcd9 	bl	90b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    9706:	702e      	strb	r6, [r5, #0]
    9708:	e7f2      	b.n	96f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a4>
    970a:	68a0      	ldr	r0, [r4, #8]
    970c:	f89d 1000 	ldrb.w	r1, [sp]
    9710:	f880 118e 	strb.w	r1, [r0, #398]	; 0x18e
    9714:	f89d 1001 	ldrb.w	r1, [sp, #1]
    9718:	f880 118f 	strb.w	r1, [r0, #399]	; 0x18f
    971c:	2024      	movs	r0, #36	; 0x24
    971e:	7028      	strb	r0, [r5, #0]
    9720:	68a0      	ldr	r0, [r4, #8]
    9722:	f100 017e 	add.w	r1, r0, #126	; 0x7e
    9726:	428d      	cmp	r5, r1
    9728:	d102      	bne.n	9730 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14e4>
    972a:	f7fe fead 	bl	8488 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>
    972e:	e001      	b.n	9734 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14e8>
    9730:	f880 60a6 	strb.w	r6, [r0, #166]	; 0xa6
    9734:	2000      	movs	r0, #0
    9736:	e7a1      	b.n	967c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1430>
    9738:	20000124 	.word	0x20000124
    973c:	b510      	push	{r4, lr}
    973e:	4c0a      	ldr	r4, [pc, #40]	; (9768 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x151c>)
    9740:	68a0      	ldr	r0, [r4, #8]
    9742:	f810 1fb4 	ldrb.w	r1, [r0, #180]!
    9746:	f041 0104 	orr.w	r1, r1, #4
    974a:	7001      	strb	r1, [r0, #0]
    974c:	6920      	ldr	r0, [r4, #16]
    974e:	f004 f92f 	bl	d9b0 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    9752:	2816      	cmp	r0, #22
    9754:	d001      	beq.n	975a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150e>
    9756:	2000      	movs	r0, #0
    9758:	bd10      	pop	{r4, pc}
    975a:	6920      	ldr	r0, [r4, #16]
    975c:	f004 f92a 	bl	d9b4 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    9760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9764:	f7fe be62 	b.w	842c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e0>
    9768:	20000124 	.word	0x20000124
    976c:	4802      	ldr	r0, [pc, #8]	; (9778 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x152c>)
    976e:	6900      	ldr	r0, [r0, #16]
    9770:	7900      	ldrb	r0, [r0, #4]
    9772:	f7fe be5b 	b.w	842c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e0>
    9776:	0000      	.short	0x0000
    9778:	20000124 	.word	0x20000124
    977c:	b510      	push	{r4, lr}
    977e:	4c08      	ldr	r4, [pc, #32]	; (97a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1554>)
    9780:	68a0      	ldr	r0, [r4, #8]
    9782:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    9786:	2817      	cmp	r0, #23
    9788:	d001      	beq.n	978e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1542>
    978a:	2002      	movs	r0, #2
    978c:	bd10      	pop	{r4, pc}
    978e:	f7fe fe7b 	bl	8488 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>
    9792:	68a1      	ldr	r1, [r4, #8]
    9794:	201b      	movs	r0, #27
    9796:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    979a:	2000      	movs	r0, #0
    979c:	bd10      	pop	{r4, pc}
    979e:	0000      	.short	0x0000
    97a0:	20000124 	.word	0x20000124
    97a4:	b510      	push	{r4, lr}
    97a6:	4c0b      	ldr	r4, [pc, #44]	; (97d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1588>)
    97a8:	2301      	movs	r3, #1
    97aa:	4619      	mov	r1, r3
    97ac:	68a0      	ldr	r0, [r4, #8]
    97ae:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    97b2:	3070      	adds	r0, #112	; 0x70
    97b4:	f003 fe49 	bl	d44a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    97b8:	b108      	cbz	r0, 97be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1572>
    97ba:	2000      	movs	r0, #0
    97bc:	bd10      	pop	{r4, pc}
    97be:	6920      	ldr	r0, [r4, #16]
    97c0:	f004 f8cc 	bl	d95c <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    97c4:	68a1      	ldr	r1, [r4, #8]
    97c6:	f881 0172 	strb.w	r0, [r1, #370]	; 0x172
    97ca:	2007      	movs	r0, #7
    97cc:	f881 0080 	strb.w	r0, [r1, #128]	; 0x80
    97d0:	e7f3      	b.n	97ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x156e>
    97d2:	0000      	.short	0x0000
    97d4:	20000124 	.word	0x20000124
    97d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    97dc:	4c37      	ldr	r4, [pc, #220]	; (98bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1670>)
    97de:	2600      	movs	r6, #0
    97e0:	4620      	mov	r0, r4
    97e2:	68a1      	ldr	r1, [r4, #8]
    97e4:	6900      	ldr	r0, [r0, #16]
    97e6:	2701      	movs	r7, #1
    97e8:	f891 307d 	ldrb.w	r3, [r1, #125]	; 0x7d
    97ec:	7900      	ldrb	r0, [r0, #4]
    97ee:	2b0e      	cmp	r3, #14
    97f0:	d101      	bne.n	97f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15aa>
    97f2:	2812      	cmp	r0, #18
    97f4:	d006      	beq.n	9804 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b8>
    97f6:	4a31      	ldr	r2, [pc, #196]	; (98bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1670>)
    97f8:	2500      	movs	r5, #0
    97fa:	6892      	ldr	r2, [r2, #8]
    97fc:	32b4      	adds	r2, #180	; 0xb4
    97fe:	2b1c      	cmp	r3, #28
    9800:	d004      	beq.n	980c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c0>
    9802:	e005      	b.n	9810 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c4>
    9804:	f7ff fe4a 	bl	949c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1250>
    9808:	4606      	mov	r6, r0
    980a:	e054      	b.n	98b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x166a>
    980c:	2814      	cmp	r0, #20
    980e:	d002      	beq.n	9816 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ca>
    9810:	2b04      	cmp	r3, #4
    9812:	d00b      	beq.n	982c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15e0>
    9814:	e00c      	b.n	9830 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15e4>
    9816:	f881 507d 	strb.w	r5, [r1, #125]	; 0x7d
    981a:	f881 50a6 	strb.w	r5, [r1, #166]	; 0xa6
    981e:	2105      	movs	r1, #5
    9820:	4610      	mov	r0, r2
    9822:	f004 ff38 	bl	e696 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x262>
    9826:	f7fe ffcd 	bl	87c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x578>
    982a:	e044      	b.n	98b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x166a>
    982c:	280e      	cmp	r0, #14
    982e:	d002      	beq.n	9836 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ea>
    9830:	2b20      	cmp	r3, #32
    9832:	d010      	beq.n	9856 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x160a>
    9834:	e011      	b.n	985a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x160e>
    9836:	f881 507d 	strb.w	r5, [r1, #125]	; 0x7d
    983a:	f881 50a6 	strb.w	r5, [r1, #166]	; 0xa6
    983e:	8808      	ldrh	r0, [r1, #0]
    9840:	f8a1 0206 	strh.w	r0, [r1, #518]	; 0x206
    9844:	201a      	movs	r0, #26
    9846:	f881 0204 	strb.w	r0, [r1, #516]	; 0x204
    984a:	f881 7202 	strb.w	r7, [r1, #514]	; 0x202
    984e:	78a0      	ldrb	r0, [r4, #2]
    9850:	f7fa f8d4 	bl	39fc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9854:	e02f      	b.n	98b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x166a>
    9856:	2816      	cmp	r0, #22
    9858:	d006      	beq.n	9868 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x161c>
    985a:	2b26      	cmp	r3, #38	; 0x26
    985c:	d101      	bne.n	9862 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1616>
    985e:	2816      	cmp	r0, #22
    9860:	d002      	beq.n	9868 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x161c>
    9862:	2817      	cmp	r0, #23
    9864:	d014      	beq.n	9890 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1644>
    9866:	e026      	b.n	98b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x166a>
    9868:	f801 5f7d 	strb.w	r5, [r1, #125]!
    986c:	f881 5029 	strb.w	r5, [r1, #41]	; 0x29
    9870:	7848      	ldrb	r0, [r1, #1]
    9872:	2821      	cmp	r0, #33	; 0x21
    9874:	d01f      	beq.n	98b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x166a>
    9876:	2108      	movs	r1, #8
    9878:	4610      	mov	r0, r2
    987a:	f004 ff0c 	bl	e696 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x262>
    987e:	68a0      	ldr	r0, [r4, #8]
    9880:	210b      	movs	r1, #11
    9882:	30b4      	adds	r0, #180	; 0xb4
    9884:	f004 ff07 	bl	e696 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x262>
    9888:	201a      	movs	r0, #26
    988a:	f7ff fc15 	bl	90b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    988e:	e012      	b.n	98b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x166a>
    9890:	f891 007e 	ldrb.w	r0, [r1, #126]	; 0x7e
    9894:	2822      	cmp	r0, #34	; 0x22
    9896:	d10e      	bne.n	98b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x166a>
    9898:	f881 507e 	strb.w	r5, [r1, #126]	; 0x7e
    989c:	f7fe fdf4 	bl	8488 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>
    98a0:	68a0      	ldr	r0, [r4, #8]
    98a2:	f890 01a6 	ldrb.w	r0, [r0, #422]	; 0x1a6
    98a6:	2801      	cmp	r0, #1
    98a8:	d102      	bne.n	98b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1664>
    98aa:	2000      	movs	r0, #0
    98ac:	f7ff fc04 	bl	90b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    98b0:	68a0      	ldr	r0, [r4, #8]
    98b2:	f880 51a6 	strb.w	r5, [r0, #422]	; 0x1a6
    98b6:	4630      	mov	r0, r6
    98b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    98bc:	20000124 	.word	0x20000124
    98c0:	b570      	push	{r4, r5, r6, lr}
    98c2:	4c2d      	ldr	r4, [pc, #180]	; (9978 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x172c>)
    98c4:	68a0      	ldr	r0, [r4, #8]
    98c6:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    98ca:	0789      	lsls	r1, r1, #30
    98cc:	d507      	bpl.n	98de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1692>
    98ce:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    98d2:	2301      	movs	r3, #1
    98d4:	2108      	movs	r1, #8
    98d6:	3070      	adds	r0, #112	; 0x70
    98d8:	f003 fdb7 	bl	d44a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    98dc:	b1e8      	cbz	r0, 991a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16ce>
    98de:	68a0      	ldr	r0, [r4, #8]
    98e0:	f890 00ae 	ldrb.w	r0, [r0, #174]	; 0xae
    98e4:	0780      	lsls	r0, r0, #30
    98e6:	d412      	bmi.n	990e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c2>
    98e8:	6920      	ldr	r0, [r4, #16]
    98ea:	f004 f839 	bl	d960 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    98ee:	68a1      	ldr	r1, [r4, #8]
    98f0:	f881 00af 	strb.w	r0, [r1, #175]	; 0xaf
    98f4:	6920      	ldr	r0, [r4, #16]
    98f6:	f830 2f05 	ldrh.w	r2, [r0, #5]!
    98fa:	f8a1 20b0 	strh.w	r2, [r1, #176]	; 0xb0
    98fe:	8840      	ldrh	r0, [r0, #2]
    9900:	f8a1 00b2 	strh.w	r0, [r1, #178]	; 0xb2
    9904:	f811 0fae 	ldrb.w	r0, [r1, #174]!
    9908:	f040 0002 	orr.w	r0, r0, #2
    990c:	7008      	strb	r0, [r1, #0]
    990e:	68a0      	ldr	r0, [r4, #8]
    9910:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    9914:	07c9      	lsls	r1, r1, #31
    9916:	d002      	beq.n	991e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d2>
    9918:	e010      	b.n	993c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16f0>
    991a:	2001      	movs	r0, #1
    991c:	bd70      	pop	{r4, r5, r6, pc}
    991e:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    9922:	078a      	lsls	r2, r1, #30
    9924:	d504      	bpl.n	9930 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16e4>
    9926:	f240 21d9 	movw	r1, #729	; 0x2d9
    992a:	2031      	movs	r0, #49	; 0x31
    992c:	f7fa fa16 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9930:	f041 0102 	orr.w	r1, r1, #2
    9934:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    9938:	f7fe fd9a 	bl	8470 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x224>
    993c:	68a0      	ldr	r0, [r4, #8]
    993e:	2500      	movs	r5, #0
    9940:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    9944:	2906      	cmp	r1, #6
    9946:	d106      	bne.n	9956 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170a>
    9948:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
    994c:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    9950:	78a0      	ldrb	r0, [r4, #2]
    9952:	f7fa f853 	bl	39fc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9956:	68a0      	ldr	r0, [r4, #8]
    9958:	f890 11ac 	ldrb.w	r1, [r0, #428]	; 0x1ac
    995c:	b151      	cbz	r1, 9974 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1728>
    995e:	f880 51ac 	strb.w	r5, [r0, #428]	; 0x1ac
    9962:	78a0      	ldrb	r0, [r4, #2]
    9964:	f7fa f84a 	bl	39fc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9968:	68a0      	ldr	r0, [r4, #8]
    996a:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    996e:	b909      	cbnz	r1, 9974 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1728>
    9970:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    9974:	2000      	movs	r0, #0
    9976:	bd70      	pop	{r4, r5, r6, pc}
    9978:	20000124 	.word	0x20000124
    997c:	b510      	push	{r4, lr}
    997e:	4c17      	ldr	r4, [pc, #92]	; (99dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1790>)
    9980:	68a3      	ldr	r3, [r4, #8]
    9982:	f893 00ea 	ldrb.w	r0, [r3, #234]	; 0xea
    9986:	2808      	cmp	r0, #8
    9988:	d20e      	bcs.n	99a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x175c>
    998a:	f100 0208 	add.w	r2, r0, #8
    998e:	f1c0 0008 	rsb	r0, r0, #8
    9992:	b2c1      	uxtb	r1, r0
    9994:	1898      	adds	r0, r3, r2
    9996:	f500 7084 	add.w	r0, r0, #264	; 0x108
    999a:	f7fa fa6f 	bl	3e7c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    999e:	68a1      	ldr	r1, [r4, #8]
    99a0:	f811 2fea 	ldrb.w	r2, [r1, #234]!
    99a4:	4410      	add	r0, r2
    99a6:	7008      	strb	r0, [r1, #0]
    99a8:	68a3      	ldr	r3, [r4, #8]
    99aa:	f893 00ea 	ldrb.w	r0, [r3, #234]	; 0xea
    99ae:	3808      	subs	r0, #8
    99b0:	2804      	cmp	r0, #4
    99b2:	d211      	bcs.n	99d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x178c>
    99b4:	1d02      	adds	r2, r0, #4
    99b6:	f1c0 0004 	rsb	r0, r0, #4
    99ba:	b2c1      	uxtb	r1, r0
    99bc:	1898      	adds	r0, r3, r2
    99be:	30d8      	adds	r0, #216	; 0xd8
    99c0:	f7fa fa5c 	bl	3e7c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    99c4:	68a0      	ldr	r0, [r4, #8]
    99c6:	2100      	movs	r1, #0
    99c8:	f880 10ea 	strb.w	r1, [r0, #234]	; 0xea
    99cc:	2101      	movs	r1, #1
    99ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    99d2:	2004      	movs	r0, #4
    99d4:	f7ff ba8e 	b.w	8ef4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca8>
    99d8:	bd10      	pop	{r4, pc}
    99da:	0000      	.short	0x0000
    99dc:	20000124 	.word	0x20000124
    99e0:	4804      	ldr	r0, [pc, #16]	; (99f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17a8>)
    99e2:	2127      	movs	r1, #39	; 0x27
    99e4:	6880      	ldr	r0, [r0, #8]
    99e6:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    99ea:	2100      	movs	r1, #0
    99ec:	f880 1184 	strb.w	r1, [r0, #388]	; 0x184
    99f0:	4770      	bx	lr
    99f2:	0000      	.short	0x0000
    99f4:	20000124 	.word	0x20000124
    99f8:	4809      	ldr	r0, [pc, #36]	; (9a20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17d4>)
    99fa:	b510      	push	{r4, lr}
    99fc:	6880      	ldr	r0, [r0, #8]
    99fe:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9a02:	2914      	cmp	r1, #20
    9a04:	d004      	beq.n	9a10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17c4>
    9a06:	f240 6189 	movw	r1, #1673	; 0x689
    9a0a:	2031      	movs	r0, #49	; 0x31
    9a0c:	f7fa f9a6 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9a10:	2101      	movs	r1, #1
    9a12:	f880 10ab 	strb.w	r1, [r0, #171]	; 0xab
    9a16:	2115      	movs	r1, #21
    9a18:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    9a1c:	bd10      	pop	{r4, pc}
    9a1e:	0000      	.short	0x0000
    9a20:	20000124 	.word	0x20000124
    9a24:	b510      	push	{r4, lr}
    9a26:	4c0a      	ldr	r4, [pc, #40]	; (9a50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1804>)
    9a28:	68a0      	ldr	r0, [r4, #8]
    9a2a:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    9a2e:	07c0      	lsls	r0, r0, #31
    9a30:	d008      	beq.n	9a44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17f8>
    9a32:	f7fe fd29 	bl	8488 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>
    9a36:	68a0      	ldr	r0, [r4, #8]
    9a38:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    9a3c:	f021 0101 	bic.w	r1, r1, #1
    9a40:	7001      	strb	r1, [r0, #0]
    9a42:	bd10      	pop	{r4, pc}
    9a44:	f240 6172 	movw	r1, #1650	; 0x672
    9a48:	2031      	movs	r0, #49	; 0x31
    9a4a:	f7fa f987 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9a4e:	0000      	.short	0x0000
    9a50:	20000124 	.word	0x20000124
    9a54:	b510      	push	{r4, lr}
    9a56:	4c0a      	ldr	r4, [pc, #40]	; (9a80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1834>)
    9a58:	2301      	movs	r3, #1
    9a5a:	2100      	movs	r1, #0
    9a5c:	68a0      	ldr	r0, [r4, #8]
    9a5e:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9a62:	3070      	adds	r0, #112	; 0x70
    9a64:	f003 fcf1 	bl	d44a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9a68:	b120      	cbz	r0, 9a74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1828>
    9a6a:	68a1      	ldr	r1, [r4, #8]
    9a6c:	201c      	movs	r0, #28
    9a6e:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    9a72:	bd10      	pop	{r4, pc}
    9a74:	f240 61f7 	movw	r1, #1783	; 0x6f7
    9a78:	2031      	movs	r0, #49	; 0x31
    9a7a:	f7fa f96f 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9a7e:	0000      	.short	0x0000
    9a80:	20000124 	.word	0x20000124
    9a84:	480a      	ldr	r0, [pc, #40]	; (9ab0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1864>)
    9a86:	b510      	push	{r4, lr}
    9a88:	6880      	ldr	r0, [r0, #8]
    9a8a:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    9a8e:	f3c1 1201 	ubfx	r2, r1, #4, #2
    9a92:	2a01      	cmp	r2, #1
    9a94:	d004      	beq.n	9aa0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1854>
    9a96:	f240 61fe 	movw	r1, #1790	; 0x6fe
    9a9a:	2031      	movs	r0, #49	; 0x31
    9a9c:	f7fa f95e 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9aa0:	f021 0110 	bic.w	r1, r1, #16
    9aa4:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    9aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9aac:	f7fe bcec 	b.w	8488 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>
    9ab0:	20000124 	.word	0x20000124
    9ab4:	b510      	push	{r4, lr}
    9ab6:	4c0a      	ldr	r4, [pc, #40]	; (9ae0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1894>)
    9ab8:	2301      	movs	r3, #1
    9aba:	2100      	movs	r1, #0
    9abc:	68a0      	ldr	r0, [r4, #8]
    9abe:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9ac2:	3070      	adds	r0, #112	; 0x70
    9ac4:	f003 fcc1 	bl	d44a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9ac8:	b120      	cbz	r0, 9ad4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1888>
    9aca:	68a1      	ldr	r1, [r4, #8]
    9acc:	200e      	movs	r0, #14
    9ace:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    9ad2:	bd10      	pop	{r4, pc}
    9ad4:	f240 61ea 	movw	r1, #1770	; 0x6ea
    9ad8:	2031      	movs	r0, #49	; 0x31
    9ada:	f7fa f93f 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9ade:	0000      	.short	0x0000
    9ae0:	20000124 	.word	0x20000124
    9ae4:	4804      	ldr	r0, [pc, #16]	; (9af8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18ac>)
    9ae6:	6880      	ldr	r0, [r0, #8]
    9ae8:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    9aec:	f021 0104 	bic.w	r1, r1, #4
    9af0:	7001      	strb	r1, [r0, #0]
    9af2:	f7fe bcc9 	b.w	8488 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>
    9af6:	0000      	.short	0x0000
    9af8:	20000124 	.word	0x20000124
    9afc:	4809      	ldr	r0, [pc, #36]	; (9b24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18d8>)
    9afe:	b510      	push	{r4, lr}
    9b00:	6880      	ldr	r0, [r0, #8]
    9b02:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9b06:	2910      	cmp	r1, #16
    9b08:	d004      	beq.n	9b14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18c8>
    9b0a:	f240 6181 	movw	r1, #1665	; 0x681
    9b0e:	2031      	movs	r0, #49	; 0x31
    9b10:	f7fa f924 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9b14:	2101      	movs	r1, #1
    9b16:	f880 10ab 	strb.w	r1, [r0, #171]	; 0xab
    9b1a:	2111      	movs	r1, #17
    9b1c:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    9b20:	bd10      	pop	{r4, pc}
    9b22:	0000      	.short	0x0000
    9b24:	20000124 	.word	0x20000124
    9b28:	b510      	push	{r4, lr}
    9b2a:	4c0a      	ldr	r4, [pc, #40]	; (9b54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1908>)
    9b2c:	2301      	movs	r3, #1
    9b2e:	2100      	movs	r1, #0
    9b30:	68a0      	ldr	r0, [r4, #8]
    9b32:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9b36:	3070      	adds	r0, #112	; 0x70
    9b38:	f003 fc87 	bl	d44a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9b3c:	b120      	cbz	r0, 9b48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18fc>
    9b3e:	68a1      	ldr	r1, [r4, #8]
    9b40:	201f      	movs	r0, #31
    9b42:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    9b46:	bd10      	pop	{r4, pc}
    9b48:	f240 710a 	movw	r1, #1802	; 0x70a
    9b4c:	2031      	movs	r0, #49	; 0x31
    9b4e:	f7fa f905 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9b52:	0000      	.short	0x0000
    9b54:	20000124 	.word	0x20000124
    9b58:	4808      	ldr	r0, [pc, #32]	; (9b7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1930>)
    9b5a:	b510      	push	{r4, lr}
    9b5c:	6880      	ldr	r0, [r0, #8]
    9b5e:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9b62:	2921      	cmp	r1, #33	; 0x21
    9b64:	d005      	beq.n	9b72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1926>
    9b66:	b121      	cbz	r1, 9b72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1926>
    9b68:	f240 7111 	movw	r1, #1809	; 0x711
    9b6c:	2031      	movs	r0, #49	; 0x31
    9b6e:	f7fa f8f5 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9b72:	2122      	movs	r1, #34	; 0x22
    9b74:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    9b78:	bd10      	pop	{r4, pc}
    9b7a:	0000      	.short	0x0000
    9b7c:	20000124 	.word	0x20000124
    9b80:	4807      	ldr	r0, [pc, #28]	; (9ba0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1954>)
    9b82:	b510      	push	{r4, lr}
    9b84:	6880      	ldr	r0, [r0, #8]
    9b86:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9b8a:	2915      	cmp	r1, #21
    9b8c:	d004      	beq.n	9b98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194c>
    9b8e:	f240 6196 	movw	r1, #1686	; 0x696
    9b92:	2031      	movs	r0, #49	; 0x31
    9b94:	f7fa f8e2 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9b98:	2119      	movs	r1, #25
    9b9a:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    9b9e:	bd10      	pop	{r4, pc}
    9ba0:	20000124 	.word	0x20000124
    9ba4:	4807      	ldr	r0, [pc, #28]	; (9bc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>)
    9ba6:	b510      	push	{r4, lr}
    9ba8:	6880      	ldr	r0, [r0, #8]
    9baa:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9bae:	2915      	cmp	r1, #21
    9bb0:	d004      	beq.n	9bbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1970>
    9bb2:	f44f 61d2 	mov.w	r1, #1680	; 0x690
    9bb6:	2031      	movs	r0, #49	; 0x31
    9bb8:	f7fa f8d0 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9bbc:	2117      	movs	r1, #23
    9bbe:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    9bc2:	bd10      	pop	{r4, pc}
    9bc4:	20000124 	.word	0x20000124
    9bc8:	b570      	push	{r4, r5, r6, lr}
    9bca:	4d1b      	ldr	r5, [pc, #108]	; (9c38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19ec>)
    9bcc:	68a8      	ldr	r0, [r5, #8]
    9bce:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9bd2:	291b      	cmp	r1, #27
    9bd4:	d002      	beq.n	9bdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1990>
    9bd6:	f44f 61d6 	mov.w	r1, #1712	; 0x6b0
    9bda:	e007      	b.n	9bec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19a0>
    9bdc:	2400      	movs	r4, #0
    9bde:	f880 40ab 	strb.w	r4, [r0, #171]	; 0xab
    9be2:	f890 11bc 	ldrb.w	r1, [r0, #444]	; 0x1bc
    9be6:	b121      	cbz	r1, 9bf2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19a6>
    9be8:	f240 61b4 	movw	r1, #1716	; 0x6b4
    9bec:	2031      	movs	r0, #49	; 0x31
    9bee:	f7fa f8b5 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9bf2:	f890 10ac 	ldrb.w	r1, [r0, #172]	; 0xac
    9bf6:	b141      	cbz	r1, 9c0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19be>
    9bf8:	f880 40ac 	strb.w	r4, [r0, #172]	; 0xac
    9bfc:	8801      	ldrh	r1, [r0, #0]
    9bfe:	f8a0 11c0 	strh.w	r1, [r0, #448]	; 0x1c0
    9c02:	f880 41be 	strb.w	r4, [r0, #446]	; 0x1be
    9c06:	210c      	movs	r1, #12
    9c08:	e008      	b.n	9c1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19d0>
    9c0a:	8801      	ldrh	r1, [r0, #0]
    9c0c:	f8a0 11c0 	strh.w	r1, [r0, #448]	; 0x1c0
    9c10:	f880 41be 	strb.w	r4, [r0, #446]	; 0x1be
    9c14:	2101      	movs	r1, #1
    9c16:	f880 11c2 	strb.w	r1, [r0, #450]	; 0x1c2
    9c1a:	210b      	movs	r1, #11
    9c1c:	f880 11bc 	strb.w	r1, [r0, #444]	; 0x1bc
    9c20:	8800      	ldrh	r0, [r0, #0]
    9c22:	f7fa fcab 	bl	457c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    9c26:	f003 f984 	bl	cf32 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    9c2a:	78a8      	ldrb	r0, [r5, #2]
    9c2c:	f7f9 fee6 	bl	39fc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9c30:	68a8      	ldr	r0, [r5, #8]
    9c32:	f880 407e 	strb.w	r4, [r0, #126]	; 0x7e
    9c36:	bd70      	pop	{r4, r5, r6, pc}
    9c38:	20000124 	.word	0x20000124
    9c3c:	b510      	push	{r4, lr}
    9c3e:	4c08      	ldr	r4, [pc, #32]	; (9c60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a14>)
    9c40:	2301      	movs	r3, #1
    9c42:	4619      	mov	r1, r3
    9c44:	68a0      	ldr	r0, [r4, #8]
    9c46:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    9c4a:	3070      	adds	r0, #112	; 0x70
    9c4c:	f003 fbfd 	bl	d44a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9c50:	2800      	cmp	r0, #0
    9c52:	d103      	bne.n	9c5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a10>
    9c54:	68a1      	ldr	r1, [r4, #8]
    9c56:	2008      	movs	r0, #8
    9c58:	f881 0080 	strb.w	r0, [r1, #128]	; 0x80
    9c5c:	bd10      	pop	{r4, pc}
    9c5e:	0000      	.short	0x0000
    9c60:	20000124 	.word	0x20000124
    9c64:	4814      	ldr	r0, [pc, #80]	; (9cb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a6c>)
    9c66:	b510      	push	{r4, lr}
    9c68:	68c1      	ldr	r1, [r0, #12]
    9c6a:	6880      	ldr	r0, [r0, #8]
    9c6c:	7909      	ldrb	r1, [r1, #4]
    9c6e:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9c72:	2a0a      	cmp	r2, #10
    9c74:	d109      	bne.n	9c8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a3e>
    9c76:	f890 20e2 	ldrb.w	r2, [r0, #226]	; 0xe2
    9c7a:	428a      	cmp	r2, r1
    9c7c:	d105      	bne.n	9c8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a3e>
    9c7e:	2100      	movs	r1, #0
    9c80:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    9c84:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    9c88:	bd10      	pop	{r4, pc}
    9c8a:	f890 207f 	ldrb.w	r2, [r0, #127]	; 0x7f
    9c8e:	0713      	lsls	r3, r2, #28
    9c90:	d507      	bpl.n	9ca2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    9c92:	f022 0108 	bic.w	r1, r2, #8
    9c96:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    9c9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9c9e:	f7fe bbf3 	b.w	8488 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>
    9ca2:	29ff      	cmp	r1, #255	; 0xff
    9ca4:	d004      	beq.n	9cb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a64>
    9ca6:	f240 616c 	movw	r1, #1644	; 0x66c
    9caa:	2031      	movs	r0, #49	; 0x31
    9cac:	f7fa f856 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9cb4:	f7ff be94 	b.w	99e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1794>
    9cb8:	20000124 	.word	0x20000124
    9cbc:	b510      	push	{r4, lr}
    9cbe:	4c15      	ldr	r4, [pc, #84]	; (9d14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ac8>)
    9cc0:	68a0      	ldr	r0, [r4, #8]
    9cc2:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    9cc6:	0789      	lsls	r1, r1, #30
    9cc8:	d411      	bmi.n	9cee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aa2>
    9cca:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9cce:	2301      	movs	r3, #1
    9cd0:	2100      	movs	r1, #0
    9cd2:	3070      	adds	r0, #112	; 0x70
    9cd4:	f003 fbb9 	bl	d44a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9cd8:	b120      	cbz	r0, 9ce4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a98>
    9cda:	68a1      	ldr	r1, [r4, #8]
    9cdc:	2006      	movs	r0, #6
    9cde:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    9ce2:	e009      	b.n	9cf8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aac>
    9ce4:	f240 61d6 	movw	r1, #1750	; 0x6d6
    9ce8:	2031      	movs	r0, #49	; 0x31
    9cea:	f7fa f837 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9cee:	2100      	movs	r1, #0
    9cf0:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    9cf4:	f880 11ac 	strb.w	r1, [r0, #428]	; 0x1ac
    9cf8:	68a0      	ldr	r0, [r4, #8]
    9cfa:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    9cfe:	0780      	lsls	r0, r0, #30
    9d00:	d507      	bpl.n	9d12 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ac6>
    9d02:	f7fe fbc1 	bl	8488 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>
    9d06:	68a0      	ldr	r0, [r4, #8]
    9d08:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    9d0c:	f021 0102 	bic.w	r1, r1, #2
    9d10:	7001      	strb	r1, [r0, #0]
    9d12:	bd10      	pop	{r4, pc}
    9d14:	20000124 	.word	0x20000124
    9d18:	4808      	ldr	r0, [pc, #32]	; (9d3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af0>)
    9d1a:	b510      	push	{r4, lr}
    9d1c:	6880      	ldr	r0, [r0, #8]
    9d1e:	f890 1083 	ldrb.w	r1, [r0, #131]	; 0x83
    9d22:	b941      	cbnz	r1, 9d36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aea>
    9d24:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9d28:	2301      	movs	r3, #1
    9d2a:	2106      	movs	r1, #6
    9d2c:	3070      	adds	r0, #112	; 0x70
    9d2e:	f003 fb8c 	bl	d44a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9d32:	2800      	cmp	r0, #0
    9d34:	d000      	beq.n	9d38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aec>
    9d36:	2001      	movs	r0, #1
    9d38:	bd10      	pop	{r4, pc}
    9d3a:	0000      	.short	0x0000
    9d3c:	20000124 	.word	0x20000124
    9d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9d42:	4c54      	ldr	r4, [pc, #336]	; (9e94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c48>)
    9d44:	4606      	mov	r6, r0
    9d46:	4615      	mov	r5, r2
    9d48:	68a0      	ldr	r0, [r4, #8]
    9d4a:	b109      	cbz	r1, 9d50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b04>
    9d4c:	2100      	movs	r1, #0
    9d4e:	e004      	b.n	9d5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b0e>
    9d50:	f8b0 1106 	ldrh.w	r1, [r0, #262]	; 0x106
    9d54:	f8b0 20f6 	ldrh.w	r2, [r0, #246]	; 0xf6
    9d58:	4411      	add	r1, r2
    9d5a:	f8a0 1106 	strh.w	r1, [r0, #262]	; 0x106
    9d5e:	f890 1170 	ldrb.w	r1, [r0, #368]	; 0x170
    9d62:	b939      	cbnz	r1, 9d74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b28>
    9d64:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    9d68:	2301      	movs	r3, #1
    9d6a:	4619      	mov	r1, r3
    9d6c:	3070      	adds	r0, #112	; 0x70
    9d6e:	f003 fb6c 	bl	d44a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9d72:	b130      	cbz	r0, 9d82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b36>
    9d74:	68a0      	ldr	r0, [r4, #8]
    9d76:	f830 1fa0 	ldrh.w	r1, [r0, #160]!
    9d7a:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
    9d7e:	4411      	add	r1, r2
    9d80:	8001      	strh	r1, [r0, #0]
    9d82:	68a0      	ldr	r0, [r4, #8]
    9d84:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    9d88:	b132      	cbz	r2, 9d98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b4c>
    9d8a:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
    9d8e:	f8b0 30f6 	ldrh.w	r3, [r0, #246]	; 0xf6
    9d92:	4419      	add	r1, r3
    9d94:	f8a0 10a2 	strh.w	r1, [r0, #162]	; 0xa2
    9d98:	f990 70aa 	ldrsb.w	r7, [r0, #170]	; 0xaa
    9d9c:	2f00      	cmp	r7, #0
    9d9e:	dd06      	ble.n	9dae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b62>
    9da0:	f8b0 10a8 	ldrh.w	r1, [r0, #168]	; 0xa8
    9da4:	f8b0 30f6 	ldrh.w	r3, [r0, #246]	; 0xf6
    9da8:	4419      	add	r1, r3
    9daa:	f8a0 10a8 	strh.w	r1, [r0, #168]	; 0xa8
    9dae:	2101      	movs	r1, #1
    9db0:	233d      	movs	r3, #61	; 0x3d
    9db2:	b116      	cbz	r6, 9dba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b6e>
    9db4:	f880 308e 	strb.w	r3, [r0, #142]	; 0x8e
    9db8:	e013      	b.n	9de2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b96>
    9dba:	7824      	ldrb	r4, [r4, #0]
    9dbc:	2c02      	cmp	r4, #2
    9dbe:	d00a      	beq.n	9dd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b8a>
    9dc0:	2c01      	cmp	r4, #1
    9dc2:	d012      	beq.n	9dea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b9e>
    9dc4:	b345      	cbz	r5, 9e18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bcc>
    9dc6:	f100 028d 	add.w	r2, r0, #141	; 0x8d
    9dca:	7011      	strb	r1, [r2, #0]
    9dcc:	f015 0f14 	tst.w	r5, #20
    9dd0:	d00e      	beq.n	9df0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba4>
    9dd2:	211e      	movs	r1, #30
    9dd4:	e018      	b.n	9e08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bbc>
    9dd6:	f890 20e6 	ldrb.w	r2, [r0, #230]	; 0xe6
    9dda:	2a06      	cmp	r2, #6
    9ddc:	d03e      	beq.n	9e5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c10>
    9dde:	2216      	movs	r2, #22
    9de0:	e03c      	b.n	9e5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c10>
    9de2:	f100 028d 	add.w	r2, r0, #141	; 0x8d
    9de6:	7011      	strb	r1, [r2, #0]
    9de8:	e041      	b.n	9e6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c22>
    9dea:	f890 2172 	ldrb.w	r2, [r0, #370]	; 0x172
    9dee:	e035      	b.n	9e5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c10>
    9df0:	0729      	lsls	r1, r5, #28
    9df2:	d502      	bpl.n	9dfa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bae>
    9df4:	f880 308e 	strb.w	r3, [r0, #142]	; 0x8e
    9df8:	e039      	b.n	9e6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c22>
    9dfa:	06a9      	lsls	r1, r5, #26
    9dfc:	d501      	bpl.n	9e02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bb6>
    9dfe:	2123      	movs	r1, #35	; 0x23
    9e00:	e002      	b.n	9e08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bbc>
    9e02:	07a9      	lsls	r1, r5, #30
    9e04:	d003      	beq.n	9e0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bc2>
    9e06:	212a      	movs	r1, #42	; 0x2a
    9e08:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
    9e0c:	e02f      	b.n	9e6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c22>
    9e0e:	f640 419d 	movw	r1, #3229	; 0xc9d
    9e12:	2031      	movs	r0, #49	; 0x31
    9e14:	f7f9 ffa2 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9e18:	b12a      	cbz	r2, 9e26 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bda>
    9e1a:	f8b0 20a2 	ldrh.w	r2, [r0, #162]	; 0xa2
    9e1e:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
    9e22:	429a      	cmp	r2, r3
    9e24:	d210      	bcs.n	9e48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bfc>
    9e26:	2f00      	cmp	r7, #0
    9e28:	dd05      	ble.n	9e36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bea>
    9e2a:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
    9e2e:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
    9e32:	429a      	cmp	r2, r3
    9e34:	d208      	bcs.n	9e48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bfc>
    9e36:	f8b0 30a0 	ldrh.w	r3, [r0, #160]	; 0xa0
    9e3a:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
    9e3e:	4293      	cmp	r3, r2
    9e40:	d304      	bcc.n	9e4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c00>
    9e42:	f890 3170 	ldrb.w	r3, [r0, #368]	; 0x170
    9e46:	b10b      	cbz	r3, 9e4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c00>
    9e48:	2222      	movs	r2, #34	; 0x22
    9e4a:	e007      	b.n	9e5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c10>
    9e4c:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
    9e50:	b13b      	cbz	r3, 9e62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c16>
    9e52:	f8b0 309c 	ldrh.w	r3, [r0, #156]	; 0x9c
    9e56:	4293      	cmp	r3, r2
    9e58:	d309      	bcc.n	9e6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c22>
    9e5a:	2208      	movs	r2, #8
    9e5c:	f880 208e 	strb.w	r2, [r0, #142]	; 0x8e
    9e60:	e7bf      	b.n	9de2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b96>
    9e62:	f8b0 209c 	ldrh.w	r2, [r0, #156]	; 0x9c
    9e66:	2a06      	cmp	r2, #6
    9e68:	d301      	bcc.n	9e6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c22>
    9e6a:	223e      	movs	r2, #62	; 0x3e
    9e6c:	e7f6      	b.n	9e5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c10>
    9e6e:	f890 108d 	ldrb.w	r1, [r0, #141]	; 0x8d
    9e72:	f88d 1000 	strb.w	r1, [sp]
    9e76:	9900      	ldr	r1, [sp, #0]
    9e78:	9100      	str	r1, [sp, #0]
    9e7a:	f89d 1000 	ldrb.w	r1, [sp]
    9e7e:	b119      	cbz	r1, 9e88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c3c>
    9e80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9e84:	f004 bc17 	b.w	e6b6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    9e88:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9e8c:	2100      	movs	r1, #0
    9e8e:	f7fd b9a1 	b.w	71d4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    9e92:	0000      	.short	0x0000
    9e94:	20000124 	.word	0x20000124
    9e98:	b570      	push	{r4, r5, r6, lr}
    9e9a:	4d2d      	ldr	r5, [pc, #180]	; (9f50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d04>)
    9e9c:	68a8      	ldr	r0, [r5, #8]
    9e9e:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    9ea2:	b151      	cbz	r1, 9eba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c6e>
    9ea4:	2901      	cmp	r1, #1
    9ea6:	d008      	beq.n	9eba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c6e>
    9ea8:	2902      	cmp	r1, #2
    9eaa:	d009      	beq.n	9ec0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c74>
    9eac:	2903      	cmp	r1, #3
    9eae:	d007      	beq.n	9ec0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c74>
    9eb0:	f640 215f 	movw	r1, #2655	; 0xa5f
    9eb4:	2031      	movs	r0, #49	; 0x31
    9eb6:	f7f9 ff51 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9eba:	f8b0 10f4 	ldrh.w	r1, [r0, #244]	; 0xf4
    9ebe:	e035      	b.n	9f2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ce0>
    9ec0:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
    9ec4:	2908      	cmp	r1, #8
    9ec6:	d034      	beq.n	9f32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ce6>
    9ec8:	f8b0 109c 	ldrh.w	r1, [r0, #156]	; 0x9c
    9ecc:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
    9ed0:	2400      	movs	r4, #0
    9ed2:	1c8b      	adds	r3, r1, #2
    9ed4:	429a      	cmp	r2, r3
    9ed6:	d306      	bcc.n	9ee6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c9a>
    9ed8:	1a51      	subs	r1, r2, r1
    9eda:	1e89      	subs	r1, r1, #2
    9edc:	040c      	lsls	r4, r1, #16
    9ede:	0c24      	lsrs	r4, r4, #16
    9ee0:	d001      	beq.n	9ee6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c9a>
    9ee2:	1e64      	subs	r4, r4, #1
    9ee4:	b2a4      	uxth	r4, r4
    9ee6:	f890 109a 	ldrb.w	r1, [r0, #154]	; 0x9a
    9eea:	b139      	cbz	r1, 9efc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cb0>
    9eec:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9ef0:	2301      	movs	r3, #1
    9ef2:	2109      	movs	r1, #9
    9ef4:	3070      	adds	r0, #112	; 0x70
    9ef6:	f003 faa8 	bl	d44a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9efa:	b330      	cbz	r0, 9f4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cfe>
    9efc:	f7ff ff0c 	bl	9d18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1acc>
    9f00:	b168      	cbz	r0, 9f1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cd2>
    9f02:	68a9      	ldr	r1, [r5, #8]
    9f04:	2000      	movs	r0, #0
    9f06:	3190      	adds	r1, #144	; 0x90
    9f08:	c906      	ldmia	r1, {r1, r2}
    9f0a:	1c8b      	adds	r3, r1, #2
    9f0c:	429a      	cmp	r2, r3
    9f0e:	d303      	bcc.n	9f18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ccc>
    9f10:	1a50      	subs	r0, r2, r1
    9f12:	1e80      	subs	r0, r0, #2
    9f14:	d000      	beq.n	9f18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ccc>
    9f16:	1e40      	subs	r0, r0, #1
    9f18:	42a0      	cmp	r0, r4
    9f1a:	d200      	bcs.n	9f1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cd2>
    9f1c:	b284      	uxth	r4, r0
    9f1e:	b10c      	cbz	r4, 9f24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cd8>
    9f20:	1e64      	subs	r4, r4, #1
    9f22:	b2a4      	uxth	r4, r4
    9f24:	68a8      	ldr	r0, [r5, #8]
    9f26:	f8b0 10f4 	ldrh.w	r1, [r0, #244]	; 0xf4
    9f2a:	4421      	add	r1, r4
    9f2c:	f8a0 10f0 	strh.w	r1, [r0, #240]	; 0xf0
    9f30:	bd70      	pop	{r4, r5, r6, pc}
    9f32:	f8b0 109c 	ldrh.w	r1, [r0, #156]	; 0x9c
    9f36:	2903      	cmp	r1, #3
    9f38:	d3bf      	bcc.n	9eba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c6e>
    9f3a:	f830 1f74 	ldrh.w	r1, [r0, #116]!
    9f3e:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
    9f40:	4411      	add	r1, r2
    9f42:	1c49      	adds	r1, r1, #1
    9f44:	f8a0 107c 	strh.w	r1, [r0, #124]	; 0x7c
    9f48:	bd70      	pop	{r4, r5, r6, pc}
    9f4a:	2400      	movs	r4, #0
    9f4c:	e7ea      	b.n	9f24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cd8>
    9f4e:	0000      	.short	0x0000
    9f50:	20000124 	.word	0x20000124

00009f54 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    9f54:	4903      	ldr	r1, [pc, #12]	; (9f64 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    9f56:	888a      	ldrh	r2, [r1, #4]
    9f58:	8002      	strh	r2, [r0, #0]
    9f5a:	7889      	ldrb	r1, [r1, #2]
    9f5c:	7081      	strb	r1, [r0, #2]
    9f5e:	2000      	movs	r0, #0
    9f60:	4770      	bx	lr
    9f62:	0000      	.short	0x0000
    9f64:	20000dd8 	.word	0x20000dd8

00009f68 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    9f68:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9f6c:	460d      	mov	r5, r1
    9f6e:	4606      	mov	r6, r0
    9f70:	f000 fc12 	bl	a798 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9f74:	f3c0 2000 	ubfx	r0, r0, #8, #1
    9f78:	b1e0      	cbz	r0, 9fb4 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x4c>
    9f7a:	8830      	ldrh	r0, [r6, #0]
    9f7c:	4669      	mov	r1, sp
    9f7e:	f003 fa3a 	bl	d3f6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    9f82:	2800      	cmp	r0, #0
    9f84:	d114      	bne.n	9fb0 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    9f86:	f8dd 4004 	ldr.w	r4, [sp, #4]
    9f8a:	2700      	movs	r7, #0
    9f8c:	f884 7068 	strb.w	r7, [r4, #104]	; 0x68
    9f90:	f814 0f66 	ldrb.w	r0, [r4, #102]!
    9f94:	f005 f8bf 	bl	f116 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
    9f98:	70a8      	strb	r0, [r5, #2]
    9f9a:	7860      	ldrb	r0, [r4, #1]
    9f9c:	f005 f8bb 	bl	f116 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
    9fa0:	70e8      	strb	r0, [r5, #3]
    9fa2:	78a0      	ldrb	r0, [r4, #2]
    9fa4:	3c66      	subs	r4, #102	; 0x66
    9fa6:	2800      	cmp	r0, #0
    9fa8:	d1f0      	bne.n	9f8c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x24>
    9faa:	8830      	ldrh	r0, [r6, #0]
    9fac:	8028      	strh	r0, [r5, #0]
    9fae:	2000      	movs	r0, #0
    9fb0:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    9fb4:	2001      	movs	r0, #1
    9fb6:	e7fb      	b.n	9fb0 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>

00009fb8 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    9fb8:	b51c      	push	{r2, r3, r4, lr}
    9fba:	8800      	ldrh	r0, [r0, #0]
    9fbc:	4669      	mov	r1, sp
    9fbe:	f003 fa1a 	bl	d3f6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    9fc2:	2800      	cmp	r0, #0
    9fc4:	d10b      	bne.n	9fde <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x26>
    9fc6:	480b      	ldr	r0, [pc, #44]	; (9ff4 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x3c>)
    9fc8:	7800      	ldrb	r0, [r0, #0]
    9fca:	b188      	cbz	r0, 9ff0 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x38>
    9fcc:	9801      	ldr	r0, [sp, #4]
    9fce:	f005 fa29 	bl	f424 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x346>
    9fd2:	b128      	cbz	r0, 9fe0 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x28>
    9fd4:	9801      	ldr	r0, [sp, #4]
    9fd6:	f890 01ad 	ldrb.w	r0, [r0, #429]	; 0x1ad
    9fda:	b118      	cbz	r0, 9fe4 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
    9fdc:	203a      	movs	r0, #58	; 0x3a
    9fde:	bd1c      	pop	{r2, r3, r4, pc}
    9fe0:	2002      	movs	r0, #2
    9fe2:	bd1c      	pop	{r2, r3, r4, pc}
    9fe4:	9901      	ldr	r1, [sp, #4]
    9fe6:	2001      	movs	r0, #1
    9fe8:	f881 01ad 	strb.w	r0, [r1, #429]	; 0x1ad
    9fec:	2000      	movs	r0, #0
    9fee:	bd1c      	pop	{r2, r3, r4, pc}
    9ff0:	2011      	movs	r0, #17
    9ff2:	bd1c      	pop	{r2, r3, r4, pc}
    9ff4:	20000200 	.word	0x20000200

00009ff8 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    9ff8:	b510      	push	{r4, lr}
    9ffa:	4604      	mov	r4, r0
    9ffc:	f005 fa09 	bl	f412 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x334>
    a000:	b130      	cbz	r0, a010 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x18>
    a002:	4804      	ldr	r0, [pc, #16]	; (a014 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x1c>)
    a004:	8941      	ldrh	r1, [r0, #10]
    a006:	8021      	strh	r1, [r4, #0]
    a008:	8980      	ldrh	r0, [r0, #12]
    a00a:	8060      	strh	r0, [r4, #2]
    a00c:	2000      	movs	r0, #0
    a00e:	bd10      	pop	{r4, pc}
    a010:	2001      	movs	r0, #1
    a012:	bd10      	pop	{r4, pc}
    a014:	20001024 	.word	0x20001024

0000a018 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    a018:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    a01a:	4605      	mov	r5, r0
    a01c:	f000 fbbc 	bl	a798 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a020:	f3c0 2000 	ubfx	r0, r0, #8, #1
    a024:	b310      	cbz	r0, a06c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
    a026:	2400      	movs	r4, #0
    a028:	a802      	add	r0, sp, #8
    a02a:	f88d 4004 	strb.w	r4, [sp, #4]
    a02e:	f88d 4008 	strb.w	r4, [sp, #8]
    a032:	9000      	str	r0, [sp, #0]
    a034:	78aa      	ldrb	r2, [r5, #2]
    a036:	7869      	ldrb	r1, [r5, #1]
    a038:	7828      	ldrb	r0, [r5, #0]
    a03a:	ab01      	add	r3, sp, #4
    a03c:	f005 fa27 	bl	f48e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3b0>
    a040:	2800      	cmp	r0, #0
    a042:	d112      	bne.n	a06a <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x52>
    a044:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a048:	f005 f944 	bl	f2d4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f6>
    a04c:	b180      	cbz	r0, a070 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    a04e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a052:	f005 f93f 	bl	f2d4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f6>
    a056:	b158      	cbz	r0, a070 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    a058:	4806      	ldr	r0, [pc, #24]	; (a074 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x5c>)
    a05a:	f89d 1004 	ldrb.w	r1, [sp, #4]
    a05e:	7481      	strb	r1, [r0, #18]
    a060:	f89d 1008 	ldrb.w	r1, [sp, #8]
    a064:	74c1      	strb	r1, [r0, #19]
    a066:	8284      	strh	r4, [r0, #20]
    a068:	2000      	movs	r0, #0
    a06a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a06c:	2001      	movs	r0, #1
    a06e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a070:	2011      	movs	r0, #17
    a072:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a074:	20000dd8 	.word	0x20000dd8

0000a078 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    a078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a07a:	460f      	mov	r7, r1
    a07c:	4605      	mov	r5, r0
    a07e:	7806      	ldrb	r6, [r0, #0]
    a080:	f005 f8d7 	bl	f232 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x154>
    a084:	2800      	cmp	r0, #0
    a086:	d10a      	bne.n	a09e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x26>
    a088:	4628      	mov	r0, r5
    a08a:	f005 f8b6 	bl	f1fa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x11c>
    a08e:	2800      	cmp	r0, #0
    a090:	d105      	bne.n	a09e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x26>
    a092:	2001      	movs	r0, #1
    a094:	f7fa f844 	bl	4120 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    a098:	4286      	cmp	r6, r0
    a09a:	d301      	bcc.n	a0a0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    a09c:	2007      	movs	r0, #7
    a09e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a0a0:	2101      	movs	r1, #1
    a0a2:	4630      	mov	r0, r6
    a0a4:	f003 f86f 	bl	d186 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    a0a8:	0004      	movs	r4, r0
    a0aa:	d10c      	bne.n	a0c6 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x4e>
    a0ac:	2200      	movs	r2, #0
    a0ae:	2101      	movs	r1, #1
    a0b0:	4630      	mov	r0, r6
    a0b2:	f003 f84c 	bl	d14e <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    a0b6:	0004      	movs	r4, r0
    a0b8:	d00b      	beq.n	a0d2 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x5a>
    a0ba:	f003 ff45 	bl	df48 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    a0be:	4915      	ldr	r1, [pc, #84]	; (a114 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x9c>)
    a0c0:	4620      	mov	r0, r4
    a0c2:	f003 ff27 	bl	df14 <sym_NBRKXV3VPUPRYSKCC4WABD5IHQ554YCWT43H5LY>
    a0c6:	4620      	mov	r0, r4
    a0c8:	f004 f953 	bl	e372 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    a0cc:	b130      	cbz	r0, a0dc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x64>
    a0ce:	200c      	movs	r0, #12
    a0d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a0d2:	f241 213b 	movw	r1, #4667	; 0x123b
    a0d6:	2039      	movs	r0, #57	; 0x39
    a0d8:	f7f9 fe40 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a0dc:	4620      	mov	r0, r4
    a0de:	f003 ff7f 	bl	dfe0 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    a0e2:	7038      	strb	r0, [r7, #0]
    a0e4:	74e8      	strb	r0, [r5, #19]
    a0e6:	4629      	mov	r1, r5
    a0e8:	4620      	mov	r0, r4
    a0ea:	f7fc f911 	bl	6310 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    a0ee:	4606      	mov	r6, r0
    a0f0:	7e68      	ldrb	r0, [r5, #25]
    a0f2:	b168      	cbz	r0, a110 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x98>
    a0f4:	b966      	cbnz	r6, a110 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x98>
    a0f6:	20ff      	movs	r0, #255	; 0xff
    a0f8:	f88d 0000 	strb.w	r0, [sp]
    a0fc:	466a      	mov	r2, sp
    a0fe:	2100      	movs	r1, #0
    a100:	4620      	mov	r0, r4
    a102:	f003 ff85 	bl	e010 <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>
    a106:	466a      	mov	r2, sp
    a108:	2100      	movs	r1, #0
    a10a:	4620      	mov	r0, r4
    a10c:	f003 ff8a 	bl	e024 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>
    a110:	4630      	mov	r0, r6
    a112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a114:	20001025 	.word	0x20001025

0000a118 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    a118:	7801      	ldrb	r1, [r0, #0]
    a11a:	b179      	cbz	r1, a13c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    a11c:	7841      	ldrb	r1, [r0, #1]
    a11e:	b169      	cbz	r1, a13c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    a120:	8841      	ldrh	r1, [r0, #2]
    a122:	291b      	cmp	r1, #27
    a124:	d30a      	bcc.n	a13c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    a126:	8881      	ldrh	r1, [r0, #4]
    a128:	291b      	cmp	r1, #27
    a12a:	d307      	bcc.n	a13c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    a12c:	4904      	ldr	r1, [pc, #16]	; (a140 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    a12e:	6802      	ldr	r2, [r0, #0]
    a130:	f8c1 2002 	str.w	r2, [r1, #2]
    a134:	8880      	ldrh	r0, [r0, #4]
    a136:	80c8      	strh	r0, [r1, #6]
    a138:	2000      	movs	r0, #0
    a13a:	4770      	bx	lr
    a13c:	2012      	movs	r0, #18
    a13e:	4770      	bx	lr
    a140:	20000dd8 	.word	0x20000dd8

0000a144 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    a144:	6800      	ldr	r0, [r0, #0]
    a146:	f240 41e2 	movw	r1, #1250	; 0x4e2
    a14a:	4288      	cmp	r0, r1
    a14c:	d303      	bcc.n	a156 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    a14e:	4903      	ldr	r1, [pc, #12]	; (a15c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    a150:	6088      	str	r0, [r1, #8]
    a152:	2000      	movs	r0, #0
    a154:	4770      	bx	lr
    a156:	2012      	movs	r0, #18
    a158:	4770      	bx	lr
    a15a:	0000      	.short	0x0000
    a15c:	20000dd8 	.word	0x20000dd8

0000a160 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    a160:	4a03      	ldr	r2, [pc, #12]	; (a170 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    a162:	e9d2 1200 	ldrd	r1, r2, [r2]
    a166:	6001      	str	r1, [r0, #0]
    a168:	6042      	str	r2, [r0, #4]
    a16a:	2000      	movs	r0, #0
    a16c:	4770      	bx	lr
    a16e:	0000      	.short	0x0000
    a170:	0000a618 	.word	0x0000a618

0000a174 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>:
    a174:	b510      	push	{r4, lr}
    a176:	2005      	movs	r0, #5
    a178:	f000 fb04 	bl	a784 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    a17c:	f7fd fe86 	bl	7e8c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    a180:	4902      	ldr	r1, [pc, #8]	; (a18c <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x18>)
    a182:	4801      	ldr	r0, [pc, #4]	; (a188 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x14>)
    a184:	6048      	str	r0, [r1, #4]
    a186:	bd10      	pop	{r4, pc}
    a188:	0000a259 	.word	0x0000a259
    a18c:	20000200 	.word	0x20000200

0000a190 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    a190:	4901      	ldr	r1, [pc, #4]	; (a198 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x8>)
    a192:	7048      	strb	r0, [r1, #1]
    a194:	f000 b802 	b.w	a19c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    a198:	20000200 	.word	0x20000200

0000a19c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    a19c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a1a0:	f003 f86a 	bl	d278 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    a1a4:	f7fb fa34 	bl	5610 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    a1a8:	4c1a      	ldr	r4, [pc, #104]	; (a214 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x78>)
    a1aa:	f64f 70ff 	movw	r0, #65535	; 0xffff
    a1ae:	2600      	movs	r6, #0
    a1b0:	81e0      	strh	r0, [r4, #14]
    a1b2:	8220      	strh	r0, [r4, #16]
    a1b4:	75e6      	strb	r6, [r4, #23]
    a1b6:	8326      	strh	r6, [r4, #24]
    a1b8:	8026      	strh	r6, [r4, #0]
    a1ba:	f7fa fa45 	bl	4648 <sym_PKTGUYYNUS27J44L7EHWCYKQLXYT4MJGKSXFMTI>
    a1be:	a016      	add	r0, pc, #88	; (adr r0, a218 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x7c>)
    a1c0:	4d17      	ldr	r5, [pc, #92]	; (a220 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x84>)
    a1c2:	6801      	ldr	r1, [r0, #0]
    a1c4:	7900      	ldrb	r0, [r0, #4]
    a1c6:	702e      	strb	r6, [r5, #0]
    a1c8:	f8c5 1001 	str.w	r1, [r5, #1]
    a1cc:	7168      	strb	r0, [r5, #5]
    a1ce:	2101      	movs	r1, #1
    a1d0:	2000      	movs	r0, #0
    a1d2:	f002 ffd8 	bl	d186 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    a1d6:	0007      	movs	r7, r0
    a1d8:	d005      	beq.n	a1e6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4a>
    a1da:	f003 feb5 	bl	df48 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    a1de:	1c69      	adds	r1, r5, #1
    a1e0:	4638      	mov	r0, r7
    a1e2:	f003 fe97 	bl	df14 <sym_NBRKXV3VPUPRYSKCC4WABD5IHQ554YCWT43H5LY>
    a1e6:	201b      	movs	r0, #27
    a1e8:	80e8      	strh	r0, [r5, #6]
    a1ea:	f44f 71a4 	mov.w	r1, #328	; 0x148
    a1ee:	8129      	strh	r1, [r5, #8]
    a1f0:	8168      	strh	r0, [r5, #10]
    a1f2:	81a9      	strh	r1, [r5, #12]
    a1f4:	74a6      	strb	r6, [r4, #18]
    a1f6:	74e6      	strb	r6, [r4, #19]
    a1f8:	2103      	movs	r1, #3
    a1fa:	70a1      	strb	r1, [r4, #2]
    a1fc:	2102      	movs	r1, #2
    a1fe:	70e1      	strb	r1, [r4, #3]
    a200:	80a0      	strh	r0, [r4, #4]
    a202:	80e0      	strh	r0, [r4, #6]
    a204:	f640 60a6 	movw	r0, #3750	; 0xea6
    a208:	60a0      	str	r0, [r4, #8]
    a20a:	75a6      	strb	r6, [r4, #22]
    a20c:	7326      	strb	r6, [r4, #12]
    a20e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a212:	0000      	.short	0x0000
    a214:	20000dd8 	.word	0x20000dd8
    a218:	ffffffff 	.word	0xffffffff
    a21c:	0000001f 	.word	0x0000001f
    a220:	20001024 	.word	0x20001024

0000a224 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    a224:	b510      	push	{r4, lr}
    a226:	b158      	cbz	r0, a240 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c>
    a228:	490a      	ldr	r1, [pc, #40]	; (a254 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x30>)
    a22a:	780a      	ldrb	r2, [r1, #0]
    a22c:	b16a      	cbz	r2, a24a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x26>
    a22e:	2200      	movs	r2, #0
    a230:	7042      	strb	r2, [r0, #1]
    a232:	2303      	movs	r3, #3
    a234:	7003      	strb	r3, [r0, #0]
    a236:	2301      	movs	r3, #1
    a238:	7103      	strb	r3, [r0, #4]
    a23a:	700a      	strb	r2, [r1, #0]
    a23c:	4618      	mov	r0, r3
    a23e:	bd10      	pop	{r4, pc}
    a240:	f241 71be 	movw	r1, #6078	; 0x17be
    a244:	2039      	movs	r0, #57	; 0x39
    a246:	f7f9 fd89 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a24a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a24e:	f7fb bd8d 	b.w	5d6c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>
    a252:	0000      	.short	0x0000
    a254:	20000dd8 	.word	0x20000dd8
    a258:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a25c:	4692      	mov	sl, r2
    a25e:	460f      	mov	r7, r1
    a260:	4681      	mov	r9, r0
    a262:	f005 f8d6 	bl	f412 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x334>
    a266:	2800      	cmp	r0, #0
    a268:	d063      	beq.n	a332 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    a26a:	4933      	ldr	r1, [pc, #204]	; (a338 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x114>)
    a26c:	f8b9 2050 	ldrh.w	r2, [r9, #80]	; 0x50
    a270:	f8b9 604e 	ldrh.w	r6, [r9, #78]	; 0x4e
    a274:	88c8      	ldrh	r0, [r1, #6]
    a276:	4290      	cmp	r0, r2
    a278:	d300      	bcc.n	a27c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x58>
    a27a:	4610      	mov	r0, r2
    a27c:	4680      	mov	r8, r0
    a27e:	8948      	ldrh	r0, [r1, #10]
    a280:	42b0      	cmp	r0, r6
    a282:	d200      	bcs.n	a286 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x62>
    a284:	4606      	mov	r6, r0
    a286:	890c      	ldrh	r4, [r1, #8]
    a288:	f640 0048 	movw	r0, #2120	; 0x848
    a28c:	4284      	cmp	r4, r0
    a28e:	d300      	bcc.n	a292 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6e>
    a290:	4604      	mov	r4, r0
    a292:	898d      	ldrh	r5, [r1, #12]
    a294:	4285      	cmp	r5, r0
    a296:	d300      	bcc.n	a29a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x76>
    a298:	4605      	mov	r5, r0
    a29a:	4284      	cmp	r4, r0
    a29c:	d300      	bcc.n	a2a0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x7c>
    a29e:	4604      	mov	r4, r0
    a2a0:	f44f 71a4 	mov.w	r1, #328	; 0x148
    a2a4:	2e1b      	cmp	r6, #27
    a2a6:	d001      	beq.n	a2ac <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x88>
    a2a8:	428d      	cmp	r5, r1
    a2aa:	d104      	bne.n	a2b6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x92>
    a2ac:	f1b8 0f1b 	cmp.w	r8, #27
    a2b0:	d03f      	beq.n	a332 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    a2b2:	428c      	cmp	r4, r1
    a2b4:	d03d      	beq.n	a332 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    a2b6:	466a      	mov	r2, sp
    a2b8:	4651      	mov	r1, sl
    a2ba:	4648      	mov	r0, r9
    a2bc:	f005 f82d 	bl	f31a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x23c>
    a2c0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    a2c4:	4641      	mov	r1, r8
    a2c6:	4540      	cmp	r0, r8
    a2c8:	d900      	bls.n	a2cc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>
    a2ca:	4608      	mov	r0, r1
    a2cc:	80f8      	strh	r0, [r7, #6]
    a2ce:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    a2d2:	42a1      	cmp	r1, r4
    a2d4:	d800      	bhi.n	a2d8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb4>
    a2d6:	460c      	mov	r4, r1
    a2d8:	813c      	strh	r4, [r7, #8]
    a2da:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    a2de:	42b1      	cmp	r1, r6
    a2e0:	d800      	bhi.n	a2e4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc0>
    a2e2:	460e      	mov	r6, r1
    a2e4:	807e      	strh	r6, [r7, #2]
    a2e6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    a2ea:	42a9      	cmp	r1, r5
    a2ec:	d900      	bls.n	a2f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    a2ee:	4629      	mov	r1, r5
    a2f0:	80b9      	strh	r1, [r7, #4]
    a2f2:	2201      	movs	r2, #1
    a2f4:	703a      	strb	r2, [r7, #0]
    a2f6:	381b      	subs	r0, #27
    a2f8:	28e0      	cmp	r0, #224	; 0xe0
    a2fa:	d902      	bls.n	a302 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xde>
    a2fc:	f640 41b6 	movw	r1, #3254	; 0xcb6
    a300:	e014      	b.n	a32c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    a302:	3e1b      	subs	r6, #27
    a304:	2ee0      	cmp	r6, #224	; 0xe0
    a306:	d902      	bls.n	a30e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    a308:	f640 41b8 	movw	r1, #3256	; 0xcb8
    a30c:	e00e      	b.n	a32c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    a30e:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    a312:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    a316:	4284      	cmp	r4, r0
    a318:	d902      	bls.n	a320 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xfc>
    a31a:	f640 41ba 	movw	r1, #3258	; 0xcba
    a31e:	e005      	b.n	a32c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    a320:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
    a324:	4281      	cmp	r1, r0
    a326:	d904      	bls.n	a332 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    a328:	f640 41bc 	movw	r1, #3260	; 0xcbc
    a32c:	2039      	movs	r0, #57	; 0x39
    a32e:	f7f9 fd15 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a332:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a336:	0000      	.short	0x0000
    a338:	20001024 	.word	0x20001024

0000a33c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    a33c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a340:	b088      	sub	sp, #32
    a342:	460c      	mov	r4, r1
    a344:	4606      	mov	r6, r0
    a346:	f003 fe4e 	bl	dfe6 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    a34a:	b198      	cbz	r0, a374 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    a34c:	4630      	mov	r0, r6
    a34e:	f003 fe3d 	bl	dfcc <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    a352:	b130      	cbz	r0, a362 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
    a354:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    a358:	2012      	movs	r0, #18
    a35a:	2900      	cmp	r1, #0
    a35c:	d00b      	beq.n	a376 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a35e:	2980      	cmp	r1, #128	; 0x80
    a360:	d809      	bhi.n	a376 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a362:	4630      	mov	r0, r6
    a364:	f003 fe2a 	bl	dfbc <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    a368:	b140      	cbz	r0, a37c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    a36a:	4630      	mov	r0, r6
    a36c:	f003 fdb7 	bl	dede <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    a370:	b130      	cbz	r0, a380 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x44>
    a372:	e009      	b.n	a388 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4c>
    a374:	2042      	movs	r0, #66	; 0x42
    a376:	b008      	add	sp, #32
    a378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a37c:	200c      	movs	r0, #12
    a37e:	e7fa      	b.n	a376 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a380:	4630      	mov	r0, r6
    a382:	f003 fe1d 	bl	dfc0 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    a386:	b3a8      	cbz	r0, a3f4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xb8>
    a388:	4630      	mov	r0, r6
    a38a:	f003 fff2 	bl	e372 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    a38e:	2800      	cmp	r0, #0
    a390:	d1f4      	bne.n	a37c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    a392:	4630      	mov	r0, r6
    a394:	f003 fdbf 	bl	df16 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    a398:	2800      	cmp	r0, #0
    a39a:	d1ef      	bne.n	a37c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    a39c:	4630      	mov	r0, r6
    a39e:	f7fb feff 	bl	61a0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    a3a2:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    a3a6:	f242 7110 	movw	r1, #10000	; 0x2710
    a3aa:	fb00 f801 	mul.w	r8, r0, r1
    a3ae:	78e1      	ldrb	r1, [r4, #3]
    a3b0:	4630      	mov	r0, r6
    a3b2:	f003 fdfa 	bl	dfaa <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    a3b6:	4630      	mov	r0, r6
    a3b8:	f003 fe04 	bl	dfc4 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    a3bc:	b1e8      	cbz	r0, a3fa <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xbe>
    a3be:	2200      	movs	r2, #0
    a3c0:	4611      	mov	r1, r2
    a3c2:	a801      	add	r0, sp, #4
    a3c4:	f7f9 ff1e 	bl	4204 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    a3c8:	0004      	movs	r4, r0
    a3ca:	d06a      	beq.n	a4a2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    a3cc:	2100      	movs	r1, #0
    a3ce:	f7fb fb85 	bl	5adc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    a3d2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    a3d6:	8020      	strh	r0, [r4, #0]
    a3d8:	4621      	mov	r1, r4
    a3da:	4630      	mov	r0, r6
    a3dc:	f003 fe16 	bl	e00c <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    a3e0:	f005 f817 	bl	f412 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x334>
    a3e4:	4d3a      	ldr	r5, [pc, #232]	; (a4d0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x194>)
    a3e6:	2800      	cmp	r0, #0
    a3e8:	f104 0028 	add.w	r0, r4, #40	; 0x28
    a3ec:	d00f      	beq.n	a40e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd2>
    a3ee:	88aa      	ldrh	r2, [r5, #4]
    a3f0:	88e9      	ldrh	r1, [r5, #6]
    a3f2:	e00e      	b.n	a412 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd6>
    a3f4:	e7ff      	b.n	a3f6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xba>
    a3f6:	2012      	movs	r0, #18
    a3f8:	e7bd      	b.n	a376 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a3fa:	4642      	mov	r2, r8
    a3fc:	2100      	movs	r1, #0
    a3fe:	4630      	mov	r0, r6
    a400:	f7fc fdf6 	bl	6ff0 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>
    a404:	2800      	cmp	r0, #0
    a406:	d0b6      	beq.n	a376 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a408:	f241 4102 	movw	r1, #5122	; 0x1402
    a40c:	e053      	b.n	a4b6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    a40e:	221b      	movs	r2, #27
    a410:	4611      	mov	r1, r2
    a412:	84c2      	strh	r2, [r0, #38]	; 0x26
    a414:	8501      	strh	r1, [r0, #40]	; 0x28
    a416:	68a8      	ldr	r0, [r5, #8]
    a418:	62a0      	str	r0, [r4, #40]	; 0x28
    a41a:	f641 574c 	movw	r7, #7500	; 0x1d4c
    a41e:	4630      	mov	r0, r6
    a420:	f003 fdd8 	bl	dfd4 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    a424:	b910      	cbnz	r0, a42c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xf0>
    a426:	4630      	mov	r0, r6
    a428:	f003 fdee 	bl	e008 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    a42c:	6067      	str	r7, [r4, #4]
    a42e:	8821      	ldrh	r1, [r4, #0]
    a430:	f8ad 1008 	strh.w	r1, [sp, #8]
    a434:	7ca9      	ldrb	r1, [r5, #18]
    a436:	f88d 100a 	strb.w	r1, [sp, #10]
    a43a:	7ce9      	ldrb	r1, [r5, #19]
    a43c:	f88d 100b 	strb.w	r1, [sp, #11]
    a440:	8aa9      	ldrh	r1, [r5, #20]
    a442:	f8ad 100c 	strh.w	r1, [sp, #12]
    a446:	a905      	add	r1, sp, #20
    a448:	9100      	str	r1, [sp, #0]
    a44a:	2001      	movs	r0, #1
    a44c:	ab04      	add	r3, sp, #16
    a44e:	aa02      	add	r2, sp, #8
    a450:	4621      	mov	r1, r4
    a452:	f004 ff9f 	bl	f394 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2b6>
    a456:	b140      	cbz	r0, a46a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x12e>
    a458:	2100      	movs	r1, #0
    a45a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    a45e:	f7f9 fefb 	bl	4258 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    a462:	b1f0      	cbz	r0, a4a2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    a464:	f241 414d 	movw	r1, #5197	; 0x144d
    a468:	e025      	b.n	a4b6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    a46a:	f89d 0010 	ldrb.w	r0, [sp, #16]
    a46e:	f88d 0018 	strb.w	r0, [sp, #24]
    a472:	f89d 0014 	ldrb.w	r0, [sp, #20]
    a476:	f88d 0019 	strb.w	r0, [sp, #25]
    a47a:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    a47e:	f8ad 001a 	strh.w	r0, [sp, #26]
    a482:	a906      	add	r1, sp, #24
    a484:	4620      	mov	r0, r4
    a486:	f003 f875 	bl	d574 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    a48a:	78e8      	ldrb	r0, [r5, #3]
    a48c:	9000      	str	r0, [sp, #0]
    a48e:	78ab      	ldrb	r3, [r5, #2]
    a490:	88ea      	ldrh	r2, [r5, #6]
    a492:	88a9      	ldrh	r1, [r5, #4]
    a494:	8820      	ldrh	r0, [r4, #0]
    a496:	f7f9 ffab 	bl	43f0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    a49a:	b120      	cbz	r0, a4a6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x16a>
    a49c:	f241 4158 	movw	r1, #5208	; 0x1458
    a4a0:	e009      	b.n	a4b6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    a4a2:	2009      	movs	r0, #9
    a4a4:	e767      	b.n	a376 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a4a6:	4642      	mov	r2, r8
    a4a8:	4621      	mov	r1, r4
    a4aa:	4630      	mov	r0, r6
    a4ac:	f7fc fda0 	bl	6ff0 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>
    a4b0:	b120      	cbz	r0, a4bc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    a4b2:	f241 415a 	movw	r1, #5210	; 0x145a
    a4b6:	2039      	movs	r0, #57	; 0x39
    a4b8:	f7f9 fc50 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a4bc:	4805      	ldr	r0, [pc, #20]	; (a4d4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x198>)
    a4be:	6843      	ldr	r3, [r0, #4]
    a4c0:	b123      	cbz	r3, a4cc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x190>
    a4c2:	2200      	movs	r2, #0
    a4c4:	f504 71ce 	add.w	r1, r4, #412	; 0x19c
    a4c8:	4620      	mov	r0, r4
    a4ca:	4798      	blx	r3
    a4cc:	2000      	movs	r0, #0
    a4ce:	e752      	b.n	a376 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a4d0:	20000dd8 	.word	0x20000dd8
    a4d4:	20000200 	.word	0x20000200
    a4d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a4dc:	b088      	sub	sp, #32
    a4de:	4604      	mov	r4, r0
    a4e0:	8800      	ldrh	r0, [r0, #0]
    a4e2:	a906      	add	r1, sp, #24
    a4e4:	f002 ff87 	bl	d3f6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a4e8:	2800      	cmp	r0, #0
    a4ea:	d147      	bne.n	a57c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a4ec:	9807      	ldr	r0, [sp, #28]
    a4ee:	2700      	movs	r7, #0
    a4f0:	f890 11e0 	ldrb.w	r1, [r0, #480]	; 0x1e0
    a4f4:	f88d 1008 	strb.w	r1, [sp, #8]
    a4f8:	9902      	ldr	r1, [sp, #8]
    a4fa:	9102      	str	r1, [sp, #8]
    a4fc:	f89d 1008 	ldrb.w	r1, [sp, #8]
    a500:	f88d 100c 	strb.w	r1, [sp, #12]
    a504:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    a508:	3070      	adds	r0, #112	; 0x70
    a50a:	0689      	lsls	r1, r1, #26
    a50c:	d502      	bpl.n	a514 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d8>
    a50e:	f89d 100c 	ldrb.w	r1, [sp, #12]
    a512:	b149      	cbz	r1, a528 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ec>
    a514:	f05f 0100 	movs.w	r1, #0
    a518:	f88d 1004 	strb.w	r1, [sp, #4]
    a51c:	2105      	movs	r1, #5
    a51e:	3044      	adds	r0, #68	; 0x44
    a520:	f004 f905 	bl	e72e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    a524:	b110      	cbz	r0, a52c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f0>
    a526:	e004      	b.n	a532 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f6>
    a528:	2101      	movs	r1, #1
    a52a:	e7f5      	b.n	a518 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1dc>
    a52c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a530:	b318      	cbz	r0, a57a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x23e>
    a532:	8921      	ldrh	r1, [r4, #8]
    a534:	88e0      	ldrh	r0, [r4, #6]
    a536:	f004 fee2 	bl	f2fe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x220>
    a53a:	2800      	cmp	r0, #0
    a53c:	d11e      	bne.n	a57c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a53e:	88a1      	ldrh	r1, [r4, #4]
    a540:	8860      	ldrh	r0, [r4, #2]
    a542:	f004 fedc 	bl	f2fe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x220>
    a546:	2800      	cmp	r0, #0
    a548:	d118      	bne.n	a57c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a54a:	8921      	ldrh	r1, [r4, #8]
    a54c:	88e0      	ldrh	r0, [r4, #6]
    a54e:	f004 fecc 	bl	f2ea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20c>
    a552:	2800      	cmp	r0, #0
    a554:	d112      	bne.n	a57c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a556:	88a1      	ldrh	r1, [r4, #4]
    a558:	8860      	ldrh	r0, [r4, #2]
    a55a:	f004 fec6 	bl	f2ea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20c>
    a55e:	0006      	movs	r6, r0
    a560:	d10c      	bne.n	a57c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a562:	9807      	ldr	r0, [sp, #28]
    a564:	f04f 0801 	mov.w	r8, #1
    a568:	f500 75ce 	add.w	r5, r0, #412	; 0x19c
    a56c:	f880 819d 	strb.w	r8, [r0, #413]	; 0x19d
    a570:	f89d 100c 	ldrb.w	r1, [sp, #12]
    a574:	b129      	cbz	r1, a582 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x246>
    a576:	263a      	movs	r6, #58	; 0x3a
    a578:	e02f      	b.n	a5da <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x29e>
    a57a:	201a      	movs	r0, #26
    a57c:	b008      	add	sp, #32
    a57e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a582:	4639      	mov	r1, r7
    a584:	aa03      	add	r2, sp, #12
    a586:	f004 fec8 	bl	f31a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x23c>
    a58a:	8861      	ldrh	r1, [r4, #2]
    a58c:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    a590:	4281      	cmp	r1, r0
    a592:	d200      	bcs.n	a596 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x25a>
    a594:	4608      	mov	r0, r1
    a596:	80e8      	strh	r0, [r5, #6]
    a598:	88a1      	ldrh	r1, [r4, #4]
    a59a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    a59e:	4281      	cmp	r1, r0
    a5a0:	d200      	bcs.n	a5a4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x268>
    a5a2:	4608      	mov	r0, r1
    a5a4:	8128      	strh	r0, [r5, #8]
    a5a6:	88e2      	ldrh	r2, [r4, #6]
    a5a8:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    a5ac:	428a      	cmp	r2, r1
    a5ae:	d200      	bcs.n	a5b2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x276>
    a5b0:	4611      	mov	r1, r2
    a5b2:	8069      	strh	r1, [r5, #2]
    a5b4:	8922      	ldrh	r2, [r4, #8]
    a5b6:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    a5ba:	428a      	cmp	r2, r1
    a5bc:	d200      	bcs.n	a5c0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x284>
    a5be:	4611      	mov	r1, r2
    a5c0:	f640 0248 	movw	r2, #2120	; 0x848
    a5c4:	80a9      	strh	r1, [r5, #4]
    a5c6:	4291      	cmp	r1, r2
    a5c8:	d300      	bcc.n	a5cc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x290>
    a5ca:	4611      	mov	r1, r2
    a5cc:	80a9      	strh	r1, [r5, #4]
    a5ce:	4290      	cmp	r0, r2
    a5d0:	d200      	bcs.n	a5d4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x298>
    a5d2:	4602      	mov	r2, r0
    a5d4:	812a      	strh	r2, [r5, #8]
    a5d6:	f885 8000 	strb.w	r8, [r5]
    a5da:	706f      	strb	r7, [r5, #1]
    a5dc:	4630      	mov	r0, r6
    a5de:	e7cd      	b.n	a57c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a5e0:	b510      	push	{r4, lr}
    a5e2:	4604      	mov	r4, r0
    a5e4:	88c1      	ldrh	r1, [r0, #6]
    a5e6:	8880      	ldrh	r0, [r0, #4]
    a5e8:	f004 fe89 	bl	f2fe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x220>
    a5ec:	2800      	cmp	r0, #0
    a5ee:	d10f      	bne.n	a610 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d4>
    a5f0:	8861      	ldrh	r1, [r4, #2]
    a5f2:	8820      	ldrh	r0, [r4, #0]
    a5f4:	f004 fe83 	bl	f2fe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x220>
    a5f8:	2800      	cmp	r0, #0
    a5fa:	d109      	bne.n	a610 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d4>
    a5fc:	4805      	ldr	r0, [pc, #20]	; (a614 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d8>)
    a5fe:	88a1      	ldrh	r1, [r4, #4]
    a600:	8141      	strh	r1, [r0, #10]
    a602:	8821      	ldrh	r1, [r4, #0]
    a604:	80c1      	strh	r1, [r0, #6]
    a606:	88e1      	ldrh	r1, [r4, #6]
    a608:	8181      	strh	r1, [r0, #12]
    a60a:	8861      	ldrh	r1, [r4, #2]
    a60c:	8101      	strh	r1, [r0, #8]
    a60e:	2000      	movs	r0, #0
    a610:	bd10      	pop	{r4, pc}
    a612:	0000      	.short	0x0000
    a614:	20001024 	.word	0x20001024
    a618:	0b122b0b 	.word	0x0b122b0b
    a61c:	122b0059 	.word	0x122b0059
    a620:	05060708 	.word	0x05060708
    a624:	00020304 	.word	0x00020304
    a628:	f0f4f8fc 	.word	0xf0f4f8fc
    a62c:	0304d8ec 	.word	0x0304d8ec
    a630:	f4f8fc00 	.word	0xf4f8fc00
    a634:	00d8ecf0 	.word	0x00d8ecf0

0000a638 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    a638:	b510      	push	{r4, lr}
    a63a:	4604      	mov	r4, r0
    a63c:	4804      	ldr	r0, [pc, #16]	; (a650 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x18>)
    a63e:	7004      	strb	r4, [r0, #0]
    a640:	6840      	ldr	r0, [r0, #4]
    a642:	f004 ffb1 	bl	f5a8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x68>
    a646:	4620      	mov	r0, r4
    a648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a64c:	f7ff bda0 	b.w	a190 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    a650:	20000208 	.word	0x20000208

0000a654 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    a654:	b510      	push	{r4, lr}
    a656:	4c07      	ldr	r4, [pc, #28]	; (a674 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x20>)
    a658:	68a0      	ldr	r0, [r4, #8]
    a65a:	f004 ffa5 	bl	f5a8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x68>
    a65e:	68e0      	ldr	r0, [r4, #12]
    a660:	f004 ffa2 	bl	f5a8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x68>
    a664:	f002 fe08 	bl	d278 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    a668:	f7fa ffd2 	bl	5610 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    a66c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a670:	f7ff bd94 	b.w	a19c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    a674:	20000208 	.word	0x20000208

0000a678 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    a678:	b500      	push	{lr}
    a67a:	4905      	ldr	r1, [pc, #20]	; (a690 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    a67c:	4805      	ldr	r0, [pc, #20]	; (a694 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    a67e:	f004 ff5f 	bl	f540 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a682:	4804      	ldr	r0, [pc, #16]	; (a694 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    a684:	4904      	ldr	r1, [pc, #16]	; (a698 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    a686:	1d00      	adds	r0, r0, #4
    a688:	f85d eb04 	ldr.w	lr, [sp], #4
    a68c:	f004 bf58 	b.w	f540 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a690:	20000218 	.word	0x20000218
    a694:	2000020c 	.word	0x2000020c
    a698:	20000220 	.word	0x20000220

0000a69c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    a69c:	b500      	push	{lr}
    a69e:	4908      	ldr	r1, [pc, #32]	; (a6c0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    a6a0:	4808      	ldr	r0, [pc, #32]	; (a6c4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a6a2:	f004 ff4d 	bl	f540 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a6a6:	4807      	ldr	r0, [pc, #28]	; (a6c4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a6a8:	4907      	ldr	r1, [pc, #28]	; (a6c8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    a6aa:	1d00      	adds	r0, r0, #4
    a6ac:	f004 ff48 	bl	f540 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a6b0:	4804      	ldr	r0, [pc, #16]	; (a6c4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a6b2:	4906      	ldr	r1, [pc, #24]	; (a6cc <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    a6b4:	3008      	adds	r0, #8
    a6b6:	f85d eb04 	ldr.w	lr, [sp], #4
    a6ba:	f004 bf41 	b.w	f540 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a6be:	0000      	.short	0x0000
    a6c0:	20000244 	.word	0x20000244
    a6c4:	2000020c 	.word	0x2000020c
    a6c8:	2000024c 	.word	0x2000024c
    a6cc:	2000023c 	.word	0x2000023c

0000a6d0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    a6d0:	4801      	ldr	r0, [pc, #4]	; (a6d8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    a6d2:	7840      	ldrb	r0, [r0, #1]
    a6d4:	4770      	bx	lr
    a6d6:	0000      	.short	0x0000
    a6d8:	20000208 	.word	0x20000208
    a6dc:	b510      	push	{r4, lr}
    a6de:	f7fb fed5 	bl	648c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    a6e2:	480c      	ldr	r0, [pc, #48]	; (a714 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x44>)
    a6e4:	7800      	ldrb	r0, [r0, #0]
    a6e6:	f7fc fd1d 	bl	7124 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY>
    a6ea:	480b      	ldr	r0, [pc, #44]	; (a718 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x48>)
    a6ec:	f7fb feb4 	bl	6458 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    a6f0:	490b      	ldr	r1, [pc, #44]	; (a720 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x50>)
    a6f2:	480a      	ldr	r0, [pc, #40]	; (a71c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x4c>)
    a6f4:	2200      	movs	r2, #0
    a6f6:	6008      	str	r0, [r1, #0]
    a6f8:	490b      	ldr	r1, [pc, #44]	; (a728 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x58>)
    a6fa:	480a      	ldr	r0, [pc, #40]	; (a724 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x54>)
    a6fc:	6008      	str	r0, [r1, #0]
    a6fe:	2101      	movs	r1, #1
    a700:	4610      	mov	r0, r2
    a702:	f002 fd24 	bl	d14e <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    a706:	2800      	cmp	r0, #0
    a708:	d103      	bne.n	a712 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x42>
    a70a:	21d3      	movs	r1, #211	; 0xd3
    a70c:	2001      	movs	r0, #1
    a70e:	f7f9 fb25 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a712:	bd10      	pop	{r4, pc}
    a714:	20000208 	.word	0x20000208
    a718:	20001215 	.word	0x20001215
    a71c:	00006261 	.word	0x00006261
    a720:	20000228 	.word	0x20000228
    a724:	00005e0d 	.word	0x00005e0d
    a728:	2000022c 	.word	0x2000022c
    a72c:	b510      	push	{r4, lr}
    a72e:	4c0d      	ldr	r4, [pc, #52]	; (a764 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x94>)
    a730:	2001      	movs	r0, #1
    a732:	7060      	strb	r0, [r4, #1]
    a734:	f7fb feda 	bl	64ec <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    a738:	7820      	ldrb	r0, [r4, #0]
    a73a:	f7fd fcff 	bl	813c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    a73e:	f002 fd89 	bl	d254 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    a742:	4909      	ldr	r1, [pc, #36]	; (a768 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x98>)
    a744:	7820      	ldrb	r0, [r4, #0]
    a746:	f7fa f9ef 	bl	4b28 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    a74a:	f004 ff15 	bl	f578 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x38>
    a74e:	4908      	ldr	r1, [pc, #32]	; (a770 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0xa0>)
    a750:	4806      	ldr	r0, [pc, #24]	; (a76c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x9c>)
    a752:	6008      	str	r0, [r1, #0]
    a754:	4908      	ldr	r1, [pc, #32]	; (a778 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0xa8>)
    a756:	4807      	ldr	r0, [pc, #28]	; (a774 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0xa4>)
    a758:	6008      	str	r0, [r1, #0]
    a75a:	4909      	ldr	r1, [pc, #36]	; (a780 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0xb0>)
    a75c:	4807      	ldr	r0, [pc, #28]	; (a77c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0xac>)
    a75e:	6008      	str	r0, [r1, #0]
    a760:	bd10      	pop	{r4, pc}
    a762:	0000      	.short	0x0000
    a764:	20000208 	.word	0x20000208
    a768:	20001215 	.word	0x20001215
    a76c:	00004ad5 	.word	0x00004ad5
    a770:	20000238 	.word	0x20000238
    a774:	00007ebd 	.word	0x00007ebd
    a778:	20000234 	.word	0x20000234
    a77c:	00005e81 	.word	0x00005e81
    a780:	20000230 	.word	0x20000230

0000a784 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    a784:	2101      	movs	r1, #1
    a786:	4081      	lsls	r1, r0
    a788:	4802      	ldr	r0, [pc, #8]	; (a794 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x10>)
    a78a:	6802      	ldr	r2, [r0, #0]
    a78c:	4311      	orrs	r1, r2
    a78e:	6001      	str	r1, [r0, #0]
    a790:	4770      	bx	lr
    a792:	0000      	.short	0x0000
    a794:	20000254 	.word	0x20000254

0000a798 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    a798:	4801      	ldr	r0, [pc, #4]	; (a7a0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    a79a:	6800      	ldr	r0, [r0, #0]
    a79c:	4770      	bx	lr
    a79e:	0000      	.short	0x0000
    a7a0:	20000254 	.word	0x20000254

0000a7a4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    a7a4:	4803      	ldr	r0, [pc, #12]	; (a7b4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x10>)
    a7a6:	8800      	ldrh	r0, [r0, #0]
    a7a8:	f3c0 2000 	ubfx	r0, r0, #8, #1
    a7ac:	0040      	lsls	r0, r0, #1
    a7ae:	1c40      	adds	r0, r0, #1
    a7b0:	4770      	bx	lr
    a7b2:	0000      	.short	0x0000
    a7b4:	20000254 	.word	0x20000254

0000a7b8 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    a7b8:	b570      	push	{r4, r5, r6, lr}
    a7ba:	4605      	mov	r5, r0
    a7bc:	4616      	mov	r6, r2
    a7be:	460c      	mov	r4, r1
    a7c0:	2002      	movs	r0, #2
    a7c2:	f000 f999 	bl	aaf8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a7c6:	4906      	ldr	r1, [pc, #24]	; (a7e0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    a7c8:	2001      	movs	r0, #1
    a7ca:	1ef6      	subs	r6, r6, #3
    a7cc:	7008      	strb	r0, [r1, #0]
    a7ce:	4805      	ldr	r0, [pc, #20]	; (a7e4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    a7d0:	6006      	str	r6, [r0, #0]
    a7d2:	4804      	ldr	r0, [pc, #16]	; (a7e4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    a7d4:	3808      	subs	r0, #8
    a7d6:	6005      	str	r5, [r0, #0]
    a7d8:	1f00      	subs	r0, r0, #4
    a7da:	6004      	str	r4, [r0, #0]
    a7dc:	bd70      	pop	{r4, r5, r6, pc}
    a7de:	0000      	.short	0x0000
    a7e0:	2000029b 	.word	0x2000029b
    a7e4:	4000f510 	.word	0x4000f510

0000a7e8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    a7e8:	b510      	push	{r4, lr}
    a7ea:	4c0c      	ldr	r4, [pc, #48]	; (a81c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    a7ec:	7820      	ldrb	r0, [r4, #0]
    a7ee:	b180      	cbz	r0, a812 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    a7f0:	490b      	ldr	r1, [pc, #44]	; (a820 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    a7f2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a7f6:	6008      	str	r0, [r1, #0]
    a7f8:	f000 f86a 	bl	a8d0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    a7fc:	2100      	movs	r1, #0
    a7fe:	b120      	cbz	r0, a80a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    a800:	2001      	movs	r0, #1
    a802:	7060      	strb	r0, [r4, #1]
    a804:	4807      	ldr	r0, [pc, #28]	; (a824 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    a806:	6800      	ldr	r0, [r0, #0]
    a808:	e001      	b.n	a80e <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    a80a:	7061      	strb	r1, [r4, #1]
    a80c:	2010      	movs	r0, #16
    a80e:	70a0      	strb	r0, [r4, #2]
    a810:	7021      	strb	r1, [r4, #0]
    a812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a816:	2000      	movs	r0, #0
    a818:	f000 b96e 	b.w	aaf8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a81c:	2000029b 	.word	0x2000029b
    a820:	4001f508 	.word	0x4001f508
    a824:	4000f400 	.word	0x4000f400

0000a828 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    a828:	b510      	push	{r4, lr}
    a82a:	2002      	movs	r0, #2
    a82c:	f000 f964 	bl	aaf8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a830:	4904      	ldr	r1, [pc, #16]	; (a844 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    a832:	2001      	movs	r0, #1
    a834:	7008      	strb	r0, [r1, #0]
    a836:	f000 f859 	bl	a8ec <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    a83a:	4903      	ldr	r1, [pc, #12]	; (a848 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    a83c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a840:	6008      	str	r0, [r1, #0]
    a842:	bd10      	pop	{r4, pc}
    a844:	2000029b 	.word	0x2000029b
    a848:	4001f504 	.word	0x4001f504

0000a84c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    a84c:	4803      	ldr	r0, [pc, #12]	; (a85c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    a84e:	2100      	movs	r1, #0
    a850:	7001      	strb	r1, [r0, #0]
    a852:	7041      	strb	r1, [r0, #1]
    a854:	2110      	movs	r1, #16
    a856:	7081      	strb	r1, [r0, #2]
    a858:	4770      	bx	lr
    a85a:	0000      	.short	0x0000
    a85c:	2000029b 	.word	0x2000029b

0000a860 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    a860:	4807      	ldr	r0, [pc, #28]	; (a880 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    a862:	b510      	push	{r4, lr}
    a864:	7801      	ldrb	r1, [r0, #0]
    a866:	b141      	cbz	r1, a87a <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    a868:	f000 f832 	bl	a8d0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    a86c:	b118      	cbz	r0, a876 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    a86e:	4805      	ldr	r0, [pc, #20]	; (a884 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    a870:	6800      	ldr	r0, [r0, #0]
    a872:	b2c0      	uxtb	r0, r0
    a874:	bd10      	pop	{r4, pc}
    a876:	2010      	movs	r0, #16
    a878:	bd10      	pop	{r4, pc}
    a87a:	7880      	ldrb	r0, [r0, #2]
    a87c:	bd10      	pop	{r4, pc}
    a87e:	0000      	.short	0x0000
    a880:	2000029b 	.word	0x2000029b
    a884:	4000f400 	.word	0x4000f400

0000a888 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    a888:	4808      	ldr	r0, [pc, #32]	; (a8ac <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    a88a:	b510      	push	{r4, lr}
    a88c:	7801      	ldrb	r1, [r0, #0]
    a88e:	b159      	cbz	r1, a8a8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    a890:	4807      	ldr	r0, [pc, #28]	; (a8b0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    a892:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    a896:	b128      	cbz	r0, a8a4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    a898:	f000 f80c 	bl	a8b4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    a89c:	2800      	cmp	r0, #0
    a89e:	d000      	beq.n	a8a2 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    a8a0:	2001      	movs	r0, #1
    a8a2:	bd10      	pop	{r4, pc}
    a8a4:	2002      	movs	r0, #2
    a8a6:	bd10      	pop	{r4, pc}
    a8a8:	7840      	ldrb	r0, [r0, #1]
    a8aa:	bd10      	pop	{r4, pc}
    a8ac:	2000029b 	.word	0x2000029b
    a8b0:	4000f000 	.word	0x4000f000
    a8b4:	4805      	ldr	r0, [pc, #20]	; (a8cc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    a8b6:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    a8ba:	b111      	cbz	r1, a8c2 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    a8bc:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    a8c0:	b108      	cbz	r0, a8c6 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    a8c2:	2000      	movs	r0, #0
    a8c4:	4770      	bx	lr
    a8c6:	2001      	movs	r0, #1
    a8c8:	4770      	bx	lr
    a8ca:	0000      	.short	0x0000
    a8cc:	4000f000 	.word	0x4000f000
    a8d0:	4805      	ldr	r0, [pc, #20]	; (a8e8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    a8d2:	b510      	push	{r4, lr}
    a8d4:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    a8d8:	b120      	cbz	r0, a8e4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    a8da:	f7ff ffeb 	bl	a8b4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    a8de:	b108      	cbz	r0, a8e4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    a8e0:	2001      	movs	r0, #1
    a8e2:	bd10      	pop	{r4, pc}
    a8e4:	2000      	movs	r0, #0
    a8e6:	bd10      	pop	{r4, pc}
    a8e8:	4000f000 	.word	0x4000f000
    a8ec:	4804      	ldr	r0, [pc, #16]	; (a900 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    a8ee:	2100      	movs	r1, #0
    a8f0:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    a8f4:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    a8f8:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    a8fc:	4770      	bx	lr
    a8fe:	0000      	.short	0x0000
    a900:	4000f000 	.word	0x4000f000

0000a904 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>:
    a904:	4a08      	ldr	r2, [pc, #32]	; (a928 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x24>)
    a906:	b510      	push	{r4, lr}
    a908:	e9c2 0102 	strd	r0, r1, [r2, #8]
    a90c:	4907      	ldr	r1, [pc, #28]	; (a92c <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x28>)
    a90e:	4610      	mov	r0, r2
    a910:	f7f9 f918 	bl	3b44 <mpsl_fem_lna_configuration_set>
    a914:	2800      	cmp	r0, #0
    a916:	d005      	beq.n	a924 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    a918:	1c40      	adds	r0, r0, #1
    a91a:	d003      	beq.n	a924 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    a91c:	2170      	movs	r1, #112	; 0x70
    a91e:	2040      	movs	r0, #64	; 0x40
    a920:	f7f9 fa1c 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a924:	bd10      	pop	{r4, pc}
    a926:	0000      	.short	0x0000
    a928:	20000258 	.word	0x20000258
    a92c:	0000a95c 	.word	0x0000a95c

0000a930 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>:
    a930:	4a08      	ldr	r2, [pc, #32]	; (a954 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x24>)
    a932:	b510      	push	{r4, lr}
    a934:	e9c2 0102 	strd	r0, r1, [r2, #8]
    a938:	4907      	ldr	r1, [pc, #28]	; (a958 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x28>)
    a93a:	4610      	mov	r0, r2
    a93c:	f7f9 f90e 	bl	3b5c <mpsl_fem_pa_configuration_set>
    a940:	2800      	cmp	r0, #0
    a942:	d005      	beq.n	a950 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    a944:	1c40      	adds	r0, r0, #1
    a946:	d003      	beq.n	a950 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    a948:	2165      	movs	r1, #101	; 0x65
    a94a:	2040      	movs	r0, #64	; 0x40
    a94c:	f7f9 fa06 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a950:	bd10      	pop	{r4, pc}
    a952:	0000      	.short	0x0000
    a954:	20000258 	.word	0x20000258
    a958:	0000a95c 	.word	0x0000a95c
    a95c:	00000001 	.word	0x00000001
    a960:	40001110 	.word	0x40001110
	...

0000a974 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>:
    a974:	b570      	push	{r4, r5, r6, lr}
    a976:	4606      	mov	r6, r0
    a978:	4614      	mov	r4, r2
    a97a:	460d      	mov	r5, r1
    a97c:	2001      	movs	r0, #1
    a97e:	f000 f8bb 	bl	aaf8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a982:	4803      	ldr	r0, [pc, #12]	; (a990 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ+0x1c>)
    a984:	6006      	str	r6, [r0, #0]
    a986:	1d00      	adds	r0, r0, #4
    a988:	6004      	str	r4, [r0, #0]
    a98a:	1d00      	adds	r0, r0, #4
    a98c:	6005      	str	r5, [r0, #0]
    a98e:	bd70      	pop	{r4, r5, r6, pc}
    a990:	4000f508 	.word	0x4000f508

0000a994 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    a994:	480a      	ldr	r0, [pc, #40]	; (a9c0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x2c>)
    a996:	7801      	ldrb	r1, [r0, #0]
    a998:	b171      	cbz	r1, a9b8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x24>
    a99a:	4a0a      	ldr	r2, [pc, #40]	; (a9c4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x30>)
    a99c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    a9a0:	6011      	str	r1, [r2, #0]
    a9a2:	4909      	ldr	r1, [pc, #36]	; (a9c8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x34>)
    a9a4:	f8d1 2104 	ldr.w	r2, [r1, #260]	; 0x104
    a9a8:	2100      	movs	r1, #0
    a9aa:	b11a      	cbz	r2, a9b4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x20>
    a9ac:	4a07      	ldr	r2, [pc, #28]	; (a9cc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x38>)
    a9ae:	6812      	ldr	r2, [r2, #0]
    a9b0:	7042      	strb	r2, [r0, #1]
    a9b2:	e000      	b.n	a9b6 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x22>
    a9b4:	7041      	strb	r1, [r0, #1]
    a9b6:	7001      	strb	r1, [r0, #0]
    a9b8:	2000      	movs	r0, #0
    a9ba:	f000 b89d 	b.w	aaf8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a9be:	0000      	.short	0x0000
    a9c0:	2000029e 	.word	0x2000029e
    a9c4:	4001f508 	.word	0x4001f508
    a9c8:	4000f000 	.word	0x4000f000
    a9cc:	4000f400 	.word	0x4000f400

0000a9d0 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>:
    a9d0:	b570      	push	{r4, r5, r6, lr}
    a9d2:	4604      	mov	r4, r0
    a9d4:	4816      	ldr	r0, [pc, #88]	; (aa30 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x60>)
    a9d6:	460e      	mov	r6, r1
    a9d8:	2501      	movs	r5, #1
    a9da:	7005      	strb	r5, [r0, #0]
    a9dc:	4915      	ldr	r1, [pc, #84]	; (aa34 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x64>)
    a9de:	ea44 4002 	orr.w	r0, r4, r2, lsl #16
    a9e2:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
    a9e6:	6008      	str	r0, [r1, #0]
    a9e8:	f001 fb69 	bl	c0be <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    a9ec:	b930      	cbnz	r0, a9fc <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x2c>
    a9ee:	4811      	ldr	r0, [pc, #68]	; (aa34 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x64>)
    a9f0:	3014      	adds	r0, #20
    a9f2:	6801      	ldr	r1, [r0, #0]
    a9f4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    a9f8:	4331      	orrs	r1, r6
    a9fa:	6001      	str	r1, [r0, #0]
    a9fc:	490e      	ldr	r1, [pc, #56]	; (aa38 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x68>)
    a9fe:	2200      	movs	r2, #0
    aa00:	f8c1 2104 	str.w	r2, [r1, #260]	; 0x104
    aa04:	4b0d      	ldr	r3, [pc, #52]	; (aa3c <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x6c>)
    aa06:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    aa0a:	6018      	str	r0, [r3, #0]
    aa0c:	b12c      	cbz	r4, aa1a <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x4a>
    aa0e:	2c01      	cmp	r4, #1
    aa10:	d007      	beq.n	aa22 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x52>
    aa12:	2185      	movs	r1, #133	; 0x85
    aa14:	203c      	movs	r0, #60	; 0x3c
    aa16:	f7f9 f9a1 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aa1a:	f8c1 5200 	str.w	r5, [r1, #512]	; 0x200
    aa1e:	600d      	str	r5, [r1, #0]
    aa20:	bd70      	pop	{r4, r5, r6, pc}
    aa22:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
    aa26:	600d      	str	r5, [r1, #0]
    aa28:	4904      	ldr	r1, [pc, #16]	; (aa3c <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x6c>)
    aa2a:	1f09      	subs	r1, r1, #4
    aa2c:	6008      	str	r0, [r1, #0]
    aa2e:	bd70      	pop	{r4, r5, r6, pc}
    aa30:	2000029e 	.word	0x2000029e
    aa34:	4000f504 	.word	0x4000f504
    aa38:	4000f000 	.word	0x4000f000
    aa3c:	4001f508 	.word	0x4001f508

0000aa40 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    aa40:	4802      	ldr	r0, [pc, #8]	; (aa4c <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    aa42:	2100      	movs	r1, #0
    aa44:	7001      	strb	r1, [r0, #0]
    aa46:	7041      	strb	r1, [r0, #1]
    aa48:	4770      	bx	lr
    aa4a:	0000      	.short	0x0000
    aa4c:	2000029e 	.word	0x2000029e

0000aa50 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    aa50:	4806      	ldr	r0, [pc, #24]	; (aa6c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1c>)
    aa52:	7801      	ldrb	r1, [r0, #0]
    aa54:	b141      	cbz	r1, aa68 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x18>
    aa56:	4806      	ldr	r0, [pc, #24]	; (aa70 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>)
    aa58:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    aa5c:	2800      	cmp	r0, #0
    aa5e:	d002      	beq.n	aa66 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x16>
    aa60:	4804      	ldr	r0, [pc, #16]	; (aa74 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x24>)
    aa62:	6800      	ldr	r0, [r0, #0]
    aa64:	b2c0      	uxtb	r0, r0
    aa66:	4770      	bx	lr
    aa68:	7840      	ldrb	r0, [r0, #1]
    aa6a:	4770      	bx	lr
    aa6c:	2000029e 	.word	0x2000029e
    aa70:	4000f000 	.word	0x4000f000
    aa74:	4000f400 	.word	0x4000f400

0000aa78 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    aa78:	4901      	ldr	r1, [pc, #4]	; (aa80 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    aa7a:	2001      	movs	r0, #1
    aa7c:	6088      	str	r0, [r1, #8]
    aa7e:	4770      	bx	lr
    aa80:	4000f000 	.word	0x4000f000

0000aa84 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    aa84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    aa88:	2800      	cmp	r0, #0
    aa8a:	d02c      	beq.n	aae6 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    aa8c:	4817      	ldr	r0, [pc, #92]	; (aaec <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x68>)
    aa8e:	7800      	ldrb	r0, [r0, #0]
    aa90:	b1b0      	cbz	r0, aac0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x3c>
    aa92:	4d17      	ldr	r5, [pc, #92]	; (aaf0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6c>)
    aa94:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    aa98:	2800      	cmp	r0, #0
    aa9a:	d124      	bne.n	aae6 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    aa9c:	2702      	movs	r7, #2
    aa9e:	f8c5 7304 	str.w	r7, [r5, #772]	; 0x304
    aaa2:	4c14      	ldr	r4, [pc, #80]	; (aaf4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>)
    aaa4:	6820      	ldr	r0, [r4, #0]
    aaa6:	43c0      	mvns	r0, r0
    aaa8:	f340 1600 	sbfx	r6, r0, #4, #1
    aaac:	6820      	ldr	r0, [r4, #0]
    aaae:	f040 0010 	orr.w	r0, r0, #16
    aab2:	6020      	str	r0, [r4, #0]
    aab4:	f44f 4800 	mov.w	r8, #32768	; 0x8000
    aab8:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    aabc:	1c76      	adds	r6, r6, #1
    aabe:	e007      	b.n	aad0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    aac0:	21fd      	movs	r1, #253	; 0xfd
    aac2:	203c      	movs	r0, #60	; 0x3c
    aac4:	f7f9 f94a 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aac8:	f8c9 8280 	str.w	r8, [r9, #640]	; 0x280
    aacc:	f7f8 ffec 	bl	3aa8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    aad0:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    aad4:	2800      	cmp	r0, #0
    aad6:	d0f7      	beq.n	aac8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x44>
    aad8:	b91e      	cbnz	r6, aae2 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x5e>
    aada:	6820      	ldr	r0, [r4, #0]
    aadc:	f020 0010 	bic.w	r0, r0, #16
    aae0:	6020      	str	r0, [r4, #0]
    aae2:	f8c5 7308 	str.w	r7, [r5, #776]	; 0x308
    aae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    aaea:	0000      	.short	0x0000
    aaec:	2000029e 	.word	0x2000029e
    aaf0:	4000f000 	.word	0x4000f000
    aaf4:	e000ed10 	.word	0xe000ed10

0000aaf8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    aaf8:	b510      	push	{r4, lr}
    aafa:	4604      	mov	r4, r0
    aafc:	f000 f822 	bl	ab44 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    ab00:	2c00      	cmp	r4, #0
    ab02:	d017      	beq.n	ab34 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>
    ab04:	4a0c      	ldr	r2, [pc, #48]	; (ab38 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    ab06:	480c      	ldr	r0, [pc, #48]	; (ab38 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    ab08:	490c      	ldr	r1, [pc, #48]	; (ab3c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    ab0a:	3214      	adds	r2, #20
    ab0c:	4b0c      	ldr	r3, [pc, #48]	; (ab40 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>)
    ab0e:	2c01      	cmp	r4, #1
    ab10:	d005      	beq.n	ab1e <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x26>
    ab12:	2c02      	cmp	r4, #2
    ab14:	d008      	beq.n	ab28 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x30>
    ab16:	217d      	movs	r1, #125	; 0x7d
    ab18:	203d      	movs	r0, #61	; 0x3d
    ab1a:	f7f9 f91f 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ab1e:	2402      	movs	r4, #2
    ab20:	6004      	str	r4, [r0, #0]
    ab22:	6011      	str	r1, [r2, #0]
    ab24:	0620      	lsls	r0, r4, #24
    ab26:	e004      	b.n	ab32 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3a>
    ab28:	2403      	movs	r4, #3
    ab2a:	6004      	str	r4, [r0, #0]
    ab2c:	6011      	str	r1, [r2, #0]
    ab2e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    ab32:	6018      	str	r0, [r3, #0]
    ab34:	bd10      	pop	{r4, pc}
    ab36:	0000      	.short	0x0000
    ab38:	4000f500 	.word	0x4000f500
    ab3c:	20001317 	.word	0x20001317
    ab40:	4001f504 	.word	0x4001f504
    ab44:	4804      	ldr	r0, [pc, #16]	; (ab58 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    ab46:	2100      	movs	r1, #0
    ab48:	6001      	str	r1, [r0, #0]
    ab4a:	6001      	str	r1, [r0, #0]
    ab4c:	4903      	ldr	r1, [pc, #12]	; (ab5c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    ab4e:	f04f 7020 	mov.w	r0, #41943040	; 0x2800000
    ab52:	6008      	str	r0, [r1, #0]
    ab54:	4770      	bx	lr
    ab56:	0000      	.short	0x0000
    ab58:	4000f500 	.word	0x4000f500
    ab5c:	4001f508 	.word	0x4001f508

0000ab60 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    ab60:	4805      	ldr	r0, [pc, #20]	; (ab78 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    ab62:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    ab66:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    ab6a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    ab6e:	4903      	ldr	r1, [pc, #12]	; (ab7c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x1c>)
    ab70:	2000      	movs	r0, #0
    ab72:	6008      	str	r0, [r1, #0]
    ab74:	4770      	bx	lr
    ab76:	0000      	.short	0x0000
    ab78:	40001000 	.word	0x40001000
    ab7c:	40001560 	.word	0x40001560

0000ab80 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    ab80:	4904      	ldr	r1, [pc, #16]	; (ab94 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    ab82:	6008      	str	r0, [r1, #0]
    ab84:	4804      	ldr	r0, [pc, #16]	; (ab98 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x18>)
    ab86:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    ab8a:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    ab8e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    ab92:	4770      	bx	lr
    ab94:	40001560 	.word	0x40001560
    ab98:	40001000 	.word	0x40001000

0000ab9c <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    ab9c:	4801      	ldr	r0, [pc, #4]	; (aba4 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    ab9e:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    aba2:	4770      	bx	lr
    aba4:	20000e18 	.word	0x20000e18

0000aba8 <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y>:
    aba8:	4a01      	ldr	r2, [pc, #4]	; (abb0 <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y+0x8>)
    abaa:	7051      	strb	r1, [r2, #1]
    abac:	7010      	strb	r0, [r2, #0]
    abae:	4770      	bx	lr
    abb0:	20000e18 	.word	0x20000e18

0000abb4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    abb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    abb6:	4c1e      	ldr	r4, [pc, #120]	; (ac30 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x7c>)
    abb8:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    abbc:	2710      	movs	r7, #16
    abbe:	f3c0 1600 	ubfx	r6, r0, #4, #1
    abc2:	f8c4 7308 	str.w	r7, [r4, #776]	; 0x308
    abc6:	2002      	movs	r0, #2
    abc8:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    abcc:	4819      	ldr	r0, [pc, #100]	; (ac34 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x80>)
    abce:	2500      	movs	r5, #0
    abd0:	491a      	ldr	r1, [pc, #104]	; (ac3c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>)
    abd2:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    abd6:	4818      	ldr	r0, [pc, #96]	; (ac38 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>)
    abd8:	6008      	str	r0, [r1, #0]
    abda:	4819      	ldr	r0, [pc, #100]	; (ac40 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8c>)
    abdc:	6800      	ldr	r0, [r0, #0]
    abde:	b1b0      	cbz	r0, ac0e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    abe0:	20ff      	movs	r0, #255	; 0xff
    abe2:	f88d 0000 	strb.w	r0, [sp]
    abe6:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    abea:	2001      	movs	r0, #1
    abec:	6120      	str	r0, [r4, #16]
    abee:	e004      	b.n	abfa <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x46>
    abf0:	f89d 0000 	ldrb.w	r0, [sp]
    abf4:	1e40      	subs	r0, r0, #1
    abf6:	f88d 0000 	strb.w	r0, [sp]
    abfa:	f89d 0000 	ldrb.w	r0, [sp]
    abfe:	b118      	cbz	r0, ac08 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x54>
    ac00:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    ac04:	2800      	cmp	r0, #0
    ac06:	d0f3      	beq.n	abf0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x3c>
    ac08:	f89d 0000 	ldrb.w	r0, [sp]
    ac0c:	b150      	cbz	r0, ac24 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x70>
    ac0e:	f000 fce9 	bl	b5e4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xec>
    ac12:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    ac16:	f000 fe73 	bl	b900 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x408>
    ac1a:	2e00      	cmp	r6, #0
    ac1c:	d001      	beq.n	ac22 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
    ac1e:	f8c4 7304 	str.w	r7, [r4, #772]	; 0x304
    ac22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ac24:	f240 71a3 	movw	r1, #1955	; 0x7a3
    ac28:	203e      	movs	r0, #62	; 0x3e
    ac2a:	f7f9 f897 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ac2e:	0000      	.short	0x0000
    ac30:	40001000 	.word	0x40001000
    ac34:	20000e18 	.word	0x20000e18
    ac38:	0c0e0000 	.word	0x0c0e0000
    ac3c:	4001f508 	.word	0x4001f508
    ac40:	40001550 	.word	0x40001550

0000ac44 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    ac44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ac48:	4c1f      	ldr	r4, [pc, #124]	; (acc8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x84>)
    ac4a:	4607      	mov	r7, r0
    ac4c:	4688      	mov	r8, r1
    ac4e:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    ac52:	07c1      	lsls	r1, r0, #31
    ac54:	d018      	beq.n	ac88 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x44>
    ac56:	4a1d      	ldr	r2, [pc, #116]	; (accc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>)
    ac58:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
    ac5c:	6011      	str	r1, [r2, #0]
    ac5e:	4d1c      	ldr	r5, [pc, #112]	; (acd0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x8c>)
    ac60:	f8d5 1200 	ldr.w	r1, [r5, #512]	; 0x200
    ac64:	f041 0101 	orr.w	r1, r1, #1
    ac68:	f8c5 1200 	str.w	r1, [r5, #512]	; 0x200
    ac6c:	f040 0002 	orr.w	r0, r0, #2
    ac70:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    ac74:	4640      	mov	r0, r8
    ac76:	f000 fea9 	bl	b9cc <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    ac7a:	f000 fc81 	bl	b580 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x88>
    ac7e:	2601      	movs	r6, #1
    ac80:	b13f      	cbz	r7, ac92 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
    ac82:	2f01      	cmp	r7, #1
    ac84:	d00e      	beq.n	aca4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x60>
    ac86:	e016      	b.n	acb6 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    ac88:	f240 6135 	movw	r1, #1589	; 0x635
    ac8c:	203e      	movs	r0, #62	; 0x3e
    ac8e:	f7f9 f865 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ac92:	4640      	mov	r0, r8
    ac94:	f000 fc94 	bl	b5c0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    ac98:	4640      	mov	r0, r8
    ac9a:	f000 fc55 	bl	b548 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    ac9e:	72e6      	strb	r6, [r4, #11]
    aca0:	602e      	str	r6, [r5, #0]
    aca2:	e008      	b.n	acb6 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    aca4:	f000 fc94 	bl	b5d0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xd8>
    aca8:	f000 fe02 	bl	b8b0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3b8>
    acac:	2002      	movs	r0, #2
    acae:	72e0      	strb	r0, [r4, #11]
    acb0:	f000 fd0a 	bl	b6c8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d0>
    acb4:	606e      	str	r6, [r5, #4]
    acb6:	4807      	ldr	r0, [pc, #28]	; (acd4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x90>)
    acb8:	64c6      	str	r6, [r0, #76]	; 0x4c
    acba:	4807      	ldr	r0, [pc, #28]	; (acd8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    acbc:	6801      	ldr	r1, [r0, #0]
    acbe:	4638      	mov	r0, r7
    acc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    acc4:	f004 bd29 	b.w	f71a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    acc8:	20000e18 	.word	0x20000e18
    accc:	4001f504 	.word	0x4001f504
    acd0:	40001000 	.word	0x40001000
    acd4:	40008000 	.word	0x40008000
    acd8:	4000854c 	.word	0x4000854c

0000acdc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    acdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ace0:	4d35      	ldr	r5, [pc, #212]	; (adb8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xdc>)
    ace2:	4606      	mov	r6, r0
    ace4:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    ace8:	4689      	mov	r9, r1
    acea:	6028      	str	r0, [r5, #0]
    acec:	4c33      	ldr	r4, [pc, #204]	; (adbc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe0>)
    acee:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    acf2:	f040 0002 	orr.w	r0, r0, #2
    acf6:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    acfa:	4608      	mov	r0, r1
    acfc:	f000 fe66 	bl	b9cc <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    ad00:	f000 fc3e 	bl	b580 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x88>
    ad04:	f8df 80b8 	ldr.w	r8, [pc, #184]	; adc0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe4>
    ad08:	2700      	movs	r7, #0
    ad0a:	b116      	cbz	r6, ad12 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x36>
    ad0c:	2e01      	cmp	r6, #1
    ad0e:	d027      	beq.n	ad60 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    ad10:	e03f      	b.n	ad92 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    ad12:	4648      	mov	r0, r9
    ad14:	f000 fc54 	bl	b5c0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    ad18:	7a60      	ldrb	r0, [r4, #9]
    ad1a:	2801      	cmp	r0, #1
    ad1c:	d105      	bne.n	ad2a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x4e>
    ad1e:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    ad22:	f041 0108 	orr.w	r1, r1, #8
    ad26:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    ad2a:	4648      	mov	r0, r9
    ad2c:	f000 fc0c 	bl	b548 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    ad30:	2001      	movs	r0, #1
    ad32:	72e0      	strb	r0, [r4, #11]
    ad34:	6b20      	ldr	r0, [r4, #48]	; 0x30
    ad36:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    ad3a:	6320      	str	r0, [r4, #48]	; 0x30
    ad3c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    ad40:	6028      	str	r0, [r5, #0]
    ad42:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ad46:	f1b9 0f02 	cmp.w	r9, #2
    ad4a:	d007      	beq.n	ad5c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x80>
    ad4c:	f640 0034 	movw	r0, #2100	; 0x834
    ad50:	f649 72ec 	movw	r2, #40940	; 0x9fec
    ad54:	4410      	add	r0, r2
    ad56:	fbb0 f7f1 	udiv	r7, r0, r1
    ad5a:	e01a      	b.n	ad92 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    ad5c:	4608      	mov	r0, r1
    ad5e:	e7f7      	b.n	ad50 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x74>
    ad60:	f000 fc36 	bl	b5d0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xd8>
    ad64:	f000 fda4 	bl	b8b0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3b8>
    ad68:	7a60      	ldrb	r0, [r4, #9]
    ad6a:	2801      	cmp	r0, #1
    ad6c:	d105      	bne.n	ad7a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x9e>
    ad6e:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    ad72:	f041 0104 	orr.w	r1, r1, #4
    ad76:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    ad7a:	2002      	movs	r0, #2
    ad7c:	72e0      	strb	r0, [r4, #11]
    ad7e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    ad80:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    ad84:	6320      	str	r0, [r4, #48]	; 0x30
    ad86:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    ad8a:	6028      	str	r0, [r5, #0]
    ad8c:	2729      	movs	r7, #41	; 0x29
    ad8e:	f000 fc9b 	bl	b6c8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d0>
    ad92:	f000 fc85 	bl	b6a0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1a8>
    ad96:	f001 f869 	bl	be6c <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    ad9a:	6800      	ldr	r0, [r0, #0]
    ad9c:	2801      	cmp	r0, #1
    ad9e:	d006      	beq.n	adae <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd2>
    ada0:	2100      	movs	r1, #0
    ada2:	4630      	mov	r0, r6
    ada4:	f004 fcb9 	bl	f71a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    ada8:	4638      	mov	r0, r7
    adaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    adae:	f7ff ff01 	bl	abb4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    adb2:	2000      	movs	r0, #0
    adb4:	e7f9      	b.n	adaa <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xce>
    adb6:	0000      	.short	0x0000
    adb8:	4001f504 	.word	0x4001f504
    adbc:	20000e18 	.word	0x20000e18
    adc0:	40001000 	.word	0x40001000

0000adc4 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    adc4:	4a02      	ldr	r2, [pc, #8]	; (add0 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    adc6:	6b93      	ldr	r3, [r2, #56]	; 0x38
    adc8:	6003      	str	r3, [r0, #0]
    adca:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    adcc:	6008      	str	r0, [r1, #0]
    adce:	4770      	bx	lr
    add0:	20000e18 	.word	0x20000e18

0000add4 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    add4:	4601      	mov	r1, r0
    add6:	2214      	movs	r2, #20
    add8:	4801      	ldr	r0, [pc, #4]	; (ade0 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    adda:	f001 b9c2 	b.w	c162 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    adde:	0000      	.short	0x0000
    ade0:	20000e04 	.word	0x20000e04

0000ade4 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    ade4:	490e      	ldr	r1, [pc, #56]	; (ae20 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x3c>)
    ade6:	b510      	push	{r4, lr}
    ade8:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    adea:	4282      	cmp	r2, r0
    adec:	d302      	bcc.n	adf4 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    adee:	f640 0123 	movw	r1, #2083	; 0x823
    adf2:	e00a      	b.n	ae0a <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x26>
    adf4:	2201      	movs	r2, #1
    adf6:	740a      	strb	r2, [r1, #16]
    adf8:	6148      	str	r0, [r1, #20]
    adfa:	490a      	ldr	r1, [pc, #40]	; (ae24 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    adfc:	644a      	str	r2, [r1, #68]	; 0x44
    adfe:	4a0a      	ldr	r2, [pc, #40]	; (ae28 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    ae00:	6813      	ldr	r3, [r2, #0]
    ae02:	4283      	cmp	r3, r0
    ae04:	d304      	bcc.n	ae10 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2c>
    ae06:	f640 012c 	movw	r1, #2092	; 0x82c
    ae0a:	203e      	movs	r0, #62	; 0x3e
    ae0c:	f7f8 ffa6 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae10:	2300      	movs	r3, #0
    ae12:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    ae16:	6010      	str	r0, [r2, #0]
    ae18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ae1c:	f000 bd56 	b.w	b8cc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3d4>
    ae20:	20000e18 	.word	0x20000e18
    ae24:	40008000 	.word	0x40008000
    ae28:	40008544 	.word	0x40008544

0000ae2c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    ae2c:	b570      	push	{r4, r5, r6, lr}
    ae2e:	4c10      	ldr	r4, [pc, #64]	; (ae70 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    ae30:	4606      	mov	r6, r0
    ae32:	2002      	movs	r0, #2
    ae34:	7420      	strb	r0, [r4, #16]
    ae36:	2596      	movs	r5, #150	; 0x96
    ae38:	f000 f866 	bl	af08 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    ae3c:	4602      	mov	r2, r0
    ae3e:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    ae42:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    ae46:	2801      	cmp	r0, #1
    ae48:	d00d      	beq.n	ae66 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x3a>
    ae4a:	4628      	mov	r0, r5
    ae4c:	f004 fc7d 	bl	f74a <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    ae50:	4908      	ldr	r1, [pc, #32]	; (ae74 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
    ae52:	6160      	str	r0, [r4, #20]
    ae54:	2000      	movs	r0, #0
    ae56:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    ae5a:	6961      	ldr	r1, [r4, #20]
    ae5c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    ae5e:	4408      	add	r0, r1
    ae60:	4905      	ldr	r1, [pc, #20]	; (ae78 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    ae62:	6008      	str	r0, [r1, #0]
    ae64:	bd70      	pop	{r4, r5, r6, pc}
    ae66:	4633      	mov	r3, r6
    ae68:	4628      	mov	r0, r5
    ae6a:	f004 fc8a 	bl	f782 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    ae6e:	e7ef      	b.n	ae50 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x24>
    ae70:	20000e18 	.word	0x20000e18
    ae74:	40008000 	.word	0x40008000
    ae78:	40008544 	.word	0x40008544

0000ae7c <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    ae7c:	b510      	push	{r4, lr}
    ae7e:	f001 f93a 	bl	c0f6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    ae82:	2800      	cmp	r0, #0
    ae84:	d006      	beq.n	ae94 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    ae86:	4804      	ldr	r0, [pc, #16]	; (ae98 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    ae88:	6801      	ldr	r1, [r0, #0]
    ae8a:	f021 0101 	bic.w	r1, r1, #1
    ae8e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    ae92:	6001      	str	r1, [r0, #0]
    ae94:	bd10      	pop	{r4, pc}
    ae96:	0000      	.short	0x0000
    ae98:	40001774 	.word	0x40001774

0000ae9c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    ae9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aea0:	2240      	movs	r2, #64	; 0x40
    aea2:	2100      	movs	r1, #0
    aea4:	4813      	ldr	r0, [pc, #76]	; (aef4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    aea6:	f001 f9d6 	bl	c256 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    aeaa:	f000 fd29 	bl	b900 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x408>
    aeae:	f001 f8db 	bl	c068 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    aeb2:	4d11      	ldr	r5, [pc, #68]	; (aef8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    aeb4:	4e10      	ldr	r6, [pc, #64]	; (aef8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    aeb6:	2400      	movs	r4, #0
    aeb8:	4f0f      	ldr	r7, [pc, #60]	; (aef8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    aeba:	3508      	adds	r5, #8
    aebc:	3610      	adds	r6, #16
    aebe:	b928      	cbnz	r0, aecc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    aec0:	f001 f8e9 	bl	c096 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    aec4:	b910      	cbnz	r0, aecc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    aec6:	f001 f8f0 	bl	c0aa <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    aeca:	b108      	cbz	r0, aed0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    aecc:	2224      	movs	r2, #36	; 0x24
    aece:	e006      	b.n	aede <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    aed0:	f001 f92b 	bl	c12a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    aed4:	b910      	cbnz	r0, aedc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    aed6:	f001 f91e 	bl	c116 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    aeda:	b140      	cbz	r0, aeee <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    aedc:	2240      	movs	r2, #64	; 0x40
    aede:	21ff      	movs	r1, #255	; 0xff
    aee0:	4638      	mov	r0, r7
    aee2:	f001 f9b8 	bl	c256 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    aee6:	602c      	str	r4, [r5, #0]
    aee8:	6034      	str	r4, [r6, #0]
    aeea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    aeee:	2238      	movs	r2, #56	; 0x38
    aef0:	e7f5      	b.n	aede <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    aef2:	0000      	.short	0x0000
    aef4:	20000e18 	.word	0x20000e18
    aef8:	40000e00 	.word	0x40000e00

0000aefc <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>:
    aefc:	4901      	ldr	r1, [pc, #4]	; (af04 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA+0x8>)
    aefe:	7008      	strb	r0, [r1, #0]
    af00:	4770      	bx	lr
    af02:	0000      	.short	0x0000
    af04:	20000270 	.word	0x20000270

0000af08 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    af08:	4814      	ldr	r0, [pc, #80]	; (af5c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x54>)
    af0a:	b510      	push	{r4, lr}
    af0c:	f890 1029 	ldrb.w	r1, [r0, #41]	; 0x29
    af10:	7ac0      	ldrb	r0, [r0, #11]
    af12:	b141      	cbz	r1, af26 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x1e>
    af14:	2902      	cmp	r1, #2
    af16:	d00b      	beq.n	af30 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    af18:	2802      	cmp	r0, #2
    af1a:	d009      	beq.n	af30 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    af1c:	2901      	cmp	r1, #1
    af1e:	d00b      	beq.n	af38 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    af20:	2801      	cmp	r0, #1
    af22:	d009      	beq.n	af38 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    af24:	e015      	b.n	af52 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4a>
    af26:	2800      	cmp	r0, #0
    af28:	d1f6      	bne.n	af18 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x10>
    af2a:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
    af2e:	e00d      	b.n	af4c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x44>
    af30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    af34:	f000 bc56 	b.w	b7e4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2ec>
    af38:	4809      	ldr	r0, [pc, #36]	; (af60 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x58>)
    af3a:	6800      	ldr	r0, [r0, #0]
    af3c:	f000 000f 	and.w	r0, r0, #15
    af40:	2803      	cmp	r0, #3
    af42:	d006      	beq.n	af52 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4a>
    af44:	2804      	cmp	r0, #4
    af46:	d006      	beq.n	af56 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4e>
    af48:	f240 210b 	movw	r1, #523	; 0x20b
    af4c:	203e      	movs	r0, #62	; 0x3e
    af4e:	f7f8 ff05 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af52:	2001      	movs	r0, #1
    af54:	bd10      	pop	{r4, pc}
    af56:	2002      	movs	r0, #2
    af58:	bd10      	pop	{r4, pc}
    af5a:	0000      	.short	0x0000
    af5c:	20000e18 	.word	0x20000e18
    af60:	40001510 	.word	0x40001510

0000af64 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    af64:	4801      	ldr	r0, [pc, #4]	; (af6c <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    af66:	6a00      	ldr	r0, [r0, #32]
    af68:	4770      	bx	lr
    af6a:	0000      	.short	0x0000
    af6c:	20000e18 	.word	0x20000e18

0000af70 <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA>:
    af70:	4801      	ldr	r0, [pc, #4]	; (af78 <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA+0x8>)
    af72:	7f40      	ldrb	r0, [r0, #29]
    af74:	4770      	bx	lr
    af76:	0000      	.short	0x0000
    af78:	20000e18 	.word	0x20000e18

0000af7c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    af7c:	4913      	ldr	r1, [pc, #76]	; (afcc <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x50>)
    af7e:	b510      	push	{r4, lr}
    af80:	6b08      	ldr	r0, [r1, #48]	; 0x30
    af82:	4a13      	ldr	r2, [pc, #76]	; (afd0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x54>)
    af84:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
    af88:	6010      	str	r0, [r2, #0]
    af8a:	2000      	movs	r0, #0
    af8c:	6308      	str	r0, [r1, #48]	; 0x30
    af8e:	7408      	strb	r0, [r1, #16]
    af90:	6248      	str	r0, [r1, #36]	; 0x24
    af92:	6208      	str	r0, [r1, #32]
    af94:	490f      	ldr	r1, [pc, #60]	; (afd4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x58>)
    af96:	6008      	str	r0, [r1, #0]
    af98:	1f09      	subs	r1, r1, #4
    af9a:	6008      	str	r0, [r1, #0]
    af9c:	1f09      	subs	r1, r1, #4
    af9e:	6008      	str	r0, [r1, #0]
    afa0:	490c      	ldr	r1, [pc, #48]	; (afd4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x58>)
    afa2:	1d09      	adds	r1, r1, #4
    afa4:	6008      	str	r0, [r1, #0]
    afa6:	490c      	ldr	r1, [pc, #48]	; (afd8 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    afa8:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    afac:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    afb0:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    afb4:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    afb8:	f7ff fdfc 	bl	abb4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    afbc:	2001      	movs	r0, #1
    afbe:	f004 fb7b 	bl	f6b8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    afc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    afc6:	2001      	movs	r0, #1
    afc8:	f004 bb69 	b.w	f69e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    afcc:	20000e18 	.word	0x20000e18
    afd0:	4001f508 	.word	0x4001f508
    afd4:	40008548 	.word	0x40008548
    afd8:	40008000 	.word	0x40008000

0000afdc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    afdc:	b570      	push	{r4, r5, r6, lr}
    afde:	2001      	movs	r0, #1
    afe0:	f004 fb6a 	bl	f6b8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    afe4:	4837      	ldr	r0, [pc, #220]	; (b0c4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    afe6:	2400      	movs	r4, #0
    afe8:	6004      	str	r4, [r0, #0]
    afea:	2601      	movs	r6, #1
    afec:	6006      	str	r6, [r0, #0]
    afee:	f001 f872 	bl	c0d6 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    aff2:	4d35      	ldr	r5, [pc, #212]	; (b0c8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    aff4:	b118      	cbz	r0, affe <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x22>
    aff6:	6828      	ldr	r0, [r5, #0]
    aff8:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    affc:	6028      	str	r0, [r5, #0]
    affe:	f001 f85e 	bl	c0be <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b002:	b128      	cbz	r0, b010 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x34>
    b004:	6828      	ldr	r0, [r5, #0]
    b006:	4931      	ldr	r1, [pc, #196]	; (b0cc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    b008:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    b00c:	4308      	orrs	r0, r1
    b00e:	6028      	str	r0, [r5, #0]
    b010:	f001 f871 	bl	c0f6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b014:	b138      	cbz	r0, b026 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4a>
    b016:	482c      	ldr	r0, [pc, #176]	; (b0c8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    b018:	1d00      	adds	r0, r0, #4
    b01a:	6801      	ldr	r1, [r0, #0]
    b01c:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    b020:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    b024:	6001      	str	r1, [r0, #0]
    b026:	4928      	ldr	r1, [pc, #160]	; (b0c8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    b028:	4829      	ldr	r0, [pc, #164]	; (b0d0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    b02a:	313c      	adds	r1, #60	; 0x3c
    b02c:	6008      	str	r0, [r1, #0]
    b02e:	f7f8 fda1 	bl	3b74 <mpsl_fem_device_config_254_apply_get>
    b032:	b140      	cbz	r0, b046 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6a>
    b034:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b038:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    b03c:	1c41      	adds	r1, r0, #1
    b03e:	d002      	beq.n	b046 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6a>
    b040:	4921      	ldr	r1, [pc, #132]	; (b0c8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    b042:	3110      	adds	r1, #16
    b044:	6008      	str	r0, [r1, #0]
    b046:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    b04a:	6e00      	ldr	r0, [r0, #96]	; 0x60
    b04c:	1c41      	adds	r1, r0, #1
    b04e:	d004      	beq.n	b05a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x7e>
    b050:	4920      	ldr	r1, [pc, #128]	; (b0d4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    b052:	680a      	ldr	r2, [r1, #0]
    b054:	f360 4217 	bfi	r2, r0, #16, #8
    b058:	600a      	str	r2, [r1, #0]
    b05a:	491e      	ldr	r1, [pc, #120]	; (b0d4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    b05c:	f240 605b 	movw	r0, #1627	; 0x65b
    b060:	3954      	subs	r1, #84	; 0x54
    b062:	6008      	str	r0, [r1, #0]
    b064:	1f09      	subs	r1, r1, #4
    b066:	f240 1003 	movw	r0, #259	; 0x103
    b06a:	6008      	str	r0, [r1, #0]
    b06c:	1f08      	subs	r0, r1, #4
    b06e:	6006      	str	r6, [r0, #0]
    b070:	2001      	movs	r0, #1
    b072:	f000 fcab 	bl	b9cc <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b076:	4917      	ldr	r1, [pc, #92]	; (b0d4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    b078:	f240 1001 	movw	r0, #257	; 0x101
    b07c:	31c4      	adds	r1, #196	; 0xc4
    b07e:	6008      	str	r0, [r1, #0]
    b080:	4e15      	ldr	r6, [pc, #84]	; (b0d8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    b082:	2502      	movs	r5, #2
    b084:	f8c6 5200 	str.w	r5, [r6, #512]	; 0x200
    b088:	4915      	ldr	r1, [pc, #84]	; (b0e0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    b08a:	4814      	ldr	r0, [pc, #80]	; (b0dc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    b08c:	6008      	str	r0, [r1, #0]
    b08e:	4815      	ldr	r0, [pc, #84]	; (b0e4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    b090:	f506 7600 	add.w	r6, r6, #512	; 0x200
    b094:	8784      	strh	r4, [r0, #60]	; 0x3c
    b096:	3014      	adds	r0, #20
    b098:	6244      	str	r4, [r0, #36]	; 0x24
    b09a:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
    b09e:	2001      	movs	r0, #1
    b0a0:	f004 fafd 	bl	f69e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    b0a4:	2010      	movs	r0, #16
    b0a6:	f8c6 0104 	str.w	r0, [r6, #260]	; 0x104
    b0aa:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    b0ae:	f8c0 5100 	str.w	r5, [r0, #256]	; 0x100
    b0b2:	480d      	ldr	r0, [pc, #52]	; (b0e8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x10c>)
    b0b4:	6840      	ldr	r0, [r0, #4]
    b0b6:	2800      	cmp	r0, #0
    b0b8:	d002      	beq.n	b0c0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    b0ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b0be:	4700      	bx	r0
    b0c0:	bd70      	pop	{r4, r5, r6, pc}
    b0c2:	0000      	.short	0x0000
    b0c4:	40001ffc 	.word	0x40001ffc
    b0c8:	4000173c 	.word	0x4000173c
    b0cc:	80000096 	.word	0x80000096
    b0d0:	8900002c 	.word	0x8900002c
    b0d4:	4000158c 	.word	0x4000158c
    b0d8:	40001000 	.word	0x40001000
    b0dc:	0c0e0000 	.word	0x0c0e0000
    b0e0:	4001f508 	.word	0x4001f508
    b0e4:	20000e04 	.word	0x20000e04
    b0e8:	20000270 	.word	0x20000270

0000b0ec <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    b0ec:	4901      	ldr	r1, [pc, #4]	; (b0f4 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    b0ee:	7608      	strb	r0, [r1, #24]
    b0f0:	4770      	bx	lr
    b0f2:	0000      	.short	0x0000
    b0f4:	20000e18 	.word	0x20000e18

0000b0f8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    b0f8:	4904      	ldr	r1, [pc, #16]	; (b10c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x14>)
    b0fa:	6008      	str	r0, [r1, #0]
    b0fc:	4804      	ldr	r0, [pc, #16]	; (b110 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    b0fe:	f810 1f34 	ldrb.w	r1, [r0, #52]!
    b102:	f041 0101 	orr.w	r1, r1, #1
    b106:	7001      	strb	r1, [r0, #0]
    b108:	f000 ba92 	b.w	b630 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x138>
    b10c:	40001504 	.word	0x40001504
    b110:	20000e18 	.word	0x20000e18

0000b114 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    b114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b118:	4e35      	ldr	r6, [pc, #212]	; (b1f0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>)
    b11a:	4607      	mov	r7, r0
    b11c:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    b120:	468a      	mov	sl, r1
    b122:	4614      	mov	r4, r2
    b124:	6030      	str	r0, [r6, #0]
    b126:	4610      	mov	r0, r2
    b128:	f000 fc50 	bl	b9cc <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b12c:	f000 fa28 	bl	b580 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x88>
    b130:	f8df 90c0 	ldr.w	r9, [pc, #192]	; b1f4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>
    b134:	4d30      	ldr	r5, [pc, #192]	; (b1f8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>)
    b136:	f04f 0801 	mov.w	r8, #1
    b13a:	b127      	cbz	r7, b146 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x32>
    b13c:	2f01      	cmp	r7, #1
    b13e:	d01d      	beq.n	b17c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x68>
    b140:	f240 7124 	movw	r1, #1828	; 0x724
    b144:	e04a      	b.n	b1dc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>
    b146:	4620      	mov	r0, r4
    b148:	f000 fa3a 	bl	b5c0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    b14c:	4620      	mov	r0, r4
    b14e:	f000 f9fb 	bl	b548 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    b152:	2c02      	cmp	r4, #2
    b154:	d00f      	beq.n	b176 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x62>
    b156:	f640 0034 	movw	r0, #2100	; 0x834
    b15a:	bf00      	nop
    b15c:	f649 51f8 	movw	r1, #40440	; 0x9df8
    b160:	4401      	add	r1, r0
    b162:	4650      	mov	r0, sl
    b164:	f000 fbd6 	bl	b914 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x41c>
    b168:	4604      	mov	r4, r0
    b16a:	4648      	mov	r0, r9
    b16c:	f000 fbbc 	bl	b8e8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3f0>
    b170:	f885 800b 	strb.w	r8, [r5, #11]
    b174:	e014      	b.n	b1a0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x8c>
    b176:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    b17a:	e7ef      	b.n	b15c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x48>
    b17c:	f000 fa28 	bl	b5d0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xd8>
    b180:	f000 fb96 	bl	b8b0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3b8>
    b184:	f000 faa0 	bl	b6c8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d0>
    b188:	f649 71ba 	movw	r1, #40890	; 0x9fba
    b18c:	4650      	mov	r0, sl
    b18e:	f000 fbc1 	bl	b914 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x41c>
    b192:	4604      	mov	r4, r0
    b194:	4817      	ldr	r0, [pc, #92]	; (b1f4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    b196:	1d00      	adds	r0, r0, #4
    b198:	f000 fba6 	bl	b8e8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3f0>
    b19c:	2002      	movs	r0, #2
    b19e:	72e8      	strb	r0, [r5, #11]
    b1a0:	4816      	ldr	r0, [pc, #88]	; (b1fc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    b1a2:	6004      	str	r4, [r0, #0]
    b1a4:	4917      	ldr	r1, [pc, #92]	; (b204 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf0>)
    b1a6:	4816      	ldr	r0, [pc, #88]	; (b200 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>)
    b1a8:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    b1ac:	6b28      	ldr	r0, [r5, #48]	; 0x30
    b1ae:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    b1b2:	6328      	str	r0, [r5, #48]	; 0x30
    b1b4:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    b1b8:	6030      	str	r0, [r6, #0]
    b1ba:	2110      	movs	r1, #16
    b1bc:	f8c9 1304 	str.w	r1, [r9, #772]	; 0x304
    b1c0:	1200      	asrs	r0, r0, #8
    b1c2:	6030      	str	r0, [r6, #0]
    b1c4:	f000 fa6c 	bl	b6a0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1a8>
    b1c8:	490f      	ldr	r1, [pc, #60]	; (b208 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf4>)
    b1ca:	f8c1 804c 	str.w	r8, [r1, #76]	; 0x4c
    b1ce:	480b      	ldr	r0, [pc, #44]	; (b1fc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    b1d0:	300c      	adds	r0, #12
    b1d2:	6800      	ldr	r0, [r0, #0]
    b1d4:	42a0      	cmp	r0, r4
    b1d6:	d304      	bcc.n	b1e2 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xce>
    b1d8:	f240 7149 	movw	r1, #1865	; 0x749
    b1dc:	203e      	movs	r0, #62	; 0x3e
    b1de:	f7f8 fdbd 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b1e2:	4621      	mov	r1, r4
    b1e4:	4638      	mov	r0, r7
    b1e6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b1ea:	f004 ba96 	b.w	f71a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    b1ee:	0000      	.short	0x0000
    b1f0:	4001f504 	.word	0x4001f504
    b1f4:	40001000 	.word	0x40001000
    b1f8:	20000e18 	.word	0x20000e18
    b1fc:	40008540 	.word	0x40008540
    b200:	40008140 	.word	0x40008140
    b204:	4001f098 	.word	0x4001f098
    b208:	40008000 	.word	0x40008000

0000b20c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    b20c:	b510      	push	{r4, lr}
    b20e:	b14a      	cbz	r2, b224 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x18>
    b210:	4c12      	ldr	r4, [pc, #72]	; (b25c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x50>)
    b212:	7260      	strb	r0, [r4, #9]
    b214:	7363      	strb	r3, [r4, #13]
    b216:	07d0      	lsls	r0, r2, #31
    b218:	d007      	beq.n	b22a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x1e>
    b21a:	2a01      	cmp	r2, #1
    b21c:	d005      	beq.n	b22a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x1e>
    b21e:	f640 111e 	movw	r1, #2334	; 0x91e
    b222:	e00c      	b.n	b23e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x32>
    b224:	f640 1117 	movw	r1, #2327	; 0x917
    b228:	e009      	b.n	b23e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x32>
    b22a:	b159      	cbz	r1, b244 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>
    b22c:	2002      	movs	r0, #2
    b22e:	72a0      	strb	r0, [r4, #10]
    b230:	7322      	strb	r2, [r4, #12]
    b232:	2801      	cmp	r0, #1
    b234:	d008      	beq.n	b248 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x3c>
    b236:	2802      	cmp	r0, #2
    b238:	d00f      	beq.n	b25a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x4e>
    b23a:	f640 1135 	movw	r1, #2357	; 0x935
    b23e:	203e      	movs	r0, #62	; 0x3e
    b240:	f7f8 fd8c 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b244:	2001      	movs	r0, #1
    b246:	e7f2      	b.n	b22e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x22>
    b248:	7ae0      	ldrb	r0, [r4, #11]
    b24a:	2802      	cmp	r0, #2
    b24c:	d105      	bne.n	b25a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x4e>
    b24e:	f000 f9bf 	bl	b5d0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xd8>
    b252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b256:	f000 bb2b 	b.w	b8b0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3b8>
    b25a:	bd10      	pop	{r4, pc}
    b25c:	20000e18 	.word	0x20000e18

0000b260 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    b260:	490a      	ldr	r1, [pc, #40]	; (b28c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x2c>)
    b262:	b508      	push	{r3, lr}
    b264:	f8d1 211c 	ldr.w	r2, [r1, #284]	; 0x11c
    b268:	2a01      	cmp	r2, #1
    b26a:	d001      	beq.n	b270 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x10>
    b26c:	2000      	movs	r0, #0
    b26e:	bd08      	pop	{r3, pc}
    b270:	4a07      	ldr	r2, [pc, #28]	; (b290 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x30>)
    b272:	6812      	ldr	r2, [r2, #0]
    b274:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    b278:	4252      	negs	r2, r2
    b27a:	7002      	strb	r2, [r0, #0]
    b27c:	2000      	movs	r0, #0
    b27e:	f8c1 011c 	str.w	r0, [r1, #284]	; 0x11c
    b282:	4804      	ldr	r0, [pc, #16]	; (b294 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x34>)
    b284:	6800      	ldr	r0, [r0, #0]
    b286:	9000      	str	r0, [sp, #0]
    b288:	2001      	movs	r0, #1
    b28a:	bd08      	pop	{r3, pc}
    b28c:	40001000 	.word	0x40001000
    b290:	40001548 	.word	0x40001548
    b294:	4000111c 	.word	0x4000111c

0000b298 <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ>:
    b298:	4a04      	ldr	r2, [pc, #16]	; (b2ac <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ+0x14>)
    b29a:	6803      	ldr	r3, [r0, #0]
    b29c:	f8c2 3016 	str.w	r3, [r2, #22]
    b2a0:	8880      	ldrh	r0, [r0, #4]
    b2a2:	8350      	strh	r0, [r2, #26]
    b2a4:	f102 0014 	add.w	r0, r2, #20
    b2a8:	7201      	strb	r1, [r0, #8]
    b2aa:	4770      	bx	lr
    b2ac:	20000e04 	.word	0x20000e04

0000b2b0 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    b2b0:	4a04      	ldr	r2, [pc, #16]	; (b2c4 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x14>)
    b2b2:	78c1      	ldrb	r1, [r0, #3]
    b2b4:	6011      	str	r1, [r2, #0]
    b2b6:	6800      	ldr	r0, [r0, #0]
    b2b8:	4902      	ldr	r1, [pc, #8]	; (b2c4 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x14>)
    b2ba:	0200      	lsls	r0, r0, #8
    b2bc:	3908      	subs	r1, #8
    b2be:	6008      	str	r0, [r1, #0]
    b2c0:	4770      	bx	lr
    b2c2:	0000      	.short	0x0000
    b2c4:	40001524 	.word	0x40001524

0000b2c8 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    b2c8:	6800      	ldr	r0, [r0, #0]
    b2ca:	4902      	ldr	r1, [pc, #8]	; (b2d4 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0xc>)
    b2cc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b2d0:	6008      	str	r0, [r1, #0]
    b2d2:	4770      	bx	lr
    b2d4:	4000153c 	.word	0x4000153c

0000b2d8 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>:
    b2d8:	b510      	push	{r4, lr}
    b2da:	f000 fb53 	bl	b984 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x48c>
    b2de:	4806      	ldr	r0, [pc, #24]	; (b2f8 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x20>)
    b2e0:	6800      	ldr	r0, [r0, #0]
    b2e2:	2803      	cmp	r0, #3
    b2e4:	d001      	beq.n	b2ea <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x12>
    b2e6:	280b      	cmp	r0, #11
    b2e8:	d104      	bne.n	b2f4 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x1c>
    b2ea:	f44f 7128 	mov.w	r1, #672	; 0x2a0
    b2ee:	203e      	movs	r0, #62	; 0x3e
    b2f0:	f7f8 fd34 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b2f4:	bd10      	pop	{r4, pc}
    b2f6:	0000      	.short	0x0000
    b2f8:	40001550 	.word	0x40001550

0000b2fc <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    b2fc:	4901      	ldr	r1, [pc, #4]	; (b304 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    b2fe:	7648      	strb	r0, [r1, #25]
    b300:	4770      	bx	lr
    b302:	0000      	.short	0x0000
    b304:	20000e18 	.word	0x20000e18

0000b308 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    b308:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    b30c:	4d71      	ldr	r5, [pc, #452]	; (b4d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1cc>)
    b30e:	f04f 0801 	mov.w	r8, #1
    b312:	f8c5 804c 	str.w	r8, [r5, #76]	; 0x4c
    b316:	4870      	ldr	r0, [pc, #448]	; (b4d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>)
    b318:	f8d0 b000 	ldr.w	fp, [r0]
    b31c:	486f      	ldr	r0, [pc, #444]	; (b4dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d4>)
    b31e:	6800      	ldr	r0, [r0, #0]
    b320:	4c6f      	ldr	r4, [pc, #444]	; (b4e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d8>)
    b322:	e9c4 0b0e 	strd	r0, fp, [r4, #56]	; 0x38
    b326:	486f      	ldr	r0, [pc, #444]	; (b4e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1dc>)
    b328:	7800      	ldrb	r0, [r0, #0]
    b32a:	2804      	cmp	r0, #4
    b32c:	d302      	bcc.n	b334 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2c>
    b32e:	f44f 612b 	mov.w	r1, #2736	; 0xab0
    b332:	e0c3      	b.n	b4bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1b4>
    b334:	f000 f956 	bl	b5e4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xec>
    b338:	496b      	ldr	r1, [pc, #428]	; (b4e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e0>)
    b33a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    b33c:	6008      	str	r0, [r1, #0]
    b33e:	486b      	ldr	r0, [pc, #428]	; (b4ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>)
    b340:	2600      	movs	r6, #0
    b342:	6326      	str	r6, [r4, #48]	; 0x30
    b344:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b348:	f240 121d 	movw	r2, #285	; 0x11d
    b34c:	4391      	bics	r1, r2
    b34e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b352:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    b356:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
    b35a:	b908      	cbnz	r0, b360 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x58>
    b35c:	f8c5 8048 	str.w	r8, [r5, #72]	; 0x48
    b360:	f000 f9c4 	bl	b6ec <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1f4>
    b364:	4605      	mov	r5, r0
    b366:	485c      	ldr	r0, [pc, #368]	; (b4d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>)
    b368:	1f00      	subs	r0, r0, #4
    b36a:	6800      	ldr	r0, [r0, #0]
    b36c:	6260      	str	r0, [r4, #36]	; 0x24
    b36e:	f7ff fdcb 	bl	af08 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    b372:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    b376:	7ae0      	ldrb	r0, [r4, #11]
    b378:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    b37c:	46b2      	mov	sl, r6
    b37e:	6226      	str	r6, [r4, #32]
    b380:	4e5b      	ldr	r6, [pc, #364]	; (b4f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e8>)
    b382:	2802      	cmp	r0, #2
    b384:	d107      	bne.n	b396 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8e>
    b386:	7860      	ldrb	r0, [r4, #1]
    b388:	b128      	cbz	r0, b396 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8e>
    b38a:	6831      	ldr	r1, [r6, #0]
    b38c:	7809      	ldrb	r1, [r1, #0]
    b38e:	4001      	ands	r1, r0
    b390:	7820      	ldrb	r0, [r4, #0]
    b392:	4388      	bics	r0, r1
    b394:	d017      	beq.n	b3c6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xbe>
    b396:	f884 a01c 	strb.w	sl, [r4, #28]
    b39a:	f8df 9158 	ldr.w	r9, [pc, #344]	; b4f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ec>
    b39e:	07a8      	lsls	r0, r5, #30
    b3a0:	d502      	bpl.n	b3a8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xa0>
    b3a2:	f8d9 0000 	ldr.w	r0, [r9]
    b3a6:	6220      	str	r0, [r4, #32]
    b3a8:	0728      	lsls	r0, r5, #28
    b3aa:	d502      	bpl.n	b3b2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xaa>
    b3ac:	f8d9 0000 	ldr.w	r0, [r9]
    b3b0:	6220      	str	r0, [r4, #32]
    b3b2:	4f4b      	ldr	r7, [pc, #300]	; (b4e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d8>)
    b3b4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    b3b6:	3f14      	subs	r7, #20
    b3b8:	6939      	ldr	r1, [r7, #16]
    b3ba:	4788      	blx	r1
    b3bc:	4849      	ldr	r0, [pc, #292]	; (b4e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1dc>)
    b3be:	7800      	ldrb	r0, [r0, #0]
    b3c0:	07c0      	lsls	r0, r0, #31
    b3c2:	d003      	beq.n	b3cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc4>
    b3c4:	e01b      	b.n	b3fe <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf6>
    b3c6:	f884 801c 	strb.w	r8, [r4, #28]
    b3ca:	e7e6      	b.n	b39a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    b3cc:	6836      	ldr	r6, [r6, #0]
    b3ce:	7830      	ldrb	r0, [r6, #0]
    b3d0:	f000 000f 	and.w	r0, r0, #15
    b3d4:	2807      	cmp	r0, #7
    b3d6:	d210      	bcs.n	b3fa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf2>
    b3d8:	2206      	movs	r2, #6
    b3da:	f106 0109 	add.w	r1, r6, #9
    b3de:	1ca0      	adds	r0, r4, #2
    b3e0:	f000 fead 	bl	c13e <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    b3e4:	b930      	cbnz	r0, b3f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xec>
    b3e6:	7a20      	ldrb	r0, [r4, #8]
    b3e8:	7831      	ldrb	r1, [r6, #0]
    b3ea:	ebb0 1fd1 	cmp.w	r0, r1, lsr #7
    b3ee:	d101      	bne.n	b3f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xec>
    b3f0:	2001      	movs	r0, #1
    b3f2:	e000      	b.n	b3f6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xee>
    b3f4:	2000      	movs	r0, #0
    b3f6:	7760      	strb	r0, [r4, #29]
    b3f8:	e001      	b.n	b3fe <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf6>
    b3fa:	f884 a01d 	strb.w	sl, [r4, #29]
    b3fe:	2600      	movs	r6, #0
    b400:	4659      	mov	r1, fp
    b402:	4628      	mov	r0, r5
    b404:	f000 fa02 	bl	b80c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x314>
    b408:	b918      	cbnz	r0, b412 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x10a>
    b40a:	4938      	ldr	r1, [pc, #224]	; (b4ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>)
    b40c:	f8c1 8010 	str.w	r8, [r1, #16]
    b410:	2601      	movs	r6, #1
    b412:	07e8      	lsls	r0, r5, #31
    b414:	d002      	beq.n	b41c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x114>
    b416:	6838      	ldr	r0, [r7, #0]
    b418:	4780      	blx	r0
    b41a:	e032      	b.n	b482 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x17a>
    b41c:	07a8      	lsls	r0, r5, #30
    b41e:	d527      	bpl.n	b470 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>
    b420:	0768      	lsls	r0, r5, #29
    b422:	d41f      	bmi.n	b464 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>
    b424:	f000 fe67 	bl	c0f6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b428:	b9e0      	cbnz	r0, b464 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>
    b42a:	f000 fe54 	bl	c0d6 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    b42e:	b9c8      	cbnz	r0, b464 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>
    b430:	482f      	ldr	r0, [pc, #188]	; (b4f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e8>)
    b432:	38b4      	subs	r0, #180	; 0xb4
    b434:	6800      	ldr	r0, [r0, #0]
    b436:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    b43a:	f3c0 6300 	ubfx	r3, r0, #24, #1
    b43e:	f000 020f 	and.w	r2, r0, #15
    b442:	f3c0 1103 	ubfx	r1, r0, #4, #4
    b446:	f3c0 2003 	ubfx	r0, r0, #8, #4
    b44a:	b15b      	cbz	r3, b464 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>
    b44c:	b10a      	cbz	r2, b452 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14a>
    b44e:	b101      	cbz	r1, b452 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14a>
    b450:	b940      	cbnz	r0, b464 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>
    b452:	4827      	ldr	r0, [pc, #156]	; (b4f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e8>)
    b454:	38b0      	subs	r0, #176	; 0xb0
    b456:	6800      	ldr	r0, [r0, #0]
    b458:	b120      	cbz	r0, b464 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>
    b45a:	f1bc 0f03 	cmp.w	ip, #3
    b45e:	d201      	bcs.n	b464 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>
    b460:	f045 0504 	orr.w	r5, r5, #4
    b464:	f345 0080 	sbfx	r0, r5, #2, #1
    b468:	4631      	mov	r1, r6
    b46a:	1c40      	adds	r0, r0, #1
    b46c:	687a      	ldr	r2, [r7, #4]
    b46e:	e007      	b.n	b480 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x178>
    b470:	f015 0f28 	tst.w	r5, #40	; 0x28
    b474:	d005      	beq.n	b482 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x17a>
    b476:	f345 1140 	sbfx	r1, r5, #5, #1
    b47a:	68ba      	ldr	r2, [r7, #8]
    b47c:	4630      	mov	r0, r6
    b47e:	1c49      	adds	r1, r1, #1
    b480:	4790      	blx	r2
    b482:	06e8      	lsls	r0, r5, #27
    b484:	d501      	bpl.n	b48a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x182>
    b486:	68f8      	ldr	r0, [r7, #12]
    b488:	4780      	blx	r0
    b48a:	7ae0      	ldrb	r0, [r4, #11]
    b48c:	2802      	cmp	r0, #2
    b48e:	d11e      	bne.n	b4ce <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1c6>
    b490:	7c20      	ldrb	r0, [r4, #16]
    b492:	2800      	cmp	r0, #0
    b494:	d01b      	beq.n	b4ce <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1c6>
    b496:	2802      	cmp	r0, #2
    b498:	d004      	beq.n	b4a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x19c>
    b49a:	2801      	cmp	r0, #1
    b49c:	d008      	beq.n	b4b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1a8>
    b49e:	f640 314a 	movw	r1, #2890	; 0xb4a
    b4a2:	e00b      	b.n	b4bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1b4>
    b4a4:	6961      	ldr	r1, [r4, #20]
    b4a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    b4a8:	4401      	add	r1, r0
    b4aa:	f8c9 1000 	str.w	r1, [r9]
    b4ae:	e00a      	b.n	b4c6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1be>
    b4b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
    b4b2:	6960      	ldr	r0, [r4, #20]
    b4b4:	4288      	cmp	r0, r1
    b4b6:	d804      	bhi.n	b4c2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ba>
    b4b8:	f640 314b 	movw	r1, #2891	; 0xb4b
    b4bc:	203e      	movs	r0, #62	; 0x3e
    b4be:	f7f8 fc4d 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b4c2:	f8c9 0000 	str.w	r0, [r9]
    b4c6:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    b4ca:	f000 b9ff 	b.w	b8cc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3d4>
    b4ce:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    b4d2:	0000      	.short	0x0000
    b4d4:	40008000 	.word	0x40008000
    b4d8:	4000854c 	.word	0x4000854c
    b4dc:	4000b504 	.word	0x4000b504
    b4e0:	20000e18 	.word	0x20000e18
    b4e4:	20000270 	.word	0x20000270
    b4e8:	4001f508 	.word	0x4001f508
    b4ec:	40001000 	.word	0x40001000
    b4f0:	40001504 	.word	0x40001504
    b4f4:	40008544 	.word	0x40008544

0000b4f8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    b4f8:	b570      	push	{r4, r5, r6, lr}
    b4fa:	4b11      	ldr	r3, [pc, #68]	; (b540 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x48>)
    b4fc:	888c      	ldrh	r4, [r1, #4]
    b4fe:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    b502:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
    b506:	780c      	ldrb	r4, [r1, #0]
    b508:	f8d1 1001 	ldr.w	r1, [r1, #1]
    b50c:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    b510:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
    b514:	4d0b      	ldr	r5, [pc, #44]	; (b544 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4c>)
    b516:	6829      	ldr	r1, [r5, #0]
    b518:	f100 0608 	add.w	r6, r0, #8
    b51c:	2401      	movs	r4, #1
    b51e:	fa04 f306 	lsl.w	r3, r4, r6
    b522:	b132      	cbz	r2, b532 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    b524:	2a01      	cmp	r2, #1
    b526:	d006      	beq.n	b536 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3e>
    b528:	f240 41d1 	movw	r1, #1233	; 0x4d1
    b52c:	203e      	movs	r0, #62	; 0x3e
    b52e:	f7f8 fc15 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b532:	4399      	bics	r1, r3
    b534:	e000      	b.n	b538 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x40>
    b536:	4319      	orrs	r1, r3
    b538:	4084      	lsls	r4, r0
    b53a:	430c      	orrs	r4, r1
    b53c:	602c      	str	r4, [r5, #0]
    b53e:	bd70      	pop	{r4, r5, r6, pc}
    b540:	40001000 	.word	0x40001000
    b544:	40001640 	.word	0x40001640
    b548:	b510      	push	{r4, lr}
    b54a:	4604      	mov	r4, r0
    b54c:	f000 fdd3 	bl	c0f6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b550:	2800      	cmp	r0, #0
    b552:	d00e      	beq.n	b572 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x7a>
    b554:	4a09      	ldr	r2, [pc, #36]	; (b57c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x84>)
    b556:	6811      	ldr	r1, [r2, #0]
    b558:	0650      	lsls	r0, r2, #25
    b55a:	2c02      	cmp	r4, #2
    b55c:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    b560:	d008      	beq.n	b574 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x7c>
    b562:	f3c0 2006 	ubfx	r0, r0, #8, #7
    b566:	bf00      	nop
    b568:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    b56c:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    b570:	6010      	str	r0, [r2, #0]
    b572:	bd10      	pop	{r4, pc}
    b574:	f3c0 6006 	ubfx	r0, r0, #24, #7
    b578:	e7f6      	b.n	b568 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x70>
    b57a:	0000      	.short	0x0000
    b57c:	40001588 	.word	0x40001588
    b580:	480d      	ldr	r0, [pc, #52]	; (b5b8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc0>)
    b582:	7e40      	ldrb	r0, [r0, #25]
    b584:	2825      	cmp	r0, #37	; 0x25
    b586:	d007      	beq.n	b598 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xa0>
    b588:	2826      	cmp	r0, #38	; 0x26
    b58a:	d007      	beq.n	b59c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xa4>
    b58c:	2827      	cmp	r0, #39	; 0x27
    b58e:	d007      	beq.n	b5a0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xa8>
    b590:	280a      	cmp	r0, #10
    b592:	d807      	bhi.n	b5a4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xac>
    b594:	2204      	movs	r2, #4
    b596:	e006      	b.n	b5a6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xae>
    b598:	2102      	movs	r1, #2
    b59a:	e007      	b.n	b5ac <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xb4>
    b59c:	211a      	movs	r1, #26
    b59e:	e005      	b.n	b5ac <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xb4>
    b5a0:	2150      	movs	r1, #80	; 0x50
    b5a2:	e003      	b.n	b5ac <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xb4>
    b5a4:	2206      	movs	r2, #6
    b5a6:	eb02 0140 	add.w	r1, r2, r0, lsl #1
    b5aa:	b2c9      	uxtb	r1, r1
    b5ac:	4a03      	ldr	r2, [pc, #12]	; (b5bc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc4>)
    b5ae:	6011      	str	r1, [r2, #0]
    b5b0:	4902      	ldr	r1, [pc, #8]	; (b5bc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc4>)
    b5b2:	314c      	adds	r1, #76	; 0x4c
    b5b4:	6008      	str	r0, [r1, #0]
    b5b6:	4770      	bx	lr
    b5b8:	20000e18 	.word	0x20000e18
    b5bc:	40001508 	.word	0x40001508
    b5c0:	4802      	ldr	r0, [pc, #8]	; (b5cc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xd4>)
    b5c2:	f990 0018 	ldrsb.w	r0, [r0, #24]
    b5c6:	f000 b9fb 	b.w	b9c0 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    b5ca:	0000      	.short	0x0000
    b5cc:	20000e18 	.word	0x20000e18
    b5d0:	4803      	ldr	r0, [pc, #12]	; (b5e0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xe8>)
    b5d2:	7a81      	ldrb	r1, [r0, #10]
    b5d4:	2901      	cmp	r1, #1
    b5d6:	d102      	bne.n	b5de <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xe6>
    b5d8:	7b40      	ldrb	r0, [r0, #13]
    b5da:	f7ff bff1 	b.w	b5c0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    b5de:	4770      	bx	lr
    b5e0:	20000e18 	.word	0x20000e18
    b5e4:	4805      	ldr	r0, [pc, #20]	; (b5fc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x104>)
    b5e6:	7ac0      	ldrb	r0, [r0, #11]
    b5e8:	2801      	cmp	r0, #1
    b5ea:	d003      	beq.n	b5f4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xfc>
    b5ec:	2802      	cmp	r0, #2
    b5ee:	d103      	bne.n	b5f8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x100>
    b5f0:	f004 b81d 	b.w	f62e <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>
    b5f4:	f004 b827 	b.w	f646 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>
    b5f8:	4770      	bx	lr
    b5fa:	0000      	.short	0x0000
    b5fc:	20000e18 	.word	0x20000e18
    b600:	4809      	ldr	r0, [pc, #36]	; (b628 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x130>)
    b602:	b508      	push	{r3, lr}
    b604:	2100      	movs	r1, #0
    b606:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b60a:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    b60e:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    b612:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    b616:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    b61a:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    b61e:	4803      	ldr	r0, [pc, #12]	; (b62c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x134>)
    b620:	6800      	ldr	r0, [r0, #0]
    b622:	9000      	str	r0, [sp, #0]
    b624:	bd08      	pop	{r3, pc}
    b626:	0000      	.short	0x0000
    b628:	40001000 	.word	0x40001000
    b62c:	40001118 	.word	0x40001118
    b630:	4816      	ldr	r0, [pc, #88]	; (b68c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x194>)
    b632:	b510      	push	{r4, lr}
    b634:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    b638:	07c1      	lsls	r1, r0, #31
    b63a:	d026      	beq.n	b68a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x192>
    b63c:	0781      	lsls	r1, r0, #30
    b63e:	d513      	bpl.n	b668 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x170>
    b640:	4813      	ldr	r0, [pc, #76]	; (b690 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x198>)
    b642:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b646:	f041 0101 	orr.w	r1, r1, #1
    b64a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b64e:	4811      	ldr	r0, [pc, #68]	; (b694 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x19c>)
    b650:	6800      	ldr	r0, [r0, #0]
    b652:	280b      	cmp	r0, #11
    b654:	d005      	beq.n	b662 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x16a>
    b656:	280a      	cmp	r0, #10
    b658:	d003      	beq.n	b662 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x16a>
    b65a:	2803      	cmp	r0, #3
    b65c:	d001      	beq.n	b662 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x16a>
    b65e:	2802      	cmp	r0, #2
    b660:	d113      	bne.n	b68a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x192>
    b662:	f240 512b 	movw	r1, #1323	; 0x52b
    b666:	e00d      	b.n	b684 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x18c>
    b668:	0740      	lsls	r0, r0, #29
    b66a:	d50e      	bpl.n	b68a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x192>
    b66c:	4808      	ldr	r0, [pc, #32]	; (b690 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x198>)
    b66e:	490a      	ldr	r1, [pc, #40]	; (b698 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1a0>)
    b670:	3008      	adds	r0, #8
    b672:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    b676:	4809      	ldr	r0, [pc, #36]	; (b69c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1a4>)
    b678:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    b67c:	2801      	cmp	r0, #1
    b67e:	d104      	bne.n	b68a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x192>
    b680:	f240 5132 	movw	r1, #1330	; 0x532
    b684:	203e      	movs	r0, #62	; 0x3e
    b686:	f7f8 fb69 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b68a:	bd10      	pop	{r4, pc}
    b68c:	20000e18 	.word	0x20000e18
    b690:	40001000 	.word	0x40001000
    b694:	40001550 	.word	0x40001550
    b698:	4001f098 	.word	0x4001f098
    b69c:	40008000 	.word	0x40008000
    b6a0:	4808      	ldr	r0, [pc, #32]	; (b6c4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1cc>)
    b6a2:	4601      	mov	r1, r0
    b6a4:	7a42      	ldrb	r2, [r0, #9]
    b6a6:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
    b6aa:	b112      	cbz	r2, b6b2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1ba>
    b6ac:	2a01      	cmp	r2, #1
    b6ae:	d003      	beq.n	b6b8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1c0>
    b6b0:	e006      	b.n	b6c0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1c8>
    b6b2:	f041 0102 	orr.w	r1, r1, #2
    b6b6:	e001      	b.n	b6bc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1c4>
    b6b8:	f041 0104 	orr.w	r1, r1, #4
    b6bc:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
    b6c0:	f7ff bfb6 	b.w	b630 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x138>
    b6c4:	20000e18 	.word	0x20000e18
    b6c8:	b510      	push	{r4, lr}
    b6ca:	f000 fd14 	bl	c0f6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b6ce:	2800      	cmp	r0, #0
    b6d0:	d108      	bne.n	b6e4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1ec>
    b6d2:	f000 fd00 	bl	c0d6 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    b6d6:	2800      	cmp	r0, #0
    b6d8:	d104      	bne.n	b6e4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1ec>
    b6da:	4803      	ldr	r0, [pc, #12]	; (b6e8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1f0>)
    b6dc:	6801      	ldr	r1, [r0, #0]
    b6de:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    b6e2:	6001      	str	r1, [r0, #0]
    b6e4:	bd10      	pop	{r4, pc}
    b6e6:	0000      	.short	0x0000
    b6e8:	40001568 	.word	0x40001568
    b6ec:	b538      	push	{r3, r4, r5, lr}
    b6ee:	4d36      	ldr	r5, [pc, #216]	; (b7c8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2d0>)
    b6f0:	2400      	movs	r4, #0
    b6f2:	7c28      	ldrb	r0, [r5, #16]
    b6f4:	b120      	cbz	r0, b700 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x208>
    b6f6:	4835      	ldr	r0, [pc, #212]	; (b7cc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2d4>)
    b6f8:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
    b6fc:	2801      	cmp	r0, #1
    b6fe:	d007      	beq.n	b710 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x218>
    b700:	2200      	movs	r2, #0
    b702:	7ae9      	ldrb	r1, [r5, #11]
    b704:	4832      	ldr	r0, [pc, #200]	; (b7d0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2d8>)
    b706:	2901      	cmp	r1, #1
    b708:	d004      	beq.n	b714 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x21c>
    b70a:	2902      	cmp	r1, #2
    b70c:	d00a      	beq.n	b724 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x22c>
    b70e:	e019      	b.n	b744 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x24c>
    b710:	2201      	movs	r2, #1
    b712:	e7f6      	b.n	b702 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x20a>
    b714:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    b718:	2901      	cmp	r1, #1
    b71a:	d001      	beq.n	b720 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x228>
    b71c:	2400      	movs	r4, #0
    b71e:	e011      	b.n	b744 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x24c>
    b720:	2408      	movs	r4, #8
    b722:	e00f      	b.n	b744 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x24c>
    b724:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    b728:	2901      	cmp	r1, #1
    b72a:	d006      	beq.n	b73a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x242>
    b72c:	2100      	movs	r1, #0
    b72e:	4b29      	ldr	r3, [pc, #164]	; (b7d4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2dc>)
    b730:	681b      	ldr	r3, [r3, #0]
    b732:	2b01      	cmp	r3, #1
    b734:	d003      	beq.n	b73e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x246>
    b736:	2404      	movs	r4, #4
    b738:	e002      	b.n	b740 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x248>
    b73a:	2102      	movs	r1, #2
    b73c:	e7f7      	b.n	b72e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x236>
    b73e:	2400      	movs	r4, #0
    b740:	430c      	orrs	r4, r1
    b742:	4314      	orrs	r4, r2
    b744:	f014 0f0b 	tst.w	r4, #11
    b748:	d105      	bne.n	b756 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x25e>
    b74a:	f8d0 1110 	ldr.w	r1, [r0, #272]	; 0x110
    b74e:	2901      	cmp	r1, #1
    b750:	d006      	beq.n	b760 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x268>
    b752:	2100      	movs	r1, #0
    b754:	430c      	orrs	r4, r1
    b756:	4920      	ldr	r1, [pc, #128]	; (b7d8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2e0>)
    b758:	7809      	ldrb	r1, [r1, #0]
    b75a:	07c9      	lsls	r1, r1, #31
    b75c:	d002      	beq.n	b764 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x26c>
    b75e:	e023      	b.n	b7a8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2b0>
    b760:	2110      	movs	r1, #16
    b762:	e7f7      	b.n	b754 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x25c>
    b764:	491d      	ldr	r1, [pc, #116]	; (b7dc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2e4>)
    b766:	6809      	ldr	r1, [r1, #0]
    b768:	f011 0fff 	tst.w	r1, #255	; 0xff
    b76c:	d003      	beq.n	b776 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x27e>
    b76e:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    b772:	2a01      	cmp	r2, #1
    b774:	d000      	beq.n	b778 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x280>
    b776:	2200      	movs	r2, #0
    b778:	f885 202a 	strb.w	r2, [r5, #42]	; 0x2a
    b77c:	f011 0fff 	tst.w	r1, #255	; 0xff
    b780:	d003      	beq.n	b78a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x292>
    b782:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
    b786:	2801      	cmp	r0, #1
    b788:	d000      	beq.n	b78c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x294>
    b78a:	2000      	movs	r0, #0
    b78c:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    b790:	4810      	ldr	r0, [pc, #64]	; (b7d4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2dc>)
    b792:	3010      	adds	r0, #16
    b794:	6800      	ldr	r0, [r0, #0]
    b796:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    b79a:	f7ff f875 	bl	a888 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    b79e:	2801      	cmp	r0, #1
    b7a0:	d000      	beq.n	b7a4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2ac>
    b7a2:	2000      	movs	r0, #0
    b7a4:	f885 002d 	strb.w	r0, [r5, #45]	; 0x2d
    b7a8:	f7ff ff2a 	bl	b600 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x108>
    b7ac:	06e0      	lsls	r0, r4, #27
    b7ae:	d506      	bpl.n	b7be <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2c6>
    b7b0:	0720      	lsls	r0, r4, #28
    b7b2:	d404      	bmi.n	b7be <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2c6>
    b7b4:	7ae8      	ldrb	r0, [r5, #11]
    b7b6:	2801      	cmp	r0, #1
    b7b8:	d101      	bne.n	b7be <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2c6>
    b7ba:	f044 0420 	orr.w	r4, r4, #32
    b7be:	4808      	ldr	r0, [pc, #32]	; (b7e0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2e8>)
    b7c0:	6800      	ldr	r0, [r0, #0]
    b7c2:	9000      	str	r0, [sp, #0]
    b7c4:	4620      	mov	r0, r4
    b7c6:	bd38      	pop	{r3, r4, r5, pc}
    b7c8:	20000e18 	.word	0x20000e18
    b7cc:	40008000 	.word	0x40008000
    b7d0:	40001000 	.word	0x40001000
    b7d4:	40001400 	.word	0x40001400
    b7d8:	20000270 	.word	0x20000270
    b7dc:	40001640 	.word	0x40001640
    b7e0:	40008144 	.word	0x40008144
    b7e4:	4808      	ldr	r0, [pc, #32]	; (b808 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x310>)
    b7e6:	b510      	push	{r4, lr}
    b7e8:	6800      	ldr	r0, [r0, #0]
    b7ea:	f000 000f 	and.w	r0, r0, #15
    b7ee:	2803      	cmp	r0, #3
    b7f0:	d006      	beq.n	b800 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x308>
    b7f2:	2804      	cmp	r0, #4
    b7f4:	d006      	beq.n	b804 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x30c>
    b7f6:	f240 2136 	movw	r1, #566	; 0x236
    b7fa:	203e      	movs	r0, #62	; 0x3e
    b7fc:	f7f8 faae 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b800:	2001      	movs	r0, #1
    b802:	bd10      	pop	{r4, pc}
    b804:	2002      	movs	r0, #2
    b806:	bd10      	pop	{r4, pc}
    b808:	40001510 	.word	0x40001510
    b80c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b810:	4c25      	ldr	r4, [pc, #148]	; (b8a8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3b0>)
    b812:	460d      	mov	r5, r1
    b814:	7aa2      	ldrb	r2, [r4, #10]
    b816:	b19a      	cbz	r2, b840 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x348>
    b818:	7b21      	ldrb	r1, [r4, #12]
    b81a:	078b      	lsls	r3, r1, #30
    b81c:	d503      	bpl.n	b826 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x32e>
    b81e:	0783      	lsls	r3, r0, #30
    b820:	d501      	bpl.n	b826 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x32e>
    b822:	0743      	lsls	r3, r0, #29
    b824:	d41c      	bmi.n	b860 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x368>
    b826:	06cb      	lsls	r3, r1, #27
    b828:	d505      	bpl.n	b836 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x33e>
    b82a:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    b82e:	b113      	cbz	r3, b836 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x33e>
    b830:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    b834:	b1a3      	cbz	r3, b860 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x368>
    b836:	070b      	lsls	r3, r1, #28
    b838:	d50b      	bpl.n	b852 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x35a>
    b83a:	7f23      	ldrb	r3, [r4, #28]
    b83c:	b983      	cbnz	r3, b860 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x368>
    b83e:	e008      	b.n	b852 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x35a>
    b840:	491a      	ldr	r1, [pc, #104]	; (b8ac <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3b4>)
    b842:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    b846:	6008      	str	r0, [r1, #0]
    b848:	f000 f85a 	bl	b900 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x408>
    b84c:	2000      	movs	r0, #0
    b84e:	7420      	strb	r0, [r4, #16]
    b850:	e028      	b.n	b8a4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3ac>
    b852:	0749      	lsls	r1, r1, #29
    b854:	d501      	bpl.n	b85a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x362>
    b856:	7f61      	ldrb	r1, [r4, #29]
    b858:	b111      	cbz	r1, b860 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x368>
    b85a:	f010 0f11 	tst.w	r0, #17
    b85e:	d002      	beq.n	b866 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x36e>
    b860:	f7ff f9a8 	bl	abb4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b864:	e01e      	b.n	b8a4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3ac>
    b866:	2a01      	cmp	r2, #1
    b868:	d001      	beq.n	b86e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x376>
    b86a:	2601      	movs	r6, #1
    b86c:	e000      	b.n	b870 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x378>
    b86e:	2600      	movs	r6, #0
    b870:	7a60      	ldrb	r0, [r4, #9]
    b872:	2801      	cmp	r0, #1
    b874:	d00e      	beq.n	b894 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x39c>
    b876:	2700      	movs	r7, #0
    b878:	f000 f842 	bl	b900 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x408>
    b87c:	2196      	movs	r1, #150	; 0x96
    b87e:	4630      	mov	r0, r6
    b880:	f000 f856 	bl	b930 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x438>
    b884:	4601      	mov	r1, r0
    b886:	b14f      	cbz	r7, b89c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a4>
    b888:	353b      	adds	r5, #59	; 0x3b
    b88a:	428d      	cmp	r5, r1
    b88c:	d904      	bls.n	b898 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a0>
    b88e:	2000      	movs	r0, #0
    b890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b894:	2701      	movs	r7, #1
    b896:	e7ef      	b.n	b878 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x380>
    b898:	2001      	movs	r0, #1
    b89a:	7260      	strb	r0, [r4, #9]
    b89c:	7b62      	ldrb	r2, [r4, #13]
    b89e:	4630      	mov	r0, r6
    b8a0:	f7ff fc38 	bl	b114 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    b8a4:	2001      	movs	r0, #1
    b8a6:	e7f3      	b.n	b890 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x398>
    b8a8:	20000e18 	.word	0x20000e18
    b8ac:	4001f508 	.word	0x4001f508
    b8b0:	4805      	ldr	r0, [pc, #20]	; (b8c8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3d0>)
    b8b2:	2100      	movs	r1, #0
    b8b4:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
    b8b8:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b8bc:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    b8c0:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b8c4:	4770      	bx	lr
    b8c6:	0000      	.short	0x0000
    b8c8:	40001000 	.word	0x40001000
    b8cc:	4804      	ldr	r0, [pc, #16]	; (b8e0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3e8>)
    b8ce:	6b01      	ldr	r1, [r0, #48]	; 0x30
    b8d0:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    b8d4:	6301      	str	r1, [r0, #48]	; 0x30
    b8d6:	4903      	ldr	r1, [pc, #12]	; (b8e4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3ec>)
    b8d8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    b8dc:	6008      	str	r0, [r1, #0]
    b8de:	4770      	bx	lr
    b8e0:	20000e18 	.word	0x20000e18
    b8e4:	4001f504 	.word	0x4001f504
    b8e8:	4903      	ldr	r1, [pc, #12]	; (b8f8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x400>)
    b8ea:	7a49      	ldrb	r1, [r1, #9]
    b8ec:	2900      	cmp	r1, #0
    b8ee:	d102      	bne.n	b8f6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3fe>
    b8f0:	4902      	ldr	r1, [pc, #8]	; (b8fc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x404>)
    b8f2:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    b8f6:	4770      	bx	lr
    b8f8:	20000e18 	.word	0x20000e18
    b8fc:	4001f098 	.word	0x4001f098
    b900:	4803      	ldr	r0, [pc, #12]	; (b910 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x418>)
    b902:	2100      	movs	r1, #0
    b904:	7241      	strb	r1, [r0, #9]
    b906:	7281      	strb	r1, [r0, #10]
    b908:	72c1      	strb	r1, [r0, #11]
    b90a:	2101      	movs	r1, #1
    b90c:	7301      	strb	r1, [r0, #12]
    b90e:	4770      	bx	lr
    b910:	20000e18 	.word	0x20000e18
    b914:	4a05      	ldr	r2, [pc, #20]	; (b92c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x434>)
    b916:	7a52      	ldrb	r2, [r2, #9]
    b918:	2a01      	cmp	r2, #1
    b91a:	d006      	beq.n	b92a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x432>
    b91c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b920:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    b924:	fbb1 f1f2 	udiv	r1, r1, r2
    b928:	1a40      	subs	r0, r0, r1
    b92a:	4770      	bx	lr
    b92c:	20000e18 	.word	0x20000e18
    b930:	b570      	push	{r4, r5, r6, lr}
    b932:	4c13      	ldr	r4, [pc, #76]	; (b980 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x488>)
    b934:	4603      	mov	r3, r0
    b936:	460d      	mov	r5, r1
    b938:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
    b93c:	2000      	movs	r0, #0
    b93e:	b15a      	cbz	r2, b958 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x460>
    b940:	4621      	mov	r1, r4
    b942:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    b946:	b163      	cbz	r3, b962 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x46a>
    b948:	2b01      	cmp	r3, #1
    b94a:	d111      	bne.n	b970 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x478>
    b94c:	2a01      	cmp	r2, #1
    b94e:	4628      	mov	r0, r5
    b950:	d012      	beq.n	b978 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x480>
    b952:	f003 ff3a 	bl	f7ca <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    b956:	e009      	b.n	b96c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x474>
    b958:	f240 7166 	movw	r1, #1894	; 0x766
    b95c:	203e      	movs	r0, #62	; 0x3e
    b95e:	f7f8 f9fd 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b962:	2a01      	cmp	r2, #1
    b964:	4628      	mov	r0, r5
    b966:	d004      	beq.n	b972 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x47a>
    b968:	f003 ff3d 	bl	f7e6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    b96c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    b96e:	4408      	add	r0, r1
    b970:	bd70      	pop	{r4, r5, r6, pc}
    b972:	f003 ff52 	bl	f81a <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    b976:	e7f9      	b.n	b96c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x474>
    b978:	f003 ff40 	bl	f7fc <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    b97c:	e7f6      	b.n	b96c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x474>
    b97e:	0000      	.short	0x0000
    b980:	20000e18 	.word	0x20000e18
    b984:	b510      	push	{r4, lr}
    b986:	2200      	movs	r2, #0
    b988:	2901      	cmp	r1, #1
    b98a:	d008      	beq.n	b99e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4a6>
    b98c:	2902      	cmp	r1, #2
    b98e:	d004      	beq.n	b99a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4a2>
    b990:	f240 217f 	movw	r1, #639	; 0x27f
    b994:	203e      	movs	r0, #62	; 0x3e
    b996:	f7f8 f9e1 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b99a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    b99e:	4905      	ldr	r1, [pc, #20]	; (b9b4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4bc>)
    b9a0:	430a      	orrs	r2, r1
    b9a2:	4905      	ldr	r1, [pc, #20]	; (b9b8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4c0>)
    b9a4:	600a      	str	r2, [r1, #0]
    b9a6:	4905      	ldr	r1, [pc, #20]	; (b9bc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4c4>)
    b9a8:	4308      	orrs	r0, r1
    b9aa:	4903      	ldr	r1, [pc, #12]	; (b9b8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4c0>)
    b9ac:	1d09      	adds	r1, r1, #4
    b9ae:	6008      	str	r0, [r1, #0]
    b9b0:	bd10      	pop	{r4, pc}
    b9b2:	0000      	.short	0x0000
    b9b4:	00100108 	.word	0x00100108
    b9b8:	40001514 	.word	0x40001514
    b9bc:	02030000 	.word	0x02030000

0000b9c0 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    b9c0:	4901      	ldr	r1, [pc, #4]	; (b9c8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    b9c2:	b2c0      	uxtb	r0, r0
    b9c4:	6008      	str	r0, [r1, #0]
    b9c6:	4770      	bx	lr
    b9c8:	4000150c 	.word	0x4000150c

0000b9cc <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>:
    b9cc:	b510      	push	{r4, lr}
    b9ce:	4907      	ldr	r1, [pc, #28]	; (b9ec <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x20>)
    b9d0:	2801      	cmp	r0, #1
    b9d2:	d005      	beq.n	b9e0 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x14>
    b9d4:	2802      	cmp	r0, #2
    b9d6:	d005      	beq.n	b9e4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x18>
    b9d8:	2197      	movs	r1, #151	; 0x97
    b9da:	203f      	movs	r0, #63	; 0x3f
    b9dc:	f7f8 f9be 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b9e0:	2003      	movs	r0, #3
    b9e2:	e000      	b.n	b9e6 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1a>
    b9e4:	2004      	movs	r0, #4
    b9e6:	6008      	str	r0, [r1, #0]
    b9e8:	bd10      	pop	{r4, pc}
    b9ea:	0000      	.short	0x0000
    b9ec:	40001510 	.word	0x40001510
    b9f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b9f4:	000d      	movs	r5, r1
    b9f6:	4604      	mov	r4, r0
    b9f8:	f04f 0602 	mov.w	r6, #2
    b9fc:	f04f 0701 	mov.w	r7, #1
    ba00:	d008      	beq.n	ba14 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x48>
    ba02:	7828      	ldrb	r0, [r5, #0]
    ba04:	b1c8      	cbz	r0, ba3a <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x6e>
    ba06:	2801      	cmp	r0, #1
    ba08:	d006      	beq.n	ba18 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x4c>
    ba0a:	2802      	cmp	r0, #2
    ba0c:	d013      	beq.n	ba36 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x6a>
    ba0e:	2803      	cmp	r0, #3
    ba10:	d13a      	bne.n	ba88 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0xbc>
    ba12:	e015      	b.n	ba40 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x74>
    ba14:	7707      	strb	r7, [r0, #28]
    ba16:	e00e      	b.n	ba36 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x6a>
    ba18:	6868      	ldr	r0, [r5, #4]
    ba1a:	28c8      	cmp	r0, #200	; 0xc8
    ba1c:	d303      	bcc.n	ba26 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x5a>
    ba1e:	2104      	movs	r1, #4
    ba20:	f7f5 fc76 	bl	1310 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    ba24:	b108      	cbz	r0, ba2a <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x5e>
    ba26:	2600      	movs	r6, #0
    ba28:	e007      	b.n	ba3a <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x6e>
    ba2a:	4620      	mov	r0, r4
    ba2c:	6869      	ldr	r1, [r5, #4]
    ba2e:	f000 f936 	bl	bc9e <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2d2>
    ba32:	2601      	movs	r6, #1
    ba34:	e001      	b.n	ba3a <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x6e>
    ba36:	f7f4 fcf9 	bl	42c <CONFIG_LOG_BUFFER_SIZE+0x2c>
    ba3a:	4630      	mov	r0, r6
    ba3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ba40:	7820      	ldrb	r0, [r4, #0]
    ba42:	2800      	cmp	r0, #0
    ba44:	d1f7      	bne.n	ba36 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x6a>
    ba46:	6868      	ldr	r0, [r5, #4]
    ba48:	f7f4 fcc2 	bl	3d0 <__aeabi_idiv0+0x4>
    ba4c:	b1e0      	cbz	r0, ba88 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0xbc>
    ba4e:	6869      	ldr	r1, [r5, #4]
    ba50:	7808      	ldrb	r0, [r1, #0]
    ba52:	b128      	cbz	r0, ba60 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x94>
    ba54:	78a0      	ldrb	r0, [r4, #2]
    ba56:	2805      	cmp	r0, #5
    ba58:	d007      	beq.n	ba6a <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x9e>
    ba5a:	f240 1179 	movw	r1, #377	; 0x179
    ba5e:	e010      	b.n	ba82 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0xb6>
    ba60:	4620      	mov	r0, r4
    ba62:	f000 f924 	bl	bcae <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2e2>
    ba66:	7067      	strb	r7, [r4, #1]
    ba68:	e7e5      	b.n	ba36 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x6a>
    ba6a:	4620      	mov	r0, r4
    ba6c:	f000 f937 	bl	bcde <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x312>
    ba70:	78e0      	ldrb	r0, [r4, #3]
    ba72:	f104 0108 	add.w	r1, r4, #8
    ba76:	f000 f809 	bl	ba8c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0xc0>
    ba7a:	2800      	cmp	r0, #0
    ba7c:	d1db      	bne.n	ba36 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x6a>
    ba7e:	f240 117b 	movw	r1, #379	; 0x17b
    ba82:	206a      	movs	r0, #106	; 0x6a
    ba84:	f7f7 feea 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ba88:	7727      	strb	r7, [r4, #28]
    ba8a:	e7d4      	b.n	ba36 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x6a>
    ba8c:	f7f5 be7c 	b.w	1788 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    ba90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ba94:	460d      	mov	r5, r1
    ba96:	4607      	mov	r7, r0
    ba98:	f7f4 fd30 	bl	4fc <sym_2W7CCKVMO57FYBILL5QVMEMYBCM4GARLKCZ4JNY>
    ba9c:	4606      	mov	r6, r0
    ba9e:	28ff      	cmp	r0, #255	; 0xff
    baa0:	d009      	beq.n	bab6 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0xea>
    baa2:	f7f4 fd1f 	bl	4e4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    baa6:	0004      	movs	r4, r0
    baa8:	d008      	beq.n	babc <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0xf0>
    baaa:	78e2      	ldrb	r2, [r4, #3]
    baac:	42ba      	cmp	r2, r7
    baae:	d008      	beq.n	bac2 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0xf6>
    bab0:	f240 119d 	movw	r1, #413	; 0x19d
    bab4:	e0f0      	b.n	bc98 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    bab6:	f240 1195 	movw	r1, #405	; 0x195
    baba:	e0ed      	b.n	bc98 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    babc:	f44f 71cc 	mov.w	r1, #408	; 0x198
    bac0:	e0ea      	b.n	bc98 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    bac2:	2700      	movs	r7, #0
    bac4:	2002      	movs	r0, #2
    bac6:	2d09      	cmp	r5, #9
    bac8:	d277      	bcs.n	bbba <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1ee>
    baca:	e8df f005 	tbb	[pc, r5]
    bace:	0d05      	.short	0x0d05
    bad0:	60572a2a 	.word	0x60572a2a
    bad4:	00829378 	.word	0x00829378
    bad8:	78a0      	ldrb	r0, [r4, #2]
    bada:	2804      	cmp	r0, #4
    badc:	d06e      	beq.n	bbbc <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1f0>
    bade:	2803      	cmp	r0, #3
    bae0:	d06c      	beq.n	bbbc <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1f0>
    bae2:	f240 11a1 	movw	r1, #417	; 0x1a1
    bae6:	e0d7      	b.n	bc98 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    bae8:	78a0      	ldrb	r0, [r4, #2]
    baea:	2804      	cmp	r0, #4
    baec:	d004      	beq.n	baf8 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x12c>
    baee:	2803      	cmp	r0, #3
    baf0:	d002      	beq.n	baf8 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x12c>
    baf2:	f240 11a5 	movw	r1, #421	; 0x1a5
    baf6:	e0cf      	b.n	bc98 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    baf8:	2005      	movs	r0, #5
    bafa:	70a0      	strb	r0, [r4, #2]
    bafc:	7727      	strb	r7, [r4, #28]
    bafe:	7820      	ldrb	r0, [r4, #0]
    bb00:	bb80      	cbnz	r0, bb64 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x198>
    bb02:	2100      	movs	r1, #0
    bb04:	4620      	mov	r0, r4
    bb06:	f000 f8ca 	bl	bc9e <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2d2>
    bb0a:	7a20      	ldrb	r0, [r4, #8]
    bb0c:	2801      	cmp	r0, #1
    bb0e:	d004      	beq.n	bb1a <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x14e>
    bb10:	6960      	ldr	r0, [r4, #20]
    bb12:	61a0      	str	r0, [r4, #24]
    bb14:	2100      	movs	r1, #0
    bb16:	6862      	ldr	r2, [r4, #4]
    bb18:	e041      	b.n	bb9e <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1d2>
    bb1a:	78e0      	ldrb	r0, [r4, #3]
    bb1c:	f7f5 fd2e 	bl	157c <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    bb20:	e7f7      	b.n	bb12 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x146>
    bb22:	78a1      	ldrb	r1, [r4, #2]
    bb24:	2904      	cmp	r1, #4
    bb26:	d004      	beq.n	bb32 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x166>
    bb28:	2903      	cmp	r1, #3
    bb2a:	d002      	beq.n	bb32 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x166>
    bb2c:	f240 11c3 	movw	r1, #451	; 0x1c3
    bb30:	e0b2      	b.n	bc98 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    bb32:	7822      	ldrb	r2, [r4, #0]
    bb34:	b122      	cbz	r2, bb40 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x174>
    bb36:	4621      	mov	r1, r4
    bb38:	4630      	mov	r0, r6
    bb3a:	f000 f8ec 	bl	bd16 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x34a>
    bb3e:	e0a2      	b.n	bc86 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2ba>
    bb40:	2904      	cmp	r1, #4
    bb42:	d000      	beq.n	bb46 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x17a>
    bb44:	2001      	movs	r0, #1
    bb46:	70a0      	strb	r0, [r4, #2]
    bb48:	6862      	ldr	r2, [r4, #4]
    bb4a:	2d02      	cmp	r5, #2
    bb4c:	d00b      	beq.n	bb66 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x19a>
    bb4e:	2106      	movs	r1, #6
    bb50:	4630      	mov	r0, r6
    bb52:	4790      	blx	r2
    bb54:	2800      	cmp	r0, #0
    bb56:	d06a      	beq.n	bc2e <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x262>
    bb58:	7800      	ldrb	r0, [r0, #0]
    bb5a:	2800      	cmp	r0, #0
    bb5c:	d067      	beq.n	bc2e <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x262>
    bb5e:	f240 11dd 	movw	r1, #477	; 0x1dd
    bb62:	e099      	b.n	bc98 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    bb64:	e031      	b.n	bbca <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1fe>
    bb66:	2105      	movs	r1, #5
    bb68:	4630      	mov	r0, r6
    bb6a:	4790      	blx	r2
    bb6c:	2800      	cmp	r0, #0
    bb6e:	d06f      	beq.n	bc50 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x284>
    bb70:	7800      	ldrb	r0, [r0, #0]
    bb72:	2800      	cmp	r0, #0
    bb74:	d06c      	beq.n	bc50 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x284>
    bb76:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
    bb7a:	e08d      	b.n	bc98 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    bb7c:	78a0      	ldrb	r0, [r4, #2]
    bb7e:	2805      	cmp	r0, #5
    bb80:	d002      	beq.n	bb88 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1bc>
    bb82:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
    bb86:	e087      	b.n	bc98 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    bb88:	2102      	movs	r1, #2
    bb8a:	6862      	ldr	r2, [r4, #4]
    bb8c:	e007      	b.n	bb9e <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1d2>
    bb8e:	78a0      	ldrb	r0, [r4, #2]
    bb90:	2805      	cmp	r0, #5
    bb92:	d002      	beq.n	bb9a <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1ce>
    bb94:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    bb98:	e07e      	b.n	bc98 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    bb9a:	6862      	ldr	r2, [r4, #4]
    bb9c:	2101      	movs	r1, #1
    bb9e:	4630      	mov	r0, r6
    bba0:	4790      	blx	r2
    bba2:	4601      	mov	r1, r0
    bba4:	4620      	mov	r0, r4
    bba6:	f7ff ff23 	bl	b9f0 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x24>
    bbaa:	2802      	cmp	r0, #2
    bbac:	d06b      	beq.n	bc86 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2ba>
    bbae:	b3e8      	cbz	r0, bc2c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x260>
    bbb0:	2801      	cmp	r0, #1
    bbb2:	d062      	beq.n	bc7a <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2ae>
    bbb4:	f240 212a 	movw	r1, #554	; 0x22a
    bbb8:	e06e      	b.n	bc98 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    bbba:	e05b      	b.n	bc74 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2a8>
    bbbc:	e065      	b.n	bc8a <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2be>
    bbbe:	78a0      	ldrb	r0, [r4, #2]
    bbc0:	2805      	cmp	r0, #5
    bbc2:	d002      	beq.n	bbca <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1fe>
    bbc4:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    bbc8:	e066      	b.n	bc98 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    bbca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bbce:	f7f4 bc2d 	b.w	42c <CONFIG_LOG_BUFFER_SIZE+0x2c>
    bbd2:	78a0      	ldrb	r0, [r4, #2]
    bbd4:	2805      	cmp	r0, #5
    bbd6:	d002      	beq.n	bbde <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x212>
    bbd8:	f240 11f5 	movw	r1, #501	; 0x1f5
    bbdc:	e05c      	b.n	bc98 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    bbde:	6862      	ldr	r2, [r4, #4]
    bbe0:	210a      	movs	r1, #10
    bbe2:	4630      	mov	r0, r6
    bbe4:	4790      	blx	r2
    bbe6:	4601      	mov	r1, r0
    bbe8:	4620      	mov	r0, r4
    bbea:	f7ff ff01 	bl	b9f0 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x24>
    bbee:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
    bbf2:	e051      	b.n	bc98 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    bbf4:	78a1      	ldrb	r1, [r4, #2]
    bbf6:	2905      	cmp	r1, #5
    bbf8:	d006      	beq.n	bc08 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x23c>
    bbfa:	7863      	ldrb	r3, [r4, #1]
    bbfc:	b10b      	cbz	r3, bc02 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x236>
    bbfe:	2903      	cmp	r1, #3
    bc00:	d002      	beq.n	bc08 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x23c>
    bc02:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
    bc06:	e047      	b.n	bc98 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    bc08:	7821      	ldrb	r1, [r4, #0]
    bc0a:	b129      	cbz	r1, bc18 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x24c>
    bc0c:	4621      	mov	r1, r4
    bc0e:	4630      	mov	r0, r6
    bc10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bc14:	f000 b87f 	b.w	bd16 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x34a>
    bc18:	7f21      	ldrb	r1, [r4, #28]
    bc1a:	b181      	cbz	r1, bc3e <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x272>
    bc1c:	7727      	strb	r7, [r4, #28]
    bc1e:	70a0      	strb	r0, [r4, #2]
    bc20:	6862      	ldr	r2, [r4, #4]
    bc22:	2108      	movs	r1, #8
    bc24:	4630      	mov	r0, r6
    bc26:	4790      	blx	r2
    bc28:	2800      	cmp	r0, #0
    bc2a:	e001      	b.n	bc30 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x264>
    bc2c:	e028      	b.n	bc80 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2b4>
    bc2e:	e02a      	b.n	bc86 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2ba>
    bc30:	d00e      	beq.n	bc50 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x284>
    bc32:	7800      	ldrb	r0, [r0, #0]
    bc34:	2800      	cmp	r0, #0
    bc36:	d00b      	beq.n	bc50 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x284>
    bc38:	f44f 7102 	mov.w	r1, #520	; 0x208
    bc3c:	e02c      	b.n	bc98 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    bc3e:	7861      	ldrb	r1, [r4, #1]
    bc40:	b159      	cbz	r1, bc5a <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x28e>
    bc42:	f104 0108 	add.w	r1, r4, #8
    bc46:	4610      	mov	r0, r2
    bc48:	f7ff ff20 	bl	ba8c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0xc0>
    bc4c:	b110      	cbz	r0, bc54 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x288>
    bc4e:	7067      	strb	r7, [r4, #1]
    bc50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bc54:	f44f 7103 	mov.w	r1, #524	; 0x20c
    bc58:	e01e      	b.n	bc98 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    bc5a:	70a0      	strb	r0, [r4, #2]
    bc5c:	6862      	ldr	r2, [r4, #4]
    bc5e:	2107      	movs	r1, #7
    bc60:	4630      	mov	r0, r6
    bc62:	4790      	blx	r2
    bc64:	2800      	cmp	r0, #0
    bc66:	d0f3      	beq.n	bc50 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x284>
    bc68:	7800      	ldrb	r0, [r0, #0]
    bc6a:	2800      	cmp	r0, #0
    bc6c:	d0f0      	beq.n	bc50 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x284>
    bc6e:	f44f 7105 	mov.w	r1, #532	; 0x214
    bc72:	e011      	b.n	bc98 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    bc74:	f240 2119 	movw	r1, #537	; 0x219
    bc78:	e00e      	b.n	bc98 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2cc>
    bc7a:	2104      	movs	r1, #4
    bc7c:	6862      	ldr	r2, [r4, #4]
    bc7e:	e78e      	b.n	bb9e <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1d2>
    bc80:	2103      	movs	r1, #3
    bc82:	6862      	ldr	r2, [r4, #4]
    bc84:	e78b      	b.n	bb9e <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1d2>
    bc86:	2d00      	cmp	r5, #0
    bc88:	d1e2      	bne.n	bc50 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x284>
    bc8a:	f000 f8f2 	bl	be72 <sym_WGWJTNZTDUUYDCZS4UGNX4L4JID5HLG6XRROR3Q>
    bc8e:	6800      	ldr	r0, [r0, #0]
    bc90:	2800      	cmp	r0, #0
    bc92:	d0dd      	beq.n	bc50 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x284>
    bc94:	f44f 710d 	mov.w	r1, #564	; 0x234
    bc98:	206a      	movs	r0, #106	; 0x6a
    bc9a:	f7f7 fddf 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bc9e:	4602      	mov	r2, r0
    bca0:	7a03      	ldrb	r3, [r0, #8]
    bca2:	68c0      	ldr	r0, [r0, #12]
    bca4:	4408      	add	r0, r1
    bca6:	60d0      	str	r0, [r2, #12]
    bca8:	3859      	subs	r0, #89	; 0x59
    bcaa:	f7f6 bcb7 	b.w	261c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    bcae:	2201      	movs	r2, #1
    bcb0:	7202      	strb	r2, [r0, #8]
    bcb2:	2200      	movs	r2, #0
    bcb4:	74c2      	strb	r2, [r0, #19]
    bcb6:	790a      	ldrb	r2, [r1, #4]
    bcb8:	b16a      	cbz	r2, bcd6 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x30a>
    bcba:	2200      	movs	r2, #0
    bcbc:	8202      	strh	r2, [r0, #16]
    bcbe:	794a      	ldrb	r2, [r1, #5]
    bcc0:	b15a      	cbz	r2, bcda <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x30e>
    bcc2:	2204      	movs	r2, #4
    bcc4:	7482      	strb	r2, [r0, #18]
    bcc6:	688a      	ldr	r2, [r1, #8]
    bcc8:	326c      	adds	r2, #108	; 0x6c
    bcca:	60c2      	str	r2, [r0, #12]
    bccc:	68c9      	ldr	r1, [r1, #12]
    bcce:	6141      	str	r1, [r0, #20]
    bcd0:	2103      	movs	r1, #3
    bcd2:	7081      	strb	r1, [r0, #2]
    bcd4:	4770      	bx	lr
    bcd6:	222b      	movs	r2, #43	; 0x2b
    bcd8:	e7f0      	b.n	bcbc <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2f0>
    bcda:	2203      	movs	r2, #3
    bcdc:	e7f2      	b.n	bcc4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2f8>
    bcde:	b510      	push	{r4, lr}
    bce0:	4604      	mov	r4, r0
    bce2:	2000      	movs	r0, #0
    bce4:	7220      	strb	r0, [r4, #8]
    bce6:	74e0      	strb	r0, [r4, #19]
    bce8:	7908      	ldrb	r0, [r1, #4]
    bcea:	b180      	cbz	r0, bd0e <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x342>
    bcec:	2000      	movs	r0, #0
    bcee:	8220      	strh	r0, [r4, #16]
    bcf0:	7948      	ldrb	r0, [r1, #5]
    bcf2:	b170      	cbz	r0, bd12 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x346>
    bcf4:	2004      	movs	r0, #4
    bcf6:	74a0      	strb	r0, [r4, #18]
    bcf8:	68c8      	ldr	r0, [r1, #12]
    bcfa:	306c      	adds	r0, #108	; 0x6c
    bcfc:	60e0      	str	r0, [r4, #12]
    bcfe:	6889      	ldr	r1, [r1, #8]
    bd00:	69a0      	ldr	r0, [r4, #24]
    bd02:	f7f5 fbe1 	bl	14c8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    bd06:	6160      	str	r0, [r4, #20]
    bd08:	2004      	movs	r0, #4
    bd0a:	70a0      	strb	r0, [r4, #2]
    bd0c:	bd10      	pop	{r4, pc}
    bd0e:	202b      	movs	r0, #43	; 0x2b
    bd10:	e7ed      	b.n	bcee <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x322>
    bd12:	2003      	movs	r0, #3
    bd14:	e7ef      	b.n	bcf6 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x32a>
    bd16:	b570      	push	{r4, r5, r6, lr}
    bd18:	4605      	mov	r5, r0
    bd1a:	460c      	mov	r4, r1
    bd1c:	78c8      	ldrb	r0, [r1, #3]
    bd1e:	f7f6 fa5b 	bl	21d8 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    bd22:	b178      	cbz	r0, bd44 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x378>
    bd24:	4620      	mov	r0, r4
    bd26:	f000 f810 	bl	bd4a <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x37e>
    bd2a:	6862      	ldr	r2, [r4, #4]
    bd2c:	2109      	movs	r1, #9
    bd2e:	4628      	mov	r0, r5
    bd30:	4790      	blx	r2
    bd32:	2800      	cmp	r0, #0
    bd34:	d008      	beq.n	bd48 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x37c>
    bd36:	7800      	ldrb	r0, [r0, #0]
    bd38:	2800      	cmp	r0, #0
    bd3a:	d005      	beq.n	bd48 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x37c>
    bd3c:	21db      	movs	r1, #219	; 0xdb
    bd3e:	206a      	movs	r0, #106	; 0x6a
    bd40:	f7f7 fd8c 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bd44:	21d7      	movs	r1, #215	; 0xd7
    bd46:	e7fa      	b.n	bd3e <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x372>
    bd48:	bd70      	pop	{r4, r5, r6, pc}
    bd4a:	2100      	movs	r1, #0
    bd4c:	7081      	strb	r1, [r0, #2]
    bd4e:	7001      	strb	r1, [r0, #0]
    bd50:	7041      	strb	r1, [r0, #1]
    bd52:	4770      	bx	lr

0000bd54 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    bd54:	b570      	push	{r4, r5, r6, lr}
    bd56:	f7f4 fbbf 	bl	4d8 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    bd5a:	4605      	mov	r5, r0
    bd5c:	2400      	movs	r4, #0
    bd5e:	e006      	b.n	bd6e <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    bd60:	4620      	mov	r0, r4
    bd62:	f7f4 fbbf 	bl	4e4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    bd66:	f7ff fff0 	bl	bd4a <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x37e>
    bd6a:	1c64      	adds	r4, r4, #1
    bd6c:	b2e4      	uxtb	r4, r4
    bd6e:	42ac      	cmp	r4, r5
    bd70:	d3f6      	bcc.n	bd60 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    bd72:	bd70      	pop	{r4, r5, r6, pc}

0000bd74 <mpsl_timeslot_request>:
    bd74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bd78:	460d      	mov	r5, r1
    bd7a:	f7f4 fbb3 	bl	4e4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    bd7e:	0004      	movs	r4, r0
    bd80:	d007      	beq.n	bd92 <mpsl_timeslot_request+0x1e>
    bd82:	78a0      	ldrb	r0, [r4, #2]
    bd84:	f06f 0622 	mvn.w	r6, #34	; 0x22
    bd88:	2801      	cmp	r0, #1
    bd8a:	d006      	beq.n	bd9a <mpsl_timeslot_request+0x26>
    bd8c:	2802      	cmp	r0, #2
    bd8e:	d110      	bne.n	bdb2 <mpsl_timeslot_request+0x3e>
    bd90:	e003      	b.n	bd9a <mpsl_timeslot_request+0x26>
    bd92:	f06f 0001 	mvn.w	r0, #1
    bd96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bd9a:	f06f 0715 	mvn.w	r7, #21
    bd9e:	b155      	cbz	r5, bdb6 <mpsl_timeslot_request+0x42>
    bda0:	4628      	mov	r0, r5
    bda2:	f7f4 fb15 	bl	3d0 <__aeabi_idiv0+0x4>
    bda6:	b130      	cbz	r0, bdb6 <mpsl_timeslot_request+0x42>
    bda8:	7828      	ldrb	r0, [r5, #0]
    bdaa:	b130      	cbz	r0, bdba <mpsl_timeslot_request+0x46>
    bdac:	78a0      	ldrb	r0, [r4, #2]
    bdae:	2802      	cmp	r0, #2
    bdb0:	d008      	beq.n	bdc4 <mpsl_timeslot_request+0x50>
    bdb2:	4630      	mov	r0, r6
    bdb4:	e7ef      	b.n	bd96 <mpsl_timeslot_request+0x22>
    bdb6:	4638      	mov	r0, r7
    bdb8:	e7ed      	b.n	bd96 <mpsl_timeslot_request+0x22>
    bdba:	4629      	mov	r1, r5
    bdbc:	4620      	mov	r0, r4
    bdbe:	f7ff ff76 	bl	bcae <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2e2>
    bdc2:	e003      	b.n	bdcc <mpsl_timeslot_request+0x58>
    bdc4:	4629      	mov	r1, r5
    bdc6:	4620      	mov	r0, r4
    bdc8:	f7ff ff89 	bl	bcde <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x312>
    bdcc:	78e0      	ldrb	r0, [r4, #3]
    bdce:	f104 0108 	add.w	r1, r4, #8
    bdd2:	f7ff fe5b 	bl	ba8c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0xc0>
    bdd6:	b108      	cbz	r0, bddc <mpsl_timeslot_request+0x68>
    bdd8:	2000      	movs	r0, #0
    bdda:	e7dc      	b.n	bd96 <mpsl_timeslot_request+0x22>
    bddc:	f240 21ae 	movw	r1, #686	; 0x2ae
    bde0:	206a      	movs	r0, #106	; 0x6a
    bde2:	f7f7 fd3b 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

0000bde6 <mpsl_timeslot_session_close>:
    bde6:	b510      	push	{r4, lr}
    bde8:	4604      	mov	r4, r0
    bdea:	f7f4 fb7b 	bl	4e4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    bdee:	0001      	movs	r1, r0
    bdf0:	d004      	beq.n	bdfc <mpsl_timeslot_session_close+0x16>
    bdf2:	7808      	ldrb	r0, [r1, #0]
    bdf4:	f06f 0222 	mvn.w	r2, #34	; 0x22
    bdf8:	b968      	cbnz	r0, be16 <mpsl_timeslot_session_close+0x30>
    bdfa:	e002      	b.n	be02 <mpsl_timeslot_session_close+0x1c>
    bdfc:	f06f 0001 	mvn.w	r0, #1
    be00:	bd10      	pop	{r4, pc}
    be02:	7888      	ldrb	r0, [r1, #2]
    be04:	b138      	cbz	r0, be16 <mpsl_timeslot_session_close+0x30>
    be06:	2802      	cmp	r0, #2
    be08:	d007      	beq.n	be1a <mpsl_timeslot_session_close+0x34>
    be0a:	2801      	cmp	r0, #1
    be0c:	d005      	beq.n	be1a <mpsl_timeslot_session_close+0x34>
    be0e:	2001      	movs	r0, #1
    be10:	7008      	strb	r0, [r1, #0]
    be12:	2000      	movs	r0, #0
    be14:	bd10      	pop	{r4, pc}
    be16:	4610      	mov	r0, r2
    be18:	bd10      	pop	{r4, pc}
    be1a:	4620      	mov	r0, r4
    be1c:	f7ff ff7b 	bl	bd16 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x34a>
    be20:	e7f7      	b.n	be12 <mpsl_timeslot_session_close+0x2c>

0000be22 <mpsl_timeslot_session_count_set>:
    be22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    be26:	460e      	mov	r6, r1
    be28:	4607      	mov	r7, r0
    be2a:	f7f4 fb55 	bl	4d8 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    be2e:	4605      	mov	r5, r0
    be30:	2400      	movs	r4, #0
    be32:	e00a      	b.n	be4a <mpsl_timeslot_session_count_set+0x28>
    be34:	4620      	mov	r0, r4
    be36:	f7f4 fb55 	bl	4e4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    be3a:	7880      	ldrb	r0, [r0, #2]
    be3c:	b118      	cbz	r0, be46 <mpsl_timeslot_session_count_set+0x24>
    be3e:	f04f 30ff 	mov.w	r0, #4294967295
    be42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    be46:	1c64      	adds	r4, r4, #1
    be48:	b2e4      	uxtb	r4, r4
    be4a:	42ac      	cmp	r4, r5
    be4c:	d3f2      	bcc.n	be34 <mpsl_timeslot_session_count_set+0x12>
    be4e:	2e08      	cmp	r6, #8
    be50:	d902      	bls.n	be58 <mpsl_timeslot_session_count_set+0x36>
    be52:	f06f 0015 	mvn.w	r0, #21
    be56:	e7f4      	b.n	be42 <mpsl_timeslot_session_count_set+0x20>
    be58:	b117      	cbz	r7, be60 <mpsl_timeslot_session_count_set+0x3e>
    be5a:	4631      	mov	r1, r6
    be5c:	4638      	mov	r0, r7
    be5e:	e001      	b.n	be64 <mpsl_timeslot_session_count_set+0x42>
    be60:	2100      	movs	r1, #0
    be62:	4608      	mov	r0, r1
    be64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    be68:	f7f4 bb24 	b.w	4b4 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>

0000be6c <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    be6c:	2000      	movs	r0, #0
    be6e:	f7f7 b907 	b.w	3080 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

0000be72 <sym_WGWJTNZTDUUYDCZS4UGNX4L4JID5HLG6XRROR3Q>:
    be72:	2000      	movs	r0, #0
    be74:	f7f7 b8ea 	b.w	304c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>

0000be78 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    be78:	b510      	push	{r4, lr}
    be7a:	f7f6 fdd3 	bl	2a24 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    be7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    be82:	f000 b800 	b.w	be86 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>

0000be86 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>:
    be86:	0a41      	lsrs	r1, r0, #9
    be88:	f643 5209 	movw	r2, #15625	; 0x3d09
    be8c:	4351      	muls	r1, r2
    be8e:	f3c0 0008 	ubfx	r0, r0, #0, #9
    be92:	fb10 f002 	smulbb	r0, r0, r2
    be96:	f500 7080 	add.w	r0, r0, #256	; 0x100
    be9a:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    be9e:	4770      	bx	lr

0000bea0 <MPSL_IRQ_RADIO_Handler>:
    bea0:	f7f5 bb80 	b.w	15a4 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    bea4:	2800      	cmp	r0, #0
    bea6:	db09      	blt.n	bebc <MPSL_IRQ_RADIO_Handler+0x1c>
    bea8:	f000 021f 	and.w	r2, r0, #31
    beac:	2101      	movs	r1, #1
    beae:	4091      	lsls	r1, r2
    beb0:	0940      	lsrs	r0, r0, #5
    beb2:	0080      	lsls	r0, r0, #2
    beb4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    beb8:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    bebc:	4770      	bx	lr
    bebe:	2800      	cmp	r0, #0
    bec0:	db0d      	blt.n	bede <MPSL_IRQ_RADIO_Handler+0x3e>
    bec2:	f000 021f 	and.w	r2, r0, #31
    bec6:	2101      	movs	r1, #1
    bec8:	4091      	lsls	r1, r2
    beca:	0940      	lsrs	r0, r0, #5
    becc:	0080      	lsls	r0, r0, #2
    bece:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bed2:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    bed6:	f3bf 8f4f 	dsb	sy
    beda:	f3bf 8f6f 	isb	sy
    bede:	4770      	bx	lr

0000bee0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    bee0:	b570      	push	{r4, r5, r6, lr}
    bee2:	4602      	mov	r2, r0
    bee4:	2000      	movs	r0, #0
    bee6:	2900      	cmp	r1, #0
    bee8:	d01d      	beq.n	bf26 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    beea:	fba2 0101 	umull	r0, r1, r2, r1
    beee:	0a40      	lsrs	r0, r0, #9
    bef0:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    bef4:	0a49      	lsrs	r1, r1, #9
    bef6:	1c40      	adds	r0, r0, #1
    bef8:	f141 0100 	adc.w	r1, r1, #0
    befc:	f240 72a1 	movw	r2, #1953	; 0x7a1
    bf00:	1883      	adds	r3, r0, r2
    bf02:	f141 0100 	adc.w	r1, r1, #0
    bf06:	1c5b      	adds	r3, r3, #1
    bf08:	f141 0400 	adc.w	r4, r1, #0
    bf0c:	2100      	movs	r1, #0
    bf0e:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    bf12:	41a1      	sbcs	r1, r4
    bf14:	d203      	bcs.n	bf1e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    bf16:	2171      	movs	r1, #113	; 0x71
    bf18:	206d      	movs	r0, #109	; 0x6d
    bf1a:	f7f7 fc9f 	bl	385c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bf1e:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    bf22:	fbb0 f0f2 	udiv	r0, r0, r2
    bf26:	bd70      	pop	{r4, r5, r6, pc}
    bf28:	5840      	ldr	r0, [r0, r1]
    bf2a:	2800      	cmp	r0, #0
    bf2c:	d000      	beq.n	bf30 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    bf2e:	2001      	movs	r0, #1
    bf30:	4770      	bx	lr
    bf32:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    bf36:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    bf3a:	f002 0201 	and.w	r2, r2, #1
    bf3e:	03c0      	lsls	r0, r0, #15
    bf40:	d503      	bpl.n	bf4a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    bf42:	428a      	cmp	r2, r1
    bf44:	d101      	bne.n	bf4a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    bf46:	2001      	movs	r0, #1
    bf48:	4770      	bx	lr
    bf4a:	2000      	movs	r0, #0
    bf4c:	4770      	bx	lr

0000bf4e <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    bf4e:	b510      	push	{r4, lr}
    bf50:	2101      	movs	r1, #1
    bf52:	0788      	lsls	r0, r1, #30
    bf54:	f7f7 fc40 	bl	37d8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    bf58:	2800      	cmp	r0, #0
    bf5a:	d000      	beq.n	bf5e <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    bf5c:	2001      	movs	r0, #1
    bf5e:	bd10      	pop	{r4, pc}

0000bf60 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    bf60:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    bf64:	2101      	movs	r1, #1
    bf66:	6001      	str	r1, [r0, #0]
    bf68:	4770      	bx	lr

0000bf6a <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    bf6a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    bf6e:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    bf72:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    bf76:	f002 0203 	and.w	r2, r2, #3
    bf7a:	03c9      	lsls	r1, r1, #15
    bf7c:	d503      	bpl.n	bf86 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    bf7e:	4282      	cmp	r2, r0
    bf80:	d101      	bne.n	bf86 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    bf82:	2001      	movs	r0, #1
    bf84:	4770      	bx	lr
    bf86:	2000      	movs	r0, #0
    bf88:	4770      	bx	lr

0000bf8a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    bf8a:	b510      	push	{r4, lr}
    bf8c:	2100      	movs	r1, #0
    bf8e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    bf92:	f7f7 fc21 	bl	37d8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    bf96:	2800      	cmp	r0, #0
    bf98:	d000      	beq.n	bf9c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    bf9a:	2001      	movs	r0, #1
    bf9c:	bd10      	pop	{r4, pc}
    bf9e:	2800      	cmp	r0, #0
    bfa0:	db09      	blt.n	bfb6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    bfa2:	f000 021f 	and.w	r2, r0, #31
    bfa6:	2101      	movs	r1, #1
    bfa8:	4091      	lsls	r1, r2
    bfaa:	0940      	lsrs	r0, r0, #5
    bfac:	0080      	lsls	r0, r0, #2
    bfae:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bfb2:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    bfb6:	4770      	bx	lr
    bfb8:	2800      	cmp	r0, #0
    bfba:	db0d      	blt.n	bfd8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    bfbc:	f000 021f 	and.w	r2, r0, #31
    bfc0:	2101      	movs	r1, #1
    bfc2:	4091      	lsls	r1, r2
    bfc4:	0940      	lsrs	r0, r0, #5
    bfc6:	0080      	lsls	r0, r0, #2
    bfc8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bfcc:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    bfd0:	f3bf 8f4f 	dsb	sy
    bfd4:	f3bf 8f6f 	isb	sy
    bfd8:	4770      	bx	lr
    bfda:	1000      	.short	0x1000
    bfdc:	00fa0002 	.word	0x00fa0002
    bfe0:	ffdf0000 	.word	0xffdf0000
    bfe4:	4707a0e7 	.word	0x4707a0e7
    bfe8:	d67d016b 	.word	0xd67d016b
    bfec:	ce3a8a07 	.word	0xce3a8a07
    bff0:	d057d4b6 	.word	0xd057d4b6
    bff4:	c542      	.short	0xc542
    bff6:	2800      	cmp	r0, #0
    bff8:	db09      	blt.n	c00e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    bffa:	f000 021f 	and.w	r2, r0, #31
    bffe:	2101      	movs	r1, #1
    c000:	4091      	lsls	r1, r2
    c002:	0940      	lsrs	r0, r0, #5
    c004:	0080      	lsls	r0, r0, #2
    c006:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c00a:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c00e:	4770      	bx	lr

0000c010 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    c010:	f3ef 8110 	mrs	r1, PRIMASK
    c014:	b672      	cpsid	i
    c016:	7802      	ldrb	r2, [r0, #0]
    c018:	2a01      	cmp	r2, #1
    c01a:	d001      	beq.n	c020 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    c01c:	2201      	movs	r2, #1
    c01e:	e000      	b.n	c022 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    c020:	2200      	movs	r2, #0
    c022:	2301      	movs	r3, #1
    c024:	7003      	strb	r3, [r0, #0]
    c026:	b901      	cbnz	r1, c02a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    c028:	b662      	cpsie	i
    c02a:	b10a      	cbz	r2, c030 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    c02c:	2000      	movs	r0, #0
    c02e:	4770      	bx	lr
    c030:	f06f 0022 	mvn.w	r0, #34	; 0x22
    c034:	4770      	bx	lr

0000c036 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    c036:	2100      	movs	r1, #0
    c038:	7001      	strb	r1, [r0, #0]
    c03a:	4608      	mov	r0, r1
    c03c:	4770      	bx	lr

0000c03e <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    c03e:	f3ef 8110 	mrs	r1, PRIMASK
    c042:	b672      	cpsid	i
    c044:	2200      	movs	r2, #0
    c046:	7002      	strb	r2, [r0, #0]
    c048:	b901      	cbnz	r1, c04c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    c04a:	b662      	cpsie	i
    c04c:	2000      	movs	r0, #0
    c04e:	4770      	bx	lr

0000c050 <mpsl_low_priority_process>:
    c050:	f7f7 bcf0 	b.w	3a34 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000c054 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    c054:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c058:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c05c:	280f      	cmp	r0, #15
    c05e:	d001      	beq.n	c064 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    c060:	2000      	movs	r0, #0
    c062:	4770      	bx	lr
    c064:	2001      	movs	r0, #1
    c066:	4770      	bx	lr

0000c068 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    c068:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c06c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c070:	280a      	cmp	r0, #10
    c072:	d001      	beq.n	c078 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    c074:	2000      	movs	r0, #0
    c076:	4770      	bx	lr
    c078:	2001      	movs	r0, #1
    c07a:	4770      	bx	lr

0000c07c <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    c07c:	b500      	push	{lr}
    c07e:	f7ff fff3 	bl	c068 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c082:	b120      	cbz	r0, c08e <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    c084:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c088:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c08c:	b108      	cbz	r0, c092 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    c08e:	2000      	movs	r0, #0
    c090:	bd00      	pop	{pc}
    c092:	2001      	movs	r0, #1
    c094:	bd00      	pop	{pc}

0000c096 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    c096:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c09a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c09e:	280e      	cmp	r0, #14
    c0a0:	d001      	beq.n	c0a6 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    c0a2:	2000      	movs	r0, #0
    c0a4:	4770      	bx	lr
    c0a6:	2001      	movs	r0, #1
    c0a8:	4770      	bx	lr

0000c0aa <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    c0aa:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c0ae:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c0b2:	2810      	cmp	r0, #16
    c0b4:	d001      	beq.n	c0ba <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    c0b6:	2000      	movs	r0, #0
    c0b8:	4770      	bx	lr
    c0ba:	2001      	movs	r0, #1
    c0bc:	4770      	bx	lr

0000c0be <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    c0be:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c0c2:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c0c6:	2806      	cmp	r0, #6
    c0c8:	d003      	beq.n	c0d2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    c0ca:	1c40      	adds	r0, r0, #1
    c0cc:	d001      	beq.n	c0d2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    c0ce:	2000      	movs	r0, #0
    c0d0:	4770      	bx	lr
    c0d2:	2001      	movs	r0, #1
    c0d4:	4770      	bx	lr

0000c0d6 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    c0d6:	b500      	push	{lr}
    c0d8:	f7ff fff1 	bl	c0be <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c0dc:	b148      	cbz	r0, c0f2 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c0de:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c0e2:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c0e6:	2806      	cmp	r0, #6
    c0e8:	d303      	bcc.n	c0f2 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c0ea:	1c40      	adds	r0, r0, #1
    c0ec:	d001      	beq.n	c0f2 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c0ee:	2001      	movs	r0, #1
    c0f0:	bd00      	pop	{pc}
    c0f2:	2000      	movs	r0, #0
    c0f4:	bd00      	pop	{pc}

0000c0f6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    c0f6:	b500      	push	{lr}
    c0f8:	f7ff ffe1 	bl	c0be <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c0fc:	b138      	cbz	r0, c10e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    c0fe:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c102:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c106:	2806      	cmp	r0, #6
    c108:	d303      	bcc.n	c112 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    c10a:	1c40      	adds	r0, r0, #1
    c10c:	d001      	beq.n	c112 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    c10e:	2000      	movs	r0, #0
    c110:	bd00      	pop	{pc}
    c112:	2001      	movs	r0, #1
    c114:	bd00      	pop	{pc}

0000c116 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    c116:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c11a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c11e:	280d      	cmp	r0, #13
    c120:	d001      	beq.n	c126 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    c122:	2000      	movs	r0, #0
    c124:	4770      	bx	lr
    c126:	2001      	movs	r0, #1
    c128:	4770      	bx	lr

0000c12a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    c12a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c12e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c132:	2808      	cmp	r0, #8
    c134:	d001      	beq.n	c13a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    c136:	2000      	movs	r0, #0
    c138:	4770      	bx	lr
    c13a:	2001      	movs	r0, #1
    c13c:	4770      	bx	lr

0000c13e <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    c13e:	2a00      	cmp	r2, #0
    c140:	bf04      	itt	eq
    c142:	2000      	moveq	r0, #0
    c144:	4770      	bxeq	lr
    c146:	1e52      	subs	r2, r2, #1
    c148:	d007      	beq.n	c15a <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
    c14a:	7803      	ldrb	r3, [r0, #0]
    c14c:	f891 c000 	ldrb.w	ip, [r1]
    c150:	4563      	cmp	r3, ip
    c152:	bf04      	itt	eq
    c154:	1c40      	addeq	r0, r0, #1
    c156:	1c49      	addeq	r1, r1, #1
    c158:	d0f5      	beq.n	c146 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    c15a:	7800      	ldrb	r0, [r0, #0]
    c15c:	7809      	ldrb	r1, [r1, #0]
    c15e:	1a40      	subs	r0, r0, r1
    c160:	4770      	bx	lr

0000c162 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    c162:	b4f0      	push	{r4, r5, r6, r7}
    c164:	ea80 0c01 	eor.w	ip, r0, r1
    c168:	4603      	mov	r3, r0
    c16a:	f01c 0f03 	tst.w	ip, #3
    c16e:	d13c      	bne.n	c1ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c170:	f013 0f03 	tst.w	r3, #3
    c174:	d00b      	beq.n	c18e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    c176:	2a00      	cmp	r2, #0
    c178:	bf04      	itt	eq
    c17a:	bcf0      	popeq	{r4, r5, r6, r7}
    c17c:	4770      	bxeq	lr
    c17e:	f811 cb01 	ldrb.w	ip, [r1], #1
    c182:	f803 cb01 	strb.w	ip, [r3], #1
    c186:	1e52      	subs	r2, r2, #1
    c188:	f013 0f03 	tst.w	r3, #3
    c18c:	d1f3      	bne.n	c176 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    c18e:	2a03      	cmp	r2, #3
    c190:	d94f      	bls.n	c232 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    c192:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c196:	d24c      	bcs.n	c232 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    c198:	f1c2 0c00 	rsb	ip, r2, #0
    c19c:	ea4f 74ec 	mov.w	r4, ip, asr #31
    c1a0:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    c1a4:	ea4f 0cac 	mov.w	ip, ip, asr #2
    c1a8:	f1cc 0c00 	rsb	ip, ip, #0
    c1ac:	f1bc 0f00 	cmp.w	ip, #0
    c1b0:	dd1b      	ble.n	c1ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c1b2:	1f0d      	subs	r5, r1, #4
    c1b4:	1f1c      	subs	r4, r3, #4
    c1b6:	f01c 0f01 	tst.w	ip, #1
    c1ba:	d003      	beq.n	c1c4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    c1bc:	f855 6f04 	ldr.w	r6, [r5, #4]!
    c1c0:	f844 6f04 	str.w	r6, [r4, #4]!
    c1c4:	ea5f 066c 	movs.w	r6, ip, asr #1
    c1c8:	d007      	beq.n	c1da <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    c1ca:	686f      	ldr	r7, [r5, #4]
    c1cc:	6067      	str	r7, [r4, #4]
    c1ce:	f855 7f08 	ldr.w	r7, [r5, #8]!
    c1d2:	f844 7f08 	str.w	r7, [r4, #8]!
    c1d6:	1e76      	subs	r6, r6, #1
    c1d8:	d1f7      	bne.n	c1ca <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    c1da:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    c1de:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    c1e2:	f1cc 0c00 	rsb	ip, ip, #0
    c1e6:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    c1ea:	2a00      	cmp	r2, #0
    c1ec:	bf04      	itt	eq
    c1ee:	bcf0      	popeq	{r4, r5, r6, r7}
    c1f0:	4770      	bxeq	lr
    c1f2:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c1f6:	d226      	bcs.n	c246 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    c1f8:	2a00      	cmp	r2, #0
    c1fa:	bfdc      	itt	le
    c1fc:	bcf0      	pople	{r4, r5, r6, r7}
    c1fe:	4770      	bxle	lr
    c200:	1e49      	subs	r1, r1, #1
    c202:	1e5b      	subs	r3, r3, #1
    c204:	f012 0f01 	tst.w	r2, #1
    c208:	d003      	beq.n	c212 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    c20a:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    c20e:	f803 cf01 	strb.w	ip, [r3, #1]!
    c212:	1052      	asrs	r2, r2, #1
    c214:	bf04      	itt	eq
    c216:	bcf0      	popeq	{r4, r5, r6, r7}
    c218:	4770      	bxeq	lr
    c21a:	f891 c001 	ldrb.w	ip, [r1, #1]
    c21e:	f883 c001 	strb.w	ip, [r3, #1]
    c222:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    c226:	f803 cf02 	strb.w	ip, [r3, #2]!
    c22a:	1e52      	subs	r2, r2, #1
    c22c:	d1f5      	bne.n	c21a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    c22e:	bcf0      	pop	{r4, r5, r6, r7}
    c230:	4770      	bx	lr
    c232:	2a04      	cmp	r2, #4
    c234:	d3d9      	bcc.n	c1ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c236:	f851 cb04 	ldr.w	ip, [r1], #4
    c23a:	1f12      	subs	r2, r2, #4
    c23c:	f843 cb04 	str.w	ip, [r3], #4
    c240:	2a04      	cmp	r2, #4
    c242:	d2f8      	bcs.n	c236 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    c244:	e7d1      	b.n	c1ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c246:	f811 cb01 	ldrb.w	ip, [r1], #1
    c24a:	f803 cb01 	strb.w	ip, [r3], #1
    c24e:	1e52      	subs	r2, r2, #1
    c250:	d1f9      	bne.n	c246 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    c252:	bcf0      	pop	{r4, r5, r6, r7}
    c254:	4770      	bx	lr

0000c256 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    c256:	b470      	push	{r4, r5, r6}
    c258:	4603      	mov	r3, r0
    c25a:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    c25e:	f010 0f03 	tst.w	r0, #3
    c262:	d009      	beq.n	c278 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    c264:	2a00      	cmp	r2, #0
    c266:	bf04      	itt	eq
    c268:	bc70      	popeq	{r4, r5, r6}
    c26a:	4770      	bxeq	lr
    c26c:	f803 cb01 	strb.w	ip, [r3], #1
    c270:	1e52      	subs	r2, r2, #1
    c272:	f013 0f03 	tst.w	r3, #3
    c276:	d1f5      	bne.n	c264 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    c278:	b2c9      	uxtb	r1, r1
    c27a:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    c27e:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    c282:	2a03      	cmp	r2, #3
    c284:	d939      	bls.n	c2fa <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    c286:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c28a:	d236      	bcs.n	c2fa <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    c28c:	4251      	negs	r1, r2
    c28e:	17cc      	asrs	r4, r1, #31
    c290:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    c294:	1089      	asrs	r1, r1, #2
    c296:	424e      	negs	r6, r1
    c298:	2e00      	cmp	r6, #0
    c29a:	dd11      	ble.n	c2c0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c29c:	1f19      	subs	r1, r3, #4
    c29e:	f016 0f01 	tst.w	r6, #1
    c2a2:	bf18      	it	ne
    c2a4:	f841 5f04 	strne.w	r5, [r1, #4]!
    c2a8:	1074      	asrs	r4, r6, #1
    c2aa:	d004      	beq.n	c2b6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    c2ac:	604d      	str	r5, [r1, #4]
    c2ae:	f841 5f08 	str.w	r5, [r1, #8]!
    c2b2:	1e64      	subs	r4, r4, #1
    c2b4:	d1fa      	bne.n	c2ac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    c2b6:	4271      	negs	r1, r6
    c2b8:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    c2bc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    c2c0:	2a00      	cmp	r2, #0
    c2c2:	bf04      	itt	eq
    c2c4:	bc70      	popeq	{r4, r5, r6}
    c2c6:	4770      	bxeq	lr
    c2c8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c2cc:	d21d      	bcs.n	c30a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    c2ce:	2a00      	cmp	r2, #0
    c2d0:	bfdc      	itt	le
    c2d2:	bc70      	pople	{r4, r5, r6}
    c2d4:	4770      	bxle	lr
    c2d6:	1e59      	subs	r1, r3, #1
    c2d8:	f012 0f01 	tst.w	r2, #1
    c2dc:	bf18      	it	ne
    c2de:	f801 cf01 	strbne.w	ip, [r1, #1]!
    c2e2:	1052      	asrs	r2, r2, #1
    c2e4:	bf04      	itt	eq
    c2e6:	bc70      	popeq	{r4, r5, r6}
    c2e8:	4770      	bxeq	lr
    c2ea:	f881 c001 	strb.w	ip, [r1, #1]
    c2ee:	f801 cf02 	strb.w	ip, [r1, #2]!
    c2f2:	1e52      	subs	r2, r2, #1
    c2f4:	d1f9      	bne.n	c2ea <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    c2f6:	bc70      	pop	{r4, r5, r6}
    c2f8:	4770      	bx	lr
    c2fa:	2a04      	cmp	r2, #4
    c2fc:	d3e0      	bcc.n	c2c0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c2fe:	1f12      	subs	r2, r2, #4
    c300:	f843 5b04 	str.w	r5, [r3], #4
    c304:	2a04      	cmp	r2, #4
    c306:	d2fa      	bcs.n	c2fe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    c308:	e7da      	b.n	c2c0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c30a:	f803 cb01 	strb.w	ip, [r3], #1
    c30e:	1e52      	subs	r2, r2, #1
    c310:	d1fb      	bne.n	c30a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    c312:	bc70      	pop	{r4, r5, r6}
    c314:	4770      	bx	lr
    c316:	f04f 30ff 	mov.w	r0, #4294967295
    c31a:	4770      	bx	lr
    c31c:	2000      	movs	r0, #0
    c31e:	4770      	bx	lr
    c320:	2000      	movs	r0, #0
    c322:	4770      	bx	lr
    c324:	f04f 30ff 	mov.w	r0, #4294967295
    c328:	4770      	bx	lr
    c32a:	4770      	bx	lr
    c32c:	4770      	bx	lr
    c32e:	f04f 30ff 	mov.w	r0, #4294967295
    c332:	4770      	bx	lr
    c334:	f04f 30ff 	mov.w	r0, #4294967295
    c338:	4770      	bx	lr
    c33a:	2100      	movs	r1, #0
    c33c:	7001      	strb	r1, [r0, #0]
    c33e:	4770      	bx	lr
    c340:	f04f 30ff 	mov.w	r0, #4294967295
    c344:	4770      	bx	lr
    c346:	f04f 30ff 	mov.w	r0, #4294967295
    c34a:	4770      	bx	lr
    c34c:	2000      	movs	r0, #0
    c34e:	4770      	bx	lr
    c350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c352:	4604      	mov	r4, r0
    c354:	f100 0003 	add.w	r0, r0, #3
    c358:	f020 0003 	bic.w	r0, r0, #3
    c35c:	0015      	movs	r5, r2
    c35e:	9000      	str	r0, [sp, #0]
    c360:	460e      	mov	r6, r1
    c362:	788a      	ldrb	r2, [r1, #2]
    c364:	7849      	ldrb	r1, [r1, #1]
    c366:	d000      	beq.n	c36a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x114>
    c368:	2000      	movs	r0, #0
    c36a:	f7f7 fee7 	bl	413c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    c36e:	9900      	ldr	r1, [sp, #0]
    c370:	4408      	add	r0, r1
    c372:	9000      	str	r0, [sp, #0]
    c374:	78b1      	ldrb	r1, [r6, #2]
    c376:	b131      	cbz	r1, c386 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x130>
    c378:	b105      	cbz	r5, c37c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x126>
    c37a:	2000      	movs	r0, #0
    c37c:	f7f8 f93e 	bl	45fc <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    c380:	9900      	ldr	r1, [sp, #0]
    c382:	4408      	add	r0, r1
    c384:	9000      	str	r0, [sp, #0]
    c386:	462a      	mov	r2, r5
    c388:	4631      	mov	r1, r6
    c38a:	4668      	mov	r0, sp
    c38c:	f000 f807 	bl	c39e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x148>
    c390:	9800      	ldr	r0, [sp, #0]
    c392:	1dc0      	adds	r0, r0, #7
    c394:	f020 0007 	bic.w	r0, r0, #7
    c398:	9000      	str	r0, [sp, #0]
    c39a:	1b00      	subs	r0, r0, r4
    c39c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c39e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c3a2:	4606      	mov	r6, r0
    c3a4:	460c      	mov	r4, r1
    c3a6:	7808      	ldrb	r0, [r1, #0]
    c3a8:	7849      	ldrb	r1, [r1, #1]
    c3aa:	2700      	movs	r7, #0
    c3ac:	4408      	add	r0, r1
    c3ae:	4691      	mov	r9, r2
    c3b0:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    c3b4:	463d      	mov	r5, r7
    c3b6:	e00e      	b.n	c3d6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x180>
    c3b8:	79a3      	ldrb	r3, [r4, #6]
    c3ba:	2b02      	cmp	r3, #2
    c3bc:	d200      	bcs.n	c3c0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x16a>
    c3be:	2302      	movs	r3, #2
    c3c0:	7962      	ldrb	r2, [r4, #5]
    c3c2:	2a03      	cmp	r2, #3
    c3c4:	d200      	bcs.n	c3c8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x172>
    c3c6:	2203      	movs	r2, #3
    c3c8:	7921      	ldrb	r1, [r4, #4]
    c3ca:	78e0      	ldrb	r0, [r4, #3]
    c3cc:	f000 ff01 	bl	d1d2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    c3d0:	1c6d      	adds	r5, r5, #1
    c3d2:	4407      	add	r7, r0
    c3d4:	b2ed      	uxtb	r5, r5
    c3d6:	4545      	cmp	r5, r8
    c3d8:	d3ee      	bcc.n	c3b8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x162>
    c3da:	6830      	ldr	r0, [r6, #0]
    c3dc:	1cc0      	adds	r0, r0, #3
    c3de:	f020 0003 	bic.w	r0, r0, #3
    c3e2:	6030      	str	r0, [r6, #0]
    c3e4:	f1b9 0f00 	cmp.w	r9, #0
    c3e8:	d000      	beq.n	c3ec <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x196>
    c3ea:	2000      	movs	r0, #0
    c3ec:	463a      	mov	r2, r7
    c3ee:	4641      	mov	r1, r8
    c3f0:	f7f8 f87c 	bl	44ec <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    c3f4:	6831      	ldr	r1, [r6, #0]
    c3f6:	4408      	add	r0, r1
    c3f8:	6030      	str	r0, [r6, #0]
    c3fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000c3fe <sdc_soc_ecb_block_encrypt>:
    c3fe:	b530      	push	{r4, r5, lr}
    c400:	460d      	mov	r5, r1
    c402:	b08d      	sub	sp, #52	; 0x34
    c404:	4614      	mov	r4, r2
    c406:	4601      	mov	r1, r0
    c408:	2210      	movs	r2, #16
    c40a:	4668      	mov	r0, sp
    c40c:	f7ff fea9 	bl	c162 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c410:	2210      	movs	r2, #16
    c412:	4629      	mov	r1, r5
    c414:	a804      	add	r0, sp, #16
    c416:	f7ff fea4 	bl	c162 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c41a:	4668      	mov	r0, sp
    c41c:	f7f8 f9b8 	bl	4790 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    c420:	b118      	cbz	r0, c42a <sdc_soc_ecb_block_encrypt+0x2c>
    c422:	f06f 0015 	mvn.w	r0, #21
    c426:	b00d      	add	sp, #52	; 0x34
    c428:	bd30      	pop	{r4, r5, pc}
    c42a:	2210      	movs	r2, #16
    c42c:	4620      	mov	r0, r4
    c42e:	a908      	add	r1, sp, #32
    c430:	f7ff fe97 	bl	c162 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c434:	2000      	movs	r0, #0
    c436:	e7f6      	b.n	c426 <sdc_soc_ecb_block_encrypt+0x28>

0000c438 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>:
    c438:	2000      	movs	r0, #0
    c43a:	4770      	bx	lr

0000c43c <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    c43c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    c43e:	4604      	mov	r4, r0
    c440:	1d01      	adds	r1, r0, #4
    c442:	4668      	mov	r0, sp
    c444:	f7f9 fdb6 	bl	5fb4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    c448:	2800      	cmp	r0, #0
    c44a:	d004      	beq.n	c456 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    c44c:	4669      	mov	r1, sp
    c44e:	4620      	mov	r0, r4
    c450:	f000 f848 	bl	c4e4 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    c454:	2001      	movs	r0, #1
    c456:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000c458 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    c458:	b50e      	push	{r1, r2, r3, lr}
    c45a:	4601      	mov	r1, r0
    c45c:	4668      	mov	r0, sp
    c45e:	f000 f827 	bl	c4b0 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    c462:	4668      	mov	r0, sp
    c464:	f7f9 fdd0 	bl	6008 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    c468:	bd0e      	pop	{r1, r2, r3, pc}

0000c46a <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    c46a:	b510      	push	{r4, lr}
    c46c:	4604      	mov	r4, r0
    c46e:	4620      	mov	r0, r4
    c470:	f7f7 fd6c 	bl	3f4c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    c474:	2800      	cmp	r0, #0
    c476:	d006      	beq.n	c486 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    c478:	78a1      	ldrb	r1, [r4, #2]
    c47a:	7820      	ldrb	r0, [r4, #0]
    c47c:	f000 f804 	bl	c488 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    c480:	2800      	cmp	r0, #0
    c482:	d0f4      	beq.n	c46e <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    c484:	2001      	movs	r0, #1
    c486:	bd10      	pop	{r4, pc}
    c488:	b570      	push	{r4, r5, r6, lr}
    c48a:	460c      	mov	r4, r1
    c48c:	4605      	mov	r5, r0
    c48e:	f7f7 fdd1 	bl	4034 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    c492:	2800      	cmp	r0, #0
    c494:	d002      	beq.n	c49c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    c496:	2d3e      	cmp	r5, #62	; 0x3e
    c498:	d001      	beq.n	c49e <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    c49a:	2001      	movs	r0, #1
    c49c:	bd70      	pop	{r4, r5, r6, pc}
    c49e:	2c12      	cmp	r4, #18
    c4a0:	d004      	beq.n	c4ac <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    c4a2:	4620      	mov	r0, r4
    c4a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c4a8:	f7f7 bde0 	b.w	406c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    c4ac:	2000      	movs	r0, #0
    c4ae:	bd70      	pop	{r4, r5, r6, pc}

0000c4b0 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    c4b0:	880a      	ldrh	r2, [r1, #0]
    c4b2:	f3c2 020b 	ubfx	r2, r2, #0, #12
    c4b6:	8002      	strh	r2, [r0, #0]
    c4b8:	884a      	ldrh	r2, [r1, #2]
    c4ba:	8042      	strh	r2, [r0, #2]
    c4bc:	784a      	ldrb	r2, [r1, #1]
    c4be:	0993      	lsrs	r3, r2, #6
    c4c0:	2200      	movs	r2, #0
    c4c2:	7142      	strb	r2, [r0, #5]
    c4c4:	784b      	ldrb	r3, [r1, #1]
    c4c6:	f3c3 1301 	ubfx	r3, r3, #4, #2
    c4ca:	b11b      	cbz	r3, c4d4 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c4cc:	2b01      	cmp	r3, #1
    c4ce:	d005      	beq.n	c4dc <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    c4d0:	2b02      	cmp	r3, #2
    c4d2:	d005      	beq.n	c4e0 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    c4d4:	7102      	strb	r2, [r0, #4]
    c4d6:	1d09      	adds	r1, r1, #4
    c4d8:	6081      	str	r1, [r0, #8]
    c4da:	4770      	bx	lr
    c4dc:	2201      	movs	r2, #1
    c4de:	e7f9      	b.n	c4d4 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c4e0:	2202      	movs	r2, #2
    c4e2:	e7f7      	b.n	c4d4 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000c4e4 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    c4e4:	b510      	push	{r4, lr}
    c4e6:	460c      	mov	r4, r1
    c4e8:	7809      	ldrb	r1, [r1, #0]
    c4ea:	7001      	strb	r1, [r0, #0]
    c4ec:	7841      	ldrb	r1, [r0, #1]
    c4ee:	f021 010f 	bic.w	r1, r1, #15
    c4f2:	7041      	strb	r1, [r0, #1]
    c4f4:	8822      	ldrh	r2, [r4, #0]
    c4f6:	f3c2 2203 	ubfx	r2, r2, #8, #4
    c4fa:	4311      	orrs	r1, r2
    c4fc:	7041      	strb	r1, [r0, #1]
    c4fe:	78a2      	ldrb	r2, [r4, #2]
    c500:	7082      	strb	r2, [r0, #2]
    c502:	8862      	ldrh	r2, [r4, #2]
    c504:	f021 0130 	bic.w	r1, r1, #48	; 0x30
    c508:	0a12      	lsrs	r2, r2, #8
    c50a:	70c2      	strb	r2, [r0, #3]
    c50c:	7041      	strb	r1, [r0, #1]
    c50e:	7922      	ldrb	r2, [r4, #4]
    c510:	f002 0203 	and.w	r2, r2, #3
    c514:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    c518:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
    c51c:	7041      	strb	r1, [r0, #1]
    c51e:	7962      	ldrb	r2, [r4, #5]
    c520:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    c524:	7041      	strb	r1, [r0, #1]
    c526:	68a1      	ldr	r1, [r4, #8]
    c528:	1d02      	adds	r2, r0, #4
    c52a:	4291      	cmp	r1, r2
    c52c:	d006      	beq.n	c53c <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x58>
    c52e:	8862      	ldrh	r2, [r4, #2]
    c530:	2afb      	cmp	r2, #251	; 0xfb
    c532:	d300      	bcc.n	c536 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x52>
    c534:	22fb      	movs	r2, #251	; 0xfb
    c536:	1d00      	adds	r0, r0, #4
    c538:	f7ff fe13 	bl	c162 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c53c:	78a0      	ldrb	r0, [r4, #2]
    c53e:	1d00      	adds	r0, r0, #4
    c540:	b2c0      	uxtb	r0, r0
    c542:	bd10      	pop	{r4, pc}

0000c544 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    c544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c548:	4604      	mov	r4, r0
    c54a:	780f      	ldrb	r7, [r1, #0]
    c54c:	2000      	movs	r0, #0
    c54e:	250c      	movs	r5, #12
    c550:	2605      	movs	r6, #5
    c552:	223e      	movs	r2, #62	; 0x3e
    c554:	23ff      	movs	r3, #255	; 0xff
    c556:	2f1b      	cmp	r7, #27
    c558:	d27d      	bcs.n	c656 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x112>
    c55a:	e8df f007 	tbb	[pc, r7]
    c55e:	0eeb      	.short	0x0eeb
    c560:	632d2725 	.word	0x632d2725
    c564:	af9b816d 	.word	0xaf9b816d
    c568:	e2c7bcb1 	.word	0xe2c7bcb1
    c56c:	31ebebf5 	.word	0x31ebebf5
    c570:	f2fed5d2 	.word	0xf2fed5d2
    c574:	eeeff0f1 	.word	0xeeeff0f1
    c578:	00ed      	.short	0x00ed
    c57a:	7025      	strb	r5, [r4, #0]
    c57c:	7908      	ldrb	r0, [r1, #4]
    c57e:	70a0      	strb	r0, [r4, #2]
    c580:	7948      	ldrb	r0, [r1, #5]
    c582:	70e0      	strb	r0, [r4, #3]
    c584:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    c588:	0a00      	lsrs	r0, r0, #8
    c58a:	7120      	strb	r0, [r4, #4]
    c58c:	79c8      	ldrb	r0, [r1, #7]
    c58e:	7160      	strb	r0, [r4, #5]
    c590:	7a08      	ldrb	r0, [r1, #8]
    c592:	71a0      	strb	r0, [r4, #6]
    c594:	8908      	ldrh	r0, [r1, #8]
    c596:	0a00      	lsrs	r0, r0, #8
    c598:	71e0      	strb	r0, [r4, #7]
    c59a:	7a88      	ldrb	r0, [r1, #10]
    c59c:	7220      	strb	r0, [r4, #8]
    c59e:	8948      	ldrh	r0, [r1, #10]
    c5a0:	0a00      	lsrs	r0, r0, #8
    c5a2:	7260      	strb	r0, [r4, #9]
    c5a4:	2008      	movs	r0, #8
    c5a6:	e0c2      	b.n	c72e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c5a8:	2010      	movs	r0, #16
    c5aa:	e000      	b.n	c5ae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x6a>
    c5ac:	201a      	movs	r0, #26
    c5ae:	7020      	strb	r0, [r4, #0]
    c5b0:	7908      	ldrb	r0, [r1, #4]
    c5b2:	70a0      	strb	r0, [r4, #2]
    c5b4:	2001      	movs	r0, #1
    c5b6:	e0ba      	b.n	c72e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c5b8:	4620      	mov	r0, r4
    c5ba:	f000 f947 	bl	c84c <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
    c5be:	e0b4      	b.n	c72a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e6>
    c5c0:	7022      	strb	r2, [r4, #0]
    c5c2:	200a      	movs	r0, #10
    c5c4:	70a0      	strb	r0, [r4, #2]
    c5c6:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    c5ca:	70e0      	strb	r0, [r4, #3]
    c5cc:	7888      	ldrb	r0, [r1, #2]
    c5ce:	7120      	strb	r0, [r4, #4]
    c5d0:	8848      	ldrh	r0, [r1, #2]
    c5d2:	0a00      	lsrs	r0, r0, #8
    c5d4:	7160      	strb	r0, [r4, #5]
    c5d6:	7908      	ldrb	r0, [r1, #4]
    c5d8:	71a0      	strb	r0, [r4, #6]
    c5da:	7948      	ldrb	r0, [r1, #5]
    c5dc:	71e0      	strb	r0, [r4, #7]
    c5de:	f8d1 0006 	ldr.w	r0, [r1, #6]
    c5e2:	60a0      	str	r0, [r4, #8]
    c5e4:	8948      	ldrh	r0, [r1, #10]
    c5e6:	81a0      	strh	r0, [r4, #12]
    c5e8:	68c8      	ldr	r0, [r1, #12]
    c5ea:	f8c4 000e 	str.w	r0, [r4, #14]
    c5ee:	8a08      	ldrh	r0, [r1, #16]
    c5f0:	8260      	strh	r0, [r4, #18]
    c5f2:	f8d1 0012 	ldr.w	r0, [r1, #18]
    c5f6:	6160      	str	r0, [r4, #20]
    c5f8:	8ac8      	ldrh	r0, [r1, #22]
    c5fa:	8320      	strh	r0, [r4, #24]
    c5fc:	7e08      	ldrb	r0, [r1, #24]
    c5fe:	76a0      	strb	r0, [r4, #26]
    c600:	8b08      	ldrh	r0, [r1, #24]
    c602:	0a00      	lsrs	r0, r0, #8
    c604:	76e0      	strb	r0, [r4, #27]
    c606:	7e88      	ldrb	r0, [r1, #26]
    c608:	7720      	strb	r0, [r4, #28]
    c60a:	8b48      	ldrh	r0, [r1, #26]
    c60c:	0a00      	lsrs	r0, r0, #8
    c60e:	7760      	strb	r0, [r4, #29]
    c610:	7f08      	ldrb	r0, [r1, #28]
    c612:	77a0      	strb	r0, [r4, #30]
    c614:	8b88      	ldrh	r0, [r1, #28]
    c616:	0a00      	lsrs	r0, r0, #8
    c618:	77e0      	strb	r0, [r4, #31]
    c61a:	7f88      	ldrb	r0, [r1, #30]
    c61c:	f884 0020 	strb.w	r0, [r4, #32]
    c620:	201f      	movs	r0, #31
    c622:	e084      	b.n	c72e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c624:	7022      	strb	r2, [r4, #0]
    c626:	2014      	movs	r0, #20
    c628:	70a0      	strb	r0, [r4, #2]
    c62a:	7908      	ldrb	r0, [r1, #4]
    c62c:	70e0      	strb	r0, [r4, #3]
    c62e:	8888      	ldrh	r0, [r1, #4]
    c630:	0a00      	lsrs	r0, r0, #8
    c632:	7120      	strb	r0, [r4, #4]
    c634:	7988      	ldrb	r0, [r1, #6]
    c636:	e0a8      	b.n	c78a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x246>
    c638:	7022      	strb	r2, [r4, #0]
    c63a:	2004      	movs	r0, #4
    c63c:	70a0      	strb	r0, [r4, #2]
    c63e:	7908      	ldrb	r0, [r1, #4]
    c640:	70e0      	strb	r0, [r4, #3]
    c642:	7988      	ldrb	r0, [r1, #6]
    c644:	7120      	strb	r0, [r4, #4]
    c646:	88c8      	ldrh	r0, [r1, #6]
    c648:	0a00      	lsrs	r0, r0, #8
    c64a:	7160      	strb	r0, [r4, #5]
    c64c:	6888      	ldr	r0, [r1, #8]
    c64e:	f8c4 0006 	str.w	r0, [r4, #6]
    c652:	68c8      	ldr	r0, [r1, #12]
    c654:	e000      	b.n	c658 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    c656:	e06d      	b.n	c734 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    c658:	f8c4 000a 	str.w	r0, [r4, #10]
    c65c:	200c      	movs	r0, #12
    c65e:	e066      	b.n	c72e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c660:	7022      	strb	r2, [r4, #0]
    c662:	2003      	movs	r0, #3
    c664:	70a0      	strb	r0, [r4, #2]
    c666:	7908      	ldrb	r0, [r1, #4]
    c668:	70e0      	strb	r0, [r4, #3]
    c66a:	7988      	ldrb	r0, [r1, #6]
    c66c:	7120      	strb	r0, [r4, #4]
    c66e:	88c8      	ldrh	r0, [r1, #6]
    c670:	0a00      	lsrs	r0, r0, #8
    c672:	7160      	strb	r0, [r4, #5]
    c674:	7a08      	ldrb	r0, [r1, #8]
    c676:	71a0      	strb	r0, [r4, #6]
    c678:	8908      	ldrh	r0, [r1, #8]
    c67a:	0a00      	lsrs	r0, r0, #8
    c67c:	71e0      	strb	r0, [r4, #7]
    c67e:	7a88      	ldrb	r0, [r1, #10]
    c680:	7220      	strb	r0, [r4, #8]
    c682:	8948      	ldrh	r0, [r1, #10]
    c684:	0a00      	lsrs	r0, r0, #8
    c686:	7260      	strb	r0, [r4, #9]
    c688:	7b08      	ldrb	r0, [r1, #12]
    c68a:	72a0      	strb	r0, [r4, #10]
    c68c:	8988      	ldrh	r0, [r1, #12]
    c68e:	0a00      	lsrs	r0, r0, #8
    c690:	72e0      	strb	r0, [r4, #11]
    c692:	e0d9      	b.n	c848 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x304>
    c694:	7022      	strb	r2, [r4, #0]
    c696:	70a6      	strb	r6, [r4, #2]
    c698:	7908      	ldrb	r0, [r1, #4]
    c69a:	70e0      	strb	r0, [r4, #3]
    c69c:	8888      	ldrh	r0, [r1, #4]
    c69e:	0a00      	lsrs	r0, r0, #8
    c6a0:	7120      	strb	r0, [r4, #4]
    c6a2:	f8d1 0006 	ldr.w	r0, [r1, #6]
    c6a6:	f8c4 0005 	str.w	r0, [r4, #5]
    c6aa:	f8d1 000a 	ldr.w	r0, [r1, #10]
    c6ae:	f8c4 0009 	str.w	r0, [r4, #9]
    c6b2:	89c8      	ldrh	r0, [r1, #14]
    c6b4:	f8a4 000d 	strh.w	r0, [r4, #13]
    c6b8:	200d      	movs	r0, #13
    c6ba:	e038      	b.n	c72e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c6bc:	2011      	movs	r0, #17
    c6be:	e044      	b.n	c74a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x206>
    c6c0:	7026      	strb	r6, [r4, #0]
    c6c2:	7908      	ldrb	r0, [r1, #4]
    c6c4:	70a0      	strb	r0, [r4, #2]
    c6c6:	7948      	ldrb	r0, [r1, #5]
    c6c8:	70e0      	strb	r0, [r4, #3]
    c6ca:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    c6ce:	0a00      	lsrs	r0, r0, #8
    c6d0:	7120      	strb	r0, [r4, #4]
    c6d2:	79c8      	ldrb	r0, [r1, #7]
    c6d4:	e059      	b.n	c78a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x246>
    c6d6:	2008      	movs	r0, #8
    c6d8:	7020      	strb	r0, [r4, #0]
    c6da:	7908      	ldrb	r0, [r1, #4]
    c6dc:	70a0      	strb	r0, [r4, #2]
    c6de:	7988      	ldrb	r0, [r1, #6]
    c6e0:	70e0      	strb	r0, [r4, #3]
    c6e2:	88c8      	ldrh	r0, [r1, #6]
    c6e4:	0a00      	lsrs	r0, r0, #8
    c6e6:	7120      	strb	r0, [r4, #4]
    c6e8:	7a08      	ldrb	r0, [r1, #8]
    c6ea:	e04e      	b.n	c78a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x246>
    c6ec:	2030      	movs	r0, #48	; 0x30
    c6ee:	7020      	strb	r0, [r4, #0]
    c6f0:	7908      	ldrb	r0, [r1, #4]
    c6f2:	70a0      	strb	r0, [r4, #2]
    c6f4:	7988      	ldrb	r0, [r1, #6]
    c6f6:	70e0      	strb	r0, [r4, #3]
    c6f8:	88c8      	ldrh	r0, [r1, #6]
    c6fa:	0a00      	lsrs	r0, r0, #8
    c6fc:	7120      	strb	r0, [r4, #4]
    c6fe:	2003      	movs	r0, #3
    c700:	e015      	b.n	c72e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c702:	7022      	strb	r2, [r4, #0]
    c704:	2007      	movs	r0, #7
    c706:	e045      	b.n	c794 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x250>
    c708:	7022      	strb	r2, [r4, #0]
    c70a:	70a5      	strb	r5, [r4, #2]
    c70c:	7908      	ldrb	r0, [r1, #4]
    c70e:	70e0      	strb	r0, [r4, #3]
    c710:	7988      	ldrb	r0, [r1, #6]
    c712:	7120      	strb	r0, [r4, #4]
    c714:	88c8      	ldrh	r0, [r1, #6]
    c716:	0a00      	lsrs	r0, r0, #8
    c718:	7160      	strb	r0, [r4, #5]
    c71a:	7a08      	ldrb	r0, [r1, #8]
    c71c:	71a0      	strb	r0, [r4, #6]
    c71e:	7a48      	ldrb	r0, [r1, #9]
    c720:	e028      	b.n	c774 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x230>
    c722:	4620      	mov	r0, r4
    c724:	1d09      	adds	r1, r1, #4
    c726:	f7f7 fc57 	bl	3fd8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xdc>
    c72a:	2800      	cmp	r0, #0
    c72c:	d002      	beq.n	c734 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    c72e:	7060      	strb	r0, [r4, #1]
    c730:	1c80      	adds	r0, r0, #2
    c732:	b2c0      	uxtb	r0, r0
    c734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c738:	e073      	b.n	c822 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2de>
    c73a:	e047      	b.n	c7cc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x288>
    c73c:	e028      	b.n	c790 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24c>
    c73e:	e053      	b.n	c7e8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a4>
    c740:	e061      	b.n	c806 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c2>
    c742:	e01a      	b.n	c77a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x236>
    c744:	e009      	b.n	c75a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x216>
    c746:	e7ff      	b.n	c748 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x204>
    c748:	2057      	movs	r0, #87	; 0x57
    c74a:	7020      	strb	r0, [r4, #0]
    c74c:	7908      	ldrb	r0, [r1, #4]
    c74e:	70a0      	strb	r0, [r4, #2]
    c750:	8888      	ldrh	r0, [r1, #4]
    c752:	0a00      	lsrs	r0, r0, #8
    c754:	70e0      	strb	r0, [r4, #3]
    c756:	2002      	movs	r0, #2
    c758:	e7e9      	b.n	c72e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c75a:	7022      	strb	r2, [r4, #0]
    c75c:	2012      	movs	r0, #18
    c75e:	70a0      	strb	r0, [r4, #2]
    c760:	7908      	ldrb	r0, [r1, #4]
    c762:	70e0      	strb	r0, [r4, #3]
    c764:	7948      	ldrb	r0, [r1, #5]
    c766:	7120      	strb	r0, [r4, #4]
    c768:	7988      	ldrb	r0, [r1, #6]
    c76a:	7160      	strb	r0, [r4, #5]
    c76c:	88c8      	ldrh	r0, [r1, #6]
    c76e:	0a00      	lsrs	r0, r0, #8
    c770:	71a0      	strb	r0, [r4, #6]
    c772:	7a08      	ldrb	r0, [r1, #8]
    c774:	71e0      	strb	r0, [r4, #7]
    c776:	2006      	movs	r0, #6
    c778:	e7d9      	b.n	c72e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c77a:	7023      	strb	r3, [r4, #0]
    c77c:	20a1      	movs	r0, #161	; 0xa1
    c77e:	70a0      	strb	r0, [r4, #2]
    c780:	7908      	ldrb	r0, [r1, #4]
    c782:	70e0      	strb	r0, [r4, #3]
    c784:	7948      	ldrb	r0, [r1, #5]
    c786:	7120      	strb	r0, [r4, #4]
    c788:	2000      	movs	r0, #0
    c78a:	7160      	strb	r0, [r4, #5]
    c78c:	2004      	movs	r0, #4
    c78e:	e7ce      	b.n	c72e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c790:	7023      	strb	r3, [r4, #0]
    c792:	20a2      	movs	r0, #162	; 0xa2
    c794:	70a0      	strb	r0, [r4, #2]
    c796:	7908      	ldrb	r0, [r1, #4]
    c798:	70e0      	strb	r0, [r4, #3]
    c79a:	8888      	ldrh	r0, [r1, #4]
    c79c:	0a00      	lsrs	r0, r0, #8
    c79e:	7120      	strb	r0, [r4, #4]
    c7a0:	7988      	ldrb	r0, [r1, #6]
    c7a2:	7160      	strb	r0, [r4, #5]
    c7a4:	88c8      	ldrh	r0, [r1, #6]
    c7a6:	0a00      	lsrs	r0, r0, #8
    c7a8:	71a0      	strb	r0, [r4, #6]
    c7aa:	7a08      	ldrb	r0, [r1, #8]
    c7ac:	71e0      	strb	r0, [r4, #7]
    c7ae:	8908      	ldrh	r0, [r1, #8]
    c7b0:	0a00      	lsrs	r0, r0, #8
    c7b2:	7220      	strb	r0, [r4, #8]
    c7b4:	7a88      	ldrb	r0, [r1, #10]
    c7b6:	7260      	strb	r0, [r4, #9]
    c7b8:	8948      	ldrh	r0, [r1, #10]
    c7ba:	0a00      	lsrs	r0, r0, #8
    c7bc:	72a0      	strb	r0, [r4, #10]
    c7be:	7b08      	ldrb	r0, [r1, #12]
    c7c0:	72e0      	strb	r0, [r4, #11]
    c7c2:	8988      	ldrh	r0, [r1, #12]
    c7c4:	0a00      	lsrs	r0, r0, #8
    c7c6:	7320      	strb	r0, [r4, #12]
    c7c8:	200b      	movs	r0, #11
    c7ca:	e7b0      	b.n	c72e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c7cc:	7023      	strb	r3, [r4, #0]
    c7ce:	20a3      	movs	r0, #163	; 0xa3
    c7d0:	70a0      	strb	r0, [r4, #2]
    c7d2:	7908      	ldrb	r0, [r1, #4]
    c7d4:	70e0      	strb	r0, [r4, #3]
    c7d6:	8888      	ldrh	r0, [r1, #4]
    c7d8:	0a00      	lsrs	r0, r0, #8
    c7da:	7120      	strb	r0, [r4, #4]
    c7dc:	7988      	ldrb	r0, [r1, #6]
    c7de:	7160      	strb	r0, [r4, #5]
    c7e0:	79c8      	ldrb	r0, [r1, #7]
    c7e2:	71a0      	strb	r0, [r4, #6]
    c7e4:	2005      	movs	r0, #5
    c7e6:	e7a2      	b.n	c72e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c7e8:	7022      	strb	r2, [r4, #0]
    c7ea:	2013      	movs	r0, #19
    c7ec:	70a0      	strb	r0, [r4, #2]
    c7ee:	7908      	ldrb	r0, [r1, #4]
    c7f0:	70e0      	strb	r0, [r4, #3]
    c7f2:	7948      	ldrb	r0, [r1, #5]
    c7f4:	7120      	strb	r0, [r4, #4]
    c7f6:	f8d1 0006 	ldr.w	r0, [r1, #6]
    c7fa:	f8c4 0005 	str.w	r0, [r4, #5]
    c7fe:	8948      	ldrh	r0, [r1, #10]
    c800:	f8a4 0009 	strh.w	r0, [r4, #9]
    c804:	e020      	b.n	c848 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x304>
    c806:	7023      	strb	r3, [r4, #0]
    c808:	20a4      	movs	r0, #164	; 0xa4
    c80a:	70a0      	strb	r0, [r4, #2]
    c80c:	7908      	ldrb	r0, [r1, #4]
    c80e:	70e0      	strb	r0, [r4, #3]
    c810:	8888      	ldrh	r0, [r1, #4]
    c812:	0a00      	lsrs	r0, r0, #8
    c814:	7120      	strb	r0, [r4, #4]
    c816:	7988      	ldrb	r0, [r1, #6]
    c818:	7160      	strb	r0, [r4, #5]
    c81a:	79c8      	ldrb	r0, [r1, #7]
    c81c:	71a0      	strb	r0, [r4, #6]
    c81e:	2007      	movs	r0, #7
    c820:	e785      	b.n	c72e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c822:	7023      	strb	r3, [r4, #0]
    c824:	2080      	movs	r0, #128	; 0x80
    c826:	70a0      	strb	r0, [r4, #2]
    c828:	888a      	ldrh	r2, [r1, #4]
    c82a:	f8a4 2003 	strh.w	r2, [r4, #3]
    c82e:	88ca      	ldrh	r2, [r1, #6]
    c830:	f8a4 2005 	strh.w	r2, [r4, #5]
    c834:	7a0a      	ldrb	r2, [r1, #8]
    c836:	71e2      	strb	r2, [r4, #7]
    c838:	7a4a      	ldrb	r2, [r1, #9]
    c83a:	8122      	strh	r2, [r4, #8]
    c83c:	7a8a      	ldrb	r2, [r1, #10]
    c83e:	72a2      	strb	r2, [r4, #10]
    c840:	7ac9      	ldrb	r1, [r1, #11]
    c842:	f001 0101 	and.w	r1, r1, #1
    c846:	72e1      	strb	r1, [r4, #11]
    c848:	200a      	movs	r0, #10
    c84a:	e770      	b.n	c72e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>

0000c84c <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
    c84c:	223e      	movs	r2, #62	; 0x3e
    c84e:	7002      	strb	r2, [r0, #0]
    c850:	2201      	movs	r2, #1
    c852:	7082      	strb	r2, [r0, #2]
    c854:	790a      	ldrb	r2, [r1, #4]
    c856:	70c2      	strb	r2, [r0, #3]
    c858:	798a      	ldrb	r2, [r1, #6]
    c85a:	7102      	strb	r2, [r0, #4]
    c85c:	88ca      	ldrh	r2, [r1, #6]
    c85e:	0a12      	lsrs	r2, r2, #8
    c860:	7142      	strb	r2, [r0, #5]
    c862:	7a0a      	ldrb	r2, [r1, #8]
    c864:	7182      	strb	r2, [r0, #6]
    c866:	7a4a      	ldrb	r2, [r1, #9]
    c868:	71c2      	strb	r2, [r0, #7]
    c86a:	f8d1 200a 	ldr.w	r2, [r1, #10]
    c86e:	6082      	str	r2, [r0, #8]
    c870:	89ca      	ldrh	r2, [r1, #14]
    c872:	8182      	strh	r2, [r0, #12]
    c874:	7c0a      	ldrb	r2, [r1, #16]
    c876:	7382      	strb	r2, [r0, #14]
    c878:	8a0a      	ldrh	r2, [r1, #16]
    c87a:	0a12      	lsrs	r2, r2, #8
    c87c:	73c2      	strb	r2, [r0, #15]
    c87e:	7c8a      	ldrb	r2, [r1, #18]
    c880:	7402      	strb	r2, [r0, #16]
    c882:	8a4a      	ldrh	r2, [r1, #18]
    c884:	0a12      	lsrs	r2, r2, #8
    c886:	7442      	strb	r2, [r0, #17]
    c888:	7d0a      	ldrb	r2, [r1, #20]
    c88a:	7482      	strb	r2, [r0, #18]
    c88c:	8a8a      	ldrh	r2, [r1, #20]
    c88e:	0a12      	lsrs	r2, r2, #8
    c890:	74c2      	strb	r2, [r0, #19]
    c892:	7d89      	ldrb	r1, [r1, #22]
    c894:	7501      	strb	r1, [r0, #20]
    c896:	2013      	movs	r0, #19
    c898:	4770      	bx	lr

0000c89a <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    c89a:	223e      	movs	r2, #62	; 0x3e
    c89c:	7002      	strb	r2, [r0, #0]
    c89e:	2201      	movs	r2, #1
    c8a0:	7082      	strb	r2, [r0, #2]
    c8a2:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    c8a6:	70c2      	strb	r2, [r0, #3]
    c8a8:	788a      	ldrb	r2, [r1, #2]
    c8aa:	7102      	strb	r2, [r0, #4]
    c8ac:	884a      	ldrh	r2, [r1, #2]
    c8ae:	0a12      	lsrs	r2, r2, #8
    c8b0:	7142      	strb	r2, [r0, #5]
    c8b2:	790a      	ldrb	r2, [r1, #4]
    c8b4:	7182      	strb	r2, [r0, #6]
    c8b6:	794a      	ldrb	r2, [r1, #5]
    c8b8:	71c2      	strb	r2, [r0, #7]
    c8ba:	f8d1 2006 	ldr.w	r2, [r1, #6]
    c8be:	6082      	str	r2, [r0, #8]
    c8c0:	894a      	ldrh	r2, [r1, #10]
    c8c2:	8182      	strh	r2, [r0, #12]
    c8c4:	7e0a      	ldrb	r2, [r1, #24]
    c8c6:	7382      	strb	r2, [r0, #14]
    c8c8:	8b0a      	ldrh	r2, [r1, #24]
    c8ca:	0a12      	lsrs	r2, r2, #8
    c8cc:	73c2      	strb	r2, [r0, #15]
    c8ce:	7e8a      	ldrb	r2, [r1, #26]
    c8d0:	7402      	strb	r2, [r0, #16]
    c8d2:	8b4a      	ldrh	r2, [r1, #26]
    c8d4:	0a12      	lsrs	r2, r2, #8
    c8d6:	7442      	strb	r2, [r0, #17]
    c8d8:	7f0a      	ldrb	r2, [r1, #28]
    c8da:	7482      	strb	r2, [r0, #18]
    c8dc:	8b8a      	ldrh	r2, [r1, #28]
    c8de:	0a12      	lsrs	r2, r2, #8
    c8e0:	74c2      	strb	r2, [r0, #19]
    c8e2:	7f89      	ldrb	r1, [r1, #30]
    c8e4:	7501      	strb	r1, [r0, #20]
    c8e6:	2113      	movs	r1, #19
    c8e8:	7041      	strb	r1, [r0, #1]
    c8ea:	4608      	mov	r0, r1
    c8ec:	4770      	bx	lr

0000c8ee <sdc_hci_data_get>:
    c8ee:	b510      	push	{r4, lr}
    c8f0:	b120      	cbz	r0, c8fc <sdc_hci_data_get+0xe>
    c8f2:	f7ff fda3 	bl	c43c <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    c8f6:	b120      	cbz	r0, c902 <sdc_hci_data_get+0x14>
    c8f8:	2000      	movs	r0, #0
    c8fa:	bd10      	pop	{r4, pc}
    c8fc:	f06f 0015 	mvn.w	r0, #21
    c900:	bd10      	pop	{r4, pc}
    c902:	f06f 0022 	mvn.w	r0, #34	; 0x22
    c906:	bd10      	pop	{r4, pc}

0000c908 <sdc_hci_data_put>:
    c908:	b510      	push	{r4, lr}
    c90a:	f06f 0415 	mvn.w	r4, #21
    c90e:	b120      	cbz	r0, c91a <sdc_hci_data_put+0x12>
    c910:	f7ff fda2 	bl	c458 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    c914:	b108      	cbz	r0, c91a <sdc_hci_data_put+0x12>
    c916:	2000      	movs	r0, #0
    c918:	bd10      	pop	{r4, pc}
    c91a:	4620      	mov	r0, r4
    c91c:	bd10      	pop	{r4, pc}

0000c91e <sdc_hci_evt_get>:
    c91e:	b510      	push	{r4, lr}
    c920:	b120      	cbz	r0, c92c <sdc_hci_evt_get+0xe>
    c922:	f7ff fda2 	bl	c46a <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    c926:	b120      	cbz	r0, c932 <sdc_hci_evt_get+0x14>
    c928:	2000      	movs	r0, #0
    c92a:	bd10      	pop	{r4, pc}
    c92c:	f06f 0015 	mvn.w	r0, #21
    c930:	bd10      	pop	{r4, pc}
    c932:	f06f 0022 	mvn.w	r0, #34	; 0x22
    c936:	bd10      	pop	{r4, pc}

0000c938 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    c938:	f002 baed 	b.w	ef16 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000c93c <sdc_hci_cmd_cb_read_transmit_power_level>:
    c93c:	f002 bb2f 	b.w	ef9e <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000c940 <sdc_hci_cmd_cb_set_event_mask>:
    c940:	b510      	push	{r4, lr}
    c942:	f7f7 fba7 	bl	4094 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    c946:	2000      	movs	r0, #0
    c948:	bd10      	pop	{r4, pc}

0000c94a <sdc_hci_cmd_cb_set_event_mask_page_2>:
    c94a:	b510      	push	{r4, lr}
    c94c:	f7f7 fbb0 	bl	40b0 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    c950:	2000      	movs	r0, #0
    c952:	bd10      	pop	{r4, pc}

0000c954 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    c954:	f002 bb3f 	b.w	efd6 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000c958 <sdc_hci_cmd_vs_conn_event_extend>:
    c958:	b508      	push	{r3, lr}
    c95a:	7800      	ldrb	r0, [r0, #0]
    c95c:	f88d 0000 	strb.w	r0, [sp]
    c960:	4668      	mov	r0, sp
    c962:	f002 fa6e 	bl	ee42 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    c966:	bd08      	pop	{r3, pc}

0000c968 <sdc_hci_cmd_vs_conn_update>:
    c968:	2001      	movs	r0, #1
    c96a:	4770      	bx	lr

0000c96c <sdc_hci_cmd_vs_event_length_set>:
    c96c:	f7fd bbea 	b.w	a144 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000c970 <sdc_hci_cmd_vs_llpm_mode_set>:
    c970:	2001      	movs	r0, #1
    c972:	4770      	bx	lr

0000c974 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    c974:	7800      	ldrb	r0, [r0, #0]
    c976:	b100      	cbz	r0, c97a <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    c978:	2001      	movs	r0, #1
    c97a:	f002 ba2e 	b.w	edda <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000c97e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    c97e:	b570      	push	{r4, r5, r6, lr}
    c980:	4605      	mov	r5, r0
    c982:	2210      	movs	r2, #16
    c984:	2100      	movs	r1, #0
    c986:	f7ff fc66 	bl	c256 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c98a:	2210      	movs	r2, #16
    c98c:	2100      	movs	r1, #0
    c98e:	f105 0010 	add.w	r0, r5, #16
    c992:	f7ff fc60 	bl	c256 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c996:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    c99a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    c99e:	1c40      	adds	r0, r0, #1
    c9a0:	d10b      	bne.n	c9ba <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    c9a2:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    c9a6:	1c40      	adds	r0, r0, #1
    c9a8:	d107      	bne.n	c9ba <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    c9aa:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    c9ae:	1c40      	adds	r0, r0, #1
    c9b0:	d103      	bne.n	c9ba <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    c9b2:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    c9b6:	1c40      	adds	r0, r0, #1
    c9b8:	d00b      	beq.n	c9d2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    c9ba:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    c9be:	6128      	str	r0, [r5, #16]
    c9c0:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    c9c4:	6168      	str	r0, [r5, #20]
    c9c6:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    c9ca:	61a8      	str	r0, [r5, #24]
    c9cc:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    c9d0:	61e8      	str	r0, [r5, #28]
    c9d2:	2000      	movs	r0, #0
    c9d4:	f7f8 f85c 	bl	4a90 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    c9d8:	b918      	cbnz	r0, c9e2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    c9da:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    c9de:	07c0      	lsls	r0, r0, #31
    c9e0:	d118      	bne.n	ca14 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    c9e2:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    c9e6:	1c40      	adds	r0, r0, #1
    c9e8:	d10b      	bne.n	ca02 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    c9ea:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    c9ee:	1c40      	adds	r0, r0, #1
    c9f0:	d107      	bne.n	ca02 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    c9f2:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    c9f6:	1c40      	adds	r0, r0, #1
    c9f8:	d103      	bne.n	ca02 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    c9fa:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    c9fe:	1c40      	adds	r0, r0, #1
    ca00:	d008      	beq.n	ca14 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    ca02:	f854 0f90 	ldr.w	r0, [r4, #144]!
    ca06:	6028      	str	r0, [r5, #0]
    ca08:	6860      	ldr	r0, [r4, #4]
    ca0a:	6068      	str	r0, [r5, #4]
    ca0c:	68a0      	ldr	r0, [r4, #8]
    ca0e:	60a8      	str	r0, [r5, #8]
    ca10:	68e0      	ldr	r0, [r4, #12]
    ca12:	60e8      	str	r0, [r5, #12]
    ca14:	2000      	movs	r0, #0
    ca16:	bd70      	pop	{r4, r5, r6, pc}

0000ca18 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    ca18:	b570      	push	{r4, r5, r6, lr}
    ca1a:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    ca1e:	4604      	mov	r4, r0
    ca20:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    ca24:	1c40      	adds	r0, r0, #1
    ca26:	d105      	bne.n	ca34 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    ca28:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    ca2c:	43c0      	mvns	r0, r0
    ca2e:	0400      	lsls	r0, r0, #16
    ca30:	0c00      	lsrs	r0, r0, #16
    ca32:	d03a      	beq.n	caaa <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x92>
    ca34:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    ca38:	07c0      	lsls	r0, r0, #31
    ca3a:	d036      	beq.n	caaa <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x92>
    ca3c:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    ca40:	f8c4 0001 	str.w	r0, [r4, #1]
    ca44:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    ca48:	f8a4 0005 	strh.w	r0, [r4, #5]
    ca4c:	79a0      	ldrb	r0, [r4, #6]
    ca4e:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    ca52:	71a0      	strb	r0, [r4, #6]
    ca54:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    ca58:	1c40      	adds	r0, r0, #1
    ca5a:	d00f      	beq.n	ca7c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    ca5c:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    ca60:	1c40      	adds	r0, r0, #1
    ca62:	d00b      	beq.n	ca7c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    ca64:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    ca68:	1c40      	adds	r0, r0, #1
    ca6a:	d007      	beq.n	ca7c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    ca6c:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    ca70:	1c40      	adds	r0, r0, #1
    ca72:	d003      	beq.n	ca7c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    ca74:	2000      	movs	r0, #0
    ca76:	f7f8 f80b 	bl	4a90 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    ca7a:	b140      	cbz	r0, ca8e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    ca7c:	2210      	movs	r2, #16
    ca7e:	2100      	movs	r1, #0
    ca80:	1de0      	adds	r0, r4, #7
    ca82:	f7ff fbe8 	bl	c256 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ca86:	2001      	movs	r0, #1
    ca88:	7020      	strb	r0, [r4, #0]
    ca8a:	2000      	movs	r0, #0
    ca8c:	bd70      	pop	{r4, r5, r6, pc}
    ca8e:	f855 0f90 	ldr.w	r0, [r5, #144]!
    ca92:	f8c4 0007 	str.w	r0, [r4, #7]
    ca96:	6868      	ldr	r0, [r5, #4]
    ca98:	f8c4 000b 	str.w	r0, [r4, #11]
    ca9c:	68a8      	ldr	r0, [r5, #8]
    ca9e:	f8c4 000f 	str.w	r0, [r4, #15]
    caa2:	68e8      	ldr	r0, [r5, #12]
    caa4:	f8c4 0013 	str.w	r0, [r4, #19]
    caa8:	e7ed      	b.n	ca86 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6e>
    caaa:	2000      	movs	r0, #0
    caac:	e7ec      	b.n	ca88 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x70>

0000caae <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    caae:	f002 b9ae 	b.w	ee0e <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000cab2 <sdc_hci_cmd_ip_read_bd_addr>:
    cab2:	f002 ba41 	b.w	ef38 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000cab6 <sdc_hci_cmd_ip_read_local_version_information>:
    cab6:	f7fd bb53 	b.w	a160 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000caba <sdc_hci_cmd_le_add_device_to_resolving_list>:
    caba:	f001 be99 	b.w	e7f0 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000cabe <sdc_hci_cmd_le_add_device_to_white_list>:
    cabe:	f001 beb2 	b.w	e826 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000cac2 <sdc_hci_cmd_le_clear_resolving_list>:
    cac2:	f001 bec7 	b.w	e854 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000cac6 <sdc_hci_cmd_le_clear_white_list>:
    cac6:	f001 bed2 	b.w	e86e <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000caca <sdc_hci_cmd_le_encrypt>:
    caca:	f001 beda 	b.w	e882 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000cace <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    cace:	8802      	ldrh	r2, [r0, #0]
    cad0:	800a      	strh	r2, [r1, #0]
    cad2:	f001 bedf 	b.w	e894 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000cad6 <sdc_hci_cmd_le_long_term_key_request_reply>:
    cad6:	8802      	ldrh	r2, [r0, #0]
    cad8:	800a      	strh	r2, [r1, #0]
    cada:	f001 bef4 	b.w	e8c6 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000cade <sdc_hci_cmd_le_rand>:
    cade:	f001 bf1c 	b.w	e91a <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000cae2 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    cae2:	f001 bf20 	b.w	e926 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000cae6 <sdc_hci_cmd_le_read_buffer_size>:
    cae6:	f7fd ba35 	b.w	9f54 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000caea <sdc_hci_cmd_le_read_channel_map>:
    caea:	f001 bf2d 	b.w	e948 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000caee <sdc_hci_cmd_le_read_max_data_length>:
    caee:	f001 bf4c 	b.w	e98a <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000caf2 <sdc_hci_cmd_le_read_phy>:
    caf2:	f7fd ba39 	b.w	9f68 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000caf6 <sdc_hci_cmd_le_read_remote_features>:
    caf6:	f7fd ba5f 	b.w	9fb8 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000cafa <sdc_hci_cmd_le_read_resolving_list_size>:
    cafa:	f001 bf56 	b.w	e9aa <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000cafe <sdc_hci_cmd_le_read_suggested_default_data_length>:
    cafe:	f7fd ba7b 	b.w	9ff8 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000cb02 <sdc_hci_cmd_le_read_transmit_power>:
    cb02:	f001 bf56 	b.w	e9b2 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000cb06 <sdc_hci_cmd_le_read_white_list_size>:
    cb06:	f001 bf5d 	b.w	e9c4 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000cb0a <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    cb0a:	f001 bf5f 	b.w	e9cc <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000cb0e <sdc_hci_cmd_le_remove_device_from_white_list>:
    cb0e:	f001 bf76 	b.w	e9fe <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000cb12 <sdc_hci_cmd_le_set_address_resolution_enable>:
    cb12:	f001 bf89 	b.w	ea28 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000cb16 <sdc_hci_cmd_le_set_adv_data>:
    cb16:	f001 bf95 	b.w	ea44 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000cb1a <sdc_hci_cmd_le_set_adv_enable>:
    cb1a:	f001 bfc9 	b.w	eab0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000cb1e <sdc_hci_cmd_le_set_adv_params>:
    cb1e:	f002 b801 	b.w	eb24 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000cb22 <sdc_hci_cmd_le_set_data_length>:
    cb22:	f002 b897 	b.w	ec54 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000cb26 <sdc_hci_cmd_le_set_default_phy>:
    cb26:	f7fd ba77 	b.w	a018 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000cb2a <sdc_hci_cmd_le_set_event_mask>:
    cb2a:	b510      	push	{r4, lr}
    cb2c:	f7f7 faac 	bl	4088 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    cb30:	2000      	movs	r0, #0
    cb32:	bd10      	pop	{r4, pc}

0000cb34 <sdc_hci_cmd_le_set_phy>:
    cb34:	f002 b8b5 	b.w	eca2 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000cb38 <sdc_hci_cmd_le_set_privacy_mode>:
    cb38:	f002 b8d3 	b.w	ece2 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000cb3c <sdc_hci_cmd_le_set_random_address>:
    cb3c:	f002 b8e7 	b.w	ed0e <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000cb40 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    cb40:	f002 b8f3 	b.w	ed2a <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000cb44 <sdc_hci_cmd_le_set_scan_response_data>:
    cb44:	f002 b8fa 	b.w	ed3c <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000cb48 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    cb48:	f002 b930 	b.w	edac <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000cb4c <sdc_hci_cmd_lc_disconnect>:
    cb4c:	f001 be00 	b.w	e750 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000cb50 <sdc_hci_cmd_lc_read_remote_version_information>:
    cb50:	f002 b9fe 	b.w	ef50 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    cb54:	b570      	push	{r4, r5, r6, lr}
    cb56:	880b      	ldrh	r3, [r1, #0]
    cb58:	7f04      	ldrb	r4, [r0, #28]
    cb5a:	f100 0524 	add.w	r5, r0, #36	; 0x24
    cb5e:	f423 4600 	bic.w	r6, r3, #32768	; 0x8000
    cb62:	8802      	ldrh	r2, [r0, #0]
    cb64:	4435      	add	r5, r6
    cb66:	1da4      	adds	r4, r4, #6
    cb68:	882d      	ldrh	r5, [r5, #0]
    cb6a:	4422      	add	r2, r4
    cb6c:	b292      	uxth	r2, r2
    cb6e:	4425      	add	r5, r4
    cb70:	1e54      	subs	r4, r2, #1
    cb72:	442c      	add	r4, r5
    cb74:	fb94 f4f2 	sdiv	r4, r4, r2
    cb78:	fb02 6204 	mla	r2, r2, r4, r6
    cb7c:	8840      	ldrh	r0, [r0, #2]
    cb7e:	b292      	uxth	r2, r2
    cb80:	4290      	cmp	r0, r2
    cb82:	d903      	bls.n	cb8c <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    cb84:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    cb88:	4310      	orrs	r0, r2
    cb8a:	e002      	b.n	cb92 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    cb8c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    cb90:	4398      	bics	r0, r3
    cb92:	8008      	strh	r0, [r1, #0]
    cb94:	bd70      	pop	{r4, r5, r6, pc}
    cb96:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    cb9a:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    cb9e:	429a      	cmp	r2, r3
    cba0:	d107      	bne.n	cbb2 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    cba2:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    cba6:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    cbaa:	4288      	cmp	r0, r1
    cbac:	d001      	beq.n	cbb2 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    cbae:	2001      	movs	r0, #1
    cbb0:	4770      	bx	lr
    cbb2:	2000      	movs	r0, #0
    cbb4:	4770      	bx	lr

0000cbb6 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    cbb6:	b570      	push	{r4, r5, r6, lr}
    cbb8:	7f00      	ldrb	r0, [r0, #28]
    cbba:	461c      	mov	r4, r3
    cbbc:	1d80      	adds	r0, r0, #6
    cbbe:	4408      	add	r0, r1
    cbc0:	4613      	mov	r3, r2
    cbc2:	8809      	ldrh	r1, [r1, #0]
    cbc4:	9a04      	ldr	r2, [sp, #16]
    cbc6:	1cc9      	adds	r1, r1, #3
    cbc8:	b289      	uxth	r1, r1
    cbca:	1915      	adds	r5, r2, r4
    cbcc:	1ec0      	subs	r0, r0, #3
    cbce:	428d      	cmp	r5, r1
    cbd0:	d805      	bhi.n	cbde <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
    cbd2:	1881      	adds	r1, r0, r2
    cbd4:	4622      	mov	r2, r4
    cbd6:	4618      	mov	r0, r3
    cbd8:	f7ff fac3 	bl	c162 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cbdc:	e000      	b.n	cbe0 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
    cbde:	2400      	movs	r4, #0
    cbe0:	4620      	mov	r0, r4
    cbe2:	bd70      	pop	{r4, r5, r6, pc}

0000cbe4 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    cbe4:	b570      	push	{r4, r5, r6, lr}
    cbe6:	7f00      	ldrb	r0, [r0, #28]
    cbe8:	461c      	mov	r4, r3
    cbea:	1d80      	adds	r0, r0, #6
    cbec:	4408      	add	r0, r1
    cbee:	4613      	mov	r3, r2
    cbf0:	8809      	ldrh	r1, [r1, #0]
    cbf2:	9a04      	ldr	r2, [sp, #16]
    cbf4:	1cc9      	adds	r1, r1, #3
    cbf6:	b289      	uxth	r1, r1
    cbf8:	1915      	adds	r5, r2, r4
    cbfa:	1ec0      	subs	r0, r0, #3
    cbfc:	428d      	cmp	r5, r1
    cbfe:	d805      	bhi.n	cc0c <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
    cc00:	4410      	add	r0, r2
    cc02:	4622      	mov	r2, r4
    cc04:	4619      	mov	r1, r3
    cc06:	f7ff faac 	bl	c162 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cc0a:	e000      	b.n	cc0e <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
    cc0c:	2400      	movs	r4, #0
    cc0e:	4620      	mov	r0, r4
    cc10:	bd70      	pop	{r4, r5, r6, pc}

0000cc12 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    cc12:	8881      	ldrh	r1, [r0, #4]
    cc14:	88c0      	ldrh	r0, [r0, #6]
    cc16:	4288      	cmp	r0, r1
    cc18:	d101      	bne.n	cc1e <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    cc1a:	2001      	movs	r0, #1
    cc1c:	4770      	bx	lr
    cc1e:	2000      	movs	r0, #0
    cc20:	4770      	bx	lr

0000cc22 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    cc22:	8881      	ldrh	r1, [r0, #4]
    cc24:	8900      	ldrh	r0, [r0, #8]
    cc26:	4288      	cmp	r0, r1
    cc28:	d101      	bne.n	cc2e <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    cc2a:	2001      	movs	r0, #1
    cc2c:	4770      	bx	lr
    cc2e:	2000      	movs	r0, #0
    cc30:	4770      	bx	lr

0000cc32 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    cc32:	b570      	push	{r4, r5, r6, lr}
    cc34:	4604      	mov	r4, r0
    cc36:	f100 0124 	add.w	r1, r0, #36	; 0x24
    cc3a:	8880      	ldrh	r0, [r0, #4]
    cc3c:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    cc40:	4401      	add	r1, r0
    cc42:	8a20      	ldrh	r0, [r4, #16]
    cc44:	2800      	cmp	r0, #0
    cc46:	d01a      	beq.n	cc7e <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    cc48:	89a2      	ldrh	r2, [r4, #12]
    cc4a:	2500      	movs	r5, #0
    cc4c:	4410      	add	r0, r2
    cc4e:	b280      	uxth	r0, r0
    cc50:	81a0      	strh	r0, [r4, #12]
    cc52:	880a      	ldrh	r2, [r1, #0]
    cc54:	4290      	cmp	r0, r2
    cc56:	d905      	bls.n	cc64 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x32>
    cc58:	f44f 71a5 	mov.w	r1, #330	; 0x14a
    cc5c:	f04f 0014 	mov.w	r0, #20
    cc60:	f7f7 f87c 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cc64:	d109      	bne.n	cc7a <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    cc66:	69a0      	ldr	r0, [r4, #24]
    cc68:	b108      	cbz	r0, cc6e <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x3c>
    cc6a:	7f40      	ldrb	r0, [r0, #29]
    cc6c:	7088      	strb	r0, [r1, #2]
    cc6e:	f104 0104 	add.w	r1, r4, #4
    cc72:	4620      	mov	r0, r4
    cc74:	f7ff ff6e 	bl	cb54 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cc78:	81a5      	strh	r5, [r4, #12]
    cc7a:	8225      	strh	r5, [r4, #16]
    cc7c:	2001      	movs	r0, #1
    cc7e:	bd70      	pop	{r4, r5, r6, pc}

0000cc80 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    cc80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cc84:	4604      	mov	r4, r0
    cc86:	f100 0324 	add.w	r3, r0, #36	; 0x24
    cc8a:	88c0      	ldrh	r0, [r0, #6]
    cc8c:	460e      	mov	r6, r1
    cc8e:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    cc92:	8a60      	ldrh	r0, [r4, #18]
    cc94:	19d9      	adds	r1, r3, r7
    cc96:	b108      	cbz	r0, cc9c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    cc98:	42b0      	cmp	r0, r6
    cc9a:	d202      	bcs.n	cca2 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x22>
    cc9c:	2000      	movs	r0, #0
    cc9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cca2:	89e0      	ldrh	r0, [r4, #14]
    cca4:	2500      	movs	r5, #0
    cca6:	b140      	cbz	r0, ccba <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3a>
    cca8:	f8b1 c000 	ldrh.w	ip, [r1]
    ccac:	4560      	cmp	r0, ip
    ccae:	d008      	beq.n	ccc2 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x42>
    ccb0:	f240 211f 	movw	r1, #543	; 0x21f
    ccb4:	2014      	movs	r0, #20
    ccb6:	f7f7 f851 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ccba:	7f60      	ldrb	r0, [r4, #29]
    ccbc:	7088      	strb	r0, [r1, #2]
    ccbe:	800d      	strh	r5, [r1, #0]
    ccc0:	e00e      	b.n	cce0 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x60>
    ccc2:	f894 c01c 	ldrb.w	ip, [r4, #28]
    ccc6:	4418      	add	r0, r3
    ccc8:	f10c 0c06 	add.w	ip, ip, #6
    cccc:	44bc      	add	ip, r7
    ccce:	4460      	add	r0, ip
    ccd0:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    ccd4:	f820 cc03 	strh.w	ip, [r0, #-3]
    ccd8:	f894 c020 	ldrb.w	ip, [r4, #32]
    ccdc:	f800 cc01 	strb.w	ip, [r0, #-1]
    cce0:	89e0      	ldrh	r0, [r4, #14]
    cce2:	4430      	add	r0, r6
    cce4:	81e0      	strh	r0, [r4, #14]
    cce6:	8808      	ldrh	r0, [r1, #0]
    cce8:	4430      	add	r0, r6
    ccea:	8008      	strh	r0, [r1, #0]
    ccec:	b16a      	cbz	r2, cd0a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x8a>
    ccee:	1da1      	adds	r1, r4, #6
    ccf0:	4620      	mov	r0, r4
    ccf2:	f7ff ff2f 	bl	cb54 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    ccf6:	81e5      	strh	r5, [r4, #14]
    ccf8:	7f60      	ldrb	r0, [r4, #29]
    ccfa:	1c40      	adds	r0, r0, #1
    ccfc:	7760      	strb	r0, [r4, #29]
    ccfe:	7da0      	ldrb	r0, [r4, #22]
    cd00:	b108      	cbz	r0, cd06 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x86>
    cd02:	88e0      	ldrh	r0, [r4, #6]
    cd04:	82a0      	strh	r0, [r4, #20]
    cd06:	75a5      	strb	r5, [r4, #22]
    cd08:	e00b      	b.n	cd22 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xa2>
    cd0a:	7f20      	ldrb	r0, [r4, #28]
    cd0c:	89e1      	ldrh	r1, [r4, #14]
    cd0e:	1d80      	adds	r0, r0, #6
    cd10:	4438      	add	r0, r7
    cd12:	4419      	add	r1, r3
    cd14:	4408      	add	r0, r1
    cd16:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    cd1a:	83e1      	strh	r1, [r4, #30]
    cd1c:	7880      	ldrb	r0, [r0, #2]
    cd1e:	f884 0020 	strb.w	r0, [r4, #32]
    cd22:	8265      	strh	r5, [r4, #18]
    cd24:	75e5      	strb	r5, [r4, #23]
    cd26:	2001      	movs	r0, #1
    cd28:	e7b9      	b.n	cc9e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>

0000cd2a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    cd2a:	b510      	push	{r4, lr}
    cd2c:	4604      	mov	r4, r0
    cd2e:	88c0      	ldrh	r0, [r0, #6]
    cd30:	88a1      	ldrh	r1, [r4, #4]
    cd32:	4281      	cmp	r1, r0
    cd34:	d007      	beq.n	cd46 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    cd36:	89a0      	ldrh	r0, [r4, #12]
    cd38:	b928      	cbnz	r0, cd46 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    cd3a:	8a20      	ldrh	r0, [r4, #16]
    cd3c:	b918      	cbnz	r0, cd46 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    cd3e:	88a0      	ldrh	r0, [r4, #4]
    cd40:	8aa1      	ldrh	r1, [r4, #20]
    cd42:	4288      	cmp	r0, r1
    cd44:	d101      	bne.n	cd4a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    cd46:	2000      	movs	r0, #0
    cd48:	bd10      	pop	{r4, pc}
    cd4a:	1d21      	adds	r1, r4, #4
    cd4c:	4620      	mov	r0, r4
    cd4e:	f7ff ff01 	bl	cb54 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cd52:	2000      	movs	r0, #0
    cd54:	8220      	strh	r0, [r4, #16]
    cd56:	2001      	movs	r0, #1
    cd58:	bd10      	pop	{r4, pc}

0000cd5a <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    cd5a:	b510      	push	{r4, lr}
    cd5c:	4604      	mov	r4, r0
    cd5e:	f100 0224 	add.w	r2, r0, #36	; 0x24
    cd62:	88c0      	ldrh	r0, [r0, #6]
    cd64:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    cd68:	4402      	add	r2, r0
    cd6a:	8820      	ldrh	r0, [r4, #0]
    cd6c:	2845      	cmp	r0, #69	; 0x45
    cd6e:	d200      	bcs.n	cd72 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    cd70:	2045      	movs	r0, #69	; 0x45
    cd72:	4288      	cmp	r0, r1
    cd74:	d204      	bcs.n	cd80 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    cd76:	f44f 7180 	mov.w	r1, #256	; 0x100
    cd7a:	2014      	movs	r0, #20
    cd7c:	f7f6 ffee 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cd80:	7de0      	ldrb	r0, [r4, #23]
    cd82:	2800      	cmp	r0, #0
    cd84:	d003      	beq.n	cd8e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    cd86:	8810      	ldrh	r0, [r2, #0]
    cd88:	4288      	cmp	r0, r1
    cd8a:	d201      	bcs.n	cd90 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    cd8c:	2000      	movs	r0, #0
    cd8e:	bd10      	pop	{r4, pc}
    cd90:	8011      	strh	r1, [r2, #0]
    cd92:	1da1      	adds	r1, r4, #6
    cd94:	4620      	mov	r0, r4
    cd96:	f7ff fedd 	bl	cb54 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cd9a:	2000      	movs	r0, #0
    cd9c:	75e0      	strb	r0, [r4, #23]
    cd9e:	2001      	movs	r0, #1
    cda0:	bd10      	pop	{r4, pc}

0000cda2 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
    cda2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cda6:	8941      	ldrh	r1, [r0, #10]
    cda8:	8886      	ldrh	r6, [r0, #4]
    cdaa:	4604      	mov	r4, r0
    cdac:	2500      	movs	r5, #0
    cdae:	f100 070a 	add.w	r7, r0, #10
    cdb2:	e006      	b.n	cdc2 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
    cdb4:	4639      	mov	r1, r7
    cdb6:	4620      	mov	r0, r4
    cdb8:	f7ff fecc 	bl	cb54 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cdbc:	1c6d      	adds	r5, r5, #1
    cdbe:	8961      	ldrh	r1, [r4, #10]
    cdc0:	b2ad      	uxth	r5, r5
    cdc2:	42b1      	cmp	r1, r6
    cdc4:	d1f6      	bne.n	cdb4 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x12>
    cdc6:	4628      	mov	r0, r5
    cdc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000cdcc <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    cdcc:	b530      	push	{r4, r5, lr}
    cdce:	88c4      	ldrh	r4, [r0, #6]
    cdd0:	8881      	ldrh	r1, [r0, #4]
    cdd2:	f100 0224 	add.w	r2, r0, #36	; 0x24
    cdd6:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    cdda:	4413      	add	r3, r2
    cddc:	8882      	ldrh	r2, [r0, #4]
    cdde:	8a85      	ldrh	r5, [r0, #20]
    cde0:	42aa      	cmp	r2, r5
    cde2:	d012      	beq.n	ce0a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    cde4:	42a1      	cmp	r1, r4
    cde6:	d010      	beq.n	ce0a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    cde8:	8981      	ldrh	r1, [r0, #12]
    cdea:	b971      	cbnz	r1, ce0a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    cdec:	6982      	ldr	r2, [r0, #24]
    cdee:	b172      	cbz	r2, ce0e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    cdf0:	4610      	mov	r0, r2
    cdf2:	f7ff ff16 	bl	cc22 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    cdf6:	b950      	cbnz	r0, ce0e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    cdf8:	8910      	ldrh	r0, [r2, #8]
    cdfa:	3224      	adds	r2, #36	; 0x24
    cdfc:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    ce00:	4410      	add	r0, r2
    ce02:	7899      	ldrb	r1, [r3, #2]
    ce04:	7880      	ldrb	r0, [r0, #2]
    ce06:	4288      	cmp	r0, r1
    ce08:	d101      	bne.n	ce0e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    ce0a:	2000      	movs	r0, #0
    ce0c:	bd30      	pop	{r4, r5, pc}
    ce0e:	4618      	mov	r0, r3
    ce10:	bd30      	pop	{r4, r5, pc}

0000ce12 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    ce12:	7f00      	ldrb	r0, [r0, #28]
    ce14:	1d80      	adds	r0, r0, #6
    ce16:	4408      	add	r0, r1
    ce18:	1ec0      	subs	r0, r0, #3
    ce1a:	6010      	str	r0, [r2, #0]
    ce1c:	8808      	ldrh	r0, [r1, #0]
    ce1e:	4770      	bx	lr

0000ce20 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    ce20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ce24:	460e      	mov	r6, r1
    ce26:	88c1      	ldrh	r1, [r0, #6]
    ce28:	8902      	ldrh	r2, [r0, #8]
    ce2a:	4604      	mov	r4, r0
    ce2c:	f100 0824 	add.w	r8, r0, #36	; 0x24
    ce30:	8800      	ldrh	r0, [r0, #0]
    ce32:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    ce36:	f422 4700 	bic.w	r7, r2, #32768	; 0x8000
    ce3a:	2845      	cmp	r0, #69	; 0x45
    ce3c:	d200      	bcs.n	ce40 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    ce3e:	2045      	movs	r0, #69	; 0x45
    ce40:	42b0      	cmp	r0, r6
    ce42:	d203      	bcs.n	ce4c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    ce44:	21c2      	movs	r1, #194	; 0xc2
    ce46:	2014      	movs	r0, #20
    ce48:	f7f6 ff88 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ce4c:	4610      	mov	r0, r2
    ce4e:	f7ff fea2 	bl	cb96 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    ce52:	b110      	cbz	r0, ce5a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    ce54:	2000      	movs	r0, #0
    ce56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ce5a:	42af      	cmp	r7, r5
    ce5c:	d908      	bls.n	ce70 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    ce5e:	7f21      	ldrb	r1, [r4, #28]
    ce60:	1b78      	subs	r0, r7, r5
    ce62:	1a40      	subs	r0, r0, r1
    ce64:	1f80      	subs	r0, r0, #6
    ce66:	4286      	cmp	r6, r0
    ce68:	dd02      	ble.n	ce70 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    ce6a:	2000      	movs	r0, #0
    ce6c:	75e0      	strb	r0, [r4, #23]
    ce6e:	e7f1      	b.n	ce54 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    ce70:	eb08 0005 	add.w	r0, r8, r5
    ce74:	2101      	movs	r1, #1
    ce76:	8006      	strh	r6, [r0, #0]
    ce78:	75e1      	strb	r1, [r4, #23]
    ce7a:	e7ec      	b.n	ce56 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000ce7c <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    ce7c:	b538      	push	{r3, r4, r5, lr}
    ce7e:	88c4      	ldrh	r4, [r0, #6]
    ce80:	8881      	ldrh	r1, [r0, #4]
    ce82:	f100 0224 	add.w	r2, r0, #36	; 0x24
    ce86:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    ce8a:	441a      	add	r2, r3
    ce8c:	42a1      	cmp	r1, r4
    ce8e:	d010      	beq.n	ceb2 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    ce90:	8983      	ldrh	r3, [r0, #12]
    ce92:	8a05      	ldrh	r5, [r0, #16]
    ce94:	8812      	ldrh	r2, [r2, #0]
    ce96:	442b      	add	r3, r5
    ce98:	4293      	cmp	r3, r2
    ce9a:	d308      	bcc.n	ceae <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    ce9c:	f8ad 1000 	strh.w	r1, [sp]
    cea0:	4669      	mov	r1, sp
    cea2:	f7ff fe57 	bl	cb54 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cea6:	f8bd 0000 	ldrh.w	r0, [sp]
    ceaa:	42a0      	cmp	r0, r4
    ceac:	d001      	beq.n	ceb2 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    ceae:	2001      	movs	r0, #1
    ceb0:	bd38      	pop	{r3, r4, r5, pc}
    ceb2:	2000      	movs	r0, #0
    ceb4:	bd38      	pop	{r3, r4, r5, pc}

0000ceb6 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    ceb6:	b570      	push	{r4, r5, r6, lr}
    ceb8:	88c6      	ldrh	r6, [r0, #6]
    ceba:	8885      	ldrh	r5, [r0, #4]
    cebc:	4603      	mov	r3, r0
    cebe:	f100 0424 	add.w	r4, r0, #36	; 0x24
    cec2:	f425 4000 	bic.w	r0, r5, #32768	; 0x8000
    cec6:	4420      	add	r0, r4
    cec8:	42b5      	cmp	r5, r6
    ceca:	d102      	bne.n	ced2 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    cecc:	2000      	movs	r0, #0
    cece:	8218      	strh	r0, [r3, #16]
    ced0:	bd70      	pop	{r4, r5, r6, pc}
    ced2:	8804      	ldrh	r4, [r0, #0]
    ced4:	899d      	ldrh	r5, [r3, #12]
    ced6:	7f1e      	ldrb	r6, [r3, #28]
    ced8:	1b64      	subs	r4, r4, r5
    ceda:	4435      	add	r5, r6
    cedc:	4428      	add	r0, r5
    cede:	880d      	ldrh	r5, [r1, #0]
    cee0:	b2a4      	uxth	r4, r4
    cee2:	1cc0      	adds	r0, r0, #3
    cee4:	42a5      	cmp	r5, r4
    cee6:	d900      	bls.n	ceea <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    cee8:	800c      	strh	r4, [r1, #0]
    ceea:	899c      	ldrh	r4, [r3, #12]
    ceec:	b124      	cbz	r4, cef8 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    ceee:	2400      	movs	r4, #0
    cef0:	7014      	strb	r4, [r2, #0]
    cef2:	8809      	ldrh	r1, [r1, #0]
    cef4:	8219      	strh	r1, [r3, #16]
    cef6:	bd70      	pop	{r4, r5, r6, pc}
    cef8:	2401      	movs	r4, #1
    cefa:	e7f9      	b.n	cef0 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000cefc <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    cefc:	b510      	push	{r4, lr}
    cefe:	8a81      	ldrh	r1, [r0, #20]
    cf00:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    cf04:	3aff      	subs	r2, #255	; 0xff
    cf06:	d002      	beq.n	cf0e <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x12>
    cf08:	7d82      	ldrb	r2, [r0, #22]
    cf0a:	b952      	cbnz	r2, cf22 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x26>
    cf0c:	e004      	b.n	cf18 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1c>
    cf0e:	f44f 7157 	mov.w	r1, #860	; 0x35c
    cf12:	2014      	movs	r0, #20
    cf14:	f7f6 ff22 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cf18:	8880      	ldrh	r0, [r0, #4]
    cf1a:	4281      	cmp	r1, r0
    cf1c:	d101      	bne.n	cf22 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x26>
    cf1e:	2000      	movs	r0, #0
    cf20:	bd10      	pop	{r4, pc}
    cf22:	2001      	movs	r0, #1
    cf24:	bd10      	pop	{r4, pc}

0000cf26 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    cf26:	f64f 71ff 	movw	r1, #65535	; 0xffff
    cf2a:	8281      	strh	r1, [r0, #20]
    cf2c:	2100      	movs	r1, #0
    cf2e:	7581      	strb	r1, [r0, #22]
    cf30:	4770      	bx	lr

0000cf32 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    cf32:	b510      	push	{r4, lr}
    cf34:	8a81      	ldrh	r1, [r0, #20]
    cf36:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    cf3a:	3aff      	subs	r2, #255	; 0xff
    cf3c:	d004      	beq.n	cf48 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    cf3e:	f240 313f 	movw	r1, #831	; 0x33f
    cf42:	2014      	movs	r0, #20
    cf44:	f7f6 ff0a 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cf48:	88c1      	ldrh	r1, [r0, #6]
    cf4a:	8281      	strh	r1, [r0, #20]
    cf4c:	89c1      	ldrh	r1, [r0, #14]
    cf4e:	b101      	cbz	r1, cf52 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x20>
    cf50:	2101      	movs	r1, #1
    cf52:	7581      	strb	r1, [r0, #22]
    cf54:	bd10      	pop	{r4, pc}

0000cf56 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    cf56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cf5a:	461d      	mov	r5, r3
    cf5c:	4616      	mov	r6, r2
    cf5e:	9f06      	ldr	r7, [sp, #24]
    cf60:	460b      	mov	r3, r1
    cf62:	4604      	mov	r4, r0
    cf64:	463a      	mov	r2, r7
    cf66:	4629      	mov	r1, r5
    cf68:	4630      	mov	r0, r6
    cf6a:	f000 f84f 	bl	d00c <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    cf6e:	4283      	cmp	r3, r0
    cf70:	d201      	bcs.n	cf76 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    cf72:	21a1      	movs	r1, #161	; 0xa1
    cf74:	e018      	b.n	cfa8 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    cf76:	1ce0      	adds	r0, r4, #3
    cf78:	f020 0103 	bic.w	r1, r0, #3
    cf7c:	4620      	mov	r0, r4
    cf7e:	42a1      	cmp	r1, r4
    cf80:	d001      	beq.n	cf86 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    cf82:	21a2      	movs	r1, #162	; 0xa2
    cf84:	e010      	b.n	cfa8 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    cf86:	2224      	movs	r2, #36	; 0x24
    cf88:	2100      	movs	r1, #0
    cf8a:	f7ff f964 	bl	c256 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cf8e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    cf92:	82a0      	strh	r0, [r4, #20]
    cf94:	19a8      	adds	r0, r5, r6
    cf96:	1d80      	adds	r0, r0, #6
    cf98:	4378      	muls	r0, r7
    cf9a:	b280      	uxth	r0, r0
    cf9c:	7725      	strb	r5, [r4, #28]
    cf9e:	8060      	strh	r0, [r4, #2]
    cfa0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    cfa4:	d903      	bls.n	cfae <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    cfa6:	21a8      	movs	r1, #168	; 0xa8
    cfa8:	2014      	movs	r0, #20
    cfaa:	f7f6 fed7 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cfae:	8026      	strh	r6, [r4, #0]
    cfb0:	2000      	movs	r0, #0
    cfb2:	7760      	strb	r0, [r4, #29]
    cfb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000cfb8 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    cfb8:	6181      	str	r1, [r0, #24]
    cfba:	6188      	str	r0, [r1, #24]
    cfbc:	4770      	bx	lr

0000cfbe <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    cfbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cfc2:	460b      	mov	r3, r1
    cfc4:	4604      	mov	r4, r0
    cfc6:	f100 0124 	add.w	r1, r0, #36	; 0x24
    cfca:	8905      	ldrh	r5, [r0, #8]
    cfcc:	8946      	ldrh	r6, [r0, #10]
    cfce:	8880      	ldrh	r0, [r0, #4]
    cfd0:	f425 4700 	bic.w	r7, r5, #32768	; 0x8000
    cfd4:	4439      	add	r1, r7
    cfd6:	460f      	mov	r7, r1
    cfd8:	4285      	cmp	r5, r0
    cfda:	d102      	bne.n	cfe2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    cfdc:	2000      	movs	r0, #0
    cfde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cfe2:	b10a      	cbz	r2, cfe8 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    cfe4:	1cc8      	adds	r0, r1, #3
    cfe6:	6010      	str	r0, [r2, #0]
    cfe8:	b123      	cbz	r3, cff4 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    cfea:	7f22      	ldrb	r2, [r4, #28]
    cfec:	1cf9      	adds	r1, r7, #3
    cfee:	4618      	mov	r0, r3
    cff0:	f7ff f8b7 	bl	c162 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cff4:	883f      	ldrh	r7, [r7, #0]
    cff6:	f104 0108 	add.w	r1, r4, #8
    cffa:	4620      	mov	r0, r4
    cffc:	f7ff fdaa 	bl	cb54 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d000:	42b5      	cmp	r5, r6
    d002:	d101      	bne.n	d008 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    d004:	8920      	ldrh	r0, [r4, #8]
    d006:	8160      	strh	r0, [r4, #10]
    d008:	4638      	mov	r0, r7
    d00a:	e7e8      	b.n	cfde <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000d00c <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    d00c:	4401      	add	r1, r0
    d00e:	1d89      	adds	r1, r1, #6
    d010:	4351      	muls	r1, r2
    d012:	b28a      	uxth	r2, r1
    d014:	2100      	movs	r1, #0
    d016:	2845      	cmp	r0, #69	; 0x45
    d018:	d201      	bcs.n	d01e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x12>
    d01a:	f1c0 0145 	rsb	r1, r0, #69	; 0x45
    d01e:	3224      	adds	r2, #36	; 0x24
    d020:	1850      	adds	r0, r2, r1
    d022:	b280      	uxth	r0, r0
    d024:	4770      	bx	lr

0000d026 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    d026:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d02a:	4688      	mov	r8, r1
    d02c:	88c1      	ldrh	r1, [r0, #6]
    d02e:	4604      	mov	r4, r0
    d030:	8900      	ldrh	r0, [r0, #8]
    d032:	f421 4600 	bic.w	r6, r1, #32768	; 0x8000
    d036:	f104 0524 	add.w	r5, r4, #36	; 0x24
    d03a:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    d03e:	eb05 0906 	add.w	r9, r5, r6
    d042:	f7ff fda8 	bl	cb96 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d046:	2200      	movs	r2, #0
    d048:	b998      	cbnz	r0, d072 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    d04a:	8820      	ldrh	r0, [r4, #0]
    d04c:	2845      	cmp	r0, #69	; 0x45
    d04e:	d200      	bcs.n	d052 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    d050:	2045      	movs	r0, #69	; 0x45
    d052:	42b7      	cmp	r7, r6
    d054:	d906      	bls.n	d064 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d056:	7f23      	ldrb	r3, [r4, #28]
    d058:	1bb9      	subs	r1, r7, r6
    d05a:	1ac9      	subs	r1, r1, r3
    d05c:	1f89      	subs	r1, r1, #6
    d05e:	4281      	cmp	r1, r0
    d060:	da00      	bge.n	d064 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d062:	4608      	mov	r0, r1
    d064:	89e1      	ldrh	r1, [r4, #14]
    d066:	b111      	cbz	r1, d06e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    d068:	f8b9 3000 	ldrh.w	r3, [r9]
    d06c:	1ac0      	subs	r0, r0, r3
    d06e:	4540      	cmp	r0, r8
    d070:	da03      	bge.n	d07a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    d072:	8262      	strh	r2, [r4, #18]
    d074:	2000      	movs	r0, #0
    d076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d07a:	7f20      	ldrb	r0, [r4, #28]
    d07c:	4429      	add	r1, r5
    d07e:	1d80      	adds	r0, r0, #6
    d080:	4430      	add	r0, r6
    d082:	4408      	add	r0, r1
    d084:	f8a4 8012 	strh.w	r8, [r4, #18]
    d088:	1ec0      	subs	r0, r0, #3
    d08a:	e7f4      	b.n	d076 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000d08c <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    d08c:	2100      	movs	r1, #0
    d08e:	81c1      	strh	r1, [r0, #14]
    d090:	8241      	strh	r1, [r0, #18]
    d092:	75c1      	strb	r1, [r0, #23]
    d094:	7581      	strb	r1, [r0, #22]
    d096:	4770      	bx	lr

0000d098 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    d098:	b570      	push	{r4, r5, r6, lr}
    d09a:	2300      	movs	r3, #0
    d09c:	2908      	cmp	r1, #8
    d09e:	d204      	bcs.n	d0aa <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
    d0a0:	f240 11cb 	movw	r1, #459	; 0x1cb
    d0a4:	2015      	movs	r0, #21
    d0a6:	f7f6 fe59 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d0aa:	6802      	ldr	r2, [r0, #0]
    d0ac:	b90a      	cbnz	r2, d0b2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    d0ae:	e01e      	b.n	d0ee <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    d0b0:	4610      	mov	r0, r2
    d0b2:	6802      	ldr	r2, [r0, #0]
    d0b4:	8893      	ldrh	r3, [r2, #4]
    d0b6:	428b      	cmp	r3, r1
    d0b8:	d002      	beq.n	d0c0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
    d0ba:	6813      	ldr	r3, [r2, #0]
    d0bc:	2b00      	cmp	r3, #0
    d0be:	d1f7      	bne.n	d0b0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
    d0c0:	8894      	ldrh	r4, [r2, #4]
    d0c2:	4613      	mov	r3, r2
    d0c4:	428c      	cmp	r4, r1
    d0c6:	d101      	bne.n	d0cc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
    d0c8:	6811      	ldr	r1, [r2, #0]
    d0ca:	e00d      	b.n	d0e8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
    d0cc:	f101 0508 	add.w	r5, r1, #8
    d0d0:	b2ae      	uxth	r6, r5
    d0d2:	2500      	movs	r5, #0
    d0d4:	42b4      	cmp	r4, r6
    d0d6:	d309      	bcc.n	d0ec <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
    d0d8:	1a64      	subs	r4, r4, r1
    d0da:	4411      	add	r1, r2
    d0dc:	600d      	str	r5, [r1, #0]
    d0de:	808c      	strh	r4, [r1, #4]
    d0e0:	6802      	ldr	r2, [r0, #0]
    d0e2:	6812      	ldr	r2, [r2, #0]
    d0e4:	6002      	str	r2, [r0, #0]
    d0e6:	600a      	str	r2, [r1, #0]
    d0e8:	6001      	str	r1, [r0, #0]
    d0ea:	e000      	b.n	d0ee <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    d0ec:	2300      	movs	r3, #0
    d0ee:	4618      	mov	r0, r3
    d0f0:	bd70      	pop	{r4, r5, r6, pc}

0000d0f2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    d0f2:	b510      	push	{r4, lr}
    d0f4:	000c      	movs	r4, r1
    d0f6:	d006      	beq.n	d106 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
    d0f8:	2c08      	cmp	r4, #8
    d0fa:	d209      	bcs.n	d110 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
    d0fc:	f240 1195 	movw	r1, #405	; 0x195
    d100:	2015      	movs	r0, #21
    d102:	f7f6 fe2b 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d106:	b108      	cbz	r0, d10c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    d108:	2100      	movs	r1, #0
    d10a:	6001      	str	r1, [r0, #0]
    d10c:	2000      	movs	r0, #0
    d10e:	bd10      	pop	{r4, pc}
    d110:	b118      	cbz	r0, d11a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
    d112:	b2a1      	uxth	r1, r4
    d114:	6800      	ldr	r0, [r0, #0]
    d116:	f000 f814 	bl	d142 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    d11a:	1d20      	adds	r0, r4, #4
    d11c:	bd10      	pop	{r4, pc}

0000d11e <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    d11e:	2100      	movs	r1, #0
    d120:	6802      	ldr	r2, [r0, #0]
    d122:	e003      	b.n	d12c <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    d124:	8893      	ldrh	r3, [r2, #4]
    d126:	6812      	ldr	r2, [r2, #0]
    d128:	4419      	add	r1, r3
    d12a:	b289      	uxth	r1, r1
    d12c:	2a00      	cmp	r2, #0
    d12e:	d1f9      	bne.n	d124 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    d130:	f000 b807 	b.w	d142 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000d134 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    d134:	2300      	movs	r3, #0
    d136:	600b      	str	r3, [r1, #0]
    d138:	808a      	strh	r2, [r1, #4]
    d13a:	6802      	ldr	r2, [r0, #0]
    d13c:	600a      	str	r2, [r1, #0]
    d13e:	6001      	str	r1, [r0, #0]
    d140:	4770      	bx	lr
    d142:	2300      	movs	r3, #0
    d144:	6043      	str	r3, [r0, #4]
    d146:	1d02      	adds	r2, r0, #4
    d148:	8101      	strh	r1, [r0, #8]
    d14a:	6002      	str	r2, [r0, #0]
    d14c:	4770      	bx	lr

0000d14e <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    d14e:	f5a0 437f 	sub.w	r3, r0, #65280	; 0xff00
    d152:	3bff      	subs	r3, #255	; 0xff
    d154:	d001      	beq.n	d15a <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    d156:	2902      	cmp	r1, #2
    d158:	d301      	bcc.n	d15e <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    d15a:	2000      	movs	r0, #0
    d15c:	4770      	bx	lr
    d15e:	f7f7 b8ad 	b.w	42bc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0000d162 <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY>:
    d162:	b50e      	push	{r1, r2, r3, lr}
    d164:	4669      	mov	r1, sp
    d166:	f000 f818 	bl	d19a <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    d16a:	b120      	cbz	r0, d176 <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY+0x14>
    d16c:	f44f 71b2 	mov.w	r1, #356	; 0x164
    d170:	2017      	movs	r0, #23
    d172:	f7f6 fdf3 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d176:	4668      	mov	r0, sp
    d178:	f7f7 f81e 	bl	41b8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    d17c:	b108      	cbz	r0, d182 <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY+0x20>
    d17e:	2000      	movs	r0, #0
    d180:	bd0e      	pop	{r1, r2, r3, pc}
    d182:	2001      	movs	r0, #1
    d184:	bd0e      	pop	{r1, r2, r3, pc}

0000d186 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    d186:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    d18a:	3aff      	subs	r2, #255	; 0xff
    d18c:	d001      	beq.n	d192 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    d18e:	2902      	cmp	r1, #2
    d190:	d301      	bcc.n	d196 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    d192:	2000      	movs	r0, #0
    d194:	4770      	bx	lr
    d196:	f7f7 b8cb 	b.w	4330 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>

0000d19a <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    d19a:	b570      	push	{r4, r5, r6, lr}
    d19c:	4605      	mov	r5, r0
    d19e:	460c      	mov	r4, r1
    d1a0:	4608      	mov	r0, r1
    d1a2:	f000 f850 	bl	d246 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    d1a6:	b108      	cbz	r0, d1ac <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    d1a8:	2010      	movs	r0, #16
    d1aa:	bd70      	pop	{r4, r5, r6, pc}
    d1ac:	2d02      	cmp	r5, #2
    d1ae:	d301      	bcc.n	d1b4 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x1a>
    d1b0:	2007      	movs	r0, #7
    d1b2:	bd70      	pop	{r4, r5, r6, pc}
    d1b4:	7025      	strb	r5, [r4, #0]
    d1b6:	2000      	movs	r0, #0
    d1b8:	8060      	strh	r0, [r4, #2]
    d1ba:	bd70      	pop	{r4, r5, r6, pc}
    d1bc:	b510      	push	{r4, lr}
    d1be:	4604      	mov	r4, r0
    d1c0:	f7f7 f902 	bl	43c8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    d1c4:	42a0      	cmp	r0, r4
    d1c6:	d901      	bls.n	d1cc <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x32>
    d1c8:	2001      	movs	r0, #1
    d1ca:	bd10      	pop	{r4, pc}
    d1cc:	2000      	movs	r0, #0
    d1ce:	bd10      	pop	{r4, pc}
    d1d0:	4770      	bx	lr

0000d1d2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    d1d2:	b570      	push	{r4, r5, r6, lr}
    d1d4:	460e      	mov	r6, r1
    d1d6:	461d      	mov	r5, r3
    d1d8:	4611      	mov	r1, r2
    d1da:	f000 f811 	bl	d200 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    d1de:	4604      	mov	r4, r0
    d1e0:	4629      	mov	r1, r5
    d1e2:	4630      	mov	r0, r6
    d1e4:	f000 f803 	bl	d1ee <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    d1e8:	4420      	add	r0, r4
    d1ea:	1d00      	adds	r0, r0, #4
    d1ec:	bd70      	pop	{r4, r5, r6, pc}
    d1ee:	b510      	push	{r4, lr}
    d1f0:	460a      	mov	r2, r1
    d1f2:	2101      	movs	r1, #1
    d1f4:	f7ff ff0a 	bl	d00c <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d1f8:	1cc0      	adds	r0, r0, #3
    d1fa:	f020 0003 	bic.w	r0, r0, #3
    d1fe:	bd10      	pop	{r4, pc}
    d200:	b510      	push	{r4, lr}
    d202:	460a      	mov	r2, r1
    d204:	2101      	movs	r1, #1
    d206:	f7ff ff01 	bl	d00c <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d20a:	1cc0      	adds	r0, r0, #3
    d20c:	f020 0003 	bic.w	r0, r0, #3
    d210:	bd10      	pop	{r4, pc}
    d212:	2800      	cmp	r0, #0
    d214:	db09      	blt.n	d22a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x58>
    d216:	f000 021f 	and.w	r2, r0, #31
    d21a:	2101      	movs	r1, #1
    d21c:	4091      	lsls	r1, r2
    d21e:	0940      	lsrs	r0, r0, #5
    d220:	0080      	lsls	r0, r0, #2
    d222:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d226:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d22a:	4770      	bx	lr

0000d22c <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    d22c:	f7f7 bab0 	b.w	4790 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>

0000d230 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>:
    d230:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    d234:	2000      	movs	r0, #0
    d236:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    d23a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    d23e:	2001      	movs	r0, #1
    d240:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    d244:	4770      	bx	lr

0000d246 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    d246:	b108      	cbz	r0, d24c <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    d248:	2000      	movs	r0, #0
    d24a:	4770      	bx	lr
    d24c:	2001      	movs	r0, #1
    d24e:	4770      	bx	lr

0000d250 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    d250:	f7f7 bbe4 	b.w	4a1c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000d254 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    d254:	f7f7 bbd2 	b.w	49fc <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000d258 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    d258:	b510      	push	{r4, lr}
    d25a:	2900      	cmp	r1, #0
    d25c:	4604      	mov	r4, r0
    d25e:	f04f 0106 	mov.w	r1, #6
    d262:	d002      	beq.n	d26a <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    d264:	f7f6 fe0a 	bl	3e7c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d268:	e001      	b.n	d26e <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    d26a:	f7f6 fe23 	bl	3eb4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d26e:	7960      	ldrb	r0, [r4, #5]
    d270:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    d274:	7160      	strb	r0, [r4, #5]
    d276:	bd10      	pop	{r4, pc}

0000d278 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    d278:	4770      	bx	lr

0000d27a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    d27a:	b530      	push	{r4, r5, lr}
    d27c:	460c      	mov	r4, r1
    d27e:	4605      	mov	r5, r0
    d280:	b08d      	sub	sp, #52	; 0x34
    d282:	f04f 0103 	mov.w	r1, #3
    d286:	f104 0003 	add.w	r0, r4, #3
    d28a:	b112      	cbz	r2, d292 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    d28c:	f7f6 fdf6 	bl	3e7c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d290:	e001      	b.n	d296 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    d292:	f7f6 fe0f 	bl	3eb4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d296:	7960      	ldrb	r0, [r4, #5]
    d298:	220d      	movs	r2, #13
    d29a:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    d29e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    d2a2:	7160      	strb	r0, [r4, #5]
    d2a4:	2100      	movs	r1, #0
    d2a6:	a804      	add	r0, sp, #16
    d2a8:	f7fe ffd5 	bl	c256 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d2ac:	78e0      	ldrb	r0, [r4, #3]
    d2ae:	f88d 001f 	strb.w	r0, [sp, #31]
    d2b2:	7920      	ldrb	r0, [r4, #4]
    d2b4:	f88d 001e 	strb.w	r0, [sp, #30]
    d2b8:	7960      	ldrb	r0, [r4, #5]
    d2ba:	f88d 001d 	strb.w	r0, [sp, #29]
    d2be:	2210      	movs	r2, #16
    d2c0:	4629      	mov	r1, r5
    d2c2:	4668      	mov	r0, sp
    d2c4:	f7fe ff4d 	bl	c162 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d2c8:	4668      	mov	r0, sp
    d2ca:	f7ff ffaf 	bl	d22c <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d2ce:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    d2d2:	7020      	strb	r0, [r4, #0]
    d2d4:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    d2d8:	7060      	strb	r0, [r4, #1]
    d2da:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    d2de:	70a0      	strb	r0, [r4, #2]
    d2e0:	b00d      	add	sp, #52	; 0x34
    d2e2:	bd30      	pop	{r4, r5, pc}

0000d2e4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    d2e4:	f7f7 bf1e 	b.w	5124 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x374>
    d2e8:	07c1      	lsls	r1, r0, #31
    d2ea:	d001      	beq.n	d2f0 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0xc>
    d2ec:	2001      	movs	r0, #1
    d2ee:	4770      	bx	lr
    d2f0:	0780      	lsls	r0, r0, #30
    d2f2:	d501      	bpl.n	d2f8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x14>
    d2f4:	2002      	movs	r0, #2
    d2f6:	4770      	bx	lr
    d2f8:	2000      	movs	r0, #0
    d2fa:	4770      	bx	lr
    d2fc:	b510      	push	{r4, lr}
    d2fe:	2801      	cmp	r0, #1
    d300:	d008      	beq.n	d314 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    d302:	2802      	cmp	r0, #2
    d304:	d004      	beq.n	d310 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2c>
    d306:	f240 31c1 	movw	r1, #961	; 0x3c1
    d30a:	2006      	movs	r0, #6
    d30c:	f7f6 fd26 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d310:	2001      	movs	r0, #1
    d312:	bd10      	pop	{r4, pc}
    d314:	2000      	movs	r0, #0
    d316:	bd10      	pop	{r4, pc}
    d318:	b570      	push	{r4, r5, r6, lr}
    d31a:	460c      	mov	r4, r1
    d31c:	4605      	mov	r5, r0
    d31e:	2b08      	cmp	r3, #8
    d320:	d001      	beq.n	d326 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x42>
    d322:	4619      	mov	r1, r3
    d324:	e000      	b.n	d328 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    d326:	2104      	movs	r1, #4
    d328:	4610      	mov	r0, r2
    d32a:	f000 f8f4 	bl	d516 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    d32e:	b90d      	cbnz	r5, d334 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x50>
    d330:	1d00      	adds	r0, r0, #4
    d332:	b280      	uxth	r0, r0
    d334:	4284      	cmp	r4, r0
    d336:	d200      	bcs.n	d33a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x56>
    d338:	4620      	mov	r0, r4
    d33a:	b2c0      	uxtb	r0, r0
    d33c:	bd70      	pop	{r4, r5, r6, pc}
    d33e:	2900      	cmp	r1, #0
    d340:	d004      	beq.n	d34c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x68>
    d342:	2801      	cmp	r0, #1
    d344:	d003      	beq.n	d34e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x6a>
    d346:	2901      	cmp	r1, #1
    d348:	d001      	beq.n	d34e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x6a>
    d34a:	2002      	movs	r0, #2
    d34c:	4770      	bx	lr
    d34e:	2001      	movs	r0, #1
    d350:	4770      	bx	lr
    d352:	f7ff bdb0 	b.w	ceb6 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000d356 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    d356:	2201      	movs	r2, #1
    d358:	f7f8 baa2 	b.w	58a0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000d35c <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    d35c:	b510      	push	{r4, lr}
    d35e:	f002 f954 	bl	f60a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    d362:	b118      	cbz	r0, d36c <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    d364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d368:	f7fd ba7a 	b.w	a860 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    d36c:	20ff      	movs	r0, #255	; 0xff
    d36e:	bd10      	pop	{r4, pc}

0000d370 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    d370:	b510      	push	{r4, lr}
    d372:	f7f8 fadf 	bl	5934 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    d376:	2810      	cmp	r0, #16
    d378:	d003      	beq.n	d382 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    d37a:	f7f8 faab 	bl	58d4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    d37e:	2810      	cmp	r0, #16
    d380:	d100      	bne.n	d384 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    d382:	2008      	movs	r0, #8
    d384:	bd10      	pop	{r4, pc}

0000d386 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    d386:	b510      	push	{r4, lr}
    d388:	f7f8 fad4 	bl	5934 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    d38c:	2810      	cmp	r0, #16
    d38e:	d007      	beq.n	d3a0 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    d390:	f7f8 faa0 	bl	58d4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    d394:	2810      	cmp	r0, #16
    d396:	d003      	beq.n	d3a0 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    d398:	f7f8 fb14 	bl	59c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x198>
    d39c:	2001      	movs	r0, #1
    d39e:	bd10      	pop	{r4, pc}
    d3a0:	2000      	movs	r0, #0
    d3a2:	bd10      	pop	{r4, pc}

0000d3a4 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    d3a4:	b510      	push	{r4, lr}
    d3a6:	f7f8 fac5 	bl	5934 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    d3aa:	2810      	cmp	r0, #16
    d3ac:	d003      	beq.n	d3b6 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    d3ae:	f7f8 fb51 	bl	5a54 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x228>
    d3b2:	2001      	movs	r0, #1
    d3b4:	bd10      	pop	{r4, pc}
    d3b6:	2000      	movs	r0, #0
    d3b8:	bd10      	pop	{r4, pc}

0000d3ba <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    d3ba:	b570      	push	{r4, r5, r6, lr}
    d3bc:	460e      	mov	r6, r1
    d3be:	b08c      	sub	sp, #48	; 0x30
    d3c0:	4614      	mov	r4, r2
    d3c2:	4601      	mov	r1, r0
    d3c4:	461d      	mov	r5, r3
    d3c6:	2210      	movs	r2, #16
    d3c8:	4668      	mov	r0, sp
    d3ca:	f000 f92d 	bl	d628 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d3ce:	2210      	movs	r2, #16
    d3d0:	4631      	mov	r1, r6
    d3d2:	a804      	add	r0, sp, #16
    d3d4:	f000 f928 	bl	d628 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d3d8:	4668      	mov	r0, sp
    d3da:	f7ff ff27 	bl	d22c <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d3de:	a908      	add	r1, sp, #32
    d3e0:	f04f 0210 	mov.w	r2, #16
    d3e4:	4628      	mov	r0, r5
    d3e6:	b11c      	cbz	r4, d3f0 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    d3e8:	f000 f91e 	bl	d628 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d3ec:	b00c      	add	sp, #48	; 0x30
    d3ee:	bd70      	pop	{r4, r5, r6, pc}
    d3f0:	f7fe feb7 	bl	c162 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d3f4:	e7fa      	b.n	d3ec <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000d3f6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    d3f6:	b510      	push	{r4, lr}
    d3f8:	460c      	mov	r4, r1
    d3fa:	2100      	movs	r1, #0
    d3fc:	f7ff fec3 	bl	d186 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    d400:	6060      	str	r0, [r4, #4]
    d402:	b118      	cbz	r0, d40c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    d404:	2001      	movs	r0, #1
    d406:	7020      	strb	r0, [r4, #0]
    d408:	2000      	movs	r0, #0
    d40a:	bd10      	pop	{r4, pc}
    d40c:	2002      	movs	r0, #2
    d40e:	bd10      	pop	{r4, pc}

0000d410 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    d410:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d414:	4348      	muls	r0, r1
    d416:	4770      	bx	lr

0000d418 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    d418:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d41c:	fbb0 f0f1 	udiv	r0, r0, r1
    d420:	b280      	uxth	r0, r0
    d422:	4770      	bx	lr

0000d424 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    d424:	b570      	push	{r4, r5, r6, lr}
    d426:	4604      	mov	r4, r0
    d428:	4290      	cmp	r0, r2
    d42a:	d20b      	bcs.n	d444 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    d42c:	1b10      	subs	r0, r2, r4
    d42e:	2864      	cmp	r0, #100	; 0x64
    d430:	d200      	bcs.n	d434 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    d432:	2064      	movs	r0, #100	; 0x64
    d434:	1825      	adds	r5, r4, r0
    d436:	428d      	cmp	r5, r1
    d438:	d803      	bhi.n	d442 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    d43a:	2104      	movs	r1, #4
    d43c:	f7f3 ff68 	bl	1310 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    d440:	b108      	cbz	r0, d446 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    d442:	4620      	mov	r0, r4
    d444:	bd70      	pop	{r4, r5, r6, pc}
    d446:	4628      	mov	r0, r5
    d448:	bd70      	pop	{r4, r5, r6, pc}

0000d44a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    d44a:	b510      	push	{r4, lr}
    d44c:	f1a2 030f 	sub.w	r3, r2, #15
    d450:	290c      	cmp	r1, #12
    d452:	d244      	bcs.n	d4de <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d454:	e8df f001 	tbb	[pc, r1]
    d458:	120d0806 	.word	0x120d0806
    d45c:	241c1815 	.word	0x241c1815
    d460:	312a4127 	.word	0x312a4127
    d464:	b3c2      	cbz	r2, d4d8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x8e>
    d466:	e03a      	b.n	d4de <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d468:	2a07      	cmp	r2, #7
    d46a:	d03a      	beq.n	d4e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d46c:	2a08      	cmp	r2, #8
    d46e:	d038      	beq.n	d4e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d470:	e035      	b.n	d4de <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d472:	2a0c      	cmp	r2, #12
    d474:	d035      	beq.n	d4e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d476:	2a0b      	cmp	r2, #11
    d478:	d033      	beq.n	d4e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d47a:	e030      	b.n	d4de <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d47c:	2a0d      	cmp	r2, #13
    d47e:	d030      	beq.n	d4e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d480:	e02d      	b.n	d4de <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d482:	2b0c      	cmp	r3, #12
    d484:	d92d      	bls.n	d4e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d486:	e02a      	b.n	d4de <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d488:	3a10      	subs	r2, #16
    d48a:	2a0b      	cmp	r2, #11
    d48c:	d929      	bls.n	d4e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d48e:	e026      	b.n	d4de <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d490:	2b03      	cmp	r3, #3
    d492:	d926      	bls.n	d4e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d494:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
    d498:	b308      	cbz	r0, d4de <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d49a:	2a1b      	cmp	r2, #27
    d49c:	d921      	bls.n	d4e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d49e:	e01e      	b.n	d4de <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d4a0:	2a04      	cmp	r2, #4
    d4a2:	d01e      	beq.n	d4e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d4a4:	e01b      	b.n	d4de <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d4a6:	2a06      	cmp	r2, #6
    d4a8:	d01b      	beq.n	d4e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d4aa:	e018      	b.n	d4de <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d4ac:	2a1c      	cmp	r2, #28
    d4ae:	d018      	beq.n	d4e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d4b0:	2a1d      	cmp	r2, #29
    d4b2:	d016      	beq.n	d4e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d4b4:	2a1e      	cmp	r2, #30
    d4b6:	d014      	beq.n	d4e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d4b8:	e011      	b.n	d4de <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d4ba:	2a1f      	cmp	r2, #31
    d4bc:	d011      	beq.n	d4e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d4be:	2a20      	cmp	r2, #32
    d4c0:	d00f      	beq.n	d4e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d4c2:	2a21      	cmp	r2, #33	; 0x21
    d4c4:	d00d      	beq.n	d4e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d4c6:	2a22      	cmp	r2, #34	; 0x22
    d4c8:	d00b      	beq.n	d4e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d4ca:	2a23      	cmp	r2, #35	; 0x23
    d4cc:	d009      	beq.n	d4e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d4ce:	2a24      	cmp	r2, #36	; 0x24
    d4d0:	d007      	beq.n	d4e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d4d2:	2a26      	cmp	r2, #38	; 0x26
    d4d4:	d005      	beq.n	d4e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d4d6:	e002      	b.n	d4de <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d4d8:	e003      	b.n	d4e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d4da:	2a0e      	cmp	r2, #14
    d4dc:	d001      	beq.n	d4e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d4de:	2000      	movs	r0, #0
    d4e0:	bd10      	pop	{r4, pc}
    d4e2:	2001      	movs	r0, #1
    d4e4:	bd10      	pop	{r4, pc}

0000d4e6 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    d4e6:	280c      	cmp	r0, #12
    d4e8:	d013      	beq.n	d512 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d4ea:	280b      	cmp	r0, #11
    d4ec:	d011      	beq.n	d512 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d4ee:	280d      	cmp	r0, #13
    d4f0:	d00f      	beq.n	d512 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d4f2:	281f      	cmp	r0, #31
    d4f4:	d00d      	beq.n	d512 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d4f6:	2820      	cmp	r0, #32
    d4f8:	d00b      	beq.n	d512 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d4fa:	2821      	cmp	r0, #33	; 0x21
    d4fc:	d009      	beq.n	d512 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d4fe:	2822      	cmp	r0, #34	; 0x22
    d500:	d007      	beq.n	d512 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d502:	2823      	cmp	r0, #35	; 0x23
    d504:	d005      	beq.n	d512 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d506:	2824      	cmp	r0, #36	; 0x24
    d508:	d003      	beq.n	d512 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d50a:	2826      	cmp	r0, #38	; 0x26
    d50c:	d001      	beq.n	d512 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d50e:	2000      	movs	r0, #0
    d510:	4770      	bx	lr
    d512:	2001      	movs	r0, #1
    d514:	4770      	bx	lr

0000d516 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    d516:	f011 0f0c 	tst.w	r1, #12
    d51a:	d016      	beq.n	d54a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    d51c:	074a      	lsls	r2, r1, #29
    d51e:	f44f 7116 	mov.w	r1, #600	; 0x258
    d522:	2a00      	cmp	r2, #0
    d524:	da02      	bge.n	d52c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    d526:	f04f 0210 	mov.w	r2, #16
    d52a:	e001      	b.n	d530 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    d52c:	f04f 0240 	mov.w	r2, #64	; 0x40
    d530:	da01      	bge.n	d536 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    d532:	f04f 0196 	mov.w	r1, #150	; 0x96
    d536:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    d53a:	eba0 0301 	sub.w	r3, r0, r1
    d53e:	4288      	cmp	r0, r1
    d540:	d910      	bls.n	d564 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    d542:	fb93 f0f2 	sdiv	r0, r3, r2
    d546:	b280      	uxth	r0, r0
    d548:	4770      	bx	lr
    d54a:	2902      	cmp	r1, #2
    d54c:	d002      	beq.n	d554 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x3e>
    d54e:	2870      	cmp	r0, #112	; 0x70
    d550:	d80a      	bhi.n	d568 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x52>
    d552:	e007      	b.n	d564 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    d554:	283c      	cmp	r0, #60	; 0x3c
    d556:	d905      	bls.n	d564 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    d558:	383c      	subs	r0, #60	; 0x3c
    d55a:	17c1      	asrs	r1, r0, #31
    d55c:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    d560:	1080      	asrs	r0, r0, #2
    d562:	e7f0      	b.n	d546 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    d564:	2000      	movs	r0, #0
    d566:	e7ee      	b.n	d546 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    d568:	3870      	subs	r0, #112	; 0x70
    d56a:	17c1      	asrs	r1, r0, #31
    d56c:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    d570:	10c0      	asrs	r0, r0, #3
    d572:	e7e8      	b.n	d546 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>

0000d574 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    d574:	6809      	ldr	r1, [r1, #0]
    d576:	f8c0 1062 	str.w	r1, [r0, #98]	; 0x62
    d57a:	4770      	bx	lr

0000d57c <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA>:
    d57c:	7e83      	ldrb	r3, [r0, #26]
    d57e:	b10b      	cbz	r3, d584 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x8>
    d580:	2b25      	cmp	r3, #37	; 0x25
    d582:	d901      	bls.n	d588 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0xc>
    d584:	2012      	movs	r0, #18
    d586:	4770      	bx	lr
    d588:	b12a      	cbz	r2, d596 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1a>
    d58a:	7c4b      	ldrb	r3, [r1, #17]
    d58c:	b12b      	cbz	r3, d59a <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1e>
    d58e:	2b01      	cmp	r3, #1
    d590:	d005      	beq.n	d59e <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x22>
    d592:	201f      	movs	r0, #31
    d594:	4770      	bx	lr
    d596:	2000      	movs	r0, #0
    d598:	4770      	bx	lr
    d59a:	f7f8 bb35 	b.w	5c08 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x1c>
    d59e:	f000 b8e8 	b.w	d772 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1e>

0000d5a2 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    d5a2:	07c1      	lsls	r1, r0, #31
    d5a4:	d001      	beq.n	d5aa <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    d5a6:	2001      	movs	r0, #1
    d5a8:	4770      	bx	lr
    d5aa:	0781      	lsls	r1, r0, #30
    d5ac:	d501      	bpl.n	d5b2 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    d5ae:	2002      	movs	r0, #2
    d5b0:	4770      	bx	lr
    d5b2:	0740      	lsls	r0, r0, #29
    d5b4:	d501      	bpl.n	d5ba <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    d5b6:	2008      	movs	r0, #8
    d5b8:	4770      	bx	lr
    d5ba:	2000      	movs	r0, #0
    d5bc:	4770      	bx	lr

0000d5be <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    d5be:	b510      	push	{r4, lr}
    d5c0:	f640 12c4 	movw	r2, #2500	; 0x9c4
    d5c4:	2901      	cmp	r1, #1
    d5c6:	d006      	beq.n	d5d6 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    d5c8:	2902      	cmp	r1, #2
    d5ca:	d005      	beq.n	d5d8 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    d5cc:	f240 512a 	movw	r1, #1322	; 0x52a
    d5d0:	2029      	movs	r0, #41	; 0x29
    d5d2:	f7f6 fbc3 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d5d6:	b108      	cbz	r0, d5dc <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    d5d8:	4610      	mov	r0, r2
    d5da:	bd10      	pop	{r4, pc}
    d5dc:	f240 40e2 	movw	r0, #1250	; 0x4e2
    d5e0:	bd10      	pop	{r4, pc}

0000d5e2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    d5e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d5e6:	460c      	mov	r4, r1
    d5e8:	4605      	mov	r5, r0
    d5ea:	68c6      	ldr	r6, [r0, #12]
    d5ec:	f7f4 fb06 	bl	1bfc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    d5f0:	b198      	cbz	r0, d61a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
    d5f2:	b1bc      	cbz	r4, d624 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    d5f4:	4630      	mov	r0, r6
    d5f6:	68e9      	ldr	r1, [r5, #12]
    d5f8:	f7f3 ff9c 	bl	1534 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    d5fc:	2800      	cmp	r0, #0
    d5fe:	dd11      	ble.n	d624 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    d600:	4420      	add	r0, r4
    d602:	1e40      	subs	r0, r0, #1
    d604:	fbb0 f7f4 	udiv	r7, r0, r4
    d608:	fb07 f104 	mul.w	r1, r7, r4
    d60c:	4630      	mov	r0, r6
    d60e:	f7f3 ff5b 	bl	14c8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    d612:	60e8      	str	r0, [r5, #12]
    d614:	4638      	mov	r0, r7
    d616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d61a:	f240 31af 	movw	r1, #943	; 0x3af
    d61e:	2029      	movs	r0, #41	; 0x29
    d620:	f7f6 fb9c 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d624:	2000      	movs	r0, #0
    d626:	e7f6      	b.n	d616 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>

0000d628 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    d628:	b530      	push	{r4, r5, lr}
    d62a:	4613      	mov	r3, r2
    d62c:	e006      	b.n	d63c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    d62e:	18cc      	adds	r4, r1, r3
    d630:	1ad5      	subs	r5, r2, r3
    d632:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    d636:	1e5b      	subs	r3, r3, #1
    d638:	5544      	strb	r4, [r0, r5]
    d63a:	b2db      	uxtb	r3, r3
    d63c:	2b00      	cmp	r3, #0
    d63e:	d1f6      	bne.n	d62e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    d640:	bd30      	pop	{r4, r5, pc}

0000d642 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    d642:	b538      	push	{r3, r4, r5, lr}
    d644:	4605      	mov	r5, r0
    d646:	460c      	mov	r4, r1
    d648:	4668      	mov	r0, sp
    d64a:	f7fd fe09 	bl	b260 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    d64e:	b308      	cbz	r0, d694 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x52>
    d650:	f99d 0000 	ldrsb.w	r0, [sp]
    d654:	7260      	strb	r0, [r4, #9]
    d656:	7f21      	ldrb	r1, [r4, #28]
    d658:	72a1      	strb	r1, [r4, #10]
    d65a:	f994 100b 	ldrsb.w	r1, [r4, #11]
    d65e:	2200      	movs	r2, #0
    d660:	1a41      	subs	r1, r0, r1
    d662:	d500      	bpl.n	d666 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x24>
    d664:	4249      	negs	r1, r1
    d666:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    d66a:	428b      	cmp	r3, r1
    d66c:	dc10      	bgt.n	d690 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x4e>
    d66e:	2bff      	cmp	r3, #255	; 0xff
    d670:	d00e      	beq.n	d690 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x4e>
    d672:	7b21      	ldrb	r1, [r4, #12]
    d674:	1c49      	adds	r1, r1, #1
    d676:	b2c9      	uxtb	r1, r1
    d678:	7321      	strb	r1, [r4, #12]
    d67a:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
    d67e:	4299      	cmp	r1, r3
    d680:	d802      	bhi.n	d688 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x46>
    d682:	7ae1      	ldrb	r1, [r4, #11]
    d684:	297f      	cmp	r1, #127	; 0x7f
    d686:	d103      	bne.n	d690 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x4e>
    d688:	72e0      	strb	r0, [r4, #11]
    d68a:	2000      	movs	r0, #0
    d68c:	7320      	strb	r0, [r4, #12]
    d68e:	2201      	movs	r2, #1
    d690:	4610      	mov	r0, r2
    d692:	bd38      	pop	{r3, r4, r5, pc}
    d694:	207f      	movs	r0, #127	; 0x7f
    d696:	7260      	strb	r0, [r4, #9]
    d698:	2000      	movs	r0, #0
    d69a:	bd38      	pop	{r3, r4, r5, pc}

0000d69c <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    d69c:	2300      	movs	r3, #0
    d69e:	6203      	str	r3, [r0, #32]
    d6a0:	8502      	strh	r2, [r0, #40]	; 0x28
    d6a2:	f240 2371 	movw	r3, #625	; 0x271
    d6a6:	435a      	muls	r2, r3
    d6a8:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    d6ac:	1e52      	subs	r2, r2, #1
    d6ae:	fbb2 f1f1 	udiv	r1, r2, r1
    d6b2:	6241      	str	r1, [r0, #36]	; 0x24
    d6b4:	4770      	bx	lr

0000d6b6 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    d6b6:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    d6ba:	4607      	mov	r7, r0
    d6bc:	4690      	mov	r8, r2
    d6be:	468b      	mov	fp, r1
    d6c0:	2601      	movs	r6, #1
    d6c2:	4608      	mov	r0, r1
    d6c4:	f000 f93c 	bl	d940 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    d6c8:	4682      	mov	sl, r0
    d6ca:	4658      	mov	r0, fp
    d6cc:	f000 f944 	bl	d958 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    d6d0:	4681      	mov	r9, r0
    d6d2:	f7ff ff66 	bl	d5a2 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    d6d6:	4604      	mov	r4, r0
    d6d8:	4650      	mov	r0, sl
    d6da:	f7ff ff62 	bl	d5a2 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    d6de:	4605      	mov	r5, r0
    d6e0:	ea54 0005 	orrs.w	r0, r4, r5
    d6e4:	d100      	bne.n	d6e8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    d6e6:	2600      	movs	r6, #0
    d6e8:	f7fd f85c 	bl	a7a4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    d6ec:	ea10 0f09 	tst.w	r0, r9
    d6f0:	d100      	bne.n	d6f4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    d6f2:	2400      	movs	r4, #0
    d6f4:	f7fd f856 	bl	a7a4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    d6f8:	ea10 0f0a 	tst.w	r0, sl
    d6fc:	d100      	bne.n	d700 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    d6fe:	2500      	movs	r5, #0
    d700:	f897 0066 	ldrb.w	r0, [r7, #102]	; 0x66
    d704:	42a0      	cmp	r0, r4
    d706:	d100      	bne.n	d70a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    d708:	2400      	movs	r4, #0
    d70a:	f888 4000 	strb.w	r4, [r8]
    d70e:	f897 0067 	ldrb.w	r0, [r7, #103]	; 0x67
    d712:	42a8      	cmp	r0, r5
    d714:	d100      	bne.n	d718 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    d716:	2500      	movs	r5, #0
    d718:	f888 5001 	strb.w	r5, [r8, #1]
    d71c:	b974      	cbnz	r4, d73c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    d71e:	b96d      	cbnz	r5, d73c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    d720:	4658      	mov	r0, fp
    d722:	f000 f917 	bl	d954 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    d726:	f8b7 1074 	ldrh.w	r1, [r7, #116]	; 0x74
    d72a:	1a40      	subs	r0, r0, r1
    d72c:	b200      	sxth	r0, r0
    d72e:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    d732:	4288      	cmp	r0, r1
    d734:	dc01      	bgt.n	d73a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    d736:	2800      	cmp	r0, #0
    d738:	dc00      	bgt.n	d73c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    d73a:	2600      	movs	r6, #0
    d73c:	4630      	mov	r0, r6
    d73e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000d742 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    d742:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d746:	4348      	muls	r0, r1
    d748:	4770      	bx	lr

0000d74a <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    d74a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d74e:	fb10 f001 	smulbb	r0, r0, r1
    d752:	4770      	bx	lr

0000d754 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    d754:	b510      	push	{r4, lr}
    d756:	2300      	movs	r3, #0
    d758:	461a      	mov	r2, r3
    d75a:	e003      	b.n	d764 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    d75c:	5c84      	ldrb	r4, [r0, r2]
    d75e:	4323      	orrs	r3, r4
    d760:	1c52      	adds	r2, r2, #1
    d762:	b2d2      	uxtb	r2, r2
    d764:	428a      	cmp	r2, r1
    d766:	d3f9      	bcc.n	d75c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    d768:	b10b      	cbz	r3, d76e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    d76a:	2000      	movs	r0, #0
    d76c:	bd10      	pop	{r4, pc}
    d76e:	2001      	movs	r0, #1
    d770:	bd10      	pop	{r4, pc}
    d772:	b5f0      	push	{r4, r5, r6, r7, lr}
    d774:	7d0c      	ldrb	r4, [r1, #20]
    d776:	7c8b      	ldrb	r3, [r1, #18]
    d778:	7ccd      	ldrb	r5, [r1, #19]
    d77a:	405c      	eors	r4, r3
    d77c:	7d4b      	ldrb	r3, [r1, #21]
    d77e:	8882      	ldrh	r2, [r0, #4]
    d780:	406b      	eors	r3, r5
    d782:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    d786:	7e86      	ldrb	r6, [r0, #26]
    d788:	4062      	eors	r2, r4
    d78a:	2300      	movs	r3, #0
    d78c:	b2d5      	uxtb	r5, r2
    d78e:	0a12      	lsrs	r2, r2, #8
    d790:	fa95 f5a5 	rbit	r5, r5
    d794:	fa92 f2a2 	rbit	r2, r2
    d798:	0e2d      	lsrs	r5, r5, #24
    d79a:	0e12      	lsrs	r2, r2, #24
    d79c:	ea45 2202 	orr.w	r2, r5, r2, lsl #8
    d7a0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
    d7a4:	1c5b      	adds	r3, r3, #1
    d7a6:	4422      	add	r2, r4
    d7a8:	b2db      	uxtb	r3, r3
    d7aa:	b292      	uxth	r2, r2
    d7ac:	2b03      	cmp	r3, #3
    d7ae:	d3ed      	bcc.n	d78c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x38>
    d7b0:	4062      	eors	r2, r4
    d7b2:	2325      	movs	r3, #37	; 0x25
    d7b4:	fbb2 f4f3 	udiv	r4, r2, r3
    d7b8:	fb03 2314 	mls	r3, r3, r4, r2
    d7bc:	eb01 04d3 	add.w	r4, r1, r3, lsr #3
    d7c0:	76c3      	strb	r3, [r0, #27]
    d7c2:	f003 0707 	and.w	r7, r3, #7
    d7c6:	7b24      	ldrb	r4, [r4, #12]
    d7c8:	2501      	movs	r5, #1
    d7ca:	fa05 f707 	lsl.w	r7, r5, r7
    d7ce:	423c      	tst	r4, r7
    d7d0:	d001      	beq.n	d7d6 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x82>
    d7d2:	7703      	strb	r3, [r0, #28]
    d7d4:	e01a      	b.n	d80c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xb8>
    d7d6:	4356      	muls	r6, r2
    d7d8:	0c32      	lsrs	r2, r6, #16
    d7da:	1c52      	adds	r2, r2, #1
    d7dc:	b2d2      	uxtb	r2, r2
    d7de:	2400      	movs	r4, #0
    d7e0:	1903      	adds	r3, r0, r4
    d7e2:	7d5b      	ldrb	r3, [r3, #21]
    d7e4:	4293      	cmp	r3, r2
    d7e6:	d313      	bcc.n	d810 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xbc>
    d7e8:	2300      	movs	r3, #0
    d7ea:	190e      	adds	r6, r1, r4
    d7ec:	7b36      	ldrb	r6, [r6, #12]
    d7ee:	fa05 f703 	lsl.w	r7, r5, r3
    d7f2:	423e      	tst	r6, r7
    d7f4:	d001      	beq.n	d7fa <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xa6>
    d7f6:	1e52      	subs	r2, r2, #1
    d7f8:	b2d2      	uxtb	r2, r2
    d7fa:	b122      	cbz	r2, d806 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xb2>
    d7fc:	1c5b      	adds	r3, r3, #1
    d7fe:	b2db      	uxtb	r3, r3
    d800:	2b08      	cmp	r3, #8
    d802:	d3f4      	bcc.n	d7ee <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x9a>
    d804:	e006      	b.n	d814 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xc0>
    d806:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
    d80a:	7701      	strb	r1, [r0, #28]
    d80c:	2000      	movs	r0, #0
    d80e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d810:	1ad2      	subs	r2, r2, r3
    d812:	b2d2      	uxtb	r2, r2
    d814:	1c64      	adds	r4, r4, #1
    d816:	b2e4      	uxtb	r4, r4
    d818:	2c05      	cmp	r4, #5
    d81a:	d3e1      	bcc.n	d7e0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8c>
    d81c:	201f      	movs	r0, #31
    d81e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d820:	b570      	push	{r4, r5, r6, lr}
    d822:	4605      	mov	r5, r0
    d824:	7c08      	ldrb	r0, [r1, #16]
    d826:	460e      	mov	r6, r1
    d828:	f000 001f 	and.w	r0, r0, #31
    d82c:	7408      	strb	r0, [r1, #16]
    d82e:	2000      	movs	r0, #0
    d830:	76a8      	strb	r0, [r5, #26]
    d832:	4604      	mov	r4, r0
    d834:	1930      	adds	r0, r6, r4
    d836:	7b00      	ldrb	r0, [r0, #12]
    d838:	f000 f811 	bl	d85e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10a>
    d83c:	1929      	adds	r1, r5, r4
    d83e:	1c64      	adds	r4, r4, #1
    d840:	7548      	strb	r0, [r1, #21]
    d842:	7ea9      	ldrb	r1, [r5, #26]
    d844:	b2e4      	uxtb	r4, r4
    d846:	4408      	add	r0, r1
    d848:	76a8      	strb	r0, [r5, #26]
    d84a:	2c05      	cmp	r4, #5
    d84c:	d3f2      	bcc.n	d834 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xe0>
    d84e:	b2c0      	uxtb	r0, r0
    d850:	2825      	cmp	r0, #37	; 0x25
    d852:	d903      	bls.n	d85c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x108>
    d854:	21bf      	movs	r1, #191	; 0xbf
    d856:	2029      	movs	r0, #41	; 0x29
    d858:	f7f6 fa80 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d85c:	bd70      	pop	{r4, r5, r6, pc}
    d85e:	f000 0101 	and.w	r1, r0, #1
    d862:	0840      	lsrs	r0, r0, #1
    d864:	f000 0201 	and.w	r2, r0, #1
    d868:	4411      	add	r1, r2
    d86a:	0840      	lsrs	r0, r0, #1
    d86c:	f000 0201 	and.w	r2, r0, #1
    d870:	4411      	add	r1, r2
    d872:	0840      	lsrs	r0, r0, #1
    d874:	f000 0201 	and.w	r2, r0, #1
    d878:	4411      	add	r1, r2
    d87a:	0840      	lsrs	r0, r0, #1
    d87c:	f000 0201 	and.w	r2, r0, #1
    d880:	4411      	add	r1, r2
    d882:	0840      	lsrs	r0, r0, #1
    d884:	f000 0201 	and.w	r2, r0, #1
    d888:	4411      	add	r1, r2
    d88a:	0840      	lsrs	r0, r0, #1
    d88c:	f000 0201 	and.w	r2, r0, #1
    d890:	4411      	add	r1, r2
    d892:	eb01 0050 	add.w	r0, r1, r0, lsr #1
    d896:	4770      	bx	lr

0000d898 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>:
    d898:	b570      	push	{r4, r5, r6, lr}
    d89a:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    d89e:	f8b0 5009 	ldrh.w	r5, [r0, #9]
    d8a2:	f830 4f05 	ldrh.w	r4, [r0, #5]!
    d8a6:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    d8aa:	88c0      	ldrh	r0, [r0, #6]
    d8ac:	b131      	cbz	r1, d8bc <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    d8ae:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    d8b2:	d903      	bls.n	d8bc <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    d8b4:	f640 5107 	movw	r1, #3335	; 0xd07
    d8b8:	428a      	cmp	r2, r1
    d8ba:	d90b      	bls.n	d8d4 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x3c>
    d8bc:	1f91      	subs	r1, r2, #6
    d8be:	f640 467a 	movw	r6, #3194	; 0xc7a
    d8c2:	42b1      	cmp	r1, r6
    d8c4:	d80e      	bhi.n	d8e4 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d8c6:	b16b      	cbz	r3, d8e4 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d8c8:	2b08      	cmp	r3, #8
    d8ca:	d80b      	bhi.n	d8e4 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d8cc:	4293      	cmp	r3, r2
    d8ce:	d209      	bcs.n	d8e4 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d8d0:	4294      	cmp	r4, r2
    d8d2:	d807      	bhi.n	d8e4 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d8d4:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    d8d8:	d204      	bcs.n	d8e4 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d8da:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    d8de:	d801      	bhi.n	d8e4 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d8e0:	2001      	movs	r0, #1
    d8e2:	bd70      	pop	{r4, r5, r6, pc}
    d8e4:	2000      	movs	r0, #0
    d8e6:	bd70      	pop	{r4, r5, r6, pc}

0000d8e8 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>:
    d8e8:	6842      	ldr	r2, [r0, #4]
    d8ea:	600a      	str	r2, [r1, #0]
    d8ec:	7a00      	ldrb	r0, [r0, #8]
    d8ee:	7108      	strb	r0, [r1, #4]
    d8f0:	4770      	bx	lr

0000d8f2 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>:
    d8f2:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    d8f6:	4770      	bx	lr

0000d8f8 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>:
    d8f8:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    d8fc:	4770      	bx	lr

0000d8fe <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>:
    d8fe:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    d902:	4770      	bx	lr

0000d904 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>:
    d904:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    d908:	4770      	bx	lr

0000d90a <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>:
    d90a:	8980      	ldrh	r0, [r0, #12]
    d90c:	8008      	strh	r0, [r1, #0]
    d90e:	4770      	bx	lr

0000d910 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>:
    d910:	f8d0 0016 	ldr.w	r0, [r0, #22]
    d914:	6008      	str	r0, [r1, #0]
    d916:	4770      	bx	lr

0000d918 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>:
    d918:	6842      	ldr	r2, [r0, #4]
    d91a:	600a      	str	r2, [r1, #0]
    d91c:	6880      	ldr	r0, [r0, #8]
    d91e:	6048      	str	r0, [r1, #4]
    d920:	4770      	bx	lr

0000d922 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>:
    d922:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    d926:	600a      	str	r2, [r1, #0]
    d928:	6840      	ldr	r0, [r0, #4]
    d92a:	6048      	str	r0, [r1, #4]
    d92c:	4770      	bx	lr

0000d92e <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>:
    d92e:	6842      	ldr	r2, [r0, #4]
    d930:	600a      	str	r2, [r1, #0]
    d932:	6880      	ldr	r0, [r0, #8]
    d934:	6048      	str	r0, [r1, #4]
    d936:	4770      	bx	lr

0000d938 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
    d938:	7800      	ldrb	r0, [r0, #0]
    d93a:	f000 0003 	and.w	r0, r0, #3
    d93e:	4770      	bx	lr

0000d940 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>:
    d940:	7900      	ldrb	r0, [r0, #4]
    d942:	4770      	bx	lr

0000d944 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
    d944:	8880      	ldrh	r0, [r0, #4]
    d946:	4770      	bx	lr

0000d948 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
    d948:	88c0      	ldrh	r0, [r0, #6]
    d94a:	4770      	bx	lr

0000d94c <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
    d94c:	8900      	ldrh	r0, [r0, #8]
    d94e:	4770      	bx	lr

0000d950 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
    d950:	8940      	ldrh	r0, [r0, #10]
    d952:	4770      	bx	lr

0000d954 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>:
    d954:	88c0      	ldrh	r0, [r0, #6]
    d956:	4770      	bx	lr

0000d958 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>:
    d958:	7940      	ldrb	r0, [r0, #5]
    d95a:	4770      	bx	lr

0000d95c <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
    d95c:	7900      	ldrb	r0, [r0, #4]
    d95e:	4770      	bx	lr

0000d960 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
    d960:	7900      	ldrb	r0, [r0, #4]
    d962:	4770      	bx	lr

0000d964 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
    d964:	8901      	ldrh	r1, [r0, #8]
    d966:	291b      	cmp	r1, #27
    d968:	d30c      	bcc.n	d984 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    d96a:	8941      	ldrh	r1, [r0, #10]
    d96c:	f44f 72a4 	mov.w	r2, #328	; 0x148
    d970:	4291      	cmp	r1, r2
    d972:	d307      	bcc.n	d984 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    d974:	8881      	ldrh	r1, [r0, #4]
    d976:	291b      	cmp	r1, #27
    d978:	d304      	bcc.n	d984 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    d97a:	88c0      	ldrh	r0, [r0, #6]
    d97c:	4290      	cmp	r0, r2
    d97e:	d301      	bcc.n	d984 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    d980:	2001      	movs	r0, #1
    d982:	4770      	bx	lr
    d984:	2000      	movs	r0, #0
    d986:	4770      	bx	lr

0000d988 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    d988:	b510      	push	{r4, lr}
    d98a:	29fb      	cmp	r1, #251	; 0xfb
    d98c:	d904      	bls.n	d998 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    d98e:	f240 515b 	movw	r1, #1371	; 0x55b
    d992:	202a      	movs	r0, #42	; 0x2a
    d994:	f7f6 f9e2 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d998:	7041      	strb	r1, [r0, #1]
    d99a:	bd10      	pop	{r4, pc}

0000d99c <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
    d99c:	7901      	ldrb	r1, [r0, #4]
    d99e:	0749      	lsls	r1, r1, #29
    d9a0:	d004      	beq.n	d9ac <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    d9a2:	7940      	ldrb	r0, [r0, #5]
    d9a4:	0740      	lsls	r0, r0, #29
    d9a6:	d001      	beq.n	d9ac <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    d9a8:	2001      	movs	r0, #1
    d9aa:	4770      	bx	lr
    d9ac:	2000      	movs	r0, #0
    d9ae:	4770      	bx	lr

0000d9b0 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
    d9b0:	7900      	ldrb	r0, [r0, #4]
    d9b2:	4770      	bx	lr

0000d9b4 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
    d9b4:	7940      	ldrb	r0, [r0, #5]
    d9b6:	4770      	bx	lr

0000d9b8 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    d9b8:	7101      	strb	r1, [r0, #4]
    d9ba:	4770      	bx	lr

0000d9bc <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    d9bc:	7141      	strb	r1, [r0, #5]
    d9be:	4770      	bx	lr

0000d9c0 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>:
    d9c0:	b510      	push	{r4, lr}
    d9c2:	2a1b      	cmp	r2, #27
    d9c4:	d904      	bls.n	d9d0 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA+0x10>
    d9c6:	f240 31c2 	movw	r1, #962	; 0x3c2
    d9ca:	202a      	movs	r0, #42	; 0x2a
    d9cc:	f7f6 f9c6 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d9d0:	7042      	strb	r2, [r0, #1]
    d9d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d9d6:	1cc0      	adds	r0, r0, #3
    d9d8:	f7fe bbc3 	b.w	c162 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000d9dc <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>:
    d9dc:	6809      	ldr	r1, [r1, #0]
    d9de:	60c1      	str	r1, [r0, #12]
    d9e0:	4770      	bx	lr

0000d9e2 <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>:
    d9e2:	680a      	ldr	r2, [r1, #0]
    d9e4:	6042      	str	r2, [r0, #4]
    d9e6:	6849      	ldr	r1, [r1, #4]
    d9e8:	6081      	str	r1, [r0, #8]
    d9ea:	4770      	bx	lr

0000d9ec <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    d9ec:	680a      	ldr	r2, [r1, #0]
    d9ee:	6042      	str	r2, [r0, #4]
    d9f0:	6849      	ldr	r1, [r1, #4]
    d9f2:	6081      	str	r1, [r0, #8]
    d9f4:	4770      	bx	lr

0000d9f6 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>:
    d9f6:	680a      	ldr	r2, [r1, #0]
    d9f8:	6042      	str	r2, [r0, #4]
    d9fa:	6849      	ldr	r1, [r1, #4]
    d9fc:	6081      	str	r1, [r0, #8]
    d9fe:	4770      	bx	lr

0000da00 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    da00:	7802      	ldrb	r2, [r0, #0]
    da02:	f001 0103 	and.w	r1, r1, #3
    da06:	f022 0203 	bic.w	r2, r2, #3
    da0a:	430a      	orrs	r2, r1
    da0c:	7002      	strb	r2, [r0, #0]
    da0e:	4770      	bx	lr

0000da10 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    da10:	7101      	strb	r1, [r0, #4]
    da12:	0a09      	lsrs	r1, r1, #8
    da14:	7141      	strb	r1, [r0, #5]
    da16:	4770      	bx	lr

0000da18 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    da18:	7181      	strb	r1, [r0, #6]
    da1a:	0a09      	lsrs	r1, r1, #8
    da1c:	71c1      	strb	r1, [r0, #7]
    da1e:	4770      	bx	lr

0000da20 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    da20:	7201      	strb	r1, [r0, #8]
    da22:	0a09      	lsrs	r1, r1, #8
    da24:	7241      	strb	r1, [r0, #9]
    da26:	4770      	bx	lr

0000da28 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    da28:	7281      	strb	r1, [r0, #10]
    da2a:	0a09      	lsrs	r1, r1, #8
    da2c:	72c1      	strb	r1, [r0, #11]
    da2e:	4770      	bx	lr

0000da30 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>:
    da30:	b570      	push	{r4, r5, r6, lr}
    da32:	7802      	ldrb	r2, [r0, #0]
    da34:	f002 020f 	and.w	r2, r2, #15
    da38:	2a03      	cmp	r2, #3
    da3a:	d02c      	beq.n	da96 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x66>
    da3c:	2a05      	cmp	r2, #5
    da3e:	d12d      	bne.n	da9c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    da40:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    da44:	f8b0 501b 	ldrh.w	r5, [r0, #27]
    da48:	f8b0 4017 	ldrh.w	r4, [r0, #23]
    da4c:	7d83      	ldrb	r3, [r0, #22]
    da4e:	b141      	cbz	r1, da62 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x32>
    da50:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    da54:	d905      	bls.n	da62 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x32>
    da56:	f640 5107 	movw	r1, #3335	; 0xd07
    da5a:	428a      	cmp	r2, r1
    da5c:	d801      	bhi.n	da62 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x32>
    da5e:	2101      	movs	r1, #1
    da60:	e000      	b.n	da64 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x34>
    da62:	2100      	movs	r1, #0
    da64:	7846      	ldrb	r6, [r0, #1]
    da66:	2e22      	cmp	r6, #34	; 0x22
    da68:	d118      	bne.n	da9c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    da6a:	b959      	cbnz	r1, da84 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x54>
    da6c:	1f91      	subs	r1, r2, #6
    da6e:	f640 467a 	movw	r6, #3194	; 0xc7a
    da72:	42b1      	cmp	r1, r6
    da74:	d812      	bhi.n	da9c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    da76:	b18b      	cbz	r3, da9c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    da78:	2b08      	cmp	r3, #8
    da7a:	d80f      	bhi.n	da9c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    da7c:	4293      	cmp	r3, r2
    da7e:	d20d      	bcs.n	da9c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    da80:	4294      	cmp	r4, r2
    da82:	d80b      	bhi.n	da9c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    da84:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    da88:	d208      	bcs.n	da9c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    da8a:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    da8e:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    da92:	d905      	bls.n	daa0 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x70>
    da94:	e002      	b.n	da9c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    da96:	7840      	ldrb	r0, [r0, #1]
    da98:	280c      	cmp	r0, #12
    da9a:	d001      	beq.n	daa0 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x70>
    da9c:	2000      	movs	r0, #0
    da9e:	bd70      	pop	{r4, r5, r6, pc}
    daa0:	2001      	movs	r0, #1
    daa2:	bd70      	pop	{r4, r5, r6, pc}

0000daa4 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>:
    daa4:	b570      	push	{r4, r5, r6, lr}
    daa6:	4614      	mov	r4, r2
    daa8:	4605      	mov	r5, r0
    daaa:	2a1f      	cmp	r2, #31
    daac:	d903      	bls.n	dab6 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I+0x12>
    daae:	21b2      	movs	r1, #178	; 0xb2
    dab0:	202a      	movs	r0, #42	; 0x2a
    dab2:	f7f6 f953 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dab6:	f105 0009 	add.w	r0, r5, #9
    daba:	f7fe fb52 	bl	c162 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dabe:	1da4      	adds	r4, r4, #6
    dac0:	706c      	strb	r4, [r5, #1]
    dac2:	bd70      	pop	{r4, r5, r6, pc}

0000dac4 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    dac4:	b510      	push	{r4, lr}
    dac6:	7802      	ldrb	r2, [r0, #0]
    dac8:	f001 030f 	and.w	r3, r1, #15
    dacc:	f022 020f 	bic.w	r2, r2, #15
    dad0:	431a      	orrs	r2, r3
    dad2:	7002      	strb	r2, [r0, #0]
    dad4:	2907      	cmp	r1, #7
    dad6:	d20c      	bcs.n	daf2 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    dad8:	e8df f001 	tbb	[pc, r1]
    dadc:	06040604 	.word	0x06040604
    dae0:	00040804 	.word	0x00040804
    dae4:	2106      	movs	r1, #6
    dae6:	e002      	b.n	daee <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    dae8:	210c      	movs	r1, #12
    daea:	e000      	b.n	daee <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    daec:	2122      	movs	r1, #34	; 0x22
    daee:	7041      	strb	r1, [r0, #1]
    daf0:	bd10      	pop	{r4, pc}
    daf2:	216e      	movs	r1, #110	; 0x6e
    daf4:	202a      	movs	r0, #42	; 0x2a
    daf6:	f7f6 f931 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000dafa <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    dafa:	680a      	ldr	r2, [r1, #0]
    dafc:	f840 2f09 	str.w	r2, [r0, #9]!
    db00:	8889      	ldrh	r1, [r1, #4]
    db02:	8081      	strh	r1, [r0, #4]
    db04:	4770      	bx	lr

0000db06 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    db06:	7802      	ldrb	r2, [r0, #0]
    db08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    db0c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    db10:	7002      	strb	r2, [r0, #0]
    db12:	4770      	bx	lr

0000db14 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    db14:	680a      	ldr	r2, [r1, #0]
    db16:	f840 2f03 	str.w	r2, [r0, #3]!
    db1a:	8889      	ldrh	r1, [r1, #4]
    db1c:	8081      	strh	r1, [r0, #4]
    db1e:	4770      	bx	lr

0000db20 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    db20:	7802      	ldrb	r2, [r0, #0]
    db22:	2340      	movs	r3, #64	; 0x40
    db24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    db28:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    db2c:	430a      	orrs	r2, r1
    db2e:	7002      	strb	r2, [r0, #0]
    db30:	4770      	bx	lr

0000db32 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>:
    db32:	b570      	push	{r4, r5, r6, lr}
    db34:	4614      	mov	r4, r2
    db36:	4605      	mov	r5, r0
    db38:	2a1f      	cmp	r2, #31
    db3a:	d903      	bls.n	db44 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x12>
    db3c:	21d4      	movs	r1, #212	; 0xd4
    db3e:	202a      	movs	r0, #42	; 0x2a
    db40:	f7f6 f90c 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    db44:	f105 0009 	add.w	r0, r5, #9
    db48:	f7fe fb0b 	bl	c162 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    db4c:	1da4      	adds	r4, r4, #6
    db4e:	706c      	strb	r4, [r5, #1]
    db50:	bd70      	pop	{r4, r5, r6, pc}

0000db52 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
    db52:	2101      	movs	r1, #1
    db54:	f000 b853 	b.w	dbfe <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa6>

0000db58 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    db58:	6841      	ldr	r1, [r0, #4]
    db5a:	2200      	movs	r2, #0
    db5c:	f891 30fa 	ldrb.w	r3, [r1, #250]	; 0xfa
    db60:	2b00      	cmp	r3, #0
    db62:	d004      	beq.n	db6e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    db64:	f881 20fa 	strb.w	r2, [r1, #250]	; 0xfa
    db68:	6840      	ldr	r0, [r0, #4]
    db6a:	f000 bc63 	b.w	e434 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY>
    db6e:	4770      	bx	lr
    db70:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    db74:	460e      	mov	r6, r1
    db76:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    db7a:	4617      	mov	r7, r2
    db7c:	39ff      	subs	r1, #255	; 0xff
    db7e:	d014      	beq.n	dbaa <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x52>
    db80:	8030      	strh	r0, [r6, #0]
    db82:	2100      	movs	r1, #0
    db84:	7171      	strb	r1, [r6, #5]
    db86:	f7f6 fcf9 	bl	457c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    db8a:	4604      	mov	r4, r0
    db8c:	f7ff f91e 	bl	cdcc <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    db90:	0005      	movs	r5, r0
    db92:	d00a      	beq.n	dbaa <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x52>
    db94:	4620      	mov	r0, r4
    db96:	4629      	mov	r1, r5
    db98:	aa01      	add	r2, sp, #4
    db9a:	f7ff f93a 	bl	ce12 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    db9e:	8070      	strh	r0, [r6, #2]
    dba0:	b130      	cbz	r0, dbb0 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x58>
    dba2:	28fb      	cmp	r0, #251	; 0xfb
    dba4:	d906      	bls.n	dbb4 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x5c>
    dba6:	21c9      	movs	r1, #201	; 0xc9
    dba8:	e026      	b.n	dbf8 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    dbaa:	2000      	movs	r0, #0
    dbac:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    dbb0:	21c8      	movs	r1, #200	; 0xc8
    dbb2:	e021      	b.n	dbf8 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    dbb4:	9801      	ldr	r0, [sp, #4]
    dbb6:	f7ff febf 	bl	d938 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    dbba:	2801      	cmp	r0, #1
    dbbc:	d003      	beq.n	dbc6 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x6e>
    dbbe:	2802      	cmp	r0, #2
    dbc0:	d001      	beq.n	dbc6 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x6e>
    dbc2:	21d8      	movs	r1, #216	; 0xd8
    dbc4:	e018      	b.n	dbf8 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    dbc6:	7130      	strb	r0, [r6, #4]
    dbc8:	4629      	mov	r1, r5
    dbca:	8873      	ldrh	r3, [r6, #2]
    dbcc:	2503      	movs	r5, #3
    dbce:	4620      	mov	r0, r4
    dbd0:	463a      	mov	r2, r7
    dbd2:	9500      	str	r5, [sp, #0]
    dbd4:	f7fe ffef 	bl	cbb6 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    dbd8:	4620      	mov	r0, r4
    dbda:	60b7      	str	r7, [r6, #8]
    dbdc:	f7ff f8a5 	bl	cd2a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    dbe0:	b138      	cbz	r0, dbf2 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x9a>
    dbe2:	2100      	movs	r1, #0
    dbe4:	4620      	mov	r0, r4
    dbe6:	460a      	mov	r2, r1
    dbe8:	f7ff f9e9 	bl	cfbe <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    dbec:	b118      	cbz	r0, dbf6 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x9e>
    dbee:	2001      	movs	r0, #1
    dbf0:	e7dc      	b.n	dbac <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x54>
    dbf2:	21e8      	movs	r1, #232	; 0xe8
    dbf4:	e000      	b.n	dbf8 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    dbf6:	21ed      	movs	r1, #237	; 0xed
    dbf8:	202b      	movs	r0, #43	; 0x2b
    dbfa:	f7f6 f8af 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dbfe:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    dc02:	4604      	mov	r4, r0
    dc04:	460e      	mov	r6, r1
    dc06:	2000      	movs	r0, #0
    dc08:	f7f6 fa8a 	bl	4120 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    dc0c:	4605      	mov	r5, r0
    dc0e:	2000      	movs	r0, #0
    dc10:	b916      	cbnz	r6, dc18 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xc0>
    dc12:	2001      	movs	r0, #1
    dc14:	f7f6 fa84 	bl	4120 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    dc18:	2600      	movs	r6, #0
    dc1a:	46b0      	mov	r8, r6
    dc1c:	182f      	adds	r7, r5, r0
    dc1e:	e017      	b.n	dc50 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xf8>
    dc20:	8820      	ldrh	r0, [r4, #0]
    dc22:	1c40      	adds	r0, r0, #1
    dc24:	b280      	uxth	r0, r0
    dc26:	8020      	strh	r0, [r4, #0]
    dc28:	42b8      	cmp	r0, r7
    dc2a:	d302      	bcc.n	dc32 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xda>
    dc2c:	4640      	mov	r0, r8
    dc2e:	f8a4 8000 	strh.w	r8, [r4]
    dc32:	b280      	uxth	r0, r0
    dc34:	42a8      	cmp	r0, r5
    dc36:	d304      	bcc.n	dc42 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xea>
    dc38:	42b8      	cmp	r0, r7
    dc3a:	d202      	bcs.n	dc42 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xea>
    dc3c:	2000      	movs	r0, #0
    dc3e:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    dc42:	4669      	mov	r1, sp
    dc44:	f7ff fbd7 	bl	d3f6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    dc48:	2800      	cmp	r0, #0
    dc4a:	d0f8      	beq.n	dc3e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xe6>
    dc4c:	1c76      	adds	r6, r6, #1
    dc4e:	b2f6      	uxtb	r6, r6
    dc50:	42b7      	cmp	r7, r6
    dc52:	d8e5      	bhi.n	dc20 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xc8>
    dc54:	f64f 70ff 	movw	r0, #65535	; 0xffff
    dc58:	8020      	strh	r0, [r4, #0]
    dc5a:	2012      	movs	r0, #18
    dc5c:	e7ef      	b.n	dc3e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xe6>

0000dc5e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    dc5e:	b570      	push	{r4, r5, r6, lr}
    dc60:	8050      	strh	r0, [r2, #2]
    dc62:	890c      	ldrh	r4, [r1, #8]
    dc64:	8094      	strh	r4, [r2, #4]
    dc66:	898b      	ldrh	r3, [r1, #12]
    dc68:	80d3      	strh	r3, [r2, #6]
    dc6a:	8948      	ldrh	r0, [r1, #10]
    dc6c:	8110      	strh	r0, [r2, #8]
    dc6e:	89cd      	ldrh	r5, [r1, #14]
    dc70:	8155      	strh	r5, [r2, #10]
    dc72:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    dc74:	42ae      	cmp	r6, r5
    dc76:	d108      	bne.n	dc8a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    dc78:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    dc7a:	4285      	cmp	r5, r0
    dc7c:	d105      	bne.n	dc8a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    dc7e:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    dc80:	429d      	cmp	r5, r3
    dc82:	d102      	bne.n	dc8a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    dc84:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    dc86:	42a3      	cmp	r3, r4
    dc88:	d001      	beq.n	dc8e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    dc8a:	2301      	movs	r3, #1
    dc8c:	e000      	b.n	dc90 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    dc8e:	2300      	movs	r3, #0
    dc90:	7313      	strb	r3, [r2, #12]
    dc92:	8548      	strh	r0, [r1, #42]	; 0x2a
    dc94:	8950      	ldrh	r0, [r2, #10]
    dc96:	85c8      	strh	r0, [r1, #46]	; 0x2e
    dc98:	8890      	ldrh	r0, [r2, #4]
    dc9a:	8588      	strh	r0, [r1, #44]	; 0x2c
    dc9c:	88d0      	ldrh	r0, [r2, #6]
    dc9e:	8608      	strh	r0, [r1, #48]	; 0x30
    dca0:	2001      	movs	r0, #1
    dca2:	7010      	strb	r0, [r2, #0]
    dca4:	bd70      	pop	{r4, r5, r6, pc}

0000dca6 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    dca6:	b510      	push	{r4, lr}
    dca8:	888c      	ldrh	r4, [r1, #4]
    dcaa:	890a      	ldrh	r2, [r1, #8]
    dcac:	884b      	ldrh	r3, [r1, #2]
    dcae:	88c9      	ldrh	r1, [r1, #6]
    dcb0:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    dcb4:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
    dcb8:	f8a0 4046 	strh.w	r4, [r0, #70]	; 0x46
    dcbc:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
    dcc0:	bd10      	pop	{r4, pc}

0000dcc2 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    dcc2:	b570      	push	{r4, r5, r6, lr}
    dcc4:	4615      	mov	r5, r2
    dcc6:	460c      	mov	r4, r1
    dcc8:	f000 f8c3 	bl	de52 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    dccc:	3096      	adds	r0, #150	; 0x96
    dcce:	4428      	add	r0, r5
    dcd0:	42a0      	cmp	r0, r4
    dcd2:	d801      	bhi.n	dcd8 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    dcd4:	1a20      	subs	r0, r4, r0
    dcd6:	bd70      	pop	{r4, r5, r6, pc}
    dcd8:	2000      	movs	r0, #0
    dcda:	bd70      	pop	{r4, r5, r6, pc}

0000dcdc <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    dcdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dce0:	4604      	mov	r4, r0
    dce2:	8e47      	ldrh	r7, [r0, #50]	; 0x32
    dce4:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
    dce6:	f8b0 5048 	ldrh.w	r5, [r0, #72]	; 0x48
    dcea:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
    dcec:	4285      	cmp	r5, r0
    dcee:	d300      	bcc.n	dcf2 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x16>
    dcf0:	4605      	mov	r5, r0
    dcf2:	4620      	mov	r0, r4
    dcf4:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    dcf8:	f000 f89b 	bl	de32 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    dcfc:	4601      	mov	r1, r0
    dcfe:	8665      	strh	r5, [r4, #50]	; 0x32
    dd00:	86e1      	strh	r1, [r4, #54]	; 0x36
    dd02:	8f22      	ldrh	r2, [r4, #56]	; 0x38
    dd04:	f104 0028 	add.w	r0, r4, #40	; 0x28
    dd08:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    dd0a:	4680      	mov	r8, r0
    dd0c:	42aa      	cmp	r2, r5
    dd0e:	d200      	bcs.n	dd12 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x36>
    dd10:	462a      	mov	r2, r5
    dd12:	428b      	cmp	r3, r1
    dd14:	d200      	bcs.n	dd18 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3c>
    dd16:	460b      	mov	r3, r1
    dd18:	8202      	strh	r2, [r0, #16]
    dd1a:	f8a8 3012 	strh.w	r3, [r8, #18]
    dd1e:	42bd      	cmp	r5, r7
    dd20:	d101      	bne.n	dd26 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4a>
    dd22:	42b1      	cmp	r1, r6
    dd24:	d001      	beq.n	dd2a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4e>
    dd26:	2001      	movs	r0, #1
    dd28:	e000      	b.n	dd2c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    dd2a:	2000      	movs	r0, #0
    dd2c:	4681      	mov	r9, r0
    dd2e:	f8b4 5044 	ldrh.w	r5, [r4, #68]	; 0x44
    dd32:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    dd34:	8e27      	ldrh	r7, [r4, #48]	; 0x30
    dd36:	8ea6      	ldrh	r6, [r4, #52]	; 0x34
    dd38:	4285      	cmp	r5, r0
    dd3a:	d300      	bcc.n	dd3e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x62>
    dd3c:	4605      	mov	r5, r0
    dd3e:	f894 1066 	ldrb.w	r1, [r4, #102]	; 0x66
    dd42:	4620      	mov	r0, r4
    dd44:	f000 f87d 	bl	de42 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    dd48:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
    dd4c:	2902      	cmp	r1, #2
    dd4e:	d108      	bne.n	dd62 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x86>
    dd50:	42af      	cmp	r7, r5
    dd52:	d200      	bcs.n	dd56 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7a>
    dd54:	463d      	mov	r5, r7
    dd56:	4286      	cmp	r6, r0
    dd58:	d200      	bcs.n	dd5c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x80>
    dd5a:	4630      	mov	r0, r6
    dd5c:	2100      	movs	r1, #0
    dd5e:	f884 105c 	strb.w	r1, [r4, #92]	; 0x5c
    dd62:	f8a8 5008 	strh.w	r5, [r8, #8]
    dd66:	f8a8 000c 	strh.w	r0, [r8, #12]
    dd6a:	42bd      	cmp	r5, r7
    dd6c:	d101      	bne.n	dd72 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x96>
    dd6e:	42b0      	cmp	r0, r6
    dd70:	d001      	beq.n	dd76 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    dd72:	2001      	movs	r0, #1
    dd74:	e000      	b.n	dd78 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9c>
    dd76:	2000      	movs	r0, #0
    dd78:	ea40 0009 	orr.w	r0, r0, r9
    dd7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000dd80 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    dd80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd84:	4616      	mov	r6, r2
    dd86:	460f      	mov	r7, r1
    dd88:	4604      	mov	r4, r0
    dd8a:	f000 f862 	bl	de52 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    dd8e:	4605      	mov	r5, r0
    dd90:	463a      	mov	r2, r7
    dd92:	6861      	ldr	r1, [r4, #4]
    dd94:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    dd96:	f000 f847 	bl	de28 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    dd9a:	19a9      	adds	r1, r5, r6
    dd9c:	4281      	cmp	r1, r0
    dd9e:	d300      	bcc.n	dda2 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    dda0:	4608      	mov	r0, r1
    dda2:	62e0      	str	r0, [r4, #44]	; 0x2c
    dda4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000dda8 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    dda8:	221b      	movs	r2, #27
    ddaa:	8402      	strh	r2, [r0, #32]
    ddac:	8382      	strh	r2, [r0, #28]
    ddae:	82c2      	strh	r2, [r0, #22]
    ddb0:	8282      	strh	r2, [r0, #20]
    ddb2:	8142      	strh	r2, [r0, #10]
    ddb4:	8202      	strh	r2, [r0, #16]
    ddb6:	8102      	strh	r2, [r0, #8]
    ddb8:	8542      	strh	r2, [r0, #42]	; 0x2a
    ddba:	8582      	strh	r2, [r0, #44]	; 0x2c
    ddbc:	8482      	strh	r2, [r0, #36]	; 0x24
    ddbe:	2900      	cmp	r1, #0
    ddc0:	d10a      	bne.n	ddd8 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    ddc2:	f44f 71a4 	mov.w	r1, #328	; 0x148
    ddc6:	8441      	strh	r1, [r0, #34]	; 0x22
    ddc8:	83c1      	strh	r1, [r0, #30]
    ddca:	8341      	strh	r1, [r0, #26]
    ddcc:	8301      	strh	r1, [r0, #24]
    ddce:	81c1      	strh	r1, [r0, #14]
    ddd0:	8241      	strh	r1, [r0, #18]
    ddd2:	8181      	strh	r1, [r0, #12]
    ddd4:	85c1      	strh	r1, [r0, #46]	; 0x2e
    ddd6:	8601      	strh	r1, [r0, #48]	; 0x30
    ddd8:	4770      	bx	lr

0000ddda <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    ddda:	6800      	ldr	r0, [r0, #0]
    dddc:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    dde0:	4290      	cmp	r0, r2
    dde2:	d903      	bls.n	ddec <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    dde4:	1a40      	subs	r0, r0, r1
    dde6:	389c      	subs	r0, #156	; 0x9c
    dde8:	0840      	lsrs	r0, r0, #1
    ddea:	4770      	bx	lr
    ddec:	2000      	movs	r0, #0
    ddee:	4770      	bx	lr

0000ddf0 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    ddf0:	b510      	push	{r4, lr}
    ddf2:	9c02      	ldr	r4, [sp, #8]
    ddf4:	8281      	strh	r1, [r0, #20]
    ddf6:	82c2      	strh	r2, [r0, #22]
    ddf8:	8303      	strh	r3, [r0, #24]
    ddfa:	8344      	strh	r4, [r0, #26]
    ddfc:	bd10      	pop	{r4, pc}

0000ddfe <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    ddfe:	8050      	strh	r0, [r2, #2]
    de00:	8a88      	ldrh	r0, [r1, #20]
    de02:	8090      	strh	r0, [r2, #4]
    de04:	8ac8      	ldrh	r0, [r1, #22]
    de06:	80d0      	strh	r0, [r2, #6]
    de08:	8b08      	ldrh	r0, [r1, #24]
    de0a:	8110      	strh	r0, [r2, #8]
    de0c:	8b48      	ldrh	r0, [r1, #26]
    de0e:	8150      	strh	r0, [r2, #10]
    de10:	2001      	movs	r0, #1
    de12:	7010      	strb	r0, [r2, #0]
    de14:	4770      	bx	lr
    de16:	2902      	cmp	r1, #2
    de18:	d003      	beq.n	de22 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x24>
    de1a:	00c0      	lsls	r0, r0, #3
    de1c:	3070      	adds	r0, #112	; 0x70
    de1e:	b280      	uxth	r0, r0
    de20:	4770      	bx	lr
    de22:	0080      	lsls	r0, r0, #2
    de24:	303c      	adds	r0, #60	; 0x3c
    de26:	e7fa      	b.n	de1e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>
    de28:	4288      	cmp	r0, r1
    de2a:	d300      	bcc.n	de2e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x30>
    de2c:	4608      	mov	r0, r1
    de2e:	1a80      	subs	r0, r0, r2
    de30:	4770      	bx	lr
    de32:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    de36:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    de3a:	4281      	cmp	r1, r0
    de3c:	d200      	bcs.n	de40 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x42>
    de3e:	4608      	mov	r0, r1
    de40:	4770      	bx	lr
    de42:	f8b0 1046 	ldrh.w	r1, [r0, #70]	; 0x46
    de46:	f8b0 0042 	ldrh.w	r0, [r0, #66]	; 0x42
    de4a:	4281      	cmp	r1, r0
    de4c:	d200      	bcs.n	de50 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x52>
    de4e:	4608      	mov	r0, r1
    de50:	4770      	bx	lr
    de52:	2196      	movs	r1, #150	; 0x96
    de54:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
    de58:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
    de5c:	f000 b800 	b.w	de60 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x62>
    de60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    de64:	460d      	mov	r5, r1
    de66:	4606      	mov	r6, r0
    de68:	4698      	mov	r8, r3
    de6a:	4617      	mov	r7, r2
    de6c:	8e00      	ldrh	r0, [r0, #48]	; 0x30
    de6e:	4611      	mov	r1, r2
    de70:	f7ff ffd1 	bl	de16 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    de74:	4604      	mov	r4, r0
    de76:	4639      	mov	r1, r7
    de78:	4630      	mov	r0, r6
    de7a:	f7ff ffe2 	bl	de42 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    de7e:	42a0      	cmp	r0, r4
    de80:	d200      	bcs.n	de84 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x86>
    de82:	4604      	mov	r4, r0
    de84:	8f30      	ldrh	r0, [r6, #56]	; 0x38
    de86:	4641      	mov	r1, r8
    de88:	f7ff ffc5 	bl	de16 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    de8c:	4607      	mov	r7, r0
    de8e:	4641      	mov	r1, r8
    de90:	4630      	mov	r0, r6
    de92:	f7ff ffce 	bl	de32 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    de96:	42b8      	cmp	r0, r7
    de98:	d300      	bcc.n	de9c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x9e>
    de9a:	4638      	mov	r0, r7
    de9c:	4420      	add	r0, r4
    de9e:	4428      	add	r0, r5
    dea0:	1d80      	adds	r0, r0, #6
    dea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dea6:	2801      	cmp	r0, #1
    dea8:	d102      	bne.n	deb0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb2>
    deaa:	7948      	ldrb	r0, [r1, #5]
    deac:	0980      	lsrs	r0, r0, #6
    deae:	d001      	beq.n	deb4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    deb0:	2000      	movs	r0, #0
    deb2:	4770      	bx	lr
    deb4:	2001      	movs	r0, #1
    deb6:	4770      	bx	lr
    deb8:	2801      	cmp	r0, #1
    deba:	d106      	bne.n	deca <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    debc:	7948      	ldrb	r0, [r1, #5]
    debe:	2101      	movs	r1, #1
    dec0:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    dec4:	d101      	bne.n	deca <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    dec6:	2001      	movs	r0, #1
    dec8:	4770      	bx	lr
    deca:	2000      	movs	r0, #0
    decc:	4770      	bx	lr
    dece:	2802      	cmp	r0, #2
    ded0:	d003      	beq.n	deda <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xdc>
    ded2:	2803      	cmp	r0, #3
    ded4:	d001      	beq.n	deda <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xdc>
    ded6:	2000      	movs	r0, #0
    ded8:	4770      	bx	lr
    deda:	2001      	movs	r0, #1
    dedc:	4770      	bx	lr

0000dede <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    dede:	b510      	push	{r4, lr}
    dee0:	4604      	mov	r4, r0
    dee2:	7c00      	ldrb	r0, [r0, #16]
    dee4:	f7ff fff3 	bl	dece <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    dee8:	b148      	cbz	r0, defe <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    deea:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
    deee:	f104 0148 	add.w	r1, r4, #72	; 0x48
    def2:	f7ff fa3d 	bl	d370 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    def6:	2808      	cmp	r0, #8
    def8:	d001      	beq.n	defe <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    defa:	2001      	movs	r0, #1
    defc:	bd10      	pop	{r4, pc}
    defe:	7c20      	ldrb	r0, [r4, #16]
    df00:	b118      	cbz	r0, df0a <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    df02:	2802      	cmp	r0, #2
    df04:	d001      	beq.n	df0a <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    df06:	7de0      	ldrb	r0, [r4, #23]
    df08:	bd10      	pop	{r4, pc}
    df0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    df0e:	2000      	movs	r0, #0
    df10:	f7f6 bdbe 	b.w	4a90 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000df14 <sym_NBRKXV3VPUPRYSKCC4WABD5IHQ554YCWT43H5LY>:
    df14:	4770      	bx	lr

0000df16 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    df16:	b508      	push	{r3, lr}
    df18:	f890 106c 	ldrb.w	r1, [r0, #108]	; 0x6c
    df1c:	f88d 1000 	strb.w	r1, [sp]
    df20:	9900      	ldr	r1, [sp, #0]
    df22:	9100      	str	r1, [sp, #0]
    df24:	f89d 1000 	ldrb.w	r1, [sp]
    df28:	b109      	cbz	r1, df2e <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x18>
    df2a:	2001      	movs	r0, #1
    df2c:	bd08      	pop	{r3, pc}
    df2e:	f890 008e 	ldrb.w	r0, [r0, #142]	; 0x8e
    df32:	f88d 0000 	strb.w	r0, [sp]
    df36:	9800      	ldr	r0, [sp, #0]
    df38:	9000      	str	r0, [sp, #0]
    df3a:	f89d 0000 	ldrb.w	r0, [sp]
    df3e:	2000      	movs	r0, #0
    df40:	bd08      	pop	{r3, pc}

0000df42 <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    df42:	20ff      	movs	r0, #255	; 0xff
    df44:	7008      	strb	r0, [r1, #0]
    df46:	4770      	bx	lr

0000df48 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    df48:	b510      	push	{r4, lr}
    df4a:	4604      	mov	r4, r0
    df4c:	22dc      	movs	r2, #220	; 0xdc
    df4e:	2100      	movs	r1, #0
    df50:	f7fe f981 	bl	c256 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    df54:	20ff      	movs	r0, #255	; 0xff
    df56:	7020      	strb	r0, [r4, #0]
    df58:	207f      	movs	r0, #127	; 0x7f
    df5a:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    df5e:	2013      	movs	r0, #19
    df60:	8060      	strh	r0, [r4, #2]
    df62:	2001      	movs	r0, #1
    df64:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
    df68:	2000      	movs	r0, #0
    df6a:	73a0      	strb	r0, [r4, #14]
    df6c:	f104 0020 	add.w	r0, r4, #32
    df70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    df74:	f000 b967 	b.w	e246 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000df78 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    df78:	7880      	ldrb	r0, [r0, #2]
    df7a:	f3c0 0080 	ubfx	r0, r0, #2, #1
    df7e:	b108      	cbz	r0, df84 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    df80:	2000      	movs	r0, #0
    df82:	4770      	bx	lr
    df84:	201f      	movs	r0, #31
    df86:	4770      	bx	lr

0000df88 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    df88:	f7f8 be10 	b.w	6bac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b4>

0000df8c <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    df8c:	6880      	ldr	r0, [r0, #8]
    df8e:	4770      	bx	lr

0000df90 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    df90:	2001      	movs	r0, #1
    df92:	4770      	bx	lr

0000df94 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    df94:	b510      	push	{r4, lr}
    df96:	4604      	mov	r4, r0
    df98:	3020      	adds	r0, #32
    df9a:	f000 f914 	bl	e1c6 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    df9e:	8861      	ldrh	r1, [r4, #2]
    dfa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dfa4:	2228      	movs	r2, #40	; 0x28
    dfa6:	f7f8 bfbd 	b.w	6f24 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000dfaa <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    dfaa:	2200      	movs	r2, #0
    dfac:	6282      	str	r2, [r0, #40]	; 0x28
    dfae:	8843      	ldrh	r3, [r0, #2]
    dfb0:	2b1d      	cmp	r3, #29
    dfb2:	d001      	beq.n	dfb8 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    dfb4:	7341      	strb	r1, [r0, #13]
    dfb6:	4770      	bx	lr
    dfb8:	7342      	strb	r2, [r0, #13]
    dfba:	4770      	bx	lr

0000dfbc <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    dfbc:	2001      	movs	r0, #1
    dfbe:	4770      	bx	lr

0000dfc0 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    dfc0:	2000      	movs	r0, #0
    dfc2:	4770      	bx	lr

0000dfc4 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    dfc4:	7880      	ldrb	r0, [r0, #2]
    dfc6:	f000 0001 	and.w	r0, r0, #1
    dfca:	4770      	bx	lr

0000dfcc <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    dfcc:	7880      	ldrb	r0, [r0, #2]
    dfce:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    dfd2:	4770      	bx	lr

0000dfd4 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    dfd4:	2001      	movs	r0, #1
    dfd6:	4770      	bx	lr

0000dfd8 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    dfd8:	7880      	ldrb	r0, [r0, #2]
    dfda:	f3c0 0040 	ubfx	r0, r0, #1, #1
    dfde:	4770      	bx	lr

0000dfe0 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    dfe0:	f990 000e 	ldrsb.w	r0, [r0, #14]
    dfe4:	4770      	bx	lr

0000dfe6 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    dfe6:	7800      	ldrb	r0, [r0, #0]
    dfe8:	28ff      	cmp	r0, #255	; 0xff
    dfea:	d001      	beq.n	dff0 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    dfec:	2001      	movs	r0, #1
    dfee:	4770      	bx	lr
    dff0:	2000      	movs	r0, #0
    dff2:	4770      	bx	lr

0000dff4 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    dff4:	680a      	ldr	r2, [r1, #0]
    dff6:	f840 2f11 	str.w	r2, [r0, #17]!
    dffa:	8889      	ldrh	r1, [r1, #4]
    dffc:	8081      	strh	r1, [r0, #4]
    dffe:	2101      	movs	r1, #1
    e000:	7181      	strb	r1, [r0, #6]
    e002:	4770      	bx	lr

0000e004 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    e004:	7b00      	ldrb	r0, [r0, #12]
    e006:	4770      	bx	lr

0000e008 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    e008:	2001      	movs	r0, #1
    e00a:	4770      	bx	lr

0000e00c <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    e00c:	61c1      	str	r1, [r0, #28]
    e00e:	4770      	bx	lr

0000e010 <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>:
    e010:	2300      	movs	r3, #0
    e012:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
    e016:	f8a0 1066 	strh.w	r1, [r0, #102]	; 0x66
    e01a:	f840 2f5c 	str.w	r2, [r0, #92]!
    e01e:	2101      	movs	r1, #1
    e020:	7201      	strb	r1, [r0, #8]
    e022:	4770      	bx	lr

0000e024 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>:
    e024:	2300      	movs	r3, #0
    e026:	f880 3065 	strb.w	r3, [r0, #101]	; 0x65
    e02a:	f840 2f60 	str.w	r2, [r0, #96]!
    e02e:	8101      	strh	r1, [r0, #8]
    e030:	2101      	movs	r1, #1
    e032:	7141      	strb	r1, [r0, #5]
    e034:	4770      	bx	lr

0000e036 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    e036:	f880 1058 	strb.w	r1, [r0, #88]	; 0x58
    e03a:	4770      	bx	lr

0000e03c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    e03c:	b570      	push	{r4, r5, r6, lr}
    e03e:	4604      	mov	r4, r0
    e040:	7880      	ldrb	r0, [r0, #2]
    e042:	2501      	movs	r5, #1
    e044:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e048:	b138      	cbz	r0, e05a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e>
    e04a:	233c      	movs	r3, #60	; 0x3c
    e04c:	22ff      	movs	r2, #255	; 0xff
    e04e:	4620      	mov	r0, r4
    e050:	69e1      	ldr	r1, [r4, #28]
    e052:	f7f8 fdd1 	bl	6bf8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x400>
    e056:	f884 506c 	strb.w	r5, [r4, #108]	; 0x6c
    e05a:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
    e05e:	bd70      	pop	{r4, r5, r6, pc}

0000e060 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    e060:	7bc0      	ldrb	r0, [r0, #15]
    e062:	2800      	cmp	r0, #0
    e064:	d000      	beq.n	e068 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    e066:	2001      	movs	r0, #1
    e068:	4770      	bx	lr
    e06a:	b510      	push	{r4, lr}
    e06c:	f7ff f980 	bl	d370 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    e070:	4604      	mov	r4, r0
    e072:	f7f7 fb89 	bl	5788 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    e076:	b138      	cbz	r0, e088 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    e078:	4620      	mov	r0, r4
    e07a:	f7f7 fabd 	bl	55f8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    e07e:	b118      	cbz	r0, e088 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    e080:	2110      	movs	r1, #16
    e082:	f7ff fb67 	bl	d754 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    e086:	b108      	cbz	r0, e08c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c>
    e088:	2000      	movs	r0, #0
    e08a:	bd10      	pop	{r4, pc}
    e08c:	2001      	movs	r0, #1
    e08e:	bd10      	pop	{r4, pc}
    e090:	2101      	movs	r1, #1
    e092:	f7f8 ba33 	b.w	64fc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    e096:	2101      	movs	r1, #1
    e098:	f7f8 ba30 	b.w	64fc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    e09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e0a0:	4604      	mov	r4, r0
    e0a2:	2700      	movs	r7, #0
    e0a4:	704f      	strb	r7, [r1, #1]
    e0a6:	2011      	movs	r0, #17
    e0a8:	460d      	mov	r5, r1
    e0aa:	7008      	strb	r0, [r1, #0]
    e0ac:	2220      	movs	r2, #32
    e0ae:	f104 016e 	add.w	r1, r4, #110	; 0x6e
    e0b2:	1d28      	adds	r0, r5, #4
    e0b4:	f7fe f855 	bl	c162 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e0b8:	2601      	movs	r6, #1
    e0ba:	722e      	strb	r6, [r5, #8]
    e0bc:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    e0c0:	7928      	ldrb	r0, [r5, #4]
    e0c2:	2800      	cmp	r0, #0
    e0c4:	d110      	bne.n	e0e8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x88>
    e0c6:	88e8      	ldrh	r0, [r5, #6]
    e0c8:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
    e0cc:	69e0      	ldr	r0, [r4, #28]
    e0ce:	7c41      	ldrb	r1, [r0, #17]
    e0d0:	f884 109a 	strb.w	r1, [r4, #154]	; 0x9a
    e0d4:	f884 6096 	strb.w	r6, [r4, #150]	; 0x96
    e0d8:	8800      	ldrh	r0, [r0, #0]
    e0da:	f7f6 fa4f 	bl	457c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    e0de:	f7fe ff22 	bl	cf26 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    e0e2:	69e0      	ldr	r0, [r4, #28]
    e0e4:	f880 6070 	strb.w	r6, [r0, #112]	; 0x70
    e0e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e0ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e0f0:	4604      	mov	r4, r0
    e0f2:	460f      	mov	r7, r1
    e0f4:	7e40      	ldrb	r0, [r0, #25]
    e0f6:	f7f7 fa3f 	bl	5578 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    e0fa:	4606      	mov	r6, r0
    e0fc:	7e20      	ldrb	r0, [r4, #24]
    e0fe:	f104 0541 	add.w	r5, r4, #65	; 0x41
    e102:	b120      	cbz	r0, e10e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xae>
    e104:	b11e      	cbz	r6, e10e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xae>
    e106:	7e60      	ldrb	r0, [r4, #25]
    e108:	f7f7 fa2a 	bl	5560 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    e10c:	b1a0      	cbz	r0, e138 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xd8>
    e10e:	f894 005a 	ldrb.w	r0, [r4, #90]	; 0x5a
    e112:	2800      	cmp	r0, #0
    e114:	d024      	beq.n	e160 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x100>
    e116:	7ea0      	ldrb	r0, [r4, #26]
    e118:	2800      	cmp	r0, #0
    e11a:	d021      	beq.n	e160 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x100>
    e11c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    e120:	4629      	mov	r1, r5
    e122:	f7ff fec9 	bl	deb8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    e126:	b1a8      	cbz	r0, e154 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf4>
    e128:	f7f7 fa16 	bl	5558 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    e12c:	463a      	mov	r2, r7
    e12e:	4629      	mov	r1, r5
    e130:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e134:	f7ff b8a1 	b.w	d27a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    e138:	2001      	movs	r0, #1
    e13a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    e13e:	463a      	mov	r2, r7
    e140:	4629      	mov	r1, r5
    e142:	4630      	mov	r0, r6
    e144:	f7ff f899 	bl	d27a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    e148:	7e61      	ldrb	r1, [r4, #25]
    e14a:	4628      	mov	r0, r5
    e14c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e150:	f7f7 ba1e 	b.w	5590 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    e154:	4639      	mov	r1, r7
    e156:	4628      	mov	r0, r5
    e158:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e15c:	f7ff b87c 	b.w	d258 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    e160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e164:	b510      	push	{r4, lr}
    e166:	4604      	mov	r4, r0
    e168:	4608      	mov	r0, r1
    e16a:	f7fd f8c7 	bl	b2fc <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    e16e:	7921      	ldrb	r1, [r4, #4]
    e170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e174:	2025      	movs	r0, #37	; 0x25
    e176:	f001 bace 	b.w	f716 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    e17a:	b510      	push	{r4, lr}
    e17c:	4604      	mov	r4, r0
    e17e:	3026      	adds	r0, #38	; 0x26
    e180:	f7fd f86e 	bl	b260 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    e184:	2800      	cmp	r0, #0
    e186:	d102      	bne.n	e18e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x12e>
    e188:	207f      	movs	r0, #127	; 0x7f
    e18a:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    e18e:	bd10      	pop	{r4, pc}
    e190:	7802      	ldrb	r2, [r0, #0]
    e192:	2320      	movs	r3, #32
    e194:	f022 0220 	bic.w	r2, r2, #32
    e198:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    e19c:	430a      	orrs	r2, r1
    e19e:	7002      	strb	r2, [r0, #0]
    e1a0:	4770      	bx	lr

0000e1a2 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    e1a2:	b570      	push	{r4, r5, r6, lr}
    e1a4:	7001      	strb	r1, [r0, #0]
    e1a6:	7042      	strb	r2, [r0, #1]
    e1a8:	4614      	mov	r4, r2
    e1aa:	460d      	mov	r5, r1
    e1ac:	7880      	ldrb	r0, [r0, #2]
    e1ae:	f000 f87f 	bl	e2b0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e1b2:	fb10 f005 	smulbb	r0, r0, r5
    e1b6:	4360      	muls	r0, r4
    e1b8:	28ff      	cmp	r0, #255	; 0xff
    e1ba:	d303      	bcc.n	e1c4 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    e1bc:	215c      	movs	r1, #92	; 0x5c
    e1be:	202e      	movs	r0, #46	; 0x2e
    e1c0:	f7f5 fdcc 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e1c4:	bd70      	pop	{r4, r5, r6, pc}

0000e1c6 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    e1c6:	b510      	push	{r4, lr}
    e1c8:	4604      	mov	r4, r0
    e1ca:	7880      	ldrb	r0, [r0, #2]
    e1cc:	f000 f870 	bl	e2b0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e1d0:	7861      	ldrb	r1, [r4, #1]
    e1d2:	7822      	ldrb	r2, [r4, #0]
    e1d4:	fb11 f102 	smulbb	r1, r1, r2
    e1d8:	4348      	muls	r0, r1
    e1da:	b2c0      	uxtb	r0, r0
    e1dc:	bd10      	pop	{r4, pc}

0000e1de <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    e1de:	b510      	push	{r4, lr}
    e1e0:	4604      	mov	r4, r0
    e1e2:	f000 f84d 	bl	e280 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    e1e6:	7961      	ldrb	r1, [r4, #5]
    e1e8:	1c49      	adds	r1, r1, #1
    e1ea:	b2c9      	uxtb	r1, r1
    e1ec:	7161      	strb	r1, [r4, #5]
    e1ee:	7862      	ldrb	r2, [r4, #1]
    e1f0:	4291      	cmp	r1, r2
    e1f2:	d10b      	bne.n	e20c <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    e1f4:	2200      	movs	r2, #0
    e1f6:	7162      	strb	r2, [r4, #5]
    e1f8:	78e1      	ldrb	r1, [r4, #3]
    e1fa:	4301      	orrs	r1, r0
    e1fc:	70e1      	strb	r1, [r4, #3]
    e1fe:	78a3      	ldrb	r3, [r4, #2]
    e200:	4299      	cmp	r1, r3
    e202:	d103      	bne.n	e20c <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    e204:	70e2      	strb	r2, [r4, #3]
    e206:	7921      	ldrb	r1, [r4, #4]
    e208:	1c49      	adds	r1, r1, #1
    e20a:	7121      	strb	r1, [r4, #4]
    e20c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e210:	f000 b825 	b.w	e25e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000e214 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    e214:	7081      	strb	r1, [r0, #2]
    e216:	4770      	bx	lr

0000e218 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    e218:	b570      	push	{r4, r5, r6, lr}
    e21a:	4604      	mov	r4, r0
    e21c:	7880      	ldrb	r0, [r0, #2]
    e21e:	f000 f847 	bl	e2b0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e222:	7861      	ldrb	r1, [r4, #1]
    e224:	fb11 f500 	smulbb	r5, r1, r0
    e228:	78e0      	ldrb	r0, [r4, #3]
    e22a:	f000 f841 	bl	e2b0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e22e:	7861      	ldrb	r1, [r4, #1]
    e230:	7962      	ldrb	r2, [r4, #5]
    e232:	fb10 2001 	smlabb	r0, r0, r1, r2
    e236:	7821      	ldrb	r1, [r4, #0]
    e238:	7922      	ldrb	r2, [r4, #4]
    e23a:	1a89      	subs	r1, r1, r2
    e23c:	fb11 f105 	smulbb	r1, r1, r5
    e240:	1a08      	subs	r0, r1, r0
    e242:	b2c0      	uxtb	r0, r0
    e244:	bd70      	pop	{r4, r5, r6, pc}

0000e246 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    e246:	2100      	movs	r1, #0
    e248:	6001      	str	r1, [r0, #0]
    e24a:	8081      	strh	r1, [r0, #4]
    e24c:	2101      	movs	r1, #1
    e24e:	7041      	strb	r1, [r0, #1]
    e250:	7001      	strb	r1, [r0, #0]
    e252:	4770      	bx	lr

0000e254 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    e254:	2100      	movs	r1, #0
    e256:	70c1      	strb	r1, [r0, #3]
    e258:	7141      	strb	r1, [r0, #5]
    e25a:	7101      	strb	r1, [r0, #4]
    e25c:	4770      	bx	lr
    e25e:	b510      	push	{r4, lr}
    e260:	2801      	cmp	r0, #1
    e262:	d007      	beq.n	e274 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    e264:	2802      	cmp	r0, #2
    e266:	d007      	beq.n	e278 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    e268:	2804      	cmp	r0, #4
    e26a:	d007      	beq.n	e27c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    e26c:	2139      	movs	r1, #57	; 0x39
    e26e:	202e      	movs	r0, #46	; 0x2e
    e270:	f7f5 fd74 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e274:	2025      	movs	r0, #37	; 0x25
    e276:	bd10      	pop	{r4, pc}
    e278:	2026      	movs	r0, #38	; 0x26
    e27a:	bd10      	pop	{r4, pc}
    e27c:	2027      	movs	r0, #39	; 0x27
    e27e:	bd10      	pop	{r4, pc}
    e280:	4601      	mov	r1, r0
    e282:	2000      	movs	r0, #0
    e284:	788a      	ldrb	r2, [r1, #2]
    e286:	07d3      	lsls	r3, r2, #31
    e288:	d002      	beq.n	e290 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    e28a:	78cb      	ldrb	r3, [r1, #3]
    e28c:	07db      	lsls	r3, r3, #31
    e28e:	d006      	beq.n	e29e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    e290:	0793      	lsls	r3, r2, #30
    e292:	d506      	bpl.n	e2a2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    e294:	78cb      	ldrb	r3, [r1, #3]
    e296:	079b      	lsls	r3, r3, #30
    e298:	d403      	bmi.n	e2a2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    e29a:	2002      	movs	r0, #2
    e29c:	4770      	bx	lr
    e29e:	2001      	movs	r0, #1
    e2a0:	4770      	bx	lr
    e2a2:	0752      	lsls	r2, r2, #29
    e2a4:	d5fc      	bpl.n	e2a0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    e2a6:	78c9      	ldrb	r1, [r1, #3]
    e2a8:	0749      	lsls	r1, r1, #29
    e2aa:	d4f9      	bmi.n	e2a0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    e2ac:	2004      	movs	r0, #4
    e2ae:	4770      	bx	lr
    e2b0:	f3c0 0180 	ubfx	r1, r0, #2, #1
    e2b4:	f3c0 0240 	ubfx	r2, r0, #1, #1
    e2b8:	4411      	add	r1, r2
    e2ba:	f000 0001 	and.w	r0, r0, #1
    e2be:	4408      	add	r0, r1
    e2c0:	4770      	bx	lr

0000e2c2 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    e2c2:	f240 315a 	movw	r1, #858	; 0x35a
    e2c6:	4348      	muls	r0, r1
    e2c8:	4770      	bx	lr
    e2ca:	020e      	.short	0x020e
    e2cc:	0630041c 	.word	0x0630041c
    e2d0:	035a0c60 	.word	0x035a0c60
    e2d4:	05c506b4 	.word	0x05c506b4
    e2d8:	12250bf5 	.word	0x12250bf5
    e2dc:	03b101a3 	.word	0x03b101a3
    e2e0:	02ef05bf 	.word	0x02ef05bf
    e2e4:	09a30649 	.word	0x09a30649

0000e2e8 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    e2e8:	b510      	push	{r4, lr}
    e2ea:	f890 10d8 	ldrb.w	r1, [r0, #216]	; 0xd8
    e2ee:	b109      	cbz	r1, e2f4 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    e2f0:	2000      	movs	r0, #0
    e2f2:	bd10      	pop	{r4, pc}
    e2f4:	f8d0 10d4 	ldr.w	r1, [r0, #212]	; 0xd4
    e2f8:	b959      	cbnz	r1, e312 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x2a>
    e2fa:	f890 10b0 	ldrb.w	r1, [r0, #176]	; 0xb0
    e2fe:	b141      	cbz	r1, e312 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x2a>
    e300:	f8d0 20b4 	ldr.w	r2, [r0, #180]	; 0xb4
    e304:	f8d0 10d0 	ldr.w	r1, [r0, #208]	; 0xd0
    e308:	4291      	cmp	r1, r2
    e30a:	d902      	bls.n	e312 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x2a>
    e30c:	f7ff fe96 	bl	e03c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    e310:	e7ee      	b.n	e2f0 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    e312:	2001      	movs	r0, #1
    e314:	bd10      	pop	{r4, pc}

0000e316 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>:
    e316:	b510      	push	{r4, lr}
    e318:	4604      	mov	r4, r0
    e31a:	f890 00b8 	ldrb.w	r0, [r0, #184]	; 0xb8
    e31e:	b170      	cbz	r0, e33e <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x28>
    e320:	2001      	movs	r0, #1
    e322:	f884 00d8 	strb.w	r0, [r4, #216]	; 0xd8
    e326:	4601      	mov	r1, r0
    e328:	4620      	mov	r0, r4
    e32a:	f7ff fe84 	bl	e036 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    e32e:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
    e332:	2803      	cmp	r0, #3
    e334:	d005      	beq.n	e342 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x2c>
    e336:	f894 00b9 	ldrb.w	r0, [r4, #185]	; 0xb9
    e33a:	2800      	cmp	r0, #0
    e33c:	d000      	beq.n	e340 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x2a>
    e33e:	200c      	movs	r0, #12
    e340:	bd10      	pop	{r4, pc}
    e342:	f814 0fa8 	ldrb.w	r0, [r4, #168]!
    e346:	f7f3 fe3b 	bl	1fc0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    e34a:	7820      	ldrb	r0, [r4, #0]
    e34c:	f7f3 ff66 	bl	221c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    e350:	f814 09a8 	ldrb.w	r0, [r4], #-168
    e354:	f7f3 ff40 	bl	21d8 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    e358:	b118      	cbz	r0, e362 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x4c>
    e35a:	2000      	movs	r0, #0
    e35c:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
    e360:	bd10      	pop	{r4, pc}
    e362:	f240 2141 	movw	r1, #577	; 0x241
    e366:	2030      	movs	r0, #48	; 0x30
    e368:	f7f5 fcf8 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e36c <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A>:
    e36c:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
    e370:	4770      	bx	lr

0000e372 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>:
    e372:	f890 00b8 	ldrb.w	r0, [r0, #184]	; 0xb8
    e376:	2800      	cmp	r0, #0
    e378:	d000      	beq.n	e37c <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA+0xa>
    e37a:	2001      	movs	r0, #1
    e37c:	4770      	bx	lr

0000e37e <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>:
    e37e:	b50e      	push	{r1, r2, r3, lr}
    e380:	4669      	mov	r1, sp
    e382:	2001      	movs	r0, #1
    e384:	f7fe ff09 	bl	d19a <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    e388:	b138      	cbz	r0, e39a <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x1c>
    e38a:	f240 116b 	movw	r1, #363	; 0x16b
    e38e:	2030      	movs	r0, #48	; 0x30
    e390:	f7f5 fce4 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e394:	9802      	ldr	r0, [sp, #8]
    e396:	f7ff ffbe 	bl	e316 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>
    e39a:	4668      	mov	r0, sp
    e39c:	f7f5 ff0c 	bl	41b8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    e3a0:	2800      	cmp	r0, #0
    e3a2:	d0f7      	beq.n	e394 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x16>
    e3a4:	f7f8 ffc2 	bl	732c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x158>
    e3a8:	2000      	movs	r0, #0
    e3aa:	bd0e      	pop	{r1, r2, r3, pc}

0000e3ac <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY>:
    e3ac:	b50e      	push	{r1, r2, r3, lr}
    e3ae:	4669      	mov	r1, sp
    e3b0:	2001      	movs	r0, #1
    e3b2:	f7fe fef2 	bl	d19a <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    e3b6:	b150      	cbz	r0, e3ce <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x22>
    e3b8:	f44f 61fb 	mov.w	r1, #2008	; 0x7d8
    e3bc:	2030      	movs	r0, #48	; 0x30
    e3be:	f7f5 fccd 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e3c2:	9802      	ldr	r0, [sp, #8]
    e3c4:	f7ff ffd5 	bl	e372 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    e3c8:	b108      	cbz	r0, e3ce <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x22>
    e3ca:	2000      	movs	r0, #0
    e3cc:	bd0e      	pop	{r1, r2, r3, pc}
    e3ce:	4668      	mov	r0, sp
    e3d0:	f7f5 fef2 	bl	41b8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    e3d4:	2800      	cmp	r0, #0
    e3d6:	d0f4      	beq.n	e3c2 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x16>
    e3d8:	2000      	movs	r0, #0
    e3da:	f7fe fec2 	bl	d162 <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY>
    e3de:	f080 0001 	eor.w	r0, r0, #1
    e3e2:	bd0e      	pop	{r1, r2, r3, pc}

0000e3e4 <sym_RPU47CELOEFE6QEDGTIIWZGB4XELPLNKO5IHKTA>:
    e3e4:	b538      	push	{r3, r4, r5, lr}
    e3e6:	2500      	movs	r5, #0
    e3e8:	4604      	mov	r4, r0
    e3ea:	f880 512c 	strb.w	r5, [r0, #300]	; 0x12c
    e3ee:	f8a0 515c 	strh.w	r5, [r0, #348]	; 0x15c
    e3f2:	462b      	mov	r3, r5
    e3f4:	462a      	mov	r2, r5
    e3f6:	4629      	mov	r1, r5
    e3f8:	9500      	str	r5, [sp, #0]
    e3fa:	f7f9 f93f 	bl	767c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4a8>
    e3fe:	b120      	cbz	r0, e40a <sym_RPU47CELOEFE6QEDGTIIWZGB4XELPLNKO5IHKTA+0x26>
    e400:	f44f 7118 	mov.w	r1, #608	; 0x260
    e404:	2030      	movs	r0, #48	; 0x30
    e406:	f7f5 fca9 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e40a:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
    e40e:	2001      	movs	r0, #1
    e410:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
    e414:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    e418:	f8a4 513e 	strh.w	r5, [r4, #318]	; 0x13e
    e41c:	f8a4 513c 	strh.w	r5, [r4, #316]	; 0x13c
    e420:	f884 5141 	strb.w	r5, [r4, #321]	; 0x141
    e424:	f834 0f74 	ldrh.w	r0, [r4, #116]!
    e428:	1e40      	subs	r0, r0, #1
    e42a:	f824 0bb4 	strh.w	r0, [r4], #180
    e42e:	2000      	movs	r0, #0
    e430:	86e5      	strh	r5, [r4, #54]	; 0x36
    e432:	bd38      	pop	{r3, r4, r5, pc}

0000e434 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY>:
    e434:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e436:	4604      	mov	r4, r0
    e438:	f890 00fb 	ldrb.w	r0, [r0, #251]	; 0xfb
    e43c:	2800      	cmp	r0, #0
    e43e:	d153      	bne.n	e4e8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e440:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    e444:	2803      	cmp	r0, #3
    e446:	d14f      	bne.n	e4e8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e448:	f7fd fd16 	bl	be78 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    e44c:	4601      	mov	r1, r0
    e44e:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    e452:	f7f3 f86f 	bl	1534 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    e456:	2800      	cmp	r0, #0
    e458:	dd46      	ble.n	e4e8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e45a:	6861      	ldr	r1, [r4, #4]
    e45c:	b111      	cbz	r1, e464 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x30>
    e45e:	fbb0 f0f1 	udiv	r0, r0, r1
    e462:	e000      	b.n	e466 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x32>
    e464:	2000      	movs	r0, #0
    e466:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    e46a:	1c40      	adds	r0, r0, #1
    e46c:	4408      	add	r0, r1
    e46e:	f8a4 013c 	strh.w	r0, [r4, #316]	; 0x13c
    e472:	f8b4 013c 	ldrh.w	r0, [r4, #316]	; 0x13c
    e476:	f8b4 10f4 	ldrh.w	r1, [r4, #244]	; 0xf4
    e47a:	1a08      	subs	r0, r1, r0
    e47c:	b200      	sxth	r0, r0
    e47e:	2800      	cmp	r0, #0
    e480:	dd32      	ble.n	e4e8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e482:	f894 0160 	ldrb.w	r0, [r4, #352]	; 0x160
    e486:	f7f3 fd9b 	bl	1fc0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    e48a:	2800      	cmp	r0, #0
    e48c:	d02c      	beq.n	e4e8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e48e:	2001      	movs	r0, #1
    e490:	f884 0141 	strb.w	r0, [r4, #321]	; 0x141
    e494:	f8b4 009e 	ldrh.w	r0, [r4, #158]	; 0x9e
    e498:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
    e49c:	ae01      	add	r6, sp, #4
    e49e:	1a40      	subs	r0, r0, r1
    e4a0:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    e4a4:	1e40      	subs	r0, r0, #1
    e4a6:	4408      	add	r0, r1
    e4a8:	b285      	uxth	r5, r0
    e4aa:	e017      	b.n	e4dc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xa8>
    e4ac:	9600      	str	r6, [sp, #0]
    e4ae:	f8b4 113c 	ldrh.w	r1, [r4, #316]	; 0x13c
    e4b2:	2300      	movs	r3, #0
    e4b4:	2201      	movs	r2, #1
    e4b6:	4620      	mov	r0, r4
    e4b8:	f7f9 f8e0 	bl	767c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4a8>
    e4bc:	2800      	cmp	r0, #0
    e4be:	d013      	beq.n	e4e8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e4c0:	2801      	cmp	r0, #1
    e4c2:	d004      	beq.n	e4ce <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x9a>
    e4c4:	f240 6143 	movw	r1, #1603	; 0x643
    e4c8:	2030      	movs	r0, #48	; 0x30
    e4ca:	f7f5 fc47 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e4ce:	f8b4 013c 	ldrh.w	r0, [r4, #316]	; 0x13c
    e4d2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    e4d6:	4408      	add	r0, r1
    e4d8:	f8a4 013c 	strh.w	r0, [r4, #316]	; 0x13c
    e4dc:	f8b4 013c 	ldrh.w	r0, [r4, #316]	; 0x13c
    e4e0:	1a28      	subs	r0, r5, r0
    e4e2:	b200      	sxth	r0, r0
    e4e4:	2800      	cmp	r0, #0
    e4e6:	dae1      	bge.n	e4ac <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x78>
    e4e8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e4ea:	2000      	movs	r0, #0
    e4ec:	4770      	bx	lr
    e4ee:	b510      	push	{r4, lr}
    e4f0:	4604      	mov	r4, r0
    e4f2:	f814 0fa8 	ldrb.w	r0, [r4, #168]!
    e4f6:	f7f3 fe6f 	bl	21d8 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    e4fa:	2000      	movs	r0, #0
    e4fc:	7420      	strb	r0, [r4, #16]
    e4fe:	bd10      	pop	{r4, pc}
    e500:	b510      	push	{r4, lr}
    e502:	f7ff fd47 	bl	df94 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    e506:	f200 100d 	addw	r0, r0, #269	; 0x10d
    e50a:	bd10      	pop	{r4, pc}
    e50c:	b570      	push	{r4, r5, r6, lr}
    e50e:	4604      	mov	r4, r0
    e510:	f890 00d8 	ldrb.w	r0, [r0, #216]	; 0xd8
    e514:	460d      	mov	r5, r1
    e516:	b108      	cbz	r0, e51c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xe8>
    e518:	2001      	movs	r0, #1
    e51a:	bd70      	pop	{r4, r5, r6, pc}
    e51c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    e520:	b1a8      	cbz	r0, e54e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x11a>
    e522:	4620      	mov	r0, r4
    e524:	f7ff fd32 	bl	df8c <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    e528:	4405      	add	r5, r0
    e52a:	4620      	mov	r0, r4
    e52c:	f7ff ffe8 	bl	e500 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xcc>
    e530:	1941      	adds	r1, r0, r5
    e532:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    e536:	4288      	cmp	r0, r1
    e538:	d206      	bcs.n	e548 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x114>
    e53a:	2001      	movs	r0, #1
    e53c:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
    e540:	4620      	mov	r0, r4
    e542:	f7ff fd7b 	bl	e03c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    e546:	e7e7      	b.n	e518 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xe4>
    e548:	1b40      	subs	r0, r0, r5
    e54a:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
    e54e:	2000      	movs	r0, #0
    e550:	bd70      	pop	{r4, r5, r6, pc}
    e552:	b510      	push	{r4, lr}
    e554:	4604      	mov	r4, r0
    e556:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    e55a:	f000 f883 	bl	e664 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x230>
    e55e:	4602      	mov	r2, r0
    e560:	4620      	mov	r0, r4
    e562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e566:	f240 111b 	movw	r1, #283	; 0x11b
    e56a:	f7ff bc09 	b.w	dd80 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    e56e:	b510      	push	{r4, lr}
    e570:	f7fc fd04 	bl	af7c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    e574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e578:	f7f3 bf7c 	b.w	2474 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    e57c:	b570      	push	{r4, r5, r6, lr}
    e57e:	460c      	mov	r4, r1
    e580:	4605      	mov	r5, r0
    e582:	f001 f8b8 	bl	f6f6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    e586:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    e58a:	4408      	add	r0, r1
    e58c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e590:	fbb0 f6f1 	udiv	r6, r0, r1
    e594:	4628      	mov	r0, r5
    e596:	f001 f8a0 	bl	f6da <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    e59a:	4430      	add	r0, r6
    e59c:	4420      	add	r0, r4
    e59e:	bd70      	pop	{r4, r5, r6, pc}
    e5a0:	f7f3 b8f2 	b.w	1788 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    e5a4:	b510      	push	{r4, lr}
    e5a6:	4604      	mov	r4, r0
    e5a8:	f7ff fd14 	bl	dfd4 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    e5ac:	b1a0      	cbz	r0, e5d8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1a4>
    e5ae:	4620      	mov	r0, r4
    e5b0:	f7ff fd08 	bl	dfc4 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    e5b4:	b918      	cbnz	r0, e5be <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x18a>
    e5b6:	4620      	mov	r0, r4
    e5b8:	f7ff fd0e 	bl	dfd8 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    e5bc:	b120      	cbz	r0, e5c8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x194>
    e5be:	2445      	movs	r4, #69	; 0x45
    e5c0:	f001 f857 	bl	f672 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    e5c4:	b928      	cbnz	r0, e5d2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x19e>
    e5c6:	e001      	b.n	e5cc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x198>
    e5c8:	243e      	movs	r4, #62	; 0x3e
    e5ca:	e7f9      	b.n	e5c0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x18c>
    e5cc:	f001 f847 	bl	f65e <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    e5d0:	b100      	cbz	r0, e5d4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1a0>
    e5d2:	1de4      	adds	r4, r4, #7
    e5d4:	4620      	mov	r0, r4
    e5d6:	bd10      	pop	{r4, pc}
    e5d8:	2067      	movs	r0, #103	; 0x67
    e5da:	bd10      	pop	{r4, pc}
    e5dc:	b510      	push	{r4, lr}
    e5de:	4604      	mov	r4, r0
    e5e0:	2000      	movs	r0, #0
    e5e2:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    e5e6:	f894 0160 	ldrb.w	r0, [r4, #352]	; 0x160
    e5ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e5ee:	f204 1441 	addw	r4, r4, #321	; 0x141
    e5f2:	f7f7 fafb 	bl	5bec <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ>
    e5f6:	7fe0      	ldrb	r0, [r4, #31]
    e5f8:	f7f3 fdee 	bl	21d8 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    e5fc:	2020      	movs	r0, #32
    e5fe:	77e0      	strb	r0, [r4, #31]
    e600:	bd10      	pop	{r4, pc}
    e602:	b508      	push	{r3, lr}
    e604:	2800      	cmp	r0, #0
    e606:	f04f 0101 	mov.w	r1, #1
    e60a:	4668      	mov	r0, sp
    e60c:	d002      	beq.n	e614 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1e0>
    e60e:	f7f5 fc35 	bl	3e7c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    e612:	e001      	b.n	e618 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1e4>
    e614:	f7f5 fc40 	bl	3e98 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
    e618:	f89d 0000 	ldrb.w	r0, [sp]
    e61c:	f242 7110 	movw	r1, #10000	; 0x2710
    e620:	0200      	lsls	r0, r0, #8
    e622:	fbb0 f2f1 	udiv	r2, r0, r1
    e626:	fb01 0012 	mls	r0, r1, r2, r0
    e62a:	bd08      	pop	{r3, pc}
    e62c:	b570      	push	{r4, r5, r6, lr}
    e62e:	460d      	mov	r5, r1
    e630:	4604      	mov	r4, r0
    e632:	f7f7 fab1 	bl	5b98 <sym_BB6RZIMOYUNZ3USIQYGAVMTGA5KFSQWNGRSNZQA>
    e636:	2101      	movs	r1, #1
    e638:	f7fe fda5 	bl	d186 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e63c:	b160      	cbz	r0, e658 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x224>
    e63e:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    e642:	2903      	cmp	r1, #3
    e644:	d108      	bne.n	e658 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x224>
    e646:	f890 10a8 	ldrb.w	r1, [r0, #168]	; 0xa8
    e64a:	42a1      	cmp	r1, r4
    e64c:	d104      	bne.n	e658 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x224>
    e64e:	4629      	mov	r1, r5
    e650:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e654:	f7f9 ba2e 	b.w	7ab4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8e0>
    e658:	4629      	mov	r1, r5
    e65a:	4620      	mov	r0, r4
    e65c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e660:	f7f9 ba80 	b.w	7b64 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x990>
    e664:	b510      	push	{r4, lr}
    e666:	f001 f846 	bl	f6f6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    e66a:	f64d 7141 	movw	r1, #57153	; 0xdf41
    e66e:	4408      	add	r0, r1
    e670:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e674:	fbb0 f0f1 	udiv	r0, r0, r1
    e678:	f500 70bc 	add.w	r0, r0, #376	; 0x178
    e67c:	bd10      	pop	{r4, pc}
    e67e:	01f4      	.short	0x01f4
    e680:	009600fa 	.word	0x009600fa
    e684:	004b0064 	.word	0x004b0064
    e688:	001e0032 	.word	0x001e0032
    e68c:	000a0014 	.word	0x000a0014
    e690:	00020005 	.word	0x00020005
    e694:	0001      	.short	0x0001
    e696:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    e69a:	f001 0307 	and.w	r3, r1, #7
    e69e:	7802      	ldrb	r2, [r0, #0]
    e6a0:	2101      	movs	r1, #1
    e6a2:	4099      	lsls	r1, r3
    e6a4:	438a      	bics	r2, r1
    e6a6:	7002      	strb	r2, [r0, #0]
    e6a8:	4770      	bx	lr

0000e6aa <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    e6aa:	f7f5 bef3 	b.w	4494 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000e6ae <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    e6ae:	2000      	movs	r0, #0
    e6b0:	4770      	bx	lr

0000e6b2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    e6b2:	f7f6 bb7d 	b.w	4db0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>

0000e6b6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
    e6b6:	2100      	movs	r1, #0
    e6b8:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    e6bc:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    e6c0:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    e6c4:	f890 10fb 	ldrb.w	r1, [r0, #251]	; 0xfb
    e6c8:	b109      	cbz	r1, e6ce <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
    e6ca:	2102      	movs	r1, #2
    e6cc:	e000      	b.n	e6d0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
    e6ce:	2103      	movs	r1, #3
    e6d0:	f7f8 bd80 	b.w	71d4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    e6d4:	f890 0074 	ldrb.w	r0, [r0, #116]	; 0x74
    e6d8:	28fe      	cmp	r0, #254	; 0xfe
    e6da:	d001      	beq.n	e6e0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
    e6dc:	2001      	movs	r0, #1
    e6de:	4770      	bx	lr
    e6e0:	2000      	movs	r0, #0
    e6e2:	4770      	bx	lr
    e6e4:	b510      	push	{r4, lr}
    e6e6:	2801      	cmp	r0, #1
    e6e8:	d006      	beq.n	e6f8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    e6ea:	2802      	cmp	r0, #2
    e6ec:	d004      	beq.n	e6f8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    e6ee:	f240 219d 	movw	r1, #669	; 0x29d
    e6f2:	2006      	movs	r0, #6
    e6f4:	f7f5 fb32 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e6f8:	bd10      	pop	{r4, pc}
    e6fa:	2801      	cmp	r0, #1
    e6fc:	d002      	beq.n	e704 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
    e6fe:	2802      	cmp	r0, #2
    e700:	d105      	bne.n	e70e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    e702:	e002      	b.n	e70a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
    e704:	2901      	cmp	r1, #1
    e706:	d004      	beq.n	e712 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    e708:	e001      	b.n	e70e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    e70a:	2902      	cmp	r1, #2
    e70c:	d001      	beq.n	e712 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    e70e:	2000      	movs	r0, #0
    e710:	4770      	bx	lr
    e712:	2001      	movs	r0, #1
    e714:	4770      	bx	lr
    e716:	1a40      	subs	r0, r0, r1
    e718:	b200      	sxth	r0, r0
    e71a:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    e71e:	4288      	cmp	r0, r1
    e720:	dc01      	bgt.n	e726 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
    e722:	2800      	cmp	r0, #0
    e724:	dc01      	bgt.n	e72a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
    e726:	2001      	movs	r0, #1
    e728:	4770      	bx	lr
    e72a:	2000      	movs	r0, #0
    e72c:	4770      	bx	lr
    e72e:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    e732:	f001 0107 	and.w	r1, r1, #7
    e736:	7800      	ldrb	r0, [r0, #0]
    e738:	2201      	movs	r2, #1
    e73a:	408a      	lsls	r2, r1
    e73c:	4010      	ands	r0, r2
    e73e:	40c8      	lsrs	r0, r1
    e740:	4770      	bx	lr
    e742:	b118      	cbz	r0, e74c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x96>
    e744:	2802      	cmp	r0, #2
    e746:	d001      	beq.n	e74c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x96>
    e748:	2001      	movs	r0, #1
    e74a:	4770      	bx	lr
    e74c:	2000      	movs	r0, #0
    e74e:	4770      	bx	lr

0000e750 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    e750:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e754:	7881      	ldrb	r1, [r0, #2]
    e756:	4604      	mov	r4, r0
    e758:	291a      	cmp	r1, #26
    e75a:	d025      	beq.n	e7a8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x58>
    e75c:	dc0e      	bgt.n	e77c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
    e75e:	2916      	cmp	r1, #22
    e760:	d22e      	bcs.n	e7c0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    e762:	e8df f001 	tbb	[pc, r1]
    e766:	2d2d      	.short	0x2d2d
    e768:	212d2d2d 	.word	0x212d2d2d
    e76c:	2d2d2d2d 	.word	0x2d2d2d2d
    e770:	2d2d2d2d 	.word	0x2d2d2d2d
    e774:	2d2d2d2d 	.word	0x2d2d2d2d
    e778:	2121212d 	.word	0x2121212d
    e77c:	292a      	cmp	r1, #42	; 0x2a
    e77e:	d01f      	beq.n	e7c0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    e780:	dc0b      	bgt.n	e79a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
    e782:	f1a1 011e 	sub.w	r1, r1, #30
    e786:	290c      	cmp	r1, #12
    e788:	d21a      	bcs.n	e7c0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    e78a:	e8df f001 	tbb	[pc, r1]
    e78e:	1919      	.short	0x1919
    e790:	19191919 	.word	0x19191919
    e794:	19191919 	.word	0x19191919
    e798:	0d19      	.short	0x0d19
    e79a:	393a      	subs	r1, #58	; 0x3a
    e79c:	2904      	cmp	r1, #4
    e79e:	d20f      	bcs.n	e7c0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    e7a0:	e8df f001 	tbb	[pc, r1]
    e7a4:	020e020e 	.word	0x020e020e
    e7a8:	8820      	ldrh	r0, [r4, #0]
    e7aa:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    e7ae:	d207      	bcs.n	e7c0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    e7b0:	2701      	movs	r7, #1
    e7b2:	4669      	mov	r1, sp
    e7b4:	f7fe fe1f 	bl	d3f6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e7b8:	b120      	cbz	r0, e7c4 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x74>
    e7ba:	2002      	movs	r0, #2
    e7bc:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e7c0:	2012      	movs	r0, #18
    e7c2:	e7fb      	b.n	e7bc <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    e7c4:	9d01      	ldr	r5, [sp, #4]
    e7c6:	4668      	mov	r0, sp
    e7c8:	462e      	mov	r6, r5
    e7ca:	f505 75b8 	add.w	r5, r5, #368	; 0x170
    e7ce:	f206 1671 	addw	r6, r6, #369	; 0x171
    e7d2:	f000 fe24 	bl	f41e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x340>
    e7d6:	b108      	cbz	r0, e7dc <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8c>
    e7d8:	7828      	ldrb	r0, [r5, #0]
    e7da:	b108      	cbz	r0, e7e0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x90>
    e7dc:	200c      	movs	r0, #12
    e7de:	e7ed      	b.n	e7bc <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    e7e0:	702f      	strb	r7, [r5, #0]
    e7e2:	78a0      	ldrb	r0, [r4, #2]
    e7e4:	7030      	strb	r0, [r6, #0]
    e7e6:	4668      	mov	r0, sp
    e7e8:	f7ff f9b6 	bl	db58 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    e7ec:	2000      	movs	r0, #0
    e7ee:	e7e5      	b.n	e7bc <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>

0000e7f0 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    e7f0:	b510      	push	{r4, lr}
    e7f2:	4604      	mov	r4, r0
    e7f4:	7800      	ldrb	r0, [r0, #0]
    e7f6:	b118      	cbz	r0, e800 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    e7f8:	2801      	cmp	r0, #1
    e7fa:	d001      	beq.n	e800 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    e7fc:	2012      	movs	r0, #18
    e7fe:	bd10      	pop	{r4, pc}
    e800:	f000 fdc1 	bl	f386 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a8>
    e804:	b120      	cbz	r0, e810 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    e806:	f7f6 ff23 	bl	5650 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    e80a:	b108      	cbz	r0, e810 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    e80c:	200c      	movs	r0, #12
    e80e:	bd10      	pop	{r4, pc}
    e810:	7820      	ldrb	r0, [r4, #0]
    e812:	f7ff ff96 	bl	e742 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    e816:	1de2      	adds	r2, r4, #7
    e818:	f104 0317 	add.w	r3, r4, #23
    e81c:	1c61      	adds	r1, r4, #1
    e81e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e822:	f7f6 bf47 	b.w	56b4 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0000e826 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    e826:	b510      	push	{r4, lr}
    e828:	4604      	mov	r4, r0
    e82a:	f000 fe6c 	bl	f506 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x428>
    e82e:	b108      	cbz	r0, e834 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    e830:	200c      	movs	r0, #12
    e832:	bd10      	pop	{r4, pc}
    e834:	7820      	ldrb	r0, [r4, #0]
    e836:	b118      	cbz	r0, e840 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    e838:	2801      	cmp	r0, #1
    e83a:	d001      	beq.n	e840 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    e83c:	2012      	movs	r0, #18
    e83e:	bd10      	pop	{r4, pc}
    e840:	f7ff ff7f 	bl	e742 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    e844:	1c61      	adds	r1, r4, #1
    e846:	f7f6 ffad 	bl	57a4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    e84a:	b108      	cbz	r0, e850 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    e84c:	2000      	movs	r0, #0
    e84e:	bd10      	pop	{r4, pc}
    e850:	2007      	movs	r0, #7
    e852:	bd10      	pop	{r4, pc}

0000e854 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    e854:	b510      	push	{r4, lr}
    e856:	f000 fd96 	bl	f386 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a8>
    e85a:	b120      	cbz	r0, e866 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    e85c:	f7f6 fef8 	bl	5650 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    e860:	b108      	cbz	r0, e866 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    e862:	200c      	movs	r0, #12
    e864:	bd10      	pop	{r4, pc}
    e866:	f7f6 ff6b 	bl	5740 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    e86a:	2000      	movs	r0, #0
    e86c:	bd10      	pop	{r4, pc}

0000e86e <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    e86e:	b510      	push	{r4, lr}
    e870:	f000 fe49 	bl	f506 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x428>
    e874:	b108      	cbz	r0, e87a <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    e876:	200c      	movs	r0, #12
    e878:	bd10      	pop	{r4, pc}
    e87a:	f7f6 ffbb 	bl	57f4 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    e87e:	2000      	movs	r0, #0
    e880:	bd10      	pop	{r4, pc}

0000e882 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    e882:	b510      	push	{r4, lr}
    e884:	460b      	mov	r3, r1
    e886:	2201      	movs	r2, #1
    e888:	f100 0110 	add.w	r1, r0, #16
    e88c:	f7fe fd95 	bl	d3ba <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    e890:	2000      	movs	r0, #0
    e892:	bd10      	pop	{r4, pc}

0000e894 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    e894:	b510      	push	{r4, lr}
    e896:	8800      	ldrh	r0, [r0, #0]
    e898:	2100      	movs	r1, #0
    e89a:	f7fe fc74 	bl	d186 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e89e:	b118      	cbz	r0, e8a8 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    e8a0:	f890 1173 	ldrb.w	r1, [r0, #371]	; 0x173
    e8a4:	b111      	cbz	r1, e8ac <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    e8a6:	e007      	b.n	e8b8 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    e8a8:	2002      	movs	r0, #2
    e8aa:	bd10      	pop	{r4, pc}
    e8ac:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    e8b0:	2914      	cmp	r1, #20
    e8b2:	d003      	beq.n	e8bc <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    e8b4:	2915      	cmp	r1, #21
    e8b6:	d001      	beq.n	e8bc <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    e8b8:	200c      	movs	r0, #12
    e8ba:	bd10      	pop	{r4, pc}
    e8bc:	2102      	movs	r1, #2
    e8be:	f880 1173 	strb.w	r1, [r0, #371]	; 0x173
    e8c2:	2000      	movs	r0, #0
    e8c4:	bd10      	pop	{r4, pc}

0000e8c6 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
    e8c6:	b538      	push	{r3, r4, r5, lr}
    e8c8:	4605      	mov	r5, r0
    e8ca:	8800      	ldrh	r0, [r0, #0]
    e8cc:	2100      	movs	r1, #0
    e8ce:	f7fe fc5a 	bl	d186 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e8d2:	0004      	movs	r4, r0
    e8d4:	d003      	beq.n	e8de <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
    e8d6:	f894 0173 	ldrb.w	r0, [r4, #371]	; 0x173
    e8da:	b110      	cbz	r0, e8e2 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
    e8dc:	e010      	b.n	e900 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3a>
    e8de:	2002      	movs	r0, #2
    e8e0:	bd38      	pop	{r3, r4, r5, pc}
    e8e2:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
    e8e6:	2814      	cmp	r0, #20
    e8e8:	d001      	beq.n	e8ee <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
    e8ea:	2815      	cmp	r0, #21
    e8ec:	d108      	bne.n	e900 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3a>
    e8ee:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    e8f2:	f88d 0000 	strb.w	r0, [sp]
    e8f6:	9800      	ldr	r0, [sp, #0]
    e8f8:	9000      	str	r0, [sp, #0]
    e8fa:	f89d 0000 	ldrb.w	r0, [sp]
    e8fe:	b108      	cbz	r0, e904 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3e>
    e900:	200c      	movs	r0, #12
    e902:	bd38      	pop	{r3, r4, r5, pc}
    e904:	2210      	movs	r2, #16
    e906:	1ca9      	adds	r1, r5, #2
    e908:	f504 70ba 	add.w	r0, r4, #372	; 0x174
    e90c:	f7fd fc29 	bl	c162 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e910:	2001      	movs	r0, #1
    e912:	f884 0173 	strb.w	r0, [r4, #371]	; 0x173
    e916:	2000      	movs	r0, #0
    e918:	bd38      	pop	{r3, r4, r5, pc}

0000e91a <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    e91a:	b510      	push	{r4, lr}
    e91c:	2108      	movs	r1, #8
    e91e:	f7f5 fac9 	bl	3eb4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e922:	2000      	movs	r0, #0
    e924:	bd10      	pop	{r4, pc}

0000e926 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    e926:	b510      	push	{r4, lr}
    e928:	4604      	mov	r4, r0
    e92a:	2101      	movs	r1, #1
    e92c:	2000      	movs	r0, #0
    e92e:	f7fe fc2a 	bl	d186 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e932:	b120      	cbz	r0, e93e <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q+0x18>
    e934:	f7ff fb54 	bl	dfe0 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    e938:	7020      	strb	r0, [r4, #0]
    e93a:	2000      	movs	r0, #0
    e93c:	bd10      	pop	{r4, pc}
    e93e:	f240 51e4 	movw	r1, #1508	; 0x5e4
    e942:	2039      	movs	r0, #57	; 0x39
    e944:	f7f5 fa0a 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e948 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    e948:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e94a:	460c      	mov	r4, r1
    e94c:	4605      	mov	r5, r0
    e94e:	8800      	ldrh	r0, [r0, #0]
    e950:	4669      	mov	r1, sp
    e952:	f7fe fd50 	bl	d3f6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e956:	2200      	movs	r2, #0
    e958:	b128      	cbz	r0, e966 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    e95a:	f8c4 2002 	str.w	r2, [r4, #2]
    e95e:	71a2      	strb	r2, [r4, #6]
    e960:	8022      	strh	r2, [r4, #0]
    e962:	2002      	movs	r0, #2
    e964:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e966:	9901      	ldr	r1, [sp, #4]
    e968:	4608      	mov	r0, r1
    e96a:	3170      	adds	r1, #112	; 0x70
    e96c:	f881 2046 	strb.w	r2, [r1, #70]	; 0x46
    e970:	68c3      	ldr	r3, [r0, #12]
    e972:	f8c4 3002 	str.w	r3, [r4, #2]
    e976:	7c03      	ldrb	r3, [r0, #16]
    e978:	71a3      	strb	r3, [r4, #6]
    e97a:	882b      	ldrh	r3, [r5, #0]
    e97c:	8023      	strh	r3, [r4, #0]
    e97e:	f891 3046 	ldrb.w	r3, [r1, #70]	; 0x46
    e982:	2b00      	cmp	r3, #0
    e984:	d1f2      	bne.n	e96c <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    e986:	2000      	movs	r0, #0
    e988:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000e98a <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    e98a:	b510      	push	{r4, lr}
    e98c:	4604      	mov	r4, r0
    e98e:	f000 fd40 	bl	f412 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x334>
    e992:	b140      	cbz	r0, e9a6 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A+0x1c>
    e994:	20fb      	movs	r0, #251	; 0xfb
    e996:	8020      	strh	r0, [r4, #0]
    e998:	f640 0148 	movw	r1, #2120	; 0x848
    e99c:	8061      	strh	r1, [r4, #2]
    e99e:	80a0      	strh	r0, [r4, #4]
    e9a0:	80e1      	strh	r1, [r4, #6]
    e9a2:	2000      	movs	r0, #0
    e9a4:	bd10      	pop	{r4, pc}
    e9a6:	2001      	movs	r0, #1
    e9a8:	bd10      	pop	{r4, pc}

0000e9aa <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
    e9aa:	2108      	movs	r1, #8
    e9ac:	7001      	strb	r1, [r0, #0]
    e9ae:	2000      	movs	r0, #0
    e9b0:	4770      	bx	lr

0000e9b2 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    e9b2:	b510      	push	{r4, lr}
    e9b4:	4604      	mov	r4, r0
    e9b6:	20d8      	movs	r0, #216	; 0xd8
    e9b8:	7020      	strb	r0, [r4, #0]
    e9ba:	f000 fd0b 	bl	f3d4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f6>
    e9be:	7060      	strb	r0, [r4, #1]
    e9c0:	2000      	movs	r0, #0
    e9c2:	bd10      	pop	{r4, pc}

0000e9c4 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    e9c4:	2108      	movs	r1, #8
    e9c6:	7001      	strb	r1, [r0, #0]
    e9c8:	2000      	movs	r0, #0
    e9ca:	4770      	bx	lr

0000e9cc <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
    e9cc:	b510      	push	{r4, lr}
    e9ce:	4604      	mov	r4, r0
    e9d0:	7800      	ldrb	r0, [r0, #0]
    e9d2:	b108      	cbz	r0, e9d8 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
    e9d4:	2801      	cmp	r0, #1
    e9d6:	d110      	bne.n	e9fa <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    e9d8:	f000 fcd5 	bl	f386 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a8>
    e9dc:	b120      	cbz	r0, e9e8 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    e9de:	f7f6 fe37 	bl	5650 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    e9e2:	b108      	cbz	r0, e9e8 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    e9e4:	200c      	movs	r0, #12
    e9e6:	bd10      	pop	{r4, pc}
    e9e8:	7820      	ldrb	r0, [r4, #0]
    e9ea:	f7ff feaa 	bl	e742 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    e9ee:	1c61      	adds	r1, r4, #1
    e9f0:	f7fe fcc9 	bl	d386 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
    e9f4:	b108      	cbz	r0, e9fa <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    e9f6:	2000      	movs	r0, #0
    e9f8:	bd10      	pop	{r4, pc}
    e9fa:	2012      	movs	r0, #18
    e9fc:	bd10      	pop	{r4, pc}

0000e9fe <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    e9fe:	b510      	push	{r4, lr}
    ea00:	4604      	mov	r4, r0
    ea02:	f000 fd80 	bl	f506 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x428>
    ea06:	b108      	cbz	r0, ea0c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    ea08:	200c      	movs	r0, #12
    ea0a:	bd10      	pop	{r4, pc}
    ea0c:	7820      	ldrb	r0, [r4, #0]
    ea0e:	b108      	cbz	r0, ea14 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    ea10:	2801      	cmp	r0, #1
    ea12:	d107      	bne.n	ea24 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    ea14:	f7ff fe95 	bl	e742 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    ea18:	1c61      	adds	r1, r4, #1
    ea1a:	f7fe fcc3 	bl	d3a4 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    ea1e:	b108      	cbz	r0, ea24 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    ea20:	2000      	movs	r0, #0
    ea22:	bd10      	pop	{r4, pc}
    ea24:	2012      	movs	r0, #18
    ea26:	bd10      	pop	{r4, pc}

0000ea28 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
    ea28:	b510      	push	{r4, lr}
    ea2a:	4604      	mov	r4, r0
    ea2c:	f000 fcab 	bl	f386 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a8>
    ea30:	b108      	cbz	r0, ea36 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
    ea32:	200c      	movs	r0, #12
    ea34:	bd10      	pop	{r4, pc}
    ea36:	7820      	ldrb	r0, [r4, #0]
    ea38:	f000 0001 	and.w	r0, r0, #1
    ea3c:	f7f6 fe02 	bl	5644 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
    ea40:	2000      	movs	r0, #0
    ea42:	bd10      	pop	{r4, pc}

0000ea44 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    ea44:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ea46:	4605      	mov	r5, r0
    ea48:	2000      	movs	r0, #0
    ea4a:	f7f5 fdc5 	bl	45d8 <sym_AXKF6JGHLS2U2Y5QV7LNOO6EESEIJEBW7BXAIPY>
    ea4e:	0004      	movs	r4, r0
    ea50:	d01e      	beq.n	ea90 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x4c>
    ea52:	f104 0022 	add.w	r0, r4, #34	; 0x22
    ea56:	6020      	str	r0, [r4, #0]
    ea58:	301f      	adds	r0, #31
    ea5a:	60a0      	str	r0, [r4, #8]
    ea5c:	f894 0020 	ldrb.w	r0, [r4, #32]
    ea60:	2600      	movs	r6, #0
    ea62:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    ea66:	221f      	movs	r2, #31
    ea68:	8086      	strh	r6, [r0, #4]
    ea6a:	f894 0020 	ldrb.w	r0, [r4, #32]
    ea6e:	1c40      	adds	r0, r0, #1
    ea70:	f000 0001 	and.w	r0, r0, #1
    ea74:	f884 0020 	strb.w	r0, [r4, #32]
    ea78:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
    ea7c:	7829      	ldrb	r1, [r5, #0]
    ea7e:	1c68      	adds	r0, r5, #1
    ea80:	f000 fb87 	bl	f192 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xb4>
    ea84:	b130      	cbz	r0, ea94 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x50>
    ea86:	f241 5101 	movw	r1, #5377	; 0x1501
    ea8a:	2039      	movs	r0, #57	; 0x39
    ea8c:	f7f5 f966 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea90:	2007      	movs	r0, #7
    ea92:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ea94:	f894 0020 	ldrb.w	r0, [r4, #32]
    ea98:	f854 0030 	ldr.w	r0, [r4, r0, lsl #3]
    ea9c:	9001      	str	r0, [sp, #4]
    ea9e:	7828      	ldrb	r0, [r5, #0]
    eaa0:	f8ad 0002 	strh.w	r0, [sp, #2]
    eaa4:	f88d 6000 	strb.w	r6, [sp]
    eaa8:	4668      	mov	r0, sp
    eaaa:	f000 f9de 	bl	ee6a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    eaae:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000eab0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    eab0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    eab2:	4606      	mov	r6, r0
    eab4:	2101      	movs	r1, #1
    eab6:	2000      	movs	r0, #0
    eab8:	f7fe fb65 	bl	d186 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    eabc:	0005      	movs	r5, r0
    eabe:	d019      	beq.n	eaf4 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x44>
    eac0:	7830      	ldrb	r0, [r6, #0]
    eac2:	2400      	movs	r4, #0
    eac4:	b160      	cbz	r0, eae0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x30>
    eac6:	f88d 4004 	strb.w	r4, [sp, #4]
    eaca:	f10d 0105 	add.w	r1, sp, #5
    eace:	2001      	movs	r0, #1
    ead0:	f7f5 ffb2 	bl	4a38 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    ead4:	b120      	cbz	r0, eae0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x30>
    ead6:	a801      	add	r0, sp, #4
    ead8:	f000 f89e 	bl	ec18 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    eadc:	2800      	cmp	r0, #0
    eade:	d117      	bne.n	eb10 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x60>
    eae0:	f88d 4000 	strb.w	r4, [sp]
    eae4:	4628      	mov	r0, r5
    eae6:	f7ff fa71 	bl	dfcc <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    eaea:	b140      	cbz	r0, eafe <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x4e>
    eaec:	2080      	movs	r0, #128	; 0x80
    eaee:	f8ad 0001 	strh.w	r0, [sp, #1]
    eaf2:	e006      	b.n	eb02 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x52>
    eaf4:	f241 5185 	movw	r1, #5509	; 0x1585
    eaf8:	2039      	movs	r0, #57	; 0x39
    eafa:	f7f5 f92f 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eafe:	f8ad 4001 	strh.w	r4, [sp, #1]
    eb02:	f88d 4003 	strb.w	r4, [sp, #3]
    eb06:	7830      	ldrb	r0, [r6, #0]
    eb08:	2801      	cmp	r0, #1
    eb0a:	d002      	beq.n	eb12 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x62>
    eb0c:	b130      	cbz	r0, eb1c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x6c>
    eb0e:	2012      	movs	r0, #18
    eb10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    eb12:	4669      	mov	r1, sp
    eb14:	4628      	mov	r0, r5
    eb16:	f7fb fc11 	bl	a33c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    eb1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    eb1c:	4628      	mov	r0, r5
    eb1e:	f000 fc95 	bl	f44c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x36e>
    eb22:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000eb24 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    eb24:	b530      	push	{r4, r5, lr}
    eb26:	4604      	mov	r4, r0
    eb28:	b08b      	sub	sp, #44	; 0x2c
    eb2a:	2101      	movs	r1, #1
    eb2c:	2000      	movs	r0, #0
    eb2e:	f7fe fb2a 	bl	d186 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    eb32:	0001      	movs	r1, r0
    eb34:	d006      	beq.n	eb44 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
    eb36:	8860      	ldrh	r0, [r4, #2]
    eb38:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    eb3c:	d905      	bls.n	eb4a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x26>
    eb3e:	2012      	movs	r0, #18
    eb40:	b00b      	add	sp, #44	; 0x2c
    eb42:	bd30      	pop	{r4, r5, pc}
    eb44:	f241 11d8 	movw	r1, #4568	; 0x11d8
    eb48:	e063      	b.n	ec12 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xee>
    eb4a:	2500      	movs	r5, #0
    eb4c:	f88d 5004 	strb.w	r5, [sp, #4]
    eb50:	7922      	ldrb	r2, [r4, #4]
    eb52:	9500      	str	r5, [sp, #0]
    eb54:	f89d 0000 	ldrb.w	r0, [sp]
    eb58:	2a05      	cmp	r2, #5
    eb5a:	f040 0010 	orr.w	r0, r0, #16
    eb5e:	f88d 0000 	strb.w	r0, [sp]
    eb62:	d254      	bcs.n	ec0e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xea>
    eb64:	e8df f002 	tbb	[pc, r2]
    eb68:	11050803 	.word	0x11050803
    eb6c:	000b      	.short	0x000b
    eb6e:	f040 0001 	orr.w	r0, r0, #1
    eb72:	f040 0002 	orr.w	r0, r0, #2
    eb76:	e006      	b.n	eb86 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x62>
    eb78:	f040 0009 	orr.w	r0, r0, #9
    eb7c:	e001      	b.n	eb82 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5e>
    eb7e:	f040 0001 	orr.w	r0, r0, #1
    eb82:	f040 0004 	orr.w	r0, r0, #4
    eb86:	f88d 0000 	strb.w	r0, [sp]
    eb8a:	f8bd 0000 	ldrh.w	r0, [sp]
    eb8e:	9000      	str	r0, [sp, #0]
    eb90:	f8bd 0000 	ldrh.w	r0, [sp]
    eb94:	f8ad 0005 	strh.w	r0, [sp, #5]
    eb98:	8822      	ldrh	r2, [r4, #0]
    eb9a:	f8dd 0006 	ldr.w	r0, [sp, #6]
    eb9e:	f362 201f 	bfi	r0, r2, #8, #24
    eba2:	f8cd 0006 	str.w	r0, [sp, #6]
    eba6:	8862      	ldrh	r2, [r4, #2]
    eba8:	f8dd 0009 	ldr.w	r0, [sp, #9]
    ebac:	f362 201f 	bfi	r0, r2, #8, #24
    ebb0:	f8cd 0009 	str.w	r0, [sp, #9]
    ebb4:	7b60      	ldrb	r0, [r4, #13]
    ebb6:	f88d 000d 	strb.w	r0, [sp, #13]
    ebba:	7960      	ldrb	r0, [r4, #5]
    ebbc:	f88d 000e 	strb.w	r0, [sp, #14]
    ebc0:	79a0      	ldrb	r0, [r4, #6]
    ebc2:	f88d 000f 	strb.w	r0, [sp, #15]
    ebc6:	f8d4 0007 	ldr.w	r0, [r4, #7]
    ebca:	9004      	str	r0, [sp, #16]
    ebcc:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    ebd0:	f8ad 0014 	strh.w	r0, [sp, #20]
    ebd4:	7ba0      	ldrb	r0, [r4, #14]
    ebd6:	f88d 0016 	strb.w	r0, [sp, #22]
    ebda:	207f      	movs	r0, #127	; 0x7f
    ebdc:	f88d 0017 	strb.w	r0, [sp, #23]
    ebe0:	2001      	movs	r0, #1
    ebe2:	f88d 0018 	strb.w	r0, [sp, #24]
    ebe6:	f88d 5019 	strb.w	r5, [sp, #25]
    ebea:	f88d 001a 	strb.w	r0, [sp, #26]
    ebee:	f88d 501b 	strb.w	r5, [sp, #27]
    ebf2:	4608      	mov	r0, r1
    ebf4:	f7ff fa06 	bl	e004 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    ebf8:	f88d 001c 	strb.w	r0, [sp, #28]
    ebfc:	f88d 501d 	strb.w	r5, [sp, #29]
    ec00:	f88d 501e 	strb.w	r5, [sp, #30]
    ec04:	a909      	add	r1, sp, #36	; 0x24
    ec06:	a801      	add	r0, sp, #4
    ec08:	f7fb fa36 	bl	a078 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    ec0c:	e798      	b.n	eb40 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
    ec0e:	f241 01bc 	movw	r1, #4284	; 0x10bc
    ec12:	2039      	movs	r0, #57	; 0x39
    ec14:	f7f5 f8a2 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000ec18 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    ec18:	b570      	push	{r4, r5, r6, lr}
    ec1a:	4604      	mov	r4, r0
    ec1c:	7800      	ldrb	r0, [r0, #0]
    ec1e:	2101      	movs	r1, #1
    ec20:	f7fe fab1 	bl	d186 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ec24:	0005      	movs	r5, r0
    ec26:	d007      	beq.n	ec38 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    ec28:	f7ff fba3 	bl	e372 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    ec2c:	b160      	cbz	r0, ec48 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    ec2e:	4628      	mov	r0, r5
    ec30:	f7ff f9d2 	bl	dfd8 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    ec34:	b110      	cbz	r0, ec3c <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    ec36:	e005      	b.n	ec44 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    ec38:	2042      	movs	r0, #66	; 0x42
    ec3a:	bd70      	pop	{r4, r5, r6, pc}
    ec3c:	4628      	mov	r0, r5
    ec3e:	f7ff f9c1 	bl	dfc4 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    ec42:	b108      	cbz	r0, ec48 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    ec44:	200c      	movs	r0, #12
    ec46:	bd70      	pop	{r4, r5, r6, pc}
    ec48:	1c61      	adds	r1, r4, #1
    ec4a:	4628      	mov	r0, r5
    ec4c:	f7ff f9d2 	bl	dff4 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    ec50:	2000      	movs	r0, #0
    ec52:	bd70      	pop	{r4, r5, r6, pc}

0000ec54 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    ec54:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    ec56:	460d      	mov	r5, r1
    ec58:	4604      	mov	r4, r0
    ec5a:	f000 fbda 	bl	f412 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x334>
    ec5e:	b130      	cbz	r0, ec6e <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    ec60:	88a2      	ldrh	r2, [r4, #4]
    ec62:	f244 2090 	movw	r0, #17040	; 0x4290
    ec66:	4282      	cmp	r2, r0
    ec68:	d903      	bls.n	ec72 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1e>
    ec6a:	2012      	movs	r0, #18
    ec6c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ec6e:	2001      	movs	r0, #1
    ec70:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ec72:	f640 0048 	movw	r0, #2120	; 0x848
    ec76:	4282      	cmp	r2, r0
    ec78:	d300      	bcc.n	ec7c <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x28>
    ec7a:	4602      	mov	r2, r0
    ec7c:	8820      	ldrh	r0, [r4, #0]
    ec7e:	f8ad 0000 	strh.w	r0, [sp]
    ec82:	8860      	ldrh	r0, [r4, #2]
    ec84:	f8ad 0002 	strh.w	r0, [sp, #2]
    ec88:	f8ad 2004 	strh.w	r2, [sp, #4]
    ec8c:	8860      	ldrh	r0, [r4, #2]
    ec8e:	f8ad 0006 	strh.w	r0, [sp, #6]
    ec92:	f8ad 2008 	strh.w	r2, [sp, #8]
    ec96:	8820      	ldrh	r0, [r4, #0]
    ec98:	8028      	strh	r0, [r5, #0]
    ec9a:	4668      	mov	r0, sp
    ec9c:	f7fb fc1c 	bl	a4d8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    eca0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000eca2 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    eca2:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    eca4:	4604      	mov	r4, r0
    eca6:	f7fb fd77 	bl	a798 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    ecaa:	f3c0 2000 	ubfx	r0, r0, #8, #1
    ecae:	b1b0      	cbz	r0, ecde <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3c>
    ecb0:	f10d 0007 	add.w	r0, sp, #7
    ecb4:	9000      	str	r0, [sp, #0]
    ecb6:	7922      	ldrb	r2, [r4, #4]
    ecb8:	78e1      	ldrb	r1, [r4, #3]
    ecba:	78a0      	ldrb	r0, [r4, #2]
    ecbc:	f10d 0306 	add.w	r3, sp, #6
    ecc0:	f000 fbe5 	bl	f48e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3b0>
    ecc4:	2800      	cmp	r0, #0
    ecc6:	d109      	bne.n	ecdc <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3a>
    ecc8:	8820      	ldrh	r0, [r4, #0]
    ecca:	f8ad 0004 	strh.w	r0, [sp, #4]
    ecce:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    ecd2:	f8ad 0008 	strh.w	r0, [sp, #8]
    ecd6:	a801      	add	r0, sp, #4
    ecd8:	f000 f903 	bl	eee2 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    ecdc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ecde:	2001      	movs	r0, #1
    ece0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000ece2 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
    ece2:	b510      	push	{r4, lr}
    ece4:	4604      	mov	r4, r0
    ece6:	f000 fb4e 	bl	f386 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a8>
    ecea:	b120      	cbz	r0, ecf6 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    ecec:	f7f6 fcb0 	bl	5650 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    ecf0:	b108      	cbz	r0, ecf6 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    ecf2:	200c      	movs	r0, #12
    ecf4:	bd10      	pop	{r4, pc}
    ecf6:	7820      	ldrb	r0, [r4, #0]
    ecf8:	f7ff fd23 	bl	e742 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    ecfc:	79e2      	ldrb	r2, [r4, #7]
    ecfe:	1c61      	adds	r1, r4, #1
    ed00:	f7f6 fc54 	bl	55ac <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
    ed04:	b108      	cbz	r0, ed0a <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
    ed06:	2000      	movs	r0, #0
    ed08:	bd10      	pop	{r4, pc}
    ed0a:	2002      	movs	r0, #2
    ed0c:	bd10      	pop	{r4, pc}

0000ed0e <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    ed0e:	b510      	push	{r4, lr}
    ed10:	4604      	mov	r4, r0
    ed12:	2001      	movs	r0, #1
    ed14:	f000 fa22 	bl	f15c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
    ed18:	b128      	cbz	r0, ed26 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    ed1a:	4621      	mov	r1, r4
    ed1c:	2001      	movs	r0, #1
    ed1e:	f7f5 fea3 	bl	4a68 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    ed22:	2000      	movs	r0, #0
    ed24:	bd10      	pop	{r4, pc}
    ed26:	200c      	movs	r0, #12
    ed28:	bd10      	pop	{r4, pc}

0000ed2a <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
    ed2a:	b510      	push	{r4, lr}
    ed2c:	8800      	ldrh	r0, [r0, #0]
    ed2e:	f7f6 fd1d 	bl	576c <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
    ed32:	b108      	cbz	r0, ed38 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
    ed34:	2000      	movs	r0, #0
    ed36:	bd10      	pop	{r4, pc}
    ed38:	2030      	movs	r0, #48	; 0x30
    ed3a:	bd10      	pop	{r4, pc}

0000ed3c <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    ed3c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ed3e:	4605      	mov	r5, r0
    ed40:	2000      	movs	r0, #0
    ed42:	f7f5 fc49 	bl	45d8 <sym_AXKF6JGHLS2U2Y5QV7LNOO6EESEIJEBW7BXAIPY>
    ed46:	0004      	movs	r4, r0
    ed48:	d01f      	beq.n	ed8a <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x4e>
    ed4a:	f104 0060 	add.w	r0, r4, #96	; 0x60
    ed4e:	6120      	str	r0, [r4, #16]
    ed50:	301f      	adds	r0, #31
    ed52:	61a0      	str	r0, [r4, #24]
    ed54:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    ed58:	2600      	movs	r6, #0
    ed5a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    ed5e:	221f      	movs	r2, #31
    ed60:	8286      	strh	r6, [r0, #20]
    ed62:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    ed66:	1c40      	adds	r0, r0, #1
    ed68:	f000 0001 	and.w	r0, r0, #1
    ed6c:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    ed70:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
    ed74:	7829      	ldrb	r1, [r5, #0]
    ed76:	1c68      	adds	r0, r5, #1
    ed78:	3310      	adds	r3, #16
    ed7a:	f000 fa0a 	bl	f192 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xb4>
    ed7e:	b130      	cbz	r0, ed8e <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x52>
    ed80:	f241 3132 	movw	r1, #4914	; 0x1332
    ed84:	2039      	movs	r0, #57	; 0x39
    ed86:	f7f4 ffe9 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ed8a:	2007      	movs	r0, #7
    ed8c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ed8e:	f88d 6000 	strb.w	r6, [sp]
    ed92:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    ed96:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    ed9a:	6900      	ldr	r0, [r0, #16]
    ed9c:	9001      	str	r0, [sp, #4]
    ed9e:	7828      	ldrb	r0, [r5, #0]
    eda0:	f8ad 0002 	strh.w	r0, [sp, #2]
    eda4:	4668      	mov	r0, sp
    eda6:	f000 f87e 	bl	eea6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    edaa:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000edac <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    edac:	b51c      	push	{r2, r3, r4, lr}
    edae:	4604      	mov	r4, r0
    edb0:	f000 fb2f 	bl	f412 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x334>
    edb4:	b178      	cbz	r0, edd6 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x2a>
    edb6:	8820      	ldrh	r0, [r4, #0]
    edb8:	f8ad 0000 	strh.w	r0, [sp]
    edbc:	8860      	ldrh	r0, [r4, #2]
    edbe:	f8ad 0002 	strh.w	r0, [sp, #2]
    edc2:	8820      	ldrh	r0, [r4, #0]
    edc4:	f8ad 0004 	strh.w	r0, [sp, #4]
    edc8:	8860      	ldrh	r0, [r4, #2]
    edca:	f8ad 0006 	strh.w	r0, [sp, #6]
    edce:	4668      	mov	r0, sp
    edd0:	f7fb fc06 	bl	a5e0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a4>
    edd4:	bd1c      	pop	{r2, r3, r4, pc}
    edd6:	2001      	movs	r0, #1
    edd8:	bd1c      	pop	{r2, r3, r4, pc}

0000edda <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    edda:	b510      	push	{r4, lr}
    eddc:	f7f5 fe68 	bl	4ab0 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    ede0:	2000      	movs	r0, #0
    ede2:	bd10      	pop	{r4, pc}

0000ede4 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    ede4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ede6:	460c      	mov	r4, r1
    ede8:	4605      	mov	r5, r0
    edea:	f000 fb12 	bl	f412 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x334>
    edee:	b160      	cbz	r0, ee0a <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x26>
    edf0:	4669      	mov	r1, sp
    edf2:	4628      	mov	r0, r5
    edf4:	f7fe faff 	bl	d3f6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    edf8:	2800      	cmp	r0, #0
    edfa:	d105      	bne.n	ee08 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x24>
    edfc:	2100      	movs	r1, #0
    edfe:	4622      	mov	r2, r4
    ee00:	9801      	ldr	r0, [sp, #4]
    ee02:	f000 fa8a 	bl	f31a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x23c>
    ee06:	2000      	movs	r0, #0
    ee08:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ee0a:	2001      	movs	r0, #1
    ee0c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000ee0e <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    ee0e:	b510      	push	{r4, lr}
    ee10:	4604      	mov	r4, r0
    ee12:	2000      	movs	r0, #0
    ee14:	f000 f9a2 	bl	f15c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
    ee18:	b128      	cbz	r0, ee26 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
    ee1a:	4621      	mov	r1, r4
    ee1c:	2000      	movs	r0, #0
    ee1e:	f7f5 fe23 	bl	4a68 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    ee22:	2000      	movs	r0, #0
    ee24:	bd10      	pop	{r4, pc}
    ee26:	200c      	movs	r0, #12
    ee28:	bd10      	pop	{r4, pc}

0000ee2a <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY>:
    ee2a:	b510      	push	{r4, lr}
    ee2c:	4604      	mov	r4, r0
    ee2e:	f7ff fabd 	bl	e3ac <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY>
    ee32:	b120      	cbz	r0, ee3e <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY+0x14>
    ee34:	7820      	ldrb	r0, [r4, #0]
    ee36:	f7f8 f991 	bl	715c <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI>
    ee3a:	2000      	movs	r0, #0
    ee3c:	bd10      	pop	{r4, pc}
    ee3e:	200c      	movs	r0, #12
    ee40:	bd10      	pop	{r4, pc}

0000ee42 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    ee42:	b510      	push	{r4, lr}
    ee44:	7800      	ldrb	r0, [r0, #0]
    ee46:	f000 0001 	and.w	r0, r0, #1
    ee4a:	f7f8 f98d 	bl	7168 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A>
    ee4e:	2000      	movs	r0, #0
    ee50:	bd10      	pop	{r4, pc}

0000ee52 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    ee52:	b510      	push	{r4, lr}
    ee54:	4604      	mov	r4, r0
    ee56:	f000 fadc 	bl	f412 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x334>
    ee5a:	b120      	cbz	r0, ee66 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
    ee5c:	4620      	mov	r0, r4
    ee5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ee62:	f7fb bb39 	b.w	a4d8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    ee66:	2001      	movs	r0, #1
    ee68:	bd10      	pop	{r4, pc}

0000ee6a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    ee6a:	b570      	push	{r4, r5, r6, lr}
    ee6c:	4604      	mov	r4, r0
    ee6e:	7800      	ldrb	r0, [r0, #0]
    ee70:	2101      	movs	r1, #1
    ee72:	f7fe f988 	bl	d186 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ee76:	0005      	movs	r5, r0
    ee78:	d013      	beq.n	eea2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x38>
    ee7a:	2201      	movs	r2, #1
    ee7c:	8861      	ldrh	r1, [r4, #2]
    ee7e:	f000 f99d 	bl	f1bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xde>
    ee82:	2800      	cmp	r0, #0
    ee84:	d10c      	bne.n	eea0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x36>
    ee86:	4628      	mov	r0, r5
    ee88:	f7ff f876 	bl	df78 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    ee8c:	8861      	ldrh	r1, [r4, #2]
    ee8e:	4281      	cmp	r1, r0
    ee90:	d800      	bhi.n	ee94 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2a>
    ee92:	4608      	mov	r0, r1
    ee94:	4601      	mov	r1, r0
    ee96:	4628      	mov	r0, r5
    ee98:	6862      	ldr	r2, [r4, #4]
    ee9a:	f7ff f8b9 	bl	e010 <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>
    ee9e:	2000      	movs	r0, #0
    eea0:	bd70      	pop	{r4, r5, r6, pc}
    eea2:	2042      	movs	r0, #66	; 0x42
    eea4:	bd70      	pop	{r4, r5, r6, pc}

0000eea6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
    eea6:	b570      	push	{r4, r5, r6, lr}
    eea8:	4604      	mov	r4, r0
    eeaa:	7800      	ldrb	r0, [r0, #0]
    eeac:	2101      	movs	r1, #1
    eeae:	f7fe f96a 	bl	d186 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    eeb2:	0005      	movs	r5, r0
    eeb4:	d00b      	beq.n	eece <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x28>
    eeb6:	2201      	movs	r2, #1
    eeb8:	8861      	ldrh	r1, [r4, #2]
    eeba:	f000 f97f 	bl	f1bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xde>
    eebe:	2800      	cmp	r0, #0
    eec0:	d106      	bne.n	eed0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2a>
    eec2:	8866      	ldrh	r6, [r4, #2]
    eec4:	4628      	mov	r0, r5
    eec6:	f7ff f887 	bl	dfd8 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    eeca:	b110      	cbz	r0, eed2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2c>
    eecc:	e002      	b.n	eed4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2e>
    eece:	2042      	movs	r0, #66	; 0x42
    eed0:	bd70      	pop	{r4, r5, r6, pc}
    eed2:	2600      	movs	r6, #0
    eed4:	4631      	mov	r1, r6
    eed6:	4628      	mov	r0, r5
    eed8:	6862      	ldr	r2, [r4, #4]
    eeda:	f7ff f8a3 	bl	e024 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>
    eede:	2000      	movs	r0, #0
    eee0:	bd70      	pop	{r4, r5, r6, pc}

0000eee2 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
    eee2:	b510      	push	{r4, lr}
    eee4:	4604      	mov	r4, r0
    eee6:	8880      	ldrh	r0, [r0, #4]
    eee8:	b128      	cbz	r0, eef6 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    eeea:	2801      	cmp	r0, #1
    eeec:	d003      	beq.n	eef6 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    eeee:	2802      	cmp	r0, #2
    eef0:	d001      	beq.n	eef6 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    eef2:	2012      	movs	r0, #18
    eef4:	bd10      	pop	{r4, pc}
    eef6:	78e0      	ldrb	r0, [r4, #3]
    eef8:	f000 f9ec 	bl	f2d4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f6>
    eefc:	b148      	cbz	r0, ef12 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    eefe:	78a0      	ldrb	r0, [r4, #2]
    ef00:	f000 f9e8 	bl	f2d4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f6>
    ef04:	b128      	cbz	r0, ef12 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    ef06:	4620      	mov	r0, r4
    ef08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ef0c:	2101      	movs	r1, #1
    ef0e:	f000 b881 	b.w	f014 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    ef12:	2011      	movs	r0, #17
    ef14:	bd10      	pop	{r4, pc}

0000ef16 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
    ef16:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ef18:	460c      	mov	r4, r1
    ef1a:	4605      	mov	r5, r0
    ef1c:	8800      	ldrh	r0, [r0, #0]
    ef1e:	4669      	mov	r1, sp
    ef20:	f7fe fa69 	bl	d3f6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ef24:	2800      	cmp	r0, #0
    ef26:	d106      	bne.n	ef36 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
    ef28:	9801      	ldr	r0, [sp, #4]
    ef2a:	8829      	ldrh	r1, [r5, #0]
    ef2c:	8021      	strh	r1, [r4, #0]
    ef2e:	f8b0 0098 	ldrh.w	r0, [r0, #152]	; 0x98
    ef32:	8060      	strh	r0, [r4, #2]
    ef34:	2000      	movs	r0, #0
    ef36:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000ef38 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    ef38:	b510      	push	{r4, lr}
    ef3a:	4604      	mov	r4, r0
    ef3c:	4601      	mov	r1, r0
    ef3e:	2000      	movs	r0, #0
    ef40:	f7f5 fd7a 	bl	4a38 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    ef44:	b910      	cbnz	r0, ef4c <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    ef46:	2000      	movs	r0, #0
    ef48:	6020      	str	r0, [r4, #0]
    ef4a:	80a0      	strh	r0, [r4, #4]
    ef4c:	2000      	movs	r0, #0
    ef4e:	bd10      	pop	{r4, pc}

0000ef50 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    ef50:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ef52:	8800      	ldrh	r0, [r0, #0]
    ef54:	4669      	mov	r1, sp
    ef56:	f7fe fa4e 	bl	d3f6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ef5a:	b958      	cbnz	r0, ef74 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
    ef5c:	4668      	mov	r0, sp
    ef5e:	f000 fa5e 	bl	f41e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x340>
    ef62:	b138      	cbz	r0, ef74 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
    ef64:	9c01      	ldr	r4, [sp, #4]
    ef66:	f894 11ac 	ldrb.w	r1, [r4, #428]	; 0x1ac
    ef6a:	f504 70d6 	add.w	r0, r4, #428	; 0x1ac
    ef6e:	3470      	adds	r4, #112	; 0x70
    ef70:	b929      	cbnz	r1, ef7e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2e>
    ef72:	e001      	b.n	ef78 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    ef74:	2002      	movs	r0, #2
    ef76:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ef78:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    ef7c:	b109      	cbz	r1, ef82 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x32>
    ef7e:	203a      	movs	r0, #58	; 0x3a
    ef80:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ef82:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
    ef86:	f04f 0501 	mov.w	r5, #1
    ef8a:	0789      	lsls	r1, r1, #30
    ef8c:	d103      	bne.n	ef96 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x46>
    ef8e:	7005      	strb	r5, [r0, #0]
    ef90:	4668      	mov	r0, sp
    ef92:	f7fe fde1 	bl	db58 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    ef96:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    ef9a:	2000      	movs	r0, #0
    ef9c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000ef9e <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
    ef9e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    efa0:	460c      	mov	r4, r1
    efa2:	4605      	mov	r5, r0
    efa4:	8800      	ldrh	r0, [r0, #0]
    efa6:	4669      	mov	r1, sp
    efa8:	f7fe fa25 	bl	d3f6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    efac:	b108      	cbz	r0, efb2 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
    efae:	2002      	movs	r0, #2
    efb0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    efb2:	78a8      	ldrb	r0, [r5, #2]
    efb4:	b130      	cbz	r0, efc4 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
    efb6:	f000 fa0d 	bl	f3d4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f6>
    efba:	70a0      	strb	r0, [r4, #2]
    efbc:	8828      	ldrh	r0, [r5, #0]
    efbe:	8020      	strh	r0, [r4, #0]
    efc0:	2000      	movs	r0, #0
    efc2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    efc4:	9801      	ldr	r0, [sp, #4]
    efc6:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    efca:	e7f6      	b.n	efba <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0000efcc <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    efcc:	b510      	push	{r4, lr}
    efce:	f7fb fb41 	bl	a654 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    efd2:	2000      	movs	r0, #0
    efd4:	bd10      	pop	{r4, pc}

0000efd6 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
    efd6:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    efda:	4604      	mov	r4, r0
    efdc:	8840      	ldrh	r0, [r0, #2]
    efde:	460d      	mov	r5, r1
    efe0:	b1b0      	cbz	r0, f010 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3a>
    efe2:	8820      	ldrh	r0, [r4, #0]
    efe4:	4669      	mov	r1, sp
    efe6:	f7fe fa06 	bl	d3f6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    efea:	2800      	cmp	r0, #0
    efec:	d10e      	bne.n	f00c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x36>
    efee:	8820      	ldrh	r0, [r4, #0]
    eff0:	8028      	strh	r0, [r5, #0]
    eff2:	9e01      	ldr	r6, [sp, #4]
    eff4:	1d35      	adds	r5, r6, #4
    eff6:	3670      	adds	r6, #112	; 0x70
    eff8:	682f      	ldr	r7, [r5, #0]
    effa:	8862      	ldrh	r2, [r4, #2]
    effc:	4639      	mov	r1, r7
    effe:	4630      	mov	r0, r6
    f000:	f7fe fb4c 	bl	d69c <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
    f004:	6828      	ldr	r0, [r5, #0]
    f006:	42b8      	cmp	r0, r7
    f008:	d1f6      	bne.n	eff8 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x22>
    f00a:	2000      	movs	r0, #0
    f00c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f010:	2012      	movs	r0, #18
    f012:	e7fb      	b.n	f00c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x36>

0000f014 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    f014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f018:	b086      	sub	sp, #24
    f01a:	468a      	mov	sl, r1
    f01c:	4606      	mov	r6, r0
    f01e:	8800      	ldrh	r0, [r0, #0]
    f020:	a901      	add	r1, sp, #4
    f022:	f7fe f9e8 	bl	d3f6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f026:	2800      	cmp	r0, #0
    f028:	d138      	bne.n	f09c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    f02a:	9802      	ldr	r0, [sp, #8]
    f02c:	f04f 0800 	mov.w	r8, #0
    f030:	4601      	mov	r1, r0
    f032:	4689      	mov	r9, r1
    f034:	f890 11f4 	ldrb.w	r1, [r0, #500]	; 0x1f4
    f038:	f88d 1000 	strb.w	r1, [sp]
    f03c:	9900      	ldr	r1, [sp, #0]
    f03e:	9100      	str	r1, [sp, #0]
    f040:	f89d 5000 	ldrb.w	r5, [sp]
    f044:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    f048:	3070      	adds	r0, #112	; 0x70
    f04a:	2921      	cmp	r1, #33	; 0x21
    f04c:	d100      	bne.n	f050 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3c>
    f04e:	b13d      	cbz	r5, f060 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
    f050:	2400      	movs	r4, #0
    f052:	3044      	adds	r0, #68	; 0x44
    f054:	2108      	movs	r1, #8
    f056:	4607      	mov	r7, r0
    f058:	f7ff fb69 	bl	e72e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    f05c:	b110      	cbz	r0, f064 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x50>
    f05e:	e007      	b.n	f070 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    f060:	2401      	movs	r4, #1
    f062:	e7f6      	b.n	f052 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3e>
    f064:	210b      	movs	r1, #11
    f066:	4638      	mov	r0, r7
    f068:	f7ff fb61 	bl	e72e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    f06c:	b900      	cbnz	r0, f070 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    f06e:	b1a4      	cbz	r4, f09a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x86>
    f070:	a804      	add	r0, sp, #16
    f072:	9000      	str	r0, [sp, #0]
    f074:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f078:	ab03      	add	r3, sp, #12
    f07a:	4632      	mov	r2, r6
    f07c:	4649      	mov	r1, r9
    f07e:	f000 f989 	bl	f394 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2b6>
    f082:	0007      	movs	r7, r0
    f084:	d10a      	bne.n	f09c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    f086:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f08a:	9c02      	ldr	r4, [sp, #8]
    f08c:	b148      	cbz	r0, f0a2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
    f08e:	f504 74d3 	add.w	r4, r4, #422	; 0x1a6
    f092:	2001      	movs	r0, #1
    f094:	7060      	strb	r0, [r4, #1]
    f096:	b94d      	cbnz	r5, f0ac <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x98>
    f098:	e006      	b.n	f0a8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x94>
    f09a:	201a      	movs	r0, #26
    f09c:	b006      	add	sp, #24
    f09e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f0a2:	f504 7495 	add.w	r4, r4, #298	; 0x12a
    f0a6:	e7f4      	b.n	f092 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x7e>
    f0a8:	7820      	ldrb	r0, [r4, #0]
    f0aa:	b108      	cbz	r0, f0b0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9c>
    f0ac:	273a      	movs	r7, #58	; 0x3a
    f0ae:	e012      	b.n	f0d6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc2>
    f0b0:	f884 a000 	strb.w	sl, [r4]
    f0b4:	f89d 000c 	ldrb.w	r0, [sp, #12]
    f0b8:	70a0      	strb	r0, [r4, #2]
    f0ba:	f89d 1010 	ldrb.w	r1, [sp, #16]
    f0be:	70e1      	strb	r1, [r4, #3]
    f0c0:	f88d 0000 	strb.w	r0, [sp]
    f0c4:	f88d 1001 	strb.w	r1, [sp, #1]
    f0c8:	88b0      	ldrh	r0, [r6, #4]
    f0ca:	f8ad 0002 	strh.w	r0, [sp, #2]
    f0ce:	4669      	mov	r1, sp
    f0d0:	4648      	mov	r0, r9
    f0d2:	f7fe fa4f 	bl	d574 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    f0d6:	f884 8001 	strb.w	r8, [r4, #1]
    f0da:	4638      	mov	r0, r7
    f0dc:	e7de      	b.n	f09c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>

0000f0de <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
    f0de:	b510      	push	{r4, lr}
    f0e0:	2008      	movs	r0, #8
    f0e2:	f7fb fb4f 	bl	a784 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    f0e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f0ea:	f7f9 b897 	b.w	821c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
    f0ee:	f44f 71a4 	mov.w	r1, #328	; 0x148
    f0f2:	4288      	cmp	r0, r1
    f0f4:	d303      	bcc.n	f0fe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20>
    f0f6:	f640 0148 	movw	r1, #2120	; 0x848
    f0fa:	4288      	cmp	r0, r1
    f0fc:	d300      	bcc.n	f100 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x22>
    f0fe:	4608      	mov	r0, r1
    f100:	4770      	bx	lr
    f102:	07c1      	lsls	r1, r0, #31
    f104:	d001      	beq.n	f10a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c>
    f106:	2001      	movs	r0, #1
    f108:	4770      	bx	lr
    f10a:	0780      	lsls	r0, r0, #30
    f10c:	d501      	bpl.n	f112 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x34>
    f10e:	2002      	movs	r0, #2
    f110:	4770      	bx	lr
    f112:	2000      	movs	r0, #0
    f114:	4770      	bx	lr
    f116:	b510      	push	{r4, lr}
    f118:	2801      	cmp	r0, #1
    f11a:	d006      	beq.n	f12a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
    f11c:	2802      	cmp	r0, #2
    f11e:	d004      	beq.n	f12a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
    f120:	f240 219d 	movw	r1, #669	; 0x29d
    f124:	2006      	movs	r0, #6
    f126:	f7f4 fe19 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f12a:	bd10      	pop	{r4, pc}
    f12c:	b50e      	push	{r1, r2, r3, lr}
    f12e:	4669      	mov	r1, sp
    f130:	2001      	movs	r0, #1
    f132:	f7fe f832 	bl	d19a <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    f136:	b150      	cbz	r0, f14e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
    f138:	f44f 719a 	mov.w	r1, #308	; 0x134
    f13c:	2039      	movs	r0, #57	; 0x39
    f13e:	f7f4 fe0d 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f142:	9802      	ldr	r0, [sp, #8]
    f144:	f7ff f915 	bl	e372 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    f148:	b108      	cbz	r0, f14e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
    f14a:	2001      	movs	r0, #1
    f14c:	bd0e      	pop	{r1, r2, r3, pc}
    f14e:	4668      	mov	r0, sp
    f150:	f7f5 f832 	bl	41b8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    f154:	2800      	cmp	r0, #0
    f156:	d0f4      	beq.n	f142 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x64>
    f158:	2000      	movs	r0, #0
    f15a:	bd0e      	pop	{r1, r2, r3, pc}
    f15c:	b510      	push	{r4, lr}
    f15e:	f7ff ffe5 	bl	f12c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
    f162:	b1a0      	cbz	r0, f18e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xb0>
    f164:	2101      	movs	r1, #1
    f166:	2000      	movs	r0, #0
    f168:	f7fe f80d 	bl	d186 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f16c:	0004      	movs	r4, r0
    f16e:	d003      	beq.n	f178 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9a>
    f170:	f7fe ff32 	bl	dfd8 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f174:	b128      	cbz	r0, f182 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa4>
    f176:	e008      	b.n	f18a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xac>
    f178:	f44f 71be 	mov.w	r1, #380	; 0x17c
    f17c:	2039      	movs	r0, #57	; 0x39
    f17e:	f7f4 fded 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f182:	4620      	mov	r0, r4
    f184:	f7fe ff1e 	bl	dfc4 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    f188:	b108      	cbz	r0, f18e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xb0>
    f18a:	2000      	movs	r0, #0
    f18c:	bd10      	pop	{r4, pc}
    f18e:	2001      	movs	r0, #1
    f190:	bd10      	pop	{r4, pc}
    f192:	b570      	push	{r4, r5, r6, lr}
    f194:	460d      	mov	r5, r1
    f196:	8899      	ldrh	r1, [r3, #4]
    f198:	461c      	mov	r4, r3
    f19a:	194b      	adds	r3, r1, r5
    f19c:	4293      	cmp	r3, r2
    f19e:	d901      	bls.n	f1a4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xc6>
    f1a0:	2007      	movs	r0, #7
    f1a2:	bd70      	pop	{r4, r5, r6, pc}
    f1a4:	6822      	ldr	r2, [r4, #0]
    f1a6:	1853      	adds	r3, r2, r1
    f1a8:	4601      	mov	r1, r0
    f1aa:	462a      	mov	r2, r5
    f1ac:	4618      	mov	r0, r3
    f1ae:	f7fc ffd8 	bl	c162 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f1b2:	88a0      	ldrh	r0, [r4, #4]
    f1b4:	4428      	add	r0, r5
    f1b6:	80a0      	strh	r0, [r4, #4]
    f1b8:	2000      	movs	r0, #0
    f1ba:	bd70      	pop	{r4, r5, r6, pc}
    f1bc:	b570      	push	{r4, r5, r6, lr}
    f1be:	460c      	mov	r4, r1
    f1c0:	4605      	mov	r5, r0
    f1c2:	b112      	cbz	r2, f1ca <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xec>
    f1c4:	291f      	cmp	r1, #31
    f1c6:	d807      	bhi.n	f1d8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xfa>
    f1c8:	e011      	b.n	f1ee <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
    f1ca:	2cff      	cmp	r4, #255	; 0xff
    f1cc:	d804      	bhi.n	f1d8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xfa>
    f1ce:	f7fe ff01 	bl	dfd4 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f1d2:	b118      	cbz	r0, f1dc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xfe>
    f1d4:	2c1f      	cmp	r4, #31
    f1d6:	d901      	bls.n	f1dc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xfe>
    f1d8:	2012      	movs	r0, #18
    f1da:	bd70      	pop	{r4, r5, r6, pc}
    f1dc:	4628      	mov	r0, r5
    f1de:	f7fe ff02 	bl	dfe6 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    f1e2:	b130      	cbz	r0, f1f2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x114>
    f1e4:	4621      	mov	r1, r4
    f1e6:	4628      	mov	r0, r5
    f1e8:	f7fe fed2 	bl	df90 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
    f1ec:	b118      	cbz	r0, f1f6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x118>
    f1ee:	2000      	movs	r0, #0
    f1f0:	bd70      	pop	{r4, r5, r6, pc}
    f1f2:	2042      	movs	r0, #66	; 0x42
    f1f4:	bd70      	pop	{r4, r5, r6, pc}
    f1f6:	2045      	movs	r0, #69	; 0x45
    f1f8:	bd70      	pop	{r4, r5, r6, pc}
    f1fa:	b510      	push	{r4, lr}
    f1fc:	4604      	mov	r4, r0
    f1fe:	7840      	ldrb	r0, [r0, #1]
    f200:	06c1      	lsls	r1, r0, #27
    f202:	d512      	bpl.n	f22a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x14c>
    f204:	07c0      	lsls	r0, r0, #31
    f206:	d00b      	beq.n	f220 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x142>
    f208:	f7fb fa62 	bl	a6d0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
    f20c:	b168      	cbz	r0, f22a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x14c>
    f20e:	7860      	ldrb	r0, [r4, #1]
    f210:	06c1      	lsls	r1, r0, #27
    f212:	d405      	bmi.n	f220 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x142>
    f214:	0700      	lsls	r0, r0, #28
    f216:	d503      	bpl.n	f220 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x142>
    f218:	7d20      	ldrb	r0, [r4, #20]
    f21a:	2802      	cmp	r0, #2
    f21c:	d105      	bne.n	f22a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x14c>
    f21e:	e006      	b.n	f22e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x150>
    f220:	7d20      	ldrb	r0, [r4, #20]
    f222:	2802      	cmp	r0, #2
    f224:	d003      	beq.n	f22e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x150>
    f226:	7ea0      	ldrb	r0, [r4, #26]
    f228:	b108      	cbz	r0, f22e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x150>
    f22a:	2011      	movs	r0, #17
    f22c:	bd10      	pop	{r4, pc}
    f22e:	2000      	movs	r0, #0
    f230:	bd10      	pop	{r4, pc}
    f232:	b538      	push	{r3, r4, r5, lr}
    f234:	4604      	mov	r4, r0
    f236:	7800      	ldrb	r0, [r0, #0]
    f238:	28ef      	cmp	r0, #239	; 0xef
    f23a:	d847      	bhi.n	f2cc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ee>
    f23c:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    f240:	f8ad 0000 	strh.w	r0, [sp]
    f244:	9800      	ldr	r0, [sp, #0]
    f246:	f000 f939 	bl	f4bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3de>
    f24a:	b3c0      	cbz	r0, f2be <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e0>
    f24c:	7861      	ldrb	r1, [r4, #1]
    f24e:	0708      	lsls	r0, r1, #28
    f250:	d40f      	bmi.n	f272 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x194>
    f252:	f8d4 2002 	ldr.w	r2, [r4, #2]
    f256:	f8d4 0005 	ldr.w	r0, [r4, #5]
    f25a:	0a13      	lsrs	r3, r2, #8
    f25c:	ebb3 2f10 	cmp.w	r3, r0, lsr #8
    f260:	d834      	bhi.n	f2cc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ee>
    f262:	2320      	movs	r3, #32
    f264:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
    f268:	d830      	bhi.n	f2cc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ee>
    f26a:	025a      	lsls	r2, r3, #9
    f26c:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
    f270:	d32c      	bcc.n	f2cc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ee>
    f272:	7a60      	ldrb	r0, [r4, #9]
    f274:	b318      	cbz	r0, f2be <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e0>
    f276:	2807      	cmp	r0, #7
    f278:	d828      	bhi.n	f2cc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ee>
    f27a:	7aa0      	ldrb	r0, [r4, #10]
    f27c:	b128      	cbz	r0, f28a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ac>
    f27e:	2801      	cmp	r0, #1
    f280:	d003      	beq.n	f28a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ac>
    f282:	2802      	cmp	r0, #2
    f284:	d001      	beq.n	f28a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ac>
    f286:	2803      	cmp	r0, #3
    f288:	d120      	bne.n	f2cc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ee>
    f28a:	074a      	lsls	r2, r1, #29
    f28c:	d403      	bmi.n	f296 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1b8>
    f28e:	2802      	cmp	r0, #2
    f290:	d001      	beq.n	f296 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1b8>
    f292:	2803      	cmp	r0, #3
    f294:	d105      	bne.n	f2a2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c4>
    f296:	7ae0      	ldrb	r0, [r4, #11]
    f298:	b108      	cbz	r0, f29e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c0>
    f29a:	2801      	cmp	r0, #1
    f29c:	d116      	bne.n	f2cc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ee>
    f29e:	0748      	lsls	r0, r1, #29
    f2a0:	d407      	bmi.n	f2b2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d4>
    f2a2:	7ca0      	ldrb	r0, [r4, #18]
    f2a4:	b128      	cbz	r0, f2b2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d4>
    f2a6:	2801      	cmp	r0, #1
    f2a8:	d003      	beq.n	f2b2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d4>
    f2aa:	2802      	cmp	r0, #2
    f2ac:	d001      	beq.n	f2b2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d4>
    f2ae:	2803      	cmp	r0, #3
    f2b0:	d10c      	bne.n	f2cc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ee>
    f2b2:	06c8      	lsls	r0, r1, #27
    f2b4:	7d20      	ldrb	r0, [r4, #20]
    f2b6:	d503      	bpl.n	f2c0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e2>
    f2b8:	2801      	cmp	r0, #1
    f2ba:	d107      	bne.n	f2cc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ee>
    f2bc:	e002      	b.n	f2c4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e6>
    f2be:	e005      	b.n	f2cc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ee>
    f2c0:	2802      	cmp	r0, #2
    f2c2:	d003      	beq.n	f2cc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ee>
    f2c4:	7e20      	ldrb	r0, [r4, #24]
    f2c6:	b118      	cbz	r0, f2d0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f2>
    f2c8:	2801      	cmp	r0, #1
    f2ca:	d001      	beq.n	f2d0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f2>
    f2cc:	2012      	movs	r0, #18
    f2ce:	bd38      	pop	{r3, r4, r5, pc}
    f2d0:	2000      	movs	r0, #0
    f2d2:	bd38      	pop	{r3, r4, r5, pc}
    f2d4:	b510      	push	{r4, lr}
    f2d6:	0004      	movs	r4, r0
    f2d8:	d005      	beq.n	f2e6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x208>
    f2da:	f7fb fa63 	bl	a7a4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f2de:	4384      	bics	r4, r0
    f2e0:	d001      	beq.n	f2e6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x208>
    f2e2:	2000      	movs	r0, #0
    f2e4:	bd10      	pop	{r4, pc}
    f2e6:	2001      	movs	r0, #1
    f2e8:	bd10      	pop	{r4, pc}
    f2ea:	28fb      	cmp	r0, #251	; 0xfb
    f2ec:	d803      	bhi.n	f2f6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x218>
    f2ee:	f640 0048 	movw	r0, #2120	; 0x848
    f2f2:	4281      	cmp	r1, r0
    f2f4:	d901      	bls.n	f2fa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x21c>
    f2f6:	2011      	movs	r0, #17
    f2f8:	4770      	bx	lr
    f2fa:	2000      	movs	r0, #0
    f2fc:	4770      	bx	lr
    f2fe:	381b      	subs	r0, #27
    f300:	28e1      	cmp	r0, #225	; 0xe1
    f302:	d206      	bcs.n	f312 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x234>
    f304:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
    f308:	d303      	bcc.n	f312 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x234>
    f30a:	f244 2090 	movw	r0, #17040	; 0x4290
    f30e:	4281      	cmp	r1, r0
    f310:	d901      	bls.n	f316 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x238>
    f312:	2012      	movs	r0, #18
    f314:	4770      	bx	lr
    f316:	2000      	movs	r0, #0
    f318:	4770      	bx	lr
    f31a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f31e:	4606      	mov	r6, r0
    f320:	f8b0 704e 	ldrh.w	r7, [r0, #78]	; 0x4e
    f324:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
    f328:	4615      	mov	r5, r2
    f32a:	3028      	adds	r0, #40	; 0x28
    f32c:	f7f7 ff22 	bl	7174 <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ>
    f330:	4680      	mov	r8, r0
    f332:	2102      	movs	r1, #2
    f334:	f7fe f8ef 	bl	d516 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    f338:	4287      	cmp	r7, r0
    f33a:	d200      	bcs.n	f33e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x260>
    f33c:	4638      	mov	r0, r7
    f33e:	4607      	mov	r7, r0
    f340:	2102      	movs	r1, #2
    f342:	4640      	mov	r0, r8
    f344:	f7fe f8e7 	bl	d516 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    f348:	4284      	cmp	r4, r0
    f34a:	d200      	bcs.n	f34e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x270>
    f34c:	4620      	mov	r0, r4
    f34e:	8831      	ldrh	r1, [r6, #0]
    f350:	8029      	strh	r1, [r5, #0]
    f352:	2f1b      	cmp	r7, #27
    f354:	d913      	bls.n	f37e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a0>
    f356:	2ffb      	cmp	r7, #251	; 0xfb
    f358:	d300      	bcc.n	f35c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x27e>
    f35a:	27fb      	movs	r7, #251	; 0xfb
    f35c:	806f      	strh	r7, [r5, #2]
    f35e:	281b      	cmp	r0, #27
    f360:	d90f      	bls.n	f382 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a4>
    f362:	28fb      	cmp	r0, #251	; 0xfb
    f364:	d300      	bcc.n	f368 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x28a>
    f366:	20fb      	movs	r0, #251	; 0xfb
    f368:	80e8      	strh	r0, [r5, #6]
    f36a:	4640      	mov	r0, r8
    f36c:	f7ff febf 	bl	f0ee <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
    f370:	80a8      	strh	r0, [r5, #4]
    f372:	4640      	mov	r0, r8
    f374:	f7ff febb 	bl	f0ee <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
    f378:	8128      	strh	r0, [r5, #8]
    f37a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f37e:	271b      	movs	r7, #27
    f380:	e7ec      	b.n	f35c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x27e>
    f382:	201b      	movs	r0, #27
    f384:	e7f0      	b.n	f368 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x28a>
    f386:	b510      	push	{r4, lr}
    f388:	f7ff fed0 	bl	f12c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
    f38c:	2800      	cmp	r0, #0
    f38e:	d000      	beq.n	f392 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2b4>
    f390:	2001      	movs	r0, #1
    f392:	bd10      	pop	{r4, pc}
    f394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f398:	7890      	ldrb	r0, [r2, #2]
    f39a:	9e06      	ldr	r6, [sp, #24]
    f39c:	461d      	mov	r5, r3
    f39e:	4614      	mov	r4, r2
    f3a0:	b908      	cbnz	r0, f3a6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c8>
    f3a2:	f7fb f9ff 	bl	a7a4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f3a6:	78e4      	ldrb	r4, [r4, #3]
    f3a8:	4607      	mov	r7, r0
    f3aa:	b914      	cbnz	r4, f3b2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2d4>
    f3ac:	f7fb f9fa 	bl	a7a4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f3b0:	4604      	mov	r4, r0
    f3b2:	b16f      	cbz	r7, f3d0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
    f3b4:	b164      	cbz	r4, f3d0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
    f3b6:	4638      	mov	r0, r7
    f3b8:	f7ff fea3 	bl	f102 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
    f3bc:	4620      	mov	r0, r4
    f3be:	f7ff fea0 	bl	f102 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
    f3c2:	b12f      	cbz	r7, f3d0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
    f3c4:	b124      	cbz	r4, f3d0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
    f3c6:	702f      	strb	r7, [r5, #0]
    f3c8:	7034      	strb	r4, [r6, #0]
    f3ca:	2000      	movs	r0, #0
    f3cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f3d0:	2009      	movs	r0, #9
    f3d2:	e7fb      	b.n	f3cc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2ee>
    f3d4:	b510      	push	{r4, lr}
    f3d6:	f7fc fe68 	bl	c0aa <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    f3da:	b928      	cbnz	r0, f3e8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30a>
    f3dc:	f7fc fe9b 	bl	c116 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    f3e0:	b910      	cbnz	r0, f3e8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30a>
    f3e2:	f7fc fea2 	bl	c12a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    f3e6:	b108      	cbz	r0, f3ec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30e>
    f3e8:	2008      	movs	r0, #8
    f3ea:	bd10      	pop	{r4, pc}
    f3ec:	f7fc fe32 	bl	c054 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    f3f0:	b940      	cbnz	r0, f404 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x326>
    f3f2:	f7fc fe39 	bl	c068 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    f3f6:	b928      	cbnz	r0, f404 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x326>
    f3f8:	f7fc fe4d 	bl	c096 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    f3fc:	b910      	cbnz	r0, f404 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x326>
    f3fe:	f7fc fe5e 	bl	c0be <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    f402:	b108      	cbz	r0, f408 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x32a>
    f404:	2004      	movs	r0, #4
    f406:	bd10      	pop	{r4, pc}
    f408:	f240 51b4 	movw	r1, #1460	; 0x5b4
    f40c:	2039      	movs	r0, #57	; 0x39
    f40e:	f7f4 fca5 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f412:	b510      	push	{r4, lr}
    f414:	f7fb f9c0 	bl	a798 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f418:	f3c0 1040 	ubfx	r0, r0, #5, #1
    f41c:	bd10      	pop	{r4, pc}
    f41e:	6840      	ldr	r0, [r0, #4]
    f420:	f000 b800 	b.w	f424 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x346>
    f424:	b508      	push	{r3, lr}
    f426:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    f42a:	f890 008d 	ldrb.w	r0, [r0, #141]	; 0x8d
    f42e:	f88d 0000 	strb.w	r0, [sp]
    f432:	9800      	ldr	r0, [sp, #0]
    f434:	9000      	str	r0, [sp, #0]
    f436:	f89d 0000 	ldrb.w	r0, [sp]
    f43a:	1e40      	subs	r0, r0, #1
    f43c:	4208      	tst	r0, r1
    f43e:	d003      	beq.n	f448 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x36a>
    f440:	2904      	cmp	r1, #4
    f442:	d001      	beq.n	f448 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x36a>
    f444:	2001      	movs	r0, #1
    f446:	bd08      	pop	{r3, pc}
    f448:	2000      	movs	r0, #0
    f44a:	bd08      	pop	{r3, pc}
    f44c:	b570      	push	{r4, r5, r6, lr}
    f44e:	4605      	mov	r5, r0
    f450:	f7fe fdc9 	bl	dfe6 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    f454:	b148      	cbz	r0, f46a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38c>
    f456:	4628      	mov	r0, r5
    f458:	f7fe ff88 	bl	e36c <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A>
    f45c:	4604      	mov	r4, r0
    f45e:	4628      	mov	r0, r5
    f460:	f7fe ff59 	bl	e316 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>
    f464:	b118      	cbz	r0, f46e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x390>
    f466:	200c      	movs	r0, #12
    f468:	bd70      	pop	{r4, r5, r6, pc}
    f46a:	2042      	movs	r0, #66	; 0x42
    f46c:	bd70      	pop	{r4, r5, r6, pc}
    f46e:	b164      	cbz	r4, f48a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3ac>
    f470:	8820      	ldrh	r0, [r4, #0]
    f472:	f7fd feed 	bl	d250 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    f476:	8820      	ldrh	r0, [r4, #0]
    f478:	2100      	movs	r1, #0
    f47a:	f7f4 feed 	bl	4258 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    f47e:	b120      	cbz	r0, f48a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3ac>
    f480:	f241 417b 	movw	r1, #5243	; 0x147b
    f484:	2039      	movs	r0, #57	; 0x39
    f486:	f7f4 fc69 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f48a:	2000      	movs	r0, #0
    f48c:	bd70      	pop	{r4, r5, r6, pc}
    f48e:	b530      	push	{r4, r5, lr}
    f490:	f340 0400 	sbfx	r4, r0, #0, #1
    f494:	f340 0040 	sbfx	r0, r0, #1, #1
    f498:	1c40      	adds	r0, r0, #1
    f49a:	9d03      	ldr	r5, [sp, #12]
    f49c:	1c64      	adds	r4, r4, #1
    f49e:	d000      	beq.n	f4a2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3c4>
    f4a0:	b119      	cbz	r1, f4aa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3cc>
    f4a2:	b100      	cbz	r0, f4a6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3c8>
    f4a4:	b10a      	cbz	r2, f4aa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3cc>
    f4a6:	b91c      	cbnz	r4, f4b0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d2>
    f4a8:	e001      	b.n	f4ae <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d0>
    f4aa:	2011      	movs	r0, #17
    f4ac:	bd30      	pop	{r4, r5, pc}
    f4ae:	2100      	movs	r1, #0
    f4b0:	7019      	strb	r1, [r3, #0]
    f4b2:	b900      	cbnz	r0, f4b6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d8>
    f4b4:	2200      	movs	r2, #0
    f4b6:	702a      	strb	r2, [r5, #0]
    f4b8:	2000      	movs	r0, #0
    f4ba:	bd30      	pop	{r4, r5, pc}
    f4bc:	b2c0      	uxtb	r0, r0
    f4be:	06c1      	lsls	r1, r0, #27
    f4c0:	d40c      	bmi.n	f4dc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3fe>
    f4c2:	0681      	lsls	r1, r0, #26
    f4c4:	ea4f 71c0 	mov.w	r1, r0, lsl #31
    f4c8:	d503      	bpl.n	f4d2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3f4>
    f4ca:	b9d1      	cbnz	r1, f502 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x424>
    f4cc:	0781      	lsls	r1, r0, #30
    f4ce:	d418      	bmi.n	f502 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x424>
    f4d0:	e001      	b.n	f4d6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3f8>
    f4d2:	2900      	cmp	r1, #0
    f4d4:	d1fa      	bne.n	f4cc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3ee>
    f4d6:	0700      	lsls	r0, r0, #28
    f4d8:	d413      	bmi.n	f502 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x424>
    f4da:	e010      	b.n	f4fe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x420>
    f4dc:	0641      	lsls	r1, r0, #25
    f4de:	d410      	bmi.n	f502 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x424>
    f4e0:	0681      	lsls	r1, r0, #26
    f4e2:	d40e      	bmi.n	f502 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x424>
    f4e4:	07c1      	lsls	r1, r0, #31
    f4e6:	ea4f 7180 	mov.w	r1, r0, lsl #30
    f4ea:	d004      	beq.n	f4f6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x418>
    f4ec:	2900      	cmp	r1, #0
    f4ee:	db02      	blt.n	f4f6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x418>
    f4f0:	0740      	lsls	r0, r0, #29
    f4f2:	d404      	bmi.n	f4fe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x420>
    f4f4:	e005      	b.n	f502 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x424>
    f4f6:	0701      	lsls	r1, r0, #28
    f4f8:	d403      	bmi.n	f502 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x424>
    f4fa:	0740      	lsls	r0, r0, #29
    f4fc:	d401      	bmi.n	f502 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x424>
    f4fe:	2001      	movs	r0, #1
    f500:	4770      	bx	lr
    f502:	2000      	movs	r0, #0
    f504:	4770      	bx	lr
    f506:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f508:	4669      	mov	r1, sp
    f50a:	2001      	movs	r0, #1
    f50c:	f7fd fe45 	bl	d19a <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    f510:	b178      	cbz	r0, f532 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x454>
    f512:	f44f 71a9 	mov.w	r1, #338	; 0x152
    f516:	2039      	movs	r0, #57	; 0x39
    f518:	f7f4 fc20 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f51c:	9c02      	ldr	r4, [sp, #8]
    f51e:	4620      	mov	r0, r4
    f520:	f7fe ff27 	bl	e372 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    f524:	b128      	cbz	r0, f532 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x454>
    f526:	4620      	mov	r0, r4
    f528:	f7fe fd9a 	bl	e060 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
    f52c:	b108      	cbz	r0, f532 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x454>
    f52e:	2001      	movs	r0, #1
    f530:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f532:	4668      	mov	r0, sp
    f534:	f7f4 fe40 	bl	41b8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    f538:	2800      	cmp	r0, #0
    f53a:	d0ef      	beq.n	f51c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x43e>
    f53c:	2000      	movs	r0, #0
    f53e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f540 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>:
    f540:	6802      	ldr	r2, [r0, #0]
    f542:	b912      	cbnz	r2, f54a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa>
    f544:	6001      	str	r1, [r0, #0]
    f546:	4770      	bx	lr
    f548:	4602      	mov	r2, r0
    f54a:	6850      	ldr	r0, [r2, #4]
    f54c:	b108      	cbz	r0, f552 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x12>
    f54e:	428a      	cmp	r2, r1
    f550:	d1fa      	bne.n	f548 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8>
    f552:	428a      	cmp	r2, r1
    f554:	d0f7      	beq.n	f546 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6>
    f556:	6051      	str	r1, [r2, #4]
    f558:	4770      	bx	lr
    f55a:	b510      	push	{r4, lr}
    f55c:	f7fe ff0f 	bl	e37e <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>
    f560:	b108      	cbz	r0, f566 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x26>
    f562:	21ea      	movs	r1, #234	; 0xea
    f564:	e004      	b.n	f570 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x30>
    f566:	f7f6 ffa1 	bl	64ac <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    f56a:	2800      	cmp	r0, #0
    f56c:	d003      	beq.n	f576 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x36>
    f56e:	21ef      	movs	r1, #239	; 0xef
    f570:	2001      	movs	r0, #1
    f572:	f7f4 fbf3 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f576:	bd10      	pop	{r4, pc}
    f578:	b50e      	push	{r1, r2, r3, lr}
    f57a:	4669      	mov	r1, sp
    f57c:	2000      	movs	r0, #0
    f57e:	f7fd fe0c 	bl	d19a <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    f582:	b158      	cbz	r0, f59c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x5c>
    f584:	21a0      	movs	r1, #160	; 0xa0
    f586:	e006      	b.n	f596 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x56>
    f588:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    f58c:	2100      	movs	r1, #0
    f58e:	f7f4 fe63 	bl	4258 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    f592:	b118      	cbz	r0, f59c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x5c>
    f594:	21a4      	movs	r1, #164	; 0xa4
    f596:	2001      	movs	r0, #1
    f598:	f7f4 fbe0 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f59c:	4668      	mov	r0, sp
    f59e:	f7f4 fe0b 	bl	41b8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    f5a2:	2800      	cmp	r0, #0
    f5a4:	d0f0      	beq.n	f588 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x48>
    f5a6:	bd0e      	pop	{r1, r2, r3, pc}
    f5a8:	b510      	push	{r4, lr}
    f5aa:	4604      	mov	r4, r0
    f5ac:	e002      	b.n	f5b4 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x74>
    f5ae:	6820      	ldr	r0, [r4, #0]
    f5b0:	4780      	blx	r0
    f5b2:	6864      	ldr	r4, [r4, #4]
    f5b4:	2c00      	cmp	r4, #0
    f5b6:	d1fa      	bne.n	f5ae <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6e>
    f5b8:	bd10      	pop	{r4, pc}
    f5ba:	b510      	push	{r4, lr}
    f5bc:	f7ff ffdc 	bl	f578 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x38>
    f5c0:	f7f4 ffc8 	bl	4554 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
    f5c4:	f7f5 fa1a 	bl	49fc <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
    f5c8:	f7f5 fbe4 	bl	4d94 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    f5cc:	2800      	cmp	r0, #0
    f5ce:	d003      	beq.n	f5d8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x98>
    f5d0:	21c4      	movs	r1, #196	; 0xc4
    f5d2:	2001      	movs	r0, #1
    f5d4:	f7f4 fbc2 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f5d8:	bd10      	pop	{r4, pc}
    f5da:	b510      	push	{r4, lr}
    f5dc:	f7ff ffbd 	bl	f55a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    f5e0:	f7ff f865 	bl	e6ae <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
    f5e4:	2800      	cmp	r0, #0
    f5e6:	d004      	beq.n	f5f2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xb2>
    f5e8:	f44f 7183 	mov.w	r1, #262	; 0x106
    f5ec:	2001      	movs	r0, #1
    f5ee:	f7f4 fbb5 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f5f2:	bd10      	pop	{r4, pc}

0000f5f4 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
    f5f4:	b510      	push	{r4, lr}
    f5f6:	f7fb fc51 	bl	ae9c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
    f5fa:	f000 f844 	bl	f686 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
    f5fe:	f7fb f925 	bl	a84c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
    f602:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f606:	f7fb ba1b 	b.w	aa40 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0000f60a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    f60a:	b510      	push	{r4, lr}
    f60c:	24c8      	movs	r4, #200	; 0xc8
    f60e:	1e64      	subs	r4, r4, #1
    f610:	b2e4      	uxtb	r4, r4
    f612:	f7fb f939 	bl	a888 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    f616:	2802      	cmp	r0, #2
    f618:	d003      	beq.n	f622 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
    f61a:	2801      	cmp	r0, #1
    f61c:	d000      	beq.n	f620 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
    f61e:	2000      	movs	r0, #0
    f620:	bd10      	pop	{r4, pc}
    f622:	2c00      	cmp	r4, #0
    f624:	d1f3      	bne.n	f60e <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
    f626:	218f      	movs	r1, #143	; 0x8f
    f628:	203b      	movs	r0, #59	; 0x3b
    f62a:	f7f4 fb97 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f62e <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>:
    f62e:	b510      	push	{r4, lr}
    f630:	f7f4 fa82 	bl	3b38 <mpsl_fem_lna_configuration_clear>
    f634:	2800      	cmp	r0, #0
    f636:	d005      	beq.n	f644 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    f638:	1c40      	adds	r0, r0, #1
    f63a:	d003      	beq.n	f644 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    f63c:	214a      	movs	r1, #74	; 0x4a
    f63e:	2040      	movs	r0, #64	; 0x40
    f640:	f7f4 fb8c 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f644:	bd10      	pop	{r4, pc}

0000f646 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>:
    f646:	b510      	push	{r4, lr}
    f648:	f7f4 fa82 	bl	3b50 <mpsl_fem_pa_configuration_clear>
    f64c:	2800      	cmp	r0, #0
    f64e:	d005      	beq.n	f65c <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    f650:	1c40      	adds	r0, r0, #1
    f652:	d003      	beq.n	f65c <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    f654:	2143      	movs	r1, #67	; 0x43
    f656:	2040      	movs	r0, #64	; 0x40
    f658:	f7f4 fb80 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f65c:	bd10      	pop	{r4, pc}

0000f65e <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>:
    f65e:	b510      	push	{r4, lr}
    f660:	2100      	movs	r1, #0
    f662:	4608      	mov	r0, r1
    f664:	f7f4 fa6e 	bl	3b44 <mpsl_fem_lna_configuration_set>
    f668:	b108      	cbz	r0, f66e <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA+0x10>
    f66a:	2000      	movs	r0, #0
    f66c:	bd10      	pop	{r4, pc}
    f66e:	2001      	movs	r0, #1
    f670:	bd10      	pop	{r4, pc}

0000f672 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>:
    f672:	b508      	push	{r3, lr}
    f674:	4668      	mov	r0, sp
    f676:	f7f4 fa77 	bl	3b68 <mpsl_fem_pa_is_configured>
    f67a:	f89d 0000 	ldrb.w	r0, [sp]
    f67e:	2800      	cmp	r0, #0
    f680:	d000      	beq.n	f684 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I+0x12>
    f682:	2001      	movs	r0, #1
    f684:	bd08      	pop	{r3, pc}

0000f686 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    f686:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    f68a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    f68e:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    f692:	f3bf 8f4f 	dsb	sy
    f696:	f3bf 8f6f 	isb	sy
    f69a:	f7fb ba53 	b.w	ab44 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    f69e:	2800      	cmp	r0, #0
    f6a0:	db09      	blt.n	f6b6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
    f6a2:	f000 021f 	and.w	r2, r0, #31
    f6a6:	2101      	movs	r1, #1
    f6a8:	4091      	lsls	r1, r2
    f6aa:	0940      	lsrs	r0, r0, #5
    f6ac:	0080      	lsls	r0, r0, #2
    f6ae:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    f6b2:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    f6b6:	4770      	bx	lr
    f6b8:	2800      	cmp	r0, #0
    f6ba:	db0d      	blt.n	f6d8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
    f6bc:	f000 021f 	and.w	r2, r0, #31
    f6c0:	2101      	movs	r1, #1
    f6c2:	4091      	lsls	r1, r2
    f6c4:	0940      	lsrs	r0, r0, #5
    f6c6:	0080      	lsls	r0, r0, #2
    f6c8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    f6cc:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    f6d0:	f3bf 8f4f 	dsb	sy
    f6d4:	f3bf 8f6f 	isb	sy
    f6d8:	4770      	bx	lr

0000f6da <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    f6da:	b510      	push	{r4, lr}
    f6dc:	2801      	cmp	r0, #1
    f6de:	d006      	beq.n	f6ee <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x14>
    f6e0:	2802      	cmp	r0, #2
    f6e2:	d006      	beq.n	f6f2 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x18>
    f6e4:	f640 31a9 	movw	r1, #2985	; 0xba9
    f6e8:	203e      	movs	r0, #62	; 0x3e
    f6ea:	f7f4 fb37 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f6ee:	2028      	movs	r0, #40	; 0x28
    f6f0:	bd10      	pop	{r4, pc}
    f6f2:	2018      	movs	r0, #24
    f6f4:	bd10      	pop	{r4, pc}

0000f6f6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    f6f6:	b510      	push	{r4, lr}
    f6f8:	2801      	cmp	r0, #1
    f6fa:	d006      	beq.n	f70a <__kernel_ram_size+0x2>
    f6fc:	2802      	cmp	r0, #2
    f6fe:	d007      	beq.n	f710 <__kernel_ram_size+0x8>
    f700:	f640 31bd 	movw	r1, #3005	; 0xbbd
    f704:	203e      	movs	r0, #62	; 0x3e
    f706:	f7f4 fb29 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f70a:	f641 6014 	movw	r0, #7700	; 0x1e14
    f70e:	bd10      	pop	{r4, pc}
    f710:	f241 1030 	movw	r0, #4400	; 0x1130
    f714:	bd10      	pop	{r4, pc}

0000f716 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>:
    f716:	f7fc b935 	b.w	b984 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x48c>
    f71a:	b510      	push	{r4, lr}
    f71c:	460a      	mov	r2, r1
    f71e:	b130      	cbz	r0, f72e <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x18>
    f720:	2801      	cmp	r0, #1
    f722:	d00b      	beq.n	f73c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x26>
    f724:	f240 612f 	movw	r1, #1583	; 0x62f
    f728:	203e      	movs	r0, #62	; 0x3e
    f72a:	f7f4 fb17 	bl	3d5c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f72e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f732:	f102 0128 	add.w	r1, r2, #40	; 0x28
    f736:	4610      	mov	r0, r2
    f738:	f7fb b8fa 	b.w	a930 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>
    f73c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f740:	f102 0129 	add.w	r1, r2, #41	; 0x29
    f744:	4610      	mov	r0, r2
    f746:	f7fb b8dd 	b.w	a904 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>

0000f74a <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    f74a:	b570      	push	{r4, r5, r6, lr}
    f74c:	4605      	mov	r5, r0
    f74e:	4614      	mov	r4, r2
    f750:	4608      	mov	r0, r1
    f752:	f7ff ffd0 	bl	f6f6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f756:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    f75a:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    f75e:	ebc0 05c1 	rsb	r5, r0, r1, lsl #3
    f762:	4620      	mov	r0, r4
    f764:	f7ff ffc7 	bl	f6f6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f768:	4428      	add	r0, r5
    f76a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f76e:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    f772:	fbb0 f5f1 	udiv	r5, r0, r1
    f776:	4620      	mov	r0, r4
    f778:	f7ff ffaf 	bl	f6da <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f77c:	4428      	add	r0, r5
    f77e:	1d40      	adds	r0, r0, #5
    f780:	bd70      	pop	{r4, r5, r6, pc}

0000f782 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    f782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f786:	4607      	mov	r7, r0
    f788:	461d      	mov	r5, r3
    f78a:	460e      	mov	r6, r1
    f78c:	4614      	mov	r4, r2
    f78e:	4610      	mov	r0, r2
    f790:	f7ff ffb1 	bl	f6f6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f794:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    f798:	ebc1 11c7 	rsb	r1, r1, r7, lsl #7
    f79c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    f7a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    f7a4:	2e02      	cmp	r6, #2
    f7a6:	d00e      	beq.n	f7c6 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x44>
    f7a8:	f240 52dc 	movw	r2, #1500	; 0x5dc
    f7ac:	4411      	add	r1, r2
    f7ae:	f601 31b7 	addw	r1, r1, #2999	; 0xbb7
    f7b2:	fbb1 f6f0 	udiv	r6, r1, r0
    f7b6:	4620      	mov	r0, r4
    f7b8:	f7ff ff8f 	bl	f6da <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f7bc:	4430      	add	r0, r6
    f7be:	4428      	add	r0, r5
    f7c0:	1d40      	adds	r0, r0, #5
    f7c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f7c6:	4602      	mov	r2, r0
    f7c8:	e7f0      	b.n	f7ac <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x2a>

0000f7ca <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
    f7ca:	b510      	push	{r4, lr}
    f7cc:	4604      	mov	r4, r0
    f7ce:	4608      	mov	r0, r1
    f7d0:	f7ff ff91 	bl	f6f6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f7d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f7d8:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    f7dc:	fbb0 f0f1 	udiv	r0, r0, r1
    f7e0:	1a20      	subs	r0, r4, r0
    f7e2:	1e80      	subs	r0, r0, #2
    f7e4:	bd10      	pop	{r4, pc}

0000f7e6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
    f7e6:	b510      	push	{r4, lr}
    f7e8:	4604      	mov	r4, r0
    f7ea:	4608      	mov	r0, r1
    f7ec:	f7ff ff83 	bl	f6f6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f7f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f7f4:	fbb0 f0f1 	udiv	r0, r0, r1
    f7f8:	1a20      	subs	r0, r4, r0
    f7fa:	bd10      	pop	{r4, pc}

0000f7fc <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    f7fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f800:	2902      	cmp	r1, #2
    f802:	d008      	beq.n	f816 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x1a>
    f804:	f240 51dc 	movw	r1, #1500	; 0x5dc
    f808:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    f80c:	fbb1 f1f2 	udiv	r1, r1, r2
    f810:	4408      	add	r0, r1
    f812:	1e80      	subs	r0, r0, #2
    f814:	4770      	bx	lr
    f816:	4611      	mov	r1, r2
    f818:	e7f6      	b.n	f808 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0xc>

0000f81a <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    f81a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f81e:	2902      	cmp	r1, #2
    f820:	d007      	beq.n	f832 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>
    f822:	f240 51dc 	movw	r1, #1500	; 0x5dc
    f826:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    f82a:	fbb1 f1f2 	udiv	r1, r1, r2
    f82e:	4408      	add	r0, r1
    f830:	4770      	bx	lr
    f832:	4611      	mov	r1, r2
    f834:	e7f7      	b.n	f826 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0xc>
    f836:	080c      	.short	0x080c
    f838:	010d1702 	.word	0x010d1702
    f83c:	09090201 	.word	0x09090201
    f840:	02060101 	.word	0x02060101
    f844:	03181809 	.word	0x03181809
    f848:	09090101 	.word	0x09090101
    f84c:	00050303 	.word	0x00050303

0000f850 <hrmc_ccc_cfg_changed>:
LOG_MODULE_REGISTER(hrs);

static uint8_t hrs_blsc;

static void hrmc_ccc_cfg_changed(const struct bt_gatt_attr *attr, uint16_t value)
{
    f850:	b508      	push	{r3, lr}
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    f852:	4b0b      	ldr	r3, [pc, #44]	; (f880 <hrmc_ccc_cfg_changed+0x30>)
    f854:	4a0b      	ldr	r2, [pc, #44]	; (f884 <hrmc_ccc_cfg_changed+0x34>)
    f856:	1a9b      	subs	r3, r3, r2
    f858:	08db      	lsrs	r3, r3, #3
	ARG_UNUSED(attr);

	bool notif_enabled = (value == BT_GATT_CCC_NOTIFY);

	LOG_INF("HRS notifications %s", notif_enabled ? "enabled" : "disabled");
    f85a:	f04f 0200 	mov.w	r2, #0
    f85e:	2003      	movs	r0, #3
    f860:	f360 0202 	bfi	r2, r0, #0, #3
    f864:	f36f 02c5 	bfc	r2, #3, #3
    f868:	f363 128f 	bfi	r2, r3, #6, #10
    f86c:	2901      	cmp	r1, #1
    f86e:	d004      	beq.n	f87a <hrmc_ccc_cfg_changed+0x2a>
    f870:	4905      	ldr	r1, [pc, #20]	; (f888 <hrmc_ccc_cfg_changed+0x38>)
    f872:	4806      	ldr	r0, [pc, #24]	; (f88c <hrmc_ccc_cfg_changed+0x3c>)
    f874:	f001 fc4c 	bl	11110 <log_1>
}
    f878:	bd08      	pop	{r3, pc}
	LOG_INF("HRS notifications %s", notif_enabled ? "enabled" : "disabled");
    f87a:	4905      	ldr	r1, [pc, #20]	; (f890 <hrmc_ccc_cfg_changed+0x40>)
    f87c:	e7f9      	b.n	f872 <hrmc_ccc_cfg_changed+0x22>
    f87e:	bf00      	nop
    f880:	00029f74 	.word	0x00029f74
    f884:	00029ecc 	.word	0x00029ecc
    f888:	0002a148 	.word	0x0002a148
    f88c:	0002a154 	.word	0x0002a154
    f890:	0002a3e8 	.word	0x0002a3e8

0000f894 <security_change>:
		bt_conn_unref(conn);
	}
}

void security_change (struct bt_conn *conn, bt_security_t level, enum bt_security_err err)
{
    f894:	b508      	push	{r3, lr}
	printk("security Level = %d\n", level );
    f896:	4802      	ldr	r0, [pc, #8]	; (f8a0 <security_change+0xc>)
    f898:	f011 fe78 	bl	2158c <printk>
}
    f89c:	bd08      	pop	{r3, pc}
    f89e:	bf00      	nop
    f8a0:	0002a1c0 	.word	0x0002a1c0

0000f8a4 <passkey_display>:
	printk("Sending entry passkey = %d", 123456);
	bt_conn_auth_passkey_entry(conn, 123456);
}

void passkey_display(struct bt_conn *conn, unsigned int passkey)
{
    f8a4:	b508      	push	{r3, lr}
	printk("Controller passkey = %d", passkey);
    f8a6:	4802      	ldr	r0, [pc, #8]	; (f8b0 <passkey_display+0xc>)
    f8a8:	f011 fe70 	bl	2158c <printk>
}
    f8ac:	bd08      	pop	{r3, pc}
    f8ae:	bf00      	nop
    f8b0:	0002a1d8 	.word	0x0002a1d8

0000f8b4 <passkey_confirm>:

void passkey_confirm(struct bt_conn *conn, unsigned int passkey)
{
    f8b4:	b510      	push	{r4, lr}
    f8b6:	4604      	mov	r4, r0
	printk("Confirm Passkey = %d\n", passkey);
    f8b8:	4803      	ldr	r0, [pc, #12]	; (f8c8 <passkey_confirm+0x14>)
    f8ba:	f011 fe67 	bl	2158c <printk>
	
	bt_conn_auth_passkey_confirm(conn);
    f8be:	4620      	mov	r0, r4
    f8c0:	f009 f9ba 	bl	18c38 <bt_conn_auth_passkey_confirm>
}
    f8c4:	bd10      	pop	{r4, pc}
    f8c6:	bf00      	nop
    f8c8:	0002a1f0 	.word	0x0002a1f0

0000f8cc <passkey_entry>:
{
    f8cc:	b538      	push	{r3, r4, r5, lr}
    f8ce:	4604      	mov	r4, r0
	printk("Sending entry passkey = %d", 123456);
    f8d0:	4d04      	ldr	r5, [pc, #16]	; (f8e4 <passkey_entry+0x18>)
    f8d2:	4629      	mov	r1, r5
    f8d4:	4804      	ldr	r0, [pc, #16]	; (f8e8 <passkey_entry+0x1c>)
    f8d6:	f011 fe59 	bl	2158c <printk>
	bt_conn_auth_passkey_entry(conn, 123456);
    f8da:	4629      	mov	r1, r5
    f8dc:	4620      	mov	r0, r4
    f8de:	f009 f997 	bl	18c10 <bt_conn_auth_passkey_entry>
}
    f8e2:	bd38      	pop	{r3, r4, r5, pc}
    f8e4:	0001e240 	.word	0x0001e240
    f8e8:	0002a208 	.word	0x0002a208

0000f8ec <connected>:
{
    f8ec:	b510      	push	{r4, lr}
    f8ee:	b082      	sub	sp, #8
	if (err)
    f8f0:	b121      	cbz	r1, f8fc <connected+0x10>
		printk("Connection failed (err 0x%02x)\n", err);
    f8f2:	480d      	ldr	r0, [pc, #52]	; (f928 <connected+0x3c>)
    f8f4:	f011 fe4a 	bl	2158c <printk>
}
    f8f8:	b002      	add	sp, #8
    f8fa:	bd10      	pop	{r4, pc}
    f8fc:	4604      	mov	r4, r0
		bt_conn_ref(conn);
    f8fe:	f015 ffd4 	bl	258aa <bt_conn_ref>
		printk("Connecting\n");
    f902:	480a      	ldr	r0, [pc, #40]	; (f92c <connected+0x40>)
    f904:	f011 fe42 	bl	2158c <printk>
		data.type = CONN;
    f908:	2300      	movs	r3, #0
    f90a:	f88d 3000 	strb.w	r3, [sp]
		data.conn = conn;
    f90e:	9401      	str	r4, [sp, #4]
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&msgq, *(uintptr_t *)&data, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MSGQ_PUT);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_put(msgq, data, timeout);
    f910:	2200      	movs	r2, #0
    f912:	2300      	movs	r3, #0
    f914:	4669      	mov	r1, sp
    f916:	4806      	ldr	r0, [pc, #24]	; (f930 <connected+0x44>)
    f918:	f010 f844 	bl	1f9a4 <z_impl_k_msgq_put>
		if (k_msgq_put(&conn_msgq, &data, K_NO_WAIT))
    f91c:	2800      	cmp	r0, #0
    f91e:	d0eb      	beq.n	f8f8 <connected+0xc>
			bt_conn_unref(conn);
    f920:	4620      	mov	r0, r4
    f922:	f015 ffe9 	bl	258f8 <bt_conn_unref>
}
    f926:	e7e7      	b.n	f8f8 <connected+0xc>
    f928:	0002a224 	.word	0x0002a224
    f92c:	0002a244 	.word	0x0002a244
    f930:	200023fc 	.word	0x200023fc

0000f934 <auth_cancel>:
static void auth_cancel(struct bt_conn *conn)
{
    f934:	b570      	push	{r4, r5, r6, lr}
    f936:	b092      	sub	sp, #72	; 0x48
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    f938:	f016 f834 	bl	259a4 <bt_conn_get_dst>
    f93c:	4604      	mov	r4, r0
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    f93e:	7803      	ldrb	r3, [r0, #0]
    f940:	2b03      	cmp	r3, #3
    f942:	d82e      	bhi.n	f9a2 <auth_cancel+0x6e>
    f944:	e8df f003 	tbb	[pc, r3]
    f948:	28231e02 	.word	0x28231e02
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    f94c:	4918      	ldr	r1, [pc, #96]	; (f9b0 <auth_cancel+0x7c>)
    f94e:	a807      	add	r0, sp, #28
    f950:	f015 f81b 	bl	2498a <strcpy>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
    f954:	79a3      	ldrb	r3, [r4, #6]
    f956:	7962      	ldrb	r2, [r4, #5]
    f958:	7921      	ldrb	r1, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
    f95a:	78e0      	ldrb	r0, [r4, #3]
    f95c:	78a5      	ldrb	r5, [r4, #2]
    f95e:	7864      	ldrb	r4, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    f960:	ae07      	add	r6, sp, #28
    f962:	9605      	str	r6, [sp, #20]
    f964:	9404      	str	r4, [sp, #16]
    f966:	9503      	str	r5, [sp, #12]
    f968:	9002      	str	r0, [sp, #8]
    f96a:	9101      	str	r1, [sp, #4]
    f96c:	9200      	str	r2, [sp, #0]
    f96e:	4a11      	ldr	r2, [pc, #68]	; (f9b4 <auth_cancel+0x80>)
    f970:	211e      	movs	r1, #30
    f972:	a80a      	add	r0, sp, #40	; 0x28
    f974:	f011 fe18 	bl	215a8 <snprintk>

	printk("Pairing cancelled: %s\n", addr);
    f978:	a90a      	add	r1, sp, #40	; 0x28
    f97a:	480f      	ldr	r0, [pc, #60]	; (f9b8 <auth_cancel+0x84>)
    f97c:	f011 fe06 	bl	2158c <printk>
}
    f980:	b012      	add	sp, #72	; 0x48
    f982:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    f984:	490d      	ldr	r1, [pc, #52]	; (f9bc <auth_cancel+0x88>)
    f986:	a807      	add	r0, sp, #28
    f988:	f014 ffff 	bl	2498a <strcpy>
		break;
    f98c:	e7e2      	b.n	f954 <auth_cancel+0x20>
		strcpy(type, "public-id");
    f98e:	490c      	ldr	r1, [pc, #48]	; (f9c0 <auth_cancel+0x8c>)
    f990:	a807      	add	r0, sp, #28
    f992:	f014 fffa 	bl	2498a <strcpy>
		break;
    f996:	e7dd      	b.n	f954 <auth_cancel+0x20>
		strcpy(type, "random-id");
    f998:	490a      	ldr	r1, [pc, #40]	; (f9c4 <auth_cancel+0x90>)
    f99a:	a807      	add	r0, sp, #28
    f99c:	f014 fff5 	bl	2498a <strcpy>
		break;
    f9a0:	e7d8      	b.n	f954 <auth_cancel+0x20>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    f9a2:	4a09      	ldr	r2, [pc, #36]	; (f9c8 <auth_cancel+0x94>)
    f9a4:	210a      	movs	r1, #10
    f9a6:	a807      	add	r0, sp, #28
    f9a8:	f011 fdfe 	bl	215a8 <snprintk>
		break;
    f9ac:	e7d2      	b.n	f954 <auth_cancel+0x20>
    f9ae:	bf00      	nop
    f9b0:	0002a250 	.word	0x0002a250
    f9b4:	0002a278 	.word	0x0002a278
    f9b8:	0002a29c 	.word	0x0002a29c
    f9bc:	0002a258 	.word	0x0002a258
    f9c0:	0002a260 	.word	0x0002a260
    f9c4:	0002a26c 	.word	0x0002a26c
    f9c8:	0002cb80 	.word	0x0002cb80

0000f9cc <auth_pairing>:
{
    f9cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    f9ce:	b093      	sub	sp, #76	; 0x4c
    f9d0:	4605      	mov	r5, r0
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    f9d2:	f015 ffe7 	bl	259a4 <bt_conn_get_dst>
    f9d6:	4604      	mov	r4, r0
	switch (addr->type) {
    f9d8:	7803      	ldrb	r3, [r0, #0]
    f9da:	2b03      	cmp	r3, #3
    f9dc:	d832      	bhi.n	fa44 <auth_pairing+0x78>
    f9de:	e8df f003 	tbb	[pc, r3]
    f9e2:	2202      	.short	0x2202
    f9e4:	2c27      	.short	0x2c27
		strcpy(type, "public");
    f9e6:	491a      	ldr	r1, [pc, #104]	; (fa50 <auth_pairing+0x84>)
    f9e8:	a807      	add	r0, sp, #28
    f9ea:	f014 ffce 	bl	2498a <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
    f9ee:	79a3      	ldrb	r3, [r4, #6]
    f9f0:	7962      	ldrb	r2, [r4, #5]
    f9f2:	7921      	ldrb	r1, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
    f9f4:	78e0      	ldrb	r0, [r4, #3]
    f9f6:	78a6      	ldrb	r6, [r4, #2]
    f9f8:	7864      	ldrb	r4, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    f9fa:	af07      	add	r7, sp, #28
    f9fc:	9705      	str	r7, [sp, #20]
    f9fe:	9404      	str	r4, [sp, #16]
    fa00:	9603      	str	r6, [sp, #12]
    fa02:	9002      	str	r0, [sp, #8]
    fa04:	9101      	str	r1, [sp, #4]
    fa06:	9200      	str	r2, [sp, #0]
    fa08:	4a12      	ldr	r2, [pc, #72]	; (fa54 <auth_pairing+0x88>)
    fa0a:	211e      	movs	r1, #30
    fa0c:	a80a      	add	r0, sp, #40	; 0x28
    fa0e:	f011 fdcb 	bl	215a8 <snprintk>
	int err = bt_conn_auth_pairing_confirm(conn);
    fa12:	4628      	mov	r0, r5
    fa14:	f009 f922 	bl	18c5c <bt_conn_auth_pairing_confirm>
    fa18:	4601      	mov	r1, r0
	printk("Pairing Authorized %d: %s\n", err, addr);
    fa1a:	aa0a      	add	r2, sp, #40	; 0x28
    fa1c:	480e      	ldr	r0, [pc, #56]	; (fa58 <auth_pairing+0x8c>)
    fa1e:	f011 fdb5 	bl	2158c <printk>
}
    fa22:	b013      	add	sp, #76	; 0x4c
    fa24:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
    fa26:	490d      	ldr	r1, [pc, #52]	; (fa5c <auth_pairing+0x90>)
    fa28:	a807      	add	r0, sp, #28
    fa2a:	f014 ffae 	bl	2498a <strcpy>
		break;
    fa2e:	e7de      	b.n	f9ee <auth_pairing+0x22>
		strcpy(type, "public-id");
    fa30:	490b      	ldr	r1, [pc, #44]	; (fa60 <auth_pairing+0x94>)
    fa32:	a807      	add	r0, sp, #28
    fa34:	f014 ffa9 	bl	2498a <strcpy>
		break;
    fa38:	e7d9      	b.n	f9ee <auth_pairing+0x22>
		strcpy(type, "random-id");
    fa3a:	490a      	ldr	r1, [pc, #40]	; (fa64 <auth_pairing+0x98>)
    fa3c:	a807      	add	r0, sp, #28
    fa3e:	f014 ffa4 	bl	2498a <strcpy>
		break;
    fa42:	e7d4      	b.n	f9ee <auth_pairing+0x22>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    fa44:	4a08      	ldr	r2, [pc, #32]	; (fa68 <auth_pairing+0x9c>)
    fa46:	210a      	movs	r1, #10
    fa48:	a807      	add	r0, sp, #28
    fa4a:	f011 fdad 	bl	215a8 <snprintk>
		break;
    fa4e:	e7ce      	b.n	f9ee <auth_pairing+0x22>
    fa50:	0002a250 	.word	0x0002a250
    fa54:	0002a278 	.word	0x0002a278
    fa58:	0002a2b4 	.word	0x0002a2b4
    fa5c:	0002a258 	.word	0x0002a258
    fa60:	0002a260 	.word	0x0002a260
    fa64:	0002a26c 	.word	0x0002a26c
    fa68:	0002cb80 	.word	0x0002cb80

0000fa6c <disconnected>:
{
    fa6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    fa6e:	b095      	sub	sp, #84	; 0x54
    fa70:	4605      	mov	r5, r0
    fa72:	460e      	mov	r6, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr_str, sizeof(addr_str));
    fa74:	f015 ff96 	bl	259a4 <bt_conn_get_dst>
    fa78:	4604      	mov	r4, r0
	switch (addr->type) {
    fa7a:	7803      	ldrb	r3, [r0, #0]
    fa7c:	2b03      	cmp	r3, #3
    fa7e:	d83c      	bhi.n	fafa <disconnected+0x8e>
    fa80:	e8df f003 	tbb	[pc, r3]
    fa84:	36312c02 	.word	0x36312c02
		strcpy(type, "public");
    fa88:	4921      	ldr	r1, [pc, #132]	; (fb10 <disconnected+0xa4>)
    fa8a:	a807      	add	r0, sp, #28
    fa8c:	f014 ff7d 	bl	2498a <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
    fa90:	79a3      	ldrb	r3, [r4, #6]
    fa92:	7962      	ldrb	r2, [r4, #5]
    fa94:	7921      	ldrb	r1, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
    fa96:	78e0      	ldrb	r0, [r4, #3]
    fa98:	78a7      	ldrb	r7, [r4, #2]
    fa9a:	7864      	ldrb	r4, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    fa9c:	f10d 0c1c 	add.w	ip, sp, #28
    faa0:	f8cd c014 	str.w	ip, [sp, #20]
    faa4:	9404      	str	r4, [sp, #16]
    faa6:	9703      	str	r7, [sp, #12]
    faa8:	9002      	str	r0, [sp, #8]
    faaa:	9101      	str	r1, [sp, #4]
    faac:	9200      	str	r2, [sp, #0]
    faae:	4a19      	ldr	r2, [pc, #100]	; (fb14 <disconnected+0xa8>)
    fab0:	211e      	movs	r1, #30
    fab2:	a80c      	add	r0, sp, #48	; 0x30
    fab4:	f011 fd78 	bl	215a8 <snprintk>
	printk("Disconnecting: %s (reason %u)\n", addr_str, reason);
    fab8:	4632      	mov	r2, r6
    faba:	a90c      	add	r1, sp, #48	; 0x30
    fabc:	4816      	ldr	r0, [pc, #88]	; (fb18 <disconnected+0xac>)
    fabe:	f011 fd65 	bl	2158c <printk>
	data.type = DISCONN;
    fac2:	2301      	movs	r3, #1
    fac4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
	data.conn = conn;
    fac8:	950b      	str	r5, [sp, #44]	; 0x2c
    faca:	2200      	movs	r2, #0
    facc:	2300      	movs	r3, #0
    face:	a90a      	add	r1, sp, #40	; 0x28
    fad0:	4812      	ldr	r0, [pc, #72]	; (fb1c <disconnected+0xb0>)
    fad2:	f00f ff67 	bl	1f9a4 <z_impl_k_msgq_put>
	if (k_msgq_put(&conn_msgq, &data, K_NO_WAIT))
    fad6:	b9b0      	cbnz	r0, fb06 <disconnected+0x9a>
}
    fad8:	b015      	add	sp, #84	; 0x54
    fada:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
    fadc:	4910      	ldr	r1, [pc, #64]	; (fb20 <disconnected+0xb4>)
    fade:	a807      	add	r0, sp, #28
    fae0:	f014 ff53 	bl	2498a <strcpy>
		break;
    fae4:	e7d4      	b.n	fa90 <disconnected+0x24>
		strcpy(type, "public-id");
    fae6:	490f      	ldr	r1, [pc, #60]	; (fb24 <disconnected+0xb8>)
    fae8:	a807      	add	r0, sp, #28
    faea:	f014 ff4e 	bl	2498a <strcpy>
		break;
    faee:	e7cf      	b.n	fa90 <disconnected+0x24>
		strcpy(type, "random-id");
    faf0:	490d      	ldr	r1, [pc, #52]	; (fb28 <disconnected+0xbc>)
    faf2:	a807      	add	r0, sp, #28
    faf4:	f014 ff49 	bl	2498a <strcpy>
		break;
    faf8:	e7ca      	b.n	fa90 <disconnected+0x24>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    fafa:	4a0c      	ldr	r2, [pc, #48]	; (fb2c <disconnected+0xc0>)
    fafc:	210a      	movs	r1, #10
    fafe:	a807      	add	r0, sp, #28
    fb00:	f011 fd52 	bl	215a8 <snprintk>
		break;
    fb04:	e7c4      	b.n	fa90 <disconnected+0x24>
		bt_conn_unref(conn);
    fb06:	4628      	mov	r0, r5
    fb08:	f015 fef6 	bl	258f8 <bt_conn_unref>
}
    fb0c:	e7e4      	b.n	fad8 <disconnected+0x6c>
    fb0e:	bf00      	nop
    fb10:	0002a250 	.word	0x0002a250
    fb14:	0002a278 	.word	0x0002a278
    fb18:	0002a2d0 	.word	0x0002a2d0
    fb1c:	200023fc 	.word	0x200023fc
    fb20:	0002a258 	.word	0x0002a258
    fb24:	0002a260 	.word	0x0002a260
    fb28:	0002a26c 	.word	0x0002a26c
    fb2c:	0002cb80 	.word	0x0002cb80

0000fb30 <check_paired_list>:
{
    fb30:	b510      	push	{r4, lr}
    fb32:	b082      	sub	sp, #8
    fb34:	ab02      	add	r3, sp, #8
    fb36:	e903 0003 	stmdb	r3, {r0, r1}
	for (int i = 0; i < bt_dclk.num_paired; i++)
    fb3a:	2100      	movs	r1, #0
    fb3c:	e006      	b.n	fb4c <check_paired_list+0x1c>
				printk("Address in list\n");
    fb3e:	4811      	ldr	r0, [pc, #68]	; (fb84 <check_paired_list+0x54>)
    fb40:	f011 fd24 	bl	2158c <printk>
				return true;
    fb44:	2001      	movs	r0, #1
}
    fb46:	b002      	add	sp, #8
    fb48:	bd10      	pop	{r4, pc}
	for (int i = 0; i < bt_dclk.num_paired; i++)
    fb4a:	3101      	adds	r1, #1
    fb4c:	4b0e      	ldr	r3, [pc, #56]	; (fb88 <check_paired_list+0x58>)
    fb4e:	781b      	ldrb	r3, [r3, #0]
    fb50:	428b      	cmp	r3, r1
    fb52:	dd12      	ble.n	fb7a <check_paired_list+0x4a>
		for (int j = 0; j < sizeof(addr.a.val); j++)
    fb54:	2300      	movs	r3, #0
    fb56:	2b05      	cmp	r3, #5
    fb58:	d8f7      	bhi.n	fb4a <check_paired_list+0x1a>
			if (addr.a.val[j] != bt_dclk.addr_list[i].a.val[j])
    fb5a:	aa02      	add	r2, sp, #8
    fb5c:	441a      	add	r2, r3
    fb5e:	f812 0c07 	ldrb.w	r0, [r2, #-7]
    fb62:	ebc1 04c1 	rsb	r4, r1, r1, lsl #3
    fb66:	4a08      	ldr	r2, [pc, #32]	; (fb88 <check_paired_list+0x58>)
    fb68:	4422      	add	r2, r4
    fb6a:	441a      	add	r2, r3
    fb6c:	7912      	ldrb	r2, [r2, #4]
    fb6e:	4290      	cmp	r0, r2
    fb70:	d1eb      	bne.n	fb4a <check_paired_list+0x1a>
			if (j >= 5)
    fb72:	2b04      	cmp	r3, #4
    fb74:	dce3      	bgt.n	fb3e <check_paired_list+0xe>
		for (int j = 0; j < sizeof(addr.a.val); j++)
    fb76:	3301      	adds	r3, #1
    fb78:	e7ed      	b.n	fb56 <check_paired_list+0x26>
	printk("Address not in list\n");
    fb7a:	4804      	ldr	r0, [pc, #16]	; (fb8c <check_paired_list+0x5c>)
    fb7c:	f011 fd06 	bl	2158c <printk>
	return false;
    fb80:	2000      	movs	r0, #0
    fb82:	e7e0      	b.n	fb46 <check_paired_list+0x16>
    fb84:	0002a2f0 	.word	0x0002a2f0
    fb88:	200023e8 	.word	0x200023e8
    fb8c:	0002a304 	.word	0x0002a304

0000fb90 <bt_stop_advertise>:
{
    fb90:	b508      	push	{r3, lr}
	int err = bt_le_adv_stop();
    fb92:	f008 f865 	bl	17c60 <bt_le_adv_stop>
	bt_dclk.pair_en = false;
    fb96:	4b06      	ldr	r3, [pc, #24]	; (fbb0 <bt_stop_advertise+0x20>)
    fb98:	2200      	movs	r2, #0
    fb9a:	709a      	strb	r2, [r3, #2]
	if (err)
    fb9c:	b918      	cbnz	r0, fba6 <bt_stop_advertise+0x16>
	printk("Advertising terminated\n");
    fb9e:	4805      	ldr	r0, [pc, #20]	; (fbb4 <bt_stop_advertise+0x24>)
    fba0:	f011 fcf4 	bl	2158c <printk>
}
    fba4:	bd08      	pop	{r3, pc}
		printk("Falied to terminate advertising\n");
    fba6:	4804      	ldr	r0, [pc, #16]	; (fbb8 <bt_stop_advertise+0x28>)
    fba8:	f011 fcf0 	bl	2158c <printk>
    fbac:	e7f7      	b.n	fb9e <bt_stop_advertise+0xe>
    fbae:	bf00      	nop
    fbb0:	200023e8 	.word	0x200023e8
    fbb4:	0002a340 	.word	0x0002a340
    fbb8:	0002a31c 	.word	0x0002a31c

0000fbbc <pairing_complete>:
{
    fbbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    fbbe:	b093      	sub	sp, #76	; 0x4c
    fbc0:	4605      	mov	r5, r0
    fbc2:	460e      	mov	r6, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr_str, sizeof(addr_str));
    fbc4:	f015 feee 	bl	259a4 <bt_conn_get_dst>
    fbc8:	4604      	mov	r4, r0
	switch (addr->type) {
    fbca:	7803      	ldrb	r3, [r0, #0]
    fbcc:	2b03      	cmp	r3, #3
    fbce:	d83d      	bhi.n	fc4c <pairing_complete+0x90>
    fbd0:	e8df f003 	tbb	[pc, r3]
    fbd4:	37322d02 	.word	0x37322d02
		strcpy(type, "public");
    fbd8:	492d      	ldr	r1, [pc, #180]	; (fc90 <pairing_complete+0xd4>)
    fbda:	a807      	add	r0, sp, #28
    fbdc:	f014 fed5 	bl	2498a <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
    fbe0:	79a3      	ldrb	r3, [r4, #6]
    fbe2:	7962      	ldrb	r2, [r4, #5]
    fbe4:	7921      	ldrb	r1, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
    fbe6:	78e0      	ldrb	r0, [r4, #3]
    fbe8:	78a7      	ldrb	r7, [r4, #2]
    fbea:	7864      	ldrb	r4, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    fbec:	f10d 0c1c 	add.w	ip, sp, #28
    fbf0:	f8cd c014 	str.w	ip, [sp, #20]
    fbf4:	9404      	str	r4, [sp, #16]
    fbf6:	9703      	str	r7, [sp, #12]
    fbf8:	9002      	str	r0, [sp, #8]
    fbfa:	9101      	str	r1, [sp, #4]
    fbfc:	9200      	str	r2, [sp, #0]
    fbfe:	4a25      	ldr	r2, [pc, #148]	; (fc94 <pairing_complete+0xd8>)
    fc00:	211e      	movs	r1, #30
    fc02:	a80a      	add	r0, sp, #40	; 0x28
    fc04:	f011 fcd0 	bl	215a8 <snprintk>
	if (bonded)
    fc08:	2e00      	cmp	r6, #0
    fc0a:	d03b      	beq.n	fc84 <pairing_complete+0xc8>
		printk("Pairing Complete: %s", addr_str);
    fc0c:	a90a      	add	r1, sp, #40	; 0x28
    fc0e:	4822      	ldr	r0, [pc, #136]	; (fc98 <pairing_complete+0xdc>)
    fc10:	f011 fcbc 	bl	2158c <printk>
		for (int j = 6; j > 0; --j)
    fc14:	2406      	movs	r4, #6
    fc16:	2c00      	cmp	r4, #0
    fc18:	dd1e      	ble.n	fc58 <pairing_complete+0x9c>
			printk("add to list %d\n", (bt_conn_get_dst(conn))->a.val[j]);
    fc1a:	4628      	mov	r0, r5
    fc1c:	f015 fec2 	bl	259a4 <bt_conn_get_dst>
    fc20:	4420      	add	r0, r4
    fc22:	7841      	ldrb	r1, [r0, #1]
    fc24:	481d      	ldr	r0, [pc, #116]	; (fc9c <pairing_complete+0xe0>)
    fc26:	f011 fcb1 	bl	2158c <printk>
		for (int j = 6; j > 0; --j)
    fc2a:	3c01      	subs	r4, #1
    fc2c:	e7f3      	b.n	fc16 <pairing_complete+0x5a>
		strcpy(type, "random");
    fc2e:	491c      	ldr	r1, [pc, #112]	; (fca0 <pairing_complete+0xe4>)
    fc30:	a807      	add	r0, sp, #28
    fc32:	f014 feaa 	bl	2498a <strcpy>
		break;
    fc36:	e7d3      	b.n	fbe0 <pairing_complete+0x24>
		strcpy(type, "public-id");
    fc38:	491a      	ldr	r1, [pc, #104]	; (fca4 <pairing_complete+0xe8>)
    fc3a:	a807      	add	r0, sp, #28
    fc3c:	f014 fea5 	bl	2498a <strcpy>
		break;
    fc40:	e7ce      	b.n	fbe0 <pairing_complete+0x24>
		strcpy(type, "random-id");
    fc42:	4919      	ldr	r1, [pc, #100]	; (fca8 <pairing_complete+0xec>)
    fc44:	a807      	add	r0, sp, #28
    fc46:	f014 fea0 	bl	2498a <strcpy>
		break;
    fc4a:	e7c9      	b.n	fbe0 <pairing_complete+0x24>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    fc4c:	4a17      	ldr	r2, [pc, #92]	; (fcac <pairing_complete+0xf0>)
    fc4e:	210a      	movs	r1, #10
    fc50:	a807      	add	r0, sp, #28
    fc52:	f011 fca9 	bl	215a8 <snprintk>
		break;
    fc56:	e7c3      	b.n	fbe0 <pairing_complete+0x24>
		bt_dclk.addr_list[bt_dclk.num_paired] = *(bt_conn_get_dst(conn));
    fc58:	4628      	mov	r0, r5
    fc5a:	f015 fea3 	bl	259a4 <bt_conn_get_dst>
    fc5e:	4914      	ldr	r1, [pc, #80]	; (fcb0 <pairing_complete+0xf4>)
    fc60:	780b      	ldrb	r3, [r1, #0]
    fc62:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
    fc66:	440a      	add	r2, r1
    fc68:	6804      	ldr	r4, [r0, #0]
    fc6a:	f8c2 4003 	str.w	r4, [r2, #3]
    fc6e:	8884      	ldrh	r4, [r0, #4]
    fc70:	7980      	ldrb	r0, [r0, #6]
    fc72:	f8a2 4007 	strh.w	r4, [r2, #7]
    fc76:	7250      	strb	r0, [r2, #9]
		bt_dclk.num_paired++;
    fc78:	3301      	adds	r3, #1
    fc7a:	700b      	strb	r3, [r1, #0]
		bt_stop_advertise();
    fc7c:	f7ff ff88 	bl	fb90 <bt_stop_advertise>
}
    fc80:	b013      	add	sp, #76	; 0x4c
    fc82:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printk("Pairing Failed %s", addr_str);
    fc84:	a90a      	add	r1, sp, #40	; 0x28
    fc86:	480b      	ldr	r0, [pc, #44]	; (fcb4 <pairing_complete+0xf8>)
    fc88:	f011 fc80 	bl	2158c <printk>
}
    fc8c:	e7f8      	b.n	fc80 <pairing_complete+0xc4>
    fc8e:	bf00      	nop
    fc90:	0002a250 	.word	0x0002a250
    fc94:	0002a278 	.word	0x0002a278
    fc98:	0002a358 	.word	0x0002a358
    fc9c:	0002a370 	.word	0x0002a370
    fca0:	0002a258 	.word	0x0002a258
    fca4:	0002a260 	.word	0x0002a260
    fca8:	0002a26c 	.word	0x0002a26c
    fcac:	0002cb80 	.word	0x0002cb80
    fcb0:	200023e8 	.word	0x200023e8
    fcb4:	0002a380 	.word	0x0002a380

0000fcb8 <bt_start_advertise>:
{
    fcb8:	b530      	push	{r4, r5, lr}
    fcba:	b089      	sub	sp, #36	; 0x24
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    fcbc:	ac03      	add	r4, sp, #12
    fcbe:	4d0b      	ldr	r5, [pc, #44]	; (fcec <bt_start_advertise+0x34>)
    fcc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    fcc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    fcc4:	682b      	ldr	r3, [r5, #0]
    fcc6:	6023      	str	r3, [r4, #0]
    fcc8:	2300      	movs	r3, #0
    fcca:	9300      	str	r3, [sp, #0]
    fccc:	2202      	movs	r2, #2
    fcce:	4908      	ldr	r1, [pc, #32]	; (fcf0 <bt_start_advertise+0x38>)
    fcd0:	a803      	add	r0, sp, #12
    fcd2:	f015 fbd0 	bl	25476 <bt_le_adv_start>
	if (err)
    fcd6:	b920      	cbnz	r0, fce2 <bt_start_advertise+0x2a>
	printk("Advertising successfully started\n");
    fcd8:	4806      	ldr	r0, [pc, #24]	; (fcf4 <bt_start_advertise+0x3c>)
    fcda:	f011 fc57 	bl	2158c <printk>
}
    fcde:	b009      	add	sp, #36	; 0x24
    fce0:	bd30      	pop	{r4, r5, pc}
    fce2:	4601      	mov	r1, r0
		printk("Advertising failed to start (err %d)\n", err);
    fce4:	4804      	ldr	r0, [pc, #16]	; (fcf8 <bt_start_advertise+0x40>)
    fce6:	f011 fc51 	bl	2158c <printk>
		return;
    fcea:	e7f8      	b.n	fcde <bt_start_advertise+0x26>
    fcec:	0002a060 	.word	0x0002a060
    fcf0:	0002a488 	.word	0x0002a488
    fcf4:	0002a3bc 	.word	0x0002a3bc
    fcf8:	0002a394 	.word	0x0002a394

0000fcfc <bt_pairing_start>:
	.pairing_confirm = auth_pairing,
	.pairing_complete = pairing_complete,
};

static void bt_pairing_start()
{
    fcfc:	b510      	push	{r4, lr}
    fcfe:	b082      	sub	sp, #8
	printk("Pairing enabled");
    fd00:	4809      	ldr	r0, [pc, #36]	; (fd28 <bt_pairing_start+0x2c>)
    fd02:	f011 fc43 	bl	2158c <printk>
	bt_unpair(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    fd06:	2400      	movs	r4, #0
    fd08:	9400      	str	r4, [sp, #0]
    fd0a:	f8cd 4003 	str.w	r4, [sp, #3]
    fd0e:	4669      	mov	r1, sp
    fd10:	4620      	mov	r0, r4
    fd12:	f006 f92d 	bl	15f70 <bt_unpair>
	bt_dclk.num_paired = 0;
    fd16:	4b05      	ldr	r3, [pc, #20]	; (fd2c <bt_pairing_start+0x30>)
    fd18:	701c      	strb	r4, [r3, #0]
	bt_dclk.pair_en = true;
    fd1a:	2201      	movs	r2, #1
    fd1c:	709a      	strb	r2, [r3, #2]
	bt_start_advertise();
    fd1e:	f7ff ffcb 	bl	fcb8 <bt_start_advertise>
}
    fd22:	b002      	add	sp, #8
    fd24:	bd10      	pop	{r4, pc}
    fd26:	bf00      	nop
    fd28:	0002a3e0 	.word	0x0002a3e0
    fd2c:	200023e8 	.word	0x200023e8

0000fd30 <bt_connection_manager>:
{
    fd30:	b5f0      	push	{r4, r5, r6, r7, lr}
    fd32:	b095      	sub	sp, #84	; 0x54
	printk("bt connection manager starting");
    fd34:	4862      	ldr	r0, [pc, #392]	; (fec0 <bt_connection_manager+0x190>)
    fd36:	f011 fc29 	bl	2158c <printk>
	bt_pairing_start();
    fd3a:	f7ff ffdf 	bl	fcfc <bt_pairing_start>
    fd3e:	e084      	b.n	fe4a <bt_connection_manager+0x11a>
			bt_addr_le_to_str(bt_conn_get_dst(conn), addr_str, sizeof(addr_str));
    fd40:	4628      	mov	r0, r5
    fd42:	f015 fe2f 	bl	259a4 <bt_conn_get_dst>
    fd46:	4604      	mov	r4, r0
	switch (addr->type) {
    fd48:	7803      	ldrb	r3, [r0, #0]
    fd4a:	2b03      	cmp	r3, #3
    fd4c:	d844      	bhi.n	fdd8 <bt_connection_manager+0xa8>
    fd4e:	e8df f003 	tbb	[pc, r3]
    fd52:	3402      	.short	0x3402
    fd54:	3e39      	.short	0x3e39
		strcpy(type, "public");
    fd56:	495b      	ldr	r1, [pc, #364]	; (fec4 <bt_connection_manager+0x194>)
    fd58:	a807      	add	r0, sp, #28
    fd5a:	f014 fe16 	bl	2498a <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
    fd5e:	79a3      	ldrb	r3, [r4, #6]
    fd60:	7962      	ldrb	r2, [r4, #5]
    fd62:	7921      	ldrb	r1, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
    fd64:	78e0      	ldrb	r0, [r4, #3]
    fd66:	78a6      	ldrb	r6, [r4, #2]
    fd68:	7864      	ldrb	r4, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    fd6a:	af07      	add	r7, sp, #28
    fd6c:	9705      	str	r7, [sp, #20]
    fd6e:	9404      	str	r4, [sp, #16]
    fd70:	9603      	str	r6, [sp, #12]
    fd72:	9002      	str	r0, [sp, #8]
    fd74:	9101      	str	r1, [sp, #4]
    fd76:	9200      	str	r2, [sp, #0]
    fd78:	4a53      	ldr	r2, [pc, #332]	; (fec8 <bt_connection_manager+0x198>)
    fd7a:	211e      	movs	r1, #30
    fd7c:	a80a      	add	r0, sp, #40	; 0x28
    fd7e:	f011 fc13 	bl	215a8 <snprintk>
			printk("Connected %s\n", addr_str);
    fd82:	a90a      	add	r1, sp, #40	; 0x28
    fd84:	4851      	ldr	r0, [pc, #324]	; (fecc <bt_connection_manager+0x19c>)
    fd86:	f011 fc01 	bl	2158c <printk>
			if (!check_paired_list(*(bt_conn_get_dst(conn))))
    fd8a:	4628      	mov	r0, r5
    fd8c:	f015 fe0a 	bl	259a4 <bt_conn_get_dst>
    fd90:	7901      	ldrb	r1, [r0, #4]
    fd92:	7943      	ldrb	r3, [r0, #5]
    fd94:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
    fd98:	7983      	ldrb	r3, [r0, #6]
    fd9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    fd9e:	6800      	ldr	r0, [r0, #0]
    fda0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    fda4:	f7ff fec4 	bl	fb30 <check_paired_list>
    fda8:	2800      	cmp	r0, #0
    fdaa:	d14e      	bne.n	fe4a <bt_connection_manager+0x11a>
				if (bt_dclk.pair_en)
    fdac:	4b48      	ldr	r3, [pc, #288]	; (fed0 <bt_connection_manager+0x1a0>)
    fdae:	789b      	ldrb	r3, [r3, #2]
    fdb0:	b1c3      	cbz	r3, fde4 <bt_connection_manager+0xb4>
					printk("Allow connection for pairing");
    fdb2:	4848      	ldr	r0, [pc, #288]	; (fed4 <bt_connection_manager+0x1a4>)
    fdb4:	f011 fbea 	bl	2158c <printk>
    fdb8:	e047      	b.n	fe4a <bt_connection_manager+0x11a>
		strcpy(type, "random");
    fdba:	4947      	ldr	r1, [pc, #284]	; (fed8 <bt_connection_manager+0x1a8>)
    fdbc:	a807      	add	r0, sp, #28
    fdbe:	f014 fde4 	bl	2498a <strcpy>
		break;
    fdc2:	e7cc      	b.n	fd5e <bt_connection_manager+0x2e>
		strcpy(type, "public-id");
    fdc4:	4945      	ldr	r1, [pc, #276]	; (fedc <bt_connection_manager+0x1ac>)
    fdc6:	a807      	add	r0, sp, #28
    fdc8:	f014 fddf 	bl	2498a <strcpy>
		break;
    fdcc:	e7c7      	b.n	fd5e <bt_connection_manager+0x2e>
		strcpy(type, "random-id");
    fdce:	4944      	ldr	r1, [pc, #272]	; (fee0 <bt_connection_manager+0x1b0>)
    fdd0:	a807      	add	r0, sp, #28
    fdd2:	f014 fdda 	bl	2498a <strcpy>
		break;
    fdd6:	e7c2      	b.n	fd5e <bt_connection_manager+0x2e>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    fdd8:	4a42      	ldr	r2, [pc, #264]	; (fee4 <bt_connection_manager+0x1b4>)
    fdda:	210a      	movs	r1, #10
    fddc:	a807      	add	r0, sp, #28
    fdde:	f011 fbe3 	bl	215a8 <snprintk>
		break;
    fde2:	e7bc      	b.n	fd5e <bt_connection_manager+0x2e>
					bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    fde4:	2113      	movs	r1, #19
    fde6:	4628      	mov	r0, r5
    fde8:	f015 fdde 	bl	259a8 <bt_conn_disconnect>
    fdec:	e02d      	b.n	fe4a <bt_connection_manager+0x11a>
		strcpy(type, "public");
    fdee:	4935      	ldr	r1, [pc, #212]	; (fec4 <bt_connection_manager+0x194>)
    fdf0:	a807      	add	r0, sp, #28
    fdf2:	f014 fdca 	bl	2498a <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
    fdf6:	79a3      	ldrb	r3, [r4, #6]
    fdf8:	7962      	ldrb	r2, [r4, #5]
    fdfa:	7921      	ldrb	r1, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
    fdfc:	78e0      	ldrb	r0, [r4, #3]
    fdfe:	78a6      	ldrb	r6, [r4, #2]
    fe00:	7864      	ldrb	r4, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    fe02:	af07      	add	r7, sp, #28
    fe04:	9705      	str	r7, [sp, #20]
    fe06:	9404      	str	r4, [sp, #16]
    fe08:	9603      	str	r6, [sp, #12]
    fe0a:	9002      	str	r0, [sp, #8]
    fe0c:	9101      	str	r1, [sp, #4]
    fe0e:	9200      	str	r2, [sp, #0]
    fe10:	4a2d      	ldr	r2, [pc, #180]	; (fec8 <bt_connection_manager+0x198>)
    fe12:	211e      	movs	r1, #30
    fe14:	a80a      	add	r0, sp, #40	; 0x28
    fe16:	f011 fbc7 	bl	215a8 <snprintk>
			printk("Disconnected %s\n", addr_str);
    fe1a:	a90a      	add	r1, sp, #40	; 0x28
    fe1c:	4832      	ldr	r0, [pc, #200]	; (fee8 <bt_connection_manager+0x1b8>)
    fe1e:	f011 fbb5 	bl	2158c <printk>
			if (check_paired_list(*(bt_conn_get_dst(conn))))
    fe22:	4628      	mov	r0, r5
    fe24:	f015 fdbe 	bl	259a4 <bt_conn_get_dst>
    fe28:	7901      	ldrb	r1, [r0, #4]
    fe2a:	7943      	ldrb	r3, [r0, #5]
    fe2c:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
    fe30:	7983      	ldrb	r3, [r0, #6]
    fe32:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    fe36:	6800      	ldr	r0, [r0, #0]
    fe38:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    fe3c:	f7ff fe78 	bl	fb30 <check_paired_list>
    fe40:	2800      	cmp	r0, #0
    fe42:	d13a      	bne.n	feba <bt_connection_manager+0x18a>
			bt_conn_unref(conn);
    fe44:	4628      	mov	r0, r5
    fe46:	f015 fd57 	bl	258f8 <bt_conn_unref>
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&msgq, *(uintptr_t *)&data, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
    fe4a:	f04f 32ff 	mov.w	r2, #4294967295
    fe4e:	f04f 33ff 	mov.w	r3, #4294967295
    fe52:	a912      	add	r1, sp, #72	; 0x48
    fe54:	4825      	ldr	r0, [pc, #148]	; (feec <bt_connection_manager+0x1bc>)
    fe56:	f00f fe03 	bl	1fa60 <z_impl_k_msgq_get>
		struct bt_conn *conn = data.conn;
    fe5a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
		switch (data.type)
    fe5c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    fe60:	2b00      	cmp	r3, #0
    fe62:	f43f af6d 	beq.w	fd40 <bt_connection_manager+0x10>
    fe66:	2b01      	cmp	r3, #1
    fe68:	d1ef      	bne.n	fe4a <bt_connection_manager+0x11a>
			bt_addr_le_to_str(bt_conn_get_dst(conn), addr_str, sizeof(addr_str));
    fe6a:	4628      	mov	r0, r5
    fe6c:	f015 fd9a 	bl	259a4 <bt_conn_get_dst>
    fe70:	4604      	mov	r4, r0
	switch (addr->type) {
    fe72:	7803      	ldrb	r3, [r0, #0]
    fe74:	2b03      	cmp	r3, #3
    fe76:	d81a      	bhi.n	feae <bt_connection_manager+0x17e>
    fe78:	a201      	add	r2, pc, #4	; (adr r2, fe80 <bt_connection_manager+0x150>)
    fe7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    fe7e:	bf00      	nop
    fe80:	0000fdef 	.word	0x0000fdef
    fe84:	0000fe91 	.word	0x0000fe91
    fe88:	0000fe9b 	.word	0x0000fe9b
    fe8c:	0000fea5 	.word	0x0000fea5
		strcpy(type, "random");
    fe90:	4911      	ldr	r1, [pc, #68]	; (fed8 <bt_connection_manager+0x1a8>)
    fe92:	a807      	add	r0, sp, #28
    fe94:	f014 fd79 	bl	2498a <strcpy>
		break;
    fe98:	e7ad      	b.n	fdf6 <bt_connection_manager+0xc6>
		strcpy(type, "public-id");
    fe9a:	4910      	ldr	r1, [pc, #64]	; (fedc <bt_connection_manager+0x1ac>)
    fe9c:	a807      	add	r0, sp, #28
    fe9e:	f014 fd74 	bl	2498a <strcpy>
		break;
    fea2:	e7a8      	b.n	fdf6 <bt_connection_manager+0xc6>
		strcpy(type, "random-id");
    fea4:	490e      	ldr	r1, [pc, #56]	; (fee0 <bt_connection_manager+0x1b0>)
    fea6:	a807      	add	r0, sp, #28
    fea8:	f014 fd6f 	bl	2498a <strcpy>
		break;
    feac:	e7a3      	b.n	fdf6 <bt_connection_manager+0xc6>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    feae:	4a0d      	ldr	r2, [pc, #52]	; (fee4 <bt_connection_manager+0x1b4>)
    feb0:	210a      	movs	r1, #10
    feb2:	a807      	add	r0, sp, #28
    feb4:	f011 fb78 	bl	215a8 <snprintk>
		break;
    feb8:	e79d      	b.n	fdf6 <bt_connection_manager+0xc6>
				bt_start_advertise();
    feba:	f7ff fefd 	bl	fcb8 <bt_start_advertise>
    febe:	e7c1      	b.n	fe44 <bt_connection_manager+0x114>
    fec0:	0002a3f0 	.word	0x0002a3f0
    fec4:	0002a250 	.word	0x0002a250
    fec8:	0002a278 	.word	0x0002a278
    fecc:	0002a410 	.word	0x0002a410
    fed0:	200023e8 	.word	0x200023e8
    fed4:	0002a420 	.word	0x0002a420
    fed8:	0002a258 	.word	0x0002a258
    fedc:	0002a260 	.word	0x0002a260
    fee0:	0002a26c 	.word	0x0002a26c
    fee4:	0002cb80 	.word	0x0002cb80
    fee8:	0002a440 	.word	0x0002a440
    feec:	200023fc 	.word	0x200023fc

0000fef0 <main>:
}

const uint16_t UPDATE_PERIOD = 1000;

void main(void)
{
    fef0:	b510      	push	{r4, lr}
    fef2:	b09e      	sub	sp, #120	; 0x78
	int err;
	printk("hello");
    fef4:	481f      	ldr	r0, [pc, #124]	; (ff74 <main+0x84>)
    fef6:	f011 fb49 	bl	2158c <printk>
	err = bt_enable(NULL);
    fefa:	2000      	movs	r0, #0
    fefc:	f006 feb6 	bl	16c6c <bt_enable>
	if (err)
    ff00:	2800      	cmp	r0, #0
    ff02:	d130      	bne.n	ff66 <main+0x76>
		return;
	}

	if (IS_ENABLED(CONFIG_SETTINGS))
	{
		err = settings_load();
    ff04:	f013 f95d 	bl	231c2 <settings_load>
		if (err)
    ff08:	2800      	cmp	r0, #0
    ff0a:	d130      	bne.n	ff6e <main+0x7e>
		{
			return;
		}

		int bond_cnt = 0;
    ff0c:	2400      	movs	r4, #0
    ff0e:	9409      	str	r4, [sp, #36]	; 0x24

		bt_foreach_bond(BT_ID_DEFAULT, &bt_count_bonds, &bond_cnt);
    ff10:	aa09      	add	r2, sp, #36	; 0x24
    ff12:	4919      	ldr	r1, [pc, #100]	; (ff78 <main+0x88>)
    ff14:	4620      	mov	r0, r4
    ff16:	f00d fcc1 	bl	1d89c <bt_foreach_bond>

		bt_dclk.num_paired = bond_cnt;
    ff1a:	4b18      	ldr	r3, [pc, #96]	; (ff7c <main+0x8c>)
    ff1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ff1e:	701a      	strb	r2, [r3, #0]
	}

	bt_conn_cb_register(&conn_callbacks);
    ff20:	4817      	ldr	r0, [pc, #92]	; (ff80 <main+0x90>)
    ff22:	f008 f9e9 	bl	182f8 <bt_conn_cb_register>
	bt_conn_auth_cb_register(&auth_cb_display);
    ff26:	4817      	ldr	r0, [pc, #92]	; (ff84 <main+0x94>)
    ff28:	f008 fe4a 	bl	18bc0 <bt_conn_auth_cb_register>

	// bt_unpair(BT_ID_DEFAULT, BT_ADDR_LE_ANY);

	char my_msgq_buffer[10 * sizeof(struct bt_conn_message_t)];

	k_msgq_init(&conn_msgq, my_msgq_buffer, sizeof(struct bt_conn_message_t), 10);
    ff2c:	230a      	movs	r3, #10
    ff2e:	2208      	movs	r2, #8
    ff30:	a90a      	add	r1, sp, #40	; 0x28
    ff32:	4815      	ldr	r0, [pc, #84]	; (ff88 <main+0x98>)
    ff34:	f019 f8f9 	bl	2912a <k_msgq_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    ff38:	2200      	movs	r2, #0
    ff3a:	2300      	movs	r3, #0
    ff3c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    ff40:	9404      	str	r4, [sp, #16]
    ff42:	2305      	movs	r3, #5
    ff44:	9303      	str	r3, [sp, #12]
    ff46:	9402      	str	r4, [sp, #8]
    ff48:	9401      	str	r4, [sp, #4]
    ff4a:	9400      	str	r4, [sp, #0]
    ff4c:	4b0f      	ldr	r3, [pc, #60]	; (ff8c <main+0x9c>)
    ff4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    ff52:	490f      	ldr	r1, [pc, #60]	; (ff90 <main+0xa0>)
    ff54:	480f      	ldr	r0, [pc, #60]	; (ff94 <main+0xa4>)
    ff56:	f019 f8b4 	bl	290c2 <z_impl_k_thread_create>
	return z_impl_k_sleep(timeout);
    ff5a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    ff5e:	2100      	movs	r1, #0
    ff60:	f010 fcc2 	bl	208e8 <z_impl_k_sleep>
						bt_connection_manager,
						NULL, NULL, NULL,
						MY_PRIORITY, 0, K_NO_WAIT);

	// dclk_start();
	while (1)
    ff64:	e7f9      	b.n	ff5a <main+0x6a>
    ff66:	4601      	mov	r1, r0
		printk("Bluetooth init failed (err %d)\n", err);
    ff68:	480b      	ldr	r0, [pc, #44]	; (ff98 <main+0xa8>)
    ff6a:	f011 fb0f 	bl	2158c <printk>
	{
		k_sleep(K_MSEC(UPDATE_PERIOD));
		// dclk_notify();
		// bas_notify();
	}
}
    ff6e:	b01e      	add	sp, #120	; 0x78
    ff70:	bd10      	pop	{r4, pc}
    ff72:	bf00      	nop
    ff74:	0002a454 	.word	0x0002a454
    ff78:	00021411 	.word	0x00021411
    ff7c:	200023e8 	.word	0x200023e8
    ff80:	20000454 	.word	0x20000454
    ff84:	20000430 	.word	0x20000430
    ff88:	200023fc 	.word	0x200023fc
    ff8c:	0000fd31 	.word	0x0000fd31
    ff90:	200039a0 	.word	0x200039a0
    ff94:	20001428 	.word	0x20001428
    ff98:	0002a45c 	.word	0x0002a45c

0000ff9c <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
    ff9c:	b430      	push	{r4, r5}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
    ff9e:	2400      	movs	r4, #0
    ffa0:	4294      	cmp	r4, r2
    ffa2:	d20f      	bcs.n	ffc4 <crc8_ccitt+0x28>
		val ^= p[i];
    ffa4:	5d0b      	ldrb	r3, [r1, r4]
    ffa6:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    ffa8:	0918      	lsrs	r0, r3, #4
    ffaa:	4d07      	ldr	r5, [pc, #28]	; (ffc8 <crc8_ccitt+0x2c>)
    ffac:	5628      	ldrsb	r0, [r5, r0]
    ffae:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
    ffb2:	b2c3      	uxtb	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    ffb4:	f3c0 1003 	ubfx	r0, r0, #4, #4
    ffb8:	5628      	ldrsb	r0, [r5, r0]
    ffba:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
    ffbe:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
    ffc0:	3401      	adds	r4, #1
    ffc2:	e7ed      	b.n	ffa0 <crc8_ccitt+0x4>
	}
	return val;
}
    ffc4:	bc30      	pop	{r4, r5}
    ffc6:	4770      	bx	lr
    ffc8:	0002a498 	.word	0x0002a498

0000ffcc <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
    ffcc:	b430      	push	{r4, r5}
    ffce:	4605      	mov	r5, r0
	uint8_t divisor = 100;
	uint8_t num_digits = 0;
    ffd0:	2000      	movs	r0, #0
	uint8_t divisor = 100;
    ffd2:	2364      	movs	r3, #100	; 0x64
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
    ffd4:	e00f      	b.n	fff6 <u8_to_dec+0x2a>
		digit = value / divisor;
		if (digit != 0 || divisor == 1 || num_digits != 0) {
			*buf = (char)digit + '0';
    ffd6:	3430      	adds	r4, #48	; 0x30
    ffd8:	f805 4b01 	strb.w	r4, [r5], #1
			buf++;
			buflen--;
    ffdc:	3901      	subs	r1, #1
    ffde:	b2c9      	uxtb	r1, r1
			num_digits++;
    ffe0:	3001      	adds	r0, #1
    ffe2:	b2c0      	uxtb	r0, r0
		}

		value -= digit * divisor;
    ffe4:	fbb2 f4f3 	udiv	r4, r2, r3
    ffe8:	fb03 2214 	mls	r2, r3, r4, r2
    ffec:	b2d2      	uxtb	r2, r2
		divisor /= 10;
    ffee:	4c0a      	ldr	r4, [pc, #40]	; (10018 <CONFIG_PM_SRAM_SIZE+0x18>)
    fff0:	fba4 4303 	umull	r4, r3, r4, r3
    fff4:	08db      	lsrs	r3, r3, #3
	while (buflen > 0 && divisor > 0) {
    fff6:	b149      	cbz	r1, 1000c <CONFIG_PM_SRAM_SIZE+0xc>
    fff8:	b143      	cbz	r3, 1000c <CONFIG_PM_SRAM_SIZE+0xc>
		digit = value / divisor;
    fffa:	fbb2 f4f3 	udiv	r4, r2, r3
		if (digit != 0 || divisor == 1 || num_digits != 0) {
    fffe:	429a      	cmp	r2, r3
   10000:	d2e9      	bcs.n	ffd6 <u8_to_dec+0xa>
   10002:	2b01      	cmp	r3, #1
   10004:	d0e7      	beq.n	ffd6 <u8_to_dec+0xa>
   10006:	2800      	cmp	r0, #0
   10008:	d0ec      	beq.n	ffe4 <u8_to_dec+0x18>
   1000a:	e7e4      	b.n	ffd6 <u8_to_dec+0xa>
	}

	if (buflen) {
   1000c:	b109      	cbz	r1, 10012 <CONFIG_PM_SRAM_SIZE+0x12>
		*buf = '\0';
   1000e:	2300      	movs	r3, #0
   10010:	702b      	strb	r3, [r5, #0]
	}

	return num_digits;
}
   10012:	bc30      	pop	{r4, r5}
   10014:	4770      	bx	lr
   10016:	bf00      	nop
   10018:	cccccccd 	.word	0xcccccccd

0001001c <__printk_hook_install>:
 *
 * @return N/A
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
   1001c:	4b01      	ldr	r3, [pc, #4]	; (10024 <__printk_hook_install+0x8>)
   1001e:	6018      	str	r0, [r3, #0]
}
   10020:	4770      	bx	lr
   10022:	bf00      	nop
   10024:	20000470 	.word	0x20000470

00010028 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   10028:	b510      	push	{r4, lr}
   1002a:	b084      	sub	sp, #16
   1002c:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   1002e:	9001      	str	r0, [sp, #4]
   10030:	9102      	str	r1, [sp, #8]
   10032:	2100      	movs	r1, #0
   10034:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
   10036:	a901      	add	r1, sp, #4
   10038:	4805      	ldr	r0, [pc, #20]	; (10050 <vsnprintk+0x28>)
   1003a:	f000 f8b7 	bl	101ac <cbvprintf>

	if (ctx.count < ctx.max) {
   1003e:	9b03      	ldr	r3, [sp, #12]
   10040:	9a02      	ldr	r2, [sp, #8]
   10042:	4293      	cmp	r3, r2
   10044:	da01      	bge.n	1004a <vsnprintk+0x22>
		str[ctx.count] = '\0';
   10046:	2200      	movs	r2, #0
   10048:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
   1004a:	9803      	ldr	r0, [sp, #12]
   1004c:	b004      	add	sp, #16
   1004e:	bd10      	pop	{r4, pc}
   10050:	0002155d 	.word	0x0002155d

00010054 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   10054:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10058:	b083      	sub	sp, #12
   1005a:	4604      	mov	r4, r0
   1005c:	4608      	mov	r0, r1
   1005e:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10060:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   10062:	f013 0f08 	tst.w	r3, #8
   10066:	d105      	bne.n	10074 <process_event+0x20>
   10068:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   1006c:	2300      	movs	r3, #0
   1006e:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
   10070:	9301      	str	r3, [sp, #4]
}
   10072:	e069      	b.n	10148 <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
   10074:	2901      	cmp	r1, #1
   10076:	d009      	beq.n	1008c <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   10078:	f043 0320 	orr.w	r3, r3, #32
   1007c:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   1007e:	f385 8811 	msr	BASEPRI, r5
   10082:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   10086:	b003      	add	sp, #12
   10088:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   1008c:	f043 0310 	orr.w	r3, r3, #16
   10090:	8323      	strh	r3, [r4, #24]
   10092:	e7f4      	b.n	1007e <process_event+0x2a>
			evt = process_recheck(mgr);
   10094:	4620      	mov	r0, r4
   10096:	f011 fabc 	bl	21612 <process_recheck>
   1009a:	e057      	b.n	1014c <process_event+0xf8>
			res = mgr->last_res;
   1009c:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
   100a0:	464a      	mov	r2, r9
   100a2:	4669      	mov	r1, sp
   100a4:	4620      	mov	r0, r4
   100a6:	f011 facd 	bl	21644 <process_complete>
		onoff_transition_fn transit = NULL;
   100aa:	2700      	movs	r7, #0
   100ac:	e05a      	b.n	10164 <process_event+0x110>
			transit = mgr->transitions->start;
   100ae:	6923      	ldr	r3, [r4, #16]
   100b0:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
   100b2:	2106      	movs	r1, #6
   100b4:	4620      	mov	r0, r4
   100b6:	f011 fa85 	bl	215c4 <set_state>
		res = 0;
   100ba:	f04f 0900 	mov.w	r9, #0
   100be:	e051      	b.n	10164 <process_event+0x110>
			transit = mgr->transitions->stop;
   100c0:	6923      	ldr	r3, [r4, #16]
   100c2:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
   100c4:	2104      	movs	r1, #4
   100c6:	4620      	mov	r0, r4
   100c8:	f011 fa7c 	bl	215c4 <set_state>
		res = 0;
   100cc:	f04f 0900 	mov.w	r9, #0
   100d0:	e048      	b.n	10164 <process_event+0x110>
			transit = mgr->transitions->reset;
   100d2:	6923      	ldr	r3, [r4, #16]
   100d4:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
   100d6:	2105      	movs	r1, #5
   100d8:	4620      	mov	r0, r4
   100da:	f011 fa73 	bl	215c4 <set_state>
		res = 0;
   100de:	f04f 0900 	mov.w	r9, #0
   100e2:	e03f      	b.n	10164 <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
   100e4:	2200      	movs	r2, #0
   100e6:	e046      	b.n	10176 <process_event+0x122>
   100e8:	2200      	movs	r2, #0
   100ea:	e044      	b.n	10176 <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   100ec:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   100f0:	8323      	strh	r3, [r4, #24]
   100f2:	f385 8811 	msr	BASEPRI, r5
   100f6:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   100fa:	2900      	cmp	r1, #0
   100fc:	d144      	bne.n	10188 <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   100fe:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
   10100:	b12b      	cbz	r3, 1010e <process_event+0xba>
				notify_all(mgr, &clients, state, res);
   10102:	464b      	mov	r3, r9
   10104:	4642      	mov	r2, r8
   10106:	4669      	mov	r1, sp
   10108:	4620      	mov	r0, r4
   1010a:	f011 fb11 	bl	21730 <notify_all>
			if (transit != NULL) {
   1010e:	b117      	cbz	r7, 10116 <process_event+0xc2>
				transit(mgr, transition_complete);
   10110:	4925      	ldr	r1, [pc, #148]	; (101a8 <process_event+0x154>)
   10112:	4620      	mov	r0, r4
   10114:	47b8      	blx	r7
	__asm__ volatile(
   10116:	f04f 0340 	mov.w	r3, #64	; 0x40
   1011a:	f3ef 8511 	mrs	r5, BASEPRI
   1011e:	f383 8811 	msr	BASEPRI, r3
   10122:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   10126:	8b23      	ldrh	r3, [r4, #24]
   10128:	f023 0308 	bic.w	r3, r3, #8
   1012c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   1012e:	8b23      	ldrh	r3, [r4, #24]
   10130:	f013 0f10 	tst.w	r3, #16
   10134:	d02e      	beq.n	10194 <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   10136:	f023 0310 	bic.w	r3, r3, #16
   1013a:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   1013c:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   1013e:	8b26      	ldrh	r6, [r4, #24]
   10140:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
   10144:	2800      	cmp	r0, #0
   10146:	d09a      	beq.n	1007e <process_event+0x2a>
		if (evt == EVT_RECHECK) {
   10148:	2802      	cmp	r0, #2
   1014a:	d0a3      	beq.n	10094 <process_event+0x40>
		if (evt == EVT_NOP) {
   1014c:	2800      	cmp	r0, #0
   1014e:	d096      	beq.n	1007e <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
   10150:	2801      	cmp	r0, #1
   10152:	d0a3      	beq.n	1009c <process_event+0x48>
		} else if (evt == EVT_START) {
   10154:	2803      	cmp	r0, #3
   10156:	d0aa      	beq.n	100ae <process_event+0x5a>
		} else if (evt == EVT_STOP) {
   10158:	2804      	cmp	r0, #4
   1015a:	d0b1      	beq.n	100c0 <process_event+0x6c>
		} else if (evt == EVT_RESET) {
   1015c:	2805      	cmp	r0, #5
   1015e:	d0b8      	beq.n	100d2 <process_event+0x7e>
		onoff_transition_fn transit = NULL;
   10160:	2700      	movs	r7, #0
		res = 0;
   10162:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   10164:	8b23      	ldrh	r3, [r4, #24]
   10166:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   1016a:	45b0      	cmp	r8, r6
   1016c:	d0ba      	beq.n	100e4 <process_event+0x90>
   1016e:	68a2      	ldr	r2, [r4, #8]
   10170:	2a00      	cmp	r2, #0
   10172:	d0b9      	beq.n	100e8 <process_event+0x94>
   10174:	2201      	movs	r2, #1
		if (do_monitors
   10176:	4611      	mov	r1, r2
   10178:	2a00      	cmp	r2, #0
   1017a:	d1b7      	bne.n	100ec <process_event+0x98>
   1017c:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
   1017e:	2a00      	cmp	r2, #0
   10180:	d1b4      	bne.n	100ec <process_event+0x98>
		    || (transit != NULL)) {
   10182:	2f00      	cmp	r7, #0
   10184:	d1b2      	bne.n	100ec <process_event+0x98>
   10186:	e7d2      	b.n	1012e <process_event+0xda>
				notify_monitors(mgr, state, res);
   10188:	464a      	mov	r2, r9
   1018a:	4641      	mov	r1, r8
   1018c:	4620      	mov	r0, r4
   1018e:	f011 fa21 	bl	215d4 <notify_monitors>
   10192:	e7b4      	b.n	100fe <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   10194:	f013 0f20 	tst.w	r3, #32
   10198:	d004      	beq.n	101a4 <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   1019a:	f023 0320 	bic.w	r3, r3, #32
   1019e:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
   101a0:	2002      	movs	r0, #2
   101a2:	e7cc      	b.n	1013e <process_event+0xea>
		evt = EVT_NOP;
   101a4:	2000      	movs	r0, #0
   101a6:	e7ca      	b.n	1013e <process_event+0xea>
   101a8:	0002175f 	.word	0x0002175f

000101ac <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   101ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   101b0:	b093      	sub	sp, #76	; 0x4c
   101b2:	4606      	mov	r6, r0
   101b4:	460d      	mov	r5, r1
   101b6:	4692      	mov	sl, r2
   101b8:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   101ba:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   101bc:	f89a 0000 	ldrb.w	r0, [sl]
   101c0:	2800      	cmp	r0, #0
   101c2:	f000 84d6 	beq.w	10b72 <cbvprintf+0x9c6>
		if (*fp != '%') {
   101c6:	2825      	cmp	r0, #37	; 0x25
   101c8:	d008      	beq.n	101dc <cbvprintf+0x30>
			OUTC(*fp++);
   101ca:	f10a 0a01 	add.w	sl, sl, #1
   101ce:	4629      	mov	r1, r5
   101d0:	47b0      	blx	r6
   101d2:	2800      	cmp	r0, #0
   101d4:	f2c0 84ce 	blt.w	10b74 <cbvprintf+0x9c8>
   101d8:	3401      	adds	r4, #1
			continue;
   101da:	e7ef      	b.n	101bc <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
   101dc:	2300      	movs	r3, #0
   101de:	9306      	str	r3, [sp, #24]
   101e0:	9307      	str	r3, [sp, #28]
   101e2:	930b      	str	r3, [sp, #44]	; 0x2c
	*conv = (struct conversion) {
   101e4:	9308      	str	r3, [sp, #32]
   101e6:	9309      	str	r3, [sp, #36]	; 0x24
   101e8:	930a      	str	r3, [sp, #40]	; 0x28
	++sp;
   101ea:	f10a 0801 	add.w	r8, sl, #1
	if (*sp == '%') {
   101ee:	f89a 3001 	ldrb.w	r3, [sl, #1]
   101f2:	2b25      	cmp	r3, #37	; 0x25
   101f4:	d001      	beq.n	101fa <cbvprintf+0x4e>
	bool loop = true;
   101f6:	2701      	movs	r7, #1
   101f8:	e02c      	b.n	10254 <cbvprintf+0xa8>
		conv->specifier = *sp++;
   101fa:	f10a 0802 	add.w	r8, sl, #2
   101fe:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		return sp;
   10202:	e1a8      	b.n	10556 <cbvprintf+0x3aa>
			conv->flag_dash = true;
   10204:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10208:	f043 0304 	orr.w	r3, r3, #4
   1020c:	f88d 3020 	strb.w	r3, [sp, #32]
		if (loop) {
   10210:	b1ff      	cbz	r7, 10252 <cbvprintf+0xa6>
			++sp;
   10212:	f108 0801 	add.w	r8, r8, #1
   10216:	e01c      	b.n	10252 <cbvprintf+0xa6>
			conv->flag_plus = true;
   10218:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1021c:	f043 0308 	orr.w	r3, r3, #8
   10220:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
   10224:	e7f4      	b.n	10210 <cbvprintf+0x64>
			conv->flag_space = true;
   10226:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1022a:	f043 0310 	orr.w	r3, r3, #16
   1022e:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
   10232:	e7ed      	b.n	10210 <cbvprintf+0x64>
			conv->flag_hash = true;
   10234:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10238:	f043 0320 	orr.w	r3, r3, #32
   1023c:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
   10240:	e7e6      	b.n	10210 <cbvprintf+0x64>
			conv->flag_zero = true;
   10242:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1024a:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
   1024e:	e7df      	b.n	10210 <cbvprintf+0x64>
		switch (*sp) {
   10250:	2700      	movs	r7, #0
	} while (loop);
   10252:	b34f      	cbz	r7, 102a8 <cbvprintf+0xfc>
		switch (*sp) {
   10254:	f898 3000 	ldrb.w	r3, [r8]
   10258:	3b20      	subs	r3, #32
   1025a:	2b10      	cmp	r3, #16
   1025c:	d8f8      	bhi.n	10250 <cbvprintf+0xa4>
   1025e:	a201      	add	r2, pc, #4	; (adr r2, 10264 <cbvprintf+0xb8>)
   10260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10264:	00010227 	.word	0x00010227
   10268:	00010251 	.word	0x00010251
   1026c:	00010251 	.word	0x00010251
   10270:	00010235 	.word	0x00010235
   10274:	00010251 	.word	0x00010251
   10278:	00010251 	.word	0x00010251
   1027c:	00010251 	.word	0x00010251
   10280:	00010251 	.word	0x00010251
   10284:	00010251 	.word	0x00010251
   10288:	00010251 	.word	0x00010251
   1028c:	00010251 	.word	0x00010251
   10290:	00010219 	.word	0x00010219
   10294:	00010251 	.word	0x00010251
   10298:	00010205 	.word	0x00010205
   1029c:	00010251 	.word	0x00010251
   102a0:	00010251 	.word	0x00010251
   102a4:	00010243 	.word	0x00010243
	if (conv->flag_zero && conv->flag_dash) {
   102a8:	f89d 3020 	ldrb.w	r3, [sp, #32]
   102ac:	f003 0344 	and.w	r3, r3, #68	; 0x44
   102b0:	2b44      	cmp	r3, #68	; 0x44
   102b2:	d06d      	beq.n	10390 <cbvprintf+0x1e4>
	sp = extract_width(conv, sp);
   102b4:	f8cd 8014 	str.w	r8, [sp, #20]
	conv->width_present = true;
   102b8:	f89d 3020 	ldrb.w	r3, [sp, #32]
   102bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   102c0:	f88d 3020 	strb.w	r3, [sp, #32]
	if (*sp == '*') {
   102c4:	f898 3000 	ldrb.w	r3, [r8]
   102c8:	2b2a      	cmp	r3, #42	; 0x2a
   102ca:	d068      	beq.n	1039e <cbvprintf+0x1f2>
	size_t width = extract_decimal(&sp);
   102cc:	a805      	add	r0, sp, #20
   102ce:	f011 fe69 	bl	21fa4 <extract_decimal>
	if (sp != wp) {
   102d2:	9b05      	ldr	r3, [sp, #20]
   102d4:	4598      	cmp	r8, r3
   102d6:	d012      	beq.n	102fe <cbvprintf+0x152>
		conv->width_present = true;
   102d8:	f89d 3020 	ldrb.w	r3, [sp, #32]
   102dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   102e0:	f88d 3020 	strb.w	r3, [sp, #32]
		conv->width_value = width;
   102e4:	9009      	str	r0, [sp, #36]	; 0x24
		conv->unsupported |= ((conv->width_value < 0)
   102e6:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
   102ea:	2800      	cmp	r0, #0
   102ec:	db60      	blt.n	103b0 <cbvprintf+0x204>
   102ee:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
   102f0:	4313      	orrs	r3, r2
   102f2:	f89d 2020 	ldrb.w	r2, [sp, #32]
   102f6:	f363 0241 	bfi	r2, r3, #1, #1
   102fa:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
   102fe:	9b05      	ldr	r3, [sp, #20]
	sp = extract_prec(conv, sp);
   10300:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
   10302:	781b      	ldrb	r3, [r3, #0]
   10304:	2b2e      	cmp	r3, #46	; 0x2e
   10306:	bf14      	ite	ne
   10308:	2300      	movne	r3, #0
   1030a:	2301      	moveq	r3, #1
   1030c:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   10310:	f363 0241 	bfi	r2, r3, #1, #1
   10314:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	if (!conv->prec_present) {
   10318:	2b00      	cmp	r3, #0
   1031a:	d04b      	beq.n	103b4 <cbvprintf+0x208>
	++sp;
   1031c:	9b05      	ldr	r3, [sp, #20]
   1031e:	1c5a      	adds	r2, r3, #1
   10320:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
   10322:	785b      	ldrb	r3, [r3, #1]
   10324:	2b2a      	cmp	r3, #42	; 0x2a
   10326:	d048      	beq.n	103ba <cbvprintf+0x20e>
	size_t prec = extract_decimal(&sp);
   10328:	a805      	add	r0, sp, #20
   1032a:	f011 fe3b 	bl	21fa4 <extract_decimal>
	conv->prec_value = prec;
   1032e:	900a      	str	r0, [sp, #40]	; 0x28
	conv->unsupported |= ((conv->prec_value < 0)
   10330:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10334:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
   10338:	2800      	cmp	r0, #0
   1033a:	db47      	blt.n	103cc <cbvprintf+0x220>
   1033c:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
   1033e:	4313      	orrs	r3, r2
   10340:	f89d 2020 	ldrb.w	r2, [sp, #32]
   10344:	f363 0241 	bfi	r2, r3, #1, #1
   10348:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
   1034c:	f8dd 8014 	ldr.w	r8, [sp, #20]
	switch (*sp) {
   10350:	f898 3000 	ldrb.w	r3, [r8]
   10354:	3b4c      	subs	r3, #76	; 0x4c
   10356:	2b2e      	cmp	r3, #46	; 0x2e
   10358:	f200 80dc 	bhi.w	10514 <cbvprintf+0x368>
   1035c:	e8df f003 	tbb	[pc, r3]
   10360:	dadadaca 	.word	0xdadadaca
   10364:	dadadada 	.word	0xdadadada
   10368:	dadadada 	.word	0xdadadada
   1036c:	dadadada 	.word	0xdadadada
   10370:	dadadada 	.word	0xdadadada
   10374:	dadadada 	.word	0xdadadada
   10378:	dadadada 	.word	0xdadadada
   1037c:	da6ada38 	.word	0xda6ada38
   10380:	dadada51 	.word	0xdadada51
   10384:	dadadada 	.word	0xdadadada
   10388:	dadadac0 	.word	0xdadadac0
   1038c:	dada      	.short	0xdada
   1038e:	b6          	.byte	0xb6
   1038f:	00          	.byte	0x00
		conv->flag_zero = false;
   10390:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10394:	f36f 1386 	bfc	r3, #6, #1
   10398:	f88d 3020 	strb.w	r3, [sp, #32]
   1039c:	e78a      	b.n	102b4 <cbvprintf+0x108>
		conv->width_star = true;
   1039e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   103a2:	f043 0301 	orr.w	r3, r3, #1
   103a6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
   103aa:	4643      	mov	r3, r8
   103ac:	3301      	adds	r3, #1
   103ae:	e7a7      	b.n	10300 <cbvprintf+0x154>
				      || (width != (size_t)conv->width_value));
   103b0:	2201      	movs	r2, #1
   103b2:	e79d      	b.n	102f0 <cbvprintf+0x144>
		return sp;
   103b4:	f8dd 8014 	ldr.w	r8, [sp, #20]
   103b8:	e7ca      	b.n	10350 <cbvprintf+0x1a4>
		conv->prec_star = true;
   103ba:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   103be:	f043 0304 	orr.w	r3, r3, #4
   103c2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
   103c6:	f102 0801 	add.w	r8, r2, #1
   103ca:	e7c1      	b.n	10350 <cbvprintf+0x1a4>
			      || (prec != (size_t)conv->prec_value));
   103cc:	2201      	movs	r2, #1
   103ce:	e7b6      	b.n	1033e <cbvprintf+0x192>
		if (*++sp == 'h') {
   103d0:	f108 0201 	add.w	r2, r8, #1
   103d4:	f898 3001 	ldrb.w	r3, [r8, #1]
   103d8:	2b68      	cmp	r3, #104	; 0x68
   103da:	d008      	beq.n	103ee <cbvprintf+0x242>
			conv->length_mod = LENGTH_H;
   103dc:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   103e0:	2102      	movs	r1, #2
   103e2:	f361 03c6 	bfi	r3, r1, #3, #4
   103e6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'h') {
   103ea:	4690      	mov	r8, r2
   103ec:	e02b      	b.n	10446 <cbvprintf+0x29a>
			conv->length_mod = LENGTH_HH;
   103ee:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   103f2:	2201      	movs	r2, #1
   103f4:	f362 03c6 	bfi	r3, r2, #3, #4
   103f8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
   103fc:	f108 0802 	add.w	r8, r8, #2
   10400:	e021      	b.n	10446 <cbvprintf+0x29a>
		if (*++sp == 'l') {
   10402:	f108 0201 	add.w	r2, r8, #1
   10406:	f898 3001 	ldrb.w	r3, [r8, #1]
   1040a:	2b6c      	cmp	r3, #108	; 0x6c
   1040c:	d008      	beq.n	10420 <cbvprintf+0x274>
			conv->length_mod = LENGTH_L;
   1040e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10412:	2103      	movs	r1, #3
   10414:	f361 03c6 	bfi	r3, r1, #3, #4
   10418:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'l') {
   1041c:	4690      	mov	r8, r2
   1041e:	e012      	b.n	10446 <cbvprintf+0x29a>
			conv->length_mod = LENGTH_LL;
   10420:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10424:	2204      	movs	r2, #4
   10426:	f362 03c6 	bfi	r3, r2, #3, #4
   1042a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
   1042e:	f108 0802 	add.w	r8, r8, #2
   10432:	e008      	b.n	10446 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_J;
   10434:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10438:	2205      	movs	r2, #5
   1043a:	f362 03c6 	bfi	r3, r2, #3, #4
   1043e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
   10442:	f108 0801 	add.w	r8, r8, #1
	conv->specifier = *sp++;
   10446:	f818 3b01 	ldrb.w	r3, [r8], #1
   1044a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	switch (conv->specifier) {
   1044e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   10452:	2a37      	cmp	r2, #55	; 0x37
   10454:	f200 8150 	bhi.w	106f8 <cbvprintf+0x54c>
   10458:	e8df f012 	tbh	[pc, r2, lsl #1]
   1045c:	014e0126 	.word	0x014e0126
   10460:	014e014e 	.word	0x014e014e
   10464:	01260126 	.word	0x01260126
   10468:	014e0126 	.word	0x014e0126
   1046c:	014e014e 	.word	0x014e014e
   10470:	014e014e 	.word	0x014e014e
   10474:	014e014e 	.word	0x014e014e
   10478:	014e014e 	.word	0x014e014e
   1047c:	014e014e 	.word	0x014e014e
   10480:	014e014e 	.word	0x014e014e
   10484:	014e014e 	.word	0x014e014e
   10488:	0113014e 	.word	0x0113014e
   1048c:	014e014e 	.word	0x014e014e
   10490:	014e014e 	.word	0x014e014e
   10494:	014e014e 	.word	0x014e014e
   10498:	014e014e 	.word	0x014e014e
   1049c:	014e0126 	.word	0x014e0126
   104a0:	00630113 	.word	0x00630113
   104a4:	01260126 	.word	0x01260126
   104a8:	014e0126 	.word	0x014e0126
   104ac:	014e0063 	.word	0x014e0063
   104b0:	014e014e 	.word	0x014e014e
   104b4:	012f014e 	.word	0x012f014e
   104b8:	013f0113 	.word	0x013f0113
   104bc:	014e014e 	.word	0x014e014e
   104c0:	014e013f 	.word	0x014e013f
   104c4:	014e0113 	.word	0x014e0113
   104c8:	0113014e 	.word	0x0113014e
		conv->length_mod = LENGTH_Z;
   104cc:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   104d0:	2206      	movs	r2, #6
   104d2:	f362 03c6 	bfi	r3, r2, #3, #4
   104d6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
   104da:	f108 0801 	add.w	r8, r8, #1
		break;
   104de:	e7b2      	b.n	10446 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_T;
   104e0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   104e4:	2207      	movs	r2, #7
   104e6:	f362 03c6 	bfi	r3, r2, #3, #4
   104ea:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
   104ee:	f108 0801 	add.w	r8, r8, #1
		break;
   104f2:	e7a8      	b.n	10446 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_UPPER_L;
   104f4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   104f8:	2208      	movs	r2, #8
   104fa:	f362 03c6 	bfi	r3, r2, #3, #4
   104fe:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
   10502:	f108 0801 	add.w	r8, r8, #1
		conv->unsupported = true;
   10506:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1050a:	f043 0302 	orr.w	r3, r3, #2
   1050e:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
   10512:	e798      	b.n	10446 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_NONE;
   10514:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10518:	f36f 03c6 	bfc	r3, #3, #4
   1051c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		break;
   10520:	e791      	b.n	10446 <cbvprintf+0x29a>
		conv->specifier_cat = SPECIFIER_SINT;
   10522:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   10526:	2101      	movs	r1, #1
   10528:	f361 0202 	bfi	r2, r1, #0, #3
   1052c:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
   10530:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   10534:	f002 0278 	and.w	r2, r2, #120	; 0x78
   10538:	2a40      	cmp	r2, #64	; 0x40
   1053a:	f000 80aa 	beq.w	10692 <cbvprintf+0x4e6>
		if (conv->specifier == 'c') {
   1053e:	2b63      	cmp	r3, #99	; 0x63
   10540:	f000 80ae 	beq.w	106a0 <cbvprintf+0x4f4>
	conv->unsupported |= unsupported;
   10544:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10548:	f3c3 0240 	ubfx	r2, r3, #1, #1
   1054c:	4317      	orrs	r7, r2
   1054e:	f367 0341 	bfi	r3, r7, #1, #1
   10552:	f88d 3020 	strb.w	r3, [sp, #32]
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
   10556:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1055a:	f013 0f01 	tst.w	r3, #1
   1055e:	f000 80da 	beq.w	10716 <cbvprintf+0x56a>
			width = va_arg(ap, int);
   10562:	9b03      	ldr	r3, [sp, #12]
   10564:	1d1a      	adds	r2, r3, #4
   10566:	9203      	str	r2, [sp, #12]
   10568:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
   1056a:	2f00      	cmp	r7, #0
   1056c:	f2c0 80cb 	blt.w	10706 <cbvprintf+0x55a>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
   10570:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10574:	f013 0f04 	tst.w	r3, #4
   10578:	f000 80df 	beq.w	1073a <cbvprintf+0x58e>
			int arg = va_arg(ap, int);
   1057c:	9b03      	ldr	r3, [sp, #12]
   1057e:	1d1a      	adds	r2, r3, #4
   10580:	9203      	str	r2, [sp, #12]
   10582:	f8d3 b000 	ldr.w	fp, [r3]

			if (arg < 0) {
   10586:	f1bb 0f00 	cmp.w	fp, #0
   1058a:	f2c0 80cd 	blt.w	10728 <cbvprintf+0x57c>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
   1058e:	2300      	movs	r3, #0
   10590:	9309      	str	r3, [sp, #36]	; 0x24
		conv->pad0_pre_exp = 0;
   10592:	930a      	str	r3, [sp, #40]	; 0x28
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
   10594:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   10598:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
   1059c:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
   105a0:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
   105a4:	2b01      	cmp	r3, #1
   105a6:	f000 80d1 	beq.w	1074c <cbvprintf+0x5a0>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
   105aa:	2b02      	cmp	r3, #2
   105ac:	f000 8116 	beq.w	107dc <cbvprintf+0x630>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
   105b0:	2b04      	cmp	r3, #4
   105b2:	f000 8167 	beq.w	10884 <cbvprintf+0x6d8>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
   105b6:	2b03      	cmp	r3, #3
   105b8:	f000 817e 	beq.w	108b8 <cbvprintf+0x70c>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
   105bc:	f89d 9020 	ldrb.w	r9, [sp, #32]
   105c0:	f019 0303 	ands.w	r3, r9, #3
   105c4:	9302      	str	r3, [sp, #8]
   105c6:	f040 817d 	bne.w	108c4 <cbvprintf+0x718>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
   105ca:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   105ce:	3b25      	subs	r3, #37	; 0x25
   105d0:	2b53      	cmp	r3, #83	; 0x53
   105d2:	f200 8233 	bhi.w	10a3c <cbvprintf+0x890>
   105d6:	e8df f013 	tbh	[pc, r3, lsl #1]
   105da:	0181      	.short	0x0181
   105dc:	02310231 	.word	0x02310231
   105e0:	02310231 	.word	0x02310231
   105e4:	02310231 	.word	0x02310231
   105e8:	02310231 	.word	0x02310231
   105ec:	02310231 	.word	0x02310231
   105f0:	02310231 	.word	0x02310231
   105f4:	02310231 	.word	0x02310231
   105f8:	02310231 	.word	0x02310231
   105fc:	02310231 	.word	0x02310231
   10600:	02310231 	.word	0x02310231
   10604:	02310231 	.word	0x02310231
   10608:	02310231 	.word	0x02310231
   1060c:	02310231 	.word	0x02310231
   10610:	02310231 	.word	0x02310231
   10614:	02310231 	.word	0x02310231
   10618:	02310231 	.word	0x02310231
   1061c:	02310231 	.word	0x02310231
   10620:	02310231 	.word	0x02310231
   10624:	02310231 	.word	0x02310231
   10628:	02310231 	.word	0x02310231
   1062c:	02310231 	.word	0x02310231
   10630:	02310231 	.word	0x02310231
   10634:	02310231 	.word	0x02310231
   10638:	02310231 	.word	0x02310231
   1063c:	02310231 	.word	0x02310231
   10640:	023101c7 	.word	0x023101c7
   10644:	02310231 	.word	0x02310231
   10648:	02310231 	.word	0x02310231
   1064c:	02310231 	.word	0x02310231
   10650:	02310231 	.word	0x02310231
   10654:	01a10231 	.word	0x01a10231
   10658:	023101ab 	.word	0x023101ab
   1065c:	02310231 	.word	0x02310231
   10660:	01ab0231 	.word	0x01ab0231
   10664:	02310231 	.word	0x02310231
   10668:	02310231 	.word	0x02310231
   1066c:	01c70208 	.word	0x01c70208
   10670:	023101ea 	.word	0x023101ea
   10674:	018f0231 	.word	0x018f0231
   10678:	01c70231 	.word	0x01c70231
   1067c:	02310231 	.word	0x02310231
   10680:	01c7      	.short	0x01c7
		conv->specifier_cat = SPECIFIER_UINT;
   10682:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   10686:	2102      	movs	r1, #2
   10688:	f361 0202 	bfi	r2, r1, #0, #3
   1068c:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
   10690:	e74e      	b.n	10530 <cbvprintf+0x384>
			conv->invalid = true;
   10692:	f89d 1020 	ldrb.w	r1, [sp, #32]
   10696:	f041 0101 	orr.w	r1, r1, #1
   1069a:	f88d 1020 	strb.w	r1, [sp, #32]
   1069e:	e74e      	b.n	1053e <cbvprintf+0x392>
			unsupported = (conv->length_mod != LENGTH_NONE);
   106a0:	1e17      	subs	r7, r2, #0
   106a2:	bf18      	it	ne
   106a4:	2701      	movne	r7, #1
   106a6:	e74d      	b.n	10544 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_FP;
   106a8:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   106ac:	2204      	movs	r2, #4
   106ae:	f362 0302 	bfi	r3, r2, #0, #3
   106b2:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			unsupported = true;
   106b6:	2701      	movs	r7, #1
			break;
   106b8:	e744      	b.n	10544 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
   106ba:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   106be:	2203      	movs	r2, #3
   106c0:	f362 0302 	bfi	r3, r2, #0, #3
   106c4:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
   106c8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   106cc:	f003 0378 	and.w	r3, r3, #120	; 0x78
   106d0:	2b40      	cmp	r3, #64	; 0x40
   106d2:	f47f af37 	bne.w	10544 <cbvprintf+0x398>
			unsupported = true;
   106d6:	2701      	movs	r7, #1
   106d8:	e734      	b.n	10544 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
   106da:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   106de:	2203      	movs	r2, #3
   106e0:	f362 0302 	bfi	r3, r2, #0, #3
   106e4:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod != LENGTH_NONE) {
   106e8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   106ec:	f013 0f78 	tst.w	r3, #120	; 0x78
   106f0:	f43f af28 	beq.w	10544 <cbvprintf+0x398>
			unsupported = true;
   106f4:	2701      	movs	r7, #1
   106f6:	e725      	b.n	10544 <cbvprintf+0x398>
		conv->invalid = true;
   106f8:	f89d 3020 	ldrb.w	r3, [sp, #32]
   106fc:	f043 0301 	orr.w	r3, r3, #1
   10700:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
   10704:	e71e      	b.n	10544 <cbvprintf+0x398>
				conv->flag_dash = true;
   10706:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1070a:	f043 0304 	orr.w	r3, r3, #4
   1070e:	f88d 3020 	strb.w	r3, [sp, #32]
				width = -width;
   10712:	427f      	negs	r7, r7
   10714:	e72c      	b.n	10570 <cbvprintf+0x3c4>
		} else if (conv->width_present) {
   10716:	f99d 3020 	ldrsb.w	r3, [sp, #32]
   1071a:	2b00      	cmp	r3, #0
   1071c:	db02      	blt.n	10724 <cbvprintf+0x578>
		int width = -1;
   1071e:	f04f 37ff 	mov.w	r7, #4294967295
   10722:	e725      	b.n	10570 <cbvprintf+0x3c4>
			width = conv->width_value;
   10724:	9f09      	ldr	r7, [sp, #36]	; 0x24
   10726:	e723      	b.n	10570 <cbvprintf+0x3c4>
				conv->prec_present = false;
   10728:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1072c:	f36f 0341 	bfc	r3, #1, #1
   10730:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		int precision = -1;
   10734:	f04f 3bff 	mov.w	fp, #4294967295
   10738:	e729      	b.n	1058e <cbvprintf+0x3e2>
		} else if (conv->prec_present) {
   1073a:	f013 0f02 	tst.w	r3, #2
   1073e:	d002      	beq.n	10746 <cbvprintf+0x59a>
			precision = conv->prec_value;
   10740:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   10744:	e723      	b.n	1058e <cbvprintf+0x3e2>
		int precision = -1;
   10746:	f04f 3bff 	mov.w	fp, #4294967295
   1074a:	e720      	b.n	1058e <cbvprintf+0x3e2>
			switch (length_mod) {
   1074c:	1ecb      	subs	r3, r1, #3
   1074e:	2b04      	cmp	r3, #4
   10750:	d804      	bhi.n	1075c <cbvprintf+0x5b0>
   10752:	e8df f003 	tbb	[pc, r3]
   10756:	1d0b      	.short	0x1d0b
   10758:	3529      	.short	0x3529
   1075a:	35          	.byte	0x35
   1075b:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   1075c:	9b03      	ldr	r3, [sp, #12]
   1075e:	1d1a      	adds	r2, r3, #4
   10760:	9203      	str	r2, [sp, #12]
   10762:	681a      	ldr	r2, [r3, #0]
   10764:	17d3      	asrs	r3, r2, #31
   10766:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   1076a:	e006      	b.n	1077a <cbvprintf+0x5ce>
					value->sint = va_arg(ap, long);
   1076c:	9b03      	ldr	r3, [sp, #12]
   1076e:	1d1a      	adds	r2, r3, #4
   10770:	9203      	str	r2, [sp, #12]
   10772:	681a      	ldr	r2, [r3, #0]
   10774:	17d3      	asrs	r3, r2, #31
   10776:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
   1077a:	2901      	cmp	r1, #1
   1077c:	d028      	beq.n	107d0 <cbvprintf+0x624>
			} else if (length_mod == LENGTH_H) {
   1077e:	2902      	cmp	r1, #2
   10780:	f47f af1c 	bne.w	105bc <cbvprintf+0x410>
				value->sint = (short)value->sint;
   10784:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
   10788:	17d3      	asrs	r3, r2, #31
   1078a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1078e:	e715      	b.n	105bc <cbvprintf+0x410>
					(sint_value_type)va_arg(ap, long long);
   10790:	9b03      	ldr	r3, [sp, #12]
   10792:	3307      	adds	r3, #7
   10794:	f023 0307 	bic.w	r3, r3, #7
   10798:	f103 0208 	add.w	r2, r3, #8
   1079c:	9203      	str	r2, [sp, #12]
   1079e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   107a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   107a6:	e7e8      	b.n	1077a <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, intmax_t);
   107a8:	9b03      	ldr	r3, [sp, #12]
   107aa:	3307      	adds	r3, #7
   107ac:	f023 0307 	bic.w	r3, r3, #7
   107b0:	f103 0208 	add.w	r2, r3, #8
   107b4:	9203      	str	r2, [sp, #12]
   107b6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   107ba:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   107be:	e7dc      	b.n	1077a <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   107c0:	9b03      	ldr	r3, [sp, #12]
   107c2:	1d1a      	adds	r2, r3, #4
   107c4:	9203      	str	r2, [sp, #12]
   107c6:	681a      	ldr	r2, [r3, #0]
   107c8:	17d3      	asrs	r3, r2, #31
				value->sint =
   107ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   107ce:	e7d4      	b.n	1077a <cbvprintf+0x5ce>
				value->sint = (char)value->sint;
   107d0:	f89d 3018 	ldrb.w	r3, [sp, #24]
   107d4:	9306      	str	r3, [sp, #24]
   107d6:	2300      	movs	r3, #0
   107d8:	9307      	str	r3, [sp, #28]
   107da:	e6ef      	b.n	105bc <cbvprintf+0x410>
			switch (length_mod) {
   107dc:	1ecb      	subs	r3, r1, #3
   107de:	2b04      	cmp	r3, #4
   107e0:	d804      	bhi.n	107ec <cbvprintf+0x640>
   107e2:	e8df f003 	tbb	[pc, r3]
   107e6:	1f0b      	.short	0x1f0b
   107e8:	4135      	.short	0x4135
   107ea:	41          	.byte	0x41
   107eb:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
   107ec:	9b03      	ldr	r3, [sp, #12]
   107ee:	1d1a      	adds	r2, r3, #4
   107f0:	9203      	str	r2, [sp, #12]
   107f2:	681b      	ldr	r3, [r3, #0]
   107f4:	9306      	str	r3, [sp, #24]
   107f6:	2300      	movs	r3, #0
   107f8:	9307      	str	r3, [sp, #28]
				break;
   107fa:	e01e      	b.n	1083a <cbvprintf+0x68e>
				    && (conv->specifier == 'c')) {
   107fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				if ((!WCHAR_IS_SIGNED)
   10800:	2b63      	cmp	r3, #99	; 0x63
   10802:	d007      	beq.n	10814 <cbvprintf+0x668>
					value->uint = va_arg(ap, unsigned long);
   10804:	9b03      	ldr	r3, [sp, #12]
   10806:	1d1a      	adds	r2, r3, #4
   10808:	9203      	str	r2, [sp, #12]
   1080a:	681b      	ldr	r3, [r3, #0]
   1080c:	9306      	str	r3, [sp, #24]
   1080e:	2300      	movs	r3, #0
   10810:	9307      	str	r3, [sp, #28]
   10812:	e012      	b.n	1083a <cbvprintf+0x68e>
					value->uint = (wchar_t)va_arg(ap,
   10814:	9b03      	ldr	r3, [sp, #12]
   10816:	1d1a      	adds	r2, r3, #4
   10818:	9203      	str	r2, [sp, #12]
   1081a:	681b      	ldr	r3, [r3, #0]
   1081c:	9306      	str	r3, [sp, #24]
   1081e:	2300      	movs	r3, #0
   10820:	9307      	str	r3, [sp, #28]
   10822:	e00a      	b.n	1083a <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap,
   10824:	9b03      	ldr	r3, [sp, #12]
   10826:	3307      	adds	r3, #7
   10828:	f023 0307 	bic.w	r3, r3, #7
   1082c:	f103 0208 	add.w	r2, r3, #8
   10830:	9203      	str	r2, [sp, #12]
   10832:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   10836:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
   1083a:	2901      	cmp	r1, #1
   1083c:	d01c      	beq.n	10878 <cbvprintf+0x6cc>
			} else if (length_mod == LENGTH_H) {
   1083e:	2902      	cmp	r1, #2
   10840:	f47f aebc 	bne.w	105bc <cbvprintf+0x410>
				value->uint = (unsigned short)value->uint;
   10844:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   10848:	9306      	str	r3, [sp, #24]
   1084a:	2300      	movs	r3, #0
   1084c:	9307      	str	r3, [sp, #28]
   1084e:	e6b5      	b.n	105bc <cbvprintf+0x410>
					(uint_value_type)va_arg(ap,
   10850:	9b03      	ldr	r3, [sp, #12]
   10852:	3307      	adds	r3, #7
   10854:	f023 0307 	bic.w	r3, r3, #7
   10858:	f103 0208 	add.w	r2, r3, #8
   1085c:	9203      	str	r2, [sp, #12]
   1085e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   10862:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   10866:	e7e8      	b.n	1083a <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap, size_t);
   10868:	9b03      	ldr	r3, [sp, #12]
   1086a:	1d1a      	adds	r2, r3, #4
   1086c:	9203      	str	r2, [sp, #12]
   1086e:	681b      	ldr	r3, [r3, #0]
				value->uint =
   10870:	9306      	str	r3, [sp, #24]
   10872:	2300      	movs	r3, #0
   10874:	9307      	str	r3, [sp, #28]
				break;
   10876:	e7e0      	b.n	1083a <cbvprintf+0x68e>
				value->uint = (unsigned char)value->uint;
   10878:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1087c:	9306      	str	r3, [sp, #24]
   1087e:	2300      	movs	r3, #0
   10880:	9307      	str	r3, [sp, #28]
   10882:	e69b      	b.n	105bc <cbvprintf+0x410>
			if (length_mod == LENGTH_UPPER_L) {
   10884:	2908      	cmp	r1, #8
   10886:	d00b      	beq.n	108a0 <cbvprintf+0x6f4>
				value->dbl = va_arg(ap, double);
   10888:	9b03      	ldr	r3, [sp, #12]
   1088a:	3307      	adds	r3, #7
   1088c:	f023 0307 	bic.w	r3, r3, #7
   10890:	f103 0208 	add.w	r2, r3, #8
   10894:	9203      	str	r2, [sp, #12]
   10896:	e9d3 2300 	ldrd	r2, r3, [r3]
   1089a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1089e:	e68d      	b.n	105bc <cbvprintf+0x410>
				value->ldbl = va_arg(ap, long double);
   108a0:	9b03      	ldr	r3, [sp, #12]
   108a2:	3307      	adds	r3, #7
   108a4:	f023 0307 	bic.w	r3, r3, #7
   108a8:	f103 0208 	add.w	r2, r3, #8
   108ac:	9203      	str	r2, [sp, #12]
   108ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   108b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   108b6:	e681      	b.n	105bc <cbvprintf+0x410>
			value->ptr = va_arg(ap, void *);
   108b8:	9b03      	ldr	r3, [sp, #12]
   108ba:	1d1a      	adds	r2, r3, #4
   108bc:	9203      	str	r2, [sp, #12]
   108be:	681b      	ldr	r3, [r3, #0]
   108c0:	9306      	str	r3, [sp, #24]
   108c2:	e67b      	b.n	105bc <cbvprintf+0x410>
			OUTS(sp, fp);
   108c4:	4643      	mov	r3, r8
   108c6:	4652      	mov	r2, sl
   108c8:	4629      	mov	r1, r5
   108ca:	4630      	mov	r0, r6
   108cc:	f011 fbe7 	bl	2209e <outs>
   108d0:	2800      	cmp	r0, #0
   108d2:	f2c0 814f 	blt.w	10b74 <cbvprintf+0x9c8>
   108d6:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
   108d8:	46c2      	mov	sl, r8
			continue;
   108da:	e46f      	b.n	101bc <cbvprintf+0x10>
		case '%':
			OUTC('%');
   108dc:	4629      	mov	r1, r5
   108de:	2025      	movs	r0, #37	; 0x25
   108e0:	47b0      	blx	r6
   108e2:	2800      	cmp	r0, #0
   108e4:	f2c0 8146 	blt.w	10b74 <cbvprintf+0x9c8>
   108e8:	3401      	adds	r4, #1
		char sign = 0;
   108ea:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
   108ee:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
   108f2:	f04f 0a00 	mov.w	sl, #0
			break;
   108f6:	e0a7      	b.n	10a48 <cbvprintf+0x89c>
		case 's': {
			bps = (const char *)value->ptr;
   108f8:	f8dd a018 	ldr.w	sl, [sp, #24]

			size_t len;

			if (precision >= 0) {
   108fc:	f1bb 0f00 	cmp.w	fp, #0
   10900:	db08      	blt.n	10914 <cbvprintf+0x768>
				len = strnlen(bps, precision);
   10902:	4659      	mov	r1, fp
   10904:	4650      	mov	r0, sl
   10906:	f014 f86b 	bl	249e0 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
   1090a:	eb0a 0b00 	add.w	fp, sl, r0
		char sign = 0;
   1090e:	f8dd 9008 	ldr.w	r9, [sp, #8]
			precision = -1;

			break;
   10912:	e099      	b.n	10a48 <cbvprintf+0x89c>
				len = strlen(bps);
   10914:	4650      	mov	r0, sl
   10916:	f014 f85b 	bl	249d0 <strlen>
   1091a:	e7f6      	b.n	1090a <cbvprintf+0x75e>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   1091c:	9b06      	ldr	r3, [sp, #24]
   1091e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		char sign = 0;
   10922:	f8dd 9008 	ldr.w	r9, [sp, #8]
			bpe = buf + 1;
   10926:	f10d 0b31 	add.w	fp, sp, #49	; 0x31
			bps = buf;
   1092a:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
			break;
   1092e:	e08b      	b.n	10a48 <cbvprintf+0x89c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
   10930:	f019 0f08 	tst.w	r9, #8
   10934:	d105      	bne.n	10942 <cbvprintf+0x796>
				sign = '+';
			} else if (conv->flag_space) {
   10936:	f019 0910 	ands.w	r9, r9, #16
   1093a:	d004      	beq.n	10946 <cbvprintf+0x79a>
				sign = ' ';
   1093c:	f04f 0920 	mov.w	r9, #32
   10940:	e001      	b.n	10946 <cbvprintf+0x79a>
				sign = '+';
   10942:	f04f 092b 	mov.w	r9, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
   10946:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
			if (sint < 0) {
   1094a:	2a00      	cmp	r2, #0
   1094c:	f173 0100 	sbcs.w	r1, r3, #0
   10950:	db02      	blt.n	10958 <cbvprintf+0x7ac>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
   10952:	e9cd 2306 	strd	r2, r3, [sp, #24]
   10956:	e009      	b.n	1096c <cbvprintf+0x7c0>
				value->uint = (uint_value_type)-sint;
   10958:	4252      	negs	r2, r2
   1095a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1095e:	e9cd 2306 	strd	r2, r3, [sp, #24]
				sign = '-';
   10962:	f04f 092d 	mov.w	r9, #45	; 0x2d
   10966:	e001      	b.n	1096c <cbvprintf+0x7c0>
		switch (conv->specifier) {
   10968:	f8dd 9008 	ldr.w	r9, [sp, #8]
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
   1096c:	f10d 0346 	add.w	r3, sp, #70	; 0x46
   10970:	9300      	str	r3, [sp, #0]
   10972:	ab0c      	add	r3, sp, #48	; 0x30
   10974:	aa08      	add	r2, sp, #32
   10976:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1097a:	f011 fb26 	bl	21fca <encode_uint>
   1097e:	4682      	mov	sl, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
   10980:	f1bb 0f00 	cmp.w	fp, #0
   10984:	f2c0 8090 	blt.w	10aa8 <cbvprintf+0x8fc>
				size_t len = bpe - bps;
   10988:	f10d 0346 	add.w	r3, sp, #70	; 0x46
   1098c:	eba3 030a 	sub.w	r3, r3, sl

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
   10990:	f89d 2020 	ldrb.w	r2, [sp, #32]
   10994:	f36f 1286 	bfc	r2, #6, #1
   10998:	f88d 2020 	strb.w	r2, [sp, #32]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
   1099c:	459b      	cmp	fp, r3
   1099e:	f240 8086 	bls.w	10aae <cbvprintf+0x902>
					conv->pad0_value = precision - (int)len;
   109a2:	ebab 0303 	sub.w	r3, fp, r3
   109a6:	9309      	str	r3, [sp, #36]	; 0x24
		const char *bpe = buf + sizeof(buf);
   109a8:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   109ac:	e04c      	b.n	10a48 <cbvprintf+0x89c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
   109ae:	9806      	ldr	r0, [sp, #24]
   109b0:	b930      	cbnz	r0, 109c0 <cbvprintf+0x814>
		char sign = 0;
   109b2:	f8dd 9008 	ldr.w	r9, [sp, #8]

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
   109b6:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 10b7c <cbvprintf+0x9d0>
			bps = "(nil)";
   109ba:	f1ab 0a05 	sub.w	sl, fp, #5
   109be:	e043      	b.n	10a48 <cbvprintf+0x89c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   109c0:	f10d 0346 	add.w	r3, sp, #70	; 0x46
   109c4:	9300      	str	r3, [sp, #0]
   109c6:	ab0c      	add	r3, sp, #48	; 0x30
   109c8:	aa08      	add	r2, sp, #32
   109ca:	2100      	movs	r1, #0
   109cc:	f011 fafd 	bl	21fca <encode_uint>
   109d0:	4682      	mov	sl, r0
				conv->altform_0c = true;
   109d2:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   109d6:	f043 0310 	orr.w	r3, r3, #16
   109da:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				conv->specifier = 'x';
   109de:	2378      	movs	r3, #120	; 0x78
   109e0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		char sign = 0;
   109e4:	f8dd 9008 	ldr.w	r9, [sp, #8]
				goto prec_int_pad0;
   109e8:	e7ca      	b.n	10980 <cbvprintf+0x7d4>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
   109ea:	9a06      	ldr	r2, [sp, #24]
	switch ((enum length_mod_enum)conv->length_mod) {
   109ec:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   109f0:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   109f4:	2b07      	cmp	r3, #7
   109f6:	d806      	bhi.n	10a06 <cbvprintf+0x85a>
   109f8:	e8df f003 	tbb	[pc, r3]
   109fc:	100e0c04 	.word	0x100e0c04
   10a00:	1e1c1712 	.word	0x1e1c1712
		*(int *)dp = count;
   10a04:	6014      	str	r4, [r2, #0]
		char sign = 0;
   10a06:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
   10a0a:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
   10a0e:	f04f 0a00 	mov.w	sl, #0
}
   10a12:	e019      	b.n	10a48 <cbvprintf+0x89c>
		*(signed char *)dp = (signed char)count;
   10a14:	7014      	strb	r4, [r2, #0]
		break;
   10a16:	e7f6      	b.n	10a06 <cbvprintf+0x85a>
		*(short *)dp = (short)count;
   10a18:	8014      	strh	r4, [r2, #0]
		break;
   10a1a:	e7f4      	b.n	10a06 <cbvprintf+0x85a>
		*(long *)dp = (long)count;
   10a1c:	6014      	str	r4, [r2, #0]
		break;
   10a1e:	e7f2      	b.n	10a06 <cbvprintf+0x85a>
		*(long long *)dp = (long long)count;
   10a20:	4620      	mov	r0, r4
   10a22:	17e1      	asrs	r1, r4, #31
   10a24:	e9c2 0100 	strd	r0, r1, [r2]
		break;
   10a28:	e7ed      	b.n	10a06 <cbvprintf+0x85a>
		*(intmax_t *)dp = (intmax_t)count;
   10a2a:	4620      	mov	r0, r4
   10a2c:	17e1      	asrs	r1, r4, #31
   10a2e:	e9c2 0100 	strd	r0, r1, [r2]
		break;
   10a32:	e7e8      	b.n	10a06 <cbvprintf+0x85a>
		*(size_t *)dp = (size_t)count;
   10a34:	6014      	str	r4, [r2, #0]
		break;
   10a36:	e7e6      	b.n	10a06 <cbvprintf+0x85a>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   10a38:	6014      	str	r4, [r2, #0]
		break;
   10a3a:	e7e4      	b.n	10a06 <cbvprintf+0x85a>
		switch (conv->specifier) {
   10a3c:	f8dd 9008 	ldr.w	r9, [sp, #8]
   10a40:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   10a44:	f04f 0a00 	mov.w	sl, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
   10a48:	f1ba 0f00 	cmp.w	sl, #0
   10a4c:	f000 808e 	beq.w	10b6c <cbvprintf+0x9c0>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
   10a50:	ebab 020a 	sub.w	r2, fp, sl
		int pad_len = 0;

		if (sign != 0) {
   10a54:	f1b9 0f00 	cmp.w	r9, #0
   10a58:	d000      	beq.n	10a5c <cbvprintf+0x8b0>
			nj_len += 1U;
   10a5a:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
   10a5c:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
   10a60:	f011 0f10 	tst.w	r1, #16
   10a64:	d026      	beq.n	10ab4 <cbvprintf+0x908>
			nj_len += 2U;
   10a66:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
   10a68:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10a6a:	4413      	add	r3, r2
		if (conv->pad_fp) {
   10a6c:	f011 0f40 	tst.w	r1, #64	; 0x40
   10a70:	d001      	beq.n	10a76 <cbvprintf+0x8ca>
			nj_len += conv->pad0_pre_exp;
   10a72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10a74:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
   10a76:	2f00      	cmp	r7, #0
   10a78:	dd32      	ble.n	10ae0 <cbvprintf+0x934>
			width -= (int)nj_len;
   10a7a:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
   10a7c:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10a80:	f013 0f04 	tst.w	r3, #4
   10a84:	d12c      	bne.n	10ae0 <cbvprintf+0x934>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
   10a86:	f013 0f40 	tst.w	r3, #64	; 0x40
   10a8a:	d018      	beq.n	10abe <cbvprintf+0x912>
					if (sign != 0) {
   10a8c:	f1b9 0f00 	cmp.w	r9, #0
   10a90:	d018      	beq.n	10ac4 <cbvprintf+0x918>
						OUTC(sign);
   10a92:	4629      	mov	r1, r5
   10a94:	4648      	mov	r0, r9
   10a96:	47b0      	blx	r6
   10a98:	2800      	cmp	r0, #0
   10a9a:	db6b      	blt.n	10b74 <cbvprintf+0x9c8>
   10a9c:	3401      	adds	r4, #1
						sign = 0;
   10a9e:	f8dd 9008 	ldr.w	r9, [sp, #8]
					}
					pad = '0';
   10aa2:	2330      	movs	r3, #48	; 0x30
   10aa4:	9302      	str	r3, [sp, #8]
   10aa6:	e00f      	b.n	10ac8 <cbvprintf+0x91c>
		const char *bpe = buf + sizeof(buf);
   10aa8:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   10aac:	e7cc      	b.n	10a48 <cbvprintf+0x89c>
   10aae:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   10ab2:	e7c9      	b.n	10a48 <cbvprintf+0x89c>
		} else if (conv->altform_0) {
   10ab4:	f011 0f08 	tst.w	r1, #8
   10ab8:	d0d6      	beq.n	10a68 <cbvprintf+0x8bc>
			nj_len += 1U;
   10aba:	3201      	adds	r2, #1
   10abc:	e7d4      	b.n	10a68 <cbvprintf+0x8bc>
				char pad = ' ';
   10abe:	2320      	movs	r3, #32
   10ac0:	9302      	str	r3, [sp, #8]
   10ac2:	e001      	b.n	10ac8 <cbvprintf+0x91c>
					pad = '0';
   10ac4:	2330      	movs	r3, #48	; 0x30
   10ac6:	9302      	str	r3, [sp, #8]
   10ac8:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
   10aca:	1e5f      	subs	r7, r3, #1
   10acc:	2b00      	cmp	r3, #0
   10ace:	dd07      	ble.n	10ae0 <cbvprintf+0x934>
					OUTC(pad);
   10ad0:	4629      	mov	r1, r5
   10ad2:	9802      	ldr	r0, [sp, #8]
   10ad4:	47b0      	blx	r6
   10ad6:	2800      	cmp	r0, #0
   10ad8:	db4c      	blt.n	10b74 <cbvprintf+0x9c8>
   10ada:	3401      	adds	r4, #1
				while (width-- > 0) {
   10adc:	463b      	mov	r3, r7
   10ade:	e7f4      	b.n	10aca <cbvprintf+0x91e>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
   10ae0:	f1b9 0f00 	cmp.w	r9, #0
   10ae4:	d005      	beq.n	10af2 <cbvprintf+0x946>
			OUTC(sign);
   10ae6:	4629      	mov	r1, r5
   10ae8:	4648      	mov	r0, r9
   10aea:	47b0      	blx	r6
   10aec:	2800      	cmp	r0, #0
   10aee:	db41      	blt.n	10b74 <cbvprintf+0x9c8>
   10af0:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
   10af2:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   10af6:	f3c3 1200 	ubfx	r2, r3, #4, #1
   10afa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   10afe:	4313      	orrs	r3, r2
   10b00:	d005      	beq.n	10b0e <cbvprintf+0x962>
				OUTC('0');
   10b02:	4629      	mov	r1, r5
   10b04:	2030      	movs	r0, #48	; 0x30
   10b06:	47b0      	blx	r6
   10b08:	2800      	cmp	r0, #0
   10b0a:	db33      	blt.n	10b74 <cbvprintf+0x9c8>
   10b0c:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
   10b0e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   10b12:	f013 0f10 	tst.w	r3, #16
   10b16:	d006      	beq.n	10b26 <cbvprintf+0x97a>
				OUTC(conv->specifier);
   10b18:	4629      	mov	r1, r5
   10b1a:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   10b1e:	47b0      	blx	r6
   10b20:	2800      	cmp	r0, #0
   10b22:	db27      	blt.n	10b74 <cbvprintf+0x9c8>
   10b24:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
   10b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
			while (pad_len-- > 0) {
   10b28:	f103 39ff 	add.w	r9, r3, #4294967295
   10b2c:	2b00      	cmp	r3, #0
   10b2e:	dd07      	ble.n	10b40 <cbvprintf+0x994>
				OUTC('0');
   10b30:	4629      	mov	r1, r5
   10b32:	2030      	movs	r0, #48	; 0x30
   10b34:	47b0      	blx	r6
   10b36:	2800      	cmp	r0, #0
   10b38:	db1c      	blt.n	10b74 <cbvprintf+0x9c8>
   10b3a:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
   10b3c:	464b      	mov	r3, r9
   10b3e:	e7f3      	b.n	10b28 <cbvprintf+0x97c>
			}

			OUTS(bps, bpe);
   10b40:	465b      	mov	r3, fp
   10b42:	4652      	mov	r2, sl
   10b44:	4629      	mov	r1, r5
   10b46:	4630      	mov	r0, r6
   10b48:	f011 faa9 	bl	2209e <outs>
   10b4c:	2800      	cmp	r0, #0
   10b4e:	db11      	blt.n	10b74 <cbvprintf+0x9c8>
   10b50:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
   10b52:	2f00      	cmp	r7, #0
   10b54:	dd07      	ble.n	10b66 <cbvprintf+0x9ba>
			OUTC(' ');
   10b56:	4629      	mov	r1, r5
   10b58:	2020      	movs	r0, #32
   10b5a:	47b0      	blx	r6
   10b5c:	2800      	cmp	r0, #0
   10b5e:	db09      	blt.n	10b74 <cbvprintf+0x9c8>
   10b60:	3401      	adds	r4, #1
			--width;
   10b62:	3f01      	subs	r7, #1
   10b64:	e7f5      	b.n	10b52 <cbvprintf+0x9a6>
		fp = extract_conversion(conv, sp);
   10b66:	46c2      	mov	sl, r8
   10b68:	f7ff bb28 	b.w	101bc <cbvprintf+0x10>
   10b6c:	46c2      	mov	sl, r8
   10b6e:	f7ff bb25 	b.w	101bc <cbvprintf+0x10>
		}
	}

	return count;
   10b72:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
   10b74:	b013      	add	sp, #76	; 0x4c
   10b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10b7a:	bf00      	nop
   10b7c:	0002a4ad 	.word	0x0002a4ad

00010b80 <is_rodata>:
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   10b80:	4b05      	ldr	r3, [pc, #20]	; (10b98 <is_rodata+0x18>)
   10b82:	4298      	cmp	r0, r3
   10b84:	d304      	bcc.n	10b90 <is_rodata+0x10>
   10b86:	4b05      	ldr	r3, [pc, #20]	; (10b9c <is_rodata+0x1c>)
   10b88:	4298      	cmp	r0, r3
   10b8a:	d303      	bcc.n	10b94 <is_rodata+0x14>
   10b8c:	2000      	movs	r0, #0
   10b8e:	4770      	bx	lr
   10b90:	2000      	movs	r0, #0
   10b92:	4770      	bx	lr
   10b94:	2001      	movs	r0, #1
		((const char *)addr < (const char *)RO_END));
}
   10b96:	4770      	bx	lr
   10b98:	00029c40 	.word	0x00029c40
   10b9c:	0002d178 	.word	0x0002d178

00010ba0 <thread_set>:
		}
	}
}

static void thread_set(k_tid_t process_tid)
{
   10ba0:	b508      	push	{r3, lr}
	proc_tid = process_tid;
   10ba2:	4b06      	ldr	r3, [pc, #24]	; (10bbc <thread_set+0x1c>)
   10ba4:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE)) {
		return;
	}

	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   10ba6:	b118      	cbz	r0, 10bb0 <thread_set+0x10>
	    process_tid &&
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   10ba8:	4b05      	ldr	r3, [pc, #20]	; (10bc0 <thread_set+0x20>)
   10baa:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
   10bac:	2b09      	cmp	r3, #9
   10bae:	dc00      	bgt.n	10bb2 <thread_set+0x12>
		k_sem_give(&log_process_thread_sem);
	}
}
   10bb0:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
   10bb2:	4804      	ldr	r0, [pc, #16]	; (10bc4 <thread_set+0x24>)
   10bb4:	f00f f8c0 	bl	1fd38 <z_impl_k_sem_give>
}
   10bb8:	e7fa      	b.n	10bb0 <thread_set+0x10>
   10bba:	bf00      	nop
   10bbc:	2000245c 	.word	0x2000245c
   10bc0:	2000242c 	.word	0x2000242c
   10bc4:	2000078c 	.word	0x2000078c

00010bc8 <log_process_thread_timer_expiry_fn>:
{
	return mpsc_pbuf_is_pending(&log_buffer);
}

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
   10bc8:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   10bca:	4802      	ldr	r0, [pc, #8]	; (10bd4 <log_process_thread_timer_expiry_fn+0xc>)
   10bcc:	f00f f8b4 	bl	1fd38 <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
   10bd0:	bd08      	pop	{r3, pc}
   10bd2:	bf00      	nop
   10bd4:	2000078c 	.word	0x2000078c

00010bd8 <next_pending>:
{
   10bd8:	b508      	push	{r3, lr}
	return (log_list_head_peek(&list) != NULL);
   10bda:	4803      	ldr	r0, [pc, #12]	; (10be8 <next_pending+0x10>)
   10bdc:	f011 fa88 	bl	220f0 <log_list_head_peek>
}
   10be0:	3800      	subs	r0, #0
   10be2:	bf18      	it	ne
   10be4:	2001      	movne	r0, #1
   10be6:	bd08      	pop	{r3, pc}
   10be8:	20002438 	.word	0x20002438

00010bec <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   10bec:	b530      	push	{r4, r5, lr}
   10bee:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   10bf0:	2200      	movs	r2, #0
   10bf2:	490f      	ldr	r1, [pc, #60]	; (10c30 <enable_logger+0x44>)
   10bf4:	480f      	ldr	r0, [pc, #60]	; (10c34 <enable_logger+0x48>)
   10bf6:	f018 ff3a 	bl	29a6e <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   10bfa:	4d0f      	ldr	r5, [pc, #60]	; (10c38 <enable_logger+0x4c>)
   10bfc:	2200      	movs	r2, #0
   10bfe:	2300      	movs	r3, #0
   10c00:	e9cd 2306 	strd	r2, r3, [sp, #24]
   10c04:	2400      	movs	r4, #0
   10c06:	9404      	str	r4, [sp, #16]
   10c08:	230e      	movs	r3, #14
   10c0a:	9303      	str	r3, [sp, #12]
   10c0c:	9402      	str	r4, [sp, #8]
   10c0e:	9401      	str	r4, [sp, #4]
   10c10:	9400      	str	r4, [sp, #0]
   10c12:	4b0a      	ldr	r3, [pc, #40]	; (10c3c <enable_logger+0x50>)
   10c14:	f44f 7240 	mov.w	r2, #768	; 0x300
   10c18:	4909      	ldr	r1, [pc, #36]	; (10c40 <enable_logger+0x54>)
   10c1a:	4628      	mov	r0, r5
   10c1c:	f018 fa51 	bl	290c2 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   10c20:	4908      	ldr	r1, [pc, #32]	; (10c44 <enable_logger+0x58>)
   10c22:	4628      	mov	r0, r5
   10c24:	f00e fdda 	bl	1f7dc <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
   10c28:	4620      	mov	r0, r4
   10c2a:	b009      	add	sp, #36	; 0x24
   10c2c:	bd30      	pop	{r4, r5, pc}
   10c2e:	bf00      	nop
   10c30:	00010bc9 	.word	0x00010bc9
   10c34:	200014e0 	.word	0x200014e0
   10c38:	20001518 	.word	0x20001518
   10c3c:	00011395 	.word	0x00011395
   10c40:	20003dc0 	.word	0x20003dc0
   10c44:	0002a4b0 	.word	0x0002a4b0

00010c48 <log_core_init>:
{
   10c48:	b508      	push	{r3, lr}
	panic_mode = false;
   10c4a:	4b0b      	ldr	r3, [pc, #44]	; (10c78 <log_core_init+0x30>)
   10c4c:	2200      	movs	r2, #0
   10c4e:	701a      	strb	r2, [r3, #0]
		timestamp_func = default_get_timestamp;
   10c50:	4b0a      	ldr	r3, [pc, #40]	; (10c7c <log_core_init+0x34>)
   10c52:	4a0b      	ldr	r2, [pc, #44]	; (10c80 <log_core_init+0x38>)
   10c54:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
   10c56:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   10c5a:	f000 fdf9 	bl	11850 <log_output_timestamp_freq_set>
		log_msg_pool_init();
   10c5e:	f000 fbdd 	bl	1141c <log_msg_pool_init>
		log_list_init(&list);
   10c62:	4808      	ldr	r0, [pc, #32]	; (10c84 <log_core_init+0x3c>)
   10c64:	f011 fa36 	bl	220d4 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   10c68:	2308      	movs	r3, #8
   10c6a:	2248      	movs	r2, #72	; 0x48
   10c6c:	4906      	ldr	r1, [pc, #24]	; (10c88 <log_core_init+0x40>)
   10c6e:	4807      	ldr	r0, [pc, #28]	; (10c8c <log_core_init+0x44>)
   10c70:	f018 f9c4 	bl	28ffc <k_mem_slab_init>
}
   10c74:	bd08      	pop	{r3, pc}
   10c76:	bf00      	nop
   10c78:	20003987 	.word	0x20003987
   10c7c:	20000474 	.word	0x20000474
   10c80:	00022109 	.word	0x00022109
   10c84:	20002438 	.word	0x20002438
   10c88:	200074f0 	.word	0x200074f0
   10c8c:	20002440 	.word	0x20002440

00010c90 <get_msg>:
{
   10c90:	b510      	push	{r4, lr}
   10c92:	f04f 0340 	mov.w	r3, #64	; 0x40
   10c96:	f3ef 8411 	mrs	r4, BASEPRI
   10c9a:	f383 8811 	msr	BASEPRI, r3
   10c9e:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
   10ca2:	4804      	ldr	r0, [pc, #16]	; (10cb4 <get_msg+0x24>)
   10ca4:	f011 fa26 	bl	220f4 <log_list_head_get>
	__asm__ volatile(
   10ca8:	f384 8811 	msr	BASEPRI, r4
   10cac:	f3bf 8f6f 	isb	sy
}
   10cb0:	bd10      	pop	{r4, pc}
   10cb2:	bf00      	nop
   10cb4:	20002438 	.word	0x20002438

00010cb8 <z_log_dropped>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   10cb8:	4b06      	ldr	r3, [pc, #24]	; (10cd4 <z_log_dropped+0x1c>)
   10cba:	f3bf 8f5b 	dmb	ish
   10cbe:	e853 2f00 	ldrex	r2, [r3]
   10cc2:	3201      	adds	r2, #1
   10cc4:	e843 2100 	strex	r1, r2, [r3]
   10cc8:	2900      	cmp	r1, #0
   10cca:	d1f8      	bne.n	10cbe <z_log_dropped+0x6>
   10ccc:	f3bf 8f5b 	dmb	ish
}
   10cd0:	4770      	bx	lr
   10cd2:	bf00      	nop
   10cd4:	20002430 	.word	0x20002430

00010cd8 <z_log_dropped_read_and_clear>:
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   10cd8:	4b06      	ldr	r3, [pc, #24]	; (10cf4 <z_log_dropped_read_and_clear+0x1c>)
}
   10cda:	2000      	movs	r0, #0
   10cdc:	4602      	mov	r2, r0
   10cde:	f3bf 8f5b 	dmb	ish
   10ce2:	e853 0f00 	ldrex	r0, [r3]
   10ce6:	e843 2100 	strex	r1, r2, [r3]
   10cea:	2900      	cmp	r1, #0
   10cec:	d1f9      	bne.n	10ce2 <z_log_dropped_read_and_clear+0xa>
   10cee:	f3bf 8f5b 	dmb	ish
   10cf2:	4770      	bx	lr
   10cf4:	20002430 	.word	0x20002430

00010cf8 <dropped_notify>:
{
   10cf8:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   10cfa:	f7ff ffed 	bl	10cd8 <z_log_dropped_read_and_clear>
   10cfe:	4605      	mov	r5, r0
	for (int i = 0; i < log_backend_count_get(); i++) {
   10d00:	2400      	movs	r4, #0
   10d02:	e000      	b.n	10d06 <dropped_notify+0xe>
   10d04:	3401      	adds	r4, #1
   10d06:	4b0b      	ldr	r3, [pc, #44]	; (10d34 <dropped_notify+0x3c>)
   10d08:	4a0b      	ldr	r2, [pc, #44]	; (10d38 <dropped_notify+0x40>)
   10d0a:	1a9b      	subs	r3, r3, r2
   10d0c:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   10d10:	da0f      	bge.n	10d32 <dropped_notify+0x3a>
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(uint32_t idx)
{
	return &__log_backends_start[idx];
   10d12:	4809      	ldr	r0, [pc, #36]	; (10d38 <dropped_notify+0x40>)
   10d14:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   10d18:	6843      	ldr	r3, [r0, #4]
   10d1a:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
   10d1c:	2b00      	cmp	r3, #0
   10d1e:	d0f1      	beq.n	10d04 <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
   10d20:	0123      	lsls	r3, r4, #4
   10d22:	4a05      	ldr	r2, [pc, #20]	; (10d38 <dropped_notify+0x40>)
   10d24:	58d3      	ldr	r3, [r2, r3]
   10d26:	691b      	ldr	r3, [r3, #16]
   10d28:	2b00      	cmp	r3, #0
   10d2a:	d0eb      	beq.n	10d04 <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
   10d2c:	4629      	mov	r1, r5
   10d2e:	4798      	blx	r3
   10d30:	e7e8      	b.n	10d04 <dropped_notify+0xc>
}
   10d32:	bd38      	pop	{r3, r4, r5, pc}
   10d34:	00029ff4 	.word	0x00029ff4
   10d38:	00029fe4 	.word	0x00029fe4

00010d3c <z_log_dropped_pending>:
	return dropped_cnt > 0;
   10d3c:	4b03      	ldr	r3, [pc, #12]	; (10d4c <z_log_dropped_pending+0x10>)
   10d3e:	6818      	ldr	r0, [r3, #0]
}
   10d40:	2800      	cmp	r0, #0
   10d42:	bfd4      	ite	le
   10d44:	2000      	movle	r0, #0
   10d46:	2001      	movgt	r0, #1
   10d48:	4770      	bx	lr
   10d4a:	bf00      	nop
   10d4c:	20002430 	.word	0x20002430

00010d50 <log_source_name_get>:
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   10d50:	4b05      	ldr	r3, [pc, #20]	; (10d68 <log_source_name_get+0x18>)
   10d52:	4a06      	ldr	r2, [pc, #24]	; (10d6c <log_source_name_get+0x1c>)
   10d54:	1a9b      	subs	r3, r3, r2
   10d56:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
   10d5a:	d202      	bcs.n	10d62 <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
   10d5c:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
   10d60:	4770      	bx	lr
   10d62:	2000      	movs	r0, #0
}
   10d64:	4770      	bx	lr
   10d66:	bf00      	nop
   10d68:	00029fe4 	.word	0x00029fe4
   10d6c:	00029ecc 	.word	0x00029ecc

00010d70 <log_backend_enable>:
{
   10d70:	b508      	push	{r3, lr}
	id += backend - log_backend_get(0);
   10d72:	4b0b      	ldr	r3, [pc, #44]	; (10da0 <log_backend_enable+0x30>)
   10d74:	1ac3      	subs	r3, r0, r3
   10d76:	111b      	asrs	r3, r3, #4
   10d78:	3301      	adds	r3, #1
	backend->cb->id = id;
   10d7a:	6842      	ldr	r2, [r0, #4]
   10d7c:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
   10d7e:	6843      	ldr	r3, [r0, #4]
   10d80:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   10d82:	6843      	ldr	r3, [r0, #4]
   10d84:	2201      	movs	r2, #1
   10d86:	715a      	strb	r2, [r3, #5]
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   10d88:	4b06      	ldr	r3, [pc, #24]	; (10da4 <log_backend_enable+0x34>)
   10d8a:	781b      	ldrb	r3, [r3, #0]
   10d8c:	b11b      	cbz	r3, 10d96 <log_backend_enable+0x26>
	backend_attached = true;
   10d8e:	4b05      	ldr	r3, [pc, #20]	; (10da4 <log_backend_enable+0x34>)
   10d90:	2201      	movs	r2, #1
   10d92:	701a      	strb	r2, [r3, #0]
}
   10d94:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
   10d96:	4804      	ldr	r0, [pc, #16]	; (10da8 <log_backend_enable+0x38>)
   10d98:	f00e ffce 	bl	1fd38 <z_impl_k_sem_give>
}
   10d9c:	e7f7      	b.n	10d8e <log_backend_enable+0x1e>
   10d9e:	bf00      	nop
   10da0:	00029fe4 	.word	0x00029fe4
   10da4:	20003986 	.word	0x20003986
   10da8:	2000078c 	.word	0x2000078c

00010dac <log_init>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   10dac:	4b18      	ldr	r3, [pc, #96]	; (10e10 <log_init+0x64>)
   10dae:	f3bf 8f5b 	dmb	ish
   10db2:	e853 2f00 	ldrex	r2, [r3]
   10db6:	1c51      	adds	r1, r2, #1
   10db8:	e843 1000 	strex	r0, r1, [r3]
   10dbc:	2800      	cmp	r0, #0
   10dbe:	d1f8      	bne.n	10db2 <log_init+0x6>
   10dc0:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
   10dc4:	bb1a      	cbnz	r2, 10e0e <log_init+0x62>
{
   10dc6:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < log_backend_count_get(); i++) {
   10dc8:	2400      	movs	r4, #0
   10dca:	e009      	b.n	10de0 <log_init+0x34>
					   backend->cb->ctx,
   10dcc:	4b11      	ldr	r3, [pc, #68]	; (10e14 <log_init+0x68>)
   10dce:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   10dd2:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
   10dd4:	2204      	movs	r2, #4
   10dd6:	6819      	ldr	r1, [r3, #0]
   10dd8:	4628      	mov	r0, r5
   10dda:	f7ff ffc9 	bl	10d70 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   10dde:	3401      	adds	r4, #1
   10de0:	4b0d      	ldr	r3, [pc, #52]	; (10e18 <log_init+0x6c>)
   10de2:	4a0c      	ldr	r2, [pc, #48]	; (10e14 <log_init+0x68>)
   10de4:	1a9b      	subs	r3, r3, r2
   10de6:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   10dea:	da0f      	bge.n	10e0c <log_init+0x60>
		const struct log_backend *backend = log_backend_get(i);
   10dec:	4626      	mov	r6, r4
	return &__log_backends_start[idx];
   10dee:	4d09      	ldr	r5, [pc, #36]	; (10e14 <log_init+0x68>)
   10df0:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
   10df4:	7b2b      	ldrb	r3, [r5, #12]
   10df6:	2b00      	cmp	r3, #0
   10df8:	d0f1      	beq.n	10dde <log_init+0x32>
			if (backend->api->init != NULL) {
   10dfa:	0123      	lsls	r3, r4, #4
   10dfc:	4a05      	ldr	r2, [pc, #20]	; (10e14 <log_init+0x68>)
   10dfe:	58d3      	ldr	r3, [r2, r3]
   10e00:	699b      	ldr	r3, [r3, #24]
   10e02:	2b00      	cmp	r3, #0
   10e04:	d0e2      	beq.n	10dcc <log_init+0x20>
				backend->api->init(backend);
   10e06:	4628      	mov	r0, r5
   10e08:	4798      	blx	r3
   10e0a:	e7df      	b.n	10dcc <log_init+0x20>
}
   10e0c:	bd70      	pop	{r4, r5, r6, pc}
   10e0e:	4770      	bx	lr
   10e10:	20002434 	.word	0x20002434
   10e14:	00029fe4 	.word	0x00029fe4
   10e18:	00029ff4 	.word	0x00029ff4

00010e1c <z_log_strdup>:
{
   10e1c:	b510      	push	{r4, lr}
   10e1e:	b082      	sub	sp, #8
   10e20:	4604      	mov	r4, r0
	    is_rodata(str) || k_is_user_context()) {
   10e22:	f7ff fead 	bl	10b80 <is_rodata>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   10e26:	bb10      	cbnz	r0, 10e6e <z_log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   10e28:	2200      	movs	r2, #0
   10e2a:	2300      	movs	r3, #0
   10e2c:	a901      	add	r1, sp, #4
   10e2e:	4811      	ldr	r0, [pc, #68]	; (10e74 <z_log_strdup+0x58>)
   10e30:	f00e fc7e 	bl	1f730 <k_mem_slab_alloc>
	if (err != 0) {
   10e34:	b108      	cbz	r0, 10e3a <z_log_strdup+0x1e>
		return (char *)log_strdup_fail_msg;
   10e36:	4c10      	ldr	r4, [pc, #64]	; (10e78 <z_log_strdup+0x5c>)
   10e38:	e019      	b.n	10e6e <z_log_strdup+0x52>
	(void)atomic_set(&dup->refcount, 1);
   10e3a:	9b01      	ldr	r3, [sp, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   10e3c:	2201      	movs	r2, #1
   10e3e:	f3bf 8f5b 	dmb	ish
   10e42:	e853 1f00 	ldrex	r1, [r3]
   10e46:	e843 2000 	strex	r0, r2, [r3]
   10e4a:	2800      	cmp	r0, #0
   10e4c:	d1f9      	bne.n	10e42 <z_log_strdup+0x26>
   10e4e:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   10e52:	2241      	movs	r2, #65	; 0x41
   10e54:	4621      	mov	r1, r4
   10e56:	9801      	ldr	r0, [sp, #4]
   10e58:	3004      	adds	r0, #4
   10e5a:	f013 fd9f 	bl	2499c <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   10e5e:	9c01      	ldr	r4, [sp, #4]
   10e60:	237e      	movs	r3, #126	; 0x7e
   10e62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   10e66:	2300      	movs	r3, #0
   10e68:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	return dup->buf;
   10e6c:	3404      	adds	r4, #4
}
   10e6e:	4620      	mov	r0, r4
   10e70:	b002      	add	sp, #8
   10e72:	bd10      	pop	{r4, pc}
   10e74:	20002440 	.word	0x20002440
   10e78:	0002a4b8 	.word	0x0002a4b8

00010e7c <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
   10e7c:	b140      	cbz	r0, 10e90 <log_is_strdup+0x14>
   10e7e:	4a07      	ldr	r2, [pc, #28]	; (10e9c <log_is_strdup+0x20>)
   10e80:	4290      	cmp	r0, r2
   10e82:	d307      	bcc.n	10e94 <log_is_strdup+0x18>
   10e84:	f502 7210 	add.w	r2, r2, #576	; 0x240
   10e88:	4290      	cmp	r0, r2
   10e8a:	d305      	bcc.n	10e98 <log_is_strdup+0x1c>
   10e8c:	2000      	movs	r0, #0
   10e8e:	4770      	bx	lr
   10e90:	2000      	movs	r0, #0
   10e92:	4770      	bx	lr
   10e94:	2000      	movs	r0, #0
   10e96:	4770      	bx	lr
   10e98:	2001      	movs	r0, #1
}
   10e9a:	4770      	bx	lr
   10e9c:	200074f0 	.word	0x200074f0

00010ea0 <detect_missed_strdup>:
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   10ea0:	7a03      	ldrb	r3, [r0, #8]
	if (!log_msg_is_std(msg)) {
   10ea2:	f013 0f01 	tst.w	r3, #1
   10ea6:	d000      	beq.n	10eaa <detect_missed_strdup+0xa>
   10ea8:	4770      	bx	lr
{
   10eaa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10eae:	b083      	sub	sp, #12
   10eb0:	4606      	mov	r6, r0
	msg_str = log_msg_str_get(msg);
   10eb2:	f011 fa0a 	bl	222ca <log_msg_str_get>
   10eb6:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   10eb8:	4630      	mov	r0, r6
   10eba:	f011 f9f1 	bl	222a0 <log_msg_nargs_get>
   10ebe:	4601      	mov	r1, r0
   10ec0:	4638      	mov	r0, r7
   10ec2:	f011 f925 	bl	22110 <z_log_get_s_mask>
   10ec6:	4605      	mov	r5, r0
	while (mask) {
   10ec8:	e004      	b.n	10ed4 <detect_missed_strdup+0x34>
		mask &= ~BIT(idx);
   10eca:	2301      	movs	r3, #1
   10ecc:	fa03 f404 	lsl.w	r4, r3, r4
   10ed0:	ea25 0504 	bic.w	r5, r5, r4
	while (mask) {
   10ed4:	b36d      	cbz	r5, 10f32 <detect_missed_strdup+0x92>
		idx = 31 - __builtin_clz(mask);
   10ed6:	fab5 f485 	clz	r4, r5
   10eda:	f1c4 041f 	rsb	r4, r4, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   10ede:	4621      	mov	r1, r4
   10ee0:	4630      	mov	r0, r6
   10ee2:	f011 f9e0 	bl	222a6 <log_msg_arg_get>
   10ee6:	4681      	mov	r9, r0
		if (!is_rodata(str) && !log_is_strdup(str) &&
   10ee8:	f7ff fe4a 	bl	10b80 <is_rodata>
   10eec:	2800      	cmp	r0, #0
   10eee:	d1ec      	bne.n	10eca <detect_missed_strdup+0x2a>
   10ef0:	4648      	mov	r0, r9
   10ef2:	f7ff ffc3 	bl	10e7c <log_is_strdup>
   10ef6:	2800      	cmp	r0, #0
   10ef8:	d1e7      	bne.n	10eca <detect_missed_strdup+0x2a>
   10efa:	4b0f      	ldr	r3, [pc, #60]	; (10f38 <detect_missed_strdup+0x98>)
   10efc:	4599      	cmp	r9, r3
   10efe:	d0e4      	beq.n	10eca <detect_missed_strdup+0x2a>
	return msg->hdr.ids.source_id;
   10f00:	8971      	ldrh	r1, [r6, #10]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
   10f02:	f3c1 1189 	ubfx	r1, r1, #6, #10
   10f06:	f7ff ff23 	bl	10d50 <log_source_name_get>
   10f0a:	4602      	mov	r2, r0
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   10f0c:	4b0b      	ldr	r3, [pc, #44]	; (10f3c <detect_missed_strdup+0x9c>)
   10f0e:	490c      	ldr	r1, [pc, #48]	; (10f40 <detect_missed_strdup+0xa0>)
   10f10:	1a5b      	subs	r3, r3, r1
   10f12:	08db      	lsrs	r3, r3, #3
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   10f14:	2101      	movs	r1, #1
   10f16:	f361 0802 	bfi	r8, r1, #0, #3
   10f1a:	f36f 08c5 	bfc	r8, #3, #3
   10f1e:	f363 188f 	bfi	r8, r3, #6, #10
   10f22:	f8ad 8000 	strh.w	r8, [sp]
   10f26:	463b      	mov	r3, r7
   10f28:	4621      	mov	r1, r4
   10f2a:	4806      	ldr	r0, [pc, #24]	; (10f44 <detect_missed_strdup+0xa4>)
   10f2c:	f000 f8b2 	bl	11094 <log_3>
   10f30:	e7cb      	b.n	10eca <detect_missed_strdup+0x2a>
}
   10f32:	b003      	add	sp, #12
   10f34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10f38:	0002a4b8 	.word	0x0002a4b8
   10f3c:	00029f7c 	.word	0x00029f7c
   10f40:	00029ecc 	.word	0x00029ecc
   10f44:	0002a4d4 	.word	0x0002a4d4

00010f48 <msg_process>:
{
   10f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10f4a:	4606      	mov	r6, r0
	if (!bypass) {
   10f4c:	bb19      	cbnz	r1, 10f96 <msg_process+0x4e>
		    !panic_mode) {
   10f4e:	4b14      	ldr	r3, [pc, #80]	; (10fa0 <msg_process+0x58>)
   10f50:	781b      	ldrb	r3, [r3, #0]
		if (!IS_ENABLED(CONFIG_LOG2) &&
   10f52:	b10b      	cbz	r3, 10f58 <msg_process+0x10>
{
   10f54:	2400      	movs	r4, #0
   10f56:	e003      	b.n	10f60 <msg_process+0x18>
			detect_missed_strdup(msg.msg);
   10f58:	f7ff ffa2 	bl	10ea0 <detect_missed_strdup>
   10f5c:	e7fa      	b.n	10f54 <msg_process+0xc>
		for (int i = 0; i < log_backend_count_get(); i++) {
   10f5e:	3401      	adds	r4, #1
   10f60:	4b10      	ldr	r3, [pc, #64]	; (10fa4 <msg_process+0x5c>)
   10f62:	4a11      	ldr	r2, [pc, #68]	; (10fa8 <msg_process+0x60>)
   10f64:	1a9b      	subs	r3, r3, r2
   10f66:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   10f6a:	da14      	bge.n	10f96 <msg_process+0x4e>
   10f6c:	4d0e      	ldr	r5, [pc, #56]	; (10fa8 <msg_process+0x60>)
   10f6e:	eb05 1504 	add.w	r5, r5, r4, lsl #4
	return backend->cb->active;
   10f72:	686b      	ldr	r3, [r5, #4]
   10f74:	795b      	ldrb	r3, [r3, #5]
			if (log_backend_is_active(backend) &&
   10f76:	2b00      	cmp	r3, #0
   10f78:	d0f1      	beq.n	10f5e <msg_process+0x16>
			    msg_filter_check(backend, msg)) {
   10f7a:	4631      	mov	r1, r6
   10f7c:	4628      	mov	r0, r5
   10f7e:	f011 f8c1 	bl	22104 <msg_filter_check>
			if (log_backend_is_active(backend) &&
   10f82:	2800      	cmp	r0, #0
   10f84:	d0eb      	beq.n	10f5e <msg_process+0x16>
	backend->api->put(backend, msg);
   10f86:	0127      	lsls	r7, r4, #4
   10f88:	4b07      	ldr	r3, [pc, #28]	; (10fa8 <msg_process+0x60>)
   10f8a:	59db      	ldr	r3, [r3, r7]
   10f8c:	685b      	ldr	r3, [r3, #4]
   10f8e:	4631      	mov	r1, r6
   10f90:	4628      	mov	r0, r5
   10f92:	4798      	blx	r3
}
   10f94:	e7e3      	b.n	10f5e <msg_process+0x16>
			log_msg_put(msg.msg);
   10f96:	4630      	mov	r0, r6
   10f98:	f011 f999 	bl	222ce <log_msg_put>
}
   10f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10f9e:	bf00      	nop
   10fa0:	20003987 	.word	0x20003987
   10fa4:	00029ff4 	.word	0x00029ff4
   10fa8:	00029fe4 	.word	0x00029fe4

00010fac <z_impl_log_process>:
{
   10fac:	b510      	push	{r4, lr}
   10fae:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
   10fb0:	4b10      	ldr	r3, [pc, #64]	; (10ff4 <z_impl_log_process+0x48>)
   10fb2:	781b      	ldrb	r3, [r3, #0]
   10fb4:	b903      	cbnz	r3, 10fb8 <z_impl_log_process+0xc>
   10fb6:	b1c8      	cbz	r0, 10fec <z_impl_log_process+0x40>
	msg = get_msg();
   10fb8:	f7ff fe6a 	bl	10c90 <get_msg>
	if (msg.msg) {
   10fbc:	4602      	mov	r2, r0
   10fbe:	b178      	cbz	r0, 10fe0 <z_impl_log_process+0x34>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   10fc0:	4b0d      	ldr	r3, [pc, #52]	; (10ff8 <z_impl_log_process+0x4c>)
   10fc2:	f3bf 8f5b 	dmb	ish
   10fc6:	e853 1f00 	ldrex	r1, [r3]
   10fca:	3901      	subs	r1, #1
   10fcc:	e843 1000 	strex	r0, r1, [r3]
   10fd0:	2800      	cmp	r0, #0
   10fd2:	d1f8      	bne.n	10fc6 <z_impl_log_process+0x1a>
   10fd4:	f3bf 8f5b 	dmb	ish
		msg_process(msg, bypass);
   10fd8:	4621      	mov	r1, r4
   10fda:	4610      	mov	r0, r2
   10fdc:	f7ff ffb4 	bl	10f48 <msg_process>
	if (!bypass && z_log_dropped_pending()) {
   10fe0:	b914      	cbnz	r4, 10fe8 <z_impl_log_process+0x3c>
   10fe2:	f7ff feab 	bl	10d3c <z_log_dropped_pending>
   10fe6:	b910      	cbnz	r0, 10fee <z_impl_log_process+0x42>
	return next_pending();
   10fe8:	f7ff fdf6 	bl	10bd8 <next_pending>
}
   10fec:	bd10      	pop	{r4, pc}
		dropped_notify();
   10fee:	f7ff fe83 	bl	10cf8 <dropped_notify>
   10ff2:	e7f9      	b.n	10fe8 <z_impl_log_process+0x3c>
   10ff4:	20003986 	.word	0x20003986
   10ff8:	2000242c 	.word	0x2000242c

00010ffc <z_log_msg_post_finalize>:
{
   10ffc:	b510      	push	{r4, lr}
   10ffe:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   11000:	4b1f      	ldr	r3, [pc, #124]	; (11080 <z_log_msg_post_finalize+0x84>)
   11002:	f3bf 8f5b 	dmb	ish
   11006:	e853 2f00 	ldrex	r2, [r3]
   1100a:	3201      	adds	r2, #1
   1100c:	e843 2100 	strex	r1, r2, [r3]
   11010:	2900      	cmp	r1, #0
   11012:	d1f8      	bne.n	11006 <z_log_msg_post_finalize+0xa>
   11014:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
   11018:	4b1a      	ldr	r3, [pc, #104]	; (11084 <z_log_msg_post_finalize+0x88>)
   1101a:	781b      	ldrb	r3, [r3, #0]
   1101c:	b963      	cbnz	r3, 11038 <z_log_msg_post_finalize+0x3c>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
   1101e:	4b1a      	ldr	r3, [pc, #104]	; (11088 <z_log_msg_post_finalize+0x8c>)
   11020:	681b      	ldr	r3, [r3, #0]
   11022:	b11b      	cbz	r3, 1102c <z_log_msg_post_finalize+0x30>
   11024:	4a16      	ldr	r2, [pc, #88]	; (11080 <z_log_msg_post_finalize+0x84>)
   11026:	6812      	ldr	r2, [r2, #0]
   11028:	2a01      	cmp	r2, #1
   1102a:	d015      	beq.n	11058 <z_log_msg_post_finalize+0x5c>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   1102c:	4a14      	ldr	r2, [pc, #80]	; (11080 <z_log_msg_post_finalize+0x84>)
   1102e:	6812      	ldr	r2, [r2, #0]
   11030:	2a0a      	cmp	r2, #10
   11032:	d01c      	beq.n	1106e <z_log_msg_post_finalize+0x72>
}
   11034:	b002      	add	sp, #8
   11036:	bd10      	pop	{r4, pc}
	__asm__ volatile(
   11038:	f04f 0340 	mov.w	r3, #64	; 0x40
   1103c:	f3ef 8411 	mrs	r4, BASEPRI
   11040:	f383 8811 	msr	BASEPRI, r3
   11044:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
   11048:	2000      	movs	r0, #0
   1104a:	f7ff ffaf 	bl	10fac <z_impl_log_process>
	__asm__ volatile(
   1104e:	f384 8811 	msr	BASEPRI, r4
   11052:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   11056:	e7ed      	b.n	11034 <z_log_msg_post_finalize+0x38>
	z_impl_k_timer_start(timer, duration, period);
   11058:	2200      	movs	r2, #0
   1105a:	2300      	movs	r3, #0
   1105c:	e9cd 2300 	strd	r2, r3, [sp]
   11060:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   11064:	2300      	movs	r3, #0
   11066:	4809      	ldr	r0, [pc, #36]	; (1108c <z_log_msg_post_finalize+0x90>)
   11068:	f00f fe72 	bl	20d50 <z_impl_k_timer_start>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
   1106c:	e7e2      	b.n	11034 <z_log_msg_post_finalize+0x38>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   1106e:	2b00      	cmp	r3, #0
   11070:	d0e0      	beq.n	11034 <z_log_msg_post_finalize+0x38>
	z_impl_k_timer_stop(timer);
   11072:	4806      	ldr	r0, [pc, #24]	; (1108c <z_log_msg_post_finalize+0x90>)
   11074:	f018 fd07 	bl	29a86 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   11078:	4805      	ldr	r0, [pc, #20]	; (11090 <z_log_msg_post_finalize+0x94>)
   1107a:	f00e fe5d 	bl	1fd38 <z_impl_k_sem_give>
}
   1107e:	e7d9      	b.n	11034 <z_log_msg_post_finalize+0x38>
   11080:	2000242c 	.word	0x2000242c
   11084:	20003987 	.word	0x20003987
   11088:	2000245c 	.word	0x2000245c
   1108c:	200014e0 	.word	0x200014e0
   11090:	2000078c 	.word	0x2000078c

00011094 <log_3>:
{
   11094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11098:	4680      	mov	r8, r0
   1109a:	460f      	mov	r7, r1
   1109c:	4616      	mov	r6, r2
   1109e:	461d      	mov	r5, r3
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   110a0:	f000 f9e0 	bl	11464 <log_msg_chunk_alloc>

	if (msg != NULL) {
   110a4:	4604      	mov	r4, r0
   110a6:	b140      	cbz	r0, 110ba <log_3+0x26>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   110a8:	2301      	movs	r3, #1
   110aa:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   110ac:	2200      	movs	r2, #0
   110ae:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   110b0:	f04f 0300 	mov.w	r3, #0
   110b4:	f362 0300 	bfi	r3, r2, #0, #1
   110b8:	7203      	strb	r3, [r0, #8]
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();

	if (msg != NULL) {
   110ba:	b14c      	cbz	r4, 110d0 <log_3+0x3c>
		msg->str = str;
   110bc:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = 3U;
   110c0:	7a63      	ldrb	r3, [r4, #9]
   110c2:	2203      	movs	r2, #3
   110c4:	f362 1307 	bfi	r3, r2, #4, #4
   110c8:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
   110ca:	6167      	str	r7, [r4, #20]
		msg->payload.single.args[1] = arg2;
   110cc:	61a6      	str	r6, [r4, #24]
		msg->payload.single.args[2] = arg3;
   110ce:	61e5      	str	r5, [r4, #28]
		if (msg == NULL) {
   110d0:	b1c4      	cbz	r4, 11104 <log_3+0x70>
	msg->hdr.ids = src_level;
   110d2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   110d6:	8163      	strh	r3, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
   110d8:	4b0b      	ldr	r3, [pc, #44]	; (11108 <log_3+0x74>)
   110da:	681b      	ldr	r3, [r3, #0]
   110dc:	4798      	blx	r3
   110de:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   110e0:	f04f 0340 	mov.w	r3, #64	; 0x40
   110e4:	f3ef 8511 	mrs	r5, BASEPRI
   110e8:	f383 8811 	msr	BASEPRI, r3
   110ec:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   110f0:	4621      	mov	r1, r4
   110f2:	4806      	ldr	r0, [pc, #24]	; (1110c <log_3+0x78>)
   110f4:	f010 fff2 	bl	220dc <log_list_add_tail>
	__asm__ volatile(
   110f8:	f385 8811 	msr	BASEPRI, r5
   110fc:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   11100:	f7ff ff7c 	bl	10ffc <z_log_msg_post_finalize>
}
   11104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11108:	20000474 	.word	0x20000474
   1110c:	20002438 	.word	0x20002438

00011110 <log_1>:
{
   11110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11112:	4606      	mov	r6, r0
   11114:	460d      	mov	r5, r1
   11116:	4617      	mov	r7, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   11118:	f000 f9a4 	bl	11464 <log_msg_chunk_alloc>
	if (msg != NULL) {
   1111c:	4604      	mov	r4, r0
   1111e:	b140      	cbz	r0, 11132 <log_1+0x22>
		msg->hdr.ref_cnt = 1;
   11120:	2301      	movs	r3, #1
   11122:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   11124:	2100      	movs	r1, #0
   11126:	8101      	strh	r1, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   11128:	f04f 0300 	mov.w	r3, #0
   1112c:	f361 0300 	bfi	r3, r1, #0, #1
   11130:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
   11132:	b134      	cbz	r4, 11142 <log_1+0x32>
		msg->str = str;
   11134:	6126      	str	r6, [r4, #16]
		msg->hdr.params.std.nargs = 1U;
   11136:	7a63      	ldrb	r3, [r4, #9]
   11138:	2201      	movs	r2, #1
   1113a:	f362 1307 	bfi	r3, r2, #4, #4
   1113e:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
   11140:	6165      	str	r5, [r4, #20]
		if (msg == NULL) {
   11142:	b1b4      	cbz	r4, 11172 <log_1+0x62>
	msg->hdr.ids = src_level;
   11144:	8167      	strh	r7, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
   11146:	4b0b      	ldr	r3, [pc, #44]	; (11174 <log_1+0x64>)
   11148:	681b      	ldr	r3, [r3, #0]
   1114a:	4798      	blx	r3
   1114c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1114e:	f04f 0340 	mov.w	r3, #64	; 0x40
   11152:	f3ef 8511 	mrs	r5, BASEPRI
   11156:	f383 8811 	msr	BASEPRI, r3
   1115a:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   1115e:	4621      	mov	r1, r4
   11160:	4805      	ldr	r0, [pc, #20]	; (11178 <log_1+0x68>)
   11162:	f010 ffbb 	bl	220dc <log_list_add_tail>
	__asm__ volatile(
   11166:	f385 8811 	msr	BASEPRI, r5
   1116a:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   1116e:	f7ff ff45 	bl	10ffc <z_log_msg_post_finalize>
}
   11172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11174:	20000474 	.word	0x20000474
   11178:	20002438 	.word	0x20002438

0001117c <log_2>:
{
   1117c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11180:	4607      	mov	r7, r0
   11182:	460e      	mov	r6, r1
   11184:	4615      	mov	r5, r2
   11186:	4698      	mov	r8, r3
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   11188:	f000 f96c 	bl	11464 <log_msg_chunk_alloc>
	if (msg != NULL) {
   1118c:	4604      	mov	r4, r0
   1118e:	b140      	cbz	r0, 111a2 <log_2+0x26>
		msg->hdr.ref_cnt = 1;
   11190:	2301      	movs	r3, #1
   11192:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   11194:	2200      	movs	r2, #0
   11196:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   11198:	f04f 0300 	mov.w	r3, #0
   1119c:	f362 0300 	bfi	r3, r2, #0, #1
   111a0:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
   111a2:	b13c      	cbz	r4, 111b4 <log_2+0x38>
		msg->str = str;
   111a4:	6127      	str	r7, [r4, #16]
		msg->hdr.params.std.nargs = 2U;
   111a6:	7a63      	ldrb	r3, [r4, #9]
   111a8:	2202      	movs	r2, #2
   111aa:	f362 1307 	bfi	r3, r2, #4, #4
   111ae:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
   111b0:	6166      	str	r6, [r4, #20]
		msg->payload.single.args[1] = arg2;
   111b2:	61a5      	str	r5, [r4, #24]
		if (msg == NULL) {
   111b4:	b1bc      	cbz	r4, 111e6 <log_2+0x6a>
	msg->hdr.ids = src_level;
   111b6:	f8a4 800a 	strh.w	r8, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
   111ba:	4b0c      	ldr	r3, [pc, #48]	; (111ec <log_2+0x70>)
   111bc:	681b      	ldr	r3, [r3, #0]
   111be:	4798      	blx	r3
   111c0:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   111c2:	f04f 0340 	mov.w	r3, #64	; 0x40
   111c6:	f3ef 8511 	mrs	r5, BASEPRI
   111ca:	f383 8811 	msr	BASEPRI, r3
   111ce:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   111d2:	4621      	mov	r1, r4
   111d4:	4806      	ldr	r0, [pc, #24]	; (111f0 <log_2+0x74>)
   111d6:	f010 ff81 	bl	220dc <log_list_add_tail>
	__asm__ volatile(
   111da:	f385 8811 	msr	BASEPRI, r5
   111de:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   111e2:	f7ff ff0b 	bl	10ffc <z_log_msg_post_finalize>
}
   111e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   111ea:	bf00      	nop
   111ec:	20000474 	.word	0x20000474
   111f0:	20002438 	.word	0x20002438

000111f4 <log_n>:
{
   111f4:	b538      	push	{r3, r4, r5, lr}
   111f6:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   111f8:	f011 f8ad 	bl	22356 <log_msg_create_n>
		if (msg == NULL) {
   111fc:	b1b8      	cbz	r0, 1122e <log_n+0x3a>
   111fe:	4605      	mov	r5, r0
	msg->hdr.ids = src_level;
   11200:	8144      	strh	r4, [r0, #10]
	msg->hdr.timestamp = timestamp_func();
   11202:	4b0b      	ldr	r3, [pc, #44]	; (11230 <log_n+0x3c>)
   11204:	681b      	ldr	r3, [r3, #0]
   11206:	4798      	blx	r3
   11208:	60e8      	str	r0, [r5, #12]
	__asm__ volatile(
   1120a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1120e:	f3ef 8411 	mrs	r4, BASEPRI
   11212:	f383 8811 	msr	BASEPRI, r3
   11216:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   1121a:	4629      	mov	r1, r5
   1121c:	4805      	ldr	r0, [pc, #20]	; (11234 <log_n+0x40>)
   1121e:	f010 ff5d 	bl	220dc <log_list_add_tail>
	__asm__ volatile(
   11222:	f384 8811 	msr	BASEPRI, r4
   11226:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   1122a:	f7ff fee7 	bl	10ffc <z_log_msg_post_finalize>
}
   1122e:	bd38      	pop	{r3, r4, r5, pc}
   11230:	20000474 	.word	0x20000474
   11234:	20002438 	.word	0x20002438

00011238 <log_hexdump>:
{
   11238:	b538      	push	{r3, r4, r5, lr}
   1123a:	461c      	mov	r4, r3
			log_msg_hexdump_create(str, (const uint8_t *)data, length);
   1123c:	f011 f89f 	bl	2237e <log_msg_hexdump_create>
		if (msg == NULL) {
   11240:	b1b8      	cbz	r0, 11272 <log_hexdump+0x3a>
   11242:	4605      	mov	r5, r0
	msg->hdr.ids = src_level;
   11244:	8144      	strh	r4, [r0, #10]
	msg->hdr.timestamp = timestamp_func();
   11246:	4b0b      	ldr	r3, [pc, #44]	; (11274 <log_hexdump+0x3c>)
   11248:	681b      	ldr	r3, [r3, #0]
   1124a:	4798      	blx	r3
   1124c:	60e8      	str	r0, [r5, #12]
	__asm__ volatile(
   1124e:	f04f 0340 	mov.w	r3, #64	; 0x40
   11252:	f3ef 8411 	mrs	r4, BASEPRI
   11256:	f383 8811 	msr	BASEPRI, r3
   1125a:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   1125e:	4629      	mov	r1, r5
   11260:	4805      	ldr	r0, [pc, #20]	; (11278 <log_hexdump+0x40>)
   11262:	f010 ff3b 	bl	220dc <log_list_add_tail>
	__asm__ volatile(
   11266:	f384 8811 	msr	BASEPRI, r4
   1126a:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   1126e:	f7ff fec5 	bl	10ffc <z_log_msg_post_finalize>
}
   11272:	bd38      	pop	{r3, r4, r5, pc}
   11274:	20000474 	.word	0x20000474
   11278:	20002438 	.word	0x20002438

0001127c <log_0>:
{
   1127c:	b570      	push	{r4, r5, r6, lr}
   1127e:	4605      	mov	r5, r0
   11280:	460e      	mov	r6, r1
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   11282:	f000 f8ef 	bl	11464 <log_msg_chunk_alloc>
	if (msg != NULL) {
   11286:	4604      	mov	r4, r0
   11288:	b140      	cbz	r0, 1129c <log_0+0x20>
		msg->hdr.ref_cnt = 1;
   1128a:	2301      	movs	r3, #1
   1128c:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1128e:	2200      	movs	r2, #0
   11290:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   11292:	f04f 0300 	mov.w	r3, #0
   11296:	f362 0300 	bfi	r3, r2, #0, #1
   1129a:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
   1129c:	b104      	cbz	r4, 112a0 <log_0+0x24>
		msg->str = str;
   1129e:	6125      	str	r5, [r4, #16]
		if (msg == NULL) {
   112a0:	b1b4      	cbz	r4, 112d0 <log_0+0x54>
	msg->hdr.ids = src_level;
   112a2:	8166      	strh	r6, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
   112a4:	4b0b      	ldr	r3, [pc, #44]	; (112d4 <log_0+0x58>)
   112a6:	681b      	ldr	r3, [r3, #0]
   112a8:	4798      	blx	r3
   112aa:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   112ac:	f04f 0340 	mov.w	r3, #64	; 0x40
   112b0:	f3ef 8511 	mrs	r5, BASEPRI
   112b4:	f383 8811 	msr	BASEPRI, r3
   112b8:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   112bc:	4621      	mov	r1, r4
   112be:	4806      	ldr	r0, [pc, #24]	; (112d8 <log_0+0x5c>)
   112c0:	f010 ff0c 	bl	220dc <log_list_add_tail>
	__asm__ volatile(
   112c4:	f385 8811 	msr	BASEPRI, r5
   112c8:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   112cc:	f7ff fe96 	bl	10ffc <z_log_msg_post_finalize>
}
   112d0:	bd70      	pop	{r4, r5, r6, pc}
   112d2:	bf00      	nop
   112d4:	20000474 	.word	0x20000474
   112d8:	20002438 	.word	0x20002438

000112dc <z_log_printk>:
{
   112dc:	b530      	push	{r4, r5, lr}
   112de:	b0a3      	sub	sp, #140	; 0x8c
   112e0:	4602      	mov	r2, r0
   112e2:	460b      	mov	r3, r1
		} src_level_union = {
   112e4:	2500      	movs	r5, #0
			length = vsnprintk(str, sizeof(str), fmt, ap);
   112e6:	2181      	movs	r1, #129	; 0x81
   112e8:	a801      	add	r0, sp, #4
   112ea:	f7fe fe9d 	bl	10028 <vsnprintk>
			msg = log_msg_hexdump_create(NULL, str, length);
   112ee:	4602      	mov	r2, r0
   112f0:	2881      	cmp	r0, #129	; 0x81
   112f2:	bf28      	it	cs
   112f4:	2281      	movcs	r2, #129	; 0x81
   112f6:	a901      	add	r1, sp, #4
   112f8:	4628      	mov	r0, r5
   112fa:	f011 f840 	bl	2237e <log_msg_hexdump_create>
			if (msg == NULL) {
   112fe:	b1b8      	cbz	r0, 11330 <z_log_printk+0x54>
   11300:	4604      	mov	r4, r0
	msg->hdr.ids = src_level;
   11302:	8145      	strh	r5, [r0, #10]
	msg->hdr.timestamp = timestamp_func();
   11304:	4b0b      	ldr	r3, [pc, #44]	; (11334 <z_log_printk+0x58>)
   11306:	681b      	ldr	r3, [r3, #0]
   11308:	4798      	blx	r3
   1130a:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1130c:	f04f 0340 	mov.w	r3, #64	; 0x40
   11310:	f3ef 8511 	mrs	r5, BASEPRI
   11314:	f383 8811 	msr	BASEPRI, r3
   11318:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   1131c:	4621      	mov	r1, r4
   1131e:	4806      	ldr	r0, [pc, #24]	; (11338 <z_log_printk+0x5c>)
   11320:	f010 fedc 	bl	220dc <log_list_add_tail>
	__asm__ volatile(
   11324:	f385 8811 	msr	BASEPRI, r5
   11328:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   1132c:	f7ff fe66 	bl	10ffc <z_log_msg_post_finalize>
}
   11330:	b023      	add	sp, #140	; 0x8c
   11332:	bd30      	pop	{r4, r5, pc}
   11334:	20000474 	.word	0x20000474
   11338:	20002438 	.word	0x20002438

0001133c <z_impl_log_panic>:
	if (panic_mode) {
   1133c:	4b12      	ldr	r3, [pc, #72]	; (11388 <z_impl_log_panic+0x4c>)
   1133e:	781b      	ldrb	r3, [r3, #0]
   11340:	b103      	cbz	r3, 11344 <z_impl_log_panic+0x8>
   11342:	4770      	bx	lr
{
   11344:	b510      	push	{r4, lr}
	log_init();
   11346:	f7ff fd31 	bl	10dac <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
   1134a:	2400      	movs	r4, #0
   1134c:	e000      	b.n	11350 <z_impl_log_panic+0x14>
   1134e:	3401      	adds	r4, #1
   11350:	4b0e      	ldr	r3, [pc, #56]	; (1138c <z_impl_log_panic+0x50>)
   11352:	4a0f      	ldr	r2, [pc, #60]	; (11390 <z_impl_log_panic+0x54>)
   11354:	1a9b      	subs	r3, r3, r2
   11356:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   1135a:	da0c      	bge.n	11376 <z_impl_log_panic+0x3a>
	return &__log_backends_start[idx];
   1135c:	480c      	ldr	r0, [pc, #48]	; (11390 <z_impl_log_panic+0x54>)
   1135e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
   11362:	6843      	ldr	r3, [r0, #4]
   11364:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
   11366:	2b00      	cmp	r3, #0
   11368:	d0f1      	beq.n	1134e <z_impl_log_panic+0x12>
	backend->api->panic(backend);
   1136a:	0123      	lsls	r3, r4, #4
   1136c:	4a08      	ldr	r2, [pc, #32]	; (11390 <z_impl_log_panic+0x54>)
   1136e:	58d3      	ldr	r3, [r2, r3]
   11370:	695b      	ldr	r3, [r3, #20]
   11372:	4798      	blx	r3
}
   11374:	e7eb      	b.n	1134e <z_impl_log_panic+0x12>
   11376:	2000      	movs	r0, #0
   11378:	f7ff fe18 	bl	10fac <z_impl_log_process>
		while (log_process(false) == true) {
   1137c:	2800      	cmp	r0, #0
   1137e:	d1fa      	bne.n	11376 <z_impl_log_panic+0x3a>
	panic_mode = true;
   11380:	4b01      	ldr	r3, [pc, #4]	; (11388 <z_impl_log_panic+0x4c>)
   11382:	2201      	movs	r2, #1
   11384:	701a      	strb	r2, [r3, #0]
}
   11386:	bd10      	pop	{r4, pc}
   11388:	20003987 	.word	0x20003987
   1138c:	00029ff4 	.word	0x00029ff4
   11390:	00029fe4 	.word	0x00029fe4

00011394 <log_process_thread_func>:
{
   11394:	b508      	push	{r3, lr}
	log_init();
   11396:	f7ff fd09 	bl	10dac <log_init>
	return z_impl_k_current_get();
   1139a:	f00f fad1 	bl	20940 <z_impl_k_current_get>
	thread_set(k_current_get());
   1139e:	f7ff fbff 	bl	10ba0 <thread_set>
   113a2:	e006      	b.n	113b2 <log_process_thread_func+0x1e>
	return z_impl_k_sem_take(sem, timeout);
   113a4:	f04f 32ff 	mov.w	r2, #4294967295
   113a8:	f04f 33ff 	mov.w	r3, #4294967295
   113ac:	4804      	ldr	r0, [pc, #16]	; (113c0 <log_process_thread_func+0x2c>)
   113ae:	f00e fceb 	bl	1fd88 <z_impl_k_sem_take>
   113b2:	2000      	movs	r0, #0
   113b4:	f7ff fdfa 	bl	10fac <z_impl_log_process>
		if (log_process(false) == false) {
   113b8:	2800      	cmp	r0, #0
   113ba:	d1fa      	bne.n	113b2 <log_process_thread_func+0x1e>
   113bc:	e7f2      	b.n	113a4 <log_process_thread_func+0x10>
   113be:	bf00      	nop
   113c0:	2000078c 	.word	0x2000078c

000113c4 <log_free>:
{
   113c4:	b500      	push	{lr}
   113c6:	b083      	sub	sp, #12
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   113c8:	3804      	subs	r0, #4
   113ca:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   113cc:	f3bf 8f5b 	dmb	ish
   113d0:	e850 3f00 	ldrex	r3, [r0]
   113d4:	1e5a      	subs	r2, r3, #1
   113d6:	e840 2100 	strex	r1, r2, [r0]
   113da:	2900      	cmp	r1, #0
   113dc:	d1f8      	bne.n	113d0 <log_free+0xc>
   113de:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
   113e2:	2b01      	cmp	r3, #1
   113e4:	d002      	beq.n	113ec <log_free+0x28>
}
   113e6:	b003      	add	sp, #12
   113e8:	f85d fb04 	ldr.w	pc, [sp], #4
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   113ec:	a901      	add	r1, sp, #4
   113ee:	4802      	ldr	r0, [pc, #8]	; (113f8 <log_free+0x34>)
   113f0:	f017 fe12 	bl	29018 <k_mem_slab_free>
}
   113f4:	e7f7      	b.n	113e6 <log_free+0x22>
   113f6:	bf00      	nop
   113f8:	20002440 	.word	0x20002440

000113fc <cont_free>:
{
	atomic_inc(&msg->hdr.ref_cnt);
}

static void cont_free(struct log_msg_cont *cont)
{
   113fc:	b510      	push	{r4, lr}
   113fe:	b082      	sub	sp, #8
   11400:	9001      	str	r0, [sp, #4]
	struct log_msg_cont *next;

	while (cont != NULL) {
   11402:	9b01      	ldr	r3, [sp, #4]
   11404:	b133      	cbz	r3, 11414 <cont_free+0x18>
		next = cont->next;
   11406:	681c      	ldr	r4, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   11408:	a901      	add	r1, sp, #4
   1140a:	4803      	ldr	r0, [pc, #12]	; (11418 <cont_free+0x1c>)
   1140c:	f017 fe04 	bl	29018 <k_mem_slab_free>
		cont = next;
   11410:	9401      	str	r4, [sp, #4]
   11412:	e7f6      	b.n	11402 <cont_free+0x6>
	}
}
   11414:	b002      	add	sp, #8
   11416:	bd10      	pop	{r4, pc}
   11418:	20002460 	.word	0x20002460

0001141c <log_msg_pool_init>:
{
   1141c:	b508      	push	{r3, lr}
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   1141e:	2320      	movs	r3, #32
   11420:	461a      	mov	r2, r3
   11422:	4902      	ldr	r1, [pc, #8]	; (1142c <log_msg_pool_init+0x10>)
   11424:	4802      	ldr	r0, [pc, #8]	; (11430 <log_msg_pool_init+0x14>)
   11426:	f017 fde9 	bl	28ffc <k_mem_slab_init>
}
   1142a:	bd08      	pop	{r3, pc}
   1142c:	20007730 	.word	0x20007730
   11430:	20002460 	.word	0x20002460

00011434 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
   11434:	b510      	push	{r4, lr}
   11436:	b082      	sub	sp, #8
	union log_msg_chunk *msg = NULL;
   11438:	2300      	movs	r3, #0
   1143a:	9301      	str	r3, [sp, #4]
   1143c:	2001      	movs	r0, #1
   1143e:	f7ff fdb5 	bl	10fac <z_impl_log_process>
   11442:	4604      	mov	r4, r0
	int err;

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
   11444:	f7ff fc38 	bl	10cb8 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   11448:	2200      	movs	r2, #0
   1144a:	2300      	movs	r3, #0
   1144c:	a901      	add	r1, sp, #4
   1144e:	4804      	ldr	r0, [pc, #16]	; (11460 <log_msg_no_space_handle+0x2c>)
   11450:	f00e f96e 	bl	1f730 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   11454:	b108      	cbz	r0, 1145a <log_msg_no_space_handle+0x26>
   11456:	2c00      	cmp	r4, #0
   11458:	d1f0      	bne.n	1143c <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
   1145a:	9801      	ldr	r0, [sp, #4]
   1145c:	b002      	add	sp, #8
   1145e:	bd10      	pop	{r4, pc}
   11460:	20002460 	.word	0x20002460

00011464 <log_msg_chunk_alloc>:
{
   11464:	b500      	push	{lr}
   11466:	b083      	sub	sp, #12
	union log_msg_chunk *msg = NULL;
   11468:	2300      	movs	r3, #0
   1146a:	9301      	str	r3, [sp, #4]
		   block_on_alloc()
   1146c:	f010 fe71 	bl	22152 <block_on_alloc>
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   11470:	b150      	cbz	r0, 11488 <log_msg_chunk_alloc+0x24>
   11472:	2200      	movs	r2, #0
   11474:	2300      	movs	r3, #0
   11476:	a901      	add	r1, sp, #4
   11478:	4807      	ldr	r0, [pc, #28]	; (11498 <log_msg_chunk_alloc+0x34>)
   1147a:	f00e f959 	bl	1f730 <k_mem_slab_alloc>
	if (err != 0) {
   1147e:	b930      	cbnz	r0, 1148e <log_msg_chunk_alloc+0x2a>
}
   11480:	9801      	ldr	r0, [sp, #4]
   11482:	b003      	add	sp, #12
   11484:	f85d fb04 	ldr.w	pc, [sp], #4
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   11488:	2200      	movs	r2, #0
   1148a:	2300      	movs	r3, #0
   1148c:	e7f3      	b.n	11476 <log_msg_chunk_alloc+0x12>
		msg = log_msg_no_space_handle();
   1148e:	f7ff ffd1 	bl	11434 <log_msg_no_space_handle>
   11492:	9001      	str	r0, [sp, #4]
   11494:	e7f4      	b.n	11480 <log_msg_chunk_alloc+0x1c>
   11496:	bf00      	nop
   11498:	20002460 	.word	0x20002460

0001149c <msg_free>:
{
   1149c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1149e:	b083      	sub	sp, #12
   114a0:	9001      	str	r0, [sp, #4]
	uint32_t nargs = log_msg_nargs_get(msg);
   114a2:	4604      	mov	r4, r0
   114a4:	f010 fefc 	bl	222a0 <log_msg_nargs_get>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   114a8:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg) && nargs) {
   114aa:	f013 0f01 	tst.w	r3, #1
   114ae:	d101      	bne.n	114b4 <msg_free+0x18>
   114b0:	4606      	mov	r6, r0
   114b2:	bb50      	cbnz	r0, 1150a <msg_free+0x6e>
	if (msg->hdr.params.generic.ext == 1) {
   114b4:	9b01      	ldr	r3, [sp, #4]
   114b6:	7a1a      	ldrb	r2, [r3, #8]
   114b8:	f012 0f02 	tst.w	r2, #2
   114bc:	d128      	bne.n	11510 <msg_free+0x74>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   114be:	a901      	add	r1, sp, #4
   114c0:	4815      	ldr	r0, [pc, #84]	; (11518 <msg_free+0x7c>)
   114c2:	f017 fda9 	bl	29018 <k_mem_slab_free>
}
   114c6:	b003      	add	sp, #12
   114c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
					smask = z_log_get_s_mask(
   114ca:	9801      	ldr	r0, [sp, #4]
   114cc:	f010 fefd 	bl	222ca <log_msg_str_get>
   114d0:	4631      	mov	r1, r6
   114d2:	f010 fe1d 	bl	22110 <z_log_get_s_mask>
					if (smask == 0U) {
   114d6:	4607      	mov	r7, r0
   114d8:	b988      	cbnz	r0, 114fe <msg_free+0x62>
   114da:	e7eb      	b.n	114b4 <msg_free+0x18>
					log_free(buf);
   114dc:	4628      	mov	r0, r5
   114de:	f7ff ff71 	bl	113c4 <log_free>
		for (i = 0U; i < nargs; i++) {
   114e2:	3401      	adds	r4, #1
   114e4:	42b4      	cmp	r4, r6
   114e6:	d2e5      	bcs.n	114b4 <msg_free+0x18>
			void *buf = (void *)log_msg_arg_get(msg, i);
   114e8:	4621      	mov	r1, r4
   114ea:	9801      	ldr	r0, [sp, #4]
   114ec:	f010 fedb 	bl	222a6 <log_msg_arg_get>
   114f0:	4605      	mov	r5, r0
			if (log_is_strdup(buf)) {
   114f2:	f7ff fcc3 	bl	10e7c <log_is_strdup>
   114f6:	2800      	cmp	r0, #0
   114f8:	d0f3      	beq.n	114e2 <msg_free+0x46>
				if (smask == 0U) {
   114fa:	2f00      	cmp	r7, #0
   114fc:	d0e5      	beq.n	114ca <msg_free+0x2e>
				if (smask & BIT(i)) {
   114fe:	fa27 f304 	lsr.w	r3, r7, r4
   11502:	f013 0f01 	tst.w	r3, #1
   11506:	d0ec      	beq.n	114e2 <msg_free+0x46>
   11508:	e7e8      	b.n	114dc <msg_free+0x40>
		uint32_t smask = 0U;
   1150a:	2700      	movs	r7, #0
		for (i = 0U; i < nargs; i++) {
   1150c:	463c      	mov	r4, r7
   1150e:	e7e9      	b.n	114e4 <msg_free+0x48>
		cont_free(msg->payload.ext.next);
   11510:	6958      	ldr	r0, [r3, #20]
   11512:	f7ff ff73 	bl	113fc <cont_free>
   11516:	e7d2      	b.n	114be <msg_free+0x22>
   11518:	20002460 	.word	0x20002460

0001151c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   1151c:	b40e      	push	{r1, r2, r3}
   1151e:	b500      	push	{lr}
   11520:	b082      	sub	sp, #8
   11522:	4601      	mov	r1, r0
   11524:	ab03      	add	r3, sp, #12
   11526:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
   1152a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   1152c:	4803      	ldr	r0, [pc, #12]	; (1153c <print_formatted+0x20>)
   1152e:	f7fe fe3d 	bl	101ac <cbvprintf>
	va_end(args);

	return length;
}
   11532:	b002      	add	sp, #8
   11534:	f85d eb04 	ldr.w	lr, [sp], #4
   11538:	b003      	add	sp, #12
   1153a:	4770      	bx	lr
   1153c:	000227a7 	.word	0x000227a7

00011540 <timestamp_print>:
	output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, uint32_t timestamp)
{
   11540:	b5f0      	push	{r4, r5, r6, r7, lr}
   11542:	b085      	sub	sp, #20
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
   11544:	f011 0f44 	tst.w	r1, #68	; 0x44
   11548:	d005      	beq.n	11556 <timestamp_print+0x16>
		length = print_formatted(output, "[%08lu] ", timestamp);
	} else if (freq != 0U) {
   1154a:	4b1a      	ldr	r3, [pc, #104]	; (115b4 <timestamp_print+0x74>)
   1154c:	681c      	ldr	r4, [r3, #0]
   1154e:	b934      	cbnz	r4, 1155e <timestamp_print+0x1e>
			length = print_formatted(output,
						 "[%02d:%02d:%02d.%03d,%03d] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
   11550:	2000      	movs	r0, #0
	}

	return length;
}
   11552:	b005      	add	sp, #20
   11554:	bdf0      	pop	{r4, r5, r6, r7, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
   11556:	4918      	ldr	r1, [pc, #96]	; (115b8 <timestamp_print+0x78>)
   11558:	f7ff ffe0 	bl	1151c <print_formatted>
   1155c:	e7f9      	b.n	11552 <timestamp_print+0x12>
		timestamp /= timestamp_div;
   1155e:	4b17      	ldr	r3, [pc, #92]	; (115bc <timestamp_print+0x7c>)
   11560:	6819      	ldr	r1, [r3, #0]
   11562:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
   11566:	fbb1 f5f4 	udiv	r5, r1, r4
		hours = seconds / 3600U;
   1156a:	4a15      	ldr	r2, [pc, #84]	; (115c0 <timestamp_print+0x80>)
   1156c:	fba2 3205 	umull	r3, r2, r2, r5
   11570:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
   11572:	f44f 6661 	mov.w	r6, #3600	; 0xe10
   11576:	fb06 5612 	mls	r6, r6, r2, r5
		mins = seconds / 60U;
   1157a:	4b12      	ldr	r3, [pc, #72]	; (115c4 <timestamp_print+0x84>)
   1157c:	fba3 7306 	umull	r7, r3, r3, r6
   11580:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
   11582:	fb04 1115 	mls	r1, r4, r5, r1
		ms = (remainder * 1000U) / freq;
   11586:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   1158a:	fb05 f101 	mul.w	r1, r5, r1
   1158e:	fbb1 f7f4 	udiv	r7, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   11592:	fb07 1114 	mls	r1, r7, r4, r1
   11596:	fb05 f101 	mul.w	r1, r5, r1
   1159a:	fbb1 f4f4 	udiv	r4, r1, r4
			length = print_formatted(output,
   1159e:	9402      	str	r4, [sp, #8]
   115a0:	9701      	str	r7, [sp, #4]
   115a2:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   115a6:	eba6 0181 	sub.w	r1, r6, r1, lsl #2
   115aa:	9100      	str	r1, [sp, #0]
   115ac:	4906      	ldr	r1, [pc, #24]	; (115c8 <timestamp_print+0x88>)
   115ae:	f7ff ffb5 	bl	1151c <print_formatted>
   115b2:	e7ce      	b.n	11552 <timestamp_print+0x12>
   115b4:	2000247c 	.word	0x2000247c
   115b8:	0002a518 	.word	0x0002a518
   115bc:	20002480 	.word	0x20002480
   115c0:	91a2b3c5 	.word	0x91a2b3c5
   115c4:	88888889 	.word	0x88888889
   115c8:	0002a524 	.word	0x0002a524

000115cc <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
   115cc:	b161      	cbz	r1, 115e8 <color_print+0x1c>
{
   115ce:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
   115d0:	b12a      	cbz	r2, 115de <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
   115d2:	4a06      	ldr	r2, [pc, #24]	; (115ec <color_print+0x20>)
   115d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   115d8:	b912      	cbnz	r2, 115e0 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
   115da:	4a05      	ldr	r2, [pc, #20]	; (115f0 <color_print+0x24>)
   115dc:	e000      	b.n	115e0 <color_print+0x14>
   115de:	4a04      	ldr	r2, [pc, #16]	; (115f0 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
   115e0:	4904      	ldr	r1, [pc, #16]	; (115f4 <color_print+0x28>)
   115e2:	f7ff ff9b 	bl	1151c <print_formatted>
	}
}
   115e6:	bd08      	pop	{r3, pc}
   115e8:	4770      	bx	lr
   115ea:	bf00      	nop
   115ec:	0002a598 	.word	0x0002a598
   115f0:	0002a540 	.word	0x0002a540
   115f4:	0002b500 	.word	0x0002b500

000115f8 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   115f8:	f011 0f10 	tst.w	r1, #16
   115fc:	d10b      	bne.n	11616 <newline_print+0x1e>
{
   115fe:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   11600:	f011 0f20 	tst.w	r1, #32
   11604:	d003      	beq.n	1160e <newline_print+0x16>
		print_formatted(ctx, "\n");
   11606:	4904      	ldr	r1, [pc, #16]	; (11618 <newline_print+0x20>)
   11608:	f7ff ff88 	bl	1151c <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
   1160c:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
   1160e:	4903      	ldr	r1, [pc, #12]	; (1161c <newline_print+0x24>)
   11610:	f7ff ff84 	bl	1151c <print_formatted>
   11614:	e7fa      	b.n	1160c <newline_print+0x14>
   11616:	4770      	bx	lr
   11618:	0002a3b8 	.word	0x0002a3b8
   1161c:	0002a548 	.word	0x0002a548

00011620 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
   11620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11624:	4605      	mov	r5, r0
   11626:	460f      	mov	r7, r1
   11628:	4616      	mov	r6, r2
   1162a:	4698      	mov	r8, r3
	newline_print(output, flags);
   1162c:	9906      	ldr	r1, [sp, #24]
   1162e:	f7ff ffe3 	bl	115f8 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
   11632:	2400      	movs	r4, #0
   11634:	4544      	cmp	r4, r8
   11636:	da05      	bge.n	11644 <hexdump_line_print+0x24>
		print_formatted(output, " ");
   11638:	4923      	ldr	r1, [pc, #140]	; (116c8 <hexdump_line_print+0xa8>)
   1163a:	4628      	mov	r0, r5
   1163c:	f7ff ff6e 	bl	1151c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   11640:	3401      	adds	r4, #1
   11642:	e7f7      	b.n	11634 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   11644:	2400      	movs	r4, #0
   11646:	e009      	b.n	1165c <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
   11648:	491f      	ldr	r1, [pc, #124]	; (116c8 <hexdump_line_print+0xa8>)
   1164a:	4628      	mov	r0, r5
   1164c:	f7ff ff66 	bl	1151c <print_formatted>
   11650:	e00b      	b.n	1166a <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
   11652:	491e      	ldr	r1, [pc, #120]	; (116cc <hexdump_line_print+0xac>)
   11654:	4628      	mov	r0, r5
   11656:	f7ff ff61 	bl	1151c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1165a:	3401      	adds	r4, #1
   1165c:	2c0f      	cmp	r4, #15
   1165e:	dc0c      	bgt.n	1167a <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
   11660:	2c00      	cmp	r4, #0
   11662:	dd02      	ble.n	1166a <hexdump_line_print+0x4a>
   11664:	f014 0f07 	tst.w	r4, #7
   11668:	d0ee      	beq.n	11648 <hexdump_line_print+0x28>
		if (i < length) {
   1166a:	42b4      	cmp	r4, r6
   1166c:	d2f1      	bcs.n	11652 <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
   1166e:	5d3a      	ldrb	r2, [r7, r4]
   11670:	4917      	ldr	r1, [pc, #92]	; (116d0 <hexdump_line_print+0xb0>)
   11672:	4628      	mov	r0, r5
   11674:	f7ff ff52 	bl	1151c <print_formatted>
   11678:	e7ef      	b.n	1165a <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
   1167a:	4916      	ldr	r1, [pc, #88]	; (116d4 <hexdump_line_print+0xb4>)
   1167c:	4628      	mov	r0, r5
   1167e:	f7ff ff4d 	bl	1151c <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   11682:	2400      	movs	r4, #0
   11684:	e009      	b.n	1169a <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
   11686:	4910      	ldr	r1, [pc, #64]	; (116c8 <hexdump_line_print+0xa8>)
   11688:	4628      	mov	r0, r5
   1168a:	f7ff ff47 	bl	1151c <print_formatted>
   1168e:	e00b      	b.n	116a8 <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
   11690:	4911      	ldr	r1, [pc, #68]	; (116d8 <hexdump_line_print+0xb8>)
   11692:	4628      	mov	r0, r5
   11694:	f7ff ff42 	bl	1151c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   11698:	3401      	adds	r4, #1
   1169a:	2c0f      	cmp	r4, #15
   1169c:	dc12      	bgt.n	116c4 <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
   1169e:	2c00      	cmp	r4, #0
   116a0:	dd02      	ble.n	116a8 <hexdump_line_print+0x88>
   116a2:	f014 0f07 	tst.w	r4, #7
   116a6:	d0ee      	beq.n	11686 <hexdump_line_print+0x66>
		if (i < length) {
   116a8:	42b4      	cmp	r4, r6
   116aa:	d206      	bcs.n	116ba <hexdump_line_print+0x9a>
			char c = (char)data[i];
   116ac:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
   116ae:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(output, "%c",
   116b2:	2b5e      	cmp	r3, #94	; 0x5e
   116b4:	d9ec      	bls.n	11690 <hexdump_line_print+0x70>
   116b6:	222e      	movs	r2, #46	; 0x2e
   116b8:	e7ea      	b.n	11690 <hexdump_line_print+0x70>
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
   116ba:	4903      	ldr	r1, [pc, #12]	; (116c8 <hexdump_line_print+0xa8>)
   116bc:	4628      	mov	r0, r5
   116be:	f7ff ff2d 	bl	1151c <print_formatted>
   116c2:	e7e9      	b.n	11698 <hexdump_line_print+0x78>
		}
	}
}
   116c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   116c8:	0002a570 	.word	0x0002a570
   116cc:	0002a554 	.word	0x0002a554
   116d0:	0002a54c 	.word	0x0002a54c
   116d4:	0002a558 	.word	0x0002a558
   116d8:	0002a55c 	.word	0x0002a55c

000116dc <ids_print>:
{
   116dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   116e0:	4680      	mov	r8, r0
   116e2:	4616      	mov	r6, r2
   116e4:	461d      	mov	r5, r3
   116e6:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
   116ea:	b959      	cbnz	r1, 11704 <ids_print+0x28>
	int total = 0;
   116ec:	2400      	movs	r4, #0
	if (source_id >= 0) {
   116ee:	2f00      	cmp	r7, #0
   116f0:	db1c      	blt.n	1172c <ids_print+0x50>
		total += print_formatted(output,
   116f2:	b186      	cbz	r6, 11716 <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   116f4:	2301      	movs	r3, #1
   116f6:	9a07      	ldr	r2, [sp, #28]
   116f8:	4093      	lsls	r3, r2
				(func_on &&
   116fa:	f013 0f10 	tst.w	r3, #16
   116fe:	d118      	bne.n	11732 <ids_print+0x56>
		total += print_formatted(output,
   11700:	4e0d      	ldr	r6, [pc, #52]	; (11738 <ids_print+0x5c>)
   11702:	e009      	b.n	11718 <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
   11704:	4b0d      	ldr	r3, [pc, #52]	; (1173c <ids_print+0x60>)
   11706:	9a07      	ldr	r2, [sp, #28]
   11708:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1170c:	490c      	ldr	r1, [pc, #48]	; (11740 <ids_print+0x64>)
   1170e:	f7ff ff05 	bl	1151c <print_formatted>
   11712:	4604      	mov	r4, r0
   11714:	e7eb      	b.n	116ee <ids_print+0x12>
		total += print_formatted(output,
   11716:	4e08      	ldr	r6, [pc, #32]	; (11738 <ids_print+0x5c>)
   11718:	4639      	mov	r1, r7
   1171a:	4628      	mov	r0, r5
   1171c:	f7ff fb18 	bl	10d50 <log_source_name_get>
   11720:	4602      	mov	r2, r0
   11722:	4631      	mov	r1, r6
   11724:	4640      	mov	r0, r8
   11726:	f7ff fef9 	bl	1151c <print_formatted>
   1172a:	4404      	add	r4, r0
}
   1172c:	4620      	mov	r0, r4
   1172e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
   11732:	4e04      	ldr	r6, [pc, #16]	; (11744 <ids_print+0x68>)
   11734:	e7f0      	b.n	11718 <ids_print+0x3c>
   11736:	bf00      	nop
   11738:	0002a560 	.word	0x0002a560
   1173c:	0002a5d4 	.word	0x0002a5d4
   11740:	0002a56c 	.word	0x0002a56c
   11744:	0002a568 	.word	0x0002a568

00011748 <hexdump_print>:

static void hexdump_print(struct log_msg *msg,
			  const struct log_output *output,
			  int prefix_offset, uint32_t flags)
{
   11748:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1174c:	b089      	sub	sp, #36	; 0x24
   1174e:	4607      	mov	r7, r0
   11750:	460e      	mov	r6, r1
   11752:	4691      	mov	r9, r2
   11754:	4698      	mov	r8, r3
	uint32_t offset = 0U;
	uint8_t buf[HEXDUMP_BYTES_IN_LINE];
	size_t length;

	print_formatted(output, "%s", log_msg_str_get(msg));
   11756:	f010 fdb8 	bl	222ca <log_msg_str_get>
   1175a:	4602      	mov	r2, r0
   1175c:	490e      	ldr	r1, [pc, #56]	; (11798 <hexdump_print+0x50>)
   1175e:	4630      	mov	r0, r6
   11760:	f7ff fedc 	bl	1151c <print_formatted>
	uint32_t offset = 0U;
   11764:	2400      	movs	r4, #0

	do {
		length = sizeof(buf);
   11766:	2510      	movs	r5, #16
   11768:	9503      	str	r5, [sp, #12]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   1176a:	4623      	mov	r3, r4
   1176c:	aa03      	add	r2, sp, #12
   1176e:	eb0d 0105 	add.w	r1, sp, r5
   11772:	4638      	mov	r0, r7
   11774:	f010 fe5b 	bl	2242e <log_msg_hexdump_data_get>

		if (length) {
   11778:	9a03      	ldr	r2, [sp, #12]
   1177a:	b152      	cbz	r2, 11792 <hexdump_print+0x4a>
			hexdump_line_print(output, buf, length,
   1177c:	f8cd 8000 	str.w	r8, [sp]
   11780:	464b      	mov	r3, r9
   11782:	eb0d 0105 	add.w	r1, sp, r5
   11786:	4630      	mov	r0, r6
   11788:	f7ff ff4a 	bl	11620 <hexdump_line_print>
					   prefix_offset, flags);
			offset += length;
   1178c:	9d03      	ldr	r5, [sp, #12]
   1178e:	442c      	add	r4, r5
		length = sizeof(buf);
   11790:	e7e9      	b.n	11766 <hexdump_print+0x1e>
		} else {
			break;
		}
	} while (true);
}
   11792:	b009      	add	sp, #36	; 0x24
   11794:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11798:	0002b500 	.word	0x0002b500

0001179c <raw_string_print>:
}


static void raw_string_print(struct log_msg *msg,
			     const struct log_output *output)
{
   1179c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1179e:	b083      	sub	sp, #12
   117a0:	4606      	mov	r6, r0
   117a2:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(output->size);

	size_t offset = 0;
	size_t length;
	bool eol = false;
   117a4:	2700      	movs	r7, #0
	size_t offset = 0;
   117a6:	463d      	mov	r5, r7
   117a8:	e00d      	b.n	117c6 <raw_string_print+0x2a>
		/* Sting is stored in a hexdump message. */
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
		output->control_block->offset = length;

		if (length != 0) {
			eol = (output->buf[length - 1] == '\n');
   117aa:	68a2      	ldr	r2, [r4, #8]
   117ac:	4413      	add	r3, r2
   117ae:	f813 7c01 	ldrb.w	r7, [r3, #-1]
   117b2:	2f0a      	cmp	r7, #10
   117b4:	bf14      	ite	ne
   117b6:	2700      	movne	r7, #0
   117b8:	2701      	moveq	r7, #1
		}

		log_output_flush(output);
   117ba:	4620      	mov	r0, r4
   117bc:	f010 ffe6 	bl	2278c <log_output_flush>
		offset += length;
   117c0:	9b01      	ldr	r3, [sp, #4]
   117c2:	441d      	add	r5, r3
	} while (length > 0);
   117c4:	b173      	cbz	r3, 117e4 <raw_string_print+0x48>
		length = output->size;
   117c6:	68e3      	ldr	r3, [r4, #12]
   117c8:	9301      	str	r3, [sp, #4]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
   117ca:	462b      	mov	r3, r5
   117cc:	aa01      	add	r2, sp, #4
   117ce:	68a1      	ldr	r1, [r4, #8]
   117d0:	4630      	mov	r0, r6
   117d2:	f010 fe2c 	bl	2242e <log_msg_hexdump_data_get>
		output->control_block->offset = length;
   117d6:	6863      	ldr	r3, [r4, #4]
   117d8:	9a01      	ldr	r2, [sp, #4]
   117da:	601a      	str	r2, [r3, #0]
		if (length != 0) {
   117dc:	9b01      	ldr	r3, [sp, #4]
   117de:	2b00      	cmp	r3, #0
   117e0:	d0eb      	beq.n	117ba <raw_string_print+0x1e>
   117e2:	e7e2      	b.n	117aa <raw_string_print+0xe>

	if (eol) {
   117e4:	b90f      	cbnz	r7, 117ea <raw_string_print+0x4e>
		print_formatted(output, "\r");
	}
}
   117e6:	b003      	add	sp, #12
   117e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_formatted(output, "\r");
   117ea:	4902      	ldr	r1, [pc, #8]	; (117f4 <raw_string_print+0x58>)
   117ec:	4620      	mov	r0, r4
   117ee:	f7ff fe95 	bl	1151c <print_formatted>
}
   117f2:	e7f8      	b.n	117e6 <raw_string_print+0x4a>
   117f4:	0002a574 	.word	0x0002a574

000117f8 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   117f8:	b570      	push	{r4, r5, r6, lr}
   117fa:	b082      	sub	sp, #8
   117fc:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
   117fe:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   11800:	f242 730f 	movw	r3, #9999	; 0x270f
   11804:	428b      	cmp	r3, r1
   11806:	bf28      	it	cs
   11808:	460b      	movcs	r3, r1
   1180a:	4a0e      	ldr	r2, [pc, #56]	; (11844 <log_output_dropped_process+0x4c>)
   1180c:	2105      	movs	r1, #5
   1180e:	4668      	mov	r0, sp
   11810:	f00f feca 	bl	215a8 <snprintk>
   11814:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
   11816:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   11818:	685b      	ldr	r3, [r3, #4]
   1181a:	220b      	movs	r2, #11
   1181c:	490a      	ldr	r1, [pc, #40]	; (11848 <log_output_dropped_process+0x50>)
   1181e:	4628      	mov	r0, r5
   11820:	f010 fe0d 	bl	2243e <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
   11824:	6863      	ldr	r3, [r4, #4]
   11826:	685b      	ldr	r3, [r3, #4]
   11828:	4632      	mov	r2, r6
   1182a:	4669      	mov	r1, sp
   1182c:	4628      	mov	r0, r5
   1182e:	f010 fe06 	bl	2243e <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
   11832:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   11834:	685b      	ldr	r3, [r3, #4]
   11836:	221b      	movs	r2, #27
   11838:	4904      	ldr	r1, [pc, #16]	; (1184c <log_output_dropped_process+0x54>)
   1183a:	4628      	mov	r0, r5
   1183c:	f010 fdff 	bl	2243e <buffer_write>
}
   11840:	b002      	add	sp, #8
   11842:	bd70      	pop	{r4, r5, r6, pc}
   11844:	0002c2ac 	.word	0x0002c2ac
   11848:	0002a5c8 	.word	0x0002a5c8
   1184c:	0002a5ac 	.word	0x0002a5ac

00011850 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   11850:	4b07      	ldr	r3, [pc, #28]	; (11870 <log_output_timestamp_freq_set+0x20>)
   11852:	2201      	movs	r2, #1
   11854:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   11856:	4b07      	ldr	r3, [pc, #28]	; (11874 <log_output_timestamp_freq_set+0x24>)
   11858:	4298      	cmp	r0, r3
   1185a:	d905      	bls.n	11868 <log_output_timestamp_freq_set+0x18>
		frequency /= 2U;
   1185c:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   1185e:	4a04      	ldr	r2, [pc, #16]	; (11870 <log_output_timestamp_freq_set+0x20>)
   11860:	6813      	ldr	r3, [r2, #0]
   11862:	005b      	lsls	r3, r3, #1
   11864:	6013      	str	r3, [r2, #0]
   11866:	e7f6      	b.n	11856 <log_output_timestamp_freq_set+0x6>
	}

	freq = frequency;
   11868:	4b03      	ldr	r3, [pc, #12]	; (11878 <log_output_timestamp_freq_set+0x28>)
   1186a:	6018      	str	r0, [r3, #0]
}
   1186c:	4770      	bx	lr
   1186e:	bf00      	nop
   11870:	20002480 	.word	0x20002480
   11874:	000f4240 	.word	0x000f4240
   11878:	2000247c 	.word	0x2000247c

0001187c <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   1187c:	4b01      	ldr	r3, [pc, #4]	; (11884 <log_backend_rtt_init+0x8>)
   1187e:	2201      	movs	r2, #1
   11880:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   11882:	4770      	bx	lr
   11884:	20003988 	.word	0x20003988

00011888 <on_failed_write>:
{
   11888:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
   1188a:	b918      	cbnz	r0, 11894 <on_failed_write+0xc>
		host_present = false;
   1188c:	4b08      	ldr	r3, [pc, #32]	; (118b0 <on_failed_write+0x28>)
   1188e:	2200      	movs	r2, #0
   11890:	701a      	strb	r2, [r3, #0]
}
   11892:	bd08      	pop	{r3, pc}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
   11894:	4b07      	ldr	r3, [pc, #28]	; (118b4 <on_failed_write+0x2c>)
   11896:	781b      	ldrb	r3, [r3, #0]
	} else if (is_sync_mode()) {
   11898:	b123      	cbz	r3, 118a4 <on_failed_write+0x1c>
	z_impl_k_busy_wait(usec_to_wait);
   1189a:	f241 3088 	movw	r0, #5000	; 0x1388
   1189e:	f018 f8b0 	bl	29a02 <z_impl_k_busy_wait>
}
   118a2:	e7f6      	b.n	11892 <on_failed_write+0xa>
	return z_impl_k_sleep(timeout);
   118a4:	20a4      	movs	r0, #164	; 0xa4
   118a6:	2100      	movs	r1, #0
   118a8:	f00f f81e 	bl	208e8 <z_impl_k_sleep>
}
   118ac:	e7f1      	b.n	11892 <on_failed_write+0xa>
   118ae:	bf00      	nop
   118b0:	20003988 	.word	0x20003988
   118b4:	20003989 	.word	0x20003989

000118b8 <on_write>:
{
   118b8:	b538      	push	{r3, r4, r5, lr}
   118ba:	4604      	mov	r4, r0
	host_present = true;
   118bc:	4b0a      	ldr	r3, [pc, #40]	; (118e8 <on_write+0x30>)
   118be:	2201      	movs	r2, #1
   118c0:	701a      	strb	r2, [r3, #0]
	return panic_mode;
   118c2:	4b0a      	ldr	r3, [pc, #40]	; (118ec <on_write+0x34>)
   118c4:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
   118c6:	b903      	cbnz	r3, 118ca <on_write+0x12>
}
   118c8:	bd38      	pop	{r3, r4, r5, pc}
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   118ca:	2000      	movs	r0, #0
   118cc:	f00d fcf8 	bl	1f2c0 <SEGGER_RTT_HasDataUp>
   118d0:	2800      	cmp	r0, #0
   118d2:	d0f9      	beq.n	118c8 <on_write+0x10>
   118d4:	4b04      	ldr	r3, [pc, #16]	; (118e8 <on_write+0x30>)
   118d6:	781b      	ldrb	r3, [r3, #0]
   118d8:	2b00      	cmp	r3, #0
   118da:	d0f5      	beq.n	118c8 <on_write+0x10>
			on_failed_write(retry_cnt--);
   118dc:	1e65      	subs	r5, r4, #1
   118de:	4620      	mov	r0, r4
   118e0:	f7ff ffd2 	bl	11888 <on_failed_write>
   118e4:	462c      	mov	r4, r5
   118e6:	e7f0      	b.n	118ca <on_write+0x12>
   118e8:	20003988 	.word	0x20003988
   118ec:	20003989 	.word	0x20003989

000118f0 <data_out_block_mode>:
{
   118f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   118f4:	4606      	mov	r6, r0
   118f6:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   118f8:	2704      	movs	r7, #4
   118fa:	e00d      	b.n	11918 <data_out_block_mode+0x28>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   118fc:	462a      	mov	r2, r5
   118fe:	4631      	mov	r1, r6
   11900:	2000      	movs	r0, #0
   11902:	f00d fc43 	bl	1f18c <SEGGER_RTT_WriteSkipNoLock>
   11906:	4604      	mov	r4, r0
   11908:	e01c      	b.n	11944 <data_out_block_mode+0x54>
			on_write(retry_cnt);
   1190a:	4638      	mov	r0, r7
   1190c:	f7ff ffd4 	bl	118b8 <on_write>
	} while ((ret == 0) && host_present);
   11910:	bb1c      	cbnz	r4, 1195a <data_out_block_mode+0x6a>
   11912:	4b16      	ldr	r3, [pc, #88]	; (1196c <data_out_block_mode+0x7c>)
   11914:	781b      	ldrb	r3, [r3, #0]
   11916:	b303      	cbz	r3, 1195a <data_out_block_mode+0x6a>
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
   11918:	4b15      	ldr	r3, [pc, #84]	; (11970 <data_out_block_mode+0x80>)
   1191a:	781b      	ldrb	r3, [r3, #0]
		if (!is_sync_mode()) {
   1191c:	2b00      	cmp	r3, #0
   1191e:	d1ed      	bne.n	118fc <data_out_block_mode+0xc>
	return z_impl_k_mutex_lock(mutex, timeout);
   11920:	f8df 8050 	ldr.w	r8, [pc, #80]	; 11974 <data_out_block_mode+0x84>
   11924:	f04f 32ff 	mov.w	r2, #4294967295
   11928:	f04f 33ff 	mov.w	r3, #4294967295
   1192c:	4640      	mov	r0, r8
   1192e:	f00e f8f9 	bl	1fb24 <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   11932:	462a      	mov	r2, r5
   11934:	4631      	mov	r1, r6
   11936:	2000      	movs	r0, #0
   11938:	f00d fc28 	bl	1f18c <SEGGER_RTT_WriteSkipNoLock>
   1193c:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   1193e:	4640      	mov	r0, r8
   11940:	f00e f97a 	bl	1fc38 <z_impl_k_mutex_unlock>
		if (ret) {
   11944:	2c00      	cmp	r4, #0
   11946:	d1e0      	bne.n	1190a <data_out_block_mode+0x1a>
		} else if (host_present) {
   11948:	4b08      	ldr	r3, [pc, #32]	; (1196c <data_out_block_mode+0x7c>)
   1194a:	781b      	ldrb	r3, [r3, #0]
   1194c:	2b00      	cmp	r3, #0
   1194e:	d0df      	beq.n	11910 <data_out_block_mode+0x20>
			retry_cnt--;
   11950:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
   11952:	4638      	mov	r0, r7
   11954:	f7ff ff98 	bl	11888 <on_failed_write>
   11958:	e7da      	b.n	11910 <data_out_block_mode+0x20>
	return ((ret == 0) && host_present) ? 0 : length;
   1195a:	b914      	cbnz	r4, 11962 <data_out_block_mode+0x72>
   1195c:	4b03      	ldr	r3, [pc, #12]	; (1196c <data_out_block_mode+0x7c>)
   1195e:	781b      	ldrb	r3, [r3, #0]
   11960:	b903      	cbnz	r3, 11964 <data_out_block_mode+0x74>
   11962:	462c      	mov	r4, r5
}
   11964:	4620      	mov	r0, r4
   11966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1196a:	bf00      	nop
   1196c:	20003988 	.word	0x20003988
   11970:	20003989 	.word	0x20003989
   11974:	2000074c 	.word	0x2000074c

00011978 <panic>:

static void panic(struct log_backend const *const backend)
{
   11978:	b508      	push	{r3, lr}
	panic_mode = true;
   1197a:	4b03      	ldr	r3, [pc, #12]	; (11988 <panic+0x10>)
   1197c:	2201      	movs	r2, #1
   1197e:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   11980:	4802      	ldr	r0, [pc, #8]	; (1198c <panic+0x14>)
   11982:	f010 ff03 	bl	2278c <log_output_flush>
	log_backend_std_panic(&log_output_rtt);
}
   11986:	bd08      	pop	{r3, pc}
   11988:	20003989 	.word	0x20003989
   1198c:	0002a614 	.word	0x0002a614

00011990 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
   11990:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   11992:	4802      	ldr	r0, [pc, #8]	; (1199c <dropped+0xc>)
   11994:	f7ff ff30 	bl	117f8 <log_output_dropped_process>
	ARG_UNUSED(backend);

	log_backend_std_dropped(&log_output_rtt, cnt);
}
   11998:	bd08      	pop	{r3, pc}
   1199a:	bf00      	nop
   1199c:	0002a614 	.word	0x0002a614

000119a0 <put>:
{
   119a0:	b510      	push	{r4, lr}
   119a2:	460c      	mov	r4, r1
	log_msg_get(msg);
   119a4:	4608      	mov	r0, r1
   119a6:	f010 fc6e 	bl	22286 <log_msg_get>
	log_output_msg_process(output, msg, flags);
   119aa:	220f      	movs	r2, #15
   119ac:	4621      	mov	r1, r4
   119ae:	4803      	ldr	r0, [pc, #12]	; (119bc <put+0x1c>)
   119b0:	f010 ff15 	bl	227de <log_output_msg_process>
	log_msg_put(msg);
   119b4:	4620      	mov	r0, r4
   119b6:	f010 fc8a 	bl	222ce <log_msg_put>
}
   119ba:	bd10      	pop	{r4, pc}
   119bc:	0002a614 	.word	0x0002a614

000119c0 <blvl_ccc_cfg_changed>:

static uint8_t battery_level = 100U;

static void blvl_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				       uint16_t value)
{
   119c0:	b508      	push	{r3, lr}
   119c2:	4b0b      	ldr	r3, [pc, #44]	; (119f0 <blvl_ccc_cfg_changed+0x30>)
   119c4:	4a0b      	ldr	r2, [pc, #44]	; (119f4 <blvl_ccc_cfg_changed+0x34>)
   119c6:	1a9b      	subs	r3, r3, r2
   119c8:	08db      	lsrs	r3, r3, #3
	ARG_UNUSED(attr);

	bool notif_enabled = (value == BT_GATT_CCC_NOTIFY);

	LOG_INF("BAS Notifications %s", notif_enabled ? "enabled" : "disabled");
   119ca:	f04f 0200 	mov.w	r2, #0
   119ce:	2003      	movs	r0, #3
   119d0:	f360 0202 	bfi	r2, r0, #0, #3
   119d4:	f36f 02c5 	bfc	r2, #3, #3
   119d8:	f363 128f 	bfi	r2, r3, #6, #10
   119dc:	2901      	cmp	r1, #1
   119de:	d004      	beq.n	119ea <blvl_ccc_cfg_changed+0x2a>
   119e0:	4905      	ldr	r1, [pc, #20]	; (119f8 <blvl_ccc_cfg_changed+0x38>)
   119e2:	4806      	ldr	r0, [pc, #24]	; (119fc <blvl_ccc_cfg_changed+0x3c>)
   119e4:	f7ff fb94 	bl	11110 <log_1>
}
   119e8:	bd08      	pop	{r3, pc}
	LOG_INF("BAS Notifications %s", notif_enabled ? "enabled" : "disabled");
   119ea:	4905      	ldr	r1, [pc, #20]	; (11a00 <blvl_ccc_cfg_changed+0x40>)
   119ec:	e7f9      	b.n	119e2 <blvl_ccc_cfg_changed+0x22>
   119ee:	bf00      	nop
   119f0:	00029ecc 	.word	0x00029ecc
   119f4:	00029ecc 	.word	0x00029ecc
   119f8:	0002a148 	.word	0x0002a148
   119fc:	0002a6b0 	.word	0x0002a6b0
   11a00:	0002a3e8 	.word	0x0002a3e8

00011a04 <read_blvl>:

static ssize_t read_blvl(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       uint16_t len, uint16_t offset)
{
   11a04:	b510      	push	{r4, lr}
   11a06:	b086      	sub	sp, #24
	uint8_t lvl8 = battery_level;
   11a08:	4c07      	ldr	r4, [pc, #28]	; (11a28 <read_blvl+0x24>)
   11a0a:	7824      	ldrb	r4, [r4, #0]
   11a0c:	f88d 4017 	strb.w	r4, [sp, #23]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &lvl8,
   11a10:	2401      	movs	r4, #1
   11a12:	9402      	str	r4, [sp, #8]
   11a14:	f10d 0417 	add.w	r4, sp, #23
   11a18:	9401      	str	r4, [sp, #4]
   11a1a:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   11a1e:	9400      	str	r4, [sp, #0]
   11a20:	f015 f8f1 	bl	26c06 <bt_gatt_attr_read>
				 sizeof(lvl8));
}
   11a24:	b006      	add	sp, #24
   11a26:	bd10      	pop	{r4, pc}
   11a28:	20000668 	.word	0x20000668

00011a2c <nvs_init>:
	}
	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
   11a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   11a2e:	b085      	sub	sp, #20
   11a30:	4604      	mov	r4, r0
   11a32:	460d      	mov	r5, r1

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
   11a34:	3014      	adds	r0, #20
	return z_impl_k_mutex_init(mutex);
   11a36:	f017 fb9f 	bl	29178 <z_impl_k_mutex_init>
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   11a3a:	4628      	mov	r0, r5
   11a3c:	f00d fc84 	bl	1f348 <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
   11a40:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
   11a42:	2800      	cmp	r0, #0
   11a44:	d02a      	beq.n	11a9c <nvs_init+0x70>
 */
__syscall const struct flash_parameters *flash_get_parameters(const struct device *dev);

static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
   11a46:	6883      	ldr	r3, [r0, #8]
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   11a48:	691b      	ldr	r3, [r3, #16]
   11a4a:	4798      	blx	r3
		LOG_ERR("No valid flash device found");
		return -ENXIO;
	}

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
   11a4c:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
   11a4e:	2800      	cmp	r0, #0
   11a50:	d037      	beq.n	11ac2 <nvs_init+0x96>
		LOG_ERR("Could not obtain flash parameters");
		return -EINVAL;
	}

	write_block_size = flash_get_write_block_size(fs->flash_device);
   11a52:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	const struct flash_driver_api *api =
   11a54:	6883      	ldr	r3, [r0, #8]
	return api->get_parameters(dev)->write_block_size;
   11a56:	691b      	ldr	r3, [r3, #16]
   11a58:	4798      	blx	r3
   11a5a:	6803      	ldr	r3, [r0, #0]

	/* check that the write block size is supported */
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
   11a5c:	3b01      	subs	r3, #1
   11a5e:	2b1f      	cmp	r3, #31
   11a60:	d842      	bhi.n	11ae8 <nvs_init+0xbc>
		LOG_ERR("Unsupported write block size");
		return -EINVAL;
	}

	/* check that sector size is a multiple of pagesize */
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
   11a62:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   11a64:	6821      	ldr	r1, [r4, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   11a66:	aa01      	add	r2, sp, #4
   11a68:	f016 fd5a 	bl	28520 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
   11a6c:	2800      	cmp	r0, #0
   11a6e:	d14e      	bne.n	11b0e <nvs_init+0xe2>
		LOG_ERR("Unable to get page info");
		return -EINVAL;
	}
	if (!fs->sector_size || fs->sector_size % info.size) {
   11a70:	89a3      	ldrh	r3, [r4, #12]
   11a72:	2b00      	cmp	r3, #0
   11a74:	d05e      	beq.n	11b34 <nvs_init+0x108>
   11a76:	9902      	ldr	r1, [sp, #8]
   11a78:	fbb3 f2f1 	udiv	r2, r3, r1
   11a7c:	fb01 3312 	mls	r3, r1, r2, r3
   11a80:	2b00      	cmp	r3, #0
   11a82:	d157      	bne.n	11b34 <nvs_init+0x108>
		LOG_ERR("Invalid sector size");
		return -EINVAL;
	}

	/* check the number of sectors, it should be at least 2 */
	if (fs->sector_count < 2) {
   11a84:	89e3      	ldrh	r3, [r4, #14]
   11a86:	2b01      	cmp	r3, #1
   11a88:	d967      	bls.n	11b5a <nvs_init+0x12e>
		LOG_ERR("Configuration error - sector count");
		return -EINVAL;
	}

	rc = nvs_startup(fs);
   11a8a:	4620      	mov	r0, r4
   11a8c:	f011 f9eb 	bl	22e66 <nvs_startup>
	if (rc) {
   11a90:	4606      	mov	r6, r0
   11a92:	2800      	cmp	r0, #0
   11a94:	d074      	beq.n	11b80 <nvs_init+0x154>
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
   11a96:	4630      	mov	r0, r6
   11a98:	b005      	add	sp, #20
   11a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11a9c:	4b51      	ldr	r3, [pc, #324]	; (11be4 <nvs_init+0x1b8>)
   11a9e:	4a52      	ldr	r2, [pc, #328]	; (11be8 <nvs_init+0x1bc>)
   11aa0:	1a9b      	subs	r3, r3, r2
   11aa2:	08db      	lsrs	r3, r3, #3
		LOG_ERR("No valid flash device found");
   11aa4:	f04f 0100 	mov.w	r1, #0
   11aa8:	2201      	movs	r2, #1
   11aaa:	f362 0102 	bfi	r1, r2, #0, #3
   11aae:	f36f 01c5 	bfc	r1, #3, #3
   11ab2:	f363 118f 	bfi	r1, r3, #6, #10
   11ab6:	484d      	ldr	r0, [pc, #308]	; (11bec <nvs_init+0x1c0>)
   11ab8:	f7ff fbe0 	bl	1127c <log_0>
		return -ENXIO;
   11abc:	f06f 0605 	mvn.w	r6, #5
   11ac0:	e7e9      	b.n	11a96 <nvs_init+0x6a>
   11ac2:	4b48      	ldr	r3, [pc, #288]	; (11be4 <nvs_init+0x1b8>)
   11ac4:	4a48      	ldr	r2, [pc, #288]	; (11be8 <nvs_init+0x1bc>)
   11ac6:	1a9b      	subs	r3, r3, r2
   11ac8:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not obtain flash parameters");
   11aca:	f04f 0100 	mov.w	r1, #0
   11ace:	2201      	movs	r2, #1
   11ad0:	f362 0102 	bfi	r1, r2, #0, #3
   11ad4:	f36f 01c5 	bfc	r1, #3, #3
   11ad8:	f363 118f 	bfi	r1, r3, #6, #10
   11adc:	4844      	ldr	r0, [pc, #272]	; (11bf0 <nvs_init+0x1c4>)
   11ade:	f7ff fbcd 	bl	1127c <log_0>
		return -EINVAL;
   11ae2:	f06f 0615 	mvn.w	r6, #21
   11ae6:	e7d6      	b.n	11a96 <nvs_init+0x6a>
   11ae8:	4b3e      	ldr	r3, [pc, #248]	; (11be4 <nvs_init+0x1b8>)
   11aea:	4a3f      	ldr	r2, [pc, #252]	; (11be8 <nvs_init+0x1bc>)
   11aec:	1a9b      	subs	r3, r3, r2
   11aee:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unsupported write block size");
   11af0:	f04f 0100 	mov.w	r1, #0
   11af4:	2201      	movs	r2, #1
   11af6:	f362 0102 	bfi	r1, r2, #0, #3
   11afa:	f36f 01c5 	bfc	r1, #3, #3
   11afe:	f363 118f 	bfi	r1, r3, #6, #10
   11b02:	483c      	ldr	r0, [pc, #240]	; (11bf4 <nvs_init+0x1c8>)
   11b04:	f7ff fbba 	bl	1127c <log_0>
		return -EINVAL;
   11b08:	f06f 0615 	mvn.w	r6, #21
   11b0c:	e7c3      	b.n	11a96 <nvs_init+0x6a>
   11b0e:	4b35      	ldr	r3, [pc, #212]	; (11be4 <nvs_init+0x1b8>)
   11b10:	4a35      	ldr	r2, [pc, #212]	; (11be8 <nvs_init+0x1bc>)
   11b12:	1a9b      	subs	r3, r3, r2
   11b14:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unable to get page info");
   11b16:	f04f 0100 	mov.w	r1, #0
   11b1a:	2201      	movs	r2, #1
   11b1c:	f362 0102 	bfi	r1, r2, #0, #3
   11b20:	f36f 01c5 	bfc	r1, #3, #3
   11b24:	f363 118f 	bfi	r1, r3, #6, #10
   11b28:	4833      	ldr	r0, [pc, #204]	; (11bf8 <nvs_init+0x1cc>)
   11b2a:	f7ff fba7 	bl	1127c <log_0>
		return -EINVAL;
   11b2e:	f06f 0615 	mvn.w	r6, #21
   11b32:	e7b0      	b.n	11a96 <nvs_init+0x6a>
   11b34:	4b2b      	ldr	r3, [pc, #172]	; (11be4 <nvs_init+0x1b8>)
   11b36:	4a2c      	ldr	r2, [pc, #176]	; (11be8 <nvs_init+0x1bc>)
   11b38:	1a9b      	subs	r3, r3, r2
   11b3a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid sector size");
   11b3c:	f04f 0100 	mov.w	r1, #0
   11b40:	2201      	movs	r2, #1
   11b42:	f362 0102 	bfi	r1, r2, #0, #3
   11b46:	f36f 01c5 	bfc	r1, #3, #3
   11b4a:	f363 118f 	bfi	r1, r3, #6, #10
   11b4e:	482b      	ldr	r0, [pc, #172]	; (11bfc <nvs_init+0x1d0>)
   11b50:	f7ff fb94 	bl	1127c <log_0>
		return -EINVAL;
   11b54:	f06f 0615 	mvn.w	r6, #21
   11b58:	e79d      	b.n	11a96 <nvs_init+0x6a>
   11b5a:	4b22      	ldr	r3, [pc, #136]	; (11be4 <nvs_init+0x1b8>)
   11b5c:	4a22      	ldr	r2, [pc, #136]	; (11be8 <nvs_init+0x1bc>)
   11b5e:	1a9b      	subs	r3, r3, r2
   11b60:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Configuration error - sector count");
   11b62:	f04f 0100 	mov.w	r1, #0
   11b66:	2201      	movs	r2, #1
   11b68:	f362 0102 	bfi	r1, r2, #0, #3
   11b6c:	f36f 01c5 	bfc	r1, #3, #3
   11b70:	f363 118f 	bfi	r1, r3, #6, #10
   11b74:	4822      	ldr	r0, [pc, #136]	; (11c00 <nvs_init+0x1d4>)
   11b76:	f7ff fb81 	bl	1127c <log_0>
		return -EINVAL;
   11b7a:	f06f 0615 	mvn.w	r6, #21
   11b7e:	e78a      	b.n	11a96 <nvs_init+0x6a>
	fs->ready = true;
   11b80:	2301      	movs	r3, #1
   11b82:	7423      	strb	r3, [r4, #16]
   11b84:	4d17      	ldr	r5, [pc, #92]	; (11be4 <nvs_init+0x1b8>)
   11b86:	4b18      	ldr	r3, [pc, #96]	; (11be8 <nvs_init+0x1bc>)
   11b88:	1aed      	subs	r5, r5, r3
   11b8a:	08ed      	lsrs	r5, r5, #3
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   11b8c:	2703      	movs	r7, #3
   11b8e:	f04f 0300 	mov.w	r3, #0
   11b92:	f367 0302 	bfi	r3, r7, #0, #3
   11b96:	f36f 03c5 	bfc	r3, #3, #3
   11b9a:	f365 138f 	bfi	r3, r5, #6, #10
   11b9e:	89a2      	ldrh	r2, [r4, #12]
   11ba0:	89e1      	ldrh	r1, [r4, #14]
   11ba2:	4818      	ldr	r0, [pc, #96]	; (11c04 <nvs_init+0x1d8>)
   11ba4:	f7ff faea 	bl	1117c <log_2>
	LOG_INF("alloc wra: %d, %x",
   11ba8:	f04f 0300 	mov.w	r3, #0
   11bac:	f367 0302 	bfi	r3, r7, #0, #3
   11bb0:	f36f 03c5 	bfc	r3, #3, #3
   11bb4:	f365 138f 	bfi	r3, r5, #6, #10
   11bb8:	6861      	ldr	r1, [r4, #4]
   11bba:	b28a      	uxth	r2, r1
   11bbc:	0c09      	lsrs	r1, r1, #16
   11bbe:	4812      	ldr	r0, [pc, #72]	; (11c08 <nvs_init+0x1dc>)
   11bc0:	f7ff fadc 	bl	1117c <log_2>
	LOG_INF("data wra: %d, %x",
   11bc4:	f04f 0300 	mov.w	r3, #0
   11bc8:	f367 0302 	bfi	r3, r7, #0, #3
   11bcc:	f36f 03c5 	bfc	r3, #3, #3
   11bd0:	f365 138f 	bfi	r3, r5, #6, #10
   11bd4:	68a1      	ldr	r1, [r4, #8]
   11bd6:	b28a      	uxth	r2, r1
   11bd8:	0c09      	lsrs	r1, r1, #16
   11bda:	480c      	ldr	r0, [pc, #48]	; (11c0c <nvs_init+0x1e0>)
   11bdc:	f7ff face 	bl	1117c <log_2>
	return 0;
   11be0:	e759      	b.n	11a96 <nvs_init+0x6a>
   11be2:	bf00      	nop
   11be4:	00029f6c 	.word	0x00029f6c
   11be8:	00029ecc 	.word	0x00029ecc
   11bec:	0002a730 	.word	0x0002a730
   11bf0:	0002a74c 	.word	0x0002a74c
   11bf4:	0002a770 	.word	0x0002a770
   11bf8:	0002a790 	.word	0x0002a790
   11bfc:	0002a7a8 	.word	0x0002a7a8
   11c00:	0002a7bc 	.word	0x0002a7bc
   11c04:	0002a7e0 	.word	0x0002a7e0
   11c08:	0002a7f8 	.word	0x0002a7f8
   11c0c:	0002a80c 	.word	0x0002a80c

00011c10 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
   11c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c14:	b087      	sub	sp, #28
   11c16:	9201      	str	r2, [sp, #4]
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
   11c18:	f890 b010 	ldrb.w	fp, [r0, #16]
   11c1c:	f1bb 0f00 	cmp.w	fp, #0
   11c20:	d027      	beq.n	11c72 <nvs_write+0x62>
   11c22:	4604      	mov	r4, r0
   11c24:	460e      	mov	r6, r1
   11c26:	4699      	mov	r9, r3
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   11c28:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   11c2a:	681b      	ldr	r3, [r3, #0]
   11c2c:	b2d9      	uxtb	r1, r3
	if (write_block_size <= 1U) {
   11c2e:	2901      	cmp	r1, #1
   11c30:	d932      	bls.n	11c98 <nvs_write+0x88>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   11c32:	f101 0a07 	add.w	sl, r1, #7
   11c36:	424a      	negs	r2, r1
   11c38:	ea0a 0a02 	and.w	sl, sl, r2
	if (write_block_size <= 1U) {
   11c3c:	2901      	cmp	r1, #1
   11c3e:	d92e      	bls.n	11c9e <nvs_write+0x8e>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   11c40:	b2db      	uxtb	r3, r3
   11c42:	eb03 0809 	add.w	r8, r3, r9
   11c46:	f108 38ff 	add.w	r8, r8, #4294967295
   11c4a:	425b      	negs	r3, r3
   11c4c:	ea03 0808 	and.w	r8, r3, r8

	/* The maximum data size is sector size - 3 ate
	 * where: 1 ate for data, 1 ate for sector close
	 * and 1 ate to always allow a delete.
	 */
	if ((len > (fs->sector_size - 3 * ate_size)) ||
   11c50:	89a3      	ldrh	r3, [r4, #12]
   11c52:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   11c56:	1a9b      	subs	r3, r3, r2
   11c58:	4599      	cmp	r9, r3
   11c5a:	f200 8096 	bhi.w	11d8a <nvs_write+0x17a>
   11c5e:	f1b9 0f00 	cmp.w	r9, #0
   11c62:	d003      	beq.n	11c6c <nvs_write+0x5c>
	    ((len > 0) && (data == NULL))) {
   11c64:	9b01      	ldr	r3, [sp, #4]
   11c66:	2b00      	cmp	r3, #0
   11c68:	f000 8092 	beq.w	11d90 <nvs_write+0x180>
		return -EINVAL;
	}

	/* find latest entry with same id */
	wlk_addr = fs->ate_wra;
   11c6c:	6863      	ldr	r3, [r4, #4]
   11c6e:	9303      	str	r3, [sp, #12]
	rd_addr = wlk_addr;
   11c70:	e01b      	b.n	11caa <nvs_write+0x9a>
   11c72:	4b49      	ldr	r3, [pc, #292]	; (11d98 <nvs_write+0x188>)
   11c74:	4a49      	ldr	r2, [pc, #292]	; (11d9c <nvs_write+0x18c>)
   11c76:	1a9b      	subs	r3, r3, r2
   11c78:	08db      	lsrs	r3, r3, #3
		LOG_ERR("NVS not initialized");
   11c7a:	f04f 0100 	mov.w	r1, #0
   11c7e:	2201      	movs	r2, #1
   11c80:	f362 0102 	bfi	r1, r2, #0, #3
   11c84:	f36f 01c5 	bfc	r1, #3, #3
   11c88:	f363 118f 	bfi	r1, r3, #6, #10
   11c8c:	4844      	ldr	r0, [pc, #272]	; (11da0 <nvs_write+0x190>)
   11c8e:	f7ff faf5 	bl	1127c <log_0>
		return -EACCES;
   11c92:	f06f 050c 	mvn.w	r5, #12
   11c96:	e072      	b.n	11d7e <nvs_write+0x16e>
		return len;
   11c98:	f04f 0a08 	mov.w	sl, #8
   11c9c:	e7ce      	b.n	11c3c <nvs_write+0x2c>
   11c9e:	46c8      	mov	r8, r9
   11ca0:	e7d6      	b.n	11c50 <nvs_write+0x40>
		}
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
			prev_found = true;
			break;
		}
		if (wlk_addr == fs->ate_wra) {
   11ca2:	6862      	ldr	r2, [r4, #4]
   11ca4:	9b03      	ldr	r3, [sp, #12]
   11ca6:	429a      	cmp	r2, r3
   11ca8:	d013      	beq.n	11cd2 <nvs_write+0xc2>
		rd_addr = wlk_addr;
   11caa:	9f03      	ldr	r7, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   11cac:	aa04      	add	r2, sp, #16
   11cae:	a903      	add	r1, sp, #12
   11cb0:	4620      	mov	r0, r4
   11cb2:	f010 ff2c 	bl	22b0e <nvs_prev_ate>
		if (rc) {
   11cb6:	4605      	mov	r5, r0
   11cb8:	2800      	cmp	r0, #0
   11cba:	d160      	bne.n	11d7e <nvs_write+0x16e>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   11cbc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   11cc0:	429e      	cmp	r6, r3
   11cc2:	d1ee      	bne.n	11ca2 <nvs_write+0x92>
   11cc4:	a904      	add	r1, sp, #16
   11cc6:	4620      	mov	r0, r4
   11cc8:	f010 fea5 	bl	22a16 <nvs_ate_valid>
   11ccc:	2800      	cmp	r0, #0
   11cce:	d0e8      	beq.n	11ca2 <nvs_write+0x92>
   11cd0:	e001      	b.n	11cd6 <nvs_write+0xc6>
	bool prev_found = false;
   11cd2:	f04f 0b00 	mov.w	fp, #0
			break;
		}
	}

	if (prev_found) {
   11cd6:	f1bb 0f00 	cmp.w	fp, #0
   11cda:	d018      	beq.n	11d0e <nvs_write+0xfe>
		/* previous entry found */
		rd_addr &= ADDR_SECT_MASK;
   11cdc:	0c3f      	lsrs	r7, r7, #16
   11cde:	043f      	lsls	r7, r7, #16
		rd_addr += wlk_ate.offset;
   11ce0:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   11ce4:	4439      	add	r1, r7

		if (len == 0) {
   11ce6:	f1b9 0f00 	cmp.w	r9, #0
   11cea:	d103      	bne.n	11cf4 <nvs_write+0xe4>
			/* do not try to compare with empty data */
			if (wlk_ate.len == 0U) {
   11cec:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   11cf0:	b983      	cbnz	r3, 11d14 <nvs_write+0x104>
   11cf2:	e044      	b.n	11d7e <nvs_write+0x16e>
				/* skip delete entry as it is already the
				 * last one
				 */
				return 0;
			}
		} else if (len == wlk_ate.len) {
   11cf4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   11cf8:	4599      	cmp	r9, r3
   11cfa:	d10b      	bne.n	11d14 <nvs_write+0x104>
			/* do not try to compare if lengths are not equal */
			/* compare the data and if equal return 0 */
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
   11cfc:	464b      	mov	r3, r9
   11cfe:	9a01      	ldr	r2, [sp, #4]
   11d00:	4620      	mov	r0, r4
   11d02:	f010 fdf4 	bl	228ee <nvs_flash_block_cmp>
			if (rc <= 0) {
   11d06:	2800      	cmp	r0, #0
   11d08:	dc04      	bgt.n	11d14 <nvs_write+0x104>
				return rc;
   11d0a:	4605      	mov	r5, r0
   11d0c:	e037      	b.n	11d7e <nvs_write+0x16e>
			}
		}
	} else {
		/* skip delete entry for non-existing entry */
		if (len == 0) {
   11d0e:	f1b9 0f00 	cmp.w	r9, #0
   11d12:	d034      	beq.n	11d7e <nvs_write+0x16e>
			return 0;
		}
	}

	/* calculate required space if the entry contains data */
	if (data_size) {
   11d14:	f1b8 0f00 	cmp.w	r8, #0
   11d18:	d00c      	beq.n	11d34 <nvs_write+0x124>
		/* Leave space for delete ate */
		required_space = data_size + ate_size;
   11d1a:	fa1a f788 	uxtah	r7, sl, r8
   11d1e:	b2bf      	uxth	r7, r7
	}

	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   11d20:	f104 0814 	add.w	r8, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   11d24:	f04f 32ff 	mov.w	r2, #4294967295
   11d28:	f04f 33ff 	mov.w	r3, #4294967295
   11d2c:	4640      	mov	r0, r8
   11d2e:	f00d fef9 	bl	1fb24 <z_impl_k_mutex_lock>

	gc_count = 0;
   11d32:	e00c      	b.n	11d4e <nvs_write+0x13e>
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
   11d34:	2700      	movs	r7, #0
   11d36:	e7f3      	b.n	11d20 <nvs_write+0x110>
			goto end;
		}

		if (fs->ate_wra >= fs->data_wra + required_space) {

			rc = nvs_flash_wrt_entry(fs, id, data, len);
   11d38:	464b      	mov	r3, r9
   11d3a:	9a01      	ldr	r2, [sp, #4]
   11d3c:	4631      	mov	r1, r6
   11d3e:	4620      	mov	r0, r4
   11d40:	f011 f97f 	bl	23042 <nvs_flash_wrt_entry>
			if (rc) {
   11d44:	4605      	mov	r5, r0
   11d46:	b9b8      	cbnz	r0, 11d78 <nvs_write+0x168>
		if (rc) {
			goto end;
		}
		gc_count++;
	}
	rc = len;
   11d48:	464d      	mov	r5, r9
   11d4a:	e015      	b.n	11d78 <nvs_write+0x168>
		gc_count++;
   11d4c:	3501      	adds	r5, #1
		if (gc_count == fs->sector_count) {
   11d4e:	89e3      	ldrh	r3, [r4, #14]
   11d50:	429d      	cmp	r5, r3
   11d52:	d00f      	beq.n	11d74 <nvs_write+0x164>
		if (fs->ate_wra >= fs->data_wra + required_space) {
   11d54:	6862      	ldr	r2, [r4, #4]
   11d56:	68a3      	ldr	r3, [r4, #8]
   11d58:	443b      	add	r3, r7
   11d5a:	429a      	cmp	r2, r3
   11d5c:	d2ec      	bcs.n	11d38 <nvs_write+0x128>
		rc = nvs_sector_close(fs);
   11d5e:	4620      	mov	r0, r4
   11d60:	f011 f98e 	bl	23080 <nvs_sector_close>
		if (rc) {
   11d64:	b978      	cbnz	r0, 11d86 <nvs_write+0x176>
		rc = nvs_gc(fs);
   11d66:	4620      	mov	r0, r4
   11d68:	f010 ffe5 	bl	22d36 <nvs_gc>
		if (rc) {
   11d6c:	2800      	cmp	r0, #0
   11d6e:	d0ed      	beq.n	11d4c <nvs_write+0x13c>
		rc = nvs_gc(fs);
   11d70:	4605      	mov	r5, r0
   11d72:	e001      	b.n	11d78 <nvs_write+0x168>
			rc = -ENOSPC;
   11d74:	f06f 051b 	mvn.w	r5, #27
	return z_impl_k_mutex_unlock(mutex);
   11d78:	4640      	mov	r0, r8
   11d7a:	f00d ff5d 	bl	1fc38 <z_impl_k_mutex_unlock>
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
   11d7e:	4628      	mov	r0, r5
   11d80:	b007      	add	sp, #28
   11d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = nvs_sector_close(fs);
   11d86:	4605      	mov	r5, r0
   11d88:	e7f6      	b.n	11d78 <nvs_write+0x168>
		return -EINVAL;
   11d8a:	f06f 0515 	mvn.w	r5, #21
   11d8e:	e7f6      	b.n	11d7e <nvs_write+0x16e>
   11d90:	f06f 0515 	mvn.w	r5, #21
   11d94:	e7f3      	b.n	11d7e <nvs_write+0x16e>
   11d96:	bf00      	nop
   11d98:	00029f6c 	.word	0x00029f6c
   11d9c:	00029ecc 	.word	0x00029ecc
   11da0:	0002a71c 	.word	0x0002a71c

00011da4 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   11da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11da8:	b084      	sub	sp, #16
   11daa:	4699      	mov	r9, r3
   11dac:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   11db0:	7c03      	ldrb	r3, [r0, #16]
   11db2:	b1a3      	cbz	r3, 11dde <nvs_read_hist+0x3a>
   11db4:	4604      	mov	r4, r0
   11db6:	460f      	mov	r7, r1
   11db8:	4692      	mov	sl, r2
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   11dba:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   11dbc:	681b      	ldr	r3, [r3, #0]
   11dbe:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   11dc0:	2a01      	cmp	r2, #1
   11dc2:	d91f      	bls.n	11e04 <nvs_read_hist+0x60>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   11dc4:	4613      	mov	r3, r2
   11dc6:	3207      	adds	r2, #7
   11dc8:	425b      	negs	r3, r3
   11dca:	401a      	ands	r2, r3
		return -EACCES;
	}

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));

	if (len > (fs->sector_size - 2 * ate_size)) {
   11dcc:	89a3      	ldrh	r3, [r4, #12]
   11dce:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   11dd2:	4599      	cmp	r9, r3
   11dd4:	d857      	bhi.n	11e86 <nvs_read_hist+0xe2>
		return -EINVAL;
	}

	cnt_his = 0U;

	wlk_addr = fs->ate_wra;
   11dd6:	6866      	ldr	r6, [r4, #4]
   11dd8:	9603      	str	r6, [sp, #12]
	cnt_his = 0U;
   11dda:	2500      	movs	r5, #0
	rd_addr = wlk_addr;

	while (cnt_his <= cnt) {
   11ddc:	e018      	b.n	11e10 <nvs_read_hist+0x6c>
   11dde:	4b2e      	ldr	r3, [pc, #184]	; (11e98 <nvs_read_hist+0xf4>)
   11de0:	4a2e      	ldr	r2, [pc, #184]	; (11e9c <nvs_read_hist+0xf8>)
   11de2:	1a9b      	subs	r3, r3, r2
   11de4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("NVS not initialized");
   11de6:	f04f 0100 	mov.w	r1, #0
   11dea:	2201      	movs	r2, #1
   11dec:	f362 0102 	bfi	r1, r2, #0, #3
   11df0:	f36f 01c5 	bfc	r1, #3, #3
   11df4:	f363 118f 	bfi	r1, r3, #6, #10
   11df8:	4829      	ldr	r0, [pc, #164]	; (11ea0 <nvs_read_hist+0xfc>)
   11dfa:	f7ff fa3f 	bl	1127c <log_0>
		return -EACCES;
   11dfe:	f06f 030c 	mvn.w	r3, #12
   11e02:	e035      	b.n	11e70 <nvs_read_hist+0xcc>
		return len;
   11e04:	2208      	movs	r2, #8
   11e06:	e7e1      	b.n	11dcc <nvs_read_hist+0x28>
			goto err;
		}
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
			cnt_his++;
		}
		if (wlk_addr == fs->ate_wra) {
   11e08:	6862      	ldr	r2, [r4, #4]
   11e0a:	9b03      	ldr	r3, [sp, #12]
   11e0c:	429a      	cmp	r2, r3
   11e0e:	d016      	beq.n	11e3e <nvs_read_hist+0x9a>
	while (cnt_his <= cnt) {
   11e10:	45a8      	cmp	r8, r5
   11e12:	d314      	bcc.n	11e3e <nvs_read_hist+0x9a>
		rd_addr = wlk_addr;
   11e14:	9e03      	ldr	r6, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   11e16:	aa01      	add	r2, sp, #4
   11e18:	a903      	add	r1, sp, #12
   11e1a:	4620      	mov	r0, r4
   11e1c:	f010 fe77 	bl	22b0e <nvs_prev_ate>
		if (rc) {
   11e20:	4603      	mov	r3, r0
   11e22:	bb28      	cbnz	r0, 11e70 <nvs_read_hist+0xcc>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   11e24:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   11e28:	429f      	cmp	r7, r3
   11e2a:	d1ed      	bne.n	11e08 <nvs_read_hist+0x64>
   11e2c:	a901      	add	r1, sp, #4
   11e2e:	4620      	mov	r0, r4
   11e30:	f010 fdf1 	bl	22a16 <nvs_ate_valid>
   11e34:	2800      	cmp	r0, #0
   11e36:	d0e7      	beq.n	11e08 <nvs_read_hist+0x64>
			cnt_his++;
   11e38:	3501      	adds	r5, #1
   11e3a:	b2ad      	uxth	r5, r5
   11e3c:	e7e4      	b.n	11e08 <nvs_read_hist+0x64>
			break;
		}
	}

	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   11e3e:	6862      	ldr	r2, [r4, #4]
   11e40:	9b03      	ldr	r3, [sp, #12]
   11e42:	429a      	cmp	r2, r3
   11e44:	d018      	beq.n	11e78 <nvs_read_hist+0xd4>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   11e46:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   11e4a:	b1fb      	cbz	r3, 11e8c <nvs_read_hist+0xe8>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   11e4c:	45a8      	cmp	r8, r5
   11e4e:	d820      	bhi.n	11e92 <nvs_read_hist+0xee>
		return -ENOENT;
	}

	rd_addr &= ADDR_SECT_MASK;
   11e50:	0c36      	lsrs	r6, r6, #16
   11e52:	0436      	lsls	r6, r6, #16
	rd_addr += wlk_ate.offset;
   11e54:	f8bd 1006 	ldrh.w	r1, [sp, #6]
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   11e58:	454b      	cmp	r3, r9
   11e5a:	bf28      	it	cs
   11e5c:	464b      	movcs	r3, r9
   11e5e:	4652      	mov	r2, sl
   11e60:	4431      	add	r1, r6
   11e62:	4620      	mov	r0, r4
   11e64:	f010 fd18 	bl	22898 <nvs_flash_rd>
	if (rc) {
   11e68:	4603      	mov	r3, r0
   11e6a:	b908      	cbnz	r0, 11e70 <nvs_read_hist+0xcc>
		goto err;
	}

	return wlk_ate.len;
   11e6c:	f8bd 3008 	ldrh.w	r3, [sp, #8]

err:
	return rc;
}
   11e70:	4618      	mov	r0, r3
   11e72:	b004      	add	sp, #16
   11e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   11e78:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   11e7c:	429f      	cmp	r7, r3
   11e7e:	d0e2      	beq.n	11e46 <nvs_read_hist+0xa2>
		return -ENOENT;
   11e80:	f06f 0301 	mvn.w	r3, #1
   11e84:	e7f4      	b.n	11e70 <nvs_read_hist+0xcc>
		return -EINVAL;
   11e86:	f06f 0315 	mvn.w	r3, #21
   11e8a:	e7f1      	b.n	11e70 <nvs_read_hist+0xcc>
		return -ENOENT;
   11e8c:	f06f 0301 	mvn.w	r3, #1
   11e90:	e7ee      	b.n	11e70 <nvs_read_hist+0xcc>
   11e92:	f06f 0301 	mvn.w	r3, #1
   11e96:	e7eb      	b.n	11e70 <nvs_read_hist+0xcc>
   11e98:	00029f6c 	.word	0x00029f6c
   11e9c:	00029ecc 	.word	0x00029ecc
   11ea0:	0002a71c 	.word	0x0002a71c

00011ea4 <get_flash_area_from_id>:

extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
   11ea4:	b410      	push	{r4}
   11ea6:	4604      	mov	r4, r0
	for (int i = 0; i < flash_map_entries; i++) {
   11ea8:	2300      	movs	r3, #0
   11eaa:	4a08      	ldr	r2, [pc, #32]	; (11ecc <get_flash_area_from_id+0x28>)
   11eac:	6812      	ldr	r2, [r2, #0]
   11eae:	429a      	cmp	r2, r3
   11eb0:	dd09      	ble.n	11ec6 <get_flash_area_from_id+0x22>
		if (flash_map[i].fa_id == idx) {
   11eb2:	011a      	lsls	r2, r3, #4
   11eb4:	4906      	ldr	r1, [pc, #24]	; (11ed0 <get_flash_area_from_id+0x2c>)
   11eb6:	6809      	ldr	r1, [r1, #0]
   11eb8:	eb01 1003 	add.w	r0, r1, r3, lsl #4
   11ebc:	5c8a      	ldrb	r2, [r1, r2]
   11ebe:	42a2      	cmp	r2, r4
   11ec0:	d002      	beq.n	11ec8 <get_flash_area_from_id+0x24>
	for (int i = 0; i < flash_map_entries; i++) {
   11ec2:	3301      	adds	r3, #1
   11ec4:	e7f1      	b.n	11eaa <get_flash_area_from_id+0x6>
			return &flash_map[i];
		}
	}

	return NULL;
   11ec6:	2000      	movs	r0, #0
}
   11ec8:	bc10      	pop	{r4}
   11eca:	4770      	bx	lr
   11ecc:	0002a88c 	.word	0x0002a88c
   11ed0:	200004ec 	.word	0x200004ec

00011ed4 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   11ed4:	4b08      	ldr	r3, [pc, #32]	; (11ef8 <flash_area_open+0x24>)
   11ed6:	681b      	ldr	r3, [r3, #0]
   11ed8:	b13b      	cbz	r3, 11eea <flash_area_open+0x16>
{
   11eda:	b510      	push	{r4, lr}
   11edc:	460c      	mov	r4, r1
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
   11ede:	f7ff ffe1 	bl	11ea4 <get_flash_area_from_id>
	if (area == NULL) {
   11ee2:	b128      	cbz	r0, 11ef0 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
   11ee4:	6020      	str	r0, [r4, #0]
	return 0;
   11ee6:	2000      	movs	r0, #0
}
   11ee8:	bd10      	pop	{r4, pc}
		return -EACCES;
   11eea:	f06f 000c 	mvn.w	r0, #12
}
   11eee:	4770      	bx	lr
		return -ENOENT;
   11ef0:	f06f 0001 	mvn.w	r0, #1
   11ef4:	e7f8      	b.n	11ee8 <flash_area_open+0x14>
   11ef6:	bf00      	nop
   11ef8:	200004ec 	.word	0x200004ec

00011efc <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   11efc:	b500      	push	{lr}
   11efe:	b08b      	sub	sp, #44	; 0x2c
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   11f00:	ab03      	add	r3, sp, #12
   11f02:	9300      	str	r3, [sp, #0]
   11f04:	4b02      	ldr	r3, [pc, #8]	; (11f10 <flash_area_get_sectors+0x14>)
   11f06:	f011 f935 	bl	23174 <flash_area_layout>
}
   11f0a:	b00b      	add	sp, #44	; 0x2c
   11f0c:	f85d fb04 	ldr.w	pc, [sp], #4
   11f10:	00023139 	.word	0x00023139

00011f14 <settings_save_one>:

/*
 * Append a single value to persisted config. Don't store duplicate value.
 */
int settings_save_one(const char *name, const void *value, size_t val_len)
{
   11f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   11f18:	4b0f      	ldr	r3, [pc, #60]	; (11f58 <settings_save_one+0x44>)
   11f1a:	681d      	ldr	r5, [r3, #0]
	if (!cs) {
   11f1c:	b1cd      	cbz	r5, 11f52 <settings_save_one+0x3e>
   11f1e:	4680      	mov	r8, r0
   11f20:	460f      	mov	r7, r1
   11f22:	4614      	mov	r4, r2
	return z_impl_k_mutex_lock(mutex, timeout);
   11f24:	4e0d      	ldr	r6, [pc, #52]	; (11f5c <settings_save_one+0x48>)
   11f26:	f04f 32ff 	mov.w	r2, #4294967295
   11f2a:	f04f 33ff 	mov.w	r3, #4294967295
   11f2e:	4630      	mov	r0, r6
   11f30:	f00d fdf8 	bl	1fb24 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   11f34:	686b      	ldr	r3, [r5, #4]
   11f36:	f8d3 9008 	ldr.w	r9, [r3, #8]
   11f3a:	4623      	mov	r3, r4
   11f3c:	463a      	mov	r2, r7
   11f3e:	4641      	mov	r1, r8
   11f40:	4628      	mov	r0, r5
   11f42:	47c8      	blx	r9
   11f44:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   11f46:	4630      	mov	r0, r6
   11f48:	f00d fe76 	bl	1fc38 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   11f4c:	4620      	mov	r0, r4
   11f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -ENOENT;
   11f52:	f06f 0401 	mvn.w	r4, #1
   11f56:	e7f9      	b.n	11f4c <settings_save_one+0x38>
   11f58:	200024b0 	.word	0x200024b0
   11f5c:	20000760 	.word	0x20000760

00011f60 <settings_src_register>:
	parent->next = child;
   11f60:	2300      	movs	r3, #0
   11f62:	6003      	str	r3, [r0, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   11f64:	4b05      	ldr	r3, [pc, #20]	; (11f7c <settings_src_register+0x1c>)
   11f66:	685b      	ldr	r3, [r3, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   11f68:	b11b      	cbz	r3, 11f72 <settings_src_register+0x12>
	parent->next = child;
   11f6a:	6018      	str	r0, [r3, #0]
	list->tail = node;
   11f6c:	4b03      	ldr	r3, [pc, #12]	; (11f7c <settings_src_register+0x1c>)
   11f6e:	6058      	str	r0, [r3, #4]
}
   11f70:	4770      	bx	lr
   11f72:	4b02      	ldr	r3, [pc, #8]	; (11f7c <settings_src_register+0x1c>)
   11f74:	6058      	str	r0, [r3, #4]
	list->head = node;
   11f76:	6018      	str	r0, [r3, #0]
}
   11f78:	4770      	bx	lr
   11f7a:	bf00      	nop
   11f7c:	200024a8 	.word	0x200024a8

00011f80 <settings_dst_register>:
	settings_save_dst = cs;
   11f80:	4b01      	ldr	r3, [pc, #4]	; (11f88 <settings_dst_register+0x8>)
   11f82:	6018      	str	r0, [r3, #0]
}
   11f84:	4770      	bx	lr
   11f86:	bf00      	nop
   11f88:	200024b0 	.word	0x200024b0

00011f8c <settings_load_subtree>:
{
   11f8c:	b530      	push	{r4, r5, lr}
   11f8e:	b085      	sub	sp, #20
   11f90:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   11f92:	2300      	movs	r3, #0
   11f94:	9302      	str	r3, [sp, #8]
   11f96:	9303      	str	r3, [sp, #12]
   11f98:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   11f9a:	f04f 32ff 	mov.w	r2, #4294967295
   11f9e:	f04f 33ff 	mov.w	r3, #4294967295
   11fa2:	480d      	ldr	r0, [pc, #52]	; (11fd8 <settings_load_subtree+0x4c>)
   11fa4:	f00d fdbe 	bl	1fb24 <z_impl_k_mutex_lock>
	return list->head;
   11fa8:	4b0c      	ldr	r3, [pc, #48]	; (11fdc <settings_load_subtree+0x50>)
   11faa:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   11fac:	b14c      	cbz	r4, 11fc2 <settings_load_subtree+0x36>
		cs->cs_itf->csi_load(cs, &arg);
   11fae:	6863      	ldr	r3, [r4, #4]
   11fb0:	681b      	ldr	r3, [r3, #0]
   11fb2:	a901      	add	r1, sp, #4
   11fb4:	4620      	mov	r0, r4
   11fb6:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   11fb8:	2c00      	cmp	r4, #0
   11fba:	d0f7      	beq.n	11fac <settings_load_subtree+0x20>
	return node->next;
   11fbc:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   11fbe:	2c00      	cmp	r4, #0
   11fc0:	d1f4      	bne.n	11fac <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
   11fc2:	4628      	mov	r0, r5
   11fc4:	f000 f8ec 	bl	121a0 <settings_commit_subtree>
   11fc8:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   11fca:	4803      	ldr	r0, [pc, #12]	; (11fd8 <settings_load_subtree+0x4c>)
   11fcc:	f00d fe34 	bl	1fc38 <z_impl_k_mutex_unlock>
}
   11fd0:	4620      	mov	r0, r4
   11fd2:	b005      	add	sp, #20
   11fd4:	bd30      	pop	{r4, r5, pc}
   11fd6:	bf00      	nop
   11fd8:	20000760 	.word	0x20000760
   11fdc:	200024a8 	.word	0x200024a8

00011fe0 <settings_load_subtree_direct>:
{
   11fe0:	b510      	push	{r4, lr}
   11fe2:	b084      	sub	sp, #16
	const struct settings_load_arg arg = {
   11fe4:	9001      	str	r0, [sp, #4]
   11fe6:	9102      	str	r1, [sp, #8]
   11fe8:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   11fea:	f04f 32ff 	mov.w	r2, #4294967295
   11fee:	f04f 33ff 	mov.w	r3, #4294967295
   11ff2:	480b      	ldr	r0, [pc, #44]	; (12020 <settings_load_subtree_direct+0x40>)
   11ff4:	f00d fd96 	bl	1fb24 <z_impl_k_mutex_lock>
	return list->head;
   11ff8:	4b0a      	ldr	r3, [pc, #40]	; (12024 <settings_load_subtree_direct+0x44>)
   11ffa:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   11ffc:	b14c      	cbz	r4, 12012 <settings_load_subtree_direct+0x32>
		cs->cs_itf->csi_load(cs, &arg);
   11ffe:	6863      	ldr	r3, [r4, #4]
   12000:	681b      	ldr	r3, [r3, #0]
   12002:	a901      	add	r1, sp, #4
   12004:	4620      	mov	r0, r4
   12006:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   12008:	2c00      	cmp	r4, #0
   1200a:	d0f7      	beq.n	11ffc <settings_load_subtree_direct+0x1c>
	return node->next;
   1200c:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   1200e:	2c00      	cmp	r4, #0
   12010:	d1f4      	bne.n	11ffc <settings_load_subtree_direct+0x1c>
	return z_impl_k_mutex_unlock(mutex);
   12012:	4803      	ldr	r0, [pc, #12]	; (12020 <settings_load_subtree_direct+0x40>)
   12014:	f00d fe10 	bl	1fc38 <z_impl_k_mutex_unlock>
}
   12018:	2000      	movs	r0, #0
   1201a:	b004      	add	sp, #16
   1201c:	bd10      	pop	{r4, pc}
   1201e:	bf00      	nop
   12020:	20000760 	.word	0x20000760
   12024:	200024a8 	.word	0x200024a8

00012028 <settings_store_init>:
	list->head = NULL;
   12028:	4b02      	ldr	r3, [pc, #8]	; (12034 <settings_store_init+0xc>)
   1202a:	2200      	movs	r2, #0
   1202c:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   1202e:	605a      	str	r2, [r3, #4]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   12030:	4770      	bx	lr
   12032:	bf00      	nop
   12034:	200024a8 	.word	0x200024a8

00012038 <settings_init>:


void settings_store_init(void);

void settings_init(void)
{
   12038:	b508      	push	{r3, lr}
	list->head = NULL;
   1203a:	4b03      	ldr	r3, [pc, #12]	; (12048 <settings_init+0x10>)
   1203c:	2200      	movs	r2, #0
   1203e:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   12040:	605a      	str	r2, [r3, #4]
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   12042:	f7ff fff1 	bl	12028 <settings_store_init>
}
   12046:	bd08      	pop	{r3, pc}
   12048:	200024b4 	.word	0x200024b4

0001204c <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   1204c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1204e:	b083      	sub	sp, #12
   12050:	4606      	mov	r6, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   12052:	460f      	mov	r7, r1
   12054:	b109      	cbz	r1, 1205a <settings_parse_and_lookup+0xe>
		*next = NULL;
   12056:	2300      	movs	r3, #0
   12058:	600b      	str	r3, [r1, #0]
				*next = tmpnext;
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = ch;
   1205a:	4c27      	ldr	r4, [pc, #156]	; (120f8 <settings_parse_and_lookup+0xac>)
   1205c:	2500      	movs	r5, #0
   1205e:	e004      	b.n	1206a <settings_parse_and_lookup+0x1e>
			if (next) {
   12060:	b10f      	cbz	r7, 12066 <settings_parse_and_lookup+0x1a>
				*next = tmpnext;
   12062:	9b01      	ldr	r3, [sp, #4]
   12064:	603b      	str	r3, [r7, #0]
			bestmatch = ch;
   12066:	4625      	mov	r5, r4
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   12068:	3414      	adds	r4, #20
   1206a:	4b24      	ldr	r3, [pc, #144]	; (120fc <settings_parse_and_lookup+0xb0>)
   1206c:	429c      	cmp	r4, r3
   1206e:	d216      	bcs.n	1209e <settings_parse_and_lookup+0x52>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   12070:	aa01      	add	r2, sp, #4
   12072:	6821      	ldr	r1, [r4, #0]
   12074:	4630      	mov	r0, r6
   12076:	f011 f8af 	bl	231d8 <settings_name_steq>
   1207a:	2800      	cmp	r0, #0
   1207c:	d0f4      	beq.n	12068 <settings_parse_and_lookup+0x1c>
		if (!bestmatch) {
   1207e:	2d00      	cmp	r5, #0
   12080:	d0ee      	beq.n	12060 <settings_parse_and_lookup+0x14>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   12082:	2200      	movs	r2, #0
   12084:	6829      	ldr	r1, [r5, #0]
   12086:	6820      	ldr	r0, [r4, #0]
   12088:	f011 f8a6 	bl	231d8 <settings_name_steq>
   1208c:	2800      	cmp	r0, #0
   1208e:	d0eb      	beq.n	12068 <settings_parse_and_lookup+0x1c>
			if (next) {
   12090:	b11f      	cbz	r7, 1209a <settings_parse_and_lookup+0x4e>
				*next = tmpnext;
   12092:	9b01      	ldr	r3, [sp, #4]
   12094:	603b      	str	r3, [r7, #0]
			bestmatch = ch;
   12096:	4625      	mov	r5, r4
   12098:	e7e6      	b.n	12068 <settings_parse_and_lookup+0x1c>
   1209a:	4625      	mov	r5, r4
   1209c:	e7e4      	b.n	12068 <settings_parse_and_lookup+0x1c>
	return list->head;
   1209e:	4b18      	ldr	r3, [pc, #96]	; (12100 <settings_parse_and_lookup+0xb4>)
   120a0:	681c      	ldr	r4, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   120a2:	b15c      	cbz	r4, 120bc <settings_parse_and_lookup+0x70>
   120a4:	3c14      	subs	r4, #20
   120a6:	e009      	b.n	120bc <settings_parse_and_lookup+0x70>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
			continue;
		}
		if (!bestmatch) {
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
   120a8:	b10f      	cbz	r7, 120ae <settings_parse_and_lookup+0x62>
				*next = tmpnext;
   120aa:	9b01      	ldr	r3, [sp, #4]
   120ac:	603b      	str	r3, [r7, #0]
			bestmatch = (struct settings_handler_static *)ch;
   120ae:	4625      	mov	r5, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   120b0:	f114 0314 	adds.w	r3, r4, #20
   120b4:	d01a      	beq.n	120ec <settings_parse_and_lookup+0xa0>
	return node->next;
   120b6:	6964      	ldr	r4, [r4, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   120b8:	b104      	cbz	r4, 120bc <settings_parse_and_lookup+0x70>
   120ba:	3c14      	subs	r4, #20
   120bc:	b1c4      	cbz	r4, 120f0 <settings_parse_and_lookup+0xa4>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   120be:	aa01      	add	r2, sp, #4
   120c0:	6821      	ldr	r1, [r4, #0]
   120c2:	4630      	mov	r0, r6
   120c4:	f011 f888 	bl	231d8 <settings_name_steq>
   120c8:	2800      	cmp	r0, #0
   120ca:	d0f1      	beq.n	120b0 <settings_parse_and_lookup+0x64>
		if (!bestmatch) {
   120cc:	2d00      	cmp	r5, #0
   120ce:	d0eb      	beq.n	120a8 <settings_parse_and_lookup+0x5c>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   120d0:	2200      	movs	r2, #0
   120d2:	6829      	ldr	r1, [r5, #0]
   120d4:	6820      	ldr	r0, [r4, #0]
   120d6:	f011 f87f 	bl	231d8 <settings_name_steq>
   120da:	2800      	cmp	r0, #0
   120dc:	d0e8      	beq.n	120b0 <settings_parse_and_lookup+0x64>
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
   120de:	b11f      	cbz	r7, 120e8 <settings_parse_and_lookup+0x9c>
				*next = tmpnext;
   120e0:	9b01      	ldr	r3, [sp, #4]
   120e2:	603b      	str	r3, [r7, #0]
			bestmatch = (struct settings_handler_static *)ch;
   120e4:	4625      	mov	r5, r4
   120e6:	e7e3      	b.n	120b0 <settings_parse_and_lookup+0x64>
   120e8:	4625      	mov	r5, r4
   120ea:	e7e1      	b.n	120b0 <settings_parse_and_lookup+0x64>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   120ec:	461c      	mov	r4, r3
   120ee:	e7e5      	b.n	120bc <settings_parse_and_lookup+0x70>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   120f0:	4628      	mov	r0, r5
   120f2:	b003      	add	sp, #12
   120f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   120f6:	bf00      	nop
   120f8:	00029e54 	.word	0x00029e54
   120fc:	00029ecc 	.word	0x00029ecc
   12100:	200024b4 	.word	0x200024b4

00012104 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
   12104:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12108:	b085      	sub	sp, #20
   1210a:	4604      	mov	r4, r0
   1210c:	4689      	mov	r9, r1
   1210e:	4690      	mov	r8, r2
   12110:	461f      	mov	r7, r3
   12112:	9d0c      	ldr	r5, [sp, #48]	; 0x30
	int rc;
	const char *name_key = name;
   12114:	9003      	str	r0, [sp, #12]

	if (load_arg && load_arg->subtree &&
   12116:	b135      	cbz	r5, 12126 <settings_call_set_handler+0x22>
   12118:	6829      	ldr	r1, [r5, #0]
   1211a:	b121      	cbz	r1, 12126 <settings_call_set_handler+0x22>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   1211c:	aa03      	add	r2, sp, #12
   1211e:	f011 f85b 	bl	231d8 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   12122:	4606      	mov	r6, r0
   12124:	b150      	cbz	r0, 1213c <settings_call_set_handler+0x38>
		return 0;
	}

	if (load_arg && load_arg->cb) {
   12126:	b16d      	cbz	r5, 12144 <settings_call_set_handler+0x40>
   12128:	686e      	ldr	r6, [r5, #4]
   1212a:	b15e      	cbz	r6, 12144 <settings_call_set_handler+0x40>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   1212c:	68ab      	ldr	r3, [r5, #8]
   1212e:	9300      	str	r3, [sp, #0]
   12130:	463b      	mov	r3, r7
   12132:	4642      	mov	r2, r8
   12134:	4649      	mov	r1, r9
   12136:	9803      	ldr	r0, [sp, #12]
   12138:	47b0      	blx	r6
   1213a:	4606      	mov	r6, r0
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
   1213c:	4630      	mov	r0, r6
   1213e:	b005      	add	sp, #20
   12140:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ch = settings_parse_and_lookup(name, &name_key);
   12144:	a903      	add	r1, sp, #12
   12146:	4620      	mov	r0, r4
   12148:	f7ff ff80 	bl	1204c <settings_parse_and_lookup>
		if (!ch) {
   1214c:	b300      	cbz	r0, 12190 <settings_call_set_handler+0x8c>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   1214e:	6885      	ldr	r5, [r0, #8]
   12150:	463b      	mov	r3, r7
   12152:	4642      	mov	r2, r8
   12154:	4649      	mov	r1, r9
   12156:	9803      	ldr	r0, [sp, #12]
   12158:	47a8      	blx	r5
		if (rc != 0) {
   1215a:	4606      	mov	r6, r0
   1215c:	2800      	cmp	r0, #0
   1215e:	d0ed      	beq.n	1213c <settings_call_set_handler+0x38>
   12160:	4b0c      	ldr	r3, [pc, #48]	; (12194 <settings_call_set_handler+0x90>)
   12162:	4a0d      	ldr	r2, [pc, #52]	; (12198 <settings_call_set_handler+0x94>)
   12164:	1a9b      	subs	r3, r3, r2
   12166:	08db      	lsrs	r3, r3, #3
			LOG_ERR("set-value failure. key: %s error(%d)",
   12168:	f04f 0500 	mov.w	r5, #0
   1216c:	2201      	movs	r2, #1
   1216e:	f362 0502 	bfi	r5, r2, #0, #3
   12172:	f36f 05c5 	bfc	r5, #3, #3
   12176:	f363 158f 	bfi	r5, r3, #6, #10
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
   1217a:	4620      	mov	r0, r4
   1217c:	f7fe fe4e 	bl	10e1c <z_log_strdup>
   12180:	4601      	mov	r1, r0
   12182:	462b      	mov	r3, r5
   12184:	4632      	mov	r2, r6
   12186:	4805      	ldr	r0, [pc, #20]	; (1219c <settings_call_set_handler+0x98>)
   12188:	f7fe fff8 	bl	1117c <log_2>
			rc = 0;
   1218c:	2600      	movs	r6, #0
   1218e:	e7d5      	b.n	1213c <settings_call_set_handler+0x38>
			return 0;
   12190:	2600      	movs	r6, #0
   12192:	e7d3      	b.n	1213c <settings_call_set_handler+0x38>
   12194:	00029fcc 	.word	0x00029fcc
   12198:	00029ecc 	.word	0x00029ecc
   1219c:	0002a890 	.word	0x0002a890

000121a0 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   121a0:	b570      	push	{r4, r5, r6, lr}
   121a2:	4605      	mov	r5, r0
	int rc;
	int rc2;

	rc = 0;

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   121a4:	4c1b      	ldr	r4, [pc, #108]	; (12214 <settings_commit_subtree+0x74>)
	rc = 0;
   121a6:	2600      	movs	r6, #0
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   121a8:	e000      	b.n	121ac <settings_commit_subtree+0xc>
   121aa:	3414      	adds	r4, #20
   121ac:	4b1a      	ldr	r3, [pc, #104]	; (12218 <settings_commit_subtree+0x78>)
   121ae:	429c      	cmp	r4, r3
   121b0:	d20f      	bcs.n	121d2 <settings_commit_subtree+0x32>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   121b2:	b135      	cbz	r5, 121c2 <settings_commit_subtree+0x22>
   121b4:	2200      	movs	r2, #0
   121b6:	4629      	mov	r1, r5
   121b8:	6820      	ldr	r0, [r4, #0]
   121ba:	f011 f80d 	bl	231d8 <settings_name_steq>
   121be:	2800      	cmp	r0, #0
   121c0:	d0f3      	beq.n	121aa <settings_commit_subtree+0xa>
			continue;
		}
		if (ch->h_commit) {
   121c2:	68e3      	ldr	r3, [r4, #12]
   121c4:	2b00      	cmp	r3, #0
   121c6:	d0f0      	beq.n	121aa <settings_commit_subtree+0xa>
			rc2 = ch->h_commit();
   121c8:	4798      	blx	r3
			if (!rc) {
   121ca:	2e00      	cmp	r6, #0
   121cc:	d1ed      	bne.n	121aa <settings_commit_subtree+0xa>
				rc = rc2;
   121ce:	4606      	mov	r6, r0
   121d0:	e7eb      	b.n	121aa <settings_commit_subtree+0xa>
	return list->head;
   121d2:	4b12      	ldr	r3, [pc, #72]	; (1221c <settings_commit_subtree+0x7c>)
   121d4:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   121d6:	b13c      	cbz	r4, 121e8 <settings_commit_subtree+0x48>
   121d8:	3c14      	subs	r4, #20
   121da:	e005      	b.n	121e8 <settings_commit_subtree+0x48>
Z_GENLIST_PEEK_NEXT(slist, snode)
   121dc:	f114 0314 	adds.w	r3, r4, #20
   121e0:	d013      	beq.n	1220a <settings_commit_subtree+0x6a>
	return node->next;
   121e2:	6964      	ldr	r4, [r4, #20]
   121e4:	b104      	cbz	r4, 121e8 <settings_commit_subtree+0x48>
   121e6:	3c14      	subs	r4, #20
   121e8:	b18c      	cbz	r4, 1220e <settings_commit_subtree+0x6e>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   121ea:	b135      	cbz	r5, 121fa <settings_commit_subtree+0x5a>
   121ec:	2200      	movs	r2, #0
   121ee:	4629      	mov	r1, r5
   121f0:	6820      	ldr	r0, [r4, #0]
   121f2:	f010 fff1 	bl	231d8 <settings_name_steq>
   121f6:	2800      	cmp	r0, #0
   121f8:	d0f0      	beq.n	121dc <settings_commit_subtree+0x3c>
			continue;
		}
		if (ch->h_commit) {
   121fa:	68e3      	ldr	r3, [r4, #12]
   121fc:	2b00      	cmp	r3, #0
   121fe:	d0ed      	beq.n	121dc <settings_commit_subtree+0x3c>
			rc2 = ch->h_commit();
   12200:	4798      	blx	r3
			if (!rc) {
   12202:	2e00      	cmp	r6, #0
   12204:	d1ea      	bne.n	121dc <settings_commit_subtree+0x3c>
				rc = rc2;
   12206:	4606      	mov	r6, r0
   12208:	e7e8      	b.n	121dc <settings_commit_subtree+0x3c>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   1220a:	461c      	mov	r4, r3
   1220c:	e7ec      	b.n	121e8 <settings_commit_subtree+0x48>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   1220e:	4630      	mov	r0, r6
   12210:	bd70      	pop	{r4, r5, r6, pc}
   12212:	bf00      	nop
   12214:	00029e54 	.word	0x00029e54
   12218:	00029ecc 	.word	0x00029ecc
   1221c:	200024b4 	.word	0x200024b4

00012220 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   12220:	b508      	push	{r3, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   12222:	4b07      	ldr	r3, [pc, #28]	; (12240 <settings_subsys_init+0x20>)
   12224:	781b      	ldrb	r3, [r3, #0]
   12226:	b10b      	cbz	r3, 1222c <settings_subsys_init+0xc>
		return 0;
   12228:	2000      	movs	r0, #0
	if (!err) {
		settings_subsys_initialized = true;
	}

	return err;
}
   1222a:	bd08      	pop	{r3, pc}
	settings_init();
   1222c:	f7ff ff04 	bl	12038 <settings_init>
	err = settings_backend_init(); /* func rises kernel panic once error */
   12230:	f000 f87c 	bl	1232c <settings_backend_init>
	if (!err) {
   12234:	2800      	cmp	r0, #0
   12236:	d1f8      	bne.n	1222a <settings_subsys_init+0xa>
		settings_subsys_initialized = true;
   12238:	4b01      	ldr	r3, [pc, #4]	; (12240 <settings_subsys_init+0x20>)
   1223a:	2201      	movs	r2, #1
   1223c:	701a      	strb	r2, [r3, #0]
   1223e:	e7f4      	b.n	1222a <settings_subsys_init+0xa>
   12240:	2000398a 	.word	0x2000398a

00012244 <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   12244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12248:	b098      	sub	sp, #96	; 0x60
   1224a:	4680      	mov	r8, r0
   1224c:	4689      	mov	r9, r1
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
   1224e:	f9b0 4038 	ldrsh.w	r4, [r0, #56]	; 0x38
   12252:	3401      	adds	r4, #1
   12254:	b2a4      	uxth	r4, r4
	int ret = 0;
   12256:	f04f 0a00 	mov.w	sl, #0
   1225a:	e00f      	b.n	1227c <settings_nvs_load+0x38>
		 */
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
			       &buf, sizeof(buf));

		if ((rc1 <= 0) && (rc2 <= 0)) {
   1225c:	2800      	cmp	r0, #0
   1225e:	dc28      	bgt.n	122b2 <settings_nvs_load+0x6e>
   12260:	e00b      	b.n	1227a <settings_nvs_load+0x36>
			/* Settings item is not stored correctly in the NVS.
			 * NVS entry for its name or value is either missing
			 * or deleted. Clean dirty entries to make space for
			 * future settings item.
			 */
			if (name_id == cf->last_name_id) {
   12262:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
   12266:	42ab      	cmp	r3, r5
   12268:	d03e      	beq.n	122e8 <settings_nvs_load+0xa4>
				cf->last_name_id--;
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
					  &cf->last_name_id, sizeof(uint16_t));
			}
			nvs_delete(&cf->cf_nvs, name_id);
   1226a:	4629      	mov	r1, r5
   1226c:	4638      	mov	r0, r7
   1226e:	f010 ff37 	bl	230e0 <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
   12272:	4621      	mov	r1, r4
   12274:	4638      	mov	r0, r7
   12276:	f010 ff33 	bl	230e0 <nvs_delete>
{
   1227a:	462c      	mov	r4, r5
		name_id--;
   1227c:	1e65      	subs	r5, r4, #1
   1227e:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
   12280:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   12284:	d02c      	beq.n	122e0 <settings_nvs_load+0x9c>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   12286:	f108 0708 	add.w	r7, r8, #8
   1228a:	234a      	movs	r3, #74	; 0x4a
   1228c:	aa03      	add	r2, sp, #12
   1228e:	4629      	mov	r1, r5
   12290:	4638      	mov	r0, r7
   12292:	f010 ff2b 	bl	230ec <nvs_read>
   12296:	4606      	mov	r6, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   12298:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
   1229c:	343f      	adds	r4, #63	; 0x3f
   1229e:	b2a4      	uxth	r4, r4
   122a0:	2301      	movs	r3, #1
   122a2:	f10d 020b 	add.w	r2, sp, #11
   122a6:	4621      	mov	r1, r4
   122a8:	4638      	mov	r0, r7
   122aa:	f010 ff1f 	bl	230ec <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
   122ae:	2e00      	cmp	r6, #0
   122b0:	ddd4      	ble.n	1225c <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
   122b2:	2e00      	cmp	r6, #0
   122b4:	ddd5      	ble.n	12262 <settings_nvs_load+0x1e>
   122b6:	2800      	cmp	r0, #0
   122b8:	ddd3      	ble.n	12262 <settings_nvs_load+0x1e>
			continue;
		}

		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
   122ba:	ab18      	add	r3, sp, #96	; 0x60
   122bc:	441e      	add	r6, r3
   122be:	2300      	movs	r3, #0
   122c0:	f806 3c54 	strb.w	r3, [r6, #-84]
		read_fn_arg.fs = &cf->cf_nvs;
   122c4:	9716      	str	r7, [sp, #88]	; 0x58
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
   122c6:	f8ad 405c 	strh.w	r4, [sp, #92]	; 0x5c

		ret = settings_call_set_handler(
   122ca:	f8cd 9000 	str.w	r9, [sp]
   122ce:	ab16      	add	r3, sp, #88	; 0x58
   122d0:	4a0b      	ldr	r2, [pc, #44]	; (12300 <settings_nvs_load+0xbc>)
   122d2:	4601      	mov	r1, r0
   122d4:	a803      	add	r0, sp, #12
   122d6:	f7ff ff15 	bl	12104 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
   122da:	4682      	mov	sl, r0
   122dc:	2800      	cmp	r0, #0
   122de:	d0cc      	beq.n	1227a <settings_nvs_load+0x36>
			break;
		}
	}
	return ret;
}
   122e0:	4650      	mov	r0, sl
   122e2:	b018      	add	sp, #96	; 0x60
   122e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				cf->last_name_id--;
   122e8:	3b01      	subs	r3, #1
   122ea:	4642      	mov	r2, r8
   122ec:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   122f0:	2302      	movs	r3, #2
   122f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   122f6:	4638      	mov	r0, r7
   122f8:	f7ff fc8a 	bl	11c10 <nvs_write>
   122fc:	e7b5      	b.n	1226a <settings_nvs_load+0x26>
   122fe:	bf00      	nop
   12300:	00023265 	.word	0x00023265

00012304 <settings_nvs_src>:
{
   12304:	b508      	push	{r3, lr}
	cf->cf_store.cs_itf = &settings_nvs_itf;
   12306:	4b03      	ldr	r3, [pc, #12]	; (12314 <settings_nvs_src+0x10>)
   12308:	6043      	str	r3, [r0, #4]
	settings_src_register(&cf->cf_store);
   1230a:	f7ff fe29 	bl	11f60 <settings_src_register>
}
   1230e:	2000      	movs	r0, #0
   12310:	bd08      	pop	{r3, pc}
   12312:	bf00      	nop
   12314:	200004f0 	.word	0x200004f0

00012318 <settings_nvs_dst>:
{
   12318:	b508      	push	{r3, lr}
	cf->cf_store.cs_itf = &settings_nvs_itf;
   1231a:	4b03      	ldr	r3, [pc, #12]	; (12328 <settings_nvs_dst+0x10>)
   1231c:	6043      	str	r3, [r0, #4]
	settings_dst_register(&cf->cf_store);
   1231e:	f7ff fe2f 	bl	11f80 <settings_dst_register>
}
   12322:	2000      	movs	r0, #0
   12324:	bd08      	pop	{r3, pc}
   12326:	bf00      	nop
   12328:	200004f0 	.word	0x200004f0

0001232c <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
   1232c:	b510      	push	{r4, lr}
   1232e:	b084      	sub	sp, #16
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
   12330:	2301      	movs	r3, #1
   12332:	9300      	str	r3, [sp, #0]

	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
   12334:	a903      	add	r1, sp, #12
   12336:	2004      	movs	r0, #4
   12338:	f7ff fdcc 	bl	11ed4 <flash_area_open>
	if (rc) {
   1233c:	4603      	mov	r3, r0
   1233e:	b110      	cbz	r0, 12346 <settings_backend_init+0x1a>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
   12340:	4618      	mov	r0, r3
   12342:	b004      	add	sp, #16
   12344:	bd10      	pop	{r4, pc}
	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
   12346:	aa01      	add	r2, sp, #4
   12348:	4669      	mov	r1, sp
   1234a:	2004      	movs	r0, #4
   1234c:	f7ff fdd6 	bl	11efc <flash_area_get_sectors>
   12350:	4603      	mov	r3, r0
	if (rc == -ENODEV) {
   12352:	f110 0f13 	cmn.w	r0, #19
   12356:	d0f3      	beq.n	12340 <settings_backend_init+0x14>
	} else if (rc != 0 && rc != -ENOMEM) {
   12358:	b140      	cbz	r0, 1236c <settings_backend_init+0x40>
   1235a:	f110 0f0c 	cmn.w	r0, #12
   1235e:	d005      	beq.n	1236c <settings_backend_init+0x40>
		k_panic();
   12360:	4040      	eors	r0, r0
   12362:	f380 8811 	msr	BASEPRI, r0
   12366:	f04f 0004 	mov.w	r0, #4
   1236a:	df02      	svc	2
	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
   1236c:	9c02      	ldr	r4, [sp, #8]
	if (nvs_sector_size > UINT16_MAX) {
   1236e:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   12372:	d223      	bcs.n	123bc <settings_backend_init+0x90>
	size_t nvs_sector_size, nvs_size = 0;
   12374:	2200      	movs	r2, #0
	uint16_t cnt = 0;
   12376:	4613      	mov	r3, r2
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
   12378:	2b07      	cmp	r3, #7
   1237a:	d807      	bhi.n	1238c <settings_backend_init+0x60>
		nvs_size += nvs_sector_size;
   1237c:	4422      	add	r2, r4
		if (nvs_size > fa->fa_size) {
   1237e:	9903      	ldr	r1, [sp, #12]
   12380:	6889      	ldr	r1, [r1, #8]
   12382:	4291      	cmp	r1, r2
   12384:	d302      	bcc.n	1238c <settings_backend_init+0x60>
		cnt++;
   12386:	3301      	adds	r3, #1
   12388:	b29b      	uxth	r3, r3
   1238a:	e7f5      	b.n	12378 <settings_backend_init+0x4c>
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   1238c:	480d      	ldr	r0, [pc, #52]	; (123c4 <settings_backend_init+0x98>)
   1238e:	8284      	strh	r4, [r0, #20]
	default_settings_nvs.cf_nvs.sector_count = cnt;
   12390:	82c3      	strh	r3, [r0, #22]
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   12392:	9b03      	ldr	r3, [sp, #12]
   12394:	685a      	ldr	r2, [r3, #4]
   12396:	6082      	str	r2, [r0, #8]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
   12398:	68db      	ldr	r3, [r3, #12]
   1239a:	63c3      	str	r3, [r0, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
   1239c:	f011 f811 	bl	233c2 <settings_nvs_backend_init>
	if (rc) {
   123a0:	4603      	mov	r3, r0
   123a2:	2800      	cmp	r0, #0
   123a4:	d1cc      	bne.n	12340 <settings_backend_init+0x14>
	rc = settings_nvs_src(&default_settings_nvs);
   123a6:	4807      	ldr	r0, [pc, #28]	; (123c4 <settings_backend_init+0x98>)
   123a8:	f7ff ffac 	bl	12304 <settings_nvs_src>
	if (rc) {
   123ac:	4603      	mov	r3, r0
   123ae:	2800      	cmp	r0, #0
   123b0:	d1c6      	bne.n	12340 <settings_backend_init+0x14>
	rc = settings_nvs_dst(&default_settings_nvs);
   123b2:	4804      	ldr	r0, [pc, #16]	; (123c4 <settings_backend_init+0x98>)
   123b4:	f7ff ffb0 	bl	12318 <settings_nvs_dst>
   123b8:	4603      	mov	r3, r0
	return rc;
   123ba:	e7c1      	b.n	12340 <settings_backend_init+0x14>
		return -EDOM;
   123bc:	f06f 0320 	mvn.w	r3, #32
   123c0:	e7be      	b.n	12340 <settings_backend_init+0x14>
   123c2:	bf00      	nop
   123c4:	200024bc 	.word	0x200024bc

000123c8 <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
   123c8:	b538      	push	{r3, r4, r5, lr}
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
   123ca:	4b13      	ldr	r3, [pc, #76]	; (12418 <pm_system_resume+0x50>)
   123cc:	681b      	ldr	r3, [r3, #0]
   123ce:	b103      	cbz	r3, 123d2 <pm_system_resume+0xa>
		post_ops_done = 1;
		pm_power_state_exit_post_ops(z_power_state);
		pm_state_notify(false);
	}
}
   123d0:	bd38      	pop	{r3, r4, r5, pc}
		post_ops_done = 1;
   123d2:	4b11      	ldr	r3, [pc, #68]	; (12418 <pm_system_resume+0x50>)
   123d4:	2201      	movs	r2, #1
   123d6:	601a      	str	r2, [r3, #0]
		pm_power_state_exit_post_ops(z_power_state);
   123d8:	4b10      	ldr	r3, [pc, #64]	; (1241c <pm_system_resume+0x54>)
   123da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   123de:	f012 fba0 	bl	24b22 <pm_power_state_exit_post_ops>
	__asm__ volatile(
   123e2:	f04f 0340 	mov.w	r3, #64	; 0x40
   123e6:	f3ef 8511 	mrs	r5, BASEPRI
   123ea:	f383 8811 	msr	BASEPRI, r3
   123ee:	f3bf 8f6f 	isb	sy
	return list->head;
   123f2:	4b0b      	ldr	r3, [pc, #44]	; (12420 <pm_system_resume+0x58>)
   123f4:	681c      	ldr	r4, [r3, #0]
   123f6:	e002      	b.n	123fe <pm_system_resume+0x36>
Z_GENLIST_PEEK_NEXT(slist, snode)
   123f8:	b10c      	cbz	r4, 123fe <pm_system_resume+0x36>
	return node->next;
   123fa:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   123fc:	b13c      	cbz	r4, 1240e <pm_system_resume+0x46>
   123fe:	b134      	cbz	r4, 1240e <pm_system_resume+0x46>
			callback = notifier->state_exit;
   12400:	68a3      	ldr	r3, [r4, #8]
		if (callback) {
   12402:	2b00      	cmp	r3, #0
   12404:	d0f8      	beq.n	123f8 <pm_system_resume+0x30>
			callback(z_power_state.state);
   12406:	4a05      	ldr	r2, [pc, #20]	; (1241c <pm_system_resume+0x54>)
   12408:	7810      	ldrb	r0, [r2, #0]
   1240a:	4798      	blx	r3
   1240c:	e7f4      	b.n	123f8 <pm_system_resume+0x30>
	__asm__ volatile(
   1240e:	f385 8811 	msr	BASEPRI, r5
   12412:	f3bf 8f6f 	isb	sy
}
   12416:	e7db      	b.n	123d0 <pm_system_resume+0x8>
   12418:	20000500 	.word	0x20000500
   1241c:	20002504 	.word	0x20002504
   12420:	200024fc 	.word	0x200024fc

00012424 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
   12424:	b570      	push	{r4, r5, r6, lr}
   12426:	b084      	sub	sp, #16
   12428:	4606      	mov	r6, r0
	z_power_state = pm_policy_next_state(ticks);
   1242a:	4c27      	ldr	r4, [pc, #156]	; (124c8 <pm_system_suspend+0xa4>)
   1242c:	466d      	mov	r5, sp
   1242e:	4601      	mov	r1, r0
   12430:	4628      	mov	r0, r5
   12432:	f010 ffe6 	bl	23402 <pm_policy_next_state>
   12436:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   1243a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
   1243e:	7820      	ldrb	r0, [r4, #0]
   12440:	2800      	cmp	r0, #0
   12442:	d03f      	beq.n	124c4 <pm_system_suspend+0xa0>
		LOG_DBG("No PM operations done.");
		return z_power_state.state;
	}
	post_ops_done = 0;
   12444:	4b21      	ldr	r3, [pc, #132]	; (124cc <pm_system_suspend+0xa8>)
   12446:	2200      	movs	r2, #0
   12448:	601a      	str	r2, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
   1244a:	f1b6 3fff 	cmp.w	r6, #4294967295
   1244e:	d10c      	bne.n	1246a <pm_system_suspend+0x46>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   12450:	f00d ff34 	bl	202bc <k_sched_lock>
	__asm__ volatile(
   12454:	f04f 0340 	mov.w	r3, #64	; 0x40
   12458:	f3ef 8511 	mrs	r5, BASEPRI
   1245c:	f383 8811 	msr	BASEPRI, r3
   12460:	f3bf 8f6f 	isb	sy
	return list->head;
   12464:	4b1a      	ldr	r3, [pc, #104]	; (124d0 <pm_system_suspend+0xac>)
   12466:	681c      	ldr	r4, [r3, #0]
   12468:	e016      	b.n	12498 <pm_system_suspend+0x74>
		     k_us_to_ticks_ceil32(z_power_state.exit_latency_us), true);
   1246a:	68a3      	ldr	r3, [r4, #8]
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   1246c:	0c59      	lsrs	r1, r3, #17
   1246e:	03d8      	lsls	r0, r3, #15
   12470:	4c18      	ldr	r4, [pc, #96]	; (124d4 <pm_system_suspend+0xb0>)
   12472:	4a19      	ldr	r2, [pc, #100]	; (124d8 <pm_system_suspend+0xb4>)
   12474:	2300      	movs	r3, #0
   12476:	1900      	adds	r0, r0, r4
   12478:	f04f 0400 	mov.w	r4, #0
   1247c:	eb44 0101 	adc.w	r1, r4, r1
   12480:	f7ed fe2c 	bl	dc <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   12484:	2101      	movs	r1, #1
   12486:	1a30      	subs	r0, r6, r0
   12488:	f017 fa8c 	bl	299a4 <z_set_timeout_expiry>
   1248c:	e7e0      	b.n	12450 <pm_system_suspend+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   1248e:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   12490:	b10c      	cbz	r4, 12496 <pm_system_suspend+0x72>
	return node->next;
   12492:	6823      	ldr	r3, [r4, #0]
   12494:	b143      	cbz	r3, 124a8 <pm_system_suspend+0x84>
{
   12496:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   12498:	b134      	cbz	r4, 124a8 <pm_system_suspend+0x84>
			callback = notifier->state_entry;
   1249a:	6863      	ldr	r3, [r4, #4]
		if (callback) {
   1249c:	2b00      	cmp	r3, #0
   1249e:	d0f6      	beq.n	1248e <pm_system_suspend+0x6a>
			callback(z_power_state.state);
   124a0:	4a09      	ldr	r2, [pc, #36]	; (124c8 <pm_system_suspend+0xa4>)
   124a2:	7810      	ldrb	r0, [r2, #0]
   124a4:	4798      	blx	r3
   124a6:	e7f2      	b.n	1248e <pm_system_suspend+0x6a>
	__asm__ volatile(
   124a8:	f385 8811 	msr	BASEPRI, r5
   124ac:	f3bf 8f6f 	isb	sy
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
	pm_power_state_set(z_power_state);
   124b0:	4c05      	ldr	r4, [pc, #20]	; (124c8 <pm_system_suspend+0xa4>)
   124b2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   124b6:	f012 fb21 	bl	24afc <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
   124ba:	f7ff ff85 	bl	123c8 <pm_system_resume>
	k_sched_unlock();
   124be:	f00d ffad 	bl	2041c <k_sched_unlock>

	return z_power_state.state;
   124c2:	7820      	ldrb	r0, [r4, #0]
}
   124c4:	b004      	add	sp, #16
   124c6:	bd70      	pop	{r4, r5, r6, pc}
   124c8:	20002504 	.word	0x20002504
   124cc:	20000500 	.word	0x20000500
   124d0:	200024fc 	.word	0x200024fc
   124d4:	000f423f 	.word	0x000f423f
   124d8:	000f4240 	.word	0x000f4240

000124dc <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
   124dc:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
   124de:	4c04      	ldr	r4, [pc, #16]	; (124f0 <rtt_console_init+0x14>)
   124e0:	4620      	mov	r0, r4
   124e2:	f7fd fd9b 	bl	1001c <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
   124e6:	4620      	mov	r0, r4
   124e8:	f001 fe72 	bl	141d0 <__stdout_hook_install>

	return 0;
}
   124ec:	2000      	movs	r0, #0
   124ee:	bd10      	pop	{r4, pc}
   124f0:	000124f5 	.word	0x000124f5

000124f4 <rtt_console_out>:
{
   124f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   124f6:	b083      	sub	sp, #12
   124f8:	4607      	mov	r7, r0
	char c = (char)character;
   124fa:	f88d 0007 	strb.w	r0, [sp, #7]
	int max_cnt = CONFIG_RTT_TX_RETRY_CNT;
   124fe:	2602      	movs	r6, #2
   12500:	e006      	b.n	12510 <rtt_console_out+0x1c>
			host_present = true;
   12502:	4b13      	ldr	r3, [pc, #76]	; (12550 <rtt_console_out+0x5c>)
   12504:	2201      	movs	r2, #1
   12506:	701a      	strb	r2, [r3, #0]
   12508:	e01e      	b.n	12548 <rtt_console_out+0x54>
				wait();
   1250a:	f010 ff7f 	bl	2340c <wait>
				max_cnt--;
   1250e:	3e01      	subs	r6, #1
	return z_impl_k_mutex_lock(mutex, timeout);
   12510:	4d10      	ldr	r5, [pc, #64]	; (12554 <rtt_console_out+0x60>)
   12512:	f04f 32ff 	mov.w	r2, #4294967295
   12516:	f04f 33ff 	mov.w	r3, #4294967295
   1251a:	4628      	mov	r0, r5
   1251c:	f00d fb02 	bl	1fb24 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
   12520:	2201      	movs	r2, #1
   12522:	f10d 0107 	add.w	r1, sp, #7
   12526:	2000      	movs	r0, #0
   12528:	f00c fe94 	bl	1f254 <SEGGER_RTT_WriteNoLock>
   1252c:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   1252e:	4628      	mov	r0, r5
   12530:	f00d fb82 	bl	1fc38 <z_impl_k_mutex_unlock>
		if (cnt) {
   12534:	2c00      	cmp	r4, #0
   12536:	d1e4      	bne.n	12502 <rtt_console_out+0xe>
		} else if (host_present) {
   12538:	4b05      	ldr	r3, [pc, #20]	; (12550 <rtt_console_out+0x5c>)
   1253a:	781b      	ldrb	r3, [r3, #0]
   1253c:	b123      	cbz	r3, 12548 <rtt_console_out+0x54>
			if (max_cnt) {
   1253e:	2e00      	cmp	r6, #0
   12540:	d1e3      	bne.n	1250a <rtt_console_out+0x16>
				host_present = false;
   12542:	4b03      	ldr	r3, [pc, #12]	; (12550 <rtt_console_out+0x5c>)
   12544:	2200      	movs	r2, #0
   12546:	701a      	strb	r2, [r3, #0]
}
   12548:	4638      	mov	r0, r7
   1254a:	b003      	add	sp, #12
   1254c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1254e:	bf00      	nop
   12550:	2000398b 	.word	0x2000398b
   12554:	2000074c 	.word	0x2000074c

00012558 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
   12558:	4800      	ldr	r0, [pc, #0]	; (1255c <get_hf_flags+0x4>)
   1255a:	4770      	bx	lr
   1255c:	20002564 	.word	0x20002564

00012560 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   12560:	4b03      	ldr	r3, [pc, #12]	; (12570 <get_subsys+0x10>)
   12562:	1ac0      	subs	r0, r0, r3
   12564:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
   12566:	4b03      	ldr	r3, [pc, #12]	; (12574 <get_subsys+0x14>)
   12568:	fb03 f000 	mul.w	r0, r3, r0
   1256c:	4770      	bx	lr
   1256e:	bf00      	nop
   12570:	20002524 	.word	0x20002524
   12574:	b6db6db7 	.word	0xb6db6db7

00012578 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   12578:	b538      	push	{r3, r4, r5, lr}
   1257a:	4605      	mov	r5, r0
   1257c:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1257e:	f7ff ffef 	bl	12560 <get_subsys>
   12582:	4601      	mov	r1, r0
   12584:	2240      	movs	r2, #64	; 0x40
   12586:	4803      	ldr	r0, [pc, #12]	; (12594 <onoff_stop+0x1c>)
   12588:	f010 ffc3 	bl	23512 <stop>
   1258c:	4601      	mov	r1, r0
	notify(mgr, res);
   1258e:	4628      	mov	r0, r5
   12590:	47a0      	blx	r4
}
   12592:	bd38      	pop	{r3, r4, r5, pc}
   12594:	2000066c 	.word	0x2000066c

00012598 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   12598:	b530      	push	{r4, r5, lr}
   1259a:	b083      	sub	sp, #12
   1259c:	4605      	mov	r5, r0
   1259e:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   125a0:	f7ff ffde 	bl	12560 <get_subsys>
   125a4:	4601      	mov	r1, r0
   125a6:	2340      	movs	r3, #64	; 0x40
   125a8:	9300      	str	r3, [sp, #0]
   125aa:	4623      	mov	r3, r4
   125ac:	4a05      	ldr	r2, [pc, #20]	; (125c4 <onoff_start+0x2c>)
   125ae:	4806      	ldr	r0, [pc, #24]	; (125c8 <onoff_start+0x30>)
   125b0:	f010 ffc9 	bl	23546 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   125b4:	1e01      	subs	r1, r0, #0
   125b6:	db01      	blt.n	125bc <onoff_start+0x24>
		notify(mgr, err);
	}
}
   125b8:	b003      	add	sp, #12
   125ba:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
   125bc:	4628      	mov	r0, r5
   125be:	47a0      	blx	r4
}
   125c0:	e7fa      	b.n	125b8 <onoff_start+0x20>
   125c2:	bf00      	nop
   125c4:	0002358f 	.word	0x0002358f
   125c8:	2000066c 	.word	0x2000066c

000125cc <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
   125cc:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
   125ce:	b110      	cbz	r0, 125d6 <clock_event_handler+0xa>
   125d0:	2801      	cmp	r0, #1
   125d2:	d00d      	beq.n	125f0 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
   125d4:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   125d6:	2100      	movs	r1, #0
   125d8:	4808      	ldr	r0, [pc, #32]	; (125fc <clock_event_handler+0x30>)
   125da:	f010 ff21 	bl	23420 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   125de:	6883      	ldr	r3, [r0, #8]
   125e0:	f013 0f07 	tst.w	r3, #7
   125e4:	d1f6      	bne.n	125d4 <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   125e6:	2100      	movs	r1, #0
   125e8:	4804      	ldr	r0, [pc, #16]	; (125fc <clock_event_handler+0x30>)
   125ea:	f010 ff80 	bl	234ee <clkstarted_handle>
   125ee:	e7f1      	b.n	125d4 <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   125f0:	2101      	movs	r1, #1
   125f2:	4802      	ldr	r0, [pc, #8]	; (125fc <clock_event_handler+0x30>)
   125f4:	f010 ff7b 	bl	234ee <clkstarted_handle>
}
   125f8:	e7ec      	b.n	125d4 <clock_event_handler+0x8>
   125fa:	bf00      	nop
   125fc:	2000066c 	.word	0x2000066c

00012600 <generic_hfclk_start>:
{
   12600:	b510      	push	{r4, lr}
	__asm__ volatile(
   12602:	f04f 0340 	mov.w	r3, #64	; 0x40
   12606:	f3ef 8411 	mrs	r4, BASEPRI
   1260a:	f383 8811 	msr	BASEPRI, r3
   1260e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   12612:	4a13      	ldr	r2, [pc, #76]	; (12660 <generic_hfclk_start+0x60>)
   12614:	6813      	ldr	r3, [r2, #0]
   12616:	f043 0302 	orr.w	r3, r3, #2
   1261a:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1261c:	f013 0f01 	tst.w	r3, #1
   12620:	d108      	bne.n	12634 <generic_hfclk_start+0x34>
	bool already_started = false;
   12622:	2300      	movs	r3, #0
	__asm__ volatile(
   12624:	f384 8811 	msr	BASEPRI, r4
   12628:	f3bf 8f6f 	isb	sy
	if (already_started) {
   1262c:	b99b      	cbnz	r3, 12656 <generic_hfclk_start+0x56>
	hfclk_start();
   1262e:	f010 ffb6 	bl	2359e <hfclk_start>
}
   12632:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   12634:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12638:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1263c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   12640:	f012 0f01 	tst.w	r2, #1
   12644:	d101      	bne.n	1264a <generic_hfclk_start+0x4a>
	bool already_started = false;
   12646:	2300      	movs	r3, #0
   12648:	e7ec      	b.n	12624 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
   1264a:	f7ff ff85 	bl	12558 <get_hf_flags>
   1264e:	f010 ff3b 	bl	234c8 <set_on_state>
			already_started = true;
   12652:	2301      	movs	r3, #1
   12654:	e7e6      	b.n	12624 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
   12656:	2100      	movs	r1, #0
   12658:	4802      	ldr	r0, [pc, #8]	; (12664 <generic_hfclk_start+0x64>)
   1265a:	f010 ff48 	bl	234ee <clkstarted_handle>
		return;
   1265e:	e7e8      	b.n	12632 <generic_hfclk_start+0x32>
   12660:	20002574 	.word	0x20002574
   12664:	2000066c 	.word	0x2000066c

00012668 <generic_hfclk_stop>:
{
   12668:	b508      	push	{r3, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1266a:	4b0a      	ldr	r3, [pc, #40]	; (12694 <generic_hfclk_stop+0x2c>)
   1266c:	f3bf 8f5b 	dmb	ish
   12670:	e853 2f00 	ldrex	r2, [r3]
   12674:	f022 0102 	bic.w	r1, r2, #2
   12678:	e843 1000 	strex	r0, r1, [r3]
   1267c:	2800      	cmp	r0, #0
   1267e:	d1f7      	bne.n	12670 <generic_hfclk_stop+0x8>
   12680:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   12684:	f012 0f01 	tst.w	r2, #1
   12688:	d000      	beq.n	1268c <generic_hfclk_stop+0x24>
}
   1268a:	bd08      	pop	{r3, pc}
	hfclk_stop();
   1268c:	f010 ff8c 	bl	235a8 <hfclk_stop>
   12690:	e7fb      	b.n	1268a <generic_hfclk_stop+0x22>
   12692:	bf00      	nop
   12694:	20002574 	.word	0x20002574

00012698 <api_blocking_start>:
{
   12698:	b500      	push	{lr}
   1269a:	b087      	sub	sp, #28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1269c:	f8cd d000 	str.w	sp, [sp]
   126a0:	f8cd d004 	str.w	sp, [sp, #4]
   126a4:	2300      	movs	r3, #0
   126a6:	9302      	str	r3, [sp, #8]
   126a8:	2301      	movs	r3, #1
   126aa:	9303      	str	r3, [sp, #12]
   126ac:	ab04      	add	r3, sp, #16
   126ae:	9304      	str	r3, [sp, #16]
   126b0:	9305      	str	r3, [sp, #20]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   126b2:	466b      	mov	r3, sp
   126b4:	4a06      	ldr	r2, [pc, #24]	; (126d0 <api_blocking_start+0x38>)
   126b6:	f010 ff62 	bl	2357e <api_start>
	if (err < 0) {
   126ba:	2800      	cmp	r0, #0
   126bc:	db05      	blt.n	126ca <api_blocking_start+0x32>
	return z_impl_k_sem_take(sem, timeout);
   126be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   126c2:	2300      	movs	r3, #0
   126c4:	4668      	mov	r0, sp
   126c6:	f00d fb5f 	bl	1fd88 <z_impl_k_sem_take>
}
   126ca:	b007      	add	sp, #28
   126cc:	f85d fb04 	ldr.w	pc, [sp], #4
   126d0:	000235bd 	.word	0x000235bd

000126d4 <lfclk_start>:
{
   126d4:	b508      	push	{r3, lr}
	if (!once) {
   126d6:	4b07      	ldr	r3, [pc, #28]	; (126f4 <lfclk_start+0x20>)
   126d8:	781b      	ldrb	r3, [r3, #0]
   126da:	b11b      	cbz	r3, 126e4 <lfclk_start+0x10>
}
#endif // defined(CLOCK_FEATURE_HFCLK_DIVIDE_PRESENT) || NRF_CLOCK_HAS_HFCLK_192M

NRFX_STATIC_INLINE void nrfx_clock_lfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   126dc:	2000      	movs	r0, #0
   126de:	f00c f9db 	bl	1ea98 <nrfx_clock_start>
}
   126e2:	bd08      	pop	{r3, pc}
	z_impl_k_busy_wait(usec_to_wait);
   126e4:	f44f 70a5 	mov.w	r0, #330	; 0x14a
   126e8:	f017 f98b 	bl	29a02 <z_impl_k_busy_wait>
		once = true;
   126ec:	4b01      	ldr	r3, [pc, #4]	; (126f4 <lfclk_start+0x20>)
   126ee:	2201      	movs	r2, #1
   126f0:	701a      	strb	r2, [r3, #0]
   126f2:	e7f3      	b.n	126dc <lfclk_start+0x8>
   126f4:	2000398c 	.word	0x2000398c

000126f8 <clk_init>:

static int clk_init(const struct device *dev)
{
   126f8:	b570      	push	{r4, r5, r6, lr}
   126fa:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   126fc:	2200      	movs	r2, #0
   126fe:	2101      	movs	r1, #1
   12700:	4610      	mov	r0, r2
   12702:	f000 ff11 	bl	13528 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   12706:	2000      	movs	r0, #0
   12708:	f000 fedc 	bl	134c4 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1270c:	4811      	ldr	r0, [pc, #68]	; (12754 <clk_init+0x5c>)
   1270e:	f00c f9d5 	bl	1eabc <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   12712:	4b11      	ldr	r3, [pc, #68]	; (12758 <clk_init+0x60>)
   12714:	4298      	cmp	r0, r3
   12716:	d11a      	bne.n	1274e <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   12718:	f016 fb37 	bl	28d8a <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
   1271c:	2400      	movs	r4, #0
   1271e:	e003      	b.n	12728 <clk_init+0x30>
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   12720:	2301      	movs	r3, #1
   12722:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   12724:	441c      	add	r4, r3
   12726:	b2e4      	uxtb	r4, r4
	for (enum clock_control_nrf_type i = 0;
   12728:	2c01      	cmp	r4, #1
   1272a:	d80e      	bhi.n	1274a <clk_init+0x52>
						get_sub_data(dev, i);
   1272c:	4621      	mov	r1, r4
   1272e:	4630      	mov	r0, r6
   12730:	f010 fe76 	bl	23420 <get_sub_data>
   12734:	4605      	mov	r5, r0
		err = onoff_manager_init(get_onoff_manager(dev, i),
   12736:	4621      	mov	r1, r4
   12738:	4630      	mov	r0, r6
   1273a:	f010 fe7e 	bl	2343a <get_onoff_manager>
   1273e:	4907      	ldr	r1, [pc, #28]	; (1275c <clk_init+0x64>)
   12740:	f00f f81b 	bl	2177a <onoff_manager_init>
		if (err < 0) {
   12744:	2800      	cmp	r0, #0
   12746:	daeb      	bge.n	12720 <clk_init+0x28>
   12748:	e000      	b.n	1274c <clk_init+0x54>
	}

	return 0;
   1274a:	2000      	movs	r0, #0
}
   1274c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1274e:	f06f 0004 	mvn.w	r0, #4
   12752:	e7fb      	b.n	1274c <clk_init+0x54>
   12754:	000125cd 	.word	0x000125cd
   12758:	0bad0000 	.word	0x0bad0000
   1275c:	0002a920 	.word	0x0002a920

00012760 <lfclk_spinwait>:
{
   12760:	b570      	push	{r4, r5, r6, lr}
   12762:	4605      	mov	r5, r0
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   12764:	f016 fc96 	bl	29094 <k_is_in_isr>
   12768:	b920      	cbnz	r0, 12774 <lfclk_spinwait+0x14>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   1276a:	4b21      	ldr	r3, [pc, #132]	; (127f0 <lfclk_spinwait+0x90>)
   1276c:	781b      	ldrb	r3, [r3, #0]
   1276e:	b19b      	cbz	r3, 12798 <lfclk_spinwait+0x38>
   12770:	2300      	movs	r3, #0
   12772:	e000      	b.n	12776 <lfclk_spinwait+0x16>
   12774:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
   12776:	461c      	mov	r4, r3
   12778:	b183      	cbz	r3, 1279c <lfclk_spinwait+0x3c>
	__asm__ volatile(
   1277a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1277e:	f3ef 8611 	mrs	r6, BASEPRI
   12782:	f383 8811 	msr	BASEPRI, r3
   12786:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
   1278a:	b96c      	cbnz	r4, 127a8 <lfclk_spinwait+0x48>
    p_reg->INTENCLR = mask;
   1278c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12790:	2202      	movs	r2, #2
   12792:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   12796:	e007      	b.n	127a8 <lfclk_spinwait+0x48>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   12798:	2301      	movs	r3, #1
   1279a:	e7ec      	b.n	12776 <lfclk_spinwait+0x16>
	int key = isr_mode ? irq_lock() : 0;
   1279c:	2600      	movs	r6, #0
   1279e:	e7f4      	b.n	1278a <lfclk_spinwait+0x2a>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   127a0:	b1cc      	cbz	r4, 127d6 <lfclk_spinwait+0x76>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   127a2:	4630      	mov	r0, r6
   127a4:	f000 ff64 	bl	13670 <arch_cpu_atomic_idle>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   127a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   127ac:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   127b0:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   127b4:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   127b8:	f412 3f80 	tst.w	r2, #65536	; 0x10000
   127bc:	d110      	bne.n	127e0 <lfclk_spinwait+0x80>
#endif
        default:
            NRFX_ASSERT(0);
            return false;
    }
    return false;
   127be:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
   127c0:	2a00      	cmp	r2, #0
   127c2:	d0ed      	beq.n	127a0 <lfclk_spinwait+0x40>
   127c4:	b10b      	cbz	r3, 127ca <lfclk_spinwait+0x6a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   127c6:	2d01      	cmp	r5, #1
   127c8:	d1ea      	bne.n	127a0 <lfclk_spinwait+0x40>
	if (isr_mode) {
   127ca:	b15c      	cbz	r4, 127e4 <lfclk_spinwait+0x84>
	__asm__ volatile(
   127cc:	f386 8811 	msr	BASEPRI, r6
   127d0:	f3bf 8f6f 	isb	sy
}
   127d4:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sleep(timeout);
   127d6:	2021      	movs	r0, #33	; 0x21
   127d8:	2100      	movs	r1, #0
   127da:	f00e f885 	bl	208e8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   127de:	e7e3      	b.n	127a8 <lfclk_spinwait+0x48>
                return true;
   127e0:	2201      	movs	r2, #1
   127e2:	e7ed      	b.n	127c0 <lfclk_spinwait+0x60>
    p_reg->INTENSET = mask;
   127e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   127e8:	2202      	movs	r2, #2
   127ea:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   127ee:	e7f1      	b.n	127d4 <lfclk_spinwait+0x74>
   127f0:	20003991 	.word	0x20003991

000127f4 <z_nrf_clock_control_get_onoff>:
{
   127f4:	b508      	push	{r3, lr}
	return get_onoff_manager(CLOCK_DEVICE,
   127f6:	b2c1      	uxtb	r1, r0
   127f8:	4801      	ldr	r0, [pc, #4]	; (12800 <z_nrf_clock_control_get_onoff+0xc>)
   127fa:	f010 fe1e 	bl	2343a <get_onoff_manager>
}
   127fe:	bd08      	pop	{r3, pc}
   12800:	2000066c 	.word	0x2000066c

00012804 <z_nrf_clock_control_lf_on>:
{
   12804:	b510      	push	{r4, lr}
   12806:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12808:	4b10      	ldr	r3, [pc, #64]	; (1284c <z_nrf_clock_control_lf_on+0x48>)
   1280a:	2101      	movs	r1, #1
   1280c:	f3bf 8f5b 	dmb	ish
   12810:	e853 2f00 	ldrex	r2, [r3]
   12814:	e843 1000 	strex	r0, r1, [r3]
   12818:	2800      	cmp	r0, #0
   1281a:	d1f9      	bne.n	12810 <z_nrf_clock_control_lf_on+0xc>
   1281c:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   12820:	b11a      	cbz	r2, 1282a <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
   12822:	1e63      	subs	r3, r4, #1
   12824:	2b01      	cmp	r3, #1
   12826:	d90c      	bls.n	12842 <z_nrf_clock_control_lf_on+0x3e>
}
   12828:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
   1282a:	4809      	ldr	r0, [pc, #36]	; (12850 <z_nrf_clock_control_lf_on+0x4c>)
   1282c:	f010 fe05 	bl	2343a <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   12830:	4908      	ldr	r1, [pc, #32]	; (12854 <z_nrf_clock_control_lf_on+0x50>)
   12832:	2300      	movs	r3, #0
   12834:	604b      	str	r3, [r1, #4]
   12836:	60cb      	str	r3, [r1, #12]
   12838:	2301      	movs	r3, #1
   1283a:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
   1283c:	f00e ffb9 	bl	217b2 <onoff_request>
   12840:	e7ef      	b.n	12822 <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
   12842:	4620      	mov	r0, r4
   12844:	f7ff ff8c 	bl	12760 <lfclk_spinwait>
		break;
   12848:	e7ee      	b.n	12828 <z_nrf_clock_control_lf_on+0x24>
   1284a:	bf00      	nop
   1284c:	20002578 	.word	0x20002578
   12850:	2000066c 	.word	0x2000066c
   12854:	20002514 	.word	0x20002514

00012858 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   12858:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   1285c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   12860:	4b01      	ldr	r3, [pc, #4]	; (12868 <set_comparator+0x10>)
   12862:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
   12866:	4770      	bx	lr
   12868:	40011000 	.word	0x40011000

0001286c <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   1286c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   12870:	4b01      	ldr	r3, [pc, #4]	; (12878 <get_comparator+0xc>)
   12872:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
   12876:	4770      	bx	lr
   12878:	40011000 	.word	0x40011000

0001287c <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1287c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   12880:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   12882:	4a02      	ldr	r2, [pc, #8]	; (1288c <event_enable+0x10>)
   12884:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
   12888:	4770      	bx	lr
   1288a:	bf00      	nop
   1288c:	40011000 	.word	0x40011000

00012890 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   12890:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   12894:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   12896:	4a02      	ldr	r2, [pc, #8]	; (128a0 <event_disable+0x10>)
   12898:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
   1289c:	4770      	bx	lr
   1289e:	bf00      	nop
   128a0:	40011000 	.word	0x40011000

000128a4 <counter>:
     return p_reg->COUNTER;
   128a4:	4b01      	ldr	r3, [pc, #4]	; (128ac <counter+0x8>)
   128a6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
   128aa:	4770      	bx	lr
   128ac:	40011000 	.word	0x40011000

000128b0 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   128b0:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   128b2:	2400      	movs	r4, #0
   128b4:	2c00      	cmp	r4, #0
   128b6:	dd00      	ble.n	128ba <rtc_nrf_isr+0xa>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
   128b8:	bd38      	pop	{r3, r4, r5, pc}
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
   128ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   128be:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
   128c0:	4a14      	ldr	r2, [pc, #80]	; (12914 <rtc_nrf_isr+0x64>)
   128c2:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   128c6:	4213      	tst	r3, r2
   128c8:	d009      	beq.n	128de <rtc_nrf_isr+0x2e>
		    nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan))) {
   128ca:	f104 0350 	add.w	r3, r4, #80	; 0x50
   128ce:	009b      	lsls	r3, r3, #2
   128d0:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   128d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   128d6:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   128da:	681b      	ldr	r3, [r3, #0]
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
   128dc:	b90b      	cbnz	r3, 128e2 <rtc_nrf_isr+0x32>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   128de:	3401      	adds	r4, #1
   128e0:	e7e8      	b.n	128b4 <rtc_nrf_isr+0x4>
			event_clear(chan);
   128e2:	4620      	mov	r0, r4
   128e4:	f010 fe75 	bl	235d2 <event_clear>
			event_disable(chan);
   128e8:	4620      	mov	r0, r4
   128ea:	f7ff ffd1 	bl	12890 <event_disable>
			cc_val = get_comparator(chan);
   128ee:	4620      	mov	r0, r4
   128f0:	f7ff ffbc 	bl	1286c <get_comparator>
   128f4:	4601      	mov	r1, r0
			handler = cc_data[chan].callback;
   128f6:	4b08      	ldr	r3, [pc, #32]	; (12918 <rtc_nrf_isr+0x68>)
   128f8:	f853 5034 	ldr.w	r5, [r3, r4, lsl #3]
			cc_data[chan].callback = NULL;
   128fc:	2200      	movs	r2, #0
   128fe:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
			if (handler) {
   12902:	2d00      	cmp	r5, #0
   12904:	d0eb      	beq.n	128de <rtc_nrf_isr+0x2e>
				handler(chan, cc_val,
   12906:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1290a:	685a      	ldr	r2, [r3, #4]
   1290c:	4620      	mov	r0, r4
   1290e:	47a8      	blx	r5
   12910:	e7e5      	b.n	128de <rtc_nrf_isr+0x2e>
   12912:	bf00      	nop
   12914:	40011000 	.word	0x40011000
   12918:	20002580 	.word	0x20002580

0001291c <compare_set>:
{
   1291c:	b538      	push	{r3, r4, r5, lr}
	cc_data[chan].callback = handler;
   1291e:	4c04      	ldr	r4, [pc, #16]	; (12930 <compare_set+0x14>)
   12920:	f844 2030 	str.w	r2, [r4, r0, lsl #3]
	cc_data[chan].user_context = user_data;
   12924:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
   12928:	6063      	str	r3, [r4, #4]
	set_absolute_alarm(chan, cc_value);
   1292a:	f010 fe5e 	bl	235ea <set_absolute_alarm>
}
   1292e:	bd38      	pop	{r3, r4, r5, pc}
   12930:	20002580 	.word	0x20002580

00012934 <sys_clock_timeout_handler>:
{
   12934:	b538      	push	{r3, r4, r5, lr}
   12936:	4608      	mov	r0, r1
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
   12938:	4d04      	ldr	r5, [pc, #16]	; (1294c <sys_clock_timeout_handler+0x18>)
   1293a:	682c      	ldr	r4, [r5, #0]
   1293c:	4621      	mov	r1, r4
   1293e:	f010 fe44 	bl	235ca <counter_sub>
	last_count += dticks * CYC_PER_TICK;
   12942:	4404      	add	r4, r0
   12944:	602c      	str	r4, [r5, #0]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   12946:	f00e f957 	bl	20bf8 <sys_clock_announce>
}
   1294a:	bd38      	pop	{r3, r4, r5, pc}
   1294c:	2000258c 	.word	0x2000258c

00012950 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
   12950:	b508      	push	{r3, lr}
    p_reg->PRESCALER = val;
   12952:	2300      	movs	r3, #0
   12954:	4a12      	ldr	r2, [pc, #72]	; (129a0 <sys_clock_driver_init+0x50>)
   12956:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1295a:	2b00      	cmp	r3, #0
   1295c:	dd18      	ble.n	12990 <sys_clock_driver_init+0x40>
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1295e:	4b11      	ldr	r3, [pc, #68]	; (129a4 <sys_clock_driver_init+0x54>)
   12960:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   12964:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   12968:	2200      	movs	r2, #0
   1296a:	2101      	movs	r1, #1
   1296c:	2011      	movs	r0, #17
   1296e:	f000 fddb 	bl	13528 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   12972:	2011      	movs	r0, #17
   12974:	f000 fda6 	bl	134c4 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   12978:	2301      	movs	r3, #1
   1297a:	4a0b      	ldr	r2, [pc, #44]	; (129a8 <sys_clock_driver_init+0x58>)
   1297c:	6013      	str	r3, [r2, #0]
   1297e:	3a08      	subs	r2, #8
   12980:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   12982:	4a0a      	ldr	r2, [pc, #40]	; (129ac <sys_clock_driver_init+0x5c>)
   12984:	6013      	str	r3, [r2, #0]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
   12986:	2002      	movs	r0, #2
   12988:	f7ff ff3c 	bl	12804 <z_nrf_clock_control_lf_on>

	return 0;
}
   1298c:	2000      	movs	r0, #0
   1298e:	bd08      	pop	{r3, pc}
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   12990:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   12994:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
   12996:	4902      	ldr	r1, [pc, #8]	; (129a0 <sys_clock_driver_init+0x50>)
   12998:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1299c:	3301      	adds	r3, #1
   1299e:	e7dc      	b.n	1295a <sys_clock_driver_init+0xa>
   129a0:	40011000 	.word	0x40011000
   129a4:	e000e100 	.word	0xe000e100
   129a8:	40011008 	.word	0x40011008
   129ac:	20002588 	.word	0x20002588

000129b0 <sys_clock_set_timeout>:

void sys_clock_set_timeout(int32_t ticks, bool idle)
{
   129b0:	b538      	push	{r3, r4, r5, lr}

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   129b2:	f1b0 3fff 	cmp.w	r0, #4294967295
   129b6:	d007      	beq.n	129c8 <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   129b8:	1e44      	subs	r4, r0, #1
   129ba:	2c00      	cmp	r4, #0
   129bc:	dd07      	ble.n	129ce <sys_clock_set_timeout+0x1e>
   129be:	4b10      	ldr	r3, [pc, #64]	; (12a00 <sys_clock_set_timeout+0x50>)
   129c0:	429c      	cmp	r4, r3
   129c2:	dd05      	ble.n	129d0 <sys_clock_set_timeout+0x20>
   129c4:	4c0f      	ldr	r4, [pc, #60]	; (12a04 <sys_clock_set_timeout+0x54>)
   129c6:	e003      	b.n	129d0 <sys_clock_set_timeout+0x20>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   129c8:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
   129cc:	e7f4      	b.n	129b8 <sys_clock_set_timeout+0x8>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   129ce:	2400      	movs	r4, #0

	uint32_t unannounced = counter_sub(counter(), last_count);
   129d0:	f7ff ff68 	bl	128a4 <counter>
   129d4:	4b0c      	ldr	r3, [pc, #48]	; (12a08 <sys_clock_set_timeout+0x58>)
   129d6:	681d      	ldr	r5, [r3, #0]
   129d8:	4629      	mov	r1, r5
   129da:	f010 fdf6 	bl	235ca <counter_sub>
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
   129de:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   129e2:	d300      	bcc.n	129e6 <sys_clock_set_timeout+0x36>
		ticks = 0;
   129e4:	2400      	movs	r4, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   129e6:	1821      	adds	r1, r4, r0
   129e8:	3101      	adds	r1, #1
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;

	/* Due to elapsed time the calculation above might produce a
	 * duration that laps the counter.  Don't let it.
	 */
	if (cyc > MAX_CYCLES) {
   129ea:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   129ee:	d300      	bcc.n	129f2 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
   129f0:	4904      	ldr	r1, [pc, #16]	; (12a04 <sys_clock_set_timeout+0x54>)
	}

	cyc += last_count;
	compare_set(0, cyc, sys_clock_timeout_handler, NULL);
   129f2:	2300      	movs	r3, #0
   129f4:	4a05      	ldr	r2, [pc, #20]	; (12a0c <sys_clock_set_timeout+0x5c>)
   129f6:	4429      	add	r1, r5
   129f8:	4618      	mov	r0, r3
   129fa:	f7ff ff8f 	bl	1291c <compare_set>
}
   129fe:	bd38      	pop	{r3, r4, r5, pc}
   12a00:	007ffffe 	.word	0x007ffffe
   12a04:	007fffff 	.word	0x007fffff
   12a08:	2000258c 	.word	0x2000258c
   12a0c:	00012935 	.word	0x00012935

00012a10 <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
   12a10:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return counter_sub(counter(), last_count) / CYC_PER_TICK;
   12a12:	f7ff ff47 	bl	128a4 <counter>
   12a16:	4b02      	ldr	r3, [pc, #8]	; (12a20 <sys_clock_elapsed+0x10>)
   12a18:	6819      	ldr	r1, [r3, #0]
   12a1a:	f010 fdd6 	bl	235ca <counter_sub>
}
   12a1e:	bd08      	pop	{r3, pc}
   12a20:	2000258c 	.word	0x2000258c

00012a24 <sys_clock_cycle_get_32>:

uint32_t sys_clock_cycle_get_32(void)
{
   12a24:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   12a26:	f04f 0340 	mov.w	r3, #64	; 0x40
   12a2a:	f3ef 8511 	mrs	r5, BASEPRI
   12a2e:	f383 8811 	msr	BASEPRI, r3
   12a32:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   12a36:	f7ff ff35 	bl	128a4 <counter>
   12a3a:	4b05      	ldr	r3, [pc, #20]	; (12a50 <sys_clock_cycle_get_32+0x2c>)
   12a3c:	681c      	ldr	r4, [r3, #0]
   12a3e:	4621      	mov	r1, r4
   12a40:	f010 fdc3 	bl	235ca <counter_sub>
   12a44:	4420      	add	r0, r4
	__asm__ volatile(
   12a46:	f385 8811 	msr	BASEPRI, r5
   12a4a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   12a4e:	bd38      	pop	{r3, r4, r5, pc}
   12a50:	2000258c 	.word	0x2000258c

00012a54 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
   12a54:	4b01      	ldr	r3, [pc, #4]	; (12a5c <uECC_get_rng+0x8>)
   12a56:	6818      	ldr	r0, [r3, #0]
   12a58:	4770      	bx	lr
   12a5a:	bf00      	nop
   12a5c:	20000504 	.word	0x20000504

00012a60 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
   12a60:	b5f0      	push	{r4, r5, r6, r7, lr}
   12a62:	b089      	sub	sp, #36	; 0x24
   12a64:	4605      	mov	r5, r0
   12a66:	460c      	mov	r4, r1
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   12a68:	2208      	movs	r2, #8
   12a6a:	f010 ff97 	bl	2399c <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
   12a6e:	2700      	movs	r7, #0
   12a70:	9702      	str	r7, [sp, #8]
   12a72:	9701      	str	r7, [sp, #4]
   12a74:	9700      	str	r7, [sp, #0]
	tmp[3] = product[11];
   12a76:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   12a78:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
   12a7a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   12a7c:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
   12a7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12a80:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
   12a82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   12a84:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   12a86:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   12a88:	9307      	str	r3, [sp, #28]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   12a8a:	2308      	movs	r3, #8
   12a8c:	466a      	mov	r2, sp
   12a8e:	4669      	mov	r1, sp
   12a90:	4668      	mov	r0, sp
   12a92:	f010 ffc8 	bl	23a26 <uECC_vli_add>
   12a96:	4606      	mov	r6, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   12a98:	2308      	movs	r3, #8
   12a9a:	466a      	mov	r2, sp
   12a9c:	4629      	mov	r1, r5
   12a9e:	4628      	mov	r0, r5
   12aa0:	f010 ffc1 	bl	23a26 <uECC_vli_add>
   12aa4:	4406      	add	r6, r0

	/* s2 */
	tmp[3] = product[12];
   12aa6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   12aa8:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
   12aaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12aac:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
   12aae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   12ab0:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
   12ab2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   12ab4:	9306      	str	r3, [sp, #24]
	tmp[7] = 0;
   12ab6:	9707      	str	r7, [sp, #28]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   12ab8:	2308      	movs	r3, #8
   12aba:	466a      	mov	r2, sp
   12abc:	4669      	mov	r1, sp
   12abe:	4668      	mov	r0, sp
   12ac0:	f010 ffb1 	bl	23a26 <uECC_vli_add>
   12ac4:	4406      	add	r6, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   12ac6:	2308      	movs	r3, #8
   12ac8:	466a      	mov	r2, sp
   12aca:	4629      	mov	r1, r5
   12acc:	4628      	mov	r0, r5
   12ace:	f010 ffaa 	bl	23a26 <uECC_vli_add>
   12ad2:	4406      	add	r6, r0

	/* s3 */
	tmp[0] = product[8];
   12ad4:	6a23      	ldr	r3, [r4, #32]
   12ad6:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
   12ad8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12ada:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
   12adc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12ade:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
   12ae0:	9705      	str	r7, [sp, #20]
   12ae2:	9704      	str	r7, [sp, #16]
   12ae4:	9703      	str	r7, [sp, #12]
	tmp[6] = product[14];
   12ae6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   12ae8:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   12aea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   12aec:	9307      	str	r3, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   12aee:	2308      	movs	r3, #8
   12af0:	466a      	mov	r2, sp
   12af2:	4629      	mov	r1, r5
   12af4:	4628      	mov	r0, r5
   12af6:	f010 ff96 	bl	23a26 <uECC_vli_add>
   12afa:	4406      	add	r6, r0

	/* s4 */
	tmp[0] = product[9];
   12afc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12afe:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
   12b00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12b02:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
   12b04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   12b06:	9302      	str	r3, [sp, #8]
	tmp[3] = product[13];
   12b08:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12b0a:	9303      	str	r3, [sp, #12]
	tmp[4] = product[14];
   12b0c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   12b0e:	9204      	str	r2, [sp, #16]
	tmp[5] = product[15];
   12b10:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   12b12:	9205      	str	r2, [sp, #20]
	tmp[6] = product[13];
   12b14:	9306      	str	r3, [sp, #24]
	tmp[7] = product[8];
   12b16:	6a23      	ldr	r3, [r4, #32]
   12b18:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   12b1a:	2308      	movs	r3, #8
   12b1c:	466a      	mov	r2, sp
   12b1e:	4629      	mov	r1, r5
   12b20:	4628      	mov	r0, r5
   12b22:	f010 ff80 	bl	23a26 <uECC_vli_add>
   12b26:	4406      	add	r6, r0

	/* d1 */
	tmp[0] = product[11];
   12b28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   12b2a:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
   12b2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   12b2e:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
   12b30:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12b32:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
   12b34:	9705      	str	r7, [sp, #20]
   12b36:	9704      	str	r7, [sp, #16]
   12b38:	9703      	str	r7, [sp, #12]
	tmp[6] = product[8];
   12b3a:	6a23      	ldr	r3, [r4, #32]
   12b3c:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
   12b3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12b40:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   12b42:	2308      	movs	r3, #8
   12b44:	466a      	mov	r2, sp
   12b46:	4629      	mov	r1, r5
   12b48:	4628      	mov	r0, r5
   12b4a:	f010 ffac 	bl	23aa6 <uECC_vli_sub>
   12b4e:	1a36      	subs	r6, r6, r0

	/* d2 */
	tmp[0] = product[12];
   12b50:	6b23      	ldr	r3, [r4, #48]	; 0x30
   12b52:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
   12b54:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12b56:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
   12b58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   12b5a:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
   12b5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   12b5e:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
   12b60:	9705      	str	r7, [sp, #20]
   12b62:	9704      	str	r7, [sp, #16]
	tmp[6] = product[9];
   12b64:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12b66:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
   12b68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   12b6a:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   12b6c:	2308      	movs	r3, #8
   12b6e:	466a      	mov	r2, sp
   12b70:	4629      	mov	r1, r5
   12b72:	4628      	mov	r0, r5
   12b74:	f010 ff97 	bl	23aa6 <uECC_vli_sub>
   12b78:	1a36      	subs	r6, r6, r0

	/* d3 */
	tmp[0] = product[13];
   12b7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12b7c:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
   12b7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   12b80:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
   12b82:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   12b84:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
   12b86:	6a23      	ldr	r3, [r4, #32]
   12b88:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
   12b8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12b8c:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
   12b8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12b90:	9305      	str	r3, [sp, #20]
	tmp[6] = 0;
   12b92:	9706      	str	r7, [sp, #24]
	tmp[7] = product[12];
   12b94:	6b23      	ldr	r3, [r4, #48]	; 0x30
   12b96:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   12b98:	2308      	movs	r3, #8
   12b9a:	466a      	mov	r2, sp
   12b9c:	4629      	mov	r1, r5
   12b9e:	4628      	mov	r0, r5
   12ba0:	f010 ff81 	bl	23aa6 <uECC_vli_sub>
   12ba4:	1a36      	subs	r6, r6, r0

	/* d4 */
	tmp[0] = product[14];
   12ba6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   12ba8:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
   12baa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   12bac:	9301      	str	r3, [sp, #4]
	tmp[2] = 0;
   12bae:	9702      	str	r7, [sp, #8]
	tmp[3] = product[9];
   12bb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12bb2:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
   12bb4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12bb6:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
   12bb8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   12bba:	9305      	str	r3, [sp, #20]
	tmp[6] = 0;
   12bbc:	9706      	str	r7, [sp, #24]
	tmp[7] = product[13];
   12bbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12bc0:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   12bc2:	2308      	movs	r3, #8
   12bc4:	466a      	mov	r2, sp
   12bc6:	4629      	mov	r1, r5
   12bc8:	4628      	mov	r0, r5
   12bca:	f010 ff6c 	bl	23aa6 <uECC_vli_sub>

	if (carry < 0) {
   12bce:	1a36      	subs	r6, r6, r0
   12bd0:	d50f      	bpl.n	12bf2 <vli_mmod_fast_secp256r1+0x192>
		do {
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   12bd2:	2308      	movs	r3, #8
   12bd4:	4a0c      	ldr	r2, [pc, #48]	; (12c08 <vli_mmod_fast_secp256r1+0x1a8>)
   12bd6:	4629      	mov	r1, r5
   12bd8:	4628      	mov	r0, r5
   12bda:	f010 ff24 	bl	23a26 <uECC_vli_add>
		}
		while (carry < 0);
   12bde:	1836      	adds	r6, r6, r0
   12be0:	d4f7      	bmi.n	12bd2 <vli_mmod_fast_secp256r1+0x172>
   12be2:	e00f      	b.n	12c04 <vli_mmod_fast_secp256r1+0x1a4>
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   12be4:	2308      	movs	r3, #8
   12be6:	4a08      	ldr	r2, [pc, #32]	; (12c08 <vli_mmod_fast_secp256r1+0x1a8>)
   12be8:	4629      	mov	r1, r5
   12bea:	4628      	mov	r0, r5
   12bec:	f010 ff5b 	bl	23aa6 <uECC_vli_sub>
   12bf0:	1a36      	subs	r6, r6, r0
		while (carry || 
   12bf2:	2e00      	cmp	r6, #0
   12bf4:	d1f6      	bne.n	12be4 <vli_mmod_fast_secp256r1+0x184>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   12bf6:	2208      	movs	r2, #8
   12bf8:	4629      	mov	r1, r5
   12bfa:	4803      	ldr	r0, [pc, #12]	; (12c08 <vli_mmod_fast_secp256r1+0x1a8>)
   12bfc:	f010 fedd 	bl	239ba <uECC_vli_cmp_unsafe>
		while (carry || 
   12c00:	2801      	cmp	r0, #1
   12c02:	d1ef      	bne.n	12be4 <vli_mmod_fast_secp256r1+0x184>
		}
	}
}
   12c04:	b009      	add	sp, #36	; 0x24
   12c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12c08:	0002a93c 	.word	0x0002a93c

00012c0c <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   12c0c:	b4f0      	push	{r4, r5, r6, r7}
   12c0e:	b08c      	sub	sp, #48	; 0x30
   12c10:	4607      	mov	r7, r0
   12c12:	460e      	mov	r6, r1
	const unsigned int rconst[11] = {
   12c14:	ac01      	add	r4, sp, #4
   12c16:	4d2a      	ldr	r5, [pc, #168]	; (12cc0 <tc_aes128_set_encrypt_key+0xb4>)
   12c18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   12c1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   12c1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   12c1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   12c20:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   12c24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   12c28:	2f00      	cmp	r7, #0
   12c2a:	d045      	beq.n	12cb8 <tc_aes128_set_encrypt_key+0xac>
   12c2c:	4638      	mov	r0, r7
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   12c2e:	2e00      	cmp	r6, #0
   12c30:	d044      	beq.n	12cbc <tc_aes128_set_encrypt_key+0xb0>
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
   12c32:	2300      	movs	r3, #0
   12c34:	e00f      	b.n	12c56 <tc_aes128_set_encrypt_key+0x4a>
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   12c36:	f816 4023 	ldrb.w	r4, [r6, r3, lsl #2]
   12c3a:	eb06 0183 	add.w	r1, r6, r3, lsl #2
   12c3e:	784a      	ldrb	r2, [r1, #1]
   12c40:	0412      	lsls	r2, r2, #16
   12c42:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   12c46:	788c      	ldrb	r4, [r1, #2]
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   12c48:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   12c4c:	78c9      	ldrb	r1, [r1, #3]
   12c4e:	430a      	orrs	r2, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   12c50:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (i = 0; i < Nk; ++i) {
   12c54:	3301      	adds	r3, #1
   12c56:	2b03      	cmp	r3, #3
   12c58:	d9ed      	bls.n	12c36 <tc_aes128_set_encrypt_key+0x2a>
   12c5a:	e006      	b.n	12c6a <tc_aes128_set_encrypt_key+0x5e>
	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
   12c5c:	1f19      	subs	r1, r3, #4
   12c5e:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   12c62:	404a      	eors	r2, r1
   12c64:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
   12c68:	3301      	adds	r3, #1
   12c6a:	2b2b      	cmp	r3, #43	; 0x2b
   12c6c:	d820      	bhi.n	12cb0 <tc_aes128_set_encrypt_key+0xa4>
		t = s->words[i-1];
   12c6e:	1e5a      	subs	r2, r3, #1
   12c70:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		if ((i % Nk) == 0) {
   12c74:	f013 0f03 	tst.w	r3, #3
   12c78:	d1f0      	bne.n	12c5c <tc_aes128_set_encrypt_key+0x50>
	return (((a) >> 24)|((a) << 8));
   12c7a:	ea4f 6232 	mov.w	r2, r2, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
   12c7e:	0e11      	lsrs	r1, r2, #24
   12c80:	4c10      	ldr	r4, [pc, #64]	; (12cc4 <tc_aes128_set_encrypt_key+0xb8>)
   12c82:	5c65      	ldrb	r5, [r4, r1]
   12c84:	f3c2 4107 	ubfx	r1, r2, #16, #8
   12c88:	5c61      	ldrb	r1, [r4, r1]
   12c8a:	0409      	lsls	r1, r1, #16
   12c8c:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
   12c90:	f3c2 2507 	ubfx	r5, r2, #8, #8
   12c94:	5d65      	ldrb	r5, [r4, r5]
   12c96:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   12c9a:	b2d2      	uxtb	r2, r2
   12c9c:	5ca2      	ldrb	r2, [r4, r2]
   12c9e:	4311      	orrs	r1, r2
   12ca0:	f023 0203 	bic.w	r2, r3, #3
   12ca4:	ac0c      	add	r4, sp, #48	; 0x30
   12ca6:	4422      	add	r2, r4
   12ca8:	f852 2c2c 	ldr.w	r2, [r2, #-44]
   12cac:	404a      	eors	r2, r1
   12cae:	e7d5      	b.n	12c5c <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
   12cb0:	2001      	movs	r0, #1
}
   12cb2:	b00c      	add	sp, #48	; 0x30
   12cb4:	bcf0      	pop	{r4, r5, r6, r7}
   12cb6:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   12cb8:	2000      	movs	r0, #0
   12cba:	e7fa      	b.n	12cb2 <tc_aes128_set_encrypt_key+0xa6>
		return TC_CRYPTO_FAIL;
   12cbc:	2000      	movs	r0, #0
   12cbe:	e7f8      	b.n	12cb2 <tc_aes128_set_encrypt_key+0xa6>
   12cc0:	0002a074 	.word	0x0002a074
   12cc4:	0002a9e8 	.word	0x0002a9e8

00012cc8 <tc_aes_encrypt>:
int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   12cc8:	2800      	cmp	r0, #0
   12cca:	f000 839a 	beq.w	13402 <tc_aes_encrypt+0x73a>
{
   12cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12cd2:	b088      	sub	sp, #32
   12cd4:	4616      	mov	r6, r2
   12cd6:	4607      	mov	r7, r0
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   12cd8:	2900      	cmp	r1, #0
   12cda:	f000 8394 	beq.w	13406 <tc_aes_encrypt+0x73e>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   12cde:	2a00      	cmp	r2, #0
   12ce0:	f000 8393 	beq.w	1340a <tc_aes_encrypt+0x742>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   12ce4:	2310      	movs	r3, #16
   12ce6:	460a      	mov	r2, r1
   12ce8:	4619      	mov	r1, r3
   12cea:	eb0d 0003 	add.w	r0, sp, r3
   12cee:	f010 fcb6 	bl	2365e <_copy>
	add_round_key(state, s->words);
   12cf2:	4635      	mov	r5, r6
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   12cf4:	6833      	ldr	r3, [r6, #0]
   12cf6:	f89d 2010 	ldrb.w	r2, [sp, #16]
   12cfa:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   12cfe:	f88d 2010 	strb.w	r2, [sp, #16]
   12d02:	f3c3 4207 	ubfx	r2, r3, #16, #8
   12d06:	f89d 1011 	ldrb.w	r1, [sp, #17]
   12d0a:	404a      	eors	r2, r1
   12d0c:	f88d 2011 	strb.w	r2, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   12d10:	f3c3 2207 	ubfx	r2, r3, #8, #8
   12d14:	f89d 1012 	ldrb.w	r1, [sp, #18]
   12d18:	404a      	eors	r2, r1
   12d1a:	f88d 2012 	strb.w	r2, [sp, #18]
   12d1e:	b2db      	uxtb	r3, r3
   12d20:	f89d 2013 	ldrb.w	r2, [sp, #19]
   12d24:	4053      	eors	r3, r2
   12d26:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   12d2a:	6873      	ldr	r3, [r6, #4]
   12d2c:	f89d 2014 	ldrb.w	r2, [sp, #20]
   12d30:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   12d34:	f88d 2014 	strb.w	r2, [sp, #20]
   12d38:	f3c3 4207 	ubfx	r2, r3, #16, #8
   12d3c:	f89d 1015 	ldrb.w	r1, [sp, #21]
   12d40:	404a      	eors	r2, r1
   12d42:	f88d 2015 	strb.w	r2, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   12d46:	f3c3 2207 	ubfx	r2, r3, #8, #8
   12d4a:	f89d 1016 	ldrb.w	r1, [sp, #22]
   12d4e:	404a      	eors	r2, r1
   12d50:	f88d 2016 	strb.w	r2, [sp, #22]
   12d54:	b2db      	uxtb	r3, r3
   12d56:	f89d 2017 	ldrb.w	r2, [sp, #23]
   12d5a:	4053      	eors	r3, r2
   12d5c:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   12d60:	68b3      	ldr	r3, [r6, #8]
   12d62:	f89d 2018 	ldrb.w	r2, [sp, #24]
   12d66:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   12d6a:	f88d 2018 	strb.w	r2, [sp, #24]
   12d6e:	f3c3 4207 	ubfx	r2, r3, #16, #8
   12d72:	f89d 1019 	ldrb.w	r1, [sp, #25]
   12d76:	404a      	eors	r2, r1
   12d78:	f88d 2019 	strb.w	r2, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   12d7c:	f3c3 2207 	ubfx	r2, r3, #8, #8
   12d80:	f89d 101a 	ldrb.w	r1, [sp, #26]
   12d84:	404a      	eors	r2, r1
   12d86:	f88d 201a 	strb.w	r2, [sp, #26]
   12d8a:	b2db      	uxtb	r3, r3
   12d8c:	f89d 201b 	ldrb.w	r2, [sp, #27]
   12d90:	4053      	eors	r3, r2
   12d92:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   12d96:	68f3      	ldr	r3, [r6, #12]
   12d98:	f89d 201c 	ldrb.w	r2, [sp, #28]
   12d9c:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   12da0:	f88d 201c 	strb.w	r2, [sp, #28]
   12da4:	f3c3 4207 	ubfx	r2, r3, #16, #8
   12da8:	f89d 101d 	ldrb.w	r1, [sp, #29]
   12dac:	404a      	eors	r2, r1
   12dae:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   12db2:	f3c3 2207 	ubfx	r2, r3, #8, #8
   12db6:	f89d 101e 	ldrb.w	r1, [sp, #30]
   12dba:	404a      	eors	r2, r1
   12dbc:	f88d 201e 	strb.w	r2, [sp, #30]
   12dc0:	b2db      	uxtb	r3, r3
   12dc2:	f89d 201f 	ldrb.w	r2, [sp, #31]
   12dc6:	4053      	eors	r3, r2
   12dc8:	f88d 301f 	strb.w	r3, [sp, #31]

	for (i = 0; i < (Nr - 1); ++i) {
   12dcc:	2400      	movs	r4, #0
}
   12dce:	e239      	b.n	13244 <tc_aes_encrypt+0x57c>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   12dd0:	f89d 3010 	ldrb.w	r3, [sp, #16]
   12dd4:	f88d 3000 	strb.w	r3, [sp]
   12dd8:	f89d 3015 	ldrb.w	r3, [sp, #21]
   12ddc:	f88d 3001 	strb.w	r3, [sp, #1]
   12de0:	f89d 301a 	ldrb.w	r3, [sp, #26]
   12de4:	f88d 3002 	strb.w	r3, [sp, #2]
   12de8:	f89d 301f 	ldrb.w	r3, [sp, #31]
   12dec:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   12df0:	f89d 3014 	ldrb.w	r3, [sp, #20]
   12df4:	f88d 3004 	strb.w	r3, [sp, #4]
   12df8:	f89d 3019 	ldrb.w	r3, [sp, #25]
   12dfc:	f88d 3005 	strb.w	r3, [sp, #5]
   12e00:	f89d 301e 	ldrb.w	r3, [sp, #30]
   12e04:	f88d 3006 	strb.w	r3, [sp, #6]
   12e08:	f89d 3013 	ldrb.w	r3, [sp, #19]
   12e0c:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   12e10:	f89d 3018 	ldrb.w	r3, [sp, #24]
   12e14:	f88d 3008 	strb.w	r3, [sp, #8]
   12e18:	f89d 301d 	ldrb.w	r3, [sp, #29]
   12e1c:	f88d 3009 	strb.w	r3, [sp, #9]
   12e20:	f89d 3012 	ldrb.w	r3, [sp, #18]
   12e24:	f88d 300a 	strb.w	r3, [sp, #10]
   12e28:	f89d 3017 	ldrb.w	r3, [sp, #23]
   12e2c:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   12e30:	f89d 301c 	ldrb.w	r3, [sp, #28]
   12e34:	f88d 300c 	strb.w	r3, [sp, #12]
   12e38:	f89d 3011 	ldrb.w	r3, [sp, #17]
   12e3c:	f88d 300d 	strb.w	r3, [sp, #13]
   12e40:	f89d 3016 	ldrb.w	r3, [sp, #22]
   12e44:	f88d 300e 	strb.w	r3, [sp, #14]
   12e48:	f89d 301b 	ldrb.w	r3, [sp, #27]
   12e4c:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   12e50:	2310      	movs	r3, #16
   12e52:	466a      	mov	r2, sp
   12e54:	4619      	mov	r1, r3
   12e56:	eb0d 0003 	add.w	r0, sp, r3
   12e5a:	f010 fc00 	bl	2365e <_copy>
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   12e5e:	f89d 0010 	ldrb.w	r0, [sp, #16]
   12e62:	f010 fc0d 	bl	23680 <_double_byte>
   12e66:	4680      	mov	r8, r0
   12e68:	f89d 0011 	ldrb.w	r0, [sp, #17]
   12e6c:	f010 fc08 	bl	23680 <_double_byte>
   12e70:	4601      	mov	r1, r0
   12e72:	f89d 0011 	ldrb.w	r0, [sp, #17]
   12e76:	f89d 2012 	ldrb.w	r2, [sp, #18]
   12e7a:	f89d 3013 	ldrb.w	r3, [sp, #19]
   12e7e:	4041      	eors	r1, r0
   12e80:	ea88 0801 	eor.w	r8, r8, r1
   12e84:	ea82 0208 	eor.w	r2, r2, r8
   12e88:	4053      	eors	r3, r2
   12e8a:	f88d 3000 	strb.w	r3, [sp]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   12e8e:	f89d 8010 	ldrb.w	r8, [sp, #16]
   12e92:	f010 fbf5 	bl	23680 <_double_byte>
   12e96:	ea88 0800 	eor.w	r8, r8, r0
   12e9a:	fa5f f888 	uxtb.w	r8, r8
   12e9e:	f89d 0012 	ldrb.w	r0, [sp, #18]
   12ea2:	f010 fbed 	bl	23680 <_double_byte>
   12ea6:	4602      	mov	r2, r0
   12ea8:	f89d 0012 	ldrb.w	r0, [sp, #18]
   12eac:	f89d 3013 	ldrb.w	r3, [sp, #19]
   12eb0:	4042      	eors	r2, r0
   12eb2:	ea88 0802 	eor.w	r8, r8, r2
   12eb6:	ea83 0308 	eor.w	r3, r3, r8
   12eba:	f88d 3001 	strb.w	r3, [sp, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   12ebe:	f89d 8010 	ldrb.w	r8, [sp, #16]
   12ec2:	f89d 3011 	ldrb.w	r3, [sp, #17]
   12ec6:	ea88 0803 	eor.w	r8, r8, r3
   12eca:	f010 fbd9 	bl	23680 <_double_byte>
   12ece:	ea88 0800 	eor.w	r8, r8, r0
   12ed2:	fa5f f888 	uxtb.w	r8, r8
   12ed6:	f89d 0013 	ldrb.w	r0, [sp, #19]
   12eda:	f010 fbd1 	bl	23680 <_double_byte>
   12ede:	f89d 3013 	ldrb.w	r3, [sp, #19]
   12ee2:	4058      	eors	r0, r3
   12ee4:	ea88 0800 	eor.w	r8, r8, r0
   12ee8:	f88d 8002 	strb.w	r8, [sp, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   12eec:	f89d 0010 	ldrb.w	r0, [sp, #16]
   12ef0:	f010 fbc6 	bl	23680 <_double_byte>
   12ef4:	f89d 2010 	ldrb.w	r2, [sp, #16]
   12ef8:	f89d 3011 	ldrb.w	r3, [sp, #17]
   12efc:	f89d 8012 	ldrb.w	r8, [sp, #18]
   12f00:	4050      	eors	r0, r2
   12f02:	4043      	eors	r3, r0
   12f04:	ea88 0803 	eor.w	r8, r8, r3
   12f08:	fa5f f888 	uxtb.w	r8, r8
   12f0c:	f89d 0013 	ldrb.w	r0, [sp, #19]
   12f10:	f010 fbb6 	bl	23680 <_double_byte>
   12f14:	ea88 0800 	eor.w	r8, r8, r0
   12f18:	f88d 8003 	strb.w	r8, [sp, #3]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   12f1c:	f89d 0014 	ldrb.w	r0, [sp, #20]
   12f20:	f010 fbae 	bl	23680 <_double_byte>
   12f24:	4680      	mov	r8, r0
   12f26:	f89d 0015 	ldrb.w	r0, [sp, #21]
   12f2a:	f010 fba9 	bl	23680 <_double_byte>
   12f2e:	4601      	mov	r1, r0
   12f30:	f89d 0015 	ldrb.w	r0, [sp, #21]
   12f34:	f89d 2016 	ldrb.w	r2, [sp, #22]
   12f38:	f89d 3017 	ldrb.w	r3, [sp, #23]
   12f3c:	4041      	eors	r1, r0
   12f3e:	ea88 0801 	eor.w	r8, r8, r1
   12f42:	ea82 0208 	eor.w	r2, r2, r8
   12f46:	4053      	eors	r3, r2
   12f48:	f88d 3004 	strb.w	r3, [sp, #4]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   12f4c:	f89d 8014 	ldrb.w	r8, [sp, #20]
   12f50:	f010 fb96 	bl	23680 <_double_byte>
   12f54:	ea88 0800 	eor.w	r8, r8, r0
   12f58:	fa5f f888 	uxtb.w	r8, r8
   12f5c:	f89d 0016 	ldrb.w	r0, [sp, #22]
   12f60:	f010 fb8e 	bl	23680 <_double_byte>
   12f64:	4602      	mov	r2, r0
   12f66:	f89d 0016 	ldrb.w	r0, [sp, #22]
   12f6a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   12f6e:	4042      	eors	r2, r0
   12f70:	ea88 0802 	eor.w	r8, r8, r2
   12f74:	ea83 0308 	eor.w	r3, r3, r8
   12f78:	f88d 3005 	strb.w	r3, [sp, #5]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   12f7c:	f89d 8014 	ldrb.w	r8, [sp, #20]
   12f80:	f89d 3015 	ldrb.w	r3, [sp, #21]
   12f84:	ea88 0803 	eor.w	r8, r8, r3
   12f88:	f010 fb7a 	bl	23680 <_double_byte>
   12f8c:	ea88 0800 	eor.w	r8, r8, r0
   12f90:	fa5f f888 	uxtb.w	r8, r8
   12f94:	f89d 0017 	ldrb.w	r0, [sp, #23]
   12f98:	f010 fb72 	bl	23680 <_double_byte>
   12f9c:	f89d 3017 	ldrb.w	r3, [sp, #23]
   12fa0:	4058      	eors	r0, r3
   12fa2:	ea88 0800 	eor.w	r8, r8, r0
   12fa6:	f88d 8006 	strb.w	r8, [sp, #6]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   12faa:	f89d 0014 	ldrb.w	r0, [sp, #20]
   12fae:	f010 fb67 	bl	23680 <_double_byte>
   12fb2:	f89d 2014 	ldrb.w	r2, [sp, #20]
   12fb6:	f89d 3015 	ldrb.w	r3, [sp, #21]
   12fba:	f89d 8016 	ldrb.w	r8, [sp, #22]
   12fbe:	4050      	eors	r0, r2
   12fc0:	4043      	eors	r3, r0
   12fc2:	ea88 0803 	eor.w	r8, r8, r3
   12fc6:	fa5f f888 	uxtb.w	r8, r8
   12fca:	f89d 0017 	ldrb.w	r0, [sp, #23]
   12fce:	f010 fb57 	bl	23680 <_double_byte>
   12fd2:	ea88 0800 	eor.w	r8, r8, r0
   12fd6:	f88d 8007 	strb.w	r8, [sp, #7]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   12fda:	f89d 0018 	ldrb.w	r0, [sp, #24]
   12fde:	f010 fb4f 	bl	23680 <_double_byte>
   12fe2:	4680      	mov	r8, r0
   12fe4:	f89d 0019 	ldrb.w	r0, [sp, #25]
   12fe8:	f010 fb4a 	bl	23680 <_double_byte>
   12fec:	4601      	mov	r1, r0
   12fee:	f89d 0019 	ldrb.w	r0, [sp, #25]
   12ff2:	f89d 201a 	ldrb.w	r2, [sp, #26]
   12ff6:	f89d 301b 	ldrb.w	r3, [sp, #27]
   12ffa:	4041      	eors	r1, r0
   12ffc:	ea88 0801 	eor.w	r8, r8, r1
   13000:	ea82 0208 	eor.w	r2, r2, r8
   13004:	4053      	eors	r3, r2
   13006:	f88d 3008 	strb.w	r3, [sp, #8]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1300a:	f89d 8018 	ldrb.w	r8, [sp, #24]
   1300e:	f010 fb37 	bl	23680 <_double_byte>
   13012:	ea88 0800 	eor.w	r8, r8, r0
   13016:	fa5f f888 	uxtb.w	r8, r8
   1301a:	f89d 001a 	ldrb.w	r0, [sp, #26]
   1301e:	f010 fb2f 	bl	23680 <_double_byte>
   13022:	4602      	mov	r2, r0
   13024:	f89d 001a 	ldrb.w	r0, [sp, #26]
   13028:	f89d 301b 	ldrb.w	r3, [sp, #27]
   1302c:	4042      	eors	r2, r0
   1302e:	ea88 0802 	eor.w	r8, r8, r2
   13032:	ea83 0308 	eor.w	r3, r3, r8
   13036:	f88d 3009 	strb.w	r3, [sp, #9]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1303a:	f89d 8018 	ldrb.w	r8, [sp, #24]
   1303e:	f89d 3019 	ldrb.w	r3, [sp, #25]
   13042:	ea88 0803 	eor.w	r8, r8, r3
   13046:	f010 fb1b 	bl	23680 <_double_byte>
   1304a:	ea88 0800 	eor.w	r8, r8, r0
   1304e:	fa5f f888 	uxtb.w	r8, r8
   13052:	f89d 001b 	ldrb.w	r0, [sp, #27]
   13056:	f010 fb13 	bl	23680 <_double_byte>
   1305a:	f89d 301b 	ldrb.w	r3, [sp, #27]
   1305e:	4058      	eors	r0, r3
   13060:	ea88 0800 	eor.w	r8, r8, r0
   13064:	f88d 800a 	strb.w	r8, [sp, #10]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   13068:	f89d 0018 	ldrb.w	r0, [sp, #24]
   1306c:	f010 fb08 	bl	23680 <_double_byte>
   13070:	f89d 2018 	ldrb.w	r2, [sp, #24]
   13074:	f89d 3019 	ldrb.w	r3, [sp, #25]
   13078:	f89d 801a 	ldrb.w	r8, [sp, #26]
   1307c:	4050      	eors	r0, r2
   1307e:	4043      	eors	r3, r0
   13080:	ea88 0803 	eor.w	r8, r8, r3
   13084:	fa5f f888 	uxtb.w	r8, r8
   13088:	f89d 001b 	ldrb.w	r0, [sp, #27]
   1308c:	f010 faf8 	bl	23680 <_double_byte>
   13090:	ea88 0800 	eor.w	r8, r8, r0
   13094:	f88d 800b 	strb.w	r8, [sp, #11]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   13098:	f89d 001c 	ldrb.w	r0, [sp, #28]
   1309c:	f010 faf0 	bl	23680 <_double_byte>
   130a0:	4680      	mov	r8, r0
   130a2:	f89d 001d 	ldrb.w	r0, [sp, #29]
   130a6:	f010 faeb 	bl	23680 <_double_byte>
   130aa:	4601      	mov	r1, r0
   130ac:	f89d 001d 	ldrb.w	r0, [sp, #29]
   130b0:	f89d 201e 	ldrb.w	r2, [sp, #30]
   130b4:	f89d 301f 	ldrb.w	r3, [sp, #31]
   130b8:	4041      	eors	r1, r0
   130ba:	ea88 0801 	eor.w	r8, r8, r1
   130be:	ea82 0208 	eor.w	r2, r2, r8
   130c2:	4053      	eors	r3, r2
   130c4:	f88d 300c 	strb.w	r3, [sp, #12]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   130c8:	f89d 801c 	ldrb.w	r8, [sp, #28]
   130cc:	f010 fad8 	bl	23680 <_double_byte>
   130d0:	ea88 0800 	eor.w	r8, r8, r0
   130d4:	fa5f f888 	uxtb.w	r8, r8
   130d8:	f89d 001e 	ldrb.w	r0, [sp, #30]
   130dc:	f010 fad0 	bl	23680 <_double_byte>
   130e0:	4602      	mov	r2, r0
   130e2:	f89d 001e 	ldrb.w	r0, [sp, #30]
   130e6:	f89d 301f 	ldrb.w	r3, [sp, #31]
   130ea:	4042      	eors	r2, r0
   130ec:	ea88 0802 	eor.w	r8, r8, r2
   130f0:	ea83 0308 	eor.w	r3, r3, r8
   130f4:	f88d 300d 	strb.w	r3, [sp, #13]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   130f8:	f89d 801c 	ldrb.w	r8, [sp, #28]
   130fc:	f89d 301d 	ldrb.w	r3, [sp, #29]
   13100:	ea88 0803 	eor.w	r8, r8, r3
   13104:	f010 fabc 	bl	23680 <_double_byte>
   13108:	ea88 0800 	eor.w	r8, r8, r0
   1310c:	fa5f f888 	uxtb.w	r8, r8
   13110:	f89d 001f 	ldrb.w	r0, [sp, #31]
   13114:	f010 fab4 	bl	23680 <_double_byte>
   13118:	f89d 301f 	ldrb.w	r3, [sp, #31]
   1311c:	4058      	eors	r0, r3
   1311e:	ea88 0800 	eor.w	r8, r8, r0
   13122:	f88d 800e 	strb.w	r8, [sp, #14]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   13126:	f89d 001c 	ldrb.w	r0, [sp, #28]
   1312a:	f010 faa9 	bl	23680 <_double_byte>
   1312e:	f89d 201c 	ldrb.w	r2, [sp, #28]
   13132:	f89d 301d 	ldrb.w	r3, [sp, #29]
   13136:	f89d 801e 	ldrb.w	r8, [sp, #30]
   1313a:	4050      	eors	r0, r2
   1313c:	4043      	eors	r3, r0
   1313e:	ea88 0803 	eor.w	r8, r8, r3
   13142:	fa5f f888 	uxtb.w	r8, r8
   13146:	f89d 001f 	ldrb.w	r0, [sp, #31]
   1314a:	f010 fa99 	bl	23680 <_double_byte>
   1314e:	ea88 0800 	eor.w	r8, r8, r0
   13152:	f88d 800f 	strb.w	r8, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   13156:	2310      	movs	r3, #16
   13158:	466a      	mov	r2, sp
   1315a:	4619      	mov	r1, r3
   1315c:	eb0d 0003 	add.w	r0, sp, r3
   13160:	f010 fa7d 	bl	2365e <_copy>
		sub_bytes(state);
		shift_rows(state);
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   13164:	3401      	adds	r4, #1
   13166:	0123      	lsls	r3, r4, #4
   13168:	eb05 1204 	add.w	r2, r5, r4, lsl #4
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1316c:	58eb      	ldr	r3, [r5, r3]
   1316e:	f89d 1010 	ldrb.w	r1, [sp, #16]
   13172:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   13176:	f88d 1010 	strb.w	r1, [sp, #16]
   1317a:	f3c3 4107 	ubfx	r1, r3, #16, #8
   1317e:	f89d 0011 	ldrb.w	r0, [sp, #17]
   13182:	4041      	eors	r1, r0
   13184:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   13188:	f3c3 2107 	ubfx	r1, r3, #8, #8
   1318c:	f89d 0012 	ldrb.w	r0, [sp, #18]
   13190:	4041      	eors	r1, r0
   13192:	f88d 1012 	strb.w	r1, [sp, #18]
   13196:	b2db      	uxtb	r3, r3
   13198:	f89d 1013 	ldrb.w	r1, [sp, #19]
   1319c:	404b      	eors	r3, r1
   1319e:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   131a2:	6853      	ldr	r3, [r2, #4]
   131a4:	f89d 1014 	ldrb.w	r1, [sp, #20]
   131a8:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   131ac:	f88d 1014 	strb.w	r1, [sp, #20]
   131b0:	f3c3 4107 	ubfx	r1, r3, #16, #8
   131b4:	f89d 0015 	ldrb.w	r0, [sp, #21]
   131b8:	4041      	eors	r1, r0
   131ba:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   131be:	f3c3 2107 	ubfx	r1, r3, #8, #8
   131c2:	f89d 0016 	ldrb.w	r0, [sp, #22]
   131c6:	4041      	eors	r1, r0
   131c8:	f88d 1016 	strb.w	r1, [sp, #22]
   131cc:	b2db      	uxtb	r3, r3
   131ce:	f89d 1017 	ldrb.w	r1, [sp, #23]
   131d2:	404b      	eors	r3, r1
   131d4:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   131d8:	6893      	ldr	r3, [r2, #8]
   131da:	f89d 1018 	ldrb.w	r1, [sp, #24]
   131de:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   131e2:	f88d 1018 	strb.w	r1, [sp, #24]
   131e6:	f3c3 4107 	ubfx	r1, r3, #16, #8
   131ea:	f89d 0019 	ldrb.w	r0, [sp, #25]
   131ee:	4041      	eors	r1, r0
   131f0:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   131f4:	f3c3 2107 	ubfx	r1, r3, #8, #8
   131f8:	f89d 001a 	ldrb.w	r0, [sp, #26]
   131fc:	4041      	eors	r1, r0
   131fe:	f88d 101a 	strb.w	r1, [sp, #26]
   13202:	b2db      	uxtb	r3, r3
   13204:	f89d 101b 	ldrb.w	r1, [sp, #27]
   13208:	404b      	eors	r3, r1
   1320a:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1320e:	68d3      	ldr	r3, [r2, #12]
   13210:	f89d 201c 	ldrb.w	r2, [sp, #28]
   13214:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   13218:	f88d 201c 	strb.w	r2, [sp, #28]
   1321c:	f3c3 4207 	ubfx	r2, r3, #16, #8
   13220:	f89d 101d 	ldrb.w	r1, [sp, #29]
   13224:	404a      	eors	r2, r1
   13226:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1322a:	f3c3 2207 	ubfx	r2, r3, #8, #8
   1322e:	f89d 101e 	ldrb.w	r1, [sp, #30]
   13232:	404a      	eors	r2, r1
   13234:	f88d 201e 	strb.w	r2, [sp, #30]
   13238:	b2db      	uxtb	r3, r3
   1323a:	f89d 201f 	ldrb.w	r2, [sp, #31]
   1323e:	4053      	eors	r3, r2
   13240:	f88d 301f 	strb.w	r3, [sp, #31]
	for (i = 0; i < (Nr - 1); ++i) {
   13244:	2c08      	cmp	r4, #8
   13246:	d80a      	bhi.n	1325e <tc_aes_encrypt+0x596>
	for (i = 0; i < (Nb * Nk); ++i) {
   13248:	2300      	movs	r3, #0
   1324a:	2b0f      	cmp	r3, #15
   1324c:	f63f adc0 	bhi.w	12dd0 <tc_aes_encrypt+0x108>
		s[i] = sbox[s[i]];
   13250:	a904      	add	r1, sp, #16
   13252:	5cc8      	ldrb	r0, [r1, r3]
   13254:	4a6e      	ldr	r2, [pc, #440]	; (13410 <tc_aes_encrypt+0x748>)
   13256:	5c10      	ldrb	r0, [r2, r0]
   13258:	54c8      	strb	r0, [r1, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   1325a:	3301      	adds	r3, #1
   1325c:	e7f5      	b.n	1324a <tc_aes_encrypt+0x582>
   1325e:	2300      	movs	r3, #0
   13260:	e005      	b.n	1326e <tc_aes_encrypt+0x5a6>
		s[i] = sbox[s[i]];
   13262:	aa04      	add	r2, sp, #16
   13264:	5cd1      	ldrb	r1, [r2, r3]
   13266:	486a      	ldr	r0, [pc, #424]	; (13410 <tc_aes_encrypt+0x748>)
   13268:	5c41      	ldrb	r1, [r0, r1]
   1326a:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   1326c:	3301      	adds	r3, #1
   1326e:	2b0f      	cmp	r3, #15
   13270:	d9f7      	bls.n	13262 <tc_aes_encrypt+0x59a>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   13272:	f89d 3010 	ldrb.w	r3, [sp, #16]
   13276:	f88d 3000 	strb.w	r3, [sp]
   1327a:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1327e:	f88d 3001 	strb.w	r3, [sp, #1]
   13282:	f89d 301a 	ldrb.w	r3, [sp, #26]
   13286:	f88d 3002 	strb.w	r3, [sp, #2]
   1328a:	f89d 301f 	ldrb.w	r3, [sp, #31]
   1328e:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   13292:	f89d 3014 	ldrb.w	r3, [sp, #20]
   13296:	f88d 3004 	strb.w	r3, [sp, #4]
   1329a:	f89d 3019 	ldrb.w	r3, [sp, #25]
   1329e:	f88d 3005 	strb.w	r3, [sp, #5]
   132a2:	f89d 301e 	ldrb.w	r3, [sp, #30]
   132a6:	f88d 3006 	strb.w	r3, [sp, #6]
   132aa:	f89d 3013 	ldrb.w	r3, [sp, #19]
   132ae:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   132b2:	f89d 3018 	ldrb.w	r3, [sp, #24]
   132b6:	f88d 3008 	strb.w	r3, [sp, #8]
   132ba:	f89d 301d 	ldrb.w	r3, [sp, #29]
   132be:	f88d 3009 	strb.w	r3, [sp, #9]
   132c2:	f89d 3012 	ldrb.w	r3, [sp, #18]
   132c6:	f88d 300a 	strb.w	r3, [sp, #10]
   132ca:	f89d 3017 	ldrb.w	r3, [sp, #23]
   132ce:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   132d2:	f89d 301c 	ldrb.w	r3, [sp, #28]
   132d6:	f88d 300c 	strb.w	r3, [sp, #12]
   132da:	f89d 3011 	ldrb.w	r3, [sp, #17]
   132de:	f88d 300d 	strb.w	r3, [sp, #13]
   132e2:	f89d 3016 	ldrb.w	r3, [sp, #22]
   132e6:	f88d 300e 	strb.w	r3, [sp, #14]
   132ea:	f89d 301b 	ldrb.w	r3, [sp, #27]
   132ee:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   132f2:	2310      	movs	r3, #16
   132f4:	466a      	mov	r2, sp
   132f6:	4619      	mov	r1, r3
   132f8:	eb0d 0003 	add.w	r0, sp, r3
   132fc:	f010 f9af 	bl	2365e <_copy>
	}

	sub_bytes(state);
	shift_rows(state);
	add_round_key(state, s->words + Nb*(i+1));
   13300:	1c63      	adds	r3, r4, #1
   13302:	011a      	lsls	r2, r3, #4
   13304:	eb06 1303 	add.w	r3, r6, r3, lsl #4
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   13308:	58b2      	ldr	r2, [r6, r2]
   1330a:	f89d 1010 	ldrb.w	r1, [sp, #16]
   1330e:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   13312:	f88d 1010 	strb.w	r1, [sp, #16]
   13316:	f3c2 4107 	ubfx	r1, r2, #16, #8
   1331a:	f89d 0011 	ldrb.w	r0, [sp, #17]
   1331e:	4041      	eors	r1, r0
   13320:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   13324:	f3c2 2107 	ubfx	r1, r2, #8, #8
   13328:	f89d 0012 	ldrb.w	r0, [sp, #18]
   1332c:	4041      	eors	r1, r0
   1332e:	f88d 1012 	strb.w	r1, [sp, #18]
   13332:	b2d2      	uxtb	r2, r2
   13334:	f89d 1013 	ldrb.w	r1, [sp, #19]
   13338:	404a      	eors	r2, r1
   1333a:	f88d 2013 	strb.w	r2, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1333e:	685a      	ldr	r2, [r3, #4]
   13340:	f89d 1014 	ldrb.w	r1, [sp, #20]
   13344:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   13348:	f88d 1014 	strb.w	r1, [sp, #20]
   1334c:	f3c2 4107 	ubfx	r1, r2, #16, #8
   13350:	f89d 0015 	ldrb.w	r0, [sp, #21]
   13354:	4041      	eors	r1, r0
   13356:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1335a:	f3c2 2107 	ubfx	r1, r2, #8, #8
   1335e:	f89d 0016 	ldrb.w	r0, [sp, #22]
   13362:	4041      	eors	r1, r0
   13364:	f88d 1016 	strb.w	r1, [sp, #22]
   13368:	b2d2      	uxtb	r2, r2
   1336a:	f89d 1017 	ldrb.w	r1, [sp, #23]
   1336e:	404a      	eors	r2, r1
   13370:	f88d 2017 	strb.w	r2, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   13374:	689a      	ldr	r2, [r3, #8]
   13376:	f89d 1018 	ldrb.w	r1, [sp, #24]
   1337a:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   1337e:	f88d 1018 	strb.w	r1, [sp, #24]
   13382:	f3c2 4107 	ubfx	r1, r2, #16, #8
   13386:	f89d 0019 	ldrb.w	r0, [sp, #25]
   1338a:	4041      	eors	r1, r0
   1338c:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   13390:	f3c2 2107 	ubfx	r1, r2, #8, #8
   13394:	f89d 001a 	ldrb.w	r0, [sp, #26]
   13398:	4041      	eors	r1, r0
   1339a:	f88d 101a 	strb.w	r1, [sp, #26]
   1339e:	b2d2      	uxtb	r2, r2
   133a0:	f89d 101b 	ldrb.w	r1, [sp, #27]
   133a4:	404a      	eors	r2, r1
   133a6:	f88d 201b 	strb.w	r2, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   133aa:	68db      	ldr	r3, [r3, #12]
   133ac:	f89d 201c 	ldrb.w	r2, [sp, #28]
   133b0:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   133b4:	f88d 201c 	strb.w	r2, [sp, #28]
   133b8:	f3c3 4207 	ubfx	r2, r3, #16, #8
   133bc:	f89d 101d 	ldrb.w	r1, [sp, #29]
   133c0:	404a      	eors	r2, r1
   133c2:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   133c6:	f3c3 2207 	ubfx	r2, r3, #8, #8
   133ca:	f89d 101e 	ldrb.w	r1, [sp, #30]
   133ce:	404a      	eors	r2, r1
   133d0:	f88d 201e 	strb.w	r2, [sp, #30]
   133d4:	b2db      	uxtb	r3, r3
   133d6:	f89d 201f 	ldrb.w	r2, [sp, #31]
   133da:	4053      	eors	r3, r2
   133dc:	f88d 301f 	strb.w	r3, [sp, #31]

	(void)_copy(out, sizeof(state), state, sizeof(state));
   133e0:	2310      	movs	r3, #16
   133e2:	eb0d 0203 	add.w	r2, sp, r3
   133e6:	4619      	mov	r1, r3
   133e8:	4638      	mov	r0, r7
   133ea:	f010 f938 	bl	2365e <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   133ee:	2210      	movs	r2, #16
   133f0:	2100      	movs	r1, #0
   133f2:	eb0d 0002 	add.w	r0, sp, r2
   133f6:	f010 f93f 	bl	23678 <_set>

	return TC_CRYPTO_SUCCESS;
   133fa:	2001      	movs	r0, #1
}
   133fc:	b008      	add	sp, #32
   133fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   13402:	2000      	movs	r0, #0
}
   13404:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   13406:	2000      	movs	r0, #0
   13408:	e7f8      	b.n	133fc <tc_aes_encrypt+0x734>
		return TC_CRYPTO_FAIL;
   1340a:	2000      	movs	r0, #0
   1340c:	e7f6      	b.n	133fc <tc_aes_encrypt+0x734>
   1340e:	bf00      	nop
   13410:	0002a9e8 	.word	0x0002a9e8

00013414 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   13414:	4a0a      	ldr	r2, [pc, #40]	; (13440 <arch_swap+0x2c>)
   13416:	6893      	ldr	r3, [r2, #8]
   13418:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	_current->arch.swap_return_value = _k_neg_eagain;
   1341c:	4909      	ldr	r1, [pc, #36]	; (13444 <arch_swap+0x30>)
   1341e:	6809      	ldr	r1, [r1, #0]
   13420:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13424:	4908      	ldr	r1, [pc, #32]	; (13448 <arch_swap+0x34>)
   13426:	684b      	ldr	r3, [r1, #4]
   13428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   1342c:	604b      	str	r3, [r1, #4]
   1342e:	2300      	movs	r3, #0
   13430:	f383 8811 	msr	BASEPRI, r3
   13434:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   13438:	6893      	ldr	r3, [r2, #8]
}
   1343a:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
   1343e:	4770      	bx	lr
   13440:	20003938 	.word	0x20003938
   13444:	0002d054 	.word	0x0002d054
   13448:	e000ed00 	.word	0xe000ed00

0001344c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   1344c:	4913      	ldr	r1, [pc, #76]	; (1349c <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1344e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   13450:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   13454:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   13456:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   1345a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1345e:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   13460:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   13464:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   13468:	4f0d      	ldr	r7, [pc, #52]	; (134a0 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   1346a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1346e:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   13470:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   13472:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   13474:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
   13478:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   1347a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   1347e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   13482:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   13484:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   13486:	f000 fdc9 	bl	1401c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   1348a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1348e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   13492:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   13496:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   1349a:	4770      	bx	lr
    ldr r1, =_kernel
   1349c:	20003938 	.word	0x20003938
    ldr v4, =_SCS_ICSR
   134a0:	e000ed04 	.word	0xe000ed04

000134a4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   134a4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   134a8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   134aa:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   134ae:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   134b2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   134b4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   134b8:	2902      	cmp	r1, #2
    beq _oops
   134ba:	d0ff      	beq.n	134bc <_oops>

000134bc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   134bc:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   134be:	f011 f974 	bl	247aa <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   134c2:	bd01      	pop	{r0, pc}

000134c4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   134c4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   134c6:	2b00      	cmp	r3, #0
   134c8:	db08      	blt.n	134dc <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   134ca:	f000 001f 	and.w	r0, r0, #31
   134ce:	095b      	lsrs	r3, r3, #5
   134d0:	2201      	movs	r2, #1
   134d2:	fa02 f000 	lsl.w	r0, r2, r0
   134d6:	4a02      	ldr	r2, [pc, #8]	; (134e0 <arch_irq_enable+0x1c>)
   134d8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   134dc:	4770      	bx	lr
   134de:	bf00      	nop
   134e0:	e000e100 	.word	0xe000e100

000134e4 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   134e4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   134e6:	2b00      	cmp	r3, #0
   134e8:	db0d      	blt.n	13506 <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   134ea:	f000 001f 	and.w	r0, r0, #31
   134ee:	095b      	lsrs	r3, r3, #5
   134f0:	2201      	movs	r2, #1
   134f2:	fa02 f000 	lsl.w	r0, r2, r0
   134f6:	3320      	adds	r3, #32
   134f8:	4a03      	ldr	r2, [pc, #12]	; (13508 <arch_irq_disable+0x24>)
   134fa:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   134fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13502:	f3bf 8f6f 	isb	sy
}
   13506:	4770      	bx	lr
   13508:	e000e100 	.word	0xe000e100

0001350c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   1350c:	0942      	lsrs	r2, r0, #5
   1350e:	4b05      	ldr	r3, [pc, #20]	; (13524 <arch_irq_is_enabled+0x18>)
   13510:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   13514:	f000 001f 	and.w	r0, r0, #31
   13518:	2301      	movs	r3, #1
   1351a:	fa03 f000 	lsl.w	r0, r3, r0
}
   1351e:	4010      	ands	r0, r2
   13520:	4770      	bx	lr
   13522:	bf00      	nop
   13524:	e000e100 	.word	0xe000e100

00013528 <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   13528:	f012 0f01 	tst.w	r2, #1
   1352c:	d10c      	bne.n	13548 <z_arm_irq_priority_set+0x20>
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   1352e:	3102      	adds	r1, #2
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   13530:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   13532:	2b00      	cmp	r3, #0
   13534:	db0a      	blt.n	1354c <z_arm_irq_priority_set+0x24>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13536:	0149      	lsls	r1, r1, #5
   13538:	b2c9      	uxtb	r1, r1
   1353a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   1353e:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   13542:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   13546:	4770      	bx	lr
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   13548:	2100      	movs	r1, #0
   1354a:	e7f1      	b.n	13530 <z_arm_irq_priority_set+0x8>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1354c:	f000 000f 	and.w	r0, r0, #15
   13550:	0149      	lsls	r1, r1, #5
   13552:	b2c9      	uxtb	r1, r1
   13554:	4b01      	ldr	r3, [pc, #4]	; (1355c <z_arm_irq_priority_set+0x34>)
   13556:	5419      	strb	r1, [r3, r0]
}
   13558:	4770      	bx	lr
   1355a:	bf00      	nop
   1355c:	e000ed14 	.word	0xe000ed14

00013560 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   13560:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   13562:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   13564:	4b04      	ldr	r3, [pc, #16]	; (13578 <_arch_isr_direct_pm+0x18>)
   13566:	6a18      	ldr	r0, [r3, #32]
   13568:	b908      	cbnz	r0, 1356e <_arch_isr_direct_pm+0xe>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   1356a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   1356c:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
   1356e:	2200      	movs	r2, #0
   13570:	621a      	str	r2, [r3, #32]
		z_pm_save_idle_exit(idle_val);
   13572:	f015 fdc8 	bl	29106 <z_pm_save_idle_exit>
   13576:	e7f8      	b.n	1356a <_arch_isr_direct_pm+0xa>
   13578:	20003938 	.word	0x20003938

0001357c <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
   1357c:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   1357e:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
   13582:	490d      	ldr	r1, [pc, #52]	; (135b8 <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
   13584:	f021 0101 	bic.w	r1, r1, #1
   13588:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
   1358c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   13590:	9b01      	ldr	r3, [sp, #4]
   13592:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   13596:	9b02      	ldr	r3, [sp, #8]
   13598:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   1359c:	9b03      	ldr	r3, [sp, #12]
   1359e:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   135a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   135a6:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
   135aa:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   135ac:	2300      	movs	r3, #0
   135ae:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   135b2:	bc10      	pop	{r4}
   135b4:	4770      	bx	lr
   135b6:	bf00      	nop
   135b8:	000218b7 	.word	0x000218b7

000135bc <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   135bc:	4b16      	ldr	r3, [pc, #88]	; (13618 <z_check_thread_stack_fail+0x5c>)
   135be:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
   135c0:	b1da      	cbz	r2, 135fa <z_check_thread_stack_fail+0x3e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   135c2:	f110 0f16 	cmn.w	r0, #22
   135c6:	d01a      	beq.n	135fe <z_check_thread_stack_fail+0x42>
{
   135c8:	b410      	push	{r4}
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   135ca:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   135ce:	f1a3 0420 	sub.w	r4, r3, #32
   135d2:	4284      	cmp	r4, r0
   135d4:	d805      	bhi.n	135e2 <z_check_thread_stack_fail+0x26>
   135d6:	4283      	cmp	r3, r0
   135d8:	d908      	bls.n	135ec <z_check_thread_stack_fail+0x30>
   135da:	428b      	cmp	r3, r1
   135dc:	d808      	bhi.n	135f0 <z_check_thread_stack_fail+0x34>
   135de:	2100      	movs	r1, #0
   135e0:	e000      	b.n	135e4 <z_check_thread_stack_fail+0x28>
   135e2:	2100      	movs	r1, #0
   135e4:	b931      	cbnz	r1, 135f4 <z_check_thread_stack_fail+0x38>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   135e6:	2000      	movs	r0, #0
}
   135e8:	bc10      	pop	{r4}
   135ea:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   135ec:	2100      	movs	r1, #0
   135ee:	e7f9      	b.n	135e4 <z_check_thread_stack_fail+0x28>
   135f0:	2101      	movs	r1, #1
   135f2:	e7f7      	b.n	135e4 <z_check_thread_stack_fail+0x28>
		return thread->stack_info.start;
   135f4:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   135f8:	e7f6      	b.n	135e8 <z_check_thread_stack_fail+0x2c>
		return 0;
   135fa:	2000      	movs	r0, #0
   135fc:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   135fe:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   13602:	428b      	cmp	r3, r1
   13604:	bf94      	ite	ls
   13606:	2100      	movls	r1, #0
   13608:	2101      	movhi	r1, #1
   1360a:	b909      	cbnz	r1, 13610 <z_check_thread_stack_fail+0x54>
	return 0;
   1360c:	2000      	movs	r0, #0
}
   1360e:	4770      	bx	lr
		return thread->stack_info.start;
   13610:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   13614:	4770      	bx	lr
   13616:	bf00      	nop
   13618:	20003938 	.word	0x20003938

0001361c <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   1361c:	b508      	push	{r3, lr}
   1361e:	460d      	mov	r5, r1
   13620:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   13622:	4b08      	ldr	r3, [pc, #32]	; (13644 <arch_switch_to_main_thread+0x28>)
   13624:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   13626:	f000 fcf9 	bl	1401c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   1362a:	4620      	mov	r0, r4
   1362c:	f385 8809 	msr	PSP, r5
   13630:	2100      	movs	r1, #0
   13632:	b663      	cpsie	if
   13634:	f381 8811 	msr	BASEPRI, r1
   13638:	f3bf 8f6f 	isb	sy
   1363c:	2200      	movs	r2, #0
   1363e:	2300      	movs	r3, #0
   13640:	f00e f939 	bl	218b6 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   13644:	20003938 	.word	0x20003938

00013648 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   13648:	4901      	ldr	r1, [pc, #4]	; (13650 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1364a:	2210      	movs	r2, #16
	str	r2, [r1]
   1364c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   1364e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   13650:	e000ed10 	.word	0xe000ed10

00013654 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   13654:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   13656:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   13658:	f380 8811 	msr	BASEPRI, r0
	isb
   1365c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   13660:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   13664:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   13666:	b662      	cpsie	i
	isb
   13668:	f3bf 8f6f 	isb	sy

	bx	lr
   1366c:	4770      	bx	lr
   1366e:	bf00      	nop

00013670 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   13670:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   13672:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   13674:	f381 8811 	msr	BASEPRI, r1

	wfe
   13678:	bf20      	wfe

	msr	BASEPRI, r0
   1367a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   1367e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   13680:	4770      	bx	lr
   13682:	bf00      	nop

00013684 <esf_dump>:
#include <kernel.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
   13684:	b570      	push	{r4, r5, r6, lr}
   13686:	b082      	sub	sp, #8
   13688:	4604      	mov	r4, r0
   1368a:	4d1f      	ldr	r5, [pc, #124]	; (13708 <esf_dump+0x84>)
   1368c:	4b1f      	ldr	r3, [pc, #124]	; (1370c <esf_dump+0x88>)
   1368e:	1aed      	subs	r5, r5, r3
   13690:	08ed      	lsrs	r5, r5, #3
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   13692:	2601      	movs	r6, #1
   13694:	f04f 0300 	mov.w	r3, #0
   13698:	f366 0302 	bfi	r3, r6, #0, #3
   1369c:	f36f 03c5 	bfc	r3, #3, #3
   136a0:	f365 138f 	bfi	r3, r5, #6, #10
   136a4:	f8ad 3000 	strh.w	r3, [sp]
   136a8:	6883      	ldr	r3, [r0, #8]
   136aa:	6842      	ldr	r2, [r0, #4]
   136ac:	6801      	ldr	r1, [r0, #0]
   136ae:	4818      	ldr	r0, [pc, #96]	; (13710 <esf_dump+0x8c>)
   136b0:	f7fd fcf0 	bl	11094 <log_3>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   136b4:	f04f 0300 	mov.w	r3, #0
   136b8:	f366 0302 	bfi	r3, r6, #0, #3
   136bc:	f36f 03c5 	bfc	r3, #3, #3
   136c0:	f365 138f 	bfi	r3, r5, #6, #10
   136c4:	f8ad 3000 	strh.w	r3, [sp]
   136c8:	6963      	ldr	r3, [r4, #20]
   136ca:	6922      	ldr	r2, [r4, #16]
   136cc:	68e1      	ldr	r1, [r4, #12]
   136ce:	4811      	ldr	r0, [pc, #68]	; (13714 <esf_dump+0x90>)
   136d0:	f7fd fce0 	bl	11094 <log_3>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   136d4:	f04f 0200 	mov.w	r2, #0
   136d8:	f366 0202 	bfi	r2, r6, #0, #3
   136dc:	f36f 02c5 	bfc	r2, #3, #3
   136e0:	f365 128f 	bfi	r2, r5, #6, #10
   136e4:	69e1      	ldr	r1, [r4, #28]
   136e6:	480c      	ldr	r0, [pc, #48]	; (13718 <esf_dump+0x94>)
   136e8:	f7fd fd12 	bl	11110 <log_1>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   136ec:	f04f 0200 	mov.w	r2, #0
   136f0:	f366 0202 	bfi	r2, r6, #0, #3
   136f4:	f36f 02c5 	bfc	r2, #3, #3
   136f8:	f365 128f 	bfi	r2, r5, #6, #10
   136fc:	69a1      	ldr	r1, [r4, #24]
   136fe:	4807      	ldr	r0, [pc, #28]	; (1371c <esf_dump+0x98>)
   13700:	f7fd fd06 	bl	11110 <log_1>
		esf->basic.pc);
}
   13704:	b002      	add	sp, #8
   13706:	bd70      	pop	{r4, r5, r6, pc}
   13708:	00029fa4 	.word	0x00029fa4
   1370c:	00029ecc 	.word	0x00029ecc
   13710:	0002aae8 	.word	0x0002aae8
   13714:	0002ab18 	.word	0x0002ab18
   13718:	0002ab48 	.word	0x0002ab48
   1371c:	0002ab58 	.word	0x0002ab58

00013720 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   13720:	bf30      	wfi
    b z_SysNmiOnReset
   13722:	f7ff bffd 	b.w	13720 <z_SysNmiOnReset>
   13726:	bf00      	nop

00013728 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   13728:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1372a:	4b0b      	ldr	r3, [pc, #44]	; (13758 <z_arm_prep_c+0x30>)
   1372c:	4a0b      	ldr	r2, [pc, #44]	; (1375c <z_arm_prep_c+0x34>)
   1372e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   13732:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   13734:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13738:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   1373c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   13740:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   13744:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   13748:	f00b ff66 	bl	1f618 <z_bss_zero>
	z_data_copy();
   1374c:	f00d f948 	bl	209e0 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   13750:	f000 fc26 	bl	13fa0 <z_arm_interrupt_init>
	z_cstart();
   13754:	f00b ff86 	bl	1f664 <z_cstart>
   13758:	e000ed00 	.word	0xe000ed00
   1375c:	00000000 	.word	0x00000000

00013760 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   13760:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   13762:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   13764:	4a0b      	ldr	r2, [pc, #44]	; (13794 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   13766:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   13768:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   1376a:	bf1e      	ittt	ne
	movne	r1, #0
   1376c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1376e:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
   13770:	f015 fcc9 	blne	29106 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   13774:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   13776:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1377a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1377e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   13782:	4905      	ldr	r1, [pc, #20]	; (13798 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   13784:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   13786:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   13788:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1378a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1378e:	4903      	ldr	r1, [pc, #12]	; (1379c <_isr_wrapper+0x3c>)
	bx r1
   13790:	4708      	bx	r1
   13792:	0000      	.short	0x0000
	ldr r2, =_kernel
   13794:	20003938 	.word	0x20003938
	ldr r1, =_sw_isr_table
   13798:	00029cd0 	.word	0x00029cd0
	ldr r1, =z_arm_int_exit
   1379c:	00013f11 	.word	0x00013f11

000137a0 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   137a0:	2000      	movs	r0, #0
    msr CONTROL, r0
   137a2:	f380 8814 	msr	CONTROL, r0
    isb
   137a6:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   137aa:	f011 f9a3 	bl	24af4 <z_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   137ae:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   137b0:	490d      	ldr	r1, [pc, #52]	; (137e8 <__start+0x48>)
    str r0, [r1]
   137b2:	6008      	str	r0, [r1, #0]
    dsb
   137b4:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   137b8:	480c      	ldr	r0, [pc, #48]	; (137ec <__start+0x4c>)
    msr msp, r0
   137ba:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   137be:	f000 fbc5 	bl	13f4c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   137c2:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   137c4:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   137c8:	4809      	ldr	r0, [pc, #36]	; (137f0 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   137ca:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   137ce:	1840      	adds	r0, r0, r1
    msr PSP, r0
   137d0:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   137d4:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   137d8:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   137da:	4308      	orrs	r0, r1
    msr CONTROL, r0
   137dc:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   137e0:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   137e4:	f7ff ffa0 	bl	13728 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   137e8:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   137ec:	200060a0 	.word	0x200060a0
    ldr r0, =z_interrupt_stacks
   137f0:	20006220 	.word	0x20006220

000137f4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   137f4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   137f8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   137fc:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   137fe:	4672      	mov	r2, lr
	bl z_arm_fault
   13800:	f000 fb1c 	bl	13e3c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   13804:	bd01      	pop	{r0, pc}
   13806:	bf00      	nop

00013808 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
   13808:	b508      	push	{r3, lr}
   1380a:	4b4e      	ldr	r3, [pc, #312]	; (13944 <usage_fault+0x13c>)
   1380c:	4a4e      	ldr	r2, [pc, #312]	; (13948 <usage_fault+0x140>)
   1380e:	1a9b      	subs	r3, r3, r2
   13810:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   13812:	f04f 0100 	mov.w	r1, #0
   13816:	2201      	movs	r2, #1
   13818:	f362 0102 	bfi	r1, r2, #0, #3
   1381c:	f36f 01c5 	bfc	r1, #3, #3
   13820:	f363 118f 	bfi	r1, r3, #6, #10
   13824:	4849      	ldr	r0, [pc, #292]	; (1394c <usage_fault+0x144>)
   13826:	f7fd fd29 	bl	1127c <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1382a:	4b49      	ldr	r3, [pc, #292]	; (13950 <usage_fault+0x148>)
   1382c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1382e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   13832:	d121      	bne.n	13878 <usage_fault+0x70>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   13834:	4b46      	ldr	r3, [pc, #280]	; (13950 <usage_fault+0x148>)
   13836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13838:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   1383c:	d12d      	bne.n	1389a <usage_fault+0x92>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   1383e:	4b44      	ldr	r3, [pc, #272]	; (13950 <usage_fault+0x148>)
   13840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13842:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   13846:	d139      	bne.n	138bc <usage_fault+0xb4>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   13848:	4b41      	ldr	r3, [pc, #260]	; (13950 <usage_fault+0x148>)
   1384a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1384c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   13850:	d145      	bne.n	138de <usage_fault+0xd6>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   13852:	4b3f      	ldr	r3, [pc, #252]	; (13950 <usage_fault+0x148>)
   13854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13856:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   1385a:	d151      	bne.n	13900 <usage_fault+0xf8>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   1385c:	4b3c      	ldr	r3, [pc, #240]	; (13950 <usage_fault+0x148>)
   1385e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13860:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   13864:	d15d      	bne.n	13922 <usage_fault+0x11a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   13866:	4a3a      	ldr	r2, [pc, #232]	; (13950 <usage_fault+0x148>)
   13868:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1386a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   1386e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   13872:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   13874:	2000      	movs	r0, #0
   13876:	bd08      	pop	{r3, pc}
   13878:	4b32      	ldr	r3, [pc, #200]	; (13944 <usage_fault+0x13c>)
   1387a:	4a33      	ldr	r2, [pc, #204]	; (13948 <usage_fault+0x140>)
   1387c:	1a9b      	subs	r3, r3, r2
   1387e:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Division by zero");
   13880:	f04f 0100 	mov.w	r1, #0
   13884:	2201      	movs	r2, #1
   13886:	f362 0102 	bfi	r1, r2, #0, #3
   1388a:	f36f 01c5 	bfc	r1, #3, #3
   1388e:	f363 118f 	bfi	r1, r3, #6, #10
   13892:	4830      	ldr	r0, [pc, #192]	; (13954 <usage_fault+0x14c>)
   13894:	f7fd fcf2 	bl	1127c <log_0>
   13898:	e7cc      	b.n	13834 <usage_fault+0x2c>
   1389a:	4b2a      	ldr	r3, [pc, #168]	; (13944 <usage_fault+0x13c>)
   1389c:	4a2a      	ldr	r2, [pc, #168]	; (13948 <usage_fault+0x140>)
   1389e:	1a9b      	subs	r3, r3, r2
   138a0:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unaligned memory access");
   138a2:	f04f 0100 	mov.w	r1, #0
   138a6:	2201      	movs	r2, #1
   138a8:	f362 0102 	bfi	r1, r2, #0, #3
   138ac:	f36f 01c5 	bfc	r1, #3, #3
   138b0:	f363 118f 	bfi	r1, r3, #6, #10
   138b4:	4828      	ldr	r0, [pc, #160]	; (13958 <usage_fault+0x150>)
   138b6:	f7fd fce1 	bl	1127c <log_0>
   138ba:	e7c0      	b.n	1383e <usage_fault+0x36>
   138bc:	4b21      	ldr	r3, [pc, #132]	; (13944 <usage_fault+0x13c>)
   138be:	4a22      	ldr	r2, [pc, #136]	; (13948 <usage_fault+0x140>)
   138c0:	1a9b      	subs	r3, r3, r2
   138c2:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  No coprocessor instructions");
   138c4:	f04f 0100 	mov.w	r1, #0
   138c8:	2201      	movs	r2, #1
   138ca:	f362 0102 	bfi	r1, r2, #0, #3
   138ce:	f36f 01c5 	bfc	r1, #3, #3
   138d2:	f363 118f 	bfi	r1, r3, #6, #10
   138d6:	4821      	ldr	r0, [pc, #132]	; (1395c <usage_fault+0x154>)
   138d8:	f7fd fcd0 	bl	1127c <log_0>
   138dc:	e7b4      	b.n	13848 <usage_fault+0x40>
   138de:	4b19      	ldr	r3, [pc, #100]	; (13944 <usage_fault+0x13c>)
   138e0:	4a19      	ldr	r2, [pc, #100]	; (13948 <usage_fault+0x140>)
   138e2:	1a9b      	subs	r3, r3, r2
   138e4:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   138e6:	f04f 0100 	mov.w	r1, #0
   138ea:	2201      	movs	r2, #1
   138ec:	f362 0102 	bfi	r1, r2, #0, #3
   138f0:	f36f 01c5 	bfc	r1, #3, #3
   138f4:	f363 118f 	bfi	r1, r3, #6, #10
   138f8:	4819      	ldr	r0, [pc, #100]	; (13960 <usage_fault+0x158>)
   138fa:	f7fd fcbf 	bl	1127c <log_0>
   138fe:	e7a8      	b.n	13852 <usage_fault+0x4a>
   13900:	4b10      	ldr	r3, [pc, #64]	; (13944 <usage_fault+0x13c>)
   13902:	4a11      	ldr	r2, [pc, #68]	; (13948 <usage_fault+0x140>)
   13904:	1a9b      	subs	r3, r3, r2
   13906:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal use of the EPSR");
   13908:	f04f 0100 	mov.w	r1, #0
   1390c:	2201      	movs	r2, #1
   1390e:	f362 0102 	bfi	r1, r2, #0, #3
   13912:	f36f 01c5 	bfc	r1, #3, #3
   13916:	f363 118f 	bfi	r1, r3, #6, #10
   1391a:	4812      	ldr	r0, [pc, #72]	; (13964 <usage_fault+0x15c>)
   1391c:	f7fd fcae 	bl	1127c <log_0>
   13920:	e79c      	b.n	1385c <usage_fault+0x54>
   13922:	4b08      	ldr	r3, [pc, #32]	; (13944 <usage_fault+0x13c>)
   13924:	4a08      	ldr	r2, [pc, #32]	; (13948 <usage_fault+0x140>)
   13926:	1a9b      	subs	r3, r3, r2
   13928:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   1392a:	f04f 0100 	mov.w	r1, #0
   1392e:	2201      	movs	r2, #1
   13930:	f362 0102 	bfi	r1, r2, #0, #3
   13934:	f36f 01c5 	bfc	r1, #3, #3
   13938:	f363 118f 	bfi	r1, r3, #6, #10
   1393c:	480a      	ldr	r0, [pc, #40]	; (13968 <usage_fault+0x160>)
   1393e:	f7fd fc9d 	bl	1127c <log_0>
   13942:	e790      	b.n	13866 <usage_fault+0x5e>
   13944:	00029fa4 	.word	0x00029fa4
   13948:	00029ecc 	.word	0x00029ecc
   1394c:	0002ab88 	.word	0x0002ab88
   13950:	e000ed00 	.word	0xe000ed00
   13954:	0002aba0 	.word	0x0002aba0
   13958:	0002abb4 	.word	0x0002abb4
   1395c:	0002abd0 	.word	0x0002abd0
   13960:	0002abf0 	.word	0x0002abf0
   13964:	0002ac18 	.word	0x0002ac18
   13968:	0002ac34 	.word	0x0002ac34

0001396c <debug_monitor>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
   1396c:	b508      	push	{r3, lr}
	*recoverable = false;
   1396e:	2200      	movs	r2, #0
   13970:	700a      	strb	r2, [r1, #0]
   13972:	4b08      	ldr	r3, [pc, #32]	; (13994 <debug_monitor+0x28>)
   13974:	4908      	ldr	r1, [pc, #32]	; (13998 <debug_monitor+0x2c>)
   13976:	1a5b      	subs	r3, r3, r1
   13978:	08db      	lsrs	r3, r3, #3

	PR_FAULT_INFO(
   1397a:	f04f 0100 	mov.w	r1, #0
   1397e:	2001      	movs	r0, #1
   13980:	f360 0102 	bfi	r1, r0, #0, #3
   13984:	f362 01c5 	bfi	r1, r2, #3, #3
   13988:	f363 118f 	bfi	r1, r3, #6, #10
   1398c:	4803      	ldr	r0, [pc, #12]	; (1399c <debug_monitor+0x30>)
   1398e:	f7fd fc75 	bl	1127c <log_0>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
   13992:	bd08      	pop	{r3, pc}
   13994:	00029fa4 	.word	0x00029fa4
   13998:	00029ecc 	.word	0x00029ecc
   1399c:	0002ac60 	.word	0x0002ac60

000139a0 <bus_fault>:
{
   139a0:	b570      	push	{r4, r5, r6, lr}
   139a2:	4605      	mov	r5, r0
   139a4:	460e      	mov	r6, r1
   139a6:	4614      	mov	r4, r2
   139a8:	4b5e      	ldr	r3, [pc, #376]	; (13b24 <bus_fault+0x184>)
   139aa:	4a5f      	ldr	r2, [pc, #380]	; (13b28 <bus_fault+0x188>)
   139ac:	1a9b      	subs	r3, r3, r2
   139ae:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   139b0:	f04f 0100 	mov.w	r1, #0
   139b4:	2201      	movs	r2, #1
   139b6:	f362 0102 	bfi	r1, r2, #0, #3
   139ba:	f36f 01c5 	bfc	r1, #3, #3
   139be:	f363 118f 	bfi	r1, r3, #6, #10
   139c2:	485a      	ldr	r0, [pc, #360]	; (13b2c <bus_fault+0x18c>)
   139c4:	f7fd fc5a 	bl	1127c <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   139c8:	4b59      	ldr	r3, [pc, #356]	; (13b30 <bus_fault+0x190>)
   139ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   139cc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   139d0:	d124      	bne.n	13a1c <bus_fault+0x7c>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   139d2:	4b57      	ldr	r3, [pc, #348]	; (13b30 <bus_fault+0x190>)
   139d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   139d6:	f413 6f00 	tst.w	r3, #2048	; 0x800
   139da:	d130      	bne.n	13a3e <bus_fault+0x9e>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   139dc:	4b54      	ldr	r3, [pc, #336]	; (13b30 <bus_fault+0x190>)
   139de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   139e0:	f413 7f00 	tst.w	r3, #512	; 0x200
   139e4:	d13c      	bne.n	13a60 <bus_fault+0xc0>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   139e6:	4b52      	ldr	r3, [pc, #328]	; (13b30 <bus_fault+0x190>)
   139e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   139ea:	f413 6f80 	tst.w	r3, #1024	; 0x400
   139ee:	d165      	bne.n	13abc <bus_fault+0x11c>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   139f0:	4b4f      	ldr	r3, [pc, #316]	; (13b30 <bus_fault+0x190>)
   139f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   139f4:	f413 7f80 	tst.w	r3, #256	; 0x100
   139f8:	d171      	bne.n	13ade <bus_fault+0x13e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   139fa:	4b4d      	ldr	r3, [pc, #308]	; (13b30 <bus_fault+0x190>)
   139fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   139fe:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   13a02:	d17d      	bne.n	13b00 <bus_fault+0x160>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   13a04:	4a4a      	ldr	r2, [pc, #296]	; (13b30 <bus_fault+0x190>)
   13a06:	6a93      	ldr	r3, [r2, #40]	; 0x28
   13a08:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   13a0c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   13a0e:	2101      	movs	r1, #1
   13a10:	4628      	mov	r0, r5
   13a12:	f010 fed6 	bl	247c2 <memory_fault_recoverable>
   13a16:	7020      	strb	r0, [r4, #0]
}
   13a18:	2000      	movs	r0, #0
   13a1a:	bd70      	pop	{r4, r5, r6, pc}
   13a1c:	4b41      	ldr	r3, [pc, #260]	; (13b24 <bus_fault+0x184>)
   13a1e:	4a42      	ldr	r2, [pc, #264]	; (13b28 <bus_fault+0x188>)
   13a20:	1a9b      	subs	r3, r3, r2
   13a22:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error");
   13a24:	f04f 0100 	mov.w	r1, #0
   13a28:	2201      	movs	r2, #1
   13a2a:	f362 0102 	bfi	r1, r2, #0, #3
   13a2e:	f36f 01c5 	bfc	r1, #3, #3
   13a32:	f363 118f 	bfi	r1, r3, #6, #10
   13a36:	483f      	ldr	r0, [pc, #252]	; (13b34 <bus_fault+0x194>)
   13a38:	f7fd fc20 	bl	1127c <log_0>
   13a3c:	e7c9      	b.n	139d2 <bus_fault+0x32>
   13a3e:	4b39      	ldr	r3, [pc, #228]	; (13b24 <bus_fault+0x184>)
   13a40:	4a39      	ldr	r2, [pc, #228]	; (13b28 <bus_fault+0x188>)
   13a42:	1a9b      	subs	r3, r3, r2
   13a44:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
   13a46:	f04f 0100 	mov.w	r1, #0
   13a4a:	2201      	movs	r2, #1
   13a4c:	f362 0102 	bfi	r1, r2, #0, #3
   13a50:	f36f 01c5 	bfc	r1, #3, #3
   13a54:	f363 118f 	bfi	r1, r3, #6, #10
   13a58:	4837      	ldr	r0, [pc, #220]	; (13b38 <bus_fault+0x198>)
   13a5a:	f7fd fc0f 	bl	1127c <log_0>
   13a5e:	e7bd      	b.n	139dc <bus_fault+0x3c>
   13a60:	4b30      	ldr	r3, [pc, #192]	; (13b24 <bus_fault+0x184>)
   13a62:	4a31      	ldr	r2, [pc, #196]	; (13b28 <bus_fault+0x188>)
   13a64:	1a9b      	subs	r3, r3, r2
   13a66:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Precise data bus error");
   13a68:	f04f 0100 	mov.w	r1, #0
   13a6c:	2201      	movs	r2, #1
   13a6e:	f362 0102 	bfi	r1, r2, #0, #3
   13a72:	f36f 01c5 	bfc	r1, #3, #3
   13a76:	f363 118f 	bfi	r1, r3, #6, #10
   13a7a:	4830      	ldr	r0, [pc, #192]	; (13b3c <bus_fault+0x19c>)
   13a7c:	f7fd fbfe 	bl	1127c <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   13a80:	4b2b      	ldr	r3, [pc, #172]	; (13b30 <bus_fault+0x190>)
   13a82:	6b99      	ldr	r1, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   13a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13a86:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   13a8a:	d0ac      	beq.n	139e6 <bus_fault+0x46>
   13a8c:	4b25      	ldr	r3, [pc, #148]	; (13b24 <bus_fault+0x184>)
   13a8e:	4a26      	ldr	r2, [pc, #152]	; (13b28 <bus_fault+0x188>)
   13a90:	1a9b      	subs	r3, r3, r2
   13a92:	08db      	lsrs	r3, r3, #3
			PR_EXC("  BFAR Address: 0x%x", bfar);
   13a94:	f04f 0200 	mov.w	r2, #0
   13a98:	2001      	movs	r0, #1
   13a9a:	f360 0202 	bfi	r2, r0, #0, #3
   13a9e:	f36f 02c5 	bfc	r2, #3, #3
   13aa2:	f363 128f 	bfi	r2, r3, #6, #10
   13aa6:	4826      	ldr	r0, [pc, #152]	; (13b40 <bus_fault+0x1a0>)
   13aa8:	f7fd fb32 	bl	11110 <log_1>
			if (from_hard_fault != 0) {
   13aac:	2e00      	cmp	r6, #0
   13aae:	d09a      	beq.n	139e6 <bus_fault+0x46>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   13ab0:	4a1f      	ldr	r2, [pc, #124]	; (13b30 <bus_fault+0x190>)
   13ab2:	6a93      	ldr	r3, [r2, #40]	; 0x28
   13ab4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   13ab8:	6293      	str	r3, [r2, #40]	; 0x28
   13aba:	e794      	b.n	139e6 <bus_fault+0x46>
   13abc:	4b19      	ldr	r3, [pc, #100]	; (13b24 <bus_fault+0x184>)
   13abe:	4a1a      	ldr	r2, [pc, #104]	; (13b28 <bus_fault+0x188>)
   13ac0:	1a9b      	subs	r3, r3, r2
   13ac2:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Imprecise data bus error");
   13ac4:	f04f 0100 	mov.w	r1, #0
   13ac8:	2201      	movs	r2, #1
   13aca:	f362 0102 	bfi	r1, r2, #0, #3
   13ace:	f36f 01c5 	bfc	r1, #3, #3
   13ad2:	f363 118f 	bfi	r1, r3, #6, #10
   13ad6:	481b      	ldr	r0, [pc, #108]	; (13b44 <bus_fault+0x1a4>)
   13ad8:	f7fd fbd0 	bl	1127c <log_0>
   13adc:	e788      	b.n	139f0 <bus_fault+0x50>
   13ade:	4b11      	ldr	r3, [pc, #68]	; (13b24 <bus_fault+0x184>)
   13ae0:	4a11      	ldr	r2, [pc, #68]	; (13b28 <bus_fault+0x188>)
   13ae2:	1a9b      	subs	r3, r3, r2
   13ae4:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction bus error");
   13ae6:	f04f 0100 	mov.w	r1, #0
   13aea:	2201      	movs	r2, #1
   13aec:	f362 0102 	bfi	r1, r2, #0, #3
   13af0:	f36f 01c5 	bfc	r1, #3, #3
   13af4:	f363 118f 	bfi	r1, r3, #6, #10
   13af8:	4813      	ldr	r0, [pc, #76]	; (13b48 <bus_fault+0x1a8>)
   13afa:	f7fd fbbf 	bl	1127c <log_0>
   13afe:	e781      	b.n	13a04 <bus_fault+0x64>
   13b00:	4b08      	ldr	r3, [pc, #32]	; (13b24 <bus_fault+0x184>)
   13b02:	4a09      	ldr	r2, [pc, #36]	; (13b28 <bus_fault+0x188>)
   13b04:	1a9b      	subs	r3, r3, r2
   13b06:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   13b08:	f04f 0100 	mov.w	r1, #0
   13b0c:	2201      	movs	r2, #1
   13b0e:	f362 0102 	bfi	r1, r2, #0, #3
   13b12:	f36f 01c5 	bfc	r1, #3, #3
   13b16:	f363 118f 	bfi	r1, r3, #6, #10
   13b1a:	480c      	ldr	r0, [pc, #48]	; (13b4c <bus_fault+0x1ac>)
   13b1c:	f7fd fbae 	bl	1127c <log_0>
   13b20:	e770      	b.n	13a04 <bus_fault+0x64>
   13b22:	bf00      	nop
   13b24:	00029fa4 	.word	0x00029fa4
   13b28:	00029ecc 	.word	0x00029ecc
   13b2c:	0002ac84 	.word	0x0002ac84
   13b30:	e000ed00 	.word	0xe000ed00
   13b34:	0002ac9c 	.word	0x0002ac9c
   13b38:	0002acb0 	.word	0x0002acb0
   13b3c:	0002acc4 	.word	0x0002acc4
   13b40:	0002ace0 	.word	0x0002ace0
   13b44:	0002acf8 	.word	0x0002acf8
   13b48:	0002ad14 	.word	0x0002ad14
   13b4c:	0002ad2c 	.word	0x0002ad2c

00013b50 <mem_manage_fault>:
{
   13b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13b52:	4605      	mov	r5, r0
   13b54:	460c      	mov	r4, r1
   13b56:	4616      	mov	r6, r2
   13b58:	4b64      	ldr	r3, [pc, #400]	; (13cec <mem_manage_fault+0x19c>)
   13b5a:	4a65      	ldr	r2, [pc, #404]	; (13cf0 <mem_manage_fault+0x1a0>)
   13b5c:	1a9b      	subs	r3, r3, r2
   13b5e:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   13b60:	f04f 0100 	mov.w	r1, #0
   13b64:	2201      	movs	r2, #1
   13b66:	f362 0102 	bfi	r1, r2, #0, #3
   13b6a:	f36f 01c5 	bfc	r1, #3, #3
   13b6e:	f363 118f 	bfi	r1, r3, #6, #10
   13b72:	4860      	ldr	r0, [pc, #384]	; (13cf4 <mem_manage_fault+0x1a4>)
   13b74:	f7fd fb82 	bl	1127c <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   13b78:	4b5f      	ldr	r3, [pc, #380]	; (13cf8 <mem_manage_fault+0x1a8>)
   13b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13b7c:	f013 0f10 	tst.w	r3, #16
   13b80:	d132      	bne.n	13be8 <mem_manage_fault+0x98>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   13b82:	4b5d      	ldr	r3, [pc, #372]	; (13cf8 <mem_manage_fault+0x1a8>)
   13b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13b86:	f013 0f08 	tst.w	r3, #8
   13b8a:	d13e      	bne.n	13c0a <mem_manage_fault+0xba>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   13b8c:	4b5a      	ldr	r3, [pc, #360]	; (13cf8 <mem_manage_fault+0x1a8>)
   13b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13b90:	f013 0f02 	tst.w	r3, #2
   13b94:	d14a      	bne.n	13c2c <mem_manage_fault+0xdc>
	uint32_t mmfar = -EINVAL;
   13b96:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   13b9a:	4b57      	ldr	r3, [pc, #348]	; (13cf8 <mem_manage_fault+0x1a8>)
   13b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13b9e:	f013 0f01 	tst.w	r3, #1
   13ba2:	d175      	bne.n	13c90 <mem_manage_fault+0x140>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   13ba4:	4b54      	ldr	r3, [pc, #336]	; (13cf8 <mem_manage_fault+0x1a8>)
   13ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13ba8:	f013 0f20 	tst.w	r3, #32
   13bac:	f040 8081 	bne.w	13cb2 <mem_manage_fault+0x162>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   13bb0:	4b51      	ldr	r3, [pc, #324]	; (13cf8 <mem_manage_fault+0x1a8>)
   13bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13bb4:	f013 0f10 	tst.w	r3, #16
   13bb8:	d104      	bne.n	13bc4 <mem_manage_fault+0x74>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   13bba:	4b4f      	ldr	r3, [pc, #316]	; (13cf8 <mem_manage_fault+0x1a8>)
   13bbc:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   13bbe:	f014 0402 	ands.w	r4, r4, #2
   13bc2:	d005      	beq.n	13bd0 <mem_manage_fault+0x80>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   13bc4:	4b4c      	ldr	r3, [pc, #304]	; (13cf8 <mem_manage_fault+0x1a8>)
   13bc6:	685c      	ldr	r4, [r3, #4]
   13bc8:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
   13bcc:	f040 8082 	bne.w	13cd4 <mem_manage_fault+0x184>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   13bd0:	4a49      	ldr	r2, [pc, #292]	; (13cf8 <mem_manage_fault+0x1a8>)
   13bd2:	6a93      	ldr	r3, [r2, #40]	; 0x28
   13bd4:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   13bd8:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   13bda:	2101      	movs	r1, #1
   13bdc:	4628      	mov	r0, r5
   13bde:	f010 fdf0 	bl	247c2 <memory_fault_recoverable>
   13be2:	7030      	strb	r0, [r6, #0]
}
   13be4:	4620      	mov	r0, r4
   13be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13be8:	4b40      	ldr	r3, [pc, #256]	; (13cec <mem_manage_fault+0x19c>)
   13bea:	4a41      	ldr	r2, [pc, #260]	; (13cf0 <mem_manage_fault+0x1a0>)
   13bec:	1a9b      	subs	r3, r3, r2
   13bee:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error (context area might be"
   13bf0:	f04f 0100 	mov.w	r1, #0
   13bf4:	2201      	movs	r2, #1
   13bf6:	f362 0102 	bfi	r1, r2, #0, #3
   13bfa:	f36f 01c5 	bfc	r1, #3, #3
   13bfe:	f363 118f 	bfi	r1, r3, #6, #10
   13c02:	483e      	ldr	r0, [pc, #248]	; (13cfc <mem_manage_fault+0x1ac>)
   13c04:	f7fd fb3a 	bl	1127c <log_0>
   13c08:	e7bb      	b.n	13b82 <mem_manage_fault+0x32>
   13c0a:	4b38      	ldr	r3, [pc, #224]	; (13cec <mem_manage_fault+0x19c>)
   13c0c:	4a38      	ldr	r2, [pc, #224]	; (13cf0 <mem_manage_fault+0x1a0>)
   13c0e:	1a9b      	subs	r3, r3, r2
   13c10:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
   13c12:	f04f 0100 	mov.w	r1, #0
   13c16:	2201      	movs	r2, #1
   13c18:	f362 0102 	bfi	r1, r2, #0, #3
   13c1c:	f36f 01c5 	bfc	r1, #3, #3
   13c20:	f363 118f 	bfi	r1, r3, #6, #10
   13c24:	4836      	ldr	r0, [pc, #216]	; (13d00 <mem_manage_fault+0x1b0>)
   13c26:	f7fd fb29 	bl	1127c <log_0>
   13c2a:	e7af      	b.n	13b8c <mem_manage_fault+0x3c>
   13c2c:	4b2f      	ldr	r3, [pc, #188]	; (13cec <mem_manage_fault+0x19c>)
   13c2e:	4a30      	ldr	r2, [pc, #192]	; (13cf0 <mem_manage_fault+0x1a0>)
   13c30:	1a9b      	subs	r3, r3, r2
   13c32:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Data Access Violation");
   13c34:	f04f 0100 	mov.w	r1, #0
   13c38:	2201      	movs	r2, #1
   13c3a:	f362 0102 	bfi	r1, r2, #0, #3
   13c3e:	f36f 01c5 	bfc	r1, #3, #3
   13c42:	f363 118f 	bfi	r1, r3, #6, #10
   13c46:	482f      	ldr	r0, [pc, #188]	; (13d04 <mem_manage_fault+0x1b4>)
   13c48:	f7fd fb18 	bl	1127c <log_0>
		uint32_t temp = SCB->MMFAR;
   13c4c:	4b2a      	ldr	r3, [pc, #168]	; (13cf8 <mem_manage_fault+0x1a8>)
   13c4e:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   13c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13c52:	f013 0f80 	tst.w	r3, #128	; 0x80
   13c56:	d102      	bne.n	13c5e <mem_manage_fault+0x10e>
	uint32_t mmfar = -EINVAL;
   13c58:	f06f 0715 	mvn.w	r7, #21
   13c5c:	e79d      	b.n	13b9a <mem_manage_fault+0x4a>
   13c5e:	4b23      	ldr	r3, [pc, #140]	; (13cec <mem_manage_fault+0x19c>)
   13c60:	4a23      	ldr	r2, [pc, #140]	; (13cf0 <mem_manage_fault+0x1a0>)
   13c62:	1a9b      	subs	r3, r3, r2
   13c64:	08db      	lsrs	r3, r3, #3
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   13c66:	f04f 0200 	mov.w	r2, #0
   13c6a:	2101      	movs	r1, #1
   13c6c:	f361 0202 	bfi	r2, r1, #0, #3
   13c70:	f36f 02c5 	bfc	r2, #3, #3
   13c74:	f363 128f 	bfi	r2, r3, #6, #10
   13c78:	4639      	mov	r1, r7
   13c7a:	4823      	ldr	r0, [pc, #140]	; (13d08 <mem_manage_fault+0x1b8>)
   13c7c:	f7fd fa48 	bl	11110 <log_1>
			if (from_hard_fault != 0) {
   13c80:	2c00      	cmp	r4, #0
   13c82:	d08a      	beq.n	13b9a <mem_manage_fault+0x4a>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   13c84:	4a1c      	ldr	r2, [pc, #112]	; (13cf8 <mem_manage_fault+0x1a8>)
   13c86:	6a93      	ldr	r3, [r2, #40]	; 0x28
   13c88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   13c8c:	6293      	str	r3, [r2, #40]	; 0x28
   13c8e:	e784      	b.n	13b9a <mem_manage_fault+0x4a>
   13c90:	4b16      	ldr	r3, [pc, #88]	; (13cec <mem_manage_fault+0x19c>)
   13c92:	4a17      	ldr	r2, [pc, #92]	; (13cf0 <mem_manage_fault+0x1a0>)
   13c94:	1a9b      	subs	r3, r3, r2
   13c96:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction Access Violation");
   13c98:	f04f 0100 	mov.w	r1, #0
   13c9c:	2201      	movs	r2, #1
   13c9e:	f362 0102 	bfi	r1, r2, #0, #3
   13ca2:	f36f 01c5 	bfc	r1, #3, #3
   13ca6:	f363 118f 	bfi	r1, r3, #6, #10
   13caa:	4818      	ldr	r0, [pc, #96]	; (13d0c <mem_manage_fault+0x1bc>)
   13cac:	f7fd fae6 	bl	1127c <log_0>
   13cb0:	e778      	b.n	13ba4 <mem_manage_fault+0x54>
   13cb2:	4b0e      	ldr	r3, [pc, #56]	; (13cec <mem_manage_fault+0x19c>)
   13cb4:	4a0e      	ldr	r2, [pc, #56]	; (13cf0 <mem_manage_fault+0x1a0>)
   13cb6:	1a9b      	subs	r3, r3, r2
   13cb8:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO(
   13cba:	f04f 0100 	mov.w	r1, #0
   13cbe:	2201      	movs	r2, #1
   13cc0:	f362 0102 	bfi	r1, r2, #0, #3
   13cc4:	f36f 01c5 	bfc	r1, #3, #3
   13cc8:	f363 118f 	bfi	r1, r3, #6, #10
   13ccc:	4810      	ldr	r0, [pc, #64]	; (13d10 <mem_manage_fault+0x1c0>)
   13cce:	f7fd fad5 	bl	1127c <log_0>
   13cd2:	e76d      	b.n	13bb0 <mem_manage_fault+0x60>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   13cd4:	4629      	mov	r1, r5
   13cd6:	4638      	mov	r0, r7
   13cd8:	f7ff fc70 	bl	135bc <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   13cdc:	4604      	mov	r4, r0
   13cde:	2800      	cmp	r0, #0
   13ce0:	f43f af76 	beq.w	13bd0 <mem_manage_fault+0x80>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   13ce4:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   13ce8:	2402      	movs	r4, #2
   13cea:	e771      	b.n	13bd0 <mem_manage_fault+0x80>
   13cec:	00029fa4 	.word	0x00029fa4
   13cf0:	00029ecc 	.word	0x00029ecc
   13cf4:	0002ad5c 	.word	0x0002ad5c
   13cf8:	e000ed00 	.word	0xe000ed00
   13cfc:	0002ad74 	.word	0x0002ad74
   13d00:	0002acb0 	.word	0x0002acb0
   13d04:	0002ada8 	.word	0x0002ada8
   13d08:	0002adc0 	.word	0x0002adc0
   13d0c:	0002add8 	.word	0x0002add8
   13d10:	0002ad2c 	.word	0x0002ad2c

00013d14 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
   13d14:	b570      	push	{r4, r5, r6, lr}
   13d16:	4605      	mov	r5, r0
   13d18:	460c      	mov	r4, r1
   13d1a:	4b2d      	ldr	r3, [pc, #180]	; (13dd0 <hard_fault+0xbc>)
   13d1c:	4a2d      	ldr	r2, [pc, #180]	; (13dd4 <hard_fault+0xc0>)
   13d1e:	1a9b      	subs	r3, r3, r2
   13d20:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** HARD FAULT *****");
   13d22:	f04f 0100 	mov.w	r1, #0
   13d26:	2201      	movs	r2, #1
   13d28:	f362 0102 	bfi	r1, r2, #0, #3
   13d2c:	f36f 01c5 	bfc	r1, #3, #3
   13d30:	f363 118f 	bfi	r1, r3, #6, #10
   13d34:	4828      	ldr	r0, [pc, #160]	; (13dd8 <hard_fault+0xc4>)
   13d36:	f7fd faa1 	bl	1127c <log_0>
	}
#undef _SVC_OPCODE

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
   13d3a:	2300      	movs	r3, #0
   13d3c:	7023      	strb	r3, [r4, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   13d3e:	4b27      	ldr	r3, [pc, #156]	; (13ddc <hard_fault+0xc8>)
   13d40:	6ade      	ldr	r6, [r3, #44]	; 0x2c
   13d42:	f016 0602 	ands.w	r6, r6, #2
   13d46:	d105      	bne.n	13d54 <hard_fault+0x40>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   13d48:	4b24      	ldr	r3, [pc, #144]	; (13ddc <hard_fault+0xc8>)
   13d4a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   13d4c:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
   13d50:	d112      	bne.n	13d78 <hard_fault+0x64>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
   13d52:	bd70      	pop	{r4, r5, r6, pc}
   13d54:	4b1e      	ldr	r3, [pc, #120]	; (13dd0 <hard_fault+0xbc>)
   13d56:	4a1f      	ldr	r2, [pc, #124]	; (13dd4 <hard_fault+0xc0>)
   13d58:	1a9b      	subs	r3, r3, r2
   13d5a:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Bus fault on vector table read");
   13d5c:	f04f 0100 	mov.w	r1, #0
   13d60:	2201      	movs	r2, #1
   13d62:	f362 0102 	bfi	r1, r2, #0, #3
   13d66:	f36f 01c5 	bfc	r1, #3, #3
   13d6a:	f363 118f 	bfi	r1, r3, #6, #10
   13d6e:	481c      	ldr	r0, [pc, #112]	; (13de0 <hard_fault+0xcc>)
   13d70:	f7fd fa84 	bl	1127c <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   13d74:	2000      	movs	r0, #0
   13d76:	e7ec      	b.n	13d52 <hard_fault+0x3e>
   13d78:	4b15      	ldr	r3, [pc, #84]	; (13dd0 <hard_fault+0xbc>)
   13d7a:	4a16      	ldr	r2, [pc, #88]	; (13dd4 <hard_fault+0xc0>)
   13d7c:	1a9b      	subs	r3, r3, r2
   13d7e:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Fault escalation (see below)");
   13d80:	f04f 0100 	mov.w	r1, #0
   13d84:	2201      	movs	r2, #1
   13d86:	f362 0102 	bfi	r1, r2, #0, #3
   13d8a:	f36f 01c5 	bfc	r1, #3, #3
   13d8e:	f363 118f 	bfi	r1, r3, #6, #10
   13d92:	4814      	ldr	r0, [pc, #80]	; (13de4 <hard_fault+0xd0>)
   13d94:	f7fd fa72 	bl	1127c <log_0>
		if (SCB_MMFSR != 0) {
   13d98:	4b13      	ldr	r3, [pc, #76]	; (13de8 <hard_fault+0xd4>)
   13d9a:	781b      	ldrb	r3, [r3, #0]
   13d9c:	b943      	cbnz	r3, 13db0 <hard_fault+0x9c>
		} else if (SCB_BFSR != 0) {
   13d9e:	4b13      	ldr	r3, [pc, #76]	; (13dec <hard_fault+0xd8>)
   13da0:	781b      	ldrb	r3, [r3, #0]
   13da2:	b95b      	cbnz	r3, 13dbc <hard_fault+0xa8>
		} else if (SCB_UFSR != 0) {
   13da4:	4b12      	ldr	r3, [pc, #72]	; (13df0 <hard_fault+0xdc>)
   13da6:	881b      	ldrh	r3, [r3, #0]
   13da8:	b29b      	uxth	r3, r3
   13daa:	b96b      	cbnz	r3, 13dc8 <hard_fault+0xb4>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   13dac:	4630      	mov	r0, r6
	return reason;
   13dae:	e7d0      	b.n	13d52 <hard_fault+0x3e>
			reason = mem_manage_fault(esf, 1, recoverable);
   13db0:	4622      	mov	r2, r4
   13db2:	2101      	movs	r1, #1
   13db4:	4628      	mov	r0, r5
   13db6:	f7ff fecb 	bl	13b50 <mem_manage_fault>
   13dba:	e7ca      	b.n	13d52 <hard_fault+0x3e>
			reason = bus_fault(esf, 1, recoverable);
   13dbc:	4622      	mov	r2, r4
   13dbe:	2101      	movs	r1, #1
   13dc0:	4628      	mov	r0, r5
   13dc2:	f7ff fded 	bl	139a0 <bus_fault>
   13dc6:	e7c4      	b.n	13d52 <hard_fault+0x3e>
			reason = usage_fault(esf);
   13dc8:	4628      	mov	r0, r5
   13dca:	f7ff fd1d 	bl	13808 <usage_fault>
   13dce:	e7c0      	b.n	13d52 <hard_fault+0x3e>
   13dd0:	00029fa4 	.word	0x00029fa4
   13dd4:	00029ecc 	.word	0x00029ecc
   13dd8:	0002adf8 	.word	0x0002adf8
   13ddc:	e000ed00 	.word	0xe000ed00
   13de0:	0002ae10 	.word	0x0002ae10
   13de4:	0002ae34 	.word	0x0002ae34
   13de8:	e000ed28 	.word	0xe000ed28
   13dec:	e000ed29 	.word	0xe000ed29
   13df0:	e000ed2a 	.word	0xe000ed2a

00013df4 <reserved_exception>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
   13df4:	b508      	push	{r3, lr}
   13df6:	460a      	mov	r2, r1
   13df8:	480b      	ldr	r0, [pc, #44]	; (13e28 <reserved_exception+0x34>)
   13dfa:	4b0c      	ldr	r3, [pc, #48]	; (13e2c <reserved_exception+0x38>)
   13dfc:	1ac0      	subs	r0, r0, r3
   13dfe:	08c0      	lsrs	r0, r0, #3
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
   13e00:	f04f 0300 	mov.w	r3, #0
   13e04:	2101      	movs	r1, #1
   13e06:	f361 0302 	bfi	r3, r1, #0, #3
   13e0a:	f36f 03c5 	bfc	r3, #3, #3
   13e0e:	f360 138f 	bfi	r3, r0, #6, #10
   13e12:	2a0f      	cmp	r2, #15
   13e14:	dc05      	bgt.n	13e22 <reserved_exception+0x2e>
   13e16:	4906      	ldr	r1, [pc, #24]	; (13e30 <reserved_exception+0x3c>)
   13e18:	3a10      	subs	r2, #16
   13e1a:	4806      	ldr	r0, [pc, #24]	; (13e34 <reserved_exception+0x40>)
   13e1c:	f7fd f9ae 	bl	1117c <log_2>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
   13e20:	bd08      	pop	{r3, pc}
	PR_FAULT_INFO("***** %s %d) *****",
   13e22:	4905      	ldr	r1, [pc, #20]	; (13e38 <reserved_exception+0x44>)
   13e24:	e7f8      	b.n	13e18 <reserved_exception+0x24>
   13e26:	bf00      	nop
   13e28:	00029fa4 	.word	0x00029fa4
   13e2c:	00029ecc 	.word	0x00029ecc
   13e30:	0002ae54 	.word	0x0002ae54
   13e34:	0002ae88 	.word	0x0002ae88
   13e38:	0002ae6c 	.word	0x0002ae6c

00013e3c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   13e3c:	b570      	push	{r4, r5, r6, lr}
   13e3e:	b08a      	sub	sp, #40	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   13e40:	4b2b      	ldr	r3, [pc, #172]	; (13ef0 <z_arm_fault+0xb4>)
   13e42:	685d      	ldr	r5, [r3, #4]
   13e44:	f3c5 0508 	ubfx	r5, r5, #0, #9
   13e48:	2300      	movs	r3, #0
   13e4a:	f383 8811 	msr	BASEPRI, r3
   13e4e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   13e52:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   13e56:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   13e5a:	d12a      	bne.n	13eb2 <z_arm_fault+0x76>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   13e5c:	f002 030c 	and.w	r3, r2, #12
   13e60:	2b08      	cmp	r3, #8
   13e62:	d010      	beq.n	13e86 <z_arm_fault+0x4a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   13e64:	f012 0f08 	tst.w	r2, #8
   13e68:	d020      	beq.n	13eac <z_arm_fault+0x70>
			ptr_esf =  (z_arch_esf_t *)psp;
   13e6a:	460c      	mov	r4, r1
	*nested_exc = false;
   13e6c:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
   13e6e:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   13e72:	4629      	mov	r1, r5
   13e74:	4620      	mov	r0, r4
   13e76:	f010 fca6 	bl	247c6 <fault_handle>
   13e7a:	4605      	mov	r5, r0
	if (recoverable) {
   13e7c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   13e80:	b1d3      	cbz	r3, 13eb8 <z_arm_fault+0x7c>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
   13e82:	b00a      	add	sp, #40	; 0x28
   13e84:	bd70      	pop	{r4, r5, r6, pc}
   13e86:	4b1b      	ldr	r3, [pc, #108]	; (13ef4 <z_arm_fault+0xb8>)
   13e88:	4a1b      	ldr	r2, [pc, #108]	; (13ef8 <z_arm_fault+0xbc>)
   13e8a:	1a9b      	subs	r3, r3, r2
   13e8c:	08db      	lsrs	r3, r3, #3
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   13e8e:	f04f 0100 	mov.w	r1, #0
   13e92:	2201      	movs	r2, #1
   13e94:	f362 0102 	bfi	r1, r2, #0, #3
   13e98:	f36f 01c5 	bfc	r1, #3, #3
   13e9c:	f363 118f 	bfi	r1, r3, #6, #10
   13ea0:	4816      	ldr	r0, [pc, #88]	; (13efc <z_arm_fault+0xc0>)
   13ea2:	f7fd f9eb 	bl	1127c <log_0>
	*nested_exc = false;
   13ea6:	2600      	movs	r6, #0
		return NULL;
   13ea8:	4634      	mov	r4, r6
   13eaa:	e7e0      	b.n	13e6e <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
   13eac:	4604      	mov	r4, r0
			*nested_exc = true;
   13eae:	2601      	movs	r6, #1
   13eb0:	e7dd      	b.n	13e6e <z_arm_fault+0x32>
	*nested_exc = false;
   13eb2:	2600      	movs	r6, #0
		return NULL;
   13eb4:	4634      	mov	r4, r6
   13eb6:	e7da      	b.n	13e6e <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   13eb8:	2220      	movs	r2, #32
   13eba:	4621      	mov	r1, r4
   13ebc:	a801      	add	r0, sp, #4
   13ebe:	f010 fdd5 	bl	24a6c <memcpy>
	if (nested_exc) {
   13ec2:	b14e      	cbz	r6, 13ed8 <z_arm_fault+0x9c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   13ec4:	9b08      	ldr	r3, [sp, #32]
   13ec6:	f3c3 0208 	ubfx	r2, r3, #0, #9
   13eca:	b95a      	cbnz	r2, 13ee4 <z_arm_fault+0xa8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   13ecc:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   13ed0:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   13ed4:	9308      	str	r3, [sp, #32]
   13ed6:	e005      	b.n	13ee4 <z_arm_fault+0xa8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   13ed8:	9b08      	ldr	r3, [sp, #32]
   13eda:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   13ede:	f023 0301 	bic.w	r3, r3, #1
   13ee2:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
   13ee4:	a901      	add	r1, sp, #4
   13ee6:	4628      	mov	r0, r5
   13ee8:	f010 fc53 	bl	24792 <z_arm_fatal_error>
   13eec:	e7c9      	b.n	13e82 <z_arm_fault+0x46>
   13eee:	bf00      	nop
   13ef0:	e000ed00 	.word	0xe000ed00
   13ef4:	00029fa4 	.word	0x00029fa4
   13ef8:	00029ecc 	.word	0x00029ecc
   13efc:	0002ae9c 	.word	0x0002ae9c

00013f00 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   13f00:	4a02      	ldr	r2, [pc, #8]	; (13f0c <z_arm_fault_init+0xc>)
   13f02:	6953      	ldr	r3, [r2, #20]
   13f04:	f043 0310 	orr.w	r3, r3, #16
   13f08:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   13f0a:	4770      	bx	lr
   13f0c:	e000ed00 	.word	0xe000ed00

00013f10 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   13f10:	4b04      	ldr	r3, [pc, #16]	; (13f24 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   13f12:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   13f14:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
   13f16:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   13f18:	d003      	beq.n	13f22 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   13f1a:	4903      	ldr	r1, [pc, #12]	; (13f28 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   13f1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   13f20:	600a      	str	r2, [r1, #0]

00013f22 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   13f22:	4770      	bx	lr
	ldr r3, =_kernel
   13f24:	20003938 	.word	0x20003938
	ldr r1, =_SCS_ICSR
   13f28:	e000ed04 	.word	0xe000ed04

00013f2c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   13f2c:	4b06      	ldr	r3, [pc, #24]	; (13f48 <z_arm_clear_arm_mpu_config+0x1c>)
   13f2e:	6818      	ldr	r0, [r3, #0]
	int num_regions =
   13f30:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
   13f34:	2300      	movs	r3, #0
   13f36:	4283      	cmp	r3, r0
   13f38:	da05      	bge.n	13f46 <z_arm_clear_arm_mpu_config+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
   13f3a:	4a03      	ldr	r2, [pc, #12]	; (13f48 <z_arm_clear_arm_mpu_config+0x1c>)
   13f3c:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   13f3e:	2100      	movs	r1, #0
   13f40:	6111      	str	r1, [r2, #16]
   13f42:	3301      	adds	r3, #1
   13f44:	e7f7      	b.n	13f36 <z_arm_clear_arm_mpu_config+0xa>
		ARM_MPU_ClrRegion(i);
	}
}
   13f46:	4770      	bx	lr
   13f48:	e000ed90 	.word	0xe000ed90

00013f4c <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   13f4c:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   13f4e:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   13f50:	2400      	movs	r4, #0
   13f52:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   13f56:	f7ff ffe9 	bl	13f2c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   13f5a:	4623      	mov	r3, r4
   13f5c:	e008      	b.n	13f70 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
   13f5e:	f103 0120 	add.w	r1, r3, #32
   13f62:	4a0e      	ldr	r2, [pc, #56]	; (13f9c <z_arm_init_arch_hw_at_boot+0x50>)
   13f64:	f04f 30ff 	mov.w	r0, #4294967295
   13f68:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   13f6c:	3301      	adds	r3, #1
   13f6e:	b2db      	uxtb	r3, r3
   13f70:	2b07      	cmp	r3, #7
   13f72:	d9f4      	bls.n	13f5e <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   13f74:	2300      	movs	r3, #0
   13f76:	e008      	b.n	13f8a <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
   13f78:	f103 0160 	add.w	r1, r3, #96	; 0x60
   13f7c:	4a07      	ldr	r2, [pc, #28]	; (13f9c <z_arm_init_arch_hw_at_boot+0x50>)
   13f7e:	f04f 30ff 	mov.w	r0, #4294967295
   13f82:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   13f86:	3301      	adds	r3, #1
   13f88:	b2db      	uxtb	r3, r3
   13f8a:	2b07      	cmp	r3, #7
   13f8c:	d9f4      	bls.n	13f78 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   13f8e:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   13f90:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13f94:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   13f98:	bd10      	pop	{r4, pc}
   13f9a:	bf00      	nop
   13f9c:	e000e100 	.word	0xe000e100

00013fa0 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   13fa0:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   13fa2:	e006      	b.n	13fb2 <z_arm_interrupt_init+0x12>
   13fa4:	f002 010f 	and.w	r1, r2, #15
   13fa8:	4b09      	ldr	r3, [pc, #36]	; (13fd0 <z_arm_interrupt_init+0x30>)
   13faa:	440b      	add	r3, r1
   13fac:	2140      	movs	r1, #64	; 0x40
   13fae:	7619      	strb	r1, [r3, #24]
   13fb0:	3201      	adds	r2, #1
   13fb2:	2a26      	cmp	r2, #38	; 0x26
   13fb4:	dc0a      	bgt.n	13fcc <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   13fb6:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   13fb8:	2b00      	cmp	r3, #0
   13fba:	dbf3      	blt.n	13fa4 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13fbc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   13fc0:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   13fc4:	2140      	movs	r1, #64	; 0x40
   13fc6:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   13fca:	e7f1      	b.n	13fb0 <z_arm_interrupt_init+0x10>
	}
}
   13fcc:	4770      	bx	lr
   13fce:	bf00      	nop
   13fd0:	e000ecfc 	.word	0xe000ecfc

00013fd4 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   13fd4:	b508      	push	{r3, lr}
	if (_current == thread) {
   13fd6:	4b08      	ldr	r3, [pc, #32]	; (13ff8 <z_impl_k_thread_abort+0x24>)
   13fd8:	689b      	ldr	r3, [r3, #8]
   13fda:	4283      	cmp	r3, r0
   13fdc:	d002      	beq.n	13fe4 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
   13fde:	f00c fcc5 	bl	2096c <z_thread_abort>
}
   13fe2:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   13fe4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   13fe8:	2b00      	cmp	r3, #0
   13fea:	d0f8      	beq.n	13fde <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13fec:	4a03      	ldr	r2, [pc, #12]	; (13ffc <z_impl_k_thread_abort+0x28>)
   13fee:	6853      	ldr	r3, [r2, #4]
   13ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   13ff4:	6053      	str	r3, [r2, #4]
   13ff6:	e7f2      	b.n	13fde <z_impl_k_thread_abort+0xa>
   13ff8:	20003938 	.word	0x20003938
   13ffc:	e000ed00 	.word	0xe000ed00

00014000 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   14000:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   14002:	4b03      	ldr	r3, [pc, #12]	; (14010 <z_arm_configure_static_mpu_regions+0x10>)
   14004:	4a03      	ldr	r2, [pc, #12]	; (14014 <z_arm_configure_static_mpu_regions+0x14>)
   14006:	2101      	movs	r1, #1
   14008:	4803      	ldr	r0, [pc, #12]	; (14018 <z_arm_configure_static_mpu_regions+0x18>)
   1400a:	f010 fc31 	bl	24870 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   1400e:	bd08      	pop	{r3, pc}
   14010:	20010000 	.word	0x20010000
   14014:	20000000 	.word	0x20000000
   14018:	0002aecc 	.word	0x0002aecc

0001401c <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   1401c:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   1401e:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   14022:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   14024:	4804      	ldr	r0, [pc, #16]	; (14038 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   14026:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
   14028:	2320      	movs	r3, #32
   1402a:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   1402c:	4b03      	ldr	r3, [pc, #12]	; (1403c <z_arm_configure_dynamic_mpu_regions+0x20>)
   1402e:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   14030:	2101      	movs	r1, #1
   14032:	f010 fc21 	bl	24878 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
   14036:	bd08      	pop	{r3, pc}
   14038:	20002590 	.word	0x20002590
   1403c:	150b0000 	.word	0x150b0000

00014040 <region_init>:
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
   14040:	4a06      	ldr	r2, [pc, #24]	; (1405c <region_init+0x1c>)
   14042:	6090      	str	r0, [r2, #8]
	/* Configure the region */
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   14044:	680b      	ldr	r3, [r1, #0]
   14046:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   1404a:	4303      	orrs	r3, r0
   1404c:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   14050:	60d3      	str	r3, [r2, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   14052:	688b      	ldr	r3, [r1, #8]
   14054:	f043 0301 	orr.w	r3, r3, #1
   14058:	6113      	str	r3, [r2, #16]
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
}
   1405a:	4770      	bx	lr
   1405c:	e000ed90 	.word	0xe000ed90

00014060 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
   14060:	b510      	push	{r4, lr}
   14062:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   14064:	2807      	cmp	r0, #7
   14066:	d803      	bhi.n	14070 <region_allocate_and_init+0x10>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
   14068:	f7ff ffea 	bl	14040 <region_init>

	return index;
   1406c:	4620      	mov	r0, r4
}
   1406e:	bd10      	pop	{r4, pc}
   14070:	4b09      	ldr	r3, [pc, #36]	; (14098 <region_allocate_and_init+0x38>)
   14072:	4a0a      	ldr	r2, [pc, #40]	; (1409c <region_allocate_and_init+0x3c>)
   14074:	1a9b      	subs	r3, r3, r2
   14076:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   14078:	f04f 0200 	mov.w	r2, #0
   1407c:	2101      	movs	r1, #1
   1407e:	f361 0202 	bfi	r2, r1, #0, #3
   14082:	f36f 02c5 	bfc	r2, #3, #3
   14086:	f363 128f 	bfi	r2, r3, #6, #10
   1408a:	4601      	mov	r1, r0
   1408c:	4804      	ldr	r0, [pc, #16]	; (140a0 <region_allocate_and_init+0x40>)
   1408e:	f7fd f83f 	bl	11110 <log_1>
		return -EINVAL;
   14092:	f06f 0015 	mvn.w	r0, #21
   14096:	e7ea      	b.n	1406e <region_allocate_and_init+0xe>
   14098:	00029f94 	.word	0x00029f94
   1409c:	00029ecc 	.word	0x00029ecc
   140a0:	0002aed8 	.word	0x0002aed8

000140a4 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   140a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   140a8:	4680      	mov	r8, r0
   140aa:	460f      	mov	r7, r1
   140ac:	469a      	mov	sl, r3
	int i;
	int reg_index = start_reg_index;
   140ae:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
   140b0:	2400      	movs	r4, #0
   140b2:	e009      	b.n	140c8 <mpu_configure_regions+0x24>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   140b4:	4629      	mov	r1, r5
   140b6:	b2f0      	uxtb	r0, r6
   140b8:	f010 fbbb 	bl	24832 <mpu_configure_region>
   140bc:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
   140be:	f110 0f16 	cmn.w	r0, #22
   140c2:	d025      	beq.n	14110 <mpu_configure_regions+0x6c>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
   140c4:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
   140c6:	3401      	adds	r4, #1
   140c8:	42bc      	cmp	r4, r7
   140ca:	da21      	bge.n	14110 <mpu_configure_regions+0x6c>
		if (regions[i].size == 0U) {
   140cc:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   140d0:	eb08 0585 	add.w	r5, r8, r5, lsl #2
   140d4:	686a      	ldr	r2, [r5, #4]
   140d6:	2a00      	cmp	r2, #0
   140d8:	d0f5      	beq.n	140c6 <mpu_configure_regions+0x22>
		if (do_sanity_check &&
   140da:	f1ba 0f00 	cmp.w	sl, #0
   140de:	d0e9      	beq.n	140b4 <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
   140e0:	4628      	mov	r0, r5
   140e2:	f010 fb95 	bl	24810 <mpu_partition_is_valid>
		if (do_sanity_check &&
   140e6:	2800      	cmp	r0, #0
   140e8:	d1e4      	bne.n	140b4 <mpu_configure_regions+0x10>
   140ea:	4b0b      	ldr	r3, [pc, #44]	; (14118 <mpu_configure_regions+0x74>)
   140ec:	4a0b      	ldr	r2, [pc, #44]	; (1411c <mpu_configure_regions+0x78>)
   140ee:	1a9b      	subs	r3, r3, r2
   140f0:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Partition %u: sanity check failed.", i);
   140f2:	f04f 0200 	mov.w	r2, #0
   140f6:	2101      	movs	r1, #1
   140f8:	f361 0202 	bfi	r2, r1, #0, #3
   140fc:	f36f 02c5 	bfc	r2, #3, #3
   14100:	f363 128f 	bfi	r2, r3, #6, #10
   14104:	4621      	mov	r1, r4
   14106:	4806      	ldr	r0, [pc, #24]	; (14120 <mpu_configure_regions+0x7c>)
   14108:	f7fd f802 	bl	11110 <log_1>
			return -EINVAL;
   1410c:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
   14110:	4630      	mov	r0, r6
   14112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14116:	bf00      	nop
   14118:	00029f94 	.word	0x00029f94
   1411c:	00029ecc 	.word	0x00029ecc
   14120:	0002af00 	.word	0x0002af00

00014124 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
   14124:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
   14126:	4c03      	ldr	r4, [pc, #12]	; (14134 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   14128:	2301      	movs	r3, #1
   1412a:	7822      	ldrb	r2, [r4, #0]
   1412c:	f7ff ffba 	bl	140a4 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   14130:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
   14132:	bd10      	pop	{r4, pc}
   14134:	2000398d 	.word	0x2000398d

00014138 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   14138:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   1413a:	2300      	movs	r3, #0
   1413c:	4a08      	ldr	r2, [pc, #32]	; (14160 <mpu_configure_dynamic_mpu_regions+0x28>)
   1413e:	7812      	ldrb	r2, [r2, #0]
   14140:	f7ff ffb0 	bl	140a4 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   14144:	f110 0f16 	cmn.w	r0, #22
   14148:	d008      	beq.n	1415c <mpu_configure_dynamic_mpu_regions+0x24>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   1414a:	4603      	mov	r3, r0
   1414c:	2b07      	cmp	r3, #7
   1414e:	dc05      	bgt.n	1415c <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
   14150:	4a04      	ldr	r2, [pc, #16]	; (14164 <mpu_configure_dynamic_mpu_regions+0x2c>)
   14152:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   14154:	2100      	movs	r1, #0
   14156:	6111      	str	r1, [r2, #16]
   14158:	3301      	adds	r3, #1
   1415a:	e7f7      	b.n	1414c <mpu_configure_dynamic_mpu_regions+0x14>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
   1415c:	bd08      	pop	{r3, pc}
   1415e:	bf00      	nop
   14160:	2000398d 	.word	0x2000398d
   14164:	e000ed90 	.word	0xe000ed90

00014168 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   14168:	4b03      	ldr	r3, [pc, #12]	; (14178 <arm_core_mpu_enable+0x10>)
   1416a:	2205      	movs	r2, #5
   1416c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   1416e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14172:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   14176:	4770      	bx	lr
   14178:	e000ed90 	.word	0xe000ed90

0001417c <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   1417c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   14180:	4b01      	ldr	r3, [pc, #4]	; (14188 <arm_core_mpu_disable+0xc>)
   14182:	2200      	movs	r2, #0
   14184:	605a      	str	r2, [r3, #4]
}
   14186:	4770      	bx	lr
   14188:	e000ed90 	.word	0xe000ed90

0001418c <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   1418c:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   1418e:	4b0e      	ldr	r3, [pc, #56]	; (141c8 <z_arm_mpu_init+0x3c>)
   14190:	681d      	ldr	r5, [r3, #0]
   14192:	2d08      	cmp	r5, #8
   14194:	d815      	bhi.n	141c2 <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   14196:	f7ff fff1 	bl	1417c <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1419a:	2400      	movs	r4, #0
   1419c:	42a5      	cmp	r5, r4
   1419e:	d90a      	bls.n	141b6 <z_arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   141a0:	4b09      	ldr	r3, [pc, #36]	; (141c8 <z_arm_mpu_init+0x3c>)
   141a2:	6859      	ldr	r1, [r3, #4]
   141a4:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   141a8:	0093      	lsls	r3, r2, #2
   141aa:	4419      	add	r1, r3
   141ac:	4620      	mov	r0, r4
   141ae:	f7ff ff47 	bl	14040 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   141b2:	3401      	adds	r4, #1
   141b4:	e7f2      	b.n	1419c <z_arm_mpu_init+0x10>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   141b6:	4b05      	ldr	r3, [pc, #20]	; (141cc <z_arm_mpu_init+0x40>)
   141b8:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   141ba:	f7ff ffd5 	bl	14168 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   141be:	2000      	movs	r0, #0
}
   141c0:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   141c2:	f04f 30ff 	mov.w	r0, #4294967295
   141c6:	e7fb      	b.n	141c0 <z_arm_mpu_init+0x34>
   141c8:	0002af34 	.word	0x0002af34
   141cc:	2000398d 	.word	0x2000398d

000141d0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   141d0:	4b01      	ldr	r3, [pc, #4]	; (141d8 <__stdout_hook_install+0x8>)
   141d2:	6018      	str	r0, [r3, #0]
}
   141d4:	4770      	bx	lr
   141d6:	bf00      	nop
   141d8:	20000508 	.word	0x20000508

000141dc <nordicsemi_nrf52_init>:
	__asm__ volatile(
   141dc:	f04f 0240 	mov.w	r2, #64	; 0x40
   141e0:	f3ef 8311 	mrs	r3, BASEPRI
   141e4:	f382 8811 	msr	BASEPRI, r2
   141e8:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   141ec:	4a04      	ldr	r2, [pc, #16]	; (14200 <nordicsemi_nrf52_init+0x24>)
   141ee:	2101      	movs	r1, #1
   141f0:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   141f4:	f383 8811 	msr	BASEPRI, r3
   141f8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   141fc:	2000      	movs	r0, #0
   141fe:	4770      	bx	lr
   14200:	4001e000 	.word	0x4001e000

00014204 <sys_arch_reboot>:
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
   14204:	b2c0      	uxtb	r0, r0
   14206:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1420a:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   1420e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   14212:	4905      	ldr	r1, [pc, #20]	; (14228 <sys_arch_reboot+0x24>)
   14214:	68ca      	ldr	r2, [r1, #12]
   14216:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1421a:	4b04      	ldr	r3, [pc, #16]	; (1422c <sys_arch_reboot+0x28>)
   1421c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1421e:	60cb      	str	r3, [r1, #12]
   14220:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   14224:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   14226:	e7fd      	b.n	14224 <sys_arch_reboot+0x20>
   14228:	e000ed00 	.word	0xe000ed00
   1422c:	05fa0004 	.word	0x05fa0004

00014230 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   14230:	b130      	cbz	r0, 14240 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
   14232:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   14234:	0180      	lsls	r0, r0, #6
   14236:	4b03      	ldr	r3, [pc, #12]	; (14244 <arch_busy_wait+0x14>)
   14238:	f043 0301 	orr.w	r3, r3, #1
   1423c:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
   1423e:	bd08      	pop	{r3, pc}
   14240:	4770      	bx	lr
   14242:	bf00      	nop
   14244:	0002a140 	.word	0x0002a140

00014248 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   14248:	2940      	cmp	r1, #64	; 0x40
   1424a:	bf28      	it	cs
   1424c:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
   1424e:	2300      	movs	r3, #0
   14250:	428b      	cmp	r3, r1
   14252:	d217      	bcs.n	14284 <bt_hex_real+0x3c>
{
   14254:	b470      	push	{r4, r5, r6}
		str[i * 2]     = hex[b[i] >> 4];
   14256:	5cc4      	ldrb	r4, [r0, r3]
   14258:	0924      	lsrs	r4, r4, #4
   1425a:	005a      	lsls	r2, r3, #1
   1425c:	4e0c      	ldr	r6, [pc, #48]	; (14290 <bt_hex_real+0x48>)
   1425e:	5d34      	ldrb	r4, [r6, r4]
   14260:	4d0c      	ldr	r5, [pc, #48]	; (14294 <bt_hex_real+0x4c>)
   14262:	f805 4013 	strb.w	r4, [r5, r3, lsl #1]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   14266:	5cc4      	ldrb	r4, [r0, r3]
   14268:	f004 040f 	and.w	r4, r4, #15
   1426c:	3201      	adds	r2, #1
   1426e:	5d34      	ldrb	r4, [r6, r4]
   14270:	54ac      	strb	r4, [r5, r2]
	for (i = 0; i < len; i++) {
   14272:	3301      	adds	r3, #1
   14274:	428b      	cmp	r3, r1
   14276:	d3ee      	bcc.n	14256 <bt_hex_real+0xe>
	}

	str[i * 2] = '\0';
   14278:	4806      	ldr	r0, [pc, #24]	; (14294 <bt_hex_real+0x4c>)
   1427a:	2200      	movs	r2, #0
   1427c:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]

	return str;
}
   14280:	bc70      	pop	{r4, r5, r6}
   14282:	4770      	bx	lr
	str[i * 2] = '\0';
   14284:	4803      	ldr	r0, [pc, #12]	; (14294 <bt_hex_real+0x4c>)
   14286:	2200      	movs	r2, #0
   14288:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]
}
   1428c:	4770      	bx	lr
   1428e:	bf00      	nop
   14290:	0002af58 	.word	0x0002af58
   14294:	2000259c 	.word	0x2000259c

00014298 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
   14298:	b5f0      	push	{r4, r5, r6, r7, lr}
   1429a:	b08b      	sub	sp, #44	; 0x2c
   1429c:	4604      	mov	r4, r0
	switch (addr->type) {
   1429e:	7803      	ldrb	r3, [r0, #0]
   142a0:	2b03      	cmp	r3, #3
   142a2:	d82c      	bhi.n	142fe <bt_addr_le_str_real+0x66>
   142a4:	e8df f003 	tbb	[pc, r3]
   142a8:	26211c02 	.word	0x26211c02
		strcpy(type, "public");
   142ac:	4917      	ldr	r1, [pc, #92]	; (1430c <bt_addr_le_str_real+0x74>)
   142ae:	a807      	add	r0, sp, #28
   142b0:	f010 fb6b 	bl	2498a <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
   142b4:	7963      	ldrb	r3, [r4, #5]
   142b6:	7922      	ldrb	r2, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
   142b8:	78e1      	ldrb	r1, [r4, #3]
   142ba:	78a0      	ldrb	r0, [r4, #2]
   142bc:	7866      	ldrb	r6, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   142be:	4d14      	ldr	r5, [pc, #80]	; (14310 <bt_addr_le_str_real+0x78>)
   142c0:	af07      	add	r7, sp, #28
   142c2:	9705      	str	r7, [sp, #20]
   142c4:	9604      	str	r6, [sp, #16]
   142c6:	9003      	str	r0, [sp, #12]
   142c8:	9102      	str	r1, [sp, #8]
   142ca:	9201      	str	r2, [sp, #4]
   142cc:	9300      	str	r3, [sp, #0]
   142ce:	79a3      	ldrb	r3, [r4, #6]
   142d0:	4a10      	ldr	r2, [pc, #64]	; (14314 <bt_addr_le_str_real+0x7c>)
   142d2:	211e      	movs	r1, #30
   142d4:	4628      	mov	r0, r5
   142d6:	f00d f967 	bl	215a8 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   142da:	4628      	mov	r0, r5
   142dc:	b00b      	add	sp, #44	; 0x2c
   142de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   142e0:	490d      	ldr	r1, [pc, #52]	; (14318 <bt_addr_le_str_real+0x80>)
   142e2:	a807      	add	r0, sp, #28
   142e4:	f010 fb51 	bl	2498a <strcpy>
		break;
   142e8:	e7e4      	b.n	142b4 <bt_addr_le_str_real+0x1c>
		strcpy(type, "public-id");
   142ea:	490c      	ldr	r1, [pc, #48]	; (1431c <bt_addr_le_str_real+0x84>)
   142ec:	a807      	add	r0, sp, #28
   142ee:	f010 fb4c 	bl	2498a <strcpy>
		break;
   142f2:	e7df      	b.n	142b4 <bt_addr_le_str_real+0x1c>
		strcpy(type, "random-id");
   142f4:	490a      	ldr	r1, [pc, #40]	; (14320 <bt_addr_le_str_real+0x88>)
   142f6:	a807      	add	r0, sp, #28
   142f8:	f010 fb47 	bl	2498a <strcpy>
		break;
   142fc:	e7da      	b.n	142b4 <bt_addr_le_str_real+0x1c>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   142fe:	4a09      	ldr	r2, [pc, #36]	; (14324 <bt_addr_le_str_real+0x8c>)
   14300:	210a      	movs	r1, #10
   14302:	a807      	add	r0, sp, #28
   14304:	f00d f950 	bl	215a8 <snprintk>
		break;
   14308:	e7d4      	b.n	142b4 <bt_addr_le_str_real+0x1c>
   1430a:	bf00      	nop
   1430c:	0002a250 	.word	0x0002a250
   14310:	20002620 	.word	0x20002620
   14314:	0002a278 	.word	0x0002a278
   14318:	0002a258 	.word	0x0002a258
   1431c:	0002a260 	.word	0x0002a260
   14320:	0002a26c 	.word	0x0002a26c
   14324:	0002cb80 	.word	0x0002cb80

00014328 <le_p256_pub_key>:
	net_buf_unref(buf);
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
}

static void le_p256_pub_key(struct net_buf *buf)
{
   14328:	b508      	push	{r3, lr}
	uint8_t status;

	net_buf_unref(buf);
   1432a:	f013 ffb8 	bl	2829e <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1432e:	f3bf 8f5b 	dmb	ish
   14332:	4b12      	ldr	r3, [pc, #72]	; (1437c <le_p256_pub_key+0x54>)
   14334:	681b      	ldr	r3, [r3, #0]
   14336:	f3bf 8f5b 	dmb	ish

	if (atomic_test_bit(flags, PENDING_DHKEY)) {
   1433a:	f013 0f02 	tst.w	r3, #2
   1433e:	d005      	beq.n	1434c <le_p256_pub_key+0x24>
		status = BT_HCI_ERR_CMD_DISALLOWED;
   14340:	210c      	movs	r1, #12
	} else {
		k_sem_give(&cmd_sem);
		status = BT_HCI_ERR_SUCCESS;
	}

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
   14342:	f242 0025 	movw	r0, #8229	; 0x2025
   14346:	f010 fc37 	bl	24bb8 <send_cmd_status>
}
   1434a:	bd08      	pop	{r3, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1434c:	4b0b      	ldr	r3, [pc, #44]	; (1437c <le_p256_pub_key+0x54>)
   1434e:	f3bf 8f5b 	dmb	ish
   14352:	e853 2f00 	ldrex	r2, [r3]
   14356:	f042 0101 	orr.w	r1, r2, #1
   1435a:	e843 1000 	strex	r0, r1, [r3]
   1435e:	2800      	cmp	r0, #0
   14360:	d1f7      	bne.n	14352 <le_p256_pub_key+0x2a>
   14362:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
   14366:	f012 0f01 	tst.w	r2, #1
   1436a:	d001      	beq.n	14370 <le_p256_pub_key+0x48>
		status = BT_HCI_ERR_CMD_DISALLOWED;
   1436c:	210c      	movs	r1, #12
   1436e:	e7e8      	b.n	14342 <le_p256_pub_key+0x1a>
	z_impl_k_sem_give(sem);
   14370:	4803      	ldr	r0, [pc, #12]	; (14380 <le_p256_pub_key+0x58>)
   14372:	f00b fce1 	bl	1fd38 <z_impl_k_sem_give>
		status = BT_HCI_ERR_SUCCESS;
   14376:	2100      	movs	r1, #0
   14378:	e7e3      	b.n	14342 <le_p256_pub_key+0x1a>
   1437a:	bf00      	nop
   1437c:	200026a0 	.word	0x200026a0
   14380:	20000774 	.word	0x20000774

00014384 <le_gen_dhkey>:
{
   14384:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14386:	f3bf 8f5b 	dmb	ish
   1438a:	4b2b      	ldr	r3, [pc, #172]	; (14438 <le_gen_dhkey+0xb4>)
   1438c:	681b      	ldr	r3, [r3, #0]
   1438e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   14392:	f013 0f01 	tst.w	r3, #1
   14396:	d149      	bne.n	1442c <le_gen_dhkey+0xa8>
	if (key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   14398:	2901      	cmp	r1, #1
   1439a:	d849      	bhi.n	14430 <le_gen_dhkey+0xac>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1439c:	4b26      	ldr	r3, [pc, #152]	; (14438 <le_gen_dhkey+0xb4>)
   1439e:	f3bf 8f5b 	dmb	ish
   143a2:	e853 2f00 	ldrex	r2, [r3]
   143a6:	f042 0402 	orr.w	r4, r2, #2
   143aa:	e843 4500 	strex	r5, r4, [r3]
   143ae:	2d00      	cmp	r5, #0
   143b0:	d1f7      	bne.n	143a2 <le_gen_dhkey+0x1e>
   143b2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
   143b6:	f012 0f02 	tst.w	r2, #2
   143ba:	d13b      	bne.n	14434 <le_gen_dhkey+0xb0>

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;
   143bc:	f100 021f 	add.w	r2, r0, #31
	uint8_t *pdst = (uint8_t *)dst;
   143c0:	4b1e      	ldr	r3, [pc, #120]	; (1443c <le_gen_dhkey+0xb8>)

	for (; length > 0; length--) {
   143c2:	2420      	movs	r4, #32
   143c4:	b12c      	cbz	r4, 143d2 <le_gen_dhkey+0x4e>
		*pdst++ = *psrc--;
   143c6:	f812 5901 	ldrb.w	r5, [r2], #-1
   143ca:	f803 5b01 	strb.w	r5, [r3], #1
	for (; length > 0; length--) {
   143ce:	3c01      	subs	r4, #1
   143d0:	e7f8      	b.n	143c4 <le_gen_dhkey+0x40>
	psrc += length - 1;
   143d2:	303f      	adds	r0, #63	; 0x3f
	uint8_t *pdst = (uint8_t *)dst;
   143d4:	4b1a      	ldr	r3, [pc, #104]	; (14440 <le_gen_dhkey+0xbc>)
	for (; length > 0; length--) {
   143d6:	2220      	movs	r2, #32
   143d8:	e004      	b.n	143e4 <le_gen_dhkey+0x60>
		*pdst++ = *psrc--;
   143da:	f810 4901 	ldrb.w	r4, [r0], #-1
   143de:	f803 4b01 	strb.w	r4, [r3], #1
	for (; length > 0; length--) {
   143e2:	3a01      	subs	r2, #1
   143e4:	2a00      	cmp	r2, #0
   143e6:	d1f8      	bne.n	143da <le_gen_dhkey+0x56>
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
   143e8:	2901      	cmp	r1, #1
   143ea:	d111      	bne.n	14410 <le_gen_dhkey+0x8c>
   143ec:	4b12      	ldr	r3, [pc, #72]	; (14438 <le_gen_dhkey+0xb4>)
   143ee:	f3bf 8f5b 	dmb	ish
   143f2:	e853 2f00 	ldrex	r2, [r3]
   143f6:	f042 0204 	orr.w	r2, r2, #4
   143fa:	e843 2100 	strex	r1, r2, [r3]
   143fe:	2900      	cmp	r1, #0
   14400:	d1f7      	bne.n	143f2 <le_gen_dhkey+0x6e>
   14402:	f3bf 8f5b 	dmb	ish
   14406:	480f      	ldr	r0, [pc, #60]	; (14444 <le_gen_dhkey+0xc0>)
   14408:	f00b fc96 	bl	1fd38 <z_impl_k_sem_give>
	return BT_HCI_ERR_SUCCESS;
   1440c:	2000      	movs	r0, #0
   1440e:	e010      	b.n	14432 <le_gen_dhkey+0xae>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14410:	4b09      	ldr	r3, [pc, #36]	; (14438 <le_gen_dhkey+0xb4>)
   14412:	f3bf 8f5b 	dmb	ish
   14416:	e853 2f00 	ldrex	r2, [r3]
   1441a:	f022 0204 	bic.w	r2, r2, #4
   1441e:	e843 2100 	strex	r1, r2, [r3]
   14422:	2900      	cmp	r1, #0
   14424:	d1f7      	bne.n	14416 <le_gen_dhkey+0x92>
   14426:	f3bf 8f5b 	dmb	ish
   1442a:	e7ec      	b.n	14406 <le_gen_dhkey+0x82>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1442c:	200c      	movs	r0, #12
   1442e:	e000      	b.n	14432 <le_gen_dhkey+0xae>
		return BT_HCI_ERR_INVALID_PARAM;
   14430:	2012      	movs	r0, #18
}
   14432:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   14434:	200c      	movs	r0, #12
   14436:	e7fc      	b.n	14432 <le_gen_dhkey+0xae>
   14438:	200026a0 	.word	0x200026a0
   1443c:	20002660 	.word	0x20002660
   14440:	20002680 	.word	0x20002680
   14444:	20000774 	.word	0x20000774

00014448 <generate_keys>:
{
   14448:	b508      	push	{r3, lr}
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   1444a:	4911      	ldr	r1, [pc, #68]	; (14490 <generate_keys+0x48>)
   1444c:	4a11      	ldr	r2, [pc, #68]	; (14494 <generate_keys+0x4c>)
   1444e:	f101 0020 	add.w	r0, r1, #32
   14452:	f00f f91e 	bl	23692 <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
   14456:	b140      	cbz	r0, 1446a <generate_keys+0x22>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, 32) == 0);
   14458:	2220      	movs	r2, #32
   1445a:	490f      	ldr	r1, [pc, #60]	; (14498 <generate_keys+0x50>)
   1445c:	480c      	ldr	r0, [pc, #48]	; (14490 <generate_keys+0x48>)
   1445e:	f010 faee 	bl	24a3e <memcmp>
   14462:	2800      	cmp	r0, #0
   14464:	d0f1      	beq.n	1444a <generate_keys+0x2>
	return 0;
   14466:	2000      	movs	r0, #0
   14468:	e010      	b.n	1448c <generate_keys+0x44>
   1446a:	4b0c      	ldr	r3, [pc, #48]	; (1449c <generate_keys+0x54>)
   1446c:	4a0c      	ldr	r2, [pc, #48]	; (144a0 <generate_keys+0x58>)
   1446e:	1a9b      	subs	r3, r3, r2
   14470:	08db      	lsrs	r3, r3, #3
			BT_ERR("Failed to create ECC public/private pair");
   14472:	f04f 0100 	mov.w	r1, #0
   14476:	2201      	movs	r2, #1
   14478:	f362 0102 	bfi	r1, r2, #0, #3
   1447c:	f36f 01c5 	bfc	r1, #3, #3
   14480:	f363 118f 	bfi	r1, r3, #6, #10
   14484:	4807      	ldr	r0, [pc, #28]	; (144a4 <generate_keys+0x5c>)
   14486:	f7fc fef9 	bl	1127c <log_0>
			return BT_HCI_ERR_UNSPECIFIED;
   1448a:	201f      	movs	r0, #31
}
   1448c:	bd08      	pop	{r3, pc}
   1448e:	bf00      	nop
   14490:	20002640 	.word	0x20002640
   14494:	0002afd8 	.word	0x0002afd8
   14498:	0002b088 	.word	0x0002b088
   1449c:	00029f14 	.word	0x00029f14
   144a0:	00029ecc 	.word	0x00029ecc
   144a4:	0002af74 	.word	0x0002af74

000144a8 <emulate_le_p256_public_key_cmd>:
{
   144a8:	b570      	push	{r4, r5, r6, lr}
	status = generate_keys();
   144aa:	f7ff ffcd 	bl	14448 <generate_keys>
   144ae:	4605      	mov	r5, r0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   144b0:	f04f 32ff 	mov.w	r2, #4294967295
   144b4:	f04f 33ff 	mov.w	r3, #4294967295
   144b8:	2001      	movs	r0, #1
   144ba:	f000 fb09 	bl	14ad0 <bt_buf_get_rx>
   144be:	4604      	mov	r4, r0
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
   144c0:	f100 0608 	add.w	r6, r0, #8
   144c4:	2102      	movs	r1, #2
   144c6:	4630      	mov	r0, r6
   144c8:	f013 ff33 	bl	28332 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   144cc:	233e      	movs	r3, #62	; 0x3e
   144ce:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   144d0:	2342      	movs	r3, #66	; 0x42
   144d2:	7043      	strb	r3, [r0, #1]
   144d4:	2101      	movs	r1, #1
   144d6:	4630      	mov	r0, r6
   144d8:	f013 ff2b 	bl	28332 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   144dc:	2308      	movs	r3, #8
   144de:	7003      	strb	r3, [r0, #0]
   144e0:	2141      	movs	r1, #65	; 0x41
   144e2:	4630      	mov	r0, r6
   144e4:	f013 ff25 	bl	28332 <net_buf_simple_add>
	evt->status = status;
   144e8:	7005      	strb	r5, [r0, #0]
	if (status) {
   144ea:	b94d      	cbnz	r5, 14500 <emulate_le_p256_public_key_cmd+0x58>
		sys_memcpy_swap(evt->key, ecc.public_key_be, 32);
   144ec:	1c42      	adds	r2, r0, #1
	psrc += length - 1;
   144ee:	4b15      	ldr	r3, [pc, #84]	; (14544 <emulate_le_p256_public_key_cmd+0x9c>)
	for (; length > 0; length--) {
   144f0:	2120      	movs	r1, #32
   144f2:	b159      	cbz	r1, 1450c <emulate_le_p256_public_key_cmd+0x64>
		*pdst++ = *psrc--;
   144f4:	f813 5901 	ldrb.w	r5, [r3], #-1
   144f8:	f802 5b01 	strb.w	r5, [r2], #1
	for (; length > 0; length--) {
   144fc:	3901      	subs	r1, #1
   144fe:	e7f8      	b.n	144f2 <emulate_le_p256_public_key_cmd+0x4a>
		(void)memset(evt->key, 0, sizeof(evt->key));
   14500:	2240      	movs	r2, #64	; 0x40
   14502:	2100      	movs	r1, #0
   14504:	3001      	adds	r0, #1
   14506:	f010 fad5 	bl	24ab4 <memset>
   1450a:	e00a      	b.n	14522 <emulate_le_p256_public_key_cmd+0x7a>
		sys_memcpy_swap(&evt->key[32], &ecc.public_key_be[32], 32);
   1450c:	3021      	adds	r0, #33	; 0x21
	psrc += length - 1;
   1450e:	4b0e      	ldr	r3, [pc, #56]	; (14548 <emulate_le_p256_public_key_cmd+0xa0>)
	for (; length > 0; length--) {
   14510:	2220      	movs	r2, #32
   14512:	e004      	b.n	1451e <emulate_le_p256_public_key_cmd+0x76>
		*pdst++ = *psrc--;
   14514:	f813 1901 	ldrb.w	r1, [r3], #-1
   14518:	f800 1b01 	strb.w	r1, [r0], #1
	for (; length > 0; length--) {
   1451c:	3a01      	subs	r2, #1
   1451e:	2a00      	cmp	r2, #0
   14520:	d1f8      	bne.n	14514 <emulate_le_p256_public_key_cmd+0x6c>
   14522:	4b0a      	ldr	r3, [pc, #40]	; (1454c <emulate_le_p256_public_key_cmd+0xa4>)
   14524:	f3bf 8f5b 	dmb	ish
   14528:	e853 2f00 	ldrex	r2, [r3]
   1452c:	f022 0201 	bic.w	r2, r2, #1
   14530:	e843 2100 	strex	r1, r2, [r3]
   14534:	2900      	cmp	r1, #0
   14536:	d1f7      	bne.n	14528 <emulate_le_p256_public_key_cmd+0x80>
   14538:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   1453c:	4620      	mov	r0, r4
   1453e:	f002 fad3 	bl	16ae8 <bt_recv>
}
   14542:	bd70      	pop	{r4, r5, r6, pc}
   14544:	2000267f 	.word	0x2000267f
   14548:	2000269f 	.word	0x2000269f
   1454c:	200026a0 	.word	0x200026a0

00014550 <emulate_le_generate_dhkey>:
{
   14550:	b570      	push	{r4, r5, r6, lr}
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
   14552:	4936      	ldr	r1, [pc, #216]	; (1462c <emulate_le_generate_dhkey+0xdc>)
   14554:	4836      	ldr	r0, [pc, #216]	; (14630 <emulate_le_generate_dhkey+0xe0>)
   14556:	f00f ffea 	bl	2452e <uECC_valid_public_key>
	if (ret < 0) {
   1455a:	1e01      	subs	r1, r0, #0
   1455c:	db32      	blt.n	145c4 <emulate_le_generate_dhkey+0x74>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1455e:	f3bf 8f5b 	dmb	ish
   14562:	4b34      	ldr	r3, [pc, #208]	; (14634 <emulate_le_generate_dhkey+0xe4>)
   14564:	681b      	ldr	r3, [r3, #0]
   14566:	f3bf 8f5b 	dmb	ish
		ret = uECC_shared_secret(ecc.public_key_be,
   1456a:	f013 0f04 	tst.w	r3, #4
   1456e:	d03b      	beq.n	145e8 <emulate_le_generate_dhkey+0x98>
   14570:	4931      	ldr	r1, [pc, #196]	; (14638 <emulate_le_generate_dhkey+0xe8>)
   14572:	482f      	ldr	r0, [pc, #188]	; (14630 <emulate_le_generate_dhkey+0xe0>)
   14574:	4b2d      	ldr	r3, [pc, #180]	; (1462c <emulate_le_generate_dhkey+0xdc>)
   14576:	4602      	mov	r2, r0
   14578:	f00f f8dc 	bl	23734 <uECC_shared_secret>
   1457c:	4606      	mov	r6, r0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1457e:	f04f 32ff 	mov.w	r2, #4294967295
   14582:	f04f 33ff 	mov.w	r3, #4294967295
   14586:	2001      	movs	r0, #1
   14588:	f000 faa2 	bl	14ad0 <bt_buf_get_rx>
   1458c:	4604      	mov	r4, r0
   1458e:	f100 0508 	add.w	r5, r0, #8
   14592:	2102      	movs	r1, #2
   14594:	4628      	mov	r0, r5
   14596:	f013 fecc 	bl	28332 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1459a:	233e      	movs	r3, #62	; 0x3e
   1459c:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1459e:	2322      	movs	r3, #34	; 0x22
   145a0:	7043      	strb	r3, [r0, #1]
   145a2:	2101      	movs	r1, #1
   145a4:	4628      	mov	r0, r5
   145a6:	f013 fec4 	bl	28332 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   145aa:	2309      	movs	r3, #9
   145ac:	7003      	strb	r3, [r0, #0]
   145ae:	2121      	movs	r1, #33	; 0x21
   145b0:	4628      	mov	r0, r5
   145b2:	f013 febe 	bl	28332 <net_buf_simple_add>
	if (ret == TC_CRYPTO_FAIL) {
   145b6:	b1ce      	cbz	r6, 145ec <emulate_le_generate_dhkey+0x9c>
		evt->status = 0U;
   145b8:	2300      	movs	r3, #0
   145ba:	f800 3b01 	strb.w	r3, [r0], #1
	psrc += length - 1;
   145be:	4b1f      	ldr	r3, [pc, #124]	; (1463c <emulate_le_generate_dhkey+0xec>)
	for (; length > 0; length--) {
   145c0:	2220      	movs	r2, #32
   145c2:	e020      	b.n	14606 <emulate_le_generate_dhkey+0xb6>
   145c4:	4b1e      	ldr	r3, [pc, #120]	; (14640 <emulate_le_generate_dhkey+0xf0>)
   145c6:	4a1f      	ldr	r2, [pc, #124]	; (14644 <emulate_le_generate_dhkey+0xf4>)
   145c8:	1a9b      	subs	r3, r3, r2
   145ca:	08db      	lsrs	r3, r3, #3
		BT_ERR("public key is not valid (ret %d)", ret);
   145cc:	f04f 0200 	mov.w	r2, #0
   145d0:	2001      	movs	r0, #1
   145d2:	f360 0202 	bfi	r2, r0, #0, #3
   145d6:	f36f 02c5 	bfc	r2, #3, #3
   145da:	f363 128f 	bfi	r2, r3, #6, #10
   145de:	481a      	ldr	r0, [pc, #104]	; (14648 <emulate_le_generate_dhkey+0xf8>)
   145e0:	f7fc fd96 	bl	11110 <log_1>
		ret = TC_CRYPTO_FAIL;
   145e4:	2600      	movs	r6, #0
   145e6:	e7ca      	b.n	1457e <emulate_le_generate_dhkey+0x2e>
		ret = uECC_shared_secret(ecc.public_key_be,
   145e8:	4918      	ldr	r1, [pc, #96]	; (1464c <emulate_le_generate_dhkey+0xfc>)
   145ea:	e7c2      	b.n	14572 <emulate_le_generate_dhkey+0x22>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
   145ec:	231f      	movs	r3, #31
   145ee:	f800 3b01 	strb.w	r3, [r0], #1
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   145f2:	2220      	movs	r2, #32
   145f4:	21ff      	movs	r1, #255	; 0xff
   145f6:	f010 fa5d 	bl	24ab4 <memset>
   145fa:	e006      	b.n	1460a <emulate_le_generate_dhkey+0xba>
		*pdst++ = *psrc--;
   145fc:	f813 1901 	ldrb.w	r1, [r3], #-1
   14600:	f800 1b01 	strb.w	r1, [r0], #1
	for (; length > 0; length--) {
   14604:	3a01      	subs	r2, #1
   14606:	2a00      	cmp	r2, #0
   14608:	d1f8      	bne.n	145fc <emulate_le_generate_dhkey+0xac>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1460a:	4b0a      	ldr	r3, [pc, #40]	; (14634 <emulate_le_generate_dhkey+0xe4>)
   1460c:	f3bf 8f5b 	dmb	ish
   14610:	e853 2f00 	ldrex	r2, [r3]
   14614:	f022 0202 	bic.w	r2, r2, #2
   14618:	e843 2100 	strex	r1, r2, [r3]
   1461c:	2900      	cmp	r1, #0
   1461e:	d1f7      	bne.n	14610 <emulate_le_generate_dhkey+0xc0>
   14620:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   14624:	4620      	mov	r0, r4
   14626:	f002 fa5f 	bl	16ae8 <bt_recv>
}
   1462a:	bd70      	pop	{r4, r5, r6, pc}
   1462c:	0002afd8 	.word	0x0002afd8
   14630:	20002660 	.word	0x20002660
   14634:	200026a0 	.word	0x200026a0
   14638:	0002b088 	.word	0x0002b088
   1463c:	2000267f 	.word	0x2000267f
   14640:	00029f14 	.word	0x00029f14
   14644:	00029ecc 	.word	0x00029ecc
   14648:	0002afa0 	.word	0x0002afa0
   1464c:	20002640 	.word	0x20002640

00014650 <ecc_thread>:
{
   14650:	b508      	push	{r3, lr}
   14652:	e008      	b.n	14666 <ecc_thread+0x16>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14654:	f3bf 8f5b 	dmb	ish
   14658:	4b0e      	ldr	r3, [pc, #56]	; (14694 <ecc_thread+0x44>)
   1465a:	681b      	ldr	r3, [r3, #0]
   1465c:	f3bf 8f5b 	dmb	ish
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
   14660:	f013 0f02 	tst.w	r3, #2
   14664:	d112      	bne.n	1468c <ecc_thread+0x3c>
	return z_impl_k_sem_take(sem, timeout);
   14666:	f04f 32ff 	mov.w	r2, #4294967295
   1466a:	f04f 33ff 	mov.w	r3, #4294967295
   1466e:	480a      	ldr	r0, [pc, #40]	; (14698 <ecc_thread+0x48>)
   14670:	f00b fb8a 	bl	1fd88 <z_impl_k_sem_take>
   14674:	f3bf 8f5b 	dmb	ish
   14678:	4b06      	ldr	r3, [pc, #24]	; (14694 <ecc_thread+0x44>)
   1467a:	681b      	ldr	r3, [r3, #0]
   1467c:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   14680:	f013 0f01 	tst.w	r3, #1
   14684:	d0e6      	beq.n	14654 <ecc_thread+0x4>
			emulate_le_p256_public_key_cmd();
   14686:	f7ff ff0f 	bl	144a8 <emulate_le_p256_public_key_cmd>
   1468a:	e7ec      	b.n	14666 <ecc_thread+0x16>
			emulate_le_generate_dhkey();
   1468c:	f7ff ff60 	bl	14550 <emulate_le_generate_dhkey>
	while (true) {
   14690:	e7e9      	b.n	14666 <ecc_thread+0x16>
   14692:	bf00      	nop
   14694:	200026a0 	.word	0x200026a0
   14698:	20000774 	.word	0x20000774

0001469c <bt_hci_ecc_send>:

int bt_hci_ecc_send(struct net_buf *buf)
{
   1469c:	b510      	push	{r4, lr}
   1469e:	4604      	mov	r4, r0
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   146a0:	7d03      	ldrb	r3, [r0, #20]
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
   146a2:	bb7b      	cbnz	r3, 14704 <bt_hci_ecc_send+0x68>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
   146a4:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
   146a6:	881b      	ldrh	r3, [r3, #0]
   146a8:	f242 0226 	movw	r2, #8230	; 0x2026
   146ac:	4293      	cmp	r3, r2
   146ae:	d01e      	beq.n	146ee <bt_hci_ecc_send+0x52>
   146b0:	d810      	bhi.n	146d4 <bt_hci_ecc_send+0x38>
   146b2:	f242 0201 	movw	r2, #8193	; 0x2001
   146b6:	4293      	cmp	r3, r2
   146b8:	d022      	beq.n	14700 <bt_hci_ecc_send+0x64>
   146ba:	f242 0225 	movw	r2, #8229	; 0x2025
   146be:	4293      	cmp	r3, r2
   146c0:	d120      	bne.n	14704 <bt_hci_ecc_send+0x68>
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
   146c2:	2103      	movs	r1, #3
   146c4:	3008      	adds	r0, #8
   146c6:	f013 fe54 	bl	28372 <net_buf_simple_pull>
		case BT_HCI_OP_LE_P256_PUBLIC_KEY:
			net_buf_pull(buf, sizeof(*chdr));
			le_p256_pub_key(buf);
   146ca:	4620      	mov	r0, r4
   146cc:	f7ff fe2c 	bl	14328 <le_p256_pub_key>
			return 0;
   146d0:	2000      	movs	r0, #0
   146d2:	e01d      	b.n	14710 <bt_hci_ecc_send+0x74>
		switch (sys_le16_to_cpu(chdr->opcode)) {
   146d4:	f242 025e 	movw	r2, #8286	; 0x205e
   146d8:	4293      	cmp	r3, r2
   146da:	d113      	bne.n	14704 <bt_hci_ecc_send+0x68>
   146dc:	2103      	movs	r1, #3
   146de:	3008      	adds	r0, #8
   146e0:	f013 fe47 	bl	28372 <net_buf_simple_pull>
			net_buf_pull(buf, sizeof(*chdr));
			le_gen_dhkey_v1(buf);
			return 0;
		case BT_HCI_OP_LE_GENERATE_DHKEY_V2:
			net_buf_pull(buf, sizeof(*chdr));
			le_gen_dhkey_v2(buf);
   146e4:	4620      	mov	r0, r4
   146e6:	f010 fa9b 	bl	24c20 <le_gen_dhkey_v2>
			return 0;
   146ea:	2000      	movs	r0, #0
   146ec:	e010      	b.n	14710 <bt_hci_ecc_send+0x74>
   146ee:	2103      	movs	r1, #3
   146f0:	3008      	adds	r0, #8
   146f2:	f013 fe3e 	bl	28372 <net_buf_simple_pull>
			le_gen_dhkey_v1(buf);
   146f6:	4620      	mov	r0, r4
   146f8:	f010 fa82 	bl	24c00 <le_gen_dhkey_v1>
			return 0;
   146fc:	2000      	movs	r0, #0
   146fe:	e007      	b.n	14710 <bt_hci_ecc_send+0x74>
		case BT_HCI_OP_LE_SET_EVENT_MASK:
			clear_ecc_events(buf);
   14700:	f010 fa50 	bl	24ba4 <clear_ecc_events>
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
   14704:	4b03      	ldr	r3, [pc, #12]	; (14714 <bt_hci_ecc_send+0x78>)
   14706:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
   1470a:	691b      	ldr	r3, [r3, #16]
   1470c:	4620      	mov	r0, r4
   1470e:	4798      	blx	r3
}
   14710:	bd10      	pop	{r4, pc}
   14712:	bf00      	nop
   14714:	200002a0 	.word	0x200002a0

00014718 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
   14718:	b510      	push	{r4, lr}
   1471a:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1471c:	4c0c      	ldr	r4, [pc, #48]	; (14750 <bt_hci_ecc_init+0x38>)
   1471e:	2200      	movs	r2, #0
   14720:	2300      	movs	r3, #0
   14722:	e9cd 2306 	strd	r2, r3, [sp, #24]
   14726:	2300      	movs	r3, #0
   14728:	9304      	str	r3, [sp, #16]
   1472a:	220a      	movs	r2, #10
   1472c:	9203      	str	r2, [sp, #12]
   1472e:	9302      	str	r3, [sp, #8]
   14730:	9301      	str	r3, [sp, #4]
   14732:	9300      	str	r3, [sp, #0]
   14734:	4b07      	ldr	r3, [pc, #28]	; (14754 <bt_hci_ecc_init+0x3c>)
   14736:	f44f 628f 	mov.w	r2, #1144	; 0x478
   1473a:	4907      	ldr	r1, [pc, #28]	; (14758 <bt_hci_ecc_init+0x40>)
   1473c:	4620      	mov	r0, r4
   1473e:	f014 fcc0 	bl	290c2 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   14742:	4906      	ldr	r1, [pc, #24]	; (1475c <bt_hci_ecc_init+0x44>)
   14744:	4620      	mov	r0, r4
   14746:	f00b f849 	bl	1f7dc <z_impl_k_thread_name_set>
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
   1474a:	b008      	add	sp, #32
   1474c:	bd10      	pop	{r4, pc}
   1474e:	bf00      	nop
   14750:	200015d0 	.word	0x200015d0
   14754:	00014651 	.word	0x00014651
   14758:	200040e0 	.word	0x200040e0
   1475c:	0002afc4 	.word	0x0002afc4

00014760 <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
   14760:	b508      	push	{r3, lr}
   14762:	4b15      	ldr	r3, [pc, #84]	; (147b8 <save_id+0x58>)
   14764:	4a15      	ldr	r2, [pc, #84]	; (147bc <save_id+0x5c>)
   14766:	1a9b      	subs	r3, r3, r2
   14768:	08db      	lsrs	r3, r3, #3
	int err;
	BT_INFO("Saving ID");
   1476a:	f04f 0100 	mov.w	r1, #0
   1476e:	2203      	movs	r2, #3
   14770:	f362 0102 	bfi	r1, r2, #0, #3
   14774:	f36f 01c5 	bfc	r1, #3, #3
   14778:	f363 118f 	bfi	r1, r3, #6, #10
   1477c:	4810      	ldr	r0, [pc, #64]	; (147c0 <save_id+0x60>)
   1477e:	f7fc fd7d 	bl	1127c <log_0>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   14782:	4910      	ldr	r1, [pc, #64]	; (147c4 <save_id+0x64>)
   14784:	79ca      	ldrb	r2, [r1, #7]
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   14786:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   1478a:	480f      	ldr	r0, [pc, #60]	; (147c8 <save_id+0x68>)
   1478c:	f7fd fbc2 	bl	11f14 <settings_save_one>
	if (err) {
   14790:	b900      	cbnz	r0, 14794 <save_id+0x34>
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
   14792:	bd08      	pop	{r3, pc}
   14794:	4601      	mov	r1, r0
   14796:	4b08      	ldr	r3, [pc, #32]	; (147b8 <save_id+0x58>)
   14798:	4a08      	ldr	r2, [pc, #32]	; (147bc <save_id+0x5c>)
   1479a:	1a9b      	subs	r3, r3, r2
   1479c:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to save ID (err %d)", err);
   1479e:	f04f 0200 	mov.w	r2, #0
   147a2:	2001      	movs	r0, #1
   147a4:	f360 0202 	bfi	r2, r0, #0, #3
   147a8:	f36f 02c5 	bfc	r2, #3, #3
   147ac:	f363 128f 	bfi	r2, r3, #6, #10
   147b0:	4806      	ldr	r0, [pc, #24]	; (147cc <save_id+0x6c>)
   147b2:	f7fc fcad 	bl	11110 <log_1>
}
   147b6:	e7ec      	b.n	14792 <save_id+0x32>
   147b8:	00029f3c 	.word	0x00029f3c
   147bc:	00029ecc 	.word	0x00029ecc
   147c0:	0002b0a8 	.word	0x0002b0a8
   147c4:	200002a0 	.word	0x200002a0
   147c8:	0002b0b4 	.word	0x0002b0b4
   147cc:	0002b0bc 	.word	0x0002b0bc

000147d0 <set>:
{
   147d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   147d2:	b083      	sub	sp, #12
	if (!name) {
   147d4:	2800      	cmp	r0, #0
   147d6:	d03b      	beq.n	14850 <set+0x80>
   147d8:	4616      	mov	r6, r2
   147da:	461d      	mov	r5, r3
   147dc:	4604      	mov	r4, r0
	len = settings_name_next(name, &next);
   147de:	a901      	add	r1, sp, #4
   147e0:	f00e fd24 	bl	2322c <settings_name_next>
   147e4:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
   147e6:	493f      	ldr	r1, [pc, #252]	; (148e4 <set+0x114>)
   147e8:	4620      	mov	r0, r4
   147ea:	f010 f90d 	bl	24a08 <strncmp>
   147ee:	4607      	mov	r7, r0
   147f0:	2800      	cmp	r0, #0
   147f2:	d173      	bne.n	148dc <set+0x10c>
   147f4:	f3bf 8f5b 	dmb	ish
   147f8:	4b3b      	ldr	r3, [pc, #236]	; (148e8 <set+0x118>)
   147fa:	6819      	ldr	r1, [r3, #0]
   147fc:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   14800:	f3c1 0480 	ubfx	r4, r1, #2, #1
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   14804:	f011 0f04 	tst.w	r1, #4
   14808:	d135      	bne.n	14876 <set+0xa6>
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   1480a:	2207      	movs	r2, #7
   1480c:	4937      	ldr	r1, [pc, #220]	; (148ec <set+0x11c>)
   1480e:	4628      	mov	r0, r5
   14810:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
   14812:	2806      	cmp	r0, #6
   14814:	d853      	bhi.n	148be <set+0xee>
			if (len < 0) {
   14816:	2800      	cmp	r0, #0
   14818:	db3f      	blt.n	1489a <set+0xca>
   1481a:	4b35      	ldr	r3, [pc, #212]	; (148f0 <set+0x120>)
   1481c:	4a35      	ldr	r2, [pc, #212]	; (148f4 <set+0x124>)
   1481e:	1a9b      	subs	r3, r3, r2
   14820:	08db      	lsrs	r3, r3, #3
				BT_ERR("Invalid length ID address in storage");
   14822:	f04f 0100 	mov.w	r1, #0
   14826:	2201      	movs	r2, #1
   14828:	f362 0102 	bfi	r1, r2, #0, #3
   1482c:	f36f 01c5 	bfc	r1, #3, #3
   14830:	f363 118f 	bfi	r1, r3, #6, #10
   14834:	4830      	ldr	r0, [pc, #192]	; (148f8 <set+0x128>)
   14836:	f7fc fd21 	bl	1127c <log_0>
			(void)memset(bt_dev.id_addr, 0,
   1483a:	4d2c      	ldr	r5, [pc, #176]	; (148ec <set+0x11c>)
   1483c:	2207      	movs	r2, #7
   1483e:	2100      	movs	r1, #0
   14840:	4628      	mov	r0, r5
   14842:	f010 f937 	bl	24ab4 <memset>
			bt_dev.id_count = 0U;
   14846:	2300      	movs	r3, #0
   14848:	71eb      	strb	r3, [r5, #7]
}
   1484a:	4620      	mov	r0, r4
   1484c:	b003      	add	sp, #12
   1484e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14850:	4b27      	ldr	r3, [pc, #156]	; (148f0 <set+0x120>)
   14852:	4a28      	ldr	r2, [pc, #160]	; (148f4 <set+0x124>)
   14854:	1a9b      	subs	r3, r3, r2
   14856:	08db      	lsrs	r3, r3, #3
		BT_ERR("Insufficient number of arguments");
   14858:	f04f 0100 	mov.w	r1, #0
   1485c:	2201      	movs	r2, #1
   1485e:	f362 0102 	bfi	r1, r2, #0, #3
   14862:	f36f 01c5 	bfc	r1, #3, #3
   14866:	f363 118f 	bfi	r1, r3, #6, #10
   1486a:	4824      	ldr	r0, [pc, #144]	; (148fc <set+0x12c>)
   1486c:	f7fc fd06 	bl	1127c <log_0>
		return -ENOENT;
   14870:	f06f 0401 	mvn.w	r4, #1
   14874:	e7e9      	b.n	1484a <set+0x7a>
   14876:	4b1e      	ldr	r3, [pc, #120]	; (148f0 <set+0x120>)
   14878:	4a1e      	ldr	r2, [pc, #120]	; (148f4 <set+0x124>)
   1487a:	1a9b      	subs	r3, r3, r2
   1487c:	08db      	lsrs	r3, r3, #3
			BT_WARN("Ignoring identities stored in flash");
   1487e:	f04f 0100 	mov.w	r1, #0
   14882:	2202      	movs	r2, #2
   14884:	f362 0102 	bfi	r1, r2, #0, #3
   14888:	f36f 01c5 	bfc	r1, #3, #3
   1488c:	f363 118f 	bfi	r1, r3, #6, #10
   14890:	481b      	ldr	r0, [pc, #108]	; (14900 <set+0x130>)
   14892:	f7fc fcf3 	bl	1127c <log_0>
			return 0;
   14896:	463c      	mov	r4, r7
   14898:	e7d7      	b.n	1484a <set+0x7a>
   1489a:	4b15      	ldr	r3, [pc, #84]	; (148f0 <set+0x120>)
   1489c:	4a15      	ldr	r2, [pc, #84]	; (148f4 <set+0x124>)
   1489e:	1a9b      	subs	r3, r3, r2
   148a0:	08db      	lsrs	r3, r3, #3
				BT_ERR("Failed to read ID address from storage"
   148a2:	f04f 0200 	mov.w	r2, #0
   148a6:	2101      	movs	r1, #1
   148a8:	f361 0202 	bfi	r2, r1, #0, #3
   148ac:	f36f 02c5 	bfc	r2, #3, #3
   148b0:	f363 128f 	bfi	r2, r3, #6, #10
   148b4:	4601      	mov	r1, r0
   148b6:	4813      	ldr	r0, [pc, #76]	; (14904 <set+0x134>)
   148b8:	f7fc fc2a 	bl	11110 <log_1>
   148bc:	e7bd      	b.n	1483a <set+0x6a>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   148be:	4a12      	ldr	r2, [pc, #72]	; (14908 <set+0x138>)
   148c0:	fba2 3200 	umull	r3, r2, r2, r0
   148c4:	1a80      	subs	r0, r0, r2
   148c6:	eb02 0250 	add.w	r2, r2, r0, lsr #1
   148ca:	f3c2 0287 	ubfx	r2, r2, #2, #8
   148ce:	4b07      	ldr	r3, [pc, #28]	; (148ec <set+0x11c>)
   148d0:	71da      	strb	r2, [r3, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   148d2:	4623      	mov	r3, r4
   148d4:	4293      	cmp	r3, r2
   148d6:	dab8      	bge.n	1484a <set+0x7a>
   148d8:	3301      	adds	r3, #1
   148da:	e7fb      	b.n	148d4 <set+0x104>
	return -ENOENT;
   148dc:	f06f 0401 	mvn.w	r4, #1
   148e0:	e7b3      	b.n	1484a <set+0x7a>
   148e2:	bf00      	nop
   148e4:	0002b0fc 	.word	0x0002b0fc
   148e8:	20000338 	.word	0x20000338
   148ec:	200002a0 	.word	0x200002a0
   148f0:	00029f3c 	.word	0x00029f3c
   148f4:	00029ecc 	.word	0x00029ecc
   148f8:	0002b158 	.word	0x0002b158
   148fc:	0002b0d8 	.word	0x0002b0d8
   14900:	0002b100 	.word	0x0002b100
   14904:	0002b124 	.word	0x0002b124
   14908:	24924925 	.word	0x24924925

0001490c <bt_settings_encode_key>:
{
   1490c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14910:	b088      	sub	sp, #32
   14912:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	if (key) {
   14914:	b1dc      	cbz	r4, 1494e <bt_settings_encode_key+0x42>
			 addr->a.val[5], addr->a.val[4], addr->a.val[3],
   14916:	799d      	ldrb	r5, [r3, #6]
   14918:	795e      	ldrb	r6, [r3, #5]
   1491a:	791f      	ldrb	r7, [r3, #4]
			 addr->a.val[2], addr->a.val[1], addr->a.val[0],
   1491c:	f893 c003 	ldrb.w	ip, [r3, #3]
   14920:	f893 e002 	ldrb.w	lr, [r3, #2]
   14924:	f893 8001 	ldrb.w	r8, [r3, #1]
			 addr->type, key);
   14928:	781b      	ldrb	r3, [r3, #0]
		snprintk(path, path_size,
   1492a:	9407      	str	r4, [sp, #28]
   1492c:	9306      	str	r3, [sp, #24]
   1492e:	f8cd 8014 	str.w	r8, [sp, #20]
   14932:	f8cd e010 	str.w	lr, [sp, #16]
   14936:	f8cd c00c 	str.w	ip, [sp, #12]
   1493a:	9702      	str	r7, [sp, #8]
   1493c:	9601      	str	r6, [sp, #4]
   1493e:	9500      	str	r5, [sp, #0]
   14940:	4613      	mov	r3, r2
   14942:	4a0e      	ldr	r2, [pc, #56]	; (1497c <bt_settings_encode_key+0x70>)
   14944:	f00c fe30 	bl	215a8 <snprintk>
}
   14948:	b008      	add	sp, #32
   1494a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			 addr->a.val[5], addr->a.val[4], addr->a.val[3],
   1494e:	799c      	ldrb	r4, [r3, #6]
   14950:	795d      	ldrb	r5, [r3, #5]
   14952:	791e      	ldrb	r6, [r3, #4]
			 addr->a.val[2], addr->a.val[1], addr->a.val[0],
   14954:	78df      	ldrb	r7, [r3, #3]
   14956:	f893 c002 	ldrb.w	ip, [r3, #2]
   1495a:	f893 e001 	ldrb.w	lr, [r3, #1]
			 addr->type);
   1495e:	781b      	ldrb	r3, [r3, #0]
		snprintk(path, path_size,
   14960:	9306      	str	r3, [sp, #24]
   14962:	f8cd e014 	str.w	lr, [sp, #20]
   14966:	f8cd c010 	str.w	ip, [sp, #16]
   1496a:	9703      	str	r7, [sp, #12]
   1496c:	9602      	str	r6, [sp, #8]
   1496e:	9501      	str	r5, [sp, #4]
   14970:	9400      	str	r4, [sp, #0]
   14972:	4613      	mov	r3, r2
   14974:	4a02      	ldr	r2, [pc, #8]	; (14980 <bt_settings_encode_key+0x74>)
   14976:	f00c fe17 	bl	215a8 <snprintk>
}
   1497a:	e7e5      	b.n	14948 <bt_settings_encode_key+0x3c>
   1497c:	0002b180 	.word	0x0002b180
   14980:	0002b1a4 	.word	0x0002b1a4

00014984 <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
   14984:	b508      	push	{r3, lr}
	k_work_submit(&save_id_work);
   14986:	4802      	ldr	r0, [pc, #8]	; (14990 <bt_settings_save_id+0xc>)
   14988:	f00b fbc4 	bl	20114 <k_work_submit>
}
   1498c:	bd08      	pop	{r3, pc}
   1498e:	bf00      	nop
   14990:	2000050c 	.word	0x2000050c

00014994 <commit>:

static int commit(void)
{
   14994:	b510      	push	{r4, lr}
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
   14996:	4b20      	ldr	r3, [pc, #128]	; (14a18 <commit+0x84>)
   14998:	79db      	ldrb	r3, [r3, #7]
   1499a:	b30b      	cbz	r3, 149e0 <commit+0x4c>
		bt_setup_public_id_addr();
	}

	if (!bt_dev.id_count) {
   1499c:	4b1e      	ldr	r3, [pc, #120]	; (14a18 <commit+0x84>)
   1499e:	79db      	ldrb	r3, [r3, #7]
   149a0:	b91b      	cbnz	r3, 149aa <commit+0x16>
		int err;

		err = bt_setup_random_id_addr();
   149a2:	f002 fdaf 	bl	17504 <bt_setup_random_id_addr>
		if (err) {
   149a6:	4604      	mov	r4, r0
   149a8:	b9e8      	cbnz	r0, 149e6 <commit+0x52>
   149aa:	f3bf 8f5b 	dmb	ish
   149ae:	4b1b      	ldr	r3, [pc, #108]	; (14a1c <commit+0x88>)
   149b0:	681b      	ldr	r3, [r3, #0]
   149b2:	f3bf 8f5b 	dmb	ish
			BT_ERR("Unable to setup an identity address");
			return err;
		}
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   149b6:	f013 0f02 	tst.w	r3, #2
   149ba:	d025      	beq.n	14a08 <commit+0x74>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   149bc:	4b17      	ldr	r3, [pc, #92]	; (14a1c <commit+0x88>)
   149be:	f3bf 8f5b 	dmb	ish
   149c2:	e853 4f00 	ldrex	r4, [r3]
   149c6:	f424 4280 	bic.w	r2, r4, #16384	; 0x4000
   149ca:	e843 2100 	strex	r1, r2, [r3]
   149ce:	2900      	cmp	r1, #0
   149d0:	d1f7      	bne.n	149c2 <commit+0x2e>
   149d2:	f3bf 8f5b 	dmb	ish
	}

	/* If any part of the Identity Information of the device has been
	 * generated this Identity needs to be saved persistently.
	 */
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   149d6:	f414 4480 	ands.w	r4, r4, #16384	; 0x4000
   149da:	d118      	bne.n	14a0e <commit+0x7a>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
   149dc:	4620      	mov	r0, r4
   149de:	bd10      	pop	{r4, pc}
		bt_setup_public_id_addr();
   149e0:	f002 fd10 	bl	17404 <bt_setup_public_id_addr>
   149e4:	e7da      	b.n	1499c <commit+0x8>
   149e6:	4b0e      	ldr	r3, [pc, #56]	; (14a20 <commit+0x8c>)
   149e8:	4a0e      	ldr	r2, [pc, #56]	; (14a24 <commit+0x90>)
   149ea:	1a9b      	subs	r3, r3, r2
   149ec:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to setup an identity address");
   149ee:	f04f 0100 	mov.w	r1, #0
   149f2:	2201      	movs	r2, #1
   149f4:	f362 0102 	bfi	r1, r2, #0, #3
   149f8:	f36f 01c5 	bfc	r1, #3, #3
   149fc:	f363 118f 	bfi	r1, r3, #6, #10
   14a00:	4809      	ldr	r0, [pc, #36]	; (14a28 <commit+0x94>)
   14a02:	f7fc fc3b 	bl	1127c <log_0>
			return err;
   14a06:	e7e9      	b.n	149dc <commit+0x48>
		bt_finalize_init();
   14a08:	f002 f8da 	bl	16bc0 <bt_finalize_init>
   14a0c:	e7d6      	b.n	149bc <commit+0x28>
		bt_settings_save_id();
   14a0e:	f7ff ffb9 	bl	14984 <bt_settings_save_id>
	return 0;
   14a12:	2400      	movs	r4, #0
   14a14:	e7e2      	b.n	149dc <commit+0x48>
   14a16:	bf00      	nop
   14a18:	200002a0 	.word	0x200002a0
   14a1c:	20000338 	.word	0x20000338
   14a20:	00029f3c 	.word	0x00029f3c
   14a24:	00029ecc 	.word	0x00029ecc
   14a28:	0002b1c8 	.word	0x0002b1c8

00014a2c <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
   14a2c:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
   14a2e:	f7fd fbf7 	bl	12220 <settings_subsys_init>
	if (err) {
   14a32:	4604      	mov	r4, r0
   14a34:	b908      	cbnz	r0, 14a3a <bt_settings_init+0xe>
		BT_ERR("settings_subsys_init failed (err %d)", err);
		return err;
	}

	return 0;
}
   14a36:	4620      	mov	r0, r4
   14a38:	bd10      	pop	{r4, pc}
   14a3a:	4b09      	ldr	r3, [pc, #36]	; (14a60 <bt_settings_init+0x34>)
   14a3c:	4a09      	ldr	r2, [pc, #36]	; (14a64 <bt_settings_init+0x38>)
   14a3e:	1a9b      	subs	r3, r3, r2
   14a40:	08db      	lsrs	r3, r3, #3
		BT_ERR("settings_subsys_init failed (err %d)", err);
   14a42:	f04f 0200 	mov.w	r2, #0
   14a46:	2101      	movs	r1, #1
   14a48:	f361 0202 	bfi	r2, r1, #0, #3
   14a4c:	f36f 02c5 	bfc	r2, #3, #3
   14a50:	f363 128f 	bfi	r2, r3, #6, #10
   14a54:	4601      	mov	r1, r0
   14a56:	4804      	ldr	r0, [pc, #16]	; (14a68 <bt_settings_init+0x3c>)
   14a58:	f7fc fb5a 	bl	11110 <log_1>
		return err;
   14a5c:	e7eb      	b.n	14a36 <bt_settings_init+0xa>
   14a5e:	bf00      	nop
   14a60:	00029f3c 	.word	0x00029f3c
   14a64:	00029ecc 	.word	0x00029ecc
   14a68:	0002b1ec 	.word	0x0002b1ec

00014a6c <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   14a6c:	b570      	push	{r4, r5, r6, lr}
   14a6e:	4605      	mov	r5, r0
   14a70:	460c      	mov	r4, r1
	switch (src->type) {
   14a72:	7803      	ldrb	r3, [r0, #0]
   14a74:	2b01      	cmp	r3, #1
   14a76:	d010      	beq.n	14a9a <uuid_to_uuid128+0x2e>
   14a78:	2b02      	cmp	r3, #2
   14a7a:	d020      	beq.n	14abe <uuid_to_uuid128+0x52>
   14a7c:	b103      	cbz	r3, 14a80 <uuid_to_uuid128+0x14>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   14a7e:	bd70      	pop	{r4, r5, r6, pc}
		*dst = uuid128_base;
   14a80:	4e12      	ldr	r6, [pc, #72]	; (14acc <uuid_to_uuid128+0x60>)
   14a82:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   14a84:	6020      	str	r0, [r4, #0]
   14a86:	6061      	str	r1, [r4, #4]
   14a88:	60a2      	str	r2, [r4, #8]
   14a8a:	60e3      	str	r3, [r4, #12]
   14a8c:	7833      	ldrb	r3, [r6, #0]
   14a8e:	7423      	strb	r3, [r4, #16]
		sys_put_le16(BT_UUID_16(src)->val,
   14a90:	886b      	ldrh	r3, [r5, #2]
	dst[0] = val;
   14a92:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
   14a94:	0a1b      	lsrs	r3, r3, #8
   14a96:	73a3      	strb	r3, [r4, #14]
}
   14a98:	e7f1      	b.n	14a7e <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
   14a9a:	4e0c      	ldr	r6, [pc, #48]	; (14acc <uuid_to_uuid128+0x60>)
   14a9c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   14a9e:	6020      	str	r0, [r4, #0]
   14aa0:	6061      	str	r1, [r4, #4]
   14aa2:	60a2      	str	r2, [r4, #8]
   14aa4:	60e3      	str	r3, [r4, #12]
   14aa6:	7833      	ldrb	r3, [r6, #0]
   14aa8:	7423      	strb	r3, [r4, #16]
		sys_put_le32(BT_UUID_32(src)->val,
   14aaa:	686b      	ldr	r3, [r5, #4]
	dst[0] = val;
   14aac:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
   14aae:	f3c3 2207 	ubfx	r2, r3, #8, #8
   14ab2:	73a2      	strb	r2, [r4, #14]
	sys_put_le16(val >> 16, &dst[2]);
   14ab4:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   14ab6:	73e2      	strb	r2, [r4, #15]
	dst[1] = val >> 8;
   14ab8:	0e1b      	lsrs	r3, r3, #24
   14aba:	7423      	strb	r3, [r4, #16]
}
   14abc:	e7df      	b.n	14a7e <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
   14abe:	2211      	movs	r2, #17
   14ac0:	4601      	mov	r1, r0
   14ac2:	4620      	mov	r0, r4
   14ac4:	f00f ffd2 	bl	24a6c <memcpy>
		return;
   14ac8:	e7d9      	b.n	14a7e <uuid_to_uuid128+0x12>
   14aca:	bf00      	nop
   14acc:	0002b224 	.word	0x0002b224

00014ad0 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   14ad0:	b538      	push	{r3, r4, r5, lr}
   14ad2:	4604      	mov	r4, r0
	return net_buf_alloc_fixed(pool, timeout);
   14ad4:	4805      	ldr	r0, [pc, #20]	; (14aec <bt_buf_get_rx+0x1c>)
   14ad6:	f013 fbaf 	bl	28238 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   14ada:	4605      	mov	r5, r0
   14adc:	b120      	cbz	r0, 14ae8 <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
   14ade:	2100      	movs	r1, #0
   14ae0:	3008      	adds	r0, #8
   14ae2:	f013 fbcb 	bl	2827c <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   14ae6:	752c      	strb	r4, [r5, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   14ae8:	4628      	mov	r0, r5
   14aea:	bd38      	pop	{r3, r4, r5, pc}
   14aec:	200008a4 	.word	0x200008a4

00014af0 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   14af0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   14af2:	f04f 0340 	mov.w	r3, #64	; 0x40
   14af6:	f3ef 8211 	mrs	r2, BASEPRI
   14afa:	f383 8811 	msr	BASEPRI, r3
   14afe:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
   14b02:	4b0e      	ldr	r3, [pc, #56]	; (14b3c <bt_buf_get_cmd_complete+0x4c>)
   14b04:	f8d3 4108 	ldr.w	r4, [r3, #264]	; 0x108
	bt_dev.sent_cmd = NULL;
   14b08:	2500      	movs	r5, #0
   14b0a:	f8c3 5108 	str.w	r5, [r3, #264]	; 0x108
	__asm__ volatile(
   14b0e:	f382 8811 	msr	BASEPRI, r2
   14b12:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
   14b16:	b14c      	cbz	r4, 14b2c <bt_buf_get_cmd_complete+0x3c>
   14b18:	2301      	movs	r3, #1
   14b1a:	7523      	strb	r3, [r4, #20]
		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0U;
   14b1c:	4629      	mov	r1, r5
   14b1e:	81a5      	strh	r5, [r4, #12]
   14b20:	f104 0008 	add.w	r0, r4, #8
   14b24:	f013 fbaa 	bl	2827c <net_buf_simple_reserve>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   14b28:	4620      	mov	r0, r4
   14b2a:	bd38      	pop	{r3, r4, r5, pc}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   14b2c:	4602      	mov	r2, r0
   14b2e:	460b      	mov	r3, r1
   14b30:	2001      	movs	r0, #1
   14b32:	f7ff ffcd 	bl	14ad0 <bt_buf_get_rx>
   14b36:	4604      	mov	r4, r0
   14b38:	e7f6      	b.n	14b28 <bt_buf_get_cmd_complete+0x38>
   14b3a:	bf00      	nop
   14b3c:	200002a0 	.word	0x200002a0

00014b40 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   14b40:	b510      	push	{r4, lr}
	switch (evt) {
   14b42:	280f      	cmp	r0, #15
   14b44:	d90d      	bls.n	14b62 <bt_buf_get_evt+0x22>
   14b46:	2813      	cmp	r0, #19
   14b48:	d10d      	bne.n	14b66 <bt_buf_get_evt+0x26>
	return net_buf_alloc_fixed(pool, timeout);
   14b4a:	4814      	ldr	r0, [pc, #80]	; (14b9c <bt_buf_get_evt+0x5c>)
   14b4c:	f013 fb74 	bl	28238 <net_buf_alloc_fixed>
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
		{
			struct net_buf *buf;

			buf = net_buf_alloc(&num_complete_pool, timeout);
			if (buf) {
   14b50:	4604      	mov	r4, r0
   14b52:	b198      	cbz	r0, 14b7c <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
   14b54:	2100      	movs	r1, #0
   14b56:	3008      	adds	r0, #8
   14b58:	f013 fb90 	bl	2827c <net_buf_simple_reserve>
   14b5c:	2301      	movs	r3, #1
   14b5e:	7523      	strb	r3, [r4, #20]
}
   14b60:	e00c      	b.n	14b7c <bt_buf_get_evt+0x3c>
	switch (evt) {
   14b62:	280e      	cmp	r0, #14
   14b64:	d205      	bcs.n	14b72 <bt_buf_get_evt+0x32>
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return bt_buf_get_cmd_complete(timeout);
	default:
#if defined(CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT)
		if (discardable) {
   14b66:	b959      	cbnz	r1, 14b80 <bt_buf_get_evt+0x40>

			return buf;
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   14b68:	2001      	movs	r0, #1
   14b6a:	f7ff ffb1 	bl	14ad0 <bt_buf_get_rx>
   14b6e:	4604      	mov	r4, r0
   14b70:	e004      	b.n	14b7c <bt_buf_get_evt+0x3c>
		return bt_buf_get_cmd_complete(timeout);
   14b72:	4610      	mov	r0, r2
   14b74:	4619      	mov	r1, r3
   14b76:	f7ff ffbb 	bl	14af0 <bt_buf_get_cmd_complete>
   14b7a:	4604      	mov	r4, r0
	}
}
   14b7c:	4620      	mov	r0, r4
   14b7e:	bd10      	pop	{r4, pc}
	return net_buf_alloc_fixed(pool, timeout);
   14b80:	4807      	ldr	r0, [pc, #28]	; (14ba0 <bt_buf_get_evt+0x60>)
   14b82:	f013 fb59 	bl	28238 <net_buf_alloc_fixed>
			if (buf) {
   14b86:	4604      	mov	r4, r0
   14b88:	2800      	cmp	r0, #0
   14b8a:	d0f7      	beq.n	14b7c <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
   14b8c:	2100      	movs	r1, #0
   14b8e:	3008      	adds	r0, #8
   14b90:	f013 fb74 	bl	2827c <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   14b94:	2301      	movs	r3, #1
   14b96:	7523      	strb	r3, [r4, #20]
			return buf;
   14b98:	e7f0      	b.n	14b7c <bt_buf_get_evt+0x3c>
   14b9a:	bf00      	nop
   14b9c:	200008cc 	.word	0x200008cc
   14ba0:	2000082c 	.word	0x2000082c

00014ba4 <conn_handle_disconnected>:
}

static uint16_t disconnected_handles[CONFIG_BT_MAX_CONN];
static void conn_handle_disconnected(uint16_t handle)
{
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   14ba4:	2300      	movs	r3, #0
   14ba6:	e000      	b.n	14baa <conn_handle_disconnected+0x6>
   14ba8:	3301      	adds	r3, #1
   14baa:	2b01      	cmp	r3, #1
   14bac:	dc0a      	bgt.n	14bc4 <conn_handle_disconnected+0x20>
		if (!disconnected_handles[i]) {
   14bae:	4a06      	ldr	r2, [pc, #24]	; (14bc8 <conn_handle_disconnected+0x24>)
   14bb0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   14bb4:	2a00      	cmp	r2, #0
   14bb6:	d1f7      	bne.n	14ba8 <conn_handle_disconnected+0x4>
			/* Use invalid connection handle bits so that connection
			 * handle 0 can be used as a valid non-zero handle.
			 */
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   14bb8:	f440 4270 	orr.w	r2, r0, #61440	; 0xf000
   14bbc:	4902      	ldr	r1, [pc, #8]	; (14bc8 <conn_handle_disconnected+0x24>)
   14bbe:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
   14bc2:	e7f1      	b.n	14ba8 <conn_handle_disconnected+0x4>
		}
	}
}
   14bc4:	4770      	bx	lr
   14bc6:	bf00      	nop
   14bc8:	200026bc 	.word	0x200026bc

00014bcc <conn_handle_is_disconnected>:

static bool conn_handle_is_disconnected(uint16_t handle)
{
	handle |= ~BT_ACL_HANDLE_MASK;
   14bcc:	f440 4070 	orr.w	r0, r0, #61440	; 0xf000

	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   14bd0:	2300      	movs	r3, #0
   14bd2:	2b01      	cmp	r3, #1
   14bd4:	dc0c      	bgt.n	14bf0 <conn_handle_is_disconnected+0x24>
		if (disconnected_handles[i] == handle) {
   14bd6:	4a07      	ldr	r2, [pc, #28]	; (14bf4 <conn_handle_is_disconnected+0x28>)
   14bd8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   14bdc:	4282      	cmp	r2, r0
   14bde:	d001      	beq.n	14be4 <conn_handle_is_disconnected+0x18>
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   14be0:	3301      	adds	r3, #1
   14be2:	e7f6      	b.n	14bd2 <conn_handle_is_disconnected+0x6>
			disconnected_handles[i] = 0;
   14be4:	4a03      	ldr	r2, [pc, #12]	; (14bf4 <conn_handle_is_disconnected+0x28>)
   14be6:	2100      	movs	r1, #0
   14be8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			return true;
   14bec:	2001      	movs	r0, #1
   14bee:	4770      	bx	lr
		}
	}

	return false;
   14bf0:	2000      	movs	r0, #0
}
   14bf2:	4770      	bx	lr
   14bf4:	200026bc 	.word	0x200026bc

00014bf8 <read_local_ver_complete>:
}


static void read_local_ver_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   14bf8:	6882      	ldr	r2, [r0, #8]

	BT_DBG("status 0x%02x", rp->status);

	bt_dev.hci_version = rp->hci_version;
   14bfa:	7851      	ldrb	r1, [r2, #1]
   14bfc:	4b07      	ldr	r3, [pc, #28]	; (14c1c <read_local_ver_complete+0x24>)
   14bfe:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   14c02:	8851      	ldrh	r1, [r2, #2]
   14c04:	86d9      	strh	r1, [r3, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
   14c06:	7911      	ldrb	r1, [r2, #4]
   14c08:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   14c0c:	f8b2 1007 	ldrh.w	r1, [r2, #7]
   14c10:	8719      	strh	r1, [r3, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   14c12:	f8b2 2005 	ldrh.w	r2, [r2, #5]
   14c16:	875a      	strh	r2, [r3, #58]	; 0x3a
}
   14c18:	4770      	bx	lr
   14c1a:	bf00      	nop
   14c1c:	200002a0 	.word	0x200002a0

00014c20 <le_read_supp_states_complete>:
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
}

static void le_read_supp_states_complete(struct net_buf *buf)
{
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;
   14c20:	6883      	ldr	r3, [r0, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   14c22:	7a19      	ldrb	r1, [r3, #8]
   14c24:	79da      	ldrb	r2, [r3, #7]
   14c26:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   14c2a:	7998      	ldrb	r0, [r3, #6]
   14c2c:	795a      	ldrb	r2, [r3, #5]
   14c2e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   14c32:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
	return ((uint16_t)src[1] << 8) | src[0];
   14c36:	7918      	ldrb	r0, [r3, #4]
   14c38:	78d9      	ldrb	r1, [r3, #3]
   14c3a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
   14c3e:	7898      	ldrb	r0, [r3, #2]
   14c40:	785b      	ldrb	r3, [r3, #1]
   14c42:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   14c46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16

	BT_DBG("status 0x%02x", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
   14c4a:	4903      	ldr	r1, [pc, #12]	; (14c58 <le_read_supp_states_complete+0x38>)
   14c4c:	f8c1 30a8 	str.w	r3, [r1, #168]	; 0xa8
   14c50:	f8c1 20ac 	str.w	r2, [r1, #172]	; 0xac
}
   14c54:	4770      	bx	lr
   14c56:	bf00      	nop
   14c58:	200002a0 	.word	0x200002a0

00014c5c <le_read_resolving_list_size_complete>:

#if defined(CONFIG_BT_SMP)
static void le_read_resolving_list_size_complete(struct net_buf *buf)
{
	struct bt_hci_rp_le_read_rl_size *rp = (void *)buf->data;
   14c5c:	6883      	ldr	r3, [r0, #8]

	BT_DBG("Resolving List size %u", rp->rl_size);

	bt_dev.le.rl_size = rp->rl_size;
   14c5e:	785a      	ldrb	r2, [r3, #1]
   14c60:	4b01      	ldr	r3, [pc, #4]	; (14c68 <le_read_resolving_list_size_complete+0xc>)
   14c62:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
}
   14c66:	4770      	bx	lr
   14c68:	200002a0 	.word	0x200002a0

00014c6c <ver_str>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(uint8_t ver)
{
   14c6c:	b470      	push	{r4, r5, r6}
   14c6e:	b08d      	sub	sp, #52	; 0x34
   14c70:	4606      	mov	r6, r0
	const char * const str[] = {
   14c72:	466c      	mov	r4, sp
   14c74:	4d0a      	ldr	r5, [pc, #40]	; (14ca0 <ver_str+0x34>)
   14c76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   14c78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   14c7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   14c7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   14c7e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   14c82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0", "5.1", "5.2"
	};

	if (ver < ARRAY_SIZE(str)) {
   14c86:	2e0b      	cmp	r6, #11
   14c88:	d903      	bls.n	14c92 <ver_str+0x26>
		return str[ver];
	}

	return "unknown";
   14c8a:	4806      	ldr	r0, [pc, #24]	; (14ca4 <ver_str+0x38>)
}
   14c8c:	b00d      	add	sp, #52	; 0x34
   14c8e:	bc70      	pop	{r4, r5, r6}
   14c90:	4770      	bx	lr
		return str[ver];
   14c92:	ab0c      	add	r3, sp, #48	; 0x30
   14c94:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   14c98:	f856 0c30 	ldr.w	r0, [r6, #-48]
   14c9c:	e7f6      	b.n	14c8c <ver_str+0x20>
   14c9e:	bf00      	nop
   14ca0:	0002a0a0 	.word	0x0002a0a0
   14ca4:	0002b370 	.word	0x0002b370

00014ca8 <vs_hw_platform>:
{
	static const char * const plat_str[] = {
		"reserved", "Intel Corporation", "Nordic Semiconductor",
		"NXP Semiconductors" };

	if (platform < ARRAY_SIZE(plat_str)) {
   14ca8:	2803      	cmp	r0, #3
   14caa:	d901      	bls.n	14cb0 <vs_hw_platform+0x8>
		return plat_str[platform];
	}

	return "unknown";
   14cac:	4802      	ldr	r0, [pc, #8]	; (14cb8 <vs_hw_platform+0x10>)
}
   14cae:	4770      	bx	lr
		return plat_str[platform];
   14cb0:	4b02      	ldr	r3, [pc, #8]	; (14cbc <vs_hw_platform+0x14>)
   14cb2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   14cb6:	4770      	bx	lr
   14cb8:	0002b370 	.word	0x0002b370
   14cbc:	0002bab0 	.word	0x0002bab0

00014cc0 <vs_hw_variant>:
{
	static const char * const nordic_str[] = {
		"reserved", "nRF51x", "nRF52x", "nRF53x"
	};

	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   14cc0:	2802      	cmp	r0, #2
   14cc2:	d107      	bne.n	14cd4 <vs_hw_variant+0x14>
		return "unknown";
	}

	if (variant < ARRAY_SIZE(nordic_str)) {
   14cc4:	2903      	cmp	r1, #3
   14cc6:	d901      	bls.n	14ccc <vs_hw_variant+0xc>
		return nordic_str[variant];
	}

	return "unknown";
   14cc8:	4803      	ldr	r0, [pc, #12]	; (14cd8 <vs_hw_variant+0x18>)
}
   14cca:	4770      	bx	lr
		return nordic_str[variant];
   14ccc:	4b03      	ldr	r3, [pc, #12]	; (14cdc <vs_hw_variant+0x1c>)
   14cce:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   14cd2:	4770      	bx	lr
		return "unknown";
   14cd4:	4800      	ldr	r0, [pc, #0]	; (14cd8 <vs_hw_variant+0x18>)
   14cd6:	4770      	bx	lr
   14cd8:	0002b370 	.word	0x0002b370
   14cdc:	0002ba70 	.word	0x0002ba70

00014ce0 <vs_fw_variant>:
		"Vendor specific controller",
		"Firmware loader",
		"Rescue image",
	};

	if (variant < ARRAY_SIZE(var_str)) {
   14ce0:	2803      	cmp	r0, #3
   14ce2:	d901      	bls.n	14ce8 <vs_fw_variant+0x8>
		return var_str[variant];
	}

	return "unknown";
   14ce4:	4802      	ldr	r0, [pc, #8]	; (14cf0 <vs_fw_variant+0x10>)
}
   14ce6:	4770      	bx	lr
		return var_str[variant];
   14ce8:	4b02      	ldr	r3, [pc, #8]	; (14cf4 <vs_fw_variant+0x14>)
   14cea:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   14cee:	4770      	bx	lr
   14cf0:	0002b370 	.word	0x0002b370
   14cf4:	0002bae8 	.word	0x0002bae8

00014cf8 <hci_reset_complete>:
	uint8_t status = buf->data[0];
   14cf8:	6883      	ldr	r3, [r0, #8]
   14cfa:	781b      	ldrb	r3, [r3, #0]
	if (status) {
   14cfc:	b993      	cbnz	r3, 14d24 <hci_reset_complete+0x2c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14cfe:	f3bf 8f5b 	dmb	ish
   14d02:	4b09      	ldr	r3, [pc, #36]	; (14d28 <hci_reset_complete+0x30>)
   14d04:	f853 2f98 	ldr.w	r2, [r3, #152]!
   14d08:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   14d0c:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   14d10:	f3bf 8f5b 	dmb	ish
   14d14:	e853 1f00 	ldrex	r1, [r3]
   14d18:	e843 2000 	strex	r0, r2, [r3]
   14d1c:	2800      	cmp	r0, #0
   14d1e:	d1f9      	bne.n	14d14 <hci_reset_complete+0x1c>
   14d20:	f3bf 8f5b 	dmb	ish
}
   14d24:	4770      	bx	lr
   14d26:	bf00      	nop
   14d28:	200002a0 	.word	0x200002a0

00014d2c <read_local_features_complete>:
{
   14d2c:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   14d2e:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   14d30:	2208      	movs	r2, #8
   14d32:	3101      	adds	r1, #1
   14d34:	4801      	ldr	r0, [pc, #4]	; (14d3c <read_local_features_complete+0x10>)
   14d36:	f00f fe99 	bl	24a6c <memcpy>
}
   14d3a:	bd08      	pop	{r3, pc}
   14d3c:	200002dc 	.word	0x200002dc

00014d40 <read_le_features_complete>:
{
   14d40:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   14d42:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   14d44:	2208      	movs	r2, #8
   14d46:	3101      	adds	r1, #1
   14d48:	4801      	ldr	r0, [pc, #4]	; (14d50 <read_le_features_complete+0x10>)
   14d4a:	f00f fe8f 	bl	24a6c <memcpy>
}
   14d4e:	bd08      	pop	{r3, pc}
   14d50:	20000340 	.word	0x20000340

00014d54 <read_supported_commands_complete>:
{
   14d54:	b510      	push	{r4, lr}
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   14d56:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
   14d58:	4c04      	ldr	r4, [pc, #16]	; (14d6c <read_supported_commands_complete+0x18>)
   14d5a:	2240      	movs	r2, #64	; 0x40
   14d5c:	3101      	adds	r1, #1
   14d5e:	4620      	mov	r0, r4
   14d60:	f00f fe84 	bl	24a6c <memcpy>
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
   14d64:	4620      	mov	r0, r4
   14d66:	f00f ff6c 	bl	24c42 <bt_hci_ecc_supported_commands>
}
   14d6a:	bd10      	pop	{r4, pc}
   14d6c:	200002e4 	.word	0x200002e4

00014d70 <le_read_buffer_size_complete>:
{
   14d70:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   14d72:	6882      	ldr	r2, [r0, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   14d74:	f8b2 3001 	ldrh.w	r3, [r2, #1]
   14d78:	b299      	uxth	r1, r3
   14d7a:	4805      	ldr	r0, [pc, #20]	; (14d90 <le_read_buffer_size_complete+0x20>)
   14d7c:	f8a0 30cc 	strh.w	r3, [r0, #204]	; 0xcc
	if (!bt_dev.le.acl_mtu) {
   14d80:	b901      	cbnz	r1, 14d84 <le_read_buffer_size_complete+0x14>
}
   14d82:	bd08      	pop	{r3, pc}
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   14d84:	78d1      	ldrb	r1, [r2, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   14d86:	460a      	mov	r2, r1
   14d88:	30d0      	adds	r0, #208	; 0xd0
   14d8a:	f014 fadd 	bl	29348 <z_impl_k_sem_init>
   14d8e:	e7f8      	b.n	14d82 <le_read_buffer_size_complete+0x12>
   14d90:	200002a0 	.word	0x200002a0

00014d94 <read_buffer_size_complete>:
{
   14d94:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   14d96:	6882      	ldr	r2, [r0, #8]
	if (bt_dev.le.acl_mtu) {
   14d98:	4b07      	ldr	r3, [pc, #28]	; (14db8 <read_buffer_size_complete+0x24>)
   14d9a:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
   14d9e:	b103      	cbz	r3, 14da2 <read_buffer_size_complete+0xe>
}
   14da0:	bd08      	pop	{r3, pc}
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   14da2:	f8b2 3001 	ldrh.w	r3, [r2, #1]
   14da6:	4804      	ldr	r0, [pc, #16]	; (14db8 <read_buffer_size_complete+0x24>)
   14da8:	f8a0 30cc 	strh.w	r3, [r0, #204]	; 0xcc
	pkts = sys_le16_to_cpu(rp->acl_max_num);
   14dac:	8891      	ldrh	r1, [r2, #4]
   14dae:	460a      	mov	r2, r1
   14db0:	30d0      	adds	r0, #208	; 0xd0
   14db2:	f014 fac9 	bl	29348 <z_impl_k_sem_init>
   14db6:	e7f3      	b.n	14da0 <read_buffer_size_complete+0xc>
   14db8:	200002a0 	.word	0x200002a0

00014dbc <hci_data_buf_overflow>:
{
   14dbc:	b508      	push	{r3, lr}
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
   14dbe:	6881      	ldr	r1, [r0, #8]
   14dc0:	4b08      	ldr	r3, [pc, #32]	; (14de4 <hci_data_buf_overflow+0x28>)
   14dc2:	4a09      	ldr	r2, [pc, #36]	; (14de8 <hci_data_buf_overflow+0x2c>)
   14dc4:	1a9b      	subs	r3, r3, r2
   14dc6:	08db      	lsrs	r3, r3, #3
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   14dc8:	f04f 0200 	mov.w	r2, #0
   14dcc:	2002      	movs	r0, #2
   14dce:	f360 0202 	bfi	r2, r0, #0, #3
   14dd2:	f36f 02c5 	bfc	r2, #3, #3
   14dd6:	f363 128f 	bfi	r2, r3, #6, #10
   14dda:	7809      	ldrb	r1, [r1, #0]
   14ddc:	4803      	ldr	r0, [pc, #12]	; (14dec <hci_data_buf_overflow+0x30>)
   14dde:	f7fc f997 	bl	11110 <log_1>
}
   14de2:	bd08      	pop	{r3, pc}
   14de4:	00029f0c 	.word	0x00029f0c
   14de8:	00029ecc 	.word	0x00029ecc
   14dec:	0002b378 	.word	0x0002b378

00014df0 <find_pending_connect>:
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   14df0:	2801      	cmp	r0, #1
   14df2:	d001      	beq.n	14df8 <find_pending_connect+0x8>
	return NULL;
   14df4:	2000      	movs	r0, #0
}
   14df6:	4770      	bx	lr
{
   14df8:	b500      	push	{lr}
   14dfa:	b083      	sub	sp, #12
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   14dfc:	2205      	movs	r2, #5
   14dfe:	4b0d      	ldr	r3, [pc, #52]	; (14e34 <find_pending_connect+0x44>)
   14e00:	f893 0033 	ldrb.w	r0, [r3, #51]	; 0x33
   14e04:	f003 fd3a 	bl	1887c <bt_conn_lookup_state_le>
		if (!conn) {
   14e08:	b110      	cbz	r0, 14e10 <find_pending_connect+0x20>
}
   14e0a:	b003      	add	sp, #12
   14e0c:	f85d fb04 	ldr.w	pc, [sp], #4
						       BT_ADDR_LE_NONE,
   14e10:	4b09      	ldr	r3, [pc, #36]	; (14e38 <find_pending_connect+0x48>)
   14e12:	e893 0003 	ldmia.w	r3, {r0, r1}
   14e16:	9000      	str	r0, [sp, #0]
   14e18:	f8ad 1004 	strh.w	r1, [sp, #4]
   14e1c:	0c09      	lsrs	r1, r1, #16
   14e1e:	f88d 1006 	strb.w	r1, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   14e22:	2204      	movs	r2, #4
   14e24:	4669      	mov	r1, sp
   14e26:	4b03      	ldr	r3, [pc, #12]	; (14e34 <find_pending_connect+0x44>)
   14e28:	f893 0033 	ldrb.w	r0, [r3, #51]	; 0x33
   14e2c:	f003 fd26 	bl	1887c <bt_conn_lookup_state_le>
		return conn;
   14e30:	e7eb      	b.n	14e0a <find_pending_connect+0x1a>
   14e32:	bf00      	nop
   14e34:	200002a0 	.word	0x200002a0
   14e38:	0002a0d0 	.word	0x0002a0d0

00014e3c <le_conn_complete_adv_timeout>:
{
   14e3c:	b510      	push	{r4, lr}
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   14e3e:	f002 fd1f 	bl	17880 <bt_le_adv_lookup_legacy>
		atomic_clear_bit(adv->flags, BT_ADV_ENABLED);
   14e42:	3010      	adds	r0, #16
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14e44:	f3bf 8f5b 	dmb	ish
   14e48:	e850 3f00 	ldrex	r3, [r0]
   14e4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   14e50:	e840 3200 	strex	r2, r3, [r0]
   14e54:	2a00      	cmp	r2, #0
   14e56:	d1f7      	bne.n	14e48 <le_conn_complete_adv_timeout+0xc>
   14e58:	f3bf 8f5b 	dmb	ish
		conn = find_pending_connect(BT_HCI_ROLE_SLAVE, NULL);
   14e5c:	2100      	movs	r1, #0
   14e5e:	2001      	movs	r0, #1
   14e60:	f7ff ffc6 	bl	14df0 <find_pending_connect>
		if (!conn) {
   14e64:	4604      	mov	r4, r0
   14e66:	b140      	cbz	r0, 14e7a <le_conn_complete_adv_timeout+0x3e>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   14e68:	233c      	movs	r3, #60	; 0x3c
   14e6a:	7303      	strb	r3, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   14e6c:	2100      	movs	r1, #0
   14e6e:	f003 fb95 	bl	1859c <bt_conn_set_state>
		bt_conn_unref(conn);
   14e72:	4620      	mov	r0, r4
   14e74:	f010 fd40 	bl	258f8 <bt_conn_unref>
}
   14e78:	bd10      	pop	{r4, pc}
   14e7a:	4b08      	ldr	r3, [pc, #32]	; (14e9c <le_conn_complete_adv_timeout+0x60>)
   14e7c:	4a08      	ldr	r2, [pc, #32]	; (14ea0 <le_conn_complete_adv_timeout+0x64>)
   14e7e:	1a9b      	subs	r3, r3, r2
   14e80:	08db      	lsrs	r3, r3, #3
			BT_ERR("No pending slave connection");
   14e82:	f04f 0100 	mov.w	r1, #0
   14e86:	2201      	movs	r2, #1
   14e88:	f362 0102 	bfi	r1, r2, #0, #3
   14e8c:	f36f 01c5 	bfc	r1, #3, #3
   14e90:	f363 118f 	bfi	r1, r3, #6, #10
   14e94:	4803      	ldr	r0, [pc, #12]	; (14ea4 <le_conn_complete_adv_timeout+0x68>)
   14e96:	f7fc f9f1 	bl	1127c <log_0>
			return;
   14e9a:	e7ed      	b.n	14e78 <le_conn_complete_adv_timeout+0x3c>
   14e9c:	00029f0c 	.word	0x00029f0c
   14ea0:	00029ecc 	.word	0x00029ecc
   14ea4:	0002b3a0 	.word	0x0002b3a0

00014ea8 <unpair>:
{
   14ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14eaa:	4604      	mov	r4, r0
   14eac:	460d      	mov	r5, r1
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, addr);
   14eae:	f003 fc6d 	bl	1878c <bt_conn_lookup_addr_le>
	if (conn) {
   14eb2:	b318      	cbz	r0, 14efc <unpair+0x54>
   14eb4:	4607      	mov	r7, r0
		if (conn->type == BT_CONN_TYPE_LE) {
   14eb6:	7883      	ldrb	r3, [r0, #2]
   14eb8:	2b01      	cmp	r3, #1
   14eba:	d019      	beq.n	14ef0 <unpair+0x48>
	struct bt_keys *keys = NULL;
   14ebc:	2600      	movs	r6, #0
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
   14ebe:	2113      	movs	r1, #19
   14ec0:	4638      	mov	r0, r7
   14ec2:	f010 fd71 	bl	259a8 <bt_conn_disconnect>
		bt_conn_unref(conn);
   14ec6:	4638      	mov	r0, r7
   14ec8:	f010 fd16 	bl	258f8 <bt_conn_unref>
		if (!keys) {
   14ecc:	b1b6      	cbz	r6, 14efc <unpair+0x54>
		if (keys) {
   14ece:	b116      	cbz	r6, 14ed6 <unpair+0x2e>
			bt_keys_clear(keys);
   14ed0:	4630      	mov	r0, r6
   14ed2:	f008 fddf 	bl	1da94 <bt_keys_clear>
	bt_gatt_clear(id, addr);
   14ed6:	4629      	mov	r1, r5
   14ed8:	4620      	mov	r0, r4
   14eda:	f012 f81d 	bl	26f18 <bt_gatt_clear>
	if (bt_auth && bt_auth->bond_deleted) {
   14ede:	4b0a      	ldr	r3, [pc, #40]	; (14f08 <unpair+0x60>)
   14ee0:	681b      	ldr	r3, [r3, #0]
   14ee2:	b123      	cbz	r3, 14eee <unpair+0x46>
   14ee4:	6a1b      	ldr	r3, [r3, #32]
   14ee6:	b113      	cbz	r3, 14eee <unpair+0x46>
		bt_auth->bond_deleted(id, addr);
   14ee8:	4629      	mov	r1, r5
   14eea:	4620      	mov	r0, r4
   14eec:	4798      	blx	r3
}
   14eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			keys = conn->le.keys;
   14ef0:	f8d0 60b4 	ldr.w	r6, [r0, #180]	; 0xb4
			conn->le.keys = NULL;
   14ef4:	2300      	movs	r3, #0
   14ef6:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
   14efa:	e7e0      	b.n	14ebe <unpair+0x16>
			keys = bt_keys_find_addr(id, addr);
   14efc:	4629      	mov	r1, r5
   14efe:	4620      	mov	r0, r4
   14f00:	f008 fda6 	bl	1da50 <bt_keys_find_addr>
   14f04:	4606      	mov	r6, r0
   14f06:	e7e2      	b.n	14ece <unpair+0x26>
   14f08:	20002710 	.word	0x20002710

00014f0c <hci_disconn_complete>:
{
   14f0c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   14f0e:	6884      	ldr	r4, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14f10:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	if (evt->status) {
   14f14:	7823      	ldrb	r3, [r4, #0]
   14f16:	b103      	cbz	r3, 14f1a <hci_disconn_complete+0xe>
}
   14f18:	bd70      	pop	{r4, r5, r6, pc}
	conn = bt_conn_lookup_handle(handle);
   14f1a:	4630      	mov	r0, r6
   14f1c:	f003 fb34 	bl	18588 <bt_conn_lookup_handle>
	if (!conn) {
   14f20:	4605      	mov	r5, r0
   14f22:	b168      	cbz	r0, 14f40 <hci_disconn_complete+0x34>
	conn->err = evt->reason;
   14f24:	78e3      	ldrb	r3, [r4, #3]
   14f26:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   14f28:	2100      	movs	r1, #0
   14f2a:	f003 fb37 	bl	1859c <bt_conn_set_state>
	conn->handle = 0U;
   14f2e:	2300      	movs	r3, #0
   14f30:	802b      	strh	r3, [r5, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
   14f32:	78ab      	ldrb	r3, [r5, #2]
   14f34:	2b01      	cmp	r3, #1
   14f36:	d015      	beq.n	14f64 <hci_disconn_complete+0x58>
		bt_conn_unref(conn);
   14f38:	4628      	mov	r0, r5
   14f3a:	f010 fcdd 	bl	258f8 <bt_conn_unref>
		return;
   14f3e:	e7eb      	b.n	14f18 <hci_disconn_complete+0xc>
   14f40:	4b0a      	ldr	r3, [pc, #40]	; (14f6c <hci_disconn_complete+0x60>)
   14f42:	4a0b      	ldr	r2, [pc, #44]	; (14f70 <hci_disconn_complete+0x64>)
   14f44:	1a9b      	subs	r3, r3, r2
   14f46:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to look up conn with handle %u", handle);
   14f48:	f04f 0200 	mov.w	r2, #0
   14f4c:	2101      	movs	r1, #1
   14f4e:	f361 0202 	bfi	r2, r1, #0, #3
   14f52:	f36f 02c5 	bfc	r2, #3, #3
   14f56:	f363 128f 	bfi	r2, r3, #6, #10
   14f5a:	4631      	mov	r1, r6
   14f5c:	4805      	ldr	r0, [pc, #20]	; (14f74 <hci_disconn_complete+0x68>)
   14f5e:	f7fc f8d7 	bl	11110 <log_1>
		return;
   14f62:	e7d9      	b.n	14f18 <hci_disconn_complete+0xc>
	bt_conn_unref(conn);
   14f64:	4628      	mov	r0, r5
   14f66:	f010 fcc7 	bl	258f8 <bt_conn_unref>
   14f6a:	e7d5      	b.n	14f18 <hci_disconn_complete+0xc>
   14f6c:	00029f0c 	.word	0x00029f0c
   14f70:	00029ecc 	.word	0x00029ecc
   14f74:	0002b3bc 	.word	0x0002b3bc

00014f78 <le_data_len_change>:
{
   14f78:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
   14f7a:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14f7c:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   14f7e:	4620      	mov	r0, r4
   14f80:	f003 fb02 	bl	18588 <bt_conn_lookup_handle>
	if (!conn) {
   14f84:	b110      	cbz	r0, 14f8c <le_data_len_change+0x14>
	bt_conn_unref(conn);
   14f86:	f010 fcb7 	bl	258f8 <bt_conn_unref>
}
   14f8a:	bd10      	pop	{r4, pc}
   14f8c:	4b08      	ldr	r3, [pc, #32]	; (14fb0 <le_data_len_change+0x38>)
   14f8e:	4a09      	ldr	r2, [pc, #36]	; (14fb4 <le_data_len_change+0x3c>)
   14f90:	1a9b      	subs	r3, r3, r2
   14f92:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   14f94:	f04f 0200 	mov.w	r2, #0
   14f98:	2101      	movs	r1, #1
   14f9a:	f361 0202 	bfi	r2, r1, #0, #3
   14f9e:	f36f 02c5 	bfc	r2, #3, #3
   14fa2:	f363 128f 	bfi	r2, r3, #6, #10
   14fa6:	4621      	mov	r1, r4
   14fa8:	4803      	ldr	r0, [pc, #12]	; (14fb8 <le_data_len_change+0x40>)
   14faa:	f7fc f8b1 	bl	11110 <log_1>
		return;
   14fae:	e7ec      	b.n	14f8a <le_data_len_change+0x12>
   14fb0:	00029f0c 	.word	0x00029f0c
   14fb4:	00029ecc 	.word	0x00029ecc
   14fb8:	0002b3e4 	.word	0x0002b3e4

00014fbc <hci_num_completed_packets>:
{
   14fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   14fc0:	f8d0 8008 	ldr.w	r8, [r0, #8]
	for (i = 0; i < evt->num_handles; i++) {
   14fc4:	2700      	movs	r7, #0
   14fc6:	e05c      	b.n	15082 <hci_num_completed_packets+0xc6>
				conn->pending_no_cb--;
   14fc8:	3b01      	subs	r3, #1
   14fca:	61e3      	str	r3, [r4, #28]
   14fcc:	f382 8811 	msr	BASEPRI, r2
   14fd0:	f3bf 8f6f 	isb	sy
				k_sem_give(bt_conn_get_pkts(conn));
   14fd4:	4620      	mov	r0, r4
   14fd6:	f003 f851 	bl	1807c <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   14fda:	f00a fead 	bl	1fd38 <z_impl_k_sem_give>
				continue;
   14fde:	e025      	b.n	1502c <hci_num_completed_packets+0x70>
	list->tail = node;
   14fe0:	61a1      	str	r1, [r4, #24]
   14fe2:	f382 8811 	msr	BASEPRI, r2
   14fe6:	f3bf 8f6f 	isb	sy
			if (!node) {
   14fea:	2b00      	cmp	r3, #0
   14fec:	d036      	beq.n	1505c <hci_num_completed_packets+0xa0>
	__asm__ volatile(
   14fee:	f04f 0240 	mov.w	r2, #64	; 0x40
   14ff2:	f3ef 8111 	mrs	r1, BASEPRI
   14ff6:	f382 8811 	msr	BASEPRI, r2
   14ffa:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   14ffe:	68da      	ldr	r2, [r3, #12]
   15000:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   15002:	2200      	movs	r2, #0
   15004:	60da      	str	r2, [r3, #12]
	parent->next = child;
   15006:	601a      	str	r2, [r3, #0]
	return list->tail;
   15008:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   1500a:	2a00      	cmp	r2, #0
   1500c:	d05a      	beq.n	150c4 <hci_num_completed_packets+0x108>
	parent->next = child;
   1500e:	6013      	str	r3, [r2, #0]
	list->tail = node;
   15010:	6263      	str	r3, [r4, #36]	; 0x24
	__asm__ volatile(
   15012:	f381 8811 	msr	BASEPRI, r1
   15016:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   1501a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1501e:	f00b f879 	bl	20114 <k_work_submit>
			k_sem_give(bt_conn_get_pkts(conn));
   15022:	4620      	mov	r0, r4
   15024:	f003 f82a 	bl	1807c <bt_conn_get_pkts>
   15028:	f00a fe86 	bl	1fd38 <z_impl_k_sem_give>
{
   1502c:	462e      	mov	r6, r5
		while (count--) {
   1502e:	1e75      	subs	r5, r6, #1
   15030:	b2ad      	uxth	r5, r5
   15032:	b316      	cbz	r6, 1507a <hci_num_completed_packets+0xbe>
	__asm__ volatile(
   15034:	f04f 0340 	mov.w	r3, #64	; 0x40
   15038:	f3ef 8211 	mrs	r2, BASEPRI
   1503c:	f383 8811 	msr	BASEPRI, r3
   15040:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   15044:	69e3      	ldr	r3, [r4, #28]
   15046:	2b00      	cmp	r3, #0
   15048:	d1be      	bne.n	14fc8 <hci_num_completed_packets+0xc>
	return list->head;
   1504a:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   1504c:	2b00      	cmp	r3, #0
   1504e:	d0c8      	beq.n	14fe2 <hci_num_completed_packets+0x26>
	return node->next;
   15050:	6819      	ldr	r1, [r3, #0]
	list->head = node;
   15052:	6161      	str	r1, [r4, #20]
	return list->tail;
   15054:	69a0      	ldr	r0, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15056:	4283      	cmp	r3, r0
   15058:	d1c3      	bne.n	14fe2 <hci_num_completed_packets+0x26>
   1505a:	e7c1      	b.n	14fe0 <hci_num_completed_packets+0x24>
   1505c:	4b1c      	ldr	r3, [pc, #112]	; (150d0 <hci_num_completed_packets+0x114>)
   1505e:	4a1d      	ldr	r2, [pc, #116]	; (150d4 <hci_num_completed_packets+0x118>)
   15060:	1a9b      	subs	r3, r3, r2
   15062:	08db      	lsrs	r3, r3, #3
				BT_ERR("packets count mismatch");
   15064:	2201      	movs	r2, #1
   15066:	f362 0902 	bfi	r9, r2, #0, #3
   1506a:	f36f 09c5 	bfc	r9, #3, #3
   1506e:	f363 198f 	bfi	r9, r3, #6, #10
   15072:	4649      	mov	r1, r9
   15074:	4818      	ldr	r0, [pc, #96]	; (150d8 <hci_num_completed_packets+0x11c>)
   15076:	f7fc f901 	bl	1127c <log_0>
		bt_conn_unref(conn);
   1507a:	4620      	mov	r0, r4
   1507c:	f010 fc3c 	bl	258f8 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   15080:	3701      	adds	r7, #1
   15082:	f898 3000 	ldrb.w	r3, [r8]
   15086:	429f      	cmp	r7, r3
   15088:	da1f      	bge.n	150ca <hci_num_completed_packets+0x10e>
		handle = sys_le16_to_cpu(evt->h[i].handle);
   1508a:	eb08 0387 	add.w	r3, r8, r7, lsl #2
   1508e:	f8b3 5001 	ldrh.w	r5, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   15092:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   15096:	4628      	mov	r0, r5
   15098:	f003 fa76 	bl	18588 <bt_conn_lookup_handle>
		if (!conn) {
   1509c:	4604      	mov	r4, r0
   1509e:	2800      	cmp	r0, #0
   150a0:	d1c5      	bne.n	1502e <hci_num_completed_packets+0x72>
   150a2:	4b0b      	ldr	r3, [pc, #44]	; (150d0 <hci_num_completed_packets+0x114>)
   150a4:	4a0b      	ldr	r2, [pc, #44]	; (150d4 <hci_num_completed_packets+0x118>)
   150a6:	1a9b      	subs	r3, r3, r2
   150a8:	08db      	lsrs	r3, r3, #3
			BT_ERR("No connection for handle %u", handle);
   150aa:	2201      	movs	r2, #1
   150ac:	f362 0a02 	bfi	sl, r2, #0, #3
   150b0:	f36f 0ac5 	bfc	sl, #3, #3
   150b4:	f363 1a8f 	bfi	sl, r3, #6, #10
   150b8:	4652      	mov	r2, sl
   150ba:	4629      	mov	r1, r5
   150bc:	4807      	ldr	r0, [pc, #28]	; (150dc <hci_num_completed_packets+0x120>)
   150be:	f7fc f827 	bl	11110 <log_1>
			continue;
   150c2:	e7dd      	b.n	15080 <hci_num_completed_packets+0xc4>
	list->tail = node;
   150c4:	6263      	str	r3, [r4, #36]	; 0x24
	list->head = node;
   150c6:	6223      	str	r3, [r4, #32]
}
   150c8:	e7a3      	b.n	15012 <hci_num_completed_packets+0x56>
}
   150ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   150ce:	bf00      	nop
   150d0:	00029f0c 	.word	0x00029f0c
   150d4:	00029ecc 	.word	0x00029ecc
   150d8:	0002b424 	.word	0x0002b424
   150dc:	0002b408 	.word	0x0002b408

000150e0 <hci_cmd_done>:
{
   150e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   150e2:	b085      	sub	sp, #20
   150e4:	4605      	mov	r5, r0
   150e6:	460e      	mov	r6, r1
   150e8:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   150ea:	7990      	ldrb	r0, [r2, #6]
   150ec:	f008 fe20 	bl	1dd30 <net_buf_pool_get>
   150f0:	4b50      	ldr	r3, [pc, #320]	; (15234 <hci_cmd_done+0x154>)
   150f2:	4283      	cmp	r3, r0
   150f4:	d01c      	beq.n	15130 <hci_cmd_done+0x50>
   150f6:	4b50      	ldr	r3, [pc, #320]	; (15238 <hci_cmd_done+0x158>)
   150f8:	4a50      	ldr	r2, [pc, #320]	; (1523c <hci_cmd_done+0x15c>)
   150fa:	1a9b      	subs	r3, r3, r2
   150fc:	08db      	lsrs	r3, r3, #3
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   150fe:	f04f 0600 	mov.w	r6, #0
   15102:	2202      	movs	r2, #2
   15104:	f362 0602 	bfi	r6, r2, #0, #3
   15108:	f36f 06c5 	bfc	r6, #3, #3
   1510c:	f363 168f 	bfi	r6, r3, #6, #10
   15110:	9500      	str	r5, [sp, #0]
   15112:	79a0      	ldrb	r0, [r4, #6]
   15114:	9001      	str	r0, [sp, #4]
   15116:	f008 fe0b 	bl	1dd30 <net_buf_pool_get>
   1511a:	9002      	str	r0, [sp, #8]
   1511c:	4b45      	ldr	r3, [pc, #276]	; (15234 <hci_cmd_done+0x154>)
   1511e:	9303      	str	r3, [sp, #12]
   15120:	4633      	mov	r3, r6
   15122:	2204      	movs	r2, #4
   15124:	4669      	mov	r1, sp
   15126:	4846      	ldr	r0, [pc, #280]	; (15240 <hci_cmd_done+0x160>)
   15128:	f7fc f864 	bl	111f4 <log_n>
}
   1512c:	b005      	add	sp, #20
   1512e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (cmd(buf)->opcode != opcode) {
   15130:	4620      	mov	r0, r4
   15132:	f008 fe05 	bl	1dd40 <net_buf_id>
   15136:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1513a:	4b42      	ldr	r3, [pc, #264]	; (15244 <hci_cmd_done+0x164>)
   1513c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   15140:	8843      	ldrh	r3, [r0, #2]
   15142:	42ab      	cmp	r3, r5
   15144:	d129      	bne.n	1519a <hci_cmd_done+0xba>
	if (cmd(buf)->state && !status) {
   15146:	4620      	mov	r0, r4
   15148:	f008 fdfa 	bl	1dd40 <net_buf_id>
   1514c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   15150:	4b3c      	ldr	r3, [pc, #240]	; (15244 <hci_cmd_done+0x164>)
   15152:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   15156:	6843      	ldr	r3, [r0, #4]
   15158:	b10b      	cbz	r3, 1515e <hci_cmd_done+0x7e>
   1515a:	2e00      	cmp	r6, #0
   1515c:	d039      	beq.n	151d2 <hci_cmd_done+0xf2>
	if (cmd(buf)->sync) {
   1515e:	4620      	mov	r0, r4
   15160:	f008 fdee 	bl	1dd40 <net_buf_id>
   15164:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   15168:	4b36      	ldr	r3, [pc, #216]	; (15244 <hci_cmd_done+0x164>)
   1516a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1516e:	6883      	ldr	r3, [r0, #8]
   15170:	2b00      	cmp	r3, #0
   15172:	d0db      	beq.n	1512c <hci_cmd_done+0x4c>
		cmd(buf)->status = status;
   15174:	4620      	mov	r0, r4
   15176:	f008 fde3 	bl	1dd40 <net_buf_id>
   1517a:	4d32      	ldr	r5, [pc, #200]	; (15244 <hci_cmd_done+0x164>)
   1517c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   15180:	f805 6020 	strb.w	r6, [r5, r0, lsl #2]
		k_sem_give(cmd(buf)->sync);
   15184:	4620      	mov	r0, r4
   15186:	f008 fddb 	bl	1dd40 <net_buf_id>
   1518a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1518e:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   15192:	68a8      	ldr	r0, [r5, #8]
   15194:	f00a fdd0 	bl	1fd38 <z_impl_k_sem_give>
}
   15198:	e7c8      	b.n	1512c <hci_cmd_done+0x4c>
   1519a:	4b27      	ldr	r3, [pc, #156]	; (15238 <hci_cmd_done+0x158>)
   1519c:	4a27      	ldr	r2, [pc, #156]	; (1523c <hci_cmd_done+0x15c>)
   1519e:	1a9b      	subs	r3, r3, r2
   151a0:	08db      	lsrs	r3, r3, #3
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   151a2:	f04f 0700 	mov.w	r7, #0
   151a6:	2202      	movs	r2, #2
   151a8:	f362 0702 	bfi	r7, r2, #0, #3
   151ac:	f36f 07c5 	bfc	r7, #3, #3
   151b0:	f363 178f 	bfi	r7, r3, #6, #10
   151b4:	4620      	mov	r0, r4
   151b6:	f008 fdc3 	bl	1dd40 <net_buf_id>
   151ba:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   151be:	4b21      	ldr	r3, [pc, #132]	; (15244 <hci_cmd_done+0x164>)
   151c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   151c4:	463b      	mov	r3, r7
   151c6:	8842      	ldrh	r2, [r0, #2]
   151c8:	4629      	mov	r1, r5
   151ca:	481f      	ldr	r0, [pc, #124]	; (15248 <hci_cmd_done+0x168>)
   151cc:	f7fb ffd6 	bl	1117c <log_2>
   151d0:	e7b9      	b.n	15146 <hci_cmd_done+0x66>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   151d2:	4620      	mov	r0, r4
   151d4:	f008 fdb4 	bl	1dd40 <net_buf_id>
   151d8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   151dc:	4b19      	ldr	r3, [pc, #100]	; (15244 <hci_cmd_done+0x164>)
   151de:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   151e2:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   151e4:	6813      	ldr	r3, [r2, #0]
   151e6:	6851      	ldr	r1, [r2, #4]
   151e8:	7a10      	ldrb	r0, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   151ea:	f001 051f 	and.w	r5, r1, #31
   151ee:	2201      	movs	r2, #1
   151f0:	40aa      	lsls	r2, r5
	if (val) {
   151f2:	b170      	cbz	r0, 15212 <hci_cmd_done+0x132>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   151f4:	0949      	lsrs	r1, r1, #5
   151f6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   151fa:	f3bf 8f5b 	dmb	ish
   151fe:	e853 1f00 	ldrex	r1, [r3]
   15202:	4311      	orrs	r1, r2
   15204:	e843 1000 	strex	r0, r1, [r3]
   15208:	2800      	cmp	r0, #0
   1520a:	d1f8      	bne.n	151fe <hci_cmd_done+0x11e>
   1520c:	f3bf 8f5b 	dmb	ish
   15210:	e7a5      	b.n	1515e <hci_cmd_done+0x7e>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15212:	0949      	lsrs	r1, r1, #5
   15214:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   15218:	43d2      	mvns	r2, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1521a:	f3bf 8f5b 	dmb	ish
   1521e:	e853 1f00 	ldrex	r1, [r3]
   15222:	4011      	ands	r1, r2
   15224:	e843 1000 	strex	r0, r1, [r3]
   15228:	2800      	cmp	r0, #0
   1522a:	d1f8      	bne.n	1521e <hci_cmd_done+0x13e>
   1522c:	f3bf 8f5b 	dmb	ish
	}
}
   15230:	e795      	b.n	1515e <hci_cmd_done+0x7e>
   15232:	bf00      	nop
   15234:	2000087c 	.word	0x2000087c
   15238:	00029f0c 	.word	0x00029f0c
   1523c:	00029ecc 	.word	0x00029ecc
   15240:	0002b43c 	.word	0x0002b43c
   15244:	200026a4 	.word	0x200026a4
   15248:	0002b474 	.word	0x0002b474

0001524c <hci_cmd_status>:
{
   1524c:	b538      	push	{r3, r4, r5, lr}
   1524e:	4604      	mov	r4, r0
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   15250:	2104      	movs	r1, #4
   15252:	3008      	adds	r0, #8
   15254:	f013 f895 	bl	28382 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   15258:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   1525a:	4622      	mov	r2, r4
   1525c:	7801      	ldrb	r1, [r0, #0]
   1525e:	8840      	ldrh	r0, [r0, #2]
   15260:	f7ff ff3e 	bl	150e0 <hci_cmd_done>
	if (ncmd) {
   15264:	b905      	cbnz	r5, 15268 <hci_cmd_status+0x1c>
}
   15266:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_sem_give(sem);
   15268:	4801      	ldr	r0, [pc, #4]	; (15270 <hci_cmd_status+0x24>)
   1526a:	f00a fd65 	bl	1fd38 <z_impl_k_sem_give>
   1526e:	e7fa      	b.n	15266 <hci_cmd_status+0x1a>
   15270:	20000390 	.word	0x20000390

00015274 <hci_cmd_complete>:
{
   15274:	b538      	push	{r3, r4, r5, lr}
   15276:	4604      	mov	r4, r0
   15278:	2103      	movs	r1, #3
   1527a:	3008      	adds	r0, #8
   1527c:	f013 f881 	bl	28382 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   15280:	7805      	ldrb	r5, [r0, #0]
	status = buf->data[0];
   15282:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
   15284:	4622      	mov	r2, r4
   15286:	7819      	ldrb	r1, [r3, #0]
   15288:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   1528c:	f7ff ff28 	bl	150e0 <hci_cmd_done>
	if (ncmd) {
   15290:	b905      	cbnz	r5, 15294 <hci_cmd_complete+0x20>
}
   15292:	bd38      	pop	{r3, r4, r5, pc}
   15294:	4801      	ldr	r0, [pc, #4]	; (1529c <hci_cmd_complete+0x28>)
   15296:	f00a fd4f 	bl	1fd38 <z_impl_k_sem_give>
   1529a:	e7fa      	b.n	15292 <hci_cmd_complete+0x1e>
   1529c:	20000390 	.word	0x20000390

000152a0 <hci_hardware_error>:
{
   152a0:	b508      	push	{r3, lr}
   152a2:	2101      	movs	r1, #1
   152a4:	3008      	adds	r0, #8
   152a6:	f013 f86c 	bl	28382 <net_buf_simple_pull_mem>
   152aa:	4b09      	ldr	r3, [pc, #36]	; (152d0 <hci_hardware_error+0x30>)
   152ac:	4a09      	ldr	r2, [pc, #36]	; (152d4 <hci_hardware_error+0x34>)
   152ae:	1a9b      	subs	r3, r3, r2
   152b0:	08db      	lsrs	r3, r3, #3
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   152b2:	f04f 0200 	mov.w	r2, #0
   152b6:	2101      	movs	r1, #1
   152b8:	f361 0202 	bfi	r2, r1, #0, #3
   152bc:	f36f 02c5 	bfc	r2, #3, #3
   152c0:	f363 128f 	bfi	r2, r3, #6, #10
   152c4:	7801      	ldrb	r1, [r0, #0]
   152c6:	4804      	ldr	r0, [pc, #16]	; (152d8 <hci_hardware_error+0x38>)
   152c8:	f7fb ff22 	bl	11110 <log_1>
}
   152cc:	bd08      	pop	{r3, pc}
   152ce:	bf00      	nop
   152d0:	00029f0c 	.word	0x00029f0c
   152d4:	00029ecc 	.word	0x00029ecc
   152d8:	0002b4a8 	.word	0x0002b4a8

000152dc <hci_vendor_event>:
{
   152dc:	b510      	push	{r4, lr}
   152de:	4b0c      	ldr	r3, [pc, #48]	; (15310 <hci_vendor_event+0x34>)
   152e0:	4a0c      	ldr	r2, [pc, #48]	; (15314 <hci_vendor_event+0x38>)
   152e2:	1a9b      	subs	r3, r3, r2
   152e4:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unhandled vendor-specific event: %s",
   152e6:	f04f 0400 	mov.w	r4, #0
   152ea:	2202      	movs	r2, #2
   152ec:	f362 0402 	bfi	r4, r2, #0, #3
   152f0:	f36f 04c5 	bfc	r4, #3, #3
   152f4:	f363 148f 	bfi	r4, r3, #6, #10
   152f8:	8981      	ldrh	r1, [r0, #12]
   152fa:	6880      	ldr	r0, [r0, #8]
   152fc:	f7fe ffa4 	bl	14248 <bt_hex_real>
   15300:	f7fb fd8c 	bl	10e1c <z_log_strdup>
   15304:	4601      	mov	r1, r0
   15306:	4622      	mov	r2, r4
   15308:	4803      	ldr	r0, [pc, #12]	; (15318 <hci_vendor_event+0x3c>)
   1530a:	f7fb ff01 	bl	11110 <log_1>
}
   1530e:	bd10      	pop	{r4, pc}
   15310:	00029f0c 	.word	0x00029f0c
   15314:	00029ecc 	.word	0x00029ecc
   15318:	0002b4cc 	.word	0x0002b4cc

0001531c <bt_dev_show_info>:
{
   1531c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15320:	b086      	sub	sp, #24
   15322:	4b3b      	ldr	r3, [pc, #236]	; (15410 <bt_dev_show_info+0xf4>)
   15324:	4a3b      	ldr	r2, [pc, #236]	; (15414 <bt_dev_show_info+0xf8>)
   15326:	1a9b      	subs	r3, r3, r2
   15328:	08db      	lsrs	r3, r3, #3
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   1532a:	f04f 0400 	mov.w	r4, #0
   1532e:	2203      	movs	r2, #3
   15330:	f362 0402 	bfi	r4, r2, #0, #3
   15334:	f36f 04c5 	bfc	r4, #3, #3
   15338:	f363 148f 	bfi	r4, r3, #6, #10
   1533c:	4b36      	ldr	r3, [pc, #216]	; (15418 <bt_dev_show_info+0xfc>)
   1533e:	79db      	ldrb	r3, [r3, #7]
   15340:	2b01      	cmp	r3, #1
   15342:	d92b      	bls.n	1539c <bt_dev_show_info+0x80>
   15344:	4e35      	ldr	r6, [pc, #212]	; (1541c <bt_dev_show_info+0x100>)
   15346:	4834      	ldr	r0, [pc, #208]	; (15418 <bt_dev_show_info+0xfc>)
   15348:	f7fe ffa6 	bl	14298 <bt_addr_le_str_real>
   1534c:	f7fb fd66 	bl	10e1c <z_log_strdup>
   15350:	4602      	mov	r2, r0
   15352:	4623      	mov	r3, r4
   15354:	4631      	mov	r1, r6
   15356:	4832      	ldr	r0, [pc, #200]	; (15420 <bt_dev_show_info+0x104>)
   15358:	f7fb ff10 	bl	1117c <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
   1535c:	2401      	movs	r4, #1
   1535e:	4b2e      	ldr	r3, [pc, #184]	; (15418 <bt_dev_show_info+0xfc>)
   15360:	79db      	ldrb	r3, [r3, #7]
   15362:	42a3      	cmp	r3, r4
   15364:	dd1c      	ble.n	153a0 <bt_dev_show_info+0x84>
   15366:	4b2a      	ldr	r3, [pc, #168]	; (15410 <bt_dev_show_info+0xf4>)
   15368:	4a2a      	ldr	r2, [pc, #168]	; (15414 <bt_dev_show_info+0xf8>)
   1536a:	1a9b      	subs	r3, r3, r2
   1536c:	08db      	lsrs	r3, r3, #3
		BT_INFO("Identity[%d]: %s",
   1536e:	2203      	movs	r2, #3
   15370:	f362 0502 	bfi	r5, r2, #0, #3
   15374:	f36f 05c5 	bfc	r5, #3, #3
   15378:	f363 158f 	bfi	r5, r3, #6, #10
   1537c:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   15380:	4825      	ldr	r0, [pc, #148]	; (15418 <bt_dev_show_info+0xfc>)
   15382:	4418      	add	r0, r3
   15384:	f7fe ff88 	bl	14298 <bt_addr_le_str_real>
   15388:	f7fb fd48 	bl	10e1c <z_log_strdup>
   1538c:	4602      	mov	r2, r0
   1538e:	462b      	mov	r3, r5
   15390:	4621      	mov	r1, r4
   15392:	4824      	ldr	r0, [pc, #144]	; (15424 <bt_dev_show_info+0x108>)
   15394:	f7fb fef2 	bl	1117c <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
   15398:	3401      	adds	r4, #1
   1539a:	e7e0      	b.n	1535e <bt_dev_show_info+0x42>
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   1539c:	4e22      	ldr	r6, [pc, #136]	; (15428 <bt_dev_show_info+0x10c>)
   1539e:	e7d2      	b.n	15346 <bt_dev_show_info+0x2a>
   153a0:	4c1b      	ldr	r4, [pc, #108]	; (15410 <bt_dev_show_info+0xf4>)
   153a2:	4b1c      	ldr	r3, [pc, #112]	; (15414 <bt_dev_show_info+0xf8>)
   153a4:	1ae4      	subs	r4, r4, r3
   153a6:	08e4      	lsrs	r4, r4, #3
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
   153a8:	2703      	movs	r7, #3
   153aa:	f04f 0500 	mov.w	r5, #0
   153ae:	f367 0502 	bfi	r5, r7, #0, #3
   153b2:	f36f 05c5 	bfc	r5, #3, #3
   153b6:	f364 158f 	bfi	r5, r4, #6, #10
   153ba:	4e17      	ldr	r6, [pc, #92]	; (15418 <bt_dev_show_info+0xfc>)
   153bc:	f896 8034 	ldrb.w	r8, [r6, #52]	; 0x34
   153c0:	4640      	mov	r0, r8
   153c2:	f7ff fc53 	bl	14c6c <ver_str>
   153c6:	9002      	str	r0, [sp, #8]
   153c8:	f8cd 800c 	str.w	r8, [sp, #12]
   153cc:	8ef3      	ldrh	r3, [r6, #54]	; 0x36
   153ce:	9304      	str	r3, [sp, #16]
   153d0:	8f73      	ldrh	r3, [r6, #58]	; 0x3a
   153d2:	9305      	str	r3, [sp, #20]
   153d4:	462b      	mov	r3, r5
   153d6:	2204      	movs	r2, #4
   153d8:	a902      	add	r1, sp, #8
   153da:	4814      	ldr	r0, [pc, #80]	; (1542c <bt_dev_show_info+0x110>)
   153dc:	f7fb ff0a 	bl	111f4 <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
   153e0:	f04f 0500 	mov.w	r5, #0
   153e4:	f367 0502 	bfi	r5, r7, #0, #3
   153e8:	f36f 05c5 	bfc	r5, #3, #3
   153ec:	f364 158f 	bfi	r5, r4, #6, #10
   153f0:	f896 4035 	ldrb.w	r4, [r6, #53]	; 0x35
   153f4:	4620      	mov	r0, r4
   153f6:	f7ff fc39 	bl	14c6c <ver_str>
   153fa:	4601      	mov	r1, r0
   153fc:	f8ad 5000 	strh.w	r5, [sp]
   15400:	8f33      	ldrh	r3, [r6, #56]	; 0x38
   15402:	4622      	mov	r2, r4
   15404:	480a      	ldr	r0, [pc, #40]	; (15430 <bt_dev_show_info+0x114>)
   15406:	f7fb fe45 	bl	11094 <log_3>
}
   1540a:	b006      	add	sp, #24
   1540c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15410:	00029f0c 	.word	0x00029f0c
   15414:	00029ecc 	.word	0x00029ecc
   15418:	200002a0 	.word	0x200002a0
   1541c:	0002b4f0 	.word	0x0002b4f0
   15420:	0002b4f4 	.word	0x0002b4f4
   15424:	0002b504 	.word	0x0002b504
   15428:	0002a1d4 	.word	0x0002a1d4
   1542c:	0002b518 	.word	0x0002b518
   15430:	0002b558 	.word	0x0002b558

00015434 <hci_acl>:
{
   15434:	b570      	push	{r4, r5, r6, lr}
   15436:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   15438:	8983      	ldrh	r3, [r0, #12]
   1543a:	2b03      	cmp	r3, #3
   1543c:	d923      	bls.n	15486 <hci_acl+0x52>
   1543e:	2104      	movs	r1, #4
   15440:	f104 0008 	add.w	r0, r4, #8
   15444:	f012 ff9d 	bl	28382 <net_buf_simple_pull_mem>
	len = sys_le16_to_cpu(hdr->len);
   15448:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   1544a:	8800      	ldrh	r0, [r0, #0]
	flags = bt_acl_flags(handle);
   1544c:	0b06      	lsrs	r6, r0, #12
	acl(buf)->handle = bt_acl_handle(handle);
   1544e:	f3c0 000b 	ubfx	r0, r0, #0, #12
   15452:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   15454:	23ff      	movs	r3, #255	; 0xff
   15456:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
   15458:	89a1      	ldrh	r1, [r4, #12]
   1545a:	4291      	cmp	r1, r2
   1545c:	d021      	beq.n	154a2 <hci_acl+0x6e>
   1545e:	4823      	ldr	r0, [pc, #140]	; (154ec <hci_acl+0xb8>)
   15460:	4b23      	ldr	r3, [pc, #140]	; (154f0 <hci_acl+0xbc>)
   15462:	1ac0      	subs	r0, r0, r3
   15464:	08c0      	lsrs	r0, r0, #3
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   15466:	f04f 0300 	mov.w	r3, #0
   1546a:	2501      	movs	r5, #1
   1546c:	f365 0302 	bfi	r3, r5, #0, #3
   15470:	f36f 03c5 	bfc	r3, #3, #3
   15474:	f360 138f 	bfi	r3, r0, #6, #10
   15478:	481e      	ldr	r0, [pc, #120]	; (154f4 <hci_acl+0xc0>)
   1547a:	f7fb fe7f 	bl	1117c <log_2>
		net_buf_unref(buf);
   1547e:	4620      	mov	r0, r4
   15480:	f012 ff0d 	bl	2829e <net_buf_unref>
}
   15484:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   15486:	f240 1379 	movw	r3, #377	; 0x179
   1548a:	4a1b      	ldr	r2, [pc, #108]	; (154f8 <hci_acl+0xc4>)
   1548c:	491b      	ldr	r1, [pc, #108]	; (154fc <hci_acl+0xc8>)
   1548e:	481c      	ldr	r0, [pc, #112]	; (15500 <hci_acl+0xcc>)
   15490:	f00c f87c 	bl	2158c <printk>
   15494:	4040      	eors	r0, r0
   15496:	f380 8811 	msr	BASEPRI, r0
   1549a:	f04f 0003 	mov.w	r0, #3
   1549e:	df02      	svc	2
   154a0:	e7cd      	b.n	1543e <hci_acl+0xa>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   154a2:	f003 f871 	bl	18588 <bt_conn_lookup_handle>
	if (!conn) {
   154a6:	4605      	mov	r5, r0
   154a8:	b158      	cbz	r0, 154c2 <hci_acl+0x8e>
	acl(buf)->index = bt_conn_index(conn);
   154aa:	f003 fbe9 	bl	18c80 <bt_conn_index>
   154ae:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   154b0:	4632      	mov	r2, r6
   154b2:	4621      	mov	r1, r4
   154b4:	4628      	mov	r0, r5
   154b6:	f002 ff27 	bl	18308 <bt_conn_recv>
	bt_conn_unref(conn);
   154ba:	4628      	mov	r0, r5
   154bc:	f010 fa1c 	bl	258f8 <bt_conn_unref>
   154c0:	e7e0      	b.n	15484 <hci_acl+0x50>
   154c2:	4b0a      	ldr	r3, [pc, #40]	; (154ec <hci_acl+0xb8>)
   154c4:	4a0a      	ldr	r2, [pc, #40]	; (154f0 <hci_acl+0xbc>)
   154c6:	1a9b      	subs	r3, r3, r2
   154c8:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   154ca:	f04f 0200 	mov.w	r2, #0
   154ce:	2101      	movs	r1, #1
   154d0:	f361 0202 	bfi	r2, r1, #0, #3
   154d4:	f36f 02c5 	bfc	r2, #3, #3
   154d8:	f363 128f 	bfi	r2, r3, #6, #10
   154dc:	8ae1      	ldrh	r1, [r4, #22]
   154de:	4809      	ldr	r0, [pc, #36]	; (15504 <hci_acl+0xd0>)
   154e0:	f7fb fe16 	bl	11110 <log_1>
		net_buf_unref(buf);
   154e4:	4620      	mov	r0, r4
   154e6:	f012 feda 	bl	2829e <net_buf_unref>
		return;
   154ea:	e7cb      	b.n	15484 <hci_acl+0x50>
   154ec:	00029f0c 	.word	0x00029f0c
   154f0:	00029ecc 	.word	0x00029ecc
   154f4:	0002b5f0 	.word	0x0002b5f0
   154f8:	0002b580 	.word	0x0002b580
   154fc:	0002b5b4 	.word	0x0002b5b4
   15500:	0002b5d0 	.word	0x0002b5d0
   15504:	0002b614 	.word	0x0002b614

00015508 <le_conn_update_complete>:
{
   15508:	b570      	push	{r4, r5, r6, lr}
   1550a:	b082      	sub	sp, #8
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   1550c:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   1550e:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	conn = bt_conn_lookup_handle(handle);
   15512:	4630      	mov	r0, r6
   15514:	f003 f838 	bl	18588 <bt_conn_lookup_handle>
	if (!conn) {
   15518:	b148      	cbz	r0, 1552e <le_conn_update_complete+0x26>
   1551a:	4605      	mov	r5, r0
	if (!evt->status) {
   1551c:	7823      	ldrb	r3, [r4, #0]
   1551e:	b1c3      	cbz	r3, 15552 <le_conn_update_complete+0x4a>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   15520:	2b1a      	cmp	r3, #26
   15522:	d025      	beq.n	15570 <le_conn_update_complete+0x68>
	bt_conn_unref(conn);
   15524:	4628      	mov	r0, r5
   15526:	f010 f9e7 	bl	258f8 <bt_conn_unref>
}
   1552a:	b002      	add	sp, #8
   1552c:	bd70      	pop	{r4, r5, r6, pc}
   1552e:	4b24      	ldr	r3, [pc, #144]	; (155c0 <le_conn_update_complete+0xb8>)
   15530:	4a24      	ldr	r2, [pc, #144]	; (155c4 <le_conn_update_complete+0xbc>)
   15532:	1a9b      	subs	r3, r3, r2
   15534:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15536:	f04f 0200 	mov.w	r2, #0
   1553a:	2101      	movs	r1, #1
   1553c:	f361 0202 	bfi	r2, r1, #0, #3
   15540:	f36f 02c5 	bfc	r2, #3, #3
   15544:	f363 128f 	bfi	r2, r3, #6, #10
   15548:	4631      	mov	r1, r6
   1554a:	481f      	ldr	r0, [pc, #124]	; (155c8 <le_conn_update_complete+0xc0>)
   1554c:	f7fb fde0 	bl	11110 <log_1>
		return;
   15550:	e7eb      	b.n	1552a <le_conn_update_complete+0x22>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   15552:	f8b4 3003 	ldrh.w	r3, [r4, #3]
   15556:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   1555a:	f8b4 3005 	ldrh.w	r3, [r4, #5]
   1555e:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   15562:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   15566:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   1556a:	f002 fe1d 	bl	181a8 <notify_le_param_updated>
   1556e:	e7d9      	b.n	15524 <le_conn_update_complete+0x1c>
		   conn->role == BT_HCI_ROLE_SLAVE &&
   15570:	78c3      	ldrb	r3, [r0, #3]
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   15572:	2b01      	cmp	r3, #1
   15574:	d1d6      	bne.n	15524 <le_conn_update_complete+0x1c>
		   !atomic_test_and_set_bit(conn->flags,
   15576:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15578:	f3bf 8f5b 	dmb	ish
   1557c:	e853 2f00 	ldrex	r2, [r3]
   15580:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
   15584:	e843 1000 	strex	r0, r1, [r3]
   15588:	2800      	cmp	r0, #0
   1558a:	d1f7      	bne.n	1557c <le_conn_update_complete+0x74>
   1558c:	f3bf 8f5b 	dmb	ish
		   conn->role == BT_HCI_ROLE_SLAVE &&
   15590:	f412 6f80 	tst.w	r2, #1024	; 0x400
   15594:	d1c6      	bne.n	15524 <le_conn_update_complete+0x1c>
		param.interval_min = conn->le.interval_min;
   15596:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
   1559a:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
   1559e:	f8b5 30a2 	ldrh.w	r3, [r5, #162]	; 0xa2
   155a2:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
   155a6:	f8b5 30a8 	ldrh.w	r3, [r5, #168]	; 0xa8
   155aa:	f8ad 3004 	strh.w	r3, [sp, #4]
		param.timeout = conn->le.pending_timeout;
   155ae:	f8b5 30aa 	ldrh.w	r3, [r5, #170]	; 0xaa
   155b2:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
   155b6:	4669      	mov	r1, sp
   155b8:	4628      	mov	r0, r5
   155ba:	f010 fb42 	bl	25c42 <bt_l2cap_update_conn_param>
   155be:	e7b1      	b.n	15524 <le_conn_update_complete+0x1c>
   155c0:	00029f0c 	.word	0x00029f0c
   155c4:	00029ecc 	.word	0x00029ecc
   155c8:	0002b3e4 	.word	0x0002b3e4

000155cc <hci_le_meta_event>:
{
   155cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   155ce:	b083      	sub	sp, #12
   155d0:	4604      	mov	r4, r0
   155d2:	2101      	movs	r1, #1
   155d4:	3008      	adds	r0, #8
   155d6:	f012 fed4 	bl	28382 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   155da:	7805      	ldrb	r5, [r0, #0]
	for (i = 0; i < num_handlers; i++) {
   155dc:	2300      	movs	r3, #0
   155de:	2b09      	cmp	r3, #9
   155e0:	d823      	bhi.n	1562a <hci_le_meta_event+0x5e>
		const struct event_handler *handler = &handlers[i];
   155e2:	4a20      	ldr	r2, [pc, #128]	; (15664 <hci_le_meta_event+0x98>)
   155e4:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
		if (handler->event != event) {
   155e8:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   155ec:	4295      	cmp	r5, r2
   155ee:	d108      	bne.n	15602 <hci_le_meta_event+0x36>
		if (buf->len < handler->min_len) {
   155f0:	89a1      	ldrh	r1, [r4, #12]
   155f2:	7843      	ldrb	r3, [r0, #1]
   155f4:	4299      	cmp	r1, r3
   155f6:	d306      	bcc.n	15606 <hci_le_meta_event+0x3a>
		handler->handler(buf);
   155f8:	6843      	ldr	r3, [r0, #4]
   155fa:	4620      	mov	r0, r4
   155fc:	4798      	blx	r3
}
   155fe:	b003      	add	sp, #12
   15600:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < num_handlers; i++) {
   15602:	3301      	adds	r3, #1
   15604:	e7eb      	b.n	155de <hci_le_meta_event+0x12>
   15606:	4a18      	ldr	r2, [pc, #96]	; (15668 <hci_le_meta_event+0x9c>)
   15608:	4b18      	ldr	r3, [pc, #96]	; (1566c <hci_le_meta_event+0xa0>)
   1560a:	1ad2      	subs	r2, r2, r3
   1560c:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Too small (%u bytes) event 0x%02x",
   1560e:	f04f 0300 	mov.w	r3, #0
   15612:	2001      	movs	r0, #1
   15614:	f360 0302 	bfi	r3, r0, #0, #3
   15618:	f36f 03c5 	bfc	r3, #3, #3
   1561c:	f362 138f 	bfi	r3, r2, #6, #10
   15620:	462a      	mov	r2, r5
   15622:	4813      	ldr	r0, [pc, #76]	; (15670 <hci_le_meta_event+0xa4>)
   15624:	f7fb fdaa 	bl	1117c <log_2>
			return;
   15628:	e7e9      	b.n	155fe <hci_le_meta_event+0x32>
   1562a:	4b0f      	ldr	r3, [pc, #60]	; (15668 <hci_le_meta_event+0x9c>)
   1562c:	4a0f      	ldr	r2, [pc, #60]	; (1566c <hci_le_meta_event+0xa0>)
   1562e:	1a9b      	subs	r3, r3, r2
   15630:	08db      	lsrs	r3, r3, #3
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   15632:	f04f 0600 	mov.w	r6, #0
   15636:	2202      	movs	r2, #2
   15638:	f362 0602 	bfi	r6, r2, #0, #3
   1563c:	f36f 06c5 	bfc	r6, #3, #3
   15640:	f363 168f 	bfi	r6, r3, #6, #10
   15644:	89a7      	ldrh	r7, [r4, #12]
   15646:	4639      	mov	r1, r7
   15648:	68a0      	ldr	r0, [r4, #8]
   1564a:	f7fe fdfd 	bl	14248 <bt_hex_real>
   1564e:	f7fb fbe5 	bl	10e1c <z_log_strdup>
   15652:	4603      	mov	r3, r0
   15654:	f8ad 6000 	strh.w	r6, [sp]
   15658:	463a      	mov	r2, r7
   1565a:	4629      	mov	r1, r5
   1565c:	4805      	ldr	r0, [pc, #20]	; (15674 <hci_le_meta_event+0xa8>)
   1565e:	f7fb fd19 	bl	11094 <log_3>
}
   15662:	e7cc      	b.n	155fe <hci_le_meta_event+0x32>
   15664:	0002ba10 	.word	0x0002ba10
   15668:	00029f0c 	.word	0x00029f0c
   1566c:	00029ecc 	.word	0x00029ecc
   15670:	0002b638 	.word	0x0002b638
   15674:	0002b65c 	.word	0x0002b65c

00015678 <hci_event>:
{
   15678:	b5f0      	push	{r4, r5, r6, r7, lr}
   1567a:	b083      	sub	sp, #12
   1567c:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1567e:	8983      	ldrh	r3, [r0, #12]
   15680:	2b01      	cmp	r3, #1
   15682:	d916      	bls.n	156b2 <hci_event+0x3a>
   15684:	2102      	movs	r1, #2
   15686:	f104 0008 	add.w	r0, r4, #8
   1568a:	f012 fe7a 	bl	28382 <net_buf_simple_pull_mem>
   1568e:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   15690:	7803      	ldrb	r3, [r0, #0]
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   15692:	3b05      	subs	r3, #5
   15694:	2b15      	cmp	r3, #21
   15696:	d81c      	bhi.n	156d2 <hci_event+0x5a>
   15698:	e8df f003 	tbb	[pc, r3]
   1569c:	1b1b1b19 	.word	0x1b1b1b19
   156a0:	1b1b1b1b 	.word	0x1b1b1b1b
   156a4:	1b36361b 	.word	0x1b36361b
   156a8:	1b361b1b 	.word	0x1b361b1b
   156ac:	1b1b1b1b 	.word	0x1b1b1b1b
   156b0:	361b      	.short	0x361b
	BT_ASSERT(buf->len >= sizeof(*hdr));
   156b2:	f640 03f9 	movw	r3, #2297	; 0x8f9
   156b6:	4a35      	ldr	r2, [pc, #212]	; (1578c <hci_event+0x114>)
   156b8:	4935      	ldr	r1, [pc, #212]	; (15790 <hci_event+0x118>)
   156ba:	4836      	ldr	r0, [pc, #216]	; (15794 <hci_event+0x11c>)
   156bc:	f00b ff66 	bl	2158c <printk>
   156c0:	4040      	eors	r0, r0
   156c2:	f380 8811 	msr	BASEPRI, r0
   156c6:	f04f 0003 	mov.w	r0, #3
   156ca:	df02      	svc	2
   156cc:	e7da      	b.n	15684 <hci_event+0xc>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   156ce:	2303      	movs	r3, #3
   156d0:	e000      	b.n	156d4 <hci_event+0x5c>
#endif /* defined(CONFIG_BT_CONN) */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   156d2:	2302      	movs	r3, #2
   156d4:	f013 0f02 	tst.w	r3, #2
   156d8:	d018      	beq.n	1570c <hci_event+0x94>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   156da:	782d      	ldrb	r5, [r5, #0]
	for (i = 0; i < num_handlers; i++) {
   156dc:	2300      	movs	r3, #0
   156de:	2b05      	cmp	r3, #5
   156e0:	d836      	bhi.n	15750 <hci_event+0xd8>
		const struct event_handler *handler = &handlers[i];
   156e2:	4a2d      	ldr	r2, [pc, #180]	; (15798 <hci_event+0x120>)
   156e4:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
		if (handler->event != event) {
   156e8:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   156ec:	4295      	cmp	r5, r2
   156ee:	d11b      	bne.n	15728 <hci_event+0xb0>
		if (buf->len < handler->min_len) {
   156f0:	89a1      	ldrh	r1, [r4, #12]
   156f2:	7843      	ldrb	r3, [r0, #1]
   156f4:	4299      	cmp	r1, r3
   156f6:	d319      	bcc.n	1572c <hci_event+0xb4>
		handler->handler(buf);
   156f8:	6843      	ldr	r3, [r0, #4]
   156fa:	4620      	mov	r0, r4
   156fc:	4798      	blx	r3
	net_buf_unref(buf);
   156fe:	4620      	mov	r0, r4
   15700:	f012 fdcd 	bl	2829e <net_buf_unref>
}
   15704:	b003      	add	sp, #12
   15706:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   15708:	2301      	movs	r3, #1
   1570a:	e7e3      	b.n	156d4 <hci_event+0x5c>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   1570c:	f640 03fd 	movw	r3, #2301	; 0x8fd
   15710:	4a1e      	ldr	r2, [pc, #120]	; (1578c <hci_event+0x114>)
   15712:	4922      	ldr	r1, [pc, #136]	; (1579c <hci_event+0x124>)
   15714:	481f      	ldr	r0, [pc, #124]	; (15794 <hci_event+0x11c>)
   15716:	f00b ff39 	bl	2158c <printk>
   1571a:	4040      	eors	r0, r0
   1571c:	f380 8811 	msr	BASEPRI, r0
   15720:	f04f 0003 	mov.w	r0, #3
   15724:	df02      	svc	2
   15726:	e7d8      	b.n	156da <hci_event+0x62>
	for (i = 0; i < num_handlers; i++) {
   15728:	3301      	adds	r3, #1
   1572a:	e7d8      	b.n	156de <hci_event+0x66>
   1572c:	4a1c      	ldr	r2, [pc, #112]	; (157a0 <hci_event+0x128>)
   1572e:	4b1d      	ldr	r3, [pc, #116]	; (157a4 <hci_event+0x12c>)
   15730:	1ad2      	subs	r2, r2, r3
   15732:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Too small (%u bytes) event 0x%02x",
   15734:	f04f 0300 	mov.w	r3, #0
   15738:	2001      	movs	r0, #1
   1573a:	f360 0302 	bfi	r3, r0, #0, #3
   1573e:	f36f 03c5 	bfc	r3, #3, #3
   15742:	f362 138f 	bfi	r3, r2, #6, #10
   15746:	462a      	mov	r2, r5
   15748:	4817      	ldr	r0, [pc, #92]	; (157a8 <hci_event+0x130>)
   1574a:	f7fb fd17 	bl	1117c <log_2>
			return;
   1574e:	e7d6      	b.n	156fe <hci_event+0x86>
   15750:	4b13      	ldr	r3, [pc, #76]	; (157a0 <hci_event+0x128>)
   15752:	4a14      	ldr	r2, [pc, #80]	; (157a4 <hci_event+0x12c>)
   15754:	1a9b      	subs	r3, r3, r2
   15756:	08db      	lsrs	r3, r3, #3
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   15758:	f04f 0600 	mov.w	r6, #0
   1575c:	2202      	movs	r2, #2
   1575e:	f362 0602 	bfi	r6, r2, #0, #3
   15762:	f36f 06c5 	bfc	r6, #3, #3
   15766:	f363 168f 	bfi	r6, r3, #6, #10
   1576a:	89a7      	ldrh	r7, [r4, #12]
   1576c:	4639      	mov	r1, r7
   1576e:	68a0      	ldr	r0, [r4, #8]
   15770:	f7fe fd6a 	bl	14248 <bt_hex_real>
   15774:	f7fb fb52 	bl	10e1c <z_log_strdup>
   15778:	4603      	mov	r3, r0
   1577a:	f8ad 6000 	strh.w	r6, [sp]
   1577e:	463a      	mov	r2, r7
   15780:	4629      	mov	r1, r5
   15782:	480a      	ldr	r0, [pc, #40]	; (157ac <hci_event+0x134>)
   15784:	f7fb fc86 	bl	11094 <log_3>
   15788:	e7b9      	b.n	156fe <hci_event+0x86>
   1578a:	bf00      	nop
   1578c:	0002b580 	.word	0x0002b580
   15790:	0002b5b4 	.word	0x0002b5b4
   15794:	0002b5d0 	.word	0x0002b5d0
   15798:	0002ba80 	.word	0x0002ba80
   1579c:	0002b680 	.word	0x0002b680
   157a0:	00029f0c 	.word	0x00029f0c
   157a4:	00029ecc 	.word	0x00029ecc
   157a8:	0002b638 	.word	0x0002b638
   157ac:	0002b65c 	.word	0x0002b65c

000157b0 <hci_rx_thread>:
	}
}

#if !defined(CONFIG_BT_RECV_IS_RX_THREAD)
static void hci_rx_thread(void)
{
   157b0:	b538      	push	{r3, r4, r5, lr}
   157b2:	e003      	b.n	157bc <hci_rx_thread+0xc>
		case BT_BUF_ISO_IN:
			hci_iso(buf);
			break;
#endif /* CONFIG_BT_ISO */
		case BT_BUF_EVT:
			hci_event(buf);
   157b4:	f7ff ff60 	bl	15678 <hci_event>
	z_impl_k_yield();
   157b8:	f00b f800 	bl	207bc <z_impl_k_yield>
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   157bc:	f04f 32ff 	mov.w	r2, #4294967295
   157c0:	f04f 33ff 	mov.w	r3, #4294967295
   157c4:	480f      	ldr	r0, [pc, #60]	; (15804 <hci_rx_thread+0x54>)
   157c6:	f012 fd3e 	bl	28246 <net_buf_get>
   157ca:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   157cc:	7d01      	ldrb	r1, [r0, #20]
		switch (bt_buf_get_type(buf)) {
   157ce:	2901      	cmp	r1, #1
   157d0:	d0f0      	beq.n	157b4 <hci_rx_thread+0x4>
   157d2:	2903      	cmp	r1, #3
   157d4:	d102      	bne.n	157dc <hci_rx_thread+0x2c>
			hci_acl(buf);
   157d6:	f7ff fe2d 	bl	15434 <hci_acl>
			break;
   157da:	e7ed      	b.n	157b8 <hci_rx_thread+0x8>
   157dc:	4b0a      	ldr	r3, [pc, #40]	; (15808 <hci_rx_thread+0x58>)
   157de:	4a0b      	ldr	r2, [pc, #44]	; (1580c <hci_rx_thread+0x5c>)
   157e0:	1a9b      	subs	r3, r3, r2
   157e2:	08db      	lsrs	r3, r3, #3
			break;
		default:
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   157e4:	2201      	movs	r2, #1
   157e6:	f362 0502 	bfi	r5, r2, #0, #3
   157ea:	f36f 05c5 	bfc	r5, #3, #3
   157ee:	f363 158f 	bfi	r5, r3, #6, #10
   157f2:	462a      	mov	r2, r5
   157f4:	4806      	ldr	r0, [pc, #24]	; (15810 <hci_rx_thread+0x60>)
   157f6:	f7fb fc8b 	bl	11110 <log_1>
			net_buf_unref(buf);
   157fa:	4620      	mov	r0, r4
   157fc:	f012 fd4f 	bl	2829e <net_buf_unref>
			break;
   15800:	e7da      	b.n	157b8 <hci_rx_thread+0x8>
   15802:	bf00      	nop
   15804:	200003ac 	.word	0x200003ac
   15808:	00029f0c 	.word	0x00029f0c
   1580c:	00029ecc 	.word	0x00029ecc
   15810:	0002b6b0 	.word	0x0002b6b0

00015814 <bt_hci_cmd_state_set_init>:
{
   15814:	b510      	push	{r4, lr}
   15816:	460c      	mov	r4, r1
	state->target = target;
   15818:	600a      	str	r2, [r1, #0]
	state->bit = bit;
   1581a:	604b      	str	r3, [r1, #4]
	state->val = val;
   1581c:	f89d 3008 	ldrb.w	r3, [sp, #8]
   15820:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
   15822:	f008 fa8d 	bl	1dd40 <net_buf_id>
   15826:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1582a:	4b02      	ldr	r3, [pc, #8]	; (15834 <bt_hci_cmd_state_set_init+0x20>)
   1582c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   15830:	6044      	str	r4, [r0, #4]
}
   15832:	bd10      	pop	{r4, pc}
   15834:	200026a4 	.word	0x200026a4

00015838 <bt_hci_cmd_create>:
{
   15838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1583c:	4682      	mov	sl, r0
   1583e:	460e      	mov	r6, r1
	return net_buf_alloc_fixed(pool, timeout);
   15840:	f04f 32ff 	mov.w	r2, #4294967295
   15844:	f04f 33ff 	mov.w	r3, #4294967295
   15848:	4817      	ldr	r0, [pc, #92]	; (158a8 <bt_hci_cmd_create+0x70>)
   1584a:	f012 fcf5 	bl	28238 <net_buf_alloc_fixed>
   1584e:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   15850:	f100 0808 	add.w	r8, r0, #8
   15854:	2100      	movs	r1, #0
   15856:	4640      	mov	r0, r8
   15858:	f012 fd10 	bl	2827c <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1585c:	2700      	movs	r7, #0
   1585e:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
   15860:	4620      	mov	r0, r4
   15862:	f008 fa6d 	bl	1dd40 <net_buf_id>
   15866:	4d11      	ldr	r5, [pc, #68]	; (158ac <bt_hci_cmd_create+0x74>)
   15868:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1586c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   15870:	f8a0 a002 	strh.w	sl, [r0, #2]
	cmd(buf)->sync = NULL;
   15874:	4620      	mov	r0, r4
   15876:	f008 fa63 	bl	1dd40 <net_buf_id>
   1587a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1587e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   15882:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
   15884:	4620      	mov	r0, r4
   15886:	f008 fa5b 	bl	1dd40 <net_buf_id>
   1588a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1588e:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   15892:	606f      	str	r7, [r5, #4]
	return net_buf_simple_add(&buf->b, len);
   15894:	2103      	movs	r1, #3
   15896:	4640      	mov	r0, r8
   15898:	f012 fd4b 	bl	28332 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   1589c:	f8a0 a000 	strh.w	sl, [r0]
	hdr->param_len = param_len;
   158a0:	7086      	strb	r6, [r0, #2]
}
   158a2:	4620      	mov	r0, r4
   158a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   158a8:	2000087c 	.word	0x2000087c
   158ac:	200026a4 	.word	0x200026a4

000158b0 <bt_hci_cmd_send_sync>:
{
   158b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   158b2:	b087      	sub	sp, #28
   158b4:	4606      	mov	r6, r0
   158b6:	4615      	mov	r5, r2
	if (!buf) {
   158b8:	460c      	mov	r4, r1
   158ba:	b361      	cbz	r1, 15916 <bt_hci_cmd_send_sync+0x66>
	return z_impl_k_sem_init(sem, initial_count, limit);
   158bc:	2201      	movs	r2, #1
   158be:	2100      	movs	r1, #0
   158c0:	4668      	mov	r0, sp
   158c2:	f013 fd41 	bl	29348 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   158c6:	4620      	mov	r0, r4
   158c8:	f008 fa3a 	bl	1dd40 <net_buf_id>
   158cc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   158d0:	4b2f      	ldr	r3, [pc, #188]	; (15990 <bt_hci_cmd_send_sync+0xe0>)
   158d2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   158d6:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
   158da:	4620      	mov	r0, r4
   158dc:	f012 fd05 	bl	282ea <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   158e0:	4621      	mov	r1, r4
   158e2:	482c      	ldr	r0, [pc, #176]	; (15994 <bt_hci_cmd_send_sync+0xe4>)
   158e4:	f012 fcce 	bl	28284 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   158e8:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   158ec:	2300      	movs	r3, #0
   158ee:	4668      	mov	r0, sp
   158f0:	f00a fa4a 	bl	1fd88 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   158f4:	4607      	mov	r7, r0
   158f6:	b9b0      	cbnz	r0, 15926 <bt_hci_cmd_send_sync+0x76>
	status = cmd(buf)->status;
   158f8:	4620      	mov	r0, r4
   158fa:	f008 fa21 	bl	1dd40 <net_buf_id>
   158fe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   15902:	4b23      	ldr	r3, [pc, #140]	; (15990 <bt_hci_cmd_send_sync+0xe0>)
   15904:	f813 7020 	ldrb.w	r7, [r3, r0, lsl #2]
	if (status) {
   15908:	b9ff      	cbnz	r7, 1594a <bt_hci_cmd_send_sync+0x9a>
	if (rsp) {
   1590a:	2d00      	cmp	r5, #0
   1590c:	d03a      	beq.n	15984 <bt_hci_cmd_send_sync+0xd4>
		*rsp = buf;
   1590e:	602c      	str	r4, [r5, #0]
	return 0;
   15910:	2000      	movs	r0, #0
}
   15912:	b007      	add	sp, #28
   15914:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buf = bt_hci_cmd_create(opcode, 0);
   15916:	f7ff ff8f 	bl	15838 <bt_hci_cmd_create>
		if (!buf) {
   1591a:	4604      	mov	r4, r0
   1591c:	2800      	cmp	r0, #0
   1591e:	d1cd      	bne.n	158bc <bt_hci_cmd_send_sync+0xc>
			return -ENOBUFS;
   15920:	f06f 0068 	mvn.w	r0, #104	; 0x68
   15924:	e7f5      	b.n	15912 <bt_hci_cmd_send_sync+0x62>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   15926:	f240 1333 	movw	r3, #307	; 0x133
   1592a:	4a1b      	ldr	r2, [pc, #108]	; (15998 <bt_hci_cmd_send_sync+0xe8>)
   1592c:	491b      	ldr	r1, [pc, #108]	; (1599c <bt_hci_cmd_send_sync+0xec>)
   1592e:	481c      	ldr	r0, [pc, #112]	; (159a0 <bt_hci_cmd_send_sync+0xf0>)
   15930:	f00b fe2c 	bl	2158c <printk>
   15934:	4639      	mov	r1, r7
   15936:	481b      	ldr	r0, [pc, #108]	; (159a4 <bt_hci_cmd_send_sync+0xf4>)
   15938:	f00b fe28 	bl	2158c <printk>
   1593c:	4040      	eors	r0, r0
   1593e:	f380 8811 	msr	BASEPRI, r0
   15942:	f04f 0003 	mov.w	r0, #3
   15946:	df02      	svc	2
   15948:	e7d6      	b.n	158f8 <bt_hci_cmd_send_sync+0x48>
   1594a:	4a17      	ldr	r2, [pc, #92]	; (159a8 <bt_hci_cmd_send_sync+0xf8>)
   1594c:	4b17      	ldr	r3, [pc, #92]	; (159ac <bt_hci_cmd_send_sync+0xfc>)
   1594e:	1ad2      	subs	r2, r2, r3
   15950:	08d2      	lsrs	r2, r2, #3
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   15952:	f04f 0300 	mov.w	r3, #0
   15956:	2102      	movs	r1, #2
   15958:	f361 0302 	bfi	r3, r1, #0, #3
   1595c:	f36f 03c5 	bfc	r3, #3, #3
   15960:	f362 138f 	bfi	r3, r2, #6, #10
   15964:	463a      	mov	r2, r7
   15966:	4631      	mov	r1, r6
   15968:	4811      	ldr	r0, [pc, #68]	; (159b0 <bt_hci_cmd_send_sync+0x100>)
   1596a:	f7fb fc07 	bl	1117c <log_2>
		net_buf_unref(buf);
   1596e:	4620      	mov	r0, r4
   15970:	f012 fc95 	bl	2829e <net_buf_unref>
		switch (status) {
   15974:	2f09      	cmp	r7, #9
   15976:	d002      	beq.n	1597e <bt_hci_cmd_send_sync+0xce>
			return -EIO;
   15978:	f06f 0004 	mvn.w	r0, #4
   1597c:	e7c9      	b.n	15912 <bt_hci_cmd_send_sync+0x62>
			return -ECONNREFUSED;
   1597e:	f06f 006e 	mvn.w	r0, #110	; 0x6e
   15982:	e7c6      	b.n	15912 <bt_hci_cmd_send_sync+0x62>
		net_buf_unref(buf);
   15984:	4620      	mov	r0, r4
   15986:	f012 fc8a 	bl	2829e <net_buf_unref>
	return 0;
   1598a:	2000      	movs	r0, #0
   1598c:	e7c1      	b.n	15912 <bt_hci_cmd_send_sync+0x62>
   1598e:	bf00      	nop
   15990:	200026a4 	.word	0x200026a4
   15994:	200003c4 	.word	0x200003c4
   15998:	0002b580 	.word	0x0002b580
   1599c:	0002b6c4 	.word	0x0002b6c4
   159a0:	0002b5d0 	.word	0x0002b5d0
   159a4:	0002b6d0 	.word	0x0002b6d0
   159a8:	00029f0c 	.word	0x00029f0c
   159ac:	00029ecc 	.word	0x00029ecc
   159b0:	0002b6f0 	.word	0x0002b6f0

000159b4 <common_init>:
{
   159b4:	b510      	push	{r4, lr}
   159b6:	b082      	sub	sp, #8
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   159b8:	4b22      	ldr	r3, [pc, #136]	; (15a44 <common_init+0x90>)
   159ba:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
   159be:	689b      	ldr	r3, [r3, #8]
   159c0:	f013 0f01 	tst.w	r3, #1
   159c4:	d10d      	bne.n	159e2 <common_init+0x2e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   159c6:	aa01      	add	r2, sp, #4
   159c8:	2100      	movs	r1, #0
   159ca:	f640 4003 	movw	r0, #3075	; 0xc03
   159ce:	f7ff ff6f 	bl	158b0 <bt_hci_cmd_send_sync>
		if (err) {
   159d2:	4604      	mov	r4, r0
   159d4:	b968      	cbnz	r0, 159f2 <common_init+0x3e>
		hci_reset_complete(rsp);
   159d6:	9801      	ldr	r0, [sp, #4]
   159d8:	f7ff f98e 	bl	14cf8 <hci_reset_complete>
		net_buf_unref(rsp);
   159dc:	9801      	ldr	r0, [sp, #4]
   159de:	f012 fc5e 	bl	2829e <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   159e2:	aa01      	add	r2, sp, #4
   159e4:	2100      	movs	r1, #0
   159e6:	f241 0003 	movw	r0, #4099	; 0x1003
   159ea:	f7ff ff61 	bl	158b0 <bt_hci_cmd_send_sync>
	if (err) {
   159ee:	4604      	mov	r4, r0
   159f0:	b110      	cbz	r0, 159f8 <common_init+0x44>
}
   159f2:	4620      	mov	r0, r4
   159f4:	b002      	add	sp, #8
   159f6:	bd10      	pop	{r4, pc}
	read_local_features_complete(rsp);
   159f8:	9801      	ldr	r0, [sp, #4]
   159fa:	f7ff f997 	bl	14d2c <read_local_features_complete>
	net_buf_unref(rsp);
   159fe:	9801      	ldr	r0, [sp, #4]
   15a00:	f012 fc4d 	bl	2829e <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   15a04:	aa01      	add	r2, sp, #4
   15a06:	2100      	movs	r1, #0
   15a08:	f241 0001 	movw	r0, #4097	; 0x1001
   15a0c:	f7ff ff50 	bl	158b0 <bt_hci_cmd_send_sync>
	if (err) {
   15a10:	4604      	mov	r4, r0
   15a12:	2800      	cmp	r0, #0
   15a14:	d1ed      	bne.n	159f2 <common_init+0x3e>
	read_local_ver_complete(rsp);
   15a16:	9801      	ldr	r0, [sp, #4]
   15a18:	f7ff f8ee 	bl	14bf8 <read_local_ver_complete>
	net_buf_unref(rsp);
   15a1c:	9801      	ldr	r0, [sp, #4]
   15a1e:	f012 fc3e 	bl	2829e <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   15a22:	aa01      	add	r2, sp, #4
   15a24:	2100      	movs	r1, #0
   15a26:	f241 0002 	movw	r0, #4098	; 0x1002
   15a2a:	f7ff ff41 	bl	158b0 <bt_hci_cmd_send_sync>
	if (err) {
   15a2e:	4604      	mov	r4, r0
   15a30:	2800      	cmp	r0, #0
   15a32:	d1de      	bne.n	159f2 <common_init+0x3e>
	read_supported_commands_complete(rsp);
   15a34:	9801      	ldr	r0, [sp, #4]
   15a36:	f7ff f98d 	bl	14d54 <read_supported_commands_complete>
	net_buf_unref(rsp);
   15a3a:	9801      	ldr	r0, [sp, #4]
   15a3c:	f012 fc2f 	bl	2829e <net_buf_unref>
	return 0;
   15a40:	e7d7      	b.n	159f2 <common_init+0x3e>
   15a42:	bf00      	nop
   15a44:	200002a0 	.word	0x200002a0

00015a48 <hci_le_read_max_data_len>:
{
   15a48:	b570      	push	{r4, r5, r6, lr}
   15a4a:	b082      	sub	sp, #8
   15a4c:	4605      	mov	r5, r0
   15a4e:	460c      	mov	r4, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   15a50:	aa01      	add	r2, sp, #4
   15a52:	2100      	movs	r1, #0
   15a54:	f242 002f 	movw	r0, #8239	; 0x202f
   15a58:	f7ff ff2a 	bl	158b0 <bt_hci_cmd_send_sync>
	if (err) {
   15a5c:	4606      	mov	r6, r0
   15a5e:	b960      	cbnz	r0, 15a7a <hci_le_read_max_data_len+0x32>
	rp = (void *)rsp->data;
   15a60:	9801      	ldr	r0, [sp, #4]
   15a62:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   15a64:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   15a68:	802a      	strh	r2, [r5, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   15a6a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   15a6e:	8023      	strh	r3, [r4, #0]
	net_buf_unref(rsp);
   15a70:	f012 fc15 	bl	2829e <net_buf_unref>
}
   15a74:	4630      	mov	r0, r6
   15a76:	b002      	add	sp, #8
   15a78:	bd70      	pop	{r4, r5, r6, pc}
   15a7a:	4b08      	ldr	r3, [pc, #32]	; (15a9c <hci_le_read_max_data_len+0x54>)
   15a7c:	4a08      	ldr	r2, [pc, #32]	; (15aa0 <hci_le_read_max_data_len+0x58>)
   15a7e:	1a9b      	subs	r3, r3, r2
   15a80:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to read DLE max data len");
   15a82:	f04f 0100 	mov.w	r1, #0
   15a86:	2201      	movs	r2, #1
   15a88:	f362 0102 	bfi	r1, r2, #0, #3
   15a8c:	f36f 01c5 	bfc	r1, #3, #3
   15a90:	f363 118f 	bfi	r1, r3, #6, #10
   15a94:	4803      	ldr	r0, [pc, #12]	; (15aa4 <hci_le_read_max_data_len+0x5c>)
   15a96:	f7fb fbf1 	bl	1127c <log_0>
		return err;
   15a9a:	e7eb      	b.n	15a74 <hci_le_read_max_data_len+0x2c>
   15a9c:	00029f0c 	.word	0x00029f0c
   15aa0:	00029ecc 	.word	0x00029ecc
   15aa4:	0002b70c 	.word	0x0002b70c

00015aa8 <le_set_event_mask>:
{
   15aa8:	b570      	push	{r4, r5, r6, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   15aaa:	2108      	movs	r1, #8
   15aac:	f242 0001 	movw	r0, #8193	; 0x2001
   15ab0:	f7ff fec2 	bl	15838 <bt_hci_cmd_create>
	if (!buf) {
   15ab4:	2800      	cmp	r0, #0
   15ab6:	d04b      	beq.n	15b50 <le_set_event_mask+0xa8>
   15ab8:	4604      	mov	r4, r0
   15aba:	2108      	movs	r1, #8
   15abc:	4408      	add	r0, r1
   15abe:	f012 fc38 	bl	28332 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
   15ac2:	4b25      	ldr	r3, [pc, #148]	; (15b58 <le_set_event_mask+0xb0>)
   15ac4:	f893 10a0 	ldrb.w	r1, [r3, #160]	; 0xa0
		if ((IS_ENABLED(CONFIG_BT_SMP) &&
   15ac8:	f011 0f40 	tst.w	r1, #64	; 0x40
   15acc:	d03a      	beq.n	15b44 <le_set_event_mask+0x9c>
			mask |= BT_EVT_MASK_LE_ENH_CONN_COMPLETE;
   15ace:	f240 2602 	movw	r6, #514	; 0x202
   15ad2:	2500      	movs	r5, #0
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   15ad4:	f046 030c 	orr.w	r3, r6, #12
   15ad8:	462a      	mov	r2, r5
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   15ada:	f011 0f02 	tst.w	r1, #2
   15ade:	d001      	beq.n	15ae4 <le_set_event_mask+0x3c>
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   15ae0:	f046 032c 	orr.w	r3, r6, #44	; 0x2c
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   15ae4:	f011 0f20 	tst.w	r1, #32
   15ae8:	d001      	beq.n	15aee <le_set_event_mask+0x46>
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   15aea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
		    (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
   15aee:	4d1a      	ldr	r5, [pc, #104]	; (15b58 <le_set_event_mask+0xb0>)
   15af0:	f895 50a1 	ldrb.w	r5, [r5, #161]	; 0xa1
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   15af4:	f015 0f09 	tst.w	r5, #9
   15af8:	d001      	beq.n	15afe <le_set_event_mask+0x56>
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   15afa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   15afe:	f011 0f01 	tst.w	r1, #1
   15b02:	d001      	beq.n	15b08 <le_set_event_mask+0x60>
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
   15b04:	f043 0310 	orr.w	r3, r3, #16
	    (BT_CMD_TEST(bt_dev.supported_commands, 34, 1)) &&
   15b08:	4913      	ldr	r1, [pc, #76]	; (15b58 <le_set_event_mask+0xb0>)
   15b0a:	f891 1066 	ldrb.w	r1, [r1, #102]	; 0x66
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   15b0e:	f001 0106 	and.w	r1, r1, #6
   15b12:	2906      	cmp	r1, #6
   15b14:	d019      	beq.n	15b4a <le_set_event_mask+0xa2>
	dst[0] = val;
   15b16:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   15b18:	f3c3 2107 	ubfx	r1, r3, #8, #8
   15b1c:	7041      	strb	r1, [r0, #1]
	sys_put_le16(val >> 16, &dst[2]);
   15b1e:	0c19      	lsrs	r1, r3, #16
	dst[0] = val;
   15b20:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   15b22:	0e1b      	lsrs	r3, r3, #24
   15b24:	70c3      	strb	r3, [r0, #3]
	dst[0] = val;
   15b26:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   15b28:	f3c2 2307 	ubfx	r3, r2, #8, #8
   15b2c:	7143      	strb	r3, [r0, #5]
	sys_put_le16(val >> 16, &dst[2]);
   15b2e:	0c13      	lsrs	r3, r2, #16
	dst[0] = val;
   15b30:	7183      	strb	r3, [r0, #6]
	dst[1] = val >> 8;
   15b32:	0e12      	lsrs	r2, r2, #24
   15b34:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   15b36:	2200      	movs	r2, #0
   15b38:	4621      	mov	r1, r4
   15b3a:	f242 0001 	movw	r0, #8193	; 0x2001
   15b3e:	f7ff feb7 	bl	158b0 <bt_hci_cmd_send_sync>
}
   15b42:	bd70      	pop	{r4, r5, r6, pc}
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
   15b44:	2603      	movs	r6, #3
   15b46:	2500      	movs	r5, #0
   15b48:	e7c4      	b.n	15ad4 <le_set_event_mask+0x2c>
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
   15b4a:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
   15b4e:	e7e2      	b.n	15b16 <le_set_event_mask+0x6e>
		return -ENOBUFS;
   15b50:	f06f 0068 	mvn.w	r0, #104	; 0x68
   15b54:	e7f5      	b.n	15b42 <le_set_event_mask+0x9a>
   15b56:	bf00      	nop
   15b58:	200002a0 	.word	0x200002a0

00015b5c <le_init>:
{
   15b5c:	b510      	push	{r4, lr}
   15b5e:	b082      	sub	sp, #8
	if (!BT_FEAT_LE(bt_dev.features)) {
   15b60:	4b5b      	ldr	r3, [pc, #364]	; (15cd0 <le_init+0x174>)
   15b62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   15b66:	f013 0f40 	tst.w	r3, #64	; 0x40
   15b6a:	d00a      	beq.n	15b82 <le_init+0x26>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   15b6c:	aa01      	add	r2, sp, #4
   15b6e:	2100      	movs	r1, #0
   15b70:	f242 0003 	movw	r0, #8195	; 0x2003
   15b74:	f7ff fe9c 	bl	158b0 <bt_hci_cmd_send_sync>
	if (err) {
   15b78:	4603      	mov	r3, r0
   15b7a:	b1a8      	cbz	r0, 15ba8 <le_init+0x4c>
}
   15b7c:	4618      	mov	r0, r3
   15b7e:	b002      	add	sp, #8
   15b80:	bd10      	pop	{r4, pc}
   15b82:	4b54      	ldr	r3, [pc, #336]	; (15cd4 <le_init+0x178>)
   15b84:	4a54      	ldr	r2, [pc, #336]	; (15cd8 <le_init+0x17c>)
   15b86:	1a9b      	subs	r3, r3, r2
   15b88:	08db      	lsrs	r3, r3, #3
		BT_ERR("Non-LE capable controller detected!");
   15b8a:	f04f 0100 	mov.w	r1, #0
   15b8e:	2201      	movs	r2, #1
   15b90:	f362 0102 	bfi	r1, r2, #0, #3
   15b94:	f36f 01c5 	bfc	r1, #3, #3
   15b98:	f363 118f 	bfi	r1, r3, #6, #10
   15b9c:	484f      	ldr	r0, [pc, #316]	; (15cdc <le_init+0x180>)
   15b9e:	f7fb fb6d 	bl	1127c <log_0>
		return -ENODEV;
   15ba2:	f06f 0312 	mvn.w	r3, #18
   15ba6:	e7e9      	b.n	15b7c <le_init+0x20>
	read_le_features_complete(rsp);
   15ba8:	9801      	ldr	r0, [sp, #4]
   15baa:	f7ff f8c9 	bl	14d40 <read_le_features_complete>
	net_buf_unref(rsp);
   15bae:	9801      	ldr	r0, [sp, #4]
   15bb0:	f012 fb75 	bl	2829e <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   15bb4:	aa01      	add	r2, sp, #4
   15bb6:	2100      	movs	r1, #0
   15bb8:	f242 0002 	movw	r0, #8194	; 0x2002
   15bbc:	f7ff fe78 	bl	158b0 <bt_hci_cmd_send_sync>
		if (err) {
   15bc0:	4603      	mov	r3, r0
   15bc2:	2800      	cmp	r0, #0
   15bc4:	d1da      	bne.n	15b7c <le_init+0x20>
		le_read_buffer_size_complete(rsp);
   15bc6:	9801      	ldr	r0, [sp, #4]
   15bc8:	f7ff f8d2 	bl	14d70 <le_read_buffer_size_complete>
		net_buf_unref(rsp);
   15bcc:	9801      	ldr	r0, [sp, #4]
   15bce:	f012 fb66 	bl	2829e <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   15bd2:	4b3f      	ldr	r3, [pc, #252]	; (15cd0 <le_init+0x174>)
   15bd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   15bd8:	f013 0f20 	tst.w	r3, #32
   15bdc:	d024      	beq.n	15c28 <le_init+0xcc>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   15bde:	4b3c      	ldr	r3, [pc, #240]	; (15cd0 <le_init+0x174>)
   15be0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
   15be4:	f013 0f08 	tst.w	r3, #8
   15be8:	d137      	bne.n	15c5a <le_init+0xfe>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
   15bea:	4b39      	ldr	r3, [pc, #228]	; (15cd0 <le_init+0x174>)
   15bec:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   15bf0:	f013 0f20 	tst.w	r3, #32
   15bf4:	d141      	bne.n	15c7a <le_init+0x11e>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   15bf6:	4b36      	ldr	r3, [pc, #216]	; (15cd0 <le_init+0x174>)
   15bf8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
   15bfc:	f013 0f40 	tst.w	r3, #64	; 0x40
   15c00:	d00e      	beq.n	15c20 <le_init+0xc4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
   15c02:	aa01      	add	r2, sp, #4
   15c04:	2100      	movs	r1, #0
   15c06:	f242 002a 	movw	r0, #8234	; 0x202a
   15c0a:	f7ff fe51 	bl	158b0 <bt_hci_cmd_send_sync>
		if (err) {
   15c0e:	4603      	mov	r3, r0
   15c10:	2800      	cmp	r0, #0
   15c12:	d1b3      	bne.n	15b7c <le_init+0x20>
		le_read_resolving_list_size_complete(rsp);
   15c14:	9801      	ldr	r0, [sp, #4]
   15c16:	f7ff f821 	bl	14c5c <le_read_resolving_list_size_complete>
		net_buf_unref(rsp);
   15c1a:	9801      	ldr	r0, [sp, #4]
   15c1c:	f012 fb3f 	bl	2829e <net_buf_unref>
	return  le_set_event_mask();
   15c20:	f7ff ff42 	bl	15aa8 <le_set_event_mask>
   15c24:	4603      	mov	r3, r0
   15c26:	e7a9      	b.n	15b7c <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   15c28:	2102      	movs	r1, #2
   15c2a:	f640 406d 	movw	r0, #3181	; 0xc6d
   15c2e:	f7ff fe03 	bl	15838 <bt_hci_cmd_create>
		if (!buf) {
   15c32:	4604      	mov	r4, r0
   15c34:	2800      	cmp	r0, #0
   15c36:	d047      	beq.n	15cc8 <le_init+0x16c>
   15c38:	2102      	movs	r1, #2
   15c3a:	3008      	adds	r0, #8
   15c3c:	f012 fb79 	bl	28332 <net_buf_simple_add>
		cp_le->le = 0x01;
   15c40:	2301      	movs	r3, #1
   15c42:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   15c44:	2200      	movs	r2, #0
   15c46:	7042      	strb	r2, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   15c48:	4621      	mov	r1, r4
   15c4a:	f640 406d 	movw	r0, #3181	; 0xc6d
   15c4e:	f7ff fe2f 	bl	158b0 <bt_hci_cmd_send_sync>
		if (err) {
   15c52:	4603      	mov	r3, r0
   15c54:	2800      	cmp	r0, #0
   15c56:	d0c2      	beq.n	15bde <le_init+0x82>
   15c58:	e790      	b.n	15b7c <le_init+0x20>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   15c5a:	aa01      	add	r2, sp, #4
   15c5c:	2100      	movs	r1, #0
   15c5e:	f242 001c 	movw	r0, #8220	; 0x201c
   15c62:	f7ff fe25 	bl	158b0 <bt_hci_cmd_send_sync>
		if (err) {
   15c66:	4603      	mov	r3, r0
   15c68:	2800      	cmp	r0, #0
   15c6a:	d187      	bne.n	15b7c <le_init+0x20>
		le_read_supp_states_complete(rsp);
   15c6c:	9801      	ldr	r0, [sp, #4]
   15c6e:	f7fe ffd7 	bl	14c20 <le_read_supp_states_complete>
		net_buf_unref(rsp);
   15c72:	9801      	ldr	r0, [sp, #4]
   15c74:	f012 fb13 	bl	2829e <net_buf_unref>
   15c78:	e7b7      	b.n	15bea <le_init+0x8e>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   15c7a:	f10d 0102 	add.w	r1, sp, #2
   15c7e:	4668      	mov	r0, sp
   15c80:	f7ff fee2 	bl	15a48 <hci_le_read_max_data_len>
		if (err) {
   15c84:	4603      	mov	r3, r0
   15c86:	2800      	cmp	r0, #0
   15c88:	f47f af78 	bne.w	15b7c <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   15c8c:	2104      	movs	r1, #4
   15c8e:	f242 0024 	movw	r0, #8228	; 0x2024
   15c92:	f7ff fdd1 	bl	15838 <bt_hci_cmd_create>
		if (!buf) {
   15c96:	4604      	mov	r4, r0
   15c98:	b198      	cbz	r0, 15cc2 <le_init+0x166>
   15c9a:	2104      	movs	r1, #4
   15c9c:	3008      	adds	r0, #8
   15c9e:	f012 fb48 	bl	28332 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   15ca2:	f8bd 3000 	ldrh.w	r3, [sp]
   15ca6:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   15ca8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   15cac:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   15cae:	2200      	movs	r2, #0
   15cb0:	4621      	mov	r1, r4
   15cb2:	f242 0024 	movw	r0, #8228	; 0x2024
   15cb6:	f7ff fdfb 	bl	158b0 <bt_hci_cmd_send_sync>
		if (err) {
   15cba:	4603      	mov	r3, r0
   15cbc:	2800      	cmp	r0, #0
   15cbe:	d09a      	beq.n	15bf6 <le_init+0x9a>
   15cc0:	e75c      	b.n	15b7c <le_init+0x20>
			return -ENOBUFS;
   15cc2:	f06f 0368 	mvn.w	r3, #104	; 0x68
   15cc6:	e759      	b.n	15b7c <le_init+0x20>
			return -ENOBUFS;
   15cc8:	f06f 0368 	mvn.w	r3, #104	; 0x68
   15ccc:	e756      	b.n	15b7c <le_init+0x20>
   15cce:	bf00      	nop
   15cd0:	200002a0 	.word	0x200002a0
   15cd4:	00029f0c 	.word	0x00029f0c
   15cd8:	00029ecc 	.word	0x00029ecc
   15cdc:	0002b72c 	.word	0x0002b72c

00015ce0 <bt_br_init>:
{
   15ce0:	b510      	push	{r4, lr}
   15ce2:	b082      	sub	sp, #8
	if (bt_dev.le.acl_mtu) {
   15ce4:	4b0b      	ldr	r3, [pc, #44]	; (15d14 <bt_br_init+0x34>)
   15ce6:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
   15cea:	b11b      	cbz	r3, 15cf4 <bt_br_init+0x14>
		return 0;
   15cec:	2400      	movs	r4, #0
}
   15cee:	4620      	mov	r0, r4
   15cf0:	b002      	add	sp, #8
   15cf2:	bd10      	pop	{r4, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   15cf4:	aa01      	add	r2, sp, #4
   15cf6:	2100      	movs	r1, #0
   15cf8:	f241 0005 	movw	r0, #4101	; 0x1005
   15cfc:	f7ff fdd8 	bl	158b0 <bt_hci_cmd_send_sync>
	if (err) {
   15d00:	4604      	mov	r4, r0
   15d02:	2800      	cmp	r0, #0
   15d04:	d1f3      	bne.n	15cee <bt_br_init+0xe>
	read_buffer_size_complete(rsp);
   15d06:	9801      	ldr	r0, [sp, #4]
   15d08:	f7ff f844 	bl	14d94 <read_buffer_size_complete>
	net_buf_unref(rsp);
   15d0c:	9801      	ldr	r0, [sp, #4]
   15d0e:	f012 fac6 	bl	2829e <net_buf_unref>
	return 0;
   15d12:	e7ec      	b.n	15cee <bt_br_init+0xe>
   15d14:	200002a0 	.word	0x200002a0

00015d18 <set_event_mask>:
{
   15d18:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   15d1a:	2108      	movs	r1, #8
   15d1c:	f640 4001 	movw	r0, #3073	; 0xc01
   15d20:	f7ff fd8a 	bl	15838 <bt_hci_cmd_create>
	if (!buf) {
   15d24:	b338      	cbz	r0, 15d76 <set_event_mask+0x5e>
   15d26:	4604      	mov	r4, r0
   15d28:	2108      	movs	r1, #8
   15d2a:	4408      	add	r0, r1
   15d2c:	f012 fb01 	bl	28332 <net_buf_simple_add>
	    BT_FEAT_LE_ENCR(bt_dev.le.features)) {
   15d30:	4b12      	ldr	r3, [pc, #72]	; (15d7c <set_event_mask+0x64>)
   15d32:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   15d36:	f013 0f01 	tst.w	r3, #1
   15d3a:	d119      	bne.n	15d70 <set_event_mask+0x58>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
   15d3c:	4a10      	ldr	r2, [pc, #64]	; (15d80 <set_event_mask+0x68>)
   15d3e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
	sys_put_le16(val, dst);
   15d42:	b291      	uxth	r1, r2
	dst[0] = val;
   15d44:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
   15d46:	0a09      	lsrs	r1, r1, #8
   15d48:	7041      	strb	r1, [r0, #1]
	sys_put_le16(val >> 16, &dst[2]);
   15d4a:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
   15d4c:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   15d4e:	0e12      	lsrs	r2, r2, #24
   15d50:	70c2      	strb	r2, [r0, #3]
	sys_put_le16(val, dst);
   15d52:	b29a      	uxth	r2, r3
	dst[0] = val;
   15d54:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   15d56:	0a12      	lsrs	r2, r2, #8
   15d58:	7142      	strb	r2, [r0, #5]
	sys_put_le16(val >> 16, &dst[2]);
   15d5a:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   15d5c:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   15d5e:	0e1b      	lsrs	r3, r3, #24
   15d60:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   15d62:	2200      	movs	r2, #0
   15d64:	4621      	mov	r1, r4
   15d66:	f640 4001 	movw	r0, #3073	; 0xc01
   15d6a:	f7ff fda1 	bl	158b0 <bt_hci_cmd_send_sync>
}
   15d6e:	bd10      	pop	{r4, pc}
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
   15d70:	4a04      	ldr	r2, [pc, #16]	; (15d84 <set_event_mask+0x6c>)
   15d72:	4b05      	ldr	r3, [pc, #20]	; (15d88 <set_event_mask+0x70>)
   15d74:	e7e5      	b.n	15d42 <set_event_mask+0x2a>
		return -ENOBUFS;
   15d76:	f06f 0068 	mvn.w	r0, #104	; 0x68
   15d7a:	e7f8      	b.n	15d6e <set_event_mask+0x56>
   15d7c:	200002a0 	.word	0x200002a0
   15d80:	02008810 	.word	0x02008810
   15d84:	02008890 	.word	0x02008890
   15d88:	20008000 	.word	0x20008000

00015d8c <hci_vs_init>:
{
   15d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15d90:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   15d92:	aa05      	add	r2, sp, #20
   15d94:	2100      	movs	r1, #0
   15d96:	f64f 4001 	movw	r0, #64513	; 0xfc01
   15d9a:	f7ff fd89 	bl	158b0 <bt_hci_cmd_send_sync>
	if (err) {
   15d9e:	2800      	cmp	r0, #0
   15da0:	d178      	bne.n	15e94 <hci_vs_init+0x108>
	rp.info = (void *)rsp->data;
   15da2:	9b05      	ldr	r3, [sp, #20]
   15da4:	689c      	ldr	r4, [r3, #8]
   15da6:	4d56      	ldr	r5, [pc, #344]	; (15f00 <hci_vs_init+0x174>)
   15da8:	4b56      	ldr	r3, [pc, #344]	; (15f04 <hci_vs_init+0x178>)
   15daa:	1aed      	subs	r5, r5, r3
   15dac:	08ed      	lsrs	r5, r5, #3
	BT_INFO("HW Platform: %s (0x%04x)",
   15dae:	2703      	movs	r7, #3
   15db0:	f04f 0600 	mov.w	r6, #0
   15db4:	f367 0602 	bfi	r6, r7, #0, #3
   15db8:	f36f 06c5 	bfc	r6, #3, #3
   15dbc:	f365 168f 	bfi	r6, r5, #6, #10
   15dc0:	f8b4 8001 	ldrh.w	r8, [r4, #1]
   15dc4:	4640      	mov	r0, r8
   15dc6:	f7fe ff6f 	bl	14ca8 <vs_hw_platform>
   15dca:	4601      	mov	r1, r0
   15dcc:	4633      	mov	r3, r6
   15dce:	4642      	mov	r2, r8
   15dd0:	484d      	ldr	r0, [pc, #308]	; (15f08 <hci_vs_init+0x17c>)
   15dd2:	f7fb f9d3 	bl	1117c <log_2>
	BT_INFO("HW Variant: %s (0x%04x)",
   15dd6:	f04f 0600 	mov.w	r6, #0
   15dda:	f367 0602 	bfi	r6, r7, #0, #3
   15dde:	f36f 06c5 	bfc	r6, #3, #3
   15de2:	f365 168f 	bfi	r6, r5, #6, #10
   15de6:	f8b4 8003 	ldrh.w	r8, [r4, #3]
   15dea:	4641      	mov	r1, r8
   15dec:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   15df0:	f7fe ff66 	bl	14cc0 <vs_hw_variant>
   15df4:	4601      	mov	r1, r0
   15df6:	4633      	mov	r3, r6
   15df8:	4642      	mov	r2, r8
   15dfa:	4844      	ldr	r0, [pc, #272]	; (15f0c <hci_vs_init+0x180>)
   15dfc:	f7fb f9be 	bl	1117c <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
   15e00:	f04f 0600 	mov.w	r6, #0
   15e04:	f367 0602 	bfi	r6, r7, #0, #3
   15e08:	f36f 06c5 	bfc	r6, #3, #3
   15e0c:	f365 168f 	bfi	r6, r5, #6, #10
   15e10:	7965      	ldrb	r5, [r4, #5]
   15e12:	4628      	mov	r0, r5
   15e14:	f7fe ff64 	bl	14ce0 <vs_fw_variant>
   15e18:	9000      	str	r0, [sp, #0]
   15e1a:	9501      	str	r5, [sp, #4]
   15e1c:	79a3      	ldrb	r3, [r4, #6]
   15e1e:	9302      	str	r3, [sp, #8]
   15e20:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   15e24:	9303      	str	r3, [sp, #12]
   15e26:	f8d4 3009 	ldr.w	r3, [r4, #9]
   15e2a:	9304      	str	r3, [sp, #16]
   15e2c:	4633      	mov	r3, r6
   15e2e:	2205      	movs	r2, #5
   15e30:	4669      	mov	r1, sp
   15e32:	4837      	ldr	r0, [pc, #220]	; (15f10 <hci_vs_init+0x184>)
   15e34:	f7fb f9de 	bl	111f4 <log_n>
	net_buf_unref(rsp);
   15e38:	9805      	ldr	r0, [sp, #20]
   15e3a:	f012 fa30 	bl	2829e <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   15e3e:	aa05      	add	r2, sp, #20
   15e40:	2100      	movs	r1, #0
   15e42:	f64f 4002 	movw	r0, #64514	; 0xfc02
   15e46:	f7ff fd33 	bl	158b0 <bt_hci_cmd_send_sync>
	if (err) {
   15e4a:	2800      	cmp	r0, #0
   15e4c:	d135      	bne.n	15eba <hci_vs_init+0x12e>
	rp.cmds = (void *)rsp->data;
   15e4e:	9b05      	ldr	r3, [sp, #20]
   15e50:	6899      	ldr	r1, [r3, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   15e52:	4c30      	ldr	r4, [pc, #192]	; (15f14 <hci_vs_init+0x188>)
   15e54:	2202      	movs	r2, #2
   15e56:	3101      	adds	r1, #1
   15e58:	f104 0085 	add.w	r0, r4, #133	; 0x85
   15e5c:	f00e fe06 	bl	24a6c <memcpy>
	net_buf_unref(rsp);
   15e60:	9805      	ldr	r0, [sp, #20]
   15e62:	f012 fa1c 	bl	2829e <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   15e66:	f894 3085 	ldrb.w	r3, [r4, #133]	; 0x85
   15e6a:	f013 0f04 	tst.w	r3, #4
   15e6e:	d021      	beq.n	15eb4 <hci_vs_init+0x128>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   15e70:	aa05      	add	r2, sp, #20
   15e72:	2100      	movs	r1, #0
   15e74:	f64f 4003 	movw	r0, #64515	; 0xfc03
   15e78:	f7ff fd1a 	bl	158b0 <bt_hci_cmd_send_sync>
		if (err) {
   15e7c:	bb70      	cbnz	r0, 15edc <hci_vs_init+0x150>
		rp.feat = (void *)rsp->data;
   15e7e:	9b05      	ldr	r3, [sp, #20]
   15e80:	6899      	ldr	r1, [r3, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
   15e82:	2201      	movs	r2, #1
   15e84:	4411      	add	r1, r2
   15e86:	4824      	ldr	r0, [pc, #144]	; (15f18 <hci_vs_init+0x18c>)
   15e88:	f00e fdf0 	bl	24a6c <memcpy>
		net_buf_unref(rsp);
   15e8c:	9805      	ldr	r0, [sp, #20]
   15e8e:	f012 fa06 	bl	2829e <net_buf_unref>
   15e92:	e00f      	b.n	15eb4 <hci_vs_init+0x128>
   15e94:	4b1a      	ldr	r3, [pc, #104]	; (15f00 <hci_vs_init+0x174>)
   15e96:	4a1b      	ldr	r2, [pc, #108]	; (15f04 <hci_vs_init+0x178>)
   15e98:	1a9b      	subs	r3, r3, r2
   15e9a:	08db      	lsrs	r3, r3, #3
		BT_WARN("Vendor HCI extensions not available");
   15e9c:	f04f 0100 	mov.w	r1, #0
   15ea0:	2202      	movs	r2, #2
   15ea2:	f362 0102 	bfi	r1, r2, #0, #3
   15ea6:	f36f 01c5 	bfc	r1, #3, #3
   15eaa:	f363 118f 	bfi	r1, r3, #6, #10
   15eae:	481b      	ldr	r0, [pc, #108]	; (15f1c <hci_vs_init+0x190>)
   15eb0:	f7fb f9e4 	bl	1127c <log_0>
}
   15eb4:	b006      	add	sp, #24
   15eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15eba:	4b11      	ldr	r3, [pc, #68]	; (15f00 <hci_vs_init+0x174>)
   15ebc:	4a11      	ldr	r2, [pc, #68]	; (15f04 <hci_vs_init+0x178>)
   15ebe:	1a9b      	subs	r3, r3, r2
   15ec0:	40fb      	lsrs	r3, r7
		BT_WARN("Failed to read supported vendor commands");
   15ec2:	f04f 0100 	mov.w	r1, #0
   15ec6:	2202      	movs	r2, #2
   15ec8:	f362 0102 	bfi	r1, r2, #0, #3
   15ecc:	f36f 01c5 	bfc	r1, #3, #3
   15ed0:	f363 118f 	bfi	r1, r3, #6, #10
   15ed4:	4812      	ldr	r0, [pc, #72]	; (15f20 <hci_vs_init+0x194>)
   15ed6:	f7fb f9d1 	bl	1127c <log_0>
		return;
   15eda:	e7eb      	b.n	15eb4 <hci_vs_init+0x128>
   15edc:	4b08      	ldr	r3, [pc, #32]	; (15f00 <hci_vs_init+0x174>)
   15ede:	4a09      	ldr	r2, [pc, #36]	; (15f04 <hci_vs_init+0x178>)
   15ee0:	1a9b      	subs	r3, r3, r2
   15ee2:	08db      	lsrs	r3, r3, #3
			BT_WARN("Failed to read supported vendor features");
   15ee4:	f04f 0100 	mov.w	r1, #0
   15ee8:	2202      	movs	r2, #2
   15eea:	f362 0102 	bfi	r1, r2, #0, #3
   15eee:	f36f 01c5 	bfc	r1, #3, #3
   15ef2:	f363 118f 	bfi	r1, r3, #6, #10
   15ef6:	480b      	ldr	r0, [pc, #44]	; (15f24 <hci_vs_init+0x198>)
   15ef8:	f7fb f9c0 	bl	1127c <log_0>
			return;
   15efc:	e7da      	b.n	15eb4 <hci_vs_init+0x128>
   15efe:	bf00      	nop
   15f00:	00029f0c 	.word	0x00029f0c
   15f04:	00029ecc 	.word	0x00029ecc
   15f08:	0002b774 	.word	0x0002b774
   15f0c:	0002b790 	.word	0x0002b790
   15f10:	0002b7a8 	.word	0x0002b7a8
   15f14:	200002a0 	.word	0x200002a0
   15f18:	20000324 	.word	0x20000324
   15f1c:	0002b750 	.word	0x0002b750
   15f20:	0002b7d8 	.word	0x0002b7d8
   15f24:	0002b804 	.word	0x0002b804

00015f28 <hci_init>:
{
   15f28:	b508      	push	{r3, lr}
	err = common_init();
   15f2a:	f7ff fd43 	bl	159b4 <common_init>
	if (err) {
   15f2e:	4603      	mov	r3, r0
   15f30:	b108      	cbz	r0, 15f36 <hci_init+0xe>
}
   15f32:	4618      	mov	r0, r3
   15f34:	bd08      	pop	{r3, pc}
	err = le_init();
   15f36:	f7ff fe11 	bl	15b5c <le_init>
	if (err) {
   15f3a:	4603      	mov	r3, r0
   15f3c:	2800      	cmp	r0, #0
   15f3e:	d1f8      	bne.n	15f32 <hci_init+0xa>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   15f40:	4b0a      	ldr	r3, [pc, #40]	; (15f6c <hci_init+0x44>)
   15f42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   15f46:	f013 0f20 	tst.w	r3, #32
   15f4a:	d104      	bne.n	15f56 <hci_init+0x2e>
		err = bt_br_init();
   15f4c:	f7ff fec8 	bl	15ce0 <bt_br_init>
		if (err) {
   15f50:	4603      	mov	r3, r0
   15f52:	2800      	cmp	r0, #0
   15f54:	d1ed      	bne.n	15f32 <hci_init+0xa>
	err = set_event_mask();
   15f56:	f7ff fedf 	bl	15d18 <set_event_mask>
	if (err) {
   15f5a:	4603      	mov	r3, r0
   15f5c:	2800      	cmp	r0, #0
   15f5e:	d1e8      	bne.n	15f32 <hci_init+0xa>
	hci_vs_init();
   15f60:	f7ff ff14 	bl	15d8c <hci_vs_init>
	err = bt_id_init();
   15f64:	f00f f95b 	bl	2521e <bt_id_init>
   15f68:	4603      	mov	r3, r0
	if (err) {
   15f6a:	e7e2      	b.n	15f32 <hci_init+0xa>
   15f6c:	200002a0 	.word	0x200002a0

00015f70 <bt_unpair>:
{
   15f70:	b510      	push	{r4, lr}
   15f72:	b084      	sub	sp, #16
   15f74:	f88d 0007 	strb.w	r0, [sp, #7]
	if (id >= CONFIG_BT_ID_MAX) {
   15f78:	b9e0      	cbnz	r0, 15fb4 <bt_unpair+0x44>
   15f7a:	460c      	mov	r4, r1
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   15f7c:	b149      	cbz	r1, 15f92 <bt_unpair+0x22>
	    (!addr || !bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   15f7e:	2300      	movs	r3, #0
   15f80:	9302      	str	r3, [sp, #8]
   15f82:	f8cd 300b 	str.w	r3, [sp, #11]
	return memcmp(a, b, sizeof(*a));
   15f86:	2207      	movs	r2, #7
   15f88:	a902      	add	r1, sp, #8
   15f8a:	4620      	mov	r0, r4
   15f8c:	f00e fd57 	bl	24a3e <memcmp>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   15f90:	b948      	cbnz	r0, 15fa6 <bt_unpair+0x36>
		bt_foreach_bond(id, unpair_remote, &id);
   15f92:	f10d 0207 	add.w	r2, sp, #7
   15f96:	4909      	ldr	r1, [pc, #36]	; (15fbc <bt_unpair+0x4c>)
   15f98:	f89d 0007 	ldrb.w	r0, [sp, #7]
   15f9c:	f007 fc7e 	bl	1d89c <bt_foreach_bond>
		return 0;
   15fa0:	2000      	movs	r0, #0
}
   15fa2:	b004      	add	sp, #16
   15fa4:	bd10      	pop	{r4, pc}
	unpair(id, addr);
   15fa6:	4621      	mov	r1, r4
   15fa8:	f89d 0007 	ldrb.w	r0, [sp, #7]
   15fac:	f7fe ff7c 	bl	14ea8 <unpair>
	return 0;
   15fb0:	2000      	movs	r0, #0
   15fb2:	e7f6      	b.n	15fa2 <bt_unpair+0x32>
		return -EINVAL;
   15fb4:	f06f 0015 	mvn.w	r0, #21
   15fb8:	e7f3      	b.n	15fa2 <bt_unpair+0x32>
   15fba:	bf00      	nop
   15fbc:	00024dc7 	.word	0x00024dc7

00015fc0 <hci_encrypt_key_refresh_complete>:
{
   15fc0:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   15fc2:	6883      	ldr	r3, [r0, #8]
	uint8_t status = evt->status;
   15fc4:	781c      	ldrb	r4, [r3, #0]
	handle = sys_le16_to_cpu(evt->handle);
   15fc6:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   15fca:	4630      	mov	r0, r6
   15fcc:	f002 fadc 	bl	18588 <bt_conn_lookup_handle>
	if (!conn) {
   15fd0:	b188      	cbz	r0, 15ff6 <hci_encrypt_key_refresh_complete+0x36>
   15fd2:	4605      	mov	r5, r0
	if (status) {
   15fd4:	bb0c      	cbnz	r4, 1601a <hci_encrypt_key_refresh_complete+0x5a>
	if (conn->type == BT_CONN_TYPE_LE) {
   15fd6:	7883      	ldrb	r3, [r0, #2]
   15fd8:	2b01      	cmp	r3, #1
   15fda:	d02a      	beq.n	16032 <hci_encrypt_key_refresh_complete+0x72>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   15fdc:	4620      	mov	r0, r4
   15fde:	f00e ff54 	bl	24e8a <bt_security_err_get>
   15fe2:	4602      	mov	r2, r0
   15fe4:	4621      	mov	r1, r4
   15fe6:	4628      	mov	r0, r5
   15fe8:	f002 f96c 	bl	182c4 <bt_conn_security_changed>
	if (status) {
   15fec:	bb54      	cbnz	r4, 16044 <hci_encrypt_key_refresh_complete+0x84>
	bt_conn_unref(conn);
   15fee:	4628      	mov	r0, r5
   15ff0:	f00f fc82 	bl	258f8 <bt_conn_unref>
}
   15ff4:	bd70      	pop	{r4, r5, r6, pc}
   15ff6:	4b1e      	ldr	r3, [pc, #120]	; (16070 <hci_encrypt_key_refresh_complete+0xb0>)
   15ff8:	4a1e      	ldr	r2, [pc, #120]	; (16074 <hci_encrypt_key_refresh_complete+0xb4>)
   15ffa:	1a9b      	subs	r3, r3, r2
   15ffc:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to look up conn with handle %u", handle);
   15ffe:	f04f 0200 	mov.w	r2, #0
   16002:	2101      	movs	r1, #1
   16004:	f361 0202 	bfi	r2, r1, #0, #3
   16008:	f36f 02c5 	bfc	r2, #3, #3
   1600c:	f363 128f 	bfi	r2, r3, #6, #10
   16010:	4631      	mov	r1, r6
   16012:	4819      	ldr	r0, [pc, #100]	; (16078 <hci_encrypt_key_refresh_complete+0xb8>)
   16014:	f7fb f87c 	bl	11110 <log_1>
		return;
   16018:	e7ec      	b.n	15ff4 <hci_encrypt_key_refresh_complete+0x34>
		bt_conn_security_changed(conn, status,
   1601a:	4620      	mov	r0, r4
   1601c:	f00e ff35 	bl	24e8a <bt_security_err_get>
   16020:	4602      	mov	r2, r0
   16022:	4621      	mov	r1, r4
   16024:	4628      	mov	r0, r5
   16026:	f002 f94d 	bl	182c4 <bt_conn_security_changed>
		bt_conn_unref(conn);
   1602a:	4628      	mov	r0, r5
   1602c:	f00f fc64 	bl	258f8 <bt_conn_unref>
		return;
   16030:	e7e0      	b.n	15ff4 <hci_encrypt_key_refresh_complete+0x34>
		bt_smp_update_keys(conn);
   16032:	f007 fb39 	bl	1d6a8 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   16036:	4628      	mov	r0, r5
   16038:	f00e fea9 	bl	24d8e <update_sec_level>
   1603c:	2800      	cmp	r0, #0
   1603e:	d1cd      	bne.n	15fdc <hci_encrypt_key_refresh_complete+0x1c>
			status = BT_HCI_ERR_AUTH_FAIL;
   16040:	2405      	movs	r4, #5
   16042:	e7cb      	b.n	15fdc <hci_encrypt_key_refresh_complete+0x1c>
   16044:	4b0a      	ldr	r3, [pc, #40]	; (16070 <hci_encrypt_key_refresh_complete+0xb0>)
   16046:	4a0b      	ldr	r2, [pc, #44]	; (16074 <hci_encrypt_key_refresh_complete+0xb4>)
   16048:	1a9b      	subs	r3, r3, r2
   1604a:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to set required security level");
   1604c:	f04f 0100 	mov.w	r1, #0
   16050:	2201      	movs	r2, #1
   16052:	f362 0102 	bfi	r1, r2, #0, #3
   16056:	f36f 01c5 	bfc	r1, #3, #3
   1605a:	f363 118f 	bfi	r1, r3, #6, #10
   1605e:	4807      	ldr	r0, [pc, #28]	; (1607c <hci_encrypt_key_refresh_complete+0xbc>)
   16060:	f7fb f90c 	bl	1127c <log_0>
		bt_conn_disconnect(conn, status);
   16064:	4621      	mov	r1, r4
   16066:	4628      	mov	r0, r5
   16068:	f00f fc9e 	bl	259a8 <bt_conn_disconnect>
   1606c:	e7bf      	b.n	15fee <hci_encrypt_key_refresh_complete+0x2e>
   1606e:	bf00      	nop
   16070:	00029f0c 	.word	0x00029f0c
   16074:	00029ecc 	.word	0x00029ecc
   16078:	0002b3bc 	.word	0x0002b3bc
   1607c:	0002b830 	.word	0x0002b830

00016080 <hci_encrypt_change>:
{
   16080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   16082:	6886      	ldr	r6, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16084:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	uint8_t status = evt->status;
   16088:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   1608a:	4638      	mov	r0, r7
   1608c:	f002 fa7c 	bl	18588 <bt_conn_lookup_handle>
	if (!conn) {
   16090:	b198      	cbz	r0, 160ba <hci_encrypt_change+0x3a>
   16092:	4604      	mov	r4, r0
	if (status) {
   16094:	bb1d      	cbnz	r5, 160de <hci_encrypt_change+0x5e>
	conn->encrypt = evt->encrypt;
   16096:	78f3      	ldrb	r3, [r6, #3]
   16098:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   1609a:	7882      	ldrb	r2, [r0, #2]
   1609c:	2a01      	cmp	r2, #1
   1609e:	d02a      	beq.n	160f6 <hci_encrypt_change+0x76>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   160a0:	4628      	mov	r0, r5
   160a2:	f00e fef2 	bl	24e8a <bt_security_err_get>
   160a6:	4602      	mov	r2, r0
   160a8:	4629      	mov	r1, r5
   160aa:	4620      	mov	r0, r4
   160ac:	f002 f90a 	bl	182c4 <bt_conn_security_changed>
	if (status) {
   160b0:	bb65      	cbnz	r5, 1610c <hci_encrypt_change+0x8c>
	bt_conn_unref(conn);
   160b2:	4620      	mov	r0, r4
   160b4:	f00f fc20 	bl	258f8 <bt_conn_unref>
}
   160b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   160ba:	4b1f      	ldr	r3, [pc, #124]	; (16138 <hci_encrypt_change+0xb8>)
   160bc:	4a1f      	ldr	r2, [pc, #124]	; (1613c <hci_encrypt_change+0xbc>)
   160be:	1a9b      	subs	r3, r3, r2
   160c0:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to look up conn with handle %u", handle);
   160c2:	f04f 0200 	mov.w	r2, #0
   160c6:	2101      	movs	r1, #1
   160c8:	f361 0202 	bfi	r2, r1, #0, #3
   160cc:	f36f 02c5 	bfc	r2, #3, #3
   160d0:	f363 128f 	bfi	r2, r3, #6, #10
   160d4:	4639      	mov	r1, r7
   160d6:	481a      	ldr	r0, [pc, #104]	; (16140 <hci_encrypt_change+0xc0>)
   160d8:	f7fb f81a 	bl	11110 <log_1>
		return;
   160dc:	e7ec      	b.n	160b8 <hci_encrypt_change+0x38>
		bt_conn_security_changed(conn, status,
   160de:	4628      	mov	r0, r5
   160e0:	f00e fed3 	bl	24e8a <bt_security_err_get>
   160e4:	4602      	mov	r2, r0
   160e6:	4629      	mov	r1, r5
   160e8:	4620      	mov	r0, r4
   160ea:	f002 f8eb 	bl	182c4 <bt_conn_security_changed>
		bt_conn_unref(conn);
   160ee:	4620      	mov	r0, r4
   160f0:	f00f fc02 	bl	258f8 <bt_conn_unref>
		return;
   160f4:	e7e0      	b.n	160b8 <hci_encrypt_change+0x38>
		if (conn->encrypt) {
   160f6:	b933      	cbnz	r3, 16106 <hci_encrypt_change+0x86>
		if (!update_sec_level(conn)) {
   160f8:	4620      	mov	r0, r4
   160fa:	f00e fe48 	bl	24d8e <update_sec_level>
   160fe:	2800      	cmp	r0, #0
   16100:	d1ce      	bne.n	160a0 <hci_encrypt_change+0x20>
			status = BT_HCI_ERR_AUTH_FAIL;
   16102:	2505      	movs	r5, #5
   16104:	e7cc      	b.n	160a0 <hci_encrypt_change+0x20>
			bt_smp_update_keys(conn);
   16106:	f007 facf 	bl	1d6a8 <bt_smp_update_keys>
   1610a:	e7f5      	b.n	160f8 <hci_encrypt_change+0x78>
   1610c:	4b0a      	ldr	r3, [pc, #40]	; (16138 <hci_encrypt_change+0xb8>)
   1610e:	4a0b      	ldr	r2, [pc, #44]	; (1613c <hci_encrypt_change+0xbc>)
   16110:	1a9b      	subs	r3, r3, r2
   16112:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to set required security level");
   16114:	f04f 0100 	mov.w	r1, #0
   16118:	2201      	movs	r2, #1
   1611a:	f362 0102 	bfi	r1, r2, #0, #3
   1611e:	f36f 01c5 	bfc	r1, #3, #3
   16122:	f363 118f 	bfi	r1, r3, #6, #10
   16126:	4807      	ldr	r0, [pc, #28]	; (16144 <hci_encrypt_change+0xc4>)
   16128:	f7fb f8a8 	bl	1127c <log_0>
		bt_conn_disconnect(conn, status);
   1612c:	4629      	mov	r1, r5
   1612e:	4620      	mov	r0, r4
   16130:	f00f fc3a 	bl	259a8 <bt_conn_disconnect>
   16134:	e7bd      	b.n	160b2 <hci_encrypt_change+0x32>
   16136:	bf00      	nop
   16138:	00029f0c 	.word	0x00029f0c
   1613c:	00029ecc 	.word	0x00029ecc
   16140:	0002b3bc 	.word	0x0002b3bc
   16144:	0002b830 	.word	0x0002b830

00016148 <bt_hci_cmd_send>:
{
   16148:	b538      	push	{r3, r4, r5, lr}
   1614a:	4604      	mov	r4, r0
	if (!buf) {
   1614c:	460d      	mov	r5, r1
   1614e:	b151      	cbz	r1, 16166 <bt_hci_cmd_send+0x1e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   16150:	f640 4335 	movw	r3, #3125	; 0xc35
   16154:	429c      	cmp	r4, r3
   16156:	d00e      	beq.n	16176 <bt_hci_cmd_send+0x2e>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   16158:	4629      	mov	r1, r5
   1615a:	4814      	ldr	r0, [pc, #80]	; (161ac <bt_hci_cmd_send+0x64>)
   1615c:	f012 f892 	bl	28284 <net_buf_put>
	return 0;
   16160:	2400      	movs	r4, #0
}
   16162:	4620      	mov	r0, r4
   16164:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_hci_cmd_create(opcode, 0);
   16166:	f7ff fb67 	bl	15838 <bt_hci_cmd_create>
		if (!buf) {
   1616a:	4605      	mov	r5, r0
   1616c:	2800      	cmp	r0, #0
   1616e:	d1ef      	bne.n	16150 <bt_hci_cmd_send+0x8>
			return -ENOBUFS;
   16170:	f06f 0468 	mvn.w	r4, #104	; 0x68
   16174:	e7f5      	b.n	16162 <bt_hci_cmd_send+0x1a>
		err = bt_send(buf);
   16176:	4628      	mov	r0, r5
   16178:	f00e feac 	bl	24ed4 <bt_send>
		if (err) {
   1617c:	4604      	mov	r4, r0
   1617e:	2800      	cmp	r0, #0
   16180:	d0ef      	beq.n	16162 <bt_hci_cmd_send+0x1a>
   16182:	4b0b      	ldr	r3, [pc, #44]	; (161b0 <bt_hci_cmd_send+0x68>)
   16184:	4a0b      	ldr	r2, [pc, #44]	; (161b4 <bt_hci_cmd_send+0x6c>)
   16186:	1a9b      	subs	r3, r3, r2
   16188:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to send to driver (err %d)", err);
   1618a:	f04f 0200 	mov.w	r2, #0
   1618e:	2101      	movs	r1, #1
   16190:	f361 0202 	bfi	r2, r1, #0, #3
   16194:	f36f 02c5 	bfc	r2, #3, #3
   16198:	f363 128f 	bfi	r2, r3, #6, #10
   1619c:	4601      	mov	r1, r0
   1619e:	4806      	ldr	r0, [pc, #24]	; (161b8 <bt_hci_cmd_send+0x70>)
   161a0:	f7fa ffb6 	bl	11110 <log_1>
			net_buf_unref(buf);
   161a4:	4628      	mov	r0, r5
   161a6:	f012 f87a 	bl	2829e <net_buf_unref>
		return err;
   161aa:	e7da      	b.n	16162 <bt_hci_cmd_send+0x1a>
   161ac:	200003c4 	.word	0x200003c4
   161b0:	00029f0c 	.word	0x00029f0c
   161b4:	00029ecc 	.word	0x00029ecc
   161b8:	0002b858 	.word	0x0002b858

000161bc <conn_auto_initiate>:
	if (conn->state != BT_CONN_CONNECTED) {
   161bc:	7b43      	ldrb	r3, [r0, #13]
   161be:	2b07      	cmp	r3, #7
   161c0:	d000      	beq.n	161c4 <conn_auto_initiate+0x8>
   161c2:	4770      	bx	lr
{
   161c4:	b530      	push	{r4, r5, lr}
   161c6:	b085      	sub	sp, #20
   161c8:	4604      	mov	r4, r0
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   161ca:	1d05      	adds	r5, r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   161cc:	f3bf 8f5b 	dmb	ish
   161d0:	6843      	ldr	r3, [r0, #4]
   161d2:	f3bf 8f5b 	dmb	ish
   161d6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   161da:	d10b      	bne.n	161f4 <conn_auto_initiate+0x38>
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
   161dc:	78c3      	ldrb	r3, [r0, #3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   161de:	b12b      	cbz	r3, 161ec <conn_auto_initiate+0x30>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
   161e0:	4b37      	ldr	r3, [pc, #220]	; (162c0 <conn_auto_initiate+0x104>)
   161e2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
   161e6:	f013 0f08 	tst.w	r3, #8
   161ea:	d003      	beq.n	161f4 <conn_auto_initiate+0x38>
		err = hci_le_read_remote_features(conn);
   161ec:	4620      	mov	r0, r4
   161ee:	f00e feb5 	bl	24f5c <hci_le_read_remote_features>
		if (!err) {
   161f2:	b1d0      	cbz	r0, 1622a <conn_auto_initiate+0x6e>
   161f4:	f3bf 8f5b 	dmb	ish
   161f8:	6863      	ldr	r3, [r4, #4]
   161fa:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   161fe:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   16202:	d105      	bne.n	16210 <conn_auto_initiate+0x54>
	    BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
   16204:	4b2e      	ldr	r3, [pc, #184]	; (162c0 <conn_auto_initiate+0x104>)
   16206:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   1620a:	f013 0f01 	tst.w	r3, #1
   1620e:	d10e      	bne.n	1622e <conn_auto_initiate+0x72>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
   16210:	4b2b      	ldr	r3, [pc, #172]	; (162c0 <conn_auto_initiate+0x104>)
   16212:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   16216:	f013 0f20 	tst.w	r3, #32
   1621a:	d006      	beq.n	1622a <conn_auto_initiate+0x6e>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   1621c:	4b28      	ldr	r3, [pc, #160]	; (162c0 <conn_auto_initiate+0x104>)
   1621e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
   16222:	689b      	ldr	r3, [r3, #8]
   16224:	f013 0f02 	tst.w	r3, #2
   16228:	d128      	bne.n	1627c <conn_auto_initiate+0xc0>
}
   1622a:	b005      	add	sp, #20
   1622c:	bd30      	pop	{r4, r5, pc}
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   1622e:	2100      	movs	r1, #0
   16230:	9100      	str	r1, [sp, #0]
   16232:	2302      	movs	r3, #2
   16234:	461a      	mov	r2, r3
   16236:	4620      	mov	r0, r4
   16238:	f00e fe6c 	bl	24f14 <bt_le_set_phy>
		if (!err) {
   1623c:	4601      	mov	r1, r0
   1623e:	b180      	cbz	r0, 16262 <conn_auto_initiate+0xa6>
   16240:	4b20      	ldr	r3, [pc, #128]	; (162c4 <conn_auto_initiate+0x108>)
   16242:	4a21      	ldr	r2, [pc, #132]	; (162c8 <conn_auto_initiate+0x10c>)
   16244:	1a9b      	subs	r3, r3, r2
   16246:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to set LE PHY (%d)", err);
   16248:	f04f 0200 	mov.w	r2, #0
   1624c:	2001      	movs	r0, #1
   1624e:	f360 0202 	bfi	r2, r0, #0, #3
   16252:	f36f 02c5 	bfc	r2, #3, #3
   16256:	f363 128f 	bfi	r2, r3, #6, #10
   1625a:	481c      	ldr	r0, [pc, #112]	; (162cc <conn_auto_initiate+0x110>)
   1625c:	f7fa ff58 	bl	11110 <log_1>
   16260:	e7d6      	b.n	16210 <conn_auto_initiate+0x54>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16262:	f3bf 8f5b 	dmb	ish
   16266:	e855 3f00 	ldrex	r3, [r5]
   1626a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1626e:	e845 3200 	strex	r2, r3, [r5]
   16272:	2a00      	cmp	r2, #0
   16274:	d1f7      	bne.n	16266 <conn_auto_initiate+0xaa>
   16276:	f3bf 8f5b 	dmb	ish
			return;
   1627a:	e7d6      	b.n	1622a <conn_auto_initiate+0x6e>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   1627c:	f10d 010e 	add.w	r1, sp, #14
   16280:	a803      	add	r0, sp, #12
   16282:	f7ff fbe1 	bl	15a48 <hci_le_read_max_data_len>
			if (!err) {
   16286:	2800      	cmp	r0, #0
   16288:	d1cf      	bne.n	1622a <conn_auto_initiate+0x6e>
				err = bt_le_set_data_len(conn,
   1628a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1628e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   16292:	4620      	mov	r0, r4
   16294:	f00e fe22 	bl	24edc <bt_le_set_data_len>
				if (err) {
   16298:	4601      	mov	r1, r0
   1629a:	2800      	cmp	r0, #0
   1629c:	d0c5      	beq.n	1622a <conn_auto_initiate+0x6e>
   1629e:	4b09      	ldr	r3, [pc, #36]	; (162c4 <conn_auto_initiate+0x108>)
   162a0:	4a09      	ldr	r2, [pc, #36]	; (162c8 <conn_auto_initiate+0x10c>)
   162a2:	1a9b      	subs	r3, r3, r2
   162a4:	08db      	lsrs	r3, r3, #3
					BT_ERR("Failed to set data len (%d)", err);
   162a6:	f04f 0200 	mov.w	r2, #0
   162aa:	2001      	movs	r0, #1
   162ac:	f360 0202 	bfi	r2, r0, #0, #3
   162b0:	f36f 02c5 	bfc	r2, #3, #3
   162b4:	f363 128f 	bfi	r2, r3, #6, #10
   162b8:	4805      	ldr	r0, [pc, #20]	; (162d0 <conn_auto_initiate+0x114>)
   162ba:	f7fa ff29 	bl	11110 <log_1>
		}
   162be:	e7b4      	b.n	1622a <conn_auto_initiate+0x6e>
   162c0:	200002a0 	.word	0x200002a0
   162c4:	00029f0c 	.word	0x00029f0c
   162c8:	00029ecc 	.word	0x00029ecc
   162cc:	0002b87c 	.word	0x0002b87c
   162d0:	0002b898 	.word	0x0002b898

000162d4 <bt_hci_le_enh_conn_complete>:
{
   162d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   162d8:	b084      	sub	sp, #16
   162da:	4604      	mov	r4, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   162dc:	f8b0 7001 	ldrh.w	r7, [r0, #1]
   162e0:	fa1f f887 	uxth.w	r8, r7
	bool is_disconnected = conn_handle_is_disconnected(handle);
   162e4:	4640      	mov	r0, r8
   162e6:	f7fe fc71 	bl	14bcc <conn_handle_is_disconnected>
   162ea:	4606      	mov	r6, r0
	bt_id_pending_keys_update();
   162ec:	f000 fe4e 	bl	16f8c <bt_id_pending_keys_update>
	if (evt->status) {
   162f0:	7820      	ldrb	r0, [r4, #0]
   162f2:	b1b0      	cbz	r0, 16322 <bt_hci_le_enh_conn_complete+0x4e>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   162f4:	283c      	cmp	r0, #60	; 0x3c
   162f6:	d011      	beq.n	1631c <bt_hci_le_enh_conn_complete+0x48>
   162f8:	4b61      	ldr	r3, [pc, #388]	; (16480 <bt_hci_le_enh_conn_complete+0x1ac>)
   162fa:	4a62      	ldr	r2, [pc, #392]	; (16484 <bt_hci_le_enh_conn_complete+0x1b0>)
   162fc:	1a9b      	subs	r3, r3, r2
   162fe:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unexpected status 0x%02x", evt->status);
   16300:	f04f 0200 	mov.w	r2, #0
   16304:	2102      	movs	r1, #2
   16306:	f361 0202 	bfi	r2, r1, #0, #3
   1630a:	f36f 02c5 	bfc	r2, #3, #3
   1630e:	f363 128f 	bfi	r2, r3, #6, #10
   16312:	4601      	mov	r1, r0
   16314:	485c      	ldr	r0, [pc, #368]	; (16488 <bt_hci_le_enh_conn_complete+0x1b4>)
   16316:	f7fa fefb 	bl	11110 <log_1>
		return;
   1631a:	e04a      	b.n	163b2 <bt_hci_le_enh_conn_complete+0xde>
			le_conn_complete_adv_timeout();
   1631c:	f7fe fd8e 	bl	14e3c <le_conn_complete_adv_timeout>
			return;
   16320:	e047      	b.n	163b2 <bt_hci_le_enh_conn_complete+0xde>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   16322:	7923      	ldrb	r3, [r4, #4]
   16324:	3b02      	subs	r3, #2
   16326:	b2db      	uxtb	r3, r3
   16328:	2b01      	cmp	r3, #1
   1632a:	d945      	bls.n	163b8 <bt_hci_le_enh_conn_complete+0xe4>
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
   1632c:	78e3      	ldrb	r3, [r4, #3]
   1632e:	2b01      	cmp	r3, #1
   16330:	d057      	beq.n	163e2 <bt_hci_le_enh_conn_complete+0x10e>
				bt_lookup_id_addr(id, &evt->peer_addr));
   16332:	1d25      	adds	r5, r4, #4
		bt_addr_le_copy(&id_addr,
   16334:	4629      	mov	r1, r5
   16336:	f00e ff38 	bl	251aa <bt_lookup_id_addr>
   1633a:	4601      	mov	r1, r0
	memcpy(dst, src, sizeof(*dst));
   1633c:	2207      	movs	r2, #7
   1633e:	4668      	mov	r0, sp
   16340:	f00e fb94 	bl	24a6c <memcpy>
   16344:	2207      	movs	r2, #7
   16346:	4629      	mov	r1, r5
   16348:	a802      	add	r0, sp, #8
   1634a:	f00e fb8f 	bl	24a6c <memcpy>
	conn = find_pending_connect(evt->role, &id_addr);
   1634e:	4669      	mov	r1, sp
   16350:	78e0      	ldrb	r0, [r4, #3]
   16352:	f7fe fd4d 	bl	14df0 <find_pending_connect>
   16356:	4605      	mov	r5, r0
	    evt->role == BT_HCI_ROLE_SLAVE &&
   16358:	78e3      	ldrb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1635a:	2b01      	cmp	r3, #1
   1635c:	d045      	beq.n	163ea <bt_hci_le_enh_conn_complete+0x116>
	if (!conn) {
   1635e:	2d00      	cmp	r5, #0
   16360:	d053      	beq.n	1640a <bt_hci_le_enh_conn_complete+0x136>
	conn->handle = handle;
   16362:	4628      	mov	r0, r5
   16364:	f820 7b88 	strh.w	r7, [r0], #136
   16368:	2207      	movs	r2, #7
   1636a:	4669      	mov	r1, sp
   1636c:	f00e fb7e 	bl	24a6c <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   16370:	f8b4 3017 	ldrh.w	r3, [r4, #23]
   16374:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   16378:	f8b4 3019 	ldrh.w	r3, [r4, #25]
   1637c:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   16380:	f8b4 301b 	ldrh.w	r3, [r4, #27]
   16384:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
   16388:	78e3      	ldrb	r3, [r4, #3]
   1638a:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
   1638c:	2200      	movs	r2, #0
   1638e:	732a      	strb	r2, [r5, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16390:	2b01      	cmp	r3, #1
   16392:	d054      	beq.n	1643e <bt_hci_le_enh_conn_complete+0x16a>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   16394:	2107      	movs	r1, #7
   16396:	4628      	mov	r0, r5
   16398:	f002 f900 	bl	1859c <bt_conn_set_state>
	if (is_disconnected) {
   1639c:	2e00      	cmp	r6, #0
   1639e:	d16a      	bne.n	16476 <bt_hci_le_enh_conn_complete+0x1a2>
	bt_conn_connected(conn);
   163a0:	4628      	mov	r0, r5
   163a2:	f00f fa53 	bl	2584c <bt_conn_connected>
	conn_auto_initiate(conn);
   163a6:	4628      	mov	r0, r5
   163a8:	f7ff ff08 	bl	161bc <conn_auto_initiate>
	bt_conn_unref(conn);
   163ac:	4628      	mov	r0, r5
   163ae:	f00f faa3 	bl	258f8 <bt_conn_unref>
}
   163b2:	b004      	add	sp, #16
   163b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   163b8:	2207      	movs	r2, #7
   163ba:	1d21      	adds	r1, r4, #4
   163bc:	4668      	mov	r0, sp
   163be:	f00e fb55 	bl	24a6c <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   163c2:	f89d 3000 	ldrb.w	r3, [sp]
   163c6:	3b02      	subs	r3, #2
   163c8:	f88d 3000 	strb.w	r3, [sp]
	memcpy(dst, src, sizeof(*dst));
   163cc:	2206      	movs	r2, #6
   163ce:	f104 0111 	add.w	r1, r4, #17
   163d2:	f10d 0009 	add.w	r0, sp, #9
   163d6:	f00e fb49 	bl	24a6c <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   163da:	2301      	movs	r3, #1
   163dc:	f88d 3008 	strb.w	r3, [sp, #8]
   163e0:	e7b5      	b.n	1634e <bt_hci_le_enh_conn_complete+0x7a>
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
   163e2:	4b2a      	ldr	r3, [pc, #168]	; (1648c <bt_hci_le_enh_conn_complete+0x1b8>)
   163e4:	f893 0033 	ldrb.w	r0, [r3, #51]	; 0x33
   163e8:	e7a3      	b.n	16332 <bt_hci_le_enh_conn_complete+0x5e>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   163ea:	f001 fa49 	bl	17880 <bt_le_adv_lookup_legacy>
		atomic_clear_bit(adv->flags, BT_ADV_ENABLED);
   163ee:	3010      	adds	r0, #16
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   163f0:	f3bf 8f5b 	dmb	ish
   163f4:	e850 3f00 	ldrex	r3, [r0]
   163f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   163fc:	e840 3200 	strex	r2, r3, [r0]
   16400:	2a00      	cmp	r2, #0
   16402:	d1f7      	bne.n	163f4 <bt_hci_le_enh_conn_complete+0x120>
   16404:	f3bf 8f5b 	dmb	ish
}
   16408:	e7a9      	b.n	1635e <bt_hci_le_enh_conn_complete+0x8a>
   1640a:	4b1d      	ldr	r3, [pc, #116]	; (16480 <bt_hci_le_enh_conn_complete+0x1ac>)
   1640c:	4a1d      	ldr	r2, [pc, #116]	; (16484 <bt_hci_le_enh_conn_complete+0x1b0>)
   1640e:	1a9b      	subs	r3, r3, r2
   16410:	08db      	lsrs	r3, r3, #3
		BT_ERR("No pending conn for peer %s",
   16412:	2201      	movs	r2, #1
   16414:	f362 0502 	bfi	r5, r2, #0, #3
   16418:	f36f 05c5 	bfc	r5, #3, #3
   1641c:	f363 158f 	bfi	r5, r3, #6, #10
   16420:	1d20      	adds	r0, r4, #4
   16422:	f7fd ff39 	bl	14298 <bt_addr_le_str_real>
   16426:	f7fa fcf9 	bl	10e1c <z_log_strdup>
   1642a:	4601      	mov	r1, r0
   1642c:	462a      	mov	r2, r5
   1642e:	4818      	ldr	r0, [pc, #96]	; (16490 <bt_hci_le_enh_conn_complete+0x1bc>)
   16430:	f7fa fe6e 	bl	11110 <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   16434:	211f      	movs	r1, #31
   16436:	4640      	mov	r0, r8
   16438:	f00e fce3 	bl	24e02 <bt_hci_disconnect>
		return;
   1643c:	e7b9      	b.n	163b2 <bt_hci_le_enh_conn_complete+0xde>
	memcpy(dst, src, sizeof(*dst));
   1643e:	2207      	movs	r2, #7
   16440:	a902      	add	r1, sp, #8
   16442:	f105 008f 	add.w	r0, r5, #143	; 0x8f
   16446:	f00e fb11 	bl	24a6c <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   1644a:	f001 fa19 	bl	17880 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   1644e:	7a29      	ldrb	r1, [r5, #8]
   16450:	4c0e      	ldr	r4, [pc, #56]	; (1648c <bt_hci_le_enh_conn_complete+0x1b8>)
   16452:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   16456:	2207      	movs	r2, #7
   16458:	4421      	add	r1, r4
   1645a:	f105 0096 	add.w	r0, r5, #150	; 0x96
   1645e:	f00e fb05 	bl	24a6c <memcpy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
   16462:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
   16466:	2200      	movs	r2, #0
   16468:	f001 0340 	and.w	r3, r1, #64	; 0x40
   1646c:	4313      	orrs	r3, r2
   1646e:	d091      	beq.n	16394 <bt_hci_le_enh_conn_complete+0xc0>
			bt_le_adv_resume();
   16470:	f00f f817 	bl	254a2 <bt_le_adv_resume>
   16474:	e78e      	b.n	16394 <bt_hci_le_enh_conn_complete+0xc0>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   16476:	2101      	movs	r1, #1
   16478:	4628      	mov	r0, r5
   1647a:	f002 f88f 	bl	1859c <bt_conn_set_state>
   1647e:	e78f      	b.n	163a0 <bt_hci_le_enh_conn_complete+0xcc>
   16480:	00029f0c 	.word	0x00029f0c
   16484:	00029ecc 	.word	0x00029ecc
   16488:	0002b8b4 	.word	0x0002b8b4
   1648c:	200002a0 	.word	0x200002a0
   16490:	0002b8d0 	.word	0x0002b8d0

00016494 <le_phy_update_complete>:
{
   16494:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
   16496:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16498:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   1649c:	4628      	mov	r0, r5
   1649e:	f002 f873 	bl	18588 <bt_conn_lookup_handle>
	if (!conn) {
   164a2:	b1a0      	cbz	r0, 164ce <le_phy_update_complete+0x3a>
   164a4:	4604      	mov	r4, r0
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   164a6:	1d03      	adds	r3, r0, #4
   164a8:	f3bf 8f5b 	dmb	ish
   164ac:	e853 2f00 	ldrex	r2, [r3]
   164b0:	f022 0180 	bic.w	r1, r2, #128	; 0x80
   164b4:	e843 1000 	strex	r0, r1, [r3]
   164b8:	2800      	cmp	r0, #0
   164ba:	d1f7      	bne.n	164ac <le_phy_update_complete+0x18>
   164bc:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   164c0:	f012 0f80 	tst.w	r2, #128	; 0x80
   164c4:	d115      	bne.n	164f2 <le_phy_update_complete+0x5e>
	bt_conn_unref(conn);
   164c6:	4620      	mov	r0, r4
   164c8:	f00f fa16 	bl	258f8 <bt_conn_unref>
}
   164cc:	bd38      	pop	{r3, r4, r5, pc}
   164ce:	4b11      	ldr	r3, [pc, #68]	; (16514 <le_phy_update_complete+0x80>)
   164d0:	4a11      	ldr	r2, [pc, #68]	; (16518 <le_phy_update_complete+0x84>)
   164d2:	1a9b      	subs	r3, r3, r2
   164d4:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   164d6:	f04f 0200 	mov.w	r2, #0
   164da:	2101      	movs	r1, #1
   164dc:	f361 0202 	bfi	r2, r1, #0, #3
   164e0:	f36f 02c5 	bfc	r2, #3, #3
   164e4:	f363 128f 	bfi	r2, r3, #6, #10
   164e8:	4629      	mov	r1, r5
   164ea:	480c      	ldr	r0, [pc, #48]	; (1651c <le_phy_update_complete+0x88>)
   164ec:	f7fa fe10 	bl	11110 <log_1>
		return;
   164f0:	e7ec      	b.n	164cc <le_phy_update_complete+0x38>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   164f2:	f3bf 8f5b 	dmb	ish
   164f6:	e853 2f00 	ldrex	r2, [r3]
   164fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   164fe:	e843 2100 	strex	r1, r2, [r3]
   16502:	2900      	cmp	r1, #0
   16504:	d1f7      	bne.n	164f6 <le_phy_update_complete+0x62>
   16506:	f3bf 8f5b 	dmb	ish
		conn_auto_initiate(conn);
   1650a:	4620      	mov	r0, r4
   1650c:	f7ff fe56 	bl	161bc <conn_auto_initiate>
   16510:	e7d9      	b.n	164c6 <le_phy_update_complete+0x32>
   16512:	bf00      	nop
   16514:	00029f0c 	.word	0x00029f0c
   16518:	00029ecc 	.word	0x00029ecc
   1651c:	0002b3e4 	.word	0x0002b3e4

00016520 <le_remote_feat_complete>:
{
   16520:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   16522:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16524:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   16528:	4630      	mov	r0, r6
   1652a:	f002 f82d 	bl	18588 <bt_conn_lookup_handle>
	if (!conn) {
   1652e:	b1b0      	cbz	r0, 1655e <le_remote_feat_complete+0x3e>
   16530:	4604      	mov	r4, r0
	if (!evt->status) {
   16532:	782b      	ldrb	r3, [r5, #0]
   16534:	b32b      	cbz	r3, 16582 <le_remote_feat_complete+0x62>
	atomic_set_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH);
   16536:	1d23      	adds	r3, r4, #4
   16538:	f3bf 8f5b 	dmb	ish
   1653c:	e853 2f00 	ldrex	r2, [r3]
   16540:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   16544:	e843 2100 	strex	r1, r2, [r3]
   16548:	2900      	cmp	r1, #0
   1654a:	d1f7      	bne.n	1653c <le_remote_feat_complete+0x1c>
   1654c:	f3bf 8f5b 	dmb	ish
	conn_auto_initiate(conn);
   16550:	4620      	mov	r0, r4
   16552:	f7ff fe33 	bl	161bc <conn_auto_initiate>
	bt_conn_unref(conn);
   16556:	4620      	mov	r0, r4
   16558:	f00f f9ce 	bl	258f8 <bt_conn_unref>
}
   1655c:	bd70      	pop	{r4, r5, r6, pc}
   1655e:	4b0c      	ldr	r3, [pc, #48]	; (16590 <le_remote_feat_complete+0x70>)
   16560:	4a0c      	ldr	r2, [pc, #48]	; (16594 <le_remote_feat_complete+0x74>)
   16562:	1a9b      	subs	r3, r3, r2
   16564:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   16566:	f04f 0200 	mov.w	r2, #0
   1656a:	2101      	movs	r1, #1
   1656c:	f361 0202 	bfi	r2, r1, #0, #3
   16570:	f36f 02c5 	bfc	r2, #3, #3
   16574:	f363 128f 	bfi	r2, r3, #6, #10
   16578:	4631      	mov	r1, r6
   1657a:	4807      	ldr	r0, [pc, #28]	; (16598 <le_remote_feat_complete+0x78>)
   1657c:	f7fa fdc8 	bl	11110 <log_1>
		return;
   16580:	e7ec      	b.n	1655c <le_remote_feat_complete+0x3c>
		memcpy(conn->le.features, evt->features,
   16582:	2208      	movs	r2, #8
   16584:	1ce9      	adds	r1, r5, #3
   16586:	30ac      	adds	r0, #172	; 0xac
   16588:	f00e fa70 	bl	24a6c <memcpy>
   1658c:	e7d3      	b.n	16536 <le_remote_feat_complete+0x16>
   1658e:	bf00      	nop
   16590:	00029f0c 	.word	0x00029f0c
   16594:	00029ecc 	.word	0x00029ecc
   16598:	0002b3e4 	.word	0x0002b3e4

0001659c <le_ltk_reply>:
{
   1659c:	b570      	push	{r4, r5, r6, lr}
   1659e:	4605      	mov	r5, r0
   165a0:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   165a2:	2112      	movs	r1, #18
   165a4:	f242 001a 	movw	r0, #8218	; 0x201a
   165a8:	f7ff f946 	bl	15838 <bt_hci_cmd_create>
	if (!buf) {
   165ac:	b180      	cbz	r0, 165d0 <le_ltk_reply+0x34>
   165ae:	4606      	mov	r6, r0
   165b0:	2112      	movs	r1, #18
   165b2:	3008      	adds	r0, #8
   165b4:	f011 febd 	bl	28332 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   165b8:	f820 5b02 	strh.w	r5, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   165bc:	2210      	movs	r2, #16
   165be:	4621      	mov	r1, r4
   165c0:	f00e fa54 	bl	24a6c <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   165c4:	4631      	mov	r1, r6
   165c6:	f242 001a 	movw	r0, #8218	; 0x201a
   165ca:	f7ff fdbd 	bl	16148 <bt_hci_cmd_send>
}
   165ce:	bd70      	pop	{r4, r5, r6, pc}
   165d0:	4b08      	ldr	r3, [pc, #32]	; (165f4 <le_ltk_reply+0x58>)
   165d2:	4a09      	ldr	r2, [pc, #36]	; (165f8 <le_ltk_reply+0x5c>)
   165d4:	1a9b      	subs	r3, r3, r2
   165d6:	08db      	lsrs	r3, r3, #3
		BT_ERR("Out of command buffers");
   165d8:	f04f 0100 	mov.w	r1, #0
   165dc:	2201      	movs	r2, #1
   165de:	f362 0102 	bfi	r1, r2, #0, #3
   165e2:	f36f 01c5 	bfc	r1, #3, #3
   165e6:	f363 118f 	bfi	r1, r3, #6, #10
   165ea:	4804      	ldr	r0, [pc, #16]	; (165fc <le_ltk_reply+0x60>)
   165ec:	f7fa fe46 	bl	1127c <log_0>
		return;
   165f0:	e7ed      	b.n	165ce <le_ltk_reply+0x32>
   165f2:	bf00      	nop
   165f4:	00029f0c 	.word	0x00029f0c
   165f8:	00029ecc 	.word	0x00029ecc
   165fc:	0002b8ec 	.word	0x0002b8ec

00016600 <le_ltk_neg_reply>:
{
   16600:	b538      	push	{r3, r4, r5, lr}
   16602:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   16604:	2102      	movs	r1, #2
   16606:	f242 001b 	movw	r0, #8219	; 0x201b
   1660a:	f7ff f915 	bl	15838 <bt_hci_cmd_create>
	if (!buf) {
   1660e:	b158      	cbz	r0, 16628 <le_ltk_neg_reply+0x28>
   16610:	4605      	mov	r5, r0
   16612:	2102      	movs	r1, #2
   16614:	3008      	adds	r0, #8
   16616:	f011 fe8c 	bl	28332 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   1661a:	8004      	strh	r4, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1661c:	4629      	mov	r1, r5
   1661e:	f242 001b 	movw	r0, #8219	; 0x201b
   16622:	f7ff fd91 	bl	16148 <bt_hci_cmd_send>
}
   16626:	bd38      	pop	{r3, r4, r5, pc}
   16628:	4b08      	ldr	r3, [pc, #32]	; (1664c <le_ltk_neg_reply+0x4c>)
   1662a:	4a09      	ldr	r2, [pc, #36]	; (16650 <le_ltk_neg_reply+0x50>)
   1662c:	1a9b      	subs	r3, r3, r2
   1662e:	08db      	lsrs	r3, r3, #3
		BT_ERR("Out of command buffers");
   16630:	f04f 0100 	mov.w	r1, #0
   16634:	2201      	movs	r2, #1
   16636:	f362 0102 	bfi	r1, r2, #0, #3
   1663a:	f36f 01c5 	bfc	r1, #3, #3
   1663e:	f363 118f 	bfi	r1, r3, #6, #10
   16642:	4804      	ldr	r0, [pc, #16]	; (16654 <le_ltk_neg_reply+0x54>)
   16644:	f7fa fe1a 	bl	1127c <log_0>
		return;
   16648:	e7ed      	b.n	16626 <le_ltk_neg_reply+0x26>
   1664a:	bf00      	nop
   1664c:	00029f0c 	.word	0x00029f0c
   16650:	00029ecc 	.word	0x00029ecc
   16654:	0002b8ec 	.word	0x0002b8ec

00016658 <le_ltk_request>:
{
   16658:	b570      	push	{r4, r5, r6, lr}
   1665a:	b086      	sub	sp, #24
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   1665c:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   1665e:	8825      	ldrh	r5, [r4, #0]
	conn = bt_conn_lookup_handle(handle);
   16660:	4628      	mov	r0, r5
   16662:	f001 ff91 	bl	18588 <bt_conn_lookup_handle>
	if (!conn) {
   16666:	b1a0      	cbz	r0, 16692 <le_ltk_request+0x3a>
   16668:	4606      	mov	r6, r0
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   1666a:	f8d4 2002 	ldr.w	r2, [r4, #2]
   1666e:	f8d4 3006 	ldr.w	r3, [r4, #6]
   16672:	a902      	add	r1, sp, #8
   16674:	9101      	str	r1, [sp, #4]
   16676:	8961      	ldrh	r1, [r4, #10]
   16678:	9100      	str	r1, [sp, #0]
   1667a:	f011 f951 	bl	27920 <bt_smp_request_ltk>
   1667e:	b1d0      	cbz	r0, 166b6 <le_ltk_request+0x5e>
		le_ltk_reply(handle, ltk);
   16680:	a902      	add	r1, sp, #8
   16682:	4628      	mov	r0, r5
   16684:	f7ff ff8a 	bl	1659c <le_ltk_reply>
	bt_conn_unref(conn);
   16688:	4630      	mov	r0, r6
   1668a:	f00f f935 	bl	258f8 <bt_conn_unref>
}
   1668e:	b006      	add	sp, #24
   16690:	bd70      	pop	{r4, r5, r6, pc}
   16692:	4b0b      	ldr	r3, [pc, #44]	; (166c0 <le_ltk_request+0x68>)
   16694:	4a0b      	ldr	r2, [pc, #44]	; (166c4 <le_ltk_request+0x6c>)
   16696:	1a9b      	subs	r3, r3, r2
   16698:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1669a:	f04f 0200 	mov.w	r2, #0
   1669e:	2101      	movs	r1, #1
   166a0:	f361 0202 	bfi	r2, r1, #0, #3
   166a4:	f36f 02c5 	bfc	r2, #3, #3
   166a8:	f363 128f 	bfi	r2, r3, #6, #10
   166ac:	4629      	mov	r1, r5
   166ae:	4806      	ldr	r0, [pc, #24]	; (166c8 <le_ltk_request+0x70>)
   166b0:	f7fa fd2e 	bl	11110 <log_1>
		return;
   166b4:	e7eb      	b.n	1668e <le_ltk_request+0x36>
		le_ltk_neg_reply(handle);
   166b6:	4628      	mov	r0, r5
   166b8:	f7ff ffa2 	bl	16600 <le_ltk_neg_reply>
   166bc:	e7e4      	b.n	16688 <le_ltk_request+0x30>
   166be:	bf00      	nop
   166c0:	00029f0c 	.word	0x00029f0c
   166c4:	00029ecc 	.word	0x00029ecc
   166c8:	0002b3e4 	.word	0x0002b3e4

000166cc <le_conn_param_neg_reply>:
{
   166cc:	b570      	push	{r4, r5, r6, lr}
   166ce:	4605      	mov	r5, r0
   166d0:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   166d2:	2103      	movs	r1, #3
   166d4:	f242 0021 	movw	r0, #8225	; 0x2021
   166d8:	f7ff f8ae 	bl	15838 <bt_hci_cmd_create>
	if (!buf) {
   166dc:	b160      	cbz	r0, 166f8 <le_conn_param_neg_reply+0x2c>
   166de:	4606      	mov	r6, r0
   166e0:	2103      	movs	r1, #3
   166e2:	3008      	adds	r0, #8
   166e4:	f011 fe25 	bl	28332 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   166e8:	8005      	strh	r5, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   166ea:	7084      	strb	r4, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   166ec:	4631      	mov	r1, r6
   166ee:	f242 0021 	movw	r0, #8225	; 0x2021
   166f2:	f7ff fd29 	bl	16148 <bt_hci_cmd_send>
}
   166f6:	bd70      	pop	{r4, r5, r6, pc}
   166f8:	4b08      	ldr	r3, [pc, #32]	; (1671c <le_conn_param_neg_reply+0x50>)
   166fa:	4a09      	ldr	r2, [pc, #36]	; (16720 <le_conn_param_neg_reply+0x54>)
   166fc:	1a9b      	subs	r3, r3, r2
   166fe:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to allocate buffer");
   16700:	f04f 0100 	mov.w	r1, #0
   16704:	2201      	movs	r2, #1
   16706:	f362 0102 	bfi	r1, r2, #0, #3
   1670a:	f36f 01c5 	bfc	r1, #3, #3
   1670e:	f363 118f 	bfi	r1, r3, #6, #10
   16712:	4804      	ldr	r0, [pc, #16]	; (16724 <le_conn_param_neg_reply+0x58>)
   16714:	f7fa fdb2 	bl	1127c <log_0>
		return;
   16718:	e7ed      	b.n	166f6 <le_conn_param_neg_reply+0x2a>
   1671a:	bf00      	nop
   1671c:	00029f0c 	.word	0x00029f0c
   16720:	00029ecc 	.word	0x00029ecc
   16724:	0002b904 	.word	0x0002b904

00016728 <le_conn_param_req>:
{
   16728:	b530      	push	{r4, r5, lr}
   1672a:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   1672c:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   1672e:	881c      	ldrh	r4, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   16730:	885a      	ldrh	r2, [r3, #2]
   16732:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   16736:	889a      	ldrh	r2, [r3, #4]
   16738:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   1673c:	88da      	ldrh	r2, [r3, #6]
   1673e:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   16742:	891b      	ldrh	r3, [r3, #8]
   16744:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   16748:	4620      	mov	r0, r4
   1674a:	f001 ff1d 	bl	18588 <bt_conn_lookup_handle>
	if (!conn) {
   1674e:	b168      	cbz	r0, 1676c <le_conn_param_req+0x44>
   16750:	4605      	mov	r5, r0
	if (!le_param_req(conn, &param)) {
   16752:	4669      	mov	r1, sp
   16754:	f001 fd64 	bl	18220 <le_param_req>
   16758:	b9f0      	cbnz	r0, 16798 <le_conn_param_req+0x70>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   1675a:	211e      	movs	r1, #30
   1675c:	4620      	mov	r0, r4
   1675e:	f7ff ffb5 	bl	166cc <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   16762:	4628      	mov	r0, r5
   16764:	f00f f8c8 	bl	258f8 <bt_conn_unref>
}
   16768:	b003      	add	sp, #12
   1676a:	bd30      	pop	{r4, r5, pc}
   1676c:	4b0d      	ldr	r3, [pc, #52]	; (167a4 <le_conn_param_req+0x7c>)
   1676e:	4a0e      	ldr	r2, [pc, #56]	; (167a8 <le_conn_param_req+0x80>)
   16770:	1a9b      	subs	r3, r3, r2
   16772:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   16774:	f04f 0200 	mov.w	r2, #0
   16778:	2101      	movs	r1, #1
   1677a:	f361 0202 	bfi	r2, r1, #0, #3
   1677e:	f36f 02c5 	bfc	r2, #3, #3
   16782:	f363 128f 	bfi	r2, r3, #6, #10
   16786:	4621      	mov	r1, r4
   16788:	4808      	ldr	r0, [pc, #32]	; (167ac <le_conn_param_req+0x84>)
   1678a:	f7fa fcc1 	bl	11110 <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   1678e:	2102      	movs	r1, #2
   16790:	4620      	mov	r0, r4
   16792:	f7ff ff9b 	bl	166cc <le_conn_param_neg_reply>
		return;
   16796:	e7e7      	b.n	16768 <le_conn_param_req+0x40>
		le_conn_param_req_reply(handle, &param);
   16798:	4669      	mov	r1, sp
   1679a:	4620      	mov	r0, r4
   1679c:	f00e fc39 	bl	25012 <le_conn_param_req_reply>
   167a0:	e7df      	b.n	16762 <le_conn_param_req+0x3a>
   167a2:	bf00      	nop
   167a4:	00029f0c 	.word	0x00029f0c
   167a8:	00029ecc 	.word	0x00029ecc
   167ac:	0002b3e4 	.word	0x0002b3e4

000167b0 <send_cmd>:
{
   167b0:	b538      	push	{r3, r4, r5, lr}
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   167b2:	2200      	movs	r2, #0
   167b4:	2300      	movs	r3, #0
   167b6:	4837      	ldr	r0, [pc, #220]	; (16894 <send_cmd+0xe4>)
   167b8:	f011 fd45 	bl	28246 <net_buf_get>
	BT_ASSERT(buf);
   167bc:	4604      	mov	r4, r0
   167be:	b370      	cbz	r0, 1681e <send_cmd+0x6e>
   167c0:	4d35      	ldr	r5, [pc, #212]	; (16898 <send_cmd+0xe8>)
   167c2:	f04f 32ff 	mov.w	r2, #4294967295
   167c6:	f04f 33ff 	mov.w	r3, #4294967295
   167ca:	f105 00f0 	add.w	r0, r5, #240	; 0xf0
   167ce:	f009 fadb 	bl	1fd88 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   167d2:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   167d6:	b1b3      	cbz	r3, 16806 <send_cmd+0x56>
   167d8:	4b30      	ldr	r3, [pc, #192]	; (1689c <send_cmd+0xec>)
   167da:	4a31      	ldr	r2, [pc, #196]	; (168a0 <send_cmd+0xf0>)
   167dc:	1a9b      	subs	r3, r3, r2
   167de:	08db      	lsrs	r3, r3, #3
		BT_ERR("Uncleared pending sent_cmd");
   167e0:	f04f 0100 	mov.w	r1, #0
   167e4:	2201      	movs	r2, #1
   167e6:	f362 0102 	bfi	r1, r2, #0, #3
   167ea:	f36f 01c5 	bfc	r1, #3, #3
   167ee:	f363 118f 	bfi	r1, r3, #6, #10
   167f2:	482c      	ldr	r0, [pc, #176]	; (168a4 <send_cmd+0xf4>)
   167f4:	f7fa fd42 	bl	1127c <log_0>
		net_buf_unref(bt_dev.sent_cmd);
   167f8:	f8d5 0108 	ldr.w	r0, [r5, #264]	; 0x108
   167fc:	f011 fd4f 	bl	2829e <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   16800:	2300      	movs	r3, #0
   16802:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
	bt_dev.sent_cmd = net_buf_ref(buf);
   16806:	4620      	mov	r0, r4
   16808:	f011 fd6f 	bl	282ea <net_buf_ref>
   1680c:	4b22      	ldr	r3, [pc, #136]	; (16898 <send_cmd+0xe8>)
   1680e:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	err = bt_send(buf);
   16812:	4620      	mov	r0, r4
   16814:	f00e fb5e 	bl	24ed4 <bt_send>
	if (err) {
   16818:	4601      	mov	r1, r0
   1681a:	b970      	cbnz	r0, 1683a <send_cmd+0x8a>
}
   1681c:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf);
   1681e:	f640 130c 	movw	r3, #2316	; 0x90c
   16822:	4a21      	ldr	r2, [pc, #132]	; (168a8 <send_cmd+0xf8>)
   16824:	4921      	ldr	r1, [pc, #132]	; (168ac <send_cmd+0xfc>)
   16826:	4822      	ldr	r0, [pc, #136]	; (168b0 <send_cmd+0x100>)
   16828:	f00a feb0 	bl	2158c <printk>
   1682c:	4040      	eors	r0, r0
   1682e:	f380 8811 	msr	BASEPRI, r0
   16832:	f04f 0003 	mov.w	r0, #3
   16836:	df02      	svc	2
   16838:	e7c2      	b.n	167c0 <send_cmd+0x10>
   1683a:	4b18      	ldr	r3, [pc, #96]	; (1689c <send_cmd+0xec>)
   1683c:	4a18      	ldr	r2, [pc, #96]	; (168a0 <send_cmd+0xf0>)
   1683e:	1a9b      	subs	r3, r3, r2
   16840:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to send to driver (err %d)", err);
   16842:	f04f 0200 	mov.w	r2, #0
   16846:	2001      	movs	r0, #1
   16848:	f360 0202 	bfi	r2, r0, #0, #3
   1684c:	f36f 02c5 	bfc	r2, #3, #3
   16850:	f363 128f 	bfi	r2, r3, #6, #10
   16854:	4817      	ldr	r0, [pc, #92]	; (168b4 <send_cmd+0x104>)
   16856:	f7fa fc5b 	bl	11110 <log_1>
	z_impl_k_sem_give(sem);
   1685a:	4d0f      	ldr	r5, [pc, #60]	; (16898 <send_cmd+0xe8>)
   1685c:	f105 00f0 	add.w	r0, r5, #240	; 0xf0
   16860:	f009 fa6a 	bl	1fd38 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   16864:	4620      	mov	r0, r4
   16866:	f007 fa6b 	bl	1dd40 <net_buf_id>
   1686a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1686e:	4b12      	ldr	r3, [pc, #72]	; (168b8 <send_cmd+0x108>)
   16870:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   16874:	4622      	mov	r2, r4
   16876:	211f      	movs	r1, #31
   16878:	8840      	ldrh	r0, [r0, #2]
   1687a:	f7fe fc31 	bl	150e0 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   1687e:	f8d5 0108 	ldr.w	r0, [r5, #264]	; 0x108
   16882:	f011 fd0c 	bl	2829e <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   16886:	2300      	movs	r3, #0
   16888:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
		net_buf_unref(buf);
   1688c:	4620      	mov	r0, r4
   1688e:	f011 fd06 	bl	2829e <net_buf_unref>
   16892:	e7c3      	b.n	1681c <send_cmd+0x6c>
   16894:	200003c4 	.word	0x200003c4
   16898:	200002a0 	.word	0x200002a0
   1689c:	00029f0c 	.word	0x00029f0c
   168a0:	00029ecc 	.word	0x00029ecc
   168a4:	0002b920 	.word	0x0002b920
   168a8:	0002b580 	.word	0x0002b580
   168ac:	0002cd80 	.word	0x0002cd80
   168b0:	0002b5d0 	.word	0x0002b5d0
   168b4:	0002b858 	.word	0x0002b858
   168b8:	200026a4 	.word	0x200026a4

000168bc <process_events>:
{
   168bc:	b570      	push	{r4, r5, r6, lr}
   168be:	4604      	mov	r4, r0
   168c0:	460d      	mov	r5, r1
	for (; count; ev++, count--) {
   168c2:	e013      	b.n	168ec <process_events+0x30>
				send_cmd();
   168c4:	f7ff ff74 	bl	167b0 <send_cmd>
   168c8:	e00e      	b.n	168e8 <process_events+0x2c>
   168ca:	4b12      	ldr	r3, [pc, #72]	; (16914 <process_events+0x58>)
   168cc:	4a12      	ldr	r2, [pc, #72]	; (16918 <process_events+0x5c>)
   168ce:	1a9b      	subs	r3, r3, r2
   168d0:	08db      	lsrs	r3, r3, #3
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   168d2:	2202      	movs	r2, #2
   168d4:	f362 0602 	bfi	r6, r2, #0, #3
   168d8:	f36f 06c5 	bfc	r6, #3, #3
   168dc:	f363 168f 	bfi	r6, r3, #6, #10
   168e0:	4632      	mov	r2, r6
   168e2:	480e      	ldr	r0, [pc, #56]	; (1691c <process_events+0x60>)
   168e4:	f7fa fc14 	bl	11110 <log_1>
	for (; count; ev++, count--) {
   168e8:	3414      	adds	r4, #20
   168ea:	3d01      	subs	r5, #1
   168ec:	b185      	cbz	r5, 16910 <process_events+0x54>
		switch (ev->state) {
   168ee:	68e1      	ldr	r1, [r4, #12]
   168f0:	f3c1 3145 	ubfx	r1, r1, #13, #6
   168f4:	2901      	cmp	r1, #1
   168f6:	d9f7      	bls.n	168e8 <process_events+0x2c>
   168f8:	2904      	cmp	r1, #4
   168fa:	d1e6      	bne.n	168ca <process_events+0xe>
			if (ev->tag == BT_EVENT_CMD_TX) {
   168fc:	7b23      	ldrb	r3, [r4, #12]
   168fe:	2b00      	cmp	r3, #0
   16900:	d0e0      	beq.n	168c4 <process_events+0x8>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   16902:	2b01      	cmp	r3, #1
   16904:	d1f0      	bne.n	168e8 <process_events+0x2c>
					conn = CONTAINER_OF(ev->fifo,
   16906:	6920      	ldr	r0, [r4, #16]
					bt_conn_process_tx(conn);
   16908:	3838      	subs	r0, #56	; 0x38
   1690a:	f002 f91b 	bl	18b44 <bt_conn_process_tx>
   1690e:	e7eb      	b.n	168e8 <process_events+0x2c>
}
   16910:	bd70      	pop	{r4, r5, r6, pc}
   16912:	bf00      	nop
   16914:	00029f0c 	.word	0x00029f0c
   16918:	00029ecc 	.word	0x00029ecc
   1691c:	0002b93c 	.word	0x0002b93c

00016920 <hci_tx_thread>:
{
   16920:	b538      	push	{r3, r4, r5, lr}
   16922:	e005      	b.n	16930 <hci_tx_thread+0x10>
		process_events(events, ev_count);
   16924:	4621      	mov	r1, r4
   16926:	4813      	ldr	r0, [pc, #76]	; (16974 <hci_tx_thread+0x54>)
   16928:	f7ff ffc8 	bl	168bc <process_events>
	z_impl_k_yield();
   1692c:	f009 ff46 	bl	207bc <z_impl_k_yield>
		events[0].state = K_POLL_STATE_NOT_READY;
   16930:	4d10      	ldr	r5, [pc, #64]	; (16974 <hci_tx_thread+0x54>)
   16932:	68eb      	ldr	r3, [r5, #12]
   16934:	f36f 3352 	bfc	r3, #13, #6
   16938:	60eb      	str	r3, [r5, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   1693a:	f105 0014 	add.w	r0, r5, #20
   1693e:	f001 fdff 	bl	18540 <bt_conn_prepare_events>
   16942:	1c44      	adds	r4, r0, #1
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   16944:	f04f 32ff 	mov.w	r2, #4294967295
   16948:	f04f 33ff 	mov.w	r3, #4294967295
   1694c:	4621      	mov	r1, r4
   1694e:	4628      	mov	r0, r5
   16950:	f00a fa6e 	bl	20e30 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   16954:	2800      	cmp	r0, #0
   16956:	d0e5      	beq.n	16924 <hci_tx_thread+0x4>
   16958:	f640 136f 	movw	r3, #2415	; 0x96f
   1695c:	4a06      	ldr	r2, [pc, #24]	; (16978 <hci_tx_thread+0x58>)
   1695e:	4907      	ldr	r1, [pc, #28]	; (1697c <hci_tx_thread+0x5c>)
   16960:	4807      	ldr	r0, [pc, #28]	; (16980 <hci_tx_thread+0x60>)
   16962:	f00a fe13 	bl	2158c <printk>
   16966:	4040      	eors	r0, r0
   16968:	f380 8811 	msr	BASEPRI, r0
   1696c:	f04f 0003 	mov.w	r0, #3
   16970:	df02      	svc	2
   16972:	e7d7      	b.n	16924 <hci_tx_thread+0x4>
   16974:	2000051c 	.word	0x2000051c
   16978:	0002b580 	.word	0x0002b580
   1697c:	0002b6c4 	.word	0x0002b6c4
   16980:	0002b5d0 	.word	0x0002b5d0

00016984 <hci_event_prio>:
{
   16984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16988:	b084      	sub	sp, #16
   1698a:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   1698c:	f100 0508 	add.w	r5, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   16990:	4628      	mov	r0, r5
   16992:	f011 fd06 	bl	283a2 <net_buf_simple_headroom>
   16996:	f8ad 000c 	strh.w	r0, [sp, #12]
	state->len = buf->len;
   1699a:	89a3      	ldrh	r3, [r4, #12]
   1699c:	f8ad 300e 	strh.w	r3, [sp, #14]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   169a0:	2b01      	cmp	r3, #1
   169a2:	d915      	bls.n	169d0 <hci_event_prio+0x4c>
	return net_buf_simple_pull_mem(&buf->b, len);
   169a4:	2102      	movs	r1, #2
   169a6:	4628      	mov	r0, r5
   169a8:	f011 fceb 	bl	28382 <net_buf_simple_pull_mem>
   169ac:	4605      	mov	r5, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   169ae:	7803      	ldrb	r3, [r0, #0]
	switch (evt) {
   169b0:	3b05      	subs	r3, #5
   169b2:	2b15      	cmp	r3, #21
   169b4:	d81c      	bhi.n	169f0 <hci_event_prio+0x6c>
   169b6:	e8df f003 	tbb	[pc, r3]
   169ba:	1b19      	.short	0x1b19
   169bc:	1b1b1b1b 	.word	0x1b1b1b1b
   169c0:	3f1b1b1b 	.word	0x3f1b1b1b
   169c4:	1b1b1b3f 	.word	0x1b1b1b3f
   169c8:	1b1b1b3f 	.word	0x1b1b1b3f
   169cc:	3f1b1b1b 	.word	0x3f1b1b1b
	BT_ASSERT(buf->len >= sizeof(*hdr));
   169d0:	f640 43dc 	movw	r3, #3292	; 0xcdc
   169d4:	4a3b      	ldr	r2, [pc, #236]	; (16ac4 <hci_event_prio+0x140>)
   169d6:	493c      	ldr	r1, [pc, #240]	; (16ac8 <hci_event_prio+0x144>)
   169d8:	483c      	ldr	r0, [pc, #240]	; (16acc <hci_event_prio+0x148>)
   169da:	f00a fdd7 	bl	2158c <printk>
   169de:	4040      	eors	r0, r0
   169e0:	f380 8811 	msr	BASEPRI, r0
   169e4:	f04f 0003 	mov.w	r0, #3
   169e8:	df02      	svc	2
   169ea:	e7db      	b.n	169a4 <hci_event_prio+0x20>
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   169ec:	2603      	movs	r6, #3
   169ee:	e000      	b.n	169f2 <hci_event_prio+0x6e>
		return BT_HCI_EVT_FLAG_RECV;
   169f0:	2602      	movs	r6, #2
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   169f2:	f016 0f01 	tst.w	r6, #1
   169f6:	d021      	beq.n	16a3c <hci_event_prio+0xb8>
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   169f8:	782d      	ldrb	r5, [r5, #0]
	for (i = 0; i < num_handlers; i++) {
   169fa:	2300      	movs	r3, #0
   169fc:	2b04      	cmp	r3, #4
   169fe:	d83f      	bhi.n	16a80 <hci_event_prio+0xfc>
		const struct event_handler *handler = &handlers[i];
   16a00:	4a33      	ldr	r2, [pc, #204]	; (16ad0 <hci_event_prio+0x14c>)
   16a02:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
		if (handler->event != event) {
   16a06:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   16a0a:	4295      	cmp	r5, r2
   16a0c:	d124      	bne.n	16a58 <hci_event_prio+0xd4>
		if (buf->len < handler->min_len) {
   16a0e:	89a1      	ldrh	r1, [r4, #12]
   16a10:	7843      	ldrb	r3, [r0, #1]
   16a12:	4299      	cmp	r1, r3
   16a14:	d322      	bcc.n	16a5c <hci_event_prio+0xd8>
		handler->handler(buf);
   16a16:	6843      	ldr	r3, [r0, #4]
   16a18:	4620      	mov	r0, r4
   16a1a:	4798      	blx	r3
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   16a1c:	f016 0f02 	tst.w	r6, #2
   16a20:	d04c      	beq.n	16abc <hci_event_prio+0x138>
	buf->data = buf->__buf + state->offset;
   16a22:	6923      	ldr	r3, [r4, #16]
   16a24:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   16a28:	4413      	add	r3, r2
   16a2a:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
   16a2c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   16a30:	81a3      	strh	r3, [r4, #12]
}
   16a32:	b004      	add	sp, #16
   16a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   16a38:	2601      	movs	r6, #1
   16a3a:	e7da      	b.n	169f2 <hci_event_prio+0x6e>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   16a3c:	f44f 634e 	mov.w	r3, #3296	; 0xce0
   16a40:	4a20      	ldr	r2, [pc, #128]	; (16ac4 <hci_event_prio+0x140>)
   16a42:	4924      	ldr	r1, [pc, #144]	; (16ad4 <hci_event_prio+0x150>)
   16a44:	4821      	ldr	r0, [pc, #132]	; (16acc <hci_event_prio+0x148>)
   16a46:	f00a fda1 	bl	2158c <printk>
   16a4a:	4040      	eors	r0, r0
   16a4c:	f380 8811 	msr	BASEPRI, r0
   16a50:	f04f 0003 	mov.w	r0, #3
   16a54:	df02      	svc	2
   16a56:	e7cf      	b.n	169f8 <hci_event_prio+0x74>
	for (i = 0; i < num_handlers; i++) {
   16a58:	3301      	adds	r3, #1
   16a5a:	e7cf      	b.n	169fc <hci_event_prio+0x78>
   16a5c:	4a1e      	ldr	r2, [pc, #120]	; (16ad8 <hci_event_prio+0x154>)
   16a5e:	4b1f      	ldr	r3, [pc, #124]	; (16adc <hci_event_prio+0x158>)
   16a60:	1ad2      	subs	r2, r2, r3
   16a62:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Too small (%u bytes) event 0x%02x",
   16a64:	f04f 0300 	mov.w	r3, #0
   16a68:	2001      	movs	r0, #1
   16a6a:	f360 0302 	bfi	r3, r0, #0, #3
   16a6e:	f36f 03c5 	bfc	r3, #3, #3
   16a72:	f362 138f 	bfi	r3, r2, #6, #10
   16a76:	462a      	mov	r2, r5
   16a78:	4819      	ldr	r0, [pc, #100]	; (16ae0 <hci_event_prio+0x15c>)
   16a7a:	f7fa fb7f 	bl	1117c <log_2>
			return;
   16a7e:	e7cd      	b.n	16a1c <hci_event_prio+0x98>
   16a80:	4b15      	ldr	r3, [pc, #84]	; (16ad8 <hci_event_prio+0x154>)
   16a82:	4a16      	ldr	r2, [pc, #88]	; (16adc <hci_event_prio+0x158>)
   16a84:	1a9b      	subs	r3, r3, r2
   16a86:	08db      	lsrs	r3, r3, #3
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   16a88:	f04f 0700 	mov.w	r7, #0
   16a8c:	2202      	movs	r2, #2
   16a8e:	f362 0702 	bfi	r7, r2, #0, #3
   16a92:	f36f 07c5 	bfc	r7, #3, #3
   16a96:	f363 178f 	bfi	r7, r3, #6, #10
   16a9a:	f8b4 800c 	ldrh.w	r8, [r4, #12]
   16a9e:	4641      	mov	r1, r8
   16aa0:	68a0      	ldr	r0, [r4, #8]
   16aa2:	f7fd fbd1 	bl	14248 <bt_hex_real>
   16aa6:	f7fa f9b9 	bl	10e1c <z_log_strdup>
   16aaa:	4603      	mov	r3, r0
   16aac:	f8ad 7000 	strh.w	r7, [sp]
   16ab0:	4642      	mov	r2, r8
   16ab2:	4629      	mov	r1, r5
   16ab4:	480b      	ldr	r0, [pc, #44]	; (16ae4 <hci_event_prio+0x160>)
   16ab6:	f7fa faed 	bl	11094 <log_3>
   16aba:	e7af      	b.n	16a1c <hci_event_prio+0x98>
		net_buf_unref(buf);
   16abc:	4620      	mov	r0, r4
   16abe:	f011 fbee 	bl	2829e <net_buf_unref>
}
   16ac2:	e7b6      	b.n	16a32 <hci_event_prio+0xae>
   16ac4:	0002b580 	.word	0x0002b580
   16ac8:	0002b5b4 	.word	0x0002b5b4
   16acc:	0002b5d0 	.word	0x0002b5d0
   16ad0:	0002bac0 	.word	0x0002bac0
   16ad4:	0002b960 	.word	0x0002b960
   16ad8:	00029f0c 	.word	0x00029f0c
   16adc:	00029ecc 	.word	0x00029ecc
   16ae0:	0002b638 	.word	0x0002b638
   16ae4:	0002b65c 	.word	0x0002b65c

00016ae8 <bt_recv>:
{
   16ae8:	b538      	push	{r3, r4, r5, lr}
   16aea:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   16aec:	7d05      	ldrb	r5, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   16aee:	2d01      	cmp	r5, #1
   16af0:	d007      	beq.n	16b02 <bt_recv+0x1a>
   16af2:	2d03      	cmp	r5, #3
   16af4:	d12c      	bne.n	16b50 <bt_recv+0x68>
		net_buf_put(&bt_dev.rx_queue, buf);
   16af6:	4601      	mov	r1, r0
   16af8:	4821      	ldr	r0, [pc, #132]	; (16b80 <bt_recv+0x98>)
   16afa:	f011 fbc3 	bl	28284 <net_buf_put>
		return 0;
   16afe:	2000      	movs	r0, #0
}
   16b00:	bd38      	pop	{r3, r4, r5, pc}
		struct bt_hci_evt_hdr *hdr = (void *)buf->data;
   16b02:	6883      	ldr	r3, [r0, #8]
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   16b04:	781b      	ldrb	r3, [r3, #0]
	switch (evt) {
   16b06:	3b05      	subs	r3, #5
   16b08:	2b15      	cmp	r3, #21
   16b0a:	d80e      	bhi.n	16b2a <bt_recv+0x42>
   16b0c:	e8df f003 	tbb	[pc, r3]
   16b10:	0d0d0d0b 	.word	0x0d0d0d0b
   16b14:	0d0d0d0d 	.word	0x0d0d0d0d
   16b18:	0d0e0e0d 	.word	0x0d0e0e0d
   16b1c:	0d0e0d0d 	.word	0x0d0e0d0d
   16b20:	0d0d0d0d 	.word	0x0d0d0d0d
   16b24:	0e0d      	.short	0x0e0d
   16b26:	2503      	movs	r5, #3
   16b28:	e000      	b.n	16b2c <bt_recv+0x44>
		return BT_HCI_EVT_FLAG_RECV;
   16b2a:	2502      	movs	r5, #2
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   16b2c:	f015 0f01 	tst.w	r5, #1
   16b30:	d104      	bne.n	16b3c <bt_recv+0x54>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   16b32:	f015 0f02 	tst.w	r5, #2
   16b36:	d105      	bne.n	16b44 <bt_recv+0x5c>
		return 0;
   16b38:	2000      	movs	r0, #0
   16b3a:	e7e1      	b.n	16b00 <bt_recv+0x18>
			hci_event_prio(buf);
   16b3c:	4620      	mov	r0, r4
   16b3e:	f7ff ff21 	bl	16984 <hci_event_prio>
   16b42:	e7f6      	b.n	16b32 <bt_recv+0x4a>
			net_buf_put(&bt_dev.rx_queue, buf);
   16b44:	4621      	mov	r1, r4
   16b46:	480e      	ldr	r0, [pc, #56]	; (16b80 <bt_recv+0x98>)
   16b48:	f011 fb9c 	bl	28284 <net_buf_put>
		return 0;
   16b4c:	2000      	movs	r0, #0
   16b4e:	e7d7      	b.n	16b00 <bt_recv+0x18>
   16b50:	4b0c      	ldr	r3, [pc, #48]	; (16b84 <bt_recv+0x9c>)
   16b52:	4a0d      	ldr	r2, [pc, #52]	; (16b88 <bt_recv+0xa0>)
   16b54:	1a9b      	subs	r3, r3, r2
   16b56:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   16b58:	f04f 0200 	mov.w	r2, #0
   16b5c:	2101      	movs	r1, #1
   16b5e:	f361 0202 	bfi	r2, r1, #0, #3
   16b62:	f36f 02c5 	bfc	r2, #3, #3
   16b66:	f363 128f 	bfi	r2, r3, #6, #10
   16b6a:	4629      	mov	r1, r5
   16b6c:	4807      	ldr	r0, [pc, #28]	; (16b8c <bt_recv+0xa4>)
   16b6e:	f7fa facf 	bl	11110 <log_1>
		net_buf_unref(buf);
   16b72:	4620      	mov	r0, r4
   16b74:	f011 fb93 	bl	2829e <net_buf_unref>
		return -EINVAL;
   16b78:	f06f 0015 	mvn.w	r0, #21
   16b7c:	e7c0      	b.n	16b00 <bt_recv+0x18>
   16b7e:	bf00      	nop
   16b80:	200003ac 	.word	0x200003ac
   16b84:	00029f0c 	.word	0x00029f0c
   16b88:	00029ecc 	.word	0x00029ecc
   16b8c:	0002b97c 	.word	0x0002b97c

00016b90 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   16b90:	4b0a      	ldr	r3, [pc, #40]	; (16bbc <bt_hci_driver_register+0x2c>)
   16b92:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
   16b96:	b943      	cbnz	r3, 16baa <bt_hci_driver_register+0x1a>
	if (!drv->open || !drv->send) {
   16b98:	68c3      	ldr	r3, [r0, #12]
   16b9a:	b14b      	cbz	r3, 16bb0 <bt_hci_driver_register+0x20>
   16b9c:	6903      	ldr	r3, [r0, #16]
   16b9e:	b153      	cbz	r3, 16bb6 <bt_hci_driver_register+0x26>
	bt_dev.drv = drv;
   16ba0:	4b06      	ldr	r3, [pc, #24]	; (16bbc <bt_hci_driver_register+0x2c>)
   16ba2:	f8c3 013c 	str.w	r0, [r3, #316]	; 0x13c
	return 0;
   16ba6:	2000      	movs	r0, #0
   16ba8:	4770      	bx	lr
		return -EALREADY;
   16baa:	f06f 0077 	mvn.w	r0, #119	; 0x77
   16bae:	4770      	bx	lr
		return -EINVAL;
   16bb0:	f06f 0015 	mvn.w	r0, #21
   16bb4:	4770      	bx	lr
   16bb6:	f06f 0015 	mvn.w	r0, #21
}
   16bba:	4770      	bx	lr
   16bbc:	200002a0 	.word	0x200002a0

00016bc0 <bt_finalize_init>:
{
   16bc0:	b508      	push	{r3, lr}
   16bc2:	4b08      	ldr	r3, [pc, #32]	; (16be4 <bt_finalize_init+0x24>)
   16bc4:	f3bf 8f5b 	dmb	ish
   16bc8:	e853 2f00 	ldrex	r2, [r3]
   16bcc:	f042 0202 	orr.w	r2, r2, #2
   16bd0:	e843 2100 	strex	r1, r2, [r3]
   16bd4:	2900      	cmp	r1, #0
   16bd6:	d1f7      	bne.n	16bc8 <bt_finalize_init+0x8>
   16bd8:	f3bf 8f5b 	dmb	ish
	bt_dev_show_info();
   16bdc:	f7fe fb9e 	bl	1531c <bt_dev_show_info>
}
   16be0:	bd08      	pop	{r3, pc}
   16be2:	bf00      	nop
   16be4:	20000338 	.word	0x20000338

00016be8 <bt_init>:
{
   16be8:	b510      	push	{r4, lr}
	err = hci_init();
   16bea:	f7ff f99d 	bl	15f28 <hci_init>
	if (err) {
   16bee:	4604      	mov	r4, r0
   16bf0:	b9a8      	cbnz	r0, 16c1e <bt_init+0x36>
		err = bt_conn_init();
   16bf2:	f002 f851 	bl	18c98 <bt_conn_init>
		if (err) {
   16bf6:	4604      	mov	r4, r0
   16bf8:	b988      	cbnz	r0, 16c1e <bt_init+0x36>
		if (!bt_dev.id_count) {
   16bfa:	4b12      	ldr	r3, [pc, #72]	; (16c44 <bt_init+0x5c>)
   16bfc:	79db      	ldrb	r3, [r3, #7]
   16bfe:	b183      	cbz	r3, 16c22 <bt_init+0x3a>
   16c00:	4b11      	ldr	r3, [pc, #68]	; (16c48 <bt_init+0x60>)
   16c02:	f3bf 8f5b 	dmb	ish
   16c06:	e853 2f00 	ldrex	r2, [r3]
   16c0a:	f042 0204 	orr.w	r2, r2, #4
   16c0e:	e843 2100 	strex	r1, r2, [r3]
   16c12:	2900      	cmp	r1, #0
   16c14:	d1f7      	bne.n	16c06 <bt_init+0x1e>
   16c16:	f3bf 8f5b 	dmb	ish
	bt_finalize_init();
   16c1a:	f7ff ffd1 	bl	16bc0 <bt_finalize_init>
}
   16c1e:	4620      	mov	r0, r4
   16c20:	bd10      	pop	{r4, pc}
   16c22:	4b0a      	ldr	r3, [pc, #40]	; (16c4c <bt_init+0x64>)
   16c24:	4a0a      	ldr	r2, [pc, #40]	; (16c50 <bt_init+0x68>)
   16c26:	1a9b      	subs	r3, r3, r2
   16c28:	08db      	lsrs	r3, r3, #3
			BT_INFO("No ID address. App must call settings_load()");
   16c2a:	f04f 0100 	mov.w	r1, #0
   16c2e:	2203      	movs	r2, #3
   16c30:	f362 0102 	bfi	r1, r2, #0, #3
   16c34:	f36f 01c5 	bfc	r1, #3, #3
   16c38:	f363 118f 	bfi	r1, r3, #6, #10
   16c3c:	4805      	ldr	r0, [pc, #20]	; (16c54 <bt_init+0x6c>)
   16c3e:	f7fa fb1d 	bl	1127c <log_0>
			return 0;
   16c42:	e7ec      	b.n	16c1e <bt_init+0x36>
   16c44:	200002a0 	.word	0x200002a0
   16c48:	20000338 	.word	0x20000338
   16c4c:	00029f0c 	.word	0x00029f0c
   16c50:	00029ecc 	.word	0x00029ecc
   16c54:	0002b990 	.word	0x0002b990

00016c58 <init_work>:
{
   16c58:	b508      	push	{r3, lr}
	err = bt_init();
   16c5a:	f7ff ffc5 	bl	16be8 <bt_init>
	if (ready_cb) {
   16c5e:	4b02      	ldr	r3, [pc, #8]	; (16c68 <init_work+0x10>)
   16c60:	681b      	ldr	r3, [r3, #0]
   16c62:	b103      	cbz	r3, 16c66 <init_work+0xe>
		ready_cb(err);
   16c64:	4798      	blx	r3
}
   16c66:	bd08      	pop	{r3, pc}
   16c68:	200026c0 	.word	0x200026c0

00016c6c <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
   16c6c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   16c70:	b088      	sub	sp, #32
	int err;

	if (!bt_dev.drv) {
   16c72:	4b44      	ldr	r3, [pc, #272]	; (16d84 <bt_enable+0x118>)
   16c74:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
   16c78:	b1c3      	cbz	r3, 16cac <bt_enable+0x40>
   16c7a:	4605      	mov	r5, r0
   16c7c:	4b42      	ldr	r3, [pc, #264]	; (16d88 <bt_enable+0x11c>)
   16c7e:	f3bf 8f5b 	dmb	ish
   16c82:	e853 2f00 	ldrex	r2, [r3]
   16c86:	f042 0101 	orr.w	r1, r2, #1
   16c8a:	e843 1000 	strex	r0, r1, [r3]
   16c8e:	2800      	cmp	r0, #0
   16c90:	d1f7      	bne.n	16c82 <bt_enable+0x16>
   16c92:	f3bf 8f5b 	dmb	ish
		BT_ERR("No HCI driver registered");
		return -ENODEV;
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   16c96:	f012 0f01 	tst.w	r2, #1
   16c9a:	d16f      	bne.n	16d7c <bt_enable+0x110>
		return -EALREADY;
	}

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		err = bt_settings_init();
   16c9c:	f7fd fec6 	bl	14a2c <bt_settings_init>
		if (err) {
   16ca0:	4604      	mov	r4, r0
   16ca2:	b1b0      	cbz	r0, 16cd2 <bt_enable+0x66>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   16ca4:	4620      	mov	r0, r4
   16ca6:	b008      	add	sp, #32
   16ca8:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   16cac:	4b37      	ldr	r3, [pc, #220]	; (16d8c <bt_enable+0x120>)
   16cae:	4a38      	ldr	r2, [pc, #224]	; (16d90 <bt_enable+0x124>)
   16cb0:	1a9b      	subs	r3, r3, r2
   16cb2:	08db      	lsrs	r3, r3, #3
		BT_ERR("No HCI driver registered");
   16cb4:	f04f 0100 	mov.w	r1, #0
   16cb8:	2201      	movs	r2, #1
   16cba:	f362 0102 	bfi	r1, r2, #0, #3
   16cbe:	f36f 01c5 	bfc	r1, #3, #3
   16cc2:	f363 118f 	bfi	r1, r3, #6, #10
   16cc6:	4833      	ldr	r0, [pc, #204]	; (16d94 <bt_enable+0x128>)
   16cc8:	f7fa fad8 	bl	1127c <log_0>
		return -ENODEV;
   16ccc:	f06f 0412 	mvn.w	r4, #18
   16cd0:	e7e8      	b.n	16ca4 <bt_enable+0x38>
	ready_cb = cb;
   16cd2:	4b31      	ldr	r3, [pc, #196]	; (16d98 <bt_enable+0x12c>)
   16cd4:	601d      	str	r5, [r3, #0]
	k_thread_create(&tx_thread_data, tx_thread_stack,
   16cd6:	f04f 0800 	mov.w	r8, #0
   16cda:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   16cde:	4e2f      	ldr	r6, [pc, #188]	; (16d9c <bt_enable+0x130>)
   16ce0:	e9cd 8906 	strd	r8, r9, [sp, #24]
   16ce4:	2400      	movs	r4, #0
   16ce6:	9404      	str	r4, [sp, #16]
   16ce8:	f06f 0308 	mvn.w	r3, #8
   16cec:	9303      	str	r3, [sp, #12]
   16cee:	9402      	str	r4, [sp, #8]
   16cf0:	9401      	str	r4, [sp, #4]
   16cf2:	9400      	str	r4, [sp, #0]
   16cf4:	4b2a      	ldr	r3, [pc, #168]	; (16da0 <bt_enable+0x134>)
   16cf6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   16cfa:	492a      	ldr	r1, [pc, #168]	; (16da4 <bt_enable+0x138>)
   16cfc:	4630      	mov	r0, r6
   16cfe:	f012 f9e0 	bl	290c2 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   16d02:	4929      	ldr	r1, [pc, #164]	; (16da8 <bt_enable+0x13c>)
   16d04:	4630      	mov	r0, r6
   16d06:	f008 fd69 	bl	1f7dc <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   16d0a:	4e28      	ldr	r6, [pc, #160]	; (16dac <bt_enable+0x140>)
   16d0c:	e9cd 8906 	strd	r8, r9, [sp, #24]
   16d10:	9404      	str	r4, [sp, #16]
   16d12:	f06f 0307 	mvn.w	r3, #7
   16d16:	9303      	str	r3, [sp, #12]
   16d18:	9402      	str	r4, [sp, #8]
   16d1a:	9401      	str	r4, [sp, #4]
   16d1c:	9400      	str	r4, [sp, #0]
   16d1e:	4b24      	ldr	r3, [pc, #144]	; (16db0 <bt_enable+0x144>)
   16d20:	f640 0298 	movw	r2, #2200	; 0x898
   16d24:	4923      	ldr	r1, [pc, #140]	; (16db4 <bt_enable+0x148>)
   16d26:	4630      	mov	r0, r6
   16d28:	f012 f9cb 	bl	290c2 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   16d2c:	4922      	ldr	r1, [pc, #136]	; (16db8 <bt_enable+0x14c>)
   16d2e:	4630      	mov	r0, r6
   16d30:	f008 fd54 	bl	1f7dc <z_impl_k_thread_name_set>
		bt_hci_ecc_init();
   16d34:	f7fd fcf0 	bl	14718 <bt_hci_ecc_init>
	err = bt_dev.drv->open();
   16d38:	4b12      	ldr	r3, [pc, #72]	; (16d84 <bt_enable+0x118>)
   16d3a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
   16d3e:	68db      	ldr	r3, [r3, #12]
   16d40:	4798      	blx	r3
	if (err) {
   16d42:	4604      	mov	r4, r0
   16d44:	b920      	cbnz	r0, 16d50 <bt_enable+0xe4>
	if (!cb) {
   16d46:	b1ad      	cbz	r5, 16d74 <bt_enable+0x108>
	k_work_submit(&bt_dev.init);
   16d48:	481c      	ldr	r0, [pc, #112]	; (16dbc <bt_enable+0x150>)
   16d4a:	f009 f9e3 	bl	20114 <k_work_submit>
	return 0;
   16d4e:	e7a9      	b.n	16ca4 <bt_enable+0x38>
   16d50:	4b0e      	ldr	r3, [pc, #56]	; (16d8c <bt_enable+0x120>)
   16d52:	4a0f      	ldr	r2, [pc, #60]	; (16d90 <bt_enable+0x124>)
   16d54:	1a9b      	subs	r3, r3, r2
   16d56:	08db      	lsrs	r3, r3, #3
		BT_ERR("HCI driver open failed (%d)", err);
   16d58:	f04f 0200 	mov.w	r2, #0
   16d5c:	2101      	movs	r1, #1
   16d5e:	f361 0202 	bfi	r2, r1, #0, #3
   16d62:	f36f 02c5 	bfc	r2, #3, #3
   16d66:	f363 128f 	bfi	r2, r3, #6, #10
   16d6a:	4601      	mov	r1, r0
   16d6c:	4814      	ldr	r0, [pc, #80]	; (16dc0 <bt_enable+0x154>)
   16d6e:	f7fa f9cf 	bl	11110 <log_1>
		return err;
   16d72:	e797      	b.n	16ca4 <bt_enable+0x38>
		return bt_init();
   16d74:	f7ff ff38 	bl	16be8 <bt_init>
   16d78:	4604      	mov	r4, r0
   16d7a:	e793      	b.n	16ca4 <bt_enable+0x38>
		return -EALREADY;
   16d7c:	f06f 0477 	mvn.w	r4, #119	; 0x77
   16d80:	e790      	b.n	16ca4 <bt_enable+0x38>
   16d82:	bf00      	nop
   16d84:	200002a0 	.word	0x200002a0
   16d88:	20000338 	.word	0x20000338
   16d8c:	00029f0c 	.word	0x00029f0c
   16d90:	00029ecc 	.word	0x00029ecc
   16d94:	0002b9c0 	.word	0x0002b9c0
   16d98:	200026c0 	.word	0x200026c0
   16d9c:	20001740 	.word	0x20001740
   16da0:	00016921 	.word	0x00016921
   16da4:	20004e40 	.word	0x20004e40
   16da8:	0002b9dc 	.word	0x0002b9dc
   16dac:	20001688 	.word	0x20001688
   16db0:	000157b1 	.word	0x000157b1
   16db4:	20004580 	.word	0x20004580
   16db8:	0002b9e4 	.word	0x0002b9e4
   16dbc:	20000328 	.word	0x20000328
   16dc0:	0002b9ec 	.word	0x0002b9ec

00016dc4 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   16dc4:	4800      	ldr	r0, [pc, #0]	; (16dc8 <bt_get_name+0x4>)
   16dc6:	4770      	bx	lr
   16dc8:	0002ba08 	.word	0x0002ba08

00016dcc <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   16dcc:	b570      	push	{r4, r5, r6, lr}
   16dce:	4605      	mov	r5, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   16dd0:	2400      	movs	r4, #0
   16dd2:	4b0a      	ldr	r3, [pc, #40]	; (16dfc <id_find+0x30>)
   16dd4:	79db      	ldrb	r3, [r3, #7]
   16dd6:	42a3      	cmp	r3, r4
   16dd8:	d90c      	bls.n	16df4 <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   16dda:	4626      	mov	r6, r4
   16ddc:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   16de0:	2207      	movs	r2, #7
   16de2:	4b06      	ldr	r3, [pc, #24]	; (16dfc <id_find+0x30>)
   16de4:	4419      	add	r1, r3
   16de6:	4628      	mov	r0, r5
   16de8:	f00d fe29 	bl	24a3e <memcmp>
   16dec:	b120      	cbz	r0, 16df8 <id_find+0x2c>
	for (id = 0U; id < bt_dev.id_count; id++) {
   16dee:	3401      	adds	r4, #1
   16df0:	b2e4      	uxtb	r4, r4
   16df2:	e7ee      	b.n	16dd2 <id_find+0x6>
			return id;
		}
	}

	return -ENOENT;
   16df4:	f06f 0601 	mvn.w	r6, #1
}
   16df8:	4630      	mov	r0, r6
   16dfa:	bd70      	pop	{r4, r5, r6, pc}
   16dfc:	200002a0 	.word	0x200002a0

00016e00 <set_random_address>:
{
   16e00:	b570      	push	{r4, r5, r6, lr}
   16e02:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
   16e04:	2206      	movs	r2, #6
   16e06:	4914      	ldr	r1, [pc, #80]	; (16e58 <set_random_address+0x58>)
   16e08:	f00d fe19 	bl	24a3e <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   16e0c:	4605      	mov	r5, r0
   16e0e:	b908      	cbnz	r0, 16e14 <set_random_address+0x14>
}
   16e10:	4628      	mov	r0, r5
   16e12:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   16e14:	2106      	movs	r1, #6
   16e16:	f242 0005 	movw	r0, #8197	; 0x2005
   16e1a:	f7fe fd0d 	bl	15838 <bt_hci_cmd_create>
	if (!buf) {
   16e1e:	4605      	mov	r5, r0
   16e20:	b1b8      	cbz	r0, 16e52 <set_random_address+0x52>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   16e22:	2206      	movs	r2, #6
   16e24:	4621      	mov	r1, r4
   16e26:	3008      	adds	r0, #8
   16e28:	f011 fa89 	bl	2833e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   16e2c:	2200      	movs	r2, #0
   16e2e:	4629      	mov	r1, r5
   16e30:	f242 0005 	movw	r0, #8197	; 0x2005
   16e34:	f7fe fd3c 	bl	158b0 <bt_hci_cmd_send_sync>
	if (err) {
   16e38:	4605      	mov	r5, r0
   16e3a:	2800      	cmp	r0, #0
   16e3c:	d1e8      	bne.n	16e10 <set_random_address+0x10>
	memcpy(dst, src, sizeof(*dst));
   16e3e:	4e06      	ldr	r6, [pc, #24]	; (16e58 <set_random_address+0x58>)
   16e40:	2206      	movs	r2, #6
   16e42:	4621      	mov	r1, r4
   16e44:	4630      	mov	r0, r6
   16e46:	f00d fe11 	bl	24a6c <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   16e4a:	2301      	movs	r3, #1
   16e4c:	f806 3c01 	strb.w	r3, [r6, #-1]
	return 0;
   16e50:	e7de      	b.n	16e10 <set_random_address+0x10>
		return -ENOBUFS;
   16e52:	f06f 0568 	mvn.w	r5, #104	; 0x68
   16e56:	e7db      	b.n	16e10 <set_random_address+0x10>
   16e58:	200002cd 	.word	0x200002cd

00016e5c <le_set_privacy_mode>:
{
   16e5c:	b510      	push	{r4, lr}
   16e5e:	b082      	sub	sp, #8
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   16e60:	4b1b      	ldr	r3, [pc, #108]	; (16ed0 <le_set_privacy_mode+0x74>)
   16e62:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
   16e66:	f013 0f04 	tst.w	r3, #4
   16e6a:	d01b      	beq.n	16ea4 <le_set_privacy_mode+0x48>
   16e6c:	460c      	mov	r4, r1
	memcpy(dst, src, sizeof(*dst));
   16e6e:	2207      	movs	r2, #7
   16e70:	4601      	mov	r1, r0
   16e72:	4668      	mov	r0, sp
   16e74:	f00d fdfa 	bl	24a6c <memcpy>
	cp.mode = mode;
   16e78:	f88d 4007 	strb.w	r4, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   16e7c:	2108      	movs	r1, #8
   16e7e:	f242 004e 	movw	r0, #8270	; 0x204e
   16e82:	f7fe fcd9 	bl	15838 <bt_hci_cmd_create>
	if (!buf) {
   16e86:	4604      	mov	r4, r0
   16e88:	b1f0      	cbz	r0, 16ec8 <le_set_privacy_mode+0x6c>
   16e8a:	2208      	movs	r2, #8
   16e8c:	4669      	mov	r1, sp
   16e8e:	4410      	add	r0, r2
   16e90:	f011 fa55 	bl	2833e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   16e94:	2200      	movs	r2, #0
   16e96:	4621      	mov	r1, r4
   16e98:	f242 004e 	movw	r0, #8270	; 0x204e
   16e9c:	f7fe fd08 	bl	158b0 <bt_hci_cmd_send_sync>
}
   16ea0:	b002      	add	sp, #8
   16ea2:	bd10      	pop	{r4, pc}
   16ea4:	4b0b      	ldr	r3, [pc, #44]	; (16ed4 <le_set_privacy_mode+0x78>)
   16ea6:	4a0c      	ldr	r2, [pc, #48]	; (16ed8 <le_set_privacy_mode+0x7c>)
   16ea8:	1a9b      	subs	r3, r3, r2
   16eaa:	08db      	lsrs	r3, r3, #3
		BT_WARN("Set privacy mode command is not supported");
   16eac:	f04f 0100 	mov.w	r1, #0
   16eb0:	2202      	movs	r2, #2
   16eb2:	f362 0102 	bfi	r1, r2, #0, #3
   16eb6:	f36f 01c5 	bfc	r1, #3, #3
   16eba:	f363 118f 	bfi	r1, r3, #6, #10
   16ebe:	4807      	ldr	r0, [pc, #28]	; (16edc <le_set_privacy_mode+0x80>)
   16ec0:	f7fa f9dc 	bl	1127c <log_0>
		return 0;
   16ec4:	2000      	movs	r0, #0
   16ec6:	e7eb      	b.n	16ea0 <le_set_privacy_mode+0x44>
		return -ENOBUFS;
   16ec8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   16ecc:	e7e8      	b.n	16ea0 <le_set_privacy_mode+0x44>
   16ece:	bf00      	nop
   16ed0:	200002a0 	.word	0x200002a0
   16ed4:	00029f1c 	.word	0x00029f1c
   16ed8:	00029ecc 	.word	0x00029ecc
   16edc:	0002baf8 	.word	0x0002baf8

00016ee0 <bt_id_pending_keys_update_set>:
   16ee0:	4b08      	ldr	r3, [pc, #32]	; (16f04 <bt_id_pending_keys_update_set+0x24>)
   16ee2:	f3bf 8f5b 	dmb	ish
   16ee6:	e853 2f00 	ldrex	r2, [r3]
   16eea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   16eee:	e843 2c00 	strex	ip, r2, [r3]
   16ef2:	f1bc 0f00 	cmp.w	ip, #0
   16ef6:	d1f6      	bne.n	16ee6 <bt_id_pending_keys_update_set+0x6>
   16ef8:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   16efc:	7a03      	ldrb	r3, [r0, #8]
   16efe:	4319      	orrs	r1, r3
   16f00:	7201      	strb	r1, [r0, #8]
}
   16f02:	4770      	bx	lr
   16f04:	20000338 	.word	0x20000338

00016f08 <id_create>:

static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
   16f08:	b530      	push	{r4, r5, lr}
   16f0a:	b085      	sub	sp, #20
   16f0c:	4604      	mov	r4, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   16f0e:	460d      	mov	r5, r1
   16f10:	b149      	cbz	r1, 16f26 <id_create+0x1e>
   16f12:	2300      	movs	r3, #0
   16f14:	9302      	str	r3, [sp, #8]
   16f16:	f8cd 300b 	str.w	r3, [sp, #11]
	return memcmp(a, b, sizeof(*a));
   16f1a:	2207      	movs	r2, #7
   16f1c:	a902      	add	r1, sp, #8
   16f1e:	4628      	mov	r0, r5
   16f20:	f00d fd8d 	bl	24a3e <memcmp>
   16f24:	bb08      	cbnz	r0, 16f6a <id_create+0x62>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
	} else {
		bt_addr_le_t new_addr;

		do {
			bt_addr_le_create_static(&new_addr);
   16f26:	4668      	mov	r0, sp
   16f28:	f00d ff23 	bl	24d72 <bt_addr_le_create_static>
			/* Make sure we didn't generate a duplicate */
		} while (id_find(&new_addr) >= 0);
   16f2c:	4668      	mov	r0, sp
   16f2e:	f7ff ff4d 	bl	16dcc <id_find>
   16f32:	2800      	cmp	r0, #0
   16f34:	daf7      	bge.n	16f26 <id_create+0x1e>

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   16f36:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   16f3a:	4b12      	ldr	r3, [pc, #72]	; (16f84 <id_create+0x7c>)
   16f3c:	441c      	add	r4, r3
	memcpy(dst, src, sizeof(*dst));
   16f3e:	2207      	movs	r2, #7
   16f40:	4669      	mov	r1, sp
   16f42:	4620      	mov	r0, r4
   16f44:	f00d fd92 	bl	24a6c <memcpy>

		if (addr) {
   16f48:	b125      	cbz	r5, 16f54 <id_create+0x4c>
   16f4a:	2207      	movs	r2, #7
   16f4c:	4621      	mov	r1, r4
   16f4e:	4628      	mov	r0, r5
   16f50:	f00d fd8c 	bl	24a6c <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16f54:	f3bf 8f5b 	dmb	ish
   16f58:	4b0b      	ldr	r3, [pc, #44]	; (16f88 <id_create+0x80>)
   16f5a:	681b      	ldr	r3, [r3, #0]
   16f5c:	f3bf 8f5b 	dmb	ish
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   16f60:	f013 0f02 	tst.w	r3, #2
   16f64:	d10a      	bne.n	16f7c <id_create+0x74>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}
}
   16f66:	b005      	add	sp, #20
   16f68:	bd30      	pop	{r4, r5, pc}
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   16f6a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   16f6e:	2207      	movs	r2, #7
   16f70:	4629      	mov	r1, r5
   16f72:	4804      	ldr	r0, [pc, #16]	; (16f84 <id_create+0x7c>)
   16f74:	4420      	add	r0, r4
   16f76:	f00d fd79 	bl	24a6c <memcpy>
}
   16f7a:	e7eb      	b.n	16f54 <id_create+0x4c>
		bt_settings_save_id();
   16f7c:	f7fd fd02 	bl	14984 <bt_settings_save_id>
}
   16f80:	e7f1      	b.n	16f66 <id_create+0x5e>
   16f82:	bf00      	nop
   16f84:	200002a0 	.word	0x200002a0
   16f88:	20000338 	.word	0x20000338

00016f8c <bt_id_pending_keys_update>:
{
   16f8c:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16f8e:	4b0b      	ldr	r3, [pc, #44]	; (16fbc <bt_id_pending_keys_update+0x30>)
   16f90:	f3bf 8f5b 	dmb	ish
   16f94:	e853 2f00 	ldrex	r2, [r3]
   16f98:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   16f9c:	e843 1000 	strex	r0, r1, [r3]
   16fa0:	2800      	cmp	r0, #0
   16fa2:	d1f7      	bne.n	16f94 <bt_id_pending_keys_update+0x8>
   16fa4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   16fa8:	f412 5f00 	tst.w	r2, #8192	; 0x2000
   16fac:	d100      	bne.n	16fb0 <bt_id_pending_keys_update+0x24>
}
   16fae:	bd08      	pop	{r3, pc}
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
   16fb0:	2200      	movs	r2, #0
   16fb2:	4903      	ldr	r1, [pc, #12]	; (16fc0 <bt_id_pending_keys_update+0x34>)
   16fb4:	2002      	movs	r0, #2
   16fb6:	f006 fc97 	bl	1d8e8 <bt_keys_foreach>
}
   16fba:	e7f8      	b.n	16fae <bt_id_pending_keys_update+0x22>
   16fbc:	20000338 	.word	0x20000338
   16fc0:	000251f5 	.word	0x000251f5

00016fc4 <bt_id_add>:
{
   16fc4:	b538      	push	{r3, r4, r5, lr}
   16fc6:	4604      	mov	r4, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   16fc8:	4b5e      	ldr	r3, [pc, #376]	; (17144 <bt_id_add+0x180>)
   16fca:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
   16fce:	b123      	cbz	r3, 16fda <bt_id_add+0x16>
   16fd0:	4a5c      	ldr	r2, [pc, #368]	; (17144 <bt_id_add+0x180>)
   16fd2:	f892 20e9 	ldrb.w	r2, [r2, #233]	; 0xe9
   16fd6:	4293      	cmp	r3, r2
   16fd8:	d20a      	bcs.n	16ff0 <bt_id_add+0x2c>
		bt_dev.le.rl_entries++;
   16fda:	4a5a      	ldr	r2, [pc, #360]	; (17144 <bt_id_add+0x180>)
   16fdc:	f892 30e9 	ldrb.w	r3, [r2, #233]	; 0xe9
   16fe0:	3301      	adds	r3, #1
   16fe2:	f882 30e9 	strb.w	r3, [r2, #233]	; 0xe9
		keys->state |= BT_KEYS_ID_ADDED;
   16fe6:	7a23      	ldrb	r3, [r4, #8]
   16fe8:	f043 0304 	orr.w	r3, r3, #4
   16fec:	7223      	strb	r3, [r4, #8]
}
   16fee:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   16ff0:	2206      	movs	r2, #6
   16ff2:	2100      	movs	r1, #0
   16ff4:	4608      	mov	r0, r1
   16ff6:	f001 fc41 	bl	1887c <bt_conn_lookup_state_le>
	if (conn) {
   16ffa:	4605      	mov	r5, r0
   16ffc:	b138      	cbz	r0, 1700e <bt_id_add+0x4a>
		bt_id_pending_keys_update_set(keys, BT_KEYS_ID_PENDING_ADD);
   16ffe:	2101      	movs	r1, #1
   17000:	4620      	mov	r0, r4
   17002:	f7ff ff6d 	bl	16ee0 <bt_id_pending_keys_update_set>
		bt_conn_unref(conn);
   17006:	4628      	mov	r0, r5
   17008:	f00e fc76 	bl	258f8 <bt_conn_unref>
		return;
   1700c:	e7ef      	b.n	16fee <bt_id_add+0x2a>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   1700e:	2100      	movs	r1, #0
   17010:	484d      	ldr	r0, [pc, #308]	; (17148 <bt_id_add+0x184>)
   17012:	f000 fc2d 	bl	17870 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   17016:	4b4b      	ldr	r3, [pc, #300]	; (17144 <bt_id_add+0x180>)
   17018:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
   1701c:	bb3b      	cbnz	r3, 1706e <bt_id_add+0xaa>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   1701e:	4b49      	ldr	r3, [pc, #292]	; (17144 <bt_id_add+0x180>)
   17020:	f893 20e9 	ldrb.w	r2, [r3, #233]	; 0xe9
   17024:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
   17028:	429a      	cmp	r2, r3
   1702a:	d036      	beq.n	1709a <bt_id_add+0xd6>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   1702c:	1c65      	adds	r5, r4, #1
   1702e:	4622      	mov	r2, r4
   17030:	f812 0b2a 	ldrb.w	r0, [r2], #42
   17034:	4629      	mov	r1, r5
   17036:	f00e f850 	bl	250da <hci_id_add>
	if (err) {
   1703a:	2800      	cmp	r0, #0
   1703c:	d160      	bne.n	17100 <bt_id_add+0x13c>
	bt_dev.le.rl_entries++;
   1703e:	4a41      	ldr	r2, [pc, #260]	; (17144 <bt_id_add+0x180>)
   17040:	f892 30e9 	ldrb.w	r3, [r2, #233]	; 0xe9
   17044:	3301      	adds	r3, #1
   17046:	f882 30e9 	strb.w	r3, [r2, #233]	; 0xe9
	keys->state |= BT_KEYS_ID_ADDED;
   1704a:	7a23      	ldrb	r3, [r4, #8]
   1704c:	f043 0304 	orr.w	r3, r3, #4
   17050:	7223      	strb	r3, [r4, #8]
	err = le_set_privacy_mode(&keys->addr, BT_HCI_LE_PRIVACY_MODE_DEVICE);
   17052:	2101      	movs	r1, #1
   17054:	4628      	mov	r0, r5
   17056:	f7ff ff01 	bl	16e5c <le_set_privacy_mode>
	if (err) {
   1705a:	2800      	cmp	r0, #0
   1705c:	d161      	bne.n	17122 <bt_id_add+0x15e>
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   1705e:	2001      	movs	r0, #1
   17060:	f00e f88c 	bl	2517c <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   17064:	2100      	movs	r1, #0
   17066:	4839      	ldr	r0, [pc, #228]	; (1714c <bt_id_add+0x188>)
   17068:	f000 fc02 	bl	17870 <bt_le_ext_adv_foreach>
   1706c:	e7bf      	b.n	16fee <bt_id_add+0x2a>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   1706e:	2000      	movs	r0, #0
   17070:	f00e f884 	bl	2517c <addr_res_enable>
		if (err) {
   17074:	2800      	cmp	r0, #0
   17076:	d0d2      	beq.n	1701e <bt_id_add+0x5a>
   17078:	4b35      	ldr	r3, [pc, #212]	; (17150 <bt_id_add+0x18c>)
   1707a:	4a36      	ldr	r2, [pc, #216]	; (17154 <bt_id_add+0x190>)
   1707c:	1a9b      	subs	r3, r3, r2
   1707e:	08db      	lsrs	r3, r3, #3
			BT_WARN("Failed to disable address resolution");
   17080:	f04f 0100 	mov.w	r1, #0
   17084:	2202      	movs	r2, #2
   17086:	f362 0102 	bfi	r1, r2, #0, #3
   1708a:	f36f 01c5 	bfc	r1, #3, #3
   1708e:	f363 118f 	bfi	r1, r3, #6, #10
   17092:	4831      	ldr	r0, [pc, #196]	; (17158 <bt_id_add+0x194>)
   17094:	f7fa f8f2 	bl	1127c <log_0>
			goto done;
   17098:	e7e1      	b.n	1705e <bt_id_add+0x9a>
   1709a:	4b2d      	ldr	r3, [pc, #180]	; (17150 <bt_id_add+0x18c>)
   1709c:	4a2d      	ldr	r2, [pc, #180]	; (17154 <bt_id_add+0x190>)
   1709e:	1a9b      	subs	r3, r3, r2
   170a0:	08db      	lsrs	r3, r3, #3
		BT_WARN("Resolving list size exceeded. Switching to host.");
   170a2:	f04f 0100 	mov.w	r1, #0
   170a6:	2202      	movs	r2, #2
   170a8:	f362 0102 	bfi	r1, r2, #0, #3
   170ac:	f36f 01c5 	bfc	r1, #3, #3
   170b0:	f363 118f 	bfi	r1, r3, #6, #10
   170b4:	4829      	ldr	r0, [pc, #164]	; (1715c <bt_id_add+0x198>)
   170b6:	f7fa f8e1 	bl	1127c <log_0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   170ba:	2200      	movs	r2, #0
   170bc:	4611      	mov	r1, r2
   170be:	f242 0029 	movw	r0, #8233	; 0x2029
   170c2:	f7fe fbf5 	bl	158b0 <bt_hci_cmd_send_sync>
		if (err) {
   170c6:	b950      	cbnz	r0, 170de <bt_id_add+0x11a>
		bt_dev.le.rl_entries++;
   170c8:	4a1e      	ldr	r2, [pc, #120]	; (17144 <bt_id_add+0x180>)
   170ca:	f892 30e9 	ldrb.w	r3, [r2, #233]	; 0xe9
   170ce:	3301      	adds	r3, #1
   170d0:	f882 30e9 	strb.w	r3, [r2, #233]	; 0xe9
		keys->state |= BT_KEYS_ID_ADDED;
   170d4:	7a23      	ldrb	r3, [r4, #8]
   170d6:	f043 0304 	orr.w	r3, r3, #4
   170da:	7223      	strb	r3, [r4, #8]
		goto done;
   170dc:	e7bf      	b.n	1705e <bt_id_add+0x9a>
   170de:	4b1c      	ldr	r3, [pc, #112]	; (17150 <bt_id_add+0x18c>)
   170e0:	4a1c      	ldr	r2, [pc, #112]	; (17154 <bt_id_add+0x190>)
   170e2:	1a9b      	subs	r3, r3, r2
   170e4:	08db      	lsrs	r3, r3, #3
			BT_ERR("Failed to clear resolution list");
   170e6:	f04f 0100 	mov.w	r1, #0
   170ea:	2201      	movs	r2, #1
   170ec:	f362 0102 	bfi	r1, r2, #0, #3
   170f0:	f36f 01c5 	bfc	r1, #3, #3
   170f4:	f363 118f 	bfi	r1, r3, #6, #10
   170f8:	4819      	ldr	r0, [pc, #100]	; (17160 <bt_id_add+0x19c>)
   170fa:	f7fa f8bf 	bl	1127c <log_0>
			goto done;
   170fe:	e7ae      	b.n	1705e <bt_id_add+0x9a>
   17100:	4b13      	ldr	r3, [pc, #76]	; (17150 <bt_id_add+0x18c>)
   17102:	4a14      	ldr	r2, [pc, #80]	; (17154 <bt_id_add+0x190>)
   17104:	1a9b      	subs	r3, r3, r2
   17106:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to add IRK to controller");
   17108:	f04f 0100 	mov.w	r1, #0
   1710c:	2201      	movs	r2, #1
   1710e:	f362 0102 	bfi	r1, r2, #0, #3
   17112:	f36f 01c5 	bfc	r1, #3, #3
   17116:	f363 118f 	bfi	r1, r3, #6, #10
   1711a:	4812      	ldr	r0, [pc, #72]	; (17164 <bt_id_add+0x1a0>)
   1711c:	f7fa f8ae 	bl	1127c <log_0>
		goto done;
   17120:	e79d      	b.n	1705e <bt_id_add+0x9a>
   17122:	4b0b      	ldr	r3, [pc, #44]	; (17150 <bt_id_add+0x18c>)
   17124:	4a0b      	ldr	r2, [pc, #44]	; (17154 <bt_id_add+0x190>)
   17126:	1a9b      	subs	r3, r3, r2
   17128:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to set privacy mode");
   1712a:	f04f 0100 	mov.w	r1, #0
   1712e:	2201      	movs	r2, #1
   17130:	f362 0102 	bfi	r1, r2, #0, #3
   17134:	f36f 01c5 	bfc	r1, #3, #3
   17138:	f363 118f 	bfi	r1, r3, #6, #10
   1713c:	480a      	ldr	r0, [pc, #40]	; (17168 <bt_id_add+0x1a4>)
   1713e:	f7fa f89d 	bl	1127c <log_0>
		goto done;
   17142:	e78c      	b.n	1705e <bt_id_add+0x9a>
   17144:	200002a0 	.word	0x200002a0
   17148:	000250a5 	.word	0x000250a5
   1714c:	00025075 	.word	0x00025075
   17150:	00029f1c 	.word	0x00029f1c
   17154:	00029ecc 	.word	0x00029ecc
   17158:	0002bb24 	.word	0x0002bb24
   1715c:	0002bb4c 	.word	0x0002bb4c
   17160:	0002bb80 	.word	0x0002bb80
   17164:	0002bba0 	.word	0x0002bba0
   17168:	0002bbc0 	.word	0x0002bbc0

0001716c <bt_id_del>:
{
   1716c:	b538      	push	{r3, r4, r5, lr}
   1716e:	4604      	mov	r4, r0
	if (!bt_dev.le.rl_size ||
   17170:	4b3f      	ldr	r3, [pc, #252]	; (17270 <bt_id_del+0x104>)
   17172:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
   17176:	b12b      	cbz	r3, 17184 <bt_id_del+0x18>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   17178:	4a3d      	ldr	r2, [pc, #244]	; (17270 <bt_id_del+0x104>)
   1717a:	f892 20e9 	ldrb.w	r2, [r2, #233]	; 0xe9
   1717e:	3301      	adds	r3, #1
	if (!bt_dev.le.rl_size ||
   17180:	429a      	cmp	r2, r3
   17182:	dd0a      	ble.n	1719a <bt_id_del+0x2e>
		bt_dev.le.rl_entries--;
   17184:	4a3a      	ldr	r2, [pc, #232]	; (17270 <bt_id_del+0x104>)
   17186:	f892 30e9 	ldrb.w	r3, [r2, #233]	; 0xe9
   1718a:	3b01      	subs	r3, #1
   1718c:	f882 30e9 	strb.w	r3, [r2, #233]	; 0xe9
		keys->state &= ~BT_KEYS_ID_ADDED;
   17190:	7a23      	ldrb	r3, [r4, #8]
   17192:	f023 0304 	bic.w	r3, r3, #4
   17196:	7223      	strb	r3, [r4, #8]
}
   17198:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   1719a:	2206      	movs	r2, #6
   1719c:	2100      	movs	r1, #0
   1719e:	4608      	mov	r0, r1
   171a0:	f001 fb6c 	bl	1887c <bt_conn_lookup_state_le>
	if (conn) {
   171a4:	4605      	mov	r5, r0
   171a6:	b138      	cbz	r0, 171b8 <bt_id_del+0x4c>
		bt_id_pending_keys_update_set(keys, BT_KEYS_ID_PENDING_DEL);
   171a8:	2102      	movs	r1, #2
   171aa:	4620      	mov	r0, r4
   171ac:	f7ff fe98 	bl	16ee0 <bt_id_pending_keys_update_set>
		bt_conn_unref(conn);
   171b0:	4628      	mov	r0, r5
   171b2:	f00e fba1 	bl	258f8 <bt_conn_unref>
		return;
   171b6:	e7ef      	b.n	17198 <bt_id_del+0x2c>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   171b8:	2100      	movs	r1, #0
   171ba:	482e      	ldr	r0, [pc, #184]	; (17274 <bt_id_del+0x108>)
   171bc:	f000 fb58 	bl	17870 <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   171c0:	2000      	movs	r0, #0
   171c2:	f00d ffdb 	bl	2517c <addr_res_enable>
	if (err) {
   171c6:	4601      	mov	r1, r0
   171c8:	b9e8      	cbnz	r0, 17206 <bt_id_del+0x9a>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   171ca:	4a29      	ldr	r2, [pc, #164]	; (17270 <bt_id_del+0x104>)
   171cc:	f892 30e9 	ldrb.w	r3, [r2, #233]	; 0xe9
   171d0:	f892 20e8 	ldrb.w	r2, [r2, #232]	; 0xe8
   171d4:	4293      	cmp	r3, r2
   171d6:	d827      	bhi.n	17228 <bt_id_del+0xbc>
	err = hci_id_del(&keys->addr);
   171d8:	1c60      	adds	r0, r4, #1
   171da:	f00d ffb4 	bl	25146 <hci_id_del>
	if (err) {
   171de:	bb88      	cbnz	r0, 17244 <bt_id_del+0xd8>
	bt_dev.le.rl_entries--;
   171e0:	4a23      	ldr	r2, [pc, #140]	; (17270 <bt_id_del+0x104>)
   171e2:	f892 30e9 	ldrb.w	r3, [r2, #233]	; 0xe9
   171e6:	3b01      	subs	r3, #1
   171e8:	f882 30e9 	strb.w	r3, [r2, #233]	; 0xe9
	keys->state &= ~BT_KEYS_ID_ADDED;
   171ec:	7a23      	ldrb	r3, [r4, #8]
   171ee:	f023 0304 	bic.w	r3, r3, #4
   171f2:	7223      	strb	r3, [r4, #8]
	if (bt_dev.le.rl_entries) {
   171f4:	4b1e      	ldr	r3, [pc, #120]	; (17270 <bt_id_del+0x104>)
   171f6:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
   171fa:	bba3      	cbnz	r3, 17266 <bt_id_del+0xfa>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   171fc:	2100      	movs	r1, #0
   171fe:	481e      	ldr	r0, [pc, #120]	; (17278 <bt_id_del+0x10c>)
   17200:	f000 fb36 	bl	17870 <bt_le_ext_adv_foreach>
   17204:	e7c8      	b.n	17198 <bt_id_del+0x2c>
   17206:	4b1d      	ldr	r3, [pc, #116]	; (1727c <bt_id_del+0x110>)
   17208:	4a1d      	ldr	r2, [pc, #116]	; (17280 <bt_id_del+0x114>)
   1720a:	1a9b      	subs	r3, r3, r2
   1720c:	08db      	lsrs	r3, r3, #3
		BT_ERR("Disabling address resolution failed (err %d)", err);
   1720e:	f04f 0200 	mov.w	r2, #0
   17212:	2001      	movs	r0, #1
   17214:	f360 0202 	bfi	r2, r0, #0, #3
   17218:	f36f 02c5 	bfc	r2, #3, #3
   1721c:	f363 128f 	bfi	r2, r3, #6, #10
   17220:	4818      	ldr	r0, [pc, #96]	; (17284 <bt_id_del+0x118>)
   17222:	f7f9 ff75 	bl	11110 <log_1>
		goto done;
   17226:	e7e5      	b.n	171f4 <bt_id_del+0x88>
		bt_dev.le.rl_entries--;
   17228:	3b01      	subs	r3, #1
   1722a:	4a11      	ldr	r2, [pc, #68]	; (17270 <bt_id_del+0x104>)
   1722c:	f882 30e9 	strb.w	r3, [r2, #233]	; 0xe9
		keys->state &= ~BT_KEYS_ID_ADDED;
   17230:	7a23      	ldrb	r3, [r4, #8]
   17232:	f023 0304 	bic.w	r3, r3, #4
   17236:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   17238:	2200      	movs	r2, #0
   1723a:	4913      	ldr	r1, [pc, #76]	; (17288 <bt_id_del+0x11c>)
   1723c:	2002      	movs	r0, #2
   1723e:	f006 fb53 	bl	1d8e8 <bt_keys_foreach>
		goto done;
   17242:	e7d7      	b.n	171f4 <bt_id_del+0x88>
   17244:	4b0d      	ldr	r3, [pc, #52]	; (1727c <bt_id_del+0x110>)
   17246:	4a0e      	ldr	r2, [pc, #56]	; (17280 <bt_id_del+0x114>)
   17248:	1a9b      	subs	r3, r3, r2
   1724a:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to remove IRK from controller");
   1724c:	f04f 0100 	mov.w	r1, #0
   17250:	2201      	movs	r2, #1
   17252:	f362 0102 	bfi	r1, r2, #0, #3
   17256:	f36f 01c5 	bfc	r1, #3, #3
   1725a:	f363 118f 	bfi	r1, r3, #6, #10
   1725e:	480b      	ldr	r0, [pc, #44]	; (1728c <bt_id_del+0x120>)
   17260:	f7fa f80c 	bl	1127c <log_0>
		goto done;
   17264:	e7c6      	b.n	171f4 <bt_id_del+0x88>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   17266:	2001      	movs	r0, #1
   17268:	f00d ff88 	bl	2517c <addr_res_enable>
   1726c:	e7c6      	b.n	171fc <bt_id_del+0x90>
   1726e:	bf00      	nop
   17270:	200002a0 	.word	0x200002a0
   17274:	000250a5 	.word	0x000250a5
   17278:	00025075 	.word	0x00025075
   1727c:	00029f1c 	.word	0x00029f1c
   17280:	00029ecc 	.word	0x00029ecc
   17284:	0002bbdc 	.word	0x0002bbdc
   17288:	0002512b 	.word	0x0002512b
   1728c:	0002bc0c 	.word	0x0002bc0c

00017290 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   17290:	b570      	push	{r4, r5, r6, lr}
   17292:	b084      	sub	sp, #16
   17294:	460c      	mov	r4, r1
	int new_id;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   17296:	4605      	mov	r5, r0
   17298:	b340      	cbz	r0, 172ec <bt_id_create+0x5c>
   1729a:	2300      	movs	r3, #0
   1729c:	9300      	str	r3, [sp, #0]
   1729e:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   172a2:	2207      	movs	r2, #7
   172a4:	4669      	mov	r1, sp
   172a6:	f00d fbca 	bl	24a3e <memcmp>
   172aa:	b1f8      	cbz	r0, 172ec <bt_id_create+0x5c>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   172ac:	782b      	ldrb	r3, [r5, #0]
   172ae:	2b01      	cmp	r3, #1
   172b0:	d104      	bne.n	172bc <bt_id_create+0x2c>
		    !BT_ADDR_IS_STATIC(&addr->a)) {
   172b2:	79ab      	ldrb	r3, [r5, #6]
		if (addr->type != BT_ADDR_LE_RANDOM ||
   172b4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   172b8:	2bc0      	cmp	r3, #192	; 0xc0
   172ba:	d012      	beq.n	172e2 <bt_id_create+0x52>
   172bc:	4b24      	ldr	r3, [pc, #144]	; (17350 <bt_id_create+0xc0>)
   172be:	4a25      	ldr	r2, [pc, #148]	; (17354 <bt_id_create+0xc4>)
   172c0:	1a9b      	subs	r3, r3, r2
   172c2:	08db      	lsrs	r3, r3, #3
			BT_ERR("Only static random identity address supported");
   172c4:	f04f 0100 	mov.w	r1, #0
   172c8:	2201      	movs	r2, #1
   172ca:	f362 0102 	bfi	r1, r2, #0, #3
   172ce:	f36f 01c5 	bfc	r1, #3, #3
   172d2:	f363 118f 	bfi	r1, r3, #6, #10
   172d6:	4820      	ldr	r0, [pc, #128]	; (17358 <bt_id_create+0xc8>)
   172d8:	f7f9 ffd0 	bl	1127c <log_0>
			return -EINVAL;
   172dc:	f06f 0615 	mvn.w	r6, #21
   172e0:	e026      	b.n	17330 <bt_id_create+0xa0>
		}

		if (id_find(addr) >= 0) {
   172e2:	4628      	mov	r0, r5
   172e4:	f7ff fd72 	bl	16dcc <id_find>
   172e8:	2800      	cmp	r0, #0
   172ea:	da24      	bge.n	17336 <bt_id_create+0xa6>
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   172ec:	bb4c      	cbnz	r4, 17342 <bt_id_create+0xb2>
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   172ee:	4b1b      	ldr	r3, [pc, #108]	; (1735c <bt_id_create+0xcc>)
   172f0:	79db      	ldrb	r3, [r3, #7]
   172f2:	2b01      	cmp	r3, #1
   172f4:	d028      	beq.n	17348 <bt_id_create+0xb8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   172f6:	f3bf 8f5b 	dmb	ish
   172fa:	4b19      	ldr	r3, [pc, #100]	; (17360 <bt_id_create+0xd0>)
   172fc:	681b      	ldr	r3, [r3, #0]
   172fe:	f3bf 8f5b 	dmb	ish
		return -ENOMEM;
	}

	/* bt_rand is not available before Bluetooth enable has been called */
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   17302:	f013 0f01 	tst.w	r3, #1
   17306:	d10a      	bne.n	1731e <bt_id_create+0x8e>
		uint8_t zero_irk[16] = { 0 };

		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   17308:	b1c5      	cbz	r5, 1733c <bt_id_create+0xac>
   1730a:	2300      	movs	r3, #0
   1730c:	9302      	str	r3, [sp, #8]
   1730e:	f8cd 300b 	str.w	r3, [sp, #11]
   17312:	2207      	movs	r2, #7
   17314:	a902      	add	r1, sp, #8
   17316:	4628      	mov	r0, r5
   17318:	f00d fb91 	bl	24a3e <memcmp>
   1731c:	b170      	cbz	r0, 1733c <bt_id_create+0xac>
		    !(irk && memcmp(irk, zero_irk, 16))) {
			return -EINVAL;
		}
	}

	new_id = bt_dev.id_count++;
   1731e:	4b0f      	ldr	r3, [pc, #60]	; (1735c <bt_id_create+0xcc>)
   17320:	79d8      	ldrb	r0, [r3, #7]
   17322:	1c42      	adds	r2, r0, #1
   17324:	71da      	strb	r2, [r3, #7]
   17326:	4606      	mov	r6, r0
	id_create(new_id, addr, irk);
   17328:	4622      	mov	r2, r4
   1732a:	4629      	mov	r1, r5
   1732c:	f7ff fdec 	bl	16f08 <id_create>

	return new_id;
}
   17330:	4630      	mov	r0, r6
   17332:	b004      	add	sp, #16
   17334:	bd70      	pop	{r4, r5, r6, pc}
			return -EALREADY;
   17336:	f06f 0677 	mvn.w	r6, #119	; 0x77
   1733a:	e7f9      	b.n	17330 <bt_id_create+0xa0>
			return -EINVAL;
   1733c:	f06f 0615 	mvn.w	r6, #21
   17340:	e7f6      	b.n	17330 <bt_id_create+0xa0>
		return -EINVAL;
   17342:	f06f 0615 	mvn.w	r6, #21
   17346:	e7f3      	b.n	17330 <bt_id_create+0xa0>
		return -ENOMEM;
   17348:	f06f 060b 	mvn.w	r6, #11
   1734c:	e7f0      	b.n	17330 <bt_id_create+0xa0>
   1734e:	bf00      	nop
   17350:	00029f1c 	.word	0x00029f1c
   17354:	00029ecc 	.word	0x00029ecc
   17358:	0002bc34 	.word	0x0002bc34
   1735c:	200002a0 	.word	0x200002a0
   17360:	20000338 	.word	0x20000338

00017364 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   17364:	b530      	push	{r4, r5, lr}
   17366:	b087      	sub	sp, #28
   17368:	4605      	mov	r5, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   1736a:	aa01      	add	r2, sp, #4
   1736c:	2100      	movs	r1, #0
   1736e:	f241 0009 	movw	r0, #4105	; 0x1009
   17372:	f7fe fa9d 	bl	158b0 <bt_hci_cmd_send_sync>
	if (err) {
   17376:	b9f0      	cbnz	r0, 173b6 <bt_id_read_public_addr+0x52>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   17378:	9b01      	ldr	r3, [sp, #4]
   1737a:	689c      	ldr	r4, [r3, #8]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1737c:	3401      	adds	r4, #1
   1737e:	2300      	movs	r3, #0
   17380:	9302      	str	r3, [sp, #8]
   17382:	f8ad 300c 	strh.w	r3, [sp, #12]
	return memcmp(a, b, sizeof(*a));
   17386:	2206      	movs	r2, #6
   17388:	a902      	add	r1, sp, #8
   1738a:	4620      	mov	r0, r4
   1738c:	f00d fb57 	bl	24a3e <memcmp>
   17390:	b158      	cbz	r0, 173aa <bt_id_read_public_addr+0x46>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   17392:	4b18      	ldr	r3, [pc, #96]	; (173f4 <bt_id_read_public_addr+0x90>)
   17394:	e893 0003 	ldmia.w	r3, {r0, r1}
   17398:	9004      	str	r0, [sp, #16]
   1739a:	f8ad 1014 	strh.w	r1, [sp, #20]
   1739e:	2206      	movs	r2, #6
   173a0:	a904      	add	r1, sp, #16
   173a2:	4620      	mov	r0, r4
   173a4:	f00d fb4b 	bl	24a3e <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   173a8:	b9b8      	cbnz	r0, 173da <bt_id_read_public_addr+0x76>
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
   173aa:	9801      	ldr	r0, [sp, #4]
   173ac:	f010 ff77 	bl	2829e <net_buf_unref>
		return 0U;
   173b0:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   173b2:	b007      	add	sp, #28
   173b4:	bd30      	pop	{r4, r5, pc}
   173b6:	4b10      	ldr	r3, [pc, #64]	; (173f8 <bt_id_read_public_addr+0x94>)
   173b8:	4a10      	ldr	r2, [pc, #64]	; (173fc <bt_id_read_public_addr+0x98>)
   173ba:	1a9b      	subs	r3, r3, r2
   173bc:	08db      	lsrs	r3, r3, #3
		BT_WARN("Failed to read public address");
   173be:	f04f 0100 	mov.w	r1, #0
   173c2:	2202      	movs	r2, #2
   173c4:	f362 0102 	bfi	r1, r2, #0, #3
   173c8:	f36f 01c5 	bfc	r1, #3, #3
   173cc:	f363 118f 	bfi	r1, r3, #6, #10
   173d0:	480b      	ldr	r0, [pc, #44]	; (17400 <bt_id_read_public_addr+0x9c>)
   173d2:	f7f9 ff53 	bl	1127c <log_0>
		return 0U;
   173d6:	2000      	movs	r0, #0
   173d8:	e7eb      	b.n	173b2 <bt_id_read_public_addr+0x4e>
	memcpy(dst, src, sizeof(*dst));
   173da:	2206      	movs	r2, #6
   173dc:	4621      	mov	r1, r4
   173de:	1c68      	adds	r0, r5, #1
   173e0:	f00d fb44 	bl	24a6c <memcpy>
	addr->type = BT_ADDR_LE_PUBLIC;
   173e4:	2300      	movs	r3, #0
   173e6:	702b      	strb	r3, [r5, #0]
	net_buf_unref(rsp);
   173e8:	9801      	ldr	r0, [sp, #4]
   173ea:	f010 ff58 	bl	2829e <net_buf_unref>
	return 1U;
   173ee:	2001      	movs	r0, #1
   173f0:	e7df      	b.n	173b2 <bt_id_read_public_addr+0x4e>
   173f2:	bf00      	nop
   173f4:	0002a0d8 	.word	0x0002a0d8
   173f8:	00029f1c 	.word	0x00029f1c
   173fc:	00029ecc 	.word	0x00029ecc
   17400:	0002bc64 	.word	0x0002bc64

00017404 <bt_setup_public_id_addr>:

void bt_setup_public_id_addr(void)
{
   17404:	b500      	push	{lr}
   17406:	b083      	sub	sp, #12
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   17408:	4668      	mov	r0, sp
   1740a:	f7ff ffab 	bl	17364 <bt_id_read_public_addr>
   1740e:	4b06      	ldr	r3, [pc, #24]	; (17428 <bt_setup_public_id_addr+0x24>)
   17410:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   17412:	b910      	cbnz	r0, 1741a <bt_setup_public_id_addr+0x16>
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	id_create(BT_ID_DEFAULT, &addr, irk);
}
   17414:	b003      	add	sp, #12
   17416:	f85d fb04 	ldr.w	pc, [sp], #4
	id_create(BT_ID_DEFAULT, &addr, irk);
   1741a:	2200      	movs	r2, #0
   1741c:	4669      	mov	r1, sp
   1741e:	4610      	mov	r0, r2
   17420:	f7ff fd72 	bl	16f08 <id_create>
   17424:	e7f6      	b.n	17414 <bt_setup_public_id_addr+0x10>
   17426:	bf00      	nop
   17428:	200002a0 	.word	0x200002a0

0001742c <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   1742c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17430:	b082      	sub	sp, #8
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   17432:	4b2e      	ldr	r3, [pc, #184]	; (174ec <bt_read_static_addr+0xc0>)
   17434:	f893 5086 	ldrb.w	r5, [r3, #134]	; 0x86
   17438:	f015 0501 	ands.w	r5, r5, #1
   1743c:	d010      	beq.n	17460 <bt_read_static_addr+0x34>
   1743e:	4607      	mov	r7, r0
   17440:	4688      	mov	r8, r1
		BT_WARN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   17442:	aa01      	add	r2, sp, #4
   17444:	2100      	movs	r1, #0
   17446:	f64f 4009 	movw	r0, #64521	; 0xfc09
   1744a:	f7fe fa31 	bl	158b0 <bt_hci_cmd_send_sync>
	if (err) {
   1744e:	4604      	mov	r4, r0
   17450:	b9b8      	cbnz	r0, 17482 <bt_read_static_addr+0x56>
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
   17452:	9b01      	ldr	r3, [sp, #4]
   17454:	689e      	ldr	r6, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   17456:	7875      	ldrb	r5, [r6, #1]
   17458:	4545      	cmp	r5, r8
   1745a:	bf28      	it	cs
   1745c:	4645      	movcs	r5, r8
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
   1745e:	e029      	b.n	174b4 <bt_read_static_addr+0x88>
   17460:	4b23      	ldr	r3, [pc, #140]	; (174f0 <bt_read_static_addr+0xc4>)
   17462:	4a24      	ldr	r2, [pc, #144]	; (174f4 <bt_read_static_addr+0xc8>)
   17464:	1a9b      	subs	r3, r3, r2
   17466:	08db      	lsrs	r3, r3, #3
		BT_WARN("Read Static Addresses command not available");
   17468:	f04f 0100 	mov.w	r1, #0
   1746c:	2202      	movs	r2, #2
   1746e:	f362 0102 	bfi	r1, r2, #0, #3
   17472:	f36f 01c5 	bfc	r1, #3, #3
   17476:	f363 118f 	bfi	r1, r3, #6, #10
   1747a:	481f      	ldr	r0, [pc, #124]	; (174f8 <bt_read_static_addr+0xcc>)
   1747c:	f7f9 fefe 	bl	1127c <log_0>
		return 0;
   17480:	e01e      	b.n	174c0 <bt_read_static_addr+0x94>
   17482:	4b1b      	ldr	r3, [pc, #108]	; (174f0 <bt_read_static_addr+0xc4>)
   17484:	4a1b      	ldr	r2, [pc, #108]	; (174f4 <bt_read_static_addr+0xc8>)
   17486:	1a9b      	subs	r3, r3, r2
   17488:	08db      	lsrs	r3, r3, #3
		BT_WARN("Failed to read static addresses");
   1748a:	f04f 0100 	mov.w	r1, #0
   1748e:	2202      	movs	r2, #2
   17490:	f362 0102 	bfi	r1, r2, #0, #3
   17494:	f36f 01c5 	bfc	r1, #3, #3
   17498:	f363 118f 	bfi	r1, r3, #6, #10
   1749c:	4817      	ldr	r0, [pc, #92]	; (174fc <bt_read_static_addr+0xd0>)
   1749e:	f7f9 feed 	bl	1127c <log_0>
		return 0;
   174a2:	2500      	movs	r5, #0
   174a4:	e00c      	b.n	174c0 <bt_read_static_addr+0x94>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   174a6:	2216      	movs	r2, #22
   174a8:	1cb1      	adds	r1, r6, #2
   174aa:	fb02 7004 	mla	r0, r2, r4, r7
   174ae:	f00d fadd 	bl	24a6c <memcpy>
	for (i = 0; i < cnt; i++) {
   174b2:	3401      	adds	r4, #1
   174b4:	42a5      	cmp	r5, r4
   174b6:	dcf6      	bgt.n	174a6 <bt_read_static_addr+0x7a>
	}

	net_buf_unref(rsp);
   174b8:	9801      	ldr	r0, [sp, #4]
   174ba:	f010 fef0 	bl	2829e <net_buf_unref>
	if (!cnt) {
   174be:	b11d      	cbz	r5, 174c8 <bt_read_static_addr+0x9c>
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   174c0:	4628      	mov	r0, r5
   174c2:	b002      	add	sp, #8
   174c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   174c8:	4b09      	ldr	r3, [pc, #36]	; (174f0 <bt_read_static_addr+0xc4>)
   174ca:	4a0a      	ldr	r2, [pc, #40]	; (174f4 <bt_read_static_addr+0xc8>)
   174cc:	1a9b      	subs	r3, r3, r2
   174ce:	08db      	lsrs	r3, r3, #3
		BT_WARN("No static addresses stored in controller");
   174d0:	f04f 0100 	mov.w	r1, #0
   174d4:	2202      	movs	r2, #2
   174d6:	f362 0102 	bfi	r1, r2, #0, #3
   174da:	f36f 01c5 	bfc	r1, #3, #3
   174de:	f363 118f 	bfi	r1, r3, #6, #10
   174e2:	4807      	ldr	r0, [pc, #28]	; (17500 <bt_read_static_addr+0xd4>)
   174e4:	f7f9 feca 	bl	1127c <log_0>
   174e8:	e7ea      	b.n	174c0 <bt_read_static_addr+0x94>
   174ea:	bf00      	nop
   174ec:	200002a0 	.word	0x200002a0
   174f0:	00029f1c 	.word	0x00029f1c
   174f4:	00029ecc 	.word	0x00029ecc
   174f8:	0002bc84 	.word	0x0002bc84
   174fc:	0002bcb0 	.word	0x0002bcb0
   17500:	0002bcd0 	.word	0x0002bcd0

00017504 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   17504:	b510      	push	{r4, lr}
   17506:	b088      	sub	sp, #32
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   17508:	4b14      	ldr	r3, [pc, #80]	; (1755c <bt_setup_random_id_addr+0x58>)
   1750a:	79dc      	ldrb	r4, [r3, #7]
   1750c:	b934      	cbnz	r4, 1751c <bt_setup_random_id_addr+0x18>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   1750e:	2101      	movs	r1, #1
   17510:	a802      	add	r0, sp, #8
   17512:	f7ff ff8b 	bl	1742c <bt_read_static_addr>
   17516:	4b11      	ldr	r3, [pc, #68]	; (1755c <bt_setup_random_id_addr+0x58>)
   17518:	71d8      	strb	r0, [r3, #7]

		if (bt_dev.id_count) {
   1751a:	b928      	cbnz	r0, 17528 <bt_setup_random_id_addr+0x24>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   1751c:	2100      	movs	r1, #0
   1751e:	4608      	mov	r0, r1
   17520:	f7ff feb6 	bl	17290 <bt_id_create>
}
   17524:	b008      	add	sp, #32
   17526:	bd10      	pop	{r4, pc}
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   17528:	4b0c      	ldr	r3, [pc, #48]	; (1755c <bt_setup_random_id_addr+0x58>)
   1752a:	79db      	ldrb	r3, [r3, #7]
   1752c:	42a3      	cmp	r3, r4
   1752e:	d913      	bls.n	17558 <bt_setup_random_id_addr+0x54>
   17530:	2206      	movs	r2, #6
   17532:	2116      	movs	r1, #22
   17534:	ab02      	add	r3, sp, #8
   17536:	fb01 3104 	mla	r1, r1, r4, r3
   1753a:	f10d 0001 	add.w	r0, sp, #1
   1753e:	f00d fa95 	bl	24a6c <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   17542:	2301      	movs	r3, #1
   17544:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
   17548:	2200      	movs	r2, #0
   1754a:	4669      	mov	r1, sp
   1754c:	4620      	mov	r0, r4
   1754e:	f7ff fcdb 	bl	16f08 <id_create>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   17552:	3401      	adds	r4, #1
   17554:	b2e4      	uxtb	r4, r4
   17556:	e7e7      	b.n	17528 <bt_setup_random_id_addr+0x24>
			return 0;
   17558:	2000      	movs	r0, #0
   1755a:	e7e3      	b.n	17524 <bt_setup_random_id_addr+0x20>
   1755c:	200002a0 	.word	0x200002a0

00017560 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   17560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17562:	460d      	mov	r5, r1
   17564:	461e      	mov	r6, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];
   17566:	7804      	ldrb	r4, [r0, #0]

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   17568:	f011 0f01 	tst.w	r1, #1
   1756c:	d027      	beq.n	175be <bt_id_set_adv_own_addr+0x5e>
   1756e:	4617      	mov	r7, r2
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   17570:	b142      	cbz	r2, 17584 <bt_id_set_adv_own_addr+0x24>
   17572:	f011 0f20 	tst.w	r1, #32
   17576:	d005      	beq.n	17584 <bt_id_set_adv_own_addr+0x24>
		    !BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   17578:	4b22      	ldr	r3, [pc, #136]	; (17604 <bt_id_set_adv_own_addr+0xa4>)
   1757a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   1757e:	f013 0f40 	tst.w	r3, #64	; 0x40
   17582:	d038      	beq.n	175f6 <bt_id_set_adv_own_addr+0x96>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   17584:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   17588:	4a1e      	ldr	r2, [pc, #120]	; (17604 <bt_id_set_adv_own_addr+0xa4>)
   1758a:	5cd3      	ldrb	r3, [r2, r3]
   1758c:	2b01      	cmp	r3, #1
   1758e:	d00d      	beq.n	175ac <bt_id_set_adv_own_addr+0x4c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   17590:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   17594:	4b1b      	ldr	r3, [pc, #108]	; (17604 <bt_id_set_adv_own_addr+0xa4>)
   17596:	5d1b      	ldrb	r3, [r3, r4]
   17598:	7033      	strb	r3, [r6, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   1759a:	b37f      	cbz	r7, 175fc <bt_id_set_adv_own_addr+0x9c>
   1759c:	f015 0f20 	tst.w	r5, #32
   175a0:	d02e      	beq.n	17600 <bt_id_set_adv_own_addr+0xa0>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   175a2:	f043 0302 	orr.w	r3, r3, #2
   175a6:	7033      	strb	r3, [r6, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   175a8:	2000      	movs	r0, #0
   175aa:	e017      	b.n	175dc <bt_id_set_adv_own_addr+0x7c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   175ac:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   175b0:	4411      	add	r1, r2
   175b2:	3101      	adds	r1, #1
   175b4:	f00d fe02 	bl	251bc <bt_id_set_adv_random_addr>
				if (err) {
   175b8:	2800      	cmp	r0, #0
   175ba:	d0e9      	beq.n	17590 <bt_id_set_adv_own_addr+0x30>
   175bc:	e00e      	b.n	175dc <bt_id_set_adv_own_addr+0x7c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   175be:	f011 0f04 	tst.w	r1, #4
   175c2:	d013      	beq.n	175ec <bt_id_set_adv_own_addr+0x8c>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   175c4:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   175c8:	4a0e      	ldr	r2, [pc, #56]	; (17604 <bt_id_set_adv_own_addr+0xa4>)
   175ca:	5cd3      	ldrb	r3, [r2, r3]
   175cc:	2b01      	cmp	r3, #1
   175ce:	d006      	beq.n	175de <bt_id_set_adv_own_addr+0x7e>
	int err = 0;
   175d0:	2000      	movs	r0, #0
			*own_addr_type = id_addr->type;
   175d2:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   175d6:	4b0b      	ldr	r3, [pc, #44]	; (17604 <bt_id_set_adv_own_addr+0xa4>)
   175d8:	5d1b      	ldrb	r3, [r3, r4]
   175da:	7033      	strb	r3, [r6, #0]
}
   175dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   175de:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   175e2:	4411      	add	r1, r2
   175e4:	3101      	adds	r1, #1
   175e6:	f00d fde9 	bl	251bc <bt_id_set_adv_random_addr>
   175ea:	e7f2      	b.n	175d2 <bt_id_set_adv_own_addr+0x72>
			err = bt_id_set_adv_private_addr(adv);
   175ec:	f00d fdeb 	bl	251c6 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   175f0:	2301      	movs	r3, #1
   175f2:	7033      	strb	r3, [r6, #0]
		if (err) {
   175f4:	e7f2      	b.n	175dc <bt_id_set_adv_own_addr+0x7c>
			return -ENOTSUP;
   175f6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   175fa:	e7ef      	b.n	175dc <bt_id_set_adv_own_addr+0x7c>
	return 0;
   175fc:	2000      	movs	r0, #0
   175fe:	e7ed      	b.n	175dc <bt_id_set_adv_own_addr+0x7c>
   17600:	2000      	movs	r0, #0
   17602:	e7eb      	b.n	175dc <bt_id_set_adv_own_addr+0x7c>
   17604:	200002a0 	.word	0x200002a0

00017608 <adv_new_legacy>:
	bt_dev.adv = adv_new();
	return bt_dev.adv;
#else
	return &bt_dev.adv;
#endif
}
   17608:	4800      	ldr	r0, [pc, #0]	; (1760c <adv_new_legacy+0x4>)
   1760a:	4770      	bx	lr
   1760c:	200002b8 	.word	0x200002b8

00017610 <set_data_add>:
	size_t len;
};

static int set_data_add(uint8_t *set_data, uint8_t set_data_len_max,
			const struct bt_ad *ad, size_t ad_len, uint8_t *data_len)
{
   17610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17614:	b083      	sub	sp, #12
   17616:	4605      	mov	r5, r0
   17618:	4688      	mov	r8, r1
   1761a:	9201      	str	r2, [sp, #4]
   1761c:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;

	for (size_t i = 0; i < ad_len; i++) {
   1761e:	f04f 0a00 	mov.w	sl, #0
	uint8_t set_data_len = 0;
   17622:	4653      	mov	r3, sl
	for (size_t i = 0; i < ad_len; i++) {
   17624:	9a00      	ldr	r2, [sp, #0]
   17626:	4552      	cmp	r2, sl
   17628:	d94b      	bls.n	176c2 <set_data_add+0xb2>
		const struct bt_data *data = ad[i].data;
   1762a:	9a01      	ldr	r2, [sp, #4]
   1762c:	eb02 09ca 	add.w	r9, r2, sl, lsl #3
   17630:	f852 703a 	ldr.w	r7, [r2, sl, lsl #3]

		for (size_t j = 0; j < ad[i].len; j++) {
   17634:	2400      	movs	r4, #0
   17636:	e016      	b.n	17666 <set_data_add+0x56>
				      shortened_len > 0)) {
					BT_ERR("Too big advertising data");
					return -EINVAL;
				}

				type = BT_DATA_NAME_SHORTENED;
   17638:	f04f 0c08 	mov.w	ip, #8
				len = shortened_len;
			}

			set_data[set_data_len++] = len + 1;
   1763c:	b2d6      	uxtb	r6, r2
   1763e:	1c59      	adds	r1, r3, #1
   17640:	b2c9      	uxtb	r1, r1
   17642:	f106 0b01 	add.w	fp, r6, #1
   17646:	f805 b00e 	strb.w	fp, [r5, lr]
			set_data[set_data_len++] = type;
   1764a:	3302      	adds	r3, #2
   1764c:	fa5f fb83 	uxtb.w	fp, r3
   17650:	f805 c001 	strb.w	ip, [r5, r1]

			memcpy(&set_data[set_data_len], data[j].data, len);
   17654:	6841      	ldr	r1, [r0, #4]
   17656:	eb05 000b 	add.w	r0, r5, fp
   1765a:	f00d fa07 	bl	24a6c <memcpy>
			set_data_len += len;
   1765e:	eb0b 0306 	add.w	r3, fp, r6
   17662:	b2db      	uxtb	r3, r3
		for (size_t j = 0; j < ad[i].len; j++) {
   17664:	3401      	adds	r4, #1
   17666:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1766a:	4294      	cmp	r4, r2
   1766c:	d226      	bcs.n	176bc <set_data_add+0xac>
			size_t len = data[j].data_len;
   1766e:	eb07 00c4 	add.w	r0, r7, r4, lsl #3
   17672:	7842      	ldrb	r2, [r0, #1]
			uint8_t type = data[j].type;
   17674:	f817 c034 	ldrb.w	ip, [r7, r4, lsl #3]
			if ((set_data_len + len + 2) > set_data_len_max) {
   17678:	469e      	mov	lr, r3
   1767a:	1899      	adds	r1, r3, r2
   1767c:	3102      	adds	r1, #2
   1767e:	4541      	cmp	r1, r8
   17680:	d9dc      	bls.n	1763c <set_data_add+0x2c>
				ssize_t shortened_len = set_data_len_max -
   17682:	eba8 0203 	sub.w	r2, r8, r3
   17686:	3a02      	subs	r2, #2
				if (!(type == BT_DATA_NAME_COMPLETE &&
   17688:	f1bc 0f09 	cmp.w	ip, #9
   1768c:	d101      	bne.n	17692 <set_data_add+0x82>
   1768e:	2a00      	cmp	r2, #0
   17690:	dcd2      	bgt.n	17638 <set_data_add+0x28>
   17692:	4b0e      	ldr	r3, [pc, #56]	; (176cc <set_data_add+0xbc>)
   17694:	4a0e      	ldr	r2, [pc, #56]	; (176d0 <set_data_add+0xc0>)
   17696:	1a9b      	subs	r3, r3, r2
   17698:	08db      	lsrs	r3, r3, #3
					BT_ERR("Too big advertising data");
   1769a:	f04f 0100 	mov.w	r1, #0
   1769e:	2201      	movs	r2, #1
   176a0:	f362 0102 	bfi	r1, r2, #0, #3
   176a4:	f36f 01c5 	bfc	r1, #3, #3
   176a8:	f363 118f 	bfi	r1, r3, #6, #10
   176ac:	4809      	ldr	r0, [pc, #36]	; (176d4 <set_data_add+0xc4>)
   176ae:	f7f9 fde5 	bl	1127c <log_0>
					return -EINVAL;
   176b2:	f06f 0015 	mvn.w	r0, #21
		}
	}

	*data_len = set_data_len;
	return 0;
}
   176b6:	b003      	add	sp, #12
   176b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < ad_len; i++) {
   176bc:	f10a 0a01 	add.w	sl, sl, #1
   176c0:	e7b0      	b.n	17624 <set_data_add+0x14>
	*data_len = set_data_len;
   176c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   176c4:	7013      	strb	r3, [r2, #0]
	return 0;
   176c6:	2000      	movs	r0, #0
   176c8:	e7f5      	b.n	176b6 <set_data_add+0xa6>
   176ca:	bf00      	nop
   176cc:	00029ed4 	.word	0x00029ed4
   176d0:	00029ecc 	.word	0x00029ecc
   176d4:	0002bd04 	.word	0x0002bd04

000176d8 <valid_adv_ext_param>:
{
   176d8:	b510      	push	{r4, lr}
   176da:	b082      	sub	sp, #8
   176dc:	4604      	mov	r4, r0
	if (param->id >= bt_dev.id_count ||
   176de:	7800      	ldrb	r0, [r0, #0]
   176e0:	4b23      	ldr	r3, [pc, #140]	; (17770 <valid_adv_ext_param+0x98>)
   176e2:	79db      	ldrb	r3, [r3, #7]
   176e4:	4298      	cmp	r0, r3
   176e6:	d302      	bcc.n	176ee <valid_adv_ext_param+0x16>
		return false;
   176e8:	2000      	movs	r0, #0
}
   176ea:	b002      	add	sp, #8
   176ec:	bd10      	pop	{r4, pc}
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   176ee:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   176f2:	2300      	movs	r3, #0
   176f4:	9300      	str	r3, [sp, #0]
   176f6:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   176fa:	2207      	movs	r2, #7
   176fc:	4669      	mov	r1, sp
   176fe:	4b1c      	ldr	r3, [pc, #112]	; (17770 <valid_adv_ext_param+0x98>)
   17700:	4418      	add	r0, r3
   17702:	f00d f99c 	bl	24a3e <memcmp>
	if (param->id >= bt_dev.id_count ||
   17706:	2800      	cmp	r0, #0
   17708:	d0ee      	beq.n	176e8 <valid_adv_ext_param+0x10>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1770a:	6863      	ldr	r3, [r4, #4]
   1770c:	f013 0f01 	tst.w	r3, #1
   17710:	d107      	bne.n	17722 <valid_adv_ext_param+0x4a>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   17712:	4a17      	ldr	r2, [pc, #92]	; (17770 <valid_adv_ext_param+0x98>)
   17714:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
   17718:	2a08      	cmp	r2, #8
   1771a:	d802      	bhi.n	17722 <valid_adv_ext_param+0x4a>
		    param->interval_min < 0x00a0) {
   1771c:	68a2      	ldr	r2, [r4, #8]
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   1771e:	2a9f      	cmp	r2, #159	; 0x9f
   17720:	d91b      	bls.n	1775a <valid_adv_ext_param+0x82>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   17722:	f013 0f30 	tst.w	r3, #48	; 0x30
   17726:	d001      	beq.n	1772c <valid_adv_ext_param+0x54>
	    !param->peer) {
   17728:	6922      	ldr	r2, [r4, #16]
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   1772a:	b1c2      	cbz	r2, 1775e <valid_adv_ext_param+0x86>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   1772c:	f013 0f10 	tst.w	r3, #16
   17730:	d108      	bne.n	17744 <valid_adv_ext_param+0x6c>
	    !param->peer) {
   17732:	6922      	ldr	r2, [r4, #16]
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   17734:	b132      	cbz	r2, 17744 <valid_adv_ext_param+0x6c>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   17736:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   1773a:	f5b3 3f60 	cmp.w	r3, #229376	; 0x38000
   1773e:	d014      	beq.n	1776a <valid_adv_ext_param+0x92>
	return true;
   17740:	2001      	movs	r0, #1
   17742:	e7d2      	b.n	176ea <valid_adv_ext_param+0x12>
		if (param->interval_min > param->interval_max ||
   17744:	68a2      	ldr	r2, [r4, #8]
   17746:	68e1      	ldr	r1, [r4, #12]
   17748:	428a      	cmp	r2, r1
   1774a:	d80a      	bhi.n	17762 <valid_adv_ext_param+0x8a>
   1774c:	2a1f      	cmp	r2, #31
   1774e:	d90a      	bls.n	17766 <valid_adv_ext_param+0x8e>
		    param->interval_min < 0x0020 ||
   17750:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   17754:	d9ef      	bls.n	17736 <valid_adv_ext_param+0x5e>
			return false;
   17756:	2000      	movs	r0, #0
   17758:	e7c7      	b.n	176ea <valid_adv_ext_param+0x12>
			return false;
   1775a:	2000      	movs	r0, #0
   1775c:	e7c5      	b.n	176ea <valid_adv_ext_param+0x12>
		return false;
   1775e:	2000      	movs	r0, #0
   17760:	e7c3      	b.n	176ea <valid_adv_ext_param+0x12>
			return false;
   17762:	2000      	movs	r0, #0
   17764:	e7c1      	b.n	176ea <valid_adv_ext_param+0x12>
   17766:	2000      	movs	r0, #0
   17768:	e7bf      	b.n	176ea <valid_adv_ext_param+0x12>
		return false;
   1776a:	2000      	movs	r0, #0
   1776c:	e7bd      	b.n	176ea <valid_adv_ext_param+0x12>
   1776e:	bf00      	nop
   17770:	200002a0 	.word	0x200002a0

00017774 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   17774:	b5f0      	push	{r4, r5, r6, r7, lr}
   17776:	b085      	sub	sp, #20
   17778:	4604      	mov	r4, r0
   1777a:	460f      	mov	r7, r1
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   1777c:	4605      	mov	r5, r0
   1777e:	f815 2b09 	ldrb.w	r2, [r5], #9
   17782:	4b1f      	ldr	r3, [pc, #124]	; (17800 <le_adv_start_add_conn+0x8c>)
   17784:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   17788:	2300      	movs	r3, #0
   1778a:	9300      	str	r3, [sp, #0]
   1778c:	f8cd 3003 	str.w	r3, [sp, #3]
   17790:	2207      	movs	r2, #7
   17792:	4669      	mov	r1, sp
   17794:	4628      	mov	r0, r5
   17796:	f00d f952 	bl	24a3e <memcmp>
   1779a:	b9b8      	cbnz	r0, 177cc <le_adv_start_add_conn+0x58>
   1779c:	4606      	mov	r6, r0
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   1779e:	4b19      	ldr	r3, [pc, #100]	; (17804 <le_adv_start_add_conn+0x90>)
   177a0:	e893 0003 	ldmia.w	r3, {r0, r1}
   177a4:	9002      	str	r0, [sp, #8]
   177a6:	f8ad 100c 	strh.w	r1, [sp, #12]
   177aa:	0c09      	lsrs	r1, r1, #16
   177ac:	f88d 100e 	strb.w	r1, [sp, #14]
   177b0:	a902      	add	r1, sp, #8
   177b2:	7820      	ldrb	r0, [r4, #0]
   177b4:	f00e f831 	bl	2581a <bt_conn_add_le>
		if (!conn) {
   177b8:	4604      	mov	r4, r0
   177ba:	b120      	cbz	r0, 177c6 <le_adv_start_add_conn+0x52>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
   177bc:	2104      	movs	r1, #4
   177be:	f000 feed 	bl	1859c <bt_conn_set_state>
		*out_conn = conn;
   177c2:	603c      	str	r4, [r7, #0]
		return 0;
   177c4:	e012      	b.n	177ec <le_adv_start_add_conn+0x78>
			return -ENOMEM;
   177c6:	f06f 060b 	mvn.w	r6, #11
   177ca:	e00f      	b.n	177ec <le_adv_start_add_conn+0x78>
	}

	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   177cc:	4629      	mov	r1, r5
   177ce:	7820      	ldrb	r0, [r4, #0]
   177d0:	f001 f800 	bl	187d4 <bt_conn_exists_le>
   177d4:	b968      	cbnz	r0, 177f2 <le_adv_start_add_conn+0x7e>
		return -EINVAL;
	}

	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   177d6:	4629      	mov	r1, r5
   177d8:	7820      	ldrb	r0, [r4, #0]
   177da:	f00e f81e 	bl	2581a <bt_conn_add_le>
	if (!conn) {
   177de:	4604      	mov	r4, r0
   177e0:	b150      	cbz	r0, 177f8 <le_adv_start_add_conn+0x84>
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   177e2:	2105      	movs	r1, #5
   177e4:	f000 feda 	bl	1859c <bt_conn_set_state>
	*out_conn = conn;
   177e8:	603c      	str	r4, [r7, #0]
	return 0;
   177ea:	2600      	movs	r6, #0
}
   177ec:	4630      	mov	r0, r6
   177ee:	b005      	add	sp, #20
   177f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
   177f2:	f06f 0615 	mvn.w	r6, #21
   177f6:	e7f9      	b.n	177ec <le_adv_start_add_conn+0x78>
		return -ENOMEM;
   177f8:	f06f 060b 	mvn.w	r6, #11
   177fc:	e7f6      	b.n	177ec <le_adv_start_add_conn+0x78>
   177fe:	bf00      	nop
   17800:	200002a0 	.word	0x200002a0
   17804:	0002a0e0 	.word	0x0002a0e0

00017808 <le_adv_stop_free_conn>:

static void le_adv_stop_free_conn(const struct bt_le_ext_adv *adv, uint8_t status)
{
   17808:	b570      	push	{r4, r5, r6, lr}
   1780a:	b084      	sub	sp, #16
   1780c:	4604      	mov	r4, r0
   1780e:	460e      	mov	r6, r1
	struct bt_conn *conn;

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   17810:	f100 0509 	add.w	r5, r0, #9
   17814:	2300      	movs	r3, #0
   17816:	9300      	str	r3, [sp, #0]
   17818:	f8cd 3003 	str.w	r3, [sp, #3]
   1781c:	2207      	movs	r2, #7
   1781e:	4669      	mov	r1, sp
   17820:	4628      	mov	r0, r5
   17822:	f00d f90c 	bl	24a3e <memcmp>
   17826:	b9c8      	cbnz	r0, 1785c <le_adv_stop_free_conn+0x54>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   17828:	4b10      	ldr	r3, [pc, #64]	; (1786c <le_adv_stop_free_conn+0x64>)
   1782a:	e893 0003 	ldmia.w	r3, {r0, r1}
   1782e:	9002      	str	r0, [sp, #8]
   17830:	f8ad 100c 	strh.w	r1, [sp, #12]
   17834:	0c09      	lsrs	r1, r1, #16
   17836:	f88d 100e 	strb.w	r1, [sp, #14]
   1783a:	2204      	movs	r2, #4
   1783c:	a902      	add	r1, sp, #8
   1783e:	7820      	ldrb	r0, [r4, #0]
   17840:	f001 f81c 	bl	1887c <bt_conn_lookup_state_le>
   17844:	4604      	mov	r4, r0
	} else {
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
					       BT_CONN_CONNECT_DIR_ADV);
	}

	if (conn) {
   17846:	b13c      	cbz	r4, 17858 <le_adv_stop_free_conn+0x50>
		conn->err = status;
   17848:	7326      	strb	r6, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1784a:	2100      	movs	r1, #0
   1784c:	4620      	mov	r0, r4
   1784e:	f000 fea5 	bl	1859c <bt_conn_set_state>
		bt_conn_unref(conn);
   17852:	4620      	mov	r0, r4
   17854:	f00e f850 	bl	258f8 <bt_conn_unref>
	}
}
   17858:	b004      	add	sp, #16
   1785a:	bd70      	pop	{r4, r5, r6, pc}
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   1785c:	2205      	movs	r2, #5
   1785e:	4629      	mov	r1, r5
   17860:	7820      	ldrb	r0, [r4, #0]
   17862:	f001 f80b 	bl	1887c <bt_conn_lookup_state_le>
   17866:	4604      	mov	r4, r0
   17868:	e7ed      	b.n	17846 <le_adv_stop_free_conn+0x3e>
   1786a:	bf00      	nop
   1786c:	0002a0e0 	.word	0x0002a0e0

00017870 <bt_le_ext_adv_foreach>:
{
   17870:	b508      	push	{r3, lr}
   17872:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   17874:	4801      	ldr	r0, [pc, #4]	; (1787c <bt_le_ext_adv_foreach+0xc>)
   17876:	4798      	blx	r3
}
   17878:	bd08      	pop	{r3, pc}
   1787a:	bf00      	nop
   1787c:	200002b8 	.word	0x200002b8

00017880 <bt_le_adv_lookup_legacy>:
}
   17880:	4800      	ldr	r0, [pc, #0]	; (17884 <bt_le_adv_lookup_legacy+0x4>)
   17882:	4770      	bx	lr
   17884:	200002b8 	.word	0x200002b8

00017888 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   17888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1788c:	b091      	sub	sp, #68	; 0x44
   1788e:	9207      	str	r2, [sp, #28]
   17890:	4698      	mov	r8, r3
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
   17892:	2300      	movs	r3, #0
   17894:	9309      	str	r3, [sp, #36]	; 0x24
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
   17896:	690f      	ldr	r7, [r1, #16]
   17898:	ebb7 0a03 	subs.w	sl, r7, r3
   1789c:	bf18      	it	ne
   1789e:	f04f 0a01 	movne.w	sl, #1
   178a2:	f3bf 8f5b 	dmb	ish
   178a6:	4bc6      	ldr	r3, [pc, #792]	; (17bc0 <bt_le_adv_start_legacy+0x338>)
   178a8:	681b      	ldr	r3, [r3, #0]
   178aa:	f3bf 8f5b 	dmb	ish
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   178ae:	f013 0f02 	tst.w	r3, #2
   178b2:	f000 81c3 	beq.w	17c3c <bt_le_adv_start_legacy+0x3b4>
   178b6:	4605      	mov	r5, r0
   178b8:	460c      	mov	r4, r1
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   178ba:	4608      	mov	r0, r1
   178bc:	f00d fd9e 	bl	253fc <valid_adv_param>
   178c0:	2800      	cmp	r0, #0
   178c2:	f000 81be 	beq.w	17c42 <bt_le_adv_start_legacy+0x3ba>
		return -EINVAL;
	}

	if (!bt_id_adv_random_addr_check(param)) {
   178c6:	4620      	mov	r0, r4
   178c8:	f00d fc92 	bl	251f0 <bt_id_adv_random_addr_check>
   178cc:	4683      	mov	fp, r0
   178ce:	2800      	cmp	r0, #0
   178d0:	f000 81ba 	beq.w	17c48 <bt_le_adv_start_legacy+0x3c0>
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   178d4:	f105 0610 	add.w	r6, r5, #16
   178d8:	f3bf 8f5b 	dmb	ish
   178dc:	692b      	ldr	r3, [r5, #16]
   178de:	f3bf 8f5b 	dmb	ish
   178e2:	f013 0f40 	tst.w	r3, #64	; 0x40
   178e6:	f040 81b2 	bne.w	17c4e <bt_le_adv_start_legacy+0x3c6>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
   178ea:	220f      	movs	r2, #15
   178ec:	2100      	movs	r1, #0
   178ee:	a80a      	add	r0, sp, #40	; 0x28
   178f0:	f00d f8e0 	bl	24ab4 <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   178f4:	68a3      	ldr	r3, [r4, #8]
   178f6:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   178fa:	68e3      	ldr	r3, [r4, #12]
   178fc:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
   17900:	f8d4 9004 	ldr.w	r9, [r4, #4]
   17904:	4648      	mov	r0, r9
   17906:	f00d fc8e 	bl	25226 <get_adv_channel_map>
   1790a:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	set_param.filter_policy = get_filter_policy(param->options);
   1790e:	4648      	mov	r0, r9
   17910:	f00d fc87 	bl	25222 <get_filter_policy>
   17914:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36

	if (adv->id != param->id) {
   17918:	782a      	ldrb	r2, [r5, #0]
   1791a:	7823      	ldrb	r3, [r4, #0]
   1791c:	429a      	cmp	r2, r3
   1791e:	d00c      	beq.n	1793a <bt_le_adv_start_legacy+0xb2>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17920:	4ba7      	ldr	r3, [pc, #668]	; (17bc0 <bt_le_adv_start_legacy+0x338>)
   17922:	f3bf 8f5b 	dmb	ish
   17926:	e853 2f00 	ldrex	r2, [r3]
   1792a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   1792e:	e843 2100 	strex	r1, r2, [r3]
   17932:	2900      	cmp	r1, #0
   17934:	d1f7      	bne.n	17926 <bt_le_adv_start_legacy+0x9e>
   17936:	f3bf 8f5b 	dmb	ish
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
   1793a:	7823      	ldrb	r3, [r4, #0]
   1793c:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   1793e:	4aa1      	ldr	r2, [pc, #644]	; (17bc4 <bt_le_adv_start_legacy+0x33c>)
   17940:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33

	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   17944:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   17948:	4652      	mov	r2, sl
   1794a:	6861      	ldr	r1, [r4, #4]
   1794c:	4628      	mov	r0, r5
   1794e:	f7ff fe07 	bl	17560 <bt_id_set_adv_own_addr>
				     &set_param.own_addr_type);
	if (err) {
   17952:	4681      	mov	r9, r0
   17954:	2800      	cmp	r0, #0
   17956:	f040 80f3 	bne.w	17b40 <bt_le_adv_start_legacy+0x2b8>
		return err;
	}

	if (dir_adv) {
   1795a:	b1bf      	cbz	r7, 1798c <bt_le_adv_start_legacy+0x104>
	memcpy(dst, src, sizeof(*dst));
   1795c:	2207      	movs	r2, #7
   1795e:	6921      	ldr	r1, [r4, #16]
   17960:	f105 0009 	add.w	r0, r5, #9
   17964:	f00d f882 	bl	24a6c <memcpy>
		bt_addr_le_copy(&adv->target_addr, param->peer);
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   17968:	6863      	ldr	r3, [r4, #4]
   1796a:	f013 0f01 	tst.w	r3, #1
   1796e:	d020      	beq.n	179b2 <bt_le_adv_start_legacy+0x12a>
		scannable = true;

		if (dir_adv) {
   17970:	b1df      	cbz	r7, 179aa <bt_le_adv_start_legacy+0x122>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
   17972:	f013 0f10 	tst.w	r3, #16
   17976:	d014      	beq.n	179a2 <bt_le_adv_start_legacy+0x11a>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   17978:	2304      	movs	r3, #4
   1797a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   1797e:	2207      	movs	r2, #7
   17980:	6921      	ldr	r1, [r4, #16]
   17982:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   17986:	f00d f871 	bl	24a6c <memcpy>
}
   1798a:	e01c      	b.n	179c6 <bt_le_adv_start_legacy+0x13e>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   1798c:	2300      	movs	r3, #0
   1798e:	930e      	str	r3, [sp, #56]	; 0x38
   17990:	f8cd 303b 	str.w	r3, [sp, #59]	; 0x3b
	memcpy(dst, src, sizeof(*dst));
   17994:	2207      	movs	r2, #7
   17996:	a90e      	add	r1, sp, #56	; 0x38
   17998:	f105 0009 	add.w	r0, r5, #9
   1799c:	f00d f866 	bl	24a6c <memcpy>
   179a0:	e7e2      	b.n	17968 <bt_le_adv_start_legacy+0xe0>
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   179a2:	2301      	movs	r3, #1
   179a4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   179a8:	e7e9      	b.n	1797e <bt_le_adv_start_legacy+0xf6>
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
		} else {
			set_param.type = BT_HCI_ADV_IND;
   179aa:	2300      	movs	r3, #0
   179ac:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   179b0:	e009      	b.n	179c6 <bt_le_adv_start_legacy+0x13e>
		}
	} else {
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   179b2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   179b4:	b382      	cbz	r2, 17a18 <bt_le_adv_start_legacy+0x190>
   179b6:	f04f 0901 	mov.w	r9, #1

		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
   179ba:	f019 0b01 	ands.w	fp, r9, #1
   179be:	d031      	beq.n	17a24 <bt_le_adv_start_legacy+0x19c>
   179c0:	2302      	movs	r3, #2
   179c2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
					     BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   179c6:	210f      	movs	r1, #15
   179c8:	f242 0006 	movw	r0, #8198	; 0x2006
   179cc:	f7fd ff34 	bl	15838 <bt_hci_cmd_create>
	if (!buf) {
   179d0:	4681      	mov	r9, r0
   179d2:	2800      	cmp	r0, #0
   179d4:	f000 813e 	beq.w	17c54 <bt_le_adv_start_legacy+0x3cc>
   179d8:	220f      	movs	r2, #15
   179da:	a90a      	add	r1, sp, #40	; 0x28
   179dc:	3008      	adds	r0, #8
   179de:	f010 fcae 	bl	2833e <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   179e2:	2200      	movs	r2, #0
   179e4:	4649      	mov	r1, r9
   179e6:	f242 0006 	movw	r0, #8198	; 0x2006
   179ea:	f7fd ff61 	bl	158b0 <bt_hci_cmd_send_sync>
	if (err) {
   179ee:	4681      	mov	r9, r0
   179f0:	2800      	cmp	r0, #0
   179f2:	f040 80a5 	bne.w	17b40 <bt_le_adv_start_legacy+0x2b8>
		return err;
	}

	if (!dir_adv) {
   179f6:	b1bf      	cbz	r7, 17a28 <bt_le_adv_start_legacy+0x1a0>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   179f8:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   179fa:	f013 0f01 	tst.w	r3, #1
   179fe:	d030      	beq.n	17a62 <bt_le_adv_start_legacy+0x1da>
		err = le_adv_start_add_conn(adv, &conn);
   17a00:	a909      	add	r1, sp, #36	; 0x24
   17a02:	4628      	mov	r0, r5
   17a04:	f7ff feb6 	bl	17774 <le_adv_start_add_conn>
		if (err) {
   17a08:	b358      	cbz	r0, 17a62 <bt_le_adv_start_legacy+0x1da>
			if (err == -ENOMEM && !dir_adv &&
   17a0a:	f110 0f0c 	cmn.w	r0, #12
   17a0e:	f040 8124 	bne.w	17c5a <bt_le_adv_start_legacy+0x3d2>
   17a12:	b307      	cbz	r7, 17a56 <bt_le_adv_start_legacy+0x1ce>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
				goto set_adv_state;
			}

			return err;
   17a14:	4681      	mov	r9, r0
   17a16:	e093      	b.n	17b40 <bt_le_adv_start_legacy+0x2b8>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   17a18:	f013 0f08 	tst.w	r3, #8
   17a1c:	d0cd      	beq.n	179ba <bt_le_adv_start_legacy+0x132>
   17a1e:	f04f 0901 	mov.w	r9, #1
   17a22:	e7ca      	b.n	179ba <bt_le_adv_start_legacy+0x132>
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
   17a24:	2303      	movs	r3, #3
   17a26:	e7cc      	b.n	179c2 <bt_le_adv_start_legacy+0x13a>
				    param->options & BT_LE_ADV_OPT_USE_NAME,
   17a28:	6863      	ldr	r3, [r4, #4]
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   17a2a:	f3c3 4280 	ubfx	r2, r3, #18, #1
   17a2e:	9204      	str	r2, [sp, #16]
   17a30:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   17a34:	9303      	str	r3, [sp, #12]
   17a36:	f8cd b008 	str.w	fp, [sp, #8]
   17a3a:	2300      	movs	r3, #0
   17a3c:	9301      	str	r3, [sp, #4]
   17a3e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   17a40:	9300      	str	r3, [sp, #0]
   17a42:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   17a44:	4642      	mov	r2, r8
   17a46:	9907      	ldr	r1, [sp, #28]
   17a48:	4628      	mov	r0, r5
   17a4a:	f00d fc38 	bl	252be <le_adv_update>
		if (err) {
   17a4e:	2800      	cmp	r0, #0
   17a50:	d0d2      	beq.n	179f8 <bt_le_adv_start_legacy+0x170>
			return err;
   17a52:	4681      	mov	r9, r0
   17a54:	e074      	b.n	17b40 <bt_le_adv_start_legacy+0x2b8>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   17a56:	6862      	ldr	r2, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   17a58:	f012 0f02 	tst.w	r2, #2
   17a5c:	d00c      	beq.n	17a78 <bt_le_adv_start_legacy+0x1f0>
			return err;
   17a5e:	4681      	mov	r9, r0
   17a60:	e06e      	b.n	17b40 <bt_le_adv_start_legacy+0x2b8>
		}
	}

	err = bt_le_adv_set_enable(adv, true);
   17a62:	2101      	movs	r1, #1
   17a64:	4628      	mov	r0, r5
   17a66:	f00d fd02 	bl	2546e <bt_le_adv_set_enable>
	if (err) {
   17a6a:	4605      	mov	r5, r0
   17a6c:	2800      	cmp	r0, #0
   17a6e:	d16b      	bne.n	17b48 <bt_le_adv_start_legacy+0x2c0>
		}

		return err;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   17a70:	9809      	ldr	r0, [sp, #36]	; 0x24
   17a72:	b108      	cbz	r0, 17a78 <bt_le_adv_start_legacy+0x1f0>
		/* If undirected connectable advertiser we have created a
		 * connection object that we don't yet give to the application.
		 * Since we don't give the application a reference to manage in
		 * this case, we need to release this reference here
		 */
		bt_conn_unref(conn);
   17a74:	f00d ff40 	bl	258f8 <bt_conn_unref>
	}

set_adv_state:
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   17a78:	2f00      	cmp	r7, #0
   17a7a:	d07f      	beq.n	17b7c <bt_le_adv_start_legacy+0x2f4>
   17a7c:	464b      	mov	r3, r9
	if (val) {
   17a7e:	f013 0f01 	tst.w	r3, #1
   17a82:	f000 8083 	beq.w	17b8c <bt_le_adv_start_legacy+0x304>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17a86:	f3bf 8f5b 	dmb	ish
   17a8a:	e856 3f00 	ldrex	r3, [r6]
   17a8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   17a92:	e846 3200 	strex	r2, r3, [r6]
   17a96:	2a00      	cmp	r2, #0
   17a98:	d1f7      	bne.n	17a8a <bt_le_adv_start_legacy+0x202>
   17a9a:	f3bf 8f5b 	dmb	ish
			  !(param->options & BT_LE_ADV_OPT_ONE_TIME));

	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
			  param->options & BT_LE_ADV_OPT_USE_NAME);
   17a9e:	6863      	ldr	r3, [r4, #4]
   17aa0:	f013 0f08 	tst.w	r3, #8
   17aa4:	d07f      	beq.n	17ba6 <bt_le_adv_start_legacy+0x31e>
   17aa6:	f3bf 8f5b 	dmb	ish
   17aaa:	e856 3f00 	ldrex	r3, [r6]
   17aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   17ab2:	e846 3200 	strex	r2, r3, [r6]
   17ab6:	2a00      	cmp	r2, #0
   17ab8:	d1f7      	bne.n	17aaa <bt_le_adv_start_legacy+0x222>
   17aba:	f3bf 8f5b 	dmb	ish

	atomic_set_bit_to(adv->flags, BT_ADV_FORCE_NAME_IN_AD,
			  param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD);
   17abe:	6863      	ldr	r3, [r4, #4]
   17ac0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   17ac4:	f000 8086 	beq.w	17bd4 <bt_le_adv_start_legacy+0x34c>
   17ac8:	f3bf 8f5b 	dmb	ish
   17acc:	e856 3f00 	ldrex	r3, [r6]
   17ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   17ad4:	e846 3200 	strex	r2, r3, [r6]
   17ad8:	2a00      	cmp	r2, #0
   17ada:	d1f7      	bne.n	17acc <bt_le_adv_start_legacy+0x244>
   17adc:	f3bf 8f5b 	dmb	ish

	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
			  param->options & BT_LE_ADV_OPT_CONNECTABLE);
   17ae0:	6863      	ldr	r3, [r4, #4]
   17ae2:	f013 0f01 	tst.w	r3, #1
   17ae6:	f000 8082 	beq.w	17bee <bt_le_adv_start_legacy+0x366>
   17aea:	f3bf 8f5b 	dmb	ish
   17aee:	e856 3f00 	ldrex	r3, [r6]
   17af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   17af6:	e846 3200 	strex	r2, r3, [r6]
   17afa:	2a00      	cmp	r2, #0
   17afc:	d1f7      	bne.n	17aee <bt_le_adv_start_legacy+0x266>
   17afe:	f3bf 8f5b 	dmb	ish
   17b02:	f1bb 0f00 	cmp.w	fp, #0
   17b06:	d07f      	beq.n	17c08 <bt_le_adv_start_legacy+0x380>
   17b08:	f3bf 8f5b 	dmb	ish
   17b0c:	e856 3f00 	ldrex	r3, [r6]
   17b10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   17b14:	e846 3200 	strex	r2, r3, [r6]
   17b18:	2a00      	cmp	r2, #0
   17b1a:	d1f7      	bne.n	17b0c <bt_le_adv_start_legacy+0x284>
   17b1c:	f3bf 8f5b 	dmb	ish

	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);
   17b20:	6863      	ldr	r3, [r4, #4]
   17b22:	f013 0f04 	tst.w	r3, #4
   17b26:	d07c      	beq.n	17c22 <bt_le_adv_start_legacy+0x39a>
   17b28:	f3bf 8f5b 	dmb	ish
   17b2c:	e856 3f00 	ldrex	r3, [r6]
   17b30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   17b34:	e846 3200 	strex	r2, r3, [r6]
   17b38:	2a00      	cmp	r2, #0
   17b3a:	d1f7      	bne.n	17b2c <bt_le_adv_start_legacy+0x2a4>
   17b3c:	f3bf 8f5b 	dmb	ish

	return 0;
}
   17b40:	4648      	mov	r0, r9
   17b42:	b011      	add	sp, #68	; 0x44
   17b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b48:	4b1f      	ldr	r3, [pc, #124]	; (17bc8 <bt_le_adv_start_legacy+0x340>)
   17b4a:	4a20      	ldr	r2, [pc, #128]	; (17bcc <bt_le_adv_start_legacy+0x344>)
   17b4c:	1a9b      	subs	r3, r3, r2
   17b4e:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to start advertiser");
   17b50:	f04f 0100 	mov.w	r1, #0
   17b54:	2201      	movs	r2, #1
   17b56:	f362 0102 	bfi	r1, r2, #0, #3
   17b5a:	f36f 01c5 	bfc	r1, #3, #3
   17b5e:	f363 118f 	bfi	r1, r3, #6, #10
   17b62:	481b      	ldr	r0, [pc, #108]	; (17bd0 <bt_le_adv_start_legacy+0x348>)
   17b64:	f7f9 fb8a 	bl	1127c <log_0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   17b68:	9809      	ldr	r0, [sp, #36]	; 0x24
   17b6a:	b128      	cbz	r0, 17b78 <bt_le_adv_start_legacy+0x2f0>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   17b6c:	2100      	movs	r1, #0
   17b6e:	f000 fd15 	bl	1859c <bt_conn_set_state>
			bt_conn_unref(conn);
   17b72:	9809      	ldr	r0, [sp, #36]	; 0x24
   17b74:	f00d fec0 	bl	258f8 <bt_conn_unref>
		return err;
   17b78:	46a9      	mov	r9, r5
   17b7a:	e7e1      	b.n	17b40 <bt_le_adv_start_legacy+0x2b8>
			  !(param->options & BT_LE_ADV_OPT_ONE_TIME));
   17b7c:	6863      	ldr	r3, [r4, #4]
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   17b7e:	f013 0f02 	tst.w	r3, #2
   17b82:	d001      	beq.n	17b88 <bt_le_adv_start_legacy+0x300>
   17b84:	464b      	mov	r3, r9
   17b86:	e77a      	b.n	17a7e <bt_le_adv_start_legacy+0x1f6>
   17b88:	2301      	movs	r3, #1
   17b8a:	e778      	b.n	17a7e <bt_le_adv_start_legacy+0x1f6>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17b8c:	f3bf 8f5b 	dmb	ish
   17b90:	e856 3f00 	ldrex	r3, [r6]
   17b94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   17b98:	e846 3200 	strex	r2, r3, [r6]
   17b9c:	2a00      	cmp	r2, #0
   17b9e:	d1f7      	bne.n	17b90 <bt_le_adv_start_legacy+0x308>
   17ba0:	f3bf 8f5b 	dmb	ish
   17ba4:	e77b      	b.n	17a9e <bt_le_adv_start_legacy+0x216>
   17ba6:	f3bf 8f5b 	dmb	ish
   17baa:	e856 3f00 	ldrex	r3, [r6]
   17bae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   17bb2:	e846 3200 	strex	r2, r3, [r6]
   17bb6:	2a00      	cmp	r2, #0
   17bb8:	d1f7      	bne.n	17baa <bt_le_adv_start_legacy+0x322>
   17bba:	f3bf 8f5b 	dmb	ish
   17bbe:	e77e      	b.n	17abe <bt_le_adv_start_legacy+0x236>
   17bc0:	20000338 	.word	0x20000338
   17bc4:	200002a0 	.word	0x200002a0
   17bc8:	00029ed4 	.word	0x00029ed4
   17bcc:	00029ecc 	.word	0x00029ecc
   17bd0:	0002bd20 	.word	0x0002bd20
   17bd4:	f3bf 8f5b 	dmb	ish
   17bd8:	e856 3f00 	ldrex	r3, [r6]
   17bdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
   17be0:	e846 3200 	strex	r2, r3, [r6]
   17be4:	2a00      	cmp	r2, #0
   17be6:	d1f7      	bne.n	17bd8 <bt_le_adv_start_legacy+0x350>
   17be8:	f3bf 8f5b 	dmb	ish
   17bec:	e778      	b.n	17ae0 <bt_le_adv_start_legacy+0x258>
   17bee:	f3bf 8f5b 	dmb	ish
   17bf2:	e856 3f00 	ldrex	r3, [r6]
   17bf6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   17bfa:	e846 3200 	strex	r2, r3, [r6]
   17bfe:	2a00      	cmp	r2, #0
   17c00:	d1f7      	bne.n	17bf2 <bt_le_adv_start_legacy+0x36a>
   17c02:	f3bf 8f5b 	dmb	ish
   17c06:	e77c      	b.n	17b02 <bt_le_adv_start_legacy+0x27a>
   17c08:	f3bf 8f5b 	dmb	ish
   17c0c:	e856 3f00 	ldrex	r3, [r6]
   17c10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   17c14:	e846 3200 	strex	r2, r3, [r6]
   17c18:	2a00      	cmp	r2, #0
   17c1a:	d1f7      	bne.n	17c0c <bt_le_adv_start_legacy+0x384>
   17c1c:	f3bf 8f5b 	dmb	ish
   17c20:	e77e      	b.n	17b20 <bt_le_adv_start_legacy+0x298>
   17c22:	f3bf 8f5b 	dmb	ish
   17c26:	e856 3f00 	ldrex	r3, [r6]
   17c2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   17c2e:	e846 3200 	strex	r2, r3, [r6]
   17c32:	2a00      	cmp	r2, #0
   17c34:	d1f7      	bne.n	17c26 <bt_le_adv_start_legacy+0x39e>
   17c36:	f3bf 8f5b 	dmb	ish
}
   17c3a:	e781      	b.n	17b40 <bt_le_adv_start_legacy+0x2b8>
		return -EAGAIN;
   17c3c:	f06f 090a 	mvn.w	r9, #10
   17c40:	e77e      	b.n	17b40 <bt_le_adv_start_legacy+0x2b8>
		return -EINVAL;
   17c42:	f06f 0915 	mvn.w	r9, #21
   17c46:	e77b      	b.n	17b40 <bt_le_adv_start_legacy+0x2b8>
		return -EINVAL;
   17c48:	f06f 0915 	mvn.w	r9, #21
   17c4c:	e778      	b.n	17b40 <bt_le_adv_start_legacy+0x2b8>
		return -EALREADY;
   17c4e:	f06f 0977 	mvn.w	r9, #119	; 0x77
   17c52:	e775      	b.n	17b40 <bt_le_adv_start_legacy+0x2b8>
		return -ENOBUFS;
   17c54:	f06f 0968 	mvn.w	r9, #104	; 0x68
   17c58:	e772      	b.n	17b40 <bt_le_adv_start_legacy+0x2b8>
			return err;
   17c5a:	4681      	mov	r9, r0
   17c5c:	e770      	b.n	17b40 <bt_le_adv_start_legacy+0x2b8>
   17c5e:	bf00      	nop

00017c60 <bt_le_adv_stop>:

	return err;
}

int bt_le_adv_stop(void)
{
   17c60:	b510      	push	{r4, lr}
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   17c62:	f7ff fe0d 	bl	17880 <bt_le_adv_lookup_legacy>
	int err;

	if (!adv) {
   17c66:	b1c8      	cbz	r0, 17c9c <bt_le_adv_stop+0x3c>
   17c68:	4604      	mov	r4, r0
	}

	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);
   17c6a:	f100 0310 	add.w	r3, r0, #16
   17c6e:	f3bf 8f5b 	dmb	ish
   17c72:	e853 2f00 	ldrex	r2, [r3]
   17c76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   17c7a:	e843 2100 	strex	r1, r2, [r3]
   17c7e:	2900      	cmp	r1, #0
   17c80:	d1f7      	bne.n	17c72 <bt_le_adv_stop+0x12>
   17c82:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17c86:	f3bf 8f5b 	dmb	ish
   17c8a:	6923      	ldr	r3, [r4, #16]
   17c8c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   17c90:	f3c3 1080 	ubfx	r0, r3, #6, #1

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   17c94:	f013 0f40 	tst.w	r3, #64	; 0x40
   17c98:	d112      	bne.n	17cc0 <bt_le_adv_stop+0x60>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   17c9a:	bd10      	pop	{r4, pc}
   17c9c:	4b11      	ldr	r3, [pc, #68]	; (17ce4 <bt_le_adv_stop+0x84>)
   17c9e:	4a12      	ldr	r2, [pc, #72]	; (17ce8 <bt_le_adv_stop+0x88>)
   17ca0:	1a9b      	subs	r3, r3, r2
   17ca2:	08db      	lsrs	r3, r3, #3
		BT_ERR("No valid legacy adv");
   17ca4:	f04f 0100 	mov.w	r1, #0
   17ca8:	2201      	movs	r2, #1
   17caa:	f362 0102 	bfi	r1, r2, #0, #3
   17cae:	f36f 01c5 	bfc	r1, #3, #3
   17cb2:	f363 118f 	bfi	r1, r3, #6, #10
   17cb6:	480d      	ldr	r0, [pc, #52]	; (17cec <bt_le_adv_stop+0x8c>)
   17cb8:	f7f9 fae0 	bl	1127c <log_0>
		return 0;
   17cbc:	2000      	movs	r0, #0
   17cbe:	e7ec      	b.n	17c9a <bt_le_adv_stop+0x3a>
   17cc0:	f3bf 8f5b 	dmb	ish
   17cc4:	6923      	ldr	r3, [r4, #16]
   17cc6:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   17cca:	f413 7f80 	tst.w	r3, #256	; 0x100
   17cce:	d104      	bne.n	17cda <bt_le_adv_stop+0x7a>
		err = bt_le_adv_set_enable_legacy(adv, false);
   17cd0:	2100      	movs	r1, #0
   17cd2:	4620      	mov	r0, r4
   17cd4:	f00d fba3 	bl	2541e <bt_le_adv_set_enable_legacy>
		if (err) {
   17cd8:	e7df      	b.n	17c9a <bt_le_adv_stop+0x3a>
		le_adv_stop_free_conn(adv, 0);
   17cda:	2100      	movs	r1, #0
   17cdc:	4620      	mov	r0, r4
   17cde:	f7ff fd93 	bl	17808 <le_adv_stop_free_conn>
   17ce2:	e7f5      	b.n	17cd0 <bt_le_adv_stop+0x70>
   17ce4:	00029ed4 	.word	0x00029ed4
   17ce8:	00029ecc 	.word	0x00029ecc
   17cec:	0002bd3c 	.word	0x0002bd3c

00017cf0 <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
   17cf0:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, 64) == 0;
   17cf2:	2240      	movs	r2, #64	; 0x40
   17cf4:	4903      	ldr	r1, [pc, #12]	; (17d04 <bt_pub_key_is_debug+0x14>)
   17cf6:	f00c fea2 	bl	24a3e <memcmp>
}
   17cfa:	fab0 f080 	clz	r0, r0
   17cfe:	0940      	lsrs	r0, r0, #5
   17d00:	bd08      	pop	{r3, pc}
   17d02:	bf00      	nop
   17d04:	0002bdec 	.word	0x0002bdec

00017d08 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   17d08:	b538      	push	{r3, r4, r5, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   17d0a:	4b54      	ldr	r3, [pc, #336]	; (17e5c <bt_pub_key_gen+0x154>)
   17d0c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
   17d10:	f003 0306 	and.w	r3, r3, #6
   17d14:	2b06      	cmp	r3, #6
   17d16:	d107      	bne.n	17d28 <bt_pub_key_gen+0x20>
			new_cb->func(debug_public_key);
			return 0;
		}
	}

	if (!new_cb) {
   17d18:	2800      	cmp	r0, #0
   17d1a:	f000 809c 	beq.w	17e56 <bt_pub_key_gen+0x14e>
	return list->head;
   17d1e:	4b50      	ldr	r3, [pc, #320]	; (17e60 <bt_pub_key_gen+0x158>)
   17d20:	6819      	ldr	r1, [r3, #0]
		return -EINVAL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17d22:	b339      	cbz	r1, 17d74 <bt_pub_key_gen+0x6c>
   17d24:	1f0b      	subs	r3, r1, #4
   17d26:	e028      	b.n	17d7a <bt_pub_key_gen+0x72>
   17d28:	4b4e      	ldr	r3, [pc, #312]	; (17e64 <bt_pub_key_gen+0x15c>)
   17d2a:	4a4f      	ldr	r2, [pc, #316]	; (17e68 <bt_pub_key_gen+0x160>)
   17d2c:	1a9b      	subs	r3, r3, r2
   17d2e:	08db      	lsrs	r3, r3, #3
		BT_WARN("ECC HCI commands not available");
   17d30:	f04f 0100 	mov.w	r1, #0
   17d34:	2202      	movs	r2, #2
   17d36:	f362 0102 	bfi	r1, r2, #0, #3
   17d3a:	f36f 01c5 	bfc	r1, #3, #3
   17d3e:	f363 118f 	bfi	r1, r3, #6, #10
   17d42:	484a      	ldr	r0, [pc, #296]	; (17e6c <bt_pub_key_gen+0x164>)
   17d44:	f7f9 fa9a 	bl	1127c <log_0>
		return -ENOTSUP;
   17d48:	f06f 0585 	mvn.w	r5, #133	; 0x85
   17d4c:	e04d      	b.n	17dea <bt_pub_key_gen+0xe2>
   17d4e:	4b45      	ldr	r3, [pc, #276]	; (17e64 <bt_pub_key_gen+0x15c>)
   17d50:	4a45      	ldr	r2, [pc, #276]	; (17e68 <bt_pub_key_gen+0x160>)
   17d52:	1a9b      	subs	r3, r3, r2
   17d54:	08db      	lsrs	r3, r3, #3
		if (cb == new_cb) {
			BT_WARN("Callback already registered");
   17d56:	f04f 0100 	mov.w	r1, #0
   17d5a:	2202      	movs	r2, #2
   17d5c:	f362 0102 	bfi	r1, r2, #0, #3
   17d60:	f36f 01c5 	bfc	r1, #3, #3
   17d64:	f363 118f 	bfi	r1, r3, #6, #10
   17d68:	4841      	ldr	r0, [pc, #260]	; (17e70 <bt_pub_key_gen+0x168>)
   17d6a:	f7f9 fa87 	bl	1127c <log_0>
			return -EALREADY;
   17d6e:	f06f 0577 	mvn.w	r5, #119	; 0x77
   17d72:	e03a      	b.n	17dea <bt_pub_key_gen+0xe2>
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17d74:	460b      	mov	r3, r1
   17d76:	e000      	b.n	17d7a <bt_pub_key_gen+0x72>
   17d78:	4613      	mov	r3, r2
   17d7a:	b13b      	cbz	r3, 17d8c <bt_pub_key_gen+0x84>
		if (cb == new_cb) {
   17d7c:	4298      	cmp	r0, r3
   17d7e:	d0e6      	beq.n	17d4e <bt_pub_key_gen+0x46>
Z_GENLIST_PEEK_NEXT(slist, snode)
   17d80:	1d1a      	adds	r2, r3, #4
   17d82:	d0f9      	beq.n	17d78 <bt_pub_key_gen+0x70>
	return node->next;
   17d84:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17d86:	b10b      	cbz	r3, 17d8c <bt_pub_key_gen+0x84>
   17d88:	3b04      	subs	r3, #4
   17d8a:	e7f6      	b.n	17d7a <bt_pub_key_gen+0x72>
		}
	}

	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   17d8c:	1d02      	adds	r2, r0, #4
	parent->next = child;
   17d8e:	6041      	str	r1, [r0, #4]
	list->head = node;
   17d90:	4b33      	ldr	r3, [pc, #204]	; (17e60 <bt_pub_key_gen+0x158>)
   17d92:	601a      	str	r2, [r3, #0]
	return list->tail;
   17d94:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   17d96:	b18b      	cbz	r3, 17dbc <bt_pub_key_gen+0xb4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17d98:	4b36      	ldr	r3, [pc, #216]	; (17e74 <bt_pub_key_gen+0x16c>)
   17d9a:	f3bf 8f5b 	dmb	ish
   17d9e:	e853 2f00 	ldrex	r2, [r3]
   17da2:	f042 0110 	orr.w	r1, r2, #16
   17da6:	e843 1000 	strex	r0, r1, [r3]
   17daa:	2800      	cmp	r0, #0
   17dac:	d1f7      	bne.n	17d9e <bt_pub_key_gen+0x96>
   17dae:	f3bf 8f5b 	dmb	ish

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   17db2:	f012 0f10 	tst.w	r2, #16
   17db6:	d004      	beq.n	17dc2 <bt_pub_key_gen+0xba>
		return 0;
   17db8:	2500      	movs	r5, #0
   17dba:	e016      	b.n	17dea <bt_pub_key_gen+0xe2>
	list->tail = node;
   17dbc:	4b28      	ldr	r3, [pc, #160]	; (17e60 <bt_pub_key_gen+0x158>)
   17dbe:	605a      	str	r2, [r3, #4]
}
   17dc0:	e7ea      	b.n	17d98 <bt_pub_key_gen+0x90>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17dc2:	f3bf 8f5b 	dmb	ish
   17dc6:	e853 2f00 	ldrex	r2, [r3]
   17dca:	f022 0208 	bic.w	r2, r2, #8
   17dce:	e843 2100 	strex	r1, r2, [r3]
   17dd2:	2900      	cmp	r1, #0
   17dd4:	d1f7      	bne.n	17dc6 <bt_pub_key_gen+0xbe>
   17dd6:	f3bf 8f5b 	dmb	ish
	}

	atomic_clear_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   17dda:	2200      	movs	r2, #0
   17ddc:	4611      	mov	r1, r2
   17dde:	f242 0025 	movw	r0, #8229	; 0x2025
   17de2:	f7fd fd65 	bl	158b0 <bt_hci_cmd_send_sync>
	if (err) {
   17de6:	4605      	mov	r5, r0
   17de8:	b908      	cbnz	r0, 17dee <bt_pub_key_gen+0xe6>
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   17dea:	4628      	mov	r0, r5
   17dec:	bd38      	pop	{r3, r4, r5, pc}
   17dee:	4b1d      	ldr	r3, [pc, #116]	; (17e64 <bt_pub_key_gen+0x15c>)
   17df0:	4a1d      	ldr	r2, [pc, #116]	; (17e68 <bt_pub_key_gen+0x160>)
   17df2:	1a9b      	subs	r3, r3, r2
   17df4:	08db      	lsrs	r3, r3, #3
		BT_ERR("Sending LE P256 Public Key command failed");
   17df6:	f04f 0100 	mov.w	r1, #0
   17dfa:	2201      	movs	r2, #1
   17dfc:	f362 0102 	bfi	r1, r2, #0, #3
   17e00:	f36f 01c5 	bfc	r1, #3, #3
   17e04:	f363 118f 	bfi	r1, r3, #6, #10
   17e08:	481b      	ldr	r0, [pc, #108]	; (17e78 <bt_pub_key_gen+0x170>)
   17e0a:	f7f9 fa37 	bl	1127c <log_0>
   17e0e:	4b19      	ldr	r3, [pc, #100]	; (17e74 <bt_pub_key_gen+0x16c>)
   17e10:	f3bf 8f5b 	dmb	ish
   17e14:	e853 2f00 	ldrex	r2, [r3]
   17e18:	f022 0210 	bic.w	r2, r2, #16
   17e1c:	e843 2100 	strex	r1, r2, [r3]
   17e20:	2900      	cmp	r1, #0
   17e22:	d1f7      	bne.n	17e14 <bt_pub_key_gen+0x10c>
   17e24:	f3bf 8f5b 	dmb	ish
	return list->head;
   17e28:	4b0d      	ldr	r3, [pc, #52]	; (17e60 <bt_pub_key_gen+0x158>)
   17e2a:	681c      	ldr	r4, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17e2c:	b13c      	cbz	r4, 17e3e <bt_pub_key_gen+0x136>
   17e2e:	3c04      	subs	r4, #4
   17e30:	e005      	b.n	17e3e <bt_pub_key_gen+0x136>
Z_GENLIST_PEEK_NEXT(slist, snode)
   17e32:	f114 0f04 	cmn.w	r4, #4
   17e36:	d009      	beq.n	17e4c <bt_pub_key_gen+0x144>
	return node->next;
   17e38:	6864      	ldr	r4, [r4, #4]
   17e3a:	b13c      	cbz	r4, 17e4c <bt_pub_key_gen+0x144>
   17e3c:	3c04      	subs	r4, #4
   17e3e:	b12c      	cbz	r4, 17e4c <bt_pub_key_gen+0x144>
			if (cb->func) {
   17e40:	6823      	ldr	r3, [r4, #0]
   17e42:	2b00      	cmp	r3, #0
   17e44:	d0f5      	beq.n	17e32 <bt_pub_key_gen+0x12a>
				cb->func(NULL);
   17e46:	2000      	movs	r0, #0
   17e48:	4798      	blx	r3
   17e4a:	e7f2      	b.n	17e32 <bt_pub_key_gen+0x12a>
	list->head = NULL;
   17e4c:	4b04      	ldr	r3, [pc, #16]	; (17e60 <bt_pub_key_gen+0x158>)
   17e4e:	2200      	movs	r2, #0
   17e50:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   17e52:	605a      	str	r2, [r3, #4]
		return err;
   17e54:	e7c9      	b.n	17dea <bt_pub_key_gen+0xe2>
		return -EINVAL;
   17e56:	f06f 0515 	mvn.w	r5, #21
   17e5a:	e7c6      	b.n	17dea <bt_pub_key_gen+0xe2>
   17e5c:	200002a0 	.word	0x200002a0
   17e60:	20002708 	.word	0x20002708
   17e64:	00029efc 	.word	0x00029efc
   17e68:	00029ecc 	.word	0x00029ecc
   17e6c:	0002bd58 	.word	0x0002bd58
   17e70:	0002bd78 	.word	0x0002bd78
   17e74:	20000338 	.word	0x20000338
   17e78:	0002bd94 	.word	0x0002bd94

00017e7c <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17e7c:	f3bf 8f5b 	dmb	ish
   17e80:	4b05      	ldr	r3, [pc, #20]	; (17e98 <bt_pub_key_get+0x1c>)
   17e82:	681b      	ldr	r3, [r3, #0]
   17e84:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_USE_DEBUG_KEYS) &&
	    BT_CMD_TEST(bt_dev.supported_commands, 41, 2)) {
		return debug_public_key;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   17e88:	f013 0f08 	tst.w	r3, #8
   17e8c:	d001      	beq.n	17e92 <bt_pub_key_get+0x16>
		return pub_key;
   17e8e:	4803      	ldr	r0, [pc, #12]	; (17e9c <bt_pub_key_get+0x20>)
	}

	return NULL;
}
   17e90:	4770      	bx	lr
	return NULL;
   17e92:	2000      	movs	r0, #0
   17e94:	4770      	bx	lr
   17e96:	bf00      	nop
   17e98:	20000338 	.word	0x20000338
   17e9c:	200026c8 	.word	0x200026c8

00017ea0 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[64], bt_dh_key_cb_t cb)
{
   17ea0:	b510      	push	{r4, lr}
	int err;

	if (dh_key_cb == cb) {
   17ea2:	4b1e      	ldr	r3, [pc, #120]	; (17f1c <bt_dh_key_gen+0x7c>)
   17ea4:	681b      	ldr	r3, [r3, #0]
   17ea6:	428b      	cmp	r3, r1
   17ea8:	d032      	beq.n	17f10 <bt_dh_key_gen+0x70>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   17eaa:	b9cb      	cbnz	r3, 17ee0 <bt_dh_key_gen+0x40>
   17eac:	f3bf 8f5b 	dmb	ish
   17eb0:	4b1b      	ldr	r3, [pc, #108]	; (17f20 <bt_dh_key_gen+0x80>)
   17eb2:	681b      	ldr	r3, [r3, #0]
   17eb4:	f3bf 8f5b 	dmb	ish
   17eb8:	f013 0f10 	tst.w	r3, #16
   17ebc:	d110      	bne.n	17ee0 <bt_dh_key_gen+0x40>
   17ebe:	f3bf 8f5b 	dmb	ish
   17ec2:	4b17      	ldr	r3, [pc, #92]	; (17f20 <bt_dh_key_gen+0x80>)
   17ec4:	681b      	ldr	r3, [r3, #0]
   17ec6:	f3bf 8f5b 	dmb	ish
		return -EBUSY;
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   17eca:	f013 0f08 	tst.w	r3, #8
   17ece:	d022      	beq.n	17f16 <bt_dh_key_gen+0x76>
		return -EADDRNOTAVAIL;
	}

	dh_key_cb = cb;
   17ed0:	4b12      	ldr	r3, [pc, #72]	; (17f1c <bt_dh_key_gen+0x7c>)
   17ed2:	6019      	str	r1, [r3, #0]
	if (IS_ENABLED(CONFIG_BT_USE_DEBUG_KEYS) &&
	    BT_CMD_TEST(bt_dev.supported_commands, 41, 2)) {
		err = hci_generate_dhkey_v2(remote_pk,
					    BT_HCI_LE_KEY_TYPE_DEBUG);
	} else {
		err = hci_generate_dhkey_v1(remote_pk);
   17ed4:	f00d fb37 	bl	25546 <hci_generate_dhkey_v1>
	}

	if (err) {
   17ed8:	4604      	mov	r4, r0
   17eda:	b920      	cbnz	r0, 17ee6 <bt_dh_key_gen+0x46>
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   17edc:	4620      	mov	r0, r4
   17ede:	bd10      	pop	{r4, pc}
		return -EBUSY;
   17ee0:	f06f 040f 	mvn.w	r4, #15
   17ee4:	e7fa      	b.n	17edc <bt_dh_key_gen+0x3c>
		dh_key_cb = NULL;
   17ee6:	2100      	movs	r1, #0
   17ee8:	4b0c      	ldr	r3, [pc, #48]	; (17f1c <bt_dh_key_gen+0x7c>)
   17eea:	6019      	str	r1, [r3, #0]
   17eec:	4b0d      	ldr	r3, [pc, #52]	; (17f24 <bt_dh_key_gen+0x84>)
   17eee:	4a0e      	ldr	r2, [pc, #56]	; (17f28 <bt_dh_key_gen+0x88>)
   17ef0:	1a9b      	subs	r3, r3, r2
   17ef2:	08db      	lsrs	r3, r3, #3
		BT_WARN("Failed to generate DHKey (err %d)", err);
   17ef4:	f04f 0200 	mov.w	r2, #0
   17ef8:	2002      	movs	r0, #2
   17efa:	f360 0202 	bfi	r2, r0, #0, #3
   17efe:	f361 02c5 	bfi	r2, r1, #3, #3
   17f02:	f363 128f 	bfi	r2, r3, #6, #10
   17f06:	4621      	mov	r1, r4
   17f08:	4808      	ldr	r0, [pc, #32]	; (17f2c <bt_dh_key_gen+0x8c>)
   17f0a:	f7f9 f901 	bl	11110 <log_1>
		return err;
   17f0e:	e7e5      	b.n	17edc <bt_dh_key_gen+0x3c>
		return -EALREADY;
   17f10:	f06f 0477 	mvn.w	r4, #119	; 0x77
   17f14:	e7e2      	b.n	17edc <bt_dh_key_gen+0x3c>
		return -EADDRNOTAVAIL;
   17f16:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   17f1a:	e7df      	b.n	17edc <bt_dh_key_gen+0x3c>
   17f1c:	200026c4 	.word	0x200026c4
   17f20:	20000338 	.word	0x20000338
   17f24:	00029efc 	.word	0x00029efc
   17f28:	00029ecc 	.word	0x00029ecc
   17f2c:	0002bdc0 	.word	0x0002bdc0

00017f30 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   17f30:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   17f32:	6885      	ldr	r5, [r0, #8]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17f34:	4b1e      	ldr	r3, [pc, #120]	; (17fb0 <bt_hci_evt_le_pkey_complete+0x80>)
   17f36:	f3bf 8f5b 	dmb	ish
   17f3a:	e853 2f00 	ldrex	r2, [r3]
   17f3e:	f022 0210 	bic.w	r2, r2, #16
   17f42:	e843 2100 	strex	r1, r2, [r3]
   17f46:	2900      	cmp	r1, #0
   17f48:	d1f7      	bne.n	17f3a <bt_hci_evt_le_pkey_complete+0xa>
   17f4a:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   17f4e:	782b      	ldrb	r3, [r5, #0]
   17f50:	b123      	cbz	r3, 17f5c <bt_hci_evt_le_pkey_complete+0x2c>
	return list->head;
   17f52:	4b18      	ldr	r3, [pc, #96]	; (17fb4 <bt_hci_evt_le_pkey_complete+0x84>)
   17f54:	681c      	ldr	r4, [r3, #0]
		memcpy(pub_key, evt->key, 64);
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17f56:	b1dc      	cbz	r4, 17f90 <bt_hci_evt_le_pkey_complete+0x60>
   17f58:	3c04      	subs	r4, #4
   17f5a:	e019      	b.n	17f90 <bt_hci_evt_le_pkey_complete+0x60>
		memcpy(pub_key, evt->key, 64);
   17f5c:	2240      	movs	r2, #64	; 0x40
   17f5e:	1c69      	adds	r1, r5, #1
   17f60:	4815      	ldr	r0, [pc, #84]	; (17fb8 <bt_hci_evt_le_pkey_complete+0x88>)
   17f62:	f00c fd83 	bl	24a6c <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17f66:	4b12      	ldr	r3, [pc, #72]	; (17fb0 <bt_hci_evt_le_pkey_complete+0x80>)
   17f68:	f3bf 8f5b 	dmb	ish
   17f6c:	e853 2f00 	ldrex	r2, [r3]
   17f70:	f042 0208 	orr.w	r2, r2, #8
   17f74:	e843 2100 	strex	r1, r2, [r3]
   17f78:	2900      	cmp	r1, #0
   17f7a:	d1f7      	bne.n	17f6c <bt_hci_evt_le_pkey_complete+0x3c>
   17f7c:	f3bf 8f5b 	dmb	ish
}
   17f80:	e7e7      	b.n	17f52 <bt_hci_evt_le_pkey_complete+0x22>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   17f82:	2000      	movs	r0, #0
   17f84:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   17f86:	1d23      	adds	r3, r4, #4
   17f88:	d00b      	beq.n	17fa2 <bt_hci_evt_le_pkey_complete+0x72>
	return node->next;
   17f8a:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17f8c:	b15c      	cbz	r4, 17fa6 <bt_hci_evt_le_pkey_complete+0x76>
   17f8e:	3c04      	subs	r4, #4
   17f90:	b14c      	cbz	r4, 17fa6 <bt_hci_evt_le_pkey_complete+0x76>
		if (cb->func) {
   17f92:	6823      	ldr	r3, [r4, #0]
   17f94:	2b00      	cmp	r3, #0
   17f96:	d0f6      	beq.n	17f86 <bt_hci_evt_le_pkey_complete+0x56>
			cb->func(evt->status ? NULL : pub_key);
   17f98:	782a      	ldrb	r2, [r5, #0]
   17f9a:	2a00      	cmp	r2, #0
   17f9c:	d1f1      	bne.n	17f82 <bt_hci_evt_le_pkey_complete+0x52>
   17f9e:	4806      	ldr	r0, [pc, #24]	; (17fb8 <bt_hci_evt_le_pkey_complete+0x88>)
   17fa0:	e7f0      	b.n	17f84 <bt_hci_evt_le_pkey_complete+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17fa2:	461c      	mov	r4, r3
   17fa4:	e7f4      	b.n	17f90 <bt_hci_evt_le_pkey_complete+0x60>
	list->head = NULL;
   17fa6:	4b03      	ldr	r3, [pc, #12]	; (17fb4 <bt_hci_evt_le_pkey_complete+0x84>)
   17fa8:	2200      	movs	r2, #0
   17faa:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   17fac:	605a      	str	r2, [r3, #4]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   17fae:	bd38      	pop	{r3, r4, r5, pc}
   17fb0:	20000338 	.word	0x20000338
   17fb4:	20002708 	.word	0x20002708
   17fb8:	200026c8 	.word	0x200026c8

00017fbc <bt_hci_evt_le_dhkey_complete>:

void bt_hci_evt_le_dhkey_complete(struct net_buf *buf)
{
   17fbc:	b508      	push	{r3, lr}
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   17fbe:	6880      	ldr	r0, [r0, #8]

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   17fc0:	4b06      	ldr	r3, [pc, #24]	; (17fdc <bt_hci_evt_le_dhkey_complete+0x20>)
   17fc2:	681b      	ldr	r3, [r3, #0]
   17fc4:	b133      	cbz	r3, 17fd4 <bt_hci_evt_le_dhkey_complete+0x18>
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   17fc6:	4a05      	ldr	r2, [pc, #20]	; (17fdc <bt_hci_evt_le_dhkey_complete+0x20>)
   17fc8:	2100      	movs	r1, #0
   17fca:	6011      	str	r1, [r2, #0]
		cb(evt->status ? NULL : evt->dhkey);
   17fcc:	7802      	ldrb	r2, [r0, #0]
   17fce:	b912      	cbnz	r2, 17fd6 <bt_hci_evt_le_dhkey_complete+0x1a>
   17fd0:	3001      	adds	r0, #1
   17fd2:	4798      	blx	r3
	}
}
   17fd4:	bd08      	pop	{r3, pc}
		cb(evt->status ? NULL : evt->dhkey);
   17fd6:	2000      	movs	r0, #0
   17fd8:	e7fb      	b.n	17fd2 <bt_hci_evt_le_dhkey_complete+0x16>
   17fda:	bf00      	nop
   17fdc:	200026c4 	.word	0x200026c4

00017fe0 <notify_disconnected>:
		bt_gatt_connected(conn);
	}
}

static void notify_disconnected(struct bt_conn *conn)
{
   17fe0:	b538      	push	{r3, r4, r5, lr}
   17fe2:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   17fe4:	4b06      	ldr	r3, [pc, #24]	; (18000 <notify_disconnected+0x20>)
   17fe6:	681c      	ldr	r4, [r3, #0]
   17fe8:	e000      	b.n	17fec <notify_disconnected+0xc>
   17fea:	69a4      	ldr	r4, [r4, #24]
   17fec:	b134      	cbz	r4, 17ffc <notify_disconnected+0x1c>
		if (cb->disconnected) {
   17fee:	6863      	ldr	r3, [r4, #4]
   17ff0:	2b00      	cmp	r3, #0
   17ff2:	d0fa      	beq.n	17fea <notify_disconnected+0xa>
			cb->disconnected(conn, conn->err);
   17ff4:	7b29      	ldrb	r1, [r5, #12]
   17ff6:	4628      	mov	r0, r5
   17ff8:	4798      	blx	r3
   17ffa:	e7f6      	b.n	17fea <notify_disconnected+0xa>
		}
	}
}
   17ffc:	bd38      	pop	{r3, r4, r5, pc}
   17ffe:	bf00      	nop
   18000:	20002714 	.word	0x20002714

00018004 <tx_free>:
	 */
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
   18004:	b508      	push	{r3, lr}
   18006:	4601      	mov	r1, r0
	tx->cb = NULL;
   18008:	2300      	movs	r3, #0
   1800a:	6043      	str	r3, [r0, #4]
	tx->user_data = NULL;
   1800c:	6083      	str	r3, [r0, #8]
	tx->pending_no_cb = 0U;
   1800e:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   18010:	4801      	ldr	r0, [pc, #4]	; (18018 <tx_free+0x14>)
   18012:	f011 f946 	bl	292a2 <k_queue_append>
}
   18016:	bd08      	pop	{r3, pc}
   18018:	200007ec 	.word	0x200007ec

0001801c <conn_tx_alloc>:
	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);
	bt_l2cap_recv(conn, buf);
}

static struct bt_conn_tx *conn_tx_alloc(void)
{
   1801c:	b508      	push	{r3, lr}
	return z_impl_k_current_get();
   1801e:	f008 fc8f 	bl	20940 <z_impl_k_current_get>
	/* The TX context always get freed in the system workqueue,
	 * so if we're in the same workqueue but there are no immediate
	 * contexts available, there's no chance we'll get one by waiting.
	 */
	if (k_current_get() == &k_sys_work_q.thread) {
   18022:	4b08      	ldr	r3, [pc, #32]	; (18044 <conn_tx_alloc+0x28>)
   18024:	4283      	cmp	r3, r0
   18026:	d007      	beq.n	18038 <conn_tx_alloc+0x1c>
	return z_impl_k_queue_get(queue, timeout);
   18028:	f04f 32ff 	mov.w	r2, #4294967295
   1802c:	f04f 33ff 	mov.w	r3, #4294967295
   18030:	4805      	ldr	r0, [pc, #20]	; (18048 <conn_tx_alloc+0x2c>)
   18032:	f007 fe45 	bl	1fcc0 <z_impl_k_queue_get>

		BT_WARN("Unable to get an immediate free conn_tx");
	}

	return k_fifo_get(&free_tx, K_FOREVER);
}
   18036:	bd08      	pop	{r3, pc}
   18038:	2200      	movs	r2, #0
   1803a:	2300      	movs	r3, #0
   1803c:	4802      	ldr	r0, [pc, #8]	; (18048 <conn_tx_alloc+0x2c>)
   1803e:	f007 fe3f 	bl	1fcc0 <z_impl_k_queue_get>
		return k_fifo_get(&free_tx, K_NO_WAIT);
   18042:	e7f8      	b.n	18036 <conn_tx_alloc+0x1a>
   18044:	20002308 	.word	0x20002308
   18048:	200007ec 	.word	0x200007ec

0001804c <notify_connected>:
{
   1804c:	b538      	push	{r3, r4, r5, lr}
   1804e:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   18050:	4b09      	ldr	r3, [pc, #36]	; (18078 <notify_connected+0x2c>)
   18052:	681c      	ldr	r4, [r3, #0]
   18054:	e000      	b.n	18058 <notify_connected+0xc>
   18056:	69a4      	ldr	r4, [r4, #24]
   18058:	b134      	cbz	r4, 18068 <notify_connected+0x1c>
		if (cb->connected) {
   1805a:	6823      	ldr	r3, [r4, #0]
   1805c:	2b00      	cmp	r3, #0
   1805e:	d0fa      	beq.n	18056 <notify_connected+0xa>
			cb->connected(conn, conn->err);
   18060:	7b29      	ldrb	r1, [r5, #12]
   18062:	4628      	mov	r0, r5
   18064:	4798      	blx	r3
   18066:	e7f6      	b.n	18056 <notify_connected+0xa>
	if (!conn->err) {
   18068:	7b2b      	ldrb	r3, [r5, #12]
   1806a:	b103      	cbz	r3, 1806e <notify_connected+0x22>
}
   1806c:	bd38      	pop	{r3, r4, r5, pc}
		bt_gatt_connected(conn);
   1806e:	4628      	mov	r0, r5
   18070:	f003 fb7a 	bl	1b768 <bt_gatt_connected>
}
   18074:	e7fa      	b.n	1806c <notify_connected+0x20>
   18076:	bf00      	nop
   18078:	20002714 	.word	0x20002714

0001807c <bt_conn_get_pkts>:
}
   1807c:	4800      	ldr	r0, [pc, #0]	; (18080 <bt_conn_get_pkts+0x4>)
   1807e:	4770      	bx	lr
   18080:	20000370 	.word	0x20000370

00018084 <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
   18084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18088:	4605      	mov	r5, r0
   1808a:	460e      	mov	r6, r1
   1808c:	4691      	mov	r9, r2
   1808e:	461c      	mov	r4, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   18090:	694f      	ldr	r7, [r1, #20]

	BT_DBG("conn %p buf %p len %u flags 0x%02x", conn, buf, buf->len,
	       flags);

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
   18092:	f7ff fff3 	bl	1807c <bt_conn_get_pkts>
   18096:	4680      	mov	r8, r0
	return z_impl_k_sem_take(sem, timeout);
   18098:	f04f 32ff 	mov.w	r2, #4294967295
   1809c:	f04f 33ff 	mov.w	r3, #4294967295
   180a0:	f007 fe72 	bl	1fd88 <z_impl_k_sem_take>

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
   180a4:	7b6b      	ldrb	r3, [r5, #13]
   180a6:	2b07      	cmp	r3, #7
   180a8:	d159      	bne.n	1815e <send_frag+0xda>
   180aa:	f04f 0240 	mov.w	r2, #64	; 0x40
   180ae:	f3ef 8311 	mrs	r3, BASEPRI
   180b2:	f382 8811 	msr	BASEPRI, r2
   180b6:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
   180ba:	b1af      	cbz	r7, 180e8 <send_frag+0x64>
	parent->next = child;
   180bc:	2200      	movs	r2, #0
   180be:	603a      	str	r2, [r7, #0]
	return list->tail;
   180c0:	69aa      	ldr	r2, [r5, #24]
Z_GENLIST_APPEND(slist, snode)
   180c2:	b172      	cbz	r2, 180e2 <send_frag+0x5e>
	parent->next = child;
   180c4:	6017      	str	r7, [r2, #0]
	list->tail = node;
   180c6:	61af      	str	r7, [r5, #24]
	__asm__ volatile(
   180c8:	f383 8811 	msr	BASEPRI, r3
   180cc:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	if (IS_ENABLED(CONFIG_BT_ISO) && conn->type == BT_CONN_TYPE_ISO) {
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
   180d0:	464a      	mov	r2, r9
   180d2:	4631      	mov	r1, r6
   180d4:	4628      	mov	r0, r5
   180d6:	f00d fa82 	bl	255de <send_acl>
	}

	if (err) {
   180da:	4601      	mov	r1, r0
   180dc:	b988      	cbnz	r0, 18102 <send_frag+0x7e>
		}
		irq_unlock(key);
		goto fail;
	}

	return true;
   180de:	2001      	movs	r0, #1
   180e0:	e046      	b.n	18170 <send_frag+0xec>
   180e2:	61af      	str	r7, [r5, #24]
	list->head = node;
   180e4:	616f      	str	r7, [r5, #20]
}
   180e6:	e7ef      	b.n	180c8 <send_frag+0x44>
	return list->tail;
   180e8:	69aa      	ldr	r2, [r5, #24]
		if (tail_tx) {
   180ea:	b13a      	cbz	r2, 180fc <send_frag+0x78>
			pending_no_cb = &tail_tx->pending_no_cb;
   180ec:	f102 0a0c 	add.w	sl, r2, #12
		(*pending_no_cb)++;
   180f0:	f8da 2000 	ldr.w	r2, [sl]
   180f4:	3201      	adds	r2, #1
   180f6:	f8ca 2000 	str.w	r2, [sl]
   180fa:	e7e5      	b.n	180c8 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   180fc:	f105 0a1c 	add.w	sl, r5, #28
   18100:	e7f6      	b.n	180f0 <send_frag+0x6c>
   18102:	4b26      	ldr	r3, [pc, #152]	; (1819c <send_frag+0x118>)
   18104:	4a26      	ldr	r2, [pc, #152]	; (181a0 <send_frag+0x11c>)
   18106:	1a9b      	subs	r3, r3, r2
   18108:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to send to driver (err %d)", err);
   1810a:	f04f 0200 	mov.w	r2, #0
   1810e:	2001      	movs	r0, #1
   18110:	f360 0202 	bfi	r2, r0, #0, #3
   18114:	f36f 02c5 	bfc	r2, #3, #3
   18118:	f363 128f 	bfi	r2, r3, #6, #10
   1811c:	4821      	ldr	r0, [pc, #132]	; (181a4 <send_frag+0x120>)
   1811e:	f7f8 fff7 	bl	11110 <log_1>
	__asm__ volatile(
   18122:	f04f 0340 	mov.w	r3, #64	; 0x40
   18126:	f3ef 8011 	mrs	r0, BASEPRI
   1812a:	f383 8811 	msr	BASEPRI, r3
   1812e:	f3bf 8f6f 	isb	sy
		if (tx) {
   18132:	b347      	cbz	r7, 18186 <send_frag+0x102>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   18134:	4639      	mov	r1, r7
	return list->head;
   18136:	696b      	ldr	r3, [r5, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   18138:	2200      	movs	r2, #0
   1813a:	b163      	cbz	r3, 18156 <send_frag+0xd2>
   1813c:	428b      	cmp	r3, r1
   1813e:	d002      	beq.n	18146 <send_frag+0xc2>
   18140:	461a      	mov	r2, r3
   18142:	681b      	ldr	r3, [r3, #0]
   18144:	e7f9      	b.n	1813a <send_frag+0xb6>
Z_GENLIST_REMOVE(slist, snode)
   18146:	b1aa      	cbz	r2, 18174 <send_frag+0xf0>
	return node->next;
   18148:	683b      	ldr	r3, [r7, #0]
	parent->next = child;
   1814a:	6013      	str	r3, [r2, #0]
	return list->tail;
   1814c:	69ab      	ldr	r3, [r5, #24]
Z_GENLIST_REMOVE(slist, snode)
   1814e:	42bb      	cmp	r3, r7
   18150:	d017      	beq.n	18182 <send_frag+0xfe>
	parent->next = child;
   18152:	2300      	movs	r3, #0
   18154:	603b      	str	r3, [r7, #0]
	__asm__ volatile(
   18156:	f380 8811 	msr	BASEPRI, r0
   1815a:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   1815e:	4640      	mov	r0, r8
   18160:	f007 fdea 	bl	1fd38 <z_impl_k_sem_give>

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
   18164:	b117      	cbz	r7, 1816c <send_frag+0xe8>
		tx_free(tx);
   18166:	4638      	mov	r0, r7
   18168:	f7ff ff4c 	bl	18004 <tx_free>
	}

	if (always_consume) {
   1816c:	b98c      	cbnz	r4, 18192 <send_frag+0x10e>
		net_buf_unref(buf);
	}
	return false;
   1816e:	4620      	mov	r0, r4
}
   18170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next;
   18174:	683b      	ldr	r3, [r7, #0]
	list->head = node;
   18176:	616b      	str	r3, [r5, #20]
	return list->tail;
   18178:	69aa      	ldr	r2, [r5, #24]
Z_GENLIST_REMOVE(slist, snode)
   1817a:	42ba      	cmp	r2, r7
   1817c:	d1e9      	bne.n	18152 <send_frag+0xce>
	list->tail = node;
   1817e:	61ab      	str	r3, [r5, #24]
}
   18180:	e7e7      	b.n	18152 <send_frag+0xce>
	list->tail = node;
   18182:	61aa      	str	r2, [r5, #24]
}
   18184:	e7e5      	b.n	18152 <send_frag+0xce>
			(*pending_no_cb)--;
   18186:	f8da 3000 	ldr.w	r3, [sl]
   1818a:	3b01      	subs	r3, #1
   1818c:	f8ca 3000 	str.w	r3, [sl]
   18190:	e7e1      	b.n	18156 <send_frag+0xd2>
		net_buf_unref(buf);
   18192:	4630      	mov	r0, r6
   18194:	f010 f883 	bl	2829e <net_buf_unref>
	return false;
   18198:	2000      	movs	r0, #0
   1819a:	e7e9      	b.n	18170 <send_frag+0xec>
   1819c:	00029eec 	.word	0x00029eec
   181a0:	00029ecc 	.word	0x00029ecc
   181a4:	0002b858 	.word	0x0002b858

000181a8 <notify_le_param_updated>:
{
   181a8:	b570      	push	{r4, r5, r6, lr}
   181aa:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   181ac:	f3bf 8f5b 	dmb	ish
   181b0:	6843      	ldr	r3, [r0, #4]
   181b2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   181b6:	f413 7f00 	tst.w	r3, #512	; 0x200
   181ba:	d010      	beq.n	181de <notify_le_param_updated+0x36>
   181bc:	1d02      	adds	r2, r0, #4
	    conn->le.interval >= conn->le.interval_min &&
   181be:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
   181c2:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   181c6:	428b      	cmp	r3, r1
   181c8:	d309      	bcc.n	181de <notify_le_param_updated+0x36>
	    conn->le.interval <= conn->le.interval_max &&
   181ca:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
	    conn->le.interval >= conn->le.interval_min &&
   181ce:	428b      	cmp	r3, r1
   181d0:	d805      	bhi.n	181de <notify_le_param_updated+0x36>
	    conn->le.latency == conn->le.pending_latency &&
   181d2:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
   181d6:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
   181da:	4299      	cmp	r1, r3
   181dc:	d002      	beq.n	181e4 <notify_le_param_updated+0x3c>
	for (cb = callback_list; cb; cb = cb->_next) {
   181de:	4b0f      	ldr	r3, [pc, #60]	; (1821c <notify_le_param_updated+0x74>)
   181e0:	681c      	ldr	r4, [r3, #0]
   181e2:	e00d      	b.n	18200 <notify_le_param_updated+0x58>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   181e4:	f3bf 8f5b 	dmb	ish
   181e8:	e852 3f00 	ldrex	r3, [r2]
   181ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   181f0:	e842 3100 	strex	r1, r3, [r2]
   181f4:	2900      	cmp	r1, #0
   181f6:	d1f7      	bne.n	181e8 <notify_le_param_updated+0x40>
   181f8:	f3bf 8f5b 	dmb	ish
}
   181fc:	e7ef      	b.n	181de <notify_le_param_updated+0x36>
   181fe:	69a4      	ldr	r4, [r4, #24]
   18200:	b15c      	cbz	r4, 1821a <notify_le_param_updated+0x72>
		if (cb->le_param_updated) {
   18202:	68e6      	ldr	r6, [r4, #12]
   18204:	2e00      	cmp	r6, #0
   18206:	d0fa      	beq.n	181fe <notify_le_param_updated+0x56>
			cb->le_param_updated(conn, conn->le.interval,
   18208:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
   1820c:	f8b5 20a4 	ldrh.w	r2, [r5, #164]	; 0xa4
   18210:	f8b5 109e 	ldrh.w	r1, [r5, #158]	; 0x9e
   18214:	4628      	mov	r0, r5
   18216:	47b0      	blx	r6
   18218:	e7f1      	b.n	181fe <notify_le_param_updated+0x56>
}
   1821a:	bd70      	pop	{r4, r5, r6, pc}
   1821c:	20002714 	.word	0x20002714

00018220 <le_param_req>:
{
   18220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18222:	4606      	mov	r6, r0
   18224:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   18226:	4608      	mov	r0, r1
   18228:	f00c fe05 	bl	24e36 <bt_le_conn_params_valid>
   1822c:	4607      	mov	r7, r0
   1822e:	b198      	cbz	r0, 18258 <le_param_req+0x38>
	for (cb = callback_list; cb; cb = cb->_next) {
   18230:	4b0a      	ldr	r3, [pc, #40]	; (1825c <le_param_req+0x3c>)
   18232:	681c      	ldr	r4, [r3, #0]
   18234:	e000      	b.n	18238 <le_param_req+0x18>
   18236:	69a4      	ldr	r4, [r4, #24]
   18238:	b174      	cbz	r4, 18258 <le_param_req+0x38>
		if (!cb->le_param_req) {
   1823a:	68a3      	ldr	r3, [r4, #8]
   1823c:	2b00      	cmp	r3, #0
   1823e:	d0fa      	beq.n	18236 <le_param_req+0x16>
		if (!cb->le_param_req(conn, param)) {
   18240:	4629      	mov	r1, r5
   18242:	4630      	mov	r0, r6
   18244:	4798      	blx	r3
   18246:	b130      	cbz	r0, 18256 <le_param_req+0x36>
		if (!bt_le_conn_params_valid(param)) {
   18248:	4628      	mov	r0, r5
   1824a:	f00c fdf4 	bl	24e36 <bt_le_conn_params_valid>
   1824e:	2800      	cmp	r0, #0
   18250:	d1f1      	bne.n	18236 <le_param_req+0x16>
			return false;
   18252:	4607      	mov	r7, r0
   18254:	e000      	b.n	18258 <le_param_req+0x38>
			return false;
   18256:	4607      	mov	r7, r0
}
   18258:	4638      	mov	r0, r7
   1825a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1825c:	20002714 	.word	0x20002714

00018260 <acl_conn_new>:
{
   18260:	b510      	push	{r4, lr}
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   18262:	2102      	movs	r1, #2
   18264:	4807      	ldr	r0, [pc, #28]	; (18284 <acl_conn_new+0x24>)
   18266:	f00d fa1d 	bl	256a4 <bt_conn_new>
	if (!conn) {
   1826a:	4604      	mov	r4, r0
   1826c:	b140      	cbz	r0, 18280 <acl_conn_new+0x20>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   1826e:	4906      	ldr	r1, [pc, #24]	; (18288 <acl_conn_new+0x28>)
   18270:	3058      	adds	r0, #88	; 0x58
   18272:	f011 f918 	bl	294a6 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   18276:	4905      	ldr	r1, [pc, #20]	; (1828c <acl_conn_new+0x2c>)
   18278:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1827c:	f011 f8ed 	bl	2945a <k_work_init>
}
   18280:	4620      	mov	r0, r4
   18282:	bd10      	pop	{r4, pc}
   18284:	200017f8 	.word	0x200017f8
   18288:	00018951 	.word	0x00018951
   1828c:	000255d5 	.word	0x000255d5

00018290 <bt_conn_identity_resolved>:
{
   18290:	b570      	push	{r4, r5, r6, lr}
   18292:	4605      	mov	r5, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
   18294:	78c3      	ldrb	r3, [r0, #3]
   18296:	b923      	cbnz	r3, 182a2 <bt_conn_identity_resolved+0x12>
		rpa = &conn->le.resp_addr;
   18298:	f100 0696 	add.w	r6, r0, #150	; 0x96
	for (cb = callback_list; cb; cb = cb->_next) {
   1829c:	4b08      	ldr	r3, [pc, #32]	; (182c0 <bt_conn_identity_resolved+0x30>)
   1829e:	681c      	ldr	r4, [r3, #0]
   182a0:	e003      	b.n	182aa <bt_conn_identity_resolved+0x1a>
		rpa = &conn->le.init_addr;
   182a2:	f100 068f 	add.w	r6, r0, #143	; 0x8f
   182a6:	e7f9      	b.n	1829c <bt_conn_identity_resolved+0xc>
	for (cb = callback_list; cb; cb = cb->_next) {
   182a8:	69a4      	ldr	r4, [r4, #24]
   182aa:	b144      	cbz	r4, 182be <bt_conn_identity_resolved+0x2e>
		if (cb->identity_resolved) {
   182ac:	6923      	ldr	r3, [r4, #16]
   182ae:	2b00      	cmp	r3, #0
   182b0:	d0fa      	beq.n	182a8 <bt_conn_identity_resolved+0x18>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   182b2:	f105 0288 	add.w	r2, r5, #136	; 0x88
   182b6:	4631      	mov	r1, r6
   182b8:	4628      	mov	r0, r5
   182ba:	4798      	blx	r3
   182bc:	e7f4      	b.n	182a8 <bt_conn_identity_resolved+0x18>
}
   182be:	bd70      	pop	{r4, r5, r6, pc}
   182c0:	20002714 	.word	0x20002714

000182c4 <bt_conn_security_changed>:
{
   182c4:	b570      	push	{r4, r5, r6, lr}
   182c6:	4605      	mov	r5, r0
   182c8:	460c      	mov	r4, r1
   182ca:	4616      	mov	r6, r2
	reset_pairing(conn);
   182cc:	f00d f956 	bl	2557c <reset_pairing>
	bt_l2cap_security_changed(conn, hci_err);
   182d0:	4621      	mov	r1, r4
   182d2:	4628      	mov	r0, r5
   182d4:	f00d fc23 	bl	25b1e <bt_l2cap_security_changed>
	for (cb = callback_list; cb; cb = cb->_next) {
   182d8:	4b06      	ldr	r3, [pc, #24]	; (182f4 <bt_conn_security_changed+0x30>)
   182da:	681c      	ldr	r4, [r3, #0]
   182dc:	e000      	b.n	182e0 <bt_conn_security_changed+0x1c>
   182de:	69a4      	ldr	r4, [r4, #24]
   182e0:	b13c      	cbz	r4, 182f2 <bt_conn_security_changed+0x2e>
		if (cb->security_changed) {
   182e2:	6963      	ldr	r3, [r4, #20]
   182e4:	2b00      	cmp	r3, #0
   182e6:	d0fa      	beq.n	182de <bt_conn_security_changed+0x1a>
			cb->security_changed(conn, conn->sec_level, err);
   182e8:	4632      	mov	r2, r6
   182ea:	7a69      	ldrb	r1, [r5, #9]
   182ec:	4628      	mov	r0, r5
   182ee:	4798      	blx	r3
   182f0:	e7f5      	b.n	182de <bt_conn_security_changed+0x1a>
}
   182f2:	bd70      	pop	{r4, r5, r6, pc}
   182f4:	20002714 	.word	0x20002714

000182f8 <bt_conn_cb_register>:
	cb->_next = callback_list;
   182f8:	4b02      	ldr	r3, [pc, #8]	; (18304 <bt_conn_cb_register+0xc>)
   182fa:	681a      	ldr	r2, [r3, #0]
   182fc:	6182      	str	r2, [r0, #24]
	callback_list = cb;
   182fe:	6018      	str	r0, [r3, #0]
}
   18300:	4770      	bx	lr
   18302:	bf00      	nop
   18304:	20002714 	.word	0x20002714

00018308 <bt_conn_recv>:
{
   18308:	b570      	push	{r4, r5, r6, lr}
   1830a:	4604      	mov	r4, r0
   1830c:	460e      	mov	r6, r1
   1830e:	4615      	mov	r5, r2
	tx_notify(conn);
   18310:	f00d f93b 	bl	2558a <tx_notify>
	switch (flags) {
   18314:	2d01      	cmp	r5, #1
   18316:	d02b      	beq.n	18370 <bt_conn_recv+0x68>
   18318:	2d02      	cmp	r5, #2
   1831a:	d16e      	bne.n	183fa <bt_conn_recv+0xf2>
		if (conn->rx) {
   1831c:	6923      	ldr	r3, [r4, #16]
   1831e:	b193      	cbz	r3, 18346 <bt_conn_recv+0x3e>
   18320:	4b4c      	ldr	r3, [pc, #304]	; (18454 <bt_conn_recv+0x14c>)
   18322:	4a4d      	ldr	r2, [pc, #308]	; (18458 <bt_conn_recv+0x150>)
   18324:	1a9b      	subs	r3, r3, r2
   18326:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unexpected first L2CAP frame");
   18328:	f04f 0100 	mov.w	r1, #0
   1832c:	2201      	movs	r2, #1
   1832e:	f362 0102 	bfi	r1, r2, #0, #3
   18332:	f36f 01c5 	bfc	r1, #3, #3
   18336:	f363 118f 	bfi	r1, r3, #6, #10
   1833a:	4848      	ldr	r0, [pc, #288]	; (1845c <bt_conn_recv+0x154>)
   1833c:	f7f8 ff9e 	bl	1127c <log_0>
			bt_conn_reset_rx_state(conn);
   18340:	4620      	mov	r0, r4
   18342:	f00d fa0e 	bl	25762 <bt_conn_reset_rx_state>
		conn->rx = buf;
   18346:	6126      	str	r6, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   18348:	6921      	ldr	r1, [r4, #16]
   1834a:	8988      	ldrh	r0, [r1, #12]
   1834c:	2801      	cmp	r0, #1
   1834e:	d96b      	bls.n	18428 <bt_conn_recv+0x120>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   18350:	688b      	ldr	r3, [r1, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   18352:	785d      	ldrb	r5, [r3, #1]
   18354:	781a      	ldrb	r2, [r3, #0]
   18356:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   1835a:	3204      	adds	r2, #4
   1835c:	b292      	uxth	r2, r2
	if (conn->rx->len < acl_total_len) {
   1835e:	4290      	cmp	r0, r2
   18360:	d362      	bcc.n	18428 <bt_conn_recv+0x120>
	if (conn->rx->len > acl_total_len) {
   18362:	d862      	bhi.n	1842a <bt_conn_recv+0x122>
	conn->rx = NULL;
   18364:	2300      	movs	r3, #0
   18366:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf);
   18368:	4620      	mov	r0, r4
   1836a:	f000 fe49 	bl	19000 <bt_l2cap_recv>
   1836e:	e05b      	b.n	18428 <bt_conn_recv+0x120>
		if (!conn->rx) {
   18370:	6920      	ldr	r0, [r4, #16]
   18372:	b180      	cbz	r0, 18396 <bt_conn_recv+0x8e>
		if (!buf->len) {
   18374:	89b5      	ldrh	r5, [r6, #12]
   18376:	b32d      	cbz	r5, 183c4 <bt_conn_recv+0xbc>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   18378:	3008      	adds	r0, #8
   1837a:	f010 f816 	bl	283aa <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1837e:	4285      	cmp	r5, r0
   18380:	d824      	bhi.n	183cc <bt_conn_recv+0xc4>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
   18382:	6920      	ldr	r0, [r4, #16]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   18384:	89b2      	ldrh	r2, [r6, #12]
   18386:	68b1      	ldr	r1, [r6, #8]
   18388:	3008      	adds	r0, #8
   1838a:	f00f ffd8 	bl	2833e <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1838e:	4630      	mov	r0, r6
   18390:	f00f ff85 	bl	2829e <net_buf_unref>
		break;
   18394:	e7d8      	b.n	18348 <bt_conn_recv+0x40>
   18396:	4b2f      	ldr	r3, [pc, #188]	; (18454 <bt_conn_recv+0x14c>)
   18398:	4a2f      	ldr	r2, [pc, #188]	; (18458 <bt_conn_recv+0x150>)
   1839a:	1a9b      	subs	r3, r3, r2
   1839c:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unexpected L2CAP continuation");
   1839e:	f04f 0100 	mov.w	r1, #0
   183a2:	2201      	movs	r2, #1
   183a4:	f362 0102 	bfi	r1, r2, #0, #3
   183a8:	f36f 01c5 	bfc	r1, #3, #3
   183ac:	f363 118f 	bfi	r1, r3, #6, #10
   183b0:	482b      	ldr	r0, [pc, #172]	; (18460 <bt_conn_recv+0x158>)
   183b2:	f7f8 ff63 	bl	1127c <log_0>
			bt_conn_reset_rx_state(conn);
   183b6:	4620      	mov	r0, r4
   183b8:	f00d f9d3 	bl	25762 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
   183bc:	4630      	mov	r0, r6
   183be:	f00f ff6e 	bl	2829e <net_buf_unref>
			return;
   183c2:	e031      	b.n	18428 <bt_conn_recv+0x120>
			net_buf_unref(buf);
   183c4:	4630      	mov	r0, r6
   183c6:	f00f ff6a 	bl	2829e <net_buf_unref>
			return;
   183ca:	e02d      	b.n	18428 <bt_conn_recv+0x120>
   183cc:	4b21      	ldr	r3, [pc, #132]	; (18454 <bt_conn_recv+0x14c>)
   183ce:	4a22      	ldr	r2, [pc, #136]	; (18458 <bt_conn_recv+0x150>)
   183d0:	1a9b      	subs	r3, r3, r2
   183d2:	08db      	lsrs	r3, r3, #3
			BT_ERR("Not enough buffer space for L2CAP data");
   183d4:	f04f 0100 	mov.w	r1, #0
   183d8:	2201      	movs	r2, #1
   183da:	f362 0102 	bfi	r1, r2, #0, #3
   183de:	f36f 01c5 	bfc	r1, #3, #3
   183e2:	f363 118f 	bfi	r1, r3, #6, #10
   183e6:	481f      	ldr	r0, [pc, #124]	; (18464 <bt_conn_recv+0x15c>)
   183e8:	f7f8 ff48 	bl	1127c <log_0>
			bt_conn_reset_rx_state(conn);
   183ec:	4620      	mov	r0, r4
   183ee:	f00d f9b8 	bl	25762 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
   183f2:	4630      	mov	r0, r6
   183f4:	f00f ff53 	bl	2829e <net_buf_unref>
			return;
   183f8:	e016      	b.n	18428 <bt_conn_recv+0x120>
   183fa:	4b16      	ldr	r3, [pc, #88]	; (18454 <bt_conn_recv+0x14c>)
   183fc:	4a16      	ldr	r2, [pc, #88]	; (18458 <bt_conn_recv+0x150>)
   183fe:	1a9b      	subs	r3, r3, r2
   18400:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   18402:	f04f 0200 	mov.w	r2, #0
   18406:	2101      	movs	r1, #1
   18408:	f361 0202 	bfi	r2, r1, #0, #3
   1840c:	f36f 02c5 	bfc	r2, #3, #3
   18410:	f363 128f 	bfi	r2, r3, #6, #10
   18414:	4629      	mov	r1, r5
   18416:	4814      	ldr	r0, [pc, #80]	; (18468 <bt_conn_recv+0x160>)
   18418:	f7f8 fe7a 	bl	11110 <log_1>
		bt_conn_reset_rx_state(conn);
   1841c:	4620      	mov	r0, r4
   1841e:	f00d f9a0 	bl	25762 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   18422:	4630      	mov	r0, r6
   18424:	f00f ff3b 	bl	2829e <net_buf_unref>
}
   18428:	bd70      	pop	{r4, r5, r6, pc}
   1842a:	490a      	ldr	r1, [pc, #40]	; (18454 <bt_conn_recv+0x14c>)
   1842c:	4b0a      	ldr	r3, [pc, #40]	; (18458 <bt_conn_recv+0x150>)
   1842e:	1ac9      	subs	r1, r1, r3
   18430:	08c9      	lsrs	r1, r1, #3
		BT_ERR("ACL len mismatch (%u > %u)",
   18432:	f04f 0300 	mov.w	r3, #0
   18436:	2501      	movs	r5, #1
   18438:	f365 0302 	bfi	r3, r5, #0, #3
   1843c:	f36f 03c5 	bfc	r3, #3, #3
   18440:	f361 138f 	bfi	r3, r1, #6, #10
   18444:	4601      	mov	r1, r0
   18446:	4809      	ldr	r0, [pc, #36]	; (1846c <bt_conn_recv+0x164>)
   18448:	f7f8 fe98 	bl	1117c <log_2>
		bt_conn_reset_rx_state(conn);
   1844c:	4620      	mov	r0, r4
   1844e:	f00d f988 	bl	25762 <bt_conn_reset_rx_state>
		return;
   18452:	e7e9      	b.n	18428 <bt_conn_recv+0x120>
   18454:	00029eec 	.word	0x00029eec
   18458:	00029ecc 	.word	0x00029ecc
   1845c:	0002be2c 	.word	0x0002be2c
   18460:	0002be4c 	.word	0x0002be4c
   18464:	0002be6c 	.word	0x0002be6c
   18468:	0002be94 	.word	0x0002be94
   1846c:	0002beb4 	.word	0x0002beb4

00018470 <bt_conn_send_cb>:
{
   18470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18474:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   18476:	7b43      	ldrb	r3, [r0, #13]
   18478:	2b07      	cmp	r3, #7
   1847a:	d118      	bne.n	184ae <bt_conn_send_cb+0x3e>
   1847c:	4604      	mov	r4, r0
   1847e:	460d      	mov	r5, r1
   18480:	4616      	mov	r6, r2
	if (cb) {
   18482:	2a00      	cmp	r2, #0
   18484:	d04f      	beq.n	18526 <bt_conn_send_cb+0xb6>
		tx = conn_tx_alloc();
   18486:	f7ff fdc9 	bl	1801c <conn_tx_alloc>
		if (!tx) {
   1848a:	4680      	mov	r8, r0
   1848c:	b310      	cbz	r0, 184d4 <bt_conn_send_cb+0x64>
		if (conn->state != BT_CONN_CONNECTED) {
   1848e:	7b63      	ldrb	r3, [r4, #13]
   18490:	2b07      	cmp	r3, #7
   18492:	d132      	bne.n	184fa <bt_conn_send_cb+0x8a>
		tx->cb = cb;
   18494:	6046      	str	r6, [r0, #4]
		tx->user_data = user_data;
   18496:	6087      	str	r7, [r0, #8]
		tx->pending_no_cb = 0U;
   18498:	2300      	movs	r3, #0
   1849a:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   1849c:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   1849e:	4629      	mov	r1, r5
   184a0:	f104 0038 	add.w	r0, r4, #56	; 0x38
   184a4:	f00f feee 	bl	28284 <net_buf_put>
	return 0;
   184a8:	2000      	movs	r0, #0
}
   184aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   184ae:	4b1f      	ldr	r3, [pc, #124]	; (1852c <bt_conn_send_cb+0xbc>)
   184b0:	4a1f      	ldr	r2, [pc, #124]	; (18530 <bt_conn_send_cb+0xc0>)
   184b2:	1a9b      	subs	r3, r3, r2
   184b4:	08db      	lsrs	r3, r3, #3
		BT_ERR("not connected!");
   184b6:	f04f 0100 	mov.w	r1, #0
   184ba:	2201      	movs	r2, #1
   184bc:	f362 0102 	bfi	r1, r2, #0, #3
   184c0:	f36f 01c5 	bfc	r1, #3, #3
   184c4:	f363 118f 	bfi	r1, r3, #6, #10
   184c8:	481a      	ldr	r0, [pc, #104]	; (18534 <bt_conn_send_cb+0xc4>)
   184ca:	f7f8 fed7 	bl	1127c <log_0>
		return -ENOTCONN;
   184ce:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   184d2:	e7ea      	b.n	184aa <bt_conn_send_cb+0x3a>
   184d4:	4b15      	ldr	r3, [pc, #84]	; (1852c <bt_conn_send_cb+0xbc>)
   184d6:	4a16      	ldr	r2, [pc, #88]	; (18530 <bt_conn_send_cb+0xc0>)
   184d8:	1a9b      	subs	r3, r3, r2
   184da:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to allocate TX context");
   184dc:	f04f 0100 	mov.w	r1, #0
   184e0:	2201      	movs	r2, #1
   184e2:	f362 0102 	bfi	r1, r2, #0, #3
   184e6:	f36f 01c5 	bfc	r1, #3, #3
   184ea:	f363 118f 	bfi	r1, r3, #6, #10
   184ee:	4812      	ldr	r0, [pc, #72]	; (18538 <bt_conn_send_cb+0xc8>)
   184f0:	f7f8 fec4 	bl	1127c <log_0>
			return -ENOBUFS;
   184f4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   184f8:	e7d7      	b.n	184aa <bt_conn_send_cb+0x3a>
   184fa:	4b0c      	ldr	r3, [pc, #48]	; (1852c <bt_conn_send_cb+0xbc>)
   184fc:	4a0c      	ldr	r2, [pc, #48]	; (18530 <bt_conn_send_cb+0xc0>)
   184fe:	1a9b      	subs	r3, r3, r2
   18500:	08db      	lsrs	r3, r3, #3
			BT_WARN("Disconnected while allocating context");
   18502:	f04f 0100 	mov.w	r1, #0
   18506:	2202      	movs	r2, #2
   18508:	f362 0102 	bfi	r1, r2, #0, #3
   1850c:	f36f 01c5 	bfc	r1, #3, #3
   18510:	f363 118f 	bfi	r1, r3, #6, #10
   18514:	4809      	ldr	r0, [pc, #36]	; (1853c <bt_conn_send_cb+0xcc>)
   18516:	f7f8 feb1 	bl	1127c <log_0>
			tx_free(tx);
   1851a:	4640      	mov	r0, r8
   1851c:	f7ff fd72 	bl	18004 <tx_free>
			return -ENOTCONN;
   18520:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   18524:	e7c1      	b.n	184aa <bt_conn_send_cb+0x3a>
		tx_data(buf)->tx = NULL;
   18526:	2300      	movs	r3, #0
   18528:	614b      	str	r3, [r1, #20]
   1852a:	e7b8      	b.n	1849e <bt_conn_send_cb+0x2e>
   1852c:	00029eec 	.word	0x00029eec
   18530:	00029ecc 	.word	0x00029ecc
   18534:	0002bed0 	.word	0x0002bed0
   18538:	0002bee0 	.word	0x0002bee0
   1853c:	0002bf00 	.word	0x0002bf00

00018540 <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
   18540:	b570      	push	{r4, r5, r6, lr}
   18542:	4606      	mov	r6, r0
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
   18544:	4b0e      	ldr	r3, [pc, #56]	; (18580 <bt_conn_prepare_events+0x40>)
   18546:	2400      	movs	r4, #0
   18548:	609c      	str	r4, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1854a:	4622      	mov	r2, r4
   1854c:	2101      	movs	r1, #1
   1854e:	f011 fb27 	bl	29ba0 <k_poll_event_init>
   18552:	2501      	movs	r5, #1
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   18554:	e000      	b.n	18558 <bt_conn_prepare_events+0x18>
   18556:	3401      	adds	r4, #1
   18558:	2c01      	cmp	r4, #1
   1855a:	dc0e      	bgt.n	1857a <bt_conn_prepare_events+0x3a>
		conn = &acl_conns[i];
   1855c:	eb04 0044 	add.w	r0, r4, r4, lsl #1

		if (!conn_prepare_events(conn, &events[ev_count])) {
   18560:	eb05 0185 	add.w	r1, r5, r5, lsl #2
   18564:	eb06 0181 	add.w	r1, r6, r1, lsl #2
   18568:	4b06      	ldr	r3, [pc, #24]	; (18584 <bt_conn_prepare_events+0x44>)
   1856a:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   1856e:	f00d f91f 	bl	257b0 <conn_prepare_events>
   18572:	2800      	cmp	r0, #0
   18574:	d1ef      	bne.n	18556 <bt_conn_prepare_events+0x16>
			ev_count++;
   18576:	3501      	adds	r5, #1
   18578:	e7ed      	b.n	18556 <bt_conn_prepare_events+0x16>
		}
	}
#endif

	return ev_count;
}
   1857a:	4628      	mov	r0, r5
   1857c:	bd70      	pop	{r4, r5, r6, pc}
   1857e:	bf00      	nop
   18580:	2000056c 	.word	0x2000056c
   18584:	200017f8 	.word	0x200017f8

00018588 <bt_conn_lookup_handle>:
		break;
	}
}

struct bt_conn *bt_conn_lookup_handle(uint16_t handle)
{
   18588:	b508      	push	{r3, lr}
   1858a:	4602      	mov	r2, r0
	struct bt_conn *conn;

	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   1858c:	2102      	movs	r1, #2
   1858e:	4802      	ldr	r0, [pc, #8]	; (18598 <bt_conn_lookup_handle+0x10>)
   18590:	f00d f9cb 	bl	2592a <conn_lookup_handle>
		return conn;
	}
#endif

	return NULL;
}
   18594:	bd08      	pop	{r3, pc}
   18596:	bf00      	nop
   18598:	200017f8 	.word	0x200017f8

0001859c <bt_conn_set_state>:
{
   1859c:	b570      	push	{r4, r5, r6, lr}
   1859e:	460e      	mov	r6, r1
	if (conn->state == state) {
   185a0:	7b45      	ldrb	r5, [r0, #13]
   185a2:	428d      	cmp	r5, r1
   185a4:	d00e      	beq.n	185c4 <bt_conn_set_state+0x28>
   185a6:	4604      	mov	r4, r0
	conn->state = state;
   185a8:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   185aa:	2d00      	cmp	r5, #0
   185ac:	d037      	beq.n	1861e <bt_conn_set_state+0x82>
	switch (conn->state) {
   185ae:	7b63      	ldrb	r3, [r4, #13]
   185b0:	2b08      	cmp	r3, #8
   185b2:	f200 80b9 	bhi.w	18728 <bt_conn_set_state+0x18c>
   185b6:	e8df f003 	tbb	[pc, r3]
   185ba:	b34e      	.short	0xb34e
   185bc:	b6b6b6b6 	.word	0xb6b6b6b6
   185c0:	35b6      	.short	0x35b6
   185c2:	b6          	.byte	0xb6
   185c3:	00          	.byte	0x00
   185c4:	4b61      	ldr	r3, [pc, #388]	; (1874c <bt_conn_set_state+0x1b0>)
   185c6:	4a62      	ldr	r2, [pc, #392]	; (18750 <bt_conn_set_state+0x1b4>)
   185c8:	1a9b      	subs	r3, r3, r2
   185ca:	08db      	lsrs	r3, r3, #3
		BT_WARN("no transition %s", state2str(state));
   185cc:	f04f 0200 	mov.w	r2, #0
   185d0:	2102      	movs	r1, #2
   185d2:	f361 0202 	bfi	r2, r1, #0, #3
   185d6:	f36f 02c5 	bfc	r2, #3, #3
   185da:	f363 128f 	bfi	r2, r3, #6, #10
	switch (state) {
   185de:	2e08      	cmp	r6, #8
   185e0:	d819      	bhi.n	18616 <bt_conn_set_state+0x7a>
   185e2:	e8df f006 	tbb	[pc, r6]
   185e6:	1a05      	.short	0x1a05
   185e8:	0c0e100a 	.word	0x0c0e100a
   185ec:	1412      	.short	0x1412
   185ee:	16          	.byte	0x16
   185ef:	00          	.byte	0x00
		BT_WARN("no transition %s", state2str(state));
   185f0:	4958      	ldr	r1, [pc, #352]	; (18754 <bt_conn_set_state+0x1b8>)
   185f2:	4859      	ldr	r0, [pc, #356]	; (18758 <bt_conn_set_state+0x1bc>)
   185f4:	f7f8 fd8c 	bl	11110 <log_1>
		return;
   185f8:	e095      	b.n	18726 <bt_conn_set_state+0x18a>
		return "connect-scan";
   185fa:	4958      	ldr	r1, [pc, #352]	; (1875c <bt_conn_set_state+0x1c0>)
   185fc:	e7f9      	b.n	185f2 <bt_conn_set_state+0x56>
		return "connect-dir-adv";
   185fe:	4958      	ldr	r1, [pc, #352]	; (18760 <bt_conn_set_state+0x1c4>)
   18600:	e7f7      	b.n	185f2 <bt_conn_set_state+0x56>
		return "connect-adv";
   18602:	4958      	ldr	r1, [pc, #352]	; (18764 <bt_conn_set_state+0x1c8>)
   18604:	e7f5      	b.n	185f2 <bt_conn_set_state+0x56>
		return "connect-auto";
   18606:	4958      	ldr	r1, [pc, #352]	; (18768 <bt_conn_set_state+0x1cc>)
   18608:	e7f3      	b.n	185f2 <bt_conn_set_state+0x56>
		return "connect";
   1860a:	4958      	ldr	r1, [pc, #352]	; (1876c <bt_conn_set_state+0x1d0>)
   1860c:	e7f1      	b.n	185f2 <bt_conn_set_state+0x56>
		return "connected";
   1860e:	4958      	ldr	r1, [pc, #352]	; (18770 <bt_conn_set_state+0x1d4>)
   18610:	e7ef      	b.n	185f2 <bt_conn_set_state+0x56>
		return "disconnect";
   18612:	4958      	ldr	r1, [pc, #352]	; (18774 <bt_conn_set_state+0x1d8>)
   18614:	e7ed      	b.n	185f2 <bt_conn_set_state+0x56>
		return "(unknown)";
   18616:	4958      	ldr	r1, [pc, #352]	; (18778 <bt_conn_set_state+0x1dc>)
   18618:	e7eb      	b.n	185f2 <bt_conn_set_state+0x56>
		return "disconnect-complete";
   1861a:	4958      	ldr	r1, [pc, #352]	; (1877c <bt_conn_set_state+0x1e0>)
   1861c:	e7e9      	b.n	185f2 <bt_conn_set_state+0x56>
		bt_conn_ref(conn);
   1861e:	f00d f944 	bl	258aa <bt_conn_ref>
		break;
   18622:	e7c4      	b.n	185ae <bt_conn_set_state+0x12>
		if (conn->type == BT_CONN_TYPE_SCO) {
   18624:	78a3      	ldrb	r3, [r4, #2]
   18626:	2b04      	cmp	r3, #4
   18628:	d07d      	beq.n	18726 <bt_conn_set_state+0x18a>
		k_fifo_init(&conn->tx_queue);
   1862a:	f104 0038 	add.w	r0, r4, #56	; 0x38
	z_impl_k_queue_init(queue);
   1862e:	f010 fe2c 	bl	2928a <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   18632:	2100      	movs	r1, #0
   18634:	4852      	ldr	r0, [pc, #328]	; (18780 <bt_conn_set_state+0x1e4>)
   18636:	f008 fe9d 	bl	21374 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   1863a:	2300      	movs	r3, #0
   1863c:	6523      	str	r3, [r4, #80]	; 0x50
	list->tail = NULL;
   1863e:	6563      	str	r3, [r4, #84]	; 0x54
		    conn->role == BT_CONN_ROLE_SLAVE) {
   18640:	78e3      	ldrb	r3, [r4, #3]
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   18642:	2b01      	cmp	r3, #1
   18644:	d16f      	bne.n	18726 <bt_conn_set_state+0x18a>
			k_work_schedule(&conn->deferred_work,
   18646:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   1864a:	2300      	movs	r3, #0
   1864c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   18650:	f007 fda6 	bl	201a0 <k_work_schedule>
   18654:	e067      	b.n	18726 <bt_conn_set_state+0x18a>
		if (conn->type == BT_CONN_TYPE_SCO) {
   18656:	78a3      	ldrb	r3, [r4, #2]
   18658:	2b04      	cmp	r3, #4
   1865a:	d008      	beq.n	1866e <bt_conn_set_state+0xd2>
		switch (old_state) {
   1865c:	2d08      	cmp	r5, #8
   1865e:	d862      	bhi.n	18726 <bt_conn_set_state+0x18a>
   18660:	e8df f005 	tbb	[pc, r5]
   18664:	4430094c 	.word	0x4430094c
   18668:	4c263a48 	.word	0x4c263a48
   1866c:	4c          	.byte	0x4c
   1866d:	00          	.byte	0x00
			bt_conn_unref(conn);
   1866e:	4620      	mov	r0, r4
   18670:	f00d f942 	bl	258f8 <bt_conn_unref>
			break;
   18674:	e057      	b.n	18726 <bt_conn_set_state+0x18a>
			tx_notify(conn);
   18676:	4620      	mov	r0, r4
   18678:	f00c ff87 	bl	2558a <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   1867c:	78a3      	ldrb	r3, [r4, #2]
   1867e:	2b01      	cmp	r3, #1
   18680:	d011      	beq.n	186a6 <bt_conn_set_state+0x10a>
			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
   18682:	3404      	adds	r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18684:	f3bf 8f5b 	dmb	ish
   18688:	e854 3f00 	ldrex	r3, [r4]
   1868c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   18690:	e844 3200 	strex	r2, r3, [r4]
   18694:	2a00      	cmp	r2, #0
   18696:	d1f7      	bne.n	18688 <bt_conn_set_state+0xec>
   18698:	f3bf 8f5b 	dmb	ish
   1869c:	2100      	movs	r1, #0
   1869e:	4838      	ldr	r0, [pc, #224]	; (18780 <bt_conn_set_state+0x1e4>)
   186a0:	f008 fe68 	bl	21374 <z_impl_k_poll_signal_raise>
   186a4:	e03f      	b.n	18726 <bt_conn_set_state+0x18a>
				k_work_cancel_delayable(&conn->deferred_work);
   186a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
   186aa:	f010 ff48 	bl	2953e <k_work_cancel_delayable>
   186ae:	e7e8      	b.n	18682 <bt_conn_set_state+0xe6>
			if (conn->err) {
   186b0:	7b23      	ldrb	r3, [r4, #12]
   186b2:	b91b      	cbnz	r3, 186bc <bt_conn_set_state+0x120>
			bt_conn_unref(conn);
   186b4:	4620      	mov	r0, r4
   186b6:	f00d f91f 	bl	258f8 <bt_conn_unref>
			break;
   186ba:	e034      	b.n	18726 <bt_conn_set_state+0x18a>
				notify_connected(conn);
   186bc:	4620      	mov	r0, r4
   186be:	f7ff fcc5 	bl	1804c <notify_connected>
   186c2:	e7f7      	b.n	186b4 <bt_conn_set_state+0x118>
			if (conn->err) {
   186c4:	7b23      	ldrb	r3, [r4, #12]
   186c6:	b91b      	cbnz	r3, 186d0 <bt_conn_set_state+0x134>
			bt_conn_unref(conn);
   186c8:	4620      	mov	r0, r4
   186ca:	f00d f915 	bl	258f8 <bt_conn_unref>
			break;
   186ce:	e02a      	b.n	18726 <bt_conn_set_state+0x18a>
				notify_connected(conn);
   186d0:	4620      	mov	r0, r4
   186d2:	f7ff fcbb 	bl	1804c <notify_connected>
   186d6:	e7f7      	b.n	186c8 <bt_conn_set_state+0x12c>
			if (conn->err) {
   186d8:	7b23      	ldrb	r3, [r4, #12]
   186da:	b91b      	cbnz	r3, 186e4 <bt_conn_set_state+0x148>
			bt_conn_unref(conn);
   186dc:	4620      	mov	r0, r4
   186de:	f00d f90b 	bl	258f8 <bt_conn_unref>
			break;
   186e2:	e020      	b.n	18726 <bt_conn_set_state+0x18a>
				notify_connected(conn);
   186e4:	4620      	mov	r0, r4
   186e6:	f7ff fcb1 	bl	1804c <notify_connected>
   186ea:	e7f7      	b.n	186dc <bt_conn_set_state+0x140>
			bt_conn_unref(conn);
   186ec:	4620      	mov	r0, r4
   186ee:	f00d f903 	bl	258f8 <bt_conn_unref>
			break;
   186f2:	e018      	b.n	18726 <bt_conn_set_state+0x18a>
			bt_conn_unref(conn);
   186f4:	4620      	mov	r0, r4
   186f6:	f00d f8ff 	bl	258f8 <bt_conn_unref>
			break;
   186fa:	e014      	b.n	18726 <bt_conn_set_state+0x18a>
   186fc:	4b13      	ldr	r3, [pc, #76]	; (1874c <bt_conn_set_state+0x1b0>)
   186fe:	4a14      	ldr	r2, [pc, #80]	; (18750 <bt_conn_set_state+0x1b4>)
   18700:	1a9b      	subs	r3, r3, r2
   18702:	08db      	lsrs	r3, r3, #3
			BT_WARN("Invalid (%u) old state", state);
   18704:	f04f 0200 	mov.w	r2, #0
   18708:	2102      	movs	r1, #2
   1870a:	f361 0202 	bfi	r2, r1, #0, #3
   1870e:	f36f 02c5 	bfc	r2, #3, #3
   18712:	f363 128f 	bfi	r2, r3, #6, #10
   18716:	4631      	mov	r1, r6
   18718:	481a      	ldr	r0, [pc, #104]	; (18784 <bt_conn_set_state+0x1e8>)
   1871a:	f7f8 fcf9 	bl	11110 <log_1>
   1871e:	e002      	b.n	18726 <bt_conn_set_state+0x18a>
		process_unack_tx(conn);
   18720:	4620      	mov	r0, r4
   18722:	f00c ff7e 	bl	25622 <process_unack_tx>
}
   18726:	bd70      	pop	{r4, r5, r6, pc}
   18728:	4b08      	ldr	r3, [pc, #32]	; (1874c <bt_conn_set_state+0x1b0>)
   1872a:	4a09      	ldr	r2, [pc, #36]	; (18750 <bt_conn_set_state+0x1b4>)
   1872c:	1a9b      	subs	r3, r3, r2
   1872e:	08db      	lsrs	r3, r3, #3
		BT_WARN("no valid (%u) state was set", state);
   18730:	f04f 0200 	mov.w	r2, #0
   18734:	2102      	movs	r1, #2
   18736:	f361 0202 	bfi	r2, r1, #0, #3
   1873a:	f36f 02c5 	bfc	r2, #3, #3
   1873e:	f363 128f 	bfi	r2, r3, #6, #10
   18742:	4631      	mov	r1, r6
   18744:	4810      	ldr	r0, [pc, #64]	; (18788 <bt_conn_set_state+0x1ec>)
   18746:	f7f8 fce3 	bl	11110 <log_1>
   1874a:	e7ec      	b.n	18726 <bt_conn_set_state+0x18a>
   1874c:	00029eec 	.word	0x00029eec
   18750:	00029ecc 	.word	0x00029ecc
   18754:	0002bf98 	.word	0x0002bf98
   18758:	0002bfa8 	.word	0x0002bfa8
   1875c:	0002bf48 	.word	0x0002bf48
   18760:	0002bf58 	.word	0x0002bf58
   18764:	0002bf68 	.word	0x0002bf68
   18768:	0002bf74 	.word	0x0002bf74
   1876c:	0002bf84 	.word	0x0002bf84
   18770:	0002c23c 	.word	0x0002c23c
   18774:	0002bf8c 	.word	0x0002bf8c
   18778:	0002bf28 	.word	0x0002bf28
   1877c:	0002bf34 	.word	0x0002bf34
   18780:	2000056c 	.word	0x2000056c
   18784:	0002bfbc 	.word	0x0002bfbc
   18788:	0002bfd4 	.word	0x0002bfd4

0001878c <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   1878c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1878e:	4606      	mov	r6, r0
   18790:	460f      	mov	r7, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   18792:	2400      	movs	r4, #0
   18794:	2c01      	cmp	r4, #1
   18796:	dc18      	bgt.n	187ca <bt_conn_lookup_addr_le+0x3e>
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   18798:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1879c:	480c      	ldr	r0, [pc, #48]	; (187d0 <bt_conn_lookup_addr_le+0x44>)
   1879e:	eb00 1083 	add.w	r0, r0, r3, lsl #6
   187a2:	f00d f882 	bl	258aa <bt_conn_ref>

		if (!conn) {
   187a6:	4605      	mov	r5, r0
   187a8:	b168      	cbz	r0, 187c6 <bt_conn_lookup_addr_le+0x3a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   187aa:	7883      	ldrb	r3, [r0, #2]
   187ac:	2b01      	cmp	r3, #1
   187ae:	d108      	bne.n	187c2 <bt_conn_lookup_addr_le+0x36>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   187b0:	463a      	mov	r2, r7
   187b2:	4631      	mov	r1, r6
   187b4:	f00d f852 	bl	2585c <bt_conn_is_peer_addr_le>
   187b8:	b940      	cbnz	r0, 187cc <bt_conn_lookup_addr_le+0x40>
			bt_conn_unref(conn);
   187ba:	4628      	mov	r0, r5
   187bc:	f00d f89c 	bl	258f8 <bt_conn_unref>
			continue;
   187c0:	e001      	b.n	187c6 <bt_conn_lookup_addr_le+0x3a>
			bt_conn_unref(conn);
   187c2:	f00d f899 	bl	258f8 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   187c6:	3401      	adds	r4, #1
   187c8:	e7e4      	b.n	18794 <bt_conn_lookup_addr_le+0x8>
		}

		return conn;
	}

	return NULL;
   187ca:	2500      	movs	r5, #0
}
   187cc:	4628      	mov	r0, r5
   187ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   187d0:	200017f8 	.word	0x200017f8

000187d4 <bt_conn_exists_le>:
{
   187d4:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   187d6:	f7ff ffd9 	bl	1878c <bt_conn_lookup_addr_le>
	if (conn) {
   187da:	b908      	cbnz	r0, 187e0 <bt_conn_exists_le+0xc>
	return false;
   187dc:	2000      	movs	r0, #0
}
   187de:	bd10      	pop	{r4, pc}
   187e0:	4604      	mov	r4, r0
   187e2:	4b19      	ldr	r3, [pc, #100]	; (18848 <bt_conn_exists_le+0x74>)
   187e4:	4a19      	ldr	r2, [pc, #100]	; (1884c <bt_conn_exists_le+0x78>)
   187e6:	1a9b      	subs	r3, r3, r2
   187e8:	08db      	lsrs	r3, r3, #3
		BT_WARN("Found valid connection in %s state",
   187ea:	f04f 0200 	mov.w	r2, #0
   187ee:	2102      	movs	r1, #2
   187f0:	f361 0202 	bfi	r2, r1, #0, #3
   187f4:	f36f 02c5 	bfc	r2, #3, #3
   187f8:	f363 128f 	bfi	r2, r3, #6, #10
   187fc:	7b43      	ldrb	r3, [r0, #13]
	switch (state) {
   187fe:	2b08      	cmp	r3, #8
   18800:	d81d      	bhi.n	1883e <bt_conn_exists_le+0x6a>
   18802:	e8df f003 	tbb	[pc, r3]
   18806:	1e05      	.short	0x1e05
   18808:	1012140e 	.word	0x1012140e
   1880c:	1816      	.short	0x1816
   1880e:	1a          	.byte	0x1a
   1880f:	00          	.byte	0x00
		BT_WARN("Found valid connection in %s state",
   18810:	490f      	ldr	r1, [pc, #60]	; (18850 <bt_conn_exists_le+0x7c>)
   18812:	4810      	ldr	r0, [pc, #64]	; (18854 <bt_conn_exists_le+0x80>)
   18814:	f7f8 fc7c 	bl	11110 <log_1>
		bt_conn_unref(conn);
   18818:	4620      	mov	r0, r4
   1881a:	f00d f86d 	bl	258f8 <bt_conn_unref>
		return true;
   1881e:	2001      	movs	r0, #1
   18820:	e7dd      	b.n	187de <bt_conn_exists_le+0xa>
		return "connect-scan";
   18822:	490d      	ldr	r1, [pc, #52]	; (18858 <bt_conn_exists_le+0x84>)
   18824:	e7f5      	b.n	18812 <bt_conn_exists_le+0x3e>
		return "connect-dir-adv";
   18826:	490d      	ldr	r1, [pc, #52]	; (1885c <bt_conn_exists_le+0x88>)
   18828:	e7f3      	b.n	18812 <bt_conn_exists_le+0x3e>
		return "connect-adv";
   1882a:	490d      	ldr	r1, [pc, #52]	; (18860 <bt_conn_exists_le+0x8c>)
   1882c:	e7f1      	b.n	18812 <bt_conn_exists_le+0x3e>
		return "connect-auto";
   1882e:	490d      	ldr	r1, [pc, #52]	; (18864 <bt_conn_exists_le+0x90>)
   18830:	e7ef      	b.n	18812 <bt_conn_exists_le+0x3e>
		return "connect";
   18832:	490d      	ldr	r1, [pc, #52]	; (18868 <bt_conn_exists_le+0x94>)
   18834:	e7ed      	b.n	18812 <bt_conn_exists_le+0x3e>
		return "connected";
   18836:	490d      	ldr	r1, [pc, #52]	; (1886c <bt_conn_exists_le+0x98>)
   18838:	e7eb      	b.n	18812 <bt_conn_exists_le+0x3e>
		return "disconnect";
   1883a:	490d      	ldr	r1, [pc, #52]	; (18870 <bt_conn_exists_le+0x9c>)
   1883c:	e7e9      	b.n	18812 <bt_conn_exists_le+0x3e>
		return "(unknown)";
   1883e:	490d      	ldr	r1, [pc, #52]	; (18874 <bt_conn_exists_le+0xa0>)
   18840:	e7e7      	b.n	18812 <bt_conn_exists_le+0x3e>
		return "disconnect-complete";
   18842:	490d      	ldr	r1, [pc, #52]	; (18878 <bt_conn_exists_le+0xa4>)
   18844:	e7e5      	b.n	18812 <bt_conn_exists_le+0x3e>
   18846:	bf00      	nop
   18848:	00029eec 	.word	0x00029eec
   1884c:	00029ecc 	.word	0x00029ecc
   18850:	0002bf98 	.word	0x0002bf98
   18854:	0002bff0 	.word	0x0002bff0
   18858:	0002bf48 	.word	0x0002bf48
   1885c:	0002bf58 	.word	0x0002bf58
   18860:	0002bf68 	.word	0x0002bf68
   18864:	0002bf74 	.word	0x0002bf74
   18868:	0002bf84 	.word	0x0002bf84
   1886c:	0002c23c 	.word	0x0002c23c
   18870:	0002bf8c 	.word	0x0002bf8c
   18874:	0002bf28 	.word	0x0002bf28
   18878:	0002bf34 	.word	0x0002bf34

0001887c <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   1887c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18880:	4607      	mov	r7, r0
   18882:	460e      	mov	r6, r1
   18884:	4690      	mov	r8, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   18886:	2400      	movs	r4, #0
   18888:	e00a      	b.n	188a0 <bt_conn_lookup_state_le+0x24>
		if (!conn) {
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
			bt_conn_unref(conn);
   1888a:	f00d f835 	bl	258f8 <bt_conn_unref>
			continue;
   1888e:	e006      	b.n	1889e <bt_conn_lookup_state_le+0x22>
		}

		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   18890:	4628      	mov	r0, r5
   18892:	f00d f831 	bl	258f8 <bt_conn_unref>
			continue;
   18896:	e002      	b.n	1889e <bt_conn_lookup_state_le+0x22>
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   18898:	4628      	mov	r0, r5
   1889a:	f00d f82d 	bl	258f8 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1889e:	3401      	adds	r4, #1
   188a0:	2c01      	cmp	r4, #1
   188a2:	dc1a      	bgt.n	188da <bt_conn_lookup_state_le+0x5e>
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   188a4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   188a8:	480e      	ldr	r0, [pc, #56]	; (188e4 <bt_conn_lookup_state_le+0x68>)
   188aa:	eb00 1083 	add.w	r0, r0, r3, lsl #6
   188ae:	f00c fffc 	bl	258aa <bt_conn_ref>
		if (!conn) {
   188b2:	4605      	mov	r5, r0
   188b4:	2800      	cmp	r0, #0
   188b6:	d0f2      	beq.n	1889e <bt_conn_lookup_state_le+0x22>
		if (conn->type != BT_CONN_TYPE_LE) {
   188b8:	7883      	ldrb	r3, [r0, #2]
   188ba:	2b01      	cmp	r3, #1
   188bc:	d1e5      	bne.n	1888a <bt_conn_lookup_state_le+0xe>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   188be:	b12e      	cbz	r6, 188cc <bt_conn_lookup_state_le+0x50>
   188c0:	4632      	mov	r2, r6
   188c2:	4639      	mov	r1, r7
   188c4:	f00c ffca 	bl	2585c <bt_conn_is_peer_addr_le>
   188c8:	2800      	cmp	r0, #0
   188ca:	d0e1      	beq.n	18890 <bt_conn_lookup_state_le+0x14>
		if (!(conn->state == state && conn->id == id)) {
   188cc:	7b6b      	ldrb	r3, [r5, #13]
   188ce:	4543      	cmp	r3, r8
   188d0:	d1e2      	bne.n	18898 <bt_conn_lookup_state_le+0x1c>
   188d2:	7a2b      	ldrb	r3, [r5, #8]
   188d4:	42bb      	cmp	r3, r7
   188d6:	d001      	beq.n	188dc <bt_conn_lookup_state_le+0x60>
   188d8:	e7de      	b.n	18898 <bt_conn_lookup_state_le+0x1c>
		}

		return conn;
	}

	return NULL;
   188da:	2500      	movs	r5, #0
}
   188dc:	4628      	mov	r0, r5
   188de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   188e2:	bf00      	nop
   188e4:	200017f8 	.word	0x200017f8

000188e8 <send_conn_le_param_update>:
{
   188e8:	b538      	push	{r3, r4, r5, lr}
   188ea:	4604      	mov	r4, r0
   188ec:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   188ee:	4608      	mov	r0, r1
   188f0:	f00c faa1 	bl	24e36 <bt_le_conn_params_valid>
   188f4:	b330      	cbz	r0, 18944 <send_conn_le_param_update+0x5c>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   188f6:	4b15      	ldr	r3, [pc, #84]	; (1894c <send_conn_le_param_update+0x64>)
   188f8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
   188fc:	f013 0f02 	tst.w	r3, #2
   18900:	d004      	beq.n	1890c <send_conn_le_param_update+0x24>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   18902:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   18906:	f013 0f02 	tst.w	r3, #2
   1890a:	d10d      	bne.n	18928 <send_conn_le_param_update+0x40>
	     (conn->role == BT_HCI_ROLE_MASTER)) {
   1890c:	78e3      	ldrb	r3, [r4, #3]
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
   1890e:	b9a3      	cbnz	r3, 1893a <send_conn_le_param_update+0x52>
		rc = bt_conn_le_conn_update(conn, param);
   18910:	4629      	mov	r1, r5
   18912:	4620      	mov	r0, r4
   18914:	f00d f861 	bl	259da <bt_conn_le_conn_update>
		if (rc == 0) {
   18918:	b998      	cbnz	r0, 18942 <send_conn_le_param_update+0x5a>
			conn->le.pending_latency = param->latency;
   1891a:	88ab      	ldrh	r3, [r5, #4]
   1891c:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   18920:	88eb      	ldrh	r3, [r5, #6]
   18922:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
		return rc;
   18926:	e00c      	b.n	18942 <send_conn_le_param_update+0x5a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18928:	f3bf 8f5b 	dmb	ish
   1892c:	6863      	ldr	r3, [r4, #4]
   1892e:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   18932:	f413 6f80 	tst.w	r3, #1024	; 0x400
   18936:	d1e9      	bne.n	1890c <send_conn_le_param_update+0x24>
   18938:	e7ea      	b.n	18910 <send_conn_le_param_update+0x28>
	return bt_l2cap_update_conn_param(conn, param);
   1893a:	4629      	mov	r1, r5
   1893c:	4620      	mov	r0, r4
   1893e:	f00d f980 	bl	25c42 <bt_l2cap_update_conn_param>
}
   18942:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   18944:	f06f 0015 	mvn.w	r0, #21
   18948:	e7fb      	b.n	18942 <send_conn_le_param_update+0x5a>
   1894a:	bf00      	nop
   1894c:	200002a0 	.word	0x200002a0

00018950 <deferred_work>:
{
   18950:	b530      	push	{r4, r5, lr}
   18952:	b085      	sub	sp, #20
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   18954:	f1a0 0458 	sub.w	r4, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   18958:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
   1895c:	b3b3      	cbz	r3, 189cc <deferred_work+0x7c>
	if (conn->type != BT_CONN_TYPE_LE) {
   1895e:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   18962:	2b01      	cmp	r3, #1
   18964:	d130      	bne.n	189c8 <deferred_work+0x78>
	if (atomic_test_and_clear_bit(conn->flags,
   18966:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1896a:	f3bf 8f5b 	dmb	ish
   1896e:	e855 3f00 	ldrex	r3, [r5]
   18972:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   18976:	e845 2100 	strex	r1, r2, [r5]
   1897a:	2900      	cmp	r1, #0
   1897c:	d1f7      	bne.n	1896e <deferred_work+0x1e>
   1897e:	f3bf 8f5b 	dmb	ish
   18982:	f413 7f00 	tst.w	r3, #512	; 0x200
   18986:	d02b      	beq.n	189e0 <deferred_work+0x90>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   18988:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   1898c:	f8ad 3000 	strh.w	r3, [sp]
   18990:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
   18994:	f8ad 3002 	strh.w	r3, [sp, #2]
   18998:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
   1899c:	f8ad 3004 	strh.w	r3, [sp, #4]
   189a0:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
   189a4:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
   189a8:	4669      	mov	r1, sp
   189aa:	4620      	mov	r0, r4
   189ac:	f7ff ff9c 	bl	188e8 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   189b0:	f3bf 8f5b 	dmb	ish
   189b4:	e855 3f00 	ldrex	r3, [r5]
   189b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   189bc:	e845 3200 	strex	r2, r3, [r5]
   189c0:	2a00      	cmp	r2, #0
   189c2:	d1f7      	bne.n	189b4 <deferred_work+0x64>
   189c4:	f3bf 8f5b 	dmb	ish
}
   189c8:	b005      	add	sp, #20
   189ca:	bd30      	pop	{r4, r5, pc}
		bt_l2cap_disconnected(conn);
   189cc:	4620      	mov	r0, r4
   189ce:	f00d f885 	bl	25adc <bt_l2cap_disconnected>
		notify_disconnected(conn);
   189d2:	4620      	mov	r0, r4
   189d4:	f7ff fb04 	bl	17fe0 <notify_disconnected>
		bt_conn_unref(conn);
   189d8:	4620      	mov	r0, r4
   189da:	f00c ff8d 	bl	258f8 <bt_conn_unref>
		return;
   189de:	e7f3      	b.n	189c8 <deferred_work+0x78>
		param = BT_LE_CONN_PARAM(
   189e0:	4a05      	ldr	r2, [pc, #20]	; (189f8 <deferred_work+0xa8>)
   189e2:	ab02      	add	r3, sp, #8
   189e4:	e892 0003 	ldmia.w	r2, {r0, r1}
   189e8:	e883 0003 	stmia.w	r3, {r0, r1}
		send_conn_le_param_update(conn, param);
   189ec:	4619      	mov	r1, r3
   189ee:	4620      	mov	r0, r4
   189f0:	f7ff ff7a 	bl	188e8 <send_conn_le_param_update>
   189f4:	e7dc      	b.n	189b0 <deferred_work+0x60>
   189f6:	bf00      	nop
   189f8:	0002a0e8 	.word	0x0002a0e8

000189fc <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
   189fc:	b538      	push	{r3, r4, r5, lr}
   189fe:	460c      	mov	r4, r1
	 * PDU must not be allocated from ISR as we block with 'K_FOREVER'
	 * during the allocation
	 */
	__ASSERT_NO_MSG(!k_is_in_isr());

	if (!pool) {
   18a00:	4601      	mov	r1, r0
   18a02:	b150      	cbz	r0, 18a1a <bt_conn_create_pdu_timeout+0x1e>
	return net_buf_alloc_fixed(pool, timeout);
   18a04:	4608      	mov	r0, r1
   18a06:	f00f fc17 	bl	28238 <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
   18a0a:	4605      	mov	r5, r0
   18a0c:	b138      	cbz	r0, 18a1e <bt_conn_create_pdu_timeout+0x22>
	net_buf_simple_reserve(&buf->b, reserve);
   18a0e:	1d21      	adds	r1, r4, #4
   18a10:	3008      	adds	r0, #8
   18a12:	f00f fc33 	bl	2827c <net_buf_simple_reserve>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
   18a16:	4628      	mov	r0, r5
   18a18:	bd38      	pop	{r3, r4, r5, pc}
		pool = &acl_tx_pool;
   18a1a:	4909      	ldr	r1, [pc, #36]	; (18a40 <bt_conn_create_pdu_timeout+0x44>)
   18a1c:	e7f2      	b.n	18a04 <bt_conn_create_pdu_timeout+0x8>
   18a1e:	4b09      	ldr	r3, [pc, #36]	; (18a44 <bt_conn_create_pdu_timeout+0x48>)
   18a20:	4a09      	ldr	r2, [pc, #36]	; (18a48 <bt_conn_create_pdu_timeout+0x4c>)
   18a22:	1a9b      	subs	r3, r3, r2
   18a24:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unable to allocate buffer within timeout");
   18a26:	f04f 0100 	mov.w	r1, #0
   18a2a:	2202      	movs	r2, #2
   18a2c:	f362 0102 	bfi	r1, r2, #0, #3
   18a30:	f36f 01c5 	bfc	r1, #3, #3
   18a34:	f363 118f 	bfi	r1, r3, #6, #10
   18a38:	4804      	ldr	r0, [pc, #16]	; (18a4c <bt_conn_create_pdu_timeout+0x50>)
   18a3a:	f7f8 fc1f 	bl	1127c <log_0>
		return NULL;
   18a3e:	e7ea      	b.n	18a16 <bt_conn_create_pdu_timeout+0x1a>
   18a40:	20000804 	.word	0x20000804
   18a44:	00029eec 	.word	0x00029eec
   18a48:	00029ecc 	.word	0x00029ecc
   18a4c:	0002c014 	.word	0x0002c014

00018a50 <bt_conn_create_frag_timeout>:
{
   18a50:	b508      	push	{r3, lr}
   18a52:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   18a54:	4801      	ldr	r0, [pc, #4]	; (18a5c <bt_conn_create_frag_timeout+0xc>)
   18a56:	f7ff ffd1 	bl	189fc <bt_conn_create_pdu_timeout>
}
   18a5a:	bd08      	pop	{r3, pc}
   18a5c:	20000854 	.word	0x20000854

00018a60 <create_frag>:
{
   18a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18a62:	4606      	mov	r6, r0
   18a64:	460d      	mov	r5, r1
		frag = bt_conn_create_frag(0);
   18a66:	f04f 32ff 	mov.w	r2, #4294967295
   18a6a:	f04f 33ff 	mov.w	r3, #4294967295
   18a6e:	2000      	movs	r0, #0
   18a70:	f7ff ffee 	bl	18a50 <bt_conn_create_frag_timeout>
   18a74:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   18a76:	7b73      	ldrb	r3, [r6, #13]
   18a78:	2b07      	cmp	r3, #7
   18a7a:	d11a      	bne.n	18ab2 <create_frag+0x52>
	tx_data(frag)->tx = NULL;
   18a7c:	2300      	movs	r3, #0
   18a7e:	6143      	str	r3, [r0, #20]
	return bt_dev.le.acl_mtu;
   18a80:	4b10      	ldr	r3, [pc, #64]	; (18ac4 <create_frag+0x64>)
   18a82:	f8b3 60cc 	ldrh.w	r6, [r3, #204]	; 0xcc
	return net_buf_simple_tailroom(&buf->b);
   18a86:	f100 0708 	add.w	r7, r0, #8
   18a8a:	4638      	mov	r0, r7
   18a8c:	f00f fc8d 	bl	283aa <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   18a90:	4286      	cmp	r6, r0
   18a92:	d212      	bcs.n	18aba <create_frag+0x5a>
	return bt_dev.le.acl_mtu;
   18a94:	4b0b      	ldr	r3, [pc, #44]	; (18ac4 <create_frag+0x64>)
   18a96:	f8b3 60cc 	ldrh.w	r6, [r3, #204]	; 0xcc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   18a9a:	4632      	mov	r2, r6
   18a9c:	f855 1f08 	ldr.w	r1, [r5, #8]!
   18aa0:	4638      	mov	r0, r7
   18aa2:	f00f fc4c 	bl	2833e <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   18aa6:	4631      	mov	r1, r6
   18aa8:	4628      	mov	r0, r5
   18aaa:	f00f fc62 	bl	28372 <net_buf_simple_pull>
}
   18aae:	4620      	mov	r0, r4
   18ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(frag);
   18ab2:	f00f fbf4 	bl	2829e <net_buf_unref>
		return NULL;
   18ab6:	2400      	movs	r4, #0
   18ab8:	e7f9      	b.n	18aae <create_frag+0x4e>
	return net_buf_simple_tailroom(&buf->b);
   18aba:	4638      	mov	r0, r7
   18abc:	f00f fc75 	bl	283aa <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   18ac0:	b286      	uxth	r6, r0
   18ac2:	e7ea      	b.n	18a9a <create_frag+0x3a>
   18ac4:	200002a0 	.word	0x200002a0

00018ac8 <send_buf>:
{
   18ac8:	b538      	push	{r3, r4, r5, lr}
   18aca:	4605      	mov	r5, r0
   18acc:	460c      	mov	r4, r1
	if (buf->len <= conn_mtu(conn)) {
   18ace:	898b      	ldrh	r3, [r1, #12]
	return bt_dev.le.acl_mtu;
   18ad0:	4a1b      	ldr	r2, [pc, #108]	; (18b40 <send_buf+0x78>)
   18ad2:	f8b2 20cc 	ldrh.w	r2, [r2, #204]	; 0xcc
	if (buf->len <= conn_mtu(conn)) {
   18ad6:	429a      	cmp	r2, r3
   18ad8:	d21f      	bcs.n	18b1a <send_buf+0x52>
	frag = create_frag(conn, buf);
   18ada:	f7ff ffc1 	bl	18a60 <create_frag>
	if (!frag) {
   18ade:	4601      	mov	r1, r0
   18ae0:	b350      	cbz	r0, 18b38 <send_buf+0x70>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   18ae2:	2301      	movs	r3, #1
   18ae4:	2200      	movs	r2, #0
   18ae6:	4628      	mov	r0, r5
   18ae8:	f7ff facc 	bl	18084 <send_frag>
   18aec:	4603      	mov	r3, r0
   18aee:	b1c8      	cbz	r0, 18b24 <send_buf+0x5c>
	while (buf->len > conn_mtu(conn)) {
   18af0:	89a3      	ldrh	r3, [r4, #12]
	return bt_dev.le.acl_mtu;
   18af2:	4a13      	ldr	r2, [pc, #76]	; (18b40 <send_buf+0x78>)
   18af4:	f8b2 20cc 	ldrh.w	r2, [r2, #204]	; 0xcc
	while (buf->len > conn_mtu(conn)) {
   18af8:	429a      	cmp	r2, r3
   18afa:	d215      	bcs.n	18b28 <send_buf+0x60>
		frag = create_frag(conn, buf);
   18afc:	4621      	mov	r1, r4
   18afe:	4628      	mov	r0, r5
   18b00:	f7ff ffae 	bl	18a60 <create_frag>
		if (!frag) {
   18b04:	4601      	mov	r1, r0
   18b06:	b1c8      	cbz	r0, 18b3c <send_buf+0x74>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   18b08:	2301      	movs	r3, #1
   18b0a:	461a      	mov	r2, r3
   18b0c:	4628      	mov	r0, r5
   18b0e:	f7ff fab9 	bl	18084 <send_frag>
   18b12:	4603      	mov	r3, r0
   18b14:	2800      	cmp	r0, #0
   18b16:	d1eb      	bne.n	18af0 <send_buf+0x28>
   18b18:	e004      	b.n	18b24 <send_buf+0x5c>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   18b1a:	2300      	movs	r3, #0
   18b1c:	2202      	movs	r2, #2
   18b1e:	f7ff fab1 	bl	18084 <send_frag>
   18b22:	4603      	mov	r3, r0
}
   18b24:	4618      	mov	r0, r3
   18b26:	bd38      	pop	{r3, r4, r5, pc}
	return send_frag(conn, buf, FRAG_END, false);
   18b28:	2300      	movs	r3, #0
   18b2a:	2203      	movs	r2, #3
   18b2c:	4621      	mov	r1, r4
   18b2e:	4628      	mov	r0, r5
   18b30:	f7ff faa8 	bl	18084 <send_frag>
   18b34:	4603      	mov	r3, r0
   18b36:	e7f5      	b.n	18b24 <send_buf+0x5c>
		return false;
   18b38:	2300      	movs	r3, #0
   18b3a:	e7f3      	b.n	18b24 <send_buf+0x5c>
			return false;
   18b3c:	2300      	movs	r3, #0
   18b3e:	e7f1      	b.n	18b24 <send_buf+0x5c>
   18b40:	200002a0 	.word	0x200002a0

00018b44 <bt_conn_process_tx>:
{
   18b44:	b538      	push	{r3, r4, r5, lr}
   18b46:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   18b48:	7b43      	ldrb	r3, [r0, #13]
   18b4a:	b97b      	cbnz	r3, 18b6c <bt_conn_process_tx+0x28>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
   18b4c:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18b4e:	f3bf 8f5b 	dmb	ish
   18b52:	e853 2f00 	ldrex	r2, [r3]
   18b56:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   18b5a:	e843 1000 	strex	r0, r1, [r3]
   18b5e:	2800      	cmp	r0, #0
   18b60:	d1f7      	bne.n	18b52 <bt_conn_process_tx+0xe>
   18b62:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
   18b66:	f012 0f40 	tst.w	r2, #64	; 0x40
   18b6a:	d10d      	bne.n	18b88 <bt_conn_process_tx+0x44>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   18b6c:	2200      	movs	r2, #0
   18b6e:	2300      	movs	r3, #0
   18b70:	f104 0038 	add.w	r0, r4, #56	; 0x38
   18b74:	f00f fb67 	bl	28246 <net_buf_get>
	BT_ASSERT(buf);
   18b78:	4605      	mov	r5, r0
   18b7a:	b148      	cbz	r0, 18b90 <bt_conn_process_tx+0x4c>
	if (!send_buf(conn, buf)) {
   18b7c:	4629      	mov	r1, r5
   18b7e:	4620      	mov	r0, r4
   18b80:	f7ff ffa2 	bl	18ac8 <send_buf>
   18b84:	b190      	cbz	r0, 18bac <bt_conn_process_tx+0x68>
}
   18b86:	bd38      	pop	{r3, r4, r5, pc}
		conn_cleanup(conn);
   18b88:	4620      	mov	r0, r4
   18b8a:	f00c fdf3 	bl	25774 <conn_cleanup>
		return;
   18b8e:	e7fa      	b.n	18b86 <bt_conn_process_tx+0x42>
	BT_ASSERT(buf);
   18b90:	f240 5357 	movw	r3, #1367	; 0x557
   18b94:	4a07      	ldr	r2, [pc, #28]	; (18bb4 <bt_conn_process_tx+0x70>)
   18b96:	4908      	ldr	r1, [pc, #32]	; (18bb8 <bt_conn_process_tx+0x74>)
   18b98:	4808      	ldr	r0, [pc, #32]	; (18bbc <bt_conn_process_tx+0x78>)
   18b9a:	f008 fcf7 	bl	2158c <printk>
   18b9e:	4040      	eors	r0, r0
   18ba0:	f380 8811 	msr	BASEPRI, r0
   18ba4:	f04f 0003 	mov.w	r0, #3
   18ba8:	df02      	svc	2
   18baa:	e7e7      	b.n	18b7c <bt_conn_process_tx+0x38>
		net_buf_unref(buf);
   18bac:	4628      	mov	r0, r5
   18bae:	f00f fb76 	bl	2829e <net_buf_unref>
   18bb2:	e7e8      	b.n	18b86 <bt_conn_process_tx+0x42>
   18bb4:	0002c040 	.word	0x0002c040
   18bb8:	0002cd80 	.word	0x0002cd80
   18bbc:	0002b5d0 	.word	0x0002b5d0

00018bc0 <bt_conn_auth_cb_register>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   18bc0:	4603      	mov	r3, r0
   18bc2:	b140      	cbz	r0, 18bd6 <bt_conn_auth_cb_register+0x16>
		bt_auth = NULL;
		return 0;
	}

	if (bt_auth) {
   18bc4:	4a11      	ldr	r2, [pc, #68]	; (18c0c <bt_conn_auth_cb_register+0x4c>)
   18bc6:	6812      	ldr	r2, [r2, #0]
   18bc8:	b9a2      	cbnz	r2, 18bf4 <bt_conn_auth_cb_register+0x34>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   18bca:	6902      	ldr	r2, [r0, #16]
   18bcc:	b132      	cbz	r2, 18bdc <bt_conn_auth_cb_register+0x1c>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   18bce:	4a0f      	ldr	r2, [pc, #60]	; (18c0c <bt_conn_auth_cb_register+0x4c>)
   18bd0:	6013      	str	r3, [r2, #0]
	return 0;
   18bd2:	2000      	movs	r0, #0
   18bd4:	4770      	bx	lr
		bt_auth = NULL;
   18bd6:	4b0d      	ldr	r3, [pc, #52]	; (18c0c <bt_conn_auth_cb_register+0x4c>)
   18bd8:	6018      	str	r0, [r3, #0]
		return 0;
   18bda:	4770      	bx	lr
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   18bdc:	6802      	ldr	r2, [r0, #0]
	if (!cb->cancel &&
   18bde:	b962      	cbnz	r2, 18bfa <bt_conn_auth_cb_register+0x3a>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   18be0:	6842      	ldr	r2, [r0, #4]
   18be2:	b96a      	cbnz	r2, 18c00 <bt_conn_auth_cb_register+0x40>
   18be4:	6882      	ldr	r2, [r0, #8]
   18be6:	b972      	cbnz	r2, 18c06 <bt_conn_auth_cb_register+0x46>
	     cb->pairing_confirm)) {
   18be8:	6942      	ldr	r2, [r0, #20]
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   18bea:	2a00      	cmp	r2, #0
   18bec:	d0ef      	beq.n	18bce <bt_conn_auth_cb_register+0xe>
		return -EINVAL;
   18bee:	f06f 0015 	mvn.w	r0, #21
}
   18bf2:	4770      	bx	lr
		return -EALREADY;
   18bf4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   18bf8:	4770      	bx	lr
		return -EINVAL;
   18bfa:	f06f 0015 	mvn.w	r0, #21
   18bfe:	4770      	bx	lr
   18c00:	f06f 0015 	mvn.w	r0, #21
   18c04:	4770      	bx	lr
   18c06:	f06f 0015 	mvn.w	r0, #21
   18c0a:	4770      	bx	lr
   18c0c:	20002710 	.word	0x20002710

00018c10 <bt_conn_auth_passkey_entry>:

int bt_conn_auth_passkey_entry(struct bt_conn *conn, unsigned int passkey)
{
   18c10:	b508      	push	{r3, lr}
	if (!bt_auth) {
   18c12:	4b08      	ldr	r3, [pc, #32]	; (18c34 <bt_conn_auth_passkey_entry+0x24>)
   18c14:	681b      	ldr	r3, [r3, #0]
   18c16:	b133      	cbz	r3, 18c26 <bt_conn_auth_passkey_entry+0x16>
		return -EINVAL;
	}

	if (IS_ENABLED(CONFIG_BT_SMP) && conn->type == BT_CONN_TYPE_LE) {
   18c18:	7883      	ldrb	r3, [r0, #2]
   18c1a:	2b01      	cmp	r3, #1
   18c1c:	d106      	bne.n	18c2c <bt_conn_auth_passkey_entry+0x1c>
		bt_smp_auth_passkey_entry(conn, passkey);
   18c1e:	f00f f824 	bl	27c6a <bt_smp_auth_passkey_entry>
		return 0;
   18c22:	2000      	movs	r0, #0
	if (IS_ENABLED(CONFIG_BT_BREDR) && conn->type == BT_CONN_TYPE_BR) {
		return bt_ssp_auth_passkey_entry(conn, passkey);
	}

	return -EINVAL;
}
   18c24:	bd08      	pop	{r3, pc}
		return -EINVAL;
   18c26:	f06f 0015 	mvn.w	r0, #21
   18c2a:	e7fb      	b.n	18c24 <bt_conn_auth_passkey_entry+0x14>
	return -EINVAL;
   18c2c:	f06f 0015 	mvn.w	r0, #21
   18c30:	e7f8      	b.n	18c24 <bt_conn_auth_passkey_entry+0x14>
   18c32:	bf00      	nop
   18c34:	20002710 	.word	0x20002710

00018c38 <bt_conn_auth_passkey_confirm>:

int bt_conn_auth_passkey_confirm(struct bt_conn *conn)
{
   18c38:	b508      	push	{r3, lr}
	if (!bt_auth) {
   18c3a:	4b07      	ldr	r3, [pc, #28]	; (18c58 <bt_conn_auth_passkey_confirm+0x20>)
   18c3c:	681b      	ldr	r3, [r3, #0]
   18c3e:	b12b      	cbz	r3, 18c4c <bt_conn_auth_passkey_confirm+0x14>
		return -EINVAL;
	}

	if (IS_ENABLED(CONFIG_BT_SMP) &&
	    conn->type == BT_CONN_TYPE_LE) {
   18c40:	7883      	ldrb	r3, [r0, #2]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   18c42:	2b01      	cmp	r3, #1
   18c44:	d105      	bne.n	18c52 <bt_conn_auth_passkey_confirm+0x1a>
		return bt_smp_auth_passkey_confirm(conn);
   18c46:	f00f f860 	bl	27d0a <bt_smp_auth_passkey_confirm>
	    conn->type == BT_CONN_TYPE_BR) {
		return bt_ssp_auth_passkey_confirm(conn);
	}

	return -EINVAL;
}
   18c4a:	bd08      	pop	{r3, pc}
		return -EINVAL;
   18c4c:	f06f 0015 	mvn.w	r0, #21
   18c50:	e7fb      	b.n	18c4a <bt_conn_auth_passkey_confirm+0x12>
	return -EINVAL;
   18c52:	f06f 0015 	mvn.w	r0, #21
   18c56:	e7f8      	b.n	18c4a <bt_conn_auth_passkey_confirm+0x12>
   18c58:	20002710 	.word	0x20002710

00018c5c <bt_conn_auth_pairing_confirm>:

	return -EINVAL;
}

int bt_conn_auth_pairing_confirm(struct bt_conn *conn)
{
   18c5c:	b508      	push	{r3, lr}
	if (!bt_auth) {
   18c5e:	4b07      	ldr	r3, [pc, #28]	; (18c7c <bt_conn_auth_pairing_confirm+0x20>)
   18c60:	681b      	ldr	r3, [r3, #0]
   18c62:	b12b      	cbz	r3, 18c70 <bt_conn_auth_pairing_confirm+0x14>
		return -EINVAL;
	}

	switch (conn->type) {
   18c64:	7883      	ldrb	r3, [r0, #2]
   18c66:	2b01      	cmp	r3, #1
   18c68:	d105      	bne.n	18c76 <bt_conn_auth_pairing_confirm+0x1a>
#if defined(CONFIG_BT_SMP)
	case BT_CONN_TYPE_LE:
		return bt_smp_auth_pairing_confirm(conn);
   18c6a:	f00e ff34 	bl	27ad6 <bt_smp_auth_pairing_confirm>
		return bt_ssp_auth_pairing_confirm(conn);
#endif /* CONFIG_BT_BREDR */
	default:
		return -EINVAL;
	}
}
   18c6e:	bd08      	pop	{r3, pc}
		return -EINVAL;
   18c70:	f06f 0015 	mvn.w	r0, #21
   18c74:	e7fb      	b.n	18c6e <bt_conn_auth_pairing_confirm+0x12>
		return -EINVAL;
   18c76:	f06f 0015 	mvn.w	r0, #21
   18c7a:	e7f8      	b.n	18c6e <bt_conn_auth_pairing_confirm+0x12>
   18c7c:	20002710 	.word	0x20002710

00018c80 <bt_conn_index>:
		__ASSERT(0 <= index && index < ARRAY_SIZE(sco_conns),
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
   18c80:	4b03      	ldr	r3, [pc, #12]	; (18c90 <bt_conn_index+0x10>)
   18c82:	1ac0      	subs	r0, r0, r3
   18c84:	1180      	asrs	r0, r0, #6
   18c86:	4b03      	ldr	r3, [pc, #12]	; (18c94 <bt_conn_index+0x14>)
   18c88:	fb03 f000 	mul.w	r0, r3, r0
			 "Invalid bt_conn pointer");
		break;
	}

	return (uint8_t)index;
}
   18c8c:	b2c0      	uxtb	r0, r0
   18c8e:	4770      	bx	lr
   18c90:	200017f8 	.word	0x200017f8
   18c94:	aaaaaaab 	.word	0xaaaaaaab

00018c98 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   18c98:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   18c9a:	2400      	movs	r4, #0
   18c9c:	e006      	b.n	18cac <bt_conn_init+0x14>
		k_fifo_put(&free_tx, &conn_tx[i]);
   18c9e:	490a      	ldr	r1, [pc, #40]	; (18cc8 <bt_conn_init+0x30>)
   18ca0:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   18ca4:	4809      	ldr	r0, [pc, #36]	; (18ccc <bt_conn_init+0x34>)
   18ca6:	f010 fafc 	bl	292a2 <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   18caa:	3401      	adds	r4, #1
   18cac:	2c02      	cmp	r4, #2
   18cae:	ddf6      	ble.n	18c9e <bt_conn_init+0x6>
	}

	bt_att_init();
   18cb0:	f00d fcdd 	bl	2666e <bt_att_init>

	err = bt_smp_init();
   18cb4:	f004 fd9a 	bl	1d7ec <bt_smp_init>
	if (err) {
   18cb8:	4604      	mov	r4, r0
   18cba:	b108      	cbz	r0, 18cc0 <bt_conn_init+0x28>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   18cbc:	4620      	mov	r0, r4
   18cbe:	bd10      	pop	{r4, pc}
	bt_l2cap_init();
   18cc0:	f00c ffec 	bl	25c9c <bt_l2cap_init>
	return 0;
   18cc4:	e7fa      	b.n	18cbc <bt_conn_init+0x24>
   18cc6:	bf00      	nop
   18cc8:	20002718 	.word	0x20002718
   18ccc:	200007ec 	.word	0x200007ec

00018cd0 <get_ident>:

static uint8_t get_ident(void)
{
	static uint8_t ident;

	ident++;
   18cd0:	4a05      	ldr	r2, [pc, #20]	; (18ce8 <get_ident+0x18>)
   18cd2:	7813      	ldrb	r3, [r2, #0]
   18cd4:	3301      	adds	r3, #1
   18cd6:	b2db      	uxtb	r3, r3
   18cd8:	7013      	strb	r3, [r2, #0]
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
   18cda:	b90b      	cbnz	r3, 18ce0 <get_ident+0x10>
		ident++;
   18cdc:	3301      	adds	r3, #1
   18cde:	7013      	strb	r3, [r2, #0]
	}

	return ident;
}
   18ce0:	4b01      	ldr	r3, [pc, #4]	; (18ce8 <get_ident+0x18>)
   18ce2:	7818      	ldrb	r0, [r3, #0]
   18ce4:	4770      	bx	lr
   18ce6:	bf00      	nop
   18ce8:	2000398e 	.word	0x2000398e

00018cec <le_conn_param_rsp>:

	l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
}

static void le_conn_param_rsp(struct bt_l2cap *l2cap, struct net_buf *buf)
{
   18cec:	b508      	push	{r3, lr}
	struct bt_l2cap_conn_param_rsp *rsp = (void *)buf->data;

	if (buf->len < sizeof(*rsp)) {
   18cee:	898b      	ldrh	r3, [r1, #12]
   18cf0:	2b01      	cmp	r3, #1
   18cf2:	d900      	bls.n	18cf6 <le_conn_param_rsp+0xa>
		BT_ERR("Too small LE conn param rsp");
		return;
	}

	BT_DBG("LE conn param rsp result %u", sys_le16_to_cpu(rsp->result));
}
   18cf4:	bd08      	pop	{r3, pc}
   18cf6:	4b08      	ldr	r3, [pc, #32]	; (18d18 <le_conn_param_rsp+0x2c>)
   18cf8:	4a08      	ldr	r2, [pc, #32]	; (18d1c <le_conn_param_rsp+0x30>)
   18cfa:	1a9b      	subs	r3, r3, r2
   18cfc:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small LE conn param rsp");
   18cfe:	f04f 0100 	mov.w	r1, #0
   18d02:	2201      	movs	r2, #1
   18d04:	f362 0102 	bfi	r1, r2, #0, #3
   18d08:	f36f 01c5 	bfc	r1, #3, #3
   18d0c:	f363 118f 	bfi	r1, r3, #6, #10
   18d10:	4803      	ldr	r0, [pc, #12]	; (18d20 <le_conn_param_rsp+0x34>)
   18d12:	f7f8 fab3 	bl	1127c <log_0>
		return;
   18d16:	e7ed      	b.n	18cf4 <le_conn_param_rsp+0x8>
   18d18:	00029f2c 	.word	0x00029f2c
   18d1c:	00029ecc 	.word	0x00029ecc
   18d20:	0002c098 	.word	0x0002c098

00018d24 <l2cap_accept>:
	 */
	(void)k_work_cancel_delayable(&chan->rtx_work);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   18d24:	b510      	push	{r4, lr}
		.recv = l2cap_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   18d26:	2300      	movs	r3, #0
   18d28:	2b01      	cmp	r3, #1
   18d2a:	dc10      	bgt.n	18d4e <l2cap_accept+0x2a>
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   18d2c:	22e8      	movs	r2, #232	; 0xe8
   18d2e:	fb02 f203 	mul.w	r2, r2, r3
   18d32:	4c11      	ldr	r4, [pc, #68]	; (18d78 <l2cap_accept+0x54>)
   18d34:	58a2      	ldr	r2, [r4, r2]
   18d36:	b10a      	cbz	r2, 18d3c <l2cap_accept+0x18>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   18d38:	3301      	adds	r3, #1
   18d3a:	e7f5      	b.n	18d28 <l2cap_accept+0x4>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   18d3c:	4a0e      	ldr	r2, [pc, #56]	; (18d78 <l2cap_accept+0x54>)
   18d3e:	20e8      	movs	r0, #232	; 0xe8
   18d40:	fb00 2303 	mla	r3, r0, r3, r2
   18d44:	4a0d      	ldr	r2, [pc, #52]	; (18d7c <l2cap_accept+0x58>)
   18d46:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   18d48:	600b      	str	r3, [r1, #0]

		return 0;
   18d4a:	2000      	movs	r0, #0
   18d4c:	e012      	b.n	18d74 <l2cap_accept+0x50>
   18d4e:	4b0c      	ldr	r3, [pc, #48]	; (18d80 <l2cap_accept+0x5c>)
   18d50:	4a0c      	ldr	r2, [pc, #48]	; (18d84 <l2cap_accept+0x60>)
   18d52:	1a9b      	subs	r3, r3, r2
   18d54:	08db      	lsrs	r3, r3, #3
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
   18d56:	f04f 0200 	mov.w	r2, #0
   18d5a:	2101      	movs	r1, #1
   18d5c:	f361 0202 	bfi	r2, r1, #0, #3
   18d60:	f36f 02c5 	bfc	r2, #3, #3
   18d64:	f363 128f 	bfi	r2, r3, #6, #10
   18d68:	4601      	mov	r1, r0
   18d6a:	4807      	ldr	r0, [pc, #28]	; (18d88 <l2cap_accept+0x64>)
   18d6c:	f7f8 f9d0 	bl	11110 <log_1>

	return -ENOMEM;
   18d70:	f06f 000b 	mvn.w	r0, #11
}
   18d74:	bd10      	pop	{r4, pc}
   18d76:	bf00      	nop
   18d78:	20001978 	.word	0x20001978
   18d7c:	0002c218 	.word	0x0002c218
   18d80:	00029f2c 	.word	0x00029f2c
   18d84:	00029ecc 	.word	0x00029ecc
   18d88:	0002c0b4 	.word	0x0002c0b4

00018d8c <l2cap_rtx_timeout>:
{
   18d8c:	b538      	push	{r3, r4, r5, lr}
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
   18d8e:	f1a0 0410 	sub.w	r4, r0, #16
	struct bt_conn *conn = chan->chan.conn;
   18d92:	f850 5c10 	ldr.w	r5, [r0, #-16]
   18d96:	4b0c      	ldr	r3, [pc, #48]	; (18dc8 <l2cap_rtx_timeout+0x3c>)
   18d98:	4a0c      	ldr	r2, [pc, #48]	; (18dcc <l2cap_rtx_timeout+0x40>)
   18d9a:	1a9b      	subs	r3, r3, r2
   18d9c:	08db      	lsrs	r3, r3, #3
	BT_ERR("chan %p timeout", chan);
   18d9e:	f04f 0200 	mov.w	r2, #0
   18da2:	2101      	movs	r1, #1
   18da4:	f361 0202 	bfi	r2, r1, #0, #3
   18da8:	f36f 02c5 	bfc	r2, #3, #3
   18dac:	f363 128f 	bfi	r2, r3, #6, #10
   18db0:	4621      	mov	r1, r4
   18db2:	4807      	ldr	r0, [pc, #28]	; (18dd0 <l2cap_rtx_timeout+0x44>)
   18db4:	f7f8 f9ac 	bl	11110 <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
   18db8:	4621      	mov	r1, r4
   18dba:	4628      	mov	r0, r5
   18dbc:	f00c fe43 	bl	25a46 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   18dc0:	4620      	mov	r0, r4
   18dc2:	f00c fe68 	bl	25a96 <bt_l2cap_chan_del>
}
   18dc6:	bd38      	pop	{r3, r4, r5, pc}
   18dc8:	00029f2c 	.word	0x00029f2c
   18dcc:	00029ecc 	.word	0x00029ecc
   18dd0:	0002c0dc 	.word	0x0002c0dc

00018dd4 <l2cap_chan_add>:
{
   18dd4:	b570      	push	{r4, r5, r6, lr}
	if (!ch) {
   18dd6:	b1d9      	cbz	r1, 18e10 <l2cap_chan_add+0x3c>
   18dd8:	4604      	mov	r4, r0
   18dda:	4615      	mov	r5, r2
   18ddc:	460e      	mov	r6, r1
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   18dde:	4914      	ldr	r1, [pc, #80]	; (18e30 <l2cap_chan_add+0x5c>)
   18de0:	f106 0010 	add.w	r0, r6, #16
   18de4:	f010 fb5f 	bl	294a6 <k_work_init_delayable>
	atomic_clear(chan->status);
   18de8:	f106 0368 	add.w	r3, r6, #104	; 0x68
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   18dec:	2200      	movs	r2, #0
   18dee:	f3bf 8f5b 	dmb	ish
   18df2:	e853 1f00 	ldrex	r1, [r3]
   18df6:	e843 2000 	strex	r0, r2, [r3]
   18dfa:	2800      	cmp	r0, #0
   18dfc:	d1f9      	bne.n	18df2 <l2cap_chan_add+0x1e>
   18dfe:	f3bf 8f5b 	dmb	ish
	bt_l2cap_chan_add(conn, chan, destroy);
   18e02:	462a      	mov	r2, r5
   18e04:	4631      	mov	r1, r6
   18e06:	4620      	mov	r0, r4
   18e08:	f00c fe58 	bl	25abc <bt_l2cap_chan_add>
	return true;
   18e0c:	2001      	movs	r0, #1
}
   18e0e:	bd70      	pop	{r4, r5, r6, pc}
   18e10:	4b08      	ldr	r3, [pc, #32]	; (18e34 <l2cap_chan_add+0x60>)
   18e12:	4a09      	ldr	r2, [pc, #36]	; (18e38 <l2cap_chan_add+0x64>)
   18e14:	1a9b      	subs	r3, r3, r2
   18e16:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to allocate L2CAP channel ID");
   18e18:	2201      	movs	r2, #1
   18e1a:	f362 0102 	bfi	r1, r2, #0, #3
   18e1e:	f36f 01c5 	bfc	r1, #3, #3
   18e22:	f363 118f 	bfi	r1, r3, #6, #10
   18e26:	4805      	ldr	r0, [pc, #20]	; (18e3c <l2cap_chan_add+0x68>)
   18e28:	f7f8 fa28 	bl	1127c <log_0>
		return false;
   18e2c:	2000      	movs	r0, #0
   18e2e:	e7ee      	b.n	18e0e <l2cap_chan_add+0x3a>
   18e30:	00018d8d 	.word	0x00018d8d
   18e34:	00029f2c 	.word	0x00029f2c
   18e38:	00029ecc 	.word	0x00029ecc
   18e3c:	0002c0ec 	.word	0x0002c0ec

00018e40 <bt_l2cap_connected>:
{
   18e40:	b530      	push	{r4, r5, lr}
   18e42:	b083      	sub	sp, #12
   18e44:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   18e46:	4c1a      	ldr	r4, [pc, #104]	; (18eb0 <bt_l2cap_connected+0x70>)
   18e48:	e000      	b.n	18e4c <bt_l2cap_connected+0xc>
   18e4a:	340c      	adds	r4, #12
   18e4c:	4b19      	ldr	r3, [pc, #100]	; (18eb4 <bt_l2cap_connected+0x74>)
   18e4e:	429c      	cmp	r4, r3
   18e50:	d22c      	bcs.n	18eac <bt_l2cap_connected+0x6c>
		if (fchan->accept(conn, &chan) < 0) {
   18e52:	6863      	ldr	r3, [r4, #4]
   18e54:	a901      	add	r1, sp, #4
   18e56:	4628      	mov	r0, r5
   18e58:	4798      	blx	r3
   18e5a:	2800      	cmp	r0, #0
   18e5c:	dbf5      	blt.n	18e4a <bt_l2cap_connected+0xa>
		ch = BT_L2CAP_LE_CHAN(chan);
   18e5e:	9901      	ldr	r1, [sp, #4]
		ch->rx.cid = fchan->cid;
   18e60:	8823      	ldrh	r3, [r4, #0]
   18e62:	f8a1 3070 	strh.w	r3, [r1, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   18e66:	f8a1 307c 	strh.w	r3, [r1, #124]	; 0x7c
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   18e6a:	68a2      	ldr	r2, [r4, #8]
   18e6c:	4628      	mov	r0, r5
   18e6e:	f7ff ffb1 	bl	18dd4 <l2cap_chan_add>
   18e72:	b1d8      	cbz	r0, 18eac <bt_l2cap_connected+0x6c>
		if (chan->ops->connected) {
   18e74:	9801      	ldr	r0, [sp, #4]
   18e76:	6843      	ldr	r3, [r0, #4]
   18e78:	681b      	ldr	r3, [r3, #0]
   18e7a:	b103      	cbz	r3, 18e7e <bt_l2cap_connected+0x3e>
			chan->ops->connected(chan);
   18e7c:	4798      	blx	r3
		atomic_set_bit(chan->status, BT_L2CAP_STATUS_OUT);
   18e7e:	9b01      	ldr	r3, [sp, #4]
   18e80:	3368      	adds	r3, #104	; 0x68
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18e82:	f3bf 8f5b 	dmb	ish
   18e86:	e853 2f00 	ldrex	r2, [r3]
   18e8a:	f042 0201 	orr.w	r2, r2, #1
   18e8e:	e843 2100 	strex	r1, r2, [r3]
   18e92:	2900      	cmp	r1, #0
   18e94:	d1f7      	bne.n	18e86 <bt_l2cap_connected+0x46>
   18e96:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   18e9a:	9801      	ldr	r0, [sp, #4]
   18e9c:	6843      	ldr	r3, [r0, #4]
   18e9e:	699b      	ldr	r3, [r3, #24]
   18ea0:	2b00      	cmp	r3, #0
   18ea2:	d0d2      	beq.n	18e4a <bt_l2cap_connected+0xa>
			chan->ops->status(chan, chan->status);
   18ea4:	f100 0168 	add.w	r1, r0, #104	; 0x68
   18ea8:	4798      	blx	r3
   18eaa:	e7ce      	b.n	18e4a <bt_l2cap_connected+0xa>
}
   18eac:	b003      	add	sp, #12
   18eae:	bd30      	pop	{r4, r5, pc}
   18eb0:	00029e08 	.word	0x00029e08
   18eb4:	00029e2c 	.word	0x00029e2c

00018eb8 <l2cap_create_le_sig_pdu>:
{
   18eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18eba:	460c      	mov	r4, r1
   18ebc:	4616      	mov	r6, r2
   18ebe:	461d      	mov	r5, r3
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
   18ec0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   18ec4:	2300      	movs	r3, #0
   18ec6:	2100      	movs	r1, #0
   18ec8:	4608      	mov	r0, r1
   18eca:	f00c fe4d 	bl	25b68 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   18ece:	4607      	mov	r7, r0
   18ed0:	b140      	cbz	r0, 18ee4 <l2cap_create_le_sig_pdu+0x2c>
	return net_buf_simple_add(&buf->b, len);
   18ed2:	2104      	movs	r1, #4
   18ed4:	3008      	adds	r0, #8
   18ed6:	f00f fa2c 	bl	28332 <net_buf_simple_add>
	hdr->code = code;
   18eda:	7004      	strb	r4, [r0, #0]
	hdr->ident = ident;
   18edc:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   18ede:	8045      	strh	r5, [r0, #2]
}
   18ee0:	4638      	mov	r0, r7
   18ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18ee4:	4b08      	ldr	r3, [pc, #32]	; (18f08 <l2cap_create_le_sig_pdu+0x50>)
   18ee6:	4a09      	ldr	r2, [pc, #36]	; (18f0c <l2cap_create_le_sig_pdu+0x54>)
   18ee8:	1a9b      	subs	r3, r3, r2
   18eea:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   18eec:	f04f 0200 	mov.w	r2, #0
   18ef0:	2101      	movs	r1, #1
   18ef2:	f361 0202 	bfi	r2, r1, #0, #3
   18ef6:	f36f 02c5 	bfc	r2, #3, #3
   18efa:	f363 128f 	bfi	r2, r3, #6, #10
   18efe:	4621      	mov	r1, r4
   18f00:	4803      	ldr	r0, [pc, #12]	; (18f10 <l2cap_create_le_sig_pdu+0x58>)
   18f02:	f7f8 f905 	bl	11110 <log_1>
		return NULL;
   18f06:	e7eb      	b.n	18ee0 <l2cap_create_le_sig_pdu+0x28>
   18f08:	00029f2c 	.word	0x00029f2c
   18f0c:	00029ecc 	.word	0x00029ecc
   18f10:	0002c110 	.word	0x0002c110

00018f14 <l2cap_recv>:
{
   18f14:	b570      	push	{r4, r5, r6, lr}
   18f16:	b082      	sub	sp, #8
	if (buf->len < sizeof(*hdr)) {
   18f18:	898b      	ldrh	r3, [r1, #12]
   18f1a:	2b03      	cmp	r3, #3
   18f1c:	d917      	bls.n	18f4e <l2cap_recv+0x3a>
   18f1e:	4606      	mov	r6, r0
   18f20:	460c      	mov	r4, r1
	return net_buf_simple_pull_mem(&buf->b, len);
   18f22:	2104      	movs	r1, #4
   18f24:	f104 0008 	add.w	r0, r4, #8
   18f28:	f00f fa2b 	bl	28382 <net_buf_simple_pull_mem>
   18f2c:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   18f2e:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
   18f30:	89a1      	ldrh	r1, [r4, #12]
   18f32:	4291      	cmp	r1, r2
   18f34:	d11e      	bne.n	18f74 <l2cap_recv+0x60>
	if (!hdr->ident) {
   18f36:	7843      	ldrb	r3, [r0, #1]
   18f38:	b36b      	cbz	r3, 18f96 <l2cap_recv+0x82>
	switch (hdr->code) {
   18f3a:	7801      	ldrb	r1, [r0, #0]
   18f3c:	2901      	cmp	r1, #1
   18f3e:	d016      	beq.n	18f6e <l2cap_recv+0x5a>
   18f40:	2913      	cmp	r1, #19
   18f42:	d139      	bne.n	18fb8 <l2cap_recv+0xa4>
		le_conn_param_rsp(l2cap, buf);
   18f44:	4621      	mov	r1, r4
   18f46:	4630      	mov	r0, r6
   18f48:	f7ff fed0 	bl	18cec <le_conn_param_rsp>
		break;
   18f4c:	e00f      	b.n	18f6e <l2cap_recv+0x5a>
   18f4e:	4b26      	ldr	r3, [pc, #152]	; (18fe8 <l2cap_recv+0xd4>)
   18f50:	4a26      	ldr	r2, [pc, #152]	; (18fec <l2cap_recv+0xd8>)
   18f52:	1a9b      	subs	r3, r3, r2
   18f54:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small L2CAP signaling PDU");
   18f56:	f04f 0100 	mov.w	r1, #0
   18f5a:	2201      	movs	r2, #1
   18f5c:	f362 0102 	bfi	r1, r2, #0, #3
   18f60:	f36f 01c5 	bfc	r1, #3, #3
   18f64:	f363 118f 	bfi	r1, r3, #6, #10
   18f68:	4821      	ldr	r0, [pc, #132]	; (18ff0 <l2cap_recv+0xdc>)
   18f6a:	f7f8 f987 	bl	1127c <log_0>
}
   18f6e:	2000      	movs	r0, #0
   18f70:	b002      	add	sp, #8
   18f72:	bd70      	pop	{r4, r5, r6, pc}
   18f74:	481c      	ldr	r0, [pc, #112]	; (18fe8 <l2cap_recv+0xd4>)
   18f76:	4b1d      	ldr	r3, [pc, #116]	; (18fec <l2cap_recv+0xd8>)
   18f78:	1ac0      	subs	r0, r0, r3
   18f7a:	08c0      	lsrs	r0, r0, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   18f7c:	f04f 0300 	mov.w	r3, #0
   18f80:	2401      	movs	r4, #1
   18f82:	f364 0302 	bfi	r3, r4, #0, #3
   18f86:	f36f 03c5 	bfc	r3, #3, #3
   18f8a:	f360 138f 	bfi	r3, r0, #6, #10
   18f8e:	4819      	ldr	r0, [pc, #100]	; (18ff4 <l2cap_recv+0xe0>)
   18f90:	f7f8 f8f4 	bl	1117c <log_2>
		return 0;
   18f94:	e7eb      	b.n	18f6e <l2cap_recv+0x5a>
   18f96:	4b14      	ldr	r3, [pc, #80]	; (18fe8 <l2cap_recv+0xd4>)
   18f98:	4a14      	ldr	r2, [pc, #80]	; (18fec <l2cap_recv+0xd8>)
   18f9a:	1a9b      	subs	r3, r3, r2
   18f9c:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid ident value in L2CAP PDU");
   18f9e:	f04f 0100 	mov.w	r1, #0
   18fa2:	2201      	movs	r2, #1
   18fa4:	f362 0102 	bfi	r1, r2, #0, #3
   18fa8:	f36f 01c5 	bfc	r1, #3, #3
   18fac:	f363 118f 	bfi	r1, r3, #6, #10
   18fb0:	4811      	ldr	r0, [pc, #68]	; (18ff8 <l2cap_recv+0xe4>)
   18fb2:	f7f8 f963 	bl	1127c <log_0>
		return 0;
   18fb6:	e7da      	b.n	18f6e <l2cap_recv+0x5a>
   18fb8:	4b0b      	ldr	r3, [pc, #44]	; (18fe8 <l2cap_recv+0xd4>)
   18fba:	4a0c      	ldr	r2, [pc, #48]	; (18fec <l2cap_recv+0xd8>)
   18fbc:	1a9b      	subs	r3, r3, r2
   18fbe:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   18fc0:	f04f 0200 	mov.w	r2, #0
   18fc4:	2002      	movs	r0, #2
   18fc6:	f360 0202 	bfi	r2, r0, #0, #3
   18fca:	f36f 02c5 	bfc	r2, #3, #3
   18fce:	f363 128f 	bfi	r2, r3, #6, #10
   18fd2:	480a      	ldr	r0, [pc, #40]	; (18ffc <l2cap_recv+0xe8>)
   18fd4:	f7f8 f89c 	bl	11110 <log_1>
		l2cap_send_reject(chan->conn, hdr->ident,
   18fd8:	7869      	ldrb	r1, [r5, #1]
   18fda:	2200      	movs	r2, #0
   18fdc:	9200      	str	r2, [sp, #0]
   18fde:	4613      	mov	r3, r2
   18fe0:	6830      	ldr	r0, [r6, #0]
   18fe2:	f00c fddb 	bl	25b9c <l2cap_send_reject>
		break;
   18fe6:	e7c2      	b.n	18f6e <l2cap_recv+0x5a>
   18fe8:	00029f2c 	.word	0x00029f2c
   18fec:	00029ecc 	.word	0x00029ecc
   18ff0:	0002c138 	.word	0x0002c138
   18ff4:	0002c158 	.word	0x0002c158
   18ff8:	0002c17c 	.word	0x0002c17c
   18ffc:	0002c1a0 	.word	0x0002c1a0

00019000 <bt_l2cap_recv>:
{
   19000:	b570      	push	{r4, r5, r6, lr}
   19002:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   19004:	898b      	ldrh	r3, [r1, #12]
   19006:	2b03      	cmp	r3, #3
   19008:	d90f      	bls.n	1902a <bt_l2cap_recv+0x2a>
   1900a:	4605      	mov	r5, r0
   1900c:	2104      	movs	r1, #4
   1900e:	f104 0008 	add.w	r0, r4, #8
   19012:	f00f f9b6 	bl	28382 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   19016:	8846      	ldrh	r6, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   19018:	4631      	mov	r1, r6
   1901a:	4628      	mov	r0, r5
   1901c:	f00c fdfe 	bl	25c1c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   19020:	b1b8      	cbz	r0, 19052 <bt_l2cap_recv+0x52>
	l2cap_chan_recv(chan, buf);
   19022:	4621      	mov	r1, r4
   19024:	f00c fd01 	bl	25a2a <l2cap_chan_recv>
}
   19028:	bd70      	pop	{r4, r5, r6, pc}
   1902a:	4b14      	ldr	r3, [pc, #80]	; (1907c <bt_l2cap_recv+0x7c>)
   1902c:	4a14      	ldr	r2, [pc, #80]	; (19080 <bt_l2cap_recv+0x80>)
   1902e:	1a9b      	subs	r3, r3, r2
   19030:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small L2CAP PDU received");
   19032:	f04f 0100 	mov.w	r1, #0
   19036:	2201      	movs	r2, #1
   19038:	f362 0102 	bfi	r1, r2, #0, #3
   1903c:	f36f 01c5 	bfc	r1, #3, #3
   19040:	f363 118f 	bfi	r1, r3, #6, #10
   19044:	480f      	ldr	r0, [pc, #60]	; (19084 <bt_l2cap_recv+0x84>)
   19046:	f7f8 f919 	bl	1127c <log_0>
		net_buf_unref(buf);
   1904a:	4620      	mov	r0, r4
   1904c:	f00f f927 	bl	2829e <net_buf_unref>
		return;
   19050:	e7ea      	b.n	19028 <bt_l2cap_recv+0x28>
   19052:	4b0a      	ldr	r3, [pc, #40]	; (1907c <bt_l2cap_recv+0x7c>)
   19054:	4a0a      	ldr	r2, [pc, #40]	; (19080 <bt_l2cap_recv+0x80>)
   19056:	1a9b      	subs	r3, r3, r2
   19058:	08db      	lsrs	r3, r3, #3
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   1905a:	f04f 0200 	mov.w	r2, #0
   1905e:	2102      	movs	r1, #2
   19060:	f361 0202 	bfi	r2, r1, #0, #3
   19064:	f36f 02c5 	bfc	r2, #3, #3
   19068:	f363 128f 	bfi	r2, r3, #6, #10
   1906c:	4631      	mov	r1, r6
   1906e:	4806      	ldr	r0, [pc, #24]	; (19088 <bt_l2cap_recv+0x88>)
   19070:	f7f8 f84e 	bl	11110 <log_1>
		net_buf_unref(buf);
   19074:	4620      	mov	r0, r4
   19076:	f00f f912 	bl	2829e <net_buf_unref>
		return;
   1907a:	e7d5      	b.n	19028 <bt_l2cap_recv+0x28>
   1907c:	00029f2c 	.word	0x00029f2c
   19080:	00029ecc 	.word	0x00029ecc
   19084:	0002c1c0 	.word	0x0002c1c0
   19088:	0002c1e0 	.word	0x0002c1e0

0001908c <att_cfm_sent>:
		return NULL;
	}
}

static void att_cfm_sent(struct bt_conn *conn, void *user_data)
{
   1908c:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   1908e:	4b03      	ldr	r3, [pc, #12]	; (1909c <att_cfm_sent+0x10>)
   19090:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   19094:	f00c fe03 	bl	25c9e <att_sent>
}
   19098:	bd08      	pop	{r3, pc}
   1909a:	bf00      	nop
   1909c:	00025f8f 	.word	0x00025f8f

000190a0 <att_rsp_sent>:

static void att_rsp_sent(struct bt_conn *conn, void *user_data)
{
   190a0:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   190a2:	4b03      	ldr	r3, [pc, #12]	; (190b0 <att_rsp_sent+0x10>)
   190a4:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   190a8:	f00c fdf9 	bl	25c9e <att_sent>
}
   190ac:	bd08      	pop	{r3, pc}
   190ae:	bf00      	nop
   190b0:	00025fab 	.word	0x00025fab

000190b4 <att_req_sent>:

static void att_req_sent(struct bt_conn *conn, void *user_data)
{
   190b4:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   190b6:	4b03      	ldr	r3, [pc, #12]	; (190c4 <att_req_sent+0x10>)
   190b8:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   190bc:	f00c fdef 	bl	25c9e <att_sent>
}
   190c0:	bd08      	pop	{r3, pc}
   190c2:	bf00      	nop
   190c4:	00025f77 	.word	0x00025f77

000190c8 <att_cb>:

static bt_conn_tx_cb_t att_cb(bt_att_chan_sent_t cb)
{
	if (cb == chan_rsp_sent) {
   190c8:	4b08      	ldr	r3, [pc, #32]	; (190ec <att_cb+0x24>)
   190ca:	4298      	cmp	r0, r3
   190cc:	d009      	beq.n	190e2 <att_cb+0x1a>
		return att_rsp_sent;
	} else if (cb == chan_cfm_sent) {
   190ce:	4b08      	ldr	r3, [pc, #32]	; (190f0 <att_cb+0x28>)
   190d0:	4298      	cmp	r0, r3
   190d2:	d008      	beq.n	190e6 <att_cb+0x1e>
		return att_cfm_sent;
	} else if (cb == chan_req_sent) {
   190d4:	4b07      	ldr	r3, [pc, #28]	; (190f4 <att_cb+0x2c>)
   190d6:	4298      	cmp	r0, r3
   190d8:	d001      	beq.n	190de <att_cb+0x16>
		return att_req_sent;
	} else {
		return att_sent;
   190da:	4807      	ldr	r0, [pc, #28]	; (190f8 <att_cb+0x30>)
	}
}
   190dc:	4770      	bx	lr
		return att_req_sent;
   190de:	4807      	ldr	r0, [pc, #28]	; (190fc <att_cb+0x34>)
   190e0:	4770      	bx	lr
		return att_rsp_sent;
   190e2:	4807      	ldr	r0, [pc, #28]	; (19100 <att_cb+0x38>)
   190e4:	4770      	bx	lr
		return att_cfm_sent;
   190e6:	4807      	ldr	r0, [pc, #28]	; (19104 <att_cb+0x3c>)
   190e8:	4770      	bx	lr
   190ea:	bf00      	nop
   190ec:	00025fab 	.word	0x00025fab
   190f0:	00025f8f 	.word	0x00025f8f
   190f4:	00025f77 	.word	0x00025f77
   190f8:	00025c9f 	.word	0x00025c9f
   190fc:	000190b5 	.word	0x000190b5
   19100:	000190a1 	.word	0x000190a1
   19104:	0001908d 	.word	0x0001908d

00019108 <chan_cb>:
{
   19108:	b508      	push	{r3, lr}
	switch (att_op_get_type(buf->data[0])) {
   1910a:	6883      	ldr	r3, [r0, #8]
   1910c:	7818      	ldrb	r0, [r3, #0]
   1910e:	f00c fe0f 	bl	25d30 <att_op_get_type>
   19112:	3801      	subs	r0, #1
   19114:	2804      	cmp	r0, #4
   19116:	d808      	bhi.n	1912a <chan_cb+0x22>
   19118:	e8df f000 	tbb	[pc, r0]
   1911c:	09070305 	.word	0x09070305
   19120:	05          	.byte	0x05
   19121:	00          	.byte	0x00
   19122:	4804      	ldr	r0, [pc, #16]	; (19134 <chan_cb+0x2c>)
   19124:	e000      	b.n	19128 <chan_cb+0x20>
		return chan_req_sent;
   19126:	4804      	ldr	r0, [pc, #16]	; (19138 <chan_cb+0x30>)
}
   19128:	bd08      	pop	{r3, pc}
		return NULL;
   1912a:	2000      	movs	r0, #0
   1912c:	e7fc      	b.n	19128 <chan_cb+0x20>
		return chan_cfm_sent;
   1912e:	4803      	ldr	r0, [pc, #12]	; (1913c <chan_cb+0x34>)
   19130:	e7fa      	b.n	19128 <chan_cb+0x20>
   19132:	bf00      	nop
   19134:	00025fab 	.word	0x00025fab
   19138:	00025f77 	.word	0x00025f77
   1913c:	00025f8f 	.word	0x00025f8f

00019140 <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
   19140:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
   19142:	7b43      	ldrb	r3, [r0, #13]
   19144:	2b07      	cmp	r3, #7
   19146:	d111      	bne.n	1916c <att_get+0x2c>
		BT_WARN("Not connected");
		return NULL;
	}

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   19148:	2104      	movs	r1, #4
   1914a:	f00c fd67 	bl	25c1c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1914e:	4604      	mov	r4, r0
   19150:	b1f0      	cbz	r0, 19190 <att_get+0x50>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19152:	f3bf 8f5b 	dmb	ish
   19156:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
   1915a:	f3bf 8f5b 	dmb	ish
		BT_ERR("Unable to find ATT channel");
		return NULL;
	}

	att_chan = ATT_CHAN(chan);
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   1915e:	f013 0f04 	tst.w	r3, #4
   19162:	d126      	bne.n	191b2 <att_get+0x72>
		BT_WARN("ATT channel flagged as disconnected");
		return NULL;
	}

	return att_chan->att;
   19164:	f850 4c08 	ldr.w	r4, [r0, #-8]
}
   19168:	4620      	mov	r0, r4
   1916a:	bd10      	pop	{r4, pc}
   1916c:	4b1a      	ldr	r3, [pc, #104]	; (191d8 <att_get+0x98>)
   1916e:	4a1b      	ldr	r2, [pc, #108]	; (191dc <att_get+0x9c>)
   19170:	1a9b      	subs	r3, r3, r2
   19172:	08db      	lsrs	r3, r3, #3
		BT_WARN("Not connected");
   19174:	f04f 0100 	mov.w	r1, #0
   19178:	2202      	movs	r2, #2
   1917a:	f362 0102 	bfi	r1, r2, #0, #3
   1917e:	f36f 01c5 	bfc	r1, #3, #3
   19182:	f363 118f 	bfi	r1, r3, #6, #10
   19186:	4816      	ldr	r0, [pc, #88]	; (191e0 <att_get+0xa0>)
   19188:	f7f8 f878 	bl	1127c <log_0>
		return NULL;
   1918c:	2400      	movs	r4, #0
   1918e:	e7eb      	b.n	19168 <att_get+0x28>
   19190:	4b11      	ldr	r3, [pc, #68]	; (191d8 <att_get+0x98>)
   19192:	4a12      	ldr	r2, [pc, #72]	; (191dc <att_get+0x9c>)
   19194:	1a9b      	subs	r3, r3, r2
   19196:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to find ATT channel");
   19198:	f04f 0100 	mov.w	r1, #0
   1919c:	2201      	movs	r2, #1
   1919e:	f362 0102 	bfi	r1, r2, #0, #3
   191a2:	f36f 01c5 	bfc	r1, #3, #3
   191a6:	f363 118f 	bfi	r1, r3, #6, #10
   191aa:	480e      	ldr	r0, [pc, #56]	; (191e4 <att_get+0xa4>)
   191ac:	f7f8 f866 	bl	1127c <log_0>
		return NULL;
   191b0:	e7da      	b.n	19168 <att_get+0x28>
   191b2:	4b09      	ldr	r3, [pc, #36]	; (191d8 <att_get+0x98>)
   191b4:	4a09      	ldr	r2, [pc, #36]	; (191dc <att_get+0x9c>)
   191b6:	1a9b      	subs	r3, r3, r2
   191b8:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT channel flagged as disconnected");
   191ba:	f04f 0100 	mov.w	r1, #0
   191be:	2202      	movs	r2, #2
   191c0:	f362 0102 	bfi	r1, r2, #0, #3
   191c4:	f36f 01c5 	bfc	r1, #3, #3
   191c8:	f363 118f 	bfi	r1, r3, #6, #10
   191cc:	4806      	ldr	r0, [pc, #24]	; (191e8 <att_get+0xa8>)
   191ce:	f7f8 f855 	bl	1127c <log_0>
		return NULL;
   191d2:	2400      	movs	r4, #0
   191d4:	e7c8      	b.n	19168 <att_get+0x28>
   191d6:	bf00      	nop
   191d8:	00029edc 	.word	0x00029edc
   191dc:	00029ecc 	.word	0x00029ecc
   191e0:	0002c238 	.word	0x0002c238
   191e4:	0002c248 	.word	0x0002c248
   191e8:	0002c264 	.word	0x0002c264

000191ec <att_chan_new>:

	k_mem_slab_free(&chan_slab, (void **)&chan);
}

static struct bt_att_chan *att_chan_new(struct bt_att *att, atomic_val_t flags)
{
   191ec:	b570      	push	{r4, r5, r6, lr}
   191ee:	b082      	sub	sp, #8
   191f0:	4605      	mov	r5, r0
   191f2:	460e      	mov	r6, r1
	return list->head;
   191f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
	#endif /* CONFIG_BT_SMP */
		.released = bt_att_released,
	};
	struct bt_att_chan *chan;

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   191f6:	b10b      	cbz	r3, 191fc <att_chan_new+0x10>
   191f8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   191fc:	9301      	str	r3, [sp, #4]
	int quota = 0;
   191fe:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   19200:	e014      	b.n	1922c <att_chan_new+0x40>
		if (chan->att == att) {
			quota++;
   19202:	3101      	adds	r1, #1
   19204:	e017      	b.n	19236 <att_chan_new+0x4a>
   19206:	4b2d      	ldr	r3, [pc, #180]	; (192bc <att_chan_new+0xd0>)
   19208:	4a2d      	ldr	r2, [pc, #180]	; (192c0 <att_chan_new+0xd4>)
   1920a:	1a9b      	subs	r3, r3, r2
   1920c:	08db      	lsrs	r3, r3, #3
		}

		if (quota == ATT_CHAN_MAX) {
			BT_ERR("Maximum number of channels reached: %d", quota);
   1920e:	f04f 0200 	mov.w	r2, #0
   19212:	2001      	movs	r0, #1
   19214:	f360 0202 	bfi	r2, r0, #0, #3
   19218:	f36f 02c5 	bfc	r2, #3, #3
   1921c:	f363 128f 	bfi	r2, r3, #6, #10
   19220:	4828      	ldr	r0, [pc, #160]	; (192c4 <att_chan_new+0xd8>)
   19222:	f7f7 ff75 	bl	11110 <log_1>
			return NULL;
   19226:	2400      	movs	r4, #0
   19228:	e033      	b.n	19292 <att_chan_new+0xa6>
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1922a:	9301      	str	r3, [sp, #4]
   1922c:	9c01      	ldr	r4, [sp, #4]
   1922e:	b174      	cbz	r4, 1924e <att_chan_new+0x62>
		if (chan->att == att) {
   19230:	6823      	ldr	r3, [r4, #0]
   19232:	42ab      	cmp	r3, r5
   19234:	d0e5      	beq.n	19202 <att_chan_new+0x16>
		if (quota == ATT_CHAN_MAX) {
   19236:	2901      	cmp	r1, #1
   19238:	d0e5      	beq.n	19206 <att_chan_new+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1923a:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   1923e:	d0f4      	beq.n	1922a <att_chan_new+0x3e>
	return node->next;
   19240:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   19244:	2b00      	cmp	r3, #0
   19246:	d0f0      	beq.n	1922a <att_chan_new+0x3e>
   19248:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   1924c:	e7ed      	b.n	1922a <att_chan_new+0x3e>
		}
	}

	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1924e:	2200      	movs	r2, #0
   19250:	2300      	movs	r3, #0
   19252:	a901      	add	r1, sp, #4
   19254:	481c      	ldr	r0, [pc, #112]	; (192c8 <att_chan_new+0xdc>)
   19256:	f006 fa6b 	bl	1f730 <k_mem_slab_alloc>
   1925a:	b9e8      	cbnz	r0, 19298 <att_chan_new+0xac>
		BT_ERR("No available ATT channel for conn %p", att->conn);
		return NULL;
	}

	(void)memset(chan, 0, sizeof(*chan));
   1925c:	f44f 72a4 	mov.w	r2, #328	; 0x148
   19260:	2100      	movs	r1, #0
   19262:	9801      	ldr	r0, [sp, #4]
   19264:	f00b fc26 	bl	24ab4 <memset>
	chan->chan.chan.ops = &ops;
   19268:	9801      	ldr	r0, [sp, #4]
   1926a:	4b18      	ldr	r3, [pc, #96]	; (192cc <att_chan_new+0xe0>)
   1926c:	60c3      	str	r3, [r0, #12]
	k_fifo_init(&chan->tx_queue);
   1926e:	30f8      	adds	r0, #248	; 0xf8
	z_impl_k_queue_init(queue);
   19270:	f010 f80b 	bl	2928a <z_impl_k_queue_init>
	atomic_set(chan->flags, flags);
   19274:	9b01      	ldr	r3, [sp, #4]
   19276:	33f0      	adds	r3, #240	; 0xf0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   19278:	f3bf 8f5b 	dmb	ish
   1927c:	e853 2f00 	ldrex	r2, [r3]
   19280:	e843 6100 	strex	r1, r6, [r3]
   19284:	2900      	cmp	r1, #0
   19286:	d1f9      	bne.n	1927c <att_chan_new+0x90>
   19288:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   1928c:	9b01      	ldr	r3, [sp, #4]
   1928e:	601d      	str	r5, [r3, #0]

	return chan;
   19290:	9c01      	ldr	r4, [sp, #4]
}
   19292:	4620      	mov	r0, r4
   19294:	b002      	add	sp, #8
   19296:	bd70      	pop	{r4, r5, r6, pc}
   19298:	4b08      	ldr	r3, [pc, #32]	; (192bc <att_chan_new+0xd0>)
   1929a:	4a09      	ldr	r2, [pc, #36]	; (192c0 <att_chan_new+0xd4>)
   1929c:	1a9b      	subs	r3, r3, r2
   1929e:	08db      	lsrs	r3, r3, #3
		BT_ERR("No available ATT channel for conn %p", att->conn);
   192a0:	f04f 0200 	mov.w	r2, #0
   192a4:	2101      	movs	r1, #1
   192a6:	f361 0202 	bfi	r2, r1, #0, #3
   192aa:	f36f 02c5 	bfc	r2, #3, #3
   192ae:	f363 128f 	bfi	r2, r3, #6, #10
   192b2:	6829      	ldr	r1, [r5, #0]
   192b4:	4806      	ldr	r0, [pc, #24]	; (192d0 <att_chan_new+0xe4>)
   192b6:	f7f7 ff2b 	bl	11110 <log_1>
		return NULL;
   192ba:	e7ea      	b.n	19292 <att_chan_new+0xa6>
   192bc:	00029edc 	.word	0x00029edc
   192c0:	00029ecc 	.word	0x00029ecc
   192c4:	0002c288 	.word	0x0002c288
   192c8:	20000700 	.word	0x20000700
   192cc:	2000057c 	.word	0x2000057c
   192d0:	0002c2b0 	.word	0x0002c2b0

000192d4 <bt_att_accept>:

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   192d4:	b570      	push	{r4, r5, r6, lr}
   192d6:	b082      	sub	sp, #8
   192d8:	4606      	mov	r6, r0
   192da:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   192dc:	2200      	movs	r2, #0
   192de:	2300      	movs	r3, #0
   192e0:	a901      	add	r1, sp, #4
   192e2:	4819      	ldr	r0, [pc, #100]	; (19348 <bt_att_accept+0x74>)
   192e4:	f006 fa24 	bl	1f730 <k_mem_slab_alloc>
   192e8:	b9b0      	cbnz	r0, 19318 <bt_att_accept+0x44>
   192ea:	4605      	mov	r5, r0
		BT_ERR("No available ATT context for conn %p", conn);
		return -ENOMEM;
	}

	(void)memset(att, 0, sizeof(*att));
   192ec:	222c      	movs	r2, #44	; 0x2c
   192ee:	2100      	movs	r1, #0
   192f0:	9801      	ldr	r0, [sp, #4]
   192f2:	f00b fbdf 	bl	24ab4 <memset>
	att->conn = conn;
   192f6:	9b01      	ldr	r3, [sp, #4]
   192f8:	601e      	str	r6, [r3, #0]
	sys_slist_init(&att->reqs);
   192fa:	9801      	ldr	r0, [sp, #4]
	list->head = NULL;
   192fc:	2100      	movs	r1, #0
   192fe:	6041      	str	r1, [r0, #4]
	list->tail = NULL;
   19300:	6081      	str	r1, [r0, #8]
	list->head = NULL;
   19302:	6241      	str	r1, [r0, #36]	; 0x24
	list->tail = NULL;
   19304:	6281      	str	r1, [r0, #40]	; 0x28
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
   19306:	f7ff ff71 	bl	191ec <att_chan_new>
	if (!chan) {
   1930a:	4603      	mov	r3, r0
   1930c:	b1c0      	cbz	r0, 19340 <bt_att_accept+0x6c>
		return -ENOMEM;
	}

	*ch = &chan->chan.chan;
   1930e:	3308      	adds	r3, #8
   19310:	6023      	str	r3, [r4, #0]

	return 0;
}
   19312:	4628      	mov	r0, r5
   19314:	b002      	add	sp, #8
   19316:	bd70      	pop	{r4, r5, r6, pc}
   19318:	4b0c      	ldr	r3, [pc, #48]	; (1934c <bt_att_accept+0x78>)
   1931a:	4a0d      	ldr	r2, [pc, #52]	; (19350 <bt_att_accept+0x7c>)
   1931c:	1a9b      	subs	r3, r3, r2
   1931e:	08db      	lsrs	r3, r3, #3
		BT_ERR("No available ATT context for conn %p", conn);
   19320:	f04f 0200 	mov.w	r2, #0
   19324:	2101      	movs	r1, #1
   19326:	f361 0202 	bfi	r2, r1, #0, #3
   1932a:	f36f 02c5 	bfc	r2, #3, #3
   1932e:	f363 128f 	bfi	r2, r3, #6, #10
   19332:	4631      	mov	r1, r6
   19334:	4807      	ldr	r0, [pc, #28]	; (19354 <bt_att_accept+0x80>)
   19336:	f7f7 feeb 	bl	11110 <log_1>
		return -ENOMEM;
   1933a:	f06f 050b 	mvn.w	r5, #11
   1933e:	e7e8      	b.n	19312 <bt_att_accept+0x3e>
		return -ENOMEM;
   19340:	f06f 050b 	mvn.w	r5, #11
   19344:	e7e5      	b.n	19312 <bt_att_accept+0x3e>
   19346:	bf00      	nop
   19348:	200006e4 	.word	0x200006e4
   1934c:	00029edc 	.word	0x00029edc
   19350:	00029ecc 	.word	0x00029ecc
   19354:	0002c2d8 	.word	0x0002c2d8

00019358 <bt_att_released>:
{
   19358:	b500      	push	{lr}
   1935a:	b083      	sub	sp, #12
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1935c:	3808      	subs	r0, #8
   1935e:	9001      	str	r0, [sp, #4]
	k_mem_slab_free(&chan_slab, (void **)&chan);
   19360:	a901      	add	r1, sp, #4
   19362:	4803      	ldr	r0, [pc, #12]	; (19370 <bt_att_released+0x18>)
   19364:	f00f fe58 	bl	29018 <k_mem_slab_free>
}
   19368:	b003      	add	sp, #12
   1936a:	f85d fb04 	ldr.w	pc, [sp], #4
   1936e:	bf00      	nop
   19370:	20000700 	.word	0x20000700

00019374 <chan_send>:
{
   19374:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19378:	b083      	sub	sp, #12
   1937a:	4604      	mov	r4, r0
   1937c:	460d      	mov	r5, r1
   1937e:	4616      	mov	r6, r2
	hdr = (void *)buf->data;
   19380:	688b      	ldr	r3, [r1, #8]
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   19382:	781b      	ldrb	r3, [r3, #0]
   19384:	2bd2      	cmp	r3, #210	; 0xd2
   19386:	d021      	beq.n	193cc <chan_send+0x58>
	state->offset = net_buf_simple_headroom(buf);
   19388:	f105 0008 	add.w	r0, r5, #8
   1938c:	f00f f809 	bl	283a2 <net_buf_simple_headroom>
   19390:	b287      	uxth	r7, r0
	state->len = buf->len;
   19392:	f8b5 900c 	ldrh.w	r9, [r5, #12]
	chan->sent = cb ? cb : chan_cb(buf);
   19396:	b3a6      	cbz	r6, 19402 <chan_send+0x8e>
   19398:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1939c:	f854 8b08 	ldr.w	r8, [r4], #8
   193a0:	4630      	mov	r0, r6
   193a2:	f7ff fe91 	bl	190c8 <att_cb>
   193a6:	4603      	mov	r3, r0
   193a8:	f8d8 0000 	ldr.w	r0, [r8]
   193ac:	9400      	str	r4, [sp, #0]
   193ae:	462a      	mov	r2, r5
   193b0:	2104      	movs	r1, #4
   193b2:	f00c fbde 	bl	25b72 <bt_l2cap_send_cb>
	if (err) {
   193b6:	4680      	mov	r8, r0
   193b8:	b120      	cbz	r0, 193c4 <chan_send+0x50>
	buf->data = buf->__buf + state->offset;
   193ba:	6928      	ldr	r0, [r5, #16]
   193bc:	4438      	add	r0, r7
   193be:	60a8      	str	r0, [r5, #8]
	buf->len = state->len;
   193c0:	f8a5 900c 	strh.w	r9, [r5, #12]
}
   193c4:	4640      	mov	r0, r8
   193c6:	b003      	add	sp, #12
   193c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = bt_smp_sign(chan->att->conn, buf);
   193cc:	6803      	ldr	r3, [r0, #0]
   193ce:	6818      	ldr	r0, [r3, #0]
   193d0:	f00e fb7e 	bl	27ad0 <bt_smp_sign>
		if (err) {
   193d4:	4680      	mov	r8, r0
   193d6:	2800      	cmp	r0, #0
   193d8:	d0d6      	beq.n	19388 <chan_send+0x14>
   193da:	4b0c      	ldr	r3, [pc, #48]	; (1940c <chan_send+0x98>)
   193dc:	4a0c      	ldr	r2, [pc, #48]	; (19410 <chan_send+0x9c>)
   193de:	1a9b      	subs	r3, r3, r2
   193e0:	08db      	lsrs	r3, r3, #3
			BT_ERR("Error signing data");
   193e2:	f04f 0100 	mov.w	r1, #0
   193e6:	2201      	movs	r2, #1
   193e8:	f362 0102 	bfi	r1, r2, #0, #3
   193ec:	f36f 01c5 	bfc	r1, #3, #3
   193f0:	f363 118f 	bfi	r1, r3, #6, #10
   193f4:	4807      	ldr	r0, [pc, #28]	; (19414 <chan_send+0xa0>)
   193f6:	f7f7 ff41 	bl	1127c <log_0>
			net_buf_unref(buf);
   193fa:	4628      	mov	r0, r5
   193fc:	f00e ff4f 	bl	2829e <net_buf_unref>
			return err;
   19400:	e7e0      	b.n	193c4 <chan_send+0x50>
	chan->sent = cb ? cb : chan_cb(buf);
   19402:	4628      	mov	r0, r5
   19404:	f7ff fe80 	bl	19108 <chan_cb>
   19408:	4606      	mov	r6, r0
   1940a:	e7c5      	b.n	19398 <chan_send+0x24>
   1940c:	00029edc 	.word	0x00029edc
   19410:	00029ecc 	.word	0x00029ecc
   19414:	0002c300 	.word	0x0002c300

00019418 <read_group_cb>:
{
   19418:	b5f0      	push	{r4, r5, r6, r7, lr}
   1941a:	b085      	sub	sp, #20
   1941c:	4605      	mov	r5, r0
   1941e:	460e      	mov	r6, r1
   19420:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   19422:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   19424:	2300      	movs	r3, #0
   19426:	f88d 3008 	strb.w	r3, [sp, #8]
   1942a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1942e:	f8ad 300a 	strh.w	r3, [sp, #10]
   19432:	a902      	add	r1, sp, #8
   19434:	6800      	ldr	r0, [r0, #0]
   19436:	f00b fc55 	bl	24ce4 <bt_uuid_cmp>
   1943a:	b158      	cbz	r0, 19454 <read_group_cb+0x3c>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1943c:	2300      	movs	r3, #0
   1943e:	f88d 300c 	strb.w	r3, [sp, #12]
   19442:	f642 0301 	movw	r3, #10241	; 0x2801
   19446:	f8ad 300e 	strh.w	r3, [sp, #14]
   1944a:	a903      	add	r1, sp, #12
   1944c:	6828      	ldr	r0, [r5, #0]
   1944e:	f00b fc49 	bl	24ce4 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   19452:	bb30      	cbnz	r0, 194a2 <read_group_cb+0x8a>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   19454:	6861      	ldr	r1, [r4, #4]
   19456:	6828      	ldr	r0, [r5, #0]
   19458:	f00b fc44 	bl	24ce4 <bt_uuid_cmp>
   1945c:	bb48      	cbnz	r0, 194b2 <read_group_cb+0x9a>
	if (data->rsp->len &&
   1945e:	68e3      	ldr	r3, [r4, #12]
   19460:	781a      	ldrb	r2, [r3, #0]
   19462:	b132      	cbz	r2, 19472 <read_group_cb+0x5a>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   19464:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
   19468:	68a1      	ldr	r1, [r4, #8]
   1946a:	8989      	ldrh	r1, [r1, #12]
   1946c:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   1946e:	4293      	cmp	r3, r2
   19470:	db24      	blt.n	194bc <read_group_cb+0xa4>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   19472:	68a0      	ldr	r0, [r4, #8]
	return net_buf_simple_add(&buf->b, len);
   19474:	2104      	movs	r1, #4
   19476:	3008      	adds	r0, #8
   19478:	f00e ff5b 	bl	28332 <net_buf_simple_add>
   1947c:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1947e:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   19480:	6923      	ldr	r3, [r4, #16]
   19482:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   19484:	9401      	str	r4, [sp, #4]
   19486:	4b10      	ldr	r3, [pc, #64]	; (194c8 <read_group_cb+0xb0>)
   19488:	9300      	str	r3, [sp, #0]
   1948a:	2300      	movs	r3, #0
   1948c:	68a2      	ldr	r2, [r4, #8]
   1948e:	4629      	mov	r1, r5
   19490:	4638      	mov	r0, r7
   19492:	f00c fe69 	bl	26168 <att_chan_read>
	if (read < 0) {
   19496:	2800      	cmp	r0, #0
   19498:	db12      	blt.n	194c0 <read_group_cb+0xa8>
	if (!data->group) {
   1949a:	6923      	ldr	r3, [r4, #16]
   1949c:	b193      	cbz	r3, 194c4 <read_group_cb+0xac>
	return BT_GATT_ITER_CONTINUE;
   1949e:	2001      	movs	r0, #1
   194a0:	e00a      	b.n	194b8 <read_group_cb+0xa0>
		if (data->group &&
   194a2:	6923      	ldr	r3, [r4, #16]
   194a4:	b11b      	cbz	r3, 194ae <read_group_cb+0x96>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
   194a6:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
   194a8:	42b2      	cmp	r2, r6
   194aa:	d200      	bcs.n	194ae <read_group_cb+0x96>
			data->group->end_handle = sys_cpu_to_le16(handle);
   194ac:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   194ae:	2001      	movs	r0, #1
   194b0:	e002      	b.n	194b8 <read_group_cb+0xa0>
		data->group = NULL;
   194b2:	2300      	movs	r3, #0
   194b4:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   194b6:	2001      	movs	r0, #1
}
   194b8:	b005      	add	sp, #20
   194ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ITER_STOP;
   194bc:	2000      	movs	r0, #0
   194be:	e7fb      	b.n	194b8 <read_group_cb+0xa0>
		return BT_GATT_ITER_STOP;
   194c0:	2000      	movs	r0, #0
   194c2:	e7f9      	b.n	194b8 <read_group_cb+0xa0>
		return BT_GATT_ITER_STOP;
   194c4:	2000      	movs	r0, #0
   194c6:	e7f7      	b.n	194b8 <read_group_cb+0xa0>
   194c8:	00025d03 	.word	0x00025d03

000194cc <read_type_cb>:
{
   194cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   194d0:	b083      	sub	sp, #12
   194d2:	4606      	mov	r6, r0
   194d4:	4688      	mov	r8, r1
   194d6:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   194d8:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   194da:	68bd      	ldr	r5, [r7, #8]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   194dc:	6851      	ldr	r1, [r2, #4]
   194de:	6800      	ldr	r0, [r0, #0]
   194e0:	f00b fc00 	bl	24ce4 <bt_uuid_cmp>
   194e4:	b120      	cbz	r0, 194f0 <read_type_cb+0x24>
		return BT_GATT_ITER_CONTINUE;
   194e6:	2501      	movs	r5, #1
}
   194e8:	4628      	mov	r0, r5
   194ea:	b003      	add	sp, #12
   194ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   194f0:	2215      	movs	r2, #21
   194f2:	4631      	mov	r1, r6
   194f4:	4628      	mov	r0, r5
   194f6:	f00d fc91 	bl	26e1c <bt_gatt_check_perm>
   194fa:	4605      	mov	r5, r0
   194fc:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   194fe:	b130      	cbz	r0, 1950e <read_type_cb+0x42>
		if (data->rsp->len) {
   19500:	68e3      	ldr	r3, [r4, #12]
   19502:	781b      	ldrb	r3, [r3, #0]
   19504:	b10b      	cbz	r3, 1950a <read_type_cb+0x3e>
			data->err = 0x00;
   19506:	2300      	movs	r3, #0
   19508:	7523      	strb	r3, [r4, #20]
		return BT_GATT_ITER_STOP;
   1950a:	2500      	movs	r5, #0
   1950c:	e7ec      	b.n	194e8 <read_type_cb+0x1c>
	data->err = 0x00;
   1950e:	f04f 0900 	mov.w	r9, #0
   19512:	f884 9014 	strb.w	r9, [r4, #20]
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   19516:	68a0      	ldr	r0, [r4, #8]
   19518:	f00e feeb 	bl	282f2 <net_buf_frag_last>
   1951c:	2102      	movs	r1, #2
   1951e:	3008      	adds	r0, #8
   19520:	f00e ff07 	bl	28332 <net_buf_simple_add>
   19524:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   19526:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1952a:	9401      	str	r4, [sp, #4]
   1952c:	4b11      	ldr	r3, [pc, #68]	; (19574 <read_type_cb+0xa8>)
   1952e:	9300      	str	r3, [sp, #0]
   19530:	464b      	mov	r3, r9
   19532:	68a2      	ldr	r2, [r4, #8]
   19534:	4631      	mov	r1, r6
   19536:	4638      	mov	r0, r7
   19538:	f00c fe16 	bl	26168 <att_chan_read>
	if (read < 0) {
   1953c:	2800      	cmp	r0, #0
   1953e:	db07      	blt.n	19550 <read_type_cb+0x84>
	if (!data->item) {
   19540:	6923      	ldr	r3, [r4, #16]
   19542:	2b00      	cmp	r3, #0
   19544:	d0d0      	beq.n	194e8 <read_type_cb+0x1c>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   19546:	f8b7 5086 	ldrh.w	r5, [r7, #134]	; 0x86
   1954a:	68a3      	ldr	r3, [r4, #8]
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
   1954c:	2200      	movs	r2, #0

	while (buf) {
   1954e:	e006      	b.n	1955e <read_type_cb+0x92>
		data->err = err_to_att(read);
   19550:	f00c fbbb 	bl	25cca <err_to_att>
   19554:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   19556:	e7c7      	b.n	194e8 <read_type_cb+0x1c>
		bytes += buf->len;
   19558:	8999      	ldrh	r1, [r3, #12]
   1955a:	440a      	add	r2, r1
		buf = buf->frags;
   1955c:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1955e:	2b00      	cmp	r3, #0
   19560:	d1fa      	bne.n	19558 <read_type_cb+0x8c>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   19562:	1aaa      	subs	r2, r5, r2
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   19564:	68e3      	ldr	r3, [r4, #12]
   19566:	781d      	ldrb	r5, [r3, #0]
   19568:	42aa      	cmp	r2, r5
   1956a:	bf94      	ite	ls
   1956c:	2500      	movls	r5, #0
   1956e:	2501      	movhi	r5, #1
   19570:	e7ba      	b.n	194e8 <read_type_cb+0x1c>
   19572:	bf00      	nop
   19574:	00025cdb 	.word	0x00025cdb

00019578 <find_type_cb>:
{
   19578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1957c:	b093      	sub	sp, #76	; 0x4c
   1957e:	4606      	mov	r6, r0
   19580:	460f      	mov	r7, r1
   19582:	4615      	mov	r5, r2
	struct bt_att_chan *chan = data->chan;
   19584:	f8d2 8000 	ldr.w	r8, [r2]
	struct bt_conn *conn = chan->chan.chan.conn;
   19588:	f8d8 9008 	ldr.w	r9, [r8, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1958c:	2300      	movs	r3, #0
   1958e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   19592:	f642 0301 	movw	r3, #10241	; 0x2801
   19596:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   1959a:	a910      	add	r1, sp, #64	; 0x40
   1959c:	6800      	ldr	r0, [r0, #0]
   1959e:	f00b fba1 	bl	24ce4 <bt_uuid_cmp>
   195a2:	b928      	cbnz	r0, 195b0 <find_type_cb+0x38>
	data->group = NULL;
   195a4:	2300      	movs	r3, #0
   195a6:	60ab      	str	r3, [r5, #8]
	return BT_GATT_ITER_CONTINUE;
   195a8:	2001      	movs	r0, #1
}
   195aa:	b013      	add	sp, #76	; 0x4c
   195ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   195b0:	2300      	movs	r3, #0
   195b2:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
   195b6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   195ba:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
   195be:	a911      	add	r1, sp, #68	; 0x44
   195c0:	6830      	ldr	r0, [r6, #0]
   195c2:	f00b fb8f 	bl	24ce4 <bt_uuid_cmp>
   195c6:	b928      	cbnz	r0, 195d4 <find_type_cb+0x5c>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   195c8:	f8b8 1086 	ldrh.w	r1, [r8, #134]	; 0x86
   195cc:	6868      	ldr	r0, [r5, #4]
   195ce:	4603      	mov	r3, r0
	size_t bytes = 0;
   195d0:	2400      	movs	r4, #0
	while (buf) {
   195d2:	e00a      	b.n	195ea <find_type_cb+0x72>
		if (data->group &&
   195d4:	68ab      	ldr	r3, [r5, #8]
   195d6:	b11b      	cbz	r3, 195e0 <find_type_cb+0x68>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
   195d8:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
   195da:	42ba      	cmp	r2, r7
   195dc:	d200      	bcs.n	195e0 <find_type_cb+0x68>
			data->group->end_handle = sys_cpu_to_le16(handle);
   195de:	805f      	strh	r7, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   195e0:	2001      	movs	r0, #1
   195e2:	e7e2      	b.n	195aa <find_type_cb+0x32>
		bytes += buf->len;
   195e4:	899a      	ldrh	r2, [r3, #12]
   195e6:	4414      	add	r4, r2
		buf = buf->frags;
   195e8:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   195ea:	2b00      	cmp	r3, #0
   195ec:	d1fa      	bne.n	195e4 <find_type_cb+0x6c>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   195ee:	1b0c      	subs	r4, r1, r4
   195f0:	2c03      	cmp	r4, #3
   195f2:	d801      	bhi.n	195f8 <find_type_cb+0x80>
		return BT_GATT_ITER_STOP;
   195f4:	2000      	movs	r0, #0
   195f6:	e7d8      	b.n	195aa <find_type_cb+0x32>
	frag = net_buf_frag_last(data->buf);
   195f8:	f00e fe7b 	bl	282f2 <net_buf_frag_last>
   195fc:	4604      	mov	r4, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   195fe:	f8b8 a086 	ldrh.w	sl, [r8, #134]	; 0x86
   19602:	686b      	ldr	r3, [r5, #4]
	size_t bytes = 0;
   19604:	2200      	movs	r2, #0
	while (buf) {
   19606:	b11b      	cbz	r3, 19610 <find_type_cb+0x98>
		bytes += buf->len;
   19608:	8999      	ldrh	r1, [r3, #12]
   1960a:	440a      	add	r2, r1
		buf = buf->frags;
   1960c:	681b      	ldr	r3, [r3, #0]
   1960e:	e7fa      	b.n	19606 <find_type_cb+0x8e>
   19610:	ebaa 0a02 	sub.w	sl, sl, r2
	return net_buf_simple_tailroom(&buf->b);
   19614:	f104 0b08 	add.w	fp, r4, #8
   19618:	4658      	mov	r0, fp
   1961a:	f00e fec6 	bl	283aa <net_buf_simple_tailroom>
   1961e:	4582      	cmp	sl, r0
   19620:	d22b      	bcs.n	1967a <find_type_cb+0x102>
   19622:	f8b8 0086 	ldrh.w	r0, [r8, #134]	; 0x86
   19626:	686b      	ldr	r3, [r5, #4]
	size_t bytes = 0;
   19628:	2200      	movs	r2, #0
	while (buf) {
   1962a:	e002      	b.n	19632 <find_type_cb+0xba>
		bytes += buf->len;
   1962c:	8999      	ldrh	r1, [r3, #12]
   1962e:	440a      	add	r2, r1
		buf = buf->frags;
   19630:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   19632:	2b00      	cmp	r3, #0
   19634:	d1fa      	bne.n	1962c <find_type_cb+0xb4>
   19636:	1a80      	subs	r0, r0, r2
	if (!len) {
   19638:	b318      	cbz	r0, 19682 <find_type_cb+0x10a>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1963a:	f8d6 8004 	ldr.w	r8, [r6, #4]
   1963e:	2300      	movs	r3, #0
   19640:	9300      	str	r3, [sp, #0]
   19642:	2310      	movs	r3, #16
   19644:	aa0c      	add	r2, sp, #48	; 0x30
   19646:	4631      	mov	r1, r6
   19648:	4648      	mov	r0, r9
   1964a:	47c0      	blx	r8
	if (read < 0) {
   1964c:	1e06      	subs	r6, r0, #0
   1964e:	dba9      	blt.n	195a4 <find_type_cb+0x2c>
	if (read != data->value_len) {
   19650:	7c2a      	ldrb	r2, [r5, #16]
   19652:	42b2      	cmp	r2, r6
   19654:	d049      	beq.n	196ea <find_type_cb+0x172>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   19656:	68e9      	ldr	r1, [r5, #12]
   19658:	a807      	add	r0, sp, #28
   1965a:	f00b fb61 	bl	24d20 <bt_uuid_create>
   1965e:	b300      	cbz	r0, 196a2 <find_type_cb+0x12a>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   19660:	b2f2      	uxtb	r2, r6
   19662:	a90c      	add	r1, sp, #48	; 0x30
   19664:	a802      	add	r0, sp, #8
   19666:	f00b fb5b 	bl	24d20 <bt_uuid_create>
   1966a:	b360      	cbz	r0, 196c6 <find_type_cb+0x14e>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1966c:	a902      	add	r1, sp, #8
   1966e:	a807      	add	r0, sp, #28
   19670:	f00b fb38 	bl	24ce4 <bt_uuid_cmp>
   19674:	2800      	cmp	r0, #0
   19676:	d040      	beq.n	196fa <find_type_cb+0x182>
   19678:	e794      	b.n	195a4 <find_type_cb+0x2c>
	return net_buf_simple_tailroom(&buf->b);
   1967a:	4658      	mov	r0, fp
   1967c:	f00e fe95 	bl	283aa <net_buf_simple_tailroom>
   19680:	e7da      	b.n	19638 <find_type_cb+0xc0>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   19682:	686b      	ldr	r3, [r5, #4]
   19684:	7998      	ldrb	r0, [r3, #6]
   19686:	f004 fb53 	bl	1dd30 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1968a:	2200      	movs	r2, #0
   1968c:	2300      	movs	r3, #0
   1968e:	f00e fdd3 	bl	28238 <net_buf_alloc_fixed>
		if (!frag) {
   19692:	4604      	mov	r4, r0
   19694:	2800      	cmp	r0, #0
   19696:	d088      	beq.n	195aa <find_type_cb+0x32>
		net_buf_frag_add(data->buf, frag);
   19698:	4601      	mov	r1, r0
   1969a:	6868      	ldr	r0, [r5, #4]
   1969c:	f00e fe3a 	bl	28314 <net_buf_frag_add>
   196a0:	e7cb      	b.n	1963a <find_type_cb+0xc2>
   196a2:	4b1c      	ldr	r3, [pc, #112]	; (19714 <find_type_cb+0x19c>)
   196a4:	4a1c      	ldr	r2, [pc, #112]	; (19718 <find_type_cb+0x1a0>)
   196a6:	1a9b      	subs	r3, r3, r2
   196a8:	08db      	lsrs	r3, r3, #3
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   196aa:	f04f 0200 	mov.w	r2, #0
   196ae:	2102      	movs	r1, #2
   196b0:	f361 0202 	bfi	r2, r1, #0, #3
   196b4:	f36f 02c5 	bfc	r2, #3, #3
   196b8:	f363 128f 	bfi	r2, r3, #6, #10
   196bc:	7c29      	ldrb	r1, [r5, #16]
   196be:	4817      	ldr	r0, [pc, #92]	; (1971c <find_type_cb+0x1a4>)
   196c0:	f7f7 fd26 	bl	11110 <log_1>
			goto skip;
   196c4:	e76e      	b.n	195a4 <find_type_cb+0x2c>
   196c6:	4b13      	ldr	r3, [pc, #76]	; (19714 <find_type_cb+0x19c>)
   196c8:	4a13      	ldr	r2, [pc, #76]	; (19718 <find_type_cb+0x1a0>)
   196ca:	1a9b      	subs	r3, r3, r2
   196cc:	08db      	lsrs	r3, r3, #3
			BT_WARN("Unable to create UUID: size %d", read);
   196ce:	f04f 0200 	mov.w	r2, #0
   196d2:	2102      	movs	r1, #2
   196d4:	f361 0202 	bfi	r2, r1, #0, #3
   196d8:	f36f 02c5 	bfc	r2, #3, #3
   196dc:	f363 128f 	bfi	r2, r3, #6, #10
   196e0:	4631      	mov	r1, r6
   196e2:	480f      	ldr	r0, [pc, #60]	; (19720 <find_type_cb+0x1a8>)
   196e4:	f7f7 fd14 	bl	11110 <log_1>
			goto skip;
   196e8:	e75c      	b.n	195a4 <find_type_cb+0x2c>
	} else if (memcmp(data->value, uuid, read)) {
   196ea:	4632      	mov	r2, r6
   196ec:	a90c      	add	r1, sp, #48	; 0x30
   196ee:	68e8      	ldr	r0, [r5, #12]
   196f0:	f00b f9a5 	bl	24a3e <memcmp>
   196f4:	2800      	cmp	r0, #0
   196f6:	f47f af55 	bne.w	195a4 <find_type_cb+0x2c>
	data->err = 0x00;
   196fa:	2300      	movs	r3, #0
   196fc:	746b      	strb	r3, [r5, #17]
	return net_buf_simple_add(&buf->b, len);
   196fe:	2104      	movs	r1, #4
   19700:	f104 0008 	add.w	r0, r4, #8
   19704:	f00e fe15 	bl	28332 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   19708:	60a8      	str	r0, [r5, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1970a:	8007      	strh	r7, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1970c:	68ab      	ldr	r3, [r5, #8]
   1970e:	805f      	strh	r7, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   19710:	2001      	movs	r0, #1
   19712:	e74a      	b.n	195aa <find_type_cb+0x32>
   19714:	00029edc 	.word	0x00029edc
   19718:	00029ecc 	.word	0x00029ecc
   1971c:	0002c314 	.word	0x0002c314
   19720:	0002c334 	.word	0x0002c334

00019724 <bt_att_connected>:
{
   19724:	b538      	push	{r3, r4, r5, lr}
   19726:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = att_get_fixed_chan(chan->conn);
   19728:	4605      	mov	r5, r0
   1972a:	f855 0908 	ldr.w	r0, [r5], #-8
   1972e:	f00c fe46 	bl	263be <att_get_fixed_chan>
	att_chan_attach(att, att_chan);
   19732:	4629      	mov	r1, r5
   19734:	6800      	ldr	r0, [r0, #0]
   19736:	f00c fb7c 	bl	25e32 <att_chan_attach>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1973a:	f3bf 8f5b 	dmb	ish
   1973e:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
   19742:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   19746:	f013 0f08 	tst.w	r3, #8
   1974a:	d104      	bne.n	19756 <bt_att_connected+0x32>
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1974c:	2317      	movs	r3, #23
   1974e:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   19752:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   19756:	4903      	ldr	r1, [pc, #12]	; (19764 <bt_att_connected+0x40>)
   19758:	f504 7084 	add.w	r0, r4, #264	; 0x108
   1975c:	f00f fea3 	bl	294a6 <k_work_init_delayable>
}
   19760:	bd38      	pop	{r3, r4, r5, pc}
   19762:	bf00      	nop
   19764:	0001a095 	.word	0x0001a095

00019768 <bt_att_chan_create_pdu>:
{
   19768:	b538      	push	{r3, r4, r5, lr}
   1976a:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1976c:	3201      	adds	r2, #1
   1976e:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
   19772:	428a      	cmp	r2, r1
   19774:	d810      	bhi.n	19798 <bt_att_chan_create_pdu+0x30>
	switch (att_op_get_type(op)) {
   19776:	4628      	mov	r0, r5
   19778:	f00c fada 	bl	25d30 <att_op_get_type>
   1977c:	2802      	cmp	r0, #2
   1977e:	d01d      	beq.n	197bc <bt_att_chan_create_pdu+0x54>
   19780:	2804      	cmp	r0, #4
   19782:	d01b      	beq.n	197bc <bt_att_chan_create_pdu+0x54>
		buf = bt_l2cap_create_pdu(NULL, 0);
   19784:	f04f 32ff 	mov.w	r2, #4294967295
   19788:	f04f 33ff 	mov.w	r3, #4294967295
   1978c:	2100      	movs	r1, #0
   1978e:	4608      	mov	r0, r1
   19790:	f00c f9ea 	bl	25b68 <bt_l2cap_create_pdu_timeout>
   19794:	4604      	mov	r4, r0
   19796:	e019      	b.n	197cc <bt_att_chan_create_pdu+0x64>
   19798:	481a      	ldr	r0, [pc, #104]	; (19804 <bt_att_chan_create_pdu+0x9c>)
   1979a:	4b1b      	ldr	r3, [pc, #108]	; (19808 <bt_att_chan_create_pdu+0xa0>)
   1979c:	1ac0      	subs	r0, r0, r3
   1979e:	08c0      	lsrs	r0, r0, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   197a0:	f04f 0300 	mov.w	r3, #0
   197a4:	2402      	movs	r4, #2
   197a6:	f364 0302 	bfi	r3, r4, #0, #3
   197aa:	f36f 03c5 	bfc	r3, #3, #3
   197ae:	f360 138f 	bfi	r3, r0, #6, #10
   197b2:	4816      	ldr	r0, [pc, #88]	; (1980c <bt_att_chan_create_pdu+0xa4>)
   197b4:	f7f7 fce2 	bl	1117c <log_2>
		return NULL;
   197b8:	2400      	movs	r4, #0
   197ba:	e00e      	b.n	197da <bt_att_chan_create_pdu+0x72>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   197bc:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   197c0:	2300      	movs	r3, #0
   197c2:	2100      	movs	r1, #0
   197c4:	4608      	mov	r0, r1
   197c6:	f00c f9cf 	bl	25b68 <bt_l2cap_create_pdu_timeout>
   197ca:	4604      	mov	r4, r0
	if (!buf) {
   197cc:	b13c      	cbz	r4, 197de <bt_att_chan_create_pdu+0x76>
   197ce:	2101      	movs	r1, #1
   197d0:	f104 0008 	add.w	r0, r4, #8
   197d4:	f00e fdad 	bl	28332 <net_buf_simple_add>
	hdr->code = op;
   197d8:	7005      	strb	r5, [r0, #0]
}
   197da:	4620      	mov	r0, r4
   197dc:	bd38      	pop	{r3, r4, r5, pc}
   197de:	4b09      	ldr	r3, [pc, #36]	; (19804 <bt_att_chan_create_pdu+0x9c>)
   197e0:	4a09      	ldr	r2, [pc, #36]	; (19808 <bt_att_chan_create_pdu+0xa0>)
   197e2:	1a9b      	subs	r3, r3, r2
   197e4:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   197e6:	f04f 0200 	mov.w	r2, #0
   197ea:	2101      	movs	r1, #1
   197ec:	f361 0202 	bfi	r2, r1, #0, #3
   197f0:	f36f 02c5 	bfc	r2, #3, #3
   197f4:	f363 128f 	bfi	r2, r3, #6, #10
   197f8:	4629      	mov	r1, r5
   197fa:	4805      	ldr	r0, [pc, #20]	; (19810 <bt_att_chan_create_pdu+0xa8>)
   197fc:	f7f7 fc88 	bl	11110 <log_1>
		return NULL;
   19800:	e7eb      	b.n	197da <bt_att_chan_create_pdu+0x72>
   19802:	bf00      	nop
   19804:	00029edc 	.word	0x00029edc
   19808:	00029ecc 	.word	0x00029ecc
   1980c:	0002c354 	.word	0x0002c354
   19810:	0002c110 	.word	0x0002c110

00019814 <send_err_rsp>:
	if (!req) {
   19814:	b901      	cbnz	r1, 19818 <send_err_rsp+0x4>
   19816:	4770      	bx	lr
{
   19818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1981c:	4606      	mov	r6, r0
   1981e:	4615      	mov	r5, r2
   19820:	461c      	mov	r4, r3
   19822:	460f      	mov	r7, r1
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   19824:	2204      	movs	r2, #4
   19826:	2101      	movs	r1, #1
   19828:	f7ff ff9e 	bl	19768 <bt_att_chan_create_pdu>
	if (!buf) {
   1982c:	4680      	mov	r8, r0
   1982e:	b160      	cbz	r0, 1984a <send_err_rsp+0x36>
   19830:	2104      	movs	r1, #4
   19832:	3008      	adds	r0, #8
   19834:	f00e fd7d 	bl	28332 <net_buf_simple_add>
	rsp->request = req;
   19838:	7007      	strb	r7, [r0, #0]
	rsp->handle = sys_cpu_to_le16(handle);
   1983a:	f8a0 5001 	strh.w	r5, [r0, #1]
	rsp->error = err;
   1983e:	70c4      	strb	r4, [r0, #3]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   19840:	4a03      	ldr	r2, [pc, #12]	; (19850 <send_err_rsp+0x3c>)
   19842:	4641      	mov	r1, r8
   19844:	4630      	mov	r0, r6
   19846:	f00c fc82 	bl	2614e <bt_att_chan_send_rsp>
}
   1984a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1984e:	bf00      	nop
   19850:	00025fab 	.word	0x00025fab

00019854 <bt_att_recv>:
{
   19854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buf->len < sizeof(*hdr)) {
   19858:	898b      	ldrh	r3, [r1, #12]
   1985a:	b1bb      	cbz	r3, 1988c <bt_att_recv+0x38>
   1985c:	4607      	mov	r7, r0
   1985e:	460e      	mov	r6, r1
   19860:	f1a0 0808 	sub.w	r8, r0, #8
	return net_buf_simple_pull_mem(&buf->b, len);
   19864:	2101      	movs	r1, #1
   19866:	f106 0008 	add.w	r0, r6, #8
   1986a:	f00e fd8a 	bl	28382 <net_buf_simple_pull_mem>
   1986e:	4605      	mov	r5, r0
	if (!att_chan->att) {
   19870:	f857 3c08 	ldr.w	r3, [r7, #-8]
   19874:	b1d3      	cbz	r3, 198ac <bt_att_recv+0x58>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   19876:	2300      	movs	r3, #0
   19878:	2b0c      	cmp	r3, #12
   1987a:	d81e      	bhi.n	198ba <bt_att_recv+0x66>
		if (hdr->code == handlers[i].op) {
   1987c:	782c      	ldrb	r4, [r5, #0]
   1987e:	4a57      	ldr	r2, [pc, #348]	; (199dc <bt_att_recv+0x188>)
   19880:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   19884:	4294      	cmp	r4, r2
   19886:	d014      	beq.n	198b2 <bt_att_recv+0x5e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   19888:	3301      	adds	r3, #1
   1988a:	e7f5      	b.n	19878 <bt_att_recv+0x24>
   1988c:	4b54      	ldr	r3, [pc, #336]	; (199e0 <bt_att_recv+0x18c>)
   1988e:	4a55      	ldr	r2, [pc, #340]	; (199e4 <bt_att_recv+0x190>)
   19890:	1a9b      	subs	r3, r3, r2
   19892:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small ATT PDU received");
   19894:	f04f 0100 	mov.w	r1, #0
   19898:	2201      	movs	r2, #1
   1989a:	f362 0102 	bfi	r1, r2, #0, #3
   1989e:	f36f 01c5 	bfc	r1, #3, #3
   198a2:	f363 118f 	bfi	r1, r3, #6, #10
   198a6:	4850      	ldr	r0, [pc, #320]	; (199e8 <bt_att_recv+0x194>)
   198a8:	f7f7 fce8 	bl	1127c <log_0>
}
   198ac:	2000      	movs	r0, #0
   198ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			handler = &handlers[i];
   198b2:	4c4a      	ldr	r4, [pc, #296]	; (199dc <bt_att_recv+0x188>)
   198b4:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
			break;
   198b8:	e000      	b.n	198bc <bt_att_recv+0x68>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   198ba:	2400      	movs	r4, #0
	if (!handler) {
   198bc:	b1cc      	cbz	r4, 198f2 <bt_att_recv+0x9e>
		if (handler->type == ATT_REQUEST &&
   198be:	78a3      	ldrb	r3, [r4, #2]
   198c0:	2b01      	cmp	r3, #1
   198c2:	d034      	beq.n	1992e <bt_att_recv+0xda>
		} else if (handler->type == ATT_INDICATION &&
   198c4:	78a3      	ldrb	r3, [r4, #2]
   198c6:	2b05      	cmp	r3, #5
   198c8:	d053      	beq.n	19972 <bt_att_recv+0x11e>
	if (buf->len < handler->expect_len) {
   198ca:	89b1      	ldrh	r1, [r6, #12]
   198cc:	7863      	ldrb	r3, [r4, #1]
   198ce:	4299      	cmp	r1, r3
   198d0:	d370      	bcc.n	199b4 <bt_att_recv+0x160>
		err = handler->func(att_chan, buf);
   198d2:	6863      	ldr	r3, [r4, #4]
   198d4:	4631      	mov	r1, r6
   198d6:	4640      	mov	r0, r8
   198d8:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   198da:	78a3      	ldrb	r3, [r4, #2]
   198dc:	2b01      	cmp	r3, #1
   198de:	d1e5      	bne.n	198ac <bt_att_recv+0x58>
   198e0:	2800      	cmp	r0, #0
   198e2:	d0e3      	beq.n	198ac <bt_att_recv+0x58>
		send_err_rsp(att_chan, hdr->code, 0, err);
   198e4:	4603      	mov	r3, r0
   198e6:	2200      	movs	r2, #0
   198e8:	7829      	ldrb	r1, [r5, #0]
   198ea:	4640      	mov	r0, r8
   198ec:	f7ff ff92 	bl	19814 <send_err_rsp>
   198f0:	e7dc      	b.n	198ac <bt_att_recv+0x58>
   198f2:	4b3b      	ldr	r3, [pc, #236]	; (199e0 <bt_att_recv+0x18c>)
   198f4:	4a3b      	ldr	r2, [pc, #236]	; (199e4 <bt_att_recv+0x190>)
   198f6:	1a9b      	subs	r3, r3, r2
   198f8:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   198fa:	f04f 0200 	mov.w	r2, #0
   198fe:	2102      	movs	r1, #2
   19900:	f361 0202 	bfi	r2, r1, #0, #3
   19904:	f36f 02c5 	bfc	r2, #3, #3
   19908:	f363 128f 	bfi	r2, r3, #6, #10
   1990c:	7829      	ldrb	r1, [r5, #0]
   1990e:	4837      	ldr	r0, [pc, #220]	; (199ec <bt_att_recv+0x198>)
   19910:	f7f7 fbfe 	bl	11110 <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
   19914:	782c      	ldrb	r4, [r5, #0]
   19916:	4620      	mov	r0, r4
   19918:	f00c fa0a 	bl	25d30 <att_op_get_type>
   1991c:	2800      	cmp	r0, #0
   1991e:	d0c5      	beq.n	198ac <bt_att_recv+0x58>
			send_err_rsp(att_chan, hdr->code, 0,
   19920:	2306      	movs	r3, #6
   19922:	2200      	movs	r2, #0
   19924:	4621      	mov	r1, r4
   19926:	4640      	mov	r0, r8
   19928:	f7ff ff74 	bl	19814 <send_err_rsp>
		return 0;
   1992c:	e7be      	b.n	198ac <bt_att_recv+0x58>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   1992e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19932:	f3bf 8f5b 	dmb	ish
   19936:	e853 2f00 	ldrex	r2, [r3]
   1993a:	f042 0101 	orr.w	r1, r2, #1
   1993e:	e843 1000 	strex	r0, r1, [r3]
   19942:	2800      	cmp	r0, #0
   19944:	d1f7      	bne.n	19936 <bt_att_recv+0xe2>
   19946:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
   1994a:	f012 0f01 	tst.w	r2, #1
   1994e:	d0b9      	beq.n	198c4 <bt_att_recv+0x70>
   19950:	4b23      	ldr	r3, [pc, #140]	; (199e0 <bt_att_recv+0x18c>)
   19952:	4a24      	ldr	r2, [pc, #144]	; (199e4 <bt_att_recv+0x190>)
   19954:	1a9b      	subs	r3, r3, r2
   19956:	08db      	lsrs	r3, r3, #3
			BT_WARN("Ignoring unexpected request");
   19958:	f04f 0100 	mov.w	r1, #0
   1995c:	2202      	movs	r2, #2
   1995e:	f362 0102 	bfi	r1, r2, #0, #3
   19962:	f36f 01c5 	bfc	r1, #3, #3
   19966:	f363 118f 	bfi	r1, r3, #6, #10
   1996a:	4821      	ldr	r0, [pc, #132]	; (199f0 <bt_att_recv+0x19c>)
   1996c:	f7f7 fc86 	bl	1127c <log_0>
			return 0;
   19970:	e79c      	b.n	198ac <bt_att_recv+0x58>
			   atomic_test_and_set_bit(att_chan->flags,
   19972:	37e8      	adds	r7, #232	; 0xe8
   19974:	f3bf 8f5b 	dmb	ish
   19978:	e857 3f00 	ldrex	r3, [r7]
   1997c:	f043 0202 	orr.w	r2, r3, #2
   19980:	e847 2100 	strex	r1, r2, [r7]
   19984:	2900      	cmp	r1, #0
   19986:	d1f7      	bne.n	19978 <bt_att_recv+0x124>
   19988:	f3bf 8f5b 	dmb	ish
		} else if (handler->type == ATT_INDICATION &&
   1998c:	f013 0f02 	tst.w	r3, #2
   19990:	d09b      	beq.n	198ca <bt_att_recv+0x76>
   19992:	4b13      	ldr	r3, [pc, #76]	; (199e0 <bt_att_recv+0x18c>)
   19994:	4a13      	ldr	r2, [pc, #76]	; (199e4 <bt_att_recv+0x190>)
   19996:	1a9b      	subs	r3, r3, r2
   19998:	08db      	lsrs	r3, r3, #3
			BT_WARN("Ignoring unexpected indication");
   1999a:	f04f 0100 	mov.w	r1, #0
   1999e:	2202      	movs	r2, #2
   199a0:	f362 0102 	bfi	r1, r2, #0, #3
   199a4:	f36f 01c5 	bfc	r1, #3, #3
   199a8:	f363 118f 	bfi	r1, r3, #6, #10
   199ac:	4811      	ldr	r0, [pc, #68]	; (199f4 <bt_att_recv+0x1a0>)
   199ae:	f7f7 fc65 	bl	1127c <log_0>
			return 0;
   199b2:	e77b      	b.n	198ac <bt_att_recv+0x58>
   199b4:	4a0a      	ldr	r2, [pc, #40]	; (199e0 <bt_att_recv+0x18c>)
   199b6:	4b0b      	ldr	r3, [pc, #44]	; (199e4 <bt_att_recv+0x190>)
   199b8:	1ad2      	subs	r2, r2, r3
   199ba:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   199bc:	f04f 0300 	mov.w	r3, #0
   199c0:	2001      	movs	r0, #1
   199c2:	f360 0302 	bfi	r3, r0, #0, #3
   199c6:	f36f 03c5 	bfc	r3, #3, #3
   199ca:	f362 138f 	bfi	r3, r2, #6, #10
   199ce:	782a      	ldrb	r2, [r5, #0]
   199d0:	4809      	ldr	r0, [pc, #36]	; (199f8 <bt_att_recv+0x1a4>)
   199d2:	f7f7 fbd3 	bl	1117c <log_2>
		err = BT_ATT_ERR_INVALID_PDU;
   199d6:	2004      	movs	r0, #4
   199d8:	e77f      	b.n	198da <bt_att_recv+0x86>
   199da:	bf00      	nop
   199dc:	0002c458 	.word	0x0002c458
   199e0:	00029edc 	.word	0x00029edc
   199e4:	00029ecc 	.word	0x00029ecc
   199e8:	0002c37c 	.word	0x0002c37c
   199ec:	0002c398 	.word	0x0002c398
   199f0:	0002c3b4 	.word	0x0002c3b4
   199f4:	0002c3d0 	.word	0x0002c3d0
   199f8:	0002c3f0 	.word	0x0002c3f0

000199fc <att_write_rsp>:
{
   199fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19a00:	b08a      	sub	sp, #40	; 0x28
   19a02:	4604      	mov	r4, r0
   19a04:	4617      	mov	r7, r2
   19a06:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   19a08:	6803      	ldr	r3, [r0, #0]
   19a0a:	4688      	mov	r8, r1
   19a0c:	3900      	subs	r1, #0
   19a0e:	bf18      	it	ne
   19a10:	2101      	movne	r1, #1
   19a12:	6818      	ldr	r0, [r3, #0]
   19a14:	f00d fa33 	bl	26e7e <bt_gatt_change_aware>
   19a18:	2800      	cmp	r0, #0
   19a1a:	d04f      	beq.n	19abc <att_write_rsp+0xc0>
	if (!handle) {
   19a1c:	b925      	cbnz	r5, 19a28 <att_write_rsp+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   19a1e:	2601      	movs	r6, #1
}
   19a20:	4630      	mov	r0, r6
   19a22:	b00a      	add	sp, #40	; 0x28
   19a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(&data, 0, sizeof(data));
   19a28:	2218      	movs	r2, #24
   19a2a:	2100      	movs	r1, #0
   19a2c:	a804      	add	r0, sp, #16
   19a2e:	f00b f841 	bl	24ab4 <memset>
	if (rsp) {
   19a32:	b13f      	cbz	r7, 19a44 <att_write_rsp+0x48>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   19a34:	2200      	movs	r2, #0
   19a36:	4639      	mov	r1, r7
   19a38:	4620      	mov	r0, r4
   19a3a:	f7ff fe95 	bl	19768 <bt_att_chan_create_pdu>
   19a3e:	9005      	str	r0, [sp, #20]
		if (!data.buf) {
   19a40:	2800      	cmp	r0, #0
   19a42:	d03d      	beq.n	19ac0 <att_write_rsp+0xc4>
	data.conn = chan->att->conn;
   19a44:	6823      	ldr	r3, [r4, #0]
   19a46:	681b      	ldr	r3, [r3, #0]
   19a48:	9304      	str	r3, [sp, #16]
	data.req = req;
   19a4a:	f88d 8018 	strb.w	r8, [sp, #24]
	data.offset = offset;
   19a4e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   19a52:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	data.value = value;
   19a56:	9b11      	ldr	r3, [sp, #68]	; 0x44
   19a58:	9307      	str	r3, [sp, #28]
	data.len = len;
   19a5a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   19a5e:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   19a62:	2301      	movs	r3, #1
   19a64:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   19a68:	ab04      	add	r3, sp, #16
   19a6a:	9302      	str	r3, [sp, #8]
   19a6c:	4b15      	ldr	r3, [pc, #84]	; (19ac4 <att_write_rsp+0xc8>)
   19a6e:	9301      	str	r3, [sp, #4]
   19a70:	2200      	movs	r2, #0
   19a72:	9200      	str	r2, [sp, #0]
   19a74:	4613      	mov	r3, r2
   19a76:	4629      	mov	r1, r5
   19a78:	4628      	mov	r0, r5
   19a7a:	f001 f981 	bl	1ad80 <bt_gatt_foreach_attr_type>
	if (data.err) {
   19a7e:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   19a82:	b93e      	cbnz	r6, 19a94 <att_write_rsp+0x98>
	if (data.buf) {
   19a84:	9905      	ldr	r1, [sp, #20]
   19a86:	2900      	cmp	r1, #0
   19a88:	d0ca      	beq.n	19a20 <att_write_rsp+0x24>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   19a8a:	4a0f      	ldr	r2, [pc, #60]	; (19ac8 <att_write_rsp+0xcc>)
   19a8c:	4620      	mov	r0, r4
   19a8e:	f00c fb5e 	bl	2614e <bt_att_chan_send_rsp>
   19a92:	e7c5      	b.n	19a20 <att_write_rsp+0x24>
		if (rsp) {
   19a94:	b927      	cbnz	r7, 19aa0 <att_write_rsp+0xa4>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   19a96:	f1b8 0f18 	cmp.w	r8, #24
   19a9a:	d00c      	beq.n	19ab6 <att_write_rsp+0xba>
   19a9c:	2600      	movs	r6, #0
   19a9e:	e7bf      	b.n	19a20 <att_write_rsp+0x24>
			net_buf_unref(data.buf);
   19aa0:	9805      	ldr	r0, [sp, #20]
   19aa2:	f00e fbfc 	bl	2829e <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   19aa6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   19aaa:	462a      	mov	r2, r5
   19aac:	4641      	mov	r1, r8
   19aae:	4620      	mov	r0, r4
   19ab0:	f7ff feb0 	bl	19814 <send_err_rsp>
   19ab4:	e7ef      	b.n	19a96 <att_write_rsp+0x9a>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   19ab6:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   19aba:	e7b1      	b.n	19a20 <att_write_rsp+0x24>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   19abc:	2612      	movs	r6, #18
   19abe:	e7af      	b.n	19a20 <att_write_rsp+0x24>
			return BT_ATT_ERR_UNLIKELY;
   19ac0:	260e      	movs	r6, #14
   19ac2:	e7ad      	b.n	19a20 <att_write_rsp+0x24>
   19ac4:	000260f9 	.word	0x000260f9
   19ac8:	00025fab 	.word	0x00025fab

00019acc <bt_att_create_pdu>:
{
   19acc:	b570      	push	{r4, r5, r6, lr}
   19ace:	460e      	mov	r6, r1
   19ad0:	4615      	mov	r5, r2
	att = att_get(conn);
   19ad2:	f7ff fb35 	bl	19140 <att_get>
	if (!att) {
   19ad6:	4604      	mov	r4, r0
   19ad8:	b340      	cbz	r0, 19b2c <bt_att_create_pdu+0x60>
	return list->head;
   19ada:	6a44      	ldr	r4, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19adc:	b344      	cbz	r4, 19b30 <bt_att_create_pdu+0x64>
   19ade:	f5b4 74a2 	subs.w	r4, r4, #324	; 0x144
   19ae2:	d027      	beq.n	19b34 <bt_att_create_pdu+0x68>
Z_GENLIST_PEEK_NEXT(slist, snode)
   19ae4:	f514 70a2 	adds.w	r0, r4, #324	; 0x144
   19ae8:	d008      	beq.n	19afc <bt_att_create_pdu+0x30>
	return node->next;
   19aea:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
   19aee:	b128      	cbz	r0, 19afc <bt_att_create_pdu+0x30>
   19af0:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   19af4:	e002      	b.n	19afc <bt_att_create_pdu+0x30>
   19af6:	4603      	mov	r3, r0
   19af8:	4604      	mov	r4, r0
   19afa:	4618      	mov	r0, r3
   19afc:	b1e4      	cbz	r4, 19b38 <bt_att_create_pdu+0x6c>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   19afe:	1c6b      	adds	r3, r5, #1
   19b00:	f8b4 2086 	ldrh.w	r2, [r4, #134]	; 0x86
   19b04:	4293      	cmp	r3, r2
   19b06:	d90b      	bls.n	19b20 <bt_att_create_pdu+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19b08:	2800      	cmp	r0, #0
   19b0a:	d0f4      	beq.n	19af6 <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   19b0c:	f510 73a2 	adds.w	r3, r0, #324	; 0x144
   19b10:	d0f2      	beq.n	19af8 <bt_att_create_pdu+0x2c>
	return node->next;
   19b12:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   19b16:	2b00      	cmp	r3, #0
   19b18:	d0ee      	beq.n	19af8 <bt_att_create_pdu+0x2c>
   19b1a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   19b1e:	e7eb      	b.n	19af8 <bt_att_create_pdu+0x2c>
		return bt_att_chan_create_pdu(chan, op, len);
   19b20:	462a      	mov	r2, r5
   19b22:	4631      	mov	r1, r6
   19b24:	4620      	mov	r0, r4
   19b26:	f7ff fe1f 	bl	19768 <bt_att_chan_create_pdu>
   19b2a:	4604      	mov	r4, r0
}
   19b2c:	4620      	mov	r0, r4
   19b2e:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19b30:	4620      	mov	r0, r4
   19b32:	e7e3      	b.n	19afc <bt_att_create_pdu+0x30>
   19b34:	4620      	mov	r0, r4
   19b36:	e7e1      	b.n	19afc <bt_att_create_pdu+0x30>
   19b38:	4b08      	ldr	r3, [pc, #32]	; (19b5c <bt_att_create_pdu+0x90>)
   19b3a:	4a09      	ldr	r2, [pc, #36]	; (19b60 <bt_att_create_pdu+0x94>)
   19b3c:	1a9b      	subs	r3, r3, r2
   19b3e:	08db      	lsrs	r3, r3, #3
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   19b40:	f04f 0200 	mov.w	r2, #0
   19b44:	2102      	movs	r1, #2
   19b46:	f361 0202 	bfi	r2, r1, #0, #3
   19b4a:	f36f 02c5 	bfc	r2, #3, #3
   19b4e:	f363 128f 	bfi	r2, r3, #6, #10
   19b52:	1c69      	adds	r1, r5, #1
   19b54:	4803      	ldr	r0, [pc, #12]	; (19b64 <bt_att_create_pdu+0x98>)
   19b56:	f7f7 fadb 	bl	11110 <log_1>
	return NULL;
   19b5a:	e7e7      	b.n	19b2c <bt_att_create_pdu+0x60>
   19b5c:	00029edc 	.word	0x00029edc
   19b60:	00029ecc 	.word	0x00029ecc
   19b64:	0002c410 	.word	0x0002c410

00019b68 <att_read_group_rsp>:
{
   19b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19b6c:	b08a      	sub	sp, #40	; 0x28
   19b6e:	4604      	mov	r4, r0
   19b70:	460f      	mov	r7, r1
   19b72:	4615      	mov	r5, r2
   19b74:	461e      	mov	r6, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   19b76:	f8d0 8008 	ldr.w	r8, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   19b7a:	2214      	movs	r2, #20
   19b7c:	2100      	movs	r1, #0
   19b7e:	eb0d 0002 	add.w	r0, sp, r2
   19b82:	f00a ff97 	bl	24ab4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   19b86:	2201      	movs	r2, #1
   19b88:	2111      	movs	r1, #17
   19b8a:	4640      	mov	r0, r8
   19b8c:	f7ff ff9e 	bl	19acc <bt_att_create_pdu>
   19b90:	9007      	str	r0, [sp, #28]
	if (!data.buf) {
   19b92:	b350      	cbz	r0, 19bea <att_read_group_rsp+0x82>
	data.chan = chan;
   19b94:	9405      	str	r4, [sp, #20]
	data.uuid = uuid;
   19b96:	9706      	str	r7, [sp, #24]
	return net_buf_simple_add(&buf->b, len);
   19b98:	2101      	movs	r1, #1
   19b9a:	3008      	adds	r0, #8
   19b9c:	f00e fbc9 	bl	28332 <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   19ba0:	9008      	str	r0, [sp, #32]
	data.rsp->len = 0U;
   19ba2:	2200      	movs	r2, #0
   19ba4:	7002      	strb	r2, [r0, #0]
	data.group = NULL;
   19ba6:	9209      	str	r2, [sp, #36]	; 0x24
   19ba8:	ab05      	add	r3, sp, #20
   19baa:	9302      	str	r3, [sp, #8]
   19bac:	4b10      	ldr	r3, [pc, #64]	; (19bf0 <att_read_group_rsp+0x88>)
   19bae:	9301      	str	r3, [sp, #4]
   19bb0:	9200      	str	r2, [sp, #0]
   19bb2:	4613      	mov	r3, r2
   19bb4:	4631      	mov	r1, r6
   19bb6:	4628      	mov	r0, r5
   19bb8:	f001 f8e2 	bl	1ad80 <bt_gatt_foreach_attr_type>
	if (!data.rsp->len) {
   19bbc:	9b08      	ldr	r3, [sp, #32]
   19bbe:	781e      	ldrb	r6, [r3, #0]
   19bc0:	b14e      	cbz	r6, 19bd6 <att_read_group_rsp+0x6e>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   19bc2:	4a0c      	ldr	r2, [pc, #48]	; (19bf4 <att_read_group_rsp+0x8c>)
   19bc4:	9907      	ldr	r1, [sp, #28]
   19bc6:	4620      	mov	r0, r4
   19bc8:	f00c fac1 	bl	2614e <bt_att_chan_send_rsp>
	return 0;
   19bcc:	2600      	movs	r6, #0
}
   19bce:	4630      	mov	r0, r6
   19bd0:	b00a      	add	sp, #40	; 0x28
   19bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(data.buf);
   19bd6:	9807      	ldr	r0, [sp, #28]
   19bd8:	f00e fb61 	bl	2829e <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   19bdc:	230a      	movs	r3, #10
   19bde:	462a      	mov	r2, r5
   19be0:	2110      	movs	r1, #16
   19be2:	4620      	mov	r0, r4
   19be4:	f7ff fe16 	bl	19814 <send_err_rsp>
		return 0;
   19be8:	e7f1      	b.n	19bce <att_read_group_rsp+0x66>
		return BT_ATT_ERR_UNLIKELY;
   19bea:	260e      	movs	r6, #14
   19bec:	e7ef      	b.n	19bce <att_read_group_rsp+0x66>
   19bee:	bf00      	nop
   19bf0:	00019419 	.word	0x00019419
   19bf4:	00025fab 	.word	0x00025fab

00019bf8 <att_read_mult_req>:
{
   19bf8:	b570      	push	{r4, r5, r6, lr}
   19bfa:	b088      	sub	sp, #32
   19bfc:	4606      	mov	r6, r0
   19bfe:	460d      	mov	r5, r1
	struct bt_conn *conn = chan->chan.chan.conn;
   19c00:	6884      	ldr	r4, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   19c02:	2210      	movs	r2, #16
   19c04:	2100      	movs	r1, #0
   19c06:	eb0d 0002 	add.w	r0, sp, r2
   19c0a:	f00a ff53 	bl	24ab4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   19c0e:	2200      	movs	r2, #0
   19c10:	210f      	movs	r1, #15
   19c12:	4620      	mov	r0, r4
   19c14:	f7ff ff5a 	bl	19acc <bt_att_create_pdu>
   19c18:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   19c1a:	b368      	cbz	r0, 19c78 <att_read_mult_req+0x80>
	data.chan = chan;
   19c1c:	9604      	str	r6, [sp, #16]
	while (buf->len >= sizeof(uint16_t)) {
   19c1e:	89ab      	ldrh	r3, [r5, #12]
   19c20:	2b01      	cmp	r3, #1
   19c22:	d921      	bls.n	19c68 <att_read_mult_req+0x70>
	return net_buf_simple_pull_le16(&buf->b);
   19c24:	f105 0008 	add.w	r0, r5, #8
   19c28:	f00e fbb3 	bl	28392 <net_buf_simple_pull_le16>
   19c2c:	4604      	mov	r4, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   19c2e:	2301      	movs	r3, #1
   19c30:	f88d 301c 	strb.w	r3, [sp, #28]
   19c34:	ab04      	add	r3, sp, #16
   19c36:	9302      	str	r3, [sp, #8]
   19c38:	4b10      	ldr	r3, [pc, #64]	; (19c7c <att_read_mult_req+0x84>)
   19c3a:	9301      	str	r3, [sp, #4]
   19c3c:	2200      	movs	r2, #0
   19c3e:	9200      	str	r2, [sp, #0]
   19c40:	4613      	mov	r3, r2
   19c42:	4601      	mov	r1, r0
   19c44:	f001 f89c 	bl	1ad80 <bt_gatt_foreach_attr_type>
		if (data.err) {
   19c48:	f89d 301c 	ldrb.w	r3, [sp, #28]
   19c4c:	2b00      	cmp	r3, #0
   19c4e:	d0e6      	beq.n	19c1e <att_read_mult_req+0x26>
			net_buf_unref(data.buf);
   19c50:	9806      	ldr	r0, [sp, #24]
   19c52:	f00e fb24 	bl	2829e <net_buf_unref>
			send_err_rsp(chan, BT_ATT_OP_READ_MULT_REQ, handle,
   19c56:	f89d 301c 	ldrb.w	r3, [sp, #28]
   19c5a:	4622      	mov	r2, r4
   19c5c:	210e      	movs	r1, #14
   19c5e:	4630      	mov	r0, r6
   19c60:	f7ff fdd8 	bl	19814 <send_err_rsp>
			return 0;
   19c64:	2000      	movs	r0, #0
   19c66:	e005      	b.n	19c74 <att_read_mult_req+0x7c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   19c68:	4a05      	ldr	r2, [pc, #20]	; (19c80 <att_read_mult_req+0x88>)
   19c6a:	9906      	ldr	r1, [sp, #24]
   19c6c:	4630      	mov	r0, r6
   19c6e:	f00c fa6e 	bl	2614e <bt_att_chan_send_rsp>
	return 0;
   19c72:	2000      	movs	r0, #0
}
   19c74:	b008      	add	sp, #32
   19c76:	bd70      	pop	{r4, r5, r6, pc}
		return BT_ATT_ERR_UNLIKELY;
   19c78:	200e      	movs	r0, #14
   19c7a:	e7fb      	b.n	19c74 <att_read_mult_req+0x7c>
   19c7c:	000262bf 	.word	0x000262bf
   19c80:	00025fab 	.word	0x00025fab

00019c84 <att_read_rsp>:
{
   19c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19c88:	b088      	sub	sp, #32
   19c8a:	4604      	mov	r4, r0
   19c8c:	4688      	mov	r8, r1
   19c8e:	4616      	mov	r6, r2
   19c90:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   19c92:	6887      	ldr	r7, [r0, #8]
	if (!bt_gatt_change_aware(conn, true)) {
   19c94:	2101      	movs	r1, #1
   19c96:	4638      	mov	r0, r7
   19c98:	f00d f8f1 	bl	26e7e <bt_gatt_change_aware>
   19c9c:	2800      	cmp	r0, #0
   19c9e:	d03a      	beq.n	19d16 <att_read_rsp+0x92>
	if (!handle) {
   19ca0:	b925      	cbnz	r5, 19cac <att_read_rsp+0x28>
		return BT_ATT_ERR_INVALID_HANDLE;
   19ca2:	2601      	movs	r6, #1
}
   19ca4:	4630      	mov	r0, r6
   19ca6:	b008      	add	sp, #32
   19ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(&data, 0, sizeof(data));
   19cac:	2210      	movs	r2, #16
   19cae:	2100      	movs	r1, #0
   19cb0:	eb0d 0002 	add.w	r0, sp, r2
   19cb4:	f00a fefe 	bl	24ab4 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   19cb8:	2200      	movs	r2, #0
   19cba:	4631      	mov	r1, r6
   19cbc:	4638      	mov	r0, r7
   19cbe:	f7ff ff05 	bl	19acc <bt_att_create_pdu>
   19cc2:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   19cc4:	b348      	cbz	r0, 19d1a <att_read_rsp+0x96>
	data.chan = chan;
   19cc6:	9404      	str	r4, [sp, #16]
	data.offset = offset;
   19cc8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   19ccc:	f8ad 3014 	strh.w	r3, [sp, #20]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   19cd0:	2301      	movs	r3, #1
   19cd2:	f88d 301c 	strb.w	r3, [sp, #28]
   19cd6:	ab04      	add	r3, sp, #16
   19cd8:	9302      	str	r3, [sp, #8]
   19cda:	4b11      	ldr	r3, [pc, #68]	; (19d20 <att_read_rsp+0x9c>)
   19cdc:	9301      	str	r3, [sp, #4]
   19cde:	2200      	movs	r2, #0
   19ce0:	9200      	str	r2, [sp, #0]
   19ce2:	4613      	mov	r3, r2
   19ce4:	4629      	mov	r1, r5
   19ce6:	4628      	mov	r0, r5
   19ce8:	f001 f84a 	bl	1ad80 <bt_gatt_foreach_attr_type>
	if (data.err) {
   19cec:	f89d 601c 	ldrb.w	r6, [sp, #28]
   19cf0:	b92e      	cbnz	r6, 19cfe <att_read_rsp+0x7a>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   19cf2:	4a0c      	ldr	r2, [pc, #48]	; (19d24 <att_read_rsp+0xa0>)
   19cf4:	9906      	ldr	r1, [sp, #24]
   19cf6:	4620      	mov	r0, r4
   19cf8:	f00c fa29 	bl	2614e <bt_att_chan_send_rsp>
	return 0;
   19cfc:	e7d2      	b.n	19ca4 <att_read_rsp+0x20>
		net_buf_unref(data.buf);
   19cfe:	9806      	ldr	r0, [sp, #24]
   19d00:	f00e facd 	bl	2829e <net_buf_unref>
		send_err_rsp(chan, op, handle, data.err);
   19d04:	f89d 301c 	ldrb.w	r3, [sp, #28]
   19d08:	462a      	mov	r2, r5
   19d0a:	4641      	mov	r1, r8
   19d0c:	4620      	mov	r0, r4
   19d0e:	f7ff fd81 	bl	19814 <send_err_rsp>
		return 0;
   19d12:	2600      	movs	r6, #0
   19d14:	e7c6      	b.n	19ca4 <att_read_rsp+0x20>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   19d16:	2612      	movs	r6, #18
   19d18:	e7c4      	b.n	19ca4 <att_read_rsp+0x20>
		return BT_ATT_ERR_UNLIKELY;
   19d1a:	260e      	movs	r6, #14
   19d1c:	e7c2      	b.n	19ca4 <att_read_rsp+0x20>
   19d1e:	bf00      	nop
   19d20:	000262bf 	.word	0x000262bf
   19d24:	00025fab 	.word	0x00025fab

00019d28 <att_read_type_rsp>:
{
   19d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19d2c:	b08a      	sub	sp, #40	; 0x28
   19d2e:	4604      	mov	r4, r0
   19d30:	460f      	mov	r7, r1
   19d32:	4615      	mov	r5, r2
   19d34:	461e      	mov	r6, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   19d36:	f8d0 8008 	ldr.w	r8, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   19d3a:	2218      	movs	r2, #24
   19d3c:	2100      	movs	r1, #0
   19d3e:	a804      	add	r0, sp, #16
   19d40:	f00a feb8 	bl	24ab4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   19d44:	2201      	movs	r2, #1
   19d46:	2109      	movs	r1, #9
   19d48:	4640      	mov	r0, r8
   19d4a:	f7ff febf 	bl	19acc <bt_att_create_pdu>
   19d4e:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   19d50:	b368      	cbz	r0, 19dae <att_read_type_rsp+0x86>
	data.chan = chan;
   19d52:	9404      	str	r4, [sp, #16]
	data.uuid = uuid;
   19d54:	9705      	str	r7, [sp, #20]
	return net_buf_simple_add(&buf->b, len);
   19d56:	2101      	movs	r1, #1
   19d58:	3008      	adds	r0, #8
   19d5a:	f00e faea 	bl	28332 <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   19d5e:	9007      	str	r0, [sp, #28]
	data.rsp->len = 0U;
   19d60:	2200      	movs	r2, #0
   19d62:	7002      	strb	r2, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   19d64:	230a      	movs	r3, #10
   19d66:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   19d6a:	ab04      	add	r3, sp, #16
   19d6c:	9302      	str	r3, [sp, #8]
   19d6e:	4b11      	ldr	r3, [pc, #68]	; (19db4 <att_read_type_rsp+0x8c>)
   19d70:	9301      	str	r3, [sp, #4]
   19d72:	9200      	str	r2, [sp, #0]
   19d74:	4613      	mov	r3, r2
   19d76:	4631      	mov	r1, r6
   19d78:	4628      	mov	r0, r5
   19d7a:	f001 f801 	bl	1ad80 <bt_gatt_foreach_attr_type>
	if (data.err) {
   19d7e:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   19d82:	b946      	cbnz	r6, 19d96 <att_read_type_rsp+0x6e>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   19d84:	4a0c      	ldr	r2, [pc, #48]	; (19db8 <att_read_type_rsp+0x90>)
   19d86:	9906      	ldr	r1, [sp, #24]
   19d88:	4620      	mov	r0, r4
   19d8a:	f00c f9e0 	bl	2614e <bt_att_chan_send_rsp>
}
   19d8e:	4630      	mov	r0, r6
   19d90:	b00a      	add	sp, #40	; 0x28
   19d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(data.buf);
   19d96:	9806      	ldr	r0, [sp, #24]
   19d98:	f00e fa81 	bl	2829e <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, start_handle,
   19d9c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   19da0:	462a      	mov	r2, r5
   19da2:	2108      	movs	r1, #8
   19da4:	4620      	mov	r0, r4
   19da6:	f7ff fd35 	bl	19814 <send_err_rsp>
		return 0;
   19daa:	2600      	movs	r6, #0
   19dac:	e7ef      	b.n	19d8e <att_read_type_rsp+0x66>
		return BT_ATT_ERR_UNLIKELY;
   19dae:	260e      	movs	r6, #14
   19db0:	e7ed      	b.n	19d8e <att_read_type_rsp+0x66>
   19db2:	bf00      	nop
   19db4:	000194cd 	.word	0x000194cd
   19db8:	00025fab 	.word	0x00025fab

00019dbc <att_find_type_rsp>:
{
   19dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19dc0:	b08a      	sub	sp, #40	; 0x28
   19dc2:	4604      	mov	r4, r0
   19dc4:	460d      	mov	r5, r1
   19dc6:	4616      	mov	r6, r2
   19dc8:	461f      	mov	r7, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   19dca:	f8d0 8008 	ldr.w	r8, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   19dce:	2214      	movs	r2, #20
   19dd0:	2100      	movs	r1, #0
   19dd2:	eb0d 0002 	add.w	r0, sp, r2
   19dd6:	f00a fe6d 	bl	24ab4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   19dda:	2200      	movs	r2, #0
   19ddc:	2107      	movs	r1, #7
   19dde:	4640      	mov	r0, r8
   19de0:	f7ff fe74 	bl	19acc <bt_att_create_pdu>
   19de4:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   19de6:	b360      	cbz	r0, 19e42 <att_find_type_rsp+0x86>
	data.chan = chan;
   19de8:	9405      	str	r4, [sp, #20]
	data.group = NULL;
   19dea:	2200      	movs	r2, #0
   19dec:	9207      	str	r2, [sp, #28]
	data.value = value;
   19dee:	9708      	str	r7, [sp, #32]
	data.value_len = value_len;
   19df0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   19df4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   19df8:	230a      	movs	r3, #10
   19dfa:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   19dfe:	ab05      	add	r3, sp, #20
   19e00:	9302      	str	r3, [sp, #8]
   19e02:	4b11      	ldr	r3, [pc, #68]	; (19e48 <att_find_type_rsp+0x8c>)
   19e04:	9301      	str	r3, [sp, #4]
   19e06:	9200      	str	r2, [sp, #0]
   19e08:	4613      	mov	r3, r2
   19e0a:	4631      	mov	r1, r6
   19e0c:	4628      	mov	r0, r5
   19e0e:	f000 ffb7 	bl	1ad80 <bt_gatt_foreach_attr_type>
	if (data.err) {
   19e12:	f89d 6025 	ldrb.w	r6, [sp, #37]	; 0x25
   19e16:	b946      	cbnz	r6, 19e2a <att_find_type_rsp+0x6e>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   19e18:	4a0c      	ldr	r2, [pc, #48]	; (19e4c <att_find_type_rsp+0x90>)
   19e1a:	9906      	ldr	r1, [sp, #24]
   19e1c:	4620      	mov	r0, r4
   19e1e:	f00c f996 	bl	2614e <bt_att_chan_send_rsp>
}
   19e22:	4630      	mov	r0, r6
   19e24:	b00a      	add	sp, #40	; 0x28
   19e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(data.buf);
   19e2a:	9806      	ldr	r0, [sp, #24]
   19e2c:	f00e fa37 	bl	2829e <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   19e30:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   19e34:	462a      	mov	r2, r5
   19e36:	2106      	movs	r1, #6
   19e38:	4620      	mov	r0, r4
   19e3a:	f7ff fceb 	bl	19814 <send_err_rsp>
		return 0;
   19e3e:	2600      	movs	r6, #0
   19e40:	e7ef      	b.n	19e22 <att_find_type_rsp+0x66>
		return BT_ATT_ERR_UNLIKELY;
   19e42:	260e      	movs	r6, #14
   19e44:	e7ed      	b.n	19e22 <att_find_type_rsp+0x66>
   19e46:	bf00      	nop
   19e48:	00019579 	.word	0x00019579
   19e4c:	00025fab 	.word	0x00025fab

00019e50 <att_find_info_rsp>:
{
   19e50:	b5f0      	push	{r4, r5, r6, r7, lr}
   19e52:	b089      	sub	sp, #36	; 0x24
   19e54:	4604      	mov	r4, r0
   19e56:	460f      	mov	r7, r1
   19e58:	4616      	mov	r6, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   19e5a:	6885      	ldr	r5, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   19e5c:	2210      	movs	r2, #16
   19e5e:	2100      	movs	r1, #0
   19e60:	eb0d 0002 	add.w	r0, sp, r2
   19e64:	f00a fe26 	bl	24ab4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   19e68:	2200      	movs	r2, #0
   19e6a:	2105      	movs	r1, #5
   19e6c:	4628      	mov	r0, r5
   19e6e:	f7ff fe2d 	bl	19acc <bt_att_create_pdu>
   19e72:	9005      	str	r0, [sp, #20]
	if (!data.buf) {
   19e74:	b300      	cbz	r0, 19eb8 <att_find_info_rsp+0x68>
	data.chan = chan;
   19e76:	9404      	str	r4, [sp, #16]
   19e78:	ab04      	add	r3, sp, #16
   19e7a:	9302      	str	r3, [sp, #8]
   19e7c:	4b0f      	ldr	r3, [pc, #60]	; (19ebc <att_find_info_rsp+0x6c>)
   19e7e:	9301      	str	r3, [sp, #4]
   19e80:	2200      	movs	r2, #0
   19e82:	9200      	str	r2, [sp, #0]
   19e84:	4613      	mov	r3, r2
   19e86:	4631      	mov	r1, r6
   19e88:	4638      	mov	r0, r7
   19e8a:	f000 ff79 	bl	1ad80 <bt_gatt_foreach_attr_type>
	if (!data.rsp) {
   19e8e:	9b06      	ldr	r3, [sp, #24]
   19e90:	b13b      	cbz	r3, 19ea2 <att_find_info_rsp+0x52>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   19e92:	4a0b      	ldr	r2, [pc, #44]	; (19ec0 <att_find_info_rsp+0x70>)
   19e94:	9905      	ldr	r1, [sp, #20]
   19e96:	4620      	mov	r0, r4
   19e98:	f00c f959 	bl	2614e <bt_att_chan_send_rsp>
	return 0;
   19e9c:	2000      	movs	r0, #0
}
   19e9e:	b009      	add	sp, #36	; 0x24
   19ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(data.buf);
   19ea2:	9805      	ldr	r0, [sp, #20]
   19ea4:	f00e f9fb 	bl	2829e <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, start_handle,
   19ea8:	230a      	movs	r3, #10
   19eaa:	463a      	mov	r2, r7
   19eac:	2104      	movs	r1, #4
   19eae:	4620      	mov	r0, r4
   19eb0:	f7ff fcb0 	bl	19814 <send_err_rsp>
		return 0;
   19eb4:	2000      	movs	r0, #0
   19eb6:	e7f2      	b.n	19e9e <att_find_info_rsp+0x4e>
		return BT_ATT_ERR_UNLIKELY;
   19eb8:	200e      	movs	r0, #14
   19eba:	e7f0      	b.n	19e9e <att_find_info_rsp+0x4e>
   19ebc:	00026307 	.word	0x00026307
   19ec0:	00025fab 	.word	0x00025fab

00019ec4 <att_mtu_req>:
{
   19ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19ec6:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   19ec8:	6803      	ldr	r3, [r0, #0]
   19eca:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19ecc:	f3bf 8f5b 	dmb	ish
   19ed0:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   19ed4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   19ed8:	f013 0f08 	tst.w	r3, #8
   19edc:	d11f      	bne.n	19f1e <att_mtu_req+0x5a>
	req = (void *)buf->data;
   19ede:	688b      	ldr	r3, [r1, #8]
	mtu_client = sys_le16_to_cpu(req->mtu);
   19ee0:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   19ee2:	2e16      	cmp	r6, #22
   19ee4:	d91d      	bls.n	19f22 <att_mtu_req+0x5e>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   19ee6:	2202      	movs	r2, #2
   19ee8:	2103      	movs	r1, #3
   19eea:	f7ff fdef 	bl	19acc <bt_att_create_pdu>
	if (!pdu) {
   19eee:	4607      	mov	r7, r0
   19ef0:	b1c8      	cbz	r0, 19f26 <att_mtu_req+0x62>
   19ef2:	2102      	movs	r1, #2
   19ef4:	3008      	adds	r0, #8
   19ef6:	f00e fa1c 	bl	28332 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   19efa:	2500      	movs	r5, #0
   19efc:	2341      	movs	r3, #65	; 0x41
   19efe:	7003      	strb	r3, [r0, #0]
   19f00:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   19f02:	4a0a      	ldr	r2, [pc, #40]	; (19f2c <att_mtu_req+0x68>)
   19f04:	4639      	mov	r1, r7
   19f06:	4620      	mov	r0, r4
   19f08:	f00c f921 	bl	2614e <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   19f0c:	2e41      	cmp	r6, #65	; 0x41
   19f0e:	bf28      	it	cs
   19f10:	2641      	movcs	r6, #65	; 0x41
   19f12:	f8a4 607a 	strh.w	r6, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   19f16:	f8a4 6086 	strh.w	r6, [r4, #134]	; 0x86
	return 0;
   19f1a:	4628      	mov	r0, r5
}
   19f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   19f1e:	2006      	movs	r0, #6
   19f20:	e7fc      	b.n	19f1c <att_mtu_req+0x58>
		return BT_ATT_ERR_INVALID_PDU;
   19f22:	2004      	movs	r0, #4
   19f24:	e7fa      	b.n	19f1c <att_mtu_req+0x58>
		return BT_ATT_ERR_UNLIKELY;
   19f26:	200e      	movs	r0, #14
   19f28:	e7f8      	b.n	19f1c <att_mtu_req+0x58>
   19f2a:	bf00      	nop
   19f2c:	00025fab 	.word	0x00025fab

00019f30 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   19f30:	b500      	push	{lr}
   19f32:	b083      	sub	sp, #12
   19f34:	4602      	mov	r2, r0
   19f36:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;
   19f38:	2100      	movs	r1, #0
   19f3a:	9101      	str	r1, [sp, #4]

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   19f3c:	a901      	add	r1, sp, #4
   19f3e:	4807      	ldr	r0, [pc, #28]	; (19f5c <bt_att_req_alloc+0x2c>)
   19f40:	f005 fbf6 	bl	1f730 <k_mem_slab_alloc>
   19f44:	b940      	cbnz	r0, 19f58 <bt_att_req_alloc+0x28>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   19f46:	221c      	movs	r2, #28
   19f48:	2100      	movs	r1, #0
   19f4a:	9801      	ldr	r0, [sp, #4]
   19f4c:	f00a fdb2 	bl	24ab4 <memset>

	return req;
   19f50:	9801      	ldr	r0, [sp, #4]
}
   19f52:	b003      	add	sp, #12
   19f54:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   19f58:	2000      	movs	r0, #0
   19f5a:	e7fa      	b.n	19f52 <bt_att_req_alloc+0x22>
   19f5c:	2000071c 	.word	0x2000071c

00019f60 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   19f60:	b500      	push	{lr}
   19f62:	b083      	sub	sp, #12
   19f64:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   19f66:	6880      	ldr	r0, [r0, #8]
   19f68:	b120      	cbz	r0, 19f74 <bt_att_req_free+0x14>
		net_buf_unref(req->buf);
   19f6a:	f00e f998 	bl	2829e <net_buf_unref>
		req->buf = NULL;
   19f6e:	9b01      	ldr	r3, [sp, #4]
   19f70:	2200      	movs	r2, #0
   19f72:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   19f74:	a901      	add	r1, sp, #4
   19f76:	4803      	ldr	r0, [pc, #12]	; (19f84 <bt_att_req_free+0x24>)
   19f78:	f00f f84e 	bl	29018 <k_mem_slab_free>
}
   19f7c:	b003      	add	sp, #12
   19f7e:	f85d fb04 	ldr.w	pc, [sp], #4
   19f82:	bf00      	nop
   19f84:	2000071c 	.word	0x2000071c

00019f88 <att_handle_rsp>:
{
   19f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19f8c:	b082      	sub	sp, #8
   19f8e:	4604      	mov	r4, r0
   19f90:	460f      	mov	r7, r1
   19f92:	4691      	mov	r9, r2
   19f94:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
   19f96:	f500 7088 	add.w	r0, r0, #272	; 0x110
   19f9a:	f00f fad0 	bl	2953e <k_work_cancel_delayable>
	if (!chan->req) {
   19f9e:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
   19fa2:	b1f8      	cbz	r0, 19fe4 <att_handle_rsp+0x5c>
	if (chan->req == &cancel) {
   19fa4:	4b1a      	ldr	r3, [pc, #104]	; (1a010 <att_handle_rsp+0x88>)
   19fa6:	4298      	cmp	r0, r3
   19fa8:	d02e      	beq.n	1a008 <att_handle_rsp+0x80>
	func = chan->req->func;
   19faa:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   19fac:	f04f 0a00 	mov.w	sl, #0
   19fb0:	f8c0 a004 	str.w	sl, [r0, #4]
	params = chan->req->user_data;
   19fb4:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
   19fb8:	f8d0 8018 	ldr.w	r8, [r0, #24]
	bt_att_req_free(chan->req);
   19fbc:	f7ff ffd0 	bl	19f60 <bt_att_req_free>
	chan->req = NULL;
   19fc0:	f8c4 a0f4 	str.w	sl, [r4, #244]	; 0xf4
	att_req_send_process(chan->att);
   19fc4:	6820      	ldr	r0, [r4, #0]
   19fc6:	f00b ff92 	bl	25eee <att_req_send_process>
	if (func) {
   19fca:	b13d      	cbz	r5, 19fdc <att_handle_rsp+0x54>
		func(chan->att->conn, err, pdu, len, params);
   19fcc:	6823      	ldr	r3, [r4, #0]
   19fce:	6818      	ldr	r0, [r3, #0]
   19fd0:	f8cd 8000 	str.w	r8, [sp]
   19fd4:	464b      	mov	r3, r9
   19fd6:	463a      	mov	r2, r7
   19fd8:	4631      	mov	r1, r6
   19fda:	47a8      	blx	r5
}
   19fdc:	2000      	movs	r0, #0
   19fde:	b002      	add	sp, #8
   19fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19fe4:	4b0b      	ldr	r3, [pc, #44]	; (1a014 <att_handle_rsp+0x8c>)
   19fe6:	4a0c      	ldr	r2, [pc, #48]	; (1a018 <att_handle_rsp+0x90>)
   19fe8:	1a9b      	subs	r3, r3, r2
   19fea:	08db      	lsrs	r3, r3, #3
		BT_WARN("No pending ATT request");
   19fec:	f04f 0100 	mov.w	r1, #0
   19ff0:	2202      	movs	r2, #2
   19ff2:	f362 0102 	bfi	r1, r2, #0, #3
   19ff6:	f36f 01c5 	bfc	r1, #3, #3
   19ffa:	f363 118f 	bfi	r1, r3, #6, #10
   19ffe:	4807      	ldr	r0, [pc, #28]	; (1a01c <att_handle_rsp+0x94>)
   1a000:	f7f7 f93c 	bl	1127c <log_0>
	bt_att_func_t func = NULL;
   1a004:	2500      	movs	r5, #0
		goto process;
   1a006:	e7dd      	b.n	19fc4 <att_handle_rsp+0x3c>
		chan->req = NULL;
   1a008:	2500      	movs	r5, #0
   1a00a:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
		goto process;
   1a00e:	e7d9      	b.n	19fc4 <att_handle_rsp+0x3c>
   1a010:	20002748 	.word	0x20002748
   1a014:	00029edc 	.word	0x00029edc
   1a018:	00029ecc 	.word	0x00029ecc
   1a01c:	0002c42c 	.word	0x0002c42c

0001a020 <att_reset>:
{
   1a020:	b570      	push	{r4, r5, r6, lr}
   1a022:	b084      	sub	sp, #16
   1a024:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1a026:	2200      	movs	r2, #0
   1a028:	2300      	movs	r3, #0
   1a02a:	9803      	ldr	r0, [sp, #12]
   1a02c:	300c      	adds	r0, #12
   1a02e:	f00e f90a 	bl	28246 <net_buf_get>
   1a032:	4603      	mov	r3, r0
   1a034:	b118      	cbz	r0, 1a03e <att_reset+0x1e>
		net_buf_unref(buf);
   1a036:	4618      	mov	r0, r3
   1a038:	f00e f931 	bl	2829e <net_buf_unref>
   1a03c:	e7f3      	b.n	1a026 <att_reset+0x6>
	att->conn = NULL;
   1a03e:	9b03      	ldr	r3, [sp, #12]
   1a040:	2200      	movs	r2, #0
   1a042:	601a      	str	r2, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   1a044:	9b03      	ldr	r3, [sp, #12]
	return list->head;
   1a046:	685d      	ldr	r5, [r3, #4]
   1a048:	b11d      	cbz	r5, 1a052 <att_reset+0x32>
   1a04a:	462c      	mov	r4, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
   1a04c:	b135      	cbz	r5, 1a05c <att_reset+0x3c>
	return node->next;
   1a04e:	682c      	ldr	r4, [r5, #0]
   1a050:	e004      	b.n	1a05c <att_reset+0x3c>
   1a052:	462c      	mov	r4, r5
   1a054:	e002      	b.n	1a05c <att_reset+0x3c>
   1a056:	4623      	mov	r3, r4
   1a058:	4625      	mov	r5, r4
   1a05a:	461c      	mov	r4, r3
   1a05c:	b195      	cbz	r5, 1a084 <att_reset+0x64>
		if (req->func) {
   1a05e:	686e      	ldr	r6, [r5, #4]
   1a060:	b136      	cbz	r6, 1a070 <att_reset+0x50>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1a062:	69ab      	ldr	r3, [r5, #24]
   1a064:	9300      	str	r3, [sp, #0]
   1a066:	2300      	movs	r3, #0
   1a068:	461a      	mov	r2, r3
   1a06a:	210e      	movs	r1, #14
   1a06c:	4618      	mov	r0, r3
   1a06e:	47b0      	blx	r6
		bt_att_req_free(req);
   1a070:	4628      	mov	r0, r5
   1a072:	f7ff ff75 	bl	19f60 <bt_att_req_free>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   1a076:	2c00      	cmp	r4, #0
   1a078:	d0ed      	beq.n	1a056 <att_reset+0x36>
   1a07a:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   1a07c:	2c00      	cmp	r4, #0
   1a07e:	d0eb      	beq.n	1a058 <att_reset+0x38>
	return node->next;
   1a080:	6823      	ldr	r3, [r4, #0]
   1a082:	e7e9      	b.n	1a058 <att_reset+0x38>
	k_mem_slab_free(&att_slab, (void **)&att);
   1a084:	a903      	add	r1, sp, #12
   1a086:	4802      	ldr	r0, [pc, #8]	; (1a090 <att_reset+0x70>)
   1a088:	f00e ffc6 	bl	29018 <k_mem_slab_free>
}
   1a08c:	b004      	add	sp, #16
   1a08e:	bd70      	pop	{r4, r5, r6, pc}
   1a090:	200006e4 	.word	0x200006e4

0001a094 <att_timeout>:
{
   1a094:	b510      	push	{r4, lr}
   1a096:	4604      	mov	r4, r0
   1a098:	4b0a      	ldr	r3, [pc, #40]	; (1a0c4 <att_timeout+0x30>)
   1a09a:	4a0b      	ldr	r2, [pc, #44]	; (1a0c8 <att_timeout+0x34>)
   1a09c:	1a9b      	subs	r3, r3, r2
   1a09e:	08db      	lsrs	r3, r3, #3
	BT_ERR("ATT Timeout");
   1a0a0:	f04f 0100 	mov.w	r1, #0
   1a0a4:	2201      	movs	r2, #1
   1a0a6:	f362 0102 	bfi	r1, r2, #0, #3
   1a0aa:	f36f 01c5 	bfc	r1, #3, #3
   1a0ae:	f363 118f 	bfi	r1, r3, #6, #10
   1a0b2:	4806      	ldr	r0, [pc, #24]	; (1a0cc <att_timeout+0x38>)
   1a0b4:	f7f7 f8e2 	bl	1127c <log_0>
	bt_att_disconnected(&chan->chan.chan);
   1a0b8:	f5a4 7084 	sub.w	r0, r4, #264	; 0x108
   1a0bc:	f00c fb4e 	bl	2675c <bt_att_disconnected>
}
   1a0c0:	bd10      	pop	{r4, pc}
   1a0c2:	bf00      	nop
   1a0c4:	00029edc 	.word	0x00029edc
   1a0c8:	00029ecc 	.word	0x00029ecc
   1a0cc:	0002c444 	.word	0x0002c444

0001a0d0 <bt_gatt_service_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1a0d0:	4b0d      	ldr	r3, [pc, #52]	; (1a108 <bt_gatt_service_init+0x38>)
   1a0d2:	2201      	movs	r2, #1
   1a0d4:	f3bf 8f5b 	dmb	ish
   1a0d8:	e853 1f00 	ldrex	r1, [r3]
   1a0dc:	2900      	cmp	r1, #0
   1a0de:	d103      	bne.n	1a0e8 <bt_gatt_service_init+0x18>
   1a0e0:	e843 2000 	strex	r0, r2, [r3]
   1a0e4:	2800      	cmp	r0, #0
   1a0e6:	d1f7      	bne.n	1a0d8 <bt_gatt_service_init+0x8>
   1a0e8:	f3bf 8f5b 	dmb	ish
}
#endif

static void bt_gatt_service_init(void)
{
	if (!atomic_cas(&service_init, 0, 1)) {
   1a0ec:	d101      	bne.n	1a0f2 <bt_gatt_service_init+0x22>
		return;
	}

	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1a0ee:	4b07      	ldr	r3, [pc, #28]	; (1a10c <bt_gatt_service_init+0x3c>)
   1a0f0:	e006      	b.n	1a100 <bt_gatt_service_init+0x30>
   1a0f2:	4770      	bx	lr
		last_static_handle += svc->attr_count;
   1a0f4:	685a      	ldr	r2, [r3, #4]
   1a0f6:	4906      	ldr	r1, [pc, #24]	; (1a110 <bt_gatt_service_init+0x40>)
   1a0f8:	8808      	ldrh	r0, [r1, #0]
   1a0fa:	4402      	add	r2, r0
   1a0fc:	800a      	strh	r2, [r1, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1a0fe:	3308      	adds	r3, #8
   1a100:	4a04      	ldr	r2, [pc, #16]	; (1a114 <bt_gatt_service_init+0x44>)
   1a102:	4293      	cmp	r3, r2
   1a104:	d3f6      	bcc.n	1a0f4 <bt_gatt_service_init+0x24>
	}
}
   1a106:	4770      	bx	lr
   1a108:	200027ec 	.word	0x200027ec
   1a10c:	00029e2c 	.word	0x00029e2c
   1a110:	20003984 	.word	0x20003984
   1a114:	00029e54 	.word	0x00029e54

0001a118 <db_hash_store>:
{
   1a118:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   1a11a:	2210      	movs	r2, #16
   1a11c:	490b      	ldr	r1, [pc, #44]	; (1a14c <db_hash_store+0x34>)
   1a11e:	480c      	ldr	r0, [pc, #48]	; (1a150 <db_hash_store+0x38>)
   1a120:	f7f7 fef8 	bl	11f14 <settings_save_one>
	if (err) {
   1a124:	b900      	cbnz	r0, 1a128 <db_hash_store+0x10>
}
   1a126:	bd08      	pop	{r3, pc}
   1a128:	4601      	mov	r1, r0
   1a12a:	4b0a      	ldr	r3, [pc, #40]	; (1a154 <db_hash_store+0x3c>)
   1a12c:	4a0a      	ldr	r2, [pc, #40]	; (1a158 <db_hash_store+0x40>)
   1a12e:	1a9b      	subs	r3, r3, r2
   1a130:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to save Database Hash (err %d)", err);
   1a132:	f04f 0200 	mov.w	r2, #0
   1a136:	2001      	movs	r0, #1
   1a138:	f360 0202 	bfi	r2, r0, #0, #3
   1a13c:	f36f 02c5 	bfc	r2, #3, #3
   1a140:	f363 128f 	bfi	r2, r3, #6, #10
   1a144:	4805      	ldr	r0, [pc, #20]	; (1a15c <db_hash_store+0x44>)
   1a146:	f7f6 ffe3 	bl	11110 <log_1>
}
   1a14a:	e7ec      	b.n	1a126 <db_hash_store+0xe>
   1a14c:	20001b48 	.word	0x20001b48
   1a150:	0002c4c0 	.word	0x0002c4c0
   1a154:	00029f04 	.word	0x00029f04
   1a158:	00029ecc 	.word	0x00029ecc
   1a15c:	0002c4c8 	.word	0x0002c4c8

0001a160 <db_hash_set>:

SETTINGS_STATIC_HANDLER_DEFINE(bt_cf, "bt/cf", NULL, cf_set, NULL, NULL);

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   1a160:	b510      	push	{r4, lr}
   1a162:	4614      	mov	r4, r2
	ssize_t len;

	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   1a164:	2210      	movs	r2, #16
   1a166:	490d      	ldr	r1, [pc, #52]	; (1a19c <db_hash_set+0x3c>)
   1a168:	4618      	mov	r0, r3
   1a16a:	47a0      	blx	r4
	if (len < 0) {
   1a16c:	1e04      	subs	r4, r0, #0
   1a16e:	db02      	blt.n	1a176 <db_hash_set+0x16>
	}

	BT_HEXDUMP_DBG(db_hash.stored_hash, sizeof(db_hash.stored_hash),
		       "Stored Hash: ");

	return 0;
   1a170:	2400      	movs	r4, #0
}
   1a172:	4620      	mov	r0, r4
   1a174:	bd10      	pop	{r4, pc}
   1a176:	4b0a      	ldr	r3, [pc, #40]	; (1a1a0 <db_hash_set+0x40>)
   1a178:	4a0a      	ldr	r2, [pc, #40]	; (1a1a4 <db_hash_set+0x44>)
   1a17a:	1a9b      	subs	r3, r3, r2
   1a17c:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to decode value (err %zd)", len);
   1a17e:	f04f 0200 	mov.w	r2, #0
   1a182:	2101      	movs	r1, #1
   1a184:	f361 0202 	bfi	r2, r1, #0, #3
   1a188:	f36f 02c5 	bfc	r2, #3, #3
   1a18c:	f363 128f 	bfi	r2, r3, #6, #10
   1a190:	4621      	mov	r1, r4
   1a192:	4805      	ldr	r0, [pc, #20]	; (1a1a8 <db_hash_set+0x48>)
   1a194:	f7f6 ffbc 	bl	11110 <log_1>
		return len;
   1a198:	e7eb      	b.n	1a172 <db_hash_set+0x12>
   1a19a:	bf00      	nop
   1a19c:	20001b58 	.word	0x20001b58
   1a1a0:	00029f04 	.word	0x00029f04
   1a1a4:	00029ecc 	.word	0x00029ecc
   1a1a8:	0002c4f0 	.word	0x0002c4f0

0001a1ac <find_cf_cfg>:
{
   1a1ac:	b570      	push	{r4, r5, r6, lr}
   1a1ae:	b082      	sub	sp, #8
   1a1b0:	4606      	mov	r6, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1a1b2:	2400      	movs	r4, #0
   1a1b4:	e00b      	b.n	1a1ce <find_cf_cfg+0x22>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1a1b6:	4628      	mov	r0, r5
   1a1b8:	2300      	movs	r3, #0
   1a1ba:	9300      	str	r3, [sp, #0]
   1a1bc:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   1a1c0:	2207      	movs	r2, #7
   1a1c2:	4669      	mov	r1, sp
   1a1c4:	3001      	adds	r0, #1
   1a1c6:	f00a fc3a 	bl	24a3e <memcmp>
   1a1ca:	b1a0      	cbz	r0, 1a1f6 <find_cf_cfg+0x4a>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1a1cc:	3401      	adds	r4, #1
   1a1ce:	2c02      	cmp	r4, #2
   1a1d0:	dc10      	bgt.n	1a1f4 <find_cf_cfg+0x48>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1a1d2:	4d0a      	ldr	r5, [pc, #40]	; (1a1fc <find_cf_cfg+0x50>)
   1a1d4:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (!conn) {
   1a1d8:	2e00      	cmp	r6, #0
   1a1da:	d0ec      	beq.n	1a1b6 <find_cf_cfg+0xa>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1a1dc:	4907      	ldr	r1, [pc, #28]	; (1a1fc <find_cf_cfg+0x50>)
   1a1de:	0123      	lsls	r3, r4, #4
   1a1e0:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   1a1e4:	3201      	adds	r2, #1
   1a1e6:	5cc9      	ldrb	r1, [r1, r3]
   1a1e8:	4630      	mov	r0, r6
   1a1ea:	f00b fb37 	bl	2585c <bt_conn_is_peer_addr_le>
   1a1ee:	2800      	cmp	r0, #0
   1a1f0:	d0ec      	beq.n	1a1cc <find_cf_cfg+0x20>
   1a1f2:	e000      	b.n	1a1f6 <find_cf_cfg+0x4a>
	return NULL;
   1a1f4:	2500      	movs	r5, #0
}
   1a1f6:	4628      	mov	r0, r5
   1a1f8:	b002      	add	sp, #8
   1a1fa:	bd70      	pop	{r4, r5, r6, pc}
   1a1fc:	20002764 	.word	0x20002764

0001a200 <find_sc_cfg>:
{
   1a200:	b570      	push	{r4, r5, r6, lr}
   1a202:	4605      	mov	r5, r0
   1a204:	460e      	mov	r6, r1
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1a206:	2400      	movs	r4, #0
   1a208:	e000      	b.n	1a20c <find_sc_cfg+0xc>
   1a20a:	3401      	adds	r4, #1
   1a20c:	2c02      	cmp	r4, #2
   1a20e:	d817      	bhi.n	1a240 <find_sc_cfg+0x40>
		if (id == sc_cfg[i].id &&
   1a210:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1a214:	4a0b      	ldr	r2, [pc, #44]	; (1a244 <find_sc_cfg+0x44>)
   1a216:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   1a21a:	429d      	cmp	r5, r3
   1a21c:	d1f5      	bne.n	1a20a <find_sc_cfg+0xa>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   1a21e:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   1a222:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   1a226:	2207      	movs	r2, #7
   1a228:	4631      	mov	r1, r6
   1a22a:	3001      	adds	r0, #1
   1a22c:	f00a fc07 	bl	24a3e <memcmp>
		if (id == sc_cfg[i].id &&
   1a230:	2800      	cmp	r0, #0
   1a232:	d1ea      	bne.n	1a20a <find_sc_cfg+0xa>
			return &sc_cfg[i];
   1a234:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1a238:	4802      	ldr	r0, [pc, #8]	; (1a244 <find_sc_cfg+0x44>)
   1a23a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   1a23e:	e000      	b.n	1a242 <find_sc_cfg+0x42>
	return NULL;
   1a240:	2000      	movs	r0, #0
}
   1a242:	bd70      	pop	{r4, r5, r6, pc}
   1a244:	20002798 	.word	0x20002798

0001a248 <ccc_save>:
{
   1a248:	b538      	push	{r3, r4, r5, lr}
   1a24a:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a24c:	6882      	ldr	r2, [r0, #8]
   1a24e:	4b0d      	ldr	r3, [pc, #52]	; (1a284 <ccc_save+0x3c>)
   1a250:	429a      	cmp	r2, r3
   1a252:	d001      	beq.n	1a258 <ccc_save+0x10>
}
   1a254:	2001      	movs	r0, #1
   1a256:	bd38      	pop	{r3, r4, r5, pc}
   1a258:	460d      	mov	r5, r1
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   1a25a:	7922      	ldrb	r2, [r4, #4]
   1a25c:	6821      	ldr	r1, [r4, #0]
   1a25e:	68c0      	ldr	r0, [r0, #12]
   1a260:	f00c fbf4 	bl	26a4c <ccc_find_cfg>
	if (!cfg) {
   1a264:	2800      	cmp	r0, #0
   1a266:	d0f5      	beq.n	1a254 <ccc_save+0xc>
	save->store[save->count].handle = handle;
   1a268:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
   1a26c:	1c9a      	adds	r2, r3, #2
   1a26e:	f824 5022 	strh.w	r5, [r4, r2, lsl #2]
	save->store[save->count].value = cfg->value;
   1a272:	8901      	ldrh	r1, [r0, #8]
   1a274:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   1a278:	8051      	strh	r1, [r2, #2]
	save->count++;
   1a27a:	3301      	adds	r3, #1
   1a27c:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	return BT_GATT_ITER_CONTINUE;
   1a280:	e7e8      	b.n	1a254 <ccc_save+0xc>
   1a282:	bf00      	nop
   1a284:	0001a371 	.word	0x0001a371

0001a288 <find_cf_cfg_by_addr>:
{
   1a288:	b570      	push	{r4, r5, r6, lr}
   1a28a:	4605      	mov	r5, r0
   1a28c:	460e      	mov	r6, r1
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1a28e:	2400      	movs	r4, #0
   1a290:	e000      	b.n	1a294 <find_cf_cfg_by_addr+0xc>
   1a292:	3401      	adds	r4, #1
   1a294:	2c02      	cmp	r4, #2
   1a296:	dc11      	bgt.n	1a2bc <find_cf_cfg_by_addr+0x34>
			if (id == cf_cfg[i].id &&
   1a298:	0123      	lsls	r3, r4, #4
   1a29a:	4a09      	ldr	r2, [pc, #36]	; (1a2c0 <find_cf_cfg_by_addr+0x38>)
   1a29c:	5cd3      	ldrb	r3, [r2, r3]
   1a29e:	42ab      	cmp	r3, r5
   1a2a0:	d1f7      	bne.n	1a292 <find_cf_cfg_by_addr+0xa>
			    !bt_addr_le_cmp(addr, &cf_cfg[i].peer)) {
   1a2a2:	eb02 1104 	add.w	r1, r2, r4, lsl #4
   1a2a6:	2207      	movs	r2, #7
   1a2a8:	3101      	adds	r1, #1
   1a2aa:	4630      	mov	r0, r6
   1a2ac:	f00a fbc7 	bl	24a3e <memcmp>
			if (id == cf_cfg[i].id &&
   1a2b0:	2800      	cmp	r0, #0
   1a2b2:	d1ee      	bne.n	1a292 <find_cf_cfg_by_addr+0xa>
				return &cf_cfg[i];
   1a2b4:	4802      	ldr	r0, [pc, #8]	; (1a2c0 <find_cf_cfg_by_addr+0x38>)
   1a2b6:	eb00 1004 	add.w	r0, r0, r4, lsl #4
   1a2ba:	e000      	b.n	1a2be <find_cf_cfg_by_addr+0x36>
	return NULL;
   1a2bc:	2000      	movs	r0, #0
}
   1a2be:	bd70      	pop	{r4, r5, r6, pc}
   1a2c0:	20002764 	.word	0x20002764

0001a2c4 <cf_write>:
{
   1a2c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a2c8:	461d      	mov	r5, r3
   1a2ca:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   1a2ce:	2b01      	cmp	r3, #1
   1a2d0:	d83f      	bhi.n	1a352 <cf_write+0x8e>
   1a2d2:	4606      	mov	r6, r0
   1a2d4:	4690      	mov	r8, r2
	if (offset + len > sizeof(cfg->data)) {
   1a2d6:	462f      	mov	r7, r5
   1a2d8:	442b      	add	r3, r5
   1a2da:	2b01      	cmp	r3, #1
   1a2dc:	d83c      	bhi.n	1a358 <cf_write+0x94>
	cfg = find_cf_cfg(conn);
   1a2de:	f7ff ff65 	bl	1a1ac <find_cf_cfg>
	if (!cfg) {
   1a2e2:	4604      	mov	r4, r0
   1a2e4:	b1f0      	cbz	r0, 1a324 <cf_write+0x60>
	if (!cfg) {
   1a2e6:	b30c      	cbz	r4, 1a32c <cf_write+0x68>
	if (!cf_set_value(cfg, value, len)) {
   1a2e8:	462a      	mov	r2, r5
   1a2ea:	4641      	mov	r1, r8
   1a2ec:	4620      	mov	r0, r4
   1a2ee:	f00c fa98 	bl	26822 <cf_set_value>
   1a2f2:	b3a0      	cbz	r0, 1a35e <cf_write+0x9a>
	memcpy(dst, src, sizeof(*dst));
   1a2f4:	2207      	movs	r2, #7
   1a2f6:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1a2fa:	1c60      	adds	r0, r4, #1
   1a2fc:	f00a fbb6 	bl	24a6c <memcpy>
	cfg->id = conn->id;
   1a300:	7a33      	ldrb	r3, [r6, #8]
   1a302:	f804 3b0c 	strb.w	r3, [r4], #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1a306:	f3bf 8f5b 	dmb	ish
   1a30a:	e854 3f00 	ldrex	r3, [r4]
   1a30e:	f043 0301 	orr.w	r3, r3, #1
   1a312:	e844 3200 	strex	r2, r3, [r4]
   1a316:	2a00      	cmp	r2, #0
   1a318:	d1f7      	bne.n	1a30a <cf_write+0x46>
   1a31a:	f3bf 8f5b 	dmb	ish
}
   1a31e:	4638      	mov	r0, r7
   1a320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_cf_cfg(NULL);
   1a324:	f7ff ff42 	bl	1a1ac <find_cf_cfg>
   1a328:	4604      	mov	r4, r0
   1a32a:	e7dc      	b.n	1a2e6 <cf_write+0x22>
   1a32c:	4b0d      	ldr	r3, [pc, #52]	; (1a364 <cf_write+0xa0>)
   1a32e:	4a0e      	ldr	r2, [pc, #56]	; (1a368 <cf_write+0xa4>)
   1a330:	1a9b      	subs	r3, r3, r2
   1a332:	08db      	lsrs	r3, r3, #3
		BT_WARN("No space to store Client Supported Features");
   1a334:	f04f 0100 	mov.w	r1, #0
   1a338:	2202      	movs	r2, #2
   1a33a:	f362 0102 	bfi	r1, r2, #0, #3
   1a33e:	f36f 01c5 	bfc	r1, #3, #3
   1a342:	f363 118f 	bfi	r1, r3, #6, #10
   1a346:	4809      	ldr	r0, [pc, #36]	; (1a36c <cf_write+0xa8>)
   1a348:	f7f6 ff98 	bl	1127c <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1a34c:	f06f 0710 	mvn.w	r7, #16
   1a350:	e7e5      	b.n	1a31e <cf_write+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1a352:	f06f 0706 	mvn.w	r7, #6
   1a356:	e7e2      	b.n	1a31e <cf_write+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1a358:	f06f 070c 	mvn.w	r7, #12
   1a35c:	e7df      	b.n	1a31e <cf_write+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1a35e:	f06f 0712 	mvn.w	r7, #18
   1a362:	e7dc      	b.n	1a31e <cf_write+0x5a>
   1a364:	00029f04 	.word	0x00029f04
   1a368:	00029ecc 	.word	0x00029ecc
   1a36c:	0002c514 	.word	0x0002c514

0001a370 <bt_gatt_attr_write_ccc>:
{
   1a370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a374:	461c      	mov	r4, r3
   1a376:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1a37a:	68cf      	ldr	r7, [r1, #12]
	if (offset) {
   1a37c:	2b00      	cmp	r3, #0
   1a37e:	d157      	bne.n	1a430 <bt_gatt_attr_write_ccc+0xc0>
   1a380:	4681      	mov	r9, r0
   1a382:	460e      	mov	r6, r1
	if (!len || len > sizeof(uint16_t)) {
   1a384:	1e63      	subs	r3, r4, #1
   1a386:	b29b      	uxth	r3, r3
   1a388:	2b01      	cmp	r3, #1
   1a38a:	d854      	bhi.n	1a436 <bt_gatt_attr_write_ccc+0xc6>
	if (len < sizeof(uint16_t)) {
   1a38c:	2c01      	cmp	r4, #1
   1a38e:	d91d      	bls.n	1a3cc <bt_gatt_attr_write_ccc+0x5c>
   1a390:	7853      	ldrb	r3, [r2, #1]
   1a392:	7815      	ldrb	r5, [r2, #0]
   1a394:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   1a398:	4639      	mov	r1, r7
   1a39a:	4648      	mov	r0, r9
   1a39c:	f00c fb29 	bl	269f2 <find_ccc_cfg>
	if (!cfg) {
   1a3a0:	4680      	mov	r8, r0
   1a3a2:	b1a8      	cbz	r0, 1a3d0 <bt_gatt_attr_write_ccc+0x60>
	if (ccc->cfg_write) {
   1a3a4:	69fb      	ldr	r3, [r7, #28]
   1a3a6:	b143      	cbz	r3, 1a3ba <bt_gatt_attr_write_ccc+0x4a>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1a3a8:	462a      	mov	r2, r5
   1a3aa:	4631      	mov	r1, r6
   1a3ac:	4648      	mov	r0, r9
   1a3ae:	4798      	blx	r3
		if (write < 0) {
   1a3b0:	2800      	cmp	r0, #0
   1a3b2:	db09      	blt.n	1a3c8 <bt_gatt_attr_write_ccc+0x58>
		if (write != sizeof(value) && write != 1) {
   1a3b4:	3801      	subs	r0, #1
   1a3b6:	2801      	cmp	r0, #1
   1a3b8:	d840      	bhi.n	1a43c <bt_gatt_attr_write_ccc+0xcc>
	cfg->value = value;
   1a3ba:	f8a8 5008 	strh.w	r5, [r8, #8]
	if (cfg->value != ccc->value) {
   1a3be:	8abb      	ldrh	r3, [r7, #20]
   1a3c0:	429d      	cmp	r5, r3
   1a3c2:	d12c      	bne.n	1a41e <bt_gatt_attr_write_ccc+0xae>
	if (!value) {
   1a3c4:	b385      	cbz	r5, 1a428 <bt_gatt_attr_write_ccc+0xb8>
	return len;
   1a3c6:	4620      	mov	r0, r4
}
   1a3c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		value = *(uint8_t *)buf;
   1a3cc:	7815      	ldrb	r5, [r2, #0]
   1a3ce:	e7e3      	b.n	1a398 <bt_gatt_attr_write_ccc+0x28>
		if (!value) {
   1a3d0:	b90d      	cbnz	r5, 1a3d6 <bt_gatt_attr_write_ccc+0x66>
			return len;
   1a3d2:	4620      	mov	r0, r4
   1a3d4:	e7f8      	b.n	1a3c8 <bt_gatt_attr_write_ccc+0x58>
		cfg = find_ccc_cfg(NULL, ccc);
   1a3d6:	4639      	mov	r1, r7
   1a3d8:	2000      	movs	r0, #0
   1a3da:	f00c fb0a 	bl	269f2 <find_ccc_cfg>
		if (!cfg) {
   1a3de:	4680      	mov	r8, r0
   1a3e0:	b150      	cbz	r0, 1a3f8 <bt_gatt_attr_write_ccc+0x88>
   1a3e2:	2207      	movs	r2, #7
   1a3e4:	f109 0188 	add.w	r1, r9, #136	; 0x88
   1a3e8:	3001      	adds	r0, #1
   1a3ea:	f00a fb3f 	bl	24a6c <memcpy>
		cfg->id = conn->id;
   1a3ee:	f899 3008 	ldrb.w	r3, [r9, #8]
   1a3f2:	f888 3000 	strb.w	r3, [r8]
   1a3f6:	e7d5      	b.n	1a3a4 <bt_gatt_attr_write_ccc+0x34>
   1a3f8:	4b12      	ldr	r3, [pc, #72]	; (1a444 <bt_gatt_attr_write_ccc+0xd4>)
   1a3fa:	4a13      	ldr	r2, [pc, #76]	; (1a448 <bt_gatt_attr_write_ccc+0xd8>)
   1a3fc:	1a9b      	subs	r3, r3, r2
   1a3fe:	08db      	lsrs	r3, r3, #3
			BT_WARN("No space to store CCC cfg");
   1a400:	f04f 0100 	mov.w	r1, #0
   1a404:	2202      	movs	r2, #2
   1a406:	f362 0102 	bfi	r1, r2, #0, #3
   1a40a:	f36f 01c5 	bfc	r1, #3, #3
   1a40e:	f363 118f 	bfi	r1, r3, #6, #10
   1a412:	480e      	ldr	r0, [pc, #56]	; (1a44c <bt_gatt_attr_write_ccc+0xdc>)
   1a414:	f7f6 ff32 	bl	1127c <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1a418:	f06f 0010 	mvn.w	r0, #16
   1a41c:	e7d4      	b.n	1a3c8 <bt_gatt_attr_write_ccc+0x58>
		gatt_ccc_changed(attr, ccc);
   1a41e:	4639      	mov	r1, r7
   1a420:	4630      	mov	r0, r6
   1a422:	f00c fa2f 	bl	26884 <gatt_ccc_changed>
   1a426:	e7cd      	b.n	1a3c4 <bt_gatt_attr_write_ccc+0x54>
		clear_ccc_cfg(cfg);
   1a428:	4640      	mov	r0, r8
   1a42a:	f00c fb30 	bl	26a8e <clear_ccc_cfg>
   1a42e:	e7ca      	b.n	1a3c6 <bt_gatt_attr_write_ccc+0x56>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1a430:	f06f 0006 	mvn.w	r0, #6
   1a434:	e7c8      	b.n	1a3c8 <bt_gatt_attr_write_ccc+0x58>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1a436:	f06f 000c 	mvn.w	r0, #12
   1a43a:	e7c5      	b.n	1a3c8 <bt_gatt_attr_write_ccc+0x58>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1a43c:	f06f 000d 	mvn.w	r0, #13
   1a440:	e7c2      	b.n	1a3c8 <bt_gatt_attr_write_ccc+0x58>
   1a442:	bf00      	nop
   1a444:	00029f04 	.word	0x00029f04
   1a448:	00029ecc 	.word	0x00029ecc
   1a44c:	0002c540 	.word	0x0002c540

0001a450 <ccc_load>:
{
   1a450:	b570      	push	{r4, r5, r6, lr}
   1a452:	b082      	sub	sp, #8
   1a454:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a456:	6882      	ldr	r2, [r0, #8]
   1a458:	4b20      	ldr	r3, [pc, #128]	; (1a4dc <ccc_load+0x8c>)
   1a45a:	429a      	cmp	r2, r3
   1a45c:	d002      	beq.n	1a464 <ccc_load+0x14>
		return BT_GATT_ITER_CONTINUE;
   1a45e:	2001      	movs	r0, #1
}
   1a460:	b002      	add	sp, #8
   1a462:	bd70      	pop	{r4, r5, r6, pc}
	ccc = attr->user_data;
   1a464:	68c5      	ldr	r5, [r0, #12]
	if (!load->entry) {
   1a466:	68a3      	ldr	r3, [r4, #8]
   1a468:	b143      	cbz	r3, 1a47c <ccc_load+0x2c>
	} else if (!load->count) {
   1a46a:	68e2      	ldr	r2, [r4, #12]
   1a46c:	2a00      	cmp	r2, #0
   1a46e:	d033      	beq.n	1a4d8 <ccc_load+0x88>
	if (load->entry->handle != handle) {
   1a470:	881b      	ldrh	r3, [r3, #0]
   1a472:	428b      	cmp	r3, r1
   1a474:	d009      	beq.n	1a48a <ccc_load+0x3a>
		if (load->entry->handle < handle) {
   1a476:	d312      	bcc.n	1a49e <ccc_load+0x4e>
		return BT_GATT_ITER_CONTINUE;
   1a478:	2001      	movs	r0, #1
   1a47a:	e7f1      	b.n	1a460 <ccc_load+0x10>
		ccc_clear(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   1a47c:	7922      	ldrb	r2, [r4, #4]
   1a47e:	6821      	ldr	r1, [r4, #0]
   1a480:	4628      	mov	r0, r5
   1a482:	f00c fb14 	bl	26aae <ccc_clear>
		return BT_GATT_ITER_CONTINUE;
   1a486:	2001      	movs	r0, #1
   1a488:	e7ea      	b.n	1a460 <ccc_load+0x10>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   1a48a:	7922      	ldrb	r2, [r4, #4]
   1a48c:	6821      	ldr	r1, [r4, #0]
   1a48e:	4628      	mov	r0, r5
   1a490:	f00c fadc 	bl	26a4c <ccc_find_cfg>
	if (!cfg) {
   1a494:	4606      	mov	r6, r0
   1a496:	b160      	cbz	r0, 1a4b2 <ccc_load+0x62>
	cfg->value = load->entry->value;
   1a498:	68a3      	ldr	r3, [r4, #8]
   1a49a:	885b      	ldrh	r3, [r3, #2]
   1a49c:	8133      	strh	r3, [r6, #8]
	load->entry++;
   1a49e:	68a3      	ldr	r3, [r4, #8]
   1a4a0:	3304      	adds	r3, #4
   1a4a2:	60a3      	str	r3, [r4, #8]
	load->count--;
   1a4a4:	68e0      	ldr	r0, [r4, #12]
   1a4a6:	3801      	subs	r0, #1
   1a4a8:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1a4aa:	3800      	subs	r0, #0
   1a4ac:	bf18      	it	ne
   1a4ae:	2001      	movne	r0, #1
   1a4b0:	e7d6      	b.n	1a460 <ccc_load+0x10>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   1a4b2:	2200      	movs	r2, #0
   1a4b4:	9200      	str	r2, [sp, #0]
   1a4b6:	f8cd 2003 	str.w	r2, [sp, #3]
   1a4ba:	4669      	mov	r1, sp
   1a4bc:	4628      	mov	r0, r5
   1a4be:	f00c fac5 	bl	26a4c <ccc_find_cfg>
		if (!cfg) {
   1a4c2:	4606      	mov	r6, r0
   1a4c4:	2800      	cmp	r0, #0
   1a4c6:	d0ea      	beq.n	1a49e <ccc_load+0x4e>
   1a4c8:	2207      	movs	r2, #7
   1a4ca:	6821      	ldr	r1, [r4, #0]
   1a4cc:	3001      	adds	r0, #1
   1a4ce:	f00a facd 	bl	24a6c <memcpy>
		cfg->id = load->addr_with_id.id;
   1a4d2:	7923      	ldrb	r3, [r4, #4]
   1a4d4:	7033      	strb	r3, [r6, #0]
   1a4d6:	e7df      	b.n	1a498 <ccc_load+0x48>
		return BT_GATT_ITER_STOP;
   1a4d8:	2000      	movs	r0, #0
   1a4da:	e7c1      	b.n	1a460 <ccc_load+0x10>
   1a4dc:	0001a371 	.word	0x0001a371

0001a4e0 <sc_store>:
{
   1a4e0:	b530      	push	{r4, r5, lr}
   1a4e2:	b08d      	sub	sp, #52	; 0x34
   1a4e4:	4604      	mov	r4, r0
	if (cfg->id) {
   1a4e6:	7802      	ldrb	r2, [r0, #0]
   1a4e8:	b1aa      	cbz	r2, 1a516 <sc_store+0x36>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   1a4ea:	ad02      	add	r5, sp, #8
   1a4ec:	2104      	movs	r1, #4
   1a4ee:	4628      	mov	r0, r5
   1a4f0:	f7f5 fd6c 	bl	ffcc <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   1a4f4:	9500      	str	r5, [sp, #0]
   1a4f6:	1c63      	adds	r3, r4, #1
   1a4f8:	4a14      	ldr	r2, [pc, #80]	; (1a54c <sc_store+0x6c>)
   1a4fa:	2124      	movs	r1, #36	; 0x24
   1a4fc:	a803      	add	r0, sp, #12
   1a4fe:	f7fa fa05 	bl	1490c <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   1a502:	2204      	movs	r2, #4
   1a504:	f104 0108 	add.w	r1, r4, #8
   1a508:	a803      	add	r0, sp, #12
   1a50a:	f7f7 fd03 	bl	11f14 <settings_save_one>
	if (err) {
   1a50e:	4601      	mov	r1, r0
   1a510:	b950      	cbnz	r0, 1a528 <sc_store+0x48>
}
   1a512:	b00d      	add	sp, #52	; 0x34
   1a514:	bd30      	pop	{r4, r5, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   1a516:	2300      	movs	r3, #0
   1a518:	9300      	str	r3, [sp, #0]
   1a51a:	1c43      	adds	r3, r0, #1
   1a51c:	4a0b      	ldr	r2, [pc, #44]	; (1a54c <sc_store+0x6c>)
   1a51e:	2124      	movs	r1, #36	; 0x24
   1a520:	a803      	add	r0, sp, #12
   1a522:	f7fa f9f3 	bl	1490c <bt_settings_encode_key>
   1a526:	e7ec      	b.n	1a502 <sc_store+0x22>
   1a528:	4b09      	ldr	r3, [pc, #36]	; (1a550 <sc_store+0x70>)
   1a52a:	4a0a      	ldr	r2, [pc, #40]	; (1a554 <sc_store+0x74>)
   1a52c:	1a9b      	subs	r3, r3, r2
   1a52e:	08db      	lsrs	r3, r3, #3
		BT_ERR("failed to store SC (err %d)", err);
   1a530:	f04f 0200 	mov.w	r2, #0
   1a534:	2001      	movs	r0, #1
   1a536:	f360 0202 	bfi	r2, r0, #0, #3
   1a53a:	f36f 02c5 	bfc	r2, #3, #3
   1a53e:	f363 128f 	bfi	r2, r3, #6, #10
   1a542:	4805      	ldr	r0, [pc, #20]	; (1a558 <sc_store+0x78>)
   1a544:	f7f6 fde4 	bl	11110 <log_1>
		return;
   1a548:	e7e3      	b.n	1a512 <sc_store+0x32>
   1a54a:	bf00      	nop
   1a54c:	0002c55c 	.word	0x0002c55c
   1a550:	00029f04 	.word	0x00029f04
   1a554:	00029ecc 	.word	0x00029ecc
   1a558:	0002c560 	.word	0x0002c560

0001a55c <sc_save>:
{
   1a55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a560:	b082      	sub	sp, #8
   1a562:	4607      	mov	r7, r0
   1a564:	4688      	mov	r8, r1
   1a566:	4616      	mov	r6, r2
   1a568:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1a56a:	f7ff fe49 	bl	1a200 <find_sc_cfg>
	if (!cfg) {
   1a56e:	4604      	mov	r4, r0
   1a570:	b1a8      	cbz	r0, 1a59e <sc_save+0x42>
	if (!(cfg->data.start || cfg->data.end)) {
   1a572:	8923      	ldrh	r3, [r4, #8]
   1a574:	b90b      	cbnz	r3, 1a57a <sc_save+0x1e>
   1a576:	8963      	ldrh	r3, [r4, #10]
   1a578:	b38b      	cbz	r3, 1a5de <sc_save+0x82>
	modified = update_range(&cfg->data.start, &cfg->data.end, start, end);
   1a57a:	462b      	mov	r3, r5
   1a57c:	4632      	mov	r2, r6
   1a57e:	f104 010a 	add.w	r1, r4, #10
   1a582:	f104 0008 	add.w	r0, r4, #8
   1a586:	f00c f937 	bl	267f8 <update_range>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   1a58a:	b128      	cbz	r0, 1a598 <sc_save+0x3c>
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   1a58c:	4621      	mov	r1, r4
   1a58e:	f811 0b01 	ldrb.w	r0, [r1], #1
   1a592:	f00a fd63 	bl	2505c <bt_addr_le_is_bonded>
   1a596:	bb28      	cbnz	r0, 1a5e4 <sc_save+0x88>
}
   1a598:	b002      	add	sp, #8
   1a59a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1a59e:	9000      	str	r0, [sp, #0]
   1a5a0:	f8cd 0003 	str.w	r0, [sp, #3]
   1a5a4:	4669      	mov	r1, sp
   1a5a6:	f7ff fe2b 	bl	1a200 <find_sc_cfg>
		if (!cfg) {
   1a5aa:	4604      	mov	r4, r0
   1a5ac:	b130      	cbz	r0, 1a5bc <sc_save+0x60>
		cfg->id = id;
   1a5ae:	f800 7b01 	strb.w	r7, [r0], #1
   1a5b2:	2207      	movs	r2, #7
   1a5b4:	4641      	mov	r1, r8
   1a5b6:	f00a fa59 	bl	24a6c <memcpy>
   1a5ba:	e7da      	b.n	1a572 <sc_save+0x16>
   1a5bc:	4b0b      	ldr	r3, [pc, #44]	; (1a5ec <sc_save+0x90>)
   1a5be:	4a0c      	ldr	r2, [pc, #48]	; (1a5f0 <sc_save+0x94>)
   1a5c0:	1a9b      	subs	r3, r3, r2
   1a5c2:	08db      	lsrs	r3, r3, #3
			BT_ERR("unable to save SC: no cfg left");
   1a5c4:	f04f 0100 	mov.w	r1, #0
   1a5c8:	2201      	movs	r2, #1
   1a5ca:	f362 0102 	bfi	r1, r2, #0, #3
   1a5ce:	f36f 01c5 	bfc	r1, #3, #3
   1a5d2:	f363 118f 	bfi	r1, r3, #6, #10
   1a5d6:	4807      	ldr	r0, [pc, #28]	; (1a5f4 <sc_save+0x98>)
   1a5d8:	f7f6 fe50 	bl	1127c <log_0>
			return;
   1a5dc:	e7dc      	b.n	1a598 <sc_save+0x3c>
		cfg->data.start = start;
   1a5de:	8126      	strh	r6, [r4, #8]
		cfg->data.end = end;
   1a5e0:	8165      	strh	r5, [r4, #10]
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   1a5e2:	e7d3      	b.n	1a58c <sc_save+0x30>
		sc_store(cfg);
   1a5e4:	4620      	mov	r0, r4
   1a5e6:	f7ff ff7b 	bl	1a4e0 <sc_store>
   1a5ea:	e7d5      	b.n	1a598 <sc_save+0x3c>
   1a5ec:	00029f04 	.word	0x00029f04
   1a5f0:	00029ecc 	.word	0x00029ecc
   1a5f4:	0002c57c 	.word	0x0002c57c

0001a5f8 <bt_gatt_store_cf>:
{
   1a5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a5fa:	b08d      	sub	sp, #52	; 0x34
   1a5fc:	4604      	mov	r4, r0
	cfg = find_cf_cfg(conn);
   1a5fe:	f7ff fdd5 	bl	1a1ac <find_cf_cfg>
	if (!cfg) {
   1a602:	4605      	mov	r5, r0
   1a604:	b348      	cbz	r0, 1a65a <bt_gatt_store_cf+0x62>
		str = (char *)cfg->data;
   1a606:	f100 0608 	add.w	r6, r0, #8
		if (conn->id) {
   1a60a:	7a22      	ldrb	r2, [r4, #8]
   1a60c:	b9b2      	cbnz	r2, 1a63c <bt_gatt_store_cf+0x44>
		len = sizeof(cfg->data);
   1a60e:	2701      	movs	r7, #1
	if (!cfg || !conn->id) {
   1a610:	b10d      	cbz	r5, 1a616 <bt_gatt_store_cf+0x1e>
   1a612:	7a23      	ldrb	r3, [r4, #8]
   1a614:	b943      	cbnz	r3, 1a628 <bt_gatt_store_cf+0x30>
		bt_settings_encode_key(key, sizeof(key), "cf",
   1a616:	2300      	movs	r3, #0
   1a618:	9300      	str	r3, [sp, #0]
   1a61a:	f104 0388 	add.w	r3, r4, #136	; 0x88
   1a61e:	4a19      	ldr	r2, [pc, #100]	; (1a684 <bt_gatt_store_cf+0x8c>)
   1a620:	2124      	movs	r1, #36	; 0x24
   1a622:	a803      	add	r0, sp, #12
   1a624:	f7fa f972 	bl	1490c <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   1a628:	463a      	mov	r2, r7
   1a62a:	4631      	mov	r1, r6
   1a62c:	a803      	add	r0, sp, #12
   1a62e:	f7f7 fc71 	bl	11f14 <settings_save_one>
	if (err) {
   1a632:	4604      	mov	r4, r0
   1a634:	b9a0      	cbnz	r0, 1a660 <bt_gatt_store_cf+0x68>
}
   1a636:	4620      	mov	r0, r4
   1a638:	b00d      	add	sp, #52	; 0x34
   1a63a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1a63c:	af02      	add	r7, sp, #8
   1a63e:	2104      	movs	r1, #4
   1a640:	4638      	mov	r0, r7
   1a642:	f7f5 fcc3 	bl	ffcc <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1a646:	9700      	str	r7, [sp, #0]
   1a648:	f104 0388 	add.w	r3, r4, #136	; 0x88
   1a64c:	4a0d      	ldr	r2, [pc, #52]	; (1a684 <bt_gatt_store_cf+0x8c>)
   1a64e:	2124      	movs	r1, #36	; 0x24
   1a650:	a803      	add	r0, sp, #12
   1a652:	f7fa f95b 	bl	1490c <bt_settings_encode_key>
		len = sizeof(cfg->data);
   1a656:	2701      	movs	r7, #1
   1a658:	e7da      	b.n	1a610 <bt_gatt_store_cf+0x18>
		str = NULL;
   1a65a:	4606      	mov	r6, r0
		len = 0;
   1a65c:	2700      	movs	r7, #0
   1a65e:	e7d7      	b.n	1a610 <bt_gatt_store_cf+0x18>
   1a660:	4b09      	ldr	r3, [pc, #36]	; (1a688 <bt_gatt_store_cf+0x90>)
   1a662:	4a0a      	ldr	r2, [pc, #40]	; (1a68c <bt_gatt_store_cf+0x94>)
   1a664:	1a9b      	subs	r3, r3, r2
   1a666:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to store Client Features (err %d)", err);
   1a668:	f04f 0200 	mov.w	r2, #0
   1a66c:	2101      	movs	r1, #1
   1a66e:	f361 0202 	bfi	r2, r1, #0, #3
   1a672:	f36f 02c5 	bfc	r2, #3, #3
   1a676:	f363 128f 	bfi	r2, r3, #6, #10
   1a67a:	4601      	mov	r1, r0
   1a67c:	4804      	ldr	r0, [pc, #16]	; (1a690 <bt_gatt_store_cf+0x98>)
   1a67e:	f7f6 fd47 	bl	11110 <log_1>
		return err;
   1a682:	e7d8      	b.n	1a636 <bt_gatt_store_cf+0x3e>
   1a684:	0002c59c 	.word	0x0002c59c
   1a688:	00029f04 	.word	0x00029f04
   1a68c:	00029ecc 	.word	0x00029ecc
   1a690:	0002c5a0 	.word	0x0002c5a0

0001a694 <bt_gatt_clear_sc>:
{
   1a694:	b530      	push	{r4, r5, lr}
   1a696:	b08d      	sub	sp, #52	; 0x34
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1a698:	f7ff fdb2 	bl	1a200 <find_sc_cfg>
	if (!cfg) {
   1a69c:	b1b0      	cbz	r0, 1a6cc <bt_gatt_clear_sc+0x38>
   1a69e:	4604      	mov	r4, r0
		if (cfg->id) {
   1a6a0:	7802      	ldrb	r2, [r0, #0]
   1a6a2:	b1b2      	cbz	r2, 1a6d2 <bt_gatt_clear_sc+0x3e>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   1a6a4:	ad02      	add	r5, sp, #8
   1a6a6:	2104      	movs	r1, #4
   1a6a8:	4628      	mov	r0, r5
   1a6aa:	f7f5 fc8f 	bl	ffcc <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   1a6ae:	9500      	str	r5, [sp, #0]
   1a6b0:	1c63      	adds	r3, r4, #1
   1a6b2:	4a15      	ldr	r2, [pc, #84]	; (1a708 <bt_gatt_clear_sc+0x74>)
   1a6b4:	2124      	movs	r1, #36	; 0x24
   1a6b6:	a803      	add	r0, sp, #12
   1a6b8:	f7fa f928 	bl	1490c <bt_settings_encode_key>
		err = settings_delete(key);
   1a6bc:	a803      	add	r0, sp, #12
   1a6be:	f008 fd85 	bl	231cc <settings_delete>
		if (err) {
   1a6c2:	4601      	mov	r1, r0
   1a6c4:	b970      	cbnz	r0, 1a6e4 <bt_gatt_clear_sc+0x50>
	clear_sc_cfg(cfg);
   1a6c6:	4620      	mov	r0, r4
   1a6c8:	f00c f9f8 	bl	26abc <clear_sc_cfg>
}
   1a6cc:	2000      	movs	r0, #0
   1a6ce:	b00d      	add	sp, #52	; 0x34
   1a6d0:	bd30      	pop	{r4, r5, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   1a6d2:	2300      	movs	r3, #0
   1a6d4:	9300      	str	r3, [sp, #0]
   1a6d6:	1c43      	adds	r3, r0, #1
   1a6d8:	4a0b      	ldr	r2, [pc, #44]	; (1a708 <bt_gatt_clear_sc+0x74>)
   1a6da:	2124      	movs	r1, #36	; 0x24
   1a6dc:	a803      	add	r0, sp, #12
   1a6de:	f7fa f915 	bl	1490c <bt_settings_encode_key>
   1a6e2:	e7eb      	b.n	1a6bc <bt_gatt_clear_sc+0x28>
   1a6e4:	4b09      	ldr	r3, [pc, #36]	; (1a70c <bt_gatt_clear_sc+0x78>)
   1a6e6:	4a0a      	ldr	r2, [pc, #40]	; (1a710 <bt_gatt_clear_sc+0x7c>)
   1a6e8:	1a9b      	subs	r3, r3, r2
   1a6ea:	08db      	lsrs	r3, r3, #3
			BT_ERR("failed to delete SC (err %d)", err);
   1a6ec:	f04f 0200 	mov.w	r2, #0
   1a6f0:	2001      	movs	r0, #1
   1a6f2:	f360 0202 	bfi	r2, r0, #0, #3
   1a6f6:	f36f 02c5 	bfc	r2, #3, #3
   1a6fa:	f363 128f 	bfi	r2, r3, #6, #10
   1a6fe:	4805      	ldr	r0, [pc, #20]	; (1a714 <bt_gatt_clear_sc+0x80>)
   1a700:	f7f6 fd06 	bl	11110 <log_1>
   1a704:	e7df      	b.n	1a6c6 <bt_gatt_clear_sc+0x32>
   1a706:	bf00      	nop
   1a708:	0002c55c 	.word	0x0002c55c
   1a70c:	00029f04 	.word	0x00029f04
   1a710:	00029ecc 	.word	0x00029ecc
   1a714:	0002c5cc 	.word	0x0002c5cc

0001a718 <sc_clear>:
{
   1a718:	b538      	push	{r3, r4, r5, lr}
   1a71a:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a71c:	f100 0588 	add.w	r5, r0, #136	; 0x88
   1a720:	4629      	mov	r1, r5
   1a722:	7a00      	ldrb	r0, [r0, #8]
   1a724:	f00a fc9a 	bl	2505c <bt_addr_le_is_bonded>
   1a728:	b1b8      	cbz	r0, 1a75a <sc_clear+0x42>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1a72a:	4629      	mov	r1, r5
   1a72c:	7a20      	ldrb	r0, [r4, #8]
   1a72e:	f7ff ffb1 	bl	1a694 <bt_gatt_clear_sc>
		if (err) {
   1a732:	4601      	mov	r1, r0
   1a734:	b900      	cbnz	r0, 1a738 <sc_clear+0x20>
}
   1a736:	bd38      	pop	{r3, r4, r5, pc}
   1a738:	4b0c      	ldr	r3, [pc, #48]	; (1a76c <sc_clear+0x54>)
   1a73a:	4a0d      	ldr	r2, [pc, #52]	; (1a770 <sc_clear+0x58>)
   1a73c:	1a9b      	subs	r3, r3, r2
   1a73e:	08db      	lsrs	r3, r3, #3
			BT_ERR("Failed to clear SC %d", err);
   1a740:	f04f 0200 	mov.w	r2, #0
   1a744:	2001      	movs	r0, #1
   1a746:	f360 0202 	bfi	r2, r0, #0, #3
   1a74a:	f36f 02c5 	bfc	r2, #3, #3
   1a74e:	f363 128f 	bfi	r2, r3, #6, #10
   1a752:	4808      	ldr	r0, [pc, #32]	; (1a774 <sc_clear+0x5c>)
   1a754:	f7f6 fcdc 	bl	11110 <log_1>
   1a758:	e7ed      	b.n	1a736 <sc_clear+0x1e>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1a75a:	4629      	mov	r1, r5
   1a75c:	7a20      	ldrb	r0, [r4, #8]
   1a75e:	f7ff fd4f 	bl	1a200 <find_sc_cfg>
		if (cfg) {
   1a762:	2800      	cmp	r0, #0
   1a764:	d0e7      	beq.n	1a736 <sc_clear+0x1e>
			clear_sc_cfg(cfg);
   1a766:	f00c f9a9 	bl	26abc <clear_sc_cfg>
}
   1a76a:	e7e4      	b.n	1a736 <sc_clear+0x1e>
   1a76c:	00029f04 	.word	0x00029f04
   1a770:	00029ecc 	.word	0x00029ecc
   1a774:	0002c5ec 	.word	0x0002c5ec

0001a778 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   1a778:	b508      	push	{r3, lr}
   1a77a:	4613      	mov	r3, r2
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a77c:	6881      	ldr	r1, [r0, #8]
   1a77e:	4a08      	ldr	r2, [pc, #32]	; (1a7a0 <remove_peer_from_attr+0x28>)
   1a780:	4291      	cmp	r1, r2
   1a782:	d001      	beq.n	1a788 <remove_peer_from_attr+0x10>
	if (cfg) {
		memset(cfg, 0, sizeof(*cfg));
	}

	return BT_GATT_ITER_CONTINUE;
}
   1a784:	2001      	movs	r0, #1
   1a786:	bd08      	pop	{r3, pc}
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   1a788:	791a      	ldrb	r2, [r3, #4]
   1a78a:	6819      	ldr	r1, [r3, #0]
   1a78c:	68c0      	ldr	r0, [r0, #12]
   1a78e:	f00c f95d 	bl	26a4c <ccc_find_cfg>
	if (cfg) {
   1a792:	2800      	cmp	r0, #0
   1a794:	d0f6      	beq.n	1a784 <remove_peer_from_attr+0xc>
		memset(cfg, 0, sizeof(*cfg));
   1a796:	220a      	movs	r2, #10
   1a798:	2100      	movs	r1, #0
   1a79a:	f00a f98b 	bl	24ab4 <memset>
   1a79e:	e7f1      	b.n	1a784 <remove_peer_from_attr+0xc>
   1a7a0:	0001a371 	.word	0x0001a371

0001a7a4 <sc_indicate>:
{
   1a7a4:	b510      	push	{r4, lr}
   1a7a6:	4602      	mov	r2, r0
   1a7a8:	4c17      	ldr	r4, [pc, #92]	; (1a808 <sc_indicate+0x64>)
   1a7aa:	f3bf 8f5b 	dmb	ish
   1a7ae:	e854 3f00 	ldrex	r3, [r4]
   1a7b2:	f043 0001 	orr.w	r0, r3, #1
   1a7b6:	e844 0c00 	strex	ip, r0, [r4]
   1a7ba:	f1bc 0f00 	cmp.w	ip, #0
   1a7be:	d1f6      	bne.n	1a7ae <sc_indicate+0xa>
   1a7c0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1a7c4:	f013 0f01 	tst.w	r3, #1
   1a7c8:	d10d      	bne.n	1a7e6 <sc_indicate+0x42>
		gatt_sc.start = start;
   1a7ca:	f1a4 0350 	sub.w	r3, r4, #80	; 0x50
   1a7ce:	831a      	strh	r2, [r3, #24]
		gatt_sc.end = end;
   1a7d0:	8359      	strh	r1, [r3, #26]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a7d2:	f3bf 8f5b 	dmb	ish
   1a7d6:	4b0d      	ldr	r3, [pc, #52]	; (1a80c <sc_indicate+0x68>)
   1a7d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1a7da:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   1a7de:	f013 0f02 	tst.w	r3, #2
   1a7e2:	d00a      	beq.n	1a7fa <sc_indicate+0x56>
}
   1a7e4:	bd10      	pop	{r4, pc}
	if (!update_range(&gatt_sc.start, &gatt_sc.end, start, end)) {
   1a7e6:	4809      	ldr	r0, [pc, #36]	; (1a80c <sc_indicate+0x68>)
   1a7e8:	460b      	mov	r3, r1
   1a7ea:	f100 011a 	add.w	r1, r0, #26
   1a7ee:	3018      	adds	r0, #24
   1a7f0:	f00c f802 	bl	267f8 <update_range>
   1a7f4:	2800      	cmp	r0, #0
   1a7f6:	d1ec      	bne.n	1a7d2 <sc_indicate+0x2e>
   1a7f8:	e7f4      	b.n	1a7e4 <sc_indicate+0x40>
	k_work_reschedule(&gatt_sc.work, timeout);
   1a7fa:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1a7fe:	2300      	movs	r3, #0
   1a800:	4803      	ldr	r0, [pc, #12]	; (1a810 <sc_indicate+0x6c>)
   1a802:	f005 fcd5 	bl	201b0 <k_work_reschedule>
   1a806:	e7ed      	b.n	1a7e4 <sc_indicate+0x40>
   1a808:	20001c10 	.word	0x20001c10
   1a80c:	20001bc0 	.word	0x20001bc0
   1a810:	20001be0 	.word	0x20001be0

0001a814 <db_hash_commit>:
{
   1a814:	b508      	push	{r3, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1a816:	4b0a      	ldr	r3, [pc, #40]	; (1a840 <db_hash_commit+0x2c>)
   1a818:	f3bf 8f5b 	dmb	ish
   1a81c:	e853 2f00 	ldrex	r2, [r3]
   1a820:	f042 0208 	orr.w	r2, r2, #8
   1a824:	e843 2100 	strex	r1, r2, [r3]
   1a828:	2900      	cmp	r1, #0
   1a82a:	d1f7      	bne.n	1a81c <db_hash_commit+0x8>
   1a82c:	f3bf 8f5b 	dmb	ish
	k_work_reschedule(&db_hash.work, K_NO_WAIT);
   1a830:	2200      	movs	r2, #0
   1a832:	2300      	movs	r3, #0
   1a834:	4803      	ldr	r0, [pc, #12]	; (1a844 <db_hash_commit+0x30>)
   1a836:	f005 fcbb 	bl	201b0 <k_work_reschedule>
}
   1a83a:	2000      	movs	r0, #0
   1a83c:	bd08      	pop	{r3, pc}
   1a83e:	bf00      	nop
   1a840:	20001c10 	.word	0x20001c10
   1a844:	20001b68 	.word	0x20001b68

0001a848 <sc_indicate_rsp>:
{
   1a848:	b510      	push	{r4, lr}
   1a84a:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1a84c:	4b19      	ldr	r3, [pc, #100]	; (1a8b4 <sc_indicate_rsp+0x6c>)
   1a84e:	f103 0250 	add.w	r2, r3, #80	; 0x50
   1a852:	f3bf 8f5b 	dmb	ish
   1a856:	e852 1f00 	ldrex	r1, [r2]
   1a85a:	f021 0102 	bic.w	r1, r1, #2
   1a85e:	e842 1000 	strex	r0, r1, [r2]
   1a862:	2800      	cmp	r0, #0
   1a864:	d1f7      	bne.n	1a856 <sc_indicate_rsp+0xe>
   1a866:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a86a:	f3bf 8f5b 	dmb	ish
   1a86e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1a870:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1a874:	f013 0f01 	tst.w	r3, #1
   1a878:	d116      	bne.n	1a8a8 <sc_indicate_rsp+0x60>
	cfg = find_cf_cfg(conn);
   1a87a:	4620      	mov	r0, r4
   1a87c:	f7ff fc96 	bl	1a1ac <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1a880:	4603      	mov	r3, r0
   1a882:	b180      	cbz	r0, 1a8a6 <sc_indicate_rsp+0x5e>
   1a884:	7a02      	ldrb	r2, [r0, #8]
   1a886:	f012 0f01 	tst.w	r2, #1
   1a88a:	d00c      	beq.n	1a8a6 <sc_indicate_rsp+0x5e>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1a88c:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1a88e:	f3bf 8f5b 	dmb	ish
   1a892:	e853 2f00 	ldrex	r2, [r3]
   1a896:	f042 0201 	orr.w	r2, r2, #1
   1a89a:	e843 2100 	strex	r1, r2, [r3]
   1a89e:	2900      	cmp	r1, #0
   1a8a0:	d1f7      	bne.n	1a892 <sc_indicate_rsp+0x4a>
   1a8a2:	f3bf 8f5b 	dmb	ish
}
   1a8a6:	bd10      	pop	{r4, pc}
	k_work_reschedule(&gatt_sc.work, timeout);
   1a8a8:	2200      	movs	r2, #0
   1a8aa:	2300      	movs	r3, #0
   1a8ac:	4802      	ldr	r0, [pc, #8]	; (1a8b8 <sc_indicate_rsp+0x70>)
   1a8ae:	f005 fc7f 	bl	201b0 <k_work_reschedule>
   1a8b2:	e7e2      	b.n	1a87a <sc_indicate_rsp+0x32>
   1a8b4:	20001bc0 	.word	0x20001bc0
   1a8b8:	20001be0 	.word	0x20001be0

0001a8bc <sc_commit>:
{
   1a8bc:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1a8be:	4b10      	ldr	r3, [pc, #64]	; (1a900 <sc_commit+0x44>)
   1a8c0:	f103 0250 	add.w	r2, r3, #80	; 0x50
   1a8c4:	f3bf 8f5b 	dmb	ish
   1a8c8:	e852 1f00 	ldrex	r1, [r2]
   1a8cc:	f021 0102 	bic.w	r1, r1, #2
   1a8d0:	e842 1000 	strex	r0, r1, [r2]
   1a8d4:	2800      	cmp	r0, #0
   1a8d6:	d1f7      	bne.n	1a8c8 <sc_commit+0xc>
   1a8d8:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a8dc:	f3bf 8f5b 	dmb	ish
   1a8e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1a8e2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1a8e6:	f013 0f01 	tst.w	r3, #1
   1a8ea:	d101      	bne.n	1a8f0 <sc_commit+0x34>
}
   1a8ec:	2000      	movs	r0, #0
   1a8ee:	bd08      	pop	{r3, pc}
	k_work_reschedule(&gatt_sc.work, timeout);
   1a8f0:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1a8f4:	2300      	movs	r3, #0
   1a8f6:	4803      	ldr	r0, [pc, #12]	; (1a904 <sc_commit+0x48>)
   1a8f8:	f005 fc5a 	bl	201b0 <k_work_reschedule>
   1a8fc:	e7f6      	b.n	1a8ec <sc_commit+0x30>
   1a8fe:	bf00      	nop
   1a900:	20001bc0 	.word	0x20001bc0
   1a904:	20001be0 	.word	0x20001be0

0001a908 <disconnected_cb>:
{
   1a908:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a90c:	6881      	ldr	r1, [r0, #8]
   1a90e:	4b2e      	ldr	r3, [pc, #184]	; (1a9c8 <disconnected_cb+0xc0>)
   1a910:	4299      	cmp	r1, r3
   1a912:	d002      	beq.n	1a91a <disconnected_cb+0x12>
}
   1a914:	2001      	movs	r0, #1
   1a916:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a91a:	4605      	mov	r5, r0
   1a91c:	4690      	mov	r8, r2
	ccc = attr->user_data;
   1a91e:	68c6      	ldr	r6, [r0, #12]
	if (!ccc->value) {
   1a920:	8ab3      	ldrh	r3, [r6, #20]
   1a922:	2b00      	cmp	r3, #0
   1a924:	d0f6      	beq.n	1a914 <disconnected_cb+0xc>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1a926:	2400      	movs	r4, #0
	value_used = false;
   1a928:	46a2      	mov	sl, r4
   1a92a:	e003      	b.n	1a934 <disconnected_cb+0x2c>
				bt_conn_unref(tmp);
   1a92c:	4618      	mov	r0, r3
   1a92e:	f00a ffe3 	bl	258f8 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1a932:	3401      	adds	r4, #1
   1a934:	2c01      	cmp	r4, #1
   1a936:	d83a      	bhi.n	1a9ae <disconnected_cb+0xa6>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1a938:	eb04 0784 	add.w	r7, r4, r4, lsl #2
   1a93c:	eb06 0747 	add.w	r7, r6, r7, lsl #1
		if (!cfg->value) {
   1a940:	893b      	ldrh	r3, [r7, #8]
   1a942:	2b00      	cmp	r3, #0
   1a944:	d0f5      	beq.n	1a932 <disconnected_cb+0x2a>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1a946:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1a94a:	f107 0901 	add.w	r9, r7, #1
   1a94e:	464a      	mov	r2, r9
   1a950:	f816 1013 	ldrb.w	r1, [r6, r3, lsl #1]
   1a954:	4640      	mov	r0, r8
   1a956:	f00a ff81 	bl	2585c <bt_conn_is_peer_addr_le>
   1a95a:	b978      	cbnz	r0, 1a97c <disconnected_cb+0x74>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1a95c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1a960:	4649      	mov	r1, r9
   1a962:	f816 0013 	ldrb.w	r0, [r6, r3, lsl #1]
   1a966:	f7fd ff11 	bl	1878c <bt_conn_lookup_addr_le>
			if (tmp) {
   1a96a:	4603      	mov	r3, r0
   1a96c:	2800      	cmp	r0, #0
   1a96e:	d0e0      	beq.n	1a932 <disconnected_cb+0x2a>
				if (tmp->state == BT_CONN_CONNECTED) {
   1a970:	7b42      	ldrb	r2, [r0, #13]
   1a972:	2a07      	cmp	r2, #7
   1a974:	d1da      	bne.n	1a92c <disconnected_cb+0x24>
					value_used = true;
   1a976:	f04f 0a01 	mov.w	sl, #1
   1a97a:	e7d7      	b.n	1a92c <disconnected_cb+0x24>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a97c:	f108 0b88 	add.w	fp, r8, #136	; 0x88
   1a980:	4659      	mov	r1, fp
   1a982:	f898 0008 	ldrb.w	r0, [r8, #8]
   1a986:	f00a fb69 	bl	2505c <bt_addr_le_is_bonded>
   1a98a:	b950      	cbnz	r0, 1a9a2 <disconnected_cb+0x9a>
				if (ccc == &sc_ccc) {
   1a98c:	4b0f      	ldr	r3, [pc, #60]	; (1a9cc <disconnected_cb+0xc4>)
   1a98e:	429e      	cmp	r6, r3
   1a990:	d003      	beq.n	1a99a <disconnected_cb+0x92>
				clear_ccc_cfg(cfg);
   1a992:	4638      	mov	r0, r7
   1a994:	f00c f87b 	bl	26a8e <clear_ccc_cfg>
   1a998:	e7cb      	b.n	1a932 <disconnected_cb+0x2a>
					sc_clear(conn);
   1a99a:	4640      	mov	r0, r8
   1a99c:	f7ff febc 	bl	1a718 <sc_clear>
   1a9a0:	e7f7      	b.n	1a992 <disconnected_cb+0x8a>
   1a9a2:	2207      	movs	r2, #7
   1a9a4:	4659      	mov	r1, fp
   1a9a6:	4648      	mov	r0, r9
   1a9a8:	f00a f860 	bl	24a6c <memcpy>
}
   1a9ac:	e7c1      	b.n	1a932 <disconnected_cb+0x2a>
	if (!value_used) {
   1a9ae:	f1ba 0f00 	cmp.w	sl, #0
   1a9b2:	d1af      	bne.n	1a914 <disconnected_cb+0xc>
		ccc->value = 0U;
   1a9b4:	2300      	movs	r3, #0
   1a9b6:	82b3      	strh	r3, [r6, #20]
		if (ccc->cfg_changed) {
   1a9b8:	69b3      	ldr	r3, [r6, #24]
   1a9ba:	2b00      	cmp	r3, #0
   1a9bc:	d0aa      	beq.n	1a914 <disconnected_cb+0xc>
			ccc->cfg_changed(attr, ccc->value);
   1a9be:	2100      	movs	r1, #0
   1a9c0:	4628      	mov	r0, r5
   1a9c2:	4798      	blx	r3
   1a9c4:	e7a6      	b.n	1a914 <disconnected_cb+0xc>
   1a9c6:	bf00      	nop
   1a9c8:	0001a371 	.word	0x0001a371
   1a9cc:	20000628 	.word	0x20000628

0001a9d0 <sc_set>:
{
   1a9d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a9d4:	b087      	sub	sp, #28
	if (!name) {
   1a9d6:	b348      	cbz	r0, 1aa2c <sc_set+0x5c>
   1a9d8:	460c      	mov	r4, r1
   1a9da:	4615      	mov	r5, r2
   1a9dc:	461e      	mov	r6, r3
   1a9de:	4607      	mov	r7, r0
	err = bt_settings_decode_key(name, &addr);
   1a9e0:	a902      	add	r1, sp, #8
   1a9e2:	f00a f942 	bl	24c6a <bt_settings_decode_key>
	if (err) {
   1a9e6:	4680      	mov	r8, r0
   1a9e8:	2800      	cmp	r0, #0
   1a9ea:	d132      	bne.n	1aa52 <sc_set+0x82>
	settings_name_next(name, &next);
   1a9ec:	a901      	add	r1, sp, #4
   1a9ee:	4638      	mov	r0, r7
   1a9f0:	f008 fc1c 	bl	2322c <settings_name_next>
	if (!next) {
   1a9f4:	9801      	ldr	r0, [sp, #4]
   1a9f6:	2800      	cmp	r0, #0
   1a9f8:	d043      	beq.n	1aa82 <sc_set+0xb2>
		id = strtol(next, NULL, 10);
   1a9fa:	220a      	movs	r2, #10
   1a9fc:	2100      	movs	r1, #0
   1a9fe:	f009 ff3f 	bl	24880 <strtol>
   1aa02:	b2c7      	uxtb	r7, r0
	cfg = find_sc_cfg(id, &addr);
   1aa04:	a902      	add	r1, sp, #8
   1aa06:	4638      	mov	r0, r7
   1aa08:	f7ff fbfa 	bl	1a200 <find_sc_cfg>
	if (!cfg && len_rd) {
   1aa0c:	4681      	mov	r9, r0
   1aa0e:	2800      	cmp	r0, #0
   1aa10:	d039      	beq.n	1aa86 <sc_set+0xb6>
	if (len_rd) {
   1aa12:	2c00      	cmp	r4, #0
   1aa14:	d06e      	beq.n	1aaf4 <sc_set+0x124>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   1aa16:	2204      	movs	r2, #4
   1aa18:	f109 0108 	add.w	r1, r9, #8
   1aa1c:	4630      	mov	r0, r6
   1aa1e:	47a8      	blx	r5
		if (len < 0) {
   1aa20:	1e04      	subs	r4, r0, #0
   1aa22:	db54      	blt.n	1aace <sc_set+0xfe>
}
   1aa24:	4640      	mov	r0, r8
   1aa26:	b007      	add	sp, #28
   1aa28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1aa2c:	4b36      	ldr	r3, [pc, #216]	; (1ab08 <sc_set+0x138>)
   1aa2e:	4a37      	ldr	r2, [pc, #220]	; (1ab0c <sc_set+0x13c>)
   1aa30:	1a9b      	subs	r3, r3, r2
   1aa32:	08db      	lsrs	r3, r3, #3
		BT_ERR("Insufficient number of arguments");
   1aa34:	f04f 0100 	mov.w	r1, #0
   1aa38:	2201      	movs	r2, #1
   1aa3a:	f362 0102 	bfi	r1, r2, #0, #3
   1aa3e:	f36f 01c5 	bfc	r1, #3, #3
   1aa42:	f363 118f 	bfi	r1, r3, #6, #10
   1aa46:	4832      	ldr	r0, [pc, #200]	; (1ab10 <sc_set+0x140>)
   1aa48:	f7f6 fc18 	bl	1127c <log_0>
		return -EINVAL;
   1aa4c:	f06f 0815 	mvn.w	r8, #21
   1aa50:	e7e8      	b.n	1aa24 <sc_set+0x54>
   1aa52:	4b2d      	ldr	r3, [pc, #180]	; (1ab08 <sc_set+0x138>)
   1aa54:	4a2d      	ldr	r2, [pc, #180]	; (1ab0c <sc_set+0x13c>)
   1aa56:	1a9b      	subs	r3, r3, r2
   1aa58:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to decode address %s", log_strdup(name));
   1aa5a:	f04f 0400 	mov.w	r4, #0
   1aa5e:	2201      	movs	r2, #1
   1aa60:	f362 0402 	bfi	r4, r2, #0, #3
   1aa64:	f36f 04c5 	bfc	r4, #3, #3
   1aa68:	f363 148f 	bfi	r4, r3, #6, #10
   1aa6c:	4638      	mov	r0, r7
   1aa6e:	f7f6 f9d5 	bl	10e1c <z_log_strdup>
   1aa72:	4601      	mov	r1, r0
   1aa74:	4622      	mov	r2, r4
   1aa76:	4827      	ldr	r0, [pc, #156]	; (1ab14 <sc_set+0x144>)
   1aa78:	f7f6 fb4a 	bl	11110 <log_1>
		return -EINVAL;
   1aa7c:	f06f 0815 	mvn.w	r8, #21
   1aa80:	e7d0      	b.n	1aa24 <sc_set+0x54>
		id = BT_ID_DEFAULT;
   1aa82:	2700      	movs	r7, #0
   1aa84:	e7be      	b.n	1aa04 <sc_set+0x34>
	if (!cfg && len_rd) {
   1aa86:	2c00      	cmp	r4, #0
   1aa88:	d0c3      	beq.n	1aa12 <sc_set+0x42>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1aa8a:	9004      	str	r0, [sp, #16]
   1aa8c:	f8cd 0013 	str.w	r0, [sp, #19]
   1aa90:	a904      	add	r1, sp, #16
   1aa92:	f7ff fbb5 	bl	1a200 <find_sc_cfg>
		if (!cfg) {
   1aa96:	4681      	mov	r9, r0
   1aa98:	b130      	cbz	r0, 1aaa8 <sc_set+0xd8>
		cfg->id = id;
   1aa9a:	f800 7b01 	strb.w	r7, [r0], #1
	memcpy(dst, src, sizeof(*dst));
   1aa9e:	2207      	movs	r2, #7
   1aaa0:	a902      	add	r1, sp, #8
   1aaa2:	f009 ffe3 	bl	24a6c <memcpy>
   1aaa6:	e7b4      	b.n	1aa12 <sc_set+0x42>
   1aaa8:	4b17      	ldr	r3, [pc, #92]	; (1ab08 <sc_set+0x138>)
   1aaaa:	4a18      	ldr	r2, [pc, #96]	; (1ab0c <sc_set+0x13c>)
   1aaac:	1a9b      	subs	r3, r3, r2
   1aaae:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to restore SC: no cfg left");
   1aab0:	f04f 0100 	mov.w	r1, #0
   1aab4:	2201      	movs	r2, #1
   1aab6:	f362 0102 	bfi	r1, r2, #0, #3
   1aaba:	f36f 01c5 	bfc	r1, #3, #3
   1aabe:	f363 118f 	bfi	r1, r3, #6, #10
   1aac2:	4815      	ldr	r0, [pc, #84]	; (1ab18 <sc_set+0x148>)
   1aac4:	f7f6 fbda 	bl	1127c <log_0>
			return -ENOMEM;
   1aac8:	f06f 080b 	mvn.w	r8, #11
   1aacc:	e7aa      	b.n	1aa24 <sc_set+0x54>
   1aace:	4b0e      	ldr	r3, [pc, #56]	; (1ab08 <sc_set+0x138>)
   1aad0:	4a0e      	ldr	r2, [pc, #56]	; (1ab0c <sc_set+0x13c>)
   1aad2:	1a9b      	subs	r3, r3, r2
   1aad4:	08db      	lsrs	r3, r3, #3
			BT_ERR("Failed to decode value (err %zd)", len);
   1aad6:	f04f 0200 	mov.w	r2, #0
   1aada:	2101      	movs	r1, #1
   1aadc:	f361 0202 	bfi	r2, r1, #0, #3
   1aae0:	f36f 02c5 	bfc	r2, #3, #3
   1aae4:	f363 128f 	bfi	r2, r3, #6, #10
   1aae8:	4621      	mov	r1, r4
   1aaea:	480c      	ldr	r0, [pc, #48]	; (1ab1c <sc_set+0x14c>)
   1aaec:	f7f6 fb10 	bl	11110 <log_1>
			return len;
   1aaf0:	46a0      	mov	r8, r4
   1aaf2:	e797      	b.n	1aa24 <sc_set+0x54>
	} else if (cfg) {
   1aaf4:	f1b9 0f00 	cmp.w	r9, #0
   1aaf8:	d094      	beq.n	1aa24 <sc_set+0x54>
		memset(cfg, 0, sizeof(*cfg));
   1aafa:	220c      	movs	r2, #12
   1aafc:	2100      	movs	r1, #0
   1aafe:	4648      	mov	r0, r9
   1ab00:	f009 ffd8 	bl	24ab4 <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   1ab04:	e78e      	b.n	1aa24 <sc_set+0x54>
   1ab06:	bf00      	nop
   1ab08:	00029f04 	.word	0x00029f04
   1ab0c:	00029ecc 	.word	0x00029ecc
   1ab10:	0002b0d8 	.word	0x0002b0d8
   1ab14:	0002c604 	.word	0x0002c604
   1ab18:	0002c620 	.word	0x0002c620
   1ab1c:	0002c4f0 	.word	0x0002c4f0

0001ab20 <cf_set>:
{
   1ab20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ab24:	b085      	sub	sp, #20
	if (!name) {
   1ab26:	b348      	cbz	r0, 1ab7c <cf_set+0x5c>
   1ab28:	460c      	mov	r4, r1
   1ab2a:	4615      	mov	r5, r2
   1ab2c:	461e      	mov	r6, r3
   1ab2e:	4607      	mov	r7, r0
	err = bt_settings_decode_key(name, &addr);
   1ab30:	a902      	add	r1, sp, #8
   1ab32:	f00a f89a 	bl	24c6a <bt_settings_decode_key>
	if (err) {
   1ab36:	4680      	mov	r8, r0
   1ab38:	2800      	cmp	r0, #0
   1ab3a:	d132      	bne.n	1aba2 <cf_set+0x82>
	settings_name_next(name, &next);
   1ab3c:	a901      	add	r1, sp, #4
   1ab3e:	4638      	mov	r0, r7
   1ab40:	f008 fb74 	bl	2322c <settings_name_next>
	if (!next) {
   1ab44:	9801      	ldr	r0, [sp, #4]
   1ab46:	2800      	cmp	r0, #0
   1ab48:	d043      	beq.n	1abd2 <cf_set+0xb2>
		id = strtol(next, NULL, 10);
   1ab4a:	220a      	movs	r2, #10
   1ab4c:	2100      	movs	r1, #0
   1ab4e:	f009 fe97 	bl	24880 <strtol>
   1ab52:	b2c7      	uxtb	r7, r0
	cfg = find_cf_cfg_by_addr(id, &addr);
   1ab54:	a902      	add	r1, sp, #8
   1ab56:	4638      	mov	r0, r7
   1ab58:	f7ff fb96 	bl	1a288 <find_cf_cfg_by_addr>
	if (!cfg) {
   1ab5c:	4681      	mov	r9, r0
   1ab5e:	2800      	cmp	r0, #0
   1ab60:	d039      	beq.n	1abd6 <cf_set+0xb6>
	if (len_rd) {
   1ab62:	2c00      	cmp	r4, #0
   1ab64:	d068      	beq.n	1ac38 <cf_set+0x118>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   1ab66:	2201      	movs	r2, #1
   1ab68:	f109 0108 	add.w	r1, r9, #8
   1ab6c:	4630      	mov	r0, r6
   1ab6e:	47a8      	blx	r5
		if (len < 0) {
   1ab70:	1e04      	subs	r4, r0, #0
   1ab72:	db4e      	blt.n	1ac12 <cf_set+0xf2>
}
   1ab74:	4640      	mov	r0, r8
   1ab76:	b005      	add	sp, #20
   1ab78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ab7c:	4b30      	ldr	r3, [pc, #192]	; (1ac40 <cf_set+0x120>)
   1ab7e:	4a31      	ldr	r2, [pc, #196]	; (1ac44 <cf_set+0x124>)
   1ab80:	1a9b      	subs	r3, r3, r2
   1ab82:	08db      	lsrs	r3, r3, #3
		BT_ERR("Insufficient number of arguments");
   1ab84:	f04f 0100 	mov.w	r1, #0
   1ab88:	2201      	movs	r2, #1
   1ab8a:	f362 0102 	bfi	r1, r2, #0, #3
   1ab8e:	f36f 01c5 	bfc	r1, #3, #3
   1ab92:	f363 118f 	bfi	r1, r3, #6, #10
   1ab96:	482c      	ldr	r0, [pc, #176]	; (1ac48 <cf_set+0x128>)
   1ab98:	f7f6 fb70 	bl	1127c <log_0>
		return -EINVAL;
   1ab9c:	f06f 0815 	mvn.w	r8, #21
   1aba0:	e7e8      	b.n	1ab74 <cf_set+0x54>
   1aba2:	4b27      	ldr	r3, [pc, #156]	; (1ac40 <cf_set+0x120>)
   1aba4:	4a27      	ldr	r2, [pc, #156]	; (1ac44 <cf_set+0x124>)
   1aba6:	1a9b      	subs	r3, r3, r2
   1aba8:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to decode address %s", log_strdup(name));
   1abaa:	f04f 0400 	mov.w	r4, #0
   1abae:	2201      	movs	r2, #1
   1abb0:	f362 0402 	bfi	r4, r2, #0, #3
   1abb4:	f36f 04c5 	bfc	r4, #3, #3
   1abb8:	f363 148f 	bfi	r4, r3, #6, #10
   1abbc:	4638      	mov	r0, r7
   1abbe:	f7f6 f92d 	bl	10e1c <z_log_strdup>
   1abc2:	4601      	mov	r1, r0
   1abc4:	4622      	mov	r2, r4
   1abc6:	4821      	ldr	r0, [pc, #132]	; (1ac4c <cf_set+0x12c>)
   1abc8:	f7f6 faa2 	bl	11110 <log_1>
		return -EINVAL;
   1abcc:	f06f 0815 	mvn.w	r8, #21
   1abd0:	e7d0      	b.n	1ab74 <cf_set+0x54>
		id = BT_ID_DEFAULT;
   1abd2:	2700      	movs	r7, #0
   1abd4:	e7be      	b.n	1ab54 <cf_set+0x34>
		cfg = find_cf_cfg(NULL);
   1abd6:	f7ff fae9 	bl	1a1ac <find_cf_cfg>
		if (!cfg) {
   1abda:	4681      	mov	r9, r0
   1abdc:	b130      	cbz	r0, 1abec <cf_set+0xcc>
		cfg->id = id;
   1abde:	f800 7b01 	strb.w	r7, [r0], #1
   1abe2:	2207      	movs	r2, #7
   1abe4:	a902      	add	r1, sp, #8
   1abe6:	f009 ff41 	bl	24a6c <memcpy>
}
   1abea:	e7ba      	b.n	1ab62 <cf_set+0x42>
   1abec:	4b14      	ldr	r3, [pc, #80]	; (1ac40 <cf_set+0x120>)
   1abee:	4a15      	ldr	r2, [pc, #84]	; (1ac44 <cf_set+0x124>)
   1abf0:	1a9b      	subs	r3, r3, r2
   1abf2:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to restore CF: no cfg left");
   1abf4:	f04f 0100 	mov.w	r1, #0
   1abf8:	2201      	movs	r2, #1
   1abfa:	f362 0102 	bfi	r1, r2, #0, #3
   1abfe:	f36f 01c5 	bfc	r1, #3, #3
   1ac02:	f363 118f 	bfi	r1, r3, #6, #10
   1ac06:	4812      	ldr	r0, [pc, #72]	; (1ac50 <cf_set+0x130>)
   1ac08:	f7f6 fb38 	bl	1127c <log_0>
			return -ENOMEM;
   1ac0c:	f06f 080b 	mvn.w	r8, #11
   1ac10:	e7b0      	b.n	1ab74 <cf_set+0x54>
   1ac12:	4b0b      	ldr	r3, [pc, #44]	; (1ac40 <cf_set+0x120>)
   1ac14:	4a0b      	ldr	r2, [pc, #44]	; (1ac44 <cf_set+0x124>)
   1ac16:	1a9b      	subs	r3, r3, r2
   1ac18:	08db      	lsrs	r3, r3, #3
			BT_ERR("Failed to decode value (err %zd)", len);
   1ac1a:	f04f 0200 	mov.w	r2, #0
   1ac1e:	2101      	movs	r1, #1
   1ac20:	f361 0202 	bfi	r2, r1, #0, #3
   1ac24:	f36f 02c5 	bfc	r2, #3, #3
   1ac28:	f363 128f 	bfi	r2, r3, #6, #10
   1ac2c:	4621      	mov	r1, r4
   1ac2e:	4809      	ldr	r0, [pc, #36]	; (1ac54 <cf_set+0x134>)
   1ac30:	f7f6 fa6e 	bl	11110 <log_1>
			return len;
   1ac34:	46a0      	mov	r8, r4
   1ac36:	e79d      	b.n	1ab74 <cf_set+0x54>
		clear_cf_cfg(cfg);
   1ac38:	4648      	mov	r0, r9
   1ac3a:	f00b ffa1 	bl	26b80 <clear_cf_cfg>
   1ac3e:	e799      	b.n	1ab74 <cf_set+0x54>
   1ac40:	00029f04 	.word	0x00029f04
   1ac44:	00029ecc 	.word	0x00029ecc
   1ac48:	0002b0d8 	.word	0x0002b0d8
   1ac4c:	0002c604 	.word	0x0002c604
   1ac50:	0002c644 	.word	0x0002c644
   1ac54:	0002c4f0 	.word	0x0002c4f0

0001ac58 <bt_gatt_clear_cf>:

	return 0;
}

static int bt_gatt_clear_cf(uint8_t id, const bt_addr_le_t *addr)
{
   1ac58:	b570      	push	{r4, r5, r6, lr}
   1ac5a:	b08c      	sub	sp, #48	; 0x30
   1ac5c:	4604      	mov	r4, r0
   1ac5e:	460d      	mov	r5, r1
	struct gatt_cf_cfg *cfg;

	cfg = find_cf_cfg_by_addr(id, addr);
   1ac60:	f7ff fb12 	bl	1a288 <find_cf_cfg_by_addr>
	if (cfg) {
   1ac64:	b108      	cbz	r0, 1ac6a <bt_gatt_clear_cf+0x12>
		clear_cf_cfg(cfg);
   1ac66:	f00b ff8b 	bl	26b80 <clear_cf_cfg>
	}

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		char key[BT_SETTINGS_KEY_MAX];

		if (id) {
   1ac6a:	b18c      	cbz	r4, 1ac90 <bt_gatt_clear_cf+0x38>
			char id_str[4];

			u8_to_dec(id_str, sizeof(id_str), id);
   1ac6c:	ae02      	add	r6, sp, #8
   1ac6e:	4622      	mov	r2, r4
   1ac70:	2104      	movs	r1, #4
   1ac72:	4630      	mov	r0, r6
   1ac74:	f7f5 f9aa 	bl	ffcc <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1ac78:	9600      	str	r6, [sp, #0]
   1ac7a:	462b      	mov	r3, r5
   1ac7c:	4a09      	ldr	r2, [pc, #36]	; (1aca4 <bt_gatt_clear_cf+0x4c>)
   1ac7e:	2124      	movs	r1, #36	; 0x24
   1ac80:	a803      	add	r0, sp, #12
   1ac82:	f7f9 fe43 	bl	1490c <bt_settings_encode_key>
		} else {
			bt_settings_encode_key(key, sizeof(key), "cf",
					       addr, NULL);
		}

		return settings_delete(key);
   1ac86:	a803      	add	r0, sp, #12
   1ac88:	f008 faa0 	bl	231cc <settings_delete>
	}

	return 0;

}
   1ac8c:	b00c      	add	sp, #48	; 0x30
   1ac8e:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "cf",
   1ac90:	2300      	movs	r3, #0
   1ac92:	9300      	str	r3, [sp, #0]
   1ac94:	462b      	mov	r3, r5
   1ac96:	4a03      	ldr	r2, [pc, #12]	; (1aca4 <bt_gatt_clear_cf+0x4c>)
   1ac98:	2124      	movs	r1, #36	; 0x24
   1ac9a:	a803      	add	r0, sp, #12
   1ac9c:	f7f9 fe36 	bl	1490c <bt_settings_encode_key>
   1aca0:	e7f1      	b.n	1ac86 <bt_gatt_clear_cf+0x2e>
   1aca2:	bf00      	nop
   1aca4:	0002c59c 	.word	0x0002c59c

0001aca8 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1aca8:	4b18      	ldr	r3, [pc, #96]	; (1ad0c <bt_gatt_init+0x64>)
   1acaa:	2201      	movs	r2, #1
   1acac:	f3bf 8f5b 	dmb	ish
   1acb0:	e853 1f00 	ldrex	r1, [r3]
   1acb4:	2900      	cmp	r1, #0
   1acb6:	d103      	bne.n	1acc0 <bt_gatt_init+0x18>
   1acb8:	e843 2000 	strex	r0, r2, [r3]
   1acbc:	2800      	cmp	r0, #0
   1acbe:	d1f7      	bne.n	1acb0 <bt_gatt_init+0x8>
   1acc0:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   1acc4:	d121      	bne.n	1ad0a <bt_gatt_init+0x62>
{
   1acc6:	b510      	push	{r4, lr}
	bt_gatt_service_init();
   1acc8:	f7ff fa02 	bl	1a0d0 <bt_gatt_service_init>
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1accc:	4c10      	ldr	r4, [pc, #64]	; (1ad10 <bt_gatt_init+0x68>)
   1acce:	4911      	ldr	r1, [pc, #68]	; (1ad14 <bt_gatt_init+0x6c>)
   1acd0:	4620      	mov	r0, r4
   1acd2:	f00e fbe8 	bl	294a6 <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1acd6:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1acda:	2300      	movs	r3, #0
   1acdc:	4620      	mov	r0, r4
   1acde:	f005 fa5f 	bl	201a0 <k_work_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1ace2:	4c0d      	ldr	r4, [pc, #52]	; (1ad18 <bt_gatt_init+0x70>)
   1ace4:	490d      	ldr	r1, [pc, #52]	; (1ad1c <bt_gatt_init+0x74>)
   1ace6:	f104 0020 	add.w	r0, r4, #32
   1acea:	f00e fbdc 	bl	294a6 <k_work_init_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1acee:	3450      	adds	r4, #80	; 0x50
   1acf0:	f3bf 8f5b 	dmb	ish
   1acf4:	e854 3f00 	ldrex	r3, [r4]
   1acf8:	f043 0302 	orr.w	r3, r3, #2
   1acfc:	e844 3200 	strex	r2, r3, [r4]
   1ad00:	2a00      	cmp	r2, #0
   1ad02:	d1f7      	bne.n	1acf4 <bt_gatt_init+0x4c>
   1ad04:	f3bf 8f5b 	dmb	ish
}
   1ad08:	bd10      	pop	{r4, pc}
   1ad0a:	4770      	bx	lr
   1ad0c:	20002794 	.word	0x20002794
   1ad10:	20001b68 	.word	0x20001b68
   1ad14:	0001aef1 	.word	0x0001aef1
   1ad18:	20001bc0 	.word	0x20001bc0
   1ad1c:	0001b369 	.word	0x0001b369

0001ad20 <bt_gatt_attr_get_handle>:
	if (!attr) {
   1ad20:	b328      	cbz	r0, 1ad6e <bt_gatt_attr_get_handle+0x4e>
{
   1ad22:	b4f0      	push	{r4, r5, r6, r7}
   1ad24:	4606      	mov	r6, r0
	if (attr->handle) {
   1ad26:	8a00      	ldrh	r0, [r0, #16]
   1ad28:	bb20      	cbnz	r0, 1ad74 <bt_gatt_attr_get_handle+0x54>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1ad2a:	4d13      	ldr	r5, [pc, #76]	; (1ad78 <bt_gatt_attr_get_handle+0x58>)
	uint16_t handle = 1;
   1ad2c:	2201      	movs	r2, #1
   1ad2e:	e003      	b.n	1ad38 <bt_gatt_attr_get_handle+0x18>
			handle += static_svc->attr_count;
   1ad30:	686b      	ldr	r3, [r5, #4]
   1ad32:	441a      	add	r2, r3
   1ad34:	b292      	uxth	r2, r2
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1ad36:	3508      	adds	r5, #8
   1ad38:	4b10      	ldr	r3, [pc, #64]	; (1ad7c <bt_gatt_attr_get_handle+0x5c>)
   1ad3a:	429d      	cmp	r5, r3
   1ad3c:	d21a      	bcs.n	1ad74 <bt_gatt_attr_get_handle+0x54>
		if ((attr < &static_svc->attrs[0]) ||
   1ad3e:	682c      	ldr	r4, [r5, #0]
   1ad40:	42b4      	cmp	r4, r6
   1ad42:	d8f5      	bhi.n	1ad30 <bt_gatt_attr_get_handle+0x10>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1ad44:	686f      	ldr	r7, [r5, #4]
   1ad46:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   1ad4a:	009b      	lsls	r3, r3, #2
   1ad4c:	3b14      	subs	r3, #20
   1ad4e:	4423      	add	r3, r4
		if ((attr < &static_svc->attrs[0]) ||
   1ad50:	42b3      	cmp	r3, r6
   1ad52:	d3ed      	bcc.n	1ad30 <bt_gatt_attr_get_handle+0x10>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1ad54:	2300      	movs	r3, #0
   1ad56:	429f      	cmp	r7, r3
   1ad58:	d9ed      	bls.n	1ad36 <bt_gatt_attr_get_handle+0x16>
			if (attr == &static_svc->attrs[i]) {
   1ad5a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1ad5e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   1ad62:	42b1      	cmp	r1, r6
   1ad64:	d005      	beq.n	1ad72 <bt_gatt_attr_get_handle+0x52>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1ad66:	3301      	adds	r3, #1
   1ad68:	3201      	adds	r2, #1
   1ad6a:	b292      	uxth	r2, r2
   1ad6c:	e7f3      	b.n	1ad56 <bt_gatt_attr_get_handle+0x36>
		return 0;
   1ad6e:	2000      	movs	r0, #0
}
   1ad70:	4770      	bx	lr
				return handle;
   1ad72:	4610      	mov	r0, r2
}
   1ad74:	bcf0      	pop	{r4, r5, r6, r7}
   1ad76:	4770      	bx	lr
   1ad78:	00029e2c 	.word	0x00029e2c
   1ad7c:	00029e54 	.word	0x00029e54

0001ad80 <bt_gatt_foreach_attr_type>:
{
   1ad80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad84:	b089      	sub	sp, #36	; 0x24
   1ad86:	4607      	mov	r7, r0
   1ad88:	468a      	mov	sl, r1
   1ad8a:	4690      	mov	r8, r2
   1ad8c:	4699      	mov	r9, r3
   1ad8e:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
	if (!num_matches) {
   1ad92:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   1ad96:	b91b      	cbnz	r3, 1ada0 <bt_gatt_foreach_attr_type+0x20>
		num_matches = UINT16_MAX;
   1ad98:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ad9c:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
	if (start_handle <= last_static_handle) {
   1ada0:	4b19      	ldr	r3, [pc, #100]	; (1ae08 <bt_gatt_foreach_attr_type+0x88>)
   1ada2:	881b      	ldrh	r3, [r3, #0]
   1ada4:	42bb      	cmp	r3, r7
   1ada6:	d22c      	bcs.n	1ae02 <bt_gatt_foreach_attr_type+0x82>
}
   1ada8:	b009      	add	sp, #36	; 0x24
   1adaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				handle += static_svc->attr_count;
   1adae:	b294      	uxth	r4, r2
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1adb0:	3608      	adds	r6, #8
   1adb2:	4b16      	ldr	r3, [pc, #88]	; (1ae0c <bt_gatt_foreach_attr_type+0x8c>)
   1adb4:	429e      	cmp	r6, r3
   1adb6:	d2f7      	bcs.n	1ada8 <bt_gatt_foreach_attr_type+0x28>
			if (handle + static_svc->attr_count < start_handle) {
   1adb8:	6873      	ldr	r3, [r6, #4]
   1adba:	18e2      	adds	r2, r4, r3
   1adbc:	42ba      	cmp	r2, r7
   1adbe:	d3f6      	bcc.n	1adae <bt_gatt_foreach_attr_type+0x2e>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1adc0:	2500      	movs	r5, #0
   1adc2:	9707      	str	r7, [sp, #28]
   1adc4:	6873      	ldr	r3, [r6, #4]
   1adc6:	42ab      	cmp	r3, r5
   1adc8:	d919      	bls.n	1adfe <bt_gatt_foreach_attr_type+0x7e>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1adca:	eb05 0085 	add.w	r0, r5, r5, lsl #2
   1adce:	f8cd b010 	str.w	fp, [sp, #16]
   1add2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1add4:	9303      	str	r3, [sp, #12]
   1add6:	ab12      	add	r3, sp, #72	; 0x48
   1add8:	9302      	str	r3, [sp, #8]
   1adda:	f8cd 9004 	str.w	r9, [sp, #4]
   1adde:	f8cd 8000 	str.w	r8, [sp]
   1ade2:	4653      	mov	r3, sl
   1ade4:	9a07      	ldr	r2, [sp, #28]
   1ade6:	4621      	mov	r1, r4
   1ade8:	6837      	ldr	r7, [r6, #0]
   1adea:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   1adee:	f00b fe85 	bl	26afc <gatt_foreach_iter>
   1adf2:	2800      	cmp	r0, #0
   1adf4:	d0d8      	beq.n	1ada8 <bt_gatt_foreach_attr_type+0x28>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1adf6:	3501      	adds	r5, #1
   1adf8:	3401      	adds	r4, #1
   1adfa:	b2a4      	uxth	r4, r4
   1adfc:	e7e2      	b.n	1adc4 <bt_gatt_foreach_attr_type+0x44>
   1adfe:	9f07      	ldr	r7, [sp, #28]
   1ae00:	e7d6      	b.n	1adb0 <bt_gatt_foreach_attr_type+0x30>
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1ae02:	4e03      	ldr	r6, [pc, #12]	; (1ae10 <bt_gatt_foreach_attr_type+0x90>)
		uint16_t handle = 1;
   1ae04:	2401      	movs	r4, #1
   1ae06:	e7d4      	b.n	1adb2 <bt_gatt_foreach_attr_type+0x32>
   1ae08:	20003984 	.word	0x20003984
   1ae0c:	00029e54 	.word	0x00029e54
   1ae10:	00029e2c 	.word	0x00029e2c

0001ae14 <db_hash_gen>:
{
   1ae14:	b570      	push	{r4, r5, r6, lr}
   1ae16:	b0cc      	sub	sp, #304	; 0x130
   1ae18:	4606      	mov	r6, r0
	uint8_t key[16] = {};
   1ae1a:	2300      	movs	r3, #0
   1ae1c:	9348      	str	r3, [sp, #288]	; 0x120
   1ae1e:	9349      	str	r3, [sp, #292]	; 0x124
   1ae20:	934a      	str	r3, [sp, #296]	; 0x128
   1ae22:	934b      	str	r3, [sp, #300]	; 0x12c
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1ae24:	aa1c      	add	r2, sp, #112	; 0x70
   1ae26:	a948      	add	r1, sp, #288	; 0x120
   1ae28:	a804      	add	r0, sp, #16
   1ae2a:	f009 fbdd 	bl	245e8 <tc_cmac_setup>
   1ae2e:	b190      	cbz	r0, 1ae56 <db_hash_gen+0x42>
   1ae30:	ac04      	add	r4, sp, #16
   1ae32:	9402      	str	r4, [sp, #8]
   1ae34:	4b27      	ldr	r3, [pc, #156]	; (1aed4 <db_hash_gen+0xc0>)
   1ae36:	9301      	str	r3, [sp, #4]
   1ae38:	2200      	movs	r2, #0
   1ae3a:	9200      	str	r2, [sp, #0]
   1ae3c:	4613      	mov	r3, r2
   1ae3e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1ae42:	2001      	movs	r0, #1
   1ae44:	f7ff ff9c 	bl	1ad80 <bt_gatt_foreach_attr_type>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1ae48:	4621      	mov	r1, r4
   1ae4a:	4823      	ldr	r0, [pc, #140]	; (1aed8 <db_hash_gen+0xc4>)
   1ae4c:	f009 fc67 	bl	2471e <tc_cmac_final>
   1ae50:	b190      	cbz	r0, 1ae78 <db_hash_gen+0x64>
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   1ae52:	2300      	movs	r3, #0
   1ae54:	e029      	b.n	1aeaa <db_hash_gen+0x96>
   1ae56:	4b21      	ldr	r3, [pc, #132]	; (1aedc <db_hash_gen+0xc8>)
   1ae58:	4a21      	ldr	r2, [pc, #132]	; (1aee0 <db_hash_gen+0xcc>)
   1ae5a:	1a9b      	subs	r3, r3, r2
   1ae5c:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to setup AES CMAC");
   1ae5e:	f04f 0100 	mov.w	r1, #0
   1ae62:	2201      	movs	r2, #1
   1ae64:	f362 0102 	bfi	r1, r2, #0, #3
   1ae68:	f36f 01c5 	bfc	r1, #3, #3
   1ae6c:	f363 118f 	bfi	r1, r3, #6, #10
   1ae70:	481c      	ldr	r0, [pc, #112]	; (1aee4 <db_hash_gen+0xd0>)
   1ae72:	f7f6 fa03 	bl	1127c <log_0>
		return;
   1ae76:	e028      	b.n	1aeca <db_hash_gen+0xb6>
   1ae78:	4b18      	ldr	r3, [pc, #96]	; (1aedc <db_hash_gen+0xc8>)
   1ae7a:	4a19      	ldr	r2, [pc, #100]	; (1aee0 <db_hash_gen+0xcc>)
   1ae7c:	1a9b      	subs	r3, r3, r2
   1ae7e:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to calculate hash");
   1ae80:	f04f 0100 	mov.w	r1, #0
   1ae84:	2201      	movs	r2, #1
   1ae86:	f362 0102 	bfi	r1, r2, #0, #3
   1ae8a:	f36f 01c5 	bfc	r1, #3, #3
   1ae8e:	f363 118f 	bfi	r1, r3, #6, #10
   1ae92:	4815      	ldr	r0, [pc, #84]	; (1aee8 <db_hash_gen+0xd4>)
   1ae94:	f7f6 f9f2 	bl	1127c <log_0>
		return;
   1ae98:	e017      	b.n	1aeca <db_hash_gen+0xb6>
		uint8_t tmp = ((uint8_t *)buf)[i];
   1ae9a:	4a0f      	ldr	r2, [pc, #60]	; (1aed8 <db_hash_gen+0xc4>)
   1ae9c:	5cd4      	ldrb	r4, [r2, r3]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1ae9e:	f1c3 010f 	rsb	r1, r3, #15
   1aea2:	5c55      	ldrb	r5, [r2, r1]
   1aea4:	54d5      	strb	r5, [r2, r3]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1aea6:	5454      	strb	r4, [r2, r1]
	for (i = 0; i < (length/2); i++) {
   1aea8:	3301      	adds	r3, #1
   1aeaa:	2b07      	cmp	r3, #7
   1aeac:	d9f5      	bls.n	1ae9a <db_hash_gen+0x86>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   1aeae:	b976      	cbnz	r6, 1aece <db_hash_gen+0xba>
   1aeb0:	4b0e      	ldr	r3, [pc, #56]	; (1aeec <db_hash_gen+0xd8>)
   1aeb2:	f3bf 8f5b 	dmb	ish
   1aeb6:	e853 2f00 	ldrex	r2, [r3]
   1aeba:	f042 0204 	orr.w	r2, r2, #4
   1aebe:	e843 2100 	strex	r1, r2, [r3]
   1aec2:	2900      	cmp	r1, #0
   1aec4:	d1f7      	bne.n	1aeb6 <db_hash_gen+0xa2>
   1aec6:	f3bf 8f5b 	dmb	ish
}
   1aeca:	b04c      	add	sp, #304	; 0x130
   1aecc:	bd70      	pop	{r4, r5, r6, pc}
		db_hash_store();
   1aece:	f7ff f923 	bl	1a118 <db_hash_store>
   1aed2:	e7ed      	b.n	1aeb0 <db_hash_gen+0x9c>
   1aed4:	000268e5 	.word	0x000268e5
   1aed8:	20001b48 	.word	0x20001b48
   1aedc:	00029f04 	.word	0x00029f04
   1aee0:	00029ecc 	.word	0x00029ecc
   1aee4:	0002c668 	.word	0x0002c668
   1aee8:	0002c684 	.word	0x0002c684
   1aeec:	20001c10 	.word	0x20001c10

0001aef0 <db_hash_process>:
{
   1aef0:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1aef2:	4b21      	ldr	r3, [pc, #132]	; (1af78 <db_hash_process+0x88>)
   1aef4:	f3bf 8f5b 	dmb	ish
   1aef8:	e853 2f00 	ldrex	r2, [r3]
   1aefc:	f022 0108 	bic.w	r1, r2, #8
   1af00:	e843 1000 	strex	r0, r1, [r3]
   1af04:	2800      	cmp	r0, #0
   1af06:	d1f7      	bne.n	1aef8 <db_hash_process+0x8>
   1af08:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
   1af0c:	f012 0f08 	tst.w	r2, #8
   1af10:	d02d      	beq.n	1af6e <db_hash_process+0x7e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1af12:	f3bf 8f5b 	dmb	ish
   1af16:	3b50      	subs	r3, #80	; 0x50
   1af18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1af1a:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1af1e:	f013 0f04 	tst.w	r3, #4
   1af22:	d018      	beq.n	1af56 <db_hash_process+0x66>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   1af24:	4915      	ldr	r1, [pc, #84]	; (1af7c <db_hash_process+0x8c>)
   1af26:	2210      	movs	r2, #16
   1af28:	1888      	adds	r0, r1, r2
   1af2a:	f009 fd88 	bl	24a3e <memcmp>
   1af2e:	b9b0      	cbnz	r0, 1af5e <db_hash_process+0x6e>
			k_work_cancel_delayable(&gatt_sc.work);
   1af30:	4c13      	ldr	r4, [pc, #76]	; (1af80 <db_hash_process+0x90>)
   1af32:	f104 0020 	add.w	r0, r4, #32
   1af36:	f00e fb02 	bl	2953e <k_work_cancel_delayable>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1af3a:	3450      	adds	r4, #80	; 0x50
   1af3c:	f3bf 8f5b 	dmb	ish
   1af40:	e854 3f00 	ldrex	r3, [r4]
   1af44:	f023 0301 	bic.w	r3, r3, #1
   1af48:	e844 3200 	strex	r2, r3, [r4]
   1af4c:	2a00      	cmp	r2, #0
   1af4e:	d1f7      	bne.n	1af40 <db_hash_process+0x50>
   1af50:	f3bf 8f5b 	dmb	ish
}
   1af54:	bd10      	pop	{r4, pc}
			db_hash_gen(false);
   1af56:	2000      	movs	r0, #0
   1af58:	f7ff ff5c 	bl	1ae14 <db_hash_gen>
   1af5c:	e7e2      	b.n	1af24 <db_hash_process+0x34>
		sc_indicate(0x0001, 0xffff);
   1af5e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1af62:	2001      	movs	r0, #1
   1af64:	f7ff fc1e 	bl	1a7a4 <sc_indicate>
		db_hash_store();
   1af68:	f7ff f8d6 	bl	1a118 <db_hash_store>
		return;
   1af6c:	e7f2      	b.n	1af54 <db_hash_process+0x64>
	db_hash_gen(true);
   1af6e:	2001      	movs	r0, #1
   1af70:	f7ff ff50 	bl	1ae14 <db_hash_gen>
   1af74:	e7ee      	b.n	1af54 <db_hash_process+0x64>
   1af76:	bf00      	nop
   1af78:	20001c10 	.word	0x20001c10
   1af7c:	20001b48 	.word	0x20001b48
   1af80:	20001bc0 	.word	0x20001bc0

0001af84 <ccc_set>:
{
   1af84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1af88:	b0bc      	sub	sp, #240	; 0xf0
   1af8a:	4604      	mov	r4, r0
   1af8c:	460e      	mov	r6, r1
   1af8e:	4617      	mov	r7, r2
   1af90:	4698      	mov	r8, r3
		settings_name_next(name, &next);
   1af92:	a905      	add	r1, sp, #20
   1af94:	f008 f94a 	bl	2322c <settings_name_next>
		if (!name) {
   1af98:	b304      	cbz	r4, 1afdc <ccc_set+0x58>
		} else if (!next) {
   1af9a:	9805      	ldr	r0, [sp, #20]
   1af9c:	b388      	cbz	r0, 1b002 <ccc_set+0x7e>
			load.addr_with_id.id = strtol(next, NULL, 10);
   1af9e:	220a      	movs	r2, #10
   1afa0:	2100      	movs	r1, #0
   1afa2:	f009 fc6d 	bl	24880 <strtol>
   1afa6:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
		err = bt_settings_decode_key(name, &addr);
   1afaa:	a906      	add	r1, sp, #24
   1afac:	4620      	mov	r0, r4
   1afae:	f009 fe5c 	bl	24c6a <bt_settings_decode_key>
		if (err) {
   1afb2:	4605      	mov	r5, r0
   1afb4:	bb48      	cbnz	r0, 1b00a <ccc_set+0x86>
		load.addr_with_id.addr = &addr;
   1afb6:	ab06      	add	r3, sp, #24
   1afb8:	9308      	str	r3, [sp, #32]
		if (len_rd) {
   1afba:	2e00      	cmp	r6, #0
   1afbc:	d050      	beq.n	1b060 <ccc_set+0xdc>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   1afbe:	22c0      	movs	r2, #192	; 0xc0
   1afc0:	a90c      	add	r1, sp, #48	; 0x30
   1afc2:	4640      	mov	r0, r8
   1afc4:	47b8      	blx	r7
			if (len < 0) {
   1afc6:	1e04      	subs	r4, r0, #0
   1afc8:	db37      	blt.n	1b03a <ccc_set+0xb6>
			load.entry = ccc_store;
   1afca:	ab0c      	add	r3, sp, #48	; 0x30
   1afcc:	930a      	str	r3, [sp, #40]	; 0x28
			load.count = len / sizeof(*ccc_store);
   1afce:	08a4      	lsrs	r4, r4, #2
   1afd0:	940b      	str	r4, [sp, #44]	; 0x2c
			for (size_t i = 0; i < load.count; i++) {
   1afd2:	2300      	movs	r3, #0
   1afd4:	429c      	cmp	r4, r3
   1afd6:	d946      	bls.n	1b066 <ccc_set+0xe2>
   1afd8:	3301      	adds	r3, #1
   1afda:	e7fb      	b.n	1afd4 <ccc_set+0x50>
   1afdc:	4b2a      	ldr	r3, [pc, #168]	; (1b088 <ccc_set+0x104>)
   1afde:	4a2b      	ldr	r2, [pc, #172]	; (1b08c <ccc_set+0x108>)
   1afe0:	1a9b      	subs	r3, r3, r2
   1afe2:	08db      	lsrs	r3, r3, #3
			BT_ERR("Insufficient number of arguments");
   1afe4:	f04f 0100 	mov.w	r1, #0
   1afe8:	2201      	movs	r2, #1
   1afea:	f362 0102 	bfi	r1, r2, #0, #3
   1afee:	f36f 01c5 	bfc	r1, #3, #3
   1aff2:	f363 118f 	bfi	r1, r3, #6, #10
   1aff6:	4826      	ldr	r0, [pc, #152]	; (1b090 <ccc_set+0x10c>)
   1aff8:	f7f6 f940 	bl	1127c <log_0>
			return -EINVAL;
   1affc:	f06f 0515 	mvn.w	r5, #21
   1b000:	e03d      	b.n	1b07e <ccc_set+0xfa>
			load.addr_with_id.id = BT_ID_DEFAULT;
   1b002:	2300      	movs	r3, #0
   1b004:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1b008:	e7cf      	b.n	1afaa <ccc_set+0x26>
   1b00a:	4b1f      	ldr	r3, [pc, #124]	; (1b088 <ccc_set+0x104>)
   1b00c:	4a1f      	ldr	r2, [pc, #124]	; (1b08c <ccc_set+0x108>)
   1b00e:	1a9b      	subs	r3, r3, r2
   1b010:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to decode address %s", log_strdup(name));
   1b012:	f04f 0500 	mov.w	r5, #0
   1b016:	2201      	movs	r2, #1
   1b018:	f362 0502 	bfi	r5, r2, #0, #3
   1b01c:	f36f 05c5 	bfc	r5, #3, #3
   1b020:	f363 158f 	bfi	r5, r3, #6, #10
   1b024:	4620      	mov	r0, r4
   1b026:	f7f5 fef9 	bl	10e1c <z_log_strdup>
   1b02a:	4601      	mov	r1, r0
   1b02c:	462a      	mov	r2, r5
   1b02e:	4819      	ldr	r0, [pc, #100]	; (1b094 <ccc_set+0x110>)
   1b030:	f7f6 f86e 	bl	11110 <log_1>
			return -EINVAL;
   1b034:	f06f 0515 	mvn.w	r5, #21
   1b038:	e021      	b.n	1b07e <ccc_set+0xfa>
   1b03a:	4b13      	ldr	r3, [pc, #76]	; (1b088 <ccc_set+0x104>)
   1b03c:	4a13      	ldr	r2, [pc, #76]	; (1b08c <ccc_set+0x108>)
   1b03e:	1a9b      	subs	r3, r3, r2
   1b040:	08db      	lsrs	r3, r3, #3
				BT_ERR("Failed to decode value (err %zd)", len);
   1b042:	f04f 0200 	mov.w	r2, #0
   1b046:	2101      	movs	r1, #1
   1b048:	f361 0202 	bfi	r2, r1, #0, #3
   1b04c:	f36f 02c5 	bfc	r2, #3, #3
   1b050:	f363 128f 	bfi	r2, r3, #6, #10
   1b054:	4621      	mov	r1, r4
   1b056:	4810      	ldr	r0, [pc, #64]	; (1b098 <ccc_set+0x114>)
   1b058:	f7f6 f85a 	bl	11110 <log_1>
				return len;
   1b05c:	4625      	mov	r5, r4
   1b05e:	e00e      	b.n	1b07e <ccc_set+0xfa>
			load.entry = NULL;
   1b060:	2300      	movs	r3, #0
   1b062:	930a      	str	r3, [sp, #40]	; 0x28
			load.count = 0;
   1b064:	930b      	str	r3, [sp, #44]	; 0x2c
   1b066:	ab08      	add	r3, sp, #32
   1b068:	9302      	str	r3, [sp, #8]
   1b06a:	4b0c      	ldr	r3, [pc, #48]	; (1b09c <ccc_set+0x118>)
   1b06c:	9301      	str	r3, [sp, #4]
   1b06e:	2200      	movs	r2, #0
   1b070:	9200      	str	r2, [sp, #0]
   1b072:	4613      	mov	r3, r2
   1b074:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b078:	2001      	movs	r0, #1
   1b07a:	f7ff fe81 	bl	1ad80 <bt_gatt_foreach_attr_type>
}
   1b07e:	4628      	mov	r0, r5
   1b080:	b03c      	add	sp, #240	; 0xf0
   1b082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b086:	bf00      	nop
   1b088:	00029f04 	.word	0x00029f04
   1b08c:	00029ecc 	.word	0x00029ecc
   1b090:	0002b0d8 	.word	0x0002b0d8
   1b094:	0002c604 	.word	0x0002c604
   1b098:	0002c4f0 	.word	0x0002c4f0
   1b09c:	0001a451 	.word	0x0001a451

0001b0a0 <ccc_set_direct>:
{
   1b0a0:	b570      	push	{r4, r5, r6, lr}
   1b0a2:	b082      	sub	sp, #8
   1b0a4:	460c      	mov	r4, r1
   1b0a6:	4615      	mov	r5, r2
   1b0a8:	461e      	mov	r6, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   1b0aa:	aa01      	add	r2, sp, #4
   1b0ac:	490f      	ldr	r1, [pc, #60]	; (1b0ec <ccc_set_direct+0x4c>)
   1b0ae:	9806      	ldr	r0, [sp, #24]
   1b0b0:	f008 f892 	bl	231d8 <settings_name_steq>
   1b0b4:	b138      	cbz	r0, 1b0c6 <ccc_set_direct+0x26>
		return ccc_set(name, len, read_cb, cb_arg);
   1b0b6:	4633      	mov	r3, r6
   1b0b8:	462a      	mov	r2, r5
   1b0ba:	4621      	mov	r1, r4
   1b0bc:	9801      	ldr	r0, [sp, #4]
   1b0be:	f7ff ff61 	bl	1af84 <ccc_set>
}
   1b0c2:	b002      	add	sp, #8
   1b0c4:	bd70      	pop	{r4, r5, r6, pc}
   1b0c6:	4b0a      	ldr	r3, [pc, #40]	; (1b0f0 <ccc_set_direct+0x50>)
   1b0c8:	4a0a      	ldr	r2, [pc, #40]	; (1b0f4 <ccc_set_direct+0x54>)
   1b0ca:	1a9b      	subs	r3, r3, r2
   1b0cc:	08db      	lsrs	r3, r3, #3
			BT_ERR("Invalid key");
   1b0ce:	f04f 0100 	mov.w	r1, #0
   1b0d2:	2201      	movs	r2, #1
   1b0d4:	f362 0102 	bfi	r1, r2, #0, #3
   1b0d8:	f36f 01c5 	bfc	r1, #3, #3
   1b0dc:	f363 118f 	bfi	r1, r3, #6, #10
   1b0e0:	4805      	ldr	r0, [pc, #20]	; (1b0f8 <ccc_set_direct+0x58>)
   1b0e2:	f7f6 f8cb 	bl	1127c <log_0>
			return -EINVAL;
   1b0e6:	f06f 0015 	mvn.w	r0, #21
   1b0ea:	e7ea      	b.n	1b0c2 <ccc_set_direct+0x22>
   1b0ec:	0002c6a0 	.word	0x0002c6a0
   1b0f0:	00029f04 	.word	0x00029f04
   1b0f4:	00029ecc 	.word	0x00029ecc
   1b0f8:	0002c6a8 	.word	0x0002c6a8

0001b0fc <bt_gatt_clear_ccc>:
{
   1b0fc:	b570      	push	{r4, r5, r6, lr}
   1b0fe:	b090      	sub	sp, #64	; 0x40
   1b100:	4604      	mov	r4, r0
   1b102:	460d      	mov	r5, r1
	struct addr_with_id addr_with_id = {
   1b104:	910e      	str	r1, [sp, #56]	; 0x38
   1b106:	f88d 003c 	strb.w	r0, [sp, #60]	; 0x3c
   1b10a:	ab0e      	add	r3, sp, #56	; 0x38
   1b10c:	9302      	str	r3, [sp, #8]
   1b10e:	4b13      	ldr	r3, [pc, #76]	; (1b15c <bt_gatt_clear_ccc+0x60>)
   1b110:	9301      	str	r3, [sp, #4]
   1b112:	2200      	movs	r2, #0
   1b114:	9200      	str	r2, [sp, #0]
   1b116:	4613      	mov	r3, r2
   1b118:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b11c:	2001      	movs	r0, #1
   1b11e:	f7ff fe2f 	bl	1ad80 <bt_gatt_foreach_attr_type>
		if (id) {
   1b122:	b18c      	cbz	r4, 1b148 <bt_gatt_clear_ccc+0x4c>
			u8_to_dec(id_str, sizeof(id_str), id);
   1b124:	ae04      	add	r6, sp, #16
   1b126:	4622      	mov	r2, r4
   1b128:	2104      	movs	r1, #4
   1b12a:	4630      	mov	r0, r6
   1b12c:	f7f4 ff4e 	bl	ffcc <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1b130:	9600      	str	r6, [sp, #0]
   1b132:	462b      	mov	r3, r5
   1b134:	4a0a      	ldr	r2, [pc, #40]	; (1b160 <bt_gatt_clear_ccc+0x64>)
   1b136:	2124      	movs	r1, #36	; 0x24
   1b138:	a805      	add	r0, sp, #20
   1b13a:	f7f9 fbe7 	bl	1490c <bt_settings_encode_key>
		return settings_delete(key);
   1b13e:	a805      	add	r0, sp, #20
   1b140:	f008 f844 	bl	231cc <settings_delete>
}
   1b144:	b010      	add	sp, #64	; 0x40
   1b146:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1b148:	2300      	movs	r3, #0
   1b14a:	9300      	str	r3, [sp, #0]
   1b14c:	462b      	mov	r3, r5
   1b14e:	4a04      	ldr	r2, [pc, #16]	; (1b160 <bt_gatt_clear_ccc+0x64>)
   1b150:	2124      	movs	r1, #36	; 0x24
   1b152:	a805      	add	r0, sp, #20
   1b154:	f7f9 fbda 	bl	1490c <bt_settings_encode_key>
   1b158:	e7f1      	b.n	1b13e <bt_gatt_clear_ccc+0x42>
   1b15a:	bf00      	nop
   1b15c:	0001a779 	.word	0x0001a779
   1b160:	0002c6b4 	.word	0x0002c6b4

0001b164 <gatt_find_by_uuid>:
{
   1b164:	b510      	push	{r4, lr}
   1b166:	b084      	sub	sp, #16
   1b168:	4604      	mov	r4, r0
   1b16a:	460a      	mov	r2, r1
	found->attr = NULL;
   1b16c:	2300      	movs	r3, #0
   1b16e:	6003      	str	r3, [r0, #0]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1b170:	9002      	str	r0, [sp, #8]
   1b172:	4907      	ldr	r1, [pc, #28]	; (1b190 <gatt_find_by_uuid+0x2c>)
   1b174:	9101      	str	r1, [sp, #4]
   1b176:	2101      	movs	r1, #1
   1b178:	9100      	str	r1, [sp, #0]
   1b17a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b17e:	8880      	ldrh	r0, [r0, #4]
   1b180:	f7ff fdfe 	bl	1ad80 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1b184:	6820      	ldr	r0, [r4, #0]
}
   1b186:	3800      	subs	r0, #0
   1b188:	bf18      	it	ne
   1b18a:	2001      	movne	r0, #1
   1b18c:	b004      	add	sp, #16
   1b18e:	bd10      	pop	{r4, pc}
   1b190:	000268d9 	.word	0x000268d9

0001b194 <gatt_indicate>:
{
   1b194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b198:	b082      	sub	sp, #8
   1b19a:	4606      	mov	r6, r0
   1b19c:	460f      	mov	r7, r1
   1b19e:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr,
   1b1a0:	2214      	movs	r2, #20
   1b1a2:	6861      	ldr	r1, [r4, #4]
   1b1a4:	f00b fe3a 	bl	26e1c <bt_gatt_check_perm>
   1b1a8:	bb80      	cbnz	r0, 1b20c <gatt_indicate+0x78>
	len = sizeof(*ind) + params->len;
   1b1aa:	8aa5      	ldrh	r5, [r4, #20]
   1b1ac:	3502      	adds	r5, #2
	req = gatt_req_alloc(gatt_indicate_rsp, params, NULL,
   1b1ae:	9500      	str	r5, [sp, #0]
   1b1b0:	231d      	movs	r3, #29
   1b1b2:	2200      	movs	r2, #0
   1b1b4:	4621      	mov	r1, r4
   1b1b6:	482d      	ldr	r0, [pc, #180]	; (1b26c <gatt_indicate+0xd8>)
   1b1b8:	f00b fccb 	bl	26b52 <gatt_req_alloc>
	if (!req) {
   1b1bc:	4680      	mov	r8, r0
   1b1be:	2800      	cmp	r0, #0
   1b1c0:	d051      	beq.n	1b266 <gatt_indicate+0xd2>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1b1c2:	462a      	mov	r2, r5
   1b1c4:	211d      	movs	r1, #29
   1b1c6:	4630      	mov	r0, r6
   1b1c8:	f7fe fc80 	bl	19acc <bt_att_create_pdu>
	if (!buf) {
   1b1cc:	4681      	mov	r9, r0
   1b1ce:	b380      	cbz	r0, 1b232 <gatt_indicate+0x9e>
   1b1d0:	f100 0a08 	add.w	sl, r0, #8
   1b1d4:	2102      	movs	r1, #2
   1b1d6:	4650      	mov	r0, sl
   1b1d8:	f00d f8ab 	bl	28332 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1b1dc:	4605      	mov	r5, r0
   1b1de:	f825 7b02 	strh.w	r7, [r5], #2
   1b1e2:	8aa1      	ldrh	r1, [r4, #20]
   1b1e4:	4650      	mov	r0, sl
   1b1e6:	f00d f8a4 	bl	28332 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   1b1ea:	8aa2      	ldrh	r2, [r4, #20]
   1b1ec:	6921      	ldr	r1, [r4, #16]
   1b1ee:	4628      	mov	r0, r5
   1b1f0:	f009 fc3c 	bl	24a6c <memcpy>
	req->buf = buf;
   1b1f4:	f8c8 9008 	str.w	r9, [r8, #8]
	err = bt_att_req_send(conn, req);
   1b1f8:	4641      	mov	r1, r8
   1b1fa:	4630      	mov	r0, r6
   1b1fc:	f00b fae5 	bl	267ca <bt_att_req_send>
	if (err) {
   1b200:	4604      	mov	r4, r0
   1b202:	bb60      	cbnz	r0, 1b25e <gatt_indicate+0xca>
}
   1b204:	4620      	mov	r0, r4
   1b206:	b002      	add	sp, #8
   1b208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b20c:	4b18      	ldr	r3, [pc, #96]	; (1b270 <gatt_indicate+0xdc>)
   1b20e:	4a19      	ldr	r2, [pc, #100]	; (1b274 <gatt_indicate+0xe0>)
   1b210:	1a9b      	subs	r3, r3, r2
   1b212:	08db      	lsrs	r3, r3, #3
		BT_WARN("Link is not encrypted");
   1b214:	f04f 0100 	mov.w	r1, #0
   1b218:	2202      	movs	r2, #2
   1b21a:	f362 0102 	bfi	r1, r2, #0, #3
   1b21e:	f36f 01c5 	bfc	r1, #3, #3
   1b222:	f363 118f 	bfi	r1, r3, #6, #10
   1b226:	4814      	ldr	r0, [pc, #80]	; (1b278 <gatt_indicate+0xe4>)
   1b228:	f7f6 f828 	bl	1127c <log_0>
		return -EPERM;
   1b22c:	f04f 34ff 	mov.w	r4, #4294967295
   1b230:	e7e8      	b.n	1b204 <gatt_indicate+0x70>
   1b232:	4b0f      	ldr	r3, [pc, #60]	; (1b270 <gatt_indicate+0xdc>)
   1b234:	4a0f      	ldr	r2, [pc, #60]	; (1b274 <gatt_indicate+0xe0>)
   1b236:	1a9b      	subs	r3, r3, r2
   1b238:	08db      	lsrs	r3, r3, #3
		BT_WARN("No buffer available to send indication");
   1b23a:	f04f 0100 	mov.w	r1, #0
   1b23e:	2202      	movs	r2, #2
   1b240:	f362 0102 	bfi	r1, r2, #0, #3
   1b244:	f36f 01c5 	bfc	r1, #3, #3
   1b248:	f363 118f 	bfi	r1, r3, #6, #10
   1b24c:	480b      	ldr	r0, [pc, #44]	; (1b27c <gatt_indicate+0xe8>)
   1b24e:	f7f6 f815 	bl	1127c <log_0>
		bt_att_req_free(req);
   1b252:	4640      	mov	r0, r8
   1b254:	f7fe fe84 	bl	19f60 <bt_att_req_free>
		return -ENOMEM;
   1b258:	f06f 040b 	mvn.w	r4, #11
   1b25c:	e7d2      	b.n	1b204 <gatt_indicate+0x70>
		bt_att_req_free(req);
   1b25e:	4640      	mov	r0, r8
   1b260:	f7fe fe7e 	bl	19f60 <bt_att_req_free>
   1b264:	e7ce      	b.n	1b204 <gatt_indicate+0x70>
		return -ENOMEM;
   1b266:	f06f 040b 	mvn.w	r4, #11
   1b26a:	e7cb      	b.n	1b204 <gatt_indicate+0x70>
   1b26c:	000268b7 	.word	0x000268b7
   1b270:	00029f04 	.word	0x00029f04
   1b274:	00029ecc 	.word	0x00029ecc
   1b278:	0002c6b8 	.word	0x0002c6b8
   1b27c:	0002c6d0 	.word	0x0002c6d0

0001b280 <bt_gatt_indicate>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b280:	f3bf 8f5b 	dmb	ish
   1b284:	4b36      	ldr	r3, [pc, #216]	; (1b360 <bt_gatt_indicate+0xe0>)
   1b286:	681b      	ldr	r3, [r3, #0]
   1b288:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1b28c:	f013 0f02 	tst.w	r3, #2
   1b290:	d059      	beq.n	1b346 <bt_gatt_indicate+0xc6>
{
   1b292:	b530      	push	{r4, r5, lr}
   1b294:	b08d      	sub	sp, #52	; 0x34
   1b296:	4605      	mov	r5, r0
   1b298:	460c      	mov	r4, r1
	data.attr = params->attr;
   1b29a:	6848      	ldr	r0, [r1, #4]
   1b29c:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1b29e:	b115      	cbz	r5, 1b2a6 <bt_gatt_indicate+0x26>
   1b2a0:	7b6b      	ldrb	r3, [r5, #13]
   1b2a2:	2b07      	cmp	r3, #7
   1b2a4:	d152      	bne.n	1b34c <bt_gatt_indicate+0xcc>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1b2a6:	f7ff fd3b 	bl	1ad20 <bt_gatt_attr_get_handle>
   1b2aa:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   1b2ae:	2800      	cmp	r0, #0
   1b2b0:	d04f      	beq.n	1b352 <bt_gatt_indicate+0xd2>
	if (params->uuid) {
   1b2b2:	6821      	ldr	r1, [r4, #0]
   1b2b4:	b121      	cbz	r1, 1b2c0 <bt_gatt_indicate+0x40>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1b2b6:	a805      	add	r0, sp, #20
   1b2b8:	f7ff ff54 	bl	1b164 <gatt_find_by_uuid>
   1b2bc:	2800      	cmp	r0, #0
   1b2be:	d04b      	beq.n	1b358 <bt_gatt_indicate+0xd8>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1b2c0:	9b05      	ldr	r3, [sp, #20]
   1b2c2:	6818      	ldr	r0, [r3, #0]
   1b2c4:	2300      	movs	r3, #0
   1b2c6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   1b2ca:	f642 0303 	movw	r3, #10243	; 0x2803
   1b2ce:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1b2d2:	a90b      	add	r1, sp, #44	; 0x2c
   1b2d4:	f009 fd06 	bl	24ce4 <bt_uuid_cmp>
   1b2d8:	b948      	cbnz	r0, 1b2ee <bt_gatt_indicate+0x6e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1b2da:	9805      	ldr	r0, [sp, #20]
   1b2dc:	68c3      	ldr	r3, [r0, #12]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1b2de:	799b      	ldrb	r3, [r3, #6]
   1b2e0:	f013 0f20 	tst.w	r3, #32
   1b2e4:	d00e      	beq.n	1b304 <bt_gatt_indicate+0x84>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1b2e6:	f00b fd4a 	bl	26d7e <bt_gatt_attr_value_handle>
   1b2ea:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   1b2ee:	b165      	cbz	r5, 1b30a <bt_gatt_indicate+0x8a>
		params->_ref = 1;
   1b2f0:	2301      	movs	r3, #1
   1b2f2:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   1b2f4:	4622      	mov	r2, r4
   1b2f6:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   1b2fa:	4628      	mov	r0, r5
   1b2fc:	f7ff ff4a 	bl	1b194 <gatt_indicate>
}
   1b300:	b00d      	add	sp, #52	; 0x34
   1b302:	bd30      	pop	{r4, r5, pc}
			return -EINVAL;
   1b304:	f06f 0015 	mvn.w	r0, #21
   1b308:	e7fa      	b.n	1b300 <bt_gatt_indicate+0x80>
	data.err = -ENOTCONN;
   1b30a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1b30e:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1b310:	2302      	movs	r3, #2
   1b312:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.ind_params = params;
   1b316:	9409      	str	r4, [sp, #36]	; 0x24
	params->_ref = 0;
   1b318:	2300      	movs	r3, #0
   1b31a:	75a3      	strb	r3, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1b31c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   1b320:	f642 1202 	movw	r2, #10498	; 0x2902
   1b324:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
   1b328:	aa05      	add	r2, sp, #20
   1b32a:	9202      	str	r2, [sp, #8]
   1b32c:	4a0d      	ldr	r2, [pc, #52]	; (1b364 <bt_gatt_indicate+0xe4>)
   1b32e:	9201      	str	r2, [sp, #4]
   1b330:	2201      	movs	r2, #1
   1b332:	9200      	str	r2, [sp, #0]
   1b334:	aa0a      	add	r2, sp, #40	; 0x28
   1b336:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b33a:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   1b33e:	f7ff fd1f 	bl	1ad80 <bt_gatt_foreach_attr_type>
	return data.err;
   1b342:	9807      	ldr	r0, [sp, #28]
   1b344:	e7dc      	b.n	1b300 <bt_gatt_indicate+0x80>
		return -EAGAIN;
   1b346:	f06f 000a 	mvn.w	r0, #10
}
   1b34a:	4770      	bx	lr
		return -ENOTCONN;
   1b34c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1b350:	e7d6      	b.n	1b300 <bt_gatt_indicate+0x80>
		return -ENOENT;
   1b352:	f06f 0001 	mvn.w	r0, #1
   1b356:	e7d3      	b.n	1b300 <bt_gatt_indicate+0x80>
			return -ENOENT;
   1b358:	f06f 0001 	mvn.w	r0, #1
   1b35c:	e7d0      	b.n	1b300 <bt_gatt_indicate+0x80>
   1b35e:	bf00      	nop
   1b360:	20000338 	.word	0x20000338
   1b364:	0001b535 	.word	0x0001b535

0001b368 <sc_process>:
{
   1b368:	b510      	push	{r4, lr}
   1b36a:	b082      	sub	sp, #8
   1b36c:	4603      	mov	r3, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1b36e:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1b372:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
   1b376:	f830 2c06 	ldrh.w	r2, [r0, #-6]
   1b37a:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   1b37e:	f1a0 0120 	sub.w	r1, r0, #32
   1b382:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b386:	f3bf 8f5b 	dmb	ish
   1b38a:	e854 2f00 	ldrex	r2, [r4]
   1b38e:	f022 0201 	bic.w	r2, r2, #1
   1b392:	e844 2000 	strex	r0, r2, [r4]
   1b396:	2800      	cmp	r0, #0
   1b398:	d1f7      	bne.n	1b38a <sc_process+0x22>
   1b39a:	f3bf 8f5b 	dmb	ish
	sc->start = 0U;
   1b39e:	2000      	movs	r0, #0
   1b3a0:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
   1b3a4:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1b3a8:	4a0e      	ldr	r2, [pc, #56]	; (1b3e4 <sc_process+0x7c>)
   1b3aa:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   1b3ae:	4a0e      	ldr	r2, [pc, #56]	; (1b3e8 <sc_process+0x80>)
   1b3b0:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   1b3b4:	aa01      	add	r2, sp, #4
   1b3b6:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   1b3ba:	2204      	movs	r2, #4
   1b3bc:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1b3c0:	f7ff ff5e 	bl	1b280 <bt_gatt_indicate>
   1b3c4:	b108      	cbz	r0, 1b3ca <sc_process+0x62>
}
   1b3c6:	b002      	add	sp, #8
   1b3c8:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b3ca:	f3bf 8f5b 	dmb	ish
   1b3ce:	e854 3f00 	ldrex	r3, [r4]
   1b3d2:	f043 0302 	orr.w	r3, r3, #2
   1b3d6:	e844 3200 	strex	r2, r3, [r4]
   1b3da:	2a00      	cmp	r2, #0
   1b3dc:	d1f7      	bne.n	1b3ce <sc_process+0x66>
   1b3de:	f3bf 8f5b 	dmb	ish
   1b3e2:	e7f0      	b.n	1b3c6 <sc_process+0x5e>
   1b3e4:	0002c7b8 	.word	0x0002c7b8
   1b3e8:	0001a849 	.word	0x0001a849

0001b3ec <sc_restore>:
{
   1b3ec:	b530      	push	{r4, r5, lr}
   1b3ee:	b083      	sub	sp, #12
   1b3f0:	4604      	mov	r4, r0
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1b3f2:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1b3f6:	7a00      	ldrb	r0, [r0, #8]
   1b3f8:	f7fe ff02 	bl	1a200 <find_sc_cfg>
	if (!cfg) {
   1b3fc:	b308      	cbz	r0, 1b442 <sc_restore+0x56>
   1b3fe:	4605      	mov	r5, r0
	if (!(cfg->data.start || cfg->data.end)) {
   1b400:	8903      	ldrh	r3, [r0, #8]
   1b402:	b90b      	cbnz	r3, 1b408 <sc_restore+0x1c>
   1b404:	8942      	ldrh	r2, [r0, #10]
   1b406:	b1e2      	cbz	r2, 1b442 <sc_restore+0x56>
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1b408:	f8ad 3004 	strh.w	r3, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1b40c:	896b      	ldrh	r3, [r5, #10]
   1b40e:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   1b412:	4620      	mov	r0, r4
   1b414:	f7fd fc34 	bl	18c80 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1b418:	4913      	ldr	r1, [pc, #76]	; (1b468 <sc_restore+0x7c>)
   1b41a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1b41e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   1b422:	4a12      	ldr	r2, [pc, #72]	; (1b46c <sc_restore+0x80>)
   1b424:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1b426:	4a12      	ldr	r2, [pc, #72]	; (1b470 <sc_restore+0x84>)
   1b428:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1b42a:	aa01      	add	r2, sp, #4
   1b42c:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1b42e:	2204      	movs	r2, #4
   1b430:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1b432:	4619      	mov	r1, r3
   1b434:	4620      	mov	r0, r4
   1b436:	f7ff ff23 	bl	1b280 <bt_gatt_indicate>
   1b43a:	b920      	cbnz	r0, 1b446 <sc_restore+0x5a>
	sc_reset(cfg);
   1b43c:	4628      	mov	r0, r5
   1b43e:	f00b fb52 	bl	26ae6 <sc_reset>
}
   1b442:	b003      	add	sp, #12
   1b444:	bd30      	pop	{r4, r5, pc}
   1b446:	4b0b      	ldr	r3, [pc, #44]	; (1b474 <sc_restore+0x88>)
   1b448:	4a0b      	ldr	r2, [pc, #44]	; (1b478 <sc_restore+0x8c>)
   1b44a:	1a9b      	subs	r3, r3, r2
   1b44c:	08db      	lsrs	r3, r3, #3
		BT_ERR("SC restore indication failed");
   1b44e:	f04f 0100 	mov.w	r1, #0
   1b452:	2201      	movs	r2, #1
   1b454:	f362 0102 	bfi	r1, r2, #0, #3
   1b458:	f36f 01c5 	bfc	r1, #3, #3
   1b45c:	f363 118f 	bfi	r1, r3, #6, #10
   1b460:	4806      	ldr	r0, [pc, #24]	; (1b47c <sc_restore+0x90>)
   1b462:	f7f5 ff0b 	bl	1127c <log_0>
   1b466:	e7e9      	b.n	1b43c <sc_restore+0x50>
   1b468:	200027bc 	.word	0x200027bc
   1b46c:	0002c7b8 	.word	0x0002c7b8
   1b470:	000269c5 	.word	0x000269c5
   1b474:	00029f04 	.word	0x00029f04
   1b478:	00029ecc 	.word	0x00029ecc
   1b47c:	0002c6f8 	.word	0x0002c6f8

0001b480 <gatt_notify>:
{
   1b480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b484:	4606      	mov	r6, r0
   1b486:	460f      	mov	r7, r1
   1b488:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr,
   1b48a:	2214      	movs	r2, #20
   1b48c:	6861      	ldr	r1, [r4, #4]
   1b48e:	f00b fcc5 	bl	26e1c <bt_gatt_check_perm>
   1b492:	bb08      	cbnz	r0, 1b4d8 <gatt_notify+0x58>
				sizeof(*nfy) + params->len);
   1b494:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1b496:	3202      	adds	r2, #2
   1b498:	211b      	movs	r1, #27
   1b49a:	4630      	mov	r0, r6
   1b49c:	f7fe fb16 	bl	19acc <bt_att_create_pdu>
	if (!buf) {
   1b4a0:	4680      	mov	r8, r0
   1b4a2:	b360      	cbz	r0, 1b4fe <gatt_notify+0x7e>
   1b4a4:	f100 0908 	add.w	r9, r0, #8
   1b4a8:	2102      	movs	r1, #2
   1b4aa:	4648      	mov	r0, r9
   1b4ac:	f00c ff41 	bl	28332 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1b4b0:	4605      	mov	r5, r0
   1b4b2:	f825 7b02 	strh.w	r7, [r5], #2
   1b4b6:	89a1      	ldrh	r1, [r4, #12]
   1b4b8:	4648      	mov	r0, r9
   1b4ba:	f00c ff3a 	bl	28332 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   1b4be:	89a2      	ldrh	r2, [r4, #12]
   1b4c0:	68a1      	ldr	r1, [r4, #8]
   1b4c2:	4628      	mov	r0, r5
   1b4c4:	f009 fad2 	bl	24a6c <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   1b4c8:	6963      	ldr	r3, [r4, #20]
   1b4ca:	6922      	ldr	r2, [r4, #16]
   1b4cc:	4641      	mov	r1, r8
   1b4ce:	4630      	mov	r0, r6
   1b4d0:	f00b f956 	bl	26780 <bt_att_send>
}
   1b4d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b4d8:	4b12      	ldr	r3, [pc, #72]	; (1b524 <gatt_notify+0xa4>)
   1b4da:	4a13      	ldr	r2, [pc, #76]	; (1b528 <gatt_notify+0xa8>)
   1b4dc:	1a9b      	subs	r3, r3, r2
   1b4de:	08db      	lsrs	r3, r3, #3
		BT_WARN("Link is not encrypted");
   1b4e0:	f04f 0100 	mov.w	r1, #0
   1b4e4:	2202      	movs	r2, #2
   1b4e6:	f362 0102 	bfi	r1, r2, #0, #3
   1b4ea:	f36f 01c5 	bfc	r1, #3, #3
   1b4ee:	f363 118f 	bfi	r1, r3, #6, #10
   1b4f2:	480e      	ldr	r0, [pc, #56]	; (1b52c <gatt_notify+0xac>)
   1b4f4:	f7f5 fec2 	bl	1127c <log_0>
		return -EPERM;
   1b4f8:	f04f 30ff 	mov.w	r0, #4294967295
   1b4fc:	e7ea      	b.n	1b4d4 <gatt_notify+0x54>
   1b4fe:	4b09      	ldr	r3, [pc, #36]	; (1b524 <gatt_notify+0xa4>)
   1b500:	4a09      	ldr	r2, [pc, #36]	; (1b528 <gatt_notify+0xa8>)
   1b502:	1a9b      	subs	r3, r3, r2
   1b504:	08db      	lsrs	r3, r3, #3
		BT_WARN("No buffer available to send notification");
   1b506:	f04f 0100 	mov.w	r1, #0
   1b50a:	2202      	movs	r2, #2
   1b50c:	f362 0102 	bfi	r1, r2, #0, #3
   1b510:	f36f 01c5 	bfc	r1, #3, #3
   1b514:	f363 118f 	bfi	r1, r3, #6, #10
   1b518:	4805      	ldr	r0, [pc, #20]	; (1b530 <gatt_notify+0xb0>)
   1b51a:	f7f5 feaf 	bl	1127c <log_0>
		return -ENOMEM;
   1b51e:	f06f 000b 	mvn.w	r0, #11
   1b522:	e7d7      	b.n	1b4d4 <gatt_notify+0x54>
   1b524:	00029f04 	.word	0x00029f04
   1b528:	00029ecc 	.word	0x00029ecc
   1b52c:	0002c6b8 	.word	0x0002c6b8
   1b530:	0002c718 	.word	0x0002c718

0001b534 <notify_cb>:
{
   1b534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b538:	b083      	sub	sp, #12
   1b53a:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b53c:	6882      	ldr	r2, [r0, #8]
   1b53e:	4b51      	ldr	r3, [pc, #324]	; (1b684 <notify_cb+0x150>)
   1b540:	429a      	cmp	r2, r3
   1b542:	d005      	beq.n	1b550 <notify_cb+0x1c>
		return BT_GATT_ITER_CONTINUE;
   1b544:	f04f 0901 	mov.w	r9, #1
}
   1b548:	4648      	mov	r0, r9
   1b54a:	b003      	add	sp, #12
   1b54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b550:	4605      	mov	r5, r0
	ccc = attr->user_data;
   1b552:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1b554:	4b4c      	ldr	r3, [pc, #304]	; (1b688 <notify_cb+0x154>)
   1b556:	429f      	cmp	r7, r3
   1b558:	d031      	beq.n	1b5be <notify_cb+0x8a>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1b55a:	2400      	movs	r4, #0
   1b55c:	e057      	b.n	1b60e <notify_cb+0xda>
				sc = (struct sc_data *)data->ind_params->data;
   1b55e:	6933      	ldr	r3, [r6, #16]
   1b560:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1b562:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   1b566:	8853      	ldrh	r3, [r2, #2]
   1b568:	8812      	ldrh	r2, [r2, #0]
   1b56a:	4649      	mov	r1, r9
   1b56c:	f8df c11c 	ldr.w	ip, [pc, #284]	; 1b68c <notify_cb+0x158>
   1b570:	f81c 0020 	ldrb.w	r0, [ip, r0, lsl #2]
   1b574:	f7fe fff2 	bl	1a55c <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1b578:	3401      	adds	r4, #1
   1b57a:	2c02      	cmp	r4, #2
   1b57c:	d8ed      	bhi.n	1b55a <notify_cb+0x26>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1b57e:	eb04 0944 	add.w	r9, r4, r4, lsl #1
   1b582:	4b42      	ldr	r3, [pc, #264]	; (1b68c <notify_cb+0x158>)
   1b584:	eb03 0989 	add.w	r9, r3, r9, lsl #2
   1b588:	f109 0901 	add.w	r9, r9, #1
   1b58c:	2300      	movs	r3, #0
   1b58e:	9300      	str	r3, [sp, #0]
   1b590:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   1b594:	2207      	movs	r2, #7
   1b596:	4669      	mov	r1, sp
   1b598:	4648      	mov	r0, r9
   1b59a:	f009 fa50 	bl	24a3e <memcmp>
   1b59e:	2800      	cmp	r0, #0
   1b5a0:	d0ea      	beq.n	1b578 <notify_cb+0x44>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1b5a2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1b5a6:	2207      	movs	r2, #7
   1b5a8:	4649      	mov	r1, r9
   1b5aa:	4838      	ldr	r0, [pc, #224]	; (1b68c <notify_cb+0x158>)
   1b5ac:	f810 0023 	ldrb.w	r0, [r0, r3, lsl #2]
   1b5b0:	f7fd f964 	bl	1887c <bt_conn_lookup_state_le>
			if (!conn) {
   1b5b4:	2800      	cmp	r0, #0
   1b5b6:	d0d2      	beq.n	1b55e <notify_cb+0x2a>
			bt_conn_unref(conn);
   1b5b8:	f00a f99e 	bl	258f8 <bt_conn_unref>
   1b5bc:	e7dc      	b.n	1b578 <notify_cb+0x44>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1b5be:	2400      	movs	r4, #0
   1b5c0:	e7db      	b.n	1b57a <notify_cb+0x46>
			bt_conn_unref(conn);
   1b5c2:	f00a f999 	bl	258f8 <bt_conn_unref>
			continue;
   1b5c6:	e021      	b.n	1b60c <notify_cb+0xd8>
			bt_conn_unref(conn);
   1b5c8:	4650      	mov	r0, sl
   1b5ca:	f00a f995 	bl	258f8 <bt_conn_unref>
			continue;
   1b5ce:	e01d      	b.n	1b60c <notify_cb+0xd8>
   1b5d0:	4b2f      	ldr	r3, [pc, #188]	; (1b690 <notify_cb+0x15c>)
   1b5d2:	4a30      	ldr	r2, [pc, #192]	; (1b694 <notify_cb+0x160>)
   1b5d4:	1a9b      	subs	r3, r3, r2
   1b5d6:	08db      	lsrs	r3, r3, #3
			BT_WARN("Link is not encrypted");
   1b5d8:	2202      	movs	r2, #2
   1b5da:	f362 0802 	bfi	r8, r2, #0, #3
   1b5de:	f36f 08c5 	bfc	r8, #3, #3
   1b5e2:	f363 188f 	bfi	r8, r3, #6, #10
   1b5e6:	4641      	mov	r1, r8
   1b5e8:	482b      	ldr	r0, [pc, #172]	; (1b698 <notify_cb+0x164>)
   1b5ea:	f7f5 fe47 	bl	1127c <log_0>
			continue;
   1b5ee:	e00d      	b.n	1b60c <notify_cb+0xd8>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1b5f0:	6932      	ldr	r2, [r6, #16]
   1b5f2:	88b1      	ldrh	r1, [r6, #4]
   1b5f4:	4650      	mov	r0, sl
   1b5f6:	f7ff ff43 	bl	1b480 <gatt_notify>
   1b5fa:	4683      	mov	fp, r0
		bt_conn_unref(conn);
   1b5fc:	4650      	mov	r0, sl
   1b5fe:	f00a f97b 	bl	258f8 <bt_conn_unref>
		if (err < 0) {
   1b602:	f1bb 0f00 	cmp.w	fp, #0
   1b606:	db9f      	blt.n	1b548 <notify_cb+0x14>
		data->err = 0;
   1b608:	2300      	movs	r3, #0
   1b60a:	60b3      	str	r3, [r6, #8]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1b60c:	3401      	adds	r4, #1
   1b60e:	2c01      	cmp	r4, #1
   1b610:	d834      	bhi.n	1b67c <notify_cb+0x148>
		if (cfg->value != data->type) {
   1b612:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1b616:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   1b61a:	891a      	ldrh	r2, [r3, #8]
   1b61c:	89b3      	ldrh	r3, [r6, #12]
   1b61e:	429a      	cmp	r2, r3
   1b620:	d1f4      	bne.n	1b60c <notify_cb+0xd8>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1b622:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1b626:	eb07 0143 	add.w	r1, r7, r3, lsl #1
   1b62a:	3101      	adds	r1, #1
   1b62c:	f817 0013 	ldrb.w	r0, [r7, r3, lsl #1]
   1b630:	f7fd f8ac 	bl	1878c <bt_conn_lookup_addr_le>
		if (!conn) {
   1b634:	4682      	mov	sl, r0
   1b636:	2800      	cmp	r0, #0
   1b638:	d0e8      	beq.n	1b60c <notify_cb+0xd8>
		if (conn->state != BT_CONN_CONNECTED) {
   1b63a:	7b43      	ldrb	r3, [r0, #13]
   1b63c:	2b07      	cmp	r3, #7
   1b63e:	d1c0      	bne.n	1b5c2 <notify_cb+0x8e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1b640:	6a3b      	ldr	r3, [r7, #32]
   1b642:	b11b      	cbz	r3, 1b64c <notify_cb+0x118>
   1b644:	4629      	mov	r1, r5
   1b646:	4798      	blx	r3
   1b648:	2800      	cmp	r0, #0
   1b64a:	d0bd      	beq.n	1b5c8 <notify_cb+0x94>
		if (bt_gatt_check_perm(conn, attr,
   1b64c:	2214      	movs	r2, #20
   1b64e:	4629      	mov	r1, r5
   1b650:	4650      	mov	r0, sl
   1b652:	f00b fbe3 	bl	26e1c <bt_gatt_check_perm>
   1b656:	4681      	mov	r9, r0
   1b658:	2800      	cmp	r0, #0
   1b65a:	d1b9      	bne.n	1b5d0 <notify_cb+0x9c>
		if (data->type == BT_GATT_CCC_INDICATE) {
   1b65c:	89b3      	ldrh	r3, [r6, #12]
   1b65e:	2b02      	cmp	r3, #2
   1b660:	d1c6      	bne.n	1b5f0 <notify_cb+0xbc>
			err = gatt_indicate(conn, data->handle,
   1b662:	6932      	ldr	r2, [r6, #16]
   1b664:	88b1      	ldrh	r1, [r6, #4]
   1b666:	4650      	mov	r0, sl
   1b668:	f7ff fd94 	bl	1b194 <gatt_indicate>
			if (err == 0) {
   1b66c:	4683      	mov	fp, r0
   1b66e:	2800      	cmp	r0, #0
   1b670:	d1c4      	bne.n	1b5fc <notify_cb+0xc8>
				data->ind_params->_ref++;
   1b672:	6932      	ldr	r2, [r6, #16]
   1b674:	7d93      	ldrb	r3, [r2, #22]
   1b676:	3301      	adds	r3, #1
   1b678:	7593      	strb	r3, [r2, #22]
   1b67a:	e7bf      	b.n	1b5fc <notify_cb+0xc8>
	return BT_GATT_ITER_CONTINUE;
   1b67c:	f04f 0901 	mov.w	r9, #1
   1b680:	e762      	b.n	1b548 <notify_cb+0x14>
   1b682:	bf00      	nop
   1b684:	0001a371 	.word	0x0001a371
   1b688:	20000628 	.word	0x20000628
   1b68c:	20002798 	.word	0x20002798
   1b690:	00029f04 	.word	0x00029f04
   1b694:	00029ecc 	.word	0x00029ecc
   1b698:	0002c6b8 	.word	0x0002c6b8

0001b69c <update_ccc>:
{
   1b69c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b6a0:	4616      	mov	r6, r2
	struct bt_conn *conn = data->conn;
   1b6a2:	f8d2 8000 	ldr.w	r8, [r2]
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b6a6:	6882      	ldr	r2, [r0, #8]
   1b6a8:	4b2a      	ldr	r3, [pc, #168]	; (1b754 <update_ccc+0xb8>)
   1b6aa:	429a      	cmp	r2, r3
   1b6ac:	d002      	beq.n	1b6b4 <update_ccc+0x18>
}
   1b6ae:	2001      	movs	r0, #1
   1b6b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b6b4:	4605      	mov	r5, r0
	ccc = attr->user_data;
   1b6b6:	68c7      	ldr	r7, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1b6b8:	2400      	movs	r4, #0
   1b6ba:	e019      	b.n	1b6f0 <update_ccc+0x54>
   1b6bc:	4b26      	ldr	r3, [pc, #152]	; (1b758 <update_ccc+0xbc>)
   1b6be:	4a27      	ldr	r2, [pc, #156]	; (1b75c <update_ccc+0xc0>)
   1b6c0:	1a9b      	subs	r3, r3, r2
   1b6c2:	08db      	lsrs	r3, r3, #3
				BT_WARN("CCC %p not writable", attr);
   1b6c4:	2202      	movs	r2, #2
   1b6c6:	f362 0902 	bfi	r9, r2, #0, #3
   1b6ca:	f36f 09c5 	bfc	r9, #3, #3
   1b6ce:	f363 198f 	bfi	r9, r3, #6, #10
   1b6d2:	464a      	mov	r2, r9
   1b6d4:	4629      	mov	r1, r5
   1b6d6:	4822      	ldr	r0, [pc, #136]	; (1b760 <update_ccc+0xc4>)
   1b6d8:	f7f5 fd1a 	bl	11110 <log_1>
				continue;
   1b6dc:	e007      	b.n	1b6ee <update_ccc+0x52>
				sec = BT_SECURITY_L3;
   1b6de:	f04f 0a03 	mov.w	sl, #3
   1b6e2:	e026      	b.n	1b732 <update_ccc+0x96>
				if (data->sec < sec) {
   1b6e4:	7933      	ldrb	r3, [r6, #4]
   1b6e6:	459a      	cmp	sl, r3
   1b6e8:	d901      	bls.n	1b6ee <update_ccc+0x52>
					data->sec = sec;
   1b6ea:	f886 a004 	strb.w	sl, [r6, #4]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1b6ee:	3401      	adds	r4, #1
   1b6f0:	2c01      	cmp	r4, #1
   1b6f2:	d8dc      	bhi.n	1b6ae <update_ccc+0x12>
		if (!cfg->value ||
   1b6f4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1b6f8:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   1b6fc:	891b      	ldrh	r3, [r3, #8]
   1b6fe:	2b00      	cmp	r3, #0
   1b700:	d0f5      	beq.n	1b6ee <update_ccc+0x52>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1b702:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1b706:	eb07 0243 	add.w	r2, r7, r3, lsl #1
   1b70a:	3201      	adds	r2, #1
   1b70c:	f817 1013 	ldrb.w	r1, [r7, r3, lsl #1]
   1b710:	4640      	mov	r0, r8
   1b712:	f00a f8a3 	bl	2585c <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1b716:	2800      	cmp	r0, #0
   1b718:	d0e9      	beq.n	1b6ee <update_ccc+0x52>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1b71a:	222a      	movs	r2, #42	; 0x2a
   1b71c:	4629      	mov	r1, r5
   1b71e:	4640      	mov	r0, r8
   1b720:	f00b fb7c 	bl	26e1c <bt_gatt_check_perm>
		if (err) {
   1b724:	b150      	cbz	r0, 1b73c <update_ccc+0xa0>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1b726:	2803      	cmp	r0, #3
   1b728:	d0c8      	beq.n	1b6bc <update_ccc+0x20>
			if (err == BT_ATT_ERR_AUTHENTICATION) {
   1b72a:	2805      	cmp	r0, #5
   1b72c:	d0d7      	beq.n	1b6de <update_ccc+0x42>
			sec = BT_SECURITY_L2;
   1b72e:	f04f 0a02 	mov.w	sl, #2
			    bt_conn_get_security(conn) < sec) {
   1b732:	4640      	mov	r0, r8
   1b734:	f00a f813 	bl	2575e <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   1b738:	4582      	cmp	sl, r0
   1b73a:	d8d3      	bhi.n	1b6e4 <update_ccc+0x48>
		gatt_ccc_changed(attr, ccc);
   1b73c:	4639      	mov	r1, r7
   1b73e:	4628      	mov	r0, r5
   1b740:	f00b f8a0 	bl	26884 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1b744:	4b07      	ldr	r3, [pc, #28]	; (1b764 <update_ccc+0xc8>)
   1b746:	429f      	cmp	r7, r3
   1b748:	d1b1      	bne.n	1b6ae <update_ccc+0x12>
			sc_restore(conn);
   1b74a:	4640      	mov	r0, r8
   1b74c:	f7ff fe4e 	bl	1b3ec <sc_restore>
   1b750:	e7ad      	b.n	1b6ae <update_ccc+0x12>
   1b752:	bf00      	nop
   1b754:	0001a371 	.word	0x0001a371
   1b758:	00029f04 	.word	0x00029f04
   1b75c:	00029ecc 	.word	0x00029ecc
   1b760:	0002c744 	.word	0x0002c744
   1b764:	20000628 	.word	0x20000628

0001b768 <bt_gatt_connected>:
{
   1b768:	b570      	push	{r4, r5, r6, lr}
   1b76a:	b090      	sub	sp, #64	; 0x40
   1b76c:	4604      	mov	r4, r0
	data.conn = conn;
   1b76e:	900e      	str	r0, [sp, #56]	; 0x38
	data.sec = BT_SECURITY_L1;
   1b770:	2301      	movs	r3, #1
   1b772:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b776:	f100 0588 	add.w	r5, r0, #136	; 0x88
   1b77a:	4629      	mov	r1, r5
   1b77c:	7a00      	ldrb	r0, [r0, #8]
   1b77e:	f009 fc6d 	bl	2505c <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1b782:	b190      	cbz	r0, 1b7aa <bt_gatt_connected+0x42>
		if (conn->id) {
   1b784:	7a22      	ldrb	r2, [r4, #8]
   1b786:	b32a      	cbz	r2, 1b7d4 <bt_gatt_connected+0x6c>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1b788:	ae04      	add	r6, sp, #16
   1b78a:	2104      	movs	r1, #4
   1b78c:	4630      	mov	r0, r6
   1b78e:	f7f4 fc1d 	bl	ffcc <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1b792:	9600      	str	r6, [sp, #0]
   1b794:	462b      	mov	r3, r5
   1b796:	4a16      	ldr	r2, [pc, #88]	; (1b7f0 <bt_gatt_connected+0x88>)
   1b798:	2124      	movs	r1, #36	; 0x24
   1b79a:	a805      	add	r0, sp, #20
   1b79c:	f7f9 f8b6 	bl	1490c <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   1b7a0:	aa05      	add	r2, sp, #20
   1b7a2:	4914      	ldr	r1, [pc, #80]	; (1b7f4 <bt_gatt_connected+0x8c>)
   1b7a4:	4610      	mov	r0, r2
   1b7a6:	f7f6 fc1b 	bl	11fe0 <settings_load_subtree_direct>
   1b7aa:	ab0e      	add	r3, sp, #56	; 0x38
   1b7ac:	9302      	str	r3, [sp, #8]
   1b7ae:	4b12      	ldr	r3, [pc, #72]	; (1b7f8 <bt_gatt_connected+0x90>)
   1b7b0:	9301      	str	r3, [sp, #4]
   1b7b2:	2200      	movs	r2, #0
   1b7b4:	9200      	str	r2, [sp, #0]
   1b7b6:	4613      	mov	r3, r2
   1b7b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b7bc:	2001      	movs	r0, #1
   1b7be:	f7ff fadf 	bl	1ad80 <bt_gatt_foreach_attr_type>
	    bt_conn_get_security(conn) < data.sec) {
   1b7c2:	4620      	mov	r0, r4
   1b7c4:	f009 ffcb 	bl	2575e <bt_conn_get_security>
   1b7c8:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1b7cc:	4288      	cmp	r0, r1
   1b7ce:	d30a      	bcc.n	1b7e6 <bt_gatt_connected+0x7e>
}
   1b7d0:	b010      	add	sp, #64	; 0x40
   1b7d2:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1b7d4:	2300      	movs	r3, #0
   1b7d6:	9300      	str	r3, [sp, #0]
   1b7d8:	462b      	mov	r3, r5
   1b7da:	4a05      	ldr	r2, [pc, #20]	; (1b7f0 <bt_gatt_connected+0x88>)
   1b7dc:	2124      	movs	r1, #36	; 0x24
   1b7de:	a805      	add	r0, sp, #20
   1b7e0:	f7f9 f894 	bl	1490c <bt_settings_encode_key>
   1b7e4:	e7dc      	b.n	1b7a0 <bt_gatt_connected+0x38>
		bt_conn_set_security(conn, data.sec);
   1b7e6:	4620      	mov	r0, r4
   1b7e8:	f009 ff81 	bl	256ee <bt_conn_set_security>
}
   1b7ec:	e7f0      	b.n	1b7d0 <bt_gatt_connected+0x68>
   1b7ee:	bf00      	nop
   1b7f0:	0002c6b4 	.word	0x0002c6b4
   1b7f4:	0001b0a1 	.word	0x0001b0a1
   1b7f8:	0001b69d 	.word	0x0001b69d

0001b7fc <bt_gatt_encrypt_change>:
{
   1b7fc:	b500      	push	{lr}
   1b7fe:	b087      	sub	sp, #28
	data.conn = conn;
   1b800:	9004      	str	r0, [sp, #16]
	data.sec = BT_SECURITY_L1;
   1b802:	2001      	movs	r0, #1
   1b804:	f88d 0014 	strb.w	r0, [sp, #20]
   1b808:	ab04      	add	r3, sp, #16
   1b80a:	9302      	str	r3, [sp, #8]
   1b80c:	4b05      	ldr	r3, [pc, #20]	; (1b824 <bt_gatt_encrypt_change+0x28>)
   1b80e:	9301      	str	r3, [sp, #4]
   1b810:	2200      	movs	r2, #0
   1b812:	9200      	str	r2, [sp, #0]
   1b814:	4613      	mov	r3, r2
   1b816:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b81a:	f7ff fab1 	bl	1ad80 <bt_gatt_foreach_attr_type>
}
   1b81e:	b007      	add	sp, #28
   1b820:	f85d fb04 	ldr.w	pc, [sp], #4
   1b824:	0001b69d 	.word	0x0001b69d

0001b828 <db_hash_read>:
{
   1b828:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b82a:	b085      	sub	sp, #20
   1b82c:	4604      	mov	r4, r0
   1b82e:	460d      	mov	r5, r1
   1b830:	4616      	mov	r6, r2
   1b832:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1b834:	4812      	ldr	r0, [pc, #72]	; (1b880 <db_hash_read+0x58>)
   1b836:	f100 0150 	add.w	r1, r0, #80	; 0x50
   1b83a:	3020      	adds	r0, #32
   1b83c:	f00d fe8f 	bl	2955e <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b840:	f3bf 8f5b 	dmb	ish
   1b844:	4b0f      	ldr	r3, [pc, #60]	; (1b884 <db_hash_read+0x5c>)
   1b846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1b848:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1b84c:	f013 0f04 	tst.w	r3, #4
   1b850:	d012      	beq.n	1b878 <db_hash_read+0x50>
	bt_gatt_change_aware(conn, true);
   1b852:	2101      	movs	r1, #1
   1b854:	4620      	mov	r0, r4
   1b856:	f00b fb12 	bl	26e7e <bt_gatt_change_aware>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1b85a:	2310      	movs	r3, #16
   1b85c:	9302      	str	r3, [sp, #8]
   1b85e:	4b08      	ldr	r3, [pc, #32]	; (1b880 <db_hash_read+0x58>)
   1b860:	9301      	str	r3, [sp, #4]
   1b862:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1b866:	9300      	str	r3, [sp, #0]
   1b868:	463b      	mov	r3, r7
   1b86a:	4632      	mov	r2, r6
   1b86c:	4629      	mov	r1, r5
   1b86e:	4620      	mov	r0, r4
   1b870:	f00b f9c9 	bl	26c06 <bt_gatt_attr_read>
}
   1b874:	b005      	add	sp, #20
   1b876:	bdf0      	pop	{r4, r5, r6, r7, pc}
		db_hash_gen(true);
   1b878:	2001      	movs	r0, #1
   1b87a:	f7ff facb 	bl	1ae14 <db_hash_gen>
   1b87e:	e7e8      	b.n	1b852 <db_hash_read+0x2a>
   1b880:	20001b48 	.word	0x20001b48
   1b884:	20001bc0 	.word	0x20001bc0

0001b888 <bt_gatt_store_ccc>:
{
   1b888:	b570      	push	{r4, r5, r6, lr}
   1b88a:	b0c2      	sub	sp, #264	; 0x108
   1b88c:	4604      	mov	r4, r0
   1b88e:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   1b890:	910f      	str	r1, [sp, #60]	; 0x3c
	save.addr_with_id.id = id;
   1b892:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
	save.count = 0;
   1b896:	2200      	movs	r2, #0
   1b898:	9241      	str	r2, [sp, #260]	; 0x104
   1b89a:	ab0f      	add	r3, sp, #60	; 0x3c
   1b89c:	9302      	str	r3, [sp, #8]
   1b89e:	4b24      	ldr	r3, [pc, #144]	; (1b930 <bt_gatt_store_ccc+0xa8>)
   1b8a0:	9301      	str	r3, [sp, #4]
   1b8a2:	9200      	str	r2, [sp, #0]
   1b8a4:	4613      	mov	r3, r2
   1b8a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b8aa:	2001      	movs	r0, #1
   1b8ac:	f7ff fa68 	bl	1ad80 <bt_gatt_foreach_attr_type>
	if (id) {
   1b8b0:	b18c      	cbz	r4, 1b8d6 <bt_gatt_store_ccc+0x4e>
		u8_to_dec(id_str, sizeof(id_str), id);
   1b8b2:	ae05      	add	r6, sp, #20
   1b8b4:	4622      	mov	r2, r4
   1b8b6:	2104      	movs	r1, #4
   1b8b8:	4630      	mov	r0, r6
   1b8ba:	f7f4 fb87 	bl	ffcc <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   1b8be:	9600      	str	r6, [sp, #0]
   1b8c0:	462b      	mov	r3, r5
   1b8c2:	4a1c      	ldr	r2, [pc, #112]	; (1b934 <bt_gatt_store_ccc+0xac>)
   1b8c4:	2124      	movs	r1, #36	; 0x24
   1b8c6:	a806      	add	r0, sp, #24
   1b8c8:	f7f9 f820 	bl	1490c <bt_settings_encode_key>
	if (save.count) {
   1b8cc:	9c41      	ldr	r4, [sp, #260]	; 0x104
   1b8ce:	b15c      	cbz	r4, 1b8e8 <bt_gatt_store_ccc+0x60>
		len = save.count * sizeof(*save.store);
   1b8d0:	00a4      	lsls	r4, r4, #2
		str = (char *)save.store;
   1b8d2:	a911      	add	r1, sp, #68	; 0x44
   1b8d4:	e009      	b.n	1b8ea <bt_gatt_store_ccc+0x62>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1b8d6:	2300      	movs	r3, #0
   1b8d8:	9300      	str	r3, [sp, #0]
   1b8da:	462b      	mov	r3, r5
   1b8dc:	4a15      	ldr	r2, [pc, #84]	; (1b934 <bt_gatt_store_ccc+0xac>)
   1b8de:	2124      	movs	r1, #36	; 0x24
   1b8e0:	a806      	add	r0, sp, #24
   1b8e2:	f7f9 f813 	bl	1490c <bt_settings_encode_key>
   1b8e6:	e7f1      	b.n	1b8cc <bt_gatt_store_ccc+0x44>
		str = NULL;
   1b8e8:	2100      	movs	r1, #0
	err = settings_save_one(key, str, len);
   1b8ea:	4622      	mov	r2, r4
   1b8ec:	a806      	add	r0, sp, #24
   1b8ee:	f7f6 fb11 	bl	11f14 <settings_save_one>
	if (err) {
   1b8f2:	4605      	mov	r5, r0
   1b8f4:	b918      	cbnz	r0, 1b8fe <bt_gatt_store_ccc+0x76>
	if (len) {
   1b8f6:	b9cc      	cbnz	r4, 1b92c <bt_gatt_store_ccc+0xa4>
}
   1b8f8:	4628      	mov	r0, r5
   1b8fa:	b042      	add	sp, #264	; 0x108
   1b8fc:	bd70      	pop	{r4, r5, r6, pc}
   1b8fe:	4b0e      	ldr	r3, [pc, #56]	; (1b938 <bt_gatt_store_ccc+0xb0>)
   1b900:	4a0e      	ldr	r2, [pc, #56]	; (1b93c <bt_gatt_store_ccc+0xb4>)
   1b902:	1a9b      	subs	r3, r3, r2
   1b904:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to store CCCs (err %d)", err);
   1b906:	f04f 0200 	mov.w	r2, #0
   1b90a:	2101      	movs	r1, #1
   1b90c:	f361 0202 	bfi	r2, r1, #0, #3
   1b910:	f36f 02c5 	bfc	r2, #3, #3
   1b914:	f363 128f 	bfi	r2, r3, #6, #10
   1b918:	4601      	mov	r1, r0
   1b91a:	4809      	ldr	r0, [pc, #36]	; (1b940 <bt_gatt_store_ccc+0xb8>)
   1b91c:	f7f5 fbf8 	bl	11110 <log_1>
		return err;
   1b920:	e7ea      	b.n	1b8f8 <bt_gatt_store_ccc+0x70>
		for (size_t i = 0; i < save.count; i++) {
   1b922:	3301      	adds	r3, #1
   1b924:	9a41      	ldr	r2, [sp, #260]	; 0x104
   1b926:	429a      	cmp	r2, r3
   1b928:	d8fb      	bhi.n	1b922 <bt_gatt_store_ccc+0x9a>
   1b92a:	e7e5      	b.n	1b8f8 <bt_gatt_store_ccc+0x70>
   1b92c:	2300      	movs	r3, #0
   1b92e:	e7f9      	b.n	1b924 <bt_gatt_store_ccc+0x9c>
   1b930:	0001a249 	.word	0x0001a249
   1b934:	0002c6b4 	.word	0x0002c6b4
   1b938:	00029f04 	.word	0x00029f04
   1b93c:	00029ecc 	.word	0x00029ecc
   1b940:	0002c758 	.word	0x0002c758

0001b944 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1b944:	b530      	push	{r4, r5, lr}
   1b946:	b087      	sub	sp, #28
   1b948:	4604      	mov	r4, r0
   1b94a:	9002      	str	r0, [sp, #8]
   1b94c:	4b19      	ldr	r3, [pc, #100]	; (1b9b4 <bt_gatt_disconnected+0x70>)
   1b94e:	9301      	str	r3, [sp, #4]
   1b950:	2200      	movs	r2, #0
   1b952:	9200      	str	r2, [sp, #0]
   1b954:	4613      	mov	r3, r2
   1b956:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b95a:	2001      	movs	r0, #1
   1b95c:	f7ff fa10 	bl	1ad80 <bt_gatt_foreach_attr_type>
		k_work_cancel_delayable(&gatt_ccc_store.work);
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b960:	f104 0588 	add.w	r5, r4, #136	; 0x88
   1b964:	4629      	mov	r1, r5
   1b966:	7a20      	ldrb	r0, [r4, #8]
   1b968:	f009 fb78 	bl	2505c <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   1b96c:	b948      	cbnz	r0, 1b982 <bt_gatt_disconnected+0x3e>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b96e:	4629      	mov	r1, r5
   1b970:	7a20      	ldrb	r0, [r4, #8]
   1b972:	f009 fb73 	bl	2505c <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1b976:	b960      	cbnz	r0, 1b992 <bt_gatt_disconnected+0x4e>
#if defined(CONFIG_BT_GATT_CLIENT)
	remove_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
   1b978:	4620      	mov	r0, r4
   1b97a:	f00b f920 	bl	26bbe <remove_cf_cfg>
#endif
}
   1b97e:	b007      	add	sp, #28
   1b980:	bd30      	pop	{r4, r5, pc}
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   1b982:	4629      	mov	r1, r5
   1b984:	7a20      	ldrb	r0, [r4, #8]
   1b986:	f7ff ff7f 	bl	1b888 <bt_gatt_store_ccc>
		bt_gatt_store_cf(conn);
   1b98a:	4620      	mov	r0, r4
   1b98c:	f7fe fe34 	bl	1a5f8 <bt_gatt_store_cf>
   1b990:	e7ed      	b.n	1b96e <bt_gatt_disconnected+0x2a>
		struct addr_with_id addr_with_id = {
   1b992:	9504      	str	r5, [sp, #16]
			.id = conn->id,
   1b994:	7a23      	ldrb	r3, [r4, #8]
		struct addr_with_id addr_with_id = {
   1b996:	f88d 3014 	strb.w	r3, [sp, #20]
   1b99a:	ab04      	add	r3, sp, #16
   1b99c:	9302      	str	r3, [sp, #8]
   1b99e:	4b06      	ldr	r3, [pc, #24]	; (1b9b8 <bt_gatt_disconnected+0x74>)
   1b9a0:	9301      	str	r3, [sp, #4]
   1b9a2:	2200      	movs	r2, #0
   1b9a4:	9200      	str	r2, [sp, #0]
   1b9a6:	4613      	mov	r3, r2
   1b9a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b9ac:	2001      	movs	r0, #1
   1b9ae:	f7ff f9e7 	bl	1ad80 <bt_gatt_foreach_attr_type>
   1b9b2:	e7e1      	b.n	1b978 <bt_gatt_disconnected+0x34>
   1b9b4:	0001a909 	.word	0x0001a909
   1b9b8:	0001a779 	.word	0x0001a779

0001b9bc <le_sc_supported>:
	 */
	if (IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		return false;
	}

	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1b9bc:	4b04      	ldr	r3, [pc, #16]	; (1b9d0 <le_sc_supported+0x14>)
   1b9be:	f893 0066 	ldrb.w	r0, [r3, #102]	; 0x66
   1b9c2:	f000 0006 	and.w	r0, r0, #6
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}
   1b9c6:	2806      	cmp	r0, #6
   1b9c8:	bf14      	ite	ne
   1b9ca:	2000      	movne	r0, #0
   1b9cc:	2001      	moveq	r0, #1
   1b9ce:	4770      	bx	lr
   1b9d0:	200002a0 	.word	0x200002a0

0001b9d4 <get_io_capa>:

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
   1b9d4:	4b11      	ldr	r3, [pc, #68]	; (1ba1c <get_io_capa+0x48>)
   1b9d6:	681b      	ldr	r3, [r3, #0]
   1b9d8:	b1bb      	cbz	r3, 1ba0a <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
   1b9da:	681a      	ldr	r2, [r3, #0]
   1b9dc:	b132      	cbz	r2, 1b9ec <get_io_capa+0x18>
   1b9de:	6859      	ldr	r1, [r3, #4]
   1b9e0:	b121      	cbz	r1, 1b9ec <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
   1b9e2:	6899      	ldr	r1, [r3, #8]
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
   1b9e4:	b999      	cbnz	r1, 1ba0e <get_io_capa+0x3a>
	    (bt_auth->passkey_confirm || !sc_supported)) {
   1b9e6:	490e      	ldr	r1, [pc, #56]	; (1ba20 <get_io_capa+0x4c>)
   1b9e8:	7809      	ldrb	r1, [r1, #0]
   1b9ea:	b191      	cbz	r1, 1ba12 <get_io_capa+0x3e>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
   1b9ec:	490c      	ldr	r1, [pc, #48]	; (1ba20 <get_io_capa+0x4c>)
   1b9ee:	7809      	ldrb	r1, [r1, #0]
   1b9f0:	b121      	cbz	r1, 1b9fc <get_io_capa+0x28>
   1b9f2:	b11a      	cbz	r2, 1b9fc <get_io_capa+0x28>
	    bt_auth->passkey_confirm) {
   1b9f4:	6899      	ldr	r1, [r3, #8]
	if (sc_supported && bt_auth->passkey_display &&
   1b9f6:	b109      	cbz	r1, 1b9fc <get_io_capa+0x28>
		return BT_SMP_IO_DISPLAY_YESNO;
   1b9f8:	2001      	movs	r0, #1
   1b9fa:	4770      	bx	lr
	}

	if (bt_auth->passkey_entry) {
   1b9fc:	685b      	ldr	r3, [r3, #4]
   1b9fe:	b953      	cbnz	r3, 1ba16 <get_io_capa+0x42>
		} else {
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
   1ba00:	b10a      	cbz	r2, 1ba06 <get_io_capa+0x32>
		return BT_SMP_IO_DISPLAY_ONLY;
   1ba02:	2000      	movs	r0, #0
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
	}
}
   1ba04:	4770      	bx	lr
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   1ba06:	2003      	movs	r0, #3
   1ba08:	4770      	bx	lr
   1ba0a:	2003      	movs	r0, #3
   1ba0c:	4770      	bx	lr
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   1ba0e:	2004      	movs	r0, #4
   1ba10:	4770      	bx	lr
   1ba12:	2004      	movs	r0, #4
   1ba14:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
   1ba16:	2002      	movs	r0, #2
   1ba18:	4770      	bx	lr
   1ba1a:	bf00      	nop
   1ba1c:	20002710 	.word	0x20002710
   1ba20:	20003990 	.word	0x20003990

0001ba24 <legacy_get_pair_method>:
static uint8_t legacy_get_pair_method(struct bt_smp *smp, uint8_t remote_io)
{
	struct bt_smp_pairing *req, *rsp;
	uint8_t method;

	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1ba24:	2904      	cmp	r1, #4
   1ba26:	d820      	bhi.n	1ba6a <legacy_get_pair_method+0x46>
{
   1ba28:	b538      	push	{r3, r4, r5, lr}
   1ba2a:	4604      	mov	r4, r0
   1ba2c:	460d      	mov	r5, r1

	req = (struct bt_smp_pairing *)&smp->preq[1];
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	/* if both sides have OOB data use OOB */
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1ba2e:	7ac3      	ldrb	r3, [r0, #11]
   1ba30:	7c82      	ldrb	r2, [r0, #18]
   1ba32:	4013      	ands	r3, r2
   1ba34:	f013 0f01 	tst.w	r3, #1
   1ba38:	d119      	bne.n	1ba6e <legacy_get_pair_method+0x4a>
		return LEGACY_OOB;
	}

	/* if none side requires MITM use JustWorks */
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1ba3a:	7b00      	ldrb	r0, [r0, #12]
   1ba3c:	7ce3      	ldrb	r3, [r4, #19]
   1ba3e:	4318      	orrs	r0, r3
   1ba40:	f010 0004 	ands.w	r0, r0, #4
   1ba44:	d008      	beq.n	1ba58 <legacy_get_pair_method+0x34>
		return JUST_WORKS;
	}

	method = gen_method_legacy[remote_io][get_io_capa()];
   1ba46:	f7ff ffc5 	bl	1b9d4 <get_io_capa>
   1ba4a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1ba4e:	4909      	ldr	r1, [pc, #36]	; (1ba74 <legacy_get_pair_method+0x50>)
   1ba50:	440d      	add	r5, r1
   1ba52:	5c28      	ldrb	r0, [r5, r0]

	/* if both sides have KeyboardDisplay capabilities, initiator displays
	 * and responder inputs
	 */
	if (method == PASSKEY_ROLE) {
   1ba54:	2804      	cmp	r0, #4
   1ba56:	d000      	beq.n	1ba5a <legacy_get_pair_method+0x36>
			method = PASSKEY_INPUT;
		}
	}

	return method;
}
   1ba58:	bd38      	pop	{r3, r4, r5, pc}
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   1ba5a:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   1ba5e:	78db      	ldrb	r3, [r3, #3]
   1ba60:	b10b      	cbz	r3, 1ba66 <legacy_get_pair_method+0x42>
			method = PASSKEY_INPUT;
   1ba62:	2001      	movs	r0, #1
   1ba64:	e7f8      	b.n	1ba58 <legacy_get_pair_method+0x34>
			method = PASSKEY_DISPLAY;
   1ba66:	2002      	movs	r0, #2
   1ba68:	e7f6      	b.n	1ba58 <legacy_get_pair_method+0x34>
		return JUST_WORKS;
   1ba6a:	2000      	movs	r0, #0
}
   1ba6c:	4770      	bx	lr
		return LEGACY_OOB;
   1ba6e:	2006      	movs	r0, #6
   1ba70:	e7f2      	b.n	1ba58 <legacy_get_pair_method+0x34>
   1ba72:	bf00      	nop
   1ba74:	0002cbe0 	.word	0x0002cbe0

0001ba78 <get_auth>:
{
	oobd_present = enable;
}

static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
{
   1ba78:	b510      	push	{r4, lr}
	if (sc_supported) {
   1ba7a:	4b0d      	ldr	r3, [pc, #52]	; (1bab0 <get_auth+0x38>)
   1ba7c:	781b      	ldrb	r3, [r3, #0]
   1ba7e:	b16b      	cbz	r3, 1ba9c <get_auth+0x24>
		auth &= BT_SMP_AUTH_MASK_SC;
   1ba80:	f001 040f 	and.w	r4, r1, #15
	} else {
		auth &= BT_SMP_AUTH_MASK;
	}

	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1ba84:	f7ff ffa6 	bl	1b9d4 <get_io_capa>
   1ba88:	2803      	cmp	r0, #3
   1ba8a:	d00a      	beq.n	1baa2 <get_auth+0x2a>
	    (!IS_ENABLED(CONFIG_BT_SMP_ENFORCE_MITM) &&
	    (conn->required_sec_level < BT_SECURITY_L3))) {
		auth &= ~(BT_SMP_AUTH_MITM);
	} else {
		auth |= BT_SMP_AUTH_MITM;
   1ba8c:	f044 0004 	orr.w	r0, r4, #4
	}

	if (bondable) {
   1ba90:	4b08      	ldr	r3, [pc, #32]	; (1bab4 <get_auth+0x3c>)
   1ba92:	781b      	ldrb	r3, [r3, #0]
   1ba94:	b143      	cbz	r3, 1baa8 <get_auth+0x30>
		auth |= BT_SMP_AUTH_BONDING;
   1ba96:	f040 0001 	orr.w	r0, r0, #1
	} else {
		auth &= ~BT_SMP_AUTH_BONDING;
	}

	return auth;
}
   1ba9a:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   1ba9c:	f001 0407 	and.w	r4, r1, #7
   1baa0:	e7f0      	b.n	1ba84 <get_auth+0xc>
		auth &= ~(BT_SMP_AUTH_MITM);
   1baa2:	f004 000b 	and.w	r0, r4, #11
   1baa6:	e7f3      	b.n	1ba90 <get_auth+0x18>
		auth &= ~BT_SMP_AUTH_BONDING;
   1baa8:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
   1baac:	e7f5      	b.n	1ba9a <get_auth+0x22>
   1baae:	bf00      	nop
   1bab0:	20003990 	.word	0x20003990
   1bab4:	20000669 	.word	0x20000669

0001bab8 <sec_level_reachable>:
		return BT_SMP_ERR_UNSPECIFIED;
	}
}

static bool sec_level_reachable(struct bt_conn *conn)
{
   1bab8:	b508      	push	{r3, lr}
	switch (conn->required_sec_level) {
   1baba:	7a83      	ldrb	r3, [r0, #10]
   1babc:	2b03      	cmp	r3, #3
   1babe:	d015      	beq.n	1baec <sec_level_reachable+0x34>
   1bac0:	d807      	bhi.n	1bad2 <sec_level_reachable+0x1a>
   1bac2:	3b01      	subs	r3, #1
   1bac4:	b2db      	uxtb	r3, r3
   1bac6:	2b01      	cmp	r3, #1
   1bac8:	d801      	bhi.n	1bace <sec_level_reachable+0x16>
   1baca:	2001      	movs	r0, #1
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
	default:
		return false;
	}
}
   1bacc:	bd08      	pop	{r3, pc}
		return false;
   1bace:	2000      	movs	r0, #0
   1bad0:	e7fc      	b.n	1bacc <sec_level_reachable+0x14>
	switch (conn->required_sec_level) {
   1bad2:	2b04      	cmp	r3, #4
   1bad4:	d108      	bne.n	1bae8 <sec_level_reachable+0x30>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1bad6:	f7ff ff7d 	bl	1b9d4 <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   1bada:	2803      	cmp	r0, #3
   1badc:	d017      	beq.n	1bb0e <sec_level_reachable+0x56>
   1bade:	4b12      	ldr	r3, [pc, #72]	; (1bb28 <sec_level_reachable+0x70>)
   1bae0:	781b      	ldrb	r3, [r3, #0]
   1bae2:	b9f3      	cbnz	r3, 1bb22 <sec_level_reachable+0x6a>
   1bae4:	2000      	movs	r0, #0
   1bae6:	e7f1      	b.n	1bacc <sec_level_reachable+0x14>
		return false;
   1bae8:	2000      	movs	r0, #0
   1baea:	e7ef      	b.n	1bacc <sec_level_reachable+0x14>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1baec:	f7ff ff72 	bl	1b9d4 <get_io_capa>
   1baf0:	2803      	cmp	r0, #3
   1baf2:	d001      	beq.n	1baf8 <sec_level_reachable+0x40>
   1baf4:	2001      	movs	r0, #1
   1baf6:	e7e9      	b.n	1bacc <sec_level_reachable+0x14>
		       (bt_auth && bt_auth->oob_data_request);
   1baf8:	4b0c      	ldr	r3, [pc, #48]	; (1bb2c <sec_level_reachable+0x74>)
   1bafa:	681b      	ldr	r3, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1bafc:	b12b      	cbz	r3, 1bb0a <sec_level_reachable+0x52>
		       (bt_auth && bt_auth->oob_data_request);
   1bafe:	68db      	ldr	r3, [r3, #12]
   1bb00:	b10b      	cbz	r3, 1bb06 <sec_level_reachable+0x4e>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1bb02:	2001      	movs	r0, #1
   1bb04:	e7e2      	b.n	1bacc <sec_level_reachable+0x14>
   1bb06:	2000      	movs	r0, #0
   1bb08:	e7e0      	b.n	1bacc <sec_level_reachable+0x14>
   1bb0a:	2000      	movs	r0, #0
   1bb0c:	e7de      	b.n	1bacc <sec_level_reachable+0x14>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   1bb0e:	4b07      	ldr	r3, [pc, #28]	; (1bb2c <sec_level_reachable+0x74>)
   1bb10:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1bb12:	b123      	cbz	r3, 1bb1e <sec_level_reachable+0x66>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   1bb14:	68db      	ldr	r3, [r3, #12]
   1bb16:	2b00      	cmp	r3, #0
   1bb18:	d1e1      	bne.n	1bade <sec_level_reachable+0x26>
   1bb1a:	2000      	movs	r0, #0
   1bb1c:	e7d6      	b.n	1bacc <sec_level_reachable+0x14>
   1bb1e:	2000      	movs	r0, #0
   1bb20:	e7d4      	b.n	1bacc <sec_level_reachable+0x14>
   1bb22:	2001      	movs	r0, #1
   1bb24:	e7d2      	b.n	1bacc <sec_level_reachable+0x14>
   1bb26:	bf00      	nop
   1bb28:	20003990 	.word	0x20003990
   1bb2c:	20002710 	.word	0x20002710

0001bb30 <smp_chan_get>:

static struct bt_smp *smp_chan_get(struct bt_conn *conn)
{
   1bb30:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   1bb32:	2106      	movs	r1, #6
   1bb34:	f00a f872 	bl	25c1c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1bb38:	4604      	mov	r4, r0
   1bb3a:	b118      	cbz	r0, 1bb44 <smp_chan_get+0x14>
		BT_ERR("Unable to find SMP channel");
		return NULL;
	}

	return CONTAINER_OF(chan, struct bt_smp, chan);
   1bb3c:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
}
   1bb40:	4620      	mov	r0, r4
   1bb42:	bd10      	pop	{r4, pc}
   1bb44:	4b08      	ldr	r3, [pc, #32]	; (1bb68 <smp_chan_get+0x38>)
   1bb46:	4a09      	ldr	r2, [pc, #36]	; (1bb6c <smp_chan_get+0x3c>)
   1bb48:	1a9b      	subs	r3, r3, r2
   1bb4a:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to find SMP channel");
   1bb4c:	f04f 0100 	mov.w	r1, #0
   1bb50:	2201      	movs	r2, #1
   1bb52:	f362 0102 	bfi	r1, r2, #0, #3
   1bb56:	f36f 01c5 	bfc	r1, #3, #3
   1bb5a:	f363 118f 	bfi	r1, r3, #6, #10
   1bb5e:	4804      	ldr	r0, [pc, #16]	; (1bb70 <smp_chan_get+0x40>)
   1bb60:	f7f5 fb8c 	bl	1127c <log_0>
		return NULL;
   1bb64:	e7ec      	b.n	1bb40 <smp_chan_get+0x10>
   1bb66:	bf00      	nop
   1bb68:	00029f44 	.word	0x00029f44
   1bb6c:	00029ecc 	.word	0x00029ecc
   1bb70:	0002c8bc 	.word	0x0002c8bc

0001bb74 <smp_find>:
	return 0;
}

static struct bt_smp *smp_find(int flag)
{
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1bb74:	2300      	movs	r3, #0
   1bb76:	2b01      	cmp	r3, #1
   1bb78:	dc1a      	bgt.n	1bbb0 <smp_find+0x3c>
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1bb7a:	eb03 1283 	add.w	r2, r3, r3, lsl #6
   1bb7e:	490d      	ldr	r1, [pc, #52]	; (1bbb4 <smp_find+0x40>)
   1bb80:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   1bb84:	3204      	adds	r2, #4
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1bb86:	0941      	lsrs	r1, r0, #5
   1bb88:	f3bf 8f5b 	dmb	ish
   1bb8c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   1bb90:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1bb94:	f000 011f 	and.w	r1, r0, #31
   1bb98:	410a      	asrs	r2, r1
   1bb9a:	f012 0f01 	tst.w	r2, #1
   1bb9e:	d101      	bne.n	1bba4 <smp_find+0x30>
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1bba0:	3301      	adds	r3, #1
   1bba2:	e7e8      	b.n	1bb76 <smp_find+0x2>
			return &bt_smp_pool[i];
   1bba4:	eb03 1383 	add.w	r3, r3, r3, lsl #6
   1bba8:	4802      	ldr	r0, [pc, #8]	; (1bbb4 <smp_find+0x40>)
   1bbaa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1bbae:	4770      	bx	lr
		}
	}

	return NULL;
   1bbb0:	2000      	movs	r0, #0
}
   1bbb2:	4770      	bx	lr
   1bbb4:	20001c18 	.word	0x20001c18

0001bbb8 <get_pair_method>:
{
   1bbb8:	b510      	push	{r4, lr}
   1bbba:	460c      	mov	r4, r1
   1bbbc:	f3bf 8f5b 	dmb	ish
   1bbc0:	6843      	ldr	r3, [r0, #4]
   1bbc2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1bbc6:	f013 0f20 	tst.w	r3, #32
   1bbca:	d01b      	beq.n	1bc04 <get_pair_method+0x4c>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   1bbcc:	7b03      	ldrb	r3, [r0, #12]
   1bbce:	7cc2      	ldrb	r2, [r0, #19]
   1bbd0:	ea03 0102 	and.w	r1, r3, r2
   1bbd4:	f011 0f08 	tst.w	r1, #8
   1bbd8:	d005      	beq.n	1bbe6 <get_pair_method+0x2e>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1bbda:	7ac1      	ldrb	r1, [r0, #11]
   1bbdc:	7c80      	ldrb	r0, [r0, #18]
   1bbde:	4301      	orrs	r1, r0
   1bbe0:	f011 0f01 	tst.w	r1, #1
   1bbe4:	d111      	bne.n	1bc0a <get_pair_method+0x52>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1bbe6:	2c04      	cmp	r4, #4
   1bbe8:	d811      	bhi.n	1bc0e <get_pair_method+0x56>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1bbea:	ea43 0002 	orr.w	r0, r3, r2
   1bbee:	f010 0004 	ands.w	r0, r0, #4
   1bbf2:	d009      	beq.n	1bc08 <get_pair_method+0x50>
	return gen_method_sc[remote_io][get_io_capa()];
   1bbf4:	f7ff feee 	bl	1b9d4 <get_io_capa>
   1bbf8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1bbfc:	4905      	ldr	r1, [pc, #20]	; (1bc14 <get_pair_method+0x5c>)
   1bbfe:	440c      	add	r4, r1
   1bc00:	5c20      	ldrb	r0, [r4, r0]
   1bc02:	e001      	b.n	1bc08 <get_pair_method+0x50>
		return legacy_get_pair_method(smp, remote_io);
   1bc04:	f7ff ff0e 	bl	1ba24 <legacy_get_pair_method>
}
   1bc08:	bd10      	pop	{r4, pc}
			return LE_SC_OOB;
   1bc0a:	2005      	movs	r0, #5
   1bc0c:	e7fc      	b.n	1bc08 <get_pair_method+0x50>
		return JUST_WORKS;
   1bc0e:	2000      	movs	r0, #0
   1bc10:	e7fa      	b.n	1bc08 <get_pair_method+0x50>
   1bc12:	bf00      	nop
   1bc14:	0002cbfc 	.word	0x0002cbfc

0001bc18 <legacy_pairing_random>:
{
   1bc18:	b570      	push	{r4, r5, r6, lr}
   1bc1a:	b088      	sub	sp, #32
   1bc1c:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1bc1e:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1bc22:	f100 0547 	add.w	r5, r0, #71	; 0x47
   1bc26:	f100 0637 	add.w	r6, r0, #55	; 0x37
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1bc2a:	f103 028f 	add.w	r2, r3, #143	; 0x8f
   1bc2e:	3396      	adds	r3, #150	; 0x96
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1bc30:	a904      	add	r1, sp, #16
   1bc32:	9102      	str	r1, [sp, #8]
   1bc34:	9301      	str	r3, [sp, #4]
   1bc36:	9200      	str	r2, [sp, #0]
   1bc38:	f100 0310 	add.w	r3, r0, #16
   1bc3c:	f100 0209 	add.w	r2, r0, #9
   1bc40:	4631      	mov	r1, r6
   1bc42:	4628      	mov	r0, r5
   1bc44:	f00b fad5 	bl	271f2 <smp_c1>
	if (err) {
   1bc48:	bbc8      	cbnz	r0, 1bcbe <legacy_pairing_random+0xa6>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   1bc4a:	2210      	movs	r2, #16
   1bc4c:	eb0d 0102 	add.w	r1, sp, r2
   1bc50:	f104 0017 	add.w	r0, r4, #23
   1bc54:	f008 fef3 	bl	24a3e <memcmp>
   1bc58:	bb98      	cbnz	r0, 1bcc2 <legacy_pairing_random+0xaa>
		err = smp_s1(smp->tk, smp->prnd, smp->rrnd, tmp);
   1bc5a:	ab04      	add	r3, sp, #16
   1bc5c:	4632      	mov	r2, r6
   1bc5e:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1bc62:	4628      	mov	r0, r5
   1bc64:	f00b fb0f 	bl	27286 <smp_s1>
		if (err) {
   1bc68:	b9b8      	cbnz	r0, 1bc9a <legacy_pairing_random+0x82>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
   1bc6a:	2210      	movs	r2, #16
   1bc6c:	eb0d 0102 	add.w	r1, sp, r2
   1bc70:	4628      	mov	r0, r5
   1bc72:	f008 fefb 	bl	24a6c <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1bc76:	1d23      	adds	r3, r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1bc78:	f3bf 8f5b 	dmb	ish
   1bc7c:	e853 2f00 	ldrex	r2, [r3]
   1bc80:	f042 0202 	orr.w	r2, r2, #2
   1bc84:	e843 2100 	strex	r1, r2, [r3]
   1bc88:	2900      	cmp	r1, #0
   1bc8a:	d1f7      	bne.n	1bc7c <legacy_pairing_random+0x64>
   1bc8c:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_random(smp);
   1bc90:	4620      	mov	r0, r4
   1bc92:	f00b fbd1 	bl	27438 <smp_send_pairing_random>
}
   1bc96:	b008      	add	sp, #32
   1bc98:	bd70      	pop	{r4, r5, r6, pc}
   1bc9a:	4b0b      	ldr	r3, [pc, #44]	; (1bcc8 <legacy_pairing_random+0xb0>)
   1bc9c:	4a0b      	ldr	r2, [pc, #44]	; (1bccc <legacy_pairing_random+0xb4>)
   1bc9e:	1a9b      	subs	r3, r3, r2
   1bca0:	08db      	lsrs	r3, r3, #3
			BT_ERR("Calculate STK failed");
   1bca2:	f04f 0100 	mov.w	r1, #0
   1bca6:	2201      	movs	r2, #1
   1bca8:	f362 0102 	bfi	r1, r2, #0, #3
   1bcac:	f36f 01c5 	bfc	r1, #3, #3
   1bcb0:	f363 118f 	bfi	r1, r3, #6, #10
   1bcb4:	4806      	ldr	r0, [pc, #24]	; (1bcd0 <legacy_pairing_random+0xb8>)
   1bcb6:	f7f5 fae1 	bl	1127c <log_0>
			return BT_SMP_ERR_UNSPECIFIED;
   1bcba:	2008      	movs	r0, #8
   1bcbc:	e7eb      	b.n	1bc96 <legacy_pairing_random+0x7e>
		return BT_SMP_ERR_UNSPECIFIED;
   1bcbe:	2008      	movs	r0, #8
   1bcc0:	e7e9      	b.n	1bc96 <legacy_pairing_random+0x7e>
		return BT_SMP_ERR_CONFIRM_FAILED;
   1bcc2:	2004      	movs	r0, #4
   1bcc4:	e7e7      	b.n	1bc96 <legacy_pairing_random+0x7e>
   1bcc6:	bf00      	nop
   1bcc8:	00029f44 	.word	0x00029f44
   1bccc:	00029ecc 	.word	0x00029ecc
   1bcd0:	0002c8d8 	.word	0x0002c8d8

0001bcd4 <sc_send_public_key>:
{
   1bcd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bcd6:	4604      	mov	r4, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   1bcd8:	2240      	movs	r2, #64	; 0x40
   1bcda:	210c      	movs	r1, #12
   1bcdc:	f00b fae7 	bl	272ae <smp_create_pdu>
	if (!req_buf) {
   1bce0:	b1c0      	cbz	r0, 1bd14 <sc_send_public_key+0x40>
   1bce2:	4606      	mov	r6, r0
   1bce4:	2140      	movs	r1, #64	; 0x40
   1bce6:	3008      	adds	r0, #8
   1bce8:	f00c fb23 	bl	28332 <net_buf_simple_add>
   1bcec:	4605      	mov	r5, r0
	memcpy(req->x, sc_public_key, sizeof(req->x));
   1bcee:	4f0a      	ldr	r7, [pc, #40]	; (1bd18 <sc_send_public_key+0x44>)
   1bcf0:	2220      	movs	r2, #32
   1bcf2:	6839      	ldr	r1, [r7, #0]
   1bcf4:	f008 feba 	bl	24a6c <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   1bcf8:	6839      	ldr	r1, [r7, #0]
   1bcfa:	2220      	movs	r2, #32
   1bcfc:	4411      	add	r1, r2
   1bcfe:	18a8      	adds	r0, r5, r2
   1bd00:	f008 feb4 	bl	24a6c <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   1bd04:	2300      	movs	r3, #0
   1bd06:	461a      	mov	r2, r3
   1bd08:	4631      	mov	r1, r6
   1bd0a:	4620      	mov	r0, r4
   1bd0c:	f00b fafa 	bl	27304 <smp_send>
	return 0;
   1bd10:	2000      	movs	r0, #0
}
   1bd12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1bd14:	2008      	movs	r0, #8
   1bd16:	e7fc      	b.n	1bd12 <sc_send_public_key+0x3e>
   1bd18:	200027f0 	.word	0x200027f0

0001bd1c <bt_smp_accept>:
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   1bd1c:	b510      	push	{r4, lr}
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1bd1e:	2300      	movs	r3, #0
   1bd20:	2b01      	cmp	r3, #1
   1bd22:	dc19      	bgt.n	1bd58 <bt_smp_accept+0x3c>
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   1bd24:	eb03 1283 	add.w	r2, r3, r3, lsl #6
   1bd28:	4c15      	ldr	r4, [pc, #84]	; (1bd80 <bt_smp_accept+0x64>)
   1bd2a:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
   1bd2e:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
   1bd32:	b10a      	cbz	r2, 1bd38 <bt_smp_accept+0x1c>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1bd34:	3301      	adds	r3, #1
   1bd36:	e7f3      	b.n	1bd20 <bt_smp_accept+0x4>
			continue;
		}

		smp->chan.chan.ops = &ops;
   1bd38:	4a11      	ldr	r2, [pc, #68]	; (1bd80 <bt_smp_accept+0x64>)
   1bd3a:	eb03 1083 	add.w	r0, r3, r3, lsl #6
   1bd3e:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
   1bd42:	4c10      	ldr	r4, [pc, #64]	; (1bd84 <bt_smp_accept+0x68>)
   1bd44:	f8c0 40f4 	str.w	r4, [r0, #244]	; 0xf4

		*chan = &smp->chan.chan;
   1bd48:	eb03 1383 	add.w	r3, r3, r3, lsl #6
   1bd4c:	00db      	lsls	r3, r3, #3
   1bd4e:	33f0      	adds	r3, #240	; 0xf0
   1bd50:	4413      	add	r3, r2
   1bd52:	600b      	str	r3, [r1, #0]

		return 0;
   1bd54:	2000      	movs	r0, #0
   1bd56:	e012      	b.n	1bd7e <bt_smp_accept+0x62>
   1bd58:	4b0b      	ldr	r3, [pc, #44]	; (1bd88 <bt_smp_accept+0x6c>)
   1bd5a:	4a0c      	ldr	r2, [pc, #48]	; (1bd8c <bt_smp_accept+0x70>)
   1bd5c:	1a9b      	subs	r3, r3, r2
   1bd5e:	08db      	lsrs	r3, r3, #3
	}

	BT_ERR("No available SMP context for conn %p", conn);
   1bd60:	f04f 0200 	mov.w	r2, #0
   1bd64:	2101      	movs	r1, #1
   1bd66:	f361 0202 	bfi	r2, r1, #0, #3
   1bd6a:	f36f 02c5 	bfc	r2, #3, #3
   1bd6e:	f363 128f 	bfi	r2, r3, #6, #10
   1bd72:	4601      	mov	r1, r0
   1bd74:	4806      	ldr	r0, [pc, #24]	; (1bd90 <bt_smp_accept+0x74>)
   1bd76:	f7f5 f9cb 	bl	11110 <log_1>

	return -ENOMEM;
   1bd7a:	f06f 000b 	mvn.w	r0, #11
}
   1bd7e:	bd10      	pop	{r4, pc}
   1bd80:	20001c18 	.word	0x20001c18
   1bd84:	0002cc90 	.word	0x0002cc90
   1bd88:	00029f44 	.word	0x00029f44
   1bd8c:	00029ecc 	.word	0x00029ecc
   1bd90:	0002c8f0 	.word	0x0002c8f0

0001bd94 <smp_send_pairing_confirm>:
{
   1bd94:	b570      	push	{r4, r5, r6, lr}
   1bd96:	b082      	sub	sp, #8
   1bd98:	4605      	mov	r5, r0
	switch (smp->method) {
   1bd9a:	7a04      	ldrb	r4, [r0, #8]
   1bd9c:	2c02      	cmp	r4, #2
   1bd9e:	d816      	bhi.n	1bdce <smp_send_pairing_confirm+0x3a>
   1bda0:	b263      	sxtb	r3, r4
   1bda2:	2b00      	cmp	r3, #0
   1bda4:	d142      	bne.n	1be2c <smp_send_pairing_confirm+0x98>
   1bda6:	b1ac      	cbz	r4, 1bdd4 <smp_send_pairing_confirm+0x40>
   1bda8:	4b29      	ldr	r3, [pc, #164]	; (1be50 <smp_send_pairing_confirm+0xbc>)
   1bdaa:	4a2a      	ldr	r2, [pc, #168]	; (1be54 <smp_send_pairing_confirm+0xc0>)
   1bdac:	1a9b      	subs	r3, r3, r2
   1bdae:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1bdb0:	f04f 0200 	mov.w	r2, #0
   1bdb4:	2101      	movs	r1, #1
   1bdb6:	f361 0202 	bfi	r2, r1, #0, #3
   1bdba:	f36f 02c5 	bfc	r2, #3, #3
   1bdbe:	f363 128f 	bfi	r2, r3, #6, #10
   1bdc2:	4621      	mov	r1, r4
   1bdc4:	4824      	ldr	r0, [pc, #144]	; (1be58 <smp_send_pairing_confirm+0xc4>)
   1bdc6:	f7f5 f9a3 	bl	11110 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   1bdca:	2008      	movs	r0, #8
   1bdcc:	e02c      	b.n	1be28 <smp_send_pairing_confirm+0x94>
	switch (smp->method) {
   1bdce:	2c03      	cmp	r4, #3
   1bdd0:	d1ea      	bne.n	1bda8 <smp_send_pairing_confirm+0x14>
   1bdd2:	2400      	movs	r4, #0
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1bdd4:	2210      	movs	r2, #16
   1bdd6:	2103      	movs	r1, #3
   1bdd8:	4628      	mov	r0, r5
   1bdda:	f00b fa68 	bl	272ae <smp_create_pdu>
	if (!buf) {
   1bdde:	4606      	mov	r6, r0
   1bde0:	b3a0      	cbz	r0, 1be4c <smp_send_pairing_confirm+0xb8>
   1bde2:	2110      	movs	r1, #16
   1bde4:	3008      	adds	r0, #8
   1bde6:	f00c faa4 	bl	28332 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   1bdea:	9000      	str	r0, [sp, #0]
   1bdec:	4623      	mov	r3, r4
   1bdee:	f105 0227 	add.w	r2, r5, #39	; 0x27
   1bdf2:	f105 0157 	add.w	r1, r5, #87	; 0x57
   1bdf6:	4819      	ldr	r0, [pc, #100]	; (1be5c <smp_send_pairing_confirm+0xc8>)
   1bdf8:	6800      	ldr	r0, [r0, #0]
   1bdfa:	f00b fb75 	bl	274e8 <smp_f4>
   1bdfe:	bb00      	cbnz	r0, 1be42 <smp_send_pairing_confirm+0xae>
	smp_send(smp, buf, NULL, NULL);
   1be00:	2300      	movs	r3, #0
   1be02:	461a      	mov	r2, r3
   1be04:	4631      	mov	r1, r6
   1be06:	4628      	mov	r0, r5
   1be08:	f00b fa7c 	bl	27304 <smp_send>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1be0c:	1d28      	adds	r0, r5, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1be0e:	f3bf 8f5b 	dmb	ish
   1be12:	e850 3f00 	ldrex	r3, [r0]
   1be16:	f023 0301 	bic.w	r3, r3, #1
   1be1a:	e840 3200 	strex	r2, r3, [r0]
   1be1e:	2a00      	cmp	r2, #0
   1be20:	d1f7      	bne.n	1be12 <smp_send_pairing_confirm+0x7e>
   1be22:	f3bf 8f5b 	dmb	ish
	return 0;
   1be26:	2000      	movs	r0, #0
}
   1be28:	b002      	add	sp, #8
   1be2a:	bd70      	pop	{r4, r5, r6, pc}
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1be2c:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   1be30:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   1be34:	40dc      	lsrs	r4, r3
   1be36:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   1be3a:	f064 047f 	orn	r4, r4, #127	; 0x7f
   1be3e:	b2e4      	uxtb	r4, r4
		break;
   1be40:	e7c8      	b.n	1bdd4 <smp_send_pairing_confirm+0x40>
		net_buf_unref(buf);
   1be42:	4630      	mov	r0, r6
   1be44:	f00c fa2b 	bl	2829e <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1be48:	2008      	movs	r0, #8
   1be4a:	e7ed      	b.n	1be28 <smp_send_pairing_confirm+0x94>
		return BT_SMP_ERR_UNSPECIFIED;
   1be4c:	2008      	movs	r0, #8
   1be4e:	e7eb      	b.n	1be28 <smp_send_pairing_confirm+0x94>
   1be50:	00029f44 	.word	0x00029f44
   1be54:	00029ecc 	.word	0x00029ecc
   1be58:	0002c918 	.word	0x0002c918
   1be5c:	200027f0 	.word	0x200027f0

0001be60 <smp_pairing_confirm>:
{
   1be60:	b538      	push	{r3, r4, r5, lr}
   1be62:	4604      	mov	r4, r0
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   1be64:	6889      	ldr	r1, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1be66:	1d05      	adds	r5, r0, #4
   1be68:	f3bf 8f5b 	dmb	ish
   1be6c:	e855 3f00 	ldrex	r3, [r5]
   1be70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   1be74:	e845 3200 	strex	r2, r3, [r5]
   1be78:	2a00      	cmp	r2, #0
   1be7a:	d1f7      	bne.n	1be6c <smp_pairing_confirm+0xc>
   1be7c:	f3bf 8f5b 	dmb	ish
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   1be80:	2210      	movs	r2, #16
   1be82:	f104 0017 	add.w	r0, r4, #23
   1be86:	f008 fdf1 	bl	24a6c <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1be8a:	f3bf 8f5b 	dmb	ish
   1be8e:	6863      	ldr	r3, [r4, #4]
   1be90:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1be94:	f013 0f20 	tst.w	r3, #32
   1be98:	d014      	beq.n	1bec4 <smp_pairing_confirm+0x64>
	switch (smp->method) {
   1be9a:	7a21      	ldrb	r1, [r4, #8]
   1be9c:	2901      	cmp	r1, #1
   1be9e:	d015      	beq.n	1becc <smp_pairing_confirm+0x6c>
   1bea0:	2902      	cmp	r1, #2
   1bea2:	d139      	bne.n	1bf18 <smp_pairing_confirm+0xb8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1bea4:	f3bf 8f5b 	dmb	ish
   1bea8:	e854 3f00 	ldrex	r3, [r4]
   1beac:	f043 0310 	orr.w	r3, r3, #16
   1beb0:	e844 3200 	strex	r2, r3, [r4]
   1beb4:	2a00      	cmp	r2, #0
   1beb6:	d1f7      	bne.n	1bea8 <smp_pairing_confirm+0x48>
   1beb8:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_confirm(smp);
   1bebc:	4620      	mov	r0, r4
   1bebe:	f7ff ff69 	bl	1bd94 <smp_send_pairing_confirm>
}
   1bec2:	bd38      	pop	{r3, r4, r5, pc}
		return legacy_pairing_confirm(smp);
   1bec4:	4620      	mov	r0, r4
   1bec6:	f00b fa75 	bl	273b4 <legacy_pairing_confirm>
   1beca:	e7fa      	b.n	1bec2 <smp_pairing_confirm+0x62>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1becc:	f3bf 8f5b 	dmb	ish
   1bed0:	6863      	ldr	r3, [r4, #4]
   1bed2:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1bed6:	f413 6f80 	tst.w	r3, #1024	; 0x400
   1beda:	d10f      	bne.n	1befc <smp_pairing_confirm+0x9c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1bedc:	f3bf 8f5b 	dmb	ish
   1bee0:	e854 3f00 	ldrex	r3, [r4]
   1bee4:	f043 0310 	orr.w	r3, r3, #16
   1bee8:	e844 3200 	strex	r2, r3, [r4]
   1beec:	2a00      	cmp	r2, #0
   1beee:	d1f7      	bne.n	1bee0 <smp_pairing_confirm+0x80>
   1bef0:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_confirm(smp);
   1bef4:	4620      	mov	r0, r4
   1bef6:	f7ff ff4d 	bl	1bd94 <smp_send_pairing_confirm>
   1befa:	e7e2      	b.n	1bec2 <smp_pairing_confirm+0x62>
   1befc:	f3bf 8f5b 	dmb	ish
   1bf00:	e855 3f00 	ldrex	r3, [r5]
   1bf04:	f043 0301 	orr.w	r3, r3, #1
   1bf08:	e845 3200 	strex	r2, r3, [r5]
   1bf0c:	2a00      	cmp	r2, #0
   1bf0e:	d1f7      	bne.n	1bf00 <smp_pairing_confirm+0xa0>
   1bf10:	f3bf 8f5b 	dmb	ish
			return 0;
   1bf14:	2000      	movs	r0, #0
   1bf16:	e7d4      	b.n	1bec2 <smp_pairing_confirm+0x62>
   1bf18:	4b08      	ldr	r3, [pc, #32]	; (1bf3c <smp_pairing_confirm+0xdc>)
   1bf1a:	4a09      	ldr	r2, [pc, #36]	; (1bf40 <smp_pairing_confirm+0xe0>)
   1bf1c:	1a9b      	subs	r3, r3, r2
   1bf1e:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1bf20:	f04f 0200 	mov.w	r2, #0
   1bf24:	2001      	movs	r0, #1
   1bf26:	f360 0202 	bfi	r2, r0, #0, #3
   1bf2a:	f36f 02c5 	bfc	r2, #3, #3
   1bf2e:	f363 128f 	bfi	r2, r3, #6, #10
   1bf32:	4804      	ldr	r0, [pc, #16]	; (1bf44 <smp_pairing_confirm+0xe4>)
   1bf34:	f7f5 f8ec 	bl	11110 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   1bf38:	2008      	movs	r0, #8
   1bf3a:	e7c2      	b.n	1bec2 <smp_pairing_confirm+0x62>
   1bf3c:	00029f44 	.word	0x00029f44
   1bf40:	00029ecc 	.word	0x00029ecc
   1bf44:	0002c918 	.word	0x0002c918

0001bf48 <sc_smp_check_confirm>:
{
   1bf48:	b510      	push	{r4, lr}
   1bf4a:	b086      	sub	sp, #24
   1bf4c:	4604      	mov	r4, r0
	switch (smp->method) {
   1bf4e:	7a01      	ldrb	r1, [r0, #8]
   1bf50:	2905      	cmp	r1, #5
   1bf52:	d80f      	bhi.n	1bf74 <sc_smp_check_confirm+0x2c>
   1bf54:	e8df f001 	tbb	[pc, r1]
   1bf58:	20030320 	.word	0x20030320
   1bf5c:	470e      	.short	0x470e
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1bf5e:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
   1bf62:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
   1bf66:	40d3      	lsrs	r3, r2
   1bf68:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
   1bf6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1bf70:	b2db      	uxtb	r3, r3
		break;
   1bf72:	e012      	b.n	1bf9a <sc_smp_check_confirm+0x52>
   1bf74:	4b1e      	ldr	r3, [pc, #120]	; (1bff0 <sc_smp_check_confirm+0xa8>)
   1bf76:	4a1f      	ldr	r2, [pc, #124]	; (1bff4 <sc_smp_check_confirm+0xac>)
   1bf78:	1a9b      	subs	r3, r3, r2
   1bf7a:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1bf7c:	f04f 0200 	mov.w	r2, #0
   1bf80:	2001      	movs	r0, #1
   1bf82:	f360 0202 	bfi	r2, r0, #0, #3
   1bf86:	f36f 02c5 	bfc	r2, #3, #3
   1bf8a:	f363 128f 	bfi	r2, r3, #6, #10
   1bf8e:	481a      	ldr	r0, [pc, #104]	; (1bff8 <sc_smp_check_confirm+0xb0>)
   1bf90:	f7f5 f8be 	bl	11110 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   1bf94:	2008      	movs	r0, #8
   1bf96:	e012      	b.n	1bfbe <sc_smp_check_confirm+0x76>
	switch (smp->method) {
   1bf98:	2300      	movs	r3, #0
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1bf9a:	aa02      	add	r2, sp, #8
   1bf9c:	9200      	str	r2, [sp, #0]
   1bf9e:	f104 0237 	add.w	r2, r4, #55	; 0x37
   1bfa2:	4916      	ldr	r1, [pc, #88]	; (1bffc <sc_smp_check_confirm+0xb4>)
   1bfa4:	6809      	ldr	r1, [r1, #0]
   1bfa6:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1bfaa:	f00b fa9d 	bl	274e8 <smp_f4>
   1bfae:	b940      	cbnz	r0, 1bfc2 <sc_smp_check_confirm+0x7a>
	if (memcmp(smp->pcnf, cfm, 16)) {
   1bfb0:	2210      	movs	r2, #16
   1bfb2:	a902      	add	r1, sp, #8
   1bfb4:	f104 0017 	add.w	r0, r4, #23
   1bfb8:	f008 fd41 	bl	24a3e <memcmp>
   1bfbc:	b9a8      	cbnz	r0, 1bfea <sc_smp_check_confirm+0xa2>
}
   1bfbe:	b006      	add	sp, #24
   1bfc0:	bd10      	pop	{r4, pc}
   1bfc2:	4b0b      	ldr	r3, [pc, #44]	; (1bff0 <sc_smp_check_confirm+0xa8>)
   1bfc4:	4a0b      	ldr	r2, [pc, #44]	; (1bff4 <sc_smp_check_confirm+0xac>)
   1bfc6:	1a9b      	subs	r3, r3, r2
   1bfc8:	08db      	lsrs	r3, r3, #3
		BT_ERR("Calculate confirm failed");
   1bfca:	f04f 0100 	mov.w	r1, #0
   1bfce:	2201      	movs	r2, #1
   1bfd0:	f362 0102 	bfi	r1, r2, #0, #3
   1bfd4:	f36f 01c5 	bfc	r1, #3, #3
   1bfd8:	f363 118f 	bfi	r1, r3, #6, #10
   1bfdc:	4808      	ldr	r0, [pc, #32]	; (1c000 <sc_smp_check_confirm+0xb8>)
   1bfde:	f7f5 f94d 	bl	1127c <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
   1bfe2:	2008      	movs	r0, #8
   1bfe4:	e7eb      	b.n	1bfbe <sc_smp_check_confirm+0x76>
	switch (smp->method) {
   1bfe6:	2000      	movs	r0, #0
   1bfe8:	e7e9      	b.n	1bfbe <sc_smp_check_confirm+0x76>
		return BT_SMP_ERR_CONFIRM_FAILED;
   1bfea:	2004      	movs	r0, #4
   1bfec:	e7e7      	b.n	1bfbe <sc_smp_check_confirm+0x76>
   1bfee:	bf00      	nop
   1bff0:	00029f44 	.word	0x00029f44
   1bff4:	00029ecc 	.word	0x00029ecc
   1bff8:	0002c918 	.word	0x0002c918
   1bffc:	200027f0 	.word	0x200027f0
   1c000:	0002c934 	.word	0x0002c934

0001c004 <smp_f5>:
{
   1c004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c008:	b09b      	sub	sp, #108	; 0x6c
   1c00a:	4604      	mov	r4, r0
   1c00c:	460f      	mov	r7, r1
   1c00e:	4616      	mov	r6, r2
   1c010:	461d      	mov	r5, r3
   1c012:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
   1c016:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
	uint8_t m[53] = { 0x00, /* counter */
   1c01a:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
   1c01e:	f8df e124 	ldr.w	lr, [pc, #292]	; 1c144 <smp_f5+0x140>
   1c022:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1c026:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1c02a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1c02e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1c032:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1c036:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1c03a:	e89e 0003 	ldmia.w	lr, {r0, r1}
   1c03e:	f84c 0b04 	str.w	r0, [ip], #4
   1c042:	f88c 1000 	strb.w	r1, [ip]
	psrc += length - 1;
   1c046:	f104 001f 	add.w	r0, r4, #31
	uint8_t *pdst = (uint8_t *)dst;
   1c04a:	466b      	mov	r3, sp
	for (; length > 0; length--) {
   1c04c:	2220      	movs	r2, #32
   1c04e:	b12a      	cbz	r2, 1c05c <smp_f5+0x58>
		*pdst++ = *psrc--;
   1c050:	f810 1901 	ldrb.w	r1, [r0], #-1
   1c054:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
   1c058:	3a01      	subs	r2, #1
   1c05a:	e7f8      	b.n	1c04e <smp_f5+0x4a>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   1c05c:	ab08      	add	r3, sp, #32
   1c05e:	2220      	movs	r2, #32
   1c060:	4669      	mov	r1, sp
   1c062:	4837      	ldr	r0, [pc, #220]	; (1c140 <smp_f5+0x13c>)
   1c064:	f00b fa1e 	bl	274a4 <bt_smp_aes_cmac>
	if (err) {
   1c068:	4684      	mov	ip, r0
   1c06a:	2800      	cmp	r0, #0
   1c06c:	d164      	bne.n	1c138 <smp_f5+0x134>
	psrc += length - 1;
   1c06e:	370f      	adds	r7, #15
	uint8_t *pdst = (uint8_t *)dst;
   1c070:	f10d 0335 	add.w	r3, sp, #53	; 0x35
	for (; length > 0; length--) {
   1c074:	2210      	movs	r2, #16
   1c076:	e004      	b.n	1c082 <smp_f5+0x7e>
		*pdst++ = *psrc--;
   1c078:	f817 1901 	ldrb.w	r1, [r7], #-1
   1c07c:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
   1c080:	3a01      	subs	r2, #1
   1c082:	2a00      	cmp	r2, #0
   1c084:	d1f8      	bne.n	1c078 <smp_f5+0x74>
	psrc += length - 1;
   1c086:	360f      	adds	r6, #15
	uint8_t *pdst = (uint8_t *)dst;
   1c088:	f10d 0345 	add.w	r3, sp, #69	; 0x45
	for (; length > 0; length--) {
   1c08c:	2210      	movs	r2, #16
   1c08e:	b12a      	cbz	r2, 1c09c <smp_f5+0x98>
		*pdst++ = *psrc--;
   1c090:	f816 1901 	ldrb.w	r1, [r6], #-1
   1c094:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
   1c098:	3a01      	subs	r2, #1
   1c09a:	e7f8      	b.n	1c08e <smp_f5+0x8a>
	m[37] = a1->type;
   1c09c:	f815 3b06 	ldrb.w	r3, [r5], #6
   1c0a0:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	uint8_t *pdst = (uint8_t *)dst;
   1c0a4:	f10d 0356 	add.w	r3, sp, #86	; 0x56
	for (; length > 0; length--) {
   1c0a8:	2206      	movs	r2, #6
   1c0aa:	b12a      	cbz	r2, 1c0b8 <smp_f5+0xb4>
		*pdst++ = *psrc--;
   1c0ac:	f815 1901 	ldrb.w	r1, [r5], #-1
   1c0b0:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
   1c0b4:	3a01      	subs	r2, #1
   1c0b6:	e7f8      	b.n	1c0aa <smp_f5+0xa6>
	m[44] = a2->type;
   1c0b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c0ba:	f813 2b06 	ldrb.w	r2, [r3], #6
   1c0be:	f88d 205c 	strb.w	r2, [sp, #92]	; 0x5c
	uint8_t *pdst = (uint8_t *)dst;
   1c0c2:	f10d 025d 	add.w	r2, sp, #93	; 0x5d
	for (; length > 0; length--) {
   1c0c6:	2406      	movs	r4, #6
   1c0c8:	e004      	b.n	1c0d4 <smp_f5+0xd0>
		*pdst++ = *psrc--;
   1c0ca:	f813 1901 	ldrb.w	r1, [r3], #-1
   1c0ce:	f802 1b01 	strb.w	r1, [r2], #1
	for (; length > 0; length--) {
   1c0d2:	3c01      	subs	r4, #1
   1c0d4:	2c00      	cmp	r4, #0
   1c0d6:	d1f8      	bne.n	1c0ca <smp_f5+0xc6>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   1c0d8:	4643      	mov	r3, r8
   1c0da:	2235      	movs	r2, #53	; 0x35
   1c0dc:	a90c      	add	r1, sp, #48	; 0x30
   1c0de:	a808      	add	r0, sp, #32
   1c0e0:	f00b f9e0 	bl	274a4 <bt_smp_aes_cmac>
	if (err) {
   1c0e4:	4684      	mov	ip, r0
   1c0e6:	bb38      	cbnz	r0, 1c138 <smp_f5+0x134>
	for (i = 0; i < (length/2); i++) {
   1c0e8:	4623      	mov	r3, r4
   1c0ea:	e00a      	b.n	1c102 <smp_f5+0xfe>
		uint8_t tmp = ((uint8_t *)buf)[i];
   1c0ec:	f818 1003 	ldrb.w	r1, [r8, r3]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1c0f0:	f1c3 020f 	rsb	r2, r3, #15
   1c0f4:	f818 0002 	ldrb.w	r0, [r8, r2]
   1c0f8:	f808 0003 	strb.w	r0, [r8, r3]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1c0fc:	f808 1002 	strb.w	r1, [r8, r2]
	for (i = 0; i < (length/2); i++) {
   1c100:	3301      	adds	r3, #1
   1c102:	2b07      	cmp	r3, #7
   1c104:	d9f2      	bls.n	1c0ec <smp_f5+0xe8>
	m[0] = 0x01;
   1c106:	2301      	movs	r3, #1
   1c108:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   1c10c:	464b      	mov	r3, r9
   1c10e:	2235      	movs	r2, #53	; 0x35
   1c110:	a90c      	add	r1, sp, #48	; 0x30
   1c112:	a808      	add	r0, sp, #32
   1c114:	f00b f9c6 	bl	274a4 <bt_smp_aes_cmac>
	if (err) {
   1c118:	4684      	mov	ip, r0
   1c11a:	b968      	cbnz	r0, 1c138 <smp_f5+0x134>
   1c11c:	2c07      	cmp	r4, #7
   1c11e:	d80b      	bhi.n	1c138 <smp_f5+0x134>
		uint8_t tmp = ((uint8_t *)buf)[i];
   1c120:	f819 2004 	ldrb.w	r2, [r9, r4]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1c124:	f1c4 030f 	rsb	r3, r4, #15
   1c128:	f819 1003 	ldrb.w	r1, [r9, r3]
   1c12c:	f809 1004 	strb.w	r1, [r9, r4]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1c130:	f809 2003 	strb.w	r2, [r9, r3]
	for (i = 0; i < (length/2); i++) {
   1c134:	3401      	adds	r4, #1
   1c136:	e7f1      	b.n	1c11c <smp_f5+0x118>
}
   1c138:	4660      	mov	r0, ip
   1c13a:	b01b      	add	sp, #108	; 0x6c
   1c13c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1c140:	0002ccb0 	.word	0x0002ccb0
   1c144:	0002a0f0 	.word	0x0002a0f0

0001c148 <compute_and_check_and_send_slave_dhcheck>:
{
   1c148:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c14a:	b091      	sub	sp, #68	; 0x44
   1c14c:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
   1c14e:	2210      	movs	r2, #16
   1c150:	2100      	movs	r1, #0
   1c152:	eb0d 0002 	add.w	r0, sp, r2
   1c156:	f008 fcad 	bl	24ab4 <memset>
	switch (smp->method) {
   1c15a:	7a21      	ldrb	r1, [r4, #8]
   1c15c:	2905      	cmp	r1, #5
   1c15e:	d873      	bhi.n	1c248 <compute_and_check_and_send_slave_dhcheck+0x100>
   1c160:	e8df f001 	tbb	[pc, r1]
   1c164:	09030309 	.word	0x09030309
   1c168:	6872      	.short	0x6872
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1c16a:	2204      	movs	r2, #4
   1c16c:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
   1c170:	a804      	add	r0, sp, #16
   1c172:	f008 fc7b 	bl	24a6c <memcpy>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   1c176:	f104 0637 	add.w	r6, r4, #55	; 0x37
   1c17a:	f104 0727 	add.w	r7, r4, #39	; 0x27
		   &smp->chan.chan.conn->le.init_addr,
   1c17e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   1c182:	f103 0296 	add.w	r2, r3, #150	; 0x96
   1c186:	f104 05c7 	add.w	r5, r4, #199	; 0xc7
		   smp->tk)) {
   1c18a:	f104 0147 	add.w	r1, r4, #71	; 0x47
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   1c18e:	9102      	str	r1, [sp, #8]
   1c190:	9501      	str	r5, [sp, #4]
   1c192:	9200      	str	r2, [sp, #0]
   1c194:	338f      	adds	r3, #143	; 0x8f
   1c196:	463a      	mov	r2, r7
   1c198:	4631      	mov	r1, r6
   1c19a:	f104 0097 	add.w	r0, r4, #151	; 0x97
   1c19e:	f7ff ff31 	bl	1c004 <smp_f5>
   1c1a2:	2800      	cmp	r0, #0
   1c1a4:	d162      	bne.n	1c26c <compute_and_check_and_send_slave_dhcheck+0x124>
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1c1a6:	f104 0211 	add.w	r2, r4, #17
		   &smp->chan.chan.conn->le.resp_addr,
   1c1aa:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   1c1ae:	f103 0196 	add.w	r1, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr, e)) {
   1c1b2:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1c1b4:	a808      	add	r0, sp, #32
   1c1b6:	9003      	str	r0, [sp, #12]
   1c1b8:	9302      	str	r3, [sp, #8]
   1c1ba:	9101      	str	r1, [sp, #4]
   1c1bc:	9200      	str	r2, [sp, #0]
   1c1be:	ab04      	add	r3, sp, #16
   1c1c0:	4632      	mov	r2, r6
   1c1c2:	4639      	mov	r1, r7
   1c1c4:	4628      	mov	r0, r5
   1c1c6:	f00b f9c6 	bl	27556 <smp_f6>
   1c1ca:	2800      	cmp	r0, #0
   1c1cc:	d160      	bne.n	1c290 <compute_and_check_and_send_slave_dhcheck+0x148>
	if (smp->method == LE_SC_OOB) {
   1c1ce:	7a23      	ldrb	r3, [r4, #8]
   1c1d0:	2b05      	cmp	r3, #5
   1c1d2:	d06f      	beq.n	1c2b4 <compute_and_check_and_send_slave_dhcheck+0x16c>
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1c1d4:	f104 020a 	add.w	r2, r4, #10
		   &smp->chan.chan.conn->le.init_addr,
   1c1d8:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   1c1dc:	f103 018f 	add.w	r1, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr, re)) {
   1c1e0:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1c1e2:	a80c      	add	r0, sp, #48	; 0x30
   1c1e4:	9003      	str	r0, [sp, #12]
   1c1e6:	9302      	str	r3, [sp, #8]
   1c1e8:	9101      	str	r1, [sp, #4]
   1c1ea:	9200      	str	r2, [sp, #0]
   1c1ec:	ab04      	add	r3, sp, #16
   1c1ee:	463a      	mov	r2, r7
   1c1f0:	4631      	mov	r1, r6
   1c1f2:	4628      	mov	r0, r5
   1c1f4:	f00b f9af 	bl	27556 <smp_f6>
   1c1f8:	2800      	cmp	r0, #0
   1c1fa:	d16b      	bne.n	1c2d4 <compute_and_check_and_send_slave_dhcheck+0x18c>
	if (memcmp(smp->e, re, 16)) {
   1c1fc:	2210      	movs	r2, #16
   1c1fe:	a90c      	add	r1, sp, #48	; 0x30
   1c200:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   1c204:	f008 fc1b 	bl	24a3e <memcmp>
   1c208:	2800      	cmp	r0, #0
   1c20a:	d175      	bne.n	1c2f8 <compute_and_check_and_send_slave_dhcheck+0x1b0>
	err = sc_smp_send_dhkey_check(smp, e);
   1c20c:	a908      	add	r1, sp, #32
   1c20e:	4620      	mov	r0, r4
   1c210:	f00b f8f7 	bl	27402 <sc_smp_send_dhkey_check>
	if (err) {
   1c214:	b960      	cbnz	r0, 1c230 <compute_and_check_and_send_slave_dhcheck+0xe8>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1c216:	3404      	adds	r4, #4
   1c218:	f3bf 8f5b 	dmb	ish
   1c21c:	e854 3f00 	ldrex	r3, [r4]
   1c220:	f043 0302 	orr.w	r3, r3, #2
   1c224:	e844 3200 	strex	r2, r3, [r4]
   1c228:	2a00      	cmp	r2, #0
   1c22a:	d1f7      	bne.n	1c21c <compute_and_check_and_send_slave_dhcheck+0xd4>
   1c22c:	f3bf 8f5b 	dmb	ish
}
   1c230:	b011      	add	sp, #68	; 0x44
   1c232:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (smp->oobd_remote) {
   1c234:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   1c238:	2900      	cmp	r1, #0
   1c23a:	d09c      	beq.n	1c176 <compute_and_check_and_send_slave_dhcheck+0x2e>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1c23c:	2210      	movs	r2, #16
   1c23e:	eb0d 0002 	add.w	r0, sp, r2
   1c242:	f008 fc13 	bl	24a6c <memcpy>
   1c246:	e796      	b.n	1c176 <compute_and_check_and_send_slave_dhcheck+0x2e>
   1c248:	4b2c      	ldr	r3, [pc, #176]	; (1c2fc <compute_and_check_and_send_slave_dhcheck+0x1b4>)
   1c24a:	4a2d      	ldr	r2, [pc, #180]	; (1c300 <compute_and_check_and_send_slave_dhcheck+0x1b8>)
   1c24c:	1a9b      	subs	r3, r3, r2
   1c24e:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1c250:	f04f 0200 	mov.w	r2, #0
   1c254:	2001      	movs	r0, #1
   1c256:	f360 0202 	bfi	r2, r0, #0, #3
   1c25a:	f36f 02c5 	bfc	r2, #3, #3
   1c25e:	f363 128f 	bfi	r2, r3, #6, #10
   1c262:	4828      	ldr	r0, [pc, #160]	; (1c304 <compute_and_check_and_send_slave_dhcheck+0x1bc>)
   1c264:	f7f4 ff54 	bl	11110 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   1c268:	2008      	movs	r0, #8
   1c26a:	e7e1      	b.n	1c230 <compute_and_check_and_send_slave_dhcheck+0xe8>
   1c26c:	4b23      	ldr	r3, [pc, #140]	; (1c2fc <compute_and_check_and_send_slave_dhcheck+0x1b4>)
   1c26e:	4a24      	ldr	r2, [pc, #144]	; (1c300 <compute_and_check_and_send_slave_dhcheck+0x1b8>)
   1c270:	1a9b      	subs	r3, r3, r2
   1c272:	08db      	lsrs	r3, r3, #3
		BT_ERR("Calculate LTK failed");
   1c274:	f04f 0100 	mov.w	r1, #0
   1c278:	2201      	movs	r2, #1
   1c27a:	f362 0102 	bfi	r1, r2, #0, #3
   1c27e:	f36f 01c5 	bfc	r1, #3, #3
   1c282:	f363 118f 	bfi	r1, r3, #6, #10
   1c286:	4820      	ldr	r0, [pc, #128]	; (1c308 <compute_and_check_and_send_slave_dhcheck+0x1c0>)
   1c288:	f7f4 fff8 	bl	1127c <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
   1c28c:	2008      	movs	r0, #8
   1c28e:	e7cf      	b.n	1c230 <compute_and_check_and_send_slave_dhcheck+0xe8>
   1c290:	4b1a      	ldr	r3, [pc, #104]	; (1c2fc <compute_and_check_and_send_slave_dhcheck+0x1b4>)
   1c292:	4a1b      	ldr	r2, [pc, #108]	; (1c300 <compute_and_check_and_send_slave_dhcheck+0x1b8>)
   1c294:	1a9b      	subs	r3, r3, r2
   1c296:	08db      	lsrs	r3, r3, #3
		BT_ERR("Calculate local DHKey check failed");
   1c298:	f04f 0100 	mov.w	r1, #0
   1c29c:	2201      	movs	r2, #1
   1c29e:	f362 0102 	bfi	r1, r2, #0, #3
   1c2a2:	f36f 01c5 	bfc	r1, #3, #3
   1c2a6:	f363 118f 	bfi	r1, r3, #6, #10
   1c2aa:	4818      	ldr	r0, [pc, #96]	; (1c30c <compute_and_check_and_send_slave_dhcheck+0x1c4>)
   1c2ac:	f7f4 ffe6 	bl	1127c <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
   1c2b0:	2008      	movs	r0, #8
   1c2b2:	e7bd      	b.n	1c230 <compute_and_check_and_send_slave_dhcheck+0xe8>
		if (smp->oobd_local) {
   1c2b4:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
   1c2b8:	b129      	cbz	r1, 1c2c6 <compute_and_check_and_send_slave_dhcheck+0x17e>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1c2ba:	2210      	movs	r2, #16
   1c2bc:	eb0d 0002 	add.w	r0, sp, r2
   1c2c0:	f008 fbd4 	bl	24a6c <memcpy>
   1c2c4:	e786      	b.n	1c1d4 <compute_and_check_and_send_slave_dhcheck+0x8c>
			memset(r, 0, sizeof(r));
   1c2c6:	2210      	movs	r2, #16
   1c2c8:	2100      	movs	r1, #0
   1c2ca:	eb0d 0002 	add.w	r0, sp, r2
   1c2ce:	f008 fbf1 	bl	24ab4 <memset>
   1c2d2:	e77f      	b.n	1c1d4 <compute_and_check_and_send_slave_dhcheck+0x8c>
   1c2d4:	4b09      	ldr	r3, [pc, #36]	; (1c2fc <compute_and_check_and_send_slave_dhcheck+0x1b4>)
   1c2d6:	4a0a      	ldr	r2, [pc, #40]	; (1c300 <compute_and_check_and_send_slave_dhcheck+0x1b8>)
   1c2d8:	1a9b      	subs	r3, r3, r2
   1c2da:	08db      	lsrs	r3, r3, #3
		BT_ERR("Calculate remote DHKey check failed");
   1c2dc:	f04f 0100 	mov.w	r1, #0
   1c2e0:	2201      	movs	r2, #1
   1c2e2:	f362 0102 	bfi	r1, r2, #0, #3
   1c2e6:	f36f 01c5 	bfc	r1, #3, #3
   1c2ea:	f363 118f 	bfi	r1, r3, #6, #10
   1c2ee:	4808      	ldr	r0, [pc, #32]	; (1c310 <compute_and_check_and_send_slave_dhcheck+0x1c8>)
   1c2f0:	f7f4 ffc4 	bl	1127c <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
   1c2f4:	2008      	movs	r0, #8
   1c2f6:	e79b      	b.n	1c230 <compute_and_check_and_send_slave_dhcheck+0xe8>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1c2f8:	200b      	movs	r0, #11
   1c2fa:	e799      	b.n	1c230 <compute_and_check_and_send_slave_dhcheck+0xe8>
   1c2fc:	00029f44 	.word	0x00029f44
   1c300:	00029ecc 	.word	0x00029ecc
   1c304:	0002c918 	.word	0x0002c918
   1c308:	0002c950 	.word	0x0002c950
   1c30c:	0002c968 	.word	0x0002c968
   1c310:	0002c98c 	.word	0x0002c98c

0001c314 <smp_g2>:
{
   1c314:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c316:	b099      	sub	sp, #100	; 0x64
   1c318:	9c1e      	ldr	r4, [sp, #120]	; 0x78
	psrc += length - 1;
   1c31a:	301f      	adds	r0, #31
	uint8_t *pdst = (uint8_t *)dst;
   1c31c:	ad04      	add	r5, sp, #16
	for (; length > 0; length--) {
   1c31e:	2620      	movs	r6, #32
   1c320:	b12e      	cbz	r6, 1c32e <smp_g2+0x1a>
		*pdst++ = *psrc--;
   1c322:	f810 7901 	ldrb.w	r7, [r0], #-1
   1c326:	f805 7b01 	strb.w	r7, [r5], #1
	for (; length > 0; length--) {
   1c32a:	3e01      	subs	r6, #1
   1c32c:	e7f8      	b.n	1c320 <smp_g2+0xc>
	psrc += length - 1;
   1c32e:	311f      	adds	r1, #31
	uint8_t *pdst = (uint8_t *)dst;
   1c330:	a80c      	add	r0, sp, #48	; 0x30
	for (; length > 0; length--) {
   1c332:	2520      	movs	r5, #32
   1c334:	b12d      	cbz	r5, 1c342 <smp_g2+0x2e>
		*pdst++ = *psrc--;
   1c336:	f811 6901 	ldrb.w	r6, [r1], #-1
   1c33a:	f800 6b01 	strb.w	r6, [r0], #1
	for (; length > 0; length--) {
   1c33e:	3d01      	subs	r5, #1
   1c340:	e7f8      	b.n	1c334 <smp_g2+0x20>
	psrc += length - 1;
   1c342:	330f      	adds	r3, #15
	uint8_t *pdst = (uint8_t *)dst;
   1c344:	a914      	add	r1, sp, #80	; 0x50
	for (; length > 0; length--) {
   1c346:	2010      	movs	r0, #16
   1c348:	b128      	cbz	r0, 1c356 <smp_g2+0x42>
		*pdst++ = *psrc--;
   1c34a:	f813 5901 	ldrb.w	r5, [r3], #-1
   1c34e:	f801 5b01 	strb.w	r5, [r1], #1
	for (; length > 0; length--) {
   1c352:	3801      	subs	r0, #1
   1c354:	e7f8      	b.n	1c348 <smp_g2+0x34>
	psrc += length - 1;
   1c356:	320f      	adds	r2, #15
	uint8_t *pdst = (uint8_t *)dst;
   1c358:	466b      	mov	r3, sp
	for (; length > 0; length--) {
   1c35a:	2110      	movs	r1, #16
   1c35c:	e004      	b.n	1c368 <smp_g2+0x54>
		*pdst++ = *psrc--;
   1c35e:	f812 0901 	ldrb.w	r0, [r2], #-1
   1c362:	f803 0b01 	strb.w	r0, [r3], #1
	for (; length > 0; length--) {
   1c366:	3901      	subs	r1, #1
   1c368:	2900      	cmp	r1, #0
   1c36a:	d1f8      	bne.n	1c35e <smp_g2+0x4a>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   1c36c:	466b      	mov	r3, sp
   1c36e:	2250      	movs	r2, #80	; 0x50
   1c370:	a904      	add	r1, sp, #16
   1c372:	4668      	mov	r0, sp
   1c374:	f00b f896 	bl	274a4 <bt_smp_aes_cmac>
	if (err) {
   1c378:	4605      	mov	r5, r0
   1c37a:	b110      	cbz	r0, 1c382 <smp_g2+0x6e>
}
   1c37c:	4628      	mov	r0, r5
   1c37e:	b019      	add	sp, #100	; 0x64
   1c380:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(passkey, xs + 12, 4);
   1c382:	2204      	movs	r2, #4
   1c384:	a903      	add	r1, sp, #12
   1c386:	4620      	mov	r0, r4
   1c388:	f008 fb70 	bl	24a6c <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1c38c:	6822      	ldr	r2, [r4, #0]
   1c38e:	0a13      	lsrs	r3, r2, #8
   1c390:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   1c394:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1c398:	0211      	lsls	r1, r2, #8
   1c39a:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   1c39e:	430b      	orrs	r3, r1
   1c3a0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1c3a4:	4a04      	ldr	r2, [pc, #16]	; (1c3b8 <smp_g2+0xa4>)
   1c3a6:	fba2 1203 	umull	r1, r2, r2, r3
   1c3aa:	0c92      	lsrs	r2, r2, #18
   1c3ac:	4903      	ldr	r1, [pc, #12]	; (1c3bc <smp_g2+0xa8>)
   1c3ae:	fb01 3212 	mls	r2, r1, r2, r3
   1c3b2:	6022      	str	r2, [r4, #0]
	return 0;
   1c3b4:	e7e2      	b.n	1c37c <smp_g2+0x68>
   1c3b6:	bf00      	nop
   1c3b8:	431bde83 	.word	0x431bde83
   1c3bc:	000f4240 	.word	0x000f4240

0001c3c0 <display_passkey>:
{
   1c3c0:	b510      	push	{r4, lr}
   1c3c2:	4604      	mov	r4, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1c3c4:	2104      	movs	r1, #4
   1c3c6:	30d8      	adds	r0, #216	; 0xd8
   1c3c8:	f002 fa9c 	bl	1e904 <bt_rand>
   1c3cc:	bb48      	cbnz	r0, 1c422 <display_passkey+0x62>
		smp->passkey %= 1000000;
   1c3ce:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
   1c3d2:	4b15      	ldr	r3, [pc, #84]	; (1c428 <display_passkey+0x68>)
   1c3d4:	fba3 1302 	umull	r1, r3, r3, r2
   1c3d8:	0c9b      	lsrs	r3, r3, #18
   1c3da:	4914      	ldr	r1, [pc, #80]	; (1c42c <display_passkey+0x6c>)
   1c3dc:	fb01 2313 	mls	r3, r1, r3, r2
   1c3e0:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	smp->passkey_round = 0U;
   1c3e4:	2300      	movs	r3, #0
   1c3e6:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
	if (bt_auth && bt_auth->passkey_display) {
   1c3ea:	4b11      	ldr	r3, [pc, #68]	; (1c430 <display_passkey+0x70>)
   1c3ec:	681b      	ldr	r3, [r3, #0]
   1c3ee:	b1b3      	cbz	r3, 1c41e <display_passkey+0x5e>
   1c3f0:	681b      	ldr	r3, [r3, #0]
   1c3f2:	b1a3      	cbz	r3, 1c41e <display_passkey+0x5e>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1c3f4:	1d23      	adds	r3, r4, #4
   1c3f6:	f3bf 8f5b 	dmb	ish
   1c3fa:	e853 2f00 	ldrex	r2, [r3]
   1c3fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   1c402:	e843 2100 	strex	r1, r2, [r3]
   1c406:	2900      	cmp	r1, #0
   1c408:	d1f7      	bne.n	1c3fa <display_passkey+0x3a>
   1c40a:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
   1c40e:	4b08      	ldr	r3, [pc, #32]	; (1c430 <display_passkey+0x70>)
   1c410:	681b      	ldr	r3, [r3, #0]
   1c412:	681b      	ldr	r3, [r3, #0]
   1c414:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   1c418:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1c41c:	4798      	blx	r3
	return 0;
   1c41e:	2000      	movs	r0, #0
}
   1c420:	bd10      	pop	{r4, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   1c422:	2008      	movs	r0, #8
   1c424:	e7fc      	b.n	1c420 <display_passkey+0x60>
   1c426:	bf00      	nop
   1c428:	431bde83 	.word	0x431bde83
   1c42c:	000f4240 	.word	0x000f4240
   1c430:	20002710 	.word	0x20002710

0001c434 <smp_pairing_random>:
{
   1c434:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c436:	b085      	sub	sp, #20
   1c438:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1c43a:	f100 0537 	add.w	r5, r0, #55	; 0x37
   1c43e:	2210      	movs	r2, #16
   1c440:	6889      	ldr	r1, [r1, #8]
   1c442:	4628      	mov	r0, r5
   1c444:	f008 fb12 	bl	24a6c <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c448:	f3bf 8f5b 	dmb	ish
   1c44c:	6863      	ldr	r3, [r4, #4]
   1c44e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1c452:	f013 0f20 	tst.w	r3, #32
   1c456:	d009      	beq.n	1c46c <smp_pairing_random+0x38>
   1c458:	1d26      	adds	r6, r4, #4
	switch (smp->method) {
   1c45a:	7a21      	ldrb	r1, [r4, #8]
   1c45c:	2905      	cmp	r1, #5
   1c45e:	f200 80bc 	bhi.w	1c5da <smp_pairing_random+0x1a6>
   1c462:	e8df f001 	tbb	[pc, r1]
   1c466:	4829      	.short	0x4829
   1c468:	8bba0848 	.word	0x8bba0848
		return legacy_pairing_random(smp);
   1c46c:	4620      	mov	r0, r4
   1c46e:	f7ff fbd3 	bl	1bc18 <legacy_pairing_random>
   1c472:	4605      	mov	r5, r0
   1c474:	e03c      	b.n	1c4f0 <smp_pairing_random+0xbc>
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   1c476:	ab03      	add	r3, sp, #12
   1c478:	9300      	str	r3, [sp, #0]
   1c47a:	f104 0327 	add.w	r3, r4, #39	; 0x27
   1c47e:	462a      	mov	r2, r5
   1c480:	4963      	ldr	r1, [pc, #396]	; (1c610 <smp_pairing_random+0x1dc>)
   1c482:	6809      	ldr	r1, [r1, #0]
   1c484:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1c488:	f7ff ff44 	bl	1c314 <smp_g2>
   1c48c:	2800      	cmp	r0, #0
   1c48e:	f040 80b6 	bne.w	1c5fe <smp_pairing_random+0x1ca>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c492:	f3bf 8f5b 	dmb	ish
   1c496:	e856 3f00 	ldrex	r3, [r6]
   1c49a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1c49e:	e846 3200 	strex	r2, r3, [r6]
   1c4a2:	2a00      	cmp	r2, #0
   1c4a4:	d1f7      	bne.n	1c496 <smp_pairing_random+0x62>
   1c4a6:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   1c4aa:	4b5a      	ldr	r3, [pc, #360]	; (1c614 <smp_pairing_random+0x1e0>)
   1c4ac:	681b      	ldr	r3, [r3, #0]
   1c4ae:	689b      	ldr	r3, [r3, #8]
   1c4b0:	9903      	ldr	r1, [sp, #12]
   1c4b2:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1c4b6:	4798      	blx	r3
   1c4b8:	f3bf 8f5b 	dmb	ish
   1c4bc:	e854 3f00 	ldrex	r3, [r4]
   1c4c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1c4c4:	e844 3200 	strex	r2, r3, [r4]
   1c4c8:	2a00      	cmp	r2, #0
   1c4ca:	d1f7      	bne.n	1c4bc <smp_pairing_random+0x88>
   1c4cc:	f3bf 8f5b 	dmb	ish
   1c4d0:	f3bf 8f5b 	dmb	ish
   1c4d4:	e856 3f00 	ldrex	r3, [r6]
   1c4d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1c4dc:	e846 3200 	strex	r2, r3, [r6]
   1c4e0:	2a00      	cmp	r2, #0
   1c4e2:	d1f7      	bne.n	1c4d4 <smp_pairing_random+0xa0>
   1c4e4:	f3bf 8f5b 	dmb	ish
	return smp_send_pairing_random(smp);
   1c4e8:	4620      	mov	r0, r4
   1c4ea:	f00a ffa5 	bl	27438 <smp_send_pairing_random>
   1c4ee:	4605      	mov	r5, r0
}
   1c4f0:	4628      	mov	r0, r5
   1c4f2:	b005      	add	sp, #20
   1c4f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = sc_smp_check_confirm(smp);
   1c4f6:	4620      	mov	r0, r4
   1c4f8:	f7ff fd26 	bl	1bf48 <sc_smp_check_confirm>
		if (err) {
   1c4fc:	4605      	mov	r5, r0
   1c4fe:	2800      	cmp	r0, #0
   1c500:	d1f6      	bne.n	1c4f0 <smp_pairing_random+0xbc>
		atomic_set_bit(smp->allowed_cmds,
   1c502:	4627      	mov	r7, r4
   1c504:	f3bf 8f5b 	dmb	ish
   1c508:	e854 3f00 	ldrex	r3, [r4]
   1c50c:	f043 0308 	orr.w	r3, r3, #8
   1c510:	e844 3200 	strex	r2, r3, [r4]
   1c514:	2a00      	cmp	r2, #0
   1c516:	d1f7      	bne.n	1c508 <smp_pairing_random+0xd4>
   1c518:	f3bf 8f5b 	dmb	ish
		err = smp_send_pairing_random(smp);
   1c51c:	4620      	mov	r0, r4
   1c51e:	f00a ff8b 	bl	27438 <smp_send_pairing_random>
		if (err) {
   1c522:	4605      	mov	r5, r0
   1c524:	2800      	cmp	r0, #0
   1c526:	d1e3      	bne.n	1c4f0 <smp_pairing_random+0xbc>
		smp->passkey_round++;
   1c528:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1c52c:	3301      	adds	r3, #1
   1c52e:	b2db      	uxtb	r3, r3
   1c530:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   1c534:	2b14      	cmp	r3, #20
   1c536:	d008      	beq.n	1c54a <smp_pairing_random+0x116>
		if (bt_rand(smp->prnd, 16)) {
   1c538:	2110      	movs	r1, #16
   1c53a:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1c53e:	f002 f9e1 	bl	1e904 <bt_rand>
   1c542:	2800      	cmp	r0, #0
   1c544:	d0d4      	beq.n	1c4f0 <smp_pairing_random+0xbc>
			return BT_SMP_ERR_UNSPECIFIED;
   1c546:	2508      	movs	r5, #8
   1c548:	e7d2      	b.n	1c4f0 <smp_pairing_random+0xbc>
   1c54a:	f3bf 8f5b 	dmb	ish
   1c54e:	e857 3f00 	ldrex	r3, [r7]
   1c552:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1c556:	e847 3200 	strex	r2, r3, [r7]
   1c55a:	2a00      	cmp	r2, #0
   1c55c:	d1f7      	bne.n	1c54e <smp_pairing_random+0x11a>
   1c55e:	f3bf 8f5b 	dmb	ish
   1c562:	f3bf 8f5b 	dmb	ish
   1c566:	e856 3f00 	ldrex	r3, [r6]
   1c56a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1c56e:	e846 3200 	strex	r2, r3, [r6]
   1c572:	2a00      	cmp	r2, #0
   1c574:	d1f7      	bne.n	1c566 <smp_pairing_random+0x132>
   1c576:	f3bf 8f5b 	dmb	ish
			return 0;
   1c57a:	e7b9      	b.n	1c4f0 <smp_pairing_random+0xbc>
		if (bt_rand(smp->prnd, 16)) {
   1c57c:	2110      	movs	r1, #16
   1c57e:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1c582:	f002 f9bf 	bl	1e904 <bt_rand>
   1c586:	2800      	cmp	r0, #0
   1c588:	d13b      	bne.n	1c602 <smp_pairing_random+0x1ce>
		if (bt_auth && bt_auth->oob_data_request) {
   1c58a:	4b22      	ldr	r3, [pc, #136]	; (1c614 <smp_pairing_random+0x1e0>)
   1c58c:	681b      	ldr	r3, [r3, #0]
   1c58e:	2b00      	cmp	r3, #0
   1c590:	d039      	beq.n	1c606 <smp_pairing_random+0x1d2>
   1c592:	68db      	ldr	r3, [r3, #12]
   1c594:	2b00      	cmp	r3, #0
   1c596:	d038      	beq.n	1c60a <smp_pairing_random+0x1d6>
			struct bt_conn_oob_info info = {
   1c598:	4b1f      	ldr	r3, [pc, #124]	; (1c618 <smp_pairing_random+0x1e4>)
   1c59a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
   1c59c:	f8ad 3008 	strh.w	r3, [sp, #8]
			le_sc_oob_config_set(smp, &info);
   1c5a0:	a902      	add	r1, sp, #8
   1c5a2:	4620      	mov	r0, r4
   1c5a4:	f00a fd2e 	bl	27004 <le_sc_oob_config_set>
			smp->oobd_local = NULL;
   1c5a8:	2500      	movs	r5, #0
   1c5aa:	f8c4 50e0 	str.w	r5, [r4, #224]	; 0xe0
			smp->oobd_remote = NULL;
   1c5ae:	f8c4 50e4 	str.w	r5, [r4, #228]	; 0xe4
   1c5b2:	f3bf 8f5b 	dmb	ish
   1c5b6:	e856 3f00 	ldrex	r3, [r6]
   1c5ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   1c5be:	e846 3200 	strex	r2, r3, [r6]
   1c5c2:	2a00      	cmp	r2, #0
   1c5c4:	d1f7      	bne.n	1c5b6 <smp_pairing_random+0x182>
   1c5c6:	f3bf 8f5b 	dmb	ish
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   1c5ca:	4b12      	ldr	r3, [pc, #72]	; (1c614 <smp_pairing_random+0x1e0>)
   1c5cc:	681b      	ldr	r3, [r3, #0]
   1c5ce:	68db      	ldr	r3, [r3, #12]
   1c5d0:	a902      	add	r1, sp, #8
   1c5d2:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1c5d6:	4798      	blx	r3
			return 0;
   1c5d8:	e78a      	b.n	1c4f0 <smp_pairing_random+0xbc>
   1c5da:	4b10      	ldr	r3, [pc, #64]	; (1c61c <smp_pairing_random+0x1e8>)
   1c5dc:	4a10      	ldr	r2, [pc, #64]	; (1c620 <smp_pairing_random+0x1ec>)
   1c5de:	1a9b      	subs	r3, r3, r2
   1c5e0:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1c5e2:	f04f 0200 	mov.w	r2, #0
   1c5e6:	2001      	movs	r0, #1
   1c5e8:	f360 0202 	bfi	r2, r0, #0, #3
   1c5ec:	f36f 02c5 	bfc	r2, #3, #3
   1c5f0:	f363 128f 	bfi	r2, r3, #6, #10
   1c5f4:	480b      	ldr	r0, [pc, #44]	; (1c624 <smp_pairing_random+0x1f0>)
   1c5f6:	f7f4 fd8b 	bl	11110 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   1c5fa:	2508      	movs	r5, #8
   1c5fc:	e778      	b.n	1c4f0 <smp_pairing_random+0xbc>
			return BT_SMP_ERR_UNSPECIFIED;
   1c5fe:	2508      	movs	r5, #8
   1c600:	e776      	b.n	1c4f0 <smp_pairing_random+0xbc>
			return BT_SMP_ERR_UNSPECIFIED;
   1c602:	2508      	movs	r5, #8
   1c604:	e774      	b.n	1c4f0 <smp_pairing_random+0xbc>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1c606:	2502      	movs	r5, #2
   1c608:	e772      	b.n	1c4f0 <smp_pairing_random+0xbc>
   1c60a:	2502      	movs	r5, #2
   1c60c:	e770      	b.n	1c4f0 <smp_pairing_random+0xbc>
   1c60e:	bf00      	nop
   1c610:	200027f0 	.word	0x200027f0
   1c614:	20002710 	.word	0x20002710
   1c618:	0002a0f0 	.word	0x0002a0f0
   1c61c:	00029f44 	.word	0x00029f44
   1c620:	00029ecc 	.word	0x00029ecc
   1c624:	0002c918 	.word	0x0002c918

0001c628 <smp_init>:
{
   1c628:	b538      	push	{r3, r4, r5, lr}
   1c62a:	4604      	mov	r4, r0
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   1c62c:	22f0      	movs	r2, #240	; 0xf0
   1c62e:	2100      	movs	r1, #0
   1c630:	f008 fa40 	bl	24ab4 <memset>
	if (bt_rand(smp->prnd, 16)) {
   1c634:	2110      	movs	r1, #16
   1c636:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1c63a:	f002 f963 	bl	1e904 <bt_rand>
   1c63e:	b990      	cbnz	r0, 1c666 <smp_init+0x3e>
   1c640:	4605      	mov	r5, r0
   1c642:	f3bf 8f5b 	dmb	ish
   1c646:	e854 3f00 	ldrex	r3, [r4]
   1c64a:	f043 0320 	orr.w	r3, r3, #32
   1c64e:	e844 3200 	strex	r2, r3, [r4]
   1c652:	2a00      	cmp	r2, #0
   1c654:	d1f7      	bne.n	1c646 <smp_init+0x1e>
   1c656:	f3bf 8f5b 	dmb	ish
	sc_public_key = bt_pub_key_get();
   1c65a:	f7fb fc0f 	bl	17e7c <bt_pub_key_get>
   1c65e:	4b03      	ldr	r3, [pc, #12]	; (1c66c <smp_init+0x44>)
   1c660:	6018      	str	r0, [r3, #0]
}
   1c662:	4628      	mov	r0, r5
   1c664:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1c666:	2508      	movs	r5, #8
   1c668:	e7fb      	b.n	1c662 <smp_init+0x3a>
   1c66a:	bf00      	nop
   1c66c:	200027f0 	.word	0x200027f0

0001c670 <legacy_distribute_keys>:
{
   1c670:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c672:	b089      	sub	sp, #36	; 0x24
	struct bt_conn *conn = smp->chan.chan.conn;
   1c674:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
	struct bt_keys *keys = conn->le.keys;
   1c678:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   1c67c:	f890 30e8 	ldrb.w	r3, [r0, #232]	; 0xe8
   1c680:	f013 0f01 	tst.w	r3, #1
   1c684:	d101      	bne.n	1c68a <legacy_distribute_keys+0x1a>
}
   1c686:	b009      	add	sp, #36	; 0x24
   1c688:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c68a:	4604      	mov	r4, r0
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1c68c:	211a      	movs	r1, #26
   1c68e:	a801      	add	r0, sp, #4
   1c690:	f002 f938 	bl	1e904 <bt_rand>
   1c694:	2800      	cmp	r0, #0
   1c696:	d155      	bne.n	1c744 <legacy_distribute_keys+0xd4>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   1c698:	2210      	movs	r2, #16
   1c69a:	2106      	movs	r1, #6
   1c69c:	4620      	mov	r0, r4
   1c69e:	f00a fe06 	bl	272ae <smp_create_pdu>
		if (!buf) {
   1c6a2:	4607      	mov	r7, r0
   1c6a4:	2800      	cmp	r0, #0
   1c6a6:	d05e      	beq.n	1c766 <legacy_distribute_keys+0xf6>
   1c6a8:	2110      	movs	r1, #16
   1c6aa:	3008      	adds	r0, #8
   1c6ac:	f00b fe41 	bl	28332 <net_buf_simple_add>
   1c6b0:	4606      	mov	r6, r0
		memcpy(info->ltk, rand.key, keys->enc_size);
   1c6b2:	7b2a      	ldrb	r2, [r5, #12]
   1c6b4:	a901      	add	r1, sp, #4
   1c6b6:	f008 f9d9 	bl	24a6c <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   1c6ba:	7b28      	ldrb	r0, [r5, #12]
   1c6bc:	280f      	cmp	r0, #15
   1c6be:	d963      	bls.n	1c788 <legacy_distribute_keys+0x118>
		smp_send(smp, buf, NULL, NULL);
   1c6c0:	2300      	movs	r3, #0
   1c6c2:	461a      	mov	r2, r3
   1c6c4:	4639      	mov	r1, r7
   1c6c6:	4620      	mov	r0, r4
   1c6c8:	f00a fe1c 	bl	27304 <smp_send>
		buf = smp_create_pdu(smp, BT_SMP_CMD_MASTER_IDENT,
   1c6cc:	220a      	movs	r2, #10
   1c6ce:	2107      	movs	r1, #7
   1c6d0:	4620      	mov	r0, r4
   1c6d2:	f00a fdec 	bl	272ae <smp_create_pdu>
		if (!buf) {
   1c6d6:	4607      	mov	r7, r0
   1c6d8:	2800      	cmp	r0, #0
   1c6da:	d05c      	beq.n	1c796 <legacy_distribute_keys+0x126>
   1c6dc:	210a      	movs	r1, #10
   1c6de:	3008      	adds	r0, #8
   1c6e0:	f00b fe27 	bl	28332 <net_buf_simple_add>
   1c6e4:	4606      	mov	r6, r0
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
   1c6e6:	2208      	movs	r2, #8
   1c6e8:	a905      	add	r1, sp, #20
   1c6ea:	3002      	adds	r0, #2
   1c6ec:	f008 f9be 	bl	24a6c <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
   1c6f0:	2202      	movs	r2, #2
   1c6f2:	a907      	add	r1, sp, #28
   1c6f4:	4630      	mov	r0, r6
   1c6f6:	f008 f9b9 	bl	24a6c <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
   1c6fa:	2300      	movs	r3, #0
   1c6fc:	4a2e      	ldr	r2, [pc, #184]	; (1c7b8 <legacy_distribute_keys+0x148>)
   1c6fe:	4639      	mov	r1, r7
   1c700:	4620      	mov	r0, r4
   1c702:	f00a fdff 	bl	27304 <smp_send>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c706:	f3bf 8f5b 	dmb	ish
   1c70a:	6863      	ldr	r3, [r4, #4]
   1c70c:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1c710:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1c714:	d0b7      	beq.n	1c686 <legacy_distribute_keys+0x16>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
   1c716:	2101      	movs	r1, #1
   1c718:	4628      	mov	r0, r5
   1c71a:	f00b fcac 	bl	28076 <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, rand.key,
   1c71e:	2210      	movs	r2, #16
   1c720:	a901      	add	r1, sp, #4
   1c722:	f105 004a 	add.w	r0, r5, #74	; 0x4a
   1c726:	f008 f9a1 	bl	24a6c <memcpy>
			memcpy(keys->slave_ltk.rand, rand.rand,
   1c72a:	2208      	movs	r2, #8
   1c72c:	a905      	add	r1, sp, #20
   1c72e:	f105 0040 	add.w	r0, r5, #64	; 0x40
   1c732:	f008 f99b 	bl	24a6c <memcpy>
			memcpy(keys->slave_ltk.ediv, rand.ediv,
   1c736:	2202      	movs	r2, #2
   1c738:	a907      	add	r1, sp, #28
   1c73a:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1c73e:	f008 f995 	bl	24a6c <memcpy>
   1c742:	e7a0      	b.n	1c686 <legacy_distribute_keys+0x16>
   1c744:	4b1d      	ldr	r3, [pc, #116]	; (1c7bc <legacy_distribute_keys+0x14c>)
   1c746:	4a1e      	ldr	r2, [pc, #120]	; (1c7c0 <legacy_distribute_keys+0x150>)
   1c748:	1a9b      	subs	r3, r3, r2
   1c74a:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to get random bytes");
   1c74c:	f04f 0100 	mov.w	r1, #0
   1c750:	2201      	movs	r2, #1
   1c752:	f362 0102 	bfi	r1, r2, #0, #3
   1c756:	f36f 01c5 	bfc	r1, #3, #3
   1c75a:	f363 118f 	bfi	r1, r3, #6, #10
   1c75e:	4819      	ldr	r0, [pc, #100]	; (1c7c4 <legacy_distribute_keys+0x154>)
   1c760:	f7f4 fd8c 	bl	1127c <log_0>
			return;
   1c764:	e78f      	b.n	1c686 <legacy_distribute_keys+0x16>
   1c766:	4b15      	ldr	r3, [pc, #84]	; (1c7bc <legacy_distribute_keys+0x14c>)
   1c768:	4a15      	ldr	r2, [pc, #84]	; (1c7c0 <legacy_distribute_keys+0x150>)
   1c76a:	1a9b      	subs	r3, r3, r2
   1c76c:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to allocate Encrypt Info buffer");
   1c76e:	f04f 0100 	mov.w	r1, #0
   1c772:	2201      	movs	r2, #1
   1c774:	f362 0102 	bfi	r1, r2, #0, #3
   1c778:	f36f 01c5 	bfc	r1, #3, #3
   1c77c:	f363 118f 	bfi	r1, r3, #6, #10
   1c780:	4811      	ldr	r0, [pc, #68]	; (1c7c8 <legacy_distribute_keys+0x158>)
   1c782:	f7f4 fd7b 	bl	1127c <log_0>
			return;
   1c786:	e77e      	b.n	1c686 <legacy_distribute_keys+0x16>
			(void)memset(info->ltk + keys->enc_size, 0,
   1c788:	f1c0 0210 	rsb	r2, r0, #16
   1c78c:	2100      	movs	r1, #0
   1c78e:	4430      	add	r0, r6
   1c790:	f008 f990 	bl	24ab4 <memset>
   1c794:	e794      	b.n	1c6c0 <legacy_distribute_keys+0x50>
   1c796:	4b09      	ldr	r3, [pc, #36]	; (1c7bc <legacy_distribute_keys+0x14c>)
   1c798:	4a09      	ldr	r2, [pc, #36]	; (1c7c0 <legacy_distribute_keys+0x150>)
   1c79a:	1a9b      	subs	r3, r3, r2
   1c79c:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to allocate Master Ident buffer");
   1c79e:	f04f 0100 	mov.w	r1, #0
   1c7a2:	2201      	movs	r2, #1
   1c7a4:	f362 0102 	bfi	r1, r2, #0, #3
   1c7a8:	f36f 01c5 	bfc	r1, #3, #3
   1c7ac:	f363 118f 	bfi	r1, r3, #6, #10
   1c7b0:	4806      	ldr	r0, [pc, #24]	; (1c7cc <legacy_distribute_keys+0x15c>)
   1c7b2:	f7f4 fd63 	bl	1127c <log_0>
			return;
   1c7b6:	e766      	b.n	1c686 <legacy_distribute_keys+0x16>
   1c7b8:	00027fef 	.word	0x00027fef
   1c7bc:	00029f44 	.word	0x00029f44
   1c7c0:	00029ecc 	.word	0x00029ecc
   1c7c4:	0002c9b0 	.word	0x0002c9b0
   1c7c8:	0002c9cc 	.word	0x0002c9cc
   1c7cc:	0002c9f4 	.word	0x0002c9f4

0001c7d0 <bt_smp_distribute_keys>:
{
   1c7d0:	b510      	push	{r4, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   1c7d2:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
	struct bt_keys *keys = conn->le.keys;
   1c7d6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
	if (!keys) {
   1c7da:	b14a      	cbz	r2, 1c7f0 <bt_smp_distribute_keys+0x20>
   1c7dc:	f3bf 8f5b 	dmb	ish
   1c7e0:	6843      	ldr	r3, [r0, #4]
   1c7e2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1c7e6:	f013 0f20 	tst.w	r3, #32
   1c7ea:	d01b      	beq.n	1c824 <bt_smp_distribute_keys+0x54>
	return 0;
   1c7ec:	2000      	movs	r0, #0
}
   1c7ee:	bd10      	pop	{r4, pc}
   1c7f0:	4a0e      	ldr	r2, [pc, #56]	; (1c82c <bt_smp_distribute_keys+0x5c>)
   1c7f2:	490f      	ldr	r1, [pc, #60]	; (1c830 <bt_smp_distribute_keys+0x60>)
   1c7f4:	1a52      	subs	r2, r2, r1
   1c7f6:	08d2      	lsrs	r2, r2, #3
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   1c7f8:	f04f 0400 	mov.w	r4, #0
   1c7fc:	2101      	movs	r1, #1
   1c7fe:	f361 0402 	bfi	r4, r1, #0, #3
   1c802:	f36f 04c5 	bfc	r4, #3, #3
   1c806:	f362 148f 	bfi	r4, r2, #6, #10
   1c80a:	f103 0088 	add.w	r0, r3, #136	; 0x88
   1c80e:	f7f7 fd43 	bl	14298 <bt_addr_le_str_real>
   1c812:	f7f4 fb03 	bl	10e1c <z_log_strdup>
   1c816:	4601      	mov	r1, r0
   1c818:	4622      	mov	r2, r4
   1c81a:	4806      	ldr	r0, [pc, #24]	; (1c834 <bt_smp_distribute_keys+0x64>)
   1c81c:	f7f4 fc78 	bl	11110 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   1c820:	2008      	movs	r0, #8
   1c822:	e7e4      	b.n	1c7ee <bt_smp_distribute_keys+0x1e>
		legacy_distribute_keys(smp);
   1c824:	f7ff ff24 	bl	1c670 <legacy_distribute_keys>
	return 0;
   1c828:	2000      	movs	r0, #0
   1c82a:	e7e0      	b.n	1c7ee <bt_smp_distribute_keys+0x1e>
   1c82c:	00029f44 	.word	0x00029f44
   1c830:	00029ecc 	.word	0x00029ecc
   1c834:	0002ca1c 	.word	0x0002ca1c

0001c838 <smp_dhkey_generate>:
{
   1c838:	b510      	push	{r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1c83a:	1d04      	adds	r4, r0, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c83c:	f3bf 8f5b 	dmb	ish
   1c840:	e854 3f00 	ldrex	r3, [r4]
   1c844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1c848:	e844 3200 	strex	r2, r3, [r4]
   1c84c:	2a00      	cmp	r2, #0
   1c84e:	d1f7      	bne.n	1c840 <smp_dhkey_generate+0x8>
   1c850:	f3bf 8f5b 	dmb	ish
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   1c854:	4912      	ldr	r1, [pc, #72]	; (1c8a0 <smp_dhkey_generate+0x68>)
   1c856:	3057      	adds	r0, #87	; 0x57
   1c858:	f7fb fb22 	bl	17ea0 <bt_dh_key_gen>
	if (err) {
   1c85c:	b908      	cbnz	r0, 1c862 <smp_dhkey_generate+0x2a>
	return 0;
   1c85e:	2000      	movs	r0, #0
}
   1c860:	bd10      	pop	{r4, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c862:	f3bf 8f5b 	dmb	ish
   1c866:	e854 3f00 	ldrex	r3, [r4]
   1c86a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   1c86e:	e844 3200 	strex	r2, r3, [r4]
   1c872:	2a00      	cmp	r2, #0
   1c874:	d1f7      	bne.n	1c866 <smp_dhkey_generate+0x2e>
   1c876:	f3bf 8f5b 	dmb	ish
   1c87a:	4b0a      	ldr	r3, [pc, #40]	; (1c8a4 <smp_dhkey_generate+0x6c>)
   1c87c:	4a0a      	ldr	r2, [pc, #40]	; (1c8a8 <smp_dhkey_generate+0x70>)
   1c87e:	1a9b      	subs	r3, r3, r2
   1c880:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to generate DHKey");
   1c882:	f04f 0100 	mov.w	r1, #0
   1c886:	2201      	movs	r2, #1
   1c888:	f362 0102 	bfi	r1, r2, #0, #3
   1c88c:	f36f 01c5 	bfc	r1, #3, #3
   1c890:	f363 118f 	bfi	r1, r3, #6, #10
   1c894:	4805      	ldr	r0, [pc, #20]	; (1c8ac <smp_dhkey_generate+0x74>)
   1c896:	f7f4 fcf1 	bl	1127c <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
   1c89a:	2008      	movs	r0, #8
   1c89c:	e7e0      	b.n	1c860 <smp_dhkey_generate+0x28>
   1c89e:	bf00      	nop
   1c8a0:	00027dcd 	.word	0x00027dcd
   1c8a4:	00029f44 	.word	0x00029f44
   1c8a8:	00029ecc 	.word	0x00029ecc
   1c8ac:	0002ca34 	.word	0x0002ca34

0001c8b0 <smp_public_key_slave>:
{
   1c8b0:	b538      	push	{r3, r4, r5, lr}
   1c8b2:	4604      	mov	r4, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1c8b4:	1d05      	adds	r5, r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c8b6:	f3bf 8f5b 	dmb	ish
   1c8ba:	6843      	ldr	r3, [r0, #4]
   1c8bc:	f3bf 8f5b 	dmb	ish
   1c8c0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   1c8c4:	d106      	bne.n	1c8d4 <smp_public_key_slave+0x24>
	    memcmp(smp->pkey, sc_public_key, 32) == 0) {
   1c8c6:	2220      	movs	r2, #32
   1c8c8:	4b53      	ldr	r3, [pc, #332]	; (1ca18 <smp_public_key_slave+0x168>)
   1c8ca:	6819      	ldr	r1, [r3, #0]
   1c8cc:	3057      	adds	r0, #87	; 0x57
   1c8ce:	f008 f8b6 	bl	24a3e <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1c8d2:	b170      	cbz	r0, 1c8f2 <smp_public_key_slave+0x42>
	err = sc_send_public_key(smp);
   1c8d4:	4620      	mov	r0, r4
   1c8d6:	f7ff f9fd 	bl	1bcd4 <sc_send_public_key>
	if (err) {
   1c8da:	4603      	mov	r3, r0
   1c8dc:	2800      	cmp	r0, #0
   1c8de:	d17a      	bne.n	1c9d6 <smp_public_key_slave+0x126>
	switch (smp->method) {
   1c8e0:	7a21      	ldrb	r1, [r4, #8]
   1c8e2:	2905      	cmp	r1, #5
   1c8e4:	f200 8086 	bhi.w	1c9f4 <smp_public_key_slave+0x144>
   1c8e8:	e8df f001 	tbb	[pc, r1]
   1c8ec:	15284715 	.word	0x15284715
   1c8f0:	7784      	.short	0x7784
   1c8f2:	4b4a      	ldr	r3, [pc, #296]	; (1ca1c <smp_public_key_slave+0x16c>)
   1c8f4:	4a4a      	ldr	r2, [pc, #296]	; (1ca20 <smp_public_key_slave+0x170>)
   1c8f6:	1a9b      	subs	r3, r3, r2
   1c8f8:	08db      	lsrs	r3, r3, #3
		BT_WARN("Remote public key rejected");
   1c8fa:	f04f 0100 	mov.w	r1, #0
   1c8fe:	2202      	movs	r2, #2
   1c900:	f362 0102 	bfi	r1, r2, #0, #3
   1c904:	f36f 01c5 	bfc	r1, #3, #3
   1c908:	f363 118f 	bfi	r1, r3, #6, #10
   1c90c:	4845      	ldr	r0, [pc, #276]	; (1ca24 <smp_public_key_slave+0x174>)
   1c90e:	f7f4 fcb5 	bl	1127c <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
   1c912:	2308      	movs	r3, #8
   1c914:	e05f      	b.n	1c9d6 <smp_public_key_slave+0x126>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c916:	f3bf 8f5b 	dmb	ish
   1c91a:	e854 3f00 	ldrex	r3, [r4]
   1c91e:	f043 0310 	orr.w	r3, r3, #16
   1c922:	e844 3200 	strex	r2, r3, [r4]
   1c926:	2a00      	cmp	r2, #0
   1c928:	d1f7      	bne.n	1c91a <smp_public_key_slave+0x6a>
   1c92a:	f3bf 8f5b 	dmb	ish
		err = smp_send_pairing_confirm(smp);
   1c92e:	4620      	mov	r0, r4
   1c930:	f7ff fa30 	bl	1bd94 <smp_send_pairing_confirm>
		if (err) {
   1c934:	4603      	mov	r3, r0
   1c936:	2800      	cmp	r0, #0
   1c938:	d049      	beq.n	1c9ce <smp_public_key_slave+0x11e>
   1c93a:	e04c      	b.n	1c9d6 <smp_public_key_slave+0x126>
		err = display_passkey(smp);
   1c93c:	4620      	mov	r0, r4
   1c93e:	f7ff fd3f 	bl	1c3c0 <display_passkey>
		if (err) {
   1c942:	4603      	mov	r3, r0
   1c944:	2800      	cmp	r0, #0
   1c946:	d146      	bne.n	1c9d6 <smp_public_key_slave+0x126>
   1c948:	f3bf 8f5b 	dmb	ish
   1c94c:	e854 3f00 	ldrex	r3, [r4]
   1c950:	f043 0308 	orr.w	r3, r3, #8
   1c954:	e844 3200 	strex	r2, r3, [r4]
   1c958:	2a00      	cmp	r2, #0
   1c95a:	d1f7      	bne.n	1c94c <smp_public_key_slave+0x9c>
   1c95c:	f3bf 8f5b 	dmb	ish
   1c960:	f3bf 8f5b 	dmb	ish
   1c964:	e854 3f00 	ldrex	r3, [r4]
   1c968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   1c96c:	e844 3200 	strex	r2, r3, [r4]
   1c970:	2a00      	cmp	r2, #0
   1c972:	d1f7      	bne.n	1c964 <smp_public_key_slave+0xb4>
   1c974:	f3bf 8f5b 	dmb	ish
}
   1c978:	e029      	b.n	1c9ce <smp_public_key_slave+0x11e>
   1c97a:	f3bf 8f5b 	dmb	ish
   1c97e:	e854 3f00 	ldrex	r3, [r4]
   1c982:	f043 0308 	orr.w	r3, r3, #8
   1c986:	e844 3200 	strex	r2, r3, [r4]
   1c98a:	2a00      	cmp	r2, #0
   1c98c:	d1f7      	bne.n	1c97e <smp_public_key_slave+0xce>
   1c98e:	f3bf 8f5b 	dmb	ish
   1c992:	f3bf 8f5b 	dmb	ish
   1c996:	e854 3f00 	ldrex	r3, [r4]
   1c99a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   1c99e:	e844 3200 	strex	r2, r3, [r4]
   1c9a2:	2a00      	cmp	r2, #0
   1c9a4:	d1f7      	bne.n	1c996 <smp_public_key_slave+0xe6>
   1c9a6:	f3bf 8f5b 	dmb	ish
   1c9aa:	f3bf 8f5b 	dmb	ish
   1c9ae:	e855 3f00 	ldrex	r3, [r5]
   1c9b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1c9b6:	e845 3200 	strex	r2, r3, [r5]
   1c9ba:	2a00      	cmp	r2, #0
   1c9bc:	d1f7      	bne.n	1c9ae <smp_public_key_slave+0xfe>
   1c9be:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_entry(smp->chan.chan.conn);
   1c9c2:	4b19      	ldr	r3, [pc, #100]	; (1ca28 <smp_public_key_slave+0x178>)
   1c9c4:	681b      	ldr	r3, [r3, #0]
   1c9c6:	685b      	ldr	r3, [r3, #4]
   1c9c8:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1c9cc:	4798      	blx	r3
	return generate_dhkey(smp);
   1c9ce:	4620      	mov	r0, r4
   1c9d0:	f00a ff8d 	bl	278ee <generate_dhkey>
   1c9d4:	4603      	mov	r3, r0
}
   1c9d6:	4618      	mov	r0, r3
   1c9d8:	bd38      	pop	{r3, r4, r5, pc}
   1c9da:	f3bf 8f5b 	dmb	ish
   1c9de:	e854 3f00 	ldrex	r3, [r4]
   1c9e2:	f043 0310 	orr.w	r3, r3, #16
   1c9e6:	e844 3200 	strex	r2, r3, [r4]
   1c9ea:	2a00      	cmp	r2, #0
   1c9ec:	d1f7      	bne.n	1c9de <smp_public_key_slave+0x12e>
   1c9ee:	f3bf 8f5b 	dmb	ish
   1c9f2:	e7ec      	b.n	1c9ce <smp_public_key_slave+0x11e>
   1c9f4:	4b09      	ldr	r3, [pc, #36]	; (1ca1c <smp_public_key_slave+0x16c>)
   1c9f6:	4a0a      	ldr	r2, [pc, #40]	; (1ca20 <smp_public_key_slave+0x170>)
   1c9f8:	1a9b      	subs	r3, r3, r2
   1c9fa:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1c9fc:	f04f 0200 	mov.w	r2, #0
   1ca00:	2001      	movs	r0, #1
   1ca02:	f360 0202 	bfi	r2, r0, #0, #3
   1ca06:	f36f 02c5 	bfc	r2, #3, #3
   1ca0a:	f363 128f 	bfi	r2, r3, #6, #10
   1ca0e:	4807      	ldr	r0, [pc, #28]	; (1ca2c <smp_public_key_slave+0x17c>)
   1ca10:	f7f4 fb7e 	bl	11110 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   1ca14:	2308      	movs	r3, #8
   1ca16:	e7de      	b.n	1c9d6 <smp_public_key_slave+0x126>
   1ca18:	200027f0 	.word	0x200027f0
   1ca1c:	00029f44 	.word	0x00029f44
   1ca20:	00029ecc 	.word	0x00029ecc
   1ca24:	0002ca50 	.word	0x0002ca50
   1ca28:	20002710 	.word	0x20002710
   1ca2c:	0002c918 	.word	0x0002c918

0001ca30 <smp_public_key>:
{
   1ca30:	b570      	push	{r4, r5, r6, lr}
   1ca32:	4604      	mov	r4, r0
	struct bt_smp_public_key *req = (void *)buf->data;
   1ca34:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
   1ca36:	f100 0557 	add.w	r5, r0, #87	; 0x57
   1ca3a:	2220      	movs	r2, #32
   1ca3c:	4631      	mov	r1, r6
   1ca3e:	4628      	mov	r0, r5
   1ca40:	f008 f814 	bl	24a6c <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
   1ca44:	2220      	movs	r2, #32
   1ca46:	18b1      	adds	r1, r6, r2
   1ca48:	f104 0077 	add.w	r0, r4, #119	; 0x77
   1ca4c:	f008 f80e 	bl	24a6c <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
   1ca50:	4628      	mov	r0, r5
   1ca52:	f7fb f94d 	bl	17cf0 <bt_pub_key_is_debug>
   1ca56:	b300      	cbz	r0, 1ca9a <smp_public_key+0x6a>
   1ca58:	4b1c      	ldr	r3, [pc, #112]	; (1cacc <smp_public_key+0x9c>)
   1ca5a:	4a1d      	ldr	r2, [pc, #116]	; (1cad0 <smp_public_key+0xa0>)
   1ca5c:	1a9b      	subs	r3, r3, r2
   1ca5e:	08db      	lsrs	r3, r3, #3
		BT_INFO("Remote is using Debug Public key");
   1ca60:	f04f 0100 	mov.w	r1, #0
   1ca64:	2203      	movs	r2, #3
   1ca66:	f362 0102 	bfi	r1, r2, #0, #3
   1ca6a:	f36f 01c5 	bfc	r1, #3, #3
   1ca6e:	f363 118f 	bfi	r1, r3, #6, #10
   1ca72:	4818      	ldr	r0, [pc, #96]	; (1cad4 <smp_public_key+0xa4>)
   1ca74:	f7f4 fc02 	bl	1127c <log_0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   1ca78:	1d23      	adds	r3, r4, #4
   1ca7a:	f3bf 8f5b 	dmb	ish
   1ca7e:	e853 2f00 	ldrex	r2, [r3]
   1ca82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   1ca86:	e843 2100 	strex	r1, r2, [r3]
   1ca8a:	2900      	cmp	r1, #0
   1ca8c:	d1f7      	bne.n	1ca7e <smp_public_key+0x4e>
   1ca8e:	f3bf 8f5b 	dmb	ish
		if (!update_debug_keys_check(smp)) {
   1ca92:	4620      	mov	r0, r4
   1ca94:	f00a fe78 	bl	27788 <update_debug_keys_check>
   1ca98:	b1a8      	cbz	r0, 1cac6 <smp_public_key+0x96>
	if (!sc_public_key) {
   1ca9a:	4b0f      	ldr	r3, [pc, #60]	; (1cad8 <smp_public_key+0xa8>)
   1ca9c:	681b      	ldr	r3, [r3, #0]
   1ca9e:	b11b      	cbz	r3, 1caa8 <smp_public_key+0x78>
	err = smp_public_key_slave(smp);
   1caa0:	4620      	mov	r0, r4
   1caa2:	f7ff ff05 	bl	1c8b0 <smp_public_key_slave>
}
   1caa6:	bd70      	pop	{r4, r5, r6, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   1caa8:	3404      	adds	r4, #4
   1caaa:	f3bf 8f5b 	dmb	ish
   1caae:	e854 3f00 	ldrex	r3, [r4]
   1cab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1cab6:	e844 3200 	strex	r2, r3, [r4]
   1caba:	2a00      	cmp	r2, #0
   1cabc:	d1f7      	bne.n	1caae <smp_public_key+0x7e>
   1cabe:	f3bf 8f5b 	dmb	ish
		return 0;
   1cac2:	2000      	movs	r0, #0
   1cac4:	e7ef      	b.n	1caa6 <smp_public_key+0x76>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1cac6:	2003      	movs	r0, #3
   1cac8:	e7ed      	b.n	1caa6 <smp_public_key+0x76>
   1caca:	bf00      	nop
   1cacc:	00029f44 	.word	0x00029f44
   1cad0:	00029ecc 	.word	0x00029ecc
   1cad4:	0002ca6c 	.word	0x0002ca6c
   1cad8:	200027f0 	.word	0x200027f0

0001cadc <legacy_request_tk>:
{
   1cadc:	b530      	push	{r4, r5, lr}
   1cade:	b083      	sub	sp, #12
   1cae0:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1cae2:	f8d0 50f0 	ldr.w	r5, [r0, #240]	; 0xf0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1cae6:	f105 0188 	add.w	r1, r5, #136	; 0x88
   1caea:	7a28      	ldrb	r0, [r5, #8]
   1caec:	f000 ffb0 	bl	1da50 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   1caf0:	b128      	cbz	r0, 1cafe <legacy_request_tk+0x22>
   1caf2:	7b43      	ldrb	r3, [r0, #13]
   1caf4:	f013 0f01 	tst.w	r3, #1
   1caf8:	d001      	beq.n	1cafe <legacy_request_tk+0x22>
	    smp->method == JUST_WORKS) {
   1cafa:	7a23      	ldrb	r3, [r4, #8]
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   1cafc:	b14b      	cbz	r3, 1cb12 <legacy_request_tk+0x36>
	switch (smp->method) {
   1cafe:	7a20      	ldrb	r0, [r4, #8]
   1cb00:	2806      	cmp	r0, #6
   1cb02:	f200 8084 	bhi.w	1cc0e <legacy_request_tk+0x132>
   1cb06:	e8df f000 	tbb	[pc, r0]
   1cb0a:	6d80      	.short	0x6d80
   1cb0c:	82828236 	.word	0x82828236
   1cb10:	16          	.byte	0x16
   1cb11:	00          	.byte	0x00
   1cb12:	4b4b      	ldr	r3, [pc, #300]	; (1cc40 <legacy_request_tk+0x164>)
   1cb14:	4a4b      	ldr	r2, [pc, #300]	; (1cc44 <legacy_request_tk+0x168>)
   1cb16:	1a9b      	subs	r3, r3, r2
   1cb18:	08db      	lsrs	r3, r3, #3
		BT_ERR("JustWorks failed, authenticated keys present");
   1cb1a:	f04f 0100 	mov.w	r1, #0
   1cb1e:	2201      	movs	r2, #1
   1cb20:	f362 0102 	bfi	r1, r2, #0, #3
   1cb24:	f36f 01c5 	bfc	r1, #3, #3
   1cb28:	f363 118f 	bfi	r1, r3, #6, #10
   1cb2c:	4846      	ldr	r0, [pc, #280]	; (1cc48 <legacy_request_tk+0x16c>)
   1cb2e:	f7f4 fba5 	bl	1127c <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
   1cb32:	2008      	movs	r0, #8
   1cb34:	e069      	b.n	1cc0a <legacy_request_tk+0x12e>
		if (bt_auth && bt_auth->oob_data_request) {
   1cb36:	4b45      	ldr	r3, [pc, #276]	; (1cc4c <legacy_request_tk+0x170>)
   1cb38:	681b      	ldr	r3, [r3, #0]
   1cb3a:	2b00      	cmp	r3, #0
   1cb3c:	d07a      	beq.n	1cc34 <legacy_request_tk+0x158>
   1cb3e:	68db      	ldr	r3, [r3, #12]
   1cb40:	2b00      	cmp	r3, #0
   1cb42:	d079      	beq.n	1cc38 <legacy_request_tk+0x15c>
			struct bt_conn_oob_info info = {
   1cb44:	2500      	movs	r5, #0
   1cb46:	f8ad 5000 	strh.w	r5, [sp]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1cb4a:	1d23      	adds	r3, r4, #4
   1cb4c:	f3bf 8f5b 	dmb	ish
   1cb50:	e853 2f00 	ldrex	r2, [r3]
   1cb54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   1cb58:	e843 2100 	strex	r1, r2, [r3]
   1cb5c:	2900      	cmp	r1, #0
   1cb5e:	d1f7      	bne.n	1cb50 <legacy_request_tk+0x74>
   1cb60:	f3bf 8f5b 	dmb	ish
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   1cb64:	4b39      	ldr	r3, [pc, #228]	; (1cc4c <legacy_request_tk+0x170>)
   1cb66:	681b      	ldr	r3, [r3, #0]
   1cb68:	68db      	ldr	r3, [r3, #12]
   1cb6a:	4669      	mov	r1, sp
   1cb6c:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1cb70:	4798      	blx	r3
	return 0;
   1cb72:	4628      	mov	r0, r5
		break;
   1cb74:	e049      	b.n	1cc0a <legacy_request_tk+0x12e>
			if (bt_rand(&passkey, sizeof(passkey))) {
   1cb76:	2104      	movs	r1, #4
   1cb78:	eb0d 0001 	add.w	r0, sp, r1
   1cb7c:	f001 fec2 	bl	1e904 <bt_rand>
   1cb80:	2800      	cmp	r0, #0
   1cb82:	d15b      	bne.n	1cc3c <legacy_request_tk+0x160>
			passkey %= 1000000;
   1cb84:	9a01      	ldr	r2, [sp, #4]
   1cb86:	4b32      	ldr	r3, [pc, #200]	; (1cc50 <legacy_request_tk+0x174>)
   1cb88:	fba3 1302 	umull	r1, r3, r3, r2
   1cb8c:	0c9b      	lsrs	r3, r3, #18
   1cb8e:	4931      	ldr	r1, [pc, #196]	; (1cc54 <legacy_request_tk+0x178>)
   1cb90:	fb01 2313 	mls	r3, r1, r3, r2
   1cb94:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
   1cb96:	4b2d      	ldr	r3, [pc, #180]	; (1cc4c <legacy_request_tk+0x170>)
   1cb98:	681b      	ldr	r3, [r3, #0]
   1cb9a:	b1a3      	cbz	r3, 1cbc6 <legacy_request_tk+0xea>
   1cb9c:	681b      	ldr	r3, [r3, #0]
   1cb9e:	b193      	cbz	r3, 1cbc6 <legacy_request_tk+0xea>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1cba0:	1d23      	adds	r3, r4, #4
   1cba2:	f3bf 8f5b 	dmb	ish
   1cba6:	e853 2f00 	ldrex	r2, [r3]
   1cbaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   1cbae:	e843 2100 	strex	r1, r2, [r3]
   1cbb2:	2900      	cmp	r1, #0
   1cbb4:	d1f7      	bne.n	1cba6 <legacy_request_tk+0xca>
   1cbb6:	f3bf 8f5b 	dmb	ish
			bt_auth->passkey_display(conn, passkey);
   1cbba:	4b24      	ldr	r3, [pc, #144]	; (1cc4c <legacy_request_tk+0x170>)
   1cbbc:	681b      	ldr	r3, [r3, #0]
   1cbbe:	681b      	ldr	r3, [r3, #0]
   1cbc0:	9901      	ldr	r1, [sp, #4]
   1cbc2:	4628      	mov	r0, r5
   1cbc4:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   1cbc6:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
   1cbc8:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	dst[1] = val >> 8;
   1cbcc:	f3c3 2207 	ubfx	r2, r3, #8, #8
   1cbd0:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
	sys_put_le16(val >> 16, &dst[2]);
   1cbd4:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   1cbd6:	f884 2049 	strb.w	r2, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   1cbda:	0e1b      	lsrs	r3, r3, #24
   1cbdc:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	return 0;
   1cbe0:	2000      	movs	r0, #0
}
   1cbe2:	e012      	b.n	1cc0a <legacy_request_tk+0x12e>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1cbe4:	3404      	adds	r4, #4
   1cbe6:	f3bf 8f5b 	dmb	ish
   1cbea:	e854 3f00 	ldrex	r3, [r4]
   1cbee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1cbf2:	e844 3200 	strex	r2, r3, [r4]
   1cbf6:	2a00      	cmp	r2, #0
   1cbf8:	d1f7      	bne.n	1cbea <legacy_request_tk+0x10e>
   1cbfa:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_entry(conn);
   1cbfe:	4b13      	ldr	r3, [pc, #76]	; (1cc4c <legacy_request_tk+0x170>)
   1cc00:	681b      	ldr	r3, [r3, #0]
   1cc02:	685b      	ldr	r3, [r3, #4]
   1cc04:	4628      	mov	r0, r5
   1cc06:	4798      	blx	r3
	return 0;
   1cc08:	2000      	movs	r0, #0
}
   1cc0a:	b003      	add	sp, #12
   1cc0c:	bd30      	pop	{r4, r5, pc}
   1cc0e:	4b0c      	ldr	r3, [pc, #48]	; (1cc40 <legacy_request_tk+0x164>)
   1cc10:	4a0c      	ldr	r2, [pc, #48]	; (1cc44 <legacy_request_tk+0x168>)
   1cc12:	1a9b      	subs	r3, r3, r2
   1cc14:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1cc16:	f04f 0200 	mov.w	r2, #0
   1cc1a:	2101      	movs	r1, #1
   1cc1c:	f361 0202 	bfi	r2, r1, #0, #3
   1cc20:	f36f 02c5 	bfc	r2, #3, #3
   1cc24:	f363 128f 	bfi	r2, r3, #6, #10
   1cc28:	4601      	mov	r1, r0
   1cc2a:	480b      	ldr	r0, [pc, #44]	; (1cc58 <legacy_request_tk+0x17c>)
   1cc2c:	f7f4 fa70 	bl	11110 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   1cc30:	2008      	movs	r0, #8
   1cc32:	e7ea      	b.n	1cc0a <legacy_request_tk+0x12e>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1cc34:	2002      	movs	r0, #2
   1cc36:	e7e8      	b.n	1cc0a <legacy_request_tk+0x12e>
   1cc38:	2002      	movs	r0, #2
   1cc3a:	e7e6      	b.n	1cc0a <legacy_request_tk+0x12e>
				return BT_SMP_ERR_UNSPECIFIED;
   1cc3c:	2008      	movs	r0, #8
   1cc3e:	e7e4      	b.n	1cc0a <legacy_request_tk+0x12e>
   1cc40:	00029f44 	.word	0x00029f44
   1cc44:	00029ecc 	.word	0x00029ecc
   1cc48:	0002ca90 	.word	0x0002ca90
   1cc4c:	20002710 	.word	0x20002710
   1cc50:	431bde83 	.word	0x431bde83
   1cc54:	000f4240 	.word	0x000f4240
   1cc58:	0002c918 	.word	0x0002c918

0001cc5c <legacy_pairing_req>:
{
   1cc5c:	b538      	push	{r3, r4, r5, lr}
   1cc5e:	4604      	mov	r4, r0
	ret = legacy_request_tk(smp);
   1cc60:	f7ff ff3c 	bl	1cadc <legacy_request_tk>
	if (ret) {
   1cc64:	4605      	mov	r5, r0
   1cc66:	bb58      	cbnz	r0, 1ccc0 <legacy_pairing_req+0x64>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1cc68:	7a25      	ldrb	r5, [r4, #8]
   1cc6a:	b96d      	cbnz	r5, 1cc88 <legacy_pairing_req+0x2c>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1cc6c:	1d22      	adds	r2, r4, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1cc6e:	f3bf 8f5b 	dmb	ish
   1cc72:	6863      	ldr	r3, [r4, #4]
   1cc74:	f3bf 8f5b 	dmb	ish
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1cc78:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   1cc7c:	d104      	bne.n	1cc88 <legacy_pairing_req+0x2c>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1cc7e:	4b1b      	ldr	r3, [pc, #108]	; (1ccec <legacy_pairing_req+0x90>)
   1cc80:	681b      	ldr	r3, [r3, #0]
   1cc82:	b10b      	cbz	r3, 1cc88 <legacy_pairing_req+0x2c>
	    bt_auth && bt_auth->pairing_confirm) {
   1cc84:	695b      	ldr	r3, [r3, #20]
   1cc86:	b9eb      	cbnz	r3, 1ccc4 <legacy_pairing_req+0x68>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1cc88:	f3bf 8f5b 	dmb	ish
   1cc8c:	e854 3f00 	ldrex	r3, [r4]
   1cc90:	f043 0308 	orr.w	r3, r3, #8
   1cc94:	e844 3200 	strex	r2, r3, [r4]
   1cc98:	2a00      	cmp	r2, #0
   1cc9a:	d1f7      	bne.n	1cc8c <legacy_pairing_req+0x30>
   1cc9c:	f3bf 8f5b 	dmb	ish
   1cca0:	f3bf 8f5b 	dmb	ish
   1cca4:	e854 3f00 	ldrex	r3, [r4]
   1cca8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   1ccac:	e844 3200 	strex	r2, r3, [r4]
   1ccb0:	2a00      	cmp	r2, #0
   1ccb2:	d1f7      	bne.n	1cca4 <legacy_pairing_req+0x48>
   1ccb4:	f3bf 8f5b 	dmb	ish
	return send_pairing_rsp(smp);
   1ccb8:	4620      	mov	r0, r4
   1ccba:	f00a fbd8 	bl	2746e <send_pairing_rsp>
   1ccbe:	4605      	mov	r5, r0
}
   1ccc0:	4628      	mov	r0, r5
   1ccc2:	bd38      	pop	{r3, r4, r5, pc}
   1ccc4:	f3bf 8f5b 	dmb	ish
   1ccc8:	e852 3f00 	ldrex	r3, [r2]
   1cccc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1ccd0:	e842 3100 	strex	r1, r3, [r2]
   1ccd4:	2900      	cmp	r1, #0
   1ccd6:	d1f7      	bne.n	1ccc8 <legacy_pairing_req+0x6c>
   1ccd8:	f3bf 8f5b 	dmb	ish
		bt_auth->pairing_confirm(smp->chan.chan.conn);
   1ccdc:	4b03      	ldr	r3, [pc, #12]	; (1ccec <legacy_pairing_req+0x90>)
   1ccde:	681b      	ldr	r3, [r3, #0]
   1cce0:	695b      	ldr	r3, [r3, #20]
   1cce2:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1cce6:	4798      	blx	r3
		return 0;
   1cce8:	e7ea      	b.n	1ccc0 <legacy_pairing_req+0x64>
   1ccea:	bf00      	nop
   1ccec:	20002710 	.word	0x20002710

0001ccf0 <smp_pairing_req>:
{
   1ccf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   1ccf4:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
	struct bt_smp_pairing *req = (void *)buf->data;
   1ccf8:	688d      	ldr	r5, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1ccfa:	78eb      	ldrb	r3, [r5, #3]
   1ccfc:	3b07      	subs	r3, #7
   1ccfe:	b2db      	uxtb	r3, r3
   1cd00:	2b09      	cmp	r3, #9
   1cd02:	f200 80e9 	bhi.w	1ced8 <smp_pairing_req+0x1e8>
   1cd06:	4604      	mov	r4, r0
	if (!conn->le.keys) {
   1cd08:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
   1cd0c:	2b00      	cmp	r3, #0
   1cd0e:	f000 80be 	beq.w	1ce8e <smp_pairing_req+0x19e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1cd12:	f104 0804 	add.w	r8, r4, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1cd16:	f3bf 8f5b 	dmb	ish
   1cd1a:	6863      	ldr	r3, [r4, #4]
   1cd1c:	f3bf 8f5b 	dmb	ish
   1cd20:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   1cd24:	d105      	bne.n	1cd32 <smp_pairing_req+0x42>
		int ret = smp_init(smp);
   1cd26:	4620      	mov	r0, r4
   1cd28:	f7ff fc7e 	bl	1c628 <smp_init>
		if (ret) {
   1cd2c:	2800      	cmp	r0, #0
   1cd2e:	f040 80ba 	bne.w	1cea6 <smp_pairing_req+0x1b6>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1cd32:	2301      	movs	r3, #1
   1cd34:	7263      	strb	r3, [r4, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
   1cd36:	2206      	movs	r2, #6
   1cd38:	4629      	mov	r1, r5
   1cd3a:	f104 000a 	add.w	r0, r4, #10
   1cd3e:	f007 fe95 	bl	24a6c <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   1cd42:	2302      	movs	r3, #2
   1cd44:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(conn, req->auth_req);
   1cd46:	78a9      	ldrb	r1, [r5, #2]
   1cd48:	4630      	mov	r0, r6
   1cd4a:	f7fe fe95 	bl	1ba78 <get_auth>
   1cd4e:	4607      	mov	r7, r0
   1cd50:	74e0      	strb	r0, [r4, #19]
	rsp->io_capability = get_io_capa();
   1cd52:	f7fe fe3f 	bl	1b9d4 <get_io_capa>
   1cd56:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1cd58:	4b63      	ldr	r3, [pc, #396]	; (1cee8 <smp_pairing_req+0x1f8>)
   1cd5a:	781b      	ldrb	r3, [r3, #0]
   1cd5c:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   1cd5e:	2310      	movs	r3, #16
   1cd60:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   1cd62:	792b      	ldrb	r3, [r5, #4]
   1cd64:	f003 0303 	and.w	r3, r3, #3
   1cd68:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   1cd6a:	796b      	ldrb	r3, [r5, #5]
   1cd6c:	f003 0301 	and.w	r3, r3, #1
   1cd70:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1cd72:	f017 0f08 	tst.w	r7, #8
   1cd76:	d015      	beq.n	1cda4 <smp_pairing_req+0xb4>
	    (req->auth_req & BT_SMP_AUTH_SC)) {
   1cd78:	78ab      	ldrb	r3, [r5, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1cd7a:	f013 0f08 	tst.w	r3, #8
   1cd7e:	d011      	beq.n	1cda4 <smp_pairing_req+0xb4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1cd80:	f3bf 8f5b 	dmb	ish
   1cd84:	e858 3f00 	ldrex	r3, [r8]
   1cd88:	f043 0320 	orr.w	r3, r3, #32
   1cd8c:	e848 3200 	strex	r2, r3, [r8]
   1cd90:	2a00      	cmp	r2, #0
   1cd92:	d1f7      	bne.n	1cd84 <smp_pairing_req+0x94>
   1cd94:	f3bf 8f5b 	dmb	ish
		rsp->init_key_dist &= RECV_KEYS_SC;
   1cd98:	7d63      	ldrb	r3, [r4, #21]
   1cd9a:	f003 0302 	and.w	r3, r3, #2
   1cd9e:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   1cda0:	2300      	movs	r3, #0
   1cda2:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   1cda4:	7ce3      	ldrb	r3, [r4, #19]
   1cda6:	f013 0f20 	tst.w	r3, #32
   1cdaa:	d00f      	beq.n	1cdcc <smp_pairing_req+0xdc>
	    (req->auth_req & BT_SMP_AUTH_CT2)) {
   1cdac:	78ab      	ldrb	r3, [r5, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   1cdae:	f013 0f20 	tst.w	r3, #32
   1cdb2:	d00b      	beq.n	1cdcc <smp_pairing_req+0xdc>
   1cdb4:	f3bf 8f5b 	dmb	ish
   1cdb8:	e858 3f00 	ldrex	r3, [r8]
   1cdbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1cdc0:	e848 3200 	strex	r2, r3, [r8]
   1cdc4:	2a00      	cmp	r2, #0
   1cdc6:	d1f7      	bne.n	1cdb8 <smp_pairing_req+0xc8>
   1cdc8:	f3bf 8f5b 	dmb	ish
	smp->local_dist = rsp->resp_key_dist;
   1cdcc:	7da3      	ldrb	r3, [r4, #22]
   1cdce:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   1cdd2:	7d63      	ldrb	r3, [r4, #21]
   1cdd4:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   1cdd8:	7ce3      	ldrb	r3, [r4, #19]
   1cdda:	f013 0f01 	tst.w	r3, #1
   1cdde:	d07d      	beq.n	1cedc <smp_pairing_req+0x1ec>
	    (req->auth_req & BT_SMP_AUTH_BONDING)) {
   1cde0:	78ab      	ldrb	r3, [r5, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   1cde2:	f013 0f01 	tst.w	r3, #1
   1cde6:	d07b      	beq.n	1cee0 <smp_pairing_req+0x1f0>
   1cde8:	f3bf 8f5b 	dmb	ish
   1cdec:	e858 3f00 	ldrex	r3, [r8]
   1cdf0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1cdf4:	e848 3200 	strex	r2, r3, [r8]
   1cdf8:	2a00      	cmp	r2, #0
   1cdfa:	d1f7      	bne.n	1cdec <smp_pairing_req+0xfc>
   1cdfc:	f3bf 8f5b 	dmb	ish
   1ce00:	f3bf 8f5b 	dmb	ish
   1ce04:	e858 3f00 	ldrex	r3, [r8]
   1ce08:	f043 0308 	orr.w	r3, r3, #8
   1ce0c:	e848 3200 	strex	r2, r3, [r8]
   1ce10:	2a00      	cmp	r2, #0
   1ce12:	d1f7      	bne.n	1ce04 <smp_pairing_req+0x114>
   1ce14:	f3bf 8f5b 	dmb	ish
	smp->method = get_pair_method(smp, req->io_capability);
   1ce18:	7829      	ldrb	r1, [r5, #0]
   1ce1a:	4620      	mov	r0, r4
   1ce1c:	f7fe fecc 	bl	1bbb8 <get_pair_method>
   1ce20:	7220      	strb	r0, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   1ce22:	f8d6 10b4 	ldr.w	r1, [r6, #180]	; 0xb4
   1ce26:	4620      	mov	r0, r4
   1ce28:	f00a f95e 	bl	270e8 <update_keys_check>
   1ce2c:	2800      	cmp	r0, #0
   1ce2e:	d059      	beq.n	1cee4 <smp_pairing_req+0x1f4>
	err = remote_sec_level_reachable(smp);
   1ce30:	4620      	mov	r0, r4
   1ce32:	f00a f98a 	bl	2714a <remote_sec_level_reachable>
	if (err) {
   1ce36:	4605      	mov	r5, r0
   1ce38:	bb30      	cbnz	r0, 1ce88 <smp_pairing_req+0x198>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ce3a:	f3bf 8f5b 	dmb	ish
   1ce3e:	6863      	ldr	r3, [r4, #4]
   1ce40:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1ce44:	f013 0f20 	tst.w	r3, #32
   1ce48:	d02f      	beq.n	1ceaa <smp_pairing_req+0x1ba>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1ce4a:	7a25      	ldrb	r5, [r4, #8]
   1ce4c:	b965      	cbnz	r5, 1ce68 <smp_pairing_req+0x178>
   1ce4e:	f3bf 8f5b 	dmb	ish
   1ce52:	6863      	ldr	r3, [r4, #4]
   1ce54:	f3bf 8f5b 	dmb	ish
   1ce58:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   1ce5c:	d104      	bne.n	1ce68 <smp_pairing_req+0x178>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1ce5e:	4b23      	ldr	r3, [pc, #140]	; (1ceec <smp_pairing_req+0x1fc>)
   1ce60:	681b      	ldr	r3, [r3, #0]
   1ce62:	b10b      	cbz	r3, 1ce68 <smp_pairing_req+0x178>
	    bt_auth && bt_auth->pairing_confirm) {
   1ce64:	695b      	ldr	r3, [r3, #20]
   1ce66:	bb2b      	cbnz	r3, 1ceb4 <smp_pairing_req+0x1c4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ce68:	f3bf 8f5b 	dmb	ish
   1ce6c:	e854 3f00 	ldrex	r3, [r4]
   1ce70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   1ce74:	e844 3200 	strex	r2, r3, [r4]
   1ce78:	2a00      	cmp	r2, #0
   1ce7a:	d1f7      	bne.n	1ce6c <smp_pairing_req+0x17c>
   1ce7c:	f3bf 8f5b 	dmb	ish
	return send_pairing_rsp(smp);
   1ce80:	4620      	mov	r0, r4
   1ce82:	f00a faf4 	bl	2746e <send_pairing_rsp>
   1ce86:	4605      	mov	r5, r0
}
   1ce88:	4628      	mov	r0, r5
   1ce8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1ce8e:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1ce92:	7a30      	ldrb	r0, [r6, #8]
   1ce94:	f000 fcb8 	bl	1d808 <bt_keys_get_addr>
   1ce98:	f8c6 00b4 	str.w	r0, [r6, #180]	; 0xb4
		if (!conn->le.keys) {
   1ce9c:	2800      	cmp	r0, #0
   1ce9e:	f47f af38 	bne.w	1cd12 <smp_pairing_req+0x22>
			return BT_SMP_ERR_UNSPECIFIED;
   1cea2:	2508      	movs	r5, #8
   1cea4:	e7f0      	b.n	1ce88 <smp_pairing_req+0x198>
			return ret;
   1cea6:	b2c5      	uxtb	r5, r0
   1cea8:	e7ee      	b.n	1ce88 <smp_pairing_req+0x198>
		return legacy_pairing_req(smp);
   1ceaa:	4620      	mov	r0, r4
   1ceac:	f7ff fed6 	bl	1cc5c <legacy_pairing_req>
   1ceb0:	4605      	mov	r5, r0
   1ceb2:	e7e9      	b.n	1ce88 <smp_pairing_req+0x198>
   1ceb4:	f3bf 8f5b 	dmb	ish
   1ceb8:	e858 3f00 	ldrex	r3, [r8]
   1cebc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1cec0:	e848 3200 	strex	r2, r3, [r8]
   1cec4:	2a00      	cmp	r2, #0
   1cec6:	d1f7      	bne.n	1ceb8 <smp_pairing_req+0x1c8>
   1cec8:	f3bf 8f5b 	dmb	ish
		bt_auth->pairing_confirm(conn);
   1cecc:	4b07      	ldr	r3, [pc, #28]	; (1ceec <smp_pairing_req+0x1fc>)
   1cece:	681b      	ldr	r3, [r3, #0]
   1ced0:	695b      	ldr	r3, [r3, #20]
   1ced2:	4630      	mov	r0, r6
   1ced4:	4798      	blx	r3
		return 0;
   1ced6:	e7d7      	b.n	1ce88 <smp_pairing_req+0x198>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   1ced8:	2506      	movs	r5, #6
   1ceda:	e7d5      	b.n	1ce88 <smp_pairing_req+0x198>
		return BT_SMP_ERR_UNSPECIFIED;
   1cedc:	2508      	movs	r5, #8
   1cede:	e7d3      	b.n	1ce88 <smp_pairing_req+0x198>
   1cee0:	2508      	movs	r5, #8
   1cee2:	e7d1      	b.n	1ce88 <smp_pairing_req+0x198>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1cee4:	2503      	movs	r5, #3
   1cee6:	e7cf      	b.n	1ce88 <smp_pairing_req+0x198>
   1cee8:	2000398f 	.word	0x2000398f
   1ceec:	20002710 	.word	0x20002710

0001cef0 <smp_ident_info>:
{
   1cef0:	b570      	push	{r4, r5, r6, lr}
   1cef2:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1cef4:	f3bf 8f5b 	dmb	ish
   1cef8:	6843      	ldr	r3, [r0, #4]
   1cefa:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1cefe:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1cf02:	d00f      	beq.n	1cf24 <smp_ident_info+0x34>
		struct bt_smp_ident_info *req = (void *)buf->data;
   1cf04:	688e      	ldr	r6, [r1, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1cf06:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1cf0a:	f103 0588 	add.w	r5, r3, #136	; 0x88
   1cf0e:	462a      	mov	r2, r5
   1cf10:	7a19      	ldrb	r1, [r3, #8]
   1cf12:	2002      	movs	r0, #2
   1cf14:	f00b f8b3 	bl	2807e <bt_keys_get_type>
		if (!keys) {
   1cf18:	b190      	cbz	r0, 1cf40 <smp_ident_info+0x50>
		memcpy(keys->irk.val, req->irk, 16);
   1cf1a:	2210      	movs	r2, #16
   1cf1c:	4631      	mov	r1, r6
   1cf1e:	302a      	adds	r0, #42	; 0x2a
   1cf20:	f007 fda4 	bl	24a6c <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1cf24:	f3bf 8f5b 	dmb	ish
   1cf28:	e854 3f00 	ldrex	r3, [r4]
   1cf2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1cf30:	e844 3200 	strex	r2, r3, [r4]
   1cf34:	2a00      	cmp	r2, #0
   1cf36:	d1f7      	bne.n	1cf28 <smp_ident_info+0x38>
   1cf38:	f3bf 8f5b 	dmb	ish
	return 0;
   1cf3c:	2000      	movs	r0, #0
}
   1cf3e:	bd70      	pop	{r4, r5, r6, pc}
   1cf40:	4b0c      	ldr	r3, [pc, #48]	; (1cf74 <smp_ident_info+0x84>)
   1cf42:	4a0d      	ldr	r2, [pc, #52]	; (1cf78 <smp_ident_info+0x88>)
   1cf44:	1a9b      	subs	r3, r3, r2
   1cf46:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to get keys for %s",
   1cf48:	f04f 0400 	mov.w	r4, #0
   1cf4c:	2201      	movs	r2, #1
   1cf4e:	f362 0402 	bfi	r4, r2, #0, #3
   1cf52:	f36f 04c5 	bfc	r4, #3, #3
   1cf56:	f363 148f 	bfi	r4, r3, #6, #10
   1cf5a:	4628      	mov	r0, r5
   1cf5c:	f7f7 f99c 	bl	14298 <bt_addr_le_str_real>
   1cf60:	f7f3 ff5c 	bl	10e1c <z_log_strdup>
   1cf64:	4601      	mov	r1, r0
   1cf66:	4622      	mov	r2, r4
   1cf68:	4804      	ldr	r0, [pc, #16]	; (1cf7c <smp_ident_info+0x8c>)
   1cf6a:	f7f4 f8d1 	bl	11110 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
   1cf6e:	2008      	movs	r0, #8
   1cf70:	e7e5      	b.n	1cf3e <smp_ident_info+0x4e>
   1cf72:	bf00      	nop
   1cf74:	00029f44 	.word	0x00029f44
   1cf78:	00029ecc 	.word	0x00029ecc
   1cf7c:	0002cac0 	.word	0x0002cac0

0001cf80 <smp_encrypt_info>:
{
   1cf80:	b570      	push	{r4, r5, r6, lr}
   1cf82:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1cf84:	f3bf 8f5b 	dmb	ish
   1cf88:	6843      	ldr	r3, [r0, #4]
   1cf8a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1cf8e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1cf92:	d00f      	beq.n	1cfb4 <smp_encrypt_info+0x34>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   1cf94:	688e      	ldr	r6, [r1, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1cf96:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1cf9a:	f103 0588 	add.w	r5, r3, #136	; 0x88
   1cf9e:	462a      	mov	r2, r5
   1cfa0:	7a19      	ldrb	r1, [r3, #8]
   1cfa2:	2004      	movs	r0, #4
   1cfa4:	f00b f86b 	bl	2807e <bt_keys_get_type>
		if (!keys) {
   1cfa8:	b190      	cbz	r0, 1cfd0 <smp_encrypt_info+0x50>
		memcpy(keys->ltk.val, req->ltk, 16);
   1cfaa:	2210      	movs	r2, #16
   1cfac:	4631      	mov	r1, r6
   1cfae:	301a      	adds	r0, #26
   1cfb0:	f007 fd5c 	bl	24a6c <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1cfb4:	f3bf 8f5b 	dmb	ish
   1cfb8:	e854 3f00 	ldrex	r3, [r4]
   1cfbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1cfc0:	e844 3200 	strex	r2, r3, [r4]
   1cfc4:	2a00      	cmp	r2, #0
   1cfc6:	d1f7      	bne.n	1cfb8 <smp_encrypt_info+0x38>
   1cfc8:	f3bf 8f5b 	dmb	ish
	return 0;
   1cfcc:	2000      	movs	r0, #0
}
   1cfce:	bd70      	pop	{r4, r5, r6, pc}
   1cfd0:	4b0c      	ldr	r3, [pc, #48]	; (1d004 <smp_encrypt_info+0x84>)
   1cfd2:	4a0d      	ldr	r2, [pc, #52]	; (1d008 <smp_encrypt_info+0x88>)
   1cfd4:	1a9b      	subs	r3, r3, r2
   1cfd6:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to get keys for %s",
   1cfd8:	f04f 0400 	mov.w	r4, #0
   1cfdc:	2201      	movs	r2, #1
   1cfde:	f362 0402 	bfi	r4, r2, #0, #3
   1cfe2:	f36f 04c5 	bfc	r4, #3, #3
   1cfe6:	f363 148f 	bfi	r4, r3, #6, #10
   1cfea:	4628      	mov	r0, r5
   1cfec:	f7f7 f954 	bl	14298 <bt_addr_le_str_real>
   1cff0:	f7f3 ff14 	bl	10e1c <z_log_strdup>
   1cff4:	4601      	mov	r1, r0
   1cff6:	4622      	mov	r2, r4
   1cff8:	4804      	ldr	r0, [pc, #16]	; (1d00c <smp_encrypt_info+0x8c>)
   1cffa:	f7f4 f889 	bl	11110 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
   1cffe:	2008      	movs	r0, #8
   1d000:	e7e5      	b.n	1cfce <smp_encrypt_info+0x4e>
   1d002:	bf00      	nop
   1d004:	00029f44 	.word	0x00029f44
   1d008:	00029ecc 	.word	0x00029ecc
   1d00c:	0002cac0 	.word	0x0002cac0

0001d010 <bt_smp_connected>:
{
   1d010:	b510      	push	{r4, lr}
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   1d012:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
	k_work_init_delayable(&smp->work, smp_timeout);
   1d016:	4904      	ldr	r1, [pc, #16]	; (1d028 <bt_smp_connected+0x18>)
   1d018:	30e8      	adds	r0, #232	; 0xe8
   1d01a:	f00c fa44 	bl	294a6 <k_work_init_delayable>
	smp_reset(smp);
   1d01e:	4620      	mov	r0, r4
   1d020:	f00a f8bd 	bl	2719e <smp_reset>
}
   1d024:	bd10      	pop	{r4, pc}
   1d026:	bf00      	nop
   1d028:	0001d64d 	.word	0x0001d64d

0001d02c <smp_pairing_complete>:
{
   1d02c:	b570      	push	{r4, r5, r6, lr}
   1d02e:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1d030:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
	if (!status) {
   1d034:	b379      	cbz	r1, 1d096 <smp_pairing_complete+0x6a>
   1d036:	4608      	mov	r0, r1
		enum bt_security_err security_err = security_err_get(status);
   1d038:	f009 ff83 	bl	26f42 <security_err_get>
   1d03c:	4605      	mov	r5, r0
		if (conn->le.keys &&
   1d03e:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
   1d042:	b183      	cbz	r3, 1d066 <smp_pairing_complete+0x3a>
		    (!conn->le.keys->enc_size ||
   1d044:	7b1b      	ldrb	r3, [r3, #12]
		if (conn->le.keys &&
   1d046:	b13b      	cbz	r3, 1d058 <smp_pairing_complete+0x2c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d048:	f3bf 8f5b 	dmb	ish
   1d04c:	6863      	ldr	r3, [r4, #4]
   1d04e:	f3bf 8f5b 	dmb	ish
		    (!conn->le.keys->enc_size ||
   1d052:	f013 0f04 	tst.w	r3, #4
   1d056:	d006      	beq.n	1d066 <smp_pairing_complete+0x3a>
			bt_keys_clear(conn->le.keys);
   1d058:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
   1d05c:	f000 fd1a 	bl	1da94 <bt_keys_clear>
			conn->le.keys = NULL;
   1d060:	2300      	movs	r3, #0
   1d062:	f8c6 30b4 	str.w	r3, [r6, #180]	; 0xb4
   1d066:	f3bf 8f5b 	dmb	ish
   1d06a:	6863      	ldr	r3, [r4, #4]
   1d06c:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1d070:	f013 0f04 	tst.w	r3, #4
   1d074:	d029      	beq.n	1d0ca <smp_pairing_complete+0x9e>
		if (bt_auth && bt_auth->pairing_failed) {
   1d076:	4b1b      	ldr	r3, [pc, #108]	; (1d0e4 <smp_pairing_complete+0xb8>)
   1d078:	681b      	ldr	r3, [r3, #0]
   1d07a:	b123      	cbz	r3, 1d086 <smp_pairing_complete+0x5a>
   1d07c:	69db      	ldr	r3, [r3, #28]
   1d07e:	b113      	cbz	r3, 1d086 <smp_pairing_complete+0x5a>
			bt_auth->pairing_failed(conn, security_err);
   1d080:	4629      	mov	r1, r5
   1d082:	4630      	mov	r0, r6
   1d084:	4798      	blx	r3
	smp_reset(smp);
   1d086:	4620      	mov	r0, r4
   1d088:	f00a f889 	bl	2719e <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   1d08c:	7a72      	ldrb	r2, [r6, #9]
   1d08e:	7ab3      	ldrb	r3, [r6, #10]
   1d090:	429a      	cmp	r2, r3
   1d092:	d123      	bne.n	1d0dc <smp_pairing_complete+0xb0>
}
   1d094:	bd70      	pop	{r4, r5, r6, pc}
   1d096:	f3bf 8f5b 	dmb	ish
   1d09a:	6845      	ldr	r5, [r0, #4]
   1d09c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1d0a0:	f415 5f00 	tst.w	r5, #8192	; 0x2000
   1d0a4:	f3c5 3540 	ubfx	r5, r5, #13, #1
		if (bond_flag) {
   1d0a8:	d10a      	bne.n	1d0c0 <smp_pairing_complete+0x94>
		if (bt_auth && bt_auth->pairing_complete) {
   1d0aa:	4b0e      	ldr	r3, [pc, #56]	; (1d0e4 <smp_pairing_complete+0xb8>)
   1d0ac:	681b      	ldr	r3, [r3, #0]
   1d0ae:	2b00      	cmp	r3, #0
   1d0b0:	d0e9      	beq.n	1d086 <smp_pairing_complete+0x5a>
   1d0b2:	699b      	ldr	r3, [r3, #24]
   1d0b4:	2b00      	cmp	r3, #0
   1d0b6:	d0e6      	beq.n	1d086 <smp_pairing_complete+0x5a>
			bt_auth->pairing_complete(conn, bond_flag);
   1d0b8:	4629      	mov	r1, r5
   1d0ba:	4630      	mov	r0, r6
   1d0bc:	4798      	blx	r3
   1d0be:	e7e2      	b.n	1d086 <smp_pairing_complete+0x5a>
			bt_keys_store(conn->le.keys);
   1d0c0:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
   1d0c4:	f000 fde8 	bl	1dc98 <bt_keys_store>
   1d0c8:	e7ef      	b.n	1d0aa <smp_pairing_complete+0x7e>
			bt_conn_security_changed(conn,
   1d0ca:	4628      	mov	r0, r5
   1d0cc:	f009 ff6d 	bl	26faa <hci_err_get>
   1d0d0:	4601      	mov	r1, r0
   1d0d2:	462a      	mov	r2, r5
   1d0d4:	4630      	mov	r0, r6
   1d0d6:	f7fb f8f5 	bl	182c4 <bt_conn_security_changed>
   1d0da:	e7cc      	b.n	1d076 <smp_pairing_complete+0x4a>
		bt_smp_start_security(conn);
   1d0dc:	4630      	mov	r0, r6
   1d0de:	f00a fd42 	bl	27b66 <bt_smp_start_security>
}
   1d0e2:	e7d7      	b.n	1d094 <smp_pairing_complete+0x68>
   1d0e4:	20002710 	.word	0x20002710

0001d0e8 <bt_smp_recv>:
{
   1d0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   1d0ea:	898b      	ldrh	r3, [r1, #12]
   1d0ec:	2b00      	cmp	r3, #0
   1d0ee:	d046      	beq.n	1d17e <bt_smp_recv+0x96>
   1d0f0:	4604      	mov	r4, r0
   1d0f2:	460d      	mov	r5, r1
   1d0f4:	f1a0 06f0 	sub.w	r6, r0, #240	; 0xf0
	return net_buf_simple_pull_mem(&buf->b, len);
   1d0f8:	2101      	movs	r1, #1
   1d0fa:	f105 0008 	add.w	r0, r5, #8
   1d0fe:	f00b f940 	bl	28382 <net_buf_simple_pull_mem>
   1d102:	4607      	mov	r7, r0
   1d104:	f3bf 8f5b 	dmb	ish
   1d108:	f854 3cec 	ldr.w	r3, [r4, #-236]
   1d10c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1d110:	f013 0f10 	tst.w	r3, #16
   1d114:	d145      	bne.n	1d1a2 <bt_smp_recv+0xba>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   1d116:	7801      	ldrb	r1, [r0, #0]
   1d118:	290e      	cmp	r1, #14
   1d11a:	d854      	bhi.n	1d1c6 <bt_smp_recv+0xde>
	if (!handlers[hdr->code].func) {
   1d11c:	4b54      	ldr	r3, [pc, #336]	; (1d270 <bt_smp_recv+0x188>)
   1d11e:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   1d122:	2b00      	cmp	r3, #0
   1d124:	d060      	beq.n	1d1e8 <bt_smp_recv+0x100>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   1d126:	3cf0      	subs	r4, #240	; 0xf0
	atomic_val_t mask = ATOMIC_MASK(bit);
   1d128:	f001 031f 	and.w	r3, r1, #31
   1d12c:	2201      	movs	r2, #1
   1d12e:	409a      	lsls	r2, r3
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1d130:	094b      	lsrs	r3, r1, #5
   1d132:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   1d136:	43d1      	mvns	r1, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d138:	f3bf 8f5b 	dmb	ish
   1d13c:	e854 3f00 	ldrex	r3, [r4]
   1d140:	ea03 0001 	and.w	r0, r3, r1
   1d144:	e844 0c00 	strex	ip, r0, [r4]
   1d148:	f1bc 0f00 	cmp.w	ip, #0
   1d14c:	d1f6      	bne.n	1d13c <bt_smp_recv+0x54>
   1d14e:	f3bf 8f5b 	dmb	ish
   1d152:	421a      	tst	r2, r3
   1d154:	d05d      	beq.n	1d212 <bt_smp_recv+0x12a>
	if (buf->len != handlers[hdr->code].expect_len) {
   1d156:	89a9      	ldrh	r1, [r5, #12]
   1d158:	783a      	ldrb	r2, [r7, #0]
   1d15a:	4b45      	ldr	r3, [pc, #276]	; (1d270 <bt_smp_recv+0x188>)
   1d15c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1d160:	791b      	ldrb	r3, [r3, #4]
   1d162:	4299      	cmp	r1, r3
   1d164:	d16e      	bne.n	1d244 <bt_smp_recv+0x15c>
	err = handlers[hdr->code].func(smp, buf);
   1d166:	4b42      	ldr	r3, [pc, #264]	; (1d270 <bt_smp_recv+0x188>)
   1d168:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
   1d16c:	4629      	mov	r1, r5
   1d16e:	4630      	mov	r0, r6
   1d170:	4798      	blx	r3
	if (err) {
   1d172:	4601      	mov	r1, r0
   1d174:	b198      	cbz	r0, 1d19e <bt_smp_recv+0xb6>
		smp_error(smp, err);
   1d176:	4630      	mov	r0, r6
   1d178:	f00a fcff 	bl	27b7a <smp_error>
   1d17c:	e00f      	b.n	1d19e <bt_smp_recv+0xb6>
   1d17e:	4b3d      	ldr	r3, [pc, #244]	; (1d274 <bt_smp_recv+0x18c>)
   1d180:	4a3d      	ldr	r2, [pc, #244]	; (1d278 <bt_smp_recv+0x190>)
   1d182:	1a9b      	subs	r3, r3, r2
   1d184:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small SMP PDU received");
   1d186:	f04f 0100 	mov.w	r1, #0
   1d18a:	2201      	movs	r2, #1
   1d18c:	f362 0102 	bfi	r1, r2, #0, #3
   1d190:	f36f 01c5 	bfc	r1, #3, #3
   1d194:	f363 118f 	bfi	r1, r3, #6, #10
   1d198:	4838      	ldr	r0, [pc, #224]	; (1d27c <bt_smp_recv+0x194>)
   1d19a:	f7f4 f86f 	bl	1127c <log_0>
}
   1d19e:	2000      	movs	r0, #0
   1d1a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d1a2:	4b34      	ldr	r3, [pc, #208]	; (1d274 <bt_smp_recv+0x18c>)
   1d1a4:	4a34      	ldr	r2, [pc, #208]	; (1d278 <bt_smp_recv+0x190>)
   1d1a6:	1a9b      	subs	r3, r3, r2
   1d1a8:	08db      	lsrs	r3, r3, #3
		BT_WARN("SMP command (code 0x%02x) received after timeout",
   1d1aa:	f04f 0200 	mov.w	r2, #0
   1d1ae:	2102      	movs	r1, #2
   1d1b0:	f361 0202 	bfi	r2, r1, #0, #3
   1d1b4:	f36f 02c5 	bfc	r2, #3, #3
   1d1b8:	f363 128f 	bfi	r2, r3, #6, #10
   1d1bc:	7801      	ldrb	r1, [r0, #0]
   1d1be:	4830      	ldr	r0, [pc, #192]	; (1d280 <bt_smp_recv+0x198>)
   1d1c0:	f7f3 ffa6 	bl	11110 <log_1>
		return 0;
   1d1c4:	e7eb      	b.n	1d19e <bt_smp_recv+0xb6>
   1d1c6:	4b2b      	ldr	r3, [pc, #172]	; (1d274 <bt_smp_recv+0x18c>)
   1d1c8:	4a2b      	ldr	r2, [pc, #172]	; (1d278 <bt_smp_recv+0x190>)
   1d1ca:	1a9b      	subs	r3, r3, r2
   1d1cc:	08db      	lsrs	r3, r3, #3
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   1d1ce:	f04f 0200 	mov.w	r2, #0
   1d1d2:	2002      	movs	r0, #2
   1d1d4:	f360 0202 	bfi	r2, r0, #0, #3
   1d1d8:	f36f 02c5 	bfc	r2, #3, #3
   1d1dc:	f363 128f 	bfi	r2, r3, #6, #10
   1d1e0:	4828      	ldr	r0, [pc, #160]	; (1d284 <bt_smp_recv+0x19c>)
   1d1e2:	f7f3 ff95 	bl	11110 <log_1>
		return 0;
   1d1e6:	e7da      	b.n	1d19e <bt_smp_recv+0xb6>
   1d1e8:	4b22      	ldr	r3, [pc, #136]	; (1d274 <bt_smp_recv+0x18c>)
   1d1ea:	4a23      	ldr	r2, [pc, #140]	; (1d278 <bt_smp_recv+0x190>)
   1d1ec:	1a9b      	subs	r3, r3, r2
   1d1ee:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
   1d1f0:	f04f 0200 	mov.w	r2, #0
   1d1f4:	2002      	movs	r0, #2
   1d1f6:	f360 0202 	bfi	r2, r0, #0, #3
   1d1fa:	f36f 02c5 	bfc	r2, #3, #3
   1d1fe:	f363 128f 	bfi	r2, r3, #6, #10
   1d202:	4821      	ldr	r0, [pc, #132]	; (1d288 <bt_smp_recv+0x1a0>)
   1d204:	f7f3 ff84 	bl	11110 <log_1>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   1d208:	2107      	movs	r1, #7
   1d20a:	4630      	mov	r0, r6
   1d20c:	f00a fcb5 	bl	27b7a <smp_error>
		return 0;
   1d210:	e7c5      	b.n	1d19e <bt_smp_recv+0xb6>
   1d212:	4b18      	ldr	r3, [pc, #96]	; (1d274 <bt_smp_recv+0x18c>)
   1d214:	4a18      	ldr	r2, [pc, #96]	; (1d278 <bt_smp_recv+0x190>)
   1d216:	1a9b      	subs	r3, r3, r2
   1d218:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
   1d21a:	f04f 0200 	mov.w	r2, #0
   1d21e:	2102      	movs	r1, #2
   1d220:	f361 0202 	bfi	r2, r1, #0, #3
   1d224:	f36f 02c5 	bfc	r2, #3, #3
   1d228:	f363 128f 	bfi	r2, r3, #6, #10
   1d22c:	7839      	ldrb	r1, [r7, #0]
   1d22e:	4817      	ldr	r0, [pc, #92]	; (1d28c <bt_smp_recv+0x1a4>)
   1d230:	f7f3 ff6e 	bl	11110 <log_1>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   1d234:	783b      	ldrb	r3, [r7, #0]
   1d236:	2b05      	cmp	r3, #5
   1d238:	d0b1      	beq.n	1d19e <bt_smp_recv+0xb6>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1d23a:	2108      	movs	r1, #8
   1d23c:	4630      	mov	r0, r6
   1d23e:	f00a fc9c 	bl	27b7a <smp_error>
		return 0;
   1d242:	e7ac      	b.n	1d19e <bt_smp_recv+0xb6>
   1d244:	480b      	ldr	r0, [pc, #44]	; (1d274 <bt_smp_recv+0x18c>)
   1d246:	4b0c      	ldr	r3, [pc, #48]	; (1d278 <bt_smp_recv+0x190>)
   1d248:	1ac0      	subs	r0, r0, r3
   1d24a:	08c0      	lsrs	r0, r0, #3
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1d24c:	f04f 0300 	mov.w	r3, #0
   1d250:	2401      	movs	r4, #1
   1d252:	f364 0302 	bfi	r3, r4, #0, #3
   1d256:	f36f 03c5 	bfc	r3, #3, #3
   1d25a:	f360 138f 	bfi	r3, r0, #6, #10
   1d25e:	480c      	ldr	r0, [pc, #48]	; (1d290 <bt_smp_recv+0x1a8>)
   1d260:	f7f3 ff8c 	bl	1117c <log_2>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   1d264:	210a      	movs	r1, #10
   1d266:	4630      	mov	r0, r6
   1d268:	f00a fc87 	bl	27b7a <smp_error>
		return 0;
   1d26c:	e797      	b.n	1d19e <bt_smp_recv+0xb6>
   1d26e:	bf00      	nop
   1d270:	0002cc18 	.word	0x0002cc18
   1d274:	00029f44 	.word	0x00029f44
   1d278:	00029ecc 	.word	0x00029ecc
   1d27c:	0002cadc 	.word	0x0002cadc
   1d280:	0002caf8 	.word	0x0002caf8
   1d284:	0002cb2c 	.word	0x0002cb2c
   1d288:	0002cb50 	.word	0x0002cb50
   1d28c:	0002cb6c 	.word	0x0002cb6c
   1d290:	0002c3f0 	.word	0x0002c3f0

0001d294 <bt_smp_pkey_ready>:
{
   1d294:	b538      	push	{r3, r4, r5, lr}
	sc_public_key = pkey;
   1d296:	4b19      	ldr	r3, [pc, #100]	; (1d2fc <bt_smp_pkey_ready+0x68>)
   1d298:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   1d29a:	b120      	cbz	r0, 1d2a6 <bt_smp_pkey_ready+0x12>
	z_impl_k_sem_give(sem);
   1d29c:	4818      	ldr	r0, [pc, #96]	; (1d300 <bt_smp_pkey_ready+0x6c>)
   1d29e:	f002 fd4b 	bl	1fd38 <z_impl_k_sem_give>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1d2a2:	2400      	movs	r4, #0
   1d2a4:	e011      	b.n	1d2ca <bt_smp_pkey_ready+0x36>
   1d2a6:	4b17      	ldr	r3, [pc, #92]	; (1d304 <bt_smp_pkey_ready+0x70>)
   1d2a8:	4a17      	ldr	r2, [pc, #92]	; (1d308 <bt_smp_pkey_ready+0x74>)
   1d2aa:	1a9b      	subs	r3, r3, r2
   1d2ac:	08db      	lsrs	r3, r3, #3
		BT_WARN("Public key not available");
   1d2ae:	f04f 0100 	mov.w	r1, #0
   1d2b2:	2202      	movs	r2, #2
   1d2b4:	f362 0102 	bfi	r1, r2, #0, #3
   1d2b8:	f36f 01c5 	bfc	r1, #3, #3
   1d2bc:	f363 118f 	bfi	r1, r3, #6, #10
   1d2c0:	4812      	ldr	r0, [pc, #72]	; (1d30c <bt_smp_pkey_ready+0x78>)
   1d2c2:	f7f3 ffdb 	bl	1127c <log_0>
}
   1d2c6:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1d2c8:	3401      	adds	r4, #1
   1d2ca:	2c01      	cmp	r4, #1
   1d2cc:	dcfb      	bgt.n	1d2c6 <bt_smp_pkey_ready+0x32>
		struct bt_smp *smp = &bt_smp_pool[i];
   1d2ce:	eb04 1584 	add.w	r5, r4, r4, lsl #6
   1d2d2:	4b0f      	ldr	r3, [pc, #60]	; (1d310 <bt_smp_pkey_ready+0x7c>)
   1d2d4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d2d8:	f3bf 8f5b 	dmb	ish
   1d2dc:	686b      	ldr	r3, [r5, #4]
   1d2de:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   1d2e2:	f013 0f40 	tst.w	r3, #64	; 0x40
   1d2e6:	d0ef      	beq.n	1d2c8 <bt_smp_pkey_ready+0x34>
		err = smp_public_key_slave(smp);
   1d2e8:	4628      	mov	r0, r5
   1d2ea:	f7ff fae1 	bl	1c8b0 <smp_public_key_slave>
		if (err) {
   1d2ee:	4601      	mov	r1, r0
   1d2f0:	2800      	cmp	r0, #0
   1d2f2:	d0e9      	beq.n	1d2c8 <bt_smp_pkey_ready+0x34>
			smp_error(smp, err);
   1d2f4:	4628      	mov	r0, r5
   1d2f6:	f00a fc40 	bl	27b7a <smp_error>
   1d2fa:	e7e5      	b.n	1d2c8 <bt_smp_pkey_ready+0x34>
   1d2fc:	200027f0 	.word	0x200027f0
   1d300:	200007a4 	.word	0x200007a4
   1d304:	00029f44 	.word	0x00029f44
   1d308:	00029ecc 	.word	0x00029ecc
   1d30c:	0002cb88 	.word	0x0002cb88
   1d310:	20001c18 	.word	0x20001c18

0001d314 <smp_ident_addr_info>:
{
   1d314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d318:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1d31a:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   1d31e:	688d      	ldr	r5, [r1, #8]
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1d320:	782b      	ldrb	r3, [r5, #0]
   1d322:	b123      	cbz	r3, 1d32e <smp_ident_addr_info+0x1a>
	return BT_ADDR_IS_STATIC(&addr->a);
   1d324:	79ab      	ldrb	r3, [r5, #6]
   1d326:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	if (!bt_addr_le_is_identity(&req->addr)) {
   1d32a:	2bc0      	cmp	r3, #192	; 0xc0
   1d32c:	d13c      	bne.n	1d3a8 <smp_ident_addr_info+0x94>
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
   1d32e:	f106 0788 	add.w	r7, r6, #136	; 0x88
	return memcmp(a, b, sizeof(*a));
   1d332:	2207      	movs	r2, #7
   1d334:	4629      	mov	r1, r5
   1d336:	4638      	mov	r0, r7
   1d338:	f007 fb81 	bl	24a3e <memcmp>
   1d33c:	b178      	cbz	r0, 1d35e <smp_ident_addr_info+0x4a>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   1d33e:	4629      	mov	r1, r5
   1d340:	7a30      	ldrb	r0, [r6, #8]
   1d342:	f000 fb85 	bl	1da50 <bt_keys_find_addr>
		if (keys) {
   1d346:	4680      	mov	r8, r0
   1d348:	b148      	cbz	r0, 1d35e <smp_ident_addr_info+0x4a>
			if (!update_keys_check(smp, keys)) {
   1d34a:	4601      	mov	r1, r0
   1d34c:	4620      	mov	r0, r4
   1d34e:	f009 fecb 	bl	270e8 <update_keys_check>
   1d352:	2800      	cmp	r0, #0
   1d354:	f000 80ad 	beq.w	1d4b2 <smp_ident_addr_info+0x19e>
			bt_keys_clear(keys);
   1d358:	4640      	mov	r0, r8
   1d35a:	f000 fb9b 	bl	1da94 <bt_keys_clear>
   1d35e:	f3bf 8f5b 	dmb	ish
   1d362:	6863      	ldr	r3, [r4, #4]
   1d364:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1d368:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1d36c:	d149      	bne.n	1d402 <smp_ident_addr_info+0xee>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1d36e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1d372:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   1d376:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1d37a:	f013 0f04 	tst.w	r3, #4
   1d37e:	d00b      	beq.n	1d398 <smp_ident_addr_info+0x84>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d380:	f3bf 8f5b 	dmb	ish
   1d384:	e854 3f00 	ldrex	r3, [r4]
   1d388:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1d38c:	e844 3200 	strex	r2, r3, [r4]
   1d390:	2a00      	cmp	r2, #0
   1d392:	d1f7      	bne.n	1d384 <smp_ident_addr_info+0x70>
   1d394:	f3bf 8f5b 	dmb	ish
	if (!smp->local_dist && !smp->remote_dist) {
   1d398:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
   1d39c:	2b00      	cmp	r3, #0
   1d39e:	f000 8082 	beq.w	1d4a6 <smp_ident_addr_info+0x192>
	return 0;
   1d3a2:	2000      	movs	r0, #0
}
   1d3a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d3a8:	4c43      	ldr	r4, [pc, #268]	; (1d4b8 <smp_ident_addr_info+0x1a4>)
   1d3aa:	4b44      	ldr	r3, [pc, #272]	; (1d4bc <smp_ident_addr_info+0x1a8>)
   1d3ac:	1ae4      	subs	r4, r4, r3
   1d3ae:	08e4      	lsrs	r4, r4, #3
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   1d3b0:	f04f 0801 	mov.w	r8, #1
   1d3b4:	f04f 0700 	mov.w	r7, #0
   1d3b8:	f368 0702 	bfi	r7, r8, #0, #3
   1d3bc:	f36f 07c5 	bfc	r7, #3, #3
   1d3c0:	f364 178f 	bfi	r7, r4, #6, #10
   1d3c4:	4628      	mov	r0, r5
   1d3c6:	f7f6 ff67 	bl	14298 <bt_addr_le_str_real>
   1d3ca:	f7f3 fd27 	bl	10e1c <z_log_strdup>
   1d3ce:	4601      	mov	r1, r0
   1d3d0:	463a      	mov	r2, r7
   1d3d2:	483b      	ldr	r0, [pc, #236]	; (1d4c0 <smp_ident_addr_info+0x1ac>)
   1d3d4:	f7f3 fe9c 	bl	11110 <log_1>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1d3d8:	f04f 0500 	mov.w	r5, #0
   1d3dc:	f368 0502 	bfi	r5, r8, #0, #3
   1d3e0:	f36f 05c5 	bfc	r5, #3, #3
   1d3e4:	f364 158f 	bfi	r5, r4, #6, #10
   1d3e8:	f106 0088 	add.w	r0, r6, #136	; 0x88
   1d3ec:	f7f6 ff54 	bl	14298 <bt_addr_le_str_real>
   1d3f0:	f7f3 fd14 	bl	10e1c <z_log_strdup>
   1d3f4:	4601      	mov	r1, r0
   1d3f6:	462a      	mov	r2, r5
   1d3f8:	4832      	ldr	r0, [pc, #200]	; (1d4c4 <smp_ident_addr_info+0x1b0>)
   1d3fa:	f7f3 fe89 	bl	11110 <log_1>
		return BT_SMP_ERR_INVALID_PARAMS;
   1d3fe:	200a      	movs	r0, #10
   1d400:	e7d0      	b.n	1d3a4 <smp_ident_addr_info+0x90>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1d402:	463a      	mov	r2, r7
   1d404:	7a31      	ldrb	r1, [r6, #8]
   1d406:	2002      	movs	r0, #2
   1d408:	f00a fe39 	bl	2807e <bt_keys_get_type>
		if (!keys) {
   1d40c:	4680      	mov	r8, r0
   1d40e:	b178      	cbz	r0, 1d430 <smp_ident_addr_info+0x11c>
		if (conn->role == BT_HCI_ROLE_MASTER) {
   1d410:	78f3      	ldrb	r3, [r6, #3]
   1d412:	bb33      	cbnz	r3, 1d462 <smp_ident_addr_info+0x14e>
			dst = &conn->le.resp_addr;
   1d414:	f106 0196 	add.w	r1, r6, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1d418:	780b      	ldrb	r3, [r1, #0]
   1d41a:	2b01      	cmp	r3, #1
   1d41c:	d104      	bne.n	1d428 <smp_ident_addr_info+0x114>
	return BT_ADDR_IS_RPA(&addr->a);
   1d41e:	798b      	ldrb	r3, [r1, #6]
   1d420:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
		if (bt_addr_le_is_rpa(dst)) {
   1d424:	2b40      	cmp	r3, #64	; 0x40
   1d426:	d01f      	beq.n	1d468 <smp_ident_addr_info+0x154>
		bt_id_add(keys);
   1d428:	4640      	mov	r0, r8
   1d42a:	f7f9 fdcb 	bl	16fc4 <bt_id_add>
   1d42e:	e79e      	b.n	1d36e <smp_ident_addr_info+0x5a>
   1d430:	4b21      	ldr	r3, [pc, #132]	; (1d4b8 <smp_ident_addr_info+0x1a4>)
   1d432:	4a22      	ldr	r2, [pc, #136]	; (1d4bc <smp_ident_addr_info+0x1a8>)
   1d434:	1a9b      	subs	r3, r3, r2
   1d436:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to get keys for %s",
   1d438:	f04f 0400 	mov.w	r4, #0
   1d43c:	2201      	movs	r2, #1
   1d43e:	f362 0402 	bfi	r4, r2, #0, #3
   1d442:	f36f 04c5 	bfc	r4, #3, #3
   1d446:	f363 148f 	bfi	r4, r3, #6, #10
   1d44a:	4638      	mov	r0, r7
   1d44c:	f7f6 ff24 	bl	14298 <bt_addr_le_str_real>
   1d450:	f7f3 fce4 	bl	10e1c <z_log_strdup>
   1d454:	4601      	mov	r1, r0
   1d456:	4622      	mov	r2, r4
   1d458:	481b      	ldr	r0, [pc, #108]	; (1d4c8 <smp_ident_addr_info+0x1b4>)
   1d45a:	f7f3 fe59 	bl	11110 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
   1d45e:	2008      	movs	r0, #8
   1d460:	e7a0      	b.n	1d3a4 <smp_ident_addr_info+0x90>
			dst = &conn->le.init_addr;
   1d462:	f106 018f 	add.w	r1, r6, #143	; 0x8f
   1d466:	e7d7      	b.n	1d418 <smp_ident_addr_info+0x104>
	memcpy(dst, src, sizeof(*dst));
   1d468:	2206      	movs	r2, #6
   1d46a:	3101      	adds	r1, #1
   1d46c:	f108 003a 	add.w	r0, r8, #58	; 0x3a
   1d470:	f007 fafc 	bl	24a6c <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1d474:	f896 3088 	ldrb.w	r3, [r6, #136]	; 0x88
   1d478:	2b00      	cmp	r3, #0
   1d47a:	d0d5      	beq.n	1d428 <smp_ident_addr_info+0x114>
	return BT_ADDR_IS_STATIC(&addr->a);
   1d47c:	f896 308e 	ldrb.w	r3, [r6, #142]	; 0x8e
   1d480:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   1d484:	2bc0      	cmp	r3, #192	; 0xc0
   1d486:	d0cf      	beq.n	1d428 <smp_ident_addr_info+0x114>
	memcpy(dst, src, sizeof(*dst));
   1d488:	2207      	movs	r2, #7
   1d48a:	4629      	mov	r1, r5
   1d48c:	f108 0001 	add.w	r0, r8, #1
   1d490:	f007 faec 	bl	24a6c <memcpy>
   1d494:	2207      	movs	r2, #7
   1d496:	4629      	mov	r1, r5
   1d498:	4638      	mov	r0, r7
   1d49a:	f007 fae7 	bl	24a6c <memcpy>
				bt_conn_identity_resolved(conn);
   1d49e:	4630      	mov	r0, r6
   1d4a0:	f7fa fef6 	bl	18290 <bt_conn_identity_resolved>
   1d4a4:	e7c0      	b.n	1d428 <smp_ident_addr_info+0x114>
		smp_pairing_complete(smp, 0);
   1d4a6:	2100      	movs	r1, #0
   1d4a8:	4620      	mov	r0, r4
   1d4aa:	f7ff fdbf 	bl	1d02c <smp_pairing_complete>
	return 0;
   1d4ae:	2000      	movs	r0, #0
   1d4b0:	e778      	b.n	1d3a4 <smp_ident_addr_info+0x90>
				return BT_SMP_ERR_UNSPECIFIED;
   1d4b2:	2008      	movs	r0, #8
   1d4b4:	e776      	b.n	1d3a4 <smp_ident_addr_info+0x90>
   1d4b6:	bf00      	nop
   1d4b8:	00029f44 	.word	0x00029f44
   1d4bc:	00029ecc 	.word	0x00029ecc
   1d4c0:	0002cba4 	.word	0x0002cba4
   1d4c4:	0002cbb8 	.word	0x0002cbb8
   1d4c8:	0002cac0 	.word	0x0002cac0

0001d4cc <smp_master_ident>:
{
   1d4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d4ce:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1d4d0:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d4d4:	f3bf 8f5b 	dmb	ish
   1d4d8:	6863      	ldr	r3, [r4, #4]
   1d4da:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1d4de:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1d4e2:	d114      	bne.n	1d50e <smp_master_ident+0x42>
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1d4e4:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1d4e8:	f013 0f02 	tst.w	r3, #2
   1d4ec:	d144      	bne.n	1d578 <smp_master_ident+0xac>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1d4ee:	f013 0f04 	tst.w	r3, #4
   1d4f2:	d04d      	beq.n	1d590 <smp_master_ident+0xc4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d4f4:	f3bf 8f5b 	dmb	ish
   1d4f8:	e854 3f00 	ldrex	r3, [r4]
   1d4fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1d500:	e844 3200 	strex	r2, r3, [r4]
   1d504:	2a00      	cmp	r2, #0
   1d506:	d1f7      	bne.n	1d4f8 <smp_master_ident+0x2c>
   1d508:	f3bf 8f5b 	dmb	ish
}
   1d50c:	e040      	b.n	1d590 <smp_master_ident+0xc4>
		struct bt_smp_master_ident *req = (void *)buf->data;
   1d50e:	688e      	ldr	r6, [r1, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1d510:	f100 0788 	add.w	r7, r0, #136	; 0x88
   1d514:	463a      	mov	r2, r7
   1d516:	7a01      	ldrb	r1, [r0, #8]
   1d518:	2004      	movs	r0, #4
   1d51a:	f00a fdb0 	bl	2807e <bt_keys_get_type>
		if (!keys) {
   1d51e:	4605      	mov	r5, r0
   1d520:	b188      	cbz	r0, 1d546 <smp_master_ident+0x7a>
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   1d522:	2202      	movs	r2, #2
   1d524:	4631      	mov	r1, r6
   1d526:	3018      	adds	r0, #24
   1d528:	f007 faa0 	bl	24a6c <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   1d52c:	2208      	movs	r2, #8
   1d52e:	1cb1      	adds	r1, r6, #2
   1d530:	f105 0010 	add.w	r0, r5, #16
   1d534:	f007 fa9a 	bl	24a6c <memcpy>
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   1d538:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1d53c:	f023 0301 	bic.w	r3, r3, #1
   1d540:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
   1d544:	e7ce      	b.n	1d4e4 <smp_master_ident+0x18>
   1d546:	4b18      	ldr	r3, [pc, #96]	; (1d5a8 <smp_master_ident+0xdc>)
   1d548:	4a18      	ldr	r2, [pc, #96]	; (1d5ac <smp_master_ident+0xe0>)
   1d54a:	1a9b      	subs	r3, r3, r2
   1d54c:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to get keys for %s",
   1d54e:	f04f 0400 	mov.w	r4, #0
   1d552:	2201      	movs	r2, #1
   1d554:	f362 0402 	bfi	r4, r2, #0, #3
   1d558:	f36f 04c5 	bfc	r4, #3, #3
   1d55c:	f363 148f 	bfi	r4, r3, #6, #10
   1d560:	4638      	mov	r0, r7
   1d562:	f7f6 fe99 	bl	14298 <bt_addr_le_str_real>
   1d566:	f7f3 fc59 	bl	10e1c <z_log_strdup>
   1d56a:	4601      	mov	r1, r0
   1d56c:	4622      	mov	r2, r4
   1d56e:	4810      	ldr	r0, [pc, #64]	; (1d5b0 <smp_master_ident+0xe4>)
   1d570:	f7f3 fdce 	bl	11110 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
   1d574:	2008      	movs	r0, #8
   1d576:	e00f      	b.n	1d598 <smp_master_ident+0xcc>
   1d578:	f3bf 8f5b 	dmb	ish
   1d57c:	e854 3f00 	ldrex	r3, [r4]
   1d580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1d584:	e844 3200 	strex	r2, r3, [r4]
   1d588:	2a00      	cmp	r2, #0
   1d58a:	d1f7      	bne.n	1d57c <smp_master_ident+0xb0>
   1d58c:	f3bf 8f5b 	dmb	ish
	if (!smp->local_dist && !smp->remote_dist) {
   1d590:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
   1d594:	b10b      	cbz	r3, 1d59a <smp_master_ident+0xce>
	return 0;
   1d596:	2000      	movs	r0, #0
}
   1d598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		smp_pairing_complete(smp, 0);
   1d59a:	2100      	movs	r1, #0
   1d59c:	4620      	mov	r0, r4
   1d59e:	f7ff fd45 	bl	1d02c <smp_pairing_complete>
	return 0;
   1d5a2:	2000      	movs	r0, #0
   1d5a4:	e7f8      	b.n	1d598 <smp_master_ident+0xcc>
   1d5a6:	bf00      	nop
   1d5a8:	00029f44 	.word	0x00029f44
   1d5ac:	00029ecc 	.word	0x00029ecc
   1d5b0:	0002cac0 	.word	0x0002cac0

0001d5b4 <smp_pairing_failed>:
{
   1d5b4:	b570      	push	{r4, r5, r6, lr}
   1d5b6:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1d5b8:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   1d5bc:	688d      	ldr	r5, [r1, #8]
   1d5be:	4b1f      	ldr	r3, [pc, #124]	; (1d63c <smp_pairing_failed+0x88>)
   1d5c0:	4a1f      	ldr	r2, [pc, #124]	; (1d640 <smp_pairing_failed+0x8c>)
   1d5c2:	1a9b      	subs	r3, r3, r2
   1d5c4:	08db      	lsrs	r3, r3, #3
	BT_ERR("reason 0x%x", req->reason);
   1d5c6:	f04f 0200 	mov.w	r2, #0
   1d5ca:	2101      	movs	r1, #1
   1d5cc:	f361 0202 	bfi	r2, r1, #0, #3
   1d5d0:	f36f 02c5 	bfc	r2, #3, #3
   1d5d4:	f363 128f 	bfi	r2, r3, #6, #10
   1d5d8:	7829      	ldrb	r1, [r5, #0]
   1d5da:	481a      	ldr	r0, [pc, #104]	; (1d644 <smp_pairing_failed+0x90>)
   1d5dc:	f7f3 fd98 	bl	11110 <log_1>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1d5e0:	1d23      	adds	r3, r4, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d5e2:	f3bf 8f5b 	dmb	ish
   1d5e6:	e853 2f00 	ldrex	r2, [r3]
   1d5ea:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
   1d5ee:	e843 1000 	strex	r0, r1, [r3]
   1d5f2:	2800      	cmp	r0, #0
   1d5f4:	d1f7      	bne.n	1d5e6 <smp_pairing_failed+0x32>
   1d5f6:	f3bf 8f5b 	dmb	ish
   1d5fa:	f412 6f80 	tst.w	r2, #1024	; 0x400
   1d5fe:	d007      	beq.n	1d610 <smp_pairing_failed+0x5c>
		if (bt_auth && bt_auth->cancel) {
   1d600:	4b11      	ldr	r3, [pc, #68]	; (1d648 <smp_pairing_failed+0x94>)
   1d602:	681b      	ldr	r3, [r3, #0]
   1d604:	b19b      	cbz	r3, 1d62e <smp_pairing_failed+0x7a>
   1d606:	691b      	ldr	r3, [r3, #16]
   1d608:	b18b      	cbz	r3, 1d62e <smp_pairing_failed+0x7a>
			bt_auth->cancel(conn);
   1d60a:	4630      	mov	r0, r6
   1d60c:	4798      	blx	r3
   1d60e:	e00e      	b.n	1d62e <smp_pairing_failed+0x7a>
   1d610:	f3bf 8f5b 	dmb	ish
   1d614:	e853 2f00 	ldrex	r2, [r3]
   1d618:	f422 6100 	bic.w	r1, r2, #2048	; 0x800
   1d61c:	e843 1000 	strex	r0, r1, [r3]
   1d620:	2800      	cmp	r0, #0
   1d622:	d1f7      	bne.n	1d614 <smp_pairing_failed+0x60>
   1d624:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1d628:	f412 6f00 	tst.w	r2, #2048	; 0x800
   1d62c:	d1e8      	bne.n	1d600 <smp_pairing_failed+0x4c>
	smp_pairing_complete(smp, req->reason);
   1d62e:	7829      	ldrb	r1, [r5, #0]
   1d630:	4620      	mov	r0, r4
   1d632:	f7ff fcfb 	bl	1d02c <smp_pairing_complete>
}
   1d636:	2000      	movs	r0, #0
   1d638:	bd70      	pop	{r4, r5, r6, pc}
   1d63a:	bf00      	nop
   1d63c:	00029f44 	.word	0x00029f44
   1d640:	00029ecc 	.word	0x00029ecc
   1d644:	0002cbc0 	.word	0x0002cbc0
   1d648:	20002710 	.word	0x20002710

0001d64c <smp_timeout>:
{
   1d64c:	b538      	push	{r3, r4, r5, lr}
   1d64e:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(work, struct bt_smp, work);
   1d650:	f5a0 75ec 	sub.w	r5, r0, #472	; 0x1d8
   1d654:	4b11      	ldr	r3, [pc, #68]	; (1d69c <smp_timeout+0x50>)
   1d656:	4a12      	ldr	r2, [pc, #72]	; (1d6a0 <smp_timeout+0x54>)
   1d658:	1a9b      	subs	r3, r3, r2
   1d65a:	08db      	lsrs	r3, r3, #3
	BT_ERR("SMP Timeout");
   1d65c:	f04f 0100 	mov.w	r1, #0
   1d660:	2201      	movs	r2, #1
   1d662:	f362 0102 	bfi	r1, r2, #0, #3
   1d666:	f36f 01c5 	bfc	r1, #3, #3
   1d66a:	f363 118f 	bfi	r1, r3, #6, #10
   1d66e:	480d      	ldr	r0, [pc, #52]	; (1d6a4 <smp_timeout+0x58>)
   1d670:	f7f3 fe04 	bl	1127c <log_0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1d674:	2108      	movs	r1, #8
   1d676:	4628      	mov	r0, r5
   1d678:	f7ff fcd8 	bl	1d02c <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1d67c:	f5a4 74ea 	sub.w	r4, r4, #468	; 0x1d4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d680:	f3bf 8f5b 	dmb	ish
   1d684:	e854 3f00 	ldrex	r3, [r4]
   1d688:	f043 0310 	orr.w	r3, r3, #16
   1d68c:	e844 3200 	strex	r2, r3, [r4]
   1d690:	2a00      	cmp	r2, #0
   1d692:	d1f7      	bne.n	1d684 <smp_timeout+0x38>
   1d694:	f3bf 8f5b 	dmb	ish
}
   1d698:	bd38      	pop	{r3, r4, r5, pc}
   1d69a:	bf00      	nop
   1d69c:	00029f44 	.word	0x00029f44
   1d6a0:	00029ecc 	.word	0x00029ecc
   1d6a4:	0002cbcc 	.word	0x0002cbcc

0001d6a8 <bt_smp_update_keys>:
{
   1d6a8:	b570      	push	{r4, r5, r6, lr}
   1d6aa:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1d6ac:	f7fe fa40 	bl	1bb30 <smp_chan_get>
	if (!smp) {
   1d6b0:	2800      	cmp	r0, #0
   1d6b2:	d06a      	beq.n	1d78a <bt_smp_update_keys+0xe2>
   1d6b4:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d6b6:	f3bf 8f5b 	dmb	ish
   1d6ba:	6843      	ldr	r3, [r0, #4]
   1d6bc:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1d6c0:	f013 0f08 	tst.w	r3, #8
   1d6c4:	d061      	beq.n	1d78a <bt_smp_update_keys+0xe2>
	if (conn->le.keys) {
   1d6c6:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1d6ca:	b108      	cbz	r0, 1d6d0 <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
   1d6cc:	f000 f9e2 	bl	1da94 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1d6d0:	f104 0688 	add.w	r6, r4, #136	; 0x88
   1d6d4:	4631      	mov	r1, r6
   1d6d6:	7a20      	ldrb	r0, [r4, #8]
   1d6d8:	f000 f896 	bl	1d808 <bt_keys_get_addr>
   1d6dc:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   1d6e0:	b1c8      	cbz	r0, 1d716 <bt_smp_update_keys+0x6e>
   1d6e2:	f3bf 8f5b 	dmb	ish
   1d6e6:	686b      	ldr	r3, [r5, #4]
   1d6e8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   1d6ec:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   1d6f0:	d005      	beq.n	1d6fe <bt_smp_update_keys+0x56>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1d6f2:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   1d6f6:	7b53      	ldrb	r3, [r2, #13]
   1d6f8:	f043 0302 	orr.w	r3, r3, #2
   1d6fc:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   1d6fe:	7a2b      	ldrb	r3, [r5, #8]
   1d700:	2b03      	cmp	r3, #3
   1d702:	d824      	bhi.n	1d74e <bt_smp_update_keys+0xa6>
   1d704:	b25b      	sxtb	r3, r3
   1d706:	bb33      	cbnz	r3, 1d756 <bt_smp_update_keys+0xae>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1d708:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   1d70c:	7b53      	ldrb	r3, [r2, #13]
   1d70e:	f023 0301 	bic.w	r3, r3, #1
   1d712:	7353      	strb	r3, [r2, #13]
		break;
   1d714:	e025      	b.n	1d762 <bt_smp_update_keys+0xba>
   1d716:	4b32      	ldr	r3, [pc, #200]	; (1d7e0 <bt_smp_update_keys+0x138>)
   1d718:	4a32      	ldr	r2, [pc, #200]	; (1d7e4 <bt_smp_update_keys+0x13c>)
   1d71a:	1a9b      	subs	r3, r3, r2
   1d71c:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to get keys for %s",
   1d71e:	f04f 0400 	mov.w	r4, #0
   1d722:	2201      	movs	r2, #1
   1d724:	f362 0402 	bfi	r4, r2, #0, #3
   1d728:	f36f 04c5 	bfc	r4, #3, #3
   1d72c:	f363 148f 	bfi	r4, r3, #6, #10
   1d730:	4630      	mov	r0, r6
   1d732:	f7f6 fdb1 	bl	14298 <bt_addr_le_str_real>
   1d736:	f7f3 fb71 	bl	10e1c <z_log_strdup>
   1d73a:	4601      	mov	r1, r0
   1d73c:	4622      	mov	r2, r4
   1d73e:	482a      	ldr	r0, [pc, #168]	; (1d7e8 <bt_smp_update_keys+0x140>)
   1d740:	f7f3 fce6 	bl	11110 <log_1>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1d744:	2108      	movs	r1, #8
   1d746:	4628      	mov	r0, r5
   1d748:	f00a fa17 	bl	27b7a <smp_error>
		return;
   1d74c:	e01d      	b.n	1d78a <bt_smp_update_keys+0xe2>
	switch (smp->method) {
   1d74e:	3b05      	subs	r3, #5
   1d750:	b2db      	uxtb	r3, r3
   1d752:	2b01      	cmp	r3, #1
   1d754:	d8d8      	bhi.n	1d708 <bt_smp_update_keys+0x60>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1d756:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   1d75a:	7b53      	ldrb	r3, [r2, #13]
   1d75c:	f043 0301 	orr.w	r3, r3, #1
   1d760:	7353      	strb	r3, [r2, #13]
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1d762:	f8d4 60b4 	ldr.w	r6, [r4, #180]	; 0xb4
   1d766:	4628      	mov	r0, r5
   1d768:	f009 fc18 	bl	26f9c <get_encryption_key_size>
   1d76c:	7330      	strb	r0, [r6, #12]
   1d76e:	f3bf 8f5b 	dmb	ish
   1d772:	686b      	ldr	r3, [r5, #4]
   1d774:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1d778:	f013 0f20 	tst.w	r3, #32
   1d77c:	d106      	bne.n	1d78c <bt_smp_update_keys+0xe4>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   1d77e:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   1d782:	7b53      	ldrb	r3, [r2, #13]
   1d784:	f023 0310 	bic.w	r3, r3, #16
   1d788:	7353      	strb	r3, [r2, #13]
}
   1d78a:	bd70      	pop	{r4, r5, r6, pc}
		conn->le.keys->flags |= BT_KEYS_SC;
   1d78c:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   1d790:	7b53      	ldrb	r3, [r2, #13]
   1d792:	f043 0310 	orr.w	r3, r3, #16
   1d796:	7353      	strb	r3, [r2, #13]
   1d798:	f3bf 8f5b 	dmb	ish
   1d79c:	686b      	ldr	r3, [r5, #4]
   1d79e:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1d7a2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1d7a6:	d0f0      	beq.n	1d78a <bt_smp_update_keys+0xe2>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   1d7a8:	2120      	movs	r1, #32
   1d7aa:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1d7ae:	f00a fc62 	bl	28076 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   1d7b2:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1d7b6:	2210      	movs	r2, #16
   1d7b8:	f105 0147 	add.w	r1, r5, #71	; 0x47
   1d7bc:	301a      	adds	r0, #26
   1d7be:	f007 f955 	bl	24a6c <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   1d7c2:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1d7c6:	2208      	movs	r2, #8
   1d7c8:	2100      	movs	r1, #0
   1d7ca:	3010      	adds	r0, #16
   1d7cc:	f007 f972 	bl	24ab4 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1d7d0:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1d7d4:	2202      	movs	r2, #2
   1d7d6:	2100      	movs	r1, #0
   1d7d8:	3018      	adds	r0, #24
   1d7da:	f007 f96b 	bl	24ab4 <memset>
   1d7de:	e7d4      	b.n	1d78a <bt_smp_update_keys+0xe2>
   1d7e0:	00029f44 	.word	0x00029f44
   1d7e4:	00029ecc 	.word	0x00029ecc
   1d7e8:	0002cac0 	.word	0x0002cac0

0001d7ec <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   1d7ec:	b508      	push	{r3, lr}
	static struct bt_pub_key_cb pub_key_cb = {
		.func           = bt_smp_pkey_ready,
	};

	sc_supported = le_sc_supported();
   1d7ee:	f7fe f8e5 	bl	1b9bc <le_sc_supported>
   1d7f2:	4b03      	ldr	r3, [pc, #12]	; (1d800 <bt_smp_init+0x14>)
   1d7f4:	7018      	strb	r0, [r3, #0]
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   1d7f6:	4803      	ldr	r0, [pc, #12]	; (1d804 <bt_smp_init+0x18>)
   1d7f8:	f7fa fa86 	bl	17d08 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   1d7fc:	2000      	movs	r0, #0
   1d7fe:	bd08      	pop	{r3, pc}
   1d800:	20003990 	.word	0x20003990
   1d804:	2000064c 	.word	0x2000064c

0001d808 <bt_keys_get_addr>:
static uint32_t aging_counter_val;
static struct bt_keys *last_keys_updated;
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   1d808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d80c:	b082      	sub	sp, #8
   1d80e:	4605      	mov	r5, r0
   1d810:	460f      	mov	r7, r1
	struct bt_keys *keys;
	int i;
	size_t first_free_slot = ARRAY_SIZE(key_pool);
   1d812:	f04f 0801 	mov.w	r8, #1

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1d816:	2400      	movs	r4, #0
   1d818:	2c00      	cmp	r4, #0
   1d81a:	dd07      	ble.n	1d82c <bt_keys_get_addr+0x24>
			first_free_slot = oldest - &key_pool[0];
		}
	}

#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
   1d81c:	f1b8 0f00 	cmp.w	r8, #0
   1d820:	d02b      	beq.n	1d87a <bt_keys_get_addr+0x72>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   1d822:	2600      	movs	r6, #0
}
   1d824:	4630      	mov	r0, r6
   1d826:	b002      	add	sp, #8
   1d828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		keys = &key_pool[i];
   1d82c:	4a1a      	ldr	r2, [pc, #104]	; (1d898 <bt_keys_get_addr+0x90>)
   1d82e:	235c      	movs	r3, #92	; 0x5c
   1d830:	fb03 f304 	mul.w	r3, r3, r4
   1d834:	18d6      	adds	r6, r2, r3
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1d836:	5cd3      	ldrb	r3, [r2, r3]
   1d838:	42ab      	cmp	r3, r5
   1d83a:	d004      	beq.n	1d846 <bt_keys_get_addr+0x3e>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   1d83c:	f1b8 0f01 	cmp.w	r8, #1
   1d840:	d00a      	beq.n	1d858 <bt_keys_get_addr+0x50>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1d842:	3401      	adds	r4, #1
   1d844:	e7e8      	b.n	1d818 <bt_keys_get_addr+0x10>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1d846:	4630      	mov	r0, r6
	return memcmp(a, b, sizeof(*a));
   1d848:	2207      	movs	r2, #7
   1d84a:	4639      	mov	r1, r7
   1d84c:	3001      	adds	r0, #1
   1d84e:	f007 f8f6 	bl	24a3e <memcmp>
   1d852:	2800      	cmp	r0, #0
   1d854:	d1f2      	bne.n	1d83c <bt_keys_get_addr+0x34>
   1d856:	e7e5      	b.n	1d824 <bt_keys_get_addr+0x1c>
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   1d858:	4b0f      	ldr	r3, [pc, #60]	; (1d898 <bt_keys_get_addr+0x90>)
   1d85a:	205c      	movs	r0, #92	; 0x5c
   1d85c:	fb00 3004 	mla	r0, r0, r4, r3
   1d860:	2300      	movs	r3, #0
   1d862:	9300      	str	r3, [sp, #0]
   1d864:	f8cd 3003 	str.w	r3, [sp, #3]
   1d868:	2207      	movs	r2, #7
   1d86a:	4669      	mov	r1, sp
   1d86c:	3001      	adds	r0, #1
   1d86e:	f007 f8e6 	bl	24a3e <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   1d872:	2800      	cmp	r0, #0
   1d874:	d1e5      	bne.n	1d842 <bt_keys_get_addr+0x3a>
			first_free_slot = i;
   1d876:	46a0      	mov	r8, r4
   1d878:	e7e3      	b.n	1d842 <bt_keys_get_addr+0x3a>
		keys = &key_pool[first_free_slot];
   1d87a:	4a07      	ldr	r2, [pc, #28]	; (1d898 <bt_keys_get_addr+0x90>)
   1d87c:	235c      	movs	r3, #92	; 0x5c
   1d87e:	fb03 f808 	mul.w	r8, r3, r8
   1d882:	eb02 0608 	add.w	r6, r2, r8
		keys->id = id;
   1d886:	f802 5008 	strb.w	r5, [r2, r8]
	memcpy(dst, src, sizeof(*dst));
   1d88a:	2207      	movs	r2, #7
   1d88c:	4639      	mov	r1, r7
   1d88e:	1c70      	adds	r0, r6, #1
   1d890:	f007 f8ec 	bl	24a6c <memcpy>
		return keys;
   1d894:	e7c6      	b.n	1d824 <bt_keys_get_addr+0x1c>
   1d896:	bf00      	nop
   1d898:	200027f4 	.word	0x200027f4

0001d89c <bt_foreach_bond>:

void bt_foreach_bond(uint8_t id, void (*func)(const struct bt_bond_info *info,
					   void *user_data),
		     void *user_data)
{
   1d89c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d89e:	b083      	sub	sp, #12
   1d8a0:	4607      	mov	r7, r0
   1d8a2:	460e      	mov	r6, r1
   1d8a4:	4615      	mov	r5, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1d8a6:	2400      	movs	r4, #0
   1d8a8:	e00c      	b.n	1d8c4 <bt_foreach_bond+0x28>
		struct bt_keys *keys = &key_pool[i];

		if (keys->keys && keys->id == id) {
   1d8aa:	4a0e      	ldr	r2, [pc, #56]	; (1d8e4 <bt_foreach_bond+0x48>)
   1d8ac:	235c      	movs	r3, #92	; 0x5c
   1d8ae:	fb03 2304 	mla	r3, r3, r4, r2
   1d8b2:	89db      	ldrh	r3, [r3, #14]
   1d8b4:	b12b      	cbz	r3, 1d8c2 <bt_foreach_bond+0x26>
   1d8b6:	235c      	movs	r3, #92	; 0x5c
   1d8b8:	fb03 f304 	mul.w	r3, r3, r4
   1d8bc:	5cd3      	ldrb	r3, [r2, r3]
   1d8be:	42bb      	cmp	r3, r7
   1d8c0:	d004      	beq.n	1d8cc <bt_foreach_bond+0x30>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1d8c2:	3401      	adds	r4, #1
   1d8c4:	2c00      	cmp	r4, #0
   1d8c6:	ddf0      	ble.n	1d8aa <bt_foreach_bond+0xe>

			bt_addr_le_copy(&info.addr, &keys->addr);
			func(&info, user_data);
		}
	}
}
   1d8c8:	b003      	add	sp, #12
   1d8ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_addr_le_copy(&info.addr, &keys->addr);
   1d8cc:	215c      	movs	r1, #92	; 0x5c
   1d8ce:	fb01 2104 	mla	r1, r1, r4, r2
   1d8d2:	2207      	movs	r2, #7
   1d8d4:	3101      	adds	r1, #1
   1d8d6:	4668      	mov	r0, sp
   1d8d8:	f007 f8c8 	bl	24a6c <memcpy>
			func(&info, user_data);
   1d8dc:	4629      	mov	r1, r5
   1d8de:	4668      	mov	r0, sp
   1d8e0:	47b0      	blx	r6
   1d8e2:	e7ee      	b.n	1d8c2 <bt_foreach_bond+0x26>
   1d8e4:	200027f4 	.word	0x200027f4

0001d8e8 <bt_keys_foreach>:

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   1d8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d8ea:	4605      	mov	r5, r0
   1d8ec:	460f      	mov	r7, r1
   1d8ee:	4616      	mov	r6, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1d8f0:	2400      	movs	r4, #0
   1d8f2:	2c00      	cmp	r4, #0
   1d8f4:	dd00      	ble.n	1d8f8 <bt_keys_foreach+0x10>
		if ((key_pool[i].keys & type)) {
			func(&key_pool[i], data);
		}
	}
}
   1d8f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((key_pool[i].keys & type)) {
   1d8f8:	4a06      	ldr	r2, [pc, #24]	; (1d914 <bt_keys_foreach+0x2c>)
   1d8fa:	235c      	movs	r3, #92	; 0x5c
   1d8fc:	fb03 2304 	mla	r3, r3, r4, r2
   1d900:	89db      	ldrh	r3, [r3, #14]
   1d902:	422b      	tst	r3, r5
   1d904:	d004      	beq.n	1d910 <bt_keys_foreach+0x28>
			func(&key_pool[i], data);
   1d906:	4631      	mov	r1, r6
   1d908:	205c      	movs	r0, #92	; 0x5c
   1d90a:	fb00 2004 	mla	r0, r0, r4, r2
   1d90e:	47b8      	blx	r7
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1d910:	3401      	adds	r4, #1
   1d912:	e7ee      	b.n	1d8f2 <bt_keys_foreach+0xa>
   1d914:	200027f4 	.word	0x200027f4

0001d918 <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
   1d918:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
   1d91a:	2200      	movs	r2, #0
   1d91c:	4902      	ldr	r1, [pc, #8]	; (1d928 <keys_commit+0x10>)
   1d91e:	2002      	movs	r0, #2
   1d920:	f7ff ffe2 	bl	1d8e8 <bt_keys_foreach>
	}

	return 0;
}
   1d924:	2000      	movs	r0, #0
   1d926:	bd08      	pop	{r3, pc}
   1d928:	0002806f 	.word	0x0002806f

0001d92c <bt_keys_find>:
{
   1d92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d92e:	4607      	mov	r7, r0
   1d930:	460e      	mov	r6, r1
   1d932:	4615      	mov	r5, r2
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1d934:	2400      	movs	r4, #0
   1d936:	2c00      	cmp	r4, #0
   1d938:	dd01      	ble.n	1d93e <bt_keys_find+0x12>
	return NULL;
   1d93a:	2000      	movs	r0, #0
}
   1d93c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1d93e:	4a0f      	ldr	r2, [pc, #60]	; (1d97c <bt_keys_find+0x50>)
   1d940:	235c      	movs	r3, #92	; 0x5c
   1d942:	fb03 2304 	mla	r3, r3, r4, r2
   1d946:	89db      	ldrh	r3, [r3, #14]
   1d948:	421f      	tst	r7, r3
   1d94a:	d005      	beq.n	1d958 <bt_keys_find+0x2c>
   1d94c:	235c      	movs	r3, #92	; 0x5c
   1d94e:	fb03 f304 	mul.w	r3, r3, r4
   1d952:	5cd3      	ldrb	r3, [r2, r3]
   1d954:	429e      	cmp	r6, r3
   1d956:	d001      	beq.n	1d95c <bt_keys_find+0x30>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1d958:	3401      	adds	r4, #1
   1d95a:	e7ec      	b.n	1d936 <bt_keys_find+0xa>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
   1d95c:	205c      	movs	r0, #92	; 0x5c
   1d95e:	fb00 2004 	mla	r0, r0, r4, r2
	return memcmp(a, b, sizeof(*a));
   1d962:	2207      	movs	r2, #7
   1d964:	4629      	mov	r1, r5
   1d966:	3001      	adds	r0, #1
   1d968:	f007 f869 	bl	24a3e <memcmp>
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1d96c:	2800      	cmp	r0, #0
   1d96e:	d1f3      	bne.n	1d958 <bt_keys_find+0x2c>
			return &key_pool[i];
   1d970:	4802      	ldr	r0, [pc, #8]	; (1d97c <bt_keys_find+0x50>)
   1d972:	235c      	movs	r3, #92	; 0x5c
   1d974:	fb03 0004 	mla	r0, r3, r4, r0
   1d978:	e7e0      	b.n	1d93c <bt_keys_find+0x10>
   1d97a:	bf00      	nop
   1d97c:	200027f4 	.word	0x200027f4

0001d980 <bt_keys_find_irk>:
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1d980:	780b      	ldrb	r3, [r1, #0]
   1d982:	2b01      	cmp	r3, #1
   1d984:	d15f      	bne.n	1da46 <bt_keys_find_irk+0xc6>
{
   1d986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d98a:	4606      	mov	r6, r0
   1d98c:	460d      	mov	r5, r1
	return BT_ADDR_IS_RPA(&addr->a);
   1d98e:	798b      	ldrb	r3, [r1, #6]
   1d990:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	if (!bt_addr_le_is_rpa(addr)) {
   1d994:	2b40      	cmp	r3, #64	; 0x40
   1d996:	d101      	bne.n	1d99c <bt_keys_find_irk+0x1c>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1d998:	2400      	movs	r4, #0
   1d99a:	e002      	b.n	1d9a2 <bt_keys_find_irk+0x22>
		return NULL;
   1d99c:	2000      	movs	r0, #0
   1d99e:	e025      	b.n	1d9ec <bt_keys_find_irk+0x6c>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1d9a0:	3401      	adds	r4, #1
   1d9a2:	2c00      	cmp	r4, #0
   1d9a4:	dc1e      	bgt.n	1d9e4 <bt_keys_find_irk+0x64>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1d9a6:	4a29      	ldr	r2, [pc, #164]	; (1da4c <bt_keys_find_irk+0xcc>)
   1d9a8:	235c      	movs	r3, #92	; 0x5c
   1d9aa:	fb03 2304 	mla	r3, r3, r4, r2
   1d9ae:	89db      	ldrh	r3, [r3, #14]
   1d9b0:	f013 0f02 	tst.w	r3, #2
   1d9b4:	d0f4      	beq.n	1d9a0 <bt_keys_find_irk+0x20>
		if (key_pool[i].id == id &&
   1d9b6:	235c      	movs	r3, #92	; 0x5c
   1d9b8:	fb03 f304 	mul.w	r3, r3, r4
   1d9bc:	5cd3      	ldrb	r3, [r2, r3]
   1d9be:	42b3      	cmp	r3, r6
   1d9c0:	d1ee      	bne.n	1d9a0 <bt_keys_find_irk+0x20>
		    !bt_addr_cmp(&addr->a, &key_pool[i].irk.rpa)) {
   1d9c2:	215c      	movs	r1, #92	; 0x5c
   1d9c4:	fb01 f104 	mul.w	r1, r1, r4
   1d9c8:	3138      	adds	r1, #56	; 0x38
   1d9ca:	4411      	add	r1, r2
	return memcmp(a, b, sizeof(*a));
   1d9cc:	2206      	movs	r2, #6
   1d9ce:	3102      	adds	r1, #2
   1d9d0:	1c68      	adds	r0, r5, #1
   1d9d2:	f007 f834 	bl	24a3e <memcmp>
		if (key_pool[i].id == id &&
   1d9d6:	2800      	cmp	r0, #0
   1d9d8:	d1e2      	bne.n	1d9a0 <bt_keys_find_irk+0x20>
			return &key_pool[i];
   1d9da:	481c      	ldr	r0, [pc, #112]	; (1da4c <bt_keys_find_irk+0xcc>)
   1d9dc:	235c      	movs	r3, #92	; 0x5c
   1d9de:	fb03 0004 	mla	r0, r3, r4, r0
   1d9e2:	e003      	b.n	1d9ec <bt_keys_find_irk+0x6c>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1d9e4:	2700      	movs	r7, #0
   1d9e6:	2f00      	cmp	r7, #0
   1d9e8:	dd02      	ble.n	1d9f0 <bt_keys_find_irk+0x70>
	return NULL;
   1d9ea:	2000      	movs	r0, #0
}
   1d9ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1d9f0:	4a16      	ldr	r2, [pc, #88]	; (1da4c <bt_keys_find_irk+0xcc>)
   1d9f2:	235c      	movs	r3, #92	; 0x5c
   1d9f4:	fb03 2307 	mla	r3, r3, r7, r2
   1d9f8:	89db      	ldrh	r3, [r3, #14]
   1d9fa:	f013 0f02 	tst.w	r3, #2
   1d9fe:	d005      	beq.n	1da0c <bt_keys_find_irk+0x8c>
		if (key_pool[i].id != id) {
   1da00:	235c      	movs	r3, #92	; 0x5c
   1da02:	fb03 f307 	mul.w	r3, r3, r7
   1da06:	5cd3      	ldrb	r3, [r2, r3]
   1da08:	42b3      	cmp	r3, r6
   1da0a:	d001      	beq.n	1da10 <bt_keys_find_irk+0x90>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1da0c:	3701      	adds	r7, #1
   1da0e:	e7ea      	b.n	1d9e6 <bt_keys_find_irk+0x66>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   1da10:	205c      	movs	r0, #92	; 0x5c
   1da12:	fb00 f007 	mul.w	r0, r0, r7
   1da16:	3028      	adds	r0, #40	; 0x28
   1da18:	4410      	add	r0, r2
   1da1a:	f105 0801 	add.w	r8, r5, #1
   1da1e:	4641      	mov	r1, r8
   1da20:	3002      	adds	r0, #2
   1da22:	f007 f8ab 	bl	24b7c <bt_rpa_irk_matches>
   1da26:	2800      	cmp	r0, #0
   1da28:	d0f0      	beq.n	1da0c <bt_keys_find_irk+0x8c>
			bt_addr_copy(&key_pool[i].irk.rpa, &addr->a);
   1da2a:	4c08      	ldr	r4, [pc, #32]	; (1da4c <bt_keys_find_irk+0xcc>)
   1da2c:	205c      	movs	r0, #92	; 0x5c
   1da2e:	fb00 f707 	mul.w	r7, r0, r7
   1da32:	f107 0038 	add.w	r0, r7, #56	; 0x38
   1da36:	4420      	add	r0, r4
	memcpy(dst, src, sizeof(*dst));
   1da38:	2206      	movs	r2, #6
   1da3a:	4641      	mov	r1, r8
   1da3c:	3002      	adds	r0, #2
   1da3e:	f007 f815 	bl	24a6c <memcpy>
			return &key_pool[i];
   1da42:	19e0      	adds	r0, r4, r7
   1da44:	e7d2      	b.n	1d9ec <bt_keys_find_irk+0x6c>
		return NULL;
   1da46:	2000      	movs	r0, #0
}
   1da48:	4770      	bx	lr
   1da4a:	bf00      	nop
   1da4c:	200027f4 	.word	0x200027f4

0001da50 <bt_keys_find_addr>:
{
   1da50:	b570      	push	{r4, r5, r6, lr}
   1da52:	4606      	mov	r6, r0
   1da54:	460d      	mov	r5, r1
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1da56:	2400      	movs	r4, #0
   1da58:	2c00      	cmp	r4, #0
   1da5a:	dd01      	ble.n	1da60 <bt_keys_find_addr+0x10>
	return NULL;
   1da5c:	2000      	movs	r0, #0
}
   1da5e:	bd70      	pop	{r4, r5, r6, pc}
		if (key_pool[i].id == id &&
   1da60:	235c      	movs	r3, #92	; 0x5c
   1da62:	fb03 f304 	mul.w	r3, r3, r4
   1da66:	4a0a      	ldr	r2, [pc, #40]	; (1da90 <bt_keys_find_addr+0x40>)
   1da68:	5cd3      	ldrb	r3, [r2, r3]
   1da6a:	429e      	cmp	r6, r3
   1da6c:	d001      	beq.n	1da72 <bt_keys_find_addr+0x22>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1da6e:	3401      	adds	r4, #1
   1da70:	e7f2      	b.n	1da58 <bt_keys_find_addr+0x8>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
   1da72:	205c      	movs	r0, #92	; 0x5c
   1da74:	fb00 2004 	mla	r0, r0, r4, r2
	return memcmp(a, b, sizeof(*a));
   1da78:	2207      	movs	r2, #7
   1da7a:	4629      	mov	r1, r5
   1da7c:	3001      	adds	r0, #1
   1da7e:	f006 ffde 	bl	24a3e <memcmp>
		if (key_pool[i].id == id &&
   1da82:	2800      	cmp	r0, #0
   1da84:	d1f3      	bne.n	1da6e <bt_keys_find_addr+0x1e>
			return &key_pool[i];
   1da86:	4802      	ldr	r0, [pc, #8]	; (1da90 <bt_keys_find_addr+0x40>)
   1da88:	235c      	movs	r3, #92	; 0x5c
   1da8a:	fb03 0004 	mla	r0, r3, r4, r0
   1da8e:	e7e6      	b.n	1da5e <bt_keys_find_addr+0xe>
   1da90:	200027f4 	.word	0x200027f4

0001da94 <bt_keys_clear>:
{
   1da94:	b530      	push	{r4, r5, lr}
   1da96:	b08d      	sub	sp, #52	; 0x34
   1da98:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   1da9a:	7a03      	ldrb	r3, [r0, #8]
   1da9c:	f013 0f04 	tst.w	r3, #4
   1daa0:	d117      	bne.n	1dad2 <bt_keys_clear+0x3e>
		if (keys->id) {
   1daa2:	7822      	ldrb	r2, [r4, #0]
   1daa4:	b1c2      	cbz	r2, 1dad8 <bt_keys_clear+0x44>
			u8_to_dec(id, sizeof(id), keys->id);
   1daa6:	ad02      	add	r5, sp, #8
   1daa8:	2104      	movs	r1, #4
   1daaa:	4628      	mov	r0, r5
   1daac:	f7f2 fa8e 	bl	ffcc <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1dab0:	9500      	str	r5, [sp, #0]
   1dab2:	1c63      	adds	r3, r4, #1
   1dab4:	4a0d      	ldr	r2, [pc, #52]	; (1daec <bt_keys_clear+0x58>)
   1dab6:	2124      	movs	r1, #36	; 0x24
   1dab8:	a803      	add	r0, sp, #12
   1daba:	f7f6 ff27 	bl	1490c <bt_settings_encode_key>
		settings_delete(key);
   1dabe:	a803      	add	r0, sp, #12
   1dac0:	f005 fb84 	bl	231cc <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
   1dac4:	225c      	movs	r2, #92	; 0x5c
   1dac6:	2100      	movs	r1, #0
   1dac8:	4620      	mov	r0, r4
   1daca:	f006 fff3 	bl	24ab4 <memset>
}
   1dace:	b00d      	add	sp, #52	; 0x34
   1dad0:	bd30      	pop	{r4, r5, pc}
		bt_id_del(keys);
   1dad2:	f7f9 fb4b 	bl	1716c <bt_id_del>
   1dad6:	e7e4      	b.n	1daa2 <bt_keys_clear+0xe>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1dad8:	2300      	movs	r3, #0
   1dada:	9300      	str	r3, [sp, #0]
   1dadc:	1c63      	adds	r3, r4, #1
   1dade:	4a03      	ldr	r2, [pc, #12]	; (1daec <bt_keys_clear+0x58>)
   1dae0:	2124      	movs	r1, #36	; 0x24
   1dae2:	a803      	add	r0, sp, #12
   1dae4:	f7f6 ff12 	bl	1490c <bt_settings_encode_key>
   1dae8:	e7e9      	b.n	1dabe <bt_keys_clear+0x2a>
   1daea:	bf00      	nop
   1daec:	0002ccc0 	.word	0x0002ccc0

0001daf0 <keys_set>:
{
   1daf0:	b570      	push	{r4, r5, r6, lr}
   1daf2:	b098      	sub	sp, #96	; 0x60
	if (!name) {
   1daf4:	b368      	cbz	r0, 1db52 <keys_set+0x62>
   1daf6:	4614      	mov	r4, r2
   1daf8:	4605      	mov	r5, r0
	len = read_cb(cb_arg, val, sizeof(val));
   1dafa:	2250      	movs	r2, #80	; 0x50
   1dafc:	a902      	add	r1, sp, #8
   1dafe:	4618      	mov	r0, r3
   1db00:	47a0      	blx	r4
	if (len < 0) {
   1db02:	1e04      	subs	r4, r0, #0
   1db04:	db38      	blt.n	1db78 <keys_set+0x88>
	err = bt_settings_decode_key(name, &addr);
   1db06:	a916      	add	r1, sp, #88	; 0x58
   1db08:	4628      	mov	r0, r5
   1db0a:	f007 f8ae 	bl	24c6a <bt_settings_decode_key>
	if (err) {
   1db0e:	4606      	mov	r6, r0
   1db10:	2800      	cmp	r0, #0
   1db12:	d145      	bne.n	1dba0 <keys_set+0xb0>
	settings_name_next(name, &next);
   1db14:	a901      	add	r1, sp, #4
   1db16:	4628      	mov	r0, r5
   1db18:	f005 fb88 	bl	2322c <settings_name_next>
	if (!next) {
   1db1c:	9801      	ldr	r0, [sp, #4]
   1db1e:	2800      	cmp	r0, #0
   1db20:	d052      	beq.n	1dbc8 <keys_set+0xd8>
		id = strtol(next, NULL, 10);
   1db22:	220a      	movs	r2, #10
   1db24:	2100      	movs	r1, #0
   1db26:	f006 feab 	bl	24880 <strtol>
   1db2a:	b2c0      	uxtb	r0, r0
	if (!len) {
   1db2c:	2c00      	cmp	r4, #0
   1db2e:	d04d      	beq.n	1dbcc <keys_set+0xdc>
	keys = bt_keys_get_addr(id, &addr);
   1db30:	a916      	add	r1, sp, #88	; 0x58
   1db32:	f7ff fe69 	bl	1d808 <bt_keys_get_addr>
	if (!keys) {
   1db36:	4605      	mov	r5, r0
   1db38:	2800      	cmp	r0, #0
   1db3a:	d06b      	beq.n	1dc14 <keys_set+0x124>
	if (len != BT_KEYS_STORAGE_LEN) {
   1db3c:	2c50      	cmp	r4, #80	; 0x50
   1db3e:	f040 8083 	bne.w	1dc48 <keys_set+0x158>
		memcpy(keys->storage_start, val, len);
   1db42:	4622      	mov	r2, r4
   1db44:	a902      	add	r1, sp, #8
   1db46:	300c      	adds	r0, #12
   1db48:	f006 ff90 	bl	24a6c <memcpy>
}
   1db4c:	4630      	mov	r0, r6
   1db4e:	b018      	add	sp, #96	; 0x60
   1db50:	bd70      	pop	{r4, r5, r6, pc}
   1db52:	4b49      	ldr	r3, [pc, #292]	; (1dc78 <keys_set+0x188>)
   1db54:	4a49      	ldr	r2, [pc, #292]	; (1dc7c <keys_set+0x18c>)
   1db56:	1a9b      	subs	r3, r3, r2
   1db58:	08db      	lsrs	r3, r3, #3
		BT_ERR("Insufficient number of arguments");
   1db5a:	f04f 0100 	mov.w	r1, #0
   1db5e:	2201      	movs	r2, #1
   1db60:	f362 0102 	bfi	r1, r2, #0, #3
   1db64:	f36f 01c5 	bfc	r1, #3, #3
   1db68:	f363 118f 	bfi	r1, r3, #6, #10
   1db6c:	4844      	ldr	r0, [pc, #272]	; (1dc80 <keys_set+0x190>)
   1db6e:	f7f3 fb85 	bl	1127c <log_0>
		return -EINVAL;
   1db72:	f06f 0615 	mvn.w	r6, #21
   1db76:	e7e9      	b.n	1db4c <keys_set+0x5c>
   1db78:	4b3f      	ldr	r3, [pc, #252]	; (1dc78 <keys_set+0x188>)
   1db7a:	4a40      	ldr	r2, [pc, #256]	; (1dc7c <keys_set+0x18c>)
   1db7c:	1a9b      	subs	r3, r3, r2
   1db7e:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to read value (err %zd)", len);
   1db80:	f04f 0200 	mov.w	r2, #0
   1db84:	2101      	movs	r1, #1
   1db86:	f361 0202 	bfi	r2, r1, #0, #3
   1db8a:	f36f 02c5 	bfc	r2, #3, #3
   1db8e:	f363 128f 	bfi	r2, r3, #6, #10
   1db92:	4621      	mov	r1, r4
   1db94:	483b      	ldr	r0, [pc, #236]	; (1dc84 <keys_set+0x194>)
   1db96:	f7f3 fabb 	bl	11110 <log_1>
		return -EINVAL;
   1db9a:	f06f 0615 	mvn.w	r6, #21
   1db9e:	e7d5      	b.n	1db4c <keys_set+0x5c>
   1dba0:	4b35      	ldr	r3, [pc, #212]	; (1dc78 <keys_set+0x188>)
   1dba2:	4a36      	ldr	r2, [pc, #216]	; (1dc7c <keys_set+0x18c>)
   1dba4:	1a9b      	subs	r3, r3, r2
   1dba6:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to decode address %s", name);
   1dba8:	f04f 0200 	mov.w	r2, #0
   1dbac:	2101      	movs	r1, #1
   1dbae:	f361 0202 	bfi	r2, r1, #0, #3
   1dbb2:	f36f 02c5 	bfc	r2, #3, #3
   1dbb6:	f363 128f 	bfi	r2, r3, #6, #10
   1dbba:	4629      	mov	r1, r5
   1dbbc:	4832      	ldr	r0, [pc, #200]	; (1dc88 <keys_set+0x198>)
   1dbbe:	f7f3 faa7 	bl	11110 <log_1>
		return -EINVAL;
   1dbc2:	f06f 0615 	mvn.w	r6, #21
   1dbc6:	e7c1      	b.n	1db4c <keys_set+0x5c>
		id = BT_ID_DEFAULT;
   1dbc8:	2000      	movs	r0, #0
   1dbca:	e7af      	b.n	1db2c <keys_set+0x3c>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   1dbcc:	aa16      	add	r2, sp, #88	; 0x58
   1dbce:	4601      	mov	r1, r0
   1dbd0:	203f      	movs	r0, #63	; 0x3f
   1dbd2:	f7ff feab 	bl	1d92c <bt_keys_find>
		if (keys) {
   1dbd6:	b128      	cbz	r0, 1dbe4 <keys_set+0xf4>
			(void)memset(keys, 0, sizeof(*keys));
   1dbd8:	225c      	movs	r2, #92	; 0x5c
   1dbda:	2100      	movs	r1, #0
   1dbdc:	f006 ff6a 	bl	24ab4 <memset>
		return 0;
   1dbe0:	4626      	mov	r6, r4
   1dbe2:	e7b3      	b.n	1db4c <keys_set+0x5c>
   1dbe4:	4b24      	ldr	r3, [pc, #144]	; (1dc78 <keys_set+0x188>)
   1dbe6:	4a25      	ldr	r2, [pc, #148]	; (1dc7c <keys_set+0x18c>)
   1dbe8:	1a9b      	subs	r3, r3, r2
   1dbea:	08db      	lsrs	r3, r3, #3
			BT_WARN("Unable to find deleted keys for %s",
   1dbec:	f04f 0500 	mov.w	r5, #0
   1dbf0:	2202      	movs	r2, #2
   1dbf2:	f362 0502 	bfi	r5, r2, #0, #3
   1dbf6:	f36f 05c5 	bfc	r5, #3, #3
   1dbfa:	f363 158f 	bfi	r5, r3, #6, #10
   1dbfe:	a816      	add	r0, sp, #88	; 0x58
   1dc00:	f7f6 fb4a 	bl	14298 <bt_addr_le_str_real>
   1dc04:	f7f3 f90a 	bl	10e1c <z_log_strdup>
   1dc08:	4601      	mov	r1, r0
   1dc0a:	462a      	mov	r2, r5
   1dc0c:	481f      	ldr	r0, [pc, #124]	; (1dc8c <keys_set+0x19c>)
   1dc0e:	f7f3 fa7f 	bl	11110 <log_1>
   1dc12:	e7e5      	b.n	1dbe0 <keys_set+0xf0>
   1dc14:	4b18      	ldr	r3, [pc, #96]	; (1dc78 <keys_set+0x188>)
   1dc16:	4a19      	ldr	r2, [pc, #100]	; (1dc7c <keys_set+0x18c>)
   1dc18:	1a9b      	subs	r3, r3, r2
   1dc1a:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
   1dc1c:	f04f 0400 	mov.w	r4, #0
   1dc20:	2201      	movs	r2, #1
   1dc22:	f362 0402 	bfi	r4, r2, #0, #3
   1dc26:	f36f 04c5 	bfc	r4, #3, #3
   1dc2a:	f363 148f 	bfi	r4, r3, #6, #10
   1dc2e:	a816      	add	r0, sp, #88	; 0x58
   1dc30:	f7f6 fb32 	bl	14298 <bt_addr_le_str_real>
   1dc34:	f7f3 f8f2 	bl	10e1c <z_log_strdup>
   1dc38:	4601      	mov	r1, r0
   1dc3a:	4622      	mov	r2, r4
   1dc3c:	4814      	ldr	r0, [pc, #80]	; (1dc90 <keys_set+0x1a0>)
   1dc3e:	f7f3 fa67 	bl	11110 <log_1>
		return -ENOMEM;
   1dc42:	f06f 060b 	mvn.w	r6, #11
   1dc46:	e781      	b.n	1db4c <keys_set+0x5c>
   1dc48:	4a0b      	ldr	r2, [pc, #44]	; (1dc78 <keys_set+0x188>)
   1dc4a:	4b0c      	ldr	r3, [pc, #48]	; (1dc7c <keys_set+0x18c>)
   1dc4c:	1ad2      	subs	r2, r2, r3
   1dc4e:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Invalid key length %zd != %zu", len,
   1dc50:	f04f 0300 	mov.w	r3, #0
   1dc54:	2101      	movs	r1, #1
   1dc56:	f361 0302 	bfi	r3, r1, #0, #3
   1dc5a:	f36f 03c5 	bfc	r3, #3, #3
   1dc5e:	f362 138f 	bfi	r3, r2, #6, #10
   1dc62:	2250      	movs	r2, #80	; 0x50
   1dc64:	4621      	mov	r1, r4
   1dc66:	480b      	ldr	r0, [pc, #44]	; (1dc94 <keys_set+0x1a4>)
   1dc68:	f7f3 fa88 	bl	1117c <log_2>
			bt_keys_clear(keys);
   1dc6c:	4628      	mov	r0, r5
   1dc6e:	f7ff ff11 	bl	1da94 <bt_keys_clear>
			return -EINVAL;
   1dc72:	f06f 0615 	mvn.w	r6, #21
   1dc76:	e769      	b.n	1db4c <keys_set+0x5c>
   1dc78:	00029f24 	.word	0x00029f24
   1dc7c:	00029ecc 	.word	0x00029ecc
   1dc80:	0002b0d8 	.word	0x0002b0d8
   1dc84:	0002ccc8 	.word	0x0002ccc8
   1dc88:	0002c604 	.word	0x0002c604
   1dc8c:	0002cce8 	.word	0x0002cce8
   1dc90:	0002cd0c 	.word	0x0002cd0c
   1dc94:	0002cd2c 	.word	0x0002cd2c

0001dc98 <bt_keys_store>:
{
   1dc98:	b530      	push	{r4, r5, lr}
   1dc9a:	b08d      	sub	sp, #52	; 0x34
   1dc9c:	4604      	mov	r4, r0
	if (keys->id) {
   1dc9e:	7802      	ldrb	r2, [r0, #0]
   1dca0:	b1b2      	cbz	r2, 1dcd0 <bt_keys_store+0x38>
		u8_to_dec(id, sizeof(id), keys->id);
   1dca2:	ad02      	add	r5, sp, #8
   1dca4:	2104      	movs	r1, #4
   1dca6:	4628      	mov	r0, r5
   1dca8:	f7f2 f990 	bl	ffcc <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1dcac:	9500      	str	r5, [sp, #0]
   1dcae:	1c63      	adds	r3, r4, #1
   1dcb0:	4a15      	ldr	r2, [pc, #84]	; (1dd08 <bt_keys_store+0x70>)
   1dcb2:	2124      	movs	r1, #36	; 0x24
   1dcb4:	a803      	add	r0, sp, #12
   1dcb6:	f7f6 fe29 	bl	1490c <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   1dcba:	2250      	movs	r2, #80	; 0x50
   1dcbc:	f104 010c 	add.w	r1, r4, #12
   1dcc0:	a803      	add	r0, sp, #12
   1dcc2:	f7f4 f927 	bl	11f14 <settings_save_one>
	if (err) {
   1dcc6:	4604      	mov	r4, r0
   1dcc8:	b958      	cbnz	r0, 1dce2 <bt_keys_store+0x4a>
}
   1dcca:	4620      	mov	r0, r4
   1dccc:	b00d      	add	sp, #52	; 0x34
   1dcce:	bd30      	pop	{r4, r5, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1dcd0:	2300      	movs	r3, #0
   1dcd2:	9300      	str	r3, [sp, #0]
   1dcd4:	1c43      	adds	r3, r0, #1
   1dcd6:	4a0c      	ldr	r2, [pc, #48]	; (1dd08 <bt_keys_store+0x70>)
   1dcd8:	2124      	movs	r1, #36	; 0x24
   1dcda:	a803      	add	r0, sp, #12
   1dcdc:	f7f6 fe16 	bl	1490c <bt_settings_encode_key>
   1dce0:	e7eb      	b.n	1dcba <bt_keys_store+0x22>
   1dce2:	4b0a      	ldr	r3, [pc, #40]	; (1dd0c <bt_keys_store+0x74>)
   1dce4:	4a0a      	ldr	r2, [pc, #40]	; (1dd10 <bt_keys_store+0x78>)
   1dce6:	1a9b      	subs	r3, r3, r2
   1dce8:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to save keys (err %d)", err);
   1dcea:	f04f 0200 	mov.w	r2, #0
   1dcee:	2101      	movs	r1, #1
   1dcf0:	f361 0202 	bfi	r2, r1, #0, #3
   1dcf4:	f36f 02c5 	bfc	r2, #3, #3
   1dcf8:	f363 128f 	bfi	r2, r3, #6, #10
   1dcfc:	4601      	mov	r1, r0
   1dcfe:	4805      	ldr	r0, [pc, #20]	; (1dd14 <bt_keys_store+0x7c>)
   1dd00:	f7f3 fa06 	bl	11110 <log_1>
		return err;
   1dd04:	e7e1      	b.n	1dcca <bt_keys_store+0x32>
   1dd06:	bf00      	nop
   1dd08:	0002ccc0 	.word	0x0002ccc0
   1dd0c:	00029f24 	.word	0x00029f24
   1dd10:	00029ecc 	.word	0x00029ecc
   1dd14:	0002cd4c 	.word	0x0002cd4c

0001dd18 <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
   1dd18:	4b03      	ldr	r3, [pc, #12]	; (1dd28 <pool_id+0x10>)
   1dd1a:	1ac0      	subs	r0, r0, r3
   1dd1c:	10c0      	asrs	r0, r0, #3
}
   1dd1e:	4b03      	ldr	r3, [pc, #12]	; (1dd2c <pool_id+0x14>)
   1dd20:	fb03 f000 	mul.w	r0, r3, r0
   1dd24:	4770      	bx	lr
   1dd26:	bf00      	nop
   1dd28:	20000804 	.word	0x20000804
   1dd2c:	cccccccd 	.word	0xcccccccd

0001dd30 <net_buf_pool_get>:
	return &_net_buf_pool_list[id];
   1dd30:	eb00 0080 	add.w	r0, r0, r0, lsl #2
}
   1dd34:	4b01      	ldr	r3, [pc, #4]	; (1dd3c <net_buf_pool_get+0xc>)
   1dd36:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1dd3a:	4770      	bx	lr
   1dd3c:	20000804 	.word	0x20000804

0001dd40 <net_buf_id>:

int net_buf_id(struct net_buf *buf)
{
   1dd40:	b510      	push	{r4, lr}
   1dd42:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1dd44:	7980      	ldrb	r0, [r0, #6]
   1dd46:	f7ff fff3 	bl	1dd30 <net_buf_pool_get>

	return buf - pool->__bufs;
   1dd4a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   1dd4c:	1a24      	subs	r4, r4, r0
   1dd4e:	10e4      	asrs	r4, r4, #3
}
   1dd50:	4801      	ldr	r0, [pc, #4]	; (1dd58 <net_buf_id+0x18>)
   1dd52:	fb00 f004 	mul.w	r0, r0, r4
   1dd56:	bd10      	pop	{r4, pc}
   1dd58:	aaaaaaab 	.word	0xaaaaaaab

0001dd5c <hfclk_on_callback>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_temp_task_trigger(NRF_TEMP_Type * p_reg, nrf_temp_task_t task)
{
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
   1dd5c:	4b01      	ldr	r3, [pc, #4]	; (1dd64 <hfclk_on_callback+0x8>)
   1dd5e:	2201      	movs	r2, #1
   1dd60:	601a      	str	r2, [r3, #0]
			      struct onoff_client *cli,
			      uint32_t state,
			      int res)
{
	nrf_temp_task_trigger(NRF_TEMP, NRF_TEMP_TASK_START);
}
   1dd62:	4770      	bx	lr
   1dd64:	4000c000 	.word	0x4000c000

0001dd68 <temp_nrf5_channel_get>:

static int temp_nrf5_channel_get(const struct device *dev,
				 enum sensor_channel chan,
				 struct sensor_value *val)
{
	struct temp_nrf5_data *data = dev->data;
   1dd68:	6903      	ldr	r3, [r0, #16]
	int32_t uval;


	if (chan != SENSOR_CHAN_DIE_TEMP) {
   1dd6a:	290c      	cmp	r1, #12
   1dd6c:	d110      	bne.n	1dd90 <temp_nrf5_channel_get+0x28>
		return -ENOTSUP;
	}

	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
   1dd6e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   1dd70:	4b09      	ldr	r3, [pc, #36]	; (1dd98 <temp_nrf5_channel_get+0x30>)
   1dd72:	fb03 f101 	mul.w	r1, r3, r1
	val->val1 = uval / 1000000;
   1dd76:	4809      	ldr	r0, [pc, #36]	; (1dd9c <temp_nrf5_channel_get+0x34>)
   1dd78:	fb80 3001 	smull	r3, r0, r0, r1
   1dd7c:	17cb      	asrs	r3, r1, #31
   1dd7e:	ebc3 43a0 	rsb	r3, r3, r0, asr #18
   1dd82:	6013      	str	r3, [r2, #0]
	val->val2 = uval % 1000000;
   1dd84:	4806      	ldr	r0, [pc, #24]	; (1dda0 <temp_nrf5_channel_get+0x38>)
   1dd86:	fb00 1313 	mls	r3, r0, r3, r1
   1dd8a:	6053      	str	r3, [r2, #4]

	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);

	return 0;
   1dd8c:	2000      	movs	r0, #0
   1dd8e:	4770      	bx	lr
		return -ENOTSUP;
   1dd90:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   1dd94:	4770      	bx	lr
   1dd96:	bf00      	nop
   1dd98:	0003d090 	.word	0x0003d090
   1dd9c:	431bde83 	.word	0x431bde83
   1dda0:	000f4240 	.word	0x000f4240

0001dda4 <temp_nrf5_sample_fetch>:
{
   1dda4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   1dda8:	b084      	sub	sp, #16
	struct temp_nrf5_data *data = dev->data;
   1ddaa:	6904      	ldr	r4, [r0, #16]
	if (data->clk_mgr == NULL) {
   1ddac:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1ddae:	b373      	cbz	r3, 1de0e <temp_nrf5_sample_fetch+0x6a>
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
   1ddb0:	2938      	cmp	r1, #56	; 0x38
   1ddb2:	d001      	beq.n	1ddb8 <temp_nrf5_sample_fetch+0x14>
   1ddb4:	290c      	cmp	r1, #12
   1ddb6:	d12d      	bne.n	1de14 <temp_nrf5_sample_fetch+0x70>
	k_mutex_lock(&data->mutex, K_FOREVER);
   1ddb8:	f104 0618 	add.w	r6, r4, #24
   1ddbc:	f04f 38ff 	mov.w	r8, #4294967295
   1ddc0:	f04f 39ff 	mov.w	r9, #4294967295
	return z_impl_k_mutex_lock(mutex, timeout);
   1ddc4:	4642      	mov	r2, r8
   1ddc6:	464b      	mov	r3, r9
   1ddc8:	4630      	mov	r0, r6
   1ddca:	f001 feab 	bl	1fb24 <z_impl_k_mutex_lock>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   1ddce:	2500      	movs	r5, #0
   1ddd0:	9503      	str	r5, [sp, #12]
   1ddd2:	4b12      	ldr	r3, [pc, #72]	; (1de1c <temp_nrf5_sample_fetch+0x78>)
   1ddd4:	9301      	str	r3, [sp, #4]
   1ddd6:	2303      	movs	r3, #3
   1ddd8:	9302      	str	r3, [sp, #8]
	r = onoff_request(data->clk_mgr, &cli);
   1ddda:	4669      	mov	r1, sp
   1dddc:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1ddde:	f003 fce8 	bl	217b2 <onoff_request>
	return z_impl_k_sem_take(sem, timeout);
   1dde2:	4642      	mov	r2, r8
   1dde4:	464b      	mov	r3, r9
   1dde6:	4620      	mov	r0, r4
   1dde8:	f001 ffce 	bl	1fd88 <z_impl_k_sem_take>
	r = onoff_release(data->clk_mgr);
   1ddec:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1ddee:	f003 fd3c 	bl	2186a <onoff_release>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
}

NRF_STATIC_INLINE int32_t nrf_temp_result_get(NRF_TEMP_Type const * p_reg)
{
    int32_t raw_measurement = p_reg->TEMP;
   1ddf2:	4b0b      	ldr	r3, [pc, #44]	; (1de20 <temp_nrf5_sample_fetch+0x7c>)
   1ddf4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
	data->sample = nrf_temp_result_get(NRF_TEMP);
   1ddf8:	62e3      	str	r3, [r4, #44]	; 0x2c
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
   1ddfa:	4b0a      	ldr	r3, [pc, #40]	; (1de24 <temp_nrf5_sample_fetch+0x80>)
   1ddfc:	2201      	movs	r2, #1
   1ddfe:	601a      	str	r2, [r3, #0]
	return z_impl_k_mutex_unlock(mutex);
   1de00:	4630      	mov	r0, r6
   1de02:	f001 ff19 	bl	1fc38 <z_impl_k_mutex_unlock>
	return 0;
   1de06:	4628      	mov	r0, r5
}
   1de08:	b004      	add	sp, #16
   1de0a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
		return -EAGAIN;
   1de0e:	f06f 000a 	mvn.w	r0, #10
   1de12:	e7f9      	b.n	1de08 <temp_nrf5_sample_fetch+0x64>
		return -ENOTSUP;
   1de14:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1de18:	e7f6      	b.n	1de08 <temp_nrf5_sample_fetch+0x64>
   1de1a:	bf00      	nop
   1de1c:	0001dd5d 	.word	0x0001dd5d
   1de20:	4000c000 	.word	0x4000c000
   1de24:	4000c004 	.word	0x4000c004

0001de28 <temp_nrf5_init>:
	.sample_fetch = temp_nrf5_sample_fetch,
	.channel_get = temp_nrf5_channel_get,
};

static int temp_nrf5_init(const struct device *dev)
{
   1de28:	b510      	push	{r4, lr}
	struct temp_nrf5_data *data = dev->data;
   1de2a:	6904      	ldr	r4, [r0, #16]

	LOG_DBG("");

	/* A null clk_mgr indicates sensor has not been initialized */
	data->clk_mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
   1de2c:	2000      	movs	r0, #0
   1de2e:	f7f4 fce1 	bl	127f4 <z_nrf_clock_control_get_onoff>
	data->clk_mgr =
   1de32:	6320      	str	r0, [r4, #48]	; 0x30
	return z_impl_k_sem_init(sem, initial_count, limit);
   1de34:	f04f 32ff 	mov.w	r2, #4294967295
   1de38:	2100      	movs	r1, #0
   1de3a:	4620      	mov	r0, r4
   1de3c:	f00b fa84 	bl	29348 <z_impl_k_sem_init>
	__ASSERT_NO_MSG(data->clk_mgr);

	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	k_mutex_init(&data->mutex);
   1de40:	f104 0018 	add.w	r0, r4, #24
	return z_impl_k_mutex_init(mutex);
   1de44:	f00b f998 	bl	29178 <z_impl_k_mutex_init>

	IRQ_CONNECT(
   1de48:	2200      	movs	r2, #0
   1de4a:	2101      	movs	r1, #1
   1de4c:	200c      	movs	r0, #12
   1de4e:	f7f5 fb6b 	bl	13528 <z_arm_irq_priority_set>
		DT_INST_IRQN(0),
		DT_INST_IRQ(0, priority),
		temp_nrf5_isr,
		DEVICE_DT_INST_GET(0),
		0);
	irq_enable(DT_INST_IRQN(0));
   1de52:	200c      	movs	r0, #12
   1de54:	f7f5 fb36 	bl	134c4 <arch_irq_enable>
    p_reg->INTENSET = mask;
   1de58:	4b02      	ldr	r3, [pc, #8]	; (1de64 <temp_nrf5_init+0x3c>)
   1de5a:	2201      	movs	r2, #1
   1de5c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_temp_int_enable(NRF_TEMP, NRF_TEMP_INT_DATARDY_MASK);

	return 0;
}
   1de60:	2000      	movs	r0, #0
   1de62:	bd10      	pop	{r4, pc}
   1de64:	4000c000 	.word	0x4000c000

0001de68 <temp_nrf5_isr>:
{
   1de68:	b508      	push	{r3, lr}
	struct temp_nrf5_data *data = dev->data;
   1de6a:	6900      	ldr	r0, [r0, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1de6c:	4b03      	ldr	r3, [pc, #12]	; (1de7c <temp_nrf5_isr+0x14>)
   1de6e:	2200      	movs	r2, #0
   1de70:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1de72:	681b      	ldr	r3, [r3, #0]
	z_impl_k_sem_give(sem);
   1de74:	f001 ff60 	bl	1fd38 <z_impl_k_sem_give>
}
   1de78:	bd08      	pop	{r3, pc}
   1de7a:	bf00      	nop
   1de7c:	4000c100 	.word	0x4000c100

0001de80 <nvmc_wait_ready>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1de80:	4b03      	ldr	r3, [pc, #12]	; (1de90 <nvmc_wait_ready+0x10>)
   1de82:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
#endif /* CONFIG_SOC_FLASH_NRF_UICR */
}

static void nvmc_wait_ready(void)
{
	while (!nrfx_nvmc_write_done_check()) {
   1de86:	f013 0f01 	tst.w	r3, #1
   1de8a:	d0f9      	beq.n	1de80 <nvmc_wait_ready>
	}
}
   1de8c:	4770      	bx	lr
   1de8e:	bf00      	nop
   1de90:	4001e000 	.word	0x4001e000

0001de94 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   1de94:	4b02      	ldr	r3, [pc, #8]	; (1dea0 <flash_nrf_pages_layout+0xc>)
   1de96:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1de98:	2301      	movs	r3, #1
   1de9a:	6013      	str	r3, [r2, #0]
}
   1de9c:	4770      	bx	lr
   1de9e:	bf00      	nop
   1dea0:	2000288c 	.word	0x2000288c

0001dea4 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   1dea4:	4800      	ldr	r0, [pc, #0]	; (1dea8 <flash_nrf_get_parameters+0x4>)
   1dea6:	4770      	bx	lr
   1dea8:	0002ce3c 	.word	0x0002ce3c

0001deac <erase_synchronously>:
		 &flash_nrf_api);

#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE

static int erase_synchronously(uint32_t addr, uint32_t size)
{
   1deac:	b500      	push	{lr}
   1deae:	b087      	sub	sp, #28
	struct flash_context context = {
   1deb0:	ab02      	add	r3, sp, #8
   1deb2:	2200      	movs	r2, #0
   1deb4:	9202      	str	r2, [sp, #8]
   1deb6:	9205      	str	r2, [sp, #20]
   1deb8:	9003      	str	r0, [sp, #12]
   1deba:	9104      	str	r1, [sp, #16]
   1debc:	2201      	movs	r2, #1
   1debe:	f88d 2014 	strb.w	r2, [sp, #20]
#if defined(CONFIG_SOC_FLASH_NRF_PARTIAL_ERASE)
		.flash_addr_next = addr
#endif
	};

	struct flash_op_desc flash_op_desc = {
   1dec2:	4a06      	ldr	r2, [pc, #24]	; (1dedc <erase_synchronously+0x30>)
   1dec4:	9200      	str	r2, [sp, #0]
   1dec6:	9301      	str	r3, [sp, #4]
		.handler = erase_op,
		.context = &context
	};

	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1dec8:	4805      	ldr	r0, [pc, #20]	; (1dee0 <erase_synchronously+0x34>)
   1deca:	f000 fe5b 	bl	1eb84 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1dece:	4668      	mov	r0, sp
   1ded0:	f000 fe5e 	bl	1eb90 <nrf_flash_sync_exe>
}
   1ded4:	b007      	add	sp, #28
   1ded6:	f85d fb04 	ldr.w	pc, [sp], #4
   1deda:	bf00      	nop
   1dedc:	000283d1 	.word	0x000283d1
   1dee0:	00015e64 	.word	0x00015e64

0001dee4 <write_synchronously>:

static int write_synchronously(off_t addr, const void *data, size_t len)
{
   1dee4:	b500      	push	{lr}
   1dee6:	b087      	sub	sp, #28
	struct flash_context context = {
   1dee8:	9102      	str	r1, [sp, #8]
   1deea:	9003      	str	r0, [sp, #12]
   1deec:	9204      	str	r2, [sp, #16]
   1deee:	2301      	movs	r3, #1
   1def0:	f88d 3014 	strb.w	r3, [sp, #20]
		.flash_addr = addr,
		.len = len,
		.enable_time_limit = 1 /* enable time limit */
	};

	struct flash_op_desc flash_op_desc = {
   1def4:	4b06      	ldr	r3, [pc, #24]	; (1df10 <write_synchronously+0x2c>)
   1def6:	9300      	str	r3, [sp, #0]
   1def8:	ab02      	add	r3, sp, #8
   1defa:	9301      	str	r3, [sp, #4]
		.handler = write_op,
		.context = &context
	};

	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   1defc:	f641 504c 	movw	r0, #7500	; 0x1d4c
   1df00:	f000 fe40 	bl	1eb84 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1df04:	4668      	mov	r0, sp
   1df06:	f000 fe43 	bl	1eb90 <nrf_flash_sync_exe>
}
   1df0a:	b007      	add	sp, #28
   1df0c:	f85d fb04 	ldr.w	pc, [sp], #4
   1df10:	00028435 	.word	0x00028435

0001df14 <flash_nrf_erase>:
{
   1df14:	b570      	push	{r4, r5, r6, lr}
   1df16:	460c      	mov	r4, r1
   1df18:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1df1a:	f00a ff70 	bl	28dfe <nrfx_nvmc_flash_page_size_get>
   1df1e:	4606      	mov	r6, r0
	size_t flash_size = nrfx_nvmc_flash_size_get();
   1df20:	f00a ff69 	bl	28df6 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   1df24:	42a0      	cmp	r0, r4
   1df26:	d914      	bls.n	1df52 <flash_nrf_erase+0x3e>
   1df28:	2c00      	cmp	r4, #0
   1df2a:	db12      	blt.n	1df52 <flash_nrf_erase+0x3e>
	    addr < 0 ||
   1df2c:	42a8      	cmp	r0, r5
   1df2e:	d310      	bcc.n	1df52 <flash_nrf_erase+0x3e>
	    (addr) + len > flash_size) {
   1df30:	1963      	adds	r3, r4, r5
	    len > flash_size ||
   1df32:	4283      	cmp	r3, r0
   1df34:	d80d      	bhi.n	1df52 <flash_nrf_erase+0x3e>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1df36:	fbb4 f3f6 	udiv	r3, r4, r6
   1df3a:	fb06 4313 	mls	r3, r6, r3, r4
   1df3e:	b9f3      	cbnz	r3, 1df7e <flash_nrf_erase+0x6a>
   1df40:	fbb5 f3f6 	udiv	r3, r5, r6
   1df44:	fb06 5313 	mls	r3, r6, r3, r5
   1df48:	b9cb      	cbnz	r3, 1df7e <flash_nrf_erase+0x6a>
		if (!n_pages) {
   1df4a:	42ae      	cmp	r6, r5
   1df4c:	d92c      	bls.n	1dfa8 <flash_nrf_erase+0x94>
			return 0;
   1df4e:	2400      	movs	r4, #0
   1df50:	e013      	b.n	1df7a <flash_nrf_erase+0x66>
   1df52:	4a22      	ldr	r2, [pc, #136]	; (1dfdc <flash_nrf_erase+0xc8>)
   1df54:	4b22      	ldr	r3, [pc, #136]	; (1dfe0 <flash_nrf_erase+0xcc>)
   1df56:	1ad2      	subs	r2, r2, r3
   1df58:	08d2      	lsrs	r2, r2, #3
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1df5a:	f04f 0300 	mov.w	r3, #0
   1df5e:	2101      	movs	r1, #1
   1df60:	f361 0302 	bfi	r3, r1, #0, #3
   1df64:	f36f 03c5 	bfc	r3, #3, #3
   1df68:	f362 138f 	bfi	r3, r2, #6, #10
   1df6c:	462a      	mov	r2, r5
   1df6e:	4621      	mov	r1, r4
   1df70:	481c      	ldr	r0, [pc, #112]	; (1dfe4 <flash_nrf_erase+0xd0>)
   1df72:	f7f3 f903 	bl	1117c <log_2>
		return -EINVAL;
   1df76:	f06f 0415 	mvn.w	r4, #21
}
   1df7a:	4620      	mov	r0, r4
   1df7c:	bd70      	pop	{r4, r5, r6, pc}
   1df7e:	4a17      	ldr	r2, [pc, #92]	; (1dfdc <flash_nrf_erase+0xc8>)
   1df80:	4b17      	ldr	r3, [pc, #92]	; (1dfe0 <flash_nrf_erase+0xcc>)
   1df82:	1ad2      	subs	r2, r2, r3
   1df84:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   1df86:	f04f 0300 	mov.w	r3, #0
   1df8a:	2101      	movs	r1, #1
   1df8c:	f361 0302 	bfi	r3, r1, #0, #3
   1df90:	f36f 03c5 	bfc	r3, #3, #3
   1df94:	f362 138f 	bfi	r3, r2, #6, #10
   1df98:	462a      	mov	r2, r5
   1df9a:	4621      	mov	r1, r4
   1df9c:	4812      	ldr	r0, [pc, #72]	; (1dfe8 <flash_nrf_erase+0xd4>)
   1df9e:	f7f3 f8ed 	bl	1117c <log_2>
			return -EINVAL;
   1dfa2:	f06f 0415 	mvn.w	r4, #21
   1dfa6:	e7e8      	b.n	1df7a <flash_nrf_erase+0x66>
	return z_impl_k_sem_take(sem, timeout);
   1dfa8:	f04f 32ff 	mov.w	r2, #4294967295
   1dfac:	f04f 33ff 	mov.w	r3, #4294967295
   1dfb0:	480e      	ldr	r0, [pc, #56]	; (1dfec <flash_nrf_erase+0xd8>)
   1dfb2:	f001 fee9 	bl	1fd88 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1dfb6:	f00a feed 	bl	28d94 <nrf_flash_sync_is_required>
   1dfba:	b140      	cbz	r0, 1dfce <flash_nrf_erase+0xba>
		ret = erase_synchronously(addr, size);
   1dfbc:	4629      	mov	r1, r5
   1dfbe:	4620      	mov	r0, r4
   1dfc0:	f7ff ff74 	bl	1deac <erase_synchronously>
   1dfc4:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1dfc6:	4809      	ldr	r0, [pc, #36]	; (1dfec <flash_nrf_erase+0xd8>)
   1dfc8:	f001 feb6 	bl	1fd38 <z_impl_k_sem_give>
	return ret;
   1dfcc:	e7d5      	b.n	1df7a <flash_nrf_erase+0x66>
		ret = erase(addr, size);
   1dfce:	4629      	mov	r1, r5
   1dfd0:	4620      	mov	r0, r4
   1dfd2:	f00a fa22 	bl	2841a <erase>
   1dfd6:	4604      	mov	r4, r0
   1dfd8:	e7f5      	b.n	1dfc6 <flash_nrf_erase+0xb2>
   1dfda:	bf00      	nop
   1dfdc:	00029f5c 	.word	0x00029f5c
   1dfe0:	00029ecc 	.word	0x00029ecc
   1dfe4:	0002cdb8 	.word	0x0002cdb8
   1dfe8:	0002cdd8 	.word	0x0002cdd8
   1dfec:	20002894 	.word	0x20002894

0001dff0 <flash_nrf_write>:
{
   1dff0:	b570      	push	{r4, r5, r6, lr}
   1dff2:	460c      	mov	r4, r1
   1dff4:	4616      	mov	r6, r2
   1dff6:	461d      	mov	r5, r3
	size_t flash_size = nrfx_nvmc_flash_size_get();
   1dff8:	f00a fefd 	bl	28df6 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   1dffc:	42a0      	cmp	r0, r4
   1dffe:	d90f      	bls.n	1e020 <flash_nrf_write+0x30>
   1e000:	2c00      	cmp	r4, #0
   1e002:	db0d      	blt.n	1e020 <flash_nrf_write+0x30>
	    addr < 0 ||
   1e004:	42a8      	cmp	r0, r5
   1e006:	d30b      	bcc.n	1e020 <flash_nrf_write+0x30>
	    (addr) + len > flash_size) {
   1e008:	1963      	adds	r3, r4, r5
	    len > flash_size ||
   1e00a:	4298      	cmp	r0, r3
   1e00c:	d308      	bcc.n	1e020 <flash_nrf_write+0x30>
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   1e00e:	f014 0f03 	tst.w	r4, #3
   1e012:	d11b      	bne.n	1e04c <flash_nrf_write+0x5c>
   1e014:	f015 0f03 	tst.w	r5, #3
   1e018:	d118      	bne.n	1e04c <flash_nrf_write+0x5c>
	if (!len) {
   1e01a:	bb65      	cbnz	r5, 1e076 <flash_nrf_write+0x86>
		return 0;
   1e01c:	2400      	movs	r4, #0
   1e01e:	e013      	b.n	1e048 <flash_nrf_write+0x58>
   1e020:	4a22      	ldr	r2, [pc, #136]	; (1e0ac <flash_nrf_write+0xbc>)
   1e022:	4b23      	ldr	r3, [pc, #140]	; (1e0b0 <flash_nrf_write+0xc0>)
   1e024:	1ad2      	subs	r2, r2, r3
   1e026:	08d2      	lsrs	r2, r2, #3
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1e028:	f04f 0300 	mov.w	r3, #0
   1e02c:	2101      	movs	r1, #1
   1e02e:	f361 0302 	bfi	r3, r1, #0, #3
   1e032:	f36f 03c5 	bfc	r3, #3, #3
   1e036:	f362 138f 	bfi	r3, r2, #6, #10
   1e03a:	462a      	mov	r2, r5
   1e03c:	4621      	mov	r1, r4
   1e03e:	481d      	ldr	r0, [pc, #116]	; (1e0b4 <flash_nrf_write+0xc4>)
   1e040:	f7f3 f89c 	bl	1117c <log_2>
		return -EINVAL;
   1e044:	f06f 0415 	mvn.w	r4, #21
}
   1e048:	4620      	mov	r0, r4
   1e04a:	bd70      	pop	{r4, r5, r6, pc}
   1e04c:	4a17      	ldr	r2, [pc, #92]	; (1e0ac <flash_nrf_write+0xbc>)
   1e04e:	4b18      	ldr	r3, [pc, #96]	; (1e0b0 <flash_nrf_write+0xc0>)
   1e050:	1ad2      	subs	r2, r2, r3
   1e052:	08d2      	lsrs	r2, r2, #3
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1e054:	f04f 0300 	mov.w	r3, #0
   1e058:	2101      	movs	r1, #1
   1e05a:	f361 0302 	bfi	r3, r1, #0, #3
   1e05e:	f36f 03c5 	bfc	r3, #3, #3
   1e062:	f362 138f 	bfi	r3, r2, #6, #10
   1e066:	462a      	mov	r2, r5
   1e068:	4621      	mov	r1, r4
   1e06a:	4813      	ldr	r0, [pc, #76]	; (1e0b8 <flash_nrf_write+0xc8>)
   1e06c:	f7f3 f886 	bl	1117c <log_2>
		return -EINVAL;
   1e070:	f06f 0415 	mvn.w	r4, #21
   1e074:	e7e8      	b.n	1e048 <flash_nrf_write+0x58>
	return z_impl_k_sem_take(sem, timeout);
   1e076:	f04f 32ff 	mov.w	r2, #4294967295
   1e07a:	f04f 33ff 	mov.w	r3, #4294967295
   1e07e:	480f      	ldr	r0, [pc, #60]	; (1e0bc <flash_nrf_write+0xcc>)
   1e080:	f001 fe82 	bl	1fd88 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1e084:	f00a fe86 	bl	28d94 <nrf_flash_sync_is_required>
   1e088:	b148      	cbz	r0, 1e09e <flash_nrf_write+0xae>
		ret = write_synchronously(addr, data, len);
   1e08a:	462a      	mov	r2, r5
   1e08c:	4631      	mov	r1, r6
   1e08e:	4620      	mov	r0, r4
   1e090:	f7ff ff28 	bl	1dee4 <write_synchronously>
   1e094:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1e096:	4809      	ldr	r0, [pc, #36]	; (1e0bc <flash_nrf_write+0xcc>)
   1e098:	f001 fe4e 	bl	1fd38 <z_impl_k_sem_give>
	return ret;
   1e09c:	e7d4      	b.n	1e048 <flash_nrf_write+0x58>
		ret = write(addr, data, len);
   1e09e:	462a      	mov	r2, r5
   1e0a0:	4631      	mov	r1, r6
   1e0a2:	4620      	mov	r0, r4
   1e0a4:	f00a f9eb 	bl	2847e <write>
   1e0a8:	4604      	mov	r4, r0
   1e0aa:	e7f4      	b.n	1e096 <flash_nrf_write+0xa6>
   1e0ac:	00029f5c 	.word	0x00029f5c
   1e0b0:	00029ecc 	.word	0x00029ecc
   1e0b4:	0002cdb8 	.word	0x0002cdb8
   1e0b8:	0002cdf8 	.word	0x0002cdf8
   1e0bc:	20002894 	.word	0x20002894

0001e0c0 <flash_nrf_read>:
{
   1e0c0:	b570      	push	{r4, r5, r6, lr}
   1e0c2:	460c      	mov	r4, r1
   1e0c4:	4616      	mov	r6, r2
   1e0c6:	461d      	mov	r5, r3
	size_t flash_size = nrfx_nvmc_flash_size_get();
   1e0c8:	f00a fe95 	bl	28df6 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   1e0cc:	42a0      	cmp	r0, r4
   1e0ce:	d909      	bls.n	1e0e4 <flash_nrf_read+0x24>
   1e0d0:	2c00      	cmp	r4, #0
   1e0d2:	db07      	blt.n	1e0e4 <flash_nrf_read+0x24>
	    addr < 0 ||
   1e0d4:	42a8      	cmp	r0, r5
   1e0d6:	d305      	bcc.n	1e0e4 <flash_nrf_read+0x24>
	    (addr) + len > flash_size) {
   1e0d8:	192b      	adds	r3, r5, r4
	    len > flash_size ||
   1e0da:	4298      	cmp	r0, r3
   1e0dc:	d302      	bcc.n	1e0e4 <flash_nrf_read+0x24>
	if (!len) {
   1e0de:	b9b5      	cbnz	r5, 1e10e <flash_nrf_read+0x4e>
		return 0;
   1e0e0:	2000      	movs	r0, #0
   1e0e2:	e013      	b.n	1e10c <flash_nrf_read+0x4c>
   1e0e4:	4a0d      	ldr	r2, [pc, #52]	; (1e11c <flash_nrf_read+0x5c>)
   1e0e6:	4b0e      	ldr	r3, [pc, #56]	; (1e120 <flash_nrf_read+0x60>)
   1e0e8:	1ad2      	subs	r2, r2, r3
   1e0ea:	08d2      	lsrs	r2, r2, #3
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1e0ec:	f04f 0300 	mov.w	r3, #0
   1e0f0:	2101      	movs	r1, #1
   1e0f2:	f361 0302 	bfi	r3, r1, #0, #3
   1e0f6:	f36f 03c5 	bfc	r3, #3, #3
   1e0fa:	f362 138f 	bfi	r3, r2, #6, #10
   1e0fe:	462a      	mov	r2, r5
   1e100:	4621      	mov	r1, r4
   1e102:	4808      	ldr	r0, [pc, #32]	; (1e124 <flash_nrf_read+0x64>)
   1e104:	f7f3 f83a 	bl	1117c <log_2>
		return -EINVAL;
   1e108:	f06f 0015 	mvn.w	r0, #21
}
   1e10c:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(data, (void *)addr, len);
   1e10e:	462a      	mov	r2, r5
   1e110:	4621      	mov	r1, r4
   1e112:	4630      	mov	r0, r6
   1e114:	f006 fcaa 	bl	24a6c <memcpy>
	return 0;
   1e118:	2000      	movs	r0, #0
   1e11a:	e7f7      	b.n	1e10c <flash_nrf_read+0x4c>
   1e11c:	00029f5c 	.word	0x00029f5c
   1e120:	00029ecc 	.word	0x00029ecc
   1e124:	0002cdb8 	.word	0x0002cdb8

0001e128 <nrf_flash_init>:
{
   1e128:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1e12a:	2201      	movs	r2, #1
   1e12c:	4611      	mov	r1, r2
   1e12e:	4807      	ldr	r0, [pc, #28]	; (1e14c <nrf_flash_init+0x24>)
   1e130:	f00b f90a 	bl	29348 <z_impl_k_sem_init>
	nrf_flash_sync_init();
   1e134:	f000 fd1c 	bl	1eb70 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1e138:	f00a fe65 	bl	28e06 <nrfx_nvmc_flash_page_count_get>
   1e13c:	4c04      	ldr	r4, [pc, #16]	; (1e150 <nrf_flash_init+0x28>)
   1e13e:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1e140:	f00a fe5d 	bl	28dfe <nrfx_nvmc_flash_page_size_get>
   1e144:	6060      	str	r0, [r4, #4]
}
   1e146:	2000      	movs	r0, #0
   1e148:	bd10      	pop	{r4, pc}
   1e14a:	bf00      	nop
   1e14c:	20002894 	.word	0x20002894
   1e150:	2000288c 	.word	0x2000288c

0001e154 <random_byte_get>:
	__asm__ volatile(
   1e154:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e158:	f3ef 8211 	mrs	r2, BASEPRI
   1e15c:	f383 8811 	msr	BASEPRI, r3
   1e160:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1e164:	4b09      	ldr	r3, [pc, #36]	; (1e18c <random_byte_get+0x38>)
   1e166:	681b      	ldr	r3, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1e168:	b16b      	cbz	r3, 1e186 <random_byte_get+0x32>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1e16a:	4b09      	ldr	r3, [pc, #36]	; (1e190 <random_byte_get+0x3c>)
   1e16c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
		retval = nrf_rng_random_value_get(NRF_RNG);
   1e170:	b2c0      	uxtb	r0, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e172:	f503 7380 	add.w	r3, r3, #256	; 0x100
   1e176:	2100      	movs	r1, #0
   1e178:	6019      	str	r1, [r3, #0]
   1e17a:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   1e17c:	f382 8811 	msr	BASEPRI, r2
   1e180:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1e184:	4770      	bx	lr
	int retval = -EAGAIN;
   1e186:	f06f 000a 	mvn.w	r0, #10
   1e18a:	e7f7      	b.n	1e17c <random_byte_get+0x28>
   1e18c:	4000d100 	.word	0x4000d100
   1e190:	4000d000 	.word	0x4000d000

0001e194 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1e194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e198:	4606      	mov	r6, r0
	uint32_t last  = rngp->last;
   1e19a:	f890 c002 	ldrb.w	ip, [r0, #2]
	uint32_t mask  = rngp->mask;
   1e19e:	78c5      	ldrb	r5, [r0, #3]
   1e1a0:	462f      	mov	r7, r5
	__asm__ volatile(
   1e1a2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e1a6:	f3ef 8811 	mrs	r8, BASEPRI
   1e1aa:	f383 8811 	msr	BASEPRI, r3
   1e1ae:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1e1b2:	7800      	ldrb	r0, [r0, #0]
   1e1b4:	4604      	mov	r4, r0
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1e1b6:	f896 e001 	ldrb.w	lr, [r6, #1]

	available = (last - first) & mask;
   1e1ba:	ebac 0c00 	sub.w	ip, ip, r0
   1e1be:	ea0c 0c05 	and.w	ip, ip, r5
	if (available < len) {
   1e1c2:	4562      	cmp	r2, ip
   1e1c4:	d901      	bls.n	1e1ca <rng_pool_get+0x36>
		len = available;
   1e1c6:	fa1f f28c 	uxth.w	r2, ip

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1e1ca:	1883      	adds	r3, r0, r2
   1e1cc:	402b      	ands	r3, r5
   1e1ce:	7033      	strb	r3, [r6, #0]
	__asm__ volatile(
   1e1d0:	f388 8811 	msr	BASEPRI, r8
   1e1d4:	f3bf 8f6f 	isb	sy
	uint8_t *dst   = buf;
   1e1d8:	460b      	mov	r3, r1
}
   1e1da:	e006      	b.n	1e1ea <rng_pool_get+0x56>
	irq_unlock(key);

	while (likely(len--)) {
		*dst++ = rngp->buffer[first];
   1e1dc:	1932      	adds	r2, r6, r4
   1e1de:	7952      	ldrb	r2, [r2, #5]
   1e1e0:	f803 2b01 	strb.w	r2, [r3], #1
		first = (first + 1) & mask;
   1e1e4:	3401      	adds	r4, #1
   1e1e6:	403c      	ands	r4, r7
	while (likely(len--)) {
   1e1e8:	462a      	mov	r2, r5
   1e1ea:	1e55      	subs	r5, r2, #1
   1e1ec:	b2ad      	uxth	r5, r5
   1e1ee:	2a00      	cmp	r2, #0
   1e1f0:	d1f4      	bne.n	1e1dc <rng_pool_get+0x48>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1e1f2:	4570      	cmp	r0, lr
   1e1f4:	d10d      	bne.n	1e212 <rng_pool_get+0x7e>
	__asm__ volatile(
   1e1f6:	f04f 0040 	mov.w	r0, #64	; 0x40
   1e1fa:	f3ef 8211 	mrs	r2, BASEPRI
   1e1fe:	f380 8811 	msr	BASEPRI, r0
   1e202:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1e206:	7830      	ldrb	r0, [r6, #0]
   1e208:	7070      	strb	r0, [r6, #1]
	__asm__ volatile(
   1e20a:	f382 8811 	msr	BASEPRI, r2
   1e20e:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1e212:	1a5b      	subs	r3, r3, r1
   1e214:	b298      	uxth	r0, r3
	available = available - len;
   1e216:	ebac 0c00 	sub.w	ip, ip, r0
	if (available <= rngp->threshold) {
   1e21a:	7933      	ldrb	r3, [r6, #4]
   1e21c:	4563      	cmp	r3, ip
   1e21e:	d302      	bcc.n	1e226 <rng_pool_get+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1e220:	4b02      	ldr	r3, [pc, #8]	; (1e22c <rng_pool_get+0x98>)
   1e222:	2201      	movs	r2, #1
   1e224:	601a      	str	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1e226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e22a:	bf00      	nop
   1e22c:	4000d000 	.word	0x4000d000

0001e230 <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   1e230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e232:	460d      	mov	r5, r1
   1e234:	4614      	mov	r4, r2
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1e236:	f013 0f01 	tst.w	r3, #1
   1e23a:	d103      	bne.n	1e244 <entropy_nrf5_get_entropy_isr+0x14>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1e23c:	4822      	ldr	r0, [pc, #136]	; (1e2c8 <entropy_nrf5_get_entropy_isr+0x98>)
   1e23e:	f7ff ffa9 	bl	1e194 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1e242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len) {
   1e244:	b90a      	cbnz	r2, 1e24a <entropy_nrf5_get_entropy_isr+0x1a>
	return cnt;
   1e246:	4620      	mov	r0, r4
   1e248:	e7fb      	b.n	1e242 <entropy_nrf5_get_entropy_isr+0x12>
	__asm__ volatile(
   1e24a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e24e:	f3ef 8611 	mrs	r6, BASEPRI
   1e252:	f383 8811 	msr	BASEPRI, r3
   1e256:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1e25a:	200d      	movs	r0, #13
   1e25c:	f7f5 f956 	bl	1350c <arch_irq_is_enabled>
   1e260:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1e262:	200d      	movs	r0, #13
   1e264:	f7f5 f93e 	bl	134e4 <arch_irq_disable>
	__asm__ volatile(
   1e268:	f386 8811 	msr	BASEPRI, r6
   1e26c:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e270:	4b16      	ldr	r3, [pc, #88]	; (1e2cc <entropy_nrf5_get_entropy_isr+0x9c>)
   1e272:	2200      	movs	r2, #0
   1e274:	601a      	str	r2, [r3, #0]
   1e276:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1e278:	4b15      	ldr	r3, [pc, #84]	; (1e2d0 <entropy_nrf5_get_entropy_isr+0xa0>)
   1e27a:	2201      	movs	r2, #1
   1e27c:	601a      	str	r2, [r3, #0]
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e27e:	4b15      	ldr	r3, [pc, #84]	; (1e2d4 <entropy_nrf5_get_entropy_isr+0xa4>)
   1e280:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1e284:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1e288:	4626      	mov	r6, r4
   1e28a:	e004      	b.n	1e296 <entropy_nrf5_get_entropy_isr+0x66>
   1e28c:	f3bf 8f4f 	dsb	sy
				__WFE();
   1e290:	bf20      	wfe
				__SEV();
   1e292:	bf40      	sev
				__WFE();
   1e294:	bf20      	wfe
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1e296:	4b0d      	ldr	r3, [pc, #52]	; (1e2cc <entropy_nrf5_get_entropy_isr+0x9c>)
   1e298:	681b      	ldr	r3, [r3, #0]
			while (!nrf_rng_event_check(NRF_RNG,
   1e29a:	2b00      	cmp	r3, #0
   1e29c:	d0f6      	beq.n	1e28c <entropy_nrf5_get_entropy_isr+0x5c>
			byte = random_byte_get();
   1e29e:	f7ff ff59 	bl	1e154 <random_byte_get>
   1e2a2:	4b0c      	ldr	r3, [pc, #48]	; (1e2d4 <entropy_nrf5_get_entropy_isr+0xa4>)
   1e2a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1e2a8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			if (byte < 0) {
   1e2ac:	2800      	cmp	r0, #0
   1e2ae:	db02      	blt.n	1e2b6 <entropy_nrf5_get_entropy_isr+0x86>
			buf[--len] = byte;
   1e2b0:	3e01      	subs	r6, #1
   1e2b2:	b2b6      	uxth	r6, r6
   1e2b4:	55a8      	strb	r0, [r5, r6]
		} while (len);
   1e2b6:	2e00      	cmp	r6, #0
   1e2b8:	d1ed      	bne.n	1e296 <entropy_nrf5_get_entropy_isr+0x66>
		if (irq_enabled) {
   1e2ba:	2f00      	cmp	r7, #0
   1e2bc:	d0c3      	beq.n	1e246 <entropy_nrf5_get_entropy_isr+0x16>
			irq_enable(IRQN);
   1e2be:	200d      	movs	r0, #13
   1e2c0:	f7f5 f900 	bl	134c4 <arch_irq_enable>
   1e2c4:	e7bf      	b.n	1e246 <entropy_nrf5_get_entropy_isr+0x16>
   1e2c6:	bf00      	nop
   1e2c8:	200028e0 	.word	0x200028e0
   1e2cc:	4000d100 	.word	0x4000d100
   1e2d0:	4000d000 	.word	0x4000d000
   1e2d4:	e000e100 	.word	0xe000e100

0001e2d8 <isr>:
{
   1e2d8:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1e2da:	f7ff ff3b 	bl	1e154 <random_byte_get>
	if (byte < 0) {
   1e2de:	2800      	cmp	r0, #0
   1e2e0:	db06      	blt.n	1e2f0 <isr+0x18>
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1e2e2:	b2c4      	uxtb	r4, r0
   1e2e4:	4621      	mov	r1, r4
   1e2e6:	480a      	ldr	r0, [pc, #40]	; (1e310 <isr+0x38>)
   1e2e8:	f00a f94a 	bl	28580 <rng_pool_put>
	if (ret < 0) {
   1e2ec:	2800      	cmp	r0, #0
   1e2ee:	db00      	blt.n	1e2f2 <isr+0x1a>
}
   1e2f0:	bd10      	pop	{r4, pc}
		ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.thr),
   1e2f2:	4621      	mov	r1, r4
   1e2f4:	4807      	ldr	r0, [pc, #28]	; (1e314 <isr+0x3c>)
   1e2f6:	f00a f943 	bl	28580 <rng_pool_put>
		if (ret < 0) {
   1e2fa:	2800      	cmp	r0, #0
   1e2fc:	db03      	blt.n	1e306 <isr+0x2e>
	z_impl_k_sem_give(sem);
   1e2fe:	4806      	ldr	r0, [pc, #24]	; (1e318 <isr+0x40>)
   1e300:	f001 fd1a 	bl	1fd38 <z_impl_k_sem_give>
}
   1e304:	e7f4      	b.n	1e2f0 <isr+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1e306:	4b05      	ldr	r3, [pc, #20]	; (1e31c <isr+0x44>)
   1e308:	2201      	movs	r2, #1
   1e30a:	601a      	str	r2, [r3, #0]
}
   1e30c:	e7f7      	b.n	1e2fe <isr+0x26>
   1e30e:	bf00      	nop
   1e310:	200028e0 	.word	0x200028e0
   1e314:	200028f5 	.word	0x200028f5
   1e318:	200028c8 	.word	0x200028c8
   1e31c:	4000d004 	.word	0x4000d004

0001e320 <entropy_nrf5_get_entropy>:
{
   1e320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e322:	460f      	mov	r7, r1
   1e324:	4614      	mov	r4, r2
	while (len) {
   1e326:	e002      	b.n	1e32e <entropy_nrf5_get_entropy+0xe>
		len -= bytes;
   1e328:	1b64      	subs	r4, r4, r5
   1e32a:	b2a4      	uxth	r4, r4
		buf += bytes;
   1e32c:	442f      	add	r7, r5
	while (len) {
   1e32e:	b1e4      	cbz	r4, 1e36a <entropy_nrf5_get_entropy+0x4a>
	return z_impl_k_sem_take(sem, timeout);
   1e330:	4e0f      	ldr	r6, [pc, #60]	; (1e370 <entropy_nrf5_get_entropy+0x50>)
   1e332:	f04f 32ff 	mov.w	r2, #4294967295
   1e336:	f04f 33ff 	mov.w	r3, #4294967295
   1e33a:	4630      	mov	r0, r6
   1e33c:	f001 fd24 	bl	1fd88 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1e340:	4622      	mov	r2, r4
   1e342:	4639      	mov	r1, r7
   1e344:	f106 0045 	add.w	r0, r6, #69	; 0x45
   1e348:	f7ff ff24 	bl	1e194 <rng_pool_get>
   1e34c:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   1e34e:	4630      	mov	r0, r6
   1e350:	f001 fcf2 	bl	1fd38 <z_impl_k_sem_give>
		if (bytes == 0U) {
   1e354:	2d00      	cmp	r5, #0
   1e356:	d1e7      	bne.n	1e328 <entropy_nrf5_get_entropy+0x8>
	return z_impl_k_sem_take(sem, timeout);
   1e358:	f04f 32ff 	mov.w	r2, #4294967295
   1e35c:	f04f 33ff 	mov.w	r3, #4294967295
   1e360:	f106 0018 	add.w	r0, r6, #24
   1e364:	f001 fd10 	bl	1fd88 <z_impl_k_sem_take>
			continue;
   1e368:	e7e1      	b.n	1e32e <entropy_nrf5_get_entropy+0xe>
}
   1e36a:	2000      	movs	r0, #0
   1e36c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e36e:	bf00      	nop
   1e370:	200028b0 	.word	0x200028b0

0001e374 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1e374:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1e376:	4c18      	ldr	r4, [pc, #96]	; (1e3d8 <entropy_nrf5_init+0x64>)
   1e378:	2201      	movs	r2, #1
   1e37a:	4611      	mov	r1, r2
   1e37c:	4620      	mov	r0, r4
   1e37e:	f00a ffe3 	bl	29348 <z_impl_k_sem_init>
   1e382:	2201      	movs	r2, #1
   1e384:	2100      	movs	r1, #0
   1e386:	f104 0018 	add.w	r0, r4, #24
   1e38a:	f00a ffdd 	bl	29348 <z_impl_k_sem_init>
	k_sem_init(&entropy_nrf5_data.sem_lock, 1, 1);

	/* Synching semaphore */
	k_sem_init(&entropy_nrf5_data.sem_sync, 0, 1);

	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.thr),
   1e38e:	2204      	movs	r2, #4
   1e390:	2108      	movs	r1, #8
   1e392:	f104 0045 	add.w	r0, r4, #69	; 0x45
   1e396:	f00a f907 	bl	285a8 <rng_pool_init>
		      CONFIG_ENTROPY_NRF5_THR_POOL_SIZE,
		      CONFIG_ENTROPY_NRF5_THR_THRESHOLD);
	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.isr),
   1e39a:	220c      	movs	r2, #12
   1e39c:	2110      	movs	r1, #16
   1e39e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1e3a2:	f00a f901 	bl	285a8 <rng_pool_init>
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   1e3a6:	4b0d      	ldr	r3, [pc, #52]	; (1e3dc <entropy_nrf5_init+0x68>)
   1e3a8:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1e3ac:	f022 0201 	bic.w	r2, r2, #1
   1e3b0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e3b4:	4a0a      	ldr	r2, [pc, #40]	; (1e3e0 <entropy_nrf5_init+0x6c>)
   1e3b6:	2400      	movs	r4, #0
   1e3b8:	6014      	str	r4, [r2, #0]
   1e3ba:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   1e3bc:	2101      	movs	r1, #1
   1e3be:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1e3c2:	6019      	str	r1, [r3, #0]

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1e3c4:	4622      	mov	r2, r4
   1e3c6:	200d      	movs	r0, #13
   1e3c8:	f7f5 f8ae 	bl	13528 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1e3cc:	200d      	movs	r0, #13
   1e3ce:	f7f5 f879 	bl	134c4 <arch_irq_enable>

	return 0;
}
   1e3d2:	4620      	mov	r0, r4
   1e3d4:	bd10      	pop	{r4, pc}
   1e3d6:	bf00      	nop
   1e3d8:	200028b0 	.word	0x200028b0
   1e3dc:	4000d000 	.word	0x4000d000
   1e3e0:	4000d100 	.word	0x4000d100

0001e3e4 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   1e3e4:	b508      	push	{r3, lr}
   1e3e6:	4602      	mov	r2, r0
   1e3e8:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1e3ea:	4802      	ldr	r0, [pc, #8]	; (1e3f4 <multithreading_lock_acquire+0x10>)
   1e3ec:	f001 fb9a 	bl	1fb24 <z_impl_k_mutex_lock>
	return k_mutex_lock(&mpsl_lock, timeout);
}
   1e3f0:	bd08      	pop	{r3, pc}
   1e3f2:	bf00      	nop
   1e3f4:	20000738 	.word	0x20000738

0001e3f8 <multithreading_lock_release>:

void multithreading_lock_release(void)
{
   1e3f8:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   1e3fa:	4802      	ldr	r0, [pc, #8]	; (1e404 <multithreading_lock_release+0xc>)
   1e3fc:	f001 fc1c 	bl	1fc38 <z_impl_k_mutex_unlock>
	k_mutex_unlock(&mpsl_lock);
}
   1e400:	bd08      	pop	{r3, pc}
   1e402:	bf00      	nop
   1e404:	20000738 	.word	0x20000738

0001e408 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1e408:	b508      	push	{r3, lr}
	z_impl_log_panic();
   1e40a:	f7f2 ff97 	bl	1133c <z_impl_log_panic>
   1e40e:	4b09      	ldr	r3, [pc, #36]	; (1e434 <k_sys_fatal_error_handler+0x2c>)
   1e410:	4a09      	ldr	r2, [pc, #36]	; (1e438 <k_sys_fatal_error_handler+0x30>)
   1e412:	1a9b      	subs	r3, r3, r2
   1e414:	08db      	lsrs	r3, r3, #3
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1e416:	f04f 0100 	mov.w	r1, #0
   1e41a:	2201      	movs	r2, #1
   1e41c:	f362 0102 	bfi	r1, r2, #0, #3
   1e420:	f36f 01c5 	bfc	r1, #3, #3
   1e424:	f363 118f 	bfi	r1, r3, #6, #10
   1e428:	4804      	ldr	r0, [pc, #16]	; (1e43c <k_sys_fatal_error_handler+0x34>)
   1e42a:	f7f2 ff27 	bl	1127c <log_0>
		sys_arch_reboot(0);
   1e42e:	2000      	movs	r0, #0
   1e430:	f7f5 fee8 	bl	14204 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1e434:	00029f54 	.word	0x00029f54
   1e438:	00029ecc 	.word	0x00029ecc
   1e43c:	0002ce50 	.word	0x0002ce50

0001e440 <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   1e440:	b510      	push	{r4, lr}
   1e442:	4603      	mov	r3, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   1e444:	4a03      	ldr	r2, [pc, #12]	; (1e454 <rand_prio_low_vector_get_blocking+0x14>)
   1e446:	6810      	ldr	r0, [r2, #0]
   1e448:	460a      	mov	r2, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   1e44a:	6881      	ldr	r1, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1e44c:	680c      	ldr	r4, [r1, #0]
   1e44e:	4619      	mov	r1, r3
   1e450:	47a0      	blx	r4

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
   1e452:	bd10      	pop	{r4, pc}
   1e454:	20002904 	.word	0x20002904

0001e458 <sdc_assertion_handler>:
{
   1e458:	b538      	push	{r3, r4, r5, lr}
   1e45a:	460d      	mov	r5, r1
   1e45c:	4b0d      	ldr	r3, [pc, #52]	; (1e494 <sdc_assertion_handler+0x3c>)
   1e45e:	4a0e      	ldr	r2, [pc, #56]	; (1e498 <sdc_assertion_handler+0x40>)
   1e460:	1a9b      	subs	r3, r3, r2
   1e462:	08db      	lsrs	r3, r3, #3
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", log_strdup(file), line);
   1e464:	f04f 0400 	mov.w	r4, #0
   1e468:	2201      	movs	r2, #1
   1e46a:	f362 0402 	bfi	r4, r2, #0, #3
   1e46e:	f36f 04c5 	bfc	r4, #3, #3
   1e472:	f363 148f 	bfi	r4, r3, #6, #10
   1e476:	f7f2 fcd1 	bl	10e1c <z_log_strdup>
   1e47a:	4601      	mov	r1, r0
   1e47c:	4623      	mov	r3, r4
   1e47e:	462a      	mov	r2, r5
   1e480:	4806      	ldr	r0, [pc, #24]	; (1e49c <sdc_assertion_handler+0x44>)
   1e482:	f7f2 fe7b 	bl	1117c <log_2>
	k_oops();
   1e486:	4040      	eors	r0, r0
   1e488:	f380 8811 	msr	BASEPRI, r0
   1e48c:	f04f 0003 	mov.w	r0, #3
   1e490:	df02      	svc	2
}
   1e492:	bd38      	pop	{r3, r4, r5, pc}
   1e494:	00029fbc 	.word	0x00029fbc
   1e498:	00029ecc 	.word	0x00029ecc
   1e49c:	0002ce70 	.word	0x0002ce70

0001e4a0 <host_signal>:
{
   1e4a0:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   1e4a2:	4802      	ldr	r0, [pc, #8]	; (1e4ac <host_signal+0xc>)
   1e4a4:	f001 fc48 	bl	1fd38 <z_impl_k_sem_give>
}
   1e4a8:	bd08      	pop	{r3, pc}
   1e4aa:	bf00      	nop
   1e4ac:	200007bc 	.word	0x200007bc

0001e4b0 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   1e4b0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   1e4b2:	4803      	ldr	r0, [pc, #12]	; (1e4c0 <hci_driver_init+0x10>)
   1e4b4:	f7f8 fb6c 	bl	16b90 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   1e4b8:	4802      	ldr	r0, [pc, #8]	; (1e4c4 <hci_driver_init+0x14>)
   1e4ba:	f7e5 fc09 	bl	3cd0 <sdc_init>
	return err;
}
   1e4be:	bd08      	pop	{r3, pc}
   1e4c0:	0002cf90 	.word	0x0002cf90
   1e4c4:	0001e459 	.word	0x0001e459

0001e4c8 <acl_handle>:
{
   1e4c8:	b538      	push	{r3, r4, r5, lr}
   1e4ca:	4604      	mov	r4, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1e4cc:	f04f 30ff 	mov.w	r0, #4294967295
   1e4d0:	f04f 31ff 	mov.w	r1, #4294967295
   1e4d4:	f7ff ff86 	bl	1e3e4 <multithreading_lock_acquire>
	if (!errcode) {
   1e4d8:	4605      	mov	r5, r0
   1e4da:	b108      	cbz	r0, 1e4e0 <acl_handle+0x18>
}
   1e4dc:	4628      	mov	r0, r5
   1e4de:	bd38      	pop	{r3, r4, r5, pc}
		errcode = sdc_hci_data_put(acl->data);
   1e4e0:	68a0      	ldr	r0, [r4, #8]
   1e4e2:	f7ee fa11 	bl	c908 <sdc_hci_data_put>
   1e4e6:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   1e4e8:	f7ff ff86 	bl	1e3f8 <multithreading_lock_release>
		if (errcode) {
   1e4ec:	2d00      	cmp	r5, #0
   1e4ee:	d0f5      	beq.n	1e4dc <acl_handle+0x14>
   1e4f0:	4801      	ldr	r0, [pc, #4]	; (1e4f8 <acl_handle+0x30>)
   1e4f2:	f001 fc21 	bl	1fd38 <z_impl_k_sem_give>
}
   1e4f6:	e7f1      	b.n	1e4dc <acl_handle+0x14>
   1e4f8:	200007bc 	.word	0x200007bc

0001e4fc <cmd_handle>:
{
   1e4fc:	b538      	push	{r3, r4, r5, lr}
   1e4fe:	4605      	mov	r5, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1e500:	f04f 30ff 	mov.w	r0, #4294967295
   1e504:	f04f 31ff 	mov.w	r1, #4294967295
   1e508:	f7ff ff6c 	bl	1e3e4 <multithreading_lock_acquire>
	if (!errcode) {
   1e50c:	4604      	mov	r4, r0
   1e50e:	b110      	cbz	r0, 1e516 <cmd_handle+0x1a>
	if (errcode) {
   1e510:	b144      	cbz	r4, 1e524 <cmd_handle+0x28>
}
   1e512:	4620      	mov	r0, r4
   1e514:	bd38      	pop	{r3, r4, r5, pc}
		errcode = hci_internal_cmd_put(cmd->data);
   1e516:	68a8      	ldr	r0, [r5, #8]
   1e518:	f000 f9c8 	bl	1e8ac <hci_internal_cmd_put>
   1e51c:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1e51e:	f7ff ff6b 	bl	1e3f8 <multithreading_lock_release>
   1e522:	e7f5      	b.n	1e510 <cmd_handle+0x14>
	z_impl_k_sem_give(sem);
   1e524:	4801      	ldr	r0, [pc, #4]	; (1e52c <cmd_handle+0x30>)
   1e526:	f001 fc07 	bl	1fd38 <z_impl_k_sem_give>
	return 0;
   1e52a:	e7f2      	b.n	1e512 <cmd_handle+0x16>
   1e52c:	200007bc 	.word	0x200007bc

0001e530 <rand_prio_high_vector_get>:
{
   1e530:	b538      	push	{r3, r4, r5, lr}
   1e532:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1e534:	4b07      	ldr	r3, [pc, #28]	; (1e554 <rand_prio_high_vector_get+0x24>)
   1e536:	6818      	ldr	r0, [r3, #0]
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   1e538:	6883      	ldr	r3, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1e53a:	685d      	ldr	r5, [r3, #4]
   1e53c:	b13d      	cbz	r5, 1e54e <rand_prio_high_vector_get+0x1e>
   1e53e:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1e540:	2300      	movs	r3, #0
   1e542:	4621      	mov	r1, r4
   1e544:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   1e546:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   1e54a:	b2c0      	uxtb	r0, r0
   1e54c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1e54e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1e552:	e7f8      	b.n	1e546 <rand_prio_high_vector_get+0x16>
   1e554:	20002904 	.word	0x20002904

0001e558 <rand_prio_low_vector_get>:
{
   1e558:	b538      	push	{r3, r4, r5, lr}
   1e55a:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1e55c:	4b07      	ldr	r3, [pc, #28]	; (1e57c <rand_prio_low_vector_get+0x24>)
   1e55e:	6818      	ldr	r0, [r3, #0]
	const struct entropy_driver_api *api =
   1e560:	6883      	ldr	r3, [r0, #8]
	if (unlikely(!api->get_entropy_isr)) {
   1e562:	685d      	ldr	r5, [r3, #4]
   1e564:	b13d      	cbz	r5, 1e576 <rand_prio_low_vector_get+0x1e>
   1e566:	460a      	mov	r2, r1
	return api->get_entropy_isr(dev, buffer, length, flags);
   1e568:	2300      	movs	r3, #0
   1e56a:	4621      	mov	r1, r4
   1e56c:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   1e56e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   1e572:	b2c0      	uxtb	r0, r0
   1e574:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1e576:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1e57a:	e7f8      	b.n	1e56e <rand_prio_low_vector_get+0x16>
   1e57c:	20002904 	.word	0x20002904

0001e580 <event_packet_process>:
{
   1e580:	b570      	push	{r4, r5, r6, lr}
   1e582:	4604      	mov	r4, r0
	bool discardable = event_packet_is_discardable(hci_buf);
   1e584:	f00a f818 	bl	285b8 <event_packet_is_discardable>
   1e588:	4603      	mov	r3, r0
	if (hdr->evt == BT_HCI_EVT_LE_META_EVENT) {
   1e58a:	7820      	ldrb	r0, [r4, #0]
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1e58c:	461d      	mov	r5, r3
   1e58e:	b183      	cbz	r3, 1e5b2 <event_packet_process+0x32>
   1e590:	2200      	movs	r2, #0
   1e592:	2300      	movs	r3, #0
   1e594:	4629      	mov	r1, r5
   1e596:	f7f6 fad3 	bl	14b40 <bt_buf_get_evt>
	if (!evt_buf) {
   1e59a:	4606      	mov	r6, r0
   1e59c:	b170      	cbz	r0, 1e5bc <event_packet_process+0x3c>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   1e59e:	7862      	ldrb	r2, [r4, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1e5a0:	3202      	adds	r2, #2
   1e5a2:	4621      	mov	r1, r4
   1e5a4:	3008      	adds	r0, #8
   1e5a6:	f009 feca 	bl	2833e <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1e5aa:	4630      	mov	r0, r6
   1e5ac:	f7f8 fa9c 	bl	16ae8 <bt_recv>
}
   1e5b0:	bd70      	pop	{r4, r5, r6, pc}
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1e5b2:	f04f 32ff 	mov.w	r2, #4294967295
   1e5b6:	f04f 33ff 	mov.w	r3, #4294967295
   1e5ba:	e7eb      	b.n	1e594 <event_packet_process+0x14>
		if (discardable) {
   1e5bc:	2d00      	cmp	r5, #0
   1e5be:	d1f7      	bne.n	1e5b0 <event_packet_process+0x30>
   1e5c0:	4b08      	ldr	r3, [pc, #32]	; (1e5e4 <event_packet_process+0x64>)
   1e5c2:	4a09      	ldr	r2, [pc, #36]	; (1e5e8 <event_packet_process+0x68>)
   1e5c4:	1a9b      	subs	r3, r3, r2
   1e5c6:	08db      	lsrs	r3, r3, #3
		BT_ERR("No event buffer available");
   1e5c8:	f04f 0100 	mov.w	r1, #0
   1e5cc:	2201      	movs	r2, #1
   1e5ce:	f362 0102 	bfi	r1, r2, #0, #3
   1e5d2:	f36f 01c5 	bfc	r1, #3, #3
   1e5d6:	f363 118f 	bfi	r1, r3, #6, #10
   1e5da:	4804      	ldr	r0, [pc, #16]	; (1e5ec <event_packet_process+0x6c>)
   1e5dc:	f7f2 fe4e 	bl	1127c <log_0>
		return;
   1e5e0:	e7e6      	b.n	1e5b0 <event_packet_process+0x30>
   1e5e2:	bf00      	nop
   1e5e4:	00029fbc 	.word	0x00029fbc
   1e5e8:	00029ecc 	.word	0x00029ecc
   1e5ec:	0002ce98 	.word	0x0002ce98

0001e5f0 <data_packet_process>:
{
   1e5f0:	b538      	push	{r3, r4, r5, lr}
   1e5f2:	4604      	mov	r4, r0
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1e5f4:	f04f 32ff 	mov.w	r2, #4294967295
   1e5f8:	f04f 33ff 	mov.w	r3, #4294967295
   1e5fc:	2003      	movs	r0, #3
   1e5fe:	f7f6 fa67 	bl	14ad0 <bt_buf_get_rx>
	if (!data_buf) {
   1e602:	b150      	cbz	r0, 1e61a <data_packet_process+0x2a>
   1e604:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   1e606:	8862      	ldrh	r2, [r4, #2]
   1e608:	3204      	adds	r2, #4
   1e60a:	4621      	mov	r1, r4
   1e60c:	3008      	adds	r0, #8
   1e60e:	f009 fe96 	bl	2833e <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1e612:	4628      	mov	r0, r5
   1e614:	f7f8 fa68 	bl	16ae8 <bt_recv>
}
   1e618:	bd38      	pop	{r3, r4, r5, pc}
   1e61a:	4b08      	ldr	r3, [pc, #32]	; (1e63c <data_packet_process+0x4c>)
   1e61c:	4a08      	ldr	r2, [pc, #32]	; (1e640 <data_packet_process+0x50>)
   1e61e:	1a9b      	subs	r3, r3, r2
   1e620:	08db      	lsrs	r3, r3, #3
		BT_ERR("No data buffer available");
   1e622:	f04f 0100 	mov.w	r1, #0
   1e626:	2201      	movs	r2, #1
   1e628:	f362 0102 	bfi	r1, r2, #0, #3
   1e62c:	f36f 01c5 	bfc	r1, #3, #3
   1e630:	f363 118f 	bfi	r1, r3, #6, #10
   1e634:	4803      	ldr	r0, [pc, #12]	; (1e644 <data_packet_process+0x54>)
   1e636:	f7f2 fe21 	bl	1127c <log_0>
		return;
   1e63a:	e7ed      	b.n	1e618 <data_packet_process+0x28>
   1e63c:	00029fbc 	.word	0x00029fbc
   1e640:	00029ecc 	.word	0x00029ecc
   1e644:	0002ceb4 	.word	0x0002ceb4

0001e648 <recv_thread>:
{
   1e648:	b538      	push	{r3, r4, r5, lr}
	bool received_data = false;
   1e64a:	2500      	movs	r5, #0
	bool received_evt = false;
   1e64c:	462c      	mov	r4, r5
   1e64e:	e00a      	b.n	1e666 <recv_thread+0x1e>
		received_evt = fetch_and_process_hci_evt(&hci_buffer[0]);
   1e650:	4d0b      	ldr	r5, [pc, #44]	; (1e680 <recv_thread+0x38>)
   1e652:	4628      	mov	r0, r5
   1e654:	f009 ffe4 	bl	28620 <fetch_and_process_hci_evt>
   1e658:	4604      	mov	r4, r0
			received_data = fetch_and_process_acl_data(&hci_buffer[0]);
   1e65a:	4628      	mov	r0, r5
   1e65c:	f009 fff9 	bl	28652 <fetch_and_process_acl_data>
   1e660:	4605      	mov	r5, r0
	z_impl_k_yield();
   1e662:	f002 f8ab 	bl	207bc <z_impl_k_yield>
		if (!received_evt && !received_data) {
   1e666:	2c00      	cmp	r4, #0
   1e668:	d1f2      	bne.n	1e650 <recv_thread+0x8>
   1e66a:	2d00      	cmp	r5, #0
   1e66c:	d1f0      	bne.n	1e650 <recv_thread+0x8>
	return z_impl_k_sem_take(sem, timeout);
   1e66e:	f04f 32ff 	mov.w	r2, #4294967295
   1e672:	f04f 33ff 	mov.w	r3, #4294967295
   1e676:	4803      	ldr	r0, [pc, #12]	; (1e684 <recv_thread+0x3c>)
   1e678:	f001 fb86 	bl	1fd88 <z_impl_k_sem_take>
   1e67c:	e7e8      	b.n	1e650 <recv_thread+0x8>
   1e67e:	bf00      	nop
   1e680:	20002908 	.word	0x20002908
   1e684:	200007bc 	.word	0x200007bc

0001e688 <hci_driver_open>:
{
   1e688:	b530      	push	{r4, r5, lr}
   1e68a:	b093      	sub	sp, #76	; 0x4c
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1e68c:	4d78      	ldr	r5, [pc, #480]	; (1e870 <hci_driver_open+0x1e8>)
   1e68e:	2200      	movs	r2, #0
   1e690:	2300      	movs	r3, #0
   1e692:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1e696:	2400      	movs	r4, #0
   1e698:	9404      	str	r4, [sp, #16]
   1e69a:	f06f 0309 	mvn.w	r3, #9
   1e69e:	9303      	str	r3, [sp, #12]
   1e6a0:	9402      	str	r4, [sp, #8]
   1e6a2:	9401      	str	r4, [sp, #4]
   1e6a4:	9400      	str	r4, [sp, #0]
   1e6a6:	4b73      	ldr	r3, [pc, #460]	; (1e874 <hci_driver_open+0x1ec>)
   1e6a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1e6ac:	4972      	ldr	r1, [pc, #456]	; (1e878 <hci_driver_open+0x1f0>)
   1e6ae:	4628      	mov	r0, r5
   1e6b0:	f00a fd07 	bl	290c2 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1e6b4:	4971      	ldr	r1, [pc, #452]	; (1e87c <hci_driver_open+0x1f4>)
   1e6b6:	4628      	mov	r0, r5
   1e6b8:	f001 f890 	bl	1f7dc <z_impl_k_thread_name_set>
	sdc_build_revision_get(build_revision);
   1e6bc:	a80d      	add	r0, sp, #52	; 0x34
   1e6be:	f7e5 fa99 	bl	3bf4 <sdc_build_revision_get>
   1e6c2:	4a6f      	ldr	r2, [pc, #444]	; (1e880 <hci_driver_open+0x1f8>)
   1e6c4:	4b6f      	ldr	r3, [pc, #444]	; (1e884 <hci_driver_open+0x1fc>)
   1e6c6:	1ad2      	subs	r2, r2, r3
   1e6c8:	08d2      	lsrs	r2, r2, #3
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   1e6ca:	f04f 0300 	mov.w	r3, #0
   1e6ce:	2103      	movs	r1, #3
   1e6d0:	f361 0302 	bfi	r3, r1, #0, #3
   1e6d4:	f364 03c5 	bfi	r3, r4, #3, #3
   1e6d8:	f362 138f 	bfi	r3, r2, #6, #10
   1e6dc:	2214      	movs	r2, #20
   1e6de:	a90d      	add	r1, sp, #52	; 0x34
   1e6e0:	4869      	ldr	r0, [pc, #420]	; (1e888 <hci_driver_open+0x200>)
   1e6e2:	f7f2 fda9 	bl	11238 <log_hexdump>
	cfg.master_count.count = SDC_MASTER_COUNT;
   1e6e6:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e6ea:	aa0c      	add	r2, sp, #48	; 0x30
   1e6ec:	2101      	movs	r1, #1
   1e6ee:	4620      	mov	r0, r4
   1e6f0:	f7e5 fa8e 	bl	3c10 <sdc_cfg_set>
	if (required_memory < 0) {
   1e6f4:	1e04      	subs	r4, r0, #0
   1e6f6:	db5f      	blt.n	1e7b8 <hci_driver_open+0x130>
	cfg.slave_count.count = CONFIG_SDC_SLAVE_COUNT;
   1e6f8:	2102      	movs	r1, #2
   1e6fa:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e6fe:	aa0c      	add	r2, sp, #48	; 0x30
   1e700:	2000      	movs	r0, #0
   1e702:	f7e5 fa85 	bl	3c10 <sdc_cfg_set>
	if (required_memory < 0) {
   1e706:	1e04      	subs	r4, r0, #0
   1e708:	db56      	blt.n	1e7b8 <hci_driver_open+0x130>
	cfg.buffer_cfg.rx_packet_size = MAX_RX_PACKET_SIZE;
   1e70a:	231b      	movs	r3, #27
   1e70c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1e710:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	cfg.buffer_cfg.rx_packet_count = SDC_DEFAULT_RX_PACKET_COUNT;
   1e714:	2302      	movs	r3, #2
   1e716:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	cfg.buffer_cfg.tx_packet_count = SDC_DEFAULT_TX_PACKET_COUNT;
   1e71a:	2103      	movs	r1, #3
   1e71c:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e720:	aa0c      	add	r2, sp, #48	; 0x30
   1e722:	2000      	movs	r0, #0
   1e724:	f7e5 fa74 	bl	3c10 <sdc_cfg_set>
	if (required_memory < 0) {
   1e728:	1e04      	subs	r4, r0, #0
   1e72a:	db45      	blt.n	1e7b8 <hci_driver_open+0x130>
	cfg.event_length.event_length_us =
   1e72c:	f641 534c 	movw	r3, #7500	; 0x1d4c
   1e730:	930c      	str	r3, [sp, #48]	; 0x30
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e732:	aa0c      	add	r2, sp, #48	; 0x30
   1e734:	2104      	movs	r1, #4
   1e736:	2000      	movs	r0, #0
   1e738:	f7e5 fa6a 	bl	3c10 <sdc_cfg_set>
	if (required_memory < 0) {
   1e73c:	1e04      	subs	r4, r0, #0
   1e73e:	db3b      	blt.n	1e7b8 <hci_driver_open+0x130>
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   1e740:	2301      	movs	r3, #1
   1e742:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e746:	aa0c      	add	r2, sp, #48	; 0x30
   1e748:	2105      	movs	r1, #5
   1e74a:	2000      	movs	r0, #0
   1e74c:	f7e5 fa60 	bl	3c10 <sdc_cfg_set>
	if (required_memory < 0) {
   1e750:	1e04      	subs	r4, r0, #0
   1e752:	db31      	blt.n	1e7b8 <hci_driver_open+0x130>
	if (required_memory > sizeof(sdc_mempool)) {
   1e754:	f640 2374 	movw	r3, #2676	; 0xa74
   1e758:	429c      	cmp	r4, r3
   1e75a:	d830      	bhi.n	1e7be <hci_driver_open+0x136>
   1e75c:	484b      	ldr	r0, [pc, #300]	; (1e88c <hci_driver_open+0x204>)
   1e75e:	f000 fdf3 	bl	1f348 <z_impl_device_get_binding>
	entropy_source = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1e762:	4b4b      	ldr	r3, [pc, #300]	; (1e890 <hci_driver_open+0x208>)
   1e764:	6018      	str	r0, [r3, #0]
	if (!entropy_source) {
   1e766:	2800      	cmp	r0, #0
   1e768:	d045      	beq.n	1e7f6 <hci_driver_open+0x16e>
	sdc_rand_source_t rand_functions = {
   1e76a:	4a4a      	ldr	r2, [pc, #296]	; (1e894 <hci_driver_open+0x20c>)
   1e76c:	ab09      	add	r3, sp, #36	; 0x24
   1e76e:	ca07      	ldmia	r2, {r0, r1, r2}
   1e770:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   1e774:	4618      	mov	r0, r3
   1e776:	f7e5 fbb9 	bl	3eec <sdc_rand_source_register>
	if (err) {
   1e77a:	4601      	mov	r1, r0
   1e77c:	2800      	cmp	r0, #0
   1e77e:	d14d      	bne.n	1e81c <hci_driver_open+0x194>
			err = sdc_support_adv();
   1e780:	f7e5 fb20 	bl	3dc4 <sdc_support_adv>
			if (err) {
   1e784:	2800      	cmp	r0, #0
   1e786:	d164      	bne.n	1e852 <hci_driver_open+0x1ca>
		err = sdc_support_slave();
   1e788:	f7e5 fb46 	bl	3e18 <sdc_support_slave>
		if (err) {
   1e78c:	2800      	cmp	r0, #0
   1e78e:	d163      	bne.n	1e858 <hci_driver_open+0x1d0>
		err = sdc_support_dle();
   1e790:	f7e5 fb26 	bl	3de0 <sdc_support_dle>
		if (err) {
   1e794:	2800      	cmp	r0, #0
   1e796:	d162      	bne.n	1e85e <hci_driver_open+0x1d6>
		err = sdc_support_le_2m_phy();
   1e798:	f7e5 fb30 	bl	3dfc <sdc_support_le_2m_phy>
		if (err) {
   1e79c:	4604      	mov	r4, r0
   1e79e:	2800      	cmp	r0, #0
   1e7a0:	d160      	bne.n	1e864 <hci_driver_open+0x1dc>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1e7a2:	f04f 30ff 	mov.w	r0, #4294967295
   1e7a6:	f04f 31ff 	mov.w	r1, #4294967295
   1e7aa:	f7ff fe1b 	bl	1e3e4 <multithreading_lock_acquire>
	if (!err) {
   1e7ae:	4605      	mov	r5, r0
   1e7b0:	2800      	cmp	r0, #0
   1e7b2:	d046      	beq.n	1e842 <hci_driver_open+0x1ba>
	if (err < 0) {
   1e7b4:	2d00      	cmp	r5, #0
   1e7b6:	db58      	blt.n	1e86a <hci_driver_open+0x1e2>
}
   1e7b8:	4620      	mov	r0, r4
   1e7ba:	b013      	add	sp, #76	; 0x4c
   1e7bc:	bd30      	pop	{r4, r5, pc}
   1e7be:	4a30      	ldr	r2, [pc, #192]	; (1e880 <hci_driver_open+0x1f8>)
   1e7c0:	4b30      	ldr	r3, [pc, #192]	; (1e884 <hci_driver_open+0x1fc>)
   1e7c2:	1ad2      	subs	r2, r2, r3
   1e7c4:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Allocated memory too low: %u < %u",
   1e7c6:	f04f 0300 	mov.w	r3, #0
   1e7ca:	2101      	movs	r1, #1
   1e7cc:	f361 0302 	bfi	r3, r1, #0, #3
   1e7d0:	f36f 03c5 	bfc	r3, #3, #3
   1e7d4:	f362 138f 	bfi	r3, r2, #6, #10
   1e7d8:	4622      	mov	r2, r4
   1e7da:	f640 2174 	movw	r1, #2676	; 0xa74
   1e7de:	482e      	ldr	r0, [pc, #184]	; (1e898 <hci_driver_open+0x210>)
   1e7e0:	f7f2 fccc 	bl	1117c <log_2>
		k_panic();
   1e7e4:	4040      	eors	r0, r0
   1e7e6:	f380 8811 	msr	BASEPRI, r0
   1e7ea:	f04f 0004 	mov.w	r0, #4
   1e7ee:	df02      	svc	2
		return -ENOMEM;
   1e7f0:	f06f 040b 	mvn.w	r4, #11
   1e7f4:	e7e0      	b.n	1e7b8 <hci_driver_open+0x130>
   1e7f6:	4b22      	ldr	r3, [pc, #136]	; (1e880 <hci_driver_open+0x1f8>)
   1e7f8:	4a22      	ldr	r2, [pc, #136]	; (1e884 <hci_driver_open+0x1fc>)
   1e7fa:	1a9b      	subs	r3, r3, r2
   1e7fc:	08db      	lsrs	r3, r3, #3
		BT_ERR("An entropy source is required");
   1e7fe:	f04f 0100 	mov.w	r1, #0
   1e802:	2201      	movs	r2, #1
   1e804:	f362 0102 	bfi	r1, r2, #0, #3
   1e808:	f36f 01c5 	bfc	r1, #3, #3
   1e80c:	f363 118f 	bfi	r1, r3, #6, #10
   1e810:	4822      	ldr	r0, [pc, #136]	; (1e89c <hci_driver_open+0x214>)
   1e812:	f7f2 fd33 	bl	1127c <log_0>
		return -ENODEV;
   1e816:	f06f 0412 	mvn.w	r4, #18
   1e81a:	e7cd      	b.n	1e7b8 <hci_driver_open+0x130>
   1e81c:	4b18      	ldr	r3, [pc, #96]	; (1e880 <hci_driver_open+0x1f8>)
   1e81e:	4a19      	ldr	r2, [pc, #100]	; (1e884 <hci_driver_open+0x1fc>)
   1e820:	1a9b      	subs	r3, r3, r2
   1e822:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to register rand source (%d)", err);
   1e824:	f04f 0200 	mov.w	r2, #0
   1e828:	2001      	movs	r0, #1
   1e82a:	f360 0202 	bfi	r2, r0, #0, #3
   1e82e:	f36f 02c5 	bfc	r2, #3, #3
   1e832:	f363 128f 	bfi	r2, r3, #6, #10
   1e836:	481a      	ldr	r0, [pc, #104]	; (1e8a0 <hci_driver_open+0x218>)
   1e838:	f7f2 fc6a 	bl	11110 <log_1>
		return -EINVAL;
   1e83c:	f06f 0415 	mvn.w	r4, #21
   1e840:	e7ba      	b.n	1e7b8 <hci_driver_open+0x130>
		err = sdc_enable(host_signal, sdc_mempool);
   1e842:	4918      	ldr	r1, [pc, #96]	; (1e8a4 <hci_driver_open+0x21c>)
   1e844:	4818      	ldr	r0, [pc, #96]	; (1e8a8 <hci_driver_open+0x220>)
   1e846:	f7e5 fa15 	bl	3c74 <sdc_enable>
   1e84a:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   1e84c:	f7ff fdd4 	bl	1e3f8 <multithreading_lock_release>
   1e850:	e7b0      	b.n	1e7b4 <hci_driver_open+0x12c>
				return -ENOTSUP;
   1e852:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1e856:	e7af      	b.n	1e7b8 <hci_driver_open+0x130>
			return -ENOTSUP;
   1e858:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1e85c:	e7ac      	b.n	1e7b8 <hci_driver_open+0x130>
			return -ENOTSUP;
   1e85e:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1e862:	e7a9      	b.n	1e7b8 <hci_driver_open+0x130>
			return -ENOTSUP;
   1e864:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1e868:	e7a6      	b.n	1e7b8 <hci_driver_open+0x130>
		return err;
   1e86a:	462c      	mov	r4, r5
   1e86c:	e7a4      	b.n	1e7b8 <hci_driver_open+0x130>
   1e86e:	bf00      	nop
   1e870:	20002028 	.word	0x20002028
   1e874:	0001e649 	.word	0x0001e649
   1e878:	20005460 	.word	0x20005460
   1e87c:	0002ced0 	.word	0x0002ced0
   1e880:	00029fbc 	.word	0x00029fbc
   1e884:	00029ecc 	.word	0x00029ecc
   1e888:	0002ced8 	.word	0x0002ced8
   1e88c:	0002ce44 	.word	0x0002ce44
   1e890:	20002904 	.word	0x20002904
   1e894:	0002a12c 	.word	0x0002a12c
   1e898:	0002cf00 	.word	0x0002cf00
   1e89c:	0002cf24 	.word	0x0002cf24
   1e8a0:	0002cf44 	.word	0x0002cf44
   1e8a4:	20002954 	.word	0x20002954
   1e8a8:	0001e4a1 	.word	0x0001e4a1

0001e8ac <hci_internal_cmd_put>:

int hci_internal_cmd_put(uint8_t *cmd_in)
{
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   1e8ac:	4b0b      	ldr	r3, [pc, #44]	; (1e8dc <hci_internal_cmd_put+0x30>)
   1e8ae:	781b      	ldrb	r3, [r3, #0]
   1e8b0:	b96b      	cbnz	r3, 1e8ce <hci_internal_cmd_put+0x22>
		return -NRF_EPERM;
	}

	if ((((struct bt_hci_cmd_hdr *)cmd_in)->param_len + BT_HCI_CMD_HDR_SIZE)
   1e8b2:	7883      	ldrb	r3, [r0, #2]
   1e8b4:	3303      	adds	r3, #3
   1e8b6:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   1e8ba:	dc0b      	bgt.n	1e8d4 <hci_internal_cmd_put+0x28>
{
   1e8bc:	b510      	push	{r4, lr}
		> HCI_CMD_PACKET_MAX_SIZE) {
		return -EINVAL;
	}

	if (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT)) {
		cmd_put(cmd_in, &cmd_complete_or_status.raw_event[0]);
   1e8be:	4c07      	ldr	r4, [pc, #28]	; (1e8dc <hci_internal_cmd_put+0x30>)
   1e8c0:	1c61      	adds	r1, r4, #1
   1e8c2:	f00a f99d 	bl	28c00 <cmd_put>
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   1e8c6:	2301      	movs	r3, #1
   1e8c8:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   1e8ca:	2000      	movs	r0, #0
}
   1e8cc:	bd10      	pop	{r4, pc}
		return -NRF_EPERM;
   1e8ce:	f04f 30ff 	mov.w	r0, #4294967295
   1e8d2:	4770      	bx	lr
		return -EINVAL;
   1e8d4:	f06f 0015 	mvn.w	r0, #21
}
   1e8d8:	4770      	bx	lr
   1e8da:	bf00      	nop
   1e8dc:	200033c8 	.word	0x200033c8

0001e8e0 <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   1e8e0:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   1e8e2:	4b07      	ldr	r3, [pc, #28]	; (1e900 <hci_internal_evt_get+0x20>)
   1e8e4:	781b      	ldrb	r3, [r3, #0]
   1e8e6:	b913      	cbnz	r3, 1e8ee <hci_internal_evt_get+0xe>
		cmd_complete_or_status.occurred = false;

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
   1e8e8:	f7ee f819 	bl	c91e <sdc_hci_evt_get>
}
   1e8ec:	bd10      	pop	{r4, pc}
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   1e8ee:	4c04      	ldr	r4, [pc, #16]	; (1e900 <hci_internal_evt_get+0x20>)
   1e8f0:	78a2      	ldrb	r2, [r4, #2]
		memcpy(evt_out,
   1e8f2:	3202      	adds	r2, #2
   1e8f4:	1c61      	adds	r1, r4, #1
   1e8f6:	f006 f8b9 	bl	24a6c <memcpy>
		cmd_complete_or_status.occurred = false;
   1e8fa:	2000      	movs	r0, #0
   1e8fc:	7020      	strb	r0, [r4, #0]
		return 0;
   1e8fe:	e7f5      	b.n	1e8ec <hci_internal_evt_get+0xc>
   1e900:	200033c8 	.word	0x200033c8

0001e904 <bt_rand>:
#include <common/log.h>

#define BT_ECB_BLOCK_SIZE 16

int bt_rand(void *buf, size_t len)
{
   1e904:	b538      	push	{r3, r4, r5, lr}
   1e906:	4605      	mov	r5, r0
   1e908:	460c      	mov	r4, r1
	static const struct device *dev;

	if (unlikely(!dev)) {
   1e90a:	4b0a      	ldr	r3, [pc, #40]	; (1e934 <bt_rand+0x30>)
   1e90c:	681b      	ldr	r3, [r3, #0]
   1e90e:	b13b      	cbz	r3, 1e920 <bt_rand+0x1c>
		if (!dev) {
			return -ENODEV;
		}
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   1e910:	4b08      	ldr	r3, [pc, #32]	; (1e934 <bt_rand+0x30>)
   1e912:	6818      	ldr	r0, [r3, #0]
   1e914:	b2a2      	uxth	r2, r4
	const struct entropy_driver_api *api =
   1e916:	6883      	ldr	r3, [r0, #8]
	return api->get_entropy(dev, buffer, length);
   1e918:	681b      	ldr	r3, [r3, #0]
   1e91a:	4629      	mov	r1, r5
   1e91c:	4798      	blx	r3
}
   1e91e:	bd38      	pop	{r3, r4, r5, pc}
   1e920:	4805      	ldr	r0, [pc, #20]	; (1e938 <bt_rand+0x34>)
   1e922:	f000 fd11 	bl	1f348 <z_impl_device_get_binding>
		dev = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1e926:	4b03      	ldr	r3, [pc, #12]	; (1e934 <bt_rand+0x30>)
   1e928:	6018      	str	r0, [r3, #0]
		if (!dev) {
   1e92a:	2800      	cmp	r0, #0
   1e92c:	d1f0      	bne.n	1e910 <bt_rand+0xc>
			return -ENODEV;
   1e92e:	f06f 0012 	mvn.w	r0, #18
   1e932:	e7f4      	b.n	1e91e <bt_rand+0x1a>
   1e934:	20003410 	.word	0x20003410
   1e938:	0002ce44 	.word	0x0002ce44

0001e93c <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   1e93c:	b510      	push	{r4, lr}
   1e93e:	b082      	sub	sp, #8
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
   1e940:	f00a f9ed 	bl	28d1e <m_config_clock_source_get>
   1e944:	f88d 0000 	strb.w	r0, [sp]
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   1e948:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   1e94c:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
   1e950:	2300      	movs	r3, #0
   1e952:	f88d 3006 	strb.w	r3, [sp, #6]
		IS_ENABLED(CONFIG_SYSTEM_CLOCK_NO_WAIT);

#ifdef CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION
	/* clock_cfg.rc_ctiv is given in 1/4 seconds units.
	 * CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD is given in ms. */
	clock_cfg.rc_ctiv = (CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD * 4 / 1000);
   1e956:	2310      	movs	r3, #16
   1e958:	f88d 3001 	strb.w	r3, [sp, #1]
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
   1e95c:	2302      	movs	r3, #2
   1e95e:	f88d 3002 	strb.w	r3, [sp, #2]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1e962:	4a11      	ldr	r2, [pc, #68]	; (1e9a8 <mpsl_lib_init+0x6c>)
   1e964:	2119      	movs	r1, #25
   1e966:	4668      	mov	r0, sp
   1e968:	f7e4 ff9c 	bl	38a4 <mpsl_init>
	if (err) {
   1e96c:	4604      	mov	r4, r0
   1e96e:	b110      	cbz	r0, 1e976 <mpsl_lib_init+0x3a>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			   mpsl_radio_isr_wrapper, IRQ_ZERO_LATENCY);

	return 0;
}
   1e970:	4620      	mov	r0, r4
   1e972:	b002      	add	sp, #8
   1e974:	bd10      	pop	{r4, pc}
	mpsl_fem_device_config_254_apply_set(
   1e976:	f7e5 f903 	bl	3b80 <mpsl_fem_device_config_254_apply_set>
	err = mpsl_timeslot_session_count_set((void *) timeslot_context,
   1e97a:	2101      	movs	r1, #1
   1e97c:	480b      	ldr	r0, [pc, #44]	; (1e9ac <mpsl_lib_init+0x70>)
   1e97e:	f7ed fa50 	bl	be22 <mpsl_timeslot_session_count_set>
	if (err) {
   1e982:	4604      	mov	r4, r0
   1e984:	2800      	cmp	r0, #0
   1e986:	d1f3      	bne.n	1e970 <mpsl_lib_init+0x34>
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1e988:	2201      	movs	r2, #1
   1e98a:	2100      	movs	r1, #0
   1e98c:	2008      	movs	r0, #8
   1e98e:	f7f4 fdcb 	bl	13528 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1e992:	2201      	movs	r2, #1
   1e994:	2100      	movs	r1, #0
   1e996:	200b      	movs	r0, #11
   1e998:	f7f4 fdc6 	bl	13528 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1e99c:	2201      	movs	r2, #1
   1e99e:	2100      	movs	r1, #0
   1e9a0:	4610      	mov	r0, r2
   1e9a2:	f7f4 fdc1 	bl	13528 <z_arm_irq_priority_set>
	return 0;
   1e9a6:	e7e3      	b.n	1e970 <mpsl_lib_init+0x34>
   1e9a8:	0001e9b1 	.word	0x0001e9b1
   1e9ac:	20003414 	.word	0x20003414

0001e9b0 <m_assert_handler>:
{
   1e9b0:	b538      	push	{r3, r4, r5, lr}
   1e9b2:	460d      	mov	r5, r1
   1e9b4:	4b0d      	ldr	r3, [pc, #52]	; (1e9ec <m_assert_handler+0x3c>)
   1e9b6:	4a0e      	ldr	r2, [pc, #56]	; (1e9f0 <m_assert_handler+0x40>)
   1e9b8:	1a9b      	subs	r3, r3, r2
   1e9ba:	08db      	lsrs	r3, r3, #3
	LOG_ERR("MPSL ASSERT: %s, %d", log_strdup(file), line);
   1e9bc:	f04f 0400 	mov.w	r4, #0
   1e9c0:	2201      	movs	r2, #1
   1e9c2:	f362 0402 	bfi	r4, r2, #0, #3
   1e9c6:	f36f 04c5 	bfc	r4, #3, #3
   1e9ca:	f363 148f 	bfi	r4, r3, #6, #10
   1e9ce:	f7f2 fa25 	bl	10e1c <z_log_strdup>
   1e9d2:	4601      	mov	r1, r0
   1e9d4:	4623      	mov	r3, r4
   1e9d6:	462a      	mov	r2, r5
   1e9d8:	4806      	ldr	r0, [pc, #24]	; (1e9f4 <m_assert_handler+0x44>)
   1e9da:	f7f2 fbcf 	bl	1117c <log_2>
	k_oops();
   1e9de:	4040      	eors	r0, r0
   1e9e0:	f380 8811 	msr	BASEPRI, r0
   1e9e4:	f04f 0003 	mov.w	r0, #3
   1e9e8:	df02      	svc	2
}
   1e9ea:	bd38      	pop	{r3, r4, r5, pc}
   1e9ec:	00029f8c 	.word	0x00029f8c
   1e9f0:	00029ecc 	.word	0x00029ecc
   1e9f4:	0002cfc4 	.word	0x0002cfc4

0001e9f8 <signal_thread>:
{
   1e9f8:	b538      	push	{r3, r4, r5, lr}
		k_sem_take(&sem_signal, K_FOREVER);
   1e9fa:	f04f 34ff 	mov.w	r4, #4294967295
   1e9fe:	f04f 35ff 	mov.w	r5, #4294967295
	return z_impl_k_sem_take(sem, timeout);
   1ea02:	4622      	mov	r2, r4
   1ea04:	462b      	mov	r3, r5
   1ea06:	4806      	ldr	r0, [pc, #24]	; (1ea20 <signal_thread+0x28>)
   1ea08:	f001 f9be 	bl	1fd88 <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
   1ea0c:	4620      	mov	r0, r4
   1ea0e:	4629      	mov	r1, r5
   1ea10:	f7ff fce8 	bl	1e3e4 <multithreading_lock_acquire>
		mpsl_low_priority_process();
   1ea14:	f7ed fb1c 	bl	c050 <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
   1ea18:	f7ff fcee 	bl	1e3f8 <multithreading_lock_release>
	while (true) {
   1ea1c:	e7ed      	b.n	1e9fa <signal_thread+0x2>
   1ea1e:	bf00      	nop
   1ea20:	200007d4 	.word	0x200007d4

0001ea24 <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
   1ea24:	b530      	push	{r4, r5, lr}
   1ea26:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1ea28:	4d0f      	ldr	r5, [pc, #60]	; (1ea68 <mpsl_signal_thread_init+0x44>)
   1ea2a:	2200      	movs	r2, #0
   1ea2c:	2300      	movs	r3, #0
   1ea2e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1ea32:	2400      	movs	r4, #0
   1ea34:	9404      	str	r4, [sp, #16]
   1ea36:	f06f 0309 	mvn.w	r3, #9
   1ea3a:	9303      	str	r3, [sp, #12]
   1ea3c:	9402      	str	r4, [sp, #8]
   1ea3e:	9401      	str	r4, [sp, #4]
   1ea40:	9400      	str	r4, [sp, #0]
   1ea42:	4b0a      	ldr	r3, [pc, #40]	; (1ea6c <mpsl_signal_thread_init+0x48>)
   1ea44:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1ea48:	4909      	ldr	r1, [pc, #36]	; (1ea70 <mpsl_signal_thread_init+0x4c>)
   1ea4a:	4628      	mov	r0, r5
   1ea4c:	f00a fb39 	bl	290c2 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1ea50:	4908      	ldr	r1, [pc, #32]	; (1ea74 <mpsl_signal_thread_init+0x50>)
   1ea52:	4628      	mov	r0, r5
   1ea54:	f000 fec2 	bl	1f7dc <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   1ea58:	4622      	mov	r2, r4
   1ea5a:	2104      	movs	r1, #4
   1ea5c:	2019      	movs	r0, #25
   1ea5e:	f7f4 fd63 	bl	13528 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   1ea62:	4620      	mov	r0, r4
   1ea64:	b009      	add	sp, #36	; 0x24
   1ea66:	bd30      	pop	{r4, r5, pc}
   1ea68:	200020e0 	.word	0x200020e0
   1ea6c:	0001e9f9 	.word	0x0001e9f9
   1ea70:	20005880 	.word	0x20005880
   1ea74:	0002cfd8 	.word	0x0002cfd8

0001ea78 <mpsl_low_prio_irq_handler>:
{
   1ea78:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   1ea7a:	4802      	ldr	r0, [pc, #8]	; (1ea84 <mpsl_low_prio_irq_handler+0xc>)
   1ea7c:	f001 f95c 	bl	1fd38 <z_impl_k_sem_give>
}
   1ea80:	bd08      	pop	{r3, pc}
   1ea82:	bf00      	nop
   1ea84:	200007d4 	.word	0x200007d4

0001ea88 <mpsl_hfclk_callback>:
#include <mpsl_clock.h>

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
   1ea88:	b508      	push	{r3, lr}
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1ea8a:	4b02      	ldr	r3, [pc, #8]	; (1ea94 <mpsl_hfclk_callback+0xc>)
   1ea8c:	681b      	ldr	r3, [r3, #0]
   1ea8e:	2000      	movs	r0, #0
   1ea90:	4798      	blx	r3
}
   1ea92:	bd08      	pop	{r3, pc}
   1ea94:	20003438 	.word	0x20003438

0001ea98 <nrfx_clock_start>:

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   1ea98:	b508      	push	{r3, lr}
	switch (domain) {
   1ea9a:	b128      	cbz	r0, 1eaa8 <nrfx_clock_start+0x10>
   1ea9c:	2801      	cmp	r0, #1
   1ea9e:	d102      	bne.n	1eaa6 <nrfx_clock_start+0xe>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   1eaa0:	4804      	ldr	r0, [pc, #16]	; (1eab4 <nrfx_clock_start+0x1c>)
   1eaa2:	f7e4 fd5f 	bl	3564 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1eaa6:	bd08      	pop	{r3, pc}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1eaa8:	4b03      	ldr	r3, [pc, #12]	; (1eab8 <nrfx_clock_start+0x20>)
   1eaaa:	681b      	ldr	r3, [r3, #0]
   1eaac:	2001      	movs	r0, #1
   1eaae:	4798      	blx	r3
}
   1eab0:	e7f9      	b.n	1eaa6 <nrfx_clock_start+0xe>
   1eab2:	bf00      	nop
   1eab4:	0001ea89 	.word	0x0001ea89
   1eab8:	20003438 	.word	0x20003438

0001eabc <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   1eabc:	4b01      	ldr	r3, [pc, #4]	; (1eac4 <nrfx_clock_init+0x8>)
   1eabe:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   1eac0:	4801      	ldr	r0, [pc, #4]	; (1eac8 <nrfx_clock_init+0xc>)
   1eac2:	4770      	bx	lr
   1eac4:	20003438 	.word	0x20003438
   1eac8:	0bad0000 	.word	0x0bad0000

0001eacc <get_timeslot_time_us>:
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_timer_task_trigger(NRF_TIMER_Type * p_reg,
                                              nrf_timer_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1eacc:	4b03      	ldr	r3, [pc, #12]	; (1eadc <get_timeslot_time_us+0x10>)
   1eace:	2201      	movs	r2, #1
   1ead0:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE uint32_t nrf_timer_cc_get(NRF_TIMER_Type const * p_reg,
                                            nrf_timer_cc_channel_t cc_channel)
{
    return (uint32_t)p_reg->CC[cc_channel];
   1ead2:	3b40      	subs	r3, #64	; 0x40
   1ead4:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
 */
static uint32_t get_timeslot_time_us(void)
{
	nrf_timer_task_trigger(NRF_TIMER0, NRF_TIMER_TASK_CAPTURE0);
	return nrf_timer_cc_get(NRF_TIMER0, NRF_TIMER_CC_CHANNEL0);
}
   1ead8:	4770      	bx	lr
   1eada:	bf00      	nop
   1eadc:	40008040 	.word	0x40008040

0001eae0 <reschedule_next_timeslot>:

static void reschedule_next_timeslot(void)
{
   1eae0:	b508      	push	{r3, lr}
	_context.timeslot_request.params.earliest.priority =
   1eae2:	4b05      	ldr	r3, [pc, #20]	; (1eaf8 <reschedule_next_timeslot+0x18>)
   1eae4:	2200      	movs	r2, #0
   1eae6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		MPSL_TIMESLOT_PRIORITY_HIGH;

	int32_t ret = mpsl_timeslot_request(_context.session_id,
   1eaea:	f103 0124 	add.w	r1, r3, #36	; 0x24
   1eaee:	7e18      	ldrb	r0, [r3, #24]
   1eaf0:	f7ed f940 	bl	bd74 <mpsl_timeslot_request>
					    &_context.timeslot_request);

	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
		      "mpsl_timeslot_request failed: %d", ret);
}
   1eaf4:	bd08      	pop	{r3, pc}
   1eaf6:	bf00      	nop
   1eaf8:	2000343c 	.word	0x2000343c

0001eafc <timeslot_callback>:

static mpsl_timeslot_signal_return_param_t *
timeslot_callback(mpsl_timeslot_session_id_t session_id, uint32_t signal)
{
   1eafc:	b508      	push	{r3, lr}
   1eafe:	f3bf 8f5b 	dmb	ish
   1eb02:	4b1a      	ldr	r3, [pc, #104]	; (1eb6c <timeslot_callback+0x70>)
   1eb04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1eb06:	f3bf 8f5b 	dmb	ish
	int rc;
	__ASSERT_NO_MSG(session_id == _context.session_id);

	if (atomic_get(&_context.timeout_occured)) {
   1eb0a:	bb6b      	cbnz	r3, 1eb68 <timeslot_callback+0x6c>
		return NULL;
	}

	switch (signal) {
   1eb0c:	2906      	cmp	r1, #6
   1eb0e:	d812      	bhi.n	1eb36 <timeslot_callback+0x3a>
   1eb10:	2905      	cmp	r1, #5
   1eb12:	d225      	bcs.n	1eb60 <timeslot_callback+0x64>
   1eb14:	b969      	cbnz	r1, 1eb32 <timeslot_callback+0x36>
	case MPSL_TIMESLOT_SIGNAL_START:
		rc = _context.op_desc->handler(_context.op_desc->context);
   1eb16:	4b15      	ldr	r3, [pc, #84]	; (1eb6c <timeslot_callback+0x70>)
   1eb18:	6a1b      	ldr	r3, [r3, #32]
   1eb1a:	681a      	ldr	r2, [r3, #0]
   1eb1c:	6858      	ldr	r0, [r3, #4]
   1eb1e:	4790      	blx	r2
   1eb20:	4603      	mov	r3, r0
		if (rc != FLASH_OP_ONGOING) {
   1eb22:	2801      	cmp	r0, #1
   1eb24:	d010      	beq.n	1eb48 <timeslot_callback+0x4c>
			_context.status = (rc == FLASH_OP_DONE) ? 0 : rc;
   1eb26:	4811      	ldr	r0, [pc, #68]	; (1eb6c <timeslot_callback+0x70>)
   1eb28:	63c3      	str	r3, [r0, #60]	; 0x3c
			_context.return_param.callback_action =
   1eb2a:	2302      	movs	r3, #2
   1eb2c:	f800 3f34 	strb.w	r3, [r0, #52]!
   1eb30:	e000      	b.n	1eb34 <timeslot_callback+0x38>
	switch (signal) {
   1eb32:	2000      	movs	r0, #0
		__ASSERT(false, "unexpected signal: %u", signal);
		return NULL;
	}

	return &_context.return_param;
}
   1eb34:	bd08      	pop	{r3, pc}
	switch (signal) {
   1eb36:	2907      	cmp	r1, #7
   1eb38:	d104      	bne.n	1eb44 <timeslot_callback+0x48>
   1eb3a:	480c      	ldr	r0, [pc, #48]	; (1eb6c <timeslot_callback+0x70>)
   1eb3c:	f001 f8fc 	bl	1fd38 <z_impl_k_sem_give>
		return NULL;
   1eb40:	2000      	movs	r0, #0
   1eb42:	e7f7      	b.n	1eb34 <timeslot_callback+0x38>
	switch (signal) {
   1eb44:	2000      	movs	r0, #0
   1eb46:	e7f5      	b.n	1eb34 <timeslot_callback+0x38>
			_context.timeslot_request.params.earliest.priority =
   1eb48:	4808      	ldr	r0, [pc, #32]	; (1eb6c <timeslot_callback+0x70>)
   1eb4a:	2301      	movs	r3, #1
   1eb4c:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
			_context.return_param.callback_action =
   1eb50:	2303      	movs	r3, #3
   1eb52:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
			_context.return_param.params.request.p_next =
   1eb56:	f100 0324 	add.w	r3, r0, #36	; 0x24
   1eb5a:	6383      	str	r3, [r0, #56]	; 0x38
	return &_context.return_param;
   1eb5c:	3034      	adds	r0, #52	; 0x34
   1eb5e:	e7e9      	b.n	1eb34 <timeslot_callback+0x38>
		reschedule_next_timeslot();
   1eb60:	f7ff ffbe 	bl	1eae0 <reschedule_next_timeslot>
		return NULL;
   1eb64:	2000      	movs	r0, #0
   1eb66:	e7e5      	b.n	1eb34 <timeslot_callback+0x38>
		return NULL;
   1eb68:	2000      	movs	r0, #0
   1eb6a:	e7e3      	b.n	1eb34 <timeslot_callback+0x38>
   1eb6c:	2000343c 	.word	0x2000343c

0001eb70 <nrf_flash_sync_init>:

int nrf_flash_sync_init(void)
{
   1eb70:	b508      	push	{r3, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1eb72:	2201      	movs	r2, #1
   1eb74:	2100      	movs	r1, #0
   1eb76:	4802      	ldr	r0, [pc, #8]	; (1eb80 <nrf_flash_sync_init+0x10>)
   1eb78:	f00a fbe6 	bl	29348 <z_impl_k_sem_init>
	LOG_DBG("");
	return k_sem_init(&_context.timeout_sem, 0, 1);
}
   1eb7c:	bd08      	pop	{r3, pc}
   1eb7e:	bf00      	nop
   1eb80:	2000343c 	.word	0x2000343c

0001eb84 <nrf_flash_sync_set_context>:

void nrf_flash_sync_set_context(uint32_t duration)
{
	LOG_DBG("duration: %u", duration);
	_context.request_length_us = duration;
   1eb84:	4b01      	ldr	r3, [pc, #4]	; (1eb8c <nrf_flash_sync_set_context+0x8>)
   1eb86:	61d8      	str	r0, [r3, #28]
}
   1eb88:	4770      	bx	lr
   1eb8a:	bf00      	nop
   1eb8c:	2000343c 	.word	0x2000343c

0001eb90 <nrf_flash_sync_exe>:
{
	return mpsl_is_initialized();
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
   1eb90:	b538      	push	{r3, r4, r5, lr}
   1eb92:	4605      	mov	r5, r0
	LOG_DBG("");

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1eb94:	f04f 30ff 	mov.w	r0, #4294967295
   1eb98:	f04f 31ff 	mov.w	r1, #4294967295
   1eb9c:	f7ff fc22 	bl	1e3e4 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
	int32_t ret = mpsl_timeslot_session_open(timeslot_callback,
   1eba0:	4941      	ldr	r1, [pc, #260]	; (1eca8 <nrf_flash_sync_exe+0x118>)
   1eba2:	4842      	ldr	r0, [pc, #264]	; (1ecac <nrf_flash_sync_exe+0x11c>)
   1eba4:	f7e1 fc50 	bl	448 <mpsl_timeslot_session_open>
   1eba8:	4604      	mov	r4, r0
						 &_context.session_id);
	MULTITHREADING_LOCK_RELEASE();
   1ebaa:	f7ff fc25 	bl	1e3f8 <multithreading_lock_release>

	if (ret < 0) {
   1ebae:	2c00      	cmp	r4, #0
   1ebb0:	db46      	blt.n	1ec40 <nrf_flash_sync_exe+0xb0>
		LOG_ERR("mpsl_timeslot_session_open failed: %d", ret);
		return -ENOMEM;
	}

	mpsl_timeslot_request_t *req = &_context.timeslot_request;
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   1ebb2:	4c3f      	ldr	r4, [pc, #252]	; (1ecb0 <nrf_flash_sync_exe+0x120>)
   1ebb4:	2200      	movs	r2, #0
   1ebb6:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	req->params.earliest.hfclk = MPSL_TIMESLOT_HFCLK_CFG_NO_GUARANTEE;
   1ebba:	2301      	movs	r3, #1
   1ebbc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	req->params.earliest.priority = MPSL_TIMESLOT_PRIORITY_NORMAL;
   1ebc0:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	req->params.earliest.length_us =
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   1ebc4:	69e3      	ldr	r3, [r4, #28]
   1ebc6:	3364      	adds	r3, #100	; 0x64
	req->params.earliest.length_us =
   1ebc8:	62e3      	str	r3, [r4, #44]	; 0x2c
	req->params.earliest.timeout_us = MPSL_TIMESLOT_EARLIEST_TIMEOUT_MAX_US;
   1ebca:	4b3a      	ldr	r3, [pc, #232]	; (1ecb4 <nrf_flash_sync_exe+0x124>)
   1ebcc:	6323      	str	r3, [r4, #48]	; 0x30

	_context.op_desc = op_desc;
   1ebce:	6225      	str	r5, [r4, #32]
	_context.status = -ETIMEDOUT;
   1ebd0:	f06f 0373 	mvn.w	r3, #115	; 0x73
   1ebd4:	63e3      	str	r3, [r4, #60]	; 0x3c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1ebd6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1ebda:	f3bf 8f5b 	dmb	ish
   1ebde:	e853 1f00 	ldrex	r1, [r3]
   1ebe2:	e843 2000 	strex	r0, r2, [r3]
   1ebe6:	2800      	cmp	r0, #0
   1ebe8:	d1f9      	bne.n	1ebde <nrf_flash_sync_exe+0x4e>
   1ebea:	f3bf 8f5b 	dmb	ish
	atomic_clear(&_context.timeout_occured);

	__ASSERT_NO_MSG(k_sem_count_get(&_context.timeout_sem) == 0);

	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1ebee:	f04f 30ff 	mov.w	r0, #4294967295
   1ebf2:	f04f 31ff 	mov.w	r1, #4294967295
   1ebf6:	f7ff fbf5 	bl	1e3e4 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
	ret = mpsl_timeslot_request(_context.session_id, req);
   1ebfa:	f104 0124 	add.w	r1, r4, #36	; 0x24
   1ebfe:	7e20      	ldrb	r0, [r4, #24]
   1ec00:	f7ed f8b8 	bl	bd74 <mpsl_timeslot_request>
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
		      "mpsl_timeslot_request failed: %d", ret);
	MULTITHREADING_LOCK_RELEASE();
   1ec04:	f7ff fbf8 	bl	1e3f8 <multithreading_lock_release>
	return z_impl_k_sem_take(sem, timeout);
   1ec08:	4a2b      	ldr	r2, [pc, #172]	; (1ecb8 <nrf_flash_sync_exe+0x128>)
   1ec0a:	2300      	movs	r3, #0
   1ec0c:	4620      	mov	r0, r4
   1ec0e:	f001 f8bb 	bl	1fd88 <z_impl_k_sem_take>

	if (k_sem_take(&_context.timeout_sem, K_MSEC(FLASH_TIMEOUT_MS)) < 0) {
   1ec12:	2800      	cmp	r0, #0
   1ec14:	db28      	blt.n	1ec68 <nrf_flash_sync_exe+0xd8>
		LOG_ERR("timeout");
		atomic_set(&_context.timeout_occured, 1);
	}

	/* This will cancel the timeslot if it is still in progress. */
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1ec16:	f04f 30ff 	mov.w	r0, #4294967295
   1ec1a:	f04f 31ff 	mov.w	r1, #4294967295
   1ec1e:	f7ff fbe1 	bl	1e3e4 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
	mpsl_timeslot_session_close(_context.session_id);
   1ec22:	4c23      	ldr	r4, [pc, #140]	; (1ecb0 <nrf_flash_sync_exe+0x120>)
   1ec24:	7e20      	ldrb	r0, [r4, #24]
   1ec26:	f7ed f8de 	bl	bde6 <mpsl_timeslot_session_close>
	MULTITHREADING_LOCK_RELEASE();
   1ec2a:	f7ff fbe5 	bl	1e3f8 <multithreading_lock_release>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ec2e:	f3bf 8f5b 	dmb	ish
   1ec32:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1ec34:	f3bf 8f5b 	dmb	ish

	/* Reset the semaphore after timeout, in case if the operation _did_
	 * complete before closing the session. */
	if (atomic_get(&_context.timeout_occured)) {
   1ec38:	bb93      	cbnz	r3, 1eca0 <nrf_flash_sync_exe+0x110>
		k_sem_reset(&_context.timeout_sem);
	}

	return _context.status;
   1ec3a:	4b1d      	ldr	r3, [pc, #116]	; (1ecb0 <nrf_flash_sync_exe+0x120>)
   1ec3c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
}
   1ec3e:	bd38      	pop	{r3, r4, r5, pc}
   1ec40:	4b1e      	ldr	r3, [pc, #120]	; (1ecbc <nrf_flash_sync_exe+0x12c>)
   1ec42:	4a1f      	ldr	r2, [pc, #124]	; (1ecc0 <nrf_flash_sync_exe+0x130>)
   1ec44:	1a9b      	subs	r3, r3, r2
   1ec46:	08db      	lsrs	r3, r3, #3
		LOG_ERR("mpsl_timeslot_session_open failed: %d", ret);
   1ec48:	f04f 0200 	mov.w	r2, #0
   1ec4c:	2101      	movs	r1, #1
   1ec4e:	f361 0202 	bfi	r2, r1, #0, #3
   1ec52:	f36f 02c5 	bfc	r2, #3, #3
   1ec56:	f363 128f 	bfi	r2, r3, #6, #10
   1ec5a:	4621      	mov	r1, r4
   1ec5c:	4819      	ldr	r0, [pc, #100]	; (1ecc4 <nrf_flash_sync_exe+0x134>)
   1ec5e:	f7f2 fa57 	bl	11110 <log_1>
		return -ENOMEM;
   1ec62:	f06f 000b 	mvn.w	r0, #11
   1ec66:	e7ea      	b.n	1ec3e <nrf_flash_sync_exe+0xae>
   1ec68:	4b14      	ldr	r3, [pc, #80]	; (1ecbc <nrf_flash_sync_exe+0x12c>)
   1ec6a:	4a15      	ldr	r2, [pc, #84]	; (1ecc0 <nrf_flash_sync_exe+0x130>)
   1ec6c:	1a9b      	subs	r3, r3, r2
   1ec6e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("timeout");
   1ec70:	2401      	movs	r4, #1
   1ec72:	f04f 0100 	mov.w	r1, #0
   1ec76:	f364 0102 	bfi	r1, r4, #0, #3
   1ec7a:	f36f 01c5 	bfc	r1, #3, #3
   1ec7e:	f363 118f 	bfi	r1, r3, #6, #10
   1ec82:	4811      	ldr	r0, [pc, #68]	; (1ecc8 <nrf_flash_sync_exe+0x138>)
   1ec84:	f7f2 fafa 	bl	1127c <log_0>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1ec88:	4b10      	ldr	r3, [pc, #64]	; (1eccc <nrf_flash_sync_exe+0x13c>)
   1ec8a:	f3bf 8f5b 	dmb	ish
   1ec8e:	e853 2f00 	ldrex	r2, [r3]
   1ec92:	e843 4100 	strex	r1, r4, [r3]
   1ec96:	2900      	cmp	r1, #0
   1ec98:	d1f9      	bne.n	1ec8e <nrf_flash_sync_exe+0xfe>
   1ec9a:	f3bf 8f5b 	dmb	ish
   1ec9e:	e7ba      	b.n	1ec16 <nrf_flash_sync_exe+0x86>
	z_impl_k_sem_reset(sem);
   1eca0:	4620      	mov	r0, r4
   1eca2:	f001 f89b 	bl	1fddc <z_impl_k_sem_reset>
}
   1eca6:	e7c8      	b.n	1ec3a <nrf_flash_sync_exe+0xaa>
   1eca8:	20003454 	.word	0x20003454
   1ecac:	0001eafd 	.word	0x0001eafd
   1ecb0:	2000343c 	.word	0x2000343c
   1ecb4:	07a11fff 	.word	0x07a11fff
   1ecb8:	000b7b44 	.word	0x000b7b44
   1ecbc:	00029f64 	.word	0x00029f64
   1ecc0:	00029ecc 	.word	0x00029ecc
   1ecc4:	0002cff0 	.word	0x0002cff0
   1ecc8:	0002c0e4 	.word	0x0002c0e4
   1eccc:	2000347c 	.word	0x2000347c

0001ecd0 <nrf_flash_sync_check_time_limit>:
{
	/* Not needed for this driver. */
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
   1ecd0:	b510      	push	{r4, lr}
   1ecd2:	4604      	mov	r4, r0
	uint32_t now_us = get_timeslot_time_us();
   1ecd4:	f7ff fefa 	bl	1eacc <get_timeslot_time_us>
	uint32_t time_per_iteration_us = now_us / iteration;
   1ecd8:	fbb0 f4f4 	udiv	r4, r0, r4
	return now_us + time_per_iteration_us >= _context.request_length_us;
   1ecdc:	4420      	add	r0, r4
   1ecde:	4b03      	ldr	r3, [pc, #12]	; (1ecec <nrf_flash_sync_check_time_limit+0x1c>)
   1ece0:	69db      	ldr	r3, [r3, #28]
}
   1ece2:	4298      	cmp	r0, r3
   1ece4:	bf34      	ite	cc
   1ece6:	2000      	movcc	r0, #0
   1ece8:	2001      	movcs	r0, #1
   1ecea:	bd10      	pop	{r4, pc}
   1ecec:	2000343c 	.word	0x2000343c

0001ecf0 <nrf52_errata_12>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1ecf0:	4b06      	ldr	r3, [pc, #24]	; (1ed0c <nrf52_errata_12+0x1c>)
   1ecf2:	681b      	ldr	r3, [r3, #0]
   1ecf4:	f1b3 3fff 	cmp.w	r3, #4294967295
   1ecf8:	d003      	beq.n	1ed02 <nrf52_errata_12+0x12>
                var2 = *(uint32_t *)0x10000134ul;
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1ecfa:	2b06      	cmp	r3, #6
   1ecfc:	d004      	beq.n	1ed08 <nrf52_errata_12+0x18>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1ecfe:	2000      	movs	r0, #0
   1ed00:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1ed02:	4b03      	ldr	r3, [pc, #12]	; (1ed10 <nrf52_errata_12+0x20>)
   1ed04:	781b      	ldrb	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1ed06:	e7f8      	b.n	1ecfa <nrf52_errata_12+0xa>
                        return true;
   1ed08:	2001      	movs	r0, #1
    #endif
}
   1ed0a:	4770      	bx	lr
   1ed0c:	10000130 	.word	0x10000130
   1ed10:	f0000fe0 	.word	0xf0000fe0

0001ed14 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1ed14:	4b09      	ldr	r3, [pc, #36]	; (1ed3c <nrf52_errata_16+0x28>)
   1ed16:	781a      	ldrb	r2, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1ed18:	3308      	adds	r3, #8
   1ed1a:	681b      	ldr	r3, [r3, #0]
   1ed1c:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1ed20:	2a06      	cmp	r2, #6
   1ed22:	d001      	beq.n	1ed28 <nrf52_errata_16+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1ed24:	2000      	movs	r0, #0
   1ed26:	4770      	bx	lr
                switch(var2)
   1ed28:	3b03      	subs	r3, #3
   1ed2a:	2b00      	cmp	r3, #0
   1ed2c:	d804      	bhi.n	1ed38 <nrf52_errata_16+0x24>
   1ed2e:	e8df f003 	tbb	[pc, r3]
   1ed32:	01          	.byte	0x01
   1ed33:	00          	.byte	0x00
            if (var1 == 0x06)
   1ed34:	2001      	movs	r0, #1
   1ed36:	4770      	bx	lr
                        return false;
   1ed38:	2000      	movs	r0, #0
    #endif
}
   1ed3a:	4770      	bx	lr
   1ed3c:	f0000fe0 	.word	0xf0000fe0

0001ed40 <nrf52_errata_31>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1ed40:	4b06      	ldr	r3, [pc, #24]	; (1ed5c <nrf52_errata_31+0x1c>)
   1ed42:	681b      	ldr	r3, [r3, #0]
   1ed44:	f1b3 3fff 	cmp.w	r3, #4294967295
   1ed48:	d003      	beq.n	1ed52 <nrf52_errata_31+0x12>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1ed4a:	2b06      	cmp	r3, #6
   1ed4c:	d004      	beq.n	1ed58 <nrf52_errata_31+0x18>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1ed4e:	2000      	movs	r0, #0
   1ed50:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1ed52:	4b03      	ldr	r3, [pc, #12]	; (1ed60 <nrf52_errata_31+0x20>)
   1ed54:	781b      	ldrb	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1ed56:	e7f8      	b.n	1ed4a <nrf52_errata_31+0xa>
                        return true;
   1ed58:	2001      	movs	r0, #1
    #endif
}
   1ed5a:	4770      	bx	lr
   1ed5c:	10000130 	.word	0x10000130
   1ed60:	f0000fe0 	.word	0xf0000fe0

0001ed64 <nrf52_errata_32>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1ed64:	4b09      	ldr	r3, [pc, #36]	; (1ed8c <nrf52_errata_32+0x28>)
   1ed66:	781a      	ldrb	r2, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1ed68:	3308      	adds	r3, #8
   1ed6a:	681b      	ldr	r3, [r3, #0]
   1ed6c:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1ed70:	2a06      	cmp	r2, #6
   1ed72:	d001      	beq.n	1ed78 <nrf52_errata_32+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1ed74:	2000      	movs	r0, #0
   1ed76:	4770      	bx	lr
                switch(var2)
   1ed78:	3b03      	subs	r3, #3
   1ed7a:	2b00      	cmp	r3, #0
   1ed7c:	d804      	bhi.n	1ed88 <nrf52_errata_32+0x24>
   1ed7e:	e8df f003 	tbb	[pc, r3]
   1ed82:	01          	.byte	0x01
   1ed83:	00          	.byte	0x00
            if (var1 == 0x06)
   1ed84:	2001      	movs	r0, #1
   1ed86:	4770      	bx	lr
                        return false;
   1ed88:	2000      	movs	r0, #0
    #endif
}
   1ed8a:	4770      	bx	lr
   1ed8c:	f0000fe0 	.word	0xf0000fe0

0001ed90 <nrf52_errata_36>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1ed90:	4b06      	ldr	r3, [pc, #24]	; (1edac <nrf52_errata_36+0x1c>)
   1ed92:	681b      	ldr	r3, [r3, #0]
   1ed94:	f1b3 3fff 	cmp.w	r3, #4294967295
   1ed98:	d003      	beq.n	1eda2 <nrf52_errata_36+0x12>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1ed9a:	2b06      	cmp	r3, #6
   1ed9c:	d004      	beq.n	1eda8 <nrf52_errata_36+0x18>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1ed9e:	2000      	movs	r0, #0
   1eda0:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1eda2:	4b03      	ldr	r3, [pc, #12]	; (1edb0 <nrf52_errata_36+0x20>)
   1eda4:	781b      	ldrb	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1eda6:	e7f8      	b.n	1ed9a <nrf52_errata_36+0xa>
                        return true;
   1eda8:	2001      	movs	r0, #1
    #endif
}
   1edaa:	4770      	bx	lr
   1edac:	10000130 	.word	0x10000130
   1edb0:	f0000fe0 	.word	0xf0000fe0

0001edb4 <nrf52_errata_37>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1edb4:	4b09      	ldr	r3, [pc, #36]	; (1eddc <nrf52_errata_37+0x28>)
   1edb6:	781a      	ldrb	r2, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1edb8:	3308      	adds	r3, #8
   1edba:	681b      	ldr	r3, [r3, #0]
   1edbc:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1edc0:	2a06      	cmp	r2, #6
   1edc2:	d001      	beq.n	1edc8 <nrf52_errata_37+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1edc4:	2000      	movs	r0, #0
   1edc6:	4770      	bx	lr
                switch(var2)
   1edc8:	3b03      	subs	r3, #3
   1edca:	2b00      	cmp	r3, #0
   1edcc:	d804      	bhi.n	1edd8 <nrf52_errata_37+0x24>
   1edce:	e8df f003 	tbb	[pc, r3]
   1edd2:	01          	.byte	0x01
   1edd3:	00          	.byte	0x00
            if (var1 == 0x06)
   1edd4:	2001      	movs	r0, #1
   1edd6:	4770      	bx	lr
                        return false;
   1edd8:	2000      	movs	r0, #0
    #endif
}
   1edda:	4770      	bx	lr
   1eddc:	f0000fe0 	.word	0xf0000fe0

0001ede0 <nrf52_errata_57>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1ede0:	4b09      	ldr	r3, [pc, #36]	; (1ee08 <nrf52_errata_57+0x28>)
   1ede2:	781a      	ldrb	r2, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1ede4:	3308      	adds	r3, #8
   1ede6:	681b      	ldr	r3, [r3, #0]
   1ede8:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1edec:	2a06      	cmp	r2, #6
   1edee:	d001      	beq.n	1edf4 <nrf52_errata_57+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1edf0:	2000      	movs	r0, #0
   1edf2:	4770      	bx	lr
                switch(var2)
   1edf4:	3b03      	subs	r3, #3
   1edf6:	2b00      	cmp	r3, #0
   1edf8:	d804      	bhi.n	1ee04 <nrf52_errata_57+0x24>
   1edfa:	e8df f003 	tbb	[pc, r3]
   1edfe:	01          	.byte	0x01
   1edff:	00          	.byte	0x00
            if (var1 == 0x06)
   1ee00:	2001      	movs	r0, #1
   1ee02:	4770      	bx	lr
                        return false;
   1ee04:	2000      	movs	r0, #0
    #endif
}
   1ee06:	4770      	bx	lr
   1ee08:	f0000fe0 	.word	0xf0000fe0

0001ee0c <nrf52_errata_66>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1ee0c:	4b0d      	ldr	r3, [pc, #52]	; (1ee44 <nrf52_errata_66+0x38>)
   1ee0e:	681a      	ldr	r2, [r3, #0]
   1ee10:	f1b2 3fff 	cmp.w	r2, #4294967295
   1ee14:	d005      	beq.n	1ee22 <nrf52_errata_66+0x16>
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   1ee16:	4b0c      	ldr	r3, [pc, #48]	; (1ee48 <nrf52_errata_66+0x3c>)
   1ee18:	681b      	ldr	r3, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1ee1a:	2a06      	cmp	r2, #6
   1ee1c:	d008      	beq.n	1ee30 <nrf52_errata_66+0x24>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1ee1e:	2000      	movs	r0, #0
   1ee20:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1ee22:	4b0a      	ldr	r3, [pc, #40]	; (1ee4c <nrf52_errata_66+0x40>)
   1ee24:	781a      	ldrb	r2, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1ee26:	3308      	adds	r3, #8
   1ee28:	681b      	ldr	r3, [r3, #0]
   1ee2a:	f3c3 1303 	ubfx	r3, r3, #4, #4
   1ee2e:	e7f4      	b.n	1ee1a <nrf52_errata_66+0xe>
                switch(var2)
   1ee30:	3b03      	subs	r3, #3
   1ee32:	2b01      	cmp	r3, #1
   1ee34:	d804      	bhi.n	1ee40 <nrf52_errata_66+0x34>
   1ee36:	e8df f003 	tbb	[pc, r3]
   1ee3a:	0101      	.short	0x0101
            if (var1 == 0x06)
   1ee3c:	2000      	movs	r0, #0
   1ee3e:	4770      	bx	lr
                        return true;
   1ee40:	2001      	movs	r0, #1
    #endif
}
   1ee42:	4770      	bx	lr
   1ee44:	10000130 	.word	0x10000130
   1ee48:	10000134 	.word	0x10000134
   1ee4c:	f0000fe0 	.word	0xf0000fe0

0001ee50 <nrf52_errata_108>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1ee50:	4b06      	ldr	r3, [pc, #24]	; (1ee6c <nrf52_errata_108+0x1c>)
   1ee52:	681b      	ldr	r3, [r3, #0]
   1ee54:	f1b3 3fff 	cmp.w	r3, #4294967295
   1ee58:	d003      	beq.n	1ee62 <nrf52_errata_108+0x12>
                var2 = *(uint32_t *)0x10000134ul;
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1ee5a:	2b06      	cmp	r3, #6
   1ee5c:	d004      	beq.n	1ee68 <nrf52_errata_108+0x18>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1ee5e:	2000      	movs	r0, #0
   1ee60:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1ee62:	4b03      	ldr	r3, [pc, #12]	; (1ee70 <nrf52_errata_108+0x20>)
   1ee64:	781b      	ldrb	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1ee66:	e7f8      	b.n	1ee5a <nrf52_errata_108+0xa>
                        return true;
   1ee68:	2001      	movs	r0, #1
    #endif
}
   1ee6a:	4770      	bx	lr
   1ee6c:	10000130 	.word	0x10000130
   1ee70:	f0000fe0 	.word	0xf0000fe0

0001ee74 <nrf52_errata_136>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1ee74:	4b06      	ldr	r3, [pc, #24]	; (1ee90 <nrf52_errata_136+0x1c>)
   1ee76:	681b      	ldr	r3, [r3, #0]
   1ee78:	f1b3 3fff 	cmp.w	r3, #4294967295
   1ee7c:	d003      	beq.n	1ee86 <nrf52_errata_136+0x12>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1ee7e:	2b06      	cmp	r3, #6
   1ee80:	d004      	beq.n	1ee8c <nrf52_errata_136+0x18>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1ee82:	2000      	movs	r0, #0
   1ee84:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1ee86:	4b03      	ldr	r3, [pc, #12]	; (1ee94 <nrf52_errata_136+0x20>)
   1ee88:	781b      	ldrb	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1ee8a:	e7f8      	b.n	1ee7e <nrf52_errata_136+0xa>
                        return true;
   1ee8c:	2001      	movs	r0, #1
    #endif
}
   1ee8e:	4770      	bx	lr
   1ee90:	10000130 	.word	0x10000130
   1ee94:	f0000fe0 	.word	0xf0000fe0

0001ee98 <nrf52_errata_182>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1ee98:	4b08      	ldr	r3, [pc, #32]	; (1eebc <nrf52_errata_182+0x24>)
   1ee9a:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1ee9c:	4a08      	ldr	r2, [pc, #32]	; (1eec0 <nrf52_errata_182+0x28>)
   1ee9e:	6812      	ldr	r2, [r2, #0]
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1eea0:	2b06      	cmp	r3, #6
   1eea2:	d001      	beq.n	1eea8 <nrf52_errata_182+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1eea4:	2000      	movs	r0, #0
   1eea6:	4770      	bx	lr
                switch(var2)
   1eea8:	2a05      	cmp	r2, #5
   1eeaa:	d803      	bhi.n	1eeb4 <nrf52_errata_182+0x1c>
   1eeac:	2a03      	cmp	r2, #3
   1eeae:	d303      	bcc.n	1eeb8 <nrf52_errata_182+0x20>
   1eeb0:	2000      	movs	r0, #0
   1eeb2:	4770      	bx	lr
                        return true;
   1eeb4:	2001      	movs	r0, #1
   1eeb6:	4770      	bx	lr
                        return true;
   1eeb8:	2001      	movs	r0, #1
    #endif
}
   1eeba:	4770      	bx	lr
   1eebc:	10000130 	.word	0x10000130
   1eec0:	10000134 	.word	0x10000134

0001eec4 <nrf52_errata_249>:
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1eec4:	4b08      	ldr	r3, [pc, #32]	; (1eee8 <nrf52_errata_249+0x24>)
   1eec6:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1eec8:	4a08      	ldr	r2, [pc, #32]	; (1eeec <nrf52_errata_249+0x28>)
   1eeca:	6812      	ldr	r2, [r2, #0]
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1eecc:	2b06      	cmp	r3, #6
   1eece:	d001      	beq.n	1eed4 <nrf52_errata_249+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1eed0:	2000      	movs	r0, #0
   1eed2:	4770      	bx	lr
                switch(var2)
   1eed4:	2a06      	cmp	r2, #6
   1eed6:	d803      	bhi.n	1eee0 <nrf52_errata_249+0x1c>
   1eed8:	2a03      	cmp	r2, #3
   1eeda:	d303      	bcc.n	1eee4 <nrf52_errata_249+0x20>
   1eedc:	2000      	movs	r0, #0
   1eede:	4770      	bx	lr
                        return true;
   1eee0:	2001      	movs	r0, #1
   1eee2:	4770      	bx	lr
                        return true;
   1eee4:	2001      	movs	r0, #1
    #endif
}
   1eee6:	4770      	bx	lr
   1eee8:	10000130 	.word	0x10000130
   1eeec:	10000134 	.word	0x10000134

0001eef0 <SystemCoreClockUpdate>:
    nvmc_wait();
}

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1eef0:	4b01      	ldr	r3, [pc, #4]	; (1eef8 <SystemCoreClockUpdate+0x8>)
   1eef2:	4a02      	ldr	r2, [pc, #8]	; (1eefc <SystemCoreClockUpdate+0xc>)
   1eef4:	601a      	str	r2, [r3, #0]
}
   1eef6:	4770      	bx	lr
   1eef8:	20000654 	.word	0x20000654
   1eefc:	03d09000 	.word	0x03d09000

0001ef00 <SystemInit>:

void SystemInit(void)
{
   1ef00:	b508      	push	{r3, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
   1ef02:	f7ff fef5 	bl	1ecf0 <nrf52_errata_12>
   1ef06:	b128      	cbz	r0, 1ef14 <SystemInit+0x14>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   1ef08:	4b5b      	ldr	r3, [pc, #364]	; (1f078 <SystemInit+0x178>)
   1ef0a:	681b      	ldr	r3, [r3, #0]
   1ef0c:	f3c3 2304 	ubfx	r3, r3, #8, #5
   1ef10:	4a5a      	ldr	r2, [pc, #360]	; (1f07c <SystemInit+0x17c>)
   1ef12:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
   1ef14:	f7ff fefe 	bl	1ed14 <nrf52_errata_16>
   1ef18:	b110      	cbz	r0, 1ef20 <SystemInit+0x20>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   1ef1a:	4b59      	ldr	r3, [pc, #356]	; (1f080 <SystemInit+0x180>)
   1ef1c:	4a59      	ldr	r2, [pc, #356]	; (1f084 <SystemInit+0x184>)
   1ef1e:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
   1ef20:	f7ff ff0e 	bl	1ed40 <nrf52_errata_31>
   1ef24:	b128      	cbz	r0, 1ef32 <SystemInit+0x32>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   1ef26:	4b58      	ldr	r3, [pc, #352]	; (1f088 <SystemInit+0x188>)
   1ef28:	681b      	ldr	r3, [r3, #0]
   1ef2a:	f3c3 3342 	ubfx	r3, r3, #13, #3
   1ef2e:	4a57      	ldr	r2, [pc, #348]	; (1f08c <SystemInit+0x18c>)
   1ef30:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
   1ef32:	f7ff ff17 	bl	1ed64 <nrf52_errata_32>
   1ef36:	b120      	cbz	r0, 1ef42 <SystemInit+0x42>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   1ef38:	4a55      	ldr	r2, [pc, #340]	; (1f090 <SystemInit+0x190>)
   1ef3a:	68d3      	ldr	r3, [r2, #12]
   1ef3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1ef40:	60d3      	str	r3, [r2, #12]
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   1ef42:	f7ff ff25 	bl	1ed90 <nrf52_errata_36>
   1ef46:	b140      	cbz	r0, 1ef5a <SystemInit+0x5a>
            NRF_CLOCK->EVENTS_DONE = 0;
   1ef48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ef4c:	2200      	movs	r2, #0
   1ef4e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1ef52:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1ef56:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
   1ef5a:	f7ff ff2b 	bl	1edb4 <nrf52_errata_37>
   1ef5e:	b110      	cbz	r0, 1ef66 <SystemInit+0x66>
            *(volatile uint32_t *)0x400005A0 = 0x3;
   1ef60:	4b4c      	ldr	r3, [pc, #304]	; (1f094 <SystemInit+0x194>)
   1ef62:	2203      	movs	r2, #3
   1ef64:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
   1ef66:	f7ff ff3b 	bl	1ede0 <nrf52_errata_57>
   1ef6a:	b158      	cbz	r0, 1ef84 <SystemInit+0x84>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
   1ef6c:	4b4a      	ldr	r3, [pc, #296]	; (1f098 <SystemInit+0x198>)
   1ef6e:	2205      	movs	r2, #5
   1ef70:	601a      	str	r2, [r3, #0]
            *(volatile uint32_t *)0x40005688 = 0x00000001;
   1ef72:	3378      	adds	r3, #120	; 0x78
   1ef74:	2201      	movs	r2, #1
   1ef76:	601a      	str	r2, [r3, #0]
            *(volatile uint32_t *)0x40005618 = 0x00000000;
   1ef78:	3b70      	subs	r3, #112	; 0x70
   1ef7a:	2200      	movs	r2, #0
   1ef7c:	601a      	str	r2, [r3, #0]
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
   1ef7e:	3b04      	subs	r3, #4
   1ef80:	223f      	movs	r2, #63	; 0x3f
   1ef82:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1ef84:	f7ff ff42 	bl	1ee0c <nrf52_errata_66>
   1ef88:	2800      	cmp	r0, #0
   1ef8a:	d046      	beq.n	1f01a <SystemInit+0x11a>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1ef8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1ef90:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1ef94:	4b41      	ldr	r3, [pc, #260]	; (1f09c <SystemInit+0x19c>)
   1ef96:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1ef9a:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1ef9e:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1efa2:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1efa6:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1efaa:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1efae:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1efb2:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1efb6:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1efba:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1efbe:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1efc2:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1efc6:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1efca:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1efce:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1efd2:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1efd6:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1efda:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1efde:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1efe2:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1efe6:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1efea:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1efee:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1eff2:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1eff6:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1effa:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1effe:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1f002:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1f006:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1f00a:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1f00e:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1f012:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1f016:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
   1f01a:	f7ff ff19 	bl	1ee50 <nrf52_errata_108>
   1f01e:	b128      	cbz	r0, 1f02c <SystemInit+0x12c>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   1f020:	4b1f      	ldr	r3, [pc, #124]	; (1f0a0 <SystemInit+0x1a0>)
   1f022:	681b      	ldr	r3, [r3, #0]
   1f024:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   1f028:	4a1e      	ldr	r2, [pc, #120]	; (1f0a4 <SystemInit+0x1a4>)
   1f02a:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1f02c:	f7ff ff22 	bl	1ee74 <nrf52_errata_136>
   1f030:	b160      	cbz	r0, 1f04c <SystemInit+0x14c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1f032:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f036:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   1f03a:	f013 0f01 	tst.w	r3, #1
   1f03e:	d005      	beq.n	1f04c <SystemInit+0x14c>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1f040:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f044:	f06f 0201 	mvn.w	r2, #1
   1f048:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
   1f04c:	f7ff ff24 	bl	1ee98 <nrf52_errata_182>
   1f050:	b120      	cbz	r0, 1f05c <SystemInit+0x15c>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   1f052:	4a15      	ldr	r2, [pc, #84]	; (1f0a8 <SystemInit+0x1a8>)
   1f054:	6813      	ldr	r3, [r2, #0]
   1f056:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1f05a:	6013      	str	r3, [r2, #0]
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
   1f05c:	f7ff ff32 	bl	1eec4 <nrf52_errata_249>
   1f060:	b138      	cbz	r0, 1f072 <SystemInit+0x172>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   1f062:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1f066:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1f06a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f06e:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
   1f072:	f7ff ff3d 	bl	1eef0 <SystemCoreClockUpdate>
}
   1f076:	bd08      	pop	{r3, pc}
   1f078:	10000324 	.word	0x10000324
   1f07c:	40013540 	.word	0x40013540
   1f080:	4007c074 	.word	0x4007c074
   1f084:	baadf00d 	.word	0xbaadf00d
   1f088:	10000244 	.word	0x10000244
   1f08c:	4000053c 	.word	0x4000053c
   1f090:	e000edf0 	.word	0xe000edf0
   1f094:	400005a0 	.word	0x400005a0
   1f098:	40005610 	.word	0x40005610
   1f09c:	4000c000 	.word	0x4000c000
   1f0a0:	10000258 	.word	0x10000258
   1f0a4:	40000ee4 	.word	0x40000ee4
   1f0a8:	4000173c 	.word	0x4000173c

0001f0ac <nvmc_readonly_mode_set>:
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   1f0ac:	4b02      	ldr	r3, [pc, #8]	; (1f0b8 <nvmc_readonly_mode_set+0xc>)
   1f0ae:	2200      	movs	r2, #0
   1f0b0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_READONLY);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_READONLY);
#endif
}
   1f0b4:	4770      	bx	lr
   1f0b6:	bf00      	nop
   1f0b8:	4001e000 	.word	0x4001e000

0001f0bc <nvmc_write_mode_set>:
   1f0bc:	4b02      	ldr	r3, [pc, #8]	; (1f0c8 <nvmc_write_mode_set+0xc>)
   1f0be:	2201      	movs	r2, #1
   1f0c0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_WRITE);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_WRITE);
#endif
}
   1f0c4:	4770      	bx	lr
   1f0c6:	bf00      	nop
   1f0c8:	4001e000 	.word	0x4001e000

0001f0cc <nvmc_erase_mode_set>:
   1f0cc:	4b02      	ldr	r3, [pc, #8]	; (1f0d8 <nvmc_erase_mode_set+0xc>)
   1f0ce:	2202      	movs	r2, #2
   1f0d0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_ERASE);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_ERASE);
#endif
}
   1f0d4:	4770      	bx	lr
   1f0d6:	bf00      	nop
   1f0d8:	4001e000 	.word	0x4001e000

0001f0dc <nvmc_word_write>:
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1f0dc:	4b04      	ldr	r3, [pc, #16]	; (1f0f0 <nvmc_word_write+0x14>)
   1f0de:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1f0e2:	f013 0f01 	tst.w	r3, #1
   1f0e6:	d0f9      	beq.n	1f0dc <nvmc_word_write>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   1f0e8:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   1f0ea:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   1f0ee:	4770      	bx	lr
   1f0f0:	4001e000 	.word	0x4001e000

0001f0f4 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   1f0f4:	b510      	push	{r4, lr}
   1f0f6:	4604      	mov	r4, r0
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   1f0f8:	f009 fe65 	bl	28dc6 <is_page_aligned_check>
   1f0fc:	b908      	cbnz	r0, 1f102 <nrfx_nvmc_page_erase+0xe>
    {
        return NRFX_ERROR_INVALID_ADDR;
   1f0fe:	4808      	ldr	r0, [pc, #32]	; (1f120 <nrfx_nvmc_page_erase+0x2c>)
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
}
   1f100:	bd10      	pop	{r4, pc}
    nvmc_erase_mode_set();
   1f102:	f7ff ffe3 	bl	1f0cc <nvmc_erase_mode_set>
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   1f106:	4b07      	ldr	r3, [pc, #28]	; (1f124 <nrfx_nvmc_page_erase+0x30>)
   1f108:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1f10c:	4b05      	ldr	r3, [pc, #20]	; (1f124 <nrfx_nvmc_page_erase+0x30>)
   1f10e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1f112:	f013 0f01 	tst.w	r3, #1
   1f116:	d0f9      	beq.n	1f10c <nrfx_nvmc_page_erase+0x18>
    nvmc_readonly_mode_set();
   1f118:	f7ff ffc8 	bl	1f0ac <nvmc_readonly_mode_set>
    return NRFX_SUCCESS;
   1f11c:	4802      	ldr	r0, [pc, #8]	; (1f128 <nrfx_nvmc_page_erase+0x34>)
   1f11e:	e7ef      	b.n	1f100 <nrfx_nvmc_page_erase+0xc>
   1f120:	0bad000a 	.word	0x0bad000a
   1f124:	4001e000 	.word	0x4001e000
   1f128:	0bad0000 	.word	0x0bad0000

0001f12c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   1f12c:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1f12e:	4c11      	ldr	r4, [pc, #68]	; (1f174 <_DoInit+0x48>)
   1f130:	2303      	movs	r3, #3
   1f132:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1f134:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   1f136:	4a10      	ldr	r2, [pc, #64]	; (1f178 <_DoInit+0x4c>)
   1f138:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1f13a:	4b10      	ldr	r3, [pc, #64]	; (1f17c <_DoInit+0x50>)
   1f13c:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   1f13e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1f142:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   1f144:	2300      	movs	r3, #0
   1f146:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   1f148:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1f14a:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   1f14c:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   1f14e:	4a0c      	ldr	r2, [pc, #48]	; (1f180 <_DoInit+0x54>)
   1f150:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   1f152:	2210      	movs	r2, #16
   1f154:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   1f156:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   1f158:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1f15a:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   1f15c:	4909      	ldr	r1, [pc, #36]	; (1f184 <_DoInit+0x58>)
   1f15e:	1de0      	adds	r0, r4, #7
   1f160:	f005 fc13 	bl	2498a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   1f164:	4908      	ldr	r1, [pc, #32]	; (1f188 <_DoInit+0x5c>)
   1f166:	4620      	mov	r0, r4
   1f168:	f005 fc0f 	bl	2498a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   1f16c:	2320      	movs	r3, #32
   1f16e:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   1f170:	bd10      	pop	{r4, pc}
   1f172:	bf00      	nop
   1f174:	20003480 	.word	0x20003480
   1f178:	0002d028 	.word	0x0002d028
   1f17c:	20003538 	.word	0x20003538
   1f180:	20003528 	.word	0x20003528
   1f184:	0002d034 	.word	0x0002d034
   1f188:	0002d038 	.word	0x0002d038

0001f18c <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1f18c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f190:	4604      	mov	r4, r0
   1f192:	460e      	mov	r6, r1
   1f194:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   1f196:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1f19a:	4a2d      	ldr	r2, [pc, #180]	; (1f250 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   1f19c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1f1a0:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   1f1a2:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1f1a4:	42bb      	cmp	r3, r7
   1f1a6:	d84b      	bhi.n	1f240 <SEGGER_RTT_WriteSkipNoLock+0xb4>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   1f1a8:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   1f1ac:	4928      	ldr	r1, [pc, #160]	; (1f250 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   1f1ae:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   1f1b2:	f8d2 8020 	ldr.w	r8, [r2, #32]
   1f1b6:	eba8 0907 	sub.w	r9, r8, r7
   1f1ba:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   1f1be:	4295      	cmp	r5, r2
   1f1c0:	d904      	bls.n	1f1cc <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
   1f1c2:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   1f1c4:	429d      	cmp	r5, r3
   1f1c6:	d916      	bls.n	1f1f6 <SEGGER_RTT_WriteSkipNoLock+0x6a>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
   1f1c8:	2000      	movs	r0, #0
   1f1ca:	e03e      	b.n	1f24a <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1f1cc:	f8df 8080 	ldr.w	r8, [pc, #128]	; 1f250 <SEGGER_RTT_WriteSkipNoLock+0xc4>
   1f1d0:	1c63      	adds	r3, r4, #1
   1f1d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1f1d6:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   1f1da:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   1f1dc:	462a      	mov	r2, r5
   1f1de:	4631      	mov	r1, r6
   1f1e0:	4438      	add	r0, r7
   1f1e2:	f005 fc43 	bl	24a6c <memcpy>
      pRing->WrOff = WrOff + NumBytes;
   1f1e6:	443d      	add	r5, r7
   1f1e8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1f1ec:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
   1f1f0:	6265      	str	r5, [r4, #36]	; 0x24
      return 1;
   1f1f2:	2001      	movs	r0, #1
   1f1f4:	e029      	b.n	1f24a <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1f1f6:	1c43      	adds	r3, r0, #1
   1f1f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1f1fc:	4a14      	ldr	r2, [pc, #80]	; (1f250 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   1f1fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1f202:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   1f204:	464a      	mov	r2, r9
   1f206:	4631      	mov	r1, r6
   1f208:	4438      	add	r0, r7
   1f20a:	f005 fc2f 	bl	24a6c <memcpy>
      NumBytes -= Rem;
   1f20e:	eba7 0708 	sub.w	r7, r7, r8
      if (NumBytes) {
   1f212:	197f      	adds	r7, r7, r5
   1f214:	d107      	bne.n	1f226 <SEGGER_RTT_WriteSkipNoLock+0x9a>
      pRing->WrOff = NumBytes;
   1f216:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1f21a:	4b0d      	ldr	r3, [pc, #52]	; (1f250 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   1f21c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   1f220:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
   1f222:	2001      	movs	r0, #1
   1f224:	e011      	b.n	1f24a <SEGGER_RTT_WriteSkipNoLock+0xbe>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
   1f226:	1c63      	adds	r3, r4, #1
   1f228:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1f22c:	4a08      	ldr	r2, [pc, #32]	; (1f250 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   1f22e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
        memcpy((void*)pDst, pData + Rem, NumBytes);
   1f232:	463a      	mov	r2, r7
   1f234:	eb06 0109 	add.w	r1, r6, r9
   1f238:	6858      	ldr	r0, [r3, #4]
   1f23a:	f005 fc17 	bl	24a6c <memcpy>
   1f23e:	e7ea      	b.n	1f216 <SEGGER_RTT_WriteSkipNoLock+0x8a>
    Avail = RdOff - WrOff - 1u;
   1f240:	1bdb      	subs	r3, r3, r7
   1f242:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   1f244:	42ab      	cmp	r3, r5
   1f246:	d2c1      	bcs.n	1f1cc <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
   1f248:	2000      	movs	r0, #0
}
   1f24a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1f24e:	bf00      	nop
   1f250:	20003480 	.word	0x20003480

0001f254 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1f254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f256:	460f      	mov	r7, r1
   1f258:	4616      	mov	r6, r2
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   1f25a:	4b18      	ldr	r3, [pc, #96]	; (1f2bc <SEGGER_RTT_WriteNoLock+0x68>)
   1f25c:	1c45      	adds	r5, r0, #1
   1f25e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1f262:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   1f266:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1f26a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1f26e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
   1f270:	2c01      	cmp	r4, #1
   1f272:	d011      	beq.n	1f298 <SEGGER_RTT_WriteNoLock+0x44>
   1f274:	2c02      	cmp	r4, #2
   1f276:	d01c      	beq.n	1f2b2 <SEGGER_RTT_WriteNoLock+0x5e>
   1f278:	b114      	cbz	r4, 1f280 <SEGGER_RTT_WriteNoLock+0x2c>
   1f27a:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
   1f27c:	4620      	mov	r0, r4
   1f27e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
   1f280:	4628      	mov	r0, r5
   1f282:	f009 fdc4 	bl	28e0e <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
   1f286:	4286      	cmp	r6, r0
   1f288:	d8f8      	bhi.n	1f27c <SEGGER_RTT_WriteNoLock+0x28>
      _WriteNoCheck(pRing, pData, NumBytes);
   1f28a:	4632      	mov	r2, r6
   1f28c:	4639      	mov	r1, r7
   1f28e:	4628      	mov	r0, r5
   1f290:	f009 fdc9 	bl	28e26 <_WriteNoCheck>
      Status = NumBytes;
   1f294:	4634      	mov	r4, r6
   1f296:	e7f1      	b.n	1f27c <SEGGER_RTT_WriteNoLock+0x28>
    Avail = _GetAvailWriteSpace(pRing);
   1f298:	4628      	mov	r0, r5
   1f29a:	f009 fdb8 	bl	28e0e <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
   1f29e:	4634      	mov	r4, r6
   1f2a0:	4286      	cmp	r6, r0
   1f2a2:	bf28      	it	cs
   1f2a4:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
   1f2a6:	4622      	mov	r2, r4
   1f2a8:	4639      	mov	r1, r7
   1f2aa:	4628      	mov	r0, r5
   1f2ac:	f009 fdbb 	bl	28e26 <_WriteNoCheck>
    break;
   1f2b0:	e7e4      	b.n	1f27c <SEGGER_RTT_WriteNoLock+0x28>
    Status = _WriteBlocking(pRing, pData, NumBytes);
   1f2b2:	4628      	mov	r0, r5
   1f2b4:	f009 fdd9 	bl	28e6a <_WriteBlocking>
   1f2b8:	4604      	mov	r4, r0
    break;
   1f2ba:	e7df      	b.n	1f27c <SEGGER_RTT_WriteNoLock+0x28>
   1f2bc:	20003480 	.word	0x20003480

0001f2c0 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   1f2c0:	4b06      	ldr	r3, [pc, #24]	; (1f2dc <SEGGER_RTT_HasDataUp+0x1c>)
   1f2c2:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   1f2c6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   1f2ca:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
   1f2cc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1f2d0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1f2d4:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
   1f2d6:	1a80      	subs	r0, r0, r2
   1f2d8:	4770      	bx	lr
   1f2da:	bf00      	nop
   1f2dc:	20003480 	.word	0x20003480

0001f2e0 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
   1f2e0:	4b03      	ldr	r3, [pc, #12]	; (1f2f0 <z_device_state_init+0x10>)

	while (dev < __device_end) {
   1f2e2:	4a04      	ldr	r2, [pc, #16]	; (1f2f4 <z_device_state_init+0x14>)
   1f2e4:	4293      	cmp	r3, r2
   1f2e6:	d201      	bcs.n	1f2ec <z_device_state_init+0xc>
		device_pm_state_init(dev);
		z_object_init(dev);
		++dev;
   1f2e8:	3318      	adds	r3, #24
   1f2ea:	e7fa      	b.n	1f2e2 <z_device_state_init+0x2>
	}
}
   1f2ec:	4770      	bx	lr
   1f2ee:	bf00      	nop
   1f2f0:	2000066c 	.word	0x2000066c
   1f2f4:	200006e4 	.word	0x200006e4

0001f2f8 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   1f2f8:	b570      	push	{r4, r5, r6, lr}
   1f2fa:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1f2fc:	4b11      	ldr	r3, [pc, #68]	; (1f344 <z_sys_init_run_level+0x4c>)
   1f2fe:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1f302:	e009      	b.n	1f318 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
   1f304:	4240      	negs	r0, r0
   1f306:	e017      	b.n	1f338 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
   1f308:	68eb      	ldr	r3, [r5, #12]
   1f30a:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
   1f30c:	68ea      	ldr	r2, [r5, #12]
   1f30e:	7853      	ldrb	r3, [r2, #1]
   1f310:	f043 0301 	orr.w	r3, r3, #1
   1f314:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1f316:	3408      	adds	r4, #8
   1f318:	1c73      	adds	r3, r6, #1
   1f31a:	4a0a      	ldr	r2, [pc, #40]	; (1f344 <z_sys_init_run_level+0x4c>)
   1f31c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1f320:	42a3      	cmp	r3, r4
   1f322:	d90d      	bls.n	1f340 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
   1f324:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
   1f326:	6823      	ldr	r3, [r4, #0]
   1f328:	4628      	mov	r0, r5
   1f32a:	4798      	blx	r3
		if (dev != NULL) {
   1f32c:	2d00      	cmp	r5, #0
   1f32e:	d0f2      	beq.n	1f316 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
   1f330:	2800      	cmp	r0, #0
   1f332:	d0eb      	beq.n	1f30c <z_sys_init_run_level+0x14>
				if (rc < 0) {
   1f334:	2800      	cmp	r0, #0
   1f336:	dbe5      	blt.n	1f304 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
   1f338:	28ff      	cmp	r0, #255	; 0xff
   1f33a:	dde5      	ble.n	1f308 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
   1f33c:	20ff      	movs	r0, #255	; 0xff
   1f33e:	e7e3      	b.n	1f308 <z_sys_init_run_level+0x10>
		}
	}
}
   1f340:	bd70      	pop	{r4, r5, r6, pc}
   1f342:	bf00      	nop
   1f344:	0002d040 	.word	0x0002d040

0001f348 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   1f348:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   1f34a:	4605      	mov	r5, r0
   1f34c:	b328      	cbz	r0, 1f39a <z_impl_device_get_binding+0x52>
   1f34e:	7803      	ldrb	r3, [r0, #0]
   1f350:	b32b      	cbz	r3, 1f39e <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
   1f352:	4c14      	ldr	r4, [pc, #80]	; (1f3a4 <z_impl_device_get_binding+0x5c>)
   1f354:	e000      	b.n	1f358 <z_impl_device_get_binding+0x10>
   1f356:	3418      	adds	r4, #24
   1f358:	4b13      	ldr	r3, [pc, #76]	; (1f3a8 <z_impl_device_get_binding+0x60>)
   1f35a:	429c      	cmp	r4, r3
   1f35c:	d008      	beq.n	1f370 <z_impl_device_get_binding+0x28>
		if (z_device_ready(dev) && (dev->name == name)) {
   1f35e:	4620      	mov	r0, r4
   1f360:	f009 fdbb 	bl	28eda <z_device_ready>
   1f364:	2800      	cmp	r0, #0
   1f366:	d0f6      	beq.n	1f356 <z_impl_device_get_binding+0xe>
   1f368:	6823      	ldr	r3, [r4, #0]
   1f36a:	42ab      	cmp	r3, r5
   1f36c:	d1f3      	bne.n	1f356 <z_impl_device_get_binding+0xe>
   1f36e:	e012      	b.n	1f396 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
   1f370:	4c0c      	ldr	r4, [pc, #48]	; (1f3a4 <z_impl_device_get_binding+0x5c>)
   1f372:	e000      	b.n	1f376 <z_impl_device_get_binding+0x2e>
   1f374:	3418      	adds	r4, #24
   1f376:	4b0c      	ldr	r3, [pc, #48]	; (1f3a8 <z_impl_device_get_binding+0x60>)
   1f378:	429c      	cmp	r4, r3
   1f37a:	d00b      	beq.n	1f394 <z_impl_device_get_binding+0x4c>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1f37c:	4620      	mov	r0, r4
   1f37e:	f009 fdac 	bl	28eda <z_device_ready>
   1f382:	2800      	cmp	r0, #0
   1f384:	d0f6      	beq.n	1f374 <z_impl_device_get_binding+0x2c>
   1f386:	6821      	ldr	r1, [r4, #0]
   1f388:	4628      	mov	r0, r5
   1f38a:	f005 fb33 	bl	249f4 <strcmp>
   1f38e:	2800      	cmp	r0, #0
   1f390:	d1f0      	bne.n	1f374 <z_impl_device_get_binding+0x2c>
   1f392:	e000      	b.n	1f396 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
   1f394:	2400      	movs	r4, #0
}
   1f396:	4620      	mov	r0, r4
   1f398:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   1f39a:	4604      	mov	r4, r0
   1f39c:	e7fb      	b.n	1f396 <z_impl_device_get_binding+0x4e>
   1f39e:	2400      	movs	r4, #0
   1f3a0:	e7f9      	b.n	1f396 <z_impl_device_get_binding+0x4e>
   1f3a2:	bf00      	nop
   1f3a4:	2000066c 	.word	0x2000066c
   1f3a8:	200006e4 	.word	0x200006e4

0001f3ac <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1f3ac:	4b01      	ldr	r3, [pc, #4]	; (1f3b4 <z_impl_z_errno+0x8>)
   1f3ae:	6898      	ldr	r0, [r3, #8]
}
   1f3b0:	3098      	adds	r0, #152	; 0x98
   1f3b2:	4770      	bx	lr
   1f3b4:	20003938 	.word	0x20003938

0001f3b8 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
   1f3b8:	2804      	cmp	r0, #4
   1f3ba:	d80c      	bhi.n	1f3d6 <reason_to_str+0x1e>
   1f3bc:	e8df f000 	tbb	[pc, r0]
   1f3c0:	07050d03 	.word	0x07050d03
   1f3c4:	09          	.byte	0x09
   1f3c5:	00          	.byte	0x00
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
   1f3c6:	4806      	ldr	r0, [pc, #24]	; (1f3e0 <reason_to_str+0x28>)
   1f3c8:	4770      	bx	lr
		return "Stack overflow";
   1f3ca:	4806      	ldr	r0, [pc, #24]	; (1f3e4 <reason_to_str+0x2c>)
   1f3cc:	4770      	bx	lr
		return "Kernel oops";
   1f3ce:	4806      	ldr	r0, [pc, #24]	; (1f3e8 <reason_to_str+0x30>)
   1f3d0:	4770      	bx	lr
		return "Kernel panic";
   1f3d2:	4806      	ldr	r0, [pc, #24]	; (1f3ec <reason_to_str+0x34>)
   1f3d4:	4770      	bx	lr
	default:
		return "Unknown error";
   1f3d6:	4806      	ldr	r0, [pc, #24]	; (1f3f0 <reason_to_str+0x38>)
   1f3d8:	4770      	bx	lr
		return "Unhandled interrupt";
   1f3da:	4806      	ldr	r0, [pc, #24]	; (1f3f4 <reason_to_str+0x3c>)
	}
}
   1f3dc:	4770      	bx	lr
   1f3de:	bf00      	nop
   1f3e0:	0002d0a8 	.word	0x0002d0a8
   1f3e4:	0002d07c 	.word	0x0002d07c
   1f3e8:	0002d08c 	.word	0x0002d08c
   1f3ec:	0002d098 	.word	0x0002d098
   1f3f0:	0002d058 	.word	0x0002d058
   1f3f4:	0002d068 	.word	0x0002d068

0001f3f8 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1f3f8:	b130      	cbz	r0, 1f408 <thread_name_get+0x10>
{
   1f3fa:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1f3fc:	f009 fe50 	bl	290a0 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1f400:	b120      	cbz	r0, 1f40c <thread_name_get+0x14>
   1f402:	7803      	ldrb	r3, [r0, #0]
   1f404:	b123      	cbz	r3, 1f410 <thread_name_get+0x18>
}
   1f406:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
   1f408:	4802      	ldr	r0, [pc, #8]	; (1f414 <thread_name_get+0x1c>)
}
   1f40a:	4770      	bx	lr
		thread_name = "unknown";
   1f40c:	4801      	ldr	r0, [pc, #4]	; (1f414 <thread_name_get+0x1c>)
   1f40e:	e7fa      	b.n	1f406 <thread_name_get+0xe>
   1f410:	4800      	ldr	r0, [pc, #0]	; (1f414 <thread_name_get+0x1c>)
	return thread_name;
   1f412:	e7f8      	b.n	1f406 <thread_name_get+0xe>
   1f414:	0002b370 	.word	0x0002b370

0001f418 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1f418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f41c:	b082      	sub	sp, #8
   1f41e:	4605      	mov	r5, r0
   1f420:	460e      	mov	r6, r1
	__asm__ volatile(
   1f422:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f426:	f3ef 8711 	mrs	r7, BASEPRI
   1f42a:	f383 8811 	msr	BASEPRI, r3
   1f42e:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1f432:	f001 fa85 	bl	20940 <z_impl_k_current_get>
   1f436:	4604      	mov	r4, r0
   1f438:	4b29      	ldr	r3, [pc, #164]	; (1f4e0 <z_fatal_error+0xc8>)
   1f43a:	4a2a      	ldr	r2, [pc, #168]	; (1f4e4 <z_fatal_error+0xcc>)
   1f43c:	1a9b      	subs	r3, r3, r2
   1f43e:	08db      	lsrs	r3, r3, #3
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1f440:	f04f 0800 	mov.w	r8, #0
   1f444:	2201      	movs	r2, #1
   1f446:	f362 0802 	bfi	r8, r2, #0, #3
   1f44a:	f36f 08c5 	bfc	r8, #3, #3
   1f44e:	f363 188f 	bfi	r8, r3, #6, #10
   1f452:	4628      	mov	r0, r5
   1f454:	f7ff ffb0 	bl	1f3b8 <reason_to_str>
   1f458:	4602      	mov	r2, r0
   1f45a:	f8ad 8000 	strh.w	r8, [sp]
   1f45e:	2300      	movs	r3, #0
   1f460:	4629      	mov	r1, r5
   1f462:	4821      	ldr	r0, [pc, #132]	; (1f4e8 <z_fatal_error+0xd0>)
   1f464:	f7f1 fe16 	bl	11094 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1f468:	b11e      	cbz	r6, 1f472 <z_fatal_error+0x5a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1f46a:	69f3      	ldr	r3, [r6, #28]
   1f46c:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1f470:	bb2b      	cbnz	r3, 1f4be <z_fatal_error+0xa6>
   1f472:	4b1b      	ldr	r3, [pc, #108]	; (1f4e0 <z_fatal_error+0xc8>)
   1f474:	4a1b      	ldr	r2, [pc, #108]	; (1f4e4 <z_fatal_error+0xcc>)
   1f476:	1a9b      	subs	r3, r3, r2
   1f478:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1f47a:	f04f 0800 	mov.w	r8, #0
   1f47e:	2201      	movs	r2, #1
   1f480:	f362 0802 	bfi	r8, r2, #0, #3
   1f484:	f36f 08c5 	bfc	r8, #3, #3
   1f488:	f363 188f 	bfi	r8, r3, #6, #10
   1f48c:	4620      	mov	r0, r4
   1f48e:	f7ff ffb3 	bl	1f3f8 <thread_name_get>
   1f492:	f7f1 fcc3 	bl	10e1c <z_log_strdup>
   1f496:	4602      	mov	r2, r0
   1f498:	4643      	mov	r3, r8
   1f49a:	4621      	mov	r1, r4
   1f49c:	4813      	ldr	r0, [pc, #76]	; (1f4ec <z_fatal_error+0xd4>)
   1f49e:	f7f1 fe6d 	bl	1117c <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1f4a2:	4631      	mov	r1, r6
   1f4a4:	4628      	mov	r0, r5
   1f4a6:	f7fe ffaf 	bl	1e408 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1f4aa:	f387 8811 	msr	BASEPRI, r7
   1f4ae:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1f4b2:	4620      	mov	r0, r4
   1f4b4:	f7f4 fd8e 	bl	13fd4 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1f4b8:	b002      	add	sp, #8
   1f4ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f4be:	4b08      	ldr	r3, [pc, #32]	; (1f4e0 <z_fatal_error+0xc8>)
   1f4c0:	4a08      	ldr	r2, [pc, #32]	; (1f4e4 <z_fatal_error+0xcc>)
   1f4c2:	1a9b      	subs	r3, r3, r2
   1f4c4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
   1f4c6:	f04f 0100 	mov.w	r1, #0
   1f4ca:	2201      	movs	r2, #1
   1f4cc:	f362 0102 	bfi	r1, r2, #0, #3
   1f4d0:	f36f 01c5 	bfc	r1, #3, #3
   1f4d4:	f363 118f 	bfi	r1, r3, #6, #10
   1f4d8:	4805      	ldr	r0, [pc, #20]	; (1f4f0 <z_fatal_error+0xd8>)
   1f4da:	f7f1 fecf 	bl	1127c <log_0>
   1f4de:	e7c8      	b.n	1f472 <z_fatal_error+0x5a>
   1f4e0:	00029fa4 	.word	0x00029fa4
   1f4e4:	00029ecc 	.word	0x00029ecc
   1f4e8:	0002d0b8 	.word	0x0002d0b8
   1f4ec:	0002d104 	.word	0x0002d104
   1f4f0:	0002d0e0 	.word	0x0002d0e0

0001f4f4 <init_idle_thread>:

/* LCOV_EXCL_STOP */

#if defined(CONFIG_MULTITHREADING)
static void init_idle_thread(int i)
{
   1f4f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f4f6:	b089      	sub	sp, #36	; 0x24
   1f4f8:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
   1f4fa:	4b15      	ldr	r3, [pc, #84]	; (1f550 <init_idle_thread+0x5c>)
   1f4fc:	25b8      	movs	r5, #184	; 0xb8
   1f4fe:	fb05 3500 	mla	r5, r5, r0, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
   1f502:	4b14      	ldr	r3, [pc, #80]	; (1f554 <init_idle_thread+0x60>)
   1f504:	f44f 76b0 	mov.w	r6, #352	; 0x160
   1f508:	fb06 3600 	mla	r6, r6, r0, r3

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
   1f50c:	af06      	add	r7, sp, #24
   1f50e:	4603      	mov	r3, r0
   1f510:	4a11      	ldr	r2, [pc, #68]	; (1f558 <init_idle_thread+0x64>)
   1f512:	2108      	movs	r1, #8
   1f514:	4638      	mov	r0, r7
   1f516:	f002 f847 	bl	215a8 <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1f51a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1f51e:	480f      	ldr	r0, [pc, #60]	; (1f55c <init_idle_thread+0x68>)
   1f520:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	z_setup_new_thread(thread, stack,
   1f524:	9705      	str	r7, [sp, #20]
   1f526:	2301      	movs	r3, #1
   1f528:	9304      	str	r3, [sp, #16]
   1f52a:	230f      	movs	r3, #15
   1f52c:	9303      	str	r3, [sp, #12]
   1f52e:	2300      	movs	r3, #0
   1f530:	9302      	str	r3, [sp, #8]
   1f532:	9301      	str	r3, [sp, #4]
   1f534:	9400      	str	r4, [sp, #0]
   1f536:	4b0a      	ldr	r3, [pc, #40]	; (1f560 <init_idle_thread+0x6c>)
   1f538:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1f53c:	4631      	mov	r1, r6
   1f53e:	4628      	mov	r0, r5
   1f540:	f000 f970 	bl	1f824 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1f544:	7b6b      	ldrb	r3, [r5, #13]
   1f546:	f023 0304 	bic.w	r3, r3, #4
   1f54a:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   1f54c:	b009      	add	sp, #36	; 0x24
   1f54e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f550:	20002198 	.word	0x20002198
   1f554:	200060c0 	.word	0x200060c0
   1f558:	0002d11c 	.word	0x0002d11c
   1f55c:	20003938 	.word	0x20003938
   1f560:	00029113 	.word	0x00029113

0001f564 <prepare_multithreading>:
 * be all the initialization many of them require.
 *
 * @return initial stack pointer for the main thread
 */
static char *prepare_multithreading(void)
{
   1f564:	b570      	push	{r4, r5, r6, lr}
   1f566:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
   1f568:	f001 f91a 	bl	207a0 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
   1f56c:	4d1e      	ldr	r5, [pc, #120]	; (1f5e8 <prepare_multithreading+0x84>)
   1f56e:	4b1f      	ldr	r3, [pc, #124]	; (1f5ec <prepare_multithreading+0x88>)
   1f570:	625d      	str	r5, [r3, #36]	; 0x24
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1f572:	4b1f      	ldr	r3, [pc, #124]	; (1f5f0 <prepare_multithreading+0x8c>)
   1f574:	9305      	str	r3, [sp, #20]
   1f576:	2301      	movs	r3, #1
   1f578:	9304      	str	r3, [sp, #16]
   1f57a:	2400      	movs	r4, #0
   1f57c:	9403      	str	r4, [sp, #12]
   1f57e:	9402      	str	r4, [sp, #8]
   1f580:	9401      	str	r4, [sp, #4]
   1f582:	9400      	str	r4, [sp, #0]
   1f584:	4b1b      	ldr	r3, [pc, #108]	; (1f5f4 <prepare_multithreading+0x90>)
   1f586:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1f58a:	491b      	ldr	r1, [pc, #108]	; (1f5f8 <prepare_multithreading+0x94>)
   1f58c:	4628      	mov	r0, r5
   1f58e:	f000 f949 	bl	1f824 <z_setup_new_thread>
   1f592:	4606      	mov	r6, r0
   1f594:	7b6b      	ldrb	r3, [r5, #13]
   1f596:	f023 0304 	bic.w	r3, r3, #4
   1f59a:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
   1f59c:	4628      	mov	r0, r5
   1f59e:	f00a f8cc 	bl	2973a <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   1f5a2:	2c00      	cmp	r4, #0
   1f5a4:	dd07      	ble.n	1f5b6 <prepare_multithreading+0x52>
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1f5a6:	4b11      	ldr	r3, [pc, #68]	; (1f5ec <prepare_multithreading+0x88>)
   1f5a8:	f103 0218 	add.w	r2, r3, #24
   1f5ac:	619a      	str	r2, [r3, #24]
	list->tail = (sys_dnode_t *)list;
   1f5ae:	61da      	str	r2, [r3, #28]
	}

	initialize_timeouts();

	return stack_ptr;
}
   1f5b0:	4630      	mov	r0, r6
   1f5b2:	b006      	add	sp, #24
   1f5b4:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
   1f5b6:	4620      	mov	r0, r4
   1f5b8:	f7ff ff9c 	bl	1f4f4 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1f5bc:	4b0f      	ldr	r3, [pc, #60]	; (1f5fc <prepare_multithreading+0x98>)
   1f5be:	22b8      	movs	r2, #184	; 0xb8
   1f5c0:	fb02 3204 	mla	r2, r2, r4, r3
   1f5c4:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   1f5c8:	4b08      	ldr	r3, [pc, #32]	; (1f5ec <prepare_multithreading+0x88>)
   1f5ca:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   1f5ce:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
   1f5d0:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
   1f5d2:	eb04 1184 	add.w	r1, r4, r4, lsl #6
   1f5d6:	4a0a      	ldr	r2, [pc, #40]	; (1f600 <prepare_multithreading+0x9c>)
   1f5d8:	eb02 1241 	add.w	r2, r2, r1, lsl #5
   1f5dc:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
   1f5e0:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   1f5e2:	3401      	adds	r4, #1
   1f5e4:	e7dd      	b.n	1f5a2 <prepare_multithreading+0x3e>
   1f5e6:	bf00      	nop
   1f5e8:	20002250 	.word	0x20002250
   1f5ec:	20003938 	.word	0x20003938
   1f5f0:	0002d128 	.word	0x0002d128
   1f5f4:	0001f631 	.word	0x0001f631
   1f5f8:	20005ca0 	.word	0x20005ca0
   1f5fc:	20002198 	.word	0x20002198
   1f600:	20006220 	.word	0x20006220

0001f604 <switch_to_main_thread>:

static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   1f604:	b508      	push	{r3, lr}
   1f606:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1f608:	4a01      	ldr	r2, [pc, #4]	; (1f610 <switch_to_main_thread+0xc>)
   1f60a:	4802      	ldr	r0, [pc, #8]	; (1f614 <switch_to_main_thread+0x10>)
   1f60c:	f7f4 f806 	bl	1361c <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1f610:	0001f631 	.word	0x0001f631
   1f614:	20002250 	.word	0x20002250

0001f618 <z_bss_zero>:
{
   1f618:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1f61a:	4803      	ldr	r0, [pc, #12]	; (1f628 <z_bss_zero+0x10>)
   1f61c:	4a03      	ldr	r2, [pc, #12]	; (1f62c <z_bss_zero+0x14>)
   1f61e:	1a12      	subs	r2, r2, r0
   1f620:	2100      	movs	r1, #0
   1f622:	f005 fa47 	bl	24ab4 <memset>
}
   1f626:	bd08      	pop	{r3, pc}
   1f628:	200008f8 	.word	0x200008f8
   1f62c:	20003994 	.word	0x20003994

0001f630 <bg_thread_main>:
{
   1f630:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   1f632:	4b0a      	ldr	r3, [pc, #40]	; (1f65c <bg_thread_main+0x2c>)
   1f634:	2201      	movs	r2, #1
   1f636:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1f638:	2002      	movs	r0, #2
   1f63a:	f7ff fe5d 	bl	1f2f8 <z_sys_init_run_level>
	boot_banner();
   1f63e:	f001 fed7 	bl	213f0 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1f642:	2003      	movs	r0, #3
   1f644:	f7ff fe58 	bl	1f2f8 <z_sys_init_run_level>
	z_init_static_threads();
   1f648:	f000 f950 	bl	1f8ec <z_init_static_threads>
	main();
   1f64c:	f7f0 fc50 	bl	fef0 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1f650:	4a03      	ldr	r2, [pc, #12]	; (1f660 <bg_thread_main+0x30>)
   1f652:	7b13      	ldrb	r3, [r2, #12]
   1f654:	f023 0301 	bic.w	r3, r3, #1
   1f658:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1f65a:	bd08      	pop	{r3, pc}
   1f65c:	20003991 	.word	0x20003991
   1f660:	20002250 	.word	0x20002250

0001f664 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1f664:	b500      	push	{lr}
   1f666:	b0af      	sub	sp, #188	; 0xbc
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1f668:	f7f1 faee 	bl	10c48 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1f66c:	4b1b      	ldr	r3, [pc, #108]	; (1f6dc <z_cstart+0x78>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1f66e:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1f672:	4c1b      	ldr	r4, [pc, #108]	; (1f6e0 <z_cstart+0x7c>)
   1f674:	6963      	ldr	r3, [r4, #20]
   1f676:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1f67a:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1f67c:	23e0      	movs	r3, #224	; 0xe0
   1f67e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   1f682:	2320      	movs	r3, #32
   1f684:	77e3      	strb	r3, [r4, #31]
   1f686:	2500      	movs	r5, #0
   1f688:	7625      	strb	r5, [r4, #24]
   1f68a:	7665      	strb	r5, [r4, #25]
   1f68c:	76a5      	strb	r5, [r4, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1f68e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f690:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1f694:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1f696:	f7f4 fc33 	bl	13f00 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1f69a:	f7f3 ffd5 	bl	13648 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1f69e:	f04f 33ff 	mov.w	r3, #4294967295
   1f6a2:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1f6a4:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1f6a6:	f7f4 fd71 	bl	1418c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1f6aa:	f7f4 fca9 	bl	14000 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   1f6ae:	2401      	movs	r4, #1
   1f6b0:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   1f6b4:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   1f6b8:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->stack_info.size = 0U;
   1f6ba:	9528      	str	r5, [sp, #160]	; 0xa0
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1f6bc:	4b09      	ldr	r3, [pc, #36]	; (1f6e4 <z_cstart+0x80>)
   1f6be:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1f6c2:	f7ff fe0d 	bl	1f2e0 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1f6c6:	4628      	mov	r0, r5
   1f6c8:	f7ff fe16 	bl	1f2f8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1f6cc:	4620      	mov	r0, r4
   1f6ce:	f7ff fe13 	bl	1f2f8 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   1f6d2:	f7ff ff47 	bl	1f564 <prepare_multithreading>
   1f6d6:	f7ff ff95 	bl	1f604 <switch_to_main_thread>
   1f6da:	bf00      	nop
   1f6dc:	20006a40 	.word	0x20006a40
   1f6e0:	e000ed00 	.word	0xe000ed00
   1f6e4:	20003938 	.word	0x20003938

0001f6e8 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1f6e8:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1f6ea:	4c06      	ldr	r4, [pc, #24]	; (1f704 <statics_init+0x1c>)
   1f6ec:	4b06      	ldr	r3, [pc, #24]	; (1f708 <statics_init+0x20>)
   1f6ee:	429c      	cmp	r4, r3
   1f6f0:	d206      	bcs.n	1f700 <statics_init+0x18>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1f6f2:	68a2      	ldr	r2, [r4, #8]
   1f6f4:	6861      	ldr	r1, [r4, #4]
   1f6f6:	4620      	mov	r0, r4
   1f6f8:	f009 fbf9 	bl	28eee <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1f6fc:	3414      	adds	r4, #20
   1f6fe:	e7f5      	b.n	1f6ec <statics_init+0x4>
	}
	return 0;
}
   1f700:	2000      	movs	r0, #0
   1f702:	bd10      	pop	{r4, pc}
   1f704:	20000738 	.word	0x20000738
   1f708:	20000738 	.word	0x20000738

0001f70c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1f70c:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1f70e:	4c06      	ldr	r4, [pc, #24]	; (1f728 <init_mem_slab_module+0x1c>)
	int rc = 0;
   1f710:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1f712:	4b06      	ldr	r3, [pc, #24]	; (1f72c <init_mem_slab_module+0x20>)
   1f714:	429c      	cmp	r4, r3
   1f716:	d206      	bcs.n	1f726 <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
   1f718:	4620      	mov	r0, r4
   1f71a:	f009 fc58 	bl	28fce <create_free_list>
		if (rc < 0) {
   1f71e:	2800      	cmp	r0, #0
   1f720:	db01      	blt.n	1f726 <init_mem_slab_module+0x1a>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1f722:	341c      	adds	r4, #28
   1f724:	e7f5      	b.n	1f712 <init_mem_slab_module+0x6>
		z_object_init(slab);
	}

out:
	return rc;
}
   1f726:	bd10      	pop	{r4, pc}
   1f728:	200006e4 	.word	0x200006e4
   1f72c:	20000738 	.word	0x20000738

0001f730 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1f730:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f732:	b083      	sub	sp, #12
   1f734:	460c      	mov	r4, r1
   1f736:	461f      	mov	r7, r3
	__asm__ volatile(
   1f738:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f73c:	f3ef 8111 	mrs	r1, BASEPRI
   1f740:	f383 8811 	msr	BASEPRI, r3
   1f744:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1f748:	6943      	ldr	r3, [r0, #20]
   1f74a:	b16b      	cbz	r3, 1f768 <k_mem_slab_alloc+0x38>
		/* take a free block */
		*mem = slab->free_list;
   1f74c:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1f74e:	6943      	ldr	r3, [r0, #20]
   1f750:	681b      	ldr	r3, [r3, #0]
   1f752:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1f754:	6983      	ldr	r3, [r0, #24]
   1f756:	3301      	adds	r3, #1
   1f758:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1f75a:	2000      	movs	r0, #0
	__asm__ volatile(
   1f75c:	f381 8811 	msr	BASEPRI, r1
   1f760:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   1f764:	b003      	add	sp, #12
   1f766:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f768:	4616      	mov	r6, r2
   1f76a:	f100 0508 	add.w	r5, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1f76e:	ea56 0307 	orrs.w	r3, r6, r7
   1f772:	d104      	bne.n	1f77e <k_mem_slab_alloc+0x4e>
		*mem = NULL;
   1f774:	2300      	movs	r3, #0
   1f776:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1f778:	f06f 000b 	mvn.w	r0, #11
   1f77c:	e7ee      	b.n	1f75c <k_mem_slab_alloc+0x2c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1f77e:	e9cd 6700 	strd	r6, r7, [sp]
   1f782:	4602      	mov	r2, r0
   1f784:	4628      	mov	r0, r5
   1f786:	f000 fdf3 	bl	20370 <z_pend_curr>
		if (result == 0) {
   1f78a:	2800      	cmp	r0, #0
   1f78c:	d1ea      	bne.n	1f764 <k_mem_slab_alloc+0x34>
			*mem = _current->base.swap_data;
   1f78e:	4b02      	ldr	r3, [pc, #8]	; (1f798 <k_mem_slab_alloc+0x68>)
   1f790:	689b      	ldr	r3, [r3, #8]
   1f792:	695b      	ldr	r3, [r3, #20]
   1f794:	6023      	str	r3, [r4, #0]
		return result;
   1f796:	e7e5      	b.n	1f764 <k_mem_slab_alloc+0x34>
   1f798:	20003938 	.word	0x20003938

0001f79c <z_thread_monitor_exit>:
	__asm__ volatile(
   1f79c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f7a0:	f3ef 8111 	mrs	r1, BASEPRI
   1f7a4:	f383 8811 	msr	BASEPRI, r3
   1f7a8:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
   1f7ac:	4b0a      	ldr	r3, [pc, #40]	; (1f7d8 <z_thread_monitor_exit+0x3c>)
   1f7ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1f7b0:	4283      	cmp	r3, r0
   1f7b2:	d104      	bne.n	1f7be <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
   1f7b4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   1f7b6:	4b08      	ldr	r3, [pc, #32]	; (1f7d8 <z_thread_monitor_exit+0x3c>)
   1f7b8:	631a      	str	r2, [r3, #48]	; 0x30
   1f7ba:	e007      	b.n	1f7cc <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
   1f7bc:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   1f7be:	b113      	cbz	r3, 1f7c6 <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
   1f7c0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
   1f7c2:	4282      	cmp	r2, r0
   1f7c4:	d1fa      	bne.n	1f7bc <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
   1f7c6:	b10b      	cbz	r3, 1f7cc <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
   1f7c8:	6f42      	ldr	r2, [r0, #116]	; 0x74
   1f7ca:	675a      	str	r2, [r3, #116]	; 0x74
	__asm__ volatile(
   1f7cc:	f381 8811 	msr	BASEPRI, r1
   1f7d0:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
   1f7d4:	4770      	bx	lr
   1f7d6:	bf00      	nop
   1f7d8:	20003938 	.word	0x20003938

0001f7dc <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   1f7dc:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   1f7de:	4604      	mov	r4, r0
   1f7e0:	b140      	cbz	r0, 1f7f4 <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
   1f7e2:	2220      	movs	r2, #32
   1f7e4:	f104 0078 	add.w	r0, r4, #120	; 0x78
   1f7e8:	f005 f8d8 	bl	2499c <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   1f7ec:	2000      	movs	r0, #0
   1f7ee:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   1f7f2:	bd10      	pop	{r4, pc}
		thread = _current;
   1f7f4:	4b01      	ldr	r3, [pc, #4]	; (1f7fc <z_impl_k_thread_name_set+0x20>)
   1f7f6:	689c      	ldr	r4, [r3, #8]
   1f7f8:	e7f3      	b.n	1f7e2 <z_impl_k_thread_name_set+0x6>
   1f7fa:	bf00      	nop
   1f7fc:	20003938 	.word	0x20003938

0001f800 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   1f800:	b538      	push	{r3, r4, r5, lr}
   1f802:	4614      	mov	r4, r2
   1f804:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1f806:	ea54 0305 	orrs.w	r3, r4, r5
   1f80a:	d102      	bne.n	1f812 <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
   1f80c:	f009 fc4a 	bl	290a4 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   1f810:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1f812:	462b      	mov	r3, r5
   1f814:	4902      	ldr	r1, [pc, #8]	; (1f820 <schedule_new_thread+0x20>)
   1f816:	3018      	adds	r0, #24
   1f818:	f001 f944 	bl	20aa4 <z_add_timeout>
   1f81c:	e7f8      	b.n	1f810 <schedule_new_thread+0x10>
   1f81e:	bf00      	nop
   1f820:	00029773 	.word	0x00029773

0001f824 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1f824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f828:	b085      	sub	sp, #20
   1f82a:	4604      	mov	r4, r0
   1f82c:	460f      	mov	r7, r1
   1f82e:	4615      	mov	r5, r2
   1f830:	461e      	mov	r6, r3
   1f832:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   1f836:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   1f83a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   1f83e:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1f842:	f100 0358 	add.w	r3, r0, #88	; 0x58
	list->head = (sys_dnode_t *)list;
   1f846:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
   1f848:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   1f84a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1f84c:	2204      	movs	r2, #4
   1f84e:	9911      	ldr	r1, [sp, #68]	; 0x44
   1f850:	f009 fc2c 	bl	290ac <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   1f854:	462a      	mov	r2, r5
   1f856:	4639      	mov	r1, r7
   1f858:	4620      	mov	r0, r4
   1f85a:	f009 fc09 	bl	29070 <setup_thread_stack>
   1f85e:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1f860:	f8cd 8008 	str.w	r8, [sp, #8]
   1f864:	f8cd 9004 	str.w	r9, [sp, #4]
   1f868:	f8cd a000 	str.w	sl, [sp]
   1f86c:	4633      	mov	r3, r6
   1f86e:	4602      	mov	r2, r0
   1f870:	4639      	mov	r1, r7
   1f872:	4620      	mov	r0, r4
   1f874:	f7f3 fe82 	bl	1357c <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
   1f878:	2300      	movs	r3, #0
   1f87a:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
   1f87c:	6666      	str	r6, [r4, #100]	; 0x64
	new_thread->entry.parameter1 = p1;
   1f87e:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter2 = p2;
   1f882:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
   1f886:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	__asm__ volatile(
   1f88a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f88e:	f3ef 8211 	mrs	r2, BASEPRI
   1f892:	f383 8811 	msr	BASEPRI, r3
   1f896:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
   1f89a:	4b13      	ldr	r3, [pc, #76]	; (1f8e8 <z_setup_new_thread+0xc4>)
   1f89c:	6b19      	ldr	r1, [r3, #48]	; 0x30
   1f89e:	6761      	str	r1, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
   1f8a0:	631c      	str	r4, [r3, #48]	; 0x30
	__asm__ volatile(
   1f8a2:	f382 8811 	msr	BASEPRI, r2
   1f8a6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
   1f8aa:	f1bb 0f00 	cmp.w	fp, #0
   1f8ae:	d013      	beq.n	1f8d8 <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
   1f8b0:	221f      	movs	r2, #31
   1f8b2:	4659      	mov	r1, fp
   1f8b4:	f104 0078 	add.w	r0, r4, #120	; 0x78
   1f8b8:	f005 f870 	bl	2499c <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   1f8bc:	2300      	movs	r3, #0
   1f8be:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   1f8c2:	4b09      	ldr	r3, [pc, #36]	; (1f8e8 <z_setup_new_thread+0xc4>)
   1f8c4:	689b      	ldr	r3, [r3, #8]
   1f8c6:	b15b      	cbz	r3, 1f8e0 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   1f8c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   1f8cc:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
#ifdef CONFIG_THREAD_RUNTIME_STATS
	memset(&new_thread->rt_stats, 0, sizeof(new_thread->rt_stats));
#endif

	return stack_ptr;
}
   1f8d0:	4628      	mov	r0, r5
   1f8d2:	b005      	add	sp, #20
   1f8d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
   1f8d8:	2300      	movs	r3, #0
   1f8da:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   1f8de:	e7f0      	b.n	1f8c2 <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
   1f8e0:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		return stack_ptr;
   1f8e4:	e7f4      	b.n	1f8d0 <z_setup_new_thread+0xac>
   1f8e6:	bf00      	nop
   1f8e8:	20003938 	.word	0x20003938

0001f8ec <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   1f8ec:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   1f8f0:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   1f8f2:	4c23      	ldr	r4, [pc, #140]	; (1f980 <z_init_static_threads+0x94>)
   1f8f4:	4b23      	ldr	r3, [pc, #140]	; (1f984 <z_init_static_threads+0x98>)
   1f8f6:	429c      	cmp	r4, r3
   1f8f8:	d215      	bcs.n	1f926 <z_init_static_threads+0x3a>
		z_setup_new_thread(
   1f8fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1f8fc:	9305      	str	r3, [sp, #20]
   1f8fe:	6a23      	ldr	r3, [r4, #32]
   1f900:	9304      	str	r3, [sp, #16]
   1f902:	69e3      	ldr	r3, [r4, #28]
   1f904:	9303      	str	r3, [sp, #12]
   1f906:	69a3      	ldr	r3, [r4, #24]
   1f908:	9302      	str	r3, [sp, #8]
   1f90a:	6963      	ldr	r3, [r4, #20]
   1f90c:	9301      	str	r3, [sp, #4]
   1f90e:	6923      	ldr	r3, [r4, #16]
   1f910:	9300      	str	r3, [sp, #0]
   1f912:	68e3      	ldr	r3, [r4, #12]
   1f914:	68a2      	ldr	r2, [r4, #8]
   1f916:	6861      	ldr	r1, [r4, #4]
   1f918:	6820      	ldr	r0, [r4, #0]
   1f91a:	f7ff ff83 	bl	1f824 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
   1f91e:	6823      	ldr	r3, [r4, #0]
   1f920:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   1f922:	3430      	adds	r4, #48	; 0x30
   1f924:	e7e6      	b.n	1f8f4 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   1f926:	f000 fcc9 	bl	202bc <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1f92a:	4c15      	ldr	r4, [pc, #84]	; (1f980 <z_init_static_threads+0x94>)
   1f92c:	e01b      	b.n	1f966 <z_init_static_threads+0x7a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
   1f92e:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
   1f930:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1f934:	ea4f 79e3 	mov.w	r9, r3, asr #31
		} else {
			return (t * to_hz + off) / from_hz;
   1f938:	ea4f 31c9 	mov.w	r1, r9, lsl #15
   1f93c:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   1f940:	03d8      	lsls	r0, r3, #15
   1f942:	f240 35e7 	movw	r5, #999	; 0x3e7
   1f946:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1f94a:	2300      	movs	r3, #0
   1f94c:	1940      	adds	r0, r0, r5
   1f94e:	f04f 0500 	mov.w	r5, #0
   1f952:	eb45 0101 	adc.w	r1, r5, r1
   1f956:	f7e0 fbc1 	bl	dc <__aeabi_uldivmod>
   1f95a:	4602      	mov	r2, r0
   1f95c:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   1f95e:	4630      	mov	r0, r6
   1f960:	f7ff ff4e 	bl	1f800 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
   1f964:	3430      	adds	r4, #48	; 0x30
   1f966:	4b07      	ldr	r3, [pc, #28]	; (1f984 <z_init_static_threads+0x98>)
   1f968:	429c      	cmp	r4, r3
   1f96a:	d204      	bcs.n	1f976 <z_init_static_threads+0x8a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1f96c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f96e:	f1b3 3fff 	cmp.w	r3, #4294967295
   1f972:	d0f7      	beq.n	1f964 <z_init_static_threads+0x78>
   1f974:	e7db      	b.n	1f92e <z_init_static_threads+0x42>
		}
	}
	k_sched_unlock();
   1f976:	f000 fd51 	bl	2041c <k_sched_unlock>
}
   1f97a:	b006      	add	sp, #24
   1f97c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   1f980:	200006e4 	.word	0x200006e4
   1f984:	200006e4 	.word	0x200006e4

0001f988 <pm_save_idle>:
 *
 * Sets the kernel data structure idle field to either a positive value or
 * K_FOREVER.
 */
static void pm_save_idle(void)
{
   1f988:	b508      	push	{r3, lr}
#ifdef CONFIG_PM
	int32_t ticks = z_get_next_timeout_expiry();
   1f98a:	f009 fff5 	bl	29978 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
   1f98e:	4b04      	ldr	r3, [pc, #16]	; (1f9a0 <pm_save_idle+0x18>)
   1f990:	6218      	str	r0, [r3, #32]
	 * before exiting. This is because the kernel does not do its own idle
	 * processing in those cases i.e. skips k_cpu_idle(). The kernel's
	 * idle processing re-enables interrupts which is essential for
	 * the kernel's scheduling logic.
	 */
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   1f992:	f7f2 fd47 	bl	12424 <pm_system_suspend>
   1f996:	b100      	cbz	r0, 1f99a <pm_save_idle+0x12>
		k_cpu_idle();
	}
#endif
}
   1f998:	bd08      	pop	{r3, pc}
	arch_cpu_idle();
   1f99a:	f7f3 fe5b 	bl	13654 <arch_cpu_idle>
   1f99e:	e7fb      	b.n	1f998 <pm_save_idle+0x10>
   1f9a0:	20003938 	.word	0x20003938

0001f9a4 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   1f9a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f9a8:	b082      	sub	sp, #8
   1f9aa:	4604      	mov	r4, r0
   1f9ac:	460d      	mov	r5, r1
   1f9ae:	4610      	mov	r0, r2
   1f9b0:	4619      	mov	r1, r3

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   1f9b2:	f104 0708 	add.w	r7, r4, #8
	__asm__ volatile(
   1f9b6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f9ba:	f3ef 8611 	mrs	r6, BASEPRI
   1f9be:	f383 8811 	msr	BASEPRI, r3
   1f9c2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
   1f9c6:	6a22      	ldr	r2, [r4, #32]
   1f9c8:	68e3      	ldr	r3, [r4, #12]
   1f9ca:	429a      	cmp	r2, r3
   1f9cc:	d30b      	bcc.n	1f9e6 <z_impl_k_msgq_put+0x42>
#ifdef CONFIG_POLL
			handle_poll_events(msgq, K_POLL_STATE_MSGQ_DATA_AVAILABLE);
#endif /* CONFIG_POLL */
		}
		result = 0;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1f9ce:	ea50 0301 	orrs.w	r3, r0, r1
   1f9d2:	d137      	bne.n	1fa44 <z_impl_k_msgq_put+0xa0>
		/* don't wait for message space to become available */
		result = -ENOMSG;
   1f9d4:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
   1f9d8:	f386 8811 	msr	BASEPRI, r6
   1f9dc:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   1f9e0:	b002      	add	sp, #8
   1f9e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1f9e6:	4620      	mov	r0, r4
   1f9e8:	f009 ff1e 	bl	29828 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   1f9ec:	4680      	mov	r8, r0
   1f9ee:	b180      	cbz	r0, 1fa12 <z_impl_k_msgq_put+0x6e>
			(void)memcpy(pending_thread->base.swap_data, data,
   1f9f0:	68a2      	ldr	r2, [r4, #8]
   1f9f2:	4629      	mov	r1, r5
   1f9f4:	6940      	ldr	r0, [r0, #20]
   1f9f6:	f005 f839 	bl	24a6c <memcpy>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1f9fa:	2400      	movs	r4, #0
   1f9fc:	f8c8 40b0 	str.w	r4, [r8, #176]	; 0xb0
			z_ready_thread(pending_thread);
   1fa00:	4640      	mov	r0, r8
   1fa02:	f009 fe9a 	bl	2973a <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   1fa06:	4631      	mov	r1, r6
   1fa08:	4638      	mov	r0, r7
   1fa0a:	f000 fc3b 	bl	20284 <z_reschedule>
			return 0;
   1fa0e:	4620      	mov	r0, r4
   1fa10:	e7e6      	b.n	1f9e0 <z_impl_k_msgq_put+0x3c>
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
   1fa12:	68a2      	ldr	r2, [r4, #8]
   1fa14:	4629      	mov	r1, r5
   1fa16:	69e0      	ldr	r0, [r4, #28]
   1fa18:	f005 f828 	bl	24a6c <memcpy>
			msgq->write_ptr += msgq->msg_size;
   1fa1c:	68a2      	ldr	r2, [r4, #8]
   1fa1e:	69e3      	ldr	r3, [r4, #28]
   1fa20:	4413      	add	r3, r2
   1fa22:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   1fa24:	6962      	ldr	r2, [r4, #20]
   1fa26:	4293      	cmp	r3, r2
   1fa28:	d009      	beq.n	1fa3e <z_impl_k_msgq_put+0x9a>
			msgq->used_msgs++;
   1fa2a:	6a23      	ldr	r3, [r4, #32]
   1fa2c:	3301      	adds	r3, #1
   1fa2e:	6223      	str	r3, [r4, #32]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   1fa30:	2110      	movs	r1, #16
   1fa32:	f104 0024 	add.w	r0, r4, #36	; 0x24
   1fa36:	f00a f8ca 	bl	29bce <z_handle_obj_poll_events>
		result = 0;
   1fa3a:	2000      	movs	r0, #0
   1fa3c:	e7cc      	b.n	1f9d8 <z_impl_k_msgq_put+0x34>
				msgq->write_ptr = msgq->buffer_start;
   1fa3e:	6923      	ldr	r3, [r4, #16]
   1fa40:	61e3      	str	r3, [r4, #28]
   1fa42:	e7f2      	b.n	1fa2a <z_impl_k_msgq_put+0x86>
		_current->base.swap_data = (void *) data;
   1fa44:	4b05      	ldr	r3, [pc, #20]	; (1fa5c <z_impl_k_msgq_put+0xb8>)
   1fa46:	689b      	ldr	r3, [r3, #8]
   1fa48:	615d      	str	r5, [r3, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1fa4a:	e9cd 0100 	strd	r0, r1, [sp]
   1fa4e:	4622      	mov	r2, r4
   1fa50:	4631      	mov	r1, r6
   1fa52:	4638      	mov	r0, r7
   1fa54:	f000 fc8c 	bl	20370 <z_pend_curr>
		return result;
   1fa58:	e7c2      	b.n	1f9e0 <z_impl_k_msgq_put+0x3c>
   1fa5a:	bf00      	nop
   1fa5c:	20003938 	.word	0x20003938

0001fa60 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   1fa60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fa64:	b082      	sub	sp, #8
   1fa66:	4604      	mov	r4, r0
   1fa68:	4608      	mov	r0, r1
   1fa6a:	461f      	mov	r7, r3

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   1fa6c:	f104 0808 	add.w	r8, r4, #8
	__asm__ volatile(
   1fa70:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fa74:	f3ef 8511 	mrs	r5, BASEPRI
   1fa78:	f383 8811 	msr	BASEPRI, r3
   1fa7c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
   1fa80:	6a23      	ldr	r3, [r4, #32]
   1fa82:	b963      	cbnz	r3, 1fa9e <z_impl_k_msgq_get+0x3e>
   1fa84:	4616      	mov	r6, r2
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
		}
		result = 0;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1fa86:	ea56 0307 	orrs.w	r3, r6, r7
   1fa8a:	d13e      	bne.n	1fb0a <z_impl_k_msgq_get+0xaa>
		/* don't wait for a message to become available */
		result = -ENOMSG;
   1fa8c:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
   1fa90:	f385 8811 	msr	BASEPRI, r5
   1fa94:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   1fa98:	b002      	add	sp, #8
   1fa9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
   1fa9e:	68a2      	ldr	r2, [r4, #8]
   1faa0:	69a1      	ldr	r1, [r4, #24]
   1faa2:	f004 ffe3 	bl	24a6c <memcpy>
		msgq->read_ptr += msgq->msg_size;
   1faa6:	68a2      	ldr	r2, [r4, #8]
   1faa8:	69a3      	ldr	r3, [r4, #24]
   1faaa:	4413      	add	r3, r2
   1faac:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   1faae:	6962      	ldr	r2, [r4, #20]
   1fab0:	4293      	cmp	r3, r2
   1fab2:	d009      	beq.n	1fac8 <z_impl_k_msgq_get+0x68>
		msgq->used_msgs--;
   1fab4:	6a23      	ldr	r3, [r4, #32]
   1fab6:	3b01      	subs	r3, #1
   1fab8:	6223      	str	r3, [r4, #32]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1faba:	4620      	mov	r0, r4
   1fabc:	f009 feb4 	bl	29828 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   1fac0:	4606      	mov	r6, r0
   1fac2:	b920      	cbnz	r0, 1face <z_impl_k_msgq_get+0x6e>
		result = 0;
   1fac4:	2000      	movs	r0, #0
   1fac6:	e7e3      	b.n	1fa90 <z_impl_k_msgq_get+0x30>
			msgq->read_ptr = msgq->buffer_start;
   1fac8:	6923      	ldr	r3, [r4, #16]
   1faca:	61a3      	str	r3, [r4, #24]
   1facc:	e7f2      	b.n	1fab4 <z_impl_k_msgq_get+0x54>
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
   1face:	68a2      	ldr	r2, [r4, #8]
   1fad0:	6941      	ldr	r1, [r0, #20]
   1fad2:	69e0      	ldr	r0, [r4, #28]
   1fad4:	f004 ffca 	bl	24a6c <memcpy>
			msgq->write_ptr += msgq->msg_size;
   1fad8:	68a2      	ldr	r2, [r4, #8]
   1fada:	69e3      	ldr	r3, [r4, #28]
   1fadc:	4413      	add	r3, r2
   1fade:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   1fae0:	6962      	ldr	r2, [r4, #20]
   1fae2:	4293      	cmp	r3, r2
   1fae4:	d00e      	beq.n	1fb04 <z_impl_k_msgq_get+0xa4>
			msgq->used_msgs++;
   1fae6:	6a23      	ldr	r3, [r4, #32]
   1fae8:	3301      	adds	r3, #1
   1faea:	6223      	str	r3, [r4, #32]
   1faec:	2400      	movs	r4, #0
   1faee:	f8c6 40b0 	str.w	r4, [r6, #176]	; 0xb0
			z_ready_thread(pending_thread);
   1faf2:	4630      	mov	r0, r6
   1faf4:	f009 fe21 	bl	2973a <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   1faf8:	4629      	mov	r1, r5
   1fafa:	4640      	mov	r0, r8
   1fafc:	f000 fbc2 	bl	20284 <z_reschedule>
			return 0;
   1fb00:	4620      	mov	r0, r4
   1fb02:	e7c9      	b.n	1fa98 <z_impl_k_msgq_get+0x38>
				msgq->write_ptr = msgq->buffer_start;
   1fb04:	6923      	ldr	r3, [r4, #16]
   1fb06:	61e3      	str	r3, [r4, #28]
   1fb08:	e7ed      	b.n	1fae6 <z_impl_k_msgq_get+0x86>
		_current->base.swap_data = data;
   1fb0a:	4b05      	ldr	r3, [pc, #20]	; (1fb20 <z_impl_k_msgq_get+0xc0>)
   1fb0c:	689b      	ldr	r3, [r3, #8]
   1fb0e:	6159      	str	r1, [r3, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1fb10:	e9cd 6700 	strd	r6, r7, [sp]
   1fb14:	4622      	mov	r2, r4
   1fb16:	4629      	mov	r1, r5
   1fb18:	4640      	mov	r0, r8
   1fb1a:	f000 fc29 	bl	20370 <z_pend_curr>
		return result;
   1fb1e:	e7bb      	b.n	1fa98 <z_impl_k_msgq_get+0x38>
   1fb20:	20003938 	.word	0x20003938

0001fb24 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1fb24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1fb28:	b083      	sub	sp, #12
   1fb2a:	4604      	mov	r4, r0
   1fb2c:	461d      	mov	r5, r3
	__asm__ volatile(
   1fb2e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fb32:	f3ef 8711 	mrs	r7, BASEPRI
   1fb36:	f383 8811 	msr	BASEPRI, r3
   1fb3a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1fb3e:	68c1      	ldr	r1, [r0, #12]
   1fb40:	b999      	cbnz	r1, 1fb6a <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   1fb42:	2900      	cmp	r1, #0
   1fb44:	d14f      	bne.n	1fbe6 <z_impl_k_mutex_lock+0xc2>
   1fb46:	4b3a      	ldr	r3, [pc, #232]	; (1fc30 <z_impl_k_mutex_lock+0x10c>)
   1fb48:	689b      	ldr	r3, [r3, #8]
   1fb4a:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1fb4e:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   1fb50:	3101      	adds	r1, #1
   1fb52:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   1fb54:	4b36      	ldr	r3, [pc, #216]	; (1fc30 <z_impl_k_mutex_lock+0x10c>)
   1fb56:	689b      	ldr	r3, [r3, #8]
   1fb58:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   1fb5a:	f387 8811 	msr	BASEPRI, r7
   1fb5e:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   1fb62:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1fb64:	b003      	add	sp, #12
   1fb66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1fb6a:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1fb6c:	6882      	ldr	r2, [r0, #8]
   1fb6e:	4b30      	ldr	r3, [pc, #192]	; (1fc30 <z_impl_k_mutex_lock+0x10c>)
   1fb70:	689b      	ldr	r3, [r3, #8]
   1fb72:	429a      	cmp	r2, r3
   1fb74:	d0e5      	beq.n	1fb42 <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1fb76:	ea55 0106 	orrs.w	r1, r5, r6
   1fb7a:	bf0c      	ite	eq
   1fb7c:	f04f 0801 	moveq.w	r8, #1
   1fb80:	f04f 0800 	movne.w	r8, #0
   1fb84:	d031      	beq.n	1fbea <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
   1fb86:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1fb8a:	4649      	mov	r1, r9
   1fb8c:	f993 000e 	ldrsb.w	r0, [r3, #14]
   1fb90:	f009 fade 	bl	29150 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1fb94:	4581      	cmp	r9, r0
   1fb96:	dc2f      	bgt.n	1fbf8 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
   1fb98:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1fb9c:	9600      	str	r6, [sp, #0]
   1fb9e:	9501      	str	r5, [sp, #4]
   1fba0:	4622      	mov	r2, r4
   1fba2:	4639      	mov	r1, r7
   1fba4:	4823      	ldr	r0, [pc, #140]	; (1fc34 <z_impl_k_mutex_lock+0x110>)
   1fba6:	f000 fbe3 	bl	20370 <z_pend_curr>
	if (got_mutex == 0) {
   1fbaa:	2800      	cmp	r0, #0
   1fbac:	d0da      	beq.n	1fb64 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
   1fbae:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fbb2:	f3ef 8511 	mrs	r5, BASEPRI
   1fbb6:	f383 8811 	msr	BASEPRI, r3
   1fbba:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1fbbe:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fbc0:	429c      	cmp	r4, r3
   1fbc2:	d01f      	beq.n	1fc04 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1fbc4:	b1f3      	cbz	r3, 1fc04 <z_impl_k_mutex_lock+0xe0>
   1fbc6:	6921      	ldr	r1, [r4, #16]
   1fbc8:	f993 000e 	ldrsb.w	r0, [r3, #14]
   1fbcc:	f009 fac0 	bl	29150 <new_prio_for_inheritance>
   1fbd0:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1fbd2:	4620      	mov	r0, r4
   1fbd4:	f009 fac5 	bl	29162 <adjust_owner_prio>
   1fbd8:	b9b0      	cbnz	r0, 1fc08 <z_impl_k_mutex_lock+0xe4>
   1fbda:	f1b9 0f00 	cmp.w	r9, #0
   1fbde:	d015      	beq.n	1fc0c <z_impl_k_mutex_lock+0xe8>
   1fbe0:	f04f 0801 	mov.w	r8, #1
   1fbe4:	e012      	b.n	1fc0c <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   1fbe6:	6923      	ldr	r3, [r4, #16]
   1fbe8:	e7b1      	b.n	1fb4e <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
   1fbea:	f387 8811 	msr	BASEPRI, r7
   1fbee:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   1fbf2:	f06f 000f 	mvn.w	r0, #15
   1fbf6:	e7b5      	b.n	1fb64 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
   1fbf8:	4601      	mov	r1, r0
   1fbfa:	4620      	mov	r0, r4
   1fbfc:	f009 fab1 	bl	29162 <adjust_owner_prio>
   1fc00:	4681      	mov	r9, r0
   1fc02:	e7cb      	b.n	1fb9c <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1fc04:	6921      	ldr	r1, [r4, #16]
   1fc06:	e7e4      	b.n	1fbd2 <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1fc08:	f04f 0801 	mov.w	r8, #1
	if (resched) {
   1fc0c:	f1b8 0f00 	cmp.w	r8, #0
   1fc10:	d106      	bne.n	1fc20 <z_impl_k_mutex_lock+0xfc>
   1fc12:	f385 8811 	msr	BASEPRI, r5
   1fc16:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
   1fc1a:	f06f 000a 	mvn.w	r0, #10
   1fc1e:	e7a1      	b.n	1fb64 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
   1fc20:	4629      	mov	r1, r5
   1fc22:	4804      	ldr	r0, [pc, #16]	; (1fc34 <z_impl_k_mutex_lock+0x110>)
   1fc24:	f000 fb2e 	bl	20284 <z_reschedule>
	return -EAGAIN;
   1fc28:	f06f 000a 	mvn.w	r0, #10
   1fc2c:	e79a      	b.n	1fb64 <z_impl_k_mutex_lock+0x40>
   1fc2e:	bf00      	nop
   1fc30:	20003938 	.word	0x20003938
   1fc34:	2000396c 	.word	0x2000396c

0001fc38 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1fc38:	6882      	ldr	r2, [r0, #8]
   1fc3a:	2a00      	cmp	r2, #0
   1fc3c:	d035      	beq.n	1fcaa <z_impl_k_mutex_unlock+0x72>
{
   1fc3e:	b538      	push	{r3, r4, r5, lr}
   1fc40:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1fc42:	4b1d      	ldr	r3, [pc, #116]	; (1fcb8 <z_impl_k_mutex_unlock+0x80>)
   1fc44:	689b      	ldr	r3, [r3, #8]
   1fc46:	429a      	cmp	r2, r3
   1fc48:	d132      	bne.n	1fcb0 <z_impl_k_mutex_unlock+0x78>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   1fc4a:	7bda      	ldrb	r2, [r3, #15]
   1fc4c:	3a01      	subs	r2, #1
   1fc4e:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   1fc50:	68c3      	ldr	r3, [r0, #12]
   1fc52:	2b01      	cmp	r3, #1
   1fc54:	d005      	beq.n	1fc62 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1fc56:	3b01      	subs	r3, #1
   1fc58:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   1fc5a:	f000 fbdf 	bl	2041c <k_sched_unlock>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   1fc5e:	2000      	movs	r0, #0
}
   1fc60:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1fc62:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fc66:	f3ef 8511 	mrs	r5, BASEPRI
   1fc6a:	f383 8811 	msr	BASEPRI, r3
   1fc6e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1fc72:	6901      	ldr	r1, [r0, #16]
   1fc74:	f009 fa75 	bl	29162 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1fc78:	4620      	mov	r0, r4
   1fc7a:	f009 fdd5 	bl	29828 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1fc7e:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1fc80:	b160      	cbz	r0, 1fc9c <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   1fc82:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1fc86:	6123      	str	r3, [r4, #16]
   1fc88:	2300      	movs	r3, #0
   1fc8a:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
   1fc8e:	f009 fd54 	bl	2973a <z_ready_thread>
		z_reschedule(&lock, key);
   1fc92:	4629      	mov	r1, r5
   1fc94:	4809      	ldr	r0, [pc, #36]	; (1fcbc <z_impl_k_mutex_unlock+0x84>)
   1fc96:	f000 faf5 	bl	20284 <z_reschedule>
   1fc9a:	e7de      	b.n	1fc5a <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1fc9c:	2300      	movs	r3, #0
   1fc9e:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
   1fca0:	f385 8811 	msr	BASEPRI, r5
   1fca4:	f3bf 8f6f 	isb	sy
   1fca8:	e7d7      	b.n	1fc5a <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1fcaa:	f06f 0015 	mvn.w	r0, #21
}
   1fcae:	4770      	bx	lr
		return -EPERM;
   1fcb0:	f04f 30ff 	mov.w	r0, #4294967295
   1fcb4:	e7d4      	b.n	1fc60 <z_impl_k_mutex_unlock+0x28>
   1fcb6:	bf00      	nop
   1fcb8:	20003938 	.word	0x20003938
   1fcbc:	2000396c 	.word	0x2000396c

0001fcc0 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1fcc0:	b5d0      	push	{r4, r6, r7, lr}
   1fcc2:	b082      	sub	sp, #8
   1fcc4:	4601      	mov	r1, r0
   1fcc6:	4616      	mov	r6, r2
   1fcc8:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1fcca:	4602      	mov	r2, r0
	__asm__ volatile(
   1fccc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fcd0:	f3ef 8411 	mrs	r4, BASEPRI
   1fcd4:	f383 8811 	msr	BASEPRI, r3
   1fcd8:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   1fcdc:	f852 0b08 	ldr.w	r0, [r2], #8
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1fce0:	b188      	cbz	r0, 1fd06 <z_impl_k_queue_get+0x46>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1fce2:	6803      	ldr	r3, [r0, #0]
   1fce4:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
   1fce8:	600b      	str	r3, [r1, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   1fcea:	684a      	ldr	r2, [r1, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1fcec:	4290      	cmp	r0, r2
   1fcee:	d008      	beq.n	1fd02 <z_impl_k_queue_get+0x42>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1fcf0:	2101      	movs	r1, #1
   1fcf2:	f009 fabb 	bl	2926c <z_queue_node_peek>
	__asm__ volatile(
   1fcf6:	f384 8811 	msr	BASEPRI, r4
   1fcfa:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1fcfe:	b002      	add	sp, #8
   1fd00:	bdd0      	pop	{r4, r6, r7, pc}
	list->tail = node;
   1fd02:	604b      	str	r3, [r1, #4]
}
   1fd04:	e7f4      	b.n	1fcf0 <z_impl_k_queue_get+0x30>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1fd06:	ea56 0307 	orrs.w	r3, r6, r7
   1fd0a:	d00a      	beq.n	1fd22 <z_impl_k_queue_get+0x62>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1fd0c:	e9cd 6700 	strd	r6, r7, [sp]
   1fd10:	4621      	mov	r1, r4
   1fd12:	4610      	mov	r0, r2
   1fd14:	f000 fb2c 	bl	20370 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1fd18:	b948      	cbnz	r0, 1fd2e <z_impl_k_queue_get+0x6e>
   1fd1a:	4b06      	ldr	r3, [pc, #24]	; (1fd34 <z_impl_k_queue_get+0x74>)
   1fd1c:	689b      	ldr	r3, [r3, #8]
   1fd1e:	6958      	ldr	r0, [r3, #20]
   1fd20:	e7ed      	b.n	1fcfe <z_impl_k_queue_get+0x3e>
   1fd22:	f384 8811 	msr	BASEPRI, r4
   1fd26:	f3bf 8f6f 	isb	sy
		return NULL;
   1fd2a:	2000      	movs	r0, #0
   1fd2c:	e7e7      	b.n	1fcfe <z_impl_k_queue_get+0x3e>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1fd2e:	2000      	movs	r0, #0
   1fd30:	e7e5      	b.n	1fcfe <z_impl_k_queue_get+0x3e>
   1fd32:	bf00      	nop
   1fd34:	20003938 	.word	0x20003938

0001fd38 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1fd38:	b538      	push	{r3, r4, r5, lr}
   1fd3a:	4604      	mov	r4, r0
	__asm__ volatile(
   1fd3c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fd40:	f3ef 8511 	mrs	r5, BASEPRI
   1fd44:	f383 8811 	msr	BASEPRI, r3
   1fd48:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1fd4c:	f009 fd6c 	bl	29828 <z_unpend_first_thread>

	if (thread != NULL) {
   1fd50:	b148      	cbz	r0, 1fd66 <z_impl_k_sem_give+0x2e>
   1fd52:	2200      	movs	r2, #0
   1fd54:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1fd58:	f009 fcef 	bl	2973a <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1fd5c:	4629      	mov	r1, r5
   1fd5e:	4809      	ldr	r0, [pc, #36]	; (1fd84 <z_impl_k_sem_give+0x4c>)
   1fd60:	f000 fa90 	bl	20284 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1fd64:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1fd66:	68a3      	ldr	r3, [r4, #8]
   1fd68:	68e2      	ldr	r2, [r4, #12]
   1fd6a:	4293      	cmp	r3, r2
   1fd6c:	d008      	beq.n	1fd80 <z_impl_k_sem_give+0x48>
   1fd6e:	2201      	movs	r2, #1
   1fd70:	4413      	add	r3, r2
   1fd72:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1fd74:	2102      	movs	r1, #2
   1fd76:	f104 0010 	add.w	r0, r4, #16
   1fd7a:	f009 ff28 	bl	29bce <z_handle_obj_poll_events>
}
   1fd7e:	e7ed      	b.n	1fd5c <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1fd80:	2200      	movs	r2, #0
   1fd82:	e7f5      	b.n	1fd70 <z_impl_k_sem_give+0x38>
   1fd84:	2000396c 	.word	0x2000396c

0001fd88 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1fd88:	b530      	push	{r4, r5, lr}
   1fd8a:	b083      	sub	sp, #12
   1fd8c:	461d      	mov	r5, r3
   1fd8e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fd92:	f3ef 8111 	mrs	r1, BASEPRI
   1fd96:	f383 8811 	msr	BASEPRI, r3
   1fd9a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1fd9e:	6883      	ldr	r3, [r0, #8]
   1fda0:	b143      	cbz	r3, 1fdb4 <z_impl_k_sem_take+0x2c>
		sem->count--;
   1fda2:	3b01      	subs	r3, #1
   1fda4:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   1fda6:	f381 8811 	msr	BASEPRI, r1
   1fdaa:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1fdae:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   1fdb0:	b003      	add	sp, #12
   1fdb2:	bd30      	pop	{r4, r5, pc}
   1fdb4:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1fdb6:	ea54 0305 	orrs.w	r3, r4, r5
   1fdba:	d006      	beq.n	1fdca <z_impl_k_sem_take+0x42>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1fdbc:	e9cd 4500 	strd	r4, r5, [sp]
   1fdc0:	4602      	mov	r2, r0
   1fdc2:	4805      	ldr	r0, [pc, #20]	; (1fdd8 <z_impl_k_sem_take+0x50>)
   1fdc4:	f000 fad4 	bl	20370 <z_pend_curr>
	return ret;
   1fdc8:	e7f2      	b.n	1fdb0 <z_impl_k_sem_take+0x28>
   1fdca:	f381 8811 	msr	BASEPRI, r1
   1fdce:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1fdd2:	f06f 000f 	mvn.w	r0, #15
   1fdd6:	e7eb      	b.n	1fdb0 <z_impl_k_sem_take+0x28>
   1fdd8:	2000396c 	.word	0x2000396c

0001fddc <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   1fddc:	b538      	push	{r3, r4, r5, lr}
   1fdde:	4604      	mov	r4, r0
	__asm__ volatile(
   1fde0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fde4:	f3ef 8511 	mrs	r5, BASEPRI
   1fde8:	f383 8811 	msr	BASEPRI, r3
   1fdec:	f3bf 8f6f 	isb	sy
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   1fdf0:	4620      	mov	r0, r4
   1fdf2:	f009 fd19 	bl	29828 <z_unpend_first_thread>
		if (thread == NULL) {
   1fdf6:	b130      	cbz	r0, 1fe06 <z_impl_k_sem_reset+0x2a>
   1fdf8:	f06f 020a 	mvn.w	r2, #10
   1fdfc:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   1fe00:	f009 fc9b 	bl	2973a <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   1fe04:	e7f4      	b.n	1fdf0 <z_impl_k_sem_reset+0x14>
	}
	sem->count = 0;
   1fe06:	2300      	movs	r3, #0
   1fe08:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1fe0a:	2102      	movs	r1, #2
   1fe0c:	f104 0010 	add.w	r0, r4, #16
   1fe10:	f009 fedd 	bl	29bce <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   1fe14:	4629      	mov	r1, r5
   1fe16:	4802      	ldr	r0, [pc, #8]	; (1fe20 <z_impl_k_sem_reset+0x44>)
   1fe18:	f000 fa34 	bl	20284 <z_reschedule>
}
   1fe1c:	bd38      	pop	{r3, r4, r5, pc}
   1fe1e:	bf00      	nop
   1fe20:	2000396c 	.word	0x2000396c

0001fe24 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1fe24:	b510      	push	{r4, lr}
   1fe26:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1fe28:	4b08      	ldr	r3, [pc, #32]	; (1fe4c <k_sys_work_q_init+0x28>)
   1fe2a:	9302      	str	r3, [sp, #8]
   1fe2c:	2400      	movs	r4, #0
   1fe2e:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1fe32:	ab02      	add	r3, sp, #8
   1fe34:	9300      	str	r3, [sp, #0]
   1fe36:	f04f 33ff 	mov.w	r3, #4294967295
   1fe3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1fe3e:	4904      	ldr	r1, [pc, #16]	; (1fe50 <k_sys_work_q_init+0x2c>)
   1fe40:	4804      	ldr	r0, [pc, #16]	; (1fe54 <k_sys_work_q_init+0x30>)
   1fe42:	f000 f96f 	bl	20124 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1fe46:	4620      	mov	r0, r4
   1fe48:	b004      	add	sp, #16
   1fe4a:	bd10      	pop	{r4, pc}
   1fe4c:	0002d134 	.word	0x0002d134
   1fe50:	20006a40 	.word	0x20006a40
   1fe54:	20002308 	.word	0x20002308

0001fe58 <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
   1fe58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fe5a:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
   1fe5c:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1fe5e:	f013 0f02 	tst.w	r3, #2
   1fe62:	d15b      	bne.n	1ff1c <submit_to_queue_locked+0xc4>
   1fe64:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1fe66:	f013 0f04 	tst.w	r3, #4
   1fe6a:	d15c      	bne.n	1ff26 <submit_to_queue_locked+0xce>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
   1fe6c:	680b      	ldr	r3, [r1, #0]
   1fe6e:	2b00      	cmp	r3, #0
   1fe70:	d037      	beq.n	1fee2 <submit_to_queue_locked+0x8a>
	return (*flagp & BIT(bit)) != 0U;
   1fe72:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1fe74:	f013 0f01 	tst.w	r3, #1
   1fe78:	d036      	beq.n	1fee8 <submit_to_queue_locked+0x90>
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
   1fe7a:	68a3      	ldr	r3, [r4, #8]
   1fe7c:	602b      	str	r3, [r5, #0]
			ret = 2;
   1fe7e:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
   1fe80:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
   1fe82:	2e00      	cmp	r6, #0
   1fe84:	d03e      	beq.n	1ff04 <submit_to_queue_locked+0xac>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1fe86:	4b29      	ldr	r3, [pc, #164]	; (1ff2c <submit_to_queue_locked+0xd4>)
   1fe88:	689b      	ldr	r3, [r3, #8]
   1fe8a:	42b3      	cmp	r3, r6
   1fe8c:	d02e      	beq.n	1feec <submit_to_queue_locked+0x94>
   1fe8e:	2300      	movs	r3, #0
   1fe90:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
   1fe92:	f8d6 30d0 	ldr.w	r3, [r6, #208]	; 0xd0
   1fe96:	f3c3 0180 	ubfx	r1, r3, #2, #1
   1fe9a:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1fe9e:	f013 0f01 	tst.w	r3, #1
   1fea2:	d032      	beq.n	1ff0a <submit_to_queue_locked+0xb2>
	} else if (draining && !chained) {
   1fea4:	b101      	cbz	r1, 1fea8 <submit_to_queue_locked+0x50>
   1fea6:	b39a      	cbz	r2, 1ff10 <submit_to_queue_locked+0xb8>
	} else if (plugged && !draining) {
   1fea8:	b100      	cbz	r0, 1feac <submit_to_queue_locked+0x54>
   1feaa:	b3a1      	cbz	r1, 1ff16 <submit_to_queue_locked+0xbe>
	parent->next = child;
   1feac:	2300      	movs	r3, #0
   1feae:	6023      	str	r3, [r4, #0]
	return list->tail;
   1feb0:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
Z_GENLIST_APPEND(slist, snode)
   1feb4:	b30b      	cbz	r3, 1fefa <submit_to_queue_locked+0xa2>
	parent->next = child;
   1feb6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1feb8:	f8c6 40bc 	str.w	r4, [r6, #188]	; 0xbc
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1febc:	2200      	movs	r2, #0
   1febe:	4611      	mov	r1, r2
   1fec0:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
   1fec4:	f009 fcec 	bl	298a0 <z_sched_wake>
		ret = 1;
   1fec8:	2001      	movs	r0, #1

		if (rc < 0) {
   1feca:	2800      	cmp	r0, #0
   1fecc:	db06      	blt.n	1fedc <submit_to_queue_locked+0x84>
	*flagp |= BIT(bit);
   1fece:	68e3      	ldr	r3, [r4, #12]
   1fed0:	f043 0304 	orr.w	r3, r3, #4
   1fed4:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
   1fed6:	682b      	ldr	r3, [r5, #0]
   1fed8:	60a3      	str	r3, [r4, #8]
   1feda:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
   1fedc:	2800      	cmp	r0, #0
   1fede:	dc21      	bgt.n	1ff24 <submit_to_queue_locked+0xcc>
   1fee0:	e01e      	b.n	1ff20 <submit_to_queue_locked+0xc8>
			*queuep = work->queue;
   1fee2:	6883      	ldr	r3, [r0, #8]
   1fee4:	600b      	str	r3, [r1, #0]
   1fee6:	e7c4      	b.n	1fe72 <submit_to_queue_locked+0x1a>
		ret = 1;
   1fee8:	2701      	movs	r7, #1
   1feea:	e7c9      	b.n	1fe80 <submit_to_queue_locked+0x28>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1feec:	f009 f8d2 	bl	29094 <k_is_in_isr>
   1fef0:	b908      	cbnz	r0, 1fef6 <submit_to_queue_locked+0x9e>
   1fef2:	2301      	movs	r3, #1
   1fef4:	e7cc      	b.n	1fe90 <submit_to_queue_locked+0x38>
   1fef6:	2300      	movs	r3, #0
   1fef8:	e7ca      	b.n	1fe90 <submit_to_queue_locked+0x38>
   1fefa:	f8c6 40bc 	str.w	r4, [r6, #188]	; 0xbc
	list->head = node;
   1fefe:	f8c6 40b8 	str.w	r4, [r6, #184]	; 0xb8
}
   1ff02:	e7db      	b.n	1febc <submit_to_queue_locked+0x64>
		return -EINVAL;
   1ff04:	f06f 0015 	mvn.w	r0, #21
   1ff08:	e7df      	b.n	1feca <submit_to_queue_locked+0x72>
		ret = -ENODEV;
   1ff0a:	f06f 0012 	mvn.w	r0, #18
   1ff0e:	e7dc      	b.n	1feca <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   1ff10:	f06f 000f 	mvn.w	r0, #15
   1ff14:	e7d9      	b.n	1feca <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   1ff16:	f06f 000f 	mvn.w	r0, #15
   1ff1a:	e7d6      	b.n	1feca <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   1ff1c:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
   1ff20:	2300      	movs	r3, #0
   1ff22:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
   1ff24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
   1ff26:	2000      	movs	r0, #0
   1ff28:	e7fa      	b.n	1ff20 <submit_to_queue_locked+0xc8>
   1ff2a:	bf00      	nop
   1ff2c:	20003938 	.word	0x20003938

0001ff30 <finalize_cancel_locked>:
{
   1ff30:	b570      	push	{r4, r5, r6, lr}
   1ff32:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
   1ff34:	68c3      	ldr	r3, [r0, #12]
   1ff36:	f023 0302 	bic.w	r3, r3, #2
   1ff3a:	60c3      	str	r3, [r0, #12]
	return list->head;
   1ff3c:	4b19      	ldr	r3, [pc, #100]	; (1ffa4 <finalize_cancel_locked+0x74>)
   1ff3e:	6818      	ldr	r0, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1ff40:	b1e8      	cbz	r0, 1ff7e <finalize_cancel_locked+0x4e>
   1ff42:	4604      	mov	r4, r0
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ff44:	b100      	cbz	r0, 1ff48 <finalize_cancel_locked+0x18>
	return node->next;
   1ff46:	6804      	ldr	r4, [r0, #0]
   1ff48:	2600      	movs	r6, #0
   1ff4a:	e01d      	b.n	1ff88 <finalize_cancel_locked+0x58>
Z_GENLIST_REMOVE(slist, snode)
   1ff4c:	b15e      	cbz	r6, 1ff66 <finalize_cancel_locked+0x36>
	return node->next;
   1ff4e:	6803      	ldr	r3, [r0, #0]
	parent->next = child;
   1ff50:	6033      	str	r3, [r6, #0]
	return list->tail;
   1ff52:	4b14      	ldr	r3, [pc, #80]	; (1ffa4 <finalize_cancel_locked+0x74>)
   1ff54:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1ff56:	4298      	cmp	r0, r3
   1ff58:	d00e      	beq.n	1ff78 <finalize_cancel_locked+0x48>
	parent->next = child;
   1ff5a:	2300      	movs	r3, #0
   1ff5c:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   1ff60:	f7ff feea 	bl	1fd38 <z_impl_k_sem_give>
}
   1ff64:	e015      	b.n	1ff92 <finalize_cancel_locked+0x62>
	return node->next;
   1ff66:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1ff68:	4b0e      	ldr	r3, [pc, #56]	; (1ffa4 <finalize_cancel_locked+0x74>)
   1ff6a:	601a      	str	r2, [r3, #0]
	return list->tail;
   1ff6c:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1ff6e:	4298      	cmp	r0, r3
   1ff70:	d1f3      	bne.n	1ff5a <finalize_cancel_locked+0x2a>
	list->tail = node;
   1ff72:	4b0c      	ldr	r3, [pc, #48]	; (1ffa4 <finalize_cancel_locked+0x74>)
   1ff74:	605a      	str	r2, [r3, #4]
}
   1ff76:	e7f0      	b.n	1ff5a <finalize_cancel_locked+0x2a>
	list->tail = node;
   1ff78:	4b0a      	ldr	r3, [pc, #40]	; (1ffa4 <finalize_cancel_locked+0x74>)
   1ff7a:	605e      	str	r6, [r3, #4]
}
   1ff7c:	e7ed      	b.n	1ff5a <finalize_cancel_locked+0x2a>
   1ff7e:	4604      	mov	r4, r0
   1ff80:	e7e2      	b.n	1ff48 <finalize_cancel_locked+0x18>
   1ff82:	4623      	mov	r3, r4
   1ff84:	4620      	mov	r0, r4
   1ff86:	461c      	mov	r4, r3
   1ff88:	b150      	cbz	r0, 1ffa0 <finalize_cancel_locked+0x70>
		if (wc->work == work) {
   1ff8a:	6843      	ldr	r3, [r0, #4]
   1ff8c:	42ab      	cmp	r3, r5
   1ff8e:	d0dd      	beq.n	1ff4c <finalize_cancel_locked+0x1c>
			prev = &wc->node;
   1ff90:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1ff92:	2c00      	cmp	r4, #0
   1ff94:	d0f5      	beq.n	1ff82 <finalize_cancel_locked+0x52>
   1ff96:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ff98:	2c00      	cmp	r4, #0
   1ff9a:	d0f3      	beq.n	1ff84 <finalize_cancel_locked+0x54>
	return node->next;
   1ff9c:	6823      	ldr	r3, [r4, #0]
   1ff9e:	e7f1      	b.n	1ff84 <finalize_cancel_locked+0x54>
}
   1ffa0:	bd70      	pop	{r4, r5, r6, pc}
   1ffa2:	bf00      	nop
   1ffa4:	2000396c 	.word	0x2000396c

0001ffa8 <cancel_sync_locked>:
 *
 * @retval false if work was idle on entry.  The caller need not wait.
 */
static bool cancel_sync_locked(struct k_work *work,
			       struct z_work_canceller *canceller)
{
   1ffa8:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1ffaa:	68c5      	ldr	r5, [r0, #12]
   1ffac:	f015 0f02 	tst.w	r5, #2
   1ffb0:	f3c5 0540 	ubfx	r5, r5, #1, #1

	/* If something's still running then we have to wait for
	 * completion, which is indicated when finish_cancel() gets
	 * invoked.
	 */
	if (ret) {
   1ffb4:	d101      	bne.n	1ffba <cancel_sync_locked+0x12>
		init_work_cancel(canceller, work);
	}

	return ret;
}
   1ffb6:	4628      	mov	r0, r5
   1ffb8:	bd70      	pop	{r4, r5, r6, pc}
   1ffba:	4604      	mov	r4, r0
   1ffbc:	460e      	mov	r6, r1
	k_sem_init(&canceler->sem, 0, 1);
   1ffbe:	f101 0008 	add.w	r0, r1, #8
	return z_impl_k_sem_init(sem, initial_count, limit);
   1ffc2:	2201      	movs	r2, #1
   1ffc4:	2100      	movs	r1, #0
   1ffc6:	f009 f9bf 	bl	29348 <z_impl_k_sem_init>
	canceler->work = work;
   1ffca:	6074      	str	r4, [r6, #4]
	parent->next = child;
   1ffcc:	2300      	movs	r3, #0
   1ffce:	6033      	str	r3, [r6, #0]
	return list->tail;
   1ffd0:	4b05      	ldr	r3, [pc, #20]	; (1ffe8 <cancel_sync_locked+0x40>)
   1ffd2:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   1ffd4:	b11b      	cbz	r3, 1ffde <cancel_sync_locked+0x36>
	parent->next = child;
   1ffd6:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1ffd8:	4b03      	ldr	r3, [pc, #12]	; (1ffe8 <cancel_sync_locked+0x40>)
   1ffda:	605e      	str	r6, [r3, #4]
}
   1ffdc:	e7eb      	b.n	1ffb6 <cancel_sync_locked+0xe>
   1ffde:	4b02      	ldr	r3, [pc, #8]	; (1ffe8 <cancel_sync_locked+0x40>)
   1ffe0:	605e      	str	r6, [r3, #4]
	list->head = node;
   1ffe2:	601e      	str	r6, [r3, #0]
}
   1ffe4:	e7e7      	b.n	1ffb6 <cancel_sync_locked+0xe>
   1ffe6:	bf00      	nop
   1ffe8:	2000396c 	.word	0x2000396c

0001ffec <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   1ffec:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ffee:	b085      	sub	sp, #20
   1fff0:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
   1fff2:	e016      	b.n	20022 <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
   1fff4:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
	*flagp &= ~BIT(bit);
   1fff8:	f023 0204 	bic.w	r2, r3, #4
   1fffc:	f8c5 20d0 	str.w	r2, [r5, #208]	; 0xd0
			flag_set(&queue->flags, K_WORK_QUEUE_BUSY_BIT);
			work = CONTAINER_OF(node, struct k_work, node);
			flag_set(&work->flags, K_WORK_RUNNING_BIT);
			flag_clear(&work->flags, K_WORK_QUEUED_BIT);
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   20000:	f013 0f04 	tst.w	r3, #4
   20004:	d158      	bne.n	200b8 <work_queue_main+0xcc>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   20006:	2300      	movs	r3, #0
   20008:	9302      	str	r3, [sp, #8]
   2000a:	f04f 32ff 	mov.w	r2, #4294967295
   2000e:	f04f 33ff 	mov.w	r3, #4294967295
   20012:	e9cd 2300 	strd	r2, r3, [sp]
   20016:	f105 02c0 	add.w	r2, r5, #192	; 0xc0
   2001a:	4631      	mov	r1, r6
   2001c:	482e      	ldr	r0, [pc, #184]	; (200d8 <work_queue_main+0xec>)
   2001e:	f000 fccd 	bl	209bc <z_sched_wait>
   20022:	f04f 0340 	mov.w	r3, #64	; 0x40
   20026:	f3ef 8611 	mrs	r6, BASEPRI
   2002a:	f383 8811 	msr	BASEPRI, r3
   2002e:	f3bf 8f6f 	isb	sy
	return list->head;
   20032:	f8d5 40b8 	ldr.w	r4, [r5, #184]	; 0xb8
Z_GENLIST_GET(slist, snode)
   20036:	2c00      	cmp	r4, #0
   20038:	d0dc      	beq.n	1fff4 <work_queue_main+0x8>
	return node->next;
   2003a:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   2003c:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	return list->tail;
   20040:	f8d5 20bc 	ldr.w	r2, [r5, #188]	; 0xbc
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20044:	4294      	cmp	r4, r2
   20046:	d034      	beq.n	200b2 <work_queue_main+0xc6>
	*flagp |= BIT(bit);
   20048:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   2004c:	f043 0302 	orr.w	r3, r3, #2
   20050:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
   20054:	68e3      	ldr	r3, [r4, #12]
   20056:	f043 0301 	orr.w	r3, r3, #1
	*flagp &= ~BIT(bit);
   2005a:	f023 0304 	bic.w	r3, r3, #4
   2005e:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
   20060:	6863      	ldr	r3, [r4, #4]
		if (work == NULL) {
   20062:	2c00      	cmp	r4, #0
   20064:	d0cf      	beq.n	20006 <work_queue_main+0x1a>
	__asm__ volatile(
   20066:	f386 8811 	msr	BASEPRI, r6
   2006a:	f3bf 8f6f 	isb	sy

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
			handler(work);
   2006e:	4620      	mov	r0, r4
   20070:	4798      	blx	r3
	__asm__ volatile(
   20072:	f04f 0340 	mov.w	r3, #64	; 0x40
   20076:	f3ef 8611 	mrs	r6, BASEPRI
   2007a:	f383 8811 	msr	BASEPRI, r3
   2007e:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   20082:	68e3      	ldr	r3, [r4, #12]
   20084:	f023 0301 	bic.w	r3, r3, #1
   20088:	60e3      	str	r3, [r4, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2008a:	f013 0f02 	tst.w	r3, #2
   2008e:	d11e      	bne.n	200ce <work_queue_main+0xe2>
	*flagp &= ~BIT(bit);
   20090:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   20094:	f023 0302 	bic.w	r3, r3, #2
   20098:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
	return (*flagp & BIT(bit)) != 0U;
   2009c:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
   200a0:	f386 8811 	msr	BASEPRI, r6
   200a4:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
   200a8:	2b00      	cmp	r3, #0
   200aa:	d1ba      	bne.n	20022 <work_queue_main+0x36>
	z_impl_k_yield();
   200ac:	f000 fb86 	bl	207bc <z_impl_k_yield>
}
   200b0:	e7b7      	b.n	20022 <work_queue_main+0x36>
	list->tail = node;
   200b2:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
}
   200b6:	e7c7      	b.n	20048 <work_queue_main+0x5c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   200b8:	f105 07c8 	add.w	r7, r5, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   200bc:	2200      	movs	r2, #0
   200be:	2101      	movs	r1, #1
   200c0:	4638      	mov	r0, r7
   200c2:	f009 fbed 	bl	298a0 <z_sched_wake>
   200c6:	2800      	cmp	r0, #0
   200c8:	d1f8      	bne.n	200bc <work_queue_main+0xd0>
		k_work_handler_t handler = NULL;
   200ca:	2300      	movs	r3, #0
   200cc:	e7c9      	b.n	20062 <work_queue_main+0x76>
				finalize_cancel_locked(work);
   200ce:	4620      	mov	r0, r4
   200d0:	f7ff ff2e 	bl	1ff30 <finalize_cancel_locked>
   200d4:	e7dc      	b.n	20090 <work_queue_main+0xa4>
   200d6:	bf00      	nop
   200d8:	2000396c 	.word	0x2000396c

000200dc <schedule_for_queue_locked>:
 * @retval 1 to indicate successfully scheduled.
 */
static int schedule_for_queue_locked(struct k_work_q **queuep,
				     struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   200dc:	b570      	push	{r4, r5, r6, lr}
   200de:	4606      	mov	r6, r0
   200e0:	4608      	mov	r0, r1
   200e2:	4614      	mov	r4, r2
   200e4:	461d      	mov	r5, r3
	int ret = 1;
	struct k_work *work = &dwork->work;

	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   200e6:	ea54 0305 	orrs.w	r3, r4, r5
   200ea:	d00c      	beq.n	20106 <schedule_for_queue_locked+0x2a>
	*flagp |= BIT(bit);
   200ec:	68cb      	ldr	r3, [r1, #12]
   200ee:	f043 0308 	orr.w	r3, r3, #8
   200f2:	60cb      	str	r3, [r1, #12]
		return submit_to_queue_locked(work, queuep);
	}

	flag_set(&work->flags, K_WORK_DELAYED_BIT);
	dwork->queue = *queuep;
   200f4:	6833      	ldr	r3, [r6, #0]
   200f6:	628b      	str	r3, [r1, #40]	; 0x28

	/* Add timeout */
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   200f8:	462b      	mov	r3, r5
   200fa:	4905      	ldr	r1, [pc, #20]	; (20110 <schedule_for_queue_locked+0x34>)
   200fc:	3010      	adds	r0, #16
   200fe:	f000 fcd1 	bl	20aa4 <z_add_timeout>

	return ret;
   20102:	2001      	movs	r0, #1
}
   20104:	bd70      	pop	{r4, r5, r6, pc}
		return submit_to_queue_locked(work, queuep);
   20106:	4631      	mov	r1, r6
   20108:	f7ff fea6 	bl	1fe58 <submit_to_queue_locked>
   2010c:	e7fa      	b.n	20104 <schedule_for_queue_locked+0x28>
   2010e:	bf00      	nop
   20110:	000293f3 	.word	0x000293f3

00020114 <k_work_submit>:
{
   20114:	b508      	push	{r3, lr}
   20116:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   20118:	4801      	ldr	r0, [pc, #4]	; (20120 <k_work_submit+0xc>)
   2011a:	f009 f9a4 	bl	29466 <k_work_submit_to_queue>
}
   2011e:	bd08      	pop	{r3, pc}
   20120:	20002308 	.word	0x20002308

00020124 <k_work_queue_start>:
{
   20124:	b5f0      	push	{r4, r5, r6, r7, lr}
   20126:	b089      	sub	sp, #36	; 0x24
   20128:	4604      	mov	r4, r0
   2012a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
   2012c:	2000      	movs	r0, #0
   2012e:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	list->tail = NULL;
   20132:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
   20136:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
   2013a:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
   2013e:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
   20142:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
	list->head = (sys_dnode_t *)list;
   20146:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	list->tail = (sys_dnode_t *)list;
   2014a:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	if ((cfg != NULL) && cfg->no_yield) {
   2014e:	b1fd      	cbz	r5, 20190 <k_work_queue_start+0x6c>
   20150:	7928      	ldrb	r0, [r5, #4]
   20152:	b9f8      	cbnz	r0, 20194 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   20154:	2001      	movs	r0, #1
	*flagp = flags;
   20156:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2015a:	f04f 36ff 	mov.w	r6, #4294967295
   2015e:	f04f 37ff 	mov.w	r7, #4294967295
   20162:	e9cd 6706 	strd	r6, r7, [sp, #24]
   20166:	2000      	movs	r0, #0
   20168:	9004      	str	r0, [sp, #16]
   2016a:	9303      	str	r3, [sp, #12]
   2016c:	9002      	str	r0, [sp, #8]
   2016e:	9001      	str	r0, [sp, #4]
   20170:	9400      	str	r4, [sp, #0]
   20172:	4b0a      	ldr	r3, [pc, #40]	; (2019c <k_work_queue_start+0x78>)
   20174:	4620      	mov	r0, r4
   20176:	f008 ffa4 	bl	290c2 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   2017a:	b125      	cbz	r5, 20186 <k_work_queue_start+0x62>
   2017c:	6829      	ldr	r1, [r5, #0]
   2017e:	b111      	cbz	r1, 20186 <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
   20180:	4620      	mov	r0, r4
   20182:	f7ff fb2b 	bl	1f7dc <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   20186:	4620      	mov	r0, r4
   20188:	f008 ff8c 	bl	290a4 <z_impl_k_thread_start>
}
   2018c:	b009      	add	sp, #36	; 0x24
   2018e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
   20190:	2001      	movs	r0, #1
   20192:	e7e0      	b.n	20156 <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
   20194:	f240 1001 	movw	r0, #257	; 0x101
   20198:	e7dd      	b.n	20156 <k_work_queue_start+0x32>
   2019a:	bf00      	nop
   2019c:	0001ffed 	.word	0x0001ffed

000201a0 <k_work_schedule>:
	return ret;
}

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   201a0:	b508      	push	{r3, lr}
   201a2:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   201a4:	4801      	ldr	r0, [pc, #4]	; (201ac <k_work_schedule+0xc>)
   201a6:	f009 f98a 	bl	294be <k_work_schedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule, dwork, delay, ret);

	return ret;
}
   201aa:	bd08      	pop	{r3, pc}
   201ac:	20002308 	.word	0x20002308

000201b0 <k_work_reschedule>:
	return ret;
}

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   201b0:	b508      	push	{r3, lr}
   201b2:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   201b4:	4801      	ldr	r0, [pc, #4]	; (201bc <k_work_reschedule+0xc>)
   201b6:	f009 f99c 	bl	294f2 <k_work_reschedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule, dwork, delay, ret);

	return ret;
}
   201ba:	bd08      	pop	{r3, pc}
   201bc:	20002308 	.word	0x20002308

000201c0 <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
   201c0:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   201c2:	f1b3 3fff 	cmp.w	r3, #4294967295
   201c6:	bf08      	it	eq
   201c8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   201cc:	d100      	bne.n	201d0 <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
   201ce:	bd38      	pop	{r3, r4, r5, pc}
   201d0:	4902      	ldr	r1, [pc, #8]	; (201dc <add_thread_timeout+0x1c>)
   201d2:	3018      	adds	r0, #24
   201d4:	f000 fc66 	bl	20aa4 <z_add_timeout>
   201d8:	e7f9      	b.n	201ce <add_thread_timeout+0xe>
   201da:	bf00      	nop
   201dc:	00029773 	.word	0x00029773

000201e0 <z_reset_time_slice>:
{
   201e0:	b508      	push	{r3, lr}
	if (slice_time != 0) {
   201e2:	4b08      	ldr	r3, [pc, #32]	; (20204 <z_reset_time_slice+0x24>)
   201e4:	681b      	ldr	r3, [r3, #0]
   201e6:	b903      	cbnz	r3, 201ea <z_reset_time_slice+0xa>
}
   201e8:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   201ea:	f7f2 fc11 	bl	12a10 <sys_clock_elapsed>
   201ee:	4603      	mov	r3, r0
   201f0:	4a04      	ldr	r2, [pc, #16]	; (20204 <z_reset_time_slice+0x24>)
   201f2:	6810      	ldr	r0, [r2, #0]
   201f4:	4403      	add	r3, r0
   201f6:	4a04      	ldr	r2, [pc, #16]	; (20208 <z_reset_time_slice+0x28>)
   201f8:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   201fa:	2100      	movs	r1, #0
   201fc:	f009 fbd2 	bl	299a4 <z_set_timeout_expiry>
}
   20200:	e7f2      	b.n	201e8 <z_reset_time_slice+0x8>
   20202:	bf00      	nop
   20204:	2000397c 	.word	0x2000397c
   20208:	20003938 	.word	0x20003938

0002020c <k_sched_time_slice_set>:
{
   2020c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20210:	4606      	mov	r6, r0
   20212:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
   20214:	2300      	movs	r3, #0
	__asm__ volatile(
   20216:	f04f 0240 	mov.w	r2, #64	; 0x40
   2021a:	f3ef 8711 	mrs	r7, BASEPRI
   2021e:	f382 8811 	msr	BASEPRI, r2
   20222:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   20226:	e009      	b.n	2023c <k_sched_time_slice_set+0x30>
		slice_max_prio = prio;
   20228:	4b13      	ldr	r3, [pc, #76]	; (20278 <k_sched_time_slice_set+0x6c>)
   2022a:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
   2022e:	f7ff ffd7 	bl	201e0 <z_reset_time_slice>
	__asm__ volatile(
   20232:	f387 8811 	msr	BASEPRI, r7
   20236:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2023a:	2301      	movs	r3, #1
   2023c:	b9cb      	cbnz	r3, 20272 <k_sched_time_slice_set+0x66>
		_current_cpu->slice_ticks = 0;
   2023e:	2300      	movs	r3, #0
   20240:	4a0e      	ldr	r2, [pc, #56]	; (2027c <k_sched_time_slice_set+0x70>)
   20242:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
   20244:	0c75      	lsrs	r5, r6, #17
   20246:	03f4      	lsls	r4, r6, #15
   20248:	f240 30e7 	movw	r0, #999	; 0x3e7
   2024c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20250:	2300      	movs	r3, #0
   20252:	1820      	adds	r0, r4, r0
   20254:	f04f 0100 	mov.w	r1, #0
   20258:	eb45 0101 	adc.w	r1, r5, r1
   2025c:	f7df ff3e 	bl	dc <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   20260:	4b07      	ldr	r3, [pc, #28]	; (20280 <k_sched_time_slice_set+0x74>)
   20262:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   20264:	2e00      	cmp	r6, #0
   20266:	dddf      	ble.n	20228 <k_sched_time_slice_set+0x1c>
			slice_time = MAX(2, slice_time);
   20268:	2802      	cmp	r0, #2
   2026a:	bfb8      	it	lt
   2026c:	2002      	movlt	r0, #2
   2026e:	6018      	str	r0, [r3, #0]
   20270:	e7da      	b.n	20228 <k_sched_time_slice_set+0x1c>
}
   20272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20276:	bf00      	nop
   20278:	20003978 	.word	0x20003978
   2027c:	20003938 	.word	0x20003938
   20280:	2000397c 	.word	0x2000397c

00020284 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   20284:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
   20286:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   20288:	b921      	cbnz	r1, 20294 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2028a:	f3ef 8305 	mrs	r3, IPSR
   2028e:	b913      	cbnz	r3, 20296 <z_reschedule+0x12>
   20290:	2101      	movs	r1, #1
   20292:	e000      	b.n	20296 <z_reschedule+0x12>
   20294:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
   20296:	f011 0f01 	tst.w	r1, #1
   2029a:	d007      	beq.n	202ac <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
   2029c:	4b06      	ldr	r3, [pc, #24]	; (202b8 <z_reschedule+0x34>)
   2029e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	return new_thread != _current;
   202a0:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
   202a2:	429a      	cmp	r2, r3
   202a4:	d002      	beq.n	202ac <z_reschedule+0x28>
	ret = arch_swap(key);
   202a6:	f7f3 f8b5 	bl	13414 <arch_swap>
		z_swap(lock, key);
   202aa:	e003      	b.n	202b4 <z_reschedule+0x30>
   202ac:	f380 8811 	msr	BASEPRI, r0
   202b0:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
   202b4:	bd08      	pop	{r3, pc}
   202b6:	bf00      	nop
   202b8:	20003938 	.word	0x20003938

000202bc <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
   202bc:	2300      	movs	r3, #0
	__asm__ volatile(
   202be:	f04f 0240 	mov.w	r2, #64	; 0x40
   202c2:	f3ef 8111 	mrs	r1, BASEPRI
   202c6:	f382 8811 	msr	BASEPRI, r2
   202ca:	f3bf 8f6f 	isb	sy
   202ce:	b953      	cbnz	r3, 202e6 <k_sched_lock+0x2a>
	--_current->base.sched_locked;
   202d0:	4b05      	ldr	r3, [pc, #20]	; (202e8 <k_sched_lock+0x2c>)
   202d2:	689a      	ldr	r2, [r3, #8]
   202d4:	7bd3      	ldrb	r3, [r2, #15]
   202d6:	3b01      	subs	r3, #1
   202d8:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   202da:	f381 8811 	msr	BASEPRI, r1
   202de:	f3bf 8f6f 	isb	sy
   202e2:	2301      	movs	r3, #1
   202e4:	e7f3      	b.n	202ce <k_sched_lock+0x12>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   202e6:	4770      	bx	lr
   202e8:	20003938 	.word	0x20003938

000202ec <update_cache>:
{
   202ec:	b538      	push	{r3, r4, r5, lr}
   202ee:	4604      	mov	r4, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
   202f0:	480f      	ldr	r0, [pc, #60]	; (20330 <update_cache+0x44>)
   202f2:	f009 f9d0 	bl	29696 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   202f6:	4605      	mov	r5, r0
   202f8:	b170      	cbz	r0, 20318 <update_cache+0x2c>
	if (preempt_ok != 0) {
   202fa:	b984      	cbnz	r4, 2031e <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
   202fc:	4b0d      	ldr	r3, [pc, #52]	; (20334 <update_cache+0x48>)
   202fe:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
   20300:	7b5a      	ldrb	r2, [r3, #13]
   20302:	f012 0f1f 	tst.w	r2, #31
   20306:	d10a      	bne.n	2031e <update_cache+0x32>
	return node->next != NULL;
   20308:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   2030a:	b942      	cbnz	r2, 2031e <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   2030c:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   2030e:	2a7f      	cmp	r2, #127	; 0x7f
   20310:	d905      	bls.n	2031e <update_cache+0x32>
		_kernel.ready_q.cache = _current;
   20312:	4a08      	ldr	r2, [pc, #32]	; (20334 <update_cache+0x48>)
   20314:	6253      	str	r3, [r2, #36]	; 0x24
   20316:	e00a      	b.n	2032e <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   20318:	4b06      	ldr	r3, [pc, #24]	; (20334 <update_cache+0x48>)
   2031a:	68dd      	ldr	r5, [r3, #12]
   2031c:	e7ed      	b.n	202fa <update_cache+0xe>
		if (thread != _current) {
   2031e:	4b05      	ldr	r3, [pc, #20]	; (20334 <update_cache+0x48>)
   20320:	689b      	ldr	r3, [r3, #8]
   20322:	42ab      	cmp	r3, r5
   20324:	d001      	beq.n	2032a <update_cache+0x3e>
			z_reset_time_slice();
   20326:	f7ff ff5b 	bl	201e0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   2032a:	4b02      	ldr	r3, [pc, #8]	; (20334 <update_cache+0x48>)
   2032c:	625d      	str	r5, [r3, #36]	; 0x24
}
   2032e:	bd38      	pop	{r3, r4, r5, pc}
   20330:	20003960 	.word	0x20003960
   20334:	20003938 	.word	0x20003938

00020338 <unready_thread>:
{
   20338:	b510      	push	{r4, lr}
   2033a:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   2033c:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   2033e:	f990 300d 	ldrsb.w	r3, [r0, #13]
   20342:	2b00      	cmp	r3, #0
   20344:	db08      	blt.n	20358 <unready_thread+0x20>
	update_cache(thread == _current);
   20346:	4b08      	ldr	r3, [pc, #32]	; (20368 <unready_thread+0x30>)
   20348:	6898      	ldr	r0, [r3, #8]
   2034a:	42a0      	cmp	r0, r4
   2034c:	bf14      	ite	ne
   2034e:	2000      	movne	r0, #0
   20350:	2001      	moveq	r0, #1
   20352:	f7ff ffcb 	bl	202ec <update_cache>
}
   20356:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   20358:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   2035c:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
   2035e:	4601      	mov	r1, r0
   20360:	4802      	ldr	r0, [pc, #8]	; (2036c <unready_thread+0x34>)
   20362:	f009 f96d 	bl	29640 <z_priq_dumb_remove>
}
   20366:	e7ee      	b.n	20346 <unready_thread+0xe>
   20368:	20003938 	.word	0x20003938
   2036c:	20003960 	.word	0x20003960

00020370 <z_pend_curr>:
{
   20370:	b510      	push	{r4, lr}
   20372:	460c      	mov	r4, r1
   20374:	4611      	mov	r1, r2
	pending_current = _current;
   20376:	4b06      	ldr	r3, [pc, #24]	; (20390 <z_pend_curr+0x20>)
   20378:	6898      	ldr	r0, [r3, #8]
   2037a:	4b06      	ldr	r3, [pc, #24]	; (20394 <z_pend_curr+0x24>)
   2037c:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   2037e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   20382:	f009 f9b9 	bl	296f8 <pend>
   20386:	4620      	mov	r0, r4
   20388:	f7f3 f844 	bl	13414 <arch_swap>
}
   2038c:	bd10      	pop	{r4, pc}
   2038e:	bf00      	nop
   20390:	20003938 	.word	0x20003938
   20394:	20003974 	.word	0x20003974

00020398 <z_impl_k_thread_suspend>:
{
   20398:	b538      	push	{r3, r4, r5, lr}
   2039a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   2039c:	3018      	adds	r0, #24
   2039e:	f009 facd 	bl	2993c <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   203a2:	2300      	movs	r3, #0
	__asm__ volatile(
   203a4:	f04f 0240 	mov.w	r2, #64	; 0x40
   203a8:	f3ef 8511 	mrs	r5, BASEPRI
   203ac:	f382 8811 	msr	BASEPRI, r2
   203b0:	f3bf 8f6f 	isb	sy
   203b4:	e010      	b.n	203d8 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   203b6:	7b63      	ldrb	r3, [r4, #13]
   203b8:	f043 0310 	orr.w	r3, r3, #16
   203bc:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   203be:	4b15      	ldr	r3, [pc, #84]	; (20414 <z_impl_k_thread_suspend+0x7c>)
   203c0:	6898      	ldr	r0, [r3, #8]
   203c2:	42a0      	cmp	r0, r4
   203c4:	bf14      	ite	ne
   203c6:	2000      	movne	r0, #0
   203c8:	2001      	moveq	r0, #1
   203ca:	f7ff ff8f 	bl	202ec <update_cache>
	__asm__ volatile(
   203ce:	f385 8811 	msr	BASEPRI, r5
   203d2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   203d6:	2301      	movs	r3, #1
   203d8:	b963      	cbnz	r3, 203f4 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
   203da:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   203dc:	f994 300d 	ldrsb.w	r3, [r4, #13]
   203e0:	2b00      	cmp	r3, #0
   203e2:	dae8      	bge.n	203b6 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   203e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   203e8:	7362      	strb	r2, [r4, #13]
		_priq_run_remove(pq, thread);
   203ea:	4621      	mov	r1, r4
   203ec:	480a      	ldr	r0, [pc, #40]	; (20418 <z_impl_k_thread_suspend+0x80>)
   203ee:	f009 f927 	bl	29640 <z_priq_dumb_remove>
}
   203f2:	e7e0      	b.n	203b6 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
   203f4:	4b07      	ldr	r3, [pc, #28]	; (20414 <z_impl_k_thread_suspend+0x7c>)
   203f6:	689b      	ldr	r3, [r3, #8]
   203f8:	42a3      	cmp	r3, r4
   203fa:	d000      	beq.n	203fe <z_impl_k_thread_suspend+0x66>
}
   203fc:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   203fe:	f04f 0340 	mov.w	r3, #64	; 0x40
   20402:	f3ef 8011 	mrs	r0, BASEPRI
   20406:	f383 8811 	msr	BASEPRI, r3
   2040a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2040e:	f009 f902 	bl	29616 <z_reschedule_irqlock>
   20412:	e7f3      	b.n	203fc <z_impl_k_thread_suspend+0x64>
   20414:	20003938 	.word	0x20003938
   20418:	20003960 	.word	0x20003960

0002041c <k_sched_unlock>:

void k_sched_unlock(void)
{
   2041c:	b510      	push	{r4, lr}
#ifdef CONFIG_PREEMPT_ENABLED
	LOCKED(&sched_spinlock) {
   2041e:	2300      	movs	r3, #0
   20420:	f04f 0240 	mov.w	r2, #64	; 0x40
   20424:	f3ef 8411 	mrs	r4, BASEPRI
   20428:	f382 8811 	msr	BASEPRI, r2
   2042c:	f3bf 8f6f 	isb	sy
   20430:	b96b      	cbnz	r3, 2044e <k_sched_unlock+0x32>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
   20432:	4b0c      	ldr	r3, [pc, #48]	; (20464 <k_sched_unlock+0x48>)
   20434:	689a      	ldr	r2, [r3, #8]
   20436:	7bd3      	ldrb	r3, [r2, #15]
   20438:	3301      	adds	r3, #1
   2043a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   2043c:	2000      	movs	r0, #0
   2043e:	f7ff ff55 	bl	202ec <update_cache>
	__asm__ volatile(
   20442:	f384 8811 	msr	BASEPRI, r4
   20446:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2044a:	2301      	movs	r3, #1
   2044c:	e7f0      	b.n	20430 <k_sched_unlock+0x14>
	__asm__ volatile(
   2044e:	f04f 0340 	mov.w	r3, #64	; 0x40
   20452:	f3ef 8011 	mrs	r0, BASEPRI
   20456:	f383 8811 	msr	BASEPRI, r3
   2045a:	f3bf 8f6f 	isb	sy
   2045e:	f009 f8da 	bl	29616 <z_reschedule_irqlock>

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
#endif
}
   20462:	bd10      	pop	{r4, pc}
   20464:	20003938 	.word	0x20003938

00020468 <move_thread_to_end_of_prio_q>:
{
   20468:	b538      	push	{r3, r4, r5, lr}
   2046a:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   2046c:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   2046e:	f990 300d 	ldrsb.w	r3, [r0, #13]
   20472:	2b00      	cmp	r3, #0
   20474:	db28      	blt.n	204c8 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
   20476:	7b6b      	ldrb	r3, [r5, #13]
   20478:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2047c:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   2047e:	4b1a      	ldr	r3, [pc, #104]	; (204e8 <move_thread_to_end_of_prio_q+0x80>)
   20480:	f853 4f28 	ldr.w	r4, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20484:	429c      	cmp	r4, r3
   20486:	d02d      	beq.n	204e4 <move_thread_to_end_of_prio_q+0x7c>
{
	struct k_thread *t;

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20488:	b16c      	cbz	r4, 204a6 <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2048a:	4621      	mov	r1, r4
   2048c:	4628      	mov	r0, r5
   2048e:	f009 f899 	bl	295c4 <z_sched_prio_cmp>
   20492:	2800      	cmp	r0, #0
   20494:	dc20      	bgt.n	204d8 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   20496:	b134      	cbz	r4, 204a6 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   20498:	4b13      	ldr	r3, [pc, #76]	; (204e8 <move_thread_to_end_of_prio_q+0x80>)
   2049a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2049c:	429c      	cmp	r4, r3
   2049e:	d002      	beq.n	204a6 <move_thread_to_end_of_prio_q+0x3e>
   204a0:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   204a2:	2c00      	cmp	r4, #0
   204a4:	d1f0      	bne.n	20488 <move_thread_to_end_of_prio_q+0x20>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
   204a6:	4b10      	ldr	r3, [pc, #64]	; (204e8 <move_thread_to_end_of_prio_q+0x80>)
   204a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c

	node->next = list;
   204aa:	f103 0128 	add.w	r1, r3, #40	; 0x28
   204ae:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   204b0:	606a      	str	r2, [r5, #4]

	tail->next = node;
   204b2:	6015      	str	r5, [r2, #0]
	list->tail = node;
   204b4:	62dd      	str	r5, [r3, #44]	; 0x2c
	update_cache(thread == _current);
   204b6:	4b0c      	ldr	r3, [pc, #48]	; (204e8 <move_thread_to_end_of_prio_q+0x80>)
   204b8:	6898      	ldr	r0, [r3, #8]
   204ba:	42a8      	cmp	r0, r5
   204bc:	bf14      	ite	ne
   204be:	2000      	movne	r0, #0
   204c0:	2001      	moveq	r0, #1
   204c2:	f7ff ff13 	bl	202ec <update_cache>
}
   204c6:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   204c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   204cc:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
   204ce:	4601      	mov	r1, r0
   204d0:	4806      	ldr	r0, [pc, #24]	; (204ec <move_thread_to_end_of_prio_q+0x84>)
   204d2:	f009 f8b5 	bl	29640 <z_priq_dumb_remove>
}
   204d6:	e7ce      	b.n	20476 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   204d8:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
   204da:	606b      	str	r3, [r5, #4]
	node->next = successor;
   204dc:	602c      	str	r4, [r5, #0]
	prev->next = node;
   204de:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   204e0:	6065      	str	r5, [r4, #4]
}
   204e2:	e7e8      	b.n	204b6 <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   204e4:	2400      	movs	r4, #0
   204e6:	e7cf      	b.n	20488 <move_thread_to_end_of_prio_q+0x20>
   204e8:	20003938 	.word	0x20003938
   204ec:	20003960 	.word	0x20003960

000204f0 <z_time_slice>:
{
   204f0:	b510      	push	{r4, lr}
   204f2:	f04f 0340 	mov.w	r3, #64	; 0x40
   204f6:	f3ef 8411 	mrs	r4, BASEPRI
   204fa:	f383 8811 	msr	BASEPRI, r3
   204fe:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   20502:	4b1c      	ldr	r3, [pc, #112]	; (20574 <z_time_slice+0x84>)
   20504:	689b      	ldr	r3, [r3, #8]
   20506:	4a1c      	ldr	r2, [pc, #112]	; (20578 <z_time_slice+0x88>)
   20508:	6812      	ldr	r2, [r2, #0]
   2050a:	4293      	cmp	r3, r2
   2050c:	d01d      	beq.n	2054a <z_time_slice+0x5a>
	pending_current = NULL;
   2050e:	4a1a      	ldr	r2, [pc, #104]	; (20578 <z_time_slice+0x88>)
   20510:	2100      	movs	r1, #0
   20512:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
   20514:	4a19      	ldr	r2, [pc, #100]	; (2057c <z_time_slice+0x8c>)
   20516:	6812      	ldr	r2, [r2, #0]
   20518:	b322      	cbz	r2, 20564 <z_time_slice+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   2051a:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
   2051c:	2a7f      	cmp	r2, #127	; 0x7f
   2051e:	d821      	bhi.n	20564 <z_time_slice+0x74>
	uint8_t state = thread->base.thread_state;
   20520:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
   20522:	f012 0f1f 	tst.w	r2, #31
   20526:	d11d      	bne.n	20564 <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   20528:	f993 100e 	ldrsb.w	r1, [r3, #14]
   2052c:	4a14      	ldr	r2, [pc, #80]	; (20580 <z_time_slice+0x90>)
   2052e:	6812      	ldr	r2, [r2, #0]
   20530:	4291      	cmp	r1, r2
   20532:	db17      	blt.n	20564 <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
   20534:	4a13      	ldr	r2, [pc, #76]	; (20584 <z_time_slice+0x94>)
   20536:	4293      	cmp	r3, r2
   20538:	d014      	beq.n	20564 <z_time_slice+0x74>
		if (ticks >= _current_cpu->slice_ticks) {
   2053a:	4a0e      	ldr	r2, [pc, #56]	; (20574 <z_time_slice+0x84>)
   2053c:	6912      	ldr	r2, [r2, #16]
   2053e:	4282      	cmp	r2, r0
   20540:	dd0a      	ble.n	20558 <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
   20542:	1a10      	subs	r0, r2, r0
   20544:	4b0b      	ldr	r3, [pc, #44]	; (20574 <z_time_slice+0x84>)
   20546:	6118      	str	r0, [r3, #16]
   20548:	e00f      	b.n	2056a <z_time_slice+0x7a>
		z_reset_time_slice();
   2054a:	f7ff fe49 	bl	201e0 <z_reset_time_slice>
	__asm__ volatile(
   2054e:	f384 8811 	msr	BASEPRI, r4
   20552:	f3bf 8f6f 	isb	sy
		return;
   20556:	e00c      	b.n	20572 <z_time_slice+0x82>
			move_thread_to_end_of_prio_q(_current);
   20558:	4618      	mov	r0, r3
   2055a:	f7ff ff85 	bl	20468 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
   2055e:	f7ff fe3f 	bl	201e0 <z_reset_time_slice>
   20562:	e002      	b.n	2056a <z_time_slice+0x7a>
		_current_cpu->slice_ticks = 0;
   20564:	4b03      	ldr	r3, [pc, #12]	; (20574 <z_time_slice+0x84>)
   20566:	2200      	movs	r2, #0
   20568:	611a      	str	r2, [r3, #16]
   2056a:	f384 8811 	msr	BASEPRI, r4
   2056e:	f3bf 8f6f 	isb	sy
}
   20572:	bd10      	pop	{r4, pc}
   20574:	20003938 	.word	0x20003938
   20578:	20003974 	.word	0x20003974
   2057c:	2000397c 	.word	0x2000397c
   20580:	20003978 	.word	0x20003978
   20584:	20002198 	.word	0x20002198

00020588 <ready_thread>:
{
   20588:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
   2058a:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   2058c:	f990 200d 	ldrsb.w	r2, [r0, #13]
   20590:	2a00      	cmp	r2, #0
   20592:	db2d      	blt.n	205f0 <ready_thread+0x68>
   20594:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   20596:	f013 0f1f 	tst.w	r3, #31
   2059a:	d105      	bne.n	205a8 <ready_thread+0x20>
	return node->next != NULL;
   2059c:	6982      	ldr	r2, [r0, #24]
   2059e:	b10a      	cbz	r2, 205a4 <ready_thread+0x1c>
   205a0:	2200      	movs	r2, #0
   205a2:	e002      	b.n	205aa <ready_thread+0x22>
   205a4:	2201      	movs	r2, #1
   205a6:	e000      	b.n	205aa <ready_thread+0x22>
   205a8:	2200      	movs	r2, #0
   205aa:	b30a      	cbz	r2, 205f0 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
   205ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
   205b0:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   205b2:	4b14      	ldr	r3, [pc, #80]	; (20604 <ready_thread+0x7c>)
   205b4:	f853 5f28 	ldr.w	r5, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   205b8:	429d      	cmp	r5, r3
   205ba:	d020      	beq.n	205fe <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   205bc:	b16d      	cbz	r5, 205da <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
   205be:	4629      	mov	r1, r5
   205c0:	4620      	mov	r0, r4
   205c2:	f008 ffff 	bl	295c4 <z_sched_prio_cmp>
   205c6:	2800      	cmp	r0, #0
   205c8:	dc13      	bgt.n	205f2 <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   205ca:	b135      	cbz	r5, 205da <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
   205cc:	4b0d      	ldr	r3, [pc, #52]	; (20604 <ready_thread+0x7c>)
   205ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   205d0:	429d      	cmp	r5, r3
   205d2:	d002      	beq.n	205da <ready_thread+0x52>
   205d4:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   205d6:	2d00      	cmp	r5, #0
   205d8:	d1f0      	bne.n	205bc <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
   205da:	4b0a      	ldr	r3, [pc, #40]	; (20604 <ready_thread+0x7c>)
   205dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	node->next = list;
   205de:	f103 0128 	add.w	r1, r3, #40	; 0x28
   205e2:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   205e4:	6062      	str	r2, [r4, #4]
	tail->next = node;
   205e6:	6014      	str	r4, [r2, #0]
	list->tail = node;
   205e8:	62dc      	str	r4, [r3, #44]	; 0x2c
		update_cache(0);
   205ea:	2000      	movs	r0, #0
   205ec:	f7ff fe7e 	bl	202ec <update_cache>
}
   205f0:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
   205f2:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   205f4:	6063      	str	r3, [r4, #4]
	node->next = successor;
   205f6:	6025      	str	r5, [r4, #0]
	prev->next = node;
   205f8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   205fa:	606c      	str	r4, [r5, #4]
}
   205fc:	e7f5      	b.n	205ea <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   205fe:	2500      	movs	r5, #0
   20600:	e7dc      	b.n	205bc <ready_thread+0x34>
   20602:	bf00      	nop
   20604:	20003938 	.word	0x20003938

00020608 <z_sched_start>:
{
   20608:	b510      	push	{r4, lr}
	__asm__ volatile(
   2060a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2060e:	f3ef 8411 	mrs	r4, BASEPRI
   20612:	f383 8811 	msr	BASEPRI, r3
   20616:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   2061a:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
   2061c:	f013 0f04 	tst.w	r3, #4
   20620:	d104      	bne.n	2062c <z_sched_start+0x24>
	__asm__ volatile(
   20622:	f384 8811 	msr	BASEPRI, r4
   20626:	f3bf 8f6f 	isb	sy
}
   2062a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2062c:	f023 0304 	bic.w	r3, r3, #4
   20630:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
   20632:	f7ff ffa9 	bl	20588 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   20636:	4621      	mov	r1, r4
   20638:	4801      	ldr	r0, [pc, #4]	; (20640 <z_sched_start+0x38>)
   2063a:	f7ff fe23 	bl	20284 <z_reschedule>
   2063e:	e7f4      	b.n	2062a <z_sched_start+0x22>
   20640:	20003978 	.word	0x20003978

00020644 <z_set_prio>:
{
   20644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20648:	4604      	mov	r4, r0
   2064a:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
   2064c:	2300      	movs	r3, #0
	__asm__ volatile(
   2064e:	f04f 0240 	mov.w	r2, #64	; 0x40
   20652:	f3ef 8611 	mrs	r6, BASEPRI
   20656:	f382 8811 	msr	BASEPRI, r2
   2065a:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
   2065e:	4698      	mov	r8, r3
   20660:	e008      	b.n	20674 <z_set_prio+0x30>
		if (need_sched) {
   20662:	f012 0801 	ands.w	r8, r2, #1
   20666:	d111      	bne.n	2068c <z_set_prio+0x48>
			thread->base.prio = prio;
   20668:	73a7      	strb	r7, [r4, #14]
	__asm__ volatile(
   2066a:	f386 8811 	msr	BASEPRI, r6
   2066e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   20672:	2301      	movs	r3, #1
   20674:	461a      	mov	r2, r3
   20676:	2b00      	cmp	r3, #0
   20678:	d13d      	bne.n	206f6 <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
   2067a:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2067c:	f013 0f1f 	tst.w	r3, #31
   20680:	d1ef      	bne.n	20662 <z_set_prio+0x1e>
	return node->next != NULL;
   20682:	69a1      	ldr	r1, [r4, #24]
   20684:	2900      	cmp	r1, #0
   20686:	d1ec      	bne.n	20662 <z_set_prio+0x1e>
   20688:	2201      	movs	r2, #1
   2068a:	e7ea      	b.n	20662 <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2068c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   20690:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   20692:	f8df 906c 	ldr.w	r9, [pc, #108]	; 20700 <z_set_prio+0xbc>
   20696:	4621      	mov	r1, r4
   20698:	4648      	mov	r0, r9
   2069a:	f008 ffd1 	bl	29640 <z_priq_dumb_remove>
				thread->base.prio = prio;
   2069e:	73a7      	strb	r7, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   206a0:	7b63      	ldrb	r3, [r4, #13]
   206a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   206a6:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   206a8:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   206ac:	454d      	cmp	r5, r9
   206ae:	d020      	beq.n	206f2 <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   206b0:	b16d      	cbz	r5, 206ce <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   206b2:	4629      	mov	r1, r5
   206b4:	4620      	mov	r0, r4
   206b6:	f008 ff85 	bl	295c4 <z_sched_prio_cmp>
   206ba:	2800      	cmp	r0, #0
   206bc:	dc13      	bgt.n	206e6 <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   206be:	b135      	cbz	r5, 206ce <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
   206c0:	4b0e      	ldr	r3, [pc, #56]	; (206fc <z_set_prio+0xb8>)
   206c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   206c4:	429d      	cmp	r5, r3
   206c6:	d002      	beq.n	206ce <z_set_prio+0x8a>
   206c8:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   206ca:	2d00      	cmp	r5, #0
   206cc:	d1f0      	bne.n	206b0 <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
   206ce:	4b0b      	ldr	r3, [pc, #44]	; (206fc <z_set_prio+0xb8>)
   206d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	node->next = list;
   206d2:	f103 0128 	add.w	r1, r3, #40	; 0x28
   206d6:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   206d8:	6062      	str	r2, [r4, #4]
	tail->next = node;
   206da:	6014      	str	r4, [r2, #0]
	list->tail = node;
   206dc:	62dc      	str	r4, [r3, #44]	; 0x2c
			update_cache(1);
   206de:	2001      	movs	r0, #1
   206e0:	f7ff fe04 	bl	202ec <update_cache>
   206e4:	e7c1      	b.n	2066a <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
   206e6:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   206e8:	6063      	str	r3, [r4, #4]
	node->next = successor;
   206ea:	6025      	str	r5, [r4, #0]
	prev->next = node;
   206ec:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   206ee:	606c      	str	r4, [r5, #4]
}
   206f0:	e7f5      	b.n	206de <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   206f2:	2500      	movs	r5, #0
   206f4:	e7dc      	b.n	206b0 <z_set_prio+0x6c>
}
   206f6:	4640      	mov	r0, r8
   206f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   206fc:	20003938 	.word	0x20003938
   20700:	20003960 	.word	0x20003960

00020704 <end_thread>:
		ready_thread(thread);
	}
}

static void end_thread(struct k_thread *thread)
{
   20704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   20706:	7b43      	ldrb	r3, [r0, #13]
   20708:	f013 0f08 	tst.w	r3, #8
   2070c:	d145      	bne.n	2079a <end_thread+0x96>
   2070e:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
   20710:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
   20714:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   20718:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
   2071a:	f013 0f80 	tst.w	r3, #128	; 0x80
   2071e:	d114      	bne.n	2074a <end_thread+0x46>
			dequeue_thread(&_kernel.ready_q.runq, thread);
		}
		if (thread->base.pended_on != NULL) {
   20720:	68ab      	ldr	r3, [r5, #8]
   20722:	b15b      	cbz	r3, 2073c <end_thread+0x38>
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   20724:	4628      	mov	r0, r5
   20726:	f008 ff4b 	bl	295c0 <pended_on>
   2072a:	4629      	mov	r1, r5
   2072c:	f008 ff88 	bl	29640 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   20730:	7b6b      	ldrb	r3, [r5, #13]
   20732:	f023 0302 	bic.w	r3, r3, #2
   20736:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   20738:	2300      	movs	r3, #0
   2073a:	60ab      	str	r3, [r5, #8]
   2073c:	f105 0018 	add.w	r0, r5, #24
   20740:	f009 f8fc 	bl	2993c <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   20744:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   20748:	e01c      	b.n	20784 <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2074a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2074e:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
   20750:	4601      	mov	r1, r0
   20752:	4812      	ldr	r0, [pc, #72]	; (2079c <end_thread+0x98>)
   20754:	f008 ff74 	bl	29640 <z_priq_dumb_remove>
}
   20758:	e7e2      	b.n	20720 <end_thread+0x1c>
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2075a:	4620      	mov	r0, r4
   2075c:	f008 ff30 	bl	295c0 <pended_on>
   20760:	4621      	mov	r1, r4
   20762:	f008 ff6d 	bl	29640 <z_priq_dumb_remove>
   20766:	7b63      	ldrb	r3, [r4, #13]
   20768:	f023 0302 	bic.w	r3, r3, #2
   2076c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2076e:	2600      	movs	r6, #0
   20770:	60a6      	str	r6, [r4, #8]
   20772:	f104 0018 	add.w	r0, r4, #24
   20776:	f009 f8e1 	bl	2993c <z_abort_timeout>
   2077a:	f8c4 60b0 	str.w	r6, [r4, #176]	; 0xb0
		ready_thread(thread);
   2077e:	4620      	mov	r0, r4
   20780:	f7ff ff02 	bl	20588 <ready_thread>
	return list->head == list;
   20784:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20786:	42bc      	cmp	r4, r7
   20788:	d001      	beq.n	2078e <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2078a:	2c00      	cmp	r4, #0
   2078c:	d1e5      	bne.n	2075a <end_thread+0x56>
		update_cache(1);
   2078e:	2001      	movs	r0, #1
   20790:	f7ff fdac 	bl	202ec <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
   20794:	4628      	mov	r0, r5
   20796:	f7ff f801 	bl	1f79c <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   2079a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2079c:	20003960 	.word	0x20003960

000207a0 <z_sched_init>:
{
   207a0:	b508      	push	{r3, lr}
	list->head = (sys_dnode_t *)list;
   207a2:	4b05      	ldr	r3, [pc, #20]	; (207b8 <z_sched_init+0x18>)
   207a4:	f103 0228 	add.w	r2, r3, #40	; 0x28
   207a8:	629a      	str	r2, [r3, #40]	; 0x28
	list->tail = (sys_dnode_t *)list;
   207aa:	62da      	str	r2, [r3, #44]	; 0x2c
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   207ac:	2100      	movs	r1, #0
   207ae:	4608      	mov	r0, r1
   207b0:	f7ff fd2c 	bl	2020c <k_sched_time_slice_set>
}
   207b4:	bd08      	pop	{r3, pc}
   207b6:	bf00      	nop
   207b8:	20003938 	.word	0x20003938

000207bc <z_impl_k_yield>:
{
   207bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   207be:	4b28      	ldr	r3, [pc, #160]	; (20860 <z_impl_k_yield+0xa4>)
   207c0:	689a      	ldr	r2, [r3, #8]
   207c2:	4b28      	ldr	r3, [pc, #160]	; (20864 <z_impl_k_yield+0xa8>)
   207c4:	429a      	cmp	r2, r3
   207c6:	d040      	beq.n	2084a <z_impl_k_yield+0x8e>
	__asm__ volatile(
   207c8:	f04f 0340 	mov.w	r3, #64	; 0x40
   207cc:	f3ef 8611 	mrs	r6, BASEPRI
   207d0:	f383 8811 	msr	BASEPRI, r3
   207d4:	f3bf 8f6f 	isb	sy
			dequeue_thread(&_kernel.ready_q.runq,
   207d8:	4c21      	ldr	r4, [pc, #132]	; (20860 <z_impl_k_yield+0xa4>)
   207da:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   207dc:	7b4b      	ldrb	r3, [r1, #13]
   207de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   207e2:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
   207e4:	f104 0728 	add.w	r7, r4, #40	; 0x28
   207e8:	4638      	mov	r0, r7
   207ea:	f008 ff29 	bl	29640 <z_priq_dumb_remove>
		queue_thread(&_kernel.ready_q.runq, _current);
   207ee:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   207f0:	7b6b      	ldrb	r3, [r5, #13]
   207f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   207f6:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   207f8:	6aa4      	ldr	r4, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   207fa:	42bc      	cmp	r4, r7
   207fc:	d023      	beq.n	20846 <z_impl_k_yield+0x8a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   207fe:	b16c      	cbz	r4, 2081c <z_impl_k_yield+0x60>
		if (z_sched_prio_cmp(thread, t) > 0) {
   20800:	4621      	mov	r1, r4
   20802:	4628      	mov	r0, r5
   20804:	f008 fede 	bl	295c4 <z_sched_prio_cmp>
   20808:	2800      	cmp	r0, #0
   2080a:	dc16      	bgt.n	2083a <z_impl_k_yield+0x7e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2080c:	b134      	cbz	r4, 2081c <z_impl_k_yield+0x60>
	return (node == list->tail) ? NULL : node->next;
   2080e:	4b14      	ldr	r3, [pc, #80]	; (20860 <z_impl_k_yield+0xa4>)
   20810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20812:	429c      	cmp	r4, r3
   20814:	d002      	beq.n	2081c <z_impl_k_yield+0x60>
   20816:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20818:	2c00      	cmp	r4, #0
   2081a:	d1f0      	bne.n	207fe <z_impl_k_yield+0x42>
	sys_dnode_t *const tail = list->tail;
   2081c:	4b10      	ldr	r3, [pc, #64]	; (20860 <z_impl_k_yield+0xa4>)
   2081e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	node->next = list;
   20820:	f103 0128 	add.w	r1, r3, #40	; 0x28
   20824:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   20826:	606a      	str	r2, [r5, #4]
	tail->next = node;
   20828:	6015      	str	r5, [r2, #0]
	list->tail = node;
   2082a:	62dd      	str	r5, [r3, #44]	; 0x2c
		update_cache(1);
   2082c:	2001      	movs	r0, #1
   2082e:	f7ff fd5d 	bl	202ec <update_cache>
   20832:	4630      	mov	r0, r6
   20834:	f7f2 fdee 	bl	13414 <arch_swap>
}
   20838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
   2083a:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   2083c:	606b      	str	r3, [r5, #4]
	node->next = successor;
   2083e:	602c      	str	r4, [r5, #0]
	prev->next = node;
   20840:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   20842:	6065      	str	r5, [r4, #4]
}
   20844:	e7f2      	b.n	2082c <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20846:	2400      	movs	r4, #0
   20848:	e7d9      	b.n	207fe <z_impl_k_yield+0x42>
   2084a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2084e:	f3ef 8011 	mrs	r0, BASEPRI
   20852:	f383 8811 	msr	BASEPRI, r3
   20856:	f3bf 8f6f 	isb	sy
   2085a:	f7f2 fddb 	bl	13414 <arch_swap>
}
   2085e:	e7eb      	b.n	20838 <z_impl_k_yield+0x7c>
   20860:	20003938 	.word	0x20003938
   20864:	20002198 	.word	0x20002198

00020868 <z_tick_sleep>:
{
   20868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2086c:	4606      	mov	r6, r0
   2086e:	460f      	mov	r7, r1
	if (ticks == 0) {
   20870:	ea56 0307 	orrs.w	r3, r6, r7
   20874:	d02c      	beq.n	208d0 <z_tick_sleep+0x68>
	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   20876:	f009 f8c0 	bl	299fa <sys_clock_tick_get_32>
   2087a:	1984      	adds	r4, r0, r6
   2087c:	f04f 0340 	mov.w	r3, #64	; 0x40
   20880:	f3ef 8811 	mrs	r8, BASEPRI
   20884:	f383 8811 	msr	BASEPRI, r3
   20888:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   2088c:	4d13      	ldr	r5, [pc, #76]	; (208dc <z_tick_sleep+0x74>)
   2088e:	68a8      	ldr	r0, [r5, #8]
   20890:	4b13      	ldr	r3, [pc, #76]	; (208e0 <z_tick_sleep+0x78>)
   20892:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   20894:	f7ff fd50 	bl	20338 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   20898:	68a8      	ldr	r0, [r5, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   2089a:	4632      	mov	r2, r6
   2089c:	463b      	mov	r3, r7
   2089e:	4911      	ldr	r1, [pc, #68]	; (208e4 <z_tick_sleep+0x7c>)
   208a0:	3018      	adds	r0, #24
   208a2:	f000 f8ff 	bl	20aa4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   208a6:	68aa      	ldr	r2, [r5, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   208a8:	7b53      	ldrb	r3, [r2, #13]
   208aa:	f043 0310 	orr.w	r3, r3, #16
   208ae:	7353      	strb	r3, [r2, #13]
   208b0:	4640      	mov	r0, r8
   208b2:	f7f2 fdaf 	bl	13414 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   208b6:	2500      	movs	r5, #0
   208b8:	f009 f89f 	bl	299fa <sys_clock_tick_get_32>
   208bc:	1a24      	subs	r4, r4, r0
   208be:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
   208c2:	2c01      	cmp	r4, #1
   208c4:	f175 0300 	sbcs.w	r3, r5, #0
   208c8:	da06      	bge.n	208d8 <z_tick_sleep+0x70>
	return 0;
   208ca:	2000      	movs	r0, #0
}
   208cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
   208d0:	f7ff ff74 	bl	207bc <z_impl_k_yield>
		return 0;
   208d4:	2000      	movs	r0, #0
   208d6:	e7f9      	b.n	208cc <z_tick_sleep+0x64>
		return ticks;
   208d8:	4620      	mov	r0, r4
   208da:	e7f7      	b.n	208cc <z_tick_sleep+0x64>
   208dc:	20003938 	.word	0x20003938
   208e0:	20003974 	.word	0x20003974
   208e4:	00029773 	.word	0x00029773

000208e8 <z_impl_k_sleep>:
{
   208e8:	b538      	push	{r3, r4, r5, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   208ea:	f1b1 3fff 	cmp.w	r1, #4294967295
   208ee:	bf08      	it	eq
   208f0:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   208f4:	d01a      	beq.n	2092c <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
   208f6:	f7ff ffb7 	bl	20868 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   208fa:	4604      	mov	r4, r0
   208fc:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
   208fe:	0169      	lsls	r1, r5, #5
   20900:	0143      	lsls	r3, r0, #5
   20902:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
   20906:	1a18      	subs	r0, r3, r0
   20908:	eb62 0305 	sbc.w	r3, r2, r5
   2090c:	009a      	lsls	r2, r3, #2
   2090e:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
   20912:	0081      	lsls	r1, r0, #2
   20914:	4613      	mov	r3, r2
   20916:	1908      	adds	r0, r1, r4
   20918:	eb45 0303 	adc.w	r3, r5, r3
   2091c:	00da      	lsls	r2, r3, #3
   2091e:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
   20922:	00c1      	lsls	r1, r0, #3
   20924:	0bc8      	lsrs	r0, r1, #15
   20926:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
   2092a:	bd38      	pop	{r3, r4, r5, pc}
		k_thread_suspend(_current);
   2092c:	4b03      	ldr	r3, [pc, #12]	; (2093c <z_impl_k_sleep+0x54>)
   2092e:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   20930:	f7ff fd32 	bl	20398 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   20934:	f04f 30ff 	mov.w	r0, #4294967295
   20938:	e7f7      	b.n	2092a <z_impl_k_sleep+0x42>
   2093a:	bf00      	nop
   2093c:	20003938 	.word	0x20003938

00020940 <z_impl_k_current_get>:
}
   20940:	4b01      	ldr	r3, [pc, #4]	; (20948 <z_impl_k_current_get+0x8>)
   20942:	6898      	ldr	r0, [r3, #8]
   20944:	4770      	bx	lr
   20946:	bf00      	nop
   20948:	20003938 	.word	0x20003938

0002094c <z_impl_k_is_preempt_thread>:
   2094c:	f3ef 8305 	mrs	r3, IPSR
	return !arch_is_in_isr() && is_preempt(_current);
   20950:	b933      	cbnz	r3, 20960 <z_impl_k_is_preempt_thread+0x14>
   20952:	4b05      	ldr	r3, [pc, #20]	; (20968 <z_impl_k_is_preempt_thread+0x1c>)
   20954:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   20956:	89db      	ldrh	r3, [r3, #14]
	return !arch_is_in_isr() && is_preempt(_current);
   20958:	2b7f      	cmp	r3, #127	; 0x7f
   2095a:	d803      	bhi.n	20964 <z_impl_k_is_preempt_thread+0x18>
   2095c:	2001      	movs	r0, #1
   2095e:	4770      	bx	lr
   20960:	2000      	movs	r0, #0
   20962:	4770      	bx	lr
   20964:	2000      	movs	r0, #0
}
   20966:	4770      	bx	lr
   20968:	20003938 	.word	0x20003938

0002096c <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   2096c:	b538      	push	{r3, r4, r5, lr}
   2096e:	f04f 0340 	mov.w	r3, #64	; 0x40
   20972:	f3ef 8511 	mrs	r5, BASEPRI
   20976:	f383 8811 	msr	BASEPRI, r3
   2097a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   2097e:	7b43      	ldrb	r3, [r0, #13]
   20980:	f013 0f08 	tst.w	r3, #8
   20984:	d004      	beq.n	20990 <z_thread_abort+0x24>
	__asm__ volatile(
   20986:	f385 8811 	msr	BASEPRI, r5
   2098a:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   2098e:	bd38      	pop	{r3, r4, r5, pc}
   20990:	4604      	mov	r4, r0
	end_thread(thread);
   20992:	f7ff feb7 	bl	20704 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   20996:	4b08      	ldr	r3, [pc, #32]	; (209b8 <z_thread_abort+0x4c>)
   20998:	689b      	ldr	r3, [r3, #8]
   2099a:	42a3      	cmp	r3, r4
   2099c:	d004      	beq.n	209a8 <z_thread_abort+0x3c>
   2099e:	f385 8811 	msr	BASEPRI, r5
   209a2:	f3bf 8f6f 	isb	sy
   209a6:	e7f2      	b.n	2098e <z_thread_abort+0x22>
   209a8:	f3ef 8305 	mrs	r3, IPSR
   209ac:	2b00      	cmp	r3, #0
   209ae:	d1f6      	bne.n	2099e <z_thread_abort+0x32>
   209b0:	4628      	mov	r0, r5
   209b2:	f7f2 fd2f 	bl	13414 <arch_swap>
	return ret;
   209b6:	e7f2      	b.n	2099e <z_thread_abort+0x32>
   209b8:	20003938 	.word	0x20003938

000209bc <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   209bc:	b5d0      	push	{r4, r6, r7, lr}
   209be:	b082      	sub	sp, #8
   209c0:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   209c2:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   209c6:	e9cd 6700 	strd	r6, r7, [sp]
   209ca:	f7ff fcd1 	bl	20370 <z_pend_curr>

	if (data != NULL) {
   209ce:	b11c      	cbz	r4, 209d8 <z_sched_wait+0x1c>
		*data = _current->base.swap_data;
   209d0:	4b02      	ldr	r3, [pc, #8]	; (209dc <z_sched_wait+0x20>)
   209d2:	689b      	ldr	r3, [r3, #8]
   209d4:	695b      	ldr	r3, [r3, #20]
   209d6:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   209d8:	b002      	add	sp, #8
   209da:	bdd0      	pop	{r4, r6, r7, pc}
   209dc:	20003938 	.word	0x20003938

000209e0 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   209e0:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   209e2:	4806      	ldr	r0, [pc, #24]	; (209fc <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   209e4:	4a06      	ldr	r2, [pc, #24]	; (20a00 <z_data_copy+0x20>)
   209e6:	1a12      	subs	r2, r2, r0
   209e8:	4906      	ldr	r1, [pc, #24]	; (20a04 <z_data_copy+0x24>)
   209ea:	f004 f83f 	bl	24a6c <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   209ee:	4a06      	ldr	r2, [pc, #24]	; (20a08 <z_data_copy+0x28>)
   209f0:	4906      	ldr	r1, [pc, #24]	; (20a0c <z_data_copy+0x2c>)
   209f2:	4807      	ldr	r0, [pc, #28]	; (20a10 <z_data_copy+0x30>)
   209f4:	f004 f83a 	bl	24a6c <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   209f8:	bd08      	pop	{r3, pc}
   209fa:	bf00      	nop
   209fc:	20000000 	.word	0x20000000
   20a00:	200008f4 	.word	0x200008f4
   20a04:	0002d178 	.word	0x0002d178
   20a08:	00000000 	.word	0x00000000
   20a0c:	0002d178 	.word	0x0002d178
   20a10:	20000000 	.word	0x20000000

00020a14 <first>:
	return list->head == list;
   20a14:	4b03      	ldr	r3, [pc, #12]	; (20a24 <first+0x10>)
   20a16:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20a18:	4298      	cmp	r0, r3
   20a1a:	d000      	beq.n	20a1e <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   20a1c:	4770      	bx	lr
   20a1e:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   20a20:	e7fc      	b.n	20a1c <first+0x8>
   20a22:	bf00      	nop
   20a24:	20000658 	.word	0x20000658

00020a28 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   20a28:	b130      	cbz	r0, 20a38 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   20a2a:	4a04      	ldr	r2, [pc, #16]	; (20a3c <next+0x14>)
   20a2c:	6852      	ldr	r2, [r2, #4]
   20a2e:	4290      	cmp	r0, r2
   20a30:	d001      	beq.n	20a36 <next+0xe>
   20a32:	6800      	ldr	r0, [r0, #0]
   20a34:	4770      	bx	lr
   20a36:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   20a38:	4770      	bx	lr
   20a3a:	bf00      	nop
   20a3c:	20000658 	.word	0x20000658

00020a40 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   20a40:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   20a42:	4b04      	ldr	r3, [pc, #16]	; (20a54 <elapsed+0x14>)
   20a44:	681b      	ldr	r3, [r3, #0]
   20a46:	b10b      	cbz	r3, 20a4c <elapsed+0xc>
   20a48:	2000      	movs	r0, #0
}
   20a4a:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   20a4c:	f7f1 ffe0 	bl	12a10 <sys_clock_elapsed>
   20a50:	e7fb      	b.n	20a4a <elapsed+0xa>
   20a52:	bf00      	nop
   20a54:	20003980 	.word	0x20003980

00020a58 <next_timeout>:

static int32_t next_timeout(void)
{
   20a58:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   20a5a:	f7ff ffdb 	bl	20a14 <first>
   20a5e:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   20a60:	f7ff ffee 	bl	20a40 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   20a64:	b18c      	cbz	r4, 20a8a <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   20a66:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   20a6a:	1a12      	subs	r2, r2, r0
   20a6c:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   20a70:	2a01      	cmp	r2, #1
   20a72:	f173 0100 	sbcs.w	r1, r3, #0
   20a76:	db11      	blt.n	20a9c <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   20a78:	4610      	mov	r0, r2
   20a7a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   20a7e:	f173 0300 	sbcs.w	r3, r3, #0
   20a82:	db04      	blt.n	20a8e <next_timeout+0x36>
   20a84:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   20a88:	e001      	b.n	20a8e <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
   20a8a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   20a8e:	4b04      	ldr	r3, [pc, #16]	; (20aa0 <next_timeout+0x48>)
   20a90:	691b      	ldr	r3, [r3, #16]
   20a92:	b113      	cbz	r3, 20a9a <next_timeout+0x42>
   20a94:	4283      	cmp	r3, r0
   20a96:	da00      	bge.n	20a9a <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
   20a98:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
   20a9a:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   20a9c:	2000      	movs	r0, #0
   20a9e:	e7f6      	b.n	20a8e <next_timeout+0x36>
   20aa0:	20003938 	.word	0x20003938

00020aa4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   20aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20aa8:	b083      	sub	sp, #12
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   20aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
   20aae:	bf08      	it	eq
   20ab0:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   20ab4:	f000 8096 	beq.w	20be4 <z_add_timeout+0x140>
   20ab8:	4682      	mov	sl, r0
   20aba:	4614      	mov	r4, r2
   20abc:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   20abe:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
   20ac0:	2300      	movs	r3, #0
	__asm__ volatile(
   20ac2:	f04f 0240 	mov.w	r2, #64	; 0x40
   20ac6:	f3ef 8b11 	mrs	fp, BASEPRI
   20aca:	f382 8811 	msr	BASEPRI, r2
   20ace:	f3bf 8f6f 	isb	sy
   20ad2:	e02e      	b.n	20b32 <z_add_timeout+0x8e>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
   20ad4:	2201      	movs	r2, #1
   20ad6:	2300      	movs	r3, #0
   20ad8:	e04b      	b.n	20b72 <z_add_timeout+0xce>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   20ada:	f7ff ffb1 	bl	20a40 <elapsed>
   20ade:	1822      	adds	r2, r4, r0
   20ae0:	eb45 73e0 	adc.w	r3, r5, r0, asr #31
   20ae4:	3201      	adds	r2, #1
   20ae6:	f143 0300 	adc.w	r3, r3, #0
   20aea:	f8ca 2010 	str.w	r2, [sl, #16]
   20aee:	f8ca 3014 	str.w	r3, [sl, #20]
   20af2:	e042      	b.n	20b7a <z_add_timeout+0xd6>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   20af4:	9b00      	ldr	r3, [sp, #0]
   20af6:	1ac2      	subs	r2, r0, r3
   20af8:	9b01      	ldr	r3, [sp, #4]
   20afa:	eb61 0303 	sbc.w	r3, r1, r3
   20afe:	f8cc 2010 	str.w	r2, [ip, #16]
   20b02:	f8cc 3014 	str.w	r3, [ip, #20]
	sys_dnode_t *const prev = successor->prev;
   20b06:	f8dc 3004 	ldr.w	r3, [ip, #4]
	node->prev = prev;
   20b0a:	f8ca 3004 	str.w	r3, [sl, #4]
	node->next = successor;
   20b0e:	f8ca c000 	str.w	ip, [sl]
	prev->next = node;
   20b12:	f8c3 a000 	str.w	sl, [r3]
	successor->prev = node;
   20b16:	f8cc a004 	str.w	sl, [ip, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   20b1a:	f1bc 0f00 	cmp.w	ip, #0
   20b1e:	d049      	beq.n	20bb4 <z_add_timeout+0x110>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   20b20:	f7ff ff78 	bl	20a14 <first>
   20b24:	4582      	cmp	sl, r0
   20b26:	d050      	beq.n	20bca <z_add_timeout+0x126>
	__asm__ volatile(
   20b28:	f38b 8811 	msr	BASEPRI, fp
   20b2c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   20b30:	2301      	movs	r3, #1
   20b32:	2b00      	cmp	r3, #0
   20b34:	d156      	bne.n	20be4 <z_add_timeout+0x140>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   20b36:	f06f 0301 	mvn.w	r3, #1
   20b3a:	ebb3 0804 	subs.w	r8, r3, r4
   20b3e:	f04f 30ff 	mov.w	r0, #4294967295
   20b42:	eb60 0905 	sbc.w	r9, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   20b46:	f1b8 0f00 	cmp.w	r8, #0
   20b4a:	f179 0300 	sbcs.w	r3, r9, #0
   20b4e:	dbc4      	blt.n	20ada <z_add_timeout+0x36>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   20b50:	4a26      	ldr	r2, [pc, #152]	; (20bec <z_add_timeout+0x148>)
   20b52:	6813      	ldr	r3, [r2, #0]
   20b54:	6852      	ldr	r2, [r2, #4]
   20b56:	18e3      	adds	r3, r4, r3
   20b58:	eb45 0202 	adc.w	r2, r5, r2
   20b5c:	f06f 0101 	mvn.w	r1, #1
   20b60:	1ace      	subs	r6, r1, r3
   20b62:	eb60 0702 	sbc.w	r7, r0, r2
			to->dticks = MAX(1, ticks);
   20b66:	4632      	mov	r2, r6
   20b68:	463b      	mov	r3, r7
   20b6a:	2e01      	cmp	r6, #1
   20b6c:	f177 0100 	sbcs.w	r1, r7, #0
   20b70:	dbb0      	blt.n	20ad4 <z_add_timeout+0x30>
   20b72:	f8ca 2010 	str.w	r2, [sl, #16]
   20b76:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
   20b7a:	f7ff ff4b 	bl	20a14 <first>
   20b7e:	4684      	mov	ip, r0
   20b80:	f1bc 0f00 	cmp.w	ip, #0
   20b84:	d0c9      	beq.n	20b1a <z_add_timeout+0x76>
			if (t->dticks > to->dticks) {
   20b86:	e9dc 0104 	ldrd	r0, r1, [ip, #16]
   20b8a:	e9da 2304 	ldrd	r2, r3, [sl, #16]
   20b8e:	e9cd 2300 	strd	r2, r3, [sp]
   20b92:	4282      	cmp	r2, r0
   20b94:	418b      	sbcs	r3, r1
   20b96:	dbad      	blt.n	20af4 <z_add_timeout+0x50>
			to->dticks -= t->dticks;
   20b98:	9b00      	ldr	r3, [sp, #0]
   20b9a:	1a1a      	subs	r2, r3, r0
   20b9c:	9b01      	ldr	r3, [sp, #4]
   20b9e:	eb63 0301 	sbc.w	r3, r3, r1
   20ba2:	f8ca 2010 	str.w	r2, [sl, #16]
   20ba6:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
   20baa:	4660      	mov	r0, ip
   20bac:	f7ff ff3c 	bl	20a28 <next>
   20bb0:	4684      	mov	ip, r0
   20bb2:	e7e5      	b.n	20b80 <z_add_timeout+0xdc>
	sys_dnode_t *const tail = list->tail;
   20bb4:	4b0e      	ldr	r3, [pc, #56]	; (20bf0 <z_add_timeout+0x14c>)
   20bb6:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   20bb8:	f8ca 3000 	str.w	r3, [sl]
	node->prev = tail;
   20bbc:	f8ca 2004 	str.w	r2, [sl, #4]
	tail->next = node;
   20bc0:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   20bc4:	f8c3 a004 	str.w	sl, [r3, #4]
}
   20bc8:	e7aa      	b.n	20b20 <z_add_timeout+0x7c>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   20bca:	f7ff ff45 	bl	20a58 <next_timeout>

			if (next_time == 0 ||
   20bce:	4603      	mov	r3, r0
   20bd0:	b118      	cbz	r0, 20bda <z_add_timeout+0x136>
			    _current_cpu->slice_ticks != next_time) {
   20bd2:	4a08      	ldr	r2, [pc, #32]	; (20bf4 <z_add_timeout+0x150>)
   20bd4:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
   20bd6:	4282      	cmp	r2, r0
   20bd8:	d0a6      	beq.n	20b28 <z_add_timeout+0x84>
				sys_clock_set_timeout(next_time, false);
   20bda:	2100      	movs	r1, #0
   20bdc:	4618      	mov	r0, r3
   20bde:	f7f1 fee7 	bl	129b0 <sys_clock_set_timeout>
   20be2:	e7a1      	b.n	20b28 <z_add_timeout+0x84>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   20be4:	b003      	add	sp, #12
   20be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20bea:	bf00      	nop
   20bec:	200023e0 	.word	0x200023e0
   20bf0:	20000658 	.word	0x20000658
   20bf4:	20003938 	.word	0x20003938

00020bf8 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   20bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20bfa:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   20bfc:	f7ff fc78 	bl	204f0 <z_time_slice>
	__asm__ volatile(
   20c00:	f04f 0340 	mov.w	r3, #64	; 0x40
   20c04:	f3ef 8511 	mrs	r5, BASEPRI
   20c08:	f383 8811 	msr	BASEPRI, r3
   20c0c:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   20c10:	4b28      	ldr	r3, [pc, #160]	; (20cb4 <sys_clock_announce+0xbc>)
   20c12:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   20c14:	f7ff fefe 	bl	20a14 <first>
   20c18:	4604      	mov	r4, r0
   20c1a:	b350      	cbz	r0, 20c72 <sys_clock_announce+0x7a>
   20c1c:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   20c20:	4b24      	ldr	r3, [pc, #144]	; (20cb4 <sys_clock_announce+0xbc>)
   20c22:	681b      	ldr	r3, [r3, #0]
   20c24:	17d9      	asrs	r1, r3, #31
   20c26:	42b3      	cmp	r3, r6
   20c28:	eb71 0207 	sbcs.w	r2, r1, r7
   20c2c:	db21      	blt.n	20c72 <sys_clock_announce+0x7a>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   20c2e:	4a22      	ldr	r2, [pc, #136]	; (20cb8 <sys_clock_announce+0xc0>)
   20c30:	e9d2 0100 	ldrd	r0, r1, [r2]
   20c34:	1980      	adds	r0, r0, r6
   20c36:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
   20c3a:	e9c2 0100 	strd	r0, r1, [r2]
		announce_remaining -= dt;
   20c3e:	1b9b      	subs	r3, r3, r6
   20c40:	4a1c      	ldr	r2, [pc, #112]	; (20cb4 <sys_clock_announce+0xbc>)
   20c42:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
   20c44:	2200      	movs	r2, #0
   20c46:	2300      	movs	r3, #0
   20c48:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   20c4c:	4620      	mov	r0, r4
   20c4e:	f008 fe5e 	bl	2990e <remove_timeout>
	__asm__ volatile(
   20c52:	f385 8811 	msr	BASEPRI, r5
   20c56:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   20c5a:	68a3      	ldr	r3, [r4, #8]
   20c5c:	4620      	mov	r0, r4
   20c5e:	4798      	blx	r3
	__asm__ volatile(
   20c60:	f04f 0340 	mov.w	r3, #64	; 0x40
   20c64:	f3ef 8511 	mrs	r5, BASEPRI
   20c68:	f383 8811 	msr	BASEPRI, r3
   20c6c:	f3bf 8f6f 	isb	sy
   20c70:	e7d0      	b.n	20c14 <sys_clock_announce+0x1c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
   20c72:	b144      	cbz	r4, 20c86 <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
   20c74:	4b0f      	ldr	r3, [pc, #60]	; (20cb4 <sys_clock_announce+0xbc>)
   20c76:	6819      	ldr	r1, [r3, #0]
   20c78:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   20c7c:	1a52      	subs	r2, r2, r1
   20c7e:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   20c82:	e9c4 2304 	strd	r2, r3, [r4, #16]
	}

	curr_tick += announce_remaining;
   20c86:	480c      	ldr	r0, [pc, #48]	; (20cb8 <sys_clock_announce+0xc0>)
   20c88:	490a      	ldr	r1, [pc, #40]	; (20cb4 <sys_clock_announce+0xbc>)
   20c8a:	680c      	ldr	r4, [r1, #0]
   20c8c:	e9d0 2300 	ldrd	r2, r3, [r0]
   20c90:	1912      	adds	r2, r2, r4
   20c92:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
   20c96:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
   20c9a:	2400      	movs	r4, #0
   20c9c:	600c      	str	r4, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
   20c9e:	f7ff fedb 	bl	20a58 <next_timeout>
   20ca2:	4621      	mov	r1, r4
   20ca4:	f7f1 fe84 	bl	129b0 <sys_clock_set_timeout>
	__asm__ volatile(
   20ca8:	f385 8811 	msr	BASEPRI, r5
   20cac:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   20cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20cb2:	bf00      	nop
   20cb4:	20003980 	.word	0x20003980
   20cb8:	200023e0 	.word	0x200023e0

00020cbc <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   20cbc:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   20cbe:	2100      	movs	r1, #0
	__asm__ volatile(
   20cc0:	f04f 0340 	mov.w	r3, #64	; 0x40
   20cc4:	f3ef 8411 	mrs	r4, BASEPRI
   20cc8:	f383 8811 	msr	BASEPRI, r3
   20ccc:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
   20cd0:	2200      	movs	r2, #0
   20cd2:	2300      	movs	r3, #0
	LOCKED(&timeout_lock) {
   20cd4:	b969      	cbnz	r1, 20cf2 <sys_clock_tick_get+0x36>
		t = curr_tick + sys_clock_elapsed();
   20cd6:	f7f1 fe9b 	bl	12a10 <sys_clock_elapsed>
   20cda:	4b07      	ldr	r3, [pc, #28]	; (20cf8 <sys_clock_tick_get+0x3c>)
   20cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
   20ce0:	1812      	adds	r2, r2, r0
   20ce2:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   20ce6:	f384 8811 	msr	BASEPRI, r4
   20cea:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   20cee:	2101      	movs	r1, #1
   20cf0:	e7f0      	b.n	20cd4 <sys_clock_tick_get+0x18>
	}
	return t;
}
   20cf2:	4610      	mov	r0, r2
   20cf4:	4619      	mov	r1, r3
   20cf6:	bd10      	pop	{r4, pc}
   20cf8:	200023e0 	.word	0x200023e0

00020cfc <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   20cfc:	b510      	push	{r4, lr}
   20cfe:	4604      	mov	r4, r0

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   20d00:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   20d04:	ea52 0103 	orrs.w	r1, r2, r3
   20d08:	d005      	beq.n	20d16 <z_timer_expiration_handler+0x1a>
   20d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
   20d0e:	bf08      	it	eq
   20d10:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   20d14:	d116      	bne.n	20d44 <z_timer_expiration_handler+0x48>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   20d16:	6b23      	ldr	r3, [r4, #48]	; 0x30
   20d18:	3301      	adds	r3, #1
   20d1a:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   20d1c:	6a23      	ldr	r3, [r4, #32]
   20d1e:	b10b      	cbz	r3, 20d24 <z_timer_expiration_handler+0x28>
		timer->expiry_fn(timer);
   20d20:	4620      	mov	r0, r4
   20d22:	4798      	blx	r3
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   20d24:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
   20d28:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20d2a:	42a3      	cmp	r3, r4
   20d2c:	d009      	beq.n	20d42 <z_timer_expiration_handler+0x46>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   20d2e:	b144      	cbz	r4, 20d42 <z_timer_expiration_handler+0x46>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   20d30:	4620      	mov	r0, r4
   20d32:	f008 fc51 	bl	295d8 <z_unpend_thread_no_timeout>
   20d36:	2300      	movs	r3, #0
   20d38:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0

	arch_thread_return_value_set(thread, 0);

	z_ready_thread(thread);
   20d3c:	4620      	mov	r0, r4
   20d3e:	f008 fcfc 	bl	2973a <z_ready_thread>
}
   20d42:	bd10      	pop	{r4, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   20d44:	4901      	ldr	r1, [pc, #4]	; (20d4c <z_timer_expiration_handler+0x50>)
   20d46:	f7ff fead 	bl	20aa4 <z_add_timeout>
   20d4a:	e7e4      	b.n	20d16 <z_timer_expiration_handler+0x1a>
   20d4c:	00020cfd 	.word	0x00020cfd

00020d50 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   20d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20d54:	b087      	sub	sp, #28
   20d56:	4614      	mov	r4, r2
   20d58:	461d      	mov	r5, r3
   20d5a:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   20d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
   20d62:	bf08      	it	eq
   20d64:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   20d68:	d035      	beq.n	20dd6 <z_impl_k_timer_start+0x86>
   20d6a:	4606      	mov	r6, r0
   20d6c:	4613      	mov	r3, r2
   20d6e:	462a      	mov	r2, r5
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   20d70:	f1b9 3fff 	cmp.w	r9, #4294967295
   20d74:	bf08      	it	eq
   20d76:	f1b8 3fff 	cmpeq.w	r8, #4294967295
   20d7a:	d012      	beq.n	20da2 <z_impl_k_timer_start+0x52>
   20d7c:	ea58 0109 	orrs.w	r1, r8, r9
   20d80:	d00f      	beq.n	20da2 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
   20d82:	f06f 0701 	mvn.w	r7, #1
   20d86:	ebb7 0708 	subs.w	r7, r7, r8
   20d8a:	9702      	str	r7, [sp, #8]
   20d8c:	f04f 31ff 	mov.w	r1, #4294967295
   20d90:	eb61 0709 	sbc.w	r7, r1, r9
   20d94:	9703      	str	r7, [sp, #12]
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   20d96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   20d9a:	2800      	cmp	r0, #0
   20d9c:	f171 0100 	sbcs.w	r1, r1, #0
   20da0:	db1c      	blt.n	20ddc <z_impl_k_timer_start+0x8c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   20da2:	f06f 0101 	mvn.w	r1, #1
   20da6:	ebb1 0a03 	subs.w	sl, r1, r3
   20daa:	f04f 31ff 	mov.w	r1, #4294967295
   20dae:	eb61 0b02 	sbc.w	fp, r1, r2
   20db2:	f1ba 0f00 	cmp.w	sl, #0
   20db6:	f17b 0100 	sbcs.w	r1, fp, #0
   20dba:	db23      	blt.n	20e04 <z_impl_k_timer_start+0xb4>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
   20dbc:	4630      	mov	r0, r6
   20dbe:	f008 fdbd 	bl	2993c <z_abort_timeout>
	timer->period = period;
   20dc2:	e9c6 890a 	strd	r8, r9, [r6, #40]	; 0x28
	timer->status = 0U;
   20dc6:	2300      	movs	r3, #0
   20dc8:	6333      	str	r3, [r6, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   20dca:	4622      	mov	r2, r4
   20dcc:	462b      	mov	r3, r5
   20dce:	4917      	ldr	r1, [pc, #92]	; (20e2c <z_impl_k_timer_start+0xdc>)
   20dd0:	4630      	mov	r0, r6
   20dd2:	f7ff fe67 	bl	20aa4 <z_add_timeout>
		     duration);
}
   20dd6:	b007      	add	sp, #28
   20dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		period.ticks = MAX(period.ticks - 1, 1);
   20ddc:	f118 31ff 	adds.w	r1, r8, #4294967295
   20de0:	9104      	str	r1, [sp, #16]
   20de2:	f149 31ff 	adc.w	r1, r9, #4294967295
   20de6:	9105      	str	r1, [sp, #20]
   20de8:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
   20dec:	4638      	mov	r0, r7
   20dee:	4641      	mov	r1, r8
   20df0:	2f01      	cmp	r7, #1
   20df2:	f178 0700 	sbcs.w	r7, r8, #0
   20df6:	db02      	blt.n	20dfe <z_impl_k_timer_start+0xae>
   20df8:	4680      	mov	r8, r0
   20dfa:	4689      	mov	r9, r1
   20dfc:	e7d1      	b.n	20da2 <z_impl_k_timer_start+0x52>
   20dfe:	2001      	movs	r0, #1
   20e00:	2100      	movs	r1, #0
   20e02:	e7f9      	b.n	20df8 <z_impl_k_timer_start+0xa8>
		duration.ticks = MAX(duration.ticks - 1, 0);
   20e04:	f113 33ff 	adds.w	r3, r3, #4294967295
   20e08:	9300      	str	r3, [sp, #0]
   20e0a:	f142 33ff 	adc.w	r3, r2, #4294967295
   20e0e:	9301      	str	r3, [sp, #4]
   20e10:	e9dd 0100 	ldrd	r0, r1, [sp]
   20e14:	4602      	mov	r2, r0
   20e16:	460b      	mov	r3, r1
   20e18:	2800      	cmp	r0, #0
   20e1a:	f171 0100 	sbcs.w	r1, r1, #0
   20e1e:	db02      	blt.n	20e26 <z_impl_k_timer_start+0xd6>
   20e20:	4614      	mov	r4, r2
   20e22:	461d      	mov	r5, r3
   20e24:	e7ca      	b.n	20dbc <z_impl_k_timer_start+0x6c>
   20e26:	2200      	movs	r2, #0
   20e28:	4613      	mov	r3, r2
   20e2a:	e7f9      	b.n	20e20 <z_impl_k_timer_start+0xd0>
   20e2c:	00020cfd 	.word	0x00020cfd

00020e30 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   20e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20e34:	b08d      	sub	sp, #52	; 0x34
   20e36:	4605      	mov	r5, r0
   20e38:	9107      	str	r1, [sp, #28]
   20e3a:	9202      	str	r2, [sp, #8]
   20e3c:	9303      	str	r3, [sp, #12]
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   20e3e:	4ba4      	ldr	r3, [pc, #656]	; (210d0 <z_impl_k_poll+0x2a0>)
   20e40:	f8d3 9008 	ldr.w	r9, [r3, #8]
   20e44:	f109 0760 	add.w	r7, r9, #96	; 0x60

	poller->is_polling = true;
   20e48:	2301      	movs	r3, #1
   20e4a:	f889 3060 	strb.w	r3, [r9, #96]	; 0x60
	poller->mode = MODE_POLL;
   20e4e:	f889 3061 	strb.w	r3, [r9, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   20e52:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   20e56:	4613      	mov	r3, r2
   20e58:	430b      	orrs	r3, r1
   20e5a:	bf0c      	ite	eq
   20e5c:	2301      	moveq	r3, #1
   20e5e:	2300      	movne	r3, #0
   20e60:	9306      	str	r3, [sp, #24]
	for (int ii = 0; ii < num_events; ii++) {
   20e62:	2600      	movs	r6, #0
	int events_registered = 0;
   20e64:	46b3      	mov	fp, r6
	for (int ii = 0; ii < num_events; ii++) {
   20e66:	e02e      	b.n	20ec6 <z_impl_k_poll+0x96>
		if (k_sem_count_get(event->sem) > 0U) {
   20e68:	6923      	ldr	r3, [r4, #16]
	return sem->count;
   20e6a:	689b      	ldr	r3, [r3, #8]
   20e6c:	b1c3      	cbz	r3, 20ea0 <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   20e6e:	2302      	movs	r3, #2
   20e70:	9305      	str	r3, [sp, #20]
			return true;
   20e72:	2301      	movs	r3, #1
   20e74:	e014      	b.n	20ea0 <z_impl_k_poll+0x70>
		if (!k_queue_is_empty(event->queue)) {
   20e76:	6923      	ldr	r3, [r4, #16]
	return list->head;
   20e78:	681b      	ldr	r3, [r3, #0]
   20e7a:	b18b      	cbz	r3, 20ea0 <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   20e7c:	2304      	movs	r3, #4
   20e7e:	9305      	str	r3, [sp, #20]
			return true;
   20e80:	2301      	movs	r3, #1
   20e82:	e00d      	b.n	20ea0 <z_impl_k_poll+0x70>
		if (event->signal->signaled != 0U) {
   20e84:	6923      	ldr	r3, [r4, #16]
   20e86:	689b      	ldr	r3, [r3, #8]
   20e88:	b153      	cbz	r3, 20ea0 <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_SIGNALED;
   20e8a:	2301      	movs	r3, #1
   20e8c:	9305      	str	r3, [sp, #20]
   20e8e:	e007      	b.n	20ea0 <z_impl_k_poll+0x70>
		if (event->msgq->used_msgs > 0) {
   20e90:	6923      	ldr	r3, [r4, #16]
   20e92:	6a1b      	ldr	r3, [r3, #32]
   20e94:	b123      	cbz	r3, 20ea0 <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   20e96:	2310      	movs	r3, #16
   20e98:	9305      	str	r3, [sp, #20]
			return true;
   20e9a:	2301      	movs	r3, #1
   20e9c:	e000      	b.n	20ea0 <z_impl_k_poll+0x70>
	switch (event->type) {
   20e9e:	2300      	movs	r3, #0
		if (is_condition_met(&events[ii], &state)) {
   20ea0:	2b00      	cmp	r3, #0
   20ea2:	d03d      	beq.n	20f20 <z_impl_k_poll+0xf0>
	event->poller = NULL;
   20ea4:	2100      	movs	r1, #0
   20ea6:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   20ea8:	68e3      	ldr	r3, [r4, #12]
   20eaa:	f3c3 3245 	ubfx	r2, r3, #13, #6
   20eae:	9805      	ldr	r0, [sp, #20]
   20eb0:	4302      	orrs	r2, r0
   20eb2:	f362 3352 	bfi	r3, r2, #13, #6
   20eb6:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   20eb8:	7039      	strb	r1, [r7, #0]
   20eba:	9b08      	ldr	r3, [sp, #32]
   20ebc:	f383 8811 	msr	BASEPRI, r3
   20ec0:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   20ec4:	3601      	adds	r6, #1
   20ec6:	9b07      	ldr	r3, [sp, #28]
   20ec8:	42b3      	cmp	r3, r6
   20eca:	f340 81bf 	ble.w	2124c <z_impl_k_poll+0x41c>
	__asm__ volatile(
   20ece:	f04f 0340 	mov.w	r3, #64	; 0x40
   20ed2:	f3ef 8211 	mrs	r2, BASEPRI
   20ed6:	f383 8811 	msr	BASEPRI, r3
   20eda:	f3bf 8f6f 	isb	sy
   20ede:	9208      	str	r2, [sp, #32]
		if (is_condition_met(&events[ii], &state)) {
   20ee0:	eb06 0486 	add.w	r4, r6, r6, lsl #2
   20ee4:	00a3      	lsls	r3, r4, #2
   20ee6:	9309      	str	r3, [sp, #36]	; 0x24
   20ee8:	eb05 0484 	add.w	r4, r5, r4, lsl #2
	switch (event->type) {
   20eec:	7b63      	ldrb	r3, [r4, #13]
   20eee:	f003 031f 	and.w	r3, r3, #31
   20ef2:	3b01      	subs	r3, #1
   20ef4:	2b07      	cmp	r3, #7
   20ef6:	d8d2      	bhi.n	20e9e <z_impl_k_poll+0x6e>
   20ef8:	a201      	add	r2, pc, #4	; (adr r2, 20f00 <z_impl_k_poll+0xd0>)
   20efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   20efe:	bf00      	nop
   20f00:	00020e85 	.word	0x00020e85
   20f04:	00020e69 	.word	0x00020e69
   20f08:	00020e9f 	.word	0x00020e9f
   20f0c:	00020e77 	.word	0x00020e77
   20f10:	00020e9f 	.word	0x00020e9f
   20f14:	00020e9f 	.word	0x00020e9f
   20f18:	00020e9f 	.word	0x00020e9f
   20f1c:	00020e91 	.word	0x00020e91
		} else if (!just_check && poller->is_polling) {
   20f20:	9b06      	ldr	r3, [sp, #24]
   20f22:	2b00      	cmp	r3, #0
   20f24:	d1c9      	bne.n	20eba <z_impl_k_poll+0x8a>
   20f26:	783b      	ldrb	r3, [r7, #0]
   20f28:	2b00      	cmp	r3, #0
   20f2a:	d0c6      	beq.n	20eba <z_impl_k_poll+0x8a>
	switch (event->type) {
   20f2c:	7b63      	ldrb	r3, [r4, #13]
   20f2e:	f003 031f 	and.w	r3, r3, #31
   20f32:	3b01      	subs	r3, #1
   20f34:	2b07      	cmp	r3, #7
   20f36:	d846      	bhi.n	20fc6 <z_impl_k_poll+0x196>
   20f38:	e8df f013 	tbh	[pc, r3, lsl #1]
   20f3c:	000800cc 	.word	0x000800cc
   20f40:	006a0045 	.word	0x006a0045
   20f44:	00450045 	.word	0x00450045
   20f48:	01290045 	.word	0x01290045
		add_event(&event->sem->poll_events, event, poller);
   20f4c:	f8d4 a010 	ldr.w	sl, [r4, #16]
   20f50:	f10a 0810 	add.w	r8, sl, #16
	return list->head == list;
   20f54:	f8da 3010 	ldr.w	r3, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   20f58:	4598      	cmp	r8, r3
   20f5a:	d02b      	beq.n	20fb4 <z_impl_k_poll+0x184>
   20f5c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   20f60:	b343      	cbz	r3, 20fb4 <z_impl_k_poll+0x184>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   20f62:	6898      	ldr	r0, [r3, #8]
   20f64:	f008 fdaa 	bl	29abc <poller_thread>
   20f68:	900b      	str	r0, [sp, #44]	; 0x2c
   20f6a:	4638      	mov	r0, r7
   20f6c:	f008 fda6 	bl	29abc <poller_thread>
   20f70:	4601      	mov	r1, r0
   20f72:	900a      	str	r0, [sp, #40]	; 0x28
   20f74:	980b      	ldr	r0, [sp, #44]	; 0x2c
   20f76:	f008 fb25 	bl	295c4 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   20f7a:	2800      	cmp	r0, #0
   20f7c:	dc1a      	bgt.n	20fb4 <z_impl_k_poll+0x184>
	return list->head == list;
   20f7e:	f8da a010 	ldr.w	sl, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20f82:	45d0      	cmp	r8, sl
   20f84:	d02f      	beq.n	20fe6 <z_impl_k_poll+0x1b6>
   20f86:	4653      	mov	r3, sl
   20f88:	46a2      	mov	sl, r4
   20f8a:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   20f8c:	b38c      	cbz	r4, 20ff2 <z_impl_k_poll+0x1c2>
		if (z_sched_prio_cmp(poller_thread(poller),
   20f8e:	68a0      	ldr	r0, [r4, #8]
   20f90:	f008 fd94 	bl	29abc <poller_thread>
   20f94:	4601      	mov	r1, r0
   20f96:	980a      	ldr	r0, [sp, #40]	; 0x28
   20f98:	f008 fb14 	bl	295c4 <z_sched_prio_cmp>
   20f9c:	2800      	cmp	r0, #0
   20f9e:	dc16      	bgt.n	20fce <z_impl_k_poll+0x19e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   20fa0:	b34c      	cbz	r4, 20ff6 <z_impl_k_poll+0x1c6>
	return (node == list->tail) ? NULL : node->next;
   20fa2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   20fa6:	429c      	cmp	r4, r3
   20fa8:	d030      	beq.n	2100c <z_impl_k_poll+0x1dc>
   20faa:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   20fac:	2c00      	cmp	r4, #0
   20fae:	d1ed      	bne.n	20f8c <z_impl_k_poll+0x15c>
   20fb0:	4654      	mov	r4, sl
   20fb2:	e021      	b.n	20ff8 <z_impl_k_poll+0x1c8>
	sys_dnode_t *const tail = list->tail;
   20fb4:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   20fb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   20fba:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   20fbe:	6063      	str	r3, [r4, #4]
	tail->next = node;
   20fc0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   20fc2:	f8c8 4004 	str.w	r4, [r8, #4]
	event->poller = poller;
   20fc6:	60a7      	str	r7, [r4, #8]
			events_registered += 1;
   20fc8:	f10b 0b01 	add.w	fp, fp, #1
   20fcc:	e775      	b.n	20eba <z_impl_k_poll+0x8a>
   20fce:	4623      	mov	r3, r4
   20fd0:	4654      	mov	r4, sl
   20fd2:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   20fd4:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   20fd6:	6063      	str	r3, [r4, #4]
	node->next = successor;
   20fd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   20fda:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   20fde:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   20fe0:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   20fe4:	e7ef      	b.n	20fc6 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   20fe6:	f04f 0a00 	mov.w	sl, #0
   20fea:	4653      	mov	r3, sl
   20fec:	46a2      	mov	sl, r4
   20fee:	461c      	mov	r4, r3
   20ff0:	e7cc      	b.n	20f8c <z_impl_k_poll+0x15c>
   20ff2:	4654      	mov	r4, sl
   20ff4:	e000      	b.n	20ff8 <z_impl_k_poll+0x1c8>
   20ff6:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   20ff8:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   20ffc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   20ffe:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   21002:	6063      	str	r3, [r4, #4]
	tail->next = node;
   21004:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21006:	f8c8 4004 	str.w	r4, [r8, #4]
}
   2100a:	e7dc      	b.n	20fc6 <z_impl_k_poll+0x196>
   2100c:	4654      	mov	r4, sl
   2100e:	e7f3      	b.n	20ff8 <z_impl_k_poll+0x1c8>
		add_event(&event->queue->poll_events, event, poller);
   21010:	f8d4 a010 	ldr.w	sl, [r4, #16]
   21014:	f10a 0810 	add.w	r8, sl, #16
	return list->head == list;
   21018:	f8da 3010 	ldr.w	r3, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2101c:	4598      	cmp	r8, r3
   2101e:	d02b      	beq.n	21078 <z_impl_k_poll+0x248>
   21020:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   21024:	b343      	cbz	r3, 21078 <z_impl_k_poll+0x248>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   21026:	6898      	ldr	r0, [r3, #8]
   21028:	f008 fd48 	bl	29abc <poller_thread>
   2102c:	900b      	str	r0, [sp, #44]	; 0x2c
   2102e:	4638      	mov	r0, r7
   21030:	f008 fd44 	bl	29abc <poller_thread>
   21034:	4601      	mov	r1, r0
   21036:	900a      	str	r0, [sp, #40]	; 0x28
   21038:	980b      	ldr	r0, [sp, #44]	; 0x2c
   2103a:	f008 fac3 	bl	295c4 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2103e:	2800      	cmp	r0, #0
   21040:	dc1a      	bgt.n	21078 <z_impl_k_poll+0x248>
	return list->head == list;
   21042:	f8da a010 	ldr.w	sl, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21046:	45d0      	cmp	r8, sl
   21048:	d02c      	beq.n	210a4 <z_impl_k_poll+0x274>
   2104a:	4653      	mov	r3, sl
   2104c:	46a2      	mov	sl, r4
   2104e:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   21050:	b374      	cbz	r4, 210b0 <z_impl_k_poll+0x280>
		if (z_sched_prio_cmp(poller_thread(poller),
   21052:	68a0      	ldr	r0, [r4, #8]
   21054:	f008 fd32 	bl	29abc <poller_thread>
   21058:	4601      	mov	r1, r0
   2105a:	980a      	ldr	r0, [sp, #40]	; 0x28
   2105c:	f008 fab2 	bl	295c4 <z_sched_prio_cmp>
   21060:	2800      	cmp	r0, #0
   21062:	dc13      	bgt.n	2108c <z_impl_k_poll+0x25c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   21064:	b334      	cbz	r4, 210b4 <z_impl_k_poll+0x284>
	return (node == list->tail) ? NULL : node->next;
   21066:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2106a:	429c      	cmp	r4, r3
   2106c:	d02d      	beq.n	210ca <z_impl_k_poll+0x29a>
   2106e:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   21070:	2c00      	cmp	r4, #0
   21072:	d1ed      	bne.n	21050 <z_impl_k_poll+0x220>
   21074:	4654      	mov	r4, sl
   21076:	e01e      	b.n	210b6 <z_impl_k_poll+0x286>
	sys_dnode_t *const tail = list->tail;
   21078:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   2107c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2107e:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   21082:	6063      	str	r3, [r4, #4]
	tail->next = node;
   21084:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21086:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   2108a:	e79c      	b.n	20fc6 <z_impl_k_poll+0x196>
   2108c:	4623      	mov	r3, r4
   2108e:	4654      	mov	r4, sl
   21090:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   21092:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   21094:	6063      	str	r3, [r4, #4]
	node->next = successor;
   21096:	9a09      	ldr	r2, [sp, #36]	; 0x24
   21098:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   2109c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   2109e:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   210a2:	e790      	b.n	20fc6 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   210a4:	f04f 0a00 	mov.w	sl, #0
   210a8:	4653      	mov	r3, sl
   210aa:	46a2      	mov	sl, r4
   210ac:	461c      	mov	r4, r3
   210ae:	e7cf      	b.n	21050 <z_impl_k_poll+0x220>
   210b0:	4654      	mov	r4, sl
   210b2:	e000      	b.n	210b6 <z_impl_k_poll+0x286>
   210b4:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   210b6:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   210ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
   210bc:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   210c0:	6063      	str	r3, [r4, #4]
	tail->next = node;
   210c2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   210c4:	f8c8 4004 	str.w	r4, [r8, #4]
}
   210c8:	e77d      	b.n	20fc6 <z_impl_k_poll+0x196>
   210ca:	4654      	mov	r4, sl
   210cc:	e7f3      	b.n	210b6 <z_impl_k_poll+0x286>
   210ce:	bf00      	nop
   210d0:	20003938 	.word	0x20003938
		add_event(&event->signal->poll_events, event, poller);
   210d4:	f8d4 8010 	ldr.w	r8, [r4, #16]
	return list->head == list;
   210d8:	f8d8 3000 	ldr.w	r3, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   210dc:	4598      	cmp	r8, r3
   210de:	d02b      	beq.n	21138 <z_impl_k_poll+0x308>
   210e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   210e4:	b343      	cbz	r3, 21138 <z_impl_k_poll+0x308>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   210e6:	6898      	ldr	r0, [r3, #8]
   210e8:	f008 fce8 	bl	29abc <poller_thread>
   210ec:	4682      	mov	sl, r0
   210ee:	4638      	mov	r0, r7
   210f0:	f008 fce4 	bl	29abc <poller_thread>
   210f4:	4601      	mov	r1, r0
   210f6:	900a      	str	r0, [sp, #40]	; 0x28
   210f8:	4650      	mov	r0, sl
   210fa:	f008 fa63 	bl	295c4 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   210fe:	2800      	cmp	r0, #0
   21100:	dc1a      	bgt.n	21138 <z_impl_k_poll+0x308>
	return list->head == list;
   21102:	f8d8 a000 	ldr.w	sl, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21106:	45d0      	cmp	r8, sl
   21108:	d02c      	beq.n	21164 <z_impl_k_poll+0x334>
   2110a:	4653      	mov	r3, sl
   2110c:	46a2      	mov	sl, r4
   2110e:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   21110:	b374      	cbz	r4, 21170 <z_impl_k_poll+0x340>
		if (z_sched_prio_cmp(poller_thread(poller),
   21112:	68a0      	ldr	r0, [r4, #8]
   21114:	f008 fcd2 	bl	29abc <poller_thread>
   21118:	4601      	mov	r1, r0
   2111a:	980a      	ldr	r0, [sp, #40]	; 0x28
   2111c:	f008 fa52 	bl	295c4 <z_sched_prio_cmp>
   21120:	2800      	cmp	r0, #0
   21122:	dc13      	bgt.n	2114c <z_impl_k_poll+0x31c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   21124:	b334      	cbz	r4, 21174 <z_impl_k_poll+0x344>
	return (node == list->tail) ? NULL : node->next;
   21126:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2112a:	429c      	cmp	r4, r3
   2112c:	d02d      	beq.n	2118a <z_impl_k_poll+0x35a>
   2112e:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   21130:	2c00      	cmp	r4, #0
   21132:	d1ed      	bne.n	21110 <z_impl_k_poll+0x2e0>
   21134:	4654      	mov	r4, sl
   21136:	e01e      	b.n	21176 <z_impl_k_poll+0x346>
	sys_dnode_t *const tail = list->tail;
   21138:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   2113c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2113e:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   21142:	6063      	str	r3, [r4, #4]
	tail->next = node;
   21144:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21146:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   2114a:	e73c      	b.n	20fc6 <z_impl_k_poll+0x196>
   2114c:	4623      	mov	r3, r4
   2114e:	4654      	mov	r4, sl
   21150:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   21152:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   21154:	6063      	str	r3, [r4, #4]
	node->next = successor;
   21156:	9a09      	ldr	r2, [sp, #36]	; 0x24
   21158:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   2115c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   2115e:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   21162:	e730      	b.n	20fc6 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   21164:	f04f 0a00 	mov.w	sl, #0
   21168:	4653      	mov	r3, sl
   2116a:	46a2      	mov	sl, r4
   2116c:	461c      	mov	r4, r3
   2116e:	e7cf      	b.n	21110 <z_impl_k_poll+0x2e0>
   21170:	4654      	mov	r4, sl
   21172:	e000      	b.n	21176 <z_impl_k_poll+0x346>
   21174:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   21176:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   2117a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2117c:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   21180:	6063      	str	r3, [r4, #4]
	tail->next = node;
   21182:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21184:	f8c8 4004 	str.w	r4, [r8, #4]
}
   21188:	e71d      	b.n	20fc6 <z_impl_k_poll+0x196>
   2118a:	4654      	mov	r4, sl
   2118c:	e7f3      	b.n	21176 <z_impl_k_poll+0x346>
		add_event(&event->msgq->poll_events, event, poller);
   2118e:	f8d4 a010 	ldr.w	sl, [r4, #16]
   21192:	f10a 0824 	add.w	r8, sl, #36	; 0x24
	return list->head == list;
   21196:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2119a:	4598      	cmp	r8, r3
   2119c:	d02b      	beq.n	211f6 <z_impl_k_poll+0x3c6>
   2119e:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   211a2:	b343      	cbz	r3, 211f6 <z_impl_k_poll+0x3c6>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   211a4:	6898      	ldr	r0, [r3, #8]
   211a6:	f008 fc89 	bl	29abc <poller_thread>
   211aa:	900b      	str	r0, [sp, #44]	; 0x2c
   211ac:	4638      	mov	r0, r7
   211ae:	f008 fc85 	bl	29abc <poller_thread>
   211b2:	4601      	mov	r1, r0
   211b4:	900a      	str	r0, [sp, #40]	; 0x28
   211b6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   211b8:	f008 fa04 	bl	295c4 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   211bc:	2800      	cmp	r0, #0
   211be:	dc1a      	bgt.n	211f6 <z_impl_k_poll+0x3c6>
	return list->head == list;
   211c0:	f8da a024 	ldr.w	sl, [sl, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   211c4:	45d0      	cmp	r8, sl
   211c6:	d02c      	beq.n	21222 <z_impl_k_poll+0x3f2>
   211c8:	4653      	mov	r3, sl
   211ca:	46a2      	mov	sl, r4
   211cc:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   211ce:	b374      	cbz	r4, 2122e <z_impl_k_poll+0x3fe>
		if (z_sched_prio_cmp(poller_thread(poller),
   211d0:	68a0      	ldr	r0, [r4, #8]
   211d2:	f008 fc73 	bl	29abc <poller_thread>
   211d6:	4601      	mov	r1, r0
   211d8:	980a      	ldr	r0, [sp, #40]	; 0x28
   211da:	f008 f9f3 	bl	295c4 <z_sched_prio_cmp>
   211de:	2800      	cmp	r0, #0
   211e0:	dc13      	bgt.n	2120a <z_impl_k_poll+0x3da>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   211e2:	b334      	cbz	r4, 21232 <z_impl_k_poll+0x402>
	return (node == list->tail) ? NULL : node->next;
   211e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   211e8:	429c      	cmp	r4, r3
   211ea:	d02d      	beq.n	21248 <z_impl_k_poll+0x418>
   211ec:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   211ee:	2c00      	cmp	r4, #0
   211f0:	d1ed      	bne.n	211ce <z_impl_k_poll+0x39e>
   211f2:	4654      	mov	r4, sl
   211f4:	e01e      	b.n	21234 <z_impl_k_poll+0x404>
	sys_dnode_t *const tail = list->tail;
   211f6:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   211fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
   211fc:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   21200:	6063      	str	r3, [r4, #4]
	tail->next = node;
   21202:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21204:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   21208:	e6dd      	b.n	20fc6 <z_impl_k_poll+0x196>
   2120a:	4623      	mov	r3, r4
   2120c:	4654      	mov	r4, sl
   2120e:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   21210:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   21212:	6063      	str	r3, [r4, #4]
	node->next = successor;
   21214:	9a09      	ldr	r2, [sp, #36]	; 0x24
   21216:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   2121a:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   2121c:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   21220:	e6d1      	b.n	20fc6 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   21222:	f04f 0a00 	mov.w	sl, #0
   21226:	4653      	mov	r3, sl
   21228:	46a2      	mov	sl, r4
   2122a:	461c      	mov	r4, r3
   2122c:	e7cf      	b.n	211ce <z_impl_k_poll+0x39e>
   2122e:	4654      	mov	r4, sl
   21230:	e000      	b.n	21234 <z_impl_k_poll+0x404>
   21232:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   21234:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   21238:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2123a:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   2123e:	6063      	str	r3, [r4, #4]
	tail->next = node;
   21240:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21242:	f8c8 4004 	str.w	r4, [r8, #4]
}
   21246:	e6be      	b.n	20fc6 <z_impl_k_poll+0x196>
   21248:	4654      	mov	r4, sl
   2124a:	e7f3      	b.n	21234 <z_impl_k_poll+0x404>
   2124c:	f04f 0340 	mov.w	r3, #64	; 0x40
   21250:	f3ef 8111 	mrs	r1, BASEPRI
   21254:	f383 8811 	msr	BASEPRI, r3
   21258:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   2125c:	f899 3060 	ldrb.w	r3, [r9, #96]	; 0x60
   21260:	b1cb      	cbz	r3, 21296 <z_impl_k_poll+0x466>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
   21262:	2300      	movs	r3, #0
   21264:	f889 3060 	strb.w	r3, [r9, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   21268:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   2126c:	4323      	orrs	r3, r4
   2126e:	d045      	beq.n	212fc <z_impl_k_poll+0x4cc>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   21270:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   21274:	e9cd 3400 	strd	r3, r4, [sp]
   21278:	4a3c      	ldr	r2, [pc, #240]	; (2136c <z_impl_k_poll+0x53c>)
   2127a:	483d      	ldr	r0, [pc, #244]	; (21370 <z_impl_k_poll+0x540>)
   2127c:	f7ff f878 	bl	20370 <z_pend_curr>
   21280:	f04f 0340 	mov.w	r3, #64	; 0x40
   21284:	f3ef 8c11 	mrs	ip, BASEPRI
   21288:	f383 8811 	msr	BASEPRI, r3
   2128c:	f3bf 8f6f 	isb	sy
   21290:	4661      	mov	r1, ip
	while (num_events--) {
   21292:	465b      	mov	r3, fp
   21294:	e04e      	b.n	21334 <z_impl_k_poll+0x504>
		clear_event_registrations(events, events_registered, key);
   21296:	4608      	mov	r0, r1
	while (num_events--) {
   21298:	465b      	mov	r3, fp
   2129a:	e014      	b.n	212c6 <z_impl_k_poll+0x496>
	return node->next != NULL;
   2129c:	59aa      	ldr	r2, [r5, r6]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   2129e:	b12a      	cbz	r2, 212ac <z_impl_k_poll+0x47c>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   212a0:	685c      	ldr	r4, [r3, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   212a2:	6022      	str	r2, [r4, #0]
	next->prev = prev;
   212a4:	6054      	str	r4, [r2, #4]
	node->next = NULL;
   212a6:	2200      	movs	r2, #0
   212a8:	51aa      	str	r2, [r5, r6]
	node->prev = NULL;
   212aa:	605a      	str	r2, [r3, #4]
	__asm__ volatile(
   212ac:	f380 8811 	msr	BASEPRI, r0
   212b0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   212b4:	f04f 0340 	mov.w	r3, #64	; 0x40
   212b8:	f3ef 8011 	mrs	r0, BASEPRI
   212bc:	f383 8811 	msr	BASEPRI, r3
   212c0:	f3bf 8f6f 	isb	sy
	while (num_events--) {
   212c4:	463b      	mov	r3, r7
   212c6:	1e5f      	subs	r7, r3, #1
   212c8:	b193      	cbz	r3, 212f0 <z_impl_k_poll+0x4c0>
		clear_event_registration(&events[num_events]);
   212ca:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   212ce:	009e      	lsls	r6, r3, #2
   212d0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
   212d4:	2200      	movs	r2, #0
   212d6:	609a      	str	r2, [r3, #8]
	switch (event->type) {
   212d8:	7b5a      	ldrb	r2, [r3, #13]
   212da:	f002 021f 	and.w	r2, r2, #31
   212de:	2a08      	cmp	r2, #8
   212e0:	d8e4      	bhi.n	212ac <z_impl_k_poll+0x47c>
   212e2:	2401      	movs	r4, #1
   212e4:	fa04 f202 	lsl.w	r2, r4, r2
   212e8:	f412 7f8b 	tst.w	r2, #278	; 0x116
   212ec:	d0de      	beq.n	212ac <z_impl_k_poll+0x47c>
   212ee:	e7d5      	b.n	2129c <z_impl_k_poll+0x46c>
	__asm__ volatile(
   212f0:	f381 8811 	msr	BASEPRI, r1
   212f4:	f3bf 8f6f 	isb	sy
		return 0;
   212f8:	4618      	mov	r0, r3
   212fa:	e034      	b.n	21366 <z_impl_k_poll+0x536>
   212fc:	f381 8811 	msr	BASEPRI, r1
   21300:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   21304:	f06f 000a 	mvn.w	r0, #10
   21308:	e02d      	b.n	21366 <z_impl_k_poll+0x536>
	return node->next != NULL;
   2130a:	59ea      	ldr	r2, [r5, r7]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   2130c:	b12a      	cbz	r2, 2131a <z_impl_k_poll+0x4ea>
	sys_dnode_t *const prev = node->prev;
   2130e:	685e      	ldr	r6, [r3, #4]
	prev->next = next;
   21310:	6032      	str	r2, [r6, #0]
	next->prev = prev;
   21312:	6056      	str	r6, [r2, #4]
	node->next = NULL;
   21314:	2200      	movs	r2, #0
   21316:	51ea      	str	r2, [r5, r7]
	node->prev = NULL;
   21318:	605a      	str	r2, [r3, #4]
   2131a:	f381 8811 	msr	BASEPRI, r1
   2131e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   21322:	f04f 0340 	mov.w	r3, #64	; 0x40
   21326:	f3ef 8111 	mrs	r1, BASEPRI
   2132a:	f383 8811 	msr	BASEPRI, r3
   2132e:	f3bf 8f6f 	isb	sy
	while (num_events--) {
   21332:	4623      	mov	r3, r4
   21334:	1e5c      	subs	r4, r3, #1
   21336:	b193      	cbz	r3, 2135e <z_impl_k_poll+0x52e>
		clear_event_registration(&events[num_events]);
   21338:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   2133c:	009f      	lsls	r7, r3, #2
   2133e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
   21342:	2200      	movs	r2, #0
   21344:	609a      	str	r2, [r3, #8]
	switch (event->type) {
   21346:	7b5a      	ldrb	r2, [r3, #13]
   21348:	f002 021f 	and.w	r2, r2, #31
   2134c:	2a08      	cmp	r2, #8
   2134e:	d8e4      	bhi.n	2131a <z_impl_k_poll+0x4ea>
   21350:	2601      	movs	r6, #1
   21352:	fa06 f202 	lsl.w	r2, r6, r2
   21356:	f412 7f8b 	tst.w	r2, #278	; 0x116
   2135a:	d0de      	beq.n	2131a <z_impl_k_poll+0x4ea>
   2135c:	e7d5      	b.n	2130a <z_impl_k_poll+0x4da>
	__asm__ volatile(
   2135e:	f38c 8811 	msr	BASEPRI, ip
   21362:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   21366:	b00d      	add	sp, #52	; 0x34
   21368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2136c:	20000660 	.word	0x20000660
   21370:	20003984 	.word	0x20003984

00021374 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   21374:	b538      	push	{r3, r4, r5, lr}
   21376:	4603      	mov	r3, r0
	__asm__ volatile(
   21378:	f04f 0240 	mov.w	r2, #64	; 0x40
   2137c:	f3ef 8511 	mrs	r5, BASEPRI
   21380:	f382 8811 	msr	BASEPRI, r2
   21384:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   21388:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   2138a:	2201      	movs	r2, #1
   2138c:	6082      	str	r2, [r0, #8]
	return list->head == list;
   2138e:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   21390:	4283      	cmp	r3, r0
   21392:	d011      	beq.n	213b8 <z_impl_k_poll_signal_raise+0x44>
	sys_dnode_t *const prev = node->prev;
   21394:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   21396:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   21398:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2139a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2139c:	2300      	movs	r3, #0
   2139e:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   213a0:	6043      	str	r3, [r0, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&sig->poll_events);
	if (poll_event == NULL) {
   213a2:	b148      	cbz	r0, 213b8 <z_impl_k_poll_signal_raise+0x44>
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   213a4:	2101      	movs	r1, #1
   213a6:	f008 fbd9 	bl	29b5c <signal_poll_event>
   213aa:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   213ac:	4629      	mov	r1, r5
   213ae:	4805      	ldr	r0, [pc, #20]	; (213c4 <z_impl_k_poll_signal_raise+0x50>)
   213b0:	f7fe ff68 	bl	20284 <z_reschedule>
	return rc;
}
   213b4:	4620      	mov	r0, r4
   213b6:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   213b8:	f385 8811 	msr	BASEPRI, r5
   213bc:	f3bf 8f6f 	isb	sy
		return 0;
   213c0:	2400      	movs	r4, #0
   213c2:	e7f7      	b.n	213b4 <z_impl_k_poll_signal_raise+0x40>
   213c4:	20003984 	.word	0x20003984

000213c8 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   213c8:	b538      	push	{r3, r4, r5, lr}
   213ca:	4604      	mov	r4, r0
   213cc:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   213ce:	f007 fe61 	bl	29094 <k_is_in_isr>
   213d2:	b948      	cbnz	r0, 213e8 <z_thread_aligned_alloc+0x20>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   213d4:	4b05      	ldr	r3, [pc, #20]	; (213ec <z_thread_aligned_alloc+0x24>)
   213d6:	689b      	ldr	r3, [r3, #8]
   213d8:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
	}

	if (heap != NULL) {
   213dc:	b118      	cbz	r0, 213e6 <z_thread_aligned_alloc+0x1e>
		ret = z_heap_aligned_alloc(heap, align, size);
   213de:	462a      	mov	r2, r5
   213e0:	4621      	mov	r1, r4
   213e2:	f008 fc04 	bl	29bee <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   213e6:	bd38      	pop	{r3, r4, r5, pc}
		ret = NULL;
   213e8:	2000      	movs	r0, #0
	return ret;
   213ea:	e7fc      	b.n	213e6 <z_thread_aligned_alloc+0x1e>
   213ec:	20003938 	.word	0x20003938

000213f0 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
   213f0:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   213f2:	4a03      	ldr	r2, [pc, #12]	; (21400 <boot_banner+0x10>)
   213f4:	4903      	ldr	r1, [pc, #12]	; (21404 <boot_banner+0x14>)
   213f6:	4804      	ldr	r0, [pc, #16]	; (21408 <boot_banner+0x18>)
   213f8:	f000 f8c8 	bl	2158c <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   213fc:	bd08      	pop	{r3, pc}
   213fe:	bf00      	nop
   21400:	0002a1d4 	.word	0x0002a1d4
   21404:	0002d140 	.word	0x0002d140
   21408:	0002d150 	.word	0x0002d150

0002140c <hrs_init>:
	ARG_UNUSED(dev);

	hrs_blsc = 0x06;

	return 0;
}
   2140c:	2000      	movs	r0, #0
   2140e:	4770      	bx	lr

00021410 <bt_count_bonds>:
	if ((*bond_cnt) < 0)
   21410:	680b      	ldr	r3, [r1, #0]
   21412:	2b00      	cmp	r3, #0
   21414:	db01      	blt.n	2141a <bt_count_bonds+0xa>
	(*bond_cnt)++;
   21416:	3301      	adds	r3, #1
   21418:	600b      	str	r3, [r1, #0]
}
   2141a:	4770      	bx	lr

0002141c <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   2141c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   21420:	b2db      	uxtb	r3, r3
   21422:	2b09      	cmp	r3, #9
   21424:	d802      	bhi.n	2142c <char2hex+0x10>
		*x = c - '0';
   21426:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   21428:	2000      	movs	r0, #0
   2142a:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   2142c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   21430:	b2db      	uxtb	r3, r3
   21432:	2b05      	cmp	r3, #5
   21434:	d803      	bhi.n	2143e <char2hex+0x22>
		*x = c - 'a' + 10;
   21436:	3857      	subs	r0, #87	; 0x57
   21438:	7008      	strb	r0, [r1, #0]
	return 0;
   2143a:	2000      	movs	r0, #0
   2143c:	4770      	bx	lr
	} else if (c >= 'A' && c <= 'F') {
   2143e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   21442:	b2db      	uxtb	r3, r3
   21444:	2b05      	cmp	r3, #5
   21446:	d803      	bhi.n	21450 <char2hex+0x34>
		*x = c - 'A' + 10;
   21448:	3837      	subs	r0, #55	; 0x37
   2144a:	7008      	strb	r0, [r1, #0]
	return 0;
   2144c:	2000      	movs	r0, #0
   2144e:	4770      	bx	lr
		return -EINVAL;
   21450:	f06f 0015 	mvn.w	r0, #21
}
   21454:	4770      	bx	lr

00021456 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   21456:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2145a:	b083      	sub	sp, #12
   2145c:	4616      	mov	r6, r2
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   2145e:	f001 0201 	and.w	r2, r1, #1
   21462:	eb02 0851 	add.w	r8, r2, r1, lsr #1
   21466:	4598      	cmp	r8, r3
   21468:	d832      	bhi.n	214d0 <hex2bin+0x7a>
   2146a:	4607      	mov	r7, r0
   2146c:	ea4f 0951 	mov.w	r9, r1, lsr #1
		return 0;
	}

	/* if hexlen is uneven, insert leading zero nibble */
	if (hexlen % 2) {
   21470:	b90a      	cbnz	r2, 21476 <hex2bin+0x20>
		hex++;
		buf++;
	}

	/* regular hex conversion */
	for (size_t i = 0; i < hexlen / 2; i++) {
   21472:	2400      	movs	r4, #0
   21474:	e012      	b.n	2149c <hex2bin+0x46>
		if (char2hex(hex[0], &dec) < 0) {
   21476:	f10d 0107 	add.w	r1, sp, #7
   2147a:	7800      	ldrb	r0, [r0, #0]
   2147c:	f7ff ffce 	bl	2141c <char2hex>
   21480:	2800      	cmp	r0, #0
   21482:	db2b      	blt.n	214dc <hex2bin+0x86>
		buf[0] = dec;
   21484:	f89d 3007 	ldrb.w	r3, [sp, #7]
   21488:	f806 3b01 	strb.w	r3, [r6], #1
		hex++;
   2148c:	3701      	adds	r7, #1
		buf++;
   2148e:	e7f0      	b.n	21472 <hex2bin+0x1c>
		buf[i] = dec << 4;

		if (char2hex(hex[2 * i + 1], &dec) < 0) {
			return 0;
		}
		buf[i] += dec;
   21490:	5d33      	ldrb	r3, [r6, r4]
   21492:	f89d 2007 	ldrb.w	r2, [sp, #7]
   21496:	4413      	add	r3, r2
   21498:	5533      	strb	r3, [r6, r4]
	for (size_t i = 0; i < hexlen / 2; i++) {
   2149a:	3401      	adds	r4, #1
   2149c:	45a1      	cmp	r9, r4
   2149e:	d919      	bls.n	214d4 <hex2bin+0x7e>
		if (char2hex(hex[2 * i], &dec) < 0) {
   214a0:	0065      	lsls	r5, r4, #1
   214a2:	f10d 0107 	add.w	r1, sp, #7
   214a6:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
   214aa:	f7ff ffb7 	bl	2141c <char2hex>
   214ae:	2800      	cmp	r0, #0
   214b0:	db17      	blt.n	214e2 <hex2bin+0x8c>
		buf[i] = dec << 4;
   214b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   214b6:	011b      	lsls	r3, r3, #4
   214b8:	5533      	strb	r3, [r6, r4]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   214ba:	3501      	adds	r5, #1
   214bc:	f10d 0107 	add.w	r1, sp, #7
   214c0:	5d78      	ldrb	r0, [r7, r5]
   214c2:	f7ff ffab 	bl	2141c <char2hex>
   214c6:	2800      	cmp	r0, #0
   214c8:	dae2      	bge.n	21490 <hex2bin+0x3a>
			return 0;
   214ca:	f04f 0800 	mov.w	r8, #0
   214ce:	e001      	b.n	214d4 <hex2bin+0x7e>
		return 0;
   214d0:	f04f 0800 	mov.w	r8, #0
	}

	return hexlen / 2 + hexlen % 2;
}
   214d4:	4640      	mov	r0, r8
   214d6:	b003      	add	sp, #12
   214d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			return 0;
   214dc:	f04f 0800 	mov.w	r8, #0
   214e0:	e7f8      	b.n	214d4 <hex2bin+0x7e>
			return 0;
   214e2:	f04f 0800 	mov.w	r8, #0
   214e6:	e7f5      	b.n	214d4 <hex2bin+0x7e>

000214e8 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   214e8:	4602      	mov	r2, r0
   214ea:	b1b0      	cbz	r0, 2151a <sys_notify_validate+0x32>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   214ec:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   214ee:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   214f2:	2b02      	cmp	r3, #2
   214f4:	d00b      	beq.n	2150e <sys_notify_validate+0x26>
   214f6:	2b03      	cmp	r3, #3
   214f8:	d004      	beq.n	21504 <sys_notify_validate+0x1c>
   214fa:	2b01      	cmp	r3, #1
   214fc:	d004      	beq.n	21508 <sys_notify_validate+0x20>
   214fe:	f06f 0015 	mvn.w	r0, #21
   21502:	4770      	bx	lr
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   21504:	6803      	ldr	r3, [r0, #0]
   21506:	b15b      	cbz	r3, 21520 <sys_notify_validate+0x38>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   21508:	2000      	movs	r0, #0
   2150a:	6090      	str	r0, [r2, #8]
   2150c:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   2150e:	6803      	ldr	r3, [r0, #0]
   21510:	2b00      	cmp	r3, #0
   21512:	d1f9      	bne.n	21508 <sys_notify_validate+0x20>
			rv = -EINVAL;
   21514:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   21518:	4770      	bx	lr
		return -EINVAL;
   2151a:	f06f 0015 	mvn.w	r0, #21
   2151e:	4770      	bx	lr
			rv = -EINVAL;
   21520:	f06f 0015 	mvn.w	r0, #21
   21524:	4770      	bx	lr

00021526 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   21526:	b510      	push	{r4, lr}
   21528:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2152a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2152c:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   21530:	6081      	str	r1, [r0, #8]
	switch (method) {
   21532:	2a02      	cmp	r2, #2
   21534:	d004      	beq.n	21540 <sys_notify_finalize+0x1a>
   21536:	2a03      	cmp	r2, #3
   21538:	d105      	bne.n	21546 <sys_notify_finalize+0x20>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   2153a:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   2153c:	2000      	movs	r0, #0
		break;
   2153e:	e004      	b.n	2154a <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
   21540:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   21542:	2400      	movs	r4, #0
		break;
   21544:	e001      	b.n	2154a <sys_notify_finalize+0x24>
	switch (method) {
   21546:	2400      	movs	r4, #0
   21548:	4620      	mov	r0, r4
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   2154a:	2200      	movs	r2, #0
   2154c:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   2154e:	b108      	cbz	r0, 21554 <sys_notify_finalize+0x2e>
	return z_impl_k_poll_signal_raise(sig, result);
   21550:	f7ff ff10 	bl	21374 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   21554:	4620      	mov	r0, r4
   21556:	bd10      	pop	{r4, pc}

00021558 <arch_printk_char_out>:
}
   21558:	2000      	movs	r0, #0
   2155a:	4770      	bx	lr

0002155c <str_out>:
{
   2155c:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2155e:	680c      	ldr	r4, [r1, #0]
   21560:	b154      	cbz	r4, 21578 <str_out+0x1c>
   21562:	688a      	ldr	r2, [r1, #8]
   21564:	684b      	ldr	r3, [r1, #4]
   21566:	429a      	cmp	r2, r3
   21568:	da06      	bge.n	21578 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   2156a:	3b01      	subs	r3, #1
   2156c:	429a      	cmp	r2, r3
   2156e:	d008      	beq.n	21582 <str_out+0x26>
		ctx->str[ctx->count++] = c;
   21570:	1c53      	adds	r3, r2, #1
   21572:	608b      	str	r3, [r1, #8]
   21574:	54a0      	strb	r0, [r4, r2]
   21576:	e002      	b.n	2157e <str_out+0x22>
		ctx->count++;
   21578:	688b      	ldr	r3, [r1, #8]
   2157a:	3301      	adds	r3, #1
   2157c:	608b      	str	r3, [r1, #8]
}
   2157e:	bc10      	pop	{r4}
   21580:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   21582:	1c53      	adds	r3, r2, #1
   21584:	608b      	str	r3, [r1, #8]
   21586:	2300      	movs	r3, #0
   21588:	54a3      	strb	r3, [r4, r2]
   2158a:	e7f8      	b.n	2157e <str_out+0x22>

0002158c <printk>:
{
   2158c:	b40f      	push	{r0, r1, r2, r3}
   2158e:	b500      	push	{lr}
   21590:	b083      	sub	sp, #12
   21592:	a904      	add	r1, sp, #16
   21594:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   21598:	9101      	str	r1, [sp, #4]
	z_log_printk(fmt, ap);
   2159a:	f7ef fe9f 	bl	112dc <z_log_printk>
}
   2159e:	b003      	add	sp, #12
   215a0:	f85d eb04 	ldr.w	lr, [sp], #4
   215a4:	b004      	add	sp, #16
   215a6:	4770      	bx	lr

000215a8 <snprintk>:
{
   215a8:	b40c      	push	{r2, r3}
   215aa:	b500      	push	{lr}
   215ac:	b083      	sub	sp, #12
   215ae:	ab04      	add	r3, sp, #16
   215b0:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   215b4:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   215b6:	f7ee fd37 	bl	10028 <vsnprintk>
}
   215ba:	b003      	add	sp, #12
   215bc:	f85d eb04 	ldr.w	lr, [sp], #4
   215c0:	b002      	add	sp, #8
   215c2:	4770      	bx	lr

000215c4 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   215c4:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   215c8:	8b01      	ldrh	r1, [r0, #24]
   215ca:	f021 0107 	bic.w	r1, r1, #7
   215ce:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   215d0:	8301      	strh	r1, [r0, #24]
}
   215d2:	4770      	bx	lr

000215d4 <notify_monitors>:
{
   215d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   215d8:	4606      	mov	r6, r0
   215da:	460f      	mov	r7, r1
   215dc:	4690      	mov	r8, r2
	return list->head;
   215de:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   215e0:	b119      	cbz	r1, 215ea <notify_monitors+0x16>
   215e2:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   215e4:	b131      	cbz	r1, 215f4 <notify_monitors+0x20>
	return node->next;
   215e6:	680c      	ldr	r4, [r1, #0]
   215e8:	e004      	b.n	215f4 <notify_monitors+0x20>
   215ea:	460c      	mov	r4, r1
   215ec:	e002      	b.n	215f4 <notify_monitors+0x20>
   215ee:	4623      	mov	r3, r4
   215f0:	4621      	mov	r1, r4
   215f2:	461c      	mov	r4, r3
   215f4:	b159      	cbz	r1, 2160e <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
   215f6:	684d      	ldr	r5, [r1, #4]
   215f8:	4643      	mov	r3, r8
   215fa:	463a      	mov	r2, r7
   215fc:	4630      	mov	r0, r6
   215fe:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   21600:	2c00      	cmp	r4, #0
   21602:	d0f4      	beq.n	215ee <notify_monitors+0x1a>
   21604:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   21606:	2c00      	cmp	r4, #0
   21608:	d0f2      	beq.n	215f0 <notify_monitors+0x1c>
	return node->next;
   2160a:	6823      	ldr	r3, [r4, #0]
   2160c:	e7f0      	b.n	215f0 <notify_monitors+0x1c>
}
   2160e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021612 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   21612:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   21614:	f013 0307 	ands.w	r3, r3, #7
   21618:	d103      	bne.n	21622 <process_recheck+0x10>
	return list->head;
   2161a:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   2161c:	b10a      	cbz	r2, 21622 <process_recheck+0x10>
		evt = EVT_START;
   2161e:	2003      	movs	r0, #3
   21620:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   21622:	2b02      	cmp	r3, #2
   21624:	d003      	beq.n	2162e <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   21626:	2b01      	cmp	r3, #1
   21628:	d006      	beq.n	21638 <process_recheck+0x26>
	int evt = EVT_NOP;
   2162a:	2000      	movs	r0, #0
   2162c:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   2162e:	8b42      	ldrh	r2, [r0, #26]
   21630:	2a00      	cmp	r2, #0
   21632:	d1f8      	bne.n	21626 <process_recheck+0x14>
		evt = EVT_STOP;
   21634:	2004      	movs	r0, #4
   21636:	4770      	bx	lr
   21638:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   2163a:	b10b      	cbz	r3, 21640 <process_recheck+0x2e>
		evt = EVT_RESET;
   2163c:	2005      	movs	r0, #5
}
   2163e:	4770      	bx	lr
	int evt = EVT_NOP;
   21640:	2000      	movs	r0, #0
   21642:	4770      	bx	lr

00021644 <process_complete>:
{
   21644:	b538      	push	{r3, r4, r5, lr}
   21646:	4604      	mov	r4, r0
   21648:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2164a:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
   2164c:	2a00      	cmp	r2, #0
   2164e:	db07      	blt.n	21660 <process_complete+0x1c>
   21650:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   21654:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   21656:	2a01      	cmp	r2, #1
   21658:	d90e      	bls.n	21678 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
   2165a:	2b04      	cmp	r3, #4
   2165c:	d032      	beq.n	216c4 <process_complete+0x80>
}
   2165e:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
   21660:	e9d0 0100 	ldrd	r0, r1, [r0]
   21664:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   21668:	2300      	movs	r3, #0
   2166a:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   2166c:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   2166e:	2101      	movs	r1, #1
   21670:	4620      	mov	r0, r4
   21672:	f7ff ffa7 	bl	215c4 <set_state>
   21676:	e7f2      	b.n	2165e <process_complete+0x1a>
		*clients = mgr->clients;
   21678:	e9d0 0100 	ldrd	r0, r1, [r0]
   2167c:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   21680:	2200      	movs	r2, #0
   21682:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   21684:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   21686:	2b06      	cmp	r3, #6
   21688:	d117      	bne.n	216ba <process_complete+0x76>
	return list->head;
   2168a:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   2168c:	b13b      	cbz	r3, 2169e <process_complete+0x5a>
				mgr->refs += 1U;
   2168e:	8b62      	ldrh	r2, [r4, #26]
   21690:	3201      	adds	r2, #1
   21692:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
   21694:	2b00      	cmp	r3, #0
   21696:	d0f9      	beq.n	2168c <process_complete+0x48>
	return node->next;
   21698:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   2169a:	2b00      	cmp	r3, #0
   2169c:	d1f6      	bne.n	2168c <process_complete+0x48>
			set_state(mgr, ONOFF_STATE_ON);
   2169e:	2102      	movs	r1, #2
   216a0:	4620      	mov	r0, r4
   216a2:	f7ff ff8f 	bl	215c4 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   216a6:	4620      	mov	r0, r4
   216a8:	f7ff ffb3 	bl	21612 <process_recheck>
   216ac:	2800      	cmp	r0, #0
   216ae:	d0d6      	beq.n	2165e <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   216b0:	8b23      	ldrh	r3, [r4, #24]
   216b2:	f043 0320 	orr.w	r3, r3, #32
   216b6:	8323      	strh	r3, [r4, #24]
   216b8:	e7d1      	b.n	2165e <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
   216ba:	2100      	movs	r1, #0
   216bc:	4620      	mov	r0, r4
   216be:	f7ff ff81 	bl	215c4 <set_state>
   216c2:	e7f0      	b.n	216a6 <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
   216c4:	2100      	movs	r1, #0
   216c6:	f7ff ff7d 	bl	215c4 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   216ca:	4620      	mov	r0, r4
   216cc:	f7ff ffa1 	bl	21612 <process_recheck>
   216d0:	2800      	cmp	r0, #0
   216d2:	d0c4      	beq.n	2165e <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   216d4:	8b23      	ldrh	r3, [r4, #24]
   216d6:	f043 0320 	orr.w	r3, r3, #32
   216da:	8323      	strh	r3, [r4, #24]
}
   216dc:	e7bf      	b.n	2165e <process_complete+0x1a>

000216de <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   216de:	b158      	cbz	r0, 216f8 <validate_args+0x1a>
{
   216e0:	b510      	push	{r4, lr}
   216e2:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   216e4:	b159      	cbz	r1, 216fe <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
   216e6:	1d08      	adds	r0, r1, #4
   216e8:	f7ff fefe 	bl	214e8 <sys_notify_validate>
	if ((rv == 0)
   216ec:	b918      	cbnz	r0, 216f6 <validate_args+0x18>
	    && ((cli->notify.flags
   216ee:	68a3      	ldr	r3, [r4, #8]
   216f0:	f033 0303 	bics.w	r3, r3, #3
   216f4:	d106      	bne.n	21704 <validate_args+0x26>
}
   216f6:	bd10      	pop	{r4, pc}
		return -EINVAL;
   216f8:	f06f 0015 	mvn.w	r0, #21
}
   216fc:	4770      	bx	lr
		return -EINVAL;
   216fe:	f06f 0015 	mvn.w	r0, #21
   21702:	e7f8      	b.n	216f6 <validate_args+0x18>
		rv = -EINVAL;
   21704:	f06f 0015 	mvn.w	r0, #21
   21708:	e7f5      	b.n	216f6 <validate_args+0x18>

0002170a <notify_one>:
{
   2170a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2170e:	4607      	mov	r7, r0
   21710:	460c      	mov	r4, r1
   21712:	4616      	mov	r6, r2
   21714:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   21716:	4619      	mov	r1, r3
   21718:	1d20      	adds	r0, r4, #4
   2171a:	f7ff ff04 	bl	21526 <sys_notify_finalize>
	if (cb) {
   2171e:	b128      	cbz	r0, 2172c <notify_one+0x22>
   21720:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   21722:	462b      	mov	r3, r5
   21724:	4632      	mov	r2, r6
   21726:	4621      	mov	r1, r4
   21728:	4638      	mov	r0, r7
   2172a:	47c0      	blx	r8
}
   2172c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021730 <notify_all>:
{
   21730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21734:	4681      	mov	r9, r0
   21736:	460c      	mov	r4, r1
   21738:	4690      	mov	r8, r2
   2173a:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
   2173c:	e005      	b.n	2174a <notify_all+0x1a>
	list->tail = node;
   2173e:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
   21740:	463b      	mov	r3, r7
   21742:	4642      	mov	r2, r8
   21744:	4648      	mov	r0, r9
   21746:	f7ff ffe0 	bl	2170a <notify_one>
	return list->head;
   2174a:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   2174c:	b129      	cbz	r1, 2175a <notify_all+0x2a>
	return node->next;
   2174e:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   21750:	6025      	str	r5, [r4, #0]
	return list->tail;
   21752:	6866      	ldr	r6, [r4, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   21754:	428e      	cmp	r6, r1
   21756:	d1f3      	bne.n	21740 <notify_all+0x10>
   21758:	e7f1      	b.n	2173e <notify_all+0xe>
}
   2175a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002175e <transition_complete>:
{
   2175e:	b510      	push	{r4, lr}
	__asm__ volatile(
   21760:	f04f 0440 	mov.w	r4, #64	; 0x40
   21764:	f3ef 8211 	mrs	r2, BASEPRI
   21768:	f384 8811 	msr	BASEPRI, r4
   2176c:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   21770:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
   21772:	2101      	movs	r1, #1
   21774:	f7ee fc6e 	bl	10054 <process_event>
}
   21778:	bd10      	pop	{r4, pc}

0002177a <onoff_manager_init>:
	if ((mgr == NULL)
   2177a:	4603      	mov	r3, r0
   2177c:	b168      	cbz	r0, 2179a <onoff_manager_init+0x20>
	    || (transitions == NULL)
   2177e:	b179      	cbz	r1, 217a0 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
   21780:	680a      	ldr	r2, [r1, #0]
   21782:	b182      	cbz	r2, 217a6 <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
   21784:	684a      	ldr	r2, [r1, #4]
   21786:	b18a      	cbz	r2, 217ac <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   21788:	2000      	movs	r0, #0
   2178a:	6018      	str	r0, [r3, #0]
   2178c:	6058      	str	r0, [r3, #4]
   2178e:	6098      	str	r0, [r3, #8]
   21790:	60d8      	str	r0, [r3, #12]
   21792:	6158      	str	r0, [r3, #20]
   21794:	6198      	str	r0, [r3, #24]
   21796:	6119      	str	r1, [r3, #16]
	return 0;
   21798:	4770      	bx	lr
		return -EINVAL;
   2179a:	f06f 0015 	mvn.w	r0, #21
   2179e:	4770      	bx	lr
   217a0:	f06f 0015 	mvn.w	r0, #21
   217a4:	4770      	bx	lr
   217a6:	f06f 0015 	mvn.w	r0, #21
   217aa:	4770      	bx	lr
   217ac:	f06f 0015 	mvn.w	r0, #21
}
   217b0:	4770      	bx	lr

000217b2 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   217b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   217b4:	4604      	mov	r4, r0
   217b6:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   217b8:	f7ff ff91 	bl	216de <validate_args>

	if (rv < 0) {
   217bc:	1e06      	subs	r6, r0, #0
   217be:	db37      	blt.n	21830 <onoff_request+0x7e>
   217c0:	f04f 0340 	mov.w	r3, #64	; 0x40
   217c4:	f3ef 8211 	mrs	r2, BASEPRI
   217c8:	f383 8811 	msr	BASEPRI, r3
   217cc:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   217d0:	8b25      	ldrh	r5, [r4, #24]
   217d2:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   217d6:	8b63      	ldrh	r3, [r4, #26]
   217d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   217dc:	428b      	cmp	r3, r1
   217de:	d02f      	beq.n	21840 <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   217e0:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
   217e2:	2d02      	cmp	r5, #2
   217e4:	d00c      	beq.n	21800 <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   217e6:	b18d      	cbz	r5, 2180c <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
   217e8:	2d04      	cmp	r5, #4
   217ea:	d00f      	beq.n	2180c <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
   217ec:	2d06      	cmp	r5, #6
   217ee:	d00d      	beq.n	2180c <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
   217f0:	2d05      	cmp	r5, #5
   217f2:	d01f      	beq.n	21834 <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
   217f4:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
   217f8:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   217fa:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   217fc:	4608      	mov	r0, r1
   217fe:	e00a      	b.n	21816 <onoff_request+0x64>
		mgr->refs += 1U;
   21800:	3301      	adds	r3, #1
   21802:	8363      	strh	r3, [r4, #26]
		notify = true;
   21804:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
   21806:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
   21808:	4618      	mov	r0, r3
   2180a:	e004      	b.n	21816 <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
   2180c:	fab5 f385 	clz	r3, r5
   21810:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
   21812:	2100      	movs	r1, #0
		add_client = true;
   21814:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
   21816:	b128      	cbz	r0, 21824 <onoff_request+0x72>
	parent->next = child;
   21818:	2000      	movs	r0, #0
   2181a:	6038      	str	r0, [r7, #0]
	return list->tail;
   2181c:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   2181e:	b1a8      	cbz	r0, 2184c <onoff_request+0x9a>
	parent->next = child;
   21820:	6007      	str	r7, [r0, #0]
	list->tail = node;
   21822:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   21824:	b9ab      	cbnz	r3, 21852 <onoff_request+0xa0>
	__asm__ volatile(
   21826:	f382 8811 	msr	BASEPRI, r2
   2182a:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   2182e:	b9a9      	cbnz	r1, 2185c <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   21830:	4630      	mov	r0, r6
   21832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
   21834:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
   21838:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   2183a:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   2183c:	4608      	mov	r0, r1
   2183e:	e7ea      	b.n	21816 <onoff_request+0x64>
		rv = -EAGAIN;
   21840:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
   21844:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   21846:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   21848:	4608      	mov	r0, r1
   2184a:	e7e4      	b.n	21816 <onoff_request+0x64>
   2184c:	6067      	str	r7, [r4, #4]
	list->head = node;
   2184e:	6027      	str	r7, [r4, #0]
}
   21850:	e7e8      	b.n	21824 <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
   21852:	2102      	movs	r1, #2
   21854:	4620      	mov	r0, r4
   21856:	f7ee fbfd 	bl	10054 <process_event>
   2185a:	e7e9      	b.n	21830 <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
   2185c:	2300      	movs	r3, #0
   2185e:	462a      	mov	r2, r5
   21860:	4639      	mov	r1, r7
   21862:	4620      	mov	r0, r4
   21864:	f7ff ff51 	bl	2170a <notify_one>
   21868:	e7e2      	b.n	21830 <onoff_request+0x7e>

0002186a <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   2186a:	b510      	push	{r4, lr}
	__asm__ volatile(
   2186c:	f04f 0340 	mov.w	r3, #64	; 0x40
   21870:	f3ef 8211 	mrs	r2, BASEPRI
   21874:	f383 8811 	msr	BASEPRI, r3
   21878:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2187c:	8b03      	ldrh	r3, [r0, #24]
   2187e:	f003 0307 	and.w	r3, r3, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   21882:	2b02      	cmp	r3, #2
   21884:	d007      	beq.n	21896 <onoff_release+0x2c>
		if (state == ONOFF_STATE_ERROR) {
   21886:	2b01      	cmp	r3, #1
   21888:	d002      	beq.n	21890 <onoff_release+0x26>
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   2188a:	f06f 0485 	mvn.w	r4, #133	; 0x85
	__ASSERT_NO_MSG(mgr->refs > 0);
	mgr->refs -= 1U;
	stop = (mgr->refs == 0);

out:
	if (stop) {
   2188e:	e008      	b.n	218a2 <onoff_release+0x38>
			rv = -EIO;
   21890:	f06f 0404 	mvn.w	r4, #4
   21894:	e005      	b.n	218a2 <onoff_release+0x38>
   21896:	461c      	mov	r4, r3
	mgr->refs -= 1U;
   21898:	8b43      	ldrh	r3, [r0, #26]
   2189a:	3b01      	subs	r3, #1
   2189c:	b29b      	uxth	r3, r3
   2189e:	8343      	strh	r3, [r0, #26]
	if (stop) {
   218a0:	b12b      	cbz	r3, 218ae <onoff_release+0x44>
	__asm__ volatile(
   218a2:	f382 8811 	msr	BASEPRI, r2
   218a6:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
}
   218aa:	4620      	mov	r0, r4
   218ac:	bd10      	pop	{r4, pc}
		process_event(mgr, EVT_RECHECK, key);
   218ae:	2102      	movs	r1, #2
   218b0:	f7ee fbd0 	bl	10054 <process_event>
   218b4:	e7f9      	b.n	218aa <onoff_release+0x40>

000218b6 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   218b6:	b508      	push	{r3, lr}
   218b8:	4604      	mov	r4, r0
   218ba:	4608      	mov	r0, r1
   218bc:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   218be:	461a      	mov	r2, r3
   218c0:	47a0      	blx	r4
	return z_impl_k_current_get();
   218c2:	f7ff f83d 	bl	20940 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   218c6:	f7f2 fb85 	bl	13fd4 <z_impl_k_thread_abort>

000218ca <chunk_mem>:
#include "heap.h"

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   218ca:	00c9      	lsls	r1, r1, #3
	return big_heap_chunks(bytes / CHUNK_UNIT);
}

static inline bool big_heap(struct z_heap *h)
{
	return big_heap_chunks(h->end_chunk);
   218cc:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   218ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   218d2:	d303      	bcc.n	218dc <chunk_mem+0x12>
   218d4:	2308      	movs	r3, #8
   218d6:	4419      	add	r1, r3

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
   218d8:	4408      	add	r0, r1
   218da:	4770      	bx	lr
   218dc:	2304      	movs	r3, #4
   218de:	e7fa      	b.n	218d6 <chunk_mem+0xc>

000218e0 <free_list_remove_bidx>:

static void free_list_remove_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   218e0:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
   218e2:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   218e6:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   218e8:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   218ec:	d317      	bcc.n	2191e <free_list_remove_bidx+0x3e>
		return ((uint32_t *)cmem)[f];
   218ee:	68eb      	ldr	r3, [r5, #12]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & (1 << bidx));

	if (next_free_chunk(h, c) == c) {
   218f0:	4299      	cmp	r1, r3
   218f2:	d016      	beq.n	21922 <free_list_remove_bidx+0x42>
	if (big_heap(h)) {
   218f4:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   218f8:	d320      	bcc.n	2193c <free_list_remove_bidx+0x5c>
		return ((uint32_t *)cmem)[f];
   218fa:	68a9      	ldr	r1, [r5, #8]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
   218fc:	3204      	adds	r2, #4
   218fe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   21902:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
   21906:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   2190a:	d319      	bcc.n	21940 <free_list_remove_bidx+0x60>
		((uint32_t *)cmem)[f] = val;
   2190c:	60d3      	str	r3, [r2, #12]
	void *cmem = &buf[c];
   2190e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
   21912:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
   21914:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   21918:	d314      	bcc.n	21944 <free_list_remove_bidx+0x64>
		((uint32_t *)cmem)[f] = val;
   2191a:	6099      	str	r1, [r3, #8]
   2191c:	e00c      	b.n	21938 <free_list_remove_bidx+0x58>
		return ((uint16_t *)cmem)[f];
   2191e:	88eb      	ldrh	r3, [r5, #6]
   21920:	e7e6      	b.n	218f0 <free_list_remove_bidx+0x10>
		h->avail_buckets &= ~(1 << bidx);
   21922:	2301      	movs	r3, #1
   21924:	fa03 f102 	lsl.w	r1, r3, r2
   21928:	68c3      	ldr	r3, [r0, #12]
   2192a:	ea23 0301 	bic.w	r3, r3, r1
   2192e:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   21930:	3204      	adds	r2, #4
   21932:	2300      	movs	r3, #0
   21934:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
		set_next_free_chunk(h, first, second);
		set_prev_free_chunk(h, second, first);
	}
}
   21938:	bc30      	pop	{r4, r5}
   2193a:	4770      	bx	lr
   2193c:	88a9      	ldrh	r1, [r5, #4]
   2193e:	e7dd      	b.n	218fc <free_list_remove_bidx+0x1c>
		((uint16_t *)cmem)[f] = val;
   21940:	80d3      	strh	r3, [r2, #6]
   21942:	e7e4      	b.n	2190e <free_list_remove_bidx+0x2e>
   21944:	8099      	strh	r1, [r3, #4]
   21946:	e7f7      	b.n	21938 <free_list_remove_bidx+0x58>

00021948 <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   21948:	b470      	push	{r4, r5, r6}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
   2194a:	1d13      	adds	r3, r2, #4
   2194c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   21950:	b9d3      	cbnz	r3, 21988 <free_list_add_bidx+0x40>
		CHECK((h->avail_buckets & (1 << bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << bidx);
   21952:	2301      	movs	r3, #1
   21954:	fa03 f402 	lsl.w	r4, r3, r2
   21958:	68c3      	ldr	r3, [r0, #12]
   2195a:	4323      	orrs	r3, r4
   2195c:	60c3      	str	r3, [r0, #12]
		b->next = c;
   2195e:	3204      	adds	r2, #4
   21960:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   21964:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   21968:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
   2196a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   2196e:	d307      	bcc.n	21980 <free_list_add_bidx+0x38>
		((uint32_t *)cmem)[f] = val;
   21970:	6099      	str	r1, [r3, #8]
	return big_heap_chunks(h->end_chunk);
   21972:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
   21974:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   21978:	d304      	bcc.n	21984 <free_list_add_bidx+0x3c>
		((uint32_t *)cmem)[f] = val;
   2197a:	60d9      	str	r1, [r3, #12]
		set_prev_free_chunk(h, c, first);
		set_next_free_chunk(h, c, second);
		set_next_free_chunk(h, first, c);
		set_prev_free_chunk(h, second, c);
	}
}
   2197c:	bc70      	pop	{r4, r5, r6}
   2197e:	4770      	bx	lr
		((uint16_t *)cmem)[f] = val;
   21980:	8099      	strh	r1, [r3, #4]
   21982:	e7f6      	b.n	21972 <free_list_add_bidx+0x2a>
   21984:	80d9      	strh	r1, [r3, #6]
   21986:	e7f9      	b.n	2197c <free_list_add_bidx+0x34>
	void *cmem = &buf[c];
   21988:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
   2198c:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
   2198e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   21992:	d318      	bcc.n	219c6 <free_list_add_bidx+0x7e>
		return ((uint32_t *)cmem)[f];
   21994:	68a2      	ldr	r2, [r4, #8]
	void *cmem = &buf[c];
   21996:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
	if (big_heap(h)) {
   2199a:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   2199e:	d314      	bcc.n	219ca <free_list_add_bidx+0x82>
		((uint32_t *)cmem)[f] = val;
   219a0:	60aa      	str	r2, [r5, #8]
	return big_heap_chunks(h->end_chunk);
   219a2:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
   219a4:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   219a8:	d311      	bcc.n	219ce <free_list_add_bidx+0x86>
		((uint32_t *)cmem)[f] = val;
   219aa:	60eb      	str	r3, [r5, #12]
	void *cmem = &buf[c];
   219ac:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
   219b0:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   219b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   219b6:	d30c      	bcc.n	219d2 <free_list_add_bidx+0x8a>
		((uint32_t *)cmem)[f] = val;
   219b8:	60d1      	str	r1, [r2, #12]
	return big_heap_chunks(h->end_chunk);
   219ba:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   219bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   219c0:	d309      	bcc.n	219d6 <free_list_add_bidx+0x8e>
		((uint32_t *)cmem)[f] = val;
   219c2:	60a1      	str	r1, [r4, #8]
   219c4:	e7da      	b.n	2197c <free_list_add_bidx+0x34>
		return ((uint16_t *)cmem)[f];
   219c6:	88a2      	ldrh	r2, [r4, #4]
   219c8:	e7e5      	b.n	21996 <free_list_add_bidx+0x4e>
		((uint16_t *)cmem)[f] = val;
   219ca:	80aa      	strh	r2, [r5, #4]
   219cc:	e7e9      	b.n	219a2 <free_list_add_bidx+0x5a>
   219ce:	80eb      	strh	r3, [r5, #6]
   219d0:	e7ec      	b.n	219ac <free_list_add_bidx+0x64>
   219d2:	80d1      	strh	r1, [r2, #6]
   219d4:	e7f1      	b.n	219ba <free_list_add_bidx+0x72>
   219d6:	80a1      	strh	r1, [r4, #4]
   219d8:	e7d0      	b.n	2197c <free_list_add_bidx+0x34>

000219da <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   219da:	b470      	push	{r4, r5, r6}
	void *cmem = &buf[c];
   219dc:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   219e0:	6885      	ldr	r5, [r0, #8]
	if (big_heap(h)) {
   219e2:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   219e6:	d325      	bcc.n	21a34 <split_chunks+0x5a>
		return ((uint32_t *)cmem)[f];
   219e8:	6866      	ldr	r6, [r4, #4]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
   219ea:	1a53      	subs	r3, r2, r1
	chunksz_t rsz = sz0 - lsz;
   219ec:	1a89      	subs	r1, r1, r2
   219ee:	eb01 0156 	add.w	r1, r1, r6, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   219f2:	005e      	lsls	r6, r3, #1
	if (big_heap(h)) {
   219f4:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   219f8:	d31e      	bcc.n	21a38 <split_chunks+0x5e>
		((uint32_t *)cmem)[f] = val;
   219fa:	6066      	str	r6, [r4, #4]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   219fc:	004d      	lsls	r5, r1, #1
	void *cmem = &buf[c];
   219fe:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
   21a02:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
   21a04:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   21a08:	d318      	bcc.n	21a3c <split_chunks+0x62>
		((uint32_t *)cmem)[f] = val;
   21a0a:	6065      	str	r5, [r4, #4]
	return big_heap_chunks(h->end_chunk);
   21a0c:	6885      	ldr	r5, [r0, #8]
	if (big_heap(h)) {
   21a0e:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   21a12:	d315      	bcc.n	21a40 <split_chunks+0x66>
		((uint32_t *)cmem)[f] = val;
   21a14:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
	return big_heap_chunks(h->end_chunk);
   21a18:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   21a1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21a1e:	d312      	bcc.n	21a46 <split_chunks+0x6c>
		return ((uint32_t *)cmem)[f];
   21a20:	6864      	ldr	r4, [r4, #4]
	return c + chunk_size(h, c);
   21a22:	eb02 0254 	add.w	r2, r2, r4, lsr #1
	if (big_heap(h)) {
   21a26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21a2a:	d30e      	bcc.n	21a4a <split_chunks+0x70>
		((uint32_t *)cmem)[f] = val;
   21a2c:	f840 1032 	str.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
   21a30:	bc70      	pop	{r4, r5, r6}
   21a32:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
   21a34:	8866      	ldrh	r6, [r4, #2]
   21a36:	e7d8      	b.n	219ea <split_chunks+0x10>
		((uint16_t *)cmem)[f] = val;
   21a38:	8066      	strh	r6, [r4, #2]
   21a3a:	e7df      	b.n	219fc <split_chunks+0x22>
   21a3c:	8065      	strh	r5, [r4, #2]
   21a3e:	e7e5      	b.n	21a0c <split_chunks+0x32>
   21a40:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
   21a44:	e7e8      	b.n	21a18 <split_chunks+0x3e>
		return ((uint16_t *)cmem)[f];
   21a46:	8864      	ldrh	r4, [r4, #2]
   21a48:	e7eb      	b.n	21a22 <split_chunks+0x48>
		((uint16_t *)cmem)[f] = val;
   21a4a:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]
   21a4e:	e7ef      	b.n	21a30 <split_chunks+0x56>

00021a50 <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   21a50:	b470      	push	{r4, r5, r6}
	void *cmem = &buf[c];
   21a52:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   21a56:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   21a58:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   21a5c:	d31c      	bcc.n	21a98 <merge_chunks+0x48>
		return ((uint32_t *)cmem)[f];
   21a5e:	684b      	ldr	r3, [r1, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   21a60:	085b      	lsrs	r3, r3, #1
	void *cmem = &buf[c];
   21a62:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
	if (big_heap(h)) {
   21a66:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   21a6a:	d317      	bcc.n	21a9c <merge_chunks+0x4c>
		return ((uint32_t *)cmem)[f];
   21a6c:	686e      	ldr	r6, [r5, #4]
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   21a6e:	eb03 0356 	add.w	r3, r3, r6, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   21a72:	005e      	lsls	r6, r3, #1
	if (big_heap(h)) {
   21a74:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   21a78:	d312      	bcc.n	21aa0 <merge_chunks+0x50>
		((uint32_t *)cmem)[f] = val;
   21a7a:	604e      	str	r6, [r1, #4]
	return big_heap_chunks(h->end_chunk);
   21a7c:	6881      	ldr	r1, [r0, #8]
	if (big_heap(h)) {
   21a7e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   21a82:	d30f      	bcc.n	21aa4 <merge_chunks+0x54>
		return ((uint32_t *)cmem)[f];
   21a84:	686c      	ldr	r4, [r5, #4]
	return c + chunk_size(h, c);
   21a86:	eb02 0254 	add.w	r2, r2, r4, lsr #1
	if (big_heap(h)) {
   21a8a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   21a8e:	d30b      	bcc.n	21aa8 <merge_chunks+0x58>
		((uint32_t *)cmem)[f] = val;
   21a90:	f840 3032 	str.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   21a94:	bc70      	pop	{r4, r5, r6}
   21a96:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
   21a98:	884b      	ldrh	r3, [r1, #2]
   21a9a:	e7e1      	b.n	21a60 <merge_chunks+0x10>
   21a9c:	886e      	ldrh	r6, [r5, #2]
   21a9e:	e7e6      	b.n	21a6e <merge_chunks+0x1e>
		((uint16_t *)cmem)[f] = val;
   21aa0:	804e      	strh	r6, [r1, #2]
   21aa2:	e7eb      	b.n	21a7c <merge_chunks+0x2c>
		return ((uint16_t *)cmem)[f];
   21aa4:	886c      	ldrh	r4, [r5, #2]
   21aa6:	e7ee      	b.n	21a86 <merge_chunks+0x36>
		((uint16_t *)cmem)[f] = val;
   21aa8:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
   21aac:	e7f2      	b.n	21a94 <merge_chunks+0x44>

00021aae <mem_to_chunkid>:
	return big_heap_chunks(h->end_chunk);
   21aae:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) ? 8 : 4;
   21ab0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21ab4:	d304      	bcc.n	21ac0 <mem_to_chunkid+0x12>
   21ab6:	2308      	movs	r3, #8
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   21ab8:	1ac9      	subs	r1, r1, r3
   21aba:	1a08      	subs	r0, r1, r0
}
   21abc:	08c0      	lsrs	r0, r0, #3
   21abe:	4770      	bx	lr
   21ac0:	2304      	movs	r3, #4
   21ac2:	e7f9      	b.n	21ab8 <mem_to_chunkid+0xa>

00021ac4 <free_list_remove>:
{
   21ac4:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
   21ac6:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
   21ac8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21acc:	d307      	bcc.n	21ade <free_list_remove+0x1a>
	void *cmem = &buf[c];
   21ace:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
   21ad2:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   21ad4:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
   21ad6:	2a01      	cmp	r2, #1
   21ad8:	d002      	beq.n	21ae0 <free_list_remove+0x1c>
   21ada:	2200      	movs	r2, #0
   21adc:	e000      	b.n	21ae0 <free_list_remove+0x1c>
   21ade:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
   21ae0:	b9a2      	cbnz	r2, 21b0c <free_list_remove+0x48>
	void *cmem = &buf[c];
   21ae2:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
   21ae6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21aea:	d310      	bcc.n	21b0e <free_list_remove+0x4a>
		return ((uint32_t *)cmem)[f];
   21aec:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   21aee:	0852      	lsrs	r2, r2, #1
	return big_heap(h) ? 8 : 4;
   21af0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21af4:	d30d      	bcc.n	21b12 <free_list_remove+0x4e>
   21af6:	2308      	movs	r3, #8
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   21af8:	3308      	adds	r3, #8
	return chunksz * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   21afa:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
   21afe:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
   21b00:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
   21b04:	f1c2 021f 	rsb	r2, r2, #31
   21b08:	f7ff feea 	bl	218e0 <free_list_remove_bidx>
}
   21b0c:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
   21b0e:	8852      	ldrh	r2, [r2, #2]
   21b10:	e7ed      	b.n	21aee <free_list_remove+0x2a>
	return big_heap(h) ? 8 : 4;
   21b12:	2304      	movs	r3, #4
   21b14:	e7f0      	b.n	21af8 <free_list_remove+0x34>

00021b16 <free_list_add>:
{
   21b16:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
   21b18:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
   21b1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21b1e:	d307      	bcc.n	21b30 <free_list_add+0x1a>
	void *cmem = &buf[c];
   21b20:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
   21b24:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   21b26:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
   21b28:	2a01      	cmp	r2, #1
   21b2a:	d002      	beq.n	21b32 <free_list_add+0x1c>
   21b2c:	2200      	movs	r2, #0
   21b2e:	e000      	b.n	21b32 <free_list_add+0x1c>
   21b30:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
   21b32:	b9a2      	cbnz	r2, 21b5e <free_list_add+0x48>
	void *cmem = &buf[c];
   21b34:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
   21b38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21b3c:	d310      	bcc.n	21b60 <free_list_add+0x4a>
		return ((uint32_t *)cmem)[f];
   21b3e:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   21b40:	0852      	lsrs	r2, r2, #1
	return big_heap(h) ? 8 : 4;
   21b42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21b46:	d30d      	bcc.n	21b64 <free_list_add+0x4e>
   21b48:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   21b4a:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   21b4c:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
   21b50:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
   21b52:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
   21b56:	f1c2 021f 	rsb	r2, r2, #31
   21b5a:	f7ff fef5 	bl	21948 <free_list_add_bidx>
}
   21b5e:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
   21b60:	8852      	ldrh	r2, [r2, #2]
   21b62:	e7ed      	b.n	21b40 <free_list_add+0x2a>
	return big_heap(h) ? 8 : 4;
   21b64:	2304      	movs	r3, #4
   21b66:	e7f0      	b.n	21b4a <free_list_add+0x34>

00021b68 <free_chunk>:
{
   21b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21b6a:	4604      	mov	r4, r0
   21b6c:	460d      	mov	r5, r1
	void *cmem = &buf[c];
   21b6e:	00ce      	lsls	r6, r1, #3
   21b70:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   21b74:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   21b76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21b7a:	d31f      	bcc.n	21bbc <free_chunk+0x54>
		return ((uint32_t *)cmem)[f];
   21b7c:	6879      	ldr	r1, [r7, #4]
	return c + chunk_size(h, c);
   21b7e:	eb05 0151 	add.w	r1, r5, r1, lsr #1
	void *cmem = &buf[c];
   21b82:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
	if (big_heap(h)) {
   21b86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21b8a:	d319      	bcc.n	21bc0 <free_chunk+0x58>
		return ((uint32_t *)cmem)[f];
   21b8c:	6853      	ldr	r3, [r2, #4]
	if (!chunk_used(h, right_chunk(h, c))) {
   21b8e:	f013 0f01 	tst.w	r3, #1
   21b92:	d017      	beq.n	21bc4 <free_chunk+0x5c>
	return big_heap_chunks(h->end_chunk);
   21b94:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   21b96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21b9a:	d324      	bcc.n	21be6 <free_chunk+0x7e>
		return ((uint32_t *)cmem)[f];
   21b9c:	59a1      	ldr	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   21b9e:	1a69      	subs	r1, r5, r1
	void *cmem = &buf[c];
   21ba0:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
	if (big_heap(h)) {
   21ba4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21ba8:	d31f      	bcc.n	21bea <free_chunk+0x82>
		return ((uint32_t *)cmem)[f];
   21baa:	6853      	ldr	r3, [r2, #4]
	if (!chunk_used(h, left_chunk(h, c))) {
   21bac:	f013 0f01 	tst.w	r3, #1
   21bb0:	d01d      	beq.n	21bee <free_chunk+0x86>
	free_list_add(h, c);
   21bb2:	4629      	mov	r1, r5
   21bb4:	4620      	mov	r0, r4
   21bb6:	f7ff ffae 	bl	21b16 <free_list_add>
}
   21bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ((uint16_t *)cmem)[f];
   21bbc:	8879      	ldrh	r1, [r7, #2]
   21bbe:	e7de      	b.n	21b7e <free_chunk+0x16>
   21bc0:	8853      	ldrh	r3, [r2, #2]
   21bc2:	e7e4      	b.n	21b8e <free_chunk+0x26>
		free_list_remove(h, right_chunk(h, c));
   21bc4:	4620      	mov	r0, r4
   21bc6:	f7ff ff7d 	bl	21ac4 <free_list_remove>
	return big_heap_chunks(h->end_chunk);
   21bca:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   21bcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21bd0:	d307      	bcc.n	21be2 <free_chunk+0x7a>
		return ((uint32_t *)cmem)[f];
   21bd2:	687a      	ldr	r2, [r7, #4]
		merge_chunks(h, c, right_chunk(h, c));
   21bd4:	eb05 0252 	add.w	r2, r5, r2, lsr #1
   21bd8:	4629      	mov	r1, r5
   21bda:	4620      	mov	r0, r4
   21bdc:	f7ff ff38 	bl	21a50 <merge_chunks>
   21be0:	e7d8      	b.n	21b94 <free_chunk+0x2c>
		return ((uint16_t *)cmem)[f];
   21be2:	887a      	ldrh	r2, [r7, #2]
   21be4:	e7f6      	b.n	21bd4 <free_chunk+0x6c>
   21be6:	5ba1      	ldrh	r1, [r4, r6]
   21be8:	e7d9      	b.n	21b9e <free_chunk+0x36>
   21bea:	8853      	ldrh	r3, [r2, #2]
   21bec:	e7de      	b.n	21bac <free_chunk+0x44>
		free_list_remove(h, left_chunk(h, c));
   21bee:	4620      	mov	r0, r4
   21bf0:	f7ff ff68 	bl	21ac4 <free_list_remove>
	return big_heap_chunks(h->end_chunk);
   21bf4:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   21bf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21bfa:	d30c      	bcc.n	21c16 <free_chunk+0xae>
		return ((uint32_t *)cmem)[f];
   21bfc:	59a1      	ldr	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
   21bfe:	462a      	mov	r2, r5
   21c00:	1a69      	subs	r1, r5, r1
   21c02:	4620      	mov	r0, r4
   21c04:	f7ff ff24 	bl	21a50 <merge_chunks>
	return big_heap_chunks(h->end_chunk);
   21c08:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   21c0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21c0e:	d304      	bcc.n	21c1a <free_chunk+0xb2>
		return ((uint32_t *)cmem)[f];
   21c10:	59a3      	ldr	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   21c12:	1aed      	subs	r5, r5, r3
   21c14:	e7cd      	b.n	21bb2 <free_chunk+0x4a>
		return ((uint16_t *)cmem)[f];
   21c16:	5ba1      	ldrh	r1, [r4, r6]
   21c18:	e7f1      	b.n	21bfe <free_chunk+0x96>
   21c1a:	5ba3      	ldrh	r3, [r4, r6]
   21c1c:	e7f9      	b.n	21c12 <free_chunk+0xaa>

00021c1e <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   21c1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return big_heap_chunks(h->end_chunk);
   21c20:	6885      	ldr	r5, [r0, #8]
	return big_heap(h) ? 8 : 4;
   21c22:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   21c26:	d311      	bcc.n	21c4c <alloc_chunk+0x2e>
   21c28:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   21c2a:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   21c2c:	eba1 03d3 	sub.w	r3, r1, r3, lsr #3
   21c30:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
   21c32:	fab3 f383 	clz	r3, r3
   21c36:	f1c3 021f 	rsb	r2, r3, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   21c3a:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
   21c3e:	f850 c024 	ldr.w	ip, [r0, r4, lsl #2]
   21c42:	f1bc 0f00 	cmp.w	ip, #0
   21c46:	d024      	beq.n	21c92 <alloc_chunk+0x74>
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   21c48:	2603      	movs	r6, #3
   21c4a:	e010      	b.n	21c6e <alloc_chunk+0x50>
	return big_heap(h) ? 8 : 4;
   21c4c:	2304      	movs	r3, #4
   21c4e:	e7ec      	b.n	21c2a <alloc_chunk+0xc>
		return ((uint16_t *)cmem)[f];
   21c50:	f8b7 e002 	ldrh.w	lr, [r7, #2]
   21c54:	e015      	b.n	21c82 <alloc_chunk+0x64>
		do {
			chunkid_t c = b->next;
			if (chunk_size(h, c) >= sz) {
				free_list_remove_bidx(h, c, bi);
   21c56:	4621      	mov	r1, r4
   21c58:	f7ff fe42 	bl	218e0 <free_list_remove_bidx>
				return c;
   21c5c:	e021      	b.n	21ca2 <alloc_chunk+0x84>
   21c5e:	88fc      	ldrh	r4, [r7, #6]
			}
			b->next = next_free_chunk(h, c);
   21c60:	1d17      	adds	r7, r2, #4
   21c62:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
   21c66:	3e01      	subs	r6, #1
   21c68:	d013      	beq.n	21c92 <alloc_chunk+0x74>
   21c6a:	45a4      	cmp	ip, r4
   21c6c:	d011      	beq.n	21c92 <alloc_chunk+0x74>
			chunkid_t c = b->next;
   21c6e:	1d14      	adds	r4, r2, #4
   21c70:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
   21c74:	eb00 07c4 	add.w	r7, r0, r4, lsl #3
	if (big_heap(h)) {
   21c78:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   21c7c:	d3e8      	bcc.n	21c50 <alloc_chunk+0x32>
		return ((uint32_t *)cmem)[f];
   21c7e:	f8d7 e004 	ldr.w	lr, [r7, #4]
			if (chunk_size(h, c) >= sz) {
   21c82:	ebb1 0f5e 	cmp.w	r1, lr, lsr #1
   21c86:	d9e6      	bls.n	21c56 <alloc_chunk+0x38>
	if (big_heap(h)) {
   21c88:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   21c8c:	d3e7      	bcc.n	21c5e <alloc_chunk+0x40>
		return ((uint32_t *)cmem)[f];
   21c8e:	68fc      	ldr	r4, [r7, #12]
   21c90:	e7e6      	b.n	21c60 <alloc_chunk+0x42>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   21c92:	68c4      	ldr	r4, [r0, #12]
   21c94:	f1c3 0220 	rsb	r2, r3, #32
   21c98:	2301      	movs	r3, #1
   21c9a:	4093      	lsls	r3, r2
   21c9c:	425b      	negs	r3, r3

	if (bmask != 0U) {
   21c9e:	401c      	ands	r4, r3
   21ca0:	d101      	bne.n	21ca6 <alloc_chunk+0x88>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   21ca2:	4620      	mov	r0, r4
   21ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		int minbucket = __builtin_ctz(bmask);
   21ca6:	fa94 f2a4 	rbit	r2, r4
   21caa:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   21cae:	1d13      	adds	r3, r2, #4
   21cb0:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   21cb4:	4621      	mov	r1, r4
   21cb6:	f7ff fe13 	bl	218e0 <free_list_remove_bidx>
		return c;
   21cba:	e7f2      	b.n	21ca2 <alloc_chunk+0x84>

00021cbc <sys_heap_free>:
	if (mem == NULL) {
   21cbc:	b1c1      	cbz	r1, 21cf0 <sys_heap_free+0x34>
{
   21cbe:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
   21cc0:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
   21cc2:	4620      	mov	r0, r4
   21cc4:	f7ff fef3 	bl	21aae <mem_to_chunkid>
   21cc8:	4601      	mov	r1, r0
	void *cmem = &buf[c];
   21cca:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
	return big_heap_chunks(h->end_chunk);
   21cce:	68a2      	ldr	r2, [r4, #8]
	if (big_heap(h)) {
   21cd0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   21cd4:	d307      	bcc.n	21ce6 <sys_heap_free+0x2a>
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   21cd6:	685a      	ldr	r2, [r3, #4]
   21cd8:	f022 0201 	bic.w	r2, r2, #1
   21cdc:	605a      	str	r2, [r3, #4]
	free_chunk(h, c);
   21cde:	4620      	mov	r0, r4
   21ce0:	f7ff ff42 	bl	21b68 <free_chunk>
}
   21ce4:	bd10      	pop	{r4, pc}
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   21ce6:	885a      	ldrh	r2, [r3, #2]
   21ce8:	f022 0201 	bic.w	r2, r2, #1
   21cec:	805a      	strh	r2, [r3, #2]
   21cee:	e7f6      	b.n	21cde <sys_heap_free+0x22>
   21cf0:	4770      	bx	lr

00021cf2 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   21cf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
   21cf4:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   21cf6:	2900      	cmp	r1, #0
   21cf8:	d03c      	beq.n	21d74 <sys_heap_alloc+0x82>
   21cfa:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   21cfc:	68aa      	ldr	r2, [r5, #8]
   21cfe:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   21d02:	d939      	bls.n	21d78 <sys_heap_alloc+0x86>
	return big_heap(h) ? 8 : 4;
   21d04:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   21d08:	d320      	bcc.n	21d4c <sys_heap_alloc+0x5a>
   21d0a:	2408      	movs	r4, #8
	return chunksz(chunk_header_bytes(h) + bytes);
   21d0c:	441c      	add	r4, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   21d0e:	3407      	adds	r4, #7
   21d10:	08e4      	lsrs	r4, r4, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
   21d12:	4621      	mov	r1, r4
   21d14:	4628      	mov	r0, r5
   21d16:	f7ff ff82 	bl	21c1e <alloc_chunk>
	if (c == 0U) {
   21d1a:	4607      	mov	r7, r0
   21d1c:	b370      	cbz	r0, 21d7c <sys_heap_alloc+0x8a>
	void *cmem = &buf[c];
   21d1e:	eb05 06c0 	add.w	r6, r5, r0, lsl #3
	return big_heap_chunks(h->end_chunk);
   21d22:	68ab      	ldr	r3, [r5, #8]
	if (big_heap(h)) {
   21d24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21d28:	d312      	bcc.n	21d50 <sys_heap_alloc+0x5e>
		return ((uint32_t *)cmem)[f];
   21d2a:	6873      	ldr	r3, [r6, #4]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
   21d2c:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   21d30:	d310      	bcc.n	21d54 <sys_heap_alloc+0x62>
	return big_heap_chunks(h->end_chunk);
   21d32:	68ab      	ldr	r3, [r5, #8]
	if (big_heap(h)) {
   21d34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21d38:	d317      	bcc.n	21d6a <sys_heap_alloc+0x78>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   21d3a:	6873      	ldr	r3, [r6, #4]
   21d3c:	f043 0301 	orr.w	r3, r3, #1
   21d40:	6073      	str	r3, [r6, #4]
		split_chunks(h, c, c + chunk_sz);
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
   21d42:	4639      	mov	r1, r7
   21d44:	4628      	mov	r0, r5
   21d46:	f7ff fdc0 	bl	218ca <chunk_mem>
}
   21d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return big_heap(h) ? 8 : 4;
   21d4c:	2404      	movs	r4, #4
   21d4e:	e7dd      	b.n	21d0c <sys_heap_alloc+0x1a>
		return ((uint16_t *)cmem)[f];
   21d50:	8873      	ldrh	r3, [r6, #2]
   21d52:	e7eb      	b.n	21d2c <sys_heap_alloc+0x3a>
		split_chunks(h, c, c + chunk_sz);
   21d54:	443c      	add	r4, r7
   21d56:	4622      	mov	r2, r4
   21d58:	4639      	mov	r1, r7
   21d5a:	4628      	mov	r0, r5
   21d5c:	f7ff fe3d 	bl	219da <split_chunks>
		free_list_add(h, c + chunk_sz);
   21d60:	4621      	mov	r1, r4
   21d62:	4628      	mov	r0, r5
   21d64:	f7ff fed7 	bl	21b16 <free_list_add>
   21d68:	e7e3      	b.n	21d32 <sys_heap_alloc+0x40>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   21d6a:	8873      	ldrh	r3, [r6, #2]
   21d6c:	f043 0301 	orr.w	r3, r3, #1
   21d70:	8073      	strh	r3, [r6, #2]
   21d72:	e7e6      	b.n	21d42 <sys_heap_alloc+0x50>
		return NULL;
   21d74:	2000      	movs	r0, #0
   21d76:	e7e8      	b.n	21d4a <sys_heap_alloc+0x58>
   21d78:	2000      	movs	r0, #0
   21d7a:	e7e6      	b.n	21d4a <sys_heap_alloc+0x58>
		return NULL;
   21d7c:	2000      	movs	r0, #0
   21d7e:	e7e4      	b.n	21d4a <sys_heap_alloc+0x58>

00021d80 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   21d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21d84:	460d      	mov	r5, r1
   21d86:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   21d88:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   21d8a:	424b      	negs	r3, r1
   21d8c:	ea03 0801 	and.w	r8, r3, r1
	if (align != rew) {
   21d90:	ea31 0303 	bics.w	r3, r1, r3
   21d94:	d04e      	beq.n	21e34 <sys_heap_aligned_alloc+0xb4>
		align -= rew;
   21d96:	eba1 0508 	sub.w	r5, r1, r8
	return big_heap_chunks(h->end_chunk);
   21d9a:	68b3      	ldr	r3, [r6, #8]
	return big_heap(h) ? 8 : 4;
   21d9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21da0:	d346      	bcc.n	21e30 <sys_heap_aligned_alloc+0xb0>
   21da2:	2308      	movs	r3, #8
		gap = MIN(rew, chunk_header_bytes(h));
   21da4:	4598      	cmp	r8, r3
   21da6:	d200      	bcs.n	21daa <sys_heap_aligned_alloc+0x2a>
   21da8:	4643      	mov	r3, r8
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   21daa:	2c00      	cmp	r4, #0
   21dac:	d070      	beq.n	21e90 <sys_heap_aligned_alloc+0x110>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   21dae:	68b2      	ldr	r2, [r6, #8]
   21db0:	ebb2 0fd4 	cmp.w	r2, r4, lsr #3
   21db4:	d96e      	bls.n	21e94 <sys_heap_aligned_alloc+0x114>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   21db6:	1929      	adds	r1, r5, r4
   21db8:	1ac9      	subs	r1, r1, r3
	return big_heap(h) ? 8 : 4;
   21dba:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   21dbe:	d34a      	bcc.n	21e56 <sys_heap_aligned_alloc+0xd6>
   21dc0:	2308      	movs	r3, #8
	return chunksz(chunk_header_bytes(h) + bytes);
   21dc2:	4419      	add	r1, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   21dc4:	3107      	adds	r1, #7
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   21dc6:	08c9      	lsrs	r1, r1, #3
   21dc8:	4630      	mov	r0, r6
   21dca:	f7ff ff28 	bl	21c1e <alloc_chunk>

	if (c0 == 0) {
   21dce:	4607      	mov	r7, r0
   21dd0:	2800      	cmp	r0, #0
   21dd2:	d061      	beq.n	21e98 <sys_heap_aligned_alloc+0x118>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
   21dd4:	4601      	mov	r1, r0
   21dd6:	4630      	mov	r0, r6
   21dd8:	f7ff fd77 	bl	218ca <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   21ddc:	4440      	add	r0, r8
   21dde:	4428      	add	r0, r5
   21de0:	3801      	subs	r0, #1
   21de2:	426d      	negs	r5, r5
   21de4:	4005      	ands	r5, r0
   21de6:	eba5 0508 	sub.w	r5, r5, r8
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   21dea:	442c      	add	r4, r5
   21dec:	3407      	adds	r4, #7
   21dee:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
   21df2:	4629      	mov	r1, r5
   21df4:	4630      	mov	r0, r6
   21df6:	f7ff fe5a 	bl	21aae <mem_to_chunkid>
   21dfa:	4680      	mov	r8, r0
	chunkid_t c_end = end - chunk_buf(h);
   21dfc:	1ba4      	subs	r4, r4, r6
   21dfe:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
   21e00:	4287      	cmp	r7, r0
   21e02:	d32a      	bcc.n	21e5a <sys_heap_aligned_alloc+0xda>
	void *cmem = &buf[c];
   21e04:	eb06 07c8 	add.w	r7, r6, r8, lsl #3
	return big_heap_chunks(h->end_chunk);
   21e08:	68b3      	ldr	r3, [r6, #8]
	if (big_heap(h)) {
   21e0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21e0e:	d32e      	bcc.n	21e6e <sys_heap_aligned_alloc+0xee>
		return ((uint32_t *)cmem)[f];
   21e10:	687b      	ldr	r3, [r7, #4]
	return c + chunk_size(h, c);
   21e12:	eb08 0353 	add.w	r3, r8, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
   21e16:	429c      	cmp	r4, r3
   21e18:	d32b      	bcc.n	21e72 <sys_heap_aligned_alloc+0xf2>
	return big_heap_chunks(h->end_chunk);
   21e1a:	68b3      	ldr	r3, [r6, #8]
	if (big_heap(h)) {
   21e1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21e20:	d331      	bcc.n	21e86 <sys_heap_aligned_alloc+0x106>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   21e22:	687b      	ldr	r3, [r7, #4]
   21e24:	f043 0301 	orr.w	r3, r3, #1
   21e28:	607b      	str	r3, [r7, #4]
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   21e2a:	4628      	mov	r0, r5
   21e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return big_heap(h) ? 8 : 4;
   21e30:	2304      	movs	r3, #4
   21e32:	e7b7      	b.n	21da4 <sys_heap_aligned_alloc+0x24>
	return big_heap_chunks(h->end_chunk);
   21e34:	68b3      	ldr	r3, [r6, #8]
	return big_heap(h) ? 8 : 4;
   21e36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21e3a:	d305      	bcc.n	21e48 <sys_heap_aligned_alloc+0xc8>
   21e3c:	2308      	movs	r3, #8
		if (align <= chunk_header_bytes(h)) {
   21e3e:	429d      	cmp	r5, r3
   21e40:	d904      	bls.n	21e4c <sys_heap_aligned_alloc+0xcc>
		rew = 0;
   21e42:	f04f 0800 	mov.w	r8, #0
   21e46:	e7b0      	b.n	21daa <sys_heap_aligned_alloc+0x2a>
   21e48:	2304      	movs	r3, #4
   21e4a:	e7f8      	b.n	21e3e <sys_heap_aligned_alloc+0xbe>
			return sys_heap_alloc(heap, bytes);
   21e4c:	4621      	mov	r1, r4
   21e4e:	f7ff ff50 	bl	21cf2 <sys_heap_alloc>
   21e52:	4605      	mov	r5, r0
   21e54:	e7e9      	b.n	21e2a <sys_heap_aligned_alloc+0xaa>
   21e56:	2304      	movs	r3, #4
   21e58:	e7b3      	b.n	21dc2 <sys_heap_aligned_alloc+0x42>
		split_chunks(h, c0, c);
   21e5a:	4602      	mov	r2, r0
   21e5c:	4639      	mov	r1, r7
   21e5e:	4630      	mov	r0, r6
   21e60:	f7ff fdbb 	bl	219da <split_chunks>
		free_list_add(h, c0);
   21e64:	4639      	mov	r1, r7
   21e66:	4630      	mov	r0, r6
   21e68:	f7ff fe55 	bl	21b16 <free_list_add>
   21e6c:	e7ca      	b.n	21e04 <sys_heap_aligned_alloc+0x84>
		return ((uint16_t *)cmem)[f];
   21e6e:	887b      	ldrh	r3, [r7, #2]
   21e70:	e7cf      	b.n	21e12 <sys_heap_aligned_alloc+0x92>
		split_chunks(h, c, c_end);
   21e72:	4622      	mov	r2, r4
   21e74:	4641      	mov	r1, r8
   21e76:	4630      	mov	r0, r6
   21e78:	f7ff fdaf 	bl	219da <split_chunks>
		free_list_add(h, c_end);
   21e7c:	4621      	mov	r1, r4
   21e7e:	4630      	mov	r0, r6
   21e80:	f7ff fe49 	bl	21b16 <free_list_add>
   21e84:	e7c9      	b.n	21e1a <sys_heap_aligned_alloc+0x9a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   21e86:	887b      	ldrh	r3, [r7, #2]
   21e88:	f043 0301 	orr.w	r3, r3, #1
   21e8c:	807b      	strh	r3, [r7, #2]
   21e8e:	e7cc      	b.n	21e2a <sys_heap_aligned_alloc+0xaa>
		return NULL;
   21e90:	2500      	movs	r5, #0
   21e92:	e7ca      	b.n	21e2a <sys_heap_aligned_alloc+0xaa>
   21e94:	2500      	movs	r5, #0
   21e96:	e7c8      	b.n	21e2a <sys_heap_aligned_alloc+0xaa>
		return NULL;
   21e98:	2500      	movs	r5, #0
   21e9a:	e7c6      	b.n	21e2a <sys_heap_aligned_alloc+0xaa>

00021e9c <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   21e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21e9e:	4603      	mov	r3, r0
	return big_heap_bytes(size) ? 8 : 4;
   21ea0:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
   21ea4:	d32a      	bcc.n	21efc <sys_heap_init+0x60>
   21ea6:	2508      	movs	r5, #8
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   21ea8:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   21eaa:	1dc8      	adds	r0, r1, #7
   21eac:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   21eb0:	440d      	add	r5, r1
   21eb2:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   21eb6:	1a2d      	subs	r5, r5, r0
   21eb8:	08ef      	lsrs	r7, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
   21eba:	4606      	mov	r6, r0
	heap->heap = h;
   21ebc:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
   21ebe:	6087      	str	r7, [r0, #8]
	h->avail_buckets = 0;
   21ec0:	2300      	movs	r3, #0
   21ec2:	60c3      	str	r3, [r0, #12]
	return big_heap(h) ? 8 : 4;
   21ec4:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   21ec8:	d31a      	bcc.n	21f00 <sys_heap_init+0x64>
   21eca:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   21ecc:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   21ece:	eba7 03d3 	sub.w	r3, r7, r3, lsr #3
   21ed2:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
   21ed4:	fab3 f383 	clz	r3, r3

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   21ed8:	f1c3 0c20 	rsb	ip, r3, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   21edc:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
   21ee0:	009b      	lsls	r3, r3, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   21ee2:	f103 0e07 	add.w	lr, r3, #7
   21ee6:	ea4f 01de 	mov.w	r1, lr, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   21eea:	2300      	movs	r3, #0
   21eec:	4563      	cmp	r3, ip
   21eee:	da09      	bge.n	21f04 <sys_heap_init+0x68>
		h->buckets[i].next = 0;
   21ef0:	1d1a      	adds	r2, r3, #4
   21ef2:	2400      	movs	r4, #0
   21ef4:	f846 4022 	str.w	r4, [r6, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   21ef8:	3301      	adds	r3, #1
   21efa:	e7f7      	b.n	21eec <sys_heap_init+0x50>
	return big_heap_bytes(size) ? 8 : 4;
   21efc:	2504      	movs	r5, #4
   21efe:	e7d3      	b.n	21ea8 <sys_heap_init+0xc>
	return big_heap(h) ? 8 : 4;
   21f00:	2304      	movs	r3, #4
   21f02:	e7e3      	b.n	21ecc <sys_heap_init+0x30>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   21f04:	004b      	lsls	r3, r1, #1
	if (big_heap(h)) {
   21f06:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   21f0a:	d333      	bcc.n	21f74 <sys_heap_init+0xd8>
		((uint32_t *)cmem)[f] = val;
   21f0c:	6043      	str	r3, [r0, #4]
	if (big_heap(h)) {
   21f0e:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   21f12:	d331      	bcc.n	21f78 <sys_heap_init+0xdc>
		((uint32_t *)cmem)[f] = val;
   21f14:	2300      	movs	r3, #0
   21f16:	6003      	str	r3, [r0, #0]
	if (big_heap(h)) {
   21f18:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   21f1c:	d32f      	bcc.n	21f7e <sys_heap_init+0xe2>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   21f1e:	6843      	ldr	r3, [r0, #4]
   21f20:	f043 0301 	orr.w	r3, r3, #1
   21f24:	6043      	str	r3, [r0, #4]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   21f26:	1a7a      	subs	r2, r7, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   21f28:	0056      	lsls	r6, r2, #1
	void *cmem = &buf[c];
   21f2a:	f02e 0307 	bic.w	r3, lr, #7
   21f2e:	18c4      	adds	r4, r0, r3
	if (big_heap(h)) {
   21f30:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   21f34:	d328      	bcc.n	21f88 <sys_heap_init+0xec>
		((uint32_t *)cmem)[f] = val;
   21f36:	6066      	str	r6, [r4, #4]
	return big_heap_chunks(h->end_chunk);
   21f38:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   21f3a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   21f3e:	d325      	bcc.n	21f8c <sys_heap_init+0xf0>
		((uint32_t *)cmem)[f] = val;
   21f40:	50c1      	str	r1, [r0, r3]
	void *cmem = &buf[c];
   21f42:	f025 0307 	bic.w	r3, r5, #7
   21f46:	4405      	add	r5, r0
	return big_heap_chunks(h->end_chunk);
   21f48:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   21f4a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   21f4e:	d31f      	bcc.n	21f90 <sys_heap_init+0xf4>
		((uint32_t *)cmem)[f] = val;
   21f50:	2400      	movs	r4, #0
   21f52:	606c      	str	r4, [r5, #4]
	return big_heap_chunks(h->end_chunk);
   21f54:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   21f56:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   21f5a:	d31c      	bcc.n	21f96 <sys_heap_init+0xfa>
		((uint32_t *)cmem)[f] = val;
   21f5c:	50c2      	str	r2, [r0, r3]
	return big_heap_chunks(h->end_chunk);
   21f5e:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   21f60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21f64:	d319      	bcc.n	21f9a <sys_heap_init+0xfe>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   21f66:	686b      	ldr	r3, [r5, #4]
   21f68:	f043 0301 	orr.w	r3, r3, #1
   21f6c:	606b      	str	r3, [r5, #4]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   21f6e:	f7ff fdd2 	bl	21b16 <free_list_add>
}
   21f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		((uint16_t *)cmem)[f] = val;
   21f74:	8043      	strh	r3, [r0, #2]
   21f76:	e7ca      	b.n	21f0e <sys_heap_init+0x72>
   21f78:	2300      	movs	r3, #0
   21f7a:	8003      	strh	r3, [r0, #0]
   21f7c:	e7cc      	b.n	21f18 <sys_heap_init+0x7c>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   21f7e:	8843      	ldrh	r3, [r0, #2]
   21f80:	f043 0301 	orr.w	r3, r3, #1
   21f84:	8043      	strh	r3, [r0, #2]
   21f86:	e7ce      	b.n	21f26 <sys_heap_init+0x8a>
		((uint16_t *)cmem)[f] = val;
   21f88:	8066      	strh	r6, [r4, #2]
   21f8a:	e7d5      	b.n	21f38 <sys_heap_init+0x9c>
   21f8c:	52c1      	strh	r1, [r0, r3]
   21f8e:	e7d8      	b.n	21f42 <sys_heap_init+0xa6>
   21f90:	2400      	movs	r4, #0
   21f92:	806c      	strh	r4, [r5, #2]
   21f94:	e7de      	b.n	21f54 <sys_heap_init+0xb8>
   21f96:	52c2      	strh	r2, [r0, r3]
   21f98:	e7e1      	b.n	21f5e <sys_heap_init+0xc2>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   21f9a:	886b      	ldrh	r3, [r5, #2]
   21f9c:	f043 0301 	orr.w	r3, r3, #1
   21fa0:	806b      	strh	r3, [r5, #2]
   21fa2:	e7e4      	b.n	21f6e <sys_heap_init+0xd2>

00021fa4 <extract_decimal>:
{
   21fa4:	b410      	push	{r4}
   21fa6:	4604      	mov	r4, r0
	const char *sp = *str;
   21fa8:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
   21faa:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   21fac:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   21fae:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   21fb2:	2909      	cmp	r1, #9
   21fb4:	d806      	bhi.n	21fc4 <extract_decimal+0x20>
		val = 10U * val + *sp++ - '0';
   21fb6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   21fba:	3201      	adds	r2, #1
   21fbc:	eb03 0040 	add.w	r0, r3, r0, lsl #1
   21fc0:	3830      	subs	r0, #48	; 0x30
   21fc2:	e7f3      	b.n	21fac <extract_decimal+0x8>
	*str = sp;
   21fc4:	6022      	str	r2, [r4, #0]
}
   21fc6:	bc10      	pop	{r4}
   21fc8:	4770      	bx	lr

00021fca <encode_uint>:
{
   21fca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21fce:	b083      	sub	sp, #12
   21fd0:	4604      	mov	r4, r0
   21fd2:	460d      	mov	r5, r1
   21fd4:	9201      	str	r2, [sp, #4]
   21fd6:	469a      	mov	sl, r3
   21fd8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
   21fdc:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   21fde:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   21fe2:	2b6f      	cmp	r3, #111	; 0x6f
   21fe4:	d00f      	beq.n	22006 <encode_uint+0x3c>
   21fe6:	d906      	bls.n	21ff6 <encode_uint+0x2c>
   21fe8:	2b70      	cmp	r3, #112	; 0x70
   21fea:	d00f      	beq.n	2200c <encode_uint+0x42>
   21fec:	2b78      	cmp	r3, #120	; 0x78
   21fee:	d110      	bne.n	22012 <encode_uint+0x48>
		return 16;
   21ff0:	f04f 0910 	mov.w	r9, #16
   21ff4:	e026      	b.n	22044 <encode_uint+0x7a>
	switch (specifier) {
   21ff6:	2b58      	cmp	r3, #88	; 0x58
   21ff8:	d002      	beq.n	22000 <encode_uint+0x36>
   21ffa:	f04f 090a 	mov.w	r9, #10
   21ffe:	e021      	b.n	22044 <encode_uint+0x7a>
		return 16;
   22000:	f04f 0910 	mov.w	r9, #16
   22004:	e01e      	b.n	22044 <encode_uint+0x7a>
		return 8;
   22006:	f04f 0908 	mov.w	r9, #8
   2200a:	e01b      	b.n	22044 <encode_uint+0x7a>
		return 16;
   2200c:	f04f 0910 	mov.w	r9, #16
   22010:	e018      	b.n	22044 <encode_uint+0x7a>
	switch (specifier) {
   22012:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
   22016:	e015      	b.n	22044 <encode_uint+0x7a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   22018:	f1bb 0f19 	cmp.w	fp, #25
   2201c:	d820      	bhi.n	22060 <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   2201e:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   22020:	3237      	adds	r2, #55	; 0x37
   22022:	b2d2      	uxtb	r2, r2
   22024:	f808 2d01 	strb.w	r2, [r8, #-1]!
		value /= radix;
   22028:	4632      	mov	r2, r6
   2202a:	463b      	mov	r3, r7
   2202c:	4620      	mov	r0, r4
   2202e:	4629      	mov	r1, r5
   22030:	f7de f854 	bl	dc <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
   22034:	42bd      	cmp	r5, r7
   22036:	bf08      	it	eq
   22038:	42b4      	cmpeq	r4, r6
   2203a:	d315      	bcc.n	22068 <encode_uint+0x9e>
   2203c:	45d0      	cmp	r8, sl
   2203e:	d913      	bls.n	22068 <encode_uint+0x9e>
		value /= radix;
   22040:	4604      	mov	r4, r0
   22042:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
   22044:	464e      	mov	r6, r9
   22046:	2700      	movs	r7, #0
   22048:	464a      	mov	r2, r9
   2204a:	463b      	mov	r3, r7
   2204c:	4620      	mov	r0, r4
   2204e:	4629      	mov	r1, r5
   22050:	f7de f844 	bl	dc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   22054:	2a09      	cmp	r2, #9
   22056:	d8df      	bhi.n	22018 <encode_uint+0x4e>
   22058:	b2d2      	uxtb	r2, r2
   2205a:	3230      	adds	r2, #48	; 0x30
   2205c:	b2d2      	uxtb	r2, r2
   2205e:	e7e1      	b.n	22024 <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   22060:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   22062:	3257      	adds	r2, #87	; 0x57
   22064:	b2d2      	uxtb	r2, r2
   22066:	e7dd      	b.n	22024 <encode_uint+0x5a>
	if (conv->flag_hash) {
   22068:	9b01      	ldr	r3, [sp, #4]
   2206a:	781b      	ldrb	r3, [r3, #0]
   2206c:	f013 0f20 	tst.w	r3, #32
   22070:	d005      	beq.n	2207e <encode_uint+0xb4>
		if (radix == 8) {
   22072:	f1b9 0f08 	cmp.w	r9, #8
   22076:	d006      	beq.n	22086 <encode_uint+0xbc>
		} else if (radix == 16) {
   22078:	f1b9 0f10 	cmp.w	r9, #16
   2207c:	d009      	beq.n	22092 <encode_uint+0xc8>
}
   2207e:	4640      	mov	r0, r8
   22080:	b003      	add	sp, #12
   22082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
   22086:	9a01      	ldr	r2, [sp, #4]
   22088:	7893      	ldrb	r3, [r2, #2]
   2208a:	f043 0308 	orr.w	r3, r3, #8
   2208e:	7093      	strb	r3, [r2, #2]
   22090:	e7f5      	b.n	2207e <encode_uint+0xb4>
			conv->altform_0c = true;
   22092:	9a01      	ldr	r2, [sp, #4]
   22094:	7893      	ldrb	r3, [r2, #2]
   22096:	f043 0310 	orr.w	r3, r3, #16
   2209a:	7093      	strb	r3, [r2, #2]
   2209c:	e7ef      	b.n	2207e <encode_uint+0xb4>

0002209e <outs>:
{
   2209e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   220a2:	4607      	mov	r7, r0
   220a4:	460e      	mov	r6, r1
   220a6:	4614      	mov	r4, r2
   220a8:	4698      	mov	r8, r3
	size_t count = 0;
   220aa:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   220ac:	e006      	b.n	220bc <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   220ae:	4631      	mov	r1, r6
   220b0:	f814 0b01 	ldrb.w	r0, [r4], #1
   220b4:	47b8      	blx	r7
		if (rc < 0) {
   220b6:	2800      	cmp	r0, #0
   220b8:	db09      	blt.n	220ce <outs+0x30>
		++count;
   220ba:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   220bc:	4544      	cmp	r4, r8
   220be:	d3f6      	bcc.n	220ae <outs+0x10>
   220c0:	f1b8 0f00 	cmp.w	r8, #0
   220c4:	d102      	bne.n	220cc <outs+0x2e>
   220c6:	7823      	ldrb	r3, [r4, #0]
   220c8:	2b00      	cmp	r3, #0
   220ca:	d1f0      	bne.n	220ae <outs+0x10>
	return (int)count;
   220cc:	4628      	mov	r0, r5
}
   220ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000220d2 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   220d2:	4770      	bx	lr

000220d4 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   220d4:	2300      	movs	r3, #0
   220d6:	6043      	str	r3, [r0, #4]
	list->head = NULL;
   220d8:	6003      	str	r3, [r0, #0]
}
   220da:	4770      	bx	lr

000220dc <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   220dc:	6803      	ldr	r3, [r0, #0]
   220de:	b12b      	cbz	r3, 220ec <log_list_add_tail+0x10>
		list->head = msg;
	} else {
		list->tail->next = msg;
   220e0:	6843      	ldr	r3, [r0, #4]
   220e2:	6019      	str	r1, [r3, #0]
	}

	list->tail = msg;
   220e4:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   220e6:	2300      	movs	r3, #0
   220e8:	600b      	str	r3, [r1, #0]
}
   220ea:	4770      	bx	lr
		list->head = msg;
   220ec:	6001      	str	r1, [r0, #0]
   220ee:	e7f9      	b.n	220e4 <log_list_add_tail+0x8>

000220f0 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   220f0:	6800      	ldr	r0, [r0, #0]
   220f2:	4770      	bx	lr

000220f4 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   220f4:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   220f6:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   220f8:	b108      	cbz	r0, 220fe <log_list_head_get+0xa>
		list->head = list->head->next;
   220fa:	6802      	ldr	r2, [r0, #0]
   220fc:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   220fe:	4770      	bx	lr

00022100 <dummy_timestamp>:
}
   22100:	2000      	movs	r0, #0
   22102:	4770      	bx	lr

00022104 <msg_filter_check>:
}
   22104:	2001      	movs	r0, #1
   22106:	4770      	bx	lr

00022108 <default_get_timestamp>:
{
   22108:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   2210a:	f7f0 fc8b 	bl	12a24 <sys_clock_cycle_get_32>
}
   2210e:	bd08      	pop	{r3, pc}

00022110 <z_log_get_s_mask>:
{
   22110:	b470      	push	{r4, r5, r6}
   22112:	4603      	mov	r3, r0
	uint32_t mask = 0U;
   22114:	2000      	movs	r0, #0
	uint32_t arg = 0U;
   22116:	4605      	mov	r5, r0
	bool arm = false;
   22118:	4604      	mov	r4, r0
	while ((curr = *str++) && arg < nargs) {
   2211a:	e001      	b.n	22120 <z_log_get_s_mask+0x10>
			arm = !arm;
   2211c:	f084 0401 	eor.w	r4, r4, #1
	while ((curr = *str++) && arg < nargs) {
   22120:	f813 2b01 	ldrb.w	r2, [r3], #1
   22124:	b19a      	cbz	r2, 2214e <z_log_get_s_mask+0x3e>
   22126:	428d      	cmp	r5, r1
   22128:	d211      	bcs.n	2214e <z_log_get_s_mask+0x3e>
		if (curr == '%') {
   2212a:	2a25      	cmp	r2, #37	; 0x25
   2212c:	d0f6      	beq.n	2211c <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   2212e:	2c00      	cmp	r4, #0
   22130:	d0f6      	beq.n	22120 <z_log_get_s_mask+0x10>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   22132:	f042 0620 	orr.w	r6, r2, #32
   22136:	3e61      	subs	r6, #97	; 0x61
   22138:	2e19      	cmp	r6, #25
   2213a:	d8f1      	bhi.n	22120 <z_log_get_s_mask+0x10>
			if (curr == 's') {
   2213c:	2a73      	cmp	r2, #115	; 0x73
   2213e:	d002      	beq.n	22146 <z_log_get_s_mask+0x36>
			arg++;
   22140:	3501      	adds	r5, #1
			arm = false;
   22142:	2400      	movs	r4, #0
   22144:	e7ec      	b.n	22120 <z_log_get_s_mask+0x10>
				mask |= BIT(arg);
   22146:	2201      	movs	r2, #1
   22148:	40aa      	lsls	r2, r5
   2214a:	4310      	orrs	r0, r2
   2214c:	e7f8      	b.n	22140 <z_log_get_s_mask+0x30>
}
   2214e:	bc70      	pop	{r4, r5, r6}
   22150:	4770      	bx	lr

00022152 <block_on_alloc>:
}
   22152:	2000      	movs	r0, #0
   22154:	4770      	bx	lr

00022156 <cont_arg_get>:

static log_arg_t cont_arg_get(struct log_msg *msg, uint32_t arg_idx)
{
	struct log_msg_cont *cont;

	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   22156:	2901      	cmp	r1, #1
   22158:	d906      	bls.n	22168 <cont_arg_get+0x12>
		return msg->payload.ext.data.args[arg_idx];
	}


	cont = msg->payload.ext.next;
   2215a:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   2215c:	3902      	subs	r1, #2

	while (arg_idx >= ARGS_CONT_MSG) {
   2215e:	2906      	cmp	r1, #6
   22160:	d907      	bls.n	22172 <cont_arg_get+0x1c>
		arg_idx -= ARGS_CONT_MSG;
   22162:	3907      	subs	r1, #7
		cont = cont->next;
   22164:	681b      	ldr	r3, [r3, #0]
   22166:	e7fa      	b.n	2215e <cont_arg_get+0x8>
		return msg->payload.ext.data.args[arg_idx];
   22168:	3104      	adds	r1, #4
   2216a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   2216e:	6888      	ldr	r0, [r1, #8]
   22170:	4770      	bx	lr
	}

	return cont->payload.args[arg_idx];
   22172:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   22176:	6848      	ldr	r0, [r1, #4]
}
   22178:	4770      	bx	lr

0002217a <copy_args_to_msg>:

	return msg;
}

static void copy_args_to_msg(struct  log_msg *msg, log_arg_t *args, uint32_t nargs)
{
   2217a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2217e:	460d      	mov	r5, r1
   22180:	4614      	mov	r4, r2
	struct log_msg_cont *cont = msg->payload.ext.next;
   22182:	6946      	ldr	r6, [r0, #20]

	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   22184:	2a03      	cmp	r2, #3
   22186:	d917      	bls.n	221b8 <copy_args_to_msg+0x3e>
		(void)memcpy(msg->payload.ext.data.args, args,
   22188:	2208      	movs	r2, #8
   2218a:	3018      	adds	r0, #24
   2218c:	f002 fc6e 	bl	24a6c <memcpy>
		       LOG_MSG_NARGS_HEAD_CHUNK * sizeof(log_arg_t));
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   22190:	3c02      	subs	r4, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   22192:	3508      	adds	r5, #8
		(void)memcpy(msg->payload.single.args, args,
			     nargs * sizeof(log_arg_t));
		nargs  = 0U;
	}

	while (nargs != 0U) {
   22194:	b1b4      	cbz	r4, 221c4 <copy_args_to_msg+0x4a>
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   22196:	46a0      	mov	r8, r4
   22198:	2c07      	cmp	r4, #7
   2219a:	bf28      	it	cs
   2219c:	f04f 0807 	movcs.w	r8, #7

		(void)memcpy(cont->payload.args, args,
   221a0:	ea4f 0788 	mov.w	r7, r8, lsl #2
   221a4:	463a      	mov	r2, r7
   221a6:	4629      	mov	r1, r5
   221a8:	1d30      	adds	r0, r6, #4
   221aa:	f002 fc5f 	bl	24a6c <memcpy>
			     cpy_args * sizeof(log_arg_t));
		nargs -= cpy_args;
   221ae:	eba4 0408 	sub.w	r4, r4, r8
		args += cpy_args;
   221b2:	443d      	add	r5, r7
		cont = cont->next;
   221b4:	6836      	ldr	r6, [r6, #0]
   221b6:	e7ed      	b.n	22194 <copy_args_to_msg+0x1a>
		(void)memcpy(msg->payload.single.args, args,
   221b8:	0092      	lsls	r2, r2, #2
   221ba:	3014      	adds	r0, #20
   221bc:	f002 fc56 	bl	24a6c <memcpy>
		nargs  = 0U;
   221c0:	2400      	movs	r4, #0
   221c2:	e7e7      	b.n	22194 <copy_args_to_msg+0x1a>
	}
}
   221c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000221c8 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   221c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   221cc:	461c      	mov	r4, r3
   221ce:	f89d 9020 	ldrb.w	r9, [sp, #32]
	uint32_t available_len = msg->hdr.params.hexdump.length;
   221d2:	8903      	ldrh	r3, [r0, #8]
   221d4:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   221d8:	42a3      	cmp	r3, r4
   221da:	d91f      	bls.n	2221c <log_msg_hexdump_data_op+0x54>
   221dc:	4688      	mov	r8, r1
		*length = 0;
		return;
	}

	if ((offset + *length) > available_len) {
   221de:	6811      	ldr	r1, [r2, #0]
   221e0:	4421      	add	r1, r4
   221e2:	4299      	cmp	r1, r3
   221e4:	d901      	bls.n	221ea <log_msg_hexdump_data_op+0x22>
		*length = available_len - offset;
   221e6:	1b19      	subs	r1, r3, r4
   221e8:	6011      	str	r1, [r2, #0]
	}

	req_len = *length;
   221ea:	6817      	ldr	r7, [r2, #0]

	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   221ec:	2b0c      	cmp	r3, #12
   221ee:	d919      	bls.n	22224 <log_msg_hexdump_data_op+0x5c>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
		head_data = msg->payload.ext.data.bytes;
   221f0:	f100 0c18 	add.w	ip, r0, #24
		cont = msg->payload.ext.next;
   221f4:	6946      	ldr	r6, [r0, #20]
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   221f6:	2308      	movs	r3, #8
		head_data = msg->payload.single.bytes;
		chunk_len = available_len;

	}

	if (offset < chunk_len) {
   221f8:	42a3      	cmp	r3, r4
   221fa:	d91e      	bls.n	2223a <log_msg_hexdump_data_op+0x72>
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   221fc:	42bb      	cmp	r3, r7
   221fe:	bf28      	it	cs
   22200:	463b      	movcs	r3, r7
   22202:	461d      	mov	r5, r3

		if (put_op) {
   22204:	f1b9 0f00 	cmp.w	r9, #0
   22208:	d010      	beq.n	2222c <log_msg_hexdump_data_op+0x64>
			(void)memcpy(&head_data[offset], data, cpy_len);
   2220a:	461a      	mov	r2, r3
   2220c:	4641      	mov	r1, r8
   2220e:	eb0c 0004 	add.w	r0, ip, r4
   22212:	f002 fc2b 	bl	24a6c <memcpy>
		} else {
			(void)memcpy(data, &head_data[offset], cpy_len);
		}

		req_len -= cpy_len;
   22216:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
   22218:	44a8      	add	r8, r5
   2221a:	e021      	b.n	22260 <log_msg_hexdump_data_op+0x98>
		*length = 0;
   2221c:	2300      	movs	r3, #0
   2221e:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   22220:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		head_data = msg->payload.single.bytes;
   22224:	f100 0c14 	add.w	ip, r0, #20
	struct log_msg_cont *cont = NULL;
   22228:	2600      	movs	r6, #0
   2222a:	e7e5      	b.n	221f8 <log_msg_hexdump_data_op+0x30>
			(void)memcpy(data, &head_data[offset], cpy_len);
   2222c:	461a      	mov	r2, r3
   2222e:	eb0c 0104 	add.w	r1, ip, r4
   22232:	4640      	mov	r0, r8
   22234:	f002 fc1a 	bl	24a6c <memcpy>
   22238:	e7ed      	b.n	22216 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   2223a:	1ae4      	subs	r4, r4, r3
		if (cont == NULL) {
   2223c:	b91e      	cbnz	r6, 22246 <log_msg_hexdump_data_op+0x7e>
			cont = msg->payload.ext.next;
   2223e:	6946      	ldr	r6, [r0, #20]
   22240:	e001      	b.n	22246 <log_msg_hexdump_data_op+0x7e>
			cont = cont->next;
   22242:	6836      	ldr	r6, [r6, #0]
			offset -= chunk_len;
   22244:	3c1c      	subs	r4, #28
		while (offset >= chunk_len) {
   22246:	2c1b      	cmp	r4, #27
   22248:	d8fb      	bhi.n	22242 <log_msg_hexdump_data_op+0x7a>
   2224a:	e009      	b.n	22260 <log_msg_hexdump_data_op+0x98>
			(void)memcpy(data, &cont->payload.bytes[offset],
   2224c:	1931      	adds	r1, r6, r4
   2224e:	462a      	mov	r2, r5
   22250:	3104      	adds	r1, #4
   22252:	4640      	mov	r0, r8
   22254:	f002 fc0a 	bl	24a6c <memcpy>
		cont = cont->next;
   22258:	6836      	ldr	r6, [r6, #0]
		req_len -= cpy_len;
   2225a:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
   2225c:	44a8      	add	r8, r5
		offset = 0;
   2225e:	2400      	movs	r4, #0
	while ((req_len > 0) && (cont != NULL)) {
   22260:	2f00      	cmp	r7, #0
   22262:	d0dd      	beq.n	22220 <log_msg_hexdump_data_op+0x58>
   22264:	2e00      	cmp	r6, #0
   22266:	d0db      	beq.n	22220 <log_msg_hexdump_data_op+0x58>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   22268:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   2226c:	42bd      	cmp	r5, r7
   2226e:	bf28      	it	cs
   22270:	463d      	movcs	r5, r7
		if (put_op) {
   22272:	f1b9 0f00 	cmp.w	r9, #0
   22276:	d0e9      	beq.n	2224c <log_msg_hexdump_data_op+0x84>
			(void)memcpy(&cont->payload.bytes[offset],
   22278:	1930      	adds	r0, r6, r4
   2227a:	462a      	mov	r2, r5
   2227c:	4641      	mov	r1, r8
   2227e:	3004      	adds	r0, #4
   22280:	f002 fbf4 	bl	24a6c <memcpy>
   22284:	e7e8      	b.n	22258 <log_msg_hexdump_data_op+0x90>

00022286 <log_msg_get>:
	atomic_inc(&msg->hdr.ref_cnt);
   22286:	3004      	adds	r0, #4
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   22288:	f3bf 8f5b 	dmb	ish
   2228c:	e850 3f00 	ldrex	r3, [r0]
   22290:	3301      	adds	r3, #1
   22292:	e840 3200 	strex	r2, r3, [r0]
   22296:	2a00      	cmp	r2, #0
   22298:	d1f8      	bne.n	2228c <log_msg_get+0x6>
   2229a:	f3bf 8f5b 	dmb	ish
}
   2229e:	4770      	bx	lr

000222a0 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   222a0:	7a40      	ldrb	r0, [r0, #9]
}
   222a2:	0900      	lsrs	r0, r0, #4
   222a4:	4770      	bx	lr

000222a6 <log_msg_arg_get>:
{
   222a6:	b508      	push	{r3, lr}
	if (arg_idx >= msg->hdr.params.std.nargs) {
   222a8:	7a43      	ldrb	r3, [r0, #9]
   222aa:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   222ae:	d20a      	bcs.n	222c6 <log_msg_arg_get+0x20>
   222b0:	091a      	lsrs	r2, r3, #4
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   222b2:	2a03      	cmp	r2, #3
   222b4:	d804      	bhi.n	222c0 <log_msg_arg_get+0x1a>
		arg = msg->payload.single.args[arg_idx];
   222b6:	3104      	adds	r1, #4
   222b8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   222bc:	6840      	ldr	r0, [r0, #4]
   222be:	e003      	b.n	222c8 <log_msg_arg_get+0x22>
		arg = cont_arg_get(msg, arg_idx);
   222c0:	f7ff ff49 	bl	22156 <cont_arg_get>
   222c4:	e000      	b.n	222c8 <log_msg_arg_get+0x22>
		return 0;
   222c6:	2000      	movs	r0, #0
}
   222c8:	bd08      	pop	{r3, pc}

000222ca <log_msg_str_get>:
}
   222ca:	6900      	ldr	r0, [r0, #16]
   222cc:	4770      	bx	lr

000222ce <log_msg_put>:
{
   222ce:	b508      	push	{r3, lr}
	atomic_dec(&msg->hdr.ref_cnt);
   222d0:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   222d2:	f3bf 8f5b 	dmb	ish
   222d6:	e853 2f00 	ldrex	r2, [r3]
   222da:	3a01      	subs	r2, #1
   222dc:	e843 2100 	strex	r1, r2, [r3]
   222e0:	2900      	cmp	r1, #0
   222e2:	d1f8      	bne.n	222d6 <log_msg_put+0x8>
   222e4:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   222e8:	6843      	ldr	r3, [r0, #4]
   222ea:	b103      	cbz	r3, 222ee <log_msg_put+0x20>
}
   222ec:	bd08      	pop	{r3, pc}
		msg_free(msg);
   222ee:	f7ef f8d5 	bl	1149c <msg_free>
}
   222f2:	e7fb      	b.n	222ec <log_msg_put+0x1e>

000222f4 <msg_alloc>:
{
   222f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   222f6:	4605      	mov	r5, r0
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   222f8:	f7ef f8b4 	bl	11464 <log_msg_chunk_alloc>
	if (msg != NULL) {
   222fc:	4607      	mov	r7, r0
   222fe:	b140      	cbz	r0, 22312 <msg_alloc+0x1e>
		msg->hdr.ref_cnt = 1;
   22300:	2301      	movs	r3, #1
   22302:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   22304:	2200      	movs	r2, #0
   22306:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   22308:	f04f 0300 	mov.w	r3, #0
   2230c:	f362 0300 	bfi	r3, r2, #0, #1
   22310:	7203      	strb	r3, [r0, #8]
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   22312:	b1f7      	cbz	r7, 22352 <msg_alloc+0x5e>
   22314:	2d03      	cmp	r5, #3
   22316:	d91c      	bls.n	22352 <msg_alloc+0x5e>
	msg->hdr.params.std.nargs = 0U;
   22318:	7a7b      	ldrb	r3, [r7, #9]
   2231a:	f36f 1307 	bfc	r3, #4, #4
   2231e:	727b      	strb	r3, [r7, #9]
	msg->hdr.params.generic.ext = 1;
   22320:	7a3b      	ldrb	r3, [r7, #8]
   22322:	f043 0302 	orr.w	r3, r3, #2
   22326:	723b      	strb	r3, [r7, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   22328:	3d02      	subs	r5, #2
	next = &msg->payload.ext.next;
   2232a:	f107 0614 	add.w	r6, r7, #20
	*next = NULL;
   2232e:	2300      	movs	r3, #0
   22330:	617b      	str	r3, [r7, #20]
	while (n > 0) {
   22332:	2d00      	cmp	r5, #0
   22334:	dd0d      	ble.n	22352 <msg_alloc+0x5e>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   22336:	f7ef f895 	bl	11464 <log_msg_chunk_alloc>
		if (cont == NULL) {
   2233a:	4604      	mov	r4, r0
   2233c:	b128      	cbz	r0, 2234a <msg_alloc+0x56>
		*next = cont;
   2233e:	6030      	str	r0, [r6, #0]
		cont->next = NULL;
   22340:	2300      	movs	r3, #0
   22342:	6003      	str	r3, [r0, #0]
		next = &cont->next;
   22344:	4606      	mov	r6, r0
		n -= ARGS_CONT_MSG;
   22346:	3d07      	subs	r5, #7
   22348:	e7f3      	b.n	22332 <msg_alloc+0x3e>
			msg_free(msg);
   2234a:	4638      	mov	r0, r7
   2234c:	f7ef f8a6 	bl	1149c <msg_free>
			return NULL;
   22350:	4627      	mov	r7, r4
}
   22352:	4638      	mov	r0, r7
   22354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00022356 <log_msg_create_n>:
{
   22356:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22358:	4607      	mov	r7, r0
   2235a:	460e      	mov	r6, r1
   2235c:	4614      	mov	r4, r2
	msg = msg_alloc(nargs);
   2235e:	4610      	mov	r0, r2
   22360:	f7ff ffc8 	bl	222f4 <msg_alloc>
	if (msg != NULL) {
   22364:	4605      	mov	r5, r0
   22366:	b140      	cbz	r0, 2237a <log_msg_create_n+0x24>
		msg->str = str;
   22368:	6107      	str	r7, [r0, #16]
		msg->hdr.params.std.nargs = nargs;
   2236a:	7a43      	ldrb	r3, [r0, #9]
   2236c:	f364 1307 	bfi	r3, r4, #4, #4
   22370:	7243      	strb	r3, [r0, #9]
		copy_args_to_msg(msg, args, nargs);
   22372:	4622      	mov	r2, r4
   22374:	4631      	mov	r1, r6
   22376:	f7ff ff00 	bl	2217a <copy_args_to_msg>
}
   2237a:	4628      	mov	r0, r5
   2237c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002237e <log_msg_hexdump_create>:
{
   2237e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22382:	4606      	mov	r6, r0
   22384:	460f      	mov	r7, r1
   22386:	4614      	mov	r4, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   22388:	f643 75ff 	movw	r5, #16383	; 0x3fff
   2238c:	4295      	cmp	r5, r2
   2238e:	bf28      	it	cs
   22390:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
   22392:	f7ef f867 	bl	11464 <log_msg_chunk_alloc>
	if (msg == NULL) {
   22396:	4681      	mov	r9, r0
   22398:	2800      	cmp	r0, #0
   2239a:	d045      	beq.n	22428 <log_msg_hexdump_create+0xaa>
	msg->hdr.ref_cnt = 1;
   2239c:	2301      	movs	r3, #1
   2239e:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   223a0:	7a03      	ldrb	r3, [r0, #8]
   223a2:	f043 0301 	orr.w	r3, r3, #1
   223a6:	7203      	strb	r3, [r0, #8]
	msg->hdr.params.hexdump.length = length;
   223a8:	8903      	ldrh	r3, [r0, #8]
   223aa:	f365 038f 	bfi	r3, r5, #2, #14
   223ae:	8103      	strh	r3, [r0, #8]
	msg->str = str;
   223b0:	6106      	str	r6, [r0, #16]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   223b2:	2c0c      	cmp	r4, #12
   223b4:	d927      	bls.n	22406 <log_msg_hexdump_create+0x88>
		(void)memcpy(msg->payload.ext.data.bytes,
   223b6:	2208      	movs	r2, #8
   223b8:	4639      	mov	r1, r7
   223ba:	3018      	adds	r0, #24
   223bc:	f002 fb56 	bl	24a6c <memcpy>
		msg->payload.ext.next = NULL;
   223c0:	2300      	movs	r3, #0
   223c2:	f8c9 3014 	str.w	r3, [r9, #20]
		msg->hdr.params.generic.ext = 1;
   223c6:	f899 3008 	ldrb.w	r3, [r9, #8]
   223ca:	f043 0302 	orr.w	r3, r3, #2
   223ce:	f889 3008 	strb.w	r3, [r9, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   223d2:	3708      	adds	r7, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   223d4:	3d08      	subs	r5, #8
	prev_cont = &msg->payload.ext.next;
   223d6:	f109 0814 	add.w	r8, r9, #20
	while (length > 0) {
   223da:	b32d      	cbz	r5, 22428 <log_msg_hexdump_create+0xaa>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   223dc:	f7ef f842 	bl	11464 <log_msg_chunk_alloc>
		if (cont == NULL) {
   223e0:	4604      	mov	r4, r0
   223e2:	b1e8      	cbz	r0, 22420 <log_msg_hexdump_create+0xa2>
		*prev_cont = cont;
   223e4:	f8c8 0000 	str.w	r0, [r8]
		cont->next = NULL;
   223e8:	2300      	movs	r3, #0
   223ea:	6003      	str	r3, [r0, #0]
		prev_cont = &cont->next;
   223ec:	4680      	mov	r8, r0
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
   223ee:	462e      	mov	r6, r5
   223f0:	2d1c      	cmp	r5, #28
   223f2:	bf28      	it	cs
   223f4:	261c      	movcs	r6, #28
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   223f6:	4632      	mov	r2, r6
   223f8:	4639      	mov	r1, r7
   223fa:	3004      	adds	r0, #4
   223fc:	f002 fb36 	bl	24a6c <memcpy>
		data += chunk_length;
   22400:	4437      	add	r7, r6
		length -= chunk_length;
   22402:	1bad      	subs	r5, r5, r6
   22404:	e7e9      	b.n	223da <log_msg_hexdump_create+0x5c>
		(void)memcpy(msg->payload.single.bytes, data, length);
   22406:	462a      	mov	r2, r5
   22408:	4639      	mov	r1, r7
   2240a:	3014      	adds	r0, #20
   2240c:	f002 fb2e 	bl	24a6c <memcpy>
		msg->hdr.params.generic.ext = 0;
   22410:	f899 3008 	ldrb.w	r3, [r9, #8]
   22414:	f36f 0341 	bfc	r3, #1, #1
   22418:	f889 3008 	strb.w	r3, [r9, #8]
		length = 0U;
   2241c:	2500      	movs	r5, #0
   2241e:	e7da      	b.n	223d6 <log_msg_hexdump_create+0x58>
			msg_free(msg);
   22420:	4648      	mov	r0, r9
   22422:	f7ef f83b 	bl	1149c <msg_free>
			return NULL;
   22426:	46a1      	mov	r9, r4
}
   22428:	4648      	mov	r0, r9
   2242a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002242e <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   2242e:	b510      	push	{r4, lr}
   22430:	b082      	sub	sp, #8
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   22432:	2400      	movs	r4, #0
   22434:	9400      	str	r4, [sp, #0]
   22436:	f7ff fec7 	bl	221c8 <log_msg_hexdump_data_op>
}
   2243a:	b002      	add	sp, #8
   2243c:	bd10      	pop	{r4, pc}

0002243e <buffer_write>:
{
   2243e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22440:	4607      	mov	r7, r0
   22442:	460d      	mov	r5, r1
   22444:	4614      	mov	r4, r2
   22446:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
   22448:	4632      	mov	r2, r6
   2244a:	4621      	mov	r1, r4
   2244c:	4628      	mov	r0, r5
   2244e:	47b8      	blx	r7
		buf += processed;
   22450:	4405      	add	r5, r0
	} while (len != 0);
   22452:	1a24      	subs	r4, r4, r0
   22454:	d1f8      	bne.n	22448 <buffer_write+0xa>
}
   22456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00022458 <color_prefix>:
{
   22458:	b508      	push	{r3, lr}
   2245a:	4613      	mov	r3, r2
	color_print(output, color, true, level);
   2245c:	2201      	movs	r2, #1
   2245e:	f7ef f8b5 	bl	115cc <color_print>
}
   22462:	bd08      	pop	{r3, pc}

00022464 <color_postfix>:
{
   22464:	b508      	push	{r3, lr}
   22466:	4613      	mov	r3, r2
	color_print(output, color, false, level);
   22468:	2200      	movs	r2, #0
   2246a:	f7ef f8af 	bl	115cc <color_print>
}
   2246e:	bd08      	pop	{r3, pc}

00022470 <postfix_print>:
{
   22470:	b538      	push	{r3, r4, r5, lr}
   22472:	4605      	mov	r5, r0
   22474:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
   22476:	f001 0101 	and.w	r1, r1, #1
   2247a:	f7ff fff3 	bl	22464 <color_postfix>
	newline_print(output, flags);
   2247e:	4621      	mov	r1, r4
   22480:	4628      	mov	r0, r5
   22482:	f7ef f8b9 	bl	115f8 <newline_print>
}
   22486:	bd38      	pop	{r3, r4, r5, pc}

00022488 <prefix_print>:
{
   22488:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2248c:	b083      	sub	sp, #12
   2248e:	4604      	mov	r4, r0
   22490:	4615      	mov	r5, r2
   22492:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   22496:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   2249a:	f3c1 08c0 	ubfx	r8, r1, #3, #1
	if (stamp) {
   2249e:	f011 0702 	ands.w	r7, r1, #2
   224a2:	d113      	bne.n	224cc <prefix_print+0x44>
		color_prefix(output, colors_on, level);
   224a4:	4632      	mov	r2, r6
   224a6:	4649      	mov	r1, r9
   224a8:	4620      	mov	r0, r4
   224aa:	f7ff ffd5 	bl	22458 <color_prefix>
	length += ids_print(output, level_on, func_on,
   224ae:	9601      	str	r6, [sp, #4]
   224b0:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
   224b4:	9300      	str	r3, [sp, #0]
   224b6:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   224ba:	462a      	mov	r2, r5
   224bc:	4641      	mov	r1, r8
   224be:	4620      	mov	r0, r4
   224c0:	f7ef f90c 	bl	116dc <ids_print>
}
   224c4:	4438      	add	r0, r7
   224c6:	b003      	add	sp, #12
   224c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		length += timestamp_print(output, flags, timestamp);
   224cc:	461a      	mov	r2, r3
   224ce:	f7ef f837 	bl	11540 <timestamp_print>
   224d2:	4607      	mov	r7, r0
   224d4:	e7e6      	b.n	224a4 <prefix_print+0x1c>

000224d6 <std_print>:
{
   224d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   224da:	b08e      	sub	sp, #56	; 0x38
   224dc:	af0e      	add	r7, sp, #56	; 0x38
   224de:	4606      	mov	r6, r0
   224e0:	4689      	mov	r9, r1
	const char *str = log_msg_str_get(msg);
   224e2:	f7ff fef2 	bl	222ca <log_msg_str_get>
   224e6:	4682      	mov	sl, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   224e8:	4630      	mov	r0, r6
   224ea:	f7ff fed9 	bl	222a0 <log_msg_nargs_get>
   224ee:	4680      	mov	r8, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   224f0:	0083      	lsls	r3, r0, #2
   224f2:	3307      	adds	r3, #7
   224f4:	f023 0307 	bic.w	r3, r3, #7
   224f8:	ebad 0d03 	sub.w	sp, sp, r3
   224fc:	ad0e      	add	r5, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   224fe:	2400      	movs	r4, #0
   22500:	4544      	cmp	r4, r8
   22502:	d207      	bcs.n	22514 <std_print+0x3e>
		args[i] = log_msg_arg_get(msg, i);
   22504:	4621      	mov	r1, r4
   22506:	4630      	mov	r0, r6
   22508:	f7ff fecd 	bl	222a6 <log_msg_arg_get>
   2250c:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	for (i = 0; i < nargs; i++) {
   22510:	3401      	adds	r4, #1
   22512:	e7f5      	b.n	22500 <std_print+0x2a>
	switch (log_msg_nargs_get(msg)) {
   22514:	4630      	mov	r0, r6
   22516:	f7ff fec3 	bl	222a0 <log_msg_nargs_get>
   2251a:	280f      	cmp	r0, #15
   2251c:	d815      	bhi.n	2254a <std_print+0x74>
   2251e:	e8df f010 	tbh	[pc, r0, lsl #1]
   22522:	0010      	.short	0x0010
   22524:	001d0017 	.word	0x001d0017
   22528:	002d0024 	.word	0x002d0024
   2252c:	00450038 	.word	0x00450038
   22530:	00650054 	.word	0x00650054
   22534:	008d0078 	.word	0x008d0078
   22538:	00bd00a4 	.word	0x00bd00a4
   2253c:	00f500d8 	.word	0x00f500d8
   22540:	0114      	.short	0x0114
		print_formatted(output, str);
   22542:	4651      	mov	r1, sl
   22544:	4648      	mov	r0, r9
   22546:	f7ee ffe9 	bl	1151c <print_formatted>
}
   2254a:	46bd      	mov	sp, r7
   2254c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   22550:	682a      	ldr	r2, [r5, #0]
   22552:	4651      	mov	r1, sl
   22554:	4648      	mov	r0, r9
   22556:	f7ee ffe1 	bl	1151c <print_formatted>
		break;
   2255a:	e7f6      	b.n	2254a <std_print+0x74>
		print_formatted(output, str, args[0], args[1]);
   2255c:	686b      	ldr	r3, [r5, #4]
   2255e:	682a      	ldr	r2, [r5, #0]
   22560:	4651      	mov	r1, sl
   22562:	4648      	mov	r0, r9
   22564:	f7ee ffda 	bl	1151c <print_formatted>
		break;
   22568:	e7ef      	b.n	2254a <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2]);
   2256a:	686b      	ldr	r3, [r5, #4]
   2256c:	682a      	ldr	r2, [r5, #0]
   2256e:	68a9      	ldr	r1, [r5, #8]
   22570:	9100      	str	r1, [sp, #0]
   22572:	4651      	mov	r1, sl
   22574:	4648      	mov	r0, r9
   22576:	f7ee ffd1 	bl	1151c <print_formatted>
		break;
   2257a:	e7e6      	b.n	2254a <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   2257c:	686b      	ldr	r3, [r5, #4]
   2257e:	682a      	ldr	r2, [r5, #0]
   22580:	68e9      	ldr	r1, [r5, #12]
   22582:	9101      	str	r1, [sp, #4]
   22584:	68a9      	ldr	r1, [r5, #8]
   22586:	9100      	str	r1, [sp, #0]
   22588:	4651      	mov	r1, sl
   2258a:	4648      	mov	r0, r9
   2258c:	f7ee ffc6 	bl	1151c <print_formatted>
		break;
   22590:	e7db      	b.n	2254a <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   22592:	686b      	ldr	r3, [r5, #4]
   22594:	682a      	ldr	r2, [r5, #0]
   22596:	6929      	ldr	r1, [r5, #16]
   22598:	9102      	str	r1, [sp, #8]
   2259a:	68e9      	ldr	r1, [r5, #12]
   2259c:	9101      	str	r1, [sp, #4]
   2259e:	68a9      	ldr	r1, [r5, #8]
   225a0:	9100      	str	r1, [sp, #0]
   225a2:	4651      	mov	r1, sl
   225a4:	4648      	mov	r0, r9
   225a6:	f7ee ffb9 	bl	1151c <print_formatted>
		break;
   225aa:	e7ce      	b.n	2254a <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   225ac:	686b      	ldr	r3, [r5, #4]
   225ae:	682a      	ldr	r2, [r5, #0]
   225b0:	6969      	ldr	r1, [r5, #20]
   225b2:	9103      	str	r1, [sp, #12]
   225b4:	6929      	ldr	r1, [r5, #16]
   225b6:	9102      	str	r1, [sp, #8]
   225b8:	68e9      	ldr	r1, [r5, #12]
   225ba:	9101      	str	r1, [sp, #4]
   225bc:	68a9      	ldr	r1, [r5, #8]
   225be:	9100      	str	r1, [sp, #0]
   225c0:	4651      	mov	r1, sl
   225c2:	4648      	mov	r0, r9
   225c4:	f7ee ffaa 	bl	1151c <print_formatted>
		break;
   225c8:	e7bf      	b.n	2254a <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   225ca:	686b      	ldr	r3, [r5, #4]
   225cc:	682a      	ldr	r2, [r5, #0]
   225ce:	69a9      	ldr	r1, [r5, #24]
   225d0:	9104      	str	r1, [sp, #16]
   225d2:	6969      	ldr	r1, [r5, #20]
   225d4:	9103      	str	r1, [sp, #12]
   225d6:	6929      	ldr	r1, [r5, #16]
   225d8:	9102      	str	r1, [sp, #8]
   225da:	68e9      	ldr	r1, [r5, #12]
   225dc:	9101      	str	r1, [sp, #4]
   225de:	68a9      	ldr	r1, [r5, #8]
   225e0:	9100      	str	r1, [sp, #0]
   225e2:	4651      	mov	r1, sl
   225e4:	4648      	mov	r0, r9
   225e6:	f7ee ff99 	bl	1151c <print_formatted>
		break;
   225ea:	e7ae      	b.n	2254a <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   225ec:	686b      	ldr	r3, [r5, #4]
   225ee:	682a      	ldr	r2, [r5, #0]
   225f0:	69e9      	ldr	r1, [r5, #28]
   225f2:	9105      	str	r1, [sp, #20]
   225f4:	69a9      	ldr	r1, [r5, #24]
   225f6:	9104      	str	r1, [sp, #16]
   225f8:	6969      	ldr	r1, [r5, #20]
   225fa:	9103      	str	r1, [sp, #12]
   225fc:	6929      	ldr	r1, [r5, #16]
   225fe:	9102      	str	r1, [sp, #8]
   22600:	68e9      	ldr	r1, [r5, #12]
   22602:	9101      	str	r1, [sp, #4]
   22604:	68a9      	ldr	r1, [r5, #8]
   22606:	9100      	str	r1, [sp, #0]
   22608:	4651      	mov	r1, sl
   2260a:	4648      	mov	r0, r9
   2260c:	f7ee ff86 	bl	1151c <print_formatted>
		break;
   22610:	e79b      	b.n	2254a <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   22612:	686b      	ldr	r3, [r5, #4]
   22614:	682a      	ldr	r2, [r5, #0]
   22616:	6a29      	ldr	r1, [r5, #32]
   22618:	9106      	str	r1, [sp, #24]
   2261a:	69e9      	ldr	r1, [r5, #28]
   2261c:	9105      	str	r1, [sp, #20]
   2261e:	69a9      	ldr	r1, [r5, #24]
   22620:	9104      	str	r1, [sp, #16]
   22622:	6969      	ldr	r1, [r5, #20]
   22624:	9103      	str	r1, [sp, #12]
   22626:	6929      	ldr	r1, [r5, #16]
   22628:	9102      	str	r1, [sp, #8]
   2262a:	68e9      	ldr	r1, [r5, #12]
   2262c:	9101      	str	r1, [sp, #4]
   2262e:	68a9      	ldr	r1, [r5, #8]
   22630:	9100      	str	r1, [sp, #0]
   22632:	4651      	mov	r1, sl
   22634:	4648      	mov	r0, r9
   22636:	f7ee ff71 	bl	1151c <print_formatted>
		break;
   2263a:	e786      	b.n	2254a <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   2263c:	686b      	ldr	r3, [r5, #4]
   2263e:	682a      	ldr	r2, [r5, #0]
   22640:	6a69      	ldr	r1, [r5, #36]	; 0x24
   22642:	9107      	str	r1, [sp, #28]
   22644:	6a29      	ldr	r1, [r5, #32]
   22646:	9106      	str	r1, [sp, #24]
   22648:	69e9      	ldr	r1, [r5, #28]
   2264a:	9105      	str	r1, [sp, #20]
   2264c:	69a9      	ldr	r1, [r5, #24]
   2264e:	9104      	str	r1, [sp, #16]
   22650:	6969      	ldr	r1, [r5, #20]
   22652:	9103      	str	r1, [sp, #12]
   22654:	6929      	ldr	r1, [r5, #16]
   22656:	9102      	str	r1, [sp, #8]
   22658:	68e9      	ldr	r1, [r5, #12]
   2265a:	9101      	str	r1, [sp, #4]
   2265c:	68a9      	ldr	r1, [r5, #8]
   2265e:	9100      	str	r1, [sp, #0]
   22660:	4651      	mov	r1, sl
   22662:	4648      	mov	r0, r9
   22664:	f7ee ff5a 	bl	1151c <print_formatted>
		break;
   22668:	e76f      	b.n	2254a <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   2266a:	686b      	ldr	r3, [r5, #4]
   2266c:	682a      	ldr	r2, [r5, #0]
   2266e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   22670:	9108      	str	r1, [sp, #32]
   22672:	6a69      	ldr	r1, [r5, #36]	; 0x24
   22674:	9107      	str	r1, [sp, #28]
   22676:	6a29      	ldr	r1, [r5, #32]
   22678:	9106      	str	r1, [sp, #24]
   2267a:	69e9      	ldr	r1, [r5, #28]
   2267c:	9105      	str	r1, [sp, #20]
   2267e:	69a9      	ldr	r1, [r5, #24]
   22680:	9104      	str	r1, [sp, #16]
   22682:	6969      	ldr	r1, [r5, #20]
   22684:	9103      	str	r1, [sp, #12]
   22686:	6929      	ldr	r1, [r5, #16]
   22688:	9102      	str	r1, [sp, #8]
   2268a:	68e9      	ldr	r1, [r5, #12]
   2268c:	9101      	str	r1, [sp, #4]
   2268e:	68a9      	ldr	r1, [r5, #8]
   22690:	9100      	str	r1, [sp, #0]
   22692:	4651      	mov	r1, sl
   22694:	4648      	mov	r0, r9
   22696:	f7ee ff41 	bl	1151c <print_formatted>
		break;
   2269a:	e756      	b.n	2254a <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   2269c:	686b      	ldr	r3, [r5, #4]
   2269e:	682a      	ldr	r2, [r5, #0]
   226a0:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   226a2:	9109      	str	r1, [sp, #36]	; 0x24
   226a4:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   226a6:	9108      	str	r1, [sp, #32]
   226a8:	6a69      	ldr	r1, [r5, #36]	; 0x24
   226aa:	9107      	str	r1, [sp, #28]
   226ac:	6a29      	ldr	r1, [r5, #32]
   226ae:	9106      	str	r1, [sp, #24]
   226b0:	69e9      	ldr	r1, [r5, #28]
   226b2:	9105      	str	r1, [sp, #20]
   226b4:	69a9      	ldr	r1, [r5, #24]
   226b6:	9104      	str	r1, [sp, #16]
   226b8:	6969      	ldr	r1, [r5, #20]
   226ba:	9103      	str	r1, [sp, #12]
   226bc:	6929      	ldr	r1, [r5, #16]
   226be:	9102      	str	r1, [sp, #8]
   226c0:	68e9      	ldr	r1, [r5, #12]
   226c2:	9101      	str	r1, [sp, #4]
   226c4:	68a9      	ldr	r1, [r5, #8]
   226c6:	9100      	str	r1, [sp, #0]
   226c8:	4651      	mov	r1, sl
   226ca:	4648      	mov	r0, r9
   226cc:	f7ee ff26 	bl	1151c <print_formatted>
		break;
   226d0:	e73b      	b.n	2254a <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   226d2:	686b      	ldr	r3, [r5, #4]
   226d4:	682a      	ldr	r2, [r5, #0]
   226d6:	6b29      	ldr	r1, [r5, #48]	; 0x30
   226d8:	910a      	str	r1, [sp, #40]	; 0x28
   226da:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   226dc:	9109      	str	r1, [sp, #36]	; 0x24
   226de:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   226e0:	9108      	str	r1, [sp, #32]
   226e2:	6a69      	ldr	r1, [r5, #36]	; 0x24
   226e4:	9107      	str	r1, [sp, #28]
   226e6:	6a29      	ldr	r1, [r5, #32]
   226e8:	9106      	str	r1, [sp, #24]
   226ea:	69e9      	ldr	r1, [r5, #28]
   226ec:	9105      	str	r1, [sp, #20]
   226ee:	69a9      	ldr	r1, [r5, #24]
   226f0:	9104      	str	r1, [sp, #16]
   226f2:	6969      	ldr	r1, [r5, #20]
   226f4:	9103      	str	r1, [sp, #12]
   226f6:	6929      	ldr	r1, [r5, #16]
   226f8:	9102      	str	r1, [sp, #8]
   226fa:	68e9      	ldr	r1, [r5, #12]
   226fc:	9101      	str	r1, [sp, #4]
   226fe:	68a9      	ldr	r1, [r5, #8]
   22700:	9100      	str	r1, [sp, #0]
   22702:	4651      	mov	r1, sl
   22704:	4648      	mov	r0, r9
   22706:	f7ee ff09 	bl	1151c <print_formatted>
		break;
   2270a:	e71e      	b.n	2254a <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   2270c:	686b      	ldr	r3, [r5, #4]
   2270e:	682a      	ldr	r2, [r5, #0]
   22710:	6b69      	ldr	r1, [r5, #52]	; 0x34
   22712:	910b      	str	r1, [sp, #44]	; 0x2c
   22714:	6b29      	ldr	r1, [r5, #48]	; 0x30
   22716:	910a      	str	r1, [sp, #40]	; 0x28
   22718:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   2271a:	9109      	str	r1, [sp, #36]	; 0x24
   2271c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   2271e:	9108      	str	r1, [sp, #32]
   22720:	6a69      	ldr	r1, [r5, #36]	; 0x24
   22722:	9107      	str	r1, [sp, #28]
   22724:	6a29      	ldr	r1, [r5, #32]
   22726:	9106      	str	r1, [sp, #24]
   22728:	69e9      	ldr	r1, [r5, #28]
   2272a:	9105      	str	r1, [sp, #20]
   2272c:	69a9      	ldr	r1, [r5, #24]
   2272e:	9104      	str	r1, [sp, #16]
   22730:	6969      	ldr	r1, [r5, #20]
   22732:	9103      	str	r1, [sp, #12]
   22734:	6929      	ldr	r1, [r5, #16]
   22736:	9102      	str	r1, [sp, #8]
   22738:	68e9      	ldr	r1, [r5, #12]
   2273a:	9101      	str	r1, [sp, #4]
   2273c:	68a9      	ldr	r1, [r5, #8]
   2273e:	9100      	str	r1, [sp, #0]
   22740:	4651      	mov	r1, sl
   22742:	4648      	mov	r0, r9
   22744:	f7ee feea 	bl	1151c <print_formatted>
		break;
   22748:	e6ff      	b.n	2254a <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   2274a:	686b      	ldr	r3, [r5, #4]
   2274c:	682a      	ldr	r2, [r5, #0]
   2274e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   22750:	910c      	str	r1, [sp, #48]	; 0x30
   22752:	6b69      	ldr	r1, [r5, #52]	; 0x34
   22754:	910b      	str	r1, [sp, #44]	; 0x2c
   22756:	6b29      	ldr	r1, [r5, #48]	; 0x30
   22758:	910a      	str	r1, [sp, #40]	; 0x28
   2275a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   2275c:	9109      	str	r1, [sp, #36]	; 0x24
   2275e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   22760:	9108      	str	r1, [sp, #32]
   22762:	6a69      	ldr	r1, [r5, #36]	; 0x24
   22764:	9107      	str	r1, [sp, #28]
   22766:	6a29      	ldr	r1, [r5, #32]
   22768:	9106      	str	r1, [sp, #24]
   2276a:	69e9      	ldr	r1, [r5, #28]
   2276c:	9105      	str	r1, [sp, #20]
   2276e:	69a9      	ldr	r1, [r5, #24]
   22770:	9104      	str	r1, [sp, #16]
   22772:	6969      	ldr	r1, [r5, #20]
   22774:	9103      	str	r1, [sp, #12]
   22776:	6929      	ldr	r1, [r5, #16]
   22778:	9102      	str	r1, [sp, #8]
   2277a:	68e9      	ldr	r1, [r5, #12]
   2277c:	9101      	str	r1, [sp, #4]
   2277e:	68a9      	ldr	r1, [r5, #8]
   22780:	9100      	str	r1, [sp, #0]
   22782:	4651      	mov	r1, sl
   22784:	4648      	mov	r0, r9
   22786:	f7ee fec9 	bl	1151c <print_formatted>
}
   2278a:	e6de      	b.n	2254a <std_print+0x74>

0002278c <log_output_flush>:
{
   2278c:	b510      	push	{r4, lr}
   2278e:	4604      	mov	r4, r0
		     output->control_block->offset,
   22790:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   22792:	6853      	ldr	r3, [r2, #4]
   22794:	6812      	ldr	r2, [r2, #0]
   22796:	6881      	ldr	r1, [r0, #8]
   22798:	6800      	ldr	r0, [r0, #0]
   2279a:	f7ff fe50 	bl	2243e <buffer_write>
	output->control_block->offset = 0;
   2279e:	6863      	ldr	r3, [r4, #4]
   227a0:	2200      	movs	r2, #0
   227a2:	601a      	str	r2, [r3, #0]
}
   227a4:	bd10      	pop	{r4, pc}

000227a6 <out_func>:
{
   227a6:	b538      	push	{r3, r4, r5, lr}
   227a8:	4605      	mov	r5, r0
   227aa:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   227ac:	684b      	ldr	r3, [r1, #4]
   227ae:	681a      	ldr	r2, [r3, #0]
   227b0:	68cb      	ldr	r3, [r1, #12]
   227b2:	429a      	cmp	r2, r3
   227b4:	d00f      	beq.n	227d6 <out_func+0x30>
	idx = atomic_inc(&out_ctx->control_block->offset);
   227b6:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   227b8:	f3bf 8f5b 	dmb	ish
   227bc:	e853 2f00 	ldrex	r2, [r3]
   227c0:	1c51      	adds	r1, r2, #1
   227c2:	e843 1000 	strex	r0, r1, [r3]
   227c6:	2800      	cmp	r0, #0
   227c8:	d1f8      	bne.n	227bc <out_func+0x16>
   227ca:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   227ce:	68a3      	ldr	r3, [r4, #8]
   227d0:	549d      	strb	r5, [r3, r2]
}
   227d2:	2000      	movs	r0, #0
   227d4:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
   227d6:	4608      	mov	r0, r1
   227d8:	f7ff ffd8 	bl	2278c <log_output_flush>
   227dc:	e7eb      	b.n	227b6 <out_func+0x10>

000227de <log_output_msg_process>:
{
   227de:	b5f0      	push	{r4, r5, r6, r7, lr}
   227e0:	b085      	sub	sp, #20
   227e2:	4606      	mov	r6, r0
   227e4:	460c      	mov	r4, r1
   227e6:	4617      	mov	r7, r2
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   227e8:	7a0b      	ldrb	r3, [r1, #8]
   227ea:	f083 0301 	eor.w	r3, r3, #1
   227ee:	f003 0201 	and.w	r2, r3, #1
	return msg->hdr.timestamp;
   227f2:	68cb      	ldr	r3, [r1, #12]
	return msg->hdr.ids.level;
   227f4:	7a89      	ldrb	r1, [r1, #10]
	return msg->hdr.ids.domain_id;
   227f6:	f3c1 0cc2 	ubfx	ip, r1, #3, #3
	return msg->hdr.ids.source_id;
   227fa:	8960      	ldrh	r0, [r4, #10]
	int16_t source_id = (int16_t)log_msg_source_id_get(msg);
   227fc:	f3c0 1089 	ubfx	r0, r0, #6, #10
			0 : prefix_print(output, flags, std_msg, timestamp,
   22800:	f011 0507 	ands.w	r5, r1, #7
   22804:	d10f      	bne.n	22826 <log_output_msg_process+0x48>
   22806:	2200      	movs	r2, #0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   22808:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg)) {
   2280a:	f013 0f01 	tst.w	r3, #1
   2280e:	d014      	beq.n	2283a <log_output_msg_process+0x5c>
	} else if (raw_string) {
   22810:	b9c5      	cbnz	r5, 22844 <log_output_msg_process+0x66>
		raw_string_print(msg, output);
   22812:	4631      	mov	r1, r6
   22814:	4620      	mov	r0, r4
   22816:	f7ee ffc1 	bl	1179c <raw_string_print>
	if (!raw_string) {
   2281a:	b9cd      	cbnz	r5, 22850 <log_output_msg_process+0x72>
	log_output_flush(output);
   2281c:	4630      	mov	r0, r6
   2281e:	f7ff ffb5 	bl	2278c <log_output_flush>
}
   22822:	b005      	add	sp, #20
   22824:	bdf0      	pop	{r4, r5, r6, r7, pc}
			0 : prefix_print(output, flags, std_msg, timestamp,
   22826:	9002      	str	r0, [sp, #8]
   22828:	f8cd c004 	str.w	ip, [sp, #4]
   2282c:	9500      	str	r5, [sp, #0]
   2282e:	4639      	mov	r1, r7
   22830:	4630      	mov	r0, r6
   22832:	f7ff fe29 	bl	22488 <prefix_print>
   22836:	4602      	mov	r2, r0
   22838:	e7e6      	b.n	22808 <log_output_msg_process+0x2a>
		std_print(msg, output);
   2283a:	4631      	mov	r1, r6
   2283c:	4620      	mov	r0, r4
   2283e:	f7ff fe4a 	bl	224d6 <std_print>
   22842:	e7ea      	b.n	2281a <log_output_msg_process+0x3c>
		hexdump_print(msg, output, prefix_offset, flags);
   22844:	463b      	mov	r3, r7
   22846:	4631      	mov	r1, r6
   22848:	4620      	mov	r0, r4
   2284a:	f7ee ff7d 	bl	11748 <hexdump_print>
   2284e:	e7e4      	b.n	2281a <log_output_msg_process+0x3c>
		postfix_print(output, flags, level);
   22850:	462a      	mov	r2, r5
   22852:	4639      	mov	r1, r7
   22854:	4630      	mov	r0, r6
   22856:	f7ff fe0b 	bl	22470 <postfix_print>
   2285a:	e7df      	b.n	2281c <log_output_msg_process+0x3e>

0002285c <read_str>:
#endif /* CONFIG_BT_DIS_SETTINGS */

static ssize_t read_str(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  uint16_t len, uint16_t offset)
{
   2285c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22860:	b084      	sub	sp, #16
   22862:	4605      	mov	r5, r0
   22864:	460c      	mov	r4, r1
   22866:	4616      	mov	r6, r2
   22868:	461f      	mov	r7, r3
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   2286a:	f8d1 800c 	ldr.w	r8, [r1, #12]
				 strlen(attr->user_data));
   2286e:	4640      	mov	r0, r8
   22870:	f002 f8ae 	bl	249d0 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   22874:	b280      	uxth	r0, r0
   22876:	9002      	str	r0, [sp, #8]
   22878:	f8cd 8004 	str.w	r8, [sp, #4]
   2287c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   22880:	9300      	str	r3, [sp, #0]
   22882:	463b      	mov	r3, r7
   22884:	4632      	mov	r2, r6
   22886:	4621      	mov	r1, r4
   22888:	4628      	mov	r0, r5
   2288a:	f004 f9bc 	bl	26c06 <bt_gatt_attr_read>
}
   2288e:	b004      	add	sp, #16
   22890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022894 <bas_init>:
static int bas_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	return 0;
}
   22894:	2000      	movs	r0, #0
   22896:	4770      	bx	lr

00022898 <nvs_flash_rd>:
{
   22898:	b570      	push	{r4, r5, r6, lr}
	offset = fs->offset;
   2289a:	6805      	ldr	r5, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2289c:	8984      	ldrh	r4, [r0, #12]
   2289e:	0c0e      	lsrs	r6, r1, #16
   228a0:	fb06 5404 	mla	r4, r6, r4, r5
	offset += addr & ADDR_OFFS_MASK;
   228a4:	fa14 f181 	uxtah	r1, r4, r1
	rc = flash_read(fs->flash_device, offset, data, len);
   228a8:	6a80      	ldr	r0, [r0, #40]	; 0x28
	const struct flash_driver_api *api =
   228aa:	6884      	ldr	r4, [r0, #8]
	return api->read(dev, offset, data, len);
   228ac:	6824      	ldr	r4, [r4, #0]
   228ae:	47a0      	blx	r4
}
   228b0:	bd70      	pop	{r4, r5, r6, pc}

000228b2 <nvs_flash_ate_rd>:
{
   228b2:	b508      	push	{r3, lr}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   228b4:	2308      	movs	r3, #8
   228b6:	f7ff ffef 	bl	22898 <nvs_flash_rd>
}
   228ba:	bd08      	pop	{r3, pc}

000228bc <nvs_ate_cmp_const>:
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   228bc:	2300      	movs	r3, #0
   228be:	e000      	b.n	228c2 <nvs_ate_cmp_const+0x6>
   228c0:	3301      	adds	r3, #1
   228c2:	2b07      	cmp	r3, #7
   228c4:	d804      	bhi.n	228d0 <nvs_ate_cmp_const+0x14>
		if (data8[i] != value) {
   228c6:	5cc2      	ldrb	r2, [r0, r3]
   228c8:	428a      	cmp	r2, r1
   228ca:	d0f9      	beq.n	228c0 <nvs_ate_cmp_const+0x4>
			return 1;
   228cc:	2001      	movs	r0, #1
}
   228ce:	4770      	bx	lr
	return 0;
   228d0:	2000      	movs	r0, #0
   228d2:	4770      	bx	lr

000228d4 <nvs_sector_advance>:
	*addr += (1 << ADDR_SECT_SHIFT);
   228d4:	680b      	ldr	r3, [r1, #0]
   228d6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   228da:	600b      	str	r3, [r1, #0]
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   228dc:	89c2      	ldrh	r2, [r0, #14]
   228de:	ebb2 4f13 	cmp.w	r2, r3, lsr #16
   228e2:	d000      	beq.n	228e6 <nvs_sector_advance+0x12>
}
   228e4:	4770      	bx	lr
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   228e6:	eba3 4302 	sub.w	r3, r3, r2, lsl #16
   228ea:	600b      	str	r3, [r1, #0]
}
   228ec:	e7fa      	b.n	228e4 <nvs_sector_advance+0x10>

000228ee <nvs_flash_block_cmp>:
{
   228ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   228f2:	b089      	sub	sp, #36	; 0x24
   228f4:	4681      	mov	r9, r0
   228f6:	460e      	mov	r6, r1
   228f8:	4617      	mov	r7, r2
   228fa:	461d      	mov	r5, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   228fc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   228fe:	681b      	ldr	r3, [r3, #0]
   22900:	f1c3 0800 	rsb	r8, r3, #0
	block_size =
   22904:	f008 0820 	and.w	r8, r8, #32
	while (len) {
   22908:	e002      	b.n	22910 <nvs_flash_block_cmp+0x22>
		len -= bytes_to_cmp;
   2290a:	1b2d      	subs	r5, r5, r4
		addr += bytes_to_cmp;
   2290c:	4426      	add	r6, r4
		data8 += bytes_to_cmp;
   2290e:	4427      	add	r7, r4
	while (len) {
   22910:	b1a5      	cbz	r5, 2293c <nvs_flash_block_cmp+0x4e>
		bytes_to_cmp = MIN(block_size, len);
   22912:	462c      	mov	r4, r5
   22914:	4545      	cmp	r5, r8
   22916:	bf28      	it	cs
   22918:	4644      	movcs	r4, r8
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   2291a:	4623      	mov	r3, r4
   2291c:	466a      	mov	r2, sp
   2291e:	4631      	mov	r1, r6
   22920:	4648      	mov	r0, r9
   22922:	f7ff ffb9 	bl	22898 <nvs_flash_rd>
		if (rc) {
   22926:	4603      	mov	r3, r0
   22928:	b948      	cbnz	r0, 2293e <nvs_flash_block_cmp+0x50>
		rc = memcmp(data8, buf, bytes_to_cmp);
   2292a:	4622      	mov	r2, r4
   2292c:	4669      	mov	r1, sp
   2292e:	4638      	mov	r0, r7
   22930:	f002 f885 	bl	24a3e <memcmp>
		if (rc) {
   22934:	2800      	cmp	r0, #0
   22936:	d0e8      	beq.n	2290a <nvs_flash_block_cmp+0x1c>
			return 1;
   22938:	2301      	movs	r3, #1
   2293a:	e000      	b.n	2293e <nvs_flash_block_cmp+0x50>
	return 0;
   2293c:	2300      	movs	r3, #0
}
   2293e:	4618      	mov	r0, r3
   22940:	b009      	add	sp, #36	; 0x24
   22942:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00022946 <nvs_flash_cmp_const>:
{
   22946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2294a:	b088      	sub	sp, #32
   2294c:	4680      	mov	r8, r0
   2294e:	460e      	mov	r6, r1
   22950:	4611      	mov	r1, r2
   22952:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   22954:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   22956:	681f      	ldr	r7, [r3, #0]
   22958:	427f      	negs	r7, r7
	block_size =
   2295a:	f007 0720 	and.w	r7, r7, #32
	(void)memset(cmp, value, block_size);
   2295e:	463a      	mov	r2, r7
   22960:	4668      	mov	r0, sp
   22962:	f002 f8a7 	bl	24ab4 <memset>
	while (len) {
   22966:	b174      	cbz	r4, 22986 <nvs_flash_cmp_const+0x40>
		bytes_to_cmp = MIN(block_size, len);
   22968:	4625      	mov	r5, r4
   2296a:	42bc      	cmp	r4, r7
   2296c:	bf28      	it	cs
   2296e:	463d      	movcs	r5, r7
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   22970:	462b      	mov	r3, r5
   22972:	466a      	mov	r2, sp
   22974:	4631      	mov	r1, r6
   22976:	4640      	mov	r0, r8
   22978:	f7ff ffb9 	bl	228ee <nvs_flash_block_cmp>
		if (rc) {
   2297c:	4603      	mov	r3, r0
   2297e:	b918      	cbnz	r0, 22988 <nvs_flash_cmp_const+0x42>
		len -= bytes_to_cmp;
   22980:	1b64      	subs	r4, r4, r5
		addr += bytes_to_cmp;
   22982:	442e      	add	r6, r5
   22984:	e7ef      	b.n	22966 <nvs_flash_cmp_const+0x20>
	return 0;
   22986:	2300      	movs	r3, #0
}
   22988:	4618      	mov	r0, r3
   2298a:	b008      	add	sp, #32
   2298c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022990 <nvs_flash_erase_sector>:
{
   22990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22994:	4604      	mov	r4, r0
	addr &= ADDR_SECT_MASK;
   22996:	ea4f 4811 	mov.w	r8, r1, lsr #16
   2299a:	ea4f 4808 	mov.w	r8, r8, lsl #16
	offset = fs->offset;
   2299e:	6805      	ldr	r5, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   229a0:	f8b0 900c 	ldrh.w	r9, [r0, #12]
   229a4:	0c09      	lsrs	r1, r1, #16
   229a6:	fb01 5509 	mla	r5, r1, r9, r5
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   229aa:	6a87      	ldr	r7, [r0, #40]	; 0x28
	const struct flash_driver_api *api =
   229ac:	f8d7 a008 	ldr.w	sl, [r7, #8]
	if (api->write_protection != NULL) {
   229b0:	f8da 300c 	ldr.w	r3, [sl, #12]
   229b4:	b123      	cbz	r3, 229c0 <nvs_flash_erase_sector+0x30>
		rc = api->write_protection(dev, false);
   229b6:	2100      	movs	r1, #0
   229b8:	4638      	mov	r0, r7
   229ba:	4798      	blx	r3
		if (rc) {
   229bc:	4606      	mov	r6, r0
   229be:	b960      	cbnz	r0, 229da <nvs_flash_erase_sector+0x4a>
	rc = api->erase(dev, offset, size);
   229c0:	f8da 3008 	ldr.w	r3, [sl, #8]
   229c4:	464a      	mov	r2, r9
   229c6:	4629      	mov	r1, r5
   229c8:	4638      	mov	r0, r7
   229ca:	4798      	blx	r3
   229cc:	4606      	mov	r6, r0
	if (api->write_protection != NULL) {
   229ce:	f8da 300c 	ldr.w	r3, [sl, #12]
   229d2:	b113      	cbz	r3, 229da <nvs_flash_erase_sector+0x4a>
		(void) api->write_protection(dev, true);
   229d4:	2101      	movs	r1, #1
   229d6:	4638      	mov	r0, r7
   229d8:	4798      	blx	r3
	if (rc) {
   229da:	b116      	cbz	r6, 229e2 <nvs_flash_erase_sector+0x52>
}
   229dc:	4630      	mov	r0, r6
   229de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   229e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   229e4:	89a3      	ldrh	r3, [r4, #12]
   229e6:	7912      	ldrb	r2, [r2, #4]
   229e8:	4641      	mov	r1, r8
   229ea:	4620      	mov	r0, r4
   229ec:	f7ff ffab 	bl	22946 <nvs_flash_cmp_const>
   229f0:	2800      	cmp	r0, #0
   229f2:	d0f3      	beq.n	229dc <nvs_flash_erase_sector+0x4c>
		rc = -ENXIO;
   229f4:	f06f 0605 	mvn.w	r6, #5
   229f8:	e7f0      	b.n	229dc <nvs_flash_erase_sector+0x4c>

000229fa <nvs_ate_crc8_check>:
{
   229fa:	b510      	push	{r4, lr}
   229fc:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   229fe:	2207      	movs	r2, #7
   22a00:	4601      	mov	r1, r0
   22a02:	20ff      	movs	r0, #255	; 0xff
   22a04:	f7ed faca 	bl	ff9c <crc8_ccitt>
	if (crc8 == entry->crc8) {
   22a08:	79e3      	ldrb	r3, [r4, #7]
   22a0a:	4283      	cmp	r3, r0
   22a0c:	d001      	beq.n	22a12 <nvs_ate_crc8_check+0x18>
	return 1;
   22a0e:	2001      	movs	r0, #1
}
   22a10:	bd10      	pop	{r4, pc}
		return 0;
   22a12:	2000      	movs	r0, #0
   22a14:	e7fc      	b.n	22a10 <nvs_ate_crc8_check+0x16>

00022a16 <nvs_ate_valid>:
{
   22a16:	b570      	push	{r4, r5, r6, lr}
   22a18:	4604      	mov	r4, r0
   22a1a:	460d      	mov	r5, r1
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   22a1c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   22a1e:	681b      	ldr	r3, [r3, #0]
   22a20:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   22a22:	2a01      	cmp	r2, #1
   22a24:	d90d      	bls.n	22a42 <nvs_ate_valid+0x2c>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   22a26:	1dd6      	adds	r6, r2, #7
   22a28:	4253      	negs	r3, r2
   22a2a:	401e      	ands	r6, r3
	if ((nvs_ate_crc8_check(entry)) ||
   22a2c:	4628      	mov	r0, r5
   22a2e:	f7ff ffe4 	bl	229fa <nvs_ate_crc8_check>
   22a32:	b940      	cbnz	r0, 22a46 <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   22a34:	886a      	ldrh	r2, [r5, #2]
   22a36:	89a3      	ldrh	r3, [r4, #12]
   22a38:	1b9b      	subs	r3, r3, r6
	if ((nvs_ate_crc8_check(entry)) ||
   22a3a:	429a      	cmp	r2, r3
   22a3c:	d205      	bcs.n	22a4a <nvs_ate_valid+0x34>
	return 1;
   22a3e:	2001      	movs	r0, #1
}
   22a40:	bd70      	pop	{r4, r5, r6, pc}
		return len;
   22a42:	2608      	movs	r6, #8
   22a44:	e7f2      	b.n	22a2c <nvs_ate_valid+0x16>
		return 0;
   22a46:	2000      	movs	r0, #0
   22a48:	e7fa      	b.n	22a40 <nvs_ate_valid+0x2a>
   22a4a:	2000      	movs	r0, #0
   22a4c:	e7f8      	b.n	22a40 <nvs_ate_valid+0x2a>

00022a4e <nvs_recover_last_ate>:
{
   22a4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22a52:	b082      	sub	sp, #8
   22a54:	4606      	mov	r6, r0
   22a56:	4688      	mov	r8, r1
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   22a58:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   22a5a:	681f      	ldr	r7, [r3, #0]
   22a5c:	b2fb      	uxtb	r3, r7
	if (write_block_size <= 1U) {
   22a5e:	2b01      	cmp	r3, #1
   22a60:	d90b      	bls.n	22a7a <nvs_recover_last_ate+0x2c>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   22a62:	461f      	mov	r7, r3
   22a64:	3307      	adds	r3, #7
   22a66:	427f      	negs	r7, r7
   22a68:	401f      	ands	r7, r3
	*addr -= ate_size;
   22a6a:	f8d8 4000 	ldr.w	r4, [r8]
   22a6e:	1be4      	subs	r4, r4, r7
   22a70:	f8c8 4000 	str.w	r4, [r8]
	data_end_addr = *addr & ADDR_SECT_MASK;
   22a74:	0c25      	lsrs	r5, r4, #16
   22a76:	042d      	lsls	r5, r5, #16
	while (ate_end_addr > data_end_addr) {
   22a78:	e002      	b.n	22a80 <nvs_recover_last_ate+0x32>
		return len;
   22a7a:	2708      	movs	r7, #8
   22a7c:	e7f5      	b.n	22a6a <nvs_recover_last_ate+0x1c>
		ate_end_addr -= ate_size;
   22a7e:	1be4      	subs	r4, r4, r7
	while (ate_end_addr > data_end_addr) {
   22a80:	42ac      	cmp	r4, r5
   22a82:	d917      	bls.n	22ab4 <nvs_recover_last_ate+0x66>
		rc = nvs_flash_ate_rd(fs, ate_end_addr, &end_ate);
   22a84:	466a      	mov	r2, sp
   22a86:	4621      	mov	r1, r4
   22a88:	4630      	mov	r0, r6
   22a8a:	f7ff ff12 	bl	228b2 <nvs_flash_ate_rd>
		if (rc) {
   22a8e:	4603      	mov	r3, r0
   22a90:	b988      	cbnz	r0, 22ab6 <nvs_recover_last_ate+0x68>
		if (nvs_ate_valid(fs, &end_ate)) {
   22a92:	4669      	mov	r1, sp
   22a94:	4630      	mov	r0, r6
   22a96:	f7ff ffbe 	bl	22a16 <nvs_ate_valid>
   22a9a:	2800      	cmp	r0, #0
   22a9c:	d0ef      	beq.n	22a7e <nvs_recover_last_ate+0x30>
			data_end_addr &= ADDR_SECT_MASK;
   22a9e:	0c2d      	lsrs	r5, r5, #16
   22aa0:	042d      	lsls	r5, r5, #16
			data_end_addr += end_ate.offset + end_ate.len;
   22aa2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   22aa6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   22aaa:	4413      	add	r3, r2
   22aac:	441d      	add	r5, r3
			*addr = ate_end_addr;
   22aae:	f8c8 4000 	str.w	r4, [r8]
   22ab2:	e7e4      	b.n	22a7e <nvs_recover_last_ate+0x30>
	return 0;
   22ab4:	2300      	movs	r3, #0
}
   22ab6:	4618      	mov	r0, r3
   22ab8:	b002      	add	sp, #8
   22aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022abe <nvs_close_ate_valid>:
{
   22abe:	b538      	push	{r3, r4, r5, lr}
   22ac0:	4605      	mov	r5, r0
   22ac2:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   22ac4:	f7ff ffa7 	bl	22a16 <nvs_ate_valid>
   22ac8:	b1e0      	cbz	r0, 22b04 <nvs_close_ate_valid+0x46>
   22aca:	88a3      	ldrh	r3, [r4, #4]
   22acc:	b9cb      	cbnz	r3, 22b02 <nvs_close_ate_valid+0x44>
	    (entry->id != 0xFFFF)) {
   22ace:	8822      	ldrh	r2, [r4, #0]
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   22ad0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   22ad4:	429a      	cmp	r2, r3
   22ad6:	d116      	bne.n	22b06 <nvs_close_ate_valid+0x48>
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   22ad8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   22ada:	681b      	ldr	r3, [r3, #0]
   22adc:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   22ade:	2a01      	cmp	r2, #1
   22ae0:	d90d      	bls.n	22afe <nvs_close_ate_valid+0x40>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   22ae2:	4613      	mov	r3, r2
   22ae4:	3207      	adds	r2, #7
   22ae6:	425b      	negs	r3, r3
   22ae8:	4013      	ands	r3, r2
	if ((fs->sector_size - entry->offset) % ate_size) {
   22aea:	89aa      	ldrh	r2, [r5, #12]
   22aec:	8861      	ldrh	r1, [r4, #2]
   22aee:	1a52      	subs	r2, r2, r1
   22af0:	fbb2 f1f3 	udiv	r1, r2, r3
   22af4:	fb03 2311 	mls	r3, r3, r1, r2
   22af8:	b93b      	cbnz	r3, 22b0a <nvs_close_ate_valid+0x4c>
	return 1;
   22afa:	2001      	movs	r0, #1
   22afc:	e002      	b.n	22b04 <nvs_close_ate_valid+0x46>
		return len;
   22afe:	2308      	movs	r3, #8
   22b00:	e7f3      	b.n	22aea <nvs_close_ate_valid+0x2c>
		return 0;
   22b02:	2000      	movs	r0, #0
}
   22b04:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   22b06:	2000      	movs	r0, #0
   22b08:	e7fc      	b.n	22b04 <nvs_close_ate_valid+0x46>
		return 0;
   22b0a:	2000      	movs	r0, #0
   22b0c:	e7fa      	b.n	22b04 <nvs_close_ate_valid+0x46>

00022b0e <nvs_prev_ate>:
{
   22b0e:	b5f0      	push	{r4, r5, r6, r7, lr}
   22b10:	b083      	sub	sp, #12
   22b12:	4604      	mov	r4, r0
   22b14:	460d      	mov	r5, r1
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   22b16:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   22b18:	681b      	ldr	r3, [r3, #0]
   22b1a:	b2d9      	uxtb	r1, r3
	if (write_block_size <= 1U) {
   22b1c:	2901      	cmp	r1, #1
   22b1e:	d92a      	bls.n	22b76 <nvs_prev_ate+0x68>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   22b20:	1dce      	adds	r6, r1, #7
   22b22:	424b      	negs	r3, r1
   22b24:	401e      	ands	r6, r3
	rc = nvs_flash_ate_rd(fs, *addr, ate);
   22b26:	6829      	ldr	r1, [r5, #0]
   22b28:	4620      	mov	r0, r4
   22b2a:	f7ff fec2 	bl	228b2 <nvs_flash_ate_rd>
	if (rc) {
   22b2e:	4607      	mov	r7, r0
   22b30:	b9f0      	cbnz	r0, 22b70 <nvs_prev_ate+0x62>
	*addr += ate_size;
   22b32:	682a      	ldr	r2, [r5, #0]
   22b34:	4432      	add	r2, r6
   22b36:	602a      	str	r2, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   22b38:	b291      	uxth	r1, r2
   22b3a:	89a3      	ldrh	r3, [r4, #12]
   22b3c:	1b9b      	subs	r3, r3, r6
   22b3e:	4299      	cmp	r1, r3
   22b40:	d116      	bne.n	22b70 <nvs_prev_ate+0x62>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   22b42:	0c13      	lsrs	r3, r2, #16
   22b44:	d119      	bne.n	22b7a <nvs_prev_ate+0x6c>
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   22b46:	89e3      	ldrh	r3, [r4, #14]
   22b48:	3b01      	subs	r3, #1
   22b4a:	eb02 4203 	add.w	r2, r2, r3, lsl #16
   22b4e:	602a      	str	r2, [r5, #0]
	rc = nvs_flash_ate_rd(fs, *addr, &close_ate);
   22b50:	466a      	mov	r2, sp
   22b52:	6829      	ldr	r1, [r5, #0]
   22b54:	4620      	mov	r0, r4
   22b56:	f7ff feac 	bl	228b2 <nvs_flash_ate_rd>
	if (rc) {
   22b5a:	4607      	mov	r7, r0
   22b5c:	b940      	cbnz	r0, 22b70 <nvs_prev_ate+0x62>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   22b5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   22b60:	7919      	ldrb	r1, [r3, #4]
   22b62:	4668      	mov	r0, sp
   22b64:	f7ff feaa 	bl	228bc <nvs_ate_cmp_const>
	if (!rc) {
   22b68:	b958      	cbnz	r0, 22b82 <nvs_prev_ate+0x74>
		*addr = fs->ate_wra;
   22b6a:	6862      	ldr	r2, [r4, #4]
   22b6c:	602a      	str	r2, [r5, #0]
		return 0;
   22b6e:	4607      	mov	r7, r0
}
   22b70:	4638      	mov	r0, r7
   22b72:	b003      	add	sp, #12
   22b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return len;
   22b76:	2608      	movs	r6, #8
   22b78:	e7d5      	b.n	22b26 <nvs_prev_ate+0x18>
		*addr -= (1 << ADDR_SECT_SHIFT);
   22b7a:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   22b7e:	602a      	str	r2, [r5, #0]
   22b80:	e7e6      	b.n	22b50 <nvs_prev_ate+0x42>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   22b82:	4669      	mov	r1, sp
   22b84:	4620      	mov	r0, r4
   22b86:	f7ff ff9a 	bl	22abe <nvs_close_ate_valid>
   22b8a:	b130      	cbz	r0, 22b9a <nvs_prev_ate+0x8c>
		(*addr) &= ADDR_SECT_MASK;
   22b8c:	886a      	ldrh	r2, [r5, #2]
		(*addr) += close_ate.offset;
   22b8e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   22b92:	eb03 4302 	add.w	r3, r3, r2, lsl #16
   22b96:	602b      	str	r3, [r5, #0]
		return 0;
   22b98:	e7ea      	b.n	22b70 <nvs_prev_ate+0x62>
	return nvs_recover_last_ate(fs, addr);
   22b9a:	4629      	mov	r1, r5
   22b9c:	4620      	mov	r0, r4
   22b9e:	f7ff ff56 	bl	22a4e <nvs_recover_last_ate>
   22ba2:	4607      	mov	r7, r0
   22ba4:	e7e4      	b.n	22b70 <nvs_prev_ate+0x62>

00022ba6 <nvs_ate_crc8_update>:
{
   22ba6:	b510      	push	{r4, lr}
   22ba8:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   22baa:	2207      	movs	r2, #7
   22bac:	4601      	mov	r1, r0
   22bae:	20ff      	movs	r0, #255	; 0xff
   22bb0:	f7ed f9f4 	bl	ff9c <crc8_ccitt>
	entry->crc8 = crc8;
   22bb4:	71e0      	strb	r0, [r4, #7]
}
   22bb6:	bd10      	pop	{r4, pc}

00022bb8 <nvs_flash_al_wrt>:
{
   22bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22bbc:	b089      	sub	sp, #36	; 0x24
	if (!len) {
   22bbe:	2b00      	cmp	r3, #0
   22bc0:	d062      	beq.n	22c88 <nvs_flash_al_wrt+0xd0>
   22bc2:	4605      	mov	r5, r0
   22bc4:	4691      	mov	r9, r2
   22bc6:	4698      	mov	r8, r3
	offset = fs->offset;
   22bc8:	6803      	ldr	r3, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   22bca:	8984      	ldrh	r4, [r0, #12]
   22bcc:	0c0a      	lsrs	r2, r1, #16
   22bce:	fb02 3404 	mla	r4, r2, r4, r3
	offset += addr & ADDR_OFFS_MASK;
   22bd2:	fa14 f481 	uxtah	r4, r4, r1
   22bd6:	46a2      	mov	sl, r4
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   22bd8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   22bda:	681b      	ldr	r3, [r3, #0]
   22bdc:	425b      	negs	r3, r3
	if (blen > 0) {
   22bde:	ea13 0608 	ands.w	r6, r3, r8
   22be2:	d107      	bne.n	22bf4 <nvs_flash_al_wrt+0x3c>
	int rc = 0;
   22be4:	2700      	movs	r7, #0
	if (len) {
   22be6:	f1b8 0f00 	cmp.w	r8, #0
   22bea:	d125      	bne.n	22c38 <nvs_flash_al_wrt+0x80>
}
   22bec:	4638      	mov	r0, r7
   22bee:	b009      	add	sp, #36	; 0x24
   22bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = flash_write(fs->flash_device, offset, data8, blen);
   22bf4:	f8d0 a028 	ldr.w	sl, [r0, #40]	; 0x28
	const struct flash_driver_api *api =
   22bf8:	f8da b008 	ldr.w	fp, [sl, #8]
	if (api->write_protection != NULL) {
   22bfc:	f8db 300c 	ldr.w	r3, [fp, #12]
   22c00:	b123      	cbz	r3, 22c0c <nvs_flash_al_wrt+0x54>
		rc = api->write_protection(dev, false);
   22c02:	2100      	movs	r1, #0
   22c04:	4650      	mov	r0, sl
   22c06:	4798      	blx	r3
		if (rc) {
   22c08:	4607      	mov	r7, r0
   22c0a:	b968      	cbnz	r0, 22c28 <nvs_flash_al_wrt+0x70>
	rc = api->write(dev, offset, data, len);
   22c0c:	f8db 7004 	ldr.w	r7, [fp, #4]
   22c10:	4633      	mov	r3, r6
   22c12:	464a      	mov	r2, r9
   22c14:	4621      	mov	r1, r4
   22c16:	4650      	mov	r0, sl
   22c18:	47b8      	blx	r7
   22c1a:	4607      	mov	r7, r0
	if (api->write_protection != NULL) {
   22c1c:	f8db 300c 	ldr.w	r3, [fp, #12]
   22c20:	b113      	cbz	r3, 22c28 <nvs_flash_al_wrt+0x70>
		(void) api->write_protection(dev, true);
   22c22:	2101      	movs	r1, #1
   22c24:	4650      	mov	r0, sl
   22c26:	4798      	blx	r3
		if (rc) {
   22c28:	2f00      	cmp	r7, #0
   22c2a:	d1df      	bne.n	22bec <nvs_flash_al_wrt+0x34>
		len -= blen;
   22c2c:	eba8 0806 	sub.w	r8, r8, r6
		offset += blen;
   22c30:	eb04 0a06 	add.w	sl, r4, r6
		data8 += blen;
   22c34:	44b1      	add	r9, r6
   22c36:	e7d6      	b.n	22be6 <nvs_flash_al_wrt+0x2e>
		memcpy(buf, data8, len);
   22c38:	4642      	mov	r2, r8
   22c3a:	4649      	mov	r1, r9
   22c3c:	4668      	mov	r0, sp
   22c3e:	f001 ff15 	bl	24a6c <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   22c42:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
			fs->flash_parameters->write_block_size - len);
   22c44:	681a      	ldr	r2, [r3, #0]
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   22c46:	eba2 0208 	sub.w	r2, r2, r8
   22c4a:	7919      	ldrb	r1, [r3, #4]
   22c4c:	eb0d 0008 	add.w	r0, sp, r8
   22c50:	f001 ff30 	bl	24ab4 <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   22c54:	6aac      	ldr	r4, [r5, #40]	; 0x28
				 fs->flash_parameters->write_block_size);
   22c56:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		rc = flash_write(fs->flash_device, offset, buf,
   22c58:	681e      	ldr	r6, [r3, #0]
	const struct flash_driver_api *api =
   22c5a:	68a5      	ldr	r5, [r4, #8]
	if (api->write_protection != NULL) {
   22c5c:	68eb      	ldr	r3, [r5, #12]
   22c5e:	b12b      	cbz	r3, 22c6c <nvs_flash_al_wrt+0xb4>
		rc = api->write_protection(dev, false);
   22c60:	2100      	movs	r1, #0
   22c62:	4620      	mov	r0, r4
   22c64:	4798      	blx	r3
		if (rc) {
   22c66:	4607      	mov	r7, r0
   22c68:	2800      	cmp	r0, #0
   22c6a:	d1bf      	bne.n	22bec <nvs_flash_al_wrt+0x34>
	rc = api->write(dev, offset, data, len);
   22c6c:	686f      	ldr	r7, [r5, #4]
   22c6e:	4633      	mov	r3, r6
   22c70:	466a      	mov	r2, sp
   22c72:	4651      	mov	r1, sl
   22c74:	4620      	mov	r0, r4
   22c76:	47b8      	blx	r7
   22c78:	4607      	mov	r7, r0
	if (api->write_protection != NULL) {
   22c7a:	68eb      	ldr	r3, [r5, #12]
   22c7c:	2b00      	cmp	r3, #0
   22c7e:	d0b5      	beq.n	22bec <nvs_flash_al_wrt+0x34>
		(void) api->write_protection(dev, true);
   22c80:	2101      	movs	r1, #1
   22c82:	4620      	mov	r0, r4
   22c84:	4798      	blx	r3
   22c86:	e7b1      	b.n	22bec <nvs_flash_al_wrt+0x34>
		return 0;
   22c88:	2700      	movs	r7, #0
   22c8a:	e7af      	b.n	22bec <nvs_flash_al_wrt+0x34>

00022c8c <nvs_flash_data_wrt>:
{
   22c8c:	b538      	push	{r3, r4, r5, lr}
   22c8e:	4605      	mov	r5, r0
   22c90:	4614      	mov	r4, r2
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   22c92:	4613      	mov	r3, r2
   22c94:	460a      	mov	r2, r1
   22c96:	6881      	ldr	r1, [r0, #8]
   22c98:	f7ff ff8e 	bl	22bb8 <nvs_flash_al_wrt>
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   22c9c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   22c9e:	681a      	ldr	r2, [r3, #0]
   22ca0:	b2d3      	uxtb	r3, r2
	if (write_block_size <= 1U) {
   22ca2:	2b01      	cmp	r3, #1
   22ca4:	d903      	bls.n	22cae <nvs_flash_data_wrt+0x22>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   22ca6:	441c      	add	r4, r3
   22ca8:	3c01      	subs	r4, #1
   22caa:	425a      	negs	r2, r3
   22cac:	4014      	ands	r4, r2
	fs->data_wra += nvs_al_size(fs, len);
   22cae:	68aa      	ldr	r2, [r5, #8]
   22cb0:	4422      	add	r2, r4
   22cb2:	60aa      	str	r2, [r5, #8]
}
   22cb4:	bd38      	pop	{r3, r4, r5, pc}

00022cb6 <nvs_flash_block_move>:
{
   22cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22cba:	b088      	sub	sp, #32
   22cbc:	4607      	mov	r7, r0
   22cbe:	460e      	mov	r6, r1
   22cc0:	4615      	mov	r5, r2
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   22cc2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   22cc4:	681b      	ldr	r3, [r3, #0]
   22cc6:	f1c3 0800 	rsb	r8, r3, #0
	block_size =
   22cca:	f008 0820 	and.w	r8, r8, #32
	while (len) {
   22cce:	e001      	b.n	22cd4 <nvs_flash_block_move+0x1e>
		len -= bytes_to_copy;
   22cd0:	1b2d      	subs	r5, r5, r4
		addr += bytes_to_copy;
   22cd2:	4426      	add	r6, r4
	while (len) {
   22cd4:	b1a5      	cbz	r5, 22d00 <nvs_flash_block_move+0x4a>
		bytes_to_copy = MIN(block_size, len);
   22cd6:	462c      	mov	r4, r5
   22cd8:	4545      	cmp	r5, r8
   22cda:	bf28      	it	cs
   22cdc:	4644      	movcs	r4, r8
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   22cde:	4623      	mov	r3, r4
   22ce0:	466a      	mov	r2, sp
   22ce2:	4631      	mov	r1, r6
   22ce4:	4638      	mov	r0, r7
   22ce6:	f7ff fdd7 	bl	22898 <nvs_flash_rd>
		if (rc) {
   22cea:	4603      	mov	r3, r0
   22cec:	b948      	cbnz	r0, 22d02 <nvs_flash_block_move+0x4c>
		rc = nvs_flash_data_wrt(fs, buf, bytes_to_copy);
   22cee:	4622      	mov	r2, r4
   22cf0:	4669      	mov	r1, sp
   22cf2:	4638      	mov	r0, r7
   22cf4:	f7ff ffca 	bl	22c8c <nvs_flash_data_wrt>
		if (rc) {
   22cf8:	4603      	mov	r3, r0
   22cfa:	2800      	cmp	r0, #0
   22cfc:	d0e8      	beq.n	22cd0 <nvs_flash_block_move+0x1a>
   22cfe:	e000      	b.n	22d02 <nvs_flash_block_move+0x4c>
	return 0;
   22d00:	2300      	movs	r3, #0
}
   22d02:	4618      	mov	r0, r3
   22d04:	b008      	add	sp, #32
   22d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022d0a <nvs_flash_ate_wrt>:
{
   22d0a:	b510      	push	{r4, lr}
   22d0c:	4604      	mov	r4, r0
   22d0e:	460a      	mov	r2, r1
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   22d10:	2308      	movs	r3, #8
   22d12:	6841      	ldr	r1, [r0, #4]
   22d14:	f7ff ff50 	bl	22bb8 <nvs_flash_al_wrt>
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   22d18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   22d1a:	681b      	ldr	r3, [r3, #0]
   22d1c:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   22d1e:	2a01      	cmp	r2, #1
   22d20:	d907      	bls.n	22d32 <nvs_flash_ate_wrt+0x28>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   22d22:	4613      	mov	r3, r2
   22d24:	3207      	adds	r2, #7
   22d26:	425b      	negs	r3, r3
   22d28:	4013      	ands	r3, r2
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   22d2a:	6862      	ldr	r2, [r4, #4]
   22d2c:	1ad2      	subs	r2, r2, r3
   22d2e:	6062      	str	r2, [r4, #4]
}
   22d30:	bd10      	pop	{r4, pc}
		return len;
   22d32:	2308      	movs	r3, #8
   22d34:	e7f9      	b.n	22d2a <nvs_flash_ate_wrt+0x20>

00022d36 <nvs_gc>:
{
   22d36:	b5f0      	push	{r4, r5, r6, r7, lr}
   22d38:	b08b      	sub	sp, #44	; 0x2c
   22d3a:	4604      	mov	r4, r0
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   22d3c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   22d3e:	681b      	ldr	r3, [r3, #0]
   22d40:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   22d42:	2a01      	cmp	r2, #1
   22d44:	d922      	bls.n	22d8c <nvs_gc+0x56>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   22d46:	1dd7      	adds	r7, r2, #7
   22d48:	4253      	negs	r3, r2
   22d4a:	401f      	ands	r7, r3
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   22d4c:	88e3      	ldrh	r3, [r4, #6]
   22d4e:	041b      	lsls	r3, r3, #16
   22d50:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
   22d52:	a903      	add	r1, sp, #12
   22d54:	4620      	mov	r0, r4
   22d56:	f7ff fdbd 	bl	228d4 <nvs_sector_advance>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   22d5a:	89a1      	ldrh	r1, [r4, #12]
   22d5c:	9b03      	ldr	r3, [sp, #12]
   22d5e:	4419      	add	r1, r3
   22d60:	1bc9      	subs	r1, r1, r7
   22d62:	9102      	str	r1, [sp, #8]
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
   22d64:	aa08      	add	r2, sp, #32
   22d66:	4620      	mov	r0, r4
   22d68:	f7ff fda3 	bl	228b2 <nvs_flash_ate_rd>
	if (rc < 0) {
   22d6c:	1e03      	subs	r3, r0, #0
   22d6e:	db0a      	blt.n	22d86 <nvs_gc+0x50>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   22d70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   22d72:	7919      	ldrb	r1, [r3, #4]
   22d74:	a808      	add	r0, sp, #32
   22d76:	f7ff fda1 	bl	228bc <nvs_ate_cmp_const>
	if (!rc) {
   22d7a:	b948      	cbnz	r0, 22d90 <nvs_gc+0x5a>
		rc = nvs_flash_erase_sector(fs, sec_addr);
   22d7c:	9903      	ldr	r1, [sp, #12]
   22d7e:	4620      	mov	r0, r4
   22d80:	f7ff fe06 	bl	22990 <nvs_flash_erase_sector>
   22d84:	4603      	mov	r3, r0
}
   22d86:	4618      	mov	r0, r3
   22d88:	b00b      	add	sp, #44	; 0x2c
   22d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return len;
   22d8c:	2708      	movs	r7, #8
   22d8e:	e7dd      	b.n	22d4c <nvs_gc+0x16>
	stop_addr = gc_addr - ate_size;
   22d90:	9b02      	ldr	r3, [sp, #8]
   22d92:	1bdf      	subs	r7, r3, r7
	if (nvs_close_ate_valid(fs, &close_ate)) {
   22d94:	a908      	add	r1, sp, #32
   22d96:	4620      	mov	r0, r4
   22d98:	f7ff fe91 	bl	22abe <nvs_close_ate_valid>
   22d9c:	b138      	cbz	r0, 22dae <nvs_gc+0x78>
		gc_addr &= ADDR_SECT_MASK;
   22d9e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
		gc_addr += close_ate.offset;
   22da2:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   22da6:	eb03 4302 	add.w	r3, r3, r2, lsl #16
   22daa:	9302      	str	r3, [sp, #8]
   22dac:	e023      	b.n	22df6 <nvs_gc+0xc0>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   22dae:	a902      	add	r1, sp, #8
   22db0:	4620      	mov	r0, r4
   22db2:	f7ff fe4c 	bl	22a4e <nvs_recover_last_ate>
		if (rc) {
   22db6:	4603      	mov	r3, r0
   22db8:	b1e8      	cbz	r0, 22df6 <nvs_gc+0xc0>
   22dba:	e7e4      	b.n	22d86 <nvs_gc+0x50>
		} while (wlk_addr != fs->ate_wra);
   22dbc:	6862      	ldr	r2, [r4, #4]
   22dbe:	9b01      	ldr	r3, [sp, #4]
   22dc0:	429a      	cmp	r2, r3
   22dc2:	d014      	beq.n	22dee <nvs_gc+0xb8>
			wlk_prev_addr = wlk_addr;
   22dc4:	9d01      	ldr	r5, [sp, #4]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   22dc6:	aa04      	add	r2, sp, #16
   22dc8:	a901      	add	r1, sp, #4
   22dca:	4620      	mov	r0, r4
   22dcc:	f7ff fe9f 	bl	22b0e <nvs_prev_ate>
			if (rc) {
   22dd0:	4603      	mov	r3, r0
   22dd2:	2800      	cmp	r0, #0
   22dd4:	d1d7      	bne.n	22d86 <nvs_gc+0x50>
			if ((wlk_ate.id == gc_ate.id) &&
   22dd6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   22dda:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   22dde:	429a      	cmp	r2, r3
   22de0:	d1ec      	bne.n	22dbc <nvs_gc+0x86>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   22de2:	a904      	add	r1, sp, #16
   22de4:	4620      	mov	r0, r4
   22de6:	f7ff fe16 	bl	22a16 <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   22dea:	2800      	cmp	r0, #0
   22dec:	d0e6      	beq.n	22dbc <nvs_gc+0x86>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   22dee:	42b5      	cmp	r5, r6
   22df0:	d013      	beq.n	22e1a <nvs_gc+0xe4>
	} while (gc_prev_addr != stop_addr);
   22df2:	42be      	cmp	r6, r7
   22df4:	d031      	beq.n	22e5a <nvs_gc+0x124>
		gc_prev_addr = gc_addr;
   22df6:	9e02      	ldr	r6, [sp, #8]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   22df8:	aa06      	add	r2, sp, #24
   22dfa:	a902      	add	r1, sp, #8
   22dfc:	4620      	mov	r0, r4
   22dfe:	f7ff fe86 	bl	22b0e <nvs_prev_ate>
		if (rc) {
   22e02:	4603      	mov	r3, r0
   22e04:	2800      	cmp	r0, #0
   22e06:	d1be      	bne.n	22d86 <nvs_gc+0x50>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   22e08:	a906      	add	r1, sp, #24
   22e0a:	4620      	mov	r0, r4
   22e0c:	f7ff fe03 	bl	22a16 <nvs_ate_valid>
   22e10:	2800      	cmp	r0, #0
   22e12:	d0ee      	beq.n	22df2 <nvs_gc+0xbc>
		wlk_addr = fs->ate_wra;
   22e14:	6863      	ldr	r3, [r4, #4]
   22e16:	9301      	str	r3, [sp, #4]
   22e18:	e7d4      	b.n	22dc4 <nvs_gc+0x8e>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   22e1a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   22e1e:	2b00      	cmp	r3, #0
   22e20:	d0e7      	beq.n	22df2 <nvs_gc+0xbc>
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   22e22:	0c33      	lsrs	r3, r6, #16
   22e24:	041b      	lsls	r3, r3, #16
			data_addr += gc_ate.offset;
   22e26:	f8bd 501a 	ldrh.w	r5, [sp, #26]
   22e2a:	441d      	add	r5, r3
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   22e2c:	8923      	ldrh	r3, [r4, #8]
   22e2e:	f8ad 301a 	strh.w	r3, [sp, #26]
			nvs_ate_crc8_update(&gc_ate);
   22e32:	a806      	add	r0, sp, #24
   22e34:	f7ff feb7 	bl	22ba6 <nvs_ate_crc8_update>
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   22e38:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   22e3c:	4629      	mov	r1, r5
   22e3e:	4620      	mov	r0, r4
   22e40:	f7ff ff39 	bl	22cb6 <nvs_flash_block_move>
			if (rc) {
   22e44:	4603      	mov	r3, r0
   22e46:	2800      	cmp	r0, #0
   22e48:	d19d      	bne.n	22d86 <nvs_gc+0x50>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   22e4a:	a906      	add	r1, sp, #24
   22e4c:	4620      	mov	r0, r4
   22e4e:	f7ff ff5c 	bl	22d0a <nvs_flash_ate_wrt>
			if (rc) {
   22e52:	4603      	mov	r3, r0
   22e54:	2800      	cmp	r0, #0
   22e56:	d0cc      	beq.n	22df2 <nvs_gc+0xbc>
   22e58:	e795      	b.n	22d86 <nvs_gc+0x50>
	rc = nvs_flash_erase_sector(fs, sec_addr);
   22e5a:	9903      	ldr	r1, [sp, #12]
   22e5c:	4620      	mov	r0, r4
   22e5e:	f7ff fd97 	bl	22990 <nvs_flash_erase_sector>
   22e62:	4603      	mov	r3, r0
	if (rc) {
   22e64:	e78f      	b.n	22d86 <nvs_gc+0x50>

00022e66 <nvs_startup>:
{
   22e66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22e6a:	b085      	sub	sp, #20
   22e6c:	4604      	mov	r4, r0
	uint32_t addr = 0U;
   22e6e:	2300      	movs	r3, #0
   22e70:	9301      	str	r3, [sp, #4]
	uint8_t erase_value = fs->flash_parameters->erase_value;
   22e72:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   22e74:	791e      	ldrb	r6, [r3, #4]
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   22e76:	f100 0914 	add.w	r9, r0, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   22e7a:	f04f 32ff 	mov.w	r2, #4294967295
   22e7e:	f04f 33ff 	mov.w	r3, #4294967295
   22e82:	4648      	mov	r0, r9
   22e84:	f7fc fe4e 	bl	1fb24 <z_impl_k_mutex_lock>
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   22e88:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   22e8a:	681b      	ldr	r3, [r3, #0]
   22e8c:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   22e8e:	2a01      	cmp	r2, #1
   22e90:	d906      	bls.n	22ea0 <nvs_startup+0x3a>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   22e92:	1dd7      	adds	r7, r2, #7
   22e94:	4253      	negs	r3, r2
   22e96:	401f      	ands	r7, r3
	uint16_t i, closed_sectors = 0;
   22e98:	f04f 0800 	mov.w	r8, #0
	for (i = 0; i < fs->sector_count; i++) {
   22e9c:	4645      	mov	r5, r8
   22e9e:	e003      	b.n	22ea8 <nvs_startup+0x42>
		return len;
   22ea0:	2708      	movs	r7, #8
   22ea2:	e7f9      	b.n	22e98 <nvs_startup+0x32>
	for (i = 0; i < fs->sector_count; i++) {
   22ea4:	3501      	adds	r5, #1
   22ea6:	b2ad      	uxth	r5, r5
   22ea8:	89e3      	ldrh	r3, [r4, #14]
   22eaa:	42ab      	cmp	r3, r5
   22eac:	d91c      	bls.n	22ee8 <nvs_startup+0x82>
		       (uint16_t)(fs->sector_size - ate_size);
   22eae:	89a1      	ldrh	r1, [r4, #12]
   22eb0:	1bc9      	subs	r1, r1, r7
   22eb2:	b289      	uxth	r1, r1
		addr = (i << ADDR_SECT_SHIFT) +
   22eb4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   22eb8:	9101      	str	r1, [sp, #4]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   22eba:	2308      	movs	r3, #8
   22ebc:	4632      	mov	r2, r6
   22ebe:	4620      	mov	r0, r4
   22ec0:	f7ff fd41 	bl	22946 <nvs_flash_cmp_const>
		if (rc) {
   22ec4:	2800      	cmp	r0, #0
   22ec6:	d0ed      	beq.n	22ea4 <nvs_startup+0x3e>
			closed_sectors++;
   22ec8:	f108 0801 	add.w	r8, r8, #1
   22ecc:	fa1f f888 	uxth.w	r8, r8
			nvs_sector_advance(fs, &addr);
   22ed0:	a901      	add	r1, sp, #4
   22ed2:	4620      	mov	r0, r4
   22ed4:	f7ff fcfe 	bl	228d4 <nvs_sector_advance>
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   22ed8:	2308      	movs	r3, #8
   22eda:	4632      	mov	r2, r6
   22edc:	9901      	ldr	r1, [sp, #4]
   22ede:	4620      	mov	r0, r4
   22ee0:	f7ff fd31 	bl	22946 <nvs_flash_cmp_const>
			if (!rc) {
   22ee4:	2800      	cmp	r0, #0
   22ee6:	d1dd      	bne.n	22ea4 <nvs_startup+0x3e>
	if (closed_sectors == fs->sector_count) {
   22ee8:	89e3      	ldrh	r3, [r4, #14]
   22eea:	4543      	cmp	r3, r8
   22eec:	f000 80a6 	beq.w	2303c <nvs_startup+0x1d6>
	if (i == fs->sector_count) {
   22ef0:	42ab      	cmp	r3, r5
   22ef2:	d00d      	beq.n	22f10 <nvs_startup+0xaa>
	rc = nvs_recover_last_ate(fs, &addr);
   22ef4:	a901      	add	r1, sp, #4
   22ef6:	4620      	mov	r0, r4
   22ef8:	f7ff fda9 	bl	22a4e <nvs_recover_last_ate>
	if (rc) {
   22efc:	4605      	mov	r5, r0
   22efe:	2800      	cmp	r0, #0
   22f00:	f040 8086 	bne.w	23010 <nvs_startup+0x1aa>
	fs->ate_wra = addr;
   22f04:	9b01      	ldr	r3, [sp, #4]
   22f06:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
   22f08:	0c1b      	lsrs	r3, r3, #16
   22f0a:	041b      	lsls	r3, r3, #16
   22f0c:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
   22f0e:	e010      	b.n	22f32 <nvs_startup+0xcc>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
   22f10:	2308      	movs	r3, #8
   22f12:	4632      	mov	r2, r6
   22f14:	9901      	ldr	r1, [sp, #4]
   22f16:	1bc9      	subs	r1, r1, r7
   22f18:	4620      	mov	r0, r4
   22f1a:	f7ff fd14 	bl	22946 <nvs_flash_cmp_const>
		if (!rc) {
   22f1e:	2800      	cmp	r0, #0
   22f20:	d1e8      	bne.n	22ef4 <nvs_startup+0x8e>
			nvs_sector_advance(fs, &addr);
   22f22:	a901      	add	r1, sp, #4
   22f24:	4620      	mov	r0, r4
   22f26:	f7ff fcd5 	bl	228d4 <nvs_sector_advance>
   22f2a:	e7e3      	b.n	22ef4 <nvs_startup+0x8e>
		fs->ate_wra -= ate_size;
   22f2c:	6863      	ldr	r3, [r4, #4]
   22f2e:	1bdb      	subs	r3, r3, r7
   22f30:	6063      	str	r3, [r4, #4]
	while (fs->ate_wra >= fs->data_wra) {
   22f32:	6861      	ldr	r1, [r4, #4]
   22f34:	68a3      	ldr	r3, [r4, #8]
   22f36:	4299      	cmp	r1, r3
   22f38:	d32d      	bcc.n	22f96 <nvs_startup+0x130>
		rc = nvs_flash_ate_rd(fs, fs->ate_wra, &last_ate);
   22f3a:	aa02      	add	r2, sp, #8
   22f3c:	4620      	mov	r0, r4
   22f3e:	f7ff fcb8 	bl	228b2 <nvs_flash_ate_rd>
		if (rc) {
   22f42:	4605      	mov	r5, r0
   22f44:	2800      	cmp	r0, #0
   22f46:	d163      	bne.n	23010 <nvs_startup+0x1aa>
		rc = nvs_ate_cmp_const(&last_ate, erase_value);
   22f48:	4631      	mov	r1, r6
   22f4a:	a802      	add	r0, sp, #8
   22f4c:	f7ff fcb6 	bl	228bc <nvs_ate_cmp_const>
		if (!rc) {
   22f50:	b308      	cbz	r0, 22f96 <nvs_startup+0x130>
		if (nvs_ate_valid(fs, &last_ate)) {
   22f52:	a902      	add	r1, sp, #8
   22f54:	4620      	mov	r0, r4
   22f56:	f7ff fd5e 	bl	22a16 <nvs_ate_valid>
   22f5a:	2800      	cmp	r0, #0
   22f5c:	d0e6      	beq.n	22f2c <nvs_startup+0xc6>
			fs->data_wra = addr & ADDR_SECT_MASK;
   22f5e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   22f62:	0419      	lsls	r1, r3, #16
   22f64:	60a1      	str	r1, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   22f66:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   22f6a:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   22f6e:	4403      	add	r3, r0
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   22f70:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   22f72:	6812      	ldr	r2, [r2, #0]
   22f74:	b2d5      	uxtb	r5, r2
	if (write_block_size <= 1U) {
   22f76:	2d01      	cmp	r5, #1
   22f78:	d903      	bls.n	22f82 <nvs_startup+0x11c>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   22f7a:	442b      	add	r3, r5
   22f7c:	3b01      	subs	r3, #1
   22f7e:	426a      	negs	r2, r5
   22f80:	4013      	ands	r3, r2
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   22f82:	440b      	add	r3, r1
   22f84:	60a3      	str	r3, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   22f86:	6862      	ldr	r2, [r4, #4]
   22f88:	4293      	cmp	r3, r2
   22f8a:	d1cf      	bne.n	22f2c <nvs_startup+0xc6>
   22f8c:	2800      	cmp	r0, #0
   22f8e:	d0cd      	beq.n	22f2c <nvs_startup+0xc6>
				rc = -ESPIPE;
   22f90:	f06f 051c 	mvn.w	r5, #28
   22f94:	e03c      	b.n	23010 <nvs_startup+0x1aa>
	addr = fs->ate_wra & ADDR_SECT_MASK;
   22f96:	88e3      	ldrh	r3, [r4, #6]
   22f98:	041b      	lsls	r3, r3, #16
   22f9a:	9301      	str	r3, [sp, #4]
	nvs_sector_advance(fs, &addr);
   22f9c:	a901      	add	r1, sp, #4
   22f9e:	4620      	mov	r0, r4
   22fa0:	f7ff fc98 	bl	228d4 <nvs_sector_advance>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
   22fa4:	89a3      	ldrh	r3, [r4, #12]
   22fa6:	4632      	mov	r2, r6
   22fa8:	9901      	ldr	r1, [sp, #4]
   22faa:	4620      	mov	r0, r4
   22fac:	f7ff fccb 	bl	22946 <nvs_flash_cmp_const>
	if (rc < 0) {
   22fb0:	1e05      	subs	r5, r0, #0
   22fb2:	db2d      	blt.n	23010 <nvs_startup+0x1aa>
	if (rc) {
   22fb4:	b98d      	cbnz	r5, 22fda <nvs_startup+0x174>
	while (fs->ate_wra > fs->data_wra) {
   22fb6:	6863      	ldr	r3, [r4, #4]
   22fb8:	68a1      	ldr	r1, [r4, #8]
   22fba:	428b      	cmp	r3, r1
   22fbc:	d922      	bls.n	23004 <nvs_startup+0x19e>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
   22fbe:	1a5b      	subs	r3, r3, r1
   22fc0:	4632      	mov	r2, r6
   22fc2:	4620      	mov	r0, r4
   22fc4:	f7ff fcbf 	bl	22946 <nvs_flash_cmp_const>
		if (rc < 0) {
   22fc8:	1e05      	subs	r5, r0, #0
   22fca:	db21      	blt.n	23010 <nvs_startup+0x1aa>
		if (!rc) {
   22fcc:	b1d5      	cbz	r5, 23004 <nvs_startup+0x19e>
		fs->data_wra += fs->flash_parameters->write_block_size;
   22fce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   22fd0:	681a      	ldr	r2, [r3, #0]
   22fd2:	68a3      	ldr	r3, [r4, #8]
   22fd4:	4413      	add	r3, r2
   22fd6:	60a3      	str	r3, [r4, #8]
   22fd8:	e7ed      	b.n	22fb6 <nvs_startup+0x150>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   22fda:	6861      	ldr	r1, [r4, #4]
   22fdc:	4620      	mov	r0, r4
   22fde:	f7ff fcd7 	bl	22990 <nvs_flash_erase_sector>
		if (rc) {
   22fe2:	4605      	mov	r5, r0
   22fe4:	b9a0      	cbnz	r0, 23010 <nvs_startup+0x1aa>
		fs->ate_wra &= ADDR_SECT_MASK;
   22fe6:	88e2      	ldrh	r2, [r4, #6]
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   22fe8:	89a3      	ldrh	r3, [r4, #12]
   22fea:	eba3 0347 	sub.w	r3, r3, r7, lsl #1
   22fee:	eb03 4302 	add.w	r3, r3, r2, lsl #16
   22ff2:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
   22ff4:	0c1b      	lsrs	r3, r3, #16
   22ff6:	041b      	lsls	r3, r3, #16
   22ff8:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   22ffa:	4620      	mov	r0, r4
   22ffc:	f7ff fe9b 	bl	22d36 <nvs_gc>
   23000:	4605      	mov	r5, r0
		goto end;
   23002:	e005      	b.n	23010 <nvs_startup+0x1aa>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   23004:	6861      	ldr	r1, [r4, #4]
   23006:	eb01 0747 	add.w	r7, r1, r7, lsl #1
   2300a:	89a3      	ldrh	r3, [r4, #12]
   2300c:	429f      	cmp	r7, r3
   2300e:	d006      	beq.n	2301e <nvs_startup+0x1b8>
	return z_impl_k_mutex_unlock(mutex);
   23010:	4648      	mov	r0, r9
   23012:	f7fc fe11 	bl	1fc38 <z_impl_k_mutex_unlock>
}
   23016:	4628      	mov	r0, r5
   23018:	b005      	add	sp, #20
   2301a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   2301e:	68a2      	ldr	r2, [r4, #8]
   23020:	0c0b      	lsrs	r3, r1, #16
   23022:	041b      	lsls	r3, r3, #16
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   23024:	429a      	cmp	r2, r3
   23026:	d0f3      	beq.n	23010 <nvs_startup+0x1aa>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   23028:	4620      	mov	r0, r4
   2302a:	f7ff fcb1 	bl	22990 <nvs_flash_erase_sector>
		if (rc) {
   2302e:	4605      	mov	r5, r0
   23030:	2800      	cmp	r0, #0
   23032:	d1ed      	bne.n	23010 <nvs_startup+0x1aa>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   23034:	88e3      	ldrh	r3, [r4, #6]
   23036:	041b      	lsls	r3, r3, #16
   23038:	60a3      	str	r3, [r4, #8]
   2303a:	e7e9      	b.n	23010 <nvs_startup+0x1aa>
		rc = -EDEADLK;
   2303c:	f06f 052c 	mvn.w	r5, #44	; 0x2c
   23040:	e7e6      	b.n	23010 <nvs_startup+0x1aa>

00023042 <nvs_flash_wrt_entry>:
{
   23042:	b570      	push	{r4, r5, r6, lr}
   23044:	b082      	sub	sp, #8
   23046:	4604      	mov	r4, r0
   23048:	4616      	mov	r6, r2
   2304a:	461d      	mov	r5, r3
	entry.id = id;
   2304c:	f8ad 1000 	strh.w	r1, [sp]
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   23050:	8903      	ldrh	r3, [r0, #8]
   23052:	f8ad 3002 	strh.w	r3, [sp, #2]
	entry.len = (uint16_t)len;
   23056:	f8ad 5004 	strh.w	r5, [sp, #4]
	entry.part = 0xff;
   2305a:	23ff      	movs	r3, #255	; 0xff
   2305c:	f88d 3006 	strb.w	r3, [sp, #6]
	nvs_ate_crc8_update(&entry);
   23060:	4668      	mov	r0, sp
   23062:	f7ff fda0 	bl	22ba6 <nvs_ate_crc8_update>
	rc = nvs_flash_data_wrt(fs, data, len);
   23066:	462a      	mov	r2, r5
   23068:	4631      	mov	r1, r6
   2306a:	4620      	mov	r0, r4
   2306c:	f7ff fe0e 	bl	22c8c <nvs_flash_data_wrt>
	if (rc) {
   23070:	b108      	cbz	r0, 23076 <nvs_flash_wrt_entry+0x34>
}
   23072:	b002      	add	sp, #8
   23074:	bd70      	pop	{r4, r5, r6, pc}
	rc = nvs_flash_ate_wrt(fs, &entry);
   23076:	4669      	mov	r1, sp
   23078:	4620      	mov	r0, r4
   2307a:	f7ff fe46 	bl	22d0a <nvs_flash_ate_wrt>
	if (rc) {
   2307e:	e7f8      	b.n	23072 <nvs_flash_wrt_entry+0x30>

00023080 <nvs_sector_close>:
{
   23080:	b530      	push	{r4, r5, lr}
   23082:	b083      	sub	sp, #12
   23084:	4604      	mov	r4, r0
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   23086:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   23088:	681b      	ldr	r3, [r3, #0]
   2308a:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   2308c:	2a01      	cmp	r2, #1
   2308e:	d925      	bls.n	230dc <nvs_sector_close+0x5c>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   23090:	4613      	mov	r3, r2
   23092:	3207      	adds	r2, #7
   23094:	425b      	negs	r3, r3
   23096:	401a      	ands	r2, r3
	close_ate.id = 0xFFFF;
   23098:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2309c:	f8ad 3000 	strh.w	r3, [sp]
	close_ate.len = 0U;
   230a0:	2500      	movs	r5, #0
   230a2:	f8ad 5004 	strh.w	r5, [sp, #4]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   230a6:	6863      	ldr	r3, [r4, #4]
   230a8:	1899      	adds	r1, r3, r2
   230aa:	f8ad 1002 	strh.w	r1, [sp, #2]
	fs->ate_wra &= ADDR_SECT_MASK;
   230ae:	0c1b      	lsrs	r3, r3, #16
   230b0:	041b      	lsls	r3, r3, #16
	fs->ate_wra += (fs->sector_size - ate_size);
   230b2:	89a1      	ldrh	r1, [r4, #12]
   230b4:	1a8a      	subs	r2, r1, r2
   230b6:	4413      	add	r3, r2
   230b8:	6063      	str	r3, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   230ba:	4668      	mov	r0, sp
   230bc:	f7ff fd73 	bl	22ba6 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   230c0:	4669      	mov	r1, sp
   230c2:	4620      	mov	r0, r4
   230c4:	f7ff fe21 	bl	22d0a <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   230c8:	1d21      	adds	r1, r4, #4
   230ca:	4620      	mov	r0, r4
   230cc:	f7ff fc02 	bl	228d4 <nvs_sector_advance>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   230d0:	88e3      	ldrh	r3, [r4, #6]
   230d2:	041b      	lsls	r3, r3, #16
   230d4:	60a3      	str	r3, [r4, #8]
}
   230d6:	4628      	mov	r0, r5
   230d8:	b003      	add	sp, #12
   230da:	bd30      	pop	{r4, r5, pc}
		return len;
   230dc:	2208      	movs	r2, #8
   230de:	e7db      	b.n	23098 <nvs_sector_close+0x18>

000230e0 <nvs_delete>:
{
   230e0:	b508      	push	{r3, lr}
	return nvs_write(fs, id, NULL, 0);
   230e2:	2300      	movs	r3, #0
   230e4:	461a      	mov	r2, r3
   230e6:	f7ee fd93 	bl	11c10 <nvs_write>
}
   230ea:	bd08      	pop	{r3, pc}

000230ec <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   230ec:	b510      	push	{r4, lr}
   230ee:	b082      	sub	sp, #8
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   230f0:	2400      	movs	r4, #0
   230f2:	9400      	str	r4, [sp, #0]
   230f4:	f7ee fe56 	bl	11da4 <nvs_read_hist>
	return rc;
}
   230f8:	b002      	add	sp, #8
   230fa:	bd10      	pop	{r4, pc}

000230fc <should_bail>:
	if (info->start_offset < data->area_off) {
   230fc:	6800      	ldr	r0, [r0, #0]
   230fe:	684b      	ldr	r3, [r1, #4]
   23100:	4298      	cmp	r0, r3
   23102:	d30b      	bcc.n	2311c <should_bail+0x20>
{
   23104:	b410      	push	{r4}
	} else if (info->start_offset >= data->area_off + data->area_len) {
   23106:	688c      	ldr	r4, [r1, #8]
   23108:	4423      	add	r3, r4
   2310a:	4298      	cmp	r0, r3
   2310c:	d209      	bcs.n	23122 <should_bail+0x26>
	} else if (data->ret_idx >= data->ret_len) {
   2310e:	6908      	ldr	r0, [r1, #16]
   23110:	694b      	ldr	r3, [r1, #20]
   23112:	4298      	cmp	r0, r3
   23114:	d209      	bcs.n	2312a <should_bail+0x2e>
	return false;
   23116:	2000      	movs	r0, #0
}
   23118:	bc10      	pop	{r4}
   2311a:	4770      	bx	lr
		*bail_value = true;
   2311c:	2001      	movs	r0, #1
   2311e:	7010      	strb	r0, [r2, #0]
}
   23120:	4770      	bx	lr
		*bail_value = false;
   23122:	2300      	movs	r3, #0
   23124:	7013      	strb	r3, [r2, #0]
		return true;
   23126:	2001      	movs	r0, #1
   23128:	e7f6      	b.n	23118 <should_bail+0x1c>
		data->status = -ENOMEM;
   2312a:	f06f 030b 	mvn.w	r3, #11
   2312e:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   23130:	2300      	movs	r3, #0
   23132:	7013      	strb	r3, [r2, #0]
		return true;
   23134:	2001      	movs	r0, #1
   23136:	e7ef      	b.n	23118 <should_bail+0x1c>

00023138 <get_sectors_cb>:
{
   23138:	b570      	push	{r4, r5, r6, lr}
   2313a:	b082      	sub	sp, #8
   2313c:	4605      	mov	r5, r0
   2313e:	460c      	mov	r4, r1
	struct flash_sector *ret = data->ret;
   23140:	68ce      	ldr	r6, [r1, #12]
	if (should_bail(info, data, &bail)) {
   23142:	f10d 0207 	add.w	r2, sp, #7
   23146:	f7ff ffd9 	bl	230fc <should_bail>
   2314a:	b980      	cbnz	r0, 2316e <get_sectors_cb+0x36>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   2314c:	682b      	ldr	r3, [r5, #0]
   2314e:	6861      	ldr	r1, [r4, #4]
   23150:	6922      	ldr	r2, [r4, #16]
   23152:	1a5b      	subs	r3, r3, r1
   23154:	f846 3032 	str.w	r3, [r6, r2, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   23158:	6923      	ldr	r3, [r4, #16]
   2315a:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
   2315e:	686b      	ldr	r3, [r5, #4]
   23160:	6073      	str	r3, [r6, #4]
	data->ret_idx++;
   23162:	6923      	ldr	r3, [r4, #16]
   23164:	3301      	adds	r3, #1
   23166:	6123      	str	r3, [r4, #16]
	return true;
   23168:	2001      	movs	r0, #1
}
   2316a:	b002      	add	sp, #8
   2316c:	bd70      	pop	{r4, r5, r6, pc}
		return bail;
   2316e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   23172:	e7fa      	b.n	2316a <get_sectors_cb+0x32>

00023174 <flash_area_layout>:
{
   23174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23176:	460d      	mov	r5, r1
   23178:	4617      	mov	r7, r2
   2317a:	461e      	mov	r6, r3
   2317c:	9c06      	ldr	r4, [sp, #24]
	cb_data->area_idx = idx;
   2317e:	6020      	str	r0, [r4, #0]
	fa = get_flash_area_from_id(idx);
   23180:	f7ee fe90 	bl	11ea4 <get_flash_area_from_id>
	if (fa == NULL) {
   23184:	b1b8      	cbz	r0, 231b6 <flash_area_layout+0x42>
	cb_data->area_off = fa->fa_off;
   23186:	6843      	ldr	r3, [r0, #4]
   23188:	6063      	str	r3, [r4, #4]
	cb_data->area_len = fa->fa_size;
   2318a:	6883      	ldr	r3, [r0, #8]
   2318c:	60a3      	str	r3, [r4, #8]
	cb_data->ret = ret;
   2318e:	60e7      	str	r7, [r4, #12]
	cb_data->ret_idx = 0U;
   23190:	2200      	movs	r2, #0
   23192:	6122      	str	r2, [r4, #16]
	cb_data->ret_len = *cnt;
   23194:	682b      	ldr	r3, [r5, #0]
   23196:	6163      	str	r3, [r4, #20]
	cb_data->status = 0;
   23198:	61a2      	str	r2, [r4, #24]
	flash_dev = device_get_binding(fa->fa_dev_name);
   2319a:	68c0      	ldr	r0, [r0, #12]
   2319c:	f7fc f8d4 	bl	1f348 <z_impl_device_get_binding>
	if (flash_dev == NULL) {
   231a0:	b160      	cbz	r0, 231bc <flash_area_layout+0x48>
	flash_page_foreach(flash_dev, cb, cb_data);
   231a2:	4622      	mov	r2, r4
   231a4:	4631      	mov	r1, r6
   231a6:	f005 f9c1 	bl	2852c <flash_page_foreach>
	if (cb_data->status == 0) {
   231aa:	69a3      	ldr	r3, [r4, #24]
   231ac:	b90b      	cbnz	r3, 231b2 <flash_area_layout+0x3e>
		*cnt = cb_data->ret_idx;
   231ae:	6923      	ldr	r3, [r4, #16]
   231b0:	602b      	str	r3, [r5, #0]
	return cb_data->status;
   231b2:	69a0      	ldr	r0, [r4, #24]
}
   231b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   231b6:	f06f 0015 	mvn.w	r0, #21
   231ba:	e7fb      	b.n	231b4 <flash_area_layout+0x40>
		return -ENODEV;
   231bc:	f06f 0012 	mvn.w	r0, #18
   231c0:	e7f8      	b.n	231b4 <flash_area_layout+0x40>

000231c2 <settings_load>:
{
   231c2:	b508      	push	{r3, lr}
	return settings_load_subtree(NULL);
   231c4:	2000      	movs	r0, #0
   231c6:	f7ee fee1 	bl	11f8c <settings_load_subtree>
}
   231ca:	bd08      	pop	{r3, pc}

000231cc <settings_delete>:
{
   231cc:	b508      	push	{r3, lr}
	return settings_save_one(name, NULL, 0);
   231ce:	2200      	movs	r2, #0
   231d0:	4611      	mov	r1, r2
   231d2:	f7ee fe9f 	bl	11f14 <settings_save_one>
}
   231d6:	bd08      	pop	{r3, pc}

000231d8 <settings_name_steq>:
{
   231d8:	b410      	push	{r4}
	if (next) {
   231da:	4614      	mov	r4, r2
   231dc:	b10a      	cbz	r2, 231e2 <settings_name_steq+0xa>
		*next = NULL;
   231de:	2300      	movs	r3, #0
   231e0:	6013      	str	r3, [r2, #0]
	if ((!name) || (!key)) {
   231e2:	b1d0      	cbz	r0, 2321a <settings_name_steq+0x42>
   231e4:	b919      	cbnz	r1, 231ee <settings_name_steq+0x16>
		return 0;
   231e6:	2000      	movs	r0, #0
   231e8:	e01a      	b.n	23220 <settings_name_steq+0x48>
		key++;
   231ea:	3101      	adds	r1, #1
		name++;
   231ec:	3001      	adds	r0, #1
	while ((*key != '\0') && (*key == *name) &&
   231ee:	780a      	ldrb	r2, [r1, #0]
   231f0:	b12a      	cbz	r2, 231fe <settings_name_steq+0x26>
   231f2:	7803      	ldrb	r3, [r0, #0]
   231f4:	429a      	cmp	r2, r3
   231f6:	d102      	bne.n	231fe <settings_name_steq+0x26>
   231f8:	b10b      	cbz	r3, 231fe <settings_name_steq+0x26>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   231fa:	2b3d      	cmp	r3, #61	; 0x3d
   231fc:	d1f5      	bne.n	231ea <settings_name_steq+0x12>
	if (*key != '\0') {
   231fe:	b972      	cbnz	r2, 2321e <settings_name_steq+0x46>
	if (*name == SETTINGS_NAME_SEPARATOR) {
   23200:	7803      	ldrb	r3, [r0, #0]
   23202:	2b2f      	cmp	r3, #47	; 0x2f
   23204:	d004      	beq.n	23210 <settings_name_steq+0x38>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   23206:	2b3d      	cmp	r3, #61	; 0x3d
   23208:	d00c      	beq.n	23224 <settings_name_steq+0x4c>
   2320a:	b16b      	cbz	r3, 23228 <settings_name_steq+0x50>
	return 0;
   2320c:	2000      	movs	r0, #0
   2320e:	e007      	b.n	23220 <settings_name_steq+0x48>
		if (next) {
   23210:	b10c      	cbz	r4, 23216 <settings_name_steq+0x3e>
			*next = name + 1;
   23212:	3001      	adds	r0, #1
   23214:	6020      	str	r0, [r4, #0]
		return 1;
   23216:	2001      	movs	r0, #1
   23218:	e002      	b.n	23220 <settings_name_steq+0x48>
		return 0;
   2321a:	2000      	movs	r0, #0
   2321c:	e000      	b.n	23220 <settings_name_steq+0x48>
		return 0;
   2321e:	2000      	movs	r0, #0
}
   23220:	bc10      	pop	{r4}
   23222:	4770      	bx	lr
		return 1;
   23224:	2001      	movs	r0, #1
   23226:	e7fb      	b.n	23220 <settings_name_steq+0x48>
   23228:	2001      	movs	r0, #1
   2322a:	e7f9      	b.n	23220 <settings_name_steq+0x48>

0002322c <settings_name_next>:
{
   2322c:	b410      	push	{r4}
   2322e:	4602      	mov	r2, r0
	if (next) {
   23230:	460c      	mov	r4, r1
   23232:	b109      	cbz	r1, 23238 <settings_name_next+0xc>
		*next = NULL;
   23234:	2300      	movs	r3, #0
   23236:	600b      	str	r3, [r1, #0]
	if (!name) {
   23238:	b192      	cbz	r2, 23260 <settings_name_next+0x34>
	int rc = 0;
   2323a:	2000      	movs	r0, #0
   2323c:	e001      	b.n	23242 <settings_name_next+0x16>
		rc++;
   2323e:	3001      	adds	r0, #1
		name++;
   23240:	3201      	adds	r2, #1
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   23242:	7813      	ldrb	r3, [r2, #0]
   23244:	b11b      	cbz	r3, 2324e <settings_name_next+0x22>
   23246:	2b3d      	cmp	r3, #61	; 0x3d
   23248:	d001      	beq.n	2324e <settings_name_next+0x22>
   2324a:	2b2f      	cmp	r3, #47	; 0x2f
   2324c:	d1f7      	bne.n	2323e <settings_name_next+0x12>
	if (*name == SETTINGS_NAME_SEPARATOR) {
   2324e:	2b2f      	cmp	r3, #47	; 0x2f
   23250:	d001      	beq.n	23256 <settings_name_next+0x2a>
}
   23252:	bc10      	pop	{r4}
   23254:	4770      	bx	lr
		if (next) {
   23256:	2c00      	cmp	r4, #0
   23258:	d0fb      	beq.n	23252 <settings_name_next+0x26>
			*next = name + 1;
   2325a:	3201      	adds	r2, #1
   2325c:	6022      	str	r2, [r4, #0]
		return rc;
   2325e:	e7f8      	b.n	23252 <settings_name_next+0x26>
		return 0;
   23260:	2000      	movs	r0, #0
   23262:	e7f6      	b.n	23252 <settings_name_next+0x26>

00023264 <settings_nvs_read_fn>:
{
   23264:	b510      	push	{r4, lr}
   23266:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   23268:	4613      	mov	r3, r2
   2326a:	460a      	mov	r2, r1
   2326c:	8881      	ldrh	r1, [r0, #4]
   2326e:	6800      	ldr	r0, [r0, #0]
   23270:	f7ff ff3c 	bl	230ec <nvs_read>
   23274:	4603      	mov	r3, r0
	if (rc > (ssize_t)len) {
   23276:	4620      	mov	r0, r4
   23278:	429c      	cmp	r4, r3
   2327a:	db00      	blt.n	2327e <settings_nvs_read_fn+0x1a>
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   2327c:	4618      	mov	r0, r3
}
   2327e:	bd10      	pop	{r4, pc}

00023280 <settings_nvs_save>:
{
   23280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23284:	b097      	sub	sp, #92	; 0x5c
   23286:	9300      	str	r3, [sp, #0]
	if (!name) {
   23288:	2900      	cmp	r1, #0
   2328a:	f000 808e 	beq.w	233aa <settings_nvs_save+0x12a>
   2328e:	4606      	mov	r6, r0
   23290:	4692      	mov	sl, r2
   23292:	468b      	mov	fp, r1
	delete = ((value == NULL) || (val_len == 0));
   23294:	b13a      	cbz	r2, 232a6 <settings_nvs_save+0x26>
   23296:	b943      	cbnz	r3, 232aa <settings_nvs_save+0x2a>
   23298:	2701      	movs	r7, #1
	name_id = cf->last_name_id + 1;
   2329a:	f9b6 5038 	ldrsh.w	r5, [r6, #56]	; 0x38
   2329e:	3501      	adds	r5, #1
   232a0:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   232a2:	9501      	str	r5, [sp, #4]
   232a4:	e007      	b.n	232b6 <settings_nvs_save+0x36>
	delete = ((value == NULL) || (val_len == 0));
   232a6:	2701      	movs	r7, #1
   232a8:	e7f7      	b.n	2329a <settings_nvs_save+0x1a>
   232aa:	2700      	movs	r7, #0
   232ac:	e7f5      	b.n	2329a <settings_nvs_save+0x1a>
			if (rc == -ENOENT) {
   232ae:	f110 0f02 	cmn.w	r0, #2
   232b2:	d03d      	beq.n	23330 <settings_nvs_save+0xb0>
	delete = ((value == NULL) || (val_len == 0));
   232b4:	4625      	mov	r5, r4
		name_id--;
   232b6:	1e6c      	subs	r4, r5, #1
   232b8:	b2a4      	uxth	r4, r4
		if (name_id == NVS_NAMECNT_ID) {
   232ba:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   232be:	d059      	beq.n	23374 <settings_nvs_save+0xf4>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   232c0:	f106 0908 	add.w	r9, r6, #8
   232c4:	234a      	movs	r3, #74	; 0x4a
   232c6:	aa03      	add	r2, sp, #12
   232c8:	4621      	mov	r1, r4
   232ca:	4648      	mov	r0, r9
   232cc:	f7ff ff0e 	bl	230ec <nvs_read>
		if (rc < 0) {
   232d0:	2800      	cmp	r0, #0
   232d2:	dbec      	blt.n	232ae <settings_nvs_save+0x2e>
		rdname[rc] = '\0';
   232d4:	ab16      	add	r3, sp, #88	; 0x58
   232d6:	4418      	add	r0, r3
   232d8:	2300      	movs	r3, #0
   232da:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   232de:	a903      	add	r1, sp, #12
   232e0:	4658      	mov	r0, fp
   232e2:	f001 fb87 	bl	249f4 <strcmp>
   232e6:	4680      	mov	r8, r0
   232e8:	2800      	cmp	r0, #0
   232ea:	d1e3      	bne.n	232b4 <settings_nvs_save+0x34>
		if ((delete) && (name_id == cf->last_name_id)) {
   232ec:	b117      	cbz	r7, 232f4 <settings_nvs_save+0x74>
   232ee:	8f33      	ldrh	r3, [r6, #56]	; 0x38
   232f0:	42a3      	cmp	r3, r4
   232f2:	d01f      	beq.n	23334 <settings_nvs_save+0xb4>
		if (delete) {
   232f4:	bb67      	cbnz	r7, 23350 <settings_nvs_save+0xd0>
		write_name = false;
   232f6:	463d      	mov	r5, r7
	if (delete) {
   232f8:	2f00      	cmp	r7, #0
   232fa:	d159      	bne.n	233b0 <settings_nvs_save+0x130>
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   232fc:	f5b4 4f40 	cmp.w	r4, #49152	; 0xc000
   23300:	d05c      	beq.n	233bc <settings_nvs_save+0x13c>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   23302:	f106 0708 	add.w	r7, r6, #8
   23306:	f504 4180 	add.w	r1, r4, #16384	; 0x4000
   2330a:	9b00      	ldr	r3, [sp, #0]
   2330c:	4652      	mov	r2, sl
   2330e:	b289      	uxth	r1, r1
   23310:	4638      	mov	r0, r7
   23312:	f7ee fc7d 	bl	11c10 <nvs_write>
	if (rc < 0) {
   23316:	f1b0 0800 	subs.w	r8, r0, #0
   2331a:	db4b      	blt.n	233b4 <settings_nvs_save+0x134>
	if (write_name) {
   2331c:	bb6d      	cbnz	r5, 2337a <settings_nvs_save+0xfa>
	if (write_name_id > cf->last_name_id) {
   2331e:	8f33      	ldrh	r3, [r6, #56]	; 0x38
   23320:	42a3      	cmp	r3, r4
   23322:	d337      	bcc.n	23394 <settings_nvs_save+0x114>
	if (rc < 0) {
   23324:	f1b8 0f00 	cmp.w	r8, #0
   23328:	db44      	blt.n	233b4 <settings_nvs_save+0x134>
	return 0;
   2332a:	f04f 0800 	mov.w	r8, #0
   2332e:	e041      	b.n	233b4 <settings_nvs_save+0x134>
				write_name_id = name_id;
   23330:	9401      	str	r4, [sp, #4]
			continue;
   23332:	e7bf      	b.n	232b4 <settings_nvs_save+0x34>
			cf->last_name_id--;
   23334:	3b01      	subs	r3, #1
   23336:	4632      	mov	r2, r6
   23338:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   2333c:	2302      	movs	r3, #2
   2333e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   23342:	4648      	mov	r0, r9
   23344:	f7ee fc64 	bl	11c10 <nvs_write>
			if (rc < 0) {
   23348:	2800      	cmp	r0, #0
   2334a:	dad3      	bge.n	232f4 <settings_nvs_save+0x74>
				return rc;
   2334c:	4680      	mov	r8, r0
   2334e:	e031      	b.n	233b4 <settings_nvs_save+0x134>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   23350:	4621      	mov	r1, r4
   23352:	4648      	mov	r0, r9
   23354:	f7ff fec4 	bl	230e0 <nvs_delete>
			if (rc >= 0) {
   23358:	2800      	cmp	r0, #0
   2335a:	da03      	bge.n	23364 <settings_nvs_save+0xe4>
			if (rc < 0) {
   2335c:	2800      	cmp	r0, #0
   2335e:	da29      	bge.n	233b4 <settings_nvs_save+0x134>
				return rc;
   23360:	4680      	mov	r8, r0
   23362:	e027      	b.n	233b4 <settings_nvs_save+0x134>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   23364:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   23368:	313f      	adds	r1, #63	; 0x3f
   2336a:	b289      	uxth	r1, r1
   2336c:	4648      	mov	r0, r9
   2336e:	f7ff feb7 	bl	230e0 <nvs_delete>
   23372:	e7f3      	b.n	2335c <settings_nvs_save+0xdc>
   23374:	9c01      	ldr	r4, [sp, #4]
	write_name = true;
   23376:	2501      	movs	r5, #1
   23378:	e7be      	b.n	232f8 <settings_nvs_save+0x78>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   2337a:	4658      	mov	r0, fp
   2337c:	f001 fb28 	bl	249d0 <strlen>
   23380:	4603      	mov	r3, r0
   23382:	465a      	mov	r2, fp
   23384:	4621      	mov	r1, r4
   23386:	4638      	mov	r0, r7
   23388:	f7ee fc42 	bl	11c10 <nvs_write>
		if (rc < 0) {
   2338c:	f1b0 0800 	subs.w	r8, r0, #0
   23390:	dac5      	bge.n	2331e <settings_nvs_save+0x9e>
   23392:	e00f      	b.n	233b4 <settings_nvs_save+0x134>
		cf->last_name_id = write_name_id;
   23394:	4632      	mov	r2, r6
   23396:	f822 4f38 	strh.w	r4, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   2339a:	2302      	movs	r3, #2
   2339c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   233a0:	4638      	mov	r0, r7
   233a2:	f7ee fc35 	bl	11c10 <nvs_write>
   233a6:	4680      	mov	r8, r0
   233a8:	e7bc      	b.n	23324 <settings_nvs_save+0xa4>
		return -EINVAL;
   233aa:	f06f 0815 	mvn.w	r8, #21
   233ae:	e001      	b.n	233b4 <settings_nvs_save+0x134>
		return 0;
   233b0:	f04f 0800 	mov.w	r8, #0
}
   233b4:	4640      	mov	r0, r8
   233b6:	b017      	add	sp, #92	; 0x5c
   233b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
   233bc:	f06f 080b 	mvn.w	r8, #11
   233c0:	e7f8      	b.n	233b4 <settings_nvs_save+0x134>

000233c2 <settings_nvs_backend_init>:
{
   233c2:	b570      	push	{r4, r5, r6, lr}
   233c4:	b082      	sub	sp, #8
   233c6:	4604      	mov	r4, r0
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   233c8:	f100 0508 	add.w	r5, r0, #8
   233cc:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
   233ce:	4628      	mov	r0, r5
   233d0:	f7ee fb2c 	bl	11a2c <nvs_init>
	if (rc) {
   233d4:	4606      	mov	r6, r0
   233d6:	b110      	cbz	r0, 233de <settings_nvs_backend_init+0x1c>
}
   233d8:	4630      	mov	r0, r6
   233da:	b002      	add	sp, #8
   233dc:	bd70      	pop	{r4, r5, r6, pc}
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   233de:	2302      	movs	r3, #2
   233e0:	f10d 0206 	add.w	r2, sp, #6
   233e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   233e8:	4628      	mov	r0, r5
   233ea:	f7ff fe7f 	bl	230ec <nvs_read>
	if (rc < 0) {
   233ee:	2800      	cmp	r0, #0
   233f0:	db03      	blt.n	233fa <settings_nvs_backend_init+0x38>
		cf->last_name_id = last_name_id;
   233f2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   233f6:	8723      	strh	r3, [r4, #56]	; 0x38
   233f8:	e7ee      	b.n	233d8 <settings_nvs_backend_init+0x16>
		cf->last_name_id = NVS_NAMECNT_ID;
   233fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   233fe:	8723      	strh	r3, [r4, #56]	; 0x38
   23400:	e7ea      	b.n	233d8 <settings_nvs_backend_init+0x16>

00023402 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   23402:	2200      	movs	r2, #0
   23404:	6002      	str	r2, [r0, #0]
   23406:	6042      	str	r2, [r0, #4]
   23408:	6082      	str	r2, [r0, #8]
}
   2340a:	4770      	bx	lr

0002340c <wait>:
{
   2340c:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
   2340e:	f005 fe41 	bl	29094 <k_is_in_isr>
   23412:	b100      	cbz	r0, 23416 <wait+0xa>
}
   23414:	bd08      	pop	{r3, pc}
	return z_impl_k_sleep(timeout);
   23416:	2042      	movs	r0, #66	; 0x42
   23418:	2100      	movs	r1, #0
   2341a:	f7fd fa65 	bl	208e8 <z_impl_k_sleep>
   2341e:	e7f9      	b.n	23414 <wait+0x8>

00023420 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   23420:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   23422:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   23426:	0089      	lsls	r1, r1, #2
   23428:	3138      	adds	r1, #56	; 0x38
}
   2342a:	4408      	add	r0, r1
   2342c:	4770      	bx	lr

0002342e <get_sub_config>:
	const struct nrf_clock_control_config *config =
   2342e:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
   23430:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
   23434:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   23438:	4770      	bx	lr

0002343a <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   2343a:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
   2343c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
   23440:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   23444:	4770      	bx	lr

00023446 <get_status>:
{
   23446:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   23448:	b2c9      	uxtb	r1, r1
   2344a:	f7ff ffe9 	bl	23420 <get_sub_data>
   2344e:	6880      	ldr	r0, [r0, #8]
}
   23450:	f000 0007 	and.w	r0, r0, #7
   23454:	bd08      	pop	{r3, pc}

00023456 <set_off_state>:
	__asm__ volatile(
   23456:	f04f 0340 	mov.w	r3, #64	; 0x40
   2345a:	f3ef 8211 	mrs	r2, BASEPRI
   2345e:	f383 8811 	msr	BASEPRI, r3
   23462:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   23466:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   23468:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   2346c:	d001      	beq.n	23472 <set_off_state+0x1c>
   2346e:	428b      	cmp	r3, r1
   23470:	d107      	bne.n	23482 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   23472:	2301      	movs	r3, #1
   23474:	6003      	str	r3, [r0, #0]
	int err = 0;
   23476:	2000      	movs	r0, #0
	__asm__ volatile(
   23478:	f382 8811 	msr	BASEPRI, r2
   2347c:	f3bf 8f6f 	isb	sy
}
   23480:	4770      	bx	lr
		err = -EPERM;
   23482:	f04f 30ff 	mov.w	r0, #4294967295
   23486:	e7f7      	b.n	23478 <set_off_state+0x22>

00023488 <set_starting_state>:
{
   23488:	b410      	push	{r4}
	__asm__ volatile(
   2348a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2348e:	f3ef 8211 	mrs	r2, BASEPRI
   23492:	f383 8811 	msr	BASEPRI, r3
   23496:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2349a:	6803      	ldr	r3, [r0, #0]
   2349c:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   234a0:	f003 0307 	and.w	r3, r3, #7
   234a4:	2b01      	cmp	r3, #1
   234a6:	d009      	beq.n	234bc <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
   234a8:	428c      	cmp	r4, r1
   234aa:	d00a      	beq.n	234c2 <set_starting_state+0x3a>
		err = -EPERM;
   234ac:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   234b0:	f382 8811 	msr	BASEPRI, r2
   234b4:	f3bf 8f6f 	isb	sy
}
   234b8:	bc10      	pop	{r4}
   234ba:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   234bc:	6001      	str	r1, [r0, #0]
	int err = 0;
   234be:	2000      	movs	r0, #0
   234c0:	e7f6      	b.n	234b0 <set_starting_state+0x28>
		err = -EALREADY;
   234c2:	f06f 0077 	mvn.w	r0, #119	; 0x77
   234c6:	e7f3      	b.n	234b0 <set_starting_state+0x28>

000234c8 <set_on_state>:
	__asm__ volatile(
   234c8:	f04f 0340 	mov.w	r3, #64	; 0x40
   234cc:	f3ef 8211 	mrs	r2, BASEPRI
   234d0:	f383 8811 	msr	BASEPRI, r3
   234d4:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   234d8:	6803      	ldr	r3, [r0, #0]
   234da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   234de:	f043 0302 	orr.w	r3, r3, #2
   234e2:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   234e4:	f382 8811 	msr	BASEPRI, r2
   234e8:	f3bf 8f6f 	isb	sy
}
   234ec:	4770      	bx	lr

000234ee <clkstarted_handle>:
{
   234ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   234f0:	4606      	mov	r6, r0
   234f2:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   234f4:	f7ff ff94 	bl	23420 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   234f8:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   234fa:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   234fc:	2300      	movs	r3, #0
   234fe:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   23502:	f7ff ffe1 	bl	234c8 <set_on_state>
	if (callback) {
   23506:	b11d      	cbz	r5, 23510 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   23508:	463a      	mov	r2, r7
   2350a:	4621      	mov	r1, r4
   2350c:	4630      	mov	r0, r6
   2350e:	47a8      	blx	r5
}
   23510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00023512 <stop>:
{
   23512:	b570      	push	{r4, r5, r6, lr}
   23514:	4606      	mov	r6, r0
   23516:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   23518:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   2351a:	4621      	mov	r1, r4
   2351c:	f7ff ff80 	bl	23420 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   23520:	4629      	mov	r1, r5
   23522:	3008      	adds	r0, #8
   23524:	f7ff ff97 	bl	23456 <set_off_state>
	if (err < 0) {
   23528:	2800      	cmp	r0, #0
   2352a:	db06      	blt.n	2353a <stop+0x28>
	get_sub_config(dev, type)->stop();
   2352c:	4621      	mov	r1, r4
   2352e:	4630      	mov	r0, r6
   23530:	f7ff ff7d 	bl	2342e <get_sub_config>
   23534:	6843      	ldr	r3, [r0, #4]
   23536:	4798      	blx	r3
	return 0;
   23538:	2000      	movs	r0, #0
}
   2353a:	bd70      	pop	{r4, r5, r6, pc}

0002353c <api_stop>:
{
   2353c:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   2353e:	2280      	movs	r2, #128	; 0x80
   23540:	f7ff ffe7 	bl	23512 <stop>
}
   23544:	bd08      	pop	{r3, pc}

00023546 <async_start>:
{
   23546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2354a:	4606      	mov	r6, r0
   2354c:	4690      	mov	r8, r2
   2354e:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   23550:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   23552:	4629      	mov	r1, r5
   23554:	f7ff ff64 	bl	23420 <get_sub_data>
   23558:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   2355a:	9906      	ldr	r1, [sp, #24]
   2355c:	3008      	adds	r0, #8
   2355e:	f7ff ff93 	bl	23488 <set_starting_state>
	if (err < 0) {
   23562:	2800      	cmp	r0, #0
   23564:	db09      	blt.n	2357a <async_start+0x34>
	subdata->cb = cb;
   23566:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   2356a:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   2356c:	4629      	mov	r1, r5
   2356e:	4630      	mov	r0, r6
   23570:	f7ff ff5d 	bl	2342e <get_sub_config>
   23574:	6803      	ldr	r3, [r0, #0]
   23576:	4798      	blx	r3
	return 0;
   23578:	2000      	movs	r0, #0
}
   2357a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002357e <api_start>:
{
   2357e:	b510      	push	{r4, lr}
   23580:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   23582:	2480      	movs	r4, #128	; 0x80
   23584:	9400      	str	r4, [sp, #0]
   23586:	f7ff ffde 	bl	23546 <async_start>
}
   2358a:	b002      	add	sp, #8
   2358c:	bd10      	pop	{r4, pc}

0002358e <onoff_started_callback>:
{
   2358e:	b510      	push	{r4, lr}
   23590:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   23592:	b2c9      	uxtb	r1, r1
   23594:	f7ff ff51 	bl	2343a <get_onoff_manager>
	notify(mgr, 0);
   23598:	2100      	movs	r1, #0
   2359a:	47a0      	blx	r4
}
   2359c:	bd10      	pop	{r4, pc}

0002359e <hfclk_start>:
{
   2359e:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   235a0:	2001      	movs	r0, #1
   235a2:	f7fb fa79 	bl	1ea98 <nrfx_clock_start>
}
   235a6:	bd08      	pop	{r3, pc}

000235a8 <hfclk_stop>:
{
   235a8:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   235aa:	2001      	movs	r0, #1
   235ac:	f005 fbe6 	bl	28d7c <nrfx_clock_stop>
}
   235b0:	bd08      	pop	{r3, pc}

000235b2 <lfclk_stop>:
{
   235b2:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   235b4:	2000      	movs	r0, #0
   235b6:	f005 fbe1 	bl	28d7c <nrfx_clock_stop>
}
   235ba:	bd08      	pop	{r3, pc}

000235bc <blocking_start_callback>:
{
   235bc:	b508      	push	{r3, lr}
   235be:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   235c0:	f7fc fbba 	bl	1fd38 <z_impl_k_sem_give>
}
   235c4:	bd08      	pop	{r3, pc}

000235c6 <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   235c6:	4770      	bx	lr

000235c8 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   235c8:	4770      	bx	lr

000235ca <counter_sub>:
	return (a - b) & COUNTER_MAX;
   235ca:	1a40      	subs	r0, r0, r1
}
   235cc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   235d0:	4770      	bx	lr

000235d2 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   235d2:	f100 0350 	add.w	r3, r0, #80	; 0x50
   235d6:	009b      	lsls	r3, r3, #2
   235d8:	b29b      	uxth	r3, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   235da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   235de:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   235e2:	2200      	movs	r2, #0
   235e4:	601a      	str	r2, [r3, #0]
   235e6:	681b      	ldr	r3, [r3, #0]
}
   235e8:	4770      	bx	lr

000235ea <set_absolute_alarm>:
{
   235ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   235ec:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
   235ee:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
   235f2:	f7ef f93b 	bl	1286c <get_comparator>
   235f6:	4607      	mov	r7, r0
   235f8:	e019      	b.n	2362e <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
   235fa:	2013      	movs	r0, #19
   235fc:	f006 fa01 	bl	29a02 <z_impl_k_busy_wait>
}
   23600:	e022      	b.n	23648 <set_absolute_alarm+0x5e>
		event_clear(chan);
   23602:	4630      	mov	r0, r6
   23604:	f7ff ffe5 	bl	235d2 <event_clear>
		event_enable(chan);
   23608:	4630      	mov	r0, r6
   2360a:	f7ef f937 	bl	1287c <event_enable>
		set_comparator(chan, cc_val);
   2360e:	4629      	mov	r1, r5
   23610:	4630      	mov	r0, r6
   23612:	f7ef f921 	bl	12858 <set_comparator>
		now2 = counter();
   23616:	f7ef f945 	bl	128a4 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   2361a:	4284      	cmp	r4, r0
   2361c:	d01e      	beq.n	2365c <set_absolute_alarm+0x72>
   2361e:	1c81      	adds	r1, r0, #2
   23620:	4628      	mov	r0, r5
   23622:	f7ff ffd2 	bl	235ca <counter_sub>
	} while ((now2 != now) &&
   23626:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   2362a:	d917      	bls.n	2365c <set_absolute_alarm+0x72>
		prev_cc = cc_val;
   2362c:	462f      	mov	r7, r5
		now = counter();
   2362e:	f7ef f939 	bl	128a4 <counter>
   23632:	4604      	mov	r4, r0
		set_comparator(chan, now);
   23634:	4601      	mov	r1, r0
   23636:	4630      	mov	r0, r6
   23638:	f7ef f90e 	bl	12858 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   2363c:	4621      	mov	r1, r4
   2363e:	4638      	mov	r0, r7
   23640:	f7ff ffc3 	bl	235ca <counter_sub>
   23644:	2801      	cmp	r0, #1
   23646:	d0d8      	beq.n	235fa <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   23648:	1ca7      	adds	r7, r4, #2
   2364a:	4639      	mov	r1, r7
   2364c:	4628      	mov	r0, r5
   2364e:	f7ff ffbc 	bl	235ca <counter_sub>
   23652:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   23656:	d9d4      	bls.n	23602 <set_absolute_alarm+0x18>
			cc_val = now + 2;
   23658:	463d      	mov	r5, r7
   2365a:	e7d2      	b.n	23602 <set_absolute_alarm+0x18>
}
   2365c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002365e <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   2365e:	428b      	cmp	r3, r1
   23660:	d901      	bls.n	23666 <_copy+0x8>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
   23662:	2000      	movs	r0, #0
	}
}
   23664:	4770      	bx	lr
{
   23666:	b538      	push	{r3, r4, r5, lr}
   23668:	4615      	mov	r5, r2
   2366a:	461c      	mov	r4, r3
		(void)memcpy(to, from, from_len);
   2366c:	461a      	mov	r2, r3
   2366e:	4629      	mov	r1, r5
   23670:	f001 f9fc 	bl	24a6c <memcpy>
		return from_len;
   23674:	4620      	mov	r0, r4
}
   23676:	bd38      	pop	{r3, r4, r5, pc}

00023678 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
   23678:	b508      	push	{r3, lr}
	(void)memset(to, val, len);
   2367a:	f001 fa1b 	bl	24ab4 <memset>
}
   2367e:	bd08      	pop	{r3, pc}

00023680 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   23680:	09c3      	lsrs	r3, r0, #7
   23682:	005a      	lsls	r2, r3, #1
   23684:	4413      	add	r3, r2
   23686:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   2368a:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   2368e:	b2c0      	uxtb	r0, r0
   23690:	4770      	bx	lr

00023692 <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   23692:	b5f0      	push	{r4, r5, r6, r7, lr}
   23694:	b0a9      	sub	sp, #164	; 0xa4
   23696:	4606      	mov	r6, r0
   23698:	460f      	mov	r7, r1
   2369a:	4614      	mov	r4, r2
	uECC_word_t _random[NUM_ECC_WORDS * 2];
	uECC_word_t _private[NUM_ECC_WORDS];
	uECC_word_t _public[NUM_ECC_WORDS * 2];
	uECC_word_t tries;

	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   2369c:	2500      	movs	r5, #0
   2369e:	e00f      	b.n	236c0 <uECC_make_key+0x2e>
		/* Generating _private uniformly at random: */
		uECC_RNG_Function rng_function = uECC_get_rng();
		if (!rng_function ||
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
   236a0:	2000      	movs	r0, #0

      			return 1;
    		}
  	}
	return 0;
}
   236a2:	b029      	add	sp, #164	; 0xa4
   236a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   236a6:	f343 1347 	sbfx	r3, r3, #5, #8
   236aa:	a918      	add	r1, sp, #96	; 0x60
   236ac:	a810      	add	r0, sp, #64	; 0x40
   236ae:	f000 fa44 	bl	23b3a <uECC_vli_mmod>
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   236b2:	4622      	mov	r2, r4
   236b4:	a910      	add	r1, sp, #64	; 0x40
   236b6:	4668      	mov	r0, sp
   236b8:	f000 fe9f 	bl	243fa <EccPoint_compute_public_key>
   236bc:	b9a0      	cbnz	r0, 236e8 <uECC_make_key+0x56>
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   236be:	3501      	adds	r5, #1
   236c0:	2d3f      	cmp	r5, #63	; 0x3f
   236c2:	d835      	bhi.n	23730 <uECC_make_key+0x9e>
		uECC_RNG_Function rng_function = uECC_get_rng();
   236c4:	f7ef f9c6 	bl	12a54 <uECC_get_rng>
		if (!rng_function ||
   236c8:	4603      	mov	r3, r0
   236ca:	2800      	cmp	r0, #0
   236cc:	d0e8      	beq.n	236a0 <uECC_make_key+0xe>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   236ce:	2140      	movs	r1, #64	; 0x40
   236d0:	a818      	add	r0, sp, #96	; 0x60
   236d2:	4798      	blx	r3
		if (!rng_function ||
   236d4:	2800      	cmp	r0, #0
   236d6:	d0e3      	beq.n	236a0 <uECC_make_key+0xe>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   236d8:	f104 0224 	add.w	r2, r4, #36	; 0x24
   236dc:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   236e0:	331f      	adds	r3, #31
   236e2:	d5e0      	bpl.n	236a6 <uECC_make_key+0x14>
   236e4:	331f      	adds	r3, #31
   236e6:	e7de      	b.n	236a6 <uECC_make_key+0x14>
					       BITS_TO_BYTES(curve->num_n_bits),
   236e8:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   236ec:	3307      	adds	r3, #7
			uECC_vli_nativeToBytes(private_key,
   236ee:	4619      	mov	r1, r3
   236f0:	2b00      	cmp	r3, #0
   236f2:	db1b      	blt.n	2372c <uECC_make_key+0x9a>
   236f4:	aa10      	add	r2, sp, #64	; 0x40
   236f6:	10c9      	asrs	r1, r1, #3
   236f8:	4638      	mov	r0, r7
   236fa:	f000 fea8 	bl	2444e <uECC_vli_nativeToBytes>
			uECC_vli_nativeToBytes(public_key,
   236fe:	466a      	mov	r2, sp
   23700:	f994 1001 	ldrsb.w	r1, [r4, #1]
   23704:	4630      	mov	r0, r6
   23706:	f000 fea2 	bl	2444e <uECC_vli_nativeToBytes>
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   2370a:	f994 1001 	ldrsb.w	r1, [r4, #1]
					       _public + curve->num_words);
   2370e:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   23712:	eb0d 0282 	add.w	r2, sp, r2, lsl #2
   23716:	1870      	adds	r0, r6, r1
   23718:	f000 fe99 	bl	2444e <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   2371c:	ac10      	add	r4, sp, #64	; 0x40
   2371e:	2220      	movs	r2, #32
   23720:	2100      	movs	r1, #0
   23722:	4620      	mov	r0, r4
   23724:	f001 f9c6 	bl	24ab4 <memset>
      			return 1;
   23728:	2001      	movs	r0, #1
   2372a:	e7ba      	b.n	236a2 <uECC_make_key+0x10>
			uECC_vli_nativeToBytes(private_key,
   2372c:	1dd9      	adds	r1, r3, #7
   2372e:	e7e1      	b.n	236f4 <uECC_make_key+0x62>
	return 0;
   23730:	2000      	movs	r0, #0
   23732:	e7b6      	b.n	236a2 <uECC_make_key+0x10>

00023734 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   23734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23738:	b0a5      	sub	sp, #148	; 0x94
   2373a:	4606      	mov	r6, r0
   2373c:	4690      	mov	r8, r2
   2373e:	461c      	mov	r4, r3

	uECC_word_t _public[NUM_ECC_WORDS * 2];
	uECC_word_t _private[NUM_ECC_WORDS];

	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
   23740:	ab0c      	add	r3, sp, #48	; 0x30
   23742:	9302      	str	r3, [sp, #8]
   23744:	ab04      	add	r3, sp, #16
   23746:	9303      	str	r3, [sp, #12]
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
   23748:	f994 9000 	ldrsb.w	r9, [r4]
	wordcount_t num_bytes = curve->num_bytes;
   2374c:	f994 7001 	ldrsb.w	r7, [r4, #1]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   23750:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
	uECC_vli_bytesToNative(_private,
   23754:	3207      	adds	r2, #7
   23756:	d44a      	bmi.n	237ee <uECC_shared_secret+0xba>
   23758:	ad0c      	add	r5, sp, #48	; 0x30
   2375a:	10d2      	asrs	r2, r2, #3
   2375c:	4628      	mov	r0, r5
   2375e:	f000 fe8a 	bl	24476 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   23762:	463a      	mov	r2, r7
   23764:	4631      	mov	r1, r6
   23766:	a814      	add	r0, sp, #80	; 0x50
   23768:	f000 fe85 	bl	24476 <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   2376c:	463a      	mov	r2, r7
   2376e:	19f1      	adds	r1, r6, r7
   23770:	ab14      	add	r3, sp, #80	; 0x50
   23772:	eb03 0089 	add.w	r0, r3, r9, lsl #2
   23776:	f000 fe7e 	bl	24476 <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   2377a:	ae04      	add	r6, sp, #16
   2377c:	4623      	mov	r3, r4
   2377e:	4632      	mov	r2, r6
   23780:	4629      	mov	r1, r5
   23782:	4628      	mov	r0, r5
   23784:	f000 fe07 	bl	24396 <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   23788:	fab0 f080 	clz	r0, r0
   2378c:	0940      	lsrs	r0, r0, #5
   2378e:	ab24      	add	r3, sp, #144	; 0x90
   23790:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   23794:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   23798:	9401      	str	r4, [sp, #4]
   2379a:	3301      	adds	r3, #1
   2379c:	b21b      	sxth	r3, r3
   2379e:	9300      	str	r3, [sp, #0]
   237a0:	2300      	movs	r3, #0
   237a2:	f850 2c88 	ldr.w	r2, [r0, #-136]
   237a6:	a914      	add	r1, sp, #80	; 0x50
   237a8:	4608      	mov	r0, r1
   237aa:	f000 fd3e 	bl	2422a <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   237ae:	aa14      	add	r2, sp, #80	; 0x50
   237b0:	4639      	mov	r1, r7
   237b2:	4640      	mov	r0, r8
   237b4:	f000 fe4b 	bl	2444e <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   237b8:	4621      	mov	r1, r4
   237ba:	a814      	add	r0, sp, #80	; 0x50
   237bc:	f000 fc70 	bl	240a0 <EccPoint_isZero>
   237c0:	fab0 f480 	clz	r4, r0
   237c4:	0964      	lsrs	r4, r4, #5
   237c6:	af02      	add	r7, sp, #8
   237c8:	2208      	movs	r2, #8
   237ca:	2100      	movs	r1, #0
   237cc:	4638      	mov	r0, r7
   237ce:	f001 f971 	bl	24ab4 <memset>
   237d2:	2220      	movs	r2, #32
   237d4:	2100      	movs	r1, #0
   237d6:	4630      	mov	r0, r6
   237d8:	f001 f96c 	bl	24ab4 <memset>
   237dc:	2220      	movs	r2, #32
   237de:	2100      	movs	r1, #0
   237e0:	4628      	mov	r0, r5
   237e2:	f001 f967 	bl	24ab4 <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   237e6:	4620      	mov	r0, r4
   237e8:	b025      	add	sp, #148	; 0x94
   237ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uECC_vli_bytesToNative(_private,
   237ee:	3207      	adds	r2, #7
   237f0:	e7b2      	b.n	23758 <uECC_shared_secret+0x24>

000237f2 <vli_numDigits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   237f2:	3901      	subs	r1, #1
   237f4:	b249      	sxtb	r1, r1
   237f6:	2900      	cmp	r1, #0
   237f8:	db05      	blt.n	23806 <vli_numDigits+0x14>
   237fa:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   237fe:	b913      	cbnz	r3, 23806 <vli_numDigits+0x14>
   23800:	3901      	subs	r1, #1
   23802:	b249      	sxtb	r1, r1
   23804:	e7f7      	b.n	237f6 <vli_numDigits+0x4>
	return (i + 1);
   23806:	1c48      	adds	r0, r1, #1
}
   23808:	b240      	sxtb	r0, r0
   2380a:	4770      	bx	lr

0002380c <uECC_vli_rshift1>:
{
   2380c:	b410      	push	{r4}
	vli += num_words;
   2380e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   23812:	2300      	movs	r3, #0
	while (vli-- > end) {
   23814:	1f0c      	subs	r4, r1, #4
   23816:	4281      	cmp	r1, r0
   23818:	d908      	bls.n	2382c <uECC_vli_rshift1+0x20>
		uECC_word_t temp = *vli;
   2381a:	f851 2c04 	ldr.w	r2, [r1, #-4]
		*vli = (temp >> 1) | carry;
   2381e:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   23822:	f841 3c04 	str.w	r3, [r1, #-4]
		carry = temp << (uECC_WORD_BITS - 1);
   23826:	07d3      	lsls	r3, r2, #31
	while (vli-- > end) {
   23828:	4621      	mov	r1, r4
   2382a:	e7f3      	b.n	23814 <uECC_vli_rshift1+0x8>
}
   2382c:	bc10      	pop	{r4}
   2382e:	4770      	bx	lr

00023830 <muladd>:
{
   23830:	b4f0      	push	{r4, r5, r6, r7}
   23832:	9f04      	ldr	r7, [sp, #16]
	uECC_dword_t p = (uECC_dword_t)a * b;
   23834:	fba0 0101 	umull	r0, r1, r0, r1
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   23838:	6816      	ldr	r6, [r2, #0]
   2383a:	f8d3 c000 	ldr.w	ip, [r3]
	r01 += p;
   2383e:	1984      	adds	r4, r0, r6
   23840:	eb41 050c 	adc.w	r5, r1, ip
	*r2 += (r01 < p);
   23844:	428d      	cmp	r5, r1
   23846:	bf08      	it	eq
   23848:	4284      	cmpeq	r4, r0
   2384a:	bf34      	ite	cc
   2384c:	2001      	movcc	r0, #1
   2384e:	2000      	movcs	r0, #0
   23850:	6839      	ldr	r1, [r7, #0]
   23852:	4401      	add	r1, r0
   23854:	6039      	str	r1, [r7, #0]
	*r1 = r01 >> uECC_WORD_BITS;
   23856:	601d      	str	r5, [r3, #0]
	*r0 = (uECC_word_t)r01;
   23858:	6014      	str	r4, [r2, #0]
}
   2385a:	bcf0      	pop	{r4, r5, r6, r7}
   2385c:	4770      	bx	lr

0002385e <uECC_vli_mult>:
{
   2385e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23862:	b086      	sub	sp, #24
   23864:	4681      	mov	r9, r0
   23866:	460e      	mov	r6, r1
   23868:	4617      	mov	r7, r2
   2386a:	4698      	mov	r8, r3
	uECC_word_t r0 = 0;
   2386c:	2500      	movs	r5, #0
   2386e:	9505      	str	r5, [sp, #20]
	uECC_word_t r1 = 0;
   23870:	9504      	str	r5, [sp, #16]
	uECC_word_t r2 = 0;
   23872:	9503      	str	r5, [sp, #12]
	for (k = 0; k < num_words; ++k) {
   23874:	e00a      	b.n	2388c <uECC_vli_mult+0x2e>
		result[k] = r0;
   23876:	9b05      	ldr	r3, [sp, #20]
   23878:	f849 3025 	str.w	r3, [r9, r5, lsl #2]
		r0 = r1;
   2387c:	9b04      	ldr	r3, [sp, #16]
   2387e:	9305      	str	r3, [sp, #20]
		r1 = r2;
   23880:	9b03      	ldr	r3, [sp, #12]
   23882:	9304      	str	r3, [sp, #16]
		r2 = 0;
   23884:	2300      	movs	r3, #0
   23886:	9303      	str	r3, [sp, #12]
	for (k = 0; k < num_words; ++k) {
   23888:	3501      	adds	r5, #1
   2388a:	b26d      	sxtb	r5, r5
   2388c:	4545      	cmp	r5, r8
   2388e:	da10      	bge.n	238b2 <uECC_vli_mult+0x54>
		for (i = 0; i <= k; ++i) {
   23890:	2400      	movs	r4, #0
   23892:	42ac      	cmp	r4, r5
   23894:	dcef      	bgt.n	23876 <uECC_vli_mult+0x18>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   23896:	1b29      	subs	r1, r5, r4
   23898:	ab03      	add	r3, sp, #12
   2389a:	9300      	str	r3, [sp, #0]
   2389c:	ab04      	add	r3, sp, #16
   2389e:	aa05      	add	r2, sp, #20
   238a0:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
   238a4:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   238a8:	f7ff ffc2 	bl	23830 <muladd>
		for (i = 0; i <= k; ++i) {
   238ac:	3401      	adds	r4, #1
   238ae:	b264      	sxtb	r4, r4
   238b0:	e7ef      	b.n	23892 <uECC_vli_mult+0x34>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   238b2:	46c2      	mov	sl, r8
   238b4:	e01b      	b.n	238ee <uECC_vli_mult+0x90>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   238b6:	1b29      	subs	r1, r5, r4
   238b8:	ab03      	add	r3, sp, #12
   238ba:	9300      	str	r3, [sp, #0]
   238bc:	ab04      	add	r3, sp, #16
   238be:	aa05      	add	r2, sp, #20
   238c0:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
   238c4:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   238c8:	f7ff ffb2 	bl	23830 <muladd>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   238cc:	3401      	adds	r4, #1
   238ce:	b264      	sxtb	r4, r4
   238d0:	4544      	cmp	r4, r8
   238d2:	dbf0      	blt.n	238b6 <uECC_vli_mult+0x58>
		result[k] = r0;
   238d4:	9b05      	ldr	r3, [sp, #20]
   238d6:	f849 302a 	str.w	r3, [r9, sl, lsl #2]
		r0 = r1;
   238da:	9b04      	ldr	r3, [sp, #16]
   238dc:	9305      	str	r3, [sp, #20]
		r1 = r2;
   238de:	9b03      	ldr	r3, [sp, #12]
   238e0:	9304      	str	r3, [sp, #16]
		r2 = 0;
   238e2:	2300      	movs	r3, #0
   238e4:	9303      	str	r3, [sp, #12]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   238e6:	f10a 0a01 	add.w	sl, sl, #1
   238ea:	fa4f fa8a 	sxtb.w	sl, sl
   238ee:	4655      	mov	r5, sl
   238f0:	4642      	mov	r2, r8
   238f2:	ea4f 0348 	mov.w	r3, r8, lsl #1
   238f6:	3b01      	subs	r3, #1
   238f8:	459a      	cmp	sl, r3
   238fa:	da05      	bge.n	23908 <uECC_vli_mult+0xaa>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   238fc:	ebaa 0408 	sub.w	r4, sl, r8
   23900:	b264      	sxtb	r4, r4
   23902:	3401      	adds	r4, #1
   23904:	b264      	sxtb	r4, r4
   23906:	e7e3      	b.n	238d0 <uECC_vli_mult+0x72>
	result[num_words * 2 - 1] = r0;
   23908:	00d3      	lsls	r3, r2, #3
   2390a:	3b04      	subs	r3, #4
   2390c:	9a05      	ldr	r2, [sp, #20]
   2390e:	f849 2003 	str.w	r2, [r9, r3]
}
   23912:	b006      	add	sp, #24
   23914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00023918 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   23918:	2300      	movs	r3, #0
   2391a:	428b      	cmp	r3, r1
   2391c:	da05      	bge.n	2392a <uECC_vli_clear+0x12>
		 vli[i] = 0;
   2391e:	2200      	movs	r2, #0
   23920:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   23924:	3301      	adds	r3, #1
   23926:	b25b      	sxtb	r3, r3
   23928:	e7f7      	b.n	2391a <uECC_vli_clear+0x2>
}
   2392a:	4770      	bx	lr

0002392c <uECC_vli_isZero>:
	for (i = 0; i < num_words; ++i) {
   2392c:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   2392e:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   23930:	428b      	cmp	r3, r1
   23932:	da0c      	bge.n	2394e <uECC_vli_isZero+0x22>
{
   23934:	b410      	push	{r4}
		bits |= vli[i];
   23936:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   2393a:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   2393c:	3301      	adds	r3, #1
   2393e:	b25b      	sxtb	r3, r3
   23940:	428b      	cmp	r3, r1
   23942:	dbf8      	blt.n	23936 <uECC_vli_isZero+0xa>
}
   23944:	fab2 f082 	clz	r0, r2
   23948:	0940      	lsrs	r0, r0, #5
   2394a:	bc10      	pop	{r4}
   2394c:	4770      	bx	lr
   2394e:	fab3 f083 	clz	r0, r3
   23952:	0940      	lsrs	r0, r0, #5
   23954:	4770      	bx	lr

00023956 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   23956:	114b      	asrs	r3, r1, #5
   23958:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   2395c:	f001 011f 	and.w	r1, r1, #31
   23960:	2301      	movs	r3, #1
   23962:	fa03 f101 	lsl.w	r1, r3, r1
}
   23966:	4008      	ands	r0, r1
   23968:	4770      	bx	lr

0002396a <uECC_vli_numBits>:
{
   2396a:	b510      	push	{r4, lr}
   2396c:	4604      	mov	r4, r0
	wordcount_t num_digits = vli_numDigits(vli, max_words);
   2396e:	f7ff ff40 	bl	237f2 <vli_numDigits>
	if (num_digits == 0) {
   23972:	b188      	cbz	r0, 23998 <uECC_vli_numBits+0x2e>
   23974:	4602      	mov	r2, r0
	digit = vli[num_digits - 1];
   23976:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   2397a:	3b01      	subs	r3, #1
   2397c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
	for (i = 0; digit; ++i) {
   23980:	2000      	movs	r0, #0
   23982:	b113      	cbz	r3, 2398a <uECC_vli_numBits+0x20>
		digit >>= 1;
   23984:	085b      	lsrs	r3, r3, #1
	for (i = 0; digit; ++i) {
   23986:	3001      	adds	r0, #1
   23988:	e7fb      	b.n	23982 <uECC_vli_numBits+0x18>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   2398a:	1e53      	subs	r3, r2, #1
   2398c:	b29b      	uxth	r3, r3
   2398e:	015b      	lsls	r3, r3, #5
   23990:	b29b      	uxth	r3, r3
   23992:	4418      	add	r0, r3
   23994:	b200      	sxth	r0, r0
}
   23996:	bd10      	pop	{r4, pc}
		return 0;
   23998:	2000      	movs	r0, #0
   2399a:	e7fc      	b.n	23996 <uECC_vli_numBits+0x2c>

0002399c <uECC_vli_set>:
	for (i = 0; i < num_words; ++i) {
   2399c:	2300      	movs	r3, #0
   2399e:	4293      	cmp	r3, r2
   239a0:	da0a      	bge.n	239b8 <uECC_vli_set+0x1c>
{
   239a2:	b410      	push	{r4}
		dest[i] = src[i];
   239a4:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   239a8:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   239ac:	3301      	adds	r3, #1
   239ae:	b25b      	sxtb	r3, r3
   239b0:	4293      	cmp	r3, r2
   239b2:	dbf7      	blt.n	239a4 <uECC_vli_set+0x8>
}
   239b4:	bc10      	pop	{r4}
   239b6:	4770      	bx	lr
   239b8:	4770      	bx	lr

000239ba <uECC_vli_cmp_unsafe>:
	for (i = num_words - 1; i >= 0; --i) {
   239ba:	3a01      	subs	r2, #1
   239bc:	b252      	sxtb	r2, r2
   239be:	2a00      	cmp	r2, #0
   239c0:	db13      	blt.n	239ea <uECC_vli_cmp_unsafe+0x30>
{
   239c2:	b410      	push	{r4}
		if (left[i] > right[i]) {
   239c4:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   239c8:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
   239cc:	429c      	cmp	r4, r3
   239ce:	d807      	bhi.n	239e0 <uECC_vli_cmp_unsafe+0x26>
		} else if (left[i] < right[i]) {
   239d0:	d308      	bcc.n	239e4 <uECC_vli_cmp_unsafe+0x2a>
	for (i = num_words - 1; i >= 0; --i) {
   239d2:	3a01      	subs	r2, #1
   239d4:	b252      	sxtb	r2, r2
   239d6:	2a00      	cmp	r2, #0
   239d8:	daf4      	bge.n	239c4 <uECC_vli_cmp_unsafe+0xa>
	return 0;
   239da:	2000      	movs	r0, #0
}
   239dc:	bc10      	pop	{r4}
   239de:	4770      	bx	lr
			return 1;
   239e0:	2001      	movs	r0, #1
   239e2:	e7fb      	b.n	239dc <uECC_vli_cmp_unsafe+0x22>
			return -1;
   239e4:	f04f 30ff 	mov.w	r0, #4294967295
   239e8:	e7f8      	b.n	239dc <uECC_vli_cmp_unsafe+0x22>
	return 0;
   239ea:	2000      	movs	r0, #0
}
   239ec:	4770      	bx	lr

000239ee <uECC_vli_equal>:
{
   239ee:	b430      	push	{r4, r5}
	for (i = num_words - 1; i >= 0; --i) {
   239f0:	3a01      	subs	r2, #1
   239f2:	b252      	sxtb	r2, r2
	uECC_word_t diff = 0;
   239f4:	2400      	movs	r4, #0
	for (i = num_words - 1; i >= 0; --i) {
   239f6:	2a00      	cmp	r2, #0
   239f8:	db08      	blt.n	23a0c <uECC_vli_equal+0x1e>
		diff |= (left[i] ^ right[i]);
   239fa:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
   239fe:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   23a02:	406b      	eors	r3, r5
   23a04:	431c      	orrs	r4, r3
	for (i = num_words - 1; i >= 0; --i) {
   23a06:	3a01      	subs	r2, #1
   23a08:	b252      	sxtb	r2, r2
   23a0a:	e7f4      	b.n	239f6 <uECC_vli_equal+0x8>
}
   23a0c:	1e20      	subs	r0, r4, #0
   23a0e:	bf18      	it	ne
   23a10:	2001      	movne	r0, #1
   23a12:	bc30      	pop	{r4, r5}
   23a14:	4770      	bx	lr

00023a16 <cond_set>:
	return (p_true*(cond)) | (p_false*(!cond));
   23a16:	fb02 f000 	mul.w	r0, r2, r0
   23a1a:	2a00      	cmp	r2, #0
   23a1c:	bf0c      	ite	eq
   23a1e:	460a      	moveq	r2, r1
   23a20:	2200      	movne	r2, #0
}
   23a22:	4310      	orrs	r0, r2
   23a24:	4770      	bx	lr

00023a26 <uECC_vli_add>:
{
   23a26:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23a2a:	4681      	mov	r9, r0
   23a2c:	4688      	mov	r8, r1
   23a2e:	4617      	mov	r7, r2
   23a30:	461e      	mov	r6, r3
	for (i = 0; i < num_words; ++i) {
   23a32:	2400      	movs	r4, #0
	uECC_word_t carry = 0;
   23a34:	4621      	mov	r1, r4
	for (i = 0; i < num_words; ++i) {
   23a36:	42b4      	cmp	r4, r6
   23a38:	da14      	bge.n	23a64 <uECC_vli_add+0x3e>
		uECC_word_t sum = left[i] + right[i] + carry;
   23a3a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   23a3e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
   23a42:	441d      	add	r5, r3
   23a44:	440d      	add	r5, r1
		uECC_word_t val = (sum < left[i]);
   23a46:	42ab      	cmp	r3, r5
		carry = cond_set(val, carry, (sum != left[i]));
   23a48:	bf14      	ite	ne
   23a4a:	2201      	movne	r2, #1
   23a4c:	2200      	moveq	r2, #0
   23a4e:	bf8c      	ite	hi
   23a50:	2001      	movhi	r0, #1
   23a52:	2000      	movls	r0, #0
   23a54:	f7ff ffdf 	bl	23a16 <cond_set>
   23a58:	4601      	mov	r1, r0
		result[i] = sum;
   23a5a:	f849 5024 	str.w	r5, [r9, r4, lsl #2]
	for (i = 0; i < num_words; ++i) {
   23a5e:	3401      	adds	r4, #1
   23a60:	b264      	sxtb	r4, r4
   23a62:	e7e8      	b.n	23a36 <uECC_vli_add+0x10>
}
   23a64:	4608      	mov	r0, r1
   23a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00023a6a <vli_modInv_update>:
{
   23a6a:	b570      	push	{r4, r5, r6, lr}
   23a6c:	4605      	mov	r5, r0
   23a6e:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   23a70:	6800      	ldr	r0, [r0, #0]
   23a72:	f010 0601 	ands.w	r6, r0, #1
   23a76:	d10e      	bne.n	23a96 <vli_modInv_update+0x2c>
	uECC_vli_rshift1(uv, num_words);
   23a78:	4621      	mov	r1, r4
   23a7a:	4628      	mov	r0, r5
   23a7c:	f7ff fec6 	bl	2380c <uECC_vli_rshift1>
	if (carry) {
   23a80:	b146      	cbz	r6, 23a94 <vli_modInv_update+0x2a>
		uv[num_words - 1] |= HIGH_BIT_SET;
   23a82:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   23a86:	3c01      	subs	r4, #1
   23a88:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   23a8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   23a90:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
}
   23a94:	bd70      	pop	{r4, r5, r6, pc}
		carry = uECC_vli_add(uv, uv, mod, num_words);
   23a96:	4613      	mov	r3, r2
   23a98:	460a      	mov	r2, r1
   23a9a:	4629      	mov	r1, r5
   23a9c:	4628      	mov	r0, r5
   23a9e:	f7ff ffc2 	bl	23a26 <uECC_vli_add>
   23aa2:	4606      	mov	r6, r0
   23aa4:	e7e8      	b.n	23a78 <vli_modInv_update+0xe>

00023aa6 <uECC_vli_sub>:
{
   23aa6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23aaa:	4681      	mov	r9, r0
   23aac:	4688      	mov	r8, r1
   23aae:	4617      	mov	r7, r2
   23ab0:	461e      	mov	r6, r3
	for (i = 0; i < num_words; ++i) {
   23ab2:	2400      	movs	r4, #0
	uECC_word_t borrow = 0;
   23ab4:	4621      	mov	r1, r4
	for (i = 0; i < num_words; ++i) {
   23ab6:	42b4      	cmp	r4, r6
   23ab8:	da14      	bge.n	23ae4 <uECC_vli_sub+0x3e>
		uECC_word_t diff = left[i] - right[i] - borrow;
   23aba:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   23abe:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
   23ac2:	1b5d      	subs	r5, r3, r5
   23ac4:	1a6d      	subs	r5, r5, r1
		uECC_word_t val = (diff > left[i]);
   23ac6:	42ab      	cmp	r3, r5
		borrow = cond_set(val, borrow, (diff != left[i]));
   23ac8:	bf14      	ite	ne
   23aca:	2201      	movne	r2, #1
   23acc:	2200      	moveq	r2, #0
   23ace:	bf34      	ite	cc
   23ad0:	2001      	movcc	r0, #1
   23ad2:	2000      	movcs	r0, #0
   23ad4:	f7ff ff9f 	bl	23a16 <cond_set>
   23ad8:	4601      	mov	r1, r0
		result[i] = diff;
   23ada:	f849 5024 	str.w	r5, [r9, r4, lsl #2]
	for (i = 0; i < num_words; ++i) {
   23ade:	3401      	adds	r4, #1
   23ae0:	b264      	sxtb	r4, r4
   23ae2:	e7e8      	b.n	23ab6 <uECC_vli_sub+0x10>
}
   23ae4:	4608      	mov	r0, r1
   23ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00023aea <uECC_vli_modAdd>:
{
   23aea:	b570      	push	{r4, r5, r6, lr}
   23aec:	4604      	mov	r4, r0
   23aee:	461d      	mov	r5, r3
   23af0:	f99d 6010 	ldrsb.w	r6, [sp, #16]
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   23af4:	4633      	mov	r3, r6
   23af6:	f7ff ff96 	bl	23a26 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   23afa:	b930      	cbnz	r0, 23b0a <uECC_vli_modAdd+0x20>
   23afc:	4632      	mov	r2, r6
   23afe:	4621      	mov	r1, r4
   23b00:	4628      	mov	r0, r5
   23b02:	f7ff ff5a 	bl	239ba <uECC_vli_cmp_unsafe>
   23b06:	2801      	cmp	r0, #1
   23b08:	d005      	beq.n	23b16 <uECC_vli_modAdd+0x2c>
		uECC_vli_sub(result, result, mod, num_words);
   23b0a:	4633      	mov	r3, r6
   23b0c:	462a      	mov	r2, r5
   23b0e:	4621      	mov	r1, r4
   23b10:	4620      	mov	r0, r4
   23b12:	f7ff ffc8 	bl	23aa6 <uECC_vli_sub>
}
   23b16:	bd70      	pop	{r4, r5, r6, pc}

00023b18 <uECC_vli_modSub>:
{
   23b18:	b570      	push	{r4, r5, r6, lr}
   23b1a:	4604      	mov	r4, r0
   23b1c:	461d      	mov	r5, r3
   23b1e:	f99d 6010 	ldrsb.w	r6, [sp, #16]
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   23b22:	4633      	mov	r3, r6
   23b24:	f7ff ffbf 	bl	23aa6 <uECC_vli_sub>
	if (l_borrow) {
   23b28:	b900      	cbnz	r0, 23b2c <uECC_vli_modSub+0x14>
}
   23b2a:	bd70      	pop	{r4, r5, r6, pc}
		uECC_vli_add(result, result, mod, num_words);
   23b2c:	4633      	mov	r3, r6
   23b2e:	462a      	mov	r2, r5
   23b30:	4621      	mov	r1, r4
   23b32:	4620      	mov	r0, r4
   23b34:	f7ff ff77 	bl	23a26 <uECC_vli_add>
}
   23b38:	e7f7      	b.n	23b2a <uECC_vli_modSub+0x12>

00023b3a <uECC_vli_mmod>:
{
   23b3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23b3e:	b0a2      	sub	sp, #136	; 0x88
   23b40:	4682      	mov	sl, r0
   23b42:	4691      	mov	r9, r2
   23b44:	461c      	mov	r4, r3
	uECC_word_t *v[2] = {tmp, product};
   23b46:	ab02      	add	r3, sp, #8
   23b48:	9300      	str	r3, [sp, #0]
   23b4a:	9101      	str	r1, [sp, #4]
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   23b4c:	01a5      	lsls	r5, r4, #6
			   uECC_vli_numBits(mod, num_words);
   23b4e:	4621      	mov	r1, r4
   23b50:	4610      	mov	r0, r2
   23b52:	f7ff ff0a 	bl	2396a <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   23b56:	1a2d      	subs	r5, r5, r0
   23b58:	b22e      	sxth	r6, r5
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   23b5a:	46b0      	mov	r8, r6
   23b5c:	2e00      	cmp	r6, #0
   23b5e:	db11      	blt.n	23b84 <uECC_vli_mmod+0x4a>
   23b60:	f348 1847 	sbfx	r8, r8, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   23b64:	4273      	negs	r3, r6
   23b66:	f006 051f 	and.w	r5, r6, #31
   23b6a:	f003 031f 	and.w	r3, r3, #31
   23b6e:	bf58      	it	pl
   23b70:	425d      	negpl	r5, r3
	uECC_vli_clear(mod_multiple, word_shift);
   23b72:	4641      	mov	r1, r8
   23b74:	a812      	add	r0, sp, #72	; 0x48
   23b76:	f7ff fecf 	bl	23918 <uECC_vli_clear>
	if (bit_shift > 0) {
   23b7a:	2d00      	cmp	r5, #0
   23b7c:	dd1a      	ble.n	23bb4 <uECC_vli_mmod+0x7a>
	uECC_word_t carry = 0;
   23b7e:	2100      	movs	r1, #0
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   23b80:	460b      	mov	r3, r1
   23b82:	e013      	b.n	23bac <uECC_vli_mmod+0x72>
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   23b84:	f106 081f 	add.w	r8, r6, #31
   23b88:	e7ea      	b.n	23b60 <uECC_vli_mmod+0x26>
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   23b8a:	f859 7023 	ldr.w	r7, [r9, r3, lsl #2]
   23b8e:	fa07 f005 	lsl.w	r0, r7, r5
   23b92:	eb08 0203 	add.w	r2, r8, r3
   23b96:	4301      	orrs	r1, r0
   23b98:	a822      	add	r0, sp, #136	; 0x88
   23b9a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   23b9e:	f842 1c40 	str.w	r1, [r2, #-64]
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   23ba2:	f1c5 0120 	rsb	r1, r5, #32
   23ba6:	fa27 f101 	lsr.w	r1, r7, r1
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   23baa:	3301      	adds	r3, #1
   23bac:	429c      	cmp	r4, r3
   23bae:	d8ec      	bhi.n	23b8a <uECC_vli_mmod+0x50>
		uECC_word_t borrow = 0;
   23bb0:	2501      	movs	r5, #1
   23bb2:	e04b      	b.n	23c4c <uECC_vli_mmod+0x112>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   23bb4:	4622      	mov	r2, r4
   23bb6:	4649      	mov	r1, r9
   23bb8:	ab12      	add	r3, sp, #72	; 0x48
   23bba:	eb03 0088 	add.w	r0, r3, r8, lsl #2
   23bbe:	f7ff feed 	bl	2399c <uECC_vli_set>
   23bc2:	e7f5      	b.n	23bb0 <uECC_vli_mmod+0x76>
				borrow = (diff > v[index][i]);
   23bc4:	428b      	cmp	r3, r1
   23bc6:	bf2c      	ite	cs
   23bc8:	f04f 0c00 	movcs.w	ip, #0
   23bcc:	f04f 0c01 	movcc.w	ip, #1
			v[1 - index][i] = diff;
   23bd0:	f1c5 0301 	rsb	r3, r5, #1
   23bd4:	af22      	add	r7, sp, #136	; 0x88
   23bd6:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   23bda:	f853 3c88 	ldr.w	r3, [r3, #-136]
   23bde:	5019      	str	r1, [r3, r0]
		for (i = 0; i < num_words * 2; ++i) {
   23be0:	3201      	adds	r2, #1
   23be2:	b252      	sxtb	r2, r2
   23be4:	ebb2 0f44 	cmp.w	r2, r4, lsl #1
   23be8:	da12      	bge.n	23c10 <uECC_vli_mmod+0xd6>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   23bea:	ab22      	add	r3, sp, #136	; 0x88
   23bec:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   23bf0:	f853 3c88 	ldr.w	r3, [r3, #-136]
   23bf4:	0090      	lsls	r0, r2, #2
   23bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   23bfa:	a922      	add	r1, sp, #136	; 0x88
   23bfc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   23c00:	f851 1c40 	ldr.w	r1, [r1, #-64]
   23c04:	1a59      	subs	r1, r3, r1
   23c06:	eba1 010c 	sub.w	r1, r1, ip
			if (diff != v[index][i]) {
   23c0a:	428b      	cmp	r3, r1
   23c0c:	d1da      	bne.n	23bc4 <uECC_vli_mmod+0x8a>
   23c0e:	e7df      	b.n	23bd0 <uECC_vli_mmod+0x96>
		index = !(index ^ borrow);
   23c10:	4565      	cmp	r5, ip
   23c12:	bf14      	ite	ne
   23c14:	2500      	movne	r5, #0
   23c16:	2501      	moveq	r5, #1
		uECC_vli_rshift1(mod_multiple, num_words);
   23c18:	4621      	mov	r1, r4
   23c1a:	a812      	add	r0, sp, #72	; 0x48
   23c1c:	f7ff fdf6 	bl	2380c <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   23c20:	1e63      	subs	r3, r4, #1
   23c22:	aa22      	add	r2, sp, #136	; 0x88
   23c24:	eb02 0884 	add.w	r8, r2, r4, lsl #2
   23c28:	f858 1c40 	ldr.w	r1, [r8, #-64]
   23c2c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   23c30:	f853 2c40 	ldr.w	r2, [r3, #-64]
   23c34:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
   23c38:	f843 2c40 	str.w	r2, [r3, #-64]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   23c3c:	4621      	mov	r1, r4
   23c3e:	ab12      	add	r3, sp, #72	; 0x48
   23c40:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   23c44:	f7ff fde2 	bl	2380c <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   23c48:	3e01      	subs	r6, #1
   23c4a:	b236      	sxth	r6, r6
   23c4c:	2e00      	cmp	r6, #0
   23c4e:	db02      	blt.n	23c56 <uECC_vli_mmod+0x11c>
		for (i = 0; i < num_words * 2; ++i) {
   23c50:	2200      	movs	r2, #0
		uECC_word_t borrow = 0;
   23c52:	4694      	mov	ip, r2
   23c54:	e7c6      	b.n	23be4 <uECC_vli_mmod+0xaa>
	uECC_vli_set(result, v[index], num_words);
   23c56:	ab22      	add	r3, sp, #136	; 0x88
   23c58:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   23c5c:	4622      	mov	r2, r4
   23c5e:	f855 1c88 	ldr.w	r1, [r5, #-136]
   23c62:	4650      	mov	r0, sl
   23c64:	f7ff fe9a 	bl	2399c <uECC_vli_set>
}
   23c68:	b022      	add	sp, #136	; 0x88
   23c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00023c6e <uECC_vli_modMult_fast>:
{
   23c6e:	b530      	push	{r4, r5, lr}
   23c70:	b091      	sub	sp, #68	; 0x44
   23c72:	4605      	mov	r5, r0
   23c74:	461c      	mov	r4, r3
	uECC_vli_mult(product, left, right, curve->num_words);
   23c76:	f993 3000 	ldrsb.w	r3, [r3]
   23c7a:	4668      	mov	r0, sp
   23c7c:	f7ff fdef 	bl	2385e <uECC_vli_mult>
	curve->mmod_fast(result, product);
   23c80:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   23c84:	4669      	mov	r1, sp
   23c86:	4628      	mov	r0, r5
   23c88:	4798      	blx	r3
}
   23c8a:	b011      	add	sp, #68	; 0x44
   23c8c:	bd30      	pop	{r4, r5, pc}

00023c8e <uECC_vli_modSquare_fast>:
{
   23c8e:	b508      	push	{r3, lr}
   23c90:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   23c92:	460a      	mov	r2, r1
   23c94:	f7ff ffeb 	bl	23c6e <uECC_vli_modMult_fast>
}
   23c98:	bd08      	pop	{r3, pc}

00023c9a <double_jacobian_default>:
{
   23c9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23c9e:	b092      	sub	sp, #72	; 0x48
   23ca0:	4605      	mov	r5, r0
   23ca2:	4689      	mov	r9, r1
   23ca4:	4614      	mov	r4, r2
   23ca6:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   23ca8:	f993 6000 	ldrsb.w	r6, [r3]
	if (uECC_vli_isZero(Z1, num_words)) {
   23cac:	4631      	mov	r1, r6
   23cae:	4610      	mov	r0, r2
   23cb0:	f7ff fe3c 	bl	2392c <uECC_vli_isZero>
   23cb4:	b110      	cbz	r0, 23cbc <double_jacobian_default+0x22>
}
   23cb6:	b012      	add	sp, #72	; 0x48
   23cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   23cbc:	463a      	mov	r2, r7
   23cbe:	4649      	mov	r1, r9
   23cc0:	a80a      	add	r0, sp, #40	; 0x28
   23cc2:	f7ff ffe4 	bl	23c8e <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   23cc6:	463b      	mov	r3, r7
   23cc8:	aa0a      	add	r2, sp, #40	; 0x28
   23cca:	4629      	mov	r1, r5
   23ccc:	a802      	add	r0, sp, #8
   23cce:	f7ff ffce 	bl	23c6e <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   23cd2:	463a      	mov	r2, r7
   23cd4:	a90a      	add	r1, sp, #40	; 0x28
   23cd6:	4608      	mov	r0, r1
   23cd8:	f7ff ffd9 	bl	23c8e <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   23cdc:	463b      	mov	r3, r7
   23cde:	4622      	mov	r2, r4
   23ce0:	4649      	mov	r1, r9
   23ce2:	4648      	mov	r0, r9
   23ce4:	f7ff ffc3 	bl	23c6e <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   23ce8:	463a      	mov	r2, r7
   23cea:	4621      	mov	r1, r4
   23cec:	4620      	mov	r0, r4
   23cee:	f7ff ffce 	bl	23c8e <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   23cf2:	f107 0804 	add.w	r8, r7, #4
   23cf6:	9600      	str	r6, [sp, #0]
   23cf8:	4643      	mov	r3, r8
   23cfa:	4622      	mov	r2, r4
   23cfc:	4629      	mov	r1, r5
   23cfe:	4628      	mov	r0, r5
   23d00:	f7ff fef3 	bl	23aea <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   23d04:	9600      	str	r6, [sp, #0]
   23d06:	4643      	mov	r3, r8
   23d08:	4622      	mov	r2, r4
   23d0a:	4621      	mov	r1, r4
   23d0c:	4620      	mov	r0, r4
   23d0e:	f7ff feec 	bl	23aea <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   23d12:	9600      	str	r6, [sp, #0]
   23d14:	4643      	mov	r3, r8
   23d16:	4622      	mov	r2, r4
   23d18:	4629      	mov	r1, r5
   23d1a:	4620      	mov	r0, r4
   23d1c:	f7ff fefc 	bl	23b18 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   23d20:	463b      	mov	r3, r7
   23d22:	4622      	mov	r2, r4
   23d24:	4629      	mov	r1, r5
   23d26:	4628      	mov	r0, r5
   23d28:	f7ff ffa1 	bl	23c6e <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   23d2c:	9600      	str	r6, [sp, #0]
   23d2e:	4643      	mov	r3, r8
   23d30:	462a      	mov	r2, r5
   23d32:	4629      	mov	r1, r5
   23d34:	4620      	mov	r0, r4
   23d36:	f7ff fed8 	bl	23aea <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   23d3a:	9600      	str	r6, [sp, #0]
   23d3c:	4643      	mov	r3, r8
   23d3e:	4622      	mov	r2, r4
   23d40:	4629      	mov	r1, r5
   23d42:	4628      	mov	r0, r5
   23d44:	f7ff fed1 	bl	23aea <uECC_vli_modAdd>
	if (uECC_vli_testBit(X1, 0)) {
   23d48:	2100      	movs	r1, #0
   23d4a:	4628      	mov	r0, r5
   23d4c:	f7ff fe03 	bl	23956 <uECC_vli_testBit>
   23d50:	2800      	cmp	r0, #0
   23d52:	d04a      	beq.n	23dea <double_jacobian_default+0x150>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   23d54:	4633      	mov	r3, r6
   23d56:	4642      	mov	r2, r8
   23d58:	4629      	mov	r1, r5
   23d5a:	4628      	mov	r0, r5
   23d5c:	f7ff fe63 	bl	23a26 <uECC_vli_add>
   23d60:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   23d62:	4631      	mov	r1, r6
   23d64:	4628      	mov	r0, r5
   23d66:	f7ff fd51 	bl	2380c <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   23d6a:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   23d6e:	3b01      	subs	r3, #1
   23d70:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
   23d74:	ea40 70ca 	orr.w	r0, r0, sl, lsl #31
   23d78:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   23d7c:	463a      	mov	r2, r7
   23d7e:	4629      	mov	r1, r5
   23d80:	4620      	mov	r0, r4
   23d82:	f7ff ff84 	bl	23c8e <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   23d86:	9600      	str	r6, [sp, #0]
   23d88:	4643      	mov	r3, r8
   23d8a:	aa02      	add	r2, sp, #8
   23d8c:	4621      	mov	r1, r4
   23d8e:	4620      	mov	r0, r4
   23d90:	f7ff fec2 	bl	23b18 <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   23d94:	9600      	str	r6, [sp, #0]
   23d96:	4643      	mov	r3, r8
   23d98:	aa02      	add	r2, sp, #8
   23d9a:	4621      	mov	r1, r4
   23d9c:	4620      	mov	r0, r4
   23d9e:	f7ff febb 	bl	23b18 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   23da2:	9600      	str	r6, [sp, #0]
   23da4:	4643      	mov	r3, r8
   23da6:	4622      	mov	r2, r4
   23da8:	a902      	add	r1, sp, #8
   23daa:	4608      	mov	r0, r1
   23dac:	f7ff feb4 	bl	23b18 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   23db0:	463b      	mov	r3, r7
   23db2:	aa02      	add	r2, sp, #8
   23db4:	4629      	mov	r1, r5
   23db6:	4628      	mov	r0, r5
   23db8:	f7ff ff59 	bl	23c6e <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   23dbc:	9600      	str	r6, [sp, #0]
   23dbe:	4643      	mov	r3, r8
   23dc0:	aa0a      	add	r2, sp, #40	; 0x28
   23dc2:	4629      	mov	r1, r5
   23dc4:	4610      	mov	r0, r2
   23dc6:	f7ff fea7 	bl	23b18 <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   23dca:	4632      	mov	r2, r6
   23dcc:	4621      	mov	r1, r4
   23dce:	4628      	mov	r0, r5
   23dd0:	f7ff fde4 	bl	2399c <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   23dd4:	4632      	mov	r2, r6
   23dd6:	4649      	mov	r1, r9
   23dd8:	4620      	mov	r0, r4
   23dda:	f7ff fddf 	bl	2399c <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   23dde:	4632      	mov	r2, r6
   23de0:	a90a      	add	r1, sp, #40	; 0x28
   23de2:	4648      	mov	r0, r9
   23de4:	f7ff fdda 	bl	2399c <uECC_vli_set>
   23de8:	e765      	b.n	23cb6 <double_jacobian_default+0x1c>
		uECC_vli_rshift1(X1, num_words);
   23dea:	4631      	mov	r1, r6
   23dec:	4628      	mov	r0, r5
   23dee:	f7ff fd0d 	bl	2380c <uECC_vli_rshift1>
   23df2:	e7c3      	b.n	23d7c <double_jacobian_default+0xe2>

00023df4 <x_side_default>:
{
   23df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23df8:	b08a      	sub	sp, #40	; 0x28
   23dfa:	4604      	mov	r4, r0
   23dfc:	460f      	mov	r7, r1
   23dfe:	4615      	mov	r5, r2
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   23e00:	2300      	movs	r3, #0
   23e02:	9303      	str	r3, [sp, #12]
   23e04:	9304      	str	r3, [sp, #16]
   23e06:	9305      	str	r3, [sp, #20]
   23e08:	9306      	str	r3, [sp, #24]
   23e0a:	9307      	str	r3, [sp, #28]
   23e0c:	9308      	str	r3, [sp, #32]
   23e0e:	9309      	str	r3, [sp, #36]	; 0x24
   23e10:	2303      	movs	r3, #3
   23e12:	9302      	str	r3, [sp, #8]
	wordcount_t num_words = curve->num_words;
   23e14:	4616      	mov	r6, r2
   23e16:	f916 8b04 	ldrsb.w	r8, [r6], #4
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   23e1a:	f7ff ff38 	bl	23c8e <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   23e1e:	f8cd 8000 	str.w	r8, [sp]
   23e22:	4633      	mov	r3, r6
   23e24:	aa02      	add	r2, sp, #8
   23e26:	4621      	mov	r1, r4
   23e28:	4620      	mov	r0, r4
   23e2a:	f7ff fe75 	bl	23b18 <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   23e2e:	462b      	mov	r3, r5
   23e30:	463a      	mov	r2, r7
   23e32:	4621      	mov	r1, r4
   23e34:	4620      	mov	r0, r4
   23e36:	f7ff ff1a 	bl	23c6e <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   23e3a:	f8cd 8000 	str.w	r8, [sp]
   23e3e:	4633      	mov	r3, r6
   23e40:	f105 0284 	add.w	r2, r5, #132	; 0x84
   23e44:	4621      	mov	r1, r4
   23e46:	4620      	mov	r0, r4
   23e48:	f7ff fe4f 	bl	23aea <uECC_vli_modAdd>
}
   23e4c:	b00a      	add	sp, #40	; 0x28
   23e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023e52 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   23e52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23e56:	b09a      	sub	sp, #104	; 0x68
   23e58:	4607      	mov	r7, r0
   23e5a:	4689      	mov	r9, r1
   23e5c:	4616      	mov	r6, r2
   23e5e:	4698      	mov	r8, r3
   23e60:	f8dd a088 	ldr.w	sl, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   23e64:	4654      	mov	r4, sl
   23e66:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   23e6a:	9500      	str	r5, [sp, #0]
   23e6c:	4623      	mov	r3, r4
   23e6e:	4602      	mov	r2, r0
   23e70:	4631      	mov	r1, r6
   23e72:	a812      	add	r0, sp, #72	; 0x48
   23e74:	f7ff fe50 	bl	23b18 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   23e78:	4652      	mov	r2, sl
   23e7a:	a912      	add	r1, sp, #72	; 0x48
   23e7c:	4608      	mov	r0, r1
   23e7e:	f7ff ff06 	bl	23c8e <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   23e82:	4653      	mov	r3, sl
   23e84:	aa12      	add	r2, sp, #72	; 0x48
   23e86:	4639      	mov	r1, r7
   23e88:	4638      	mov	r0, r7
   23e8a:	f7ff fef0 	bl	23c6e <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   23e8e:	4653      	mov	r3, sl
   23e90:	aa12      	add	r2, sp, #72	; 0x48
   23e92:	4631      	mov	r1, r6
   23e94:	4630      	mov	r0, r6
   23e96:	f7ff feea 	bl	23c6e <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   23e9a:	9500      	str	r5, [sp, #0]
   23e9c:	4623      	mov	r3, r4
   23e9e:	464a      	mov	r2, r9
   23ea0:	4641      	mov	r1, r8
   23ea2:	a812      	add	r0, sp, #72	; 0x48
   23ea4:	f7ff fe21 	bl	23aea <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   23ea8:	9500      	str	r5, [sp, #0]
   23eaa:	4623      	mov	r3, r4
   23eac:	464a      	mov	r2, r9
   23eae:	4641      	mov	r1, r8
   23eb0:	4640      	mov	r0, r8
   23eb2:	f7ff fe31 	bl	23b18 <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   23eb6:	9500      	str	r5, [sp, #0]
   23eb8:	4623      	mov	r3, r4
   23eba:	463a      	mov	r2, r7
   23ebc:	4631      	mov	r1, r6
   23ebe:	a80a      	add	r0, sp, #40	; 0x28
   23ec0:	f7ff fe2a 	bl	23b18 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   23ec4:	4653      	mov	r3, sl
   23ec6:	aa0a      	add	r2, sp, #40	; 0x28
   23ec8:	4649      	mov	r1, r9
   23eca:	4648      	mov	r0, r9
   23ecc:	f7ff fecf 	bl	23c6e <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   23ed0:	9500      	str	r5, [sp, #0]
   23ed2:	4623      	mov	r3, r4
   23ed4:	4632      	mov	r2, r6
   23ed6:	4639      	mov	r1, r7
   23ed8:	a80a      	add	r0, sp, #40	; 0x28
   23eda:	f7ff fe06 	bl	23aea <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   23ede:	4652      	mov	r2, sl
   23ee0:	4641      	mov	r1, r8
   23ee2:	4630      	mov	r0, r6
   23ee4:	f7ff fed3 	bl	23c8e <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   23ee8:	9500      	str	r5, [sp, #0]
   23eea:	4623      	mov	r3, r4
   23eec:	aa0a      	add	r2, sp, #40	; 0x28
   23eee:	4631      	mov	r1, r6
   23ef0:	4630      	mov	r0, r6
   23ef2:	f7ff fe11 	bl	23b18 <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   23ef6:	9500      	str	r5, [sp, #0]
   23ef8:	4623      	mov	r3, r4
   23efa:	4632      	mov	r2, r6
   23efc:	4639      	mov	r1, r7
   23efe:	a802      	add	r0, sp, #8
   23f00:	f7ff fe0a 	bl	23b18 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   23f04:	4653      	mov	r3, sl
   23f06:	aa02      	add	r2, sp, #8
   23f08:	4641      	mov	r1, r8
   23f0a:	4640      	mov	r0, r8
   23f0c:	f7ff feaf 	bl	23c6e <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   23f10:	9500      	str	r5, [sp, #0]
   23f12:	4623      	mov	r3, r4
   23f14:	464a      	mov	r2, r9
   23f16:	4641      	mov	r1, r8
   23f18:	4640      	mov	r0, r8
   23f1a:	f7ff fdfd 	bl	23b18 <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   23f1e:	4652      	mov	r2, sl
   23f20:	a912      	add	r1, sp, #72	; 0x48
   23f22:	a802      	add	r0, sp, #8
   23f24:	f7ff feb3 	bl	23c8e <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   23f28:	9500      	str	r5, [sp, #0]
   23f2a:	4623      	mov	r3, r4
   23f2c:	aa0a      	add	r2, sp, #40	; 0x28
   23f2e:	a902      	add	r1, sp, #8
   23f30:	4608      	mov	r0, r1
   23f32:	f7ff fdf1 	bl	23b18 <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   23f36:	9500      	str	r5, [sp, #0]
   23f38:	4623      	mov	r3, r4
   23f3a:	463a      	mov	r2, r7
   23f3c:	a902      	add	r1, sp, #8
   23f3e:	a80a      	add	r0, sp, #40	; 0x28
   23f40:	f7ff fdea 	bl	23b18 <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   23f44:	4653      	mov	r3, sl
   23f46:	aa12      	add	r2, sp, #72	; 0x48
   23f48:	a90a      	add	r1, sp, #40	; 0x28
   23f4a:	4608      	mov	r0, r1
   23f4c:	f7ff fe8f 	bl	23c6e <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   23f50:	9500      	str	r5, [sp, #0]
   23f52:	4623      	mov	r3, r4
   23f54:	464a      	mov	r2, r9
   23f56:	a90a      	add	r1, sp, #40	; 0x28
   23f58:	4648      	mov	r0, r9
   23f5a:	f7ff fddd 	bl	23b18 <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   23f5e:	462a      	mov	r2, r5
   23f60:	a902      	add	r1, sp, #8
   23f62:	4638      	mov	r0, r7
   23f64:	f7ff fd1a 	bl	2399c <uECC_vli_set>
}
   23f68:	b01a      	add	sp, #104	; 0x68
   23f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00023f6e <uECC_vli_modInv>:
{
   23f6e:	b5f0      	push	{r4, r5, r6, r7, lr}
   23f70:	b0a1      	sub	sp, #132	; 0x84
   23f72:	4607      	mov	r7, r0
   23f74:	460e      	mov	r6, r1
   23f76:	4615      	mov	r5, r2
   23f78:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   23f7a:	4619      	mov	r1, r3
   23f7c:	4630      	mov	r0, r6
   23f7e:	f7ff fcd5 	bl	2392c <uECC_vli_isZero>
   23f82:	b9a0      	cbnz	r0, 23fae <uECC_vli_modInv+0x40>
	uECC_vli_set(a, input, num_words);
   23f84:	4622      	mov	r2, r4
   23f86:	4631      	mov	r1, r6
   23f88:	a818      	add	r0, sp, #96	; 0x60
   23f8a:	f7ff fd07 	bl	2399c <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   23f8e:	4622      	mov	r2, r4
   23f90:	4629      	mov	r1, r5
   23f92:	a810      	add	r0, sp, #64	; 0x40
   23f94:	f7ff fd02 	bl	2399c <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   23f98:	4621      	mov	r1, r4
   23f9a:	a808      	add	r0, sp, #32
   23f9c:	f7ff fcbc 	bl	23918 <uECC_vli_clear>
	u[0] = 1;
   23fa0:	2301      	movs	r3, #1
   23fa2:	9308      	str	r3, [sp, #32]
	uECC_vli_clear(v, num_words);
   23fa4:	4621      	mov	r1, r4
   23fa6:	4668      	mov	r0, sp
   23fa8:	f7ff fcb6 	bl	23918 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   23fac:	e00d      	b.n	23fca <uECC_vli_modInv+0x5c>
		uECC_vli_clear(result, num_words);
   23fae:	4621      	mov	r1, r4
   23fb0:	4638      	mov	r0, r7
   23fb2:	f7ff fcb1 	bl	23918 <uECC_vli_clear>
		return;
   23fb6:	e071      	b.n	2409c <uECC_vli_modInv+0x12e>
			uECC_vli_rshift1(a, num_words);
   23fb8:	4621      	mov	r1, r4
   23fba:	a818      	add	r0, sp, #96	; 0x60
   23fbc:	f7ff fc26 	bl	2380c <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   23fc0:	4622      	mov	r2, r4
   23fc2:	4629      	mov	r1, r5
   23fc4:	a808      	add	r0, sp, #32
   23fc6:	f7ff fd50 	bl	23a6a <vli_modInv_update>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   23fca:	4622      	mov	r2, r4
   23fcc:	a910      	add	r1, sp, #64	; 0x40
   23fce:	a818      	add	r0, sp, #96	; 0x60
   23fd0:	f7ff fcf3 	bl	239ba <uECC_vli_cmp_unsafe>
   23fd4:	4602      	mov	r2, r0
   23fd6:	2800      	cmp	r0, #0
   23fd8:	d05b      	beq.n	24092 <uECC_vli_modInv+0x124>
		if (EVEN(a)) {
   23fda:	9b18      	ldr	r3, [sp, #96]	; 0x60
   23fdc:	f013 0f01 	tst.w	r3, #1
   23fe0:	d0ea      	beq.n	23fb8 <uECC_vli_modInv+0x4a>
    		} else if (EVEN(b)) {
   23fe2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   23fe4:	f013 0f01 	tst.w	r3, #1
   23fe8:	d01e      	beq.n	24028 <uECC_vli_modInv+0xba>
		} else if (cmpResult > 0) {
   23fea:	2a00      	cmp	r2, #0
   23fec:	dd2d      	ble.n	2404a <uECC_vli_modInv+0xdc>
			uECC_vli_sub(a, a, b, num_words);
   23fee:	4623      	mov	r3, r4
   23ff0:	aa10      	add	r2, sp, #64	; 0x40
   23ff2:	a918      	add	r1, sp, #96	; 0x60
   23ff4:	4608      	mov	r0, r1
   23ff6:	f7ff fd56 	bl	23aa6 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   23ffa:	4621      	mov	r1, r4
   23ffc:	a818      	add	r0, sp, #96	; 0x60
   23ffe:	f7ff fc05 	bl	2380c <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   24002:	4622      	mov	r2, r4
   24004:	4669      	mov	r1, sp
   24006:	a808      	add	r0, sp, #32
   24008:	f7ff fcd7 	bl	239ba <uECC_vli_cmp_unsafe>
   2400c:	2800      	cmp	r0, #0
   2400e:	db15      	blt.n	2403c <uECC_vli_modInv+0xce>
      			uECC_vli_sub(u, u, v, num_words);
   24010:	4623      	mov	r3, r4
   24012:	466a      	mov	r2, sp
   24014:	a908      	add	r1, sp, #32
   24016:	4608      	mov	r0, r1
   24018:	f7ff fd45 	bl	23aa6 <uECC_vli_sub>
      			vli_modInv_update(u, mod, num_words);
   2401c:	4622      	mov	r2, r4
   2401e:	4629      	mov	r1, r5
   24020:	a808      	add	r0, sp, #32
   24022:	f7ff fd22 	bl	23a6a <vli_modInv_update>
   24026:	e7d0      	b.n	23fca <uECC_vli_modInv+0x5c>
			uECC_vli_rshift1(b, num_words);
   24028:	4621      	mov	r1, r4
   2402a:	a810      	add	r0, sp, #64	; 0x40
   2402c:	f7ff fbee 	bl	2380c <uECC_vli_rshift1>
			vli_modInv_update(v, mod, num_words);
   24030:	4622      	mov	r2, r4
   24032:	4629      	mov	r1, r5
   24034:	4668      	mov	r0, sp
   24036:	f7ff fd18 	bl	23a6a <vli_modInv_update>
   2403a:	e7c6      	b.n	23fca <uECC_vli_modInv+0x5c>
        			uECC_vli_add(u, u, mod, num_words);
   2403c:	4623      	mov	r3, r4
   2403e:	462a      	mov	r2, r5
   24040:	a908      	add	r1, sp, #32
   24042:	4608      	mov	r0, r1
   24044:	f7ff fcef 	bl	23a26 <uECC_vli_add>
   24048:	e7e2      	b.n	24010 <uECC_vli_modInv+0xa2>
      			uECC_vli_sub(b, b, a, num_words);
   2404a:	4623      	mov	r3, r4
   2404c:	aa18      	add	r2, sp, #96	; 0x60
   2404e:	a910      	add	r1, sp, #64	; 0x40
   24050:	4608      	mov	r0, r1
   24052:	f7ff fd28 	bl	23aa6 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   24056:	4621      	mov	r1, r4
   24058:	a810      	add	r0, sp, #64	; 0x40
   2405a:	f7ff fbd7 	bl	2380c <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   2405e:	4622      	mov	r2, r4
   24060:	a908      	add	r1, sp, #32
   24062:	4668      	mov	r0, sp
   24064:	f7ff fca9 	bl	239ba <uECC_vli_cmp_unsafe>
   24068:	2800      	cmp	r0, #0
   2406a:	db0b      	blt.n	24084 <uECC_vli_modInv+0x116>
      			uECC_vli_sub(v, v, u, num_words);
   2406c:	4623      	mov	r3, r4
   2406e:	aa08      	add	r2, sp, #32
   24070:	4669      	mov	r1, sp
   24072:	4668      	mov	r0, sp
   24074:	f7ff fd17 	bl	23aa6 <uECC_vli_sub>
      			vli_modInv_update(v, mod, num_words);
   24078:	4622      	mov	r2, r4
   2407a:	4629      	mov	r1, r5
   2407c:	4668      	mov	r0, sp
   2407e:	f7ff fcf4 	bl	23a6a <vli_modInv_update>
   24082:	e7a2      	b.n	23fca <uECC_vli_modInv+0x5c>
        			uECC_vli_add(v, v, mod, num_words);
   24084:	4623      	mov	r3, r4
   24086:	462a      	mov	r2, r5
   24088:	4669      	mov	r1, sp
   2408a:	4668      	mov	r0, sp
   2408c:	f7ff fccb 	bl	23a26 <uECC_vli_add>
   24090:	e7ec      	b.n	2406c <uECC_vli_modInv+0xfe>
  	uECC_vli_set(result, u, num_words);
   24092:	4622      	mov	r2, r4
   24094:	a908      	add	r1, sp, #32
   24096:	4638      	mov	r0, r7
   24098:	f7ff fc80 	bl	2399c <uECC_vli_set>
}
   2409c:	b021      	add	sp, #132	; 0x84
   2409e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000240a0 <EccPoint_isZero>:
{
   240a0:	b508      	push	{r3, lr}
	return uECC_vli_isZero(point, curve->num_words * 2);
   240a2:	f991 1000 	ldrsb.w	r1, [r1]
   240a6:	0049      	lsls	r1, r1, #1
   240a8:	b249      	sxtb	r1, r1
   240aa:	f7ff fc3f 	bl	2392c <uECC_vli_isZero>
}
   240ae:	bd08      	pop	{r3, pc}

000240b0 <apply_z>:
{
   240b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   240b2:	b089      	sub	sp, #36	; 0x24
   240b4:	4607      	mov	r7, r0
   240b6:	460d      	mov	r5, r1
   240b8:	4616      	mov	r6, r2
   240ba:	461c      	mov	r4, r3
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   240bc:	461a      	mov	r2, r3
   240be:	4631      	mov	r1, r6
   240c0:	4668      	mov	r0, sp
   240c2:	f7ff fde4 	bl	23c8e <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   240c6:	4623      	mov	r3, r4
   240c8:	466a      	mov	r2, sp
   240ca:	4639      	mov	r1, r7
   240cc:	4638      	mov	r0, r7
   240ce:	f7ff fdce 	bl	23c6e <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   240d2:	4623      	mov	r3, r4
   240d4:	4632      	mov	r2, r6
   240d6:	4669      	mov	r1, sp
   240d8:	4668      	mov	r0, sp
   240da:	f7ff fdc8 	bl	23c6e <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   240de:	4623      	mov	r3, r4
   240e0:	466a      	mov	r2, sp
   240e2:	4629      	mov	r1, r5
   240e4:	4628      	mov	r0, r5
   240e6:	f7ff fdc2 	bl	23c6e <uECC_vli_modMult_fast>
}
   240ea:	b009      	add	sp, #36	; 0x24
   240ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

000240ee <XYcZ_initial_double>:
{
   240ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   240f2:	b089      	sub	sp, #36	; 0x24
   240f4:	4605      	mov	r5, r0
   240f6:	460e      	mov	r6, r1
   240f8:	4690      	mov	r8, r2
   240fa:	4699      	mov	r9, r3
   240fc:	9910      	ldr	r1, [sp, #64]	; 0x40
   240fe:	9c11      	ldr	r4, [sp, #68]	; 0x44
	wordcount_t num_words = curve->num_words;
   24100:	f994 7000 	ldrsb.w	r7, [r4]
	if (initial_Z) {
   24104:	b319      	cbz	r1, 2414e <XYcZ_initial_double+0x60>
		uECC_vli_set(z, initial_Z, num_words);
   24106:	463a      	mov	r2, r7
   24108:	4668      	mov	r0, sp
   2410a:	f7ff fc47 	bl	2399c <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   2410e:	463a      	mov	r2, r7
   24110:	4629      	mov	r1, r5
   24112:	4640      	mov	r0, r8
   24114:	f7ff fc42 	bl	2399c <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   24118:	463a      	mov	r2, r7
   2411a:	4631      	mov	r1, r6
   2411c:	4648      	mov	r0, r9
   2411e:	f7ff fc3d 	bl	2399c <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   24122:	4623      	mov	r3, r4
   24124:	466a      	mov	r2, sp
   24126:	4631      	mov	r1, r6
   24128:	4628      	mov	r0, r5
   2412a:	f7ff ffc1 	bl	240b0 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   2412e:	f8d4 70a4 	ldr.w	r7, [r4, #164]	; 0xa4
   24132:	4623      	mov	r3, r4
   24134:	466a      	mov	r2, sp
   24136:	4631      	mov	r1, r6
   24138:	4628      	mov	r0, r5
   2413a:	47b8      	blx	r7
	apply_z(X2, Y2, z, curve);
   2413c:	4623      	mov	r3, r4
   2413e:	466a      	mov	r2, sp
   24140:	4649      	mov	r1, r9
   24142:	4640      	mov	r0, r8
   24144:	f7ff ffb4 	bl	240b0 <apply_z>
}
   24148:	b009      	add	sp, #36	; 0x24
   2414a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uECC_vli_clear(z, num_words);
   2414e:	4639      	mov	r1, r7
   24150:	4668      	mov	r0, sp
   24152:	f7ff fbe1 	bl	23918 <uECC_vli_clear>
		z[0] = 1;
   24156:	2301      	movs	r3, #1
   24158:	9300      	str	r3, [sp, #0]
   2415a:	e7d8      	b.n	2410e <XYcZ_initial_double+0x20>

0002415c <XYcZ_add>:
{
   2415c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24160:	b08a      	sub	sp, #40	; 0x28
   24162:	4680      	mov	r8, r0
   24164:	4689      	mov	r9, r1
   24166:	4614      	mov	r4, r2
   24168:	461d      	mov	r5, r3
   2416a:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   2416e:	4656      	mov	r6, sl
   24170:	f916 7b04 	ldrsb.w	r7, [r6], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   24174:	9700      	str	r7, [sp, #0]
   24176:	4633      	mov	r3, r6
   24178:	4602      	mov	r2, r0
   2417a:	4621      	mov	r1, r4
   2417c:	a802      	add	r0, sp, #8
   2417e:	f7ff fccb 	bl	23b18 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   24182:	4652      	mov	r2, sl
   24184:	a902      	add	r1, sp, #8
   24186:	4608      	mov	r0, r1
   24188:	f7ff fd81 	bl	23c8e <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   2418c:	4653      	mov	r3, sl
   2418e:	aa02      	add	r2, sp, #8
   24190:	4641      	mov	r1, r8
   24192:	4640      	mov	r0, r8
   24194:	f7ff fd6b 	bl	23c6e <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   24198:	4653      	mov	r3, sl
   2419a:	aa02      	add	r2, sp, #8
   2419c:	4621      	mov	r1, r4
   2419e:	4620      	mov	r0, r4
   241a0:	f7ff fd65 	bl	23c6e <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   241a4:	9700      	str	r7, [sp, #0]
   241a6:	4633      	mov	r3, r6
   241a8:	464a      	mov	r2, r9
   241aa:	4629      	mov	r1, r5
   241ac:	4628      	mov	r0, r5
   241ae:	f7ff fcb3 	bl	23b18 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   241b2:	4652      	mov	r2, sl
   241b4:	4629      	mov	r1, r5
   241b6:	a802      	add	r0, sp, #8
   241b8:	f7ff fd69 	bl	23c8e <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   241bc:	9700      	str	r7, [sp, #0]
   241be:	4633      	mov	r3, r6
   241c0:	4642      	mov	r2, r8
   241c2:	a902      	add	r1, sp, #8
   241c4:	4608      	mov	r0, r1
   241c6:	f7ff fca7 	bl	23b18 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   241ca:	9700      	str	r7, [sp, #0]
   241cc:	4633      	mov	r3, r6
   241ce:	4622      	mov	r2, r4
   241d0:	a902      	add	r1, sp, #8
   241d2:	4608      	mov	r0, r1
   241d4:	f7ff fca0 	bl	23b18 <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   241d8:	9700      	str	r7, [sp, #0]
   241da:	4633      	mov	r3, r6
   241dc:	4642      	mov	r2, r8
   241de:	4621      	mov	r1, r4
   241e0:	4620      	mov	r0, r4
   241e2:	f7ff fc99 	bl	23b18 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   241e6:	4653      	mov	r3, sl
   241e8:	4622      	mov	r2, r4
   241ea:	4649      	mov	r1, r9
   241ec:	4648      	mov	r0, r9
   241ee:	f7ff fd3e 	bl	23c6e <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   241f2:	9700      	str	r7, [sp, #0]
   241f4:	4633      	mov	r3, r6
   241f6:	aa02      	add	r2, sp, #8
   241f8:	4641      	mov	r1, r8
   241fa:	4620      	mov	r0, r4
   241fc:	f7ff fc8c 	bl	23b18 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   24200:	4653      	mov	r3, sl
   24202:	4622      	mov	r2, r4
   24204:	4629      	mov	r1, r5
   24206:	4628      	mov	r0, r5
   24208:	f7ff fd31 	bl	23c6e <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   2420c:	9700      	str	r7, [sp, #0]
   2420e:	4633      	mov	r3, r6
   24210:	464a      	mov	r2, r9
   24212:	4629      	mov	r1, r5
   24214:	4628      	mov	r0, r5
   24216:	f7ff fc7f 	bl	23b18 <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   2421a:	463a      	mov	r2, r7
   2421c:	a902      	add	r1, sp, #8
   2421e:	4620      	mov	r0, r4
   24220:	f7ff fbbc 	bl	2399c <uECC_vli_set>
}
   24224:	b00a      	add	sp, #40	; 0x28
   24226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002422a <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   2422a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2422e:	b0af      	sub	sp, #188	; 0xbc
   24230:	9004      	str	r0, [sp, #16]
   24232:	460d      	mov	r5, r1
   24234:	9105      	str	r1, [sp, #20]
   24236:	4692      	mov	sl, r2
   24238:	461c      	mov	r4, r3
   2423a:	f8dd 80e4 	ldr.w	r8, [sp, #228]	; 0xe4
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   2423e:	f998 b000 	ldrsb.w	fp, [r8]

	uECC_vli_set(Rx[1], point, num_words);
   24242:	465a      	mov	r2, fp
   24244:	a826      	add	r0, sp, #152	; 0x98
   24246:	f7ff fba9 	bl	2399c <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   2424a:	ea4f 038b 	mov.w	r3, fp, lsl #2
   2424e:	9302      	str	r3, [sp, #8]
   24250:	eb05 038b 	add.w	r3, r5, fp, lsl #2
   24254:	9303      	str	r3, [sp, #12]
   24256:	465a      	mov	r2, fp
   24258:	4619      	mov	r1, r3
   2425a:	a816      	add	r0, sp, #88	; 0x58
   2425c:	f7ff fb9e 	bl	2399c <uECC_vli_set>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);
   24260:	f8cd 8004 	str.w	r8, [sp, #4]
   24264:	9400      	str	r4, [sp, #0]
   24266:	ab0e      	add	r3, sp, #56	; 0x38
   24268:	aa1e      	add	r2, sp, #120	; 0x78
   2426a:	a916      	add	r1, sp, #88	; 0x58
   2426c:	a826      	add	r0, sp, #152	; 0x98
   2426e:	f7ff ff3e 	bl	240ee <XYcZ_initial_double>

	for (i = num_bits - 2; i > 0; --i) {
   24272:	f9bd 40e0 	ldrsh.w	r4, [sp, #224]	; 0xe0
   24276:	3c02      	subs	r4, #2
   24278:	b224      	sxth	r4, r4
   2427a:	4647      	mov	r7, r8
   2427c:	2c00      	cmp	r4, #0
   2427e:	dd25      	ble.n	242cc <EccPoint_mult+0xa2>
		nb = !uECC_vli_testBit(scalar, i);
   24280:	4621      	mov	r1, r4
   24282:	4650      	mov	r0, sl
   24284:	f7ff fb67 	bl	23956 <uECC_vli_testBit>
   24288:	fab0 f080 	clz	r0, r0
   2428c:	0940      	lsrs	r0, r0, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   2428e:	f1c0 0601 	rsb	r6, r0, #1
   24292:	ab1e      	add	r3, sp, #120	; 0x78
   24294:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   24298:	ab0e      	add	r3, sp, #56	; 0x38
   2429a:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   2429e:	ab1e      	add	r3, sp, #120	; 0x78
   242a0:	eb03 1540 	add.w	r5, r3, r0, lsl #5
   242a4:	ab0e      	add	r3, sp, #56	; 0x38
   242a6:	eb03 1940 	add.w	r9, r3, r0, lsl #5
   242aa:	9700      	str	r7, [sp, #0]
   242ac:	464b      	mov	r3, r9
   242ae:	462a      	mov	r2, r5
   242b0:	4631      	mov	r1, r6
   242b2:	4640      	mov	r0, r8
   242b4:	f7ff fdcd 	bl	23e52 <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   242b8:	9700      	str	r7, [sp, #0]
   242ba:	4633      	mov	r3, r6
   242bc:	4642      	mov	r2, r8
   242be:	4649      	mov	r1, r9
   242c0:	4628      	mov	r0, r5
   242c2:	f7ff ff4b 	bl	2415c <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   242c6:	3c01      	subs	r4, #1
   242c8:	b224      	sxth	r4, r4
   242ca:	e7d7      	b.n	2427c <EccPoint_mult+0x52>
   242cc:	46b8      	mov	r8, r7
	}

	nb = !uECC_vli_testBit(scalar, 0);
   242ce:	2100      	movs	r1, #0
   242d0:	4650      	mov	r0, sl
   242d2:	f7ff fb40 	bl	23956 <uECC_vli_testBit>
   242d6:	fab0 f480 	clz	r4, r0
   242da:	0964      	lsrs	r4, r4, #5
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   242dc:	f1c4 0501 	rsb	r5, r4, #1
   242e0:	ab1e      	add	r3, sp, #120	; 0x78
   242e2:	eb03 1645 	add.w	r6, r3, r5, lsl #5
   242e6:	ab0e      	add	r3, sp, #56	; 0x38
   242e8:	eb03 1545 	add.w	r5, r3, r5, lsl #5
   242ec:	ab1e      	add	r3, sp, #120	; 0x78
   242ee:	eb03 1744 	add.w	r7, r3, r4, lsl #5
   242f2:	ab0e      	add	r3, sp, #56	; 0x38
   242f4:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   242f8:	f8cd 8000 	str.w	r8, [sp]
   242fc:	4623      	mov	r3, r4
   242fe:	463a      	mov	r2, r7
   24300:	4629      	mov	r1, r5
   24302:	4630      	mov	r0, r6
   24304:	f7ff fda5 	bl	23e52 <XYcZ_addC>

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   24308:	f108 0904 	add.w	r9, r8, #4
   2430c:	f8cd b000 	str.w	fp, [sp]
   24310:	464b      	mov	r3, r9
   24312:	aa1e      	add	r2, sp, #120	; 0x78
   24314:	a926      	add	r1, sp, #152	; 0x98
   24316:	a806      	add	r0, sp, #24
   24318:	f7ff fbfe 	bl	23b18 <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   2431c:	4643      	mov	r3, r8
   2431e:	462a      	mov	r2, r5
   24320:	a906      	add	r1, sp, #24
   24322:	4608      	mov	r0, r1
   24324:	f7ff fca3 	bl	23c6e <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   24328:	4643      	mov	r3, r8
   2432a:	9a05      	ldr	r2, [sp, #20]
   2432c:	a906      	add	r1, sp, #24
   2432e:	4608      	mov	r0, r1
   24330:	f7ff fc9d 	bl	23c6e <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   24334:	465b      	mov	r3, fp
   24336:	464a      	mov	r2, r9
   24338:	a906      	add	r1, sp, #24
   2433a:	4608      	mov	r0, r1
   2433c:	f7ff fe17 	bl	23f6e <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   24340:	4643      	mov	r3, r8
   24342:	9a03      	ldr	r2, [sp, #12]
   24344:	a906      	add	r1, sp, #24
   24346:	4608      	mov	r0, r1
   24348:	f7ff fc91 	bl	23c6e <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   2434c:	4643      	mov	r3, r8
   2434e:	4632      	mov	r2, r6
   24350:	a906      	add	r1, sp, #24
   24352:	4608      	mov	r0, r1
   24354:	f7ff fc8b 	bl	23c6e <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   24358:	f8cd 8000 	str.w	r8, [sp]
   2435c:	462b      	mov	r3, r5
   2435e:	4632      	mov	r2, r6
   24360:	4621      	mov	r1, r4
   24362:	4638      	mov	r0, r7
   24364:	f7ff fefa 	bl	2415c <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   24368:	4643      	mov	r3, r8
   2436a:	aa06      	add	r2, sp, #24
   2436c:	a90e      	add	r1, sp, #56	; 0x38
   2436e:	a81e      	add	r0, sp, #120	; 0x78
   24370:	f7ff fe9e 	bl	240b0 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   24374:	465a      	mov	r2, fp
   24376:	a91e      	add	r1, sp, #120	; 0x78
   24378:	9c04      	ldr	r4, [sp, #16]
   2437a:	4620      	mov	r0, r4
   2437c:	f7ff fb0e 	bl	2399c <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   24380:	465a      	mov	r2, fp
   24382:	a90e      	add	r1, sp, #56	; 0x38
   24384:	4623      	mov	r3, r4
   24386:	9c02      	ldr	r4, [sp, #8]
   24388:	4423      	add	r3, r4
   2438a:	4618      	mov	r0, r3
   2438c:	f7ff fb06 	bl	2399c <uECC_vli_set>
}
   24390:	b02f      	add	sp, #188	; 0xbc
   24392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00024396 <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   24396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2439a:	460e      	mov	r6, r1
   2439c:	4617      	mov	r7, r2

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   2439e:	f9b3 8002 	ldrsh.w	r8, [r3, #2]
   243a2:	f118 051f 	adds.w	r5, r8, #31
   243a6:	d415      	bmi.n	243d4 <regularize_k+0x3e>
   243a8:	f345 1547 	sbfx	r5, r5, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   243ac:	f103 0424 	add.w	r4, r3, #36	; 0x24
   243b0:	462b      	mov	r3, r5
   243b2:	4622      	mov	r2, r4
   243b4:	4601      	mov	r1, r0
   243b6:	4630      	mov	r0, r6
   243b8:	f7ff fb35 	bl	23a26 <uECC_vli_add>
   243bc:	b960      	cbnz	r0, 243d8 <regularize_k+0x42>
   243be:	ebb8 1f45 	cmp.w	r8, r5, lsl #5
   243c2:	da14      	bge.n	243ee <regularize_k+0x58>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   243c4:	4641      	mov	r1, r8
   243c6:	4630      	mov	r0, r6
   243c8:	f7ff fac5 	bl	23956 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   243cc:	b990      	cbnz	r0, 243f4 <regularize_k+0x5e>
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   243ce:	f04f 0800 	mov.w	r8, #0
   243d2:	e003      	b.n	243dc <regularize_k+0x46>
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   243d4:	351f      	adds	r5, #31
   243d6:	e7e7      	b.n	243a8 <regularize_k+0x12>
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   243d8:	f04f 0801 	mov.w	r8, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   243dc:	462b      	mov	r3, r5
   243de:	4622      	mov	r2, r4
   243e0:	4631      	mov	r1, r6
   243e2:	4638      	mov	r0, r7
   243e4:	f7ff fb1f 	bl	23a26 <uECC_vli_add>

	return carry;
}
   243e8:	4640      	mov	r0, r8
   243ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   243ee:	f04f 0800 	mov.w	r8, #0
   243f2:	e7f3      	b.n	243dc <regularize_k+0x46>
   243f4:	f04f 0801 	mov.w	r8, #1
   243f8:	e7f0      	b.n	243dc <regularize_k+0x46>

000243fa <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   243fa:	b530      	push	{r4, r5, lr}
   243fc:	b095      	sub	sp, #84	; 0x54
   243fe:	4605      	mov	r5, r0
   24400:	4608      	mov	r0, r1
   24402:	4614      	mov	r4, r2

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   24404:	a90c      	add	r1, sp, #48	; 0x30
   24406:	9102      	str	r1, [sp, #8]
   24408:	aa04      	add	r2, sp, #16
   2440a:	9203      	str	r2, [sp, #12]
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   2440c:	4623      	mov	r3, r4
   2440e:	f7ff ffc2 	bl	24396 <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   24412:	fab0 f380 	clz	r3, r0
   24416:	095b      	lsrs	r3, r3, #5
   24418:	aa14      	add	r2, sp, #80	; 0x50
   2441a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   2441e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   24422:	9401      	str	r4, [sp, #4]
   24424:	3301      	adds	r3, #1
   24426:	b21b      	sxth	r3, r3
   24428:	9300      	str	r3, [sp, #0]
   2442a:	2300      	movs	r3, #0
   2442c:	f852 2c48 	ldr.w	r2, [r2, #-72]
   24430:	f104 0144 	add.w	r1, r4, #68	; 0x44
   24434:	4628      	mov	r0, r5
   24436:	f7ff fef8 	bl	2422a <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   2443a:	4621      	mov	r1, r4
   2443c:	4628      	mov	r0, r5
   2443e:	f7ff fe2f 	bl	240a0 <EccPoint_isZero>
   24442:	b910      	cbnz	r0, 2444a <EccPoint_compute_public_key+0x50>
		return 0;
	}
	return 1;
   24444:	2001      	movs	r0, #1
}
   24446:	b015      	add	sp, #84	; 0x54
   24448:	bd30      	pop	{r4, r5, pc}
		return 0;
   2444a:	2000      	movs	r0, #0
   2444c:	e7fb      	b.n	24446 <EccPoint_compute_public_key+0x4c>

0002444e <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   2444e:	b430      	push	{r4, r5}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   24450:	2400      	movs	r4, #0
   24452:	428c      	cmp	r4, r1
   24454:	da0d      	bge.n	24472 <uECC_vli_nativeToBytes+0x24>
		unsigned b = num_bytes - 1 - i;
   24456:	1b0b      	subs	r3, r1, r4
   24458:	3b01      	subs	r3, #1
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   2445a:	f023 0503 	bic.w	r5, r3, #3
   2445e:	5955      	ldr	r5, [r2, r5]
   24460:	f003 0303 	and.w	r3, r3, #3
   24464:	00db      	lsls	r3, r3, #3
   24466:	fa25 f303 	lsr.w	r3, r5, r3
   2446a:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   2446c:	3401      	adds	r4, #1
   2446e:	b264      	sxtb	r4, r4
   24470:	e7ef      	b.n	24452 <uECC_vli_nativeToBytes+0x4>
	}
}
   24472:	bc30      	pop	{r4, r5}
   24474:	4770      	bx	lr

00024476 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   24476:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24478:	4606      	mov	r6, r0
   2447a:	460f      	mov	r7, r1
   2447c:	4615      	mov	r5, r2
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   2447e:	1cd1      	adds	r1, r2, #3
   24480:	d417      	bmi.n	244b2 <uECC_vli_bytesToNative+0x3c>
   24482:	f341 0187 	sbfx	r1, r1, #2, #8
   24486:	4630      	mov	r0, r6
   24488:	f7ff fa46 	bl	23918 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   2448c:	2400      	movs	r4, #0
   2448e:	42ac      	cmp	r4, r5
   24490:	da11      	bge.n	244b6 <uECC_vli_bytesToNative+0x40>
		unsigned b = num_bytes - 1 - i;
   24492:	1b2b      	subs	r3, r5, r4
   24494:	3b01      	subs	r3, #1
		native[b / uECC_WORD_SIZE] |=
   24496:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   2449a:	5d3a      	ldrb	r2, [r7, r4]
   2449c:	f003 0303 	and.w	r3, r3, #3
   244a0:	00db      	lsls	r3, r3, #3
   244a2:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   244a6:	5872      	ldr	r2, [r6, r1]
   244a8:	431a      	orrs	r2, r3
   244aa:	5072      	str	r2, [r6, r1]
	for (i = 0; i < num_bytes; ++i) {
   244ac:	3401      	adds	r4, #1
   244ae:	b264      	sxtb	r4, r4
   244b0:	e7ed      	b.n	2448e <uECC_vli_bytesToNative+0x18>
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   244b2:	3103      	adds	r1, #3
   244b4:	e7e5      	b.n	24482 <uECC_vli_bytesToNative+0xc>
  	}
}
   244b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000244b8 <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   244b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   244bc:	b090      	sub	sp, #64	; 0x40
   244be:	4680      	mov	r8, r0
   244c0:	460c      	mov	r4, r1
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   244c2:	f991 5000 	ldrsb.w	r5, [r1]

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   244c6:	f7ff fdeb 	bl	240a0 <EccPoint_isZero>
   244ca:	bb20      	cbnz	r0, 24516 <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   244cc:	1d26      	adds	r6, r4, #4
   244ce:	462a      	mov	r2, r5
   244d0:	4641      	mov	r1, r8
   244d2:	4630      	mov	r0, r6
   244d4:	f7ff fa71 	bl	239ba <uECC_vli_cmp_unsafe>
   244d8:	2801      	cmp	r0, #1
   244da:	d11f      	bne.n	2451c <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   244dc:	eb08 0785 	add.w	r7, r8, r5, lsl #2
   244e0:	462a      	mov	r2, r5
   244e2:	4639      	mov	r1, r7
   244e4:	4630      	mov	r0, r6
   244e6:	f7ff fa68 	bl	239ba <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   244ea:	2801      	cmp	r0, #1
   244ec:	d119      	bne.n	24522 <uECC_valid_point+0x6a>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   244ee:	4622      	mov	r2, r4
   244f0:	4639      	mov	r1, r7
   244f2:	a808      	add	r0, sp, #32
   244f4:	f7ff fbcb 	bl	23c8e <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   244f8:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   244fc:	4622      	mov	r2, r4
   244fe:	4641      	mov	r1, r8
   24500:	4668      	mov	r0, sp
   24502:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   24504:	462a      	mov	r2, r5
   24506:	4669      	mov	r1, sp
   24508:	a808      	add	r0, sp, #32
   2450a:	f7ff fa70 	bl	239ee <uECC_vli_equal>
   2450e:	b958      	cbnz	r0, 24528 <uECC_valid_point+0x70>
		return -3;

	return 0;
}
   24510:	b010      	add	sp, #64	; 0x40
   24512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   24516:	f04f 30ff 	mov.w	r0, #4294967295
   2451a:	e7f9      	b.n	24510 <uECC_valid_point+0x58>
		return -2;
   2451c:	f06f 0001 	mvn.w	r0, #1
   24520:	e7f6      	b.n	24510 <uECC_valid_point+0x58>
   24522:	f06f 0001 	mvn.w	r0, #1
   24526:	e7f3      	b.n	24510 <uECC_valid_point+0x58>
		return -3;
   24528:	f06f 0002 	mvn.w	r0, #2
   2452c:	e7f0      	b.n	24510 <uECC_valid_point+0x58>

0002452e <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   2452e:	b530      	push	{r4, r5, lr}
   24530:	b091      	sub	sp, #68	; 0x44
   24532:	4605      	mov	r5, r0
   24534:	460c      	mov	r4, r1

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   24536:	f991 2001 	ldrsb.w	r2, [r1, #1]
   2453a:	4601      	mov	r1, r0
   2453c:	4668      	mov	r0, sp
   2453e:	f7ff ff9a 	bl	24476 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   24542:	f994 0000 	ldrsb.w	r0, [r4]
	public_key + curve->num_bytes,
   24546:	f994 2001 	ldrsb.w	r2, [r4, #1]
	uECC_vli_bytesToNative(
   2454a:	18a9      	adds	r1, r5, r2
   2454c:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   24550:	f7ff ff91 	bl	24476 <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   24554:	2210      	movs	r2, #16
   24556:	f104 0144 	add.w	r1, r4, #68	; 0x44
   2455a:	4668      	mov	r0, sp
   2455c:	f7ff fa2d 	bl	239ba <uECC_vli_cmp_unsafe>
   24560:	b128      	cbz	r0, 2456e <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   24562:	4621      	mov	r1, r4
   24564:	4668      	mov	r0, sp
   24566:	f7ff ffa7 	bl	244b8 <uECC_valid_point>
}
   2456a:	b011      	add	sp, #68	; 0x44
   2456c:	bd30      	pop	{r4, r5, pc}
		return -4;
   2456e:	f06f 0003 	mvn.w	r0, #3
   24572:	e7fa      	b.n	2456a <uECC_valid_public_key+0x3c>

00024574 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   24574:	b410      	push	{r4}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
   24576:	460b      	mov	r3, r1

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   24578:	f913 2b0f 	ldrsb.w	r2, [r3], #15
   2457c:	2a00      	cmp	r2, #0
   2457e:	db03      	blt.n	24588 <gf_double+0x14>
   24580:	2400      	movs	r4, #0

	out += (TC_AES_BLOCK_SIZE - 1);
   24582:	f100 020f 	add.w	r2, r0, #15
   24586:	e004      	b.n	24592 <gf_double+0x1e>
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   24588:	2487      	movs	r4, #135	; 0x87
   2458a:	e7fa      	b.n	24582 <gf_double+0xe>
	for (;;) {
		*out-- = (*x << 1) ^ carry;
		if (x == in) {
			break;
		}
		carry = *x-- >> 7;
   2458c:	f813 0901 	ldrb.w	r0, [r3], #-1
   24590:	09c4      	lsrs	r4, r0, #7
		*out-- = (*x << 1) ^ carry;
   24592:	7818      	ldrb	r0, [r3, #0]
   24594:	ea84 0040 	eor.w	r0, r4, r0, lsl #1
   24598:	f802 0901 	strb.w	r0, [r2], #-1
		if (x == in) {
   2459c:	428b      	cmp	r3, r1
   2459e:	d1f5      	bne.n	2458c <gf_double+0x18>
	}
}
   245a0:	bc10      	pop	{r4}
   245a2:	4770      	bx	lr

000245a4 <tc_cmac_erase>:
	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
	if (s == (TCCmacState_t) 0) {
   245a4:	b130      	cbz	r0, 245b4 <tc_cmac_erase+0x10>
{
   245a6:	b508      	push	{r3, lr}
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   245a8:	2258      	movs	r2, #88	; 0x58
   245aa:	2100      	movs	r1, #0
   245ac:	f7ff f864 	bl	23678 <_set>

	return TC_CRYPTO_SUCCESS;
   245b0:	2001      	movs	r0, #1
}
   245b2:	bd08      	pop	{r3, pc}
		return TC_CRYPTO_FAIL;
   245b4:	2000      	movs	r0, #0
}
   245b6:	4770      	bx	lr

000245b8 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   245b8:	b1a0      	cbz	r0, 245e4 <tc_cmac_init+0x2c>
{
   245ba:	b510      	push	{r4, lr}
   245bc:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   245be:	2210      	movs	r2, #16
   245c0:	2100      	movs	r1, #0
   245c2:	f7ff f859 	bl	23678 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   245c6:	2210      	movs	r2, #16
   245c8:	2100      	movs	r1, #0
   245ca:	f104 0030 	add.w	r0, r4, #48	; 0x30
   245ce:	f7ff f853 	bl	23678 <_set>
	s->leftover_offset = 0;
   245d2:	2300      	movs	r3, #0
   245d4:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   245d6:	2200      	movs	r2, #0
   245d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   245dc:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
   245e0:	2001      	movs	r0, #1
}
   245e2:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
   245e4:	2000      	movs	r0, #0
}
   245e6:	4770      	bx	lr

000245e8 <tc_cmac_setup>:
	if (s == (TCCmacState_t) 0 ||
   245e8:	b338      	cbz	r0, 2463a <tc_cmac_setup+0x52>
{
   245ea:	b570      	push	{r4, r5, r6, lr}
   245ec:	460d      	mov	r5, r1
   245ee:	4616      	mov	r6, r2
   245f0:	4604      	mov	r4, r0
	if (s == (TCCmacState_t) 0 ||
   245f2:	b321      	cbz	r1, 2463e <tc_cmac_setup+0x56>
	_set(s, 0, sizeof(*s));
   245f4:	2258      	movs	r2, #88	; 0x58
   245f6:	2100      	movs	r1, #0
   245f8:	f7ff f83e 	bl	23678 <_set>
	s->sched = sched;
   245fc:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   245fe:	4629      	mov	r1, r5
   24600:	4630      	mov	r0, r6
   24602:	f7ee fb03 	bl	12c0c <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   24606:	2210      	movs	r2, #16
   24608:	2100      	movs	r1, #0
   2460a:	4620      	mov	r0, r4
   2460c:	f7ff f834 	bl	23678 <_set>
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   24610:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   24612:	4621      	mov	r1, r4
   24614:	4620      	mov	r0, r4
   24616:	f7ee fb57 	bl	12cc8 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   2461a:	f104 0510 	add.w	r5, r4, #16
   2461e:	4621      	mov	r1, r4
   24620:	4628      	mov	r0, r5
   24622:	f7ff ffa7 	bl	24574 <gf_double>
	gf_double (s->K2, s->K1);
   24626:	4629      	mov	r1, r5
   24628:	f104 0020 	add.w	r0, r4, #32
   2462c:	f7ff ffa2 	bl	24574 <gf_double>
	tc_cmac_init(s);
   24630:	4620      	mov	r0, r4
   24632:	f7ff ffc1 	bl	245b8 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   24636:	2001      	movs	r0, #1
}
   24638:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2463a:	2000      	movs	r0, #0
}
   2463c:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   2463e:	2000      	movs	r0, #0
   24640:	e7fa      	b.n	24638 <tc_cmac_setup+0x50>

00024642 <tc_cmac_update>:
int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   24642:	2800      	cmp	r0, #0
   24644:	d062      	beq.n	2470c <tc_cmac_update+0xca>
{
   24646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2464a:	460e      	mov	r6, r1
   2464c:	4617      	mov	r7, r2
   2464e:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   24650:	2a00      	cmp	r2, #0
   24652:	d05d      	beq.n	24710 <tc_cmac_update+0xce>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   24654:	2900      	cmp	r1, #0
   24656:	d05e      	beq.n	24716 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   24658:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   2465c:	ea50 0301 	orrs.w	r3, r0, r1
   24660:	d05b      	beq.n	2471a <tc_cmac_update+0xd8>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   24662:	f110 32ff 	adds.w	r2, r0, #4294967295
   24666:	f141 33ff 	adc.w	r3, r1, #4294967295
   2466a:	6522      	str	r2, [r4, #80]	; 0x50
   2466c:	6563      	str	r3, [r4, #84]	; 0x54

	if (s->leftover_offset > 0) {
   2466e:	6c65      	ldr	r5, [r4, #68]	; 0x44
   24670:	b3a5      	cbz	r5, 246dc <tc_cmac_update+0x9a>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   24672:	f1c5 0810 	rsb	r8, r5, #16

		if (data_length < remaining_space) {
   24676:	4547      	cmp	r7, r8
   24678:	d30d      	bcc.n	24696 <tc_cmac_update+0x54>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
			s->leftover_offset += data_length;
			return TC_CRYPTO_SUCCESS;
		}
		/* leftover block is now full; encrypt it first */
		_copy(&s->leftover[s->leftover_offset],
   2467a:	f105 0030 	add.w	r0, r5, #48	; 0x30
   2467e:	4643      	mov	r3, r8
   24680:	4632      	mov	r2, r6
   24682:	4641      	mov	r1, r8
   24684:	4420      	add	r0, r4
   24686:	f7fe ffea 	bl	2365e <_copy>
		      remaining_space,
		      data,
		      remaining_space);
		data_length -= remaining_space;
   2468a:	3d10      	subs	r5, #16
   2468c:	442f      	add	r7, r5
		data += remaining_space;
   2468e:	4446      	add	r6, r8
		s->leftover_offset = 0;
   24690:	2300      	movs	r3, #0
   24692:	6463      	str	r3, [r4, #68]	; 0x44

		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24694:	e013      	b.n	246be <tc_cmac_update+0x7c>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   24696:	f105 0030 	add.w	r0, r5, #48	; 0x30
   2469a:	463b      	mov	r3, r7
   2469c:	4632      	mov	r2, r6
   2469e:	4639      	mov	r1, r7
   246a0:	4420      	add	r0, r4
   246a2:	f7fe ffdc 	bl	2365e <_copy>
			s->leftover_offset += data_length;
   246a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
   246a8:	443b      	add	r3, r7
   246aa:	6463      	str	r3, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   246ac:	2001      	movs	r0, #1
   246ae:	e030      	b.n	24712 <tc_cmac_update+0xd0>
			s->iv[i] ^= s->leftover[i];
   246b0:	18e2      	adds	r2, r4, r3
   246b2:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   246b6:	5ce1      	ldrb	r1, [r4, r3]
   246b8:	404a      	eors	r2, r1
   246ba:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   246bc:	3301      	adds	r3, #1
   246be:	2b0f      	cmp	r3, #15
   246c0:	d9f6      	bls.n	246b0 <tc_cmac_update+0x6e>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   246c2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   246c4:	4621      	mov	r1, r4
   246c6:	4620      	mov	r0, r4
   246c8:	f7ee fafe 	bl	12cc8 <tc_aes_encrypt>
   246cc:	e006      	b.n	246dc <tc_cmac_update+0x9a>
	/* CBC encrypt each (except the last) of the data blocks */
	while (data_length > TC_AES_BLOCK_SIZE) {
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
			s->iv[i] ^= data[i];
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   246ce:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   246d0:	4621      	mov	r1, r4
   246d2:	4620      	mov	r0, r4
   246d4:	f7ee faf8 	bl	12cc8 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   246d8:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   246da:	3f10      	subs	r7, #16
	while (data_length > TC_AES_BLOCK_SIZE) {
   246dc:	2f10      	cmp	r7, #16
   246de:	d908      	bls.n	246f2 <tc_cmac_update+0xb0>
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   246e0:	2300      	movs	r3, #0
   246e2:	2b0f      	cmp	r3, #15
   246e4:	d8f3      	bhi.n	246ce <tc_cmac_update+0x8c>
			s->iv[i] ^= data[i];
   246e6:	5cf0      	ldrb	r0, [r6, r3]
   246e8:	5ce5      	ldrb	r5, [r4, r3]
   246ea:	4068      	eors	r0, r5
   246ec:	54e0      	strb	r0, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   246ee:	3301      	adds	r3, #1
   246f0:	e7f7      	b.n	246e2 <tc_cmac_update+0xa0>
	}

	if (data_length > 0) {
   246f2:	b90f      	cbnz	r7, 246f8 <tc_cmac_update+0xb6>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   246f4:	2001      	movs	r0, #1
   246f6:	e00c      	b.n	24712 <tc_cmac_update+0xd0>
		_copy(s->leftover, data_length, data, data_length);
   246f8:	463b      	mov	r3, r7
   246fa:	4632      	mov	r2, r6
   246fc:	4639      	mov	r1, r7
   246fe:	f104 0030 	add.w	r0, r4, #48	; 0x30
   24702:	f7fe ffac 	bl	2365e <_copy>
		s->leftover_offset = data_length;
   24706:	6467      	str	r7, [r4, #68]	; 0x44
	return TC_CRYPTO_SUCCESS;
   24708:	2001      	movs	r0, #1
   2470a:	e002      	b.n	24712 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
   2470c:	2000      	movs	r0, #0
}
   2470e:	4770      	bx	lr
		return  TC_CRYPTO_SUCCESS;
   24710:	2001      	movs	r0, #1
}
   24712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   24716:	2000      	movs	r0, #0
   24718:	e7fb      	b.n	24712 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
   2471a:	2000      	movs	r0, #0
   2471c:	e7f9      	b.n	24712 <tc_cmac_update+0xd0>

0002471e <tc_cmac_final>:
{
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2471e:	b370      	cbz	r0, 2477e <tc_cmac_final+0x60>
{
   24720:	b538      	push	{r3, r4, r5, lr}
   24722:	460c      	mov	r4, r1
   24724:	4605      	mov	r5, r0
	if (tag == (uint8_t *) 0 ||
   24726:	b361      	cbz	r1, 24782 <tc_cmac_final+0x64>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   24728:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   2472a:	2a10      	cmp	r2, #16
   2472c:	d10d      	bne.n	2474a <tc_cmac_final+0x2c>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   2472e:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24730:	2300      	movs	r3, #0
   24732:	2b0f      	cmp	r3, #15
   24734:	d819      	bhi.n	2476a <tc_cmac_final+0x4c>
		s->iv[i] ^= s->leftover[i] ^ k[i];
   24736:	18e2      	adds	r2, r4, r3
   24738:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   2473c:	5cc8      	ldrb	r0, [r1, r3]
   2473e:	4050      	eors	r0, r2
   24740:	5ce2      	ldrb	r2, [r4, r3]
   24742:	4042      	eors	r2, r0
   24744:	54e2      	strb	r2, [r4, r3]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24746:	3301      	adds	r3, #1
   24748:	e7f3      	b.n	24732 <tc_cmac_final+0x14>
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   2474a:	f102 0030 	add.w	r0, r2, #48	; 0x30
   2474e:	f1c2 0210 	rsb	r2, r2, #16
   24752:	2100      	movs	r1, #0
   24754:	4420      	add	r0, r4
   24756:	f7fe ff8f 	bl	23678 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2475a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2475c:	4423      	add	r3, r4
   2475e:	2280      	movs	r2, #128	; 0x80
   24760:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   24764:	f104 0120 	add.w	r1, r4, #32
   24768:	e7e2      	b.n	24730 <tc_cmac_final+0x12>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   2476a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2476c:	4621      	mov	r1, r4
   2476e:	4628      	mov	r0, r5
   24770:	f7ee faaa 	bl	12cc8 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   24774:	4620      	mov	r0, r4
   24776:	f7ff ff15 	bl	245a4 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   2477a:	2001      	movs	r0, #1
}
   2477c:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   2477e:	2000      	movs	r0, #0
}
   24780:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   24782:	2000      	movs	r0, #0
   24784:	e7fa      	b.n	2477c <tc_cmac_final+0x5e>

00024786 <z_irq_spurious>:
{
   24786:	b508      	push	{r3, lr}
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   24788:	2100      	movs	r1, #0
   2478a:	2001      	movs	r0, #1
   2478c:	f000 f801 	bl	24792 <z_arm_fatal_error>
}
   24790:	bd08      	pop	{r3, pc}

00024792 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   24792:	b538      	push	{r3, r4, r5, lr}
   24794:	4604      	mov	r4, r0

	if (esf != NULL) {
   24796:	460d      	mov	r5, r1
   24798:	b111      	cbz	r1, 247a0 <z_arm_fatal_error+0xe>
		esf_dump(esf);
   2479a:	4608      	mov	r0, r1
   2479c:	f7ee ff72 	bl	13684 <esf_dump>
	}
	z_fatal_error(reason, esf);
   247a0:	4629      	mov	r1, r5
   247a2:	4620      	mov	r0, r4
   247a4:	f7fa fe38 	bl	1f418 <z_fatal_error>
}
   247a8:	bd38      	pop	{r3, r4, r5, pc}

000247aa <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   247aa:	b508      	push	{r3, lr}
   247ac:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   247ae:	6800      	ldr	r0, [r0, #0]
   247b0:	f7ff ffef 	bl	24792 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   247b4:	bd08      	pop	{r3, pc}

000247b6 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   247b6:	b508      	push	{r3, lr}
	handler();
   247b8:	f7ee ffb2 	bl	13720 <z_SysNmiOnReset>
	z_arm_int_exit();
   247bc:	f7ef fba8 	bl	13f10 <z_arm_exc_exit>
}
   247c0:	bd08      	pop	{r3, pc}

000247c2 <memory_fault_recoverable>:
}
   247c2:	2000      	movs	r0, #0
   247c4:	4770      	bx	lr

000247c6 <fault_handle>:
{
   247c6:	b508      	push	{r3, lr}
	*recoverable = false;
   247c8:	2300      	movs	r3, #0
   247ca:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   247cc:	1ecb      	subs	r3, r1, #3
   247ce:	2b09      	cmp	r3, #9
   247d0:	d81a      	bhi.n	24808 <fault_handle+0x42>
   247d2:	e8df f003 	tbb	[pc, r3]
   247d6:	0905      	.short	0x0905
   247d8:	1919110d 	.word	0x1919110d
   247dc:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
   247e0:	4611      	mov	r1, r2
   247e2:	f7ef fa97 	bl	13d14 <hard_fault>
}
   247e6:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   247e8:	2100      	movs	r1, #0
   247ea:	f7ef f9b1 	bl	13b50 <mem_manage_fault>
		break;
   247ee:	e7fa      	b.n	247e6 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
   247f0:	2100      	movs	r1, #0
   247f2:	f7ef f8d5 	bl	139a0 <bus_fault>
		break;
   247f6:	e7f6      	b.n	247e6 <fault_handle+0x20>
		reason = usage_fault(esf);
   247f8:	f7ef f806 	bl	13808 <usage_fault>
		break;
   247fc:	e7f3      	b.n	247e6 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
   247fe:	4611      	mov	r1, r2
   24800:	f7ef f8b4 	bl	1396c <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   24804:	2000      	movs	r0, #0
		break;
   24806:	e7ee      	b.n	247e6 <fault_handle+0x20>
		reserved_exception(esf, fault);
   24808:	f7ef faf4 	bl	13df4 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   2480c:	2000      	movs	r0, #0
	return reason;
   2480e:	e7ea      	b.n	247e6 <fault_handle+0x20>

00024810 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
   24810:	6843      	ldr	r3, [r0, #4]
   24812:	1e5a      	subs	r2, r3, #1
		&&
   24814:	4213      	tst	r3, r2
   24816:	d106      	bne.n	24826 <mpu_partition_is_valid+0x16>
		&&
   24818:	2b1f      	cmp	r3, #31
   2481a:	d906      	bls.n	2482a <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
   2481c:	6803      	ldr	r3, [r0, #0]
		&&
   2481e:	421a      	tst	r2, r3
   24820:	d005      	beq.n	2482e <mpu_partition_is_valid+0x1e>
   24822:	2000      	movs	r0, #0
   24824:	4770      	bx	lr
   24826:	2000      	movs	r0, #0
   24828:	4770      	bx	lr
   2482a:	2000      	movs	r0, #0
   2482c:	4770      	bx	lr
   2482e:	2001      	movs	r0, #1
}
   24830:	4770      	bx	lr

00024832 <mpu_configure_region>:
{
   24832:	b500      	push	{lr}
   24834:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   24836:	680b      	ldr	r3, [r1, #0]
   24838:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   2483a:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   2483c:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
   2483e:	2b20      	cmp	r3, #32
   24840:	d912      	bls.n	24868 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
   24842:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   24846:	d811      	bhi.n	2486c <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   24848:	3b01      	subs	r3, #1
   2484a:	fab3 f383 	clz	r3, r3
   2484e:	f1c3 031f 	rsb	r3, r3, #31
   24852:	005b      	lsls	r3, r3, #1
   24854:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   24858:	4313      	orrs	r3, r2
   2485a:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   2485c:	a901      	add	r1, sp, #4
   2485e:	f7ef fbff 	bl	14060 <region_allocate_and_init>
}
   24862:	b005      	add	sp, #20
   24864:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
   24868:	2308      	movs	r3, #8
   2486a:	e7f5      	b.n	24858 <mpu_configure_region+0x26>
		return REGION_4G;
   2486c:	233e      	movs	r3, #62	; 0x3e
   2486e:	e7f3      	b.n	24858 <mpu_configure_region+0x26>

00024870 <arm_core_mpu_configure_static_mpu_regions>:
{
   24870:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   24872:	f7ef fc57 	bl	14124 <mpu_configure_static_mpu_regions>
}
   24876:	bd08      	pop	{r3, pc}

00024878 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   24878:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   2487a:	f7ef fc5d 	bl	14138 <mpu_configure_dynamic_mpu_regions>
}
   2487e:	bd08      	pop	{r3, pc}

00024880 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   24880:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24884:	4606      	mov	r6, r0
   24886:	460f      	mov	r7, r1
	register const char *s = nptr;
   24888:	4604      	mov	r4, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   2488a:	4620      	mov	r0, r4
   2488c:	3401      	adds	r4, #1
   2488e:	7801      	ldrb	r1, [r0, #0]
   24890:	460b      	mov	r3, r1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   24892:	2920      	cmp	r1, #32
   24894:	d0f9      	beq.n	2488a <strtol+0xa>
   24896:	3909      	subs	r1, #9
   24898:	2904      	cmp	r1, #4
   2489a:	d9f6      	bls.n	2488a <strtol+0xa>
	} while (isspace(c));
	if (c == '-') {
   2489c:	2b2d      	cmp	r3, #45	; 0x2d
   2489e:	d019      	beq.n	248d4 <strtol+0x54>
		neg = 1;
		c = *s++;
	} else if (c == '+') {
   248a0:	2b2b      	cmp	r3, #43	; 0x2b
   248a2:	d01c      	beq.n	248de <strtol+0x5e>
	register int neg = 0, any, cutlim;
   248a4:	f04f 0e00 	mov.w	lr, #0
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   248a8:	b10a      	cbz	r2, 248ae <strtol+0x2e>
   248aa:	2a10      	cmp	r2, #16
   248ac:	d101      	bne.n	248b2 <strtol+0x32>
   248ae:	2b30      	cmp	r3, #48	; 0x30
   248b0:	d01a      	beq.n	248e8 <strtol+0x68>
		c = s[1];
		s += 2;
		base = 16;
	}

	if (base == 0) {
   248b2:	b912      	cbnz	r2, 248ba <strtol+0x3a>
		base = c == '0' ? 8 : 10;
   248b4:	2b30      	cmp	r3, #48	; 0x30
   248b6:	d020      	beq.n	248fa <strtol+0x7a>
   248b8:	220a      	movs	r2, #10
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   248ba:	f1be 0f00 	cmp.w	lr, #0
   248be:	d01e      	beq.n	248fe <strtol+0x7e>
   248c0:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
	cutlim = cutoff % (unsigned long)base;
   248c4:	4694      	mov	ip, r2
   248c6:	fbb8 f1f2 	udiv	r1, r8, r2
   248ca:	fb02 8911 	mls	r9, r2, r1, r8
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   248ce:	2500      	movs	r5, #0
   248d0:	4628      	mov	r0, r5
   248d2:	e034      	b.n	2493e <strtol+0xbe>
		c = *s++;
   248d4:	7823      	ldrb	r3, [r4, #0]
   248d6:	1c84      	adds	r4, r0, #2
		neg = 1;
   248d8:	f04f 0e01 	mov.w	lr, #1
   248dc:	e7e4      	b.n	248a8 <strtol+0x28>
		c = *s++;
   248de:	7823      	ldrb	r3, [r4, #0]
   248e0:	1c84      	adds	r4, r0, #2
	register int neg = 0, any, cutlim;
   248e2:	f04f 0e00 	mov.w	lr, #0
   248e6:	e7df      	b.n	248a8 <strtol+0x28>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   248e8:	7821      	ldrb	r1, [r4, #0]
   248ea:	2978      	cmp	r1, #120	; 0x78
   248ec:	d001      	beq.n	248f2 <strtol+0x72>
   248ee:	2958      	cmp	r1, #88	; 0x58
   248f0:	d1df      	bne.n	248b2 <strtol+0x32>
		c = s[1];
   248f2:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   248f4:	3402      	adds	r4, #2
		base = 16;
   248f6:	2210      	movs	r2, #16
   248f8:	e7db      	b.n	248b2 <strtol+0x32>
		base = c == '0' ? 8 : 10;
   248fa:	2208      	movs	r2, #8
   248fc:	e7dd      	b.n	248ba <strtol+0x3a>
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   248fe:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
   24902:	e7df      	b.n	248c4 <strtol+0x44>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   24904:	f043 0b20 	orr.w	fp, r3, #32
   24908:	f1ab 0b61 	sub.w	fp, fp, #97	; 0x61
		if (isdigit(c)) {
			c -= '0';
		} else if (isalpha(c)) {
   2490c:	f1bb 0f19 	cmp.w	fp, #25
   24910:	d829      	bhi.n	24966 <strtol+0xe6>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   24912:	f1a3 0a41 	sub.w	sl, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   24916:	f1ba 0f19 	cmp.w	sl, #25
   2491a:	d804      	bhi.n	24926 <strtol+0xa6>
   2491c:	f04f 0a37 	mov.w	sl, #55	; 0x37
   24920:	eba3 030a 	sub.w	r3, r3, sl
   24924:	e011      	b.n	2494a <strtol+0xca>
   24926:	f04f 0a57 	mov.w	sl, #87	; 0x57
   2492a:	e7f9      	b.n	24920 <strtol+0xa0>
			break;
		}
		if (c >= base) {
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   2492c:	454b      	cmp	r3, r9
   2492e:	dd13      	ble.n	24958 <strtol+0xd8>
			any = -1;
   24930:	f04f 35ff 	mov.w	r5, #4294967295
   24934:	e001      	b.n	2493a <strtol+0xba>
   24936:	f04f 35ff 	mov.w	r5, #4294967295
	for (acc = 0, any = 0;; c = *s++) {
   2493a:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   2493e:	f1a3 0b30 	sub.w	fp, r3, #48	; 0x30
		if (isdigit(c)) {
   24942:	f1bb 0f09 	cmp.w	fp, #9
   24946:	d8dd      	bhi.n	24904 <strtol+0x84>
			c -= '0';
   24948:	465b      	mov	r3, fp
		if (c >= base) {
   2494a:	429a      	cmp	r2, r3
   2494c:	dd0b      	ble.n	24966 <strtol+0xe6>
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   2494e:	2d00      	cmp	r5, #0
   24950:	dbf1      	blt.n	24936 <strtol+0xb6>
   24952:	4288      	cmp	r0, r1
   24954:	d804      	bhi.n	24960 <strtol+0xe0>
   24956:	d0e9      	beq.n	2492c <strtol+0xac>
		} else {
			any = 1;
			acc *= base;
			acc += c;
   24958:	fb00 300c 	mla	r0, r0, ip, r3
			any = 1;
   2495c:	2501      	movs	r5, #1
   2495e:	e7ec      	b.n	2493a <strtol+0xba>
			any = -1;
   24960:	f04f 35ff 	mov.w	r5, #4294967295
   24964:	e7e9      	b.n	2493a <strtol+0xba>
		}
	}

	if (any < 0) {
   24966:	2d00      	cmp	r5, #0
   24968:	db09      	blt.n	2497e <strtol+0xfe>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
	} else if (neg) {
   2496a:	f1be 0f00 	cmp.w	lr, #0
   2496e:	d000      	beq.n	24972 <strtol+0xf2>
		acc = -acc;
   24970:	4240      	negs	r0, r0
	}

	if (endptr != NULL) {
   24972:	b117      	cbz	r7, 2497a <strtol+0xfa>
		*endptr = (char *)(any ? s - 1 : nptr);
   24974:	b105      	cbz	r5, 24978 <strtol+0xf8>
   24976:	1e66      	subs	r6, r4, #1
   24978:	603e      	str	r6, [r7, #0]
	}
	return acc;
}
   2497a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   2497e:	f7fa fd15 	bl	1f3ac <z_impl_z_errno>
		errno = ERANGE;
   24982:	2322      	movs	r3, #34	; 0x22
   24984:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   24986:	4640      	mov	r0, r8
   24988:	e7f3      	b.n	24972 <strtol+0xf2>

0002498a <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   2498a:	4602      	mov	r2, r0
   2498c:	780b      	ldrb	r3, [r1, #0]
   2498e:	b11b      	cbz	r3, 24998 <strcpy+0xe>
		*d = *s;
   24990:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
   24994:	3101      	adds	r1, #1
   24996:	e7f9      	b.n	2498c <strcpy+0x2>
	}

	*d = '\0';
   24998:	7013      	strb	r3, [r2, #0]

	return dest;
}
   2499a:	4770      	bx	lr

0002499c <strncpy>:

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   2499c:	4603      	mov	r3, r0
   2499e:	b1a2      	cbz	r2, 249ca <strncpy+0x2e>
{
   249a0:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
   249a2:	780c      	ldrb	r4, [r1, #0]
   249a4:	b12c      	cbz	r4, 249b2 <strncpy+0x16>
		*d = *s;
   249a6:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
   249aa:	3101      	adds	r1, #1
		d++;
		n--;
   249ac:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
   249ae:	2a00      	cmp	r2, #0
   249b0:	d1f7      	bne.n	249a2 <strncpy+0x6>
	}

	while (n > 0) {
   249b2:	b122      	cbz	r2, 249be <strncpy+0x22>
		*d = '\0';
   249b4:	2100      	movs	r1, #0
   249b6:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
   249ba:	3a01      	subs	r2, #1
   249bc:	e7f9      	b.n	249b2 <strncpy+0x16>
	}

	return dest;
}
   249be:	bc10      	pop	{r4}
   249c0:	4770      	bx	lr
		*d = '\0';
   249c2:	2100      	movs	r1, #0
   249c4:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   249c8:	3a01      	subs	r2, #1
	while (n > 0) {
   249ca:	2a00      	cmp	r2, #0
   249cc:	d1f9      	bne.n	249c2 <strncpy+0x26>
   249ce:	4770      	bx	lr

000249d0 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   249d0:	4603      	mov	r3, r0
	size_t n = 0;
   249d2:	2000      	movs	r0, #0

	while (*s != '\0') {
   249d4:	781a      	ldrb	r2, [r3, #0]
   249d6:	b112      	cbz	r2, 249de <strlen+0xe>
		s++;
   249d8:	3301      	adds	r3, #1
		n++;
   249da:	3001      	adds	r0, #1
   249dc:	e7fa      	b.n	249d4 <strlen+0x4>
	}

	return n;
}
   249de:	4770      	bx	lr

000249e0 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   249e0:	4603      	mov	r3, r0
	size_t n = 0;
   249e2:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   249e4:	781a      	ldrb	r2, [r3, #0]
   249e6:	b122      	cbz	r2, 249f2 <strnlen+0x12>
   249e8:	4288      	cmp	r0, r1
   249ea:	d202      	bcs.n	249f2 <strnlen+0x12>
		s++;
   249ec:	3301      	adds	r3, #1
		n++;
   249ee:	3001      	adds	r0, #1
   249f0:	e7f8      	b.n	249e4 <strnlen+0x4>
	}

	return n;
}
   249f2:	4770      	bx	lr

000249f4 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   249f4:	7803      	ldrb	r3, [r0, #0]
   249f6:	780a      	ldrb	r2, [r1, #0]
   249f8:	4293      	cmp	r3, r2
   249fa:	d103      	bne.n	24a04 <strcmp+0x10>
   249fc:	b113      	cbz	r3, 24a04 <strcmp+0x10>
		s1++;
   249fe:	3001      	adds	r0, #1
		s2++;
   24a00:	3101      	adds	r1, #1
   24a02:	e7f7      	b.n	249f4 <strcmp>
	}

	return *s1 - *s2;
}
   24a04:	1a98      	subs	r0, r3, r2
   24a06:	4770      	bx	lr

00024a08 <strncmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   24a08:	b192      	cbz	r2, 24a30 <strncmp+0x28>
{
   24a0a:	b410      	push	{r4}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   24a0c:	7803      	ldrb	r3, [r0, #0]
   24a0e:	780c      	ldrb	r4, [r1, #0]
   24a10:	42a3      	cmp	r3, r4
   24a12:	d105      	bne.n	24a20 <strncmp+0x18>
   24a14:	b123      	cbz	r3, 24a20 <strncmp+0x18>
		s1++;
   24a16:	3001      	adds	r0, #1
		s2++;
   24a18:	3101      	adds	r1, #1
		n--;
   24a1a:	3a01      	subs	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   24a1c:	2a00      	cmp	r2, #0
   24a1e:	d1f5      	bne.n	24a0c <strncmp+0x4>
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   24a20:	b122      	cbz	r2, 24a2c <strncmp+0x24>
   24a22:	7800      	ldrb	r0, [r0, #0]
   24a24:	780b      	ldrb	r3, [r1, #0]
   24a26:	1ac0      	subs	r0, r0, r3
}
   24a28:	bc10      	pop	{r4}
   24a2a:	4770      	bx	lr
	return (n == 0) ? 0 : (*s1 - *s2);
   24a2c:	2000      	movs	r0, #0
   24a2e:	e7fb      	b.n	24a28 <strncmp+0x20>
   24a30:	b11a      	cbz	r2, 24a3a <strncmp+0x32>
   24a32:	7800      	ldrb	r0, [r0, #0]
   24a34:	780b      	ldrb	r3, [r1, #0]
   24a36:	1ac0      	subs	r0, r0, r3
   24a38:	4770      	bx	lr
   24a3a:	2000      	movs	r0, #0
}
   24a3c:	4770      	bx	lr

00024a3e <memcmp>:
int memcmp(const void *m1, const void *m2, size_t n)
{
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   24a3e:	b17a      	cbz	r2, 24a60 <memcmp+0x22>
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   24a40:	1e53      	subs	r3, r2, #1
   24a42:	d00f      	beq.n	24a64 <memcmp+0x26>
{
   24a44:	b410      	push	{r4}
	while ((--n > 0) && (*c1 == *c2)) {
   24a46:	7804      	ldrb	r4, [r0, #0]
   24a48:	780a      	ldrb	r2, [r1, #0]
   24a4a:	4294      	cmp	r4, r2
   24a4c:	d103      	bne.n	24a56 <memcmp+0x18>
		c1++;
   24a4e:	3001      	adds	r0, #1
		c2++;
   24a50:	3101      	adds	r1, #1
	while ((--n > 0) && (*c1 == *c2)) {
   24a52:	3b01      	subs	r3, #1
   24a54:	d1f7      	bne.n	24a46 <memcmp+0x8>
	}

	return *c1 - *c2;
   24a56:	7800      	ldrb	r0, [r0, #0]
   24a58:	780b      	ldrb	r3, [r1, #0]
   24a5a:	1ac0      	subs	r0, r0, r3
}
   24a5c:	bc10      	pop	{r4}
   24a5e:	4770      	bx	lr
		return 0;
   24a60:	2000      	movs	r0, #0
   24a62:	4770      	bx	lr
	return *c1 - *c2;
   24a64:	7800      	ldrb	r0, [r0, #0]
   24a66:	780b      	ldrb	r3, [r1, #0]
   24a68:	1ac0      	subs	r0, r0, r3
}
   24a6a:	4770      	bx	lr

00024a6c <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   24a6c:	b410      	push	{r4}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   24a6e:	ea80 0301 	eor.w	r3, r0, r1
   24a72:	f013 0f03 	tst.w	r3, #3
   24a76:	d001      	beq.n	24a7c <memcpy+0x10>
	unsigned char *d_byte = (unsigned char *)d;
   24a78:	4603      	mov	r3, r0
   24a7a:	e017      	b.n	24aac <memcpy+0x40>
   24a7c:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
   24a7e:	f013 0f03 	tst.w	r3, #3
   24a82:	d00b      	beq.n	24a9c <memcpy+0x30>
			if (n == 0) {
   24a84:	b1a2      	cbz	r2, 24ab0 <memcpy+0x44>
				return d;
			}
			*(d_byte++) = *(s_byte++);
   24a86:	f811 4b01 	ldrb.w	r4, [r1], #1
   24a8a:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   24a8e:	3a01      	subs	r2, #1
   24a90:	e7f5      	b.n	24a7e <memcpy+0x12>

		mem_word_t *d_word = (mem_word_t *)d_byte;
		const mem_word_t *s_word = (const mem_word_t *)s_byte;

		while (n >= sizeof(mem_word_t)) {
			*(d_word++) = *(s_word++);
   24a92:	f851 4b04 	ldr.w	r4, [r1], #4
   24a96:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
   24a9a:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
   24a9c:	2a03      	cmp	r2, #3
   24a9e:	d8f8      	bhi.n	24a92 <memcpy+0x26>
   24aa0:	e004      	b.n	24aac <memcpy+0x40>
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
   24aa2:	f811 4b01 	ldrb.w	r4, [r1], #1
   24aa6:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   24aaa:	3a01      	subs	r2, #1
	while (n > 0) {
   24aac:	2a00      	cmp	r2, #0
   24aae:	d1f8      	bne.n	24aa2 <memcpy+0x36>
	}

	return d;
}
   24ab0:	bc10      	pop	{r4}
   24ab2:	4770      	bx	lr

00024ab4 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   24ab4:	b410      	push	{r4}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   24ab6:	b2cc      	uxtb	r4, r1
	unsigned char *d_byte = (unsigned char *)buf;
   24ab8:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   24aba:	f013 0f03 	tst.w	r3, #3
   24abe:	d004      	beq.n	24aca <memset+0x16>
		if (n == 0) {
   24ac0:	b19a      	cbz	r2, 24aea <memset+0x36>
			return buf;
		}
		*(d_byte++) = c_byte;
   24ac2:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   24ac6:	3a01      	subs	r2, #1
   24ac8:	e7f7      	b.n	24aba <memset+0x6>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
   24aca:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
   24acc:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
   24ad0:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   24ad4:	2a03      	cmp	r2, #3
   24ad6:	d906      	bls.n	24ae6 <memset+0x32>
		*(d_word++) = c_word;
   24ad8:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
   24adc:	3a04      	subs	r2, #4
   24ade:	e7f9      	b.n	24ad4 <memset+0x20>
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
		*(d_byte++) = c_byte;
   24ae0:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   24ae4:	3a01      	subs	r2, #1
	while (n > 0) {
   24ae6:	2a00      	cmp	r2, #0
   24ae8:	d1fa      	bne.n	24ae0 <memset+0x2c>
	}

	return buf;
}
   24aea:	bc10      	pop	{r4}
   24aec:	4770      	bx	lr

00024aee <_stdout_hook_default>:
}
   24aee:	f04f 30ff 	mov.w	r0, #4294967295
   24af2:	4770      	bx	lr

00024af4 <z_platform_init>:

void z_platform_init(void)
{
   24af4:	b508      	push	{r3, lr}
	SystemInit();
   24af6:	f7fa fa03 	bl	1ef00 <SystemInit>
}
   24afa:	bd08      	pop	{r3, pc}

00024afc <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
void pm_power_state_set(struct pm_state_info info)
{
   24afc:	b084      	sub	sp, #16
   24afe:	ab04      	add	r3, sp, #16
   24b00:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   24b04:	f89d 3004 	ldrb.w	r3, [sp, #4]
   24b08:	2b06      	cmp	r3, #6
   24b0a:	d001      	beq.n	24b10 <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   24b0c:	b004      	add	sp, #16
   24b0e:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   24b10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   24b14:	2201      	movs	r2, #1
   24b16:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   24b1a:	f3bf 8f4f 	dsb	sy
        __WFE();
   24b1e:	bf20      	wfe
    while (true)
   24b20:	e7fd      	b.n	24b1e <pm_power_state_set+0x22>

00024b22 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   24b22:	b084      	sub	sp, #16
   24b24:	ab04      	add	r3, sp, #16
   24b26:	e903 0007 	stmdb	r3, {r0, r1, r2}
   24b2a:	2300      	movs	r3, #0
   24b2c:	f383 8811 	msr	BASEPRI, r3
   24b30:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   24b34:	b004      	add	sp, #16
   24b36:	4770      	bx	lr

00024b38 <internal_encrypt_le>:
}
#endif /* defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY) */

static int internal_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
			       uint8_t enc_data[16])
{
   24b38:	b508      	push	{r3, lr}
#if defined(CONFIG_BT_CTLR) && defined(CONFIG_BT_HOST_CRYPTO) && \
    defined(CONFIG_BT_CTLR_LE_ENC)
	ecb_encrypt(key, plaintext, enc_data, NULL);
	return 0;
#else
	return bt_encrypt_le(key, plaintext, enc_data);
   24b3a:	f004 f8b8 	bl	28cae <bt_encrypt_le>
#endif
}
   24b3e:	bd08      	pop	{r3, pc}

00024b40 <ah>:

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   24b40:	b530      	push	{r4, r5, lr}
   24b42:	b085      	sub	sp, #20
   24b44:	4604      	mov	r4, r0
   24b46:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   24b48:	2203      	movs	r2, #3
   24b4a:	4668      	mov	r0, sp
   24b4c:	f7ff ff8e 	bl	24a6c <memcpy>
	(void)memset(res + 3, 0, 13);
   24b50:	220d      	movs	r2, #13
   24b52:	2100      	movs	r1, #0
   24b54:	f10d 0003 	add.w	r0, sp, #3
   24b58:	f7ff ffac 	bl	24ab4 <memset>

	err = internal_encrypt_le(irk, res, res);
   24b5c:	466a      	mov	r2, sp
   24b5e:	4669      	mov	r1, sp
   24b60:	4620      	mov	r0, r4
   24b62:	f7ff ffe9 	bl	24b38 <internal_encrypt_le>
	if (err) {
   24b66:	4604      	mov	r4, r0
   24b68:	b110      	cbz	r0, 24b70 <ah+0x30>
	 * result of ah.
	 */
	memcpy(out, res, 3);

	return 0;
}
   24b6a:	4620      	mov	r0, r4
   24b6c:	b005      	add	sp, #20
   24b6e:	bd30      	pop	{r4, r5, pc}
	memcpy(out, res, 3);
   24b70:	2203      	movs	r2, #3
   24b72:	4669      	mov	r1, sp
   24b74:	4628      	mov	r0, r5
   24b76:	f7ff ff79 	bl	24a6c <memcpy>
	return 0;
   24b7a:	e7f6      	b.n	24b6a <ah+0x2a>

00024b7c <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   24b7c:	b510      	push	{r4, lr}
   24b7e:	b082      	sub	sp, #8
   24b80:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   24b82:	aa01      	add	r2, sp, #4
   24b84:	3103      	adds	r1, #3
   24b86:	f7ff ffdb 	bl	24b40 <ah>
	if (err) {
   24b8a:	b110      	cbz	r0, 24b92 <bt_rpa_irk_matches+0x16>
		return false;
   24b8c:	2000      	movs	r0, #0
	}

	return !memcmp(addr->val, hash, 3);
}
   24b8e:	b002      	add	sp, #8
   24b90:	bd10      	pop	{r4, pc}
	return !memcmp(addr->val, hash, 3);
   24b92:	2203      	movs	r2, #3
   24b94:	a901      	add	r1, sp, #4
   24b96:	4620      	mov	r0, r4
   24b98:	f7ff ff51 	bl	24a3e <memcmp>
   24b9c:	fab0 f080 	clz	r0, r0
   24ba0:	0940      	lsrs	r0, r0, #5
   24ba2:	e7f4      	b.n	24b8e <bt_rpa_irk_matches+0x12>

00024ba4 <clear_ecc_events>:
	cmd = (void *)(buf->data + sizeof(struct bt_hci_cmd_hdr));
   24ba4:	6883      	ldr	r3, [r0, #8]
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
   24ba6:	78da      	ldrb	r2, [r3, #3]
   24ba8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   24bac:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
   24bae:	791a      	ldrb	r2, [r3, #4]
   24bb0:	f022 0201 	bic.w	r2, r2, #1
   24bb4:	711a      	strb	r2, [r3, #4]
}
   24bb6:	4770      	bx	lr

00024bb8 <send_cmd_status>:
{
   24bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24bbc:	4606      	mov	r6, r0
   24bbe:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   24bc0:	f04f 32ff 	mov.w	r2, #4294967295
   24bc4:	f04f 33ff 	mov.w	r3, #4294967295
   24bc8:	2100      	movs	r1, #0
   24bca:	200f      	movs	r0, #15
   24bcc:	f7ef ffb8 	bl	14b40 <bt_buf_get_evt>
   24bd0:	4604      	mov	r4, r0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   24bd2:	2701      	movs	r7, #1
   24bd4:	7507      	strb	r7, [r0, #20]
	return net_buf_simple_add(&buf->b, len);
   24bd6:	f100 0808 	add.w	r8, r0, #8
   24bda:	2102      	movs	r1, #2
   24bdc:	4640      	mov	r0, r8
   24bde:	f003 fba8 	bl	28332 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   24be2:	230f      	movs	r3, #15
   24be4:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   24be6:	2104      	movs	r1, #4
   24be8:	7041      	strb	r1, [r0, #1]
   24bea:	4640      	mov	r0, r8
   24bec:	f003 fba1 	bl	28332 <net_buf_simple_add>
	evt->ncmd = 1U;
   24bf0:	7047      	strb	r7, [r0, #1]
	evt->opcode = sys_cpu_to_le16(opcode);
   24bf2:	8046      	strh	r6, [r0, #2]
	evt->status = status;
   24bf4:	7005      	strb	r5, [r0, #0]
		bt_recv(buf);
   24bf6:	4620      	mov	r0, r4
   24bf8:	f7f1 ff76 	bl	16ae8 <bt_recv>
}
   24bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00024c00 <le_gen_dhkey_v1>:
{
   24c00:	b538      	push	{r3, r4, r5, lr}
   24c02:	4604      	mov	r4, r0
	status = le_gen_dhkey(cmd->key, BT_HCI_LE_KEY_TYPE_GENERATED);
   24c04:	2100      	movs	r1, #0
   24c06:	6880      	ldr	r0, [r0, #8]
   24c08:	f7ef fbbc 	bl	14384 <le_gen_dhkey>
   24c0c:	4605      	mov	r5, r0
	net_buf_unref(buf);
   24c0e:	4620      	mov	r0, r4
   24c10:	f003 fb45 	bl	2829e <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
   24c14:	4629      	mov	r1, r5
   24c16:	f242 0026 	movw	r0, #8230	; 0x2026
   24c1a:	f7ff ffcd 	bl	24bb8 <send_cmd_status>
}
   24c1e:	bd38      	pop	{r3, r4, r5, pc}

00024c20 <le_gen_dhkey_v2>:
{
   24c20:	b538      	push	{r3, r4, r5, lr}
   24c22:	4604      	mov	r4, r0
	cmd = (void *)buf->data;
   24c24:	6880      	ldr	r0, [r0, #8]
	status = le_gen_dhkey(cmd->key, cmd->key_type);
   24c26:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   24c2a:	f7ef fbab 	bl	14384 <le_gen_dhkey>
   24c2e:	4605      	mov	r5, r0
	net_buf_unref(buf);
   24c30:	4620      	mov	r0, r4
   24c32:	f003 fb34 	bl	2829e <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
   24c36:	4629      	mov	r1, r5
   24c38:	f242 005e 	movw	r0, #8286	; 0x205e
   24c3c:	f7ff ffbc 	bl	24bb8 <send_cmd_status>
}
   24c40:	bd38      	pop	{r3, r4, r5, pc}

00024c42 <bt_hci_ecc_supported_commands>:
	supported_commands[34] |= BIT(1);
   24c42:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
	supported_commands[34] |= BIT(2);
   24c46:	f043 0306 	orr.w	r3, r3, #6
   24c4a:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	supported_commands[41] |= BIT(2);
   24c4e:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   24c52:	f043 0304 	orr.w	r3, r3, #4
   24c56:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
}
   24c5a:	4770      	bx	lr

00024c5c <default_CSPRNG>:
{
   24c5c:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   24c5e:	f7f9 fe51 	bl	1e904 <bt_rand>
}
   24c62:	fab0 f080 	clz	r0, r0
   24c66:	0940      	lsrs	r0, r0, #5
   24c68:	bd08      	pop	{r3, pc}

00024c6a <bt_settings_decode_key>:
{
   24c6a:	b570      	push	{r4, r5, r6, lr}
   24c6c:	4605      	mov	r5, r0
   24c6e:	460e      	mov	r6, r1
	if (settings_name_next(key, NULL) != 13) {
   24c70:	2100      	movs	r1, #0
   24c72:	f7fe fadb 	bl	2322c <settings_name_next>
   24c76:	280d      	cmp	r0, #13
   24c78:	d11b      	bne.n	24cb2 <bt_settings_decode_key+0x48>
	if (key[12] == '0') {
   24c7a:	7b2b      	ldrb	r3, [r5, #12]
   24c7c:	2b30      	cmp	r3, #48	; 0x30
   24c7e:	d013      	beq.n	24ca8 <bt_settings_decode_key+0x3e>
	} else if (key[12] == '1') {
   24c80:	2b31      	cmp	r3, #49	; 0x31
   24c82:	d119      	bne.n	24cb8 <bt_settings_decode_key+0x4e>
		addr->type = BT_ADDR_LE_RANDOM;
   24c84:	2301      	movs	r3, #1
   24c86:	7033      	strb	r3, [r6, #0]
{
   24c88:	2400      	movs	r4, #0
	for (uint8_t i = 0; i < 6; i++) {
   24c8a:	2c05      	cmp	r4, #5
   24c8c:	d80f      	bhi.n	24cae <bt_settings_decode_key+0x44>
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   24c8e:	f1c4 0205 	rsb	r2, r4, #5
   24c92:	4432      	add	r2, r6
   24c94:	2301      	movs	r3, #1
   24c96:	441a      	add	r2, r3
   24c98:	2102      	movs	r1, #2
   24c9a:	eb05 0044 	add.w	r0, r5, r4, lsl #1
   24c9e:	f7fc fbda 	bl	21456 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   24ca2:	3401      	adds	r4, #1
   24ca4:	b2e4      	uxtb	r4, r4
   24ca6:	e7f0      	b.n	24c8a <bt_settings_decode_key+0x20>
		addr->type = BT_ADDR_LE_PUBLIC;
   24ca8:	2300      	movs	r3, #0
   24caa:	7033      	strb	r3, [r6, #0]
   24cac:	e7ec      	b.n	24c88 <bt_settings_decode_key+0x1e>
	return 0;
   24cae:	2000      	movs	r0, #0
}
   24cb0:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   24cb2:	f06f 0015 	mvn.w	r0, #21
   24cb6:	e7fb      	b.n	24cb0 <bt_settings_decode_key+0x46>
		return -EINVAL;
   24cb8:	f06f 0015 	mvn.w	r0, #21
   24cbc:	e7f8      	b.n	24cb0 <bt_settings_decode_key+0x46>

00024cbe <uuid128_cmp>:

static int uuid128_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   24cbe:	b510      	push	{r4, lr}
   24cc0:	b08a      	sub	sp, #40	; 0x28
   24cc2:	460c      	mov	r4, r1
	struct bt_uuid_128 uuid1, uuid2;

	uuid_to_uuid128(u1, &uuid1);
   24cc4:	a905      	add	r1, sp, #20
   24cc6:	f7ef fed1 	bl	14a6c <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   24cca:	4669      	mov	r1, sp
   24ccc:	4620      	mov	r0, r4
   24cce:	f7ef fecd 	bl	14a6c <uuid_to_uuid128>

	return memcmp(uuid1.val, uuid2.val, 16);
   24cd2:	2210      	movs	r2, #16
   24cd4:	f10d 0101 	add.w	r1, sp, #1
   24cd8:	f10d 0015 	add.w	r0, sp, #21
   24cdc:	f7ff feaf 	bl	24a3e <memcmp>
}
   24ce0:	b00a      	add	sp, #40	; 0x28
   24ce2:	bd10      	pop	{r4, pc}

00024ce4 <bt_uuid_cmp>:

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   24ce4:	b508      	push	{r3, lr}
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   24ce6:	7803      	ldrb	r3, [r0, #0]
   24ce8:	780a      	ldrb	r2, [r1, #0]
   24cea:	4293      	cmp	r3, r2
   24cec:	d107      	bne.n	24cfe <bt_uuid_cmp+0x1a>
		return uuid128_cmp(u1, u2);
	}

	switch (u1->type) {
   24cee:	2b01      	cmp	r3, #1
   24cf0:	d00c      	beq.n	24d0c <bt_uuid_cmp+0x28>
   24cf2:	2b02      	cmp	r3, #2
   24cf4:	d00e      	beq.n	24d14 <bt_uuid_cmp+0x30>
   24cf6:	b12b      	cbz	r3, 24d04 <bt_uuid_cmp+0x20>
   24cf8:	f06f 0015 	mvn.w	r0, #21
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   24cfc:	bd08      	pop	{r3, pc}
		return uuid128_cmp(u1, u2);
   24cfe:	f7ff ffde 	bl	24cbe <uuid128_cmp>
   24d02:	e7fb      	b.n	24cfc <bt_uuid_cmp+0x18>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   24d04:	8840      	ldrh	r0, [r0, #2]
   24d06:	884b      	ldrh	r3, [r1, #2]
   24d08:	1ac0      	subs	r0, r0, r3
   24d0a:	e7f7      	b.n	24cfc <bt_uuid_cmp+0x18>
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   24d0c:	6840      	ldr	r0, [r0, #4]
   24d0e:	684b      	ldr	r3, [r1, #4]
   24d10:	1ac0      	subs	r0, r0, r3
   24d12:	e7f3      	b.n	24cfc <bt_uuid_cmp+0x18>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   24d14:	2210      	movs	r2, #16
   24d16:	3101      	adds	r1, #1
   24d18:	3001      	adds	r0, #1
   24d1a:	f7ff fe90 	bl	24a3e <memcmp>
   24d1e:	e7ed      	b.n	24cfc <bt_uuid_cmp+0x18>

00024d20 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
   24d20:	b538      	push	{r3, r4, r5, lr}
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   24d22:	2a04      	cmp	r2, #4
   24d24:	d00e      	beq.n	24d44 <bt_uuid_create+0x24>
   24d26:	2a10      	cmp	r2, #16
   24d28:	d01b      	beq.n	24d62 <bt_uuid_create+0x42>
   24d2a:	2a02      	cmp	r2, #2
   24d2c:	d001      	beq.n	24d32 <bt_uuid_create+0x12>
   24d2e:	2000      	movs	r0, #0
		break;
	default:
		return false;
	}
	return true;
}
   24d30:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_16;
   24d32:	2300      	movs	r3, #0
   24d34:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   24d36:	784a      	ldrb	r2, [r1, #1]
   24d38:	780b      	ldrb	r3, [r1, #0]
   24d3a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   24d3e:	8043      	strh	r3, [r0, #2]
	return true;
   24d40:	2001      	movs	r0, #1
		break;
   24d42:	e7f5      	b.n	24d30 <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_32;
   24d44:	2301      	movs	r3, #1
   24d46:	7003      	strb	r3, [r0, #0]
   24d48:	78cc      	ldrb	r4, [r1, #3]
   24d4a:	788a      	ldrb	r2, [r1, #2]
   24d4c:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
   24d50:	784d      	ldrb	r5, [r1, #1]
   24d52:	780a      	ldrb	r2, [r1, #0]
   24d54:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   24d58:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   24d5c:	6042      	str	r2, [r0, #4]
	return true;
   24d5e:	4618      	mov	r0, r3
		break;
   24d60:	e7e6      	b.n	24d30 <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_128;
   24d62:	2302      	movs	r3, #2
   24d64:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   24d68:	2210      	movs	r2, #16
   24d6a:	f7ff fe7f 	bl	24a6c <memcpy>
	return true;
   24d6e:	2001      	movs	r0, #1
		break;
   24d70:	e7de      	b.n	24d30 <bt_uuid_create+0x10>

00024d72 <bt_addr_le_create_static>:

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   24d72:	b510      	push	{r4, lr}
   24d74:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   24d76:	2301      	movs	r3, #1
   24d78:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   24d7c:	2106      	movs	r1, #6
   24d7e:	f7f9 fdc1 	bl	1e904 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   24d82:	b918      	cbnz	r0, 24d8c <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   24d84:	79a3      	ldrb	r3, [r4, #6]
   24d86:	f063 033f 	orn	r3, r3, #63	; 0x3f
   24d8a:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   24d8c:	bd10      	pop	{r4, pc}

00024d8e <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   24d8e:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   24d92:	b17b      	cbz	r3, 24db4 <update_sec_level+0x26>
   24d94:	7b5a      	ldrb	r2, [r3, #13]
   24d96:	f012 0f01 	tst.w	r2, #1
   24d9a:	d00b      	beq.n	24db4 <update_sec_level+0x26>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   24d9c:	f012 0f10 	tst.w	r2, #16
   24da0:	d002      	beq.n	24da8 <update_sec_level+0x1a>
		    conn->le.keys->enc_size == BT_SMP_MAX_ENC_KEY_SIZE) {
   24da2:	7b1b      	ldrb	r3, [r3, #12]
		if (conn->le.keys->flags & BT_KEYS_SC &&
   24da4:	2b10      	cmp	r3, #16
   24da6:	d002      	beq.n	24dae <update_sec_level+0x20>
			conn->sec_level = BT_SECURITY_L3;
   24da8:	2303      	movs	r3, #3
   24daa:	7243      	strb	r3, [r0, #9]
   24dac:	e004      	b.n	24db8 <update_sec_level+0x2a>
			conn->sec_level = BT_SECURITY_L4;
   24dae:	2304      	movs	r3, #4
   24db0:	7243      	strb	r3, [r0, #9]
   24db2:	e001      	b.n	24db8 <update_sec_level+0x2a>
		conn->sec_level = BT_SECURITY_L2;
   24db4:	2302      	movs	r3, #2
   24db6:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   24db8:	7a82      	ldrb	r2, [r0, #10]
   24dba:	7a40      	ldrb	r0, [r0, #9]
}
   24dbc:	4282      	cmp	r2, r0
   24dbe:	bf8c      	ite	hi
   24dc0:	2000      	movhi	r0, #0
   24dc2:	2001      	movls	r0, #1
   24dc4:	4770      	bx	lr

00024dc6 <unpair_remote>:
{
   24dc6:	b508      	push	{r3, lr}
   24dc8:	460b      	mov	r3, r1
	unpair(*id, &info->addr);
   24dca:	4601      	mov	r1, r0
   24dcc:	7818      	ldrb	r0, [r3, #0]
   24dce:	f7f0 f86b 	bl	14ea8 <unpair>
}
   24dd2:	bd08      	pop	{r3, pc}

00024dd4 <hci_disconn_complete_prio>:
{
   24dd4:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   24dd6:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   24dd8:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   24ddc:	781b      	ldrb	r3, [r3, #0]
   24dde:	b103      	cbz	r3, 24de2 <hci_disconn_complete_prio+0xe>
}
   24de0:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_handle(handle);
   24de2:	4620      	mov	r0, r4
   24de4:	f7f3 fbd0 	bl	18588 <bt_conn_lookup_handle>
	if (!conn) {
   24de8:	4605      	mov	r5, r0
   24dea:	b130      	cbz	r0, 24dfa <hci_disconn_complete_prio+0x26>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   24dec:	2101      	movs	r1, #1
   24dee:	f7f3 fbd5 	bl	1859c <bt_conn_set_state>
	bt_conn_unref(conn);
   24df2:	4628      	mov	r0, r5
   24df4:	f000 fd80 	bl	258f8 <bt_conn_unref>
   24df8:	e7f2      	b.n	24de0 <hci_disconn_complete_prio+0xc>
		conn_handle_disconnected(handle);
   24dfa:	4620      	mov	r0, r4
   24dfc:	f7ef fed2 	bl	14ba4 <conn_handle_disconnected>
		return;
   24e00:	e7ee      	b.n	24de0 <hci_disconn_complete_prio+0xc>

00024e02 <bt_hci_disconnect>:
{
   24e02:	b570      	push	{r4, r5, r6, lr}
   24e04:	4605      	mov	r5, r0
   24e06:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   24e08:	2103      	movs	r1, #3
   24e0a:	f240 4006 	movw	r0, #1030	; 0x406
   24e0e:	f7f0 fd13 	bl	15838 <bt_hci_cmd_create>
	if (!buf) {
   24e12:	b168      	cbz	r0, 24e30 <bt_hci_disconnect+0x2e>
   24e14:	4606      	mov	r6, r0
   24e16:	2103      	movs	r1, #3
   24e18:	3008      	adds	r0, #8
   24e1a:	f003 fa8a 	bl	28332 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   24e1e:	8005      	strh	r5, [r0, #0]
	disconn->reason = reason;
   24e20:	7084      	strb	r4, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   24e22:	2200      	movs	r2, #0
   24e24:	4631      	mov	r1, r6
   24e26:	f240 4006 	movw	r0, #1030	; 0x406
   24e2a:	f7f0 fd41 	bl	158b0 <bt_hci_cmd_send_sync>
}
   24e2e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   24e30:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24e34:	e7fb      	b.n	24e2e <bt_hci_disconnect+0x2c>

00024e36 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   24e36:	8802      	ldrh	r2, [r0, #0]
   24e38:	8843      	ldrh	r3, [r0, #2]
   24e3a:	429a      	cmp	r2, r3
   24e3c:	d819      	bhi.n	24e72 <bt_le_conn_params_valid+0x3c>
   24e3e:	2a05      	cmp	r2, #5
   24e40:	d919      	bls.n	24e76 <bt_le_conn_params_valid+0x40>
	    param->interval_min < 6 || param->interval_max > 3200) {
   24e42:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   24e46:	d818      	bhi.n	24e7a <bt_le_conn_params_valid+0x44>
	if (param->latency > 499) {
   24e48:	8881      	ldrh	r1, [r0, #4]
   24e4a:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
   24e4e:	d216      	bcs.n	24e7e <bt_le_conn_params_valid+0x48>
{
   24e50:	b410      	push	{r4}
	if (param->timeout < 10 || param->timeout > 3200 ||
   24e52:	88c0      	ldrh	r0, [r0, #6]
   24e54:	f1a0 020a 	sub.w	r2, r0, #10
   24e58:	b292      	uxth	r2, r2
   24e5a:	f640 4476 	movw	r4, #3190	; 0xc76
   24e5e:	42a2      	cmp	r2, r4
   24e60:	d80f      	bhi.n	24e82 <bt_le_conn_params_valid+0x4c>
	     ((1U + param->latency) * param->interval_max))) {
   24e62:	fb01 3303 	mla	r3, r1, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   24e66:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   24e6a:	d20c      	bcs.n	24e86 <bt_le_conn_params_valid+0x50>
	return true;
   24e6c:	2001      	movs	r0, #1
}
   24e6e:	bc10      	pop	{r4}
   24e70:	4770      	bx	lr
		return false;
   24e72:	2000      	movs	r0, #0
   24e74:	4770      	bx	lr
   24e76:	2000      	movs	r0, #0
   24e78:	4770      	bx	lr
   24e7a:	2000      	movs	r0, #0
   24e7c:	4770      	bx	lr
		return false;
   24e7e:	2000      	movs	r0, #0
}
   24e80:	4770      	bx	lr
		return false;
   24e82:	2000      	movs	r0, #0
   24e84:	e7f3      	b.n	24e6e <bt_le_conn_params_valid+0x38>
   24e86:	2000      	movs	r0, #0
   24e88:	e7f1      	b.n	24e6e <bt_le_conn_params_valid+0x38>

00024e8a <bt_security_err_get>:
	switch (hci_err) {
   24e8a:	2829      	cmp	r0, #41	; 0x29
   24e8c:	d81e      	bhi.n	24ecc <bt_security_err_get+0x42>
   24e8e:	e8df f000 	tbb	[pc, r0]
   24e92:	1d20      	.short	0x1d20
   24e94:	1f1d1d1d 	.word	0x1f1d1d1d
   24e98:	1d1d1d15 	.word	0x1d1d1d15
   24e9c:	1d1d1d1d 	.word	0x1d1d1d1d
   24ea0:	1d1d1d1d 	.word	0x1d1d1d1d
   24ea4:	1d1d1d1b 	.word	0x1d1d1d1b
   24ea8:	1d191d1d 	.word	0x1d191d1d
   24eac:	1d1d1d1d 	.word	0x1d1d1d1d
   24eb0:	1d1d1d1d 	.word	0x1d1d1d1d
   24eb4:	1d1d1d1d 	.word	0x1d1d1d1d
   24eb8:	171d1d1d 	.word	0x171d1d1d
		return BT_SECURITY_ERR_PIN_OR_KEY_MISSING;
   24ebc:	2002      	movs	r0, #2
   24ebe:	4770      	bx	lr
		return BT_SECURITY_ERR_PAIR_NOT_SUPPORTED;
   24ec0:	2005      	movs	r0, #5
   24ec2:	4770      	bx	lr
		return BT_SECURITY_ERR_PAIR_NOT_ALLOWED;
   24ec4:	2006      	movs	r0, #6
   24ec6:	4770      	bx	lr
		return BT_SECURITY_ERR_INVALID_PARAM;
   24ec8:	2007      	movs	r0, #7
   24eca:	4770      	bx	lr
		return BT_SECURITY_ERR_UNSPECIFIED;
   24ecc:	2008      	movs	r0, #8
   24ece:	4770      	bx	lr
		return BT_SECURITY_ERR_AUTH_FAIL;
   24ed0:	2001      	movs	r0, #1
}
   24ed2:	4770      	bx	lr

00024ed4 <bt_send>:
{
   24ed4:	b508      	push	{r3, lr}
		return bt_hci_ecc_send(buf);
   24ed6:	f7ef fbe1 	bl	1469c <bt_hci_ecc_send>
}
   24eda:	bd08      	pop	{r3, pc}

00024edc <bt_le_set_data_len>:
{
   24edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24ede:	4606      	mov	r6, r0
   24ee0:	460f      	mov	r7, r1
   24ee2:	4614      	mov	r4, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   24ee4:	2106      	movs	r1, #6
   24ee6:	f242 0022 	movw	r0, #8226	; 0x2022
   24eea:	f7f0 fca5 	bl	15838 <bt_hci_cmd_create>
	if (!buf) {
   24eee:	b170      	cbz	r0, 24f0e <bt_le_set_data_len+0x32>
   24ef0:	4605      	mov	r5, r0
   24ef2:	2106      	movs	r1, #6
   24ef4:	3008      	adds	r0, #8
   24ef6:	f003 fa1c 	bl	28332 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   24efa:	8833      	ldrh	r3, [r6, #0]
   24efc:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   24efe:	8047      	strh	r7, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   24f00:	8084      	strh	r4, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   24f02:	4629      	mov	r1, r5
   24f04:	f242 0022 	movw	r0, #8226	; 0x2022
   24f08:	f7f1 f91e 	bl	16148 <bt_hci_cmd_send>
}
   24f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   24f0e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24f12:	e7fb      	b.n	24f0c <bt_le_set_data_len+0x30>

00024f14 <bt_le_set_phy>:
{
   24f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24f18:	4607      	mov	r7, r0
   24f1a:	460e      	mov	r6, r1
   24f1c:	4615      	mov	r5, r2
   24f1e:	461c      	mov	r4, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   24f20:	2107      	movs	r1, #7
   24f22:	f242 0032 	movw	r0, #8242	; 0x2032
   24f26:	f7f0 fc87 	bl	15838 <bt_hci_cmd_create>
	if (!buf) {
   24f2a:	b1a0      	cbz	r0, 24f56 <bt_le_set_phy+0x42>
   24f2c:	4680      	mov	r8, r0
   24f2e:	2107      	movs	r1, #7
   24f30:	3008      	adds	r0, #8
   24f32:	f003 f9fe 	bl	28332 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   24f36:	883b      	ldrh	r3, [r7, #0]
   24f38:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   24f3a:	7086      	strb	r6, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   24f3c:	70c5      	strb	r5, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   24f3e:	7104      	strb	r4, [r0, #4]
	cp->phy_opts = phy_opts;
   24f40:	f89d 3018 	ldrb.w	r3, [sp, #24]
   24f44:	f8a0 3005 	strh.w	r3, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   24f48:	4641      	mov	r1, r8
   24f4a:	f242 0032 	movw	r0, #8242	; 0x2032
   24f4e:	f7f1 f8fb 	bl	16148 <bt_hci_cmd_send>
}
   24f52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   24f56:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24f5a:	e7fa      	b.n	24f52 <bt_le_set_phy+0x3e>

00024f5c <hci_le_read_remote_features>:
{
   24f5c:	b538      	push	{r3, r4, r5, lr}
   24f5e:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   24f60:	2102      	movs	r1, #2
   24f62:	f242 0016 	movw	r0, #8214	; 0x2016
   24f66:	f7f0 fc67 	bl	15838 <bt_hci_cmd_create>
	if (!buf) {
   24f6a:	b168      	cbz	r0, 24f88 <hci_le_read_remote_features+0x2c>
   24f6c:	4605      	mov	r5, r0
   24f6e:	2102      	movs	r1, #2
   24f70:	3008      	adds	r0, #8
   24f72:	f003 f9de 	bl	28332 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   24f76:	8823      	ldrh	r3, [r4, #0]
   24f78:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   24f7a:	4629      	mov	r1, r5
   24f7c:	f242 0016 	movw	r0, #8214	; 0x2016
   24f80:	f7f1 f8e2 	bl	16148 <bt_hci_cmd_send>
	return 0;
   24f84:	2000      	movs	r0, #0
}
   24f86:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   24f88:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24f8c:	e7fb      	b.n	24f86 <hci_le_read_remote_features+0x2a>

00024f8e <enh_conn_complete>:
{
   24f8e:	b508      	push	{r3, lr}
	bt_hci_le_enh_conn_complete(evt);
   24f90:	f7f1 f9a0 	bl	162d4 <bt_hci_le_enh_conn_complete>
}
   24f94:	bd08      	pop	{r3, pc}

00024f96 <le_enh_conn_complete>:
{
   24f96:	b508      	push	{r3, lr}
	enh_conn_complete((void *)buf->data);
   24f98:	6880      	ldr	r0, [r0, #8]
   24f9a:	f7ff fff8 	bl	24f8e <enh_conn_complete>
}
   24f9e:	bd08      	pop	{r3, pc}

00024fa0 <le_legacy_conn_complete>:
{
   24fa0:	b510      	push	{r4, lr}
   24fa2:	b08c      	sub	sp, #48	; 0x30
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   24fa4:	6881      	ldr	r1, [r0, #8]
	enh.status         = evt->status;
   24fa6:	780b      	ldrb	r3, [r1, #0]
   24fa8:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   24fac:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   24fb0:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   24fb4:	78cb      	ldrb	r3, [r1, #3]
   24fb6:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   24fba:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   24fbe:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   24fc2:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   24fc6:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   24fca:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   24fce:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   24fd2:	7c4b      	ldrb	r3, [r1, #17]
   24fd4:	f88d 301d 	strb.w	r3, [sp, #29]
	memcpy(dst, src, sizeof(*dst));
   24fd8:	2207      	movs	r2, #7
   24fda:	3104      	adds	r1, #4
   24fdc:	a801      	add	r0, sp, #4
   24fde:	f7ff fd45 	bl	24a6c <memcpy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   24fe2:	2400      	movs	r4, #0
   24fe4:	940a      	str	r4, [sp, #40]	; 0x28
   24fe6:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
	memcpy(dst, src, sizeof(*dst));
   24fea:	2206      	movs	r2, #6
   24fec:	a90a      	add	r1, sp, #40	; 0x28
   24fee:	f10d 000b 	add.w	r0, sp, #11
   24ff2:	f7ff fd3b 	bl	24a6c <memcpy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   24ff6:	9408      	str	r4, [sp, #32]
   24ff8:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
   24ffc:	2206      	movs	r2, #6
   24ffe:	a908      	add	r1, sp, #32
   25000:	f10d 0011 	add.w	r0, sp, #17
   25004:	f7ff fd32 	bl	24a6c <memcpy>
	enh_conn_complete(&enh);
   25008:	4668      	mov	r0, sp
   2500a:	f7ff ffc0 	bl	24f8e <enh_conn_complete>
}
   2500e:	b00c      	add	sp, #48	; 0x30
   25010:	bd10      	pop	{r4, pc}

00025012 <le_conn_param_req_reply>:
{
   25012:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25014:	4606      	mov	r6, r0
   25016:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   25018:	210e      	movs	r1, #14
   2501a:	f242 0020 	movw	r0, #8224	; 0x2020
   2501e:	f7f0 fc0b 	bl	15838 <bt_hci_cmd_create>
	if (!buf) {
   25022:	b1c0      	cbz	r0, 25056 <le_conn_param_req_reply+0x44>
   25024:	4607      	mov	r7, r0
   25026:	210e      	movs	r1, #14
   25028:	3008      	adds	r0, #8
   2502a:	f003 f982 	bl	28332 <net_buf_simple_add>
   2502e:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   25030:	220e      	movs	r2, #14
   25032:	2100      	movs	r1, #0
   25034:	f7ff fd3e 	bl	24ab4 <memset>
	cp->handle = sys_cpu_to_le16(handle);
   25038:	8026      	strh	r6, [r4, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   2503a:	882b      	ldrh	r3, [r5, #0]
   2503c:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   2503e:	886b      	ldrh	r3, [r5, #2]
   25040:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   25042:	88ab      	ldrh	r3, [r5, #4]
   25044:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   25046:	88eb      	ldrh	r3, [r5, #6]
   25048:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   2504a:	4639      	mov	r1, r7
   2504c:	f242 0020 	movw	r0, #8224	; 0x2020
   25050:	f7f1 f87a 	bl	16148 <bt_hci_cmd_send>
}
   25054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   25056:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2505a:	e7fb      	b.n	25054 <le_conn_param_req_reply+0x42>

0002505c <bt_addr_le_is_bonded>:

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   2505c:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   2505e:	f7f8 fcf7 	bl	1da50 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   25062:	b118      	cbz	r0, 2506c <bt_addr_le_is_bonded+0x10>
   25064:	89c3      	ldrh	r3, [r0, #14]
   25066:	b91b      	cbnz	r3, 25070 <bt_addr_le_is_bonded+0x14>
   25068:	2000      	movs	r0, #0
	} else {
		return false;
	}
}
   2506a:	bd08      	pop	{r3, pc}
		return keys && keys->keys;
   2506c:	2000      	movs	r0, #0
   2506e:	e7fc      	b.n	2506a <bt_addr_le_is_bonded+0xe>
   25070:	2001      	movs	r0, #1
   25072:	e7fa      	b.n	2506a <bt_addr_le_is_bonded+0xe>

00025074 <adv_unpause_enabled>:
{
   25074:	b508      	push	{r3, lr}
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   25076:	f100 0310 	add.w	r3, r0, #16
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2507a:	f3bf 8f5b 	dmb	ish
   2507e:	e853 2f00 	ldrex	r2, [r3]
   25082:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   25086:	e843 1c00 	strex	ip, r1, [r3]
   2508a:	f1bc 0f00 	cmp.w	ip, #0
   2508e:	d1f6      	bne.n	2507e <adv_unpause_enabled+0xa>
   25090:	f3bf 8f5b 	dmb	ish
   25094:	f412 5f00 	tst.w	r2, #8192	; 0x2000
   25098:	d100      	bne.n	2509c <adv_unpause_enabled+0x28>
}
   2509a:	bd08      	pop	{r3, pc}
		bt_le_adv_set_enable(adv, true);
   2509c:	2101      	movs	r1, #1
   2509e:	f000 f9e6 	bl	2546e <bt_le_adv_set_enable>
}
   250a2:	e7fa      	b.n	2509a <adv_unpause_enabled+0x26>

000250a4 <adv_pause_enabled>:
{
   250a4:	b508      	push	{r3, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   250a6:	f3bf 8f5b 	dmb	ish
   250aa:	6903      	ldr	r3, [r0, #16]
   250ac:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   250b0:	f013 0f40 	tst.w	r3, #64	; 0x40
   250b4:	d010      	beq.n	250d8 <adv_pause_enabled+0x34>
   250b6:	f100 0210 	add.w	r2, r0, #16
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   250ba:	f3bf 8f5b 	dmb	ish
   250be:	e852 3f00 	ldrex	r3, [r2]
   250c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   250c6:	e842 3100 	strex	r1, r3, [r2]
   250ca:	2900      	cmp	r1, #0
   250cc:	d1f7      	bne.n	250be <adv_pause_enabled+0x1a>
   250ce:	f3bf 8f5b 	dmb	ish
		bt_le_adv_set_enable(adv, false);
   250d2:	2100      	movs	r1, #0
   250d4:	f000 f9cb 	bl	2546e <bt_le_adv_set_enable>
}
   250d8:	bd08      	pop	{r3, pc}

000250da <hci_id_add>:
{
   250da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   250dc:	460e      	mov	r6, r1
   250de:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   250e0:	2127      	movs	r1, #39	; 0x27
   250e2:	f242 0027 	movw	r0, #8231	; 0x2027
   250e6:	f7f0 fba7 	bl	15838 <bt_hci_cmd_create>
	if (!buf) {
   250ea:	b1d8      	cbz	r0, 25124 <hci_id_add+0x4a>
   250ec:	4607      	mov	r7, r0
   250ee:	2127      	movs	r1, #39	; 0x27
   250f0:	3008      	adds	r0, #8
   250f2:	f003 f91e 	bl	28332 <net_buf_simple_add>
   250f6:	4604      	mov	r4, r0
	memcpy(dst, src, sizeof(*dst));
   250f8:	2207      	movs	r2, #7
   250fa:	4631      	mov	r1, r6
   250fc:	f7ff fcb6 	bl	24a6c <memcpy>
	memcpy(cp->peer_irk, peer_irk, 16);
   25100:	2210      	movs	r2, #16
   25102:	4629      	mov	r1, r5
   25104:	1de0      	adds	r0, r4, #7
   25106:	f7ff fcb1 	bl	24a6c <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   2510a:	2210      	movs	r2, #16
   2510c:	2100      	movs	r1, #0
   2510e:	f104 0017 	add.w	r0, r4, #23
   25112:	f7ff fccf 	bl	24ab4 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   25116:	2200      	movs	r2, #0
   25118:	4639      	mov	r1, r7
   2511a:	f242 0027 	movw	r0, #8231	; 0x2027
   2511e:	f7f0 fbc7 	bl	158b0 <bt_hci_cmd_send_sync>
}
   25122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   25124:	f06f 0068 	mvn.w	r0, #104	; 0x68
   25128:	e7fb      	b.n	25122 <hci_id_add+0x48>

0002512a <keys_add_id>:
{
   2512a:	b508      	push	{r3, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
   2512c:	7a03      	ldrb	r3, [r0, #8]
   2512e:	f013 0f04 	tst.w	r3, #4
   25132:	d100      	bne.n	25136 <keys_add_id+0xc>
}
   25134:	bd08      	pop	{r3, pc}
   25136:	4601      	mov	r1, r0
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   25138:	4602      	mov	r2, r0
   2513a:	f812 0b2a 	ldrb.w	r0, [r2], #42
   2513e:	3101      	adds	r1, #1
   25140:	f7ff ffcb 	bl	250da <hci_id_add>
}
   25144:	e7f6      	b.n	25134 <keys_add_id+0xa>

00025146 <hci_id_del>:
{
   25146:	b538      	push	{r3, r4, r5, lr}
   25148:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   2514a:	2107      	movs	r1, #7
   2514c:	f242 0028 	movw	r0, #8232	; 0x2028
   25150:	f7f0 fb72 	bl	15838 <bt_hci_cmd_create>
	if (!buf) {
   25154:	b178      	cbz	r0, 25176 <hci_id_del+0x30>
   25156:	4605      	mov	r5, r0
   25158:	2107      	movs	r1, #7
   2515a:	3008      	adds	r0, #8
   2515c:	f003 f8e9 	bl	28332 <net_buf_simple_add>
   25160:	2207      	movs	r2, #7
   25162:	4621      	mov	r1, r4
   25164:	f7ff fc82 	bl	24a6c <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   25168:	2200      	movs	r2, #0
   2516a:	4629      	mov	r1, r5
   2516c:	f242 0028 	movw	r0, #8232	; 0x2028
   25170:	f7f0 fb9e 	bl	158b0 <bt_hci_cmd_send_sync>
}
   25174:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   25176:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2517a:	e7fb      	b.n	25174 <hci_id_del+0x2e>

0002517c <addr_res_enable>:
{
   2517c:	b538      	push	{r3, r4, r5, lr}
   2517e:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   25180:	2101      	movs	r1, #1
   25182:	f242 002d 	movw	r0, #8237	; 0x202d
   25186:	f7f0 fb57 	bl	15838 <bt_hci_cmd_create>
	if (!buf) {
   2518a:	b158      	cbz	r0, 251a4 <addr_res_enable+0x28>
   2518c:	4605      	mov	r5, r0
	return net_buf_simple_add_u8(&buf->b, val);
   2518e:	4621      	mov	r1, r4
   25190:	3008      	adds	r0, #8
   25192:	f003 f8df 	bl	28354 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   25196:	2200      	movs	r2, #0
   25198:	4629      	mov	r1, r5
   2519a:	f242 002d 	movw	r0, #8237	; 0x202d
   2519e:	f7f0 fb87 	bl	158b0 <bt_hci_cmd_send_sync>
}
   251a2:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   251a4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   251a8:	e7fb      	b.n	251a2 <addr_res_enable+0x26>

000251aa <bt_lookup_id_addr>:
{
   251aa:	b510      	push	{r4, lr}
   251ac:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   251ae:	f7f8 fbe7 	bl	1d980 <bt_keys_find_irk>
		if (keys) {
   251b2:	b108      	cbz	r0, 251b8 <bt_lookup_id_addr+0xe>
			return &keys->addr;
   251b4:	3001      	adds	r0, #1
}
   251b6:	bd10      	pop	{r4, pc}
	return addr;
   251b8:	4620      	mov	r0, r4
   251ba:	e7fc      	b.n	251b6 <bt_lookup_id_addr+0xc>

000251bc <bt_id_set_adv_random_addr>:
{
   251bc:	b508      	push	{r3, lr}
		return set_random_address(addr);
   251be:	4608      	mov	r0, r1
   251c0:	f7f1 fe1e 	bl	16e00 <set_random_address>
}
   251c4:	bd08      	pop	{r3, pc}

000251c6 <bt_id_set_adv_private_addr>:
{
   251c6:	b510      	push	{r4, lr}
   251c8:	b082      	sub	sp, #8
   251ca:	4604      	mov	r4, r0
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   251cc:	2106      	movs	r1, #6
   251ce:	4668      	mov	r0, sp
   251d0:	f7f9 fb98 	bl	1e904 <bt_rand>
	if (err) {
   251d4:	b108      	cbz	r0, 251da <bt_id_set_adv_private_addr+0x14>
}
   251d6:	b002      	add	sp, #8
   251d8:	bd10      	pop	{r4, pc}
	BT_ADDR_SET_NRPA(&nrpa);
   251da:	f89d 3005 	ldrb.w	r3, [sp, #5]
   251de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   251e2:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   251e6:	4669      	mov	r1, sp
   251e8:	4620      	mov	r0, r4
   251ea:	f7ff ffe7 	bl	251bc <bt_id_set_adv_random_addr>
	if (err) {
   251ee:	e7f2      	b.n	251d6 <bt_id_set_adv_private_addr+0x10>

000251f0 <bt_id_adv_random_addr_check>:
}
   251f0:	2001      	movs	r0, #1
   251f2:	4770      	bx	lr

000251f4 <pending_id_update>:
{
   251f4:	b508      	push	{r3, lr}
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   251f6:	7a03      	ldrb	r3, [r0, #8]
   251f8:	f013 0f01 	tst.w	r3, #1
   251fc:	d103      	bne.n	25206 <pending_id_update+0x12>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   251fe:	f013 0f02 	tst.w	r3, #2
   25202:	d106      	bne.n	25212 <pending_id_update+0x1e>
}
   25204:	bd08      	pop	{r3, pc}
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   25206:	f023 0301 	bic.w	r3, r3, #1
   2520a:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   2520c:	f7f1 feda 	bl	16fc4 <bt_id_add>
		return;
   25210:	e7f8      	b.n	25204 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   25212:	f023 0302 	bic.w	r3, r3, #2
   25216:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   25218:	f7f1 ffa8 	bl	1716c <bt_id_del>
		return;
   2521c:	e7f2      	b.n	25204 <pending_id_update+0x10>

0002521e <bt_id_init>:
#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
}
   2521e:	2000      	movs	r0, #0
   25220:	4770      	bx	lr

00025222 <get_filter_policy>:
}
   25222:	2000      	movs	r0, #0
   25224:	4770      	bx	lr

00025226 <get_adv_channel_map>:
{
   25226:	4603      	mov	r3, r0
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_37) {
   25228:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   2522c:	d10b      	bne.n	25246 <get_adv_channel_map+0x20>
	uint8_t channel_map = 0x07;
   2522e:	2007      	movs	r0, #7
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   25230:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   25234:	d001      	beq.n	2523a <get_adv_channel_map+0x14>
		channel_map &= ~0x02;
   25236:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   2523a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   2523e:	d001      	beq.n	25244 <get_adv_channel_map+0x1e>
		channel_map &= ~0x04;
   25240:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
}
   25244:	4770      	bx	lr
		channel_map &= ~0x01;
   25246:	2006      	movs	r0, #6
   25248:	e7f2      	b.n	25230 <get_adv_channel_map+0xa>

0002524a <hci_set_ad>:
{
   2524a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2524e:	b082      	sub	sp, #8
   25250:	4607      	mov	r7, r0
   25252:	460d      	mov	r5, r1
   25254:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   25256:	2120      	movs	r1, #32
   25258:	f7f0 faee 	bl	15838 <bt_hci_cmd_create>
	if (!buf) {
   2525c:	b300      	cbz	r0, 252a0 <hci_set_ad+0x56>
   2525e:	4680      	mov	r8, r0
	return net_buf_simple_add(&buf->b, len);
   25260:	2120      	movs	r1, #32
   25262:	3008      	adds	r0, #8
   25264:	f003 f865 	bl	28332 <net_buf_simple_add>
   25268:	4604      	mov	r4, r0
	(void)memset(set_data, 0, sizeof(*set_data));
   2526a:	2220      	movs	r2, #32
   2526c:	2100      	movs	r1, #0
   2526e:	f7ff fc21 	bl	24ab4 <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   25272:	9400      	str	r4, [sp, #0]
   25274:	4633      	mov	r3, r6
   25276:	462a      	mov	r2, r5
   25278:	211f      	movs	r1, #31
   2527a:	1c60      	adds	r0, r4, #1
   2527c:	f7f2 f9c8 	bl	17610 <set_data_add>
	if (err) {
   25280:	4604      	mov	r4, r0
   25282:	b948      	cbnz	r0, 25298 <hci_set_ad+0x4e>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   25284:	2200      	movs	r2, #0
   25286:	4641      	mov	r1, r8
   25288:	4638      	mov	r0, r7
   2528a:	f7f0 fb11 	bl	158b0 <bt_hci_cmd_send_sync>
   2528e:	4604      	mov	r4, r0
}
   25290:	4620      	mov	r0, r4
   25292:	b002      	add	sp, #8
   25294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   25298:	4640      	mov	r0, r8
   2529a:	f003 f800 	bl	2829e <net_buf_unref>
		return err;
   2529e:	e7f7      	b.n	25290 <hci_set_ad+0x46>
		return -ENOBUFS;
   252a0:	f06f 0468 	mvn.w	r4, #104	; 0x68
   252a4:	e7f4      	b.n	25290 <hci_set_ad+0x46>

000252a6 <set_ad>:
{
   252a6:	b508      	push	{r3, lr}
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   252a8:	f242 0008 	movw	r0, #8200	; 0x2008
   252ac:	f7ff ffcd 	bl	2524a <hci_set_ad>
}
   252b0:	bd08      	pop	{r3, pc}

000252b2 <set_sd>:
{
   252b2:	b508      	push	{r3, lr}
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   252b4:	f242 0009 	movw	r0, #8201	; 0x2009
   252b8:	f7ff ffc7 	bl	2524a <hci_set_ad>
}
   252bc:	bd08      	pop	{r3, pc}

000252be <le_adv_update>:
{
   252be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   252c2:	b089      	sub	sp, #36	; 0x24
   252c4:	4604      	mov	r4, r0
   252c6:	460d      	mov	r5, r1
   252c8:	4617      	mov	r7, r2
   252ca:	461e      	mov	r6, r3
   252cc:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
   252d0:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
   252d4:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   252d8:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
   252dc:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   252e0:	9300      	str	r3, [sp, #0]
	struct bt_ad d[2] = {};
   252e2:	2300      	movs	r3, #0
   252e4:	9304      	str	r3, [sp, #16]
   252e6:	9305      	str	r3, [sp, #20]
   252e8:	9306      	str	r3, [sp, #24]
   252ea:	9307      	str	r3, [sp, #28]
	if (use_name) {
   252ec:	f1b9 0f00 	cmp.w	r9, #0
   252f0:	d119      	bne.n	25326 <le_adv_update+0x68>
	if (!(ext_adv && scannable) || force_name_in_ad) {
   252f2:	f1bb 0f00 	cmp.w	fp, #0
   252f6:	d005      	beq.n	25304 <le_adv_update+0x46>
   252f8:	f1ba 0f00 	cmp.w	sl, #0
   252fc:	d002      	beq.n	25304 <le_adv_update+0x46>
   252fe:	9b00      	ldr	r3, [sp, #0]
   25300:	2b00      	cmp	r3, #0
   25302:	d047      	beq.n	25394 <le_adv_update+0xd6>
		d[0].data = ad;
   25304:	9504      	str	r5, [sp, #16]
		d[0].len = ad_len;
   25306:	9705      	str	r7, [sp, #20]
		if (use_name && (!scannable || force_name_in_ad)) {
   25308:	f1b9 0f00 	cmp.w	r9, #0
   2530c:	d03b      	beq.n	25386 <le_adv_update+0xc8>
   2530e:	f1ba 0f00 	cmp.w	sl, #0
   25312:	d002      	beq.n	2531a <le_adv_update+0x5c>
   25314:	9b00      	ldr	r3, [sp, #0]
   25316:	2b00      	cmp	r3, #0
   25318:	d04d      	beq.n	253b6 <le_adv_update+0xf8>
			d[1].data = &data;
   2531a:	ab02      	add	r3, sp, #8
   2531c:	9306      	str	r3, [sp, #24]
			d[1].len = 1;
   2531e:	2301      	movs	r3, #1
   25320:	9307      	str	r3, [sp, #28]
			d_len = 2;
   25322:	2202      	movs	r2, #2
   25324:	e030      	b.n	25388 <le_adv_update+0xca>
		const char *name = bt_get_name();
   25326:	f7f1 fd4d 	bl	16dc4 <bt_get_name>
   2532a:	9001      	str	r0, [sp, #4]
		if ((ad && ad_has_name(ad, ad_len)) ||
   2532c:	b16d      	cbz	r5, 2534a <le_adv_update+0x8c>
	for (i = 0; i < ad_len; i++) {
   2532e:	2200      	movs	r2, #0
   25330:	4297      	cmp	r7, r2
   25332:	d907      	bls.n	25344 <le_adv_update+0x86>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   25334:	f815 3032 	ldrb.w	r3, [r5, r2, lsl #3]
   25338:	3b08      	subs	r3, #8
   2533a:	b2db      	uxtb	r3, r3
   2533c:	2b01      	cmp	r3, #1
   2533e:	d910      	bls.n	25362 <le_adv_update+0xa4>
	for (i = 0; i < ad_len; i++) {
   25340:	3201      	adds	r2, #1
   25342:	e7f5      	b.n	25330 <le_adv_update+0x72>
	return false;
   25344:	2300      	movs	r3, #0
		if ((ad && ad_has_name(ad, ad_len)) ||
   25346:	2b00      	cmp	r3, #0
   25348:	d152      	bne.n	253f0 <le_adv_update+0x132>
   2534a:	b17e      	cbz	r6, 2536c <le_adv_update+0xae>
	for (i = 0; i < ad_len; i++) {
   2534c:	2200      	movs	r2, #0
   2534e:	4590      	cmp	r8, r2
   25350:	d909      	bls.n	25366 <le_adv_update+0xa8>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   25352:	f816 3032 	ldrb.w	r3, [r6, r2, lsl #3]
   25356:	3b08      	subs	r3, #8
   25358:	b2db      	uxtb	r3, r3
   2535a:	2b01      	cmp	r3, #1
   2535c:	d911      	bls.n	25382 <le_adv_update+0xc4>
	for (i = 0; i < ad_len; i++) {
   2535e:	3201      	adds	r2, #1
   25360:	e7f5      	b.n	2534e <le_adv_update+0x90>
			return true;
   25362:	464b      	mov	r3, r9
   25364:	e7ef      	b.n	25346 <le_adv_update+0x88>
	return false;
   25366:	2300      	movs	r3, #0
		    (sd && ad_has_name(sd, sd_len))) {
   25368:	2b00      	cmp	r3, #0
   2536a:	d144      	bne.n	253f6 <le_adv_update+0x138>
		data = (struct bt_data)BT_DATA(
   2536c:	9801      	ldr	r0, [sp, #4]
   2536e:	f7ff fb2f 	bl	249d0 <strlen>
   25372:	2309      	movs	r3, #9
   25374:	f88d 3008 	strb.w	r3, [sp, #8]
   25378:	f88d 0009 	strb.w	r0, [sp, #9]
   2537c:	9b01      	ldr	r3, [sp, #4]
   2537e:	9303      	str	r3, [sp, #12]
   25380:	e7b7      	b.n	252f2 <le_adv_update+0x34>
			return true;
   25382:	464b      	mov	r3, r9
   25384:	e7f0      	b.n	25368 <le_adv_update+0xaa>
		d_len = 1;
   25386:	2201      	movs	r2, #1
		err = set_ad(adv, d, d_len);
   25388:	a904      	add	r1, sp, #16
   2538a:	4620      	mov	r0, r4
   2538c:	f7ff ff8b 	bl	252a6 <set_ad>
		if (err) {
   25390:	4603      	mov	r3, r0
   25392:	bb38      	cbnz	r0, 253e4 <le_adv_update+0x126>
	if (scannable) {
   25394:	f1ba 0f00 	cmp.w	sl, #0
   25398:	d016      	beq.n	253c8 <le_adv_update+0x10a>
		d[0].data = sd;
   2539a:	9604      	str	r6, [sp, #16]
		d[0].len = sd_len;
   2539c:	f8cd 8014 	str.w	r8, [sp, #20]
		if (use_name && !force_name_in_ad) {
   253a0:	f1b9 0f00 	cmp.w	r9, #0
   253a4:	d009      	beq.n	253ba <le_adv_update+0xfc>
   253a6:	9b00      	ldr	r3, [sp, #0]
   253a8:	bb03      	cbnz	r3, 253ec <le_adv_update+0x12e>
			d[1].data = &data;
   253aa:	ab02      	add	r3, sp, #8
   253ac:	9306      	str	r3, [sp, #24]
			d[1].len = 1;
   253ae:	2301      	movs	r3, #1
   253b0:	9307      	str	r3, [sp, #28]
			d_len = 2;
   253b2:	2202      	movs	r2, #2
   253b4:	e002      	b.n	253bc <le_adv_update+0xfe>
		d_len = 1;
   253b6:	2201      	movs	r2, #1
   253b8:	e7e6      	b.n	25388 <le_adv_update+0xca>
		d_len = 1;
   253ba:	2201      	movs	r2, #1
		err = set_sd(adv, d, d_len);
   253bc:	a904      	add	r1, sp, #16
   253be:	4620      	mov	r0, r4
   253c0:	f7ff ff77 	bl	252b2 <set_sd>
		if (err) {
   253c4:	4603      	mov	r3, r0
   253c6:	b968      	cbnz	r0, 253e4 <le_adv_update+0x126>
	atomic_set_bit(adv->flags, BT_ADV_DATA_SET);
   253c8:	3410      	adds	r4, #16
   253ca:	f3bf 8f5b 	dmb	ish
   253ce:	e854 3f00 	ldrex	r3, [r4]
   253d2:	f043 0304 	orr.w	r3, r3, #4
   253d6:	e844 3200 	strex	r2, r3, [r4]
   253da:	2a00      	cmp	r2, #0
   253dc:	d1f7      	bne.n	253ce <le_adv_update+0x110>
   253de:	f3bf 8f5b 	dmb	ish
	return 0;
   253e2:	2300      	movs	r3, #0
}
   253e4:	4618      	mov	r0, r3
   253e6:	b009      	add	sp, #36	; 0x24
   253e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		d_len = 1;
   253ec:	2201      	movs	r2, #1
   253ee:	e7e5      	b.n	253bc <le_adv_update+0xfe>
			return -EINVAL;
   253f0:	f06f 0315 	mvn.w	r3, #21
   253f4:	e7f6      	b.n	253e4 <le_adv_update+0x126>
   253f6:	f06f 0315 	mvn.w	r3, #21
   253fa:	e7f3      	b.n	253e4 <le_adv_update+0x126>

000253fc <valid_adv_param>:
{
   253fc:	b508      	push	{r3, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   253fe:	6843      	ldr	r3, [r0, #4]
   25400:	f413 6f80 	tst.w	r3, #1024	; 0x400
   25404:	d107      	bne.n	25416 <valid_adv_param+0x1a>
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   25406:	6902      	ldr	r2, [r0, #16]
   25408:	b112      	cbz	r2, 25410 <valid_adv_param+0x14>
   2540a:	f013 0f01 	tst.w	r3, #1
   2540e:	d004      	beq.n	2541a <valid_adv_param+0x1e>
	return valid_adv_ext_param(param);
   25410:	f7f2 f962 	bl	176d8 <valid_adv_ext_param>
}
   25414:	bd08      	pop	{r3, pc}
		return false;
   25416:	2000      	movs	r0, #0
   25418:	e7fc      	b.n	25414 <valid_adv_param+0x18>
		return false;
   2541a:	2000      	movs	r0, #0
   2541c:	e7fa      	b.n	25414 <valid_adv_param+0x18>

0002541e <bt_le_adv_set_enable_legacy>:
{
   2541e:	b570      	push	{r4, r5, r6, lr}
   25420:	b086      	sub	sp, #24
   25422:	4605      	mov	r5, r0
   25424:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   25426:	2101      	movs	r1, #1
   25428:	f242 000a 	movw	r0, #8202	; 0x200a
   2542c:	f7f0 fa04 	bl	15838 <bt_hci_cmd_create>
	if (!buf) {
   25430:	b1d0      	cbz	r0, 25468 <bt_le_adv_set_enable_legacy+0x4a>
   25432:	4606      	mov	r6, r0
	if (enable) {
   25434:	b19c      	cbz	r4, 2545e <bt_le_adv_set_enable_legacy+0x40>
	return net_buf_simple_add_u8(&buf->b, val);
   25436:	2101      	movs	r1, #1
   25438:	3008      	adds	r0, #8
   2543a:	f002 ff8b 	bl	28354 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   2543e:	9400      	str	r4, [sp, #0]
   25440:	2306      	movs	r3, #6
   25442:	f105 0210 	add.w	r2, r5, #16
   25446:	a903      	add	r1, sp, #12
   25448:	4630      	mov	r0, r6
   2544a:	f7f0 f9e3 	bl	15814 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   2544e:	2200      	movs	r2, #0
   25450:	4631      	mov	r1, r6
   25452:	f242 000a 	movw	r0, #8202	; 0x200a
   25456:	f7f0 fa2b 	bl	158b0 <bt_hci_cmd_send_sync>
}
   2545a:	b006      	add	sp, #24
   2545c:	bd70      	pop	{r4, r5, r6, pc}
   2545e:	2100      	movs	r1, #0
   25460:	3008      	adds	r0, #8
   25462:	f002 ff77 	bl	28354 <net_buf_simple_add_u8>
   25466:	e7ea      	b.n	2543e <bt_le_adv_set_enable_legacy+0x20>
		return -ENOBUFS;
   25468:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2546c:	e7f5      	b.n	2545a <bt_le_adv_set_enable_legacy+0x3c>

0002546e <bt_le_adv_set_enable>:
{
   2546e:	b508      	push	{r3, lr}
	return bt_le_adv_set_enable_legacy(adv, enable);
   25470:	f7ff ffd5 	bl	2541e <bt_le_adv_set_enable_legacy>
}
   25474:	bd08      	pop	{r3, pc}

00025476 <bt_le_adv_start>:
{
   25476:	b5f0      	push	{r4, r5, r6, r7, lr}
   25478:	b083      	sub	sp, #12
   2547a:	4607      	mov	r7, r0
   2547c:	460e      	mov	r6, r1
   2547e:	4614      	mov	r4, r2
   25480:	461d      	mov	r5, r3
	struct bt_le_ext_adv *adv = adv_new_legacy();
   25482:	f7f2 f8c1 	bl	17608 <adv_new_legacy>
	if (!adv) {
   25486:	b148      	cbz	r0, 2549c <bt_le_adv_start+0x26>
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   25488:	9b08      	ldr	r3, [sp, #32]
   2548a:	9301      	str	r3, [sp, #4]
   2548c:	9500      	str	r5, [sp, #0]
   2548e:	4623      	mov	r3, r4
   25490:	4632      	mov	r2, r6
   25492:	4639      	mov	r1, r7
   25494:	f7f2 f9f8 	bl	17888 <bt_le_adv_start_legacy>
}
   25498:	b003      	add	sp, #12
   2549a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOMEM;
   2549c:	f06f 000b 	mvn.w	r0, #11
   254a0:	e7fa      	b.n	25498 <bt_le_adv_start+0x22>

000254a2 <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   254a2:	b530      	push	{r4, r5, lr}
   254a4:	b083      	sub	sp, #12
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   254a6:	f7f2 f9eb 	bl	17880 <bt_le_adv_lookup_legacy>
	struct bt_conn *conn;
	bool persist_paused = false;
	int err;

	if (!adv) {
   254aa:	b150      	cbz	r0, 254c2 <bt_le_adv_resume+0x20>
   254ac:	4604      	mov	r4, r0
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   254ae:	f100 0510 	add.w	r5, r0, #16
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   254b2:	f3bf 8f5b 	dmb	ish
   254b6:	6903      	ldr	r3, [r0, #16]
   254b8:	f3bf 8f5b 	dmb	ish
   254bc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   254c0:	d101      	bne.n	254c6 <bt_le_adv_resume+0x24>
	 */
	bt_conn_unref(conn);
	if (persist_paused) {
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   254c2:	b003      	add	sp, #12
   254c4:	bd30      	pop	{r4, r5, pc}
   254c6:	f3bf 8f5b 	dmb	ish
   254ca:	6903      	ldr	r3, [r0, #16]
   254cc:	f3bf 8f5b 	dmb	ish
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   254d0:	f013 0f40 	tst.w	r3, #64	; 0x40
   254d4:	d1f5      	bne.n	254c2 <bt_le_adv_resume+0x20>
   254d6:	f3bf 8f5b 	dmb	ish
   254da:	6903      	ldr	r3, [r0, #16]
   254dc:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   254e0:	f413 7f80 	tst.w	r3, #256	; 0x100
   254e4:	d0ed      	beq.n	254c2 <bt_le_adv_resume+0x20>
	err = le_adv_start_add_conn(adv, &conn);
   254e6:	a901      	add	r1, sp, #4
   254e8:	f7f2 f944 	bl	17774 <le_adv_start_add_conn>
	if (err) {
   254ec:	2800      	cmp	r0, #0
   254ee:	d1e8      	bne.n	254c2 <bt_le_adv_resume+0x20>
	err = bt_le_adv_set_enable(adv, true);
   254f0:	2101      	movs	r1, #1
   254f2:	4620      	mov	r0, r4
   254f4:	f7ff ffbb 	bl	2546e <bt_le_adv_set_enable>
	if (err) {
   254f8:	b908      	cbnz	r0, 254fe <bt_le_adv_resume+0x5c>
	bool persist_paused = false;
   254fa:	2400      	movs	r4, #0
   254fc:	e011      	b.n	25522 <bt_le_adv_resume+0x80>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   254fe:	2100      	movs	r1, #0
   25500:	9801      	ldr	r0, [sp, #4]
   25502:	f7f3 f84b 	bl	1859c <bt_conn_set_state>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25506:	f3bf 8f5b 	dmb	ish
   2550a:	e855 4f00 	ldrex	r4, [r5]
   2550e:	f424 5380 	bic.w	r3, r4, #4096	; 0x1000
   25512:	e845 3200 	strex	r2, r3, [r5]
   25516:	2a00      	cmp	r2, #0
   25518:	d1f7      	bne.n	2550a <bt_le_adv_resume+0x68>
   2551a:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2551e:	f3c4 3400 	ubfx	r4, r4, #12, #1
	bt_conn_unref(conn);
   25522:	9801      	ldr	r0, [sp, #4]
   25524:	f000 f9e8 	bl	258f8 <bt_conn_unref>
	if (persist_paused) {
   25528:	2c00      	cmp	r4, #0
   2552a:	d0ca      	beq.n	254c2 <bt_le_adv_resume+0x20>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2552c:	f3bf 8f5b 	dmb	ish
   25530:	e855 3f00 	ldrex	r3, [r5]
   25534:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   25538:	e845 3200 	strex	r2, r3, [r5]
   2553c:	2a00      	cmp	r2, #0
   2553e:	d1f7      	bne.n	25530 <bt_le_adv_resume+0x8e>
   25540:	f3bf 8f5b 	dmb	ish
}
   25544:	e7bd      	b.n	254c2 <bt_le_adv_resume+0x20>

00025546 <hci_generate_dhkey_v1>:
{
   25546:	b538      	push	{r3, r4, r5, lr}
   25548:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   2554a:	2140      	movs	r1, #64	; 0x40
   2554c:	f242 0026 	movw	r0, #8230	; 0x2026
   25550:	f7f0 f972 	bl	15838 <bt_hci_cmd_create>
	if (!buf) {
   25554:	b178      	cbz	r0, 25576 <hci_generate_dhkey_v1+0x30>
   25556:	4605      	mov	r5, r0
	return net_buf_simple_add(&buf->b, len);
   25558:	2140      	movs	r1, #64	; 0x40
   2555a:	3008      	adds	r0, #8
   2555c:	f002 fee9 	bl	28332 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   25560:	2240      	movs	r2, #64	; 0x40
   25562:	4621      	mov	r1, r4
   25564:	f7ff fa82 	bl	24a6c <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   25568:	2200      	movs	r2, #0
   2556a:	4629      	mov	r1, r5
   2556c:	f242 0026 	movw	r0, #8230	; 0x2026
   25570:	f7f0 f99e 	bl	158b0 <bt_hci_cmd_send_sync>
}
   25574:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   25576:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2557a:	e7fb      	b.n	25574 <hci_generate_dhkey_v1+0x2e>

0002557c <reset_pairing>:
	conn->required_sec_level = conn->sec_level;
   2557c:	7a43      	ldrb	r3, [r0, #9]
   2557e:	7283      	strb	r3, [r0, #10]
}
   25580:	4770      	bx	lr

00025582 <start_security>:
{
   25582:	b508      	push	{r3, lr}
		return bt_smp_start_security(conn);
   25584:	f002 faef 	bl	27b66 <bt_smp_start_security>
}
   25588:	bd08      	pop	{r3, pc}

0002558a <tx_notify>:
{
   2558a:	b570      	push	{r4, r5, r6, lr}
   2558c:	4604      	mov	r4, r0
	BT_DBG("conn %p", conn);
   2558e:	e010      	b.n	255b2 <tx_notify+0x28>
   25590:	f383 8811 	msr	BASEPRI, r3
   25594:	f3bf 8f6f 	isb	sy
}
   25598:	bd70      	pop	{r4, r5, r6, pc}
	list->tail = node;
   2559a:	6262      	str	r2, [r4, #36]	; 0x24
   2559c:	f383 8811 	msr	BASEPRI, r3
   255a0:	f3bf 8f6f 	isb	sy
		cb = tx->cb;
   255a4:	6845      	ldr	r5, [r0, #4]
		user_data = tx->user_data;
   255a6:	6886      	ldr	r6, [r0, #8]
		tx_free(tx);
   255a8:	f7f2 fd2c 	bl	18004 <tx_free>
		cb(conn, user_data);
   255ac:	4631      	mov	r1, r6
   255ae:	4620      	mov	r0, r4
   255b0:	47a8      	blx	r5
	__asm__ volatile(
   255b2:	f04f 0240 	mov.w	r2, #64	; 0x40
   255b6:	f3ef 8311 	mrs	r3, BASEPRI
   255ba:	f382 8811 	msr	BASEPRI, r2
   255be:	f3bf 8f6f 	isb	sy
	return list->head;
   255c2:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   255c4:	2800      	cmp	r0, #0
   255c6:	d0e3      	beq.n	25590 <tx_notify+0x6>
	return node->next;
   255c8:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   255ca:	6222      	str	r2, [r4, #32]
	return list->tail;
   255cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   255ce:	4281      	cmp	r1, r0
   255d0:	d1e4      	bne.n	2559c <tx_notify+0x12>
   255d2:	e7e2      	b.n	2559a <tx_notify+0x10>

000255d4 <tx_complete_work>:
{
   255d4:	b508      	push	{r3, lr}
	tx_notify(conn);
   255d6:	3828      	subs	r0, #40	; 0x28
   255d8:	f7ff ffd7 	bl	2558a <tx_notify>
}
   255dc:	bd08      	pop	{r3, pc}

000255de <send_acl>:
{
   255de:	b570      	push	{r4, r5, r6, lr}
   255e0:	4605      	mov	r5, r0
   255e2:	460c      	mov	r4, r1
	switch (flags) {
   255e4:	2a03      	cmp	r2, #3
   255e6:	d819      	bhi.n	2561c <send_acl+0x3e>
   255e8:	e8df f002 	tbb	[pc, r2]
   255ec:	16021602 	.word	0x16021602
		flags = BT_ACL_CONT;
   255f0:	2600      	movs	r6, #0
	return net_buf_simple_push(&buf->b, len);
   255f2:	2104      	movs	r1, #4
   255f4:	f104 0008 	add.w	r0, r4, #8
   255f8:	f002 feb3 	bl	28362 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   255fc:	f9b5 3000 	ldrsh.w	r3, [r5]
   25600:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
   25604:	8003      	strh	r3, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   25606:	89a3      	ldrh	r3, [r4, #12]
   25608:	3b04      	subs	r3, #4
   2560a:	8043      	strh	r3, [r0, #2]
   2560c:	2302      	movs	r3, #2
   2560e:	7523      	strb	r3, [r4, #20]
	return bt_send(buf);
   25610:	4620      	mov	r0, r4
   25612:	f7ff fc5f 	bl	24ed4 <bt_send>
}
   25616:	bd70      	pop	{r4, r5, r6, pc}
		flags = BT_ACL_CONT;
   25618:	2601      	movs	r6, #1
   2561a:	e7ea      	b.n	255f2 <send_acl+0x14>
   2561c:	f06f 0015 	mvn.w	r0, #21
   25620:	e7f9      	b.n	25616 <send_acl+0x38>

00025622 <process_unack_tx>:
{
   25622:	b510      	push	{r4, lr}
   25624:	4604      	mov	r4, r0
   25626:	e028      	b.n	2567a <process_unack_tx+0x58>
			conn->pending_no_cb--;
   25628:	3b01      	subs	r3, #1
   2562a:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   2562c:	f382 8811 	msr	BASEPRI, r2
   25630:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   25634:	4620      	mov	r0, r4
   25636:	f7f2 fd21 	bl	1807c <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   2563a:	f7fa fb7d 	bl	1fd38 <z_impl_k_sem_give>
			continue;
   2563e:	e01c      	b.n	2567a <process_unack_tx+0x58>
	list->tail = node;
   25640:	61a3      	str	r3, [r4, #24]
   25642:	f382 8811 	msr	BASEPRI, r2
   25646:	f3bf 8f6f 	isb	sy
		if (!node) {
   2564a:	b350      	cbz	r0, 256a2 <process_unack_tx+0x80>
	__asm__ volatile(
   2564c:	f04f 0240 	mov.w	r2, #64	; 0x40
   25650:	f3ef 8311 	mrs	r3, BASEPRI
   25654:	f382 8811 	msr	BASEPRI, r2
   25658:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   2565c:	68c2      	ldr	r2, [r0, #12]
   2565e:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   25660:	2200      	movs	r2, #0
   25662:	60c2      	str	r2, [r0, #12]
	__asm__ volatile(
   25664:	f383 8811 	msr	BASEPRI, r3
   25668:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   2566c:	f7f2 fcca 	bl	18004 <tx_free>
		k_sem_give(bt_conn_get_pkts(conn));
   25670:	4620      	mov	r0, r4
   25672:	f7f2 fd03 	bl	1807c <bt_conn_get_pkts>
   25676:	f7fa fb5f 	bl	1fd38 <z_impl_k_sem_give>
	__asm__ volatile(
   2567a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2567e:	f3ef 8211 	mrs	r2, BASEPRI
   25682:	f383 8811 	msr	BASEPRI, r3
   25686:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   2568a:	69e3      	ldr	r3, [r4, #28]
   2568c:	2b00      	cmp	r3, #0
   2568e:	d1cb      	bne.n	25628 <process_unack_tx+0x6>
	return list->head;
   25690:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   25692:	2800      	cmp	r0, #0
   25694:	d0d5      	beq.n	25642 <process_unack_tx+0x20>
	return node->next;
   25696:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   25698:	6163      	str	r3, [r4, #20]
	return list->tail;
   2569a:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2569c:	4288      	cmp	r0, r1
   2569e:	d1d0      	bne.n	25642 <process_unack_tx+0x20>
   256a0:	e7ce      	b.n	25640 <process_unack_tx+0x1e>
}
   256a2:	bd10      	pop	{r4, pc}

000256a4 <bt_conn_new>:
{
   256a4:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < size; i++) {
   256a6:	2300      	movs	r3, #0
   256a8:	428b      	cmp	r3, r1
   256aa:	d21e      	bcs.n	256ea <bt_conn_new+0x46>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   256ac:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   256b0:	eb00 1484 	add.w	r4, r0, r4, lsl #6
   256b4:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   256b8:	2501      	movs	r5, #1
   256ba:	f3bf 8f5b 	dmb	ish
   256be:	e852 6f00 	ldrex	r6, [r2]
   256c2:	2e00      	cmp	r6, #0
   256c4:	d104      	bne.n	256d0 <bt_conn_new+0x2c>
   256c6:	e842 5c00 	strex	ip, r5, [r2]
   256ca:	f1bc 0f00 	cmp.w	ip, #0
   256ce:	d1f6      	bne.n	256be <bt_conn_new+0x1a>
   256d0:	f3bf 8f5b 	dmb	ish
   256d4:	d107      	bne.n	256e6 <bt_conn_new+0x42>
	if (!conn) {
   256d6:	b124      	cbz	r4, 256e2 <bt_conn_new+0x3e>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   256d8:	22b8      	movs	r2, #184	; 0xb8
   256da:	2100      	movs	r1, #0
   256dc:	4620      	mov	r0, r4
   256de:	f7ff f9e9 	bl	24ab4 <memset>
}
   256e2:	4620      	mov	r0, r4
   256e4:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < size; i++) {
   256e6:	442b      	add	r3, r5
   256e8:	e7de      	b.n	256a8 <bt_conn_new+0x4>
	struct bt_conn *conn = NULL;
   256ea:	2400      	movs	r4, #0
   256ec:	e7f3      	b.n	256d6 <bt_conn_new+0x32>

000256ee <bt_conn_set_security>:
	if (conn->state != BT_CONN_CONNECTED) {
   256ee:	7b43      	ldrb	r3, [r0, #13]
   256f0:	2b07      	cmp	r3, #7
   256f2:	d12f      	bne.n	25754 <bt_conn_set_security+0x66>
{
   256f4:	b510      	push	{r4, lr}
   256f6:	4604      	mov	r4, r0
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   256f8:	7a43      	ldrb	r3, [r0, #9]
   256fa:	428b      	cmp	r3, r1
   256fc:	d22d      	bcs.n	2575a <bt_conn_set_security+0x6c>
   256fe:	7a83      	ldrb	r3, [r0, #10]
   25700:	428b      	cmp	r3, r1
   25702:	d301      	bcc.n	25708 <bt_conn_set_security+0x1a>
		return 0;
   25704:	2000      	movs	r0, #0
   25706:	e029      	b.n	2575c <bt_conn_set_security+0x6e>
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   25708:	1d03      	adds	r3, r0, #4
	if (val) {
   2570a:	09ca      	lsrs	r2, r1, #7
   2570c:	d015      	beq.n	2573a <bt_conn_set_security+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2570e:	f3bf 8f5b 	dmb	ish
   25712:	e853 2f00 	ldrex	r2, [r3]
   25716:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   2571a:	e843 2000 	strex	r0, r2, [r3]
   2571e:	2800      	cmp	r0, #0
   25720:	d1f7      	bne.n	25712 <bt_conn_set_security+0x24>
   25722:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   25726:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   2572a:	72a1      	strb	r1, [r4, #10]
	err = start_security(conn);
   2572c:	4620      	mov	r0, r4
   2572e:	f7ff ff28 	bl	25582 <start_security>
	if (err) {
   25732:	b198      	cbz	r0, 2575c <bt_conn_set_security+0x6e>
		conn->required_sec_level = conn->sec_level;
   25734:	7a63      	ldrb	r3, [r4, #9]
   25736:	72a3      	strb	r3, [r4, #10]
   25738:	e010      	b.n	2575c <bt_conn_set_security+0x6e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2573a:	f3bf 8f5b 	dmb	ish
   2573e:	e853 2f00 	ldrex	r2, [r3]
   25742:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   25746:	e843 2000 	strex	r0, r2, [r3]
   2574a:	2800      	cmp	r0, #0
   2574c:	d1f7      	bne.n	2573e <bt_conn_set_security+0x50>
   2574e:	f3bf 8f5b 	dmb	ish
   25752:	e7e8      	b.n	25726 <bt_conn_set_security+0x38>
		return -ENOTCONN;
   25754:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   25758:	4770      	bx	lr
		return 0;
   2575a:	2000      	movs	r0, #0
}
   2575c:	bd10      	pop	{r4, pc}

0002575e <bt_conn_get_security>:
}
   2575e:	7a40      	ldrb	r0, [r0, #9]
   25760:	4770      	bx	lr

00025762 <bt_conn_reset_rx_state>:
{
   25762:	b510      	push	{r4, lr}
   25764:	4604      	mov	r4, r0
	if (!conn->rx) {
   25766:	6900      	ldr	r0, [r0, #16]
   25768:	b118      	cbz	r0, 25772 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   2576a:	f002 fd98 	bl	2829e <net_buf_unref>
	conn->rx = NULL;
   2576e:	2300      	movs	r3, #0
   25770:	6123      	str	r3, [r4, #16]
}
   25772:	bd10      	pop	{r4, pc}

00025774 <conn_cleanup>:
{
   25774:	b538      	push	{r3, r4, r5, lr}
   25776:	4605      	mov	r5, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   25778:	e004      	b.n	25784 <conn_cleanup+0x10>
			tx_free(tx_data(buf)->tx);
   2577a:	f7f2 fc43 	bl	18004 <tx_free>
		net_buf_unref(buf);
   2577e:	4620      	mov	r0, r4
   25780:	f002 fd8d 	bl	2829e <net_buf_unref>
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   25784:	2200      	movs	r2, #0
   25786:	2300      	movs	r3, #0
   25788:	f105 0038 	add.w	r0, r5, #56	; 0x38
   2578c:	f002 fd5b 	bl	28246 <net_buf_get>
   25790:	4604      	mov	r4, r0
   25792:	b118      	cbz	r0, 2579c <conn_cleanup+0x28>
		if (tx_data(buf)->tx) {
   25794:	6960      	ldr	r0, [r4, #20]
   25796:	2800      	cmp	r0, #0
   25798:	d1ef      	bne.n	2577a <conn_cleanup+0x6>
   2579a:	e7f0      	b.n	2577e <conn_cleanup+0xa>
	bt_conn_reset_rx_state(conn);
   2579c:	4628      	mov	r0, r5
   2579e:	f7ff ffe0 	bl	25762 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   257a2:	2200      	movs	r2, #0
   257a4:	2300      	movs	r3, #0
   257a6:	f105 0058 	add.w	r0, r5, #88	; 0x58
   257aa:	f7fa fd01 	bl	201b0 <k_work_reschedule>
}
   257ae:	bd38      	pop	{r3, r4, r5, pc}

000257b0 <conn_prepare_events>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   257b0:	f3bf 8f5b 	dmb	ish
   257b4:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   257b8:	f3bf 8f5b 	dmb	ish
	if (!atomic_get(&conn->ref)) {
   257bc:	b33b      	cbz	r3, 2580e <conn_prepare_events+0x5e>
{
   257be:	b510      	push	{r4, lr}
   257c0:	460c      	mov	r4, r1
	if (conn->state == BT_CONN_DISCONNECTED &&
   257c2:	7b43      	ldrb	r3, [r0, #13]
   257c4:	b983      	cbnz	r3, 257e8 <conn_prepare_events+0x38>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
   257c6:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   257c8:	f3bf 8f5b 	dmb	ish
   257cc:	e853 2f00 	ldrex	r2, [r3]
   257d0:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   257d4:	e843 1c00 	strex	ip, r1, [r3]
   257d8:	f1bc 0f00 	cmp.w	ip, #0
   257dc:	d1f6      	bne.n	257cc <conn_prepare_events+0x1c>
   257de:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
   257e2:	f012 0f40 	tst.w	r2, #64	; 0x40
   257e6:	d10d      	bne.n	25804 <conn_prepare_events+0x54>
	if (conn->state != BT_CONN_CONNECTED) {
   257e8:	7b43      	ldrb	r3, [r0, #13]
   257ea:	2b07      	cmp	r3, #7
   257ec:	d112      	bne.n	25814 <conn_prepare_events+0x64>
	k_poll_event_init(&events[0],
   257ee:	f100 0338 	add.w	r3, r0, #56	; 0x38
   257f2:	2200      	movs	r2, #0
   257f4:	2104      	movs	r1, #4
   257f6:	4620      	mov	r0, r4
   257f8:	f004 f9d2 	bl	29ba0 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   257fc:	2301      	movs	r3, #1
   257fe:	7323      	strb	r3, [r4, #12]
	return 0;
   25800:	2000      	movs	r0, #0
}
   25802:	bd10      	pop	{r4, pc}
		conn_cleanup(conn);
   25804:	f7ff ffb6 	bl	25774 <conn_cleanup>
		return -ENOTCONN;
   25808:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2580c:	e7f9      	b.n	25802 <conn_prepare_events+0x52>
		return -ENOTCONN;
   2580e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   25812:	4770      	bx	lr
		return -ENOTCONN;
   25814:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   25818:	e7f3      	b.n	25802 <conn_prepare_events+0x52>

0002581a <bt_conn_add_le>:
{
   2581a:	b570      	push	{r4, r5, r6, lr}
   2581c:	4606      	mov	r6, r0
   2581e:	460d      	mov	r5, r1
	struct bt_conn *conn = acl_conn_new();
   25820:	f7f2 fd1e 	bl	18260 <acl_conn_new>
	if (!conn) {
   25824:	4604      	mov	r4, r0
   25826:	b178      	cbz	r0, 25848 <bt_conn_add_le+0x2e>
	conn->id = id;
   25828:	7206      	strb	r6, [r0, #8]
   2582a:	2207      	movs	r2, #7
   2582c:	4629      	mov	r1, r5
   2582e:	3088      	adds	r0, #136	; 0x88
   25830:	f7ff f91c 	bl	24a6c <memcpy>
	conn->sec_level = BT_SECURITY_L1;
   25834:	2301      	movs	r3, #1
   25836:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   25838:	72a3      	strb	r3, [r4, #10]
	conn->type = BT_CONN_TYPE_LE;
   2583a:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   2583c:	2318      	movs	r3, #24
   2583e:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
   25842:	2328      	movs	r3, #40	; 0x28
   25844:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
}
   25848:	4620      	mov	r0, r4
   2584a:	bd70      	pop	{r4, r5, r6, pc}

0002584c <bt_conn_connected>:
{
   2584c:	b510      	push	{r4, lr}
   2584e:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   25850:	f7f3 faf6 	bl	18e40 <bt_l2cap_connected>
	notify_connected(conn);
   25854:	4620      	mov	r0, r4
   25856:	f7f2 fbf9 	bl	1804c <notify_connected>
}
   2585a:	bd10      	pop	{r4, pc}

0002585c <bt_conn_is_peer_addr_le>:
{
   2585c:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   2585e:	7a03      	ldrb	r3, [r0, #8]
   25860:	428b      	cmp	r3, r1
   25862:	d001      	beq.n	25868 <bt_conn_is_peer_addr_le+0xc>
		return false;
   25864:	2000      	movs	r0, #0
}
   25866:	bd38      	pop	{r3, r4, r5, pc}
   25868:	4604      	mov	r4, r0
   2586a:	4615      	mov	r5, r2
	return memcmp(a, b, sizeof(*a));
   2586c:	2207      	movs	r2, #7
   2586e:	f100 0188 	add.w	r1, r0, #136	; 0x88
   25872:	4628      	mov	r0, r5
   25874:	f7ff f8e3 	bl	24a3e <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   25878:	b1a8      	cbz	r0, 258a6 <bt_conn_is_peer_addr_le+0x4a>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   2587a:	78e3      	ldrb	r3, [r4, #3]
   2587c:	b14b      	cbz	r3, 25892 <bt_conn_is_peer_addr_le+0x36>
   2587e:	2207      	movs	r2, #7
   25880:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   25884:	4628      	mov	r0, r5
   25886:	f7ff f8da 	bl	24a3e <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   2588a:	fab0 f080 	clz	r0, r0
   2588e:	0940      	lsrs	r0, r0, #5
   25890:	e7e9      	b.n	25866 <bt_conn_is_peer_addr_le+0xa>
   25892:	2207      	movs	r2, #7
   25894:	f104 0196 	add.w	r1, r4, #150	; 0x96
   25898:	4628      	mov	r0, r5
   2589a:	f7ff f8d0 	bl	24a3e <memcmp>
		return bt_addr_le_cmp(peer, &conn->le.resp_addr) == 0;
   2589e:	fab0 f080 	clz	r0, r0
   258a2:	0940      	lsrs	r0, r0, #5
   258a4:	e7df      	b.n	25866 <bt_conn_is_peer_addr_le+0xa>
		return true;
   258a6:	2001      	movs	r0, #1
   258a8:	e7dd      	b.n	25866 <bt_conn_is_peer_addr_le+0xa>

000258aa <bt_conn_ref>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   258aa:	f3bf 8f5b 	dmb	ish
   258ae:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   258b2:	f3bf 8f5b 	dmb	ish
		if (!old) {
   258b6:	b1eb      	cbz	r3, 258f4 <bt_conn_ref+0x4a>
{
   258b8:	b410      	push	{r4}
   258ba:	e006      	b.n	258ca <bt_conn_ref+0x20>
   258bc:	f3bf 8f5b 	dmb	ish
   258c0:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   258c4:	f3bf 8f5b 	dmb	ish
		if (!old) {
   258c8:	b193      	cbz	r3, 258f0 <bt_conn_ref+0x46>
   258ca:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	} while (!atomic_cas(&conn->ref, old, old + 1));
   258ce:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   258d0:	f3bf 8f5b 	dmb	ish
   258d4:	e852 4f00 	ldrex	r4, [r2]
   258d8:	429c      	cmp	r4, r3
   258da:	d104      	bne.n	258e6 <bt_conn_ref+0x3c>
   258dc:	e842 1c00 	strex	ip, r1, [r2]
   258e0:	f1bc 0f00 	cmp.w	ip, #0
   258e4:	d1f6      	bne.n	258d4 <bt_conn_ref+0x2a>
   258e6:	f3bf 8f5b 	dmb	ish
   258ea:	d1e7      	bne.n	258bc <bt_conn_ref+0x12>
}
   258ec:	bc10      	pop	{r4}
   258ee:	4770      	bx	lr
			return NULL;
   258f0:	2000      	movs	r0, #0
   258f2:	e7fb      	b.n	258ec <bt_conn_ref+0x42>
   258f4:	2000      	movs	r0, #0
}
   258f6:	4770      	bx	lr

000258f8 <bt_conn_unref>:
{
   258f8:	b508      	push	{r3, lr}
	atomic_val_t old = atomic_dec(&conn->ref);
   258fa:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   258fe:	f3bf 8f5b 	dmb	ish
   25902:	e853 2f00 	ldrex	r2, [r3]
   25906:	3a01      	subs	r2, #1
   25908:	e843 2100 	strex	r1, r2, [r3]
   2590c:	2900      	cmp	r1, #0
   2590e:	d1f8      	bne.n	25902 <bt_conn_unref+0xa>
   25910:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   25914:	f3bf 8f5b 	dmb	ish
   25918:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   2591c:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   25920:	b103      	cbz	r3, 25924 <bt_conn_unref+0x2c>
}
   25922:	bd08      	pop	{r3, pc}
		bt_le_adv_resume();
   25924:	f7ff fdbd 	bl	254a2 <bt_le_adv_resume>
}
   25928:	e7fb      	b.n	25922 <bt_conn_unref+0x2a>

0002592a <conn_lookup_handle>:
{
   2592a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2592e:	4607      	mov	r7, r0
   25930:	460e      	mov	r6, r1
   25932:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   25934:	2400      	movs	r4, #0
   25936:	e003      	b.n	25940 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   25938:	4628      	mov	r0, r5
   2593a:	f7ff ffdd 	bl	258f8 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   2593e:	3401      	adds	r4, #1
   25940:	42b4      	cmp	r4, r6
   25942:	d21c      	bcs.n	2597e <conn_lookup_handle+0x54>
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   25944:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   25948:	eb07 1080 	add.w	r0, r7, r0, lsl #6
   2594c:	f7ff ffad 	bl	258aa <bt_conn_ref>
		if (!conn) {
   25950:	4605      	mov	r5, r0
   25952:	2800      	cmp	r0, #0
   25954:	d0f3      	beq.n	2593e <conn_lookup_handle+0x14>
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   25956:	7b43      	ldrb	r3, [r0, #13]
   25958:	2b01      	cmp	r3, #1
   2595a:	d006      	beq.n	2596a <conn_lookup_handle+0x40>
   2595c:	b25a      	sxtb	r2, r3
   2595e:	2a00      	cmp	r2, #0
   25960:	d0ea      	beq.n	25938 <conn_lookup_handle+0xe>
   25962:	3b07      	subs	r3, #7
   25964:	b2db      	uxtb	r3, r3
   25966:	2b01      	cmp	r3, #1
   25968:	d8e6      	bhi.n	25938 <conn_lookup_handle+0xe>
		if (conn->handle != handle) {
   2596a:	882b      	ldrh	r3, [r5, #0]
   2596c:	4543      	cmp	r3, r8
   2596e:	d102      	bne.n	25976 <conn_lookup_handle+0x4c>
}
   25970:	4628      	mov	r0, r5
   25972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bt_conn_unref(conn);
   25976:	4628      	mov	r0, r5
   25978:	f7ff ffbe 	bl	258f8 <bt_conn_unref>
			continue;
   2597c:	e7df      	b.n	2593e <conn_lookup_handle+0x14>
	return NULL;
   2597e:	2500      	movs	r5, #0
   25980:	e7f6      	b.n	25970 <conn_lookup_handle+0x46>

00025982 <conn_disconnect>:
{
   25982:	b538      	push	{r3, r4, r5, lr}
   25984:	4604      	mov	r4, r0
	err = bt_hci_disconnect(conn->handle, reason);
   25986:	8800      	ldrh	r0, [r0, #0]
   25988:	f7ff fa3b 	bl	24e02 <bt_hci_disconnect>
	if (err) {
   2598c:	4605      	mov	r5, r0
   2598e:	b910      	cbnz	r0, 25996 <conn_disconnect+0x14>
	if (conn->state == BT_CONN_CONNECTED) {
   25990:	7b63      	ldrb	r3, [r4, #13]
   25992:	2b07      	cmp	r3, #7
   25994:	d001      	beq.n	2599a <conn_disconnect+0x18>
}
   25996:	4628      	mov	r0, r5
   25998:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   2599a:	2108      	movs	r1, #8
   2599c:	4620      	mov	r0, r4
   2599e:	f7f2 fdfd 	bl	1859c <bt_conn_set_state>
   259a2:	e7f8      	b.n	25996 <conn_disconnect+0x14>

000259a4 <bt_conn_get_dst>:
}
   259a4:	3088      	adds	r0, #136	; 0x88
   259a6:	4770      	bx	lr

000259a8 <bt_conn_disconnect>:
{
   259a8:	b508      	push	{r3, lr}
	switch (conn->state) {
   259aa:	7b43      	ldrb	r3, [r0, #13]
   259ac:	3b02      	subs	r3, #2
   259ae:	2b06      	cmp	r3, #6
   259b0:	d810      	bhi.n	259d4 <bt_conn_disconnect+0x2c>
   259b2:	e8df f003 	tbb	[pc, r3]
   259b6:	0f06      	.short	0x0f06
   259b8:	0c040f0f 	.word	0x0c040f0f
   259bc:	04          	.byte	0x04
   259bd:	00          	.byte	0x00
   259be:	2000      	movs	r0, #0
}
   259c0:	bd08      	pop	{r3, pc}
		conn->err = reason;
   259c2:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   259c4:	2100      	movs	r1, #0
   259c6:	f7f2 fde9 	bl	1859c <bt_conn_set_state>
		return 0;
   259ca:	2000      	movs	r0, #0
   259cc:	e7f8      	b.n	259c0 <bt_conn_disconnect+0x18>
		return conn_disconnect(conn, reason);
   259ce:	f7ff ffd8 	bl	25982 <conn_disconnect>
   259d2:	e7f5      	b.n	259c0 <bt_conn_disconnect+0x18>
		return -ENOTCONN;
   259d4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   259d8:	e7f2      	b.n	259c0 <bt_conn_disconnect+0x18>

000259da <bt_conn_le_conn_update>:
{
   259da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   259dc:	4606      	mov	r6, r0
   259de:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   259e0:	210e      	movs	r1, #14
   259e2:	f242 0013 	movw	r0, #8211	; 0x2013
   259e6:	f7ef ff27 	bl	15838 <bt_hci_cmd_create>
	if (!buf) {
   259ea:	b1d0      	cbz	r0, 25a22 <bt_conn_le_conn_update+0x48>
   259ec:	4607      	mov	r7, r0
	return net_buf_simple_add(&buf->b, len);
   259ee:	210e      	movs	r1, #14
   259f0:	3008      	adds	r0, #8
   259f2:	f002 fc9e 	bl	28332 <net_buf_simple_add>
   259f6:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   259f8:	220e      	movs	r2, #14
   259fa:	2100      	movs	r1, #0
   259fc:	f7ff f85a 	bl	24ab4 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   25a00:	8833      	ldrh	r3, [r6, #0]
   25a02:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   25a04:	882b      	ldrh	r3, [r5, #0]
   25a06:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   25a08:	886b      	ldrh	r3, [r5, #2]
   25a0a:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   25a0c:	88ab      	ldrh	r3, [r5, #4]
   25a0e:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   25a10:	88eb      	ldrh	r3, [r5, #6]
   25a12:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   25a14:	2200      	movs	r2, #0
   25a16:	4639      	mov	r1, r7
   25a18:	f242 0013 	movw	r0, #8211	; 0x2013
   25a1c:	f7ef ff48 	bl	158b0 <bt_hci_cmd_send_sync>
}
   25a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   25a22:	f06f 0068 	mvn.w	r0, #104	; 0x68
   25a26:	e7fb      	b.n	25a20 <bt_conn_le_conn_update+0x46>

00025a28 <l2cap_connected>:
}
   25a28:	4770      	bx	lr

00025a2a <l2cap_chan_recv>:
{
   25a2a:	b510      	push	{r4, lr}
   25a2c:	460c      	mov	r4, r1
	chan->ops->recv(chan, buf);
   25a2e:	6843      	ldr	r3, [r0, #4]
   25a30:	691b      	ldr	r3, [r3, #16]
   25a32:	4798      	blx	r3
	net_buf_unref(buf);
   25a34:	4620      	mov	r0, r4
   25a36:	f002 fc32 	bl	2829e <net_buf_unref>
}
   25a3a:	bd10      	pop	{r4, pc}

00025a3c <l2cap_disconnected>:
{
   25a3c:	b508      	push	{r3, lr}
	(void)k_work_cancel_delayable(&chan->rtx_work);
   25a3e:	3010      	adds	r0, #16
   25a40:	f003 fd7d 	bl	2953e <k_work_cancel_delayable>
}
   25a44:	bd08      	pop	{r3, pc}

00025a46 <bt_l2cap_chan_remove>:
	return list->head;
   25a46:	6d03      	ldr	r3, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   25a48:	b103      	cbz	r3, 25a4c <bt_l2cap_chan_remove+0x6>
   25a4a:	3b08      	subs	r3, #8
   25a4c:	2200      	movs	r2, #0
   25a4e:	e016      	b.n	25a7e <bt_l2cap_chan_remove+0x38>
{
   25a50:	b410      	push	{r4}
			sys_slist_remove(&conn->channels, prev, &chan->node);
   25a52:	f103 0108 	add.w	r1, r3, #8
Z_GENLIST_REMOVE(slist, snode)
   25a56:	b142      	cbz	r2, 25a6a <bt_l2cap_chan_remove+0x24>
	return node->next;
   25a58:	689c      	ldr	r4, [r3, #8]
	parent->next = child;
   25a5a:	6014      	str	r4, [r2, #0]
	return list->tail;
   25a5c:	6d44      	ldr	r4, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   25a5e:	42a1      	cmp	r1, r4
   25a60:	d00a      	beq.n	25a78 <bt_l2cap_chan_remove+0x32>
	parent->next = child;
   25a62:	2200      	movs	r2, #0
   25a64:	609a      	str	r2, [r3, #8]
}
   25a66:	bc10      	pop	{r4}
   25a68:	4770      	bx	lr
	return node->next;
   25a6a:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   25a6c:	6502      	str	r2, [r0, #80]	; 0x50
	return list->tail;
   25a6e:	6d44      	ldr	r4, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   25a70:	42a1      	cmp	r1, r4
   25a72:	d1f6      	bne.n	25a62 <bt_l2cap_chan_remove+0x1c>
	list->tail = node;
   25a74:	6542      	str	r2, [r0, #84]	; 0x54
}
   25a76:	e7f4      	b.n	25a62 <bt_l2cap_chan_remove+0x1c>
	list->tail = node;
   25a78:	6542      	str	r2, [r0, #84]	; 0x54
}
   25a7a:	e7f2      	b.n	25a62 <bt_l2cap_chan_remove+0x1c>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   25a7c:	4613      	mov	r3, r2
   25a7e:	b14b      	cbz	r3, 25a94 <bt_l2cap_chan_remove+0x4e>
		if (chan == ch) {
   25a80:	428b      	cmp	r3, r1
   25a82:	d0e5      	beq.n	25a50 <bt_l2cap_chan_remove+0xa>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25a84:	f113 0208 	adds.w	r2, r3, #8
   25a88:	d0f8      	beq.n	25a7c <bt_l2cap_chan_remove+0x36>
	return node->next;
   25a8a:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   25a8c:	2b00      	cmp	r3, #0
   25a8e:	d0f6      	beq.n	25a7e <bt_l2cap_chan_remove+0x38>
   25a90:	3b08      	subs	r3, #8
   25a92:	e7f4      	b.n	25a7e <bt_l2cap_chan_remove+0x38>
   25a94:	4770      	bx	lr

00025a96 <bt_l2cap_chan_del>:
{
   25a96:	b538      	push	{r3, r4, r5, lr}
   25a98:	4604      	mov	r4, r0
	const struct bt_l2cap_chan_ops *ops = chan->ops;
   25a9a:	6845      	ldr	r5, [r0, #4]
	if (!chan->conn) {
   25a9c:	6803      	ldr	r3, [r0, #0]
   25a9e:	b123      	cbz	r3, 25aaa <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   25aa0:	686b      	ldr	r3, [r5, #4]
   25aa2:	b103      	cbz	r3, 25aa6 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   25aa4:	4798      	blx	r3
	chan->conn = NULL;
   25aa6:	2300      	movs	r3, #0
   25aa8:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   25aaa:	68e3      	ldr	r3, [r4, #12]
   25aac:	b10b      	cbz	r3, 25ab2 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   25aae:	4620      	mov	r0, r4
   25ab0:	4798      	blx	r3
	if (ops->released) {
   25ab2:	69eb      	ldr	r3, [r5, #28]
   25ab4:	b10b      	cbz	r3, 25aba <bt_l2cap_chan_del+0x24>
		ops->released(chan);
   25ab6:	4620      	mov	r0, r4
   25ab8:	4798      	blx	r3
}
   25aba:	bd38      	pop	{r3, r4, r5, pc}

00025abc <bt_l2cap_chan_add>:
{
   25abc:	b410      	push	{r4}
	sys_slist_append(&conn->channels, &chan->node);
   25abe:	f101 0308 	add.w	r3, r1, #8
	parent->next = child;
   25ac2:	2400      	movs	r4, #0
   25ac4:	608c      	str	r4, [r1, #8]
	return list->tail;
   25ac6:	6d44      	ldr	r4, [r0, #84]	; 0x54
Z_GENLIST_APPEND(slist, snode)
   25ac8:	b12c      	cbz	r4, 25ad6 <bt_l2cap_chan_add+0x1a>
	parent->next = child;
   25aca:	6023      	str	r3, [r4, #0]
	list->tail = node;
   25acc:	6543      	str	r3, [r0, #84]	; 0x54
	chan->conn = conn;
   25ace:	6008      	str	r0, [r1, #0]
	chan->destroy = destroy;
   25ad0:	60ca      	str	r2, [r1, #12]
}
   25ad2:	bc10      	pop	{r4}
   25ad4:	4770      	bx	lr
   25ad6:	6543      	str	r3, [r0, #84]	; 0x54
	list->head = node;
   25ad8:	6503      	str	r3, [r0, #80]	; 0x50
}
   25ada:	e7f8      	b.n	25ace <bt_l2cap_chan_add+0x12>

00025adc <bt_l2cap_disconnected>:
{
   25adc:	b510      	push	{r4, lr}
	return list->head;
   25ade:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   25ae0:	b140      	cbz	r0, 25af4 <bt_l2cap_disconnected+0x18>
   25ae2:	3808      	subs	r0, #8
   25ae4:	d008      	beq.n	25af8 <bt_l2cap_disconnected+0x1c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25ae6:	f110 0408 	adds.w	r4, r0, #8
   25aea:	d00a      	beq.n	25b02 <bt_l2cap_disconnected+0x26>
	return node->next;
   25aec:	6884      	ldr	r4, [r0, #8]
   25aee:	b144      	cbz	r4, 25b02 <bt_l2cap_disconnected+0x26>
   25af0:	3c08      	subs	r4, #8
   25af2:	e006      	b.n	25b02 <bt_l2cap_disconnected+0x26>
   25af4:	4604      	mov	r4, r0
   25af6:	e004      	b.n	25b02 <bt_l2cap_disconnected+0x26>
   25af8:	4604      	mov	r4, r0
   25afa:	e002      	b.n	25b02 <bt_l2cap_disconnected+0x26>
   25afc:	4623      	mov	r3, r4
   25afe:	4620      	mov	r0, r4
   25b00:	461c      	mov	r4, r3
   25b02:	b158      	cbz	r0, 25b1c <bt_l2cap_disconnected+0x40>
		bt_l2cap_chan_del(chan);
   25b04:	f7ff ffc7 	bl	25a96 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   25b08:	2c00      	cmp	r4, #0
   25b0a:	d0f7      	beq.n	25afc <bt_l2cap_disconnected+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25b0c:	f114 0308 	adds.w	r3, r4, #8
   25b10:	d0f5      	beq.n	25afe <bt_l2cap_disconnected+0x22>
	return node->next;
   25b12:	68a3      	ldr	r3, [r4, #8]
   25b14:	2b00      	cmp	r3, #0
   25b16:	d0f2      	beq.n	25afe <bt_l2cap_disconnected+0x22>
   25b18:	3b08      	subs	r3, #8
   25b1a:	e7f0      	b.n	25afe <bt_l2cap_disconnected+0x22>
}
   25b1c:	bd10      	pop	{r4, pc}

00025b1e <bt_l2cap_security_changed>:
{
   25b1e:	b538      	push	{r3, r4, r5, lr}
   25b20:	460d      	mov	r5, r1
	return list->head;
   25b22:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   25b24:	b140      	cbz	r0, 25b38 <bt_l2cap_security_changed+0x1a>
   25b26:	3808      	subs	r0, #8
   25b28:	d008      	beq.n	25b3c <bt_l2cap_security_changed+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25b2a:	f110 0408 	adds.w	r4, r0, #8
   25b2e:	d00a      	beq.n	25b46 <bt_l2cap_security_changed+0x28>
	return node->next;
   25b30:	6884      	ldr	r4, [r0, #8]
   25b32:	b144      	cbz	r4, 25b46 <bt_l2cap_security_changed+0x28>
   25b34:	3c08      	subs	r4, #8
   25b36:	e006      	b.n	25b46 <bt_l2cap_security_changed+0x28>
   25b38:	4604      	mov	r4, r0
   25b3a:	e004      	b.n	25b46 <bt_l2cap_security_changed+0x28>
   25b3c:	4604      	mov	r4, r0
   25b3e:	e002      	b.n	25b46 <bt_l2cap_security_changed+0x28>
   25b40:	4623      	mov	r3, r4
   25b42:	4620      	mov	r0, r4
   25b44:	461c      	mov	r4, r3
   25b46:	b170      	cbz	r0, 25b66 <bt_l2cap_security_changed+0x48>
		if (chan->ops->encrypt_change) {
   25b48:	6843      	ldr	r3, [r0, #4]
   25b4a:	689b      	ldr	r3, [r3, #8]
   25b4c:	b10b      	cbz	r3, 25b52 <bt_l2cap_security_changed+0x34>
			chan->ops->encrypt_change(chan, hci_status);
   25b4e:	4629      	mov	r1, r5
   25b50:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   25b52:	2c00      	cmp	r4, #0
   25b54:	d0f4      	beq.n	25b40 <bt_l2cap_security_changed+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25b56:	f114 0308 	adds.w	r3, r4, #8
   25b5a:	d0f2      	beq.n	25b42 <bt_l2cap_security_changed+0x24>
	return node->next;
   25b5c:	68a3      	ldr	r3, [r4, #8]
   25b5e:	2b00      	cmp	r3, #0
   25b60:	d0ef      	beq.n	25b42 <bt_l2cap_security_changed+0x24>
   25b62:	3b08      	subs	r3, #8
   25b64:	e7ed      	b.n	25b42 <bt_l2cap_security_changed+0x24>
}
   25b66:	bd38      	pop	{r3, r4, r5, pc}

00025b68 <bt_l2cap_create_pdu_timeout>:
{
   25b68:	b508      	push	{r3, lr}
	return bt_conn_create_pdu_timeout(pool,
   25b6a:	3104      	adds	r1, #4
   25b6c:	f7f2 ff46 	bl	189fc <bt_conn_create_pdu_timeout>
}
   25b70:	bd08      	pop	{r3, pc}

00025b72 <bt_l2cap_send_cb>:
{
   25b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25b74:	4605      	mov	r5, r0
   25b76:	460f      	mov	r7, r1
   25b78:	4614      	mov	r4, r2
   25b7a:	461e      	mov	r6, r3
	return net_buf_simple_push(&buf->b, len);
   25b7c:	2104      	movs	r1, #4
   25b7e:	f102 0008 	add.w	r0, r2, #8
   25b82:	f002 fbee 	bl	28362 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   25b86:	89a3      	ldrh	r3, [r4, #12]
   25b88:	3b04      	subs	r3, #4
   25b8a:	8003      	strh	r3, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
   25b8c:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   25b8e:	9b06      	ldr	r3, [sp, #24]
   25b90:	4632      	mov	r2, r6
   25b92:	4621      	mov	r1, r4
   25b94:	4628      	mov	r0, r5
   25b96:	f7f2 fc6b 	bl	18470 <bt_conn_send_cb>
}
   25b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00025b9c <l2cap_send_reject>:
{
   25b9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25ba0:	b083      	sub	sp, #12
   25ba2:	4605      	mov	r5, r0
   25ba4:	4690      	mov	r8, r2
   25ba6:	461c      	mov	r4, r3
   25ba8:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   25bac:	1cbb      	adds	r3, r7, #2
   25bae:	460a      	mov	r2, r1
   25bb0:	2101      	movs	r1, #1
   25bb2:	2000      	movs	r0, #0
   25bb4:	f7f3 f980 	bl	18eb8 <l2cap_create_le_sig_pdu>
	if (!buf) {
   25bb8:	b1b0      	cbz	r0, 25be8 <l2cap_send_reject+0x4c>
   25bba:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   25bbc:	f100 0908 	add.w	r9, r0, #8
   25bc0:	2102      	movs	r1, #2
   25bc2:	4648      	mov	r0, r9
   25bc4:	f002 fbb5 	bl	28332 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   25bc8:	f8a0 8000 	strh.w	r8, [r0]
	if (data) {
   25bcc:	b124      	cbz	r4, 25bd8 <l2cap_send_reject+0x3c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   25bce:	463a      	mov	r2, r7
   25bd0:	4621      	mov	r1, r4
   25bd2:	4648      	mov	r0, r9
   25bd4:	f002 fbb3 	bl	2833e <net_buf_simple_add_mem>
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   25bd8:	2300      	movs	r3, #0
   25bda:	9300      	str	r3, [sp, #0]
   25bdc:	4632      	mov	r2, r6
   25bde:	2105      	movs	r1, #5
   25be0:	4628      	mov	r0, r5
   25be2:	f7ff ffc6 	bl	25b72 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   25be6:	b910      	cbnz	r0, 25bee <l2cap_send_reject+0x52>
}
   25be8:	b003      	add	sp, #12
   25bea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		net_buf_unref(buf);
   25bee:	4630      	mov	r0, r6
   25bf0:	f002 fb55 	bl	2829e <net_buf_unref>
}
   25bf4:	e7f8      	b.n	25be8 <l2cap_send_reject+0x4c>

00025bf6 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   25bf6:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   25bf8:	b110      	cbz	r0, 25c00 <bt_l2cap_le_lookup_tx_cid+0xa>
   25bfa:	3808      	subs	r0, #8
   25bfc:	e000      	b.n	25c00 <bt_l2cap_le_lookup_tx_cid+0xa>
   25bfe:	3808      	subs	r0, #8
   25c00:	b148      	cbz	r0, 25c16 <bt_l2cap_le_lookup_tx_cid+0x20>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   25c02:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
   25c06:	428b      	cmp	r3, r1
   25c08:	d005      	beq.n	25c16 <bt_l2cap_le_lookup_tx_cid+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25c0a:	f110 0308 	adds.w	r3, r0, #8
   25c0e:	d003      	beq.n	25c18 <bt_l2cap_le_lookup_tx_cid+0x22>
	return node->next;
   25c10:	6880      	ldr	r0, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   25c12:	2800      	cmp	r0, #0
   25c14:	d1f3      	bne.n	25bfe <bt_l2cap_le_lookup_tx_cid+0x8>
}
   25c16:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   25c18:	4618      	mov	r0, r3
   25c1a:	e7f1      	b.n	25c00 <bt_l2cap_le_lookup_tx_cid+0xa>

00025c1c <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   25c1c:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   25c1e:	b110      	cbz	r0, 25c26 <bt_l2cap_le_lookup_rx_cid+0xa>
   25c20:	3808      	subs	r0, #8
   25c22:	e000      	b.n	25c26 <bt_l2cap_le_lookup_rx_cid+0xa>
   25c24:	3808      	subs	r0, #8
   25c26:	b148      	cbz	r0, 25c3c <bt_l2cap_le_lookup_rx_cid+0x20>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   25c28:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   25c2c:	428b      	cmp	r3, r1
   25c2e:	d005      	beq.n	25c3c <bt_l2cap_le_lookup_rx_cid+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25c30:	f110 0308 	adds.w	r3, r0, #8
   25c34:	d003      	beq.n	25c3e <bt_l2cap_le_lookup_rx_cid+0x22>
	return node->next;
   25c36:	6880      	ldr	r0, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   25c38:	2800      	cmp	r0, #0
   25c3a:	d1f3      	bne.n	25c24 <bt_l2cap_le_lookup_rx_cid+0x8>
}
   25c3c:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   25c3e:	4618      	mov	r0, r3
   25c40:	e7f1      	b.n	25c26 <bt_l2cap_le_lookup_rx_cid+0xa>

00025c42 <bt_l2cap_update_conn_param>:
{
   25c42:	b570      	push	{r4, r5, r6, lr}
   25c44:	b082      	sub	sp, #8
   25c46:	4605      	mov	r5, r0
   25c48:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   25c4a:	f7f3 f841 	bl	18cd0 <get_ident>
   25c4e:	4602      	mov	r2, r0
   25c50:	2308      	movs	r3, #8
   25c52:	2112      	movs	r1, #18
   25c54:	2000      	movs	r0, #0
   25c56:	f7f3 f92f 	bl	18eb8 <l2cap_create_le_sig_pdu>
	if (!buf) {
   25c5a:	b1e0      	cbz	r0, 25c96 <bt_l2cap_update_conn_param+0x54>
   25c5c:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   25c5e:	2108      	movs	r1, #8
   25c60:	4408      	add	r0, r1
   25c62:	f002 fb66 	bl	28332 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   25c66:	8823      	ldrh	r3, [r4, #0]
   25c68:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   25c6a:	8863      	ldrh	r3, [r4, #2]
   25c6c:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   25c6e:	88a3      	ldrh	r3, [r4, #4]
   25c70:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   25c72:	88e3      	ldrh	r3, [r4, #6]
   25c74:	80c3      	strh	r3, [r0, #6]
   25c76:	2300      	movs	r3, #0
   25c78:	9300      	str	r3, [sp, #0]
   25c7a:	4632      	mov	r2, r6
   25c7c:	2105      	movs	r1, #5
   25c7e:	4628      	mov	r0, r5
   25c80:	f7ff ff77 	bl	25b72 <bt_l2cap_send_cb>
	if (err) {
   25c84:	4604      	mov	r4, r0
   25c86:	b910      	cbnz	r0, 25c8e <bt_l2cap_update_conn_param+0x4c>
}
   25c88:	4620      	mov	r0, r4
   25c8a:	b002      	add	sp, #8
   25c8c:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   25c8e:	4630      	mov	r0, r6
   25c90:	f002 fb05 	bl	2829e <net_buf_unref>
		return err;
   25c94:	e7f8      	b.n	25c88 <bt_l2cap_update_conn_param+0x46>
		return -ENOMEM;
   25c96:	f06f 040b 	mvn.w	r4, #11
   25c9a:	e7f5      	b.n	25c88 <bt_l2cap_update_conn_param+0x46>

00025c9c <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   25c9c:	4770      	bx	lr

00025c9e <att_sent>:
{
   25c9e:	b508      	push	{r3, lr}
	if (chan->ops->sent) {
   25ca0:	684b      	ldr	r3, [r1, #4]
   25ca2:	695b      	ldr	r3, [r3, #20]
   25ca4:	b10b      	cbz	r3, 25caa <att_sent+0xc>
   25ca6:	4608      	mov	r0, r1
		chan->ops->sent(chan);
   25ca8:	4798      	blx	r3
}
   25caa:	bd08      	pop	{r3, pc}

00025cac <range_is_valid>:
	if (!start || !end) {
   25cac:	b120      	cbz	r0, 25cb8 <range_is_valid+0xc>
   25cae:	b119      	cbz	r1, 25cb8 <range_is_valid+0xc>
	if (start > end) {
   25cb0:	4288      	cmp	r0, r1
   25cb2:	d806      	bhi.n	25cc2 <range_is_valid+0x16>
	return true;
   25cb4:	2001      	movs	r0, #1
}
   25cb6:	4770      	bx	lr
		if (err) {
   25cb8:	b10a      	cbz	r2, 25cbe <range_is_valid+0x12>
			*err = 0U;
   25cba:	2300      	movs	r3, #0
   25cbc:	8013      	strh	r3, [r2, #0]
		return false;
   25cbe:	2000      	movs	r0, #0
   25cc0:	4770      	bx	lr
		if (err) {
   25cc2:	b102      	cbz	r2, 25cc6 <range_is_valid+0x1a>
			*err = start;
   25cc4:	8010      	strh	r0, [r2, #0]
		return false;
   25cc6:	2000      	movs	r0, #0
   25cc8:	4770      	bx	lr

00025cca <err_to_att>:
	if (err < 0 && err >= -0xff) {
   25cca:	f110 0fff 	cmn.w	r0, #255	; 0xff
   25cce:	d201      	bcs.n	25cd4 <err_to_att+0xa>
	return BT_ATT_ERR_UNLIKELY;
   25cd0:	200e      	movs	r0, #14
}
   25cd2:	4770      	bx	lr
		return -err;
   25cd4:	4240      	negs	r0, r0
   25cd6:	b2c0      	uxtb	r0, r0
   25cd8:	4770      	bx	lr

00025cda <attr_read_type_cb>:
{
   25cda:	b410      	push	{r4}
	if (!data->rsp->len) {
   25cdc:	68d4      	ldr	r4, [r2, #12]
   25cde:	7823      	ldrb	r3, [r4, #0]
   25ce0:	b923      	cbnz	r3, 25cec <attr_read_type_cb+0x12>
		data->rsp->len = read + sizeof(*data->item);
   25ce2:	3102      	adds	r1, #2
   25ce4:	7021      	strb	r1, [r4, #0]
	return true;
   25ce6:	2001      	movs	r0, #1
}
   25ce8:	bc10      	pop	{r4}
   25cea:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   25cec:	3102      	adds	r1, #2
   25cee:	428b      	cmp	r3, r1
   25cf0:	d005      	beq.n	25cfe <attr_read_type_cb+0x24>
		frag->len -= sizeof(*data->item);
   25cf2:	8983      	ldrh	r3, [r0, #12]
   25cf4:	3b02      	subs	r3, #2
   25cf6:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   25cf8:	2000      	movs	r0, #0
   25cfa:	6110      	str	r0, [r2, #16]
		return false;
   25cfc:	e7f4      	b.n	25ce8 <attr_read_type_cb+0xe>
	return true;
   25cfe:	2001      	movs	r0, #1
   25d00:	e7f2      	b.n	25ce8 <attr_read_type_cb+0xe>

00025d02 <attr_read_group_cb>:
	if (!data->rsp->len) {
   25d02:	68d0      	ldr	r0, [r2, #12]
   25d04:	7803      	ldrb	r3, [r0, #0]
   25d06:	b91b      	cbnz	r3, 25d10 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   25d08:	3104      	adds	r1, #4
   25d0a:	7001      	strb	r1, [r0, #0]
	return true;
   25d0c:	2001      	movs	r0, #1
   25d0e:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   25d10:	3104      	adds	r1, #4
   25d12:	428b      	cmp	r3, r1
   25d14:	d006      	beq.n	25d24 <attr_read_group_cb+0x22>
		data->buf->len -= sizeof(*data->group);
   25d16:	6891      	ldr	r1, [r2, #8]
   25d18:	898b      	ldrh	r3, [r1, #12]
   25d1a:	3b04      	subs	r3, #4
   25d1c:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   25d1e:	2000      	movs	r0, #0
   25d20:	6110      	str	r0, [r2, #16]
		return false;
   25d22:	4770      	bx	lr
	return true;
   25d24:	2001      	movs	r0, #1
}
   25d26:	4770      	bx	lr

00025d28 <att_prepare_write_req>:
}
   25d28:	2006      	movs	r0, #6
   25d2a:	4770      	bx	lr

00025d2c <att_exec_write_req>:
}
   25d2c:	2006      	movs	r0, #6
   25d2e:	4770      	bx	lr

00025d30 <att_op_get_type>:
	switch (op) {
   25d30:	1e43      	subs	r3, r0, #1
   25d32:	2bd1      	cmp	r3, #209	; 0xd1
   25d34:	d874      	bhi.n	25e20 <att_op_get_type+0xf0>
   25d36:	e8df f003 	tbb	[pc, r3]
   25d3a:	696d      	.short	0x696d
   25d3c:	696d696d 	.word	0x696d696d
   25d40:	696d696d 	.word	0x696d696d
   25d44:	696d696d 	.word	0x696d696d
   25d48:	696d696d 	.word	0x696d696d
   25d4c:	6973736d 	.word	0x6973736d
   25d50:	736d696d 	.word	0x736d696d
   25d54:	7871736f 	.word	0x7871736f
   25d58:	73737373 	.word	0x73737373
   25d5c:	73737373 	.word	0x73737373
   25d60:	73737373 	.word	0x73737373
   25d64:	73737373 	.word	0x73737373
   25d68:	73737373 	.word	0x73737373
   25d6c:	73737373 	.word	0x73737373
   25d70:	73737373 	.word	0x73737373
   25d74:	73737373 	.word	0x73737373
   25d78:	73737373 	.word	0x73737373
   25d7c:	73737373 	.word	0x73737373
   25d80:	73737373 	.word	0x73737373
   25d84:	73737373 	.word	0x73737373
   25d88:	6b737373 	.word	0x6b737373
   25d8c:	73737373 	.word	0x73737373
   25d90:	73737373 	.word	0x73737373
   25d94:	73737373 	.word	0x73737373
   25d98:	73737373 	.word	0x73737373
   25d9c:	73737373 	.word	0x73737373
   25da0:	73737373 	.word	0x73737373
   25da4:	73737373 	.word	0x73737373
   25da8:	73737373 	.word	0x73737373
   25dac:	73737373 	.word	0x73737373
   25db0:	73737373 	.word	0x73737373
   25db4:	73737373 	.word	0x73737373
   25db8:	73737373 	.word	0x73737373
   25dbc:	73737373 	.word	0x73737373
   25dc0:	73737373 	.word	0x73737373
   25dc4:	73737373 	.word	0x73737373
   25dc8:	73737373 	.word	0x73737373
   25dcc:	73737373 	.word	0x73737373
   25dd0:	73737373 	.word	0x73737373
   25dd4:	73737373 	.word	0x73737373
   25dd8:	73737373 	.word	0x73737373
   25ddc:	73737373 	.word	0x73737373
   25de0:	73737373 	.word	0x73737373
   25de4:	73737373 	.word	0x73737373
   25de8:	73737373 	.word	0x73737373
   25dec:	73737373 	.word	0x73737373
   25df0:	73737373 	.word	0x73737373
   25df4:	73737373 	.word	0x73737373
   25df8:	73737373 	.word	0x73737373
   25dfc:	73737373 	.word	0x73737373
   25e00:	73737373 	.word	0x73737373
   25e04:	73737373 	.word	0x73737373
   25e08:	6b737373 	.word	0x6b737373
{
   25e0c:	2001      	movs	r0, #1
   25e0e:	4770      	bx	lr
		return ATT_COMMAND;
   25e10:	2000      	movs	r0, #0
   25e12:	4770      	bx	lr
		return ATT_RESPONSE;
   25e14:	2002      	movs	r0, #2
   25e16:	4770      	bx	lr
		return ATT_NOTIFICATION;
   25e18:	2003      	movs	r0, #3
   25e1a:	4770      	bx	lr
		return ATT_INDICATION;
   25e1c:	2005      	movs	r0, #5
   25e1e:	4770      	bx	lr
	if (op & ATT_CMD_MASK) {
   25e20:	f010 0f40 	tst.w	r0, #64	; 0x40
   25e24:	d103      	bne.n	25e2e <att_op_get_type+0xfe>
	return ATT_UNKNOWN;
   25e26:	2006      	movs	r0, #6
   25e28:	4770      	bx	lr
		return ATT_CONFIRMATION;
   25e2a:	2004      	movs	r0, #4
   25e2c:	4770      	bx	lr
		return ATT_COMMAND;
   25e2e:	2000      	movs	r0, #0
}
   25e30:	4770      	bx	lr

00025e32 <att_chan_attach>:
{
   25e32:	b538      	push	{r3, r4, r5, lr}
   25e34:	4604      	mov	r4, r0
   25e36:	460d      	mov	r5, r1
	return list->head;
   25e38:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (sys_slist_is_empty(&att->chans)) {
   25e3a:	b143      	cbz	r3, 25e4e <att_chan_attach+0x1c>
	sys_slist_prepend(&att->chans, &chan->node);
   25e3c:	f505 73a2 	add.w	r3, r5, #324	; 0x144
   25e40:	6a62      	ldr	r2, [r4, #36]	; 0x24
	parent->next = child;
   25e42:	f8c5 2144 	str.w	r2, [r5, #324]	; 0x144
	list->head = node;
   25e46:	6263      	str	r3, [r4, #36]	; 0x24
	return list->tail;
   25e48:	6aa2      	ldr	r2, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   25e4a:	b122      	cbz	r2, 25e56 <att_chan_attach+0x24>
}
   25e4c:	bd38      	pop	{r3, r4, r5, pc}
		k_fifo_init(&att->tx_queue);
   25e4e:	300c      	adds	r0, #12
	z_impl_k_queue_init(queue);
   25e50:	f003 fa1b 	bl	2928a <z_impl_k_queue_init>
}
   25e54:	e7f2      	b.n	25e3c <att_chan_attach+0xa>
	list->tail = node;
   25e56:	62a3      	str	r3, [r4, #40]	; 0x28
}
   25e58:	e7f8      	b.n	25e4c <att_chan_attach+0x1a>

00025e5a <chan_req_send>:
{
   25e5a:	b538      	push	{r3, r4, r5, lr}
   25e5c:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   25e5e:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
   25e62:	68ab      	ldr	r3, [r5, #8]
	size_t bytes = 0;
   25e64:	2200      	movs	r2, #0
	while (buf) {
   25e66:	b11b      	cbz	r3, 25e70 <chan_req_send+0x16>
		bytes += buf->len;
   25e68:	899c      	ldrh	r4, [r3, #12]
   25e6a:	4422      	add	r2, r4
		buf = buf->frags;
   25e6c:	681b      	ldr	r3, [r3, #0]
   25e6e:	e7fa      	b.n	25e66 <chan_req_send+0xc>
   25e70:	4291      	cmp	r1, r2
   25e72:	d30a      	bcc.n	25e8a <chan_req_send+0x30>
	chan->req = req;
   25e74:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
	buf = req->buf;
   25e78:	68ac      	ldr	r4, [r5, #8]
	req->buf = NULL;
   25e7a:	2200      	movs	r2, #0
   25e7c:	60aa      	str	r2, [r5, #8]
	err = chan_send(chan, buf, NULL);
   25e7e:	4621      	mov	r1, r4
   25e80:	f7f3 fa78 	bl	19374 <chan_send>
	if (err) {
   25e84:	b100      	cbz	r0, 25e88 <chan_req_send+0x2e>
		req->buf = buf;
   25e86:	60ac      	str	r4, [r5, #8]
}
   25e88:	bd38      	pop	{r3, r4, r5, pc}
		return -EMSGSIZE;
   25e8a:	f06f 0079 	mvn.w	r0, #121	; 0x79
   25e8e:	e7fb      	b.n	25e88 <chan_req_send+0x2e>

00025e90 <bt_att_chan_req_send>:
{
   25e90:	b508      	push	{r3, lr}
	return chan_req_send(chan, req);
   25e92:	f7ff ffe2 	bl	25e5a <chan_req_send>
}
   25e96:	bd08      	pop	{r3, pc}

00025e98 <bt_att_status>:
{
   25e98:	b538      	push	{r3, r4, r5, lr}
   25e9a:	f3bf 8f5b 	dmb	ish
   25e9e:	680b      	ldr	r3, [r1, #0]
   25ea0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   25ea4:	f013 0f01 	tst.w	r3, #1
   25ea8:	d007      	beq.n	25eba <bt_att_status+0x22>
   25eaa:	4604      	mov	r4, r0
   25eac:	3808      	subs	r0, #8
	if (!chan->att) {
   25eae:	f854 3c08 	ldr.w	r3, [r4, #-8]
   25eb2:	b113      	cbz	r3, 25eba <bt_att_status+0x22>
	if (chan->req) {
   25eb4:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
   25eb8:	b102      	cbz	r2, 25ebc <bt_att_status+0x24>
}
   25eba:	bd38      	pop	{r3, r4, r5, pc}
	return list->head;
   25ebc:	685d      	ldr	r5, [r3, #4]
Z_GENLIST_GET(slist, snode)
   25ebe:	2d00      	cmp	r5, #0
   25ec0:	d0fb      	beq.n	25eba <bt_att_status+0x22>
	return node->next;
   25ec2:	682a      	ldr	r2, [r5, #0]
	list->head = node;
   25ec4:	605a      	str	r2, [r3, #4]
	return list->tail;
   25ec6:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   25ec8:	42a9      	cmp	r1, r5
   25eca:	d00e      	beq.n	25eea <bt_att_status+0x52>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   25ecc:	4629      	mov	r1, r5
   25ece:	f7ff ffdf 	bl	25e90 <bt_att_chan_req_send>
   25ed2:	2800      	cmp	r0, #0
   25ed4:	daf1      	bge.n	25eba <bt_att_status+0x22>
	sys_slist_prepend(&chan->att->reqs, node);
   25ed6:	f854 3c08 	ldr.w	r3, [r4, #-8]
	return list->head;
   25eda:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   25edc:	602a      	str	r2, [r5, #0]
	list->head = node;
   25ede:	605d      	str	r5, [r3, #4]
	return list->tail;
   25ee0:	689a      	ldr	r2, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
   25ee2:	2a00      	cmp	r2, #0
   25ee4:	d1e9      	bne.n	25eba <bt_att_status+0x22>
	list->tail = node;
   25ee6:	609d      	str	r5, [r3, #8]
}
   25ee8:	e7e7      	b.n	25eba <bt_att_status+0x22>
	list->tail = node;
   25eea:	609a      	str	r2, [r3, #8]
}
   25eec:	e7ee      	b.n	25ecc <bt_att_status+0x34>

00025eee <att_req_send_process>:
{
   25eee:	b570      	push	{r4, r5, r6, lr}
	return list->head;
   25ef0:	6846      	ldr	r6, [r0, #4]
Z_GENLIST_GET(slist, snode)
   25ef2:	2e00      	cmp	r6, #0
   25ef4:	d038      	beq.n	25f68 <att_req_send_process+0x7a>
   25ef6:	4605      	mov	r5, r0
	return node->next;
   25ef8:	6833      	ldr	r3, [r6, #0]
	list->head = node;
   25efa:	6043      	str	r3, [r0, #4]
	return list->tail;
   25efc:	6882      	ldr	r2, [r0, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   25efe:	4296      	cmp	r6, r2
   25f00:	d00d      	beq.n	25f1e <att_req_send_process+0x30>
	return list->head;
   25f02:	6a68      	ldr	r0, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25f04:	b198      	cbz	r0, 25f2e <att_req_send_process+0x40>
   25f06:	f5b0 70a2 	subs.w	r0, r0, #324	; 0x144
   25f0a:	d012      	beq.n	25f32 <att_req_send_process+0x44>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25f0c:	f510 74a2 	adds.w	r4, r0, #324	; 0x144
   25f10:	d014      	beq.n	25f3c <att_req_send_process+0x4e>
	return node->next;
   25f12:	f8d0 4144 	ldr.w	r4, [r0, #324]	; 0x144
   25f16:	b18c      	cbz	r4, 25f3c <att_req_send_process+0x4e>
   25f18:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
   25f1c:	e00e      	b.n	25f3c <att_req_send_process+0x4e>
	list->tail = node;
   25f1e:	6083      	str	r3, [r0, #8]
}
   25f20:	e7ef      	b.n	25f02 <att_req_send_process+0x14>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   25f22:	4631      	mov	r1, r6
   25f24:	f7ff ffb4 	bl	25e90 <bt_att_chan_req_send>
   25f28:	2800      	cmp	r0, #0
   25f2a:	db0c      	blt.n	25f46 <att_req_send_process+0x58>
   25f2c:	e01c      	b.n	25f68 <att_req_send_process+0x7a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25f2e:	4604      	mov	r4, r0
   25f30:	e004      	b.n	25f3c <att_req_send_process+0x4e>
   25f32:	4604      	mov	r4, r0
   25f34:	e002      	b.n	25f3c <att_req_send_process+0x4e>
   25f36:	4623      	mov	r3, r4
   25f38:	4620      	mov	r0, r4
   25f3a:	461c      	mov	r4, r3
   25f3c:	b178      	cbz	r0, 25f5e <att_req_send_process+0x70>
		if (!chan->req) {
   25f3e:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   25f42:	2b00      	cmp	r3, #0
   25f44:	d0ed      	beq.n	25f22 <att_req_send_process+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25f46:	2c00      	cmp	r4, #0
   25f48:	d0f5      	beq.n	25f36 <att_req_send_process+0x48>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25f4a:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   25f4e:	d0f3      	beq.n	25f38 <att_req_send_process+0x4a>
	return node->next;
   25f50:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   25f54:	2b00      	cmp	r3, #0
   25f56:	d0ef      	beq.n	25f38 <att_req_send_process+0x4a>
   25f58:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   25f5c:	e7ec      	b.n	25f38 <att_req_send_process+0x4a>
	return list->head;
   25f5e:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   25f60:	6033      	str	r3, [r6, #0]
	list->head = node;
   25f62:	606e      	str	r6, [r5, #4]
	return list->tail;
   25f64:	68ab      	ldr	r3, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
   25f66:	b103      	cbz	r3, 25f6a <att_req_send_process+0x7c>
}
   25f68:	bd70      	pop	{r4, r5, r6, pc}
	list->tail = node;
   25f6a:	60ae      	str	r6, [r5, #8]
}
   25f6c:	e7fc      	b.n	25f68 <att_req_send_process+0x7a>

00025f6e <bt_att_chan_send>:
{
   25f6e:	b508      	push	{r3, lr}
	return chan_send(chan, buf, cb);
   25f70:	f7f3 fa00 	bl	19374 <chan_send>
}
   25f74:	bd08      	pop	{r3, pc}

00025f76 <chan_req_sent>:
{
   25f76:	b508      	push	{r3, lr}
	if (chan->req) {
   25f78:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   25f7c:	b133      	cbz	r3, 25f8c <chan_req_sent+0x16>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   25f7e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   25f82:	2300      	movs	r3, #0
   25f84:	f500 7088 	add.w	r0, r0, #272	; 0x110
   25f88:	f7fa f912 	bl	201b0 <k_work_reschedule>
}
   25f8c:	bd08      	pop	{r3, pc}

00025f8e <chan_cfm_sent>:
		atomic_clear_bit(chan->flags, ATT_PENDING_CFM);
   25f8e:	30f0      	adds	r0, #240	; 0xf0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25f90:	f3bf 8f5b 	dmb	ish
   25f94:	e850 3f00 	ldrex	r3, [r0]
   25f98:	f023 0302 	bic.w	r3, r3, #2
   25f9c:	e840 3200 	strex	r2, r3, [r0]
   25fa0:	2a00      	cmp	r2, #0
   25fa2:	d1f7      	bne.n	25f94 <chan_cfm_sent+0x6>
   25fa4:	f3bf 8f5b 	dmb	ish
}
   25fa8:	4770      	bx	lr

00025faa <chan_rsp_sent>:
		atomic_clear_bit(chan->flags, ATT_PENDING_RSP);
   25faa:	30f0      	adds	r0, #240	; 0xf0
   25fac:	f3bf 8f5b 	dmb	ish
   25fb0:	e850 3f00 	ldrex	r3, [r0]
   25fb4:	f023 0301 	bic.w	r3, r3, #1
   25fb8:	e840 3200 	strex	r2, r3, [r0]
   25fbc:	2a00      	cmp	r2, #0
   25fbe:	d1f7      	bne.n	25fb0 <chan_rsp_sent+0x6>
   25fc0:	f3bf 8f5b 	dmb	ish
}
   25fc4:	4770      	bx	lr

00025fc6 <process_queue>:
{
   25fc6:	b570      	push	{r4, r5, r6, lr}
   25fc8:	4605      	mov	r5, r0
   25fca:	460c      	mov	r4, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   25fcc:	2200      	movs	r2, #0
   25fce:	2300      	movs	r3, #0
   25fd0:	4608      	mov	r0, r1
   25fd2:	f002 f938 	bl	28246 <net_buf_get>
	if (buf) {
   25fd6:	b170      	cbz	r0, 25ff6 <process_queue+0x30>
   25fd8:	4606      	mov	r6, r0
		err = chan_send(chan, buf, NULL);
   25fda:	2200      	movs	r2, #0
   25fdc:	4601      	mov	r1, r0
   25fde:	4628      	mov	r0, r5
   25fe0:	f7f3 f9c8 	bl	19374 <chan_send>
		if (err) {
   25fe4:	4605      	mov	r5, r0
   25fe6:	b908      	cbnz	r0, 25fec <process_queue+0x26>
}
   25fe8:	4628      	mov	r0, r5
   25fea:	bd70      	pop	{r4, r5, r6, pc}
			k_queue_prepend(&queue->_queue, buf);
   25fec:	4631      	mov	r1, r6
   25fee:	4620      	mov	r0, r4
   25ff0:	f003 f963 	bl	292ba <k_queue_prepend>
			return err;
   25ff4:	e7f8      	b.n	25fe8 <process_queue+0x22>
	return -ENOENT;
   25ff6:	f06f 0501 	mvn.w	r5, #1
   25ffa:	e7f5      	b.n	25fe8 <process_queue+0x22>

00025ffc <bt_att_sent>:
{
   25ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25ffe:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   26000:	f1a0 0608 	sub.w	r6, r0, #8
	struct bt_att *att = chan->att;
   26004:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (chan->sent) {
   26008:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
   2600c:	b10b      	cbz	r3, 26012 <bt_att_sent+0x16>
		chan->sent(chan);
   2600e:	4630      	mov	r0, r6
   26010:	4798      	blx	r3
	atomic_clear_bit(chan->flags, ATT_PENDING_SENT);
   26012:	f104 03e8 	add.w	r3, r4, #232	; 0xe8
   26016:	f3bf 8f5b 	dmb	ish
   2601a:	e853 2f00 	ldrex	r2, [r3]
   2601e:	f022 0210 	bic.w	r2, r2, #16
   26022:	e843 2100 	strex	r1, r2, [r3]
   26026:	2900      	cmp	r1, #0
   26028:	d1f7      	bne.n	2601a <bt_att_sent+0x1e>
   2602a:	f3bf 8f5b 	dmb	ish
	if (!att) {
   2602e:	b145      	cbz	r5, 26042 <bt_att_sent+0x46>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   26030:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   26034:	b133      	cbz	r3, 26044 <bt_att_sent+0x48>
	err = process_queue(chan, &chan->tx_queue);
   26036:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
   2603a:	4630      	mov	r0, r6
   2603c:	f7ff ffc3 	bl	25fc6 <process_queue>
	if (!err) {
   26040:	b9c0      	cbnz	r0, 26074 <bt_att_sent+0x78>
}
   26042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return list->head;
   26044:	686f      	ldr	r7, [r5, #4]
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   26046:	2f00      	cmp	r7, #0
   26048:	d0f5      	beq.n	26036 <bt_att_sent+0x3a>
	return node->next;
   2604a:	683b      	ldr	r3, [r7, #0]
	list->head = node;
   2604c:	606b      	str	r3, [r5, #4]
	return list->tail;
   2604e:	68aa      	ldr	r2, [r5, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   26050:	42ba      	cmp	r2, r7
   26052:	d00d      	beq.n	26070 <bt_att_sent+0x74>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   26054:	4639      	mov	r1, r7
   26056:	4630      	mov	r0, r6
   26058:	f7ff feff 	bl	25e5a <chan_req_send>
   2605c:	2800      	cmp	r0, #0
   2605e:	daf0      	bge.n	26042 <bt_att_sent+0x46>
	return list->head;
   26060:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   26062:	603b      	str	r3, [r7, #0]
	list->head = node;
   26064:	606f      	str	r7, [r5, #4]
	return list->tail;
   26066:	68ab      	ldr	r3, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
   26068:	2b00      	cmp	r3, #0
   2606a:	d1e4      	bne.n	26036 <bt_att_sent+0x3a>
	list->tail = node;
   2606c:	60af      	str	r7, [r5, #8]
}
   2606e:	e7e2      	b.n	26036 <bt_att_sent+0x3a>
	list->tail = node;
   26070:	60ab      	str	r3, [r5, #8]
}
   26072:	e7ef      	b.n	26054 <bt_att_sent+0x58>
	(void)process_queue(chan, &att->tx_queue);
   26074:	f105 010c 	add.w	r1, r5, #12
   26078:	4630      	mov	r0, r6
   2607a:	f7ff ffa4 	bl	25fc6 <process_queue>
   2607e:	e7e0      	b.n	26042 <bt_att_sent+0x46>

00026080 <att_send_process>:
{
   26080:	b570      	push	{r4, r5, r6, lr}
   26082:	4606      	mov	r6, r0
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   26084:	2200      	movs	r2, #0
   26086:	2300      	movs	r3, #0
   26088:	300c      	adds	r0, #12
   2608a:	f002 f8dc 	bl	28246 <net_buf_get>
	if (!buf) {
   2608e:	b360      	cbz	r0, 260ea <att_send_process+0x6a>
   26090:	4605      	mov	r5, r0
	return list->head;
   26092:	6a70      	ldr	r0, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   26094:	b158      	cbz	r0, 260ae <att_send_process+0x2e>
   26096:	f5b0 70a2 	subs.w	r0, r0, #324	; 0x144
   2609a:	d00c      	beq.n	260b6 <att_send_process+0x36>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2609c:	f510 74a2 	adds.w	r4, r0, #324	; 0x144
   260a0:	d006      	beq.n	260b0 <att_send_process+0x30>
	return node->next;
   260a2:	f8d0 4144 	ldr.w	r4, [r0, #324]	; 0x144
   260a6:	b11c      	cbz	r4, 260b0 <att_send_process+0x30>
   260a8:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
   260ac:	e000      	b.n	260b0 <att_send_process+0x30>
   260ae:	4604      	mov	r4, r0
   260b0:	f06f 0301 	mvn.w	r3, #1
   260b4:	e004      	b.n	260c0 <att_send_process+0x40>
   260b6:	4604      	mov	r4, r0
   260b8:	e7fa      	b.n	260b0 <att_send_process+0x30>
   260ba:	4622      	mov	r2, r4
   260bc:	4620      	mov	r0, r4
   260be:	4614      	mov	r4, r2
   260c0:	b188      	cbz	r0, 260e6 <att_send_process+0x66>
		err = bt_att_chan_send(chan, buf, NULL);
   260c2:	2200      	movs	r2, #0
   260c4:	4629      	mov	r1, r5
   260c6:	f7ff ff52 	bl	25f6e <bt_att_chan_send>
		if (err >= 0) {
   260ca:	1e03      	subs	r3, r0, #0
   260cc:	da0b      	bge.n	260e6 <att_send_process+0x66>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   260ce:	2c00      	cmp	r4, #0
   260d0:	d0f3      	beq.n	260ba <att_send_process+0x3a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   260d2:	f514 72a2 	adds.w	r2, r4, #324	; 0x144
   260d6:	d0f1      	beq.n	260bc <att_send_process+0x3c>
	return node->next;
   260d8:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
   260dc:	2a00      	cmp	r2, #0
   260de:	d0ed      	beq.n	260bc <att_send_process+0x3c>
   260e0:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
   260e4:	e7ea      	b.n	260bc <att_send_process+0x3c>
	if (err < 0) {
   260e6:	2b00      	cmp	r3, #0
   260e8:	db00      	blt.n	260ec <att_send_process+0x6c>
}
   260ea:	bd70      	pop	{r4, r5, r6, pc}
		k_queue_prepend(&att->tx_queue._queue, buf);
   260ec:	4629      	mov	r1, r5
   260ee:	f106 000c 	add.w	r0, r6, #12
   260f2:	f003 f8e2 	bl	292ba <k_queue_prepend>
   260f6:	e7f8      	b.n	260ea <att_send_process+0x6a>

000260f8 <write_cb>:
{
   260f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   260fa:	b083      	sub	sp, #12
   260fc:	4606      	mov	r6, r0
   260fe:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   26100:	222a      	movs	r2, #42	; 0x2a
   26102:	4601      	mov	r1, r0
   26104:	6820      	ldr	r0, [r4, #0]
   26106:	f000 fe89 	bl	26e1c <bt_gatt_check_perm>
   2610a:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2610c:	b9e8      	cbnz	r0, 2614a <write_cb+0x52>
   2610e:	4605      	mov	r5, r0
	if (!data->req) {
   26110:	7a23      	ldrb	r3, [r4, #8]
   26112:	b1a3      	cbz	r3, 2613e <write_cb+0x46>
	uint8_t flags = 0U;
   26114:	4603      	mov	r3, r0
	write = attr->write(data->conn, attr, data->value, data->len,
   26116:	68b7      	ldr	r7, [r6, #8]
   26118:	9301      	str	r3, [sp, #4]
   2611a:	8a63      	ldrh	r3, [r4, #18]
   2611c:	9300      	str	r3, [sp, #0]
   2611e:	8a23      	ldrh	r3, [r4, #16]
   26120:	68e2      	ldr	r2, [r4, #12]
   26122:	4631      	mov	r1, r6
   26124:	6820      	ldr	r0, [r4, #0]
   26126:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   26128:	2800      	cmp	r0, #0
   2612a:	db02      	blt.n	26132 <write_cb+0x3a>
   2612c:	8a23      	ldrh	r3, [r4, #16]
   2612e:	4298      	cmp	r0, r3
   26130:	d007      	beq.n	26142 <write_cb+0x4a>
		data->err = err_to_att(write);
   26132:	f7ff fdca 	bl	25cca <err_to_att>
   26136:	7520      	strb	r0, [r4, #20]
}
   26138:	4628      	mov	r0, r5
   2613a:	b003      	add	sp, #12
   2613c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flags |= BT_GATT_WRITE_FLAG_CMD;
   2613e:	2302      	movs	r3, #2
   26140:	e7e9      	b.n	26116 <write_cb+0x1e>
	data->err = 0U;
   26142:	2300      	movs	r3, #0
   26144:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   26146:	2501      	movs	r5, #1
   26148:	e7f6      	b.n	26138 <write_cb+0x40>
		return BT_GATT_ITER_STOP;
   2614a:	2500      	movs	r5, #0
   2614c:	e7f4      	b.n	26138 <write_cb+0x40>

0002614e <bt_att_chan_send_rsp>:
{
   2614e:	b538      	push	{r3, r4, r5, lr}
   26150:	4604      	mov	r4, r0
   26152:	460d      	mov	r5, r1
	err = bt_att_chan_send(chan, buf, cb);
   26154:	f7ff ff0b 	bl	25f6e <bt_att_chan_send>
	if (err) {
   26158:	b900      	cbnz	r0, 2615c <bt_att_chan_send_rsp+0xe>
}
   2615a:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_put(&chan->tx_queue, buf);
   2615c:	4629      	mov	r1, r5
   2615e:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
   26162:	f002 f88f 	bl	28284 <net_buf_put>
}
   26166:	e7f8      	b.n	2615a <bt_att_chan_send_rsp+0xc>

00026168 <att_chan_read>:
{
   26168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2616c:	b085      	sub	sp, #20
   2616e:	4680      	mov	r8, r0
   26170:	4689      	mov	r9, r1
   26172:	9202      	str	r2, [sp, #8]
   26174:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   26176:	6881      	ldr	r1, [r0, #8]
   26178:	9103      	str	r1, [sp, #12]
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2617a:	f8b0 0086 	ldrh.w	r0, [r0, #134]	; 0x86
	while (buf) {
   2617e:	4613      	mov	r3, r2
	size_t bytes = 0;
   26180:	2200      	movs	r2, #0
	while (buf) {
   26182:	b11b      	cbz	r3, 2618c <att_chan_read+0x24>
		bytes += buf->len;
   26184:	8999      	ldrh	r1, [r3, #12]
   26186:	440a      	add	r2, r1
		buf = buf->frags;
   26188:	681b      	ldr	r3, [r3, #0]
   2618a:	e7fa      	b.n	26182 <att_chan_read+0x1a>
   2618c:	4290      	cmp	r0, r2
   2618e:	d804      	bhi.n	2619a <att_chan_read+0x32>
		return 0;
   26190:	2400      	movs	r4, #0
}
   26192:	4620      	mov	r0, r4
   26194:	b005      	add	sp, #20
   26196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(buf);
   2619a:	9802      	ldr	r0, [sp, #8]
   2619c:	f002 f8a9 	bl	282f2 <net_buf_frag_last>
   261a0:	4607      	mov	r7, r0
	size_t len, total = 0;
   261a2:	f04f 0a00 	mov.w	sl, #0
   261a6:	e083      	b.n	262b0 <att_chan_read+0x148>
		bytes += buf->len;
   261a8:	8999      	ldrh	r1, [r3, #12]
   261aa:	440a      	add	r2, r1
		buf = buf->frags;
   261ac:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   261ae:	2b00      	cmp	r3, #0
   261b0:	d1fa      	bne.n	261a8 <att_chan_read+0x40>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   261b2:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   261b4:	f107 0608 	add.w	r6, r7, #8
   261b8:	4630      	mov	r0, r6
   261ba:	f002 f8f6 	bl	283aa <net_buf_simple_tailroom>
   261be:	4284      	cmp	r4, r0
   261c0:	d32c      	bcc.n	2621c <att_chan_read+0xb4>
   261c2:	4630      	mov	r0, r6
   261c4:	f002 f8f1 	bl	283aa <net_buf_simple_tailroom>
   261c8:	4606      	mov	r6, r0
		if (!len) {
   261ca:	2e00      	cmp	r6, #0
   261cc:	d032      	beq.n	26234 <att_chan_read+0xcc>
		read = attr->read(conn, attr, frag->data + frag->len, len,
   261ce:	f8d9 4004 	ldr.w	r4, [r9, #4]
   261d2:	68b9      	ldr	r1, [r7, #8]
   261d4:	89ba      	ldrh	r2, [r7, #12]
   261d6:	9500      	str	r5, [sp, #0]
   261d8:	b2b3      	uxth	r3, r6
   261da:	440a      	add	r2, r1
   261dc:	4649      	mov	r1, r9
   261de:	9803      	ldr	r0, [sp, #12]
   261e0:	47a0      	blx	r4
		if (read < 0) {
   261e2:	1e04      	subs	r4, r0, #0
   261e4:	db5a      	blt.n	2629c <att_chan_read+0x134>
		if (cb && !cb(frag, read, user_data)) {
   261e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   261e8:	b12b      	cbz	r3, 261f6 <att_chan_read+0x8e>
   261ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   261ec:	4621      	mov	r1, r4
   261ee:	4638      	mov	r0, r7
   261f0:	4798      	blx	r3
   261f2:	2800      	cmp	r0, #0
   261f4:	d061      	beq.n	262ba <att_chan_read+0x152>
		net_buf_add(frag, read);
   261f6:	46a3      	mov	fp, r4
	return net_buf_simple_add(&buf->b, len);
   261f8:	4621      	mov	r1, r4
   261fa:	f107 0008 	add.w	r0, r7, #8
   261fe:	f002 f898 	bl	28332 <net_buf_simple_add>
		total += read;
   26202:	44a2      	add	sl, r4
		offset += read;
   26204:	4425      	add	r5, r4
   26206:	b2ad      	uxth	r5, r5
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   26208:	f8b8 0086 	ldrh.w	r0, [r8, #134]	; 0x86
   2620c:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   2620e:	2200      	movs	r2, #0
	while (buf) {
   26210:	2b00      	cmp	r3, #0
   26212:	d049      	beq.n	262a8 <att_chan_read+0x140>
		bytes += buf->len;
   26214:	8999      	ldrh	r1, [r3, #12]
   26216:	440a      	add	r2, r1
		buf = buf->frags;
   26218:	681b      	ldr	r3, [r3, #0]
   2621a:	e7f9      	b.n	26210 <att_chan_read+0xa8>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2621c:	f8b8 6086 	ldrh.w	r6, [r8, #134]	; 0x86
	while (buf) {
   26220:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   26222:	2200      	movs	r2, #0
	while (buf) {
   26224:	e002      	b.n	2622c <att_chan_read+0xc4>
		bytes += buf->len;
   26226:	8999      	ldrh	r1, [r3, #12]
   26228:	440a      	add	r2, r1
		buf = buf->frags;
   2622a:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2622c:	2b00      	cmp	r3, #0
   2622e:	d1fa      	bne.n	26226 <att_chan_read+0xbe>
   26230:	1ab6      	subs	r6, r6, r2
   26232:	e7ca      	b.n	261ca <att_chan_read+0x62>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   26234:	9b02      	ldr	r3, [sp, #8]
   26236:	7998      	ldrb	r0, [r3, #6]
   26238:	f7f7 fd7a 	bl	1dd30 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2623c:	2200      	movs	r2, #0
   2623e:	2300      	movs	r3, #0
   26240:	f001 fffa 	bl	28238 <net_buf_alloc_fixed>
			if (!frag) {
   26244:	4607      	mov	r7, r0
   26246:	b150      	cbz	r0, 2625e <att_chan_read+0xf6>
			net_buf_frag_add(buf, frag);
   26248:	4601      	mov	r1, r0
   2624a:	f8dd b008 	ldr.w	fp, [sp, #8]
   2624e:	4658      	mov	r0, fp
   26250:	f002 f860 	bl	28314 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   26254:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
	size_t bytes = 0;
   26258:	4632      	mov	r2, r6
	while (buf) {
   2625a:	465b      	mov	r3, fp
   2625c:	e004      	b.n	26268 <att_chan_read+0x100>
				return total;
   2625e:	4654      	mov	r4, sl
   26260:	e797      	b.n	26192 <att_chan_read+0x2a>
		bytes += buf->len;
   26262:	8999      	ldrh	r1, [r3, #12]
   26264:	440a      	add	r2, r1
		buf = buf->frags;
   26266:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   26268:	2b00      	cmp	r3, #0
   2626a:	d1fa      	bne.n	26262 <att_chan_read+0xfa>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2626c:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   2626e:	f107 0b08 	add.w	fp, r7, #8
   26272:	4658      	mov	r0, fp
   26274:	f002 f899 	bl	283aa <net_buf_simple_tailroom>
   26278:	4284      	cmp	r4, r0
   2627a:	d304      	bcc.n	26286 <att_chan_read+0x11e>
   2627c:	4658      	mov	r0, fp
   2627e:	f002 f894 	bl	283aa <net_buf_simple_tailroom>
   26282:	4606      	mov	r6, r0
   26284:	e7a3      	b.n	261ce <att_chan_read+0x66>
   26286:	f8b8 1086 	ldrh.w	r1, [r8, #134]	; 0x86
	while (buf) {
   2628a:	9b02      	ldr	r3, [sp, #8]
   2628c:	e002      	b.n	26294 <att_chan_read+0x12c>
		bytes += buf->len;
   2628e:	899a      	ldrh	r2, [r3, #12]
   26290:	4416      	add	r6, r2
		buf = buf->frags;
   26292:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   26294:	2b00      	cmp	r3, #0
   26296:	d1fa      	bne.n	2628e <att_chan_read+0x126>
   26298:	1b8e      	subs	r6, r1, r6
   2629a:	e798      	b.n	261ce <att_chan_read+0x66>
			if (total) {
   2629c:	f1ba 0f00 	cmp.w	sl, #0
   262a0:	f43f af77 	beq.w	26192 <att_chan_read+0x2a>
				return total;
   262a4:	4654      	mov	r4, sl
   262a6:	e774      	b.n	26192 <att_chan_read+0x2a>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   262a8:	4290      	cmp	r0, r2
   262aa:	d906      	bls.n	262ba <att_chan_read+0x152>
   262ac:	45b3      	cmp	fp, r6
   262ae:	d104      	bne.n	262ba <att_chan_read+0x152>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   262b0:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   262b4:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   262b6:	2200      	movs	r2, #0
	while (buf) {
   262b8:	e779      	b.n	261ae <att_chan_read+0x46>
	return total;
   262ba:	4654      	mov	r4, sl
   262bc:	e769      	b.n	26192 <att_chan_read+0x2a>

000262be <read_cb>:
{
   262be:	b5f0      	push	{r4, r5, r6, r7, lr}
   262c0:	b083      	sub	sp, #12
   262c2:	4606      	mov	r6, r0
   262c4:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   262c6:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   262c8:	68b8      	ldr	r0, [r7, #8]
	data->err = 0x00;
   262ca:	2300      	movs	r3, #0
   262cc:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   262ce:	2215      	movs	r2, #21
   262d0:	4631      	mov	r1, r6
   262d2:	f000 fda3 	bl	26e1c <bt_gatt_check_perm>
   262d6:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   262d8:	b118      	cbz	r0, 262e2 <read_cb+0x24>
		return BT_GATT_ITER_STOP;
   262da:	2500      	movs	r5, #0
}
   262dc:	4628      	mov	r0, r5
   262de:	b003      	add	sp, #12
   262e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   262e2:	4605      	mov	r5, r0
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   262e4:	2300      	movs	r3, #0
   262e6:	9301      	str	r3, [sp, #4]
   262e8:	9300      	str	r3, [sp, #0]
   262ea:	88a3      	ldrh	r3, [r4, #4]
   262ec:	68a2      	ldr	r2, [r4, #8]
   262ee:	4631      	mov	r1, r6
   262f0:	4638      	mov	r0, r7
   262f2:	f7ff ff39 	bl	26168 <att_chan_read>
	if (ret < 0) {
   262f6:	2800      	cmp	r0, #0
   262f8:	db01      	blt.n	262fe <read_cb+0x40>
	return BT_GATT_ITER_CONTINUE;
   262fa:	2501      	movs	r5, #1
   262fc:	e7ee      	b.n	262dc <read_cb+0x1e>
		data->err = err_to_att(ret);
   262fe:	f7ff fce4 	bl	25cca <err_to_att>
   26302:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   26304:	e7ea      	b.n	262dc <read_cb+0x1e>

00026306 <find_info_cb>:
{
   26306:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2630a:	4606      	mov	r6, r0
   2630c:	460f      	mov	r7, r1
   2630e:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   26310:	f8d2 8000 	ldr.w	r8, [r2]
	if (!data->rsp) {
   26314:	6893      	ldr	r3, [r2, #8]
   26316:	b14b      	cbz	r3, 2632c <find_info_cb+0x26>
	switch (data->rsp->format) {
   26318:	68a3      	ldr	r3, [r4, #8]
   2631a:	781d      	ldrb	r5, [r3, #0]
   2631c:	2d01      	cmp	r5, #1
   2631e:	d013      	beq.n	26348 <find_info_cb+0x42>
   26320:	2d02      	cmp	r5, #2
   26322:	d02d      	beq.n	26380 <find_info_cb+0x7a>
   26324:	2500      	movs	r5, #0
}
   26326:	4628      	mov	r0, r5
   26328:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2632c:	6850      	ldr	r0, [r2, #4]
	return net_buf_simple_add(&buf->b, len);
   2632e:	2101      	movs	r1, #1
   26330:	3008      	adds	r0, #8
   26332:	f001 fffe 	bl	28332 <net_buf_simple_add>
   26336:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   26338:	6833      	ldr	r3, [r6, #0]
   2633a:	781b      	ldrb	r3, [r3, #0]
   2633c:	b913      	cbnz	r3, 26344 <find_info_cb+0x3e>
   2633e:	2301      	movs	r3, #1
   26340:	7003      	strb	r3, [r0, #0]
   26342:	e7e9      	b.n	26318 <find_info_cb+0x12>
   26344:	2302      	movs	r3, #2
   26346:	e7fb      	b.n	26340 <find_info_cb+0x3a>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   26348:	6833      	ldr	r3, [r6, #0]
   2634a:	f893 9000 	ldrb.w	r9, [r3]
   2634e:	f1b9 0f00 	cmp.w	r9, #0
   26352:	d001      	beq.n	26358 <find_info_cb+0x52>
			return BT_GATT_ITER_STOP;
   26354:	2500      	movs	r5, #0
   26356:	e7e6      	b.n	26326 <find_info_cb+0x20>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   26358:	6860      	ldr	r0, [r4, #4]
   2635a:	2104      	movs	r1, #4
   2635c:	3008      	adds	r0, #8
   2635e:	f001 ffe8 	bl	28332 <net_buf_simple_add>
   26362:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   26364:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   26366:	6832      	ldr	r2, [r6, #0]
   26368:	68e3      	ldr	r3, [r4, #12]
   2636a:	8852      	ldrh	r2, [r2, #2]
   2636c:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2636e:	f8b8 3086 	ldrh.w	r3, [r8, #134]	; 0x86
   26372:	6862      	ldr	r2, [r4, #4]
   26374:	8992      	ldrh	r2, [r2, #12]
   26376:	1a9b      	subs	r3, r3, r2
   26378:	2b04      	cmp	r3, #4
   2637a:	d8d4      	bhi.n	26326 <find_info_cb+0x20>
	return BT_GATT_ITER_STOP;
   2637c:	464d      	mov	r5, r9
   2637e:	e7d2      	b.n	26326 <find_info_cb+0x20>
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   26380:	6833      	ldr	r3, [r6, #0]
   26382:	781b      	ldrb	r3, [r3, #0]
   26384:	2b02      	cmp	r3, #2
   26386:	d001      	beq.n	2638c <find_info_cb+0x86>
			return BT_GATT_ITER_STOP;
   26388:	2500      	movs	r5, #0
   2638a:	e7cc      	b.n	26326 <find_info_cb+0x20>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   2638c:	6860      	ldr	r0, [r4, #4]
   2638e:	2112      	movs	r1, #18
   26390:	3008      	adds	r0, #8
   26392:	f001 ffce 	bl	28332 <net_buf_simple_add>
   26396:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   26398:	8007      	strh	r7, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2639a:	68e0      	ldr	r0, [r4, #12]
   2639c:	6831      	ldr	r1, [r6, #0]
   2639e:	2210      	movs	r2, #16
   263a0:	3101      	adds	r1, #1
   263a2:	3002      	adds	r0, #2
   263a4:	f7fe fb62 	bl	24a6c <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   263a8:	f8b8 3086 	ldrh.w	r3, [r8, #134]	; 0x86
   263ac:	6862      	ldr	r2, [r4, #4]
   263ae:	8992      	ldrh	r2, [r2, #12]
   263b0:	1a9b      	subs	r3, r3, r2
   263b2:	2b12      	cmp	r3, #18
   263b4:	d801      	bhi.n	263ba <find_info_cb+0xb4>
	return BT_GATT_ITER_STOP;
   263b6:	2500      	movs	r5, #0
   263b8:	e7b5      	b.n	26326 <find_info_cb+0x20>
			return BT_GATT_ITER_CONTINUE;
   263ba:	2501      	movs	r5, #1
   263bc:	e7b3      	b.n	26326 <find_info_cb+0x20>

000263be <att_get_fixed_chan>:
{
   263be:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   263c0:	2104      	movs	r1, #4
   263c2:	f7ff fc18 	bl	25bf6 <bt_l2cap_le_lookup_tx_cid>
}
   263c6:	3808      	subs	r0, #8
   263c8:	bd08      	pop	{r3, pc}

000263ca <att_write_cmd>:
{
   263ca:	b530      	push	{r4, r5, lr}
   263cc:	b085      	sub	sp, #20
   263ce:	4605      	mov	r5, r0
   263d0:	460c      	mov	r4, r1
	return net_buf_simple_pull_le16(&buf->b);
   263d2:	f101 0008 	add.w	r0, r1, #8
   263d6:	f001 ffdc 	bl	28392 <net_buf_simple_pull_le16>
   263da:	4603      	mov	r3, r0
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   263dc:	68a2      	ldr	r2, [r4, #8]
   263de:	89a1      	ldrh	r1, [r4, #12]
   263e0:	9102      	str	r1, [sp, #8]
   263e2:	9201      	str	r2, [sp, #4]
   263e4:	2100      	movs	r1, #0
   263e6:	9100      	str	r1, [sp, #0]
   263e8:	460a      	mov	r2, r1
   263ea:	4628      	mov	r0, r5
   263ec:	f7f3 fb06 	bl	199fc <att_write_rsp>
}
   263f0:	b005      	add	sp, #20
   263f2:	bd30      	pop	{r4, r5, pc}

000263f4 <att_write_req>:
{
   263f4:	b530      	push	{r4, r5, lr}
   263f6:	b085      	sub	sp, #20
   263f8:	4605      	mov	r5, r0
   263fa:	460c      	mov	r4, r1
   263fc:	f101 0008 	add.w	r0, r1, #8
   26400:	f001 ffc7 	bl	28392 <net_buf_simple_pull_le16>
   26404:	4603      	mov	r3, r0
			     handle, 0, buf->data, buf->len);
   26406:	68a2      	ldr	r2, [r4, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   26408:	89a1      	ldrh	r1, [r4, #12]
   2640a:	9102      	str	r1, [sp, #8]
   2640c:	9201      	str	r2, [sp, #4]
   2640e:	2200      	movs	r2, #0
   26410:	9200      	str	r2, [sp, #0]
   26412:	2213      	movs	r2, #19
   26414:	2112      	movs	r1, #18
   26416:	4628      	mov	r0, r5
   26418:	f7f3 faf0 	bl	199fc <att_write_rsp>
}
   2641c:	b005      	add	sp, #20
   2641e:	bd30      	pop	{r4, r5, pc}

00026420 <att_req_retry>:
{
   26420:	b570      	push	{r4, r5, r6, lr}
	struct bt_att_req *req = att_chan->req;
   26422:	f8d0 40f4 	ldr.w	r4, [r0, #244]	; 0xf4
	if (!req->encode) {
   26426:	68e3      	ldr	r3, [r4, #12]
   26428:	b1eb      	cbz	r3, 26466 <att_req_retry+0x46>
   2642a:	4605      	mov	r5, r0
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   2642c:	6962      	ldr	r2, [r4, #20]
   2642e:	7c61      	ldrb	r1, [r4, #17]
   26430:	f7f3 f99a 	bl	19768 <bt_att_chan_create_pdu>
	if (!buf) {
   26434:	4606      	mov	r6, r0
   26436:	b1c0      	cbz	r0, 2646a <att_req_retry+0x4a>
	if (req->encode(buf, req->len, req->user_data)) {
   26438:	68e3      	ldr	r3, [r4, #12]
   2643a:	69a2      	ldr	r2, [r4, #24]
   2643c:	6961      	ldr	r1, [r4, #20]
   2643e:	4798      	blx	r3
   26440:	b938      	cbnz	r0, 26452 <att_req_retry+0x32>
	if (chan_send(att_chan, buf, NULL)) {
   26442:	2200      	movs	r2, #0
   26444:	4631      	mov	r1, r6
   26446:	4628      	mov	r0, r5
   26448:	f7f2 ff94 	bl	19374 <chan_send>
   2644c:	b930      	cbnz	r0, 2645c <att_req_retry+0x3c>
	return BT_ATT_ERR_SUCCESS;
   2644e:	2000      	movs	r0, #0
}
   26450:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   26452:	4630      	mov	r0, r6
   26454:	f001 ff23 	bl	2829e <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   26458:	200e      	movs	r0, #14
   2645a:	e7f9      	b.n	26450 <att_req_retry+0x30>
		net_buf_unref(buf);
   2645c:	4630      	mov	r0, r6
   2645e:	f001 ff1e 	bl	2829e <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   26462:	200e      	movs	r0, #14
   26464:	e7f4      	b.n	26450 <att_req_retry+0x30>
		return BT_ATT_ERR_AUTHENTICATION;
   26466:	2005      	movs	r0, #5
   26468:	e7f2      	b.n	26450 <att_req_retry+0x30>
		return BT_ATT_ERR_UNLIKELY;
   2646a:	200e      	movs	r0, #14
   2646c:	e7f0      	b.n	26450 <att_req_retry+0x30>

0002646e <att_read_group_req>:
{
   2646e:	b5f0      	push	{r4, r5, r6, r7, lr}
   26470:	b089      	sub	sp, #36	; 0x24
   26472:	4605      	mov	r5, r0
   26474:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   26476:	7b0c      	ldrb	r4, [r1, #12]
   26478:	3c04      	subs	r4, #4
   2647a:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   2647c:	2c02      	cmp	r4, #2
   2647e:	d001      	beq.n	26484 <att_read_group_req+0x16>
   26480:	2c10      	cmp	r4, #16
   26482:	d142      	bne.n	2650a <att_read_group_req+0x9c>
	return net_buf_simple_pull_mem(&buf->b, len);
   26484:	2104      	movs	r1, #4
   26486:	3008      	adds	r0, #8
   26488:	f001 ff7b 	bl	28382 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   2648c:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2648e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   26490:	4622      	mov	r2, r4
   26492:	1d01      	adds	r1, r0, #4
   26494:	a801      	add	r0, sp, #4
   26496:	f7fe fc43 	bl	24d20 <bt_uuid_create>
   2649a:	b3c8      	cbz	r0, 26510 <att_read_group_req+0xa2>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   2649c:	f10d 0216 	add.w	r2, sp, #22
   264a0:	4639      	mov	r1, r7
   264a2:	4630      	mov	r0, r6
   264a4:	f7ff fc02 	bl	25cac <range_is_valid>
   264a8:	b1f0      	cbz	r0, 264e8 <att_read_group_req+0x7a>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   264aa:	2300      	movs	r3, #0
   264ac:	f88d 3018 	strb.w	r3, [sp, #24]
   264b0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   264b4:	f8ad 301a 	strh.w	r3, [sp, #26]
   264b8:	a906      	add	r1, sp, #24
   264ba:	a801      	add	r0, sp, #4
   264bc:	f7fe fc12 	bl	24ce4 <bt_uuid_cmp>
   264c0:	b158      	cbz	r0, 264da <att_read_group_req+0x6c>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   264c2:	2300      	movs	r3, #0
   264c4:	f88d 301c 	strb.w	r3, [sp, #28]
   264c8:	f642 0301 	movw	r3, #10241	; 0x2801
   264cc:	f8ad 301e 	strh.w	r3, [sp, #30]
   264d0:	a907      	add	r1, sp, #28
   264d2:	a801      	add	r0, sp, #4
   264d4:	f7fe fc06 	bl	24ce4 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   264d8:	b978      	cbnz	r0, 264fa <att_read_group_req+0x8c>
	return att_read_group_rsp(chan, &u.uuid, start_handle, end_handle);
   264da:	463b      	mov	r3, r7
   264dc:	4632      	mov	r2, r6
   264de:	a901      	add	r1, sp, #4
   264e0:	4628      	mov	r0, r5
   264e2:	f7f3 fb41 	bl	19b68 <att_read_group_rsp>
   264e6:	e011      	b.n	2650c <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, err_handle,
   264e8:	2301      	movs	r3, #1
   264ea:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   264ee:	2110      	movs	r1, #16
   264f0:	4628      	mov	r0, r5
   264f2:	f7f3 f98f 	bl	19814 <send_err_rsp>
		return 0;
   264f6:	2000      	movs	r0, #0
   264f8:	e008      	b.n	2650c <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   264fa:	2310      	movs	r3, #16
   264fc:	4632      	mov	r2, r6
   264fe:	4619      	mov	r1, r3
   26500:	4628      	mov	r0, r5
   26502:	f7f3 f987 	bl	19814 <send_err_rsp>
		return 0;
   26506:	2000      	movs	r0, #0
   26508:	e000      	b.n	2650c <att_read_group_req+0x9e>
		return BT_ATT_ERR_INVALID_PDU;
   2650a:	2004      	movs	r0, #4
}
   2650c:	b009      	add	sp, #36	; 0x24
   2650e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_UNLIKELY;
   26510:	200e      	movs	r0, #14
   26512:	e7fb      	b.n	2650c <att_read_group_req+0x9e>

00026514 <att_read_blob_req>:
{
   26514:	b500      	push	{lr}
   26516:	b083      	sub	sp, #12
	req = (void *)buf->data;
   26518:	688a      	ldr	r2, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
   2651a:	8813      	ldrh	r3, [r2, #0]
	offset = sys_le16_to_cpu(req->offset);
   2651c:	8852      	ldrh	r2, [r2, #2]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   2651e:	9200      	str	r2, [sp, #0]
   26520:	220d      	movs	r2, #13
   26522:	210c      	movs	r1, #12
   26524:	f7f3 fbae 	bl	19c84 <att_read_rsp>
}
   26528:	b003      	add	sp, #12
   2652a:	f85d fb04 	ldr.w	pc, [sp], #4

0002652e <att_read_req>:
{
   2652e:	b500      	push	{lr}
   26530:	b083      	sub	sp, #12
	req = (void *)buf->data;
   26532:	688b      	ldr	r3, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
   26534:	881b      	ldrh	r3, [r3, #0]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   26536:	2200      	movs	r2, #0
   26538:	9200      	str	r2, [sp, #0]
   2653a:	220b      	movs	r2, #11
   2653c:	210a      	movs	r1, #10
   2653e:	f7f3 fba1 	bl	19c84 <att_read_rsp>
}
   26542:	b003      	add	sp, #12
   26544:	f85d fb04 	ldr.w	pc, [sp], #4

00026548 <att_read_type_req>:
{
   26548:	b5f0      	push	{r4, r5, r6, r7, lr}
   2654a:	b087      	sub	sp, #28
   2654c:	4605      	mov	r5, r0
   2654e:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   26550:	7b0c      	ldrb	r4, [r1, #12]
   26552:	3c04      	subs	r4, #4
   26554:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   26556:	2c02      	cmp	r4, #2
   26558:	d001      	beq.n	2655e <att_read_type_req+0x16>
   2655a:	2c10      	cmp	r4, #16
   2655c:	d123      	bne.n	265a6 <att_read_type_req+0x5e>
   2655e:	2104      	movs	r1, #4
   26560:	3008      	adds	r0, #8
   26562:	f001 ff0e 	bl	28382 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   26566:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   26568:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   2656a:	4622      	mov	r2, r4
   2656c:	1d01      	adds	r1, r0, #4
   2656e:	a801      	add	r0, sp, #4
   26570:	f7fe fbd6 	bl	24d20 <bt_uuid_create>
   26574:	b1c8      	cbz	r0, 265aa <att_read_type_req+0x62>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   26576:	f10d 0216 	add.w	r2, sp, #22
   2657a:	4639      	mov	r1, r7
   2657c:	4630      	mov	r0, r6
   2657e:	f7ff fb95 	bl	25cac <range_is_valid>
   26582:	b138      	cbz	r0, 26594 <att_read_type_req+0x4c>
	return att_read_type_rsp(chan, &u.uuid, start_handle, end_handle);
   26584:	463b      	mov	r3, r7
   26586:	4632      	mov	r2, r6
   26588:	a901      	add	r1, sp, #4
   2658a:	4628      	mov	r0, r5
   2658c:	f7f3 fbcc 	bl	19d28 <att_read_type_rsp>
}
   26590:	b007      	add	sp, #28
   26592:	bdf0      	pop	{r4, r5, r6, r7, pc}
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, err_handle,
   26594:	2301      	movs	r3, #1
   26596:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2659a:	2108      	movs	r1, #8
   2659c:	4628      	mov	r0, r5
   2659e:	f7f3 f939 	bl	19814 <send_err_rsp>
		return 0;
   265a2:	2000      	movs	r0, #0
   265a4:	e7f4      	b.n	26590 <att_read_type_req+0x48>
		return BT_ATT_ERR_INVALID_PDU;
   265a6:	2004      	movs	r0, #4
   265a8:	e7f2      	b.n	26590 <att_read_type_req+0x48>
		return BT_ATT_ERR_UNLIKELY;
   265aa:	200e      	movs	r0, #14
   265ac:	e7f0      	b.n	26590 <att_read_type_req+0x48>

000265ae <att_find_type_req>:
{
   265ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   265b2:	b087      	sub	sp, #28
   265b4:	4607      	mov	r7, r0
   265b6:	460c      	mov	r4, r1
   265b8:	2106      	movs	r1, #6
   265ba:	f104 0008 	add.w	r0, r4, #8
   265be:	f001 fee0 	bl	28382 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   265c2:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   265c4:	8846      	ldrh	r6, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   265c6:	f8b0 8004 	ldrh.w	r8, [r0, #4]
	value = buf->data;
   265ca:	f8d4 9008 	ldr.w	r9, [r4, #8]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   265ce:	f10d 020e 	add.w	r2, sp, #14
   265d2:	4631      	mov	r1, r6
   265d4:	4628      	mov	r0, r5
   265d6:	f7ff fb69 	bl	25cac <range_is_valid>
   265da:	b1d0      	cbz	r0, 26612 <att_find_type_req+0x64>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   265dc:	2300      	movs	r3, #0
   265de:	f88d 3010 	strb.w	r3, [sp, #16]
   265e2:	f8ad 8012 	strh.w	r8, [sp, #18]
   265e6:	f88d 3014 	strb.w	r3, [sp, #20]
   265ea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   265ee:	f8ad 3016 	strh.w	r3, [sp, #22]
   265f2:	a905      	add	r1, sp, #20
   265f4:	a804      	add	r0, sp, #16
   265f6:	f7fe fb75 	bl	24ce4 <bt_uuid_cmp>
   265fa:	b998      	cbnz	r0, 26624 <att_find_type_req+0x76>
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   265fc:	7b23      	ldrb	r3, [r4, #12]
   265fe:	9300      	str	r3, [sp, #0]
   26600:	464b      	mov	r3, r9
   26602:	4632      	mov	r2, r6
   26604:	4629      	mov	r1, r5
   26606:	4638      	mov	r0, r7
   26608:	f7f3 fbd8 	bl	19dbc <att_find_type_rsp>
}
   2660c:	b007      	add	sp, #28
   2660e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, err_handle,
   26612:	2301      	movs	r3, #1
   26614:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   26618:	2106      	movs	r1, #6
   2661a:	4638      	mov	r0, r7
   2661c:	f7f3 f8fa 	bl	19814 <send_err_rsp>
		return 0;
   26620:	2000      	movs	r0, #0
   26622:	e7f3      	b.n	2660c <att_find_type_req+0x5e>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   26624:	230a      	movs	r3, #10
   26626:	462a      	mov	r2, r5
   26628:	2106      	movs	r1, #6
   2662a:	4638      	mov	r0, r7
   2662c:	f7f3 f8f2 	bl	19814 <send_err_rsp>
		return 0;
   26630:	2000      	movs	r0, #0
   26632:	e7eb      	b.n	2660c <att_find_type_req+0x5e>

00026634 <att_find_info_req>:
{
   26634:	b570      	push	{r4, r5, r6, lr}
   26636:	b082      	sub	sp, #8
   26638:	4604      	mov	r4, r0
	req = (void *)buf->data;
   2663a:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   2663c:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2663e:	885e      	ldrh	r6, [r3, #2]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   26640:	f10d 0206 	add.w	r2, sp, #6
   26644:	4631      	mov	r1, r6
   26646:	4628      	mov	r0, r5
   26648:	f7ff fb30 	bl	25cac <range_is_valid>
   2664c:	b130      	cbz	r0, 2665c <att_find_info_req+0x28>
	return att_find_info_rsp(chan, start_handle, end_handle);
   2664e:	4632      	mov	r2, r6
   26650:	4629      	mov	r1, r5
   26652:	4620      	mov	r0, r4
   26654:	f7f3 fbfc 	bl	19e50 <att_find_info_rsp>
}
   26658:	b002      	add	sp, #8
   2665a:	bd70      	pop	{r4, r5, r6, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, err_handle,
   2665c:	2301      	movs	r3, #1
   2665e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   26662:	2104      	movs	r1, #4
   26664:	4620      	mov	r0, r4
   26666:	f7f3 f8d5 	bl	19814 <send_err_rsp>
		return 0;
   2666a:	2000      	movs	r0, #0
   2666c:	e7f4      	b.n	26658 <att_find_info_req+0x24>

0002666e <bt_att_init>:
{
   2666e:	b508      	push	{r3, lr}
	bt_gatt_init();
   26670:	f7f4 fb1a 	bl	1aca8 <bt_gatt_init>
}
   26674:	bd08      	pop	{r3, pc}

00026676 <att_confirm>:
{
   26676:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   26678:	2300      	movs	r3, #0
   2667a:	898a      	ldrh	r2, [r1, #12]
   2667c:	6889      	ldr	r1, [r1, #8]
   2667e:	f7f3 fc83 	bl	19f88 <att_handle_rsp>
}
   26682:	bd08      	pop	{r3, pc}

00026684 <bt_att_encrypt_change>:
{
   26684:	b570      	push	{r4, r5, r6, lr}
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   26686:	4605      	mov	r5, r0
	struct bt_conn *conn = ch->chan.conn;
   26688:	f855 6908 	ldr.w	r6, [r5], #-8
	if (!att_chan->att) {
   2668c:	f850 3c08 	ldr.w	r3, [r0, #-8]
   26690:	b143      	cbz	r3, 266a4 <bt_att_encrypt_change+0x20>
   26692:	4604      	mov	r4, r0
	if (hci_status) {
   26694:	b171      	cbz	r1, 266b4 <bt_att_encrypt_change+0x30>
		if (att_chan->req && att_chan->req->retrying) {
   26696:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   2669a:	b11b      	cbz	r3, 266a4 <bt_att_encrypt_change+0x20>
   2669c:	7c1b      	ldrb	r3, [r3, #16]
   2669e:	f013 0f01 	tst.w	r3, #1
   266a2:	d100      	bne.n	266a6 <bt_att_encrypt_change+0x22>
}
   266a4:	bd70      	pop	{r4, r5, r6, pc}
			att_handle_rsp(att_chan, NULL, 0,
   266a6:	2305      	movs	r3, #5
   266a8:	2200      	movs	r2, #0
   266aa:	4611      	mov	r1, r2
   266ac:	4628      	mov	r0, r5
   266ae:	f7f3 fc6b 	bl	19f88 <att_handle_rsp>
		return;
   266b2:	e7f7      	b.n	266a4 <bt_att_encrypt_change+0x20>
	bt_gatt_encrypt_change(conn);
   266b4:	4630      	mov	r0, r6
   266b6:	f7f5 f8a1 	bl	1b7fc <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   266ba:	7a73      	ldrb	r3, [r6, #9]
   266bc:	2b01      	cmp	r3, #1
   266be:	d0f1      	beq.n	266a4 <bt_att_encrypt_change+0x20>
	if (!(att_chan->req && att_chan->req->retrying)) {
   266c0:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   266c4:	2b00      	cmp	r3, #0
   266c6:	d0ed      	beq.n	266a4 <bt_att_encrypt_change+0x20>
   266c8:	7c1b      	ldrb	r3, [r3, #16]
   266ca:	f013 0f01 	tst.w	r3, #1
   266ce:	d0e9      	beq.n	266a4 <bt_att_encrypt_change+0x20>
	err = att_req_retry(att_chan);
   266d0:	4628      	mov	r0, r5
   266d2:	f7ff fea5 	bl	26420 <att_req_retry>
	if (err) {
   266d6:	4603      	mov	r3, r0
   266d8:	2800      	cmp	r0, #0
   266da:	d0e3      	beq.n	266a4 <bt_att_encrypt_change+0x20>
		att_handle_rsp(att_chan, NULL, 0, err);
   266dc:	2200      	movs	r2, #0
   266de:	4611      	mov	r1, r2
   266e0:	4628      	mov	r0, r5
   266e2:	f7f3 fc51 	bl	19f88 <att_handle_rsp>
   266e6:	e7dd      	b.n	266a4 <bt_att_encrypt_change+0x20>

000266e8 <att_chan_detach>:
{
   266e8:	b510      	push	{r4, lr}
   266ea:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   266ec:	6800      	ldr	r0, [r0, #0]
   266ee:	f504 72a2 	add.w	r2, r4, #324	; 0x144
	return list->head;
   266f2:	6a43      	ldr	r3, [r0, #36]	; 0x24
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   266f4:	2100      	movs	r1, #0
   266f6:	b1e3      	cbz	r3, 26732 <att_chan_detach+0x4a>
   266f8:	4293      	cmp	r3, r2
   266fa:	d002      	beq.n	26702 <att_chan_detach+0x1a>
   266fc:	4619      	mov	r1, r3
   266fe:	681b      	ldr	r3, [r3, #0]
   26700:	e7f9      	b.n	266f6 <att_chan_detach+0xe>
Z_GENLIST_REMOVE(slist, snode)
   26702:	b149      	cbz	r1, 26718 <att_chan_detach+0x30>
	return node->next;
   26704:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	parent->next = child;
   26708:	600b      	str	r3, [r1, #0]
	return list->tail;
   2670a:	6a83      	ldr	r3, [r0, #40]	; 0x28
Z_GENLIST_REMOVE(slist, snode)
   2670c:	4293      	cmp	r3, r2
   2670e:	d00b      	beq.n	26728 <att_chan_detach+0x40>
	parent->next = child;
   26710:	2300      	movs	r3, #0
   26712:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26716:	e00c      	b.n	26732 <att_chan_detach+0x4a>
	return node->next;
   26718:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	list->head = node;
   2671c:	6243      	str	r3, [r0, #36]	; 0x24
	return list->tail;
   2671e:	6a81      	ldr	r1, [r0, #40]	; 0x28
Z_GENLIST_REMOVE(slist, snode)
   26720:	4291      	cmp	r1, r2
   26722:	d1f5      	bne.n	26710 <att_chan_detach+0x28>
	list->tail = node;
   26724:	6283      	str	r3, [r0, #40]	; 0x28
}
   26726:	e7f3      	b.n	26710 <att_chan_detach+0x28>
	list->tail = node;
   26728:	6281      	str	r1, [r0, #40]	; 0x28
}
   2672a:	e7f1      	b.n	26710 <att_chan_detach+0x28>
		net_buf_unref(buf);
   2672c:	4618      	mov	r0, r3
   2672e:	f001 fdb6 	bl	2829e <net_buf_unref>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   26732:	2200      	movs	r2, #0
   26734:	2300      	movs	r3, #0
   26736:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
   2673a:	f001 fd84 	bl	28246 <net_buf_get>
   2673e:	4603      	mov	r3, r0
   26740:	2800      	cmp	r0, #0
   26742:	d1f3      	bne.n	2672c <att_chan_detach+0x44>
	if (chan->req) {
   26744:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   26748:	b12b      	cbz	r3, 26756 <att_chan_detach+0x6e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   2674a:	230e      	movs	r3, #14
   2674c:	2200      	movs	r2, #0
   2674e:	4611      	mov	r1, r2
   26750:	4620      	mov	r0, r4
   26752:	f7f3 fc19 	bl	19f88 <att_handle_rsp>
	chan->att = NULL;
   26756:	2300      	movs	r3, #0
   26758:	6023      	str	r3, [r4, #0]
}
   2675a:	bd10      	pop	{r4, pc}

0002675c <bt_att_disconnected>:
{
   2675c:	b538      	push	{r3, r4, r5, lr}
   2675e:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   26760:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (!att_chan->att) {
   26764:	b125      	cbz	r5, 26770 <bt_att_disconnected+0x14>
   26766:	3808      	subs	r0, #8
	att_chan_detach(att_chan);
   26768:	f7ff ffbe 	bl	266e8 <att_chan_detach>
	return list->head;
   2676c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (!sys_slist_is_empty(&att->chans)) {
   2676e:	b103      	cbz	r3, 26772 <bt_att_disconnected+0x16>
}
   26770:	bd38      	pop	{r3, r4, r5, pc}
	att_reset(att);
   26772:	4628      	mov	r0, r5
   26774:	f7f3 fc54 	bl	1a020 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   26778:	6820      	ldr	r0, [r4, #0]
   2677a:	f7f5 f8e3 	bl	1b944 <bt_gatt_disconnected>
   2677e:	e7f7      	b.n	26770 <bt_att_disconnected+0x14>

00026780 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   26780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26784:	b082      	sub	sp, #8
   26786:	4607      	mov	r7, r0
   26788:	460d      	mov	r5, r1
   2678a:	4614      	mov	r4, r2
   2678c:	461e      	mov	r6, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   2678e:	f7f2 fcd7 	bl	19140 <att_get>
	if (!att) {
   26792:	b158      	cbz	r0, 267ac <bt_att_send+0x2c>
   26794:	4680      	mov	r8, r0
	}

	/* If callback is set use the fixed channel since bt_l2cap_chan_send
	 * cannot be used with a custom user_data.
	 */
	if (cb) {
   26796:	b17c      	cbz	r4, 267b8 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   26798:	9600      	str	r6, [sp, #0]
   2679a:	4623      	mov	r3, r4
   2679c:	462a      	mov	r2, r5
   2679e:	2104      	movs	r1, #4
   267a0:	4638      	mov	r0, r7
   267a2:	f7ff f9e6 	bl	25b72 <bt_l2cap_send_cb>

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   267a6:	b002      	add	sp, #8
   267a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   267ac:	4628      	mov	r0, r5
   267ae:	f001 fd76 	bl	2829e <net_buf_unref>
		return -ENOTCONN;
   267b2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   267b6:	e7f6      	b.n	267a6 <bt_att_send+0x26>
	net_buf_put(&att->tx_queue, buf);
   267b8:	4629      	mov	r1, r5
   267ba:	300c      	adds	r0, #12
   267bc:	f001 fd62 	bl	28284 <net_buf_put>
	att_send_process(att);
   267c0:	4640      	mov	r0, r8
   267c2:	f7ff fc5d 	bl	26080 <att_send_process>
	return 0;
   267c6:	2000      	movs	r0, #0
   267c8:	e7ed      	b.n	267a6 <bt_att_send+0x26>

000267ca <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   267ca:	b510      	push	{r4, lr}
   267cc:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   267ce:	f7f2 fcb7 	bl	19140 <att_get>
	if (!att) {
   267d2:	b170      	cbz	r0, 267f2 <bt_att_req_send+0x28>
   267d4:	4603      	mov	r3, r0
	parent->next = child;
   267d6:	2200      	movs	r2, #0
   267d8:	6022      	str	r2, [r4, #0]
	return list->tail;
   267da:	6882      	ldr	r2, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   267dc:	b132      	cbz	r2, 267ec <bt_att_req_send+0x22>
	parent->next = child;
   267de:	6014      	str	r4, [r2, #0]
	list->tail = node;
   267e0:	6084      	str	r4, [r0, #8]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   267e2:	4618      	mov	r0, r3
   267e4:	f7ff fb83 	bl	25eee <att_req_send_process>

	return 0;
   267e8:	2000      	movs	r0, #0
}
   267ea:	bd10      	pop	{r4, pc}
   267ec:	6084      	str	r4, [r0, #8]
	list->head = node;
   267ee:	6044      	str	r4, [r0, #4]
}
   267f0:	e7f7      	b.n	267e2 <bt_att_req_send+0x18>
		return -ENOTCONN;
   267f2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   267f6:	e7f8      	b.n	267ea <bt_att_req_send+0x20>

000267f8 <update_range>:
{
   267f8:	b430      	push	{r4, r5}
	if (new_start >= *start && new_end <= *end) {
   267fa:	8804      	ldrh	r4, [r0, #0]
   267fc:	42a2      	cmp	r2, r4
   267fe:	d302      	bcc.n	26806 <update_range+0xe>
   26800:	880d      	ldrh	r5, [r1, #0]
   26802:	42ab      	cmp	r3, r5
   26804:	d908      	bls.n	26818 <update_range+0x20>
	if (*start > new_start) {
   26806:	42a2      	cmp	r2, r4
   26808:	d200      	bcs.n	2680c <update_range+0x14>
		*start = new_start;
   2680a:	8002      	strh	r2, [r0, #0]
	if (*end < new_end) {
   2680c:	880a      	ldrh	r2, [r1, #0]
   2680e:	4293      	cmp	r3, r2
   26810:	d904      	bls.n	2681c <update_range+0x24>
		*end = new_end;
   26812:	800b      	strh	r3, [r1, #0]
	return true;
   26814:	2001      	movs	r0, #1
   26816:	e002      	b.n	2681e <update_range+0x26>
		return false;
   26818:	2000      	movs	r0, #0
   2681a:	e000      	b.n	2681e <update_range+0x26>
	return true;
   2681c:	2001      	movs	r0, #1
}
   2681e:	bc30      	pop	{r4, r5}
   26820:	4770      	bx	lr

00026822 <cf_set_value>:
{
   26822:	b470      	push	{r4, r5, r6}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   26824:	2300      	movs	r3, #0
   26826:	e001      	b.n	2682c <cf_set_value+0xa>
   26828:	3301      	adds	r3, #1
   2682a:	b29b      	uxth	r3, r3
   2682c:	2b02      	cmp	r3, #2
   2682e:	d824      	bhi.n	2687a <cf_set_value+0x58>
   26830:	08dd      	lsrs	r5, r3, #3
   26832:	ebb2 0fd3 	cmp.w	r2, r3, lsr #3
   26836:	d90f      	bls.n	26858 <cf_set_value+0x36>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   26838:	1944      	adds	r4, r0, r5
   2683a:	7a24      	ldrb	r4, [r4, #8]
   2683c:	f003 0607 	and.w	r6, r3, #7
   26840:	40f4      	lsrs	r4, r6
   26842:	f014 0f01 	tst.w	r4, #1
   26846:	d0ef      	beq.n	26828 <cf_set_value+0x6>
		    !(value[i / 8] & BIT(i % 8))) {
   26848:	5d4c      	ldrb	r4, [r1, r5]
   2684a:	fa24 f606 	lsr.w	r6, r4, r6
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   2684e:	f016 0f01 	tst.w	r6, #1
   26852:	d1e9      	bne.n	26828 <cf_set_value+0x6>
			return false;
   26854:	2000      	movs	r0, #0
   26856:	e013      	b.n	26880 <cf_set_value+0x5e>
   26858:	2300      	movs	r3, #0
   2685a:	e008      	b.n	2686e <cf_set_value+0x4c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   2685c:	5ccc      	ldrb	r4, [r1, r3]
   2685e:	f004 0407 	and.w	r4, r4, #7
   26862:	18c5      	adds	r5, r0, r3
   26864:	7a2e      	ldrb	r6, [r5, #8]
   26866:	4334      	orrs	r4, r6
   26868:	722c      	strb	r4, [r5, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   2686a:	3301      	adds	r3, #1
   2686c:	b29b      	uxth	r3, r3
   2686e:	4293      	cmp	r3, r2
   26870:	d205      	bcs.n	2687e <cf_set_value+0x5c>
   26872:	2b00      	cmp	r3, #0
   26874:	d0f2      	beq.n	2685c <cf_set_value+0x3a>
	return true;
   26876:	2001      	movs	r0, #1
   26878:	e002      	b.n	26880 <cf_set_value+0x5e>
   2687a:	2300      	movs	r3, #0
   2687c:	e7f7      	b.n	2686e <cf_set_value+0x4c>
   2687e:	2001      	movs	r0, #1
}
   26880:	bc70      	pop	{r4, r5, r6}
   26882:	4770      	bx	lr

00026884 <gatt_ccc_changed>:
{
   26884:	b510      	push	{r4, lr}
   26886:	460c      	mov	r4, r1
	uint16_t value = 0x0000;
   26888:	2100      	movs	r1, #0
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2688a:	460b      	mov	r3, r1
   2688c:	e000      	b.n	26890 <gatt_ccc_changed+0xc>
   2688e:	3301      	adds	r3, #1
   26890:	2b01      	cmp	r3, #1
   26892:	dc08      	bgt.n	268a6 <gatt_ccc_changed+0x22>
		if (ccc->cfg[i].value > value) {
   26894:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   26898:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   2689c:	8912      	ldrh	r2, [r2, #8]
   2689e:	428a      	cmp	r2, r1
   268a0:	d9f5      	bls.n	2688e <gatt_ccc_changed+0xa>
			value = ccc->cfg[i].value;
   268a2:	4611      	mov	r1, r2
   268a4:	e7f3      	b.n	2688e <gatt_ccc_changed+0xa>
	if (value != ccc->value) {
   268a6:	8aa3      	ldrh	r3, [r4, #20]
   268a8:	4299      	cmp	r1, r3
   268aa:	d003      	beq.n	268b4 <gatt_ccc_changed+0x30>
		ccc->value = value;
   268ac:	82a1      	strh	r1, [r4, #20]
		if (ccc->cfg_changed) {
   268ae:	69a3      	ldr	r3, [r4, #24]
   268b0:	b103      	cbz	r3, 268b4 <gatt_ccc_changed+0x30>
			ccc->cfg_changed(attr, value);
   268b2:	4798      	blx	r3
}
   268b4:	bd10      	pop	{r4, pc}

000268b6 <gatt_indicate_rsp>:
{
   268b6:	b510      	push	{r4, lr}
   268b8:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   268ba:	68a3      	ldr	r3, [r4, #8]
   268bc:	b113      	cbz	r3, 268c4 <gatt_indicate_rsp+0xe>
   268be:	460a      	mov	r2, r1
		params->func(conn, params, err);
   268c0:	4621      	mov	r1, r4
   268c2:	4798      	blx	r3
	params->_ref--;
   268c4:	7da3      	ldrb	r3, [r4, #22]
   268c6:	3b01      	subs	r3, #1
   268c8:	b2db      	uxtb	r3, r3
   268ca:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   268cc:	68e2      	ldr	r2, [r4, #12]
   268ce:	b112      	cbz	r2, 268d6 <gatt_indicate_rsp+0x20>
   268d0:	b90b      	cbnz	r3, 268d6 <gatt_indicate_rsp+0x20>
		params->destroy(params);
   268d2:	4620      	mov	r0, r4
   268d4:	4790      	blx	r2
}
   268d6:	bd10      	pop	{r4, pc}

000268d8 <match_uuid>:
	data->attr = attr;
   268d8:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   268da:	8091      	strh	r1, [r2, #4]
}
   268dc:	2000      	movs	r0, #0
   268de:	4770      	bx	lr

000268e0 <ccc_set_cb>:
}
   268e0:	2000      	movs	r0, #0
   268e2:	4770      	bx	lr

000268e4 <gen_hash_m>:
{
   268e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   268e6:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   268e8:	6806      	ldr	r6, [r0, #0]
   268ea:	7835      	ldrb	r5, [r6, #0]
   268ec:	2d00      	cmp	r5, #0
   268ee:	d161      	bne.n	269b4 <gen_hash_m+0xd0>
   268f0:	4607      	mov	r7, r0
   268f2:	4614      	mov	r4, r2
	switch (u16->val) {
   268f4:	8873      	ldrh	r3, [r6, #2]
   268f6:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   268fa:	d019      	beq.n	26930 <gen_hash_m+0x4c>
   268fc:	d913      	bls.n	26926 <gen_hash_m+0x42>
   268fe:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   26902:	33ff      	adds	r3, #255	; 0xff
   26904:	b29b      	uxth	r3, r3
   26906:	2b04      	cmp	r3, #4
   26908:	d85a      	bhi.n	269c0 <gen_hash_m+0xdc>
		value = sys_cpu_to_le16(handle);
   2690a:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2690e:	2202      	movs	r2, #2
   26910:	f10d 010e 	add.w	r1, sp, #14
   26914:	4620      	mov	r0, r4
   26916:	f7fd fe94 	bl	24642 <tc_cmac_update>
   2691a:	2800      	cmp	r0, #0
   2691c:	d13a      	bne.n	26994 <gen_hash_m+0xb0>
			state->err = -EINVAL;
   2691e:	f06f 0315 	mvn.w	r3, #21
   26922:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   26924:	e047      	b.n	269b6 <gen_hash_m+0xd2>
	switch (u16->val) {
   26926:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   2692a:	b29b      	uxth	r3, r3
   2692c:	2b03      	cmp	r3, #3
   2692e:	d845      	bhi.n	269bc <gen_hash_m+0xd8>
		value = sys_cpu_to_le16(handle);
   26930:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   26934:	2202      	movs	r2, #2
   26936:	f10d 010e 	add.w	r1, sp, #14
   2693a:	4620      	mov	r0, r4
   2693c:	f7fd fe81 	bl	24642 <tc_cmac_update>
   26940:	b918      	cbnz	r0, 2694a <gen_hash_m+0x66>
			state->err = -EINVAL;
   26942:	f06f 0315 	mvn.w	r3, #21
   26946:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   26948:	e035      	b.n	269b6 <gen_hash_m+0xd2>
		value = sys_cpu_to_le16(u16->val);
   2694a:	8873      	ldrh	r3, [r6, #2]
   2694c:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   26950:	2202      	movs	r2, #2
   26952:	f10d 010e 	add.w	r1, sp, #14
   26956:	4620      	mov	r0, r4
   26958:	f7fd fe73 	bl	24642 <tc_cmac_update>
   2695c:	b180      	cbz	r0, 26980 <gen_hash_m+0x9c>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   2695e:	687e      	ldr	r6, [r7, #4]
   26960:	2000      	movs	r0, #0
   26962:	9000      	str	r0, [sp, #0]
   26964:	2310      	movs	r3, #16
   26966:	eb0d 0203 	add.w	r2, sp, r3
   2696a:	4639      	mov	r1, r7
   2696c:	47b0      	blx	r6
		if (len < 0) {
   2696e:	1e02      	subs	r2, r0, #0
   26970:	db0a      	blt.n	26988 <gen_hash_m+0xa4>
		if (tc_cmac_update(&state->state, data, len) ==
   26972:	a904      	add	r1, sp, #16
   26974:	4620      	mov	r0, r4
   26976:	f7fd fe64 	bl	24642 <tc_cmac_update>
   2697a:	b138      	cbz	r0, 2698c <gen_hash_m+0xa8>
	return BT_GATT_ITER_CONTINUE;
   2697c:	2501      	movs	r5, #1
   2697e:	e01a      	b.n	269b6 <gen_hash_m+0xd2>
			state->err = -EINVAL;
   26980:	f06f 0315 	mvn.w	r3, #21
   26984:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   26986:	e016      	b.n	269b6 <gen_hash_m+0xd2>
			state->err = len;
   26988:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2698a:	e014      	b.n	269b6 <gen_hash_m+0xd2>
			state->err = -EINVAL;
   2698c:	f06f 0315 	mvn.w	r3, #21
   26990:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   26992:	e010      	b.n	269b6 <gen_hash_m+0xd2>
		value = sys_cpu_to_le16(u16->val);
   26994:	8873      	ldrh	r3, [r6, #2]
   26996:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2699a:	2202      	movs	r2, #2
   2699c:	f10d 010e 	add.w	r1, sp, #14
   269a0:	4620      	mov	r0, r4
   269a2:	f7fd fe4e 	bl	24642 <tc_cmac_update>
   269a6:	b108      	cbz	r0, 269ac <gen_hash_m+0xc8>
	return BT_GATT_ITER_CONTINUE;
   269a8:	2501      	movs	r5, #1
   269aa:	e004      	b.n	269b6 <gen_hash_m+0xd2>
			state->err = -EINVAL;
   269ac:	f06f 0315 	mvn.w	r3, #21
   269b0:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   269b2:	e000      	b.n	269b6 <gen_hash_m+0xd2>
		return BT_GATT_ITER_CONTINUE;
   269b4:	2501      	movs	r5, #1
}
   269b6:	4628      	mov	r0, r5
   269b8:	b009      	add	sp, #36	; 0x24
   269ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   269bc:	2501      	movs	r5, #1
   269be:	e7fa      	b.n	269b6 <gen_hash_m+0xd2>
   269c0:	2501      	movs	r5, #1
   269c2:	e7f8      	b.n	269b6 <gen_hash_m+0xd2>

000269c4 <sc_restore_rsp>:
{
   269c4:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   269c6:	f7f3 fbf1 	bl	1a1ac <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   269ca:	b188      	cbz	r0, 269f0 <sc_restore_rsp+0x2c>
   269cc:	4603      	mov	r3, r0
   269ce:	7a02      	ldrb	r2, [r0, #8]
   269d0:	f012 0f01 	tst.w	r2, #1
   269d4:	d00c      	beq.n	269f0 <sc_restore_rsp+0x2c>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   269d6:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   269d8:	f3bf 8f5b 	dmb	ish
   269dc:	e853 2f00 	ldrex	r2, [r3]
   269e0:	f042 0201 	orr.w	r2, r2, #1
   269e4:	e843 2100 	strex	r1, r2, [r3]
   269e8:	2900      	cmp	r1, #0
   269ea:	d1f7      	bne.n	269dc <sc_restore_rsp+0x18>
   269ec:	f3bf 8f5b 	dmb	ish
}
   269f0:	bd08      	pop	{r3, pc}

000269f2 <find_ccc_cfg>:
{
   269f2:	b5f0      	push	{r4, r5, r6, r7, lr}
   269f4:	b083      	sub	sp, #12
   269f6:	4607      	mov	r7, r0
   269f8:	460d      	mov	r5, r1
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   269fa:	2400      	movs	r4, #0
   269fc:	e00e      	b.n	26a1c <find_ccc_cfg+0x2a>
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   269fe:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   26a02:	eb05 0040 	add.w	r0, r5, r0, lsl #1
   26a06:	2300      	movs	r3, #0
   26a08:	9300      	str	r3, [sp, #0]
   26a0a:	f8cd 3003 	str.w	r3, [sp, #3]
   26a0e:	2207      	movs	r2, #7
   26a10:	4669      	mov	r1, sp
   26a12:	3001      	adds	r0, #1
   26a14:	f7fe f813 	bl	24a3e <memcmp>
   26a18:	b1a8      	cbz	r0, 26a46 <find_ccc_cfg+0x54>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   26a1a:	3401      	adds	r4, #1
   26a1c:	2c01      	cmp	r4, #1
   26a1e:	d811      	bhi.n	26a44 <find_ccc_cfg+0x52>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   26a20:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   26a24:	eb05 0646 	add.w	r6, r5, r6, lsl #1
		if (conn) {
   26a28:	2f00      	cmp	r7, #0
   26a2a:	d0e8      	beq.n	269fe <find_ccc_cfg+0xc>
						    &cfg->peer)) {
   26a2c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   26a30:	4632      	mov	r2, r6
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   26a32:	3201      	adds	r2, #1
   26a34:	f815 1013 	ldrb.w	r1, [r5, r3, lsl #1]
   26a38:	4638      	mov	r0, r7
   26a3a:	f7fe ff0f 	bl	2585c <bt_conn_is_peer_addr_le>
   26a3e:	2800      	cmp	r0, #0
   26a40:	d0eb      	beq.n	26a1a <find_ccc_cfg+0x28>
   26a42:	e000      	b.n	26a46 <find_ccc_cfg+0x54>
	return NULL;
   26a44:	2600      	movs	r6, #0
}
   26a46:	4630      	mov	r0, r6
   26a48:	b003      	add	sp, #12
   26a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026a4c <ccc_find_cfg>:
{
   26a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26a4e:	4605      	mov	r5, r0
   26a50:	460f      	mov	r7, r1
   26a52:	4616      	mov	r6, r2
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   26a54:	2400      	movs	r4, #0
   26a56:	e000      	b.n	26a5a <ccc_find_cfg+0xe>
   26a58:	3401      	adds	r4, #1
   26a5a:	2c01      	cmp	r4, #1
   26a5c:	d815      	bhi.n	26a8a <ccc_find_cfg+0x3e>
		if (id == ccc->cfg[i].id &&
   26a5e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   26a62:	f815 3013 	ldrb.w	r3, [r5, r3, lsl #1]
   26a66:	42b3      	cmp	r3, r6
   26a68:	d1f6      	bne.n	26a58 <ccc_find_cfg+0xc>
		    !bt_addr_le_cmp(&ccc->cfg[i].peer, addr)) {
   26a6a:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   26a6e:	eb05 0040 	add.w	r0, r5, r0, lsl #1
   26a72:	2207      	movs	r2, #7
   26a74:	4639      	mov	r1, r7
   26a76:	3001      	adds	r0, #1
   26a78:	f7fd ffe1 	bl	24a3e <memcmp>
		if (id == ccc->cfg[i].id &&
   26a7c:	2800      	cmp	r0, #0
   26a7e:	d1eb      	bne.n	26a58 <ccc_find_cfg+0xc>
			return &ccc->cfg[i];
   26a80:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   26a84:	eb05 0044 	add.w	r0, r5, r4, lsl #1
   26a88:	e000      	b.n	26a8c <ccc_find_cfg+0x40>
	return NULL;
   26a8a:	2000      	movs	r0, #0
}
   26a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00026a8e <clear_ccc_cfg>:
{
   26a8e:	b530      	push	{r4, r5, lr}
   26a90:	b083      	sub	sp, #12
   26a92:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   26a94:	2500      	movs	r5, #0
   26a96:	9500      	str	r5, [sp, #0]
   26a98:	f8cd 5003 	str.w	r5, [sp, #3]
	memcpy(dst, src, sizeof(*dst));
   26a9c:	2207      	movs	r2, #7
   26a9e:	4669      	mov	r1, sp
   26aa0:	3001      	adds	r0, #1
   26aa2:	f7fd ffe3 	bl	24a6c <memcpy>
	cfg->id = 0U;
   26aa6:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   26aa8:	8125      	strh	r5, [r4, #8]
}
   26aaa:	b003      	add	sp, #12
   26aac:	bd30      	pop	{r4, r5, pc}

00026aae <ccc_clear>:
{
   26aae:	b508      	push	{r3, lr}
	cfg = ccc_find_cfg(ccc, addr, id);
   26ab0:	f7ff ffcc 	bl	26a4c <ccc_find_cfg>
	if (!cfg) {
   26ab4:	b108      	cbz	r0, 26aba <ccc_clear+0xc>
	clear_ccc_cfg(cfg);
   26ab6:	f7ff ffea 	bl	26a8e <clear_ccc_cfg>
}
   26aba:	bd08      	pop	{r3, pc}

00026abc <clear_sc_cfg>:
{
   26abc:	b508      	push	{r3, lr}
	memset(cfg, 0, sizeof(*cfg));
   26abe:	220c      	movs	r2, #12
   26ac0:	2100      	movs	r1, #0
   26ac2:	f7fd fff7 	bl	24ab4 <memset>
}
   26ac6:	bd08      	pop	{r3, pc}

00026ac8 <sc_ccc_cfg_write>:
{
   26ac8:	b508      	push	{r3, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   26aca:	2a02      	cmp	r2, #2
   26acc:	d003      	beq.n	26ad6 <sc_ccc_cfg_write+0xe>
		sc_clear(conn);
   26ace:	f7f3 fe23 	bl	1a718 <sc_clear>
}
   26ad2:	2002      	movs	r0, #2
   26ad4:	bd08      	pop	{r3, pc}
		sc_save(conn->id, &conn->le.dst, 0, 0);
   26ad6:	2300      	movs	r3, #0
   26ad8:	461a      	mov	r2, r3
   26ada:	f100 0188 	add.w	r1, r0, #136	; 0x88
   26ade:	7a00      	ldrb	r0, [r0, #8]
   26ae0:	f7f3 fd3c 	bl	1a55c <sc_save>
   26ae4:	e7f5      	b.n	26ad2 <sc_ccc_cfg_write+0xa>

00026ae6 <sc_reset>:
{
   26ae6:	b510      	push	{r4, lr}
   26ae8:	4604      	mov	r4, r0
	memset(&cfg->data, 0, sizeof(cfg->data));
   26aea:	2204      	movs	r2, #4
   26aec:	2100      	movs	r1, #0
   26aee:	3008      	adds	r0, #8
   26af0:	f7fd ffe0 	bl	24ab4 <memset>
		sc_store(cfg);
   26af4:	4620      	mov	r0, r4
   26af6:	f7f3 fcf3 	bl	1a4e0 <sc_store>
}
   26afa:	bd10      	pop	{r4, pc}

00026afc <gatt_foreach_iter>:
	if (handle > end_handle) {
   26afc:	4299      	cmp	r1, r3
   26afe:	d822      	bhi.n	26b46 <gatt_foreach_iter+0x4a>
{
   26b00:	b538      	push	{r3, r4, r5, lr}
   26b02:	4605      	mov	r5, r0
   26b04:	460c      	mov	r4, r1
	if (handle < start_handle) {
   26b06:	4291      	cmp	r1, r2
   26b08:	d31f      	bcc.n	26b4a <gatt_foreach_iter+0x4e>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   26b0a:	9b04      	ldr	r3, [sp, #16]
   26b0c:	b123      	cbz	r3, 26b18 <gatt_foreach_iter+0x1c>
   26b0e:	6801      	ldr	r1, [r0, #0]
   26b10:	4618      	mov	r0, r3
   26b12:	f7fe f8e7 	bl	24ce4 <bt_uuid_cmp>
   26b16:	b9d0      	cbnz	r0, 26b4e <gatt_foreach_iter+0x52>
	if (attr_data && attr_data != attr->user_data) {
   26b18:	9b05      	ldr	r3, [sp, #20]
   26b1a:	b12b      	cbz	r3, 26b28 <gatt_foreach_iter+0x2c>
   26b1c:	68eb      	ldr	r3, [r5, #12]
   26b1e:	9a05      	ldr	r2, [sp, #20]
   26b20:	4293      	cmp	r3, r2
   26b22:	d001      	beq.n	26b28 <gatt_foreach_iter+0x2c>
		return BT_GATT_ITER_CONTINUE;
   26b24:	2001      	movs	r0, #1
   26b26:	e011      	b.n	26b4c <gatt_foreach_iter+0x50>
	*num_matches -= 1;
   26b28:	9b06      	ldr	r3, [sp, #24]
   26b2a:	881b      	ldrh	r3, [r3, #0]
   26b2c:	3b01      	subs	r3, #1
   26b2e:	9a06      	ldr	r2, [sp, #24]
   26b30:	8013      	strh	r3, [r2, #0]
	result = func(attr, handle, user_data);
   26b32:	9a08      	ldr	r2, [sp, #32]
   26b34:	4621      	mov	r1, r4
   26b36:	4628      	mov	r0, r5
   26b38:	9b07      	ldr	r3, [sp, #28]
   26b3a:	4798      	blx	r3
	if (!*num_matches) {
   26b3c:	9b06      	ldr	r3, [sp, #24]
   26b3e:	881b      	ldrh	r3, [r3, #0]
   26b40:	b923      	cbnz	r3, 26b4c <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   26b42:	2000      	movs	r0, #0
   26b44:	e002      	b.n	26b4c <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   26b46:	2000      	movs	r0, #0
}
   26b48:	4770      	bx	lr
		return BT_GATT_ITER_CONTINUE;
   26b4a:	2001      	movs	r0, #1
}
   26b4c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ITER_CONTINUE;
   26b4e:	2001      	movs	r0, #1
   26b50:	e7fc      	b.n	26b4c <gatt_foreach_iter+0x50>

00026b52 <gatt_req_alloc>:
{
   26b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26b56:	4607      	mov	r7, r0
   26b58:	4688      	mov	r8, r1
   26b5a:	4615      	mov	r5, r2
   26b5c:	461e      	mov	r6, r3
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   26b5e:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   26b62:	2100      	movs	r1, #0
   26b64:	f7f3 f9e4 	bl	19f30 <bt_att_req_alloc>
	if (!req) {
   26b68:	4604      	mov	r4, r0
   26b6a:	b130      	cbz	r0, 26b7a <gatt_req_alloc+0x28>
	req->att_op = op;
   26b6c:	7446      	strb	r6, [r0, #17]
	req->len = len;
   26b6e:	9b06      	ldr	r3, [sp, #24]
   26b70:	6143      	str	r3, [r0, #20]
	req->encode = encode;
   26b72:	60c5      	str	r5, [r0, #12]
	req->func = func;
   26b74:	6047      	str	r7, [r0, #4]
	req->user_data = params;
   26b76:	f8c0 8018 	str.w	r8, [r0, #24]
}
   26b7a:	4620      	mov	r0, r4
   26b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00026b80 <clear_cf_cfg>:
{
   26b80:	b530      	push	{r4, r5, lr}
   26b82:	b083      	sub	sp, #12
   26b84:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   26b86:	2500      	movs	r5, #0
   26b88:	9500      	str	r5, [sp, #0]
   26b8a:	f8cd 5003 	str.w	r5, [sp, #3]
   26b8e:	2207      	movs	r2, #7
   26b90:	4669      	mov	r1, sp
   26b92:	3001      	adds	r0, #1
   26b94:	f7fd ff6a 	bl	24a6c <memcpy>
	memset(cfg->data, 0, sizeof(cfg->data));
   26b98:	2201      	movs	r2, #1
   26b9a:	4629      	mov	r1, r5
   26b9c:	f104 0008 	add.w	r0, r4, #8
   26ba0:	f7fd ff88 	bl	24ab4 <memset>
	atomic_set(cfg->flags, 0);
   26ba4:	340c      	adds	r4, #12
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   26ba6:	f3bf 8f5b 	dmb	ish
   26baa:	e854 3f00 	ldrex	r3, [r4]
   26bae:	e844 5200 	strex	r2, r5, [r4]
   26bb2:	2a00      	cmp	r2, #0
   26bb4:	d1f9      	bne.n	26baa <clear_cf_cfg+0x2a>
   26bb6:	f3bf 8f5b 	dmb	ish
}
   26bba:	b003      	add	sp, #12
   26bbc:	bd30      	pop	{r4, r5, pc}

00026bbe <remove_cf_cfg>:
{
   26bbe:	b570      	push	{r4, r5, r6, lr}
   26bc0:	4604      	mov	r4, r0
	cfg = find_cf_cfg(conn);
   26bc2:	f7f3 faf3 	bl	1a1ac <find_cf_cfg>
	if (!cfg) {
   26bc6:	b1e8      	cbz	r0, 26c04 <remove_cf_cfg+0x46>
   26bc8:	4605      	mov	r5, r0
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   26bca:	f104 0688 	add.w	r6, r4, #136	; 0x88
   26bce:	4631      	mov	r1, r6
   26bd0:	7a20      	ldrb	r0, [r4, #8]
   26bd2:	f7fe fa43 	bl	2505c <bt_addr_le_is_bonded>
   26bd6:	b918      	cbnz	r0, 26be0 <remove_cf_cfg+0x22>
		clear_cf_cfg(cfg);
   26bd8:	4628      	mov	r0, r5
   26bda:	f7ff ffd1 	bl	26b80 <clear_cf_cfg>
   26bde:	e011      	b.n	26c04 <remove_cf_cfg+0x46>
   26be0:	2207      	movs	r2, #7
   26be2:	4631      	mov	r1, r6
   26be4:	1c68      	adds	r0, r5, #1
   26be6:	f7fd ff41 	bl	24a6c <memcpy>
		atomic_clear_bit(cfg->flags, CF_OUT_OF_SYNC);
   26bea:	350c      	adds	r5, #12
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   26bec:	f3bf 8f5b 	dmb	ish
   26bf0:	e855 3f00 	ldrex	r3, [r5]
   26bf4:	f023 0302 	bic.w	r3, r3, #2
   26bf8:	e845 3200 	strex	r2, r3, [r5]
   26bfc:	2a00      	cmp	r2, #0
   26bfe:	d1f7      	bne.n	26bf0 <remove_cf_cfg+0x32>
   26c00:	f3bf 8f5b 	dmb	ish
}
   26c04:	bd70      	pop	{r4, r5, r6, pc}

00026c06 <bt_gatt_attr_read>:
{
   26c06:	b510      	push	{r4, lr}
   26c08:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   26c0c:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   26c10:	42a1      	cmp	r1, r4
   26c12:	d80c      	bhi.n	26c2e <bt_gatt_attr_read+0x28>
   26c14:	4610      	mov	r0, r2
	len = MIN(buf_len, value_len - offset);
   26c16:	1a64      	subs	r4, r4, r1
   26c18:	42a3      	cmp	r3, r4
   26c1a:	bfa8      	it	ge
   26c1c:	4623      	movge	r3, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   26c1e:	b29c      	uxth	r4, r3
   26c20:	4622      	mov	r2, r4
   26c22:	9b03      	ldr	r3, [sp, #12]
   26c24:	4419      	add	r1, r3
   26c26:	f7fd ff21 	bl	24a6c <memcpy>
}
   26c2a:	4620      	mov	r0, r4
   26c2c:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   26c2e:	f06f 0406 	mvn.w	r4, #6
   26c32:	e7fa      	b.n	26c2a <bt_gatt_attr_read+0x24>

00026c34 <read_ppcp>:
{
   26c34:	b510      	push	{r4, lr}
   26c36:	b086      	sub	sp, #24
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   26c38:	2418      	movs	r4, #24
   26c3a:	f8ad 4010 	strh.w	r4, [sp, #16]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   26c3e:	2428      	movs	r4, #40	; 0x28
   26c40:	f8ad 4012 	strh.w	r4, [sp, #18]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   26c44:	2400      	movs	r4, #0
   26c46:	f8ad 4014 	strh.w	r4, [sp, #20]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   26c4a:	242a      	movs	r4, #42	; 0x2a
   26c4c:	f8ad 4016 	strh.w	r4, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   26c50:	2408      	movs	r4, #8
   26c52:	9402      	str	r4, [sp, #8]
   26c54:	ac04      	add	r4, sp, #16
   26c56:	9401      	str	r4, [sp, #4]
   26c58:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   26c5c:	9400      	str	r4, [sp, #0]
   26c5e:	f7ff ffd2 	bl	26c06 <bt_gatt_attr_read>
}
   26c62:	b006      	add	sp, #24
   26c64:	bd10      	pop	{r4, pc}

00026c66 <read_appearance>:
{
   26c66:	b510      	push	{r4, lr}
   26c68:	b086      	sub	sp, #24
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   26c6a:	f240 3441 	movw	r4, #833	; 0x341
   26c6e:	f8ad 4016 	strh.w	r4, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   26c72:	2402      	movs	r4, #2
   26c74:	9402      	str	r4, [sp, #8]
   26c76:	f10d 0416 	add.w	r4, sp, #22
   26c7a:	9401      	str	r4, [sp, #4]
   26c7c:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   26c80:	9400      	str	r4, [sp, #0]
   26c82:	f7ff ffc0 	bl	26c06 <bt_gatt_attr_read>
}
   26c86:	b006      	add	sp, #24
   26c88:	bd10      	pop	{r4, pc}

00026c8a <read_name>:
{
   26c8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26c8e:	b084      	sub	sp, #16
   26c90:	4604      	mov	r4, r0
   26c92:	460d      	mov	r5, r1
   26c94:	4616      	mov	r6, r2
   26c96:	461f      	mov	r7, r3
	const char *name = bt_get_name();
   26c98:	f7f0 f894 	bl	16dc4 <bt_get_name>
   26c9c:	4680      	mov	r8, r0
				 strlen(name));
   26c9e:	f7fd fe97 	bl	249d0 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   26ca2:	b280      	uxth	r0, r0
   26ca4:	9002      	str	r0, [sp, #8]
   26ca6:	f8cd 8004 	str.w	r8, [sp, #4]
   26caa:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   26cae:	9300      	str	r3, [sp, #0]
   26cb0:	463b      	mov	r3, r7
   26cb2:	4632      	mov	r2, r6
   26cb4:	4629      	mov	r1, r5
   26cb6:	4620      	mov	r0, r4
   26cb8:	f7ff ffa5 	bl	26c06 <bt_gatt_attr_read>
}
   26cbc:	b004      	add	sp, #16
   26cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00026cc2 <cf_read>:
{
   26cc2:	b5f0      	push	{r4, r5, r6, r7, lr}
   26cc4:	b087      	sub	sp, #28
   26cc6:	4604      	mov	r4, r0
   26cc8:	460d      	mov	r5, r1
   26cca:	4616      	mov	r6, r2
   26ccc:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   26cce:	2300      	movs	r3, #0
   26cd0:	f88d 3014 	strb.w	r3, [sp, #20]
	cfg = find_cf_cfg(conn);
   26cd4:	f7f3 fa6a 	bl	1a1ac <find_cf_cfg>
	if (cfg) {
   26cd8:	b128      	cbz	r0, 26ce6 <cf_read+0x24>
   26cda:	4601      	mov	r1, r0
		memcpy(data, cfg->data, sizeof(data));
   26cdc:	2201      	movs	r2, #1
   26cde:	3108      	adds	r1, #8
   26ce0:	a805      	add	r0, sp, #20
   26ce2:	f7fd fec3 	bl	24a6c <memcpy>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   26ce6:	2301      	movs	r3, #1
   26ce8:	9302      	str	r3, [sp, #8]
   26cea:	ab05      	add	r3, sp, #20
   26cec:	9301      	str	r3, [sp, #4]
   26cee:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   26cf2:	9300      	str	r3, [sp, #0]
   26cf4:	463b      	mov	r3, r7
   26cf6:	4632      	mov	r2, r6
   26cf8:	4629      	mov	r1, r5
   26cfa:	4620      	mov	r0, r4
   26cfc:	f7ff ff83 	bl	26c06 <bt_gatt_attr_read>
}
   26d00:	b007      	add	sp, #28
   26d02:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026d04 <bt_gatt_attr_read_service>:
{
   26d04:	b570      	push	{r4, r5, r6, lr}
   26d06:	b086      	sub	sp, #24
   26d08:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	struct bt_uuid *uuid = attr->user_data;
   26d0c:	68cc      	ldr	r4, [r1, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   26d0e:	7826      	ldrb	r6, [r4, #0]
   26d10:	b146      	cbz	r6, 26d24 <bt_gatt_attr_read_service+0x20>
				 BT_UUID_128(uuid)->val, 16);
   26d12:	3401      	adds	r4, #1
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   26d14:	2610      	movs	r6, #16
   26d16:	9602      	str	r6, [sp, #8]
   26d18:	9401      	str	r4, [sp, #4]
   26d1a:	9500      	str	r5, [sp, #0]
   26d1c:	f7ff ff73 	bl	26c06 <bt_gatt_attr_read>
}
   26d20:	b006      	add	sp, #24
   26d22:	bd70      	pop	{r4, r5, r6, pc}
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   26d24:	8864      	ldrh	r4, [r4, #2]
   26d26:	f8ad 4016 	strh.w	r4, [sp, #22]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   26d2a:	2402      	movs	r4, #2
   26d2c:	9402      	str	r4, [sp, #8]
   26d2e:	f10d 0416 	add.w	r4, sp, #22
   26d32:	9401      	str	r4, [sp, #4]
   26d34:	9500      	str	r5, [sp, #0]
   26d36:	f7ff ff66 	bl	26c06 <bt_gatt_attr_read>
   26d3a:	e7f1      	b.n	26d20 <bt_gatt_attr_read_service+0x1c>

00026d3c <bt_gatt_attr_read_ccc>:
{
   26d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   26d3e:	b087      	sub	sp, #28
   26d40:	4605      	mov	r5, r0
   26d42:	460c      	mov	r4, r1
   26d44:	4616      	mov	r6, r2
   26d46:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   26d48:	68c9      	ldr	r1, [r1, #12]
   26d4a:	f7ff fe52 	bl	269f2 <find_ccc_cfg>
	if (cfg) {
   26d4e:	b190      	cbz	r0, 26d76 <bt_gatt_attr_read_ccc+0x3a>
		value = sys_cpu_to_le16(cfg->value);
   26d50:	8903      	ldrh	r3, [r0, #8]
   26d52:	f8ad 3016 	strh.w	r3, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   26d56:	2302      	movs	r3, #2
   26d58:	9302      	str	r3, [sp, #8]
   26d5a:	f10d 0316 	add.w	r3, sp, #22
   26d5e:	9301      	str	r3, [sp, #4]
   26d60:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   26d64:	9300      	str	r3, [sp, #0]
   26d66:	463b      	mov	r3, r7
   26d68:	4632      	mov	r2, r6
   26d6a:	4621      	mov	r1, r4
   26d6c:	4628      	mov	r0, r5
   26d6e:	f7ff ff4a 	bl	26c06 <bt_gatt_attr_read>
}
   26d72:	b007      	add	sp, #28
   26d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = 0x0000;
   26d76:	2300      	movs	r3, #0
   26d78:	f8ad 3016 	strh.w	r3, [sp, #22]
   26d7c:	e7eb      	b.n	26d56 <bt_gatt_attr_read_ccc+0x1a>

00026d7e <bt_gatt_attr_value_handle>:
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   26d7e:	b1b8      	cbz	r0, 26db0 <bt_gatt_attr_value_handle+0x32>
{
   26d80:	b510      	push	{r4, lr}
   26d82:	b082      	sub	sp, #8
   26d84:	4604      	mov	r4, r0
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   26d86:	2300      	movs	r3, #0
   26d88:	f88d 3004 	strb.w	r3, [sp, #4]
   26d8c:	f642 0303 	movw	r3, #10243	; 0x2803
   26d90:	f8ad 3006 	strh.w	r3, [sp, #6]
   26d94:	a901      	add	r1, sp, #4
   26d96:	6800      	ldr	r0, [r0, #0]
   26d98:	f7fd ffa4 	bl	24ce4 <bt_uuid_cmp>
   26d9c:	b950      	cbnz	r0, 26db4 <bt_gatt_attr_value_handle+0x36>
		struct bt_gatt_chrc *chrc = attr->user_data;
   26d9e:	68e3      	ldr	r3, [r4, #12]
		handle = chrc->value_handle;
   26da0:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   26da2:	b940      	cbnz	r0, 26db6 <bt_gatt_attr_value_handle+0x38>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   26da4:	4620      	mov	r0, r4
   26da6:	f7f3 ffbb 	bl	1ad20 <bt_gatt_attr_get_handle>
   26daa:	3001      	adds	r0, #1
   26dac:	b280      	uxth	r0, r0
   26dae:	e002      	b.n	26db6 <bt_gatt_attr_value_handle+0x38>
	uint16_t handle = 0;
   26db0:	2000      	movs	r0, #0
}
   26db2:	4770      	bx	lr
	uint16_t handle = 0;
   26db4:	2000      	movs	r0, #0
}
   26db6:	b002      	add	sp, #8
   26db8:	bd10      	pop	{r4, pc}

00026dba <bt_gatt_attr_read_chrc>:
{
   26dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26dbe:	b08a      	sub	sp, #40	; 0x28
   26dc0:	4605      	mov	r5, r0
   26dc2:	460c      	mov	r4, r1
   26dc4:	4616      	mov	r6, r2
   26dc6:	461f      	mov	r7, r3
	struct bt_gatt_chrc *chrc = attr->user_data;
   26dc8:	f8d1 800c 	ldr.w	r8, [r1, #12]
	pdu.properties = chrc->properties;
   26dcc:	f898 3006 	ldrb.w	r3, [r8, #6]
   26dd0:	f88d 3014 	strb.w	r3, [sp, #20]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   26dd4:	4608      	mov	r0, r1
   26dd6:	f7ff ffd2 	bl	26d7e <bt_gatt_attr_value_handle>
   26dda:	f8ad 0015 	strh.w	r0, [sp, #21]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   26dde:	f8d8 1000 	ldr.w	r1, [r8]
   26de2:	780b      	ldrb	r3, [r1, #0]
   26de4:	b993      	cbnz	r3, 26e0c <bt_gatt_attr_read_chrc+0x52>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   26de6:	884b      	ldrh	r3, [r1, #2]
   26de8:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2U;
   26dec:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   26dee:	9302      	str	r3, [sp, #8]
   26df0:	ab05      	add	r3, sp, #20
   26df2:	9301      	str	r3, [sp, #4]
   26df4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   26df8:	9300      	str	r3, [sp, #0]
   26dfa:	463b      	mov	r3, r7
   26dfc:	4632      	mov	r2, r6
   26dfe:	4621      	mov	r1, r4
   26e00:	4628      	mov	r0, r5
   26e02:	f7ff ff00 	bl	26c06 <bt_gatt_attr_read>
}
   26e06:	b00a      	add	sp, #40	; 0x28
   26e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   26e0c:	2210      	movs	r2, #16
   26e0e:	3101      	adds	r1, #1
   26e10:	f10d 0017 	add.w	r0, sp, #23
   26e14:	f7fd fe2a 	bl	24a6c <memcpy>
		value_len += 16U;
   26e18:	2313      	movs	r3, #19
   26e1a:	e7e8      	b.n	26dee <bt_gatt_attr_read_chrc+0x34>

00026e1c <bt_gatt_check_perm>:
{
   26e1c:	b538      	push	{r3, r4, r5, lr}
   26e1e:	4605      	mov	r5, r0
	if ((mask & BT_GATT_PERM_READ) &&
   26e20:	f012 0f01 	tst.w	r2, #1
   26e24:	d005      	beq.n	26e32 <bt_gatt_check_perm+0x16>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   26e26:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   26e28:	f013 0f15 	tst.w	r3, #21
   26e2c:	d01d      	beq.n	26e6a <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   26e2e:	684b      	ldr	r3, [r1, #4]
   26e30:	b1eb      	cbz	r3, 26e6e <bt_gatt_check_perm+0x52>
	if ((mask & BT_GATT_PERM_WRITE) &&
   26e32:	f012 0f02 	tst.w	r2, #2
   26e36:	d005      	beq.n	26e44 <bt_gatt_check_perm+0x28>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   26e38:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_WRITE) &&
   26e3a:	f013 0f2a 	tst.w	r3, #42	; 0x2a
   26e3e:	d018      	beq.n	26e72 <bt_gatt_check_perm+0x56>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   26e40:	688b      	ldr	r3, [r1, #8]
   26e42:	b1c3      	cbz	r3, 26e76 <bt_gatt_check_perm+0x5a>
	mask &= attr->perm;
   26e44:	7c8c      	ldrb	r4, [r1, #18]
   26e46:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   26e48:	f014 0f30 	tst.w	r4, #48	; 0x30
   26e4c:	d106      	bne.n	26e5c <bt_gatt_check_perm+0x40>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   26e4e:	f014 000c 	ands.w	r0, r4, #12
   26e52:	d002      	beq.n	26e5a <bt_gatt_check_perm+0x3e>
		if (!conn->encrypt) {
   26e54:	7aeb      	ldrb	r3, [r5, #11]
   26e56:	b183      	cbz	r3, 26e7a <bt_gatt_check_perm+0x5e>
	return 0;
   26e58:	2000      	movs	r0, #0
}
   26e5a:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   26e5c:	4628      	mov	r0, r5
   26e5e:	f7fe fc7e 	bl	2575e <bt_conn_get_security>
   26e62:	2802      	cmp	r0, #2
   26e64:	d8f3      	bhi.n	26e4e <bt_gatt_check_perm+0x32>
			return BT_ATT_ERR_AUTHENTICATION;
   26e66:	2005      	movs	r0, #5
   26e68:	e7f7      	b.n	26e5a <bt_gatt_check_perm+0x3e>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   26e6a:	2002      	movs	r0, #2
   26e6c:	e7f5      	b.n	26e5a <bt_gatt_check_perm+0x3e>
   26e6e:	2002      	movs	r0, #2
   26e70:	e7f3      	b.n	26e5a <bt_gatt_check_perm+0x3e>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   26e72:	2003      	movs	r0, #3
   26e74:	e7f1      	b.n	26e5a <bt_gatt_check_perm+0x3e>
   26e76:	2003      	movs	r0, #3
   26e78:	e7ef      	b.n	26e5a <bt_gatt_check_perm+0x3e>
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   26e7a:	200f      	movs	r0, #15
   26e7c:	e7ed      	b.n	26e5a <bt_gatt_check_perm+0x3e>

00026e7e <bt_gatt_change_aware>:
{
   26e7e:	b510      	push	{r4, lr}
   26e80:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   26e82:	f7f3 f993 	bl	1a1ac <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   26e86:	2800      	cmp	r0, #0
   26e88:	d042      	beq.n	26f10 <bt_gatt_change_aware+0x92>
   26e8a:	7a02      	ldrb	r2, [r0, #8]
   26e8c:	f012 0f01 	tst.w	r2, #1
   26e90:	d101      	bne.n	26e96 <bt_gatt_change_aware+0x18>
		return true;
   26e92:	2001      	movs	r0, #1
}
   26e94:	bd10      	pop	{r4, pc}
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   26e96:	f100 010c 	add.w	r1, r0, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   26e9a:	f3bf 8f5b 	dmb	ish
   26e9e:	68c2      	ldr	r2, [r0, #12]
   26ea0:	f3bf 8f5b 	dmb	ish
   26ea4:	f012 0f01 	tst.w	r2, #1
   26ea8:	d134      	bne.n	26f14 <bt_gatt_change_aware+0x96>
	if (!req) {
   26eaa:	b90c      	cbnz	r4, 26eb0 <bt_gatt_change_aware+0x32>
		return false;
   26eac:	4620      	mov	r0, r4
   26eae:	e7f1      	b.n	26e94 <bt_gatt_change_aware+0x16>
   26eb0:	f3bf 8f5b 	dmb	ish
   26eb4:	68c3      	ldr	r3, [r0, #12]
   26eb6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   26eba:	f013 0f02 	tst.w	r3, #2
   26ebe:	d10d      	bne.n	26edc <bt_gatt_change_aware+0x5e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   26ec0:	f3bf 8f5b 	dmb	ish
   26ec4:	e851 3f00 	ldrex	r3, [r1]
   26ec8:	f043 0302 	orr.w	r3, r3, #2
   26ecc:	e841 3200 	strex	r2, r3, [r1]
   26ed0:	2a00      	cmp	r2, #0
   26ed2:	d1f7      	bne.n	26ec4 <bt_gatt_change_aware+0x46>
   26ed4:	f3bf 8f5b 	dmb	ish
	return false;
   26ed8:	2000      	movs	r0, #0
   26eda:	e7db      	b.n	26e94 <bt_gatt_change_aware+0x16>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   26edc:	f3bf 8f5b 	dmb	ish
   26ee0:	e851 3f00 	ldrex	r3, [r1]
   26ee4:	f023 0302 	bic.w	r3, r3, #2
   26ee8:	e841 3200 	strex	r2, r3, [r1]
   26eec:	2a00      	cmp	r2, #0
   26eee:	d1f7      	bne.n	26ee0 <bt_gatt_change_aware+0x62>
   26ef0:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   26ef4:	f3bf 8f5b 	dmb	ish
   26ef8:	e851 3f00 	ldrex	r3, [r1]
   26efc:	f043 0301 	orr.w	r3, r3, #1
   26f00:	e841 3200 	strex	r2, r3, [r1]
   26f04:	2a00      	cmp	r2, #0
   26f06:	d1f7      	bne.n	26ef8 <bt_gatt_change_aware+0x7a>
   26f08:	f3bf 8f5b 	dmb	ish
		return true;
   26f0c:	4620      	mov	r0, r4
   26f0e:	e7c1      	b.n	26e94 <bt_gatt_change_aware+0x16>
		return true;
   26f10:	2001      	movs	r0, #1
   26f12:	e7bf      	b.n	26e94 <bt_gatt_change_aware+0x16>
		return true;
   26f14:	2001      	movs	r0, #1
   26f16:	e7bd      	b.n	26e94 <bt_gatt_change_aware+0x16>

00026f18 <bt_gatt_clear>:
{
   26f18:	b538      	push	{r3, r4, r5, lr}
   26f1a:	4604      	mov	r4, r0
   26f1c:	460d      	mov	r5, r1
	err = bt_gatt_clear_ccc(id, addr);
   26f1e:	f7f4 f8ed 	bl	1b0fc <bt_gatt_clear_ccc>
	if (err < 0) {
   26f22:	2800      	cmp	r0, #0
   26f24:	db0c      	blt.n	26f40 <bt_gatt_clear+0x28>
		err = bt_gatt_clear_sc(id, addr);
   26f26:	4629      	mov	r1, r5
   26f28:	4620      	mov	r0, r4
   26f2a:	f7f3 fbb3 	bl	1a694 <bt_gatt_clear_sc>
		if (err < 0) {
   26f2e:	2800      	cmp	r0, #0
   26f30:	db06      	blt.n	26f40 <bt_gatt_clear+0x28>
		err = bt_gatt_clear_cf(id, addr);
   26f32:	4629      	mov	r1, r5
   26f34:	4620      	mov	r0, r4
   26f36:	f7f3 fe8f 	bl	1ac58 <bt_gatt_clear_cf>
		if (err < 0) {
   26f3a:	2800      	cmp	r0, #0
   26f3c:	db00      	blt.n	26f40 <bt_gatt_clear+0x28>
	return 0;
   26f3e:	2000      	movs	r0, #0
}
   26f40:	bd38      	pop	{r3, r4, r5, pc}

00026f42 <security_err_get>:
	switch (smp_err) {
   26f42:	3801      	subs	r0, #1
   26f44:	280d      	cmp	r0, #13
   26f46:	d812      	bhi.n	26f6e <security_err_get+0x2c>
   26f48:	e8df f000 	tbb	[pc, r0]
   26f4c:	07091307 	.word	0x07091307
   26f50:	110b090b 	.word	0x110b090b
   26f54:	07070f0d 	.word	0x07070f0d
   26f58:	0d0d      	.short	0x0d0d
		return BT_SECURITY_ERR_INVALID_PARAM;
   26f5a:	2001      	movs	r0, #1
   26f5c:	4770      	bx	lr
		return BT_SECURITY_ERR_AUTH_REQUIREMENT;
   26f5e:	2004      	movs	r0, #4
   26f60:	4770      	bx	lr
		return BT_SECURITY_ERR_PAIR_NOT_SUPPORTED;
   26f62:	2005      	movs	r0, #5
   26f64:	4770      	bx	lr
		return BT_SECURITY_ERR_PAIR_NOT_ALLOWED;
   26f66:	2006      	movs	r0, #6
   26f68:	4770      	bx	lr
		return BT_SECURITY_ERR_INVALID_PARAM;
   26f6a:	2007      	movs	r0, #7
   26f6c:	4770      	bx	lr
		return BT_SECURITY_ERR_UNSPECIFIED;
   26f6e:	2008      	movs	r0, #8
   26f70:	4770      	bx	lr
		return BT_SECURITY_ERR_OOB_NOT_AVAILABLE;
   26f72:	2003      	movs	r0, #3
}
   26f74:	4770      	bx	lr

00026f76 <smp_err_get>:
	switch (auth_err) {
   26f76:	1e43      	subs	r3, r0, #1
   26f78:	2b07      	cmp	r3, #7
   26f7a:	d80b      	bhi.n	26f94 <smp_err_get+0x1e>
   26f7c:	e8df f003 	tbb	[pc, r3]
   26f80:	0c04080c 	.word	0x0c04080c
   26f84:	0806080d 	.word	0x0806080d
		return BT_SMP_ERR_UNSPECIFIED;
   26f88:	2002      	movs	r0, #2
   26f8a:	4770      	bx	lr
		return BT_SMP_ERR_INVALID_PARAMS;
   26f8c:	200a      	movs	r0, #10
   26f8e:	4770      	bx	lr
		return BT_SMP_ERR_UNSPECIFIED;
   26f90:	2008      	movs	r0, #8
   26f92:	4770      	bx	lr
		return 0;
   26f94:	2000      	movs	r0, #0
   26f96:	4770      	bx	lr
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   26f98:	2003      	movs	r0, #3
}
   26f9a:	4770      	bx	lr

00026f9c <get_encryption_key_size>:
{
   26f9c:	4603      	mov	r3, r0
	return MIN(req->max_key_size, rsp->max_key_size);
   26f9e:	7d00      	ldrb	r0, [r0, #20]
   26fa0:	7b5b      	ldrb	r3, [r3, #13]
}
   26fa2:	4298      	cmp	r0, r3
   26fa4:	bf28      	it	cs
   26fa6:	4618      	movcs	r0, r3
   26fa8:	4770      	bx	lr

00026faa <hci_err_get>:
	switch (err) {
   26faa:	2807      	cmp	r0, #7
   26fac:	d80d      	bhi.n	26fca <hci_err_get+0x20>
   26fae:	e8df f000 	tbb	[pc, r0]
   26fb2:	0e0f      	.short	0x0e0f
   26fb4:	060c0c04 	.word	0x060c0c04
   26fb8:	0a08      	.short	0x0a08
		return BT_HCI_ERR_PIN_OR_KEY_MISSING;
   26fba:	2006      	movs	r0, #6
   26fbc:	4770      	bx	lr
		return BT_HCI_ERR_PAIRING_NOT_SUPPORTED;
   26fbe:	2029      	movs	r0, #41	; 0x29
   26fc0:	4770      	bx	lr
		return BT_HCI_ERR_PAIRING_NOT_ALLOWED;
   26fc2:	2018      	movs	r0, #24
   26fc4:	4770      	bx	lr
		return BT_HCI_ERR_INVALID_PARAM;
   26fc6:	2012      	movs	r0, #18
   26fc8:	4770      	bx	lr
		return BT_HCI_ERR_UNSPECIFIED;
   26fca:	201f      	movs	r0, #31
   26fcc:	4770      	bx	lr
		return BT_HCI_ERR_AUTH_FAIL;
   26fce:	2005      	movs	r0, #5
}
   26fd0:	4770      	bx	lr

00026fd2 <xor_128>:
{
   26fd2:	b430      	push	{r4, r5}
	size_t len = 16;
   26fd4:	2310      	movs	r3, #16
	while (len--) {
   26fd6:	1e5c      	subs	r4, r3, #1
   26fd8:	b143      	cbz	r3, 26fec <xor_128+0x1a>
		*r++ = *p++ ^ *q++;
   26fda:	f810 3b01 	ldrb.w	r3, [r0], #1
   26fde:	f811 5b01 	ldrb.w	r5, [r1], #1
   26fe2:	406b      	eors	r3, r5
   26fe4:	f802 3b01 	strb.w	r3, [r2], #1
	while (len--) {
   26fe8:	4623      	mov	r3, r4
   26fea:	e7f4      	b.n	26fd6 <xor_128+0x4>
}
   26fec:	bc30      	pop	{r4, r5}
   26fee:	4770      	bx	lr

00026ff0 <smp_pairing_rsp>:
}
   26ff0:	2007      	movs	r0, #7
   26ff2:	4770      	bx	lr

00026ff4 <le_sc_oob_data_req_check>:
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   26ff4:	7ac0      	ldrb	r0, [r0, #11]
}
   26ff6:	f000 0001 	and.w	r0, r0, #1
   26ffa:	4770      	bx	lr

00026ffc <le_sc_oob_data_rsp_check>:
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   26ffc:	7c80      	ldrb	r0, [r0, #18]
}
   26ffe:	f000 0001 	and.w	r0, r0, #1
   27002:	4770      	bx	lr

00027004 <le_sc_oob_config_set>:
{
   27004:	b570      	push	{r4, r5, r6, lr}
   27006:	4606      	mov	r6, r0
   27008:	460c      	mov	r4, r1
	bool req_oob_present = le_sc_oob_data_req_check(smp);
   2700a:	f7ff fff3 	bl	26ff4 <le_sc_oob_data_req_check>
   2700e:	4605      	mov	r5, r0
	bool rsp_oob_present = le_sc_oob_data_rsp_check(smp);
   27010:	4630      	mov	r0, r6
   27012:	f7ff fff3 	bl	26ffc <le_sc_oob_data_rsp_check>
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   27016:	b12d      	cbz	r5, 27024 <le_sc_oob_config_set+0x20>
   27018:	2300      	movs	r3, #0
		if (rsp_oob_present) {
   2701a:	b108      	cbz	r0, 27020 <le_sc_oob_config_set+0x1c>
				     BT_CONN_OOB_BOTH_PEERS :
   2701c:	b923      	cbnz	r3, 27028 <le_sc_oob_config_set+0x24>
   2701e:	2302      	movs	r3, #2
	info->lesc.oob_config = oob_config;
   27020:	7063      	strb	r3, [r4, #1]
}
   27022:	bd70      	pop	{r4, r5, r6, pc}
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   27024:	2303      	movs	r3, #3
   27026:	e7f8      	b.n	2701a <le_sc_oob_config_set+0x16>
				     BT_CONN_OOB_BOTH_PEERS :
   27028:	2301      	movs	r3, #1
   2702a:	e7f9      	b.n	27020 <le_sc_oob_config_set+0x1c>

0002702c <smp_signing_info>:
}
   2702c:	2007      	movs	r0, #7
   2702e:	4770      	bx	lr

00027030 <smp_security_request>:
}
   27030:	2007      	movs	r0, #7
   27032:	4770      	bx	lr

00027034 <smp_keypress_notif>:
   27034:	f3bf 8f5b 	dmb	ish
   27038:	e850 3f00 	ldrex	r3, [r0]
   2703c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   27040:	e840 3200 	strex	r2, r3, [r0]
   27044:	2a00      	cmp	r2, #0
   27046:	d1f7      	bne.n	27038 <smp_keypress_notif+0x4>
   27048:	f3bf 8f5b 	dmb	ish
}
   2704c:	2000      	movs	r0, #0
   2704e:	4770      	bx	lr

00027050 <smp_keys_check>:
{
   27050:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27052:	f3bf 8f5b 	dmb	ish
   27056:	6843      	ldr	r3, [r0, #4]
   27058:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   2705c:	f413 6f00 	tst.w	r3, #2048	; 0x800
   27060:	d132      	bne.n	270c8 <smp_keys_check+0x78>
   27062:	4604      	mov	r4, r0
	if (!conn->le.keys) {
   27064:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   27068:	b1db      	cbz	r3, 270a2 <smp_keys_check+0x52>
	if (!conn->le.keys ||
   2706a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   2706e:	b36b      	cbz	r3, 270cc <smp_keys_check+0x7c>
	    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
   27070:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
   27072:	f012 0f24 	tst.w	r2, #36	; 0x24
   27076:	d02b      	beq.n	270d0 <smp_keys_check+0x80>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   27078:	7aa1      	ldrb	r1, [r4, #10]
   2707a:	2902      	cmp	r1, #2
   2707c:	d903      	bls.n	27086 <smp_keys_check+0x36>
	    !(conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   2707e:	7b58      	ldrb	r0, [r3, #13]
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   27080:	f010 0f01 	tst.w	r0, #1
   27084:	d026      	beq.n	270d4 <smp_keys_check+0x84>
	if (conn->required_sec_level > BT_SECURITY_L3 &&
   27086:	2903      	cmp	r1, #3
   27088:	d926      	bls.n	270d8 <smp_keys_check+0x88>
	    !(conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   2708a:	7b59      	ldrb	r1, [r3, #13]
	if (conn->required_sec_level > BT_SECURITY_L3 &&
   2708c:	f011 0f01 	tst.w	r1, #1
   27090:	d124      	bne.n	270dc <smp_keys_check+0x8c>
	    !(conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   27092:	f012 0f20 	tst.w	r2, #32
   27096:	d123      	bne.n	270e0 <smp_keys_check+0x90>
	    !(conn->le.keys->enc_size == BT_SMP_MAX_ENC_KEY_SIZE)) {
   27098:	7b1b      	ldrb	r3, [r3, #12]
	    !(conn->le.keys->keys & BT_KEYS_LTK_P256) &&
   2709a:	2b10      	cmp	r3, #16
   2709c:	d122      	bne.n	270e4 <smp_keys_check+0x94>
	return true;
   2709e:	2001      	movs	r0, #1
   270a0:	e013      	b.n	270ca <smp_keys_check+0x7a>
						     conn->id, &conn->le.dst);
   270a2:	f100 0588 	add.w	r5, r0, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   270a6:	462a      	mov	r2, r5
   270a8:	7a01      	ldrb	r1, [r0, #8]
   270aa:	2020      	movs	r0, #32
   270ac:	f7f6 fc3e 	bl	1d92c <bt_keys_find>
   270b0:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   270b4:	2800      	cmp	r0, #0
   270b6:	d1d8      	bne.n	2706a <smp_keys_check+0x1a>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   270b8:	462a      	mov	r2, r5
   270ba:	7a21      	ldrb	r1, [r4, #8]
   270bc:	2004      	movs	r0, #4
   270be:	f7f6 fc35 	bl	1d92c <bt_keys_find>
   270c2:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
   270c6:	e7d0      	b.n	2706a <smp_keys_check+0x1a>
		return false;
   270c8:	2000      	movs	r0, #0
}
   270ca:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   270cc:	2000      	movs	r0, #0
   270ce:	e7fc      	b.n	270ca <smp_keys_check+0x7a>
   270d0:	2000      	movs	r0, #0
   270d2:	e7fa      	b.n	270ca <smp_keys_check+0x7a>
		return false;
   270d4:	2000      	movs	r0, #0
   270d6:	e7f8      	b.n	270ca <smp_keys_check+0x7a>
	return true;
   270d8:	2001      	movs	r0, #1
   270da:	e7f6      	b.n	270ca <smp_keys_check+0x7a>
   270dc:	2001      	movs	r0, #1
   270de:	e7f4      	b.n	270ca <smp_keys_check+0x7a>
   270e0:	2001      	movs	r0, #1
   270e2:	e7f2      	b.n	270ca <smp_keys_check+0x7a>
		return false;
   270e4:	2000      	movs	r0, #0
   270e6:	e7f0      	b.n	270ca <smp_keys_check+0x7a>

000270e8 <update_keys_check>:
	if (!keys ||
   270e8:	b319      	cbz	r1, 27132 <update_keys_check+0x4a>
{
   270ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   270ec:	4605      	mov	r5, r0
   270ee:	460c      	mov	r4, r1
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   270f0:	89ce      	ldrh	r6, [r1, #14]
	if (!keys ||
   270f2:	f016 0f24 	tst.w	r6, #36	; 0x24
   270f6:	d01e      	beq.n	27136 <update_keys_check+0x4e>
	if (keys->enc_size > get_encryption_key_size(smp)) {
   270f8:	7b0f      	ldrb	r7, [r1, #12]
   270fa:	f7ff ff4f 	bl	26f9c <get_encryption_key_size>
   270fe:	4287      	cmp	r7, r0
   27100:	d81b      	bhi.n	2713a <update_keys_check+0x52>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   27102:	f016 0f20 	tst.w	r6, #32
   27106:	d10a      	bne.n	2711e <update_keys_check+0x36>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   27108:	7b63      	ldrb	r3, [r4, #13]
   2710a:	f013 0301 	ands.w	r3, r3, #1
   2710e:	d001      	beq.n	27114 <update_keys_check+0x2c>
	     smp->method == JUST_WORKS) {
   27110:	7a2a      	ldrb	r2, [r5, #8]
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   27112:	b1a2      	cbz	r2, 2713e <update_keys_check+0x56>
	if (!IS_ENABLED(CONFIG_BT_SMP_ALLOW_UNAUTH_OVERWRITE) &&
   27114:	b9ab      	cbnz	r3, 27142 <update_keys_check+0x5a>
	     && smp->method == JUST_WORKS)) {
   27116:	7a2b      	ldrb	r3, [r5, #8]
	if (!IS_ENABLED(CONFIG_BT_SMP_ALLOW_UNAUTH_OVERWRITE) &&
   27118:	b1ab      	cbz	r3, 27146 <update_keys_check+0x5e>
	return true;
   2711a:	2001      	movs	r0, #1
   2711c:	e00c      	b.n	27138 <update_keys_check+0x50>
   2711e:	f3bf 8f5b 	dmb	ish
   27122:	686b      	ldr	r3, [r5, #4]
   27124:	f3bf 8f5b 	dmb	ish
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   27128:	f013 0f20 	tst.w	r3, #32
   2712c:	d1ec      	bne.n	27108 <update_keys_check+0x20>
		return false;
   2712e:	2000      	movs	r0, #0
   27130:	e002      	b.n	27138 <update_keys_check+0x50>
		return true;
   27132:	2001      	movs	r0, #1
}
   27134:	4770      	bx	lr
		return true;
   27136:	2001      	movs	r0, #1
}
   27138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false;
   2713a:	2000      	movs	r0, #0
   2713c:	e7fc      	b.n	27138 <update_keys_check+0x50>
		return false;
   2713e:	2000      	movs	r0, #0
   27140:	e7fa      	b.n	27138 <update_keys_check+0x50>
	return true;
   27142:	2001      	movs	r0, #1
   27144:	e7f8      	b.n	27138 <update_keys_check+0x50>
		return false;
   27146:	2000      	movs	r0, #0
   27148:	e7f6      	b.n	27138 <update_keys_check+0x50>

0002714a <remote_sec_level_reachable>:
{
   2714a:	b510      	push	{r4, lr}
   2714c:	4604      	mov	r4, r0
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   2714e:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
   27152:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   27154:	2b03      	cmp	r3, #3
   27156:	d018      	beq.n	2718a <remote_sec_level_reachable+0x40>
   27158:	d807      	bhi.n	2716a <remote_sec_level_reachable+0x20>
   2715a:	3b01      	subs	r3, #1
   2715c:	b2db      	uxtb	r3, r3
   2715e:	2b01      	cmp	r3, #1
   27160:	d801      	bhi.n	27166 <remote_sec_level_reachable+0x1c>
   27162:	2000      	movs	r0, #0
}
   27164:	bd10      	pop	{r4, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   27166:	2008      	movs	r0, #8
   27168:	e7fc      	b.n	27164 <remote_sec_level_reachable+0x1a>
	switch (sec) {
   2716a:	2b04      	cmp	r3, #4
   2716c:	d111      	bne.n	27192 <remote_sec_level_reachable+0x48>
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   2716e:	f7ff ff15 	bl	26f9c <get_encryption_key_size>
   27172:	2810      	cmp	r0, #16
   27174:	d001      	beq.n	2717a <remote_sec_level_reachable+0x30>
			return BT_SMP_ERR_ENC_KEY_SIZE;
   27176:	2006      	movs	r0, #6
   27178:	e7f4      	b.n	27164 <remote_sec_level_reachable+0x1a>
   2717a:	f3bf 8f5b 	dmb	ish
   2717e:	6863      	ldr	r3, [r4, #4]
   27180:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   27184:	f013 0f20 	tst.w	r3, #32
   27188:	d005      	beq.n	27196 <remote_sec_level_reachable+0x4c>
		if (smp->method == JUST_WORKS) {
   2718a:	7a23      	ldrb	r3, [r4, #8]
   2718c:	b12b      	cbz	r3, 2719a <remote_sec_level_reachable+0x50>
		return 0;
   2718e:	2000      	movs	r0, #0
   27190:	e7e8      	b.n	27164 <remote_sec_level_reachable+0x1a>
		return BT_SMP_ERR_UNSPECIFIED;
   27192:	2008      	movs	r0, #8
   27194:	e7e6      	b.n	27164 <remote_sec_level_reachable+0x1a>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   27196:	2003      	movs	r0, #3
   27198:	e7e4      	b.n	27164 <remote_sec_level_reachable+0x1a>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   2719a:	2003      	movs	r0, #3
   2719c:	e7e2      	b.n	27164 <remote_sec_level_reachable+0x1a>

0002719e <smp_reset>:
{
   2719e:	b538      	push	{r3, r4, r5, lr}
   271a0:	4604      	mov	r4, r0
	atomic_set(smp->flags, 0);
   271a2:	1d03      	adds	r3, r0, #4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   271a4:	2500      	movs	r5, #0
   271a6:	f3bf 8f5b 	dmb	ish
   271aa:	e853 2f00 	ldrex	r2, [r3]
   271ae:	e843 5100 	strex	r1, r5, [r3]
   271b2:	2900      	cmp	r1, #0
   271b4:	d1f9      	bne.n	271aa <smp_reset+0xc>
   271b6:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   271ba:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
   271be:	f002 f9be 	bl	2953e <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   271c2:	7225      	strb	r5, [r4, #8]
   271c4:	f3bf 8f5b 	dmb	ish
   271c8:	e854 3f00 	ldrex	r3, [r4]
   271cc:	e844 5200 	strex	r2, r5, [r4]
   271d0:	2a00      	cmp	r2, #0
   271d2:	d1f9      	bne.n	271c8 <smp_reset+0x2a>
   271d4:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   271d8:	f3bf 8f5b 	dmb	ish
   271dc:	e854 3f00 	ldrex	r3, [r4]
   271e0:	f043 0302 	orr.w	r3, r3, #2
   271e4:	e844 3200 	strex	r2, r3, [r4]
   271e8:	2a00      	cmp	r2, #0
   271ea:	d1f7      	bne.n	271dc <smp_reset+0x3e>
   271ec:	f3bf 8f5b 	dmb	ish
}
   271f0:	bd38      	pop	{r3, r4, r5, pc}

000271f2 <smp_c1>:
{
   271f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   271f6:	b089      	sub	sp, #36	; 0x24
   271f8:	4605      	mov	r5, r0
   271fa:	460e      	mov	r6, r1
   271fc:	4611      	mov	r1, r2
   271fe:	461f      	mov	r7, r3
   27200:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   27204:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
   27208:	9c12      	ldr	r4, [sp, #72]	; 0x48
	p1[0] = ia->type;
   2720a:	f898 3000 	ldrb.w	r3, [r8]
   2720e:	f88d 3010 	strb.w	r3, [sp, #16]
	p1[1] = ra->type;
   27212:	f899 3000 	ldrb.w	r3, [r9]
   27216:	f88d 3011 	strb.w	r3, [sp, #17]
	memcpy(p1 + 2, preq, 7);
   2721a:	2207      	movs	r2, #7
   2721c:	f10d 0012 	add.w	r0, sp, #18
   27220:	f7fd fc24 	bl	24a6c <memcpy>
	memcpy(p1 + 9, pres, 7);
   27224:	2207      	movs	r2, #7
   27226:	4639      	mov	r1, r7
   27228:	f10d 0019 	add.w	r0, sp, #25
   2722c:	f7fd fc1e 	bl	24a6c <memcpy>
	xor_128(r, p1, enc_data);
   27230:	4622      	mov	r2, r4
   27232:	a904      	add	r1, sp, #16
   27234:	4630      	mov	r0, r6
   27236:	f7ff fecc 	bl	26fd2 <xor_128>
	err = bt_encrypt_le(k, enc_data, enc_data);
   2723a:	4622      	mov	r2, r4
   2723c:	4621      	mov	r1, r4
   2723e:	4628      	mov	r0, r5
   27240:	f001 fd35 	bl	28cae <bt_encrypt_le>
	if (err) {
   27244:	b110      	cbz	r0, 2724c <smp_c1+0x5a>
}
   27246:	b009      	add	sp, #36	; 0x24
   27248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	memcpy(p2, ra->a.val, 6);
   2724c:	2206      	movs	r2, #6
   2724e:	f109 0101 	add.w	r1, r9, #1
   27252:	4668      	mov	r0, sp
   27254:	f7fd fc0a 	bl	24a6c <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   27258:	2206      	movs	r2, #6
   2725a:	f108 0101 	add.w	r1, r8, #1
   2725e:	eb0d 0002 	add.w	r0, sp, r2
   27262:	f7fd fc03 	bl	24a6c <memcpy>
	(void)memset(p2 + 12, 0, 4);
   27266:	2204      	movs	r2, #4
   27268:	2100      	movs	r1, #0
   2726a:	a803      	add	r0, sp, #12
   2726c:	f7fd fc22 	bl	24ab4 <memset>
	xor_128(enc_data, p2, enc_data);
   27270:	4622      	mov	r2, r4
   27272:	4669      	mov	r1, sp
   27274:	4620      	mov	r0, r4
   27276:	f7ff feac 	bl	26fd2 <xor_128>
	return bt_encrypt_le(k, enc_data, enc_data);
   2727a:	4622      	mov	r2, r4
   2727c:	4621      	mov	r1, r4
   2727e:	4628      	mov	r0, r5
   27280:	f001 fd15 	bl	28cae <bt_encrypt_le>
   27284:	e7df      	b.n	27246 <smp_c1+0x54>

00027286 <smp_s1>:
{
   27286:	b570      	push	{r4, r5, r6, lr}
   27288:	4605      	mov	r5, r0
   2728a:	460e      	mov	r6, r1
   2728c:	4611      	mov	r1, r2
   2728e:	461c      	mov	r4, r3
	memcpy(out, r2, 8);
   27290:	2208      	movs	r2, #8
   27292:	4618      	mov	r0, r3
   27294:	f7fd fbea 	bl	24a6c <memcpy>
	memcpy(out + 8, r1, 8);
   27298:	2208      	movs	r2, #8
   2729a:	4631      	mov	r1, r6
   2729c:	18a0      	adds	r0, r4, r2
   2729e:	f7fd fbe5 	bl	24a6c <memcpy>
	return bt_encrypt_le(k, out, out);
   272a2:	4622      	mov	r2, r4
   272a4:	4621      	mov	r1, r4
   272a6:	4628      	mov	r0, r5
   272a8:	f001 fd01 	bl	28cae <bt_encrypt_le>
}
   272ac:	bd70      	pop	{r4, r5, r6, pc}

000272ae <smp_create_pdu>:
{
   272ae:	b570      	push	{r4, r5, r6, lr}
   272b0:	460d      	mov	r5, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   272b2:	1d06      	adds	r6, r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   272b4:	f3bf 8f5b 	dmb	ish
   272b8:	6843      	ldr	r3, [r0, #4]
   272ba:	f3bf 8f5b 	dmb	ish
   272be:	f013 0f10 	tst.w	r3, #16
   272c2:	d00e      	beq.n	272e2 <smp_create_pdu+0x34>
		timeout = K_NO_WAIT;
   272c4:	2200      	movs	r2, #0
   272c6:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   272c8:	2100      	movs	r1, #0
   272ca:	4608      	mov	r0, r1
   272cc:	f7fe fc4c 	bl	25b68 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   272d0:	4604      	mov	r4, r0
   272d2:	b150      	cbz	r0, 272ea <smp_create_pdu+0x3c>
	return net_buf_simple_add(&buf->b, len);
   272d4:	2101      	movs	r1, #1
   272d6:	3008      	adds	r0, #8
   272d8:	f001 f82b 	bl	28332 <net_buf_simple_add>
	hdr->code = op;
   272dc:	7005      	strb	r5, [r0, #0]
}
   272de:	4620      	mov	r0, r4
   272e0:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   272e2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   272e6:	2300      	movs	r3, #0
   272e8:	e7ee      	b.n	272c8 <smp_create_pdu+0x1a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   272ea:	f3bf 8f5b 	dmb	ish
   272ee:	e856 3f00 	ldrex	r3, [r6]
   272f2:	f043 0310 	orr.w	r3, r3, #16
   272f6:	e846 3200 	strex	r2, r3, [r6]
   272fa:	2a00      	cmp	r2, #0
   272fc:	d1f7      	bne.n	272ee <smp_create_pdu+0x40>
   272fe:	f3bf 8f5b 	dmb	ish
		return NULL;
   27302:	e7ec      	b.n	272de <smp_create_pdu+0x30>

00027304 <smp_send>:
{
   27304:	b530      	push	{r4, r5, lr}
   27306:	b083      	sub	sp, #12
   27308:	4604      	mov	r4, r0
   2730a:	460d      	mov	r5, r1
   2730c:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2730e:	2200      	movs	r2, #0
   27310:	9200      	str	r2, [sp, #0]
   27312:	460a      	mov	r2, r1
   27314:	2106      	movs	r1, #6
   27316:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
   2731a:	f7fe fc2a 	bl	25b72 <bt_l2cap_send_cb>
   2731e:	b940      	cbnz	r0, 27332 <smp_send+0x2e>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   27320:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   27324:	2300      	movs	r3, #0
   27326:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
   2732a:	f7f8 ff41 	bl	201b0 <k_work_reschedule>
}
   2732e:	b003      	add	sp, #12
   27330:	bd30      	pop	{r4, r5, pc}
		net_buf_unref(buf);
   27332:	4628      	mov	r0, r5
   27334:	f000 ffb3 	bl	2829e <net_buf_unref>
		return;
   27338:	e7f9      	b.n	2732e <smp_send+0x2a>

0002733a <legacy_send_pairing_confirm>:
{
   2733a:	b570      	push	{r4, r5, r6, lr}
   2733c:	b084      	sub	sp, #16
   2733e:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   27340:	f8d0 50f0 	ldr.w	r5, [r0, #240]	; 0xf0
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   27344:	2210      	movs	r2, #16
   27346:	2103      	movs	r1, #3
   27348:	f7ff ffb1 	bl	272ae <smp_create_pdu>
	if (!buf) {
   2734c:	b380      	cbz	r0, 273b0 <legacy_send_pairing_confirm+0x76>
   2734e:	4606      	mov	r6, r0
   27350:	2110      	movs	r1, #16
   27352:	3008      	adds	r0, #8
   27354:	f000 ffed 	bl	28332 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   27358:	f105 038f 	add.w	r3, r5, #143	; 0x8f
   2735c:	3596      	adds	r5, #150	; 0x96
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   2735e:	9002      	str	r0, [sp, #8]
   27360:	9501      	str	r5, [sp, #4]
   27362:	9300      	str	r3, [sp, #0]
   27364:	f104 0310 	add.w	r3, r4, #16
   27368:	f104 0209 	add.w	r2, r4, #9
   2736c:	f104 0127 	add.w	r1, r4, #39	; 0x27
   27370:	f104 0047 	add.w	r0, r4, #71	; 0x47
   27374:	f7ff ff3d 	bl	271f2 <smp_c1>
   27378:	b9a8      	cbnz	r0, 273a6 <legacy_send_pairing_confirm+0x6c>
	smp_send(smp, buf, NULL, NULL);
   2737a:	2300      	movs	r3, #0
   2737c:	461a      	mov	r2, r3
   2737e:	4631      	mov	r1, r6
   27380:	4620      	mov	r0, r4
   27382:	f7ff ffbf 	bl	27304 <smp_send>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   27386:	3404      	adds	r4, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   27388:	f3bf 8f5b 	dmb	ish
   2738c:	e854 3f00 	ldrex	r3, [r4]
   27390:	f023 0301 	bic.w	r3, r3, #1
   27394:	e844 3200 	strex	r2, r3, [r4]
   27398:	2a00      	cmp	r2, #0
   2739a:	d1f7      	bne.n	2738c <legacy_send_pairing_confirm+0x52>
   2739c:	f3bf 8f5b 	dmb	ish
	return 0;
   273a0:	2000      	movs	r0, #0
}
   273a2:	b004      	add	sp, #16
   273a4:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   273a6:	4630      	mov	r0, r6
   273a8:	f000 ff79 	bl	2829e <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   273ac:	2008      	movs	r0, #8
   273ae:	e7f8      	b.n	273a2 <legacy_send_pairing_confirm+0x68>
		return BT_SMP_ERR_UNSPECIFIED;
   273b0:	2008      	movs	r0, #8
   273b2:	e7f6      	b.n	273a2 <legacy_send_pairing_confirm+0x68>

000273b4 <legacy_pairing_confirm>:
{
   273b4:	b508      	push	{r3, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   273b6:	f3bf 8f5b 	dmb	ish
   273ba:	6842      	ldr	r2, [r0, #4]
   273bc:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   273c0:	f412 6f80 	tst.w	r2, #1024	; 0x400
   273c4:	d00e      	beq.n	273e4 <legacy_pairing_confirm+0x30>
   273c6:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   273c8:	f3bf 8f5b 	dmb	ish
   273cc:	e853 2f00 	ldrex	r2, [r3]
   273d0:	f042 0201 	orr.w	r2, r2, #1
   273d4:	e843 2100 	strex	r1, r2, [r3]
   273d8:	2900      	cmp	r1, #0
   273da:	d1f7      	bne.n	273cc <legacy_pairing_confirm+0x18>
   273dc:	f3bf 8f5b 	dmb	ish
	return 0;
   273e0:	2000      	movs	r0, #0
}
   273e2:	bd08      	pop	{r3, pc}
   273e4:	f3bf 8f5b 	dmb	ish
   273e8:	e850 3f00 	ldrex	r3, [r0]
   273ec:	f043 0310 	orr.w	r3, r3, #16
   273f0:	e840 3200 	strex	r2, r3, [r0]
   273f4:	2a00      	cmp	r2, #0
   273f6:	d1f7      	bne.n	273e8 <legacy_pairing_confirm+0x34>
   273f8:	f3bf 8f5b 	dmb	ish
			return legacy_send_pairing_confirm(smp);
   273fc:	f7ff ff9d 	bl	2733a <legacy_send_pairing_confirm>
   27400:	e7ef      	b.n	273e2 <legacy_pairing_confirm+0x2e>

00027402 <sc_smp_send_dhkey_check>:
{
   27402:	b570      	push	{r4, r5, r6, lr}
   27404:	4604      	mov	r4, r0
   27406:	460d      	mov	r5, r1
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   27408:	2210      	movs	r2, #16
   2740a:	210d      	movs	r1, #13
   2740c:	f7ff ff4f 	bl	272ae <smp_create_pdu>
	if (!buf) {
   27410:	b180      	cbz	r0, 27434 <sc_smp_send_dhkey_check+0x32>
   27412:	4606      	mov	r6, r0
   27414:	2110      	movs	r1, #16
   27416:	3008      	adds	r0, #8
   27418:	f000 ff8b 	bl	28332 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   2741c:	2210      	movs	r2, #16
   2741e:	4629      	mov	r1, r5
   27420:	f7fd fb24 	bl	24a6c <memcpy>
	smp_send(smp, buf, NULL, NULL);
   27424:	2300      	movs	r3, #0
   27426:	461a      	mov	r2, r3
   27428:	4631      	mov	r1, r6
   2742a:	4620      	mov	r0, r4
   2742c:	f7ff ff6a 	bl	27304 <smp_send>
	return 0;
   27430:	2000      	movs	r0, #0
}
   27432:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   27434:	2008      	movs	r0, #8
   27436:	e7fc      	b.n	27432 <sc_smp_send_dhkey_check+0x30>

00027438 <smp_send_pairing_random>:
{
   27438:	b538      	push	{r3, r4, r5, lr}
   2743a:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2743c:	2210      	movs	r2, #16
   2743e:	2104      	movs	r1, #4
   27440:	f7ff ff35 	bl	272ae <smp_create_pdu>
	if (!rsp_buf) {
   27444:	b188      	cbz	r0, 2746a <smp_send_pairing_random+0x32>
   27446:	4605      	mov	r5, r0
   27448:	2110      	movs	r1, #16
   2744a:	3008      	adds	r0, #8
   2744c:	f000 ff71 	bl	28332 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   27450:	2210      	movs	r2, #16
   27452:	f104 0127 	add.w	r1, r4, #39	; 0x27
   27456:	f7fd fb09 	bl	24a6c <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   2745a:	2300      	movs	r3, #0
   2745c:	461a      	mov	r2, r3
   2745e:	4629      	mov	r1, r5
   27460:	4620      	mov	r0, r4
   27462:	f7ff ff4f 	bl	27304 <smp_send>
	return 0;
   27466:	2000      	movs	r0, #0
}
   27468:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2746a:	2008      	movs	r0, #8
   2746c:	e7fc      	b.n	27468 <smp_send_pairing_random+0x30>

0002746e <send_pairing_rsp>:
{
   2746e:	b538      	push	{r3, r4, r5, lr}
   27470:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   27472:	2206      	movs	r2, #6
   27474:	2102      	movs	r1, #2
   27476:	f7ff ff1a 	bl	272ae <smp_create_pdu>
	if (!rsp_buf) {
   2747a:	b188      	cbz	r0, 274a0 <send_pairing_rsp+0x32>
   2747c:	4605      	mov	r5, r0
   2747e:	2106      	movs	r1, #6
   27480:	3008      	adds	r0, #8
   27482:	f000 ff56 	bl	28332 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   27486:	2206      	movs	r2, #6
   27488:	f104 0111 	add.w	r1, r4, #17
   2748c:	f7fd faee 	bl	24a6c <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   27490:	2300      	movs	r3, #0
   27492:	461a      	mov	r2, r3
   27494:	4629      	mov	r1, r5
   27496:	4620      	mov	r0, r4
   27498:	f7ff ff34 	bl	27304 <smp_send>
	return 0;
   2749c:	2000      	movs	r0, #0
}
   2749e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   274a0:	2008      	movs	r0, #8
   274a2:	e7fc      	b.n	2749e <send_pairing_rsp+0x30>

000274a4 <bt_smp_aes_cmac>:
{
   274a4:	b570      	push	{r4, r5, r6, lr}
   274a6:	b0c2      	sub	sp, #264	; 0x108
   274a8:	460c      	mov	r4, r1
   274aa:	4615      	mov	r5, r2
   274ac:	461e      	mov	r6, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   274ae:	aa16      	add	r2, sp, #88	; 0x58
   274b0:	4601      	mov	r1, r0
   274b2:	4668      	mov	r0, sp
   274b4:	f7fd f898 	bl	245e8 <tc_cmac_setup>
   274b8:	b168      	cbz	r0, 274d6 <bt_smp_aes_cmac+0x32>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   274ba:	462a      	mov	r2, r5
   274bc:	4621      	mov	r1, r4
   274be:	4668      	mov	r0, sp
   274c0:	f7fd f8bf 	bl	24642 <tc_cmac_update>
   274c4:	b150      	cbz	r0, 274dc <bt_smp_aes_cmac+0x38>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   274c6:	4669      	mov	r1, sp
   274c8:	4630      	mov	r0, r6
   274ca:	f7fd f928 	bl	2471e <tc_cmac_final>
   274ce:	b140      	cbz	r0, 274e2 <bt_smp_aes_cmac+0x3e>
	return 0;
   274d0:	2000      	movs	r0, #0
}
   274d2:	b042      	add	sp, #264	; 0x108
   274d4:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   274d6:	f06f 0004 	mvn.w	r0, #4
   274da:	e7fa      	b.n	274d2 <bt_smp_aes_cmac+0x2e>
		return -EIO;
   274dc:	f06f 0004 	mvn.w	r0, #4
   274e0:	e7f7      	b.n	274d2 <bt_smp_aes_cmac+0x2e>
		return -EIO;
   274e2:	f06f 0004 	mvn.w	r0, #4
   274e6:	e7f4      	b.n	274d2 <bt_smp_aes_cmac+0x2e>

000274e8 <smp_f4>:
{
   274e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   274ea:	b097      	sub	sp, #92	; 0x5c
   274ec:	9d1c      	ldr	r5, [sp, #112]	; 0x70
	psrc += length - 1;
   274ee:	301f      	adds	r0, #31
	uint8_t *pdst = (uint8_t *)dst;
   274f0:	ac01      	add	r4, sp, #4
	for (; length > 0; length--) {
   274f2:	2620      	movs	r6, #32
   274f4:	b12e      	cbz	r6, 27502 <smp_f4+0x1a>
		*pdst++ = *psrc--;
   274f6:	f810 7901 	ldrb.w	r7, [r0], #-1
   274fa:	f804 7b01 	strb.w	r7, [r4], #1
	for (; length > 0; length--) {
   274fe:	3e01      	subs	r6, #1
   27500:	e7f8      	b.n	274f4 <smp_f4+0xc>
	psrc += length - 1;
   27502:	311f      	adds	r1, #31
	uint8_t *pdst = (uint8_t *)dst;
   27504:	a809      	add	r0, sp, #36	; 0x24
	for (; length > 0; length--) {
   27506:	2420      	movs	r4, #32
   27508:	b12c      	cbz	r4, 27516 <smp_f4+0x2e>
		*pdst++ = *psrc--;
   2750a:	f811 6901 	ldrb.w	r6, [r1], #-1
   2750e:	f800 6b01 	strb.w	r6, [r0], #1
	for (; length > 0; length--) {
   27512:	3c01      	subs	r4, #1
   27514:	e7f8      	b.n	27508 <smp_f4+0x20>
	m[64] = z;
   27516:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	psrc += length - 1;
   2751a:	320f      	adds	r2, #15
	uint8_t *pdst = (uint8_t *)dst;
   2751c:	ab12      	add	r3, sp, #72	; 0x48
	for (; length > 0; length--) {
   2751e:	2410      	movs	r4, #16
   27520:	e004      	b.n	2752c <smp_f4+0x44>
		*pdst++ = *psrc--;
   27522:	f812 1901 	ldrb.w	r1, [r2], #-1
   27526:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
   2752a:	3c01      	subs	r4, #1
   2752c:	2c00      	cmp	r4, #0
   2752e:	d1f8      	bne.n	27522 <smp_f4+0x3a>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   27530:	462b      	mov	r3, r5
   27532:	2241      	movs	r2, #65	; 0x41
   27534:	a901      	add	r1, sp, #4
   27536:	a812      	add	r0, sp, #72	; 0x48
   27538:	f7ff ffb4 	bl	274a4 <bt_smp_aes_cmac>
	if (err) {
   2753c:	b948      	cbnz	r0, 27552 <smp_f4+0x6a>
	for (i = 0; i < (length/2); i++) {
   2753e:	2c07      	cmp	r4, #7
   27540:	d807      	bhi.n	27552 <smp_f4+0x6a>
		uint8_t tmp = ((uint8_t *)buf)[i];
   27542:	5d2a      	ldrb	r2, [r5, r4]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   27544:	f1c4 030f 	rsb	r3, r4, #15
   27548:	5ce9      	ldrb	r1, [r5, r3]
   2754a:	5529      	strb	r1, [r5, r4]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2754c:	54ea      	strb	r2, [r5, r3]
	for (i = 0; i < (length/2); i++) {
   2754e:	3401      	adds	r4, #1
   27550:	e7f5      	b.n	2753e <smp_f4+0x56>
}
   27552:	b017      	add	sp, #92	; 0x5c
   27554:	bdf0      	pop	{r4, r5, r6, r7, pc}

00027556 <smp_f6>:
{
   27556:	b5f0      	push	{r4, r5, r6, r7, lr}
   27558:	b097      	sub	sp, #92	; 0x5c
   2755a:	4606      	mov	r6, r0
   2755c:	9f1d      	ldr	r7, [sp, #116]	; 0x74
   2755e:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
	psrc += length - 1;
   27560:	310f      	adds	r1, #15
	uint8_t *pdst = (uint8_t *)dst;
   27562:	a801      	add	r0, sp, #4
	for (; length > 0; length--) {
   27564:	2410      	movs	r4, #16
   27566:	b12c      	cbz	r4, 27574 <smp_f6+0x1e>
		*pdst++ = *psrc--;
   27568:	f811 e901 	ldrb.w	lr, [r1], #-1
   2756c:	f800 eb01 	strb.w	lr, [r0], #1
	for (; length > 0; length--) {
   27570:	3c01      	subs	r4, #1
   27572:	e7f8      	b.n	27566 <smp_f6+0x10>
	psrc += length - 1;
   27574:	320f      	adds	r2, #15
	uint8_t *pdst = (uint8_t *)dst;
   27576:	a905      	add	r1, sp, #20
	for (; length > 0; length--) {
   27578:	2010      	movs	r0, #16
   2757a:	b128      	cbz	r0, 27588 <smp_f6+0x32>
		*pdst++ = *psrc--;
   2757c:	f812 c901 	ldrb.w	ip, [r2], #-1
   27580:	f801 cb01 	strb.w	ip, [r1], #1
	for (; length > 0; length--) {
   27584:	3801      	subs	r0, #1
   27586:	e7f8      	b.n	2757a <smp_f6+0x24>
	psrc += length - 1;
   27588:	330f      	adds	r3, #15
	uint8_t *pdst = (uint8_t *)dst;
   2758a:	aa09      	add	r2, sp, #36	; 0x24
	for (; length > 0; length--) {
   2758c:	2110      	movs	r1, #16
   2758e:	e004      	b.n	2759a <smp_f6+0x44>
		*pdst++ = *psrc--;
   27590:	f813 0901 	ldrb.w	r0, [r3], #-1
   27594:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
   27598:	3901      	subs	r1, #1
   2759a:	2900      	cmp	r1, #0
   2759c:	d1f8      	bne.n	27590 <smp_f6+0x3a>
	psrc += length - 1;
   2759e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   275a0:	3302      	adds	r3, #2
	uint8_t *pdst = (uint8_t *)dst;
   275a2:	aa0d      	add	r2, sp, #52	; 0x34
	for (; length > 0; length--) {
   275a4:	2103      	movs	r1, #3
   275a6:	e004      	b.n	275b2 <smp_f6+0x5c>
		*pdst++ = *psrc--;
   275a8:	f813 0901 	ldrb.w	r0, [r3], #-1
   275ac:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
   275b0:	3901      	subs	r1, #1
   275b2:	2900      	cmp	r1, #0
   275b4:	d1f8      	bne.n	275a8 <smp_f6+0x52>
	m[51] = a1->type;
   275b6:	4639      	mov	r1, r7
   275b8:	f811 3b01 	ldrb.w	r3, [r1], #1
   275bc:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
	memcpy(m + 52, a1->a.val, 6);
   275c0:	2206      	movs	r2, #6
   275c2:	a80e      	add	r0, sp, #56	; 0x38
   275c4:	f7fd fa52 	bl	24a6c <memcpy>
	psrc += length - 1;
   275c8:	1dbb      	adds	r3, r7, #6
	uint8_t *pdst = (uint8_t *)dst;
   275ca:	aa0e      	add	r2, sp, #56	; 0x38
	for (; length > 0; length--) {
   275cc:	2106      	movs	r1, #6
   275ce:	b129      	cbz	r1, 275dc <smp_f6+0x86>
		*pdst++ = *psrc--;
   275d0:	f813 0901 	ldrb.w	r0, [r3], #-1
   275d4:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
   275d8:	3901      	subs	r1, #1
   275da:	e7f8      	b.n	275ce <smp_f6+0x78>
	m[58] = a2->type;
   275dc:	991e      	ldr	r1, [sp, #120]	; 0x78
   275de:	f811 3b01 	ldrb.w	r3, [r1], #1
   275e2:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
	memcpy(m + 59, a2->a.val, 6);
   275e6:	2206      	movs	r2, #6
   275e8:	f10d 003f 	add.w	r0, sp, #63	; 0x3f
   275ec:	f7fd fa3e 	bl	24a6c <memcpy>
	psrc += length - 1;
   275f0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   275f2:	3306      	adds	r3, #6
	uint8_t *pdst = (uint8_t *)dst;
   275f4:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
	for (; length > 0; length--) {
   275f8:	2106      	movs	r1, #6
   275fa:	e004      	b.n	27606 <smp_f6+0xb0>
		*pdst++ = *psrc--;
   275fc:	f813 0901 	ldrb.w	r0, [r3], #-1
   27600:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
   27604:	3901      	subs	r1, #1
   27606:	2900      	cmp	r1, #0
   27608:	d1f8      	bne.n	275fc <smp_f6+0xa6>
	psrc += length - 1;
   2760a:	f106 000f 	add.w	r0, r6, #15
	uint8_t *pdst = (uint8_t *)dst;
   2760e:	ab12      	add	r3, sp, #72	; 0x48
	for (; length > 0; length--) {
   27610:	2410      	movs	r4, #16
   27612:	e004      	b.n	2761e <smp_f6+0xc8>
		*pdst++ = *psrc--;
   27614:	f810 2901 	ldrb.w	r2, [r0], #-1
   27618:	f803 2b01 	strb.w	r2, [r3], #1
	for (; length > 0; length--) {
   2761c:	3c01      	subs	r4, #1
   2761e:	2c00      	cmp	r4, #0
   27620:	d1f8      	bne.n	27614 <smp_f6+0xbe>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   27622:	462b      	mov	r3, r5
   27624:	2241      	movs	r2, #65	; 0x41
   27626:	a901      	add	r1, sp, #4
   27628:	a812      	add	r0, sp, #72	; 0x48
   2762a:	f7ff ff3b 	bl	274a4 <bt_smp_aes_cmac>
	if (err) {
   2762e:	b138      	cbz	r0, 27640 <smp_f6+0xea>
   27630:	e008      	b.n	27644 <smp_f6+0xee>
		uint8_t tmp = ((uint8_t *)buf)[i];
   27632:	5d2a      	ldrb	r2, [r5, r4]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   27634:	f1c4 030f 	rsb	r3, r4, #15
   27638:	5ce9      	ldrb	r1, [r5, r3]
   2763a:	5529      	strb	r1, [r5, r4]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2763c:	54ea      	strb	r2, [r5, r3]
	for (i = 0; i < (length/2); i++) {
   2763e:	3401      	adds	r4, #1
   27640:	2c07      	cmp	r4, #7
   27642:	d9f6      	bls.n	27632 <smp_f6+0xdc>
}
   27644:	b017      	add	sp, #92	; 0x5c
   27646:	bdf0      	pop	{r4, r5, r6, r7, pc}

00027648 <smp_dhkey_check>:
{
   27648:	b538      	push	{r3, r4, r5, lr}
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   2764a:	6889      	ldr	r1, [r1, #8]
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   2764c:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
   27650:	78db      	ldrb	r3, [r3, #3]
   27652:	2b01      	cmp	r3, #1
   27654:	d001      	beq.n	2765a <smp_dhkey_check+0x12>
	return 0;
   27656:	2000      	movs	r0, #0
}
   27658:	bd38      	pop	{r3, r4, r5, pc}
   2765a:	4604      	mov	r4, r0
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   2765c:	1d05      	adds	r5, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2765e:	f3bf 8f5b 	dmb	ish
   27662:	e855 3f00 	ldrex	r3, [r5]
   27666:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   2766a:	e845 3200 	strex	r2, r3, [r5]
   2766e:	2a00      	cmp	r2, #0
   27670:	d1f7      	bne.n	27662 <smp_dhkey_check+0x1a>
   27672:	f3bf 8f5b 	dmb	ish
		memcpy(smp->e, req->e, sizeof(smp->e));
   27676:	2210      	movs	r2, #16
   27678:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   2767c:	f7fd f9f6 	bl	24a6c <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27680:	f3bf 8f5b 	dmb	ish
   27684:	6863      	ldr	r3, [r4, #4]
   27686:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   2768a:	f013 0f80 	tst.w	r3, #128	; 0x80
   2768e:	d115      	bne.n	276bc <smp_dhkey_check+0x74>
   27690:	f3bf 8f5b 	dmb	ish
   27694:	6863      	ldr	r3, [r4, #4]
   27696:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2769a:	f413 6f80 	tst.w	r3, #1024	; 0x400
   2769e:	d01b      	beq.n	276d8 <smp_dhkey_check+0x90>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   276a0:	f3bf 8f5b 	dmb	ish
   276a4:	e855 3f00 	ldrex	r3, [r5]
   276a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   276ac:	e845 3200 	strex	r2, r3, [r5]
   276b0:	2a00      	cmp	r2, #0
   276b2:	d1f7      	bne.n	276a4 <smp_dhkey_check+0x5c>
   276b4:	f3bf 8f5b 	dmb	ish
			return 0;
   276b8:	2000      	movs	r0, #0
   276ba:	e7cd      	b.n	27658 <smp_dhkey_check+0x10>
   276bc:	f3bf 8f5b 	dmb	ish
   276c0:	e855 3f00 	ldrex	r3, [r5]
   276c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   276c8:	e845 3200 	strex	r2, r3, [r5]
   276cc:	2a00      	cmp	r2, #0
   276ce:	d1f7      	bne.n	276c0 <smp_dhkey_check+0x78>
   276d0:	f3bf 8f5b 	dmb	ish
			return 0;
   276d4:	2000      	movs	r0, #0
   276d6:	e7bf      	b.n	27658 <smp_dhkey_check+0x10>
		return compute_and_check_and_send_slave_dhcheck(smp);
   276d8:	4620      	mov	r0, r4
   276da:	f7f4 fd35 	bl	1c148 <compute_and_check_and_send_slave_dhcheck>
   276de:	e7bb      	b.n	27658 <smp_dhkey_check+0x10>

000276e0 <smp_dhkey_ready>:
	if (!dhkey) {
   276e0:	2900      	cmp	r1, #0
   276e2:	d04f      	beq.n	27784 <smp_dhkey_ready+0xa4>
{
   276e4:	b538      	push	{r3, r4, r5, lr}
   276e6:	4604      	mov	r4, r0
   276e8:	460b      	mov	r3, r1
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   276ea:	1d05      	adds	r5, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   276ec:	f3bf 8f5b 	dmb	ish
   276f0:	e855 2f00 	ldrex	r2, [r5]
   276f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   276f8:	e845 2100 	strex	r1, r2, [r5]
   276fc:	2900      	cmp	r1, #0
   276fe:	d1f7      	bne.n	276f0 <smp_dhkey_ready+0x10>
   27700:	f3bf 8f5b 	dmb	ish
	memcpy(smp->dhkey, dhkey, 32);
   27704:	2220      	movs	r2, #32
   27706:	4619      	mov	r1, r3
   27708:	f104 0097 	add.w	r0, r4, #151	; 0x97
   2770c:	f7fd f9ae 	bl	24a6c <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27710:	f3bf 8f5b 	dmb	ish
   27714:	6863      	ldr	r3, [r4, #4]
   27716:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2771a:	f413 6f80 	tst.w	r3, #1024	; 0x400
   2771e:	d111      	bne.n	27744 <smp_dhkey_ready+0x64>
   27720:	f3bf 8f5b 	dmb	ish
   27724:	6863      	ldr	r3, [r4, #4]
   27726:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2772a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   2772e:	d117      	bne.n	27760 <smp_dhkey_ready+0x80>
   27730:	f3bf 8f5b 	dmb	ish
   27734:	6863      	ldr	r3, [r4, #4]
   27736:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   2773a:	f413 7f00 	tst.w	r3, #512	; 0x200
   2773e:	d11d      	bne.n	2777c <smp_dhkey_ready+0x9c>
	return 0;
   27740:	2000      	movs	r0, #0
   27742:	e00c      	b.n	2775e <smp_dhkey_ready+0x7e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27744:	f3bf 8f5b 	dmb	ish
   27748:	e855 3f00 	ldrex	r3, [r5]
   2774c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   27750:	e845 3200 	strex	r2, r3, [r5]
   27754:	2a00      	cmp	r2, #0
   27756:	d1f7      	bne.n	27748 <smp_dhkey_ready+0x68>
   27758:	f3bf 8f5b 	dmb	ish
		return 0;
   2775c:	2000      	movs	r0, #0
}
   2775e:	bd38      	pop	{r3, r4, r5, pc}
   27760:	f3bf 8f5b 	dmb	ish
   27764:	e855 3f00 	ldrex	r3, [r5]
   27768:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   2776c:	e845 3200 	strex	r2, r3, [r5]
   27770:	2a00      	cmp	r2, #0
   27772:	d1f7      	bne.n	27764 <smp_dhkey_ready+0x84>
   27774:	f3bf 8f5b 	dmb	ish
		return 0;
   27778:	2000      	movs	r0, #0
   2777a:	e7f0      	b.n	2775e <smp_dhkey_ready+0x7e>
		return  compute_and_check_and_send_slave_dhcheck(smp);
   2777c:	4620      	mov	r0, r4
   2777e:	f7f4 fce3 	bl	1c148 <compute_and_check_and_send_slave_dhcheck>
   27782:	e7ec      	b.n	2775e <smp_dhkey_ready+0x7e>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   27784:	200b      	movs	r0, #11
}
   27786:	4770      	bx	lr

00027788 <update_debug_keys_check>:
{
   27788:	b510      	push	{r4, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   2778a:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
	if (!conn->le.keys) {
   2778e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   27792:	b163      	cbz	r3, 277ae <update_debug_keys_check+0x26>
	if (!conn->le.keys ||
   27794:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   27798:	b18b      	cbz	r3, 277be <update_debug_keys_check+0x36>
	    !(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   2779a:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
   2779c:	f012 0f24 	tst.w	r2, #36	; 0x24
   277a0:	d00f      	beq.n	277c2 <update_debug_keys_check+0x3a>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   277a2:	7b5b      	ldrb	r3, [r3, #13]
   277a4:	f013 0f02 	tst.w	r3, #2
   277a8:	d10d      	bne.n	277c6 <update_debug_keys_check+0x3e>
	return false;
   277aa:	2000      	movs	r0, #0
}
   277ac:	bd10      	pop	{r4, pc}
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   277ae:	f104 0188 	add.w	r1, r4, #136	; 0x88
   277b2:	7a20      	ldrb	r0, [r4, #8]
   277b4:	f7f6 f828 	bl	1d808 <bt_keys_get_addr>
   277b8:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
   277bc:	e7ea      	b.n	27794 <update_debug_keys_check+0xc>
		return true;
   277be:	2001      	movs	r0, #1
   277c0:	e7f4      	b.n	277ac <update_debug_keys_check+0x24>
   277c2:	2001      	movs	r0, #1
   277c4:	e7f2      	b.n	277ac <update_debug_keys_check+0x24>
		return true;
   277c6:	2001      	movs	r0, #1
   277c8:	e7f0      	b.n	277ac <update_debug_keys_check+0x24>

000277ca <smp_send_security_req>:
{
   277ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   277ce:	b082      	sub	sp, #8
   277d0:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
   277d2:	f7f4 f9ad 	bl	1bb30 <smp_chan_get>
	if (!smp) {
   277d6:	2800      	cmp	r0, #0
   277d8:	d077      	beq.n	278ca <smp_send_security_req+0x100>
   277da:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   277dc:	f100 0804 	add.w	r8, r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   277e0:	f3bf 8f5b 	dmb	ish
   277e4:	6843      	ldr	r3, [r0, #4]
   277e6:	f3bf 8f5b 	dmb	ish
   277ea:	f013 0f10 	tst.w	r3, #16
   277ee:	d16f      	bne.n	278d0 <smp_send_security_req+0x106>
   277f0:	f3bf 8f5b 	dmb	ish
   277f4:	6843      	ldr	r3, [r0, #4]
   277f6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   277fa:	f013 0f08 	tst.w	r3, #8
   277fe:	d16a      	bne.n	278d6 <smp_send_security_req+0x10c>
   27800:	f3bf 8f5b 	dmb	ish
   27804:	6843      	ldr	r3, [r0, #4]
   27806:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2780a:	f013 0f02 	tst.w	r3, #2
   2780e:	d165      	bne.n	278dc <smp_send_security_req+0x112>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   27810:	4628      	mov	r0, r5
   27812:	f7f4 f951 	bl	1bab8 <sec_level_reachable>
   27816:	2800      	cmp	r0, #0
   27818:	d03f      	beq.n	2789a <smp_send_security_req+0xd0>
	if (!conn->le.keys) {
   2781a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   2781e:	2b00      	cmp	r3, #0
   27820:	d043      	beq.n	278aa <smp_send_security_req+0xe0>
	if (smp_init(smp) != 0) {
   27822:	4620      	mov	r0, r4
   27824:	f7f4 ff00 	bl	1c628 <smp_init>
   27828:	2800      	cmp	r0, #0
   2782a:	d15a      	bne.n	278e2 <smp_send_security_req+0x118>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   2782c:	2201      	movs	r2, #1
   2782e:	210b      	movs	r1, #11
   27830:	4620      	mov	r0, r4
   27832:	f7ff fd3c 	bl	272ae <smp_create_pdu>
	if (!req_buf) {
   27836:	4607      	mov	r7, r0
   27838:	2800      	cmp	r0, #0
   2783a:	d055      	beq.n	278e8 <smp_send_security_req+0x11e>
   2783c:	2101      	movs	r1, #1
   2783e:	3008      	adds	r0, #8
   27840:	f000 fd77 	bl	28332 <net_buf_simple_add>
   27844:	4606      	mov	r6, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
   27846:	2109      	movs	r1, #9
   27848:	4628      	mov	r0, r5
   2784a:	f7f4 f915 	bl	1ba78 <get_auth>
   2784e:	7030      	strb	r0, [r6, #0]
   27850:	2300      	movs	r3, #0
   27852:	9300      	str	r3, [sp, #0]
   27854:	463a      	mov	r2, r7
   27856:	2106      	movs	r1, #6
   27858:	4628      	mov	r0, r5
   2785a:	f7fe f98a 	bl	25b72 <bt_l2cap_send_cb>
	if (err) {
   2785e:	4605      	mov	r5, r0
   27860:	bb78      	cbnz	r0, 278c2 <smp_send_security_req+0xf8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27862:	f3bf 8f5b 	dmb	ish
   27866:	e858 3f00 	ldrex	r3, [r8]
   2786a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   2786e:	e848 3200 	strex	r2, r3, [r8]
   27872:	2a00      	cmp	r2, #0
   27874:	d1f7      	bne.n	27866 <smp_send_security_req+0x9c>
   27876:	f3bf 8f5b 	dmb	ish
   2787a:	f3bf 8f5b 	dmb	ish
   2787e:	e854 3f00 	ldrex	r3, [r4]
   27882:	f043 0302 	orr.w	r3, r3, #2
   27886:	e844 3200 	strex	r2, r3, [r4]
   2788a:	2a00      	cmp	r2, #0
   2788c:	d1f7      	bne.n	2787e <smp_send_security_req+0xb4>
   2788e:	f3bf 8f5b 	dmb	ish
}
   27892:	4628      	mov	r0, r5
   27894:	b002      	add	sp, #8
   27896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   2789a:	4628      	mov	r0, r5
   2789c:	f7ff fbd8 	bl	27050 <smp_keys_check>
   278a0:	2800      	cmp	r0, #0
   278a2:	d1ba      	bne.n	2781a <smp_send_security_req+0x50>
		return -EINVAL;
   278a4:	f06f 0515 	mvn.w	r5, #21
   278a8:	e7f3      	b.n	27892 <smp_send_security_req+0xc8>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   278aa:	f105 0188 	add.w	r1, r5, #136	; 0x88
   278ae:	7a28      	ldrb	r0, [r5, #8]
   278b0:	f7f5 ffaa 	bl	1d808 <bt_keys_get_addr>
   278b4:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   278b8:	2800      	cmp	r0, #0
   278ba:	d1b2      	bne.n	27822 <smp_send_security_req+0x58>
			return -ENOMEM;
   278bc:	f06f 050b 	mvn.w	r5, #11
   278c0:	e7e7      	b.n	27892 <smp_send_security_req+0xc8>
		net_buf_unref(req_buf);
   278c2:	4638      	mov	r0, r7
   278c4:	f000 fceb 	bl	2829e <net_buf_unref>
		return err;
   278c8:	e7e3      	b.n	27892 <smp_send_security_req+0xc8>
		return -ENOTCONN;
   278ca:	f06f 057f 	mvn.w	r5, #127	; 0x7f
   278ce:	e7e0      	b.n	27892 <smp_send_security_req+0xc8>
		return -EIO;
   278d0:	f06f 0504 	mvn.w	r5, #4
   278d4:	e7dd      	b.n	27892 <smp_send_security_req+0xc8>
		return -EBUSY;
   278d6:	f06f 050f 	mvn.w	r5, #15
   278da:	e7da      	b.n	27892 <smp_send_security_req+0xc8>
		return -EBUSY;
   278dc:	f06f 050f 	mvn.w	r5, #15
   278e0:	e7d7      	b.n	27892 <smp_send_security_req+0xc8>
		return -ENOBUFS;
   278e2:	f06f 0568 	mvn.w	r5, #104	; 0x68
   278e6:	e7d4      	b.n	27892 <smp_send_security_req+0xc8>
		return -ENOBUFS;
   278e8:	f06f 0568 	mvn.w	r5, #104	; 0x68
   278ec:	e7d1      	b.n	27892 <smp_send_security_req+0xc8>

000278ee <generate_dhkey>:
{
   278ee:	b510      	push	{r4, lr}
   278f0:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   278f2:	1d03      	adds	r3, r0, #4
   278f4:	f3bf 8f5b 	dmb	ish
   278f8:	e853 2f00 	ldrex	r2, [r3]
   278fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   27900:	e843 2100 	strex	r1, r2, [r3]
   27904:	2900      	cmp	r1, #0
   27906:	d1f7      	bne.n	278f8 <generate_dhkey+0xa>
   27908:	f3bf 8f5b 	dmb	ish
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   2790c:	2008      	movs	r0, #8
   2790e:	f7f4 f931 	bl	1bb74 <smp_find>
   27912:	b108      	cbz	r0, 27918 <generate_dhkey+0x2a>
	return 0;
   27914:	2000      	movs	r0, #0
}
   27916:	bd10      	pop	{r4, pc}
		return smp_dhkey_generate(smp);
   27918:	4620      	mov	r0, r4
   2791a:	f7f4 ff8d 	bl	1c838 <smp_dhkey_generate>
   2791e:	e7fa      	b.n	27916 <generate_dhkey+0x28>

00027920 <bt_smp_request_ltk>:
{
   27920:	b570      	push	{r4, r5, r6, lr}
   27922:	b082      	sub	sp, #8
   27924:	4604      	mov	r4, r0
   27926:	e9cd 2300 	strd	r2, r3, [sp]
	smp = smp_chan_get(conn);
   2792a:	f7f4 f901 	bl	1bb30 <smp_chan_get>
	if (!smp) {
   2792e:	2800      	cmp	r0, #0
   27930:	f000 80cc 	beq.w	27acc <bt_smp_request_ltk+0x1ac>
   27934:	4605      	mov	r5, r0
	if (ediv == 0U && rand == 0U &&
   27936:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   2793a:	b91b      	cbnz	r3, 27944 <bt_smp_request_ltk+0x24>
   2793c:	e9dd 2300 	ldrd	r2, r3, [sp]
   27940:	4313      	orrs	r3, r2
   27942:	d027      	beq.n	27994 <bt_smp_request_ltk+0x74>
	if (!conn->le.keys) {
   27944:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   27948:	2b00      	cmp	r3, #0
   2794a:	d055      	beq.n	279f8 <bt_smp_request_ltk+0xd8>
	if (ediv == 0U && rand == 0U &&
   2794c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   27950:	b953      	cbnz	r3, 27968 <bt_smp_request_ltk+0x48>
   27952:	e9dd 2300 	ldrd	r2, r3, [sp]
   27956:	4313      	orrs	r3, r2
   27958:	d106      	bne.n	27968 <bt_smp_request_ltk+0x48>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2795a:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   2795e:	b119      	cbz	r1, 27968 <bt_smp_request_ltk+0x48>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   27960:	89cb      	ldrh	r3, [r1, #14]
   27962:	f013 0f20 	tst.w	r3, #32
   27966:	d15a      	bne.n	27a1e <bt_smp_request_ltk+0xfe>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   27968:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   2796c:	b118      	cbz	r0, 27976 <bt_smp_request_ltk+0x56>
   2796e:	89c3      	ldrh	r3, [r0, #14]
   27970:	f013 0f01 	tst.w	r3, #1
   27974:	d172      	bne.n	27a5c <bt_smp_request_ltk+0x13c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27976:	f3bf 8f5b 	dmb	ish
   2797a:	686b      	ldr	r3, [r5, #4]
   2797c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   27980:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   27984:	f040 809c 	bne.w	27ac0 <bt_smp_request_ltk+0x1a0>
	smp_reset(smp);
   27988:	4628      	mov	r0, r5
   2798a:	f7ff fc08 	bl	2719e <smp_reset>
	return false;
   2798e:	2000      	movs	r0, #0
}
   27990:	b002      	add	sp, #8
   27992:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   27994:	1d06      	adds	r6, r0, #4
   27996:	f3bf 8f5b 	dmb	ish
   2799a:	6843      	ldr	r3, [r0, #4]
   2799c:	f3bf 8f5b 	dmb	ish
	if (ediv == 0U && rand == 0U &&
   279a0:	f013 0f08 	tst.w	r3, #8
   279a4:	d0ce      	beq.n	27944 <bt_smp_request_ltk+0x24>
   279a6:	f3bf 8f5b 	dmb	ish
   279aa:	6843      	ldr	r3, [r0, #4]
   279ac:	f3bf 8f5b 	dmb	ish
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   279b0:	f013 0f02 	tst.w	r3, #2
   279b4:	d0c6      	beq.n	27944 <bt_smp_request_ltk+0x24>
		enc_size = get_encryption_key_size(smp);
   279b6:	f7ff faf1 	bl	26f9c <get_encryption_key_size>
   279ba:	4604      	mov	r4, r0
		memcpy(ltk, smp->tk, enc_size);
   279bc:	4602      	mov	r2, r0
   279be:	f105 0147 	add.w	r1, r5, #71	; 0x47
   279c2:	9807      	ldr	r0, [sp, #28]
   279c4:	f7fd f852 	bl	24a6c <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   279c8:	2c0f      	cmp	r4, #15
   279ca:	d90d      	bls.n	279e8 <bt_smp_request_ltk+0xc8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   279cc:	f3bf 8f5b 	dmb	ish
   279d0:	e856 3f00 	ldrex	r3, [r6]
   279d4:	f043 0302 	orr.w	r3, r3, #2
   279d8:	e846 3200 	strex	r2, r3, [r6]
   279dc:	2a00      	cmp	r2, #0
   279de:	d1f7      	bne.n	279d0 <bt_smp_request_ltk+0xb0>
   279e0:	f3bf 8f5b 	dmb	ish
		return true;
   279e4:	2001      	movs	r0, #1
   279e6:	e7d3      	b.n	27990 <bt_smp_request_ltk+0x70>
			(void)memset(ltk + enc_size, 0,
   279e8:	f1c4 0210 	rsb	r2, r4, #16
   279ec:	2100      	movs	r1, #0
   279ee:	9b07      	ldr	r3, [sp, #28]
   279f0:	1918      	adds	r0, r3, r4
   279f2:	f7fd f85f 	bl	24ab4 <memset>
   279f6:	e7e9      	b.n	279cc <bt_smp_request_ltk+0xac>
					     &conn->le.dst);
   279f8:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   279fc:	4632      	mov	r2, r6
   279fe:	7a21      	ldrb	r1, [r4, #8]
   27a00:	2020      	movs	r0, #32
   27a02:	f7f5 ff93 	bl	1d92c <bt_keys_find>
   27a06:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   27a0a:	2800      	cmp	r0, #0
   27a0c:	d19e      	bne.n	2794c <bt_smp_request_ltk+0x2c>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
   27a0e:	4632      	mov	r2, r6
   27a10:	7a21      	ldrb	r1, [r4, #8]
   27a12:	2001      	movs	r0, #1
   27a14:	f7f5 ff8a 	bl	1d92c <bt_keys_find>
   27a18:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
   27a1c:	e796      	b.n	2794c <bt_smp_request_ltk+0x2c>
		enc_size = conn->le.keys->enc_size;
   27a1e:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   27a20:	4622      	mov	r2, r4
   27a22:	311a      	adds	r1, #26
   27a24:	9807      	ldr	r0, [sp, #28]
   27a26:	f7fd f821 	bl	24a6c <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   27a2a:	2c0f      	cmp	r4, #15
   27a2c:	d90e      	bls.n	27a4c <bt_smp_request_ltk+0x12c>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   27a2e:	3504      	adds	r5, #4
   27a30:	f3bf 8f5b 	dmb	ish
   27a34:	e855 3f00 	ldrex	r3, [r5]
   27a38:	f043 0302 	orr.w	r3, r3, #2
   27a3c:	e845 3200 	strex	r2, r3, [r5]
   27a40:	2a00      	cmp	r2, #0
   27a42:	d1f7      	bne.n	27a34 <bt_smp_request_ltk+0x114>
   27a44:	f3bf 8f5b 	dmb	ish
		return true;
   27a48:	2001      	movs	r0, #1
   27a4a:	e7a1      	b.n	27990 <bt_smp_request_ltk+0x70>
			(void)memset(ltk + enc_size, 0,
   27a4c:	f1c4 0210 	rsb	r2, r4, #16
   27a50:	2100      	movs	r1, #0
   27a52:	9b07      	ldr	r3, [sp, #28]
   27a54:	1918      	adds	r0, r3, r4
   27a56:	f7fd f82d 	bl	24ab4 <memset>
   27a5a:	e7e8      	b.n	27a2e <bt_smp_request_ltk+0x10e>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   27a5c:	2208      	movs	r2, #8
   27a5e:	4669      	mov	r1, sp
   27a60:	3040      	adds	r0, #64	; 0x40
   27a62:	f7fc ffec 	bl	24a3e <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   27a66:	2800      	cmp	r0, #0
   27a68:	d185      	bne.n	27976 <bt_smp_request_ltk+0x56>
	    !memcmp(conn->le.keys->slave_ltk.ediv, &ediv, 2)) {
   27a6a:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   27a6e:	2202      	movs	r2, #2
   27a70:	a906      	add	r1, sp, #24
   27a72:	3048      	adds	r0, #72	; 0x48
   27a74:	f7fc ffe3 	bl	24a3e <memcmp>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   27a78:	2800      	cmp	r0, #0
   27a7a:	f47f af7c 	bne.w	27976 <bt_smp_request_ltk+0x56>
		enc_size = conn->le.keys->enc_size;
   27a7e:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   27a82:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   27a84:	4622      	mov	r2, r4
   27a86:	314a      	adds	r1, #74	; 0x4a
   27a88:	9807      	ldr	r0, [sp, #28]
   27a8a:	f7fc ffef 	bl	24a6c <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   27a8e:	2c0f      	cmp	r4, #15
   27a90:	d90e      	bls.n	27ab0 <bt_smp_request_ltk+0x190>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   27a92:	3504      	adds	r5, #4
   27a94:	f3bf 8f5b 	dmb	ish
   27a98:	e855 3f00 	ldrex	r3, [r5]
   27a9c:	f043 0302 	orr.w	r3, r3, #2
   27aa0:	e845 3200 	strex	r2, r3, [r5]
   27aa4:	2a00      	cmp	r2, #0
   27aa6:	d1f7      	bne.n	27a98 <bt_smp_request_ltk+0x178>
   27aa8:	f3bf 8f5b 	dmb	ish
		return true;
   27aac:	2001      	movs	r0, #1
   27aae:	e76f      	b.n	27990 <bt_smp_request_ltk+0x70>
			(void)memset(ltk + enc_size, 0,
   27ab0:	f1c4 0210 	rsb	r2, r4, #16
   27ab4:	2100      	movs	r1, #0
   27ab6:	9b07      	ldr	r3, [sp, #28]
   27ab8:	1918      	adds	r0, r3, r4
   27aba:	f7fc fffb 	bl	24ab4 <memset>
   27abe:	e7e8      	b.n	27a92 <bt_smp_request_ltk+0x172>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   27ac0:	2202      	movs	r2, #2
   27ac2:	2106      	movs	r1, #6
   27ac4:	4620      	mov	r0, r4
   27ac6:	f7f0 fbfd 	bl	182c4 <bt_conn_security_changed>
   27aca:	e75d      	b.n	27988 <bt_smp_request_ltk+0x68>
		return false;
   27acc:	2000      	movs	r0, #0
   27ace:	e75f      	b.n	27990 <bt_smp_request_ltk+0x70>

00027ad0 <bt_smp_sign>:
}
   27ad0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   27ad4:	4770      	bx	lr

00027ad6 <bt_smp_auth_pairing_confirm>:
{
   27ad6:	b508      	push	{r3, lr}
	smp = smp_chan_get(conn);
   27ad8:	f7f4 f82a 	bl	1bb30 <smp_chan_get>
	if (!smp) {
   27adc:	b3d0      	cbz	r0, 27b54 <bt_smp_auth_pairing_confirm+0x7e>
   27ade:	4603      	mov	r3, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER)) {
   27ae0:	1d02      	adds	r2, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   27ae2:	f3bf 8f5b 	dmb	ish
   27ae6:	e852 1f00 	ldrex	r1, [r2]
   27aea:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
   27aee:	e842 0c00 	strex	ip, r0, [r2]
   27af2:	f1bc 0f00 	cmp.w	ip, #0
   27af6:	d1f6      	bne.n	27ae6 <bt_smp_auth_pairing_confirm+0x10>
   27af8:	f3bf 8f5b 	dmb	ish
   27afc:	f411 6f80 	tst.w	r1, #1024	; 0x400
   27b00:	d02b      	beq.n	27b5a <bt_smp_auth_pairing_confirm+0x84>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27b02:	f3bf 8f5b 	dmb	ish
   27b06:	685a      	ldr	r2, [r3, #4]
   27b08:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   27b0c:	f012 0f20 	tst.w	r2, #32
   27b10:	d010      	beq.n	27b34 <bt_smp_auth_pairing_confirm+0x5e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27b12:	f3bf 8f5b 	dmb	ish
   27b16:	e853 2f00 	ldrex	r2, [r3]
   27b1a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   27b1e:	e843 2100 	strex	r1, r2, [r3]
   27b22:	2900      	cmp	r1, #0
   27b24:	d1f7      	bne.n	27b16 <bt_smp_auth_pairing_confirm+0x40>
   27b26:	f3bf 8f5b 	dmb	ish
	if (send_pairing_rsp(smp)) {
   27b2a:	4618      	mov	r0, r3
   27b2c:	f7ff fc9f 	bl	2746e <send_pairing_rsp>
   27b30:	b9b0      	cbnz	r0, 27b60 <bt_smp_auth_pairing_confirm+0x8a>
}
   27b32:	bd08      	pop	{r3, pc}
   27b34:	f3bf 8f5b 	dmb	ish
   27b38:	e853 2f00 	ldrex	r2, [r3]
   27b3c:	f042 0208 	orr.w	r2, r2, #8
   27b40:	e843 2100 	strex	r1, r2, [r3]
   27b44:	2900      	cmp	r1, #0
   27b46:	d1f7      	bne.n	27b38 <bt_smp_auth_pairing_confirm+0x62>
   27b48:	f3bf 8f5b 	dmb	ish
		return send_pairing_rsp(smp);
   27b4c:	4618      	mov	r0, r3
   27b4e:	f7ff fc8e 	bl	2746e <send_pairing_rsp>
   27b52:	e7ee      	b.n	27b32 <bt_smp_auth_pairing_confirm+0x5c>
		return -EINVAL;
   27b54:	f06f 0015 	mvn.w	r0, #21
   27b58:	e7eb      	b.n	27b32 <bt_smp_auth_pairing_confirm+0x5c>
		return -EINVAL;
   27b5a:	f06f 0015 	mvn.w	r0, #21
   27b5e:	e7e8      	b.n	27b32 <bt_smp_auth_pairing_confirm+0x5c>
		return -EIO;
   27b60:	f06f 0004 	mvn.w	r0, #4
   27b64:	e7e5      	b.n	27b32 <bt_smp_auth_pairing_confirm+0x5c>

00027b66 <bt_smp_start_security>:
{
   27b66:	b508      	push	{r3, lr}
	switch (conn->role) {
   27b68:	78c3      	ldrb	r3, [r0, #3]
   27b6a:	2b01      	cmp	r3, #1
   27b6c:	d102      	bne.n	27b74 <bt_smp_start_security+0xe>
		return smp_send_security_req(conn);
   27b6e:	f7ff fe2c 	bl	277ca <smp_send_security_req>
}
   27b72:	bd08      	pop	{r3, pc}
		return -EINVAL;
   27b74:	f06f 0015 	mvn.w	r0, #21
   27b78:	e7fb      	b.n	27b72 <bt_smp_start_security+0xc>

00027b7a <smp_error>:
{
   27b7a:	b570      	push	{r4, r5, r6, lr}
   27b7c:	b082      	sub	sp, #8
   27b7e:	4604      	mov	r4, r0
   27b80:	460d      	mov	r5, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27b82:	f3bf 8f5b 	dmb	ish
   27b86:	6843      	ldr	r3, [r0, #4]
   27b88:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   27b8c:	f013 0f08 	tst.w	r3, #8
   27b90:	d107      	bne.n	27ba2 <smp_error+0x28>
   27b92:	f3bf 8f5b 	dmb	ish
   27b96:	6843      	ldr	r3, [r0, #4]
   27b98:	f3bf 8f5b 	dmb	ish
   27b9c:	f013 0f02 	tst.w	r3, #2
   27ba0:	d01a      	beq.n	27bd8 <smp_error+0x5e>
		smp_pairing_complete(smp, reason);
   27ba2:	4629      	mov	r1, r5
   27ba4:	4620      	mov	r0, r4
   27ba6:	f7f5 fa41 	bl	1d02c <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   27baa:	2201      	movs	r2, #1
   27bac:	2105      	movs	r1, #5
   27bae:	4620      	mov	r0, r4
   27bb0:	f7ff fb7d 	bl	272ae <smp_create_pdu>
	if (!buf) {
   27bb4:	4606      	mov	r6, r0
   27bb6:	b1e8      	cbz	r0, 27bf4 <smp_error+0x7a>
   27bb8:	2101      	movs	r1, #1
   27bba:	3008      	adds	r0, #8
   27bbc:	f000 fbb9 	bl	28332 <net_buf_simple_add>
	rsp->reason = reason;
   27bc0:	7005      	strb	r5, [r0, #0]
   27bc2:	2300      	movs	r3, #0
   27bc4:	9300      	str	r3, [sp, #0]
   27bc6:	4632      	mov	r2, r6
   27bc8:	2106      	movs	r1, #6
   27bca:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   27bce:	f7fd ffd0 	bl	25b72 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   27bd2:	b950      	cbnz	r0, 27bea <smp_error+0x70>
}
   27bd4:	b002      	add	sp, #8
   27bd6:	bd70      	pop	{r4, r5, r6, pc}
   27bd8:	f3bf 8f5b 	dmb	ish
   27bdc:	6843      	ldr	r3, [r0, #4]
   27bde:	f3bf 8f5b 	dmb	ish
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   27be2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   27be6:	d0e0      	beq.n	27baa <smp_error+0x30>
   27be8:	e7db      	b.n	27ba2 <smp_error+0x28>
		net_buf_unref(buf);
   27bea:	4630      	mov	r0, r6
   27bec:	f000 fb57 	bl	2829e <net_buf_unref>
	return 0;
   27bf0:	2000      	movs	r0, #0
   27bf2:	e7ef      	b.n	27bd4 <smp_error+0x5a>
		return -ENOBUFS;
   27bf4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27bf8:	e7ec      	b.n	27bd4 <smp_error+0x5a>

00027bfa <legacy_user_tk_entry>:
{
   27bfa:	b510      	push	{r4, lr}
   27bfc:	4604      	mov	r4, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED)) {
   27bfe:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   27c00:	f3bf 8f5b 	dmb	ish
   27c04:	e853 2f00 	ldrex	r2, [r3]
   27c08:	f022 0101 	bic.w	r1, r2, #1
   27c0c:	e843 1000 	strex	r0, r1, [r3]
   27c10:	2800      	cmp	r0, #0
   27c12:	d1f7      	bne.n	27c04 <legacy_user_tk_entry+0xa>
   27c14:	f3bf 8f5b 	dmb	ish
   27c18:	f012 0f01 	tst.w	r2, #1
   27c1c:	d100      	bne.n	27c20 <legacy_user_tk_entry+0x26>
}
   27c1e:	bd10      	pop	{r4, pc}
	if (legacy_pairing_confirm(smp)) {
   27c20:	4620      	mov	r0, r4
   27c22:	f7ff fbc7 	bl	273b4 <legacy_pairing_confirm>
   27c26:	b960      	cbnz	r0, 27c42 <legacy_user_tk_entry+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27c28:	f3bf 8f5b 	dmb	ish
   27c2c:	e854 3f00 	ldrex	r3, [r4]
   27c30:	f043 0310 	orr.w	r3, r3, #16
   27c34:	e844 3200 	strex	r2, r3, [r4]
   27c38:	2a00      	cmp	r2, #0
   27c3a:	d1f7      	bne.n	27c2c <legacy_user_tk_entry+0x32>
   27c3c:	f3bf 8f5b 	dmb	ish
}
   27c40:	e7ed      	b.n	27c1e <legacy_user_tk_entry+0x24>
		smp_error(smp, BT_SMP_ERR_PASSKEY_ENTRY_FAILED);
   27c42:	2101      	movs	r1, #1
   27c44:	4620      	mov	r0, r4
   27c46:	f7ff ff98 	bl	27b7a <smp_error>
		return;
   27c4a:	e7e8      	b.n	27c1e <legacy_user_tk_entry+0x24>

00027c4c <legacy_passkey_entry>:
{
   27c4c:	b510      	push	{r4, lr}
   27c4e:	b082      	sub	sp, #8
   27c50:	4604      	mov	r4, r0
   27c52:	9101      	str	r1, [sp, #4]
	memcpy(smp->tk, &passkey, sizeof(passkey));
   27c54:	2204      	movs	r2, #4
   27c56:	eb0d 0102 	add.w	r1, sp, r2
   27c5a:	3047      	adds	r0, #71	; 0x47
   27c5c:	f7fc ff06 	bl	24a6c <memcpy>
	legacy_user_tk_entry(smp);
   27c60:	4620      	mov	r0, r4
   27c62:	f7ff ffca 	bl	27bfa <legacy_user_tk_entry>
}
   27c66:	b002      	add	sp, #8
   27c68:	bd10      	pop	{r4, pc}

00027c6a <bt_smp_auth_passkey_entry>:
{
   27c6a:	b570      	push	{r4, r5, r6, lr}
   27c6c:	460e      	mov	r6, r1
	smp = smp_chan_get(conn);
   27c6e:	f7f3 ff5f 	bl	1bb30 <smp_chan_get>
	if (!smp) {
   27c72:	2800      	cmp	r0, #0
   27c74:	d043      	beq.n	27cfe <bt_smp_auth_passkey_entry+0x94>
   27c76:	4604      	mov	r4, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER)) {
   27c78:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   27c7a:	f3bf 8f5b 	dmb	ish
   27c7e:	e853 2f00 	ldrex	r2, [r3]
   27c82:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
   27c86:	e843 1000 	strex	r0, r1, [r3]
   27c8a:	2800      	cmp	r0, #0
   27c8c:	d1f7      	bne.n	27c7e <bt_smp_auth_passkey_entry+0x14>
   27c8e:	f3bf 8f5b 	dmb	ish
   27c92:	f412 6f80 	tst.w	r2, #1024	; 0x400
   27c96:	d035      	beq.n	27d04 <bt_smp_auth_passkey_entry+0x9a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27c98:	f3bf 8f5b 	dmb	ish
   27c9c:	6863      	ldr	r3, [r4, #4]
   27c9e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   27ca2:	f3c3 1540 	ubfx	r5, r3, #5, #1
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   27ca6:	f013 0f20 	tst.w	r3, #32
   27caa:	d00b      	beq.n	27cc4 <bt_smp_auth_passkey_entry+0x5a>
	smp->passkey = sys_cpu_to_le32(passkey);
   27cac:	f8c4 60d8 	str.w	r6, [r4, #216]	; 0xd8
   27cb0:	f3bf 8f5b 	dmb	ish
   27cb4:	6865      	ldr	r5, [r4, #4]
   27cb6:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   27cba:	f015 0501 	ands.w	r5, r5, #1
   27cbe:	d106      	bne.n	27cce <bt_smp_auth_passkey_entry+0x64>
}
   27cc0:	4628      	mov	r0, r5
   27cc2:	bd70      	pop	{r4, r5, r6, pc}
		legacy_passkey_entry(smp, passkey);
   27cc4:	4631      	mov	r1, r6
   27cc6:	4620      	mov	r0, r4
   27cc8:	f7ff ffc0 	bl	27c4c <legacy_passkey_entry>
		return 0;
   27ccc:	e7f8      	b.n	27cc0 <bt_smp_auth_passkey_entry+0x56>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27cce:	f3bf 8f5b 	dmb	ish
   27cd2:	e854 3f00 	ldrex	r3, [r4]
   27cd6:	f043 0310 	orr.w	r3, r3, #16
   27cda:	e844 3200 	strex	r2, r3, [r4]
   27cde:	2a00      	cmp	r2, #0
   27ce0:	d1f7      	bne.n	27cd2 <bt_smp_auth_passkey_entry+0x68>
   27ce2:	f3bf 8f5b 	dmb	ish
		err = smp_send_pairing_confirm(smp);
   27ce6:	4620      	mov	r0, r4
   27ce8:	f7f4 f854 	bl	1bd94 <smp_send_pairing_confirm>
		if (err) {
   27cec:	b908      	cbnz	r0, 27cf2 <bt_smp_auth_passkey_entry+0x88>
	return 0;
   27cee:	2500      	movs	r5, #0
   27cf0:	e7e6      	b.n	27cc0 <bt_smp_auth_passkey_entry+0x56>
			smp_error(smp, BT_SMP_ERR_PASSKEY_ENTRY_FAILED);
   27cf2:	2101      	movs	r1, #1
   27cf4:	4620      	mov	r0, r4
   27cf6:	f7ff ff40 	bl	27b7a <smp_error>
			return 0;
   27cfa:	2500      	movs	r5, #0
   27cfc:	e7e0      	b.n	27cc0 <bt_smp_auth_passkey_entry+0x56>
		return -EINVAL;
   27cfe:	f06f 0515 	mvn.w	r5, #21
   27d02:	e7dd      	b.n	27cc0 <bt_smp_auth_passkey_entry+0x56>
		return -EINVAL;
   27d04:	f06f 0515 	mvn.w	r5, #21
   27d08:	e7da      	b.n	27cc0 <bt_smp_auth_passkey_entry+0x56>

00027d0a <bt_smp_auth_passkey_confirm>:
{
   27d0a:	b538      	push	{r3, r4, r5, lr}
	smp = smp_chan_get(conn);
   27d0c:	f7f3 ff10 	bl	1bb30 <smp_chan_get>
	if (!smp) {
   27d10:	2800      	cmp	r0, #0
   27d12:	d055      	beq.n	27dc0 <bt_smp_auth_passkey_confirm+0xb6>
   27d14:	4604      	mov	r4, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER)) {
   27d16:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   27d18:	f3bf 8f5b 	dmb	ish
   27d1c:	e853 2f00 	ldrex	r2, [r3]
   27d20:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
   27d24:	e843 1000 	strex	r0, r1, [r3]
   27d28:	2800      	cmp	r0, #0
   27d2a:	d1f7      	bne.n	27d1c <bt_smp_auth_passkey_confirm+0x12>
   27d2c:	f3bf 8f5b 	dmb	ish
   27d30:	f412 6f80 	tst.w	r2, #1024	; 0x400
   27d34:	d047      	beq.n	27dc6 <bt_smp_auth_passkey_confirm+0xbc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27d36:	f3bf 8f5b 	dmb	ish
   27d3a:	6862      	ldr	r2, [r4, #4]
   27d3c:	f3bf 8f5b 	dmb	ish
   27d40:	f3c2 10c0 	ubfx	r0, r2, #7, #1
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   27d44:	f012 0f80 	tst.w	r2, #128	; 0x80
   27d48:	d11a      	bne.n	27d80 <bt_smp_auth_passkey_confirm+0x76>
   27d4a:	f3bf 8f5b 	dmb	ish
   27d4e:	6862      	ldr	r2, [r4, #4]
   27d50:	f3bf 8f5b 	dmb	ish
   27d54:	f3c2 4500 	ubfx	r5, r2, #16, #1
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   27d58:	f412 3f80 	tst.w	r2, #65536	; 0x10000
   27d5c:	d11e      	bne.n	27d9c <bt_smp_auth_passkey_confirm+0x92>
   27d5e:	f3bf 8f5b 	dmb	ish
   27d62:	6863      	ldr	r3, [r4, #4]
   27d64:	f3bf 8f5b 	dmb	ish
   27d68:	f3c3 2040 	ubfx	r0, r3, #9, #1
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   27d6c:	f413 7f00 	tst.w	r3, #512	; 0x200
   27d70:	d013      	beq.n	27d9a <bt_smp_auth_passkey_confirm+0x90>
		err = compute_and_check_and_send_slave_dhcheck(smp);
   27d72:	4620      	mov	r0, r4
   27d74:	f7f4 f9e8 	bl	1c148 <compute_and_check_and_send_slave_dhcheck>
		if (err) {
   27d78:	4601      	mov	r1, r0
   27d7a:	b9e0      	cbnz	r0, 27db6 <bt_smp_auth_passkey_confirm+0xac>
	return 0;
   27d7c:	4628      	mov	r0, r5
   27d7e:	e00c      	b.n	27d9a <bt_smp_auth_passkey_confirm+0x90>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27d80:	f3bf 8f5b 	dmb	ish
   27d84:	e853 2f00 	ldrex	r2, [r3]
   27d88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   27d8c:	e843 2100 	strex	r1, r2, [r3]
   27d90:	2900      	cmp	r1, #0
   27d92:	d1f7      	bne.n	27d84 <bt_smp_auth_passkey_confirm+0x7a>
   27d94:	f3bf 8f5b 	dmb	ish
		return 0;
   27d98:	2000      	movs	r0, #0
}
   27d9a:	bd38      	pop	{r3, r4, r5, pc}
   27d9c:	f3bf 8f5b 	dmb	ish
   27da0:	e853 2f00 	ldrex	r2, [r3]
   27da4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   27da8:	e843 2100 	strex	r1, r2, [r3]
   27dac:	2900      	cmp	r1, #0
   27dae:	d1f7      	bne.n	27da0 <bt_smp_auth_passkey_confirm+0x96>
   27db0:	f3bf 8f5b 	dmb	ish
		return 0;
   27db4:	e7f1      	b.n	27d9a <bt_smp_auth_passkey_confirm+0x90>
			smp_error(smp, err);
   27db6:	4620      	mov	r0, r4
   27db8:	f7ff fedf 	bl	27b7a <smp_error>
	return 0;
   27dbc:	4628      	mov	r0, r5
   27dbe:	e7ec      	b.n	27d9a <bt_smp_auth_passkey_confirm+0x90>
		return -EINVAL;
   27dc0:	f06f 0015 	mvn.w	r0, #21
   27dc4:	e7e9      	b.n	27d9a <bt_smp_auth_passkey_confirm+0x90>
		return -EINVAL;
   27dc6:	f06f 0015 	mvn.w	r0, #21
   27dca:	e7e6      	b.n	27d9a <bt_smp_auth_passkey_confirm+0x90>

00027dcc <bt_smp_dhkey_ready>:
{
   27dcc:	b538      	push	{r3, r4, r5, lr}
   27dce:	4604      	mov	r4, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   27dd0:	2008      	movs	r0, #8
   27dd2:	f7f3 fecf 	bl	1bb74 <smp_find>
	if (smp) {
   27dd6:	b198      	cbz	r0, 27e00 <bt_smp_dhkey_ready+0x34>
   27dd8:	4605      	mov	r5, r0
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   27dda:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   27ddc:	f3bf 8f5b 	dmb	ish
   27de0:	e853 2f00 	ldrex	r2, [r3]
   27de4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   27de8:	e843 2100 	strex	r1, r2, [r3]
   27dec:	2900      	cmp	r1, #0
   27dee:	d1f7      	bne.n	27de0 <bt_smp_dhkey_ready+0x14>
   27df0:	f3bf 8f5b 	dmb	ish
		err = smp_dhkey_ready(smp, dhkey);
   27df4:	4621      	mov	r1, r4
   27df6:	4628      	mov	r0, r5
   27df8:	f7ff fc72 	bl	276e0 <smp_dhkey_ready>
		if (err) {
   27dfc:	4601      	mov	r1, r0
   27dfe:	b908      	cbnz	r0, 27e04 <bt_smp_dhkey_ready+0x38>
{
   27e00:	2500      	movs	r5, #0
   27e02:	e009      	b.n	27e18 <bt_smp_dhkey_ready+0x4c>
			smp_error(smp, err);
   27e04:	4628      	mov	r0, r5
   27e06:	f7ff feb8 	bl	27b7a <smp_error>
   27e0a:	e7f9      	b.n	27e00 <bt_smp_dhkey_ready+0x34>
				smp_error(smp, err);
   27e0c:	4601      	mov	r1, r0
   27e0e:	4620      	mov	r0, r4
   27e10:	f7ff feb3 	bl	27b7a <smp_error>
	} while (smp && err);
   27e14:	b164      	cbz	r4, 27e30 <bt_smp_dhkey_ready+0x64>
   27e16:	b15d      	cbz	r5, 27e30 <bt_smp_dhkey_ready+0x64>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   27e18:	2007      	movs	r0, #7
   27e1a:	f7f3 feab 	bl	1bb74 <smp_find>
		if (smp) {
   27e1e:	4604      	mov	r4, r0
   27e20:	2800      	cmp	r0, #0
   27e22:	d0f7      	beq.n	27e14 <bt_smp_dhkey_ready+0x48>
			err = smp_dhkey_generate(smp);
   27e24:	f7f4 fd08 	bl	1c838 <smp_dhkey_generate>
   27e28:	4605      	mov	r5, r0
			if (err) {
   27e2a:	2800      	cmp	r0, #0
   27e2c:	d0f2      	beq.n	27e14 <bt_smp_dhkey_ready+0x48>
   27e2e:	e7ed      	b.n	27e0c <bt_smp_dhkey_ready+0x40>
}
   27e30:	bd38      	pop	{r3, r4, r5, pc}

00027e32 <bt_smp_encrypt_change>:
{
   27e32:	b570      	push	{r4, r5, r6, lr}
   27e34:	4605      	mov	r5, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   27e36:	f1a0 06f0 	sub.w	r6, r0, #240	; 0xf0
	struct bt_conn *conn = chan->conn;
   27e3a:	4604      	mov	r4, r0
   27e3c:	f854 29ec 	ldr.w	r2, [r4], #-236
   27e40:	f3bf 8f5b 	dmb	ish
   27e44:	e854 3f00 	ldrex	r3, [r4]
   27e48:	f023 0002 	bic.w	r0, r3, #2
   27e4c:	e844 0c00 	strex	ip, r0, [r4]
   27e50:	f1bc 0f00 	cmp.w	ip, #0
   27e54:	d1f6      	bne.n	27e44 <bt_smp_encrypt_change+0x12>
   27e56:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   27e5a:	f013 0f02 	tst.w	r3, #2
   27e5e:	d002      	beq.n	27e66 <bt_smp_encrypt_change+0x34>
	if (hci_status) {
   27e60:	b911      	cbnz	r1, 27e68 <bt_smp_encrypt_change+0x36>
	if (!conn->encrypt) {
   27e62:	7ad3      	ldrb	r3, [r2, #11]
   27e64:	b9fb      	cbnz	r3, 27ea6 <bt_smp_encrypt_change+0x74>
}
   27e66:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27e68:	f3bf 8f5b 	dmb	ish
   27e6c:	f855 3cec 	ldr.w	r3, [r5, #-236]
   27e70:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   27e74:	f013 0f08 	tst.w	r3, #8
   27e78:	d0f5      	beq.n	27e66 <bt_smp_encrypt_change+0x34>
			uint8_t smp_err = smp_err_get(
   27e7a:	4608      	mov	r0, r1
   27e7c:	f7fd f805 	bl	24e8a <bt_security_err_get>
   27e80:	f7ff f879 	bl	26f76 <smp_err_get>
   27e84:	4601      	mov	r1, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27e86:	f3bf 8f5b 	dmb	ish
   27e8a:	e854 3f00 	ldrex	r3, [r4]
   27e8e:	f043 0304 	orr.w	r3, r3, #4
   27e92:	e844 3200 	strex	r2, r3, [r4]
   27e96:	2a00      	cmp	r2, #0
   27e98:	d1f7      	bne.n	27e8a <bt_smp_encrypt_change+0x58>
   27e9a:	f3bf 8f5b 	dmb	ish
			smp_pairing_complete(smp, smp_err);
   27e9e:	4630      	mov	r0, r6
   27ea0:	f7f5 f8c4 	bl	1d02c <smp_pairing_complete>
		return;
   27ea4:	e7df      	b.n	27e66 <bt_smp_encrypt_change+0x34>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27ea6:	f3bf 8f5b 	dmb	ish
   27eaa:	f855 3cec 	ldr.w	r3, [r5, #-236]
   27eae:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   27eb2:	f013 0f08 	tst.w	r3, #8
   27eb6:	d044      	beq.n	27f42 <bt_smp_encrypt_change+0x110>
   27eb8:	f3bf 8f5b 	dmb	ish
   27ebc:	f855 3cec 	ldr.w	r3, [r5, #-236]
   27ec0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   27ec4:	f013 0f20 	tst.w	r3, #32
   27ec8:	d021      	beq.n	27f0e <bt_smp_encrypt_change+0xdc>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   27eca:	f815 3c08 	ldrb.w	r3, [r5, #-8]
   27ece:	f013 0f08 	tst.w	r3, #8
   27ed2:	d010      	beq.n	27ef6 <bt_smp_encrypt_change+0xc4>
		    (smp->remote_dist & BT_SMP_DIST_LINK_KEY)) {
   27ed4:	f815 3c07 	ldrb.w	r3, [r5, #-7]
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   27ed8:	f013 0f08 	tst.w	r3, #8
   27edc:	d00b      	beq.n	27ef6 <bt_smp_encrypt_change+0xc4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27ede:	f3bf 8f5b 	dmb	ish
   27ee2:	e854 3f00 	ldrex	r3, [r4]
   27ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   27eea:	e844 3200 	strex	r2, r3, [r4]
   27eee:	2a00      	cmp	r2, #0
   27ef0:	d1f7      	bne.n	27ee2 <bt_smp_encrypt_change+0xb0>
   27ef2:	f3bf 8f5b 	dmb	ish
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   27ef6:	f815 3c08 	ldrb.w	r3, [r5, #-8]
   27efa:	f023 0308 	bic.w	r3, r3, #8
   27efe:	f805 3c08 	strb.w	r3, [r5, #-8]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   27f02:	f815 3c07 	ldrb.w	r3, [r5, #-7]
   27f06:	f023 0308 	bic.w	r3, r3, #8
   27f0a:	f805 3c07 	strb.w	r3, [r5, #-7]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   27f0e:	f815 3c07 	ldrb.w	r3, [r5, #-7]
   27f12:	f013 0f01 	tst.w	r3, #1
   27f16:	d118      	bne.n	27f4a <bt_smp_encrypt_change+0x118>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   27f18:	f013 0f02 	tst.w	r3, #2
   27f1c:	d13f      	bne.n	27f9e <bt_smp_encrypt_change+0x16c>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   27f1e:	f013 0f04 	tst.w	r3, #4
   27f22:	d020      	beq.n	27f66 <bt_smp_encrypt_change+0x134>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   27f24:	f1a5 03f0 	sub.w	r3, r5, #240	; 0xf0
   27f28:	f3bf 8f5b 	dmb	ish
   27f2c:	e853 2f00 	ldrex	r2, [r3]
   27f30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   27f34:	e843 2100 	strex	r1, r2, [r3]
   27f38:	2900      	cmp	r1, #0
   27f3a:	d1f7      	bne.n	27f2c <bt_smp_encrypt_change+0xfa>
   27f3c:	f3bf 8f5b 	dmb	ish
}
   27f40:	e011      	b.n	27f66 <bt_smp_encrypt_change+0x134>
		smp_reset(smp);
   27f42:	4630      	mov	r0, r6
   27f44:	f7ff f92b 	bl	2719e <smp_reset>
		return;
   27f48:	e78d      	b.n	27e66 <bt_smp_encrypt_change+0x34>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   27f4a:	f1a5 03f0 	sub.w	r3, r5, #240	; 0xf0
   27f4e:	f3bf 8f5b 	dmb	ish
   27f52:	e853 2f00 	ldrex	r2, [r3]
   27f56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   27f5a:	e843 2100 	strex	r1, r2, [r3]
   27f5e:	2900      	cmp	r1, #0
   27f60:	d1f7      	bne.n	27f52 <bt_smp_encrypt_change+0x120>
   27f62:	f3bf 8f5b 	dmb	ish
   27f66:	f3bf 8f5b 	dmb	ish
   27f6a:	e854 3f00 	ldrex	r3, [r4]
   27f6e:	f043 0304 	orr.w	r3, r3, #4
   27f72:	e844 3200 	strex	r2, r3, [r4]
   27f76:	2a00      	cmp	r2, #0
   27f78:	d1f7      	bne.n	27f6a <bt_smp_encrypt_change+0x138>
   27f7a:	f3bf 8f5b 	dmb	ish
	if (bt_smp_distribute_keys(smp)) {
   27f7e:	4630      	mov	r0, r6
   27f80:	f7f4 fc26 	bl	1c7d0 <bt_smp_distribute_keys>
   27f84:	2800      	cmp	r0, #0
   27f86:	f47f af6e 	bne.w	27e66 <bt_smp_encrypt_change+0x34>
	if (!smp->local_dist && !smp->remote_dist) {
   27f8a:	f835 3c08 	ldrh.w	r3, [r5, #-8]
   27f8e:	2b00      	cmp	r3, #0
   27f90:	f47f af69 	bne.w	27e66 <bt_smp_encrypt_change+0x34>
		smp_pairing_complete(smp, 0);
   27f94:	2100      	movs	r1, #0
   27f96:	4630      	mov	r0, r6
   27f98:	f7f5 f848 	bl	1d02c <smp_pairing_complete>
   27f9c:	e763      	b.n	27e66 <bt_smp_encrypt_change+0x34>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   27f9e:	f1a5 03f0 	sub.w	r3, r5, #240	; 0xf0
   27fa2:	f3bf 8f5b 	dmb	ish
   27fa6:	e853 2f00 	ldrex	r2, [r3]
   27faa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   27fae:	e843 2100 	strex	r1, r2, [r3]
   27fb2:	2900      	cmp	r1, #0
   27fb4:	d1f7      	bne.n	27fa6 <bt_smp_encrypt_change+0x174>
   27fb6:	f3bf 8f5b 	dmb	ish
   27fba:	e7d4      	b.n	27f66 <bt_smp_encrypt_change+0x134>

00027fbc <smp_check_complete>:
	if (conn->type == BT_CONN_TYPE_LE) {
   27fbc:	7883      	ldrb	r3, [r0, #2]
   27fbe:	2b01      	cmp	r3, #1
   27fc0:	d000      	beq.n	27fc4 <smp_check_complete+0x8>
   27fc2:	4770      	bx	lr
{
   27fc4:	b510      	push	{r4, lr}
   27fc6:	460c      	mov	r4, r1
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   27fc8:	2106      	movs	r1, #6
   27fca:	f7fd fe14 	bl	25bf6 <bt_l2cap_le_lookup_tx_cid>
   27fce:	4603      	mov	r3, r0
		smp = CONTAINER_OF(chan, struct bt_smp, chan);
   27fd0:	38f0      	subs	r0, #240	; 0xf0
		smp->local_dist &= ~dist_complete;
   27fd2:	f813 1c08 	ldrb.w	r1, [r3, #-8]
   27fd6:	ea21 0104 	bic.w	r1, r1, r4
   27fda:	f803 1c08 	strb.w	r1, [r3, #-8]
		if (!smp->local_dist && !smp->remote_dist) {
   27fde:	f833 3c08 	ldrh.w	r3, [r3, #-8]
   27fe2:	b103      	cbz	r3, 27fe6 <smp_check_complete+0x2a>
}
   27fe4:	bd10      	pop	{r4, pc}
			smp_pairing_complete(smp, 0);
   27fe6:	2100      	movs	r1, #0
   27fe8:	f7f5 f820 	bl	1d02c <smp_pairing_complete>
		return;
   27fec:	e7fa      	b.n	27fe4 <smp_check_complete+0x28>

00027fee <smp_ident_sent>:
{
   27fee:	b508      	push	{r3, lr}
	smp_check_complete(conn, BT_SMP_DIST_ENC_KEY);
   27ff0:	2101      	movs	r1, #1
   27ff2:	f7ff ffe3 	bl	27fbc <smp_check_complete>
}
   27ff6:	bd08      	pop	{r3, pc}

00027ff8 <bt_smp_disconnected>:
{
   27ff8:	b570      	push	{r4, r5, r6, lr}
   27ffa:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   27ffc:	f1a0 06f0 	sub.w	r6, r0, #240	; 0xf0
	struct bt_keys *keys = chan->conn->le.keys;
   28000:	f850 3be8 	ldr.w	r3, [r0], #232
   28004:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	(void)k_work_cancel_delayable(&smp->work);
   28008:	f001 fa99 	bl	2953e <k_work_cancel_delayable>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2800c:	f3bf 8f5b 	dmb	ish
   28010:	f854 3cec 	ldr.w	r3, [r4, #-236]
   28014:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   28018:	f013 0f08 	tst.w	r3, #8
   2801c:	d108      	bne.n	28030 <bt_smp_disconnected+0x38>
   2801e:	f3bf 8f5b 	dmb	ish
   28022:	f854 3cec 	ldr.w	r3, [r4, #-236]
   28026:	f3bf 8f5b 	dmb	ish
   2802a:	f013 0f02 	tst.w	r3, #2
   2802e:	d014      	beq.n	2805a <bt_smp_disconnected+0x62>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   28030:	2108      	movs	r1, #8
   28032:	4630      	mov	r0, r6
   28034:	f7f4 fffa 	bl	1d02c <smp_pairing_complete>
	if (keys) {
   28038:	b145      	cbz	r5, 2804c <bt_smp_disconnected+0x54>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   2803a:	89eb      	ldrh	r3, [r5, #14]
   2803c:	b11b      	cbz	r3, 28046 <bt_smp_disconnected+0x4e>
		    (keys->flags & BT_KEYS_DEBUG))) {
   2803e:	7b6b      	ldrb	r3, [r5, #13]
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   28040:	f013 0f02 	tst.w	r3, #2
   28044:	d002      	beq.n	2804c <bt_smp_disconnected+0x54>
			bt_keys_clear(keys);
   28046:	4628      	mov	r0, r5
   28048:	f7f5 fd24 	bl	1da94 <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   2804c:	f44f 7202 	mov.w	r2, #520	; 0x208
   28050:	2100      	movs	r1, #0
   28052:	4630      	mov	r0, r6
   28054:	f7fc fd2e 	bl	24ab4 <memset>
}
   28058:	bd70      	pop	{r4, r5, r6, pc}
   2805a:	f3bf 8f5b 	dmb	ish
   2805e:	f854 3cec 	ldr.w	r3, [r4, #-236]
   28062:	f3bf 8f5b 	dmb	ish
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   28066:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   2806a:	d0e5      	beq.n	28038 <bt_smp_disconnected+0x40>
   2806c:	e7e0      	b.n	28030 <bt_smp_disconnected+0x38>

0002806e <id_add>:
{
   2806e:	b508      	push	{r3, lr}
	bt_id_add(keys);
   28070:	f7ee ffa8 	bl	16fc4 <bt_id_add>
}
   28074:	bd08      	pop	{r3, pc}

00028076 <bt_keys_add_type>:
	keys->keys |= type;
   28076:	89c3      	ldrh	r3, [r0, #14]
   28078:	4319      	orrs	r1, r3
   2807a:	81c1      	strh	r1, [r0, #14]
}
   2807c:	4770      	bx	lr

0002807e <bt_keys_get_type>:
{
   2807e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28080:	4606      	mov	r6, r0
   28082:	460c      	mov	r4, r1
   28084:	4615      	mov	r5, r2
	keys = bt_keys_find(type, id, addr);
   28086:	f7f5 fc51 	bl	1d92c <bt_keys_find>
	if (keys) {
   2808a:	4607      	mov	r7, r0
   2808c:	b108      	cbz	r0, 28092 <bt_keys_get_type+0x14>
}
   2808e:	4638      	mov	r0, r7
   28090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	keys = bt_keys_get_addr(id, addr);
   28092:	4629      	mov	r1, r5
   28094:	4620      	mov	r0, r4
   28096:	f7f5 fbb7 	bl	1d808 <bt_keys_get_addr>
	if (!keys) {
   2809a:	4607      	mov	r7, r0
   2809c:	2800      	cmp	r0, #0
   2809e:	d0f6      	beq.n	2808e <bt_keys_get_type+0x10>
	bt_keys_add_type(keys, type);
   280a0:	4631      	mov	r1, r6
   280a2:	f7ff ffe8 	bl	28076 <bt_keys_add_type>
	return keys;
   280a6:	e7f2      	b.n	2808e <bt_keys_get_type+0x10>

000280a8 <fixed_data_unref>:
}

static void fixed_data_unref(struct net_buf *buf, uint8_t *data)
{
	/* Nothing needed for fixed-size data pools */
}
   280a8:	4770      	bx	lr

000280aa <data_alloc>:
};

#endif /* CONFIG_HEAP_MEM_POOL_SIZE > 0 */

static uint8_t *data_alloc(struct net_buf *buf, size_t *size, k_timeout_t timeout)
{
   280aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   280ae:	4604      	mov	r4, r0
   280b0:	460d      	mov	r5, r1
   280b2:	4617      	mov	r7, r2
   280b4:	461e      	mov	r6, r3
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   280b6:	7980      	ldrb	r0, [r0, #6]
   280b8:	f7f5 fe3a 	bl	1dd30 <net_buf_pool_get>

	return pool->alloc->cb->alloc(buf, size, timeout);
   280bc:	6a03      	ldr	r3, [r0, #32]
   280be:	681b      	ldr	r3, [r3, #0]
   280c0:	f8d3 8000 	ldr.w	r8, [r3]
   280c4:	463a      	mov	r2, r7
   280c6:	4633      	mov	r3, r6
   280c8:	4629      	mov	r1, r5
   280ca:	4620      	mov	r0, r4
   280cc:	47c0      	blx	r8
}
   280ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000280d2 <data_unref>:

	return pool->alloc->cb->ref(buf, data);
}

static void data_unref(struct net_buf *buf, uint8_t *data)
{
   280d2:	b538      	push	{r3, r4, r5, lr}
   280d4:	4604      	mov	r4, r0
   280d6:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   280d8:	7980      	ldrb	r0, [r0, #6]
   280da:	f7f5 fe29 	bl	1dd30 <net_buf_pool_get>

	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   280de:	7963      	ldrb	r3, [r4, #5]
   280e0:	f013 0f02 	tst.w	r3, #2
   280e4:	d105      	bne.n	280f2 <data_unref+0x20>
		return;
	}

	pool->alloc->cb->unref(buf, data);
   280e6:	6a03      	ldr	r3, [r0, #32]
   280e8:	681b      	ldr	r3, [r3, #0]
   280ea:	689b      	ldr	r3, [r3, #8]
   280ec:	4629      	mov	r1, r5
   280ee:	4620      	mov	r0, r4
   280f0:	4798      	blx	r3
}
   280f2:	bd38      	pop	{r3, r4, r5, pc}

000280f4 <fixed_data_alloc>:
{
   280f4:	b570      	push	{r4, r5, r6, lr}
   280f6:	4604      	mov	r4, r0
   280f8:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   280fa:	7980      	ldrb	r0, [r0, #6]
   280fc:	f7f5 fe18 	bl	1dd30 <net_buf_pool_get>
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   28100:	6a03      	ldr	r3, [r0, #32]
   28102:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   28104:	682a      	ldr	r2, [r5, #0]
   28106:	6819      	ldr	r1, [r3, #0]
   28108:	428a      	cmp	r2, r1
   2810a:	bf28      	it	cs
   2810c:	460a      	movcs	r2, r1
   2810e:	602a      	str	r2, [r5, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   28110:	685d      	ldr	r5, [r3, #4]
   28112:	681e      	ldr	r6, [r3, #0]
   28114:	4620      	mov	r0, r4
   28116:	f7f5 fe13 	bl	1dd40 <net_buf_id>
}
   2811a:	fb00 5006 	mla	r0, r0, r6, r5
   2811e:	bd70      	pop	{r4, r5, r6, pc}

00028120 <net_buf_reset>:
	buf->len  = 0U;
   28120:	2300      	movs	r3, #0
   28122:	8183      	strh	r3, [r0, #12]
	buf->data = buf->__buf;
   28124:	6903      	ldr	r3, [r0, #16]
   28126:	6083      	str	r3, [r0, #8]
}
   28128:	4770      	bx	lr

0002812a <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   2812a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2812e:	b083      	sub	sp, #12
   28130:	4605      	mov	r5, r0
   28132:	9101      	str	r1, [sp, #4]
   28134:	4616      	mov	r6, r2
   28136:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   28138:	4610      	mov	r0, r2
   2813a:	4619      	mov	r1, r3
   2813c:	f001 fc67 	bl	29a0e <sys_clock_timeout_end_calc>
   28140:	4682      	mov	sl, r0
   28142:	9100      	str	r1, [sp, #0]
   28144:	f04f 0340 	mov.w	r3, #64	; 0x40
   28148:	f3ef 8b11 	mrs	fp, BASEPRI
   2814c:	f383 8811 	msr	BASEPRI, r3
   28150:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   28154:	8b6b      	ldrh	r3, [r5, #26]
   28156:	2b00      	cmp	r3, #0
   28158:	d03f      	beq.n	281da <net_buf_alloc_len+0xb0>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   2815a:	8b2a      	ldrh	r2, [r5, #24]
   2815c:	4293      	cmp	r3, r2
   2815e:	d32f      	bcc.n	281c0 <net_buf_alloc_len+0x96>
				irq_unlock(key);
				goto success;
			}
		}

		uninit_count = pool->uninit_count--;
   28160:	8b6a      	ldrh	r2, [r5, #26]
   28162:	1e53      	subs	r3, r2, #1
   28164:	836b      	strh	r3, [r5, #26]
	__asm__ volatile(
   28166:	f38b 8811 	msr	BASEPRI, fp
   2816a:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   2816e:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   28170:	8b2b      	ldrh	r3, [r5, #24]
   28172:	1a9b      	subs	r3, r3, r2
   28174:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   28178:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
	buf->pool_id = pool_id(pool);
   2817c:	4628      	mov	r0, r5
   2817e:	f7f5 fdcb 	bl	1dd18 <pool_id>
   28182:	71a0      	strb	r0, [r4, #6]
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   28184:	9b01      	ldr	r3, [sp, #4]
   28186:	2b00      	cmp	r3, #0
   28188:	d046      	beq.n	28218 <net_buf_alloc_len+0xee>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   2818a:	ea56 0307 	orrs.w	r3, r6, r7
   2818e:	d005      	beq.n	2819c <net_buf_alloc_len+0x72>
   28190:	f1b7 3fff 	cmp.w	r7, #4294967295
   28194:	bf08      	it	eq
   28196:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   2819a:	d12b      	bne.n	281f4 <net_buf_alloc_len+0xca>
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   2819c:	4632      	mov	r2, r6
   2819e:	463b      	mov	r3, r7
   281a0:	a901      	add	r1, sp, #4
   281a2:	4620      	mov	r0, r4
   281a4:	f7ff ff81 	bl	280aa <data_alloc>
   281a8:	4605      	mov	r5, r0
   281aa:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   281ac:	2800      	cmp	r0, #0
   281ae:	d135      	bne.n	2821c <net_buf_alloc_len+0xf2>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   281b0:	79a0      	ldrb	r0, [r4, #6]
   281b2:	f7f5 fdbd 	bl	1dd30 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   281b6:	4621      	mov	r1, r4
   281b8:	f001 f87f 	bl	292ba <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   281bc:	462c      	mov	r4, r5
}
   281be:	e037      	b.n	28230 <net_buf_alloc_len+0x106>
	return z_impl_k_queue_get(queue, timeout);
   281c0:	2200      	movs	r2, #0
   281c2:	2300      	movs	r3, #0
   281c4:	4628      	mov	r0, r5
   281c6:	f7f7 fd7b 	bl	1fcc0 <z_impl_k_queue_get>
			if (buf) {
   281ca:	4604      	mov	r4, r0
   281cc:	2800      	cmp	r0, #0
   281ce:	d0c7      	beq.n	28160 <net_buf_alloc_len+0x36>
   281d0:	f38b 8811 	msr	BASEPRI, fp
   281d4:	f3bf 8f6f 	isb	sy
				goto success;
   281d8:	e7d4      	b.n	28184 <net_buf_alloc_len+0x5a>
   281da:	f38b 8811 	msr	BASEPRI, fp
   281de:	f3bf 8f6f 	isb	sy
   281e2:	4632      	mov	r2, r6
   281e4:	463b      	mov	r3, r7
   281e6:	4628      	mov	r0, r5
   281e8:	f7f7 fd6a 	bl	1fcc0 <z_impl_k_queue_get>
	if (!buf) {
   281ec:	4604      	mov	r4, r0
   281ee:	2800      	cmp	r0, #0
   281f0:	d1c8      	bne.n	28184 <net_buf_alloc_len+0x5a>
   281f2:	e01d      	b.n	28230 <net_buf_alloc_len+0x106>
			int64_t remaining = end - sys_clock_tick_get();
   281f4:	f7f8 fd62 	bl	20cbc <sys_clock_tick_get>
   281f8:	ebba 0800 	subs.w	r8, sl, r0
   281fc:	9b00      	ldr	r3, [sp, #0]
   281fe:	eb63 0901 	sbc.w	r9, r3, r1
			if (remaining <= 0) {
   28202:	f1b8 0f01 	cmp.w	r8, #1
   28206:	f179 0300 	sbcs.w	r3, r9, #0
   2820a:	db02      	blt.n	28212 <net_buf_alloc_len+0xe8>
				timeout = Z_TIMEOUT_TICKS(remaining);
   2820c:	4646      	mov	r6, r8
   2820e:	464f      	mov	r7, r9
   28210:	e7c4      	b.n	2819c <net_buf_alloc_len+0x72>
				timeout = K_NO_WAIT;
   28212:	2600      	movs	r6, #0
   28214:	2700      	movs	r7, #0
   28216:	e7c1      	b.n	2819c <net_buf_alloc_len+0x72>
		}

		NET_BUF_ASSERT(req_size <= size);
	} else {
		buf->__buf = NULL;
   28218:	2300      	movs	r3, #0
   2821a:	6123      	str	r3, [r4, #16]
	}

	buf->ref   = 1U;
   2821c:	2301      	movs	r3, #1
   2821e:	7123      	strb	r3, [r4, #4]
	buf->flags = 0U;
   28220:	2300      	movs	r3, #0
   28222:	7163      	strb	r3, [r4, #5]
	buf->frags = NULL;
   28224:	6023      	str	r3, [r4, #0]
	buf->size  = size;
   28226:	9b01      	ldr	r3, [sp, #4]
   28228:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   2822a:	4620      	mov	r0, r4
   2822c:	f7ff ff78 	bl	28120 <net_buf_reset>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   28230:	4620      	mov	r0, r4
   28232:	b003      	add	sp, #12
   28234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00028238 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool,
				    k_timeout_t timeout)
{
   28238:	b508      	push	{r3, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2823a:	6a01      	ldr	r1, [r0, #32]
   2823c:	6849      	ldr	r1, [r1, #4]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2823e:	6809      	ldr	r1, [r1, #0]
   28240:	f7ff ff73 	bl	2812a <net_buf_alloc_len>
}
   28244:	bd08      	pop	{r3, pc}

00028246 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   28246:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
   28248:	4605      	mov	r5, r0
   2824a:	f7f7 fd39 	bl	1fcc0 <z_impl_k_queue_get>
	if (!buf) {
   2824e:	4606      	mov	r6, r0
   28250:	b190      	cbz	r0, 28278 <net_buf_get+0x32>
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   28252:	4604      	mov	r4, r0
   28254:	e00a      	b.n	2826c <net_buf_get+0x26>
   28256:	2200      	movs	r2, #0
   28258:	2300      	movs	r3, #0
   2825a:	4628      	mov	r0, r5
   2825c:	f7f7 fd30 	bl	1fcc0 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   28260:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);

		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
   28262:	7963      	ldrb	r3, [r4, #5]
   28264:	f023 0301 	bic.w	r3, r3, #1
   28268:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2826a:	4604      	mov	r4, r0
   2826c:	7963      	ldrb	r3, [r4, #5]
   2826e:	f013 0f01 	tst.w	r3, #1
   28272:	d1f0      	bne.n	28256 <net_buf_get+0x10>
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   28274:	2300      	movs	r3, #0
   28276:	6023      	str	r3, [r4, #0]

	return buf;
}
   28278:	4630      	mov	r0, r6
   2827a:	bd70      	pop	{r4, r5, r6, pc}

0002827c <net_buf_simple_reserve>:
{
	__ASSERT_NO_MSG(buf);
	__ASSERT_NO_MSG(buf->len == 0U);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   2827c:	6883      	ldr	r3, [r0, #8]
   2827e:	440b      	add	r3, r1
   28280:	6003      	str	r3, [r0, #0]
}
   28282:	4770      	bx	lr

00028284 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   28284:	b510      	push	{r4, lr}
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
	__ASSERT_NO_MSG(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   28286:	460a      	mov	r2, r1
   28288:	6814      	ldr	r4, [r2, #0]
   2828a:	b12c      	cbz	r4, 28298 <net_buf_put+0x14>
		tail->flags |= NET_BUF_FRAGS;
   2828c:	7953      	ldrb	r3, [r2, #5]
   2828e:	f043 0301 	orr.w	r3, r3, #1
   28292:	7153      	strb	r3, [r2, #5]
	for (tail = buf; tail->frags; tail = tail->frags) {
   28294:	4622      	mov	r2, r4
   28296:	e7f7      	b.n	28288 <net_buf_put+0x4>
	}

	k_fifo_put_list(fifo, buf, tail);
   28298:	f001 f81a 	bl	292d0 <k_queue_append_list>
}
   2829c:	bd10      	pop	{r4, pc}

0002829e <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   2829e:	b538      	push	{r3, r4, r5, lr}
   282a0:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf);

	while (buf) {
   282a2:	e00f      	b.n	282c4 <net_buf_unref+0x26>
		if (--buf->ref > 0) {
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
   282a4:	4620      	mov	r0, r4
   282a6:	f7ff ff14 	bl	280d2 <data_unref>
			buf->__buf = NULL;
   282aa:	2300      	movs	r3, #0
   282ac:	6123      	str	r3, [r4, #16]
		}

		buf->data = NULL;
   282ae:	2300      	movs	r3, #0
   282b0:	60a3      	str	r3, [r4, #8]
		buf->frags = NULL;
   282b2:	6023      	str	r3, [r4, #0]

		pool = net_buf_pool_get(buf->pool_id);
   282b4:	79a0      	ldrb	r0, [r4, #6]
   282b6:	f7f5 fd3b 	bl	1dd30 <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   282ba:	69c3      	ldr	r3, [r0, #28]
   282bc:	b16b      	cbz	r3, 282da <net_buf_unref+0x3c>
			pool->destroy(buf);
   282be:	4620      	mov	r0, r4
   282c0:	4798      	blx	r3
{
   282c2:	462c      	mov	r4, r5
	while (buf) {
   282c4:	b184      	cbz	r4, 282e8 <net_buf_unref+0x4a>
		struct net_buf *frags = buf->frags;
   282c6:	6825      	ldr	r5, [r4, #0]
		if (--buf->ref > 0) {
   282c8:	7923      	ldrb	r3, [r4, #4]
   282ca:	3b01      	subs	r3, #1
   282cc:	b2db      	uxtb	r3, r3
   282ce:	7123      	strb	r3, [r4, #4]
   282d0:	b953      	cbnz	r3, 282e8 <net_buf_unref+0x4a>
		if (buf->__buf) {
   282d2:	6921      	ldr	r1, [r4, #16]
   282d4:	2900      	cmp	r1, #0
   282d6:	d1e5      	bne.n	282a4 <net_buf_unref+0x6>
   282d8:	e7e9      	b.n	282ae <net_buf_unref+0x10>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   282da:	79a0      	ldrb	r0, [r4, #6]
   282dc:	f7f5 fd28 	bl	1dd30 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   282e0:	4621      	mov	r1, r4
   282e2:	f000 ffea 	bl	292ba <k_queue_prepend>
}
   282e6:	e7ec      	b.n	282c2 <net_buf_unref+0x24>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   282e8:	bd38      	pop	{r3, r4, r5, pc}

000282ea <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   282ea:	7902      	ldrb	r2, [r0, #4]
   282ec:	3201      	adds	r2, #1
   282ee:	7102      	strb	r2, [r0, #4]
	return buf;
}
   282f0:	4770      	bx	lr

000282f2 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   282f2:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   282f4:	4618      	mov	r0, r3
   282f6:	681b      	ldr	r3, [r3, #0]
   282f8:	2b00      	cmp	r3, #0
   282fa:	d1fb      	bne.n	282f4 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   282fc:	4770      	bx	lr

000282fe <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   282fe:	b570      	push	{r4, r5, r6, lr}
   28300:	4604      	mov	r4, r0
   28302:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   28304:	6806      	ldr	r6, [r0, #0]
   28306:	b11e      	cbz	r6, 28310 <net_buf_frag_insert+0x12>
		net_buf_frag_last(frag)->frags = parent->frags;
   28308:	4608      	mov	r0, r1
   2830a:	f7ff fff2 	bl	282f2 <net_buf_frag_last>
   2830e:	6006      	str	r6, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   28310:	6025      	str	r5, [r4, #0]
}
   28312:	bd70      	pop	{r4, r5, r6, pc}

00028314 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   28314:	b538      	push	{r3, r4, r5, lr}
   28316:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(frag);

	if (!head) {
   28318:	b138      	cbz	r0, 2832a <net_buf_frag_add+0x16>
   2831a:	4604      	mov	r4, r0
		return net_buf_ref(frag);
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);
   2831c:	f7ff ffe9 	bl	282f2 <net_buf_frag_last>
   28320:	4629      	mov	r1, r5
   28322:	f7ff ffec 	bl	282fe <net_buf_frag_insert>

	return head;
   28326:	4620      	mov	r0, r4
}
   28328:	bd38      	pop	{r3, r4, r5, pc}
		return net_buf_ref(frag);
   2832a:	4608      	mov	r0, r1
   2832c:	f7ff ffdd 	bl	282ea <net_buf_ref>
   28330:	e7fa      	b.n	28328 <net_buf_frag_add+0x14>

00028332 <net_buf_simple_add>:
	return buf->data + buf->len;
   28332:	6802      	ldr	r2, [r0, #0]
   28334:	8883      	ldrh	r3, [r0, #4]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   28336:	4419      	add	r1, r3
   28338:	8081      	strh	r1, [r0, #4]
	return tail;
}
   2833a:	18d0      	adds	r0, r2, r3
   2833c:	4770      	bx	lr

0002833e <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   2833e:	b538      	push	{r3, r4, r5, lr}
   28340:	460d      	mov	r5, r1
   28342:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   28344:	4611      	mov	r1, r2
   28346:	f7ff fff4 	bl	28332 <net_buf_simple_add>
   2834a:	4622      	mov	r2, r4
   2834c:	4629      	mov	r1, r5
   2834e:	f7fc fb8d 	bl	24a6c <memcpy>
}
   28352:	bd38      	pop	{r3, r4, r5, pc}

00028354 <net_buf_simple_add_u8>:

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   28354:	b510      	push	{r4, lr}
   28356:	460c      	mov	r4, r1
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
   28358:	2101      	movs	r1, #1
   2835a:	f7ff ffea 	bl	28332 <net_buf_simple_add>
	*u8 = val;
   2835e:	7004      	strb	r4, [r0, #0]

	return u8;
}
   28360:	bd10      	pop	{r4, pc}

00028362 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   28362:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   28364:	6800      	ldr	r0, [r0, #0]
   28366:	1a40      	subs	r0, r0, r1
   28368:	6018      	str	r0, [r3, #0]
	buf->len += len;
   2836a:	889a      	ldrh	r2, [r3, #4]
   2836c:	4411      	add	r1, r2
   2836e:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   28370:	4770      	bx	lr

00028372 <net_buf_simple_pull>:

	sys_put_be64(val, net_buf_simple_push(buf, sizeof(val)));
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
   28372:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   28374:	8882      	ldrh	r2, [r0, #4]
   28376:	1a52      	subs	r2, r2, r1
   28378:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   2837a:	6800      	ldr	r0, [r0, #0]
   2837c:	4408      	add	r0, r1
   2837e:	6018      	str	r0, [r3, #0]
}
   28380:	4770      	bx	lr

00028382 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   28382:	4603      	mov	r3, r0
	void *data = buf->data;
   28384:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   28386:	889a      	ldrh	r2, [r3, #4]
   28388:	1a52      	subs	r2, r2, r1
   2838a:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   2838c:	4401      	add	r1, r0
   2838e:	6019      	str	r1, [r3, #0]

	return data;
}
   28390:	4770      	bx	lr

00028392 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   28392:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   28394:	6803      	ldr	r3, [r0, #0]
   28396:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   28398:	2102      	movs	r1, #2
   2839a:	f7ff ffea 	bl	28372 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   2839e:	4620      	mov	r0, r4
   283a0:	bd10      	pop	{r4, pc}

000283a2 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   283a2:	6802      	ldr	r2, [r0, #0]
   283a4:	6880      	ldr	r0, [r0, #8]
}
   283a6:	1a10      	subs	r0, r2, r0
   283a8:	4770      	bx	lr

000283aa <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
   283aa:	b538      	push	{r3, r4, r5, lr}
   283ac:	4604      	mov	r4, r0
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   283ae:	88c5      	ldrh	r5, [r0, #6]
   283b0:	f7ff fff7 	bl	283a2 <net_buf_simple_headroom>
   283b4:	1a2d      	subs	r5, r5, r0
   283b6:	88a0      	ldrh	r0, [r4, #4]
}
   283b8:	1a28      	subs	r0, r5, r0
   283ba:	bd38      	pop	{r3, r4, r5, pc}

000283bc <shift_write_context>:
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
}

static void shift_write_context(uint32_t shift, struct flash_context *w_ctx)
{
	w_ctx->flash_addr += shift;
   283bc:	684b      	ldr	r3, [r1, #4]
   283be:	4403      	add	r3, r0
   283c0:	604b      	str	r3, [r1, #4]
	w_ctx->data_addr += shift;
   283c2:	680b      	ldr	r3, [r1, #0]
   283c4:	4403      	add	r3, r0
   283c6:	600b      	str	r3, [r1, #0]
	w_ctx->len -= shift;
   283c8:	688b      	ldr	r3, [r1, #8]
   283ca:	1a18      	subs	r0, r3, r0
   283cc:	6088      	str	r0, [r1, #8]
}
   283ce:	4770      	bx	lr

000283d0 <erase_op>:
{
   283d0:	b570      	push	{r4, r5, r6, lr}
   283d2:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   283d4:	f000 fd13 	bl	28dfe <nrfx_nvmc_flash_page_size_get>
   283d8:	4606      	mov	r6, r0
	if (e_ctx->enable_time_limit) {
   283da:	7b23      	ldrb	r3, [r4, #12]
   283dc:	b90b      	cbnz	r3, 283e2 <erase_op+0x12>
{
   283de:	2500      	movs	r5, #0
   283e0:	e004      	b.n	283ec <erase_op+0x1c>
		nrf_flash_sync_get_timestamp_begin();
   283e2:	f000 fcdb 	bl	28d9c <nrf_flash_sync_get_timestamp_begin>
   283e6:	e7fa      	b.n	283de <erase_op+0xe>
	} while (e_ctx->len > 0);
   283e8:	68a3      	ldr	r3, [r4, #8]
   283ea:	b18b      	cbz	r3, 28410 <erase_op+0x40>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   283ec:	6860      	ldr	r0, [r4, #4]
   283ee:	f7f6 fe81 	bl	1f0f4 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   283f2:	68a3      	ldr	r3, [r4, #8]
   283f4:	1b9b      	subs	r3, r3, r6
   283f6:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   283f8:	6863      	ldr	r3, [r4, #4]
   283fa:	4433      	add	r3, r6
   283fc:	6063      	str	r3, [r4, #4]
		i++;
   283fe:	3501      	adds	r5, #1
		if (e_ctx->enable_time_limit) {
   28400:	7b23      	ldrb	r3, [r4, #12]
   28402:	2b00      	cmp	r3, #0
   28404:	d0f0      	beq.n	283e8 <erase_op+0x18>
			if (nrf_flash_sync_check_time_limit(i)) {
   28406:	4628      	mov	r0, r5
   28408:	f7f6 fc62 	bl	1ecd0 <nrf_flash_sync_check_time_limit>
   2840c:	2800      	cmp	r0, #0
   2840e:	d0eb      	beq.n	283e8 <erase_op+0x18>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   28410:	68a0      	ldr	r0, [r4, #8]
}
   28412:	3800      	subs	r0, #0
   28414:	bf18      	it	ne
   28416:	2001      	movne	r0, #1
   28418:	bd70      	pop	{r4, r5, r6, pc}

0002841a <erase>:

	return FLASH_OP_DONE;
}

static int erase(uint32_t addr, uint32_t size)
{
   2841a:	b500      	push	{lr}
   2841c:	b085      	sub	sp, #20
	struct flash_context context = {
   2841e:	2300      	movs	r3, #0
   28420:	9300      	str	r3, [sp, #0]
   28422:	9303      	str	r3, [sp, #12]
   28424:	9001      	str	r0, [sp, #4]
   28426:	9102      	str	r1, [sp, #8]
#if defined(CONFIG_SOC_FLASH_NRF_PARTIAL_ERASE)
		.flash_addr_next = addr
#endif
	};

	return	erase_op(&context);
   28428:	4668      	mov	r0, sp
   2842a:	f7ff ffd1 	bl	283d0 <erase_op>
}
   2842e:	b005      	add	sp, #20
   28430:	f85d fb04 	ldr.w	pc, [sp], #4

00028434 <write_op>:
{
   28434:	b538      	push	{r3, r4, r5, lr}
   28436:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   28438:	7b03      	ldrb	r3, [r0, #12]
   2843a:	b9cb      	cbnz	r3, 28470 <write_op+0x3c>
{
   2843c:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   2843e:	68a3      	ldr	r3, [r4, #8]
   28440:	2b03      	cmp	r3, #3
   28442:	d918      	bls.n	28476 <write_op+0x42>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   28444:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   28446:	6819      	ldr	r1, [r3, #0]
   28448:	6860      	ldr	r0, [r4, #4]
   2844a:	f000 fcc8 	bl	28dde <nrfx_nvmc_word_write>
		shift_write_context(sizeof(uint32_t), w_ctx);
   2844e:	4621      	mov	r1, r4
   28450:	2004      	movs	r0, #4
   28452:	f7ff ffb3 	bl	283bc <shift_write_context>
		i++;
   28456:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   28458:	7b23      	ldrb	r3, [r4, #12]
   2845a:	2b00      	cmp	r3, #0
   2845c:	d0ef      	beq.n	2843e <write_op+0xa>
			if (nrf_flash_sync_check_time_limit(i)) {
   2845e:	4628      	mov	r0, r5
   28460:	f7f6 fc36 	bl	1ecd0 <nrf_flash_sync_check_time_limit>
   28464:	2800      	cmp	r0, #0
   28466:	d0ea      	beq.n	2843e <write_op+0xa>
				nvmc_wait_ready();
   28468:	f7f5 fd0a 	bl	1de80 <nvmc_wait_ready>
				return FLASH_OP_ONGOING;
   2846c:	2001      	movs	r0, #1
   2846e:	e005      	b.n	2847c <write_op+0x48>
		nrf_flash_sync_get_timestamp_begin();
   28470:	f000 fc94 	bl	28d9c <nrf_flash_sync_get_timestamp_begin>
   28474:	e7e2      	b.n	2843c <write_op+0x8>
	nvmc_wait_ready();
   28476:	f7f5 fd03 	bl	1de80 <nvmc_wait_ready>
	return FLASH_OP_DONE;
   2847a:	2000      	movs	r0, #0
}
   2847c:	bd38      	pop	{r3, r4, r5, pc}

0002847e <write>:

static int write(off_t addr, const void *data, size_t len)
{
   2847e:	b500      	push	{lr}
   28480:	b085      	sub	sp, #20
	struct flash_context context = {
   28482:	9100      	str	r1, [sp, #0]
   28484:	9001      	str	r0, [sp, #4]
   28486:	9202      	str	r2, [sp, #8]
   28488:	2300      	movs	r3, #0
   2848a:	f88d 300c 	strb.w	r3, [sp, #12]
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
		.enable_time_limit = 0 /* disable time limit */
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	};

	return write_op(&context);
   2848e:	4668      	mov	r0, sp
   28490:	f7ff ffd0 	bl	28434 <write_op>
}
   28494:	b005      	add	sp, #20
   28496:	f85d fb04 	ldr.w	pc, [sp], #4

0002849a <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
   2849a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2849e:	b082      	sub	sp, #8
   284a0:	460e      	mov	r6, r1
   284a2:	4617      	mov	r7, r2
   284a4:	4698      	mov	r8, r3
	const struct flash_driver_api *api = dev->api;
   284a6:	6883      	ldr	r3, [r0, #8]
	off_t group_offs = 0;
	uint32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
   284a8:	695b      	ldr	r3, [r3, #20]
   284aa:	466a      	mov	r2, sp
   284ac:	a901      	add	r1, sp, #4
   284ae:	4798      	blx	r3
	off_t end = 0;
   284b0:	2400      	movs	r4, #0
	off_t group_offs = 0;
   284b2:	46a4      	mov	ip, r4
	size_t page_count = 0;
   284b4:	4623      	mov	r3, r4

	while (layout_size--) {
   284b6:	e00c      	b.n	284d2 <flash_get_page_info+0x38>
		if (use_addr) {
			end += layout->pages_count * layout->pages_size;
		} else {
			end += layout->pages_count;
   284b8:	9a01      	ldr	r2, [sp, #4]
   284ba:	6812      	ldr	r2, [r2, #0]
   284bc:	4414      	add	r4, r2
		}

		if (offs < end) {
   284be:	42b4      	cmp	r4, r6
   284c0:	dc13      	bgt.n	284ea <flash_get_page_info+0x50>
			info->index = page_count + num_in_group;

			return 0;
		}

		group_offs += layout->pages_count * layout->pages_size;
   284c2:	9801      	ldr	r0, [sp, #4]
   284c4:	6805      	ldr	r5, [r0, #0]
   284c6:	6842      	ldr	r2, [r0, #4]
   284c8:	fb02 cc05 	mla	ip, r2, r5, ip
		page_count += layout->pages_count;
   284cc:	442b      	add	r3, r5

		layout++;
   284ce:	3008      	adds	r0, #8
   284d0:	9001      	str	r0, [sp, #4]
	while (layout_size--) {
   284d2:	9800      	ldr	r0, [sp, #0]
   284d4:	1e42      	subs	r2, r0, #1
   284d6:	9200      	str	r2, [sp, #0]
   284d8:	b1e8      	cbz	r0, 28516 <flash_get_page_info+0x7c>
		if (use_addr) {
   284da:	2f00      	cmp	r7, #0
   284dc:	d0ec      	beq.n	284b8 <flash_get_page_info+0x1e>
			end += layout->pages_count * layout->pages_size;
   284de:	9a01      	ldr	r2, [sp, #4]
   284e0:	6811      	ldr	r1, [r2, #0]
   284e2:	6852      	ldr	r2, [r2, #4]
   284e4:	fb02 4401 	mla	r4, r2, r1, r4
   284e8:	e7e9      	b.n	284be <flash_get_page_info+0x24>
			info->size = layout->pages_size;
   284ea:	9a01      	ldr	r2, [sp, #4]
   284ec:	6851      	ldr	r1, [r2, #4]
   284ee:	f8c8 1004 	str.w	r1, [r8, #4]
			if (use_addr) {
   284f2:	b177      	cbz	r7, 28512 <flash_get_page_info+0x78>
				num_in_group = (offs - group_offs) /
   284f4:	eba6 060c 	sub.w	r6, r6, ip
					       layout->pages_size;
   284f8:	6851      	ldr	r1, [r2, #4]
				num_in_group = (offs - group_offs) /
   284fa:	fbb6 f6f1 	udiv	r6, r6, r1
					     num_in_group * layout->pages_size;
   284fe:	6852      	ldr	r2, [r2, #4]
			info->start_offset = group_offs +
   28500:	fb06 c202 	mla	r2, r6, r2, ip
   28504:	f8c8 2000 	str.w	r2, [r8]
			info->index = page_count + num_in_group;
   28508:	4433      	add	r3, r6
   2850a:	f8c8 3008 	str.w	r3, [r8, #8]
			return 0;
   2850e:	2000      	movs	r0, #0
   28510:	e003      	b.n	2851a <flash_get_page_info+0x80>
				num_in_group = offs - page_count;
   28512:	1af6      	subs	r6, r6, r3
   28514:	e7f3      	b.n	284fe <flash_get_page_info+0x64>
	}

	return -EINVAL; /* page of the index doesn't exist */
   28516:	f06f 0015 	mvn.w	r0, #21
}
   2851a:	b002      	add	sp, #8
   2851c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00028520 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   28520:	b508      	push	{r3, lr}
   28522:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, true, info);
   28524:	2201      	movs	r2, #1
   28526:	f7ff ffb8 	bl	2849a <flash_get_page_info>
}
   2852a:	bd08      	pop	{r3, pc}

0002852c <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   2852c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28530:	b086      	sub	sp, #24
   28532:	4689      	mov	r9, r1
   28534:	4690      	mov	r8, r2
	const struct flash_driver_api *api = dev->api;
   28536:	6883      	ldr	r3, [r0, #8]
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   28538:	695b      	ldr	r3, [r3, #20]
   2853a:	aa01      	add	r2, sp, #4
   2853c:	a905      	add	r1, sp, #20
   2853e:	4798      	blx	r3
	off_t off = 0;
   28540:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   28542:	4626      	mov	r6, r4

	for (block = 0; block < num_blocks; block++) {
   28544:	46a2      	mov	sl, r4
   28546:	9b01      	ldr	r3, [sp, #4]
   28548:	4553      	cmp	r3, sl
   2854a:	d916      	bls.n	2857a <flash_page_foreach+0x4e>
		const struct flash_pages_layout *l = &layout[block];
   2854c:	9f05      	ldr	r7, [sp, #20]
   2854e:	eb07 07ca 	add.w	r7, r7, sl, lsl #3
		page_info.size = l->pages_size;
   28552:	687b      	ldr	r3, [r7, #4]
   28554:	9303      	str	r3, [sp, #12]

		for (i = 0; i < l->pages_count; i++) {
   28556:	2500      	movs	r5, #0
   28558:	683b      	ldr	r3, [r7, #0]
   2855a:	42ab      	cmp	r3, r5
   2855c:	d90a      	bls.n	28574 <flash_page_foreach+0x48>
			page_info.start_offset = off;
   2855e:	9402      	str	r4, [sp, #8]
			page_info.index = page;
   28560:	9604      	str	r6, [sp, #16]

			if (!cb(&page_info, data)) {
   28562:	4641      	mov	r1, r8
   28564:	a802      	add	r0, sp, #8
   28566:	47c8      	blx	r9
   28568:	b138      	cbz	r0, 2857a <flash_page_foreach+0x4e>
				return;
			}

			off += page_info.size;
   2856a:	9b03      	ldr	r3, [sp, #12]
   2856c:	441c      	add	r4, r3
			page++;
   2856e:	3601      	adds	r6, #1
		for (i = 0; i < l->pages_count; i++) {
   28570:	3501      	adds	r5, #1
   28572:	e7f1      	b.n	28558 <flash_page_foreach+0x2c>
	for (block = 0; block < num_blocks; block++) {
   28574:	f10a 0a01 	add.w	sl, sl, #1
   28578:	e7e5      	b.n	28546 <flash_page_foreach+0x1a>
		}
	}
}
   2857a:	b006      	add	sp, #24
   2857c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00028580 <rng_pool_put>:
{
   28580:	b410      	push	{r4}
	uint8_t first = rngp->first_read;
   28582:	7842      	ldrb	r2, [r0, #1]
	uint8_t last  = rngp->last;
   28584:	7883      	ldrb	r3, [r0, #2]
	uint8_t mask  = rngp->mask;
   28586:	78c4      	ldrb	r4, [r0, #3]
	if (((last - first) & mask) == mask) {
   28588:	1a9a      	subs	r2, r3, r2
   2858a:	ea34 0202 	bics.w	r2, r4, r2
   2858e:	d008      	beq.n	285a2 <rng_pool_put+0x22>
	rngp->buffer[last] = byte;
   28590:	18c2      	adds	r2, r0, r3
   28592:	7151      	strb	r1, [r2, #5]
	rngp->last = (last + 1) & mask;
   28594:	3301      	adds	r3, #1
   28596:	b25b      	sxtb	r3, r3
   28598:	4023      	ands	r3, r4
   2859a:	7083      	strb	r3, [r0, #2]
	return 0;
   2859c:	2000      	movs	r0, #0
}
   2859e:	bc10      	pop	{r4}
   285a0:	4770      	bx	lr
		return -ENOBUFS;
   285a2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   285a6:	e7fa      	b.n	2859e <rng_pool_put+0x1e>

000285a8 <rng_pool_init>:
	rngp->first_alloc = 0U;
   285a8:	2300      	movs	r3, #0
   285aa:	7003      	strb	r3, [r0, #0]
	rngp->first_read  = 0U;
   285ac:	7043      	strb	r3, [r0, #1]
	rngp->last	  = 0U;
   285ae:	7083      	strb	r3, [r0, #2]
	rngp->mask	  = size - 1;
   285b0:	3901      	subs	r1, #1
   285b2:	70c1      	strb	r1, [r0, #3]
	rngp->threshold	  = threshold;
   285b4:	7102      	strb	r2, [r0, #4]
}
   285b6:	4770      	bx	lr

000285b8 <event_packet_is_discardable>:
	switch (hdr->evt) {
   285b8:	7803      	ldrb	r3, [r0, #0]
   285ba:	2b3e      	cmp	r3, #62	; 0x3e
   285bc:	d003      	beq.n	285c6 <event_packet_is_discardable+0xe>
   285be:	2bff      	cmp	r3, #255	; 0xff
   285c0:	d00a      	beq.n	285d8 <event_packet_is_discardable+0x20>
   285c2:	2000      	movs	r0, #0
   285c4:	4770      	bx	lr
		switch (me->subevent) {
   285c6:	7883      	ldrb	r3, [r0, #2]
   285c8:	2b02      	cmp	r3, #2
   285ca:	d00c      	beq.n	285e6 <event_packet_is_discardable+0x2e>
   285cc:	2b0d      	cmp	r3, #13
   285ce:	d001      	beq.n	285d4 <event_packet_is_discardable+0x1c>
			return false;
   285d0:	2000      	movs	r0, #0
   285d2:	4770      	bx	lr
		switch (me->subevent) {
   285d4:	2001      	movs	r0, #1
   285d6:	4770      	bx	lr
		uint8_t subevent = hci_buf[2];
   285d8:	7883      	ldrb	r3, [r0, #2]
		switch (subevent) {
   285da:	2b80      	cmp	r3, #128	; 0x80
   285dc:	d001      	beq.n	285e2 <event_packet_is_discardable+0x2a>
			return false;
   285de:	2000      	movs	r0, #0
}
   285e0:	4770      	bx	lr
			return true;
   285e2:	2001      	movs	r0, #1
   285e4:	4770      	bx	lr
		switch (me->subevent) {
   285e6:	2001      	movs	r0, #1
   285e8:	4770      	bx	lr

000285ea <hci_driver_send>:
{
   285ea:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   285ec:	8983      	ldrh	r3, [r0, #12]
   285ee:	b183      	cbz	r3, 28612 <hci_driver_send+0x28>
   285f0:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   285f2:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   285f4:	b14b      	cbz	r3, 2860a <hci_driver_send+0x20>
   285f6:	2b02      	cmp	r3, #2
   285f8:	d10e      	bne.n	28618 <hci_driver_send+0x2e>
		err = acl_handle(buf);
   285fa:	f7f5 ff65 	bl	1e4c8 <acl_handle>
   285fe:	4605      	mov	r5, r0
	if (!err) {
   28600:	b965      	cbnz	r5, 2861c <hci_driver_send+0x32>
		net_buf_unref(buf);
   28602:	4620      	mov	r0, r4
   28604:	f7ff fe4b 	bl	2829e <net_buf_unref>
   28608:	e008      	b.n	2861c <hci_driver_send+0x32>
		err = cmd_handle(buf);
   2860a:	f7f5 ff77 	bl	1e4fc <cmd_handle>
   2860e:	4605      	mov	r5, r0
		break;
   28610:	e7f6      	b.n	28600 <hci_driver_send+0x16>
		return -EINVAL;
   28612:	f06f 0515 	mvn.w	r5, #21
   28616:	e001      	b.n	2861c <hci_driver_send+0x32>
	switch (type) {
   28618:	f06f 0515 	mvn.w	r5, #21
}
   2861c:	4628      	mov	r0, r5
   2861e:	bd38      	pop	{r3, r4, r5, pc}

00028620 <fetch_and_process_hci_evt>:
{
   28620:	b538      	push	{r3, r4, r5, lr}
   28622:	4604      	mov	r4, r0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   28624:	f04f 30ff 	mov.w	r0, #4294967295
   28628:	f04f 31ff 	mov.w	r1, #4294967295
   2862c:	f7f5 feda 	bl	1e3e4 <multithreading_lock_acquire>
	if (!errcode) {
   28630:	4605      	mov	r5, r0
   28632:	b110      	cbz	r0, 2863a <fetch_and_process_hci_evt+0x1a>
	if (errcode) {
   28634:	b145      	cbz	r5, 28648 <fetch_and_process_hci_evt+0x28>
		return false;
   28636:	2000      	movs	r0, #0
}
   28638:	bd38      	pop	{r3, r4, r5, pc}
		errcode = hci_internal_evt_get(p_hci_buffer);
   2863a:	4620      	mov	r0, r4
   2863c:	f7f6 f950 	bl	1e8e0 <hci_internal_evt_get>
   28640:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   28642:	f7f5 fed9 	bl	1e3f8 <multithreading_lock_release>
   28646:	e7f5      	b.n	28634 <fetch_and_process_hci_evt+0x14>
	event_packet_process(p_hci_buffer);
   28648:	4620      	mov	r0, r4
   2864a:	f7f5 ff99 	bl	1e580 <event_packet_process>
	return true;
   2864e:	2001      	movs	r0, #1
   28650:	e7f2      	b.n	28638 <fetch_and_process_hci_evt+0x18>

00028652 <fetch_and_process_acl_data>:
{
   28652:	b538      	push	{r3, r4, r5, lr}
   28654:	4604      	mov	r4, r0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   28656:	f04f 30ff 	mov.w	r0, #4294967295
   2865a:	f04f 31ff 	mov.w	r1, #4294967295
   2865e:	f7f5 fec1 	bl	1e3e4 <multithreading_lock_acquire>
	if (!errcode) {
   28662:	4605      	mov	r5, r0
   28664:	b110      	cbz	r0, 2866c <fetch_and_process_acl_data+0x1a>
	if (errcode) {
   28666:	b145      	cbz	r5, 2867a <fetch_and_process_acl_data+0x28>
		return false;
   28668:	2000      	movs	r0, #0
}
   2866a:	bd38      	pop	{r3, r4, r5, pc}
		errcode = sdc_hci_data_get(p_hci_buffer);
   2866c:	4620      	mov	r0, r4
   2866e:	f7e4 f93e 	bl	c8ee <sdc_hci_data_get>
   28672:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   28674:	f7f5 fec0 	bl	1e3f8 <multithreading_lock_release>
   28678:	e7f5      	b.n	28666 <fetch_and_process_acl_data+0x14>
	data_packet_process(p_hci_buffer);
   2867a:	4620      	mov	r0, r4
   2867c:	f7f5 ffb8 	bl	1e5f0 <data_packet_process>
	return true;
   28680:	2001      	movs	r0, #1
   28682:	e7f2      	b.n	2866a <fetch_and_process_acl_data+0x18>

00028684 <command_generates_command_complete_event>:
	switch (hci_opcode) {
   28684:	f242 0332 	movw	r3, #8242	; 0x2032
   28688:	4298      	cmp	r0, r3
   2868a:	d82b      	bhi.n	286e4 <command_generates_command_complete_event+0x60>
   2868c:	f242 030d 	movw	r3, #8205	; 0x200d
   28690:	4298      	cmp	r0, r3
   28692:	d20b      	bcs.n	286ac <command_generates_command_complete_event+0x28>
   28694:	f240 4306 	movw	r3, #1030	; 0x406
   28698:	4298      	cmp	r0, r3
   2869a:	d02b      	beq.n	286f4 <command_generates_command_complete_event+0x70>
   2869c:	f240 431d 	movw	r3, #1053	; 0x41d
   286a0:	4298      	cmp	r0, r3
   286a2:	d001      	beq.n	286a8 <command_generates_command_complete_event+0x24>
		return true;
   286a4:	2001      	movs	r0, #1
   286a6:	4770      	bx	lr
	switch (hci_opcode) {
   286a8:	2000      	movs	r0, #0
   286aa:	4770      	bx	lr
   286ac:	f5a0 5000 	sub.w	r0, r0, #8192	; 0x2000
   286b0:	380d      	subs	r0, #13
   286b2:	2825      	cmp	r0, #37	; 0x25
   286b4:	d820      	bhi.n	286f8 <command_generates_command_complete_event+0x74>
   286b6:	e8df f000 	tbb	[pc, r0]
   286ba:	1f13      	.short	0x1f13
   286bc:	1f1f1f1f 	.word	0x1f1f1f1f
   286c0:	131f1f13 	.word	0x131f1f13
   286c4:	1f131f1f 	.word	0x1f131f1f
   286c8:	1f1f1f1f 	.word	0x1f1f1f1f
   286cc:	1f1f1f1f 	.word	0x1f1f1f1f
   286d0:	1f1f1f1f 	.word	0x1f1f1f1f
   286d4:	1f1f1f1f 	.word	0x1f1f1f1f
   286d8:	1f1f1f1f 	.word	0x1f1f1f1f
   286dc:	131f1f1f 	.word	0x131f1f1f
   286e0:	2000      	movs	r0, #0
   286e2:	4770      	bx	lr
   286e4:	f242 0343 	movw	r3, #8259	; 0x2043
   286e8:	4298      	cmp	r0, r3
   286ea:	d001      	beq.n	286f0 <command_generates_command_complete_event+0x6c>
		return true;
   286ec:	2001      	movs	r0, #1
}
   286ee:	4770      	bx	lr
	switch (hci_opcode) {
   286f0:	2000      	movs	r0, #0
   286f2:	4770      	bx	lr
   286f4:	2000      	movs	r0, #0
   286f6:	4770      	bx	lr
		return true;
   286f8:	2001      	movs	r0, #1
   286fa:	4770      	bx	lr

000286fc <encode_command_status>:
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   286fc:	230f      	movs	r3, #15
   286fe:	7003      	strb	r3, [r0, #0]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   28700:	2304      	movs	r3, #4
   28702:	7043      	strb	r3, [r0, #1]
	evt_data->status = status_code;
   28704:	7082      	strb	r2, [r0, #2]
	evt_data->ncmd = 1;
   28706:	2301      	movs	r3, #1
   28708:	70c3      	strb	r3, [r0, #3]
	evt_data->opcode = hci_opcode;
   2870a:	8081      	strh	r1, [r0, #4]
}
   2870c:	4770      	bx	lr

0002870e <encode_command_complete_header>:
{
   2870e:	b410      	push	{r4}
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   28710:	240e      	movs	r4, #14
   28712:	7004      	strb	r4, [r0, #0]
	evt_hdr->len = param_length;
   28714:	7042      	strb	r2, [r0, #1]
	evt_data->ncmd = 1;
   28716:	2201      	movs	r2, #1
   28718:	7082      	strb	r2, [r0, #2]
	evt_data->opcode = hci_opcode;
   2871a:	f8a0 1003 	strh.w	r1, [r0, #3]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   2871e:	7143      	strb	r3, [r0, #5]
}
   28720:	bc10      	pop	{r4}
   28722:	4770      	bx	lr

00028724 <le_read_supported_states>:
	*buf = states1;
   28724:	238f      	movs	r3, #143	; 0x8f
   28726:	7003      	strb	r3, [r0, #0]
	*(buf + 4) = states2;
   28728:	23c0      	movs	r3, #192	; 0xc0
   2872a:	7103      	strb	r3, [r0, #4]
}
   2872c:	4770      	bx	lr

0002872e <status_param_cmd_put>:
}
   2872e:	2001      	movs	r0, #1
   28730:	4770      	bx	lr

00028732 <link_control_cmd_put>:
{
   28732:	b508      	push	{r3, lr}
	return ((uint16_t)src[1] << 8) | src[0];
   28734:	7842      	ldrb	r2, [r0, #1]
   28736:	f810 3b03 	ldrb.w	r3, [r0], #3
   2873a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2873e:	b21b      	sxth	r3, r3
	switch (opcode)	{
   28740:	f240 4206 	movw	r2, #1030	; 0x406
   28744:	4293      	cmp	r3, r2
   28746:	d005      	beq.n	28754 <link_control_cmd_put+0x22>
   28748:	f240 421d 	movw	r2, #1053	; 0x41d
   2874c:	4293      	cmp	r3, r2
   2874e:	d004      	beq.n	2875a <link_control_cmd_put+0x28>
   28750:	2001      	movs	r0, #1
}
   28752:	bd08      	pop	{r3, pc}
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   28754:	f7e4 f9fa 	bl	cb4c <sdc_hci_cmd_lc_disconnect>
   28758:	e7fb      	b.n	28752 <link_control_cmd_put+0x20>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   2875a:	f7e4 f9f9 	bl	cb50 <sdc_hci_cmd_lc_read_remote_version_information>
   2875e:	e7f8      	b.n	28752 <link_control_cmd_put+0x20>

00028760 <controller_and_baseband_cmd_put>:
{
   28760:	b538      	push	{r3, r4, r5, lr}
   28762:	4604      	mov	r4, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   28764:	3003      	adds	r0, #3
   28766:	7865      	ldrb	r5, [r4, #1]
   28768:	7823      	ldrb	r3, [r4, #0]
   2876a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   2876e:	b21b      	sxth	r3, r3
	switch (opcode)	{
   28770:	f640 4463 	movw	r4, #3171	; 0xc63
   28774:	42a3      	cmp	r3, r4
   28776:	d02c      	beq.n	287d2 <controller_and_baseband_cmd_put+0x72>
   28778:	f101 0106 	add.w	r1, r1, #6
   2877c:	dc16      	bgt.n	287ac <controller_and_baseband_cmd_put+0x4c>
   2877e:	f640 4403 	movw	r4, #3075	; 0xc03
   28782:	42a3      	cmp	r3, r4
   28784:	d022      	beq.n	287cc <controller_and_baseband_cmd_put+0x6c>
   28786:	f640 442d 	movw	r4, #3117	; 0xc2d
   2878a:	42a3      	cmp	r3, r4
   2878c:	d105      	bne.n	2879a <controller_and_baseband_cmd_put+0x3a>
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   2878e:	7813      	ldrb	r3, [r2, #0]
   28790:	3303      	adds	r3, #3
   28792:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   28794:	f7e4 f8d2 	bl	c93c <sdc_hci_cmd_cb_read_transmit_power_level>
   28798:	e007      	b.n	287aa <controller_and_baseband_cmd_put+0x4a>
	switch (opcode)	{
   2879a:	f640 4201 	movw	r2, #3073	; 0xc01
   2879e:	4293      	cmp	r3, r2
   287a0:	d102      	bne.n	287a8 <controller_and_baseband_cmd_put+0x48>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   287a2:	f7e4 f8cd 	bl	c940 <sdc_hci_cmd_cb_set_event_mask>
   287a6:	e000      	b.n	287aa <controller_and_baseband_cmd_put+0x4a>
	switch (opcode)	{
   287a8:	2001      	movs	r0, #1
}
   287aa:	bd38      	pop	{r3, r4, r5, pc}
	switch (opcode)	{
   287ac:	f640 447b 	movw	r4, #3195	; 0xc7b
   287b0:	42a3      	cmp	r3, r4
   287b2:	d011      	beq.n	287d8 <controller_and_baseband_cmd_put+0x78>
   287b4:	f640 447c 	movw	r4, #3196	; 0xc7c
   287b8:	42a3      	cmp	r3, r4
   287ba:	d105      	bne.n	287c8 <controller_and_baseband_cmd_put+0x68>
		*param_length_out +=
   287bc:	7813      	ldrb	r3, [r2, #0]
   287be:	3302      	adds	r3, #2
   287c0:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   287c2:	f7e4 f8c7 	bl	c954 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
   287c6:	e7f0      	b.n	287aa <controller_and_baseband_cmd_put+0x4a>
	switch (opcode)	{
   287c8:	2001      	movs	r0, #1
   287ca:	e7ee      	b.n	287aa <controller_and_baseband_cmd_put+0x4a>
		return sdc_hci_cmd_cb_reset();
   287cc:	f7db fc84 	bl	40d8 <sdc_hci_cmd_cb_reset>
   287d0:	e7eb      	b.n	287aa <controller_and_baseband_cmd_put+0x4a>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   287d2:	f7e4 f8ba 	bl	c94a <sdc_hci_cmd_cb_set_event_mask_page_2>
   287d6:	e7e8      	b.n	287aa <controller_and_baseband_cmd_put+0x4a>
		*param_length_out +=
   287d8:	7813      	ldrb	r3, [r2, #0]
   287da:	3304      	adds	r3, #4
   287dc:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   287de:	f7e4 f8ab 	bl	c938 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
   287e2:	e7e2      	b.n	287aa <controller_and_baseband_cmd_put+0x4a>

000287e4 <supported_commands>:
{
   287e4:	b510      	push	{r4, lr}
   287e6:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   287e8:	222e      	movs	r2, #46	; 0x2e
   287ea:	2100      	movs	r1, #0
   287ec:	f7fc f962 	bl	24ab4 <memset>
	cmds->hci_disconnect = 1;
   287f0:	7823      	ldrb	r3, [r4, #0]
   287f2:	f043 0320 	orr.w	r3, r3, #32
   287f6:	7023      	strb	r3, [r4, #0]
	cmds->hci_read_remote_version_information = 1;
   287f8:	78a3      	ldrb	r3, [r4, #2]
   287fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   287fe:	70a3      	strb	r3, [r4, #2]
	cmds->hci_set_event_mask = 1;
   28800:	7963      	ldrb	r3, [r4, #5]
	cmds->hci_reset = 1;
   28802:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   28806:	7163      	strb	r3, [r4, #5]
	cmds->hci_read_transmit_power_level = 1;
   28808:	7aa3      	ldrb	r3, [r4, #10]
   2880a:	f043 0304 	orr.w	r3, r3, #4
   2880e:	72a3      	strb	r3, [r4, #10]
	cmds->hci_read_local_version_information = 1;
   28810:	7ba3      	ldrb	r3, [r4, #14]
	cmds->hci_read_local_supported_features = 1;
   28812:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   28816:	73a3      	strb	r3, [r4, #14]
	cmds->hci_read_bd_addr = 1;
   28818:	7be3      	ldrb	r3, [r4, #15]
   2881a:	f043 0302 	orr.w	r3, r3, #2
   2881e:	73e3      	strb	r3, [r4, #15]
	cmds->hci_set_event_mask_page_2 = 1;
   28820:	7da3      	ldrb	r3, [r4, #22]
   28822:	f043 0304 	orr.w	r3, r3, #4
   28826:	75a3      	strb	r3, [r4, #22]
	cmds->hci_le_set_event_mask = 1;
   28828:	7e63      	ldrb	r3, [r4, #25]
	cmds->hci_le_set_advertising_data = 1;
   2882a:	f043 03f7 	orr.w	r3, r3, #247	; 0xf7
   2882e:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_scan_response_data = 1;
   28830:	7ea3      	ldrb	r3, [r4, #26]
	cmds->hci_le_clear_white_list = 1;
   28832:	f043 03c3 	orr.w	r3, r3, #195	; 0xc3
   28836:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_add_device_to_white_list = 1;
   28838:	7ee3      	ldrb	r3, [r4, #27]
	cmds->hci_le_rand = 1;
   2883a:	f043 03f3 	orr.w	r3, r3, #243	; 0xf3
   2883e:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_enable_encryption = 1;
   28840:	7f23      	ldrb	r3, [r4, #28]
	cmds->hci_le_test_end = 1;
   28842:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
   28846:	7723      	strb	r3, [r4, #28]
	cmds->hci_read_authenticated_payload_timeout = 1;
   28848:	f894 3020 	ldrb.w	r3, [r4, #32]
	cmds->hci_write_authenticated_payload_timeout = 1;
   2884c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   28850:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_data_length = 1;
   28854:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_read_suggested_default_data_length = 1;
   28858:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   2885c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_write_suggested_default_data_length = 1;
   28860:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_read_resolving_list_size = 1;
   28864:	f043 0379 	orr.w	r3, r3, #121	; 0x79
   28868:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_set_address_resolution_enable = 1;
   2886c:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_receiver_test_v2 = 1;
   28870:	f043 03fe 	orr.w	r3, r3, #254	; 0xfe
   28874:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_transmitter_test_v2 = 1;
   28878:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   2887c:	f043 0301 	orr.w	r3, r3, #1
   28880:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	cmds->hci_le_read_transmit_power = 1;
   28884:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   28888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2888c:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	cmds->hci_le_set_privacy_mode = 1;
   28890:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   28894:	f043 0304 	orr.w	r3, r3, #4
   28898:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
}
   2889c:	bd10      	pop	{r4, pc}

0002889e <supported_features>:
{
   2889e:	b510      	push	{r4, lr}
   288a0:	4604      	mov	r4, r0
	memset(features, 0, sizeof(*features));
   288a2:	2208      	movs	r2, #8
   288a4:	2100      	movs	r1, #0
   288a6:	f7fc f905 	bl	24ab4 <memset>
	features->bdedr_not_supported = 1;
   288aa:	7923      	ldrb	r3, [r4, #4]
	features->le_supported = 1;
   288ac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   288b0:	7123      	strb	r3, [r4, #4]
}
   288b2:	bd10      	pop	{r4, pc}

000288b4 <info_param_cmd_put>:
{
   288b4:	b538      	push	{r3, r4, r5, lr}
   288b6:	4604      	mov	r4, r0
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   288b8:	1d88      	adds	r0, r1, #6
   288ba:	7865      	ldrb	r5, [r4, #1]
   288bc:	7823      	ldrb	r3, [r4, #0]
   288be:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   288c2:	b21b      	sxth	r3, r3
	switch (opcode)	{
   288c4:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   288c8:	3b01      	subs	r3, #1
   288ca:	2b08      	cmp	r3, #8
   288cc:	d820      	bhi.n	28910 <info_param_cmd_put+0x5c>
   288ce:	e8df f003 	tbb	[pc, r3]
   288d2:	0b05      	.short	0x0b05
   288d4:	1f1f1f12 	.word	0x1f1f1f12
   288d8:	1f1f      	.short	0x1f1f
   288da:	19          	.byte	0x19
   288db:	00          	.byte	0x00
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   288dc:	7813      	ldrb	r3, [r2, #0]
   288de:	3308      	adds	r3, #8
   288e0:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   288e2:	f7e4 f8e8 	bl	cab6 <sdc_hci_cmd_ip_read_local_version_information>
   288e6:	e014      	b.n	28912 <info_param_cmd_put+0x5e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   288e8:	7813      	ldrb	r3, [r2, #0]
   288ea:	3340      	adds	r3, #64	; 0x40
   288ec:	7013      	strb	r3, [r2, #0]
		supported_commands((void *)event_out_params);
   288ee:	f7ff ff79 	bl	287e4 <supported_commands>
		return 0;
   288f2:	2000      	movs	r0, #0
   288f4:	e00d      	b.n	28912 <info_param_cmd_put+0x5e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   288f6:	7813      	ldrb	r3, [r2, #0]
   288f8:	3308      	adds	r3, #8
   288fa:	7013      	strb	r3, [r2, #0]
		supported_features((void *)event_out_params);
   288fc:	f7ff ffcf 	bl	2889e <supported_features>
		return 0;
   28900:	2000      	movs	r0, #0
   28902:	e006      	b.n	28912 <info_param_cmd_put+0x5e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   28904:	7813      	ldrb	r3, [r2, #0]
   28906:	3306      	adds	r3, #6
   28908:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   2890a:	f7e4 f8d2 	bl	cab2 <sdc_hci_cmd_ip_read_bd_addr>
   2890e:	e000      	b.n	28912 <info_param_cmd_put+0x5e>
   28910:	2001      	movs	r0, #1
}
   28912:	bd38      	pop	{r3, r4, r5, pc}

00028914 <le_supported_features>:
{
   28914:	b510      	push	{r4, lr}
   28916:	4604      	mov	r4, r0
	memset(features, 0, sizeof(*features));
   28918:	2205      	movs	r2, #5
   2891a:	2100      	movs	r1, #0
   2891c:	f7fc f8ca 	bl	24ab4 <memset>
	features->le_encryption = 1;
   28920:	7823      	ldrb	r3, [r4, #0]
	features->ll_privacy = 1;
   28922:	f043 0375 	orr.w	r3, r3, #117	; 0x75
   28926:	7023      	strb	r3, [r4, #0]
	features->le_2m_phy = 1;
   28928:	7863      	ldrb	r3, [r4, #1]
	features->channel_selection_algorithm_2 = 1;
   2892a:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   2892e:	7063      	strb	r3, [r4, #1]
}
   28930:	bd10      	pop	{r4, pc}

00028932 <vs_zephyr_supported_commands>:
{
   28932:	b510      	push	{r4, lr}
   28934:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   28936:	2202      	movs	r2, #2
   28938:	2100      	movs	r1, #0
   2893a:	f7fc f8bb 	bl	24ab4 <memset>
	cmds->read_version_info = 1;
   2893e:	7823      	ldrb	r3, [r4, #0]
	cmds->write_bd_addr = 1;
   28940:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   28944:	7023      	strb	r3, [r4, #0]
	cmds->read_static_addresses = 1;
   28946:	7863      	ldrb	r3, [r4, #1]
	cmds->read_chip_temperature = 1;
   28948:	f043 0307 	orr.w	r3, r3, #7
   2894c:	7063      	strb	r3, [r4, #1]
}
   2894e:	bd10      	pop	{r4, pc}

00028950 <vs_supported_commands>:
{
   28950:	b510      	push	{r4, lr}
   28952:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   28954:	2201      	movs	r2, #1
   28956:	2100      	movs	r1, #0
   28958:	f7fc f8ac 	bl	24ab4 <memset>
	cmds->read_supported_vs_commands = 1;
   2895c:	7823      	ldrb	r3, [r4, #0]
	cmds->event_length_set = 1;
   2895e:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   28962:	7023      	strb	r3, [r4, #0]
}
   28964:	bd10      	pop	{r4, pc}

00028966 <le_controller_cmd_put>:
{
   28966:	b538      	push	{r3, r4, r5, lr}
   28968:	4604      	mov	r4, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   2896a:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   2896c:	3106      	adds	r1, #6
   2896e:	7865      	ldrb	r5, [r4, #1]
   28970:	7823      	ldrb	r3, [r4, #0]
   28972:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   28976:	b21b      	sxth	r3, r3
	switch (opcode)	{
   28978:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   2897c:	3b01      	subs	r3, #1
   2897e:	2b4d      	cmp	r3, #77	; 0x4d
   28980:	f200 80ce 	bhi.w	28b20 <le_controller_cmd_put+0x1ba>
   28984:	e8df f003 	tbb	[pc, r3]
   28988:	cc312a27 	.word	0xcc312a27
   2898c:	463f3c39 	.word	0x463f3c39
   28990:	cccc4c49 	.word	0xcccc4c49
   28994:	564fcccc 	.word	0x564fcccc
   28998:	cccc5c59 	.word	0xcccc5c59
   2899c:	6e68655f 	.word	0x6e68655f
   289a0:	817b75cc 	.word	0x817b75cc
   289a4:	cccccccc 	.word	0xcccccccc
   289a8:	968f89cc 	.word	0x968f89cc
   289ac:	9c99cccc 	.word	0x9c99cccc
   289b0:	cccca29f 	.word	0xcccca29f
   289b4:	b6afaca9 	.word	0xb6afaca9
   289b8:	ccccbfbc 	.word	0xccccbfbc
   289bc:	cccccccc 	.word	0xcccccccc
   289c0:	cccccccc 	.word	0xcccccccc
   289c4:	cccccccc 	.word	0xcccccccc
   289c8:	cccccccc 	.word	0xcccccccc
   289cc:	cccccccc 	.word	0xcccccccc
   289d0:	ccc2cccc 	.word	0xccc2cccc
   289d4:	c9cc      	.short	0xc9cc
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   289d6:	f7e4 f8a8 	bl	cb2a <sdc_hci_cmd_le_set_event_mask>
   289da:	e0a2      	b.n	28b22 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   289dc:	7813      	ldrb	r3, [r2, #0]
   289de:	3303      	adds	r3, #3
   289e0:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   289e2:	4608      	mov	r0, r1
   289e4:	f7e4 f87f 	bl	cae6 <sdc_hci_cmd_le_read_buffer_size>
   289e8:	e09b      	b.n	28b22 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   289ea:	7813      	ldrb	r3, [r2, #0]
   289ec:	3308      	adds	r3, #8
   289ee:	7013      	strb	r3, [r2, #0]
		le_supported_features((void *)event_out_params);
   289f0:	4608      	mov	r0, r1
   289f2:	f7ff ff8f 	bl	28914 <le_supported_features>
		return 0;
   289f6:	2000      	movs	r0, #0
   289f8:	e093      	b.n	28b22 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   289fa:	f7e4 f89f 	bl	cb3c <sdc_hci_cmd_le_set_random_address>
   289fe:	e090      	b.n	28b22 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   28a00:	f7e4 f88d 	bl	cb1e <sdc_hci_cmd_le_set_adv_params>
   28a04:	e08d      	b.n	28b22 <le_controller_cmd_put+0x1bc>
		*param_length_out +=
   28a06:	7813      	ldrb	r3, [r2, #0]
   28a08:	3301      	adds	r3, #1
   28a0a:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   28a0c:	4608      	mov	r0, r1
   28a0e:	f7e4 f868 	bl	cae2 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
   28a12:	e086      	b.n	28b22 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   28a14:	f7e4 f87f 	bl	cb16 <sdc_hci_cmd_le_set_adv_data>
   28a18:	e083      	b.n	28b22 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   28a1a:	f7e4 f893 	bl	cb44 <sdc_hci_cmd_le_set_scan_response_data>
   28a1e:	e080      	b.n	28b22 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   28a20:	f7e4 f87b 	bl	cb1a <sdc_hci_cmd_le_set_adv_enable>
   28a24:	e07d      	b.n	28b22 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_white_list_size_return_t);
   28a26:	7813      	ldrb	r3, [r2, #0]
   28a28:	3301      	adds	r3, #1
   28a2a:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_white_list_size((void *)event_out_params);
   28a2c:	4608      	mov	r0, r1
   28a2e:	f7e4 f86a 	bl	cb06 <sdc_hci_cmd_le_read_white_list_size>
   28a32:	e076      	b.n	28b22 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_clear_white_list();
   28a34:	f7e4 f847 	bl	cac6 <sdc_hci_cmd_le_clear_white_list>
   28a38:	e073      	b.n	28b22 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_add_device_to_white_list((void *)cmd_params);
   28a3a:	f7e4 f840 	bl	cabe <sdc_hci_cmd_le_add_device_to_white_list>
   28a3e:	e070      	b.n	28b22 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_remove_device_from_white_list((void *)cmd_params);
   28a40:	f7e4 f865 	bl	cb0e <sdc_hci_cmd_le_remove_device_from_white_list>
   28a44:	e06d      	b.n	28b22 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   28a46:	7813      	ldrb	r3, [r2, #0]
   28a48:	3307      	adds	r3, #7
   28a4a:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   28a4c:	f7e4 f84d 	bl	caea <sdc_hci_cmd_le_read_channel_map>
   28a50:	e067      	b.n	28b22 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   28a52:	f7e4 f850 	bl	caf6 <sdc_hci_cmd_le_read_remote_features>
   28a56:	e064      	b.n	28b22 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   28a58:	7813      	ldrb	r3, [r2, #0]
   28a5a:	3310      	adds	r3, #16
   28a5c:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   28a5e:	f7e4 f834 	bl	caca <sdc_hci_cmd_le_encrypt>
   28a62:	e05e      	b.n	28b22 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   28a64:	7813      	ldrb	r3, [r2, #0]
   28a66:	3308      	adds	r3, #8
   28a68:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   28a6a:	4608      	mov	r0, r1
   28a6c:	f7e4 f837 	bl	cade <sdc_hci_cmd_le_rand>
   28a70:	e057      	b.n	28b22 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   28a72:	7813      	ldrb	r3, [r2, #0]
   28a74:	3302      	adds	r3, #2
   28a76:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   28a78:	f7e4 f82d 	bl	cad6 <sdc_hci_cmd_le_long_term_key_request_reply>
   28a7c:	e051      	b.n	28b22 <le_controller_cmd_put+0x1bc>
		*param_length_out +=
   28a7e:	7813      	ldrb	r3, [r2, #0]
   28a80:	3302      	adds	r3, #2
   28a82:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   28a84:	f7e4 f823 	bl	cace <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   28a88:	e04b      	b.n	28b22 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   28a8a:	7813      	ldrb	r3, [r2, #0]
   28a8c:	3308      	adds	r3, #8
   28a8e:	7013      	strb	r3, [r2, #0]
		le_read_supported_states((void *)event_out_params);
   28a90:	4608      	mov	r0, r1
   28a92:	f7ff fe47 	bl	28724 <le_read_supported_states>
		return 0;
   28a96:	2000      	movs	r0, #0
   28a98:	e043      	b.n	28b22 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   28a9a:	7813      	ldrb	r3, [r2, #0]
   28a9c:	3302      	adds	r3, #2
   28a9e:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   28aa0:	f7e4 f83f 	bl	cb22 <sdc_hci_cmd_le_set_data_length>
   28aa4:	e03d      	b.n	28b22 <le_controller_cmd_put+0x1bc>
		*param_length_out +=
   28aa6:	7813      	ldrb	r3, [r2, #0]
   28aa8:	3304      	adds	r3, #4
   28aaa:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   28aac:	4608      	mov	r0, r1
   28aae:	f7e4 f826 	bl	cafe <sdc_hci_cmd_le_read_suggested_default_data_length>
   28ab2:	e036      	b.n	28b22 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   28ab4:	f7e4 f848 	bl	cb48 <sdc_hci_cmd_le_write_suggested_default_data_length>
   28ab8:	e033      	b.n	28b22 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   28aba:	f7e3 fffe 	bl	caba <sdc_hci_cmd_le_add_device_to_resolving_list>
   28abe:	e030      	b.n	28b22 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   28ac0:	f7e4 f823 	bl	cb0a <sdc_hci_cmd_le_remove_device_from_resolving_list>
   28ac4:	e02d      	b.n	28b22 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_clear_resolving_list();
   28ac6:	f7e3 fffc 	bl	cac2 <sdc_hci_cmd_le_clear_resolving_list>
   28aca:	e02a      	b.n	28b22 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   28acc:	7813      	ldrb	r3, [r2, #0]
   28ace:	3301      	adds	r3, #1
   28ad0:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   28ad2:	4608      	mov	r0, r1
   28ad4:	f7e4 f811 	bl	cafa <sdc_hci_cmd_le_read_resolving_list_size>
   28ad8:	e023      	b.n	28b22 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   28ada:	f7e4 f81a 	bl	cb12 <sdc_hci_cmd_le_set_address_resolution_enable>
   28ade:	e020      	b.n	28b22 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   28ae0:	f7e4 f82e 	bl	cb40 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   28ae4:	e01d      	b.n	28b22 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   28ae6:	7813      	ldrb	r3, [r2, #0]
   28ae8:	3308      	adds	r3, #8
   28aea:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   28aec:	4608      	mov	r0, r1
   28aee:	f7e3 fffe 	bl	caee <sdc_hci_cmd_le_read_max_data_length>
   28af2:	e016      	b.n	28b22 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   28af4:	7813      	ldrb	r3, [r2, #0]
   28af6:	3304      	adds	r3, #4
   28af8:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   28afa:	f7e3 fffa 	bl	caf2 <sdc_hci_cmd_le_read_phy>
   28afe:	e010      	b.n	28b22 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   28b00:	f7e4 f811 	bl	cb26 <sdc_hci_cmd_le_set_default_phy>
   28b04:	e00d      	b.n	28b22 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   28b06:	f7e4 f815 	bl	cb34 <sdc_hci_cmd_le_set_phy>
   28b0a:	e00a      	b.n	28b22 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   28b0c:	7813      	ldrb	r3, [r2, #0]
   28b0e:	3302      	adds	r3, #2
   28b10:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   28b12:	4608      	mov	r0, r1
   28b14:	f7e3 fff5 	bl	cb02 <sdc_hci_cmd_le_read_transmit_power>
   28b18:	e003      	b.n	28b22 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   28b1a:	f7e4 f80d 	bl	cb38 <sdc_hci_cmd_le_set_privacy_mode>
   28b1e:	e000      	b.n	28b22 <le_controller_cmd_put+0x1bc>
   28b20:	2001      	movs	r0, #1
}
   28b22:	bd38      	pop	{r3, r4, r5, pc}

00028b24 <vs_cmd_put>:
{
   28b24:	b538      	push	{r3, r4, r5, lr}
   28b26:	4604      	mov	r4, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   28b28:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   28b2a:	3106      	adds	r1, #6
   28b2c:	7865      	ldrb	r5, [r4, #1]
   28b2e:	7823      	ldrb	r3, [r4, #0]
   28b30:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	switch (opcode)	{
   28b34:	f64f 440a 	movw	r4, #64522	; 0xfc0a
   28b38:	42a3      	cmp	r3, r4
   28b3a:	d90f      	bls.n	28b5c <vs_cmd_put+0x38>
   28b3c:	f64f 5405 	movw	r4, #64773	; 0xfd05
   28b40:	42a3      	cmp	r3, r4
   28b42:	d85b      	bhi.n	28bfc <vs_cmd_put+0xd8>
   28b44:	f5b3 4f7d 	cmp.w	r3, #64768	; 0xfd00
   28b48:	d319      	bcc.n	28b7e <vs_cmd_put+0x5a>
   28b4a:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   28b4e:	2b05      	cmp	r3, #5
   28b50:	d850      	bhi.n	28bf4 <vs_cmd_put+0xd0>
   28b52:	e8df f003 	tbb	[pc, r3]
   28b56:	4038      	.short	0x4038
   28b58:	4c494643 	.word	0x4c494643
   28b5c:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   28b60:	d801      	bhi.n	28b66 <vs_cmd_put+0x42>
   28b62:	2001      	movs	r0, #1
}
   28b64:	bd38      	pop	{r3, r4, r5, pc}
   28b66:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   28b6a:	3b01      	subs	r3, #1
   28b6c:	2b09      	cmp	r3, #9
   28b6e:	d843      	bhi.n	28bf8 <vs_cmd_put+0xd4>
   28b70:	e8df f003 	tbb	[pc, r3]
   28b74:	42420e07 	.word	0x42420e07
   28b78:	42422642 	.word	0x42422642
   28b7c:	1f16      	.short	0x1f16
	switch (opcode)	{
   28b7e:	2001      	movs	r0, #1
   28b80:	e7f0      	b.n	28b64 <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   28b82:	7813      	ldrb	r3, [r2, #0]
   28b84:	330c      	adds	r3, #12
   28b86:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   28b88:	4608      	mov	r0, r1
   28b8a:	f7db fab9 	bl	4100 <sdc_hci_cmd_vs_zephyr_read_version_info>
   28b8e:	e7e9      	b.n	28b64 <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   28b90:	7813      	ldrb	r3, [r2, #0]
   28b92:	3340      	adds	r3, #64	; 0x40
   28b94:	7013      	strb	r3, [r2, #0]
		vs_zephyr_supported_commands((void *)event_out_params);
   28b96:	4608      	mov	r0, r1
   28b98:	f7ff fecb 	bl	28932 <vs_zephyr_supported_commands>
		return 0;
   28b9c:	2000      	movs	r0, #0
   28b9e:	e7e1      	b.n	28b64 <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_static_addresses_return_t);
   28ba0:	7813      	ldrb	r3, [r2, #0]
   28ba2:	3301      	adds	r3, #1
   28ba4:	b2db      	uxtb	r3, r3
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   28ba6:	3316      	adds	r3, #22
   28ba8:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   28baa:	4608      	mov	r0, r1
   28bac:	f7e3 ff34 	bl	ca18 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   28bb0:	e7d8      	b.n	28b64 <vs_cmd_put+0x40>
		*param_length_out +=
   28bb2:	7813      	ldrb	r3, [r2, #0]
   28bb4:	3320      	adds	r3, #32
   28bb6:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   28bb8:	4608      	mov	r0, r1
   28bba:	f7e3 fee0 	bl	c97e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   28bbe:	e7d1      	b.n	28b64 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   28bc0:	f7e3 ff75 	bl	caae <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   28bc4:	e7ce      	b.n	28b64 <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   28bc6:	7813      	ldrb	r3, [r2, #0]
   28bc8:	3340      	adds	r3, #64	; 0x40
   28bca:	7013      	strb	r3, [r2, #0]
		vs_supported_commands((void *)event_out_params);
   28bcc:	4608      	mov	r0, r1
   28bce:	f7ff febf 	bl	28950 <vs_supported_commands>
		return 0;
   28bd2:	2000      	movs	r0, #0
   28bd4:	e7c6      	b.n	28b64 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   28bd6:	f7e3 fecb 	bl	c970 <sdc_hci_cmd_vs_llpm_mode_set>
   28bda:	e7c3      	b.n	28b64 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   28bdc:	f7e3 fec4 	bl	c968 <sdc_hci_cmd_vs_conn_update>
   28be0:	e7c0      	b.n	28b64 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   28be2:	f7e3 feb9 	bl	c958 <sdc_hci_cmd_vs_conn_event_extend>
   28be6:	e7bd      	b.n	28b64 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   28be8:	f7e3 fec4 	bl	c974 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   28bec:	e7ba      	b.n	28b64 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   28bee:	f7e3 febd 	bl	c96c <sdc_hci_cmd_vs_event_length_set>
   28bf2:	e7b7      	b.n	28b64 <vs_cmd_put+0x40>
	switch (opcode)	{
   28bf4:	2001      	movs	r0, #1
   28bf6:	e7b5      	b.n	28b64 <vs_cmd_put+0x40>
   28bf8:	2001      	movs	r0, #1
   28bfa:	e7b3      	b.n	28b64 <vs_cmd_put+0x40>
   28bfc:	2001      	movs	r0, #1
   28bfe:	e7b1      	b.n	28b64 <vs_cmd_put+0x40>

00028c00 <cmd_put>:
{
   28c00:	b570      	push	{r4, r5, r6, lr}
   28c02:	b082      	sub	sp, #8
   28c04:	460e      	mov	r6, r1
   28c06:	7842      	ldrb	r2, [r0, #1]
   28c08:	7805      	ldrb	r5, [r0, #0]
   28c0a:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   28c0e:	2304      	movs	r3, #4
   28c10:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (BT_OGF(opcode)) {
   28c14:	0893      	lsrs	r3, r2, #2
   28c16:	2a23      	cmp	r2, #35	; 0x23
   28c18:	d80b      	bhi.n	28c32 <cmd_put+0x32>
   28c1a:	b21a      	sxth	r2, r3
   28c1c:	2a00      	cmp	r2, #0
   28c1e:	d03a      	beq.n	28c96 <cmd_put+0x96>
   28c20:	3b01      	subs	r3, #1
   28c22:	2b07      	cmp	r3, #7
   28c24:	d839      	bhi.n	28c9a <cmd_put+0x9a>
   28c26:	e8df f003 	tbb	[pc, r3]
   28c2a:	381a      	.short	0x381a
   28c2c:	382a241e 	.word	0x382a241e
   28c30:	3038      	.short	0x3038
   28c32:	2b3f      	cmp	r3, #63	; 0x3f
   28c34:	d105      	bne.n	28c42 <cmd_put+0x42>
		status = vs_cmd_put(cmd_in,
   28c36:	f10d 0207 	add.w	r2, sp, #7
   28c3a:	f7ff ff73 	bl	28b24 <vs_cmd_put>
   28c3e:	4604      	mov	r4, r0
		break;
   28c40:	e000      	b.n	28c44 <cmd_put+0x44>
	switch (BT_OGF(opcode)) {
   28c42:	2401      	movs	r4, #1
	if (!command_generates_command_complete_event(opcode) ||
   28c44:	4628      	mov	r0, r5
   28c46:	f7ff fd1d 	bl	28684 <command_generates_command_complete_event>
   28c4a:	b108      	cbz	r0, 28c50 <cmd_put+0x50>
   28c4c:	2c01      	cmp	r4, #1
   28c4e:	d126      	bne.n	28c9e <cmd_put+0x9e>
		encode_command_status(raw_event_out, opcode, status);
   28c50:	4622      	mov	r2, r4
   28c52:	4629      	mov	r1, r5
   28c54:	4630      	mov	r0, r6
   28c56:	f7ff fd51 	bl	286fc <encode_command_status>
}
   28c5a:	b002      	add	sp, #8
   28c5c:	bd70      	pop	{r4, r5, r6, pc}
		status = link_control_cmd_put(cmd_in);
   28c5e:	f7ff fd68 	bl	28732 <link_control_cmd_put>
   28c62:	4604      	mov	r4, r0
		break;
   28c64:	e7ee      	b.n	28c44 <cmd_put+0x44>
		status = controller_and_baseband_cmd_put(cmd_in,
   28c66:	f10d 0207 	add.w	r2, sp, #7
   28c6a:	f7ff fd79 	bl	28760 <controller_and_baseband_cmd_put>
   28c6e:	4604      	mov	r4, r0
		break;
   28c70:	e7e8      	b.n	28c44 <cmd_put+0x44>
		status = info_param_cmd_put(cmd_in,
   28c72:	f10d 0207 	add.w	r2, sp, #7
   28c76:	f7ff fe1d 	bl	288b4 <info_param_cmd_put>
   28c7a:	4604      	mov	r4, r0
		break;
   28c7c:	e7e2      	b.n	28c44 <cmd_put+0x44>
		status = status_param_cmd_put(cmd_in,
   28c7e:	f10d 0207 	add.w	r2, sp, #7
   28c82:	f7ff fd54 	bl	2872e <status_param_cmd_put>
   28c86:	4604      	mov	r4, r0
		break;
   28c88:	e7dc      	b.n	28c44 <cmd_put+0x44>
		status = le_controller_cmd_put(cmd_in,
   28c8a:	f10d 0207 	add.w	r2, sp, #7
   28c8e:	f7ff fe6a 	bl	28966 <le_controller_cmd_put>
   28c92:	4604      	mov	r4, r0
		break;
   28c94:	e7d6      	b.n	28c44 <cmd_put+0x44>
	switch (BT_OGF(opcode)) {
   28c96:	2401      	movs	r4, #1
   28c98:	e7d4      	b.n	28c44 <cmd_put+0x44>
   28c9a:	2401      	movs	r4, #1
   28c9c:	e7d2      	b.n	28c44 <cmd_put+0x44>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   28c9e:	4623      	mov	r3, r4
   28ca0:	f89d 2007 	ldrb.w	r2, [sp, #7]
   28ca4:	4629      	mov	r1, r5
   28ca6:	4630      	mov	r0, r6
   28ca8:	f7ff fd31 	bl	2870e <encode_command_complete_header>
}
   28cac:	e7d5      	b.n	28c5a <cmd_put+0x5a>

00028cae <bt_encrypt_le>:

int bt_encrypt_le(const uint8_t key[BT_ECB_BLOCK_SIZE],
		  const uint8_t plaintext[BT_ECB_BLOCK_SIZE],
		  uint8_t enc_data[BT_ECB_BLOCK_SIZE])
{
   28cae:	b530      	push	{r4, r5, lr}
   28cb0:	b08d      	sub	sp, #52	; 0x34
   28cb2:	4614      	mov	r4, r2
	psrc += length - 1;
   28cb4:	300f      	adds	r0, #15
	uint8_t *pdst = (uint8_t *)dst;
   28cb6:	ab08      	add	r3, sp, #32
	for (; length > 0; length--) {
   28cb8:	2210      	movs	r2, #16
   28cba:	b12a      	cbz	r2, 28cc8 <bt_encrypt_le+0x1a>
		*pdst++ = *psrc--;
   28cbc:	f810 5901 	ldrb.w	r5, [r0], #-1
   28cc0:	f803 5b01 	strb.w	r5, [r3], #1
	for (; length > 0; length--) {
   28cc4:	3a01      	subs	r2, #1
   28cc6:	e7f8      	b.n	28cba <bt_encrypt_le+0xc>
	psrc += length - 1;
   28cc8:	310f      	adds	r1, #15
	uint8_t *pdst = (uint8_t *)dst;
   28cca:	ab04      	add	r3, sp, #16
	for (; length > 0; length--) {
   28ccc:	2210      	movs	r2, #16
   28cce:	e004      	b.n	28cda <bt_encrypt_le+0x2c>
		*pdst++ = *psrc--;
   28cd0:	f811 0901 	ldrb.w	r0, [r1], #-1
   28cd4:	f803 0b01 	strb.w	r0, [r3], #1
	for (; length > 0; length--) {
   28cd8:	3a01      	subs	r2, #1
   28cda:	2a00      	cmp	r2, #0
   28cdc:	d1f8      	bne.n	28cd0 <bt_encrypt_le+0x22>
	BT_HEXDUMP_DBG(plaintext, BT_ECB_BLOCK_SIZE, "plaintext");

	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
	sys_memcpy_swap(plaintext_le, plaintext, BT_ECB_BLOCK_SIZE);

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   28cde:	f04f 30ff 	mov.w	r0, #4294967295
   28ce2:	f04f 31ff 	mov.w	r1, #4294967295
   28ce6:	f7f5 fb7d 	bl	1e3e4 <multithreading_lock_acquire>

	if (!errcode) {
   28cea:	4605      	mov	r5, r0
   28cec:	b118      	cbz	r0, 28cf6 <bt_encrypt_le+0x48>
		errcode = sdc_soc_ecb_block_encrypt(key_le, plaintext_le, enc_data_le);
		MULTITHREADING_LOCK_RELEASE();
	}

	if (!errcode) {
   28cee:	b15d      	cbz	r5, 28d08 <bt_encrypt_le+0x5a>

		BT_HEXDUMP_DBG(enc_data, BT_ECB_BLOCK_SIZE, "enc_data");
	}

	return errcode;
}
   28cf0:	4628      	mov	r0, r5
   28cf2:	b00d      	add	sp, #52	; 0x34
   28cf4:	bd30      	pop	{r4, r5, pc}
		errcode = sdc_soc_ecb_block_encrypt(key_le, plaintext_le, enc_data_le);
   28cf6:	466a      	mov	r2, sp
   28cf8:	a904      	add	r1, sp, #16
   28cfa:	a808      	add	r0, sp, #32
   28cfc:	f7e3 fb7f 	bl	c3fe <sdc_soc_ecb_block_encrypt>
   28d00:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   28d02:	f7f5 fb79 	bl	1e3f8 <multithreading_lock_release>
   28d06:	e7f2      	b.n	28cee <bt_encrypt_le+0x40>
	psrc += length - 1;
   28d08:	f10d 030f 	add.w	r3, sp, #15
   28d0c:	2210      	movs	r2, #16
	for (; length > 0; length--) {
   28d0e:	2a00      	cmp	r2, #0
   28d10:	d0ee      	beq.n	28cf0 <bt_encrypt_le+0x42>
		*pdst++ = *psrc--;
   28d12:	f813 1901 	ldrb.w	r1, [r3], #-1
   28d16:	f804 1b01 	strb.w	r1, [r4], #1
	for (; length > 0; length--) {
   28d1a:	3a01      	subs	r2, #1
   28d1c:	e7f7      	b.n	28d0e <bt_encrypt_le+0x60>

00028d1e <m_config_clock_source_get>:
}
   28d1e:	2000      	movs	r0, #0
   28d20:	4770      	bx	lr

00028d22 <mpsl_fem_init>:
#if IS_ENABLED(CONFIG_MPSL_FEM)
	return mpsl_fem_configure();
#else
	return 0;
#endif
}
   28d22:	2000      	movs	r0, #0
   28d24:	4770      	bx	lr

00028d26 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   28d26:	4668      	mov	r0, sp
   28d28:	f020 0107 	bic.w	r1, r0, #7
   28d2c:	468d      	mov	sp, r1
   28d2e:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   28d30:	f7d9 fdce 	bl	28d0 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   28d34:	f7ea fc14 	bl	13560 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   28d38:	f7eb f8ea 	bl	13f10 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   28d3c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   28d40:	4685      	mov	sp, r0
   28d42:	4770      	bx	lr

00028d44 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   28d44:	4668      	mov	r0, sp
   28d46:	f020 0107 	bic.w	r1, r0, #7
   28d4a:	468d      	mov	sp, r1
   28d4c:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   28d4e:	f7d9 fd41 	bl	27d4 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   28d52:	f7ea fc05 	bl	13560 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   28d56:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   28d5a:	4685      	mov	sp, r0
   28d5c:	4770      	bx	lr

00028d5e <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   28d5e:	4668      	mov	r0, sp
   28d60:	f020 0107 	bic.w	r1, r0, #7
   28d64:	468d      	mov	sp, r1
   28d66:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   28d68:	f7e3 f89a 	bl	bea0 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   28d6c:	f7ea fbf8 	bl	13560 <_arch_isr_direct_pm>
   28d70:	f7eb f8ce 	bl	13f10 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   28d74:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   28d78:	4685      	mov	sp, r0
   28d7a:	4770      	bx	lr

00028d7c <nrfx_clock_stop>:
	switch (domain) {
   28d7c:	2801      	cmp	r0, #1
   28d7e:	d000      	beq.n	28d82 <nrfx_clock_stop+0x6>
   28d80:	4770      	bx	lr
{
   28d82:	b508      	push	{r3, lr}
		mpsl_clock_hfclk_release();
   28d84:	f7da fbe0 	bl	3548 <mpsl_clock_hfclk_release>
}
   28d88:	bd08      	pop	{r3, pc}

00028d8a <nrfx_clock_enable>:
}
   28d8a:	4770      	bx	lr

00028d8c <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
   28d8c:	b508      	push	{r3, lr}
	MPSL_IRQ_CLOCK_Handler();
   28d8e:	f7da f9f9 	bl	3184 <MPSL_IRQ_CLOCK_Handler>
}
   28d92:	bd08      	pop	{r3, pc}

00028d94 <nrf_flash_sync_is_required>:
{
   28d94:	b508      	push	{r3, lr}
	return mpsl_is_initialized();
   28d96:	f7da fdb9 	bl	390c <mpsl_is_initialized>
}
   28d9a:	bd08      	pop	{r3, pc}

00028d9c <nrf_flash_sync_get_timestamp_begin>:
}
   28d9c:	4770      	bx	lr

00028d9e <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
   28d9e:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   28da0:	4780      	blx	r0
}
   28da2:	bd08      	pop	{r3, pc}

00028da4 <flash_page_size_get>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   28da4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   28da8:	6918      	ldr	r0, [r3, #16]
}
   28daa:	4770      	bx	lr

00028dac <flash_page_count_get>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   28dac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   28db0:	6958      	ldr	r0, [r3, #20]
}
   28db2:	4770      	bx	lr

00028db4 <flash_total_size_get>:
{
   28db4:	b510      	push	{r4, lr}
    return flash_page_size_get() * flash_page_count_get();
   28db6:	f7ff fff5 	bl	28da4 <flash_page_size_get>
   28dba:	4604      	mov	r4, r0
   28dbc:	f7ff fff6 	bl	28dac <flash_page_count_get>
}
   28dc0:	fb00 f004 	mul.w	r0, r0, r4
   28dc4:	bd10      	pop	{r4, pc}

00028dc6 <is_page_aligned_check>:
{
   28dc6:	b510      	push	{r4, lr}
   28dc8:	4604      	mov	r4, r0
    return !(addr % flash_page_size_get());
   28dca:	f7ff ffeb 	bl	28da4 <flash_page_size_get>
   28dce:	fbb4 f3f0 	udiv	r3, r4, r0
   28dd2:	fb00 4013 	mls	r0, r0, r3, r4
}
   28dd6:	fab0 f080 	clz	r0, r0
   28dda:	0940      	lsrs	r0, r0, #5
   28ddc:	bd10      	pop	{r4, pc}

00028dde <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   28dde:	b538      	push	{r3, r4, r5, lr}
   28de0:	4604      	mov	r4, r0
   28de2:	460d      	mov	r5, r1
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();
   28de4:	f7f6 f96a 	bl	1f0bc <nvmc_write_mode_set>

    nvmc_word_write(addr, value);
   28de8:	4629      	mov	r1, r5
   28dea:	4620      	mov	r0, r4
   28dec:	f7f6 f976 	bl	1f0dc <nvmc_word_write>

    nvmc_readonly_mode_set();
   28df0:	f7f6 f95c 	bl	1f0ac <nvmc_readonly_mode_set>
}
   28df4:	bd38      	pop	{r3, r4, r5, pc}

00028df6 <nrfx_nvmc_flash_size_get>:
    return (nrfx_is_word_aligned((void const *)addr) ? (uint16_t)(val32)
                                                     : (uint16_t)(val32 >> 16));
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
   28df6:	b508      	push	{r3, lr}
    return flash_total_size_get();
   28df8:	f7ff ffdc 	bl	28db4 <flash_total_size_get>
}
   28dfc:	bd08      	pop	{r3, pc}

00028dfe <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
   28dfe:	b508      	push	{r3, lr}
    return flash_page_size_get();
   28e00:	f7ff ffd0 	bl	28da4 <flash_page_size_get>
}
   28e04:	bd08      	pop	{r3, pc}

00028e06 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
   28e06:	b508      	push	{r3, lr}
    return flash_page_count_get();
   28e08:	f7ff ffd0 	bl	28dac <flash_page_count_get>
}
   28e0c:	bd08      	pop	{r3, pc}

00028e0e <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   28e0e:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   28e10:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   28e12:	4293      	cmp	r3, r2
   28e14:	d804      	bhi.n	28e20 <_GetAvailWriteSpace+0x12>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   28e16:	6880      	ldr	r0, [r0, #8]
   28e18:	1a80      	subs	r0, r0, r2
   28e1a:	4403      	add	r3, r0
   28e1c:	1e58      	subs	r0, r3, #1
   28e1e:	4770      	bx	lr
    r = RdOff - WrOff - 1u;
   28e20:	1a9b      	subs	r3, r3, r2
   28e22:	1e58      	subs	r0, r3, #1
}
   28e24:	4770      	bx	lr

00028e26 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   28e26:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28e2a:	4604      	mov	r4, r0
   28e2c:	4688      	mov	r8, r1
   28e2e:	4616      	mov	r6, r2
  WrOff = pRing->WrOff;
   28e30:	68c5      	ldr	r5, [r0, #12]
  Rem = pRing->SizeOfBuffer - WrOff;
   28e32:	6887      	ldr	r7, [r0, #8]
   28e34:	eba7 0905 	sub.w	r9, r7, r5
  if (Rem > NumBytes) {
   28e38:	4591      	cmp	r9, r2
   28e3a:	d907      	bls.n	28e4c <_WriteNoCheck+0x26>
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   28e3c:	6840      	ldr	r0, [r0, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
   28e3e:	4428      	add	r0, r5
   28e40:	f7fb fe14 	bl	24a6c <memcpy>
    pRing->WrOff = WrOff + NumBytes;
   28e44:	4435      	add	r5, r6
   28e46:	60e5      	str	r5, [r4, #12]
}
   28e48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   28e4c:	6840      	ldr	r0, [r0, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   28e4e:	464a      	mov	r2, r9
   28e50:	4428      	add	r0, r5
   28e52:	f7fb fe0b 	bl	24a6c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
   28e56:	1bed      	subs	r5, r5, r7
   28e58:	4435      	add	r5, r6
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   28e5a:	462a      	mov	r2, r5
   28e5c:	eb08 0109 	add.w	r1, r8, r9
   28e60:	6860      	ldr	r0, [r4, #4]
   28e62:	f7fb fe03 	bl	24a6c <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   28e66:	60e5      	str	r5, [r4, #12]
}
   28e68:	e7ee      	b.n	28e48 <_WriteNoCheck+0x22>

00028e6a <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   28e6a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28e6e:	4606      	mov	r6, r0
   28e70:	4688      	mov	r8, r1
   28e72:	4617      	mov	r7, r2
  WrOff = pRing->WrOff;
   28e74:	68c5      	ldr	r5, [r0, #12]
  NumBytesWritten = 0u;
   28e76:	f04f 0900 	mov.w	r9, #0
   28e7a:	e018      	b.n	28eae <_WriteBlocking+0x44>
      NumBytesToWrite = RdOff - WrOff - 1u;
   28e7c:	1b64      	subs	r4, r4, r5
   28e7e:	1e62      	subs	r2, r4, #1
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   28e80:	68b3      	ldr	r3, [r6, #8]
   28e82:	1b5c      	subs	r4, r3, r5
   28e84:	4294      	cmp	r4, r2
   28e86:	bf28      	it	cs
   28e88:	4614      	movcs	r4, r2
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   28e8a:	42bc      	cmp	r4, r7
   28e8c:	bf28      	it	cs
   28e8e:	463c      	movcs	r4, r7
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   28e90:	6870      	ldr	r0, [r6, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
   28e92:	4622      	mov	r2, r4
   28e94:	4641      	mov	r1, r8
   28e96:	4428      	add	r0, r5
   28e98:	f7fb fde8 	bl	24a6c <memcpy>
    NumBytesWritten += NumBytesToWrite;
   28e9c:	44a1      	add	r9, r4
    pBuffer         += NumBytesToWrite;
   28e9e:	44a0      	add	r8, r4
    NumBytes        -= NumBytesToWrite;
   28ea0:	1b3f      	subs	r7, r7, r4
    WrOff           += NumBytesToWrite;
   28ea2:	4425      	add	r5, r4
    if (WrOff == pRing->SizeOfBuffer) {
   28ea4:	68b3      	ldr	r3, [r6, #8]
   28ea6:	42ab      	cmp	r3, r5
   28ea8:	d009      	beq.n	28ebe <_WriteBlocking+0x54>
    pRing->WrOff = WrOff;
   28eaa:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   28eac:	b14f      	cbz	r7, 28ec2 <_WriteBlocking+0x58>
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   28eae:	6934      	ldr	r4, [r6, #16]
    if (RdOff > WrOff) {
   28eb0:	42a5      	cmp	r5, r4
   28eb2:	d3e3      	bcc.n	28e7c <_WriteBlocking+0x12>
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   28eb4:	68b2      	ldr	r2, [r6, #8]
   28eb6:	1b64      	subs	r4, r4, r5
   28eb8:	4414      	add	r4, r2
   28eba:	1e62      	subs	r2, r4, #1
   28ebc:	e7e0      	b.n	28e80 <_WriteBlocking+0x16>
      WrOff = 0u;
   28ebe:	2500      	movs	r5, #0
   28ec0:	e7f3      	b.n	28eaa <_WriteBlocking+0x40>
}
   28ec2:	4648      	mov	r0, r9
   28ec4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00028ec8 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
   28ec8:	b508      	push	{r3, lr}
  _DoInit();
   28eca:	f7f6 f92f 	bl	1f12c <_DoInit>
}
   28ece:	bd08      	pop	{r3, pc}

00028ed0 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   28ed0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   28ed2:	f7ff fff9 	bl	28ec8 <SEGGER_RTT_Init>

	return 0;
}
   28ed6:	2000      	movs	r0, #0
   28ed8:	bd08      	pop	{r3, pc}

00028eda <z_device_ready>:
	return __device_end - __device_start;
}

bool z_device_ready(const struct device *dev)
{
	return dev->state->initialized && (dev->state->init_res == 0U);
   28eda:	68c3      	ldr	r3, [r0, #12]
   28edc:	8818      	ldrh	r0, [r3, #0]
   28ede:	f3c0 0008 	ubfx	r0, r0, #0, #9
}
   28ee2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   28ee6:	bf14      	ite	ne
   28ee8:	2000      	movne	r0, #0
   28eea:	2001      	moveq	r0, #1
   28eec:	4770      	bx	lr

00028eee <k_heap_init>:
{
   28eee:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
   28ef0:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   28ef4:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   28ef6:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   28ef8:	f7f8 ffd0 	bl	21e9c <sys_heap_init>
}
   28efc:	bd10      	pop	{r4, pc}

00028efe <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   28efe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28f02:	b087      	sub	sp, #28
   28f04:	4680      	mov	r8, r0
   28f06:	9103      	str	r1, [sp, #12]
   28f08:	9204      	str	r2, [sp, #16]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   28f0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   28f0e:	f000 fd7e 	bl	29a0e <sys_clock_timeout_end_calc>
   28f12:	4681      	mov	r9, r0
   28f14:	468b      	mov	fp, r1
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   28f16:	f108 0314 	add.w	r3, r8, #20
   28f1a:	9305      	str	r3, [sp, #20]
	__asm__ volatile(
   28f1c:	f04f 0340 	mov.w	r3, #64	; 0x40
   28f20:	f3ef 8511 	mrs	r5, BASEPRI
   28f24:	f383 8811 	msr	BASEPRI, r3
   28f28:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
   28f2c:	f04f 0a00 	mov.w	sl, #0
	void *ret = NULL;
   28f30:	4654      	mov	r4, sl

	while (ret == NULL) {
   28f32:	e00f      	b.n	28f54 <k_heap_aligned_alloc+0x56>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   28f34:	e9cd 6700 	strd	r6, r7, [sp]
   28f38:	f108 020c 	add.w	r2, r8, #12
   28f3c:	4629      	mov	r1, r5
   28f3e:	9805      	ldr	r0, [sp, #20]
   28f40:	f7f7 fa16 	bl	20370 <z_pend_curr>
   28f44:	f04f 0340 	mov.w	r3, #64	; 0x40
   28f48:	f3ef 8511 	mrs	r5, BASEPRI
   28f4c:	f383 8811 	msr	BASEPRI, r3
   28f50:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
   28f54:	b9b4      	cbnz	r4, 28f84 <k_heap_aligned_alloc+0x86>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   28f56:	9a04      	ldr	r2, [sp, #16]
   28f58:	9903      	ldr	r1, [sp, #12]
   28f5a:	4640      	mov	r0, r8
   28f5c:	f7f8 ff10 	bl	21d80 <sys_heap_aligned_alloc>
   28f60:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
   28f62:	f7f7 feab 	bl	20cbc <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   28f66:	b96c      	cbnz	r4, 28f84 <k_heap_aligned_alloc+0x86>
		    (ret != NULL) || ((end - now) <= 0)) {
   28f68:	ebb9 0600 	subs.w	r6, r9, r0
   28f6c:	eb6b 0701 	sbc.w	r7, fp, r1
   28f70:	2e01      	cmp	r6, #1
   28f72:	f177 0300 	sbcs.w	r3, r7, #0
   28f76:	db05      	blt.n	28f84 <k_heap_aligned_alloc+0x86>
		if (!blocked_alloc) {
   28f78:	f1ba 0f00 	cmp.w	sl, #0
   28f7c:	d1da      	bne.n	28f34 <k_heap_aligned_alloc+0x36>
			blocked_alloc = true;
   28f7e:	f04f 0a01 	mov.w	sl, #1
   28f82:	e7d7      	b.n	28f34 <k_heap_aligned_alloc+0x36>
	__asm__ volatile(
   28f84:	f385 8811 	msr	BASEPRI, r5
   28f88:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   28f8c:	4620      	mov	r0, r4
   28f8e:	b007      	add	sp, #28
   28f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00028f94 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   28f94:	b570      	push	{r4, r5, r6, lr}
   28f96:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   28f98:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
   28f9c:	f04f 0340 	mov.w	r3, #64	; 0x40
   28fa0:	f3ef 8511 	mrs	r5, BASEPRI
   28fa4:	f383 8811 	msr	BASEPRI, r3
   28fa8:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
   28fac:	f7f8 fe86 	bl	21cbc <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   28fb0:	f104 000c 	add.w	r0, r4, #12
   28fb4:	f000 fc63 	bl	2987e <z_unpend_all>
   28fb8:	b920      	cbnz	r0, 28fc4 <k_heap_free+0x30>
	__asm__ volatile(
   28fba:	f385 8811 	msr	BASEPRI, r5
   28fbe:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   28fc2:	bd70      	pop	{r4, r5, r6, pc}
		z_reschedule(&h->lock, key);
   28fc4:	4629      	mov	r1, r5
   28fc6:	4630      	mov	r0, r6
   28fc8:	f7f7 f95c 	bl	20284 <z_reschedule>
   28fcc:	e7f9      	b.n	28fc2 <k_heap_free+0x2e>

00028fce <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   28fce:	68c2      	ldr	r2, [r0, #12]
   28fd0:	6903      	ldr	r3, [r0, #16]
   28fd2:	431a      	orrs	r2, r3
   28fd4:	f012 0203 	ands.w	r2, r2, #3
   28fd8:	d10d      	bne.n	28ff6 <create_free_list+0x28>
	slab->free_list = NULL;
   28fda:	2100      	movs	r1, #0
   28fdc:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   28fde:	e005      	b.n	28fec <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   28fe0:	6941      	ldr	r1, [r0, #20]
   28fe2:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   28fe4:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
   28fe6:	68c1      	ldr	r1, [r0, #12]
   28fe8:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   28fea:	3201      	adds	r2, #1
   28fec:	6881      	ldr	r1, [r0, #8]
   28fee:	4291      	cmp	r1, r2
   28ff0:	d8f6      	bhi.n	28fe0 <create_free_list+0x12>
	return 0;
   28ff2:	2000      	movs	r0, #0
   28ff4:	4770      	bx	lr
		return -EINVAL;
   28ff6:	f06f 0015 	mvn.w	r0, #21
}
   28ffa:	4770      	bx	lr

00028ffc <k_mem_slab_init>:
{
   28ffc:	b510      	push	{r4, lr}
   28ffe:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
   29000:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
   29002:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
   29004:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
   29006:	2300      	movs	r3, #0
   29008:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
   2900a:	f7ff ffe0 	bl	28fce <create_free_list>
	if (rc < 0) {
   2900e:	2800      	cmp	r0, #0
   29010:	db01      	blt.n	29016 <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
   29012:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
   29014:	6064      	str	r4, [r4, #4]
}
   29016:	bd10      	pop	{r4, pc}

00029018 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   29018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2901a:	4604      	mov	r4, r0
   2901c:	460d      	mov	r5, r1
	__asm__ volatile(
   2901e:	f04f 0340 	mov.w	r3, #64	; 0x40
   29022:	f3ef 8611 	mrs	r6, BASEPRI
   29026:	f383 8811 	msr	BASEPRI, r3
   2902a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   2902e:	6943      	ldr	r3, [r0, #20]
   29030:	b163      	cbz	r3, 2904c <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
   29032:	682b      	ldr	r3, [r5, #0]
   29034:	6962      	ldr	r2, [r4, #20]
   29036:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   29038:	682b      	ldr	r3, [r5, #0]
   2903a:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   2903c:	69a3      	ldr	r3, [r4, #24]
   2903e:	3b01      	subs	r3, #1
   29040:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   29042:	f386 8811 	msr	BASEPRI, r6
   29046:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   2904a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2904c:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   29050:	f000 fbea 	bl	29828 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   29054:	2800      	cmp	r0, #0
   29056:	d0ec      	beq.n	29032 <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   29058:	682a      	ldr	r2, [r5, #0]
   2905a:	2100      	movs	r1, #0
   2905c:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   29060:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   29062:	f000 fb6a 	bl	2973a <z_ready_thread>
			z_reschedule(&slab->lock, key);
   29066:	4631      	mov	r1, r6
   29068:	4638      	mov	r0, r7
   2906a:	f7f7 f90b 	bl	20284 <z_reschedule>
			return;
   2906e:	e7ec      	b.n	2904a <k_mem_slab_free+0x32>

00029070 <setup_thread_stack>:
{
   29070:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   29072:	3207      	adds	r2, #7
   29074:	f022 0207 	bic.w	r2, r2, #7
   29078:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   2907c:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   29080:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
	new_thread->stack_info.size = stack_buf_size;
   29084:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	new_thread->stack_info.delta = delta;
   29088:	2200      	movs	r2, #0
   2908a:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
}
   2908e:	18c8      	adds	r0, r1, r3
   29090:	bc10      	pop	{r4}
   29092:	4770      	bx	lr

00029094 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   29094:	f3ef 8005 	mrs	r0, IPSR
}
   29098:	3800      	subs	r0, #0
   2909a:	bf18      	it	ne
   2909c:	2001      	movne	r0, #1
   2909e:	4770      	bx	lr

000290a0 <k_thread_name_get>:
}
   290a0:	3078      	adds	r0, #120	; 0x78
   290a2:	4770      	bx	lr

000290a4 <z_impl_k_thread_start>:
{
   290a4:	b508      	push	{r3, lr}
	z_sched_start(thread);
   290a6:	f7f7 faaf 	bl	20608 <z_sched_start>
}
   290aa:	bd08      	pop	{r3, pc}

000290ac <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
   290ac:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
   290ae:	2400      	movs	r4, #0
   290b0:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   290b2:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   290b4:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   290b6:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   290b8:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   290ba:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   290bc:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   290be:	bc10      	pop	{r4}
   290c0:	4770      	bx	lr

000290c2 <z_impl_k_thread_create>:
{
   290c2:	b5f0      	push	{r4, r5, r6, r7, lr}
   290c4:	b087      	sub	sp, #28
   290c6:	4604      	mov	r4, r0
   290c8:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   290cc:	2500      	movs	r5, #0
   290ce:	9505      	str	r5, [sp, #20]
   290d0:	9d10      	ldr	r5, [sp, #64]	; 0x40
   290d2:	9504      	str	r5, [sp, #16]
   290d4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   290d6:	9503      	str	r5, [sp, #12]
   290d8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   290da:	9502      	str	r5, [sp, #8]
   290dc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   290de:	9501      	str	r5, [sp, #4]
   290e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   290e2:	9500      	str	r5, [sp, #0]
   290e4:	f7f6 fb9e 	bl	1f824 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   290e8:	f1b7 3fff 	cmp.w	r7, #4294967295
   290ec:	bf08      	it	eq
   290ee:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   290f2:	d102      	bne.n	290fa <z_impl_k_thread_create+0x38>
}
   290f4:	4620      	mov	r0, r4
   290f6:	b007      	add	sp, #28
   290f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
   290fa:	4632      	mov	r2, r6
   290fc:	463b      	mov	r3, r7
   290fe:	4620      	mov	r0, r4
   29100:	f7f6 fb7e 	bl	1f800 <schedule_new_thread>
   29104:	e7f6      	b.n	290f4 <z_impl_k_thread_create+0x32>

00029106 <z_pm_save_idle_exit>:

void z_pm_save_idle_exit(int32_t ticks)
{
   29106:	b508      	push	{r3, lr}
	/* Some CPU low power states require notification at the ISR
	 * to allow any operations that needs to be done before kernel
	 * switches task or processes nested interrupts.
	 * This can be simply ignored if not required.
	 */
	pm_system_resume();
   29108:	f7e9 f95e 	bl	123c8 <pm_system_resume>
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
   2910c:	f7fa fa5c 	bl	235c8 <sys_clock_idle_exit>
}
   29110:	bd08      	pop	{r3, pc}

00029112 <idle>:

void idle(void *unused1, void *unused2, void *unused3)
{
   29112:	b508      	push	{r3, lr}
	__asm__ volatile(
   29114:	f04f 0240 	mov.w	r2, #64	; 0x40
   29118:	f3ef 8311 	mrs	r3, BASEPRI
   2911c:	f382 8811 	msr	BASEPRI, r2
   29120:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

		if (IS_ENABLED(CONFIG_PM)) {
			pm_save_idle();
   29124:	f7f6 fc30 	bl	1f988 <pm_save_idle>
   29128:	e7f4      	b.n	29114 <idle+0x2>

0002912a <k_msgq_init>:
	msgq->msg_size = msg_size;
   2912a:	6082      	str	r2, [r0, #8]
	msgq->max_msgs = max_msgs;
   2912c:	60c3      	str	r3, [r0, #12]
	msgq->buffer_start = buffer;
   2912e:	6101      	str	r1, [r0, #16]
	msgq->buffer_end = buffer + (max_msgs * msg_size);
   29130:	fb03 1202 	mla	r2, r3, r2, r1
   29134:	6142      	str	r2, [r0, #20]
	msgq->read_ptr = buffer;
   29136:	6181      	str	r1, [r0, #24]
	msgq->write_ptr = buffer;
   29138:	61c1      	str	r1, [r0, #28]
	msgq->used_msgs = 0;
   2913a:	2300      	movs	r3, #0
   2913c:	6203      	str	r3, [r0, #32]
	msgq->flags = 0;
   2913e:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
	list->head = (sys_dnode_t *)list;
   29142:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   29144:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&msgq->poll_events);
   29146:	f100 0324 	add.w	r3, r0, #36	; 0x24
	list->head = (sys_dnode_t *)list;
   2914a:	6243      	str	r3, [r0, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
   2914c:	6283      	str	r3, [r0, #40]	; 0x28
}
   2914e:	4770      	bx	lr

00029150 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   29150:	4288      	cmp	r0, r1
   29152:	da00      	bge.n	29156 <new_prio_for_inheritance+0x6>
   29154:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   29156:	2900      	cmp	r1, #0
   29158:	db01      	blt.n	2915e <new_prio_for_inheritance+0xe>
   2915a:	4608      	mov	r0, r1
   2915c:	4770      	bx	lr
   2915e:	2000      	movs	r0, #0
}
   29160:	4770      	bx	lr

00029162 <adjust_owner_prio>:
{
   29162:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   29164:	6880      	ldr	r0, [r0, #8]
   29166:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2916a:	428b      	cmp	r3, r1
   2916c:	d101      	bne.n	29172 <adjust_owner_prio+0x10>
	return false;
   2916e:	2000      	movs	r0, #0
}
   29170:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   29172:	f7f7 fa67 	bl	20644 <z_set_prio>
   29176:	e7fb      	b.n	29170 <adjust_owner_prio+0xe>

00029178 <z_impl_k_mutex_init>:
{
   29178:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2917a:	2000      	movs	r0, #0
   2917c:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   2917e:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   29180:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   29182:	605b      	str	r3, [r3, #4]
}
   29184:	4770      	bx	lr

00029186 <prepare_thread_to_run>:
{
   29186:	b508      	push	{r3, lr}
   29188:	2200      	movs	r2, #0
   2918a:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
   2918e:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
   29190:	f000 fad3 	bl	2973a <z_ready_thread>
}
   29194:	bd08      	pop	{r3, pc}

00029196 <queue_insert>:
{
   29196:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2919a:	4605      	mov	r5, r0
   2919c:	460e      	mov	r6, r1
   2919e:	4614      	mov	r4, r2
   291a0:	461f      	mov	r7, r3
   291a2:	f89d 2020 	ldrb.w	r2, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   291a6:	f100 0808 	add.w	r8, r0, #8
   291aa:	f04f 0340 	mov.w	r3, #64	; 0x40
   291ae:	f3ef 8911 	mrs	r9, BASEPRI
   291b2:	f383 8811 	msr	BASEPRI, r3
   291b6:	f3bf 8f6f 	isb	sy
	if (is_append) {
   291ba:	b102      	cbz	r2, 291be <queue_insert+0x28>
	return list->tail;
   291bc:	6846      	ldr	r6, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   291be:	4640      	mov	r0, r8
   291c0:	f000 fb32 	bl	29828 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   291c4:	b9a0      	cbnz	r0, 291f0 <queue_insert+0x5a>
	if (alloc) {
   291c6:	b9e7      	cbnz	r7, 29202 <queue_insert+0x6c>
	node->next_and_flags = flags;
   291c8:	2300      	movs	r3, #0
   291ca:	6023      	str	r3, [r4, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   291cc:	b356      	cbz	r6, 29224 <queue_insert+0x8e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   291ce:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   291d0:	f033 0303 	bics.w	r3, r3, #3
   291d4:	d134      	bne.n	29240 <queue_insert+0xaa>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   291d6:	6823      	ldr	r3, [r4, #0]
   291d8:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   291dc:	6023      	str	r3, [r4, #0]
	return list->tail;
   291de:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   291e0:	b35a      	cbz	r2, 2923a <queue_insert+0xa4>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   291e2:	6813      	ldr	r3, [r2, #0]
   291e4:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   291e8:	4323      	orrs	r3, r4
   291ea:	6013      	str	r3, [r2, #0]
	list->tail = node;
   291ec:	606c      	str	r4, [r5, #4]
}
   291ee:	e031      	b.n	29254 <queue_insert+0xbe>
		prepare_thread_to_run(first_pending_thread, data);
   291f0:	4621      	mov	r1, r4
   291f2:	f7ff ffc8 	bl	29186 <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
   291f6:	4649      	mov	r1, r9
   291f8:	4640      	mov	r0, r8
   291fa:	f7f7 f843 	bl	20284 <z_reschedule>
		return 0;
   291fe:	2000      	movs	r0, #0
   29200:	e032      	b.n	29268 <queue_insert+0xd2>
	return z_thread_aligned_alloc(0, size);
   29202:	2108      	movs	r1, #8
   29204:	2000      	movs	r0, #0
   29206:	f7f8 f8df 	bl	213c8 <z_thread_aligned_alloc>
		if (anode == NULL) {
   2920a:	b120      	cbz	r0, 29216 <queue_insert+0x80>
		anode->data = data;
   2920c:	6044      	str	r4, [r0, #4]
	node->next_and_flags = flags;
   2920e:	2201      	movs	r2, #1
   29210:	6002      	str	r2, [r0, #0]
		data = anode;
   29212:	4604      	mov	r4, r0
   29214:	e7da      	b.n	291cc <queue_insert+0x36>
	__asm__ volatile(
   29216:	f389 8811 	msr	BASEPRI, r9
   2921a:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2921e:	f06f 000b 	mvn.w	r0, #11
   29222:	e021      	b.n	29268 <queue_insert+0xd2>
	return list->head;
   29224:	682a      	ldr	r2, [r5, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   29226:	6823      	ldr	r3, [r4, #0]
   29228:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2922c:	4313      	orrs	r3, r2
   2922e:	6023      	str	r3, [r4, #0]
	list->head = node;
   29230:	602c      	str	r4, [r5, #0]
	return list->tail;
   29232:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
   29234:	b973      	cbnz	r3, 29254 <queue_insert+0xbe>
	list->tail = node;
   29236:	606c      	str	r4, [r5, #4]
}
   29238:	e00c      	b.n	29254 <queue_insert+0xbe>
	list->tail = node;
   2923a:	606c      	str	r4, [r5, #4]
	list->head = node;
   2923c:	602c      	str	r4, [r5, #0]
}
   2923e:	e009      	b.n	29254 <queue_insert+0xbe>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   29240:	6822      	ldr	r2, [r4, #0]
   29242:	f002 0203 	and.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   29246:	4313      	orrs	r3, r2
   29248:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2924a:	6833      	ldr	r3, [r6, #0]
   2924c:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   29250:	431c      	orrs	r4, r3
   29252:	6034      	str	r4, [r6, #0]
	z_handle_obj_poll_events(&queue->poll_events, state);
   29254:	2104      	movs	r1, #4
   29256:	f105 0010 	add.w	r0, r5, #16
   2925a:	f000 fcb8 	bl	29bce <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   2925e:	4649      	mov	r1, r9
   29260:	4640      	mov	r0, r8
   29262:	f7f7 f80f 	bl	20284 <z_reschedule>
	return 0;
   29266:	2000      	movs	r0, #0
}
   29268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002926c <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2926c:	b160      	cbz	r0, 29288 <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2926e:	6803      	ldr	r3, [r0, #0]
   29270:	f013 0f03 	tst.w	r3, #3
   29274:	d008      	beq.n	29288 <z_queue_node_peek+0x1c>
{
   29276:	b510      	push	{r4, lr}
		ret = anode->data;
   29278:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2927a:	b909      	cbnz	r1, 29280 <z_queue_node_peek+0x14>
		ret = anode->data;
   2927c:	4620      	mov	r0, r4
}
   2927e:	bd10      	pop	{r4, pc}
			k_free(anode);
   29280:	f000 fccf 	bl	29c22 <k_free>
		ret = anode->data;
   29284:	4620      	mov	r0, r4
   29286:	e7fa      	b.n	2927e <z_queue_node_peek+0x12>
}
   29288:	4770      	bx	lr

0002928a <z_impl_k_queue_init>:
	list->head = NULL;
   2928a:	2300      	movs	r3, #0
   2928c:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   2928e:	6043      	str	r3, [r0, #4]
   29290:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   29294:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   29296:	60c3      	str	r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   29298:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   2929c:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   2929e:	6143      	str	r3, [r0, #20]
}
   292a0:	4770      	bx	lr

000292a2 <k_queue_append>:
{
   292a2:	b500      	push	{lr}
   292a4:	b083      	sub	sp, #12
   292a6:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   292a8:	2301      	movs	r3, #1
   292aa:	9300      	str	r3, [sp, #0]
   292ac:	2300      	movs	r3, #0
   292ae:	4619      	mov	r1, r3
   292b0:	f7ff ff71 	bl	29196 <queue_insert>
}
   292b4:	b003      	add	sp, #12
   292b6:	f85d fb04 	ldr.w	pc, [sp], #4

000292ba <k_queue_prepend>:
{
   292ba:	b500      	push	{lr}
   292bc:	b083      	sub	sp, #12
   292be:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   292c0:	2100      	movs	r1, #0
   292c2:	9100      	str	r1, [sp, #0]
   292c4:	460b      	mov	r3, r1
   292c6:	f7ff ff66 	bl	29196 <queue_insert>
}
   292ca:	b003      	add	sp, #12
   292cc:	f85d fb04 	ldr.w	pc, [sp], #4

000292d0 <k_queue_append_list>:
	CHECKIF(head == NULL || tail == NULL) {
   292d0:	b3a1      	cbz	r1, 2933c <k_queue_append_list+0x6c>
{
   292d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   292d6:	4606      	mov	r6, r0
   292d8:	4617      	mov	r7, r2
   292da:	460c      	mov	r4, r1
	CHECKIF(head == NULL || tail == NULL) {
   292dc:	b38a      	cbz	r2, 29342 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   292de:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   292e2:	f04f 0340 	mov.w	r3, #64	; 0x40
   292e6:	f3ef 8811 	mrs	r8, BASEPRI
   292ea:	f383 8811 	msr	BASEPRI, r3
   292ee:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   292f2:	4628      	mov	r0, r5
   292f4:	f000 fa98 	bl	29828 <z_unpend_first_thread>
   292f8:	e006      	b.n	29308 <k_queue_append_list+0x38>
		prepare_thread_to_run(thread, head);
   292fa:	4621      	mov	r1, r4
   292fc:	f7ff ff43 	bl	29186 <prepare_thread_to_run>
		head = *(void **)head;
   29300:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   29302:	4628      	mov	r0, r5
   29304:	f000 fa90 	bl	29828 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   29308:	b10c      	cbz	r4, 2930e <k_queue_append_list+0x3e>
   2930a:	2800      	cmp	r0, #0
   2930c:	d1f5      	bne.n	292fa <k_queue_append_list+0x2a>
	if (head != NULL) {
   2930e:	b13c      	cbz	r4, 29320 <k_queue_append_list+0x50>
	return list->tail;
   29310:	6872      	ldr	r2, [r6, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   29312:	b18a      	cbz	r2, 29338 <k_queue_append_list+0x68>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   29314:	6813      	ldr	r3, [r2, #0]
   29316:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2931a:	431c      	orrs	r4, r3
   2931c:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2931e:	6077      	str	r7, [r6, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   29320:	2104      	movs	r1, #4
   29322:	f106 0010 	add.w	r0, r6, #16
   29326:	f000 fc52 	bl	29bce <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   2932a:	4641      	mov	r1, r8
   2932c:	4628      	mov	r0, r5
   2932e:	f7f6 ffa9 	bl	20284 <z_reschedule>
	return 0;
   29332:	2000      	movs	r0, #0
}
   29334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	list->head = node;
   29338:	6034      	str	r4, [r6, #0]
}
   2933a:	e7f0      	b.n	2931e <k_queue_append_list+0x4e>
		return -EINVAL;
   2933c:	f06f 0015 	mvn.w	r0, #21
}
   29340:	4770      	bx	lr
		return -EINVAL;
   29342:	f06f 0015 	mvn.w	r0, #21
   29346:	e7f5      	b.n	29334 <k_queue_append_list+0x64>

00029348 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   29348:	b15a      	cbz	r2, 29362 <z_impl_k_sem_init+0x1a>
   2934a:	428a      	cmp	r2, r1
   2934c:	d30c      	bcc.n	29368 <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
   2934e:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   29350:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   29352:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   29354:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   29356:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   2935a:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   2935c:	6143      	str	r3, [r0, #20]
	return 0;
   2935e:	2000      	movs	r0, #0
   29360:	4770      	bx	lr
		return -EINVAL;
   29362:	f06f 0015 	mvn.w	r0, #21
   29366:	4770      	bx	lr
   29368:	f06f 0015 	mvn.w	r0, #21
}
   2936c:	4770      	bx	lr

0002936e <cancel_async_locked>:
{
   2936e:	4603      	mov	r3, r0
	return (*flagp & BIT(bit)) != 0U;
   29370:	68c2      	ldr	r2, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   29372:	f012 0f02 	tst.w	r2, #2
   29376:	d009      	beq.n	2938c <cancel_async_locked+0x1e>
	return *flagp;
   29378:	68c2      	ldr	r2, [r0, #12]
	if (ret != 0) {
   2937a:	f012 000f 	ands.w	r0, r2, #15
   2937e:	d037      	beq.n	293f0 <cancel_async_locked+0x82>
	*flagp |= BIT(bit);
   29380:	f042 0202 	orr.w	r2, r2, #2
   29384:	60da      	str	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   29386:	f002 000f 	and.w	r0, r2, #15
	return ret;
   2938a:	4770      	bx	lr
{
   2938c:	b410      	push	{r4}
		queue_remove_locked(work->queue, work);
   2938e:	6884      	ldr	r4, [r0, #8]
	*flagp &= ~BIT(bit);
   29390:	f022 0104 	bic.w	r1, r2, #4
   29394:	60c1      	str	r1, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   29396:	f012 0f04 	tst.w	r2, #4
   2939a:	d011      	beq.n	293c0 <cancel_async_locked+0x52>
	return list->head;
   2939c:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   293a0:	2100      	movs	r1, #0
   293a2:	b16a      	cbz	r2, 293c0 <cancel_async_locked+0x52>
   293a4:	4290      	cmp	r0, r2
   293a6:	d002      	beq.n	293ae <cancel_async_locked+0x40>
   293a8:	4611      	mov	r1, r2
   293aa:	6812      	ldr	r2, [r2, #0]
   293ac:	e7f9      	b.n	293a2 <cancel_async_locked+0x34>
Z_GENLIST_REMOVE(slist, snode)
   293ae:	b191      	cbz	r1, 293d6 <cancel_async_locked+0x68>
	return node->next;
   293b0:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   293b2:	600a      	str	r2, [r1, #0]
	return list->tail;
   293b4:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
Z_GENLIST_REMOVE(slist, snode)
   293b8:	4293      	cmp	r3, r2
   293ba:	d016      	beq.n	293ea <cancel_async_locked+0x7c>
	parent->next = child;
   293bc:	2200      	movs	r2, #0
   293be:	601a      	str	r2, [r3, #0]
	return *flagp;
   293c0:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   293c2:	f012 000f 	ands.w	r0, r2, #15
   293c6:	d004      	beq.n	293d2 <cancel_async_locked+0x64>
	*flagp |= BIT(bit);
   293c8:	f042 0202 	orr.w	r2, r2, #2
   293cc:	60da      	str	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   293ce:	f002 000f 	and.w	r0, r2, #15
}
   293d2:	bc10      	pop	{r4}
   293d4:	4770      	bx	lr
	return node->next;
   293d6:	681a      	ldr	r2, [r3, #0]
	list->head = node;
   293d8:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
	return list->tail;
   293dc:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
Z_GENLIST_REMOVE(slist, snode)
   293e0:	428b      	cmp	r3, r1
   293e2:	d1eb      	bne.n	293bc <cancel_async_locked+0x4e>
	list->tail = node;
   293e4:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
}
   293e8:	e7e8      	b.n	293bc <cancel_async_locked+0x4e>
	list->tail = node;
   293ea:	f8c4 10bc 	str.w	r1, [r4, #188]	; 0xbc
}
   293ee:	e7e5      	b.n	293bc <cancel_async_locked+0x4e>
   293f0:	4770      	bx	lr

000293f2 <work_timeout>:
{
   293f2:	b510      	push	{r4, lr}
   293f4:	b082      	sub	sp, #8
   293f6:	4603      	mov	r3, r0
   293f8:	f04f 0240 	mov.w	r2, #64	; 0x40
   293fc:	f3ef 8411 	mrs	r4, BASEPRI
   29400:	f382 8811 	msr	BASEPRI, r2
   29404:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   29408:	2200      	movs	r2, #0
   2940a:	9201      	str	r2, [sp, #4]
	return (*flagp & BIT(bit)) != 0U;
   2940c:	f850 2c04 	ldr.w	r2, [r0, #-4]
	*flagp &= ~BIT(bit);
   29410:	f022 0108 	bic.w	r1, r2, #8
   29414:	f840 1c04 	str.w	r1, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   29418:	f012 0f08 	tst.w	r2, #8
   2941c:	d105      	bne.n	2942a <work_timeout+0x38>
	__asm__ volatile(
   2941e:	f384 8811 	msr	BASEPRI, r4
   29422:	f3bf 8f6f 	isb	sy
}
   29426:	b002      	add	sp, #8
   29428:	bd10      	pop	{r4, pc}
   2942a:	3810      	subs	r0, #16
		queue = dw->queue;
   2942c:	699b      	ldr	r3, [r3, #24]
   2942e:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   29430:	a901      	add	r1, sp, #4
   29432:	f7f6 fd11 	bl	1fe58 <submit_to_queue_locked>
   29436:	e7f2      	b.n	2941e <work_timeout+0x2c>

00029438 <cancel_delayable_async_locked>:
{
   29438:	b510      	push	{r4, lr}
   2943a:	4604      	mov	r4, r0
	return (*flagp & BIT(bit)) != 0U;
   2943c:	68c3      	ldr	r3, [r0, #12]
	*flagp &= ~BIT(bit);
   2943e:	f023 0208 	bic.w	r2, r3, #8
   29442:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   29444:	f013 0f08 	tst.w	r3, #8
   29448:	d103      	bne.n	29452 <cancel_delayable_async_locked+0x1a>
	return cancel_async_locked(&dwork->work);
   2944a:	4620      	mov	r0, r4
   2944c:	f7ff ff8f 	bl	2936e <cancel_async_locked>
}
   29450:	bd10      	pop	{r4, pc}
		z_abort_timeout(&dwork->timeout);
   29452:	3010      	adds	r0, #16
   29454:	f000 fa72 	bl	2993c <z_abort_timeout>
		ret = true;
   29458:	e7f7      	b.n	2944a <cancel_delayable_async_locked+0x12>

0002945a <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2945a:	2300      	movs	r3, #0
   2945c:	6003      	str	r3, [r0, #0]
   2945e:	6083      	str	r3, [r0, #8]
   29460:	60c3      	str	r3, [r0, #12]
   29462:	6041      	str	r1, [r0, #4]
}
   29464:	4770      	bx	lr

00029466 <k_work_submit_to_queue>:
{
   29466:	b530      	push	{r4, r5, lr}
   29468:	b083      	sub	sp, #12
   2946a:	9001      	str	r0, [sp, #4]
   2946c:	4608      	mov	r0, r1
	__asm__ volatile(
   2946e:	f04f 0340 	mov.w	r3, #64	; 0x40
   29472:	f3ef 8511 	mrs	r5, BASEPRI
   29476:	f383 8811 	msr	BASEPRI, r3
   2947a:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   2947e:	a901      	add	r1, sp, #4
   29480:	f7f6 fcea 	bl	1fe58 <submit_to_queue_locked>
   29484:	4604      	mov	r4, r0
	__asm__ volatile(
   29486:	f385 8811 	msr	BASEPRI, r5
   2948a:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   2948e:	2800      	cmp	r0, #0
   29490:	dc02      	bgt.n	29498 <k_work_submit_to_queue+0x32>
}
   29492:	4620      	mov	r0, r4
   29494:	b003      	add	sp, #12
   29496:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_is_preempt_thread();
   29498:	f7f7 fa58 	bl	2094c <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   2949c:	2800      	cmp	r0, #0
   2949e:	d0f8      	beq.n	29492 <k_work_submit_to_queue+0x2c>
	z_impl_k_yield();
   294a0:	f7f7 f98c 	bl	207bc <z_impl_k_yield>
	return ret;
   294a4:	e7f5      	b.n	29492 <k_work_submit_to_queue+0x2c>

000294a6 <k_work_init_delayable>:
{
   294a6:	b538      	push	{r3, r4, r5, lr}
   294a8:	4604      	mov	r4, r0
   294aa:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   294ac:	2230      	movs	r2, #48	; 0x30
   294ae:	2100      	movs	r1, #0
   294b0:	f7fb fb00 	bl	24ab4 <memset>
   294b4:	6065      	str	r5, [r4, #4]
   294b6:	f44f 7380 	mov.w	r3, #256	; 0x100
   294ba:	60e3      	str	r3, [r4, #12]
}
   294bc:	bd38      	pop	{r3, r4, r5, pc}

000294be <k_work_schedule_for_queue>:
{
   294be:	b510      	push	{r4, lr}
   294c0:	b082      	sub	sp, #8
   294c2:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   294c4:	f04f 0040 	mov.w	r0, #64	; 0x40
   294c8:	f3ef 8411 	mrs	r4, BASEPRI
   294cc:	f380 8811 	msr	BASEPRI, r0
   294d0:	f3bf 8f6f 	isb	sy
	return *flagp;
   294d4:	68c8      	ldr	r0, [r1, #12]
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   294d6:	f010 0f0e 	tst.w	r0, #14
   294da:	d006      	beq.n	294ea <k_work_schedule_for_queue+0x2c>
	int ret = 0;
   294dc:	2000      	movs	r0, #0
	__asm__ volatile(
   294de:	f384 8811 	msr	BASEPRI, r4
   294e2:	f3bf 8f6f 	isb	sy
}
   294e6:	b002      	add	sp, #8
   294e8:	bd10      	pop	{r4, pc}
		ret = schedule_for_queue_locked(&queue, dwork, delay);
   294ea:	a801      	add	r0, sp, #4
   294ec:	f7f6 fdf6 	bl	200dc <schedule_for_queue_locked>
   294f0:	e7f5      	b.n	294de <k_work_schedule_for_queue+0x20>

000294f2 <k_work_reschedule_for_queue>:
{
   294f2:	b5f0      	push	{r4, r5, r6, r7, lr}
   294f4:	b083      	sub	sp, #12
   294f6:	9001      	str	r0, [sp, #4]
   294f8:	460c      	mov	r4, r1
   294fa:	4616      	mov	r6, r2
   294fc:	461d      	mov	r5, r3
	__asm__ volatile(
   294fe:	f04f 0340 	mov.w	r3, #64	; 0x40
   29502:	f3ef 8711 	mrs	r7, BASEPRI
   29506:	f383 8811 	msr	BASEPRI, r3
   2950a:	f3bf 8f6f 	isb	sy
	return (*flagp & BIT(bit)) != 0U;
   2950e:	68cb      	ldr	r3, [r1, #12]
	*flagp &= ~BIT(bit);
   29510:	f023 0208 	bic.w	r2, r3, #8
   29514:	60ca      	str	r2, [r1, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   29516:	f013 0f08 	tst.w	r3, #8
   2951a:	d10b      	bne.n	29534 <k_work_reschedule_for_queue+0x42>
	ret = schedule_for_queue_locked(&queue, dwork, delay);
   2951c:	4632      	mov	r2, r6
   2951e:	462b      	mov	r3, r5
   29520:	4621      	mov	r1, r4
   29522:	a801      	add	r0, sp, #4
   29524:	f7f6 fdda 	bl	200dc <schedule_for_queue_locked>
	__asm__ volatile(
   29528:	f387 8811 	msr	BASEPRI, r7
   2952c:	f3bf 8f6f 	isb	sy
}
   29530:	b003      	add	sp, #12
   29532:	bdf0      	pop	{r4, r5, r6, r7, pc}
		z_abort_timeout(&dwork->timeout);
   29534:	f101 0010 	add.w	r0, r1, #16
   29538:	f000 fa00 	bl	2993c <z_abort_timeout>
		ret = true;
   2953c:	e7ee      	b.n	2951c <k_work_reschedule_for_queue+0x2a>

0002953e <k_work_cancel_delayable>:

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   2953e:	b510      	push	{r4, lr}
	__asm__ volatile(
   29540:	f04f 0340 	mov.w	r3, #64	; 0x40
   29544:	f3ef 8411 	mrs	r4, BASEPRI
   29548:	f383 8811 	msr	BASEPRI, r3
   2954c:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(dwork != NULL);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable, dwork);

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = cancel_delayable_async_locked(dwork);
   29550:	f7ff ff72 	bl	29438 <cancel_delayable_async_locked>
	__asm__ volatile(
   29554:	f384 8811 	msr	BASEPRI, r4
   29558:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   2955c:	bd10      	pop	{r4, pc}

0002955e <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   2955e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29560:	460f      	mov	r7, r1
	__asm__ volatile(
   29562:	f04f 0340 	mov.w	r3, #64	; 0x40
   29566:	f3ef 8611 	mrs	r6, BASEPRI
   2956a:	f383 8811 	msr	BASEPRI, r3
   2956e:	f3bf 8f6f 	isb	sy
   29572:	f3bf 8f5b 	dmb	ish
   29576:	68c3      	ldr	r3, [r0, #12]
   29578:	f3bf 8f5b 	dmb	ish
	return atomic_get(&dwork->work.flags) & K_WORK_MASK;
   2957c:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   29580:	2b00      	cmp	r3, #0
   29582:	bf14      	ite	ne
   29584:	2501      	movne	r5, #1
   29586:	2500      	moveq	r5, #0
	bool need_wait = false;

	if (pending) {
   29588:	d107      	bne.n	2959a <k_work_cancel_delayable_sync+0x3c>
	bool need_wait = false;
   2958a:	2000      	movs	r0, #0
	__asm__ volatile(
   2958c:	f386 8811 	msr	BASEPRI, r6
   29590:	f3bf 8f6f 	isb	sy
		need_wait = cancel_sync_locked(&dwork->work, canceller);
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   29594:	b948      	cbnz	r0, 295aa <k_work_cancel_delayable_sync+0x4c>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   29596:	4628      	mov	r0, r5
   29598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2959a:	4604      	mov	r4, r0
		(void)cancel_delayable_async_locked(dwork);
   2959c:	f7ff ff4c 	bl	29438 <cancel_delayable_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   295a0:	4639      	mov	r1, r7
   295a2:	4620      	mov	r0, r4
   295a4:	f7f6 fd00 	bl	1ffa8 <cancel_sync_locked>
   295a8:	e7f0      	b.n	2958c <k_work_cancel_delayable_sync+0x2e>
		k_sem_take(&canceller->sem, K_FOREVER);
   295aa:	f107 0008 	add.w	r0, r7, #8
	return z_impl_k_sem_take(sem, timeout);
   295ae:	f04f 32ff 	mov.w	r2, #4294967295
   295b2:	f04f 33ff 	mov.w	r3, #4294967295
   295b6:	f7f6 fbe7 	bl	1fd88 <z_impl_k_sem_take>
   295ba:	e7ec      	b.n	29596 <k_work_cancel_delayable_sync+0x38>

000295bc <thread_active_elsewhere>:
}
   295bc:	2000      	movs	r0, #0
   295be:	4770      	bx	lr

000295c0 <pended_on>:
}
   295c0:	6880      	ldr	r0, [r0, #8]
   295c2:	4770      	bx	lr

000295c4 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   295c4:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   295c8:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   295cc:	4283      	cmp	r3, r0
   295ce:	d001      	beq.n	295d4 <z_sched_prio_cmp+0x10>
		return b2 - b1;
   295d0:	1ac0      	subs	r0, r0, r3
   295d2:	4770      	bx	lr
	return 0;
   295d4:	2000      	movs	r0, #0
}
   295d6:	4770      	bx	lr

000295d8 <z_unpend_thread_no_timeout>:
{
   295d8:	b538      	push	{r3, r4, r5, lr}
   295da:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   295dc:	2300      	movs	r3, #0
	__asm__ volatile(
   295de:	f04f 0240 	mov.w	r2, #64	; 0x40
   295e2:	f3ef 8511 	mrs	r5, BASEPRI
   295e6:	f382 8811 	msr	BASEPRI, r2
   295ea:	f3bf 8f6f 	isb	sy
   295ee:	b98b      	cbnz	r3, 29614 <z_unpend_thread_no_timeout+0x3c>
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   295f0:	4620      	mov	r0, r4
   295f2:	f7ff ffe5 	bl	295c0 <pended_on>
   295f6:	4621      	mov	r1, r4
   295f8:	f000 f822 	bl	29640 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   295fc:	7b63      	ldrb	r3, [r4, #13]
   295fe:	f023 0302 	bic.w	r3, r3, #2
   29602:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   29604:	2300      	movs	r3, #0
   29606:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   29608:	f385 8811 	msr	BASEPRI, r5
   2960c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   29610:	2301      	movs	r3, #1
   29612:	e7ec      	b.n	295ee <z_unpend_thread_no_timeout+0x16>
}
   29614:	bd38      	pop	{r3, r4, r5, pc}

00029616 <z_reschedule_irqlock>:
{
   29616:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   29618:	4603      	mov	r3, r0
   2961a:	b920      	cbnz	r0, 29626 <z_reschedule_irqlock+0x10>
   2961c:	f3ef 8205 	mrs	r2, IPSR
   29620:	b942      	cbnz	r2, 29634 <z_reschedule_irqlock+0x1e>
   29622:	2201      	movs	r2, #1
   29624:	e000      	b.n	29628 <z_reschedule_irqlock+0x12>
   29626:	2200      	movs	r2, #0
	if (resched(key)) {
   29628:	b932      	cbnz	r2, 29638 <z_reschedule_irqlock+0x22>
   2962a:	f383 8811 	msr	BASEPRI, r3
   2962e:	f3bf 8f6f 	isb	sy
}
   29632:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   29634:	2200      	movs	r2, #0
   29636:	e7f7      	b.n	29628 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
   29638:	4618      	mov	r0, r3
   2963a:	f7e9 feeb 	bl	13414 <arch_swap>
	return ret;
   2963e:	e7f8      	b.n	29632 <z_reschedule_irqlock+0x1c>

00029640 <z_priq_dumb_remove>:
	sys_dnode_t *const prev = node->prev;
   29640:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   29642:	680b      	ldr	r3, [r1, #0]
	prev->next = next;
   29644:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   29646:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   29648:	2300      	movs	r3, #0
   2964a:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   2964c:	604b      	str	r3, [r1, #4]
}
   2964e:	4770      	bx	lr

00029650 <z_unpend_thread>:
{
   29650:	b538      	push	{r3, r4, r5, lr}
   29652:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   29654:	2300      	movs	r3, #0
	__asm__ volatile(
   29656:	f04f 0240 	mov.w	r2, #64	; 0x40
   2965a:	f3ef 8511 	mrs	r5, BASEPRI
   2965e:	f382 8811 	msr	BASEPRI, r2
   29662:	f3bf 8f6f 	isb	sy
   29666:	b98b      	cbnz	r3, 2968c <z_unpend_thread+0x3c>
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   29668:	4620      	mov	r0, r4
   2966a:	f7ff ffa9 	bl	295c0 <pended_on>
   2966e:	4621      	mov	r1, r4
   29670:	f7ff ffe6 	bl	29640 <z_priq_dumb_remove>
   29674:	7b63      	ldrb	r3, [r4, #13]
   29676:	f023 0302 	bic.w	r3, r3, #2
   2967a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2967c:	2300      	movs	r3, #0
   2967e:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   29680:	f385 8811 	msr	BASEPRI, r5
   29684:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   29688:	2301      	movs	r3, #1
   2968a:	e7ec      	b.n	29666 <z_unpend_thread+0x16>
	return z_abort_timeout(&thread->base.timeout);
   2968c:	f104 0018 	add.w	r0, r4, #24
   29690:	f000 f954 	bl	2993c <z_abort_timeout>
}
   29694:	bd38      	pop	{r3, r4, r5, pc}

00029696 <z_priq_dumb_best>:
{
   29696:	4603      	mov	r3, r0
	return list->head == list;
   29698:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2969a:	4283      	cmp	r3, r0
   2969c:	d000      	beq.n	296a0 <z_priq_dumb_best+0xa>
}
   2969e:	4770      	bx	lr
	struct k_thread *thread = NULL;
   296a0:	2000      	movs	r0, #0
	return thread;
   296a2:	e7fc      	b.n	2969e <z_priq_dumb_best+0x8>

000296a4 <add_to_waitq_locked>:
{
   296a4:	b570      	push	{r4, r5, r6, lr}
   296a6:	4605      	mov	r5, r0
   296a8:	460e      	mov	r6, r1
	unready_thread(thread);
   296aa:	f7f6 fe45 	bl	20338 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   296ae:	7b6b      	ldrb	r3, [r5, #13]
   296b0:	f043 0302 	orr.w	r3, r3, #2
   296b4:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   296b6:	b1b6      	cbz	r6, 296e6 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
   296b8:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   296ba:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   296bc:	42a6      	cmp	r6, r4
   296be:	d019      	beq.n	296f4 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   296c0:	b164      	cbz	r4, 296dc <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
   296c2:	4621      	mov	r1, r4
   296c4:	4628      	mov	r0, r5
   296c6:	f7ff ff7d 	bl	295c4 <z_sched_prio_cmp>
   296ca:	2800      	cmp	r0, #0
   296cc:	dc0c      	bgt.n	296e8 <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   296ce:	b12c      	cbz	r4, 296dc <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
   296d0:	6873      	ldr	r3, [r6, #4]
   296d2:	429c      	cmp	r4, r3
   296d4:	d002      	beq.n	296dc <add_to_waitq_locked+0x38>
   296d6:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   296d8:	2c00      	cmp	r4, #0
   296da:	d1f1      	bne.n	296c0 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
   296dc:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   296de:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   296e0:	606b      	str	r3, [r5, #4]
	tail->next = node;
   296e2:	601d      	str	r5, [r3, #0]
	list->tail = node;
   296e4:	6075      	str	r5, [r6, #4]
}
   296e6:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
   296e8:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   296ea:	606b      	str	r3, [r5, #4]
	node->next = successor;
   296ec:	602c      	str	r4, [r5, #0]
	prev->next = node;
   296ee:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   296f0:	6065      	str	r5, [r4, #4]
}
   296f2:	e7f8      	b.n	296e6 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   296f4:	2400      	movs	r4, #0
   296f6:	e7e3      	b.n	296c0 <add_to_waitq_locked+0x1c>

000296f8 <pend>:
{
   296f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   296fc:	4605      	mov	r5, r0
   296fe:	460f      	mov	r7, r1
   29700:	4691      	mov	r9, r2
   29702:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
   29704:	2400      	movs	r4, #0
	__asm__ volatile(
   29706:	f04f 0340 	mov.w	r3, #64	; 0x40
   2970a:	f3ef 8611 	mrs	r6, BASEPRI
   2970e:	f383 8811 	msr	BASEPRI, r3
   29712:	f3bf 8f6f 	isb	sy
   29716:	b94c      	cbnz	r4, 2972c <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
   29718:	4639      	mov	r1, r7
   2971a:	4628      	mov	r0, r5
   2971c:	f7ff ffc2 	bl	296a4 <add_to_waitq_locked>
	__asm__ volatile(
   29720:	f386 8811 	msr	BASEPRI, r6
   29724:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   29728:	2401      	movs	r4, #1
   2972a:	e7f4      	b.n	29716 <pend+0x1e>
	add_thread_timeout(thread, timeout);
   2972c:	464a      	mov	r2, r9
   2972e:	4643      	mov	r3, r8
   29730:	4628      	mov	r0, r5
   29732:	f7f6 fd45 	bl	201c0 <add_thread_timeout>
}
   29736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002973a <z_ready_thread>:
{
   2973a:	b538      	push	{r3, r4, r5, lr}
   2973c:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   2973e:	2300      	movs	r3, #0
	__asm__ volatile(
   29740:	f04f 0240 	mov.w	r2, #64	; 0x40
   29744:	f3ef 8511 	mrs	r5, BASEPRI
   29748:	f382 8811 	msr	BASEPRI, r2
   2974c:	f3bf 8f6f 	isb	sy
   29750:	e007      	b.n	29762 <z_ready_thread+0x28>
			ready_thread(thread);
   29752:	4620      	mov	r0, r4
   29754:	f7f6 ff18 	bl	20588 <ready_thread>
	__asm__ volatile(
   29758:	f385 8811 	msr	BASEPRI, r5
   2975c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   29760:	2301      	movs	r3, #1
   29762:	b92b      	cbnz	r3, 29770 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
   29764:	4620      	mov	r0, r4
   29766:	f7ff ff29 	bl	295bc <thread_active_elsewhere>
   2976a:	2800      	cmp	r0, #0
   2976c:	d1f4      	bne.n	29758 <z_ready_thread+0x1e>
   2976e:	e7f0      	b.n	29752 <z_ready_thread+0x18>
}
   29770:	bd38      	pop	{r3, r4, r5, pc}

00029772 <z_thread_timeout>:
{
   29772:	b570      	push	{r4, r5, r6, lr}
   29774:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   29776:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
   2977a:	2300      	movs	r3, #0
	__asm__ volatile(
   2977c:	f04f 0240 	mov.w	r2, #64	; 0x40
   29780:	f3ef 8611 	mrs	r6, BASEPRI
   29784:	f382 8811 	msr	BASEPRI, r2
   29788:	f3bf 8f6f 	isb	sy
   2978c:	e019      	b.n	297c2 <z_thread_timeout+0x50>
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2978e:	4628      	mov	r0, r5
   29790:	f7ff ff16 	bl	295c0 <pended_on>
   29794:	4629      	mov	r1, r5
   29796:	f7ff ff53 	bl	29640 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2979a:	7b6b      	ldrb	r3, [r5, #13]
   2979c:	f023 0302 	bic.w	r3, r3, #2
   297a0:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   297a2:	2300      	movs	r3, #0
   297a4:	60ab      	str	r3, [r5, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   297a6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   297aa:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
   297ae:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   297b2:	4628      	mov	r0, r5
   297b4:	f7f6 fee8 	bl	20588 <ready_thread>
	__asm__ volatile(
   297b8:	f386 8811 	msr	BASEPRI, r6
   297bc:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   297c0:	2301      	movs	r3, #1
   297c2:	b94b      	cbnz	r3, 297d8 <z_thread_timeout+0x66>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   297c4:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
   297c8:	f013 0f28 	tst.w	r3, #40	; 0x28
   297cc:	d1f4      	bne.n	297b8 <z_thread_timeout+0x46>
			if (thread->base.pended_on != NULL) {
   297ce:	f854 3c10 	ldr.w	r3, [r4, #-16]
   297d2:	2b00      	cmp	r3, #0
   297d4:	d1db      	bne.n	2978e <z_thread_timeout+0x1c>
   297d6:	e7e6      	b.n	297a6 <z_thread_timeout+0x34>
}
   297d8:	bd70      	pop	{r4, r5, r6, pc}

000297da <z_unpend1_no_timeout>:
{
   297da:	b570      	push	{r4, r5, r6, lr}
   297dc:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   297de:	2300      	movs	r3, #0
	__asm__ volatile(
   297e0:	f04f 0240 	mov.w	r2, #64	; 0x40
   297e4:	f3ef 8511 	mrs	r5, BASEPRI
   297e8:	f382 8811 	msr	BASEPRI, r2
   297ec:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   297f0:	461c      	mov	r4, r3
   297f2:	e00f      	b.n	29814 <z_unpend1_no_timeout+0x3a>
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   297f4:	f7ff fee4 	bl	295c0 <pended_on>
   297f8:	4621      	mov	r1, r4
   297fa:	f7ff ff21 	bl	29640 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   297fe:	7b63      	ldrb	r3, [r4, #13]
   29800:	f023 0302 	bic.w	r3, r3, #2
   29804:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   29806:	2300      	movs	r3, #0
   29808:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   2980a:	f385 8811 	msr	BASEPRI, r5
   2980e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   29812:	2301      	movs	r3, #1
   29814:	b933      	cbnz	r3, 29824 <z_unpend1_no_timeout+0x4a>
		thread = _priq_wait_best(&wait_q->waitq);
   29816:	4630      	mov	r0, r6
   29818:	f7ff ff3d 	bl	29696 <z_priq_dumb_best>
		if (thread != NULL) {
   2981c:	4604      	mov	r4, r0
   2981e:	2800      	cmp	r0, #0
   29820:	d1e8      	bne.n	297f4 <z_unpend1_no_timeout+0x1a>
   29822:	e7f2      	b.n	2980a <z_unpend1_no_timeout+0x30>
}
   29824:	4620      	mov	r0, r4
   29826:	bd70      	pop	{r4, r5, r6, pc}

00029828 <z_unpend_first_thread>:
{
   29828:	b570      	push	{r4, r5, r6, lr}
   2982a:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   2982c:	2300      	movs	r3, #0
	__asm__ volatile(
   2982e:	f04f 0240 	mov.w	r2, #64	; 0x40
   29832:	f3ef 8511 	mrs	r5, BASEPRI
   29836:	f382 8811 	msr	BASEPRI, r2
   2983a:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   2983e:	461c      	mov	r4, r3
   29840:	e013      	b.n	2986a <z_unpend_first_thread+0x42>
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   29842:	f7ff febd 	bl	295c0 <pended_on>
   29846:	4621      	mov	r1, r4
   29848:	f7ff fefa 	bl	29640 <z_priq_dumb_remove>
   2984c:	7b63      	ldrb	r3, [r4, #13]
   2984e:	f023 0302 	bic.w	r3, r3, #2
   29852:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   29854:	2300      	movs	r3, #0
   29856:	60a3      	str	r3, [r4, #8]
   29858:	f104 0018 	add.w	r0, r4, #24
   2985c:	f000 f86e 	bl	2993c <z_abort_timeout>
	__asm__ volatile(
   29860:	f385 8811 	msr	BASEPRI, r5
   29864:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   29868:	2301      	movs	r3, #1
   2986a:	b933      	cbnz	r3, 2987a <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
   2986c:	4630      	mov	r0, r6
   2986e:	f7ff ff12 	bl	29696 <z_priq_dumb_best>
		if (thread != NULL) {
   29872:	4604      	mov	r4, r0
   29874:	2800      	cmp	r0, #0
   29876:	d1e4      	bne.n	29842 <z_unpend_first_thread+0x1a>
   29878:	e7f2      	b.n	29860 <z_unpend_first_thread+0x38>
}
   2987a:	4620      	mov	r0, r4
   2987c:	bd70      	pop	{r4, r5, r6, pc}

0002987e <z_unpend_all>:
{
   2987e:	b538      	push	{r3, r4, r5, lr}
   29880:	4605      	mov	r5, r0
	int need_sched = 0;
   29882:	2000      	movs	r0, #0
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   29884:	e006      	b.n	29894 <z_unpend_all+0x16>
		z_unpend_thread(thread);
   29886:	4620      	mov	r0, r4
   29888:	f7ff fee2 	bl	29650 <z_unpend_thread>
		z_ready_thread(thread);
   2988c:	4620      	mov	r0, r4
   2988e:	f7ff ff54 	bl	2973a <z_ready_thread>
		need_sched = 1;
   29892:	2001      	movs	r0, #1
	return list->head == list;
   29894:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29896:	42a5      	cmp	r5, r4
   29898:	d001      	beq.n	2989e <z_unpend_all+0x20>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2989a:	2c00      	cmp	r4, #0
   2989c:	d1f3      	bne.n	29886 <z_unpend_all+0x8>
}
   2989e:	bd38      	pop	{r3, r4, r5, pc}

000298a0 <z_sched_wake>:
{
   298a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   298a4:	4606      	mov	r6, r0
   298a6:	4688      	mov	r8, r1
   298a8:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
   298aa:	2300      	movs	r3, #0
	__asm__ volatile(
   298ac:	f04f 0240 	mov.w	r2, #64	; 0x40
   298b0:	f3ef 8511 	mrs	r5, BASEPRI
   298b4:	f382 8811 	msr	BASEPRI, r2
   298b8:	f3bf 8f6f 	isb	sy
	bool ret = false;
   298bc:	4699      	mov	r9, r3
   298be:	e01b      	b.n	298f8 <z_sched_wake+0x58>
   298c0:	f8c0 80b0 	str.w	r8, [r0, #176]	; 0xb0
	thread->base.swap_data = data;
   298c4:	6147      	str	r7, [r0, #20]
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   298c6:	f7ff fe7b 	bl	295c0 <pended_on>
   298ca:	4621      	mov	r1, r4
   298cc:	f7ff feb8 	bl	29640 <z_priq_dumb_remove>
   298d0:	7b63      	ldrb	r3, [r4, #13]
   298d2:	f023 0302 	bic.w	r3, r3, #2
   298d6:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   298d8:	2300      	movs	r3, #0
   298da:	60a3      	str	r3, [r4, #8]
   298dc:	f104 0018 	add.w	r0, r4, #24
   298e0:	f000 f82c 	bl	2993c <z_abort_timeout>
			ready_thread(thread);
   298e4:	4620      	mov	r0, r4
   298e6:	f7f6 fe4f 	bl	20588 <ready_thread>
			ret = true;
   298ea:	f04f 0901 	mov.w	r9, #1
	__asm__ volatile(
   298ee:	f385 8811 	msr	BASEPRI, r5
   298f2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   298f6:	2301      	movs	r3, #1
   298f8:	b933      	cbnz	r3, 29908 <z_sched_wake+0x68>
		thread = _priq_wait_best(&wait_q->waitq);
   298fa:	4630      	mov	r0, r6
   298fc:	f7ff fecb 	bl	29696 <z_priq_dumb_best>
		if (thread != NULL) {
   29900:	4604      	mov	r4, r0
   29902:	2800      	cmp	r0, #0
   29904:	d1dc      	bne.n	298c0 <z_sched_wake+0x20>
   29906:	e7f2      	b.n	298ee <z_sched_wake+0x4e>
}
   29908:	4648      	mov	r0, r9
   2990a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002990e <remove_timeout>:
{
   2990e:	b538      	push	{r3, r4, r5, lr}
   29910:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   29912:	f7f7 f889 	bl	20a28 <next>
   29916:	b148      	cbz	r0, 2992c <remove_timeout+0x1e>
   29918:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   2991a:	6920      	ldr	r0, [r4, #16]
   2991c:	6965      	ldr	r5, [r4, #20]
   2991e:	6913      	ldr	r3, [r2, #16]
   29920:	6951      	ldr	r1, [r2, #20]
   29922:	181b      	adds	r3, r3, r0
   29924:	eb45 0101 	adc.w	r1, r5, r1
   29928:	6113      	str	r3, [r2, #16]
   2992a:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   2992c:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   2992e:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   29930:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   29932:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   29934:	2300      	movs	r3, #0
   29936:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   29938:	6063      	str	r3, [r4, #4]
}
   2993a:	bd38      	pop	{r3, r4, r5, pc}

0002993c <z_abort_timeout>:
{
   2993c:	b570      	push	{r4, r5, r6, lr}
   2993e:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   29940:	2300      	movs	r3, #0
	__asm__ volatile(
   29942:	f04f 0240 	mov.w	r2, #64	; 0x40
   29946:	f3ef 8611 	mrs	r6, BASEPRI
   2994a:	f382 8811 	msr	BASEPRI, r2
   2994e:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   29952:	f06f 0015 	mvn.w	r0, #21
   29956:	e008      	b.n	2996a <z_abort_timeout+0x2e>
			remove_timeout(to);
   29958:	4620      	mov	r0, r4
   2995a:	f7ff ffd8 	bl	2990e <remove_timeout>
			ret = 0;
   2995e:	4628      	mov	r0, r5
	__asm__ volatile(
   29960:	f386 8811 	msr	BASEPRI, r6
   29964:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   29968:	2301      	movs	r3, #1
   2996a:	461d      	mov	r5, r3
   2996c:	b91b      	cbnz	r3, 29976 <z_abort_timeout+0x3a>
	return node->next != NULL;
   2996e:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   29970:	2b00      	cmp	r3, #0
   29972:	d1f1      	bne.n	29958 <z_abort_timeout+0x1c>
   29974:	e7f4      	b.n	29960 <z_abort_timeout+0x24>
}
   29976:	bd70      	pop	{r4, r5, r6, pc}

00029978 <z_get_next_timeout_expiry>:
{
   29978:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   2997a:	2300      	movs	r3, #0
	__asm__ volatile(
   2997c:	f04f 0240 	mov.w	r2, #64	; 0x40
   29980:	f3ef 8411 	mrs	r4, BASEPRI
   29984:	f382 8811 	msr	BASEPRI, r2
   29988:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   2998c:	f04f 30ff 	mov.w	r0, #4294967295
	LOCKED(&timeout_lock) {
   29990:	b93b      	cbnz	r3, 299a2 <z_get_next_timeout_expiry+0x2a>
		ret = next_timeout();
   29992:	f7f7 f861 	bl	20a58 <next_timeout>
	__asm__ volatile(
   29996:	f384 8811 	msr	BASEPRI, r4
   2999a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   2999e:	2301      	movs	r3, #1
   299a0:	e7f6      	b.n	29990 <z_get_next_timeout_expiry+0x18>
}
   299a2:	bd10      	pop	{r4, pc}

000299a4 <z_set_timeout_expiry>:
{
   299a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   299a6:	4606      	mov	r6, r0
   299a8:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
   299aa:	2300      	movs	r3, #0
	__asm__ volatile(
   299ac:	f04f 0240 	mov.w	r2, #64	; 0x40
   299b0:	f3ef 8511 	mrs	r5, BASEPRI
   299b4:	f382 8811 	msr	BASEPRI, r2
   299b8:	f3bf 8f6f 	isb	sy
   299bc:	e00a      	b.n	299d4 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
   299be:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   299c0:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   299c4:	2801      	cmp	r0, #1
   299c6:	dd00      	ble.n	299ca <z_set_timeout_expiry+0x26>
   299c8:	b97c      	cbnz	r4, 299ea <z_set_timeout_expiry+0x46>
	__asm__ volatile(
   299ca:	f385 8811 	msr	BASEPRI, r5
   299ce:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   299d2:	2301      	movs	r3, #1
   299d4:	461c      	mov	r4, r3
   299d6:	b97b      	cbnz	r3, 299f8 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
   299d8:	f7f7 f83e 	bl	20a58 <next_timeout>
			      || (ticks <= next_to);
   299dc:	f1b0 3fff 	cmp.w	r0, #4294967295
   299e0:	d0ed      	beq.n	299be <z_set_timeout_expiry+0x1a>
   299e2:	42b0      	cmp	r0, r6
   299e4:	dbec      	blt.n	299c0 <z_set_timeout_expiry+0x1c>
   299e6:	2401      	movs	r4, #1
   299e8:	e7ea      	b.n	299c0 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   299ea:	4639      	mov	r1, r7
   299ec:	42b0      	cmp	r0, r6
   299ee:	bfa8      	it	ge
   299f0:	4630      	movge	r0, r6
   299f2:	f7e8 ffdd 	bl	129b0 <sys_clock_set_timeout>
   299f6:	e7e8      	b.n	299ca <z_set_timeout_expiry+0x26>
}
   299f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000299fa <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   299fa:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   299fc:	f7f7 f95e 	bl	20cbc <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   29a00:	bd08      	pop	{r3, pc}

00029a02 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   29a02:	b900      	cbnz	r0, 29a06 <z_impl_k_busy_wait+0x4>
   29a04:	4770      	bx	lr
{
   29a06:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   29a08:	f7ea fc12 	bl	14230 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   29a0c:	bd08      	pop	{r3, pc}

00029a0e <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   29a0e:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   29a10:	f1b1 3fff 	cmp.w	r1, #4294967295
   29a14:	bf08      	it	eq
   29a16:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   29a1a:	d024      	beq.n	29a66 <sys_clock_timeout_end_calc+0x58>
   29a1c:	4604      	mov	r4, r0
   29a1e:	460d      	mov	r5, r1
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   29a20:	ea54 0105 	orrs.w	r1, r4, r5
   29a24:	d00d      	beq.n	29a42 <sys_clock_timeout_end_calc+0x34>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   29a26:	f06f 0101 	mvn.w	r1, #1
   29a2a:	1a0a      	subs	r2, r1, r0
   29a2c:	f04f 31ff 	mov.w	r1, #4294967295
   29a30:	eb61 0305 	sbc.w	r3, r1, r5
   29a34:	2a00      	cmp	r2, #0
   29a36:	f173 0100 	sbcs.w	r1, r3, #0
   29a3a:	db05      	blt.n	29a48 <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   29a3c:	4610      	mov	r0, r2
   29a3e:	4619      	mov	r1, r3
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   29a40:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
   29a42:	f7f7 f93b 	bl	20cbc <sys_clock_tick_get>
   29a46:	e7fb      	b.n	29a40 <sys_clock_timeout_end_calc+0x32>
		return sys_clock_tick_get() + MAX(1, dt);
   29a48:	f7f7 f938 	bl	20cbc <sys_clock_tick_get>
   29a4c:	4623      	mov	r3, r4
   29a4e:	462a      	mov	r2, r5
   29a50:	2c01      	cmp	r4, #1
   29a52:	f175 0400 	sbcs.w	r4, r5, #0
   29a56:	db03      	blt.n	29a60 <sys_clock_timeout_end_calc+0x52>
   29a58:	18c0      	adds	r0, r0, r3
   29a5a:	eb42 0101 	adc.w	r1, r2, r1
   29a5e:	e7ef      	b.n	29a40 <sys_clock_timeout_end_calc+0x32>
   29a60:	2301      	movs	r3, #1
   29a62:	2200      	movs	r2, #0
   29a64:	e7f8      	b.n	29a58 <sys_clock_timeout_end_calc+0x4a>
		return UINT64_MAX;
   29a66:	f04f 30ff 	mov.w	r0, #4294967295
   29a6a:	4601      	mov	r1, r0
   29a6c:	e7e8      	b.n	29a40 <sys_clock_timeout_end_calc+0x32>

00029a6e <k_timer_init>:
	timer->expiry_fn = expiry_fn;
   29a6e:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   29a70:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
   29a72:	2300      	movs	r3, #0
   29a74:	6303      	str	r3, [r0, #48]	; 0x30
   29a76:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   29a7a:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   29a7c:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
   29a7e:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   29a80:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
   29a82:	6343      	str	r3, [r0, #52]	; 0x34
}
   29a84:	4770      	bx	lr

00029a86 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   29a86:	b510      	push	{r4, lr}
   29a88:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   29a8a:	f7ff ff57 	bl	2993c <z_abort_timeout>

	if (inactive) {
   29a8e:	b9a0      	cbnz	r0, 29aba <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
   29a90:	6a63      	ldr	r3, [r4, #36]	; 0x24
   29a92:	b10b      	cbz	r3, 29a98 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   29a94:	4620      	mov	r0, r4
   29a96:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   29a98:	f104 0018 	add.w	r0, r4, #24
   29a9c:	f7ff fe9d 	bl	297da <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   29aa0:	b158      	cbz	r0, 29aba <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
   29aa2:	f7ff fe4a 	bl	2973a <z_ready_thread>
	__asm__ volatile(
   29aa6:	f04f 0340 	mov.w	r3, #64	; 0x40
   29aaa:	f3ef 8011 	mrs	r0, BASEPRI
   29aae:	f383 8811 	msr	BASEPRI, r3
   29ab2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   29ab6:	f7ff fdae 	bl	29616 <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
   29aba:	bd10      	pop	{r4, pc}

00029abc <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   29abc:	b108      	cbz	r0, 29ac2 <poller_thread+0x6>
   29abe:	3860      	subs	r0, #96	; 0x60
   29ac0:	4770      	bx	lr
}
   29ac2:	4770      	bx	lr

00029ac4 <signal_poller>:
{
   29ac4:	b538      	push	{r3, r4, r5, lr}
   29ac6:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
   29ac8:	6880      	ldr	r0, [r0, #8]
   29aca:	f7ff fff7 	bl	29abc <poller_thread>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   29ace:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_pending(thread)) {
   29ad0:	f013 0f02 	tst.w	r3, #2
   29ad4:	d028      	beq.n	29b28 <signal_poller+0x64>
   29ad6:	4604      	mov	r4, r0
	return thread->base.timeout.dticks == _EXPIRED;
   29ad8:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
	if (z_is_thread_timeout_expired(thread)) {
   29adc:	f06f 0001 	mvn.w	r0, #1
   29ae0:	f04f 31ff 	mov.w	r1, #4294967295
   29ae4:	428b      	cmp	r3, r1
   29ae6:	bf08      	it	eq
   29ae8:	4282      	cmpeq	r2, r0
   29aea:	d01f      	beq.n	29b2c <signal_poller+0x68>
	z_unpend_thread(thread);
   29aec:	4620      	mov	r0, r4
   29aee:	f7ff fdaf 	bl	29650 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   29af2:	2d08      	cmp	r5, #8
   29af4:	d00a      	beq.n	29b0c <signal_poller+0x48>
   29af6:	2300      	movs	r3, #0
   29af8:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	uint8_t state = thread->base.thread_state;
   29afc:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   29afe:	f013 0f1f 	tst.w	r3, #31
   29b02:	d108      	bne.n	29b16 <signal_poller+0x52>
	return node->next != NULL;
   29b04:	69a3      	ldr	r3, [r4, #24]
   29b06:	b123      	cbz	r3, 29b12 <signal_poller+0x4e>
   29b08:	2300      	movs	r3, #0
   29b0a:	e005      	b.n	29b18 <signal_poller+0x54>
   29b0c:	f06f 0303 	mvn.w	r3, #3
   29b10:	e7f2      	b.n	29af8 <signal_poller+0x34>
   29b12:	2301      	movs	r3, #1
   29b14:	e000      	b.n	29b18 <signal_poller+0x54>
   29b16:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
   29b18:	b90b      	cbnz	r3, 29b1e <signal_poller+0x5a>
		return 0;
   29b1a:	2000      	movs	r0, #0
   29b1c:	e005      	b.n	29b2a <signal_poller+0x66>
	z_ready_thread(thread);
   29b1e:	4620      	mov	r0, r4
   29b20:	f7ff fe0b 	bl	2973a <z_ready_thread>
	return 0;
   29b24:	2000      	movs	r0, #0
   29b26:	e000      	b.n	29b2a <signal_poller+0x66>
		return 0;
   29b28:	2000      	movs	r0, #0
}
   29b2a:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   29b2c:	f06f 000a 	mvn.w	r0, #10
   29b30:	e7fb      	b.n	29b2a <signal_poller+0x66>

00029b32 <signal_triggered_work>:
	twork->poll_result = -EAGAIN;
	k_work_submit_to_queue(twork->workq, &twork->work);
}

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
   29b32:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
   29b34:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   29b36:	7823      	ldrb	r3, [r4, #0]
   29b38:	b173      	cbz	r3, 29b58 <signal_triggered_work+0x26>
   29b3a:	f854 5c04 	ldr.w	r5, [r4, #-4]
   29b3e:	b15d      	cbz	r5, 29b58 <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   29b40:	f1a4 0614 	sub.w	r6, r4, #20
   29b44:	f104 0014 	add.w	r0, r4, #20
   29b48:	f7ff fef8 	bl	2993c <z_abort_timeout>
		twork->poll_result = 0;
   29b4c:	2300      	movs	r3, #0
   29b4e:	62e3      	str	r3, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   29b50:	4631      	mov	r1, r6
   29b52:	4628      	mov	r0, r5
   29b54:	f7ff fc87 	bl	29466 <k_work_submit_to_queue>
	}

	return 0;
}
   29b58:	2000      	movs	r0, #0
   29b5a:	bd70      	pop	{r4, r5, r6, pc}

00029b5c <signal_poll_event>:
{
   29b5c:	b570      	push	{r4, r5, r6, lr}
   29b5e:	4604      	mov	r4, r0
   29b60:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
   29b62:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
   29b64:	b1d6      	cbz	r6, 29b9c <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
   29b66:	7873      	ldrb	r3, [r6, #1]
   29b68:	2b01      	cmp	r3, #1
   29b6a:	d00d      	beq.n	29b88 <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
   29b6c:	2b02      	cmp	r3, #2
   29b6e:	d012      	beq.n	29b96 <signal_poll_event+0x3a>
		poller->is_polling = false;
   29b70:	2000      	movs	r0, #0
   29b72:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
   29b74:	2300      	movs	r3, #0
   29b76:	60a3      	str	r3, [r4, #8]
	event->state |= state;
   29b78:	68e3      	ldr	r3, [r4, #12]
   29b7a:	f3c3 3145 	ubfx	r1, r3, #13, #6
   29b7e:	430d      	orrs	r5, r1
   29b80:	f365 3352 	bfi	r3, r5, #13, #6
   29b84:	60e3      	str	r3, [r4, #12]
}
   29b86:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
   29b88:	f7ff ff9c 	bl	29ac4 <signal_poller>
		poller->is_polling = false;
   29b8c:	2300      	movs	r3, #0
   29b8e:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
   29b90:	4298      	cmp	r0, r3
   29b92:	daef      	bge.n	29b74 <signal_poll_event+0x18>
   29b94:	e7f7      	b.n	29b86 <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
   29b96:	f7ff ffcc 	bl	29b32 <signal_triggered_work>
   29b9a:	e7f7      	b.n	29b8c <signal_poll_event+0x30>
	int retcode = 0;
   29b9c:	2000      	movs	r0, #0
   29b9e:	e7e9      	b.n	29b74 <signal_poll_event+0x18>

00029ba0 <k_poll_event_init>:
{
   29ba0:	b430      	push	{r4, r5}
	event->poller = NULL;
   29ba2:	2400      	movs	r4, #0
   29ba4:	6084      	str	r4, [r0, #8]
	event->type = type;
   29ba6:	7b45      	ldrb	r5, [r0, #13]
   29ba8:	f361 0504 	bfi	r5, r1, #0, #5
   29bac:	7345      	strb	r5, [r0, #13]
	event->state = K_POLL_STATE_NOT_READY;
   29bae:	68c1      	ldr	r1, [r0, #12]
   29bb0:	f364 3152 	bfi	r1, r4, #13, #6
   29bb4:	60c1      	str	r1, [r0, #12]
	event->mode = mode;
   29bb6:	f3c1 4107 	ubfx	r1, r1, #16, #8
   29bba:	f362 01c3 	bfi	r1, r2, #3, #1
   29bbe:	7381      	strb	r1, [r0, #14]
	event->unused = 0U;
   29bc0:	89c2      	ldrh	r2, [r0, #14]
   29bc2:	f364 120f 	bfi	r2, r4, #4, #12
   29bc6:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   29bc8:	6103      	str	r3, [r0, #16]
}
   29bca:	bc30      	pop	{r4, r5}
   29bcc:	4770      	bx	lr

00029bce <z_handle_obj_poll_events>:
{
   29bce:	b508      	push	{r3, lr}
   29bd0:	4603      	mov	r3, r0
	return list->head == list;
   29bd2:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   29bd4:	4283      	cmp	r3, r0
   29bd6:	d009      	beq.n	29bec <z_handle_obj_poll_events+0x1e>
	sys_dnode_t *const prev = node->prev;
   29bd8:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   29bda:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   29bdc:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   29bde:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   29be0:	2300      	movs	r3, #0
   29be2:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   29be4:	6043      	str	r3, [r0, #4]
	if (poll_event != NULL) {
   29be6:	b108      	cbz	r0, 29bec <z_handle_obj_poll_events+0x1e>
		(void) signal_poll_event(poll_event, state);
   29be8:	f7ff ffb8 	bl	29b5c <signal_poll_event>
}
   29bec:	bd08      	pop	{r3, pc}

00029bee <z_heap_aligned_alloc>:
{
   29bee:	b5d0      	push	{r4, r6, r7, lr}
   29bf0:	b082      	sub	sp, #8
   29bf2:	4604      	mov	r4, r0
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   29bf4:	2000      	movs	r0, #0
   29bf6:	2304      	movs	r3, #4
   29bf8:	18d2      	adds	r2, r2, r3
   29bfa:	d20e      	bcs.n	29c1a <z_heap_aligned_alloc+0x2c>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
   29bfc:	b978      	cbnz	r0, 29c1e <z_heap_aligned_alloc+0x30>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   29bfe:	2600      	movs	r6, #0
   29c00:	2700      	movs	r7, #0
   29c02:	e9cd 6700 	strd	r6, r7, [sp]
   29c06:	f041 0104 	orr.w	r1, r1, #4
   29c0a:	4620      	mov	r0, r4
   29c0c:	f7ff f977 	bl	28efe <k_heap_aligned_alloc>
	if (mem == NULL) {
   29c10:	b108      	cbz	r0, 29c16 <z_heap_aligned_alloc+0x28>
	*heap_ref = heap;
   29c12:	f840 4b04 	str.w	r4, [r0], #4
}
   29c16:	b002      	add	sp, #8
   29c18:	bdd0      	pop	{r4, r6, r7, pc}
   29c1a:	2001      	movs	r0, #1
   29c1c:	e7ee      	b.n	29bfc <z_heap_aligned_alloc+0xe>
		return NULL;
   29c1e:	2000      	movs	r0, #0
   29c20:	e7f9      	b.n	29c16 <z_heap_aligned_alloc+0x28>

00029c22 <k_free>:
	if (ptr != NULL) {
   29c22:	b130      	cbz	r0, 29c32 <k_free+0x10>
{
   29c24:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
   29c26:	1f01      	subs	r1, r0, #4
   29c28:	f850 0c04 	ldr.w	r0, [r0, #-4]
   29c2c:	f7ff f9b2 	bl	28f94 <k_heap_free>
}
   29c30:	bd08      	pop	{r3, pc}
   29c32:	4770      	bx	lr

00029c34 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   29c34:	4770      	bx	lr
