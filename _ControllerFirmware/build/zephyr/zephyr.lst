
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
LOG_MODULE_REGISTER(bt_data);

void bt_data_parse(struct net_buf_simple *ad,
		   bool (*func)(struct bt_data *data, void *user_data),
		   void *user_data)
{
   0:	c0 81 00 20 59 56 01 00 65 8d 02 00 2d 56 01 00     ... YV..e...-V..
	while (ad->len > 1) {
  10:	2d 56 01 00 2d 56 01 00 2d 56 01 00 00 00 00 00     -V..-V..-V......
	...
			/* Early termination */
			return;
		}

		if (len > ad->len) {
			LOG_WRN("malformed advertising data %u / %u",
  2c:	29 4f 01 00 2d 56 01 00 00 00 00 00 d5 4e 01 00     )O..-V.......N..
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
  3c:	2d 56 01 00                                         -V..

00000040 <_irq_vector_table>:
  40:	d9 4f 01 00 53 ba 02 00 d9 4f 01 00 d9 4f 01 00     .O..S....O...O..
				len, ad->len);
			return;
		}

		data.type = net_buf_simple_pull_u8(ad);
  50:	d9 4f 01 00 d9 4f 01 00 d9 4f 01 00 d9 4f 01 00     .O...O...O...O..
		data.data_len = len - 1;
		data.data = ad->data;
  60:	01 ba 02 00 d9 4f 01 00 d9 4f 01 00 39 ba 02 00     .....O...O..9...

		if (!func(&data, user_data)) {
			return;
		}

		net_buf_simple_pull(ad, len - 1);
  70:	d9 4f 01 00 d9 4f 01 00 d9 4f 01 00 d9 4f 01 00     .O...O...O...O..
		}
	}

	uint32_t pin_mask = 0;

	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
  80:	d9 4f 01 00 d9 4f 01 00 d9 4f 01 00 d9 4f 01 00     .O...O...O...O..
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
	callback->pin_mask = pin_mask;
  90:	d9 4f 01 00 d9 4f 01 00 d9 4f 01 00 d9 4f 01 00     .O...O...O...O..

	if (api->manage_callback == NULL) {
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
  a0:	d9 4f 01 00 d9 4f 01 00 d9 4f 01 00 d9 4f 01 00     .O...O...O...O..
		return -ENOTSUP;
  b0:	d9 4f 01 00 d9 4f 01 00 d9 4f 01 00 d9 4f 01 00     .O...O...O...O..
			LOG_ERR("Cannot add callback");
			return err;
		}
	}

	k_work_init_delayable(&buttons_scan, buttons_scan_fn);
  c0:	d9 4f 01 00 d9 4f 01 00 d9 4f 01 00 d9 4f 01 00     .O...O...O...O..

	state = STATE_SCANNING;

	k_work_schedule(&buttons_scan, K_NO_WAIT);
  d0:	d9 4f 01 00 d9 4f 01 00 d9 4f 01 00 d9 4f 01 00     .O...O...O...O..
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
  e0:	d9 4f 01 00 d9 4f 01 00 d9 4f 01 00 d9 4f 01 00     .O...O...O...O..
  f0:	d9 4f 01 00 d9 4f 01 00 d9 4f 01 00 d9 4f 01 00     .O...O...O...O..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f00c fb78 	bl	c814 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <ocrypto_bigint_add256>:
     134:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     138:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     13c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     140:	185b      	adds	r3, r3, r1
     142:	eb54 040c 	adcs.w	r4, r4, ip
     146:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     14a:	414d      	adcs	r5, r1
     14c:	eb56 060c 	adcs.w	r6, r6, ip
     150:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     154:	414f      	adcs	r7, r1
     156:	eb58 080c 	adcs.w	r8, r8, ip
     15a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     15e:	eb59 0901 	adcs.w	r9, r9, r1
     162:	eb5a 0a0c 	adcs.w	sl, sl, ip
     166:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     16a:	4180      	sbcs	r0, r0
     16c:	3001      	adds	r0, #1
     16e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     172:	4770      	bx	lr

00000174 <ocrypto_bigint_sub256>:
     174:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     178:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     17c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     180:	1a5b      	subs	r3, r3, r1
     182:	eb74 040c 	sbcs.w	r4, r4, ip
     186:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     18a:	418d      	sbcs	r5, r1
     18c:	eb76 060c 	sbcs.w	r6, r6, ip
     190:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     194:	418f      	sbcs	r7, r1
     196:	eb78 080c 	sbcs.w	r8, r8, ip
     19a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     19e:	eb79 0901 	sbcs.w	r9, r9, r1
     1a2:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     1a6:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     1aa:	4180      	sbcs	r0, r0
     1ac:	4240      	negs	r0, r0
     1ae:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     1b2:	4770      	bx	lr

000001b4 <ocrypto_bigint_cadd256>:
     1b4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     1b8:	4252      	negs	r2, r2
     1ba:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     1be:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     1c2:	4017      	ands	r7, r2
     1c4:	19db      	adds	r3, r3, r7
     1c6:	ea18 0802 	ands.w	r8, r8, r2
     1ca:	eb54 0408 	adcs.w	r4, r4, r8
     1ce:	ea19 0902 	ands.w	r9, r9, r2
     1d2:	eb55 0509 	adcs.w	r5, r5, r9
     1d6:	ea1a 0a02 	ands.w	sl, sl, r2
     1da:	eb56 060a 	adcs.w	r6, r6, sl
     1de:	c078      	stmia	r0!, {r3, r4, r5, r6}
     1e0:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     1e4:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     1e8:	4017      	ands	r7, r2
     1ea:	417b      	adcs	r3, r7
     1ec:	ea18 0802 	ands.w	r8, r8, r2
     1f0:	eb54 0408 	adcs.w	r4, r4, r8
     1f4:	ea19 0902 	ands.w	r9, r9, r2
     1f8:	eb55 0509 	adcs.w	r5, r5, r9
     1fc:	ea1a 0a02 	ands.w	sl, sl, r2
     200:	eb56 060a 	adcs.w	r6, r6, sl
     204:	c078      	stmia	r0!, {r3, r4, r5, r6}
     206:	4180      	sbcs	r0, r0
     208:	3001      	adds	r0, #1
     20a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     20e:	4770      	bx	lr

00000210 <ocrypto_bigint_csub256>:
     210:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     214:	4252      	negs	r2, r2
     216:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     21a:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     21e:	4017      	ands	r7, r2
     220:	1bdb      	subs	r3, r3, r7
     222:	ea18 0802 	ands.w	r8, r8, r2
     226:	eb74 0408 	sbcs.w	r4, r4, r8
     22a:	ea19 0902 	ands.w	r9, r9, r2
     22e:	eb75 0509 	sbcs.w	r5, r5, r9
     232:	ea1a 0a02 	ands.w	sl, sl, r2
     236:	eb76 060a 	sbcs.w	r6, r6, sl
     23a:	c078      	stmia	r0!, {r3, r4, r5, r6}
     23c:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     240:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     244:	4017      	ands	r7, r2
     246:	41bb      	sbcs	r3, r7
     248:	ea18 0802 	ands.w	r8, r8, r2
     24c:	eb74 0408 	sbcs.w	r4, r4, r8
     250:	ea19 0902 	ands.w	r9, r9, r2
     254:	eb75 0509 	sbcs.w	r5, r5, r9
     258:	ea1a 0a02 	ands.w	sl, sl, r2
     25c:	eb76 060a 	sbcs.w	r6, r6, sl
     260:	c078      	stmia	r0!, {r3, r4, r5, r6}
     262:	4180      	sbcs	r0, r0
     264:	4240      	negs	r0, r0
     266:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     26a:	4770      	bx	lr

0000026c <ocrypto_bigint_cswap256>:
     26c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
     270:	4252      	negs	r2, r2
     272:	f04f 0804 	mov.w	r8, #4

00000276 <cswap256_loop>:
     276:	e890 0030 	ldmia.w	r0, {r4, r5}
     27a:	e891 00c0 	ldmia.w	r1, {r6, r7}
     27e:	1ba3      	subs	r3, r4, r6
     280:	4013      	ands	r3, r2
     282:	1ae4      	subs	r4, r4, r3
     284:	18f6      	adds	r6, r6, r3
     286:	1beb      	subs	r3, r5, r7
     288:	4013      	ands	r3, r2
     28a:	1aed      	subs	r5, r5, r3
     28c:	18ff      	adds	r7, r7, r3
     28e:	c030      	stmia	r0!, {r4, r5}
     290:	c1c0      	stmia	r1!, {r6, r7}
     292:	f1b8 0801 	subs.w	r8, r8, #1
     296:	d1ee      	bne.n	276 <cswap256_loop>
     298:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
     29c:	4770      	bx	lr
     29e:	bf00      	nop

000002a0 <ocrypto_mul256_noframe>:
     2a0:	b500      	push	{lr}
     2a2:	e892 07dc 	ldmia.w	r2, {r2, r3, r4, r6, r7, r8, r9, sl}
     2a6:	e92d 07dc 	stmdb	sp!, {r2, r3, r4, r6, r7, r8, r9, sl}
     2aa:	e8b1 5780 	ldmia.w	r1!, {r7, r8, r9, sl, ip, lr}
     2ae:	b402      	push	{r1}
     2b0:	fba7 5102 	umull	r5, r1, r7, r2
     2b4:	950a      	str	r5, [sp, #40]	; 0x28
     2b6:	fba8 0b02 	umull	r0, fp, r8, r2
     2ba:	fbe7 1063 	umaal	r1, r0, r7, r3
     2be:	fbe9 b062 	umaal	fp, r0, r9, r2
     2c2:	910b      	str	r1, [sp, #44]	; 0x2c
     2c4:	fba8 5103 	umull	r5, r1, r8, r3
     2c8:	fbea 0162 	umaal	r0, r1, sl, r2
     2cc:	fbe7 b564 	umaal	fp, r5, r7, r4
     2d0:	fbe7 0566 	umaal	r0, r5, r7, r6
     2d4:	fbe8 1566 	umaal	r1, r5, r8, r6
     2d8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
     2dc:	fba9 b603 	umull	fp, r6, r9, r3
     2e0:	fbea 1663 	umaal	r1, r6, sl, r3
     2e4:	fbec 5663 	umaal	r5, r6, ip, r3
     2e8:	fbe8 0b64 	umaal	r0, fp, r8, r4
     2ec:	fbe9 1b64 	umaal	r1, fp, r9, r4
     2f0:	fbea 5b64 	umaal	r5, fp, sl, r4
     2f4:	fbec 6b64 	umaal	r6, fp, ip, r4
     2f8:	900d      	str	r0, [sp, #52]	; 0x34
     2fa:	fbac 3002 	umull	r3, r0, ip, r2
     2fe:	9c05      	ldr	r4, [sp, #20]
     300:	fbee 5062 	umaal	r5, r0, lr, r2
     304:	fbe9 6064 	umaal	r6, r0, r9, r4
     308:	fbea b064 	umaal	fp, r0, sl, r4
     30c:	fbe7 3164 	umaal	r3, r1, r7, r4
     310:	fbe8 5164 	umaal	r5, r1, r8, r4
     314:	9c06      	ldr	r4, [sp, #24]
     316:	fbe8 6164 	umaal	r6, r1, r8, r4
     31a:	fbe9 b164 	umaal	fp, r1, r9, r4
     31e:	fbea 0164 	umaal	r0, r1, sl, r4
     322:	930e      	str	r3, [sp, #56]	; 0x38
     324:	fba7 3204 	umull	r3, r2, r7, r4
     328:	9c07      	ldr	r4, [sp, #28]
     32a:	fbe7 6264 	umaal	r6, r2, r7, r4
     32e:	fbe8 b264 	umaal	fp, r2, r8, r4
     332:	fbe9 0264 	umaal	r0, r2, r9, r4
     336:	fbea 1264 	umaal	r1, r2, sl, r4
     33a:	9c04      	ldr	r4, [sp, #16]
     33c:	fbe9 5364 	umaal	r5, r3, r9, r4
     340:	fbea 6364 	umaal	r6, r3, sl, r4
     344:	9c08      	ldr	r4, [sp, #32]
     346:	fbe7 b364 	umaal	fp, r3, r7, r4
     34a:	fbe8 0364 	umaal	r0, r3, r8, r4
     34e:	fbe9 1364 	umaal	r1, r3, r9, r4
     352:	fbea 2364 	umaal	r2, r3, sl, r4
     356:	950f      	str	r5, [sp, #60]	; 0x3c
     358:	f85d 9b04 	ldr.w	r9, [sp], #4
     35c:	e899 0600 	ldmia.w	r9, {r9, sl}
     360:	f8dd 8000 	ldr.w	r8, [sp]
     364:	fba9 5408 	umull	r5, r4, r9, r8
     368:	fbea b468 	umaal	fp, r4, sl, r8
     36c:	f8dd 8010 	ldr.w	r8, [sp, #16]
     370:	fbec 0468 	umaal	r0, r4, ip, r8
     374:	fbee 1468 	umaal	r1, r4, lr, r8
     378:	fbe9 2468 	umaal	r2, r4, r9, r8
     37c:	fbea 3468 	umaal	r3, r4, sl, r8
     380:	f8dd 8004 	ldr.w	r8, [sp, #4]
     384:	fbee 6568 	umaal	r6, r5, lr, r8
     388:	fbe9 b568 	umaal	fp, r5, r9, r8
     38c:	fbea 0568 	umaal	r0, r5, sl, r8
     390:	f8dd 8014 	ldr.w	r8, [sp, #20]
     394:	fbec 1568 	umaal	r1, r5, ip, r8
     398:	fbee 2568 	umaal	r2, r5, lr, r8
     39c:	fbe9 3568 	umaal	r3, r5, r9, r8
     3a0:	fbea 4568 	umaal	r4, r5, sl, r8
     3a4:	960f      	str	r6, [sp, #60]	; 0x3c
     3a6:	f8dd 8008 	ldr.w	r8, [sp, #8]
     3aa:	fbae 7608 	umull	r7, r6, lr, r8
     3ae:	fbe9 0668 	umaal	r0, r6, r9, r8
     3b2:	fbea 1668 	umaal	r1, r6, sl, r8
     3b6:	f8dd 8018 	ldr.w	r8, [sp, #24]
     3ba:	fbec 2668 	umaal	r2, r6, ip, r8
     3be:	fbee 3668 	umaal	r3, r6, lr, r8
     3c2:	fbe9 4668 	umaal	r4, r6, r9, r8
     3c6:	fbea 5668 	umaal	r5, r6, sl, r8
     3ca:	f8dd 800c 	ldr.w	r8, [sp, #12]
     3ce:	fbec b768 	umaal	fp, r7, ip, r8
     3d2:	fbee 0768 	umaal	r0, r7, lr, r8
     3d6:	fbe9 1768 	umaal	r1, r7, r9, r8
     3da:	fbea 2768 	umaal	r2, r7, sl, r8
     3de:	f8dd 801c 	ldr.w	r8, [sp, #28]
     3e2:	fbec 3768 	umaal	r3, r7, ip, r8
     3e6:	fbee 4768 	umaal	r4, r7, lr, r8
     3ea:	fbe9 5768 	umaal	r5, r7, r9, r8
     3ee:	fbea 6768 	umaal	r6, r7, sl, r8
     3f2:	b008      	add	sp, #32
     3f4:	bd00      	pop	{pc}
     3f6:	bf00      	nop

000003f8 <ocrypto_bigint_mul256>:
     3f8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3fc:	b087      	sub	sp, #28
     3fe:	f7ff ff4f 	bl	2a0 <ocrypto_mul256_noframe>
     402:	f8dd 801c 	ldr.w	r8, [sp, #28]
     406:	f108 0820 	add.w	r8, r8, #32
     40a:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     40e:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     410:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000418 <ocrypto_sqr256_noframe>:
     418:	b500      	push	{lr}
     41a:	e891 5798 	ldmia.w	r1, {r3, r4, r7, r8, r9, sl, ip, lr}
     41e:	fba3 5203 	umull	r5, r2, r3, r3
     422:	9501      	str	r5, [sp, #4]
     424:	fba3 0104 	umull	r0, r1, r3, r4
     428:	fbe3 2064 	umaal	r2, r0, r3, r4
     42c:	fbe3 1067 	umaal	r1, r0, r3, r7
     430:	9202      	str	r2, [sp, #8]
     432:	fba3 5207 	umull	r5, r2, r3, r7
     436:	fbe3 0268 	umaal	r0, r2, r3, r8
     43a:	fbe4 1564 	umaal	r1, r5, r4, r4
     43e:	fbe3 0568 	umaal	r0, r5, r3, r8
     442:	fbe3 2569 	umaal	r2, r5, r3, r9
     446:	9103      	str	r1, [sp, #12]
     448:	fba4 b607 	umull	fp, r6, r4, r7
     44c:	fbe3 2669 	umaal	r2, r6, r3, r9
     450:	fbe3 566a 	umaal	r5, r6, r3, sl
     454:	fbe4 0b67 	umaal	r0, fp, r4, r7
     458:	fbe4 2b68 	umaal	r2, fp, r4, r8
     45c:	fbe3 5b6a 	umaal	r5, fp, r3, sl
     460:	fbe3 6b6c 	umaal	r6, fp, r3, ip
     464:	9004      	str	r0, [sp, #16]
     466:	fba4 1008 	umull	r1, r0, r4, r8
     46a:	fbe4 5069 	umaal	r5, r0, r4, r9
     46e:	fbe3 606c 	umaal	r6, r0, r3, ip
     472:	fbe3 b06e 	umaal	fp, r0, r3, lr
     476:	fbe7 2167 	umaal	r2, r1, r7, r7
     47a:	fbe4 5169 	umaal	r5, r1, r4, r9
     47e:	fbe4 616a 	umaal	r6, r1, r4, sl
     482:	fbe3 b16e 	umaal	fp, r1, r3, lr
     486:	fbe4 016e 	umaal	r0, r1, r4, lr
     48a:	9205      	str	r2, [sp, #20]
     48c:	fba7 3208 	umull	r3, r2, r7, r8
     490:	fbe4 626a 	umaal	r6, r2, r4, sl
     494:	fbe4 b26c 	umaal	fp, r2, r4, ip
     498:	fbe4 026e 	umaal	r0, r2, r4, lr
     49c:	fbe7 126e 	umaal	r1, r2, r7, lr
     4a0:	fbe7 5368 	umaal	r5, r3, r7, r8
     4a4:	fbe7 6369 	umaal	r6, r3, r7, r9
     4a8:	fbe4 b36c 	umaal	fp, r3, r4, ip
     4ac:	fbe7 036c 	umaal	r0, r3, r7, ip
     4b0:	fbe7 136e 	umaal	r1, r3, r7, lr
     4b4:	fbe8 236e 	umaal	r2, r3, r8, lr
     4b8:	9506      	str	r5, [sp, #24]
     4ba:	fba7 5409 	umull	r5, r4, r7, r9
     4be:	fbe7 b46a 	umaal	fp, r4, r7, sl
     4c2:	fbe7 046c 	umaal	r0, r4, r7, ip
     4c6:	fbe8 146c 	umaal	r1, r4, r8, ip
     4ca:	fbe8 246e 	umaal	r2, r4, r8, lr
     4ce:	fbe9 346e 	umaal	r3, r4, r9, lr
     4d2:	fbe8 6568 	umaal	r6, r5, r8, r8
     4d6:	fbe7 b56a 	umaal	fp, r5, r7, sl
     4da:	fbe8 056a 	umaal	r0, r5, r8, sl
     4de:	fbe8 156c 	umaal	r1, r5, r8, ip
     4e2:	fbe9 256c 	umaal	r2, r5, r9, ip
     4e6:	fbe9 356e 	umaal	r3, r5, r9, lr
     4ea:	fbea 456e 	umaal	r4, r5, sl, lr
     4ee:	9607      	str	r6, [sp, #28]
     4f0:	fba8 7609 	umull	r7, r6, r8, r9
     4f4:	fbe8 066a 	umaal	r0, r6, r8, sl
     4f8:	fbe9 166a 	umaal	r1, r6, r9, sl
     4fc:	fbe9 266c 	umaal	r2, r6, r9, ip
     500:	fbea 366c 	umaal	r3, r6, sl, ip
     504:	fbea 466e 	umaal	r4, r6, sl, lr
     508:	fbec 566e 	umaal	r5, r6, ip, lr
     50c:	fbe8 b769 	umaal	fp, r7, r8, r9
     510:	fbe9 0769 	umaal	r0, r7, r9, r9
     514:	fbe9 176a 	umaal	r1, r7, r9, sl
     518:	fbea 276a 	umaal	r2, r7, sl, sl
     51c:	fbea 376c 	umaal	r3, r7, sl, ip
     520:	fbec 476c 	umaal	r4, r7, ip, ip
     524:	fbec 576e 	umaal	r5, r7, ip, lr
     528:	fbee 676e 	umaal	r6, r7, lr, lr
     52c:	bd00      	pop	{pc}
     52e:	bf00      	nop

00000530 <ocrypto_bigint_sqr256>:
     530:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     534:	b087      	sub	sp, #28
     536:	f7ff ff6f 	bl	418 <ocrypto_sqr256_noframe>
     53a:	f8dd 801c 	ldr.w	r8, [sp, #28]
     53e:	f108 0820 	add.w	r8, r8, #32
     542:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     546:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     548:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000550 <ocrypto_constant_time_equal>:
     550:	b430      	push	{r4, r5}
     552:	f04f 0300 	mov.w	r3, #0

00000556 <constant_time_equal_loop>:
     556:	f810 4b01 	ldrb.w	r4, [r0], #1
     55a:	f811 5b01 	ldrb.w	r5, [r1], #1
     55e:	3a01      	subs	r2, #1
     560:	ea84 0405 	eor.w	r4, r4, r5
     564:	ea43 0304 	orr.w	r3, r3, r4
     568:	d1f5      	bne.n	556 <constant_time_equal_loop>
     56a:	f1a3 0301 	sub.w	r3, r3, #1
     56e:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     572:	bc30      	pop	{r4, r5}
     574:	4770      	bx	lr
     576:	bf00      	nop

00000578 <ocrypto_constant_time_is_zero>:
     578:	f04f 0300 	mov.w	r3, #0

0000057c <constant_time_is_zero_loop>:
     57c:	f810 2b01 	ldrb.w	r2, [r0], #1
     580:	3901      	subs	r1, #1
     582:	ea43 0302 	orr.w	r3, r3, r2
     586:	d1f9      	bne.n	57c <constant_time_is_zero_loop>
     588:	f1a3 0301 	sub.w	r3, r3, #1
     58c:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     590:	4770      	bx	lr
     592:	bf00      	nop

00000594 <ocrypto_constant_time_xor>:
     594:	b430      	push	{r4, r5}

00000596 <constant_time_xor_loop>:
     596:	f811 4b01 	ldrb.w	r4, [r1], #1
     59a:	f812 5b01 	ldrb.w	r5, [r2], #1
     59e:	406c      	eors	r4, r5
     5a0:	f800 4b01 	strb.w	r4, [r0], #1
     5a4:	3b01      	subs	r3, #1
     5a6:	d1f6      	bne.n	596 <constant_time_xor_loop>
     5a8:	bc30      	pop	{r4, r5}
     5aa:	4770      	bx	lr

000005ac <ocrypto_mod_p256_add>:
     5ac:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     5b0:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     5b4:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5b8:	185b      	adds	r3, r3, r1
     5ba:	eb54 040c 	adcs.w	r4, r4, ip
     5be:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5c2:	414d      	adcs	r5, r1
     5c4:	eb56 060c 	adcs.w	r6, r6, ip
     5c8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5cc:	414f      	adcs	r7, r1
     5ce:	eb58 080c 	adcs.w	r8, r8, ip
     5d2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5d6:	eb59 0901 	adcs.w	r9, r9, r1
     5da:	eb5a 0a0c 	adcs.w	sl, sl, ip
     5de:	4189      	sbcs	r1, r1
     5e0:	f1b3 33ff 	subs.w	r3, r3, #4294967295
     5e4:	f174 34ff 	sbcs.w	r4, r4, #4294967295
     5e8:	f175 35ff 	sbcs.w	r5, r5, #4294967295
     5ec:	f176 0600 	sbcs.w	r6, r6, #0
     5f0:	f177 0700 	sbcs.w	r7, r7, #0
     5f4:	f178 0800 	sbcs.w	r8, r8, #0
     5f8:	f179 0901 	sbcs.w	r9, r9, #1
     5fc:	f17a 3aff 	sbcs.w	sl, sl, #4294967295
     600:	f151 0100 	adcs.w	r1, r1, #0
     604:	185b      	adds	r3, r3, r1
     606:	414c      	adcs	r4, r1
     608:	414d      	adcs	r5, r1
     60a:	f156 0600 	adcs.w	r6, r6, #0
     60e:	f157 0700 	adcs.w	r7, r7, #0
     612:	f158 0800 	adcs.w	r8, r8, #0
     616:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     61a:	eb5a 0a01 	adcs.w	sl, sl, r1
     61e:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     622:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     626:	4770      	bx	lr

00000628 <ocrypto_mod_p256_sub>:
     628:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     62c:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     630:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     634:	1a5b      	subs	r3, r3, r1
     636:	eb74 040c 	sbcs.w	r4, r4, ip
     63a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     63e:	418d      	sbcs	r5, r1
     640:	eb76 060c 	sbcs.w	r6, r6, ip
     644:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     648:	418f      	sbcs	r7, r1
     64a:	eb78 080c 	sbcs.w	r8, r8, ip
     64e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     652:	eb79 0901 	sbcs.w	r9, r9, r1
     656:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     65a:	4189      	sbcs	r1, r1
     65c:	185b      	adds	r3, r3, r1
     65e:	414c      	adcs	r4, r1
     660:	414d      	adcs	r5, r1
     662:	f156 0600 	adcs.w	r6, r6, #0
     666:	f157 0700 	adcs.w	r7, r7, #0
     66a:	f158 0800 	adcs.w	r8, r8, #0
     66e:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     672:	eb5a 0a01 	adcs.w	sl, sl, r1
     676:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     67a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     67e:	4770      	bx	lr

00000680 <mul_reduce>:
     680:	eb18 0804 	adds.w	r8, r8, r4
     684:	eb59 0905 	adcs.w	r9, r9, r5
     688:	eb5a 0a06 	adcs.w	sl, sl, r6
     68c:	eb5b 0b07 	adcs.w	fp, fp, r7
     690:	f05f 0c00 	movs.w	ip, #0
     694:	f14c 0c00 	adc.w	ip, ip, #0
     698:	eb18 0805 	adds.w	r8, r8, r5
     69c:	eb59 0906 	adcs.w	r9, r9, r6
     6a0:	eb5a 0a07 	adcs.w	sl, sl, r7
     6a4:	eb5b 0b07 	adcs.w	fp, fp, r7
     6a8:	eb50 000c 	adcs.w	r0, r0, ip
     6ac:	f05f 0c00 	movs.w	ip, #0
     6b0:	eb51 010c 	adcs.w	r1, r1, ip
     6b4:	eb52 020c 	adcs.w	r2, r2, ip
     6b8:	4163      	adcs	r3, r4
     6ba:	f14c 0c00 	adc.w	ip, ip, #0
     6be:	ebb8 0807 	subs.w	r8, r8, r7
     6c2:	f179 0900 	sbcs.w	r9, r9, #0
     6c6:	f17a 0a00 	sbcs.w	sl, sl, #0
     6ca:	eb7b 0b04 	sbcs.w	fp, fp, r4
     6ce:	41a8      	sbcs	r0, r5
     6d0:	41b1      	sbcs	r1, r6
     6d2:	41a2      	sbcs	r2, r4
     6d4:	41b3      	sbcs	r3, r6
     6d6:	f16c 0c00 	sbc.w	ip, ip, #0
     6da:	ebbb 0b05 	subs.w	fp, fp, r5
     6de:	41b0      	sbcs	r0, r6
     6e0:	41b9      	sbcs	r1, r7
     6e2:	41aa      	sbcs	r2, r5
     6e4:	41bb      	sbcs	r3, r7
     6e6:	f16c 0c00 	sbc.w	ip, ip, #0
     6ea:	f04c 0601 	orr.w	r6, ip, #1
     6ee:	f08c 0702 	eor.w	r7, ip, #2
     6f2:	eb18 0806 	adds.w	r8, r8, r6
     6f6:	eb59 096c 	adcs.w	r9, r9, ip, asr #1
     6fa:	eb5a 0a6c 	adcs.w	sl, sl, ip, asr #1
     6fe:	eb7b 0b6c 	sbcs.w	fp, fp, ip, asr #1
     702:	eb70 046c 	sbcs.w	r4, r0, ip, asr #1
     706:	eb71 056c 	sbcs.w	r5, r1, ip, asr #1
     70a:	eb72 0667 	sbcs.w	r6, r2, r7, asr #1
     70e:	eb53 076c 	adcs.w	r7, r3, ip, asr #1
     712:	eb6c 0c6c 	sbc.w	ip, ip, ip, asr #1
     716:	eb18 000c 	adds.w	r0, r8, ip
     71a:	eb59 010c 	adcs.w	r1, r9, ip
     71e:	eb5a 020c 	adcs.w	r2, sl, ip
     722:	f15b 0300 	adcs.w	r3, fp, #0
     726:	f154 0400 	adcs.w	r4, r4, #0
     72a:	f155 0500 	adcs.w	r5, r5, #0
     72e:	eb56 76dc 	adcs.w	r6, r6, ip, lsr #31
     732:	eb57 070c 	adcs.w	r7, r7, ip
     736:	4770      	bx	lr

00000738 <ocrypto_mod_p256_mul>:
     738:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     73c:	b087      	sub	sp, #28
     73e:	f7ff fdaf 	bl	2a0 <ocrypto_mul256_noframe>
     742:	f8dd 8010 	ldr.w	r8, [sp, #16]
     746:	f8dd 9014 	ldr.w	r9, [sp, #20]
     74a:	f8dd a018 	ldr.w	sl, [sp, #24]
     74e:	f7ff ff97 	bl	680 <mul_reduce>
     752:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     756:	f7ff ff93 	bl	680 <mul_reduce>
     75a:	b003      	add	sp, #12
     75c:	f85d 8b04 	ldr.w	r8, [sp], #4
     760:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000768 <ocrypto_mod_p256_sqr>:
     768:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     76c:	b087      	sub	sp, #28
     76e:	f7ff fe53 	bl	418 <ocrypto_sqr256_noframe>
     772:	f8dd 8010 	ldr.w	r8, [sp, #16]
     776:	f8dd 9014 	ldr.w	r9, [sp, #20]
     77a:	f8dd a018 	ldr.w	sl, [sp, #24]
     77e:	f7ff ff7f 	bl	680 <mul_reduce>
     782:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     786:	f7ff ff7b 	bl	680 <mul_reduce>
     78a:	b003      	add	sp, #12
     78c:	f85d 8b04 	ldr.w	r8, [sp], #4
     790:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     798:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     79a:	4c14      	ldr	r4, [pc, #80]	; (7ec <ocrypto_mod_p256_sqr+0x84>)
     79c:	7a20      	ldrb	r0, [r4, #8]
     79e:	f88d 0001 	strb.w	r0, [sp, #1]
     7a2:	79e0      	ldrb	r0, [r4, #7]
     7a4:	f88d 0000 	strb.w	r0, [sp]
     7a8:	79a0      	ldrb	r0, [r4, #6]
     7aa:	f8ad 0004 	strh.w	r0, [sp, #4]
     7ae:	7960      	ldrb	r0, [r4, #5]
     7b0:	f8ad 0002 	strh.w	r0, [sp, #2]
     7b4:	4668      	mov	r0, sp
     7b6:	f006 fae3 	bl	6d80 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
     7ba:	b108      	cbz	r0, 7c0 <ocrypto_mod_p256_sqr+0x58>
     7bc:	21ad      	movs	r1, #173	; 0xad
     7be:	e010      	b.n	7e2 <ocrypto_mod_p256_sqr+0x7a>
     7c0:	68e0      	ldr	r0, [r4, #12]
     7c2:	9002      	str	r0, [sp, #8]
     7c4:	a802      	add	r0, sp, #8
     7c6:	f006 faf1 	bl	6dac <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
     7ca:	b108      	cbz	r0, 7d0 <ocrypto_mod_p256_sqr+0x68>
     7cc:	21b1      	movs	r1, #177	; 0xb1
     7ce:	e008      	b.n	7e2 <ocrypto_mod_p256_sqr+0x7a>
     7d0:	4807      	ldr	r0, [pc, #28]	; (7f0 <ocrypto_mod_p256_sqr+0x88>)
     7d2:	6800      	ldr	r0, [r0, #0]
     7d4:	9003      	str	r0, [sp, #12]
     7d6:	a803      	add	r0, sp, #12
     7d8:	f00f fbdc 	bl	ff94 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
     7dc:	2800      	cmp	r0, #0
     7de:	d003      	beq.n	7e8 <ocrypto_mod_p256_sqr+0x80>
     7e0:	21b5      	movs	r1, #181	; 0xb5
     7e2:	2003      	movs	r0, #3
     7e4:	f000 f8e4 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     7e8:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
     7ea:	0000      	.short	0x0000
     7ec:	20001190 	.word	0x20001190
     7f0:	00000ab8 	.word	0x00000ab8

000007f4 <sdc_build_revision_get>:
     7f4:	b510      	push	{r4, lr}
     7f6:	b128      	cbz	r0, 804 <CONFIG_ISR_STACK_SIZE+0x4>
     7f8:	2214      	movs	r2, #20
     7fa:	4904      	ldr	r1, [pc, #16]	; (80c <CONFIG_ISR_STACK_SIZE+0xc>)
     7fc:	f010 fb43 	bl	10e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     800:	2000      	movs	r0, #0
     802:	bd10      	pop	{r4, pc}
     804:	f06f 0015 	mvn.w	r0, #21
     808:	bd10      	pop	{r4, pc}
     80a:	0000      	.short	0x0000
     80c:	00000ae0 	.word	0x00000ae0

00000810 <sdc_cfg_set>:
     810:	b570      	push	{r4, r5, r6, lr}
     812:	f06f 052c 	mvn.w	r5, #44	; 0x2c
     816:	bb78      	cbnz	r0, 878 <__z_interrupt_stack_SIZEOF+0x38>
     818:	4c22      	ldr	r4, [pc, #136]	; (8a4 <CONFIG_BT_RX_STACK_SIZE+0xc>)
     81a:	7860      	ldrb	r0, [r4, #1]
     81c:	b108      	cbz	r0, 822 <sdc_cfg_set+0x12>
     81e:	11a8      	asrs	r0, r5, #6
     820:	bd70      	pop	{r4, r5, r6, pc}
     822:	b1f9      	cbz	r1, 864 <__z_interrupt_stack_SIZEOF+0x24>
     824:	f06f 0015 	mvn.w	r0, #21
     828:	2a00      	cmp	r2, #0
     82a:	d0f9      	beq.n	820 <sdc_cfg_set+0x10>
     82c:	4b1e      	ldr	r3, [pc, #120]	; (8a8 <CONFIG_BT_RX_STACK_SIZE+0x10>)
     82e:	1e89      	subs	r1, r1, #2
     830:	2907      	cmp	r1, #7
     832:	d231      	bcs.n	898 <CONFIG_BT_RX_STACK_SIZE>
     834:	e8df f001 	tbb	[pc, r1]
     838:	1a170704 	.word	0x1a170704
     83c:	00211d30 	.word	0x00211d30
     840:	7810      	ldrb	r0, [r2, #0]
     842:	7058      	strb	r0, [r3, #1]
     844:	e01d      	b.n	882 <__z_interrupt_stack_SIZEOF+0x42>
     846:	7891      	ldrb	r1, [r2, #2]
     848:	2900      	cmp	r1, #0
     84a:	d0e9      	beq.n	820 <sdc_cfg_set+0x10>
     84c:	78d1      	ldrb	r1, [r2, #3]
     84e:	2900      	cmp	r1, #0
     850:	d0e6      	beq.n	820 <sdc_cfg_set+0x10>
     852:	7811      	ldrb	r1, [r2, #0]
     854:	291b      	cmp	r1, #27
     856:	d3e3      	bcc.n	820 <sdc_cfg_set+0x10>
     858:	7851      	ldrb	r1, [r2, #1]
     85a:	291b      	cmp	r1, #27
     85c:	d3e0      	bcc.n	820 <sdc_cfg_set+0x10>
     85e:	6810      	ldr	r0, [r2, #0]
     860:	f8c3 0005 	str.w	r0, [r3, #5]
     864:	e00d      	b.n	882 <__z_interrupt_stack_SIZEOF+0x42>
     866:	6810      	ldr	r0, [r2, #0]
     868:	60d8      	str	r0, [r3, #12]
     86a:	e00a      	b.n	882 <__z_interrupt_stack_SIZEOF+0x42>
     86c:	7810      	ldrb	r0, [r2, #0]
     86e:	7098      	strb	r0, [r3, #2]
     870:	e007      	b.n	882 <__z_interrupt_stack_SIZEOF+0x42>
     872:	8810      	ldrh	r0, [r2, #0]
     874:	8258      	strh	r0, [r3, #18]
     876:	e004      	b.n	882 <__z_interrupt_stack_SIZEOF+0x42>
     878:	e00e      	b.n	898 <CONFIG_BT_RX_STACK_SIZE>
     87a:	8811      	ldrh	r1, [r2, #0]
     87c:	29ff      	cmp	r1, #255	; 0xff
     87e:	d8cf      	bhi.n	820 <sdc_cfg_set+0x10>
     880:	7519      	strb	r1, [r3, #20]
     882:	2201      	movs	r2, #1
     884:	4908      	ldr	r1, [pc, #32]	; (8a8 <CONFIG_BT_RX_STACK_SIZE+0x10>)
     886:	2000      	movs	r0, #0
     888:	f00c f914 	bl	cab4 <__udivmoddi4+0x2a0>
     88c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
     890:	db04      	blt.n	89c <CONFIG_BT_RX_STACK_SIZE+0x4>
     892:	f06f 000b 	mvn.w	r0, #11
     896:	bd70      	pop	{r4, r5, r6, pc}
     898:	4628      	mov	r0, r5
     89a:	bd70      	pop	{r4, r5, r6, pc}
     89c:	2101      	movs	r1, #1
     89e:	70a1      	strb	r1, [r4, #2]
     8a0:	bd70      	pop	{r4, r5, r6, pc}
     8a2:	0000      	.short	0x0000
     8a4:	20000040 	.word	0x20000040
     8a8:	20001190 	.word	0x20001190

000008ac <sdc_disable>:
     8ac:	b510      	push	{r4, lr}
     8ae:	4c07      	ldr	r4, [pc, #28]	; (8cc <sdc_disable+0x20>)
     8b0:	7860      	ldrb	r0, [r4, #1]
     8b2:	b120      	cbz	r0, 8be <sdc_disable+0x12>
     8b4:	f006 fd60 	bl	7378 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
     8b8:	7820      	ldrb	r0, [r4, #0]
     8ba:	f00b fecb 	bl	c654 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
     8be:	f000 fe4d 	bl	155c <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>
     8c2:	f000 ff25 	bl	1710 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>
     8c6:	2000      	movs	r0, #0
     8c8:	7060      	strb	r0, [r4, #1]
     8ca:	bd10      	pop	{r4, pc}
     8cc:	20000040 	.word	0x20000040

000008d0 <sdc_enable>:
     8d0:	b570      	push	{r4, r5, r6, lr}
     8d2:	460c      	mov	r4, r1
     8d4:	0005      	movs	r5, r0
     8d6:	d002      	beq.n	8de <sdc_enable+0xe>
     8d8:	b10c      	cbz	r4, 8de <sdc_enable+0xe>
     8da:	0760      	lsls	r0, r4, #29
     8dc:	d002      	beq.n	8e4 <sdc_enable+0x14>
     8de:	f06f 0015 	mvn.w	r0, #21
     8e2:	bd70      	pop	{r4, r5, r6, pc}
     8e4:	f000 f922 	bl	b2c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
     8e8:	b1a8      	cbz	r0, 916 <sdc_enable+0x46>
     8ea:	4628      	mov	r0, r5
     8ec:	f00b fe78 	bl	c5e0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
     8f0:	4d0a      	ldr	r5, [pc, #40]	; (91c <sdc_enable+0x4c>)
     8f2:	2200      	movs	r2, #0
     8f4:	490a      	ldr	r1, [pc, #40]	; (920 <sdc_enable+0x50>)
     8f6:	7028      	strb	r0, [r5, #0]
     8f8:	4620      	mov	r0, r4
     8fa:	f00c f8db 	bl	cab4 <__udivmoddi4+0x2a0>
     8fe:	f00f ff58 	bl	107b2 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
     902:	2100      	movs	r1, #0
     904:	7828      	ldrb	r0, [r5, #0]
     906:	f006 fd21 	bl	734c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
     90a:	f7ff ff45 	bl	798 <ocrypto_mod_p256_sqr+0x30>
     90e:	2001      	movs	r0, #1
     910:	7068      	strb	r0, [r5, #1]
     912:	2000      	movs	r0, #0
     914:	bd70      	pop	{r4, r5, r6, pc}
     916:	f04f 30ff 	mov.w	r0, #4294967295
     91a:	bd70      	pop	{r4, r5, r6, pc}
     91c:	20000040 	.word	0x20000040
     920:	20001190 	.word	0x20001190

00000924 <sdc_init>:
     924:	b530      	push	{r4, r5, lr}
     926:	b089      	sub	sp, #36	; 0x24
     928:	0004      	movs	r4, r0
     92a:	d00c      	beq.n	946 <sdc_init+0x22>
     92c:	f00b fe00 	bl	c530 <mpsl_is_initialized>
     930:	f04f 35ff 	mov.w	r5, #4294967295
     934:	b120      	cbz	r0, 940 <sdc_init+0x1c>
     936:	f00b fc93 	bl	c260 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
     93a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
     93e:	d905      	bls.n	94c <sdc_init+0x28>
     940:	4628      	mov	r0, r5
     942:	b009      	add	sp, #36	; 0x24
     944:	bd30      	pop	{r4, r5, pc}
     946:	f06f 0015 	mvn.w	r0, #21
     94a:	e7fa      	b.n	942 <sdc_init+0x1e>
     94c:	4d13      	ldr	r5, [pc, #76]	; (99c <__data_size+0x1d>)
     94e:	4814      	ldr	r0, [pc, #80]	; (9a0 <__data_size+0x21>)
     950:	606c      	str	r4, [r5, #4]
     952:	f000 fa07 	bl	d64 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
     956:	2000      	movs	r0, #0
     958:	7068      	strb	r0, [r5, #1]
     95a:	70a8      	strb	r0, [r5, #2]
     95c:	4601      	mov	r1, r0
     95e:	2224      	movs	r2, #36	; 0x24
     960:	4668      	mov	r0, sp
     962:	f010 fb0a 	bl	10f7a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     966:	2224      	movs	r2, #36	; 0x24
     968:	490e      	ldr	r1, [pc, #56]	; (9a4 <__data_size+0x25>)
     96a:	4668      	mov	r0, sp
     96c:	f010 fa8b 	bl	10e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     970:	2224      	movs	r2, #36	; 0x24
     972:	4669      	mov	r1, sp
     974:	480c      	ldr	r0, [pc, #48]	; (9a8 <__data_size+0x29>)
     976:	f010 fa86 	bl	10e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     97a:	f3ef 8410 	mrs	r4, PRIMASK
     97e:	b672      	cpsid	i
     980:	f000 fdfa 	bl	1578 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
     984:	4809      	ldr	r0, [pc, #36]	; (9ac <__data_size+0x2d>)
     986:	f000 fecf 	bl	1728 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
     98a:	b118      	cbz	r0, 994 <__data_size+0x15>
     98c:	21cb      	movs	r1, #203	; 0xcb
     98e:	2003      	movs	r0, #3
     990:	f000 f80e 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     994:	b904      	cbnz	r4, 998 <__data_size+0x19>
     996:	b662      	cpsie	i
     998:	2000      	movs	r0, #0
     99a:	e7d2      	b.n	942 <sdc_init+0x1e>
     99c:	20000040 	.word	0x20000040
     9a0:	00000799 	.word	0x00000799
     9a4:	00000abc 	.word	0x00000abc
     9a8:	20001190 	.word	0x20001190
     9ac:	00000b59 	.word	0x00000b59

000009b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
     9b0:	b50e      	push	{r1, r2, r3, lr}
     9b2:	b672      	cpsid	i
     9b4:	4a15      	ldr	r2, [pc, #84]	; (a0c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
     9b6:	6855      	ldr	r5, [r2, #4]
     9b8:	b1dd      	cbz	r5, 9f2 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
     9ba:	2200      	movs	r2, #0
     9bc:	4603      	mov	r3, r0
     9be:	466e      	mov	r6, sp
     9c0:	240a      	movs	r4, #10
     9c2:	e003      	b.n	9cc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
     9c4:	fbb0 f0f4 	udiv	r0, r0, r4
     9c8:	1c52      	adds	r2, r2, #1
     9ca:	b2d2      	uxtb	r2, r2
     9cc:	2800      	cmp	r0, #0
     9ce:	d1f9      	bne.n	9c4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
     9d0:	54b0      	strb	r0, [r6, r2]
     9d2:	e00a      	b.n	9ea <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
     9d4:	b2d8      	uxtb	r0, r3
     9d6:	fbb0 f7f4 	udiv	r7, r0, r4
     9da:	fbb3 f3f4 	udiv	r3, r3, r4
     9de:	fb04 0017 	mls	r0, r4, r7, r0
     9e2:	1e52      	subs	r2, r2, #1
     9e4:	b2d2      	uxtb	r2, r2
     9e6:	3030      	adds	r0, #48	; 0x30
     9e8:	54b0      	strb	r0, [r6, r2]
     9ea:	2a00      	cmp	r2, #0
     9ec:	d1f2      	bne.n	9d4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
     9ee:	4630      	mov	r0, r6
     9f0:	47a8      	blx	r5
     9f2:	f3bf 8f4f 	dsb	sy
     9f6:	4806      	ldr	r0, [pc, #24]	; (a10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
     9f8:	6801      	ldr	r1, [r0, #0]
     9fa:	4a06      	ldr	r2, [pc, #24]	; (a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
     9fc:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
     a00:	4311      	orrs	r1, r2
     a02:	6001      	str	r1, [r0, #0]
     a04:	f3bf 8f4f 	dsb	sy
     a08:	bf00      	nop
     a0a:	e7fd      	b.n	a08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
     a0c:	20000040 	.word	0x20000040
     a10:	e000ed0c 	.word	0xe000ed0c
     a14:	05fa0004 	.word	0x05fa0004

00000a18 <sdc_support_adv>:
     a18:	4806      	ldr	r0, [pc, #24]	; (a34 <sdc_support_adv+0x1c>)
     a1a:	b510      	push	{r4, lr}
     a1c:	7881      	ldrb	r1, [r0, #2]
     a1e:	7840      	ldrb	r0, [r0, #1]
     a20:	4301      	orrs	r1, r0
     a22:	d002      	beq.n	a2a <sdc_support_adv+0x12>
     a24:	f04f 30ff 	mov.w	r0, #4294967295
     a28:	bd10      	pop	{r4, pc}
     a2a:	f006 fcb5 	bl	7398 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
     a2e:	2000      	movs	r0, #0
     a30:	bd10      	pop	{r4, pc}
     a32:	0000      	.short	0x0000
     a34:	20000040 	.word	0x20000040

00000a38 <sdc_support_dle_peripheral>:
     a38:	4806      	ldr	r0, [pc, #24]	; (a54 <sdc_support_dle_peripheral+0x1c>)
     a3a:	b510      	push	{r4, lr}
     a3c:	7881      	ldrb	r1, [r0, #2]
     a3e:	7840      	ldrb	r0, [r0, #1]
     a40:	4301      	orrs	r1, r0
     a42:	d002      	beq.n	a4a <sdc_support_dle_peripheral+0x12>
     a44:	f04f 30ff 	mov.w	r0, #4294967295
     a48:	bd10      	pop	{r4, pc}
     a4a:	f006 facd 	bl	6fe8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>
     a4e:	2000      	movs	r0, #0
     a50:	bd10      	pop	{r4, pc}
     a52:	0000      	.short	0x0000
     a54:	20000040 	.word	0x20000040

00000a58 <sdc_support_le_2m_phy>:
     a58:	4806      	ldr	r0, [pc, #24]	; (a74 <sdc_support_le_2m_phy+0x1c>)
     a5a:	b510      	push	{r4, lr}
     a5c:	7881      	ldrb	r1, [r0, #2]
     a5e:	7840      	ldrb	r0, [r0, #1]
     a60:	4301      	orrs	r1, r0
     a62:	d002      	beq.n	a6a <sdc_support_le_2m_phy+0x12>
     a64:	f04f 30ff 	mov.w	r0, #4294967295
     a68:	bd10      	pop	{r4, pc}
     a6a:	f00f fc37 	bl	102dc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
     a6e:	2000      	movs	r0, #0
     a70:	bd10      	pop	{r4, pc}
     a72:	0000      	.short	0x0000
     a74:	20000040 	.word	0x20000040

00000a78 <sdc_support_peripheral>:
     a78:	4806      	ldr	r0, [pc, #24]	; (a94 <sdc_support_peripheral+0x1c>)
     a7a:	b510      	push	{r4, lr}
     a7c:	7881      	ldrb	r1, [r0, #2]
     a7e:	7840      	ldrb	r0, [r0, #1]
     a80:	4301      	orrs	r1, r0
     a82:	d002      	beq.n	a8a <sdc_support_peripheral+0x12>
     a84:	f04f 30ff 	mov.w	r0, #4294967295
     a88:	bd10      	pop	{r4, pc}
     a8a:	f006 fc97 	bl	73bc <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
     a8e:	2000      	movs	r0, #0
     a90:	bd10      	pop	{r4, pc}
     a92:	0000      	.short	0x0000
     a94:	20000040 	.word	0x20000040

00000a98 <sdc_support_phy_update_peripheral>:
     a98:	4806      	ldr	r0, [pc, #24]	; (ab4 <sdc_support_phy_update_peripheral+0x1c>)
     a9a:	b510      	push	{r4, lr}
     a9c:	7881      	ldrb	r1, [r0, #2]
     a9e:	7840      	ldrb	r0, [r0, #1]
     aa0:	4301      	orrs	r1, r0
     aa2:	d002      	beq.n	aaa <sdc_support_phy_update_peripheral+0x12>
     aa4:	f04f 30ff 	mov.w	r0, #4294967295
     aa8:	bd10      	pop	{r4, pc}
     aaa:	f00f fc2b 	bl	10304 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>
     aae:	2000      	movs	r0, #0
     ab0:	bd10      	pop	{r4, pc}
     ab2:	0000      	.short	0x0000
     ab4:	20000040 	.word	0x20000040
     ab8:	00000001 	.word	0x00000001
     abc:	00010100 	.word	0x00010100
     ac0:	031b1b00 	.word	0x031b1b00
     ac4:	00000002 	.word	0x00000002
     ac8:	00001d4c 	.word	0x00001d4c
     acc:	001f0000 	.word	0x001f0000
     ad0:	00000008 	.word	0x00000008
	...
     ae0:	c12e7ee0 	.word	0xc12e7ee0
     ae4:	2385055e 	.word	0x2385055e
     ae8:	fadc1546 	.word	0xfadc1546
     aec:	707d298e 	.word	0x707d298e
     af0:	fca59310 	.word	0xfca59310

00000af4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
     af4:	4a05      	ldr	r2, [pc, #20]	; (b0c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
     af6:	b510      	push	{r4, lr}
     af8:	6852      	ldr	r2, [r2, #4]
     afa:	b112      	cbz	r2, b02 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
     afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     b00:	4710      	bx	r2
     b02:	2192      	movs	r1, #146	; 0x92
     b04:	2004      	movs	r0, #4
     b06:	f7ff ff53 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     b0a:	0000      	.short	0x0000
     b0c:	200011b4 	.word	0x200011b4

00000b10 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
     b10:	4a05      	ldr	r2, [pc, #20]	; (b28 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
     b12:	b510      	push	{r4, lr}
     b14:	6892      	ldr	r2, [r2, #8]
     b16:	b112      	cbz	r2, b1e <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
     b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     b1c:	4710      	bx	r2
     b1e:	2198      	movs	r1, #152	; 0x98
     b20:	2004      	movs	r0, #4
     b22:	f7ff ff45 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     b26:	0000      	.short	0x0000
     b28:	200011b4 	.word	0x200011b4

00000b2c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
     b2c:	4805      	ldr	r0, [pc, #20]	; (b44 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
     b2e:	6801      	ldr	r1, [r0, #0]
     b30:	b129      	cbz	r1, b3e <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     b32:	6841      	ldr	r1, [r0, #4]
     b34:	b119      	cbz	r1, b3e <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     b36:	6880      	ldr	r0, [r0, #8]
     b38:	b108      	cbz	r0, b3e <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     b3a:	2001      	movs	r0, #1
     b3c:	4770      	bx	lr
     b3e:	2000      	movs	r0, #0
     b40:	4770      	bx	lr
     b42:	0000      	.short	0x0000
     b44:	200011b4 	.word	0x200011b4

00000b48 <sdc_rand_source_register>:
     b48:	4902      	ldr	r1, [pc, #8]	; (b54 <sdc_rand_source_register+0xc>)
     b4a:	c80d      	ldmia	r0, {r0, r2, r3}
     b4c:	e881 000d 	stmia.w	r1, {r0, r2, r3}
     b50:	2000      	movs	r0, #0
     b52:	4770      	bx	lr
     b54:	200011b4 	.word	0x200011b4

00000b58 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
     b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b5a:	4c12      	ldr	r4, [pc, #72]	; (ba4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
     b5c:	2600      	movs	r6, #0
     b5e:	6825      	ldr	r5, [r4, #0]
     b60:	e011      	b.n	b86 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
     b62:	9800      	ldr	r0, [sp, #0]
     b64:	2802      	cmp	r0, #2
     b66:	d002      	beq.n	b6e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
     b68:	2803      	cmp	r0, #3
     b6a:	d10c      	bne.n	b86 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
     b6c:	e006      	b.n	b7c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
     b6e:	6820      	ldr	r0, [r4, #0]
     b70:	b110      	cbz	r0, b78 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
     b72:	2000      	movs	r0, #0
     b74:	6026      	str	r6, [r4, #0]
     b76:	e005      	b.n	b84 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
     b78:	2128      	movs	r1, #40	; 0x28
     b7a:	e00c      	b.n	b96 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
     b7c:	6820      	ldr	r0, [r4, #0]
     b7e:	b168      	cbz	r0, b9c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
     b80:	2001      	movs	r0, #1
     b82:	6026      	str	r6, [r4, #0]
     b84:	47a8      	blx	r5
     b86:	4668      	mov	r0, sp
     b88:	f000 fd94 	bl	16b4 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
     b8c:	2800      	cmp	r0, #0
     b8e:	d0e8      	beq.n	b62 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
     b90:	2805      	cmp	r0, #5
     b92:	d005      	beq.n	ba0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
     b94:	2135      	movs	r1, #53	; 0x35
     b96:	2004      	movs	r0, #4
     b98:	f7ff ff0a 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     b9c:	212d      	movs	r1, #45	; 0x2d
     b9e:	e7fa      	b.n	b96 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
     ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     ba2:	0000      	.short	0x0000
     ba4:	20000048 	.word	0x20000048

00000ba8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>:
     ba8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
     bac:	4e28      	ldr	r6, [pc, #160]	; (c50 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>)
     bae:	4605      	mov	r5, r0
     bb0:	1d00      	adds	r0, r0, #4
     bb2:	f106 0744 	add.w	r7, r6, #68	; 0x44
     bb6:	6030      	str	r0, [r6, #0]
     bb8:	7838      	ldrb	r0, [r7, #0]
     bba:	b158      	cbz	r0, bd4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x2c>
     bbc:	78ba      	ldrb	r2, [r7, #2]
     bbe:	463c      	mov	r4, r7
     bc0:	1c79      	adds	r1, r7, #1
     bc2:	4628      	mov	r0, r5
     bc4:	1c92      	adds	r2, r2, #2
     bc6:	f010 f95e 	bl	10e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     bca:	2000      	movs	r0, #0
     bcc:	7020      	strb	r0, [r4, #0]
     bce:	2004      	movs	r0, #4
     bd0:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
     bd4:	481e      	ldr	r0, [pc, #120]	; (c50 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>)
     bd6:	f001 ff6d 	bl	2ab4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
     bda:	4604      	mov	r4, r0
     bdc:	2802      	cmp	r0, #2
     bde:	d004      	beq.n	bea <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x42>
     be0:	2c04      	cmp	r4, #4
     be2:	d007      	beq.n	bf4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x4c>
     be4:	2c08      	cmp	r4, #8
     be6:	d02c      	beq.n	c42 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9a>
     be8:	e02f      	b.n	c4a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa2>
     bea:	4919      	ldr	r1, [pc, #100]	; (c50 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>)
     bec:	4628      	mov	r0, r5
     bee:	f00c f826 	bl	cc3e <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
     bf2:	e02a      	b.n	c4a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa2>
     bf4:	7830      	ldrb	r0, [r6, #0]
     bf6:	2808      	cmp	r0, #8
     bf8:	d104      	bne.n	c04 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x5c>
     bfa:	2105      	movs	r1, #5
     bfc:	203e      	movs	r0, #62	; 0x3e
     bfe:	f00b fff0 	bl	cbe2 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
     c02:	b150      	cbz	r0, c1a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x72>
     c04:	4912      	ldr	r1, [pc, #72]	; (c50 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>)
     c06:	4628      	mov	r0, r5
     c08:	f00c f87e 	bl	cd08 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
     c0c:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
     c10:	d30e      	bcc.n	c30 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x88>
     c12:	21c7      	movs	r1, #199	; 0xc7
     c14:	2008      	movs	r0, #8
     c16:	f7ff fecb 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     c1a:	88b0      	ldrh	r0, [r6, #4]
     c1c:	f8ad 0000 	strh.w	r0, [sp]
     c20:	a901      	add	r1, sp, #4
     c22:	4668      	mov	r0, sp
     c24:	f00c fae0 	bl	d1e8 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
     c28:	2800      	cmp	r0, #0
     c2a:	d0c5      	beq.n	bb8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
     c2c:	21a8      	movs	r1, #168	; 0xa8
     c2e:	e7f1      	b.n	c14 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x6c>
     c30:	2800      	cmp	r0, #0
     c32:	d0c1      	beq.n	bb8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
     c34:	78a9      	ldrb	r1, [r5, #2]
     c36:	7828      	ldrb	r0, [r5, #0]
     c38:	f00b ffd3 	bl	cbe2 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
     c3c:	2800      	cmp	r0, #0
     c3e:	d0bb      	beq.n	bb8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
     c40:	e003      	b.n	c4a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa2>
     c42:	4903      	ldr	r1, [pc, #12]	; (c50 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>)
     c44:	4628      	mov	r0, r5
     c46:	f00c f828 	bl	cc9a <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>
     c4a:	4620      	mov	r0, r4
     c4c:	e7c0      	b.n	bd0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x28>
     c4e:	0000      	.short	0x0000
     c50:	200011c0 	.word	0x200011c0
     c54:	b570      	push	{r4, r5, r6, lr}
     c56:	780a      	ldrb	r2, [r1, #0]
     c58:	7082      	strb	r2, [r0, #2]
     c5a:	b33a      	cbz	r2, cac <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x104>
     c5c:	2a01      	cmp	r2, #1
     c5e:	d825      	bhi.n	cac <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x104>
     c60:	2313      	movs	r3, #19
     c62:	7003      	strb	r3, [r0, #0]
     c64:	2300      	movs	r3, #0
     c66:	e00a      	b.n	c7e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xd6>
     c68:	eb01 0443 	add.w	r4, r1, r3, lsl #1
     c6c:	eb00 0543 	add.w	r5, r0, r3, lsl #1
     c70:	78a6      	ldrb	r6, [r4, #2]
     c72:	70ee      	strb	r6, [r5, #3]
     c74:	8864      	ldrh	r4, [r4, #2]
     c76:	0a24      	lsrs	r4, r4, #8
     c78:	1c5b      	adds	r3, r3, #1
     c7a:	712c      	strb	r4, [r5, #4]
     c7c:	b2db      	uxtb	r3, r3
     c7e:	4293      	cmp	r3, r2
     c80:	d3f2      	bcc.n	c68 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xc0>
     c82:	2300      	movs	r3, #0
     c84:	e00b      	b.n	c9e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xf6>
     c86:	bf00      	nop
     c88:	eb01 0543 	add.w	r5, r1, r3, lsl #1
     c8c:	eb00 0443 	add.w	r4, r0, r3, lsl #1
     c90:	792e      	ldrb	r6, [r5, #4]
     c92:	7166      	strb	r6, [r4, #5]
     c94:	88ad      	ldrh	r5, [r5, #4]
     c96:	0a2d      	lsrs	r5, r5, #8
     c98:	1c5b      	adds	r3, r3, #1
     c9a:	71a5      	strb	r5, [r4, #6]
     c9c:	b2db      	uxtb	r3, r3
     c9e:	4293      	cmp	r3, r2
     ca0:	d3f2      	bcc.n	c88 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xe0>
     ca2:	2101      	movs	r1, #1
     ca4:	eb01 0082 	add.w	r0, r1, r2, lsl #2
     ca8:	b2c0      	uxtb	r0, r0
     caa:	bd70      	pop	{r4, r5, r6, pc}
     cac:	2000      	movs	r0, #0
     cae:	bd70      	pop	{r4, r5, r6, pc}

00000cb0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
     cb0:	2840      	cmp	r0, #64	; 0x40
     cb2:	d203      	bcs.n	cbc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
     cb4:	1e40      	subs	r0, r0, #1
     cb6:	b2c1      	uxtb	r1, r0
     cb8:	4805      	ldr	r0, [pc, #20]	; (cd0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
     cba:	e005      	b.n	cc8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
     cbc:	28ff      	cmp	r0, #255	; 0xff
     cbe:	d005      	beq.n	ccc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
     cc0:	3840      	subs	r0, #64	; 0x40
     cc2:	b2c1      	uxtb	r1, r0
     cc4:	4802      	ldr	r0, [pc, #8]	; (cd0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
     cc6:	3008      	adds	r0, #8
     cc8:	f00c ba1d 	b.w	d106 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
     ccc:	2001      	movs	r0, #1
     cce:	4770      	bx	lr
     cd0:	2000004c 	.word	0x2000004c

00000cd4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
     cd4:	1e40      	subs	r0, r0, #1
     cd6:	b2c1      	uxtb	r1, r0
     cd8:	4801      	ldr	r0, [pc, #4]	; (ce0 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
     cda:	f00c ba14 	b.w	d106 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
     cde:	0000      	.short	0x0000
     ce0:	2000005c 	.word	0x2000005c

00000ce4 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
     ce4:	4902      	ldr	r1, [pc, #8]	; (cf0 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0xc>)
     ce6:	6802      	ldr	r2, [r0, #0]
     ce8:	610a      	str	r2, [r1, #16]
     cea:	6840      	ldr	r0, [r0, #4]
     cec:	6148      	str	r0, [r1, #20]
     cee:	4770      	bx	lr
     cf0:	2000004c 	.word	0x2000004c

00000cf4 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
     cf4:	4905      	ldr	r1, [pc, #20]	; (d0c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
     cf6:	6802      	ldr	r2, [r0, #0]
     cf8:	600a      	str	r2, [r1, #0]
     cfa:	6840      	ldr	r0, [r0, #4]
     cfc:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
     d00:	600a      	str	r2, [r1, #0]
     d02:	4a03      	ldr	r2, [pc, #12]	; (d10 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
     d04:	4310      	orrs	r0, r2
     d06:	6048      	str	r0, [r1, #4]
     d08:	4770      	bx	lr
     d0a:	0000      	.short	0x0000
     d0c:	2000004c 	.word	0x2000004c
     d10:	024007f8 	.word	0x024007f8

00000d14 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
     d14:	4902      	ldr	r1, [pc, #8]	; (d20 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0xc>)
     d16:	6802      	ldr	r2, [r0, #0]
     d18:	608a      	str	r2, [r1, #8]
     d1a:	6840      	ldr	r0, [r0, #4]
     d1c:	60c8      	str	r0, [r1, #12]
     d1e:	4770      	bx	lr
     d20:	2000004c 	.word	0x2000004c

00000d24 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
     d24:	4807      	ldr	r0, [pc, #28]	; (d44 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
     d26:	f04f 31ff 	mov.w	r1, #4294967295
     d2a:	2200      	movs	r2, #0
     d2c:	6001      	str	r1, [r0, #0]
     d2e:	0cc9      	lsrs	r1, r1, #19
     d30:	6041      	str	r1, [r0, #4]
     d32:	f100 0108 	add.w	r1, r0, #8
     d36:	201f      	movs	r0, #31
     d38:	600a      	str	r2, [r1, #0]
     d3a:	604a      	str	r2, [r1, #4]
     d3c:	3108      	adds	r1, #8
     d3e:	e9c1 0200 	strd	r0, r2, [r1]
     d42:	4770      	bx	lr
     d44:	2000004c 	.word	0x2000004c

00000d48 <sdc_hci_cmd_cb_reset>:
     d48:	b510      	push	{r4, lr}
     d4a:	f7ff ffeb 	bl	d24 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
     d4e:	f00f fa39 	bl	101c4 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
     d52:	4604      	mov	r4, r0
     d54:	4802      	ldr	r0, [pc, #8]	; (d60 <sdc_hci_cmd_cb_reset+0x18>)
     d56:	6800      	ldr	r0, [r0, #0]
     d58:	b100      	cbz	r0, d5c <sdc_hci_cmd_cb_reset+0x14>
     d5a:	4780      	blx	r0
     d5c:	4620      	mov	r0, r4
     d5e:	bd10      	pop	{r4, pc}
     d60:	20000064 	.word	0x20000064

00000d64 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
     d64:	4901      	ldr	r1, [pc, #4]	; (d6c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
     d66:	6008      	str	r0, [r1, #0]
     d68:	4770      	bx	lr
     d6a:	0000      	.short	0x0000
     d6c:	20000064 	.word	0x20000064

00000d70 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
     d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     d74:	4604      	mov	r4, r0
     d76:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
     d7a:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
     d7e:	4d1f      	ldr	r5, [pc, #124]	; (dfc <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x8c>)
     d80:	4e1e      	ldr	r6, [pc, #120]	; (dfc <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x8c>)
     d82:	3d10      	subs	r5, #16
     d84:	2210      	movs	r2, #16
     d86:	2100      	movs	r1, #0
     d88:	4620      	mov	r0, r4
     d8a:	f010 f8f6 	bl	10f7a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     d8e:	2210      	movs	r2, #16
     d90:	2100      	movs	r1, #0
     d92:	f104 0010 	add.w	r0, r4, #16
     d96:	f010 f8f0 	bl	10f7a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     d9a:	6828      	ldr	r0, [r5, #0]
     d9c:	1c40      	adds	r0, r0, #1
     d9e:	d108      	bne.n	db2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
     da0:	6868      	ldr	r0, [r5, #4]
     da2:	1c40      	adds	r0, r0, #1
     da4:	d105      	bne.n	db2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
     da6:	68a8      	ldr	r0, [r5, #8]
     da8:	1c40      	adds	r0, r0, #1
     daa:	d102      	bne.n	db2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
     dac:	68e8      	ldr	r0, [r5, #12]
     dae:	1c40      	adds	r0, r0, #1
     db0:	d007      	beq.n	dc2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x52>
     db2:	6828      	ldr	r0, [r5, #0]
     db4:	686a      	ldr	r2, [r5, #4]
     db6:	68a9      	ldr	r1, [r5, #8]
     db8:	68eb      	ldr	r3, [r5, #12]
     dba:	6120      	str	r0, [r4, #16]
     dbc:	6162      	str	r2, [r4, #20]
     dbe:	61a1      	str	r1, [r4, #24]
     dc0:	61e3      	str	r3, [r4, #28]
     dc2:	2000      	movs	r0, #0
     dc4:	f000 fd84 	bl	18d0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
     dc8:	4387      	bics	r7, r0
     dca:	07f8      	lsls	r0, r7, #31
     dcc:	d113      	bne.n	df6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x86>
     dce:	6830      	ldr	r0, [r6, #0]
     dd0:	1c40      	adds	r0, r0, #1
     dd2:	d108      	bne.n	de6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
     dd4:	6870      	ldr	r0, [r6, #4]
     dd6:	1c40      	adds	r0, r0, #1
     dd8:	d105      	bne.n	de6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
     dda:	68b0      	ldr	r0, [r6, #8]
     ddc:	1c40      	adds	r0, r0, #1
     dde:	d102      	bne.n	de6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
     de0:	68f0      	ldr	r0, [r6, #12]
     de2:	1c40      	adds	r0, r0, #1
     de4:	d007      	beq.n	df6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x86>
     de6:	6832      	ldr	r2, [r6, #0]
     de8:	6870      	ldr	r0, [r6, #4]
     dea:	68b1      	ldr	r1, [r6, #8]
     dec:	68f3      	ldr	r3, [r6, #12]
     dee:	6022      	str	r2, [r4, #0]
     df0:	6060      	str	r0, [r4, #4]
     df2:	60a1      	str	r1, [r4, #8]
     df4:	60e3      	str	r3, [r4, #12]
     df6:	2000      	movs	r0, #0
     df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     dfc:	10000090 	.word	0x10000090

00000e00 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
     e00:	b538      	push	{r3, r4, r5, lr}
     e02:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
     e06:	4604      	mov	r4, r0
     e08:	4822      	ldr	r0, [pc, #136]	; (e94 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x94>)
     e0a:	f8d1 10a0 	ldr.w	r1, [r1, #160]	; 0xa0
     e0e:	4d21      	ldr	r5, [pc, #132]	; (e94 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x94>)
     e10:	6802      	ldr	r2, [r0, #0]
     e12:	3d14      	subs	r5, #20
     e14:	1c52      	adds	r2, r2, #1
     e16:	d104      	bne.n	e22 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x22>
     e18:	6842      	ldr	r2, [r0, #4]
     e1a:	43d2      	mvns	r2, r2
     e1c:	0412      	lsls	r2, r2, #16
     e1e:	0c12      	lsrs	r2, r2, #16
     e20:	d035      	beq.n	e8e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8e>
     e22:	07c9      	lsls	r1, r1, #31
     e24:	d033      	beq.n	e8e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8e>
     e26:	6801      	ldr	r1, [r0, #0]
     e28:	6840      	ldr	r0, [r0, #4]
     e2a:	f8ad 0000 	strh.w	r0, [sp]
     e2e:	f8c4 1001 	str.w	r1, [r4, #1]
     e32:	f8bd 0000 	ldrh.w	r0, [sp]
     e36:	f8a4 0005 	strh.w	r0, [r4, #5]
     e3a:	79a0      	ldrb	r0, [r4, #6]
     e3c:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
     e40:	71a0      	strb	r0, [r4, #6]
     e42:	6828      	ldr	r0, [r5, #0]
     e44:	1c40      	adds	r0, r0, #1
     e46:	d00c      	beq.n	e62 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     e48:	6868      	ldr	r0, [r5, #4]
     e4a:	1c40      	adds	r0, r0, #1
     e4c:	d009      	beq.n	e62 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     e4e:	68a8      	ldr	r0, [r5, #8]
     e50:	1c40      	adds	r0, r0, #1
     e52:	d006      	beq.n	e62 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     e54:	68e8      	ldr	r0, [r5, #12]
     e56:	1c40      	adds	r0, r0, #1
     e58:	d003      	beq.n	e62 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     e5a:	2000      	movs	r0, #0
     e5c:	f000 fd38 	bl	18d0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
     e60:	b140      	cbz	r0, e74 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x74>
     e62:	2210      	movs	r2, #16
     e64:	2100      	movs	r1, #0
     e66:	1de0      	adds	r0, r4, #7
     e68:	f010 f887 	bl	10f7a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     e6c:	2001      	movs	r0, #1
     e6e:	7020      	strb	r0, [r4, #0]
     e70:	2000      	movs	r0, #0
     e72:	bd38      	pop	{r3, r4, r5, pc}
     e74:	682a      	ldr	r2, [r5, #0]
     e76:	6869      	ldr	r1, [r5, #4]
     e78:	68a8      	ldr	r0, [r5, #8]
     e7a:	68eb      	ldr	r3, [r5, #12]
     e7c:	f8c4 2007 	str.w	r2, [r4, #7]
     e80:	f8c4 100b 	str.w	r1, [r4, #11]
     e84:	f8c4 000f 	str.w	r0, [r4, #15]
     e88:	f8c4 3013 	str.w	r3, [r4, #19]
     e8c:	e7ee      	b.n	e6c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
     e8e:	2000      	movs	r0, #0
     e90:	e7ed      	b.n	e6e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6e>
     e92:	0000      	.short	0x0000
     e94:	100000a4 	.word	0x100000a4

00000e98 <sdc_hci_cmd_vs_zephyr_read_version_info>:
     e98:	2102      	movs	r1, #2
     e9a:	8001      	strh	r1, [r0, #0]
     e9c:	8041      	strh	r1, [r0, #2]
     e9e:	2100      	movs	r1, #0
     ea0:	7101      	strb	r1, [r0, #4]
     ea2:	21e0      	movs	r1, #224	; 0xe0
     ea4:	7141      	strb	r1, [r0, #5]
     ea6:	f642 617e 	movw	r1, #11902	; 0x2e7e
     eaa:	80c1      	strh	r1, [r0, #6]
     eac:	4901      	ldr	r1, [pc, #4]	; (eb4 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
     eae:	6081      	str	r1, [r0, #8]
     eb0:	2000      	movs	r0, #0
     eb2:	4770      	bx	lr
     eb4:	85055ec1 	.word	0x85055ec1
     eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     ebc:	798c      	ldrb	r4, [r1, #6]
     ebe:	f8dd e018 	ldr.w	lr, [sp, #24]
     ec2:	2c08      	cmp	r4, #8
     ec4:	d901      	bls.n	eca <sdc_hci_cmd_vs_zephyr_read_version_info+0x32>
     ec6:	21db      	movs	r1, #219	; 0xdb
     ec8:	e02c      	b.n	f24 <sdc_hci_cmd_vs_zephyr_read_version_info+0x8c>
     eca:	f8df c0a4 	ldr.w	ip, [pc, #164]	; f70 <sdc_hci_cmd_vs_zephyr_read_version_info+0xd8>
     ece:	f85c 5020 	ldr.w	r5, [ip, r0, lsl #2]
     ed2:	b10d      	cbz	r5, ed8 <sdc_hci_cmd_vs_zephyr_read_version_info+0x40>
     ed4:	21dc      	movs	r1, #220	; 0xdc
     ed6:	e025      	b.n	f24 <sdc_hci_cmd_vs_zephyr_read_version_info+0x8c>
     ed8:	79cd      	ldrb	r5, [r1, #7]
     eda:	2d00      	cmp	r5, #0
     edc:	d045      	beq.n	f6a <sdc_hci_cmd_vs_zephyr_read_version_info+0xd2>
     ede:	006f      	lsls	r7, r5, #1
     ee0:	370a      	adds	r7, #10
     ee2:	681d      	ldr	r5, [r3, #0]
     ee4:	2c02      	cmp	r4, #2
     ee6:	443d      	add	r5, r7
     ee8:	d901      	bls.n	eee <sdc_hci_cmd_vs_zephyr_read_version_info+0x56>
     eea:	4626      	mov	r6, r4
     eec:	e001      	b.n	ef2 <sdc_hci_cmd_vs_zephyr_read_version_info+0x5a>
     eee:	f04f 0602 	mov.w	r6, #2
     ef2:	442e      	add	r6, r5
     ef4:	f1a6 0601 	sub.w	r6, r6, #1
     ef8:	d901      	bls.n	efe <sdc_hci_cmd_vs_zephyr_read_version_info+0x66>
     efa:	4625      	mov	r5, r4
     efc:	e001      	b.n	f02 <sdc_hci_cmd_vs_zephyr_read_version_info+0x6a>
     efe:	f04f 0502 	mov.w	r5, #2
     f02:	f1a5 0501 	sub.w	r5, r5, #1
     f06:	ea26 0605 	bic.w	r6, r6, r5
     f0a:	888d      	ldrh	r5, [r1, #4]
     f0c:	4425      	add	r5, r4
     f0e:	f1a4 0401 	sub.w	r4, r4, #1
     f12:	f1a5 0501 	sub.w	r5, r5, #1
     f16:	ea25 0504 	bic.w	r5, r5, r4
     f1a:	f64f 74ff 	movw	r4, #65535	; 0xffff
     f1e:	42a5      	cmp	r5, r4
     f20:	d303      	bcc.n	f2a <sdc_hci_cmd_vs_zephyr_read_version_info+0x92>
     f22:	21e7      	movs	r1, #231	; 0xe7
     f24:	2017      	movs	r0, #23
     f26:	f7ff fd43 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     f2a:	f1be 0f00 	cmp.w	lr, #0
     f2e:	d118      	bne.n	f62 <sdc_hci_cmd_vs_zephyr_read_version_info+0xca>
     f30:	1bf4      	subs	r4, r6, r7
     f32:	f84c 4020 	str.w	r4, [ip, r0, lsl #2]
     f36:	8025      	strh	r5, [r4, #0]
     f38:	79c8      	ldrb	r0, [r1, #7]
     f3a:	70a0      	strb	r0, [r4, #2]
     f3c:	2001      	movs	r0, #1
     f3e:	70e0      	strb	r0, [r4, #3]
     f40:	7122      	strb	r2, [r4, #4]
     f42:	6808      	ldr	r0, [r1, #0]
     f44:	f64f 72f0 	movw	r2, #65520	; 0xfff0
     f48:	0c00      	lsrs	r0, r0, #16
     f4a:	80e0      	strh	r0, [r4, #6]
     f4c:	8808      	ldrh	r0, [r1, #0]
     f4e:	8120      	strh	r0, [r4, #8]
     f50:	2000      	movs	r0, #0
     f52:	e003      	b.n	f5c <sdc_hci_cmd_vs_zephyr_read_version_info+0xc4>
     f54:	eb04 0740 	add.w	r7, r4, r0, lsl #1
     f58:	1c40      	adds	r0, r0, #1
     f5a:	817a      	strh	r2, [r7, #10]
     f5c:	79cf      	ldrb	r7, [r1, #7]
     f5e:	4287      	cmp	r7, r0
     f60:	d8f8      	bhi.n	f54 <sdc_hci_cmd_vs_zephyr_read_version_info+0xbc>
     f62:	79c8      	ldrb	r0, [r1, #7]
     f64:	fb00 6005 	mla	r0, r0, r5, r6
     f68:	6018      	str	r0, [r3, #0]
     f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     f6e:	0000      	.short	0x0000
     f70:	20000068 	.word	0x20000068
     f74:	b530      	push	{r4, r5, lr}
     f76:	4603      	mov	r3, r0
     f78:	ea4f 0002 	mov.w	r0, r2
     f7c:	eb03 0440 	add.w	r4, r3, r0, lsl #1
     f80:	8964      	ldrh	r4, [r4, #10]
     f82:	428c      	cmp	r4, r1
     f84:	d009      	beq.n	f9a <sdc_hci_cmd_vs_zephyr_read_version_info+0x102>
     f86:	789c      	ldrb	r4, [r3, #2]
     f88:	1c40      	adds	r0, r0, #1
     f8a:	fbb0 f5f4 	udiv	r5, r0, r4
     f8e:	fb04 0015 	mls	r0, r4, r5, r0
     f92:	b2c0      	uxtb	r0, r0
     f94:	4290      	cmp	r0, r2
     f96:	d1f1      	bne.n	f7c <sdc_hci_cmd_vs_zephyr_read_version_info+0xe4>
     f98:	20ff      	movs	r0, #255	; 0xff
     f9a:	bd30      	pop	{r4, r5, pc}

00000f9c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
     f9c:	b570      	push	{r4, r5, r6, lr}
     f9e:	4605      	mov	r5, r0
     fa0:	4819      	ldr	r0, [pc, #100]	; (1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>)
     fa2:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
     fa6:	b364      	cbz	r4, 1002 <CONFIG_FPROTECT_BLOCK_SIZE+0x2>
     fa8:	f5b5 6f70 	cmp.w	r5, #3840	; 0xf00
     fac:	d304      	bcc.n	fb8 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x1c>
     fae:	f240 2125 	movw	r1, #549	; 0x225
     fb2:	2017      	movs	r0, #23
     fb4:	f7ff fcfc 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     fb8:	4629      	mov	r1, r5
     fba:	4620      	mov	r0, r4
     fbc:	f00c fbbf 	bl	d73e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x26>
     fc0:	4601      	mov	r1, r0
     fc2:	28ff      	cmp	r0, #255	; 0xff
     fc4:	d004      	beq.n	fd0 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x34>
     fc6:	4620      	mov	r0, r4
     fc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     fcc:	f00c bbcb 	b.w	d766 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
     fd0:	78a0      	ldrb	r0, [r4, #2]
     fd2:	fbb5 f1f0 	udiv	r1, r5, r0
     fd6:	fb00 5011 	mls	r0, r0, r1, r5
     fda:	b2c6      	uxtb	r6, r0
     fdc:	4632      	mov	r2, r6
     fde:	f64f 71f0 	movw	r1, #65520	; 0xfff0
     fe2:	4620      	mov	r0, r4
     fe4:	f7ff ffc6 	bl	f74 <sdc_hci_cmd_vs_zephyr_read_version_info+0xdc>
     fe8:	4602      	mov	r2, r0
     fea:	28ff      	cmp	r0, #255	; 0xff
     fec:	d009      	beq.n	1002 <CONFIG_FPROTECT_BLOCK_SIZE+0x2>
     fee:	42b2      	cmp	r2, r6
     ff0:	d001      	beq.n	ff6 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x5a>
     ff2:	2000      	movs	r0, #0
     ff4:	70e0      	strb	r0, [r4, #3]
     ff6:	4629      	mov	r1, r5
     ff8:	4620      	mov	r0, r4
     ffa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     ffe:	f00c bb98 	b.w	d732 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x1a>
    1002:	2000      	movs	r0, #0
    1004:	bd70      	pop	{r4, r5, r6, pc}
    1006:	0000      	.short	0x0000
    1008:	20000068 	.word	0x20000068

0000100c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    100c:	4a08      	ldr	r2, [pc, #32]	; (1030 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x24>)
    100e:	b510      	push	{r4, lr}
    1010:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
    1014:	4601      	mov	r1, r0
    1016:	4620      	mov	r0, r4
    1018:	f00c fb91 	bl	d73e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x26>
    101c:	4601      	mov	r1, r0
    101e:	28ff      	cmp	r0, #255	; 0xff
    1020:	d004      	beq.n	102c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x20>
    1022:	4620      	mov	r0, r4
    1024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1028:	f00c bb9d 	b.w	d766 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    102c:	2000      	movs	r0, #0
    102e:	bd10      	pop	{r4, pc}
    1030:	20000068 	.word	0x20000068

00001034 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    1034:	b5f0      	push	{r4, r5, r6, r7, lr}
    1036:	b089      	sub	sp, #36	; 0x24
    1038:	0004      	movs	r4, r0
    103a:	460e      	mov	r6, r1
    103c:	9406      	str	r4, [sp, #24]
    103e:	d007      	beq.n	1050 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x1c>
    1040:	2500      	movs	r5, #0
    1042:	0760      	lsls	r0, r4, #29
    1044:	d006      	beq.n	1054 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x20>
    1046:	f240 1119 	movw	r1, #281	; 0x119
    104a:	2017      	movs	r0, #23
    104c:	f7ff fcb0 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1050:	2501      	movs	r5, #1
    1052:	e7f6      	b.n	1042 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xe>
    1054:	4814      	ldr	r0, [pc, #80]	; (10a8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x74>)
    1056:	2200      	movs	r2, #0
    1058:	4f14      	ldr	r7, [pc, #80]	; (10ac <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x78>)
    105a:	6002      	str	r2, [r0, #0]
    105c:	6042      	str	r2, [r0, #4]
    105e:	e9d7 1000 	ldrd	r1, r0, [r7]
    1062:	f896 c000 	ldrb.w	ip, [r6]
    1066:	68bb      	ldr	r3, [r7, #8]
    1068:	f36c 601f 	bfi	r0, ip, #24, #8
    106c:	e9cd 0302 	strd	r0, r3, [sp, #8]
    1070:	e9cd 5100 	strd	r5, r1, [sp]
    1074:	ab06      	add	r3, sp, #24
    1076:	a901      	add	r1, sp, #4
    1078:	4610      	mov	r0, r2
    107a:	f7ff ff1d 	bl	eb8 <sdc_hci_cmd_vs_zephyr_read_version_info+0x20>
    107e:	e9d7 1003 	ldrd	r1, r0, [r7, #12]
    1082:	7873      	ldrb	r3, [r6, #1]
    1084:	697a      	ldr	r2, [r7, #20]
    1086:	f363 601f 	bfi	r0, r3, #24, #8
    108a:	e9cd 0202 	strd	r0, r2, [sp, #8]
    108e:	e9cd 5100 	strd	r5, r1, [sp]
    1092:	ab06      	add	r3, sp, #24
    1094:	2200      	movs	r2, #0
    1096:	a901      	add	r1, sp, #4
    1098:	2001      	movs	r0, #1
    109a:	f7ff ff0d 	bl	eb8 <sdc_hci_cmd_vs_zephyr_read_version_info+0x20>
    109e:	9806      	ldr	r0, [sp, #24]
    10a0:	b009      	add	sp, #36	; 0x24
    10a2:	1b00      	subs	r0, r0, r4
    10a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10a6:	0000      	.short	0x0000
    10a8:	20000068 	.word	0x20000068
    10ac:	0000119c 	.word	0x0000119c

000010b0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    10b0:	b510      	push	{r4, lr}
    10b2:	4604      	mov	r4, r0
    10b4:	7980      	ldrb	r0, [r0, #6]
    10b6:	490e      	ldr	r1, [pc, #56]	; (10f0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x40>)
    10b8:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    10bc:	b1a8      	cbz	r0, 10ea <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    10be:	f64f 73f0 	movw	r3, #65520	; 0xfff0
    10c2:	79e1      	ldrb	r1, [r4, #7]
    10c4:	7882      	ldrb	r2, [r0, #2]
    10c6:	4291      	cmp	r1, r2
    10c8:	d20f      	bcs.n	10ea <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    10ca:	1c4a      	adds	r2, r1, #1
    10cc:	71e2      	strb	r2, [r4, #7]
    10ce:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    10d2:	8952      	ldrh	r2, [r2, #10]
    10d4:	429a      	cmp	r2, r3
    10d6:	d0f4      	beq.n	10c2 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x12>
    10d8:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    10dc:	8952      	ldrh	r2, [r2, #10]
    10de:	80a2      	strh	r2, [r4, #4]
    10e0:	f00c fb41 	bl	d766 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    10e4:	6020      	str	r0, [r4, #0]
    10e6:	2000      	movs	r0, #0
    10e8:	bd10      	pop	{r4, pc}
    10ea:	2005      	movs	r0, #5
    10ec:	bd10      	pop	{r4, pc}
    10ee:	0000      	.short	0x0000
    10f0:	20000068 	.word	0x20000068

000010f4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    10f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    10f8:	4607      	mov	r7, r0
    10fa:	f64f 70ff 	movw	r0, #65535	; 0xffff
    10fe:	8038      	strh	r0, [r7, #0]
    1100:	4812      	ldr	r0, [pc, #72]	; (114c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x58>)
    1102:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    1106:	b1ec      	cbz	r4, 1144 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>
    1108:	78a5      	ldrb	r5, [r4, #2]
    110a:	7920      	ldrb	r0, [r4, #4]
    110c:	fbb0 f1f5 	udiv	r1, r0, r5
    1110:	fb05 0611 	mls	r6, r5, r1, r0
    1114:	4632      	mov	r2, r6
    1116:	f64f 71f0 	movw	r1, #65520	; 0xfff0
    111a:	4620      	mov	r0, r4
    111c:	f7ff ff2a 	bl	f74 <sdc_hci_cmd_vs_zephyr_read_version_info+0xdc>
    1120:	4602      	mov	r2, r0
    1122:	28ff      	cmp	r0, #255	; 0xff
    1124:	d00e      	beq.n	1144 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>
    1126:	1ba8      	subs	r0, r5, r6
    1128:	4410      	add	r0, r2
    112a:	fbb0 f1f5 	udiv	r1, r0, r5
    112e:	fb05 0011 	mls	r0, r5, r1, r0
    1132:	7921      	ldrb	r1, [r4, #4]
    1134:	4408      	add	r0, r1
    1136:	b281      	uxth	r1, r0
    1138:	8039      	strh	r1, [r7, #0]
    113a:	4620      	mov	r0, r4
    113c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1140:	f00c baf7 	b.w	d732 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x1a>
    1144:	2000      	movs	r0, #0
    1146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    114a:	0000      	.short	0x0000
    114c:	20000068 	.word	0x20000068

00001150 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    1150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1154:	4606      	mov	r6, r0
    1156:	4810      	ldr	r0, [pc, #64]	; (1198 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x48>)
    1158:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
    115c:	4631      	mov	r1, r6
    115e:	4628      	mov	r0, r5
    1160:	f00c faed 	bl	d73e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x26>
    1164:	4604      	mov	r4, r0
    1166:	28ff      	cmp	r0, #255	; 0xff
    1168:	d012      	beq.n	1190 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x40>
    116a:	f8d5 0006 	ldr.w	r0, [r5, #6]
    116e:	4621      	mov	r1, r4
    1170:	ea4f 4730 	mov.w	r7, r0, ror #16
    1174:	4628      	mov	r0, r5
    1176:	f00c faf6 	bl	d766 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    117a:	4601      	mov	r1, r0
    117c:	4630      	mov	r0, r6
    117e:	47b8      	blx	r7
    1180:	eb05 0144 	add.w	r1, r5, r4, lsl #1
    1184:	f64f 70f0 	movw	r0, #65520	; 0xfff0
    1188:	8148      	strh	r0, [r1, #10]
    118a:	2000      	movs	r0, #0
    118c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1190:	f243 0002 	movw	r0, #12290	; 0x3002
    1194:	e7fa      	b.n	118c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x3c>
    1196:	0000      	.short	0x0000
    1198:	20000068 	.word	0x20000068
    119c:	0000f577 	.word	0x0000f577
    11a0:	000802f8 	.word	0x000802f8
    11a4:	00000000 	.word	0x00000000
    11a8:	0000eb4d 	.word	0x0000eb4d
    11ac:	00080118 	.word	0x00080118
    11b0:	00000000 	.word	0x00000000

000011b4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    11b4:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    11b8:	4c24      	ldr	r4, [pc, #144]	; (124c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x98>)
    11ba:	4606      	mov	r6, r0
    11bc:	b081      	sub	sp, #4
    11be:	6820      	ldr	r0, [r4, #0]
    11c0:	469a      	mov	sl, r3
    11c2:	4693      	mov	fp, r2
    11c4:	b158      	cbz	r0, 11de <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    11c6:	7a01      	ldrb	r1, [r0, #8]
    11c8:	42b1      	cmp	r1, r6
    11ca:	d903      	bls.n	11d4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    11cc:	6840      	ldr	r0, [r0, #4]
    11ce:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    11d2:	b140      	cbz	r0, 11e6 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    11d4:	f243 0002 	movw	r0, #12290	; 0x3002
    11d8:	b005      	add	sp, #20
    11da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11de:	21a5      	movs	r1, #165	; 0xa5
    11e0:	2018      	movs	r0, #24
    11e2:	f7ff fbe5 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    11e6:	4619      	mov	r1, r3
    11e8:	9802      	ldr	r0, [sp, #8]
    11ea:	f00c faf7 	bl	d7dc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    11ee:	4680      	mov	r8, r0
    11f0:	4658      	mov	r0, fp
    11f2:	990e      	ldr	r1, [sp, #56]	; 0x38
    11f4:	f00c fae8 	bl	d7c8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    11f8:	4605      	mov	r5, r0
    11fa:	eb08 0005 	add.w	r0, r8, r5
    11fe:	1d00      	adds	r0, r0, #4
    1200:	b287      	uxth	r7, r0
    1202:	6820      	ldr	r0, [r4, #0]
    1204:	46a1      	mov	r9, r4
    1206:	4639      	mov	r1, r7
    1208:	6800      	ldr	r0, [r0, #0]
    120a:	f00c fa2d 	bl	d668 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    120e:	0004      	movs	r4, r0
    1210:	d01a      	beq.n	1248 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x94>
    1212:	8067      	strh	r7, [r4, #2]
    1214:	8025      	strh	r5, [r4, #0]
    1216:	4629      	mov	r1, r5
    1218:	1d20      	adds	r0, r4, #4
    121a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    121c:	4607      	mov	r7, r0
    121e:	465a      	mov	r2, fp
    1220:	2309      	movs	r3, #9
    1222:	9500      	str	r5, [sp, #0]
    1224:	f00c f99a 	bl	d55c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    1228:	8820      	ldrh	r0, [r4, #0]
    122a:	4641      	mov	r1, r8
    122c:	4438      	add	r0, r7
    122e:	230a      	movs	r3, #10
    1230:	9a02      	ldr	r2, [sp, #8]
    1232:	f8cd a000 	str.w	sl, [sp]
    1236:	f00c f991 	bl	d55c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    123a:	f8d9 0000 	ldr.w	r0, [r9]
    123e:	6840      	ldr	r0, [r0, #4]
    1240:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    1244:	2000      	movs	r0, #0
    1246:	e7c7      	b.n	11d8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    1248:	2004      	movs	r0, #4
    124a:	e7c5      	b.n	11d8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    124c:	20000070 	.word	0x20000070

00001250 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    1250:	b570      	push	{r4, r5, r6, lr}
    1252:	4c14      	ldr	r4, [pc, #80]	; (12a4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    1254:	6823      	ldr	r3, [r4, #0]
    1256:	b18b      	cbz	r3, 127c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    1258:	7a19      	ldrb	r1, [r3, #8]
    125a:	4281      	cmp	r1, r0
    125c:	d912      	bls.n	1284 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    125e:	685a      	ldr	r2, [r3, #4]
    1260:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    1264:	b171      	cbz	r1, 1284 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    1266:	2500      	movs	r5, #0
    1268:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    126c:	884a      	ldrh	r2, [r1, #2]
    126e:	6818      	ldr	r0, [r3, #0]
    1270:	f00c fa52 	bl	d718 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    1274:	6821      	ldr	r1, [r4, #0]
    1276:	2000      	movs	r0, #0
    1278:	7a0a      	ldrb	r2, [r1, #8]
    127a:	e00c      	b.n	1296 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    127c:	21c6      	movs	r1, #198	; 0xc6
    127e:	2018      	movs	r0, #24
    1280:	f7ff fb96 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1284:	f243 0002 	movw	r0, #12290	; 0x3002
    1288:	bd70      	pop	{r4, r5, r6, pc}
    128a:	684b      	ldr	r3, [r1, #4]
    128c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1290:	b933      	cbnz	r3, 12a0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    1292:	1c40      	adds	r0, r0, #1
    1294:	b2c0      	uxtb	r0, r0
    1296:	4282      	cmp	r2, r0
    1298:	d8f7      	bhi.n	128a <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    129a:	6808      	ldr	r0, [r1, #0]
    129c:	f00c fa31 	bl	d702 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    12a0:	2000      	movs	r0, #0
    12a2:	bd70      	pop	{r4, r5, r6, pc}
    12a4:	20000070 	.word	0x20000070

000012a8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    12a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    12ac:	460d      	mov	r5, r1
    12ae:	0004      	movs	r4, r0
    12b0:	4690      	mov	r8, r2
    12b2:	f04f 0600 	mov.w	r6, #0
    12b6:	d006      	beq.n	12c6 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x1e>
    12b8:	2700      	movs	r7, #0
    12ba:	07a0      	lsls	r0, r4, #30
    12bc:	d005      	beq.n	12ca <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x22>
    12be:	2186      	movs	r1, #134	; 0x86
    12c0:	2018      	movs	r0, #24
    12c2:	f7ff fb75 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    12c6:	2701      	movs	r7, #1
    12c8:	e7f7      	b.n	12ba <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    12ca:	b1cd      	cbz	r5, 1300 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    12cc:	4611      	mov	r1, r2
    12ce:	2000      	movs	r0, #0
    12d0:	f00c f9fb 	bl	d6ca <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    12d4:	300c      	adds	r0, #12
    12d6:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    12da:	b98f      	cbnz	r7, 1300 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    12dc:	4f0a      	ldr	r7, [pc, #40]	; (1308 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x60>)
    12de:	f104 000c 	add.w	r0, r4, #12
    12e2:	00aa      	lsls	r2, r5, #2
    12e4:	603c      	str	r4, [r7, #0]
    12e6:	7225      	strb	r5, [r4, #8]
    12e8:	6060      	str	r0, [r4, #4]
    12ea:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    12ee:	6020      	str	r0, [r4, #0]
    12f0:	2100      	movs	r1, #0
    12f2:	6860      	ldr	r0, [r4, #4]
    12f4:	f00f fe41 	bl	10f7a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    12f8:	4641      	mov	r1, r8
    12fa:	6838      	ldr	r0, [r7, #0]
    12fc:	f00c f9e5 	bl	d6ca <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    1300:	4630      	mov	r0, r6
    1302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1306:	0000      	.short	0x0000
    1308:	20000070 	.word	0x20000070

0000130c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    130c:	b570      	push	{r4, r5, r6, lr}
    130e:	4d08      	ldr	r5, [pc, #32]	; (1330 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    1310:	6828      	ldr	r0, [r5, #0]
    1312:	2800      	cmp	r0, #0
    1314:	d00a      	beq.n	132c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    1316:	2400      	movs	r4, #0
    1318:	e004      	b.n	1324 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    131a:	4620      	mov	r0, r4
    131c:	f7ff ff98 	bl	1250 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    1320:	1c64      	adds	r4, r4, #1
    1322:	b2e4      	uxtb	r4, r4
    1324:	6828      	ldr	r0, [r5, #0]
    1326:	7a00      	ldrb	r0, [r0, #8]
    1328:	42a0      	cmp	r0, r4
    132a:	d8f6      	bhi.n	131a <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    132c:	bd70      	pop	{r4, r5, r6, pc}
    132e:	0000      	.short	0x0000
    1330:	20000070 	.word	0x20000070

00001334 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    1334:	4909      	ldr	r1, [pc, #36]	; (135c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    1336:	b510      	push	{r4, lr}
    1338:	4602      	mov	r2, r0
    133a:	6809      	ldr	r1, [r1, #0]
    133c:	2000      	movs	r0, #0
    133e:	b149      	cbz	r1, 1354 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    1340:	7a0b      	ldrb	r3, [r1, #8]
    1342:	4293      	cmp	r3, r2
    1344:	d905      	bls.n	1352 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    1346:	6849      	ldr	r1, [r1, #4]
    1348:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    134c:	2900      	cmp	r1, #0
    134e:	d000      	beq.n	1352 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    1350:	1d08      	adds	r0, r1, #4
    1352:	bd10      	pop	{r4, pc}
    1354:	21ec      	movs	r1, #236	; 0xec
    1356:	2018      	movs	r0, #24
    1358:	f7ff fb2a 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    135c:	20000070 	.word	0x20000070

00001360 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    1360:	490a      	ldr	r1, [pc, #40]	; (138c <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x4>)
    1362:	b510      	push	{r4, lr}
    1364:	4602      	mov	r2, r0
    1366:	6809      	ldr	r1, [r1, #0]
    1368:	2000      	movs	r0, #0
    136a:	b159      	cbz	r1, 1384 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    136c:	7a0b      	ldrb	r3, [r1, #8]
    136e:	4293      	cmp	r3, r2
    1370:	d907      	bls.n	1382 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    1372:	6849      	ldr	r1, [r1, #4]
    1374:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    1378:	2900      	cmp	r1, #0
    137a:	d002      	beq.n	1382 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    137c:	f831 0b04 	ldrh.w	r0, [r1], #4
    1380:	4408      	add	r0, r1
    1382:	bd10      	pop	{r4, pc}
    1384:	21fa      	movs	r1, #250	; 0xfa
    1386:	2018      	movs	r0, #24
    1388:	f7ff fb12 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    138c:	20000070 	.word	0x20000070
    1390:	b570      	push	{r4, r5, r6, lr}
    1392:	4b1e      	ldr	r3, [pc, #120]	; (140c <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x84>)
    1394:	6845      	ldr	r5, [r0, #4]
    1396:	4604      	mov	r4, r0
    1398:	2200      	movs	r2, #0
    139a:	b1a1      	cbz	r1, 13c6 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x3e>
    139c:	2001      	movs	r0, #1
    139e:	7060      	strb	r0, [r4, #1]
    13a0:	8858      	ldrh	r0, [r3, #2]
    13a2:	0881      	lsrs	r1, r0, #2
    13a4:	f05f 0000 	movs.w	r0, #0
    13a8:	eb04 0340 	add.w	r3, r4, r0, lsl #1
    13ac:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    13b0:	831a      	strh	r2, [r3, #24]
    13b2:	8419      	strh	r1, [r3, #32]
    13b4:	fb00 5301 	mla	r3, r0, r1, r5
    13b8:	6073      	str	r3, [r6, #4]
    13ba:	1823      	adds	r3, r4, r0
    13bc:	1c40      	adds	r0, r0, #1
    13be:	751a      	strb	r2, [r3, #20]
    13c0:	2804      	cmp	r0, #4
    13c2:	d3f1      	bcc.n	13a8 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x20>
    13c4:	bd70      	pop	{r4, r5, r6, pc}
    13c6:	7062      	strb	r2, [r4, #1]
    13c8:	f05f 0000 	movs.w	r0, #0
    13cc:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    13d0:	830a      	strh	r2, [r1, #24]
    13d2:	840a      	strh	r2, [r1, #32]
    13d4:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    13d8:	604a      	str	r2, [r1, #4]
    13da:	1821      	adds	r1, r4, r0
    13dc:	1c40      	adds	r0, r0, #1
    13de:	750a      	strb	r2, [r1, #20]
    13e0:	2804      	cmp	r0, #4
    13e2:	d3f3      	bcc.n	13cc <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x44>
    13e4:	8858      	ldrh	r0, [r3, #2]
    13e6:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    13ea:	d201      	bcs.n	13f0 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x68>
    13ec:	0846      	lsrs	r6, r0, #1
    13ee:	e000      	b.n	13f2 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x6a>
    13f0:	26ff      	movs	r6, #255	; 0xff
    13f2:	f00c fa67 	bl	d8c4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    13f6:	6065      	str	r5, [r4, #4]
    13f8:	8420      	strh	r0, [r4, #32]
    13fa:	1829      	adds	r1, r5, r0
    13fc:	60a1      	str	r1, [r4, #8]
    13fe:	8466      	strh	r6, [r4, #34]	; 0x22
    1400:	60e5      	str	r5, [r4, #12]
    1402:	84a0      	strh	r0, [r4, #36]	; 0x24
    1404:	6121      	str	r1, [r4, #16]
    1406:	84e6      	strh	r6, [r4, #38]	; 0x26
    1408:	bd70      	pop	{r4, r5, r6, pc}
    140a:	0000      	.short	0x0000
    140c:	20000074 	.word	0x20000074

00001410 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    1410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1414:	b158      	cbz	r0, 142e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x1e>
    1416:	2500      	movs	r5, #0
    1418:	4411      	add	r1, r2
    141a:	4e24      	ldr	r6, [pc, #144]	; (14ac <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x9c>)
    141c:	b2cc      	uxtb	r4, r1
    141e:	2700      	movs	r7, #0
    1420:	7034      	strb	r4, [r6, #0]
    1422:	0781      	lsls	r1, r0, #30
    1424:	d005      	beq.n	1432 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x22>
    1426:	214e      	movs	r1, #78	; 0x4e
    1428:	2009      	movs	r0, #9
    142a:	f7ff fac1 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    142e:	2501      	movs	r5, #1
    1430:	e7f2      	b.n	1418 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    1432:	2b1f      	cmp	r3, #31
    1434:	d804      	bhi.n	1440 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x30>
    1436:	f64f 71ff 	movw	r1, #65535	; 0xffff
    143a:	ea01 0183 	and.w	r1, r1, r3, lsl #2
    143e:	e009      	b.n	1454 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x44>
    1440:	0059      	lsls	r1, r3, #1
    1442:	2bff      	cmp	r3, #255	; 0xff
    1444:	d90c      	bls.n	1460 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x50>
    1446:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    144a:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    144e:	d200      	bcs.n	1452 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    1450:	4611      	mov	r1, r2
    1452:	b289      	uxth	r1, r1
    1454:	f64f 72fc 	movw	r2, #65532	; 0xfffc
    1458:	1cc9      	adds	r1, r1, #3
    145a:	4011      	ands	r1, r2
    145c:	b135      	cbz	r5, 146c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x5c>
    145e:	e007      	b.n	1470 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x60>
    1460:	227c      	movs	r2, #124	; 0x7c
    1462:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    1466:	d3f4      	bcc.n	1452 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    1468:	217c      	movs	r1, #124	; 0x7c
    146a:	e7f2      	b.n	1452 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    146c:	6070      	str	r0, [r6, #4]
    146e:	8071      	strh	r1, [r6, #2]
    1470:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    1474:	eb07 03c2 	add.w	r3, r7, r2, lsl #3
    1478:	2200      	movs	r2, #0
    147a:	6876      	ldr	r6, [r6, #4]
    147c:	f04f 0c01 	mov.w	ip, #1
    1480:	e00d      	b.n	149e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8e>
    1482:	b94d      	cbnz	r5, 1498 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x88>
    1484:	eb02 0782 	add.w	r7, r2, r2, lsl #2
    1488:	eb00 0e03 	add.w	lr, r0, r3
    148c:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
    1490:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
    1494:	f8c7 e004 	str.w	lr, [r7, #4]
    1498:	1c52      	adds	r2, r2, #1
    149a:	440b      	add	r3, r1
    149c:	b2d2      	uxtb	r2, r2
    149e:	42a2      	cmp	r2, r4
    14a0:	d3ef      	bcc.n	1482 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x72>
    14a2:	1ddb      	adds	r3, r3, #7
    14a4:	f023 0007 	bic.w	r0, r3, #7
    14a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    14ac:	20000074 	.word	0x20000074

000014b0 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    14b0:	b570      	push	{r4, r5, r6, lr}
    14b2:	4a10      	ldr	r2, [pc, #64]	; (14f4 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    14b4:	2000      	movs	r0, #0
    14b6:	6851      	ldr	r1, [r2, #4]
    14b8:	7812      	ldrb	r2, [r2, #0]
    14ba:	e014      	b.n	14e6 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
    14bc:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    14c0:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
    14c4:	b16b      	cbz	r3, 14e2 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
    14c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    14ca:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
    14ce:	d00c      	beq.n	14ea <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
    14d0:	2500      	movs	r5, #0
    14d2:	70a5      	strb	r5, [r4, #2]
    14d4:	2101      	movs	r1, #1
    14d6:	4620      	mov	r0, r4
    14d8:	f7ff ff5a 	bl	1390 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x8>
    14dc:	7025      	strb	r5, [r4, #0]
    14de:	4620      	mov	r0, r4
    14e0:	bd70      	pop	{r4, r5, r6, pc}
    14e2:	1c40      	adds	r0, r0, #1
    14e4:	b2c0      	uxtb	r0, r0
    14e6:	4290      	cmp	r0, r2
    14e8:	d3e8      	bcc.n	14bc <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    14ea:	21a9      	movs	r1, #169	; 0xa9
    14ec:	2009      	movs	r0, #9
    14ee:	f7ff fa5f 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    14f2:	0000      	.short	0x0000
    14f4:	20000074 	.word	0x20000074

000014f8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    14f8:	4804      	ldr	r0, [pc, #16]	; (150c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    14fa:	b510      	push	{r4, lr}
    14fc:	8840      	ldrh	r0, [r0, #2]
    14fe:	0884      	lsrs	r4, r0, #2
    1500:	f00c f9e0 	bl	d8c4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    1504:	4284      	cmp	r4, r0
    1506:	d300      	bcc.n	150a <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    1508:	4620      	mov	r0, r4
    150a:	bd10      	pop	{r4, pc}
    150c:	20000074 	.word	0x20000074
    1510:	b530      	push	{r4, r5, lr}
    1512:	490d      	ldr	r1, [pc, #52]	; (1548 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>)
    1514:	2001      	movs	r0, #1
    1516:	6048      	str	r0, [r1, #4]
    1518:	1e82      	subs	r2, r0, #2
    151a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    151e:	490b      	ldr	r1, [pc, #44]	; (154c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x54>)
    1520:	6088      	str	r0, [r1, #8]
    1522:	2300      	movs	r3, #0
    1524:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    1528:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    152c:	4c08      	ldr	r4, [pc, #32]	; (1550 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x58>)
    152e:	6023      	str	r3, [r4, #0]
    1530:	1d25      	adds	r5, r4, #4
    1532:	6028      	str	r0, [r5, #0]
    1534:	6088      	str	r0, [r1, #8]
    1536:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    153a:	6023      	str	r3, [r4, #0]
    153c:	6028      	str	r0, [r5, #0]
    153e:	4906      	ldr	r1, [pc, #24]	; (1558 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x60>)
    1540:	4804      	ldr	r0, [pc, #16]	; (1554 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x5c>)
    1542:	6008      	str	r0, [r1, #0]
    1544:	bd30      	pop	{r4, r5, pc}
    1546:	0000      	.short	0x0000
    1548:	4000e000 	.word	0x4000e000
    154c:	4000f000 	.word	0x4000f000
    1550:	4000f500 	.word	0x4000f500
    1554:	3ff60000 	.word	0x3ff60000
    1558:	4001f508 	.word	0x4001f508

0000155c <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>:
    155c:	b510      	push	{r4, lr}
    155e:	f7ff ffd7 	bl	1510 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    1562:	f00c fa86 	bl	da72 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    1566:	4903      	ldr	r1, [pc, #12]	; (1574 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x18>)
    1568:	4801      	ldr	r0, [pc, #4]	; (1570 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x14>)
    156a:	6008      	str	r0, [r1, #0]
    156c:	bd10      	pop	{r4, pc}
    156e:	0000      	.short	0x0000
    1570:	3ff60000 	.word	0x3ff60000
    1574:	4001f508 	.word	0x4001f508

00001578 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    1578:	b510      	push	{r4, lr}
    157a:	f7ff ffc9 	bl	1510 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    157e:	f00c fa78 	bl	da72 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    1582:	f000 f887 	bl	1694 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    1586:	4905      	ldr	r1, [pc, #20]	; (159c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    1588:	4803      	ldr	r0, [pc, #12]	; (1598 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x20>)
    158a:	6008      	str	r0, [r1, #0]
    158c:	f000 f8b8 	bl	1700 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    1590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1594:	f000 b8dc 	b.w	1750 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    1598:	3ff60000 	.word	0x3ff60000
    159c:	4001f508 	.word	0x4001f508
    15a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    15a4:	4682      	mov	sl, r0
    15a6:	4838      	ldr	r0, [pc, #224]	; (1688 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
    15a8:	f00f fb7c 	bl	10ca4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    15ac:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 1688 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    15b0:	b128      	cbz	r0, 15be <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x46>
    15b2:	2601      	movs	r6, #1
    15b4:	f10b 0001 	add.w	r0, fp, #1
    15b8:	21ff      	movs	r1, #255	; 0xff
    15ba:	7001      	strb	r1, [r0, #0]
    15bc:	e000      	b.n	15c0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x48>
    15be:	2600      	movs	r6, #0
    15c0:	f44f 7580 	mov.w	r5, #256	; 0x100
    15c4:	4c31      	ldr	r4, [pc, #196]	; (168c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    15c6:	f04f 0800 	mov.w	r8, #0
    15ca:	1d2f      	adds	r7, r5, #4
    15cc:	2101      	movs	r1, #1
    15ce:	6061      	str	r1, [r4, #4]
    15d0:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    15d4:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    15d8:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    15dc:	6021      	str	r1, [r4, #0]
    15de:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 1690 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>
    15e2:	e01c      	b.n	161e <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    15e4:	f8d9 0000 	ldr.w	r0, [r9]
    15e8:	06c0      	lsls	r0, r0, #27
    15ea:	d518      	bpl.n	161e <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    15ec:	200e      	movs	r0, #14
    15ee:	f00c fa4f 	bl	da90 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    15f2:	f3ef 8010 	mrs	r0, PRIMASK
    15f6:	9000      	str	r0, [sp, #0]
    15f8:	b672      	cpsid	i
    15fa:	2103      	movs	r1, #3
    15fc:	4620      	mov	r0, r4
    15fe:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    1602:	4629      	mov	r1, r5
    1604:	f00c fa51 	bl	daaa <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1608:	b930      	cbnz	r0, 1618 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
    160a:	4639      	mov	r1, r7
    160c:	4620      	mov	r0, r4
    160e:	f00c fa4c 	bl	daaa <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1612:	b908      	cbnz	r0, 1618 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
    1614:	f00f fbdd 	bl	10dd2 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    1618:	9800      	ldr	r0, [sp, #0]
    161a:	b900      	cbnz	r0, 161e <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    161c:	b662      	cpsie	i
    161e:	4629      	mov	r1, r5
    1620:	4620      	mov	r0, r4
    1622:	f00c fa42 	bl	daaa <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1626:	b928      	cbnz	r0, 1634 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xbc>
    1628:	4639      	mov	r1, r7
    162a:	4620      	mov	r0, r4
    162c:	f00c fa3d 	bl	daaa <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1630:	2800      	cmp	r0, #0
    1632:	d0d7      	beq.n	15e4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x6c>
    1634:	4639      	mov	r1, r7
    1636:	4620      	mov	r0, r4
    1638:	f00c fa37 	bl	daaa <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    163c:	2800      	cmp	r0, #0
    163e:	d1c5      	bne.n	15cc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x54>
    1640:	bb06      	cbnz	r6, 1684 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    1642:	f89b 1001 	ldrb.w	r1, [fp, #1]
    1646:	f88d 1000 	strb.w	r1, [sp]
    164a:	9900      	ldr	r1, [sp, #0]
    164c:	9100      	str	r1, [sp, #0]
    164e:	f89d 1000 	ldrb.w	r1, [sp]
    1652:	b109      	cbz	r1, 1658 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe0>
    1654:	2501      	movs	r5, #1
    1656:	e000      	b.n	165a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe2>
    1658:	2500      	movs	r5, #0
    165a:	f10b 0001 	add.w	r0, fp, #1
    165e:	f880 8000 	strb.w	r8, [r0]
    1662:	2003      	movs	r0, #3
    1664:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    1668:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    166c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    1670:	200e      	movs	r0, #14
    1672:	f00c fa0d 	bl	da90 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    1676:	4804      	ldr	r0, [pc, #16]	; (1688 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
    1678:	f00f fb2b 	bl	10cd2 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    167c:	b115      	cbz	r5, 1684 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    167e:	2011      	movs	r0, #17
    1680:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1684:	2000      	movs	r0, #0
    1686:	e7fb      	b.n	1680 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x108>
    1688:	20000364 	.word	0x20000364
    168c:	4000e000 	.word	0x4000e000
    1690:	e000ed10 	.word	0xe000ed10

00001694 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    1694:	b510      	push	{r4, lr}
    1696:	4806      	ldr	r0, [pc, #24]	; (16b0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    1698:	f00f fb17 	bl	10cca <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    169c:	b118      	cbz	r0, 16a6 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    169e:	2130      	movs	r1, #48	; 0x30
    16a0:	201d      	movs	r0, #29
    16a2:	f7ff f985 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    16a6:	4802      	ldr	r0, [pc, #8]	; (16b0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    16a8:	2100      	movs	r1, #0
    16aa:	7041      	strb	r1, [r0, #1]
    16ac:	bd10      	pop	{r4, pc}
    16ae:	0000      	.short	0x0000
    16b0:	20000364 	.word	0x20000364

000016b4 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    16b4:	b570      	push	{r4, r5, r6, lr}
    16b6:	4911      	ldr	r1, [pc, #68]	; (16fc <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    16b8:	680a      	ldr	r2, [r1, #0]
    16ba:	b1ea      	cbz	r2, 16f8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    16bc:	2300      	movs	r3, #0
    16be:	461d      	mov	r5, r3
    16c0:	2401      	movs	r4, #1
    16c2:	684a      	ldr	r2, [r1, #4]
    16c4:	1c52      	adds	r2, r2, #1
    16c6:	604a      	str	r2, [r1, #4]
    16c8:	2a09      	cmp	r2, #9
    16ca:	d300      	bcc.n	16ce <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    16cc:	604d      	str	r5, [r1, #4]
    16ce:	790e      	ldrb	r6, [r1, #4]
    16d0:	fa04 f206 	lsl.w	r2, r4, r6
    16d4:	680e      	ldr	r6, [r1, #0]
    16d6:	4216      	tst	r6, r2
    16d8:	d00b      	beq.n	16f2 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    16da:	f3ef 8310 	mrs	r3, PRIMASK
    16de:	b672      	cpsid	i
    16e0:	680c      	ldr	r4, [r1, #0]
    16e2:	4394      	bics	r4, r2
    16e4:	600c      	str	r4, [r1, #0]
    16e6:	b903      	cbnz	r3, 16ea <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    16e8:	b662      	cpsie	i
    16ea:	6849      	ldr	r1, [r1, #4]
    16ec:	6001      	str	r1, [r0, #0]
    16ee:	2000      	movs	r0, #0
    16f0:	bd70      	pop	{r4, r5, r6, pc}
    16f2:	1c5b      	adds	r3, r3, #1
    16f4:	2b09      	cmp	r3, #9
    16f6:	d3e4      	bcc.n	16c2 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    16f8:	2005      	movs	r0, #5
    16fa:	bd70      	pop	{r4, r5, r6, pc}
    16fc:	2000007c 	.word	0x2000007c

00001700 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    1700:	4802      	ldr	r0, [pc, #8]	; (170c <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    1702:	2100      	movs	r1, #0
    1704:	6001      	str	r1, [r0, #0]
    1706:	6041      	str	r1, [r0, #4]
    1708:	4770      	bx	lr
    170a:	0000      	.short	0x0000
    170c:	2000007c 	.word	0x2000007c

00001710 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>:
    1710:	b510      	push	{r4, lr}
    1712:	4c04      	ldr	r4, [pc, #16]	; (1724 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x14>)
    1714:	7820      	ldrb	r0, [r4, #0]
    1716:	28ff      	cmp	r0, #255	; 0xff
    1718:	d003      	beq.n	1722 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x12>
    171a:	f00a ff9b 	bl	c654 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    171e:	20ff      	movs	r0, #255	; 0xff
    1720:	7020      	strb	r0, [r4, #0]
    1722:	bd10      	pop	{r4, pc}
    1724:	20000000 	.word	0x20000000

00001728 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    1728:	b510      	push	{r4, lr}
    172a:	4c08      	ldr	r4, [pc, #32]	; (174c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    172c:	7861      	ldrb	r1, [r4, #1]
    172e:	b109      	cbz	r1, 1734 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    1730:	200f      	movs	r0, #15
    1732:	bd10      	pop	{r4, pc}
    1734:	f00a ff54 	bl	c5e0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    1738:	7020      	strb	r0, [r4, #0]
    173a:	28ff      	cmp	r0, #255	; 0xff
    173c:	d001      	beq.n	1742 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    173e:	2000      	movs	r0, #0
    1740:	bd10      	pop	{r4, pc}
    1742:	2173      	movs	r1, #115	; 0x73
    1744:	201f      	movs	r0, #31
    1746:	f7ff f933 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    174a:	0000      	.short	0x0000
    174c:	20000000 	.word	0x20000000

00001750 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    1750:	4901      	ldr	r1, [pc, #4]	; (1758 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    1752:	2000      	movs	r0, #0
    1754:	7048      	strb	r0, [r1, #1]
    1756:	4770      	bx	lr
    1758:	20000000 	.word	0x20000000

0000175c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    175c:	4806      	ldr	r0, [pc, #24]	; (1778 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    175e:	4a07      	ldr	r2, [pc, #28]	; (177c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    1760:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    1762:	8852      	ldrh	r2, [r2, #2]
    1764:	4291      	cmp	r1, r2
    1766:	d104      	bne.n	1772 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    1768:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    176c:	b108      	cbz	r0, 1772 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    176e:	2000      	movs	r0, #0
    1770:	4770      	bx	lr
    1772:	2001      	movs	r0, #1
    1774:	4770      	bx	lr
    1776:	0000      	.short	0x0000
    1778:	200013e0 	.word	0x200013e0
    177c:	20000358 	.word	0x20000358

00001780 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    1780:	4901      	ldr	r1, [pc, #4]	; (1788 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    1782:	8048      	strh	r0, [r1, #2]
    1784:	4770      	bx	lr
    1786:	0000      	.short	0x0000
    1788:	20000358 	.word	0x20000358

0000178c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    178c:	4808      	ldr	r0, [pc, #32]	; (17b0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    178e:	4a09      	ldr	r2, [pc, #36]	; (17b4 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    1790:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    1792:	8852      	ldrh	r2, [r2, #2]
    1794:	4291      	cmp	r1, r2
    1796:	d109      	bne.n	17ac <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    1798:	f64f 71ff 	movw	r1, #65535	; 0xffff
    179c:	8481      	strh	r1, [r0, #36]	; 0x24
    179e:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    17a2:	b119      	cbz	r1, 17ac <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    17a4:	2100      	movs	r1, #0
    17a6:	7001      	strb	r1, [r0, #0]
    17a8:	2001      	movs	r0, #1
    17aa:	4770      	bx	lr
    17ac:	2000      	movs	r0, #0
    17ae:	4770      	bx	lr
    17b0:	200013e0 	.word	0x200013e0
    17b4:	20000358 	.word	0x20000358

000017b8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    17b8:	4807      	ldr	r0, [pc, #28]	; (17d8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    17ba:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    17be:	2901      	cmp	r1, #1
    17c0:	d007      	beq.n	17d2 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    17c2:	2101      	movs	r1, #1
    17c4:	7001      	strb	r1, [r0, #0]
    17c6:	4805      	ldr	r0, [pc, #20]	; (17dc <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    17c8:	4903      	ldr	r1, [pc, #12]	; (17d8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    17ca:	8800      	ldrh	r0, [r0, #0]
    17cc:	8488      	strh	r0, [r1, #36]	; 0x24
    17ce:	2001      	movs	r0, #1
    17d0:	4770      	bx	lr
    17d2:	2000      	movs	r0, #0
    17d4:	4770      	bx	lr
    17d6:	0000      	.short	0x0000
    17d8:	200013e0 	.word	0x200013e0
    17dc:	20000358 	.word	0x20000358

000017e0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    17e0:	4906      	ldr	r1, [pc, #24]	; (17fc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    17e2:	4b07      	ldr	r3, [pc, #28]	; (1800 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    17e4:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    17e6:	885b      	ldrh	r3, [r3, #2]
    17e8:	429a      	cmp	r2, r3
    17ea:	d105      	bne.n	17f8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    17ec:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    17f0:	b112      	cbz	r2, 17f8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    17f2:	6001      	str	r1, [r0, #0]
    17f4:	2001      	movs	r0, #1
    17f6:	4770      	bx	lr
    17f8:	2000      	movs	r0, #0
    17fa:	4770      	bx	lr
    17fc:	200013e0 	.word	0x200013e0
    1800:	20000358 	.word	0x20000358

00001804 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    1804:	4909      	ldr	r1, [pc, #36]	; (182c <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    1806:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    1808:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    180c:	3bff      	subs	r3, #255	; 0xff
    180e:	d002      	beq.n	1816 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    1810:	2100      	movs	r1, #0
    1812:	6001      	str	r1, [r0, #0]
    1814:	e007      	b.n	1826 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    1816:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    181a:	4904      	ldr	r1, [pc, #16]	; (182c <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    181c:	2a01      	cmp	r2, #1
    181e:	d002      	beq.n	1826 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    1820:	6001      	str	r1, [r0, #0]
    1822:	2001      	movs	r0, #1
    1824:	4770      	bx	lr
    1826:	2000      	movs	r0, #0
    1828:	4770      	bx	lr
    182a:	0000      	.short	0x0000
    182c:	200013e0 	.word	0x200013e0

00001830 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    1830:	4901      	ldr	r1, [pc, #4]	; (1838 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    1832:	8008      	strh	r0, [r1, #0]
    1834:	4770      	bx	lr
    1836:	0000      	.short	0x0000
    1838:	20000358 	.word	0x20000358

0000183c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    183c:	4905      	ldr	r1, [pc, #20]	; (1854 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    183e:	2000      	movs	r0, #0
    1840:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    1844:	f64f 70ff 	movw	r0, #65535	; 0xffff
    1848:	8488      	strh	r0, [r1, #36]	; 0x24
    184a:	4903      	ldr	r1, [pc, #12]	; (1858 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    184c:	8008      	strh	r0, [r1, #0]
    184e:	8048      	strh	r0, [r1, #2]
    1850:	4770      	bx	lr
    1852:	0000      	.short	0x0000
    1854:	200013e0 	.word	0x200013e0
    1858:	20000358 	.word	0x20000358
    185c:	4905      	ldr	r1, [pc, #20]	; (1874 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    185e:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    1860:	4282      	cmp	r2, r0
    1862:	d105      	bne.n	1870 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    1864:	2000      	movs	r0, #0
    1866:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    186a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    186e:	8488      	strh	r0, [r1, #36]	; 0x24
    1870:	4770      	bx	lr
    1872:	0000      	.short	0x0000
    1874:	200013e0 	.word	0x200013e0

00001878 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    1878:	4a0a      	ldr	r2, [pc, #40]	; (18a4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    187a:	b110      	cbz	r0, 1882 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    187c:	2801      	cmp	r0, #1
    187e:	d007      	beq.n	1890 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    1880:	e00e      	b.n	18a0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    1882:	7850      	ldrb	r0, [r2, #1]
    1884:	b160      	cbz	r0, 18a0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    1886:	f8d2 0002 	ldr.w	r0, [r2, #2]
    188a:	6008      	str	r0, [r1, #0]
    188c:	88d0      	ldrh	r0, [r2, #6]
    188e:	e004      	b.n	189a <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    1890:	7810      	ldrb	r0, [r2, #0]
    1892:	b128      	cbz	r0, 18a0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    1894:	6890      	ldr	r0, [r2, #8]
    1896:	6008      	str	r0, [r1, #0]
    1898:	8990      	ldrh	r0, [r2, #12]
    189a:	8088      	strh	r0, [r1, #4]
    189c:	2001      	movs	r0, #1
    189e:	4770      	bx	lr
    18a0:	2000      	movs	r0, #0
    18a2:	4770      	bx	lr
    18a4:	20000366 	.word	0x20000366

000018a8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    18a8:	4a08      	ldr	r2, [pc, #32]	; (18cc <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    18aa:	2301      	movs	r3, #1
    18ac:	b138      	cbz	r0, 18be <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    18ae:	2801      	cmp	r0, #1
    18b0:	d104      	bne.n	18bc <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    18b2:	7013      	strb	r3, [r2, #0]
    18b4:	6808      	ldr	r0, [r1, #0]
    18b6:	6090      	str	r0, [r2, #8]
    18b8:	8888      	ldrh	r0, [r1, #4]
    18ba:	8190      	strh	r0, [r2, #12]
    18bc:	4770      	bx	lr
    18be:	7053      	strb	r3, [r2, #1]
    18c0:	6808      	ldr	r0, [r1, #0]
    18c2:	f8c2 0002 	str.w	r0, [r2, #2]
    18c6:	8888      	ldrh	r0, [r1, #4]
    18c8:	80d0      	strh	r0, [r2, #6]
    18ca:	4770      	bx	lr
    18cc:	20000366 	.word	0x20000366

000018d0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    18d0:	4906      	ldr	r1, [pc, #24]	; (18ec <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    18d2:	b110      	cbz	r0, 18da <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    18d4:	2801      	cmp	r0, #1
    18d6:	d002      	beq.n	18de <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    18d8:	e005      	b.n	18e6 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    18da:	7848      	ldrb	r0, [r1, #1]
    18dc:	e000      	b.n	18e0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    18de:	7808      	ldrb	r0, [r1, #0]
    18e0:	b108      	cbz	r0, 18e6 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    18e2:	2001      	movs	r0, #1
    18e4:	4770      	bx	lr
    18e6:	2000      	movs	r0, #0
    18e8:	4770      	bx	lr
    18ea:	0000      	.short	0x0000
    18ec:	20000366 	.word	0x20000366

000018f0 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY>:
    18f0:	4901      	ldr	r1, [pc, #4]	; (18f8 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY+0x8>)
    18f2:	7708      	strb	r0, [r1, #28]
    18f4:	4770      	bx	lr
    18f6:	0000      	.short	0x0000
    18f8:	20000ca2 	.word	0x20000ca2

000018fc <sym_57CDLB7NR4I66F4XUEVXWWEJBBBXGSJ37LGPUXA>:
    18fc:	4801      	ldr	r0, [pc, #4]	; (1904 <sym_57CDLB7NR4I66F4XUEVXWWEJBBBXGSJ37LGPUXA+0x8>)
    18fe:	7880      	ldrb	r0, [r0, #2]
    1900:	4770      	bx	lr
    1902:	0000      	.short	0x0000
    1904:	20000084 	.word	0x20000084

00001908 <sym_R2K72KVDRFDRB7INCDL2G5SJCI6KNYCIUBETXWY>:
    1908:	4801      	ldr	r0, [pc, #4]	; (1910 <sym_R2K72KVDRFDRB7INCDL2G5SJCI6KNYCIUBETXWY+0x8>)
    190a:	78c0      	ldrb	r0, [r0, #3]
    190c:	4770      	bx	lr
    190e:	0000      	.short	0x0000
    1910:	20000084 	.word	0x20000084

00001914 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY>:
    1914:	b570      	push	{r4, r5, r6, lr}
    1916:	460c      	mov	r4, r1
    1918:	4605      	mov	r5, r0
    191a:	f000 f91f 	bl	1b5c <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY>
    191e:	b118      	cbz	r0, 1928 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY+0x14>
    1920:	21d0      	movs	r1, #208	; 0xd0
    1922:	2027      	movs	r0, #39	; 0x27
    1924:	f7ff f844 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1928:	4803      	ldr	r0, [pc, #12]	; (1938 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY+0x24>)
    192a:	2101      	movs	r1, #1
    192c:	f00c fcdf 	bl	e2ee <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    1930:	4802      	ldr	r0, [pc, #8]	; (193c <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY+0x28>)
    1932:	e9c0 540b 	strd	r5, r4, [r0, #44]	; 0x2c
    1936:	bd70      	pop	{r4, r5, r6, pc}
    1938:	20000c80 	.word	0x20000c80
    193c:	20000084 	.word	0x20000084

00001940 <sym_DDEKRCVCBAV6DMR2JGOTTXJPMB6OW3IK3MJRV2Q>:
    1940:	4901      	ldr	r1, [pc, #4]	; (1948 <sym_DDEKRCVCBAV6DMR2JGOTTXJPMB6OW3IK3MJRV2Q+0x8>)
    1942:	2001      	movs	r0, #1
    1944:	7148      	strb	r0, [r1, #5]
    1946:	4770      	bx	lr
    1948:	20000084 	.word	0x20000084

0000194c <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA>:
    194c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1950:	4d5b      	ldr	r5, [pc, #364]	; (1ac0 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x174>)
    1952:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    1954:	782e      	ldrb	r6, [r5, #0]
    1956:	2e00      	cmp	r6, #0
    1958:	d16b      	bne.n	1a32 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xe6>
    195a:	2a00      	cmp	r2, #0
    195c:	d069      	beq.n	1a32 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xe6>
    195e:	2b00      	cmp	r3, #0
    1960:	d067      	beq.n	1a32 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xe6>
    1962:	2c00      	cmp	r4, #0
    1964:	d065      	beq.n	1a32 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xe6>
    1966:	f105 0614 	add.w	r6, r5, #20
    196a:	e9c5 010f 	strd	r0, r1, [r5, #60]	; 0x3c
    196e:	e886 001c 	stmia.w	r6, {r2, r3, r4}
    1972:	2700      	movs	r7, #0
    1974:	716f      	strb	r7, [r5, #5]
    1976:	712f      	strb	r7, [r5, #4]
    1978:	70af      	strb	r7, [r5, #2]
    197a:	706f      	strb	r7, [r5, #1]
    197c:	70ef      	strb	r7, [r5, #3]
    197e:	81af      	strh	r7, [r5, #12]
    1980:	81ef      	strh	r7, [r5, #14]
    1982:	f000 f92f 	bl	1be4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    1986:	4606      	mov	r6, r0
    1988:	f000 f926 	bl	1bd8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    198c:	4604      	mov	r4, r0
    198e:	f006 f9d1 	bl	7d34 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    1992:	f005 ff29 	bl	77e8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    1996:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    199a:	f006 fa4f 	bl	7e3c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    199e:	69e0      	ldr	r0, [r4, #28]
    19a0:	f006 fb32 	bl	8008 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    19a4:	6960      	ldr	r0, [r4, #20]
    19a6:	f006 fb25 	bl	7ff4 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    19aa:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
    19ae:	f006 fb5b 	bl	8068 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    19b2:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    19b6:	6840      	ldr	r0, [r0, #4]
    19b8:	f890 021a 	ldrb.w	r0, [r0, #538]	; 0x21a
    19bc:	b108      	cbz	r0, 19c2 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x76>
    19be:	f006 f933 	bl	7c28 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    19c2:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    19c6:	2001      	movs	r0, #1
    19c8:	f006 f872 	bl	7ab0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    19cc:	2800      	cmp	r0, #0
    19ce:	d070      	beq.n	1ab2 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x166>
    19d0:	483c      	ldr	r0, [pc, #240]	; (1ac4 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x178>)
    19d2:	f006 f8d9 	bl	7b88 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    19d6:	8820      	ldrh	r0, [r4, #0]
    19d8:	f7ff fcc2 	bl	1360 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    19dc:	6368      	str	r0, [r5, #52]	; 0x34
    19de:	8820      	ldrh	r0, [r4, #0]
    19e0:	f7ff fca8 	bl	1334 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    19e4:	f106 0288 	add.w	r2, r6, #136	; 0x88
    19e8:	63a8      	str	r0, [r5, #56]	; 0x38
    19ea:	e892 110c 	ldmia.w	r2, {r2, r3, r8, ip}
    19ee:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 1ac8 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x17c>
    19f2:	e889 110c 	stmia.w	r9, {r2, r3, r8, ip}
    19f6:	f8d6 2098 	ldr.w	r2, [r6, #152]	; 0x98
    19fa:	f8c9 2019 	str.w	r2, [r9, #25]
    19fe:	f8d6 109c 	ldr.w	r1, [r6, #156]	; 0x9c
    1a02:	f8c9 101d 	str.w	r1, [r9, #29]
    1a06:	f000 f925 	bl	1c54 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xdc>
    1a0a:	4601      	mov	r1, r0
    1a0c:	8f20      	ldrh	r0, [r4, #56]	; 0x38
    1a0e:	f00c f9c3 	bl	dd98 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    1a12:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    1a14:	4281      	cmp	r1, r0
    1a16:	d200      	bcs.n	1a1a <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xce>
    1a18:	4608      	mov	r0, r1
    1a1a:	71a8      	strb	r0, [r5, #6]
    1a1c:	46a8      	mov	r8, r5
    1a1e:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    1a22:	46ba      	mov	sl, r7
    1a24:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    1a26:	f896 7023 	ldrb.w	r7, [r6, #35]	; 0x23
    1a2a:	8fa5      	ldrh	r5, [r4, #60]	; 0x3c
    1a2c:	2908      	cmp	r1, #8
    1a2e:	d104      	bne.n	1a3a <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xee>
    1a30:	e002      	b.n	1a38 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xec>
    1a32:	f240 1145 	movw	r1, #325	; 0x145
    1a36:	e040      	b.n	1aba <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x16e>
    1a38:	2104      	movs	r1, #4
    1a3a:	f00c f9ad 	bl	dd98 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    1a3e:	b90f      	cbnz	r7, 1a44 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xf8>
    1a40:	1d00      	adds	r0, r0, #4
    1a42:	b280      	uxth	r0, r0
    1a44:	4285      	cmp	r5, r0
    1a46:	d200      	bcs.n	1a4a <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xfe>
    1a48:	4628      	mov	r0, r5
    1a4a:	b2c5      	uxtb	r5, r0
    1a4c:	f888 5007 	strb.w	r5, [r8, #7]
    1a50:	f888 5008 	strb.w	r5, [r8, #8]
    1a54:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    1a58:	46d0      	mov	r8, sl
    1a5a:	b190      	cbz	r0, 1a82 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x136>
    1a5c:	2701      	movs	r7, #1
    1a5e:	f889 7018 	strb.w	r7, [r9, #24]
    1a62:	e9d6 1220 	ldrd	r1, r2, [r6, #128]	; 0x80
    1a66:	e9c9 1204 	strd	r1, r2, [r9, #16]
    1a6a:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    1a6e:	f00c f8a8 	bl	dbc2 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x18>
    1a72:	4603      	mov	r3, r0
    1a74:	462a      	mov	r2, r5
    1a76:	4914      	ldr	r1, [pc, #80]	; (1ac8 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x17c>)
    1a78:	4638      	mov	r0, r7
    1a7a:	f8cd 8000 	str.w	r8, [sp]
    1a7e:	f005 fe1f 	bl	76c0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    1a82:	2001      	movs	r0, #1
    1a84:	f000 fb46 	bl	2114 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x114>
    1a88:	4810      	ldr	r0, [pc, #64]	; (1acc <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x180>)
    1a8a:	6800      	ldr	r0, [r0, #0]
    1a8c:	2803      	cmp	r0, #3
    1a8e:	d012      	beq.n	1ab6 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x16a>
    1a90:	280b      	cmp	r0, #11
    1a92:	d010      	beq.n	1ab6 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x16a>
    1a94:	480c      	ldr	r0, [pc, #48]	; (1ac8 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x17c>)
    1a96:	220e      	movs	r2, #14
    1a98:	2100      	movs	r1, #0
    1a9a:	304a      	adds	r0, #74	; 0x4a
    1a9c:	f00f fa6d 	bl	10f7a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    1aa0:	4809      	ldr	r0, [pc, #36]	; (1ac8 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x17c>)
    1aa2:	8ab1      	ldrh	r1, [r6, #20]
    1aa4:	304a      	adds	r0, #74	; 0x4a
    1aa6:	8041      	strh	r1, [r0, #2]
    1aa8:	8821      	ldrh	r1, [r4, #0]
    1aaa:	8001      	strh	r1, [r0, #0]
    1aac:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
    1ab0:	7101      	strb	r1, [r0, #4]
    1ab2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ab6:	f240 2102 	movw	r1, #514	; 0x202
    1aba:	2027      	movs	r0, #39	; 0x27
    1abc:	f7fe ff78 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1ac0:	20000084 	.word	0x20000084
    1ac4:	00002318 	.word	0x00002318
    1ac8:	20000c58 	.word	0x20000c58
    1acc:	40001550 	.word	0x40001550

00001ad0 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI>:
    1ad0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    1ad4:	4688      	mov	r8, r1
    1ad6:	4607      	mov	r7, r0
    1ad8:	f000 f884 	bl	1be4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    1adc:	4c1a      	ldr	r4, [pc, #104]	; (1b48 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x78>)
    1ade:	4605      	mov	r5, r0
    1ae0:	07b8      	lsls	r0, r7, #30
    1ae2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    1ae4:	784e      	ldrb	r6, [r1, #1]
    1ae6:	d516      	bpl.n	1b16 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x46>
    1ae8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    1aea:	b330      	cbz	r0, 1b3a <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x6a>
    1aec:	8962      	ldrh	r2, [r4, #10]
    1aee:	1cd2      	adds	r2, r2, #3
    1af0:	f00f f9c9 	bl	10e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1af4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    1af6:	6260      	str	r0, [r4, #36]	; 0x24
    1af8:	4669      	mov	r1, sp
    1afa:	aa01      	add	r2, sp, #4
    1afc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    1afe:	f00b fcaa 	bl	d456 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    1b02:	9800      	ldr	r0, [sp, #0]
    1b04:	f00b fc5d 	bl	d3c2 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    1b08:	f8c8 0000 	str.w	r0, [r8]
    1b0c:	4631      	mov	r1, r6
    1b0e:	2201      	movs	r2, #1
    1b10:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    1b12:	f00b fc0d 	bl	d330 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    1b16:	07f8      	lsls	r0, r7, #31
    1b18:	d00d      	beq.n	1b36 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x66>
    1b1a:	e9d5 0120 	ldrd	r0, r1, [r5, #128]	; 0x80
    1b1e:	3518      	adds	r5, #24
    1b20:	1c40      	adds	r0, r0, #1
    1b22:	f141 0100 	adc.w	r1, r1, #0
    1b26:	e9c5 011a 	strd	r0, r1, [r5, #104]	; 0x68
    1b2a:	f815 0918 	ldrb.w	r0, [r5], #-24
    1b2e:	2801      	cmp	r0, #1
    1b30:	d008      	beq.n	1b44 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x74>
    1b32:	2001      	movs	r0, #1
    1b34:	7628      	strb	r0, [r5, #24]
    1b36:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    1b3a:	f240 415c 	movw	r1, #1116	; 0x45c
    1b3e:	2027      	movs	r0, #39	; 0x27
    1b40:	f7fe ff36 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1b44:	2000      	movs	r0, #0
    1b46:	e7f5      	b.n	1b34 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x64>
    1b48:	20000084 	.word	0x20000084

00001b4c <sym_HMWMSCLS2E7KO3CEVZ6FUZGM6YUJ4GDX4JETJTI>:
    1b4c:	4802      	ldr	r0, [pc, #8]	; (1b58 <sym_HMWMSCLS2E7KO3CEVZ6FUZGM6YUJ4GDX4JETJTI+0xc>)
    1b4e:	89c0      	ldrh	r0, [r0, #14]
    1b50:	f3c0 2080 	ubfx	r0, r0, #10, #1
    1b54:	4770      	bx	lr
    1b56:	0000      	.short	0x0000
    1b58:	20000084 	.word	0x20000084

00001b5c <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY>:
    1b5c:	4804      	ldr	r0, [pc, #16]	; (1b70 <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY+0x14>)
    1b5e:	7800      	ldrb	r0, [r0, #0]
    1b60:	b108      	cbz	r0, 1b66 <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY+0xa>
    1b62:	200c      	movs	r0, #12
    1b64:	4770      	bx	lr
    1b66:	4903      	ldr	r1, [pc, #12]	; (1b74 <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY+0x18>)
    1b68:	2000      	movs	r0, #0
    1b6a:	7708      	strb	r0, [r1, #28]
    1b6c:	4770      	bx	lr
    1b6e:	0000      	.short	0x0000
    1b70:	20000084 	.word	0x20000084
    1b74:	20000ca2 	.word	0x20000ca2

00001b78 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA>:
    1b78:	480c      	ldr	r0, [pc, #48]	; (1bac <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x34>)
    1b7a:	b510      	push	{r4, lr}
    1b7c:	7801      	ldrb	r1, [r0, #0]
    1b7e:	b149      	cbz	r1, 1b94 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1c>
    1b80:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    1b84:	7800      	ldrb	r0, [r0, #0]
    1b86:	2802      	cmp	r0, #2
    1b88:	d008      	beq.n	1b9c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x24>
    1b8a:	f240 211e 	movw	r1, #542	; 0x21e
    1b8e:	2027      	movs	r0, #39	; 0x27
    1b90:	f7fe ff0e 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1b94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1b98:	f000 b9ca 	b.w	1f30 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e4>
    1b9c:	6848      	ldr	r0, [r1, #4]
    1b9e:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
    1ba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1ba6:	f005 bff7 	b.w	7b98 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    1baa:	0000      	.short	0x0000
    1bac:	20000084 	.word	0x20000084
    1bb0:	4608      	mov	r0, r1
    1bb2:	2100      	movs	r1, #0
    1bb4:	7041      	strb	r1, [r0, #1]
    1bb6:	211d      	movs	r1, #29
    1bb8:	f800 1b04 	strb.w	r1, [r0], #4
    1bbc:	220e      	movs	r2, #14
    1bbe:	4901      	ldr	r1, [pc, #4]	; (1bc4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4c>)
    1bc0:	f00f b961 	b.w	10e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1bc4:	20000cb0 	.word	0x20000cb0
    1bc8:	4a02      	ldr	r2, [pc, #8]	; (1bd4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x5c>)
    1bca:	8993      	ldrh	r3, [r2, #12]
    1bcc:	4303      	orrs	r3, r0
    1bce:	8193      	strh	r3, [r2, #12]
    1bd0:	6952      	ldr	r2, [r2, #20]
    1bd2:	4710      	bx	r2
    1bd4:	20000084 	.word	0x20000084
    1bd8:	4801      	ldr	r0, [pc, #4]	; (1be0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x68>)
    1bda:	6840      	ldr	r0, [r0, #4]
    1bdc:	4770      	bx	lr
    1bde:	0000      	.short	0x0000
    1be0:	200000c0 	.word	0x200000c0
    1be4:	4801      	ldr	r0, [pc, #4]	; (1bec <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x74>)
    1be6:	6840      	ldr	r0, [r0, #4]
    1be8:	3080      	adds	r0, #128	; 0x80
    1bea:	4770      	bx	lr
    1bec:	200000c0 	.word	0x200000c0
    1bf0:	4a01      	ldr	r2, [pc, #4]	; (1bf8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x80>)
    1bf2:	2100      	movs	r1, #0
    1bf4:	6952      	ldr	r2, [r2, #20]
    1bf6:	4710      	bx	r2
    1bf8:	20000084 	.word	0x20000084
    1bfc:	b570      	push	{r4, r5, r6, lr}
    1bfe:	4605      	mov	r5, r0
    1c00:	2901      	cmp	r1, #1
    1c02:	d818      	bhi.n	1c36 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xbe>
    1c04:	4c12      	ldr	r4, [pc, #72]	; (1c50 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd8>)
    1c06:	69a1      	ldr	r1, [r4, #24]
    1c08:	4788      	blx	r1
    1c0a:	b1a0      	cbz	r0, 1c36 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xbe>
    1c0c:	7920      	ldrb	r0, [r4, #4]
    1c0e:	b990      	cbnz	r0, 1c36 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xbe>
    1c10:	b9e5      	cbnz	r5, 1c4c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd4>
    1c12:	f104 0010 	add.w	r0, r4, #16
    1c16:	7801      	ldrb	r1, [r0, #0]
    1c18:	06c8      	lsls	r0, r1, #27
    1c1a:	d405      	bmi.n	1c28 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xb0>
    1c1c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    1c1e:	7800      	ldrb	r0, [r0, #0]
    1c20:	06c0      	lsls	r0, r0, #27
    1c22:	d401      	bmi.n	1c28 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xb0>
    1c24:	2001      	movs	r0, #1
    1c26:	e000      	b.n	1c2a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xb2>
    1c28:	2000      	movs	r0, #0
    1c2a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1c2c:	b92a      	cbnz	r2, 1c3a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xc2>
    1c2e:	8962      	ldrh	r2, [r4, #10]
    1c30:	b11a      	cbz	r2, 1c3a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xc2>
    1c32:	06c9      	lsls	r1, r1, #27
    1c34:	d401      	bmi.n	1c3a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xc2>
    1c36:	2001      	movs	r0, #1
    1c38:	bd70      	pop	{r4, r5, r6, pc}
    1c3a:	89a1      	ldrh	r1, [r4, #12]
    1c3c:	078a      	lsls	r2, r1, #30
    1c3e:	d503      	bpl.n	1c48 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd0>
    1c40:	6a22      	ldr	r2, [r4, #32]
    1c42:	78d2      	ldrb	r2, [r2, #3]
    1c44:	2a02      	cmp	r2, #2
    1c46:	d001      	beq.n	1c4c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd4>
    1c48:	4308      	orrs	r0, r1
    1c4a:	d1f4      	bne.n	1c36 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xbe>
    1c4c:	2000      	movs	r0, #0
    1c4e:	bd70      	pop	{r4, r5, r6, pc}
    1c50:	20000084 	.word	0x20000084
    1c54:	b510      	push	{r4, lr}
    1c56:	f7ff ffbf 	bl	1bd8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    1c5a:	4604      	mov	r4, r0
    1c5c:	f7ff ffc2 	bl	1be4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    1c60:	4602      	mov	r2, r0
    1c62:	7f41      	ldrb	r1, [r0, #29]
    1c64:	4816      	ldr	r0, [pc, #88]	; (1cc0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x148>)
    1c66:	2925      	cmp	r1, #37	; 0x25
    1c68:	d010      	beq.n	1c8c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x114>
    1c6a:	2926      	cmp	r1, #38	; 0x26
    1c6c:	d00e      	beq.n	1c8c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x114>
    1c6e:	7f92      	ldrb	r2, [r2, #30]
    1c70:	2a25      	cmp	r2, #37	; 0x25
    1c72:	d00b      	beq.n	1c8c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x114>
    1c74:	2920      	cmp	r1, #32
    1c76:	d00d      	beq.n	1c94 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x11c>
    1c78:	2921      	cmp	r1, #33	; 0x21
    1c7a:	d00b      	beq.n	1c94 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x11c>
    1c7c:	2a23      	cmp	r2, #35	; 0x23
    1c7e:	d00f      	beq.n	1ca0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x128>
    1c80:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    1c84:	2804      	cmp	r0, #4
    1c86:	d100      	bne.n	1c8a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x112>
    1c88:	2008      	movs	r0, #8
    1c8a:	bd10      	pop	{r4, pc}
    1c8c:	6840      	ldr	r0, [r0, #4]
    1c8e:	f890 12ce 	ldrb.w	r1, [r0, #718]	; 0x2ce
    1c92:	e00e      	b.n	1cb2 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x13a>
    1c94:	2a23      	cmp	r2, #35	; 0x23
    1c96:	d003      	beq.n	1ca0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x128>
    1c98:	6840      	ldr	r0, [r0, #4]
    1c9a:	f890 013e 	ldrb.w	r0, [r0, #318]	; 0x13e
    1c9e:	e005      	b.n	1cac <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x134>
    1ca0:	6841      	ldr	r1, [r0, #4]
    1ca2:	f891 013e 	ldrb.w	r0, [r1, #318]	; 0x13e
    1ca6:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    1caa:	4008      	ands	r0, r1
    1cac:	f00b ff7f 	bl	dbae <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x4>
    1cb0:	4601      	mov	r1, r0
    1cb2:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    1cb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1cba:	f00b bf90 	b.w	dbde <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x34>
    1cbe:	0000      	.short	0x0000
    1cc0:	200000c0 	.word	0x200000c0
    1cc4:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1cc8:	468b      	mov	fp, r1
    1cca:	4681      	mov	r9, r0
    1ccc:	f7ff ff8a 	bl	1be4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    1cd0:	2600      	movs	r6, #0
    1cd2:	4c66      	ldr	r4, [pc, #408]	; (1e6c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x120>)
    1cd4:	4607      	mov	r7, r0
    1cd6:	f88d 6008 	strb.w	r6, [sp, #8]
    1cda:	9603      	str	r6, [sp, #12]
    1cdc:	9601      	str	r6, [sp, #4]
    1cde:	7820      	ldrb	r0, [r4, #0]
    1ce0:	4635      	mov	r5, r6
    1ce2:	2802      	cmp	r0, #2
    1ce4:	d004      	beq.n	1cf0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x178>
    1ce6:	f240 41df 	movw	r1, #1247	; 0x4df
    1cea:	2027      	movs	r0, #39	; 0x27
    1cec:	f7fe fe60 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1cf0:	7ba0      	ldrb	r0, [r4, #14]
    1cf2:	0640      	lsls	r0, r0, #25
    1cf4:	d406      	bmi.n	1d04 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x18c>
    1cf6:	2040      	movs	r0, #64	; 0x40
    1cf8:	f7ff ff7a 	bl	1bf0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x78>
    1cfc:	89e0      	ldrh	r0, [r4, #14]
    1cfe:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    1d02:	81e0      	strh	r0, [r4, #14]
    1d04:	f897 0023 	ldrb.w	r0, [r7, #35]	; 0x23
    1d08:	f1b9 0f00 	cmp.w	r9, #0
    1d0c:	d03a      	beq.n	1d84 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x38>
    1d0e:	b180      	cbz	r0, 1d32 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ba>
    1d10:	f005 fda4 	bl	785c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    1d14:	f005 fd7e 	bl	7814 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    1d18:	b958      	cbnz	r0, 1d32 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ba>
    1d1a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1d1c:	7841      	ldrb	r1, [r0, #1]
    1d1e:	b141      	cbz	r1, 1d32 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ba>
    1d20:	7800      	ldrb	r0, [r0, #0]
    1d22:	7e39      	ldrb	r1, [r7, #24]
    1d24:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    1d28:	4288      	cmp	r0, r1
    1d2a:	d102      	bne.n	1d32 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ba>
    1d2c:	2001      	movs	r0, #1
    1d2e:	7060      	strb	r0, [r4, #1]
    1d30:	e097      	b.n	1e62 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x116>
    1d32:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1d34:	7841      	ldrb	r1, [r0, #1]
    1d36:	8161      	strh	r1, [r4, #10]
    1d38:	b121      	cbz	r1, 1d44 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1cc>
    1d3a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    1d3c:	f00b fc61 	bl	d602 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    1d40:	62a0      	str	r0, [r4, #40]	; 0x28
    1d42:	e000      	b.n	1d46 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ce>
    1d44:	62a5      	str	r5, [r4, #40]	; 0x28
    1d46:	89e0      	ldrh	r0, [r4, #14]
    1d48:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    1d4c:	81e0      	strh	r0, [r4, #14]
    1d4e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1d50:	7df9      	ldrb	r1, [r7, #23]
    1d52:	7800      	ldrb	r0, [r0, #0]
    1d54:	f3c0 0080 	ubfx	r0, r0, #2, #1
    1d58:	4288      	cmp	r0, r1
    1d5a:	d007      	beq.n	1d6c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20>
    1d5c:	a803      	add	r0, sp, #12
    1d5e:	f000 f98b 	bl	2078 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x78>
    1d62:	89e0      	ldrh	r0, [r4, #14]
    1d64:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    1d68:	81e0      	strh	r0, [r4, #14]
    1d6a:	e000      	b.n	1d6e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x22>
    1d6c:	2601      	movs	r6, #1
    1d6e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1d70:	7e39      	ldrb	r1, [r7, #24]
    1d72:	7800      	ldrb	r0, [r0, #0]
    1d74:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    1d78:	4288      	cmp	r0, r1
    1d7a:	d10d      	bne.n	1d98 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4c>
    1d7c:	a802      	add	r0, sp, #8
    1d7e:	f000 f931 	bl	1fe4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x298>
    1d82:	e009      	b.n	1d98 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4c>
    1d84:	b108      	cbz	r0, 1d8a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3e>
    1d86:	f005 fd63 	bl	7850 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    1d8a:	78a0      	ldrb	r0, [r4, #2]
    1d8c:	1c40      	adds	r0, r0, #1
    1d8e:	70a0      	strb	r0, [r4, #2]
    1d90:	89e0      	ldrh	r0, [r4, #14]
    1d92:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    1d96:	81e0      	strh	r0, [r4, #14]
    1d98:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 1e6c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x120>
    1d9c:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
    1da0:	f10a 0a3c 	add.w	sl, sl, #60	; 0x3c
    1da4:	b190      	cbz	r0, 1dcc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x80>
    1da6:	f7ff ff17 	bl	1bd8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    1daa:	4931      	ldr	r1, [pc, #196]	; (1e70 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x124>)
    1dac:	760d      	strb	r5, [r1, #24]
    1dae:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
    1db2:	e9c1 2304 	strd	r2, r3, [r1, #16]
    1db6:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    1dba:	f00b ff02 	bl	dbc2 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x18>
    1dbe:	4603      	mov	r3, r0
    1dc0:	22fb      	movs	r2, #251	; 0xfb
    1dc2:	492b      	ldr	r1, [pc, #172]	; (1e70 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x124>)
    1dc4:	4628      	mov	r0, r5
    1dc6:	9500      	str	r5, [sp, #0]
    1dc8:	f005 fc7a 	bl	76c0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    1dcc:	f04f 0800 	mov.w	r8, #0
    1dd0:	f1bb 0f00 	cmp.w	fp, #0
    1dd4:	d104      	bne.n	1de0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x94>
    1dd6:	78a1      	ldrb	r1, [r4, #2]
    1dd8:	2001      	movs	r0, #1
    1dda:	f7ff ff0f 	bl	1bfc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x84>
    1dde:	b120      	cbz	r0, 1dea <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x9e>
    1de0:	f006 f8f4 	bl	7fcc <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    1de4:	f04f 0801 	mov.w	r8, #1
    1de8:	e002      	b.n	1df0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa4>
    1dea:	2000      	movs	r0, #0
    1dec:	f000 f9d0 	bl	2190 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x190>
    1df0:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1df4:	b118      	cbz	r0, 1dfe <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb2>
    1df6:	a901      	add	r1, sp, #4
    1df8:	2002      	movs	r0, #2
    1dfa:	f7ff fe69 	bl	1ad0 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI>
    1dfe:	481c      	ldr	r0, [pc, #112]	; (1e70 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x124>)
    1e00:	8aba      	ldrh	r2, [r7, #20]
    1e02:	304a      	adds	r0, #74	; 0x4a
    1e04:	b13e      	cbz	r6, 1e16 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xca>
    1e06:	b91a      	cbnz	r2, 1e10 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc4>
    1e08:	88c2      	ldrh	r2, [r0, #6]
    1e0a:	b90a      	cbnz	r2, 1e10 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc4>
    1e0c:	8902      	ldrh	r2, [r0, #8]
    1e0e:	b112      	cbz	r2, 1e16 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xca>
    1e10:	8942      	ldrh	r2, [r0, #10]
    1e12:	1c52      	adds	r2, r2, #1
    1e14:	8142      	strh	r2, [r0, #10]
    1e16:	f1b9 0f00 	cmp.w	r9, #0
    1e1a:	d004      	beq.n	1e26 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xda>
    1e1c:	88c1      	ldrh	r1, [r0, #6]
    1e1e:	1c49      	adds	r1, r1, #1
    1e20:	80c1      	strh	r1, [r0, #6]
    1e22:	70a5      	strb	r5, [r4, #2]
    1e24:	e002      	b.n	1e2c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe0>
    1e26:	8901      	ldrh	r1, [r0, #8]
    1e28:	1c49      	adds	r1, r1, #1
    1e2a:	8101      	strh	r1, [r0, #8]
    1e2c:	480f      	ldr	r0, [pc, #60]	; (1e6c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x120>)
    1e2e:	303c      	adds	r0, #60	; 0x3c
    1e30:	f001 f9f2 	bl	3218 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>
    1e34:	9803      	ldr	r0, [sp, #12]
    1e36:	b140      	cbz	r0, 1e4a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xfe>
    1e38:	f00b fac3 	bl	d3c2 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    1e3c:	f8da 1004 	ldr.w	r1, [sl, #4]
    1e40:	1c40      	adds	r0, r0, #1
    1e42:	7205      	strb	r5, [r0, #8]
    1e44:	2208      	movs	r2, #8
    1e46:	f00c fad9 	bl	e3fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    1e4a:	9801      	ldr	r0, [sp, #4]
    1e4c:	b130      	cbz	r0, 1e5c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x110>
    1e4e:	f8da 1004 	ldr.w	r1, [sl, #4]
    1e52:	7205      	strb	r5, [r0, #8]
    1e54:	2210      	movs	r2, #16
    1e56:	9801      	ldr	r0, [sp, #4]
    1e58:	f00c fad0 	bl	e3fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    1e5c:	f1b8 0f00 	cmp.w	r8, #0
    1e60:	d001      	beq.n	1e66 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x11a>
    1e62:	f000 f865 	bl	1f30 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e4>
    1e66:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1e6a:	0000      	.short	0x0000
    1e6c:	20000084 	.word	0x20000084
    1e70:	20000c58 	.word	0x20000c58
    1e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1e78:	4688      	mov	r8, r1
    1e7a:	4681      	mov	r9, r0
    1e7c:	f7ff feb2 	bl	1be4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    1e80:	4d29      	ldr	r5, [pc, #164]	; (1f28 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1dc>)
    1e82:	4604      	mov	r4, r0
    1e84:	7828      	ldrb	r0, [r5, #0]
    1e86:	2801      	cmp	r0, #1
    1e88:	d004      	beq.n	1e94 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x148>
    1e8a:	f240 416b 	movw	r1, #1131	; 0x46b
    1e8e:	2027      	movs	r0, #39	; 0x27
    1e90:	f7fe fd8e 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1e94:	7c20      	ldrb	r0, [r4, #16]
    1e96:	2700      	movs	r7, #0
    1e98:	2601      	movs	r6, #1
    1e9a:	b128      	cbz	r0, 1ea8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x15c>
    1e9c:	7427      	strb	r7, [r4, #16]
    1e9e:	2100      	movs	r1, #0
    1ea0:	2004      	movs	r0, #4
    1ea2:	f7ff fe91 	bl	1bc8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    1ea6:	74a6      	strb	r6, [r4, #18]
    1ea8:	6a29      	ldr	r1, [r5, #32]
    1eaa:	7808      	ldrb	r0, [r1, #0]
    1eac:	43c0      	mvns	r0, r0
    1eae:	0780      	lsls	r0, r0, #30
    1eb0:	d109      	bne.n	1ec6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x17a>
    1eb2:	7da0      	ldrb	r0, [r4, #22]
    1eb4:	bb88      	cbnz	r0, 1f1a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ce>
    1eb6:	2002      	movs	r0, #2
    1eb8:	f7ff fe86 	bl	1bc8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    1ebc:	6a28      	ldr	r0, [r5, #32]
    1ebe:	7800      	ldrb	r0, [r0, #0]
    1ec0:	43c0      	mvns	r0, r0
    1ec2:	0780      	lsls	r0, r0, #30
    1ec4:	d029      	beq.n	1f1a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ce>
    1ec6:	6a28      	ldr	r0, [r5, #32]
    1ec8:	7840      	ldrb	r0, [r0, #1]
    1eca:	b110      	cbz	r0, 1ed2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x186>
    1ecc:	2002      	movs	r0, #2
    1ece:	75a0      	strb	r0, [r4, #22]
    1ed0:	e000      	b.n	1ed4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x188>
    1ed2:	75a6      	strb	r6, [r4, #22]
    1ed4:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
    1ed8:	b198      	cbz	r0, 1f02 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b6>
    1eda:	f7ff fe7d 	bl	1bd8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    1ede:	4913      	ldr	r1, [pc, #76]	; (1f2c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e0>)
    1ee0:	7a2d      	ldrb	r5, [r5, #8]
    1ee2:	760e      	strb	r6, [r1, #24]
    1ee4:	e9d4 2320 	ldrd	r2, r3, [r4, #128]	; 0x80
    1ee8:	e9c1 2304 	strd	r2, r3, [r1, #16]
    1eec:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    1ef0:	f00b fe67 	bl	dbc2 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x18>
    1ef4:	4603      	mov	r3, r0
    1ef6:	462a      	mov	r2, r5
    1ef8:	490c      	ldr	r1, [pc, #48]	; (1f2c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e0>)
    1efa:	4630      	mov	r0, r6
    1efc:	9700      	str	r7, [sp, #0]
    1efe:	f005 fbdf 	bl	76c0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    1f02:	ea38 0009 	bics.w	r0, r8, r9
    1f06:	d004      	beq.n	1f12 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c6>
    1f08:	2100      	movs	r1, #0
    1f0a:	4608      	mov	r0, r1
    1f0c:	f7ff fe76 	bl	1bfc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x84>
    1f10:	b128      	cbz	r0, 1f1e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d2>
    1f12:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1f16:	f000 b80b 	b.w	1f30 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e4>
    1f1a:	2003      	movs	r0, #3
    1f1c:	e7d7      	b.n	1ece <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x182>
    1f1e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1f22:	2000      	movs	r0, #0
    1f24:	f000 b8f6 	b.w	2114 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x114>
    1f28:	20000084 	.word	0x20000084
    1f2c:	20000c58 	.word	0x20000c58
    1f30:	b510      	push	{r4, lr}
    1f32:	f005 fd33 	bl	799c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    1f36:	f005 fc57 	bl	77e8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    1f3a:	4c0d      	ldr	r4, [pc, #52]	; (1f70 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x224>)
    1f3c:	89e0      	ldrh	r0, [r4, #14]
    1f3e:	f7ff fe57 	bl	1bf0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x78>
    1f42:	480c      	ldr	r0, [pc, #48]	; (1f74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x228>)
    1f44:	7f00      	ldrb	r0, [r0, #28]
    1f46:	b158      	cbz	r0, 1f60 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x214>
    1f48:	490a      	ldr	r1, [pc, #40]	; (1f74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x228>)
    1f4a:	220e      	movs	r2, #14
    1f4c:	f101 000e 	add.w	r0, r1, #14
    1f50:	f00e ff99 	bl	10e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1f54:	4807      	ldr	r0, [pc, #28]	; (1f74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x228>)
    1f56:	2202      	movs	r2, #2
    1f58:	4907      	ldr	r1, [pc, #28]	; (1f78 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x22c>)
    1f5a:	301d      	adds	r0, #29
    1f5c:	f00c fa62 	bl	e424 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    1f60:	69e2      	ldr	r2, [r4, #28]
    1f62:	7921      	ldrb	r1, [r4, #4]
    1f64:	7860      	ldrb	r0, [r4, #1]
    1f66:	4790      	blx	r2
    1f68:	2000      	movs	r0, #0
    1f6a:	7020      	strb	r0, [r4, #0]
    1f6c:	bd10      	pop	{r4, pc}
    1f6e:	0000      	.short	0x0000
    1f70:	20000084 	.word	0x20000084
    1f74:	20000ca2 	.word	0x20000ca2
    1f78:	00001bb1 	.word	0x00001bb1
    1f7c:	4808      	ldr	r0, [pc, #32]	; (1fa0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x254>)
    1f7e:	b510      	push	{r4, lr}
    1f80:	7800      	ldrb	r0, [r0, #0]
    1f82:	2802      	cmp	r0, #2
    1f84:	d004      	beq.n	1f90 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x244>
    1f86:	f240 2149 	movw	r1, #585	; 0x249
    1f8a:	2027      	movs	r0, #39	; 0x27
    1f8c:	f7fe fd10 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1f90:	4904      	ldr	r1, [pc, #16]	; (1fa4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x258>)
    1f92:	2001      	movs	r0, #1
    1f94:	7308      	strb	r0, [r1, #12]
    1f96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1f9a:	f7ff bfc9 	b.w	1f30 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e4>
    1f9e:	0000      	.short	0x0000
    1fa0:	20000084 	.word	0x20000084
    1fa4:	20000ca2 	.word	0x20000ca2
    1fa8:	b430      	push	{r4, r5}
    1faa:	4604      	mov	r4, r0
    1fac:	480c      	ldr	r0, [pc, #48]	; (1fe0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x294>)
    1fae:	7a00      	ldrb	r0, [r0, #8]
    1fb0:	b10b      	cbz	r3, 1fb6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x26a>
    1fb2:	1d00      	adds	r0, r0, #4
    1fb4:	b2c0      	uxtb	r0, r0
    1fb6:	b93a      	cbnz	r2, 1fc8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x27c>
    1fb8:	28ff      	cmp	r0, #255	; 0xff
    1fba:	d105      	bne.n	1fc8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x27c>
    1fbc:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
    1fc0:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    1fc4:	429a      	cmp	r2, r3
    1fc6:	d009      	beq.n	1fdc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x290>
    1fc8:	b121      	cbz	r1, 1fd4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x288>
    1fca:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    1fce:	bc30      	pop	{r4, r5}
    1fd0:	f006 b820 	b.w	8014 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    1fd4:	20ff      	movs	r0, #255	; 0xff
    1fd6:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    1fda:	e7f8      	b.n	1fce <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x282>
    1fdc:	bc30      	pop	{r4, r5}
    1fde:	4770      	bx	lr
    1fe0:	20000084 	.word	0x20000084
    1fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1fe8:	4607      	mov	r7, r0
    1fea:	f7ff fdfb 	bl	1be4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    1fee:	4c21      	ldr	r4, [pc, #132]	; (2074 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x74>)
    1ff0:	4605      	mov	r5, r0
    1ff2:	2601      	movs	r6, #1
    1ff4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    1ff6:	7808      	ldrb	r0, [r1, #0]
    1ff8:	f000 0003 	and.w	r0, r0, #3
    1ffc:	2801      	cmp	r0, #1
    1ffe:	d00c      	beq.n	201a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1a>
    2000:	2802      	cmp	r0, #2
    2002:	d00a      	beq.n	201a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1a>
    2004:	2803      	cmp	r0, #3
    2006:	d11b      	bne.n	2040 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x40>
    2008:	742e      	strb	r6, [r5, #16]
    200a:	89e0      	ldrh	r0, [r4, #14]
    200c:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    2010:	81e0      	strh	r0, [r4, #14]
    2012:	2001      	movs	r0, #1
    2014:	f7ff fdd8 	bl	1bc8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    2018:	e012      	b.n	2040 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x40>
    201a:	7848      	ldrb	r0, [r1, #1]
    201c:	b180      	cbz	r0, 2040 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x40>
    201e:	89e1      	ldrh	r1, [r4, #14]
    2020:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    2024:	81e1      	strh	r1, [r4, #14]
    2026:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    2028:	2900      	cmp	r1, #0
    202a:	d018      	beq.n	205e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x5e>
    202c:	28fb      	cmp	r0, #251	; 0xfb
    202e:	d818      	bhi.n	2062 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x62>
    2030:	7960      	ldrb	r0, [r4, #5]
    2032:	b120      	cbz	r0, 203e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3e>
    2034:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2038:	2020      	movs	r0, #32
    203a:	f7ff bdd9 	b.w	1bf0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x78>
    203e:	703e      	strb	r6, [r7, #0]
    2040:	7e28      	ldrb	r0, [r5, #24]
    2042:	2801      	cmp	r0, #1
    2044:	d012      	beq.n	206c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x6c>
    2046:	762e      	strb	r6, [r5, #24]
    2048:	6a60      	ldr	r0, [r4, #36]	; 0x24
    204a:	7840      	ldrb	r0, [r0, #1]
    204c:	2800      	cmp	r0, #0
    204e:	d006      	beq.n	205e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x5e>
    2050:	e9f5 0120 	ldrd	r0, r1, [r5, #128]!	; 0x80
    2054:	1c40      	adds	r0, r0, #1
    2056:	f141 0100 	adc.w	r1, r1, #0
    205a:	e9c5 0100 	strd	r0, r1, [r5]
    205e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2062:	7920      	ldrb	r0, [r4, #4]
    2064:	f040 0010 	orr.w	r0, r0, #16
    2068:	7120      	strb	r0, [r4, #4]
    206a:	e7f8      	b.n	205e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x5e>
    206c:	2000      	movs	r0, #0
    206e:	7628      	strb	r0, [r5, #24]
    2070:	e7ea      	b.n	2048 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x48>
    2072:	0000      	.short	0x0000
    2074:	20000084 	.word	0x20000084
    2078:	b570      	push	{r4, r5, r6, lr}
    207a:	4605      	mov	r5, r0
    207c:	f7ff fdb2 	bl	1be4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    2080:	4604      	mov	r4, r0
    2082:	7d80      	ldrb	r0, [r0, #22]
    2084:	2800      	cmp	r0, #0
    2086:	d02d      	beq.n	20e4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xe4>
    2088:	2802      	cmp	r0, #2
    208a:	d10c      	bne.n	20a6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xa6>
    208c:	481b      	ldr	r0, [pc, #108]	; (20fc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xfc>)
    208e:	4629      	mov	r1, r5
    2090:	6b40      	ldr	r0, [r0, #52]	; 0x34
    2092:	f00b f925 	bl	d2e0 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    2096:	b330      	cbz	r0, 20e6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xe6>
    2098:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    209c:	1c40      	adds	r0, r0, #1
    209e:	f141 0100 	adc.w	r1, r1, #0
    20a2:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    20a6:	2500      	movs	r5, #0
    20a8:	75a5      	strb	r5, [r4, #22]
    20aa:	7ca0      	ldrb	r0, [r4, #18]
    20ac:	b120      	cbz	r0, 20b8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xb8>
    20ae:	74a5      	strb	r5, [r4, #18]
    20b0:	2100      	movs	r1, #0
    20b2:	2010      	movs	r0, #16
    20b4:	f7ff fd88 	bl	1bc8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    20b8:	7c60      	ldrb	r0, [r4, #17]
    20ba:	b170      	cbz	r0, 20da <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xda>
    20bc:	7465      	strb	r5, [r4, #17]
    20be:	f7ff fb65 	bl	178c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    20c2:	b198      	cbz	r0, 20ec <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xec>
    20c4:	2100      	movs	r1, #0
    20c6:	2008      	movs	r0, #8
    20c8:	f7ff fd7e 	bl	1bc8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    20cc:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    20d0:	1c40      	adds	r0, r0, #1
    20d2:	f141 0100 	adc.w	r1, r1, #0
    20d6:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    20da:	7de0      	ldrb	r0, [r4, #23]
    20dc:	2801      	cmp	r0, #1
    20de:	d00a      	beq.n	20f6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xf6>
    20e0:	2001      	movs	r0, #1
    20e2:	75e0      	strb	r0, [r4, #23]
    20e4:	bd70      	pop	{r4, r5, r6, pc}
    20e6:	f240 31da 	movw	r1, #986	; 0x3da
    20ea:	e001      	b.n	20f0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xf0>
    20ec:	f240 31f1 	movw	r1, #1009	; 0x3f1
    20f0:	2027      	movs	r0, #39	; 0x27
    20f2:	f7fe fc5d 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    20f6:	75e5      	strb	r5, [r4, #23]
    20f8:	bd70      	pop	{r4, r5, r6, pc}
    20fa:	0000      	.short	0x0000
    20fc:	20000084 	.word	0x20000084
    2100:	4803      	ldr	r0, [pc, #12]	; (2110 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x110>)
    2102:	7800      	ldrb	r0, [r0, #0]
    2104:	2800      	cmp	r0, #0
    2106:	d001      	beq.n	210c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x10c>
    2108:	f7ff bf12 	b.w	1f30 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e4>
    210c:	4770      	bx	lr
    210e:	0000      	.short	0x0000
    2110:	20000084 	.word	0x20000084
    2114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2118:	4606      	mov	r6, r0
    211a:	f7ff fd5d 	bl	1bd8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    211e:	4680      	mov	r8, r0
    2120:	f7ff fd60 	bl	1be4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    2124:	4c18      	ldr	r4, [pc, #96]	; (2188 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x188>)
    2126:	4605      	mov	r5, r0
    2128:	4632      	mov	r2, r6
    212a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    212c:	6260      	str	r0, [r4, #36]	; 0x24
    212e:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    2132:	2101      	movs	r1, #1
    2134:	4640      	mov	r0, r8
    2136:	f7ff ff37 	bl	1fa8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x25c>
    213a:	f895 0023 	ldrb.w	r0, [r5, #35]	; 0x23
    213e:	2700      	movs	r7, #0
    2140:	b170      	cbz	r0, 2160 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x160>
    2142:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2144:	f005 fe9c 	bl	7e80 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2148:	4810      	ldr	r0, [pc, #64]	; (218c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x18c>)
    214a:	2101      	movs	r1, #1
    214c:	7601      	strb	r1, [r0, #24]
    214e:	e9d5 1220 	ldrd	r1, r2, [r5, #128]	; 0x80
    2152:	e9c0 1204 	strd	r1, r2, [r0, #16]
    2156:	6b21      	ldr	r1, [r4, #48]	; 0x30
    2158:	6a60      	ldr	r0, [r4, #36]	; 0x24
    215a:	f005 fb03 	bl	7764 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    215e:	e004      	b.n	216a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x16a>
    2160:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2162:	f005 fe8d 	bl	7e80 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2166:	f005 fb3f 	bl	77e8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    216a:	b916      	cbnz	r6, 2172 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x172>
    216c:	4638      	mov	r0, r7
    216e:	f005 fd37 	bl	7be0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    2172:	2100      	movs	r1, #0
    2174:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    2178:	4608      	mov	r0, r1
    217a:	f005 ff09 	bl	7f90 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    217e:	2002      	movs	r0, #2
    2180:	7020      	strb	r0, [r4, #0]
    2182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2186:	0000      	.short	0x0000
    2188:	20000084 	.word	0x20000084
    218c:	20000c58 	.word	0x20000c58
    2190:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    2194:	4604      	mov	r4, r0
    2196:	f7ff fd25 	bl	1be4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    219a:	4605      	mov	r5, r0
    219c:	f7ff fd1c 	bl	1bd8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    21a0:	2700      	movs	r7, #0
    21a2:	f88d 7000 	strb.w	r7, [sp]
    21a6:	4606      	mov	r6, r0
    21a8:	f8df 9164 	ldr.w	r9, [pc, #356]	; 2310 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x310>
    21ac:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    21b0:	4622      	mov	r2, r4
    21b2:	4639      	mov	r1, r7
    21b4:	f7ff fef8 	bl	1fa8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x25c>
    21b8:	7da8      	ldrb	r0, [r5, #22]
    21ba:	f04f 0801 	mov.w	r8, #1
    21be:	f1a9 0420 	sub.w	r4, r9, #32
    21c2:	b140      	cbz	r0, 21d6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1d6>
    21c4:	2801      	cmp	r0, #1
    21c6:	d020      	beq.n	220a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x20a>
    21c8:	2802      	cmp	r0, #2
    21ca:	d02f      	beq.n	222c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x22c>
    21cc:	2803      	cmp	r0, #3
    21ce:	d03b      	beq.n	2248 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x248>
    21d0:	f240 21fb 	movw	r1, #763	; 0x2fb
    21d4:	e057      	b.n	2286 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x286>
    21d6:	79a0      	ldrb	r0, [r4, #6]
    21d8:	2150      	movs	r1, #80	; 0x50
    21da:	f8ad 0004 	strh.w	r0, [sp, #4]
    21de:	5388      	strh	r0, [r1, r6]
    21e0:	4648      	mov	r0, r9
    21e2:	f7ff fafd 	bl	17e0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    21e6:	b130      	cbz	r0, 21f6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1f6>
    21e8:	2080      	movs	r0, #128	; 0x80
    21ea:	6a21      	ldr	r1, [r4, #32]
    21ec:	f7ff fcec 	bl	1bc8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    21f0:	f885 8011 	strb.w	r8, [r5, #17]
    21f4:	e02c      	b.n	2250 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x250>
    21f6:	466a      	mov	r2, sp
    21f8:	a901      	add	r1, sp, #4
    21fa:	6b60      	ldr	r0, [r4, #52]	; 0x34
    21fc:	f00b fcf9 	bl	dbf2 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x48>
    2200:	6220      	str	r0, [r4, #32]
    2202:	b110      	cbz	r0, 220a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x20a>
    2204:	f895 105b 	ldrb.w	r1, [r5, #91]	; 0x5b
    2208:	b111      	cbz	r1, 2210 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x210>
    220a:	4842      	ldr	r0, [pc, #264]	; (2314 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x314>)
    220c:	6220      	str	r0, [r4, #32]
    220e:	e01f      	b.n	2250 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x250>
    2210:	f89d 1000 	ldrb.w	r1, [sp]
    2214:	b921      	cbnz	r1, 2220 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x220>
    2216:	8007      	strh	r7, [r0, #0]
    2218:	7087      	strb	r7, [r0, #2]
    221a:	2101      	movs	r1, #1
    221c:	f00c f867 	bl	e2ee <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    2220:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    2224:	6a20      	ldr	r0, [r4, #32]
    2226:	f00b ffea 	bl	e1fe <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>
    222a:	e011      	b.n	2250 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x250>
    222c:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    2230:	f8ad 0004 	strh.w	r0, [sp, #4]
    2234:	466a      	mov	r2, sp
    2236:	a901      	add	r1, sp, #4
    2238:	6b60      	ldr	r0, [r4, #52]	; 0x34
    223a:	f00b fcda 	bl	dbf2 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x48>
    223e:	6220      	str	r0, [r4, #32]
    2240:	b930      	cbnz	r0, 2250 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x250>
    2242:	f240 21e5 	movw	r1, #741	; 0x2e5
    2246:	e01e      	b.n	2286 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x286>
    2248:	4648      	mov	r0, r9
    224a:	f7ff fac9 	bl	17e0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    224e:	b1c0      	cbz	r0, 2282 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x282>
    2250:	6a20      	ldr	r0, [r4, #32]
    2252:	2308      	movs	r3, #8
    2254:	7801      	ldrb	r1, [r0, #0]
    2256:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
    225a:	7001      	strb	r1, [r0, #0]
    225c:	7dea      	ldrb	r2, [r5, #23]
    225e:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    2262:	4311      	orrs	r1, r2
    2264:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    2268:	7001      	strb	r1, [r0, #0]
    226a:	7e2a      	ldrb	r2, [r5, #24]
    226c:	2304      	movs	r3, #4
    226e:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    2272:	4311      	orrs	r1, r2
    2274:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    2278:	7001      	strb	r1, [r0, #0]
    227a:	43c9      	mvns	r1, r1
    227c:	0789      	lsls	r1, r1, #30
    227e:	d005      	beq.n	228c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x28c>
    2280:	e007      	b.n	2292 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x292>
    2282:	f240 21ee 	movw	r1, #750	; 0x2ee
    2286:	2027      	movs	r0, #39	; 0x27
    2288:	f7fe fb92 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    228c:	78c0      	ldrb	r0, [r0, #3]
    228e:	2802      	cmp	r0, #2
    2290:	d00f      	beq.n	22b2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2b2>
    2292:	6b60      	ldr	r0, [r4, #52]	; 0x34
    2294:	f00b f922 	bl	d4dc <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    2298:	b108      	cbz	r0, 229e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x29e>
    229a:	2101      	movs	r1, #1
    229c:	e00a      	b.n	22b4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2b4>
    229e:	6a20      	ldr	r0, [r4, #32]
    22a0:	7800      	ldrb	r0, [r0, #0]
    22a2:	43c0      	mvns	r0, r0
    22a4:	0780      	lsls	r0, r0, #30
    22a6:	d004      	beq.n	22b2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2b2>
    22a8:	f7ff fa58 	bl	175c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    22ac:	f080 0101 	eor.w	r1, r0, #1
    22b0:	e000      	b.n	22b4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2b4>
    22b2:	2100      	movs	r1, #0
    22b4:	6a20      	ldr	r0, [r4, #32]
    22b6:	7802      	ldrb	r2, [r0, #0]
    22b8:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    22bc:	7001      	strb	r1, [r0, #0]
    22be:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
    22c2:	b181      	cbz	r1, 22e6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2e6>
    22c4:	7841      	ldrb	r1, [r0, #1]
    22c6:	b171      	cbz	r1, 22e6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2e6>
    22c8:	6b20      	ldr	r0, [r4, #48]	; 0x30
    22ca:	f005 fdd9 	bl	7e80 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    22ce:	4811      	ldr	r0, [pc, #68]	; (2314 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x314>)
    22d0:	3828      	subs	r0, #40	; 0x28
    22d2:	7607      	strb	r7, [r0, #24]
    22d4:	e9d5 121e 	ldrd	r1, r2, [r5, #120]	; 0x78
    22d8:	e9c0 1204 	strd	r1, r2, [r0, #16]
    22dc:	6a21      	ldr	r1, [r4, #32]
    22de:	6b20      	ldr	r0, [r4, #48]	; 0x30
    22e0:	f005 fa40 	bl	7764 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    22e4:	e003      	b.n	22ee <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2ee>
    22e6:	f005 fdcb 	bl	7e80 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    22ea:	f005 fa7d 	bl	77e8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    22ee:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    22f2:	2101      	movs	r1, #1
    22f4:	2000      	movs	r0, #0
    22f6:	f005 fe4b 	bl	7f90 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    22fa:	f884 8003 	strb.w	r8, [r4, #3]
    22fe:	6a21      	ldr	r1, [r4, #32]
    2300:	880a      	ldrh	r2, [r1, #0]
    2302:	8222      	strh	r2, [r4, #16]
    2304:	7889      	ldrb	r1, [r1, #2]
    2306:	74a1      	strb	r1, [r4, #18]
    2308:	f884 8000 	strb.w	r8, [r4]
    230c:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    2310:	200000a4 	.word	0x200000a4
    2314:	20000c80 	.word	0x20000c80
    2318:	00001f7d 	.word	0x00001f7d
    231c:	00001cc5 	.word	0x00001cc5
    2320:	00001e75 	.word	0x00001e75
    2324:	00002101 	.word	0x00002101

00002328 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    2328:	4800      	ldr	r0, [pc, #0]	; (232c <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    232a:	4770      	bx	lr
    232c:	20001590 	.word	0x20001590

00002330 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    2330:	4904      	ldr	r1, [pc, #16]	; (2344 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    2332:	784a      	ldrb	r2, [r1, #1]
    2334:	4282      	cmp	r2, r0
    2336:	d903      	bls.n	2340 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    2338:	4408      	add	r0, r1
    233a:	f890 0142 	ldrb.w	r0, [r0, #322]	; 0x142
    233e:	4770      	bx	lr
    2340:	2000      	movs	r0, #0
    2342:	4770      	bx	lr
    2344:	20001406 	.word	0x20001406

00002348 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    2348:	4904      	ldr	r1, [pc, #16]	; (235c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    234a:	784a      	ldrb	r2, [r1, #1]
    234c:	4282      	cmp	r2, r0
    234e:	d903      	bls.n	2358 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    2350:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    2354:	3082      	adds	r0, #130	; 0x82
    2356:	4770      	bx	lr
    2358:	2000      	movs	r0, #0
    235a:	4770      	bx	lr
    235c:	20001406 	.word	0x20001406

00002360 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    2360:	4a05      	ldr	r2, [pc, #20]	; (2378 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    2362:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2366:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    236a:	6802      	ldr	r2, [r0, #0]
    236c:	f8c1 210a 	str.w	r2, [r1, #266]	; 0x10a
    2370:	8880      	ldrh	r0, [r0, #4]
    2372:	f8a1 010e 	strh.w	r0, [r1, #270]	; 0x10e
    2376:	4770      	bx	lr
    2378:	20001406 	.word	0x20001406

0000237c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    237c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2380:	460e      	mov	r6, r1
    2382:	4607      	mov	r7, r0
    2384:	4615      	mov	r5, r2
    2386:	2106      	movs	r1, #6
    2388:	4630      	mov	r0, r6
    238a:	f00b fdfb 	bl	df84 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    238e:	4c0d      	ldr	r4, [pc, #52]	; (23c4 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    2390:	b160      	cbz	r0, 23ac <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    2392:	2000      	movs	r0, #0
    2394:	e004      	b.n	23a0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    2396:	1821      	adds	r1, r4, r0
    2398:	1c40      	adds	r0, r0, #1
    239a:	f881 513a 	strb.w	r5, [r1, #314]	; 0x13a
    239e:	b2c0      	uxtb	r0, r0
    23a0:	7861      	ldrb	r1, [r4, #1]
    23a2:	4281      	cmp	r1, r0
    23a4:	d8f7      	bhi.n	2396 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    23a6:	2001      	movs	r0, #1
    23a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    23ac:	4631      	mov	r1, r6
    23ae:	4638      	mov	r0, r7
    23b0:	f00b fc2e 	bl	dc10 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    23b4:	2808      	cmp	r0, #8
    23b6:	d003      	beq.n	23c0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    23b8:	4420      	add	r0, r4
    23ba:	f880 513a 	strb.w	r5, [r0, #314]	; 0x13a
    23be:	e7f2      	b.n	23a6 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    23c0:	2000      	movs	r0, #0
    23c2:	e7f1      	b.n	23a8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    23c4:	20001406 	.word	0x20001406

000023c8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    23c8:	4904      	ldr	r1, [pc, #16]	; (23dc <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    23ca:	784a      	ldrb	r2, [r1, #1]
    23cc:	4282      	cmp	r2, r0
    23ce:	d903      	bls.n	23d8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    23d0:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    23d4:	1c80      	adds	r0, r0, #2
    23d6:	4770      	bx	lr
    23d8:	2000      	movs	r0, #0
    23da:	4770      	bx	lr
    23dc:	20001406 	.word	0x20001406

000023e0 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    23e0:	b510      	push	{r4, lr}
    23e2:	f44f 72c5 	mov.w	r2, #394	; 0x18a
    23e6:	2100      	movs	r1, #0
    23e8:	4805      	ldr	r0, [pc, #20]	; (2400 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x20>)
    23ea:	f00e fdc6 	bl	10f7a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    23ee:	4805      	ldr	r0, [pc, #20]	; (2404 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x24>)
    23f0:	2100      	movs	r1, #0
    23f2:	7001      	strb	r1, [r0, #0]
    23f4:	7041      	strb	r1, [r0, #1]
    23f6:	f44f 7161 	mov.w	r1, #900	; 0x384
    23fa:	8041      	strh	r1, [r0, #2]
    23fc:	bd10      	pop	{r4, pc}
    23fe:	0000      	.short	0x0000
    2400:	20001406 	.word	0x20001406
    2404:	2000035c 	.word	0x2000035c

00002408 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    2408:	4901      	ldr	r1, [pc, #4]	; (2410 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    240a:	7008      	strb	r0, [r1, #0]
    240c:	4770      	bx	lr
    240e:	0000      	.short	0x0000
    2410:	2000035c 	.word	0x2000035c

00002414 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    2414:	4801      	ldr	r0, [pc, #4]	; (241c <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    2416:	7800      	ldrb	r0, [r0, #0]
    2418:	4770      	bx	lr
    241a:	0000      	.short	0x0000
    241c:	2000035c 	.word	0x2000035c

00002420 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    2420:	4b0b      	ldr	r3, [pc, #44]	; (2450 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    2422:	b510      	push	{r4, lr}
    2424:	785c      	ldrb	r4, [r3, #1]
    2426:	4284      	cmp	r4, r0
    2428:	d910      	bls.n	244c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2c>
    242a:	4418      	add	r0, r3
    242c:	f890 0102 	ldrb.w	r0, [r0, #258]	; 0x102
    2430:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2434:	4418      	add	r0, r3
    2436:	f890 3152 	ldrb.w	r3, [r0, #338]	; 0x152
    243a:	700b      	strb	r3, [r1, #0]
    243c:	f8d0 1153 	ldr.w	r1, [r0, #339]	; 0x153
    2440:	6011      	str	r1, [r2, #0]
    2442:	f8b0 0157 	ldrh.w	r0, [r0, #343]	; 0x157
    2446:	8090      	strh	r0, [r2, #4]
    2448:	2001      	movs	r0, #1
    244a:	bd10      	pop	{r4, pc}
    244c:	2000      	movs	r0, #0
    244e:	bd10      	pop	{r4, pc}
    2450:	20001406 	.word	0x20001406

00002454 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    2454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2458:	4698      	mov	r8, r3
    245a:	4691      	mov	r9, r2
    245c:	460f      	mov	r7, r1
    245e:	4606      	mov	r6, r0
    2460:	f000 f8b0 	bl	25c4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x64>
    2464:	4604      	mov	r4, r0
    2466:	2808      	cmp	r0, #8
    2468:	d006      	beq.n	2478 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    246a:	f000 f897 	bl	259c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x3c>
    246e:	2808      	cmp	r0, #8
    2470:	d002      	beq.n	2478 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    2472:	2012      	movs	r0, #18
    2474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2478:	4d1f      	ldr	r5, [pc, #124]	; (24f8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0xa4>)
    247a:	7868      	ldrb	r0, [r5, #1]
    247c:	2808      	cmp	r0, #8
    247e:	d238      	bcs.n	24f2 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x9e>
    2480:	2c08      	cmp	r4, #8
    2482:	d113      	bne.n	24ac <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x58>
    2484:	782c      	ldrb	r4, [r5, #0]
    2486:	1c60      	adds	r0, r4, #1
    2488:	7028      	strb	r0, [r5, #0]
    248a:	2c08      	cmp	r4, #8
    248c:	d303      	bcc.n	2496 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x42>
    248e:	2144      	movs	r1, #68	; 0x44
    2490:	2028      	movs	r0, #40	; 0x28
    2492:	f7fe fa8d 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2496:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    249a:	4428      	add	r0, r5
    249c:	6839      	ldr	r1, [r7, #0]
    249e:	f8c0 1153 	str.w	r1, [r0, #339]	; 0x153
    24a2:	88b9      	ldrh	r1, [r7, #4]
    24a4:	f8a0 1157 	strh.w	r1, [r0, #343]	; 0x157
    24a8:	f880 6152 	strb.w	r6, [r0, #338]	; 0x152
    24ac:	786e      	ldrb	r6, [r5, #1]
    24ae:	2210      	movs	r2, #16
    24b0:	1c70      	adds	r0, r6, #1
    24b2:	7068      	strb	r0, [r5, #1]
    24b4:	eb05 1706 	add.w	r7, r5, r6, lsl #4
    24b8:	1cb8      	adds	r0, r7, #2
    24ba:	4649      	mov	r1, r9
    24bc:	f00b fcf4 	bl	dea8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    24c0:	f107 0082 	add.w	r0, r7, #130	; 0x82
    24c4:	2210      	movs	r2, #16
    24c6:	4641      	mov	r1, r8
    24c8:	f00b fcee 	bl	dea8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    24cc:	2110      	movs	r1, #16
    24ce:	4640      	mov	r0, r8
    24d0:	f00b fd58 	bl	df84 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    24d4:	4435      	add	r5, r6
    24d6:	2110      	movs	r1, #16
    24d8:	f885 0142 	strb.w	r0, [r5, #322]	; 0x142
    24dc:	4648      	mov	r0, r9
    24de:	f205 152b 	addw	r5, r5, #299	; 0x12b
    24e2:	f00b fd4f 	bl	df84 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    24e6:	77e8      	strb	r0, [r5, #31]
    24e8:	f805 4c29 	strb.w	r4, [r5, #-41]
    24ec:	2000      	movs	r0, #0
    24ee:	73e8      	strb	r0, [r5, #15]
    24f0:	e7c0      	b.n	2474 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    24f2:	2007      	movs	r0, #7
    24f4:	e7be      	b.n	2474 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    24f6:	0000      	.short	0x0000
    24f8:	20001406 	.word	0x20001406

000024fc <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    24fc:	4806      	ldr	r0, [pc, #24]	; (2518 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    24fe:	b510      	push	{r4, lr}
    2500:	7840      	ldrb	r0, [r0, #1]
    2502:	1e40      	subs	r0, r0, #1
    2504:	b244      	sxtb	r4, r0
    2506:	e004      	b.n	2512 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    2508:	b2e0      	uxtb	r0, r4
    250a:	f000 f8bd 	bl	2688 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x128>
    250e:	1e64      	subs	r4, r4, #1
    2510:	b264      	sxtb	r4, r4
    2512:	2c00      	cmp	r4, #0
    2514:	daf8      	bge.n	2508 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    2516:	bd10      	pop	{r4, pc}
    2518:	20001406 	.word	0x20001406

0000251c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    251c:	4801      	ldr	r0, [pc, #4]	; (2524 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    251e:	8840      	ldrh	r0, [r0, #2]
    2520:	4770      	bx	lr
    2522:	0000      	.short	0x0000
    2524:	2000035c 	.word	0x2000035c

00002528 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    2528:	b138      	cbz	r0, 253a <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    252a:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    252e:	4288      	cmp	r0, r1
    2530:	d803      	bhi.n	253a <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    2532:	4903      	ldr	r1, [pc, #12]	; (2540 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    2534:	8048      	strh	r0, [r1, #2]
    2536:	2001      	movs	r0, #1
    2538:	4770      	bx	lr
    253a:	2000      	movs	r0, #0
    253c:	4770      	bx	lr
    253e:	0000      	.short	0x0000
    2540:	2000035c 	.word	0x2000035c

00002544 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    2544:	4905      	ldr	r1, [pc, #20]	; (255c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    2546:	784a      	ldrb	r2, [r1, #1]
    2548:	4282      	cmp	r2, r0
    254a:	d903      	bls.n	2554 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    254c:	4408      	add	r0, r1
    254e:	f890 013a 	ldrb.w	r0, [r0, #314]	; 0x13a
    2552:	b108      	cbz	r0, 2558 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    2554:	2000      	movs	r0, #0
    2556:	4770      	bx	lr
    2558:	2001      	movs	r0, #1
    255a:	4770      	bx	lr
    255c:	20001406 	.word	0x20001406

00002560 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>:
    2560:	4901      	ldr	r1, [pc, #4]	; (2568 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x8>)
    2562:	7048      	strb	r0, [r1, #1]
    2564:	4770      	bx	lr
    2566:	0000      	.short	0x0000
    2568:	2000035c 	.word	0x2000035c
    256c:	4602      	mov	r2, r0
    256e:	4809      	ldr	r0, [pc, #36]	; (2594 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x34>)
    2570:	b510      	push	{r4, lr}
    2572:	7800      	ldrb	r0, [r0, #0]
    2574:	460b      	mov	r3, r1
    2576:	b158      	cbz	r0, 2590 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x30>
    2578:	4807      	ldr	r0, [pc, #28]	; (2598 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x38>)
    257a:	7841      	ldrb	r1, [r0, #1]
    257c:	b141      	cbz	r1, 2590 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x30>
    257e:	b10b      	cbz	r3, 2584 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x24>
    2580:	1c80      	adds	r0, r0, #2
    2582:	e001      	b.n	2588 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x28>
    2584:	4804      	ldr	r0, [pc, #16]	; (2598 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x38>)
    2586:	3082      	adds	r0, #130	; 0x82
    2588:	f004 fff4 	bl	7574 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    258c:	2001      	movs	r0, #1
    258e:	bd10      	pop	{r4, pc}
    2590:	2000      	movs	r0, #0
    2592:	bd10      	pop	{r4, pc}
    2594:	2000035c 	.word	0x2000035c
    2598:	20001406 	.word	0x20001406
    259c:	4908      	ldr	r1, [pc, #32]	; (25c0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x60>)
    259e:	b510      	push	{r4, lr}
    25a0:	4603      	mov	r3, r0
    25a2:	2000      	movs	r0, #0
    25a4:	784a      	ldrb	r2, [r1, #1]
    25a6:	e006      	b.n	25b6 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x56>
    25a8:	180c      	adds	r4, r1, r0
    25aa:	f894 4102 	ldrb.w	r4, [r4, #258]	; 0x102
    25ae:	429c      	cmp	r4, r3
    25b0:	d004      	beq.n	25bc <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x5c>
    25b2:	1c40      	adds	r0, r0, #1
    25b4:	b2c0      	uxtb	r0, r0
    25b6:	4282      	cmp	r2, r0
    25b8:	d8f6      	bhi.n	25a8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x48>
    25ba:	2008      	movs	r0, #8
    25bc:	bd10      	pop	{r4, pc}
    25be:	0000      	.short	0x0000
    25c0:	20001406 	.word	0x20001406
    25c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    25c6:	4c1a      	ldr	r4, [pc, #104]	; (2630 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xd0>)
    25c8:	4603      	mov	r3, r0
    25ca:	2000      	movs	r0, #0
    25cc:	7825      	ldrb	r5, [r4, #0]
    25ce:	e02b      	b.n	2628 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xc8>
    25d0:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
    25d4:	4422      	add	r2, r4
    25d6:	780f      	ldrb	r7, [r1, #0]
    25d8:	f892 c153 	ldrb.w	ip, [r2, #339]	; 0x153
    25dc:	f892 6152 	ldrb.w	r6, [r2, #338]	; 0x152
    25e0:	ea87 070c 	eor.w	r7, r7, ip
    25e4:	405e      	eors	r6, r3
    25e6:	443e      	add	r6, r7
    25e8:	784f      	ldrb	r7, [r1, #1]
    25ea:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    25ee:	ea87 070c 	eor.w	r7, r7, ip
    25f2:	443e      	add	r6, r7
    25f4:	788f      	ldrb	r7, [r1, #2]
    25f6:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    25fa:	ea87 070c 	eor.w	r7, r7, ip
    25fe:	443e      	add	r6, r7
    2600:	78cf      	ldrb	r7, [r1, #3]
    2602:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    2606:	ea87 070c 	eor.w	r7, r7, ip
    260a:	443e      	add	r6, r7
    260c:	790f      	ldrb	r7, [r1, #4]
    260e:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    2612:	f892 2158 	ldrb.w	r2, [r2, #344]	; 0x158
    2616:	ea87 070c 	eor.w	r7, r7, ip
    261a:	443e      	add	r6, r7
    261c:	794f      	ldrb	r7, [r1, #5]
    261e:	4057      	eors	r7, r2
    2620:	42f7      	cmn	r7, r6
    2622:	d004      	beq.n	262e <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xce>
    2624:	1c40      	adds	r0, r0, #1
    2626:	b2c0      	uxtb	r0, r0
    2628:	4285      	cmp	r5, r0
    262a:	d8d1      	bhi.n	25d0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x70>
    262c:	2008      	movs	r0, #8
    262e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2630:	20001406 	.word	0x20001406
    2634:	b570      	push	{r4, r5, r6, lr}
    2636:	4605      	mov	r5, r0
    2638:	f7ff ffb0 	bl	259c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x3c>
    263c:	2808      	cmp	r0, #8
    263e:	d120      	bne.n	2682 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x122>
    2640:	4c10      	ldr	r4, [pc, #64]	; (2684 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x124>)
    2642:	7820      	ldrb	r0, [r4, #0]
    2644:	1e40      	subs	r0, r0, #1
    2646:	b2c0      	uxtb	r0, r0
    2648:	7020      	strb	r0, [r4, #0]
    264a:	42a8      	cmp	r0, r5
    264c:	d019      	beq.n	2682 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x122>
    264e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2652:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
    2656:	4420      	add	r0, r4
    2658:	4421      	add	r1, r4
    265a:	f500 72ab 	add.w	r2, r0, #342	; 0x156
    265e:	f8d0 0152 	ldr.w	r0, [r0, #338]	; 0x152
    2662:	f8c1 0152 	str.w	r0, [r1, #338]	; 0x152
    2666:	8810      	ldrh	r0, [r2, #0]
    2668:	f8a1 0156 	strh.w	r0, [r1, #342]	; 0x156
    266c:	7890      	ldrb	r0, [r2, #2]
    266e:	f881 0158 	strb.w	r0, [r1, #344]	; 0x158
    2672:	7820      	ldrb	r0, [r4, #0]
    2674:	f7ff ff92 	bl	259c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x3c>
    2678:	2808      	cmp	r0, #8
    267a:	d002      	beq.n	2682 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x122>
    267c:	4420      	add	r0, r4
    267e:	f880 5102 	strb.w	r5, [r0, #258]	; 0x102
    2682:	bd70      	pop	{r4, r5, r6, pc}
    2684:	20001406 	.word	0x20001406
    2688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    268c:	4c1d      	ldr	r4, [pc, #116]	; (2704 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x1a4>)
    268e:	4606      	mov	r6, r0
    2690:	19a7      	adds	r7, r4, r6
    2692:	7860      	ldrb	r0, [r4, #1]
    2694:	1e40      	subs	r0, r0, #1
    2696:	b2c5      	uxtb	r5, r0
    2698:	7065      	strb	r5, [r4, #1]
    269a:	f897 a102 	ldrb.w	sl, [r7, #258]	; 0x102
    269e:	42ae      	cmp	r6, r5
    26a0:	d02a      	beq.n	26f8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x198>
    26a2:	eb04 1905 	add.w	r9, r4, r5, lsl #4
    26a6:	eb04 1806 	add.w	r8, r4, r6, lsl #4
    26aa:	f109 0102 	add.w	r1, r9, #2
    26ae:	f108 0002 	add.w	r0, r8, #2
    26b2:	2210      	movs	r2, #16
    26b4:	f00e fbe7 	bl	10e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    26b8:	f109 0182 	add.w	r1, r9, #130	; 0x82
    26bc:	f108 0082 	add.w	r0, r8, #130	; 0x82
    26c0:	2210      	movs	r2, #16
    26c2:	f00e fbe0 	bl	10e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    26c6:	1960      	adds	r0, r4, r5
    26c8:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    26cc:	f890 1102 	ldrb.w	r1, [r0, #258]	; 0x102
    26d0:	f887 1102 	strb.w	r1, [r7, #258]	; 0x102
    26d4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    26d8:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    26dc:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    26e0:	f8d2 310a 	ldr.w	r3, [r2, #266]	; 0x10a
    26e4:	f8c1 310a 	str.w	r3, [r1, #266]	; 0x10a
    26e8:	f8b2 210e 	ldrh.w	r2, [r2, #270]	; 0x10e
    26ec:	f8a1 210e 	strh.w	r2, [r1, #270]	; 0x10e
    26f0:	f890 013a 	ldrb.w	r0, [r0, #314]	; 0x13a
    26f4:	f887 013a 	strb.w	r0, [r7, #314]	; 0x13a
    26f8:	4650      	mov	r0, sl
    26fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    26fe:	f7ff bf99 	b.w	2634 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xd4>
    2702:	0000      	.short	0x0000
    2704:	20001406 	.word	0x20001406

00002708 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    2708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    270c:	4604      	mov	r4, r0
    270e:	f100 0580 	add.w	r5, r0, #128	; 0x80
    2712:	f04f 0901 	mov.w	r9, #1
    2716:	b171      	cbz	r1, 2736 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    2718:	f104 07a6 	add.w	r7, r4, #166	; 0xa6
    271c:	1e7e      	subs	r6, r7, #1
    271e:	2901      	cmp	r1, #1
    2720:	d029      	beq.n	2776 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6e>
    2722:	2902      	cmp	r1, #2
    2724:	d04e      	beq.n	27c4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xbc>
    2726:	2903      	cmp	r1, #3
    2728:	d123      	bne.n	2772 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6a>
    272a:	4639      	mov	r1, r7
    272c:	4630      	mov	r0, r6
    272e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2732:	f00b bc89 	b.w	e048 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    2736:	f44f 723e 	mov.w	r2, #760	; 0x2f8
    273a:	2100      	movs	r1, #0
    273c:	f00e fc1d 	bl	10f7a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2740:	f885 9025 	strb.w	r9, [r5, #37]	; 0x25
    2744:	4924      	ldr	r1, [pc, #144]	; (27d8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd0>)
    2746:	66e9      	str	r1, [r5, #108]	; 0x6c
    2748:	4620      	mov	r0, r4
    274a:	2107      	movs	r1, #7
    274c:	6729      	str	r1, [r5, #112]	; 0x70
    274e:	f810 1fec 	ldrb.w	r1, [r0, #236]!
    2752:	f021 0104 	bic.w	r1, r1, #4
    2756:	7001      	strb	r1, [r0, #0]
    2758:	20fe      	movs	r0, #254	; 0xfe
    275a:	f885 00a6 	strb.w	r0, [r5, #166]	; 0xa6
    275e:	207f      	movs	r0, #127	; 0x7f
    2760:	7668      	strb	r0, [r5, #25]
    2762:	481e      	ldr	r0, [pc, #120]	; (27dc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd4>)
    2764:	60a8      	str	r0, [r5, #8]
    2766:	2000      	movs	r0, #0
    2768:	e9c5 0000 	strd	r0, r0, [r5]
    276c:	2020      	movs	r0, #32
    276e:	f884 02a4 	strb.w	r0, [r4, #676]	; 0x2a4
    2772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2776:	f04f 0800 	mov.w	r8, #0
    277a:	f8a4 8236 	strh.w	r8, [r4, #566]	; 0x236
    277e:	f884 822b 	strb.w	r8, [r4, #555]	; 0x22b
    2782:	6921      	ldr	r1, [r4, #16]
    2784:	4816      	ldr	r0, [pc, #88]	; (27e0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd8>)
    2786:	460a      	mov	r2, r1
    2788:	4408      	add	r0, r1
    278a:	fbb0 f0f1 	udiv	r0, r0, r1
    278e:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    2792:	f640 30b8 	movw	r0, #3000	; 0xbb8
    2796:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
    279a:	8b63      	ldrh	r3, [r4, #26]
    279c:	4628      	mov	r0, r5
    279e:	f000 f821 	bl	27e4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xdc>
    27a2:	4639      	mov	r1, r7
    27a4:	4630      	mov	r0, r6
    27a6:	f00b fc4f 	bl	e048 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    27aa:	f00e faee 	bl	10d8a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    27ae:	b118      	cbz	r0, 27b8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xb0>
    27b0:	6960      	ldr	r0, [r4, #20]
    27b2:	f000 fbbd 	bl	2f30 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    27b6:	b110      	cbz	r0, 27be <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xb6>
    27b8:	f884 821a 	strb.w	r8, [r4, #538]	; 0x21a
    27bc:	e7d9      	b.n	2772 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6a>
    27be:	f884 921a 	strb.w	r9, [r4, #538]	; 0x21a
    27c2:	e7d6      	b.n	2772 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6a>
    27c4:	6901      	ldr	r1, [r0, #16]
    27c6:	f8b4 32da 	ldrh.w	r3, [r4, #730]	; 0x2da
    27ca:	f8d4 22d4 	ldr.w	r2, [r4, #724]	; 0x2d4
    27ce:	4628      	mov	r0, r5
    27d0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    27d4:	f000 b806 	b.w	27e4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xdc>
    27d8:	c404492f 	.word	0xc404492f
    27dc:	fffce000 	.word	0xfffce000
    27e0:	01c9c37f 	.word	0x01c9c37f
    27e4:	b510      	push	{r4, lr}
    27e6:	2400      	movs	r4, #0
    27e8:	f8a0 404c 	strh.w	r4, [r0, #76]	; 0x4c
    27ec:	f830 4f50 	ldrh.w	r4, [r0, #80]!
    27f0:	434c      	muls	r4, r1
    27f2:	fbb4 f4f2 	udiv	r4, r4, r2
    27f6:	f820 4910 	strh.w	r4, [r0], #-16
    27fa:	f240 2471 	movw	r4, #625	; 0x271
    27fe:	4363      	muls	r3, r4
    2800:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    2804:	1e5b      	subs	r3, r3, #1
    2806:	fbb3 f3f2 	udiv	r3, r3, r2
    280a:	81c3      	strh	r3, [r0, #14]
    280c:	4b09      	ldr	r3, [pc, #36]	; (2834 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x12c>)
    280e:	fbb3 f3f2 	udiv	r3, r3, r2
    2812:	1c5b      	adds	r3, r3, #1
    2814:	8283      	strh	r3, [r0, #20]
    2816:	8903      	ldrh	r3, [r0, #8]
    2818:	4363      	muls	r3, r4
    281a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    281e:	1e5b      	subs	r3, r3, #1
    2820:	fbb3 f3f2 	udiv	r3, r3, r2
    2824:	6043      	str	r3, [r0, #4]
    2826:	6803      	ldr	r3, [r0, #0]
    2828:	434b      	muls	r3, r1
    282a:	fbb3 f1f2 	udiv	r1, r3, r2
    282e:	6001      	str	r1, [r0, #0]
    2830:	bd10      	pop	{r4, pc}
    2832:	0000      	.short	0x0000
    2834:	02625a00 	.word	0x02625a00

00002838 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>:
    2838:	4902      	ldr	r1, [pc, #8]	; (2844 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ+0xc>)
    283a:	f991 1000 	ldrsb.w	r1, [r1]
    283e:	f00b bbb4 	b.w	dfaa <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x8>
    2842:	0000      	.short	0x0000
    2844:	20000374 	.word	0x20000374

00002848 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>:
    2848:	b508      	push	{r3, lr}
    284a:	207f      	movs	r0, #127	; 0x7f
    284c:	f88d 0000 	strb.w	r0, [sp]
    2850:	4668      	mov	r0, sp
    2852:	f005 fbc3 	bl	7fdc <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    2856:	b140      	cbz	r0, 286a <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x22>
    2858:	4805      	ldr	r0, [pc, #20]	; (2870 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x28>)
    285a:	7840      	ldrb	r0, [r0, #1]
    285c:	4240      	negs	r0, r0
    285e:	b241      	sxtb	r1, r0
    2860:	f99d 0000 	ldrsb.w	r0, [sp]
    2864:	f00b fba1 	bl	dfaa <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x8>
    2868:	bd08      	pop	{r3, pc}
    286a:	f99d 0000 	ldrsb.w	r0, [sp]
    286e:	bd08      	pop	{r3, pc}
    2870:	20000374 	.word	0x20000374

00002874 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA>:
    2874:	4a01      	ldr	r2, [pc, #4]	; (287c <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x8>)
    2876:	7010      	strb	r0, [r2, #0]
    2878:	7051      	strb	r1, [r2, #1]
    287a:	4770      	bx	lr
    287c:	20000374 	.word	0x20000374
    2880:	b570      	push	{r4, r5, r6, lr}
    2882:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
    2886:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    288a:	2401      	movs	r4, #1
    288c:	fb03 2101 	mla	r1, r3, r1, r2
    2890:	2225      	movs	r2, #37	; 0x25
    2892:	fbb1 f3f2 	udiv	r3, r1, r2
    2896:	fb02 1113 	mls	r1, r2, r3, r1
    289a:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    289e:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
    28a2:	f001 0307 	and.w	r3, r1, #7
    28a6:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
    28aa:	fa04 f303 	lsl.w	r3, r4, r3
    28ae:	421a      	tst	r2, r3
    28b0:	d004      	beq.n	28bc <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x48>
    28b2:	bf00      	nop
    28b4:	f880 1033 	strb.w	r1, [r0, #51]	; 0x33
    28b8:	2000      	movs	r0, #0
    28ba:	bd70      	pop	{r4, r5, r6, pc}
    28bc:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
    28c0:	fbb1 f3f2 	udiv	r3, r1, r2
    28c4:	fb02 1113 	mls	r1, r2, r3, r1
    28c8:	1c49      	adds	r1, r1, #1
    28ca:	b2c9      	uxtb	r1, r1
    28cc:	2300      	movs	r3, #0
    28ce:	18c5      	adds	r5, r0, r3
    28d0:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
    28d4:	428a      	cmp	r2, r1
    28d6:	d312      	bcc.n	28fe <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x8a>
    28d8:	f895 5026 	ldrb.w	r5, [r5, #38]	; 0x26
    28dc:	2200      	movs	r2, #0
    28de:	bf00      	nop
    28e0:	fa04 f602 	lsl.w	r6, r4, r2
    28e4:	4235      	tst	r5, r6
    28e6:	d001      	beq.n	28ec <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x78>
    28e8:	1e49      	subs	r1, r1, #1
    28ea:	b2c9      	uxtb	r1, r1
    28ec:	b121      	cbz	r1, 28f8 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x84>
    28ee:	1c52      	adds	r2, r2, #1
    28f0:	b2d2      	uxtb	r2, r2
    28f2:	2a08      	cmp	r2, #8
    28f4:	d3f4      	bcc.n	28e0 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x6c>
    28f6:	e004      	b.n	2902 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x8e>
    28f8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    28fc:	e7da      	b.n	28b4 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x40>
    28fe:	1a89      	subs	r1, r1, r2
    2900:	b2c9      	uxtb	r1, r1
    2902:	1c5b      	adds	r3, r3, #1
    2904:	b2db      	uxtb	r3, r3
    2906:	2b05      	cmp	r3, #5
    2908:	d3e1      	bcc.n	28ce <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x5a>
    290a:	201f      	movs	r0, #31
    290c:	bd70      	pop	{r4, r5, r6, pc}
    290e:	0000      	movs	r0, r0
    2910:	b570      	push	{r4, r5, r6, lr}
    2912:	1c49      	adds	r1, r1, #1
    2914:	2300      	movs	r3, #0
    2916:	b2c9      	uxtb	r1, r1
    2918:	2401      	movs	r4, #1
    291a:	18c5      	adds	r5, r0, r3
    291c:	79aa      	ldrb	r2, [r5, #6]
    291e:	428a      	cmp	r2, r1
    2920:	d312      	bcc.n	2948 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xd4>
    2922:	f895 5001 	ldrb.w	r5, [r5, #1]
    2926:	2200      	movs	r2, #0
    2928:	fa04 f602 	lsl.w	r6, r4, r2
    292c:	4235      	tst	r5, r6
    292e:	d001      	beq.n	2934 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xc0>
    2930:	1e49      	subs	r1, r1, #1
    2932:	b2c9      	uxtb	r1, r1
    2934:	b121      	cbz	r1, 2940 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xcc>
    2936:	1c52      	adds	r2, r2, #1
    2938:	b2d2      	uxtb	r2, r2
    293a:	2a08      	cmp	r2, #8
    293c:	d3f4      	bcc.n	2928 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xb4>
    293e:	e005      	b.n	294c <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xd8>
    2940:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
    2944:	b2c0      	uxtb	r0, r0
    2946:	bd70      	pop	{r4, r5, r6, pc}
    2948:	1a89      	subs	r1, r1, r2
    294a:	b2c9      	uxtb	r1, r1
    294c:	1c5b      	adds	r3, r3, #1
    294e:	b2db      	uxtb	r3, r3
    2950:	2b05      	cmp	r3, #5
    2952:	d3e2      	bcc.n	291a <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xa6>
    2954:	219d      	movs	r1, #157	; 0x9d
    2956:	2046      	movs	r0, #70	; 0x46
    2958:	f7fe f82a 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000295c <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>:
    295c:	7841      	ldrb	r1, [r0, #1]
    295e:	b141      	cbz	r1, 2972 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    2960:	78c0      	ldrb	r0, [r0, #3]
    2962:	282b      	cmp	r0, #43	; 0x2b
    2964:	d203      	bcs.n	296e <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x12>
    2966:	4a04      	ldr	r2, [pc, #16]	; (2978 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x1c>)
    2968:	5c10      	ldrb	r0, [r2, r0]
    296a:	4288      	cmp	r0, r1
    296c:	d101      	bne.n	2972 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    296e:	2001      	movs	r0, #1
    2970:	4770      	bx	lr
    2972:	2000      	movs	r0, #0
    2974:	4770      	bx	lr
    2976:	0000      	.short	0x0000
    2978:	000110c4 	.word	0x000110c4

0000297c <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>:
    297c:	b510      	push	{r4, lr}
    297e:	2201      	movs	r2, #1
    2980:	70c1      	strb	r1, [r0, #3]
    2982:	292b      	cmp	r1, #43	; 0x2b
    2984:	d202      	bcs.n	298c <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x10>
    2986:	4a06      	ldr	r2, [pc, #24]	; (29a0 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x24>)
    2988:	5c52      	ldrb	r2, [r2, r1]
    298a:	e006      	b.n	299a <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    298c:	29ff      	cmp	r1, #255	; 0xff
    298e:	d004      	beq.n	299a <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    2990:	f240 4174 	movw	r1, #1140	; 0x474
    2994:	202a      	movs	r0, #42	; 0x2a
    2996:	f7fe f80b 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    299a:	7042      	strb	r2, [r0, #1]
    299c:	bd10      	pop	{r4, pc}
    299e:	0000      	.short	0x0000
    29a0:	000110c4 	.word	0x000110c4

000029a4 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>:
    29a4:	4904      	ldr	r1, [pc, #16]	; (29b8 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0x14>)
    29a6:	7c89      	ldrb	r1, [r1, #18]
    29a8:	0749      	lsls	r1, r1, #29
    29aa:	d400      	bmi.n	29ae <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xa>
    29ac:	b108      	cbz	r0, 29b2 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xe>
    29ae:	2000      	movs	r0, #0
    29b0:	4770      	bx	lr
    29b2:	2001      	movs	r0, #1
    29b4:	4770      	bx	lr
    29b6:	0000      	.short	0x0000
    29b8:	20001308 	.word	0x20001308

000029bc <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>:
    29bc:	4803      	ldr	r0, [pc, #12]	; (29cc <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0x10>)
    29be:	7c80      	ldrb	r0, [r0, #18]
    29c0:	0780      	lsls	r0, r0, #30
    29c2:	d401      	bmi.n	29c8 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0xc>
    29c4:	2001      	movs	r0, #1
    29c6:	4770      	bx	lr
    29c8:	2000      	movs	r0, #0
    29ca:	4770      	bx	lr
    29cc:	20001308 	.word	0x20001308

000029d0 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>:
    29d0:	4803      	ldr	r0, [pc, #12]	; (29e0 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x10>)
    29d2:	7c80      	ldrb	r0, [r0, #18]
    29d4:	07c0      	lsls	r0, r0, #31
    29d6:	d001      	beq.n	29dc <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xc>
    29d8:	2000      	movs	r0, #0
    29da:	4770      	bx	lr
    29dc:	2001      	movs	r0, #1
    29de:	4770      	bx	lr
    29e0:	20001308 	.word	0x20001308
    29e4:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    29e8:	4688      	mov	r8, r1
    29ea:	4699      	mov	r9, r3
    29ec:	4615      	mov	r5, r2
    29ee:	4604      	mov	r4, r0
    29f0:	4669      	mov	r1, sp
    29f2:	f00b f944 	bl	dc7e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    29f6:	bbe0      	cbnz	r0, 2a72 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa2>
    29f8:	9e01      	ldr	r6, [sp, #4]
    29fa:	2700      	movs	r7, #0
    29fc:	3680      	adds	r6, #128	; 0x80
    29fe:	b17d      	cbz	r5, 2a20 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x50>
    2a00:	4620      	mov	r0, r4
    2a02:	f7fe fcad 	bl	1360 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    2a06:	0004      	movs	r4, r0
    2a08:	d00e      	beq.n	2a28 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x58>
    2a0a:	4629      	mov	r1, r5
    2a0c:	f00a fd38 	bl	d480 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    2a10:	b118      	cbz	r0, 2a1a <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4a>
    2a12:	491b      	ldr	r1, [pc, #108]	; (2a80 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xb0>)
    2a14:	8849      	ldrh	r1, [r1, #2]
    2a16:	42a9      	cmp	r1, r5
    2a18:	d208      	bcs.n	2a2c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x5c>
    2a1a:	2000      	movs	r0, #0
    2a1c:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    2a20:	2001      	movs	r0, #1
    2a22:	f886 0024 	strb.w	r0, [r6, #36]	; 0x24
    2a26:	e024      	b.n	2a72 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa2>
    2a28:	2167      	movs	r1, #103	; 0x67
    2a2a:	e025      	b.n	2a78 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa8>
    2a2c:	4601      	mov	r1, r0
    2a2e:	aa02      	add	r2, sp, #8
    2a30:	4620      	mov	r0, r4
    2a32:	f00a fd1e 	bl	d472 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    2a36:	9802      	ldr	r0, [sp, #8]
    2a38:	8007      	strh	r7, [r0, #0]
    2a3a:	7087      	strb	r7, [r0, #2]
    2a3c:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
    2a40:	b109      	cbz	r1, 2a46 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x76>
    2a42:	f04f 0802 	mov.w	r8, #2
    2a46:	4641      	mov	r1, r8
    2a48:	f00b fc51 	bl	e2ee <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    2a4c:	9802      	ldr	r0, [sp, #8]
    2a4e:	462a      	mov	r2, r5
    2a50:	4649      	mov	r1, r9
    2a52:	1cc0      	adds	r0, r0, #3
    2a54:	f00e fa17 	bl	10e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2a58:	4620      	mov	r0, r4
    2a5a:	4629      	mov	r1, r5
    2a5c:	f00a fcc7 	bl	d3ee <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    2a60:	b148      	cbz	r0, 2a76 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa6>
    2a62:	4668      	mov	r0, sp
    2a64:	f00b fc9e 	bl	e3a4 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    2a68:	9801      	ldr	r0, [sp, #4]
    2a6a:	f8a0 7222 	strh.w	r7, [r0, #546]	; 0x222
    2a6e:	f886 7024 	strb.w	r7, [r6, #36]	; 0x24
    2a72:	2001      	movs	r0, #1
    2a74:	e7d2      	b.n	2a1c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4c>
    2a76:	217c      	movs	r1, #124	; 0x7c
    2a78:	202b      	movs	r0, #43	; 0x2b
    2a7a:	f7fd ff99 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2a7e:	0000      	.short	0x0000
    2a80:	20001308 	.word	0x20001308

00002a84 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    2a84:	4809      	ldr	r0, [pc, #36]	; (2aac <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x28>)
    2a86:	b082      	sub	sp, #8
    2a88:	7a00      	ldrb	r0, [r0, #8]
    2a8a:	f88d 0000 	strb.w	r0, [sp]
    2a8e:	9800      	ldr	r0, [sp, #0]
    2a90:	9000      	str	r0, [sp, #0]
    2a92:	f89d 0000 	ldrb.w	r0, [sp]
    2a96:	2800      	cmp	r0, #0
    2a98:	d105      	bne.n	2aa6 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x22>
    2a9a:	2202      	movs	r2, #2
    2a9c:	4904      	ldr	r1, [pc, #16]	; (2ab0 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x2c>)
    2a9e:	4803      	ldr	r0, [pc, #12]	; (2aac <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x28>)
    2aa0:	b002      	add	sp, #8
    2aa2:	f00b bcab 	b.w	e3fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    2aa6:	b002      	add	sp, #8
    2aa8:	4770      	bx	lr
    2aaa:	0000      	.short	0x0000
    2aac:	20001320 	.word	0x20001320
    2ab0:	0000e443 	.word	0x0000e443

00002ab4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    2ab4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ab8:	f8df 9178 	ldr.w	r9, [pc, #376]	; 2c34 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x180>
    2abc:	4f5e      	ldr	r7, [pc, #376]	; (2c38 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x184>)
    2abe:	4683      	mov	fp, r0
    2ac0:	f04f 0a01 	mov.w	sl, #1
    2ac4:	2600      	movs	r6, #0
    2ac6:	6878      	ldr	r0, [r7, #4]
    2ac8:	4635      	mov	r5, r6
    2aca:	7a00      	ldrb	r0, [r0, #8]
    2acc:	f88d 0000 	strb.w	r0, [sp]
    2ad0:	9800      	ldr	r0, [sp, #0]
    2ad2:	9000      	str	r0, [sp, #0]
    2ad4:	f89d 1000 	ldrb.w	r1, [sp]
    2ad8:	2910      	cmp	r1, #16
    2ada:	d106      	bne.n	2aea <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x36>
    2adc:	f899 1013 	ldrb.w	r1, [r9, #19]
    2ae0:	b119      	cbz	r1, 2aea <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x36>
    2ae2:	f8b9 0014 	ldrh.w	r0, [r9, #20]
    2ae6:	2800      	cmp	r0, #0
    2ae8:	d073      	beq.n	2bd2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    2aea:	f88d 6000 	strb.w	r6, [sp]
    2aee:	4668      	mov	r0, sp
    2af0:	f000 f906 	bl	2d00 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb4>
    2af4:	f89d 1000 	ldrb.w	r1, [sp]
    2af8:	2900      	cmp	r1, #0
    2afa:	d1f8      	bne.n	2aee <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3a>
    2afc:	2800      	cmp	r0, #0
    2afe:	d068      	beq.n	2bd2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    2b00:	4604      	mov	r4, r0
    2b02:	7a00      	ldrb	r0, [r0, #8]
    2b04:	f88d 0000 	strb.w	r0, [sp]
    2b08:	9800      	ldr	r0, [sp, #0]
    2b0a:	9000      	str	r0, [sp, #0]
    2b0c:	f89d 8000 	ldrb.w	r8, [sp]
    2b10:	f104 0008 	add.w	r0, r4, #8
    2b14:	2105      	movs	r1, #5
    2b16:	9000      	str	r0, [sp, #0]
    2b18:	7001      	strb	r1, [r0, #0]
    2b1a:	4640      	mov	r0, r8
    2b1c:	f1b8 0f08 	cmp.w	r8, #8
    2b20:	d042      	beq.n	2ba8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xf4>
    2b22:	dc07      	bgt.n	2b34 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x80>
    2b24:	2802      	cmp	r0, #2
    2b26:	d00d      	beq.n	2b44 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x90>
    2b28:	2803      	cmp	r0, #3
    2b2a:	d017      	beq.n	2b5c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>
    2b2c:	f1b8 0f04 	cmp.w	r8, #4
    2b30:	d105      	bne.n	2b3e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x8a>
    2b32:	e01d      	b.n	2b70 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xbc>
    2b34:	280f      	cmp	r0, #15
    2b36:	d052      	beq.n	2bde <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12a>
    2b38:	f1b8 0f10 	cmp.w	r8, #16
    2b3c:	d059      	beq.n	2bf2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13e>
    2b3e:	f240 214a 	movw	r1, #586	; 0x24a
    2b42:	e065      	b.n	2c10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    2b44:	6862      	ldr	r2, [r4, #4]
    2b46:	b132      	cbz	r2, 2b56 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa2>
    2b48:	4659      	mov	r1, fp
    2b4a:	4620      	mov	r0, r4
    2b4c:	4790      	blx	r2
    2b4e:	2004      	movs	r0, #4
    2b50:	f360 0507 	bfi	r5, r0, #0, #8
    2b54:	e010      	b.n	2b78 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc4>
    2b56:	f240 11c3 	movw	r1, #451	; 0x1c3
    2b5a:	e059      	b.n	2c10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    2b5c:	6862      	ldr	r2, [r4, #4]
    2b5e:	b122      	cbz	r2, 2b6a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb6>
    2b60:	4659      	mov	r1, fp
    2b62:	4620      	mov	r0, r4
    2b64:	4790      	blx	r2
    2b66:	4605      	mov	r5, r0
    2b68:	e006      	b.n	2b78 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc4>
    2b6a:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
    2b6e:	e04f      	b.n	2c10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    2b70:	6861      	ldr	r1, [r4, #4]
    2b72:	b1b1      	cbz	r1, 2ba2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xee>
    2b74:	4620      	mov	r0, r4
    2b76:	4788      	blx	r1
    2b78:	f3c5 2007 	ubfx	r0, r5, #8, #8
    2b7c:	2801      	cmp	r0, #1
    2b7e:	d04a      	beq.n	2c16 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x162>
    2b80:	f3ef 8110 	mrs	r1, PRIMASK
    2b84:	b672      	cpsid	i
    2b86:	7a20      	ldrb	r0, [r4, #8]
    2b88:	f88d 0000 	strb.w	r0, [sp]
    2b8c:	9800      	ldr	r0, [sp, #0]
    2b8e:	9000      	str	r0, [sp, #0]
    2b90:	f89d 0000 	ldrb.w	r0, [sp]
    2b94:	2805      	cmp	r0, #5
    2b96:	d042      	beq.n	2c1e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16a>
    2b98:	b3b0      	cbz	r0, 2c08 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x154>
    2b9a:	f366 0507 	bfi	r5, r6, #0, #8
    2b9e:	b3a1      	cbz	r1, 2c0a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x156>
    2ba0:	e041      	b.n	2c26 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x172>
    2ba2:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
    2ba6:	e033      	b.n	2c10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    2ba8:	6860      	ldr	r0, [r4, #4]
    2baa:	465d      	mov	r5, fp
    2bac:	b198      	cbz	r0, 2bd6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x122>
    2bae:	8804      	ldrh	r4, [r0, #0]
    2bb0:	4620      	mov	r0, r4
    2bb2:	f7fe fbd5 	bl	1360 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    2bb6:	b180      	cbz	r0, 2bda <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    2bb8:	706e      	strb	r6, [r5, #1]
    2bba:	210d      	movs	r1, #13
    2bbc:	7029      	strb	r1, [r5, #0]
    2bbe:	80ec      	strh	r4, [r5, #6]
    2bc0:	f8a5 a008 	strh.w	sl, [r5, #8]
    2bc4:	f885 a004 	strb.w	sl, [r5, #4]
    2bc8:	4631      	mov	r1, r6
    2bca:	f00a fcf0 	bl	d5ae <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    2bce:	2004      	movs	r0, #4
    2bd0:	613e      	str	r6, [r7, #16]
    2bd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2bd6:	21e5      	movs	r1, #229	; 0xe5
    2bd8:	e01a      	b.n	2c10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    2bda:	21c5      	movs	r1, #197	; 0xc5
    2bdc:	e018      	b.n	2c10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    2bde:	f88b 6001 	strb.w	r6, [fp, #1]
    2be2:	2116      	movs	r1, #22
    2be4:	f88b 1000 	strb.w	r1, [fp]
    2be8:	f8d4 1009 	ldr.w	r1, [r4, #9]
    2bec:	f8cb 1004 	str.w	r1, [fp, #4]
    2bf0:	e7ad      	b.n	2b4e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    2bf2:	4812      	ldr	r0, [pc, #72]	; (2c3c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x188>)
    2bf4:	6802      	ldr	r2, [r0, #0]
    2bf6:	b122      	cbz	r2, 2c02 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14e>
    2bf8:	6860      	ldr	r0, [r4, #4]
    2bfa:	b138      	cbz	r0, 2c0c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x158>
    2bfc:	8800      	ldrh	r0, [r0, #0]
    2bfe:	4659      	mov	r1, fp
    2c00:	4790      	blx	r2
    2c02:	2002      	movs	r0, #2
    2c04:	613e      	str	r6, [r7, #16]
    2c06:	e7e4      	b.n	2bd2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    2c08:	e009      	b.n	2c1e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16a>
    2c0a:	e00b      	b.n	2c24 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x170>
    2c0c:	f44f 7110 	mov.w	r1, #576	; 0x240
    2c10:	2010      	movs	r0, #16
    2c12:	f7fd fecd 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2c16:	9800      	ldr	r0, [sp, #0]
    2c18:	4641      	mov	r1, r8
    2c1a:	7001      	strb	r1, [r0, #0]
    2c1c:	e003      	b.n	2c26 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x172>
    2c1e:	7226      	strb	r6, [r4, #8]
    2c20:	613e      	str	r6, [r7, #16]
    2c22:	e7bc      	b.n	2b9e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    2c24:	b662      	cpsie	i
    2c26:	f015 0fff 	tst.w	r5, #255	; 0xff
    2c2a:	f43f af4c 	beq.w	2ac6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12>
    2c2e:	b2e8      	uxtb	r0, r5
    2c30:	e7cf      	b.n	2bd2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    2c32:	0000      	.short	0x0000
    2c34:	20001308 	.word	0x20001308
    2c38:	20001334 	.word	0x20001334
    2c3c:	200000c8 	.word	0x200000c8

00002c40 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    2c40:	4901      	ldr	r1, [pc, #4]	; (2c48 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    2c42:	7008      	strb	r0, [r1, #0]
    2c44:	f000 b8be 	b.w	2dc4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x178>
    2c48:	20000376 	.word	0x20000376

00002c4c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>:
    2c4c:	4902      	ldr	r1, [pc, #8]	; (2c58 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc>)
    2c4e:	4801      	ldr	r0, [pc, #4]	; (2c54 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8>)
    2c50:	6008      	str	r0, [r1, #0]
    2c52:	4770      	bx	lr
    2c54:	00002c5d 	.word	0x00002c5d
    2c58:	200000c8 	.word	0x200000c8
    2c5c:	b538      	push	{r3, r4, r5, lr}
    2c5e:	000d      	movs	r5, r1
    2c60:	d014      	beq.n	2c8c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x40>
    2c62:	80a8      	strh	r0, [r5, #4]
    2c64:	2100      	movs	r1, #0
    2c66:	7269      	strb	r1, [r5, #9]
    2c68:	f7fe fb64 	bl	1334 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    2c6c:	4604      	mov	r4, r0
    2c6e:	f00a fbe2 	bl	d436 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    2c72:	b170      	cbz	r0, 2c92 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x46>
    2c74:	4601      	mov	r1, r0
    2c76:	466a      	mov	r2, sp
    2c78:	4620      	mov	r0, r4
    2c7a:	f00a fbfa 	bl	d472 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    2c7e:	80e8      	strh	r0, [r5, #6]
    2c80:	b150      	cbz	r0, 2c98 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x4c>
    2c82:	28fb      	cmp	r0, #251	; 0xfb
    2c84:	d90b      	bls.n	2c9e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x52>
    2c86:	f240 1123 	movw	r1, #291	; 0x123
    2c8a:	e033      	b.n	2cf4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    2c8c:	f240 1113 	movw	r1, #275	; 0x113
    2c90:	e030      	b.n	2cf4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    2c92:	f44f 718e 	mov.w	r1, #284	; 0x11c
    2c96:	e02d      	b.n	2cf4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    2c98:	f240 1121 	movw	r1, #289	; 0x121
    2c9c:	e02a      	b.n	2cf4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    2c9e:	9800      	ldr	r0, [sp, #0]
    2ca0:	f00b fad1 	bl	e246 <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>
    2ca4:	2801      	cmp	r0, #1
    2ca6:	d004      	beq.n	2cb2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x66>
    2ca8:	2802      	cmp	r0, #2
    2caa:	d002      	beq.n	2cb2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x66>
    2cac:	f240 1133 	movw	r1, #307	; 0x133
    2cb0:	e020      	b.n	2cf4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    2cb2:	7228      	strb	r0, [r5, #8]
    2cb4:	6828      	ldr	r0, [r5, #0]
    2cb6:	b1a8      	cbz	r0, 2ce4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x98>
    2cb8:	9900      	ldr	r1, [sp, #0]
    2cba:	88ea      	ldrh	r2, [r5, #6]
    2cbc:	1cc9      	adds	r1, r1, #3
    2cbe:	f00e f8e2 	bl	10e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2cc2:	4620      	mov	r0, r4
    2cc4:	f00a fb7f 	bl	d3c6 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    2cc8:	b178      	cbz	r0, 2cea <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x9e>
    2cca:	4620      	mov	r0, r4
    2ccc:	2100      	movs	r1, #0
    2cce:	f00a fc6e 	bl	d5ae <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    2cd2:	b168      	cbz	r0, 2cf0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa4>
    2cd4:	4809      	ldr	r0, [pc, #36]	; (2cfc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb0>)
    2cd6:	7cc1      	ldrb	r1, [r0, #19]
    2cd8:	2900      	cmp	r1, #0
    2cda:	d002      	beq.n	2ce2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x96>
    2cdc:	8a81      	ldrh	r1, [r0, #20]
    2cde:	1e49      	subs	r1, r1, #1
    2ce0:	8281      	strh	r1, [r0, #20]
    2ce2:	bd38      	pop	{r3, r4, r5, pc}
    2ce4:	f44f 719d 	mov.w	r1, #314	; 0x13a
    2ce8:	e004      	b.n	2cf4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    2cea:	f240 113f 	movw	r1, #319	; 0x13f
    2cee:	e001      	b.n	2cf4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    2cf0:	f44f 71a2 	mov.w	r1, #324	; 0x144
    2cf4:	2010      	movs	r0, #16
    2cf6:	f7fd fe5b 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2cfa:	0000      	.short	0x0000
    2cfc:	20001308 	.word	0x20001308
    2d00:	b538      	push	{r3, r4, r5, lr}
    2d02:	4603      	mov	r3, r0
    2d04:	4917      	ldr	r1, [pc, #92]	; (2d64 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x118>)
    2d06:	2000      	movs	r0, #0
    2d08:	7018      	strb	r0, [r3, #0]
    2d0a:	6908      	ldr	r0, [r1, #16]
    2d0c:	2401      	movs	r4, #1
    2d0e:	b140      	cbz	r0, 2d22 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xd6>
    2d10:	7a02      	ldrb	r2, [r0, #8]
    2d12:	f88d 2000 	strb.w	r2, [sp]
    2d16:	9a00      	ldr	r2, [sp, #0]
    2d18:	9200      	str	r2, [sp, #0]
    2d1a:	f89d 5000 	ldrb.w	r5, [sp]
    2d1e:	2d00      	cmp	r5, #0
    2d20:	d111      	bne.n	2d46 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xfa>
    2d22:	6848      	ldr	r0, [r1, #4]
    2d24:	7a02      	ldrb	r2, [r0, #8]
    2d26:	f88d 2000 	strb.w	r2, [sp]
    2d2a:	9a00      	ldr	r2, [sp, #0]
    2d2c:	9200      	str	r2, [sp, #0]
    2d2e:	f89d 5000 	ldrb.w	r5, [sp]
    2d32:	2d01      	cmp	r5, #1
    2d34:	d006      	beq.n	2d44 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xf8>
    2d36:	f3ef 8210 	mrs	r2, PRIMASK
    2d3a:	b672      	cpsid	i
    2d3c:	6805      	ldr	r5, [r0, #0]
    2d3e:	604d      	str	r5, [r1, #4]
    2d40:	b112      	cbz	r2, 2d48 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xfc>
    2d42:	e002      	b.n	2d4a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xfe>
    2d44:	2000      	movs	r0, #0
    2d46:	bd38      	pop	{r3, r4, r5, pc}
    2d48:	b662      	cpsie	i
    2d4a:	7a02      	ldrb	r2, [r0, #8]
    2d4c:	f88d 2000 	strb.w	r2, [sp]
    2d50:	9a00      	ldr	r2, [sp, #0]
    2d52:	9200      	str	r2, [sp, #0]
    2d54:	f89d 5000 	ldrb.w	r5, [sp]
    2d58:	b10d      	cbz	r5, 2d5e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x112>
    2d5a:	6108      	str	r0, [r1, #16]
    2d5c:	bd38      	pop	{r3, r4, r5, pc}
    2d5e:	701c      	strb	r4, [r3, #0]
    2d60:	bd38      	pop	{r3, r4, r5, pc}
    2d62:	0000      	.short	0x0000
    2d64:	20001334 	.word	0x20001334
    2d68:	b538      	push	{r3, r4, r5, lr}
    2d6a:	b1d0      	cbz	r0, 2da2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x156>
    2d6c:	6041      	str	r1, [r0, #4]
    2d6e:	f100 0108 	add.w	r1, r0, #8
    2d72:	700a      	strb	r2, [r1, #0]
    2d74:	f3ef 8310 	mrs	r3, PRIMASK
    2d78:	b672      	cpsid	i
    2d7a:	4c10      	ldr	r4, [pc, #64]	; (2dbc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x170>)
    2d7c:	6004      	str	r4, [r0, #0]
    2d7e:	1f21      	subs	r1, r4, #4
    2d80:	684a      	ldr	r2, [r1, #4]
    2d82:	b14a      	cbz	r2, 2d98 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14c>
    2d84:	7a12      	ldrb	r2, [r2, #8]
    2d86:	f88d 2000 	strb.w	r2, [sp]
    2d8a:	9a00      	ldr	r2, [sp, #0]
    2d8c:	9200      	str	r2, [sp, #0]
    2d8e:	f89d 5000 	ldrb.w	r5, [sp]
    2d92:	2d01      	cmp	r5, #1
    2d94:	d100      	bne.n	2d98 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14c>
    2d96:	600c      	str	r4, [r1, #0]
    2d98:	680a      	ldr	r2, [r1, #0]
    2d9a:	6010      	str	r0, [r2, #0]
    2d9c:	6008      	str	r0, [r1, #0]
    2d9e:	b12b      	cbz	r3, 2dac <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x160>
    2da0:	e005      	b.n	2dae <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x162>
    2da2:	f240 2175 	movw	r1, #629	; 0x275
    2da6:	2010      	movs	r0, #16
    2da8:	f7fd fe02 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2dac:	b662      	cpsie	i
    2dae:	4804      	ldr	r0, [pc, #16]	; (2dc0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x174>)
    2db0:	7800      	ldrb	r0, [r0, #0]
    2db2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2db6:	f009 bc31 	b.w	c61c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2dba:	0000      	.short	0x0000
    2dbc:	20001338 	.word	0x20001338
    2dc0:	20000376 	.word	0x20000376
    2dc4:	b510      	push	{r4, lr}
    2dc6:	2214      	movs	r2, #20
    2dc8:	2100      	movs	r1, #0
    2dca:	4808      	ldr	r0, [pc, #32]	; (2dec <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a0>)
    2dcc:	f00e f8d5 	bl	10f7a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2dd0:	4806      	ldr	r0, [pc, #24]	; (2dec <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a0>)
    2dd2:	2212      	movs	r2, #18
    2dd4:	2100      	movs	r1, #0
    2dd6:	3814      	subs	r0, #20
    2dd8:	f00e f8cf 	bl	10f7a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2ddc:	4803      	ldr	r0, [pc, #12]	; (2dec <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a0>)
    2dde:	2101      	movs	r1, #1
    2de0:	7301      	strb	r1, [r0, #12]
    2de2:	1d01      	adds	r1, r0, #4
    2de4:	6041      	str	r1, [r0, #4]
    2de6:	6001      	str	r1, [r0, #0]
    2de8:	bd10      	pop	{r4, pc}
    2dea:	0000      	.short	0x0000
    2dec:	20001334 	.word	0x20001334

00002df0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    2df0:	b4f0      	push	{r4, r5, r6, r7}
    2df2:	8150      	strh	r0, [r2, #10]
    2df4:	890c      	ldrh	r4, [r1, #8]
    2df6:	8194      	strh	r4, [r2, #12]
    2df8:	898b      	ldrh	r3, [r1, #12]
    2dfa:	81d3      	strh	r3, [r2, #14]
    2dfc:	8948      	ldrh	r0, [r1, #10]
    2dfe:	8210      	strh	r0, [r2, #16]
    2e00:	89cd      	ldrh	r5, [r1, #14]
    2e02:	8255      	strh	r5, [r2, #18]
    2e04:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    2e06:	42ae      	cmp	r6, r5
    2e08:	d108      	bne.n	2e1c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    2e0a:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    2e0c:	4285      	cmp	r5, r0
    2e0e:	d105      	bne.n	2e1c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    2e10:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    2e12:	429d      	cmp	r5, r3
    2e14:	d102      	bne.n	2e1c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    2e16:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    2e18:	42a3      	cmp	r3, r4
    2e1a:	d001      	beq.n	2e20 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    2e1c:	2301      	movs	r3, #1
    2e1e:	e000      	b.n	2e22 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    2e20:	2300      	movs	r3, #0
    2e22:	7513      	strb	r3, [r2, #20]
    2e24:	8548      	strh	r0, [r1, #42]	; 0x2a
    2e26:	8a50      	ldrh	r0, [r2, #18]
    2e28:	85c8      	strh	r0, [r1, #46]	; 0x2e
    2e2a:	8990      	ldrh	r0, [r2, #12]
    2e2c:	8588      	strh	r0, [r1, #44]	; 0x2c
    2e2e:	89d0      	ldrh	r0, [r2, #14]
    2e30:	8608      	strh	r0, [r1, #48]	; 0x30
    2e32:	bcf0      	pop	{r4, r5, r6, r7}
    2e34:	4901      	ldr	r1, [pc, #4]	; (2e3c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x4c>)
    2e36:	4610      	mov	r0, r2
    2e38:	f00b bada 	b.w	e3f0 <sym_43BYC3K4M44JBPOX4EUJM44GYCCY2C3C4SYEF6I>
    2e3c:	00002e61 	.word	0x00002e61

00002e40 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    2e40:	8150      	strh	r0, [r2, #10]
    2e42:	8a88      	ldrh	r0, [r1, #20]
    2e44:	8190      	strh	r0, [r2, #12]
    2e46:	8ac8      	ldrh	r0, [r1, #22]
    2e48:	81d0      	strh	r0, [r2, #14]
    2e4a:	8b08      	ldrh	r0, [r1, #24]
    2e4c:	8210      	strh	r0, [r2, #16]
    2e4e:	8b48      	ldrh	r0, [r1, #26]
    2e50:	8250      	strh	r0, [r2, #18]
    2e52:	4902      	ldr	r1, [pc, #8]	; (2e5c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x1c>)
    2e54:	4610      	mov	r0, r2
    2e56:	f00b bac8 	b.w	e3ea <sym_RH6FZQRBS4UKFN4MYJSECW7EJMU5464YS3XX4EQ>
    2e5a:	0000      	.short	0x0000
    2e5c:	00002ea1 	.word	0x00002ea1
    2e60:	b538      	push	{r3, r4, r5, lr}
    2e62:	f1a0 0418 	sub.w	r4, r0, #24
    2e66:	7d00      	ldrb	r0, [r0, #20]
    2e68:	460d      	mov	r5, r1
    2e6a:	f000 0001 	and.w	r0, r0, #1
    2e6e:	f7ff fd99 	bl	29a4 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>
    2e72:	2100      	movs	r1, #0
    2e74:	b108      	cbz	r0, 2e7a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3a>
    2e76:	9100      	str	r1, [sp, #0]
    2e78:	e00c      	b.n	2e94 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    2e7a:	7069      	strb	r1, [r5, #1]
    2e7c:	2013      	movs	r0, #19
    2e7e:	7028      	strb	r0, [r5, #0]
    2e80:	f854 0f22 	ldr.w	r0, [r4, #34]!
    2e84:	6068      	str	r0, [r5, #4]
    2e86:	6860      	ldr	r0, [r4, #4]
    2e88:	60a8      	str	r0, [r5, #8]
    2e8a:	68a0      	ldr	r0, [r4, #8]
    2e8c:	60e8      	str	r0, [r5, #12]
    2e8e:	4803      	ldr	r0, [pc, #12]	; (2e9c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5c>)
    2e90:	6840      	ldr	r0, [r0, #4]
    2e92:	9000      	str	r0, [sp, #0]
    2e94:	f8bd 0000 	ldrh.w	r0, [sp]
    2e98:	bd38      	pop	{r3, r4, r5, pc}
    2e9a:	0000      	.short	0x0000
    2e9c:	00002f28 	.word	0x00002f28
    2ea0:	b570      	push	{r4, r5, r6, lr}
    2ea2:	b086      	sub	sp, #24
    2ea4:	460e      	mov	r6, r1
    2ea6:	4604      	mov	r4, r0
    2ea8:	f7ff fd88 	bl	29bc <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    2eac:	2500      	movs	r5, #0
    2eae:	b358      	cbz	r0, 2f08 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xc8>
    2eb0:	f5a4 70bc 	sub.w	r0, r4, #376	; 0x178
    2eb4:	7225      	strb	r5, [r4, #8]
    2eb6:	8804      	ldrh	r4, [r0, #0]
    2eb8:	a903      	add	r1, sp, #12
    2eba:	4620      	mov	r0, r4
    2ebc:	f00d f836 	bl	ff2c <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    2ec0:	b108      	cbz	r0, 2ec6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x86>
    2ec2:	21fe      	movs	r1, #254	; 0xfe
    2ec4:	e017      	b.n	2ef6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    2ec6:	f8ad 4000 	strh.w	r4, [sp]
    2eca:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    2ece:	f8ad 0002 	strh.w	r0, [sp, #2]
    2ed2:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    2ed6:	f8ad 0004 	strh.w	r0, [sp, #4]
    2eda:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    2ede:	f8ad 0006 	strh.w	r0, [sp, #6]
    2ee2:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    2ee6:	f8ad 0008 	strh.w	r0, [sp, #8]
    2eea:	4668      	mov	r0, sp
    2eec:	f00d f85a 	bl	ffa4 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    2ef0:	b120      	cbz	r0, 2efc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xbc>
    2ef2:	f240 1107 	movw	r1, #263	; 0x107
    2ef6:	202c      	movs	r0, #44	; 0x2c
    2ef8:	f7fd fd5a 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2efc:	f8cd 5000 	str.w	r5, [sp]
    2f00:	f8bd 0000 	ldrh.w	r0, [sp]
    2f04:	b006      	add	sp, #24
    2f06:	bd70      	pop	{r4, r5, r6, pc}
    2f08:	201b      	movs	r0, #27
    2f0a:	7030      	strb	r0, [r6, #0]
    2f0c:	7075      	strb	r5, [r6, #1]
    2f0e:	f854 0f0a 	ldr.w	r0, [r4, #10]!
    2f12:	6070      	str	r0, [r6, #4]
    2f14:	6860      	ldr	r0, [r4, #4]
    2f16:	60b0      	str	r0, [r6, #8]
    2f18:	8920      	ldrh	r0, [r4, #8]
    2f1a:	81b0      	strh	r0, [r6, #12]
    2f1c:	4801      	ldr	r0, [pc, #4]	; (2f24 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xe4>)
    2f1e:	6800      	ldr	r0, [r0, #0]
    2f20:	9000      	str	r0, [sp, #0]
    2f22:	e7ed      	b.n	2f00 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xc0>
    2f24:	00002f28 	.word	0x00002f28
    2f28:	00000004 	.word	0x00000004
    2f2c:	00000004 	.word	0x00000004

00002f30 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    2f30:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f32:	f06f 021f 	mvn.w	r2, #31
    2f36:	0c01      	lsrs	r1, r0, #16
    2f38:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    2f3c:	251f      	movs	r5, #31
    2f3e:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    2f42:	3854      	subs	r0, #84	; 0x54
    2f44:	d00d      	beq.n	2f62 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2f46:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    2f4a:	3855      	subs	r0, #85	; 0x55
    2f4c:	d009      	beq.n	2f62 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2f4e:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    2f52:	38aa      	subs	r0, #170	; 0xaa
    2f54:	d005      	beq.n	2f62 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2f56:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    2f5a:	38aa      	subs	r0, #170	; 0xaa
    2f5c:	d001      	beq.n	2f62 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2f5e:	2001      	movs	r0, #1
    2f60:	e000      	b.n	2f64 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    2f62:	2000      	movs	r0, #0
    2f64:	2200      	movs	r2, #0
    2f66:	4613      	mov	r3, r2
    2f68:	ea4f 0402 	mov.w	r4, r2
    2f6c:	ea82 0701 	eor.w	r7, r2, r1
    2f70:	43ff      	mvns	r7, r7
    2f72:	431f      	orrs	r7, r3
    2f74:	1c7f      	adds	r7, r7, #1
    2f76:	d00f      	beq.n	2f98 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    2f78:	f006 0701 	and.w	r7, r6, #1
    2f7c:	0852      	lsrs	r2, r2, #1
    2f7e:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    2f82:	f005 0701 	and.w	r7, r5, #1
    2f86:	085b      	lsrs	r3, r3, #1
    2f88:	0876      	lsrs	r6, r6, #1
    2f8a:	086d      	lsrs	r5, r5, #1
    2f8c:	1c64      	adds	r4, r4, #1
    2f8e:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    2f92:	2c16      	cmp	r4, #22
    2f94:	d3ea      	bcc.n	2f6c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    2f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f98:	2000      	movs	r0, #0
    2f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002f9c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    2f9c:	b510      	push	{r4, lr}
    2f9e:	4804      	ldr	r0, [pc, #16]	; (2fb0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    2fa0:	f00b fb47 	bl	e632 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf4>
    2fa4:	4802      	ldr	r0, [pc, #8]	; (2fb0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    2fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2faa:	3008      	adds	r0, #8
    2fac:	f00b bb41 	b.w	e632 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf4>
    2fb0:	200000cc 	.word	0x200000cc

00002fb4 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>:
    2fb4:	4801      	ldr	r0, [pc, #4]	; (2fbc <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ+0x8>)
    2fb6:	f000 b809 	b.w	2fcc <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    2fba:	0000      	.short	0x0000
    2fbc:	200000cc 	.word	0x200000cc

00002fc0 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
    2fc0:	4801      	ldr	r0, [pc, #4]	; (2fc8 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x8>)
    2fc2:	f000 b803 	b.w	2fcc <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    2fc6:	0000      	.short	0x0000
    2fc8:	200000d4 	.word	0x200000d4
    2fcc:	b510      	push	{r4, lr}
    2fce:	e9d0 2100 	ldrd	r2, r1, [r0]
    2fd2:	4b09      	ldr	r3, [pc, #36]	; (2ff8 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x38>)
    2fd4:	4c09      	ldr	r4, [pc, #36]	; (2ffc <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x3c>)
    2fd6:	4353      	muls	r3, r2
    2fd8:	4354      	muls	r4, r2
    2fda:	4051      	eors	r1, r2
    2fdc:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    2fe0:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    2fe4:	ea4f 41f1 	mov.w	r1, r1, ror #19
    2fe8:	e9c0 2100 	strd	r2, r1, [r0]
    2fec:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    2ff0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2ff4:	4618      	mov	r0, r3
    2ff6:	bd10      	pop	{r4, pc}
    2ff8:	c6ef3760 	.word	0xc6ef3760
    2ffc:	9e3779bb 	.word	0x9e3779bb

00003000 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>:
    3000:	b570      	push	{r4, r5, r6, lr}
    3002:	6844      	ldr	r4, [r0, #4]
    3004:	1d09      	adds	r1, r1, #4
    3006:	2500      	movs	r5, #0
    3008:	f894 008c 	ldrb.w	r0, [r4, #140]	; 0x8c
    300c:	3480      	adds	r4, #128	; 0x80
    300e:	07c0      	lsls	r0, r0, #31
    3010:	d001      	beq.n	3016 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x16>
    3012:	2001      	movs	r0, #1
    3014:	bd70      	pop	{r4, r5, r6, pc}
    3016:	6848      	ldr	r0, [r1, #4]
    3018:	6809      	ldr	r1, [r1, #0]
    301a:	4b0c      	ldr	r3, [pc, #48]	; (304c <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x4c>)
    301c:	f641 0207 	movw	r2, #6151	; 0x1807
    3020:	4019      	ands	r1, r3
    3022:	66e1      	str	r1, [r4, #108]	; 0x6c
    3024:	4010      	ands	r0, r2
    3026:	6720      	str	r0, [r4, #112]	; 0x70
    3028:	211b      	movs	r1, #27
    302a:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    302e:	f00b fc26 	bl	e87e <sym_P3OAHUDLNMEJKO66PKADYJ5KBQTQCDBZBHL5ZUY+0x22>
    3032:	f8a4 5058 	strh.w	r5, [r4, #88]	; 0x58
    3036:	f894 005a 	ldrb.w	r0, [r4, #90]	; 0x5a
    303a:	1c40      	adds	r0, r0, #1
    303c:	f884 005a 	strb.w	r0, [r4, #90]	; 0x5a
    3040:	68e0      	ldr	r0, [r4, #12]
    3042:	f040 0001 	orr.w	r0, r0, #1
    3046:	60e0      	str	r0, [r4, #12]
    3048:	2000      	movs	r0, #0
    304a:	bd70      	pop	{r4, r5, r6, pc}
    304c:	f704492f 	.word	0xf704492f

00003050 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>:
    3050:	b510      	push	{r4, lr}
    3052:	1d04      	adds	r4, r0, #4
    3054:	f004 fa04 	bl	7460 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    3058:	4b03      	ldr	r3, [pc, #12]	; (3068 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY+0x18>)
    305a:	f641 0207 	movw	r2, #6151	; 0x1807
    305e:	4018      	ands	r0, r3
    3060:	4011      	ands	r1, r2
    3062:	6020      	str	r0, [r4, #0]
    3064:	6061      	str	r1, [r4, #4]
    3066:	bd10      	pop	{r4, pc}
    3068:	f704492f 	.word	0xf704492f

0000306c <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>:
    306c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3070:	7803      	ldrb	r3, [r0, #0]
    3072:	6840      	ldr	r0, [r0, #4]
    3074:	1d0f      	adds	r7, r1, #4
    3076:	f100 0580 	add.w	r5, r0, #128	; 0x80
    307a:	f500 74a5 	add.w	r4, r0, #330	; 0x14a
    307e:	4606      	mov	r6, r0
    3080:	f04f 0800 	mov.w	r8, #0
    3084:	7f6a      	ldrb	r2, [r5, #29]
    3086:	2107      	movs	r1, #7
    3088:	4628      	mov	r0, r5
    308a:	f00a fe0f 	bl	dcac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    308e:	b1e0      	cbz	r0, 30ca <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x5e>
    3090:	6839      	ldr	r1, [r7, #0]
    3092:	4b18      	ldr	r3, [pc, #96]	; (30f4 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x88>)
    3094:	6878      	ldr	r0, [r7, #4]
    3096:	4019      	ands	r1, r3
    3098:	f641 0207 	movw	r2, #6151	; 0x1807
    309c:	66e9      	str	r1, [r5, #108]	; 0x6c
    309e:	4010      	ands	r0, r2
    30a0:	6728      	str	r0, [r5, #112]	; 0x70
    30a2:	211b      	movs	r1, #27
    30a4:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    30a8:	f00b fbe9 	bl	e87e <sym_P3OAHUDLNMEJKO66PKADYJ5KBQTQCDBZBHL5ZUY+0x22>
    30ac:	f885 8056 	strb.w	r8, [r5, #86]	; 0x56
    30b0:	f885 801d 	strb.w	r8, [r5, #29]
    30b4:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
    30b8:	4640      	mov	r0, r8
    30ba:	f88d 1000 	strb.w	r1, [sp]
    30be:	9900      	ldr	r1, [sp, #0]
    30c0:	9100      	str	r1, [sp, #0]
    30c2:	f89d 1000 	ldrb.w	r1, [sp]
    30c6:	b991      	cbnz	r1, 30ee <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x82>
    30c8:	e002      	b.n	30d0 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x64>
    30ca:	2001      	movs	r0, #1
    30cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    30d0:	8831      	ldrh	r1, [r6, #0]
    30d2:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    30d6:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    30da:	6839      	ldr	r1, [r7, #0]
    30dc:	66e1      	str	r1, [r4, #108]	; 0x6c
    30de:	6879      	ldr	r1, [r7, #4]
    30e0:	6721      	str	r1, [r4, #112]	; 0x70
    30e2:	2202      	movs	r2, #2
    30e4:	4904      	ldr	r1, [pc, #16]	; (30f8 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x8c>)
    30e6:	f104 0060 	add.w	r0, r4, #96	; 0x60
    30ea:	f00b f987 	bl	e3fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    30ee:	2000      	movs	r0, #0
    30f0:	e7ec      	b.n	30cc <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x60>
    30f2:	0000      	.short	0x0000
    30f4:	f704492f 	.word	0xf704492f
    30f8:	0000e8eb 	.word	0x0000e8eb

000030fc <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>:
    30fc:	b570      	push	{r4, r5, r6, lr}
    30fe:	1d0d      	adds	r5, r1, #4
    3100:	6844      	ldr	r4, [r0, #4]
    3102:	f004 f9ad 	bl	7460 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    3106:	f641 0207 	movw	r2, #6151	; 0x1807
    310a:	4b05      	ldr	r3, [pc, #20]	; (3120 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ+0x24>)
    310c:	4011      	ands	r1, r2
    310e:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
    3112:	4018      	ands	r0, r3
    3114:	4002      	ands	r2, r0
    3116:	f362 0007 	bfi	r0, r2, #0, #8
    311a:	6028      	str	r0, [r5, #0]
    311c:	6069      	str	r1, [r5, #4]
    311e:	bd70      	pop	{r4, r5, r6, pc}
    3120:	f704492f 	.word	0xf704492f

00003124 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q>:
    3124:	6841      	ldr	r1, [r0, #4]
    3126:	b082      	sub	sp, #8
    3128:	f501 70a5 	add.w	r0, r1, #330	; 0x14a
    312c:	f891 21b2 	ldrb.w	r2, [r1, #434]	; 0x1b2
    3130:	f88d 2000 	strb.w	r2, [sp]
    3134:	9a00      	ldr	r2, [sp, #0]
    3136:	9200      	str	r2, [sp, #0]
    3138:	f89d 2000 	ldrb.w	r2, [sp]
    313c:	2a00      	cmp	r2, #0
    313e:	d10b      	bne.n	3158 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q+0x34>
    3140:	8809      	ldrh	r1, [r1, #0]
    3142:	f8a0 106a 	strh.w	r1, [r0, #106]	; 0x6a
    3146:	211a      	movs	r1, #26
    3148:	f880 1069 	strb.w	r1, [r0, #105]	; 0x69
    314c:	2202      	movs	r2, #2
    314e:	4903      	ldr	r1, [pc, #12]	; (315c <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q+0x38>)
    3150:	3060      	adds	r0, #96	; 0x60
    3152:	b002      	add	sp, #8
    3154:	f00b b952 	b.w	e3fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3158:	b002      	add	sp, #8
    315a:	4770      	bx	lr
    315c:	0000e8eb 	.word	0x0000e8eb

00003160 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>:
    3160:	b570      	push	{r4, r5, r6, lr}
    3162:	6844      	ldr	r4, [r0, #4]
    3164:	460d      	mov	r5, r1
    3166:	7803      	ldrb	r3, [r0, #0]
    3168:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    316c:	3480      	adds	r4, #128	; 0x80
    316e:	2600      	movs	r6, #0
    3170:	2108      	movs	r1, #8
    3172:	4620      	mov	r0, r4
    3174:	f00a fd9a 	bl	dcac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    3178:	b920      	cbnz	r0, 3184 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x24>
    317a:	7b20      	ldrb	r0, [r4, #12]
    317c:	0780      	lsls	r0, r0, #30
    317e:	d501      	bpl.n	3184 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x24>
    3180:	2001      	movs	r0, #1
    3182:	bd70      	pop	{r4, r5, r6, pc}
    3184:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    3188:	0780      	lsls	r0, r0, #30
    318a:	d419      	bmi.n	31c0 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x60>
    318c:	4628      	mov	r0, r5
    318e:	f00b f8c8 	bl	e322 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>
    3192:	f884 0067 	strb.w	r0, [r4, #103]	; 0x67
    3196:	f835 0f05 	ldrh.w	r0, [r5, #5]!
    319a:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    319e:	8868      	ldrh	r0, [r5, #2]
    31a0:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
    31a4:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    31a8:	f040 0002 	orr.w	r0, r0, #2
    31ac:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
    31b0:	07c0      	lsls	r0, r0, #31
    31b2:	d009      	beq.n	31c8 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x68>
    31b4:	2202      	movs	r2, #2
    31b6:	4911      	ldr	r1, [pc, #68]	; (31fc <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x9c>)
    31b8:	f104 005e 	add.w	r0, r4, #94	; 0x5e
    31bc:	f00b f932 	bl	e424 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    31c0:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    31c4:	07c0      	lsls	r0, r0, #31
    31c6:	d110      	bne.n	31ea <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x8a>
    31c8:	68e0      	ldr	r0, [r4, #12]
    31ca:	0781      	lsls	r1, r0, #30
    31cc:	d503      	bpl.n	31d6 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x76>
    31ce:	214f      	movs	r1, #79	; 0x4f
    31d0:	2040      	movs	r0, #64	; 0x40
    31d2:	f7fd fbed 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    31d6:	f040 0002 	orr.w	r0, r0, #2
    31da:	60e0      	str	r0, [r4, #12]
    31dc:	f894 005a 	ldrb.w	r0, [r4, #90]	; 0x5a
    31e0:	1c40      	adds	r0, r0, #1
    31e2:	f884 005a 	strb.w	r0, [r4, #90]	; 0x5a
    31e6:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    31ea:	7f60      	ldrb	r0, [r4, #29]
    31ec:	2801      	cmp	r0, #1
    31ee:	d102      	bne.n	31f6 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x96>
    31f0:	7766      	strb	r6, [r4, #29]
    31f2:	f884 6056 	strb.w	r6, [r4, #86]	; 0x56
    31f6:	2000      	movs	r0, #0
    31f8:	bd70      	pop	{r4, r5, r6, pc}
    31fa:	0000      	.short	0x0000
    31fc:	0000e999 	.word	0x0000e999

00003200 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>:
    3200:	4a04      	ldr	r2, [pc, #16]	; (3214 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ+0x14>)
    3202:	6892      	ldr	r2, [r2, #8]
    3204:	f5c2 5380 	rsb	r3, r2, #4096	; 0x1000
    3208:	434b      	muls	r3, r1
    320a:	4342      	muls	r2, r0
    320c:	eb03 3022 	add.w	r0, r3, r2, asr #12
    3210:	4770      	bx	lr
    3212:	0000      	.short	0x0000
    3214:	200000dc 	.word	0x200000dc

00003218 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>:
    3218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    321a:	6844      	ldr	r4, [r0, #4]
    321c:	4606      	mov	r6, r0
    321e:	f104 0580 	add.w	r5, r4, #128	; 0x80
    3222:	f000 f87b 	bl	331c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x104>
    3226:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    322a:	2901      	cmp	r1, #1
    322c:	d11a      	bne.n	3264 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    322e:	2800      	cmp	r0, #0
    3230:	d018      	beq.n	3264 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    3232:	6870      	ldr	r0, [r6, #4]
    3234:	f890 1152 	ldrb.w	r1, [r0, #338]	; 0x152
    3238:	f88d 1000 	strb.w	r1, [sp]
    323c:	9900      	ldr	r1, [sp, #0]
    323e:	9100      	str	r1, [sp, #0]
    3240:	f89d 1000 	ldrb.w	r1, [sp]
    3244:	f500 70a5 	add.w	r0, r0, #330	; 0x14a
    3248:	2900      	cmp	r1, #0
    324a:	d10b      	bne.n	3264 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    324c:	8821      	ldrh	r1, [r4, #0]
    324e:	8141      	strh	r1, [r0, #10]
    3250:	7e69      	ldrb	r1, [r5, #25]
    3252:	7301      	strb	r1, [r0, #12]
    3254:	7ea9      	ldrb	r1, [r5, #26]
    3256:	7341      	strb	r1, [r0, #13]
    3258:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    325c:	2202      	movs	r2, #2
    325e:	4902      	ldr	r1, [pc, #8]	; (3268 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x50>)
    3260:	f00b b8cc 	b.w	e3fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3266:	0000      	.short	0x0000
    3268:	0000ea21 	.word	0x0000ea21
    326c:	f500 6100 	add.w	r1, r0, #2048	; 0x800
    3270:	4a0d      	ldr	r2, [pc, #52]	; (32a8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x90>)
    3272:	b510      	push	{r4, lr}
    3274:	f500 6000 	add.w	r0, r0, #2048	; 0x800
    3278:	1309      	asrs	r1, r1, #12
    327a:	1300      	asrs	r0, r0, #12
    327c:	b24b      	sxtb	r3, r1
    327e:	f992 4000 	ldrsb.w	r4, [r2]
    3282:	4240      	negs	r0, r0
    3284:	2100      	movs	r1, #0
    3286:	b240      	sxtb	r0, r0
    3288:	42a3      	cmp	r3, r4
    328a:	da02      	bge.n	3292 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x7a>
    328c:	f992 1002 	ldrsb.w	r1, [r2, #2]
    3290:	e005      	b.n	329e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x86>
    3292:	f992 4001 	ldrsb.w	r4, [r2, #1]
    3296:	42a3      	cmp	r3, r4
    3298:	dd04      	ble.n	32a4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x8c>
    329a:	f992 1003 	ldrsb.w	r1, [r2, #3]
    329e:	4408      	add	r0, r1
    32a0:	f300 0107 	ssat	r1, #8, r0
    32a4:	4608      	mov	r0, r1
    32a6:	bd10      	pop	{r4, pc}
    32a8:	200000dc 	.word	0x200000dc
    32ac:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    32b0:	f5a0 75fa 	sub.w	r5, r0, #500	; 0x1f4
    32b4:	f5a0 74ba 	sub.w	r4, r0, #372	; 0x174
    32b8:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    32bc:	f00c fa68 	bl	f790 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>
    32c0:	4606      	mov	r6, r0
    32c2:	68a0      	ldr	r0, [r4, #8]
    32c4:	f7ff ffd2 	bl	326c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
    32c8:	0007      	movs	r7, r0
    32ca:	d021      	beq.n	3310 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xf8>
    32cc:	4620      	mov	r0, r4
    32ce:	f00b fbaf 	bl	ea30 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x70>
    32d2:	2800      	cmp	r0, #0
    32d4:	d01c      	beq.n	3310 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xf8>
    32d6:	8828      	ldrh	r0, [r5, #0]
    32d8:	4669      	mov	r1, sp
    32da:	f00a fcd0 	bl	dc7e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    32de:	b118      	cbz	r0, 32e8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xd0>
    32e0:	2185      	movs	r1, #133	; 0x85
    32e2:	207a      	movs	r0, #122	; 0x7a
    32e4:	f7fd fb64 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    32e8:	1c76      	adds	r6, r6, #1
    32ea:	b2f1      	uxtb	r1, r6
    32ec:	2302      	movs	r3, #2
    32ee:	463a      	mov	r2, r7
    32f0:	4668      	mov	r0, sp
    32f2:	f00c fa6c 	bl	f7ce <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>
    32f6:	2800      	cmp	r0, #0
    32f8:	d10a      	bne.n	3310 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xf8>
    32fa:	4806      	ldr	r0, [pc, #24]	; (3314 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfc>)
    32fc:	4906      	ldr	r1, [pc, #24]	; (3318 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x100>)
    32fe:	7900      	ldrb	r0, [r0, #4]
    3300:	fba0 6501 	umull	r6, r5, r0, r1
    3304:	f00d fc2d 	bl	10b62 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    3308:	1980      	adds	r0, r0, r6
    330a:	4169      	adcs	r1, r5
    330c:	e9c4 0100 	strd	r0, r1, [r4]
    3310:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    3314:	200000dc 	.word	0x200000dc
    3318:	000f4240 	.word	0x000f4240
    331c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3320:	4607      	mov	r7, r0
    3322:	f7ff fa91 	bl	2848 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    3326:	687c      	ldr	r4, [r7, #4]
    3328:	4605      	mov	r5, r0
    332a:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
    332e:	3480      	adds	r4, #128	; 0x80
    3330:	287f      	cmp	r0, #127	; 0x7f
    3332:	d042      	beq.n	33ba <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1a2>
    3334:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    3338:	687e      	ldr	r6, [r7, #4]
    333a:	76a0      	strb	r0, [r4, #26]
    333c:	4629      	mov	r1, r5
    333e:	68a0      	ldr	r0, [r4, #8]
    3340:	f7ff ff5e 	bl	3200 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>
    3344:	60a0      	str	r0, [r4, #8]
    3346:	481e      	ldr	r0, [pc, #120]	; (33c0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1a8>)
    3348:	7940      	ldrb	r0, [r0, #5]
    334a:	b1c0      	cbz	r0, 337e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x166>
    334c:	6878      	ldr	r0, [r7, #4]
    334e:	f100 0880 	add.w	r8, r0, #128	; 0x80
    3352:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
    3356:	f7ff ff89 	bl	326c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
    335a:	b180      	cbz	r0, 337e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x166>
    335c:	4640      	mov	r0, r8
    335e:	f00b fb67 	bl	ea30 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x70>
    3362:	b160      	cbz	r0, 337e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x166>
    3364:	6878      	ldr	r0, [r7, #4]
    3366:	f500 78a5 	add.w	r8, r0, #330	; 0x14a
    336a:	4607      	mov	r7, r0
    336c:	f004 fca2 	bl	7cb4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    3370:	f887 006b 	strb.w	r0, [r7, #107]	; 0x6b
    3374:	4913      	ldr	r1, [pc, #76]	; (33c4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1ac>)
    3376:	f108 00aa 	add.w	r0, r8, #170	; 0xaa
    337a:	f00b f83c 	bl	e3f6 <sym_OHZGE3PRU72NL3TJSLCEUVROHETUDPWEUAQ7GMA>
    337e:	f994 001b 	ldrsb.w	r0, [r4, #27]
    3382:	2100      	movs	r1, #0
    3384:	1a28      	subs	r0, r5, r0
    3386:	d500      	bpl.n	338a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x172>
    3388:	4240      	negs	r0, r0
    338a:	f896 2029 	ldrb.w	r2, [r6, #41]	; 0x29
    338e:	4282      	cmp	r2, r0
    3390:	dc10      	bgt.n	33b4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19c>
    3392:	2aff      	cmp	r2, #255	; 0xff
    3394:	d00e      	beq.n	33b4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19c>
    3396:	7f20      	ldrb	r0, [r4, #28]
    3398:	1c40      	adds	r0, r0, #1
    339a:	b2c0      	uxtb	r0, r0
    339c:	7720      	strb	r0, [r4, #28]
    339e:	f896 202a 	ldrb.w	r2, [r6, #42]	; 0x2a
    33a2:	4290      	cmp	r0, r2
    33a4:	d802      	bhi.n	33ac <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x194>
    33a6:	7ee0      	ldrb	r0, [r4, #27]
    33a8:	287f      	cmp	r0, #127	; 0x7f
    33aa:	d103      	bne.n	33b4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19c>
    33ac:	2000      	movs	r0, #0
    33ae:	76e5      	strb	r5, [r4, #27]
    33b0:	7720      	strb	r0, [r4, #28]
    33b2:	2101      	movs	r1, #1
    33b4:	4608      	mov	r0, r1
    33b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    33ba:	2000      	movs	r0, #0
    33bc:	e7fb      	b.n	33b6 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19e>
    33be:	0000      	.short	0x0000
    33c0:	200000dc 	.word	0x200000dc
    33c4:	000032ad 	.word	0x000032ad

000033c8 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI>:
    33c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    33ca:	f00b fb4d 	bl	ea68 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    33ce:	4604      	mov	r4, r0
    33d0:	460d      	mov	r5, r1
    33d2:	466a      	mov	r2, sp
    33d4:	f000 f862 	bl	349c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    33d8:	b108      	cbz	r0, 33de <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x16>
    33da:	2001      	movs	r0, #1
    33dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    33de:	480f      	ldr	r0, [pc, #60]	; (341c <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x54>)
    33e0:	7803      	ldrb	r3, [r0, #0]
    33e2:	7841      	ldrb	r1, [r0, #1]
    33e4:	428b      	cmp	r3, r1
    33e6:	d101      	bne.n	33ec <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x24>
    33e8:	2000      	movs	r0, #0
    33ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    33ec:	461a      	mov	r2, r3
    33ee:	6841      	ldr	r1, [r0, #4]
    33f0:	e008      	b.n	3404 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x3c>
    33f2:	bf00      	nop
    33f4:	eb01 06c2 	add.w	r6, r1, r2, lsl #3
    33f8:	1e52      	subs	r2, r2, #1
    33fa:	e956 7c02 	ldrd	r7, ip, [r6, #-8]
    33fe:	e9c6 7c00 	strd	r7, ip, [r6]
    3402:	b2d2      	uxtb	r2, r2
    3404:	f89d 6000 	ldrb.w	r6, [sp]
    3408:	42b2      	cmp	r2, r6
    340a:	d8f3      	bhi.n	33f4 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x2c>
    340c:	b2f2      	uxtb	r2, r6
    340e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    3412:	1c5b      	adds	r3, r3, #1
    3414:	e9c1 4500 	strd	r4, r5, [r1]
    3418:	7003      	strb	r3, [r0, #0]
    341a:	e7de      	b.n	33da <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x12>
    341c:	200000e8 	.word	0x200000e8

00003420 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY>:
    3420:	b510      	push	{r4, lr}
    3422:	0742      	lsls	r2, r0, #29
    3424:	d003      	beq.n	342e <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0xe>
    3426:	2163      	movs	r1, #99	; 0x63
    3428:	2048      	movs	r0, #72	; 0x48
    342a:	f7fd fac1 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    342e:	b120      	cbz	r0, 343a <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0x1a>
    3430:	4a03      	ldr	r2, [pc, #12]	; (3440 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0x20>)
    3432:	7051      	strb	r1, [r2, #1]
    3434:	6050      	str	r0, [r2, #4]
    3436:	2000      	movs	r0, #0
    3438:	7010      	strb	r0, [r2, #0]
    343a:	00c8      	lsls	r0, r1, #3
    343c:	bd10      	pop	{r4, pc}
    343e:	0000      	.short	0x0000
    3440:	200000e8 	.word	0x200000e8

00003444 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ>:
    3444:	b538      	push	{r3, r4, r5, lr}
    3446:	f00b fb0f 	bl	ea68 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    344a:	466a      	mov	r2, sp
    344c:	f000 f826 	bl	349c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    3450:	2800      	cmp	r0, #0
    3452:	d014      	beq.n	347e <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x3a>
    3454:	4a0a      	ldr	r2, [pc, #40]	; (3480 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x3c>)
    3456:	7810      	ldrb	r0, [r2, #0]
    3458:	1e40      	subs	r0, r0, #1
    345a:	b2c1      	uxtb	r1, r0
    345c:	7011      	strb	r1, [r2, #0]
    345e:	f89d 0000 	ldrb.w	r0, [sp]
    3462:	6852      	ldr	r2, [r2, #4]
    3464:	e008      	b.n	3478 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x34>
    3466:	bf00      	nop
    3468:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
    346c:	1c40      	adds	r0, r0, #1
    346e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
    3472:	e9c3 4500 	strd	r4, r5, [r3]
    3476:	b2c0      	uxtb	r0, r0
    3478:	4288      	cmp	r0, r1
    347a:	d3f5      	bcc.n	3468 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x24>
    347c:	2001      	movs	r0, #1
    347e:	bd38      	pop	{r3, r4, r5, pc}
    3480:	200000e8 	.word	0x200000e8

00003484 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>:
    3484:	4901      	ldr	r1, [pc, #4]	; (348c <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ+0x8>)
    3486:	2000      	movs	r0, #0
    3488:	7008      	strb	r0, [r1, #0]
    348a:	4770      	bx	lr
    348c:	200000e8 	.word	0x200000e8

00003490 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ>:
    3490:	4801      	ldr	r0, [pc, #4]	; (3498 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8>)
    3492:	7840      	ldrb	r0, [r0, #1]
    3494:	4770      	bx	lr
    3496:	0000      	.short	0x0000
    3498:	200000e8 	.word	0x200000e8
    349c:	b5f0      	push	{r4, r5, r6, r7, lr}
    349e:	4d20      	ldr	r5, [pc, #128]	; (3520 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x90>)
    34a0:	2300      	movs	r3, #0
    34a2:	7013      	strb	r3, [r2, #0]
    34a4:	782b      	ldrb	r3, [r5, #0]
    34a6:	b323      	cbz	r3, 34f2 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x62>
    34a8:	2400      	movs	r4, #0
    34aa:	1e5b      	subs	r3, r3, #1
    34ac:	b2db      	uxtb	r3, r3
    34ae:	f8d5 c004 	ldr.w	ip, [r5, #4]
    34b2:	e00b      	b.n	34cc <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3c>
    34b4:	18e5      	adds	r5, r4, r3
    34b6:	086d      	lsrs	r5, r5, #1
    34b8:	eb0c 06c5 	add.w	r6, ip, r5, lsl #3
    34bc:	e9d6 7600 	ldrd	r7, r6, [r6]
    34c0:	1a3f      	subs	r7, r7, r0
    34c2:	418e      	sbcs	r6, r1
    34c4:	d201      	bcs.n	34ca <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3a>
    34c6:	462c      	mov	r4, r5
    34c8:	e000      	b.n	34cc <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3c>
    34ca:	462b      	mov	r3, r5
    34cc:	1b1d      	subs	r5, r3, r4
    34ce:	2d01      	cmp	r5, #1
    34d0:	dcf0      	bgt.n	34b4 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x24>
    34d2:	eb0c 06c4 	add.w	r6, ip, r4, lsl #3
    34d6:	e9d6 5600 	ldrd	r5, r6, [r6]
    34da:	ea80 0705 	eor.w	r7, r0, r5
    34de:	ea81 0e06 	eor.w	lr, r1, r6
    34e2:	ea57 070e 	orrs.w	r7, r7, lr
    34e6:	d005      	beq.n	34f4 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x64>
    34e8:	1b45      	subs	r5, r0, r5
    34ea:	eb71 0506 	sbcs.w	r5, r1, r6
    34ee:	d203      	bcs.n	34f8 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x68>
    34f0:	7014      	strb	r4, [r2, #0]
    34f2:	e010      	b.n	3516 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x86>
    34f4:	7014      	strb	r4, [r2, #0]
    34f6:	e011      	b.n	351c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8c>
    34f8:	eb0c 05c3 	add.w	r5, ip, r3, lsl #3
    34fc:	e9d5 4500 	ldrd	r4, r5, [r5]
    3500:	ea80 0604 	eor.w	r6, r0, r4
    3504:	ea81 0705 	eor.w	r7, r1, r5
    3508:	433e      	orrs	r6, r7
    350a:	d006      	beq.n	351a <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8a>
    350c:	1b00      	subs	r0, r0, r4
    350e:	41a9      	sbcs	r1, r5
    3510:	d300      	bcc.n	3514 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x84>
    3512:	1c5b      	adds	r3, r3, #1
    3514:	7013      	strb	r3, [r2, #0]
    3516:	2000      	movs	r0, #0
    3518:	bdf0      	pop	{r4, r5, r6, r7, pc}
    351a:	7013      	strb	r3, [r2, #0]
    351c:	2001      	movs	r0, #1
    351e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3520:	200000e8 	.word	0x200000e8

00003524 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    3524:	b570      	push	{r4, r5, r6, lr}
    3526:	4604      	mov	r4, r0
    3528:	7c00      	ldrb	r0, [r0, #16]
    352a:	b300      	cbz	r0, 356e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    352c:	2802      	cmp	r0, #2
    352e:	d01e      	beq.n	356e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    3530:	f05f 0001 	movs.w	r0, #1
    3534:	f104 0151 	add.w	r1, r4, #81	; 0x51
    3538:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    353c:	460d      	mov	r5, r1
    353e:	b1c0      	cbz	r0, 3572 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    3540:	7de0      	ldrb	r0, [r4, #23]
    3542:	b1f0      	cbz	r0, 3582 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    3544:	f8d4 0011 	ldr.w	r0, [r4, #17]
    3548:	f8c4 0051 	str.w	r0, [r4, #81]	; 0x51
    354c:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    3550:	f8a4 0055 	strh.w	r0, [r4, #85]	; 0x55
    3554:	7c20      	ldrb	r0, [r4, #16]
    3556:	f00b fab7 	bl	eac8 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6e>
    355a:	7620      	strb	r0, [r4, #24]
    355c:	2008      	movs	r0, #8
    355e:	7660      	strb	r0, [r4, #25]
    3560:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    3564:	4629      	mov	r1, r5
    3566:	f00b fa9b 	bl	eaa0 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x46>
    356a:	b9a8      	cbnz	r0, 3598 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    356c:	e00e      	b.n	358c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    356e:	2000      	movs	r0, #0
    3570:	e7e0      	b.n	3534 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    3572:	2000      	movs	r0, #0
    3574:	f7fe f980 	bl	1878 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    3578:	2800      	cmp	r0, #0
    357a:	d1eb      	bne.n	3554 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    357c:	f240 41ba 	movw	r1, #1210	; 0x4ba
    3580:	e001      	b.n	3586 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    3582:	f240 41be 	movw	r1, #1214	; 0x4be
    3586:	202d      	movs	r0, #45	; 0x2d
    3588:	f7fd fa12 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    358c:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    3590:	4629      	mov	r1, r5
    3592:	f00b fa8e 	bl	eab2 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    3596:	b100      	cbz	r0, 359a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    3598:	2001      	movs	r0, #1
    359a:	76a0      	strb	r0, [r4, #26]
    359c:	7e20      	ldrb	r0, [r4, #24]
    359e:	b130      	cbz	r0, 35ae <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8a>
    35a0:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    35a4:	f104 0158 	add.w	r1, r4, #88	; 0x58
    35a8:	f00a fb32 	bl	dc10 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    35ac:	7660      	strb	r0, [r4, #25]
    35ae:	f7fe ffb5 	bl	251c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    35b2:	490c      	ldr	r1, [pc, #48]	; (35e4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xc0>)
    35b4:	fba0 2301 	umull	r2, r3, r0, r1
    35b8:	f104 0048 	add.w	r0, r4, #72	; 0x48
    35bc:	f00b fbf6 	bl	edac <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x12e>
    35c0:	2100      	movs	r1, #0
    35c2:	4620      	mov	r0, r4
    35c4:	f00b fbab 	bl	ed1e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa0>
    35c8:	2000      	movs	r0, #0
    35ca:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    35ce:	78a0      	ldrb	r0, [r4, #2]
    35d0:	0740      	lsls	r0, r0, #29
    35d2:	d505      	bpl.n	35e0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbc>
    35d4:	4620      	mov	r0, r4
    35d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    35da:	2100      	movs	r1, #0
    35dc:	f000 bdf0 	b.w	41c0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1c0>
    35e0:	bd70      	pop	{r4, r5, r6, pc}
    35e2:	0000      	.short	0x0000
    35e4:	000f4240 	.word	0x000f4240

000035e8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    35e8:	b530      	push	{r4, r5, lr}
    35ea:	460c      	mov	r4, r1
    35ec:	b08d      	sub	sp, #52	; 0x34
    35ee:	4605      	mov	r5, r0
    35f0:	4601      	mov	r1, r0
    35f2:	2224      	movs	r2, #36	; 0x24
    35f4:	a802      	add	r0, sp, #8
    35f6:	f00d fc46 	bl	10e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    35fa:	a80b      	add	r0, sp, #44	; 0x2c
    35fc:	f00b fc33 	bl	ee66 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    3600:	7aa0      	ldrb	r0, [r4, #10]
    3602:	f88d 0018 	strb.w	r0, [sp, #24]
    3606:	7820      	ldrb	r0, [r4, #0]
    3608:	f88d 0008 	strb.w	r0, [sp, #8]
    360c:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    3610:	f8ad 0000 	strh.w	r0, [sp]
    3614:	f89d 0000 	ldrb.w	r0, [sp]
    3618:	f000 0101 	and.w	r1, r0, #1
    361c:	f3c0 0240 	ubfx	r2, r0, #1, #1
    3620:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    3624:	f3c0 0280 	ubfx	r2, r0, #2, #1
    3628:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    362c:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    3630:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    3634:	f3c0 1200 	ubfx	r2, r0, #4, #1
    3638:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    363c:	f3c0 1240 	ubfx	r2, r0, #5, #1
    3640:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    3644:	f3c0 1080 	ubfx	r0, r0, #6, #1
    3648:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    364c:	f8ad 000a 	strh.w	r0, [sp, #10]
    3650:	7d20      	ldrb	r0, [r4, #20]
    3652:	2801      	cmp	r0, #1
    3654:	d006      	beq.n	3664 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    3656:	2802      	cmp	r0, #2
    3658:	d004      	beq.n	3664 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    365a:	f240 21e9 	movw	r1, #745	; 0x2e9
    365e:	2006      	movs	r0, #6
    3660:	f7fd f9a6 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3664:	f88d 000c 	strb.w	r0, [sp, #12]
    3668:	7a61      	ldrb	r1, [r4, #9]
    366a:	a80b      	add	r0, sp, #44	; 0x2c
    366c:	f00b fbe2 	bl	ee34 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    3670:	7d20      	ldrb	r0, [r4, #20]
    3672:	2101      	movs	r1, #1
    3674:	2802      	cmp	r0, #2
    3676:	d102      	bne.n	367e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    3678:	7d60      	ldrb	r0, [r4, #21]
    367a:	1c40      	adds	r0, r0, #1
    367c:	b2c1      	uxtb	r1, r0
    367e:	7ea0      	ldrb	r0, [r4, #26]
    3680:	1c40      	adds	r0, r0, #1
    3682:	b2c2      	uxtb	r2, r0
    3684:	a80b      	add	r0, sp, #44	; 0x2c
    3686:	f00b fb9c 	bl	edc2 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    368a:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    368e:	0700      	lsls	r0, r0, #28
    3690:	d501      	bpl.n	3696 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    3692:	2000      	movs	r0, #0
    3694:	e020      	b.n	36d8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    3696:	a80b      	add	r0, sp, #44	; 0x2c
    3698:	f00b fba5 	bl	ede6 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    369c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    36a0:	2228      	movs	r2, #40	; 0x28
    36a2:	f000 fe31 	bl	4308 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    36a6:	f240 2171 	movw	r1, #625	; 0x271
    36aa:	f200 20db 	addw	r0, r0, #731	; 0x2db
    36ae:	fbb0 f0f1 	udiv	r0, r0, r1
    36b2:	4348      	muls	r0, r1
    36b4:	f8d4 1002 	ldr.w	r1, [r4, #2]
    36b8:	f240 2371 	movw	r3, #625	; 0x271
    36bc:	0a0a      	lsrs	r2, r1, #8
    36be:	f240 2171 	movw	r1, #625	; 0x271
    36c2:	434a      	muls	r2, r1
    36c4:	f8d4 1005 	ldr.w	r1, [r4, #5]
    36c8:	0a09      	lsrs	r1, r1, #8
    36ca:	4359      	muls	r1, r3
    36cc:	4290      	cmp	r0, r2
    36ce:	d801      	bhi.n	36d4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    36d0:	9204      	str	r2, [sp, #16]
    36d2:	e004      	b.n	36de <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    36d4:	4288      	cmp	r0, r1
    36d6:	d801      	bhi.n	36dc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    36d8:	9004      	str	r0, [sp, #16]
    36da:	e000      	b.n	36de <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    36dc:	9104      	str	r1, [sp, #16]
    36de:	7ca0      	ldrb	r0, [r4, #18]
    36e0:	f88d 0017 	strb.w	r0, [sp, #23]
    36e4:	7e20      	ldrb	r0, [r4, #24]
    36e6:	2801      	cmp	r0, #1
    36e8:	d000      	beq.n	36ec <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    36ea:	2000      	movs	r0, #0
    36ec:	f88d 0014 	strb.w	r0, [sp, #20]
    36f0:	6b68      	ldr	r0, [r5, #52]	; 0x34
    36f2:	f00a f8f5 	bl	d8e0 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    36f6:	6b68      	ldr	r0, [r5, #52]	; 0x34
    36f8:	f00a f99a 	bl	da30 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    36fc:	2224      	movs	r2, #36	; 0x24
    36fe:	a902      	add	r1, sp, #8
    3700:	4628      	mov	r0, r5
    3702:	f00d fbc0 	bl	10e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3706:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3708:	62a8      	str	r0, [r5, #40]	; 0x28
    370a:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
    370e:	85a8      	strh	r0, [r5, #44]	; 0x2c
    3710:	7ae0      	ldrb	r0, [r4, #11]
    3712:	b168      	cbz	r0, 3730 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    3714:	2802      	cmp	r0, #2
    3716:	d00b      	beq.n	3730 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    3718:	f05f 0001 	movs.w	r0, #1
    371c:	f885 0057 	strb.w	r0, [r5, #87]	; 0x57
    3720:	68e0      	ldr	r0, [r4, #12]
    3722:	65a8      	str	r0, [r5, #88]	; 0x58
    3724:	8a20      	ldrh	r0, [r4, #16]
    3726:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    372a:	b00d      	add	sp, #52	; 0x34
    372c:	2000      	movs	r0, #0
    372e:	bd30      	pop	{r4, r5, pc}
    3730:	2000      	movs	r0, #0
    3732:	e7f3      	b.n	371c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

00003734 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    3734:	4a0a      	ldr	r2, [pc, #40]	; (3760 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    3736:	b510      	push	{r4, lr}
    3738:	2100      	movs	r1, #0
    373a:	7011      	strb	r1, [r2, #0]
    373c:	4c09      	ldr	r4, [pc, #36]	; (3764 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    373e:	6060      	str	r0, [r4, #4]
    3740:	f000 f822 	bl	3788 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    3744:	b110      	cbz	r0, 374c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    3746:	f240 312e 	movw	r1, #814	; 0x32e
    374a:	e004      	b.n	3756 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    374c:	68a0      	ldr	r0, [r4, #8]
    374e:	2800      	cmp	r0, #0
    3750:	d104      	bne.n	375c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    3752:	f240 3131 	movw	r1, #817	; 0x331
    3756:	202d      	movs	r0, #45	; 0x2d
    3758:	f7fd f92a 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    375c:	bd10      	pop	{r4, pc}
    375e:	0000      	.short	0x0000
    3760:	20001348 	.word	0x20001348
    3764:	200000f0 	.word	0x200000f0

00003768 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    3768:	4902      	ldr	r1, [pc, #8]	; (3774 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    376a:	4801      	ldr	r0, [pc, #4]	; (3770 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    376c:	6088      	str	r0, [r1, #8]
    376e:	4770      	bx	lr
    3770:	000042f0 	.word	0x000042f0
    3774:	200000f0 	.word	0x200000f0

00003778 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    3778:	4902      	ldr	r1, [pc, #8]	; (3784 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    377a:	6008      	str	r0, [r1, #0]
    377c:	6889      	ldr	r1, [r1, #8]
    377e:	6809      	ldr	r1, [r1, #0]
    3780:	4708      	bx	r1
    3782:	0000      	.short	0x0000
    3784:	200000f0 	.word	0x200000f0

00003788 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    3788:	4808      	ldr	r0, [pc, #32]	; (37ac <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    378a:	b510      	push	{r4, lr}
    378c:	7800      	ldrb	r0, [r0, #0]
    378e:	b110      	cbz	r0, 3796 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    3790:	240c      	movs	r4, #12
    3792:	4620      	mov	r0, r4
    3794:	bd10      	pop	{r4, pc}
    3796:	2400      	movs	r4, #0
    3798:	2218      	movs	r2, #24
    379a:	4621      	mov	r1, r4
    379c:	4803      	ldr	r0, [pc, #12]	; (37ac <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    379e:	f00d fbec 	bl	10f7a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    37a2:	f004 f8d9 	bl	7958 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    37a6:	f003 fefd 	bl	75a4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    37aa:	e7f2      	b.n	3792 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    37ac:	20001348 	.word	0x20001348

000037b0 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    37b0:	4904      	ldr	r1, [pc, #16]	; (37c4 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    37b2:	b510      	push	{r4, lr}
    37b4:	7809      	ldrb	r1, [r1, #0]
    37b6:	2901      	cmp	r1, #1
    37b8:	d101      	bne.n	37be <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    37ba:	f000 fbd5 	bl	3f68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    37be:	2000      	movs	r0, #0
    37c0:	bd10      	pop	{r4, pc}
    37c2:	0000      	.short	0x0000
    37c4:	20001348 	.word	0x20001348

000037c8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    37c8:	4902      	ldr	r1, [pc, #8]	; (37d4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    37ca:	4801      	ldr	r0, [pc, #4]	; (37d0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    37cc:	6008      	str	r0, [r1, #0]
    37ce:	4770      	bx	lr
    37d0:	00004095 	.word	0x00004095
    37d4:	200000fc 	.word	0x200000fc

000037d8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    37d8:	b510      	push	{r4, lr}
    37da:	4604      	mov	r4, r0
    37dc:	7880      	ldrb	r0, [r0, #2]
    37de:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    37e2:	b158      	cbz	r0, 37fc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x24>
    37e4:	233c      	movs	r3, #60	; 0x3c
    37e6:	22ff      	movs	r2, #255	; 0xff
    37e8:	4620      	mov	r0, r4
    37ea:	69e1      	ldr	r1, [r4, #28]
    37ec:	f000 fbe2 	bl	3fb4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a0>
    37f0:	2202      	movs	r2, #2
    37f2:	4904      	ldr	r1, [pc, #16]	; (3804 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2c>)
    37f4:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    37f8:	f00a fe00 	bl	e3fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    37fc:	2001      	movs	r0, #1
    37fe:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    3802:	bd10      	pop	{r4, pc}
    3804:	0000ecb7 	.word	0x0000ecb7
    3808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    380c:	000f      	movs	r7, r1
    380e:	4604      	mov	r4, r0
    3810:	d023      	beq.n	385a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x82>
    3812:	f104 0028 	add.w	r0, r4, #40	; 0x28
    3816:	4605      	mov	r5, r0
    3818:	f00b fb0e 	bl	ee38 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    381c:	b9b0      	cbnz	r0, 384c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x74>
    381e:	78a0      	ldrb	r0, [r4, #2]
    3820:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    3824:	b350      	cbz	r0, 387c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xa4>
    3826:	4628      	mov	r0, r5
    3828:	f00b fadd 	bl	ede6 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    382c:	4606      	mov	r6, r0
    382e:	4628      	mov	r0, r5
    3830:	f00b fb02 	bl	ee38 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    3834:	1a30      	subs	r0, r6, r0
    3836:	b2c0      	uxtb	r0, r0
    3838:	f00b fb53 	bl	eee2 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    383c:	4601      	mov	r1, r0
    383e:	4835      	ldr	r0, [pc, #212]	; (3914 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x13c>)
    3840:	6842      	ldr	r2, [r0, #4]
    3842:	4411      	add	r1, r2
    3844:	6041      	str	r1, [r0, #4]
    3846:	4628      	mov	r0, r5
    3848:	f00b fb14 	bl	ee74 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    384c:	4628      	mov	r0, r5
    384e:	f00b fad6 	bl	edfe <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    3852:	4601      	mov	r1, r0
    3854:	4620      	mov	r0, r4
    3856:	f00b fa9e 	bl	ed96 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x118>
    385a:	4d2f      	ldr	r5, [pc, #188]	; (3918 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x140>)
    385c:	f894 605e 	ldrb.w	r6, [r4, #94]	; 0x5e
    3860:	2100      	movs	r1, #0
    3862:	6868      	ldr	r0, [r5, #4]
    3864:	8001      	strh	r1, [r0, #0]
    3866:	f00b fa0f 	bl	ec88 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    386a:	8860      	ldrh	r0, [r4, #2]
    386c:	2813      	cmp	r0, #19
    386e:	d013      	beq.n	3898 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xc0>
    3870:	dc09      	bgt.n	3886 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xae>
    3872:	2810      	cmp	r0, #16
    3874:	d036      	beq.n	38e4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x10c>
    3876:	2812      	cmp	r0, #18
    3878:	d109      	bne.n	388e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xb6>
    387a:	e031      	b.n	38e0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x108>
    387c:	4620      	mov	r0, r4
    387e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3882:	f000 bb71 	b.w	3f68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    3886:	2815      	cmp	r0, #21
    3888:	d00f      	beq.n	38aa <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xd2>
    388a:	281d      	cmp	r0, #29
    388c:	d00d      	beq.n	38aa <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xd2>
    388e:	f240 6173 	movw	r1, #1651	; 0x673
    3892:	202d      	movs	r0, #45	; 0x2d
    3894:	f7fd f88c 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3898:	2100      	movs	r1, #0
    389a:	6868      	ldr	r0, [r5, #4]
    389c:	f00a fc2c 	bl	e0f8 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    38a0:	2101      	movs	r1, #1
    38a2:	6868      	ldr	r0, [r5, #4]
    38a4:	f00b f9f0 	bl	ec88 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    38a8:	e020      	b.n	38ec <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x114>
    38aa:	2101      	movs	r1, #1
    38ac:	6868      	ldr	r0, [r5, #4]
    38ae:	f00a fc23 	bl	e0f8 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    38b2:	2101      	movs	r1, #1
    38b4:	6868      	ldr	r0, [r5, #4]
    38b6:	f00b f9e7 	bl	ec88 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    38ba:	b136      	cbz	r6, 38ca <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xf2>
    38bc:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    38c0:	6868      	ldr	r0, [r5, #4]
    38c2:	f00a fc34 	bl	e12e <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    38c6:	2101      	movs	r1, #1
    38c8:	e006      	b.n	38d8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x100>
    38ca:	f104 0158 	add.w	r1, r4, #88	; 0x58
    38ce:	6868      	ldr	r0, [r5, #4]
    38d0:	f00a fc2d 	bl	e12e <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    38d4:	f894 1057 	ldrb.w	r1, [r4, #87]	; 0x57
    38d8:	6868      	ldr	r0, [r5, #4]
    38da:	f00a fc2e 	bl	e13a <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    38de:	e005      	b.n	38ec <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x114>
    38e0:	2106      	movs	r1, #6
    38e2:	e000      	b.n	38e6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x10e>
    38e4:	2102      	movs	r1, #2
    38e6:	6868      	ldr	r0, [r5, #4]
    38e8:	f00a fc06 	bl	e0f8 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    38ec:	4620      	mov	r0, r4
    38ee:	f000 fcdd 	bl	42ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2ac>
    38f2:	8860      	ldrh	r0, [r4, #2]
    38f4:	281d      	cmp	r0, #29
    38f6:	d007      	beq.n	3908 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x130>
    38f8:	2815      	cmp	r0, #21
    38fa:	d005      	beq.n	3908 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x130>
    38fc:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    3900:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    3902:	6868      	ldr	r0, [r5, #4]
    3904:	f00a fbe8 	bl	e0d8 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>
    3908:	4639      	mov	r1, r7
    390a:	4620      	mov	r0, r4
    390c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3910:	f000 b9f4 	b.w	3cfc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e8>
    3914:	20001348 	.word	0x20001348
    3918:	200000f0 	.word	0x200000f0
    391c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3920:	4d2f      	ldr	r5, [pc, #188]	; (39e0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x208>)
    3922:	4680      	mov	r8, r0
    3924:	7828      	ldrb	r0, [r5, #0]
    3926:	2802      	cmp	r0, #2
    3928:	d005      	beq.n	3936 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x15e>
    392a:	7828      	ldrb	r0, [r5, #0]
    392c:	2803      	cmp	r0, #3
    392e:	d002      	beq.n	3936 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x15e>
    3930:	f640 512d 	movw	r1, #3373	; 0xd2d
    3934:	e02b      	b.n	398e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1b6>
    3936:	4c2b      	ldr	r4, [pc, #172]	; (39e4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x20c>)
    3938:	6826      	ldr	r6, [r4, #0]
    393a:	7b30      	ldrb	r0, [r6, #12]
    393c:	b118      	cbz	r0, 3946 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x16e>
    393e:	f7fe ff83 	bl	2848 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    3942:	f886 002e 	strb.w	r0, [r6, #46]	; 0x2e
    3946:	f8d4 c004 	ldr.w	ip, [r4, #4]
    394a:	2700      	movs	r7, #0
    394c:	f1b8 0f00 	cmp.w	r8, #0
    3950:	f89c 0000 	ldrb.w	r0, [ip]
    3954:	f000 060f 	and.w	r6, r0, #15
    3958:	d027      	beq.n	39aa <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    395a:	6821      	ldr	r1, [r4, #0]
    395c:	09c0      	lsrs	r0, r0, #7
    395e:	f101 0351 	add.w	r3, r1, #81	; 0x51
    3962:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
    3966:	f10c 0109 	add.w	r1, ip, #9
    396a:	f00a f8b9 	bl	dae0 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    396e:	b1e0      	cbz	r0, 39aa <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    3970:	4639      	mov	r1, r7
    3972:	6860      	ldr	r0, [r4, #4]
    3974:	f00a fba0 	bl	e0b8 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>
    3978:	b1b8      	cbz	r0, 39aa <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    397a:	782a      	ldrb	r2, [r5, #0]
    397c:	6820      	ldr	r0, [r4, #0]
    397e:	4631      	mov	r1, r6
    3980:	2a02      	cmp	r2, #2
    3982:	d007      	beq.n	3994 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1bc>
    3984:	782a      	ldrb	r2, [r5, #0]
    3986:	2a03      	cmp	r2, #3
    3988:	d004      	beq.n	3994 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1bc>
    398a:	f640 5106 	movw	r1, #3334	; 0xd06
    398e:	202d      	movs	r0, #45	; 0x2d
    3990:	f7fd f80e 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3994:	68a2      	ldr	r2, [r4, #8]
    3996:	782b      	ldrb	r3, [r5, #0]
    3998:	6952      	ldr	r2, [r2, #20]
    399a:	f06f 0607 	mvn.w	r6, #7
    399e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    39a2:	58d2      	ldr	r2, [r2, r3]
    39a4:	4790      	blx	r2
    39a6:	4606      	mov	r6, r0
    39a8:	e000      	b.n	39ac <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d4>
    39aa:	2601      	movs	r6, #1
    39ac:	7ba8      	ldrb	r0, [r5, #14]
    39ae:	b118      	cbz	r0, 39b8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e0>
    39b0:	f003 ffd2 	bl	7958 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    39b4:	f003 fdf6 	bl	75a4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    39b8:	2e00      	cmp	r6, #0
    39ba:	d00f      	beq.n	39dc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x204>
    39bc:	6820      	ldr	r0, [r4, #0]
    39be:	f00b faa6 	bl	ef0e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    39c2:	b130      	cbz	r0, 39d2 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1fa>
    39c4:	f003 ffea 	bl	799c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    39c8:	68a0      	ldr	r0, [r4, #8]
    39ca:	6880      	ldr	r0, [r0, #8]
    39cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    39d0:	4700      	bx	r0
    39d2:	6820      	ldr	r0, [r4, #0]
    39d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    39d8:	f000 bac6 	b.w	3f68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    39dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    39e0:	20001348 	.word	0x20001348
    39e4:	200000f0 	.word	0x200000f0
    39e8:	b510      	push	{r4, lr}
    39ea:	2903      	cmp	r1, #3
    39ec:	d002      	beq.n	39f4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x21c>
    39ee:	2905      	cmp	r1, #5
    39f0:	d10a      	bne.n	3a08 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x230>
    39f2:	e002      	b.n	39fa <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x222>
    39f4:	f000 fbb2 	bl	415c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x15c>
    39f8:	e003      	b.n	3a02 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x22a>
    39fa:	4904      	ldr	r1, [pc, #16]	; (3a0c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x234>)
    39fc:	6809      	ldr	r1, [r1, #0]
    39fe:	b109      	cbz	r1, 3a04 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x22c>
    3a00:	4788      	blx	r1
    3a02:	b108      	cbz	r0, 3a08 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x230>
    3a04:	2000      	movs	r0, #0
    3a06:	bd10      	pop	{r4, pc}
    3a08:	2001      	movs	r0, #1
    3a0a:	bd10      	pop	{r4, pc}
    3a0c:	200000fc 	.word	0x200000fc
    3a10:	4a09      	ldr	r2, [pc, #36]	; (3a38 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x260>)
    3a12:	0003      	movs	r3, r0
    3a14:	6810      	ldr	r0, [r2, #0]
    3a16:	d001      	beq.n	3a1c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x244>
    3a18:	f000 baa6 	b.w	3f68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    3a1c:	2900      	cmp	r1, #0
    3a1e:	d009      	beq.n	3a34 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x25c>
    3a20:	6891      	ldr	r1, [r2, #8]
    3a22:	4a06      	ldr	r2, [pc, #24]	; (3a3c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x264>)
    3a24:	6909      	ldr	r1, [r1, #16]
    3a26:	7812      	ldrb	r2, [r2, #0]
    3a28:	f06f 030f 	mvn.w	r3, #15
    3a2c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    3a30:	5889      	ldr	r1, [r1, r2]
    3a32:	4708      	bx	r1
    3a34:	4770      	bx	lr
    3a36:	0000      	.short	0x0000
    3a38:	200000f0 	.word	0x200000f0
    3a3c:	20001348 	.word	0x20001348
    3a40:	b570      	push	{r4, r5, r6, lr}
    3a42:	4604      	mov	r4, r0
    3a44:	8840      	ldrh	r0, [r0, #2]
    3a46:	2810      	cmp	r0, #16
    3a48:	d019      	beq.n	3a7e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2a6>
    3a4a:	4d10      	ldr	r5, [pc, #64]	; (3a8c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2b4>)
    3a4c:	7ba8      	ldrb	r0, [r5, #14]
    3a4e:	b120      	cbz	r0, 3a5a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x282>
    3a50:	f003 fdc8 	bl	75e4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    3a54:	2040      	movs	r0, #64	; 0x40
    3a56:	f003 ff8d 	bl	7974 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    3a5a:	480d      	ldr	r0, [pc, #52]	; (3a90 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2b8>)
    3a5c:	6840      	ldr	r0, [r0, #4]
    3a5e:	f004 fa0f 	bl	7e80 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    3a62:	78a0      	ldrb	r0, [r4, #2]
    3a64:	0740      	lsls	r0, r0, #29
    3a66:	d404      	bmi.n	3a72 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x29a>
    3a68:	2100      	movs	r1, #0
    3a6a:	7922      	ldrb	r2, [r4, #4]
    3a6c:	4608      	mov	r0, r1
    3a6e:	f004 fa8f 	bl	7f90 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    3a72:	2000      	movs	r0, #0
    3a74:	f004 f8b4 	bl	7be0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    3a78:	2002      	movs	r0, #2
    3a7a:	7028      	strb	r0, [r5, #0]
    3a7c:	bd70      	pop	{r4, r5, r6, pc}
    3a7e:	4620      	mov	r0, r4
    3a80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3a84:	2101      	movs	r1, #1
    3a86:	f7ff bebf 	b.w	3808 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    3a8a:	0000      	.short	0x0000
    3a8c:	20001348 	.word	0x20001348
    3a90:	200000f0 	.word	0x200000f0
    3a94:	b510      	push	{r4, lr}
    3a96:	4c12      	ldr	r4, [pc, #72]	; (3ae0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48>)
    3a98:	6820      	ldr	r0, [r4, #0]
    3a9a:	f000 f825 	bl	3ae8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x50>
    3a9e:	6820      	ldr	r0, [r4, #0]
    3aa0:	f00b fa35 	bl	ef0e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    3aa4:	2800      	cmp	r0, #0
    3aa6:	6820      	ldr	r0, [r4, #0]
    3aa8:	d00b      	beq.n	3ac2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2a>
    3aaa:	490e      	ldr	r1, [pc, #56]	; (3ae4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c>)
    3aac:	780a      	ldrb	r2, [r1, #0]
    3aae:	2a02      	cmp	r2, #2
    3ab0:	d00b      	beq.n	3aca <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x32>
    3ab2:	780a      	ldrb	r2, [r1, #0]
    3ab4:	2a03      	cmp	r2, #3
    3ab6:	d008      	beq.n	3aca <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x32>
    3ab8:	f640 4137 	movw	r1, #3127	; 0xc37
    3abc:	202d      	movs	r0, #45	; 0x2d
    3abe:	f7fc ff77 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3ac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3ac6:	f000 ba4f 	b.w	3f68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    3aca:	68a2      	ldr	r2, [r4, #8]
    3acc:	7809      	ldrb	r1, [r1, #0]
    3ace:	68d2      	ldr	r2, [r2, #12]
    3ad0:	f06f 0307 	mvn.w	r3, #7
    3ad4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    3ad8:	5851      	ldr	r1, [r2, r1]
    3ada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3ade:	4708      	bx	r1
    3ae0:	200000f0 	.word	0x200000f0
    3ae4:	20001348 	.word	0x20001348
    3ae8:	b510      	push	{r4, lr}
    3aea:	7b01      	ldrb	r1, [r0, #12]
    3aec:	b121      	cbz	r1, 3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>
    3aee:	4604      	mov	r4, r0
    3af0:	f7fe feaa 	bl	2848 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    3af4:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    3af8:	4805      	ldr	r0, [pc, #20]	; (3b10 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x78>)
    3afa:	7b80      	ldrb	r0, [r0, #14]
    3afc:	2800      	cmp	r0, #0
    3afe:	d005      	beq.n	3b0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x74>
    3b00:	f003 ff2a 	bl	7958 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3b08:	f003 bd4c 	b.w	75a4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    3b0c:	bd10      	pop	{r4, pc}
    3b0e:	0000      	.short	0x0000
    3b10:	20001348 	.word	0x20001348

00003b14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    3b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3b18:	4d5c      	ldr	r5, [pc, #368]	; (3c8c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>)
    3b1a:	4604      	mov	r4, r0
    3b1c:	b086      	sub	sp, #24
    3b1e:	7828      	ldrb	r0, [r5, #0]
    3b20:	bbe8      	cbnz	r0, 3b9e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8a>
    3b22:	7820      	ldrb	r0, [r4, #0]
    3b24:	28ff      	cmp	r0, #255	; 0xff
    3b26:	d04b      	beq.n	3bc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xac>
    3b28:	f04f 0800 	mov.w	r8, #0
    3b2c:	f8a5 800c 	strh.w	r8, [r5, #12]
    3b30:	f8c5 8004 	str.w	r8, [r5, #4]
    3b34:	f885 8001 	strb.w	r8, [r5, #1]
    3b38:	f885 8002 	strb.w	r8, [r5, #2]
    3b3c:	f884 8069 	strb.w	r8, [r4, #105]	; 0x69
    3b40:	4b53      	ldr	r3, [pc, #332]	; (3c90 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17c>)
    3b42:	4e54      	ldr	r6, [pc, #336]	; (3c94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x180>)
    3b44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3b46:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    3b4a:	68b0      	ldr	r0, [r6, #8]
    3b4c:	6840      	ldr	r0, [r0, #4]
    3b4e:	9003      	str	r0, [sp, #12]
    3b50:	4668      	mov	r0, sp
    3b52:	f004 f819 	bl	7b88 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    3b56:	f004 f8ed 	bl	7d34 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    3b5a:	f003 fefd 	bl	7958 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3b5e:	f003 fd21 	bl	75a4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    3b62:	484d      	ldr	r0, [pc, #308]	; (3c98 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x184>)
    3b64:	f004 fa46 	bl	7ff4 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    3b68:	484c      	ldr	r0, [pc, #304]	; (3c9c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x188>)
    3b6a:	f004 fa4d 	bl	8008 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    3b6e:	f104 0028 	add.w	r0, r4, #40	; 0x28
    3b72:	4607      	mov	r7, r0
    3b74:	f00b f97e 	bl	ee74 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    3b78:	4638      	mov	r0, r7
    3b7a:	f00b f940 	bl	edfe <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    3b7e:	4601      	mov	r1, r0
    3b80:	4620      	mov	r0, r4
    3b82:	f00b f908 	bl	ed96 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x118>
    3b86:	f994 000e 	ldrsb.w	r0, [r4, #14]
    3b8a:	f004 f957 	bl	7e3c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    3b8e:	7921      	ldrb	r1, [r4, #4]
    3b90:	2000      	movs	r0, #0
    3b92:	f003 ff8d 	bl	7ab0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    3b96:	2101      	movs	r1, #1
    3b98:	60a8      	str	r0, [r5, #8]
    3b9a:	b1a8      	cbz	r0, 3bc8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb4>
    3b9c:	e000      	b.n	3ba0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8c>
    3b9e:	e00f      	b.n	3bc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xac>
    3ba0:	f104 0138 	add.w	r1, r4, #56	; 0x38
    3ba4:	6b60      	ldr	r0, [r4, #52]	; 0x34
    3ba6:	f009 ff0a 	bl	d9be <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    3baa:	4607      	mov	r7, r0
    3bac:	f104 0140 	add.w	r1, r4, #64	; 0x40
    3bb0:	6b60      	ldr	r0, [r4, #52]	; 0x34
    3bb2:	f009 ff07 	bl	d9c4 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    3bb6:	b14f      	cbz	r7, 3bcc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb8>
    3bb8:	f894 1020 	ldrb.w	r1, [r4, #32]
    3bbc:	b951      	cbnz	r1, 3bd4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc0>
    3bbe:	e005      	b.n	3bcc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb8>
    3bc0:	200c      	movs	r0, #12
    3bc2:	b006      	add	sp, #24
    3bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3bc8:	7029      	strb	r1, [r5, #0]
    3bca:	e05c      	b.n	3c86 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x172>
    3bcc:	b120      	cbz	r0, 3bd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc4>
    3bce:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    3bd2:	b108      	cbz	r0, 3bd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc4>
    3bd4:	2701      	movs	r7, #1
    3bd6:	e000      	b.n	3bda <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc6>
    3bd8:	2700      	movs	r7, #0
    3bda:	7ea0      	ldrb	r0, [r4, #26]
    3bdc:	b920      	cbnz	r0, 3be8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd4>
    3bde:	7e20      	ldrb	r0, [r4, #24]
    3be0:	b910      	cbnz	r0, 3be8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd4>
    3be2:	78a0      	ldrb	r0, [r4, #2]
    3be4:	0740      	lsls	r0, r0, #29
    3be6:	d523      	bpl.n	3c30 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11c>
    3be8:	e9d4 1012 	ldrd	r1, r0, [r4, #72]	; 0x48
    3bec:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    3bf0:	4050      	eors	r0, r2
    3bf2:	ea70 0101 	orns	r1, r0, r1
    3bf6:	d006      	beq.n	3c06 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf2>
    3bf8:	f00c ffb3 	bl	10b62 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    3bfc:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    3c00:	1a80      	subs	r0, r0, r2
    3c02:	4199      	sbcs	r1, r3
    3c04:	d200      	bcs.n	3c08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf4>
    3c06:	b19f      	cbz	r7, 3c30 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11c>
    3c08:	f7fe fc88 	bl	251c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    3c0c:	4924      	ldr	r1, [pc, #144]	; (3ca0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x18c>)
    3c0e:	fba0 2301 	umull	r2, r3, r0, r1
    3c12:	f104 0048 	add.w	r0, r4, #72	; 0x48
    3c16:	f00b f8c9 	bl	edac <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x12e>
    3c1a:	2101      	movs	r1, #1
    3c1c:	4620      	mov	r0, r4
    3c1e:	f00b f87e 	bl	ed1e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa0>
    3c22:	78a0      	ldrb	r0, [r4, #2]
    3c24:	0740      	lsls	r0, r0, #29
    3c26:	d503      	bpl.n	3c30 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11c>
    3c28:	2101      	movs	r1, #1
    3c2a:	4620      	mov	r0, r4
    3c2c:	f000 fac8 	bl	41c0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1c0>
    3c30:	6870      	ldr	r0, [r6, #4]
    3c32:	1cc0      	adds	r0, r0, #3
    3c34:	f009 ffdf 	bl	dbf6 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    3c38:	73a8      	strb	r0, [r5, #14]
    3c3a:	78a0      	ldrb	r0, [r4, #2]
    3c3c:	07c0      	lsls	r0, r0, #31
    3c3e:	d022      	beq.n	3c86 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x172>
    3c40:	f8cd 8010 	str.w	r8, [sp, #16]
    3c44:	20ff      	movs	r0, #255	; 0xff
    3c46:	f8cd 8014 	str.w	r8, [sp, #20]
    3c4a:	73e8      	strb	r0, [r5, #15]
    3c4c:	69e6      	ldr	r6, [r4, #28]
    3c4e:	f106 070a 	add.w	r7, r6, #10
    3c52:	e013      	b.n	3c7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>
    3c54:	9c04      	ldr	r4, [sp, #16]
    3c56:	42b4      	cmp	r4, r6
    3c58:	d010      	beq.n	3c7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>
    3c5a:	7a72      	ldrb	r2, [r6, #9]
    3c5c:	7a60      	ldrb	r0, [r4, #9]
    3c5e:	463b      	mov	r3, r7
    3c60:	f104 010a 	add.w	r1, r4, #10
    3c64:	f009 ff3c 	bl	dae0 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    3c68:	b140      	cbz	r0, 3c7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>
    3c6a:	78a0      	ldrb	r0, [r4, #2]
    3c6c:	73e8      	strb	r0, [r5, #15]
    3c6e:	f8d4 0003 	ldr.w	r0, [r4, #3]
    3c72:	6128      	str	r0, [r5, #16]
    3c74:	f8b4 0007 	ldrh.w	r0, [r4, #7]
    3c78:	82a8      	strh	r0, [r5, #20]
    3c7a:	e004      	b.n	3c86 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x172>
    3c7c:	a804      	add	r0, sp, #16
    3c7e:	f7fd fa17 	bl	10b0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    3c82:	2800      	cmp	r0, #0
    3c84:	d0e6      	beq.n	3c54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x140>
    3c86:	2000      	movs	r0, #0
    3c88:	e79b      	b.n	3bc2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xae>
    3c8a:	0000      	.short	0x0000
    3c8c:	20001348 	.word	0x20001348
    3c90:	000042d0 	.word	0x000042d0
    3c94:	200000f0 	.word	0x200000f0
    3c98:	8e89bed6 	.word	0x8e89bed6
    3c9c:	00555555 	.word	0x00555555
    3ca0:	000f4240 	.word	0x000f4240
    3ca4:	b510      	push	{r4, lr}
    3ca6:	4604      	mov	r4, r0
    3ca8:	f7ff ff34 	bl	3b14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    3cac:	2800      	cmp	r0, #0
    3cae:	d108      	bne.n	3cc2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ae>
    3cb0:	4804      	ldr	r0, [pc, #16]	; (3cc4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b0>)
    3cb2:	7800      	ldrb	r0, [r0, #0]
    3cb4:	2801      	cmp	r0, #1
    3cb6:	d003      	beq.n	3cc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ac>
    3cb8:	2100      	movs	r1, #0
    3cba:	4620      	mov	r0, r4
    3cbc:	f7ff fda4 	bl	3808 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    3cc0:	2000      	movs	r0, #0
    3cc2:	bd10      	pop	{r4, pc}
    3cc4:	20001348 	.word	0x20001348
    3cc8:	480a      	ldr	r0, [pc, #40]	; (3cf4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e0>)
    3cca:	b510      	push	{r4, lr}
    3ccc:	490a      	ldr	r1, [pc, #40]	; (3cf8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e4>)
    3cce:	6804      	ldr	r4, [r0, #0]
    3cd0:	7808      	ldrb	r0, [r1, #0]
    3cd2:	2800      	cmp	r0, #0
    3cd4:	d00d      	beq.n	3cf2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1de>
    3cd6:	7808      	ldrb	r0, [r1, #0]
    3cd8:	2802      	cmp	r0, #2
    3cda:	d002      	beq.n	3ce2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ce>
    3cdc:	7808      	ldrb	r0, [r1, #0]
    3cde:	2803      	cmp	r0, #3
    3ce0:	d102      	bne.n	3ce8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>
    3ce2:	4620      	mov	r0, r4
    3ce4:	f7ff ff00 	bl	3ae8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x50>
    3ce8:	4620      	mov	r0, r4
    3cea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3cee:	f000 b93b 	b.w	3f68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    3cf2:	bd10      	pop	{r4, pc}
    3cf4:	200000f0 	.word	0x200000f0
    3cf8:	20001348 	.word	0x20001348
    3cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d00:	4604      	mov	r4, r0
    3d02:	4829      	ldr	r0, [pc, #164]	; (3da8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x294>)
    3d04:	460d      	mov	r5, r1
    3d06:	6840      	ldr	r0, [r0, #4]
    3d08:	f004 f8ba 	bl	7e80 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    3d0c:	4e27      	ldr	r6, [pc, #156]	; (3dac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x298>)
    3d0e:	2004      	movs	r0, #4
    3d10:	7030      	strb	r0, [r6, #0]
    3d12:	b355      	cbz	r5, 3d6a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x256>
    3d14:	8860      	ldrh	r0, [r4, #2]
    3d16:	2810      	cmp	r0, #16
    3d18:	d023      	beq.n	3d62 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x24e>
    3d1a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    3d1e:	4680      	mov	r8, r0
    3d20:	68b5      	ldr	r5, [r6, #8]
    3d22:	f00b f860 	bl	ede6 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    3d26:	4607      	mov	r7, r0
    3d28:	4640      	mov	r0, r8
    3d2a:	f00b f885 	bl	ee38 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    3d2e:	1a38      	subs	r0, r7, r0
    3d30:	1e40      	subs	r0, r0, #1
    3d32:	b2c0      	uxtb	r0, r0
    3d34:	8861      	ldrh	r1, [r4, #2]
    3d36:	2228      	movs	r2, #40	; 0x28
    3d38:	f000 fb06 	bl	4348 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    3d3c:	4405      	add	r5, r0
    3d3e:	78a0      	ldrb	r0, [r4, #2]
    3d40:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    3d44:	b130      	cbz	r0, 3d54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x240>
    3d46:	6870      	ldr	r0, [r6, #4]
    3d48:	4405      	add	r5, r0
    3d4a:	f00b f8ce 	bl	eeea <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    3d4e:	4428      	add	r0, r5
    3d50:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    3d54:	7922      	ldrb	r2, [r4, #4]
    3d56:	4629      	mov	r1, r5
    3d58:	2000      	movs	r0, #0
    3d5a:	f004 f8a7 	bl	7eac <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    3d5e:	b920      	cbnz	r0, 3d6a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x256>
    3d60:	e00c      	b.n	3d7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    3d62:	7921      	ldrb	r1, [r4, #4]
    3d64:	2000      	movs	r0, #0
    3d66:	f003 fe69 	bl	7a3c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    3d6a:	8860      	ldrh	r0, [r4, #2]
    3d6c:	2813      	cmp	r0, #19
    3d6e:	d011      	beq.n	3d94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    3d70:	dc07      	bgt.n	3d82 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x26e>
    3d72:	2810      	cmp	r0, #16
    3d74:	d015      	beq.n	3da2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x28e>
    3d76:	2812      	cmp	r0, #18
    3d78:	d107      	bne.n	3d8a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x276>
    3d7a:	e00b      	b.n	3d94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    3d7c:	f640 51a8 	movw	r1, #3496	; 0xda8
    3d80:	e005      	b.n	3d8e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27a>
    3d82:	2815      	cmp	r0, #21
    3d84:	d006      	beq.n	3d94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    3d86:	281d      	cmp	r0, #29
    3d88:	d004      	beq.n	3d94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    3d8a:	f640 51bc 	movw	r1, #3516	; 0xdbc
    3d8e:	202d      	movs	r0, #45	; 0x2d
    3d90:	f7fc fe0e 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3d94:	7922      	ldrb	r2, [r4, #4]
    3d96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3d9a:	2101      	movs	r1, #1
    3d9c:	2000      	movs	r0, #0
    3d9e:	f004 b8f7 	b.w	7f90 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    3da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3da6:	0000      	.short	0x0000
    3da8:	200000f0 	.word	0x200000f0
    3dac:	20001348 	.word	0x20001348
    3db0:	b538      	push	{r3, r4, r5, lr}
    3db2:	4604      	mov	r4, r0
    3db4:	f890 00bc 	ldrb.w	r0, [r0, #188]	; 0xbc
    3db8:	460b      	mov	r3, r1
    3dba:	f88d 0000 	strb.w	r0, [sp]
    3dbe:	9800      	ldr	r0, [sp, #0]
    3dc0:	9000      	str	r0, [sp, #0]
    3dc2:	f89d 0000 	ldrb.w	r0, [sp]
    3dc6:	2800      	cmp	r0, #0
    3dc8:	d13a      	bne.n	3e40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x32c>
    3dca:	7820      	ldrb	r0, [r4, #0]
    3dcc:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    3dd0:	2bff      	cmp	r3, #255	; 0xff
    3dd2:	d010      	beq.n	3df6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2e2>
    3dd4:	f104 02bf 	add.w	r2, r4, #191	; 0xbf
    3dd8:	1e51      	subs	r1, r2, #1
    3dda:	4618      	mov	r0, r3
    3ddc:	f7fe fb20 	bl	2420 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    3de0:	b130      	cbz	r0, 3df0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2dc>
    3de2:	f894 00be 	ldrb.w	r0, [r4, #190]	; 0xbe
    3de6:	f040 0002 	orr.w	r0, r0, #2
    3dea:	f884 00be 	strb.w	r0, [r4, #190]	; 0xbe
    3dee:	e011      	b.n	3e14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x300>
    3df0:	f241 0118 	movw	r1, #4120	; 0x1018
    3df4:	e021      	b.n	3e3a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x326>
    3df6:	4813      	ldr	r0, [pc, #76]	; (3e44 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x330>)
    3df8:	6840      	ldr	r0, [r0, #4]
    3dfa:	7801      	ldrb	r1, [r0, #0]
    3dfc:	f3c1 1180 	ubfx	r1, r1, #6, #1
    3e00:	f884 10be 	strb.w	r1, [r4, #190]	; 0xbe
    3e04:	f8d0 1003 	ldr.w	r1, [r0, #3]
    3e08:	f8c4 10bf 	str.w	r1, [r4, #191]	; 0xbf
    3e0c:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    3e10:	f8a4 00c3 	strh.w	r0, [r4, #195]	; 0xc3
    3e14:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
    3e18:	287f      	cmp	r0, #127	; 0x7f
    3e1a:	d00c      	beq.n	3e36 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x322>
    3e1c:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5
    3e20:	207f      	movs	r0, #127	; 0x7f
    3e22:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    3e26:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    3e2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3e2e:	2202      	movs	r2, #2
    3e30:	4905      	ldr	r1, [pc, #20]	; (3e48 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x334>)
    3e32:	f00a bae3 	b.w	e3fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3e36:	f640 616c 	movw	r1, #3692	; 0xe6c
    3e3a:	202d      	movs	r0, #45	; 0x2d
    3e3c:	f7fc fdb8 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e40:	bd38      	pop	{r3, r4, r5, pc}
    3e42:	0000      	.short	0x0000
    3e44:	200000f0 	.word	0x200000f0
    3e48:	0000ed07 	.word	0x0000ed07
    3e4c:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    3e50:	4616      	mov	r6, r2
    3e52:	4604      	mov	r4, r0
    3e54:	2903      	cmp	r1, #3
    3e56:	d004      	beq.n	3e62 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x34e>
    3e58:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
    3e5c:	b108      	cbz	r0, 3e62 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x34e>
    3e5e:	2001      	movs	r0, #1
    3e60:	e000      	b.n	3e64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x350>
    3e62:	2000      	movs	r0, #0
    3e64:	2500      	movs	r5, #0
    3e66:	2903      	cmp	r1, #3
    3e68:	d003      	beq.n	3e72 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x35e>
    3e6a:	2701      	movs	r7, #1
    3e6c:	2905      	cmp	r1, #5
    3e6e:	d005      	beq.n	3e7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x368>
    3e70:	e008      	b.n	3e84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x370>
    3e72:	78a1      	ldrb	r1, [r4, #2]
    3e74:	2702      	movs	r7, #2
    3e76:	f3c1 0140 	ubfx	r1, r1, #1, #1
    3e7a:	e001      	b.n	3e80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x36c>
    3e7c:	78a1      	ldrb	r1, [r4, #2]
    3e7e:	07c9      	lsls	r1, r1, #31
    3e80:	2900      	cmp	r1, #0
    3e82:	d06b      	beq.n	3f5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    3e84:	2800      	cmp	r0, #0
    3e86:	d169      	bne.n	3f5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    3e88:	4835      	ldr	r0, [pc, #212]	; (3f60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x44c>)
    3e8a:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 3f64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x450>
    3e8e:	7b80      	ldrb	r0, [r0, #14]
    3e90:	b180      	cbz	r0, 3eb4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a0>
    3e92:	f009 feb3 	bl	dbfc <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    3e96:	7030      	strb	r0, [r6, #0]
    3e98:	28ff      	cmp	r0, #255	; 0xff
    3e9a:	d014      	beq.n	3ec6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b2>
    3e9c:	b2c0      	uxtb	r0, r0
    3e9e:	466a      	mov	r2, sp
    3ea0:	a902      	add	r1, sp, #8
    3ea2:	f7fe fabd 	bl	2420 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    3ea6:	b148      	cbz	r0, 3ebc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a8>
    3ea8:	4669      	mov	r1, sp
    3eaa:	f89d 0008 	ldrb.w	r0, [sp, #8]
    3eae:	f00a fdd4 	bl	ea5a <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>
    3eb2:	4605      	mov	r5, r0
    3eb4:	7830      	ldrb	r0, [r6, #0]
    3eb6:	28ff      	cmp	r0, #255	; 0xff
    3eb8:	d005      	beq.n	3ec6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b2>
    3eba:	e00d      	b.n	3ed8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c4>
    3ebc:	f640 719b 	movw	r1, #3995	; 0xf9b
    3ec0:	202d      	movs	r0, #45	; 0x2d
    3ec2:	f7fc fd75 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3ec6:	f8d9 1004 	ldr.w	r1, [r9, #4]
    3eca:	f811 0b03 	ldrb.w	r0, [r1], #3
    3ece:	f3c0 1080 	ubfx	r0, r0, #6, #1
    3ed2:	f00a fdc2 	bl	ea5a <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>
    3ed6:	4605      	mov	r5, r0
    3ed8:	f8d9 1004 	ldr.w	r1, [r9, #4]
    3edc:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
    3ee0:	f104 0358 	add.w	r3, r4, #88	; 0x58
    3ee4:	f811 0b03 	ldrb.w	r0, [r1], #3
    3ee8:	f3c0 1080 	ubfx	r0, r0, #6, #1
    3eec:	f009 fdf8 	bl	dae0 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    3ef0:	f8d9 1004 	ldr.w	r1, [r9, #4]
    3ef4:	4680      	mov	r8, r0
    3ef6:	f811 0b03 	ldrb.w	r0, [r1], #3
    3efa:	f3c0 1080 	ubfx	r0, r0, #6, #1
    3efe:	f009 fe87 	bl	dc10 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    3f02:	4681      	mov	r9, r0
    3f04:	f7fe fb1e 	bl	2544 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    3f08:	b138      	cbz	r0, 3f1a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x406>
    3f0a:	4648      	mov	r0, r9
    3f0c:	f7fe fa5c 	bl	23c8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    3f10:	b118      	cbz	r0, 3f1a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x406>
    3f12:	2110      	movs	r1, #16
    3f14:	f00a f836 	bl	df84 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    3f18:	b138      	cbz	r0, 3f2a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x416>
    3f1a:	2100      	movs	r1, #0
    3f1c:	7830      	ldrb	r0, [r6, #0]
    3f1e:	28ff      	cmp	r0, #255	; 0xff
    3f20:	d00c      	beq.n	3f3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x428>
    3f22:	f1b8 0f00 	cmp.w	r8, #0
    3f26:	d105      	bne.n	3f34 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x420>
    3f28:	e001      	b.n	3f2e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x41a>
    3f2a:	2101      	movs	r1, #1
    3f2c:	e7f6      	b.n	3f1c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x408>
    3f2e:	7e62      	ldrb	r2, [r4, #25]
    3f30:	4282      	cmp	r2, r0
    3f32:	d101      	bne.n	3f38 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x424>
    3f34:	2001      	movs	r0, #1
    3f36:	e003      	b.n	3f40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42c>
    3f38:	2000      	movs	r0, #0
    3f3a:	e001      	b.n	3f40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42c>
    3f3c:	ea28 0001 	bic.w	r0, r8, r1
    3f40:	78a2      	ldrb	r2, [r4, #2]
    3f42:	0752      	lsls	r2, r2, #29
    3f44:	d501      	bpl.n	3f4a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x436>
    3f46:	b930      	cbnz	r0, 3f56 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x442>
    3f48:	e008      	b.n	3f5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    3f4a:	b939      	cbnz	r1, 3f5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    3f4c:	b91d      	cbnz	r5, 3f56 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x442>
    3f4e:	7be0      	ldrb	r0, [r4, #15]
    3f50:	b108      	cbz	r0, 3f56 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x442>
    3f52:	42b8      	cmp	r0, r7
    3f54:	d102      	bne.n	3f5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    3f56:	2001      	movs	r0, #1
    3f58:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    3f5c:	2000      	movs	r0, #0
    3f5e:	e7fb      	b.n	3f58 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x444>
    3f60:	20001348 	.word	0x20001348
    3f64:	200000f0 	.word	0x200000f0
    3f68:	b570      	push	{r4, r5, r6, lr}
    3f6a:	4604      	mov	r4, r0
    3f6c:	8e00      	ldrh	r0, [r0, #48]	; 0x30
    3f6e:	4d10      	ldr	r5, [pc, #64]	; (3fb0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x49c>)
    3f70:	1c40      	adds	r0, r0, #1
    3f72:	8620      	strh	r0, [r4, #48]	; 0x30
    3f74:	7ba8      	ldrb	r0, [r5, #14]
    3f76:	2600      	movs	r6, #0
    3f78:	b120      	cbz	r0, 3f84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x470>
    3f7a:	f003 fced 	bl	7958 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3f7e:	f003 fb11 	bl	75a4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    3f82:	73ae      	strb	r6, [r5, #14]
    3f84:	702e      	strb	r6, [r5, #0]
    3f86:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
    3f8a:	b108      	cbz	r0, 3f90 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x47c>
    3f8c:	2101      	movs	r1, #1
    3f8e:	e00a      	b.n	3fa6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x492>
    3f90:	7b60      	ldrb	r0, [r4, #13]
    3f92:	b138      	cbz	r0, 3fa4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x490>
    3f94:	8e21      	ldrh	r1, [r4, #48]	; 0x30
    3f96:	4288      	cmp	r0, r1
    3f98:	d804      	bhi.n	3fa4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x490>
    3f9a:	2101      	movs	r1, #1
    3f9c:	4620      	mov	r0, r4
    3f9e:	f00a ffc8 	bl	ef32 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    3fa2:	bd70      	pop	{r4, r5, r6, pc}
    3fa4:	2100      	movs	r1, #0
    3fa6:	4620      	mov	r0, r4
    3fa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3fac:	f00a bfc1 	b.w	ef32 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    3fb0:	20001348 	.word	0x20001348
    3fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3fb8:	4604      	mov	r4, r0
    3fba:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    3fbe:	8808      	ldrh	r0, [r1, #0]
    3fc0:	f8a4 0076 	strh.w	r0, [r4, #118]	; 0x76
    3fc4:	20ff      	movs	r0, #255	; 0xff
    3fc6:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93
    3fca:	f64f 70ff 	movw	r0, #65535	; 0xffff
    3fce:	4616      	mov	r6, r2
    3fd0:	460d      	mov	r5, r1
    3fd2:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
    3fd6:	2b00      	cmp	r3, #0
    3fd8:	d14b      	bne.n	4072 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x72>
    3fda:	6928      	ldr	r0, [r5, #16]
    3fdc:	f009 fe60 	bl	dca0 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    3fe0:	f8a4 008c 	strh.w	r0, [r4, #140]	; 0x8c
    3fe4:	8b28      	ldrh	r0, [r5, #24]
    3fe6:	f8a4 008e 	strh.w	r0, [r4, #142]	; 0x8e
    3fea:	8b68      	ldrh	r0, [r5, #26]
    3fec:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    3ff0:	f895 021b 	ldrb.w	r0, [r5, #539]	; 0x21b
    3ff4:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
    3ff8:	7e20      	ldrb	r0, [r4, #24]
    3ffa:	f104 0151 	add.w	r1, r4, #81	; 0x51
    3ffe:	460f      	mov	r7, r1
    4000:	2500      	movs	r5, #0
    4002:	b120      	cbz	r0, 400e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xe>
    4004:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    4008:	f00a fd53 	bl	eab2 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    400c:	b940      	cbnz	r0, 4020 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x20>
    400e:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    4012:	b170      	cbz	r0, 4032 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x32>
    4014:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    4018:	4639      	mov	r1, r7
    401a:	f00a fd41 	bl	eaa0 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x46>
    401e:	b140      	cbz	r0, 4032 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x32>
    4020:	f8d4 0051 	ldr.w	r0, [r4, #81]	; 0x51
    4024:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    4028:	f8b4 0055 	ldrh.w	r0, [r4, #85]	; 0x55
    402c:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
    4030:	e003      	b.n	403a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3a>
    4032:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    4036:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
    403a:	4815      	ldr	r0, [pc, #84]	; (4090 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x90>)
    403c:	2eff      	cmp	r6, #255	; 0xff
    403e:	6840      	ldr	r0, [r0, #4]
    4040:	7801      	ldrb	r1, [r0, #0]
    4042:	f3c1 1180 	ubfx	r1, r1, #6, #1
    4046:	f884 1079 	strb.w	r1, [r4, #121]	; 0x79
    404a:	f850 1f03 	ldr.w	r1, [r0, #3]!
    404e:	d017      	beq.n	4080 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x80>
    4050:	f8c4 1086 	str.w	r1, [r4, #134]	; 0x86
    4054:	8880      	ldrh	r0, [r0, #4]
    4056:	f8a4 008a 	strh.w	r0, [r4, #138]	; 0x8a
    405a:	f104 027a 	add.w	r2, r4, #122	; 0x7a
    405e:	1e51      	subs	r1, r2, #1
    4060:	4630      	mov	r0, r6
    4062:	f7fe f9dd 	bl	2420 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    4066:	b130      	cbz	r0, 4076 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x76>
    4068:	f814 0f79 	ldrb.w	r0, [r4, #121]!
    406c:	f040 0002 	orr.w	r0, r0, #2
    4070:	7020      	strb	r0, [r4, #0]
    4072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4076:	f640 418b 	movw	r1, #3211	; 0xc8b
    407a:	202d      	movs	r0, #45	; 0x2d
    407c:	f7fc fc98 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4080:	f844 1f7a 	str.w	r1, [r4, #122]!
    4084:	8880      	ldrh	r0, [r0, #4]
    4086:	80a0      	strh	r0, [r4, #4]
    4088:	60e5      	str	r5, [r4, #12]
    408a:	8225      	strh	r5, [r4, #16]
    408c:	e7f1      	b.n	4072 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x72>
    408e:	0000      	.short	0x0000
    4090:	200000f0 	.word	0x200000f0
    4094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4096:	4604      	mov	r4, r0
    4098:	20ff      	movs	r0, #255	; 0xff
    409a:	f88d 0000 	strb.w	r0, [sp]
    409e:	2601      	movs	r6, #1
    40a0:	466a      	mov	r2, sp
    40a2:	2105      	movs	r1, #5
    40a4:	4620      	mov	r0, r4
    40a6:	f7ff fed1 	bl	3e4c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x338>
    40aa:	b160      	cbz	r0, 40c6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc6>
    40ac:	4d28      	ldr	r5, [pc, #160]	; (4150 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x150>)
    40ae:	4f27      	ldr	r7, [pc, #156]	; (414c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x14c>)
    40b0:	6869      	ldr	r1, [r5, #4]
    40b2:	7bfa      	ldrb	r2, [r7, #15]
    40b4:	f107 0310 	add.w	r3, r7, #16
    40b8:	f811 0b03 	ldrb.w	r0, [r1], #3
    40bc:	f3c0 1080 	ubfx	r0, r0, #6, #1
    40c0:	f009 fd0e 	bl	dae0 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    40c4:	b110      	cbz	r0, 40cc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xcc>
    40c6:	2600      	movs	r6, #0
    40c8:	4630      	mov	r0, r6
    40ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    40cc:	686a      	ldr	r2, [r5, #4]
    40ce:	69e0      	ldr	r0, [r4, #28]
    40d0:	7812      	ldrb	r2, [r2, #0]
    40d2:	f810 1fa5 	ldrb.w	r1, [r0, #165]!
    40d6:	f3c2 1240 	ubfx	r2, r2, #5, #1
    40da:	4011      	ands	r1, r2
    40dc:	7001      	strb	r1, [r0, #0]
    40de:	2201      	movs	r2, #1
    40e0:	4620      	mov	r0, r4
    40e2:	69e1      	ldr	r1, [r4, #28]
    40e4:	f000 f89a 	bl	421c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x21c>
    40e8:	2300      	movs	r3, #0
    40ea:	f89d 2000 	ldrb.w	r2, [sp]
    40ee:	4620      	mov	r0, r4
    40f0:	69e1      	ldr	r1, [r4, #28]
    40f2:	f7ff ff5f 	bl	3fb4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a0>
    40f6:	2202      	movs	r2, #2
    40f8:	4916      	ldr	r1, [pc, #88]	; (4154 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x154>)
    40fa:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    40fe:	f00a f97d 	bl	e3fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    4102:	69e0      	ldr	r0, [r4, #28]
    4104:	2202      	movs	r2, #2
    4106:	8801      	ldrh	r1, [r0, #0]
    4108:	f8a4 10b0 	strh.w	r1, [r4, #176]	; 0xb0
    410c:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    4110:	f884 00b2 	strb.w	r0, [r4, #178]	; 0xb2
    4114:	4910      	ldr	r1, [pc, #64]	; (4158 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x158>)
    4116:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
    411a:	f00a f96f 	bl	e3fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    411e:	2100      	movs	r1, #0
    4120:	69e0      	ldr	r0, [r4, #28]
    4122:	7039      	strb	r1, [r7, #0]
    4124:	460a      	mov	r2, r1
    4126:	4621      	mov	r1, r4
    4128:	f000 fa7a 	bl	4620 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
    412c:	6868      	ldr	r0, [r5, #4]
    412e:	69e1      	ldr	r1, [r4, #28]
    4130:	f8d0 2003 	ldr.w	r2, [r0, #3]
    4134:	f841 2f03 	str.w	r2, [r1, #3]!
    4138:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    413c:	808a      	strh	r2, [r1, #4]
    413e:	7800      	ldrb	r0, [r0, #0]
    4140:	69e1      	ldr	r1, [r4, #28]
    4142:	f3c0 1080 	ubfx	r0, r0, #6, #1
    4146:	7088      	strb	r0, [r1, #2]
    4148:	e7be      	b.n	40c8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc8>
    414a:	0000      	.short	0x0000
    414c:	20001348 	.word	0x20001348
    4150:	200000f0 	.word	0x200000f0
    4154:	0000ecb7 	.word	0x0000ecb7
    4158:	0000eca7 	.word	0x0000eca7
    415c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    415e:	4604      	mov	r4, r0
    4160:	20ff      	movs	r0, #255	; 0xff
    4162:	f88d 0000 	strb.w	r0, [sp]
    4166:	2501      	movs	r5, #1
    4168:	466a      	mov	r2, sp
    416a:	2103      	movs	r1, #3
    416c:	4620      	mov	r0, r4
    416e:	f7ff fe6d 	bl	3e4c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x338>
    4172:	b1e8      	cbz	r0, 41b0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1b0>
    4174:	7b20      	ldrb	r0, [r4, #12]
    4176:	b120      	cbz	r0, 4182 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x182>
    4178:	f89d 1000 	ldrb.w	r1, [sp]
    417c:	4620      	mov	r0, r4
    417e:	f7ff fe17 	bl	3db0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x29c>
    4182:	4e0d      	ldr	r6, [pc, #52]	; (41b8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1b8>)
    4184:	2100      	movs	r1, #0
    4186:	6870      	ldr	r0, [r6, #4]
    4188:	8001      	strh	r1, [r0, #0]
    418a:	2104      	movs	r1, #4
    418c:	f009 ffb4 	bl	e0f8 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    4190:	4620      	mov	r0, r4
    4192:	f000 f88b 	bl	42ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2ac>
    4196:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    419a:	6c21      	ldr	r1, [r4, #64]	; 0x40
    419c:	6870      	ldr	r0, [r6, #4]
    419e:	f009 ffe2 	bl	e166 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>
    41a2:	4906      	ldr	r1, [pc, #24]	; (41bc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1bc>)
    41a4:	2005      	movs	r0, #5
    41a6:	7008      	strb	r0, [r1, #0]
    41a8:	6870      	ldr	r0, [r6, #4]
    41aa:	f003 fe69 	bl	7e80 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    41ae:	e000      	b.n	41b2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1b2>
    41b0:	2500      	movs	r5, #0
    41b2:	4628      	mov	r0, r5
    41b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    41b6:	0000      	.short	0x0000
    41b8:	200000f0 	.word	0x200000f0
    41bc:	20001348 	.word	0x20001348
    41c0:	b570      	push	{r4, r5, r6, lr}
    41c2:	4604      	mov	r4, r0
    41c4:	460e      	mov	r6, r1
    41c6:	7e40      	ldrb	r0, [r0, #25]
    41c8:	f7fe f8fe 	bl	23c8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    41cc:	0005      	movs	r5, r0
    41ce:	d019      	beq.n	4204 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x204>
    41d0:	2110      	movs	r1, #16
    41d2:	f009 fed7 	bl	df84 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    41d6:	2800      	cmp	r0, #0
    41d8:	d114      	bne.n	4204 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x204>
    41da:	2001      	movs	r0, #1
    41dc:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    41e0:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    41e4:	4632      	mov	r2, r6
    41e6:	460c      	mov	r4, r1
    41e8:	4628      	mov	r0, r5
    41ea:	f009 fca9 	bl	db40 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    41ee:	4621      	mov	r1, r4
    41f0:	4c05      	ldr	r4, [pc, #20]	; (4208 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x208>)
    41f2:	6860      	ldr	r0, [r4, #4]
    41f4:	f009 ff9b 	bl	e12e <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    41f8:	6860      	ldr	r0, [r4, #4]
    41fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    41fe:	2101      	movs	r1, #1
    4200:	f009 bf9b 	b.w	e13a <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    4204:	bd70      	pop	{r4, r5, r6, pc}
    4206:	0000      	.short	0x0000
    4208:	200000f0 	.word	0x200000f0
    420c:	4802      	ldr	r0, [pc, #8]	; (4218 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x218>)
    420e:	2101      	movs	r1, #1
    4210:	6800      	ldr	r0, [r0, #0]
    4212:	f7ff baf9 	b.w	3808 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    4216:	0000      	.short	0x0000
    4218:	200000f0 	.word	0x200000f0
    421c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4220:	4e21      	ldr	r6, [pc, #132]	; (42a8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2a8>)
    4222:	4680      	mov	r8, r0
    4224:	460c      	mov	r4, r1
    4226:	6870      	ldr	r0, [r6, #4]
    4228:	4615      	mov	r5, r2
    422a:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    422e:	6161      	str	r1, [r4, #20]
    4230:	6841      	ldr	r1, [r0, #4]
    4232:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    4236:	61e1      	str	r1, [r4, #28]
    4238:	8940      	ldrh	r0, [r0, #10]
    423a:	f009 fd2d 	bl	dc98 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    423e:	4607      	mov	r7, r0
    4240:	6120      	str	r0, [r4, #16]
    4242:	6870      	ldr	r0, [r6, #4]
    4244:	4639      	mov	r1, r7
    4246:	7d80      	ldrb	r0, [r0, #22]
    4248:	f009 fe93 	bl	df72 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    424c:	84a0      	strh	r0, [r4, #36]	; 0x24
    424e:	6870      	ldr	r0, [r6, #4]
    4250:	4639      	mov	r1, r7
    4252:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    4256:	f009 fe88 	bl	df6a <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    425a:	6220      	str	r0, [r4, #32]
    425c:	6870      	ldr	r0, [r6, #4]
    425e:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    4262:	8321      	strh	r1, [r4, #24]
    4264:	8841      	ldrh	r1, [r0, #2]
    4266:	8361      	strh	r1, [r4, #26]
    4268:	6841      	ldr	r1, [r0, #4]
    426a:	f8c4 10a6 	str.w	r1, [r4, #166]	; 0xa6
    426e:	7a01      	ldrb	r1, [r0, #8]
    4270:	f884 10aa 	strb.w	r1, [r4, #170]	; 0xaa
    4274:	7a41      	ldrb	r1, [r0, #9]
    4276:	f001 011f 	and.w	r1, r1, #31
    427a:	f884 10b1 	strb.w	r1, [r4, #177]	; 0xb1
    427e:	7a40      	ldrb	r0, [r0, #9]
    4280:	0940      	lsrs	r0, r0, #5
    4282:	f884 021b 	strb.w	r0, [r4, #539]	; 0x21b
    4286:	f104 0062 	add.w	r0, r4, #98	; 0x62
    428a:	7205      	strb	r5, [r0, #8]
    428c:	7245      	strb	r5, [r0, #9]
    428e:	21ff      	movs	r1, #255	; 0xff
    4290:	7281      	strb	r1, [r0, #10]
    4292:	2100      	movs	r1, #0
    4294:	3836      	subs	r0, #54	; 0x36
    4296:	f00a f924 	bl	e4e2 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    429a:	f998 100e 	ldrsb.w	r1, [r8, #14]
    429e:	4620      	mov	r0, r4
    42a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    42a4:	f009 bdcc 	b.w	de40 <sym_AIEQYZJFZQBQ5LEMJNMQV56TMLIGCBAC63QLHGI>
    42a8:	200000f0 	.word	0x200000f0
    42ac:	b570      	push	{r4, r5, r6, lr}
    42ae:	4d07      	ldr	r5, [pc, #28]	; (42cc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2cc>)
    42b0:	4604      	mov	r4, r0
    42b2:	f100 0151 	add.w	r1, r0, #81	; 0x51
    42b6:	6868      	ldr	r0, [r5, #4]
    42b8:	f009 ff46 	bl	e148 <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
    42bc:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
    42c0:	6868      	ldr	r0, [r5, #4]
    42c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    42c6:	f009 bf45 	b.w	e154 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
    42ca:	0000      	.short	0x0000
    42cc:	200000f0 	.word	0x200000f0
    42d0:	00003a95 	.word	0x00003a95
    42d4:	0000391d 	.word	0x0000391d
    42d8:	00003a11 	.word	0x00003a11
    42dc:	00000000 	.word	0x00000000
    42e0:	000039e9 	.word	0x000039e9
    42e4:	00003a41 	.word	0x00003a41
    42e8:	0000ec9b 	.word	0x0000ec9b
    42ec:	0000eca1 	.word	0x0000eca1
    42f0:	00003ca5 	.word	0x00003ca5
    42f4:	00003cc9 	.word	0x00003cc9
    42f8:	0000420d 	.word	0x0000420d
    42fc:	000042ec 	.word	0x000042ec
    4300:	000042e4 	.word	0x000042e4
    4304:	000042e0 	.word	0x000042e0

00004308 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    4308:	b510      	push	{r4, lr}
    430a:	1e42      	subs	r2, r0, #1
    430c:	2a02      	cmp	r2, #2
    430e:	d901      	bls.n	4314 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    4310:	21ca      	movs	r1, #202	; 0xca
    4312:	e009      	b.n	4328 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    4314:	1e40      	subs	r0, r0, #1
    4316:	2910      	cmp	r1, #16
    4318:	d009      	beq.n	432e <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    431a:	2912      	cmp	r1, #18
    431c:	d00c      	beq.n	4338 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    431e:	2913      	cmp	r1, #19
    4320:	d00a      	beq.n	4338 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    4322:	2915      	cmp	r1, #21
    4324:	d005      	beq.n	4332 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    4326:	21d8      	movs	r1, #216	; 0xd8
    4328:	202f      	movs	r0, #47	; 0x2f
    432a:	f7fc fb41 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    432e:	4905      	ldr	r1, [pc, #20]	; (4344 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    4330:	e004      	b.n	433c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    4332:	4904      	ldr	r1, [pc, #16]	; (4344 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    4334:	1d89      	adds	r1, r1, #6
    4336:	e001      	b.n	433c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    4338:	4902      	ldr	r1, [pc, #8]	; (4344 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    433a:	1f89      	subs	r1, r1, #6
    433c:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    4340:	bd10      	pop	{r4, pc}
    4342:	0000      	.short	0x0000
    4344:	0000ef02 	.word	0x0000ef02

00004348 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    4348:	1e42      	subs	r2, r0, #1
    434a:	b510      	push	{r4, lr}
    434c:	b2d2      	uxtb	r2, r2
    434e:	2a01      	cmp	r2, #1
    4350:	d903      	bls.n	435a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    4352:	291d      	cmp	r1, #29
    4354:	d001      	beq.n	435a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    4356:	21ee      	movs	r1, #238	; 0xee
    4358:	e00d      	b.n	4376 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    435a:	2913      	cmp	r1, #19
    435c:	d013      	beq.n	4386 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    435e:	dc04      	bgt.n	436a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    4360:	2910      	cmp	r1, #16
    4362:	d00b      	beq.n	437c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    4364:	2912      	cmp	r1, #18
    4366:	d104      	bne.n	4372 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    4368:	e00d      	b.n	4386 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    436a:	2915      	cmp	r1, #21
    436c:	d008      	beq.n	4380 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    436e:	291d      	cmp	r1, #29
    4370:	d00e      	beq.n	4390 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    4372:	f44f 7181 	mov.w	r1, #258	; 0x102
    4376:	202f      	movs	r0, #47	; 0x2f
    4378:	f7fc fb1a 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    437c:	4807      	ldr	r0, [pc, #28]	; (439c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    437e:	e004      	b.n	438a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    4380:	4806      	ldr	r0, [pc, #24]	; (439c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    4382:	3008      	adds	r0, #8
    4384:	e001      	b.n	438a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    4386:	4805      	ldr	r0, [pc, #20]	; (439c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    4388:	1d00      	adds	r0, r0, #4
    438a:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    438e:	bd10      	pop	{r4, pc}
    4390:	f240 315a 	movw	r1, #858	; 0x35a
    4394:	fb10 f001 	smulbb	r0, r0, r1
    4398:	bd10      	pop	{r4, pc}
    439a:	0000      	.short	0x0000
    439c:	0000eef0 	.word	0x0000eef0

000043a0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    43a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    43a4:	4604      	mov	r4, r0
    43a6:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    43aa:	4616      	mov	r6, r2
    43ac:	460f      	mov	r7, r1
    43ae:	2800      	cmp	r0, #0
    43b0:	d15e      	bne.n	4470 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    43b2:	4621      	mov	r1, r4
    43b4:	484d      	ldr	r0, [pc, #308]	; (44ec <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x14c>)
    43b6:	f006 fd3b 	bl	ae30 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    43ba:	4605      	mov	r5, r0
    43bc:	2820      	cmp	r0, #32
    43be:	d057      	beq.n	4470 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    43c0:	2250      	movs	r2, #80	; 0x50
    43c2:	2100      	movs	r1, #0
    43c4:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    43c8:	f00c fdd7 	bl	10f7a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    43cc:	f884 50c8 	strb.w	r5, [r4, #200]	; 0xc8
    43d0:	2501      	movs	r5, #1
    43d2:	f8c4 70cc 	str.w	r7, [r4, #204]	; 0xcc
    43d6:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
    43da:	b137      	cbz	r7, 43ea <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4a>
    43dc:	f7fe fdf0 	bl	2fc0 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    43e0:	f000 0007 	and.w	r0, r0, #7
    43e4:	1c40      	adds	r0, r0, #1
    43e6:	f887 024c 	strb.w	r0, [r7, #588]	; 0x24c
    43ea:	4620      	mov	r0, r4
    43ec:	f00a ff4e 	bl	f28c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2da>
    43f0:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    43f4:	2002      	movs	r0, #2
    43f6:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    43fa:	46a8      	mov	r8, r5
    43fc:	f884 50f3 	strb.w	r5, [r4, #243]	; 0xf3
    4400:	2500      	movs	r5, #0
    4402:	f804 5fe8 	strb.w	r5, [r4, #232]!
    4406:	f007 fe79 	bl	c0fc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    440a:	4607      	mov	r7, r0
    440c:	f00c fba0 	bl	10b50 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    4410:	8921      	ldrh	r1, [r4, #8]
    4412:	3ce8      	subs	r4, #232	; 0xe8
    4414:	4288      	cmp	r0, r1
    4416:	d800      	bhi.n	441a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x7a>
    4418:	4608      	mov	r0, r1
    441a:	4438      	add	r0, r7
    441c:	30ce      	adds	r0, #206	; 0xce
    441e:	b287      	uxth	r7, r0
    4420:	4620      	mov	r0, r4
    4422:	f00a fbf9 	bl	ec18 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    4426:	b330      	cbz	r0, 4476 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd6>
    4428:	f00c f982 	bl	10730 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    442c:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    4430:	b281      	uxth	r1, r0
    4432:	4630      	mov	r0, r6
    4434:	f007 ff82 	bl	c33c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4438:	4430      	add	r0, r6
    443a:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    443e:	3490      	adds	r4, #144	; 0x90
    4440:	f00c fb8f 	bl	10b62 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4444:	19c0      	adds	r0, r0, r7
    4446:	4169      	adcs	r1, r5
    4448:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    444c:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
    4450:	f824 5c6e 	strh.w	r5, [r4, #-110]
    4454:	2001      	movs	r0, #1
    4456:	f00a fd44 	bl	eee2 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    445a:	f200 1015 	addw	r0, r0, #277	; 0x115
    445e:	1a30      	subs	r0, r6, r0
    4460:	6460      	str	r0, [r4, #68]	; 0x44
    4462:	f04f 30ff 	mov.w	r0, #4294967295
    4466:	0841      	lsrs	r1, r0, #1
    4468:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    446c:	3c90      	subs	r4, #144	; 0x90
    446e:	e025      	b.n	44bc <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x11c>
    4470:	200c      	movs	r0, #12
    4472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4476:	2100      	movs	r1, #0
    4478:	4620      	mov	r0, r4
    447a:	f00a fe5b 	bl	f134 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
    447e:	f8df 8070 	ldr.w	r8, [pc, #112]	; 44f0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x150>
    4482:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    4486:	2000      	movs	r0, #0
    4488:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    448c:	b149      	cbz	r1, 44a2 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x102>
    448e:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    4490:	b139      	cbz	r1, 44a2 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x102>
    4492:	f7fe fd95 	bl	2fc0 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    4496:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    449a:	fbb0 f2f1 	udiv	r2, r0, r1
    449e:	fb01 0012 	mls	r0, r1, r2, r0
    44a2:	4407      	add	r7, r0
    44a4:	f00c fb5d 	bl	10b62 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    44a8:	19c0      	adds	r0, r0, r7
    44aa:	4169      	adcs	r1, r5
    44ac:	e9c4 013e 	strd	r0, r1, [r4, #248]	; 0xf8
    44b0:	b19e      	cbz	r6, 44da <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x13a>
    44b2:	1980      	adds	r0, r0, r6
    44b4:	eb51 0105 	adcs.w	r1, r1, r5
    44b8:	e9c4 0142 	strd	r0, r1, [r4, #264]	; 0x108
    44bc:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    44c0:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    44c4:	f00a fee0 	bl	f288 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d6>
    44c8:	b158      	cbz	r0, 44e2 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x142>
    44ca:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    44ce:	2100      	movs	r1, #0
    44d0:	4620      	mov	r0, r4
    44d2:	f00a fbd1 	bl	ec78 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    44d6:	2000      	movs	r0, #0
    44d8:	e7cb      	b.n	4472 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd2>
    44da:	f04f 30ff 	mov.w	r0, #4294967295
    44de:	0841      	lsrs	r1, r0, #1
    44e0:	e7ea      	b.n	44b8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x118>
    44e2:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
    44e6:	2030      	movs	r0, #48	; 0x30
    44e8:	f7fc fa62 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    44ec:	0000f36d 	.word	0x0000f36d
    44f0:	20000100 	.word	0x20000100

000044f4 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>:
    44f4:	4901      	ldr	r1, [pc, #4]	; (44fc <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ+0x8>)
    44f6:	8088      	strh	r0, [r1, #4]
    44f8:	4770      	bx	lr
    44fa:	0000      	.short	0x0000
    44fc:	20000100 	.word	0x20000100

00004500 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    4500:	4805      	ldr	r0, [pc, #20]	; (4518 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x18>)
    4502:	2100      	movs	r1, #0
    4504:	7001      	strb	r1, [r0, #0]
    4506:	2201      	movs	r2, #1
    4508:	7082      	strb	r2, [r0, #2]
    450a:	7041      	strb	r1, [r0, #1]
    450c:	f242 7110 	movw	r1, #10000	; 0x2710
    4510:	8081      	strh	r1, [r0, #4]
    4512:	f000 b803 	b.w	451c <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    4516:	0000      	.short	0x0000
    4518:	20000100 	.word	0x20000100

0000451c <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    451c:	b51c      	push	{r2, r3, r4, lr}
    451e:	4909      	ldr	r1, [pc, #36]	; (4544 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x28>)
    4520:	e9d1 0100 	ldrd	r0, r1, [r1]
    4524:	e9cd 0100 	strd	r0, r1, [sp]
    4528:	e002      	b.n	4530 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x14>
    452a:	9800      	ldr	r0, [sp, #0]
    452c:	f00a fd15 	bl	ef5a <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    4530:	4668      	mov	r0, sp
    4532:	f7fc fdbd 	bl	10b0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    4536:	2800      	cmp	r0, #0
    4538:	d0f7      	beq.n	452a <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xe>
    453a:	f000 f8c7 	bl	46cc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xac>
    453e:	2000      	movs	r0, #0
    4540:	bd1c      	pop	{r2, r3, r4, pc}
    4542:	0000      	.short	0x0000
    4544:	00004e64 	.word	0x00004e64

00004548 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    4548:	4901      	ldr	r1, [pc, #4]	; (4550 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    454a:	7008      	strb	r0, [r1, #0]
    454c:	4770      	bx	lr
    454e:	0000      	.short	0x0000
    4550:	20000100 	.word	0x20000100

00004554 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
    4554:	4908      	ldr	r1, [pc, #32]	; (4578 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x24>)
    4556:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    455a:	fbb1 f1f2 	udiv	r1, r1, r2
    455e:	b510      	push	{r4, lr}
    4560:	f501 7128 	add.w	r1, r1, #672	; 0x2a0
    4564:	f009 ffd6 	bl	e514 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    4568:	f640 0148 	movw	r1, #2120	; 0x848
    456c:	4288      	cmp	r0, r1
    456e:	d300      	bcc.n	4572 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x1e>
    4570:	4608      	mov	r0, r1
    4572:	b280      	uxth	r0, r0
    4574:	bd10      	pop	{r4, pc}
    4576:	0000      	.short	0x0000
    4578:	0001527d 	.word	0x0001527d

0000457c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    457c:	b510      	push	{r4, lr}
    457e:	f003 fb93 	bl	7ca8 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    4582:	4905      	ldr	r1, [pc, #20]	; (4598 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x1c>)
    4584:	688a      	ldr	r2, [r1, #8]
    4586:	4290      	cmp	r0, r2
    4588:	d801      	bhi.n	458e <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x12>
    458a:	7848      	ldrb	r0, [r1, #1]
    458c:	b108      	cbz	r0, 4592 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x16>
    458e:	2000      	movs	r0, #0
    4590:	bd10      	pop	{r4, pc}
    4592:	2001      	movs	r0, #1
    4594:	bd10      	pop	{r4, pc}
    4596:	0000      	.short	0x0000
    4598:	20000100 	.word	0x20000100

0000459c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    459c:	b510      	push	{r4, lr}
    459e:	4604      	mov	r4, r0
    45a0:	2906      	cmp	r1, #6
    45a2:	d238      	bcs.n	4616 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7a>
    45a4:	e8df f001 	tbb	[pc, r1]
    45a8:	14031105 	.word	0x14031105
    45ac:	3215      	.short	0x3215
    45ae:	2100      	movs	r1, #0
    45b0:	e006      	b.n	45c0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x24>
    45b2:	f8d4 02ac 	ldr.w	r0, [r4, #684]	; 0x2ac
    45b6:	b110      	cbz	r0, 45be <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x22>
    45b8:	4620      	mov	r0, r4
    45ba:	f00a fdf8 	bl	f1ae <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1fc>
    45be:	2101      	movs	r1, #1
    45c0:	4620      	mov	r0, r4
    45c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    45c6:	f000 b97f 	b.w	48c8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2a8>
    45ca:	2003      	movs	r0, #3
    45cc:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    45d0:	bd10      	pop	{r4, pc}
    45d2:	f003 fb75 	bl	7cc0 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    45d6:	f8c4 02ac 	str.w	r0, [r4, #684]	; 0x2ac
    45da:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    45de:	f003 fc33 	bl	7e48 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    45e2:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    45e6:	4288      	cmp	r0, r1
    45e8:	d904      	bls.n	45f4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x58>
    45ea:	f240 31e3 	movw	r1, #995	; 0x3e3
    45ee:	2030      	movs	r0, #48	; 0x30
    45f0:	f7fc f9de 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    45f4:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    45f8:	f003 fc26 	bl	7e48 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    45fc:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    4600:	1a08      	subs	r0, r1, r0
    4602:	4906      	ldr	r1, [pc, #24]	; (461c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x80>)
    4604:	688a      	ldr	r2, [r1, #8]
    4606:	4410      	add	r0, r2
    4608:	6088      	str	r0, [r1, #8]
    460a:	bd10      	pop	{r4, pc}
    460c:	4620      	mov	r0, r4
    460e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4612:	f00a bdb9 	b.w	f188 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d6>
    4616:	f240 7199 	movw	r1, #1945	; 0x799
    461a:	e7e8      	b.n	45ee <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x52>
    461c:	20000100 	.word	0x20000100

00004620 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>:
    4620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4624:	460c      	mov	r4, r1
    4626:	4680      	mov	r8, r0
    4628:	b112      	cbz	r2, 4630 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x10>
    462a:	f240 71c3 	movw	r1, #1987	; 0x7c3
    462e:	e037      	b.n	46a0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x80>
    4630:	f003 fb3a 	bl	7ca8 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    4634:	4607      	mov	r7, r0
    4636:	2000      	movs	r0, #0
    4638:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
    463c:	e9d4 563e 	ldrd	r5, r6, [r4, #248]	; 0xf8
    4640:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
    4644:	2001      	movs	r0, #1
    4646:	f884 00e1 	strb.w	r0, [r4, #225]	; 0xe1
    464a:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    464e:	2101      	movs	r1, #1
    4650:	34c8      	adds	r4, #200	; 0xc8
    4652:	f7fe f859 	bl	2708 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    4656:	f854 0f04 	ldr.w	r0, [r4, #4]!
    465a:	f8c0 5290 	str.w	r5, [r0, #656]	; 0x290
    465e:	f8c0 6294 	str.w	r6, [r0, #660]	; 0x294
    4662:	6821      	ldr	r1, [r4, #0]
    4664:	f814 0c04 	ldrb.w	r0, [r4, #-4]
    4668:	f881 02a4 	strb.w	r0, [r1, #676]	; 0x2a4
    466c:	6820      	ldr	r0, [r4, #0]
    466e:	f8c0 72a8 	str.w	r7, [r0, #680]	; 0x2a8
    4672:	6820      	ldr	r0, [r4, #0]
    4674:	e9c0 56a6 	strd	r5, r6, [r0, #664]	; 0x298
    4678:	f854 09cc 	ldr.w	r0, [r4], #-204
    467c:	f00a ff1f 	bl	f4be <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x50c>
    4680:	b110      	cbz	r0, 4688 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x68>
    4682:	f44f 61ea 	mov.w	r1, #1872	; 0x750
    4686:	e00b      	b.n	46a0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x80>
    4688:	f00a fd8a 	bl	f1a0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>
    468c:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    4690:	4642      	mov	r2, r8
    4692:	4906      	ldr	r1, [pc, #24]	; (46ac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x8c>)
    4694:	f006 fa84 	bl	aba0 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    4698:	2800      	cmp	r0, #0
    469a:	d104      	bne.n	46a6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x86>
    469c:	f240 71ac 	movw	r1, #1964	; 0x7ac
    46a0:	2030      	movs	r0, #48	; 0x30
    46a2:	f7fc f985 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    46aa:	0000      	.short	0x0000
    46ac:	0000f3d9 	.word	0x0000f3d9
    46b0:	b510      	push	{r4, lr}
    46b2:	280c      	cmp	r0, #12
    46b4:	d304      	bcc.n	46c0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa0>
    46b6:	f240 318a 	movw	r1, #906	; 0x38a
    46ba:	2006      	movs	r0, #6
    46bc:	f7fc f978 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46c0:	4901      	ldr	r1, [pc, #4]	; (46c8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa8>)
    46c2:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    46c6:	bd10      	pop	{r4, pc}
    46c8:	00004e80 	.word	0x00004e80
    46cc:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    46d0:	4d16      	ldr	r5, [pc, #88]	; (472c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x10c>)
    46d2:	2001      	movs	r0, #1
    46d4:	7068      	strb	r0, [r5, #1]
    46d6:	2400      	movs	r4, #0
    46d8:	f64f 76ff 	movw	r6, #65535	; 0xffff
    46dc:	e00b      	b.n	46f6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xd6>
    46de:	2100      	movs	r1, #0
    46e0:	f7fc fc94 	bl	100c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    46e4:	0007      	movs	r7, r0
    46e6:	d009      	beq.n	46fc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xdc>
    46e8:	f897 02a4 	ldrb.w	r0, [r7, #676]	; 0x2a4
    46ec:	f006 fa88 	bl	ac00 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    46f0:	4638      	mov	r0, r7
    46f2:	f00a fe2e 	bl	f352 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3a0>
    46f6:	9400      	str	r4, [sp, #0]
    46f8:	9401      	str	r4, [sp, #4]
    46fa:	e00e      	b.n	471a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xfa>
    46fc:	f44f 7191 	mov.w	r1, #290	; 0x122
    4700:	2030      	movs	r0, #48	; 0x30
    4702:	f7fc f955 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4706:	9800      	ldr	r0, [sp, #0]
    4708:	b138      	cbz	r0, 471a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xfa>
    470a:	f890 12a4 	ldrb.w	r1, [r0, #676]	; 0x2a4
    470e:	2920      	cmp	r1, #32
    4710:	d003      	beq.n	471a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xfa>
    4712:	8800      	ldrh	r0, [r0, #0]
    4714:	42b0      	cmp	r0, r6
    4716:	d1e2      	bne.n	46de <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xbe>
    4718:	e004      	b.n	4724 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x104>
    471a:	4668      	mov	r0, sp
    471c:	f7fc fcc8 	bl	10b0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    4720:	2800      	cmp	r0, #0
    4722:	d0f0      	beq.n	4706 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xe6>
    4724:	706c      	strb	r4, [r5, #1]
    4726:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    472a:	0000      	.short	0x0000
    472c:	20000100 	.word	0x20000100
    4730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4734:	4604      	mov	r4, r0
    4736:	4839      	ldr	r0, [pc, #228]	; (481c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1fc>)
    4738:	461e      	mov	r6, r3
    473a:	4690      	mov	r8, r2
    473c:	7880      	ldrb	r0, [r0, #2]
    473e:	4689      	mov	r9, r1
    4740:	2500      	movs	r5, #0
    4742:	2800      	cmp	r0, #0
    4744:	d063      	beq.n	480e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ee>
    4746:	f007 fdaf 	bl	c2a8 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    474a:	b3e0      	cbz	r0, 47c6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a6>
    474c:	f8b4 0248 	ldrh.w	r0, [r4, #584]	; 0x248
    4750:	2802      	cmp	r0, #2
    4752:	d35c      	bcc.n	480e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ee>
    4754:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    4758:	2802      	cmp	r0, #2
    475a:	d058      	beq.n	480e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ee>
    475c:	f894 0272 	ldrb.w	r0, [r4, #626]	; 0x272
    4760:	bb88      	cbnz	r0, 47c6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a6>
    4762:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    4766:	f7ff ffa3 	bl	46b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x90>
    476a:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    476e:	b281      	uxth	r1, r0
    4770:	8031      	strh	r1, [r6, #0]
    4772:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    4776:	2700      	movs	r7, #0
    4778:	2801      	cmp	r0, #1
    477a:	d00d      	beq.n	4798 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x178>
    477c:	6920      	ldr	r0, [r4, #16]
    477e:	f007 fddd 	bl	c33c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4782:	f8b4 2236 	ldrh.w	r2, [r4, #566]	; 0x236
    4786:	4442      	add	r2, r8
    4788:	eba2 0109 	sub.w	r1, r2, r9
    478c:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
    4790:	1a82      	subs	r2, r0, r2
    4792:	fb01 7502 	mla	r5, r1, r2, r7
    4796:	e035      	b.n	4804 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1e4>
    4798:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
    479c:	2803      	cmp	r0, #3
    479e:	d039      	beq.n	4814 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f4>
    47a0:	2101      	movs	r1, #1
    47a2:	2000      	movs	r0, #0
    47a4:	f009 fb3a 	bl	de1c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    47a8:	6a21      	ldr	r1, [r4, #32]
    47aa:	1847      	adds	r7, r0, r1
    47ac:	8831      	ldrh	r1, [r6, #0]
    47ae:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    47b2:	f007 fdc3 	bl	c33c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    47b6:	f8d4 2250 	ldr.w	r2, [r4, #592]	; 0x250
    47ba:	f8d4 1258 	ldr.w	r1, [r4, #600]	; 0x258
    47be:	1a82      	subs	r2, r0, r2
    47c0:	fb01 5502 	mla	r5, r1, r2, r5
    47c4:	e000      	b.n	47c8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a8>
    47c6:	e022      	b.n	480e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ee>
    47c8:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    47cc:	8831      	ldrh	r1, [r6, #0]
    47ce:	4638      	mov	r0, r7
    47d0:	f007 fdb4 	bl	c33c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    47d4:	f8d4 1260 	ldr.w	r1, [r4, #608]	; 0x260
    47d8:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
    47dc:	1a41      	subs	r1, r0, r1
    47de:	440d      	add	r5, r1
    47e0:	8831      	ldrh	r1, [r6, #0]
    47e2:	6920      	ldr	r0, [r4, #16]
    47e4:	f007 fdaa 	bl	c33c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    47e8:	f8b4 2236 	ldrh.w	r2, [r4, #566]	; 0x236
    47ec:	4442      	add	r2, r8
    47ee:	eba2 0109 	sub.w	r1, r2, r9
    47f2:	f8d4 2258 	ldr.w	r2, [r4, #600]	; 0x258
    47f6:	1a89      	subs	r1, r1, r2
    47f8:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
    47fc:	1a82      	subs	r2, r0, r2
    47fe:	1e49      	subs	r1, r1, #1
    4800:	fb01 5502 	mla	r5, r1, r2, r5
    4804:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    4808:	2001      	movs	r0, #1
    480a:	f884 0272 	strb.w	r0, [r4, #626]	; 0x272
    480e:	4628      	mov	r0, r5
    4810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4814:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    4818:	e7c6      	b.n	47a8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x188>
    481a:	0000      	.short	0x0000
    481c:	20000100 	.word	0x20000100
    4820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4824:	4605      	mov	r5, r0
    4826:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    482a:	2128      	movs	r1, #40	; 0x28
    482c:	f00a fc28 	bl	f080 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xce>
    4830:	f500 782c 	add.w	r8, r0, #688	; 0x2b0
    4834:	f00c f98c 	bl	10b50 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    4838:	2869      	cmp	r0, #105	; 0x69
    483a:	d800      	bhi.n	483e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x21e>
    483c:	2069      	movs	r0, #105	; 0x69
    483e:	f8d5 1264 	ldr.w	r1, [r5, #612]	; 0x264
    4842:	f1a0 0369 	sub.w	r3, r0, #105	; 0x69
    4846:	692a      	ldr	r2, [r5, #16]
    4848:	440b      	add	r3, r1
    484a:	429a      	cmp	r2, r3
    484c:	d903      	bls.n	4856 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x236>
    484e:	1a51      	subs	r1, r2, r1
    4850:	1a0c      	subs	r4, r1, r0
    4852:	3469      	adds	r4, #105	; 0x69
    4854:	e000      	b.n	4858 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x238>
    4856:	2400      	movs	r4, #0
    4858:	4f1a      	ldr	r7, [pc, #104]	; (48c4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2a4>)
    485a:	7838      	ldrb	r0, [r7, #0]
    485c:	b918      	cbnz	r0, 4866 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x246>
    485e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    4860:	42a0      	cmp	r0, r4
    4862:	d800      	bhi.n	4866 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x246>
    4864:	4604      	mov	r4, r0
    4866:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    486a:	f009 fe5e 	bl	e52a <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
    486e:	4606      	mov	r6, r0
    4870:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    4874:	f00a fe16 	bl	f4a4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4f2>
    4878:	f8d5 1230 	ldr.w	r1, [r5, #560]	; 0x230
    487c:	4430      	add	r0, r6
    487e:	1846      	adds	r6, r0, r1
    4880:	1ba4      	subs	r4, r4, r6
    4882:	2c00      	cmp	r4, #0
    4884:	dc00      	bgt.n	4888 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x268>
    4886:	2400      	movs	r4, #0
    4888:	2002      	movs	r0, #2
    488a:	f005 fa8b 	bl	9da4 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
    488e:	4284      	cmp	r4, r0
    4890:	d300      	bcc.n	4894 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x274>
    4892:	4604      	mov	r4, r0
    4894:	2102      	movs	r1, #2
    4896:	4620      	mov	r0, r4
    4898:	f005 f994 	bl	9bc4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    489c:	b900      	cbnz	r0, 48a0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x280>
    489e:	4426      	add	r6, r4
    48a0:	4642      	mov	r2, r8
    48a2:	4631      	mov	r1, r6
    48a4:	4628      	mov	r0, r5
    48a6:	f009 fde1 	bl	e46c <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    48aa:	60b8      	str	r0, [r7, #8]
    48ac:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    48b0:	f00a fdf8 	bl	f4a4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4f2>
    48b4:	1a30      	subs	r0, r6, r0
    48b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    48ba:	f5a0 70b7 	sub.w	r0, r0, #366	; 0x16e
    48be:	f006 bbb7 	b.w	b030 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    48c2:	0000      	.short	0x0000
    48c4:	20000100 	.word	0x20000100
    48c8:	b538      	push	{r3, r4, r5, lr}
    48ca:	2500      	movs	r5, #0
    48cc:	4604      	mov	r4, r0
    48ce:	2901      	cmp	r1, #1
    48d0:	d102      	bne.n	48d8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2b8>
    48d2:	4810      	ldr	r0, [pc, #64]	; (4914 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f4>)
    48d4:	7840      	ldrb	r0, [r0, #1]
    48d6:	b170      	cbz	r0, 48f6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2d6>
    48d8:	2004      	movs	r0, #4
    48da:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    48de:	bf00      	nop
    48e0:	f00a fc5e 	bl	f1a0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>
    48e4:	f8a4 52a2 	strh.w	r5, [r4, #674]	; 0x2a2
    48e8:	f8b4 0094 	ldrh.w	r0, [r4, #148]	; 0x94
    48ec:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    48f0:	f884 5271 	strb.w	r5, [r4, #625]	; 0x271
    48f4:	bd38      	pop	{r3, r4, r5, pc}
    48f6:	9500      	str	r5, [sp, #0]
    48f8:	f8b4 1224 	ldrh.w	r1, [r4, #548]	; 0x224
    48fc:	2301      	movs	r3, #1
    48fe:	2200      	movs	r2, #0
    4900:	4620      	mov	r0, r4
    4902:	f000 f809 	bl	4918 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f8>
    4906:	2800      	cmp	r0, #0
    4908:	d0ea      	beq.n	48e0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2c0>
    490a:	f240 710e 	movw	r1, #1806	; 0x70e
    490e:	2030      	movs	r0, #48	; 0x30
    4910:	f7fc f84e 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4914:	20000100 	.word	0x20000100
    4918:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    491c:	b08b      	sub	sp, #44	; 0x2c
    491e:	4604      	mov	r4, r0
    4920:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    4924:	4699      	mov	r9, r3
    4926:	460f      	mov	r7, r1
    4928:	9307      	str	r3, [sp, #28]
    492a:	9005      	str	r0, [sp, #20]
    492c:	f00b ff00 	bl	10730 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    4930:	4605      	mov	r5, r0
    4932:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    4936:	f7ff febb 	bl	46b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x90>
    493a:	4428      	add	r0, r5
    493c:	f8ad 0004 	strh.w	r0, [sp, #4]
    4940:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    4944:	280d      	cmp	r0, #13
    4946:	d004      	beq.n	4952 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x332>
    4948:	2000      	movs	r0, #0
    494a:	9008      	str	r0, [sp, #32]
    494c:	980d      	ldr	r0, [sp, #52]	; 0x34
    494e:	b110      	cbz	r0, 4956 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x336>
    4950:	e02e      	b.n	49b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x390>
    4952:	2001      	movs	r0, #1
    4954:	e7f9      	b.n	494a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x32a>
    4956:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    495a:	2803      	cmp	r0, #3
    495c:	d128      	bne.n	49b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x390>
    495e:	9808      	ldr	r0, [sp, #32]
    4960:	b330      	cbz	r0, 49b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x390>
    4962:	f8b4 02cc 	ldrh.w	r0, [r4, #716]	; 0x2cc
    4966:	42b8      	cmp	r0, r7
    4968:	d122      	bne.n	49b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x390>
    496a:	f8d4 0264 	ldr.w	r0, [r4, #612]	; 0x264
    496e:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    4972:	6920      	ldr	r0, [r4, #16]
    4974:	f8c4 0254 	str.w	r0, [r4, #596]	; 0x254
    4978:	f8b4 02a2 	ldrh.w	r0, [r4, #674]	; 0x2a2
    497c:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
    4980:	4408      	add	r0, r1
    4982:	f8c4 0258 	str.w	r0, [r4, #600]	; 0x258
    4986:	4620      	mov	r0, r4
    4988:	f000 fa86 	bl	4e98 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    498c:	f8d4 02d0 	ldr.w	r0, [r4, #720]	; 0x2d0
    4990:	6220      	str	r0, [r4, #32]
    4992:	f8b4 02ce 	ldrh.w	r0, [r4, #718]	; 0x2ce
    4996:	84a0      	strh	r0, [r4, #36]	; 0x24
    4998:	f8d4 02d4 	ldr.w	r0, [r4, #724]	; 0x2d4
    499c:	6120      	str	r0, [r4, #16]
    499e:	f8b4 02d8 	ldrh.w	r0, [r4, #728]	; 0x2d8
    49a2:	8320      	strh	r0, [r4, #24]
    49a4:	f8b4 02da 	ldrh.w	r0, [r4, #730]	; 0x2da
    49a8:	8360      	strh	r0, [r4, #26]
    49aa:	2002      	movs	r0, #2
    49ac:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    49b0:	f8b4 0094 	ldrh.w	r0, [r4, #148]	; 0x94
    49b4:	f504 751e 	add.w	r5, r4, #632	; 0x278
    49b8:	1a38      	subs	r0, r7, r0
    49ba:	fa0f fa80 	sxth.w	sl, r0
    49be:	f8b4 02a0 	ldrh.w	r0, [r4, #672]	; 0x2a0
    49c2:	1a38      	subs	r0, r7, r0
    49c4:	fa0f f880 	sxth.w	r8, r0
    49c8:	f1b8 0f00 	cmp.w	r8, #0
    49cc:	da08      	bge.n	49e0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c0>
    49ce:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
    49d2:	f8d4 1294 	ldr.w	r1, [r4, #660]	; 0x294
    49d6:	46d0      	mov	r8, sl
    49d8:	e9c4 01a6 	strd	r0, r1, [r4, #664]	; 0x298
    49dc:	2001      	movs	r0, #1
    49de:	9007      	str	r0, [sp, #28]
    49e0:	ab01      	add	r3, sp, #4
    49e2:	4652      	mov	r2, sl
    49e4:	4641      	mov	r1, r8
    49e6:	4620      	mov	r0, r4
    49e8:	f7ff fea2 	bl	4730 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x110>
    49ec:	9004      	str	r0, [sp, #16]
    49ee:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    49f2:	f8df b334 	ldr.w	fp, [pc, #820]	; 4d28 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x708>
    49f6:	b140      	cbz	r0, 4a0a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3ea>
    49f8:	2801      	cmp	r0, #1
    49fa:	d07d      	beq.n	4af8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4d8>
    49fc:	2802      	cmp	r0, #2
    49fe:	d051      	beq.n	4aa4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x484>
    4a00:	2803      	cmp	r0, #3
    4a02:	d07a      	beq.n	4afa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
    4a04:	f240 518e 	movw	r1, #1422	; 0x58e
    4a08:	e18a      	b.n	4d20 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x700>
    4a0a:	2101      	movs	r1, #1
    4a0c:	2000      	movs	r0, #0
    4a0e:	f009 fa05 	bl	de1c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    4a12:	4606      	mov	r6, r0
    4a14:	6a20      	ldr	r0, [r4, #32]
    4a16:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    4a1a:	4430      	add	r0, r6
    4a1c:	f007 fc8e 	bl	c33c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4a20:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
    4a24:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    4a28:	6920      	ldr	r0, [r4, #16]
    4a2a:	f007 fc87 	bl	c33c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4a2e:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    4a32:	a907      	add	r1, sp, #28
    4a34:	a806      	add	r0, sp, #24
    4a36:	f003 f89f 	bl	7b78 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    4a3a:	e9d4 01a6 	ldrd	r0, r1, [r4, #664]	; 0x298
    4a3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    4a42:	f006 fbc7 	bl	b1d4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    4a46:	4682      	mov	sl, r0
    4a48:	4620      	mov	r0, r4
    4a4a:	f00a fb9d 	bl	f188 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d6>
    4a4e:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4a52:	f8d4 82a8 	ldr.w	r8, [r4, #680]	; 0x2a8
    4a56:	f003 fa23 	bl	7ea0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    4a5a:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    4a5e:	4401      	add	r1, r0
    4a60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4a64:	fbb1 f0f0 	udiv	r0, r1, r0
    4a68:	6a21      	ldr	r1, [r4, #32]
    4a6a:	f8d4 2260 	ldr.w	r2, [r4, #608]	; 0x260
    4a6e:	4431      	add	r1, r6
    4a70:	1a08      	subs	r0, r1, r0
    4a72:	1a81      	subs	r1, r0, r2
    4a74:	4441      	add	r1, r8
    4a76:	3920      	subs	r1, #32
    4a78:	eba1 060a 	sub.w	r6, r1, sl
    4a7c:	0050      	lsls	r0, r2, #1
    4a7e:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    4a80:	3060      	adds	r0, #96	; 0x60
    4a82:	4401      	add	r1, r0
    4a84:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4a88:	f00a fbec 	bl	f264 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b2>
    4a8c:	3022      	adds	r0, #34	; 0x22
    4a8e:	f8cb 000c 	str.w	r0, [fp, #12]
    4a92:	f8d4 02a8 	ldr.w	r0, [r4, #680]	; 0x2a8
    4a96:	1a30      	subs	r0, r6, r0
    4a98:	f5b0 7fe4 	cmp.w	r0, #456	; 0x1c8
    4a9c:	d258      	bcs.n	4b50 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x530>
    4a9e:	f240 5127 	movw	r1, #1319	; 0x527
    4aa2:	e13d      	b.n	4d20 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x700>
    4aa4:	6a21      	ldr	r1, [r4, #32]
    4aa6:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    4aaa:	4408      	add	r0, r1
    4aac:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    4ab0:	f007 fc44 	bl	c33c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4ab4:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
    4ab8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    4abc:	6920      	ldr	r0, [r4, #16]
    4abe:	f007 fc3d 	bl	c33c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4ac2:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    4ac6:	4620      	mov	r0, r4
    4ac8:	f00a fb5e 	bl	f188 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d6>
    4acc:	f8b4 0236 	ldrh.w	r0, [r4, #566]	; 0x236
    4ad0:	bb10      	cbnz	r0, 4b18 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f8>
    4ad2:	f1b9 0f00 	cmp.w	r9, #0
    4ad6:	d01f      	beq.n	4b18 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f8>
    4ad8:	f894 806b 	ldrb.w	r8, [r4, #107]	; 0x6b
    4adc:	4640      	mov	r0, r8
    4ade:	f003 f9df 	bl	7ea0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    4ae2:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    4ae6:	4401      	add	r1, r0
    4ae8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4aec:	fbb1 f0f0 	udiv	r0, r1, r0
    4af0:	f8d4 1260 	ldr.w	r1, [r4, #608]	; 0x260
    4af4:	4408      	add	r0, r1
    4af6:	e001      	b.n	4afc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4dc>
    4af8:	e02b      	b.n	4b52 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x532>
    4afa:	e047      	b.n	4b8c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x56c>
    4afc:	6a22      	ldr	r2, [r4, #32]
    4afe:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    4b02:	4411      	add	r1, r2
    4b04:	1a0e      	subs	r6, r1, r0
    4b06:	4640      	mov	r0, r8
    4b08:	f003 f99e 	bl	7e48 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    4b0c:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    4b10:	1a08      	subs	r0, r1, r0
    4b12:	4406      	add	r6, r0
    4b14:	3e20      	subs	r6, #32
    4b16:	e006      	b.n	4b26 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x506>
    4b18:	6a21      	ldr	r1, [r4, #32]
    4b1a:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    4b1e:	4408      	add	r0, r1
    4b20:	f8d4 1260 	ldr.w	r1, [r4, #608]	; 0x260
    4b24:	1a46      	subs	r6, r0, r1
    4b26:	f8d4 2258 	ldr.w	r2, [r4, #600]	; 0x258
    4b2a:	f8d4 1250 	ldr.w	r1, [r4, #592]	; 0x250
    4b2e:	f8d4 0260 	ldr.w	r0, [r4, #608]	; 0x260
    4b32:	fb01 0002 	mla	r0, r1, r2, r0
    4b36:	0040      	lsls	r0, r0, #1
    4b38:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    4b3a:	3060      	adds	r0, #96	; 0x60
    4b3c:	4401      	add	r1, r0
    4b3e:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4b42:	f00a fb8f 	bl	f264 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b2>
    4b46:	f8cb 000c 	str.w	r0, [fp, #12]
    4b4a:	2001      	movs	r0, #1
    4b4c:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    4b50:	e061      	b.n	4c16 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f6>
    4b52:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
    4b56:	6920      	ldr	r0, [r4, #16]
    4b58:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
    4b5c:	1a86      	subs	r6, r0, r2
    4b5e:	eb01 000a 	add.w	r0, r1, sl
    4b62:	f8d4 1258 	ldr.w	r1, [r4, #600]	; 0x258
    4b66:	f8d4 c250 	ldr.w	ip, [r4, #592]	; 0x250
    4b6a:	1a40      	subs	r0, r0, r1
    4b6c:	f8d4 3260 	ldr.w	r3, [r4, #608]	; 0x260
    4b70:	1e40      	subs	r0, r0, #1
    4b72:	fb0c 3101 	mla	r1, ip, r1, r3
    4b76:	fb00 1002 	mla	r0, r0, r2, r1
    4b7a:	0040      	lsls	r0, r0, #1
    4b7c:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    4b7e:	3060      	adds	r0, #96	; 0x60
    4b80:	4401      	add	r1, r0
    4b82:	fb06 f608 	mul.w	r6, r6, r8
    4b86:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4b8a:	e040      	b.n	4c0e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ee>
    4b8c:	6920      	ldr	r0, [r4, #16]
    4b8e:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    4b92:	fb00 f008 	mul.w	r0, r0, r8
    4b96:	fb08 0611 	mls	r6, r8, r1, r0
    4b9a:	f894 009d 	ldrb.w	r0, [r4, #157]	; 0x9d
    4b9e:	2825      	cmp	r0, #37	; 0x25
    4ba0:	d003      	beq.n	4baa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x58a>
    4ba2:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    4ba6:	2825      	cmp	r0, #37	; 0x25
    4ba8:	d109      	bne.n	4bbe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    4baa:	f8b4 02cc 	ldrh.w	r0, [r4, #716]	; 0x2cc
    4bae:	1a38      	subs	r0, r7, r0
    4bb0:	b200      	sxth	r0, r0
    4bb2:	2800      	cmp	r0, #0
    4bb4:	db03      	blt.n	4bbe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    4bb6:	f894 02cf 	ldrb.w	r0, [r4, #719]	; 0x2cf
    4bba:	b100      	cbz	r0, 4bbe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    4bbc:	9005      	str	r0, [sp, #20]
    4bbe:	9807      	ldr	r0, [sp, #28]
    4bc0:	b1d8      	cbz	r0, 4bfa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5da>
    4bc2:	f8b4 0236 	ldrh.w	r0, [r4, #566]	; 0x236
    4bc6:	b9c0      	cbnz	r0, 4bfa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5da>
    4bc8:	f8d4 02ac 	ldr.w	r0, [r4, #684]	; 0x2ac
    4bcc:	2800      	cmp	r0, #0
    4bce:	d07d      	beq.n	4ccc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6ac>
    4bd0:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4bd4:	f003 f964 	bl	7ea0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    4bd8:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    4bdc:	4401      	add	r1, r0
    4bde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4be2:	fbb1 f0f0 	udiv	r0, r1, r0
    4be6:	1a36      	subs	r6, r6, r0
    4be8:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4bec:	f003 f92c 	bl	7e48 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    4bf0:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    4bf4:	1a08      	subs	r0, r1, r0
    4bf6:	4406      	add	r6, r0
    4bf8:	3e20      	subs	r6, #32
    4bfa:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
    4bfe:	eb01 000a 	add.w	r0, r1, sl
    4c02:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    4c06:	4348      	muls	r0, r1
    4c08:	0041      	lsls	r1, r0, #1
    4c0a:	3160      	adds	r1, #96	; 0x60
    4c0c:	9805      	ldr	r0, [sp, #20]
    4c0e:	f00a fb29 	bl	f264 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b2>
    4c12:	f8cb 000c 	str.w	r0, [fp, #12]
    4c16:	9804      	ldr	r0, [sp, #16]
    4c18:	f8db 200c 	ldr.w	r2, [fp, #12]
    4c1c:	1a31      	subs	r1, r6, r0
    4c1e:	f8d4 6264 	ldr.w	r6, [r4, #612]	; 0x264
    4c22:	6920      	ldr	r0, [r4, #16]
    4c24:	1b80      	subs	r0, r0, r6
    4c26:	f2a0 2052 	subw	r0, r0, #594	; 0x252
    4c2a:	f8cb 0010 	str.w	r0, [fp, #16]
    4c2e:	4282      	cmp	r2, r0
    4c30:	d800      	bhi.n	4c34 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x614>
    4c32:	4610      	mov	r0, r2
    4c34:	f8c4 0230 	str.w	r0, [r4, #560]	; 0x230
    4c38:	2600      	movs	r6, #0
    4c3a:	702e      	strb	r6, [r5, #0]
    4c3c:	2069      	movs	r0, #105	; 0x69
    4c3e:	8128      	strh	r0, [r5, #8]
    4c40:	e9d4 20a6 	ldrd	r2, r0, [r4, #664]	; 0x298
    4c44:	1851      	adds	r1, r2, r1
    4c46:	4170      	adcs	r0, r6
    4c48:	e9c5 1004 	strd	r1, r0, [r5, #16]
    4c4c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    4c50:	f009 fc6b 	bl	e52a <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
    4c54:	f8d4 1230 	ldr.w	r1, [r4, #560]	; 0x230
    4c58:	4408      	add	r0, r1
    4c5a:	6068      	str	r0, [r5, #4]
    4c5c:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
    4c60:	e9c4 01a6 	strd	r0, r1, [r4, #664]	; 0x298
    4c64:	f8a4 72a0 	strh.w	r7, [r4, #672]	; 0x2a0
    4c68:	72ae      	strb	r6, [r5, #10]
    4c6a:	f8b4 0220 	ldrh.w	r0, [r4, #544]	; 0x220
    4c6e:	1bc0      	subs	r0, r0, r7
    4c70:	b200      	sxth	r0, r0
    4c72:	2800      	cmp	r0, #0
    4c74:	dd01      	ble.n	4c7a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x65a>
    4c76:	2002      	movs	r0, #2
    4c78:	72a8      	strb	r0, [r5, #10]
    4c7a:	9808      	ldr	r0, [sp, #32]
    4c7c:	b338      	cbz	r0, 4cce <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6ae>
    4c7e:	f1b9 0f00 	cmp.w	r9, #0
    4c82:	d01c      	beq.n	4cbe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x69e>
    4c84:	f8b4 1248 	ldrh.w	r1, [r4, #584]	; 0x248
    4c88:	b3f1      	cbz	r1, 4d08 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6e8>
    4c8a:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    4c8e:	bf00      	nop
    4c90:	f8a4 024a 	strh.w	r0, [r4, #586]	; 0x24a
    4c94:	f894 224c 	ldrb.w	r2, [r4, #588]	; 0x24c
    4c98:	1c40      	adds	r0, r0, #1
    4c9a:	4342      	muls	r2, r0
    4c9c:	428a      	cmp	r2, r1
    4c9e:	d20e      	bcs.n	4cbe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x69e>
    4ca0:	7aa8      	ldrb	r0, [r5, #10]
    4ca2:	b160      	cbz	r0, 4cbe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x69e>
    4ca4:	72ae      	strb	r6, [r5, #10]
    4ca6:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    4caa:	1c40      	adds	r0, r0, #1
    4cac:	f8a4 024a 	strh.w	r0, [r4, #586]	; 0x24a
    4cb0:	f7fe f980 	bl	2fb4 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    4cb4:	f000 0007 	and.w	r0, r0, #7
    4cb8:	1c40      	adds	r0, r0, #1
    4cba:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
    4cbe:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    4cc2:	4629      	mov	r1, r5
    4cc4:	f00a fae0 	bl	f288 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d6>
    4cc8:	b340      	cbz	r0, 4d1c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6fc>
    4cca:	e001      	b.n	4cd0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6b0>
    4ccc:	e009      	b.n	4ce2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6c2>
    4cce:	e00b      	b.n	4ce8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6c8>
    4cd0:	980d      	ldr	r0, [sp, #52]	; 0x34
    4cd2:	f080 0001 	eor.w	r0, r0, #1
    4cd6:	f884 0270 	strb.w	r0, [r4, #624]	; 0x270
    4cda:	2000      	movs	r0, #0
    4cdc:	b00f      	add	sp, #60	; 0x3c
    4cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4ce2:	f240 5179 	movw	r1, #1401	; 0x579
    4ce6:	e01b      	b.n	4d20 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x700>
    4ce8:	f1b9 0f00 	cmp.w	r9, #0
    4cec:	d1ca      	bne.n	4c84 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x664>
    4cee:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    4cf2:	2800      	cmp	r0, #0
    4cf4:	d0e3      	beq.n	4cbe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x69e>
    4cf6:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    4cfa:	6920      	ldr	r0, [r4, #16]
    4cfc:	1a41      	subs	r1, r0, r1
    4cfe:	4628      	mov	r0, r5
    4d00:	f009 f8a2 	bl	de48 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    4d04:	0400      	lsls	r0, r0, #16
    4d06:	e000      	b.n	4d0a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6ea>
    4d08:	e006      	b.n	4d18 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6f8>
    4d0a:	0c00      	lsrs	r0, r0, #16
    4d0c:	d0d7      	beq.n	4cbe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x69e>
    4d0e:	9918      	ldr	r1, [sp, #96]	; 0x60
    4d10:	b101      	cbz	r1, 4d14 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6f4>
    4d12:	8008      	strh	r0, [r1, #0]
    4d14:	2001      	movs	r0, #1
    4d16:	e7e1      	b.n	4cdc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6bc>
    4d18:	2000      	movs	r0, #0
    4d1a:	e7b9      	b.n	4c90 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x670>
    4d1c:	f240 51d7 	movw	r1, #1495	; 0x5d7
    4d20:	2030      	movs	r0, #48	; 0x30
    4d22:	f7fb fe45 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d26:	0000      	.short	0x0000
    4d28:	20000100 	.word	0x20000100
    4d2c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    4d2e:	4604      	mov	r4, r0
    4d30:	f00b ff17 	bl	10b62 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4d34:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
    4d38:	f8d4 2294 	ldr.w	r2, [r4, #660]	; 0x294
    4d3c:	1ac0      	subs	r0, r0, r3
    4d3e:	eb61 0102 	sbc.w	r1, r1, r2
    4d42:	2200      	movs	r2, #0
    4d44:	4613      	mov	r3, r2
    4d46:	1a12      	subs	r2, r2, r0
    4d48:	418b      	sbcs	r3, r1
    4d4a:	db02      	blt.n	4d52 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x732>
    4d4c:	f240 6154 	movw	r1, #1620	; 0x654
    4d50:	e04d      	b.n	4dee <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7ce>
    4d52:	1c42      	adds	r2, r0, #1
    4d54:	f171 0100 	sbcs.w	r1, r1, #0
    4d58:	db02      	blt.n	4d60 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x740>
    4d5a:	f240 6155 	movw	r1, #1621	; 0x655
    4d5e:	e046      	b.n	4dee <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7ce>
    4d60:	6922      	ldr	r2, [r4, #16]
    4d62:	2100      	movs	r1, #0
    4d64:	b10a      	cbz	r2, 4d6a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x74a>
    4d66:	fbb0 f1f2 	udiv	r1, r0, r2
    4d6a:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    4d6e:	280d      	cmp	r0, #13
    4d70:	f8b4 026e 	ldrh.w	r0, [r4, #622]	; 0x26e
    4d74:	d01b      	beq.n	4dae <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x78e>
    4d76:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
    4d7a:	1853      	adds	r3, r2, r1
    4d7c:	1ac3      	subs	r3, r0, r3
    4d7e:	b21b      	sxth	r3, r3
    4d80:	2b00      	cmp	r3, #0
    4d82:	db01      	blt.n	4d88 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x768>
    4d84:	1c40      	adds	r0, r0, #1
    4d86:	e001      	b.n	4d8c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x76c>
    4d88:	1c49      	adds	r1, r1, #1
    4d8a:	1850      	adds	r0, r2, r1
    4d8c:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    4d90:	f894 0271 	ldrb.w	r0, [r4, #625]	; 0x271
    4d94:	f88d 0000 	strb.w	r0, [sp]
    4d98:	9800      	ldr	r0, [sp, #0]
    4d9a:	9000      	str	r0, [sp, #0]
    4d9c:	f89d 0000 	ldrb.w	r0, [sp]
    4da0:	b940      	cbnz	r0, 4db4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x794>
    4da2:	f8b4 026e 	ldrh.w	r0, [r4, #622]	; 0x26e
    4da6:	f8b4 1224 	ldrh.w	r1, [r4, #548]	; 0x224
    4daa:	4288      	cmp	r0, r1
    4dac:	d102      	bne.n	4db4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x794>
    4dae:	1c40      	adds	r0, r0, #1
    4db0:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    4db4:	f8b4 02a2 	ldrh.w	r0, [r4, #674]	; 0x2a2
    4db8:	1c40      	adds	r0, r0, #1
    4dba:	f8a4 02a2 	strh.w	r0, [r4, #674]	; 0x2a2
    4dbe:	f8b4 00ce 	ldrh.w	r0, [r4, #206]	; 0xce
    4dc2:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
    4dc6:	1a40      	subs	r0, r0, r1
    4dc8:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    4dcc:	1e40      	subs	r0, r0, #1
    4dce:	4408      	add	r0, r1
    4dd0:	b285      	uxth	r5, r0
    4dd2:	e026      	b.n	4e22 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x802>
    4dd4:	a801      	add	r0, sp, #4
    4dd6:	2300      	movs	r3, #0
    4dd8:	9000      	str	r0, [sp, #0]
    4dda:	461a      	mov	r2, r3
    4ddc:	4620      	mov	r0, r4
    4dde:	f7ff fd9b 	bl	4918 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f8>
    4de2:	2800      	cmp	r0, #0
    4de4:	d03a      	beq.n	4e5c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x83c>
    4de6:	2801      	cmp	r0, #1
    4de8:	d004      	beq.n	4df4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7d4>
    4dea:	f240 6194 	movw	r1, #1684	; 0x694
    4dee:	2030      	movs	r0, #48	; 0x30
    4df0:	f7fb fdde 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4df4:	f8b4 026e 	ldrh.w	r0, [r4, #622]	; 0x26e
    4df8:	f8b4 1220 	ldrh.w	r1, [r4, #544]	; 0x220
    4dfc:	1a42      	subs	r2, r0, r1
    4dfe:	b212      	sxth	r2, r2
    4e00:	2a00      	cmp	r2, #0
    4e02:	da09      	bge.n	4e18 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7f8>
    4e04:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    4e08:	4402      	add	r2, r0
    4e0a:	1aaa      	subs	r2, r5, r2
    4e0c:	b212      	sxth	r2, r2
    4e0e:	2a00      	cmp	r2, #0
    4e10:	da02      	bge.n	4e18 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7f8>
    4e12:	f8a4 126e 	strh.w	r1, [r4, #622]	; 0x26e
    4e16:	e004      	b.n	4e22 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x802>
    4e18:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    4e1c:	4408      	add	r0, r1
    4e1e:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    4e22:	f8b4 126e 	ldrh.w	r1, [r4, #622]	; 0x26e
    4e26:	1a68      	subs	r0, r5, r1
    4e28:	b200      	sxth	r0, r0
    4e2a:	2800      	cmp	r0, #0
    4e2c:	dad2      	bge.n	4dd4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7b4>
    4e2e:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
    4e32:	b188      	cbz	r0, 4e58 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x838>
    4e34:	f05f 0008 	movs.w	r0, #8
    4e38:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    4e3c:	2202      	movs	r2, #2
    4e3e:	4908      	ldr	r1, [pc, #32]	; (4e60 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x840>)
    4e40:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    4e44:	f009 fada 	bl	e3fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    4e48:	4620      	mov	r0, r4
    4e4a:	f00a fbae 	bl	f5aa <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    4e4e:	4620      	mov	r0, r4
    4e50:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    4e54:	f00a ba7d 	b.w	f352 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3a0>
    4e58:	203e      	movs	r0, #62	; 0x3e
    4e5a:	e7ed      	b.n	4e38 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x818>
    4e5c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    4e5e:	0000      	.short	0x0000
    4e60:	0000e6b9 	.word	0x0000e6b9
    4e64:	00000000 	.word	0x00000000
    4e68:	00010000 	.word	0x00010000
    4e6c:	00000000 	.word	0x00000000
    4e70:	00010000 	.word	0x00010000
    4e74:	00000000 	.word	0x00000000
    4e78:	00001e14 	.word	0x00001e14
    4e7c:	00001130 	.word	0x00001130
    4e80:	00fa01f4 	.word	0x00fa01f4
    4e84:	00640096 	.word	0x00640096
    4e88:	0032004b 	.word	0x0032004b
    4e8c:	0014001e 	.word	0x0014001e
    4e90:	0005000a 	.word	0x0005000a
    4e94:	00010002 	.word	0x00010002

00004e98 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    4e98:	b510      	push	{r4, lr}
    4e9a:	4604      	mov	r4, r0
    4e9c:	f8d0 02d4 	ldr.w	r0, [r0, #724]	; 0x2d4
    4ea0:	6921      	ldr	r1, [r4, #16]
    4ea2:	4288      	cmp	r0, r1
    4ea4:	d109      	bne.n	4eba <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    4ea6:	f8b4 12d8 	ldrh.w	r1, [r4, #728]	; 0x2d8
    4eaa:	8b22      	ldrh	r2, [r4, #24]
    4eac:	4291      	cmp	r1, r2
    4eae:	d104      	bne.n	4eba <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    4eb0:	f8b4 12da 	ldrh.w	r1, [r4, #730]	; 0x2da
    4eb4:	8b62      	ldrh	r2, [r4, #26]
    4eb6:	4291      	cmp	r1, r2
    4eb8:	d014      	beq.n	4ee4 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4c>
    4eba:	8821      	ldrh	r1, [r4, #0]
    4ebc:	f8a4 11ca 	strh.w	r1, [r4, #458]	; 0x1ca
    4ec0:	f008 feee 	bl	dca0 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    4ec4:	f8a4 01cc 	strh.w	r0, [r4, #460]	; 0x1cc
    4ec8:	f8b4 02d8 	ldrh.w	r0, [r4, #728]	; 0x2d8
    4ecc:	f8a4 01ce 	strh.w	r0, [r4, #462]	; 0x1ce
    4ed0:	f8b4 02da 	ldrh.w	r0, [r4, #730]	; 0x2da
    4ed4:	f8a4 01d0 	strh.w	r0, [r4, #464]	; 0x1d0
    4ed8:	2202      	movs	r2, #2
    4eda:	4907      	ldr	r1, [pc, #28]	; (4ef8 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x60>)
    4edc:	f504 70df 	add.w	r0, r4, #446	; 0x1be
    4ee0:	f009 faa0 	bl	e424 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    4ee4:	2102      	movs	r1, #2
    4ee6:	4620      	mov	r0, r4
    4ee8:	f7fd fc0e 	bl	2708 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    4eec:	2000      	movs	r0, #0
    4eee:	f804 0f9e 	strb.w	r0, [r4, #158]!
    4ef2:	2003      	movs	r0, #3
    4ef4:	70e0      	strb	r0, [r4, #3]
    4ef6:	bd10      	pop	{r4, pc}
    4ef8:	0000e747 	.word	0x0000e747

00004efc <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    4efc:	4806      	ldr	r0, [pc, #24]	; (4f18 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    4efe:	4905      	ldr	r1, [pc, #20]	; (4f14 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    4f00:	6501      	str	r1, [r0, #80]	; 0x50
    4f02:	4906      	ldr	r1, [pc, #24]	; (4f1c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    4f04:	6541      	str	r1, [r0, #84]	; 0x54
    4f06:	4807      	ldr	r0, [pc, #28]	; (4f24 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    4f08:	4905      	ldr	r1, [pc, #20]	; (4f20 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    4f0a:	6501      	str	r1, [r0, #80]	; 0x50
    4f0c:	4906      	ldr	r1, [pc, #24]	; (4f28 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    4f0e:	6541      	str	r1, [r0, #84]	; 0x54
    4f10:	4770      	bx	lr
    4f12:	0000      	.short	0x0000
    4f14:	000061f5 	.word	0x000061f5
    4f18:	2000012c 	.word	0x2000012c
    4f1c:	000062dd 	.word	0x000062dd
    4f20:	0000e769 	.word	0x0000e769
    4f24:	200001d8 	.word	0x200001d8
    4f28:	0000672d 	.word	0x0000672d

00004f2c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    4f2c:	481e      	ldr	r0, [pc, #120]	; (4fa8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    4f2e:	491d      	ldr	r1, [pc, #116]	; (4fa4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    4f30:	6081      	str	r1, [r0, #8]
    4f32:	491e      	ldr	r1, [pc, #120]	; (4fac <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    4f34:	6041      	str	r1, [r0, #4]
    4f36:	491e      	ldr	r1, [pc, #120]	; (4fb0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    4f38:	6001      	str	r1, [r0, #0]
    4f3a:	491e      	ldr	r1, [pc, #120]	; (4fb4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    4f3c:	6281      	str	r1, [r0, #40]	; 0x28
    4f3e:	491e      	ldr	r1, [pc, #120]	; (4fb8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    4f40:	62c1      	str	r1, [r0, #44]	; 0x2c
    4f42:	491e      	ldr	r1, [pc, #120]	; (4fbc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    4f44:	60c1      	str	r1, [r0, #12]
    4f46:	491e      	ldr	r1, [pc, #120]	; (4fc0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    4f48:	6181      	str	r1, [r0, #24]
    4f4a:	491e      	ldr	r1, [pc, #120]	; (4fc4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    4f4c:	6301      	str	r1, [r0, #48]	; 0x30
    4f4e:	491e      	ldr	r1, [pc, #120]	; (4fc8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    4f50:	6201      	str	r1, [r0, #32]
    4f52:	491e      	ldr	r1, [pc, #120]	; (4fcc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    4f54:	64c1      	str	r1, [r0, #76]	; 0x4c
    4f56:	491e      	ldr	r1, [pc, #120]	; (4fd0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    4f58:	6481      	str	r1, [r0, #72]	; 0x48
    4f5a:	491e      	ldr	r1, [pc, #120]	; (4fd4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    4f5c:	6441      	str	r1, [r0, #68]	; 0x44
    4f5e:	491e      	ldr	r1, [pc, #120]	; (4fd8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    4f60:	6341      	str	r1, [r0, #52]	; 0x34
    4f62:	491e      	ldr	r1, [pc, #120]	; (4fdc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    4f64:	61c1      	str	r1, [r0, #28]
    4f66:	491e      	ldr	r1, [pc, #120]	; (4fe0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    4f68:	6241      	str	r1, [r0, #36]	; 0x24
    4f6a:	481f      	ldr	r0, [pc, #124]	; (4fe8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    4f6c:	491d      	ldr	r1, [pc, #116]	; (4fe4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    4f6e:	6081      	str	r1, [r0, #8]
    4f70:	491e      	ldr	r1, [pc, #120]	; (4fec <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    4f72:	61c1      	str	r1, [r0, #28]
    4f74:	491e      	ldr	r1, [pc, #120]	; (4ff0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    4f76:	6241      	str	r1, [r0, #36]	; 0x24
    4f78:	491e      	ldr	r1, [pc, #120]	; (4ff4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    4f7a:	62c1      	str	r1, [r0, #44]	; 0x2c
    4f7c:	491e      	ldr	r1, [pc, #120]	; (4ff8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    4f7e:	6101      	str	r1, [r0, #16]
    4f80:	491e      	ldr	r1, [pc, #120]	; (4ffc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    4f82:	6141      	str	r1, [r0, #20]
    4f84:	491e      	ldr	r1, [pc, #120]	; (5000 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    4f86:	6441      	str	r1, [r0, #68]	; 0x44
    4f88:	491e      	ldr	r1, [pc, #120]	; (5004 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd8>)
    4f8a:	6341      	str	r1, [r0, #52]	; 0x34
    4f8c:	491e      	ldr	r1, [pc, #120]	; (5008 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xdc>)
    4f8e:	6181      	str	r1, [r0, #24]
    4f90:	491e      	ldr	r1, [pc, #120]	; (500c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe0>)
    4f92:	6301      	str	r1, [r0, #48]	; 0x30
    4f94:	491e      	ldr	r1, [pc, #120]	; (5010 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe4>)
    4f96:	6481      	str	r1, [r0, #72]	; 0x48
    4f98:	491e      	ldr	r1, [pc, #120]	; (5014 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe8>)
    4f9a:	64c1      	str	r1, [r0, #76]	; 0x4c
    4f9c:	491e      	ldr	r1, [pc, #120]	; (5018 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xec>)
    4f9e:	6381      	str	r1, [r0, #56]	; 0x38
    4fa0:	4770      	bx	lr
    4fa2:	0000      	.short	0x0000
    4fa4:	00006641 	.word	0x00006641
    4fa8:	2000012c 	.word	0x2000012c
    4fac:	00005fdd 	.word	0x00005fdd
    4fb0:	00006049 	.word	0x00006049
    4fb4:	000062e9 	.word	0x000062e9
    4fb8:	0000f623 	.word	0x0000f623
    4fbc:	00006109 	.word	0x00006109
    4fc0:	00006619 	.word	0x00006619
    4fc4:	000066d9 	.word	0x000066d9
    4fc8:	000061a9 	.word	0x000061a9
    4fcc:	0000e961 	.word	0x0000e961
    4fd0:	0000e919 	.word	0x0000e919
    4fd4:	00006591 	.word	0x00006591
    4fd8:	000065c5 	.word	0x000065c5
    4fdc:	0000664d 	.word	0x0000664d
    4fe0:	000061b5 	.word	0x000061b5
    4fe4:	0000e729 	.word	0x0000e729
    4fe8:	200001d8 	.word	0x200001d8
    4fec:	00006819 	.word	0x00006819
    4ff0:	0000f6f1 	.word	0x0000f6f1
    4ff4:	0000f6f5 	.word	0x0000f6f5
    4ff8:	0000f6cb 	.word	0x0000f6cb
    4ffc:	0000f75d 	.word	0x0000f75d
    5000:	0000676d 	.word	0x0000676d
    5004:	0000f73b 	.word	0x0000f73b
    5008:	000067a5 	.word	0x000067a5
    500c:	0000f77b 	.word	0x0000f77b
    5010:	0000e93d 	.word	0x0000e93d
    5014:	0000e987 	.word	0x0000e987
    5018:	0000f759 	.word	0x0000f759

0000501c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    501c:	4806      	ldr	r0, [pc, #24]	; (5038 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    501e:	4905      	ldr	r1, [pc, #20]	; (5034 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    5020:	6581      	str	r1, [r0, #88]	; 0x58
    5022:	4906      	ldr	r1, [pc, #24]	; (503c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    5024:	6601      	str	r1, [r0, #96]	; 0x60
    5026:	4807      	ldr	r0, [pc, #28]	; (5044 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    5028:	4905      	ldr	r1, [pc, #20]	; (5040 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    502a:	6581      	str	r1, [r0, #88]	; 0x58
    502c:	4906      	ldr	r1, [pc, #24]	; (5048 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    502e:	65c1      	str	r1, [r0, #92]	; 0x5c
    5030:	4770      	bx	lr
    5032:	0000      	.short	0x0000
    5034:	00006339 	.word	0x00006339
    5038:	2000012c 	.word	0x2000012c
    503c:	0000641d 	.word	0x0000641d
    5040:	00010765 	.word	0x00010765
    5044:	200001d8 	.word	0x200001d8
    5048:	0000f71b 	.word	0x0000f71b

0000504c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    504c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    504e:	4c7c      	ldr	r4, [pc, #496]	; (5240 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4>)
    5050:	2101      	movs	r1, #1
    5052:	f1a4 0610 	sub.w	r6, r4, #16
    5056:	7021      	strb	r1, [r4, #0]
    5058:	2500      	movs	r5, #0
    505a:	6060      	str	r0, [r4, #4]
    505c:	8075      	strh	r5, [r6, #2]
    505e:	7075      	strb	r5, [r6, #1]
    5060:	7035      	strb	r5, [r6, #0]
    5062:	f880 122b 	strb.w	r1, [r0, #555]	; 0x22b
    5066:	8800      	ldrh	r0, [r0, #0]
    5068:	f7fc f97a 	bl	1360 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    506c:	b180      	cbz	r0, 5090 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44>
    506e:	6860      	ldr	r0, [r4, #4]
    5070:	8800      	ldrh	r0, [r0, #0]
    5072:	f7fc fbdd 	bl	1830 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    5076:	6860      	ldr	r0, [r4, #4]
    5078:	8800      	ldrh	r0, [r0, #0]
    507a:	f7fc fb81 	bl	1780 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    507e:	6860      	ldr	r0, [r4, #4]
    5080:	f8b0 1222 	ldrh.w	r1, [r0, #546]	; 0x222
    5084:	b1c9      	cbz	r1, 50ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    5086:	3080      	adds	r0, #128	; 0x80
    5088:	f00a fa9e 	bl	f5c8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    508c:	b118      	cbz	r0, 5096 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a>
    508e:	e014      	b.n	50ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    5090:	f640 419f 	movw	r1, #3231	; 0xc9f
    5094:	e06c      	b.n	5170 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x124>
    5096:	6860      	ldr	r0, [r4, #4]
    5098:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    509c:	f88d 1000 	strb.w	r1, [sp]
    50a0:	9900      	ldr	r1, [sp, #0]
    50a2:	9100      	str	r1, [sp, #0]
    50a4:	f89d 1000 	ldrb.w	r1, [sp]
    50a8:	b139      	cbz	r1, 50ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    50aa:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    50ae:	2301      	movs	r3, #1
    50b0:	4619      	mov	r1, r3
    50b2:	3080      	adds	r0, #128	; 0x80
    50b4:	f008 fdfa 	bl	dcac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    50b8:	b180      	cbz	r0, 50dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x90>
    50ba:	6860      	ldr	r0, [r4, #4]
    50bc:	3080      	adds	r0, #128	; 0x80
    50be:	f00a fa83 	bl	f5c8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    50c2:	b128      	cbz	r0, 50d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
    50c4:	6860      	ldr	r0, [r4, #4]
    50c6:	f890 0126 	ldrb.w	r0, [r0, #294]	; 0x126
    50ca:	bf00      	nop
    50cc:	f000 fb84 	bl	57d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x78c>
    50d0:	6860      	ldr	r0, [r4, #4]
    50d2:	f890 122d 	ldrb.w	r1, [r0, #557]	; 0x22d
    50d6:	b189      	cbz	r1, 50fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0>
    50d8:	80b5      	strh	r5, [r6, #4]
    50da:	e01e      	b.n	511a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce>
    50dc:	6860      	ldr	r0, [r4, #4]
    50de:	f8a0 50d0 	strh.w	r5, [r0, #208]	; 0xd0
    50e2:	f890 1131 	ldrb.w	r1, [r0, #305]	; 0x131
    50e6:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    50ea:	2100      	movs	r1, #0
    50ec:	2002      	movs	r0, #2
    50ee:	f000 fe39 	bl	5d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    50f2:	6860      	ldr	r0, [r4, #4]
    50f4:	f880 522a 	strb.w	r5, [r0, #554]	; 0x22a
    50f8:	2002      	movs	r0, #2
    50fa:	e7e7      	b.n	50cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    50fc:	f890 11c6 	ldrb.w	r1, [r0, #454]	; 0x1c6
    5100:	f88d 1000 	strb.w	r1, [sp]
    5104:	9900      	ldr	r1, [sp, #0]
    5106:	9100      	str	r1, [sp, #0]
    5108:	f89d 1000 	ldrb.w	r1, [sp]
    510c:	b919      	cbnz	r1, 5116 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca>
    510e:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
    5110:	8b02      	ldrh	r2, [r0, #24]
    5112:	4291      	cmp	r1, r2
    5114:	d800      	bhi.n	5118 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcc>
    5116:	8b01      	ldrh	r1, [r0, #24]
    5118:	80b1      	strh	r1, [r6, #4]
    511a:	f8b0 1226 	ldrh.w	r1, [r0, #550]	; 0x226
    511e:	1e49      	subs	r1, r1, #1
    5120:	b28f      	uxth	r7, r1
    5122:	f8b0 1228 	ldrh.w	r1, [r0, #552]	; 0x228
    5126:	4439      	add	r1, r7
    5128:	f8a0 1228 	strh.w	r1, [r0, #552]	; 0x228
    512c:	f830 1fcc 	ldrh.w	r1, [r0, #204]!
    5130:	4439      	add	r1, r7
    5132:	8001      	strh	r1, [r0, #0]
    5134:	f001 fba0 	bl	6878 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x182c>
    5138:	b120      	cbz	r0, 5144 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8>
    513a:	6860      	ldr	r0, [r4, #4]
    513c:	f850 1fc0 	ldr.w	r1, [r0, #192]!
    5140:	4439      	add	r1, r7
    5142:	6001      	str	r1, [r0, #0]
    5144:	6861      	ldr	r1, [r4, #4]
    5146:	f8b1 0222 	ldrh.w	r0, [r1, #546]	; 0x222
    514a:	2801      	cmp	r0, #1
    514c:	d802      	bhi.n	5154 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x108>
    514e:	1c40      	adds	r0, r0, #1
    5150:	f8a1 0222 	strh.w	r0, [r1, #546]	; 0x222
    5154:	b10f      	cbz	r7, 515a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10e>
    5156:	f881 5234 	strb.w	r5, [r1, #564]	; 0x234
    515a:	f881 522a 	strb.w	r5, [r1, #554]	; 0x22a
    515e:	f8b1 2226 	ldrh.w	r2, [r1, #550]	; 0x226
    5162:	f101 0080 	add.w	r0, r1, #128	; 0x80
    5166:	f008 ff4d 	bl	e004 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    516a:	b120      	cbz	r0, 5176 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12a>
    516c:	f640 41e6 	movw	r1, #3302	; 0xce6
    5170:	2031      	movs	r0, #49	; 0x31
    5172:	f7fb fc1d 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5176:	6860      	ldr	r0, [r4, #4]
    5178:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    517c:	290a      	cmp	r1, #10
    517e:	d001      	beq.n	5184 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138>
    5180:	290b      	cmp	r1, #11
    5182:	d119      	bne.n	51b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    5184:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
    5188:	f8b0 32cc 	ldrh.w	r3, [r0, #716]	; 0x2cc
    518c:	1ad2      	subs	r2, r2, r3
    518e:	b212      	sxth	r2, r2
    5190:	2a00      	cmp	r2, #0
    5192:	db11      	blt.n	51b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    5194:	f8d0 12ce 	ldr.w	r1, [r0, #718]	; 0x2ce
    5198:	f8c0 10a6 	str.w	r1, [r0, #166]	; 0xa6
    519c:	f890 12d2 	ldrb.w	r1, [r0, #722]	; 0x2d2
    51a0:	f880 10aa 	strb.w	r1, [r0, #170]	; 0xaa
    51a4:	2103      	movs	r1, #3
    51a6:	f7fd faaf 	bl	2708 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    51aa:	6860      	ldr	r0, [r4, #4]
    51ac:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    51b0:	21ff      	movs	r1, #255	; 0xff
    51b2:	f880 10f4 	strb.w	r1, [r0, #244]	; 0xf4
    51b6:	e026      	b.n	5206 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    51b8:	2925      	cmp	r1, #37	; 0x25
    51ba:	d111      	bne.n	51e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    51bc:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
    51c0:	f8b0 22cc 	ldrh.w	r2, [r0, #716]	; 0x2cc
    51c4:	1a89      	subs	r1, r1, r2
    51c6:	b209      	sxth	r1, r1
    51c8:	2900      	cmp	r1, #0
    51ca:	db09      	blt.n	51e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    51cc:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    51d0:	f000 fe82 	bl	5ed8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe8c>
    51d4:	2800      	cmp	r0, #0
    51d6:	6860      	ldr	r0, [r4, #4]
    51d8:	f880 513c 	strb.w	r5, [r0, #316]	; 0x13c
    51dc:	d029      	beq.n	5232 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    51de:	e012      	b.n	5206 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    51e0:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    51e4:	2925      	cmp	r1, #37	; 0x25
    51e6:	d001      	beq.n	51ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0>
    51e8:	2927      	cmp	r1, #39	; 0x27
    51ea:	d10c      	bne.n	5206 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    51ec:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
    51f0:	f8b0 22cc 	ldrh.w	r2, [r0, #716]	; 0x2cc
    51f4:	1a89      	subs	r1, r1, r2
    51f6:	b209      	sxth	r1, r1
    51f8:	2900      	cmp	r1, #0
    51fa:	db04      	blt.n	5206 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    51fc:	f880 509d 	strb.w	r5, [r0, #157]	; 0x9d
    5200:	f000 fe6a 	bl	5ed8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe8c>
    5204:	b1a8      	cbz	r0, 5232 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    5206:	480f      	ldr	r0, [pc, #60]	; (5244 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f8>)
    5208:	9000      	str	r0, [sp, #0]
    520a:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
    520e:	4b0e      	ldr	r3, [pc, #56]	; (5248 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fc>)
    5210:	4a0e      	ldr	r2, [pc, #56]	; (524c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x200>)
    5212:	f7fc fb9b 	bl	194c <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA>
    5216:	6860      	ldr	r0, [r4, #4]
    5218:	2301      	movs	r3, #1
    521a:	2105      	movs	r1, #5
    521c:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5220:	3080      	adds	r0, #128	; 0x80
    5222:	f008 fd43 	bl	dcac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5226:	2800      	cmp	r0, #0
    5228:	d009      	beq.n	523e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f2>
    522a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    522e:	f7fc bb87 	b.w	1940 <sym_DDEKRCVCBAV6DMR2JGOTTXJPMB6OW3IK3MJRV2Q>
    5232:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5236:	2100      	movs	r1, #0
    5238:	4608      	mov	r0, r1
    523a:	f000 bb9f 	b.w	597c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x930>
    523e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5240:	20000124 	.word	0x20000124
    5244:	0000597d 	.word	0x0000597d
    5248:	000054cd 	.word	0x000054cd
    524c:	00005e25 	.word	0x00005e25
    5250:	491d      	ldr	r1, [pc, #116]	; (52c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27c>)
    5252:	b508      	push	{r3, lr}
    5254:	6849      	ldr	r1, [r1, #4]
    5256:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
    525a:	b1c0      	cbz	r0, 528e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x242>
    525c:	2a11      	cmp	r2, #17
    525e:	d006      	beq.n	526e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x222>
    5260:	2a15      	cmp	r2, #21
    5262:	d007      	beq.n	5274 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    5264:	2a16      	cmp	r2, #22
    5266:	d009      	beq.n	527c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x230>
    5268:	2a1c      	cmp	r2, #28
    526a:	d128      	bne.n	52be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x272>
    526c:	e009      	b.n	5282 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x236>
    526e:	2101      	movs	r1, #1
    5270:	200b      	movs	r0, #11
    5272:	e008      	b.n	5286 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
    5274:	4814      	ldr	r0, [pc, #80]	; (52c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27c>)
    5276:	f00a f9e0 	bl	f63a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x90>
    527a:	e006      	b.n	528a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23e>
    527c:	f000 fd90 	bl	5da0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd54>
    5280:	e003      	b.n	528a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23e>
    5282:	2101      	movs	r1, #1
    5284:	2006      	movs	r0, #6
    5286:	f000 fd6d 	bl	5d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    528a:	2001      	movs	r0, #1
    528c:	bd08      	pop	{r3, pc}
    528e:	2a22      	cmp	r2, #34	; 0x22
    5290:	d004      	beq.n	529c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x250>
    5292:	2a2f      	cmp	r2, #47	; 0x2f
    5294:	d113      	bne.n	52be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x272>
    5296:	2101      	movs	r1, #1
    5298:	2011      	movs	r0, #17
    529a:	e7f4      	b.n	5286 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
    529c:	f891 013c 	ldrb.w	r0, [r1, #316]	; 0x13c
    52a0:	2802      	cmp	r0, #2
    52a2:	d00e      	beq.n	52c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    52a4:	f891 013c 	ldrb.w	r0, [r1, #316]	; 0x13c
    52a8:	2801      	cmp	r0, #1
    52aa:	d108      	bne.n	52be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x272>
    52ac:	f891 013d 	ldrb.w	r0, [r1, #317]	; 0x13d
    52b0:	f88d 0000 	strb.w	r0, [sp]
    52b4:	9800      	ldr	r0, [sp, #0]
    52b6:	9000      	str	r0, [sp, #0]
    52b8:	f89d 0000 	ldrb.w	r0, [sp]
    52bc:	b108      	cbz	r0, 52c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    52be:	2000      	movs	r0, #0
    52c0:	bd08      	pop	{r3, pc}
    52c2:	2101      	movs	r1, #1
    52c4:	2017      	movs	r0, #23
    52c6:	e7de      	b.n	5286 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
    52c8:	20000124 	.word	0x20000124
    52cc:	b538      	push	{r3, r4, r5, lr}
    52ce:	2800      	cmp	r0, #0
    52d0:	d173      	bne.n	53ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36e>
    52d2:	4c3b      	ldr	r4, [pc, #236]	; (53c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x374>)
    52d4:	6860      	ldr	r0, [r4, #4]
    52d6:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
    52da:	07ca      	lsls	r2, r1, #31
    52dc:	d002      	beq.n	52e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x298>
    52de:	2101      	movs	r1, #1
    52e0:	2009      	movs	r0, #9
    52e2:	e066      	b.n	53b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x366>
    52e4:	078a      	lsls	r2, r1, #30
    52e6:	d50a      	bpl.n	52fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b2>
    52e8:	2101      	movs	r1, #1
    52ea:	200c      	movs	r0, #12
    52ec:	f000 fd3a 	bl	5d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    52f0:	6860      	ldr	r0, [r4, #4]
    52f2:	f810 1fdd 	ldrb.w	r1, [r0, #221]!
    52f6:	f041 0101 	orr.w	r1, r1, #1
    52fa:	7001      	strb	r1, [r0, #0]
    52fc:	e05b      	b.n	53b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36a>
    52fe:	074a      	lsls	r2, r1, #29
    5300:	d502      	bpl.n	5308 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
    5302:	2101      	movs	r1, #1
    5304:	2013      	movs	r0, #19
    5306:	e054      	b.n	53b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x366>
    5308:	070a      	lsls	r2, r1, #28
    530a:	d506      	bpl.n	531a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ce>
    530c:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
    5310:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    5314:	2101      	movs	r1, #1
    5316:	2007      	movs	r0, #7
    5318:	e04b      	b.n	53b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x366>
    531a:	f011 0f30 	tst.w	r1, #48	; 0x30
    531e:	d044      	beq.n	53aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x35e>
    5320:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    5324:	f88d 1000 	strb.w	r1, [sp]
    5328:	9900      	ldr	r1, [sp, #0]
    532a:	9100      	str	r1, [sp, #0]
    532c:	f89d 1000 	ldrb.w	r1, [sp]
    5330:	bbc1      	cbnz	r1, 53a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x358>
    5332:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    5336:	2500      	movs	r5, #0
    5338:	f88d 1000 	strb.w	r1, [sp]
    533c:	9900      	ldr	r1, [sp, #0]
    533e:	9100      	str	r1, [sp, #0]
    5340:	f89d 1000 	ldrb.w	r1, [sp]
    5344:	b1c1      	cbz	r1, 5378 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x32c>
    5346:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    534a:	2925      	cmp	r1, #37	; 0x25
    534c:	d02b      	beq.n	53a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x35a>
    534e:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    5352:	2925      	cmp	r1, #37	; 0x25
    5354:	d027      	beq.n	53a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x35a>
    5356:	2300      	movs	r3, #0
    5358:	f200 22ce 	addw	r2, r0, #718	; 0x2ce
    535c:	f500 7199 	add.w	r1, r0, #306	; 0x132
    5360:	f009 f876 	bl	e450 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    5364:	6860      	ldr	r0, [r4, #4]
    5366:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    536a:	f021 0120 	bic.w	r1, r1, #32
    536e:	f041 0110 	orr.w	r1, r1, #16
    5372:	6001      	str	r1, [r0, #0]
    5374:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    5378:	6860      	ldr	r0, [r4, #4]
    537a:	f890 108c 	ldrb.w	r1, [r0, #140]	; 0x8c
    537e:	06c9      	lsls	r1, r1, #27
    5380:	d51b      	bpl.n	53ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36e>
    5382:	f009 f880 	bl	e486 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    5386:	480e      	ldr	r0, [pc, #56]	; (53c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x374>)
    5388:	f009 fa3e 	bl	e808 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>
    538c:	6861      	ldr	r1, [r4, #4]
    538e:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    5392:	8bc2      	ldrh	r2, [r0, #30]
    5394:	f8a1 2128 	strh.w	r2, [r1, #296]	; 0x128
    5398:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    539a:	f8a1 012a 	strh.w	r0, [r1, #298]	; 0x12a
    539e:	2101      	movs	r1, #1
    53a0:	2015      	movs	r0, #21
    53a2:	e006      	b.n	53b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x366>
    53a4:	e009      	b.n	53ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36e>
    53a6:	2301      	movs	r3, #1
    53a8:	e7d6      	b.n	5358 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x30c>
    53aa:	0648      	lsls	r0, r1, #25
    53ac:	d505      	bpl.n	53ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36e>
    53ae:	2101      	movs	r1, #1
    53b0:	2024      	movs	r0, #36	; 0x24
    53b2:	f000 fcd7 	bl	5d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    53b6:	2001      	movs	r0, #1
    53b8:	bd38      	pop	{r3, r4, r5, pc}
    53ba:	2000      	movs	r0, #0
    53bc:	bd38      	pop	{r3, r4, r5, pc}
    53be:	0000      	.short	0x0000
    53c0:	20000124 	.word	0x20000124
    53c4:	b570      	push	{r4, r5, r6, lr}
    53c6:	460d      	mov	r5, r1
    53c8:	4606      	mov	r6, r0
    53ca:	f008 ff76 	bl	e2ba <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>
    53ce:	4604      	mov	r4, r0
    53d0:	4630      	mov	r0, r6
    53d2:	f008 ff74 	bl	e2be <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>
    53d6:	4629      	mov	r1, r5
    53d8:	f000 f81e 	bl	5418 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3cc>
    53dc:	b1b8      	cbz	r0, 540e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c2>
    53de:	4620      	mov	r0, r4
    53e0:	f008 fd0e 	bl	de00 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    53e4:	0001      	movs	r1, r0
    53e6:	d00d      	beq.n	5404 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b8>
    53e8:	480a      	ldr	r0, [pc, #40]	; (5414 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c8>)
    53ea:	6840      	ldr	r0, [r0, #4]
    53ec:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    53f0:	428a      	cmp	r2, r1
    53f2:	d007      	beq.n	5404 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b8>
    53f4:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    53f8:	2901      	cmp	r1, #1
    53fa:	d005      	beq.n	5408 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3bc>
    53fc:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    5400:	4220      	tst	r0, r4
    5402:	d004      	beq.n	540e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c2>
    5404:	2001      	movs	r0, #1
    5406:	bd70      	pop	{r4, r5, r6, pc}
    5408:	f890 013f 	ldrb.w	r0, [r0, #319]	; 0x13f
    540c:	e7f8      	b.n	5400 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b4>
    540e:	2000      	movs	r0, #0
    5410:	bd70      	pop	{r4, r5, r6, pc}
    5412:	0000      	.short	0x0000
    5414:	20000124 	.word	0x20000124
    5418:	b570      	push	{r4, r5, r6, lr}
    541a:	460d      	mov	r5, r1
    541c:	4604      	mov	r4, r0
    541e:	f008 fcef 	bl	de00 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    5422:	b350      	cbz	r0, 547a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    5424:	4916      	ldr	r1, [pc, #88]	; (5480 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x434>)
    5426:	6849      	ldr	r1, [r1, #4]
    5428:	f891 206a 	ldrb.w	r2, [r1, #106]	; 0x6a
    542c:	4282      	cmp	r2, r0
    542e:	d024      	beq.n	547a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    5430:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
    5434:	2b01      	cmp	r3, #1
    5436:	d005      	beq.n	5444 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f8>
    5438:	f891 3066 	ldrb.w	r3, [r1, #102]	; 0x66
    543c:	4223      	tst	r3, r4
    543e:	d013      	beq.n	5468 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x41c>
    5440:	b11d      	cbz	r5, 544a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3fe>
    5442:	e01a      	b.n	547a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    5444:	f891 313e 	ldrb.w	r3, [r1, #318]	; 0x13e
    5448:	e7f8      	b.n	543c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f0>
    544a:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    544e:	4221      	tst	r1, r4
    5450:	d113      	bne.n	547a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    5452:	b15a      	cbz	r2, 546c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x420>
    5454:	2a04      	cmp	r2, #4
    5456:	d00e      	beq.n	5476 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
    5458:	2804      	cmp	r0, #4
    545a:	d00c      	beq.n	5476 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
    545c:	2a08      	cmp	r2, #8
    545e:	d00a      	beq.n	5476 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
    5460:	2808      	cmp	r0, #8
    5462:	d008      	beq.n	5476 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
    5464:	4282      	cmp	r2, r0
    5466:	d908      	bls.n	547a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    5468:	2000      	movs	r0, #0
    546a:	bd70      	pop	{r4, r5, r6, pc}
    546c:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    5470:	2006      	movs	r0, #6
    5472:	f7fb fa9d 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5476:	4282      	cmp	r2, r0
    5478:	d3f6      	bcc.n	5468 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x41c>
    547a:	2001      	movs	r0, #1
    547c:	bd70      	pop	{r4, r5, r6, pc}
    547e:	0000      	.short	0x0000
    5480:	20000124 	.word	0x20000124
    5484:	b510      	push	{r4, lr}
    5486:	4c10      	ldr	r4, [pc, #64]	; (54c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x47c>)
    5488:	2301      	movs	r3, #1
    548a:	2100      	movs	r1, #0
    548c:	6860      	ldr	r0, [r4, #4]
    548e:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    5492:	3080      	adds	r0, #128	; 0x80
    5494:	f008 fc0a 	bl	dcac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5498:	b140      	cbz	r0, 54ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x460>
    549a:	6860      	ldr	r0, [r4, #4]
    549c:	2301      	movs	r3, #1
    549e:	2104      	movs	r1, #4
    54a0:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    54a4:	3080      	adds	r0, #128	; 0x80
    54a6:	f008 fc01 	bl	dcac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    54aa:	b108      	cbz	r0, 54b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x464>
    54ac:	2000      	movs	r0, #0
    54ae:	bd10      	pop	{r4, pc}
    54b0:	6860      	ldr	r0, [r4, #4]
    54b2:	f890 00ca 	ldrb.w	r0, [r0, #202]	; 0xca
    54b6:	2800      	cmp	r0, #0
    54b8:	d0f9      	beq.n	54ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x462>
    54ba:	2100      	movs	r1, #0
    54bc:	2012      	movs	r0, #18
    54be:	f000 fc51 	bl	5d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    54c2:	2001      	movs	r0, #1
    54c4:	bd10      	pop	{r4, pc}
    54c6:	0000      	.short	0x0000
    54c8:	20000124 	.word	0x20000124
    54cc:	490d      	ldr	r1, [pc, #52]	; (5504 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b8>)
    54ce:	4602      	mov	r2, r0
    54d0:	7848      	ldrb	r0, [r1, #1]
    54d2:	b9a0      	cbnz	r0, 54fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b2>
    54d4:	f101 0010 	add.w	r0, r1, #16
    54d8:	6840      	ldr	r0, [r0, #4]
    54da:	b142      	cbz	r2, 54ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a2>
    54dc:	7889      	ldrb	r1, [r1, #2]
    54de:	0709      	lsls	r1, r1, #28
    54e0:	d503      	bpl.n	54ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49e>
    54e2:	f890 009f 	ldrb.w	r0, [r0, #159]	; 0x9f
    54e6:	2807      	cmp	r0, #7
    54e8:	d009      	beq.n	54fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b2>
    54ea:	2001      	movs	r0, #1
    54ec:	4770      	bx	lr
    54ee:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    54f2:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    54f4:	8e81      	ldrh	r1, [r0, #52]	; 0x34
    54f6:	428a      	cmp	r2, r1
    54f8:	d801      	bhi.n	54fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b2>
    54fa:	f7ff b83f 	b.w	457c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    54fe:	2000      	movs	r0, #0
    5500:	4770      	bx	lr
    5502:	0000      	.short	0x0000
    5504:	20000114 	.word	0x20000114
    5508:	b538      	push	{r3, r4, r5, lr}
    550a:	4c32      	ldr	r4, [pc, #200]	; (55d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x588>)
    550c:	4605      	mov	r5, r0
    550e:	6860      	ldr	r0, [r4, #4]
    5510:	3080      	adds	r0, #128	; 0x80
    5512:	f00a f859 	bl	f5c8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    5516:	2800      	cmp	r0, #0
    5518:	d15b      	bne.n	55d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    551a:	2d00      	cmp	r5, #0
    551c:	d159      	bne.n	55d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    551e:	6860      	ldr	r0, [r4, #4]
    5520:	2301      	movs	r3, #1
    5522:	4619      	mov	r1, r3
    5524:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    5528:	3080      	adds	r0, #128	; 0x80
    552a:	f008 fbbf 	bl	dcac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    552e:	2800      	cmp	r0, #0
    5530:	d14f      	bne.n	55d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5532:	6860      	ldr	r0, [r4, #4]
    5534:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    5538:	f88d 1000 	strb.w	r1, [sp]
    553c:	9900      	ldr	r1, [sp, #0]
    553e:	9100      	str	r1, [sp, #0]
    5540:	f89d 2000 	ldrb.w	r2, [sp]
    5544:	2100      	movs	r1, #0
    5546:	b142      	cbz	r2, 555a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x50e>
    5548:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
    554c:	f890 1131 	ldrb.w	r1, [r0, #305]	; 0x131
    5550:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    5554:	2100      	movs	r1, #0
    5556:	2002      	movs	r0, #2
    5558:	e030      	b.n	55bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x570>
    555a:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    555e:	2301      	movs	r3, #1
    5560:	2104      	movs	r1, #4
    5562:	3080      	adds	r0, #128	; 0x80
    5564:	f008 fba2 	bl	dcac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5568:	4605      	mov	r5, r0
    556a:	f7ff feaf 	bl	52cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x280>
    556e:	2800      	cmp	r0, #0
    5570:	d12f      	bne.n	55d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5572:	4628      	mov	r0, r5
    5574:	f7ff fe6c 	bl	5250 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    5578:	2800      	cmp	r0, #0
    557a:	d12a      	bne.n	55d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    557c:	f7ff ff82 	bl	5484 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x438>
    5580:	2800      	cmp	r0, #0
    5582:	d126      	bne.n	55d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5584:	6860      	ldr	r0, [r4, #4]
    5586:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    558a:	2909      	cmp	r1, #9
    558c:	d01a      	beq.n	55c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x578>
    558e:	2d00      	cmp	r5, #0
    5590:	d11f      	bne.n	55d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5592:	f000 fb13 	bl	5bbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb70>
    5596:	2800      	cmp	r0, #0
    5598:	d11b      	bne.n	55d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    559a:	6860      	ldr	r0, [r4, #4]
    559c:	2301      	movs	r3, #1
    559e:	2100      	movs	r1, #0
    55a0:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    55a4:	3080      	adds	r0, #128	; 0x80
    55a6:	f008 fb81 	bl	dcac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    55aa:	2800      	cmp	r0, #0
    55ac:	d011      	beq.n	55d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    55ae:	6860      	ldr	r0, [r4, #4]
    55b0:	f890 02c4 	ldrb.w	r0, [r0, #708]	; 0x2c4
    55b4:	2800      	cmp	r0, #0
    55b6:	d00c      	beq.n	55d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    55b8:	2100      	movs	r1, #0
    55ba:	20ff      	movs	r0, #255	; 0xff
    55bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    55c0:	f000 bbd0 	b.w	5d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    55c4:	f890 1121 	ldrb.w	r1, [r0, #289]	; 0x121
    55c8:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    55cc:	2100      	movs	r1, #0
    55ce:	2007      	movs	r0, #7
    55d0:	e7f4      	b.n	55bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x570>
    55d2:	bd38      	pop	{r3, r4, r5, pc}
    55d4:	20000124 	.word	0x20000124
    55d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    55da:	4d2b      	ldr	r5, [pc, #172]	; (5688 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63c>)
    55dc:	0006      	movs	r6, r0
    55de:	f105 0410 	add.w	r4, r5, #16
    55e2:	d133      	bne.n	564c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
    55e4:	f000 f8aa 	bl	573c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6f0>
    55e8:	f000 f852 	bl	5690 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x644>
    55ec:	0006      	movs	r6, r0
    55ee:	d12d      	bne.n	564c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
    55f0:	8869      	ldrh	r1, [r5, #2]
    55f2:	0748      	lsls	r0, r1, #29
    55f4:	d506      	bpl.n	5604 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b8>
    55f6:	6860      	ldr	r0, [r4, #4]
    55f8:	f890 009f 	ldrb.w	r0, [r0, #159]	; 0x9f
    55fc:	2806      	cmp	r0, #6
    55fe:	d101      	bne.n	5604 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b8>
    5600:	2001      	movs	r0, #1
    5602:	7028      	strb	r0, [r5, #0]
    5604:	0788      	lsls	r0, r1, #30
    5606:	d516      	bpl.n	5636 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ea>
    5608:	68a8      	ldr	r0, [r5, #8]
    560a:	78c0      	ldrb	r0, [r0, #3]
    560c:	282b      	cmp	r0, #43	; 0x2b
    560e:	d207      	bcs.n	5620 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    5610:	491e      	ldr	r1, [pc, #120]	; (568c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x640>)
    5612:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    5616:	b119      	cbz	r1, 5620 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    5618:	481b      	ldr	r0, [pc, #108]	; (5688 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63c>)
    561a:	3010      	adds	r0, #16
    561c:	4788      	blx	r1
    561e:	e00a      	b.n	5636 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ea>
    5620:	28ff      	cmp	r0, #255	; 0xff
    5622:	d004      	beq.n	562e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5e2>
    5624:	f640 0148 	movw	r1, #2120	; 0x848
    5628:	2031      	movs	r0, #49	; 0x31
    562a:	f7fb f9c1 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    562e:	4816      	ldr	r0, [pc, #88]	; (5688 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63c>)
    5630:	3010      	adds	r0, #16
    5632:	f00a f841 	bl	f6b8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x10e>
    5636:	78a8      	ldrb	r0, [r5, #2]
    5638:	06c0      	lsls	r0, r0, #27
    563a:	d507      	bpl.n	564c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
    563c:	6860      	ldr	r0, [r4, #4]
    563e:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5642:	290a      	cmp	r1, #10
    5644:	d102      	bne.n	564c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
    5646:	210b      	movs	r1, #11
    5648:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    564c:	7868      	ldrb	r0, [r5, #1]
    564e:	0700      	lsls	r0, r0, #28
    5650:	d518      	bpl.n	5684 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x638>
    5652:	6860      	ldr	r0, [r4, #4]
    5654:	2301      	movs	r3, #1
    5656:	2105      	movs	r1, #5
    5658:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    565c:	3080      	adds	r0, #128	; 0x80
    565e:	f008 fb25 	bl	dcac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5662:	b108      	cbz	r0, 5668 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x61c>
    5664:	2608      	movs	r6, #8
    5666:	e00d      	b.n	5684 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x638>
    5668:	2500      	movs	r5, #0
    566a:	4669      	mov	r1, sp
    566c:	2003      	movs	r0, #3
    566e:	9500      	str	r5, [sp, #0]
    5670:	f7fc fa2e 	bl	1ad0 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI>
    5674:	9800      	ldr	r0, [sp, #0]
    5676:	b128      	cbz	r0, 5684 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x638>
    5678:	7205      	strb	r5, [r0, #8]
    567a:	2210      	movs	r2, #16
    567c:	6861      	ldr	r1, [r4, #4]
    567e:	9800      	ldr	r0, [sp, #0]
    5680:	f008 febc 	bl	e3fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    5684:	4630      	mov	r0, r6
    5686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5688:	20000114 	.word	0x20000114
    568c:	200001d8 	.word	0x200001d8
    5690:	b570      	push	{r4, r5, r6, lr}
    5692:	4d28      	ldr	r5, [pc, #160]	; (5734 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e8>)
    5694:	2000      	movs	r0, #0
    5696:	78a9      	ldrb	r1, [r5, #2]
    5698:	07c9      	lsls	r1, r1, #31
    569a:	d017      	beq.n	56cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x680>
    569c:	68e8      	ldr	r0, [r5, #12]
    569e:	f105 0410 	add.w	r4, r5, #16
    56a2:	2301      	movs	r3, #1
    56a4:	78c6      	ldrb	r6, [r0, #3]
    56a6:	6860      	ldr	r0, [r4, #4]
    56a8:	2105      	movs	r1, #5
    56aa:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    56ae:	3080      	adds	r0, #128	; 0x80
    56b0:	f008 fafc 	bl	dcac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    56b4:	b158      	cbz	r0, 56ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x682>
    56b6:	1eb6      	subs	r6, r6, #2
    56b8:	2e0a      	cmp	r6, #10
    56ba:	d206      	bcs.n	56ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x67e>
    56bc:	e8df f006 	tbb	[pc, r6]
    56c0:	05050707 	.word	0x05050707
    56c4:	05050707 	.word	0x05050707
    56c8:	0707      	.short	0x0707
    56ca:	2008      	movs	r0, #8
    56cc:	bd70      	pop	{r4, r5, r6, pc}
    56ce:	68e8      	ldr	r0, [r5, #12]
    56d0:	f7fd f944 	bl	295c <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>
    56d4:	b338      	cbz	r0, 5726 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
    56d6:	68e8      	ldr	r0, [r5, #12]
    56d8:	78c5      	ldrb	r5, [r0, #3]
    56da:	b11d      	cbz	r5, 56e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x698>
    56dc:	2d01      	cmp	r5, #1
    56de:	d001      	beq.n	56e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x698>
    56e0:	2d16      	cmp	r5, #22
    56e2:	d113      	bne.n	570c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c0>
    56e4:	6860      	ldr	r0, [r4, #4]
    56e6:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    56ea:	f008 fb37 	bl	dd5c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    56ee:	b168      	cbz	r0, 570c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c0>
    56f0:	6861      	ldr	r1, [r4, #4]
    56f2:	f891 009d 	ldrb.w	r0, [r1, #157]	; 0x9d
    56f6:	2820      	cmp	r0, #32
    56f8:	d008      	beq.n	570c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c0>
    56fa:	2821      	cmp	r0, #33	; 0x21
    56fc:	d003      	beq.n	5706 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ba>
    56fe:	2d16      	cmp	r5, #22
    5700:	d00f      	beq.n	5722 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6d6>
    5702:	2002      	movs	r0, #2
    5704:	bd70      	pop	{r4, r5, r6, pc}
    5706:	202e      	movs	r0, #46	; 0x2e
    5708:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    570c:	2d2b      	cmp	r5, #43	; 0x2b
    570e:	d20a      	bcs.n	5726 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
    5710:	4809      	ldr	r0, [pc, #36]	; (5738 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ec>)
    5712:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
    5716:	b131      	cbz	r1, 5726 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
    5718:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    571c:	4805      	ldr	r0, [pc, #20]	; (5734 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e8>)
    571e:	3010      	adds	r0, #16
    5720:	4708      	bx	r1
    5722:	2020      	movs	r0, #32
    5724:	bd70      	pop	{r4, r5, r6, pc}
    5726:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    572a:	4802      	ldr	r0, [pc, #8]	; (5734 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e8>)
    572c:	3010      	adds	r0, #16
    572e:	f000 bd47 	b.w	61c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    5732:	0000      	.short	0x0000
    5734:	20000114 	.word	0x20000114
    5738:	2000012c 	.word	0x2000012c
    573c:	b570      	push	{r4, r5, r6, lr}
    573e:	4e25      	ldr	r6, [pc, #148]	; (57d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x788>)
    5740:	78b0      	ldrb	r0, [r6, #2]
    5742:	0700      	lsls	r0, r0, #28
    5744:	d545      	bpl.n	57d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x786>
    5746:	f106 0410 	add.w	r4, r6, #16
    574a:	6860      	ldr	r0, [r4, #4]
    574c:	3080      	adds	r0, #128	; 0x80
    574e:	f009 ff3b 	bl	f5c8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    5752:	b148      	cbz	r0, 5768 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x71c>
    5754:	6860      	ldr	r0, [r4, #4]
    5756:	21fe      	movs	r1, #254	; 0xfe
    5758:	2500      	movs	r5, #0
    575a:	f880 1126 	strb.w	r1, [r0, #294]	; 0x126
    575e:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5762:	291a      	cmp	r1, #26
    5764:	d10e      	bne.n	5784 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x738>
    5766:	e004      	b.n	5772 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x726>
    5768:	f640 0154 	movw	r1, #2132	; 0x854
    576c:	2031      	movs	r0, #49	; 0x31
    576e:	f7fb f91f 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5772:	f880 50db 	strb.w	r5, [r0, #219]	; 0xdb
    5776:	4817      	ldr	r0, [pc, #92]	; (57d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x788>)
    5778:	3010      	adds	r0, #16
    577a:	f008 ff80 	bl	e67e <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    577e:	6860      	ldr	r0, [r4, #4]
    5780:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    5784:	6860      	ldr	r0, [r4, #4]
    5786:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    578a:	2920      	cmp	r1, #32
    578c:	d002      	beq.n	5794 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x748>
    578e:	2931      	cmp	r1, #49	; 0x31
    5790:	d116      	bne.n	57c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x774>
    5792:	e00e      	b.n	57b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x766>
    5794:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5798:	2301      	movs	r3, #1
    579a:	210b      	movs	r1, #11
    579c:	3080      	adds	r0, #128	; 0x80
    579e:	f008 fa85 	bl	dcac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    57a2:	b108      	cbz	r0, 57a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x75c>
    57a4:	202e      	movs	r0, #46	; 0x2e
    57a6:	e000      	b.n	57aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x75e>
    57a8:	2021      	movs	r0, #33	; 0x21
    57aa:	6861      	ldr	r1, [r4, #4]
    57ac:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    57b0:	e006      	b.n	57c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x774>
    57b2:	2101      	movs	r1, #1
    57b4:	f880 12c5 	strb.w	r1, [r0, #709]	; 0x2c5
    57b8:	f880 509d 	strb.w	r5, [r0, #157]	; 0x9d
    57bc:	f880 50d6 	strb.w	r5, [r0, #214]	; 0xd6
    57c0:	6860      	ldr	r0, [r4, #4]
    57c2:	f890 109f 	ldrb.w	r1, [r0, #159]	; 0x9f
    57c6:	2907      	cmp	r1, #7
    57c8:	d103      	bne.n	57d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x786>
    57ca:	2102      	movs	r1, #2
    57cc:	7031      	strb	r1, [r6, #0]
    57ce:	f880 1126 	strb.w	r1, [r0, #294]	; 0x126
    57d2:	bd70      	pop	{r4, r5, r6, pc}
    57d4:	20000114 	.word	0x20000114
    57d8:	b538      	push	{r3, r4, r5, lr}
    57da:	4605      	mov	r5, r0
    57dc:	4668      	mov	r0, sp
    57de:	f7fc f811 	bl	1804 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    57e2:	b308      	cbz	r0, 5828 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7dc>
    57e4:	2222      	movs	r2, #34	; 0x22
    57e6:	2100      	movs	r1, #0
    57e8:	9800      	ldr	r0, [sp, #0]
    57ea:	f00b fbc6 	bl	10f7a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    57ee:	2103      	movs	r1, #3
    57f0:	9800      	ldr	r0, [sp, #0]
    57f2:	f008 fd7c 	bl	e2ee <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    57f6:	9800      	ldr	r0, [sp, #0]
    57f8:	7801      	ldrb	r1, [r0, #0]
    57fa:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    57fe:	7001      	strb	r1, [r0, #0]
    5800:	4629      	mov	r1, r5
    5802:	f7fd f8bb 	bl	297c <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>
    5806:	4c5b      	ldr	r4, [pc, #364]	; (5974 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x928>)
    5808:	2d11      	cmp	r5, #17
    580a:	d032      	beq.n	5872 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x826>
    580c:	dc0f      	bgt.n	582e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e2>
    580e:	f1a5 0502 	sub.w	r5, r5, #2
    5812:	2d0d      	cmp	r5, #13
    5814:	d21f      	bcs.n	5856 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80a>
    5816:	e8df f005 	tbb	[pc, r5]
    581a:	1e21      	.short	0x1e21
    581c:	26a3a355 	.word	0x26a3a355
    5820:	a31e621e 	.word	0xa31e621e
    5824:	0090393f 	.word	0x0090393f
    5828:	f640 21fe 	movw	r1, #2814	; 0xafe
    582c:	e09e      	b.n	596c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x920>
    582e:	2d17      	cmp	r5, #23
    5830:	d075      	beq.n	591e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8d2>
    5832:	dc08      	bgt.n	5846 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7fa>
    5834:	f1a5 0512 	sub.w	r5, r5, #18
    5838:	2d05      	cmp	r5, #5
    583a:	d20c      	bcs.n	5856 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80a>
    583c:	e8df f005 	tbb	[pc, r5]
    5840:	54549090 	.word	0x54549090
    5844:	0038      	.short	0x0038
    5846:	2d23      	cmp	r5, #35	; 0x23
    5848:	d07b      	beq.n	5942 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8f6>
    584a:	2d24      	cmp	r5, #36	; 0x24
    584c:	d079      	beq.n	5942 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8f6>
    584e:	2d25      	cmp	r5, #37	; 0x25
    5850:	d077      	beq.n	5942 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8f6>
    5852:	2dff      	cmp	r5, #255	; 0xff
    5854:	d07c      	beq.n	5950 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x904>
    5856:	f640 31aa 	movw	r1, #2986	; 0xbaa
    585a:	e087      	b.n	596c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x920>
    585c:	6861      	ldr	r1, [r4, #4]
    585e:	9800      	ldr	r0, [sp, #0]
    5860:	f891 1128 	ldrb.w	r1, [r1, #296]	; 0x128
    5864:	e016      	b.n	5894 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x848>
    5866:	6860      	ldr	r0, [r4, #4]
    5868:	9900      	ldr	r1, [sp, #0]
    586a:	f890 0128 	ldrb.w	r0, [r0, #296]	; 0x128
    586e:	7108      	strb	r0, [r1, #4]
    5870:	e076      	b.n	5960 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5872:	6860      	ldr	r0, [r4, #4]
    5874:	f890 1123 	ldrb.w	r1, [r0, #291]	; 0x123
    5878:	9800      	ldr	r0, [sp, #0]
    587a:	f008 fd24 	bl	e2c6 <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>
    587e:	6860      	ldr	r0, [r4, #4]
    5880:	f890 1122 	ldrb.w	r1, [r0, #290]	; 0x122
    5884:	9800      	ldr	r0, [sp, #0]
    5886:	f008 fd22 	bl	e2ce <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>
    588a:	e069      	b.n	5960 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    588c:	6861      	ldr	r1, [r4, #4]
    588e:	9800      	ldr	r0, [sp, #0]
    5890:	f891 1122 	ldrb.w	r1, [r1, #290]	; 0x122
    5894:	7101      	strb	r1, [r0, #4]
    5896:	e063      	b.n	5960 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5898:	9800      	ldr	r0, [sp, #0]
    589a:	210d      	movs	r1, #13
    589c:	7101      	strb	r1, [r0, #4]
    589e:	2159      	movs	r1, #89	; 0x59
    58a0:	7141      	strb	r1, [r0, #5]
    58a2:	2100      	movs	r1, #0
    58a4:	7181      	strb	r1, [r0, #6]
    58a6:	2177      	movs	r1, #119	; 0x77
    58a8:	71c1      	strb	r1, [r0, #7]
    58aa:	2110      	movs	r1, #16
    58ac:	7201      	strb	r1, [r0, #8]
    58ae:	e057      	b.n	5960 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    58b0:	9800      	ldr	r0, [sp, #0]
    58b2:	6861      	ldr	r1, [r4, #4]
    58b4:	f891 113e 	ldrb.w	r1, [r1, #318]	; 0x13e
    58b8:	7101      	strb	r1, [r0, #4]
    58ba:	6861      	ldr	r1, [r4, #4]
    58bc:	f891 113f 	ldrb.w	r1, [r1, #319]	; 0x13f
    58c0:	7141      	strb	r1, [r0, #5]
    58c2:	e04d      	b.n	5960 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    58c4:	6861      	ldr	r1, [r4, #4]
    58c6:	9800      	ldr	r0, [sp, #0]
    58c8:	f501 7110 	add.w	r1, r1, #576	; 0x240
    58cc:	f008 fcb6 	bl	e23c <sym_5WHAN4NH6PZY7VV5KTN53CABJRWXR3RJHHTA7KA>
    58d0:	6861      	ldr	r1, [r4, #4]
    58d2:	9800      	ldr	r0, [sp, #0]
    58d4:	f501 718e 	add.w	r1, r1, #284	; 0x11c
    58d8:	f008 fcad 	bl	e236 <sym_RGBMWS6T65LAWR3HOVV5354MKQCATDBBY34XWQA>
    58dc:	e040      	b.n	5960 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    58de:	4825      	ldr	r0, [pc, #148]	; (5974 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x928>)
    58e0:	9900      	ldr	r1, [sp, #0]
    58e2:	f7fd fc0b 	bl	30fc <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>
    58e6:	e03b      	b.n	5960 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    58e8:	6860      	ldr	r0, [r4, #4]
    58ea:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    58ee:	9800      	ldr	r0, [sp, #0]
    58f0:	f008 fd05 	bl	e2fe <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>
    58f4:	6860      	ldr	r0, [r4, #4]
    58f6:	f8b0 112a 	ldrh.w	r1, [r0, #298]	; 0x12a
    58fa:	9800      	ldr	r0, [sp, #0]
    58fc:	f008 fd03 	bl	e306 <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>
    5900:	6860      	ldr	r0, [r4, #4]
    5902:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    5906:	9800      	ldr	r0, [sp, #0]
    5908:	f008 fd01 	bl	e30e <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>
    590c:	6860      	ldr	r0, [r4, #4]
    590e:	f8b0 1128 	ldrh.w	r1, [r0, #296]	; 0x128
    5912:	9800      	ldr	r0, [sp, #0]
    5914:	f008 fcff 	bl	e316 <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>
    5918:	e022      	b.n	5960 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    591a:	e000      	b.n	591e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8d2>
    591c:	e011      	b.n	5942 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8f6>
    591e:	6861      	ldr	r1, [r4, #4]
    5920:	f891 013c 	ldrb.w	r0, [r1, #316]	; 0x13c
    5924:	2801      	cmp	r0, #1
    5926:	9800      	ldr	r0, [sp, #0]
    5928:	d0c4      	beq.n	58b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x868>
    592a:	f891 1066 	ldrb.w	r1, [r1, #102]	; 0x66
    592e:	7101      	strb	r1, [r0, #4]
    5930:	6861      	ldr	r1, [r4, #4]
    5932:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
    5936:	e7c3      	b.n	58c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x874>
    5938:	e00a      	b.n	5950 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x904>
    593a:	9800      	ldr	r0, [sp, #0]
    593c:	f7fd fb88 	bl	3050 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>
    5940:	e00e      	b.n	5960 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5942:	4b0d      	ldr	r3, [pc, #52]	; (5978 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x92c>)
    5944:	4a0b      	ldr	r2, [pc, #44]	; (5974 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x928>)
    5946:	4628      	mov	r0, r5
    5948:	681b      	ldr	r3, [r3, #0]
    594a:	9900      	ldr	r1, [sp, #0]
    594c:	4798      	blx	r3
    594e:	e007      	b.n	5960 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5950:	6860      	ldr	r0, [r4, #4]
    5952:	f890 22c7 	ldrb.w	r2, [r0, #711]	; 0x2c7
    5956:	f8d0 12c8 	ldr.w	r1, [r0, #712]	; 0x2c8
    595a:	9800      	ldr	r0, [sp, #0]
    595c:	f008 fcb9 	bl	e2d2 <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA>
    5960:	f7fb ff2a 	bl	17b8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    5964:	2800      	cmp	r0, #0
    5966:	d104      	bne.n	5972 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x926>
    5968:	f640 31ae 	movw	r1, #2990	; 0xbae
    596c:	2031      	movs	r0, #49	; 0x31
    596e:	f7fb f81f 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5972:	bd38      	pop	{r3, r4, r5, pc}
    5974:	20000124 	.word	0x20000124
    5978:	20000284 	.word	0x20000284
    597c:	e92d 5ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    5980:	4e8c      	ldr	r6, [pc, #560]	; (5bb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb68>)
    5982:	468a      	mov	sl, r1
    5984:	6870      	ldr	r0, [r6, #4]
    5986:	8800      	ldrh	r0, [r0, #0]
    5988:	f7fb fcea 	bl	1360 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    598c:	0007      	movs	r7, r0
    598e:	d00c      	beq.n	59aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x95e>
    5990:	f1a6 0510 	sub.w	r5, r6, #16
    5994:	f04f 0400 	mov.w	r4, #0
    5998:	8868      	ldrh	r0, [r5, #2]
    599a:	05c0      	lsls	r0, r0, #23
    599c:	d50a      	bpl.n	59b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x968>
    599e:	6870      	ldr	r0, [r6, #4]
    59a0:	f8a0 40cc 	strh.w	r4, [r0, #204]	; 0xcc
    59a4:	f880 4234 	strb.w	r4, [r0, #564]	; 0x234
    59a8:	e009      	b.n	59be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x972>
    59aa:	f640 6189 	movw	r1, #3721	; 0xe89
    59ae:	2031      	movs	r0, #49	; 0x31
    59b0:	f7fa fffe 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    59b4:	6871      	ldr	r1, [r6, #4]
    59b6:	f831 0fcc 	ldrh.w	r0, [r1, #204]!
    59ba:	1c40      	adds	r0, r0, #1
    59bc:	8008      	strh	r0, [r1, #0]
    59be:	f000 ff5b 	bl	6878 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x182c>
    59c2:	f04f 0901 	mov.w	r9, #1
    59c6:	b340      	cbz	r0, 5a1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ce>
    59c8:	8868      	ldrh	r0, [r5, #2]
    59ca:	0500      	lsls	r0, r0, #20
    59cc:	d506      	bpl.n	59dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>
    59ce:	6870      	ldr	r0, [r6, #4]
    59d0:	f890 10a3 	ldrb.w	r1, [r0, #163]	; 0xa3
    59d4:	b111      	cbz	r1, 59dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>
    59d6:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
    59da:	e01e      	b.n	5a1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ce>
    59dc:	6870      	ldr	r0, [r6, #4]
    59de:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
    59e2:	1c49      	adds	r1, r1, #1
    59e4:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
    59e8:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
    59ec:	428a      	cmp	r2, r1
    59ee:	d301      	bcc.n	59f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9a8>
    59f0:	1a53      	subs	r3, r2, r1
    59f2:	e000      	b.n	59f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9aa>
    59f4:	2300      	movs	r3, #0
    59f6:	f8b5 c004 	ldrh.w	ip, [r5, #4]
    59fa:	f10c 0c05 	add.w	ip, ip, #5
    59fe:	4563      	cmp	r3, ip
    5a00:	d801      	bhi.n	5a06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ba>
    5a02:	f880 90ca 	strb.w	r9, [r0, #202]	; 0xca
    5a06:	4291      	cmp	r1, r2
    5a08:	d307      	bcc.n	5a1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ce>
    5a0a:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
    5a0e:	2202      	movs	r2, #2
    5a10:	4969      	ldr	r1, [pc, #420]	; (5bb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6c>)
    5a12:	f500 70ac 	add.w	r0, r0, #344	; 0x158
    5a16:	f008 fd05 	bl	e424 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    5a1a:	8868      	ldrh	r0, [r5, #2]
    5a1c:	f04f 0b02 	mov.w	fp, #2
    5a20:	f410 7f40 	tst.w	r0, #768	; 0x300
    5a24:	d00e      	beq.n	5a44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f8>
    5a26:	6870      	ldr	r0, [r6, #4]
    5a28:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    5a2c:	b111      	cbz	r1, 5a34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9e8>
    5a2e:	2903      	cmp	r1, #3
    5a30:	d108      	bne.n	5a44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f8>
    5a32:	e002      	b.n	5a3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ee>
    5a34:	f880 90a1 	strb.w	r9, [r0, #161]	; 0xa1
    5a38:	e001      	b.n	5a3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f2>
    5a3a:	f880 b0a1 	strb.w	fp, [r0, #161]	; 0xa1
    5a3e:	2101      	movs	r1, #1
    5a40:	f7fe fdac 	bl	459c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    5a44:	6870      	ldr	r0, [r6, #4]
    5a46:	46b0      	mov	r8, r6
    5a48:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    5a4c:	2901      	cmp	r1, #1
    5a4e:	d104      	bne.n	5a5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa0e>
    5a50:	8869      	ldrh	r1, [r5, #2]
    5a52:	0549      	lsls	r1, r1, #21
    5a54:	d501      	bpl.n	5a5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa0e>
    5a56:	f880 b0a1 	strb.w	fp, [r0, #161]	; 0xa1
    5a5a:	9900      	ldr	r1, [sp, #0]
    5a5c:	2900      	cmp	r1, #0
    5a5e:	d179      	bne.n	5b54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb08>
    5a60:	78a9      	ldrb	r1, [r5, #2]
    5a62:	0649      	lsls	r1, r1, #25
    5a64:	d502      	bpl.n	5a6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa20>
    5a66:	f8a0 4248 	strh.w	r4, [r0, #584]	; 0x248
    5a6a:	e004      	b.n	5a76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa2a>
    5a6c:	f8b0 1248 	ldrh.w	r1, [r0, #584]	; 0x248
    5a70:	1c49      	adds	r1, r1, #1
    5a72:	f8a0 1248 	strh.w	r1, [r0, #584]	; 0x248
    5a76:	4650      	mov	r0, sl
    5a78:	f7ff fdae 	bl	55d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x58c>
    5a7c:	ea40 000a 	orr.w	r0, r0, sl
    5a80:	4682      	mov	sl, r0
    5a82:	f7ff fd41 	bl	5508 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4bc>
    5a86:	f8d8 6004 	ldr.w	r6, [r8, #4]
    5a8a:	f8b6 0228 	ldrh.w	r0, [r6, #552]	; 0x228
    5a8e:	1c40      	adds	r0, r0, #1
    5a90:	f8a6 0228 	strh.w	r0, [r6, #552]	; 0x228
    5a94:	f896 022c 	ldrb.w	r0, [r6, #556]	; 0x22c
    5a98:	b128      	cbz	r0, 5aa6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa5a>
    5a9a:	f7fc f857 	bl	1b4c <sym_HMWMSCLS2E7KO3CEVZ6FUZGM6YUJ4GDX4JETJTI>
    5a9e:	b1b0      	cbz	r0, 5ace <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa82>
    5aa0:	f8a6 4228 	strh.w	r4, [r6, #552]	; 0x228
    5aa4:	e013      	b.n	5ace <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa82>
    5aa6:	f7fb ff2f 	bl	1908 <sym_R2K72KVDRFDRB7INCDL2G5SJCI6KNYCIUBETXWY>
    5aaa:	b108      	cbz	r0, 5ab0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa64>
    5aac:	f8a6 4228 	strh.w	r4, [r6, #552]	; 0x228
    5ab0:	f7fb ff24 	bl	18fc <sym_57CDLB7NR4I66F4XUEVXWWEJBBBXGSJ37LGPUXA>
    5ab4:	b158      	cbz	r0, 5ace <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa82>
    5ab6:	f896 0234 	ldrb.w	r0, [r6, #564]	; 0x234
    5aba:	1c40      	adds	r0, r0, #1
    5abc:	b2c0      	uxtb	r0, r0
    5abe:	f886 0234 	strb.w	r0, [r6, #564]	; 0x234
    5ac2:	2802      	cmp	r0, #2
    5ac4:	d903      	bls.n	5ace <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa82>
    5ac6:	f8a6 4228 	strh.w	r4, [r6, #552]	; 0x228
    5aca:	f886 4234 	strb.w	r4, [r6, #564]	; 0x234
    5ace:	f8d8 0004 	ldr.w	r0, [r8, #4]
    5ad2:	4646      	mov	r6, r8
    5ad4:	2301      	movs	r3, #1
    5ad6:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5ada:	2100      	movs	r1, #0
    5adc:	3080      	adds	r0, #128	; 0x80
    5ade:	f008 f8e5 	bl	dcac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5ae2:	b920      	cbnz	r0, 5aee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaa2>
    5ae4:	6870      	ldr	r0, [r6, #4]
    5ae6:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    5aea:	280b      	cmp	r0, #11
    5aec:	d15f      	bne.n	5bae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    5aee:	6870      	ldr	r0, [r6, #4]
    5af0:	2301      	movs	r3, #1
    5af2:	2100      	movs	r1, #0
    5af4:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    5af8:	3080      	adds	r0, #128	; 0x80
    5afa:	f008 f8d7 	bl	dcac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5afe:	b350      	cbz	r0, 5b56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    5b00:	6870      	ldr	r0, [r6, #4]
    5b02:	2301      	movs	r3, #1
    5b04:	2100      	movs	r1, #0
    5b06:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    5b0a:	3080      	adds	r0, #128	; 0x80
    5b0c:	f008 f8ce 	bl	dcac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5b10:	b308      	cbz	r0, 5b56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    5b12:	6870      	ldr	r0, [r6, #4]
    5b14:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    5b18:	2902      	cmp	r1, #2
    5b1a:	d148      	bne.n	5bae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    5b1c:	f890 0234 	ldrb.w	r0, [r0, #564]	; 0x234
    5b20:	b9c8      	cbnz	r0, 5b56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    5b22:	4638      	mov	r0, r7
    5b24:	f007 fbd4 	bl	d2d0 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    5b28:	b1a8      	cbz	r0, 5b56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    5b2a:	6870      	ldr	r0, [r6, #4]
    5b2c:	3080      	adds	r0, #128	; 0x80
    5b2e:	f009 fd4b 	bl	f5c8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    5b32:	b980      	cbnz	r0, 5b56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    5b34:	6871      	ldr	r1, [r6, #4]
    5b36:	f8b1 0222 	ldrh.w	r0, [r1, #546]	; 0x222
    5b3a:	2801      	cmp	r0, #1
    5b3c:	d937      	bls.n	5bae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    5b3e:	f881 922a 	strb.w	r9, [r1, #554]	; 0x22a
    5b42:	f8b1 20ce 	ldrh.w	r2, [r1, #206]	; 0xce
    5b46:	f8b1 00cc 	ldrh.w	r0, [r1, #204]	; 0xcc
    5b4a:	1e93      	subs	r3, r2, #2
    5b4c:	4298      	cmp	r0, r3
    5b4e:	db03      	blt.n	5b58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0c>
    5b50:	2001      	movs	r0, #1
    5b52:	e004      	b.n	5b5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb12>
    5b54:	e01c      	b.n	5b90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb44>
    5b56:	e02a      	b.n	5bae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    5b58:	1a10      	subs	r0, r2, r0
    5b5a:	1e40      	subs	r0, r0, #1
    5b5c:	b280      	uxth	r0, r0
    5b5e:	f8b1 3228 	ldrh.w	r3, [r1, #552]	; 0x228
    5b62:	88aa      	ldrh	r2, [r5, #4]
    5b64:	4293      	cmp	r3, r2
    5b66:	d301      	bcc.n	5b6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb20>
    5b68:	2201      	movs	r2, #1
    5b6a:	e002      	b.n	5b72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb26>
    5b6c:	1ad2      	subs	r2, r2, r3
    5b6e:	1c52      	adds	r2, r2, #1
    5b70:	b292      	uxth	r2, r2
    5b72:	4290      	cmp	r0, r2
    5b74:	d900      	bls.n	5b78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb2c>
    5b76:	4610      	mov	r0, r2
    5b78:	2801      	cmp	r0, #1
    5b7a:	d101      	bne.n	5b80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb34>
    5b7c:	f881 422a 	strb.w	r4, [r1, #554]	; 0x22a
    5b80:	6871      	ldr	r1, [r6, #4]
    5b82:	f8b1 2094 	ldrh.w	r2, [r1, #148]	; 0x94
    5b86:	4410      	add	r0, r2
    5b88:	f8a1 0224 	strh.w	r0, [r1, #548]	; 0x224
    5b8c:	f000 ff8e 	bl	6aac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a60>
    5b90:	78a8      	ldrb	r0, [r5, #2]
    5b92:	4652      	mov	r2, sl
    5b94:	f3c0 1180 	ubfx	r1, r0, #6, #1
    5b98:	9800      	ldr	r0, [sp, #0]
    5b9a:	f000 fe81 	bl	68a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1854>
    5b9e:	f8d8 0004 	ldr.w	r0, [r8, #4]
    5ba2:	f880 422b 	strb.w	r4, [r0, #555]	; 0x22b
    5ba6:	e8bd 5ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    5baa:	f7fb bdef 	b.w	178c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    5bae:	2001      	movs	r0, #1
    5bb0:	6871      	ldr	r1, [r6, #4]
    5bb2:	e7e3      	b.n	5b7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb30>
    5bb4:	20000124 	.word	0x20000124
    5bb8:	0000e907 	.word	0x0000e907
    5bbc:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    5bbe:	4c68      	ldr	r4, [pc, #416]	; (5d60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd14>)
    5bc0:	2301      	movs	r3, #1
    5bc2:	2100      	movs	r1, #0
    5bc4:	6860      	ldr	r0, [r4, #4]
    5bc6:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    5bca:	3080      	adds	r0, #128	; 0x80
    5bcc:	f008 f86e 	bl	dcac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5bd0:	2800      	cmp	r0, #0
    5bd2:	d07a      	beq.n	5cca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc7e>
    5bd4:	6860      	ldr	r0, [r4, #4]
    5bd6:	f890 1143 	ldrb.w	r1, [r0, #323]	; 0x143
    5bda:	2500      	movs	r5, #0
    5bdc:	b139      	cbz	r1, 5bee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xba2>
    5bde:	2100      	movs	r1, #0
    5be0:	200e      	movs	r0, #14
    5be2:	f000 f8bf 	bl	5d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    5be6:	6860      	ldr	r0, [r4, #4]
    5be8:	f880 5143 	strb.w	r5, [r0, #323]	; 0x143
    5bec:	e0b5      	b.n	5d5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0e>
    5bee:	f890 1142 	ldrb.w	r1, [r0, #322]	; 0x142
    5bf2:	b119      	cbz	r1, 5bfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb0>
    5bf4:	f890 10dd 	ldrb.w	r1, [r0, #221]	; 0xdd
    5bf8:	0789      	lsls	r1, r1, #30
    5bfa:	d016      	beq.n	5c2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbde>
    5bfc:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    5c00:	f88d 1004 	strb.w	r1, [sp, #4]
    5c04:	9901      	ldr	r1, [sp, #4]
    5c06:	9101      	str	r1, [sp, #4]
    5c08:	f89d 1004 	ldrb.w	r1, [sp, #4]
    5c0c:	b141      	cbz	r1, 5c20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbd4>
    5c0e:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    5c12:	f88d 1000 	strb.w	r1, [sp]
    5c16:	9900      	ldr	r1, [sp, #0]
    5c18:	9100      	str	r1, [sp, #0]
    5c1a:	f89d 1000 	ldrb.w	r1, [sp]
    5c1e:	b189      	cbz	r1, 5c44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbf8>
    5c20:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    5c24:	2901      	cmp	r1, #1
    5c26:	d030      	beq.n	5c8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc3e>
    5c28:	e040      	b.n	5cac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc60>
    5c2a:	2100      	movs	r1, #0
    5c2c:	200c      	movs	r0, #12
    5c2e:	f000 f899 	bl	5d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    5c32:	6860      	ldr	r0, [r4, #4]
    5c34:	f810 1fdd 	ldrb.w	r1, [r0, #221]!
    5c38:	f041 0101 	orr.w	r1, r1, #1
    5c3c:	7001      	strb	r1, [r0, #0]
    5c3e:	f880 5065 	strb.w	r5, [r0, #101]	; 0x65
    5c42:	e08a      	b.n	5d5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0e>
    5c44:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5c48:	2925      	cmp	r1, #37	; 0x25
    5c4a:	d01c      	beq.n	5c86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc3a>
    5c4c:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    5c50:	2925      	cmp	r1, #37	; 0x25
    5c52:	d018      	beq.n	5c86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc3a>
    5c54:	f05f 0300 	movs.w	r3, #0
    5c58:	f200 22ce 	addw	r2, r0, #718	; 0x2ce
    5c5c:	f500 7199 	add.w	r1, r0, #306	; 0x132
    5c60:	f008 fbf6 	bl	e450 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    5c64:	6860      	ldr	r0, [r4, #4]
    5c66:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
    5c6a:	2100      	movs	r1, #0
    5c6c:	2014      	movs	r0, #20
    5c6e:	f000 f879 	bl	5d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    5c72:	6861      	ldr	r1, [r4, #4]
    5c74:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    5c78:	8bc2      	ldrh	r2, [r0, #30]
    5c7a:	f8a1 2128 	strh.w	r2, [r1, #296]	; 0x128
    5c7e:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    5c80:	f8a1 012a 	strh.w	r0, [r1, #298]	; 0x12a
    5c84:	e069      	b.n	5d5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0e>
    5c86:	2301      	movs	r3, #1
    5c88:	e7e6      	b.n	5c58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc0c>
    5c8a:	f890 113d 	ldrb.w	r1, [r0, #317]	; 0x13d
    5c8e:	f88d 1000 	strb.w	r1, [sp]
    5c92:	9900      	ldr	r1, [sp, #0]
    5c94:	9100      	str	r1, [sp, #0]
    5c96:	f89d 1000 	ldrb.w	r1, [sp]
    5c9a:	b939      	cbnz	r1, 5cac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc60>
    5c9c:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5ca0:	2301      	movs	r3, #1
    5ca2:	210b      	movs	r1, #11
    5ca4:	3080      	adds	r0, #128	; 0x80
    5ca6:	f008 f801 	bl	dcac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5caa:	b178      	cbz	r0, 5ccc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc80>
    5cac:	6860      	ldr	r0, [r4, #4]
    5cae:	f890 1149 	ldrb.w	r1, [r0, #329]	; 0x149
    5cb2:	f88d 1000 	strb.w	r1, [sp]
    5cb6:	9900      	ldr	r1, [sp, #0]
    5cb8:	9100      	str	r1, [sp, #0]
    5cba:	f89d 1000 	ldrb.w	r1, [sp]
    5cbe:	b3b9      	cbz	r1, 5d30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce4>
    5cc0:	2100      	movs	r1, #0
    5cc2:	2023      	movs	r0, #35	; 0x23
    5cc4:	f000 f84e 	bl	5d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    5cc8:	e047      	b.n	5d5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0e>
    5cca:	e030      	b.n	5d2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce2>
    5ccc:	6860      	ldr	r0, [r4, #4]
    5cce:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    5cd2:	f009 fc81 	bl	f5d8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    5cd6:	4605      	mov	r5, r0
    5cd8:	6860      	ldr	r0, [r4, #4]
    5cda:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    5cde:	f009 fc7b 	bl	f5d8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    5ce2:	4606      	mov	r6, r0
    5ce4:	6860      	ldr	r0, [r4, #4]
    5ce6:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    5cea:	4628      	mov	r0, r5
    5cec:	f009 fc7f 	bl	f5ee <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    5cf0:	b150      	cbz	r0, 5d08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcbc>
    5cf2:	6860      	ldr	r0, [r4, #4]
    5cf4:	f890 113f 	ldrb.w	r1, [r0, #319]	; 0x13f
    5cf8:	4630      	mov	r0, r6
    5cfa:	f009 fc78 	bl	f5ee <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    5cfe:	b118      	cbz	r0, 5d08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcbc>
    5d00:	2000      	movs	r0, #0
    5d02:	f000 f943 	bl	5f8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    5d06:	e011      	b.n	5d2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce0>
    5d08:	6860      	ldr	r0, [r4, #4]
    5d0a:	2301      	movs	r3, #1
    5d0c:	2103      	movs	r1, #3
    5d0e:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5d12:	3080      	adds	r0, #128	; 0x80
    5d14:	f007 ffca 	bl	dcac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5d18:	b940      	cbnz	r0, 5d2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce0>
    5d1a:	6860      	ldr	r0, [r4, #4]
    5d1c:	2301      	movs	r3, #1
    5d1e:	2102      	movs	r1, #2
    5d20:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5d24:	3080      	adds	r0, #128	; 0x80
    5d26:	f007 ffc1 	bl	dcac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5d2a:	b110      	cbz	r0, 5d32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce6>
    5d2c:	2000      	movs	r0, #0
    5d2e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    5d30:	e002      	b.n	5d38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcec>
    5d32:	2100      	movs	r1, #0
    5d34:	2016      	movs	r0, #22
    5d36:	e7c5      	b.n	5cc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc78>
    5d38:	f890 0146 	ldrb.w	r0, [r0, #326]	; 0x146
    5d3c:	f88d 0000 	strb.w	r0, [sp]
    5d40:	9800      	ldr	r0, [sp, #0]
    5d42:	9000      	str	r0, [sp, #0]
    5d44:	f89d 0000 	ldrb.w	r0, [sp]
    5d48:	2800      	cmp	r0, #0
    5d4a:	d0f0      	beq.n	5d2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce2>
    5d4c:	2100      	movs	r1, #0
    5d4e:	2025      	movs	r0, #37	; 0x25
    5d50:	f000 f808 	bl	5d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    5d54:	6860      	ldr	r0, [r4, #4]
    5d56:	f880 5146 	strb.w	r5, [r0, #326]	; 0x146
    5d5a:	2001      	movs	r0, #1
    5d5c:	e7e7      	b.n	5d2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce2>
    5d5e:	0000      	.short	0x0000
    5d60:	20000124 	.word	0x20000124
    5d64:	b570      	push	{r4, r5, r6, lr}
    5d66:	4c0d      	ldr	r4, [pc, #52]	; (5d9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd50>)
    5d68:	4606      	mov	r6, r0
    5d6a:	460d      	mov	r5, r1
    5d6c:	6860      	ldr	r0, [r4, #4]
    5d6e:	3080      	adds	r0, #128	; 0x80
    5d70:	f009 fc2a 	bl	f5c8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    5d74:	b120      	cbz	r0, 5d80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd34>
    5d76:	f640 31b3 	movw	r1, #2995	; 0xbb3
    5d7a:	2031      	movs	r0, #49	; 0x31
    5d7c:	f7fa fe18 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d80:	6862      	ldr	r2, [r4, #4]
    5d82:	2000      	movs	r0, #0
    5d84:	2d01      	cmp	r5, #1
    5d86:	f882 6126 	strb.w	r6, [r2, #294]	; 0x126
    5d8a:	d004      	beq.n	5d96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4a>
    5d8c:	f822 0fd2 	strh.w	r0, [r2, #210]!
    5d90:	2001      	movs	r0, #1
    5d92:	7110      	strb	r0, [r2, #4]
    5d94:	bd70      	pop	{r4, r5, r6, pc}
    5d96:	f8a2 00d8 	strh.w	r0, [r2, #216]	; 0xd8
    5d9a:	bd70      	pop	{r4, r5, r6, pc}
    5d9c:	20000124 	.word	0x20000124
    5da0:	b538      	push	{r3, r4, r5, lr}
    5da2:	4c1f      	ldr	r4, [pc, #124]	; (5e20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd4>)
    5da4:	2500      	movs	r5, #0
    5da6:	6860      	ldr	r0, [r4, #4]
    5da8:	f890 12b0 	ldrb.w	r1, [r0, #688]	; 0x2b0
    5dac:	2901      	cmp	r1, #1
    5dae:	d00a      	beq.n	5dc6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd7a>
    5db0:	2902      	cmp	r1, #2
    5db2:	d133      	bne.n	5e1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
    5db4:	f890 10dc 	ldrb.w	r1, [r0, #220]	; 0xdc
    5db8:	b1d9      	cbz	r1, 5df2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xda6>
    5dba:	2106      	movs	r1, #6
    5dbc:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    5dc0:	2101      	movs	r1, #1
    5dc2:	2002      	movs	r0, #2
    5dc4:	e025      	b.n	5e12 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc6>
    5dc6:	f890 1212 	ldrb.w	r1, [r0, #530]	; 0x212
    5dca:	f88d 1000 	strb.w	r1, [sp]
    5dce:	9900      	ldr	r1, [sp, #0]
    5dd0:	9100      	str	r1, [sp, #0]
    5dd2:	f89d 1000 	ldrb.w	r1, [sp]
    5dd6:	2900      	cmp	r1, #0
    5dd8:	d120      	bne.n	5e1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
    5dda:	f500 7384 	add.w	r3, r0, #264	; 0x108
    5dde:	f500 710e 	add.w	r1, r0, #568	; 0x238
    5de2:	2200      	movs	r2, #0
    5de4:	f200 20b1 	addw	r0, r0, #689	; 0x2b1
    5de8:	f007 ff2b 	bl	dc42 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    5dec:	2101      	movs	r1, #1
    5dee:	2005      	movs	r0, #5
    5df0:	e00f      	b.n	5e12 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc6>
    5df2:	2103      	movs	r1, #3
    5df4:	2206      	movs	r2, #6
    5df6:	480a      	ldr	r0, [pc, #40]	; (5e20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd4>)
    5df8:	f008 fc4f 	bl	e69a <sym_2UM6LVQLLMOP7WZDJLNUGNNDXOSOGAIT6WB627Q>
    5dfc:	6860      	ldr	r0, [r4, #4]
    5dfe:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
    5e02:	0880      	lsrs	r0, r0, #2
    5e04:	f010 0f01 	tst.w	r0, #1
    5e08:	d001      	beq.n	5e0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc2>
    5e0a:	2011      	movs	r0, #17
    5e0c:	e000      	b.n	5e10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc4>
    5e0e:	200d      	movs	r0, #13
    5e10:	2101      	movs	r1, #1
    5e12:	f7ff ffa7 	bl	5d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    5e16:	6860      	ldr	r0, [r4, #4]
    5e18:	f880 52b0 	strb.w	r5, [r0, #688]	; 0x2b0
    5e1c:	bd38      	pop	{r3, r4, r5, pc}
    5e1e:	0000      	.short	0x0000
    5e20:	20000124 	.word	0x20000124
    5e24:	b570      	push	{r4, r5, r6, lr}
    5e26:	4b2b      	ldr	r3, [pc, #172]	; (5ed4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe88>)
    5e28:	4602      	mov	r2, r0
    5e2a:	8858      	ldrh	r0, [r3, #2]
    5e2c:	4310      	orrs	r0, r2
    5e2e:	8058      	strh	r0, [r3, #2]
    5e30:	f103 0010 	add.w	r0, r3, #16
    5e34:	2a40      	cmp	r2, #64	; 0x40
    5e36:	6840      	ldr	r0, [r0, #4]
    5e38:	d00d      	beq.n	5e56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe0a>
    5e3a:	0796      	lsls	r6, r2, #30
    5e3c:	f04f 0500 	mov.w	r5, #0
    5e40:	f04f 0401 	mov.w	r4, #1
    5e44:	ea4f 76c2 	mov.w	r6, r2, lsl #31
    5e48:	d50c      	bpl.n	5e64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe18>
    5e4a:	b14e      	cbz	r6, 5e60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe14>
    5e4c:	f640 51f6 	movw	r1, #3574	; 0xdf6
    5e50:	2031      	movs	r0, #49	; 0x31
    5e52:	f7fa fdad 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5e5a:	2104      	movs	r1, #4
    5e5c:	f7fe bb9e 	b.w	459c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    5e60:	6099      	str	r1, [r3, #8]
    5e62:	e01c      	b.n	5e9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe52>
    5e64:	b1c6      	cbz	r6, 5e98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    5e66:	60d9      	str	r1, [r3, #12]
    5e68:	78c9      	ldrb	r1, [r1, #3]
    5e6a:	2906      	cmp	r1, #6
    5e6c:	d002      	beq.n	5e74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe28>
    5e6e:	290b      	cmp	r1, #11
    5e70:	d112      	bne.n	5e98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    5e72:	e009      	b.n	5e88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe3c>
    5e74:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5e78:	2918      	cmp	r1, #24
    5e7a:	d10d      	bne.n	5e98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    5e7c:	2100      	movs	r1, #0
    5e7e:	e9c0 113e 	strd	r1, r1, [r0, #248]	; 0xf8
    5e82:	f880 40a2 	strb.w	r4, [r0, #162]	; 0xa2
    5e86:	e007      	b.n	5e98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    5e88:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5e8c:	2912      	cmp	r1, #18
    5e8e:	d103      	bne.n	5e98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    5e90:	f880 50a2 	strb.w	r5, [r0, #162]	; 0xa2
    5e94:	f880 40dc 	strb.w	r4, [r0, #220]	; 0xdc
    5e98:	0791      	lsls	r1, r2, #30
    5e9a:	d516      	bpl.n	5eca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
    5e9c:	6899      	ldr	r1, [r3, #8]
    5e9e:	78c9      	ldrb	r1, [r1, #3]
    5ea0:	2905      	cmp	r1, #5
    5ea2:	d002      	beq.n	5eaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe5e>
    5ea4:	290b      	cmp	r1, #11
    5ea6:	d110      	bne.n	5eca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
    5ea8:	e009      	b.n	5ebe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe72>
    5eaa:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5eae:	2916      	cmp	r1, #22
    5eb0:	d10b      	bne.n	5eca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
    5eb2:	2100      	movs	r1, #0
    5eb4:	e9c0 1140 	strd	r1, r1, [r0, #256]	; 0x100
    5eb8:	f880 40a3 	strb.w	r4, [r0, #163]	; 0xa3
    5ebc:	e005      	b.n	5eca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
    5ebe:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5ec2:	2911      	cmp	r1, #17
    5ec4:	d101      	bne.n	5eca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
    5ec6:	f880 50a3 	strb.w	r5, [r0, #163]	; 0xa3
    5eca:	0690      	lsls	r0, r2, #26
    5ecc:	d501      	bpl.n	5ed2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe86>
    5ece:	2008      	movs	r0, #8
    5ed0:	7058      	strb	r0, [r3, #1]
    5ed2:	bd70      	pop	{r4, r5, r6, pc}
    5ed4:	20000114 	.word	0x20000114
    5ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5edc:	4c29      	ldr	r4, [pc, #164]	; (5f84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>)
    5ede:	2501      	movs	r5, #1
    5ee0:	6862      	ldr	r2, [r4, #4]
    5ee2:	f892 12ce 	ldrb.w	r1, [r2, #718]	; 0x2ce
    5ee6:	b109      	cbz	r1, 5eec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea0>
    5ee8:	2701      	movs	r7, #1
    5eea:	e000      	b.n	5eee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea2>
    5eec:	2700      	movs	r7, #0
    5eee:	f892 02cf 	ldrb.w	r0, [r2, #719]	; 0x2cf
    5ef2:	b108      	cbz	r0, 5ef8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeac>
    5ef4:	2601      	movs	r6, #1
    5ef6:	e000      	b.n	5efa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeae>
    5ef8:	2600      	movs	r6, #0
    5efa:	b90f      	cbnz	r7, 5f00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb4>
    5efc:	f892 106a 	ldrb.w	r1, [r2, #106]	; 0x6a
    5f00:	b90e      	cbnz	r6, 5f06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeba>
    5f02:	f892 006b 	ldrb.w	r0, [r2, #107]	; 0x6b
    5f06:	f102 0362 	add.w	r3, r2, #98	; 0x62
    5f0a:	7219      	strb	r1, [r3, #8]
    5f0c:	7258      	strb	r0, [r3, #9]
    5f0e:	20ff      	movs	r0, #255	; 0xff
    5f10:	7298      	strb	r0, [r3, #10]
    5f12:	481d      	ldr	r0, [pc, #116]	; (5f88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf3c>)
    5f14:	6803      	ldr	r3, [r0, #0]
    5f16:	b10b      	cbz	r3, 5f1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed0>
    5f18:	4610      	mov	r0, r2
    5f1a:	4798      	blx	r3
    5f1c:	6860      	ldr	r0, [r4, #4]
    5f1e:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    5f22:	2801      	cmp	r0, #1
    5f24:	d001      	beq.n	5f2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xede>
    5f26:	b907      	cbnz	r7, 5f2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xede>
    5f28:	b116      	cbz	r6, 5f30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee4>
    5f2a:	2000      	movs	r0, #0
    5f2c:	f000 f82e 	bl	5f8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    5f30:	6860      	ldr	r0, [r4, #4]
    5f32:	302c      	adds	r0, #44	; 0x2c
    5f34:	f008 faf9 	bl	e52a <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
    5f38:	4606      	mov	r6, r0
    5f3a:	6860      	ldr	r0, [r4, #4]
    5f3c:	f008 faa3 	bl	e486 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    5f40:	b130      	cbz	r0, 5f50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf04>
    5f42:	6861      	ldr	r1, [r4, #4]
    5f44:	f501 72b1 	add.w	r2, r1, #354	; 0x162
    5f48:	f831 0b2c 	ldrh.w	r0, [r1], #44
    5f4c:	f7fc ff50 	bl	2df0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    5f50:	2105      	movs	r1, #5
    5f52:	6860      	ldr	r0, [r4, #4]
    5f54:	f7fe fb22 	bl	459c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    5f58:	6860      	ldr	r0, [r4, #4]
    5f5a:	302c      	adds	r0, #44	; 0x2c
    5f5c:	f008 fae5 	bl	e52a <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
    5f60:	4604      	mov	r4, r0
    5f62:	42a6      	cmp	r6, r4
    5f64:	d20a      	bcs.n	5f7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf30>
    5f66:	f003 ff67 	bl	9e38 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    5f6a:	4601      	mov	r1, r0
    5f6c:	1ba0      	subs	r0, r4, r6
    5f6e:	2867      	cmp	r0, #103	; 0x67
    5f70:	d200      	bcs.n	5f74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
    5f72:	2067      	movs	r0, #103	; 0x67
    5f74:	f003 fe26 	bl	9bc4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    5f78:	b100      	cbz	r0, 5f7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf30>
    5f7a:	2500      	movs	r5, #0
    5f7c:	4628      	mov	r0, r5
    5f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5f82:	0000      	.short	0x0000
    5f84:	20000124 	.word	0x20000124
    5f88:	2000028c 	.word	0x2000028c
    5f8c:	4601      	mov	r1, r0
    5f8e:	4801      	ldr	r0, [pc, #4]	; (5f94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf48>)
    5f90:	f001 ba96 	b.w	74c0 <sym_GECJUMXC7GX4QNB2JHCJHLFH72UPMJZW6VAQVRA>
    5f94:	20000124 	.word	0x20000124
    5f98:	b570      	push	{r4, r5, r6, lr}
    5f9a:	4d0f      	ldr	r5, [pc, #60]	; (5fd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8c>)
    5f9c:	686c      	ldr	r4, [r5, #4]
    5f9e:	f894 109d 	ldrb.w	r1, [r4, #157]	; 0x9d
    5fa2:	2921      	cmp	r1, #33	; 0x21
    5fa4:	d002      	beq.n	5fac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf60>
    5fa6:	292e      	cmp	r1, #46	; 0x2e
    5fa8:	d003      	beq.n	5fb2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf66>
    5faa:	e011      	b.n	5fd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf84>
    5fac:	f7ff ffee 	bl	5f8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    5fb0:	e008      	b.n	5fc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf78>
    5fb2:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
    5fb6:	f104 0080 	add.w	r0, r4, #128	; 0x80
    5fba:	2301      	movs	r3, #1
    5fbc:	210b      	movs	r1, #11
    5fbe:	f007 fe75 	bl	dcac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5fc2:	b138      	cbz	r0, 5fd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf88>
    5fc4:	6869      	ldr	r1, [r5, #4]
    5fc6:	2000      	movs	r0, #0
    5fc8:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    5fcc:	f881 00d6 	strb.w	r0, [r1, #214]	; 0xd6
    5fd0:	2000      	movs	r0, #0
    5fd2:	bd70      	pop	{r4, r5, r6, pc}
    5fd4:	202a      	movs	r0, #42	; 0x2a
    5fd6:	e7e9      	b.n	5fac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf60>
    5fd8:	20000124 	.word	0x20000124
    5fdc:	b570      	push	{r4, r5, r6, lr}
    5fde:	4604      	mov	r4, r0
    5fe0:	6840      	ldr	r0, [r0, #4]
    5fe2:	2301      	movs	r3, #1
    5fe4:	2100      	movs	r1, #0
    5fe6:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5fea:	3080      	adds	r0, #128	; 0x80
    5fec:	f007 fe5e 	bl	dcac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5ff0:	b1b8      	cbz	r0, 6022 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfd6>
    5ff2:	4d13      	ldr	r5, [pc, #76]	; (6040 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff4>)
    5ff4:	68e8      	ldr	r0, [r5, #12]
    5ff6:	f008 f8cc 	bl	e192 <sym_E5LV7NLJGDBOOHT3XI7LZP4SJ6B3AVX5ZM7II3A>
    5ffa:	6861      	ldr	r1, [r4, #4]
    5ffc:	f8a1 02cc 	strh.w	r0, [r1, #716]	; 0x2cc
    6000:	6861      	ldr	r1, [r4, #4]
    6002:	f8b1 1094 	ldrh.w	r1, [r1, #148]	; 0x94
    6006:	f009 fb00 	bl	f60a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    600a:	b160      	cbz	r0, 6026 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfda>
    600c:	6861      	ldr	r1, [r4, #4]
    600e:	2028      	movs	r0, #40	; 0x28
    6010:	2202      	movs	r2, #2
    6012:	f881 00bd 	strb.w	r0, [r1, #189]	; 0xbd
    6016:	6860      	ldr	r0, [r4, #4]
    6018:	490a      	ldr	r1, [pc, #40]	; (6044 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff8>)
    601a:	30b4      	adds	r0, #180	; 0xb4
    601c:	f008 f9ee 	bl	e3fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6020:	e00b      	b.n	603a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfee>
    6022:	2001      	movs	r0, #1
    6024:	bd70      	pop	{r4, r5, r6, pc}
    6026:	6861      	ldr	r1, [r4, #4]
    6028:	68e8      	ldr	r0, [r5, #12]
    602a:	f201 21ce 	addw	r1, r1, #718	; 0x2ce
    602e:	f008 f8ab 	bl	e188 <sym_7VZW6MQYCHJNYQ6F4AFCRRJSPXBVUQDDS4RU32Y>
    6032:	6861      	ldr	r1, [r4, #4]
    6034:	200a      	movs	r0, #10
    6036:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    603a:	2000      	movs	r0, #0
    603c:	bd70      	pop	{r4, r5, r6, pc}
    603e:	0000      	.short	0x0000
    6040:	20000114 	.word	0x20000114
    6044:	0000e6b9 	.word	0x0000e6b9
    6048:	b570      	push	{r4, r5, r6, lr}
    604a:	4604      	mov	r4, r0
    604c:	6840      	ldr	r0, [r0, #4]
    604e:	2301      	movs	r3, #1
    6050:	2100      	movs	r1, #0
    6052:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6056:	3080      	adds	r0, #128	; 0x80
    6058:	f007 fe28 	bl	dcac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    605c:	b1e0      	cbz	r0, 6098 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x104c>
    605e:	4d28      	ldr	r5, [pc, #160]	; (6100 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10b4>)
    6060:	2100      	movs	r1, #0
    6062:	68e8      	ldr	r0, [r5, #12]
    6064:	f008 f898 	bl	e198 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A>
    6068:	b1c0      	cbz	r0, 609c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1050>
    606a:	68e8      	ldr	r0, [r5, #12]
    606c:	6861      	ldr	r1, [r4, #4]
    606e:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    6072:	f8a1 02cc 	strh.w	r0, [r1, #716]	; 0x2cc
    6076:	6861      	ldr	r1, [r4, #4]
    6078:	f8b1 1094 	ldrh.w	r1, [r1, #148]	; 0x94
    607c:	f009 fac5 	bl	f60a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    6080:	b188      	cbz	r0, 60a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x105a>
    6082:	6861      	ldr	r1, [r4, #4]
    6084:	2028      	movs	r0, #40	; 0x28
    6086:	2202      	movs	r2, #2
    6088:	f881 00bd 	strb.w	r0, [r1, #189]	; 0xbd
    608c:	6860      	ldr	r0, [r4, #4]
    608e:	491d      	ldr	r1, [pc, #116]	; (6104 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10b8>)
    6090:	30b4      	adds	r0, #180	; 0xb4
    6092:	f008 f9b3 	bl	e3fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6096:	e030      	b.n	60fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ae>
    6098:	2001      	movs	r0, #1
    609a:	bd70      	pop	{r4, r5, r6, pc}
    609c:	4620      	mov	r0, r4
    609e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    60a2:	f000 b88d 	b.w	61c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    60a6:	68e8      	ldr	r0, [r5, #12]
    60a8:	f008 f8a0 	bl	e1ec <sym_GII4UQLGDHD6D5DSTGUIOYZXEEJFVPTQQUWUNII>
    60ac:	f007 fdf4 	bl	dc98 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    60b0:	4606      	mov	r6, r0
    60b2:	6860      	ldr	r0, [r4, #4]
    60b4:	4631      	mov	r1, r6
    60b6:	f8c0 62d4 	str.w	r6, [r0, #724]	; 0x2d4
    60ba:	68e8      	ldr	r0, [r5, #12]
    60bc:	7900      	ldrb	r0, [r0, #4]
    60be:	f007 ff58 	bl	df72 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    60c2:	6861      	ldr	r1, [r4, #4]
    60c4:	f8a1 02ce 	strh.w	r0, [r1, #718]	; 0x2ce
    60c8:	68e8      	ldr	r0, [r5, #12]
    60ca:	4631      	mov	r1, r6
    60cc:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    60d0:	f007 ff4b 	bl	df6a <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    60d4:	6861      	ldr	r1, [r4, #4]
    60d6:	f8c1 02d0 	str.w	r0, [r1, #720]	; 0x2d0
    60da:	68e8      	ldr	r0, [r5, #12]
    60dc:	f008 f889 	bl	e1f2 <sym_MD56XYITEHSLIFIRQT26SWOCASBX33AYW4XGGWY>
    60e0:	6861      	ldr	r1, [r4, #4]
    60e2:	f8a1 02d8 	strh.w	r0, [r1, #728]	; 0x2d8
    60e6:	68e8      	ldr	r0, [r5, #12]
    60e8:	f008 f886 	bl	e1f8 <sym_EKDQHRHOWISU7QCQSGE4X3J4VBX22VVETALDGWI>
    60ec:	6861      	ldr	r1, [r4, #4]
    60ee:	f8a1 02da 	strh.w	r0, [r1, #730]	; 0x2da
    60f2:	6861      	ldr	r1, [r4, #4]
    60f4:	200d      	movs	r0, #13
    60f6:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    60fa:	2000      	movs	r0, #0
    60fc:	bd70      	pop	{r4, r5, r6, pc}
    60fe:	0000      	.short	0x0000
    6100:	20000114 	.word	0x20000114
    6104:	0000e6b9 	.word	0x0000e6b9
    6108:	b570      	push	{r4, r5, r6, lr}
    610a:	4604      	mov	r4, r0
    610c:	6840      	ldr	r0, [r0, #4]
    610e:	2301      	movs	r3, #1
    6110:	2100      	movs	r1, #0
    6112:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6116:	3080      	adds	r0, #128	; 0x80
    6118:	f007 fdc8 	bl	dcac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    611c:	b970      	cbnz	r0, 613c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10f0>
    611e:	6860      	ldr	r0, [r4, #4]
    6120:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6124:	2a13      	cmp	r2, #19
    6126:	d009      	beq.n	613c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10f0>
    6128:	2301      	movs	r3, #1
    612a:	2105      	movs	r1, #5
    612c:	3080      	adds	r0, #128	; 0x80
    612e:	f007 fdbd 	bl	dcac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6132:	b108      	cbz	r0, 6138 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ec>
    6134:	2008      	movs	r0, #8
    6136:	bd70      	pop	{r4, r5, r6, pc}
    6138:	2001      	movs	r0, #1
    613a:	bd70      	pop	{r4, r5, r6, pc}
    613c:	6860      	ldr	r0, [r4, #4]
    613e:	f890 00dc 	ldrb.w	r0, [r0, #220]	; 0xdc
    6142:	b910      	cbnz	r0, 614a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10fe>
    6144:	4816      	ldr	r0, [pc, #88]	; (61a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1154>)
    6146:	f008 fa92 	bl	e66e <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    614a:	4d15      	ldr	r5, [pc, #84]	; (61a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1154>)
    614c:	6861      	ldr	r1, [r4, #4]
    614e:	3d10      	subs	r5, #16
    6150:	f501 710e 	add.w	r1, r1, #568	; 0x238
    6154:	68e8      	ldr	r0, [r5, #12]
    6156:	f008 f868 	bl	e22a <sym_3BQBYKVQGWCA6VF5GDIUVXGAPLPPXRSSEFO5TXA>
    615a:	6861      	ldr	r1, [r4, #4]
    615c:	68e8      	ldr	r0, [r5, #12]
    615e:	f501 718c 	add.w	r1, r1, #280	; 0x118
    6162:	f008 f859 	bl	e218 <sym_NILDTLWW7AYBRN5PYE72ILWSBBVUBN4Y5FF3XQQ>
    6166:	6860      	ldr	r0, [r4, #4]
    6168:	8801      	ldrh	r1, [r0, #0]
    616a:	f8a0 12e6 	strh.w	r1, [r0, #742]	; 0x2e6
    616e:	6861      	ldr	r1, [r4, #4]
    6170:	68e8      	ldr	r0, [r5, #12]
    6172:	f501 713a 	add.w	r1, r1, #744	; 0x2e8
    6176:	f008 f853 	bl	e220 <sym_7LJR6S4GQKSUMWIUG2FRZAKXFD3RUBQ6FOHJMZQ>
    617a:	6861      	ldr	r1, [r4, #4]
    617c:	68e8      	ldr	r0, [r5, #12]
    617e:	f501 713c 	add.w	r1, r1, #752	; 0x2f0
    6182:	f008 f846 	bl	e212 <sym_FIJW4TR7AWR6OLWCHL3HTVQSVWXOS6T6XISXCQQ>
    6186:	6860      	ldr	r0, [r4, #4]
    6188:	2202      	movs	r2, #2
    618a:	4906      	ldr	r1, [pc, #24]	; (61a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1158>)
    618c:	f500 7037 	add.w	r0, r0, #732	; 0x2dc
    6190:	f008 f934 	bl	e3fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6194:	6861      	ldr	r1, [r4, #4]
    6196:	2015      	movs	r0, #21
    6198:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    619c:	2000      	movs	r0, #0
    619e:	bd70      	pop	{r4, r5, r6, pc}
    61a0:	20000124 	.word	0x20000124
    61a4:	0000e85d 	.word	0x0000e85d
    61a8:	4901      	ldr	r1, [pc, #4]	; (61b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1164>)
    61aa:	68c9      	ldr	r1, [r1, #12]
    61ac:	f7fc bf28 	b.w	3000 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>
    61b0:	20000114 	.word	0x20000114
    61b4:	4901      	ldr	r1, [pc, #4]	; (61bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1170>)
    61b6:	68c9      	ldr	r1, [r1, #12]
    61b8:	f7fc bf58 	b.w	306c <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>
    61bc:	20000114 	.word	0x20000114
    61c0:	b510      	push	{r4, lr}
    61c2:	6842      	ldr	r2, [r0, #4]
    61c4:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
    61c8:	070b      	lsls	r3, r1, #28
    61ca:	d501      	bpl.n	61d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1184>
    61cc:	2001      	movs	r0, #1
    61ce:	bd10      	pop	{r4, pc}
    61d0:	f041 0108 	orr.w	r1, r1, #8
    61d4:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
    61d8:	4905      	ldr	r1, [pc, #20]	; (61f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11a4>)
    61da:	6840      	ldr	r0, [r0, #4]
    61dc:	68c9      	ldr	r1, [r1, #12]
    61de:	78c9      	ldrb	r1, [r1, #3]
    61e0:	f880 1120 	strb.w	r1, [r0, #288]	; 0x120
    61e4:	4802      	ldr	r0, [pc, #8]	; (61f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11a4>)
    61e6:	3010      	adds	r0, #16
    61e8:	f008 fa41 	bl	e66e <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    61ec:	2000      	movs	r0, #0
    61ee:	bd10      	pop	{r4, pc}
    61f0:	20000114 	.word	0x20000114
    61f4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    61f8:	4605      	mov	r5, r0
    61fa:	6840      	ldr	r0, [r0, #4]
    61fc:	f890 008c 	ldrb.w	r0, [r0, #140]	; 0x8c
    6200:	f010 0f30 	tst.w	r0, #48	; 0x30
    6204:	d002      	beq.n	620c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11c0>
    6206:	2001      	movs	r0, #1
    6208:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    620c:	4c32      	ldr	r4, [pc, #200]	; (62d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x128c>)
    620e:	68e0      	ldr	r0, [r4, #12]
    6210:	f008 f825 	bl	e25e <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    6214:	b330      	cbz	r0, 6264 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1218>
    6216:	68e0      	ldr	r0, [r4, #12]
    6218:	f008 f81b 	bl	e252 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    621c:	4680      	mov	r8, r0
    621e:	68e0      	ldr	r0, [r4, #12]
    6220:	f008 f81b 	bl	e25a <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    6224:	4607      	mov	r7, r0
    6226:	68e0      	ldr	r0, [r4, #12]
    6228:	f008 f811 	bl	e24e <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    622c:	4606      	mov	r6, r0
    622e:	68e0      	ldr	r0, [r4, #12]
    6230:	f008 f811 	bl	e256 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    6234:	4601      	mov	r1, r0
    6236:	f8cd 8000 	str.w	r8, [sp]
    623a:	6868      	ldr	r0, [r5, #4]
    623c:	463b      	mov	r3, r7
    623e:	4632      	mov	r2, r6
    6240:	302c      	adds	r0, #44	; 0x2c
    6242:	f008 f97c 	bl	e53e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    6246:	78a0      	ldrb	r0, [r4, #2]
    6248:	0781      	lsls	r1, r0, #30
    624a:	f04f 0001 	mov.w	r0, #1
    624e:	d503      	bpl.n	6258 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x120c>
    6250:	68a1      	ldr	r1, [r4, #8]
    6252:	78c9      	ldrb	r1, [r1, #3]
    6254:	2914      	cmp	r1, #20
    6256:	d00a      	beq.n	626e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1222>
    6258:	6869      	ldr	r1, [r5, #4]
    625a:	f891 109d 	ldrb.w	r1, [r1, #157]	; 0x9d
    625e:	291d      	cmp	r1, #29
    6260:	d005      	beq.n	626e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1222>
    6262:	e007      	b.n	6274 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1228>
    6264:	4628      	mov	r0, r5
    6266:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    626a:	f7ff bfa9 	b.w	61c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    626e:	6869      	ldr	r1, [r5, #4]
    6270:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    6274:	6868      	ldr	r0, [r5, #4]
    6276:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
    627a:	2901      	cmp	r1, #1
    627c:	d011      	beq.n	62a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1256>
    627e:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    6282:	f88d 1004 	strb.w	r1, [sp, #4]
    6286:	9901      	ldr	r1, [sp, #4]
    6288:	9101      	str	r1, [sp, #4]
    628a:	f89d 1004 	ldrb.w	r1, [sp, #4]
    628e:	b941      	cbnz	r1, 62a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1256>
    6290:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    6294:	f88d 1000 	strb.w	r1, [sp]
    6298:	9900      	ldr	r1, [sp, #0]
    629a:	9100      	str	r1, [sp, #0]
    629c:	f89d 1000 	ldrb.w	r1, [sp]
    62a0:	b151      	cbz	r1, 62b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x126c>
    62a2:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    62a6:	f041 0110 	orr.w	r1, r1, #16
    62aa:	6001      	str	r1, [r0, #0]
    62ac:	480a      	ldr	r0, [pc, #40]	; (62d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x128c>)
    62ae:	3010      	adds	r0, #16
    62b0:	f008 f9dd 	bl	e66e <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    62b4:	2000      	movs	r0, #0
    62b6:	e7a7      	b.n	6208 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11bc>
    62b8:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    62bc:	f041 0120 	orr.w	r1, r1, #32
    62c0:	6001      	str	r1, [r0, #0]
    62c2:	4805      	ldr	r0, [pc, #20]	; (62d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x128c>)
    62c4:	3010      	adds	r0, #16
    62c6:	6843      	ldr	r3, [r0, #4]
    62c8:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    62cc:	8818      	ldrh	r0, [r3, #0]
    62ce:	f503 72bc 	add.w	r2, r3, #376	; 0x178
    62d2:	f7fc fdb5 	bl	2e40 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    62d6:	e7e9      	b.n	62ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1260>
    62d8:	20000114 	.word	0x20000114
    62dc:	4901      	ldr	r1, [pc, #4]	; (62e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1298>)
    62de:	68c9      	ldr	r1, [r1, #12]
    62e0:	f008 ba54 	b.w	e78c <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA>
    62e4:	20000114 	.word	0x20000114
    62e8:	b510      	push	{r4, lr}
    62ea:	4604      	mov	r4, r0
    62ec:	6840      	ldr	r0, [r0, #4]
    62ee:	2301      	movs	r3, #1
    62f0:	2100      	movs	r1, #0
    62f2:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    62f6:	3080      	adds	r0, #128	; 0x80
    62f8:	f007 fcd8 	bl	dcac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    62fc:	2800      	cmp	r0, #0
    62fe:	6860      	ldr	r0, [r4, #4]
    6300:	d00c      	beq.n	631c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12d0>
    6302:	f890 00a3 	ldrb.w	r0, [r0, #163]	; 0xa3
    6306:	2800      	cmp	r0, #0
    6308:	d007      	beq.n	631a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12ce>
    630a:	480a      	ldr	r0, [pc, #40]	; (6334 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12e8>)
    630c:	f008 f9af 	bl	e66e <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    6310:	6861      	ldr	r1, [r4, #4]
    6312:	2011      	movs	r0, #17
    6314:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    6318:	2000      	movs	r0, #0
    631a:	bd10      	pop	{r4, pc}
    631c:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6320:	2301      	movs	r3, #1
    6322:	2105      	movs	r1, #5
    6324:	3080      	adds	r0, #128	; 0x80
    6326:	f007 fcc1 	bl	dcac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    632a:	b108      	cbz	r0, 6330 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12e4>
    632c:	2008      	movs	r0, #8
    632e:	bd10      	pop	{r4, pc}
    6330:	2001      	movs	r0, #1
    6332:	bd10      	pop	{r4, pc}
    6334:	20000124 	.word	0x20000124
    6338:	b538      	push	{r3, r4, r5, lr}
    633a:	4604      	mov	r4, r0
    633c:	6840      	ldr	r0, [r0, #4]
    633e:	2301      	movs	r3, #1
    6340:	210b      	movs	r1, #11
    6342:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6346:	3080      	adds	r0, #128	; 0x80
    6348:	f007 fcb0 	bl	dcac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    634c:	bb60      	cbnz	r0, 63a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x135c>
    634e:	6860      	ldr	r0, [r4, #4]
    6350:	2301      	movs	r3, #1
    6352:	2100      	movs	r1, #0
    6354:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6358:	3080      	adds	r0, #128	; 0x80
    635a:	f007 fca7 	bl	dcac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    635e:	b308      	cbz	r0, 63a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1358>
    6360:	6860      	ldr	r0, [r4, #4]
    6362:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    6366:	2825      	cmp	r0, #37	; 0x25
    6368:	d01e      	beq.n	63a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x135c>
    636a:	4d2a      	ldr	r5, [pc, #168]	; (6414 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13c8>)
    636c:	68e8      	ldr	r0, [r5, #12]
    636e:	f007 ff88 	bl	e282 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>
    6372:	b1d8      	cbz	r0, 63ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1360>
    6374:	68e8      	ldr	r0, [r5, #12]
    6376:	6862      	ldr	r2, [r4, #4]
    6378:	7941      	ldrb	r1, [r0, #5]
    637a:	f001 0107 	and.w	r1, r1, #7
    637e:	f882 1063 	strb.w	r1, [r2, #99]	; 0x63
    6382:	7900      	ldrb	r0, [r0, #4]
    6384:	f000 0207 	and.w	r2, r0, #7
    6388:	6860      	ldr	r0, [r4, #4]
    638a:	f880 2062 	strb.w	r2, [r0, #98]	; 0x62
    638e:	6860      	ldr	r0, [r4, #4]
    6390:	f890 113d 	ldrb.w	r1, [r0, #317]	; 0x13d
    6394:	f88d 1000 	strb.w	r1, [sp]
    6398:	9900      	ldr	r1, [sp, #0]
    639a:	9100      	str	r1, [sp, #0]
    639c:	f89d 1000 	ldrb.w	r1, [sp]
    63a0:	bb71      	cbnz	r1, 6400 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b4>
    63a2:	e008      	b.n	63b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x136a>
    63a4:	2001      	movs	r0, #1
    63a6:	bd38      	pop	{r3, r4, r5, pc}
    63a8:	2020      	movs	r0, #32
    63aa:	bd38      	pop	{r3, r4, r5, pc}
    63ac:	4620      	mov	r0, r4
    63ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    63b2:	f7ff bf05 	b.w	61c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    63b6:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    63ba:	2901      	cmp	r1, #1
    63bc:	d020      	beq.n	6400 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b4>
    63be:	f100 016a 	add.w	r1, r0, #106	; 0x6a
    63c2:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
    63c6:	784d      	ldrb	r5, [r1, #1]
    63c8:	4295      	cmp	r5, r2
    63ca:	d106      	bne.n	63da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138e>
    63cc:	7809      	ldrb	r1, [r1, #0]
    63ce:	4299      	cmp	r1, r3
    63d0:	d103      	bne.n	63da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138e>
    63d2:	2102      	movs	r1, #2
    63d4:	f880 113c 	strb.w	r1, [r0, #316]	; 0x13c
    63d8:	e012      	b.n	6400 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b4>
    63da:	480e      	ldr	r0, [pc, #56]	; (6414 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13c8>)
    63dc:	3010      	adds	r0, #16
    63de:	6841      	ldr	r1, [r0, #4]
    63e0:	f501 70cb 	add.w	r0, r1, #406	; 0x196
    63e4:	880a      	ldrh	r2, [r1, #0]
    63e6:	f820 2b02 	strh.w	r2, [r0], #2
    63ea:	f891 2062 	ldrb.w	r2, [r1, #98]	; 0x62
    63ee:	f800 2b01 	strb.w	r2, [r0], #1
    63f2:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    63f6:	f800 190d 	strb.w	r1, [r0], #-13
    63fa:	4907      	ldr	r1, [pc, #28]	; (6418 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13cc>)
    63fc:	f007 fff5 	bl	e3ea <sym_RH6FZQRBS4UKFN4MYJSECW7EJMU5464YS3XX4EQ>
    6400:	6861      	ldr	r1, [r4, #4]
    6402:	2022      	movs	r0, #34	; 0x22
    6404:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    6408:	4802      	ldr	r0, [pc, #8]	; (6414 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13c8>)
    640a:	3010      	adds	r0, #16
    640c:	f008 f92f 	bl	e66e <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    6410:	2000      	movs	r0, #0
    6412:	bd38      	pop	{r3, r4, r5, pc}
    6414:	20000114 	.word	0x20000114
    6418:	00007501 	.word	0x00007501
    641c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6420:	6845      	ldr	r5, [r0, #4]
    6422:	4604      	mov	r4, r0
    6424:	f895 009d 	ldrb.w	r0, [r5, #157]	; 0x9d
    6428:	2821      	cmp	r0, #33	; 0x21
    642a:	d008      	beq.n	643e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13f2>
    642c:	f05f 0600 	movs.w	r6, #0
    6430:	f895 009e 	ldrb.w	r0, [r5, #158]	; 0x9e
    6434:	2823      	cmp	r0, #35	; 0x23
    6436:	d004      	beq.n	6442 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13f6>
    6438:	b35e      	cbz	r6, 6492 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1446>
    643a:	359d      	adds	r5, #157	; 0x9d
    643c:	e002      	b.n	6444 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13f8>
    643e:	2601      	movs	r6, #1
    6440:	e7f6      	b.n	6430 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13e4>
    6442:	359e      	adds	r5, #158	; 0x9e
    6444:	f8df 8140 	ldr.w	r8, [pc, #320]	; 6588 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x153c>
    6448:	f8d8 000c 	ldr.w	r0, [r8, #12]
    644c:	f007 ff25 	bl	e29a <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ>
    6450:	2700      	movs	r7, #0
    6452:	b308      	cbz	r0, 6498 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x144c>
    6454:	4631      	mov	r1, r6
    6456:	f8d8 000c 	ldr.w	r0, [r8, #12]
    645a:	f7fe ffb3 	bl	53c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x378>
    645e:	b1d8      	cbz	r0, 6498 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x144c>
    6460:	466a      	mov	r2, sp
    6462:	4646      	mov	r6, r8
    6464:	6860      	ldr	r0, [r4, #4]
    6466:	f8d8 100c 	ldr.w	r1, [r8, #12]
    646a:	f007 fd38 	bl	dede <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    646e:	b388      	cbz	r0, 64d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1488>
    6470:	68f0      	ldr	r0, [r6, #12]
    6472:	f007 ff10 	bl	e296 <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>
    6476:	6861      	ldr	r1, [r4, #4]
    6478:	f8a1 02cc 	strh.w	r0, [r1, #716]	; 0x2cc
    647c:	6861      	ldr	r1, [r4, #4]
    647e:	f8b1 1094 	ldrh.w	r1, [r1, #148]	; 0x94
    6482:	f009 f8c2 	bl	f60a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    6486:	b3e8      	cbz	r0, 6504 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14b8>
    6488:	6861      	ldr	r1, [r4, #4]
    648a:	2028      	movs	r0, #40	; 0x28
    648c:	f881 00bd 	strb.w	r0, [r1, #189]	; 0xbd
    6490:	e06e      	b.n	6570 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1524>
    6492:	2002      	movs	r0, #2
    6494:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6498:	6860      	ldr	r0, [r4, #4]
    649a:	f04f 0900 	mov.w	r9, #0
    649e:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    64a2:	2901      	cmp	r1, #1
    64a4:	d017      	beq.n	64d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x148a>
    64a6:	f880 713c 	strb.w	r7, [r0, #316]	; 0x13c
    64aa:	b306      	cbz	r6, 64ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a2>
    64ac:	f8d8 000c 	ldr.w	r0, [r8, #12]
    64b0:	6861      	ldr	r1, [r4, #4]
    64b2:	2201      	movs	r2, #1
    64b4:	78c0      	ldrb	r0, [r0, #3]
    64b6:	f881 0121 	strb.w	r0, [r1, #289]	; 0x121
    64ba:	4082      	lsls	r2, r0
    64bc:	6861      	ldr	r1, [r4, #4]
    64be:	f3c2 6000 	ubfx	r0, r2, #24, #1
    64c2:	b160      	cbz	r0, 64de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1492>
    64c4:	2009      	movs	r0, #9
    64c6:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    64ca:	6860      	ldr	r0, [r4, #4]
    64cc:	f890 00d6 	ldrb.w	r0, [r0, #214]	; 0xd6
    64d0:	b9b0      	cbnz	r0, 6500 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14b4>
    64d2:	e007      	b.n	64e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1498>
    64d4:	e017      	b.n	6506 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14ba>
    64d6:	201e      	movs	r0, #30
    64d8:	f7ff fd58 	bl	5f8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    64dc:	e7e5      	b.n	64aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x145e>
    64de:	f240 414b 	movw	r1, #1099	; 0x44b
    64e2:	e001      	b.n	64e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x149c>
    64e4:	f240 4153 	movw	r1, #1107	; 0x453
    64e8:	2031      	movs	r0, #49	; 0x31
    64ea:	f7fa fa61 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    64ee:	4826      	ldr	r0, [pc, #152]	; (6588 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x153c>)
    64f0:	702f      	strb	r7, [r5, #0]
    64f2:	3010      	adds	r0, #16
    64f4:	f008 f8c3 	bl	e67e <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    64f8:	4620      	mov	r0, r4
    64fa:	f7ff fe61 	bl	61c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    64fe:	4681      	mov	r9, r0
    6500:	4648      	mov	r0, r9
    6502:	e7c7      	b.n	6494 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1448>
    6504:	e013      	b.n	652e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14e2>
    6506:	6860      	ldr	r0, [r4, #4]
    6508:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    650c:	2901      	cmp	r1, #1
    650e:	d009      	beq.n	6524 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14d8>
    6510:	f880 713c 	strb.w	r7, [r0, #316]	; 0x13c
    6514:	6860      	ldr	r0, [r4, #4]
    6516:	f100 019e 	add.w	r1, r0, #158	; 0x9e
    651a:	42a9      	cmp	r1, r5
    651c:	d11b      	bne.n	6556 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150a>
    651e:	f880 709e 	strb.w	r7, [r0, #158]	; 0x9e
    6522:	e018      	b.n	6556 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150a>
    6524:	2000      	movs	r0, #0
    6526:	f7ff fd31 	bl	5f8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    652a:	702f      	strb	r7, [r5, #0]
    652c:	e7f2      	b.n	6514 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14c8>
    652e:	6860      	ldr	r0, [r4, #4]
    6530:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6534:	290d      	cmp	r1, #13
    6536:	d018      	beq.n	656a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x151e>
    6538:	290b      	cmp	r1, #11
    653a:	d016      	beq.n	656a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x151e>
    653c:	290a      	cmp	r1, #10
    653e:	d014      	beq.n	656a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x151e>
    6540:	f89d 1000 	ldrb.w	r1, [sp]
    6544:	f880 12ce 	strb.w	r1, [r0, #718]	; 0x2ce
    6548:	6861      	ldr	r1, [r4, #4]
    654a:	f89d 0001 	ldrb.w	r0, [sp, #1]
    654e:	f881 02cf 	strb.w	r0, [r1, #719]	; 0x2cf
    6552:	2025      	movs	r0, #37	; 0x25
    6554:	7028      	strb	r0, [r5, #0]
    6556:	6860      	ldr	r0, [r4, #4]
    6558:	f100 019e 	add.w	r1, r0, #158	; 0x9e
    655c:	42a9      	cmp	r1, r5
    655e:	d10e      	bne.n	657e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1532>
    6560:	4809      	ldr	r0, [pc, #36]	; (6588 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x153c>)
    6562:	3010      	adds	r0, #16
    6564:	f008 f88b 	bl	e67e <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    6568:	e00b      	b.n	6582 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1536>
    656a:	212a      	movs	r1, #42	; 0x2a
    656c:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    6570:	6860      	ldr	r0, [r4, #4]
    6572:	2202      	movs	r2, #2
    6574:	4905      	ldr	r1, [pc, #20]	; (658c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1540>)
    6576:	30b4      	adds	r0, #180	; 0xb4
    6578:	f007 ff40 	bl	e3fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    657c:	e7eb      	b.n	6556 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150a>
    657e:	f880 70d6 	strb.w	r7, [r0, #214]	; 0xd6
    6582:	2000      	movs	r0, #0
    6584:	e786      	b.n	6494 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1448>
    6586:	0000      	.short	0x0000
    6588:	20000114 	.word	0x20000114
    658c:	0000e6b9 	.word	0x0000e6b9
    6590:	b570      	push	{r4, r5, r6, lr}
    6592:	4604      	mov	r4, r0
    6594:	6840      	ldr	r0, [r0, #4]
    6596:	4d0a      	ldr	r5, [pc, #40]	; (65c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1574>)
    6598:	f810 1fec 	ldrb.w	r1, [r0, #236]!
    659c:	f041 0104 	orr.w	r1, r1, #4
    65a0:	7001      	strb	r1, [r0, #0]
    65a2:	68e8      	ldr	r0, [r5, #12]
    65a4:	f007 fe8d 	bl	e2c2 <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>
    65a8:	4606      	mov	r6, r0
    65aa:	68e8      	ldr	r0, [r5, #12]
    65ac:	f007 fe8d 	bl	e2ca <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>
    65b0:	4601      	mov	r1, r0
    65b2:	4622      	mov	r2, r4
    65b4:	4630      	mov	r0, r6
    65b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    65ba:	f000 b893 	b.w	66e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1698>
    65be:	0000      	.short	0x0000
    65c0:	20000114 	.word	0x20000114
    65c4:	4602      	mov	r2, r0
    65c6:	4813      	ldr	r0, [pc, #76]	; (6614 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c8>)
    65c8:	68c0      	ldr	r0, [r0, #12]
    65ca:	7901      	ldrb	r1, [r0, #4]
    65cc:	4811      	ldr	r0, [pc, #68]	; (6614 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c8>)
    65ce:	3010      	adds	r0, #16
    65d0:	6843      	ldr	r3, [r0, #4]
    65d2:	f893 009d 	ldrb.w	r0, [r3, #157]	; 0x9d
    65d6:	2821      	cmp	r0, #33	; 0x21
    65d8:	d010      	beq.n	65fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    65da:	282e      	cmp	r0, #46	; 0x2e
    65dc:	d00e      	beq.n	65fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    65de:	2828      	cmp	r0, #40	; 0x28
    65e0:	d00e      	beq.n	6600 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b4>
    65e2:	2804      	cmp	r0, #4
    65e4:	d00e      	beq.n	6604 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b8>
    65e6:	280f      	cmp	r0, #15
    65e8:	d00e      	beq.n	6608 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15bc>
    65ea:	281d      	cmp	r0, #29
    65ec:	d00e      	beq.n	660c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c0>
    65ee:	f893 009e 	ldrb.w	r0, [r3, #158]	; 0x9e
    65f2:	2823      	cmp	r0, #35	; 0x23
    65f4:	d00c      	beq.n	6610 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c4>
    65f6:	20fe      	movs	r0, #254	; 0xfe
    65f8:	f000 b874 	b.w	66e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1698>
    65fc:	2016      	movs	r0, #22
    65fe:	e7fb      	b.n	65f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    6600:	2023      	movs	r0, #35	; 0x23
    6602:	e7f9      	b.n	65f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    6604:	200e      	movs	r0, #14
    6606:	e7f7      	b.n	65f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    6608:	2012      	movs	r0, #18
    660a:	e7f5      	b.n	65f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    660c:	2014      	movs	r0, #20
    660e:	e7f3      	b.n	65f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    6610:	2017      	movs	r0, #23
    6612:	e7f1      	b.n	65f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    6614:	20000114 	.word	0x20000114
    6618:	b510      	push	{r4, lr}
    661a:	4604      	mov	r4, r0
    661c:	6840      	ldr	r0, [r0, #4]
    661e:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    6622:	2818      	cmp	r0, #24
    6624:	d001      	beq.n	662a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15de>
    6626:	2002      	movs	r0, #2
    6628:	bd10      	pop	{r4, pc}
    662a:	4804      	ldr	r0, [pc, #16]	; (663c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15f0>)
    662c:	f008 f827 	bl	e67e <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    6630:	6861      	ldr	r1, [r4, #4]
    6632:	201c      	movs	r0, #28
    6634:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    6638:	2000      	movs	r0, #0
    663a:	bd10      	pop	{r4, pc}
    663c:	20000124 	.word	0x20000124
    6640:	4901      	ldr	r1, [pc, #4]	; (6648 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15fc>)
    6642:	68c9      	ldr	r1, [r1, #12]
    6644:	f008 b85a 	b.w	e6fc <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA>
    6648:	20000114 	.word	0x20000114
    664c:	b570      	push	{r4, r5, r6, lr}
    664e:	4604      	mov	r4, r0
    6650:	481f      	ldr	r0, [pc, #124]	; (66d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1684>)
    6652:	2500      	movs	r5, #0
    6654:	68c0      	ldr	r0, [r0, #12]
    6656:	7903      	ldrb	r3, [r0, #4]
    6658:	6860      	ldr	r0, [r4, #4]
    665a:	2b16      	cmp	r3, #22
    665c:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    6660:	d013      	beq.n	668a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x163e>
    6662:	dc06      	bgt.n	6672 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1626>
    6664:	2b0e      	cmp	r3, #14
    6666:	d009      	beq.n	667c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>
    6668:	2b12      	cmp	r3, #18
    666a:	d007      	beq.n	667c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>
    666c:	2b14      	cmp	r3, #20
    666e:	d12c      	bne.n	66ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    6670:	e004      	b.n	667c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>
    6672:	2b17      	cmp	r3, #23
    6674:	d002      	beq.n	667c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>
    6676:	2b23      	cmp	r3, #35	; 0x23
    6678:	d127      	bne.n	66ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    667a:	e01f      	b.n	66bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1670>
    667c:	4622      	mov	r2, r4
    667e:	2101      	movs	r1, #1
    6680:	4618      	mov	r0, r3
    6682:	f000 f9c5 	bl	6a10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c4>
    6686:	4605      	mov	r5, r0
    6688:	e01f      	b.n	66ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    668a:	2821      	cmp	r0, #33	; 0x21
    668c:	d001      	beq.n	6692 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1646>
    668e:	282e      	cmp	r0, #46	; 0x2e
    6690:	d11b      	bne.n	66ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    6692:	4620      	mov	r0, r4
    6694:	f008 f807 	bl	e6a6 <sym_GRWJSKDQ3POPWSRNDRQTNNGA4TE3WRBKWXT5JAQ>
    6698:	6860      	ldr	r0, [r4, #4]
    669a:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    669e:	2922      	cmp	r1, #34	; 0x22
    66a0:	d013      	beq.n	66ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    66a2:	2108      	movs	r1, #8
    66a4:	30ec      	adds	r0, #236	; 0xec
    66a6:	f008 ff5c 	bl	f562 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b0>
    66aa:	6860      	ldr	r0, [r4, #4]
    66ac:	210b      	movs	r1, #11
    66ae:	30ec      	adds	r0, #236	; 0xec
    66b0:	f008 ff57 	bl	f562 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b0>
    66b4:	201a      	movs	r0, #26
    66b6:	f7ff fc69 	bl	5f8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    66ba:	e006      	b.n	66ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    66bc:	2828      	cmp	r0, #40	; 0x28
    66be:	d104      	bne.n	66ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    66c0:	4804      	ldr	r0, [pc, #16]	; (66d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1688>)
    66c2:	6801      	ldr	r1, [r0, #0]
    66c4:	b109      	cbz	r1, 66ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    66c6:	4620      	mov	r0, r4
    66c8:	4788      	blx	r1
    66ca:	4628      	mov	r0, r5
    66cc:	bd70      	pop	{r4, r5, r6, pc}
    66ce:	0000      	.short	0x0000
    66d0:	20000114 	.word	0x20000114
    66d4:	20000290 	.word	0x20000290
    66d8:	4901      	ldr	r1, [pc, #4]	; (66e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1694>)
    66da:	68c9      	ldr	r1, [r1, #12]
    66dc:	f7fc bd40 	b.w	3160 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>
    66e0:	20000114 	.word	0x20000114
    66e4:	4603      	mov	r3, r0
    66e6:	2000      	movs	r0, #0
    66e8:	2b17      	cmp	r3, #23
    66ea:	d017      	beq.n	671c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
    66ec:	dc0a      	bgt.n	6704 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16b8>
    66ee:	2b0e      	cmp	r3, #14
    66f0:	d014      	beq.n	671c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
    66f2:	2b12      	cmp	r3, #18
    66f4:	d012      	beq.n	671c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
    66f6:	2b14      	cmp	r3, #20
    66f8:	d010      	beq.n	671c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
    66fa:	2b16      	cmp	r3, #22
    66fc:	d112      	bne.n	6724 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d8>
    66fe:	4608      	mov	r0, r1
    6700:	f7ff bc4a 	b.w	5f98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf4c>
    6704:	2b23      	cmp	r3, #35	; 0x23
    6706:	d003      	beq.n	6710 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c4>
    6708:	2b24      	cmp	r3, #36	; 0x24
    670a:	d001      	beq.n	6710 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c4>
    670c:	2b25      	cmp	r3, #37	; 0x25
    670e:	d109      	bne.n	6724 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d8>
    6710:	4a05      	ldr	r2, [pc, #20]	; (6728 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16dc>)
    6712:	6812      	ldr	r2, [r2, #0]
    6714:	2a00      	cmp	r2, #0
    6716:	d005      	beq.n	6724 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d8>
    6718:	4618      	mov	r0, r3
    671a:	4710      	bx	r2
    671c:	2100      	movs	r1, #0
    671e:	4618      	mov	r0, r3
    6720:	f000 b976 	b.w	6a10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c4>
    6724:	4770      	bx	lr
    6726:	0000      	.short	0x0000
    6728:	20000288 	.word	0x20000288
    672c:	b510      	push	{r4, lr}
    672e:	6841      	ldr	r1, [r0, #4]
    6730:	4604      	mov	r4, r0
    6732:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
    6736:	06c2      	lsls	r2, r0, #27
    6738:	d402      	bmi.n	6740 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16f4>
    673a:	f240 71db 	movw	r1, #2011	; 0x7db
    673e:	e003      	b.n	6748 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16fc>
    6740:	0682      	lsls	r2, r0, #26
    6742:	d504      	bpl.n	674e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1702>
    6744:	f240 71dc 	movw	r1, #2012	; 0x7dc
    6748:	2031      	movs	r0, #49	; 0x31
    674a:	f7fa f931 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    674e:	f020 0010 	bic.w	r0, r0, #16
    6752:	f8c1 008c 	str.w	r0, [r1, #140]	; 0x8c
    6756:	4804      	ldr	r0, [pc, #16]	; (6768 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x171c>)
    6758:	f007 ff91 	bl	e67e <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    675c:	6860      	ldr	r0, [r4, #4]
    675e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6762:	2105      	movs	r1, #5
    6764:	f7fd bf1a 	b.w	459c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    6768:	20000124 	.word	0x20000124
    676c:	b510      	push	{r4, lr}
    676e:	6840      	ldr	r0, [r0, #4]
    6770:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6774:	292f      	cmp	r1, #47	; 0x2f
    6776:	d006      	beq.n	6786 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x173a>
    6778:	2916      	cmp	r1, #22
    677a:	d00c      	beq.n	6796 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174a>
    677c:	f240 71a5 	movw	r1, #1957	; 0x7a5
    6780:	2031      	movs	r0, #49	; 0x31
    6782:	f7fa f915 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6786:	2100      	movs	r1, #0
    6788:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    678c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6790:	4803      	ldr	r0, [pc, #12]	; (67a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1754>)
    6792:	f007 bf74 	b.w	e67e <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    6796:	211a      	movs	r1, #26
    6798:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    679c:	bd10      	pop	{r4, pc}
    679e:	0000      	.short	0x0000
    67a0:	20000124 	.word	0x20000124
    67a4:	b570      	push	{r4, r5, r6, lr}
    67a6:	4604      	mov	r4, r0
    67a8:	6840      	ldr	r0, [r0, #4]
    67aa:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    67ae:	291c      	cmp	r1, #28
    67b0:	d004      	beq.n	67bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1770>
    67b2:	f240 71b6 	movw	r1, #1974	; 0x7b6
    67b6:	2031      	movs	r0, #49	; 0x31
    67b8:	f7fa f8fa 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    67bc:	2500      	movs	r5, #0
    67be:	f880 50db 	strb.w	r5, [r0, #219]	; 0xdb
    67c2:	6860      	ldr	r0, [r4, #4]
    67c4:	f890 10dc 	ldrb.w	r1, [r0, #220]	; 0xdc
    67c8:	b161      	cbz	r1, 67e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1798>
    67ca:	f880 50dc 	strb.w	r5, [r0, #220]	; 0xdc
    67ce:	6860      	ldr	r0, [r4, #4]
    67d0:	2202      	movs	r2, #2
    67d2:	8801      	ldrh	r1, [r0, #0]
    67d4:	f8a0 1216 	strh.w	r1, [r0, #534]	; 0x216
    67d8:	6860      	ldr	r0, [r4, #4]
    67da:	490d      	ldr	r1, [pc, #52]	; (6810 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17c4>)
    67dc:	f880 5214 	strb.w	r5, [r0, #532]	; 0x214
    67e0:	6860      	ldr	r0, [r4, #4]
    67e2:	e00c      	b.n	67fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17b2>
    67e4:	8801      	ldrh	r1, [r0, #0]
    67e6:	f8a0 1216 	strh.w	r1, [r0, #534]	; 0x216
    67ea:	6860      	ldr	r0, [r4, #4]
    67ec:	f880 5214 	strb.w	r5, [r0, #532]	; 0x214
    67f0:	6861      	ldr	r1, [r4, #4]
    67f2:	2001      	movs	r0, #1
    67f4:	2202      	movs	r2, #2
    67f6:	f881 0218 	strb.w	r0, [r1, #536]	; 0x218
    67fa:	4906      	ldr	r1, [pc, #24]	; (6814 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17c8>)
    67fc:	6860      	ldr	r0, [r4, #4]
    67fe:	f200 200a 	addw	r0, r0, #522	; 0x20a
    6802:	f007 fdfb 	bl	e3fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6806:	6860      	ldr	r0, [r4, #4]
    6808:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    680c:	bd70      	pop	{r4, r5, r6, pc}
    680e:	0000      	.short	0x0000
    6810:	0000e847 	.word	0x0000e847
    6814:	0000e829 	.word	0x0000e829
    6818:	4916      	ldr	r1, [pc, #88]	; (6874 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1828>)
    681a:	b510      	push	{r4, lr}
    681c:	6889      	ldr	r1, [r1, #8]
    681e:	790a      	ldrb	r2, [r1, #4]
    6820:	6841      	ldr	r1, [r0, #4]
    6822:	f891 309d 	ldrb.w	r3, [r1, #157]	; 0x9d
    6826:	2b09      	cmp	r3, #9
    6828:	d10a      	bne.n	6840 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17f4>
    682a:	f891 3121 	ldrb.w	r3, [r1, #289]	; 0x121
    682e:	4293      	cmp	r3, r2
    6830:	d106      	bne.n	6840 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17f4>
    6832:	2200      	movs	r2, #0
    6834:	f881 209d 	strb.w	r2, [r1, #157]	; 0x9d
    6838:	6840      	ldr	r0, [r0, #4]
    683a:	f880 20d6 	strb.w	r2, [r0, #214]	; 0xd6
    683e:	bd10      	pop	{r4, pc}
    6840:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    6844:	071c      	lsls	r4, r3, #28
    6846:	d509      	bpl.n	685c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1810>
    6848:	f023 0008 	bic.w	r0, r3, #8
    684c:	f8c1 008c 	str.w	r0, [r1, #140]	; 0x8c
    6850:	4808      	ldr	r0, [pc, #32]	; (6874 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1828>)
    6852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6856:	3010      	adds	r0, #16
    6858:	f007 bf11 	b.w	e67e <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    685c:	2aff      	cmp	r2, #255	; 0xff
    685e:	d004      	beq.n	686a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x181e>
    6860:	f240 7151 	movw	r1, #1873	; 0x751
    6864:	2031      	movs	r0, #49	; 0x31
    6866:	f7fa f8a3 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    686a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    686e:	f008 bf23 	b.w	f6b8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x10e>
    6872:	0000      	.short	0x0000
    6874:	20000114 	.word	0x20000114
    6878:	4808      	ldr	r0, [pc, #32]	; (689c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1850>)
    687a:	b510      	push	{r4, lr}
    687c:	6840      	ldr	r0, [r0, #4]
    687e:	f890 10a3 	ldrb.w	r1, [r0, #163]	; 0xa3
    6882:	b941      	cbnz	r1, 6896 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x184a>
    6884:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6888:	2301      	movs	r3, #1
    688a:	2106      	movs	r1, #6
    688c:	3080      	adds	r0, #128	; 0x80
    688e:	f007 fa0d 	bl	dcac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6892:	2800      	cmp	r0, #0
    6894:	d000      	beq.n	6898 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x184c>
    6896:	2001      	movs	r0, #1
    6898:	bd10      	pop	{r4, pc}
    689a:	0000      	.short	0x0000
    689c:	20000124 	.word	0x20000124
    68a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    68a2:	4c59      	ldr	r4, [pc, #356]	; (6a08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19bc>)
    68a4:	4606      	mov	r6, r0
    68a6:	4615      	mov	r5, r2
    68a8:	6860      	ldr	r0, [r4, #4]
    68aa:	2200      	movs	r2, #0
    68ac:	b111      	cbz	r1, 68b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1868>
    68ae:	f8a0 2236 	strh.w	r2, [r0, #566]	; 0x236
    68b2:	e006      	b.n	68c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1876>
    68b4:	f8b0 1236 	ldrh.w	r1, [r0, #566]	; 0x236
    68b8:	f8b0 2226 	ldrh.w	r2, [r0, #550]	; 0x226
    68bc:	4411      	add	r1, r2
    68be:	f8a0 1236 	strh.w	r1, [r0, #566]	; 0x236
    68c2:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    68c6:	f88d 1000 	strb.w	r1, [sp]
    68ca:	9900      	ldr	r1, [sp, #0]
    68cc:	9100      	str	r1, [sp, #0]
    68ce:	f89d 1000 	ldrb.w	r1, [sp]
    68d2:	b939      	cbnz	r1, 68e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1898>
    68d4:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    68d8:	2301      	movs	r3, #1
    68da:	4619      	mov	r1, r3
    68dc:	3080      	adds	r0, #128	; 0x80
    68de:	f007 f9e5 	bl	dcac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    68e2:	b130      	cbz	r0, 68f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a6>
    68e4:	6860      	ldr	r0, [r4, #4]
    68e6:	f830 1fd0 	ldrh.w	r1, [r0, #208]!
    68ea:	f8b0 2156 	ldrh.w	r2, [r0, #342]	; 0x156
    68ee:	4411      	add	r1, r2
    68f0:	8001      	strh	r1, [r0, #0]
    68f2:	6860      	ldr	r0, [r4, #4]
    68f4:	f890 20d6 	ldrb.w	r2, [r0, #214]	; 0xd6
    68f8:	b132      	cbz	r2, 6908 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18bc>
    68fa:	f8b0 10d2 	ldrh.w	r1, [r0, #210]	; 0xd2
    68fe:	f8b0 3226 	ldrh.w	r3, [r0, #550]	; 0x226
    6902:	4419      	add	r1, r3
    6904:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
    6908:	f990 30da 	ldrsb.w	r3, [r0, #218]	; 0xda
    690c:	2b00      	cmp	r3, #0
    690e:	dd06      	ble.n	691e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18d2>
    6910:	f8b0 10d8 	ldrh.w	r1, [r0, #216]	; 0xd8
    6914:	f8b0 7226 	ldrh.w	r7, [r0, #550]	; 0x226
    6918:	4439      	add	r1, r7
    691a:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
    691e:	f890 10bd 	ldrb.w	r1, [r0, #189]	; 0xbd
    6922:	bb09      	cbnz	r1, 6968 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x191c>
    6924:	b9be      	cbnz	r6, 6956 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190a>
    6926:	4938      	ldr	r1, [pc, #224]	; (6a08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19bc>)
    6928:	3910      	subs	r1, #16
    692a:	7809      	ldrb	r1, [r1, #0]
    692c:	2902      	cmp	r1, #2
    692e:	d006      	beq.n	693e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18f2>
    6930:	2901      	cmp	r1, #1
    6932:	d00a      	beq.n	694a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18fe>
    6934:	b1f5      	cbz	r5, 6974 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1928>
    6936:	06e9      	lsls	r1, r5, #27
    6938:	d50b      	bpl.n	6952 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1906>
    693a:	211e      	movs	r1, #30
    693c:	e042      	b.n	69c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    693e:	f890 1128 	ldrb.w	r1, [r0, #296]	; 0x128
    6942:	2906      	cmp	r1, #6
    6944:	d03e      	beq.n	69c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    6946:	2116      	movs	r1, #22
    6948:	e03c      	b.n	69c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    694a:	f890 10a0 	ldrb.w	r1, [r0, #160]	; 0xa0
    694e:	b959      	cbnz	r1, 6968 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x191c>
    6950:	e054      	b.n	69fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b0>
    6952:	0729      	lsls	r1, r5, #28
    6954:	d501      	bpl.n	695a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190e>
    6956:	213d      	movs	r1, #61	; 0x3d
    6958:	e034      	b.n	69c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    695a:	06a9      	lsls	r1, r5, #26
    695c:	d501      	bpl.n	6962 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1916>
    695e:	2123      	movs	r1, #35	; 0x23
    6960:	e030      	b.n	69c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    6962:	07a9      	lsls	r1, r5, #30
    6964:	d001      	beq.n	696a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x191e>
    6966:	212a      	movs	r1, #42	; 0x2a
    6968:	e02c      	b.n	69c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    696a:	f640 51a3 	movw	r1, #3491	; 0xda3
    696e:	2031      	movs	r0, #49	; 0x31
    6970:	f7fa f81e 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6974:	b12a      	cbz	r2, 6982 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1936>
    6976:	f8b0 10d2 	ldrh.w	r1, [r0, #210]	; 0xd2
    697a:	f8b0 20d4 	ldrh.w	r2, [r0, #212]	; 0xd4
    697e:	4291      	cmp	r1, r2
    6980:	d216      	bcs.n	69b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1964>
    6982:	2b00      	cmp	r3, #0
    6984:	dd05      	ble.n	6992 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1946>
    6986:	f8b0 10d8 	ldrh.w	r1, [r0, #216]	; 0xd8
    698a:	f8b0 20d4 	ldrh.w	r2, [r0, #212]	; 0xd4
    698e:	4291      	cmp	r1, r2
    6990:	d20e      	bcs.n	69b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1964>
    6992:	f8b0 20d0 	ldrh.w	r2, [r0, #208]	; 0xd0
    6996:	f8b0 10ce 	ldrh.w	r1, [r0, #206]	; 0xce
    699a:	428a      	cmp	r2, r1
    699c:	d30a      	bcc.n	69b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1968>
    699e:	f890 2130 	ldrb.w	r2, [r0, #304]	; 0x130
    69a2:	f88d 2000 	strb.w	r2, [sp]
    69a6:	9a00      	ldr	r2, [sp, #0]
    69a8:	9200      	str	r2, [sp, #0]
    69aa:	f89d 2000 	ldrb.w	r2, [sp]
    69ae:	b10a      	cbz	r2, 69b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1968>
    69b0:	2122      	movs	r1, #34	; 0x22
    69b2:	e007      	b.n	69c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    69b4:	f890 20a1 	ldrb.w	r2, [r0, #161]	; 0xa1
    69b8:	b172      	cbz	r2, 69d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x198c>
    69ba:	f8b0 20cc 	ldrh.w	r2, [r0, #204]	; 0xcc
    69be:	428a      	cmp	r2, r1
    69c0:	d31c      	bcc.n	69fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b0>
    69c2:	2108      	movs	r1, #8
    69c4:	f890 20bc 	ldrb.w	r2, [r0, #188]	; 0xbc
    69c8:	f88d 2000 	strb.w	r2, [sp]
    69cc:	9a00      	ldr	r2, [sp, #0]
    69ce:	9200      	str	r2, [sp, #0]
    69d0:	f89d 2000 	ldrb.w	r2, [sp]
    69d4:	b96a      	cbnz	r2, 69f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19a6>
    69d6:	e005      	b.n	69e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1998>
    69d8:	f8b0 10cc 	ldrh.w	r1, [r0, #204]	; 0xcc
    69dc:	2906      	cmp	r1, #6
    69de:	d30d      	bcc.n	69fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b0>
    69e0:	213e      	movs	r1, #62	; 0x3e
    69e2:	e7ef      	b.n	69c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    69e4:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    69e8:	2202      	movs	r2, #2
    69ea:	4908      	ldr	r1, [pc, #32]	; (6a0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c0>)
    69ec:	30b4      	adds	r0, #180	; 0xb4
    69ee:	f007 fd05 	bl	e3fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    69f2:	6860      	ldr	r0, [r4, #4]
    69f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    69f8:	f008 bdd7 	b.w	f5aa <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    69fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6a00:	2100      	movs	r1, #0
    6a02:	f7fd bdcb 	b.w	459c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    6a06:	0000      	.short	0x0000
    6a08:	20000124 	.word	0x20000124
    6a0c:	0000e6b9 	.word	0x0000e6b9
    6a10:	b570      	push	{r4, r5, r6, lr}
    6a12:	4614      	mov	r4, r2
    6a14:	460e      	mov	r6, r1
    6a16:	6861      	ldr	r1, [r4, #4]
    6a18:	4602      	mov	r2, r0
    6a1a:	2500      	movs	r5, #0
    6a1c:	f891 009d 	ldrb.w	r0, [r1, #157]	; 0x9d
    6a20:	2a0e      	cmp	r2, #14
    6a22:	d00a      	beq.n	6a3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19ee>
    6a24:	2a12      	cmp	r2, #18
    6a26:	d011      	beq.n	6a4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a00>
    6a28:	2a14      	cmp	r2, #20
    6a2a:	d016      	beq.n	6a5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0e>
    6a2c:	2a17      	cmp	r2, #23
    6a2e:	d023      	beq.n	6a78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a2c>
    6a30:	f240 31dd 	movw	r1, #989	; 0x3dd
    6a34:	2031      	movs	r0, #49	; 0x31
    6a36:	f7f9 ffbb 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6a3a:	2804      	cmp	r0, #4
    6a3c:	d131      	bne.n	6aa2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    6a3e:	4620      	mov	r0, r4
    6a40:	f007 fe31 	bl	e6a6 <sym_GRWJSKDQ3POPWSRNDRQTNNGA4TE3WRBKWXT5JAQ>
    6a44:	4620      	mov	r0, r4
    6a46:	f7fc fb6d 	bl	3124 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q>
    6a4a:	e02a      	b.n	6aa2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    6a4c:	280f      	cmp	r0, #15
    6a4e:	d128      	bne.n	6aa2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    6a50:	4620      	mov	r0, r4
    6a52:	f007 ff85 	bl	e960 <sym_M65PCSZAPVYR7V5YEMYJW264OYLXMV6F2CRGMXQ>
    6a56:	4605      	mov	r5, r0
    6a58:	e023      	b.n	6aa2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    6a5a:	281d      	cmp	r0, #29
    6a5c:	d121      	bne.n	6aa2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    6a5e:	4620      	mov	r0, r4
    6a60:	f007 fe21 	bl	e6a6 <sym_GRWJSKDQ3POPWSRNDRQTNNGA4TE3WRBKWXT5JAQ>
    6a64:	b126      	cbz	r6, 6a70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a24>
    6a66:	6860      	ldr	r0, [r4, #4]
    6a68:	2105      	movs	r1, #5
    6a6a:	30ec      	adds	r0, #236	; 0xec
    6a6c:	f008 fd79 	bl	f562 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b0>
    6a70:	480d      	ldr	r0, [pc, #52]	; (6aa8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a5c>)
    6a72:	f007 fec9 	bl	e808 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>
    6a76:	e014      	b.n	6aa2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    6a78:	f891 009e 	ldrb.w	r0, [r1, #158]	; 0x9e
    6a7c:	2823      	cmp	r0, #35	; 0x23
    6a7e:	d110      	bne.n	6aa2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    6a80:	2600      	movs	r6, #0
    6a82:	f881 609e 	strb.w	r6, [r1, #158]	; 0x9e
    6a86:	4808      	ldr	r0, [pc, #32]	; (6aa8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a5c>)
    6a88:	f007 fdf9 	bl	e67e <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    6a8c:	6860      	ldr	r0, [r4, #4]
    6a8e:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    6a92:	2801      	cmp	r0, #1
    6a94:	d102      	bne.n	6a9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a50>
    6a96:	2000      	movs	r0, #0
    6a98:	f7ff fa78 	bl	5f8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    6a9c:	6860      	ldr	r0, [r4, #4]
    6a9e:	f880 613c 	strb.w	r6, [r0, #316]	; 0x13c
    6aa2:	4628      	mov	r0, r5
    6aa4:	bd70      	pop	{r4, r5, r6, pc}
    6aa6:	0000      	.short	0x0000
    6aa8:	20000124 	.word	0x20000124
    6aac:	b570      	push	{r4, r5, r6, lr}
    6aae:	4d2e      	ldr	r5, [pc, #184]	; (6b68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b1c>)
    6ab0:	6868      	ldr	r0, [r5, #4]
    6ab2:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    6ab6:	b151      	cbz	r1, 6ace <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a82>
    6ab8:	2901      	cmp	r1, #1
    6aba:	d008      	beq.n	6ace <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a82>
    6abc:	2902      	cmp	r1, #2
    6abe:	d009      	beq.n	6ad4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a88>
    6ac0:	2903      	cmp	r1, #3
    6ac2:	d007      	beq.n	6ad4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a88>
    6ac4:	f640 4118 	movw	r1, #3096	; 0xc18
    6ac8:	2031      	movs	r0, #49	; 0x31
    6aca:	f7f9 ff71 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6ace:	f8b0 1224 	ldrh.w	r1, [r0, #548]	; 0x224
    6ad2:	e037      	b.n	6b44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af8>
    6ad4:	f890 109f 	ldrb.w	r1, [r0, #159]	; 0x9f
    6ad8:	2907      	cmp	r1, #7
    6ada:	d036      	beq.n	6b4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1afe>
    6adc:	f8b0 20cc 	ldrh.w	r2, [r0, #204]	; 0xcc
    6ae0:	f8b0 10ce 	ldrh.w	r1, [r0, #206]	; 0xce
    6ae4:	2400      	movs	r4, #0
    6ae6:	1c93      	adds	r3, r2, #2
    6ae8:	4299      	cmp	r1, r3
    6aea:	d306      	bcc.n	6afa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aae>
    6aec:	1a89      	subs	r1, r1, r2
    6aee:	1e89      	subs	r1, r1, #2
    6af0:	040c      	lsls	r4, r1, #16
    6af2:	0c24      	lsrs	r4, r4, #16
    6af4:	d001      	beq.n	6afa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aae>
    6af6:	1e64      	subs	r4, r4, #1
    6af8:	b2a4      	uxth	r4, r4
    6afa:	f890 10ca 	ldrb.w	r1, [r0, #202]	; 0xca
    6afe:	b139      	cbz	r1, 6b10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ac4>
    6b00:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    6b04:	2301      	movs	r3, #1
    6b06:	2109      	movs	r1, #9
    6b08:	3080      	adds	r0, #128	; 0x80
    6b0a:	f007 f8cf 	bl	dcac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6b0e:	b340      	cbz	r0, 6b62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b16>
    6b10:	f7ff feb2 	bl	6878 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x182c>
    6b14:	b178      	cbz	r0, 6b36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aea>
    6b16:	686a      	ldr	r2, [r5, #4]
    6b18:	2000      	movs	r0, #0
    6b1a:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
    6b1e:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
    6b22:	1c93      	adds	r3, r2, #2
    6b24:	4299      	cmp	r1, r3
    6b26:	d303      	bcc.n	6b30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ae4>
    6b28:	1a88      	subs	r0, r1, r2
    6b2a:	1e80      	subs	r0, r0, #2
    6b2c:	d000      	beq.n	6b30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ae4>
    6b2e:	1e40      	subs	r0, r0, #1
    6b30:	42a0      	cmp	r0, r4
    6b32:	d200      	bcs.n	6b36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aea>
    6b34:	b284      	uxth	r4, r0
    6b36:	b10c      	cbz	r4, 6b3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af0>
    6b38:	1e64      	subs	r4, r4, #1
    6b3a:	b2a4      	uxth	r4, r4
    6b3c:	6868      	ldr	r0, [r5, #4]
    6b3e:	f8b0 1224 	ldrh.w	r1, [r0, #548]	; 0x224
    6b42:	4421      	add	r1, r4
    6b44:	f8a0 1220 	strh.w	r1, [r0, #544]	; 0x220
    6b48:	bd70      	pop	{r4, r5, r6, pc}
    6b4a:	f8b0 10cc 	ldrh.w	r1, [r0, #204]	; 0xcc
    6b4e:	2903      	cmp	r1, #3
    6b50:	d3bd      	bcc.n	6ace <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a82>
    6b52:	f830 1f94 	ldrh.w	r1, [r0, #148]!
    6b56:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
    6b58:	4411      	add	r1, r2
    6b5a:	1c49      	adds	r1, r1, #1
    6b5c:	f8a0 118c 	strh.w	r1, [r0, #396]	; 0x18c
    6b60:	bd70      	pop	{r4, r5, r6, pc}
    6b62:	2400      	movs	r4, #0
    6b64:	e7ea      	b.n	6b3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af0>
    6b66:	0000      	.short	0x0000
    6b68:	20000124 	.word	0x20000124

00006b6c <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>:
    6b6c:	b570      	push	{r4, r5, r6, lr}
    6b6e:	6844      	ldr	r4, [r0, #4]
    6b70:	220d      	movs	r2, #13
    6b72:	f504 7598 	add.w	r5, r4, #304	; 0x130
    6b76:	2100      	movs	r1, #0
    6b78:	f104 006f 	add.w	r0, r4, #111	; 0x6f
    6b7c:	f00a f9fd 	bl	10f7a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6b80:	f44f 70a3 	mov.w	r0, #326	; 0x146
    6b84:	2100      	movs	r1, #0
    6b86:	f8a4 1144 	strh.w	r1, [r4, #324]	; 0x144
    6b8a:	5501      	strb	r1, [r0, r4]
    6b8c:	f8a5 1017 	strh.w	r1, [r5, #23]
    6b90:	7669      	strb	r1, [r5, #25]
    6b92:	4608      	mov	r0, r1
    6b94:	f05f 017f 	movs.w	r1, #127	; 0x7f
    6b98:	eb04 0240 	add.w	r2, r4, r0, lsl #1
    6b9c:	1c40      	adds	r0, r0, #1
    6b9e:	b2c0      	uxtb	r0, r0
    6ba0:	f882 1074 	strb.w	r1, [r2, #116]	; 0x74
    6ba4:	2802      	cmp	r0, #2
    6ba6:	d3f7      	bcc.n	6b98 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x2c>
    6ba8:	f994 106e 	ldrsb.w	r1, [r4, #110]	; 0x6e
    6bac:	4620      	mov	r0, r4
    6bae:	f008 fe43 	bl	f838 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>
    6bb2:	2000      	movs	r0, #0
    6bb4:	21ff      	movs	r1, #255	; 0xff
    6bb6:	1822      	adds	r2, r4, r0
    6bb8:	1c40      	adds	r0, r0, #1
    6bba:	b2c0      	uxtb	r0, r0
    6bbc:	f882 1077 	strb.w	r1, [r2, #119]	; 0x77
    6bc0:	2802      	cmp	r0, #2
    6bc2:	d3f8      	bcc.n	6bb6 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x4a>
    6bc4:	bd70      	pop	{r4, r5, r6, pc}
	...

00006bc8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    6bc8:	4903      	ldr	r1, [pc, #12]	; (6bd8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    6bca:	884a      	ldrh	r2, [r1, #2]
    6bcc:	8002      	strh	r2, [r0, #0]
    6bce:	7809      	ldrb	r1, [r1, #0]
    6bd0:	7081      	strb	r1, [r0, #2]
    6bd2:	2000      	movs	r0, #0
    6bd4:	4770      	bx	lr
    6bd6:	0000      	.short	0x0000
    6bd8:	20001308 	.word	0x20001308

00006bdc <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    6bdc:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    6bde:	460c      	mov	r4, r1
    6be0:	4605      	mov	r5, r0
    6be2:	8800      	ldrh	r0, [r0, #0]
    6be4:	4669      	mov	r1, sp
    6be6:	f007 f84a 	bl	dc7e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6bea:	2200      	movs	r2, #0
    6bec:	b128      	cbz	r0, 6bfa <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    6bee:	f8c4 2002 	str.w	r2, [r4, #2]
    6bf2:	71a2      	strb	r2, [r4, #6]
    6bf4:	8022      	strh	r2, [r4, #0]
    6bf6:	2002      	movs	r0, #2
    6bf8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    6bfa:	9901      	ldr	r1, [sp, #4]
    6bfc:	f111 0180 	adds.w	r1, r1, #128	; 0x80
    6c00:	f881 2074 	strb.w	r2, [r1, #116]	; 0x74
    6c04:	f8d1 0026 	ldr.w	r0, [r1, #38]	; 0x26
    6c08:	f8c4 0002 	str.w	r0, [r4, #2]
    6c0c:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
    6c10:	71a0      	strb	r0, [r4, #6]
    6c12:	8828      	ldrh	r0, [r5, #0]
    6c14:	8020      	strh	r0, [r4, #0]
    6c16:	f891 0074 	ldrb.w	r0, [r1, #116]	; 0x74
    6c1a:	f88d 0008 	strb.w	r0, [sp, #8]
    6c1e:	9802      	ldr	r0, [sp, #8]
    6c20:	9002      	str	r0, [sp, #8]
    6c22:	f89d 0008 	ldrb.w	r0, [sp, #8]
    6c26:	2800      	cmp	r0, #0
    6c28:	d1ea      	bne.n	6c00 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    6c2a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00006c2c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    6c2c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    6c2e:	460d      	mov	r5, r1
    6c30:	4606      	mov	r6, r0
    6c32:	8800      	ldrh	r0, [r0, #0]
    6c34:	4669      	mov	r1, sp
    6c36:	f007 f822 	bl	dc7e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6c3a:	2800      	cmp	r0, #0
    6c3c:	d11a      	bne.n	6c74 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    6c3e:	f8dd 4004 	ldr.w	r4, [sp, #4]
    6c42:	2700      	movs	r7, #0
    6c44:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    6c48:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    6c4c:	f009 fb71 	bl	10332 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    6c50:	70a8      	strb	r0, [r5, #2]
    6c52:	7860      	ldrb	r0, [r4, #1]
    6c54:	f009 fb6d 	bl	10332 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    6c58:	70e8      	strb	r0, [r5, #3]
    6c5a:	78a0      	ldrb	r0, [r4, #2]
    6c5c:	f88d 0008 	strb.w	r0, [sp, #8]
    6c60:	9802      	ldr	r0, [sp, #8]
    6c62:	9002      	str	r0, [sp, #8]
    6c64:	f89d 0008 	ldrb.w	r0, [sp, #8]
    6c68:	3c6a      	subs	r4, #106	; 0x6a
    6c6a:	2800      	cmp	r0, #0
    6c6c:	d1ea      	bne.n	6c44 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x18>
    6c6e:	8830      	ldrh	r0, [r6, #0]
    6c70:	8028      	strh	r0, [r5, #0]
    6c72:	2000      	movs	r0, #0
    6c74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00006c78 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    6c78:	4903      	ldr	r1, [pc, #12]	; (6c88 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x10>)
    6c7a:	888a      	ldrh	r2, [r1, #4]
    6c7c:	8002      	strh	r2, [r0, #0]
    6c7e:	88c9      	ldrh	r1, [r1, #6]
    6c80:	8041      	strh	r1, [r0, #2]
    6c82:	2000      	movs	r0, #0
    6c84:	4770      	bx	lr
    6c86:	0000      	.short	0x0000
    6c88:	2000029c 	.word	0x2000029c

00006c8c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    6c8c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    6c8e:	2400      	movs	r4, #0
    6c90:	a902      	add	r1, sp, #8
    6c92:	f88d 4004 	strb.w	r4, [sp, #4]
    6c96:	f88d 4008 	strb.w	r4, [sp, #8]
    6c9a:	9100      	str	r1, [sp, #0]
    6c9c:	7882      	ldrb	r2, [r0, #2]
    6c9e:	7841      	ldrb	r1, [r0, #1]
    6ca0:	7800      	ldrb	r0, [r0, #0]
    6ca2:	ab01      	add	r3, sp, #4
    6ca4:	f009 fcc0 	bl	10628 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x324>
    6ca8:	2800      	cmp	r0, #0
    6caa:	d112      	bne.n	6cd2 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x46>
    6cac:	f89d 0004 	ldrb.w	r0, [sp, #4]
    6cb0:	f009 fbf3 	bl	1049a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    6cb4:	b170      	cbz	r0, 6cd4 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    6cb6:	f89d 0008 	ldrb.w	r0, [sp, #8]
    6cba:	f009 fbee 	bl	1049a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    6cbe:	b148      	cbz	r0, 6cd4 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    6cc0:	4805      	ldr	r0, [pc, #20]	; (6cd8 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x4c>)
    6cc2:	f89d 1004 	ldrb.w	r1, [sp, #4]
    6cc6:	7381      	strb	r1, [r0, #14]
    6cc8:	f89d 1008 	ldrb.w	r1, [sp, #8]
    6ccc:	73c1      	strb	r1, [r0, #15]
    6cce:	8204      	strh	r4, [r0, #16]
    6cd0:	2000      	movs	r0, #0
    6cd2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    6cd4:	2011      	movs	r0, #17
    6cd6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    6cd8:	20001308 	.word	0x20001308

00006cdc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    6cdc:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    6ce0:	460f      	mov	r7, r1
    6ce2:	4605      	mov	r5, r0
    6ce4:	7806      	ldrb	r6, [r0, #0]
    6ce6:	f009 fb8b 	bl	10400 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xfc>
    6cea:	2800      	cmp	r0, #0
    6cec:	d10e      	bne.n	6d0c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x30>
    6cee:	4628      	mov	r0, r5
    6cf0:	f009 fb60 	bl	103b4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xb0>
    6cf4:	2800      	cmp	r0, #0
    6cf6:	d109      	bne.n	6d0c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x30>
    6cf8:	2101      	movs	r1, #1
    6cfa:	4630      	mov	r0, r6
    6cfc:	f7fa f986 	bl	100c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6d00:	0004      	movs	r4, r0
    6d02:	d005      	beq.n	6d10 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x34>
    6d04:	f008 f952 	bl	efac <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    6d08:	b170      	cbz	r0, 6d28 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x4c>
    6d0a:	200c      	movs	r0, #12
    6d0c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    6d10:	2101      	movs	r1, #1
    6d12:	4630      	mov	r0, r6
    6d14:	f7fa f942 	bl	f9c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    6d18:	0004      	movs	r4, r0
    6d1a:	d013      	beq.n	6d44 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x68>
    6d1c:	4817      	ldr	r0, [pc, #92]	; (6d7c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa0>)
    6d1e:	f990 1000 	ldrsb.w	r1, [r0]
    6d22:	4620      	mov	r0, r4
    6d24:	f007 ff17 	bl	eb56 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    6d28:	4620      	mov	r0, r4
    6d2a:	f007 ff7f 	bl	ec2c <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    6d2e:	7038      	strb	r0, [r7, #0]
    6d30:	74e8      	strb	r0, [r5, #19]
    6d32:	4629      	mov	r1, r5
    6d34:	4620      	mov	r0, r4
    6d36:	f7fc fc57 	bl	35e8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    6d3a:	4606      	mov	r6, r0
    6d3c:	7e68      	ldrb	r0, [r5, #25]
    6d3e:	b1d0      	cbz	r0, 6d76 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x9a>
    6d40:	b12e      	cbz	r6, 6d4e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x72>
    6d42:	e018      	b.n	6d76 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x9a>
    6d44:	f241 512e 	movw	r1, #5422	; 0x152e
    6d48:	2039      	movs	r0, #57	; 0x39
    6d4a:	f7f9 fe31 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6d4e:	2200      	movs	r2, #0
    6d50:	4668      	mov	r0, sp
    6d52:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6d54:	f006 fdc7 	bl	d8e6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    6d58:	2200      	movs	r2, #0
    6d5a:	2101      	movs	r1, #1
    6d5c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    6d5e:	f006 fe3c 	bl	d9da <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    6d62:	2204      	movs	r2, #4
    6d64:	4668      	mov	r0, sp
    6d66:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6d68:	f006 fdbd 	bl	d8e6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    6d6c:	2200      	movs	r2, #0
    6d6e:	4611      	mov	r1, r2
    6d70:	6b60      	ldr	r0, [r4, #52]	; 0x34
    6d72:	f006 fe32 	bl	d9da <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    6d76:	4630      	mov	r0, r6
    6d78:	e7c8      	b.n	6d0c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x30>
    6d7a:	0000      	.short	0x0000
    6d7c:	20000294 	.word	0x20000294

00006d80 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    6d80:	7801      	ldrb	r1, [r0, #0]
    6d82:	b171      	cbz	r1, 6da2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    6d84:	7841      	ldrb	r1, [r0, #1]
    6d86:	b161      	cbz	r1, 6da2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    6d88:	8841      	ldrh	r1, [r0, #2]
    6d8a:	291b      	cmp	r1, #27
    6d8c:	d309      	bcc.n	6da2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    6d8e:	8881      	ldrh	r1, [r0, #4]
    6d90:	291b      	cmp	r1, #27
    6d92:	d306      	bcc.n	6da2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    6d94:	4904      	ldr	r1, [pc, #16]	; (6da8 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    6d96:	6802      	ldr	r2, [r0, #0]
    6d98:	600a      	str	r2, [r1, #0]
    6d9a:	8880      	ldrh	r0, [r0, #4]
    6d9c:	8088      	strh	r0, [r1, #4]
    6d9e:	2000      	movs	r0, #0
    6da0:	4770      	bx	lr
    6da2:	2012      	movs	r0, #18
    6da4:	4770      	bx	lr
    6da6:	0000      	.short	0x0000
    6da8:	20001308 	.word	0x20001308

00006dac <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    6dac:	6800      	ldr	r0, [r0, #0]
    6dae:	f240 41e2 	movw	r1, #1250	; 0x4e2
    6db2:	4288      	cmp	r0, r1
    6db4:	d303      	bcc.n	6dbe <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    6db6:	4903      	ldr	r1, [pc, #12]	; (6dc4 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    6db8:	6088      	str	r0, [r1, #8]
    6dba:	2000      	movs	r0, #0
    6dbc:	4770      	bx	lr
    6dbe:	2012      	movs	r0, #18
    6dc0:	4770      	bx	lr
    6dc2:	0000      	.short	0x0000
    6dc4:	20001308 	.word	0x20001308

00006dc8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    6dc8:	4a03      	ldr	r2, [pc, #12]	; (6dd8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    6dca:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
    6dce:	6001      	str	r1, [r0, #0]
    6dd0:	6042      	str	r2, [r0, #4]
    6dd2:	2000      	movs	r0, #0
    6dd4:	4770      	bx	lr
    6dd6:	0000      	.short	0x0000
    6dd8:	00007324 	.word	0x00007324

00006ddc <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    6ddc:	b50e      	push	{r1, r2, r3, lr}
    6dde:	8800      	ldrh	r0, [r0, #0]
    6de0:	4669      	mov	r1, sp
    6de2:	f006 ff4c 	bl	dc7e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6de6:	b960      	cbnz	r0, 6e02 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
    6de8:	9801      	ldr	r0, [sp, #4]
    6dea:	f009 fbd2 	bl	10592 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28e>
    6dee:	b140      	cbz	r0, 6e02 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
    6df0:	9801      	ldr	r0, [sp, #4]
    6df2:	4601      	mov	r1, r0
    6df4:	f890 2142 	ldrb.w	r2, [r0, #322]	; 0x142
    6df8:	3080      	adds	r0, #128	; 0x80
    6dfa:	f501 71a1 	add.w	r1, r1, #322	; 0x142
    6dfe:	b962      	cbnz	r2, 6e1a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x3e>
    6e00:	e001      	b.n	6e06 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2a>
    6e02:	2002      	movs	r0, #2
    6e04:	bd0e      	pop	{r1, r2, r3, pc}
    6e06:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
    6e0a:	f88d 2008 	strb.w	r2, [sp, #8]
    6e0e:	9a02      	ldr	r2, [sp, #8]
    6e10:	9202      	str	r2, [sp, #8]
    6e12:	f89d 3008 	ldrb.w	r3, [sp, #8]
    6e16:	2201      	movs	r2, #1
    6e18:	b10b      	cbz	r3, 6e1e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x42>
    6e1a:	203a      	movs	r0, #58	; 0x3a
    6e1c:	bd0e      	pop	{r1, r2, r3, pc}
    6e1e:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
    6e22:	079b      	lsls	r3, r3, #30
    6e24:	d006      	beq.n	6e34 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x58>
    6e26:	2202      	movs	r2, #2
    6e28:	4905      	ldr	r1, [pc, #20]	; (6e40 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x64>)
    6e2a:	305e      	adds	r0, #94	; 0x5e
    6e2c:	f007 fafa 	bl	e424 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    6e30:	2000      	movs	r0, #0
    6e32:	bd0e      	pop	{r1, r2, r3, pc}
    6e34:	700a      	strb	r2, [r1, #0]
    6e36:	4668      	mov	r0, sp
    6e38:	f007 fab4 	bl	e3a4 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    6e3c:	e7f8      	b.n	6e30 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x54>
    6e3e:	0000      	.short	0x0000
    6e40:	0000e999 	.word	0x0000e999

00006e44 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ>:
    6e44:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    6e48:	4613      	mov	r3, r2
    6e4a:	4a33      	ldr	r2, [pc, #204]	; (6f18 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xd4>)
    6e4c:	460f      	mov	r7, r1
    6e4e:	f8b0 1054 	ldrh.w	r1, [r0, #84]	; 0x54
    6e52:	8814      	ldrh	r4, [r2, #0]
    6e54:	f8b0 6052 	ldrh.w	r6, [r0, #82]	; 0x52
    6e58:	428c      	cmp	r4, r1
    6e5a:	d200      	bcs.n	6e5e <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x1a>
    6e5c:	4621      	mov	r1, r4
    6e5e:	4688      	mov	r8, r1
    6e60:	8891      	ldrh	r1, [r2, #4]
    6e62:	42b1      	cmp	r1, r6
    6e64:	d200      	bcs.n	6e68 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x24>
    6e66:	460e      	mov	r6, r1
    6e68:	8851      	ldrh	r1, [r2, #2]
    6e6a:	f640 0448 	movw	r4, #2120	; 0x848
    6e6e:	42a1      	cmp	r1, r4
    6e70:	d300      	bcc.n	6e74 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x30>
    6e72:	4621      	mov	r1, r4
    6e74:	88d5      	ldrh	r5, [r2, #6]
    6e76:	42a5      	cmp	r5, r4
    6e78:	d300      	bcc.n	6e7c <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x38>
    6e7a:	4625      	mov	r5, r4
    6e7c:	42a1      	cmp	r1, r4
    6e7e:	d200      	bcs.n	6e82 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x3e>
    6e80:	460c      	mov	r4, r1
    6e82:	f44f 72a4 	mov.w	r2, #328	; 0x148
    6e86:	2e1b      	cmp	r6, #27
    6e88:	d001      	beq.n	6e8e <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x4a>
    6e8a:	4295      	cmp	r5, r2
    6e8c:	d104      	bne.n	6e98 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x54>
    6e8e:	f1b8 0f1b 	cmp.w	r8, #27
    6e92:	d03e      	beq.n	6f12 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xce>
    6e94:	4294      	cmp	r4, r2
    6e96:	d03c      	beq.n	6f12 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xce>
    6e98:	466a      	mov	r2, sp
    6e9a:	4619      	mov	r1, r3
    6e9c:	f009 fb20 	bl	104e0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    6ea0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    6ea4:	4641      	mov	r1, r8
    6ea6:	4540      	cmp	r0, r8
    6ea8:	d900      	bls.n	6eac <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x68>
    6eaa:	4608      	mov	r0, r1
    6eac:	80f8      	strh	r0, [r7, #6]
    6eae:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    6eb2:	42a1      	cmp	r1, r4
    6eb4:	d800      	bhi.n	6eb8 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x74>
    6eb6:	460c      	mov	r4, r1
    6eb8:	813c      	strh	r4, [r7, #8]
    6eba:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    6ebe:	42b1      	cmp	r1, r6
    6ec0:	d800      	bhi.n	6ec4 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x80>
    6ec2:	460e      	mov	r6, r1
    6ec4:	807e      	strh	r6, [r7, #2]
    6ec6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    6eca:	42a9      	cmp	r1, r5
    6ecc:	d800      	bhi.n	6ed0 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x8c>
    6ece:	460d      	mov	r5, r1
    6ed0:	80bd      	strh	r5, [r7, #4]
    6ed2:	21ff      	movs	r1, #255	; 0xff
    6ed4:	7039      	strb	r1, [r7, #0]
    6ed6:	381b      	subs	r0, #27
    6ed8:	28e0      	cmp	r0, #224	; 0xe0
    6eda:	d902      	bls.n	6ee2 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x9e>
    6edc:	f44f 61b6 	mov.w	r1, #1456	; 0x5b0
    6ee0:	e014      	b.n	6f0c <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xc8>
    6ee2:	3e1b      	subs	r6, #27
    6ee4:	2ee0      	cmp	r6, #224	; 0xe0
    6ee6:	d902      	bls.n	6eee <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xaa>
    6ee8:	f240 51b2 	movw	r1, #1458	; 0x5b2
    6eec:	e00e      	b.n	6f0c <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xc8>
    6eee:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    6ef2:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    6ef6:	4284      	cmp	r4, r0
    6ef8:	d902      	bls.n	6f00 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xbc>
    6efa:	f240 51b4 	movw	r1, #1460	; 0x5b4
    6efe:	e005      	b.n	6f0c <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xc8>
    6f00:	f5a5 75a4 	sub.w	r5, r5, #328	; 0x148
    6f04:	4285      	cmp	r5, r0
    6f06:	d904      	bls.n	6f12 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xce>
    6f08:	f240 51b6 	movw	r1, #1462	; 0x5b6
    6f0c:	2039      	movs	r0, #57	; 0x39
    6f0e:	f7f9 fd4f 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f12:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    6f16:	0000      	.short	0x0000
    6f18:	2000029c 	.word	0x2000029c

00006f1c <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A>:
    6f1c:	b570      	push	{r4, r5, r6, lr}
    6f1e:	b086      	sub	sp, #24
    6f20:	4604      	mov	r4, r0
    6f22:	f000 fa9d 	bl	7460 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    6f26:	0940      	lsrs	r0, r0, #5
    6f28:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
    6f2c:	4e2d      	ldr	r6, [pc, #180]	; (6fe4 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xc8>)
    6f2e:	07c0      	lsls	r0, r0, #31
    6f30:	f104 052c 	add.w	r5, r4, #44	; 0x2c
    6f34:	d002      	beq.n	6f3c <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x20>
    6f36:	8871      	ldrh	r1, [r6, #2]
    6f38:	88b0      	ldrh	r0, [r6, #4]
    6f3a:	e001      	b.n	6f40 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x24>
    6f3c:	211b      	movs	r1, #27
    6f3e:	4608      	mov	r0, r1
    6f40:	84e9      	strh	r1, [r5, #38]	; 0x26
    6f42:	8528      	strh	r0, [r5, #40]	; 0x28
    6f44:	f000 fa8c 	bl	7460 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    6f48:	0788      	lsls	r0, r1, #30
    6f4a:	f04f 0501 	mov.w	r5, #1
    6f4e:	d505      	bpl.n	6f5c <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x40>
    6f50:	f88d 5000 	strb.w	r5, [sp]
    6f54:	4668      	mov	r0, sp
    6f56:	9401      	str	r4, [sp, #4]
    6f58:	f7ff fe08 	bl	6b6c <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>
    6f5c:	68b0      	ldr	r0, [r6, #8]
    6f5e:	62e0      	str	r0, [r4, #44]	; 0x2c
    6f60:	f641 514c 	movw	r1, #7500	; 0x1d4c
    6f64:	6121      	str	r1, [r4, #16]
    6f66:	8821      	ldrh	r1, [r4, #0]
    6f68:	f8ad 1004 	strh.w	r1, [sp, #4]
    6f6c:	7bb1      	ldrb	r1, [r6, #14]
    6f6e:	f88d 1006 	strb.w	r1, [sp, #6]
    6f72:	7bf1      	ldrb	r1, [r6, #15]
    6f74:	f88d 1007 	strb.w	r1, [sp, #7]
    6f78:	8a31      	ldrh	r1, [r6, #16]
    6f7a:	f8ad 1008 	strh.w	r1, [sp, #8]
    6f7e:	a904      	add	r1, sp, #16
    6f80:	9100      	str	r1, [sp, #0]
    6f82:	4628      	mov	r0, r5
    6f84:	ab03      	add	r3, sp, #12
    6f86:	aa01      	add	r2, sp, #4
    6f88:	4621      	mov	r1, r4
    6f8a:	f009 fadf 	bl	1054c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x248>
    6f8e:	b138      	cbz	r0, 6fa0 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x84>
    6f90:	8820      	ldrh	r0, [r4, #0]
    6f92:	2100      	movs	r1, #0
    6f94:	f7fa f8dc 	bl	1150 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6f98:	b308      	cbz	r0, 6fde <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xc2>
    6f9a:	f240 517d 	movw	r1, #1405	; 0x57d
    6f9e:	e01b      	b.n	6fd8 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xbc>
    6fa0:	f89d 000c 	ldrb.w	r0, [sp, #12]
    6fa4:	f88d 0014 	strb.w	r0, [sp, #20]
    6fa8:	f89d 0010 	ldrb.w	r0, [sp, #16]
    6fac:	f88d 0015 	strb.w	r0, [sp, #21]
    6fb0:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    6fb4:	f8ad 0016 	strh.w	r0, [sp, #22]
    6fb8:	a905      	add	r1, sp, #20
    6fba:	4620      	mov	r0, r4
    6fbc:	f006 ff1c 	bl	ddf8 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    6fc0:	7870      	ldrb	r0, [r6, #1]
    6fc2:	9000      	str	r0, [sp, #0]
    6fc4:	7833      	ldrb	r3, [r6, #0]
    6fc6:	88b2      	ldrh	r2, [r6, #4]
    6fc8:	8871      	ldrh	r1, [r6, #2]
    6fca:	8820      	ldrh	r0, [r4, #0]
    6fcc:	f7fa f8f2 	bl	11b4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    6fd0:	2800      	cmp	r0, #0
    6fd2:	d005      	beq.n	6fe0 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xc4>
    6fd4:	f44f 61b1 	mov.w	r1, #1416	; 0x588
    6fd8:	2039      	movs	r0, #57	; 0x39
    6fda:	f7f9 fce9 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6fde:	2009      	movs	r0, #9
    6fe0:	b006      	add	sp, #24
    6fe2:	bd70      	pop	{r4, r5, r6, pc}
    6fe4:	20001308 	.word	0x20001308

00006fe8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>:
    6fe8:	b510      	push	{r4, lr}
    6fea:	2005      	movs	r0, #5
    6fec:	f000 fa2c 	bl	7448 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    6ff0:	f7fd ff84 	bl	4efc <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    6ff4:	4902      	ldr	r1, [pc, #8]	; (7000 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x18>)
    6ff6:	4801      	ldr	r0, [pc, #4]	; (6ffc <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x14>)
    6ff8:	6048      	str	r0, [r1, #4]
    6ffa:	bd10      	pop	{r4, pc}
    6ffc:	00006e45 	.word	0x00006e45
    7000:	20000294 	.word	0x20000294
    7004:	b51c      	push	{r2, r3, r4, lr}
    7006:	4909      	ldr	r1, [pc, #36]	; (702c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x44>)
    7008:	e9d1 0100 	ldrd	r0, r1, [r1]
    700c:	e9cd 0100 	strd	r0, r1, [sp]
    7010:	e005      	b.n	701e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
    7012:	9800      	ldr	r0, [sp, #0]
    7014:	f007 ffca 	bl	efac <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    7018:	b108      	cbz	r0, 701e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
    701a:	2001      	movs	r0, #1
    701c:	bd1c      	pop	{r2, r3, r4, pc}
    701e:	4668      	mov	r0, sp
    7020:	f7fa f846 	bl	10b0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7024:	2800      	cmp	r0, #0
    7026:	d0f4      	beq.n	7012 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x2a>
    7028:	2000      	movs	r0, #0
    702a:	bd1c      	pop	{r2, r3, r4, pc}
    702c:	00007324 	.word	0x00007324
    7030:	b510      	push	{r4, lr}
    7032:	480d      	ldr	r0, [pc, #52]	; (7068 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x80>)
    7034:	2100      	movs	r1, #0
    7036:	4b0d      	ldr	r3, [pc, #52]	; (706c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x84>)
    7038:	74c1      	strb	r1, [r0, #19]
    703a:	8281      	strh	r1, [r0, #20]
    703c:	221b      	movs	r2, #27
    703e:	801a      	strh	r2, [r3, #0]
    7040:	f44f 74a4 	mov.w	r4, #328	; 0x148
    7044:	805c      	strh	r4, [r3, #2]
    7046:	809a      	strh	r2, [r3, #4]
    7048:	80dc      	strh	r4, [r3, #6]
    704a:	7381      	strb	r1, [r0, #14]
    704c:	73c1      	strb	r1, [r0, #15]
    704e:	2303      	movs	r3, #3
    7050:	7003      	strb	r3, [r0, #0]
    7052:	2302      	movs	r3, #2
    7054:	7043      	strb	r3, [r0, #1]
    7056:	8042      	strh	r2, [r0, #2]
    7058:	8082      	strh	r2, [r0, #4]
    705a:	f640 62a6 	movw	r2, #3750	; 0xea6
    705e:	6082      	str	r2, [r0, #8]
    7060:	7481      	strb	r1, [r0, #18]
    7062:	7301      	strb	r1, [r0, #12]
    7064:	bd10      	pop	{r4, pc}
    7066:	0000      	.short	0x0000
    7068:	20001308 	.word	0x20001308
    706c:	2000029c 	.word	0x2000029c
    7070:	b510      	push	{r4, lr}
    7072:	2101      	movs	r1, #1
    7074:	2000      	movs	r0, #0
    7076:	f7f9 ffc9 	bl	100c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    707a:	0004      	movs	r4, r0
    707c:	d10a      	bne.n	7094 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xac>
    707e:	2101      	movs	r1, #1
    7080:	f7f9 ff8c 	bl	f9c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    7084:	0004      	movs	r4, r0
    7086:	d007      	beq.n	7098 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xb0>
    7088:	4806      	ldr	r0, [pc, #24]	; (70a4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xbc>)
    708a:	f990 1000 	ldrsb.w	r1, [r0]
    708e:	4620      	mov	r0, r4
    7090:	f007 fd61 	bl	eb56 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    7094:	4620      	mov	r0, r4
    7096:	bd10      	pop	{r4, pc}
    7098:	f240 3113 	movw	r1, #787	; 0x313
    709c:	2039      	movs	r0, #57	; 0x39
    709e:	f7f9 fc87 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    70a2:	0000      	.short	0x0000
    70a4:	20000294 	.word	0x20000294

000070a8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    70a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    70aa:	460c      	mov	r4, r1
    70ac:	4605      	mov	r5, r0
    70ae:	f007 fdc0 	bl	ec32 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    70b2:	b158      	cbz	r0, 70cc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x24>
    70b4:	4628      	mov	r0, r5
    70b6:	f007 fdaf 	bl	ec18 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    70ba:	b148      	cbz	r0, 70d0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28>
    70bc:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    70c0:	2112      	movs	r1, #18
    70c2:	b108      	cbz	r0, 70c8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    70c4:	2880      	cmp	r0, #128	; 0x80
    70c6:	d903      	bls.n	70d0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28>
    70c8:	4608      	mov	r0, r1
    70ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    70cc:	2142      	movs	r1, #66	; 0x42
    70ce:	e7fb      	b.n	70c8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    70d0:	4628      	mov	r0, r5
    70d2:	f007 fd92 	bl	ebfa <sym_WE45Z7LOSJEAVMD3HUIMZMMRDD5BLMKOFVBGE4Y>
    70d6:	b120      	cbz	r0, 70e2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    70d8:	4628      	mov	r0, r5
    70da:	f007 fcfd 	bl	ead8 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    70de:	b110      	cbz	r0, 70e6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3e>
    70e0:	e005      	b.n	70ee <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x46>
    70e2:	210c      	movs	r1, #12
    70e4:	e7f0      	b.n	70c8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    70e6:	4628      	mov	r0, r5
    70e8:	f007 fd90 	bl	ec0c <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    70ec:	b120      	cbz	r0, 70f8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x50>
    70ee:	4628      	mov	r0, r5
    70f0:	f007 ff5c 	bl	efac <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    70f4:	b930      	cbnz	r0, 7104 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x5c>
    70f6:	e001      	b.n	70fc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x54>
    70f8:	2012      	movs	r0, #18
    70fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    70fc:	4628      	mov	r0, r5
    70fe:	f007 fd06 	bl	eb0e <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    7102:	b108      	cbz	r0, 7108 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x60>
    7104:	200c      	movs	r0, #12
    7106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7108:	4628      	mov	r0, r5
    710a:	f7fc fa0b 	bl	3524 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    710e:	f8b4 6001 	ldrh.w	r6, [r4, #1]
    7112:	f242 7010 	movw	r0, #10000	; 0x2710
    7116:	4346      	muls	r6, r0
    7118:	78e1      	ldrb	r1, [r4, #3]
    711a:	4628      	mov	r0, r5
    711c:	f007 fd64 	bl	ebe8 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    7120:	4628      	mov	r0, r5
    7122:	f007 fd75 	bl	ec10 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    7126:	b1a8      	cbz	r0, 7154 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xac>
    7128:	2100      	movs	r1, #0
    712a:	4668      	mov	r0, sp
    712c:	f7f9 ffe2 	bl	10f4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    7130:	0004      	movs	r4, r0
    7132:	d019      	beq.n	7168 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc0>
    7134:	2100      	movs	r1, #0
    7136:	f7fb fae7 	bl	2708 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    713a:	f8bd 0000 	ldrh.w	r0, [sp]
    713e:	8020      	strh	r0, [r4, #0]
    7140:	4621      	mov	r1, r4
    7142:	4628      	mov	r0, r5
    7144:	f007 fd8c 	bl	ec60 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    7148:	4628      	mov	r0, r5
    714a:	f007 fd69 	bl	ec20 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    714e:	b168      	cbz	r0, 716c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc4>
    7150:	2001      	movs	r0, #1
    7152:	e00e      	b.n	7172 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xca>
    7154:	4632      	mov	r2, r6
    7156:	2100      	movs	r1, #0
    7158:	4628      	mov	r0, r5
    715a:	f7fd f921 	bl	43a0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    715e:	2800      	cmp	r0, #0
    7160:	d0d1      	beq.n	7106 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x5e>
    7162:	f241 7168 	movw	r1, #5992	; 0x1768
    7166:	e012      	b.n	718e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xe6>
    7168:	200d      	movs	r0, #13
    716a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    716c:	4628      	mov	r0, r5
    716e:	f007 fd75 	bl	ec5c <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    7172:	4601      	mov	r1, r0
    7174:	4620      	mov	r0, r4
    7176:	f7ff fed1 	bl	6f1c <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A>
    717a:	2800      	cmp	r0, #0
    717c:	d1f5      	bne.n	716a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc2>
    717e:	4632      	mov	r2, r6
    7180:	4621      	mov	r1, r4
    7182:	4628      	mov	r0, r5
    7184:	f7fd f90c 	bl	43a0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    7188:	b120      	cbz	r0, 7194 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xec>
    718a:	f241 718b 	movw	r1, #6027	; 0x178b
    718e:	2039      	movs	r0, #57	; 0x39
    7190:	f7f9 fc0e 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7194:	4804      	ldr	r0, [pc, #16]	; (71a8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x100>)
    7196:	6843      	ldr	r3, [r0, #4]
    7198:	b123      	cbz	r3, 71a4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xfc>
    719a:	2200      	movs	r2, #0
    719c:	f504 7199 	add.w	r1, r4, #306	; 0x132
    71a0:	4620      	mov	r0, r4
    71a2:	4798      	blx	r3
    71a4:	2000      	movs	r0, #0
    71a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    71a8:	20000294 	.word	0x20000294
    71ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    71b0:	b088      	sub	sp, #32
    71b2:	4604      	mov	r4, r0
    71b4:	8800      	ldrh	r0, [r0, #0]
    71b6:	a906      	add	r1, sp, #24
    71b8:	f006 fd61 	bl	dc7e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    71bc:	2800      	cmp	r0, #0
    71be:	d147      	bne.n	7250 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    71c0:	9807      	ldr	r0, [sp, #28]
    71c2:	f890 1180 	ldrb.w	r1, [r0, #384]	; 0x180
    71c6:	f88d 1008 	strb.w	r1, [sp, #8]
    71ca:	9902      	ldr	r1, [sp, #8]
    71cc:	9102      	str	r1, [sp, #8]
    71ce:	f89d 1008 	ldrb.w	r1, [sp, #8]
    71d2:	3080      	adds	r0, #128	; 0x80
    71d4:	b101      	cbz	r1, 71d8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x130>
    71d6:	2101      	movs	r1, #1
    71d8:	f88d 100c 	strb.w	r1, [sp, #12]
    71dc:	7b01      	ldrb	r1, [r0, #12]
    71de:	f04f 0800 	mov.w	r8, #0
    71e2:	0689      	lsls	r1, r1, #26
    71e4:	d502      	bpl.n	71ec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x144>
    71e6:	f89d 100c 	ldrb.w	r1, [sp, #12]
    71ea:	b149      	cbz	r1, 7200 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x158>
    71ec:	f05f 0100 	movs.w	r1, #0
    71f0:	f88d 1004 	strb.w	r1, [sp, #4]
    71f4:	2105      	movs	r1, #5
    71f6:	306c      	adds	r0, #108	; 0x6c
    71f8:	f008 fb6f 	bl	f8da <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xa2>
    71fc:	b110      	cbz	r0, 7204 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x15c>
    71fe:	e004      	b.n	720a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x162>
    7200:	2101      	movs	r1, #1
    7202:	e7f5      	b.n	71f0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x148>
    7204:	f89d 0004 	ldrb.w	r0, [sp, #4]
    7208:	b308      	cbz	r0, 724e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a6>
    720a:	8921      	ldrh	r1, [r4, #8]
    720c:	88e0      	ldrh	r0, [r4, #6]
    720e:	f009 f959 	bl	104c4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    7212:	2800      	cmp	r0, #0
    7214:	d11c      	bne.n	7250 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    7216:	88a1      	ldrh	r1, [r4, #4]
    7218:	8860      	ldrh	r0, [r4, #2]
    721a:	f009 f953 	bl	104c4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    721e:	2800      	cmp	r0, #0
    7220:	d116      	bne.n	7250 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    7222:	8921      	ldrh	r1, [r4, #8]
    7224:	88e0      	ldrh	r0, [r4, #6]
    7226:	f009 f943 	bl	104b0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ac>
    722a:	2800      	cmp	r0, #0
    722c:	d110      	bne.n	7250 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    722e:	88a1      	ldrh	r1, [r4, #4]
    7230:	8860      	ldrh	r0, [r4, #2]
    7232:	f009 f93d 	bl	104b0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ac>
    7236:	0006      	movs	r6, r0
    7238:	d10a      	bne.n	7250 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    723a:	9807      	ldr	r0, [sp, #28]
    723c:	f500 7599 	add.w	r5, r0, #306	; 0x132
    7240:	27ff      	movs	r7, #255	; 0xff
    7242:	706f      	strb	r7, [r5, #1]
    7244:	f89d 100c 	ldrb.w	r1, [sp, #12]
    7248:	b129      	cbz	r1, 7256 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ae>
    724a:	263a      	movs	r6, #58	; 0x3a
    724c:	e02e      	b.n	72ac <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x204>
    724e:	201a      	movs	r0, #26
    7250:	b008      	add	sp, #32
    7252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7256:	4641      	mov	r1, r8
    7258:	aa03      	add	r2, sp, #12
    725a:	f009 f941 	bl	104e0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    725e:	8861      	ldrh	r1, [r4, #2]
    7260:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    7264:	4281      	cmp	r1, r0
    7266:	d200      	bcs.n	726a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1c2>
    7268:	4608      	mov	r0, r1
    726a:	80e8      	strh	r0, [r5, #6]
    726c:	88a1      	ldrh	r1, [r4, #4]
    726e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    7272:	4281      	cmp	r1, r0
    7274:	d200      	bcs.n	7278 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d0>
    7276:	4608      	mov	r0, r1
    7278:	8128      	strh	r0, [r5, #8]
    727a:	88e2      	ldrh	r2, [r4, #6]
    727c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    7280:	428a      	cmp	r2, r1
    7282:	d200      	bcs.n	7286 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1de>
    7284:	4611      	mov	r1, r2
    7286:	8069      	strh	r1, [r5, #2]
    7288:	8922      	ldrh	r2, [r4, #8]
    728a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    728e:	428a      	cmp	r2, r1
    7290:	d200      	bcs.n	7294 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ec>
    7292:	4611      	mov	r1, r2
    7294:	f640 0248 	movw	r2, #2120	; 0x848
    7298:	80a9      	strh	r1, [r5, #4]
    729a:	4291      	cmp	r1, r2
    729c:	d300      	bcc.n	72a0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f8>
    729e:	4611      	mov	r1, r2
    72a0:	80a9      	strh	r1, [r5, #4]
    72a2:	4290      	cmp	r0, r2
    72a4:	d200      	bcs.n	72a8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x200>
    72a6:	4602      	mov	r2, r0
    72a8:	812a      	strh	r2, [r5, #8]
    72aa:	702f      	strb	r7, [r5, #0]
    72ac:	f885 8001 	strb.w	r8, [r5, #1]
    72b0:	4630      	mov	r0, r6
    72b2:	e7cd      	b.n	7250 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    72b4:	b51c      	push	{r2, r3, r4, lr}
    72b6:	490c      	ldr	r1, [pc, #48]	; (72e8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>)
    72b8:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
    72bc:	e9cd 0100 	strd	r0, r1, [sp]
    72c0:	e00a      	b.n	72d8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x230>
    72c2:	9c00      	ldr	r4, [sp, #0]
    72c4:	4620      	mov	r0, r4
    72c6:	f007 fe71 	bl	efac <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    72ca:	b128      	cbz	r0, 72d8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x230>
    72cc:	4620      	mov	r0, r4
    72ce:	f007 fcd6 	bl	ec7e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
    72d2:	b108      	cbz	r0, 72d8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x230>
    72d4:	2001      	movs	r0, #1
    72d6:	bd1c      	pop	{r2, r3, r4, pc}
    72d8:	4668      	mov	r0, sp
    72da:	f7f9 fee9 	bl	10b0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    72de:	2800      	cmp	r0, #0
    72e0:	d0ef      	beq.n	72c2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x21a>
    72e2:	2000      	movs	r0, #0
    72e4:	bd1c      	pop	{r2, r3, r4, pc}
    72e6:	0000      	.short	0x0000
    72e8:	00007324 	.word	0x00007324
    72ec:	b510      	push	{r4, lr}
    72ee:	4604      	mov	r4, r0
    72f0:	88c1      	ldrh	r1, [r0, #6]
    72f2:	8880      	ldrh	r0, [r0, #4]
    72f4:	f009 f8e6 	bl	104c4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    72f8:	2800      	cmp	r0, #0
    72fa:	d10f      	bne.n	731c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x274>
    72fc:	8861      	ldrh	r1, [r4, #2]
    72fe:	8820      	ldrh	r0, [r4, #0]
    7300:	f009 f8e0 	bl	104c4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    7304:	2800      	cmp	r0, #0
    7306:	d109      	bne.n	731c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x274>
    7308:	4805      	ldr	r0, [pc, #20]	; (7320 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x278>)
    730a:	88a1      	ldrh	r1, [r4, #4]
    730c:	8081      	strh	r1, [r0, #4]
    730e:	8821      	ldrh	r1, [r4, #0]
    7310:	8001      	strh	r1, [r0, #0]
    7312:	88e1      	ldrh	r1, [r4, #6]
    7314:	80c1      	strh	r1, [r0, #6]
    7316:	8861      	ldrh	r1, [r4, #2]
    7318:	8041      	strh	r1, [r0, #2]
    731a:	2000      	movs	r0, #0
    731c:	bd10      	pop	{r4, pc}
    731e:	0000      	.short	0x0000
    7320:	2000029c 	.word	0x2000029c
    7324:	00000000 	.word	0x00000000
    7328:	00010000 	.word	0x00010000
    732c:	00000000 	.word	0x00000000
    7330:	00010000 	.word	0x00010000
    7334:	0d10770d 	.word	0x0d10770d
    7338:	10770059 	.word	0x10770059
    733c:	00000000 	.word	0x00000000
    7340:	00010000 	.word	0x00010000
    7344:	00000000 	.word	0x00000000
    7348:	00010000 	.word	0x00010000

0000734c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    734c:	b510      	push	{r4, lr}
    734e:	f7fb fc77 	bl	2c40 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    7352:	4c05      	ldr	r4, [pc, #20]	; (7368 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x1c>)
    7354:	6860      	ldr	r0, [r4, #4]
    7356:	f009 f9c4 	bl	106e2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3de>
    735a:	f008 ff58 	bl	1020e <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    735e:	f7fb fe1d 	bl	2f9c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    7362:	2001      	movs	r0, #1
    7364:	7020      	strb	r0, [r4, #0]
    7366:	bd10      	pop	{r4, pc}
    7368:	200002a4 	.word	0x200002a4

0000736c <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>:
    736c:	4801      	ldr	r0, [pc, #4]	; (7374 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ+0x8>)
    736e:	7800      	ldrb	r0, [r0, #0]
    7370:	4770      	bx	lr
    7372:	0000      	.short	0x0000
    7374:	200002a4 	.word	0x200002a4

00007378 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    7378:	b510      	push	{r4, lr}
    737a:	4c06      	ldr	r4, [pc, #24]	; (7394 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x1c>)
    737c:	68a0      	ldr	r0, [r4, #8]
    737e:	f009 f9b0 	bl	106e2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3de>
    7382:	68e0      	ldr	r0, [r4, #12]
    7384:	f009 f9ad 	bl	106e2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3de>
    7388:	f008 ffab 	bl	102e2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    738c:	2000      	movs	r0, #0
    738e:	7020      	strb	r0, [r4, #0]
    7390:	bd10      	pop	{r4, pc}
    7392:	0000      	.short	0x0000
    7394:	200002a4 	.word	0x200002a4

00007398 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    7398:	b510      	push	{r4, lr}
    739a:	4905      	ldr	r1, [pc, #20]	; (73b0 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    739c:	4805      	ldr	r0, [pc, #20]	; (73b4 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    739e:	f009 f993 	bl	106c8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c4>
    73a2:	4804      	ldr	r0, [pc, #16]	; (73b4 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    73a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    73a8:	4903      	ldr	r1, [pc, #12]	; (73b8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    73aa:	1d00      	adds	r0, r0, #4
    73ac:	f009 b98c 	b.w	106c8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c4>
    73b0:	200002b4 	.word	0x200002b4
    73b4:	200002a8 	.word	0x200002a8
    73b8:	200002bc 	.word	0x200002bc

000073bc <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    73bc:	b510      	push	{r4, lr}
    73be:	4908      	ldr	r1, [pc, #32]	; (73e0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    73c0:	4808      	ldr	r0, [pc, #32]	; (73e4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    73c2:	f009 f981 	bl	106c8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c4>
    73c6:	4807      	ldr	r0, [pc, #28]	; (73e4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    73c8:	4907      	ldr	r1, [pc, #28]	; (73e8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    73ca:	1d00      	adds	r0, r0, #4
    73cc:	f009 f97c 	bl	106c8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c4>
    73d0:	4804      	ldr	r0, [pc, #16]	; (73e4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    73d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    73d6:	4905      	ldr	r1, [pc, #20]	; (73ec <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    73d8:	3008      	adds	r0, #8
    73da:	f009 b975 	b.w	106c8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c4>
    73de:	0000      	.short	0x0000
    73e0:	200002cc 	.word	0x200002cc
    73e4:	200002a8 	.word	0x200002a8
    73e8:	200002d4 	.word	0x200002d4
    73ec:	200002c4 	.word	0x200002c4

000073f0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    73f0:	4801      	ldr	r0, [pc, #4]	; (73f8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    73f2:	7840      	ldrb	r0, [r0, #1]
    73f4:	4770      	bx	lr
    73f6:	0000      	.short	0x0000
    73f8:	200002a4 	.word	0x200002a4
    73fc:	b510      	push	{r4, lr}
    73fe:	f7fc f9b3 	bl	3768 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    7402:	f7fd f87d 	bl	4500 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    7406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    740a:	4801      	ldr	r0, [pc, #4]	; (7410 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x20>)
    740c:	f7fc b992 	b.w	3734 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    7410:	200015a0 	.word	0x200015a0
    7414:	490a      	ldr	r1, [pc, #40]	; (7440 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x50>)
    7416:	b510      	push	{r4, lr}
    7418:	2001      	movs	r0, #1
    741a:	7048      	strb	r0, [r1, #1]
    741c:	f7fc f9d4 	bl	37c8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    7420:	f7fd fd84 	bl	4f2c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    7424:	f006 fb5a 	bl	dadc <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    7428:	4906      	ldr	r1, [pc, #24]	; (7444 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x54>)
    742a:	f5a1 7081 	sub.w	r0, r1, #258	; 0x102
    742e:	f7fa fa71 	bl	1914 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY>
    7432:	2000      	movs	r0, #0
    7434:	f006 f9a0 	bl	d778 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    7438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    743c:	f7fb bc06 	b.w	2c4c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>
    7440:	200002a4 	.word	0x200002a4
    7444:	200016a2 	.word	0x200016a2

00007448 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    7448:	4a04      	ldr	r2, [pc, #16]	; (745c <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x14>)
    744a:	08c1      	lsrs	r1, r0, #3
    744c:	f000 0307 	and.w	r3, r0, #7
    7450:	2001      	movs	r0, #1
    7452:	4098      	lsls	r0, r3
    7454:	5c53      	ldrb	r3, [r2, r1]
    7456:	4303      	orrs	r3, r0
    7458:	5453      	strb	r3, [r2, r1]
    745a:	4770      	bx	lr
    745c:	20000020 	.word	0x20000020

00007460 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    7460:	4901      	ldr	r1, [pc, #4]	; (7468 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    7462:	e9d1 0100 	ldrd	r0, r1, [r1]
    7466:	4770      	bx	lr
    7468:	20000020 	.word	0x20000020

0000746c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    746c:	4806      	ldr	r0, [pc, #24]	; (7488 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    746e:	8801      	ldrh	r1, [r0, #0]
    7470:	7900      	ldrb	r0, [r0, #4]
    7472:	0602      	lsls	r2, r0, #24
    7474:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    7478:	f000 0001 	and.w	r0, r0, #1
    747c:	1800      	adds	r0, r0, r0
    747e:	b2c0      	uxtb	r0, r0
    7480:	f040 0001 	orr.w	r0, r0, #1
    7484:	4770      	bx	lr
    7486:	0000      	.short	0x0000
    7488:	20000020 	.word	0x20000020

0000748c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    748c:	b510      	push	{r4, lr}
    748e:	f004 fee7 	bl	c260 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    7492:	2200      	movs	r2, #0
    7494:	4b08      	ldr	r3, [pc, #32]	; (74b8 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    7496:	4611      	mov	r1, r2
    7498:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    749c:	4284      	cmp	r4, r0
    749e:	d303      	bcc.n	74a8 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    74a0:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    74a4:	7882      	ldrb	r2, [r0, #2]
    74a6:	e003      	b.n	74b0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    74a8:	1c49      	adds	r1, r1, #1
    74aa:	b2c9      	uxtb	r1, r1
    74ac:	290c      	cmp	r1, #12
    74ae:	d3f3      	bcc.n	7498 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    74b0:	4802      	ldr	r0, [pc, #8]	; (74bc <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    74b2:	7002      	strb	r2, [r0, #0]
    74b4:	bd10      	pop	{r4, pc}
    74b6:	0000      	.short	0x0000
    74b8:	00010734 	.word	0x00010734
    74bc:	20000377 	.word	0x20000377

000074c0 <sym_GECJUMXC7GX4QNB2JHCJHLFH72UPMJZW6VAQVRA>:
    74c0:	b570      	push	{r4, r5, r6, lr}
    74c2:	6845      	ldr	r5, [r0, #4]
    74c4:	f505 76d3 	add.w	r6, r5, #422	; 0x1a6
    74c8:	8828      	ldrh	r0, [r5, #0]
    74ca:	f826 0902 	strh.w	r0, [r6], #-2
    74ce:	f505 7498 	add.w	r4, r5, #304	; 0x130
    74d2:	7031      	strb	r1, [r6, #0]
    74d4:	f895 006a 	ldrb.w	r0, [r5, #106]	; 0x6a
    74d8:	f009 f960 	bl	1079c <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0x14>
    74dc:	7130      	strb	r0, [r6, #4]
    74de:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    74e2:	f009 f95b 	bl	1079c <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0x14>
    74e6:	f806 0f05 	strb.w	r0, [r6, #5]!
    74ea:	2202      	movs	r2, #2
    74ec:	4903      	ldr	r1, [pc, #12]	; (74fc <sym_GECJUMXC7GX4QNB2JHCJHLFH72UPMJZW6VAQVRA+0x3c>)
    74ee:	f1a6 000f 	sub.w	r0, r6, #15
    74f2:	f006 ff97 	bl	e424 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    74f6:	2000      	movs	r0, #0
    74f8:	7320      	strb	r0, [r4, #12]
    74fa:	bd70      	pop	{r4, r5, r6, pc}
    74fc:	00010789 	.word	0x00010789

00007500 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY>:
    7500:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7502:	460e      	mov	r6, r1
    7504:	4604      	mov	r4, r0
    7506:	f7fb fa63 	bl	29d0 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
    750a:	2500      	movs	r5, #0
    750c:	b320      	cbz	r0, 7558 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x58>
    750e:	f5a4 74c6 	sub.w	r4, r4, #396	; 0x18c
    7512:	a902      	add	r1, sp, #8
    7514:	8820      	ldrh	r0, [r4, #0]
    7516:	f8ad 0000 	strh.w	r0, [sp]
    751a:	f006 fbb0 	bl	dc7e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    751e:	b108      	cbz	r0, 7524 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x24>
    7520:	2126      	movs	r1, #38	; 0x26
    7522:	e010      	b.n	7546 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x46>
    7524:	9803      	ldr	r0, [sp, #12]
    7526:	f810 1f66 	ldrb.w	r1, [r0, #102]!
    752a:	f88d 1002 	strb.w	r1, [sp, #2]
    752e:	7841      	ldrb	r1, [r0, #1]
    7530:	f88d 1003 	strb.w	r1, [sp, #3]
    7534:	8840      	ldrh	r0, [r0, #2]
    7536:	f8ad 0004 	strh.w	r0, [sp, #4]
    753a:	2102      	movs	r1, #2
    753c:	4668      	mov	r0, sp
    753e:	f008 fe68 	bl	10212 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    7542:	b118      	cbz	r0, 754c <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x4c>
    7544:	213c      	movs	r1, #60	; 0x3c
    7546:	207e      	movs	r0, #126	; 0x7e
    7548:	f7f9 fa32 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    754c:	f8cd 5000 	str.w	r5, [sp]
    7550:	f8bd 0000 	ldrh.w	r0, [sp]
    7554:	b004      	add	sp, #16
    7556:	bd70      	pop	{r4, r5, r6, pc}
    7558:	201c      	movs	r0, #28
    755a:	7030      	strb	r0, [r6, #0]
    755c:	7075      	strb	r5, [r6, #1]
    755e:	f8d4 000a 	ldr.w	r0, [r4, #10]
    7562:	6070      	str	r0, [r6, #4]
    7564:	4801      	ldr	r0, [pc, #4]	; (756c <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x6c>)
    7566:	6800      	ldr	r0, [r0, #0]
    7568:	9000      	str	r0, [sp, #0]
    756a:	e7f1      	b.n	7550 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x50>
    756c:	00007570 	.word	0x00007570
    7570:	00000004 	.word	0x00000004

00007574 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    7574:	b570      	push	{r4, r5, r6, lr}
    7576:	4605      	mov	r5, r0
    7578:	4616      	mov	r6, r2
    757a:	460c      	mov	r4, r1
    757c:	2002      	movs	r0, #2
    757e:	f000 f9b7 	bl	78f0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7582:	4906      	ldr	r1, [pc, #24]	; (759c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    7584:	2001      	movs	r0, #1
    7586:	1ef6      	subs	r6, r6, #3
    7588:	7008      	strb	r0, [r1, #0]
    758a:	4805      	ldr	r0, [pc, #20]	; (75a0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    758c:	6006      	str	r6, [r0, #0]
    758e:	4804      	ldr	r0, [pc, #16]	; (75a0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    7590:	3808      	subs	r0, #8
    7592:	6005      	str	r5, [r0, #0]
    7594:	1f00      	subs	r0, r0, #4
    7596:	6004      	str	r4, [r0, #0]
    7598:	bd70      	pop	{r4, r5, r6, pc}
    759a:	0000      	.short	0x0000
    759c:	20000378 	.word	0x20000378
    75a0:	4000f510 	.word	0x4000f510

000075a4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    75a4:	b510      	push	{r4, lr}
    75a6:	4c0c      	ldr	r4, [pc, #48]	; (75d8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    75a8:	7820      	ldrb	r0, [r4, #0]
    75aa:	b180      	cbz	r0, 75ce <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    75ac:	490b      	ldr	r1, [pc, #44]	; (75dc <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    75ae:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    75b2:	6008      	str	r0, [r1, #0]
    75b4:	f000 f86a 	bl	768c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    75b8:	2100      	movs	r1, #0
    75ba:	b120      	cbz	r0, 75c6 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    75bc:	2001      	movs	r0, #1
    75be:	7060      	strb	r0, [r4, #1]
    75c0:	4807      	ldr	r0, [pc, #28]	; (75e0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    75c2:	6800      	ldr	r0, [r0, #0]
    75c4:	e001      	b.n	75ca <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    75c6:	7061      	strb	r1, [r4, #1]
    75c8:	2010      	movs	r0, #16
    75ca:	70a0      	strb	r0, [r4, #2]
    75cc:	7021      	strb	r1, [r4, #0]
    75ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    75d2:	2000      	movs	r0, #0
    75d4:	f000 b98c 	b.w	78f0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    75d8:	20000378 	.word	0x20000378
    75dc:	4001f508 	.word	0x4001f508
    75e0:	4000f400 	.word	0x4000f400

000075e4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    75e4:	b510      	push	{r4, lr}
    75e6:	2002      	movs	r0, #2
    75e8:	f000 f982 	bl	78f0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    75ec:	4904      	ldr	r1, [pc, #16]	; (7600 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    75ee:	2001      	movs	r0, #1
    75f0:	7008      	strb	r0, [r1, #0]
    75f2:	f000 f859 	bl	76a8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    75f6:	4903      	ldr	r1, [pc, #12]	; (7604 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    75f8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    75fc:	6008      	str	r0, [r1, #0]
    75fe:	bd10      	pop	{r4, pc}
    7600:	20000378 	.word	0x20000378
    7604:	4001f504 	.word	0x4001f504

00007608 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    7608:	4803      	ldr	r0, [pc, #12]	; (7618 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    760a:	2100      	movs	r1, #0
    760c:	7001      	strb	r1, [r0, #0]
    760e:	7041      	strb	r1, [r0, #1]
    7610:	2110      	movs	r1, #16
    7612:	7081      	strb	r1, [r0, #2]
    7614:	4770      	bx	lr
    7616:	0000      	.short	0x0000
    7618:	20000378 	.word	0x20000378

0000761c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    761c:	4807      	ldr	r0, [pc, #28]	; (763c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    761e:	b510      	push	{r4, lr}
    7620:	7801      	ldrb	r1, [r0, #0]
    7622:	b141      	cbz	r1, 7636 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    7624:	f000 f832 	bl	768c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    7628:	b118      	cbz	r0, 7632 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    762a:	4805      	ldr	r0, [pc, #20]	; (7640 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    762c:	6800      	ldr	r0, [r0, #0]
    762e:	b2c0      	uxtb	r0, r0
    7630:	bd10      	pop	{r4, pc}
    7632:	2010      	movs	r0, #16
    7634:	bd10      	pop	{r4, pc}
    7636:	7880      	ldrb	r0, [r0, #2]
    7638:	bd10      	pop	{r4, pc}
    763a:	0000      	.short	0x0000
    763c:	20000378 	.word	0x20000378
    7640:	4000f400 	.word	0x4000f400

00007644 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    7644:	4808      	ldr	r0, [pc, #32]	; (7668 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    7646:	b510      	push	{r4, lr}
    7648:	7801      	ldrb	r1, [r0, #0]
    764a:	b159      	cbz	r1, 7664 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    764c:	4807      	ldr	r0, [pc, #28]	; (766c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    764e:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    7652:	b128      	cbz	r0, 7660 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    7654:	f000 f80c 	bl	7670 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    7658:	2800      	cmp	r0, #0
    765a:	d000      	beq.n	765e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    765c:	2001      	movs	r0, #1
    765e:	bd10      	pop	{r4, pc}
    7660:	2002      	movs	r0, #2
    7662:	bd10      	pop	{r4, pc}
    7664:	7840      	ldrb	r0, [r0, #1]
    7666:	bd10      	pop	{r4, pc}
    7668:	20000378 	.word	0x20000378
    766c:	4000f000 	.word	0x4000f000
    7670:	4805      	ldr	r0, [pc, #20]	; (7688 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    7672:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    7676:	b111      	cbz	r1, 767e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    7678:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    767c:	b108      	cbz	r0, 7682 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    767e:	2000      	movs	r0, #0
    7680:	4770      	bx	lr
    7682:	2001      	movs	r0, #1
    7684:	4770      	bx	lr
    7686:	0000      	.short	0x0000
    7688:	4000f000 	.word	0x4000f000
    768c:	4805      	ldr	r0, [pc, #20]	; (76a4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    768e:	b510      	push	{r4, lr}
    7690:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    7694:	b120      	cbz	r0, 76a0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    7696:	f7ff ffeb 	bl	7670 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    769a:	b108      	cbz	r0, 76a0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    769c:	2001      	movs	r0, #1
    769e:	bd10      	pop	{r4, pc}
    76a0:	2000      	movs	r0, #0
    76a2:	bd10      	pop	{r4, pc}
    76a4:	4000f000 	.word	0x4000f000
    76a8:	4804      	ldr	r0, [pc, #16]	; (76bc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    76aa:	2100      	movs	r1, #0
    76ac:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    76b0:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    76b4:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    76b8:	4770      	bx	lr
    76ba:	0000      	.short	0x0000
    76bc:	4000f000 	.word	0x4000f000

000076c0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>:
    76c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    76c4:	4604      	mov	r4, r0
    76c6:	461e      	mov	r6, r3
    76c8:	4690      	mov	r8, r2
    76ca:	460f      	mov	r7, r1
    76cc:	2001      	movs	r0, #1
    76ce:	f000 f90f 	bl	78f0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    76d2:	4d1e      	ldr	r5, [pc, #120]	; (774c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x8c>)
    76d4:	481e      	ldr	r0, [pc, #120]	; (7750 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x90>)
    76d6:	f004 0103 	and.w	r1, r4, #3
    76da:	712e      	strb	r6, [r5, #4]
    76dc:	6800      	ldr	r0, [r0, #0]
    76de:	0432      	lsls	r2, r6, #16
    76e0:	f361 0007 	bfi	r0, r1, #0, #8
    76e4:	f366 200f 	bfi	r0, r6, #8, #8
    76e8:	0c00      	lsrs	r0, r0, #16
    76ea:	4e1a      	ldr	r6, [pc, #104]	; (7754 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    76ec:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
    76f0:	4308      	orrs	r0, r1
    76f2:	f8c6 0504 	str.w	r0, [r6, #1284]	; 0x504
    76f6:	4818      	ldr	r0, [pc, #96]	; (7758 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    76f8:	6007      	str	r7, [r0, #0]
    76fa:	f009 fb2a 	bl	10d52 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    76fe:	b938      	cbnz	r0, 7710 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x50>
    7700:	4815      	ldr	r0, [pc, #84]	; (7758 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    7702:	3010      	adds	r0, #16
    7704:	6801      	ldr	r1, [r0, #0]
    7706:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    770a:	ea41 0108 	orr.w	r1, r1, r8
    770e:	6001      	str	r1, [r0, #0]
    7710:	f000 f8e4 	bl	78dc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    7714:	b10c      	cbz	r4, 771a <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x5a>
    7716:	2c04      	cmp	r4, #4
    7718:	d107      	bne.n	772a <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x6a>
    771a:	4811      	ldr	r0, [pc, #68]	; (7760 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa0>)
    771c:	490d      	ldr	r1, [pc, #52]	; (7754 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    771e:	4a0f      	ldr	r2, [pc, #60]	; (775c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x9c>)
    7720:	1d09      	adds	r1, r1, #4
    7722:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    7726:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    772a:	2001      	movs	r0, #1
    772c:	7068      	strb	r0, [r5, #1]
    772e:	70ec      	strb	r4, [r5, #3]
    7730:	b11c      	cbz	r4, 773a <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    7732:	2c01      	cmp	r4, #1
    7734:	d001      	beq.n	773a <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    7736:	2c02      	cmp	r4, #2
    7738:	d106      	bne.n	7748 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x88>
    773a:	7028      	strb	r0, [r5, #0]
    773c:	2100      	movs	r1, #0
    773e:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
    7742:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    7746:	6030      	str	r0, [r6, #0]
    7748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    774c:	2000037b 	.word	0x2000037b
    7750:	000078ec 	.word	0x000078ec
    7754:	4000f000 	.word	0x4000f000
    7758:	4000f508 	.word	0x4000f508
    775c:	4000f100 	.word	0x4000f100
    7760:	4001f088 	.word	0x4001f088

00007764 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>:
    7764:	b570      	push	{r4, r5, r6, lr}
    7766:	4a1c      	ldr	r2, [pc, #112]	; (77d8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x74>)
    7768:	7853      	ldrb	r3, [r2, #1]
    776a:	b1a3      	cbz	r3, 7796 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x32>
    776c:	4b1b      	ldr	r3, [pc, #108]	; (77dc <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x78>)
    776e:	6019      	str	r1, [r3, #0]
    7770:	1d19      	adds	r1, r3, #4
    7772:	6008      	str	r0, [r1, #0]
    7774:	2501      	movs	r5, #1
    7776:	7095      	strb	r5, [r2, #2]
    7778:	4610      	mov	r0, r2
    777a:	78d6      	ldrb	r6, [r2, #3]
    777c:	4b18      	ldr	r3, [pc, #96]	; (77e0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    777e:	7800      	ldrb	r0, [r0, #0]
    7780:	4c18      	ldr	r4, [pc, #96]	; (77e4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x80>)
    7782:	2100      	movs	r1, #0
    7784:	b156      	cbz	r6, 779c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x38>
    7786:	2e04      	cmp	r6, #4
    7788:	d01b      	beq.n	77c2 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5e>
    778a:	b308      	cbz	r0, 77d0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6c>
    778c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7790:	0668      	lsls	r0, r5, #25
    7792:	6018      	str	r0, [r3, #0]
    7794:	bd70      	pop	{r4, r5, r6, pc}
    7796:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
    779a:	e01a      	b.n	77d2 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    779c:	b178      	cbz	r0, 77be <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5a>
    779e:	4620      	mov	r0, r4
    77a0:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    77a4:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    77a8:	601e      	str	r6, [r3, #0]
    77aa:	1271      	asrs	r1, r6, #9
    77ac:	f009 f81e 	bl	107ec <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    77b0:	2800      	cmp	r0, #0
    77b2:	d0ef      	beq.n	7794 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x30>
    77b4:	6065      	str	r5, [r4, #4]
    77b6:	480a      	ldr	r0, [pc, #40]	; (77e0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    77b8:	1d00      	adds	r0, r0, #4
    77ba:	6006      	str	r6, [r0, #0]
    77bc:	bd70      	pop	{r4, r5, r6, pc}
    77be:	21d5      	movs	r1, #213	; 0xd5
    77c0:	e007      	b.n	77d2 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    77c2:	7015      	strb	r5, [r2, #0]
    77c4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    77c8:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    77cc:	6025      	str	r5, [r4, #0]
    77ce:	bd70      	pop	{r4, r5, r6, pc}
    77d0:	21e8      	movs	r1, #232	; 0xe8
    77d2:	203c      	movs	r0, #60	; 0x3c
    77d4:	f7f9 f8ec 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    77d8:	2000037b 	.word	0x2000037b
    77dc:	4000f50c 	.word	0x4000f50c
    77e0:	4001f504 	.word	0x4001f504
    77e4:	4000f000 	.word	0x4000f000

000077e8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    77e8:	b570      	push	{r4, r5, r6, lr}
    77ea:	4d05      	ldr	r5, [pc, #20]	; (7800 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    77ec:	2400      	movs	r4, #0
    77ee:	7828      	ldrb	r0, [r5, #0]
    77f0:	b110      	cbz	r0, 77f8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    77f2:	f000 f873 	bl	78dc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    77f6:	702c      	strb	r4, [r5, #0]
    77f8:	706c      	strb	r4, [r5, #1]
    77fa:	70ac      	strb	r4, [r5, #2]
    77fc:	bd70      	pop	{r4, r5, r6, pc}
    77fe:	0000      	.short	0x0000
    7800:	2000037b 	.word	0x2000037b

00007804 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    7804:	4802      	ldr	r0, [pc, #8]	; (7810 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    7806:	2100      	movs	r1, #0
    7808:	7001      	strb	r1, [r0, #0]
    780a:	7041      	strb	r1, [r0, #1]
    780c:	7081      	strb	r1, [r0, #2]
    780e:	4770      	bx	lr
    7810:	2000037b 	.word	0x2000037b

00007814 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    7814:	480b      	ldr	r0, [pc, #44]	; (7844 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x30>)
    7816:	b510      	push	{r4, lr}
    7818:	7800      	ldrb	r0, [r0, #0]
    781a:	b158      	cbz	r0, 7834 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>
    781c:	f44f 7182 	mov.w	r1, #260	; 0x104
    7820:	4809      	ldr	r0, [pc, #36]	; (7848 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x34>)
    7822:	f008 ffe3 	bl	107ec <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7826:	b140      	cbz	r0, 783a <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x26>
    7828:	4808      	ldr	r0, [pc, #32]	; (784c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x38>)
    782a:	6800      	ldr	r0, [r0, #0]
    782c:	2800      	cmp	r0, #0
    782e:	d000      	beq.n	7832 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1e>
    7830:	2001      	movs	r0, #1
    7832:	bd10      	pop	{r4, pc}
    7834:	f240 215e 	movw	r1, #606	; 0x25e
    7838:	e001      	b.n	783e <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x2a>
    783a:	f240 215f 	movw	r1, #607	; 0x25f
    783e:	203c      	movs	r0, #60	; 0x3c
    7840:	f7f9 f8b6 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7844:	2000037b 	.word	0x2000037b
    7848:	4000f000 	.word	0x4000f000
    784c:	4000f400 	.word	0x4000f400

00007850 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    7850:	4801      	ldr	r0, [pc, #4]	; (7858 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    7852:	2101      	movs	r1, #1
    7854:	6081      	str	r1, [r0, #8]
    7856:	4770      	bx	lr
    7858:	4000f000 	.word	0x4000f000

0000785c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    785c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7860:	481b      	ldr	r0, [pc, #108]	; (78d0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    7862:	7800      	ldrb	r0, [r0, #0]
    7864:	b1d8      	cbz	r0, 789e <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x42>
    7866:	f8df 806c 	ldr.w	r8, [pc, #108]	; 78d4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    786a:	f44f 7682 	mov.w	r6, #260	; 0x104
    786e:	4631      	mov	r1, r6
    7870:	4640      	mov	r0, r8
    7872:	f008 ffbb 	bl	107ec <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7876:	2800      	cmp	r0, #0
    7878:	d128      	bne.n	78cc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
    787a:	2002      	movs	r0, #2
    787c:	f8c8 0304 	str.w	r0, [r8, #772]	; 0x304
    7880:	4c15      	ldr	r4, [pc, #84]	; (78d8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    7882:	6820      	ldr	r0, [r4, #0]
    7884:	43c0      	mvns	r0, r0
    7886:	f340 1500 	sbfx	r5, r0, #4, #1
    788a:	6820      	ldr	r0, [r4, #0]
    788c:	f040 0010 	orr.w	r0, r0, #16
    7890:	6020      	str	r0, [r4, #0]
    7892:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    7896:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    789a:	1c6d      	adds	r5, r5, #1
    789c:	e008      	b.n	78b0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x54>
    789e:	f240 216a 	movw	r1, #618	; 0x26a
    78a2:	203c      	movs	r0, #60	; 0x3c
    78a4:	f7f9 f884 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    78a8:	f8c9 7280 	str.w	r7, [r9, #640]	; 0x280
    78ac:	f009 fa91 	bl	10dd2 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    78b0:	4631      	mov	r1, r6
    78b2:	4640      	mov	r0, r8
    78b4:	f008 ff9a 	bl	107ec <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    78b8:	2800      	cmp	r0, #0
    78ba:	d0f5      	beq.n	78a8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    78bc:	b91d      	cbnz	r5, 78c6 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6a>
    78be:	6820      	ldr	r0, [r4, #0]
    78c0:	f020 0010 	bic.w	r0, r0, #16
    78c4:	6020      	str	r0, [r4, #0]
    78c6:	2002      	movs	r0, #2
    78c8:	f8c8 0308 	str.w	r0, [r8, #776]	; 0x308
    78cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    78d0:	2000037b 	.word	0x2000037b
    78d4:	4000f000 	.word	0x4000f000
    78d8:	e000ed10 	.word	0xe000ed10
    78dc:	4902      	ldr	r1, [pc, #8]	; (78e8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x8c>)
    78de:	4801      	ldr	r0, [pc, #4]	; (78e4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x88>)
    78e0:	6008      	str	r0, [r1, #0]
    78e2:	4770      	bx	lr
    78e4:	02020000 	.word	0x02020000
    78e8:	4001f508 	.word	0x4001f508
    78ec:	00010000 	.word	0x00010000

000078f0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    78f0:	b510      	push	{r4, lr}
    78f2:	4604      	mov	r4, r0
    78f4:	f000 f820 	bl	7938 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    78f8:	2c00      	cmp	r4, #0
    78fa:	d00e      	beq.n	791a <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    78fc:	4a0b      	ldr	r2, [pc, #44]	; (792c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    78fe:	480b      	ldr	r0, [pc, #44]	; (792c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    7900:	490b      	ldr	r1, [pc, #44]	; (7930 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    7902:	3214      	adds	r2, #20
    7904:	2c01      	cmp	r4, #1
    7906:	d005      	beq.n	7914 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    7908:	2c02      	cmp	r4, #2
    790a:	d007      	beq.n	791c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    790c:	2182      	movs	r1, #130	; 0x82
    790e:	203d      	movs	r0, #61	; 0x3d
    7910:	f7f9 f84e 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7914:	2302      	movs	r3, #2
    7916:	6003      	str	r3, [r0, #0]
    7918:	6011      	str	r1, [r2, #0]
    791a:	bd10      	pop	{r4, pc}
    791c:	2303      	movs	r3, #3
    791e:	6003      	str	r3, [r0, #0]
    7920:	6011      	str	r1, [r2, #0]
    7922:	4904      	ldr	r1, [pc, #16]	; (7934 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    7924:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7928:	6008      	str	r0, [r1, #0]
    792a:	bd10      	pop	{r4, pc}
    792c:	4000f500 	.word	0x4000f500
    7930:	200017a4 	.word	0x200017a4
    7934:	4001f504 	.word	0x4001f504
    7938:	4805      	ldr	r0, [pc, #20]	; (7950 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    793a:	b510      	push	{r4, lr}
    793c:	2100      	movs	r1, #0
    793e:	6001      	str	r1, [r0, #0]
    7940:	6001      	str	r1, [r0, #0]
    7942:	f7ff ff51 	bl	77e8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    7946:	4903      	ldr	r1, [pc, #12]	; (7954 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    7948:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    794c:	6008      	str	r0, [r1, #0]
    794e:	bd10      	pop	{r4, pc}
    7950:	4000f500 	.word	0x4000f500
    7954:	4001f508 	.word	0x4001f508

00007958 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    7958:	4805      	ldr	r0, [pc, #20]	; (7970 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    795a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    795e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    7962:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    7966:	2100      	movs	r1, #0
    7968:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    796c:	4770      	bx	lr
    796e:	0000      	.short	0x0000
    7970:	40001000 	.word	0x40001000

00007974 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    7974:	4904      	ldr	r1, [pc, #16]	; (7988 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    7976:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    797a:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    797e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    7982:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    7986:	4770      	bx	lr
    7988:	40001000 	.word	0x40001000

0000798c <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    798c:	4902      	ldr	r1, [pc, #8]	; (7998 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    798e:	5c08      	ldrb	r0, [r1, r0]
    7990:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    7994:	4770      	bx	lr
    7996:	0000      	.short	0x0000
    7998:	0000862e 	.word	0x0000862e

0000799c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    799c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    799e:	4c24      	ldr	r4, [pc, #144]	; (7a30 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    79a0:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    79a4:	f010 0f10 	tst.w	r0, #16
    79a8:	d001      	beq.n	79ae <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    79aa:	2701      	movs	r7, #1
    79ac:	e000      	b.n	79b0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    79ae:	2700      	movs	r7, #0
    79b0:	2010      	movs	r0, #16
    79b2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    79b6:	2002      	movs	r0, #2
    79b8:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    79bc:	481d      	ldr	r0, [pc, #116]	; (7a34 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    79be:	2500      	movs	r5, #0
    79c0:	491d      	ldr	r1, [pc, #116]	; (7a38 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    79c2:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28
    79c6:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    79ca:	6008      	str	r0, [r1, #0]
    79cc:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    79d0:	f44f 7688 	mov.w	r6, #272	; 0x110
    79d4:	f010 0fff 	tst.w	r0, #255	; 0xff
    79d8:	d019      	beq.n	7a0e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    79da:	20ff      	movs	r0, #255	; 0xff
    79dc:	f88d 0000 	strb.w	r0, [sp]
    79e0:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    79e4:	2001      	movs	r0, #1
    79e6:	6120      	str	r0, [r4, #16]
    79e8:	e005      	b.n	79f6 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    79ea:	bf00      	nop
    79ec:	f89d 0000 	ldrb.w	r0, [sp]
    79f0:	1e40      	subs	r0, r0, #1
    79f2:	f88d 0000 	strb.w	r0, [sp]
    79f6:	f89d 0000 	ldrb.w	r0, [sp]
    79fa:	b128      	cbz	r0, 7a08 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    79fc:	4631      	mov	r1, r6
    79fe:	4620      	mov	r0, r4
    7a00:	f008 ff23 	bl	1084a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    7a04:	2800      	cmp	r0, #0
    7a06:	d0f1      	beq.n	79ec <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    7a08:	f89d 0000 	ldrb.w	r0, [sp]
    7a0c:	b158      	cbz	r0, 7a26 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    7a0e:	f000 fc23 	bl	8258 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>
    7a12:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    7a16:	f000 fd8b 	bl	8530 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    7a1a:	2f00      	cmp	r7, #0
    7a1c:	d002      	beq.n	7a24 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    7a1e:	2010      	movs	r0, #16
    7a20:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    7a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7a26:	f640 0194 	movw	r1, #2196	; 0x894
    7a2a:	203e      	movs	r0, #62	; 0x3e
    7a2c:	f7f8 ffc0 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a30:	40001000 	.word	0x40001000
    7a34:	20001370 	.word	0x20001370
    7a38:	4001f508 	.word	0x4001f508

00007a3c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    7a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7a40:	4d18      	ldr	r5, [pc, #96]	; (7aa4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x68>)
    7a42:	4607      	mov	r7, r0
    7a44:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
    7a48:	07c2      	lsls	r2, r0, #31
    7a4a:	d00f      	beq.n	7a6c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
    7a4c:	4c16      	ldr	r4, [pc, #88]	; (7aa8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x6c>)
    7a4e:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    7a52:	f042 0201 	orr.w	r2, r2, #1
    7a56:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    7a5a:	f040 0002 	orr.w	r0, r0, #2
    7a5e:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    7a62:	2601      	movs	r6, #1
    7a64:	b13f      	cbz	r7, 7a76 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
    7a66:	2f01      	cmp	r7, #1
    7a68:	d00b      	beq.n	7a82 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
    7a6a:	e010      	b.n	7a8e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    7a6c:	f240 716f 	movw	r1, #1903	; 0x76f
    7a70:	203e      	movs	r0, #62	; 0x3e
    7a72:	f7f8 ff9d 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a76:	4608      	mov	r0, r1
    7a78:	f000 fdb4 	bl	85e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x570>
    7a7c:	726e      	strb	r6, [r5, #9]
    7a7e:	6026      	str	r6, [r4, #0]
    7a80:	e005      	b.n	7a8e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    7a82:	4608      	mov	r0, r1
    7a84:	f000 fd94 	bl	85b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x53c>
    7a88:	2002      	movs	r0, #2
    7a8a:	7268      	strb	r0, [r5, #9]
    7a8c:	6066      	str	r6, [r4, #4]
    7a8e:	4807      	ldr	r0, [pc, #28]	; (7aac <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    7a90:	64c6      	str	r6, [r0, #76]	; 0x4c
    7a92:	4806      	ldr	r0, [pc, #24]	; (7aac <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    7a94:	300c      	adds	r0, #12
    7a96:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    7a9a:	4638      	mov	r0, r7
    7a9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7aa0:	f000 bd18 	b.w	84d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x460>
    7aa4:	20001370 	.word	0x20001370
    7aa8:	40001000 	.word	0x40001000
    7aac:	40008000 	.word	0x40008000

00007ab0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    7ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7ab4:	4c2c      	ldr	r4, [pc, #176]	; (7b68 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb8>)
    7ab6:	0006      	movs	r6, r0
    7ab8:	4d2c      	ldr	r5, [pc, #176]	; (7b6c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xbc>)
    7aba:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    7abe:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 7b70 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc0>
    7ac2:	f040 0002 	orr.w	r0, r0, #2
    7ac6:	4689      	mov	r9, r1
    7ac8:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    7acc:	f04f 0700 	mov.w	r7, #0
    7ad0:	d002      	beq.n	7ad8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    7ad2:	2e01      	cmp	r6, #1
    7ad4:	d020      	beq.n	7b18 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    7ad6:	e036      	b.n	7b46 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    7ad8:	4608      	mov	r0, r1
    7ada:	f000 fd83 	bl	85e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x570>
    7ade:	2001      	movs	r0, #1
    7ae0:	7260      	strb	r0, [r4, #9]
    7ae2:	79e0      	ldrb	r0, [r4, #7]
    7ae4:	2801      	cmp	r0, #1
    7ae6:	d105      	bne.n	7af4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    7ae8:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    7aec:	f040 0008 	orr.w	r0, r0, #8
    7af0:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    7af4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7af6:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    7afa:	6260      	str	r0, [r4, #36]	; 0x24
    7afc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    7b00:	f8c8 0000 	str.w	r0, [r8]
    7b04:	491b      	ldr	r1, [pc, #108]	; (7b74 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>)
    7b06:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    7b0a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    7b0e:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    7b12:	fbb0 f7f1 	udiv	r7, r0, r1
    7b16:	e016      	b.n	7b46 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    7b18:	4608      	mov	r0, r1
    7b1a:	f000 fd49 	bl	85b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x53c>
    7b1e:	2002      	movs	r0, #2
    7b20:	7260      	strb	r0, [r4, #9]
    7b22:	79e0      	ldrb	r0, [r4, #7]
    7b24:	2801      	cmp	r0, #1
    7b26:	d105      	bne.n	7b34 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    7b28:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    7b2c:	f040 0004 	orr.w	r0, r0, #4
    7b30:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    7b34:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7b36:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    7b3a:	6260      	str	r0, [r4, #36]	; 0x24
    7b3c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    7b40:	f8c8 0000 	str.w	r0, [r8]
    7b44:	2729      	movs	r7, #41	; 0x29
    7b46:	f000 fbf3 	bl	8330 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2bc>
    7b4a:	f008 fff8 	bl	10b3e <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    7b4e:	b120      	cbz	r0, 7b5a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xaa>
    7b50:	f7ff ff24 	bl	799c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7b54:	2000      	movs	r0, #0
    7b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7b5a:	2100      	movs	r1, #0
    7b5c:	4630      	mov	r0, r6
    7b5e:	f000 fcb9 	bl	84d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x460>
    7b62:	4638      	mov	r0, r7
    7b64:	e7f7      	b.n	7b56 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa6>
    7b66:	0000      	.short	0x0000
    7b68:	20001370 	.word	0x20001370
    7b6c:	40001000 	.word	0x40001000
    7b70:	4001f504 	.word	0x4001f504
    7b74:	00008628 	.word	0x00008628

00007b78 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    7b78:	4a02      	ldr	r2, [pc, #8]	; (7b84 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    7b7a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    7b7c:	6003      	str	r3, [r0, #0]
    7b7e:	6b10      	ldr	r0, [r2, #48]	; 0x30
    7b80:	6008      	str	r0, [r1, #0]
    7b82:	4770      	bx	lr
    7b84:	20001370 	.word	0x20001370

00007b88 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    7b88:	b510      	push	{r4, lr}
    7b8a:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    7b8c:	4901      	ldr	r1, [pc, #4]	; (7b94 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    7b8e:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    7b92:	bd10      	pop	{r4, pc}
    7b94:	20001360 	.word	0x20001360

00007b98 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    7b98:	490f      	ldr	r1, [pc, #60]	; (7bd8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    7b9a:	b510      	push	{r4, lr}
    7b9c:	69ca      	ldr	r2, [r1, #28]
    7b9e:	4282      	cmp	r2, r0
    7ba0:	d302      	bcc.n	7ba8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    7ba2:	f640 1124 	movw	r1, #2340	; 0x924
    7ba6:	e00b      	b.n	7bc0 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x28>
    7ba8:	2201      	movs	r2, #1
    7baa:	730a      	strb	r2, [r1, #12]
    7bac:	6108      	str	r0, [r1, #16]
    7bae:	490b      	ldr	r1, [pc, #44]	; (7bdc <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    7bb0:	644a      	str	r2, [r1, #68]	; 0x44
    7bb2:	1d0a      	adds	r2, r1, #4
    7bb4:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    7bb8:	4283      	cmp	r3, r0
    7bba:	d304      	bcc.n	7bc6 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2e>
    7bbc:	f640 112d 	movw	r1, #2349	; 0x92d
    7bc0:	203e      	movs	r0, #62	; 0x3e
    7bc2:	f7f8 fef5 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7bc6:	2300      	movs	r3, #0
    7bc8:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    7bcc:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    7bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7bd4:	f000 bc52 	b.w	847c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>
    7bd8:	20001370 	.word	0x20001370
    7bdc:	40008000 	.word	0x40008000

00007be0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    7be0:	b570      	push	{r4, r5, r6, lr}
    7be2:	4c0f      	ldr	r4, [pc, #60]	; (7c20 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    7be4:	4603      	mov	r3, r0
    7be6:	2002      	movs	r0, #2
    7be8:	7320      	strb	r0, [r4, #12]
    7bea:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    7bee:	2096      	movs	r0, #150	; 0x96
    7bf0:	f894 1020 	ldrb.w	r1, [r4, #32]
    7bf4:	7d22      	ldrb	r2, [r4, #20]
    7bf6:	2d01      	cmp	r5, #1
    7bf8:	d00e      	beq.n	7c18 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    7bfa:	f000 fd51 	bl	86a0 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    7bfe:	6120      	str	r0, [r4, #16]
    7c00:	4808      	ldr	r0, [pc, #32]	; (7c24 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    7c02:	2100      	movs	r1, #0
    7c04:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    7c08:	6921      	ldr	r1, [r4, #16]
    7c0a:	69e0      	ldr	r0, [r4, #28]
    7c0c:	4408      	add	r0, r1
    7c0e:	4905      	ldr	r1, [pc, #20]	; (7c24 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    7c10:	1d09      	adds	r1, r1, #4
    7c12:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    7c16:	bd70      	pop	{r4, r5, r6, pc}
    7c18:	f000 fd60 	bl	86dc <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    7c1c:	e7ef      	b.n	7bfe <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    7c1e:	0000      	.short	0x0000
    7c20:	20001370 	.word	0x20001370
    7c24:	40008000 	.word	0x40008000

00007c28 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    7c28:	b510      	push	{r4, lr}
    7c2a:	f009 f8ae 	bl	10d8a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    7c2e:	2800      	cmp	r0, #0
    7c30:	d006      	beq.n	7c40 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    7c32:	4804      	ldr	r0, [pc, #16]	; (7c44 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    7c34:	6801      	ldr	r1, [r0, #0]
    7c36:	f021 0101 	bic.w	r1, r1, #1
    7c3a:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    7c3e:	6001      	str	r1, [r0, #0]
    7c40:	bd10      	pop	{r4, pc}
    7c42:	0000      	.short	0x0000
    7c44:	40001774 	.word	0x40001774

00007c48 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    7c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7c4c:	2234      	movs	r2, #52	; 0x34
    7c4e:	2100      	movs	r1, #0
    7c50:	4813      	ldr	r0, [pc, #76]	; (7ca0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    7c52:	f009 f992 	bl	10f7a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7c56:	f000 fc6b 	bl	8530 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    7c5a:	f009 f84f 	bl	10cfc <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    7c5e:	4d11      	ldr	r5, [pc, #68]	; (7ca4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    7c60:	4e10      	ldr	r6, [pc, #64]	; (7ca4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    7c62:	2400      	movs	r4, #0
    7c64:	4f0f      	ldr	r7, [pc, #60]	; (7ca4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    7c66:	3508      	adds	r5, #8
    7c68:	3610      	adds	r6, #16
    7c6a:	b928      	cbnz	r0, 7c78 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    7c6c:	f009 f85d 	bl	10d2a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    7c70:	b910      	cbnz	r0, 7c78 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    7c72:	f009 f864 	bl	10d3e <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    7c76:	b108      	cbz	r0, 7c7c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    7c78:	2224      	movs	r2, #36	; 0x24
    7c7a:	e006      	b.n	7c8a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    7c7c:	f009 f89f 	bl	10dbe <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    7c80:	b910      	cbnz	r0, 7c88 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    7c82:	f009 f892 	bl	10daa <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    7c86:	b140      	cbz	r0, 7c9a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    7c88:	2240      	movs	r2, #64	; 0x40
    7c8a:	21ff      	movs	r1, #255	; 0xff
    7c8c:	4638      	mov	r0, r7
    7c8e:	f009 f974 	bl	10f7a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7c92:	602c      	str	r4, [r5, #0]
    7c94:	6034      	str	r4, [r6, #0]
    7c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7c9a:	2238      	movs	r2, #56	; 0x38
    7c9c:	e7f5      	b.n	7c8a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    7c9e:	0000      	.short	0x0000
    7ca0:	20001370 	.word	0x20001370
    7ca4:	40000e00 	.word	0x40000e00

00007ca8 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    7ca8:	4801      	ldr	r0, [pc, #4]	; (7cb0 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    7caa:	69c0      	ldr	r0, [r0, #28]
    7cac:	4770      	bx	lr
    7cae:	0000      	.short	0x0000
    7cb0:	20001370 	.word	0x20001370

00007cb4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    7cb4:	4801      	ldr	r0, [pc, #4]	; (7cbc <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x8>)
    7cb6:	f890 0020 	ldrb.w	r0, [r0, #32]
    7cba:	4770      	bx	lr
    7cbc:	20001370 	.word	0x20001370

00007cc0 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    7cc0:	4801      	ldr	r0, [pc, #4]	; (7cc8 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    7cc2:	6980      	ldr	r0, [r0, #24]
    7cc4:	4770      	bx	lr
    7cc6:	0000      	.short	0x0000
    7cc8:	20001370 	.word	0x20001370

00007ccc <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    7ccc:	b510      	push	{r4, lr}
    7cce:	f000 fbe3 	bl	8498 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x424>
    7cd2:	f7ff fe63 	bl	799c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7cd6:	f004 fd5d 	bl	c794 <mpsl_fem_disable>
    7cda:	b130      	cbz	r0, 7cea <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    7cdc:	1c40      	adds	r0, r0, #1
    7cde:	d004      	beq.n	7cea <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    7ce0:	f240 5165 	movw	r1, #1381	; 0x565
    7ce4:	203e      	movs	r0, #62	; 0x3e
    7ce6:	f7f8 fe63 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7cea:	480f      	ldr	r0, [pc, #60]	; (7d28 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    7cec:	4a0f      	ldr	r2, [pc, #60]	; (7d2c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    7cee:	6a41      	ldr	r1, [r0, #36]	; 0x24
    7cf0:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    7cf4:	6011      	str	r1, [r2, #0]
    7cf6:	2400      	movs	r4, #0
    7cf8:	6244      	str	r4, [r0, #36]	; 0x24
    7cfa:	7304      	strb	r4, [r0, #12]
    7cfc:	61c4      	str	r4, [r0, #28]
    7cfe:	6184      	str	r4, [r0, #24]
    7d00:	f000 fbca 	bl	8498 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x424>
    7d04:	480a      	ldr	r0, [pc, #40]	; (7d30 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    7d06:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    7d0a:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    7d0e:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    7d12:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    7d16:	2001      	movs	r0, #1
    7d18:	f008 fd86 	bl	10828 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    7d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7d20:	2001      	movs	r0, #1
    7d22:	f008 bd74 	b.w	1080e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    7d26:	0000      	.short	0x0000
    7d28:	20001370 	.word	0x20001370
    7d2c:	4001f508 	.word	0x4001f508
    7d30:	40008000 	.word	0x40008000

00007d34 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    7d34:	b570      	push	{r4, r5, r6, lr}
    7d36:	2001      	movs	r0, #1
    7d38:	f008 fd76 	bl	10828 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    7d3c:	4c37      	ldr	r4, [pc, #220]	; (7e1c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    7d3e:	2000      	movs	r0, #0
    7d40:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    7d44:	2001      	movs	r0, #1
    7d46:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    7d4a:	f009 f80e 	bl	10d6a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    7d4e:	4d34      	ldr	r5, [pc, #208]	; (7e20 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    7d50:	b118      	cbz	r0, 7d5a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    7d52:	6828      	ldr	r0, [r5, #0]
    7d54:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    7d58:	6028      	str	r0, [r5, #0]
    7d5a:	f008 fffa 	bl	10d52 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7d5e:	b128      	cbz	r0, 7d6c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    7d60:	6828      	ldr	r0, [r5, #0]
    7d62:	4930      	ldr	r1, [pc, #192]	; (7e24 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    7d64:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    7d68:	4308      	orrs	r0, r1
    7d6a:	6028      	str	r0, [r5, #0]
    7d6c:	f009 f80d 	bl	10d8a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    7d70:	b138      	cbz	r0, 7d82 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    7d72:	482b      	ldr	r0, [pc, #172]	; (7e20 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    7d74:	1d00      	adds	r0, r0, #4
    7d76:	6801      	ldr	r1, [r0, #0]
    7d78:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    7d7c:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    7d80:	6001      	str	r1, [r0, #0]
    7d82:	4927      	ldr	r1, [pc, #156]	; (7e20 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    7d84:	4828      	ldr	r0, [pc, #160]	; (7e28 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    7d86:	313c      	adds	r1, #60	; 0x3c
    7d88:	6008      	str	r0, [r1, #0]
    7d8a:	f004 fd3d 	bl	c808 <mpsl_fem_device_config_254_apply_get>
    7d8e:	b140      	cbz	r0, 7da2 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    7d90:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    7d94:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    7d98:	1c41      	adds	r1, r0, #1
    7d9a:	d002      	beq.n	7da2 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    7d9c:	4920      	ldr	r1, [pc, #128]	; (7e20 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    7d9e:	3110      	adds	r1, #16
    7da0:	6008      	str	r0, [r1, #0]
    7da2:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    7da6:	6e00      	ldr	r0, [r0, #96]	; 0x60
    7da8:	1c41      	adds	r1, r0, #1
    7daa:	d004      	beq.n	7db6 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    7dac:	491f      	ldr	r1, [pc, #124]	; (7e2c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    7dae:	680a      	ldr	r2, [r1, #0]
    7db0:	f360 4217 	bfi	r2, r0, #16, #8
    7db4:	600a      	str	r2, [r1, #0]
    7db6:	f240 1103 	movw	r1, #259	; 0x103
    7dba:	f240 605b 	movw	r0, #1627	; 0x65b
    7dbe:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    7dc2:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    7dc6:	2001      	movs	r0, #1
    7dc8:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    7dcc:	f000 f842 	bl	7e54 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    7dd0:	f240 2001 	movw	r0, #513	; 0x201
    7dd4:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    7dd8:	2002      	movs	r0, #2
    7dda:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    7dde:	4914      	ldr	r1, [pc, #80]	; (7e30 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    7de0:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    7de4:	6008      	str	r0, [r1, #0]
    7de6:	4913      	ldr	r1, [pc, #76]	; (7e34 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    7de8:	2000      	movs	r0, #0
    7dea:	8608      	strh	r0, [r1, #48]	; 0x30
    7dec:	3110      	adds	r1, #16
    7dee:	61c8      	str	r0, [r1, #28]
    7df0:	f881 0028 	strb.w	r0, [r1, #40]	; 0x28
    7df4:	2001      	movs	r0, #1
    7df6:	f008 fd0a 	bl	1080e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    7dfa:	2010      	movs	r0, #16
    7dfc:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    7e00:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    7e04:	2002      	movs	r0, #2
    7e06:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    7e0a:	480b      	ldr	r0, [pc, #44]	; (7e38 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    7e0c:	6800      	ldr	r0, [r0, #0]
    7e0e:	2800      	cmp	r0, #0
    7e10:	d002      	beq.n	7e18 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    7e12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7e16:	4700      	bx	r0
    7e18:	bd70      	pop	{r4, r5, r6, pc}
    7e1a:	0000      	.short	0x0000
    7e1c:	40001000 	.word	0x40001000
    7e20:	4000173c 	.word	0x4000173c
    7e24:	80000096 	.word	0x80000096
    7e28:	8900002c 	.word	0x8900002c
    7e2c:	4000158c 	.word	0x4000158c
    7e30:	4001f504 	.word	0x4001f504
    7e34:	20001360 	.word	0x20001360
    7e38:	200002dc 	.word	0x200002dc

00007e3c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    7e3c:	4901      	ldr	r1, [pc, #4]	; (7e44 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    7e3e:	7548      	strb	r0, [r1, #21]
    7e40:	4770      	bx	lr
    7e42:	0000      	.short	0x0000
    7e44:	20001370 	.word	0x20001370

00007e48 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    7e48:	4901      	ldr	r1, [pc, #4]	; (7e50 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    7e4a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    7e4e:	4770      	bx	lr
    7e50:	0000867c 	.word	0x0000867c

00007e54 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    7e54:	4908      	ldr	r1, [pc, #32]	; (7e78 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    7e56:	b510      	push	{r4, lr}
    7e58:	7508      	strb	r0, [r1, #20]
    7e5a:	4908      	ldr	r1, [pc, #32]	; (7e7c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    7e5c:	2801      	cmp	r0, #1
    7e5e:	d006      	beq.n	7e6e <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    7e60:	2802      	cmp	r0, #2
    7e62:	d006      	beq.n	7e72 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    7e64:	f640 516c 	movw	r1, #3436	; 0xd6c
    7e68:	203e      	movs	r0, #62	; 0x3e
    7e6a:	f7f8 fda1 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e6e:	2003      	movs	r0, #3
    7e70:	e000      	b.n	7e74 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    7e72:	2004      	movs	r0, #4
    7e74:	6008      	str	r0, [r1, #0]
    7e76:	bd10      	pop	{r4, pc}
    7e78:	20001370 	.word	0x20001370
    7e7c:	40001510 	.word	0x40001510

00007e80 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    7e80:	4905      	ldr	r1, [pc, #20]	; (7e98 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    7e82:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    7e86:	4805      	ldr	r0, [pc, #20]	; (7e9c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    7e88:	f810 1f28 	ldrb.w	r1, [r0, #40]!
    7e8c:	f041 0101 	orr.w	r1, r1, #1
    7e90:	7001      	strb	r1, [r0, #0]
    7e92:	f000 ba13 	b.w	82bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x248>
    7e96:	0000      	.short	0x0000
    7e98:	40001000 	.word	0x40001000
    7e9c:	20001370 	.word	0x20001370

00007ea0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    7ea0:	4901      	ldr	r1, [pc, #4]	; (7ea8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    7ea2:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    7ea6:	4770      	bx	lr
    7ea8:	00008688 	.word	0x00008688

00007eac <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    7eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7eb0:	4e30      	ldr	r6, [pc, #192]	; (7f74 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    7eb2:	4c31      	ldr	r4, [pc, #196]	; (7f78 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>)
    7eb4:	4688      	mov	r8, r1
    7eb6:	0007      	movs	r7, r0
    7eb8:	4615      	mov	r5, r2
    7eba:	f04f 0901 	mov.w	r9, #1
    7ebe:	d006      	beq.n	7ece <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x22>
    7ec0:	2f01      	cmp	r7, #1
    7ec2:	d012      	beq.n	7eea <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3e>
    7ec4:	f640 0117 	movw	r1, #2071	; 0x817
    7ec8:	203e      	movs	r0, #62	; 0x3e
    7eca:	f7f8 fd71 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ece:	4610      	mov	r0, r2
    7ed0:	f000 fb88 	bl	85e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x570>
    7ed4:	4829      	ldr	r0, [pc, #164]	; (7f7c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd0>)
    7ed6:	f884 9009 	strb.w	r9, [r4, #9]
    7eda:	f830 1015 	ldrh.w	r1, [r0, r5, lsl #1]
    7ede:	4640      	mov	r0, r8
    7ee0:	f000 fb2e 	bl	8540 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4cc>
    7ee4:	4605      	mov	r5, r0
    7ee6:	4630      	mov	r0, r6
    7ee8:	e00c      	b.n	7f04 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x58>
    7eea:	4610      	mov	r0, r2
    7eec:	f000 fb60 	bl	85b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x53c>
    7ef0:	2002      	movs	r0, #2
    7ef2:	7260      	strb	r0, [r4, #9]
    7ef4:	f649 71ba 	movw	r1, #40890	; 0x9fba
    7ef8:	4640      	mov	r0, r8
    7efa:	f000 fb21 	bl	8540 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4cc>
    7efe:	4605      	mov	r5, r0
    7f00:	481c      	ldr	r0, [pc, #112]	; (7f74 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    7f02:	1d00      	adds	r0, r0, #4
    7f04:	f000 fada 	bl	84bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x448>
    7f08:	f8df 8074 	ldr.w	r8, [pc, #116]	; 7f80 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>
    7f0c:	f8c8 5540 	str.w	r5, [r8, #1344]	; 0x540
    7f10:	f8df a074 	ldr.w	sl, [pc, #116]	; 7f88 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>
    7f14:	481b      	ldr	r0, [pc, #108]	; (7f84 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd8>)
    7f16:	f8ca 0510 	str.w	r0, [sl, #1296]	; 0x510
    7f1a:	2010      	movs	r0, #16
    7f1c:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
    7f20:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7f22:	f44f 2600 	mov.w	r6, #524288	; 0x80000
    7f26:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    7f2a:	6260      	str	r0, [r4, #36]	; 0x24
    7f2c:	4817      	ldr	r0, [pc, #92]	; (7f8c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    7f2e:	6006      	str	r6, [r0, #0]
    7f30:	f000 f9fe 	bl	8330 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2bc>
    7f34:	4641      	mov	r1, r8
    7f36:	f8c8 904c 	str.w	r9, [r8, #76]	; 0x4c
    7f3a:	4811      	ldr	r0, [pc, #68]	; (7f80 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>)
    7f3c:	300c      	adds	r0, #12
    7f3e:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    7f42:	42a8      	cmp	r0, r5
    7f44:	d310      	bcc.n	7f68 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>
    7f46:	2000      	movs	r0, #0
    7f48:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    7f4c:	f8ca 0514 	str.w	r0, [sl, #1300]	; 0x514
    7f50:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7f52:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
    7f56:	6260      	str	r0, [r4, #36]	; 0x24
    7f58:	480c      	ldr	r0, [pc, #48]	; (7f8c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    7f5a:	1d00      	adds	r0, r0, #4
    7f5c:	6006      	str	r6, [r0, #0]
    7f5e:	f7ff fd1d 	bl	799c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7f62:	2000      	movs	r0, #0
    7f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7f68:	4629      	mov	r1, r5
    7f6a:	4638      	mov	r0, r7
    7f6c:	f000 fab2 	bl	84d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x460>
    7f70:	2001      	movs	r0, #1
    7f72:	e7f7      	b.n	7f64 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>
    7f74:	40001000 	.word	0x40001000
    7f78:	20001370 	.word	0x20001370
    7f7c:	00008628 	.word	0x00008628
    7f80:	40008000 	.word	0x40008000
    7f84:	40008140 	.word	0x40008140
    7f88:	4001f098 	.word	0x4001f098
    7f8c:	4001f504 	.word	0x4001f504

00007f90 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    7f90:	4b0d      	ldr	r3, [pc, #52]	; (7fc8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    7f92:	b510      	push	{r4, lr}
    7f94:	71d8      	strb	r0, [r3, #7]
    7f96:	729a      	strb	r2, [r3, #10]
    7f98:	b151      	cbz	r1, 7fb0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    7f9a:	2002      	movs	r0, #2
    7f9c:	7218      	strb	r0, [r3, #8]
    7f9e:	2801      	cmp	r0, #1
    7fa0:	d008      	beq.n	7fb4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    7fa2:	2802      	cmp	r0, #2
    7fa4:	d00f      	beq.n	7fc6 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    7fa6:	f640 2144 	movw	r1, #2628	; 0xa44
    7faa:	203e      	movs	r0, #62	; 0x3e
    7fac:	f7f8 fd00 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7fb0:	2001      	movs	r0, #1
    7fb2:	e7f3      	b.n	7f9c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    7fb4:	7a58      	ldrb	r0, [r3, #9]
    7fb6:	2802      	cmp	r0, #2
    7fb8:	d105      	bne.n	7fc6 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    7fba:	f000 f943 	bl	8244 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>
    7fbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7fc2:	f000 ba51 	b.w	8468 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f4>
    7fc6:	bd10      	pop	{r4, pc}
    7fc8:	20001370 	.word	0x20001370

00007fcc <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    7fcc:	4902      	ldr	r1, [pc, #8]	; (7fd8 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    7fce:	2000      	movs	r0, #0
    7fd0:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    7fd4:	4770      	bx	lr
    7fd6:	0000      	.short	0x0000
    7fd8:	40008000 	.word	0x40008000

00007fdc <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    7fdc:	4904      	ldr	r1, [pc, #16]	; (7ff0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    7fde:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    7fe2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    7fe6:	4249      	negs	r1, r1
    7fe8:	7001      	strb	r1, [r0, #0]
    7fea:	2001      	movs	r0, #1
    7fec:	4770      	bx	lr
    7fee:	0000      	.short	0x0000
    7ff0:	40001000 	.word	0x40001000

00007ff4 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    7ff4:	4903      	ldr	r1, [pc, #12]	; (8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>)
    7ff6:	0e02      	lsrs	r2, r0, #24
    7ff8:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    7ffc:	0200      	lsls	r0, r0, #8
    7ffe:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    8002:	4770      	bx	lr
    8004:	40001000 	.word	0x40001000

00008008 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    8008:	4901      	ldr	r1, [pc, #4]	; (8010 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x8>)
    800a:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    800e:	4770      	bx	lr
    8010:	40001000 	.word	0x40001000

00008014 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    8014:	b510      	push	{r4, lr}
    8016:	2200      	movs	r2, #0
    8018:	2901      	cmp	r1, #1
    801a:	d006      	beq.n	802a <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    801c:	2902      	cmp	r1, #2
    801e:	d002      	beq.n	8026 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    8020:	f240 21d2 	movw	r1, #722	; 0x2d2
    8024:	e014      	b.n	8050 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    8026:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    802a:	490b      	ldr	r1, [pc, #44]	; (8058 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    802c:	430a      	orrs	r2, r1
    802e:	490b      	ldr	r1, [pc, #44]	; (805c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    8030:	600a      	str	r2, [r1, #0]
    8032:	490b      	ldr	r1, [pc, #44]	; (8060 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    8034:	4308      	orrs	r0, r1
    8036:	4909      	ldr	r1, [pc, #36]	; (805c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    8038:	1d09      	adds	r1, r1, #4
    803a:	6008      	str	r0, [r1, #0]
    803c:	4809      	ldr	r0, [pc, #36]	; (8064 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    803e:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    8042:	b2c0      	uxtb	r0, r0
    8044:	2803      	cmp	r0, #3
    8046:	d001      	beq.n	804c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    8048:	280b      	cmp	r0, #11
    804a:	d104      	bne.n	8056 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    804c:	f240 21ea 	movw	r1, #746	; 0x2ea
    8050:	203e      	movs	r0, #62	; 0x3e
    8052:	f7f8 fcad 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8056:	bd10      	pop	{r4, pc}
    8058:	00100108 	.word	0x00100108
    805c:	40001514 	.word	0x40001514
    8060:	02030000 	.word	0x02030000
    8064:	40001000 	.word	0x40001000

00008068 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    8068:	4901      	ldr	r1, [pc, #4]	; (8070 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    806a:	7588      	strb	r0, [r1, #22]
    806c:	4770      	bx	lr
    806e:	0000      	.short	0x0000
    8070:	20001370 	.word	0x20001370

00008074 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    8074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8078:	4851      	ldr	r0, [pc, #324]	; (81c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    807a:	f04f 0a01 	mov.w	sl, #1
    807e:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    8082:	484f      	ldr	r0, [pc, #316]	; (81c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    8084:	300c      	adds	r0, #12
    8086:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    808a:	f008 fd56 	bl	10b3a <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    808e:	4c4d      	ldr	r4, [pc, #308]	; (81c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    8090:	e9c4 070b 	strd	r0, r7, [r4, #44]	; 0x2c
    8094:	f000 f8e0 	bl	8258 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>
    8098:	494b      	ldr	r1, [pc, #300]	; (81c8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    809a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    809c:	6008      	str	r0, [r1, #0]
    809e:	f8df 812c 	ldr.w	r8, [pc, #300]	; 81cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>
    80a2:	2000      	movs	r0, #0
    80a4:	6260      	str	r0, [r4, #36]	; 0x24
    80a6:	f8d8 2200 	ldr.w	r2, [r8, #512]	; 0x200
    80aa:	f240 131d 	movw	r3, #285	; 0x11d
    80ae:	439a      	bics	r2, r3
    80b0:	f8c8 2200 	str.w	r2, [r8, #512]	; 0x200
    80b4:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    80b8:	f000 f94e 	bl	8358 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2e4>
    80bc:	4605      	mov	r5, r0
    80be:	4840      	ldr	r0, [pc, #256]	; (81c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    80c0:	3008      	adds	r0, #8
    80c2:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    80c6:	4e3e      	ldr	r6, [pc, #248]	; (81c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    80c8:	61e0      	str	r0, [r4, #28]
    80ca:	1d36      	adds	r6, r6, #4
    80cc:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    80d0:	61a0      	str	r0, [r4, #24]
    80d2:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    80d6:	7d21      	ldrb	r1, [r4, #20]
    80d8:	f884 1020 	strb.w	r1, [r4, #32]
    80dc:	7a61      	ldrb	r1, [r4, #9]
    80de:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    80e2:	46a1      	mov	r9, r4
    80e4:	2400      	movs	r4, #0
    80e6:	4639      	mov	r1, r7
    80e8:	4628      	mov	r0, r5
    80ea:	f000 f983 	bl	83f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x380>
    80ee:	b910      	cbnz	r0, 80f6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
    80f0:	f8c8 a010 	str.w	sl, [r8, #16]
    80f4:	2401      	movs	r4, #1
    80f6:	4f33      	ldr	r7, [pc, #204]	; (81c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    80f8:	07e8      	lsls	r0, r5, #31
    80fa:	f1a7 0710 	sub.w	r7, r7, #16
    80fe:	d120      	bne.n	8142 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xce>
    8100:	07a8      	lsls	r0, r5, #30
    8102:	d527      	bpl.n	8154 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe0>
    8104:	f008 fe41 	bl	10d8a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8108:	b9f0      	cbnz	r0, 8148 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    810a:	f008 fe2e 	bl	10d6a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    810e:	b9d8      	cbnz	r0, 8148 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    8110:	482f      	ldr	r0, [pc, #188]	; (81d0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    8112:	6800      	ldr	r0, [r0, #0]
    8114:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    8118:	f3c0 6300 	ubfx	r3, r0, #24, #1
    811c:	f000 020f 	and.w	r2, r0, #15
    8120:	f3c0 1103 	ubfx	r1, r0, #4, #4
    8124:	f3c0 2803 	ubfx	r8, r0, #8, #4
    8128:	b173      	cbz	r3, 8148 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    812a:	b11a      	cbz	r2, 8134 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc0>
    812c:	b111      	cbz	r1, 8134 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc0>
    812e:	f1b8 0f00 	cmp.w	r8, #0
    8132:	d109      	bne.n	8148 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    8134:	f3c0 4004 	ubfx	r0, r0, #16, #5
    8138:	2801      	cmp	r0, #1
    813a:	d105      	bne.n	8148 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    813c:	f1bc 0f03 	cmp.w	ip, #3
    8140:	d202      	bcs.n	8148 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    8142:	6838      	ldr	r0, [r7, #0]
    8144:	4780      	blx	r0
    8146:	e00e      	b.n	8166 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf2>
    8148:	f345 0080 	sbfx	r0, r5, #2, #1
    814c:	4621      	mov	r1, r4
    814e:	1c40      	adds	r0, r0, #1
    8150:	687a      	ldr	r2, [r7, #4]
    8152:	e007      	b.n	8164 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf0>
    8154:	f015 0f28 	tst.w	r5, #40	; 0x28
    8158:	d005      	beq.n	8166 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf2>
    815a:	f345 1140 	sbfx	r1, r5, #5, #1
    815e:	68ba      	ldr	r2, [r7, #8]
    8160:	4620      	mov	r0, r4
    8162:	1c49      	adds	r1, r1, #1
    8164:	4790      	blx	r2
    8166:	06e8      	lsls	r0, r5, #27
    8168:	d501      	bpl.n	816e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfa>
    816a:	68f8      	ldr	r0, [r7, #12]
    816c:	4780      	blx	r0
    816e:	f899 1009 	ldrb.w	r1, [r9, #9]
    8172:	4648      	mov	r0, r9
    8174:	2902      	cmp	r1, #2
    8176:	d120      	bne.n	81ba <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    8178:	7b01      	ldrb	r1, [r0, #12]
    817a:	2900      	cmp	r1, #0
    817c:	d01d      	beq.n	81ba <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    817e:	2902      	cmp	r1, #2
    8180:	d004      	beq.n	818c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x118>
    8182:	2901      	cmp	r1, #1
    8184:	d009      	beq.n	819a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x126>
    8186:	f640 4156 	movw	r1, #3158	; 0xc56
    818a:	e00d      	b.n	81a8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x134>
    818c:	69c1      	ldr	r1, [r0, #28]
    818e:	f8d9 0010 	ldr.w	r0, [r9, #16]
    8192:	4408      	add	r0, r1
    8194:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    8198:	e00b      	b.n	81b2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13e>
    819a:	6901      	ldr	r1, [r0, #16]
    819c:	f8d9 001c 	ldr.w	r0, [r9, #28]
    81a0:	4281      	cmp	r1, r0
    81a2:	d804      	bhi.n	81ae <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13a>
    81a4:	f640 4157 	movw	r1, #3159	; 0xc57
    81a8:	203e      	movs	r0, #62	; 0x3e
    81aa:	f7f8 fc01 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    81ae:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
    81b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    81b6:	f000 b961 	b.w	847c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>
    81ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    81be:	0000      	.short	0x0000
    81c0:	40008000 	.word	0x40008000
    81c4:	20001370 	.word	0x20001370
    81c8:	4001f508 	.word	0x4001f508
    81cc:	40001000 	.word	0x40001000
    81d0:	40001450 	.word	0x40001450
    81d4:	480b      	ldr	r0, [pc, #44]	; (8204 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x190>)
    81d6:	7d81      	ldrb	r1, [r0, #22]
    81d8:	480b      	ldr	r0, [pc, #44]	; (8208 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x194>)
    81da:	5c40      	ldrb	r0, [r0, r1]
    81dc:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    81e0:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    81e4:	d204      	bcs.n	81f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x17c>
    81e6:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    81ea:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    81ee:	e001      	b.n	81f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x180>
    81f0:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    81f4:	4a05      	ldr	r2, [pc, #20]	; (820c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x198>)
    81f6:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    81fa:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    81fe:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    8202:	4770      	bx	lr
    8204:	20001370 	.word	0x20001370
    8208:	0000862e 	.word	0x0000862e
    820c:	40001000 	.word	0x40001000
    8210:	b508      	push	{r3, lr}
    8212:	490b      	ldr	r1, [pc, #44]	; (8240 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1cc>)
    8214:	466b      	mov	r3, sp
    8216:	f991 2015 	ldrsb.w	r2, [r1, #21]
    821a:	7d89      	ldrb	r1, [r1, #22]
    821c:	f000 faaa 	bl	8774 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    8220:	f99d 0000 	ldrsb.w	r0, [sp]
    8224:	f000 fa7a 	bl	871c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    8228:	f10d 0001 	add.w	r0, sp, #1
    822c:	f004 fad6 	bl	c7dc <mpsl_fem_pa_gain_set>
    8230:	2800      	cmp	r0, #0
    8232:	d004      	beq.n	823e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ca>
    8234:	f240 51e6 	movw	r1, #1510	; 0x5e6
    8238:	203e      	movs	r0, #62	; 0x3e
    823a:	f7f8 fbb9 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    823e:	bd08      	pop	{r3, pc}
    8240:	20001370 	.word	0x20001370
    8244:	4803      	ldr	r0, [pc, #12]	; (8254 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e0>)
    8246:	7a01      	ldrb	r1, [r0, #8]
    8248:	2901      	cmp	r1, #1
    824a:	d102      	bne.n	8252 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1de>
    824c:	7a80      	ldrb	r0, [r0, #10]
    824e:	f7ff bfdf 	b.w	8210 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x19c>
    8252:	4770      	bx	lr
    8254:	20001370 	.word	0x20001370
    8258:	480d      	ldr	r0, [pc, #52]	; (8290 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21c>)
    825a:	b510      	push	{r4, lr}
    825c:	7a40      	ldrb	r0, [r0, #9]
    825e:	2801      	cmp	r0, #1
    8260:	d00c      	beq.n	827c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x208>
    8262:	2802      	cmp	r0, #2
    8264:	d113      	bne.n	828e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    8266:	f004 fa9b 	bl	c7a0 <mpsl_fem_lna_configuration_clear>
    826a:	2800      	cmp	r0, #0
    826c:	d00f      	beq.n	828e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    826e:	1c40      	adds	r0, r0, #1
    8270:	d00d      	beq.n	828e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    8272:	f640 01ab 	movw	r1, #2219	; 0x8ab
    8276:	203e      	movs	r0, #62	; 0x3e
    8278:	f7f8 fb9a 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    827c:	f004 faa2 	bl	c7c4 <mpsl_fem_pa_configuration_clear>
    8280:	2800      	cmp	r0, #0
    8282:	d004      	beq.n	828e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    8284:	1c40      	adds	r0, r0, #1
    8286:	d002      	beq.n	828e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    8288:	f640 01a5 	movw	r1, #2213	; 0x8a5
    828c:	e7f3      	b.n	8276 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x202>
    828e:	bd10      	pop	{r4, pc}
    8290:	20001370 	.word	0x20001370
    8294:	4808      	ldr	r0, [pc, #32]	; (82b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x244>)
    8296:	2100      	movs	r1, #0
    8298:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    829c:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    82a0:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    82a4:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    82a8:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    82ac:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    82b0:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    82b4:	4770      	bx	lr
    82b6:	0000      	.short	0x0000
    82b8:	40001000 	.word	0x40001000
    82bc:	4818      	ldr	r0, [pc, #96]	; (8320 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2ac>)
    82be:	b510      	push	{r4, lr}
    82c0:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
    82c4:	07c1      	lsls	r1, r0, #31
    82c6:	d029      	beq.n	831c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    82c8:	0781      	lsls	r1, r0, #30
    82ca:	d514      	bpl.n	82f6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x282>
    82cc:	4815      	ldr	r0, [pc, #84]	; (8324 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b0>)
    82ce:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    82d2:	f041 0101 	orr.w	r1, r1, #1
    82d6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    82da:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    82de:	b2c0      	uxtb	r0, r0
    82e0:	280b      	cmp	r0, #11
    82e2:	d005      	beq.n	82f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    82e4:	280a      	cmp	r0, #10
    82e6:	d003      	beq.n	82f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    82e8:	2803      	cmp	r0, #3
    82ea:	d001      	beq.n	82f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    82ec:	2802      	cmp	r0, #2
    82ee:	d115      	bne.n	831c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    82f0:	f240 610f 	movw	r1, #1551	; 0x60f
    82f4:	e00f      	b.n	8316 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a2>
    82f6:	0740      	lsls	r0, r0, #29
    82f8:	d510      	bpl.n	831c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    82fa:	480a      	ldr	r0, [pc, #40]	; (8324 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b0>)
    82fc:	490a      	ldr	r1, [pc, #40]	; (8328 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b4>)
    82fe:	3008      	adds	r0, #8
    8300:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    8304:	f44f 71a0 	mov.w	r1, #320	; 0x140
    8308:	4808      	ldr	r0, [pc, #32]	; (832c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b8>)
    830a:	f008 faa3 	bl	10854 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    830e:	2800      	cmp	r0, #0
    8310:	d004      	beq.n	831c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    8312:	f240 6117 	movw	r1, #1559	; 0x617
    8316:	203e      	movs	r0, #62	; 0x3e
    8318:	f7f8 fb4a 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    831c:	bd10      	pop	{r4, pc}
    831e:	0000      	.short	0x0000
    8320:	20001370 	.word	0x20001370
    8324:	40001000 	.word	0x40001000
    8328:	4001f098 	.word	0x4001f098
    832c:	40008000 	.word	0x40008000
    8330:	4808      	ldr	r0, [pc, #32]	; (8354 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2e0>)
    8332:	4601      	mov	r1, r0
    8334:	79c2      	ldrb	r2, [r0, #7]
    8336:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    833a:	b112      	cbz	r2, 8342 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2ce>
    833c:	2a01      	cmp	r2, #1
    833e:	d003      	beq.n	8348 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2d4>
    8340:	e006      	b.n	8350 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2dc>
    8342:	f041 0102 	orr.w	r1, r1, #2
    8346:	e001      	b.n	834c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2d8>
    8348:	f041 0104 	orr.w	r1, r1, #4
    834c:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    8350:	f7ff bfb4 	b.w	82bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x248>
    8354:	20001370 	.word	0x20001370
    8358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    835c:	4d22      	ldr	r5, [pc, #136]	; (83e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x374>)
    835e:	2400      	movs	r4, #0
    8360:	7b28      	ldrb	r0, [r5, #12]
    8362:	b138      	cbz	r0, 8374 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x300>
    8364:	f44f 71a2 	mov.w	r1, #324	; 0x144
    8368:	4820      	ldr	r0, [pc, #128]	; (83ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x378>)
    836a:	f008 fa73 	bl	10854 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    836e:	b108      	cbz	r0, 8374 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x300>
    8370:	2701      	movs	r7, #1
    8372:	e000      	b.n	8376 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x302>
    8374:	2700      	movs	r7, #0
    8376:	7a68      	ldrb	r0, [r5, #9]
    8378:	4e1d      	ldr	r6, [pc, #116]	; (83f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x37c>)
    837a:	f44f 7186 	mov.w	r1, #268	; 0x10c
    837e:	2801      	cmp	r0, #1
    8380:	d002      	beq.n	8388 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x314>
    8382:	2802      	cmp	r0, #2
    8384:	d006      	beq.n	8394 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x320>
    8386:	e016      	b.n	83b6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    8388:	4630      	mov	r0, r6
    838a:	f008 fa5e 	bl	1084a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    838e:	b190      	cbz	r0, 83b6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    8390:	2408      	movs	r4, #8
    8392:	e010      	b.n	83b6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    8394:	4630      	mov	r0, r6
    8396:	f008 fa58 	bl	1084a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    839a:	b100      	cbz	r0, 839e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x32a>
    839c:	2402      	movs	r4, #2
    839e:	f8d6 0400 	ldr.w	r0, [r6, #1024]	; 0x400
    83a2:	43c0      	mvns	r0, r0
    83a4:	f340 0000 	sbfx	r0, r0, #0, #1
    83a8:	1c40      	adds	r0, r0, #1
    83aa:	d101      	bne.n	83b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x33c>
    83ac:	f044 0404 	orr.w	r4, r4, #4
    83b0:	b10f      	cbz	r7, 83b6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    83b2:	f044 0401 	orr.w	r4, r4, #1
    83b6:	f014 0f0b 	tst.w	r4, #11
    83ba:	d107      	bne.n	83cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x358>
    83bc:	f44f 7188 	mov.w	r1, #272	; 0x110
    83c0:	4630      	mov	r0, r6
    83c2:	f008 fa42 	bl	1084a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    83c6:	b108      	cbz	r0, 83cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x358>
    83c8:	f044 0410 	orr.w	r4, r4, #16
    83cc:	f7ff ff62 	bl	8294 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x220>
    83d0:	06e0      	lsls	r0, r4, #27
    83d2:	d506      	bpl.n	83e2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x36e>
    83d4:	0720      	lsls	r0, r4, #28
    83d6:	d404      	bmi.n	83e2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x36e>
    83d8:	7a68      	ldrb	r0, [r5, #9]
    83da:	2801      	cmp	r0, #1
    83dc:	d101      	bne.n	83e2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x36e>
    83de:	f044 0420 	orr.w	r4, r4, #32
    83e2:	4620      	mov	r0, r4
    83e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    83e8:	20001370 	.word	0x20001370
    83ec:	40008000 	.word	0x40008000
    83f0:	40001000 	.word	0x40001000
    83f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    83f8:	4c1a      	ldr	r4, [pc, #104]	; (8464 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f0>)
    83fa:	460d      	mov	r5, r1
    83fc:	7a21      	ldrb	r1, [r4, #8]
    83fe:	b129      	cbz	r1, 840c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x398>
    8400:	f010 0f11 	tst.w	r0, #17
    8404:	d007      	beq.n	8416 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3a2>
    8406:	f7ff fac9 	bl	799c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    840a:	e024      	b.n	8456 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3e2>
    840c:	f000 f890 	bl	8530 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    8410:	2000      	movs	r0, #0
    8412:	7320      	strb	r0, [r4, #12]
    8414:	e01f      	b.n	8456 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3e2>
    8416:	2901      	cmp	r1, #1
    8418:	d001      	beq.n	841e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3aa>
    841a:	2601      	movs	r6, #1
    841c:	e000      	b.n	8420 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3ac>
    841e:	2600      	movs	r6, #0
    8420:	79e0      	ldrb	r0, [r4, #7]
    8422:	2801      	cmp	r0, #1
    8424:	d00e      	beq.n	8444 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3d0>
    8426:	2700      	movs	r7, #0
    8428:	f000 f882 	bl	8530 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    842c:	2196      	movs	r1, #150	; 0x96
    842e:	4630      	mov	r0, r6
    8430:	f000 f894 	bl	855c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4e8>
    8434:	4601      	mov	r1, r0
    8436:	b14f      	cbz	r7, 844c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3d8>
    8438:	353b      	adds	r5, #59	; 0x3b
    843a:	428d      	cmp	r5, r1
    843c:	d904      	bls.n	8448 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3d4>
    843e:	2000      	movs	r0, #0
    8440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8444:	2701      	movs	r7, #1
    8446:	e7ef      	b.n	8428 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3b4>
    8448:	2001      	movs	r0, #1
    844a:	71e0      	strb	r0, [r4, #7]
    844c:	7aa2      	ldrb	r2, [r4, #10]
    844e:	4630      	mov	r0, r6
    8450:	f7ff fd2c 	bl	7eac <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    8454:	b108      	cbz	r0, 845a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3e6>
    8456:	2001      	movs	r0, #1
    8458:	e7f2      	b.n	8440 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3cc>
    845a:	f640 21a5 	movw	r1, #2725	; 0xaa5
    845e:	203e      	movs	r0, #62	; 0x3e
    8460:	f7f8 faa6 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8464:	20001370 	.word	0x20001370
    8468:	4803      	ldr	r0, [pc, #12]	; (8478 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x404>)
    846a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    846e:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    8472:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    8476:	4770      	bx	lr
    8478:	40001000 	.word	0x40001000
    847c:	4804      	ldr	r0, [pc, #16]	; (8490 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x41c>)
    847e:	6a41      	ldr	r1, [r0, #36]	; 0x24
    8480:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    8484:	6241      	str	r1, [r0, #36]	; 0x24
    8486:	4903      	ldr	r1, [pc, #12]	; (8494 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x420>)
    8488:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    848c:	6008      	str	r0, [r1, #0]
    848e:	4770      	bx	lr
    8490:	20001370 	.word	0x20001370
    8494:	4001f504 	.word	0x4001f504
    8498:	4a07      	ldr	r2, [pc, #28]	; (84b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
    849a:	2000      	movs	r0, #0
    849c:	3208      	adds	r2, #8
    849e:	4906      	ldr	r1, [pc, #24]	; (84b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
    84a0:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    84a4:	1d0a      	adds	r2, r1, #4
    84a6:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    84aa:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    84ae:	4902      	ldr	r1, [pc, #8]	; (84b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
    84b0:	310c      	adds	r1, #12
    84b2:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    84b6:	4770      	bx	lr
    84b8:	40008000 	.word	0x40008000
    84bc:	4903      	ldr	r1, [pc, #12]	; (84cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x458>)
    84be:	79c9      	ldrb	r1, [r1, #7]
    84c0:	2900      	cmp	r1, #0
    84c2:	d102      	bne.n	84ca <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x456>
    84c4:	4902      	ldr	r1, [pc, #8]	; (84d0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x45c>)
    84c6:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    84ca:	4770      	bx	lr
    84cc:	20001370 	.word	0x20001370
    84d0:	4001f098 	.word	0x4001f098
    84d4:	b510      	push	{r4, lr}
    84d6:	4a14      	ldr	r2, [pc, #80]	; (8528 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>)
    84d8:	b120      	cbz	r0, 84e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x470>
    84da:	2801      	cmp	r0, #1
    84dc:	d011      	beq.n	8502 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x48e>
    84de:	f240 7153 	movw	r1, #1875	; 0x753
    84e2:	e01c      	b.n	851e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4aa>
    84e4:	f101 0028 	add.w	r0, r1, #40	; 0x28
    84e8:	e9c2 1002 	strd	r1, r0, [r2, #8]
    84ec:	490f      	ldr	r1, [pc, #60]	; (852c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b8>)
    84ee:	480e      	ldr	r0, [pc, #56]	; (8528 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>)
    84f0:	f004 f96e 	bl	c7d0 <mpsl_fem_pa_configuration_set>
    84f4:	2800      	cmp	r0, #0
    84f6:	d015      	beq.n	8524 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    84f8:	1c40      	adds	r0, r0, #1
    84fa:	d013      	beq.n	8524 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    84fc:	f240 7142 	movw	r1, #1858	; 0x742
    8500:	e00d      	b.n	851e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4aa>
    8502:	f101 0029 	add.w	r0, r1, #41	; 0x29
    8506:	e9c2 1002 	strd	r1, r0, [r2, #8]
    850a:	4908      	ldr	r1, [pc, #32]	; (852c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b8>)
    850c:	4806      	ldr	r0, [pc, #24]	; (8528 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>)
    850e:	f004 f94d 	bl	c7ac <mpsl_fem_lna_configuration_set>
    8512:	2800      	cmp	r0, #0
    8514:	d006      	beq.n	8524 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    8516:	1c40      	adds	r0, r0, #1
    8518:	d004      	beq.n	8524 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    851a:	f240 714f 	movw	r1, #1871	; 0x74f
    851e:	203e      	movs	r0, #62	; 0x3e
    8520:	f7f8 fa46 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8524:	bd10      	pop	{r4, pc}
    8526:	0000      	.short	0x0000
    8528:	200002e0 	.word	0x200002e0
    852c:	00008658 	.word	0x00008658
    8530:	4802      	ldr	r0, [pc, #8]	; (853c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4c8>)
    8532:	2100      	movs	r1, #0
    8534:	71c1      	strb	r1, [r0, #7]
    8536:	7201      	strb	r1, [r0, #8]
    8538:	7241      	strb	r1, [r0, #9]
    853a:	4770      	bx	lr
    853c:	20001370 	.word	0x20001370
    8540:	4a05      	ldr	r2, [pc, #20]	; (8558 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4e4>)
    8542:	79d2      	ldrb	r2, [r2, #7]
    8544:	2a01      	cmp	r2, #1
    8546:	d006      	beq.n	8556 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4e2>
    8548:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    854c:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    8550:	fbb1 f1f2 	udiv	r1, r1, r2
    8554:	1a40      	subs	r0, r0, r1
    8556:	4770      	bx	lr
    8558:	20001370 	.word	0x20001370
    855c:	b570      	push	{r4, r5, r6, lr}
    855e:	4c13      	ldr	r4, [pc, #76]	; (85ac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x538>)
    8560:	4603      	mov	r3, r0
    8562:	460d      	mov	r5, r1
    8564:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    8568:	2000      	movs	r0, #0
    856a:	b15a      	cbz	r2, 8584 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x510>
    856c:	4621      	mov	r1, r4
    856e:	f891 1020 	ldrb.w	r1, [r1, #32]
    8572:	b163      	cbz	r3, 858e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x51a>
    8574:	2b01      	cmp	r3, #1
    8576:	d111      	bne.n	859c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x528>
    8578:	2a01      	cmp	r2, #1
    857a:	4628      	mov	r0, r5
    857c:	d012      	beq.n	85a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x530>
    857e:	f008 f96e 	bl	1085e <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    8582:	e009      	b.n	8598 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x524>
    8584:	f640 0158 	movw	r1, #2136	; 0x858
    8588:	203e      	movs	r0, #62	; 0x3e
    858a:	f7f8 fa11 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    858e:	2a01      	cmp	r2, #1
    8590:	4628      	mov	r0, r5
    8592:	d004      	beq.n	859e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x52a>
    8594:	f008 f971 	bl	1087a <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    8598:	69e1      	ldr	r1, [r4, #28]
    859a:	4408      	add	r0, r1
    859c:	bd70      	pop	{r4, r5, r6, pc}
    859e:	f000 f8d1 	bl	8744 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    85a2:	e7f9      	b.n	8598 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x524>
    85a4:	f000 f8c0 	bl	8728 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    85a8:	e7f6      	b.n	8598 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x524>
    85aa:	0000      	.short	0x0000
    85ac:	20001370 	.word	0x20001370
    85b0:	b510      	push	{r4, lr}
    85b2:	f7ff fc4f 	bl	7e54 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    85b6:	f7ff fe0d 	bl	81d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    85ba:	f7ff fe43 	bl	8244 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>
    85be:	f7ff ff53 	bl	8468 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f4>
    85c2:	f008 fbe2 	bl	10d8a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    85c6:	2800      	cmp	r0, #0
    85c8:	d108      	bne.n	85dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x568>
    85ca:	f008 fbce 	bl	10d6a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    85ce:	2800      	cmp	r0, #0
    85d0:	d104      	bne.n	85dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x568>
    85d2:	4803      	ldr	r0, [pc, #12]	; (85e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x56c>)
    85d4:	6801      	ldr	r1, [r0, #0]
    85d6:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    85da:	6001      	str	r1, [r0, #0]
    85dc:	bd10      	pop	{r4, pc}
    85de:	0000      	.short	0x0000
    85e0:	40001568 	.word	0x40001568
    85e4:	b510      	push	{r4, lr}
    85e6:	4604      	mov	r4, r0
    85e8:	f7ff fc34 	bl	7e54 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    85ec:	f7ff fdf2 	bl	81d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    85f0:	4620      	mov	r0, r4
    85f2:	f7ff fe0d 	bl	8210 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x19c>
    85f6:	f008 fbc8 	bl	10d8a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    85fa:	2800      	cmp	r0, #0
    85fc:	d00d      	beq.n	861a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5a6>
    85fe:	4a09      	ldr	r2, [pc, #36]	; (8624 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5b0>)
    8600:	6811      	ldr	r1, [r2, #0]
    8602:	0650      	lsls	r0, r2, #25
    8604:	2c02      	cmp	r4, #2
    8606:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    860a:	d007      	beq.n	861c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5a8>
    860c:	f3c0 2006 	ubfx	r0, r0, #8, #7
    8610:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    8614:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    8618:	6010      	str	r0, [r2, #0]
    861a:	bd10      	pop	{r4, pc}
    861c:	f3c0 6006 	ubfx	r0, r0, #24, #7
    8620:	e7f6      	b.n	8610 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x59c>
    8622:	0000      	.short	0x0000
    8624:	40001588 	.word	0x40001588
    8628:	a62c0000 	.word	0xa62c0000
    862c:	0604a1e0 	.word	0x0604a1e0
    8630:	0e0c0a08 	.word	0x0e0c0a08
    8634:	16141210 	.word	0x16141210
    8638:	201e1c18 	.word	0x201e1c18
    863c:	28262422 	.word	0x28262422
    8640:	302e2c2a 	.word	0x302e2c2a
    8644:	38363432 	.word	0x38363432
    8648:	403e3c3a 	.word	0x403e3c3a
    864c:	48464442 	.word	0x48464442
    8650:	024e4c4a 	.word	0x024e4c4a
    8654:	0000501a 	.word	0x0000501a
    8658:	00000001 	.word	0x00000001
    865c:	40001110 	.word	0x40001110
	...
    8674:	00001e14 	.word	0x00001e14
    8678:	00001130 	.word	0x00001130
    867c:	00000000 	.word	0x00000000
    8680:	00000028 	.word	0x00000028
    8684:	00000018 	.word	0x00000018
    8688:	00000000 	.word	0x00000000
    868c:	00001e14 	.word	0x00001e14
    8690:	00001130 	.word	0x00001130
    8694:	00000000 	.word	0x00000000
    8698:	00001770 	.word	0x00001770
    869c:	00000fa0 	.word	0x00000fa0

000086a0 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    86a0:	b570      	push	{r4, r5, r6, lr}
    86a2:	4605      	mov	r5, r0
    86a4:	4614      	mov	r4, r2
    86a6:	4608      	mov	r0, r1
    86a8:	f7ff fbfa 	bl	7ea0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    86ac:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    86b0:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    86b4:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    86b8:	4807      	ldr	r0, [pc, #28]	; (86d8 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    86ba:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    86be:	4408      	add	r0, r1
    86c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    86c4:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    86c8:	fbb0 f5f1 	udiv	r5, r0, r1
    86cc:	4620      	mov	r0, r4
    86ce:	f7ff fbbb 	bl	7e48 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    86d2:	4428      	add	r0, r5
    86d4:	1d40      	adds	r0, r0, #5
    86d6:	bd70      	pop	{r4, r5, r6, pc}
    86d8:	00008768 	.word	0x00008768

000086dc <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    86dc:	b570      	push	{r4, r5, r6, lr}
    86de:	4d0e      	ldr	r5, [pc, #56]	; (8718 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    86e0:	461c      	mov	r4, r3
    86e2:	3d08      	subs	r5, #8
    86e4:	4b0c      	ldr	r3, [pc, #48]	; (8718 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    86e6:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    86ea:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    86ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    86f2:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    86f6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    86fa:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    86fe:	4418      	add	r0, r3
    8700:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8704:	fbb0 f5f1 	udiv	r5, r0, r1
    8708:	4610      	mov	r0, r2
    870a:	f7ff fb9d 	bl	7e48 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    870e:	4428      	add	r0, r5
    8710:	4420      	add	r0, r4
    8712:	1d40      	adds	r0, r0, #5
    8714:	bd70      	pop	{r4, r5, r6, pc}
    8716:	0000      	.short	0x0000
    8718:	00008768 	.word	0x00008768

0000871c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    871c:	4901      	ldr	r1, [pc, #4]	; (8724 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    871e:	b2c0      	uxtb	r0, r0
    8720:	6008      	str	r0, [r1, #0]
    8722:	4770      	bx	lr
    8724:	4000150c 	.word	0x4000150c

00008728 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    8728:	4a05      	ldr	r2, [pc, #20]	; (8740 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    872a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    872e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8732:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    8736:	fbb1 f1f2 	udiv	r1, r1, r2
    873a:	4408      	add	r0, r1
    873c:	1e80      	subs	r0, r0, #2
    873e:	4770      	bx	lr
    8740:	00008760 	.word	0x00008760

00008744 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    8744:	4a05      	ldr	r2, [pc, #20]	; (875c <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    8746:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    874a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    874e:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    8752:	fbb1 f1f2 	udiv	r1, r1, r2
    8756:	4408      	add	r0, r1
    8758:	4770      	bx	lr
    875a:	0000      	.short	0x0000
    875c:	00008760 	.word	0x00008760
    8760:	05dc0000 	.word	0x05dc0000
    8764:	000003e8 	.word	0x000003e8
    8768:	00000000 	.word	0x00000000
    876c:	00001e14 	.word	0x00001e14
    8770:	00001130 	.word	0x00001130

00008774 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    8774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8778:	461e      	mov	r6, r3
    877a:	4617      	mov	r7, r2
    877c:	460c      	mov	r4, r1
    877e:	4605      	mov	r5, r0
    8780:	f000 f856 	bl	8830 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    8784:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 882c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    8788:	4680      	mov	r8, r0
    878a:	f899 0000 	ldrb.w	r0, [r9]
    878e:	42a8      	cmp	r0, r5
    8790:	d110      	bne.n	87b4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8792:	f899 1001 	ldrb.w	r1, [r9, #1]
    8796:	4648      	mov	r0, r9
    8798:	42a1      	cmp	r1, r4
    879a:	d10b      	bne.n	87b4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    879c:	f990 1002 	ldrsb.w	r1, [r0, #2]
    87a0:	42b9      	cmp	r1, r7
    87a2:	d107      	bne.n	87b4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    87a4:	78c2      	ldrb	r2, [r0, #3]
    87a6:	4542      	cmp	r2, r8
    87a8:	d104      	bne.n	87b4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    87aa:	8881      	ldrh	r1, [r0, #4]
    87ac:	8031      	strh	r1, [r6, #0]
    87ae:	7980      	ldrb	r0, [r0, #6]
    87b0:	70b0      	strb	r0, [r6, #2]
    87b2:	e037      	b.n	8824 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb0>
    87b4:	463a      	mov	r2, r7
    87b6:	4621      	mov	r1, r4
    87b8:	2d01      	cmp	r5, #1
    87ba:	d009      	beq.n	87d0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    87bc:	2d02      	cmp	r5, #2
    87be:	d009      	beq.n	87d4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    87c0:	2d04      	cmp	r5, #4
    87c2:	d009      	beq.n	87d8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    87c4:	2d08      	cmp	r5, #8
    87c6:	d009      	beq.n	87dc <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    87c8:	f240 4161 	movw	r1, #1121	; 0x461
    87cc:	2006      	movs	r0, #6
    87ce:	e00c      	b.n	87ea <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    87d0:	2000      	movs	r0, #0
    87d2:	e004      	b.n	87de <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    87d4:	2001      	movs	r0, #1
    87d6:	e002      	b.n	87de <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    87d8:	2003      	movs	r0, #3
    87da:	e000      	b.n	87de <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    87dc:	2002      	movs	r0, #2
    87de:	466b      	mov	r3, sp
    87e0:	f000 f89e 	bl	8920 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    87e4:	b118      	cbz	r0, 87ee <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    87e6:	213d      	movs	r1, #61	; 0x3d
    87e8:	2075      	movs	r0, #117	; 0x75
    87ea:	f7f8 f8e1 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    87ee:	4620      	mov	r0, r4
    87f0:	f7ff f8cc 	bl	798c <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    87f4:	4602      	mov	r2, r0
    87f6:	2300      	movs	r3, #0
    87f8:	4631      	mov	r1, r6
    87fa:	f99d 0000 	ldrsb.w	r0, [sp]
    87fe:	f003 fff9 	bl	c7f4 <mpsl_fem_tx_power_split>
    8802:	4601      	mov	r1, r0
    8804:	f889 1007 	strb.w	r1, [r9, #7]
    8808:	8831      	ldrh	r1, [r6, #0]
    880a:	f8a9 1004 	strh.w	r1, [r9, #4]
    880e:	78b1      	ldrb	r1, [r6, #2]
    8810:	f889 1006 	strb.w	r1, [r9, #6]
    8814:	f889 5000 	strb.w	r5, [r9]
    8818:	f889 4001 	strb.w	r4, [r9, #1]
    881c:	f889 7002 	strb.w	r7, [r9, #2]
    8820:	f889 8003 	strb.w	r8, [r9, #3]
    8824:	f999 0007 	ldrsb.w	r0, [r9, #7]
    8828:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    882c:	20000380 	.word	0x20000380

00008830 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
    8830:	4801      	ldr	r0, [pc, #4]	; (8838 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
    8832:	7800      	ldrb	r0, [r0, #0]
    8834:	4770      	bx	lr
    8836:	0000      	.short	0x0000
    8838:	200002f8 	.word	0x200002f8

0000883c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
    883c:	b570      	push	{r4, r5, r6, lr}
    883e:	4c17      	ldr	r4, [pc, #92]	; (889c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x60>)
    8840:	7860      	ldrb	r0, [r4, #1]
    8842:	2800      	cmp	r0, #0
    8844:	d123      	bne.n	888e <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x52>
    8846:	2001      	movs	r0, #1
    8848:	7060      	strb	r0, [r4, #1]
    884a:	f008 fa78 	bl	10d3e <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    884e:	f06f 0527 	mvn.w	r5, #39	; 0x27
    8852:	b928      	cbnz	r0, 8860 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    8854:	f008 faa9 	bl	10daa <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    8858:	b910      	cbnz	r0, 8860 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    885a:	f008 fab0 	bl	10dbe <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    885e:	b120      	cbz	r0, 886a <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x2e>
    8860:	480f      	ldr	r0, [pc, #60]	; (88a0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    8862:	6060      	str	r0, [r4, #4]
    8864:	70a5      	strb	r5, [r4, #2]
    8866:	2008      	movs	r0, #8
    8868:	e010      	b.n	888c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x50>
    886a:	f008 fa3d 	bl	10ce8 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    886e:	b940      	cbnz	r0, 8882 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8870:	f008 fa44 	bl	10cfc <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    8874:	b928      	cbnz	r0, 8882 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8876:	f008 fa58 	bl	10d2a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    887a:	b910      	cbnz	r0, 8882 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    887c:	f008 fa69 	bl	10d52 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    8880:	b130      	cbz	r0, 8890 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>
    8882:	4807      	ldr	r0, [pc, #28]	; (88a0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    8884:	3031      	adds	r0, #49	; 0x31
    8886:	6060      	str	r0, [r4, #4]
    8888:	70a5      	strb	r5, [r4, #2]
    888a:	2004      	movs	r0, #4
    888c:	70e0      	strb	r0, [r4, #3]
    888e:	bd70      	pop	{r4, r5, r6, pc}
    8890:	f240 113f 	movw	r1, #319	; 0x13f
    8894:	2074      	movs	r0, #116	; 0x74
    8896:	f003 fdef 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    889a:	0000      	.short	0x0000
    889c:	200002f8 	.word	0x200002f8
    88a0:	000110fd 	.word	0x000110fd

000088a4 <mpsl_tx_power_radio_supported_power_adjust>:
    88a4:	4a06      	ldr	r2, [pc, #24]	; (88c0 <mpsl_tx_power_radio_supported_power_adjust+0x1c>)
    88a6:	b500      	push	{lr}
    88a8:	f992 2003 	ldrsb.w	r2, [r2, #3]
    88ac:	4290      	cmp	r0, r2
    88ae:	db01      	blt.n	88b4 <mpsl_tx_power_radio_supported_power_adjust+0x10>
    88b0:	4610      	mov	r0, r2
    88b2:	bd00      	pop	{pc}
    88b4:	f000 f808 	bl	88c8 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>
    88b8:	4902      	ldr	r1, [pc, #8]	; (88c4 <mpsl_tx_power_radio_supported_power_adjust+0x20>)
    88ba:	5608      	ldrsb	r0, [r1, r0]
    88bc:	bd00      	pop	{pc}
    88be:	0000      	.short	0x0000
    88c0:	200002f8 	.word	0x200002f8
    88c4:	000110ef 	.word	0x000110ef

000088c8 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>:
    88c8:	4602      	mov	r2, r0
    88ca:	4813      	ldr	r0, [pc, #76]	; (8918 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x50>)
    88cc:	b510      	push	{r4, lr}
    88ce:	f990 3003 	ldrsb.w	r3, [r0, #3]
    88d2:	429a      	cmp	r2, r3
    88d4:	db01      	blt.n	88da <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x12>
    88d6:	200d      	movs	r0, #13
    88d8:	bd10      	pop	{r4, pc}
    88da:	f990 3002 	ldrsb.w	r3, [r0, #2]
    88de:	429a      	cmp	r2, r3
    88e0:	dc01      	bgt.n	88e6 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1e>
    88e2:	2000      	movs	r0, #0
    88e4:	bd10      	pop	{r4, pc}
    88e6:	b101      	cbz	r1, 88ea <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x22>
    88e8:	2101      	movs	r1, #1
    88ea:	1ad4      	subs	r4, r2, r3
    88ec:	6843      	ldr	r3, [r0, #4]
    88ee:	5d18      	ldrb	r0, [r3, r4]
    88f0:	4c0a      	ldr	r4, [pc, #40]	; (891c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    88f2:	5624      	ldrsb	r4, [r4, r0]
    88f4:	4294      	cmp	r4, r2
    88f6:	d0f5      	beq.n	88e4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    88f8:	4c08      	ldr	r4, [pc, #32]	; (891c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    88fa:	4408      	add	r0, r1
    88fc:	343f      	adds	r4, #63	; 0x3f
    88fe:	b2c0      	uxtb	r0, r0
    8900:	b2d2      	uxtb	r2, r2
    8902:	42a3      	cmp	r3, r4
    8904:	d1ee      	bne.n	88e4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8906:	2900      	cmp	r1, #0
    8908:	d0ec      	beq.n	88e4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    890a:	2a01      	cmp	r2, #1
    890c:	d001      	beq.n	8912 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x4a>
    890e:	2a02      	cmp	r2, #2
    8910:	d1e8      	bne.n	88e4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8912:	1c40      	adds	r0, r0, #1
    8914:	b2c0      	uxtb	r0, r0
    8916:	bd10      	pop	{r4, pc}
    8918:	200002f8 	.word	0x200002f8
    891c:	000110ef 	.word	0x000110ef

00008920 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
    8920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8924:	461c      	mov	r4, r3
    8926:	4690      	mov	r8, r2
    8928:	460d      	mov	r5, r1
    892a:	4606      	mov	r6, r0
    892c:	f06f 0715 	mvn.w	r7, #21
    8930:	2804      	cmp	r0, #4
    8932:	d804      	bhi.n	893e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    8934:	b11c      	cbz	r4, 893e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    8936:	f007 ffab 	bl	10890 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x16>
    893a:	42a8      	cmp	r0, r5
    893c:	d802      	bhi.n	8944 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
    893e:	4638      	mov	r0, r7
    8940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8944:	4805      	ldr	r0, [pc, #20]	; (895c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
    8946:	4642      	mov	r2, r8
    8948:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    894c:	b118      	cbz	r0, 8956 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    894e:	5740      	ldrsb	r0, [r0, r5]
    8950:	4282      	cmp	r2, r0
    8952:	dd00      	ble.n	8956 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    8954:	4602      	mov	r2, r0
    8956:	7022      	strb	r2, [r4, #0]
    8958:	2000      	movs	r0, #0
    895a:	e7f1      	b.n	8940 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
    895c:	200013a4 	.word	0x200013a4
    8960:	b570      	push	{r4, r5, r6, lr}
    8962:	460d      	mov	r5, r1
    8964:	0004      	movs	r4, r0
    8966:	d00c      	beq.n	8982 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x62>
    8968:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
    896c:	2100      	movs	r1, #0
    896e:	2002      	movs	r0, #2
    8970:	2d09      	cmp	r5, #9
    8972:	d26e      	bcs.n	8a52 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x132>
    8974:	e8df f005 	tbb	[pc, r5]
    8978:	36361108 	.word	0x36361108
    897c:	a6897166 	.word	0xa6897166
    8980:	0094      	.short	0x0094
    8982:	f44f 71cb 	mov.w	r1, #406	; 0x196
    8986:	e0f7      	b.n	8b78 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8988:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    898c:	2804      	cmp	r0, #4
    898e:	d07b      	beq.n	8a88 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x168>
    8990:	2803      	cmp	r0, #3
    8992:	d0fc      	beq.n	898e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x6e>
    8994:	f240 11a1 	movw	r1, #417	; 0x1a1
    8998:	e0ee      	b.n	8b78 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    899a:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    899e:	2804      	cmp	r0, #4
    89a0:	d004      	beq.n	89ac <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x8c>
    89a2:	2803      	cmp	r0, #3
    89a4:	d002      	beq.n	89ac <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x8c>
    89a6:	f240 11a5 	movw	r1, #421	; 0x1a5
    89aa:	e0e5      	b.n	8b78 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    89ac:	2005      	movs	r0, #5
    89ae:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    89b2:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
    89b6:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    89ba:	bbb8      	cbnz	r0, 8a2c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x10c>
    89bc:	2100      	movs	r1, #0
    89be:	4620      	mov	r0, r4
    89c0:	f007 ffc7 	bl	10952 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xd8>
    89c4:	7820      	ldrb	r0, [r4, #0]
    89c6:	2801      	cmp	r0, #1
    89c8:	d007      	beq.n	89da <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xba>
    89ca:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    89ce:	bf00      	nop
    89d0:	e9c4 0106 	strd	r0, r1, [r4, #24]
    89d4:	2100      	movs	r1, #0
    89d6:	6a22      	ldr	r2, [r4, #32]
    89d8:	e048      	b.n	8a6c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x14c>
    89da:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    89de:	f001 fa3b 	bl	9e58 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    89e2:	e7f5      	b.n	89d0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xb0>
    89e4:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
    89e8:	2904      	cmp	r1, #4
    89ea:	d004      	beq.n	89f6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xd6>
    89ec:	2903      	cmp	r1, #3
    89ee:	d002      	beq.n	89f6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xd6>
    89f0:	f240 11c3 	movw	r1, #451	; 0x1c3
    89f4:	e0c0      	b.n	8b78 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    89f6:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    89fa:	b122      	cbz	r2, 8a06 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xe6>
    89fc:	4621      	mov	r1, r4
    89fe:	4630      	mov	r0, r6
    8a00:	f007 ffe7 	bl	109d2 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x158>
    8a04:	e0b0      	b.n	8b68 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x248>
    8a06:	2904      	cmp	r1, #4
    8a08:	d000      	beq.n	8a0c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xec>
    8a0a:	2001      	movs	r0, #1
    8a0c:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    8a10:	6a22      	ldr	r2, [r4, #32]
    8a12:	2d02      	cmp	r5, #2
    8a14:	d00b      	beq.n	8a2e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x10e>
    8a16:	2106      	movs	r1, #6
    8a18:	4630      	mov	r0, r6
    8a1a:	4790      	blx	r2
    8a1c:	2800      	cmp	r0, #0
    8a1e:	d06d      	beq.n	8afc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1dc>
    8a20:	7800      	ldrb	r0, [r0, #0]
    8a22:	2800      	cmp	r0, #0
    8a24:	d06a      	beq.n	8afc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1dc>
    8a26:	f240 11dd 	movw	r1, #477	; 0x1dd
    8a2a:	e0a5      	b.n	8b78 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8a2c:	e034      	b.n	8a98 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x178>
    8a2e:	2105      	movs	r1, #5
    8a30:	4630      	mov	r0, r6
    8a32:	4790      	blx	r2
    8a34:	2800      	cmp	r0, #0
    8a36:	d070      	beq.n	8b1a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1fa>
    8a38:	7800      	ldrb	r0, [r0, #0]
    8a3a:	2800      	cmp	r0, #0
    8a3c:	d06d      	beq.n	8b1a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1fa>
    8a3e:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
    8a42:	e099      	b.n	8b78 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8a44:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    8a48:	2805      	cmp	r0, #5
    8a4a:	d003      	beq.n	8a54 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x134>
    8a4c:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
    8a50:	e092      	b.n	8b78 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8a52:	e080      	b.n	8b56 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x236>
    8a54:	2102      	movs	r1, #2
    8a56:	6a22      	ldr	r2, [r4, #32]
    8a58:	e008      	b.n	8a6c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x14c>
    8a5a:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    8a5e:	2805      	cmp	r0, #5
    8a60:	d002      	beq.n	8a68 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x148>
    8a62:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    8a66:	e087      	b.n	8b78 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8a68:	6a22      	ldr	r2, [r4, #32]
    8a6a:	2101      	movs	r1, #1
    8a6c:	4630      	mov	r0, r6
    8a6e:	4790      	blx	r2
    8a70:	4601      	mov	r1, r0
    8a72:	4620      	mov	r0, r4
    8a74:	f007 ff18 	bl	108a8 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x2e>
    8a78:	2802      	cmp	r0, #2
    8a7a:	d075      	beq.n	8b68 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x248>
    8a7c:	b3e8      	cbz	r0, 8afa <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1da>
    8a7e:	2801      	cmp	r0, #1
    8a80:	d06c      	beq.n	8b5c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x23c>
    8a82:	f240 212a 	movw	r1, #554	; 0x22a
    8a86:	e077      	b.n	8b78 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8a88:	e070      	b.n	8b6c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24c>
    8a8a:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    8a8e:	2805      	cmp	r0, #5
    8a90:	d002      	beq.n	8a98 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x178>
    8a92:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    8a96:	e06f      	b.n	8b78 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8a98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8a9c:	f000 b89e 	b.w	8bdc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2bc>
    8aa0:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    8aa4:	2805      	cmp	r0, #5
    8aa6:	d002      	beq.n	8aae <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x18e>
    8aa8:	f240 11f5 	movw	r1, #501	; 0x1f5
    8aac:	e064      	b.n	8b78 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8aae:	6a22      	ldr	r2, [r4, #32]
    8ab0:	210a      	movs	r1, #10
    8ab2:	4630      	mov	r0, r6
    8ab4:	4790      	blx	r2
    8ab6:	4601      	mov	r1, r0
    8ab8:	4620      	mov	r0, r4
    8aba:	f007 fef5 	bl	108a8 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x2e>
    8abe:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
    8ac2:	e059      	b.n	8b78 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8ac4:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
    8ac8:	2a05      	cmp	r2, #5
    8aca:	d007      	beq.n	8adc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1bc>
    8acc:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    8ad0:	b10b      	cbz	r3, 8ad6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1b6>
    8ad2:	2a03      	cmp	r2, #3
    8ad4:	d002      	beq.n	8adc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1bc>
    8ad6:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
    8ada:	e04d      	b.n	8b78 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8adc:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    8ae0:	b12a      	cbz	r2, 8aee <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1ce>
    8ae2:	4621      	mov	r1, r4
    8ae4:	4630      	mov	r0, r6
    8ae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8aea:	f007 bf72 	b.w	109d2 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x158>
    8aee:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
    8af2:	b19a      	cbz	r2, 8b1c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1fc>
    8af4:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
    8af8:	e001      	b.n	8afe <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1de>
    8afa:	e032      	b.n	8b62 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x242>
    8afc:	e034      	b.n	8b68 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x248>
    8afe:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    8b02:	6a22      	ldr	r2, [r4, #32]
    8b04:	2108      	movs	r1, #8
    8b06:	4630      	mov	r0, r6
    8b08:	4790      	blx	r2
    8b0a:	2800      	cmp	r0, #0
    8b0c:	d037      	beq.n	8b7e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    8b0e:	7800      	ldrb	r0, [r0, #0]
    8b10:	2800      	cmp	r0, #0
    8b12:	d034      	beq.n	8b7e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    8b14:	f44f 7102 	mov.w	r1, #520	; 0x208
    8b18:	e02e      	b.n	8b78 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8b1a:	e030      	b.n	8b7e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    8b1c:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
    8b20:	b15a      	cbz	r2, 8b3a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x21a>
    8b22:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
    8b26:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    8b2a:	4621      	mov	r1, r4
    8b2c:	f007 ff0f 	bl	1094e <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xd4>
    8b30:	2800      	cmp	r0, #0
    8b32:	d124      	bne.n	8b7e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    8b34:	f240 210d 	movw	r1, #525	; 0x20d
    8b38:	e01e      	b.n	8b78 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8b3a:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    8b3e:	6a22      	ldr	r2, [r4, #32]
    8b40:	2107      	movs	r1, #7
    8b42:	4630      	mov	r0, r6
    8b44:	4790      	blx	r2
    8b46:	2800      	cmp	r0, #0
    8b48:	d019      	beq.n	8b7e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    8b4a:	7800      	ldrb	r0, [r0, #0]
    8b4c:	2800      	cmp	r0, #0
    8b4e:	d016      	beq.n	8b7e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    8b50:	f44f 7105 	mov.w	r1, #532	; 0x214
    8b54:	e010      	b.n	8b78 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8b56:	f240 2119 	movw	r1, #537	; 0x219
    8b5a:	e00d      	b.n	8b78 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8b5c:	2104      	movs	r1, #4
    8b5e:	6a22      	ldr	r2, [r4, #32]
    8b60:	e784      	b.n	8a6c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x14c>
    8b62:	2103      	movs	r1, #3
    8b64:	6a22      	ldr	r2, [r4, #32]
    8b66:	e781      	b.n	8a6c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x14c>
    8b68:	2d00      	cmp	r5, #0
    8b6a:	d108      	bne.n	8b7e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    8b6c:	f007 ffe7 	bl	10b3e <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    8b70:	2800      	cmp	r0, #0
    8b72:	d004      	beq.n	8b7e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    8b74:	f240 2133 	movw	r1, #563	; 0x233
    8b78:	206a      	movs	r0, #106	; 0x6a
    8b7a:	f003 fc7d 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8b7e:	bd70      	pop	{r4, r5, r6, pc}
    8b80:	2800      	cmp	r0, #0
    8b82:	d019      	beq.n	8bb8 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x298>
    8b84:	7803      	ldrb	r3, [r0, #0]
    8b86:	4913      	ldr	r1, [pc, #76]	; (8bd4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2b4>)
    8b88:	4a13      	ldr	r2, [pc, #76]	; (8bd8 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2b8>)
    8b8a:	b113      	cbz	r3, 8b92 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x272>
    8b8c:	2b01      	cmp	r3, #1
    8b8e:	d00e      	beq.n	8bae <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x28e>
    8b90:	e011      	b.n	8bb6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    8b92:	7903      	ldrb	r3, [r0, #4]
    8b94:	2b01      	cmp	r3, #1
    8b96:	d000      	beq.n	8b9a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x27a>
    8b98:	b96b      	cbnz	r3, 8bb6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    8b9a:	7943      	ldrb	r3, [r0, #5]
    8b9c:	b10b      	cbz	r3, 8ba2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x282>
    8b9e:	2b01      	cmp	r3, #1
    8ba0:	d109      	bne.n	8bb6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    8ba2:	6883      	ldr	r3, [r0, #8]
    8ba4:	3b64      	subs	r3, #100	; 0x64
    8ba6:	428b      	cmp	r3, r1
    8ba8:	d205      	bcs.n	8bb6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    8baa:	68c0      	ldr	r0, [r0, #12]
    8bac:	e00e      	b.n	8bcc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2ac>
    8bae:	7903      	ldrb	r3, [r0, #4]
    8bb0:	2b01      	cmp	r3, #1
    8bb2:	d002      	beq.n	8bba <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x29a>
    8bb4:	b10b      	cbz	r3, 8bba <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x29a>
    8bb6:	2000      	movs	r0, #0
    8bb8:	4770      	bx	lr
    8bba:	7943      	ldrb	r3, [r0, #5]
    8bbc:	b10b      	cbz	r3, 8bc2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2a2>
    8bbe:	2b01      	cmp	r3, #1
    8bc0:	d1f9      	bne.n	8bb6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    8bc2:	68c3      	ldr	r3, [r0, #12]
    8bc4:	3b64      	subs	r3, #100	; 0x64
    8bc6:	428b      	cmp	r3, r1
    8bc8:	d2f5      	bcs.n	8bb6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    8bca:	6880      	ldr	r0, [r0, #8]
    8bcc:	4290      	cmp	r0, r2
    8bce:	d8f2      	bhi.n	8bb6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    8bd0:	2001      	movs	r0, #1
    8bd2:	4770      	bx	lr
    8bd4:	0001863d 	.word	0x0001863d
    8bd8:	0f423fff 	.word	0x0f423fff
    8bdc:	b510      	push	{r4, lr}
    8bde:	4c05      	ldr	r4, [pc, #20]	; (8bf4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2d4>)
    8be0:	6820      	ldr	r0, [r4, #0]
    8be2:	b110      	cbz	r0, 8bea <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2ca>
    8be4:	4780      	blx	r0
    8be6:	2000      	movs	r0, #0
    8be8:	6020      	str	r0, [r4, #0]
    8bea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8bee:	f002 b943 	b.w	ae78 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    8bf2:	0000      	.short	0x0000
    8bf4:	20000300 	.word	0x20000300

00008bf8 <mpsl_timeslot_session_open>:
    8bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8bfc:	460e      	mov	r6, r1
    8bfe:	0005      	movs	r5, r0
    8c00:	d004      	beq.n	8c0c <mpsl_timeslot_session_open+0x14>
    8c02:	f000 f847 	bl	8c94 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    8c06:	4607      	mov	r7, r0
    8c08:	2400      	movs	r4, #0
    8c0a:	e00b      	b.n	8c24 <mpsl_timeslot_session_open+0x2c>
    8c0c:	f06f 0015 	mvn.w	r0, #21
    8c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8c14:	4620      	mov	r0, r4
    8c16:	f000 f843 	bl	8ca0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    8c1a:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
    8c1e:	b130      	cbz	r0, 8c2e <mpsl_timeslot_session_open+0x36>
    8c20:	1c64      	adds	r4, r4, #1
    8c22:	b2e4      	uxtb	r4, r4
    8c24:	42bc      	cmp	r4, r7
    8c26:	d3f5      	bcc.n	8c14 <mpsl_timeslot_session_open+0x1c>
    8c28:	f06f 000b 	mvn.w	r0, #11
    8c2c:	e7f0      	b.n	8c10 <mpsl_timeslot_session_open+0x18>
    8c2e:	4627      	mov	r7, r4
    8c30:	2cff      	cmp	r4, #255	; 0xff
    8c32:	d0f9      	beq.n	8c28 <mpsl_timeslot_session_open+0x30>
    8c34:	4620      	mov	r0, r4
    8c36:	f000 f833 	bl	8ca0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    8c3a:	4604      	mov	r4, r0
    8c3c:	f007 fee4 	bl	10a08 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x18e>
    8c40:	f884 7028 	strb.w	r7, [r4, #40]	; 0x28
    8c44:	4621      	mov	r1, r4
    8c46:	4808      	ldr	r0, [pc, #32]	; (8c68 <mpsl_timeslot_session_open+0x70>)
    8c48:	f002 f8f2 	bl	ae30 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    8c4c:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    8c50:	2820      	cmp	r0, #32
    8c52:	d006      	beq.n	8c62 <mpsl_timeslot_session_open+0x6a>
    8c54:	2001      	movs	r0, #1
    8c56:	6225      	str	r5, [r4, #32]
    8c58:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    8c5c:	7037      	strb	r7, [r6, #0]
    8c5e:	2000      	movs	r0, #0
    8c60:	e7d6      	b.n	8c10 <mpsl_timeslot_session_open+0x18>
    8c62:	f06f 0022 	mvn.w	r0, #34	; 0x22
    8c66:	e7d3      	b.n	8c10 <mpsl_timeslot_session_open+0x18>
    8c68:	00008961 	.word	0x00008961

00008c6c <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>:
    8c6c:	b510      	push	{r4, lr}
    8c6e:	0782      	lsls	r2, r0, #30
    8c70:	d002      	beq.n	8c78 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0xc>
    8c72:	f06f 000d 	mvn.w	r0, #13
    8c76:	bd10      	pop	{r4, pc}
    8c78:	4a05      	ldr	r2, [pc, #20]	; (8c90 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x24>)
    8c7a:	7011      	strb	r1, [r2, #0]
    8c7c:	6050      	str	r0, [r2, #4]
    8c7e:	b128      	cbz	r0, 8c8c <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x20>
    8c80:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    8c84:	010a      	lsls	r2, r1, #4
    8c86:	2100      	movs	r1, #0
    8c88:	f008 f977 	bl	10f7a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8c8c:	2000      	movs	r0, #0
    8c8e:	bd10      	pop	{r4, pc}
    8c90:	20000304 	.word	0x20000304

00008c94 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    8c94:	4801      	ldr	r0, [pc, #4]	; (8c9c <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    8c96:	7800      	ldrb	r0, [r0, #0]
    8c98:	4770      	bx	lr
    8c9a:	0000      	.short	0x0000
    8c9c:	20000304 	.word	0x20000304

00008ca0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    8ca0:	4905      	ldr	r1, [pc, #20]	; (8cb8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    8ca2:	780a      	ldrb	r2, [r1, #0]
    8ca4:	4290      	cmp	r0, r2
    8ca6:	d301      	bcc.n	8cac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    8ca8:	2000      	movs	r0, #0
    8caa:	4770      	bx	lr
    8cac:	6849      	ldr	r1, [r1, #4]
    8cae:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    8cb2:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    8cb6:	4770      	bx	lr
    8cb8:	20000304 	.word	0x20000304

00008cbc <MPSL_IRQ_RADIO_Handler>:
    8cbc:	490d      	ldr	r1, [pc, #52]	; (8cf4 <MPSL_IRQ_RADIO_Handler+0x38>)
    8cbe:	b510      	push	{r4, lr}
    8cc0:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    8cc4:	2820      	cmp	r0, #32
    8cc6:	d00f      	beq.n	8ce8 <MPSL_IRQ_RADIO_Handler+0x2c>
    8cc8:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    8ccc:	f5a1 6290 	sub.w	r2, r1, #1152	; 0x480
    8cd0:	eb02 1040 	add.w	r0, r2, r0, lsl #5
    8cd4:	f891 1042 	ldrb.w	r1, [r1, #66]	; 0x42
    8cd8:	6840      	ldr	r0, [r0, #4]
    8cda:	eb02 1141 	add.w	r1, r2, r1, lsl #5
    8cde:	680a      	ldr	r2, [r1, #0]
    8ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8ce4:	2104      	movs	r1, #4
    8ce6:	4710      	bx	r2
    8ce8:	f640 017f 	movw	r1, #2175	; 0x87f
    8cec:	2070      	movs	r0, #112	; 0x70
    8cee:	f003 fbc3 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8cf2:	0000      	.short	0x0000
    8cf4:	20001148 	.word	0x20001148
    8cf8:	b570      	push	{r4, r5, r6, lr}
    8cfa:	4605      	mov	r5, r0
    8cfc:	2a20      	cmp	r2, #32
    8cfe:	d028      	beq.n	8d52 <MPSL_IRQ_RADIO_Handler+0x96>
    8d00:	4819      	ldr	r0, [pc, #100]	; (8d68 <MPSL_IRQ_RADIO_Handler+0xac>)
    8d02:	4c1a      	ldr	r4, [pc, #104]	; (8d6c <MPSL_IRQ_RADIO_Handler+0xb0>)
    8d04:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    8d08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8d0c:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    8d10:	4423      	add	r3, r4
    8d12:	2920      	cmp	r1, #32
    8d14:	d022      	beq.n	8d5c <MPSL_IRQ_RADIO_Handler+0xa0>
    8d16:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    8d1a:	7840      	ldrb	r0, [r0, #1]
    8d1c:	784c      	ldrb	r4, [r1, #1]
    8d1e:	7048      	strb	r0, [r1, #1]
    8d20:	4620      	mov	r0, r4
    8d22:	4601      	mov	r1, r0
    8d24:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    8d28:	4291      	cmp	r1, r2
    8d2a:	7005      	strb	r5, [r0, #0]
    8d2c:	7840      	ldrb	r0, [r0, #1]
    8d2e:	d1f8      	bne.n	8d22 <MPSL_IRQ_RADIO_Handler+0x66>
    8d30:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    8d34:	2a20      	cmp	r2, #32
    8d36:	bf1a      	itte	ne
    8d38:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    8d3c:	7054      	strbne	r4, [r2, #1]
    8d3e:	f883 4029 	strbeq.w	r4, [r3, #41]	; 0x29
    8d42:	2220      	movs	r2, #32
    8d44:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    8d48:	f88c 2001 	strb.w	r2, [ip, #1]
    8d4c:	f883 102a 	strb.w	r1, [r3, #42]	; 0x2a
    8d50:	bd70      	pop	{r4, r5, r6, pc}
    8d52:	f240 2186 	movw	r1, #646	; 0x286
    8d56:	2070      	movs	r0, #112	; 0x70
    8d58:	f003 fb8e 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8d5c:	f893 4028 	ldrb.w	r4, [r3, #40]	; 0x28
    8d60:	7840      	ldrb	r0, [r0, #1]
    8d62:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
    8d66:	e7db      	b.n	8d20 <MPSL_IRQ_RADIO_Handler+0x64>
    8d68:	200010c8 	.word	0x200010c8
    8d6c:	20001148 	.word	0x20001148
    8d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8d74:	b08f      	sub	sp, #60	; 0x3c
    8d76:	4615      	mov	r5, r2
    8d78:	461e      	mov	r6, r3
    8d7a:	460c      	mov	r4, r1
    8d7c:	f002 facc 	bl	b318 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    8d80:	1828      	adds	r0, r5, r0
    8d82:	f146 0100 	adc.w	r1, r6, #0
    8d86:	e9cd 1001 	strd	r1, r0, [sp, #4]
    8d8a:	e9d4 2300 	ldrd	r2, r3, [r4]
    8d8e:	1a80      	subs	r0, r0, r2
    8d90:	eb71 0003 	sbcs.w	r0, r1, r3
    8d94:	f0c0 80e5 	bcc.w	8f62 <MPSL_IRQ_RADIO_Handler+0x2a6>
    8d98:	a808      	add	r0, sp, #32
    8d9a:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
    8d9e:	900a      	str	r0, [sp, #40]	; 0x28
    8da0:	48bc      	ldr	r0, [pc, #752]	; (9094 <MPSL_IRQ_RADIO_Handler+0x3d8>)
    8da2:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    8da6:	4408      	add	r0, r1
    8da8:	9009      	str	r0, [sp, #36]	; 0x24
    8daa:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
    8dae:	2020      	movs	r0, #32
    8db0:	f10d 091c 	add.w	r9, sp, #28
    8db4:	f88d 001c 	strb.w	r0, [sp, #28]
    8db8:	2d20      	cmp	r5, #32
    8dba:	d036      	beq.n	8e2a <MPSL_IRQ_RADIO_Handler+0x16e>
    8dbc:	48b6      	ldr	r0, [pc, #728]	; (9098 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    8dbe:	2600      	movs	r6, #0
    8dc0:	eb00 1b8a 	add.w	fp, r0, sl, lsl #6
    8dc4:	48b5      	ldr	r0, [pc, #724]	; (909c <MPSL_IRQ_RADIO_Handler+0x3e0>)
    8dc6:	e9d4 7300 	ldrd	r7, r3, [r4]
    8dca:	eb00 1045 	add.w	r0, r0, r5, lsl #5
    8dce:	f850 8f08 	ldr.w	r8, [r0, #8]!
    8dd2:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
    8dd6:	eb18 0101 	adds.w	r1, r8, r1
    8dda:	4172      	adcs	r2, r6
    8ddc:	1a79      	subs	r1, r7, r1
    8dde:	eb73 0102 	sbcs.w	r1, r3, r2
    8de2:	d322      	bcc.n	8e2a <MPSL_IRQ_RADIO_Handler+0x16e>
    8de4:	89e1      	ldrh	r1, [r4, #14]
    8de6:	b1c9      	cbz	r1, 8e1c <MPSL_IRQ_RADIO_Handler+0x160>
    8de8:	89c0      	ldrh	r0, [r0, #14]
    8dea:	b9b8      	cbnz	r0, 8e1c <MPSL_IRQ_RADIO_Handler+0x160>
    8dec:	f003 f986 	bl	c0fc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8df0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8df4:	bf08      	it	eq
    8df6:	200d      	moveq	r0, #13
    8df8:	d00b      	beq.n	8e12 <MPSL_IRQ_RADIO_Handler+0x156>
    8dfa:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8dfe:	3856      	subs	r0, #86	; 0x56
    8e00:	bf08      	it	eq
    8e02:	201c      	moveq	r0, #28
    8e04:	d005      	beq.n	8e12 <MPSL_IRQ_RADIO_Handler+0x156>
    8e06:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8e0a:	389f      	subs	r0, #159	; 0x9f
    8e0c:	bf14      	ite	ne
    8e0e:	4630      	movne	r0, r6
    8e10:	2032      	moveq	r0, #50	; 0x32
    8e12:	1c40      	adds	r0, r0, #1
    8e14:	ebb7 0108 	subs.w	r1, r7, r8
    8e18:	4281      	cmp	r1, r0
    8e1a:	db06      	blt.n	8e2a <MPSL_IRQ_RADIO_Handler+0x16e>
    8e1c:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    8e20:	f889 5000 	strb.w	r5, [r9]
    8e24:	7845      	ldrb	r5, [r0, #1]
    8e26:	2d20      	cmp	r5, #32
    8e28:	d1cc      	bne.n	8dc4 <MPSL_IRQ_RADIO_Handler+0x108>
    8e2a:	980a      	ldr	r0, [sp, #40]	; 0x28
    8e2c:	f899 1000 	ldrb.w	r1, [r9]
    8e30:	2d20      	cmp	r5, #32
    8e32:	7001      	strb	r1, [r0, #0]
    8e34:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    8e38:	f000 8128 	beq.w	908c <MPSL_IRQ_RADIO_Handler+0x3d0>
    8e3c:	4896      	ldr	r0, [pc, #600]	; (9098 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    8e3e:	4f97      	ldr	r7, [pc, #604]	; (909c <MPSL_IRQ_RADIO_Handler+0x3e0>)
    8e40:	eb00 108a 	add.w	r0, r0, sl, lsl #6
    8e44:	2600      	movs	r6, #0
    8e46:	9004      	str	r0, [sp, #16]
    8e48:	eb07 1a45 	add.w	sl, r7, r5, lsl #5
    8e4c:	f10a 0008 	add.w	r0, sl, #8
    8e50:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    8e54:	f8d4 b000 	ldr.w	fp, [r4]
    8e58:	e9d0 8300 	ldrd	r8, r3, [r0]
    8e5c:	eb1b 0202 	adds.w	r2, fp, r2
    8e60:	4171      	adcs	r1, r6
    8e62:	ebb8 0202 	subs.w	r2, r8, r2
    8e66:	eb73 0101 	sbcs.w	r1, r3, r1
    8e6a:	d320      	bcc.n	8eae <MPSL_IRQ_RADIO_Handler+0x1f2>
    8e6c:	89c0      	ldrh	r0, [r0, #14]
    8e6e:	2800      	cmp	r0, #0
    8e70:	f000 810c 	beq.w	908c <MPSL_IRQ_RADIO_Handler+0x3d0>
    8e74:	89e0      	ldrh	r0, [r4, #14]
    8e76:	2800      	cmp	r0, #0
    8e78:	f040 8108 	bne.w	908c <MPSL_IRQ_RADIO_Handler+0x3d0>
    8e7c:	f003 f93e 	bl	c0fc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8e80:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8e84:	bf08      	it	eq
    8e86:	200d      	moveq	r0, #13
    8e88:	d00b      	beq.n	8ea2 <MPSL_IRQ_RADIO_Handler+0x1e6>
    8e8a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8e8e:	3856      	subs	r0, #86	; 0x56
    8e90:	bf08      	it	eq
    8e92:	201c      	moveq	r0, #28
    8e94:	d005      	beq.n	8ea2 <MPSL_IRQ_RADIO_Handler+0x1e6>
    8e96:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8e9a:	389f      	subs	r0, #159	; 0x9f
    8e9c:	bf14      	ite	ne
    8e9e:	4630      	movne	r0, r6
    8ea0:	2032      	moveq	r0, #50	; 0x32
    8ea2:	1c41      	adds	r1, r0, #1
    8ea4:	ebb8 000b 	subs.w	r0, r8, fp
    8ea8:	4288      	cmp	r0, r1
    8eaa:	f280 80ef 	bge.w	908c <MPSL_IRQ_RADIO_Handler+0x3d0>
    8eae:	f889 5000 	strb.w	r5, [r9]
    8eb2:	f89a 0018 	ldrb.w	r0, [sl, #24]
    8eb6:	7c21      	ldrb	r1, [r4, #16]
    8eb8:	4281      	cmp	r1, r0
    8eba:	d207      	bcs.n	8ecc <MPSL_IRQ_RADIO_Handler+0x210>
    8ebc:	9804      	ldr	r0, [sp, #16]
    8ebe:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    8ec2:	7845      	ldrb	r5, [r0, #1]
    8ec4:	2d20      	cmp	r5, #32
    8ec6:	d1bf      	bne.n	8e48 <MPSL_IRQ_RADIO_Handler+0x18c>
    8ec8:	f000 b8e0 	b.w	908c <MPSL_IRQ_RADIO_Handler+0x3d0>
    8ecc:	f89d 0020 	ldrb.w	r0, [sp, #32]
    8ed0:	eb07 1040 	add.w	r0, r7, r0, lsl #5
    8ed4:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
    8ed8:	f8d0 9008 	ldr.w	r9, [r0, #8]
    8edc:	8ac0      	ldrh	r0, [r0, #22]
    8ede:	eb19 0502 	adds.w	r5, r9, r2
    8ee2:	eb41 0806 	adc.w	r8, r1, r6
    8ee6:	bbb0      	cbnz	r0, 8f56 <MPSL_IRQ_RADIO_Handler+0x29a>
    8ee8:	89e0      	ldrh	r0, [r4, #14]
    8eea:	b3a0      	cbz	r0, 8f56 <MPSL_IRQ_RADIO_Handler+0x29a>
    8eec:	f003 f906 	bl	c0fc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8ef0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8ef4:	bf08      	it	eq
    8ef6:	200d      	moveq	r0, #13
    8ef8:	d00b      	beq.n	8f12 <MPSL_IRQ_RADIO_Handler+0x256>
    8efa:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8efe:	3856      	subs	r0, #86	; 0x56
    8f00:	bf08      	it	eq
    8f02:	201c      	moveq	r0, #28
    8f04:	d005      	beq.n	8f12 <MPSL_IRQ_RADIO_Handler+0x256>
    8f06:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8f0a:	389f      	subs	r0, #159	; 0x9f
    8f0c:	bf14      	ite	ne
    8f0e:	4630      	movne	r0, r6
    8f10:	2032      	moveq	r0, #50	; 0x32
    8f12:	1c41      	adds	r1, r0, #1
    8f14:	ebb5 0009 	subs.w	r0, r5, r9
    8f18:	4288      	cmp	r0, r1
    8f1a:	da1c      	bge.n	8f56 <MPSL_IRQ_RADIO_Handler+0x29a>
    8f1c:	f003 f8ee 	bl	c0fc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8f20:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8f24:	bf08      	it	eq
    8f26:	200d      	moveq	r0, #13
    8f28:	d00b      	beq.n	8f42 <MPSL_IRQ_RADIO_Handler+0x286>
    8f2a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8f2e:	3856      	subs	r0, #86	; 0x56
    8f30:	bf08      	it	eq
    8f32:	201c      	moveq	r0, #28
    8f34:	d005      	beq.n	8f42 <MPSL_IRQ_RADIO_Handler+0x286>
    8f36:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8f3a:	389f      	subs	r0, #159	; 0x9f
    8f3c:	bf14      	ite	ne
    8f3e:	4630      	movne	r0, r6
    8f40:	2032      	moveq	r0, #50	; 0x32
    8f42:	f89d 1020 	ldrb.w	r1, [sp, #32]
    8f46:	1c40      	adds	r0, r0, #1
    8f48:	eb07 1141 	add.w	r1, r7, r1, lsl #5
    8f4c:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    8f50:	1815      	adds	r5, r2, r0
    8f52:	eb43 0806 	adc.w	r8, r3, r6
    8f56:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
    8f5a:	1b49      	subs	r1, r1, r5
    8f5c:	eb70 0008 	sbcs.w	r0, r0, r8
    8f60:	d203      	bcs.n	8f6a <MPSL_IRQ_RADIO_Handler+0x2ae>
    8f62:	b00f      	add	sp, #60	; 0x3c
    8f64:	2000      	movs	r0, #0
    8f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8f6a:	e9c4 5800 	strd	r5, r8, [r4]
    8f6e:	9818      	ldr	r0, [sp, #96]	; 0x60
    8f70:	900b      	str	r0, [sp, #44]	; 0x2c
    8f72:	a808      	add	r0, sp, #32
    8f74:	900a      	str	r0, [sp, #40]	; 0x28
    8f76:	9809      	ldr	r0, [sp, #36]	; 0x24
    8f78:	f10d 0a1c 	add.w	sl, sp, #28
    8f7c:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
    8f80:	2020      	movs	r0, #32
    8f82:	f88d 001c 	strb.w	r0, [sp, #28]
    8f86:	2d20      	cmp	r5, #32
    8f88:	d037      	beq.n	8ffa <MPSL_IRQ_RADIO_Handler+0x33e>
    8f8a:	4843      	ldr	r0, [pc, #268]	; (9098 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    8f8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    8f8e:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
    8f92:	bf00      	nop
    8f94:	eb07 1045 	add.w	r0, r7, r5, lsl #5
    8f98:	e9d4 8300 	ldrd	r8, r3, [r4]
    8f9c:	f850 9f08 	ldr.w	r9, [r0, #8]!
    8fa0:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
    8fa4:	eb19 0202 	adds.w	r2, r9, r2
    8fa8:	4171      	adcs	r1, r6
    8faa:	ebb8 0202 	subs.w	r2, r8, r2
    8fae:	eb73 0101 	sbcs.w	r1, r3, r1
    8fb2:	d322      	bcc.n	8ffa <MPSL_IRQ_RADIO_Handler+0x33e>
    8fb4:	89e1      	ldrh	r1, [r4, #14]
    8fb6:	b1c9      	cbz	r1, 8fec <MPSL_IRQ_RADIO_Handler+0x330>
    8fb8:	89c0      	ldrh	r0, [r0, #14]
    8fba:	b9b8      	cbnz	r0, 8fec <MPSL_IRQ_RADIO_Handler+0x330>
    8fbc:	f003 f89e 	bl	c0fc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8fc0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8fc4:	bf08      	it	eq
    8fc6:	200d      	moveq	r0, #13
    8fc8:	d00b      	beq.n	8fe2 <MPSL_IRQ_RADIO_Handler+0x326>
    8fca:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8fce:	3856      	subs	r0, #86	; 0x56
    8fd0:	bf08      	it	eq
    8fd2:	201c      	moveq	r0, #28
    8fd4:	d005      	beq.n	8fe2 <MPSL_IRQ_RADIO_Handler+0x326>
    8fd6:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8fda:	389f      	subs	r0, #159	; 0x9f
    8fdc:	bf14      	ite	ne
    8fde:	4630      	movne	r0, r6
    8fe0:	2032      	moveq	r0, #50	; 0x32
    8fe2:	1c41      	adds	r1, r0, #1
    8fe4:	ebb8 0009 	subs.w	r0, r8, r9
    8fe8:	4288      	cmp	r0, r1
    8fea:	db06      	blt.n	8ffa <MPSL_IRQ_RADIO_Handler+0x33e>
    8fec:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    8ff0:	f88a 5000 	strb.w	r5, [sl]
    8ff4:	7845      	ldrb	r5, [r0, #1]
    8ff6:	2d20      	cmp	r5, #32
    8ff8:	d1cc      	bne.n	8f94 <MPSL_IRQ_RADIO_Handler+0x2d8>
    8ffa:	980a      	ldr	r0, [sp, #40]	; 0x28
    8ffc:	f89a 1000 	ldrb.w	r1, [sl]
    9000:	2d20      	cmp	r5, #32
    9002:	7001      	strb	r1, [r0, #0]
    9004:	e9dd 800a 	ldrd	r8, r0, [sp, #40]	; 0x28
    9008:	d040      	beq.n	908c <MPSL_IRQ_RADIO_Handler+0x3d0>
    900a:	4923      	ldr	r1, [pc, #140]	; (9098 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    900c:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    9010:	f8cd 000c 	str.w	r0, [sp, #12]
    9014:	eb07 1945 	add.w	r9, r7, r5, lsl #5
    9018:	f109 0008 	add.w	r0, r9, #8
    901c:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    9020:	f8d4 b000 	ldr.w	fp, [r4]
    9024:	e9d0 a300 	ldrd	sl, r3, [r0]
    9028:	eb1b 0202 	adds.w	r2, fp, r2
    902c:	4171      	adcs	r1, r6
    902e:	ebba 0202 	subs.w	r2, sl, r2
    9032:	eb73 0101 	sbcs.w	r1, r3, r1
    9036:	d31b      	bcc.n	9070 <MPSL_IRQ_RADIO_Handler+0x3b4>
    9038:	89c0      	ldrh	r0, [r0, #14]
    903a:	b338      	cbz	r0, 908c <MPSL_IRQ_RADIO_Handler+0x3d0>
    903c:	89e0      	ldrh	r0, [r4, #14]
    903e:	bb28      	cbnz	r0, 908c <MPSL_IRQ_RADIO_Handler+0x3d0>
    9040:	f003 f85c 	bl	c0fc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9044:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9048:	bf08      	it	eq
    904a:	200d      	moveq	r0, #13
    904c:	d00b      	beq.n	9066 <MPSL_IRQ_RADIO_Handler+0x3aa>
    904e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9052:	3856      	subs	r0, #86	; 0x56
    9054:	bf08      	it	eq
    9056:	201c      	moveq	r0, #28
    9058:	d005      	beq.n	9066 <MPSL_IRQ_RADIO_Handler+0x3aa>
    905a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    905e:	389f      	subs	r0, #159	; 0x9f
    9060:	bf14      	ite	ne
    9062:	4630      	movne	r0, r6
    9064:	2032      	moveq	r0, #50	; 0x32
    9066:	1c41      	adds	r1, r0, #1
    9068:	ebba 000b 	subs.w	r0, sl, fp
    906c:	4288      	cmp	r0, r1
    906e:	da0d      	bge.n	908c <MPSL_IRQ_RADIO_Handler+0x3d0>
    9070:	f888 5000 	strb.w	r5, [r8]
    9074:	f899 1018 	ldrb.w	r1, [r9, #24]
    9078:	7c20      	ldrb	r0, [r4, #16]
    907a:	4288      	cmp	r0, r1
    907c:	f4bf af26 	bcs.w	8ecc <MPSL_IRQ_RADIO_Handler+0x210>
    9080:	9803      	ldr	r0, [sp, #12]
    9082:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    9086:	7845      	ldrb	r5, [r0, #1]
    9088:	2d20      	cmp	r5, #32
    908a:	d1c3      	bne.n	9014 <MPSL_IRQ_RADIO_Handler+0x358>
    908c:	b00f      	add	sp, #60	; 0x3c
    908e:	2001      	movs	r0, #1
    9090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9094:	20001148 	.word	0x20001148
    9098:	200010c8 	.word	0x200010c8
    909c:	20000cc8 	.word	0x20000cc8
    90a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    90a4:	b083      	sub	sp, #12
    90a6:	4691      	mov	r9, r2
    90a8:	4604      	mov	r4, r0
    90aa:	460d      	mov	r5, r1
    90ac:	4698      	mov	r8, r3
    90ae:	aa01      	add	r2, sp, #4
    90b0:	4669      	mov	r1, sp
    90b2:	4618      	mov	r0, r3
    90b4:	f002 f94c 	bl	b350 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    90b8:	f002 fe48 	bl	bd4c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    90bc:	f002 f92c 	bl	b318 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    90c0:	4607      	mov	r7, r0
    90c2:	481e      	ldr	r0, [pc, #120]	; (913c <MPSL_IRQ_RADIO_Handler+0x480>)
    90c4:	f890 1042 	ldrb.w	r1, [r0, #66]	; 0x42
    90c8:	2600      	movs	r6, #0
    90ca:	2920      	cmp	r1, #32
    90cc:	d009      	beq.n	90e2 <MPSL_IRQ_RADIO_Handler+0x426>
    90ce:	6882      	ldr	r2, [r0, #8]
    90d0:	68c1      	ldr	r1, [r0, #12]
    90d2:	6900      	ldr	r0, [r0, #16]
    90d4:	1d83      	adds	r3, r0, #6
    90d6:	f146 0000 	adc.w	r0, r6, #0
    90da:	18d4      	adds	r4, r2, r3
    90dc:	eb41 0500 	adc.w	r5, r1, r0
    90e0:	e026      	b.n	9130 <MPSL_IRQ_RADIO_Handler+0x474>
    90e2:	340a      	adds	r4, #10
    90e4:	f145 0500 	adc.w	r5, r5, #0
    90e8:	f1b8 0f00 	cmp.w	r8, #0
    90ec:	d017      	beq.n	911e <MPSL_IRQ_RADIO_Handler+0x462>
    90ee:	f003 f94b 	bl	c388 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    90f2:	b9a0      	cbnz	r0, 911e <MPSL_IRQ_RADIO_Handler+0x462>
    90f4:	f003 f802 	bl	c0fc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    90f8:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    90fc:	bf08      	it	eq
    90fe:	200d      	moveq	r0, #13
    9100:	d00b      	beq.n	911a <MPSL_IRQ_RADIO_Handler+0x45e>
    9102:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9106:	3856      	subs	r0, #86	; 0x56
    9108:	bf08      	it	eq
    910a:	201c      	moveq	r0, #28
    910c:	d005      	beq.n	911a <MPSL_IRQ_RADIO_Handler+0x45e>
    910e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9112:	389f      	subs	r0, #159	; 0x9f
    9114:	bf14      	ite	ne
    9116:	4630      	movne	r0, r6
    9118:	2032      	moveq	r0, #50	; 0x32
    911a:	1904      	adds	r4, r0, r4
    911c:	4175      	adcs	r5, r6
    911e:	f1b9 0f00 	cmp.w	r9, #0
    9122:	d105      	bne.n	9130 <MPSL_IRQ_RADIO_Handler+0x474>
    9124:	9800      	ldr	r0, [sp, #0]
    9126:	4287      	cmp	r7, r0
    9128:	d902      	bls.n	9130 <MPSL_IRQ_RADIO_Handler+0x474>
    912a:	1a38      	subs	r0, r7, r0
    912c:	1904      	adds	r4, r0, r4
    912e:	4175      	adcs	r5, r6
    9130:	b003      	add	sp, #12
    9132:	4620      	mov	r0, r4
    9134:	4629      	mov	r1, r5
    9136:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    913a:	0000      	.short	0x0000
    913c:	20001148 	.word	0x20001148
    9140:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9144:	b081      	sub	sp, #4
    9146:	4605      	mov	r5, r0
    9148:	9802      	ldr	r0, [sp, #8]
    914a:	494a      	ldr	r1, [pc, #296]	; (9274 <MPSL_IRQ_RADIO_Handler+0x5b8>)
    914c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    9150:	4408      	add	r0, r1
    9152:	2600      	movs	r6, #0
    9154:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    9158:	2020      	movs	r0, #32
    915a:	4692      	mov	sl, r2
    915c:	7010      	strb	r0, [r2, #0]
    915e:	f5a1 6990 	sub.w	r9, r1, #1152	; 0x480
    9162:	2c20      	cmp	r4, #32
    9164:	d036      	beq.n	91d4 <MPSL_IRQ_RADIO_Handler+0x518>
    9166:	9902      	ldr	r1, [sp, #8]
    9168:	f509 6080 	add.w	r0, r9, #1024	; 0x400
    916c:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
    9170:	eb09 1044 	add.w	r0, r9, r4, lsl #5
    9174:	e9d5 7300 	ldrd	r7, r3, [r5]
    9178:	f850 8f08 	ldr.w	r8, [r0, #8]!
    917c:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
    9180:	eb18 0202 	adds.w	r2, r8, r2
    9184:	4171      	adcs	r1, r6
    9186:	1aba      	subs	r2, r7, r2
    9188:	eb73 0101 	sbcs.w	r1, r3, r1
    918c:	d322      	bcc.n	91d4 <MPSL_IRQ_RADIO_Handler+0x518>
    918e:	89e9      	ldrh	r1, [r5, #14]
    9190:	b1c9      	cbz	r1, 91c6 <MPSL_IRQ_RADIO_Handler+0x50a>
    9192:	89c0      	ldrh	r0, [r0, #14]
    9194:	b9b8      	cbnz	r0, 91c6 <MPSL_IRQ_RADIO_Handler+0x50a>
    9196:	f002 ffb1 	bl	c0fc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    919a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    919e:	bf08      	it	eq
    91a0:	200d      	moveq	r0, #13
    91a2:	d00b      	beq.n	91bc <MPSL_IRQ_RADIO_Handler+0x500>
    91a4:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    91a8:	3856      	subs	r0, #86	; 0x56
    91aa:	bf08      	it	eq
    91ac:	201c      	moveq	r0, #28
    91ae:	d005      	beq.n	91bc <MPSL_IRQ_RADIO_Handler+0x500>
    91b0:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    91b4:	389f      	subs	r0, #159	; 0x9f
    91b6:	bf14      	ite	ne
    91b8:	4630      	movne	r0, r6
    91ba:	2032      	moveq	r0, #50	; 0x32
    91bc:	1c41      	adds	r1, r0, #1
    91be:	ebb7 0008 	subs.w	r0, r7, r8
    91c2:	4288      	cmp	r0, r1
    91c4:	db06      	blt.n	91d4 <MPSL_IRQ_RADIO_Handler+0x518>
    91c6:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
    91ca:	f88a 4000 	strb.w	r4, [sl]
    91ce:	7844      	ldrb	r4, [r0, #1]
    91d0:	2c20      	cmp	r4, #32
    91d2:	d1cd      	bne.n	9170 <MPSL_IRQ_RADIO_Handler+0x4b4>
    91d4:	9804      	ldr	r0, [sp, #16]
    91d6:	f89a 1000 	ldrb.w	r1, [sl]
    91da:	2c20      	cmp	r4, #32
    91dc:	7001      	strb	r1, [r0, #0]
    91de:	9f04      	ldr	r7, [sp, #16]
    91e0:	9802      	ldr	r0, [sp, #8]
    91e2:	d042      	beq.n	926a <MPSL_IRQ_RADIO_Handler+0x5ae>
    91e4:	4924      	ldr	r1, [pc, #144]	; (9278 <MPSL_IRQ_RADIO_Handler+0x5bc>)
    91e6:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    91ea:	9000      	str	r0, [sp, #0]
    91ec:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
    91f0:	f8d5 b000 	ldr.w	fp, [r5]
    91f4:	eb09 1844 	add.w	r8, r9, r4, lsl #5
    91f8:	f108 0008 	add.w	r0, r8, #8
    91fc:	eb1b 0201 	adds.w	r2, fp, r1
    9200:	eb43 0106 	adc.w	r1, r3, r6
    9204:	e9d0 a300 	ldrd	sl, r3, [r0]
    9208:	ebba 0202 	subs.w	r2, sl, r2
    920c:	eb73 0101 	sbcs.w	r1, r3, r1
    9210:	d31b      	bcc.n	924a <MPSL_IRQ_RADIO_Handler+0x58e>
    9212:	89c0      	ldrh	r0, [r0, #14]
    9214:	b348      	cbz	r0, 926a <MPSL_IRQ_RADIO_Handler+0x5ae>
    9216:	89e8      	ldrh	r0, [r5, #14]
    9218:	bb38      	cbnz	r0, 926a <MPSL_IRQ_RADIO_Handler+0x5ae>
    921a:	f002 ff6f 	bl	c0fc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    921e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9222:	bf08      	it	eq
    9224:	200d      	moveq	r0, #13
    9226:	d00b      	beq.n	9240 <MPSL_IRQ_RADIO_Handler+0x584>
    9228:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    922c:	3856      	subs	r0, #86	; 0x56
    922e:	bf08      	it	eq
    9230:	201c      	moveq	r0, #28
    9232:	d005      	beq.n	9240 <MPSL_IRQ_RADIO_Handler+0x584>
    9234:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9238:	389f      	subs	r0, #159	; 0x9f
    923a:	bf14      	ite	ne
    923c:	4630      	movne	r0, r6
    923e:	2032      	moveq	r0, #50	; 0x32
    9240:	1c41      	adds	r1, r0, #1
    9242:	ebba 000b 	subs.w	r0, sl, fp
    9246:	4288      	cmp	r0, r1
    9248:	da0f      	bge.n	926a <MPSL_IRQ_RADIO_Handler+0x5ae>
    924a:	703c      	strb	r4, [r7, #0]
    924c:	f898 1018 	ldrb.w	r1, [r8, #24]
    9250:	7c28      	ldrb	r0, [r5, #16]
    9252:	4288      	cmp	r0, r1
    9254:	d303      	bcc.n	925e <MPSL_IRQ_RADIO_Handler+0x5a2>
    9256:	b005      	add	sp, #20
    9258:	2000      	movs	r0, #0
    925a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    925e:	9800      	ldr	r0, [sp, #0]
    9260:	eb00 0044 	add.w	r0, r0, r4, lsl #1
    9264:	7844      	ldrb	r4, [r0, #1]
    9266:	2c20      	cmp	r4, #32
    9268:	d1c0      	bne.n	91ec <MPSL_IRQ_RADIO_Handler+0x530>
    926a:	b005      	add	sp, #20
    926c:	2001      	movs	r0, #1
    926e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9272:	0000      	.short	0x0000
    9274:	20001148 	.word	0x20001148
    9278:	200010c8 	.word	0x200010c8
    927c:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9280:	b09c      	sub	sp, #112	; 0x70
    9282:	461f      	mov	r7, r3
    9284:	f002 fab4 	bl	b7f0 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    9288:	4604      	mov	r4, r0
    928a:	460d      	mov	r5, r1
    928c:	f002 fd5e 	bl	bd4c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    9290:	4606      	mov	r6, r0
    9292:	981e      	ldr	r0, [sp, #120]	; 0x78
    9294:	2801      	cmp	r0, #1
    9296:	bf18      	it	ne
    9298:	2802      	cmpne	r0, #2
    929a:	d005      	beq.n	92a8 <MPSL_IRQ_RADIO_Handler+0x5ec>
    929c:	f640 1156 	movw	r1, #2390	; 0x956
    92a0:	f04f 0070 	mov.w	r0, #112	; 0x70
    92a4:	f003 f8e8 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    92a8:	49fe      	ldr	r1, [pc, #1016]	; (96a4 <MPSL_IRQ_RADIO_Handler+0x9e8>)
    92aa:	2001      	movs	r0, #1
    92ac:	6008      	str	r0, [r1, #0]
    92ae:	49fe      	ldr	r1, [pc, #1016]	; (96a8 <MPSL_IRQ_RADIO_Handler+0x9ec>)
    92b0:	6889      	ldr	r1, [r1, #8]
    92b2:	6008      	str	r0, [r1, #0]
    92b4:	2000      	movs	r0, #0
    92b6:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
    92ba:	900c      	str	r0, [sp, #48]	; 0x30
    92bc:	1e40      	subs	r0, r0, #1
    92be:	900d      	str	r0, [sp, #52]	; 0x34
    92c0:	48fa      	ldr	r0, [pc, #1000]	; (96ac <MPSL_IRQ_RADIO_Handler+0x9f0>)
    92c2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    92c6:	eb00 1047 	add.w	r0, r0, r7, lsl #5
    92ca:	f100 0108 	add.w	r1, r0, #8
    92ce:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    92d2:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    92d6:	e9d0 1006 	ldrd	r1, r0, [r0, #24]
    92da:	e9cd 1012 	strd	r1, r0, [sp, #72]	; 0x48
    92de:	980e      	ldr	r0, [sp, #56]	; 0x38
    92e0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    92e4:	f007 fc3f 	bl	10b66 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    92e8:	4602      	mov	r2, r0
    92ea:	f8bd 8046 	ldrh.w	r8, [sp, #70]	; 0x46
    92ee:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    92f2:	4bef      	ldr	r3, [pc, #956]	; (96b0 <MPSL_IRQ_RADIO_Handler+0x9f4>)
    92f4:	4440      	add	r0, r8
    92f6:	1c41      	adds	r1, r0, #1
    92f8:	1850      	adds	r0, r2, r1
    92fa:	429a      	cmp	r2, r3
    92fc:	d856      	bhi.n	93ac <MPSL_IRQ_RADIO_Handler+0x6f0>
    92fe:	4aed      	ldr	r2, [pc, #948]	; (96b4 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    9300:	4291      	cmp	r1, r2
    9302:	dc5b      	bgt.n	93bc <MPSL_IRQ_RADIO_Handler+0x700>
    9304:	4252      	negs	r2, r2
    9306:	4291      	cmp	r1, r2
    9308:	db60      	blt.n	93cc <MPSL_IRQ_RADIO_Handler+0x710>
    930a:	1c59      	adds	r1, r3, #1
    930c:	4281      	cmp	r1, r0
    930e:	bfdc      	itt	le
    9310:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    9314:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    9318:	dd05      	ble.n	9326 <MPSL_IRQ_RADIO_Handler+0x66a>
    931a:	2800      	cmp	r0, #0
    931c:	bfbc      	itt	lt
    931e:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    9322:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    9326:	9017      	str	r0, [sp, #92]	; 0x5c
    9328:	48e3      	ldr	r0, [pc, #908]	; (96b8 <MPSL_IRQ_RADIO_Handler+0x9fc>)
    932a:	f1b8 0f00 	cmp.w	r8, #0
    932e:	f8b0 00a0 	ldrh.w	r0, [r0, #160]	; 0xa0
    9332:	f8ad 0050 	strh.w	r0, [sp, #80]	; 0x50
    9336:	bf14      	ite	ne
    9338:	f04f 0a01 	movne.w	sl, #1
    933c:	f04f 0a00 	moveq.w	sl, #0
    9340:	f003 f822 	bl	c388 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    9344:	9019      	str	r0, [sp, #100]	; 0x64
    9346:	f1ba 0f00 	cmp.w	sl, #0
    934a:	d00b      	beq.n	9364 <MPSL_IRQ_RADIO_Handler+0x6a8>
    934c:	49db      	ldr	r1, [pc, #876]	; (96bc <MPSL_IRQ_RADIO_Handler+0xa00>)
    934e:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
    9352:	ea6f 0200 	mvn.w	r2, r0
    9356:	ea72 0001 	orns	r0, r2, r1
    935a:	bf02      	ittt	eq
    935c:	9819      	ldreq	r0, [sp, #100]	; 0x64
    935e:	2800      	cmpeq	r0, #0
    9360:	2701      	moveq	r7, #1
    9362:	d001      	beq.n	9368 <MPSL_IRQ_RADIO_Handler+0x6ac>
    9364:	f04f 0700 	mov.w	r7, #0
    9368:	f002 fec8 	bl	c0fc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    936c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9370:	bf08      	it	eq
    9372:	200d      	moveq	r0, #13
    9374:	d00b      	beq.n	938e <MPSL_IRQ_RADIO_Handler+0x6d2>
    9376:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    937a:	3856      	subs	r0, #86	; 0x56
    937c:	bf08      	it	eq
    937e:	201c      	moveq	r0, #28
    9380:	d005      	beq.n	938e <MPSL_IRQ_RADIO_Handler+0x6d2>
    9382:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9386:	389f      	subs	r0, #159	; 0x9f
    9388:	bf14      	ite	ne
    938a:	2000      	movne	r0, #0
    938c:	2032      	moveq	r0, #50	; 0x32
    938e:	f04f 0900 	mov.w	r9, #0
    9392:	46cb      	mov	fp, r9
    9394:	9016      	str	r0, [sp, #88]	; 0x58
    9396:	4546      	cmp	r6, r8
    9398:	d936      	bls.n	9408 <MPSL_IRQ_RADIO_Handler+0x74c>
    939a:	9917      	ldr	r1, [sp, #92]	; 0x5c
    939c:	43f3      	mvns	r3, r6
    939e:	f8df c310 	ldr.w	ip, [pc, #784]	; 96b0 <MPSL_IRQ_RADIO_Handler+0x9f4>
    93a2:	18c8      	adds	r0, r1, r3
    93a4:	46e9      	mov	r9, sp
    93a6:	aa1a      	add	r2, sp, #104	; 0x68
    93a8:	4561      	cmp	r1, ip
    93aa:	d904      	bls.n	93b6 <MPSL_IRQ_RADIO_Handler+0x6fa>
    93ac:	f240 517f 	movw	r1, #1407	; 0x57f
    93b0:	2070      	movs	r0, #112	; 0x70
    93b2:	f003 f861 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    93b6:	49bf      	ldr	r1, [pc, #764]	; (96b4 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    93b8:	428b      	cmp	r3, r1
    93ba:	dd04      	ble.n	93c6 <MPSL_IRQ_RADIO_Handler+0x70a>
    93bc:	f44f 61b0 	mov.w	r1, #1408	; 0x580
    93c0:	2070      	movs	r0, #112	; 0x70
    93c2:	f003 f859 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    93c6:	49be      	ldr	r1, [pc, #760]	; (96c0 <MPSL_IRQ_RADIO_Handler+0xa04>)
    93c8:	428b      	cmp	r3, r1
    93ca:	da04      	bge.n	93d6 <MPSL_IRQ_RADIO_Handler+0x71a>
    93cc:	f240 5181 	movw	r1, #1409	; 0x581
    93d0:	2070      	movs	r0, #112	; 0x70
    93d2:	f003 f851 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    93d6:	49bb      	ldr	r1, [pc, #748]	; (96c4 <MPSL_IRQ_RADIO_Handler+0xa08>)
    93d8:	4281      	cmp	r1, r0
    93da:	bfdc      	itt	le
    93dc:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    93e0:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    93e4:	dd05      	ble.n	93f2 <MPSL_IRQ_RADIO_Handler+0x736>
    93e6:	2800      	cmp	r0, #0
    93e8:	bfbc      	itt	lt
    93ea:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    93ee:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    93f2:	4649      	mov	r1, r9
    93f4:	f001 ffac 	bl	b350 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    93f8:	9800      	ldr	r0, [sp, #0]
    93fa:	990e      	ldr	r1, [sp, #56]	; 0x38
    93fc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9400:	9000      	str	r0, [sp, #0]
    9402:	1a08      	subs	r0, r1, r0
    9404:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
    9408:	2f00      	cmp	r7, #0
    940a:	bf18      	it	ne
    940c:	f8dd b058 	ldrne.w	fp, [sp, #88]	; 0x58
    9410:	d105      	bne.n	941e <MPSL_IRQ_RADIO_Handler+0x762>
    9412:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    9416:	2800      	cmp	r0, #0
    9418:	bf18      	it	ne
    941a:	f04f 0b02 	movne.w	fp, #2
    941e:	43e0      	mvns	r0, r4
    9420:	ea70 0005 	orns	r0, r0, r5
    9424:	d022      	beq.n	946c <MPSL_IRQ_RADIO_Handler+0x7b0>
    9426:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    942a:	1a22      	subs	r2, r4, r0
    942c:	eb75 0201 	sbcs.w	r2, r5, r1
    9430:	d20c      	bcs.n	944c <MPSL_IRQ_RADIO_Handler+0x790>
    9432:	1b02      	subs	r2, r0, r4
    9434:	eb61 0105 	sbc.w	r1, r1, r5
    9438:	f5b2 0200 	subs.w	r2, r2, #8388608	; 0x800000
    943c:	f171 0100 	sbcs.w	r1, r1, #0
    9440:	d311      	bcc.n	9466 <MPSL_IRQ_RADIO_Handler+0x7aa>
    9442:	f640 1195 	movw	r1, #2453	; 0x995
    9446:	2070      	movs	r0, #112	; 0x70
    9448:	f003 f816 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    944c:	1a22      	subs	r2, r4, r0
    944e:	eb65 0101 	sbc.w	r1, r5, r1
    9452:	f5b2 0200 	subs.w	r2, r2, #8388608	; 0x800000
    9456:	f171 0100 	sbcs.w	r1, r1, #0
    945a:	d304      	bcc.n	9466 <MPSL_IRQ_RADIO_Handler+0x7aa>
    945c:	f640 1199 	movw	r1, #2457	; 0x999
    9460:	2070      	movs	r0, #112	; 0x70
    9462:	f003 f809 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9466:	1b00      	subs	r0, r0, r4
    9468:	2801      	cmp	r0, #1
    946a:	da03      	bge.n	9474 <MPSL_IRQ_RADIO_Handler+0x7b8>
    946c:	981c      	ldr	r0, [sp, #112]	; 0x70
    946e:	901a      	str	r0, [sp, #104]	; 0x68
    9470:	2003      	movs	r0, #3
    9472:	e00d      	b.n	9490 <MPSL_IRQ_RADIO_Handler+0x7d4>
    9474:	b157      	cbz	r7, 948c <MPSL_IRQ_RADIO_Handler+0x7d0>
    9476:	4891      	ldr	r0, [pc, #580]	; (96bc <MPSL_IRQ_RADIO_Handler+0xa00>)
    9478:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    947c:	b130      	cbz	r0, 948c <MPSL_IRQ_RADIO_Handler+0x7d0>
    947e:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    9482:	f110 0b00 	adds.w	fp, r0, #0
    9486:	bf18      	it	ne
    9488:	f04f 0b02 	movne.w	fp, #2
    948c:	2000      	movs	r0, #0
    948e:	941a      	str	r4, [sp, #104]	; 0x68
    9490:	4483      	add	fp, r0
    9492:	e9dd 020e 	ldrd	r0, r2, [sp, #56]	; 0x38
    9496:	ebb0 0009 	subs.w	r0, r0, r9
    949a:	f162 0100 	sbc.w	r1, r2, #0
    949e:	1e42      	subs	r2, r0, #1
    94a0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    94a2:	f141 3eff 	adc.w	lr, r1, #4294967295
    94a6:	1ad3      	subs	r3, r2, r3
    94a8:	455b      	cmp	r3, fp
    94aa:	db08      	blt.n	94be <MPSL_IRQ_RADIO_Handler+0x802>
    94ac:	f1b9 0f00 	cmp.w	r9, #0
    94b0:	d032      	beq.n	9518 <MPSL_IRQ_RADIO_Handler+0x85c>
    94b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    94b4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    94b8:	444b      	add	r3, r9
    94ba:	9310      	str	r3, [sp, #64]	; 0x40
    94bc:	e02c      	b.n	9518 <MPSL_IRQ_RADIO_Handler+0x85c>
    94be:	f1b9 0f00 	cmp.w	r9, #0
    94c2:	d005      	beq.n	94d0 <MPSL_IRQ_RADIO_Handler+0x814>
    94c4:	f89d 0051 	ldrb.w	r0, [sp, #81]	; 0x51
    94c8:	b920      	cbnz	r0, 94d4 <MPSL_IRQ_RADIO_Handler+0x818>
    94ca:	f002 fc35 	bl	bd38 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    94ce:	b108      	cbz	r0, 94d4 <MPSL_IRQ_RADIO_Handler+0x818>
    94d0:	b9af      	cbnz	r7, 94fe <MPSL_IRQ_RADIO_Handler+0x842>
    94d2:	e00c      	b.n	94ee <MPSL_IRQ_RADIO_Handler+0x832>
    94d4:	b92f      	cbnz	r7, 94e2 <MPSL_IRQ_RADIO_Handler+0x826>
    94d6:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    94da:	2800      	cmp	r0, #0
    94dc:	bf18      	it	ne
    94de:	f1ab 0b02 	subne.w	fp, fp, #2
    94e2:	f04f 0900 	mov.w	r9, #0
    94e6:	f88d 9050 	strb.w	r9, [sp, #80]	; 0x50
    94ea:	464e      	mov	r6, r9
    94ec:	e007      	b.n	94fe <MPSL_IRQ_RADIO_Handler+0x842>
    94ee:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    94f2:	b120      	cbz	r0, 94fe <MPSL_IRQ_RADIO_Handler+0x842>
    94f4:	2000      	movs	r0, #0
    94f6:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    94fa:	f1ab 0b02 	sub.w	fp, fp, #2
    94fe:	e9dd 020e 	ldrd	r0, r2, [sp, #56]	; 0x38
    9502:	ebb0 0009 	subs.w	r0, r0, r9
    9506:	f162 0100 	sbc.w	r1, r2, #0
    950a:	1e42      	subs	r2, r0, #1
    950c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    950e:	f141 3eff 	adc.w	lr, r1, #4294967295
    9512:	1ad3      	subs	r3, r2, r3
    9514:	455b      	cmp	r3, fp
    9516:	db7d      	blt.n	9614 <MPSL_IRQ_RADIO_Handler+0x958>
    9518:	9b19      	ldr	r3, [sp, #100]	; 0x64
    951a:	b99b      	cbnz	r3, 9544 <MPSL_IRQ_RADIO_Handler+0x888>
    951c:	4b67      	ldr	r3, [pc, #412]	; (96bc <MPSL_IRQ_RADIO_Handler+0xa00>)
    951e:	e9d3 c30e 	ldrd	ip, r3, [r3, #56]	; 0x38
    9522:	ea6f 090c 	mvn.w	r9, ip
    9526:	ea79 0903 	orns	r9, r9, r3
    952a:	d00b      	beq.n	9544 <MPSL_IRQ_RADIO_Handler+0x888>
    952c:	ebb0 0c0c 	subs.w	ip, r0, ip
    9530:	9816      	ldr	r0, [sp, #88]	; 0x58
    9532:	eb61 0303 	sbc.w	r3, r1, r3
    9536:	ebbc 0000 	subs.w	r0, ip, r0
    953a:	f173 0000 	sbcs.w	r0, r3, #0
    953e:	bf38      	it	cc
    9540:	2000      	movcc	r0, #0
    9542:	d300      	bcc.n	9546 <MPSL_IRQ_RADIO_Handler+0x88a>
    9544:	2001      	movs	r0, #1
    9546:	ea3a 0000 	bics.w	r0, sl, r0
    954a:	d163      	bne.n	9614 <MPSL_IRQ_RADIO_Handler+0x958>
    954c:	e9dd 101c 	ldrd	r1, r0, [sp, #112]	; 0x70
    9550:	e9cd 0107 	strd	r0, r1, [sp, #28]
    9554:	981e      	ldr	r0, [sp, #120]	; 0x78
    9556:	4691      	mov	r9, r2
    9558:	e9cd 7018 	strd	r7, r0, [sp, #96]	; 0x60
    955c:	46f3      	mov	fp, lr
    955e:	2700      	movs	r7, #0
    9560:	f002 fdcc 	bl	c0fc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9564:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9568:	bf08      	it	eq
    956a:	200d      	moveq	r0, #13
    956c:	d00b      	beq.n	9586 <MPSL_IRQ_RADIO_Handler+0x8ca>
    956e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9572:	3856      	subs	r0, #86	; 0x56
    9574:	bf08      	it	eq
    9576:	201c      	moveq	r0, #28
    9578:	d005      	beq.n	9586 <MPSL_IRQ_RADIO_Handler+0x8ca>
    957a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    957e:	389f      	subs	r0, #159	; 0x9f
    9580:	bf14      	ite	ne
    9582:	4638      	movne	r0, r7
    9584:	2032      	moveq	r0, #50	; 0x32
    9586:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
    958a:	300b      	adds	r0, #11
    958c:	ebb9 0202 	subs.w	r2, r9, r2
    9590:	eb6b 0303 	sbc.w	r3, fp, r3
    9594:	1a10      	subs	r0, r2, r0
    9596:	f173 0000 	sbcs.w	r0, r3, #0
    959a:	d22a      	bcs.n	95f2 <MPSL_IRQ_RADIO_Handler+0x936>
    959c:	9819      	ldr	r0, [sp, #100]	; 0x64
    959e:	2801      	cmp	r0, #1
    95a0:	d002      	beq.n	95a8 <MPSL_IRQ_RADIO_Handler+0x8ec>
    95a2:	9818      	ldr	r0, [sp, #96]	; 0x60
    95a4:	b148      	cbz	r0, 95ba <MPSL_IRQ_RADIO_Handler+0x8fe>
    95a6:	e017      	b.n	95d8 <MPSL_IRQ_RADIO_Handler+0x91c>
    95a8:	43e0      	mvns	r0, r4
    95aa:	ea70 0005 	orns	r0, r0, r5
    95ae:	d127      	bne.n	9600 <MPSL_IRQ_RADIO_Handler+0x944>
    95b0:	f640 01d7 	movw	r1, #2263	; 0x8d7
    95b4:	2070      	movs	r0, #112	; 0x70
    95b6:	f002 ff5f 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    95ba:	43e0      	mvns	r0, r4
    95bc:	ea70 0005 	orns	r0, r0, r5
    95c0:	d00a      	beq.n	95d8 <MPSL_IRQ_RADIO_Handler+0x91c>
    95c2:	d01d      	beq.n	9600 <MPSL_IRQ_RADIO_Handler+0x944>
    95c4:	ebb4 0009 	subs.w	r0, r4, r9
    95c8:	eb65 010b 	sbc.w	r1, r5, fp
    95cc:	2300      	movs	r3, #0
    95ce:	f1d0 0204 	rsbs	r2, r0, #4
    95d2:	eb73 0201 	sbcs.w	r2, r3, r1
    95d6:	da06      	bge.n	95e6 <MPSL_IRQ_RADIO_Handler+0x92a>
    95d8:	464c      	mov	r4, r9
    95da:	465d      	mov	r5, fp
    95dc:	4620      	mov	r0, r4
    95de:	4629      	mov	r1, r5
    95e0:	f001 ffe6 	bl	b5b0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    95e4:	e00c      	b.n	9600 <MPSL_IRQ_RADIO_Handler+0x944>
    95e6:	2200      	movs	r2, #0
    95e8:	1a10      	subs	r0, r2, r0
    95ea:	eb72 0001 	sbcs.w	r0, r2, r1
    95ee:	db11      	blt.n	9614 <MPSL_IRQ_RADIO_Handler+0x958>
    95f0:	e006      	b.n	9600 <MPSL_IRQ_RADIO_Handler+0x944>
    95f2:	464c      	mov	r4, r9
    95f4:	465d      	mov	r5, fp
    95f6:	4620      	mov	r0, r4
    95f8:	4629      	mov	r1, r5
    95fa:	f001 ffd9 	bl	b5b0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    95fe:	4657      	mov	r7, sl
    9600:	43e1      	mvns	r1, r4
    9602:	ea71 0005 	orns	r0, r1, r5
    9606:	d071      	beq.n	96ec <MPSL_IRQ_RADIO_Handler+0xa30>
    9608:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    960c:	f04f 0b00 	mov.w	fp, #0
    9610:	990e      	ldr	r1, [sp, #56]	; 0x38
    9612:	e000      	b.n	9616 <MPSL_IRQ_RADIO_Handler+0x95a>
    9614:	e06f      	b.n	96f6 <MPSL_IRQ_RADIO_Handler+0xa3a>
    9616:	1a0b      	subs	r3, r1, r0
    9618:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    961c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    9620:	eb11 010c 	adds.w	r1, r1, ip
    9624:	1a08      	subs	r0, r1, r0
    9626:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    962a:	2b01      	cmp	r3, #1
    962c:	d363      	bcc.n	96f6 <MPSL_IRQ_RADIO_Handler+0xa3a>
    962e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    9632:	bf98      	it	ls
    9634:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    9638:	d85d      	bhi.n	96f6 <MPSL_IRQ_RADIO_Handler+0xa3a>
    963a:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    963e:	f007 fa92 	bl	10b66 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    9642:	9917      	ldr	r1, [sp, #92]	; 0x5c
    9644:	4a1b      	ldr	r2, [pc, #108]	; (96b4 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    9646:	1a0d      	subs	r5, r1, r0
    9648:	1aaa      	subs	r2, r5, r2
    964a:	f17b 0200 	sbcs.w	r2, fp, #0
    964e:	d316      	bcc.n	967e <MPSL_IRQ_RADIO_Handler+0x9c2>
    9650:	4b18      	ldr	r3, [pc, #96]	; (96b4 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    9652:	1a42      	subs	r2, r0, r1
    9654:	1ad3      	subs	r3, r2, r3
    9656:	f17b 0300 	sbcs.w	r3, fp, #0
    965a:	d310      	bcc.n	967e <MPSL_IRQ_RADIO_Handler+0x9c2>
    965c:	4b14      	ldr	r3, [pc, #80]	; (96b0 <MPSL_IRQ_RADIO_Handler+0x9f4>)
    965e:	42ab      	cmp	r3, r5
    9660:	bf3e      	ittt	cc
    9662:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    9666:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    966a:	1845      	addcc	r5, r0, r1
    966c:	d307      	bcc.n	967e <MPSL_IRQ_RADIO_Handler+0x9c2>
    966e:	4293      	cmp	r3, r2
    9670:	d245      	bcs.n	96fe <MPSL_IRQ_RADIO_Handler+0xa42>
    9672:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    9676:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    967a:	4408      	add	r0, r1
    967c:	4245      	negs	r5, r0
    967e:	f8df 903c 	ldr.w	r9, [pc, #60]	; 96bc <MPSL_IRQ_RADIO_Handler+0xa00>
    9682:	f899 0022 	ldrb.w	r0, [r9, #34]	; 0x22
    9686:	b378      	cbz	r0, 96e8 <MPSL_IRQ_RADIO_Handler+0xa2c>
    9688:	981e      	ldr	r0, [sp, #120]	; 0x78
    968a:	2801      	cmp	r0, #1
    968c:	d005      	beq.n	969a <MPSL_IRQ_RADIO_Handler+0x9de>
    968e:	2002      	movs	r0, #2
    9690:	f002 fa1a 	bl	bac8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9694:	2001      	movs	r0, #1
    9696:	f002 fa17 	bl	bac8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    969a:	45b0      	cmp	r8, r6
    969c:	d240      	bcs.n	9720 <MPSL_IRQ_RADIO_Handler+0xa64>
    969e:	eba5 0106 	sub.w	r1, r5, r6
    96a2:	e011      	b.n	96c8 <MPSL_IRQ_RADIO_Handler+0xa0c>
    96a4:	40000508 	.word	0x40000508
    96a8:	2000030c 	.word	0x2000030c
    96ac:	20000cc8 	.word	0x20000cc8
    96b0:	1e847fff 	.word	0x1e847fff
    96b4:	0f424000 	.word	0x0f424000
    96b8:	200010c8 	.word	0x200010c8
    96bc:	20001148 	.word	0x20001148
    96c0:	f0bdc000 	.word	0xf0bdc000
    96c4:	1e848000 	.word	0x1e848000
    96c8:	f04f 0002 	mov.w	r0, #2
    96cc:	f002 f942 	bl	b954 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    96d0:	b398      	cbz	r0, 973a <MPSL_IRQ_RADIO_Handler+0xa7e>
    96d2:	f1b8 0f00 	cmp.w	r8, #0
    96d6:	bf1c      	itt	ne
    96d8:	eba5 0108 	subne.w	r1, r5, r8
    96dc:	2001      	movne	r0, #1
    96de:	d035      	beq.n	974c <MPSL_IRQ_RADIO_Handler+0xa90>
    96e0:	f002 f938 	bl	b954 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    96e4:	b348      	cbz	r0, 973a <MPSL_IRQ_RADIO_Handler+0xa7e>
    96e6:	e031      	b.n	974c <MPSL_IRQ_RADIO_Handler+0xa90>
    96e8:	e00e      	b.n	9708 <MPSL_IRQ_RADIO_Handler+0xa4c>
    96ea:	e7ff      	b.n	96ec <MPSL_IRQ_RADIO_Handler+0xa30>
    96ec:	f640 2103 	movw	r1, #2563	; 0xa03
    96f0:	2070      	movs	r0, #112	; 0x70
    96f2:	f002 fec1 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    96f6:	b020      	add	sp, #128	; 0x80
    96f8:	2000      	movs	r0, #0
    96fa:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    96fe:	f640 21d7 	movw	r1, #2775	; 0xad7
    9702:	2070      	movs	r0, #112	; 0x70
    9704:	f002 feb8 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9708:	45b0      	cmp	r8, r6
    970a:	bf34      	ite	cc
    970c:	4630      	movcc	r0, r6
    970e:	4640      	movcs	r0, r8
    9710:	301e      	adds	r0, #30
    9712:	42a8      	cmp	r0, r5
    9714:	dbb8      	blt.n	9688 <MPSL_IRQ_RADIO_Handler+0x9cc>
    9716:	f640 2117 	movw	r1, #2583	; 0xa17
    971a:	2070      	movs	r0, #112	; 0x70
    971c:	f002 feac 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9720:	d90c      	bls.n	973c <MPSL_IRQ_RADIO_Handler+0xa80>
    9722:	eba5 0108 	sub.w	r1, r5, r8
    9726:	2001      	movs	r0, #1
    9728:	f002 f914 	bl	b954 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    972c:	b128      	cbz	r0, 973a <MPSL_IRQ_RADIO_Handler+0xa7e>
    972e:	2e00      	cmp	r6, #0
    9730:	bf1c      	itt	ne
    9732:	1ba9      	subne	r1, r5, r6
    9734:	2002      	movne	r0, #2
    9736:	d009      	beq.n	974c <MPSL_IRQ_RADIO_Handler+0xa90>
    9738:	e7d2      	b.n	96e0 <MPSL_IRQ_RADIO_Handler+0xa24>
    973a:	e034      	b.n	97a6 <MPSL_IRQ_RADIO_Handler+0xaea>
    973c:	ea56 0008 	orrs.w	r0, r6, r8
    9740:	d004      	beq.n	974c <MPSL_IRQ_RADIO_Handler+0xa90>
    9742:	f640 113a 	movw	r1, #2362	; 0x93a
    9746:	2070      	movs	r0, #112	; 0x70
    9748:	f002 fe96 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    974c:	4629      	mov	r1, r5
    974e:	2000      	movs	r0, #0
    9750:	f002 f900 	bl	b954 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9754:	b338      	cbz	r0, 97a6 <MPSL_IRQ_RADIO_Handler+0xaea>
    9756:	2601      	movs	r6, #1
    9758:	f1ba 0f00 	cmp.w	sl, #0
    975c:	bf04      	itt	eq
    975e:	f899 0040 	ldrbeq.w	r0, [r9, #64]	; 0x40
    9762:	2800      	cmpeq	r0, #0
    9764:	d000      	beq.n	9768 <MPSL_IRQ_RADIO_Handler+0xaac>
    9766:	b347      	cbz	r7, 97ba <MPSL_IRQ_RADIO_Handler+0xafe>
    9768:	e9d9 100e 	ldrd	r1, r0, [r9, #56]	; 0x38
    976c:	ea6f 0101 	mvn.w	r1, r1
    9770:	ea71 0000 	orns	r0, r1, r0
    9774:	d006      	beq.n	9784 <MPSL_IRQ_RADIO_Handler+0xac8>
    9776:	f002 fcc7 	bl	c108 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    977a:	f04f 30ff 	mov.w	r0, #4294967295
    977e:	4601      	mov	r1, r0
    9780:	e9c9 010e 	strd	r0, r1, [r9, #56]	; 0x38
    9784:	b1ff      	cbz	r7, 97c6 <MPSL_IRQ_RADIO_Handler+0xb0a>
    9786:	9816      	ldr	r0, [sp, #88]	; 0x58
    9788:	1a20      	subs	r0, r4, r0
    978a:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    978e:	f04f 0005 	mov.w	r0, #5
    9792:	f002 f8df 	bl	b954 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9796:	b370      	cbz	r0, 97f6 <MPSL_IRQ_RADIO_Handler+0xb3a>
    9798:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
    979c:	2800      	cmp	r0, #0
    979e:	bf08      	it	eq
    97a0:	f889 6040 	strbeq.w	r6, [r9, #64]	; 0x40
    97a4:	e017      	b.n	97d6 <MPSL_IRQ_RADIO_Handler+0xb1a>
    97a6:	2002      	movs	r0, #2
    97a8:	f002 f98e 	bl	bac8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    97ac:	2001      	movs	r0, #1
    97ae:	f002 f98b 	bl	bac8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    97b2:	b020      	add	sp, #128	; 0x80
    97b4:	2000      	movs	r0, #0
    97b6:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    97ba:	e9d9 010e 	ldrd	r0, r1, [r9, #56]	; 0x38
    97be:	43c0      	mvns	r0, r0
    97c0:	ea70 0001 	orns	r0, r0, r1
    97c4:	d012      	beq.n	97ec <MPSL_IRQ_RADIO_Handler+0xb30>
    97c6:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
    97ca:	b120      	cbz	r0, 97d6 <MPSL_IRQ_RADIO_Handler+0xb1a>
    97cc:	2005      	movs	r0, #5
    97ce:	f002 f97b 	bl	bac8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    97d2:	f889 b040 	strb.w	fp, [r9, #64]	; 0x40
    97d6:	eba5 0008 	sub.w	r0, r5, r8
    97da:	f1a0 0119 	sub.w	r1, r0, #25
    97de:	2900      	cmp	r1, #0
    97e0:	dc0f      	bgt.n	9802 <MPSL_IRQ_RADIO_Handler+0xb46>
    97e2:	f44f 6124 	mov.w	r1, #2624	; 0xa40
    97e6:	2070      	movs	r0, #112	; 0x70
    97e8:	f002 fe46 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    97ec:	f002 fca8 	bl	c140 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    97f0:	f002 f88e 	bl	b910 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    97f4:	e7c4      	b.n	9780 <MPSL_IRQ_RADIO_Handler+0xac4>
    97f6:	e7ff      	b.n	97f8 <MPSL_IRQ_RADIO_Handler+0xb3c>
    97f8:	f240 21e6 	movw	r1, #742	; 0x2e6
    97fc:	2070      	movs	r0, #112	; 0x70
    97fe:	f002 fe3b 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9802:	2003      	movs	r0, #3
    9804:	f002 f8a6 	bl	b954 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9808:	b338      	cbz	r0, 985a <MPSL_IRQ_RADIO_Handler+0xb9e>
    980a:	4816      	ldr	r0, [pc, #88]	; (9864 <MPSL_IRQ_RADIO_Handler+0xba8>)
    980c:	6880      	ldr	r0, [r0, #8]
    980e:	f8c0 b000 	str.w	fp, [r0]
    9812:	4815      	ldr	r0, [pc, #84]	; (9868 <MPSL_IRQ_RADIO_Handler+0xbac>)
    9814:	f8c0 b000 	str.w	fp, [r0]
    9818:	ac0c      	add	r4, sp, #48	; 0x30
    981a:	4814      	ldr	r0, [pc, #80]	; (986c <MPSL_IRQ_RADIO_Handler+0xbb0>)
    981c:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    9820:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
    9824:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    9828:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    982c:	f8c0 c08c 	str.w	ip, [r0, #140]	; 0x8c
    9830:	ac10      	add	r4, sp, #64	; 0x40
    9832:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    9836:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
    983a:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
    983e:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
    9842:	f8c0 c09c 	str.w	ip, [r0, #156]	; 0x9c
    9846:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
    984a:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
    984e:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
    9852:	b020      	add	sp, #128	; 0x80
    9854:	2001      	movs	r0, #1
    9856:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    985a:	f640 2148 	movw	r1, #2632	; 0xa48
    985e:	2070      	movs	r0, #112	; 0x70
    9860:	f002 fe0a 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9864:	2000030c 	.word	0x2000030c
    9868:	40000508 	.word	0x40000508
    986c:	200010c8 	.word	0x200010c8
    9870:	b570      	push	{r4, r5, r6, lr}
    9872:	4d1d      	ldr	r5, [pc, #116]	; (98e8 <MPSL_IRQ_RADIO_Handler+0xc2c>)
    9874:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
    9878:	2820      	cmp	r0, #32
    987a:	bf18      	it	ne
    987c:	bd70      	popne	{r4, r5, r6, pc}
    987e:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
    9882:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    9886:	4428      	add	r0, r5
    9888:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    988c:	2c20      	cmp	r4, #32
    988e:	d026      	beq.n	98de <MPSL_IRQ_RADIO_Handler+0xc22>
    9890:	4b16      	ldr	r3, [pc, #88]	; (98ec <MPSL_IRQ_RADIO_Handler+0xc30>)
    9892:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    9896:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    989a:	7849      	ldrb	r1, [r1, #1]
    989c:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    98a0:	20ff      	movs	r0, #255	; 0xff
    98a2:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    98a6:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
    98aa:	4621      	mov	r1, r4
    98ac:	2002      	movs	r0, #2
    98ae:	f000 f88b 	bl	99c8 <MPSL_IRQ_RADIO_Handler+0xd0c>
    98b2:	2000      	movs	r0, #0
    98b4:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
    98b8:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    98bc:	480c      	ldr	r0, [pc, #48]	; (98f0 <MPSL_IRQ_RADIO_Handler+0xc34>)
    98be:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    98c2:	7e00      	ldrb	r0, [r0, #24]
    98c4:	2800      	cmp	r0, #0
    98c6:	bf08      	it	eq
    98c8:	f002 ff3e 	bleq	c748 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    98cc:	2000      	movs	r0, #0
    98ce:	4909      	ldr	r1, [pc, #36]	; (98f4 <MPSL_IRQ_RADIO_Handler+0xc38>)
    98d0:	6849      	ldr	r1, [r1, #4]
    98d2:	2900      	cmp	r1, #0
    98d4:	bf08      	it	eq
    98d6:	bd70      	popeq	{r4, r5, r6, pc}
    98d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    98dc:	4708      	bx	r1
    98de:	f240 311d 	movw	r1, #797	; 0x31d
    98e2:	2070      	movs	r0, #112	; 0x70
    98e4:	f002 fdc8 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    98e8:	20001148 	.word	0x20001148
    98ec:	200010c8 	.word	0x200010c8
    98f0:	20000cc8 	.word	0x20000cc8
    98f4:	2000030c 	.word	0x2000030c
    98f8:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    98fc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 99b8 <MPSL_IRQ_RADIO_Handler+0xcfc>
    9900:	f898 5041 	ldrb.w	r5, [r8, #65]	; 0x41
    9904:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    9908:	4440      	add	r0, r8
    990a:	f890 4029 	ldrb.w	r4, [r0, #41]	; 0x29
    990e:	2c20      	cmp	r4, #32
    9910:	bf08      	it	eq
    9912:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9916:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 99bc <MPSL_IRQ_RADIO_Handler+0xd00>
    991a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 99c0 <MPSL_IRQ_RADIO_Handler+0xd04>
    991e:	f5a9 6a80 	sub.w	sl, r9, #1024	; 0x400
    9922:	eb09 1785 	add.w	r7, r9, r5, lsl #6
    9926:	2607      	movs	r6, #7
    9928:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    992c:	2801      	cmp	r0, #1
    992e:	d00e      	beq.n	994e <MPSL_IRQ_RADIO_Handler+0xc92>
    9930:	2804      	cmp	r0, #4
    9932:	bf08      	it	eq
    9934:	2602      	moveq	r6, #2
    9936:	d00a      	beq.n	994e <MPSL_IRQ_RADIO_Handler+0xc92>
    9938:	2805      	cmp	r0, #5
    993a:	bf0c      	ite	eq
    993c:	2603      	moveq	r6, #3
    993e:	2806      	cmpne	r0, #6
    9940:	d005      	beq.n	994e <MPSL_IRQ_RADIO_Handler+0xc92>
    9942:	f44f 610a 	mov.w	r1, #2208	; 0x8a0
    9946:	f04f 0070 	mov.w	r0, #112	; 0x70
    994a:	f002 fd95 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    994e:	f1bb 0f00 	cmp.w	fp, #0
    9952:	bf18      	it	ne
    9954:	f3af 8000 	nopne.w
    9958:	f3ef 8010 	mrs	r0, PRIMASK
    995c:	b672      	cpsid	i
    995e:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    9962:	784a      	ldrb	r2, [r1, #1]
    9964:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    9968:	4441      	add	r1, r8
    996a:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
    996e:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
    9972:	42a2      	cmp	r2, r4
    9974:	bf04      	itt	eq
    9976:	2220      	moveq	r2, #32
    9978:	f881 202a 	strbeq.w	r2, [r1, #42]	; 0x2a
    997c:	b1a8      	cbz	r0, 99aa <MPSL_IRQ_RADIO_Handler+0xcee>
    997e:	462a      	mov	r2, r5
    9980:	4621      	mov	r1, r4
    9982:	2001      	movs	r0, #1
    9984:	f000 f820 	bl	99c8 <MPSL_IRQ_RADIO_Handler+0xd0c>
    9988:	eb0a 1144 	add.w	r1, sl, r4, lsl #5
    998c:	e9d1 2000 	ldrd	r2, r0, [r1]
    9990:	4631      	mov	r1, r6
    9992:	4790      	blx	r2
    9994:	f898 5041 	ldrb.w	r5, [r8, #65]	; 0x41
    9998:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    999c:	4440      	add	r0, r8
    999e:	f890 4029 	ldrb.w	r4, [r0, #41]	; 0x29
    99a2:	2c20      	cmp	r4, #32
    99a4:	d1bd      	bne.n	9922 <MPSL_IRQ_RADIO_Handler+0xc66>
    99a6:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    99aa:	4806      	ldr	r0, [pc, #24]	; (99c4 <MPSL_IRQ_RADIO_Handler+0xd08>)
    99ac:	2800      	cmp	r0, #0
    99ae:	bf18      	it	ne
    99b0:	f3af 8000 	nopne.w
    99b4:	b662      	cpsie	i
    99b6:	e7e2      	b.n	997e <MPSL_IRQ_RADIO_Handler+0xcc2>
    99b8:	20001148 	.word	0x20001148
    99bc:	00000000 	.word	0x00000000
    99c0:	200010c8 	.word	0x200010c8
    99c4:	00000000 	.word	0x00000000
    99c8:	f8df c058 	ldr.w	ip, [pc, #88]	; 9a24 <MPSL_IRQ_RADIO_Handler+0xd68>
    99cc:	b510      	push	{r4, lr}
    99ce:	2300      	movs	r3, #0
    99d0:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    99d4:	2807      	cmp	r0, #7
    99d6:	d21f      	bcs.n	9a18 <MPSL_IRQ_RADIO_Handler+0xd5c>
    99d8:	e8df f000 	tbb	[pc, r0]
    99dc:	05050505 	.word	0x05050505
    99e0:	00040404 	.word	0x00040404
    99e4:	2301      	movs	r3, #1
    99e6:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    99ea:	2b00      	cmp	r3, #0
    99ec:	bf08      	it	eq
    99ee:	bd10      	popeq	{r4, pc}
    99f0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    99f4:	480c      	ldr	r0, [pc, #48]	; (9a28 <MPSL_IRQ_RADIO_Handler+0xd6c>)
    99f6:	4402      	add	r2, r0
    99f8:	f892 002a 	ldrb.w	r0, [r2, #42]	; 0x2a
    99fc:	2820      	cmp	r0, #32
    99fe:	bf0e      	itee	eq
    9a00:	f882 1029 	strbeq.w	r1, [r2, #41]	; 0x29
    9a04:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    9a08:	7041      	strbne	r1, [r0, #1]
    9a0a:	2020      	movs	r0, #32
    9a0c:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    9a10:	7058      	strb	r0, [r3, #1]
    9a12:	f882 102a 	strb.w	r1, [r2, #42]	; 0x2a
    9a16:	bd10      	pop	{r4, pc}
    9a18:	f44f 7117 	mov.w	r1, #604	; 0x25c
    9a1c:	2070      	movs	r0, #112	; 0x70
    9a1e:	f002 fd2b 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9a22:	0000      	.short	0x0000
    9a24:	200010c8 	.word	0x200010c8
    9a28:	20001148 	.word	0x20001148
    9a2c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9a30:	460f      	mov	r7, r1
    9a32:	4680      	mov	r8, r0
    9a34:	f8df b154 	ldr.w	fp, [pc, #340]	; 9b8c <MPSL_IRQ_RADIO_Handler+0xed0>
    9a38:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    9a3c:	4458      	add	r0, fp
    9a3e:	f1b8 0f01 	cmp.w	r8, #1
    9a42:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    9a46:	4625      	mov	r5, r4
    9a48:	bf18      	it	ne
    9a4a:	f1b8 0f02 	cmpne.w	r8, #2
    9a4e:	d005      	beq.n	9a5c <MPSL_IRQ_RADIO_Handler+0xda0>
    9a50:	f640 217e 	movw	r1, #2686	; 0xa7e
    9a54:	f04f 0070 	mov.w	r0, #112	; 0x70
    9a58:	f002 fd0e 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9a5c:	2d20      	cmp	r5, #32
    9a5e:	d041      	beq.n	9ae4 <MPSL_IRQ_RADIO_Handler+0xe28>
    9a60:	f89b 0022 	ldrb.w	r0, [fp, #34]	; 0x22
    9a64:	2600      	movs	r6, #0
    9a66:	2800      	cmp	r0, #0
    9a68:	bf08      	it	eq
    9a6a:	2602      	moveq	r6, #2
    9a6c:	f001 fd9a 	bl	b5a4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    9a70:	f8df 911c 	ldr.w	r9, [pc, #284]	; 9b90 <MPSL_IRQ_RADIO_Handler+0xed4>
    9a74:	eb09 1344 	add.w	r3, r9, r4, lsl #5
    9a78:	6899      	ldr	r1, [r3, #8]
    9a7a:	691b      	ldr	r3, [r3, #16]
    9a7c:	1a0a      	subs	r2, r1, r0
    9a7e:	18c9      	adds	r1, r1, r3
    9a80:	1a09      	subs	r1, r1, r0
    9a82:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    9a86:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9a8a:	4296      	cmp	r6, r2
    9a8c:	bf99      	ittee	ls
    9a8e:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    9a92:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    9a96:	4a3f      	ldrhi	r2, [pc, #252]	; (9b94 <MPSL_IRQ_RADIO_Handler+0xed8>)
    9a98:	eb02 1a87 	addhi.w	sl, r2, r7, lsl #6
    9a9c:	d920      	bls.n	9ae0 <MPSL_IRQ_RADIO_Handler+0xe24>
    9a9e:	4622      	mov	r2, r4
    9aa0:	eb0a 0142 	add.w	r1, sl, r2, lsl #1
    9aa4:	784c      	ldrb	r4, [r1, #1]
    9aa6:	2c20      	cmp	r4, #32
    9aa8:	d012      	beq.n	9ad0 <MPSL_IRQ_RADIO_Handler+0xe14>
    9aaa:	eb09 1344 	add.w	r3, r9, r4, lsl #5
    9aae:	6899      	ldr	r1, [r3, #8]
    9ab0:	691b      	ldr	r3, [r3, #16]
    9ab2:	ebb1 0c00 	subs.w	ip, r1, r0
    9ab6:	18c9      	adds	r1, r1, r3
    9ab8:	1a09      	subs	r1, r1, r0
    9aba:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    9abe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9ac2:	4566      	cmp	r6, ip
    9ac4:	bf9c      	itt	ls
    9ac6:	f5bc 0f00 	cmpls.w	ip, #8388608	; 0x800000
    9aca:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    9ace:	d8e6      	bhi.n	9a9e <MPSL_IRQ_RADIO_Handler+0xde2>
    9ad0:	2a20      	cmp	r2, #32
    9ad2:	d005      	beq.n	9ae0 <MPSL_IRQ_RADIO_Handler+0xe24>
    9ad4:	463b      	mov	r3, r7
    9ad6:	2120      	movs	r1, #32
    9ad8:	2004      	movs	r0, #4
    9ada:	f7ff f90d 	bl	8cf8 <MPSL_IRQ_RADIO_Handler+0x3c>
    9ade:	4604      	mov	r4, r0
    9ae0:	42ac      	cmp	r4, r5
    9ae2:	d113      	bne.n	9b0c <MPSL_IRQ_RADIO_Handler+0xe50>
    9ae4:	482c      	ldr	r0, [pc, #176]	; (9b98 <MPSL_IRQ_RADIO_Handler+0xedc>)
    9ae6:	2800      	cmp	r0, #0
    9ae8:	bf18      	it	ne
    9aea:	f3af 8000 	nopne.w
    9aee:	f001 ff0f 	bl	b910 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    9af2:	f89b 2043 	ldrb.w	r2, [fp, #67]	; 0x43
    9af6:	2a20      	cmp	r2, #32
    9af8:	d00b      	beq.n	9b12 <MPSL_IRQ_RADIO_Handler+0xe56>
    9afa:	e9db 3202 	ldrd	r3, r2, [fp, #8]
    9afe:	1c84      	adds	r4, r0, #2
    9b00:	f141 0c00 	adc.w	ip, r1, #0
    9b04:	1b1b      	subs	r3, r3, r4
    9b06:	eb72 020c 	sbcs.w	r2, r2, ip
    9b0a:	d202      	bcs.n	9b12 <MPSL_IRQ_RADIO_Handler+0xe56>
    9b0c:	2000      	movs	r0, #0
    9b0e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9b12:	2d20      	cmp	r5, #32
    9b14:	d013      	beq.n	9b3e <MPSL_IRQ_RADIO_Handler+0xe82>
    9b16:	462b      	mov	r3, r5
    9b18:	4642      	mov	r2, r8
    9b1a:	f7ff fbaf 	bl	927c <MPSL_IRQ_RADIO_Handler+0x5c0>
    9b1e:	2800      	cmp	r0, #0
    9b20:	bf1e      	ittt	ne
    9b22:	f88b 5043 	strbne.w	r5, [fp, #67]	; 0x43
    9b26:	2002      	movne	r0, #2
    9b28:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9b2c:	463b      	mov	r3, r7
    9b2e:	462a      	mov	r2, r5
    9b30:	2120      	movs	r1, #32
    9b32:	2004      	movs	r0, #4
    9b34:	f7ff f8e0 	bl	8cf8 <MPSL_IRQ_RADIO_Handler+0x3c>
    9b38:	2000      	movs	r0, #0
    9b3a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9b3e:	e9db 010e 	ldrd	r0, r1, [fp, #56]	; 0x38
    9b42:	43c0      	mvns	r0, r0
    9b44:	ea70 0001 	orns	r0, r0, r1
    9b48:	d005      	beq.n	9b56 <MPSL_IRQ_RADIO_Handler+0xe9a>
    9b4a:	f002 fadd 	bl	c108 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    9b4e:	f04f 30ff 	mov.w	r0, #4294967295
    9b52:	e9cb 000e 	strd	r0, r0, [fp, #56]	; 0x38
    9b56:	f89b 0040 	ldrb.w	r0, [fp, #64]	; 0x40
    9b5a:	b128      	cbz	r0, 9b68 <MPSL_IRQ_RADIO_Handler+0xeac>
    9b5c:	2005      	movs	r0, #5
    9b5e:	f001 ffb3 	bl	bac8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9b62:	2000      	movs	r0, #0
    9b64:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    9b68:	2004      	movs	r0, #4
    9b6a:	f001 ffad 	bl	bac8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9b6e:	f002 f813 	bl	bb98 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    9b72:	490a      	ldr	r1, [pc, #40]	; (9b9c <MPSL_IRQ_RADIO_Handler+0xee0>)
    9b74:	2020      	movs	r0, #32
    9b76:	f88b 0043 	strb.w	r0, [fp, #67]	; 0x43
    9b7a:	6889      	ldr	r1, [r1, #8]
    9b7c:	2000      	movs	r0, #0
    9b7e:	6008      	str	r0, [r1, #0]
    9b80:	4907      	ldr	r1, [pc, #28]	; (9ba0 <MPSL_IRQ_RADIO_Handler+0xee4>)
    9b82:	6008      	str	r0, [r1, #0]
    9b84:	2001      	movs	r0, #1
    9b86:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9b8a:	0000      	.short	0x0000
    9b8c:	20001148 	.word	0x20001148
    9b90:	20000cc8 	.word	0x20000cc8
    9b94:	200010c8 	.word	0x200010c8
    9b98:	00000000 	.word	0x00000000
    9b9c:	2000030c 	.word	0x2000030c
    9ba0:	40000508 	.word	0x40000508

00009ba4 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    9ba4:	4906      	ldr	r1, [pc, #24]	; (9bc0 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    9ba6:	b510      	push	{r4, lr}
    9ba8:	f891 2042 	ldrb.w	r2, [r1, #66]	; 0x42
    9bac:	2a20      	cmp	r2, #32
    9bae:	bf1c      	itt	ne
    9bb0:	f881 0022 	strbne.w	r0, [r1, #34]	; 0x22
    9bb4:	bd10      	popne	{r4, pc}
    9bb6:	f240 3177 	movw	r1, #887	; 0x377
    9bba:	2070      	movs	r0, #112	; 0x70
    9bbc:	f002 fc5c 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9bc0:	20001148 	.word	0x20001148

00009bc4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    9bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9bc8:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 9d90 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1cc>
    9bcc:	4606      	mov	r6, r0
    9bce:	b08f      	sub	sp, #60	; 0x3c
    9bd0:	f89b 0042 	ldrb.w	r0, [fp, #66]	; 0x42
    9bd4:	468a      	mov	sl, r1
    9bd6:	2820      	cmp	r0, #32
    9bd8:	d061      	beq.n	9c9e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xda>
    9bda:	f89b 1042 	ldrb.w	r1, [fp, #66]	; 0x42
    9bde:	f10b 0408 	add.w	r4, fp, #8
    9be2:	f5ab 6890 	sub.w	r8, fp, #1152	; 0x480
    9be6:	eb08 1941 	add.w	r9, r8, r1, lsl #5
    9bea:	2120      	movs	r1, #32
    9bec:	f88d 1018 	strb.w	r1, [sp, #24]
    9bf0:	f89b 1041 	ldrb.w	r1, [fp, #65]	; 0x41
    9bf4:	f8db 2008 	ldr.w	r2, [fp, #8]
    9bf8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    9bfc:	4459      	add	r1, fp
    9bfe:	2700      	movs	r7, #0
    9c00:	f891 5028 	ldrb.w	r5, [r1, #40]	; 0x28
    9c04:	f8db 1010 	ldr.w	r1, [fp, #16]
    9c08:	1851      	adds	r1, r2, r1
    9c0a:	910a      	str	r1, [sp, #40]	; 0x28
    9c0c:	f8db 0000 	ldr.w	r0, [fp]
    9c10:	aa09      	add	r2, sp, #36	; 0x24
    9c12:	4430      	add	r0, r6
    9c14:	a907      	add	r1, sp, #28
    9c16:	f001 fb9b 	bl	b350 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9c1a:	f8d9 0010 	ldr.w	r0, [r9, #16]
    9c1e:	9907      	ldr	r1, [sp, #28]
    9c20:	f8d9 2008 	ldr.w	r2, [r9, #8]
    9c24:	1840      	adds	r0, r0, r1
    9c26:	1810      	adds	r0, r2, r0
    9c28:	2e67      	cmp	r6, #103	; 0x67
    9c2a:	d33d      	bcc.n	9ca8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    9c2c:	4959      	ldr	r1, [pc, #356]	; (9d94 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d0>)
    9c2e:	2200      	movs	r2, #0
    9c30:	1b89      	subs	r1, r1, r6
    9c32:	eb72 0107 	sbcs.w	r1, r2, r7
    9c36:	d337      	bcc.n	9ca8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    9c38:	6821      	ldr	r1, [r4, #0]
    9c3a:	4694      	mov	ip, r2
    9c3c:	1a40      	subs	r0, r0, r1
    9c3e:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    9c42:	f5d1 0100 	rsbs	r1, r1, #8388608	; 0x800000
    9c46:	eb7c 010c 	sbcs.w	r1, ip, ip
    9c4a:	d32d      	bcc.n	9ca8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    9c4c:	60a0      	str	r0, [r4, #8]
    9c4e:	f508 6090 	add.w	r0, r8, #1152	; 0x480
    9c52:	f884 a010 	strb.w	sl, [r4, #16]
    9c56:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
    9c5a:	f10d 0b18 	add.w	fp, sp, #24
    9c5e:	2d20      	cmp	r5, #32
    9c60:	d055      	beq.n	9d0e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    9c62:	f508 6180 	add.w	r1, r8, #1024	; 0x400
    9c66:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    9c6a:	9001      	str	r0, [sp, #4]
    9c6c:	484a      	ldr	r0, [pc, #296]	; (9d98 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d4>)
    9c6e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    9c72:	f8d4 a000 	ldr.w	sl, [r4]
    9c76:	eb00 1845 	add.w	r8, r0, r5, lsl #5
    9c7a:	f108 0008 	add.w	r0, r8, #8
    9c7e:	eb1a 0201 	adds.w	r2, sl, r1
    9c82:	eb43 0107 	adc.w	r1, r3, r7
    9c86:	e9d0 9300 	ldrd	r9, r3, [r0]
    9c8a:	ebb9 0202 	subs.w	r2, r9, r2
    9c8e:	eb73 0101 	sbcs.w	r1, r3, r1
    9c92:	d325      	bcc.n	9ce0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x11c>
    9c94:	89c0      	ldrh	r0, [r0, #14]
    9c96:	b398      	cbz	r0, 9d00 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x13c>
    9c98:	89e0      	ldrh	r0, [r4, #14]
    9c9a:	b148      	cbz	r0, 9cb0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xec>
    9c9c:	e037      	b.n	9d0e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    9c9e:	f640 3135 	movw	r1, #2869	; 0xb35
    9ca2:	2070      	movs	r0, #112	; 0x70
    9ca4:	f002 fbe8 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9ca8:	b00f      	add	sp, #60	; 0x3c
    9caa:	2001      	movs	r0, #1
    9cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9cb0:	f002 fa24 	bl	c0fc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9cb4:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9cb8:	bf08      	it	eq
    9cba:	200d      	moveq	r0, #13
    9cbc:	d00b      	beq.n	9cd6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x112>
    9cbe:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9cc2:	3856      	subs	r0, #86	; 0x56
    9cc4:	bf08      	it	eq
    9cc6:	201c      	moveq	r0, #28
    9cc8:	d005      	beq.n	9cd6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x112>
    9cca:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9cce:	389f      	subs	r0, #159	; 0x9f
    9cd0:	bf14      	ite	ne
    9cd2:	4638      	movne	r0, r7
    9cd4:	2032      	moveq	r0, #50	; 0x32
    9cd6:	1c41      	adds	r1, r0, #1
    9cd8:	ebb9 000a 	subs.w	r0, r9, sl
    9cdc:	4288      	cmp	r0, r1
    9cde:	da16      	bge.n	9d0e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    9ce0:	f88b 5000 	strb.w	r5, [fp]
    9ce4:	f898 0018 	ldrb.w	r0, [r8, #24]
    9ce8:	7c21      	ldrb	r1, [r4, #16]
    9cea:	4281      	cmp	r1, r0
    9cec:	d309      	bcc.n	9d02 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x13e>
    9cee:	6821      	ldr	r1, [r4, #0]
    9cf0:	980a      	ldr	r0, [sp, #40]	; 0x28
    9cf2:	1a40      	subs	r0, r0, r1
    9cf4:	60a0      	str	r0, [r4, #8]
    9cf6:	b00f      	add	sp, #60	; 0x3c
    9cf8:	f04f 0002 	mov.w	r0, #2
    9cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9d00:	e005      	b.n	9d0e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    9d02:	9801      	ldr	r0, [sp, #4]
    9d04:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    9d08:	7845      	ldrb	r5, [r0, #1]
    9d0a:	2d20      	cmp	r5, #32
    9d0c:	d1ae      	bne.n	9c6c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xa8>
    9d0e:	2005      	movs	r0, #5
    9d10:	f001 feda 	bl	bac8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9d14:	4d1e      	ldr	r5, [pc, #120]	; (9d90 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1cc>)
    9d16:	f04f 30ff 	mov.w	r0, #4294967295
    9d1a:	6068      	str	r0, [r5, #4]
    9d1c:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
    9d20:	f89d 2018 	ldrb.w	r2, [sp, #24]
    9d24:	2120      	movs	r1, #32
    9d26:	2a20      	cmp	r2, #32
    9d28:	d003      	beq.n	9d32 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16e>
    9d2a:	2005      	movs	r0, #5
    9d2c:	f7fe ffe4 	bl	8cf8 <MPSL_IRQ_RADIO_Handler+0x3c>
    9d30:	e004      	b.n	9d3c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>
    9d32:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    9d36:	4428      	add	r0, r5
    9d38:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
    9d3c:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
    9d40:	4916      	ldr	r1, [pc, #88]	; (9d9c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d8>)
    9d42:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    9d46:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
    9d4a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    9d4e:	7048      	strb	r0, [r1, #1]
    9d50:	6828      	ldr	r0, [r5, #0]
    9d52:	4430      	add	r0, r6
    9d54:	6028      	str	r0, [r5, #0]
    9d56:	20ff      	movs	r0, #255	; 0xff
    9d58:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    9d5c:	7e68      	ldrb	r0, [r5, #25]
    9d5e:	2801      	cmp	r0, #1
    9d60:	d10a      	bne.n	9d78 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>
    9d62:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
    9d66:	6823      	ldr	r3, [r4, #0]
    9d68:	1818      	adds	r0, r3, r0
    9d6a:	f142 0100 	adc.w	r1, r2, #0
    9d6e:	1e40      	subs	r0, r0, #1
    9d70:	f141 31ff 	adc.w	r1, r1, #4294967295
    9d74:	f001 fcca 	bl	b70c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    9d78:	f89d 0018 	ldrb.w	r0, [sp, #24]
    9d7c:	2820      	cmp	r0, #32
    9d7e:	d003      	beq.n	9d88 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1c4>
    9d80:	4807      	ldr	r0, [pc, #28]	; (9da0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1dc>)
    9d82:	7840      	ldrb	r0, [r0, #1]
    9d84:	f002 fc4a 	bl	c61c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9d88:	b00f      	add	sp, #60	; 0x3c
    9d8a:	2000      	movs	r0, #0
    9d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9d90:	20001148 	.word	0x20001148
    9d94:	0f424000 	.word	0x0f424000
    9d98:	20000cc8 	.word	0x20000cc8
    9d9c:	200010c8 	.word	0x200010c8
    9da0:	2000030c 	.word	0x2000030c

00009da4 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>:
    9da4:	b570      	push	{r4, r5, r6, lr}
    9da6:	4a23      	ldr	r2, [pc, #140]	; (9e34 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x90>)
    9da8:	f892 1042 	ldrb.w	r1, [r2, #66]	; 0x42
    9dac:	2920      	cmp	r1, #32
    9dae:	d039      	beq.n	9e24 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x80>
    9db0:	f892 1042 	ldrb.w	r1, [r2, #66]	; 0x42
    9db4:	f5a2 6390 	sub.w	r3, r2, #1152	; 0x480
    9db8:	eb03 1c41 	add.w	ip, r3, r1, lsl #5
    9dbc:	f892 1041 	ldrb.w	r1, [r2, #65]	; 0x41
    9dc0:	f892 4041 	ldrb.w	r4, [r2, #65]	; 0x41
    9dc4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    9dc8:	4411      	add	r1, r2
    9dca:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    9dce:	f1a2 0580 	sub.w	r5, r2, #128	; 0x80
    9dd2:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    9dd6:	2920      	cmp	r1, #32
    9dd8:	d029      	beq.n	9e2e <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x8a>
    9dda:	eb03 1541 	add.w	r5, r3, r1, lsl #5
    9dde:	7e2d      	ldrb	r5, [r5, #24]
    9de0:	42a8      	cmp	r0, r5
    9de2:	bf3c      	itt	cc
    9de4:	eb04 0141 	addcc.w	r1, r4, r1, lsl #1
    9de8:	7849      	ldrbcc	r1, [r1, #1]
    9dea:	d3f4      	bcc.n	9dd6 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x32>
    9dec:	e9dc 6003 	ldrd	r6, r0, [ip, #12]
    9df0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    9df4:	f8dc 5008 	ldr.w	r5, [ip, #8]
    9df8:	e9d3 1302 	ldrd	r1, r3, [r3, #8]
    9dfc:	6814      	ldr	r4, [r2, #0]
    9dfe:	1828      	adds	r0, r5, r0
    9e00:	f146 0200 	adc.w	r2, r6, #0
    9e04:	ebb1 0c00 	subs.w	ip, r1, r0
    9e08:	eb73 0202 	sbcs.w	r2, r3, r2
    9e0c:	d308      	bcc.n	9e20 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x7c>
    9e0e:	1a08      	subs	r0, r1, r0
    9e10:	f006 fea9 	bl	10b66 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    9e14:	f104 0167 	add.w	r1, r4, #103	; 0x67
    9e18:	4281      	cmp	r1, r0
    9e1a:	bf9c      	itt	ls
    9e1c:	1b00      	subls	r0, r0, r4
    9e1e:	bd70      	popls	{r4, r5, r6, pc}
    9e20:	2000      	movs	r0, #0
    9e22:	bd70      	pop	{r4, r5, r6, pc}
    9e24:	f640 3108 	movw	r1, #2824	; 0xb08
    9e28:	2070      	movs	r0, #112	; 0x70
    9e2a:	f002 fb25 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9e2e:	f04f 30ff 	mov.w	r0, #4294967295
    9e32:	bd70      	pop	{r4, r5, r6, pc}
    9e34:	20001148 	.word	0x20001148

00009e38 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    9e38:	4806      	ldr	r0, [pc, #24]	; (9e54 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    9e3a:	b510      	push	{r4, lr}
    9e3c:	f890 1042 	ldrb.w	r1, [r0, #66]	; 0x42
    9e40:	2920      	cmp	r1, #32
    9e42:	bf1c      	itt	ne
    9e44:	7e00      	ldrbne	r0, [r0, #24]
    9e46:	bd10      	popne	{r4, pc}
    9e48:	f640 312f 	movw	r1, #2863	; 0xb2f
    9e4c:	2070      	movs	r0, #112	; 0x70
    9e4e:	f002 fb13 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9e52:	0000      	.short	0x0000
    9e54:	20001148 	.word	0x20001148

00009e58 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    9e58:	490a      	ldr	r1, [pc, #40]	; (9e84 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x2c>)
    9e5a:	b510      	push	{r4, lr}
    9e5c:	eb01 1040 	add.w	r0, r1, r0, lsl #5
    9e60:	f100 0408 	add.w	r4, r0, #8
    9e64:	e9d4 0100 	ldrd	r0, r1, [r4]
    9e68:	f001 f9f4 	bl	b254 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    9e6c:	89e3      	ldrh	r3, [r4, #14]
    9e6e:	2200      	movs	r2, #0
    9e70:	18c3      	adds	r3, r0, r3
    9e72:	7b20      	ldrb	r0, [r4, #12]
    9e74:	4151      	adcs	r1, r2
    9e76:	1818      	adds	r0, r3, r0
    9e78:	4151      	adcs	r1, r2
    9e7a:	1c40      	adds	r0, r0, #1
    9e7c:	f141 0100 	adc.w	r1, r1, #0
    9e80:	bd10      	pop	{r4, pc}
    9e82:	0000      	.short	0x0000
    9e84:	20000cc8 	.word	0x20000cc8

00009e88 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    9e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9e8a:	4d6f      	ldr	r5, [pc, #444]	; (a048 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    9e8c:	2600      	movs	r6, #0
    9e8e:	f505 6490 	add.w	r4, r5, #1152	; 0x480
    9e92:	2701      	movs	r7, #1
    9e94:	e9d4 120e 	ldrd	r1, r2, [r4, #56]	; 0x38
    9e98:	4b6c      	ldr	r3, [pc, #432]	; (a04c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    9e9a:	2808      	cmp	r0, #8
    9e9c:	d273      	bcs.n	9f86 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfe>
    9e9e:	e8df f000 	tbb	[pc, r0]
    9ea2:	7804      	.short	0x7804
    9ea4:	47ceb3a0 	.word	0x47ceb3a0
    9ea8:	bdb8      	.short	0xbdb8
    9eaa:	43c8      	mvns	r0, r1
    9eac:	ea70 0002 	orns	r0, r0, r2
    9eb0:	d105      	bne.n	9ebe <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x36>
    9eb2:	f002 f945 	bl	c140 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    9eb6:	f001 fd2b 	bl	b910 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    9eba:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    9ebe:	8ae0      	ldrh	r0, [r4, #22]
    9ec0:	b110      	cbz	r0, 9ec8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x40>
    9ec2:	f002 fa61 	bl	c388 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    9ec6:	b180      	cbz	r0, 9eea <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    9ec8:	f7ff fcd2 	bl	9870 <MPSL_IRQ_RADIO_Handler+0xbb4>
    9ecc:	20ff      	movs	r0, #255	; 0xff
    9ece:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    9ed2:	6861      	ldr	r1, [r4, #4]
    9ed4:	f1b1 3fff 	cmp.w	r1, #4294967295
    9ed8:	d003      	beq.n	9ee2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x5a>
    9eda:	2005      	movs	r0, #5
    9edc:	f001 fd3a 	bl	b954 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9ee0:	b140      	cbz	r0, 9ef4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    9ee2:	7e60      	ldrb	r0, [r4, #25]
    9ee4:	2801      	cmp	r0, #1
    9ee6:	d114      	bne.n	9f12 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x8a>
    9ee8:	e009      	b.n	9efe <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x76>
    9eea:	f640 012c 	movw	r1, #2092	; 0x82c
    9eee:	2070      	movs	r0, #112	; 0x70
    9ef0:	f002 fac2 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9ef4:	f640 0131 	movw	r1, #2097	; 0x831
    9ef8:	2070      	movs	r0, #112	; 0x70
    9efa:	f002 fabd 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9efe:	68a2      	ldr	r2, [r4, #8]
    9f00:	6920      	ldr	r0, [r4, #16]
    9f02:	68e1      	ldr	r1, [r4, #12]
    9f04:	1810      	adds	r0, r2, r0
    9f06:	4171      	adcs	r1, r6
    9f08:	1e40      	subs	r0, r0, #1
    9f0a:	f141 31ff 	adc.w	r1, r1, #4294967295
    9f0e:	f001 fbfd 	bl	b70c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    9f12:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    9f16:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    9f1a:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    9f1e:	6840      	ldr	r0, [r0, #4]
    9f20:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    9f24:	680a      	ldr	r2, [r1, #0]
    9f26:	b001      	add	sp, #4
    9f28:	2101      	movs	r1, #1
    9f2a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    9f2e:	4710      	bx	r2
    9f30:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    9f34:	b160      	cbz	r0, 9f50 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xc8>
    9f36:	43c8      	mvns	r0, r1
    9f38:	ea70 0002 	orns	r0, r0, r2
    9f3c:	d105      	bne.n	9f4a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xc2>
    9f3e:	f002 f8ff 	bl	c140 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    9f42:	f001 fce5 	bl	b910 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    9f46:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    9f4a:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    9f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9f50:	f7ff fc8e 	bl	9870 <MPSL_IRQ_RADIO_Handler+0xbb4>
    9f54:	f04f 30ff 	mov.w	r0, #4294967295
    9f58:	6060      	str	r0, [r4, #4]
    9f5a:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    9f5e:	f88d 0000 	strb.w	r0, [sp]
    9f62:	f89d 0000 	ldrb.w	r0, [sp]
    9f66:	b178      	cbz	r0, 9f88 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x100>
    9f68:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    9f6c:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    9f70:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    9f74:	6840      	ldr	r0, [r0, #4]
    9f76:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    9f7a:	680a      	ldr	r2, [r1, #0]
    9f7c:	b001      	add	sp, #4
    9f7e:	2106      	movs	r1, #6
    9f80:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    9f84:	4710      	bx	r2
    9f86:	e05a      	b.n	a03e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b6>
    9f88:	f640 0148 	movw	r1, #2120	; 0x848
    9f8c:	2070      	movs	r0, #112	; 0x70
    9f8e:	f002 fa73 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9f92:	f7ff fc6d 	bl	9870 <MPSL_IRQ_RADIO_Handler+0xbb4>
    9f96:	f884 702e 	strb.w	r7, [r4, #46]	; 0x2e
    9f9a:	f002 f9f5 	bl	c388 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    9f9e:	b130      	cbz	r0, 9fae <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x126>
    9fa0:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
    9fa4:	43c9      	mvns	r1, r1
    9fa6:	ea71 0000 	orns	r0, r1, r0
    9faa:	d005      	beq.n	9fb8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x130>
    9fac:	e00a      	b.n	9fc4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x13c>
    9fae:	f640 0156 	movw	r1, #2134	; 0x856
    9fb2:	2070      	movs	r0, #112	; 0x70
    9fb4:	f002 fa60 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9fb8:	f002 f8c2 	bl	c140 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    9fbc:	f001 fca8 	bl	b910 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    9fc0:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    9fc4:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    9fc8:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    9fcc:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    9fd0:	6840      	ldr	r0, [r0, #4]
    9fd2:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    9fd6:	680a      	ldr	r2, [r1, #0]
    9fd8:	b001      	add	sp, #4
    9fda:	2100      	movs	r1, #0
    9fdc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    9fe0:	4710      	bx	r2
    9fe2:	f001 fe95 	bl	bd10 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    9fe6:	8ae0      	ldrh	r0, [r4, #22]
    9fe8:	b110      	cbz	r0, 9ff0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
    9fea:	f002 f9cd 	bl	c388 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    9fee:	b130      	cbz	r0, 9ffe <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x176>
    9ff0:	f001 fea2 	bl	bd38 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    9ff4:	2800      	cmp	r0, #0
    9ff6:	bf18      	it	ne
    9ff8:	f884 7021 	strbne.w	r7, [r4, #33]	; 0x21
    9ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9ffe:	f44f 6106 	mov.w	r1, #2144	; 0x860
    a002:	2070      	movs	r0, #112	; 0x70
    a004:	f002 fa38 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a008:	4811      	ldr	r0, [pc, #68]	; (a050 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    a00a:	6007      	str	r7, [r0, #0]
    a00c:	6898      	ldr	r0, [r3, #8]
    a00e:	6007      	str	r7, [r0, #0]
    a010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a012:	7818      	ldrb	r0, [r3, #0]
    a014:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a018:	f002 bb00 	b.w	c61c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a01c:	f7ff fc28 	bl	9870 <MPSL_IRQ_RADIO_Handler+0xbb4>
    a020:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    a024:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    a028:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    a02c:	6840      	ldr	r0, [r0, #4]
    a02e:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    a032:	680a      	ldr	r2, [r1, #0]
    a034:	b001      	add	sp, #4
    a036:	2105      	movs	r1, #5
    a038:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a03c:	4710      	bx	r2
    a03e:	f640 0173 	movw	r1, #2163	; 0x873
    a042:	2070      	movs	r0, #112	; 0x70
    a044:	f002 fa18 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a048:	20000cc8 	.word	0x20000cc8
    a04c:	2000030c 	.word	0x2000030c
    a050:	40000508 	.word	0x40000508

0000a054 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    a054:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a058:	48f7      	ldr	r0, [pc, #988]	; (a438 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e4>)
    a05a:	b097      	sub	sp, #92	; 0x5c
    a05c:	460c      	mov	r4, r1
    a05e:	6800      	ldr	r0, [r0, #0]
    a060:	4ff6      	ldr	r7, [pc, #984]	; (a43c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e8>)
    a062:	05c0      	lsls	r0, r0, #23
    a064:	0dc0      	lsrs	r0, r0, #23
    a066:	d00e      	beq.n	a086 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    a068:	3810      	subs	r0, #16
    a06a:	b240      	sxtb	r0, r0
    a06c:	2800      	cmp	r0, #0
    a06e:	bfb8      	it	lt
    a070:	f000 000f 	andlt.w	r0, r0, #15
    a074:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a078:	bfac      	ite	ge
    a07a:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    a07e:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    a082:	0940      	lsrs	r0, r0, #5
    a084:	d00c      	beq.n	a0a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4c>
    a086:	7820      	ldrb	r0, [r4, #0]
    a088:	f04f 0a00 	mov.w	sl, #0
    a08c:	2800      	cmp	r0, #0
    a08e:	bf18      	it	ne
    a090:	2801      	cmpne	r0, #1
    a092:	d017      	beq.n	a0c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x70>
    a094:	f240 61f9 	movw	r1, #1785	; 0x6f9
    a098:	f04f 0070 	mov.w	r0, #112	; 0x70
    a09c:	f002 f9ec 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a0a0:	f897 0042 	ldrb.w	r0, [r7, #66]	; 0x42
    a0a4:	f04f 0a01 	mov.w	sl, #1
    a0a8:	2820      	cmp	r0, #32
    a0aa:	d006      	beq.n	a0ba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x66>
    a0ac:	7820      	ldrb	r0, [r4, #0]
    a0ae:	b148      	cbz	r0, a0c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x70>
    a0b0:	f240 61f5 	movw	r1, #1781	; 0x6f5
    a0b4:	2070      	movs	r0, #112	; 0x70
    a0b6:	f002 f9df 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a0ba:	f240 61f2 	movw	r1, #1778	; 0x6f2
    a0be:	2070      	movs	r0, #112	; 0x70
    a0c0:	f002 f9da 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a0c4:	f8df b378 	ldr.w	fp, [pc, #888]	; a440 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ec>
    a0c8:	f1bb 0f00 	cmp.w	fp, #0
    a0cc:	d004      	beq.n	a0d8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x84>
    a0ce:	2100      	movs	r1, #0
    a0d0:	f240 60fc 	movw	r0, #1788	; 0x6fc
    a0d4:	f3af 8000 	nop.w
    a0d8:	2000      	movs	r0, #0
    a0da:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    a0de:	a905      	add	r1, sp, #20
    a0e0:	9112      	str	r1, [sp, #72]	; 0x48
    a0e2:	49d8      	ldr	r1, [pc, #864]	; (a444 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f0>)
    a0e4:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a0e6:	f04f 0801 	mov.w	r8, #1
    a0ea:	eb01 1040 	add.w	r0, r1, r0, lsl #5
    a0ee:	9001      	str	r0, [sp, #4]
    a0f0:	f1bb 0f00 	cmp.w	fp, #0
    a0f4:	d004      	beq.n	a100 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    a0f6:	2100      	movs	r1, #0
    a0f8:	f240 7007 	movw	r0, #1799	; 0x707
    a0fc:	f3af 8000 	nop.w
    a100:	f1b8 0f00 	cmp.w	r8, #0
    a104:	d009      	beq.n	a11a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    a106:	bf00      	nop
    a108:	f897 6041 	ldrb.w	r6, [r7, #65]	; 0x41
    a10c:	2500      	movs	r5, #0
    a10e:	f887 5031 	strb.w	r5, [r7, #49]	; 0x31
    a112:	f1ba 0f00 	cmp.w	sl, #0
    a116:	d007      	beq.n	a128 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xd4>
    a118:	e03e      	b.n	a198 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x144>
    a11a:	48cb      	ldr	r0, [pc, #812]	; (a448 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f4>)
    a11c:	2800      	cmp	r0, #0
    a11e:	bf18      	it	ne
    a120:	f3af 8000 	nopne.w
    a124:	b662      	cpsie	i
    a126:	e7ef      	b.n	a108 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb4>
    a128:	46b1      	mov	r9, r6
    a12a:	2001      	movs	r0, #1
    a12c:	ea20 0609 	bic.w	r6, r0, r9
    a130:	48c6      	ldr	r0, [pc, #792]	; (a44c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f8>)
    a132:	2240      	movs	r2, #64	; 0x40
    a134:	eb00 1189 	add.w	r1, r0, r9, lsl #6
    a138:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    a13c:	f006 fea3 	bl	10e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a140:	f1bb 0f00 	cmp.w	fp, #0
    a144:	d004      	beq.n	a150 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xfc>
    a146:	2100      	movs	r1, #0
    a148:	f240 503c 	movw	r0, #1340	; 0x53c
    a14c:	f3af 8000 	nop.w
    a150:	eb09 0149 	add.w	r1, r9, r9, lsl #1
    a154:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    a158:	4439      	add	r1, r7
    a15a:	4438      	add	r0, r7
    a15c:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
    a15e:	8502      	strh	r2, [r0, #40]	; 0x28
    a160:	f891 102a 	ldrb.w	r1, [r1, #42]	; 0x2a
    a164:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    a168:	f1bb 0f00 	cmp.w	fp, #0
    a16c:	d004      	beq.n	a178 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x124>
    a16e:	2100      	movs	r1, #0
    a170:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    a174:	f3af 8000 	nop.w
    a178:	f1bb 0f00 	cmp.w	fp, #0
    a17c:	d004      	beq.n	a188 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x134>
    a17e:	2100      	movs	r1, #0
    a180:	f240 7011 	movw	r0, #1809	; 0x711
    a184:	f3af 8000 	nop.w
    a188:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
    a18c:	f88d 0020 	strb.w	r0, [sp, #32]
    a190:	f89d 0020 	ldrb.w	r0, [sp, #32]
    a194:	2800      	cmp	r0, #0
    a196:	d1ab      	bne.n	a0f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    a198:	f1bb 0f00 	cmp.w	fp, #0
    a19c:	d004      	beq.n	a1a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x154>
    a19e:	2100      	movs	r1, #0
    a1a0:	f240 701b 	movw	r0, #1819	; 0x71b
    a1a4:	f3af 8000 	nop.w
    a1a8:	f001 fbb2 	bl	b910 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    a1ac:	4681      	mov	r9, r0
    a1ae:	a802      	add	r0, sp, #8
    a1b0:	900a      	str	r0, [sp, #40]	; 0x28
    a1b2:	4688      	mov	r8, r1
    a1b4:	8921      	ldrh	r1, [r4, #8]
    a1b6:	4628      	mov	r0, r5
    a1b8:	f361 401f 	bfi	r0, r1, #16, #16
    a1bc:	4601      	mov	r1, r0
    a1be:	7aa2      	ldrb	r2, [r4, #10]
    a1c0:	4628      	mov	r0, r5
    a1c2:	f362 0007 	bfi	r0, r2, #0, #8
    a1c6:	7ae2      	ldrb	r2, [r4, #11]
    a1c8:	f362 200f 	bfi	r0, r2, #8, #8
    a1cc:	7822      	ldrb	r2, [r4, #0]
    a1ce:	9502      	str	r5, [sp, #8]
    a1d0:	f362 4017 	bfi	r0, r2, #16, #8
    a1d4:	e9cd 5104 	strd	r5, r1, [sp, #16]
    a1d8:	e9cd 0506 	strd	r0, r5, [sp, #24]
    a1dc:	9503      	str	r5, [sp, #12]
    a1de:	7820      	ldrb	r0, [r4, #0]
    a1e0:	b380      	cbz	r0, a244 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f0>
    a1e2:	f8bd 0016 	ldrh.w	r0, [sp, #22]
    a1e6:	499a      	ldr	r1, [pc, #616]	; (a450 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3fc>)
    a1e8:	1a08      	subs	r0, r1, r0
    a1ea:	990a      	ldr	r1, [sp, #40]	; 0x28
    a1ec:	f101 020c 	add.w	r2, r1, #12
    a1f0:	a914      	add	r1, sp, #80	; 0x50
    a1f2:	f001 f8ad 	bl	b350 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    a1f6:	2200      	movs	r2, #0
    a1f8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    a1fc:	4648      	mov	r0, r9
    a1fe:	4641      	mov	r1, r8
    a200:	f7fe ff4e 	bl	90a0 <MPSL_IRQ_RADIO_Handler+0x3e4>
    a204:	468c      	mov	ip, r1
    a206:	7ae1      	ldrb	r1, [r4, #11]
    a208:	2900      	cmp	r1, #0
    a20a:	bf0c      	ite	eq
    a20c:	217a      	moveq	r1, #122	; 0x7a
    a20e:	214a      	movne	r1, #74	; 0x4a
    a210:	6862      	ldr	r2, [r4, #4]
    a212:	f89d 3014 	ldrb.w	r3, [sp, #20]
    a216:	4411      	add	r1, r2
    a218:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    a21c:	e9cd 0c02 	strd	r0, ip, [sp, #8]
    a220:	441a      	add	r2, r3
    a222:	4411      	add	r1, r2
    a224:	1c88      	adds	r0, r1, #2
    a226:	f001 f877 	bl	b318 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a22a:	9600      	str	r6, [sp, #0]
    a22c:	9004      	str	r0, [sp, #16]
    a22e:	464a      	mov	r2, r9
    a230:	4643      	mov	r3, r8
    a232:	6920      	ldr	r0, [r4, #16]
    a234:	990a      	ldr	r1, [sp, #40]	; 0x28
    a236:	f7fe fd9b 	bl	8d70 <MPSL_IRQ_RADIO_Handler+0xb4>
    a23a:	2800      	cmp	r0, #0
    a23c:	bf08      	it	eq
    a23e:	e9cd 9802 	strdeq	r9, r8, [sp, #8]
    a242:	e046      	b.n	a2d2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x27e>
    a244:	e7ff      	b.n	a246 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f2>
    a246:	4648      	mov	r0, r9
    a248:	4641      	mov	r1, r8
    a24a:	f001 f803 	bl	b254 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    a24e:	f8df c204 	ldr.w	ip, [pc, #516]	; a454 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x400>
    a252:	4602      	mov	r2, r0
    a254:	eb10 0c0c 	adds.w	ip, r0, ip
    a258:	460b      	mov	r3, r1
    a25a:	f141 0e00 	adc.w	lr, r1, #0
    a25e:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    a262:	ebb0 0c0c 	subs.w	ip, r0, ip
    a266:	eb71 0c0e 	sbcs.w	ip, r1, lr
    a26a:	d229      	bcs.n	a2c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26c>
    a26c:	3229      	adds	r2, #41	; 0x29
    a26e:	f143 0300 	adc.w	r3, r3, #0
    a272:	1a82      	subs	r2, r0, r2
    a274:	eb71 0203 	sbcs.w	r2, r1, r3
    a278:	d322      	bcc.n	a2c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26c>
    a27a:	8922      	ldrh	r2, [r4, #8]
    a27c:	ab0a      	add	r3, sp, #40	; 0x28
    a27e:	1a80      	subs	r0, r0, r2
    a280:	eb61 0105 	sbc.w	r1, r1, r5
    a284:	9a12      	ldr	r2, [sp, #72]	; 0x48
    a286:	1e40      	subs	r0, r0, #1
    a288:	9200      	str	r2, [sp, #0]
    a28a:	f141 31ff 	adc.w	r1, r1, #4294967295
    a28e:	aa0d      	add	r2, sp, #52	; 0x34
    a290:	f001 f804 	bl	b29c <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    a294:	7ae0      	ldrb	r0, [r4, #11]
    a296:	2800      	cmp	r0, #0
    a298:	bf0c      	ite	eq
    a29a:	207a      	moveq	r0, #122	; 0x7a
    a29c:	204a      	movne	r0, #74	; 0x4a
    a29e:	990d      	ldr	r1, [sp, #52]	; 0x34
    a2a0:	8922      	ldrh	r2, [r4, #8]
    a2a2:	4408      	add	r0, r1
    a2a4:	6861      	ldr	r1, [r4, #4]
    a2a6:	4411      	add	r1, r2
    a2a8:	4408      	add	r0, r1
    a2aa:	1c80      	adds	r0, r0, #2
    a2ac:	f001 f834 	bl	b318 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a2b0:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
    a2b4:	e9cd 1202 	strd	r1, r2, [sp, #8]
    a2b8:	1a40      	subs	r0, r0, r1
    a2ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a2be:	e007      	b.n	a2d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x27c>
    a2c0:	f1b9 0101 	subs.w	r1, r9, #1
    a2c4:	f148 30ff 	adc.w	r0, r8, #4294967295
    a2c8:	e9cd 1002 	strd	r1, r0, [sp, #8]
    a2cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    a2d0:	9004      	str	r0, [sp, #16]
    a2d2:	f1bb 0f00 	cmp.w	fp, #0
    a2d6:	d004      	beq.n	a2e2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x28e>
    a2d8:	2100      	movs	r1, #0
    a2da:	f240 7022 	movw	r0, #1826	; 0x722
    a2de:	f3af 8000 	nop.w
    a2e2:	495a      	ldr	r1, [pc, #360]	; (a44c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f8>)
    a2e4:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
    a2e8:	eb01 1186 	add.w	r1, r1, r6, lsl #6
    a2ec:	9108      	str	r1, [sp, #32]
    a2ee:	f811 1018 	ldrb.w	r1, [r1, r8, lsl #1]
    a2f2:	a802      	add	r0, sp, #8
    a2f4:	2901      	cmp	r1, #1
    a2f6:	bf18      	it	ne
    a2f8:	2902      	cmpne	r1, #2
    a2fa:	d141      	bne.n	a380 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    a2fc:	9511      	str	r5, [sp, #68]	; 0x44
    a2fe:	9a02      	ldr	r2, [sp, #8]
    a300:	f029 417f 	bic.w	r1, r9, #4278190080	; 0xff000000
    a304:	1a53      	subs	r3, r2, r1
    a306:	f8dd c010 	ldr.w	ip, [sp, #16]
    a30a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    a30e:	eb12 020c 	adds.w	r2, r2, ip
    a312:	1a51      	subs	r1, r2, r1
    a314:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    a318:	2b02      	cmp	r3, #2
    a31a:	d374      	bcc.n	a406 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    a31c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    a320:	bf98      	it	ls
    a322:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    a326:	d86e      	bhi.n	a406 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    a328:	2501      	movs	r5, #1
    a32a:	ab14      	add	r3, sp, #80	; 0x50
    a32c:	aa0e      	add	r2, sp, #56	; 0x38
    a32e:	4631      	mov	r1, r6
    a330:	f7fe ff06 	bl	9140 <MPSL_IRQ_RADIO_Handler+0x484>
    a334:	2800      	cmp	r0, #0
    a336:	d06d      	beq.n	a414 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c0>
    a338:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    a33c:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    a340:	4633      	mov	r3, r6
    a342:	428a      	cmp	r2, r1
    a344:	d06a      	beq.n	a41c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c8>
    a346:	2005      	movs	r0, #5
    a348:	f7fe fcd6 	bl	8cf8 <MPSL_IRQ_RADIO_Handler+0x3c>
    a34c:	9908      	ldr	r1, [sp, #32]
    a34e:	eb01 0148 	add.w	r1, r1, r8, lsl #1
    a352:	7048      	strb	r0, [r1, #1]
    a354:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    a358:	2820      	cmp	r0, #32
    a35a:	bf01      	itttt	eq
    a35c:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    a360:	4438      	addeq	r0, r7
    a362:	f880 8028 	strbeq.w	r8, [r0, #40]	; 0x28
    a366:	9511      	streq	r5, [sp, #68]	; 0x44
    a368:	bf1e      	ittt	ne
    a36a:	9908      	ldrne	r1, [sp, #32]
    a36c:	eb01 0040 	addne.w	r0, r1, r0, lsl #1
    a370:	f880 8001 	strbne.w	r8, [r0, #1]
    a374:	4632      	mov	r2, r6
    a376:	4641      	mov	r1, r8
    a378:	f05f 0003 	movs.w	r0, #3
    a37c:	f7ff fb24 	bl	99c8 <MPSL_IRQ_RADIO_Handler+0xd0c>
    a380:	f1bb 0f00 	cmp.w	fp, #0
    a384:	d004      	beq.n	a390 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33c>
    a386:	2100      	movs	r1, #0
    a388:	f240 7027 	movw	r0, #1831	; 0x727
    a38c:	f3af 8000 	nop.w
    a390:	4831      	ldr	r0, [pc, #196]	; (a458 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x404>)
    a392:	2800      	cmp	r0, #0
    a394:	bf18      	it	ne
    a396:	f3af 8000 	nopne.w
    a39a:	f3ef 8810 	mrs	r8, PRIMASK
    a39e:	b672      	cpsid	i
    a3a0:	f1bb 0f00 	cmp.w	fp, #0
    a3a4:	d004      	beq.n	a3b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>
    a3a6:	2100      	movs	r1, #0
    a3a8:	f240 702d 	movw	r0, #1837	; 0x72d
    a3ac:	f3af 8000 	nop.w
    a3b0:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
    a3b4:	f88d 0020 	strb.w	r0, [sp, #32]
    a3b8:	f89d 0020 	ldrb.w	r0, [sp, #32]
    a3bc:	2800      	cmp	r0, #0
    a3be:	f47f ae97 	bne.w	a0f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    a3c2:	f1bb 0f00 	cmp.w	fp, #0
    a3c6:	d004      	beq.n	a3d2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37e>
    a3c8:	2100      	movs	r1, #0
    a3ca:	f240 7035 	movw	r0, #1845	; 0x735
    a3ce:	f3af 8000 	nop.w
    a3d2:	f10d 0e04 	add.w	lr, sp, #4
    a3d6:	e89e 100f 	ldmia.w	lr, {r0, r1, r2, r3, ip}
    a3da:	f100 0e08 	add.w	lr, r0, #8
    a3de:	e88e 100e 	stmia.w	lr, {r1, r2, r3, ip}
    a3e2:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    a3e6:	e9c0 1206 	strd	r1, r2, [r0, #24]
    a3ea:	b325      	cbz	r5, a436 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e2>
    a3ec:	f1bb 0f00 	cmp.w	fp, #0
    a3f0:	d004      	beq.n	a3fc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a8>
    a3f2:	2100      	movs	r1, #0
    a3f4:	f240 7042 	movw	r0, #1858	; 0x742
    a3f8:	f3af 8000 	nop.w
    a3fc:	f1ba 0f00 	cmp.w	sl, #0
    a400:	d146      	bne.n	a490 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    a402:	e02b      	b.n	a45c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x408>
    a404:	e7ff      	b.n	a406 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    a406:	4632      	mov	r2, r6
    a408:	4641      	mov	r1, r8
    a40a:	2004      	movs	r0, #4
    a40c:	f7ff fadc 	bl	99c8 <MPSL_IRQ_RADIO_Handler+0xd0c>
    a410:	2501      	movs	r5, #1
    a412:	e7b5      	b.n	a380 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    a414:	4632      	mov	r2, r6
    a416:	4641      	mov	r1, r8
    a418:	2004      	movs	r0, #4
    a41a:	e7af      	b.n	a37c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    a41c:	2920      	cmp	r1, #32
    a41e:	bf1d      	ittte	ne
    a420:	9808      	ldrne	r0, [sp, #32]
    a422:	eb00 0041 	addne.w	r0, r0, r1, lsl #1
    a426:	7840      	ldrbne	r0, [r0, #1]
    a428:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    a42c:	bf04      	itt	eq
    a42e:	4438      	addeq	r0, r7
    a430:	f890 0028 	ldrbeq.w	r0, [r0, #40]	; 0x28
    a434:	e78a      	b.n	a34c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f8>
    a436:	e03b      	b.n	a4b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45c>
    a438:	e000ed04 	.word	0xe000ed04
    a43c:	20001148 	.word	0x20001148
    a440:	00000000 	.word	0x00000000
    a444:	20000cc8 	.word	0x20000cc8
    a448:	00000000 	.word	0x00000000
    a44c:	200010c8 	.word	0x200010c8
    a450:	1e847fff 	.word	0x1e847fff
    a454:	0f424000 	.word	0x0f424000
    a458:	00000000 	.word	0x00000000
    a45c:	9811      	ldr	r0, [sp, #68]	; 0x44
    a45e:	f010 0fff 	tst.w	r0, #255	; 0xff
    a462:	d015      	beq.n	a490 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    a464:	f897 0042 	ldrb.w	r0, [r7, #66]	; 0x42
    a468:	2820      	cmp	r0, #32
    a46a:	d111      	bne.n	a490 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    a46c:	f1bb 0f00 	cmp.w	fp, #0
    a470:	d004      	beq.n	a47c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x428>
    a472:	2100      	movs	r1, #0
    a474:	f240 7047 	movw	r0, #1863	; 0x747
    a478:	f3af 8000 	nop.w
    a47c:	4631      	mov	r1, r6
    a47e:	2002      	movs	r0, #2
    a480:	f7ff fad4 	bl	9a2c <MPSL_IRQ_RADIO_Handler+0xd70>
    a484:	9010      	str	r0, [sp, #64]	; 0x40
    a486:	b918      	cbnz	r0, a490 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    a488:	7820      	ldrb	r0, [r4, #0]
    a48a:	b300      	cbz	r0, a4ce <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x47a>
    a48c:	2801      	cmp	r0, #1
    a48e:	d02e      	beq.n	a4ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x49a>
    a490:	f1bb 0f00 	cmp.w	fp, #0
    a494:	d004      	beq.n	a4a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x44c>
    a496:	2100      	movs	r1, #0
    a498:	f240 7064 	movw	r0, #1892	; 0x764
    a49c:	f3af 8000 	nop.w
    a4a0:	20ff      	movs	r0, #255	; 0xff
    a4a2:	f1ba 0f00 	cmp.w	sl, #0
    a4a6:	bf18      	it	ne
    a4a8:	f887 0031 	strbne.w	r0, [r7, #49]	; 0x31
    a4ac:	d029      	beq.n	a502 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4ae>
    a4ae:	2501      	movs	r5, #1
    a4b0:	f1bb 0f00 	cmp.w	fp, #0
    a4b4:	d004      	beq.n	a4c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x46c>
    a4b6:	2100      	movs	r1, #0
    a4b8:	f240 7075 	movw	r0, #1909	; 0x775
    a4bc:	f3af 8000 	nop.w
    a4c0:	9810      	ldr	r0, [sp, #64]	; 0x40
    a4c2:	4c34      	ldr	r4, [pc, #208]	; (a594 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x540>)
    a4c4:	2802      	cmp	r0, #2
    a4c6:	d025      	beq.n	a514 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4c0>
    a4c8:	2801      	cmp	r0, #1
    a4ca:	d02b      	beq.n	a524 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4d0>
    a4cc:	e02f      	b.n	a52e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
    a4ce:	f1bb 0f00 	cmp.w	fp, #0
    a4d2:	d004      	beq.n	a4de <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x48a>
    a4d4:	2100      	movs	r1, #0
    a4d6:	f240 704f 	movw	r0, #1871	; 0x74f
    a4da:	f3af 8000 	nop.w
    a4de:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
    a4e2:	2004      	movs	r0, #4
    a4e4:	9917      	ldr	r1, [sp, #92]	; 0x5c
    a4e6:	f7ff fa6f 	bl	99c8 <MPSL_IRQ_RADIO_Handler+0xd0c>
    a4ea:	2501      	movs	r5, #1
    a4ec:	e7e0      	b.n	a4b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45c>
    a4ee:	f1bb 0f00 	cmp.w	fp, #0
    a4f2:	f43f adfd 	beq.w	a0f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    a4f6:	2100      	movs	r1, #0
    a4f8:	f240 705a 	movw	r0, #1882	; 0x75a
    a4fc:	f3af 8000 	nop.w
    a500:	e5f6      	b.n	a0f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    a502:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
    a506:	2101      	movs	r1, #1
    a508:	4391      	bics	r1, r2
    a50a:	f887 1041 	strb.w	r1, [r7, #65]	; 0x41
    a50e:	f887 0031 	strb.w	r0, [r7, #49]	; 0x31
    a512:	e7cc      	b.n	a4ae <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45a>
    a514:	68b8      	ldr	r0, [r7, #8]
    a516:	ebb0 0009 	subs.w	r0, r0, r9
    a51a:	f006 fb24 	bl	10b66 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a51e:	6861      	ldr	r1, [r4, #4]
    a520:	b921      	cbnz	r1, a52c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4d8>
    a522:	e004      	b.n	a52e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
    a524:	6861      	ldr	r1, [r4, #4]
    a526:	f04f 30ff 	mov.w	r0, #4294967295
    a52a:	b101      	cbz	r1, a52e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
    a52c:	4788      	blx	r1
    a52e:	f1b8 0f00 	cmp.w	r8, #0
    a532:	d028      	beq.n	a586 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x532>
    a534:	f1bb 0f00 	cmp.w	fp, #0
    a538:	d004      	beq.n	a544 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4f0>
    a53a:	2100      	movs	r1, #0
    a53c:	f44f 60f1 	mov.w	r0, #1928	; 0x788
    a540:	f3af 8000 	nop.w
    a544:	b19d      	cbz	r5, a56e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x51a>
    a546:	f897 0041 	ldrb.w	r0, [r7, #65]	; 0x41
    a54a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    a54e:	4438      	add	r0, r7
    a550:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
    a554:	2820      	cmp	r0, #32
    a556:	d00a      	beq.n	a56e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x51a>
    a558:	f1bb 0f00 	cmp.w	fp, #0
    a55c:	d004      	beq.n	a568 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x514>
    a55e:	2100      	movs	r1, #0
    a560:	f240 708f 	movw	r0, #1935	; 0x78f
    a564:	f3af 8000 	nop.w
    a568:	7860      	ldrb	r0, [r4, #1]
    a56a:	f002 f857 	bl	c61c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a56e:	f1bb 0f00 	cmp.w	fp, #0
    a572:	d004      	beq.n	a57e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x52a>
    a574:	2100      	movs	r1, #0
    a576:	f240 7094 	movw	r0, #1940	; 0x794
    a57a:	f3af 8000 	nop.w
    a57e:	b019      	add	sp, #100	; 0x64
    a580:	4628      	mov	r0, r5
    a582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a586:	4804      	ldr	r0, [pc, #16]	; (a598 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x544>)
    a588:	2800      	cmp	r0, #0
    a58a:	bf18      	it	ne
    a58c:	f3af 8000 	nopne.w
    a590:	b662      	cpsie	i
    a592:	e7cf      	b.n	a534 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e0>
    a594:	2000030c 	.word	0x2000030c
    a598:	00000000 	.word	0x00000000

0000a59c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    a59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a5a0:	4604      	mov	r4, r0
    a5a2:	7800      	ldrb	r0, [r0, #0]
    a5a4:	b095      	sub	sp, #84	; 0x54
    a5a6:	b118      	cbz	r0, a5b0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14>
    a5a8:	b015      	add	sp, #84	; 0x54
    a5aa:	2000      	movs	r0, #0
    a5ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a5b0:	48d1      	ldr	r0, [pc, #836]	; (a8f8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x35c>)
    a5b2:	6800      	ldr	r0, [r0, #0]
    a5b4:	05c0      	lsls	r0, r0, #23
    a5b6:	0dc0      	lsrs	r0, r0, #23
    a5b8:	d00e      	beq.n	a5d8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3c>
    a5ba:	3810      	subs	r0, #16
    a5bc:	b240      	sxtb	r0, r0
    a5be:	2800      	cmp	r0, #0
    a5c0:	bfb8      	it	lt
    a5c2:	f000 000f 	andlt.w	r0, r0, #15
    a5c6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a5ca:	bfac      	ite	ge
    a5cc:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    a5d0:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    a5d4:	0940      	lsrs	r0, r0, #5
    a5d6:	d0e7      	beq.n	a5a8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc>
    a5d8:	a80d      	add	r0, sp, #52	; 0x34
    a5da:	f8df 9320 	ldr.w	r9, [pc, #800]	; a8fc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x360>
    a5de:	9009      	str	r0, [sp, #36]	; 0x24
    a5e0:	f1b9 0f00 	cmp.w	r9, #0
    a5e4:	d004      	beq.n	a5f0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x54>
    a5e6:	2100      	movs	r1, #0
    a5e8:	f240 50c5 	movw	r0, #1477	; 0x5c5
    a5ec:	f3af 8000 	nop.w
    a5f0:	f8df 830c 	ldr.w	r8, [pc, #780]	; a900 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x364>
    a5f4:	f898 6041 	ldrb.w	r6, [r8, #65]	; 0x41
    a5f8:	2500      	movs	r5, #0
    a5fa:	f888 5031 	strb.w	r5, [r8, #49]	; 0x31
    a5fe:	9503      	str	r5, [sp, #12]
    a600:	f1b9 0f00 	cmp.w	r9, #0
    a604:	d004      	beq.n	a610 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x74>
    a606:	2100      	movs	r1, #0
    a608:	f240 50ca 	movw	r0, #1482	; 0x5ca
    a60c:	f3af 8000 	nop.w
    a610:	2001      	movs	r0, #1
    a612:	ea20 0a06 	bic.w	sl, r0, r6
    a616:	48bb      	ldr	r0, [pc, #748]	; (a904 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x368>)
    a618:	2240      	movs	r2, #64	; 0x40
    a61a:	eb00 1186 	add.w	r1, r0, r6, lsl #6
    a61e:	eb00 108a 	add.w	r0, r0, sl, lsl #6
    a622:	f006 fc30 	bl	10e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a626:	f1b9 0f00 	cmp.w	r9, #0
    a62a:	d004      	beq.n	a636 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x9a>
    a62c:	2100      	movs	r1, #0
    a62e:	f240 503c 	movw	r0, #1340	; 0x53c
    a632:	f3af 8000 	nop.w
    a636:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    a63a:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    a63e:	eb01 0208 	add.w	r2, r1, r8
    a642:	4440      	add	r0, r8
    a644:	8d11      	ldrh	r1, [r2, #40]	; 0x28
    a646:	8501      	strh	r1, [r0, #40]	; 0x28
    a648:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
    a64c:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    a650:	f1b9 0f00 	cmp.w	r9, #0
    a654:	d004      	beq.n	a660 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc4>
    a656:	2100      	movs	r1, #0
    a658:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    a65c:	f3af 8000 	nop.w
    a660:	f1b9 0f00 	cmp.w	r9, #0
    a664:	d004      	beq.n	a670 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xd4>
    a666:	2100      	movs	r1, #0
    a668:	f240 50cf 	movw	r0, #1487	; 0x5cf
    a66c:	f3af 8000 	nop.w
    a670:	f001 f94e 	bl	b910 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    a674:	460f      	mov	r7, r1
    a676:	4606      	mov	r6, r0
    a678:	8921      	ldrh	r1, [r4, #8]
    a67a:	4628      	mov	r0, r5
    a67c:	f361 401f 	bfi	r0, r1, #16, #16
    a680:	4601      	mov	r1, r0
    a682:	7aa2      	ldrb	r2, [r4, #10]
    a684:	4628      	mov	r0, r5
    a686:	f362 0007 	bfi	r0, r2, #0, #8
    a68a:	7ae2      	ldrb	r2, [r4, #11]
    a68c:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
    a690:	f362 200f 	bfi	r0, r2, #8, #8
    a694:	7822      	ldrb	r2, [r4, #0]
    a696:	950a      	str	r5, [sp, #40]	; 0x28
    a698:	f362 4017 	bfi	r0, r2, #16, #8
    a69c:	e9cd 510c 	strd	r5, r1, [sp, #48]	; 0x30
    a6a0:	e9cd 050e 	strd	r0, r5, [sp, #56]	; 0x38
    a6a4:	950b      	str	r5, [sp, #44]	; 0x2c
    a6a6:	7820      	ldrb	r0, [r4, #0]
    a6a8:	b388      	cbz	r0, a70e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x172>
    a6aa:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
    a6ae:	4896      	ldr	r0, [pc, #600]	; (a908 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x36c>)
    a6b0:	f10b 020c 	add.w	r2, fp, #12
    a6b4:	1a40      	subs	r0, r0, r1
    a6b6:	a911      	add	r1, sp, #68	; 0x44
    a6b8:	f000 fe4a 	bl	b350 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    a6bc:	2200      	movs	r2, #0
    a6be:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    a6c2:	4630      	mov	r0, r6
    a6c4:	4639      	mov	r1, r7
    a6c6:	f7fe fceb 	bl	90a0 <MPSL_IRQ_RADIO_Handler+0x3e4>
    a6ca:	4684      	mov	ip, r0
    a6cc:	7ae0      	ldrb	r0, [r4, #11]
    a6ce:	460b      	mov	r3, r1
    a6d0:	2800      	cmp	r0, #0
    a6d2:	bf0c      	ite	eq
    a6d4:	207a      	moveq	r0, #122	; 0x7a
    a6d6:	204a      	movne	r0, #74	; 0x4a
    a6d8:	6861      	ldr	r1, [r4, #4]
    a6da:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
    a6de:	4408      	add	r0, r1
    a6e0:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
    a6e4:	e9cd c30a 	strd	ip, r3, [sp, #40]	; 0x28
    a6e8:	4411      	add	r1, r2
    a6ea:	4408      	add	r0, r1
    a6ec:	1c80      	adds	r0, r0, #2
    a6ee:	f000 fe13 	bl	b318 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a6f2:	f8cd a000 	str.w	sl, [sp]
    a6f6:	900c      	str	r0, [sp, #48]	; 0x30
    a6f8:	4632      	mov	r2, r6
    a6fa:	463b      	mov	r3, r7
    a6fc:	4659      	mov	r1, fp
    a6fe:	6920      	ldr	r0, [r4, #16]
    a700:	f7fe fb36 	bl	8d70 <MPSL_IRQ_RADIO_Handler+0xb4>
    a704:	2800      	cmp	r0, #0
    a706:	bf08      	it	eq
    a708:	e9cd 670a 	strdeq	r6, r7, [sp, #40]	; 0x28
    a70c:	e045      	b.n	a79a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fe>
    a70e:	e7ff      	b.n	a710 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x174>
    a710:	4630      	mov	r0, r6
    a712:	4639      	mov	r1, r7
    a714:	f000 fd9e 	bl	b254 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    a718:	4b7c      	ldr	r3, [pc, #496]	; (a90c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x370>)
    a71a:	4602      	mov	r2, r0
    a71c:	eb10 0c03 	adds.w	ip, r0, r3
    a720:	468b      	mov	fp, r1
    a722:	f141 0300 	adc.w	r3, r1, #0
    a726:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    a72a:	ebb0 0c0c 	subs.w	ip, r0, ip
    a72e:	eb71 0303 	sbcs.w	r3, r1, r3
    a732:	d22a      	bcs.n	a78a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ee>
    a734:	3229      	adds	r2, #41	; 0x29
    a736:	f14b 0300 	adc.w	r3, fp, #0
    a73a:	1a82      	subs	r2, r0, r2
    a73c:	eb71 0203 	sbcs.w	r2, r1, r3
    a740:	d323      	bcc.n	a78a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ee>
    a742:	8922      	ldrh	r2, [r4, #8]
    a744:	ab12      	add	r3, sp, #72	; 0x48
    a746:	1a80      	subs	r0, r0, r2
    a748:	eb61 0105 	sbc.w	r1, r1, r5
    a74c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a74e:	1e40      	subs	r0, r0, #1
    a750:	9200      	str	r2, [sp, #0]
    a752:	f141 31ff 	adc.w	r1, r1, #4294967295
    a756:	aa07      	add	r2, sp, #28
    a758:	f000 fda0 	bl	b29c <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    a75c:	7ae0      	ldrb	r0, [r4, #11]
    a75e:	2800      	cmp	r0, #0
    a760:	bf0c      	ite	eq
    a762:	207a      	moveq	r0, #122	; 0x7a
    a764:	204a      	movne	r0, #74	; 0x4a
    a766:	9907      	ldr	r1, [sp, #28]
    a768:	8922      	ldrh	r2, [r4, #8]
    a76a:	4408      	add	r0, r1
    a76c:	6861      	ldr	r1, [r4, #4]
    a76e:	4411      	add	r1, r2
    a770:	4408      	add	r0, r1
    a772:	1c80      	adds	r0, r0, #2
    a774:	f000 fdd0 	bl	b318 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a778:	4601      	mov	r1, r0
    a77a:	e9dd 0212 	ldrd	r0, r2, [sp, #72]	; 0x48
    a77e:	e9cd 020a 	strd	r0, r2, [sp, #40]	; 0x28
    a782:	1a08      	subs	r0, r1, r0
    a784:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a788:	e006      	b.n	a798 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fc>
    a78a:	1e70      	subs	r0, r6, #1
    a78c:	f147 31ff 	adc.w	r1, r7, #4294967295
    a790:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    a794:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    a798:	900c      	str	r0, [sp, #48]	; 0x30
    a79a:	f1b9 0f00 	cmp.w	r9, #0
    a79e:	d004      	beq.n	a7aa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x20e>
    a7a0:	2100      	movs	r1, #0
    a7a2:	f240 50d5 	movw	r0, #1493	; 0x5d5
    a7a6:	f3af 8000 	nop.w
    a7aa:	e9d8 2003 	ldrd	r2, r0, [r8, #12]
    a7ae:	f8d8 1008 	ldr.w	r1, [r8, #8]
    a7b2:	1808      	adds	r0, r1, r0
    a7b4:	eb42 0105 	adc.w	r1, r2, r5
    a7b8:	f898 2042 	ldrb.w	r2, [r8, #66]	; 0x42
    a7bc:	2a20      	cmp	r2, #32
    a7be:	d009      	beq.n	a7d4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x238>
    a7c0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    a7c4:	1a12      	subs	r2, r2, r0
    a7c6:	eb73 0201 	sbcs.w	r2, r3, r1
    a7ca:	d203      	bcs.n	a7d4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x238>
    a7cc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    a7d0:	2001      	movs	r0, #1
    a7d2:	9003      	str	r0, [sp, #12]
    a7d4:	f1b9 0f00 	cmp.w	r9, #0
    a7d8:	d004      	beq.n	a7e4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x248>
    a7da:	2100      	movs	r1, #0
    a7dc:	f44f 60bc 	mov.w	r0, #1504	; 0x5e0
    a7e0:	f3af 8000 	nop.w
    a7e4:	990a      	ldr	r1, [sp, #40]	; 0x28
    a7e6:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    a7ea:	1a0a      	subs	r2, r1, r0
    a7ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a7ee:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    a7f2:	18c9      	adds	r1, r1, r3
    a7f4:	1a08      	subs	r0, r1, r0
    a7f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a7fa:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    a7fe:	bf98      	it	ls
    a800:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    a804:	d80b      	bhi.n	a81e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    a806:	4632      	mov	r2, r6
    a808:	463b      	mov	r3, r7
    a80a:	a90a      	add	r1, sp, #40	; 0x28
    a80c:	483f      	ldr	r0, [pc, #252]	; (a90c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x370>)
    a80e:	f8cd a000 	str.w	sl, [sp]
    a812:	f7fe faad 	bl	8d70 <MPSL_IRQ_RADIO_Handler+0xb4>
    a816:	9903      	ldr	r1, [sp, #12]
    a818:	4308      	orrs	r0, r1
    a81a:	d145      	bne.n	a8a8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x30c>
    a81c:	e05f      	b.n	a8de <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x342>
    a81e:	f8bd b036 	ldrh.w	fp, [sp, #54]	; 0x36
    a822:	aa05      	add	r2, sp, #20
    a824:	a903      	add	r1, sp, #12
    a826:	4658      	mov	r0, fp
    a828:	f000 fd92 	bl	b350 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    a82c:	f001 fa8e 	bl	bd4c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    a830:	f000 fd72 	bl	b318 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a834:	4682      	mov	sl, r0
    a836:	f898 0042 	ldrb.w	r0, [r8, #66]	; 0x42
    a83a:	2820      	cmp	r0, #32
    a83c:	d00a      	beq.n	a854 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b8>
    a83e:	e9d8 2003 	ldrd	r2, r0, [r8, #12]
    a842:	f8d8 3008 	ldr.w	r3, [r8, #8]
    a846:	1d80      	adds	r0, r0, #6
    a848:	f145 0100 	adc.w	r1, r5, #0
    a84c:	181e      	adds	r6, r3, r0
    a84e:	eb42 0701 	adc.w	r7, r2, r1
    a852:	e024      	b.n	a89e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x302>
    a854:	360a      	adds	r6, #10
    a856:	f147 0700 	adc.w	r7, r7, #0
    a85a:	f1bb 0f00 	cmp.w	fp, #0
    a85e:	d017      	beq.n	a890 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f4>
    a860:	f001 fd92 	bl	c388 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a864:	b9a0      	cbnz	r0, a890 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f4>
    a866:	f001 fc49 	bl	c0fc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    a86a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    a86e:	bf08      	it	eq
    a870:	200d      	moveq	r0, #13
    a872:	d00b      	beq.n	a88c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f0>
    a874:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    a878:	3856      	subs	r0, #86	; 0x56
    a87a:	bf08      	it	eq
    a87c:	201c      	moveq	r0, #28
    a87e:	d005      	beq.n	a88c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f0>
    a880:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    a884:	389f      	subs	r0, #159	; 0x9f
    a886:	bf14      	ite	ne
    a888:	4628      	movne	r0, r5
    a88a:	2032      	moveq	r0, #50	; 0x32
    a88c:	1986      	adds	r6, r0, r6
    a88e:	416f      	adcs	r7, r5
    a890:	9803      	ldr	r0, [sp, #12]
    a892:	4582      	cmp	sl, r0
    a894:	d903      	bls.n	a89e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x302>
    a896:	ebaa 0000 	sub.w	r0, sl, r0
    a89a:	1986      	adds	r6, r0, r6
    a89c:	416f      	adcs	r7, r5
    a89e:	201f      	movs	r0, #31
    a8a0:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
    a8a4:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
    a8a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    a8ac:	f000 fcd2 	bl	b254 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    a8b0:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    a8b4:	1880      	adds	r0, r0, r2
    a8b6:	eb41 0205 	adc.w	r2, r1, r5
    a8ba:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
    a8be:	1840      	adds	r0, r0, r1
    a8c0:	eb42 0105 	adc.w	r1, r2, r5
    a8c4:	1c40      	adds	r0, r0, #1
    a8c6:	f141 0100 	adc.w	r1, r1, #0
    a8ca:	f1b9 0f00 	cmp.w	r9, #0
    a8ce:	e9c4 0104 	strd	r0, r1, [r4, #16]
    a8d2:	d004      	beq.n	a8de <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x342>
    a8d4:	2100      	movs	r1, #0
    a8d6:	f240 50fa 	movw	r0, #1530	; 0x5fa
    a8da:	f3af 8000 	nop.w
    a8de:	f898 0031 	ldrb.w	r0, [r8, #49]	; 0x31
    a8e2:	f88d 0000 	strb.w	r0, [sp]
    a8e6:	f89d 0000 	ldrb.w	r0, [sp]
    a8ea:	2800      	cmp	r0, #0
    a8ec:	f47f ae78 	bne.w	a5e0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x44>
    a8f0:	b015      	add	sp, #84	; 0x54
    a8f2:	2001      	movs	r0, #1
    a8f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a8f8:	e000ed04 	.word	0xe000ed04
    a8fc:	00000000 	.word	0x00000000
    a900:	20001148 	.word	0x20001148
    a904:	200010c8 	.word	0x200010c8
    a908:	1e847fff 	.word	0x1e847fff
    a90c:	0f424000 	.word	0x0f424000

0000a910 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    a910:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a914:	4d9d      	ldr	r5, [pc, #628]	; (ab8c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x27c>)
    a916:	b08c      	sub	sp, #48	; 0x30
    a918:	f895 0041 	ldrb.w	r0, [r5, #65]	; 0x41
    a91c:	2000      	movs	r0, #0
    a91e:	9007      	str	r0, [sp, #28]
    a920:	9008      	str	r0, [sp, #32]
    a922:	2001      	movs	r0, #1
    a924:	4c9a      	ldr	r4, [pc, #616]	; (ab90 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x280>)
    a926:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    a92a:	f04f 0800 	mov.w	r8, #0
    a92e:	4607      	mov	r7, r0
    a930:	9006      	str	r0, [sp, #24]
    a932:	b124      	cbz	r4, a93e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2e>
    a934:	2100      	movs	r1, #0
    a936:	f240 70a5 	movw	r0, #1957	; 0x7a5
    a93a:	f3af 8000 	nop.w
    a93e:	9806      	ldr	r0, [sp, #24]
    a940:	2800      	cmp	r0, #0
    a942:	d03c      	beq.n	a9be <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xae>
    a944:	f885 8031 	strb.w	r8, [r5, #49]	; 0x31
    a948:	b124      	cbz	r4, a954 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    a94a:	2100      	movs	r1, #0
    a94c:	f240 70aa 	movw	r0, #1962	; 0x7aa
    a950:	f3af 8000 	nop.w
    a954:	f895 a041 	ldrb.w	sl, [r5, #65]	; 0x41
    a958:	2240      	movs	r2, #64	; 0x40
    a95a:	ea27 060a 	bic.w	r6, r7, sl
    a95e:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    a962:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    a966:	4683      	mov	fp, r0
    a968:	f006 fa8d 	bl	10e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a96c:	b124      	cbz	r4, a978 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    a96e:	2100      	movs	r1, #0
    a970:	f240 503c 	movw	r0, #1340	; 0x53c
    a974:	f3af 8000 	nop.w
    a978:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    a97c:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    a980:	4428      	add	r0, r5
    a982:	4429      	add	r1, r5
    a984:	9000      	str	r0, [sp, #0]
    a986:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
    a988:	8502      	strh	r2, [r0, #40]	; 0x28
    a98a:	f891 102a 	ldrb.w	r1, [r1, #42]	; 0x2a
    a98e:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    a992:	b124      	cbz	r4, a99e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x8e>
    a994:	2100      	movs	r1, #0
    a996:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    a99a:	f3af 8000 	nop.w
    a99e:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    a9a2:	f88d 0008 	strb.w	r0, [sp, #8]
    a9a6:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a9aa:	b178      	cbz	r0, a9cc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    a9ac:	2c00      	cmp	r4, #0
    a9ae:	bf1c      	itt	ne
    a9b0:	2100      	movne	r1, #0
    a9b2:	f44f 60f6 	movne.w	r0, #1968	; 0x7b0
    a9b6:	d0bc      	beq.n	a932 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    a9b8:	f3af 8000 	nop.w
    a9bc:	e7b9      	b.n	a932 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    a9be:	4875      	ldr	r0, [pc, #468]	; (ab94 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x284>)
    a9c0:	2800      	cmp	r0, #0
    a9c2:	bf18      	it	ne
    a9c4:	f3af 8000 	nopne.w
    a9c8:	b662      	cpsie	i
    a9ca:	e7bb      	b.n	a944 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    a9cc:	b124      	cbz	r4, a9d8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc8>
    a9ce:	2100      	movs	r1, #0
    a9d0:	f240 70b4 	movw	r0, #1972	; 0x7b4
    a9d4:	f3af 8000 	nop.w
    a9d8:	980c      	ldr	r0, [sp, #48]	; 0x30
    a9da:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    a9de:	2803      	cmp	r0, #3
    a9e0:	d17e      	bne.n	aae0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    a9e2:	9a00      	ldr	r2, [sp, #0]
    a9e4:	990c      	ldr	r1, [sp, #48]	; 0x30
    a9e6:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
    a9ea:	4288      	cmp	r0, r1
    a9ec:	bf14      	ite	ne
    a9ee:	f04f 0a00 	movne.w	sl, #0
    a9f2:	f04f 0a01 	moveq.w	sl, #1
    a9f6:	f102 0c28 	add.w	ip, r2, #40	; 0x28
    a9fa:	4683      	mov	fp, r0
    a9fc:	2220      	movs	r2, #32
    a9fe:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    aa02:	e003      	b.n	aa0c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    aa04:	4602      	mov	r2, r0
    aa06:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    aa0a:	7840      	ldrb	r0, [r0, #1]
    aa0c:	4288      	cmp	r0, r1
    aa0e:	d002      	beq.n	aa16 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x106>
    aa10:	2820      	cmp	r0, #32
    aa12:	d00a      	beq.n	aa2a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    aa14:	e7f6      	b.n	aa04 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf4>
    aa16:	2820      	cmp	r0, #32
    aa18:	d007      	beq.n	aa2a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    aa1a:	4583      	cmp	fp, r0
    aa1c:	d107      	bne.n	aa2e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11e>
    aa1e:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    aa22:	7840      	ldrb	r0, [r0, #1]
    aa24:	f88c 0000 	strb.w	r0, [ip]
    aa28:	e007      	b.n	aa3a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12a>
    aa2a:	4640      	mov	r0, r8
    aa2c:	e00c      	b.n	aa48 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x138>
    aa2e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    aa32:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    aa36:	7840      	ldrb	r0, [r0, #1]
    aa38:	7048      	strb	r0, [r1, #1]
    aa3a:	b124      	cbz	r4, aa46 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x136>
    aa3c:	2100      	movs	r1, #0
    aa3e:	f240 40a4 	movw	r0, #1188	; 0x4a4
    aa42:	f3af 8000 	nop.w
    aa46:	4638      	mov	r0, r7
    aa48:	46c3      	mov	fp, r8
    aa4a:	ea10 0f0a 	tst.w	r0, sl
    aa4e:	bf18      	it	ne
    aa50:	46bb      	movne	fp, r7
    aa52:	2800      	cmp	r0, #0
    aa54:	d04e      	beq.n	aaf4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    aa56:	b124      	cbz	r4, aa62 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x152>
    aa58:	2100      	movs	r1, #0
    aa5a:	f240 70b9 	movw	r0, #1977	; 0x7b9
    aa5e:	f3af 8000 	nop.w
    aa62:	4632      	mov	r2, r6
    aa64:	2001      	movs	r0, #1
    aa66:	990c      	ldr	r1, [sp, #48]	; 0x30
    aa68:	f7fe ffae 	bl	99c8 <MPSL_IRQ_RADIO_Handler+0xd0c>
    aa6c:	b124      	cbz	r4, aa78 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x168>
    aa6e:	2100      	movs	r1, #0
    aa70:	f240 70c2 	movw	r0, #1986	; 0x7c2
    aa74:	f3af 8000 	nop.w
    aa78:	4847      	ldr	r0, [pc, #284]	; (ab98 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x288>)
    aa7a:	2800      	cmp	r0, #0
    aa7c:	bf18      	it	ne
    aa7e:	f3af 8000 	nopne.w
    aa82:	f3ef 8010 	mrs	r0, PRIMASK
    aa86:	b672      	cpsid	i
    aa88:	9006      	str	r0, [sp, #24]
    aa8a:	b124      	cbz	r4, aa96 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x186>
    aa8c:	2100      	movs	r1, #0
    aa8e:	f240 70c7 	movw	r0, #1991	; 0x7c7
    aa92:	f3af 8000 	nop.w
    aa96:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    aa9a:	f88d 0008 	strb.w	r0, [sp, #8]
    aa9e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    aaa2:	b138      	cbz	r0, aab4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a4>
    aaa4:	2c00      	cmp	r4, #0
    aaa6:	bf1c      	itt	ne
    aaa8:	2100      	movne	r1, #0
    aaaa:	f240 70cb 	movwne	r0, #1995	; 0x7cb
    aaae:	f43f af40 	beq.w	a932 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    aab2:	e781      	b.n	a9b8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa8>
    aab4:	f1bb 0f00 	cmp.w	fp, #0
    aab8:	d009      	beq.n	aace <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    aaba:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
    aabe:	2820      	cmp	r0, #32
    aac0:	d105      	bne.n	aace <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    aac2:	4631      	mov	r1, r6
    aac4:	2002      	movs	r0, #2
    aac6:	f7fe ffb1 	bl	9a2c <MPSL_IRQ_RADIO_Handler+0xd70>
    aaca:	9008      	str	r0, [sp, #32]
    aacc:	b1f8      	cbz	r0, ab0e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fe>
    aace:	b124      	cbz	r4, aada <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ca>
    aad0:	2100      	movs	r1, #0
    aad2:	f240 70df 	movw	r0, #2015	; 0x7df
    aad6:	f3af 8000 	nop.w
    aada:	f895 0041 	ldrb.w	r0, [r5, #65]	; 0x41
    aade:	e000      	b.n	aae2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    aae0:	e008      	b.n	aaf4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    aae2:	ea27 0000 	bic.w	r0, r7, r0
    aae6:	f885 0041 	strb.w	r0, [r5, #65]	; 0x41
    aaea:	20ff      	movs	r0, #255	; 0xff
    aaec:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    aaf0:	2001      	movs	r0, #1
    aaf2:	9007      	str	r0, [sp, #28]
    aaf4:	b124      	cbz	r4, ab00 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    aaf6:	2100      	movs	r1, #0
    aaf8:	f44f 60fd 	mov.w	r0, #2024	; 0x7e8
    aafc:	f3af 8000 	nop.w
    ab00:	9808      	ldr	r0, [sp, #32]
    ab02:	4e26      	ldr	r6, [pc, #152]	; (ab9c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x28c>)
    ab04:	2802      	cmp	r0, #2
    ab06:	d009      	beq.n	ab1c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>
    ab08:	2801      	cmp	r0, #1
    ab0a:	d027      	beq.n	ab5c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24c>
    ab0c:	e02b      	b.n	ab66 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    ab0e:	b354      	cbz	r4, ab66 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    ab10:	2100      	movs	r1, #0
    ab12:	f240 70da 	movw	r0, #2010	; 0x7da
    ab16:	f3af 8000 	nop.w
    ab1a:	e7ec      	b.n	aaf6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    ab1c:	f000 fef8 	bl	b910 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    ab20:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    ab24:	ebb3 0c00 	subs.w	ip, r3, r0
    ab28:	eb72 0c01 	sbcs.w	ip, r2, r1
    ab2c:	d204      	bcs.n	ab38 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    ab2e:	f240 71ee 	movw	r1, #2030	; 0x7ee
    ab32:	2070      	movs	r0, #112	; 0x70
    ab34:	f001 fca0 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ab38:	1a18      	subs	r0, r3, r0
    ab3a:	eb62 0101 	sbc.w	r1, r2, r1
    ab3e:	f5b0 0200 	subs.w	r2, r0, #8388608	; 0x800000
    ab42:	f171 0100 	sbcs.w	r1, r1, #0
    ab46:	d304      	bcc.n	ab52 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x242>
    ab48:	f240 71ef 	movw	r1, #2031	; 0x7ef
    ab4c:	2070      	movs	r0, #112	; 0x70
    ab4e:	f001 fc93 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ab52:	f006 f808 	bl	10b66 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    ab56:	6871      	ldr	r1, [r6, #4]
    ab58:	b129      	cbz	r1, ab66 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    ab5a:	e003      	b.n	ab64 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x254>
    ab5c:	6871      	ldr	r1, [r6, #4]
    ab5e:	f04f 30ff 	mov.w	r0, #4294967295
    ab62:	b101      	cbz	r1, ab66 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    ab64:	4788      	blx	r1
    ab66:	9806      	ldr	r0, [sp, #24]
    ab68:	b148      	cbz	r0, ab7e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x26e>
    ab6a:	b124      	cbz	r4, ab76 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x266>
    ab6c:	2100      	movs	r1, #0
    ab6e:	f240 70ff 	movw	r0, #2047	; 0x7ff
    ab72:	f3af 8000 	nop.w
    ab76:	9807      	ldr	r0, [sp, #28]
    ab78:	b00d      	add	sp, #52	; 0x34
    ab7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ab7e:	4805      	ldr	r0, [pc, #20]	; (ab94 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x284>)
    ab80:	2800      	cmp	r0, #0
    ab82:	bf18      	it	ne
    ab84:	f3af 8000 	nopne.w
    ab88:	b662      	cpsie	i
    ab8a:	e7ee      	b.n	ab6a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25a>
    ab8c:	20001148 	.word	0x20001148
	...
    ab9c:	2000030c 	.word	0x2000030c

0000aba0 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    aba0:	2820      	cmp	r0, #32
    aba2:	bf24      	itt	cs
    aba4:	2000      	movcs	r0, #0
    aba6:	4770      	bxcs	lr
    aba8:	4b03      	ldr	r3, [pc, #12]	; (abb8 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x18>)
    abaa:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    abae:	e9c0 1200 	strd	r1, r2, [r0]
    abb2:	2001      	movs	r0, #1
    abb4:	4770      	bx	lr
    abb6:	0000      	.short	0x0000
    abb8:	20000cc8 	.word	0x20000cc8

0000abbc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    abbc:	b510      	push	{r4, lr}
    abbe:	2820      	cmp	r0, #32
    abc0:	d211      	bcs.n	abe6 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    abc2:	490e      	ldr	r1, [pc, #56]	; (abfc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    abc4:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
    abc8:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    abcc:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    abd0:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    abd4:	b13b      	cbz	r3, abe6 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    abd6:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
    abda:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    abde:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    abe2:	2a01      	cmp	r2, #1
    abe4:	d001      	beq.n	abea <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    abe6:	2000      	movs	r0, #0
    abe8:	bd10      	pop	{r4, pc}
    abea:	f891 2041 	ldrb.w	r2, [r1, #65]	; 0x41
    abee:	4601      	mov	r1, r0
    abf0:	2000      	movs	r0, #0
    abf2:	f7fe fee9 	bl	99c8 <MPSL_IRQ_RADIO_Handler+0xd0c>
    abf6:	2001      	movs	r0, #1
    abf8:	bd10      	pop	{r4, pc}
    abfa:	0000      	.short	0x0000
    abfc:	20001148 	.word	0x20001148

0000ac00 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    ac00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ac04:	4e86      	ldr	r6, [pc, #536]	; (ae20 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    ac06:	4680      	mov	r8, r0
    ac08:	f896 0041 	ldrb.w	r0, [r6, #65]	; 0x41
    ac0c:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    ac10:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    ac14:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    ac18:	2800      	cmp	r0, #0
    ac1a:	d071      	beq.n	ad00 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    ac1c:	f896 9041 	ldrb.w	r9, [r6, #65]	; 0x41
    ac20:	4d80      	ldr	r5, [pc, #512]	; (ae24 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    ac22:	b125      	cbz	r5, ac2e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    ac24:	2100      	movs	r1, #0
    ac26:	f640 307b 	movw	r0, #2939	; 0xb7b
    ac2a:	f3af 8000 	nop.w
    ac2e:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    ac32:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    ac36:	2801      	cmp	r0, #1
    ac38:	d018      	beq.n	ac6c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    ac3a:	b2c0      	uxtb	r0, r0
    ac3c:	2804      	cmp	r0, #4
    ac3e:	bf1c      	itt	ne
    ac40:	2805      	cmpne	r0, #5
    ac42:	2806      	cmpne	r0, #6
    ac44:	d061      	beq.n	ad0a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    ac46:	b12d      	cbz	r5, ac54 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    ac48:	f04f 0100 	mov.w	r1, #0
    ac4c:	f640 3087 	movw	r0, #2951	; 0xb87
    ac50:	f3af 8000 	nop.w
    ac54:	f006 f8bd 	bl	10dd2 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    ac58:	b125      	cbz	r5, ac64 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    ac5a:	2100      	movs	r1, #0
    ac5c:	f640 308b 	movw	r0, #2955	; 0xb8b
    ac60:	f3af 8000 	nop.w
    ac64:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    ac68:	2801      	cmp	r0, #1
    ac6a:	d1e6      	bne.n	ac3a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    ac6c:	2401      	movs	r4, #1
    ac6e:	b125      	cbz	r5, ac7a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    ac70:	2100      	movs	r1, #0
    ac72:	f640 3092 	movw	r0, #2962	; 0xb92
    ac76:	f3af 8000 	nop.w
    ac7a:	2c00      	cmp	r4, #0
    ac7c:	d04b      	beq.n	ad16 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    ac7e:	2000      	movs	r0, #0
    ac80:	f886 0031 	strb.w	r0, [r6, #49]	; 0x31
    ac84:	b125      	cbz	r5, ac90 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    ac86:	2100      	movs	r1, #0
    ac88:	f640 3097 	movw	r0, #2967	; 0xb97
    ac8c:	f3af 8000 	nop.w
    ac90:	f896 b041 	ldrb.w	fp, [r6, #65]	; 0x41
    ac94:	2001      	movs	r0, #1
    ac96:	ea20 090b 	bic.w	r9, r0, fp
    ac9a:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    ac9e:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    aca2:	2240      	movs	r2, #64	; 0x40
    aca4:	f006 f8ef 	bl	10e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    aca8:	b125      	cbz	r5, acb4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    acaa:	2100      	movs	r1, #0
    acac:	f240 503c 	movw	r0, #1340	; 0x53c
    acb0:	f3af 8000 	nop.w
    acb4:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    acb8:	eb00 0a06 	add.w	sl, r0, r6
    acbc:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    acc0:	4430      	add	r0, r6
    acc2:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    acc4:	f8aa 1028 	strh.w	r1, [sl, #40]	; 0x28
    acc8:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    accc:	f88a 002a 	strb.w	r0, [sl, #42]	; 0x2a
    acd0:	b125      	cbz	r5, acdc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    acd2:	2100      	movs	r1, #0
    acd4:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    acd8:	f3af 8000 	nop.w
    acdc:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    ace0:	f88d 0000 	strb.w	r0, [sp]
    ace4:	f89d 0000 	ldrb.w	r0, [sp]
    ace8:	b1e0      	cbz	r0, ad24 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    acea:	2d00      	cmp	r5, #0
    acec:	bf1c      	itt	ne
    acee:	2100      	movne	r1, #0
    acf0:	f640 309d 	movwne	r0, #2973	; 0xb9d
    acf4:	d0bb      	beq.n	ac6e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    acf6:	bf00      	nop
    acf8:	f3af 8000 	nop.w
    acfc:	e7b7      	b.n	ac6e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    acfe:	e7ff      	b.n	ad00 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    ad00:	f640 3172 	movw	r1, #2930	; 0xb72
    ad04:	2070      	movs	r0, #112	; 0x70
    ad06:	f001 fbb7 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ad0a:	464a      	mov	r2, r9
    ad0c:	4641      	mov	r1, r8
    ad0e:	2001      	movs	r0, #1
    ad10:	f7fe fe5a 	bl	99c8 <MPSL_IRQ_RADIO_Handler+0xd0c>
    ad14:	e7a0      	b.n	ac58 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    ad16:	4844      	ldr	r0, [pc, #272]	; (ae28 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    ad18:	2800      	cmp	r0, #0
    ad1a:	bf18      	it	ne
    ad1c:	f3af 8000 	nopne.w
    ad20:	b662      	cpsie	i
    ad22:	e7ac      	b.n	ac7e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    ad24:	b125      	cbz	r5, ad30 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    ad26:	2100      	movs	r1, #0
    ad28:	f640 30a1 	movw	r0, #2977	; 0xba1
    ad2c:	f3af 8000 	nop.w
    ad30:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    ad34:	f10a 0129 	add.w	r1, sl, #41	; 0x29
    ad38:	4640      	mov	r0, r8
    ad3a:	461c      	mov	r4, r3
    ad3c:	f04f 0b20 	mov.w	fp, #32
    ad40:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    ad44:	f10a 0a2a 	add.w	sl, sl, #42	; 0x2a
    ad48:	e004      	b.n	ad54 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    ad4a:	46a3      	mov	fp, r4
    ad4c:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    ad50:	f89c 4001 	ldrb.w	r4, [ip, #1]
    ad54:	4284      	cmp	r4, r0
    ad56:	d002      	beq.n	ad5e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    ad58:	2c20      	cmp	r4, #32
    ad5a:	d02b      	beq.n	adb4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    ad5c:	e7f5      	b.n	ad4a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    ad5e:	2c20      	cmp	r4, #32
    ad60:	d028      	beq.n	adb4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    ad62:	42a3      	cmp	r3, r4
    ad64:	d104      	bne.n	ad70 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    ad66:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    ad6a:	7840      	ldrb	r0, [r0, #1]
    ad6c:	7008      	strb	r0, [r1, #0]
    ad6e:	e005      	b.n	ad7c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    ad70:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    ad74:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    ad78:	7840      	ldrb	r0, [r0, #1]
    ad7a:	7048      	strb	r0, [r1, #1]
    ad7c:	f1ba 0f00 	cmp.w	sl, #0
    ad80:	d011      	beq.n	ada6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    ad82:	b125      	cbz	r5, ad8e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    ad84:	2100      	movs	r1, #0
    ad86:	f240 409c 	movw	r0, #1180	; 0x49c
    ad8a:	f3af 8000 	nop.w
    ad8e:	f89a 0000 	ldrb.w	r0, [sl]
    ad92:	42a0      	cmp	r0, r4
    ad94:	d107      	bne.n	ada6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    ad96:	b125      	cbz	r5, ada2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    ad98:	2100      	movs	r1, #0
    ad9a:	f240 409f 	movw	r0, #1183	; 0x49f
    ad9e:	f3af 8000 	nop.w
    ada2:	f88a b000 	strb.w	fp, [sl]
    ada6:	b15d      	cbz	r5, adc0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    ada8:	2100      	movs	r1, #0
    adaa:	f240 40a4 	movw	r0, #1188	; 0x4a4
    adae:	f3af 8000 	nop.w
    adb2:	e000      	b.n	adb6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    adb4:	b125      	cbz	r5, adc0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    adb6:	2100      	movs	r1, #0
    adb8:	f640 30a5 	movw	r0, #2981	; 0xba5
    adbc:	f3af 8000 	nop.w
    adc0:	481a      	ldr	r0, [pc, #104]	; (ae2c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    adc2:	2800      	cmp	r0, #0
    adc4:	bf18      	it	ne
    adc6:	f3af 8000 	nopne.w
    adca:	f3ef 8410 	mrs	r4, PRIMASK
    adce:	b672      	cpsid	i
    add0:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    add4:	f88d 0000 	strb.w	r0, [sp]
    add8:	f89d 0000 	ldrb.w	r0, [sp]
    addc:	b138      	cbz	r0, adee <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    adde:	2d00      	cmp	r5, #0
    ade0:	bf1c      	itt	ne
    ade2:	2100      	movne	r1, #0
    ade4:	f640 30ab 	movwne	r0, #2987	; 0xbab
    ade8:	f43f af41 	beq.w	ac6e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    adec:	e784      	b.n	acf8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    adee:	f886 9041 	strb.w	r9, [r6, #65]	; 0x41
    adf2:	20ff      	movs	r0, #255	; 0xff
    adf4:	f886 0031 	strb.w	r0, [r6, #49]	; 0x31
    adf8:	b154      	cbz	r4, ae10 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    adfa:	2d00      	cmp	r5, #0
    adfc:	bf08      	it	eq
    adfe:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ae02:	2100      	movs	r1, #0
    ae04:	f640 30b8 	movw	r0, #3000	; 0xbb8
    ae08:	f3af 8000 	nop.w
    ae0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ae10:	4805      	ldr	r0, [pc, #20]	; (ae28 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    ae12:	2800      	cmp	r0, #0
    ae14:	bf18      	it	ne
    ae16:	f3af 8000 	nopne.w
    ae1a:	b662      	cpsie	i
    ae1c:	e7ed      	b.n	adfa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    ae1e:	0000      	.short	0x0000
    ae20:	20001148 	.word	0x20001148
	...

0000ae30 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    ae30:	b570      	push	{r4, r5, r6, lr}
    ae32:	460d      	mov	r5, r1
    ae34:	4606      	mov	r6, r0
    ae36:	f001 fa95 	bl	c364 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    ae3a:	480d      	ldr	r0, [pc, #52]	; (ae70 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x40>)
    ae3c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    ae40:	2400      	movs	r4, #0
    ae42:	3880      	subs	r0, #128	; 0x80
    ae44:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    ae48:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    ae4c:	b129      	cbz	r1, ae5a <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    ae4e:	1c61      	adds	r1, r4, #1
    ae50:	b2cc      	uxtb	r4, r1
    ae52:	2c20      	cmp	r4, #32
    ae54:	d3f8      	bcc.n	ae48 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    ae56:	2020      	movs	r0, #32
    ae58:	bd70      	pop	{r4, r5, r6, pc}
    ae5a:	4806      	ldr	r0, [pc, #24]	; (ae74 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x44>)
    ae5c:	4621      	mov	r1, r4
    ae5e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    ae62:	e9c0 6500 	strd	r6, r5, [r0]
    ae66:	2001      	movs	r0, #1
    ae68:	f7fe fdae 	bl	99c8 <MPSL_IRQ_RADIO_Handler+0xd0c>
    ae6c:	4620      	mov	r0, r4
    ae6e:	bd70      	pop	{r4, r5, r6, pc}
    ae70:	20001148 	.word	0x20001148
    ae74:	20000cc8 	.word	0x20000cc8

0000ae78 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    ae78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ae7c:	f000 fd48 	bl	b910 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    ae80:	4606      	mov	r6, r0
    ae82:	460f      	mov	r7, r1
    ae84:	f000 fe88 	bl	bb98 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    ae88:	4c65      	ldr	r4, [pc, #404]	; (b020 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a8>)
    ae8a:	6860      	ldr	r0, [r4, #4]
    ae8c:	f1b0 3fff 	cmp.w	r0, #4294967295
    ae90:	bf1c      	itt	ne
    ae92:	f04f 30ff 	movne.w	r0, #4294967295
    ae96:	6060      	strne	r0, [r4, #4]
    ae98:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    ae9c:	f8df b184 	ldr.w	fp, [pc, #388]	; b024 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1ac>
    aea0:	2500      	movs	r5, #0
    aea2:	bb10      	cbnz	r0, aeea <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x72>
    aea4:	f44f 710c 	mov.w	r1, #560	; 0x230
    aea8:	6920      	ldr	r0, [r4, #16]
    aeaa:	f001 fa47 	bl	c33c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    aeae:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    aeb2:	68a1      	ldr	r1, [r4, #8]
    aeb4:	1818      	adds	r0, r3, r0
    aeb6:	eb45 0305 	adc.w	r3, r5, r5
    aeba:	1809      	adds	r1, r1, r0
    aebc:	eb42 0003 	adc.w	r0, r2, r3
    aec0:	1a71      	subs	r1, r6, r1
    aec2:	eb77 0000 	sbcs.w	r0, r7, r0
    aec6:	d310      	bcc.n	aeea <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x72>
    aec8:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    aecc:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    aed0:	eb0b 1040 	add.w	r0, fp, r0, lsl #5
    aed4:	6840      	ldr	r0, [r0, #4]
    aed6:	eb0b 1141 	add.w	r1, fp, r1, lsl #5
    aeda:	680a      	ldr	r2, [r1, #0]
    aedc:	2108      	movs	r1, #8
    aede:	4790      	blx	r2
    aee0:	f44f 716d 	mov.w	r1, #948	; 0x3b4
    aee4:	2070      	movs	r0, #112	; 0x70
    aee6:	f001 fac7 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    aeea:	7e60      	ldrb	r0, [r4, #25]
    aeec:	b180      	cbz	r0, af10 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    aeee:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    aef2:	f88d 0000 	strb.w	r0, [sp]
    aef6:	f89d 0000 	ldrb.w	r0, [sp]
    aefa:	b148      	cbz	r0, af10 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    aefc:	f000 fc7e 	bl	b7fc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    af00:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    af04:	b150      	cbz	r0, af1c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    af06:	f240 31cd 	movw	r1, #973	; 0x3cd
    af0a:	2070      	movs	r0, #112	; 0x70
    af0c:	f001 fab4 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    af10:	1cf0      	adds	r0, r6, #3
    af12:	f147 0100 	adc.w	r1, r7, #0
    af16:	f000 fb4b 	bl	b5b0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    af1a:	e7f1      	b.n	af00 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x88>
    af1c:	2001      	movs	r0, #1
    af1e:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    af22:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    af26:	2820      	cmp	r0, #32
    af28:	d020      	beq.n	af6c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xf4>
    af2a:	f894 9042 	ldrb.w	r9, [r4, #66]	; 0x42
    af2e:	2020      	movs	r0, #32
    af30:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    af34:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    af38:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
    af3c:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
    af40:	6025      	str	r5, [r4, #0]
    af42:	f000 ff09 	bl	bd58 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    af46:	f884 0020 	strb.w	r0, [r4, #32]
    af4a:	f894 8041 	ldrb.w	r8, [r4, #65]	; 0x41
    af4e:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    af52:	eb00 0a04 	add.w	sl, r0, r4
    af56:	f89a 0028 	ldrb.w	r0, [sl, #40]	; 0x28
    af5a:	2820      	cmp	r0, #32
    af5c:	d01c      	beq.n	af98 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    af5e:	eb0b 1b40 	add.w	fp, fp, r0, lsl #5
    af62:	f89b 001a 	ldrb.w	r0, [fp, #26]
    af66:	2801      	cmp	r0, #1
    af68:	d005      	beq.n	af76 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfe>
    af6a:	e015      	b.n	af98 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    af6c:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    af70:	2070      	movs	r0, #112	; 0x70
    af72:	f001 fa81 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    af76:	2201      	movs	r2, #1
    af78:	f8bb 3016 	ldrh.w	r3, [fp, #22]
    af7c:	4630      	mov	r0, r6
    af7e:	4639      	mov	r1, r7
    af80:	f7fe f88e 	bl	90a0 <MPSL_IRQ_RADIO_Handler+0x3e4>
    af84:	e9db 2302 	ldrd	r2, r3, [fp, #8]
    af88:	1a12      	subs	r2, r2, r0
    af8a:	eb73 0201 	sbcs.w	r2, r3, r1
    af8e:	bf24      	itt	cs
    af90:	f10b 0208 	addcs.w	r2, fp, #8
    af94:	e9c2 0100 	strdcs	r0, r1, [r2]
    af98:	4641      	mov	r1, r8
    af9a:	2001      	movs	r0, #1
    af9c:	f7fe fd46 	bl	9a2c <MPSL_IRQ_RADIO_Handler+0xd70>
    afa0:	0007      	movs	r7, r0
    afa2:	d0f9      	beq.n	af98 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    afa4:	4820      	ldr	r0, [pc, #128]	; (b028 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    afa6:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    afaa:	f810 0019 	ldrb.w	r0, [r0, r9, lsl #1]
    afae:	2802      	cmp	r0, #2
    afb0:	d104      	bne.n	afbc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x144>
    afb2:	4642      	mov	r2, r8
    afb4:	4649      	mov	r1, r9
    afb6:	2006      	movs	r0, #6
    afb8:	f7fe fd06 	bl	99c8 <MPSL_IRQ_RADIO_Handler+0xd0c>
    afbc:	20ff      	movs	r0, #255	; 0xff
    afbe:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
    afc2:	f89a 0029 	ldrb.w	r0, [sl, #41]	; 0x29
    afc6:	f8df 8064 	ldr.w	r8, [pc, #100]	; b02c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>
    afca:	2820      	cmp	r0, #32
    afcc:	bf1c      	itt	ne
    afce:	f898 0001 	ldrbne.w	r0, [r8, #1]
    afd2:	f001 fb23 	blne	c61c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    afd6:	f894 0020 	ldrb.w	r0, [r4, #32]
    afda:	b128      	cbz	r0, afe8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x170>
    afdc:	f000 fe98 	bl	bd10 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    afe0:	f884 5020 	strb.w	r5, [r4, #32]
    afe4:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
    afe8:	2f02      	cmp	r7, #2
    afea:	d00f      	beq.n	b00c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x194>
    afec:	2f01      	cmp	r7, #1
    afee:	bf18      	it	ne
    aff0:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aff4:	f04f 30ff 	mov.w	r0, #4294967295
    aff8:	f8d8 1004 	ldr.w	r1, [r8, #4]
    affc:	2900      	cmp	r1, #0
    affe:	bf08      	it	eq
    b000:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b004:	b001      	add	sp, #4
    b006:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b00a:	4708      	bx	r1
    b00c:	68a0      	ldr	r0, [r4, #8]
    b00e:	1b80      	subs	r0, r0, r6
    b010:	f005 fda9 	bl	10b66 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b014:	f8d8 1004 	ldr.w	r1, [r8, #4]
    b018:	2900      	cmp	r1, #0
    b01a:	d1f3      	bne.n	b004 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x18c>
    b01c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b020:	20001148 	.word	0x20001148
    b024:	20000cc8 	.word	0x20000cc8
    b028:	200010c8 	.word	0x200010c8
    b02c:	2000030c 	.word	0x2000030c

0000b030 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    b030:	b570      	push	{r4, r5, r6, lr}
    b032:	4c42      	ldr	r4, [pc, #264]	; (b13c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x10c>)
    b034:	4605      	mov	r5, r0
    b036:	b082      	sub	sp, #8
    b038:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    b03c:	2820      	cmp	r0, #32
    b03e:	d008      	beq.n	b052 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    b040:	6860      	ldr	r0, [r4, #4]
    b042:	f1b0 3fff 	cmp.w	r0, #4294967295
    b046:	d009      	beq.n	b05c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    b048:	f640 21b6 	movw	r1, #2742	; 0xab6
    b04c:	2070      	movs	r0, #112	; 0x70
    b04e:	f001 fa13 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b052:	f640 21b5 	movw	r1, #2741	; 0xab5
    b056:	2070      	movs	r0, #112	; 0x70
    b058:	f001 fa0e 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b05c:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    b060:	4937      	ldr	r1, [pc, #220]	; (b140 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x110>)
    b062:	eb01 1640 	add.w	r6, r1, r0, lsl #5
    b066:	68b0      	ldr	r0, [r6, #8]
    b068:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b06c:	f005 fd7b 	bl	10b66 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b070:	4602      	mov	r2, r0
    b072:	8af0      	ldrh	r0, [r6, #22]
    b074:	7d31      	ldrb	r1, [r6, #20]
    b076:	4b33      	ldr	r3, [pc, #204]	; (b144 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x114>)
    b078:	4408      	add	r0, r1
    b07a:	1c40      	adds	r0, r0, #1
    b07c:	1811      	adds	r1, r2, r0
    b07e:	429a      	cmp	r2, r3
    b080:	d817      	bhi.n	b0b2 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x82>
    b082:	4a31      	ldr	r2, [pc, #196]	; (b148 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x118>)
    b084:	4290      	cmp	r0, r2
    b086:	dc1b      	bgt.n	b0c0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    b088:	f1c2 0c00 	rsb	ip, r2, #0
    b08c:	4560      	cmp	r0, ip
    b08e:	db1e      	blt.n	b0ce <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9e>
    b090:	0056      	lsls	r6, r2, #1
    b092:	428e      	cmp	r6, r1
    b094:	bfdc      	itt	le
    b096:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    b09a:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    b09e:	dd05      	ble.n	b0ac <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    b0a0:	2900      	cmp	r1, #0
    b0a2:	bfbc      	itt	lt
    b0a4:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    b0a8:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    b0ac:	1948      	adds	r0, r1, r5
    b0ae:	4299      	cmp	r1, r3
    b0b0:	d904      	bls.n	b0bc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x8c>
    b0b2:	f240 517f 	movw	r1, #1407	; 0x57f
    b0b6:	2070      	movs	r0, #112	; 0x70
    b0b8:	f001 f9de 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b0bc:	4295      	cmp	r5, r2
    b0be:	dd04      	ble.n	b0ca <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9a>
    b0c0:	f44f 61b0 	mov.w	r1, #1408	; 0x580
    b0c4:	2070      	movs	r0, #112	; 0x70
    b0c6:	f001 f9d7 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b0ca:	4565      	cmp	r5, ip
    b0cc:	da04      	bge.n	b0d8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xa8>
    b0ce:	f240 5181 	movw	r1, #1409	; 0x581
    b0d2:	2070      	movs	r0, #112	; 0x70
    b0d4:	f001 f9d0 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b0d8:	4286      	cmp	r6, r0
    b0da:	bfdc      	itt	le
    b0dc:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    b0e0:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    b0e4:	dd05      	ble.n	b0f2 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc2>
    b0e6:	2800      	cmp	r0, #0
    b0e8:	bfbc      	itt	lt
    b0ea:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    b0ee:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    b0f2:	aa01      	add	r2, sp, #4
    b0f4:	4669      	mov	r1, sp
    b0f6:	f000 f92b 	bl	b350 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    b0fa:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b0fe:	280f      	cmp	r0, #15
    b100:	bf8c      	ite	hi
    b102:	2001      	movhi	r0, #1
    b104:	2000      	movls	r0, #0
    b106:	9900      	ldr	r1, [sp, #0]
    b108:	4408      	add	r0, r1
    b10a:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    b10e:	6061      	str	r1, [r4, #4]
    b110:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    b114:	f88d 0000 	strb.w	r0, [sp]
    b118:	f89d 0000 	ldrb.w	r0, [sp]
    b11c:	2800      	cmp	r0, #0
    b11e:	bf04      	itt	eq
    b120:	b002      	addeq	sp, #8
    b122:	bd70      	popeq	{r4, r5, r6, pc}
    b124:	2005      	movs	r0, #5
    b126:	f000 fc15 	bl	b954 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    b12a:	2800      	cmp	r0, #0
    b12c:	bf1c      	itt	ne
    b12e:	b002      	addne	sp, #8
    b130:	bd70      	popne	{r4, r5, r6, pc}
    b132:	f640 21bd 	movw	r1, #2749	; 0xabd
    b136:	2070      	movs	r0, #112	; 0x70
    b138:	f001 f99e 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b13c:	20001148 	.word	0x20001148
    b140:	20000cc8 	.word	0x20000cc8
    b144:	1e847fff 	.word	0x1e847fff
    b148:	0f424000 	.word	0x0f424000

0000b14c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    b14c:	b570      	push	{r4, r5, r6, lr}
    b14e:	4c1e      	ldr	r4, [pc, #120]	; (b1c8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    b150:	2120      	movs	r1, #32
    b152:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    b156:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
    b15a:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
    b15e:	2000      	movs	r0, #0
    b160:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    b164:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    b168:	1e42      	subs	r2, r0, #1
    b16a:	e9c4 0200 	strd	r0, r2, [r4]
    b16e:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
    b172:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    b176:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    b17a:	f884 0020 	strb.w	r0, [r4, #32]
    b17e:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    b182:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    b186:	1e41      	subs	r1, r0, #1
    b188:	e9c4 110e 	strd	r1, r1, [r4, #56]	; 0x38
    b18c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    b190:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    b194:	2210      	movs	r2, #16
    b196:	7088      	strb	r0, [r1, #2]
    b198:	f801 0f04 	strb.w	r0, [r1, #4]!
    b19c:	1e52      	subs	r2, r2, #1
    b19e:	d1fa      	bne.n	b196 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4a>
    b1a0:	f000 fde4 	bl	bd6c <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    b1a4:	4d09      	ldr	r5, [pc, #36]	; (b1cc <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    b1a6:	2601      	movs	r6, #1
    b1a8:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    b1ac:	20ff      	movs	r0, #255	; 0xff
    b1ae:	7028      	strb	r0, [r5, #0]
    b1b0:	4807      	ldr	r0, [pc, #28]	; (b1d0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    b1b2:	f001 fa15 	bl	c5e0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    b1b6:	7068      	strb	r0, [r5, #1]
    b1b8:	f001 fa80 	bl	c6bc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    b1bc:	60a8      	str	r0, [r5, #8]
    b1be:	f000 fd67 	bl	bc90 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    b1c2:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
    b1c6:	bd70      	pop	{r4, r5, r6, pc}
    b1c8:	20001148 	.word	0x20001148
    b1cc:	2000030c 	.word	0x2000030c
    b1d0:	000098f9 	.word	0x000098f9

0000b1d4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    b1d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b1d6:	4607      	mov	r7, r0
    b1d8:	b087      	sub	sp, #28
    b1da:	461d      	mov	r5, r3
    b1dc:	460e      	mov	r6, r1
    b1de:	4610      	mov	r0, r2
    b1e0:	f005 fcc1 	bl	10b66 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b1e4:	4604      	mov	r4, r0
    b1e6:	a803      	add	r0, sp, #12
    b1e8:	9000      	str	r0, [sp, #0]
    b1ea:	ab04      	add	r3, sp, #16
    b1ec:	aa02      	add	r2, sp, #8
    b1ee:	4638      	mov	r0, r7
    b1f0:	4631      	mov	r1, r6
    b1f2:	f000 f853 	bl	b29c <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    b1f6:	9902      	ldr	r1, [sp, #8]
    b1f8:	4a14      	ldr	r2, [pc, #80]	; (b24c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x78>)
    b1fa:	1a60      	subs	r0, r4, r1
    b1fc:	2300      	movs	r3, #0
    b1fe:	1a82      	subs	r2, r0, r2
    b200:	f173 0200 	sbcs.w	r2, r3, #0
    b204:	d318      	bcc.n	b238 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x64>
    b206:	f8df c044 	ldr.w	ip, [pc, #68]	; b24c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x78>
    b20a:	1b0a      	subs	r2, r1, r4
    b20c:	ebb2 0c0c 	subs.w	ip, r2, ip
    b210:	f173 0300 	sbcs.w	r3, r3, #0
    b214:	d310      	bcc.n	b238 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x64>
    b216:	4b0e      	ldr	r3, [pc, #56]	; (b250 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x7c>)
    b218:	4283      	cmp	r3, r0
    b21a:	bf3e      	ittt	cc
    b21c:	f5c1 2090 	rsbcc	r0, r1, #294912	; 0x48000
    b220:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    b224:	4420      	addcc	r0, r4
    b226:	d307      	bcc.n	b238 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x64>
    b228:	4293      	cmp	r3, r2
    b22a:	d209      	bcs.n	b240 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x6c>
    b22c:	f5c4 2090 	rsb	r0, r4, #294912	; 0x48000
    b230:	f100 50f4 	add.w	r0, r0, #511705088	; 0x1e800000
    b234:	4408      	add	r0, r1
    b236:	4240      	negs	r0, r0
    b238:	300f      	adds	r0, #15
    b23a:	b007      	add	sp, #28
    b23c:	1a28      	subs	r0, r5, r0
    b23e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b240:	f640 21d7 	movw	r1, #2775	; 0xad7
    b244:	2070      	movs	r0, #112	; 0x70
    b246:	f001 f917 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b24a:	0000      	.short	0x0000
    b24c:	0f424000 	.word	0x0f424000
    b250:	1e847fff 	.word	0x1e847fff

0000b254 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>:
    b254:	0e03      	lsrs	r3, r0, #24
    b256:	b430      	push	{r4, r5}
    b258:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    b25c:	f8df c038 	ldr.w	ip, [pc, #56]	; b298 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY+0x44>
    b260:	0e09      	lsrs	r1, r1, #24
    b262:	fba3 250c 	umull	r2, r5, r3, ip
    b266:	fb01 510c 	mla	r1, r1, ip, r5
    b26a:	2400      	movs	r4, #0
    b26c:	fb03 1104 	mla	r1, r3, r4, r1
    b270:	f647 73ff 	movw	r3, #32767	; 0x7fff
    b274:	ea03 2350 	and.w	r3, r3, r0, lsr #9
    b278:	f643 5c09 	movw	ip, #15625	; 0x3d09
    b27c:	fb13 f30c 	smulbb	r3, r3, ip
    b280:	f3c0 0008 	ubfx	r0, r0, #0, #9
    b284:	fb10 f00c 	smulbb	r0, r0, ip
    b288:	f500 7080 	add.w	r0, r0, #256	; 0x100
    b28c:	eb03 2050 	add.w	r0, r3, r0, lsr #9
    b290:	1880      	adds	r0, r0, r2
    b292:	4161      	adcs	r1, r4
    b294:	bc30      	pop	{r4, r5}
    b296:	4770      	bx	lr
    b298:	1e848000 	.word	0x1e848000

0000b29c <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>:
    b29c:	b570      	push	{r4, r5, r6, lr}
    b29e:	b084      	sub	sp, #16
    b2a0:	4615      	mov	r5, r2
    b2a2:	aa01      	add	r2, sp, #4
    b2a4:	461c      	mov	r4, r3
    b2a6:	9200      	str	r2, [sp, #0]
    b2a8:	9e08      	ldr	r6, [sp, #32]
    b2aa:	ab02      	add	r3, sp, #8
    b2ac:	4a17      	ldr	r2, [pc, #92]	; (b30c <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x70>)
    b2ae:	f005 fddb 	bl	10e68 <sym_ZY67JFDYC72ZRZASFF2HOA7TV55LM74BXABVWRI>
    b2b2:	9801      	ldr	r0, [sp, #4]
    b2b4:	f248 6237 	movw	r2, #34359	; 0x8637
    b2b8:	0b41      	lsrs	r1, r0, #13
    b2ba:	4351      	muls	r1, r2
    b2bc:	0c09      	lsrs	r1, r1, #16
    b2be:	4a14      	ldr	r2, [pc, #80]	; (b310 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x74>)
    b2c0:	024b      	lsls	r3, r1, #9
    b2c2:	fb01 0102 	mla	r1, r1, r2, r0
    b2c6:	4813      	ldr	r0, [pc, #76]	; (b314 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x78>)
    b2c8:	4348      	muls	r0, r1
    b2ca:	0d42      	lsrs	r2, r0, #21
    b2cc:	1898      	adds	r0, r3, r2
    b2ce:	f643 5309 	movw	r3, #15625	; 0x3d09
    b2d2:	fb12 f303 	smulbb	r3, r2, r3
    b2d6:	f503 7280 	add.w	r2, r3, #256	; 0x100
    b2da:	f643 5c08 	movw	ip, #15624	; 0x3d08
    b2de:	eba1 2252 	sub.w	r2, r1, r2, lsr #9
    b2e2:	4463      	add	r3, ip
    b2e4:	b2d2      	uxtb	r2, r2
    b2e6:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
    b2ea:	bf84      	itt	hi
    b2ec:	2200      	movhi	r2, #0
    b2ee:	1c40      	addhi	r0, r0, #1
    b2f0:	7032      	strb	r2, [r6, #0]
    b2f2:	9b02      	ldr	r3, [sp, #8]
    b2f4:	0a19      	lsrs	r1, r3, #8
    b2f6:	061b      	lsls	r3, r3, #24
    b2f8:	1818      	adds	r0, r3, r0
    b2fa:	f141 0100 	adc.w	r1, r1, #0
    b2fe:	e9c4 0100 	strd	r0, r1, [r4]
    b302:	9801      	ldr	r0, [sp, #4]
    b304:	6028      	str	r0, [r5, #0]
    b306:	b004      	add	sp, #16
    b308:	bd70      	pop	{r4, r5, r6, pc}
    b30a:	0000      	.short	0x0000
    b30c:	1e848000 	.word	0x1e848000
    b310:	ffffc2f7 	.word	0xffffc2f7
    b314:	00010c6f 	.word	0x00010c6f

0000b318 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    b318:	0b41      	lsrs	r1, r0, #13
    b31a:	f248 6237 	movw	r2, #34359	; 0x8637
    b31e:	4351      	muls	r1, r2
    b320:	0c0a      	lsrs	r2, r1, #16
    b322:	4b09      	ldr	r3, [pc, #36]	; (b348 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    b324:	0251      	lsls	r1, r2, #9
    b326:	fb02 0203 	mla	r2, r2, r3, r0
    b32a:	4808      	ldr	r0, [pc, #32]	; (b34c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    b32c:	4350      	muls	r0, r2
    b32e:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    b332:	306e      	adds	r0, #110	; 0x6e
    b334:	0d40      	lsrs	r0, r0, #21
    b336:	425b      	negs	r3, r3
    b338:	fb10 f303 	smulbb	r3, r0, r3
    b33c:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    b340:	bf88      	it	hi
    b342:	1c49      	addhi	r1, r1, #1
    b344:	4408      	add	r0, r1
    b346:	4770      	bx	lr
    b348:	ffffc2f7 	.word	0xffffc2f7
    b34c:	00010c6f 	.word	0x00010c6f

0000b350 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    b350:	0b43      	lsrs	r3, r0, #13
    b352:	f248 6c37 	movw	ip, #34359	; 0x8637
    b356:	fb03 f30c 	mul.w	r3, r3, ip
    b35a:	b430      	push	{r4, r5}
    b35c:	0c1b      	lsrs	r3, r3, #16
    b35e:	f8df c044 	ldr.w	ip, [pc, #68]	; b3a4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    b362:	025c      	lsls	r4, r3, #9
    b364:	fb03 030c 	mla	r3, r3, ip, r0
    b368:	480f      	ldr	r0, [pc, #60]	; (b3a8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    b36a:	4358      	muls	r0, r3
    b36c:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    b370:	eb04 000c 	add.w	r0, r4, ip
    b374:	f643 5409 	movw	r4, #15625	; 0x3d09
    b378:	fb1c f404 	smulbb	r4, ip, r4
    b37c:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    b380:	f643 5508 	movw	r5, #15624	; 0x3d08
    b384:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    b388:	442c      	add	r4, r5
    b38a:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    b38e:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    b392:	bf84      	itt	hi
    b394:	f04f 0c00 	movhi.w	ip, #0
    b398:	1c40      	addhi	r0, r0, #1
    b39a:	6008      	str	r0, [r1, #0]
    b39c:	f882 c000 	strb.w	ip, [r2]
    b3a0:	bc30      	pop	{r4, r5}
    b3a2:	4770      	bx	lr
    b3a4:	ffffc2f7 	.word	0xffffc2f7
    b3a8:	00010c6f 	.word	0x00010c6f

0000b3ac <MPSL_IRQ_RTC0_Handler>:
    b3ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b3b0:	2400      	movs	r4, #0
    b3b2:	f8df 9080 	ldr.w	r9, [pc, #128]	; b434 <MPSL_IRQ_RTC0_Handler+0x88>
    b3b6:	4d20      	ldr	r5, [pc, #128]	; (b438 <MPSL_IRQ_RTC0_Handler+0x8c>)
    b3b8:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    b3bc:	f44f 78a0 	mov.w	r8, #320	; 0x140
    b3c0:	ea4f 0604 	mov.w	r6, r4
    b3c4:	f8d5 2304 	ldr.w	r2, [r5, #772]	; 0x304
    b3c8:	fa07 f004 	lsl.w	r0, r7, r4
    b3cc:	eb08 0184 	add.w	r1, r8, r4, lsl #2
    b3d0:	4202      	tst	r2, r0
    b3d2:	d01a      	beq.n	b40a <MPSL_IRQ_RTC0_Handler+0x5e>
    b3d4:	4a18      	ldr	r2, [pc, #96]	; (b438 <MPSL_IRQ_RTC0_Handler+0x8c>)
    b3d6:	5852      	ldr	r2, [r2, r1]
    b3d8:	b1ba      	cbz	r2, b40a <MPSL_IRQ_RTC0_Handler+0x5e>
    b3da:	506e      	str	r6, [r5, r1]
    b3dc:	00a1      	lsls	r1, r4, #2
    b3de:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    b3e2:	f501 4130 	add.w	r1, r1, #45056	; 0xb000
    b3e6:	f8d1 1540 	ldr.w	r1, [r1, #1344]	; 0x540
    b3ea:	f8d9 2000 	ldr.w	r2, [r9]
    b3ee:	1a89      	subs	r1, r1, r2
    b3f0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    b3f4:	2902      	cmp	r1, #2
    b3f6:	d302      	bcc.n	b3fe <MPSL_IRQ_RTC0_Handler+0x52>
    b3f8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    b3fc:	d905      	bls.n	b40a <MPSL_IRQ_RTC0_Handler+0x5e>
    b3fe:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b402:	1d20      	adds	r0, r4, #4
    b404:	b2c0      	uxtb	r0, r0
    b406:	f7fe fd3f 	bl	9e88 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b40a:	1c60      	adds	r0, r4, #1
    b40c:	b2c4      	uxtb	r4, r0
    b40e:	2c03      	cmp	r4, #3
    b410:	d3d8      	bcc.n	b3c4 <MPSL_IRQ_RTC0_Handler+0x18>
    b412:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b416:	b128      	cbz	r0, b424 <MPSL_IRQ_RTC0_Handler+0x78>
    b418:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    b41c:	4807      	ldr	r0, [pc, #28]	; (b43c <MPSL_IRQ_RTC0_Handler+0x90>)
    b41e:	6881      	ldr	r1, [r0, #8]
    b420:	1c49      	adds	r1, r1, #1
    b422:	6081      	str	r1, [r0, #8]
    b424:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    b428:	f44f 6000 	mov.w	r0, #2048	; 0x800
    b42c:	f8c1 0280 	str.w	r0, [r1, #640]	; 0x280
    b430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b434:	4000b504 	.word	0x4000b504
    b438:	4000b000 	.word	0x4000b000
    b43c:	20000028 	.word	0x20000028

0000b440 <MPSL_IRQ_TIMER0_Handler>:
    b440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b444:	4d38      	ldr	r5, [pc, #224]	; (b528 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    b446:	7828      	ldrb	r0, [r5, #0]
    b448:	2804      	cmp	r0, #4
    b44a:	d068      	beq.n	b51e <MPSL_IRQ_TIMER0_Handler+0xde>
    b44c:	1ca8      	adds	r0, r5, #2
    b44e:	2201      	movs	r2, #1
    b450:	7801      	ldrb	r1, [r0, #0]
    b452:	b159      	cbz	r1, b46c <MPSL_IRQ_TIMER0_Handler+0x2c>
    b454:	2901      	cmp	r1, #1
    b456:	bf08      	it	eq
    b458:	706a      	strbeq	r2, [r5, #1]
    b45a:	d002      	beq.n	b462 <MPSL_IRQ_TIMER0_Handler+0x22>
    b45c:	7869      	ldrb	r1, [r5, #1]
    b45e:	2900      	cmp	r1, #0
    b460:	d058      	beq.n	b514 <MPSL_IRQ_TIMER0_Handler+0xd4>
    b462:	2102      	movs	r1, #2
    b464:	7001      	strb	r1, [r0, #0]
    b466:	7840      	ldrb	r0, [r0, #1]
    b468:	f000 fb2e 	bl	bac8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b46c:	4c2f      	ldr	r4, [pc, #188]	; (b52c <MPSL_IRQ_TIMER0_Handler+0xec>)
    b46e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b472:	f04f 0800 	mov.w	r8, #0
    b476:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    b47a:	f44f 7780 	mov.w	r7, #256	; 0x100
    b47e:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    b482:	d00a      	beq.n	b49a <MPSL_IRQ_TIMER0_Handler+0x5a>
    b484:	482a      	ldr	r0, [pc, #168]	; (b530 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    b486:	6800      	ldr	r0, [r0, #0]
    b488:	b138      	cbz	r0, b49a <MPSL_IRQ_TIMER0_Handler+0x5a>
    b48a:	2003      	movs	r0, #3
    b48c:	f000 fb1c 	bl	bac8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b490:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b494:	2003      	movs	r0, #3
    b496:	f7fe fcf7 	bl	9e88 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b49a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b49e:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    b4a2:	d00a      	beq.n	b4ba <MPSL_IRQ_TIMER0_Handler+0x7a>
    b4a4:	4823      	ldr	r0, [pc, #140]	; (b534 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    b4a6:	6800      	ldr	r0, [r0, #0]
    b4a8:	b138      	cbz	r0, b4ba <MPSL_IRQ_TIMER0_Handler+0x7a>
    b4aa:	2002      	movs	r0, #2
    b4ac:	f000 fb0c 	bl	bac8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b4b0:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b4b4:	2002      	movs	r0, #2
    b4b6:	f7fe fce7 	bl	9e88 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b4ba:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b4be:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    b4c2:	d00a      	beq.n	b4da <MPSL_IRQ_TIMER0_Handler+0x9a>
    b4c4:	481c      	ldr	r0, [pc, #112]	; (b538 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    b4c6:	6800      	ldr	r0, [r0, #0]
    b4c8:	b138      	cbz	r0, b4da <MPSL_IRQ_TIMER0_Handler+0x9a>
    b4ca:	2001      	movs	r0, #1
    b4cc:	f000 fafc 	bl	bac8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b4d0:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b4d4:	2001      	movs	r0, #1
    b4d6:	f7fe fcd7 	bl	9e88 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b4da:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b4de:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    b4e2:	bf08      	it	eq
    b4e4:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b4e8:	4814      	ldr	r0, [pc, #80]	; (b53c <MPSL_IRQ_TIMER0_Handler+0xfc>)
    b4ea:	6800      	ldr	r0, [r0, #0]
    b4ec:	2800      	cmp	r0, #0
    b4ee:	bf08      	it	eq
    b4f0:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b4f4:	2000      	movs	r0, #0
    b4f6:	f000 fae7 	bl	bac8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b4fa:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b4fe:	2004      	movs	r0, #4
    b500:	7028      	strb	r0, [r5, #0]
    b502:	f8c5 8004 	str.w	r8, [r5, #4]
    b506:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    b50a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b50e:	2000      	movs	r0, #0
    b510:	f7fe bcba 	b.w	9e88 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b514:	f240 5169 	movw	r1, #1385	; 0x569
    b518:	206c      	movs	r0, #108	; 0x6c
    b51a:	f000 ffad 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b51e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b522:	2007      	movs	r0, #7
    b524:	f7fe bcb0 	b.w	9e88 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b528:	20000028 	.word	0x20000028
    b52c:	40008000 	.word	0x40008000
    b530:	4000814c 	.word	0x4000814c
    b534:	40008148 	.word	0x40008148
    b538:	40008144 	.word	0x40008144
    b53c:	40008140 	.word	0x40008140
    b540:	2201      	movs	r2, #1
    b542:	0211      	lsls	r1, r2, #8
    b544:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    b548:	2000      	movs	r0, #0
    b54a:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    b54e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    b552:	f3bf 8f4f 	dsb	sy
    b556:	f3bf 8f6f 	isb	sy
    b55a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    b55e:	490e      	ldr	r1, [pc, #56]	; (b598 <MPSL_IRQ_TIMER0_Handler+0x158>)
    b560:	f841 2f04 	str.w	r2, [r1, #4]!
    b564:	1e43      	subs	r3, r0, #1
    b566:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    b56a:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    b56e:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    b572:	4b0a      	ldr	r3, [pc, #40]	; (b59c <MPSL_IRQ_TIMER0_Handler+0x15c>)
    b574:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b578:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    b57c:	1d1b      	adds	r3, r3, #4
    b57e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b582:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    b586:	1d1b      	adds	r3, r3, #4
    b588:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b58c:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    b590:	60ca      	str	r2, [r1, #12]
    b592:	4903      	ldr	r1, [pc, #12]	; (b5a0 <MPSL_IRQ_TIMER0_Handler+0x160>)
    b594:	7048      	strb	r0, [r1, #1]
    b596:	4770      	bx	lr
    b598:	40008000 	.word	0x40008000
    b59c:	40008004 	.word	0x40008004
    b5a0:	20000028 	.word	0x20000028

0000b5a4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    b5a4:	4801      	ldr	r0, [pc, #4]	; (b5ac <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    b5a6:	6800      	ldr	r0, [r0, #0]
    b5a8:	4770      	bx	lr
    b5aa:	0000      	.short	0x0000
    b5ac:	4000b504 	.word	0x4000b504

0000b5b0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    b5b0:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    b5b4:	f8df 8130 	ldr.w	r8, [pc, #304]	; b6e8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>
    b5b8:	4604      	mov	r4, r0
    b5ba:	f1a8 0702 	sub.w	r7, r8, #2
    b5be:	460e      	mov	r6, r1
    b5c0:	f898 c000 	ldrb.w	ip, [r8]
    b5c4:	e9d7 1004 	ldrd	r1, r0, [r7, #16]
    b5c8:	f1bc 0f01 	cmp.w	ip, #1
    b5cc:	d106      	bne.n	b5dc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x2c>
    b5ce:	ea81 0204 	eor.w	r2, r1, r4
    b5d2:	4070      	eors	r0, r6
    b5d4:	4310      	orrs	r0, r2
    b5d6:	bf08      	it	eq
    b5d8:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    b5dc:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    b5e0:	4a42      	ldr	r2, [pc, #264]	; (b6ec <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>)
    b5e2:	6010      	str	r0, [r2, #0]
    b5e4:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
    b5e8:	f1bc 0f00 	cmp.w	ip, #0
    b5ec:	bf07      	ittee	eq
    b5ee:	f44f 3340 	moveq.w	r3, #196608	; 0x30000
    b5f2:	2200      	moveq	r2, #0
    b5f4:	f44f 3300 	movne.w	r3, #131072	; 0x20000
    b5f8:	2201      	movne	r2, #1
    b5fa:	483d      	ldr	r0, [pc, #244]	; (b6f0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x140>)
    b5fc:	f8c0 3348 	str.w	r3, [r0, #840]	; 0x348
    b600:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    b604:	2500      	movs	r5, #0
    b606:	f44f 79a0 	mov.w	r9, #320	; 0x140
    b60a:	2a02      	cmp	r2, #2
    b60c:	d207      	bcs.n	b61e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x6e>
    b60e:	bf00      	nop
    b610:	eb09 0382 	add.w	r3, r9, r2, lsl #2
    b614:	50c5      	str	r5, [r0, r3]
    b616:	1c52      	adds	r2, r2, #1
    b618:	b2d2      	uxtb	r2, r2
    b61a:	2a02      	cmp	r2, #2
    b61c:	d3f8      	bcc.n	b610 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x60>
    b61e:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
    b622:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    b626:	f8c0 a308 	str.w	sl, [r0, #776]	; 0x308
    b62a:	f8c0 a348 	str.w	sl, [r0, #840]	; 0x348
    b62e:	f8c0 5140 	str.w	r5, [r0, #320]	; 0x140
    b632:	4a30      	ldr	r2, [pc, #192]	; (b6f4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x144>)
    b634:	f8d2 9000 	ldr.w	r9, [r2]
    b638:	eba3 0909 	sub.w	r9, r3, r9
    b63c:	f029 4a7f 	bic.w	sl, r9, #4278190080	; 0xff000000
    b640:	f04f 0901 	mov.w	r9, #1
    b644:	f1ba 0f02 	cmp.w	sl, #2
    b648:	d32e      	bcc.n	b6a8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xf8>
    b64a:	f5ba 0f00 	cmp.w	sl, #8388608	; 0x800000
    b64e:	d82b      	bhi.n	b6a8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xf8>
    b650:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
    b654:	f8c0 b344 	str.w	fp, [r0, #836]	; 0x344
    b658:	f1bc 0f00 	cmp.w	ip, #0
    b65c:	d005      	beq.n	b66a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xba>
    b65e:	6810      	ldr	r0, [r2, #0]
    b660:	1a08      	subs	r0, r1, r0
    b662:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b666:	2802      	cmp	r0, #2
    b668:	d3f9      	bcc.n	b65e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xae>
    b66a:	f8c7 9004 	str.w	r9, [r7, #4]
    b66e:	703d      	strb	r5, [r7, #0]
    b670:	f7ff ff66 	bl	b540 <MPSL_IRQ_TIMER0_Handler+0x100>
    b674:	4820      	ldr	r0, [pc, #128]	; (b6f8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x148>)
    b676:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    b67a:	f365 0101 	bfi	r1, r5, #0, #2
    b67e:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    b682:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    b686:	2102      	movs	r1, #2
    b688:	f361 0201 	bfi	r2, r1, #0, #2
    b68c:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    b690:	2110      	movs	r1, #16
    b692:	fa91 f1a1 	rbit	r1, r1
    b696:	fab1 f181 	clz	r1, r1
    b69a:	2909      	cmp	r1, #9
    b69c:	d909      	bls.n	b6b2 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x102>
    b69e:	f240 3155 	movw	r1, #853	; 0x355
    b6a2:	a016      	add	r0, pc, #88	; (adr r0, b6fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x14c>)
    b6a4:	f000 febc 	bl	c420 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    b6a8:	f240 31b2 	movw	r1, #946	; 0x3b2
    b6ac:	206c      	movs	r0, #108	; 0x6c
    b6ae:	f000 fee3 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b6b2:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    b6b6:	f8c0 900c 	str.w	r9, [r0, #12]
    b6ba:	6879      	ldr	r1, [r7, #4]
    b6bc:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b6c0:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    b6c4:	f44f 7180 	mov.w	r1, #256	; 0x100
    b6c8:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    b6cc:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b6d0:	490d      	ldr	r1, [pc, #52]	; (b708 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x158>)
    b6d2:	0480      	lsls	r0, r0, #18
    b6d4:	6008      	str	r0, [r1, #0]
    b6d6:	e9c7 4604 	strd	r4, r6, [r7, #16]
    b6da:	2004      	movs	r0, #4
    b6dc:	f888 0001 	strb.w	r0, [r8, #1]
    b6e0:	f888 9000 	strb.w	r9, [r8]
    b6e4:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    b6e8:	2000002a 	.word	0x2000002a
    b6ec:	4001f508 	.word	0x4001f508
    b6f0:	4000b000 	.word	0x4000b000
    b6f4:	4000b504 	.word	0x4000b504
    b6f8:	40008000 	.word	0x40008000
    b6fc:	5f66726e 	.word	0x5f66726e
    b700:	656d6974 	.word	0x656d6974
    b704:	00682e72 	.word	0x00682e72
    b708:	4001f504 	.word	0x4001f504

0000b70c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    b70c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b710:	4c31      	ldr	r4, [pc, #196]	; (b7d8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xcc>)
    b712:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    b716:	ea82 0c00 	eor.w	ip, r2, r0
    b71a:	404b      	eors	r3, r1
    b71c:	ea5c 0303 	orrs.w	r3, ip, r3
    b720:	bf14      	ite	ne
    b722:	2301      	movne	r3, #1
    b724:	2300      	moveq	r3, #0
    b726:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b7dc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd0>
    b72a:	f89c 8000 	ldrb.w	r8, [ip]
    b72e:	f1b8 0f02 	cmp.w	r8, #2
    b732:	d002      	beq.n	b73a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2e>
    b734:	2b00      	cmp	r3, #0
    b736:	d03f      	beq.n	b7b8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>
    b738:	e003      	b.n	b742 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x36>
    b73a:	2b00      	cmp	r3, #0
    b73c:	bf08      	it	eq
    b73e:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b742:	7863      	ldrb	r3, [r4, #1]
    b744:	b3bb      	cbz	r3, b7b6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xaa>
    b746:	4d26      	ldr	r5, [pc, #152]	; (b7e0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd4>)
    b748:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    b74c:	602b      	str	r3, [r5, #0]
    b74e:	4e25      	ldr	r6, [pc, #148]	; (b7e4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd8>)
    b750:	f44f 3580 	mov.w	r5, #65536	; 0x10000
    b754:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    b758:	462f      	mov	r7, r5
    b75a:	f8c6 5308 	str.w	r5, [r6, #776]	; 0x308
    b75e:	f8c6 5348 	str.w	r5, [r6, #840]	; 0x348
    b762:	2500      	movs	r5, #0
    b764:	f8c6 5140 	str.w	r5, [r6, #320]	; 0x140
    b768:	4d1f      	ldr	r5, [pc, #124]	; (b7e8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xdc>)
    b76a:	f8d5 9000 	ldr.w	r9, [r5]
    b76e:	eba3 0909 	sub.w	r9, r3, r9
    b772:	f029 497f 	bic.w	r9, r9, #4278190080	; 0xff000000
    b776:	f1b9 0f02 	cmp.w	r9, #2
    b77a:	d327      	bcc.n	b7cc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>
    b77c:	f5b9 0f00 	cmp.w	r9, #8388608	; 0x800000
    b780:	d824      	bhi.n	b7cc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>
    b782:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
    b786:	f8c6 7344 	str.w	r7, [r6, #836]	; 0x344
    b78a:	f1b8 0f00 	cmp.w	r8, #0
    b78e:	d005      	beq.n	b79c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x90>
    b790:	682b      	ldr	r3, [r5, #0]
    b792:	1ad3      	subs	r3, r2, r3
    b794:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b798:	2b02      	cmp	r3, #2
    b79a:	d3f9      	bcc.n	b790 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x84>
    b79c:	4d13      	ldr	r5, [pc, #76]	; (b7ec <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xe0>)
    b79e:	2202      	movs	r2, #2
    b7a0:	0753      	lsls	r3, r2, #29
    b7a2:	602b      	str	r3, [r5, #0]
    b7a4:	e9c4 0104 	strd	r0, r1, [r4, #16]
    b7a8:	2004      	movs	r0, #4
    b7aa:	f88c 0001 	strb.w	r0, [ip, #1]
    b7ae:	f88c 2000 	strb.w	r2, [ip]
    b7b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b7b6:	e004      	b.n	b7c2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb6>
    b7b8:	f44f 7170 	mov.w	r1, #960	; 0x3c0
    b7bc:	206c      	movs	r0, #108	; 0x6c
    b7be:	f000 fe5b 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b7c2:	f44f 7171 	mov.w	r1, #964	; 0x3c4
    b7c6:	206c      	movs	r0, #108	; 0x6c
    b7c8:	f000 fe56 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b7cc:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    b7d0:	206c      	movs	r0, #108	; 0x6c
    b7d2:	f000 fe51 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b7d6:	0000      	.short	0x0000
    b7d8:	20000028 	.word	0x20000028
    b7dc:	2000002a 	.word	0x2000002a
    b7e0:	4001f508 	.word	0x4001f508
    b7e4:	4000b000 	.word	0x4000b000
    b7e8:	4000b504 	.word	0x4000b504
    b7ec:	4001f504 	.word	0x4001f504

0000b7f0 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    b7f0:	4901      	ldr	r1, [pc, #4]	; (b7f8 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    b7f2:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
    b7f6:	4770      	bx	lr
    b7f8:	20000028 	.word	0x20000028

0000b7fc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    b7fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b800:	f8df c0f4 	ldr.w	ip, [pc, #244]	; b8f8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xfc>
    b804:	f89c 4000 	ldrb.w	r4, [ip]
    b808:	2c00      	cmp	r4, #0
    b80a:	bf07      	ittee	eq
    b80c:	f44f 3240 	moveq.w	r2, #196608	; 0x30000
    b810:	2100      	moveq	r1, #0
    b812:	f44f 3200 	movne.w	r2, #131072	; 0x20000
    b816:	2101      	movne	r1, #1
    b818:	4838      	ldr	r0, [pc, #224]	; (b8fc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x100>)
    b81a:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    b81e:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    b822:	2300      	movs	r3, #0
    b824:	2902      	cmp	r1, #2
    b826:	bf38      	it	cc
    b828:	f44f 75a0 	movcc.w	r5, #320	; 0x140
    b82c:	d207      	bcs.n	b83e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x42>
    b82e:	bf00      	nop
    b830:	eb05 0281 	add.w	r2, r5, r1, lsl #2
    b834:	5083      	str	r3, [r0, r2]
    b836:	1c49      	adds	r1, r1, #1
    b838:	b2c9      	uxtb	r1, r1
    b83a:	2902      	cmp	r1, #2
    b83c:	d3f8      	bcc.n	b830 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x34>
    b83e:	2c02      	cmp	r4, #2
    b840:	d004      	beq.n	b84c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x50>
    b842:	f240 31db 	movw	r1, #987	; 0x3db
    b846:	206c      	movs	r0, #108	; 0x6c
    b848:	f000 fe16 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b84c:	f3ef 8210 	mrs	r2, PRIMASK
    b850:	b672      	cpsid	i
    b852:	4c2b      	ldr	r4, [pc, #172]	; (b900 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x104>)
    b854:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    b858:	f8d0 5104 	ldr.w	r5, [r0, #260]	; 0x104
    b85c:	b12d      	cbz	r5, b86a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6e>
    b85e:	68a1      	ldr	r1, [r4, #8]
    b860:	1c49      	adds	r1, r1, #1
    b862:	60a1      	str	r1, [r4, #8]
    b864:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    b868:	e7f4      	b.n	b854 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x58>
    b86a:	68a0      	ldr	r0, [r4, #8]
    b86c:	b902      	cbnz	r2, b870 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x74>
    b86e:	b662      	cpsie	i
    b870:	0a02      	lsrs	r2, r0, #8
    b872:	0600      	lsls	r0, r0, #24
    b874:	1840      	adds	r0, r0, r1
    b876:	eb42 0103 	adc.w	r1, r2, r3
    b87a:	e9d4 2804 	ldrd	r2, r8, [r4, #16]
    b87e:	1cc0      	adds	r0, r0, #3
    b880:	f141 0100 	adc.w	r1, r1, #0
    b884:	4f1f      	ldr	r7, [pc, #124]	; (b904 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x108>)
    b886:	2601      	movs	r6, #1
    b888:	4d1f      	ldr	r5, [pc, #124]	; (b908 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x10c>)
    b88a:	ea80 0902 	eor.w	r9, r0, r2
    b88e:	ea81 0808 	eor.w	r8, r1, r8
    b892:	ea59 0808 	orrs.w	r8, r9, r8
    b896:	d00e      	beq.n	b8b6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    b898:	f8d7 8000 	ldr.w	r8, [r7]
    b89c:	eba2 0808 	sub.w	r8, r2, r8
    b8a0:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    b8a4:	f1b8 0f04 	cmp.w	r8, #4
    b8a8:	d305      	bcc.n	b8b6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    b8aa:	f5b8 0f00 	cmp.w	r8, #8388608	; 0x800000
    b8ae:	d802      	bhi.n	b8b6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    b8b0:	f7ff fe7e 	bl	b5b0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    b8b4:	e01b      	b.n	b8ee <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf2>
    b8b6:	6838      	ldr	r0, [r7, #0]
    b8b8:	1a10      	subs	r0, r2, r0
    b8ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b8be:	2802      	cmp	r0, #2
    b8c0:	d313      	bcc.n	b8ea <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xee>
    b8c2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b8c6:	d810      	bhi.n	b8ea <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xee>
    b8c8:	4910      	ldr	r1, [pc, #64]	; (b90c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x110>)
    b8ca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    b8ce:	6008      	str	r0, [r1, #0]
    b8d0:	6066      	str	r6, [r4, #4]
    b8d2:	7023      	strb	r3, [r4, #0]
    b8d4:	606e      	str	r6, [r5, #4]
    b8d6:	60ee      	str	r6, [r5, #12]
    b8d8:	0040      	lsls	r0, r0, #1
    b8da:	1f09      	subs	r1, r1, #4
    b8dc:	6008      	str	r0, [r1, #0]
    b8de:	2004      	movs	r0, #4
    b8e0:	f88c 0001 	strb.w	r0, [ip, #1]
    b8e4:	f88c 6000 	strb.w	r6, [ip]
    b8e8:	e001      	b.n	b8ee <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf2>
    b8ea:	6066      	str	r6, [r4, #4]
    b8ec:	7023      	strb	r3, [r4, #0]
    b8ee:	6860      	ldr	r0, [r4, #4]
    b8f0:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    b8f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b8f8:	2000002a 	.word	0x2000002a
    b8fc:	4000b000 	.word	0x4000b000
    b900:	20000028 	.word	0x20000028
    b904:	4000b504 	.word	0x4000b504
    b908:	40008000 	.word	0x40008000
    b90c:	4001f508 	.word	0x4001f508

0000b910 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>:
    b910:	b410      	push	{r4}
    b912:	f3ef 8410 	mrs	r4, PRIMASK
    b916:	b672      	cpsid	i
    b918:	4a0c      	ldr	r2, [pc, #48]	; (b94c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x3c>)
    b91a:	490d      	ldr	r1, [pc, #52]	; (b950 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x40>)
    b91c:	f04f 0c00 	mov.w	ip, #0
    b920:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
    b924:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    b928:	b12b      	cbz	r3, b936 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x26>
    b92a:	6888      	ldr	r0, [r1, #8]
    b92c:	1c40      	adds	r0, r0, #1
    b92e:	6088      	str	r0, [r1, #8]
    b930:	f8c2 c104 	str.w	ip, [r2, #260]	; 0x104
    b934:	e7f4      	b.n	b920 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x10>
    b936:	6889      	ldr	r1, [r1, #8]
    b938:	b904      	cbnz	r4, b93c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x2c>
    b93a:	b662      	cpsie	i
    b93c:	0a0a      	lsrs	r2, r1, #8
    b93e:	0609      	lsls	r1, r1, #24
    b940:	1808      	adds	r0, r1, r0
    b942:	bc10      	pop	{r4}
    b944:	eb42 010c 	adc.w	r1, r2, ip
    b948:	4770      	bx	lr
    b94a:	0000      	.short	0x0000
    b94c:	4000b000 	.word	0x4000b000
    b950:	20000028 	.word	0x20000028

0000b954 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    b954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b958:	4a56      	ldr	r2, [pc, #344]	; (bab4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>)
    b95a:	2501      	movs	r5, #1
    b95c:	2400      	movs	r4, #0
    b95e:	f892 c000 	ldrb.w	ip, [r2]
    b962:	7852      	ldrb	r2, [r2, #1]
    b964:	f44f 76a0 	mov.w	r6, #320	; 0x140
    b968:	2807      	cmp	r0, #7
    b96a:	d27d      	bcs.n	ba68 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    b96c:	e8df f000 	tbb	[pc, r0]
    b970:	04040404 	.word	0x04040404
    b974:	00606060 	.word	0x00606060
    b978:	4b4f      	ldr	r3, [pc, #316]	; (bab8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>)
    b97a:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
    b97e:	43ff      	mvns	r7, r7
    b980:	ea77 0708 	orns	r7, r7, r8
    b984:	bf04      	itt	eq
    b986:	785b      	ldrbeq	r3, [r3, #1]
    b988:	2b00      	cmpeq	r3, #0
    b98a:	d003      	beq.n	b994 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x40>
    b98c:	f1bc 0f02 	cmp.w	ip, #2
    b990:	d005      	beq.n	b99e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x4a>
    b992:	e026      	b.n	b9e2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8e>
    b994:	f44f 6186 	mov.w	r1, #1072	; 0x430
    b998:	206c      	movs	r0, #108	; 0x6c
    b99a:	f000 fd6d 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b99e:	1f13      	subs	r3, r2, #4
    b9a0:	b2db      	uxtb	r3, r3
    b9a2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    b9a6:	f103 4680 	add.w	r6, r3, #1073741824	; 0x40000000
    b9aa:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    b9ae:	2300      	movs	r3, #0
    b9b0:	f1bc 0f01 	cmp.w	ip, #1
    b9b4:	d003      	beq.n	b9be <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6a>
    b9b6:	f1bc 0f02 	cmp.w	ip, #2
    b9ba:	d008      	beq.n	b9ce <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x7a>
    b9bc:	e00e      	b.n	b9dc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x88>
    b9be:	2a04      	cmp	r2, #4
    b9c0:	bf24      	itt	cs
    b9c2:	6837      	ldrcs	r7, [r6, #0]
    b9c4:	2f00      	cmpcs	r7, #0
    b9c6:	bf08      	it	eq
    b9c8:	f04f 4300 	moveq.w	r3, #2147483648	; 0x80000000
    b9cc:	e006      	b.n	b9dc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x88>
    b9ce:	2a04      	cmp	r2, #4
    b9d0:	bf24      	itt	cs
    b9d2:	6837      	ldrcs	r7, [r6, #0]
    b9d4:	2f00      	cmpcs	r7, #0
    b9d6:	bf08      	it	eq
    b9d8:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
    b9dc:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
    b9e0:	d1e5      	bne.n	b9ae <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x5a>
    b9e2:	4b36      	ldr	r3, [pc, #216]	; (babc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    b9e4:	f100 0210 	add.w	r2, r0, #16
    b9e8:	fa05 f202 	lsl.w	r2, r5, r2
    b9ec:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    b9f0:	f04f 0c40 	mov.w	ip, #64	; 0x40
    b9f4:	eb0c 0c80 	add.w	ip, ip, r0, lsl #2
    b9f8:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    b9fc:	449c      	add	ip, r3
    b9fe:	f8cc 5000 	str.w	r5, [ip]
    ba02:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    ba06:	f8d0 c540 	ldr.w	ip, [r0, #1344]	; 0x540
    ba0a:	eba1 0c0c 	sub.w	ip, r1, ip
    ba0e:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    ba12:	f1bc 0f03 	cmp.w	ip, #3
    ba16:	bf3e      	ittt	cc
    ba18:	f8c0 4540 	strcc.w	r4, [r0, #1344]	; 0x540
    ba1c:	2000      	movcc	r0, #0
    ba1e:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    ba22:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    ba26:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    ba2a:	2001      	movs	r0, #1
    ba2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ba30:	f1bc 0f00 	cmp.w	ip, #0
    ba34:	d006      	beq.n	ba44 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf0>
    ba36:	4282      	cmp	r2, r0
    ba38:	d104      	bne.n	ba44 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf0>
    ba3a:	f44f 618a 	mov.w	r1, #1104	; 0x450
    ba3e:	206c      	movs	r0, #108	; 0x6c
    ba40:	f000 fd1a 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ba44:	1f00      	subs	r0, r0, #4
    ba46:	b2c2      	uxtb	r2, r0
    ba48:	2a03      	cmp	r2, #3
    ba4a:	d304      	bcc.n	ba56 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    ba4c:	f44f 7127 	mov.w	r1, #668	; 0x29c
    ba50:	206c      	movs	r0, #108	; 0x6c
    ba52:	f000 fd11 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ba56:	4b1a      	ldr	r3, [pc, #104]	; (bac0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x16c>)
    ba58:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    ba5c:	4090      	lsls	r0, r2
    ba5e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    ba62:	f8c3 0348 	str.w	r0, [r3, #840]	; 0x348
    ba66:	e000      	b.n	ba6a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    ba68:	e01f      	b.n	baaa <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x156>
    ba6a:	eb06 0c82 	add.w	ip, r6, r2, lsl #2
    ba6e:	f843 400c 	str.w	r4, [r3, ip]
    ba72:	f8df c050 	ldr.w	ip, [pc, #80]	; bac4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x170>
    ba76:	f8dc c000 	ldr.w	ip, [ip]
    ba7a:	eba1 0c0c 	sub.w	ip, r1, ip
    ba7e:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    ba82:	f1bc 0f02 	cmp.w	ip, #2
    ba86:	d30d      	bcc.n	baa4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x150>
    ba88:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    ba8c:	d80a      	bhi.n	baa4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x150>
    ba8e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    ba92:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    ba96:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    ba9a:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
    ba9e:	4628      	mov	r0, r5
    baa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    baa4:	4620      	mov	r0, r4
    baa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    baaa:	f240 4154 	movw	r1, #1108	; 0x454
    baae:	206c      	movs	r0, #108	; 0x6c
    bab0:	f000 fce2 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bab4:	2000002a 	.word	0x2000002a
    bab8:	20000028 	.word	0x20000028
    babc:	40008000 	.word	0x40008000
    bac0:	4000b000 	.word	0x4000b000
    bac4:	4000b504 	.word	0x4000b504

0000bac8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    bac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    baca:	2101      	movs	r1, #1
    bacc:	2600      	movs	r6, #0
    bace:	f44f 77a0 	mov.w	r7, #320	; 0x140
    bad2:	2807      	cmp	r0, #7
    bad4:	d24a      	bcs.n	bb6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>
    bad6:	e8df f000 	tbb	[pc, r0]
    bada:	0404      	.short	0x0404
    badc:	18180404 	.word	0x18180404
    bae0:	0018      	.short	0x0018
    bae2:	f100 0210 	add.w	r2, r0, #16
    bae6:	fa01 f202 	lsl.w	r2, r1, r2
    baea:	4923      	ldr	r1, [pc, #140]	; (bb78 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
    baec:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    baf0:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    baf4:	2200      	movs	r2, #0
    baf6:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    bafa:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    bafe:	508e      	str	r6, [r1, r2]
    bb00:	491e      	ldr	r1, [pc, #120]	; (bb7c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
    bb02:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    bb06:	9000      	str	r0, [sp, #0]
    bb08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bb0a:	4d1d      	ldr	r5, [pc, #116]	; (bb80 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb8>)
    bb0c:	1f01      	subs	r1, r0, #4
    bb0e:	b2cc      	uxtb	r4, r1
    bb10:	7829      	ldrb	r1, [r5, #0]
    bb12:	b181      	cbz	r1, bb36 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x6e>
    bb14:	786a      	ldrb	r2, [r5, #1]
    bb16:	4282      	cmp	r2, r0
    bb18:	d10d      	bne.n	bb36 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x6e>
    bb1a:	4a1a      	ldr	r2, [pc, #104]	; (bb84 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xbc>)
    bb1c:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    bb20:	6010      	str	r0, [r2, #0]
    bb22:	2901      	cmp	r1, #1
    bb24:	bf08      	it	eq
    bb26:	f7ff fd0b 	bleq	b540 <MPSL_IRQ_TIMER0_Handler+0x100>
    bb2a:	702e      	strb	r6, [r5, #0]
    bb2c:	4a16      	ldr	r2, [pc, #88]	; (bb88 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    bb2e:	f04f 30ff 	mov.w	r0, #4294967295
    bb32:	e9c2 0004 	strd	r0, r0, [r2, #16]
    bb36:	4915      	ldr	r1, [pc, #84]	; (bb8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    bb38:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    bb3c:	40a0      	lsls	r0, r4
    bb3e:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    bb42:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    bb46:	00a0      	lsls	r0, r4, #2
    bb48:	4408      	add	r0, r1
    bb4a:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    bb4e:	4a10      	ldr	r2, [pc, #64]	; (bb90 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    bb50:	6812      	ldr	r2, [r2, #0]
    bb52:	1a80      	subs	r0, r0, r2
    bb54:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bb58:	2802      	cmp	r0, #2
    bb5a:	bf24      	itt	cs
    bb5c:	eb07 0084 	addcs.w	r0, r7, r4, lsl #2
    bb60:	500e      	strcs	r6, [r1, r0]
    bb62:	480c      	ldr	r0, [pc, #48]	; (bb94 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    bb64:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    bb68:	9000      	str	r0, [sp, #0]
    bb6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bb6c:	f240 41e2 	movw	r1, #1250	; 0x4e2
    bb70:	206c      	movs	r0, #108	; 0x6c
    bb72:	f000 fc81 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bb76:	0000      	.short	0x0000
    bb78:	40008000 	.word	0x40008000
    bb7c:	40008140 	.word	0x40008140
    bb80:	2000002a 	.word	0x2000002a
    bb84:	4001f508 	.word	0x4001f508
    bb88:	20000028 	.word	0x20000028
    bb8c:	4000b000 	.word	0x4000b000
    bb90:	4000b504 	.word	0x4000b504
    bb94:	4000b140 	.word	0x4000b140

0000bb98 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    bb98:	481a      	ldr	r0, [pc, #104]	; (bc04 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x6c>)
    bb9a:	7800      	ldrb	r0, [r0, #0]
    bb9c:	2800      	cmp	r0, #0
    bb9e:	bf07      	ittee	eq
    bba0:	f44f 3040 	moveq.w	r0, #196608	; 0x30000
    bba4:	2100      	moveq	r1, #0
    bba6:	f44f 3000 	movne.w	r0, #131072	; 0x20000
    bbaa:	2101      	movne	r1, #1
    bbac:	4a16      	ldr	r2, [pc, #88]	; (bc08 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x70>)
    bbae:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    bbb2:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    bbb6:	2000      	movs	r0, #0
    bbb8:	2902      	cmp	r1, #2
    bbba:	bf38      	it	cc
    bbbc:	f44f 7ca0 	movcc.w	ip, #320	; 0x140
    bbc0:	d207      	bcs.n	bbd2 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    bbc2:	bf00      	nop
    bbc4:	eb0c 0381 	add.w	r3, ip, r1, lsl #2
    bbc8:	50d0      	str	r0, [r2, r3]
    bbca:	1c49      	adds	r1, r1, #1
    bbcc:	b2c9      	uxtb	r1, r1
    bbce:	2902      	cmp	r1, #2
    bbd0:	d3f8      	bcc.n	bbc4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x2c>
    bbd2:	490e      	ldr	r1, [pc, #56]	; (bc0c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x74>)
    bbd4:	f04f 32ff 	mov.w	r2, #4294967295
    bbd8:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    bbdc:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    bbe0:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    bbe4:	1d0a      	adds	r2, r1, #4
    bbe6:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    bbea:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    bbee:	1d12      	adds	r2, r2, #4
    bbf0:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    bbf4:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    bbf8:	1d12      	adds	r2, r2, #4
    bbfa:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    bbfe:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    bc02:	4770      	bx	lr
    bc04:	2000002a 	.word	0x2000002a
    bc08:	4000b000 	.word	0x4000b000
    bc0c:	40008000 	.word	0x40008000

0000bc10 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA>:
    bc10:	b570      	push	{r4, r5, r6, lr}
    bc12:	f3ef 8110 	mrs	r1, PRIMASK
    bc16:	b672      	cpsid	i
    bc18:	2400      	movs	r4, #0
    bc1a:	4b0d      	ldr	r3, [pc, #52]	; (bc50 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x40>)
    bc1c:	4a0d      	ldr	r2, [pc, #52]	; (bc54 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x44>)
    bc1e:	bf00      	nop
    bc20:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    bc24:	f8d3 c104 	ldr.w	ip, [r3, #260]	; 0x104
    bc28:	f1bc 0f00 	cmp.w	ip, #0
    bc2c:	d005      	beq.n	bc3a <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x2a>
    bc2e:	6890      	ldr	r0, [r2, #8]
    bc30:	1c40      	adds	r0, r0, #1
    bc32:	6090      	str	r0, [r2, #8]
    bc34:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    bc38:	e7f2      	b.n	bc20 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x10>
    bc3a:	6895      	ldr	r5, [r2, #8]
    bc3c:	b901      	cbnz	r1, bc40 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x30>
    bc3e:	b662      	cpsie	i
    bc40:	f004 ff91 	bl	10b66 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    bc44:	4a04      	ldr	r2, [pc, #16]	; (bc58 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x48>)
    bc46:	4621      	mov	r1, r4
    bc48:	fbe5 0102 	umlal	r0, r1, r5, r2
    bc4c:	bd70      	pop	{r4, r5, r6, pc}
    bc4e:	0000      	.short	0x0000
    bc50:	4000b000 	.word	0x4000b000
    bc54:	20000028 	.word	0x20000028
    bc58:	1e848000 	.word	0x1e848000

0000bc5c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    bc5c:	b510      	push	{r4, lr}
    bc5e:	2807      	cmp	r0, #7
    bc60:	d20d      	bcs.n	bc7e <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    bc62:	e8df f000 	tbb	[pc, r0]
    bc66:	0404      	.short	0x0404
    bc68:	06060404 	.word	0x06060404
    bc6c:	0006      	.short	0x0006
    bc6e:	4906      	ldr	r1, [pc, #24]	; (bc88 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    bc70:	e002      	b.n	bc78 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    bc72:	1f00      	subs	r0, r0, #4
    bc74:	4905      	ldr	r1, [pc, #20]	; (bc8c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    bc76:	b2c0      	uxtb	r0, r0
    bc78:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    bc7c:	bd10      	pop	{r4, pc}
    bc7e:	f240 417b 	movw	r1, #1147	; 0x47b
    bc82:	206c      	movs	r0, #108	; 0x6c
    bc84:	f000 fbf8 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bc88:	40008140 	.word	0x40008140
    bc8c:	4000b140 	.word	0x4000b140

0000bc90 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    bc90:	b570      	push	{r4, r5, r6, lr}
    bc92:	481b      	ldr	r0, [pc, #108]	; (bd00 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    bc94:	2400      	movs	r4, #0
    bc96:	2104      	movs	r1, #4
    bc98:	7004      	strb	r4, [r0, #0]
    bc9a:	1e80      	subs	r0, r0, #2
    bc9c:	7001      	strb	r1, [r0, #0]
    bc9e:	1f49      	subs	r1, r1, #5
    bca0:	e9c0 1104 	strd	r1, r1, [r0, #16]
    bca4:	6084      	str	r4, [r0, #8]
    bca6:	f7ff fc4b 	bl	b540 <MPSL_IRQ_TIMER0_Handler+0x100>
    bcaa:	2501      	movs	r5, #1
    bcac:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    bcb0:	02eb      	lsls	r3, r5, #11
    bcb2:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    bcb6:	f3bf 8f4f 	dsb	sy
    bcba:	f3bf 8f6f 	isb	sy
    bcbe:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    bcc2:	4a10      	ldr	r2, [pc, #64]	; (bd04 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    bcc4:	6055      	str	r5, [r2, #4]
    bcc6:	6095      	str	r5, [r2, #8]
    bcc8:	480f      	ldr	r0, [pc, #60]	; (bd08 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x78>)
    bcca:	6801      	ldr	r1, [r0, #0]
    bccc:	2900      	cmp	r1, #0
    bcce:	d1fc      	bne.n	bcca <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x3a>
    bcd0:	480e      	ldr	r0, [pc, #56]	; (bd0c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x7c>)
    bcd2:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    bcd6:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    bcda:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    bcde:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    bce2:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    bce6:	f8c2 4104 	str.w	r4, [r2, #260]	; 0x104
    bcea:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    bcee:	6015      	str	r5, [r2, #0]
    bcf0:	f44f 7082 	mov.w	r0, #260	; 0x104
    bcf4:	f8c2 0344 	str.w	r0, [r2, #836]	; 0x344
    bcf8:	2002      	movs	r0, #2
    bcfa:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
    bcfe:	bd70      	pop	{r4, r5, r6, pc}
    bd00:	2000002a 	.word	0x2000002a
    bd04:	4000b000 	.word	0x4000b000
    bd08:	4000b504 	.word	0x4000b504
    bd0c:	00070002 	.word	0x00070002

0000bd10 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    bd10:	4808      	ldr	r0, [pc, #32]	; (bd34 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    bd12:	f990 0000 	ldrsb.w	r0, [r0]
    bd16:	2800      	cmp	r0, #0
    bd18:	bfb8      	it	lt
    bd1a:	4770      	bxlt	lr
    bd1c:	f000 011f 	and.w	r1, r0, #31
    bd20:	2201      	movs	r2, #1
    bd22:	fa02 f101 	lsl.w	r1, r2, r1
    bd26:	0940      	lsrs	r0, r0, #5
    bd28:	0080      	lsls	r0, r0, #2
    bd2a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bd2e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    bd32:	4770      	bx	lr
    bd34:	20000388 	.word	0x20000388

0000bd38 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    bd38:	4803      	ldr	r0, [pc, #12]	; (bd48 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    bd3a:	7800      	ldrb	r0, [r0, #0]
    bd3c:	2803      	cmp	r0, #3
    bd3e:	bf0c      	ite	eq
    bd40:	2001      	moveq	r0, #1
    bd42:	2000      	movne	r0, #0
    bd44:	4770      	bx	lr
    bd46:	0000      	.short	0x0000
    bd48:	20000360 	.word	0x20000360

0000bd4c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    bd4c:	4801      	ldr	r0, [pc, #4]	; (bd54 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    bd4e:	8840      	ldrh	r0, [r0, #2]
    bd50:	4770      	bx	lr
    bd52:	0000      	.short	0x0000
    bd54:	20000360 	.word	0x20000360

0000bd58 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    bd58:	4803      	ldr	r0, [pc, #12]	; (bd68 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    bd5a:	7800      	ldrb	r0, [r0, #0]
    bd5c:	2802      	cmp	r0, #2
    bd5e:	bf16      	itet	ne
    bd60:	2803      	cmpne	r0, #3
    bd62:	2001      	moveq	r0, #1
    bd64:	2000      	movne	r0, #0
    bd66:	4770      	bx	lr
    bd68:	20000360 	.word	0x20000360

0000bd6c <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    bd6c:	4802      	ldr	r0, [pc, #8]	; (bd78 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    bd6e:	2100      	movs	r1, #0
    bd70:	7001      	strb	r1, [r0, #0]
    bd72:	8041      	strh	r1, [r0, #2]
    bd74:	4770      	bx	lr
    bd76:	0000      	.short	0x0000
    bd78:	20000360 	.word	0x20000360

0000bd7c <MPSL_IRQ_CLOCK_Handler>:
    bd7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bd80:	4c16      	ldr	r4, [pc, #88]	; (bddc <MPSL_IRQ_CLOCK_Handler+0x60>)
    bd82:	7a60      	ldrb	r0, [r4, #9]
    bd84:	2800      	cmp	r0, #0
    bd86:	d027      	beq.n	bdd8 <MPSL_IRQ_CLOCK_Handler+0x5c>
    bd88:	f44f 7180 	mov.w	r1, #256	; 0x100
    bd8c:	058d      	lsls	r5, r1, #22
    bd8e:	4628      	mov	r0, r5
    bd90:	f004 ff14 	bl	10bbc <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bd94:	4680      	mov	r8, r0
    bd96:	f44f 7182 	mov.w	r1, #260	; 0x104
    bd9a:	4628      	mov	r0, r5
    bd9c:	f004 ff0e 	bl	10bbc <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bda0:	2600      	movs	r6, #0
    bda2:	4607      	mov	r7, r0
    bda4:	f1b8 0f00 	cmp.w	r8, #0
    bda8:	d009      	beq.n	bdbe <MPSL_IRQ_CLOCK_Handler+0x42>
    bdaa:	2001      	movs	r0, #1
    bdac:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    bdb0:	7920      	ldrb	r0, [r4, #4]
    bdb2:	b120      	cbz	r0, bdbe <MPSL_IRQ_CLOCK_Handler+0x42>
    bdb4:	7126      	strb	r6, [r4, #4]
    bdb6:	69e0      	ldr	r0, [r4, #28]
    bdb8:	b108      	cbz	r0, bdbe <MPSL_IRQ_CLOCK_Handler+0x42>
    bdba:	4780      	blx	r0
    bdbc:	61e6      	str	r6, [r4, #28]
    bdbe:	b137      	cbz	r7, bdce <MPSL_IRQ_CLOCK_Handler+0x52>
    bdc0:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    bdc4:	2002      	movs	r0, #2
    bdc6:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    bdca:	f000 fa75 	bl	c2b8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    bdce:	4640      	mov	r0, r8
    bdd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bdd4:	f000 b858 	b.w	be88 <MPSL_IRQ_CLOCK_Handler+0x10c>
    bdd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bddc:	20000318 	.word	0x20000318
    bde0:	b510      	push	{r4, lr}
    bde2:	f004 ff95 	bl	10d10 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    bde6:	b930      	cbnz	r0, bdf6 <MPSL_IRQ_CLOCK_Handler+0x7a>
    bde8:	f004 ffb3 	bl	10d52 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bdec:	b918      	cbnz	r0, bdf6 <MPSL_IRQ_CLOCK_Handler+0x7a>
    bdee:	f004 ffe6 	bl	10dbe <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    bdf2:	2800      	cmp	r0, #0
    bdf4:	d002      	beq.n	bdfc <MPSL_IRQ_CLOCK_Handler+0x80>
    bdf6:	4902      	ldr	r1, [pc, #8]	; (be00 <MPSL_IRQ_CLOCK_Handler+0x84>)
    bdf8:	2002      	movs	r0, #2
    bdfa:	6008      	str	r0, [r1, #0]
    bdfc:	bd10      	pop	{r4, pc}
    bdfe:	0000      	.short	0x0000
    be00:	40000c34 	.word	0x40000c34
    be04:	b570      	push	{r4, r5, r6, lr}
    be06:	f000 f99b 	bl	c140 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    be0a:	f000 fabd 	bl	c388 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    be0e:	4c09      	ldr	r4, [pc, #36]	; (be34 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    be10:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    be14:	b130      	cbz	r0, be24 <MPSL_IRQ_CLOCK_Handler+0xa8>
    be16:	f7ff ffe3 	bl	bde0 <MPSL_IRQ_CLOCK_Handler+0x64>
    be1a:	2001      	movs	r0, #1
    be1c:	6128      	str	r0, [r5, #16]
    be1e:	2004      	movs	r0, #4
    be20:	72a0      	strb	r0, [r4, #10]
    be22:	e004      	b.n	be2e <MPSL_IRQ_CLOCK_Handler+0xb2>
    be24:	2003      	movs	r0, #3
    be26:	72a0      	strb	r0, [r4, #10]
    be28:	2001      	movs	r0, #1
    be2a:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    be2e:	2000      	movs	r0, #0
    be30:	71e0      	strb	r0, [r4, #7]
    be32:	bd70      	pop	{r4, r5, r6, pc}
    be34:	20000318 	.word	0x20000318
    be38:	b570      	push	{r4, r5, r6, lr}
    be3a:	4c12      	ldr	r4, [pc, #72]	; (be84 <MPSL_IRQ_CLOCK_Handler+0x108>)
    be3c:	79a0      	ldrb	r0, [r4, #6]
    be3e:	b1e0      	cbz	r0, be7a <MPSL_IRQ_CLOCK_Handler+0xfe>
    be40:	79e1      	ldrb	r1, [r4, #7]
    be42:	1e40      	subs	r0, r0, #1
    be44:	4281      	cmp	r1, r0
    be46:	da18      	bge.n	be7a <MPSL_IRQ_CLOCK_Handler+0xfe>
    be48:	f000 fa9e 	bl	c388 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    be4c:	4605      	mov	r5, r0
    be4e:	f000 fb87 	bl	c560 <mpsl_temperature_get>
    be52:	79a1      	ldrb	r1, [r4, #6]
    be54:	2901      	cmp	r1, #1
    be56:	d902      	bls.n	be5e <MPSL_IRQ_CLOCK_Handler+0xe2>
    be58:	79e1      	ldrb	r1, [r4, #7]
    be5a:	1c49      	adds	r1, r1, #1
    be5c:	71e1      	strb	r1, [r4, #7]
    be5e:	b10d      	cbz	r5, be64 <MPSL_IRQ_CLOCK_Handler+0xe8>
    be60:	6961      	ldr	r1, [r4, #20]
    be62:	e000      	b.n	be66 <MPSL_IRQ_CLOCK_Handler+0xea>
    be64:	6921      	ldr	r1, [r4, #16]
    be66:	1a41      	subs	r1, r0, r1
    be68:	2902      	cmp	r1, #2
    be6a:	da02      	bge.n	be72 <MPSL_IRQ_CLOCK_Handler+0xf6>
    be6c:	f111 0f02 	cmn.w	r1, #2
    be70:	dc07      	bgt.n	be82 <MPSL_IRQ_CLOCK_Handler+0x106>
    be72:	b10d      	cbz	r5, be78 <MPSL_IRQ_CLOCK_Handler+0xfc>
    be74:	6160      	str	r0, [r4, #20]
    be76:	e000      	b.n	be7a <MPSL_IRQ_CLOCK_Handler+0xfe>
    be78:	6120      	str	r0, [r4, #16]
    be7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    be7e:	f7ff bfc1 	b.w	be04 <MPSL_IRQ_CLOCK_Handler+0x88>
    be82:	bd70      	pop	{r4, r5, r6, pc}
    be84:	20000318 	.word	0x20000318
    be88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    be8c:	4606      	mov	r6, r0
    be8e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    be92:	f44f 7186 	mov.w	r1, #268	; 0x10c
    be96:	4628      	mov	r0, r5
    be98:	f004 fe90 	bl	10bbc <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    be9c:	4680      	mov	r8, r0
    be9e:	f44f 7188 	mov.w	r1, #272	; 0x110
    bea2:	4628      	mov	r0, r5
    bea4:	f004 fe8a 	bl	10bbc <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bea8:	4c27      	ldr	r4, [pc, #156]	; (bf48 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    beaa:	4682      	mov	sl, r0
    beac:	7827      	ldrb	r7, [r4, #0]
    beae:	f104 0008 	add.w	r0, r4, #8
    beb2:	f004 fef7 	bl	10ca4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    beb6:	b110      	cbz	r0, bebe <MPSL_IRQ_CLOCK_Handler+0x142>
    beb8:	f44f 71db 	mov.w	r1, #438	; 0x1b6
    bebc:	e016      	b.n	beec <MPSL_IRQ_CLOCK_Handler+0x170>
    bebe:	f04f 0901 	mov.w	r9, #1
    bec2:	b146      	cbz	r6, bed6 <MPSL_IRQ_CLOCK_Handler+0x15a>
    bec4:	7aa0      	ldrb	r0, [r4, #10]
    bec6:	2803      	cmp	r0, #3
    bec8:	d105      	bne.n	bed6 <MPSL_IRQ_CLOCK_Handler+0x15a>
    beca:	2004      	movs	r0, #4
    becc:	72a0      	strb	r0, [r4, #10]
    bece:	f7ff ff87 	bl	bde0 <MPSL_IRQ_CLOCK_Handler+0x64>
    bed2:	f8c5 9010 	str.w	r9, [r5, #16]
    bed6:	2600      	movs	r6, #0
    bed8:	f1b8 0f00 	cmp.w	r8, #0
    bedc:	d018      	beq.n	bf10 <MPSL_IRQ_CLOCK_Handler+0x194>
    bede:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    bee2:	7aa0      	ldrb	r0, [r4, #10]
    bee4:	2804      	cmp	r0, #4
    bee6:	d004      	beq.n	bef2 <MPSL_IRQ_CLOCK_Handler+0x176>
    bee8:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    beec:	206d      	movs	r0, #109	; 0x6d
    beee:	f000 fac3 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bef2:	f004 ff0d 	bl	10d10 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    bef6:	b928      	cbnz	r0, bf04 <MPSL_IRQ_CLOCK_Handler+0x188>
    bef8:	f004 ff2b 	bl	10d52 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    befc:	b910      	cbnz	r0, bf04 <MPSL_IRQ_CLOCK_Handler+0x188>
    befe:	f004 ff5e 	bl	10dbe <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    bf02:	b108      	cbz	r0, bf08 <MPSL_IRQ_CLOCK_Handler+0x18c>
    bf04:	4811      	ldr	r0, [pc, #68]	; (bf4c <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    bf06:	6006      	str	r6, [r0, #0]
    bf08:	2002      	movs	r0, #2
    bf0a:	72a0      	strb	r0, [r4, #10]
    bf0c:	f000 f8fc 	bl	c108 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    bf10:	f1ba 0f00 	cmp.w	sl, #0
    bf14:	d008      	beq.n	bf28 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    bf16:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    bf1a:	7aa0      	ldrb	r0, [r4, #10]
    bf1c:	2802      	cmp	r0, #2
    bf1e:	d101      	bne.n	bf24 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    bf20:	f7ff ff8a 	bl	be38 <MPSL_IRQ_CLOCK_Handler+0xbc>
    bf24:	f8c5 9014 	str.w	r9, [r5, #20]
    bf28:	b13f      	cbz	r7, bf3a <MPSL_IRQ_CLOCK_Handler+0x1be>
    bf2a:	7026      	strb	r6, [r4, #0]
    bf2c:	7aa0      	ldrb	r0, [r4, #10]
    bf2e:	2802      	cmp	r0, #2
    bf30:	d101      	bne.n	bf36 <MPSL_IRQ_CLOCK_Handler+0x1ba>
    bf32:	f7ff ff67 	bl	be04 <MPSL_IRQ_CLOCK_Handler+0x88>
    bf36:	f000 f8e7 	bl	c108 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    bf3a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bf3e:	4802      	ldr	r0, [pc, #8]	; (bf48 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    bf40:	3008      	adds	r0, #8
    bf42:	f004 bec6 	b.w	10cd2 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    bf46:	0000      	.short	0x0000
    bf48:	20000318 	.word	0x20000318
    bf4c:	40000c34 	.word	0x40000c34
    bf50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bf54:	4c49      	ldr	r4, [pc, #292]	; (c07c <MPSL_IRQ_CLOCK_Handler+0x300>)
    bf56:	2700      	movs	r7, #0
    bf58:	4606      	mov	r6, r0
    bf5a:	61a7      	str	r7, [r4, #24]
    bf5c:	7842      	ldrb	r2, [r0, #1]
    bf5e:	7881      	ldrb	r1, [r0, #2]
    bf60:	7800      	ldrb	r0, [r0, #0]
    bf62:	72e0      	strb	r0, [r4, #11]
    bf64:	7162      	strb	r2, [r4, #5]
    bf66:	71a1      	strb	r1, [r4, #6]
    bf68:	71e7      	strb	r7, [r4, #7]
    bf6a:	f04f 0801 	mov.w	r8, #1
    bf6e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    bf72:	2805      	cmp	r0, #5
    bf74:	d225      	bcs.n	bfc2 <MPSL_IRQ_CLOCK_Handler+0x246>
    bf76:	e8df f000 	tbb	[pc, r0]
    bf7a:	0310      	.short	0x0310
    bf7c:	00222006 	.word	0x00222006
    bf80:	f8c4 8018 	str.w	r8, [r4, #24]
    bf84:	e009      	b.n	bf9a <MPSL_IRQ_CLOCK_Handler+0x21e>
    bf86:	f000 f8db 	bl	c140 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    bf8a:	2101      	movs	r1, #1
    bf8c:	4628      	mov	r0, r5
    bf8e:	f004 fe1a 	bl	10bc6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    bf92:	2800      	cmp	r0, #0
    bf94:	d0f9      	beq.n	bf8a <MPSL_IRQ_CLOCK_Handler+0x20e>
    bf96:	2002      	movs	r0, #2
    bf98:	61a0      	str	r0, [r4, #24]
    bf9a:	f004 fe40 	bl	10c1e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    bf9e:	b1c0      	cbz	r0, bfd2 <MPSL_IRQ_CLOCK_Handler+0x256>
    bfa0:	f000 fa0c 	bl	c3bc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    bfa4:	7e21      	ldrb	r1, [r4, #24]
    bfa6:	f001 0103 	and.w	r1, r1, #3
    bfaa:	4288      	cmp	r0, r1
    bfac:	d111      	bne.n	bfd2 <MPSL_IRQ_CLOCK_Handler+0x256>
    bfae:	79b0      	ldrb	r0, [r6, #6]
    bfb0:	b160      	cbz	r0, bfcc <MPSL_IRQ_CLOCK_Handler+0x250>
    bfb2:	2002      	movs	r0, #2
    bfb4:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    bfb8:	e044      	b.n	c044 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    bfba:	4831      	ldr	r0, [pc, #196]	; (c080 <MPSL_IRQ_CLOCK_Handler+0x304>)
    bfbc:	e7ec      	b.n	bf98 <MPSL_IRQ_CLOCK_Handler+0x21c>
    bfbe:	4831      	ldr	r0, [pc, #196]	; (c084 <MPSL_IRQ_CLOCK_Handler+0x308>)
    bfc0:	e7ea      	b.n	bf98 <MPSL_IRQ_CLOCK_Handler+0x21c>
    bfc2:	f240 313d 	movw	r1, #829	; 0x33d
    bfc6:	206d      	movs	r0, #109	; 0x6d
    bfc8:	f000 fa56 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bfcc:	f000 f9ca 	bl	c364 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    bfd0:	e038      	b.n	c044 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    bfd2:	f8c5 800c 	str.w	r8, [r5, #12]
    bfd6:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    bfda:	69a0      	ldr	r0, [r4, #24]
    bfdc:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    bfe0:	f004 fe82 	bl	10ce8 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    bfe4:	b940      	cbnz	r0, bff8 <MPSL_IRQ_CLOCK_Handler+0x27c>
    bfe6:	f004 fe89 	bl	10cfc <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    bfea:	b928      	cbnz	r0, bff8 <MPSL_IRQ_CLOCK_Handler+0x27c>
    bfec:	f004 fe9d 	bl	10d2a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    bff0:	b910      	cbnz	r0, bff8 <MPSL_IRQ_CLOCK_Handler+0x27c>
    bff2:	f004 feae 	bl	10d52 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bff6:	b138      	cbz	r0, c008 <MPSL_IRQ_CLOCK_Handler+0x28c>
    bff8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bffc:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    c000:	4921      	ldr	r1, [pc, #132]	; (c088 <MPSL_IRQ_CLOCK_Handler+0x30c>)
    c002:	f3c0 3042 	ubfx	r0, r0, #13, #3
    c006:	6008      	str	r0, [r1, #0]
    c008:	f004 fe6e 	bl	10ce8 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    c00c:	b940      	cbnz	r0, c020 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    c00e:	f004 fe75 	bl	10cfc <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c012:	b928      	cbnz	r0, c020 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    c014:	f004 fe89 	bl	10d2a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c018:	b910      	cbnz	r0, c020 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    c01a:	f004 fe9a 	bl	10d52 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c01e:	b118      	cbz	r0, c028 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    c020:	4919      	ldr	r1, [pc, #100]	; (c088 <MPSL_IRQ_CLOCK_Handler+0x30c>)
    c022:	3110      	adds	r1, #16
    c024:	f8c1 8000 	str.w	r8, [r1]
    c028:	f8c5 8008 	str.w	r8, [r5, #8]
    c02c:	2002      	movs	r0, #2
    c02e:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    c032:	79b0      	ldrb	r0, [r6, #6]
    c034:	b930      	cbnz	r0, c044 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    c036:	f000 f829 	bl	c08c <MPSL_IRQ_CLOCK_Handler+0x310>
    c03a:	2002      	movs	r0, #2
    c03c:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    c040:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    c044:	79a0      	ldrb	r0, [r4, #6]
    c046:	b170      	cbz	r0, c066 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    c048:	7830      	ldrb	r0, [r6, #0]
    c04a:	b960      	cbnz	r0, c066 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    c04c:	f000 f99c 	bl	c388 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    c050:	4606      	mov	r6, r0
    c052:	f000 fa85 	bl	c560 <mpsl_temperature_get>
    c056:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    c05a:	b116      	cbz	r6, c062 <MPSL_IRQ_CLOCK_Handler+0x2e6>
    c05c:	e9c4 1004 	strd	r1, r0, [r4, #16]
    c060:	e001      	b.n	c066 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    c062:	e9c4 0104 	strd	r0, r1, [r4, #16]
    c066:	2101      	movs	r1, #1
    c068:	4628      	mov	r0, r5
    c06a:	f004 fdac 	bl	10bc6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    c06e:	b108      	cbz	r0, c074 <MPSL_IRQ_CLOCK_Handler+0x2f8>
    c070:	f000 f984 	bl	c37c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    c074:	72a7      	strb	r7, [r4, #10]
    c076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c07a:	0000      	.short	0x0000
    c07c:	20000318 	.word	0x20000318
    c080:	00020001 	.word	0x00020001
    c084:	00030001 	.word	0x00030001
    c088:	4000053c 	.word	0x4000053c
    c08c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c090:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    c094:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    c098:	f010 0f02 	tst.w	r0, #2
    c09c:	d011      	beq.n	c0c2 <MPSL_IRQ_CLOCK_Handler+0x346>
    c09e:	4c16      	ldr	r4, [pc, #88]	; (c0f8 <MPSL_IRQ_CLOCK_Handler+0x37c>)
    c0a0:	6820      	ldr	r0, [r4, #0]
    c0a2:	43c0      	mvns	r0, r0
    c0a4:	f340 1600 	sbfx	r6, r0, #4, #1
    c0a8:	6820      	ldr	r0, [r4, #0]
    c0aa:	f040 0010 	orr.w	r0, r0, #16
    c0ae:	6020      	str	r0, [r4, #0]
    c0b0:	f44f 7782 	mov.w	r7, #260	; 0x104
    c0b4:	4639      	mov	r1, r7
    c0b6:	4628      	mov	r0, r5
    c0b8:	1c76      	adds	r6, r6, #1
    c0ba:	f004 fd7f 	bl	10bbc <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    c0be:	b128      	cbz	r0, c0cc <MPSL_IRQ_CLOCK_Handler+0x350>
    c0c0:	e00a      	b.n	c0d8 <MPSL_IRQ_CLOCK_Handler+0x35c>
    c0c2:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    c0c6:	206d      	movs	r0, #109	; 0x6d
    c0c8:	f000 f9d6 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c0cc:	f004 fe83 	bl	10dd6 <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>
    c0d0:	e002      	b.n	c0d8 <MPSL_IRQ_CLOCK_Handler+0x35c>
    c0d2:	bf00      	nop
    c0d4:	f004 fe7d 	bl	10dd2 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    c0d8:	4639      	mov	r1, r7
    c0da:	4628      	mov	r0, r5
    c0dc:	f004 fd6e 	bl	10bbc <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    c0e0:	2800      	cmp	r0, #0
    c0e2:	d0f7      	beq.n	c0d4 <MPSL_IRQ_CLOCK_Handler+0x358>
    c0e4:	f000 f93e 	bl	c364 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    c0e8:	2e00      	cmp	r6, #0
    c0ea:	d103      	bne.n	c0f4 <MPSL_IRQ_CLOCK_Handler+0x378>
    c0ec:	6820      	ldr	r0, [r4, #0]
    c0ee:	f020 0010 	bic.w	r0, r0, #16
    c0f2:	6020      	str	r0, [r4, #0]
    c0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c0f8:	e000ed10 	.word	0xe000ed10

0000c0fc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    c0fc:	4801      	ldr	r0, [pc, #4]	; (c104 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    c0fe:	89c0      	ldrh	r0, [r0, #14]
    c100:	4770      	bx	lr
    c102:	0000      	.short	0x0000
    c104:	20000318 	.word	0x20000318

0000c108 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    c108:	b510      	push	{r4, lr}
    c10a:	f3ef 8410 	mrs	r4, PRIMASK
    c10e:	b672      	cpsid	i
    c110:	480a      	ldr	r0, [pc, #40]	; (c13c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    c112:	7841      	ldrb	r1, [r0, #1]
    c114:	b129      	cbz	r1, c122 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    c116:	7841      	ldrb	r1, [r0, #1]
    c118:	1e49      	subs	r1, r1, #1
    c11a:	7041      	strb	r1, [r0, #1]
    c11c:	7841      	ldrb	r1, [r0, #1]
    c11e:	b129      	cbz	r1, c12c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    c120:	e008      	b.n	c134 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    c122:	f240 1119 	movw	r1, #281	; 0x119
    c126:	206d      	movs	r0, #109	; 0x6d
    c128:	f000 f9a6 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c12c:	7880      	ldrb	r0, [r0, #2]
    c12e:	b908      	cbnz	r0, c134 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    c130:	f000 f938 	bl	c3a4 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    c134:	2c00      	cmp	r4, #0
    c136:	d100      	bne.n	c13a <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    c138:	b662      	cpsie	i
    c13a:	bd10      	pop	{r4, pc}
    c13c:	20000318 	.word	0x20000318

0000c140 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    c140:	b510      	push	{r4, lr}
    c142:	f3ef 8410 	mrs	r4, PRIMASK
    c146:	b672      	cpsid	i
    c148:	4806      	ldr	r0, [pc, #24]	; (c164 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    c14a:	7841      	ldrb	r1, [r0, #1]
    c14c:	1c49      	adds	r1, r1, #1
    c14e:	7041      	strb	r1, [r0, #1]
    c150:	7840      	ldrb	r0, [r0, #1]
    c152:	2801      	cmp	r0, #1
    c154:	d101      	bne.n	c15a <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    c156:	f004 fd4d 	bl	10bf4 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    c15a:	2c00      	cmp	r4, #0
    c15c:	d100      	bne.n	c160 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    c15e:	b662      	cpsie	i
    c160:	bd10      	pop	{r4, pc}
    c162:	0000      	.short	0x0000
    c164:	20000318 	.word	0x20000318

0000c168 <mpsl_clock_hfclk_release>:
    c168:	4805      	ldr	r0, [pc, #20]	; (c180 <mpsl_clock_hfclk_release+0x18>)
    c16a:	b510      	push	{r4, lr}
    c16c:	78c1      	ldrb	r1, [r0, #3]
    c16e:	b121      	cbz	r1, c17a <mpsl_clock_hfclk_release+0x12>
    c170:	2100      	movs	r1, #0
    c172:	7101      	strb	r1, [r0, #4]
    c174:	70c1      	strb	r1, [r0, #3]
    c176:	f7ff ffc7 	bl	c108 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    c17a:	2000      	movs	r0, #0
    c17c:	bd10      	pop	{r4, pc}
    c17e:	0000      	.short	0x0000
    c180:	20000318 	.word	0x20000318

0000c184 <mpsl_clock_hfclk_request>:
    c184:	b570      	push	{r4, r5, r6, lr}
    c186:	4c0c      	ldr	r4, [pc, #48]	; (c1b8 <mpsl_clock_hfclk_request+0x34>)
    c188:	78e1      	ldrb	r1, [r4, #3]
    c18a:	b961      	cbnz	r1, c1a6 <mpsl_clock_hfclk_request+0x22>
    c18c:	2501      	movs	r5, #1
    c18e:	70e5      	strb	r5, [r4, #3]
    c190:	61e0      	str	r0, [r4, #28]
    c192:	f7ff ffd5 	bl	c140 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    c196:	f000 f8f7 	bl	c388 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    c19a:	b130      	cbz	r0, c1aa <mpsl_clock_hfclk_request+0x26>
    c19c:	69e0      	ldr	r0, [r4, #28]
    c19e:	b110      	cbz	r0, c1a6 <mpsl_clock_hfclk_request+0x22>
    c1a0:	4780      	blx	r0
    c1a2:	2000      	movs	r0, #0
    c1a4:	61e0      	str	r0, [r4, #28]
    c1a6:	2000      	movs	r0, #0
    c1a8:	bd70      	pop	{r4, r5, r6, pc}
    c1aa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c1ae:	7125      	strb	r5, [r4, #4]
    c1b0:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    c1b4:	e7f7      	b.n	c1a6 <mpsl_clock_hfclk_request+0x22>
    c1b6:	0000      	.short	0x0000
    c1b8:	20000318 	.word	0x20000318

0000c1bc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    c1bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c1c0:	0005      	movs	r5, r0
    c1c2:	f06f 0015 	mvn.w	r0, #21
    c1c6:	d03f      	beq.n	c248 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c1c8:	7829      	ldrb	r1, [r5, #0]
    c1ca:	2904      	cmp	r1, #4
    c1cc:	d83c      	bhi.n	c248 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c1ce:	2900      	cmp	r1, #0
    c1d0:	7869      	ldrb	r1, [r5, #1]
    c1d2:	d03b      	beq.n	c24c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    c1d4:	2900      	cmp	r1, #0
    c1d6:	d137      	bne.n	c248 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c1d8:	78a9      	ldrb	r1, [r5, #2]
    c1da:	2900      	cmp	r1, #0
    c1dc:	d134      	bne.n	c248 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c1de:	2000      	movs	r0, #0
    c1e0:	f004 fcdb 	bl	10b9a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    c1e4:	2000      	movs	r0, #0
    c1e6:	f004 fccb 	bl	10b80 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    c1ea:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    c1ee:	f04f 31ff 	mov.w	r1, #4294967295
    c1f2:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    c1f6:	2600      	movs	r6, #0
    c1f8:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    c1fc:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    c200:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    c204:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    c208:	4c14      	ldr	r4, [pc, #80]	; (c25c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    c20a:	7066      	strb	r6, [r4, #1]
    c20c:	88a8      	ldrh	r0, [r5, #4]
    c20e:	81a0      	strh	r0, [r4, #12]
    c210:	f004 fce7 	bl	10be2 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    c214:	2701      	movs	r7, #1
    c216:	b108      	cbz	r0, c21c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    c218:	70e7      	strb	r7, [r4, #3]
    c21a:	7067      	strb	r7, [r4, #1]
    c21c:	2101      	movs	r1, #1
    c21e:	4640      	mov	r0, r8
    c220:	f004 fcd1 	bl	10bc6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    c224:	b108      	cbz	r0, c22a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    c226:	f000 f8a9 	bl	c37c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    c22a:	f240 50f5 	movw	r0, #1525	; 0x5f5
    c22e:	81e0      	strh	r0, [r4, #14]
    c230:	4628      	mov	r0, r5
    c232:	f7ff fe8d 	bl	bf50 <MPSL_IRQ_CLOCK_Handler+0x1d4>
    c236:	7267      	strb	r7, [r4, #9]
    c238:	2000      	movs	r0, #0
    c23a:	f004 fca1 	bl	10b80 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    c23e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c242:	4630      	mov	r0, r6
    c244:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    c248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c24c:	2900      	cmp	r1, #0
    c24e:	d0fb      	beq.n	c248 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c250:	2920      	cmp	r1, #32
    c252:	d8f9      	bhi.n	c248 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c254:	78a9      	ldrb	r1, [r5, #2]
    c256:	2921      	cmp	r1, #33	; 0x21
    c258:	d9c1      	bls.n	c1de <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    c25a:	e7f5      	b.n	c248 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c25c:	20000318 	.word	0x20000318

0000c260 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    c260:	4801      	ldr	r0, [pc, #4]	; (c268 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    c262:	8980      	ldrh	r0, [r0, #12]
    c264:	4770      	bx	lr
    c266:	0000      	.short	0x0000
    c268:	20000318 	.word	0x20000318

0000c26c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    c26c:	b510      	push	{r4, lr}
    c26e:	480d      	ldr	r0, [pc, #52]	; (c2a4 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    c270:	f004 fd18 	bl	10ca4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    c274:	490b      	ldr	r1, [pc, #44]	; (c2a4 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    c276:	3908      	subs	r1, #8
    c278:	b148      	cbz	r0, c28e <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    c27a:	2001      	movs	r0, #1
    c27c:	7008      	strb	r0, [r1, #0]
    c27e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c282:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    c286:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c28a:	f7ff bf59 	b.w	c140 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    c28e:	7a88      	ldrb	r0, [r1, #10]
    c290:	2802      	cmp	r0, #2
    c292:	d101      	bne.n	c298 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    c294:	f7ff fdb6 	bl	be04 <MPSL_IRQ_CLOCK_Handler+0x88>
    c298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c29c:	4801      	ldr	r0, [pc, #4]	; (c2a4 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    c29e:	f004 bd18 	b.w	10cd2 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    c2a2:	0000      	.short	0x0000
    c2a4:	20000320 	.word	0x20000320

0000c2a8 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    c2a8:	4802      	ldr	r0, [pc, #8]	; (c2b4 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    c2aa:	7a80      	ldrb	r0, [r0, #10]
    c2ac:	2800      	cmp	r0, #0
    c2ae:	d000      	beq.n	c2b2 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    c2b0:	2001      	movs	r0, #1
    c2b2:	4770      	bx	lr
    c2b4:	20000318 	.word	0x20000318

0000c2b8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    c2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c2ba:	4d1f      	ldr	r5, [pc, #124]	; (c338 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    c2bc:	7ae8      	ldrb	r0, [r5, #11]
    c2be:	2800      	cmp	r0, #0
    c2c0:	d10f      	bne.n	c2e2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c2c2:	7e28      	ldrb	r0, [r5, #24]
    c2c4:	f000 0003 	and.w	r0, r0, #3
    c2c8:	f004 fc99 	bl	10bfe <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    c2cc:	2800      	cmp	r0, #0
    c2ce:	d008      	beq.n	c2e2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c2d0:	f3ef 8110 	mrs	r1, PRIMASK
    c2d4:	b672      	cpsid	i
    c2d6:	f7ff ffe7 	bl	c2a8 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    c2da:	b118      	cbz	r0, c2e4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    c2dc:	2900      	cmp	r1, #0
    c2de:	d100      	bne.n	c2e2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c2e0:	b662      	cpsie	i
    c2e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c2e4:	2601      	movs	r6, #1
    c2e6:	72ae      	strb	r6, [r5, #10]
    c2e8:	b901      	cbnz	r1, c2ec <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    c2ea:	b662      	cpsie	i
    c2ec:	2018      	movs	r0, #24
    c2ee:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    c2f2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    c2f6:	61a6      	str	r6, [r4, #24]
    c2f8:	f44f 7020 	mov.w	r0, #640	; 0x280
    c2fc:	f8ad 0000 	strh.w	r0, [sp]
    c300:	f8bd 0000 	ldrh.w	r0, [sp]
    c304:	1e41      	subs	r1, r0, #1
    c306:	f8ad 1000 	strh.w	r1, [sp]
    c30a:	d2f9      	bcs.n	c300 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    c30c:	2700      	movs	r7, #0
    c30e:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    c312:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    c316:	4808      	ldr	r0, [pc, #32]	; (c338 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    c318:	3008      	adds	r0, #8
    c31a:	f004 fcd6 	bl	10cca <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    c31e:	702f      	strb	r7, [r5, #0]
    c320:	f7ff fd70 	bl	be04 <MPSL_IRQ_CLOCK_Handler+0x88>
    c324:	6166      	str	r6, [r4, #20]
    c326:	7968      	ldrb	r0, [r5, #5]
    c328:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    c32c:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    c330:	2018      	movs	r0, #24
    c332:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    c336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c338:	20000318 	.word	0x20000318

0000c33c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    c33c:	4602      	mov	r2, r0
    c33e:	b510      	push	{r4, lr}
    c340:	2000      	movs	r0, #0
    c342:	2900      	cmp	r1, #0
    c344:	d00a      	beq.n	c35c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    c346:	2a00      	cmp	r2, #0
    c348:	d008      	beq.n	c35c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    c34a:	fba2 0101 	umull	r0, r1, r2, r1
    c34e:	1e40      	subs	r0, r0, #1
    c350:	4a03      	ldr	r2, [pc, #12]	; (c360 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x24>)
    c352:	f141 31ff 	adc.w	r1, r1, #4294967295
    c356:	f004 fd40 	bl	10dda <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
    c35a:	1c40      	adds	r0, r0, #1
    c35c:	bd10      	pop	{r4, pc}
    c35e:	0000      	.short	0x0000
    c360:	000f4240 	.word	0x000f4240

0000c364 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    c364:	b510      	push	{r4, lr}
    c366:	4c04      	ldr	r4, [pc, #16]	; (c378 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    c368:	7e20      	ldrb	r0, [r4, #24]
    c36a:	f000 0003 	and.w	r0, r0, #3
    c36e:	f004 fc46 	bl	10bfe <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    c372:	2800      	cmp	r0, #0
    c374:	d0f8      	beq.n	c368 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    c376:	bd10      	pop	{r4, pc}
    c378:	20000318 	.word	0x20000318

0000c37c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    c37c:	4901      	ldr	r1, [pc, #4]	; (c384 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    c37e:	2001      	movs	r0, #1
    c380:	7008      	strb	r0, [r1, #0]
    c382:	4770      	bx	lr
    c384:	20000389 	.word	0x20000389

0000c388 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    c388:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c38c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    c390:	b918      	cbnz	r0, c39a <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    c392:	4803      	ldr	r0, [pc, #12]	; (c3a0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    c394:	7800      	ldrb	r0, [r0, #0]
    c396:	2800      	cmp	r0, #0
    c398:	d000      	beq.n	c39c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    c39a:	2001      	movs	r0, #1
    c39c:	4770      	bx	lr
    c39e:	0000      	.short	0x0000
    c3a0:	20000389 	.word	0x20000389

0000c3a4 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    c3a4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c3a8:	2101      	movs	r1, #1
    c3aa:	6041      	str	r1, [r0, #4]
    c3ac:	2100      	movs	r1, #0
    c3ae:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    c3b2:	4801      	ldr	r0, [pc, #4]	; (c3b8 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    c3b4:	7001      	strb	r1, [r0, #0]
    c3b6:	4770      	bx	lr
    c3b8:	20000389 	.word	0x20000389

0000c3bc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    c3bc:	4802      	ldr	r0, [pc, #8]	; (c3c8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    c3be:	6800      	ldr	r0, [r0, #0]
    c3c0:	f000 0003 	and.w	r0, r0, #3
    c3c4:	4770      	bx	lr
    c3c6:	0000      	.short	0x0000
    c3c8:	4000041c 	.word	0x4000041c
    c3cc:	b510      	push	{r4, lr}
    c3ce:	b131      	cbz	r1, c3de <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    c3d0:	2901      	cmp	r1, #1
    c3d2:	d007      	beq.n	c3e4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    c3d4:	f240 3102 	movw	r1, #770	; 0x302
    c3d8:	a005      	add	r0, pc, #20	; (adr r0, c3f0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    c3da:	f000 f821 	bl	c420 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    c3de:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    c3e2:	e001      	b.n	c3e8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    c3e4:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    c3e8:	f000 0001 	and.w	r0, r0, #1
    c3ec:	bd10      	pop	{r4, pc}
    c3ee:	0000      	.short	0x0000
    c3f0:	5f66726e 	.word	0x5f66726e
    c3f4:	636f6c63 	.word	0x636f6c63
    c3f8:	00682e6b 	.word	0x00682e6b
    c3fc:	f3bf 8f4f 	dsb	sy
    c400:	4805      	ldr	r0, [pc, #20]	; (c418 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    c402:	6801      	ldr	r1, [r0, #0]
    c404:	4a05      	ldr	r2, [pc, #20]	; (c41c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    c406:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    c40a:	4311      	orrs	r1, r2
    c40c:	6001      	str	r1, [r0, #0]
    c40e:	f3bf 8f4f 	dsb	sy
    c412:	bf00      	nop
    c414:	e7fd      	b.n	c412 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    c416:	0000      	.short	0x0000
    c418:	e000ed0c 	.word	0xe000ed0c
    c41c:	05fa0004 	.word	0x05fa0004

0000c420 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    c420:	b672      	cpsid	i
    c422:	4a03      	ldr	r2, [pc, #12]	; (c430 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    c424:	6852      	ldr	r2, [r2, #4]
    c426:	b102      	cbz	r2, c42a <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    c428:	4790      	blx	r2
    c42a:	f7ff ffe7 	bl	c3fc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    c42e:	0000      	.short	0x0000
    c430:	20000338 	.word	0x20000338
    c434:	4806      	ldr	r0, [pc, #24]	; (c450 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    c436:	b510      	push	{r4, lr}
    c438:	2100      	movs	r1, #0
    c43a:	6001      	str	r1, [r0, #0]
    c43c:	2101      	movs	r1, #1
    c43e:	6001      	str	r1, [r0, #0]
    c440:	4608      	mov	r0, r1
    c442:	f004 fc03 	bl	10c4c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    c446:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c44a:	2001      	movs	r0, #1
    c44c:	f004 bbf1 	b.w	10c32 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c450:	40001ffc 	.word	0x40001ffc
    c454:	4807      	ldr	r0, [pc, #28]	; (c474 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    c456:	b510      	push	{r4, lr}
    c458:	2101      	movs	r1, #1
    c45a:	6041      	str	r1, [r0, #4]
    c45c:	1e89      	subs	r1, r1, #2
    c45e:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    c462:	200c      	movs	r0, #12
    c464:	f004 fbf2 	bl	10c4c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    c468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c46c:	200c      	movs	r0, #12
    c46e:	f004 bbe0 	b.w	10c32 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c472:	0000      	.short	0x0000
    c474:	4000c000 	.word	0x4000c000

0000c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    c478:	b50e      	push	{r1, r2, r3, lr}
    c47a:	b672      	cpsid	i
    c47c:	4a0f      	ldr	r2, [pc, #60]	; (c4bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    c47e:	6855      	ldr	r5, [r2, #4]
    c480:	b1d5      	cbz	r5, c4b8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    c482:	2200      	movs	r2, #0
    c484:	4603      	mov	r3, r0
    c486:	466e      	mov	r6, sp
    c488:	240a      	movs	r4, #10
    c48a:	e003      	b.n	c494 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    c48c:	fbb0 f0f4 	udiv	r0, r0, r4
    c490:	1c52      	adds	r2, r2, #1
    c492:	b2d2      	uxtb	r2, r2
    c494:	2800      	cmp	r0, #0
    c496:	d1f9      	bne.n	c48c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    c498:	54b0      	strb	r0, [r6, r2]
    c49a:	e009      	b.n	c4b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    c49c:	fbb3 f0f4 	udiv	r0, r3, r4
    c4a0:	fb04 3010 	mls	r0, r4, r0, r3
    c4a4:	fbb3 f3f4 	udiv	r3, r3, r4
    c4a8:	1e52      	subs	r2, r2, #1
    c4aa:	b2d2      	uxtb	r2, r2
    c4ac:	3030      	adds	r0, #48	; 0x30
    c4ae:	54b0      	strb	r0, [r6, r2]
    c4b0:	2a00      	cmp	r2, #0
    c4b2:	d1f3      	bne.n	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    c4b4:	4630      	mov	r0, r6
    c4b6:	47a8      	blx	r5
    c4b8:	f7ff ffa0 	bl	c3fc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    c4bc:	20000338 	.word	0x20000338

0000c4c0 <mpsl_init>:
    c4c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c4c4:	4c18      	ldr	r4, [pc, #96]	; (c528 <mpsl_init+0x68>)
    c4c6:	4606      	mov	r6, r0
    c4c8:	4617      	mov	r7, r2
    c4ca:	7860      	ldrb	r0, [r4, #1]
    c4cc:	460d      	mov	r5, r1
    c4ce:	b118      	cbz	r0, c4d8 <mpsl_init+0x18>
    c4d0:	f04f 30ff 	mov.w	r0, #4294967295
    c4d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c4d8:	f7fc f9b0 	bl	883c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    c4dc:	b906      	cbnz	r6, c4e0 <mpsl_init+0x20>
    c4de:	4e13      	ldr	r6, [pc, #76]	; (c52c <mpsl_init+0x6c>)
    c4e0:	6067      	str	r7, [r4, #4]
    c4e2:	7025      	strb	r5, [r4, #0]
    c4e4:	f7ff ffa6 	bl	c434 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    c4e8:	f7ff ffb4 	bl	c454 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    c4ec:	4630      	mov	r0, r6
    c4ee:	f7ff fe65 	bl	c1bc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    c4f2:	0006      	movs	r6, r0
    c4f4:	d1ee      	bne.n	c4d4 <mpsl_init+0x14>
    c4f6:	f7fe fe29 	bl	b14c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    c4fa:	f7ff fedd 	bl	c2b8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    c4fe:	f004 fa8a 	bl	10a16 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    c502:	4628      	mov	r0, r5
    c504:	f004 fb95 	bl	10c32 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c508:	2001      	movs	r0, #1
    c50a:	2d00      	cmp	r5, #0
    c50c:	db09      	blt.n	c522 <mpsl_init+0x62>
    c50e:	f005 011f 	and.w	r1, r5, #31
    c512:	fa00 f101 	lsl.w	r1, r0, r1
    c516:	096a      	lsrs	r2, r5, #5
    c518:	0092      	lsls	r2, r2, #2
    c51a:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    c51e:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    c522:	7060      	strb	r0, [r4, #1]
    c524:	4630      	mov	r0, r6
    c526:	e7d5      	b.n	c4d4 <mpsl_init+0x14>
    c528:	20000338 	.word	0x20000338
    c52c:	00010c6e 	.word	0x00010c6e

0000c530 <mpsl_is_initialized>:
    c530:	4801      	ldr	r0, [pc, #4]	; (c538 <mpsl_is_initialized+0x8>)
    c532:	7840      	ldrb	r0, [r0, #1]
    c534:	4770      	bx	lr
    c536:	0000      	.short	0x0000
    c538:	20000338 	.word	0x20000338

0000c53c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    c53c:	4807      	ldr	r0, [pc, #28]	; (c55c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    c53e:	f990 0000 	ldrsb.w	r0, [r0]
    c542:	2800      	cmp	r0, #0
    c544:	db09      	blt.n	c55a <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    c546:	f000 021f 	and.w	r2, r0, #31
    c54a:	2101      	movs	r1, #1
    c54c:	4091      	lsls	r1, r2
    c54e:	0940      	lsrs	r0, r0, #5
    c550:	0080      	lsls	r0, r0, #2
    c552:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c556:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c55a:	4770      	bx	lr
    c55c:	20000338 	.word	0x20000338

0000c560 <mpsl_temperature_get>:
    c560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c564:	2501      	movs	r5, #1
    c566:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    c56a:	0329      	lsls	r1, r5, #12
    c56c:	f04f 0800 	mov.w	r8, #0
    c570:	4640      	mov	r0, r8
    c572:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    c576:	f3bf 8f4f 	dsb	sy
    c57a:	f3bf 8f6f 	isb	sy
    c57e:	4c16      	ldr	r4, [pc, #88]	; (c5d8 <mpsl_temperature_get+0x78>)
    c580:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    c584:	200c      	movs	r0, #12
    c586:	f004 fb80 	bl	10c8a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    c58a:	4e14      	ldr	r6, [pc, #80]	; (c5dc <mpsl_temperature_get+0x7c>)
    c58c:	6830      	ldr	r0, [r6, #0]
    c58e:	43c0      	mvns	r0, r0
    c590:	f340 1700 	sbfx	r7, r0, #4, #1
    c594:	6830      	ldr	r0, [r6, #0]
    c596:	f040 0010 	orr.w	r0, r0, #16
    c59a:	6030      	str	r0, [r6, #0]
    c59c:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    c5a0:	6025      	str	r5, [r4, #0]
    c5a2:	1c7f      	adds	r7, r7, #1
    c5a4:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    c5a8:	b108      	cbz	r0, c5ae <mpsl_temperature_get+0x4e>
    c5aa:	b11f      	cbz	r7, c5b4 <mpsl_temperature_get+0x54>
    c5ac:	e006      	b.n	c5bc <mpsl_temperature_get+0x5c>
    c5ae:	f004 fc10 	bl	10dd2 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    c5b2:	e7f7      	b.n	c5a4 <mpsl_temperature_get+0x44>
    c5b4:	6830      	ldr	r0, [r6, #0]
    c5b6:	f020 0010 	bic.w	r0, r0, #16
    c5ba:	6030      	str	r0, [r6, #0]
    c5bc:	f8d4 6508 	ldr.w	r6, [r4, #1288]	; 0x508
    c5c0:	6065      	str	r5, [r4, #4]
    c5c2:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
    c5c6:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    c5ca:	200c      	movs	r0, #12
    c5cc:	f004 fb5d 	bl	10c8a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    c5d0:	4630      	mov	r0, r6
    c5d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c5d6:	0000      	.short	0x0000
    c5d8:	4000c000 	.word	0x4000c000
    c5dc:	e000ed10 	.word	0xe000ed10

0000c5e0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    c5e0:	b510      	push	{r4, lr}
    c5e2:	4602      	mov	r2, r0
    c5e4:	2005      	movs	r0, #5
    c5e6:	490c      	ldr	r1, [pc, #48]	; (c618 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    c5e8:	e004      	b.n	c5f4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    c5ea:	bf00      	nop
    c5ec:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    c5f0:	791b      	ldrb	r3, [r3, #4]
    c5f2:	b133      	cbz	r3, c602 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    c5f4:	1e40      	subs	r0, r0, #1
    c5f6:	b2c0      	uxtb	r0, r0
    c5f8:	d2f8      	bcs.n	c5ec <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    c5fa:	2148      	movs	r1, #72	; 0x48
    c5fc:	2069      	movs	r0, #105	; 0x69
    c5fe:	f7ff ff3b 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c602:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    c606:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    c60a:	2200      	movs	r2, #0
    c60c:	714a      	strb	r2, [r1, #5]
    c60e:	718a      	strb	r2, [r1, #6]
    c610:	2201      	movs	r2, #1
    c612:	710a      	strb	r2, [r1, #4]
    c614:	bd10      	pop	{r4, pc}
    c616:	0000      	.short	0x0000
    c618:	200013b8 	.word	0x200013b8

0000c61c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    c61c:	b510      	push	{r4, lr}
    c61e:	2805      	cmp	r0, #5
    c620:	d301      	bcc.n	c626 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    c622:	2158      	movs	r1, #88	; 0x58
    c624:	e006      	b.n	c634 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    c626:	490a      	ldr	r1, [pc, #40]	; (c650 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    c628:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    c62c:	7901      	ldrb	r1, [r0, #4]
    c62e:	2901      	cmp	r1, #1
    c630:	d003      	beq.n	c63a <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    c632:	2159      	movs	r1, #89	; 0x59
    c634:	2069      	movs	r0, #105	; 0x69
    c636:	f7ff ff1f 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c63a:	7941      	ldrb	r1, [r0, #5]
    c63c:	7982      	ldrb	r2, [r0, #6]
    c63e:	1c49      	adds	r1, r1, #1
    c640:	b2c9      	uxtb	r1, r1
    c642:	428a      	cmp	r2, r1
    c644:	d000      	beq.n	c648 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    c646:	7141      	strb	r1, [r0, #5]
    c648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c64c:	f7ff bf76 	b.w	c53c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    c650:	200013b8 	.word	0x200013b8

0000c654 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>:
    c654:	b510      	push	{r4, lr}
    c656:	2805      	cmp	r0, #5
    c658:	d303      	bcc.n	c662 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0xe>
    c65a:	214f      	movs	r1, #79	; 0x4f
    c65c:	2069      	movs	r0, #105	; 0x69
    c65e:	f7ff ff0b 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c662:	4a03      	ldr	r2, [pc, #12]	; (c670 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0x1c>)
    c664:	2100      	movs	r1, #0
    c666:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    c66a:	7101      	strb	r1, [r0, #4]
    c66c:	bd10      	pop	{r4, pc}
    c66e:	0000      	.short	0x0000
    c670:	200013b8 	.word	0x200013b8

0000c674 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    c674:	b570      	push	{r4, r5, r6, lr}
    c676:	2505      	movs	r5, #5
    c678:	4e0e      	ldr	r6, [pc, #56]	; (c6b4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    c67a:	4c0f      	ldr	r4, [pc, #60]	; (c6b8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    c67c:	e016      	b.n	c6ac <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    c67e:	7821      	ldrb	r1, [r4, #0]
    c680:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    c684:	7902      	ldrb	r2, [r0, #4]
    c686:	2a01      	cmp	r2, #1
    c688:	d108      	bne.n	c69c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    c68a:	7942      	ldrb	r2, [r0, #5]
    c68c:	7983      	ldrb	r3, [r0, #6]
    c68e:	429a      	cmp	r2, r3
    c690:	d004      	beq.n	c69c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    c692:	7942      	ldrb	r2, [r0, #5]
    c694:	7182      	strb	r2, [r0, #6]
    c696:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    c69a:	4780      	blx	r0
    c69c:	7820      	ldrb	r0, [r4, #0]
    c69e:	1c40      	adds	r0, r0, #1
    c6a0:	b2c0      	uxtb	r0, r0
    c6a2:	7020      	strb	r0, [r4, #0]
    c6a4:	2805      	cmp	r0, #5
    c6a6:	d301      	bcc.n	c6ac <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    c6a8:	2000      	movs	r0, #0
    c6aa:	7020      	strb	r0, [r4, #0]
    c6ac:	1e6d      	subs	r5, r5, #1
    c6ae:	b2ed      	uxtb	r5, r5
    c6b0:	d2e5      	bcs.n	c67e <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    c6b2:	bd70      	pop	{r4, r5, r6, pc}
    c6b4:	200013b8 	.word	0x200013b8
    c6b8:	2000038a 	.word	0x2000038a

0000c6bc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    c6bc:	b500      	push	{lr}
    c6be:	f004 fb13 	bl	10ce8 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    c6c2:	b940      	cbnz	r0, c6d6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c6c4:	f004 fb1a 	bl	10cfc <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c6c8:	b928      	cbnz	r0, c6d6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c6ca:	f004 fb2e 	bl	10d2a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c6ce:	b910      	cbnz	r0, c6d6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c6d0:	f004 fb3f 	bl	10d52 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c6d4:	b108      	cbz	r0, c6da <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    c6d6:	4802      	ldr	r0, [pc, #8]	; (c6e0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    c6d8:	bd00      	pop	{pc}
    c6da:	4802      	ldr	r0, [pc, #8]	; (c6e4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    c6dc:	bd00      	pop	{pc}
    c6de:	0000      	.short	0x0000
    c6e0:	4000050c 	.word	0x4000050c
    c6e4:	4001e700 	.word	0x4001e700
    c6e8:	b510      	push	{r4, lr}
    c6ea:	f004 fb32 	bl	10d52 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c6ee:	b330      	cbz	r0, c73e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x82>
    c6f0:	f3ef 8010 	mrs	r0, PRIMASK
    c6f4:	b1c8      	cbz	r0, c72a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x6e>
    c6f6:	2100      	movs	r1, #0
    c6f8:	b672      	cpsid	i
    c6fa:	4812      	ldr	r0, [pc, #72]	; (c744 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x88>)
    c6fc:	6802      	ldr	r2, [r0, #0]
    c6fe:	6803      	ldr	r3, [r0, #0]
    c700:	f3c2 1200 	ubfx	r2, r2, #4, #1
    c704:	f043 0310 	orr.w	r3, r3, #16
    c708:	6003      	str	r3, [r0, #0]
    c70a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    c70e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c712:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    c716:	431c      	orrs	r4, r3
    c718:	d000      	beq.n	c71c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x60>
    c71a:	bf40      	sev
    c71c:	bf20      	wfe
    c71e:	bf00      	nop
    c720:	bf00      	nop
    c722:	bf00      	nop
    c724:	bf00      	nop
    c726:	b112      	cbz	r2, c72e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x72>
    c728:	e005      	b.n	c736 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x7a>
    c72a:	2101      	movs	r1, #1
    c72c:	e7e4      	b.n	c6f8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x3c>
    c72e:	6802      	ldr	r2, [r0, #0]
    c730:	f022 0210 	bic.w	r2, r2, #16
    c734:	6002      	str	r2, [r0, #0]
    c736:	2900      	cmp	r1, #0
    c738:	d000      	beq.n	c73c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x80>
    c73a:	b662      	cpsie	i
    c73c:	bd10      	pop	{r4, pc}
    c73e:	bf20      	wfe
    c740:	bd10      	pop	{r4, pc}
    c742:	0000      	.short	0x0000
    c744:	e000ed10 	.word	0xe000ed10

0000c748 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    c748:	4901      	ldr	r1, [pc, #4]	; (c750 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    c74a:	2001      	movs	r0, #1
    c74c:	7088      	strb	r0, [r1, #2]
    c74e:	4770      	bx	lr
    c750:	20000340 	.word	0x20000340

0000c754 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    c754:	00011053 0001108b 00011075 00011063     S.......u...c...
    c764:	0001106f 0001105d 00011051 0001104f     o...]...Q...O...
    c774:	00011087 0001107b 00011069 00011057     ....{...i...W...
    c784:	00011049 00011041 00011045 0001103b     I...A...E...;...

0000c794 <mpsl_fem_disable>:
    c794:	4801      	ldr	r0, [pc, #4]	; (c79c <mpsl_fem_disable+0x8>)
    c796:	6800      	ldr	r0, [r0, #0]
    c798:	6800      	ldr	r0, [r0, #0]
    c79a:	4700      	bx	r0
    c79c:	20000354 	.word	0x20000354

0000c7a0 <mpsl_fem_lna_configuration_clear>:
    c7a0:	4801      	ldr	r0, [pc, #4]	; (c7a8 <mpsl_fem_lna_configuration_clear+0x8>)
    c7a2:	6800      	ldr	r0, [r0, #0]
    c7a4:	6940      	ldr	r0, [r0, #20]
    c7a6:	4700      	bx	r0
    c7a8:	20000354 	.word	0x20000354

0000c7ac <mpsl_fem_lna_configuration_set>:
    c7ac:	4a01      	ldr	r2, [pc, #4]	; (c7b4 <mpsl_fem_lna_configuration_set+0x8>)
    c7ae:	6812      	ldr	r2, [r2, #0]
    c7b0:	68d2      	ldr	r2, [r2, #12]
    c7b2:	4710      	bx	r2
    c7b4:	20000354 	.word	0x20000354

0000c7b8 <mpsl_fem_lna_is_configured>:
    c7b8:	4901      	ldr	r1, [pc, #4]	; (c7c0 <mpsl_fem_lna_is_configured+0x8>)
    c7ba:	6809      	ldr	r1, [r1, #0]
    c7bc:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    c7be:	4708      	bx	r1
    c7c0:	20000354 	.word	0x20000354

0000c7c4 <mpsl_fem_pa_configuration_clear>:
    c7c4:	4801      	ldr	r0, [pc, #4]	; (c7cc <mpsl_fem_pa_configuration_clear+0x8>)
    c7c6:	6800      	ldr	r0, [r0, #0]
    c7c8:	6900      	ldr	r0, [r0, #16]
    c7ca:	4700      	bx	r0
    c7cc:	20000354 	.word	0x20000354

0000c7d0 <mpsl_fem_pa_configuration_set>:
    c7d0:	4a01      	ldr	r2, [pc, #4]	; (c7d8 <mpsl_fem_pa_configuration_set+0x8>)
    c7d2:	6812      	ldr	r2, [r2, #0]
    c7d4:	6892      	ldr	r2, [r2, #8]
    c7d6:	4710      	bx	r2
    c7d8:	20000354 	.word	0x20000354

0000c7dc <mpsl_fem_pa_gain_set>:
    c7dc:	4901      	ldr	r1, [pc, #4]	; (c7e4 <mpsl_fem_pa_gain_set+0x8>)
    c7de:	6809      	ldr	r1, [r1, #0]
    c7e0:	6a49      	ldr	r1, [r1, #36]	; 0x24
    c7e2:	4708      	bx	r1
    c7e4:	20000354 	.word	0x20000354

0000c7e8 <mpsl_fem_pa_is_configured>:
    c7e8:	4901      	ldr	r1, [pc, #4]	; (c7f0 <mpsl_fem_pa_is_configured+0x8>)
    c7ea:	6809      	ldr	r1, [r1, #0]
    c7ec:	6a89      	ldr	r1, [r1, #40]	; 0x28
    c7ee:	4708      	bx	r1
    c7f0:	20000354 	.word	0x20000354

0000c7f4 <mpsl_fem_tx_power_split>:
    c7f4:	b430      	push	{r4, r5}
    c7f6:	4c03      	ldr	r4, [pc, #12]	; (c804 <mpsl_fem_tx_power_split+0x10>)
    c7f8:	6824      	ldr	r4, [r4, #0]
    c7fa:	6864      	ldr	r4, [r4, #4]
    c7fc:	46a4      	mov	ip, r4
    c7fe:	bc30      	pop	{r4, r5}
    c800:	4760      	bx	ip
    c802:	0000      	.short	0x0000
    c804:	20000354 	.word	0x20000354

0000c808 <mpsl_fem_device_config_254_apply_get>:
    c808:	4801      	ldr	r0, [pc, #4]	; (c810 <mpsl_fem_device_config_254_apply_get+0x8>)
    c80a:	7800      	ldrb	r0, [r0, #0]
    c80c:	4770      	bx	lr
    c80e:	0000      	.short	0x0000
    c810:	2000038b 	.word	0x2000038b

0000c814 <__udivmoddi4>:
    c814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c818:	4686      	mov	lr, r0
    c81a:	468c      	mov	ip, r1
    c81c:	4608      	mov	r0, r1
    c81e:	9e08      	ldr	r6, [sp, #32]
    c820:	4615      	mov	r5, r2
    c822:	4674      	mov	r4, lr
    c824:	4619      	mov	r1, r3
    c826:	2b00      	cmp	r3, #0
    c828:	f040 80c2 	bne.w	c9b0 <__udivmoddi4+0x19c>
    c82c:	4285      	cmp	r5, r0
    c82e:	fab2 f282 	clz	r2, r2
    c832:	d945      	bls.n	c8c0 <__udivmoddi4+0xac>
    c834:	b14a      	cbz	r2, c84a <__udivmoddi4+0x36>
    c836:	f1c2 0320 	rsb	r3, r2, #32
    c83a:	fa00 fc02 	lsl.w	ip, r0, r2
    c83e:	fa2e f303 	lsr.w	r3, lr, r3
    c842:	4095      	lsls	r5, r2
    c844:	ea43 0c0c 	orr.w	ip, r3, ip
    c848:	4094      	lsls	r4, r2
    c84a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c84e:	b2a8      	uxth	r0, r5
    c850:	fbbc f8fe 	udiv	r8, ip, lr
    c854:	0c23      	lsrs	r3, r4, #16
    c856:	fb0e cc18 	mls	ip, lr, r8, ip
    c85a:	fb08 f900 	mul.w	r9, r8, r0
    c85e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    c862:	4599      	cmp	r9, r3
    c864:	d928      	bls.n	c8b8 <__udivmoddi4+0xa4>
    c866:	18eb      	adds	r3, r5, r3
    c868:	f108 37ff 	add.w	r7, r8, #4294967295
    c86c:	d204      	bcs.n	c878 <__udivmoddi4+0x64>
    c86e:	4599      	cmp	r9, r3
    c870:	d902      	bls.n	c878 <__udivmoddi4+0x64>
    c872:	f1a8 0702 	sub.w	r7, r8, #2
    c876:	442b      	add	r3, r5
    c878:	eba3 0309 	sub.w	r3, r3, r9
    c87c:	b2a4      	uxth	r4, r4
    c87e:	fbb3 fcfe 	udiv	ip, r3, lr
    c882:	fb0e 331c 	mls	r3, lr, ip, r3
    c886:	fb0c f000 	mul.w	r0, ip, r0
    c88a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c88e:	42a0      	cmp	r0, r4
    c890:	d914      	bls.n	c8bc <__udivmoddi4+0xa8>
    c892:	192c      	adds	r4, r5, r4
    c894:	f10c 33ff 	add.w	r3, ip, #4294967295
    c898:	d204      	bcs.n	c8a4 <__udivmoddi4+0x90>
    c89a:	42a0      	cmp	r0, r4
    c89c:	d902      	bls.n	c8a4 <__udivmoddi4+0x90>
    c89e:	f1ac 0302 	sub.w	r3, ip, #2
    c8a2:	442c      	add	r4, r5
    c8a4:	1a24      	subs	r4, r4, r0
    c8a6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    c8aa:	b11e      	cbz	r6, c8b4 <__udivmoddi4+0xa0>
    c8ac:	40d4      	lsrs	r4, r2
    c8ae:	2300      	movs	r3, #0
    c8b0:	6034      	str	r4, [r6, #0]
    c8b2:	6073      	str	r3, [r6, #4]
    c8b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c8b8:	4647      	mov	r7, r8
    c8ba:	e7dd      	b.n	c878 <__udivmoddi4+0x64>
    c8bc:	4663      	mov	r3, ip
    c8be:	e7f1      	b.n	c8a4 <__udivmoddi4+0x90>
    c8c0:	bb92      	cbnz	r2, c928 <__udivmoddi4+0x114>
    c8c2:	1b43      	subs	r3, r0, r5
    c8c4:	2101      	movs	r1, #1
    c8c6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c8ca:	b2af      	uxth	r7, r5
    c8cc:	fbb3 fcfe 	udiv	ip, r3, lr
    c8d0:	0c20      	lsrs	r0, r4, #16
    c8d2:	fb0e 331c 	mls	r3, lr, ip, r3
    c8d6:	fb0c f807 	mul.w	r8, ip, r7
    c8da:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    c8de:	4598      	cmp	r8, r3
    c8e0:	d962      	bls.n	c9a8 <__udivmoddi4+0x194>
    c8e2:	18eb      	adds	r3, r5, r3
    c8e4:	f10c 30ff 	add.w	r0, ip, #4294967295
    c8e8:	d204      	bcs.n	c8f4 <__udivmoddi4+0xe0>
    c8ea:	4598      	cmp	r8, r3
    c8ec:	d902      	bls.n	c8f4 <__udivmoddi4+0xe0>
    c8ee:	f1ac 0002 	sub.w	r0, ip, #2
    c8f2:	442b      	add	r3, r5
    c8f4:	eba3 0308 	sub.w	r3, r3, r8
    c8f8:	b2a4      	uxth	r4, r4
    c8fa:	fbb3 fcfe 	udiv	ip, r3, lr
    c8fe:	fb0e 331c 	mls	r3, lr, ip, r3
    c902:	fb0c f707 	mul.w	r7, ip, r7
    c906:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c90a:	42a7      	cmp	r7, r4
    c90c:	d94e      	bls.n	c9ac <__udivmoddi4+0x198>
    c90e:	192c      	adds	r4, r5, r4
    c910:	f10c 33ff 	add.w	r3, ip, #4294967295
    c914:	d204      	bcs.n	c920 <__udivmoddi4+0x10c>
    c916:	42a7      	cmp	r7, r4
    c918:	d902      	bls.n	c920 <__udivmoddi4+0x10c>
    c91a:	f1ac 0302 	sub.w	r3, ip, #2
    c91e:	442c      	add	r4, r5
    c920:	1be4      	subs	r4, r4, r7
    c922:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c926:	e7c0      	b.n	c8aa <__udivmoddi4+0x96>
    c928:	f1c2 0320 	rsb	r3, r2, #32
    c92c:	fa20 f103 	lsr.w	r1, r0, r3
    c930:	4095      	lsls	r5, r2
    c932:	4090      	lsls	r0, r2
    c934:	fa2e f303 	lsr.w	r3, lr, r3
    c938:	4303      	orrs	r3, r0
    c93a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c93e:	b2af      	uxth	r7, r5
    c940:	fbb1 fcfe 	udiv	ip, r1, lr
    c944:	fb0e 101c 	mls	r0, lr, ip, r1
    c948:	0c19      	lsrs	r1, r3, #16
    c94a:	fb0c f807 	mul.w	r8, ip, r7
    c94e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c952:	4588      	cmp	r8, r1
    c954:	fa04 f402 	lsl.w	r4, r4, r2
    c958:	d922      	bls.n	c9a0 <__udivmoddi4+0x18c>
    c95a:	1869      	adds	r1, r5, r1
    c95c:	f10c 30ff 	add.w	r0, ip, #4294967295
    c960:	d204      	bcs.n	c96c <__udivmoddi4+0x158>
    c962:	4588      	cmp	r8, r1
    c964:	d902      	bls.n	c96c <__udivmoddi4+0x158>
    c966:	f1ac 0002 	sub.w	r0, ip, #2
    c96a:	4429      	add	r1, r5
    c96c:	eba1 0108 	sub.w	r1, r1, r8
    c970:	b29b      	uxth	r3, r3
    c972:	fbb1 fcfe 	udiv	ip, r1, lr
    c976:	fb0e 111c 	mls	r1, lr, ip, r1
    c97a:	fb0c f707 	mul.w	r7, ip, r7
    c97e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c982:	429f      	cmp	r7, r3
    c984:	d90e      	bls.n	c9a4 <__udivmoddi4+0x190>
    c986:	18eb      	adds	r3, r5, r3
    c988:	f10c 31ff 	add.w	r1, ip, #4294967295
    c98c:	d204      	bcs.n	c998 <__udivmoddi4+0x184>
    c98e:	429f      	cmp	r7, r3
    c990:	d902      	bls.n	c998 <__udivmoddi4+0x184>
    c992:	f1ac 0102 	sub.w	r1, ip, #2
    c996:	442b      	add	r3, r5
    c998:	1bdb      	subs	r3, r3, r7
    c99a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c99e:	e792      	b.n	c8c6 <__udivmoddi4+0xb2>
    c9a0:	4660      	mov	r0, ip
    c9a2:	e7e3      	b.n	c96c <__udivmoddi4+0x158>
    c9a4:	4661      	mov	r1, ip
    c9a6:	e7f7      	b.n	c998 <__udivmoddi4+0x184>
    c9a8:	4660      	mov	r0, ip
    c9aa:	e7a3      	b.n	c8f4 <__udivmoddi4+0xe0>
    c9ac:	4663      	mov	r3, ip
    c9ae:	e7b7      	b.n	c920 <__udivmoddi4+0x10c>
    c9b0:	4283      	cmp	r3, r0
    c9b2:	d906      	bls.n	c9c2 <__udivmoddi4+0x1ae>
    c9b4:	b916      	cbnz	r6, c9bc <__udivmoddi4+0x1a8>
    c9b6:	2100      	movs	r1, #0
    c9b8:	4608      	mov	r0, r1
    c9ba:	e77b      	b.n	c8b4 <__udivmoddi4+0xa0>
    c9bc:	e9c6 e000 	strd	lr, r0, [r6]
    c9c0:	e7f9      	b.n	c9b6 <__udivmoddi4+0x1a2>
    c9c2:	fab3 f783 	clz	r7, r3
    c9c6:	b98f      	cbnz	r7, c9ec <__udivmoddi4+0x1d8>
    c9c8:	4283      	cmp	r3, r0
    c9ca:	d301      	bcc.n	c9d0 <__udivmoddi4+0x1bc>
    c9cc:	4572      	cmp	r2, lr
    c9ce:	d808      	bhi.n	c9e2 <__udivmoddi4+0x1ce>
    c9d0:	ebbe 0402 	subs.w	r4, lr, r2
    c9d4:	eb60 0303 	sbc.w	r3, r0, r3
    c9d8:	2001      	movs	r0, #1
    c9da:	469c      	mov	ip, r3
    c9dc:	b91e      	cbnz	r6, c9e6 <__udivmoddi4+0x1d2>
    c9de:	2100      	movs	r1, #0
    c9e0:	e768      	b.n	c8b4 <__udivmoddi4+0xa0>
    c9e2:	4638      	mov	r0, r7
    c9e4:	e7fa      	b.n	c9dc <__udivmoddi4+0x1c8>
    c9e6:	e9c6 4c00 	strd	r4, ip, [r6]
    c9ea:	e7f8      	b.n	c9de <__udivmoddi4+0x1ca>
    c9ec:	f1c7 0c20 	rsb	ip, r7, #32
    c9f0:	40bb      	lsls	r3, r7
    c9f2:	fa22 f40c 	lsr.w	r4, r2, ip
    c9f6:	431c      	orrs	r4, r3
    c9f8:	fa2e f10c 	lsr.w	r1, lr, ip
    c9fc:	fa20 f30c 	lsr.w	r3, r0, ip
    ca00:	40b8      	lsls	r0, r7
    ca02:	4301      	orrs	r1, r0
    ca04:	ea4f 4914 	mov.w	r9, r4, lsr #16
    ca08:	fa0e f507 	lsl.w	r5, lr, r7
    ca0c:	fbb3 f8f9 	udiv	r8, r3, r9
    ca10:	fa1f fe84 	uxth.w	lr, r4
    ca14:	fb09 3018 	mls	r0, r9, r8, r3
    ca18:	0c0b      	lsrs	r3, r1, #16
    ca1a:	fb08 fa0e 	mul.w	sl, r8, lr
    ca1e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    ca22:	459a      	cmp	sl, r3
    ca24:	fa02 f207 	lsl.w	r2, r2, r7
    ca28:	d940      	bls.n	caac <__udivmoddi4+0x298>
    ca2a:	18e3      	adds	r3, r4, r3
    ca2c:	f108 30ff 	add.w	r0, r8, #4294967295
    ca30:	d204      	bcs.n	ca3c <__udivmoddi4+0x228>
    ca32:	459a      	cmp	sl, r3
    ca34:	d902      	bls.n	ca3c <__udivmoddi4+0x228>
    ca36:	f1a8 0002 	sub.w	r0, r8, #2
    ca3a:	4423      	add	r3, r4
    ca3c:	eba3 030a 	sub.w	r3, r3, sl
    ca40:	b289      	uxth	r1, r1
    ca42:	fbb3 f8f9 	udiv	r8, r3, r9
    ca46:	fb09 3318 	mls	r3, r9, r8, r3
    ca4a:	fb08 fe0e 	mul.w	lr, r8, lr
    ca4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    ca52:	458e      	cmp	lr, r1
    ca54:	d92c      	bls.n	cab0 <__udivmoddi4+0x29c>
    ca56:	1861      	adds	r1, r4, r1
    ca58:	f108 33ff 	add.w	r3, r8, #4294967295
    ca5c:	d204      	bcs.n	ca68 <__udivmoddi4+0x254>
    ca5e:	458e      	cmp	lr, r1
    ca60:	d902      	bls.n	ca68 <__udivmoddi4+0x254>
    ca62:	f1a8 0302 	sub.w	r3, r8, #2
    ca66:	4421      	add	r1, r4
    ca68:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    ca6c:	fba0 9802 	umull	r9, r8, r0, r2
    ca70:	eba1 010e 	sub.w	r1, r1, lr
    ca74:	4541      	cmp	r1, r8
    ca76:	46ce      	mov	lr, r9
    ca78:	4643      	mov	r3, r8
    ca7a:	d302      	bcc.n	ca82 <__udivmoddi4+0x26e>
    ca7c:	d106      	bne.n	ca8c <__udivmoddi4+0x278>
    ca7e:	454d      	cmp	r5, r9
    ca80:	d204      	bcs.n	ca8c <__udivmoddi4+0x278>
    ca82:	ebb9 0e02 	subs.w	lr, r9, r2
    ca86:	eb68 0304 	sbc.w	r3, r8, r4
    ca8a:	3801      	subs	r0, #1
    ca8c:	2e00      	cmp	r6, #0
    ca8e:	d0a6      	beq.n	c9de <__udivmoddi4+0x1ca>
    ca90:	ebb5 020e 	subs.w	r2, r5, lr
    ca94:	eb61 0103 	sbc.w	r1, r1, r3
    ca98:	fa01 fc0c 	lsl.w	ip, r1, ip
    ca9c:	fa22 f307 	lsr.w	r3, r2, r7
    caa0:	ea4c 0303 	orr.w	r3, ip, r3
    caa4:	40f9      	lsrs	r1, r7
    caa6:	e9c6 3100 	strd	r3, r1, [r6]
    caaa:	e798      	b.n	c9de <__udivmoddi4+0x1ca>
    caac:	4640      	mov	r0, r8
    caae:	e7c5      	b.n	ca3c <__udivmoddi4+0x228>
    cab0:	4643      	mov	r3, r8
    cab2:	e7d9      	b.n	ca68 <__udivmoddi4+0x254>
    cab4:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    cab8:	4681      	mov	r9, r0
    caba:	f100 0007 	add.w	r0, r0, #7
    cabe:	f020 0007 	bic.w	r0, r0, #7
    cac2:	ea5f 0802 	movs.w	r8, r2
    cac6:	9000      	str	r0, [sp, #0]
    cac8:	784a      	ldrb	r2, [r1, #1]
    caca:	f88d 2004 	strb.w	r2, [sp, #4]
    cace:	788a      	ldrb	r2, [r1, #2]
    cad0:	460c      	mov	r4, r1
    cad2:	f88d 2005 	strb.w	r2, [sp, #5]
    cad6:	d000      	beq.n	cada <__udivmoddi4+0x2c6>
    cad8:	2000      	movs	r0, #0
    cada:	a901      	add	r1, sp, #4
    cadc:	f7f4 faaa 	bl	1034 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    cae0:	9900      	ldr	r1, [sp, #0]
    cae2:	2600      	movs	r6, #0
    cae4:	4408      	add	r0, r1
    cae6:	9000      	str	r0, [sp, #0]
    cae8:	7820      	ldrb	r0, [r4, #0]
    caea:	7861      	ldrb	r1, [r4, #1]
    caec:	4635      	mov	r5, r6
    caee:	4408      	add	r0, r1
    caf0:	b2c7      	uxtb	r7, r0
    caf2:	e008      	b.n	cb06 <__udivmoddi4+0x2f2>
    caf4:	7a23      	ldrb	r3, [r4, #8]
    caf6:	79e2      	ldrb	r2, [r4, #7]
    caf8:	79a1      	ldrb	r1, [r4, #6]
    cafa:	7960      	ldrb	r0, [r4, #5]
    cafc:	f000 fe55 	bl	d7aa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    cb00:	1c6d      	adds	r5, r5, #1
    cb02:	4406      	add	r6, r0
    cb04:	b2ed      	uxtb	r5, r5
    cb06:	42bd      	cmp	r5, r7
    cb08:	d3f4      	bcc.n	caf4 <__udivmoddi4+0x2e0>
    cb0a:	9800      	ldr	r0, [sp, #0]
    cb0c:	1cc0      	adds	r0, r0, #3
    cb0e:	f020 0003 	bic.w	r0, r0, #3
    cb12:	9000      	str	r0, [sp, #0]
    cb14:	f1b8 0f00 	cmp.w	r8, #0
    cb18:	d000      	beq.n	cb1c <__udivmoddi4+0x308>
    cb1a:	2000      	movs	r0, #0
    cb1c:	4632      	mov	r2, r6
    cb1e:	4639      	mov	r1, r7
    cb20:	f7f4 fbc2 	bl	12a8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    cb24:	9900      	ldr	r1, [sp, #0]
    cb26:	4642      	mov	r2, r8
    cb28:	4408      	add	r0, r1
    cb2a:	9000      	str	r0, [sp, #0]
    cb2c:	4621      	mov	r1, r4
    cb2e:	4668      	mov	r0, sp
    cb30:	f000 f805 	bl	cb3e <__udivmoddi4+0x32a>
    cb34:	9900      	ldr	r1, [sp, #0]
    cb36:	eba1 0009 	sub.w	r0, r1, r9
    cb3a:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    cb3e:	b570      	push	{r4, r5, r6, lr}
    cb40:	4605      	mov	r5, r0
    cb42:	7888      	ldrb	r0, [r1, #2]
    cb44:	4616      	mov	r6, r2
    cb46:	460c      	mov	r4, r1
    cb48:	b188      	cbz	r0, cb6e <__udivmoddi4+0x35a>
    cb4a:	6828      	ldr	r0, [r5, #0]
    cb4c:	1cc0      	adds	r0, r0, #3
    cb4e:	f020 0003 	bic.w	r0, r0, #3
    cb52:	6028      	str	r0, [r5, #0]
    cb54:	7de1      	ldrb	r1, [r4, #23]
    cb56:	78e2      	ldrb	r2, [r4, #3]
    cb58:	8a63      	ldrh	r3, [r4, #18]
    cb5a:	4411      	add	r1, r2
    cb5c:	b2ca      	uxtb	r2, r1
    cb5e:	78a1      	ldrb	r1, [r4, #2]
    cb60:	b106      	cbz	r6, cb64 <__udivmoddi4+0x350>
    cb62:	2000      	movs	r0, #0
    cb64:	f7f4 fc54 	bl	1410 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    cb68:	6829      	ldr	r1, [r5, #0]
    cb6a:	4408      	add	r0, r1
    cb6c:	6028      	str	r0, [r5, #0]
    cb6e:	7d20      	ldrb	r0, [r4, #20]
    cb70:	2800      	cmp	r0, #0
    cb72:	d00f      	beq.n	cb94 <__udivmoddi4+0x380>
    cb74:	78a0      	ldrb	r0, [r4, #2]
    cb76:	2800      	cmp	r0, #0
    cb78:	d00c      	beq.n	cb94 <__udivmoddi4+0x380>
    cb7a:	6828      	ldr	r0, [r5, #0]
    cb7c:	1dc0      	adds	r0, r0, #7
    cb7e:	f020 0007 	bic.w	r0, r0, #7
    cb82:	6028      	str	r0, [r5, #0]
    cb84:	7d21      	ldrb	r1, [r4, #20]
    cb86:	b106      	cbz	r6, cb8a <__udivmoddi4+0x376>
    cb88:	2000      	movs	r0, #0
    cb8a:	f7f6 fc49 	bl	3420 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY>
    cb8e:	6829      	ldr	r1, [r5, #0]
    cb90:	4408      	add	r0, r1
    cb92:	6028      	str	r0, [r5, #0]
    cb94:	bd70      	pop	{r4, r5, r6, pc}

0000cb96 <sdc_soc_ecb_block_encrypt>:
    cb96:	b530      	push	{r4, r5, lr}
    cb98:	460d      	mov	r5, r1
    cb9a:	b08d      	sub	sp, #52	; 0x34
    cb9c:	4614      	mov	r4, r2
    cb9e:	4601      	mov	r1, r0
    cba0:	2210      	movs	r2, #16
    cba2:	4668      	mov	r0, sp
    cba4:	f004 f96f 	bl	10e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cba8:	2210      	movs	r2, #16
    cbaa:	4629      	mov	r1, r5
    cbac:	a804      	add	r0, sp, #16
    cbae:	f004 f96a 	bl	10e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cbb2:	4668      	mov	r0, sp
    cbb4:	f000 ff7e 	bl	dab4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    cbb8:	b118      	cbz	r0, cbc2 <sdc_soc_ecb_block_encrypt+0x2c>
    cbba:	f06f 0015 	mvn.w	r0, #21
    cbbe:	b00d      	add	sp, #52	; 0x34
    cbc0:	bd30      	pop	{r4, r5, pc}
    cbc2:	2210      	movs	r2, #16
    cbc4:	4620      	mov	r0, r4
    cbc6:	a908      	add	r1, sp, #32
    cbc8:	f004 f95d 	bl	10e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cbcc:	2000      	movs	r0, #0
    cbce:	e7f6      	b.n	cbbe <sdc_soc_ecb_block_encrypt+0x28>

0000cbd0 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    cbd0:	b50e      	push	{r1, r2, r3, lr}
    cbd2:	4601      	mov	r1, r0
    cbd4:	4668      	mov	r0, sp
    cbd6:	f000 f818 	bl	cc0a <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    cbda:	4668      	mov	r0, sp
    cbdc:	f001 fbee 	bl	e3bc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    cbe0:	bd0e      	pop	{r1, r2, r3, pc}
    cbe2:	b570      	push	{r4, r5, r6, lr}
    cbe4:	460c      	mov	r4, r1
    cbe6:	4605      	mov	r5, r0
    cbe8:	f7f4 f862 	bl	cb0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    cbec:	2800      	cmp	r0, #0
    cbee:	d002      	beq.n	cbf6 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x26>
    cbf0:	2d3e      	cmp	r5, #62	; 0x3e
    cbf2:	d001      	beq.n	cbf8 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x28>
    cbf4:	2001      	movs	r0, #1
    cbf6:	bd70      	pop	{r4, r5, r6, pc}
    cbf8:	2c12      	cmp	r4, #18
    cbfa:	d004      	beq.n	cc06 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x36>
    cbfc:	4620      	mov	r0, r4
    cbfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cc02:	f7f4 b867 	b.w	cd4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    cc06:	2000      	movs	r0, #0
    cc08:	bd70      	pop	{r4, r5, r6, pc}

0000cc0a <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    cc0a:	880a      	ldrh	r2, [r1, #0]
    cc0c:	f3c2 020b 	ubfx	r2, r2, #0, #12
    cc10:	8082      	strh	r2, [r0, #4]
    cc12:	884a      	ldrh	r2, [r1, #2]
    cc14:	80c2      	strh	r2, [r0, #6]
    cc16:	784a      	ldrb	r2, [r1, #1]
    cc18:	0993      	lsrs	r3, r2, #6
    cc1a:	2200      	movs	r2, #0
    cc1c:	7242      	strb	r2, [r0, #9]
    cc1e:	784b      	ldrb	r3, [r1, #1]
    cc20:	f3c3 1301 	ubfx	r3, r3, #4, #2
    cc24:	b11b      	cbz	r3, cc2e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    cc26:	2b01      	cmp	r3, #1
    cc28:	d005      	beq.n	cc36 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    cc2a:	2b02      	cmp	r3, #2
    cc2c:	d005      	beq.n	cc3a <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    cc2e:	7202      	strb	r2, [r0, #8]
    cc30:	1d09      	adds	r1, r1, #4
    cc32:	6001      	str	r1, [r0, #0]
    cc34:	4770      	bx	lr
    cc36:	2201      	movs	r2, #1
    cc38:	e7f9      	b.n	cc2e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    cc3a:	2202      	movs	r2, #2
    cc3c:	e7f7      	b.n	cc2e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000cc3e <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    cc3e:	b510      	push	{r4, lr}
    cc40:	460c      	mov	r4, r1
    cc42:	7909      	ldrb	r1, [r1, #4]
    cc44:	7001      	strb	r1, [r0, #0]
    cc46:	7841      	ldrb	r1, [r0, #1]
    cc48:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    cc4c:	7041      	strb	r1, [r0, #1]
    cc4e:	88a2      	ldrh	r2, [r4, #4]
    cc50:	f3c2 2203 	ubfx	r2, r2, #8, #4
    cc54:	4311      	orrs	r1, r2
    cc56:	7041      	strb	r1, [r0, #1]
    cc58:	79a2      	ldrb	r2, [r4, #6]
    cc5a:	7082      	strb	r2, [r0, #2]
    cc5c:	88e2      	ldrh	r2, [r4, #6]
    cc5e:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    cc62:	0a12      	lsrs	r2, r2, #8
    cc64:	70c2      	strb	r2, [r0, #3]
    cc66:	7041      	strb	r1, [r0, #1]
    cc68:	7a22      	ldrb	r2, [r4, #8]
    cc6a:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    cc6e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    cc72:	7041      	strb	r1, [r0, #1]
    cc74:	7a62      	ldrb	r2, [r4, #9]
    cc76:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    cc7a:	7041      	strb	r1, [r0, #1]
    cc7c:	6821      	ldr	r1, [r4, #0]
    cc7e:	1d02      	adds	r2, r0, #4
    cc80:	4291      	cmp	r1, r2
    cc82:	d006      	beq.n	cc92 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    cc84:	88e2      	ldrh	r2, [r4, #6]
    cc86:	2afb      	cmp	r2, #251	; 0xfb
    cc88:	d300      	bcc.n	cc8c <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    cc8a:	22fb      	movs	r2, #251	; 0xfb
    cc8c:	1d00      	adds	r0, r0, #4
    cc8e:	f004 f8fa 	bl	10e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cc92:	79a0      	ldrb	r0, [r4, #6]
    cc94:	1d00      	adds	r0, r0, #4
    cc96:	b2c0      	uxtb	r0, r0
    cc98:	bd10      	pop	{r4, pc}

0000cc9a <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>:
    cc9a:	b430      	push	{r4, r5}
    cc9c:	790a      	ldrb	r2, [r1, #4]
    cc9e:	7002      	strb	r2, [r0, #0]
    cca0:	7842      	ldrb	r2, [r0, #1]
    cca2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    cca6:	7042      	strb	r2, [r0, #1]
    cca8:	888b      	ldrh	r3, [r1, #4]
    ccaa:	f3c3 2303 	ubfx	r3, r3, #8, #4
    ccae:	431a      	orrs	r2, r3
    ccb0:	7042      	strb	r2, [r0, #1]
    ccb2:	798b      	ldrb	r3, [r1, #6]
    ccb4:	7083      	strb	r3, [r0, #2]
    ccb6:	78c3      	ldrb	r3, [r0, #3]
    ccb8:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
    ccbc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    ccc0:	70c3      	strb	r3, [r0, #3]
    ccc2:	88cc      	ldrh	r4, [r1, #6]
    ccc4:	f3c4 2405 	ubfx	r4, r4, #8, #6
    ccc8:	4323      	orrs	r3, r4
    ccca:	70c3      	strb	r3, [r0, #3]
    cccc:	7042      	strb	r2, [r0, #1]
    ccce:	7a0c      	ldrb	r4, [r1, #8]
    ccd0:	f004 0403 	and.w	r4, r4, #3
    ccd4:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    ccd8:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    ccdc:	7042      	strb	r2, [r0, #1]
    ccde:	7a4c      	ldrb	r4, [r1, #9]
    cce0:	ea42 1284 	orr.w	r2, r2, r4, lsl #6
    cce4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    cce8:	7042      	strb	r2, [r0, #1]
    ccea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    ccee:	70c2      	strb	r2, [r0, #3]
    ccf0:	680b      	ldr	r3, [r1, #0]
    ccf2:	1d02      	adds	r2, r0, #4
    ccf4:	4293      	cmp	r3, r2
    ccf6:	d005      	beq.n	cd04 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY+0x6a>
    ccf8:	88ca      	ldrh	r2, [r1, #6]
    ccfa:	bc30      	pop	{r4, r5}
    ccfc:	4619      	mov	r1, r3
    ccfe:	1d00      	adds	r0, r0, #4
    cd00:	f004 b8c1 	b.w	10e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cd04:	bc30      	pop	{r4, r5}
    cd06:	4770      	bx	lr

0000cd08 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    cd08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cd0c:	460d      	mov	r5, r1
    cd0e:	4604      	mov	r4, r0
    cd10:	f891 c000 	ldrb.w	ip, [r1]
    cd14:	2000      	movs	r0, #0
    cd16:	230c      	movs	r3, #12
    cd18:	2705      	movs	r7, #5
    cd1a:	2203      	movs	r2, #3
    cd1c:	263e      	movs	r6, #62	; 0x3e
    cd1e:	21ff      	movs	r1, #255	; 0xff
    cd20:	f1bc 0f1e 	cmp.w	ip, #30
    cd24:	d27e      	bcs.n	ce24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x11c>
    cd26:	e8df f00c 	tbb	[pc, ip]
    cd2a:	29e7      	.short	0x29e7
    cd2c:	63e74240 	.word	0x63e74240
    cd30:	ac99806d 	.word	0xac99806d
    cd34:	dfc4b9ae 	.word	0xdfc4b9ae
    cd38:	e7e70ff3 	.word	0xe7e70ff3
    cd3c:	fcd2cf48 	.word	0xfcd2cf48
    cd40:	edeeeff0 	.word	0xedeeeff0
    cd44:	e9eaebec 	.word	0xe9eaebec
    cd48:	200e      	movs	r0, #14
    cd4a:	7020      	strb	r0, [r4, #0]
    cd4c:	7968      	ldrb	r0, [r5, #5]
    cd4e:	70e0      	strb	r0, [r4, #3]
    cd50:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    cd54:	0a00      	lsrs	r0, r0, #8
    cd56:	7120      	strb	r0, [r4, #4]
    cd58:	7928      	ldrb	r0, [r5, #4]
    cd5a:	70a0      	strb	r0, [r4, #2]
    cd5c:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    cd60:	3883      	subs	r0, #131	; 0x83
    cd62:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    cd66:	d003      	beq.n	cd70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x68>
    cd68:	2136      	movs	r1, #54	; 0x36
    cd6a:	20c7      	movs	r0, #199	; 0xc7
    cd6c:	f7f3 fe20 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cd70:	1de9      	adds	r1, r5, #7
    cd72:	1d60      	adds	r0, r4, #5
    cd74:	f004 f887 	bl	10e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cd78:	2007      	movs	r0, #7
    cd7a:	e0bb      	b.n	cef4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    cd7c:	7023      	strb	r3, [r4, #0]
    cd7e:	7928      	ldrb	r0, [r5, #4]
    cd80:	70a0      	strb	r0, [r4, #2]
    cd82:	7968      	ldrb	r0, [r5, #5]
    cd84:	70e0      	strb	r0, [r4, #3]
    cd86:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    cd8a:	0a00      	lsrs	r0, r0, #8
    cd8c:	7120      	strb	r0, [r4, #4]
    cd8e:	79e8      	ldrb	r0, [r5, #7]
    cd90:	7160      	strb	r0, [r4, #5]
    cd92:	7a28      	ldrb	r0, [r5, #8]
    cd94:	71a0      	strb	r0, [r4, #6]
    cd96:	8928      	ldrh	r0, [r5, #8]
    cd98:	0a00      	lsrs	r0, r0, #8
    cd9a:	71e0      	strb	r0, [r4, #7]
    cd9c:	7aa8      	ldrb	r0, [r5, #10]
    cd9e:	7220      	strb	r0, [r4, #8]
    cda0:	8968      	ldrh	r0, [r5, #10]
    cda2:	0a00      	lsrs	r0, r0, #8
    cda4:	7260      	strb	r0, [r4, #9]
    cda6:	2008      	movs	r0, #8
    cda8:	e0a4      	b.n	cef4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    cdaa:	2010      	movs	r0, #16
    cdac:	e000      	b.n	cdb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xa8>
    cdae:	201a      	movs	r0, #26
    cdb0:	7020      	strb	r0, [r4, #0]
    cdb2:	7928      	ldrb	r0, [r5, #4]
    cdb4:	70a0      	strb	r0, [r4, #2]
    cdb6:	2001      	movs	r0, #1
    cdb8:	e09c      	b.n	cef4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    cdba:	2029      	movs	r0, #41	; 0x29
    cdbc:	f7f3 ff8a 	bl	cd4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    cdc0:	b148      	cbz	r0, cdd6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xce>
    cdc2:	7026      	strb	r6, [r4, #0]
    cdc4:	2029      	movs	r0, #41	; 0x29
    cdc6:	70a0      	strb	r0, [r4, #2]
    cdc8:	2221      	movs	r2, #33	; 0x21
    cdca:	1d29      	adds	r1, r5, #4
    cdcc:	1ce0      	adds	r0, r4, #3
    cdce:	f004 f85a 	bl	10e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cdd2:	2022      	movs	r0, #34	; 0x22
    cdd4:	e08e      	b.n	cef4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    cdd6:	200a      	movs	r0, #10
    cdd8:	f7f3 ff7c 	bl	cd4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    cddc:	2800      	cmp	r0, #0
    cdde:	4629      	mov	r1, r5
    cde0:	4620      	mov	r0, r4
    cde2:	d002      	beq.n	cdea <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xe2>
    cde4:	f000 f95b 	bl	d09e <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0x52>
    cde8:	e082      	b.n	cef0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    cdea:	f000 f92f 	bl	d04c <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>
    cdee:	e07f      	b.n	cef0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    cdf0:	7026      	strb	r6, [r4, #0]
    cdf2:	2014      	movs	r0, #20
    cdf4:	70a0      	strb	r0, [r4, #2]
    cdf6:	7928      	ldrb	r0, [r5, #4]
    cdf8:	70e0      	strb	r0, [r4, #3]
    cdfa:	88a8      	ldrh	r0, [r5, #4]
    cdfc:	0a00      	lsrs	r0, r0, #8
    cdfe:	7120      	strb	r0, [r4, #4]
    ce00:	79a8      	ldrb	r0, [r5, #6]
    ce02:	e0c0      	b.n	cf86 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    ce04:	223e      	movs	r2, #62	; 0x3e
    ce06:	7022      	strb	r2, [r4, #0]
    ce08:	2204      	movs	r2, #4
    ce0a:	70a2      	strb	r2, [r4, #2]
    ce0c:	6868      	ldr	r0, [r5, #4]
    ce0e:	f8c4 0003 	str.w	r0, [r4, #3]
    ce12:	68a8      	ldr	r0, [r5, #8]
    ce14:	f8c4 0007 	str.w	r0, [r4, #7]
    ce18:	89a8      	ldrh	r0, [r5, #12]
    ce1a:	f8a4 000b 	strh.w	r0, [r4, #11]
    ce1e:	7ba8      	ldrb	r0, [r5, #14]
    ce20:	7360      	strb	r0, [r4, #13]
    ce22:	e000      	b.n	ce26 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x11e>
    ce24:	e068      	b.n	cef8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    ce26:	200c      	movs	r0, #12
    ce28:	e064      	b.n	cef4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    ce2a:	7026      	strb	r6, [r4, #0]
    ce2c:	70a2      	strb	r2, [r4, #2]
    ce2e:	7928      	ldrb	r0, [r5, #4]
    ce30:	70e0      	strb	r0, [r4, #3]
    ce32:	79a8      	ldrb	r0, [r5, #6]
    ce34:	7120      	strb	r0, [r4, #4]
    ce36:	88e8      	ldrh	r0, [r5, #6]
    ce38:	0a00      	lsrs	r0, r0, #8
    ce3a:	7160      	strb	r0, [r4, #5]
    ce3c:	7a28      	ldrb	r0, [r5, #8]
    ce3e:	71a0      	strb	r0, [r4, #6]
    ce40:	8928      	ldrh	r0, [r5, #8]
    ce42:	0a00      	lsrs	r0, r0, #8
    ce44:	71e0      	strb	r0, [r4, #7]
    ce46:	7aa8      	ldrb	r0, [r5, #10]
    ce48:	7220      	strb	r0, [r4, #8]
    ce4a:	8968      	ldrh	r0, [r5, #10]
    ce4c:	0a00      	lsrs	r0, r0, #8
    ce4e:	7260      	strb	r0, [r4, #9]
    ce50:	7b28      	ldrb	r0, [r5, #12]
    ce52:	72a0      	strb	r0, [r4, #10]
    ce54:	89a8      	ldrh	r0, [r5, #12]
    ce56:	0a00      	lsrs	r0, r0, #8
    ce58:	72e0      	strb	r0, [r4, #11]
    ce5a:	e0d1      	b.n	d000 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f8>
    ce5c:	7026      	strb	r6, [r4, #0]
    ce5e:	70a7      	strb	r7, [r4, #2]
    ce60:	7928      	ldrb	r0, [r5, #4]
    ce62:	70e0      	strb	r0, [r4, #3]
    ce64:	88a8      	ldrh	r0, [r5, #4]
    ce66:	0a00      	lsrs	r0, r0, #8
    ce68:	7120      	strb	r0, [r4, #4]
    ce6a:	f8d5 0006 	ldr.w	r0, [r5, #6]
    ce6e:	f8c4 0005 	str.w	r0, [r4, #5]
    ce72:	f8d5 000a 	ldr.w	r0, [r5, #10]
    ce76:	f8c4 0009 	str.w	r0, [r4, #9]
    ce7a:	89e8      	ldrh	r0, [r5, #14]
    ce7c:	f8a4 000d 	strh.w	r0, [r4, #13]
    ce80:	e0e2      	b.n	d048 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x340>
    ce82:	2011      	movs	r0, #17
    ce84:	e045      	b.n	cf12 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x20a>
    ce86:	7027      	strb	r7, [r4, #0]
    ce88:	7928      	ldrb	r0, [r5, #4]
    ce8a:	70a0      	strb	r0, [r4, #2]
    ce8c:	7968      	ldrb	r0, [r5, #5]
    ce8e:	70e0      	strb	r0, [r4, #3]
    ce90:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    ce94:	0a00      	lsrs	r0, r0, #8
    ce96:	7120      	strb	r0, [r4, #4]
    ce98:	79e8      	ldrb	r0, [r5, #7]
    ce9a:	e074      	b.n	cf86 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    ce9c:	2008      	movs	r0, #8
    ce9e:	7020      	strb	r0, [r4, #0]
    cea0:	7928      	ldrb	r0, [r5, #4]
    cea2:	70a0      	strb	r0, [r4, #2]
    cea4:	79a8      	ldrb	r0, [r5, #6]
    cea6:	70e0      	strb	r0, [r4, #3]
    cea8:	88e8      	ldrh	r0, [r5, #6]
    ceaa:	0a00      	lsrs	r0, r0, #8
    ceac:	7120      	strb	r0, [r4, #4]
    ceae:	7a28      	ldrb	r0, [r5, #8]
    ceb0:	e069      	b.n	cf86 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    ceb2:	2030      	movs	r0, #48	; 0x30
    ceb4:	7020      	strb	r0, [r4, #0]
    ceb6:	7928      	ldrb	r0, [r5, #4]
    ceb8:	70a0      	strb	r0, [r4, #2]
    ceba:	79a8      	ldrb	r0, [r5, #6]
    cebc:	70e0      	strb	r0, [r4, #3]
    cebe:	88e8      	ldrh	r0, [r5, #6]
    cec0:	0a00      	lsrs	r0, r0, #8
    cec2:	7120      	strb	r0, [r4, #4]
    cec4:	2003      	movs	r0, #3
    cec6:	e015      	b.n	cef4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    cec8:	7026      	strb	r6, [r4, #0]
    ceca:	2007      	movs	r0, #7
    cecc:	e060      	b.n	cf90 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x288>
    cece:	7026      	strb	r6, [r4, #0]
    ced0:	70a3      	strb	r3, [r4, #2]
    ced2:	7928      	ldrb	r0, [r5, #4]
    ced4:	70e0      	strb	r0, [r4, #3]
    ced6:	79a8      	ldrb	r0, [r5, #6]
    ced8:	7120      	strb	r0, [r4, #4]
    ceda:	88e8      	ldrh	r0, [r5, #6]
    cedc:	0a00      	lsrs	r0, r0, #8
    cede:	7160      	strb	r0, [r4, #5]
    cee0:	7a28      	ldrb	r0, [r5, #8]
    cee2:	71a0      	strb	r0, [r4, #6]
    cee4:	7a68      	ldrb	r0, [r5, #9]
    cee6:	e029      	b.n	cf3c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    cee8:	1d29      	adds	r1, r5, #4
    ceea:	4620      	mov	r0, r4
    ceec:	f7f3 feb2 	bl	c54 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>
    cef0:	2800      	cmp	r0, #0
    cef2:	d001      	beq.n	cef8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    cef4:	7060      	strb	r0, [r4, #1]
    cef6:	1c80      	adds	r0, r0, #2
    cef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cefc:	e08f      	b.n	d01e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x316>
    cefe:	e063      	b.n	cfc8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c0>
    cf00:	e044      	b.n	cf8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
    cf02:	e06f      	b.n	cfe4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2dc>
    cf04:	e07e      	b.n	d004 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2fc>
    cf06:	e036      	b.n	cf76 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x26e>
    cf08:	e01e      	b.n	cf48 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x240>
    cf0a:	e01a      	b.n	cf42 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23a>
    cf0c:	e009      	b.n	cf22 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x21a>
    cf0e:	e7ff      	b.n	cf10 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x208>
    cf10:	2057      	movs	r0, #87	; 0x57
    cf12:	7020      	strb	r0, [r4, #0]
    cf14:	7928      	ldrb	r0, [r5, #4]
    cf16:	70a0      	strb	r0, [r4, #2]
    cf18:	88a8      	ldrh	r0, [r5, #4]
    cf1a:	0a00      	lsrs	r0, r0, #8
    cf1c:	70e0      	strb	r0, [r4, #3]
    cf1e:	2002      	movs	r0, #2
    cf20:	e7e8      	b.n	cef4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    cf22:	7026      	strb	r6, [r4, #0]
    cf24:	2012      	movs	r0, #18
    cf26:	70a0      	strb	r0, [r4, #2]
    cf28:	7928      	ldrb	r0, [r5, #4]
    cf2a:	70e0      	strb	r0, [r4, #3]
    cf2c:	7968      	ldrb	r0, [r5, #5]
    cf2e:	7120      	strb	r0, [r4, #4]
    cf30:	79a8      	ldrb	r0, [r5, #6]
    cf32:	7160      	strb	r0, [r4, #5]
    cf34:	88e8      	ldrh	r0, [r5, #6]
    cf36:	0a00      	lsrs	r0, r0, #8
    cf38:	71a0      	strb	r0, [r4, #6]
    cf3a:	7a28      	ldrb	r0, [r5, #8]
    cf3c:	71e0      	strb	r0, [r4, #7]
    cf3e:	2006      	movs	r0, #6
    cf40:	e7d8      	b.n	cef4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    cf42:	7026      	strb	r6, [r4, #0]
    cf44:	2020      	movs	r0, #32
    cf46:	e041      	b.n	cfcc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c4>
    cf48:	7026      	strb	r6, [r4, #0]
    cf4a:	2021      	movs	r0, #33	; 0x21
    cf4c:	70a0      	strb	r0, [r4, #2]
    cf4e:	7928      	ldrb	r0, [r5, #4]
    cf50:	70e0      	strb	r0, [r4, #3]
    cf52:	7968      	ldrb	r0, [r5, #5]
    cf54:	7120      	strb	r0, [r4, #4]
    cf56:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    cf5a:	0a00      	lsrs	r0, r0, #8
    cf5c:	7160      	strb	r0, [r4, #5]
    cf5e:	79e8      	ldrb	r0, [r5, #7]
    cf60:	71a0      	strb	r0, [r4, #6]
    cf62:	7a28      	ldrb	r0, [r5, #8]
    cf64:	71e0      	strb	r0, [r4, #7]
    cf66:	7a68      	ldrb	r0, [r5, #9]
    cf68:	7220      	strb	r0, [r4, #8]
    cf6a:	7aa8      	ldrb	r0, [r5, #10]
    cf6c:	7260      	strb	r0, [r4, #9]
    cf6e:	7ae8      	ldrb	r0, [r5, #11]
    cf70:	72a0      	strb	r0, [r4, #10]
    cf72:	2009      	movs	r0, #9
    cf74:	e7be      	b.n	cef4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    cf76:	7021      	strb	r1, [r4, #0]
    cf78:	20a1      	movs	r0, #161	; 0xa1
    cf7a:	70a0      	strb	r0, [r4, #2]
    cf7c:	7928      	ldrb	r0, [r5, #4]
    cf7e:	70e0      	strb	r0, [r4, #3]
    cf80:	7968      	ldrb	r0, [r5, #5]
    cf82:	7120      	strb	r0, [r4, #4]
    cf84:	2000      	movs	r0, #0
    cf86:	7160      	strb	r0, [r4, #5]
    cf88:	2004      	movs	r0, #4
    cf8a:	e7b3      	b.n	cef4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    cf8c:	7021      	strb	r1, [r4, #0]
    cf8e:	20a2      	movs	r0, #162	; 0xa2
    cf90:	70a0      	strb	r0, [r4, #2]
    cf92:	7928      	ldrb	r0, [r5, #4]
    cf94:	70e0      	strb	r0, [r4, #3]
    cf96:	88a8      	ldrh	r0, [r5, #4]
    cf98:	0a00      	lsrs	r0, r0, #8
    cf9a:	7120      	strb	r0, [r4, #4]
    cf9c:	79a8      	ldrb	r0, [r5, #6]
    cf9e:	7160      	strb	r0, [r4, #5]
    cfa0:	88e8      	ldrh	r0, [r5, #6]
    cfa2:	0a00      	lsrs	r0, r0, #8
    cfa4:	71a0      	strb	r0, [r4, #6]
    cfa6:	7a28      	ldrb	r0, [r5, #8]
    cfa8:	71e0      	strb	r0, [r4, #7]
    cfaa:	8928      	ldrh	r0, [r5, #8]
    cfac:	0a00      	lsrs	r0, r0, #8
    cfae:	7220      	strb	r0, [r4, #8]
    cfb0:	7aa8      	ldrb	r0, [r5, #10]
    cfb2:	7260      	strb	r0, [r4, #9]
    cfb4:	8968      	ldrh	r0, [r5, #10]
    cfb6:	0a00      	lsrs	r0, r0, #8
    cfb8:	72a0      	strb	r0, [r4, #10]
    cfba:	7b28      	ldrb	r0, [r5, #12]
    cfbc:	72e0      	strb	r0, [r4, #11]
    cfbe:	89a8      	ldrh	r0, [r5, #12]
    cfc0:	0a00      	lsrs	r0, r0, #8
    cfc2:	7320      	strb	r0, [r4, #12]
    cfc4:	200b      	movs	r0, #11
    cfc6:	e795      	b.n	cef4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    cfc8:	7021      	strb	r1, [r4, #0]
    cfca:	20a3      	movs	r0, #163	; 0xa3
    cfcc:	70a0      	strb	r0, [r4, #2]
    cfce:	7928      	ldrb	r0, [r5, #4]
    cfd0:	70e0      	strb	r0, [r4, #3]
    cfd2:	88a8      	ldrh	r0, [r5, #4]
    cfd4:	0a00      	lsrs	r0, r0, #8
    cfd6:	7120      	strb	r0, [r4, #4]
    cfd8:	79a8      	ldrb	r0, [r5, #6]
    cfda:	7160      	strb	r0, [r4, #5]
    cfdc:	79e8      	ldrb	r0, [r5, #7]
    cfde:	71a0      	strb	r0, [r4, #6]
    cfe0:	2005      	movs	r0, #5
    cfe2:	e787      	b.n	cef4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    cfe4:	7026      	strb	r6, [r4, #0]
    cfe6:	2013      	movs	r0, #19
    cfe8:	70a0      	strb	r0, [r4, #2]
    cfea:	7928      	ldrb	r0, [r5, #4]
    cfec:	70e0      	strb	r0, [r4, #3]
    cfee:	7968      	ldrb	r0, [r5, #5]
    cff0:	7120      	strb	r0, [r4, #4]
    cff2:	f8d5 0006 	ldr.w	r0, [r5, #6]
    cff6:	f8c4 0005 	str.w	r0, [r4, #5]
    cffa:	8968      	ldrh	r0, [r5, #10]
    cffc:	f8a4 0009 	strh.w	r0, [r4, #9]
    d000:	200a      	movs	r0, #10
    d002:	e777      	b.n	cef4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    d004:	7021      	strb	r1, [r4, #0]
    d006:	20a4      	movs	r0, #164	; 0xa4
    d008:	70a0      	strb	r0, [r4, #2]
    d00a:	7928      	ldrb	r0, [r5, #4]
    d00c:	70e0      	strb	r0, [r4, #3]
    d00e:	88a8      	ldrh	r0, [r5, #4]
    d010:	0a00      	lsrs	r0, r0, #8
    d012:	7120      	strb	r0, [r4, #4]
    d014:	79a8      	ldrb	r0, [r5, #6]
    d016:	7160      	strb	r0, [r4, #5]
    d018:	79e8      	ldrb	r0, [r5, #7]
    d01a:	71a0      	strb	r0, [r4, #6]
    d01c:	e6ac      	b.n	cd78 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x70>
    d01e:	7021      	strb	r1, [r4, #0]
    d020:	2080      	movs	r0, #128	; 0x80
    d022:	70a0      	strb	r0, [r4, #2]
    d024:	88a9      	ldrh	r1, [r5, #4]
    d026:	f8a4 1003 	strh.w	r1, [r4, #3]
    d02a:	88e9      	ldrh	r1, [r5, #6]
    d02c:	f8a4 1005 	strh.w	r1, [r4, #5]
    d030:	7a29      	ldrb	r1, [r5, #8]
    d032:	71e1      	strb	r1, [r4, #7]
    d034:	8969      	ldrh	r1, [r5, #10]
    d036:	8121      	strh	r1, [r4, #8]
    d038:	89a9      	ldrh	r1, [r5, #12]
    d03a:	8161      	strh	r1, [r4, #10]
    d03c:	89e9      	ldrh	r1, [r5, #14]
    d03e:	81a1      	strh	r1, [r4, #12]
    d040:	7c29      	ldrb	r1, [r5, #16]
    d042:	f001 0101 	and.w	r1, r1, #1
    d046:	73a1      	strb	r1, [r4, #14]
    d048:	200d      	movs	r0, #13
    d04a:	e753      	b.n	cef4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>

0000d04c <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>:
    d04c:	223e      	movs	r2, #62	; 0x3e
    d04e:	7002      	strb	r2, [r0, #0]
    d050:	2201      	movs	r2, #1
    d052:	7082      	strb	r2, [r0, #2]
    d054:	790a      	ldrb	r2, [r1, #4]
    d056:	70c2      	strb	r2, [r0, #3]
    d058:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    d05c:	7102      	strb	r2, [r0, #4]
    d05e:	880a      	ldrh	r2, [r1, #0]
    d060:	0a12      	lsrs	r2, r2, #8
    d062:	7142      	strb	r2, [r0, #5]
    d064:	788a      	ldrb	r2, [r1, #2]
    d066:	7182      	strb	r2, [r0, #6]
    d068:	78ca      	ldrb	r2, [r1, #3]
    d06a:	71c2      	strb	r2, [r0, #7]
    d06c:	684a      	ldr	r2, [r1, #4]
    d06e:	6082      	str	r2, [r0, #8]
    d070:	890a      	ldrh	r2, [r1, #8]
    d072:	8182      	strh	r2, [r0, #12]
    d074:	7d8a      	ldrb	r2, [r1, #22]
    d076:	7382      	strb	r2, [r0, #14]
    d078:	8aca      	ldrh	r2, [r1, #22]
    d07a:	0a12      	lsrs	r2, r2, #8
    d07c:	73c2      	strb	r2, [r0, #15]
    d07e:	7e0a      	ldrb	r2, [r1, #24]
    d080:	7402      	strb	r2, [r0, #16]
    d082:	8b0a      	ldrh	r2, [r1, #24]
    d084:	0a12      	lsrs	r2, r2, #8
    d086:	7442      	strb	r2, [r0, #17]
    d088:	7e8a      	ldrb	r2, [r1, #26]
    d08a:	7482      	strb	r2, [r0, #18]
    d08c:	8b4a      	ldrh	r2, [r1, #26]
    d08e:	0a12      	lsrs	r2, r2, #8
    d090:	74c2      	strb	r2, [r0, #19]
    d092:	7f09      	ldrb	r1, [r1, #28]
    d094:	7501      	strb	r1, [r0, #20]
    d096:	2113      	movs	r1, #19
    d098:	7041      	strb	r1, [r0, #1]
    d09a:	4608      	mov	r0, r1
    d09c:	4770      	bx	lr
    d09e:	223e      	movs	r2, #62	; 0x3e
    d0a0:	7002      	strb	r2, [r0, #0]
    d0a2:	220a      	movs	r2, #10
    d0a4:	7082      	strb	r2, [r0, #2]
    d0a6:	790a      	ldrb	r2, [r1, #4]
    d0a8:	70c2      	strb	r2, [r0, #3]
    d0aa:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    d0ae:	7102      	strb	r2, [r0, #4]
    d0b0:	880a      	ldrh	r2, [r1, #0]
    d0b2:	0a12      	lsrs	r2, r2, #8
    d0b4:	7142      	strb	r2, [r0, #5]
    d0b6:	788a      	ldrb	r2, [r1, #2]
    d0b8:	7182      	strb	r2, [r0, #6]
    d0ba:	78ca      	ldrb	r2, [r1, #3]
    d0bc:	71c2      	strb	r2, [r0, #7]
    d0be:	684a      	ldr	r2, [r1, #4]
    d0c0:	6082      	str	r2, [r0, #8]
    d0c2:	890a      	ldrh	r2, [r1, #8]
    d0c4:	8182      	strh	r2, [r0, #12]
    d0c6:	f8d1 200a 	ldr.w	r2, [r1, #10]
    d0ca:	f8c0 200e 	str.w	r2, [r0, #14]
    d0ce:	89ca      	ldrh	r2, [r1, #14]
    d0d0:	8242      	strh	r2, [r0, #18]
    d0d2:	690a      	ldr	r2, [r1, #16]
    d0d4:	6142      	str	r2, [r0, #20]
    d0d6:	8a8a      	ldrh	r2, [r1, #20]
    d0d8:	8302      	strh	r2, [r0, #24]
    d0da:	7d8a      	ldrb	r2, [r1, #22]
    d0dc:	7682      	strb	r2, [r0, #26]
    d0de:	8aca      	ldrh	r2, [r1, #22]
    d0e0:	0a12      	lsrs	r2, r2, #8
    d0e2:	76c2      	strb	r2, [r0, #27]
    d0e4:	7e0a      	ldrb	r2, [r1, #24]
    d0e6:	7702      	strb	r2, [r0, #28]
    d0e8:	8b0a      	ldrh	r2, [r1, #24]
    d0ea:	0a12      	lsrs	r2, r2, #8
    d0ec:	7742      	strb	r2, [r0, #29]
    d0ee:	7e8a      	ldrb	r2, [r1, #26]
    d0f0:	7782      	strb	r2, [r0, #30]
    d0f2:	8b4a      	ldrh	r2, [r1, #26]
    d0f4:	0a12      	lsrs	r2, r2, #8
    d0f6:	77c2      	strb	r2, [r0, #31]
    d0f8:	7f09      	ldrb	r1, [r1, #28]
    d0fa:	f880 1020 	strb.w	r1, [r0, #32]
    d0fe:	211f      	movs	r1, #31
    d100:	7041      	strb	r1, [r0, #1]
    d102:	4608      	mov	r0, r1
    d104:	4770      	bx	lr
    d106:	094a      	lsrs	r2, r1, #5
    d108:	f001 011f 	and.w	r1, r1, #31
    d10c:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    d110:	40c8      	lsrs	r0, r1
    d112:	f000 0001 	and.w	r0, r0, #1
    d116:	4770      	bx	lr

0000d118 <sdc_hci_data_put>:
    d118:	b510      	push	{r4, lr}
    d11a:	f06f 0415 	mvn.w	r4, #21
    d11e:	b120      	cbz	r0, d12a <sdc_hci_data_put+0x12>
    d120:	f7ff fd56 	bl	cbd0 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    d124:	b108      	cbz	r0, d12a <sdc_hci_data_put+0x12>
    d126:	2000      	movs	r0, #0
    d128:	bd10      	pop	{r4, pc}
    d12a:	4620      	mov	r0, r4
    d12c:	bd10      	pop	{r4, pc}

0000d12e <sdc_hci_get>:
    d12e:	b510      	push	{r4, lr}
    d130:	460c      	mov	r4, r1
    d132:	b130      	cbz	r0, d142 <sdc_hci_get+0x14>
    d134:	b12c      	cbz	r4, d142 <sdc_hci_get+0x14>
    d136:	f7f3 fd37 	bl	ba8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>
    d13a:	b128      	cbz	r0, d148 <sdc_hci_get+0x1a>
    d13c:	7020      	strb	r0, [r4, #0]
    d13e:	2000      	movs	r0, #0
    d140:	bd10      	pop	{r4, pc}
    d142:	f06f 0015 	mvn.w	r0, #21
    d146:	bd10      	pop	{r4, pc}
    d148:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d14c:	bd10      	pop	{r4, pc}

0000d14e <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    d14e:	f003 b800 	b.w	10152 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000d152 <sdc_hci_cmd_cb_read_transmit_power_level>:
    d152:	f003 b81b 	b.w	1018c <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000d156 <sdc_hci_cmd_cb_set_event_mask>:
    d156:	b510      	push	{r4, lr}
    d158:	f7f3 fdcc 	bl	cf4 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    d15c:	2000      	movs	r0, #0
    d15e:	bd10      	pop	{r4, pc}

0000d160 <sdc_hci_cmd_cb_set_event_mask_page_2>:
    d160:	b510      	push	{r4, lr}
    d162:	f7f3 fdd7 	bl	d14 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    d166:	2000      	movs	r0, #0
    d168:	bd10      	pop	{r4, pc}

0000d16a <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    d16a:	f003 b830 	b.w	101ce <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000d16e <sdc_hci_cmd_vs_conn_event_extend>:
    d16e:	b508      	push	{r3, lr}
    d170:	7800      	ldrb	r0, [r0, #0]
    d172:	f88d 0000 	strb.w	r0, [sp]
    d176:	4668      	mov	r0, sp
    d178:	f002 ff0c 	bl	ff94 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    d17c:	bd08      	pop	{r3, pc}

0000d17e <sdc_hci_cmd_vs_conn_update>:
    d17e:	2001      	movs	r0, #1
    d180:	4770      	bx	lr

0000d182 <sdc_hci_cmd_vs_event_length_set>:
    d182:	f7f9 be13 	b.w	6dac <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000d186 <sdc_hci_cmd_vs_llpm_mode_set>:
    d186:	2001      	movs	r0, #1
    d188:	4770      	bx	lr

0000d18a <sdc_hci_cmd_vs_peripheral_latency_mode_set>:
    d18a:	7881      	ldrb	r1, [r0, #2]
    d18c:	8800      	ldrh	r0, [r0, #0]
    d18e:	f002 beb1 	b.w	fef4 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>

0000d192 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    d192:	7800      	ldrb	r0, [r0, #0]
    d194:	b100      	cbz	r0, d198 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    d196:	2001      	movs	r0, #1
    d198:	f002 bea7 	b.w	feea <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000d19c <sdc_hci_cmd_vs_set_adv_randomness>:
    d19c:	f002 bed4 	b.w	ff48 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>

0000d1a0 <sdc_hci_cmd_vs_zephyr_read_chip_temp>:
    d1a0:	b510      	push	{r4, lr}
    d1a2:	4604      	mov	r4, r0
    d1a4:	f7ff f9dc 	bl	c560 <mpsl_temperature_get>
    d1a8:	17c1      	asrs	r1, r0, #31
    d1aa:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    d1ae:	1080      	asrs	r0, r0, #2
    d1b0:	287f      	cmp	r0, #127	; 0x7f
    d1b2:	dd01      	ble.n	d1b8 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x18>
    d1b4:	207f      	movs	r0, #127	; 0x7f
    d1b6:	e004      	b.n	d1c2 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    d1b8:	f06f 017e 	mvn.w	r1, #126	; 0x7e
    d1bc:	4288      	cmp	r0, r1
    d1be:	da00      	bge.n	d1c2 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    d1c0:	4608      	mov	r0, r1
    d1c2:	7020      	strb	r0, [r4, #0]
    d1c4:	2000      	movs	r0, #0
    d1c6:	bd10      	pop	{r4, pc}

0000d1c8 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    d1c8:	f002 bed3 	b.w	ff72 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000d1cc <sdc_hci_cmd_ip_read_bd_addr>:
    d1cc:	f002 bfd2 	b.w	10174 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000d1d0 <sdc_hci_cmd_ip_read_local_version_information>:
    d1d0:	f7f9 bdfa 	b.w	6dc8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000d1d4 <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    d1d4:	f002 bc09 	b.w	f9ea <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000d1d8 <sdc_hci_cmd_le_add_device_to_resolving_list>:
    d1d8:	f002 bbdd 	b.w	f996 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000d1dc <sdc_hci_cmd_le_clear_filter_accept_list>:
    d1dc:	f002 bc29 	b.w	fa32 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000d1e0 <sdc_hci_cmd_le_clear_resolving_list>:
    d1e0:	f002 bc1a 	b.w	fa18 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000d1e4 <sdc_hci_cmd_le_encrypt>:
    d1e4:	f002 bc32 	b.w	fa4c <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000d1e8 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    d1e8:	8802      	ldrh	r2, [r0, #0]
    d1ea:	800a      	strh	r2, [r1, #0]
    d1ec:	f002 bc37 	b.w	fa5e <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000d1f0 <sdc_hci_cmd_le_long_term_key_request_reply>:
    d1f0:	8802      	ldrh	r2, [r0, #0]
    d1f2:	800a      	strh	r2, [r1, #0]
    d1f4:	f002 bc4c 	b.w	fa90 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000d1f8 <sdc_hci_cmd_le_rand>:
    d1f8:	f002 bc74 	b.w	fae4 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000d1fc <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    d1fc:	f002 bc78 	b.w	faf0 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000d200 <sdc_hci_cmd_le_read_buffer_size>:
    d200:	f7f9 bce2 	b.w	6bc8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000d204 <sdc_hci_cmd_le_read_channel_map>:
    d204:	f7f9 bcea 	b.w	6bdc <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000d208 <sdc_hci_cmd_le_read_filter_accept_list_size>:
    d208:	f002 bcb6 	b.w	fb78 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000d20c <sdc_hci_cmd_le_read_max_data_length>:
    d20c:	f002 bc7b 	b.w	fb06 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000d210 <sdc_hci_cmd_le_read_phy>:
    d210:	f7f9 bd0c 	b.w	6c2c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000d214 <sdc_hci_cmd_le_read_remote_features>:
    d214:	f002 bc80 	b.w	fb18 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000d218 <sdc_hci_cmd_le_read_resolving_list_size>:
    d218:	f002 bc9a 	b.w	fb50 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000d21c <sdc_hci_cmd_le_read_suggested_default_data_length>:
    d21c:	f7f9 bd2c 	b.w	6c78 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000d220 <sdc_hci_cmd_le_read_transmit_power>:
    d220:	f002 bc9a 	b.w	fb58 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000d224 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    d224:	f002 bcc8 	b.w	fbb8 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000d228 <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    d228:	f002 bcad 	b.w	fb86 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000d22c <sdc_hci_cmd_le_set_address_resolution_enable>:
    d22c:	f002 bcd9 	b.w	fbe2 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000d230 <sdc_hci_cmd_le_set_adv_data>:
    d230:	f002 bce5 	b.w	fbfe <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000d234 <sdc_hci_cmd_le_set_adv_enable>:
    d234:	f002 bcf8 	b.w	fc28 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000d238 <sdc_hci_cmd_le_set_adv_params>:
    d238:	f002 bd29 	b.w	fc8e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000d23c <sdc_hci_cmd_le_set_data_length>:
    d23c:	f002 bdbc 	b.w	fdb8 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000d240 <sdc_hci_cmd_le_set_data_related_address_changes>:
    d240:	f002 bdda 	b.w	fdf8 <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>

0000d244 <sdc_hci_cmd_le_set_default_phy>:
    d244:	f7f9 bd22 	b.w	6c8c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000d248 <sdc_hci_cmd_le_set_event_mask>:
    d248:	b510      	push	{r4, lr}
    d24a:	f7f3 fd4b 	bl	ce4 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    d24e:	2000      	movs	r0, #0
    d250:	bd10      	pop	{r4, pc}

0000d252 <sdc_hci_cmd_le_set_phy>:
    d252:	f002 bdde 	b.w	fe12 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000d256 <sdc_hci_cmd_le_set_privacy_mode>:
    d256:	f002 bdf5 	b.w	fe44 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000d25a <sdc_hci_cmd_le_set_random_address>:
    d25a:	f002 be09 	b.w	fe70 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000d25e <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    d25e:	f002 be15 	b.w	fe8c <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000d262 <sdc_hci_cmd_le_set_scan_response_data>:
    d262:	f002 be1c 	b.w	fe9e <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000d266 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    d266:	f002 be2f 	b.w	fec8 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000d26a <sdc_hci_cmd_lc_disconnect>:
    d26a:	f002 bb46 	b.w	f8fa <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000d26e <sdc_hci_cmd_lc_read_remote_version_information>:
    d26e:	f7f9 bdb5 	b.w	6ddc <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    d272:	b570      	push	{r4, r5, r6, lr}
    d274:	880b      	ldrh	r3, [r1, #0]
    d276:	7cc4      	ldrb	r4, [r0, #19]
    d278:	f100 0518 	add.w	r5, r0, #24
    d27c:	f3c3 060e 	ubfx	r6, r3, #0, #15
    d280:	8802      	ldrh	r2, [r0, #0]
    d282:	4435      	add	r5, r6
    d284:	1d64      	adds	r4, r4, #5
    d286:	882d      	ldrh	r5, [r5, #0]
    d288:	4422      	add	r2, r4
    d28a:	b292      	uxth	r2, r2
    d28c:	4425      	add	r5, r4
    d28e:	1e54      	subs	r4, r2, #1
    d290:	442c      	add	r4, r5
    d292:	fb94 f4f2 	sdiv	r4, r4, r2
    d296:	fb02 6204 	mla	r2, r2, r4, r6
    d29a:	8840      	ldrh	r0, [r0, #2]
    d29c:	b292      	uxth	r2, r2
    d29e:	4290      	cmp	r0, r2
    d2a0:	d903      	bls.n	d2aa <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    d2a2:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    d2a6:	4310      	orrs	r0, r2
    d2a8:	e002      	b.n	d2b0 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    d2aa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d2ae:	4398      	bics	r0, r3
    d2b0:	8008      	strh	r0, [r1, #0]
    d2b2:	bd70      	pop	{r4, r5, r6, pc}
    d2b4:	0442      	lsls	r2, r0, #17
    d2b6:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
    d2ba:	d107      	bne.n	d2cc <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    d2bc:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    d2c0:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    d2c4:	4288      	cmp	r0, r1
    d2c6:	d001      	beq.n	d2cc <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    d2c8:	2001      	movs	r0, #1
    d2ca:	4770      	bx	lr
    d2cc:	2000      	movs	r0, #0
    d2ce:	4770      	bx	lr

0000d2d0 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    d2d0:	8881      	ldrh	r1, [r0, #4]
    d2d2:	88c0      	ldrh	r0, [r0, #6]
    d2d4:	4288      	cmp	r0, r1
    d2d6:	d101      	bne.n	d2dc <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    d2d8:	2001      	movs	r0, #1
    d2da:	4770      	bx	lr
    d2dc:	2000      	movs	r0, #0
    d2de:	4770      	bx	lr

0000d2e0 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    d2e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d2e4:	460f      	mov	r7, r1
    d2e6:	4604      	mov	r4, r0
    d2e8:	f100 0118 	add.w	r1, r0, #24
    d2ec:	8880      	ldrh	r0, [r0, #4]
    d2ee:	2600      	movs	r6, #0
    d2f0:	f3c0 000e 	ubfx	r0, r0, #0, #15
    d2f4:	1845      	adds	r5, r0, r1
    d2f6:	603e      	str	r6, [r7, #0]
    d2f8:	89e0      	ldrh	r0, [r4, #14]
    d2fa:	2800      	cmp	r0, #0
    d2fc:	d016      	beq.n	d32c <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    d2fe:	8961      	ldrh	r1, [r4, #10]
    d300:	4408      	add	r0, r1
    d302:	b280      	uxth	r0, r0
    d304:	8160      	strh	r0, [r4, #10]
    d306:	8829      	ldrh	r1, [r5, #0]
    d308:	4288      	cmp	r0, r1
    d30a:	d905      	bls.n	d318 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x38>
    d30c:	f240 1151 	movw	r1, #337	; 0x151
    d310:	f04f 0014 	mov.w	r0, #20
    d314:	f7f3 fb4c 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d318:	d106      	bne.n	d328 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    d31a:	f104 0104 	add.w	r1, r4, #4
    d31e:	4620      	mov	r0, r4
    d320:	f7ff ffa7 	bl	d272 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d324:	8166      	strh	r6, [r4, #10]
    d326:	603d      	str	r5, [r7, #0]
    d328:	81e6      	strh	r6, [r4, #14]
    d32a:	2001      	movs	r0, #1
    d32c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d330 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    d330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d334:	4604      	mov	r4, r0
    d336:	f100 0318 	add.w	r3, r0, #24
    d33a:	88c0      	ldrh	r0, [r0, #6]
    d33c:	460e      	mov	r6, r1
    d33e:	f3c0 070e 	ubfx	r7, r0, #0, #15
    d342:	8a20      	ldrh	r0, [r4, #16]
    d344:	19d9      	adds	r1, r3, r7
    d346:	b108      	cbz	r0, d34c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    d348:	42b0      	cmp	r0, r6
    d34a:	d202      	bcs.n	d352 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x22>
    d34c:	2000      	movs	r0, #0
    d34e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d352:	89a0      	ldrh	r0, [r4, #12]
    d354:	2500      	movs	r5, #0
    d356:	b140      	cbz	r0, d36a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3a>
    d358:	f8b1 c000 	ldrh.w	ip, [r1]
    d35c:	4560      	cmp	r0, ip
    d35e:	d006      	beq.n	d36e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    d360:	f44f 7101 	mov.w	r1, #516	; 0x204
    d364:	2014      	movs	r0, #20
    d366:	f7f3 fb23 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d36a:	800d      	strh	r5, [r1, #0]
    d36c:	e00e      	b.n	d38c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    d36e:	f894 c013 	ldrb.w	ip, [r4, #19]
    d372:	4418      	add	r0, r3
    d374:	f10c 0c05 	add.w	ip, ip, #5
    d378:	44bc      	add	ip, r7
    d37a:	4460      	add	r0, ip
    d37c:	f8b4 c014 	ldrh.w	ip, [r4, #20]
    d380:	f820 cc03 	strh.w	ip, [r0, #-3]
    d384:	f894 c016 	ldrb.w	ip, [r4, #22]
    d388:	f800 cc01 	strb.w	ip, [r0, #-1]
    d38c:	89a0      	ldrh	r0, [r4, #12]
    d38e:	4430      	add	r0, r6
    d390:	81a0      	strh	r0, [r4, #12]
    d392:	8808      	ldrh	r0, [r1, #0]
    d394:	4430      	add	r0, r6
    d396:	8008      	strh	r0, [r1, #0]
    d398:	b12a      	cbz	r2, d3a6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x76>
    d39a:	1da1      	adds	r1, r4, #6
    d39c:	4620      	mov	r0, r4
    d39e:	f7ff ff68 	bl	d272 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d3a2:	81a5      	strh	r5, [r4, #12]
    d3a4:	e00a      	b.n	d3bc <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x8c>
    d3a6:	7ce0      	ldrb	r0, [r4, #19]
    d3a8:	89a1      	ldrh	r1, [r4, #12]
    d3aa:	1d40      	adds	r0, r0, #5
    d3ac:	4438      	add	r0, r7
    d3ae:	4419      	add	r1, r3
    d3b0:	4408      	add	r0, r1
    d3b2:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    d3b6:	82a1      	strh	r1, [r4, #20]
    d3b8:	7880      	ldrb	r0, [r0, #2]
    d3ba:	75a0      	strb	r0, [r4, #22]
    d3bc:	8225      	strh	r5, [r4, #16]
    d3be:	2001      	movs	r0, #1
    d3c0:	e7c5      	b.n	d34e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>

0000d3c2 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    d3c2:	1c80      	adds	r0, r0, #2
    d3c4:	4770      	bx	lr

0000d3c6 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    d3c6:	b510      	push	{r4, lr}
    d3c8:	4604      	mov	r4, r0
    d3ca:	88c0      	ldrh	r0, [r0, #6]
    d3cc:	88a1      	ldrh	r1, [r4, #4]
    d3ce:	4281      	cmp	r1, r0
    d3d0:	d003      	beq.n	d3da <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    d3d2:	8960      	ldrh	r0, [r4, #10]
    d3d4:	b908      	cbnz	r0, d3da <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    d3d6:	89e0      	ldrh	r0, [r4, #14]
    d3d8:	b108      	cbz	r0, d3de <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x18>
    d3da:	2000      	movs	r0, #0
    d3dc:	bd10      	pop	{r4, pc}
    d3de:	1d21      	adds	r1, r4, #4
    d3e0:	4620      	mov	r0, r4
    d3e2:	f7ff ff46 	bl	d272 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d3e6:	2000      	movs	r0, #0
    d3e8:	81e0      	strh	r0, [r4, #14]
    d3ea:	2001      	movs	r0, #1
    d3ec:	bd10      	pop	{r4, pc}

0000d3ee <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    d3ee:	b510      	push	{r4, lr}
    d3f0:	4604      	mov	r4, r0
    d3f2:	f100 0218 	add.w	r2, r0, #24
    d3f6:	88c0      	ldrh	r0, [r0, #6]
    d3f8:	f3c0 000e 	ubfx	r0, r0, #0, #15
    d3fc:	4402      	add	r2, r0
    d3fe:	8820      	ldrh	r0, [r4, #0]
    d400:	2845      	cmp	r0, #69	; 0x45
    d402:	d200      	bcs.n	d406 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    d404:	2045      	movs	r0, #69	; 0x45
    d406:	4288      	cmp	r0, r1
    d408:	d204      	bcs.n	d414 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    d40a:	f44f 7182 	mov.w	r1, #260	; 0x104
    d40e:	2014      	movs	r0, #20
    d410:	f7f3 face 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d414:	7ca0      	ldrb	r0, [r4, #18]
    d416:	2800      	cmp	r0, #0
    d418:	d003      	beq.n	d422 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    d41a:	8810      	ldrh	r0, [r2, #0]
    d41c:	4288      	cmp	r0, r1
    d41e:	d201      	bcs.n	d424 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    d420:	2000      	movs	r0, #0
    d422:	bd10      	pop	{r4, pc}
    d424:	8011      	strh	r1, [r2, #0]
    d426:	1da1      	adds	r1, r4, #6
    d428:	4620      	mov	r0, r4
    d42a:	f7ff ff22 	bl	d272 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d42e:	2000      	movs	r0, #0
    d430:	74a0      	strb	r0, [r4, #18]
    d432:	2001      	movs	r0, #1
    d434:	bd10      	pop	{r4, pc}

0000d436 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    d436:	b510      	push	{r4, lr}
    d438:	88c4      	ldrh	r4, [r0, #6]
    d43a:	8883      	ldrh	r3, [r0, #4]
    d43c:	4601      	mov	r1, r0
    d43e:	f100 0218 	add.w	r2, r0, #24
    d442:	f3c3 000e 	ubfx	r0, r3, #0, #15
    d446:	4410      	add	r0, r2
    d448:	42a3      	cmp	r3, r4
    d44a:	d002      	beq.n	d452 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1c>
    d44c:	8949      	ldrh	r1, [r1, #10]
    d44e:	2900      	cmp	r1, #0
    d450:	d000      	beq.n	d454 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1e>
    d452:	2000      	movs	r0, #0
    d454:	bd10      	pop	{r4, pc}

0000d456 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    d456:	8803      	ldrh	r3, [r0, #0]
    d458:	2b45      	cmp	r3, #69	; 0x45
    d45a:	d200      	bcs.n	d45e <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    d45c:	2345      	movs	r3, #69	; 0x45
    d45e:	8013      	strh	r3, [r2, #0]
    d460:	88c2      	ldrh	r2, [r0, #6]
    d462:	f3c2 030e 	ubfx	r3, r2, #0, #15
    d466:	f100 0218 	add.w	r2, r0, #24
    d46a:	441a      	add	r2, r3
    d46c:	600a      	str	r2, [r1, #0]
    d46e:	8980      	ldrh	r0, [r0, #12]
    d470:	4770      	bx	lr

0000d472 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    d472:	7cc0      	ldrb	r0, [r0, #19]
    d474:	1d40      	adds	r0, r0, #5
    d476:	4408      	add	r0, r1
    d478:	1ec0      	subs	r0, r0, #3
    d47a:	6010      	str	r0, [r2, #0]
    d47c:	8808      	ldrh	r0, [r1, #0]
    d47e:	4770      	bx	lr

0000d480 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    d480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d484:	460e      	mov	r6, r1
    d486:	88c1      	ldrh	r1, [r0, #6]
    d488:	8902      	ldrh	r2, [r0, #8]
    d48a:	4604      	mov	r4, r0
    d48c:	f100 0818 	add.w	r8, r0, #24
    d490:	8800      	ldrh	r0, [r0, #0]
    d492:	f3c1 050e 	ubfx	r5, r1, #0, #15
    d496:	f3c2 070e 	ubfx	r7, r2, #0, #15
    d49a:	2845      	cmp	r0, #69	; 0x45
    d49c:	d200      	bcs.n	d4a0 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    d49e:	2045      	movs	r0, #69	; 0x45
    d4a0:	42b0      	cmp	r0, r6
    d4a2:	d203      	bcs.n	d4ac <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    d4a4:	21c6      	movs	r1, #198	; 0xc6
    d4a6:	2014      	movs	r0, #20
    d4a8:	f7f3 fa82 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d4ac:	4610      	mov	r0, r2
    d4ae:	f7ff ff01 	bl	d2b4 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d4b2:	b110      	cbz	r0, d4ba <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    d4b4:	2000      	movs	r0, #0
    d4b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d4ba:	42af      	cmp	r7, r5
    d4bc:	d908      	bls.n	d4d0 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d4be:	7ce1      	ldrb	r1, [r4, #19]
    d4c0:	1b78      	subs	r0, r7, r5
    d4c2:	1a40      	subs	r0, r0, r1
    d4c4:	1f40      	subs	r0, r0, #5
    d4c6:	4286      	cmp	r6, r0
    d4c8:	dd02      	ble.n	d4d0 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d4ca:	2000      	movs	r0, #0
    d4cc:	74a0      	strb	r0, [r4, #18]
    d4ce:	e7f1      	b.n	d4b4 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    d4d0:	eb08 0005 	add.w	r0, r8, r5
    d4d4:	2101      	movs	r1, #1
    d4d6:	8006      	strh	r6, [r0, #0]
    d4d8:	74a1      	strb	r1, [r4, #18]
    d4da:	e7ec      	b.n	d4b6 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000d4dc <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    d4dc:	b538      	push	{r3, r4, r5, lr}
    d4de:	88c4      	ldrh	r4, [r0, #6]
    d4e0:	8881      	ldrh	r1, [r0, #4]
    d4e2:	f100 0218 	add.w	r2, r0, #24
    d4e6:	f3c1 030e 	ubfx	r3, r1, #0, #15
    d4ea:	441a      	add	r2, r3
    d4ec:	42a1      	cmp	r1, r4
    d4ee:	d010      	beq.n	d512 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d4f0:	8943      	ldrh	r3, [r0, #10]
    d4f2:	89c5      	ldrh	r5, [r0, #14]
    d4f4:	8812      	ldrh	r2, [r2, #0]
    d4f6:	442b      	add	r3, r5
    d4f8:	4293      	cmp	r3, r2
    d4fa:	d308      	bcc.n	d50e <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    d4fc:	f8ad 1000 	strh.w	r1, [sp]
    d500:	4669      	mov	r1, sp
    d502:	f7ff feb6 	bl	d272 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d506:	f8bd 0000 	ldrh.w	r0, [sp]
    d50a:	42a0      	cmp	r0, r4
    d50c:	d001      	beq.n	d512 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d50e:	2001      	movs	r0, #1
    d510:	bd38      	pop	{r3, r4, r5, pc}
    d512:	2000      	movs	r0, #0
    d514:	bd38      	pop	{r3, r4, r5, pc}

0000d516 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    d516:	b570      	push	{r4, r5, r6, lr}
    d518:	88c6      	ldrh	r6, [r0, #6]
    d51a:	8885      	ldrh	r5, [r0, #4]
    d51c:	4603      	mov	r3, r0
    d51e:	f100 0418 	add.w	r4, r0, #24
    d522:	f3c5 000e 	ubfx	r0, r5, #0, #15
    d526:	4420      	add	r0, r4
    d528:	42b5      	cmp	r5, r6
    d52a:	d102      	bne.n	d532 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    d52c:	2000      	movs	r0, #0
    d52e:	81d8      	strh	r0, [r3, #14]
    d530:	bd70      	pop	{r4, r5, r6, pc}
    d532:	8804      	ldrh	r4, [r0, #0]
    d534:	895d      	ldrh	r5, [r3, #10]
    d536:	7cde      	ldrb	r6, [r3, #19]
    d538:	1b64      	subs	r4, r4, r5
    d53a:	4435      	add	r5, r6
    d53c:	4428      	add	r0, r5
    d53e:	880d      	ldrh	r5, [r1, #0]
    d540:	b2a4      	uxth	r4, r4
    d542:	1c80      	adds	r0, r0, #2
    d544:	42a5      	cmp	r5, r4
    d546:	d900      	bls.n	d54a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    d548:	800c      	strh	r4, [r1, #0]
    d54a:	895c      	ldrh	r4, [r3, #10]
    d54c:	b124      	cbz	r4, d558 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    d54e:	2400      	movs	r4, #0
    d550:	7014      	strb	r4, [r2, #0]
    d552:	8809      	ldrh	r1, [r1, #0]
    d554:	81d9      	strh	r1, [r3, #14]
    d556:	bd70      	pop	{r4, r5, r6, pc}
    d558:	2401      	movs	r4, #1
    d55a:	e7f9      	b.n	d550 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000d55c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    d55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d560:	461d      	mov	r5, r3
    d562:	4616      	mov	r6, r2
    d564:	9f06      	ldr	r7, [sp, #24]
    d566:	460b      	mov	r3, r1
    d568:	4604      	mov	r4, r0
    d56a:	463a      	mov	r2, r7
    d56c:	4629      	mov	r1, r5
    d56e:	4630      	mov	r0, r6
    d570:	f000 f839 	bl	d5e6 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d574:	4283      	cmp	r3, r0
    d576:	d201      	bcs.n	d57c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    d578:	219e      	movs	r1, #158	; 0x9e
    d57a:	e012      	b.n	d5a2 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    d57c:	07a0      	lsls	r0, r4, #30
    d57e:	d001      	beq.n	d584 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x28>
    d580:	219f      	movs	r1, #159	; 0x9f
    d582:	e00e      	b.n	d5a2 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    d584:	2218      	movs	r2, #24
    d586:	2100      	movs	r1, #0
    d588:	4620      	mov	r0, r4
    d58a:	f003 fcf6 	bl	10f7a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d58e:	19a8      	adds	r0, r5, r6
    d590:	1d40      	adds	r0, r0, #5
    d592:	4378      	muls	r0, r7
    d594:	b280      	uxth	r0, r0
    d596:	74e5      	strb	r5, [r4, #19]
    d598:	8060      	strh	r0, [r4, #2]
    d59a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    d59e:	d903      	bls.n	d5a8 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4c>
    d5a0:	21a4      	movs	r1, #164	; 0xa4
    d5a2:	2014      	movs	r0, #20
    d5a4:	f7f3 fa04 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d5a8:	8026      	strh	r6, [r4, #0]
    d5aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d5ae <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    d5ae:	b570      	push	{r4, r5, r6, lr}
    d5b0:	460b      	mov	r3, r1
    d5b2:	4604      	mov	r4, r0
    d5b4:	f100 0118 	add.w	r1, r0, #24
    d5b8:	8902      	ldrh	r2, [r0, #8]
    d5ba:	8880      	ldrh	r0, [r0, #4]
    d5bc:	f3c2 050e 	ubfx	r5, r2, #0, #15
    d5c0:	440d      	add	r5, r1
    d5c2:	4282      	cmp	r2, r0
    d5c4:	d101      	bne.n	d5ca <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x1c>
    d5c6:	2000      	movs	r0, #0
    d5c8:	bd70      	pop	{r4, r5, r6, pc}
    d5ca:	b123      	cbz	r3, d5d6 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>
    d5cc:	7ce2      	ldrb	r2, [r4, #19]
    d5ce:	1ca9      	adds	r1, r5, #2
    d5d0:	4618      	mov	r0, r3
    d5d2:	f003 fc58 	bl	10e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d5d6:	882d      	ldrh	r5, [r5, #0]
    d5d8:	f104 0108 	add.w	r1, r4, #8
    d5dc:	4620      	mov	r0, r4
    d5de:	f7ff fe48 	bl	d272 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d5e2:	4628      	mov	r0, r5
    d5e4:	bd70      	pop	{r4, r5, r6, pc}

0000d5e6 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    d5e6:	4401      	add	r1, r0
    d5e8:	1d49      	adds	r1, r1, #5
    d5ea:	4351      	muls	r1, r2
    d5ec:	b28a      	uxth	r2, r1
    d5ee:	2100      	movs	r1, #0
    d5f0:	2845      	cmp	r0, #69	; 0x45
    d5f2:	d202      	bcs.n	d5fa <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    d5f4:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    d5f8:	b281      	uxth	r1, r0
    d5fa:	3218      	adds	r2, #24
    d5fc:	1850      	adds	r0, r2, r1
    d5fe:	b280      	uxth	r0, r0
    d600:	4770      	bx	lr

0000d602 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    d602:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d606:	4688      	mov	r8, r1
    d608:	88c1      	ldrh	r1, [r0, #6]
    d60a:	4604      	mov	r4, r0
    d60c:	8900      	ldrh	r0, [r0, #8]
    d60e:	f3c1 060e 	ubfx	r6, r1, #0, #15
    d612:	f104 0518 	add.w	r5, r4, #24
    d616:	f3c0 070e 	ubfx	r7, r0, #0, #15
    d61a:	eb05 0906 	add.w	r9, r5, r6
    d61e:	f7ff fe49 	bl	d2b4 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d622:	2200      	movs	r2, #0
    d624:	b998      	cbnz	r0, d64e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    d626:	8820      	ldrh	r0, [r4, #0]
    d628:	2845      	cmp	r0, #69	; 0x45
    d62a:	d200      	bcs.n	d62e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    d62c:	2045      	movs	r0, #69	; 0x45
    d62e:	42b7      	cmp	r7, r6
    d630:	d906      	bls.n	d640 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d632:	7ce3      	ldrb	r3, [r4, #19]
    d634:	1bb9      	subs	r1, r7, r6
    d636:	1ac9      	subs	r1, r1, r3
    d638:	1f49      	subs	r1, r1, #5
    d63a:	4281      	cmp	r1, r0
    d63c:	da00      	bge.n	d640 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d63e:	4608      	mov	r0, r1
    d640:	89a1      	ldrh	r1, [r4, #12]
    d642:	b111      	cbz	r1, d64a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    d644:	f8b9 3000 	ldrh.w	r3, [r9]
    d648:	1ac0      	subs	r0, r0, r3
    d64a:	4540      	cmp	r0, r8
    d64c:	da03      	bge.n	d656 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    d64e:	8222      	strh	r2, [r4, #16]
    d650:	2000      	movs	r0, #0
    d652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d656:	7ce0      	ldrb	r0, [r4, #19]
    d658:	4429      	add	r1, r5
    d65a:	1d40      	adds	r0, r0, #5
    d65c:	4430      	add	r0, r6
    d65e:	4408      	add	r0, r1
    d660:	f8a4 8010 	strh.w	r8, [r4, #16]
    d664:	1ec0      	subs	r0, r0, #3
    d666:	e7f4      	b.n	d652 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000d668 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    d668:	b570      	push	{r4, r5, r6, lr}
    d66a:	2300      	movs	r3, #0
    d66c:	f1a1 0208 	sub.w	r2, r1, #8
    d670:	f64f 74f7 	movw	r4, #65527	; 0xfff7
    d674:	42a2      	cmp	r2, r4
    d676:	d304      	bcc.n	d682 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    d678:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
    d67c:	2015      	movs	r0, #21
    d67e:	f7f3 f997 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d682:	6802      	ldr	r2, [r0, #0]
    d684:	b90a      	cbnz	r2, d68a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
    d686:	e01e      	b.n	d6c6 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    d688:	4610      	mov	r0, r2
    d68a:	6802      	ldr	r2, [r0, #0]
    d68c:	8893      	ldrh	r3, [r2, #4]
    d68e:	428b      	cmp	r3, r1
    d690:	d002      	beq.n	d698 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
    d692:	6813      	ldr	r3, [r2, #0]
    d694:	2b00      	cmp	r3, #0
    d696:	d1f7      	bne.n	d688 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
    d698:	8894      	ldrh	r4, [r2, #4]
    d69a:	4613      	mov	r3, r2
    d69c:	428c      	cmp	r4, r1
    d69e:	d101      	bne.n	d6a4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
    d6a0:	6811      	ldr	r1, [r2, #0]
    d6a2:	e00d      	b.n	d6c0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
    d6a4:	f101 0508 	add.w	r5, r1, #8
    d6a8:	b2ae      	uxth	r6, r5
    d6aa:	2500      	movs	r5, #0
    d6ac:	42b4      	cmp	r4, r6
    d6ae:	d309      	bcc.n	d6c4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
    d6b0:	1a64      	subs	r4, r4, r1
    d6b2:	4411      	add	r1, r2
    d6b4:	600d      	str	r5, [r1, #0]
    d6b6:	808c      	strh	r4, [r1, #4]
    d6b8:	6802      	ldr	r2, [r0, #0]
    d6ba:	6812      	ldr	r2, [r2, #0]
    d6bc:	6002      	str	r2, [r0, #0]
    d6be:	600a      	str	r2, [r1, #0]
    d6c0:	6001      	str	r1, [r0, #0]
    d6c2:	e000      	b.n	d6c6 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    d6c4:	2300      	movs	r3, #0
    d6c6:	4618      	mov	r0, r3
    d6c8:	bd70      	pop	{r4, r5, r6, pc}

0000d6ca <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    d6ca:	b510      	push	{r4, lr}
    d6cc:	000c      	movs	r4, r1
    d6ce:	d004      	beq.n	d6da <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    d6d0:	2c08      	cmp	r4, #8
    d6d2:	d207      	bcs.n	d6e4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    d6d4:	f44f 71cd 	mov.w	r1, #410	; 0x19a
    d6d8:	e00a      	b.n	d6f0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    d6da:	b108      	cbz	r0, d6e0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    d6dc:	2100      	movs	r1, #0
    d6de:	6001      	str	r1, [r0, #0]
    d6e0:	2000      	movs	r0, #0
    d6e2:	bd10      	pop	{r4, pc}
    d6e4:	b158      	cbz	r0, d6fe <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    d6e6:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    d6ea:	d304      	bcc.n	d6f6 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    d6ec:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    d6f0:	2015      	movs	r0, #21
    d6f2:	f7f3 f95d 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d6f6:	b2a1      	uxth	r1, r4
    d6f8:	6800      	ldr	r0, [r0, #0]
    d6fa:	f000 f814 	bl	d726 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    d6fe:	1d20      	adds	r0, r4, #4
    d700:	bd10      	pop	{r4, pc}

0000d702 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    d702:	2100      	movs	r1, #0
    d704:	6802      	ldr	r2, [r0, #0]
    d706:	e003      	b.n	d710 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    d708:	8893      	ldrh	r3, [r2, #4]
    d70a:	6812      	ldr	r2, [r2, #0]
    d70c:	4419      	add	r1, r3
    d70e:	b289      	uxth	r1, r1
    d710:	2a00      	cmp	r2, #0
    d712:	d1f9      	bne.n	d708 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    d714:	f000 b807 	b.w	d726 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000d718 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    d718:	2300      	movs	r3, #0
    d71a:	600b      	str	r3, [r1, #0]
    d71c:	808a      	strh	r2, [r1, #4]
    d71e:	6802      	ldr	r2, [r0, #0]
    d720:	600a      	str	r2, [r1, #0]
    d722:	6001      	str	r1, [r0, #0]
    d724:	4770      	bx	lr
    d726:	2300      	movs	r3, #0
    d728:	6043      	str	r3, [r0, #4]
    d72a:	1d02      	adds	r2, r0, #4
    d72c:	8101      	strh	r1, [r0, #8]
    d72e:	6002      	str	r2, [r0, #0]
    d730:	4770      	bx	lr
    d732:	eb00 0342 	add.w	r3, r0, r2, lsl #1
    d736:	8159      	strh	r1, [r3, #10]
    d738:	4611      	mov	r1, r2
    d73a:	f000 b814 	b.w	d766 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    d73e:	b170      	cbz	r0, d75e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x46>
    d740:	7882      	ldrb	r2, [r0, #2]
    d742:	fbb1 f3f2 	udiv	r3, r1, r2
    d746:	fb02 1213 	mls	r2, r2, r3, r1
    d74a:	b2d2      	uxtb	r2, r2
    d74c:	eb00 0342 	add.w	r3, r0, r2, lsl #1
    d750:	895b      	ldrh	r3, [r3, #10]
    d752:	428b      	cmp	r3, r1
    d754:	d101      	bne.n	d75a <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x42>
    d756:	4610      	mov	r0, r2
    d758:	4770      	bx	lr
    d75a:	78c3      	ldrb	r3, [r0, #3]
    d75c:	b10b      	cbz	r3, d762 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4a>
    d75e:	20ff      	movs	r0, #255	; 0xff
    d760:	4770      	bx	lr
    d762:	f7f3 bc07 	b.w	f74 <sdc_hci_cmd_vs_zephyr_read_version_info+0xdc>
    d766:	8802      	ldrh	r2, [r0, #0]
    d768:	fb01 0102 	mla	r1, r1, r2, r0
    d76c:	7880      	ldrb	r0, [r0, #2]
    d76e:	220a      	movs	r2, #10
    d770:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    d774:	4408      	add	r0, r1
    d776:	4770      	bx	lr

0000d778 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    d778:	b51c      	push	{r2, r3, r4, lr}
    d77a:	4604      	mov	r4, r0
    d77c:	2000      	movs	r0, #0
    d77e:	9001      	str	r0, [sp, #4]
    d780:	9000      	str	r0, [sp, #0]
    d782:	f88d 4006 	strb.w	r4, [sp, #6]
    d786:	e00a      	b.n	d79e <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    d788:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    d78c:	4621      	mov	r1, r4
    d78e:	f7f3 fcdf 	bl	1150 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    d792:	b120      	cbz	r0, d79e <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    d794:	f240 217e 	movw	r1, #638	; 0x27e
    d798:	2017      	movs	r0, #23
    d79a:	f7f3 f909 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d79e:	4668      	mov	r0, sp
    d7a0:	f7f3 fc86 	bl	10b0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    d7a4:	2800      	cmp	r0, #0
    d7a6:	d0ef      	beq.n	d788 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x10>
    d7a8:	bd1c      	pop	{r2, r3, r4, pc}

0000d7aa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    d7aa:	b570      	push	{r4, r5, r6, lr}
    d7ac:	460e      	mov	r6, r1
    d7ae:	461d      	mov	r5, r3
    d7b0:	4611      	mov	r1, r2
    d7b2:	f000 f813 	bl	d7dc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    d7b6:	4604      	mov	r4, r0
    d7b8:	4629      	mov	r1, r5
    d7ba:	4630      	mov	r0, r6
    d7bc:	f000 f804 	bl	d7c8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    d7c0:	4420      	add	r0, r4
    d7c2:	1d00      	adds	r0, r0, #4
    d7c4:	b280      	uxth	r0, r0
    d7c6:	bd70      	pop	{r4, r5, r6, pc}
    d7c8:	b510      	push	{r4, lr}
    d7ca:	460a      	mov	r2, r1
    d7cc:	2109      	movs	r1, #9
    d7ce:	f7ff ff0a 	bl	d5e6 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d7d2:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    d7d6:	1cc0      	adds	r0, r0, #3
    d7d8:	4008      	ands	r0, r1
    d7da:	bd10      	pop	{r4, pc}
    d7dc:	b510      	push	{r4, lr}
    d7de:	460a      	mov	r2, r1
    d7e0:	210a      	movs	r1, #10
    d7e2:	f7ff ff00 	bl	d5e6 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d7e6:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    d7ea:	1cc0      	adds	r0, r0, #3
    d7ec:	4008      	ands	r0, r1
    d7ee:	bd10      	pop	{r4, pc}
    d7f0:	b109      	cbz	r1, d7f6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4c>
    d7f2:	2100      	movs	r1, #0
    d7f4:	e000      	b.n	d7f8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4e>
    d7f6:	2102      	movs	r1, #2
    d7f8:	1843      	adds	r3, r0, r1
    d7fa:	7d1a      	ldrb	r2, [r3, #20]
    d7fc:	2a02      	cmp	r2, #2
    d7fe:	d008      	beq.n	d812 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    d800:	7d5b      	ldrb	r3, [r3, #21]
    d802:	2b02      	cmp	r3, #2
    d804:	d009      	beq.n	d81a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    d806:	2a03      	cmp	r2, #3
    d808:	d003      	beq.n	d812 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    d80a:	2b03      	cmp	r3, #3
    d80c:	d005      	beq.n	d81a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    d80e:	2000      	movs	r0, #0
    d810:	4770      	bx	lr
    d812:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d816:	8b00      	ldrh	r0, [r0, #24]
    d818:	4770      	bx	lr
    d81a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d81e:	8b40      	ldrh	r0, [r0, #26]
    d820:	4770      	bx	lr
    d822:	b109      	cbz	r1, d828 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7e>
    d824:	2100      	movs	r1, #0
    d826:	e000      	b.n	d82a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    d828:	2102      	movs	r1, #2
    d82a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d82e:	8b01      	ldrh	r1, [r0, #24]
    d830:	b911      	cbnz	r1, d838 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8e>
    d832:	8b40      	ldrh	r0, [r0, #26]
    d834:	2800      	cmp	r0, #0
    d836:	d000      	beq.n	d83a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x90>
    d838:	2001      	movs	r0, #1
    d83a:	4770      	bx	lr
    d83c:	b538      	push	{r3, r4, r5, lr}
    d83e:	7883      	ldrb	r3, [r0, #2]
    d840:	f88d 3000 	strb.w	r3, [sp]
    d844:	9b00      	ldr	r3, [sp, #0]
    d846:	9300      	str	r3, [sp, #0]
    d848:	f89d 3000 	ldrb.w	r3, [sp]
    d84c:	b95b      	cbnz	r3, d866 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xbc>
    d84e:	2400      	movs	r4, #0
    d850:	b10a      	cbz	r2, d856 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xac>
    d852:	2300      	movs	r3, #0
    d854:	e000      	b.n	d858 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xae>
    d856:	2302      	movs	r3, #2
    d858:	18c2      	adds	r2, r0, r3
    d85a:	7d15      	ldrb	r5, [r2, #20]
    d85c:	2d02      	cmp	r5, #2
    d85e:	d004      	beq.n	d86a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    d860:	7d52      	ldrb	r2, [r2, #21]
    d862:	2a02      	cmp	r2, #2
    d864:	d004      	beq.n	d870 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc6>
    d866:	2000      	movs	r0, #0
    d868:	bd38      	pop	{r3, r4, r5, pc}
    d86a:	461a      	mov	r2, r3
    d86c:	1c5b      	adds	r3, r3, #1
    d86e:	e000      	b.n	d872 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc8>
    d870:	1c5a      	adds	r2, r3, #1
    d872:	b179      	cbz	r1, d894 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xea>
    d874:	18c5      	adds	r5, r0, r3
    d876:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d87a:	752c      	strb	r4, [r5, #20]
    d87c:	831c      	strh	r4, [r3, #24]
    d87e:	2303      	movs	r3, #3
    d880:	1884      	adds	r4, r0, r2
    d882:	7523      	strb	r3, [r4, #20]
    d884:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    d888:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    d88c:	685b      	ldr	r3, [r3, #4]
    d88e:	600b      	str	r3, [r1, #0]
    d890:	8b00      	ldrh	r0, [r0, #24]
    d892:	8088      	strh	r0, [r1, #4]
    d894:	2001      	movs	r0, #1
    d896:	bd38      	pop	{r3, r4, r5, pc}
    d898:	b510      	push	{r4, lr}
    d89a:	b109      	cbz	r1, d8a0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf6>
    d89c:	2100      	movs	r1, #0
    d89e:	e000      	b.n	d8a2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf8>
    d8a0:	2102      	movs	r1, #2
    d8a2:	1843      	adds	r3, r0, r1
    d8a4:	7d1c      	ldrb	r4, [r3, #20]
    d8a6:	4294      	cmp	r4, r2
    d8a8:	d103      	bne.n	d8b2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x108>
    d8aa:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d8ae:	8b00      	ldrh	r0, [r0, #24]
    d8b0:	bd10      	pop	{r4, pc}
    d8b2:	7d5b      	ldrb	r3, [r3, #21]
    d8b4:	4293      	cmp	r3, r2
    d8b6:	d103      	bne.n	d8c0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x116>
    d8b8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d8bc:	8b40      	ldrh	r0, [r0, #26]
    d8be:	bd10      	pop	{r4, pc}
    d8c0:	2000      	movs	r0, #0
    d8c2:	bd10      	pop	{r4, pc}
    d8c4:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    d8c8:	d201      	bcs.n	d8ce <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x124>
    d8ca:	0841      	lsrs	r1, r0, #1
    d8cc:	e000      	b.n	d8d0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x126>
    d8ce:	21ff      	movs	r1, #255	; 0xff
    d8d0:	1a40      	subs	r0, r0, r1
    d8d2:	f240 6172 	movw	r1, #1650	; 0x672
    d8d6:	4288      	cmp	r0, r1
    d8d8:	db00      	blt.n	d8dc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x132>
    d8da:	4608      	mov	r0, r1
    d8dc:	b280      	uxth	r0, r0
    d8de:	4770      	bx	lr

0000d8e0 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    d8e0:	2101      	movs	r1, #1
    d8e2:	f7ff bf85 	b.w	d7f0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>

0000d8e6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    d8e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d8ea:	4606      	mov	r6, r0
    d8ec:	f342 0780 	sbfx	r7, r2, #2, #1
    d8f0:	7848      	ldrb	r0, [r1, #1]
    d8f2:	460c      	mov	r4, r1
    d8f4:	f022 0504 	bic.w	r5, r2, #4
    d8f8:	1c7f      	adds	r7, r7, #1
    d8fa:	b100      	cbz	r0, d8fe <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    d8fc:	b90d      	cbnz	r5, d902 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    d8fe:	4328      	orrs	r0, r5
    d900:	d104      	bne.n	d90c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    d902:	b145      	cbz	r5, d916 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    d904:	2100      	movs	r1, #0
    d906:	4620      	mov	r0, r4
    d908:	f7f3 fd42 	bl	1390 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x8>
    d90c:	20ff      	movs	r0, #255	; 0xff
    d90e:	70a0      	strb	r0, [r4, #2]
    d910:	b11f      	cbz	r7, d91a <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    d912:	2000      	movs	r0, #0
    d914:	e002      	b.n	d91c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    d916:	2101      	movs	r1, #1
    d918:	e7f5      	b.n	d906 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    d91a:	2002      	movs	r0, #2
    d91c:	1821      	adds	r1, r4, r0
    d91e:	7d09      	ldrb	r1, [r1, #20]
    d920:	2903      	cmp	r1, #3
    d922:	d102      	bne.n	d92a <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    d924:	2d02      	cmp	r5, #2
    d926:	d000      	beq.n	d92a <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    d928:	1c40      	adds	r0, r0, #1
    d92a:	1822      	adds	r2, r4, r0
    d92c:	2101      	movs	r1, #1
    d92e:	7511      	strb	r1, [r2, #20]
    d930:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    d934:	2200      	movs	r2, #0
    d936:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    d93a:	830a      	strh	r2, [r1, #24]
    d93c:	6840      	ldr	r0, [r0, #4]
    d93e:	70a2      	strb	r2, [r4, #2]
    d940:	4631      	mov	r1, r6
    d942:	f362 010f 	bfi	r1, r2, #0, #16
    d946:	e9c6 0100 	strd	r0, r1, [r6]
    d94a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d94e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    d94e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d952:	461e      	mov	r6, r3
    d954:	4613      	mov	r3, r2
    d956:	4604      	mov	r4, r0
    d958:	b109      	cbz	r1, d95e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    d95a:	2000      	movs	r0, #0
    d95c:	e000      	b.n	d960 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    d95e:	2002      	movs	r0, #2
    d960:	21ff      	movs	r1, #255	; 0xff
    d962:	70a1      	strb	r1, [r4, #2]
    d964:	1821      	adds	r1, r4, r0
    d966:	7d0a      	ldrb	r2, [r1, #20]
    d968:	2a01      	cmp	r2, #1
    d96a:	d003      	beq.n	d974 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    d96c:	7d49      	ldrb	r1, [r1, #21]
    d96e:	2901      	cmp	r1, #1
    d970:	d10c      	bne.n	d98c <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    d972:	1c40      	adds	r0, r0, #1
    d974:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    d978:	2700      	movs	r7, #0
    d97a:	8b29      	ldrh	r1, [r5, #24]
    d97c:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    d980:	198a      	adds	r2, r1, r6
    d982:	4562      	cmp	r2, ip
    d984:	d905      	bls.n	d992 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    d986:	4420      	add	r0, r4
    d988:	832f      	strh	r7, [r5, #24]
    d98a:	7507      	strb	r7, [r0, #20]
    d98c:	2000      	movs	r0, #0
    d98e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d992:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    d996:	4632      	mov	r2, r6
    d998:	6840      	ldr	r0, [r0, #4]
    d99a:	4408      	add	r0, r1
    d99c:	4619      	mov	r1, r3
    d99e:	f003 fa72 	bl	10e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d9a2:	8b28      	ldrh	r0, [r5, #24]
    d9a4:	4430      	add	r0, r6
    d9a6:	8328      	strh	r0, [r5, #24]
    d9a8:	70a7      	strb	r7, [r4, #2]
    d9aa:	2001      	movs	r0, #1
    d9ac:	e7ef      	b.n	d98e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

0000d9ae <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    d9ae:	b510      	push	{r4, lr}
    d9b0:	2101      	movs	r1, #1
    d9b2:	f7ff ff36 	bl	d822 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    d9b6:	2800      	cmp	r0, #0
    d9b8:	d000      	beq.n	d9bc <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    d9ba:	2001      	movs	r0, #1
    d9bc:	bd10      	pop	{r4, pc}

0000d9be <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    d9be:	2201      	movs	r2, #1
    d9c0:	f7ff bf3c 	b.w	d83c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000d9c4 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    d9c4:	2200      	movs	r2, #0
    d9c6:	f7ff bf39 	b.w	d83c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000d9ca <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I>:
    d9ca:	b510      	push	{r4, lr}
    d9cc:	2100      	movs	r1, #0
    d9ce:	f7ff ff28 	bl	d822 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    d9d2:	2800      	cmp	r0, #0
    d9d4:	d000      	beq.n	d9d8 <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I+0xe>
    d9d6:	2001      	movs	r0, #1
    d9d8:	bd10      	pop	{r4, pc}

0000d9da <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    d9da:	b570      	push	{r4, r5, r6, lr}
    d9dc:	b109      	cbz	r1, d9e2 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    d9de:	2300      	movs	r3, #0
    d9e0:	e000      	b.n	d9e4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    d9e2:	2302      	movs	r3, #2
    d9e4:	21ff      	movs	r1, #255	; 0xff
    d9e6:	7081      	strb	r1, [r0, #2]
    d9e8:	18c1      	adds	r1, r0, r3
    d9ea:	2402      	movs	r4, #2
    d9ec:	7d0d      	ldrb	r5, [r1, #20]
    d9ee:	2d01      	cmp	r5, #1
    d9f0:	d007      	beq.n	da02 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    d9f2:	7d4d      	ldrb	r5, [r1, #21]
    d9f4:	2d01      	cmp	r5, #1
    d9f6:	d009      	beq.n	da0c <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    d9f8:	f44f 718b 	mov.w	r1, #278	; 0x116
    d9fc:	2009      	movs	r0, #9
    d9fe:	f7f2 ffd7 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    da02:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    da06:	831a      	strh	r2, [r3, #24]
    da08:	750c      	strb	r4, [r1, #20]
    da0a:	e003      	b.n	da14 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    da0c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    da10:	835a      	strh	r2, [r3, #26]
    da12:	754c      	strb	r4, [r1, #21]
    da14:	2100      	movs	r1, #0
    da16:	7081      	strb	r1, [r0, #2]
    da18:	bd70      	pop	{r4, r5, r6, pc}

0000da1a <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    da1a:	2101      	movs	r1, #1
    da1c:	7001      	strb	r1, [r0, #0]
    da1e:	4770      	bx	lr

0000da20 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    da20:	2201      	movs	r2, #1
    da22:	4611      	mov	r1, r2
    da24:	f7ff bf38 	b.w	d898 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000da28 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    da28:	2201      	movs	r2, #1
    da2a:	2100      	movs	r1, #0
    da2c:	f7ff bf34 	b.w	d898 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000da30 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    da30:	2100      	movs	r1, #0
    da32:	f7ff bedd 	b.w	d7f0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    da36:	2800      	cmp	r0, #0
    da38:	db09      	blt.n	da4e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    da3a:	f000 021f 	and.w	r2, r0, #31
    da3e:	2101      	movs	r1, #1
    da40:	4091      	lsls	r1, r2
    da42:	0940      	lsrs	r0, r0, #5
    da44:	0080      	lsls	r0, r0, #2
    da46:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    da4a:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    da4e:	4770      	bx	lr
    da50:	2800      	cmp	r0, #0
    da52:	db0d      	blt.n	da70 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x40>
    da54:	f000 021f 	and.w	r2, r0, #31
    da58:	2101      	movs	r1, #1
    da5a:	4091      	lsls	r1, r2
    da5c:	0940      	lsrs	r0, r0, #5
    da5e:	0080      	lsls	r0, r0, #2
    da60:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    da64:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    da68:	f3bf 8f4f 	dsb	sy
    da6c:	f3bf 8f6f 	isb	sy
    da70:	4770      	bx	lr
    da72:	b510      	push	{r4, lr}
    da74:	200e      	movs	r0, #14
    da76:	f7ff ffeb 	bl	da50 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    da7a:	200e      	movs	r0, #14
    da7c:	f7ff ffdb 	bl	da36 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    da80:	200f      	movs	r0, #15
    da82:	f7ff ffe5 	bl	da50 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    da86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    da8a:	200f      	movs	r0, #15
    da8c:	f7ff bfd3 	b.w	da36 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    da90:	2800      	cmp	r0, #0
    da92:	db09      	blt.n	daa8 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x78>
    da94:	f000 021f 	and.w	r2, r0, #31
    da98:	2101      	movs	r1, #1
    da9a:	4091      	lsls	r1, r2
    da9c:	0940      	lsrs	r0, r0, #5
    da9e:	0080      	lsls	r0, r0, #2
    daa0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    daa4:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    daa8:	4770      	bx	lr
    daaa:	5840      	ldr	r0, [r0, r1]
    daac:	2800      	cmp	r0, #0
    daae:	d000      	beq.n	dab2 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x82>
    dab0:	2001      	movs	r0, #1
    dab2:	4770      	bx	lr

0000dab4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    dab4:	b510      	push	{r4, lr}
    dab6:	4604      	mov	r4, r0
    dab8:	4620      	mov	r0, r4
    daba:	f7f3 fd71 	bl	15a0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>
    dabe:	2811      	cmp	r0, #17
    dac0:	d0fa      	beq.n	dab8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    dac2:	bd10      	pop	{r4, pc}

0000dac4 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    dac4:	b510      	push	{r4, lr}
    dac6:	f7ff fff5 	bl	dab4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    daca:	2800      	cmp	r0, #0
    dacc:	d003      	beq.n	dad6 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    dace:	21a9      	movs	r1, #169	; 0xa9
    dad0:	201d      	movs	r0, #29
    dad2:	f7f2 ff6d 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dad6:	bd10      	pop	{r4, pc}

0000dad8 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    dad8:	f7f3 bec0 	b.w	185c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000dadc <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    dadc:	f7f3 beae 	b.w	183c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000dae0 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    dae0:	b510      	push	{r4, lr}
    dae2:	4050      	eors	r0, r2
    dae4:	780a      	ldrb	r2, [r1, #0]
    dae6:	781c      	ldrb	r4, [r3, #0]
    dae8:	4062      	eors	r2, r4
    daea:	4410      	add	r0, r2
    daec:	784a      	ldrb	r2, [r1, #1]
    daee:	785c      	ldrb	r4, [r3, #1]
    daf0:	4062      	eors	r2, r4
    daf2:	4410      	add	r0, r2
    daf4:	788a      	ldrb	r2, [r1, #2]
    daf6:	789c      	ldrb	r4, [r3, #2]
    daf8:	4062      	eors	r2, r4
    dafa:	4410      	add	r0, r2
    dafc:	78ca      	ldrb	r2, [r1, #3]
    dafe:	78dc      	ldrb	r4, [r3, #3]
    db00:	4062      	eors	r2, r4
    db02:	4410      	add	r0, r2
    db04:	790a      	ldrb	r2, [r1, #4]
    db06:	791c      	ldrb	r4, [r3, #4]
    db08:	7949      	ldrb	r1, [r1, #5]
    db0a:	4062      	eors	r2, r4
    db0c:	4410      	add	r0, r2
    db0e:	795a      	ldrb	r2, [r3, #5]
    db10:	4051      	eors	r1, r2
    db12:	42c1      	cmn	r1, r0
    db14:	d101      	bne.n	db1a <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    db16:	2001      	movs	r0, #1
    db18:	bd10      	pop	{r4, pc}
    db1a:	2000      	movs	r0, #0
    db1c:	bd10      	pop	{r4, pc}

0000db1e <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    db1e:	b510      	push	{r4, lr}
    db20:	2900      	cmp	r1, #0
    db22:	4604      	mov	r4, r0
    db24:	f04f 0106 	mov.w	r1, #6
    db28:	d002      	beq.n	db30 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    db2a:	f7f2 ffe3 	bl	af4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    db2e:	e001      	b.n	db34 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    db30:	f7f2 ffee 	bl	b10 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    db34:	7960      	ldrb	r0, [r4, #5]
    db36:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    db3a:	7160      	strb	r0, [r4, #5]
    db3c:	bd10      	pop	{r4, pc}

0000db3e <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    db3e:	4770      	bx	lr

0000db40 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    db40:	b530      	push	{r4, r5, lr}
    db42:	460c      	mov	r4, r1
    db44:	4605      	mov	r5, r0
    db46:	b08d      	sub	sp, #52	; 0x34
    db48:	f04f 0103 	mov.w	r1, #3
    db4c:	f104 0003 	add.w	r0, r4, #3
    db50:	b112      	cbz	r2, db58 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    db52:	f7f2 ffcf 	bl	af4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    db56:	e001      	b.n	db5c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    db58:	f7f2 ffda 	bl	b10 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    db5c:	7960      	ldrb	r0, [r4, #5]
    db5e:	220d      	movs	r2, #13
    db60:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    db64:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    db68:	7160      	strb	r0, [r4, #5]
    db6a:	2100      	movs	r1, #0
    db6c:	a804      	add	r0, sp, #16
    db6e:	f003 fa04 	bl	10f7a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    db72:	78e0      	ldrb	r0, [r4, #3]
    db74:	f88d 001f 	strb.w	r0, [sp, #31]
    db78:	7920      	ldrb	r0, [r4, #4]
    db7a:	f88d 001e 	strb.w	r0, [sp, #30]
    db7e:	7960      	ldrb	r0, [r4, #5]
    db80:	f88d 001d 	strb.w	r0, [sp, #29]
    db84:	2210      	movs	r2, #16
    db86:	4629      	mov	r1, r5
    db88:	4668      	mov	r0, sp
    db8a:	f003 f97c 	bl	10e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    db8e:	4668      	mov	r0, sp
    db90:	f7ff ff98 	bl	dac4 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    db94:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    db98:	7020      	strb	r0, [r4, #0]
    db9a:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    db9e:	7060      	strb	r0, [r4, #1]
    dba0:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    dba4:	70a0      	strb	r0, [r4, #2]
    dba6:	b00d      	add	sp, #52	; 0x34
    dba8:	bd30      	pop	{r4, r5, pc}

0000dbaa <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A>:
    dbaa:	f7f4 b9c1 	b.w	1f30 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e4>
    dbae:	07c1      	lsls	r1, r0, #31
    dbb0:	d001      	beq.n	dbb6 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0xc>
    dbb2:	2001      	movs	r0, #1
    dbb4:	4770      	bx	lr
    dbb6:	0780      	lsls	r0, r0, #30
    dbb8:	d501      	bpl.n	dbbe <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x14>
    dbba:	2002      	movs	r0, #2
    dbbc:	4770      	bx	lr
    dbbe:	2000      	movs	r0, #0
    dbc0:	4770      	bx	lr
    dbc2:	b510      	push	{r4, lr}
    dbc4:	2801      	cmp	r0, #1
    dbc6:	d008      	beq.n	dbda <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x30>
    dbc8:	2802      	cmp	r0, #2
    dbca:	d004      	beq.n	dbd6 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x2c>
    dbcc:	f240 4121 	movw	r1, #1057	; 0x421
    dbd0:	2006      	movs	r0, #6
    dbd2:	f7f2 feed 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dbd6:	2001      	movs	r0, #1
    dbd8:	bd10      	pop	{r4, pc}
    dbda:	2000      	movs	r0, #0
    dbdc:	bd10      	pop	{r4, pc}
    dbde:	2900      	cmp	r1, #0
    dbe0:	d004      	beq.n	dbec <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x42>
    dbe2:	2801      	cmp	r0, #1
    dbe4:	d003      	beq.n	dbee <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x44>
    dbe6:	2901      	cmp	r1, #1
    dbe8:	d001      	beq.n	dbee <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x44>
    dbea:	2002      	movs	r0, #2
    dbec:	4770      	bx	lr
    dbee:	2001      	movs	r0, #1
    dbf0:	4770      	bx	lr
    dbf2:	f7ff bc90 	b.w	d516 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000dbf6 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    dbf6:	2101      	movs	r1, #1
    dbf8:	f7f4 bcb8 	b.w	256c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xc>

0000dbfc <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    dbfc:	b510      	push	{r4, lr}
    dbfe:	f002 fde3 	bl	107c8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    dc02:	b118      	cbz	r0, dc0c <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    dc04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dc08:	f7f9 bd08 	b.w	761c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    dc0c:	20ff      	movs	r0, #255	; 0xff
    dc0e:	bd10      	pop	{r4, pc}

0000dc10 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    dc10:	b510      	push	{r4, lr}
    dc12:	f7f4 fcd7 	bl	25c4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x64>
    dc16:	2808      	cmp	r0, #8
    dc18:	d003      	beq.n	dc22 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    dc1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dc1e:	f7f4 bcbd 	b.w	259c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x3c>
    dc22:	bd10      	pop	{r4, pc}

0000dc24 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    dc24:	b510      	push	{r4, lr}
    dc26:	f7f4 fccd 	bl	25c4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x64>
    dc2a:	2808      	cmp	r0, #8
    dc2c:	d007      	beq.n	dc3e <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    dc2e:	f7f4 fcb5 	bl	259c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x3c>
    dc32:	2808      	cmp	r0, #8
    dc34:	d003      	beq.n	dc3e <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    dc36:	f7f4 fd27 	bl	2688 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x128>
    dc3a:	2001      	movs	r0, #1
    dc3c:	bd10      	pop	{r4, pc}
    dc3e:	2000      	movs	r0, #0
    dc40:	bd10      	pop	{r4, pc}

0000dc42 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    dc42:	b570      	push	{r4, r5, r6, lr}
    dc44:	460e      	mov	r6, r1
    dc46:	b08c      	sub	sp, #48	; 0x30
    dc48:	4614      	mov	r4, r2
    dc4a:	4601      	mov	r1, r0
    dc4c:	461d      	mov	r5, r3
    dc4e:	2210      	movs	r2, #16
    dc50:	4668      	mov	r0, sp
    dc52:	f000 f929 	bl	dea8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    dc56:	2210      	movs	r2, #16
    dc58:	4631      	mov	r1, r6
    dc5a:	a804      	add	r0, sp, #16
    dc5c:	f000 f924 	bl	dea8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    dc60:	4668      	mov	r0, sp
    dc62:	f7ff ff2f 	bl	dac4 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    dc66:	a908      	add	r1, sp, #32
    dc68:	f04f 0210 	mov.w	r2, #16
    dc6c:	4628      	mov	r0, r5
    dc6e:	b11c      	cbz	r4, dc78 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    dc70:	f000 f91a 	bl	dea8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    dc74:	b00c      	add	sp, #48	; 0x30
    dc76:	bd70      	pop	{r4, r5, r6, pc}
    dc78:	f003 f905 	bl	10e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dc7c:	e7fa      	b.n	dc74 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000dc7e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    dc7e:	b510      	push	{r4, lr}
    dc80:	460c      	mov	r4, r1
    dc82:	2100      	movs	r1, #0
    dc84:	f7f3 f9c2 	bl	100c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    dc88:	6060      	str	r0, [r4, #4]
    dc8a:	b118      	cbz	r0, dc94 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    dc8c:	2001      	movs	r0, #1
    dc8e:	7020      	strb	r0, [r4, #0]
    dc90:	2000      	movs	r0, #0
    dc92:	bd10      	pop	{r4, pc}
    dc94:	2002      	movs	r0, #2
    dc96:	bd10      	pop	{r4, pc}

0000dc98 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    dc98:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dc9c:	4348      	muls	r0, r1
    dc9e:	4770      	bx	lr

0000dca0 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    dca0:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dca4:	fbb0 f0f1 	udiv	r0, r0, r1
    dca8:	b280      	uxth	r0, r0
    dcaa:	4770      	bx	lr

0000dcac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    dcac:	b510      	push	{r4, lr}
    dcae:	f1a2 0310 	sub.w	r3, r2, #16
    dcb2:	290d      	cmp	r1, #13
    dcb4:	d24d      	bcs.n	dd52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dcb6:	e8df f001 	tbb	[pc, r1]
    dcba:	0907      	.short	0x0907
    dcbc:	1d1a150e 	.word	0x1d1a150e
    dcc0:	4e2c2921 	.word	0x4e2c2921
    dcc4:	0048362f 	.word	0x0048362f
    dcc8:	b3f2      	cbz	r2, dd48 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x9c>
    dcca:	e042      	b.n	dd52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dccc:	2a06      	cmp	r2, #6
    dcce:	d03e      	beq.n	dd4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dcd0:	2a07      	cmp	r2, #7
    dcd2:	d03c      	beq.n	dd4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dcd4:	e03d      	b.n	dd52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dcd6:	2a0b      	cmp	r2, #11
    dcd8:	d039      	beq.n	dd4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dcda:	2a0c      	cmp	r2, #12
    dcdc:	d037      	beq.n	dd4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dcde:	2a0a      	cmp	r2, #10
    dce0:	d035      	beq.n	dd4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dce2:	e036      	b.n	dd52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dce4:	2a0d      	cmp	r2, #13
    dce6:	d032      	beq.n	dd4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dce8:	2a0e      	cmp	r2, #14
    dcea:	d030      	beq.n	dd4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dcec:	e031      	b.n	dd52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dcee:	2b0c      	cmp	r3, #12
    dcf0:	d92d      	bls.n	dd4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dcf2:	e02e      	b.n	dd52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dcf4:	3a11      	subs	r2, #17
    dcf6:	2a0b      	cmp	r2, #11
    dcf8:	d929      	bls.n	dd4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dcfa:	e02a      	b.n	dd52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dcfc:	2b03      	cmp	r3, #3
    dcfe:	d926      	bls.n	dd4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dd00:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    dd04:	b1f8      	cbz	r0, dd46 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x9a>
    dd06:	2a1c      	cmp	r2, #28
    dd08:	d921      	bls.n	dd4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dd0a:	e022      	b.n	dd52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dd0c:	2a04      	cmp	r2, #4
    dd0e:	d01e      	beq.n	dd4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dd10:	e01f      	b.n	dd52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dd12:	2a01      	cmp	r2, #1
    dd14:	d01b      	beq.n	dd4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dd16:	e01c      	b.n	dd52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dd18:	2a1d      	cmp	r2, #29
    dd1a:	d018      	beq.n	dd4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dd1c:	2a1e      	cmp	r2, #30
    dd1e:	d016      	beq.n	dd4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dd20:	2a1f      	cmp	r2, #31
    dd22:	d014      	beq.n	dd4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dd24:	e015      	b.n	dd52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dd26:	2a20      	cmp	r2, #32
    dd28:	d011      	beq.n	dd4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dd2a:	2a21      	cmp	r2, #33	; 0x21
    dd2c:	d00f      	beq.n	dd4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dd2e:	2a22      	cmp	r2, #34	; 0x22
    dd30:	d00d      	beq.n	dd4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dd32:	2a23      	cmp	r2, #35	; 0x23
    dd34:	d00b      	beq.n	dd4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dd36:	2a24      	cmp	r2, #36	; 0x24
    dd38:	d009      	beq.n	dd4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dd3a:	2a25      	cmp	r2, #37	; 0x25
    dd3c:	d007      	beq.n	dd4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dd3e:	2a26      	cmp	r2, #38	; 0x26
    dd40:	d005      	beq.n	dd4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dd42:	2a2e      	cmp	r2, #46	; 0x2e
    dd44:	d003      	beq.n	dd4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dd46:	e004      	b.n	dd52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dd48:	e001      	b.n	dd4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dd4a:	2a28      	cmp	r2, #40	; 0x28
    dd4c:	d101      	bne.n	dd52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dd4e:	2001      	movs	r0, #1
    dd50:	bd10      	pop	{r4, pc}
    dd52:	2000      	movs	r0, #0
    dd54:	bd10      	pop	{r4, pc}
    dd56:	2a0f      	cmp	r2, #15
    dd58:	d1fb      	bne.n	dd52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dd5a:	e7f8      	b.n	dd4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>

0000dd5c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    dd5c:	280b      	cmp	r0, #11
    dd5e:	d019      	beq.n	dd94 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dd60:	280c      	cmp	r0, #12
    dd62:	d017      	beq.n	dd94 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dd64:	280a      	cmp	r0, #10
    dd66:	d015      	beq.n	dd94 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dd68:	280d      	cmp	r0, #13
    dd6a:	d013      	beq.n	dd94 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dd6c:	280e      	cmp	r0, #14
    dd6e:	d011      	beq.n	dd94 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dd70:	2820      	cmp	r0, #32
    dd72:	d00f      	beq.n	dd94 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dd74:	2821      	cmp	r0, #33	; 0x21
    dd76:	d00d      	beq.n	dd94 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dd78:	2822      	cmp	r0, #34	; 0x22
    dd7a:	d00b      	beq.n	dd94 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dd7c:	2823      	cmp	r0, #35	; 0x23
    dd7e:	d009      	beq.n	dd94 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dd80:	2824      	cmp	r0, #36	; 0x24
    dd82:	d007      	beq.n	dd94 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dd84:	2825      	cmp	r0, #37	; 0x25
    dd86:	d005      	beq.n	dd94 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dd88:	2826      	cmp	r0, #38	; 0x26
    dd8a:	d003      	beq.n	dd94 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dd8c:	282e      	cmp	r0, #46	; 0x2e
    dd8e:	d001      	beq.n	dd94 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dd90:	2000      	movs	r0, #0
    dd92:	4770      	bx	lr
    dd94:	2001      	movs	r0, #1
    dd96:	4770      	bx	lr

0000dd98 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    dd98:	f011 0f0c 	tst.w	r1, #12
    dd9c:	d018      	beq.n	ddd0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
    dd9e:	074a      	lsls	r2, r1, #29
    dda0:	f44f 7116 	mov.w	r1, #600	; 0x258
    dda4:	2a00      	cmp	r2, #0
    dda6:	da02      	bge.n	ddae <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    dda8:	f04f 0210 	mov.w	r2, #16
    ddac:	e001      	b.n	ddb2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    ddae:	f04f 0240 	mov.w	r2, #64	; 0x40
    ddb2:	da01      	bge.n	ddb8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    ddb4:	f04f 0196 	mov.w	r1, #150	; 0x96
    ddb8:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    ddbc:	eba0 0301 	sub.w	r3, r0, r1
    ddc0:	4288      	cmp	r0, r1
    ddc2:	d903      	bls.n	ddcc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    ddc4:	fb93 f0f2 	sdiv	r0, r3, r2
    ddc8:	b280      	uxth	r0, r0
    ddca:	4770      	bx	lr
    ddcc:	2000      	movs	r0, #0
    ddce:	4770      	bx	lr
    ddd0:	2902      	cmp	r1, #2
    ddd2:	d008      	beq.n	dde6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    ddd4:	2870      	cmp	r0, #112	; 0x70
    ddd6:	d9f9      	bls.n	ddcc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    ddd8:	3870      	subs	r0, #112	; 0x70
    ddda:	17c1      	asrs	r1, r0, #31
    dddc:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    dde0:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    dde4:	4770      	bx	lr
    dde6:	283c      	cmp	r0, #60	; 0x3c
    dde8:	d9f0      	bls.n	ddcc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    ddea:	383c      	subs	r0, #60	; 0x3c
    ddec:	17c1      	asrs	r1, r0, #31
    ddee:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    ddf2:	f3c0 008f 	ubfx	r0, r0, #2, #16
    ddf6:	4770      	bx	lr

0000ddf8 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    ddf8:	6809      	ldr	r1, [r1, #0]
    ddfa:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    ddfe:	4770      	bx	lr

0000de00 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    de00:	07c1      	lsls	r1, r0, #31
    de02:	d001      	beq.n	de08 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    de04:	2001      	movs	r0, #1
    de06:	4770      	bx	lr
    de08:	0781      	lsls	r1, r0, #30
    de0a:	d501      	bpl.n	de10 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    de0c:	2002      	movs	r0, #2
    de0e:	4770      	bx	lr
    de10:	0740      	lsls	r0, r0, #29
    de12:	d501      	bpl.n	de18 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    de14:	2008      	movs	r0, #8
    de16:	4770      	bx	lr
    de18:	2000      	movs	r0, #0
    de1a:	4770      	bx	lr

0000de1c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    de1c:	b510      	push	{r4, lr}
    de1e:	f640 12c4 	movw	r2, #2500	; 0x9c4
    de22:	2901      	cmp	r1, #1
    de24:	d006      	beq.n	de34 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    de26:	2902      	cmp	r1, #2
    de28:	d005      	beq.n	de36 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    de2a:	f44f 7168 	mov.w	r1, #928	; 0x3a0
    de2e:	2029      	movs	r0, #41	; 0x29
    de30:	f7f2 fdbe 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    de34:	b108      	cbz	r0, de3a <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    de36:	4610      	mov	r0, r2
    de38:	bd10      	pop	{r4, pc}
    de3a:	f240 40e2 	movw	r0, #1250	; 0x4e2
    de3e:	bd10      	pop	{r4, pc}

0000de40 <sym_AIEQYZJFZQBQ5LEMJNMQV56TMLIGCBAC63QLHGI>:
    de40:	f880 106e 	strb.w	r1, [r0, #110]	; 0x6e
    de44:	f001 bcf8 	b.w	f838 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>

0000de48 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    de48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    de4c:	4607      	mov	r7, r0
    de4e:	460e      	mov	r6, r1
    de50:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    de54:	f7fc fba2 	bl	a59c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    de58:	b198      	cbz	r0, de82 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    de5a:	b31e      	cbz	r6, dea4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    de5c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    de60:	1b40      	subs	r0, r0, r5
    de62:	2300      	movs	r3, #0
    de64:	eb61 0104 	sbc.w	r1, r1, r4
    de68:	461a      	mov	r2, r3
    de6a:	1a1b      	subs	r3, r3, r0
    de6c:	418a      	sbcs	r2, r1
    de6e:	da19      	bge.n	dea4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    de70:	1c42      	adds	r2, r0, #1
    de72:	f171 0100 	sbcs.w	r1, r1, #0
    de76:	db07      	blt.n	de88 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    de78:	f240 211a 	movw	r1, #538	; 0x21a
    de7c:	2029      	movs	r0, #41	; 0x29
    de7e:	f7f2 fd97 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    de82:	f44f 7104 	mov.w	r1, #528	; 0x210
    de86:	e7f9      	b.n	de7c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    de88:	4430      	add	r0, r6
    de8a:	1e40      	subs	r0, r0, #1
    de8c:	fbb0 f1f6 	udiv	r1, r0, r6
    de90:	fb01 f006 	mul.w	r0, r1, r6
    de94:	1828      	adds	r0, r5, r0
    de96:	f144 0400 	adc.w	r4, r4, #0
    de9a:	e9c7 0404 	strd	r0, r4, [r7, #16]
    de9e:	4608      	mov	r0, r1
    dea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dea4:	2000      	movs	r0, #0
    dea6:	e7fb      	b.n	dea0 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

0000dea8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    dea8:	b530      	push	{r4, r5, lr}
    deaa:	4613      	mov	r3, r2
    deac:	e006      	b.n	debc <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    deae:	18cc      	adds	r4, r1, r3
    deb0:	1ad5      	subs	r5, r2, r3
    deb2:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    deb6:	1e5b      	subs	r3, r3, #1
    deb8:	5544      	strb	r4, [r0, r5]
    deba:	b2db      	uxtb	r3, r3
    debc:	2b00      	cmp	r3, #0
    debe:	d1f6      	bne.n	deae <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    dec0:	bd30      	pop	{r4, r5, pc}

0000dec2 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    dec2:	2300      	movs	r3, #0
    dec4:	6403      	str	r3, [r0, #64]	; 0x40
    dec6:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
    deca:	f240 2371 	movw	r3, #625	; 0x271
    dece:	435a      	muls	r2, r3
    ded0:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    ded4:	1e52      	subs	r2, r2, #1
    ded6:	fbb2 f1f1 	udiv	r1, r2, r1
    deda:	6441      	str	r1, [r0, #68]	; 0x44
    dedc:	4770      	bx	lr

0000dede <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    dede:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    dee2:	4607      	mov	r7, r0
    dee4:	4690      	mov	r8, r2
    dee6:	468b      	mov	fp, r1
    dee8:	2601      	movs	r6, #1
    deea:	4608      	mov	r0, r1
    deec:	f000 f9e5 	bl	e2ba <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>
    def0:	4682      	mov	sl, r0
    def2:	4658      	mov	r0, fp
    def4:	f000 f9e3 	bl	e2be <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>
    def8:	4681      	mov	r9, r0
    defa:	f7ff ff81 	bl	de00 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    defe:	4604      	mov	r4, r0
    df00:	4650      	mov	r0, sl
    df02:	f7ff ff7d 	bl	de00 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    df06:	4605      	mov	r5, r0
    df08:	ea54 0005 	orrs.w	r0, r4, r5
    df0c:	d100      	bne.n	df10 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    df0e:	2600      	movs	r6, #0
    df10:	f7f9 faac 	bl	746c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    df14:	ea10 0f09 	tst.w	r0, r9
    df18:	d100      	bne.n	df1c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    df1a:	2400      	movs	r4, #0
    df1c:	f7f9 faa6 	bl	746c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    df20:	ea10 0f0a 	tst.w	r0, sl
    df24:	d100      	bne.n	df28 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    df26:	2500      	movs	r5, #0
    df28:	f897 006a 	ldrb.w	r0, [r7, #106]	; 0x6a
    df2c:	42a0      	cmp	r0, r4
    df2e:	d100      	bne.n	df32 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    df30:	2400      	movs	r4, #0
    df32:	f888 4000 	strb.w	r4, [r8]
    df36:	f897 006b 	ldrb.w	r0, [r7, #107]	; 0x6b
    df3a:	42a8      	cmp	r0, r5
    df3c:	d100      	bne.n	df40 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    df3e:	2500      	movs	r5, #0
    df40:	f888 5001 	strb.w	r5, [r8, #1]
    df44:	b974      	cbnz	r4, df64 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    df46:	b96d      	cbnz	r5, df64 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    df48:	4658      	mov	r0, fp
    df4a:	f000 f9a4 	bl	e296 <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>
    df4e:	f8b7 1094 	ldrh.w	r1, [r7, #148]	; 0x94
    df52:	1a40      	subs	r0, r0, r1
    df54:	b200      	sxth	r0, r0
    df56:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    df5a:	4288      	cmp	r0, r1
    df5c:	dc01      	bgt.n	df62 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    df5e:	2800      	cmp	r0, #0
    df60:	dc00      	bgt.n	df64 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    df62:	2600      	movs	r6, #0
    df64:	4630      	mov	r0, r6
    df66:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000df6a <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    df6a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    df6e:	4348      	muls	r0, r1
    df70:	4770      	bx	lr

0000df72 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    df72:	f240 2171 	movw	r1, #625	; 0x271
    df76:	fb10 f001 	smulbb	r0, r0, r1
    df7a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    df7e:	ea01 0040 	and.w	r0, r1, r0, lsl #1
    df82:	4770      	bx	lr

0000df84 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    df84:	b510      	push	{r4, lr}
    df86:	2300      	movs	r3, #0
    df88:	461a      	mov	r2, r3
    df8a:	e003      	b.n	df94 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    df8c:	5c84      	ldrb	r4, [r0, r2]
    df8e:	4323      	orrs	r3, r4
    df90:	1c52      	adds	r2, r2, #1
    df92:	b2d2      	uxtb	r2, r2
    df94:	428a      	cmp	r2, r1
    df96:	d3f9      	bcc.n	df8c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    df98:	b10b      	cbz	r3, df9e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    df9a:	2000      	movs	r0, #0
    df9c:	bd10      	pop	{r4, pc}
    df9e:	2001      	movs	r0, #1
    dfa0:	bd10      	pop	{r4, pc}

0000dfa2 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q>:
    dfa2:	2100      	movs	r1, #0
    dfa4:	4608      	mov	r0, r1
    dfa6:	f7f4 bc65 	b.w	2874 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA>
    dfaa:	4401      	add	r1, r0
    dfac:	2914      	cmp	r1, #20
    dfae:	dd01      	ble.n	dfb4 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x12>
    dfb0:	2014      	movs	r0, #20
    dfb2:	4770      	bx	lr
    dfb4:	f06f 007e 	mvn.w	r0, #126	; 0x7e
    dfb8:	4281      	cmp	r1, r0
    dfba:	dbfa      	blt.n	dfb2 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x10>
    dfbc:	b248      	sxtb	r0, r1
    dfbe:	4770      	bx	lr

0000dfc0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    dfc0:	b570      	push	{r4, r5, r6, lr}
    dfc2:	4605      	mov	r5, r0
    dfc4:	ea81 4011 	eor.w	r0, r1, r1, lsr #16
    dfc8:	b286      	uxth	r6, r0
    dfca:	4610      	mov	r0, r2
    dfcc:	7aec      	ldrb	r4, [r5, #11]
    dfce:	4631      	mov	r1, r6
    dfd0:	f000 f863 	bl	e09a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x52>
    dfd4:	4070      	eors	r0, r6
    dfd6:	2125      	movs	r1, #37	; 0x25
    dfd8:	fbb0 f2f1 	udiv	r2, r0, r1
    dfdc:	fb01 0112 	mls	r1, r1, r2, r0
    dfe0:	eb05 02d1 	add.w	r2, r5, r1, lsr #3
    dfe4:	f001 0307 	and.w	r3, r1, #7
    dfe8:	7852      	ldrb	r2, [r2, #1]
    dfea:	2601      	movs	r6, #1
    dfec:	409e      	lsls	r6, r3
    dfee:	4232      	tst	r2, r6
    dff0:	d001      	beq.n	dff6 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x36>
    dff2:	4608      	mov	r0, r1
    dff4:	bd70      	pop	{r4, r5, r6, pc}
    dff6:	4344      	muls	r4, r0
    dff8:	0c21      	lsrs	r1, r4, #16
    dffa:	4628      	mov	r0, r5
    dffc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e000:	f7f4 bc86 	b.w	2910 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x9c>

0000e004 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    e004:	b510      	push	{r4, lr}
    e006:	4604      	mov	r4, r0
    e008:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    e00c:	b108      	cbz	r0, e012 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    e00e:	2825      	cmp	r0, #37	; 0x25
    e010:	d901      	bls.n	e016 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    e012:	2012      	movs	r0, #18
    e014:	bd10      	pop	{r4, pc}
    e016:	b132      	cbz	r2, e026 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>
    e018:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
    e01c:	b128      	cbz	r0, e02a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x26>
    e01e:	2801      	cmp	r0, #1
    e020:	d009      	beq.n	e036 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x32>
    e022:	201f      	movs	r0, #31
    e024:	bd10      	pop	{r4, pc}
    e026:	2000      	movs	r0, #0
    e028:	bd10      	pop	{r4, pc}
    e02a:	4620      	mov	r0, r4
    e02c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e030:	4611      	mov	r1, r2
    e032:	f7f4 bc25 	b.w	2880 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xc>
    e036:	8aa2      	ldrh	r2, [r4, #20]
    e038:	6949      	ldr	r1, [r1, #20]
    e03a:	f104 0025 	add.w	r0, r4, #37	; 0x25
    e03e:	f7ff ffbf 	bl	dfc0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    e042:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    e046:	e7ee      	b.n	e026 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>

0000e048 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    e048:	b570      	push	{r4, r5, r6, lr}
    e04a:	4604      	mov	r4, r0
    e04c:	1c40      	adds	r0, r0, #1
    e04e:	4288      	cmp	r0, r1
    e050:	d004      	beq.n	e05c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x14>
    e052:	6808      	ldr	r0, [r1, #0]
    e054:	f8c4 0001 	str.w	r0, [r4, #1]
    e058:	7908      	ldrb	r0, [r1, #4]
    e05a:	7160      	strb	r0, [r4, #5]
    e05c:	7960      	ldrb	r0, [r4, #5]
    e05e:	f000 001f 	and.w	r0, r0, #31
    e062:	7160      	strb	r0, [r4, #5]
    e064:	2000      	movs	r0, #0
    e066:	72e0      	strb	r0, [r4, #11]
    e068:	4605      	mov	r5, r0
    e06a:	1966      	adds	r6, r4, r5
    e06c:	7870      	ldrb	r0, [r6, #1]
    e06e:	f000 faed 	bl	e64c <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    e072:	71b0      	strb	r0, [r6, #6]
    e074:	7ae1      	ldrb	r1, [r4, #11]
    e076:	1c6d      	adds	r5, r5, #1
    e078:	4408      	add	r0, r1
    e07a:	b2ed      	uxtb	r5, r5
    e07c:	72e0      	strb	r0, [r4, #11]
    e07e:	2d05      	cmp	r5, #5
    e080:	d3f3      	bcc.n	e06a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x22>
    e082:	bd70      	pop	{r4, r5, r6, pc}
    e084:	b2c1      	uxtb	r1, r0
    e086:	fa91 f1a1 	rbit	r1, r1
    e08a:	0a00      	lsrs	r0, r0, #8
    e08c:	0e09      	lsrs	r1, r1, #24
    e08e:	fa90 f0a0 	rbit	r0, r0
    e092:	0e00      	lsrs	r0, r0, #24
    e094:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    e098:	4770      	bx	lr
    e09a:	b570      	push	{r4, r5, r6, lr}
    e09c:	460d      	mov	r5, r1
    e09e:	4048      	eors	r0, r1
    e0a0:	2400      	movs	r4, #0
    e0a2:	f7ff ffef 	bl	e084 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x3c>
    e0a6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
    e0aa:	1c64      	adds	r4, r4, #1
    e0ac:	4428      	add	r0, r5
    e0ae:	b2e4      	uxtb	r4, r4
    e0b0:	b280      	uxth	r0, r0
    e0b2:	2c03      	cmp	r4, #3
    e0b4:	d3f5      	bcc.n	e0a2 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x5a>
    e0b6:	bd70      	pop	{r4, r5, r6, pc}

0000e0b8 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>:
    e0b8:	7802      	ldrb	r2, [r0, #0]
    e0ba:	f002 020f 	and.w	r2, r2, #15
    e0be:	2a03      	cmp	r2, #3
    e0c0:	d003      	beq.n	e0ca <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x12>
    e0c2:	2a05      	cmp	r2, #5
    e0c4:	d104      	bne.n	e0d0 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x18>
    e0c6:	f000 b92e 	b.w	e326 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4>
    e0ca:	7840      	ldrb	r0, [r0, #1]
    e0cc:	280c      	cmp	r0, #12
    e0ce:	d001      	beq.n	e0d4 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x1c>
    e0d0:	2000      	movs	r0, #0
    e0d2:	4770      	bx	lr
    e0d4:	2001      	movs	r0, #1
    e0d6:	4770      	bx	lr

0000e0d8 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>:
    e0d8:	b570      	push	{r4, r5, r6, lr}
    e0da:	4614      	mov	r4, r2
    e0dc:	4605      	mov	r5, r0
    e0de:	2a1f      	cmp	r2, #31
    e0e0:	d903      	bls.n	e0ea <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA+0x12>
    e0e2:	21ee      	movs	r1, #238	; 0xee
    e0e4:	202a      	movs	r0, #42	; 0x2a
    e0e6:	f7f2 fc63 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e0ea:	f105 0009 	add.w	r0, r5, #9
    e0ee:	f002 feca 	bl	10e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e0f2:	1da4      	adds	r4, r4, #6
    e0f4:	706c      	strb	r4, [r5, #1]
    e0f6:	bd70      	pop	{r4, r5, r6, pc}

0000e0f8 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>:
    e0f8:	b510      	push	{r4, lr}
    e0fa:	7802      	ldrb	r2, [r0, #0]
    e0fc:	f001 030f 	and.w	r3, r1, #15
    e100:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    e104:	431a      	orrs	r2, r3
    e106:	7002      	strb	r2, [r0, #0]
    e108:	2907      	cmp	r1, #7
    e10a:	d20c      	bcs.n	e126 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2e>
    e10c:	e8df f001 	tbb	[pc, r1]
    e110:	06040604 	.word	0x06040604
    e114:	00040804 	.word	0x00040804
    e118:	2106      	movs	r1, #6
    e11a:	e002      	b.n	e122 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    e11c:	210c      	movs	r1, #12
    e11e:	e000      	b.n	e122 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    e120:	2122      	movs	r1, #34	; 0x22
    e122:	7041      	strb	r1, [r0, #1]
    e124:	bd10      	pop	{r4, pc}
    e126:	21a8      	movs	r1, #168	; 0xa8
    e128:	202a      	movs	r0, #42	; 0x2a
    e12a:	f7f2 fc41 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e12e <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>:
    e12e:	680a      	ldr	r2, [r1, #0]
    e130:	f840 2f09 	str.w	r2, [r0, #9]!
    e134:	8889      	ldrh	r1, [r1, #4]
    e136:	8081      	strh	r1, [r0, #4]
    e138:	4770      	bx	lr

0000e13a <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>:
    e13a:	7802      	ldrb	r2, [r0, #0]
    e13c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    e140:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    e144:	7002      	strb	r2, [r0, #0]
    e146:	4770      	bx	lr

0000e148 <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>:
    e148:	680a      	ldr	r2, [r1, #0]
    e14a:	f840 2f03 	str.w	r2, [r0, #3]!
    e14e:	8889      	ldrh	r1, [r1, #4]
    e150:	8081      	strh	r1, [r0, #4]
    e152:	4770      	bx	lr

0000e154 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>:
    e154:	7802      	ldrb	r2, [r0, #0]
    e156:	2340      	movs	r3, #64	; 0x40
    e158:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    e15c:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    e160:	430a      	orrs	r2, r1
    e162:	7002      	strb	r2, [r0, #0]
    e164:	4770      	bx	lr

0000e166 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>:
    e166:	b570      	push	{r4, r5, r6, lr}
    e168:	4614      	mov	r4, r2
    e16a:	4605      	mov	r5, r0
    e16c:	2a1f      	cmp	r2, #31
    e16e:	d904      	bls.n	e17a <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x14>
    e170:	f44f 7188 	mov.w	r1, #272	; 0x110
    e174:	202a      	movs	r0, #42	; 0x2a
    e176:	f7f2 fc1b 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e17a:	f105 0009 	add.w	r0, r5, #9
    e17e:	f002 fe82 	bl	10e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e182:	1da4      	adds	r4, r4, #6
    e184:	706c      	strb	r4, [r5, #1]
    e186:	bd70      	pop	{r4, r5, r6, pc}

0000e188 <sym_7VZW6MQYCHJNYQ6F4AFCRRJSPXBVUQDDS4RU32Y>:
    e188:	6842      	ldr	r2, [r0, #4]
    e18a:	600a      	str	r2, [r1, #0]
    e18c:	7a00      	ldrb	r0, [r0, #8]
    e18e:	7108      	strb	r0, [r1, #4]
    e190:	4770      	bx	lr

0000e192 <sym_E5LV7NLJGDBOOHT3XI7LZP4SJ6B3AVX5ZM7II3A>:
    e192:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    e196:	4770      	bx	lr

0000e198 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A>:
    e198:	b570      	push	{r4, r5, r6, lr}
    e19a:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    e19e:	f8b0 4009 	ldrh.w	r4, [r0, #9]
    e1a2:	f830 5f05 	ldrh.w	r5, [r0, #5]!
    e1a6:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    e1aa:	88c0      	ldrh	r0, [r0, #6]
    e1ac:	b131      	cbz	r1, e1bc <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x24>
    e1ae:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    e1b2:	d903      	bls.n	e1bc <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x24>
    e1b4:	f640 5107 	movw	r1, #3335	; 0xd07
    e1b8:	428a      	cmp	r2, r1
    e1ba:	d90b      	bls.n	e1d4 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x3c>
    e1bc:	1f91      	subs	r1, r2, #6
    e1be:	f640 467a 	movw	r6, #3194	; 0xc7a
    e1c2:	42b1      	cmp	r1, r6
    e1c4:	d810      	bhi.n	e1e8 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e1c6:	b17b      	cbz	r3, e1e8 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e1c8:	2b08      	cmp	r3, #8
    e1ca:	d80d      	bhi.n	e1e8 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e1cc:	4293      	cmp	r3, r2
    e1ce:	d20b      	bcs.n	e1e8 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e1d0:	4295      	cmp	r5, r2
    e1d2:	d809      	bhi.n	e1e8 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e1d4:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    e1d8:	d206      	bcs.n	e1e8 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e1da:	f640 4176 	movw	r1, #3190	; 0xc76
    e1de:	380a      	subs	r0, #10
    e1e0:	4288      	cmp	r0, r1
    e1e2:	d801      	bhi.n	e1e8 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e1e4:	2001      	movs	r0, #1
    e1e6:	bd70      	pop	{r4, r5, r6, pc}
    e1e8:	2000      	movs	r0, #0
    e1ea:	bd70      	pop	{r4, r5, r6, pc}

0000e1ec <sym_GII4UQLGDHD6D5DSTGUIOYZXEEJFVPTQQUWUNII>:
    e1ec:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    e1f0:	4770      	bx	lr

0000e1f2 <sym_MD56XYITEHSLIFIRQT26SWOCASBX33AYW4XGGWY>:
    e1f2:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    e1f6:	4770      	bx	lr

0000e1f8 <sym_EKDQHRHOWISU7QCQSGE4X3J4VBX22VVETALDGWI>:
    e1f8:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    e1fc:	4770      	bx	lr

0000e1fe <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>:
    e1fe:	b510      	push	{r4, lr}
    e200:	29fb      	cmp	r1, #251	; 0xfb
    e202:	d904      	bls.n	e20e <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI+0x10>
    e204:	f240 61a1 	movw	r1, #1697	; 0x6a1
    e208:	202a      	movs	r0, #42	; 0x2a
    e20a:	f7f2 fbd1 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e20e:	7041      	strb	r1, [r0, #1]
    e210:	bd10      	pop	{r4, pc}

0000e212 <sym_FIJW4TR7AWR6OLWCHL3HTVQSVWXOS6T6XISXCQQ>:
    e212:	8980      	ldrh	r0, [r0, #12]
    e214:	8008      	strh	r0, [r1, #0]
    e216:	4770      	bx	lr

0000e218 <sym_NILDTLWW7AYBRN5PYE72ILWSBBVUBN4Y5FF3XQQ>:
    e218:	f8d0 0016 	ldr.w	r0, [r0, #22]
    e21c:	6008      	str	r0, [r1, #0]
    e21e:	4770      	bx	lr

0000e220 <sym_7LJR6S4GQKSUMWIUG2FRZAKXFD3RUBQ6FOHJMZQ>:
    e220:	6842      	ldr	r2, [r0, #4]
    e222:	600a      	str	r2, [r1, #0]
    e224:	6880      	ldr	r0, [r0, #8]
    e226:	6048      	str	r0, [r1, #4]
    e228:	4770      	bx	lr

0000e22a <sym_3BQBYKVQGWCA6VF5GDIUVXGAPLPPXRSSEFO5TXA>:
    e22a:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    e22e:	600a      	str	r2, [r1, #0]
    e230:	6840      	ldr	r0, [r0, #4]
    e232:	6048      	str	r0, [r1, #4]
    e234:	4770      	bx	lr

0000e236 <sym_RGBMWS6T65LAWR3HOVV5354MKQCATDBBY34XWQA>:
    e236:	6809      	ldr	r1, [r1, #0]
    e238:	60c1      	str	r1, [r0, #12]
    e23a:	4770      	bx	lr

0000e23c <sym_5WHAN4NH6PZY7VV5KTN53CABJRWXR3RJHHTA7KA>:
    e23c:	680a      	ldr	r2, [r1, #0]
    e23e:	6042      	str	r2, [r0, #4]
    e240:	6849      	ldr	r1, [r1, #4]
    e242:	6081      	str	r1, [r0, #8]
    e244:	4770      	bx	lr

0000e246 <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>:
    e246:	7800      	ldrb	r0, [r0, #0]
    e248:	f000 0003 	and.w	r0, r0, #3
    e24c:	4770      	bx	lr

0000e24e <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>:
    e24e:	8880      	ldrh	r0, [r0, #4]
    e250:	4770      	bx	lr

0000e252 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>:
    e252:	88c0      	ldrh	r0, [r0, #6]
    e254:	4770      	bx	lr

0000e256 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>:
    e256:	8900      	ldrh	r0, [r0, #8]
    e258:	4770      	bx	lr

0000e25a <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>:
    e25a:	8940      	ldrh	r0, [r0, #10]
    e25c:	4770      	bx	lr

0000e25e <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>:
    e25e:	8901      	ldrh	r1, [r0, #8]
    e260:	291b      	cmp	r1, #27
    e262:	d30c      	bcc.n	e27e <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e264:	8941      	ldrh	r1, [r0, #10]
    e266:	f44f 72a4 	mov.w	r2, #328	; 0x148
    e26a:	4291      	cmp	r1, r2
    e26c:	d307      	bcc.n	e27e <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e26e:	8881      	ldrh	r1, [r0, #4]
    e270:	291b      	cmp	r1, #27
    e272:	d304      	bcc.n	e27e <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e274:	88c0      	ldrh	r0, [r0, #6]
    e276:	4290      	cmp	r0, r2
    e278:	d301      	bcc.n	e27e <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e27a:	2001      	movs	r0, #1
    e27c:	4770      	bx	lr
    e27e:	2000      	movs	r0, #0
    e280:	4770      	bx	lr

0000e282 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>:
    e282:	7901      	ldrb	r1, [r0, #4]
    e284:	0749      	lsls	r1, r1, #29
    e286:	d004      	beq.n	e292 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    e288:	7940      	ldrb	r0, [r0, #5]
    e28a:	0740      	lsls	r0, r0, #29
    e28c:	d001      	beq.n	e292 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    e28e:	2001      	movs	r0, #1
    e290:	4770      	bx	lr
    e292:	2000      	movs	r0, #0
    e294:	4770      	bx	lr

0000e296 <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>:
    e296:	88c0      	ldrh	r0, [r0, #6]
    e298:	4770      	bx	lr

0000e29a <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ>:
    e29a:	7901      	ldrb	r1, [r0, #4]
    e29c:	7940      	ldrb	r0, [r0, #5]
    e29e:	f001 0107 	and.w	r1, r1, #7
    e2a2:	1e4a      	subs	r2, r1, #1
    e2a4:	f000 0007 	and.w	r0, r0, #7
    e2a8:	4011      	ands	r1, r2
    e2aa:	1e42      	subs	r2, r0, #1
    e2ac:	4010      	ands	r0, r2
    e2ae:	4301      	orrs	r1, r0
    e2b0:	d001      	beq.n	e2b6 <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ+0x1c>
    e2b2:	2000      	movs	r0, #0
    e2b4:	4770      	bx	lr
    e2b6:	2001      	movs	r0, #1
    e2b8:	4770      	bx	lr

0000e2ba <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>:
    e2ba:	7900      	ldrb	r0, [r0, #4]
    e2bc:	4770      	bx	lr

0000e2be <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>:
    e2be:	7940      	ldrb	r0, [r0, #5]
    e2c0:	4770      	bx	lr

0000e2c2 <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>:
    e2c2:	7900      	ldrb	r0, [r0, #4]
    e2c4:	4770      	bx	lr

0000e2c6 <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>:
    e2c6:	7101      	strb	r1, [r0, #4]
    e2c8:	4770      	bx	lr

0000e2ca <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>:
    e2ca:	7940      	ldrb	r0, [r0, #5]
    e2cc:	4770      	bx	lr

0000e2ce <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>:
    e2ce:	7141      	strb	r1, [r0, #5]
    e2d0:	4770      	bx	lr

0000e2d2 <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA>:
    e2d2:	b510      	push	{r4, lr}
    e2d4:	2a1b      	cmp	r2, #27
    e2d6:	d904      	bls.n	e2e2 <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA+0x10>
    e2d8:	f240 417e 	movw	r1, #1150	; 0x47e
    e2dc:	202a      	movs	r0, #42	; 0x2a
    e2de:	f7f2 fb67 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e2e2:	7042      	strb	r2, [r0, #1]
    e2e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e2e8:	1cc0      	adds	r0, r0, #3
    e2ea:	f002 bdcc 	b.w	10e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000e2ee <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>:
    e2ee:	7802      	ldrb	r2, [r0, #0]
    e2f0:	f001 0103 	and.w	r1, r1, #3
    e2f4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    e2f8:	430a      	orrs	r2, r1
    e2fa:	7002      	strb	r2, [r0, #0]
    e2fc:	4770      	bx	lr

0000e2fe <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>:
    e2fe:	7101      	strb	r1, [r0, #4]
    e300:	0a09      	lsrs	r1, r1, #8
    e302:	7141      	strb	r1, [r0, #5]
    e304:	4770      	bx	lr

0000e306 <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>:
    e306:	7181      	strb	r1, [r0, #6]
    e308:	0a09      	lsrs	r1, r1, #8
    e30a:	71c1      	strb	r1, [r0, #7]
    e30c:	4770      	bx	lr

0000e30e <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>:
    e30e:	7201      	strb	r1, [r0, #8]
    e310:	0a09      	lsrs	r1, r1, #8
    e312:	7241      	strb	r1, [r0, #9]
    e314:	4770      	bx	lr

0000e316 <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>:
    e316:	7281      	strb	r1, [r0, #10]
    e318:	0a09      	lsrs	r1, r1, #8
    e31a:	72c1      	strb	r1, [r0, #11]
    e31c:	4770      	bx	lr

0000e31e <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>:
    e31e:	7900      	ldrb	r0, [r0, #4]
    e320:	4770      	bx	lr

0000e322 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>:
    e322:	7900      	ldrb	r0, [r0, #4]
    e324:	4770      	bx	lr
    e326:	b570      	push	{r4, r5, r6, lr}
    e328:	f8d0 201f 	ldr.w	r2, [r0, #31]
    e32c:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    e330:	f012 0fff 	tst.w	r2, #255	; 0xff
    e334:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    e338:	d108      	bne.n	e34c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    e33a:	f3c2 2407 	ubfx	r4, r2, #8, #8
    e33e:	b92c      	cbnz	r4, e34c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    e340:	f3c2 4407 	ubfx	r4, r2, #16, #8
    e344:	b914      	cbnz	r4, e34c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    e346:	0e12      	lsrs	r2, r2, #24
    e348:	d100      	bne.n	e34c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    e34a:	b34b      	cbz	r3, e3a0 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e34c:	7846      	ldrb	r6, [r0, #1]
    e34e:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    e352:	f8b0 401b 	ldrh.w	r4, [r0, #27]
    e356:	f8b0 5017 	ldrh.w	r5, [r0, #23]
    e35a:	7d83      	ldrb	r3, [r0, #22]
    e35c:	2e22      	cmp	r6, #34	; 0x22
    e35e:	d11f      	bne.n	e3a0 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e360:	b131      	cbz	r1, e370 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4e>
    e362:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    e366:	d903      	bls.n	e370 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4e>
    e368:	f640 5107 	movw	r1, #3335	; 0xd07
    e36c:	428a      	cmp	r2, r1
    e36e:	d90b      	bls.n	e388 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x66>
    e370:	1f91      	subs	r1, r2, #6
    e372:	f640 467a 	movw	r6, #3194	; 0xc7a
    e376:	42b1      	cmp	r1, r6
    e378:	d812      	bhi.n	e3a0 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e37a:	b18b      	cbz	r3, e3a0 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e37c:	2b08      	cmp	r3, #8
    e37e:	d80f      	bhi.n	e3a0 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e380:	4293      	cmp	r3, r2
    e382:	d20d      	bcs.n	e3a0 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e384:	4295      	cmp	r5, r2
    e386:	d80b      	bhi.n	e3a0 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e388:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    e38c:	d208      	bcs.n	e3a0 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e38e:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    e392:	f640 4176 	movw	r1, #3190	; 0xc76
    e396:	380a      	subs	r0, #10
    e398:	4288      	cmp	r0, r1
    e39a:	d801      	bhi.n	e3a0 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e39c:	2001      	movs	r0, #1
    e39e:	bd70      	pop	{r4, r5, r6, pc}
    e3a0:	2000      	movs	r0, #0
    e3a2:	bd70      	pop	{r4, r5, r6, pc}

0000e3a4 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    e3a4:	6841      	ldr	r1, [r0, #4]
    e3a6:	2200      	movs	r2, #0
    e3a8:	f891 322a 	ldrb.w	r3, [r1, #554]	; 0x22a
    e3ac:	2b00      	cmp	r3, #0
    e3ae:	d004      	beq.n	e3ba <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    e3b0:	f881 222a 	strb.w	r2, [r1, #554]	; 0x22a
    e3b4:	6840      	ldr	r0, [r0, #4]
    e3b6:	f000 bdfc 	b.w	efb2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    e3ba:	4770      	bx	lr

0000e3bc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    e3bc:	b510      	push	{r4, lr}
    e3be:	7a01      	ldrb	r1, [r0, #8]
    e3c0:	b119      	cbz	r1, e3ca <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    e3c2:	2901      	cmp	r1, #1
    e3c4:	d006      	beq.n	e3d4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    e3c6:	2000      	movs	r0, #0
    e3c8:	bd10      	pop	{r4, pc}
    e3ca:	88c2      	ldrh	r2, [r0, #6]
    e3cc:	6803      	ldr	r3, [r0, #0]
    e3ce:	8880      	ldrh	r0, [r0, #4]
    e3d0:	2102      	movs	r1, #2
    e3d2:	e003      	b.n	e3dc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    e3d4:	88c2      	ldrh	r2, [r0, #6]
    e3d6:	6803      	ldr	r3, [r0, #0]
    e3d8:	8880      	ldrh	r0, [r0, #4]
    e3da:	2101      	movs	r1, #1
    e3dc:	f7f4 fb02 	bl	29e4 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x14>
    e3e0:	b908      	cbnz	r0, e3e6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    e3e2:	f7f4 fb4f 	bl	2a84 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    e3e6:	2001      	movs	r0, #1
    e3e8:	bd10      	pop	{r4, pc}

0000e3ea <sym_RH6FZQRBS4UKFN4MYJSECW7EJMU5464YS3XX4EQ>:
    e3ea:	2203      	movs	r2, #3
    e3ec:	f000 b806 	b.w	e3fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>

0000e3f0 <sym_43BYC3K4M44JBPOX4EUJM44GYCCY2C3C4SYEF6I>:
    e3f0:	2203      	movs	r2, #3
    e3f2:	f000 b817 	b.w	e424 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>

0000e3f6 <sym_OHZGE3PRU72NL3TJSLCEUVROHETUDPWEUAQ7GMA>:
    e3f6:	2204      	movs	r2, #4
    e3f8:	f000 b814 	b.w	e424 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>

0000e3fc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>:
    e3fc:	b508      	push	{r3, lr}
    e3fe:	7a03      	ldrb	r3, [r0, #8]
    e400:	f88d 3000 	strb.w	r3, [sp]
    e404:	9b00      	ldr	r3, [sp, #0]
    e406:	9300      	str	r3, [sp, #0]
    e408:	f89d 3000 	ldrb.w	r3, [sp]
    e40c:	b123      	cbz	r3, e418 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY+0x1c>
    e40e:	f240 21c2 	movw	r1, #706	; 0x2c2
    e412:	2010      	movs	r0, #16
    e414:	f7f2 facc 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e418:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    e41c:	f7f4 bca4 	b.w	2d68 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x11c>

0000e420 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    e420:	f7f4 bcd0 	b.w	2dc4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x178>

0000e424 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>:
    e424:	7a03      	ldrb	r3, [r0, #8]
    e426:	b082      	sub	sp, #8
    e428:	f88d 3000 	strb.w	r3, [sp]
    e42c:	9b00      	ldr	r3, [sp, #0]
    e42e:	9300      	str	r3, [sp, #0]
    e430:	f89d 3000 	ldrb.w	r3, [sp]
    e434:	b113      	cbz	r3, e43c <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY+0x18>
    e436:	7202      	strb	r2, [r0, #8]
    e438:	b002      	add	sp, #8
    e43a:	4770      	bx	lr
    e43c:	b002      	add	sp, #8
    e43e:	f7f4 bc93 	b.w	2d68 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x11c>
    e442:	2000      	movs	r0, #0
    e444:	7048      	strb	r0, [r1, #1]
    e446:	2003      	movs	r0, #3
    e448:	7008      	strb	r0, [r1, #0]
    e44a:	2001      	movs	r0, #1
    e44c:	7108      	strb	r0, [r1, #4]
    e44e:	4770      	bx	lr

0000e450 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    e450:	b510      	push	{r4, lr}
    e452:	888c      	ldrh	r4, [r1, #4]
    e454:	890a      	ldrh	r2, [r1, #8]
    e456:	884b      	ldrh	r3, [r1, #2]
    e458:	88c9      	ldrh	r1, [r1, #6]
    e45a:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    e45e:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    e462:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    e466:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    e46a:	bd10      	pop	{r4, pc}

0000e46c <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    e46c:	b570      	push	{r4, r5, r6, lr}
    e46e:	4615      	mov	r5, r2
    e470:	460c      	mov	r4, r1
    e472:	f000 f8b8 	bl	e5e6 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa8>
    e476:	3096      	adds	r0, #150	; 0x96
    e478:	4428      	add	r0, r5
    e47a:	42a0      	cmp	r0, r4
    e47c:	d801      	bhi.n	e482 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    e47e:	1a20      	subs	r0, r4, r0
    e480:	bd70      	pop	{r4, r5, r6, pc}
    e482:	2000      	movs	r0, #0
    e484:	bd70      	pop	{r4, r5, r6, pc}

0000e486 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    e486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e48a:	4604      	mov	r4, r0
    e48c:	f000 f87f 	bl	e58e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x50>
    e490:	4680      	mov	r8, r0
    e492:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    e496:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    e49a:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    e49c:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    e49e:	4285      	cmp	r5, r0
    e4a0:	d300      	bcc.n	e4a4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x1e>
    e4a2:	4605      	mov	r5, r0
    e4a4:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    e4a8:	4620      	mov	r0, r4
    e4aa:	f000 f868 	bl	e57e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x40>
    e4ae:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    e4b2:	2902      	cmp	r1, #2
    e4b4:	d108      	bne.n	e4c8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x42>
    e4b6:	42af      	cmp	r7, r5
    e4b8:	d200      	bcs.n	e4bc <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x36>
    e4ba:	463d      	mov	r5, r7
    e4bc:	4286      	cmp	r6, r0
    e4be:	d200      	bcs.n	e4c2 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3c>
    e4c0:	4630      	mov	r0, r6
    e4c2:	2100      	movs	r1, #0
    e4c4:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    e4c8:	86a5      	strh	r5, [r4, #52]	; 0x34
    e4ca:	8720      	strh	r0, [r4, #56]	; 0x38
    e4cc:	42bd      	cmp	r5, r7
    e4ce:	d101      	bne.n	e4d4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4e>
    e4d0:	42b0      	cmp	r0, r6
    e4d2:	d001      	beq.n	e4d8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    e4d4:	2001      	movs	r0, #1
    e4d6:	e000      	b.n	e4da <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x54>
    e4d8:	2000      	movs	r0, #0
    e4da:	ea40 0008 	orr.w	r0, r0, r8
    e4de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e4e2 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    e4e2:	221b      	movs	r2, #27
    e4e4:	8402      	strh	r2, [r0, #32]
    e4e6:	8382      	strh	r2, [r0, #28]
    e4e8:	82c2      	strh	r2, [r0, #22]
    e4ea:	8282      	strh	r2, [r0, #20]
    e4ec:	8142      	strh	r2, [r0, #10]
    e4ee:	8202      	strh	r2, [r0, #16]
    e4f0:	8102      	strh	r2, [r0, #8]
    e4f2:	8542      	strh	r2, [r0, #42]	; 0x2a
    e4f4:	8582      	strh	r2, [r0, #44]	; 0x2c
    e4f6:	8482      	strh	r2, [r0, #36]	; 0x24
    e4f8:	2900      	cmp	r1, #0
    e4fa:	d10a      	bne.n	e512 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    e4fc:	f44f 71a4 	mov.w	r1, #328	; 0x148
    e500:	8441      	strh	r1, [r0, #34]	; 0x22
    e502:	83c1      	strh	r1, [r0, #30]
    e504:	8341      	strh	r1, [r0, #26]
    e506:	8301      	strh	r1, [r0, #24]
    e508:	81c1      	strh	r1, [r0, #14]
    e50a:	8241      	strh	r1, [r0, #18]
    e50c:	8181      	strh	r1, [r0, #12]
    e50e:	85c1      	strh	r1, [r0, #46]	; 0x2e
    e510:	8601      	strh	r1, [r0, #48]	; 0x30
    e512:	4770      	bx	lr

0000e514 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    e514:	6800      	ldr	r0, [r0, #0]
    e516:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    e51a:	4290      	cmp	r0, r2
    e51c:	d903      	bls.n	e526 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    e51e:	1a40      	subs	r0, r0, r1
    e520:	389c      	subs	r0, #156	; 0x9c
    e522:	0840      	lsrs	r0, r0, #1
    e524:	4770      	bx	lr
    e526:	2000      	movs	r0, #0
    e528:	4770      	bx	lr

0000e52a <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>:
    e52a:	6840      	ldr	r0, [r0, #4]
    e52c:	4770      	bx	lr

0000e52e <sym_DGN3THKILL676ISUGG6LI5PGTHVDBLTDPNXUCAA>:
    e52e:	b570      	push	{r4, r5, r6, lr}
    e530:	460c      	mov	r4, r1
    e532:	4605      	mov	r5, r0
    e534:	f000 f857 	bl	e5e6 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa8>
    e538:	4420      	add	r0, r4
    e53a:	6328      	str	r0, [r5, #48]	; 0x30
    e53c:	bd70      	pop	{r4, r5, r6, pc}

0000e53e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    e53e:	b510      	push	{r4, lr}
    e540:	9c02      	ldr	r4, [sp, #8]
    e542:	8281      	strh	r1, [r0, #20]
    e544:	82c2      	strh	r2, [r0, #22]
    e546:	8303      	strh	r3, [r0, #24]
    e548:	8344      	strh	r4, [r0, #26]
    e54a:	bd10      	pop	{r4, pc}
    e54c:	1d00      	adds	r0, r0, #4
    e54e:	b510      	push	{r4, lr}
    e550:	b280      	uxth	r0, r0
    e552:	2901      	cmp	r1, #1
    e554:	d006      	beq.n	e564 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x26>
    e556:	2902      	cmp	r1, #2
    e558:	d007      	beq.n	e56a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x2c>
    e55a:	f240 2123 	movw	r1, #547	; 0x223
    e55e:	2006      	movs	r0, #6
    e560:	f7f2 fa26 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e564:	00c0      	lsls	r0, r0, #3
    e566:	3050      	adds	r0, #80	; 0x50
    e568:	e001      	b.n	e56e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x30>
    e56a:	0080      	lsls	r0, r0, #2
    e56c:	302c      	adds	r0, #44	; 0x2c
    e56e:	b280      	uxth	r0, r0
    e570:	bd10      	pop	{r4, pc}
    e572:	8c41      	ldrh	r1, [r0, #34]	; 0x22
    e574:	8b00      	ldrh	r0, [r0, #24]
    e576:	4281      	cmp	r1, r0
    e578:	d200      	bcs.n	e57c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3e>
    e57a:	4608      	mov	r0, r1
    e57c:	4770      	bx	lr
    e57e:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    e582:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    e586:	4281      	cmp	r1, r0
    e588:	d200      	bcs.n	e58c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4e>
    e58a:	4608      	mov	r0, r1
    e58c:	4770      	bx	lr
    e58e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e592:	4606      	mov	r6, r0
    e594:	f8b0 9036 	ldrh.w	r9, [r0, #54]	; 0x36
    e598:	f8b0 803a 	ldrh.w	r8, [r0, #58]	; 0x3a
    e59c:	f8b0 004c 	ldrh.w	r0, [r0, #76]	; 0x4c
    e5a0:	f8b6 4040 	ldrh.w	r4, [r6, #64]	; 0x40
    e5a4:	42a0      	cmp	r0, r4
    e5a6:	d200      	bcs.n	e5aa <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x6c>
    e5a8:	4604      	mov	r4, r0
    e5aa:	f106 002c 	add.w	r0, r6, #44	; 0x2c
    e5ae:	4605      	mov	r5, r0
    e5b0:	f7ff ffdf 	bl	e572 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x34>
    e5b4:	4607      	mov	r7, r0
    e5b6:	4628      	mov	r0, r5
    e5b8:	f7ff ffdb 	bl	e572 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x34>
    e5bc:	816c      	strh	r4, [r5, #10]
    e5be:	81ef      	strh	r7, [r5, #14]
    e5c0:	8fb1      	ldrh	r1, [r6, #60]	; 0x3c
    e5c2:	8ff2      	ldrh	r2, [r6, #62]	; 0x3e
    e5c4:	42a1      	cmp	r1, r4
    e5c6:	d200      	bcs.n	e5ca <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x8c>
    e5c8:	4621      	mov	r1, r4
    e5ca:	4282      	cmp	r2, r0
    e5cc:	d300      	bcc.n	e5d0 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x92>
    e5ce:	4610      	mov	r0, r2
    e5d0:	8229      	strh	r1, [r5, #16]
    e5d2:	8268      	strh	r0, [r5, #18]
    e5d4:	454c      	cmp	r4, r9
    e5d6:	d101      	bne.n	e5dc <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x9e>
    e5d8:	4547      	cmp	r7, r8
    e5da:	d002      	beq.n	e5e2 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa4>
    e5dc:	2001      	movs	r0, #1
    e5de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e5e2:	2000      	movs	r0, #0
    e5e4:	e7fb      	b.n	e5de <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa0>
    e5e6:	2196      	movs	r1, #150	; 0x96
    e5e8:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    e5ec:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    e5f0:	f000 b800 	b.w	e5f4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xb6>
    e5f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e5f8:	460d      	mov	r5, r1
    e5fa:	4606      	mov	r6, r0
    e5fc:	4698      	mov	r8, r3
    e5fe:	4617      	mov	r7, r2
    e600:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    e602:	4611      	mov	r1, r2
    e604:	f7ff ffa2 	bl	e54c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
    e608:	4604      	mov	r4, r0
    e60a:	4639      	mov	r1, r7
    e60c:	4630      	mov	r0, r6
    e60e:	f7ff ffb6 	bl	e57e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x40>
    e612:	42a0      	cmp	r0, r4
    e614:	d200      	bcs.n	e618 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xda>
    e616:	4604      	mov	r4, r0
    e618:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    e61a:	4641      	mov	r1, r8
    e61c:	f7ff ff96 	bl	e54c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
    e620:	8ff1      	ldrh	r1, [r6, #62]	; 0x3e
    e622:	4281      	cmp	r1, r0
    e624:	d200      	bcs.n	e628 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xea>
    e626:	4608      	mov	r0, r1
    e628:	4420      	add	r0, r4
    e62a:	4428      	add	r0, r5
    e62c:	1d80      	adds	r0, r0, #6
    e62e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e632:	b510      	push	{r4, lr}
    e634:	4604      	mov	r4, r0
    e636:	2108      	movs	r1, #8
    e638:	4620      	mov	r0, r4
    e63a:	f7f2 fa69 	bl	b10 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e63e:	6820      	ldr	r0, [r4, #0]
    e640:	2800      	cmp	r0, #0
    e642:	d102      	bne.n	e64a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x10c>
    e644:	6860      	ldr	r0, [r4, #4]
    e646:	2800      	cmp	r0, #0
    e648:	d0f5      	beq.n	e636 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf8>
    e64a:	bd10      	pop	{r4, pc}

0000e64c <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>:
    e64c:	f000 0155 	and.w	r1, r0, #85	; 0x55
    e650:	2255      	movs	r2, #85	; 0x55
    e652:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    e656:	4408      	add	r0, r1
    e658:	f000 0133 	and.w	r1, r0, #51	; 0x33
    e65c:	2233      	movs	r2, #51	; 0x33
    e65e:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    e662:	4408      	add	r0, r1
    e664:	f000 010f 	and.w	r1, r0, #15
    e668:	eb01 1010 	add.w	r0, r1, r0, lsr #4
    e66c:	4770      	bx	lr

0000e66e <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>:
    e66e:	6840      	ldr	r0, [r0, #4]
    e670:	2100      	movs	r1, #0
    e672:	f820 1fd8 	strh.w	r1, [r0, #216]!
    e676:	7881      	ldrb	r1, [r0, #2]
    e678:	1c49      	adds	r1, r1, #1
    e67a:	7081      	strb	r1, [r0, #2]
    e67c:	4770      	bx	lr

0000e67e <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>:
    e67e:	b510      	push	{r4, lr}
    e680:	6840      	ldr	r0, [r0, #4]
    e682:	f810 1fda 	ldrb.w	r1, [r0, #218]!
    e686:	1e49      	subs	r1, r1, #1
    e688:	b249      	sxtb	r1, r1
    e68a:	7001      	strb	r1, [r0, #0]
    e68c:	2900      	cmp	r1, #0
    e68e:	da03      	bge.n	e698 <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA+0x1a>
    e690:	2135      	movs	r1, #53	; 0x35
    e692:	204a      	movs	r0, #74	; 0x4a
    e694:	f7f2 f98c 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e698:	bd10      	pop	{r4, pc}

0000e69a <sym_2UM6LVQLLMOP7WZDJLNUGNNDXOSOGAIT6WB627Q>:
    e69a:	6840      	ldr	r0, [r0, #4]
    e69c:	f880 1123 	strb.w	r1, [r0, #291]	; 0x123
    e6a0:	f880 2122 	strb.w	r2, [r0, #290]	; 0x122
    e6a4:	4770      	bx	lr

0000e6a6 <sym_GRWJSKDQ3POPWSRNDRQTNNGA4TE3WRBKWXT5JAQ>:
    e6a6:	6840      	ldr	r0, [r0, #4]
    e6a8:	2100      	movs	r1, #0
    e6aa:	f880 109d 	strb.w	r1, [r0, #157]	; 0x9d
    e6ae:	f880 10d6 	strb.w	r1, [r0, #214]	; 0xd6
    e6b2:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
    e6b6:	4770      	bx	lr

0000e6b8 <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI>:
    e6b8:	b510      	push	{r4, lr}
    e6ba:	f1a0 0234 	sub.w	r2, r0, #52	; 0x34
    e6be:	f830 4cb4 	ldrh.w	r4, [r0, #-180]
    e6c2:	2000      	movs	r0, #0
    e6c4:	7048      	strb	r0, [r1, #1]
    e6c6:	230a      	movs	r3, #10
    e6c8:	700b      	strb	r3, [r1, #0]
    e6ca:	7108      	strb	r0, [r1, #4]
    e6cc:	f8a1 4005 	strh.w	r4, [r1, #5]
    e6d0:	f892 003d 	ldrb.w	r0, [r2, #61]	; 0x3d
    e6d4:	71c8      	strb	r0, [r1, #7]
    e6d6:	4620      	mov	r0, r4
    e6d8:	f7f2 fe2c 	bl	1334 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    e6dc:	f7fe fdf8 	bl	d2d0 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    e6e0:	b140      	cbz	r0, e6f4 <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI+0x3c>
    e6e2:	4620      	mov	r0, r4
    e6e4:	f7ff f9f8 	bl	dad8 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    e6e8:	4620      	mov	r0, r4
    e6ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e6ee:	2100      	movs	r1, #0
    e6f0:	f7f2 bd2e 	b.w	1150 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    e6f4:	2173      	movs	r1, #115	; 0x73
    e6f6:	2063      	movs	r0, #99	; 0x63
    e6f8:	f7f2 f95a 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e6fc <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA>:
    e6fc:	b570      	push	{r4, r5, r6, lr}
    e6fe:	6844      	ldr	r4, [r0, #4]
    e700:	460d      	mov	r5, r1
    e702:	7803      	ldrb	r3, [r0, #0]
    e704:	f894 209f 	ldrb.w	r2, [r4, #159]	; 0x9f
    e708:	3480      	adds	r4, #128	; 0x80
    e70a:	2101      	movs	r1, #1
    e70c:	4620      	mov	r0, r4
    e70e:	f7ff facd 	bl	dcac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e712:	b108      	cbz	r0, e718 <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA+0x1c>
    e714:	2000      	movs	r0, #0
    e716:	bd70      	pop	{r4, r5, r6, pc}
    e718:	4628      	mov	r0, r5
    e71a:	f7ff fe00 	bl	e31e <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>
    e71e:	f884 0020 	strb.w	r0, [r4, #32]
    e722:	2006      	movs	r0, #6
    e724:	77e0      	strb	r0, [r4, #31]
    e726:	e7f5      	b.n	e714 <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA+0x18>

0000e728 <sym_MWD4AC6ISIKEYDTZF7KXOTJOBUPKKWWLNRGAYAA>:
    e728:	b510      	push	{r4, lr}
    e72a:	6844      	ldr	r4, [r0, #4]
    e72c:	7803      	ldrb	r3, [r0, #0]
    e72e:	2101      	movs	r1, #1
    e730:	f894 209f 	ldrb.w	r2, [r4, #159]	; 0x9f
    e734:	3480      	adds	r4, #128	; 0x80
    e736:	4620      	mov	r0, r4
    e738:	f7ff fab8 	bl	dcac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e73c:	2800      	cmp	r0, #0
    e73e:	d101      	bne.n	e744 <sym_MWD4AC6ISIKEYDTZF7KXOTJOBUPKKWWLNRGAYAA+0x1c>
    e740:	2007      	movs	r0, #7
    e742:	77e0      	strb	r0, [r4, #31]
    e744:	bd10      	pop	{r4, pc}

0000e746 <sym_24PTBIAZ2OKSUMWBHATZCO4EQUFF3BOLAN2QX4Y>:
    e746:	2200      	movs	r2, #0
    e748:	704a      	strb	r2, [r1, #1]
    e74a:	2307      	movs	r3, #7
    e74c:	700b      	strb	r3, [r1, #0]
    e74e:	f100 030a 	add.w	r3, r0, #10
    e752:	f5a0 70df 	sub.w	r0, r0, #446	; 0x1be
    e756:	84c2      	strh	r2, [r0, #38]	; 0x26
    e758:	6818      	ldr	r0, [r3, #0]
    e75a:	6048      	str	r0, [r1, #4]
    e75c:	6858      	ldr	r0, [r3, #4]
    e75e:	6088      	str	r0, [r1, #8]
    e760:	8918      	ldrh	r0, [r3, #8]
    e762:	8188      	strh	r0, [r1, #12]
    e764:	710a      	strb	r2, [r1, #4]
    e766:	4770      	bx	lr

0000e768 <sym_YAZXXBE3UO3G4AM6TR2NFBXVHOGUGHIF6JXVVLI>:
    e768:	b510      	push	{r4, lr}
    e76a:	6844      	ldr	r4, [r0, #4]
    e76c:	7803      	ldrb	r3, [r0, #0]
    e76e:	2100      	movs	r1, #0
    e770:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    e774:	3480      	adds	r4, #128	; 0x80
    e776:	4620      	mov	r0, r4
    e778:	f7ff fa98 	bl	dcac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e77c:	b110      	cbz	r0, e784 <sym_YAZXXBE3UO3G4AM6TR2NFBXVHOGUGHIF6JXVVLI+0x1c>
    e77e:	201d      	movs	r0, #29
    e780:	7760      	strb	r0, [r4, #29]
    e782:	bd10      	pop	{r4, pc}
    e784:	2122      	movs	r1, #34	; 0x22
    e786:	2045      	movs	r0, #69	; 0x45
    e788:	f7f2 f912 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e78c <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA>:
    e78c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e790:	4606      	mov	r6, r0
    e792:	7803      	ldrb	r3, [r0, #0]
    e794:	6840      	ldr	r0, [r0, #4]
    e796:	468b      	mov	fp, r1
    e798:	f100 0480 	add.w	r4, r0, #128	; 0x80
    e79c:	4605      	mov	r5, r0
    e79e:	2700      	movs	r7, #0
    e7a0:	7f62      	ldrb	r2, [r4, #29]
    e7a2:	210a      	movs	r1, #10
    e7a4:	4620      	mov	r0, r4
    e7a6:	f7ff fa81 	bl	dcac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e7aa:	b358      	cbz	r0, e804 <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA+0x78>
    e7ac:	4658      	mov	r0, fp
    e7ae:	f7ff fd56 	bl	e25e <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    e7b2:	b1f0      	cbz	r0, e7f2 <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA+0x66>
    e7b4:	4658      	mov	r0, fp
    e7b6:	f7ff fd4c 	bl	e252 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    e7ba:	4682      	mov	sl, r0
    e7bc:	4658      	mov	r0, fp
    e7be:	f7ff fd4c 	bl	e25a <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    e7c2:	4681      	mov	r9, r0
    e7c4:	4658      	mov	r0, fp
    e7c6:	f7ff fd42 	bl	e24e <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    e7ca:	4680      	mov	r8, r0
    e7cc:	4658      	mov	r0, fp
    e7ce:	f7ff fd42 	bl	e256 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    e7d2:	4601      	mov	r1, r0
    e7d4:	464b      	mov	r3, r9
    e7d6:	4642      	mov	r2, r8
    e7d8:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    e7dc:	f8cd a000 	str.w	sl, [sp]
    e7e0:	f7ff fead 	bl	e53e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    e7e4:	4628      	mov	r0, r5
    e7e6:	f7ff fe4e 	bl	e486 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    e7ea:	2105      	movs	r1, #5
    e7ec:	6870      	ldr	r0, [r6, #4]
    e7ee:	f7f5 fed5 	bl	459c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    e7f2:	f884 7056 	strb.w	r7, [r4, #86]	; 0x56
    e7f6:	7767      	strb	r7, [r4, #29]
    e7f8:	4630      	mov	r0, r6
    e7fa:	f000 f805 	bl	e808 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>
    e7fe:	2000      	movs	r0, #0
    e800:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e804:	2001      	movs	r0, #1
    e806:	e7fb      	b.n	e800 <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA+0x74>

0000e808 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>:
    e808:	6841      	ldr	r1, [r0, #4]
    e80a:	f501 72a5 	add.w	r2, r1, #330	; 0x14a
    e80e:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    e812:	2801      	cmp	r0, #1
    e814:	d004      	beq.n	e820 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA+0x18>
    e816:	f831 0b2c 	ldrh.w	r0, [r1], #44
    e81a:	3218      	adds	r2, #24
    e81c:	f7f4 bae8 	b.w	2df0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    e820:	2002      	movs	r0, #2
    e822:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    e826:	4770      	bx	lr

0000e828 <sym_2TCPCDAUQ3FXZYG56Z6ZP7VCFNUJTBV3EZJYPGY>:
    e828:	2200      	movs	r2, #0
    e82a:	704a      	strb	r2, [r1, #1]
    e82c:	220b      	movs	r2, #11
    e82e:	700a      	strb	r2, [r1, #0]
    e830:	f100 020a 	add.w	r2, r0, #10
    e834:	7a83      	ldrb	r3, [r0, #10]
    e836:	f2a0 200a 	subw	r0, r0, #522	; 0x20a
    e83a:	710b      	strb	r3, [r1, #4]
    e83c:	8800      	ldrh	r0, [r0, #0]
    e83e:	80c8      	strh	r0, [r1, #6]
    e840:	7910      	ldrb	r0, [r2, #4]
    e842:	7208      	strb	r0, [r1, #8]
    e844:	4770      	bx	lr

0000e846 <sym_S6U6ANENQP6QL5TLITNXPOYFSB26Q5AFTW32CXI>:
    e846:	2200      	movs	r2, #0
    e848:	704a      	strb	r2, [r1, #1]
    e84a:	220c      	movs	r2, #12
    e84c:	700a      	strb	r2, [r1, #0]
    e84e:	7a82      	ldrb	r2, [r0, #10]
    e850:	f2a0 200a 	subw	r0, r0, #522	; 0x20a
    e854:	710a      	strb	r2, [r1, #4]
    e856:	8800      	ldrh	r0, [r0, #0]
    e858:	80c8      	strh	r0, [r1, #6]
    e85a:	4770      	bx	lr

0000e85c <sym_P3OAHUDLNMEJKO66PKADYJ5KBQTQCDBZBHL5ZUY>:
    e85c:	2200      	movs	r2, #0
    e85e:	704a      	strb	r2, [r1, #1]
    e860:	2208      	movs	r2, #8
    e862:	700a      	strb	r2, [r1, #0]
    e864:	f5a0 7237 	sub.w	r2, r0, #732	; 0x2dc
    e868:	8812      	ldrh	r2, [r2, #0]
    e86a:	808a      	strh	r2, [r1, #4]
    e86c:	68c2      	ldr	r2, [r0, #12]
    e86e:	f8c1 2006 	str.w	r2, [r1, #6]
    e872:	6902      	ldr	r2, [r0, #16]
    e874:	f8c1 200a 	str.w	r2, [r1, #10]
    e878:	8a80      	ldrh	r0, [r0, #20]
    e87a:	81c8      	strh	r0, [r1, #14]
    e87c:	4770      	bx	lr
    e87e:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    e882:	f001 0307 	and.w	r3, r1, #7
    e886:	7802      	ldrb	r2, [r0, #0]
    e888:	2101      	movs	r1, #1
    e88a:	4099      	lsls	r1, r3
    e88c:	430a      	orrs	r2, r1
    e88e:	7002      	strb	r2, [r0, #0]
    e890:	4770      	bx	lr

0000e892 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>:
    e892:	b510      	push	{r4, lr}
    e894:	6844      	ldr	r4, [r0, #4]
    e896:	7803      	ldrb	r3, [r0, #0]
    e898:	2100      	movs	r1, #0
    e89a:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    e89e:	3480      	adds	r4, #128	; 0x80
    e8a0:	4620      	mov	r0, r4
    e8a2:	f7ff fa03 	bl	dcac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e8a6:	b110      	cbz	r0, e8ae <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY+0x1c>
    e8a8:	2004      	movs	r0, #4
    e8aa:	7760      	strb	r0, [r4, #29]
    e8ac:	bd10      	pop	{r4, pc}
    e8ae:	21ab      	movs	r1, #171	; 0xab
    e8b0:	201c      	movs	r0, #28
    e8b2:	f7f2 f87d 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e8b6 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>:
    e8b6:	b510      	push	{r4, lr}
    e8b8:	6841      	ldr	r1, [r0, #4]
    e8ba:	f891 208c 	ldrb.w	r2, [r1, #140]	; 0x8c
    e8be:	07d2      	lsls	r2, r2, #31
    e8c0:	d00b      	beq.n	e8da <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x24>
    e8c2:	f811 2fda 	ldrb.w	r2, [r1, #218]!
    e8c6:	1e52      	subs	r2, r2, #1
    e8c8:	b252      	sxtb	r2, r2
    e8ca:	700a      	strb	r2, [r1, #0]
    e8cc:	6840      	ldr	r0, [r0, #4]
    e8ce:	2a00      	cmp	r2, #0
    e8d0:	da05      	bge.n	e8de <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x28>
    e8d2:	21ba      	movs	r1, #186	; 0xba
    e8d4:	201c      	movs	r0, #28
    e8d6:	f7f2 f86b 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e8da:	21b8      	movs	r1, #184	; 0xb8
    e8dc:	e7fa      	b.n	e8d4 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x1e>
    e8de:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    e8e2:	f021 0101 	bic.w	r1, r1, #1
    e8e6:	6001      	str	r1, [r0, #0]
    e8e8:	bd10      	pop	{r4, pc}
    e8ea:	2200      	movs	r2, #0
    e8ec:	704a      	strb	r2, [r1, #1]
    e8ee:	2206      	movs	r2, #6
    e8f0:	700a      	strb	r2, [r1, #0]
    e8f2:	f850 2f09 	ldr.w	r2, [r0, #9]!
    e8f6:	604a      	str	r2, [r1, #4]
    e8f8:	6842      	ldr	r2, [r0, #4]
    e8fa:	608a      	str	r2, [r1, #8]
    e8fc:	8902      	ldrh	r2, [r0, #8]
    e8fe:	818a      	strh	r2, [r1, #12]
    e900:	7a80      	ldrb	r0, [r0, #10]
    e902:	7388      	strb	r0, [r1, #14]
    e904:	4770      	bx	lr

0000e906 <sym_NK4HRRKGX3ST3ARVTU6HUEXLOWZFFBMCIDNT3EI>:
    e906:	2200      	movs	r2, #0
    e908:	704a      	strb	r2, [r1, #1]
    e90a:	220e      	movs	r2, #14
    e90c:	f5a0 70ac 	sub.w	r0, r0, #344	; 0x158
    e910:	700a      	strb	r2, [r1, #0]
    e912:	8800      	ldrh	r0, [r0, #0]
    e914:	8088      	strh	r0, [r1, #4]
    e916:	4770      	bx	lr

0000e918 <sym_P2OZB7UAJZNJ47VR5DS7V33BAD5DESWDHJYKOZA>:
    e918:	b510      	push	{r4, lr}
    e91a:	6844      	ldr	r4, [r0, #4]
    e91c:	f894 108c 	ldrb.w	r1, [r4, #140]	; 0x8c
    e920:	3480      	adds	r4, #128	; 0x80
    e922:	f011 0f04 	tst.w	r1, #4
    e926:	d001      	beq.n	e92c <sym_P2OZB7UAJZNJ47VR5DS7V33BAD5DESWDHJYKOZA+0x14>
    e928:	2001      	movs	r0, #1
    e92a:	bd10      	pop	{r4, pc}
    e92c:	f7ff fe9f 	bl	e66e <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    e930:	68e0      	ldr	r0, [r4, #12]
    e932:	f040 0004 	orr.w	r0, r0, #4
    e936:	60e0      	str	r0, [r4, #12]
    e938:	2000      	movs	r0, #0
    e93a:	bd10      	pop	{r4, pc}

0000e93c <sym_BR7VCSB75RGRQ7O7PYOVLMHXKJKUMK6XH3GVGZA>:
    e93c:	b510      	push	{r4, lr}
    e93e:	6844      	ldr	r4, [r0, #4]
    e940:	7803      	ldrb	r3, [r0, #0]
    e942:	2100      	movs	r1, #0
    e944:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    e948:	3480      	adds	r4, #128	; 0x80
    e94a:	4620      	mov	r0, r4
    e94c:	f7ff f9ae 	bl	dcac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e950:	b110      	cbz	r0, e958 <sym_BR7VCSB75RGRQ7O7PYOVLMHXKJKUMK6XH3GVGZA+0x1c>
    e952:	200f      	movs	r0, #15
    e954:	7760      	strb	r0, [r4, #29]
    e956:	bd10      	pop	{r4, pc}
    e958:	216e      	movs	r1, #110	; 0x6e
    e95a:	204b      	movs	r0, #75	; 0x4b
    e95c:	f7f2 f828 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e960 <sym_M65PCSZAPVYR7V5YEMYJW264OYLXMV6F2CRGMXQ>:
    e960:	b510      	push	{r4, lr}
    e962:	6844      	ldr	r4, [r0, #4]
    e964:	7803      	ldrb	r3, [r0, #0]
    e966:	2109      	movs	r1, #9
    e968:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    e96c:	3480      	adds	r4, #128	; 0x80
    e96e:	4620      	mov	r0, r4
    e970:	f7ff f99c 	bl	dcac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e974:	2800      	cmp	r0, #0
    e976:	d005      	beq.n	e984 <sym_M65PCSZAPVYR7V5YEMYJW264OYLXMV6F2CRGMXQ+0x24>
    e978:	2000      	movs	r0, #0
    e97a:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
    e97e:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    e982:	7760      	strb	r0, [r4, #29]
    e984:	bd10      	pop	{r4, pc}

0000e986 <sym_E2LE5OMX5VGHQ6BJ4G7CNEBI3KUUYONP2PS2EJQ>:
    e986:	6841      	ldr	r1, [r0, #4]
    e988:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    e98c:	f022 0204 	bic.w	r2, r2, #4
    e990:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    e994:	f7ff be73 	b.w	e67e <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>

0000e998 <sym_2UKPFKMGRDZ4VV635IPSP7DNWK4DJAJ7LOHQN6A>:
    e998:	b510      	push	{r4, lr}
    e99a:	2300      	movs	r3, #0
    e99c:	704b      	strb	r3, [r1, #1]
    e99e:	2401      	movs	r4, #1
    e9a0:	700c      	strb	r4, [r1, #0]
    e9a2:	f100 0209 	add.w	r2, r0, #9
    e9a6:	710b      	strb	r3, [r1, #4]
    e9a8:	f830 0cde 	ldrh.w	r0, [r0, #-222]
    e9ac:	f8a1 0005 	strh.w	r0, [r1, #5]
    e9b0:	f812 0b01 	ldrb.w	r0, [r2], #1
    e9b4:	71c8      	strb	r0, [r1, #7]
    e9b6:	8810      	ldrh	r0, [r2, #0]
    e9b8:	8108      	strh	r0, [r1, #8]
    e9ba:	8850      	ldrh	r0, [r2, #2]
    e9bc:	8148      	strh	r0, [r1, #10]
    e9be:	bd10      	pop	{r4, pc}

0000e9c0 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>:
    e9c0:	b570      	push	{r4, r5, r6, lr}
    e9c2:	7803      	ldrb	r3, [r0, #0]
    e9c4:	6840      	ldr	r0, [r0, #4]
    e9c6:	2500      	movs	r5, #0
    e9c8:	f100 0480 	add.w	r4, r0, #128	; 0x80
    e9cc:	f890 10dd 	ldrb.w	r1, [r0, #221]	; 0xdd
    e9d0:	f500 7098 	add.w	r0, r0, #304	; 0x130
    e9d4:	0789      	lsls	r1, r1, #30
    e9d6:	d40e      	bmi.n	e9f6 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x36>
    e9d8:	7f62      	ldrb	r2, [r4, #29]
    e9da:	2100      	movs	r1, #0
    e9dc:	4620      	mov	r0, r4
    e9de:	f7ff f965 	bl	dcac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e9e2:	b130      	cbz	r0, e9f2 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x32>
    e9e4:	2001      	movs	r0, #1
    e9e6:	7760      	strb	r0, [r4, #29]
    e9e8:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    e9ec:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
    e9f0:	bd70      	pop	{r4, r5, r6, pc}
    e9f2:	216e      	movs	r1, #110	; 0x6e
    e9f4:	e00b      	b.n	ea0e <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x4e>
    e9f6:	7b21      	ldrb	r1, [r4, #12]
    e9f8:	0789      	lsls	r1, r1, #30
    e9fa:	d50f      	bpl.n	ea1c <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x5c>
    e9fc:	f894 105a 	ldrb.w	r1, [r4, #90]	; 0x5a
    ea00:	1e49      	subs	r1, r1, #1
    ea02:	b249      	sxtb	r1, r1
    ea04:	f884 105a 	strb.w	r1, [r4, #90]	; 0x5a
    ea08:	2900      	cmp	r1, #0
    ea0a:	da03      	bge.n	ea14 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x54>
    ea0c:	2180      	movs	r1, #128	; 0x80
    ea0e:	2040      	movs	r0, #64	; 0x40
    ea10:	f7f1 ffce 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea14:	68e1      	ldr	r1, [r4, #12]
    ea16:	f021 0102 	bic.w	r1, r1, #2
    ea1a:	60e1      	str	r1, [r4, #12]
    ea1c:	7485      	strb	r5, [r0, #18]
    ea1e:	bd70      	pop	{r4, r5, r6, pc}
    ea20:	2200      	movs	r2, #0
    ea22:	704a      	strb	r2, [r1, #1]
    ea24:	2219      	movs	r2, #25
    ea26:	700a      	strb	r2, [r1, #0]
    ea28:	f8d0 000a 	ldr.w	r0, [r0, #10]
    ea2c:	6048      	str	r0, [r1, #4]
    ea2e:	4770      	bx	lr
    ea30:	b510      	push	{r4, lr}
    ea32:	4604      	mov	r4, r0
    ea34:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    ea38:	e9d4 1000 	ldrd	r1, r0, [r4]
    ea3c:	4050      	eors	r0, r2
    ea3e:	ea70 0101 	orns	r1, r0, r1
    ea42:	d008      	beq.n	ea56 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x96>
    ea44:	f002 f88d 	bl	10b62 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    ea48:	e9d4 2300 	ldrd	r2, r3, [r4]
    ea4c:	1a80      	subs	r0, r0, r2
    ea4e:	4199      	sbcs	r1, r3
    ea50:	d301      	bcc.n	ea56 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x96>
    ea52:	2001      	movs	r0, #1
    ea54:	bd10      	pop	{r4, pc}
    ea56:	2000      	movs	r0, #0
    ea58:	bd10      	pop	{r4, pc}

0000ea5a <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>:
    ea5a:	b508      	push	{r3, lr}
    ea5c:	f000 f804 	bl	ea68 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    ea60:	466a      	mov	r2, sp
    ea62:	f7f4 fd1b 	bl	349c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    ea66:	bd08      	pop	{r3, pc}
    ea68:	b530      	push	{r4, r5, lr}
    ea6a:	784c      	ldrb	r4, [r1, #1]
    ea6c:	4603      	mov	r3, r0
    ea6e:	7808      	ldrb	r0, [r1, #0]
    ea70:	788d      	ldrb	r5, [r1, #2]
    ea72:	0e22      	lsrs	r2, r4, #24
    ea74:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    ea78:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    ea7c:	ea42 4215 	orr.w	r2, r2, r5, lsr #16
    ea80:	78cd      	ldrb	r5, [r1, #3]
    ea82:	790c      	ldrb	r4, [r1, #4]
    ea84:	ea42 2215 	orr.w	r2, r2, r5, lsr #8
    ea88:	4322      	orrs	r2, r4
    ea8a:	7949      	ldrb	r1, [r1, #5]
    ea8c:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
    ea90:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    ea94:	4611      	mov	r1, r2
    ea96:	2b01      	cmp	r3, #1
    ea98:	d101      	bne.n	ea9e <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x44>
    ea9a:	f442 3180 	orr.w	r1, r2, #65536	; 0x10000
    ea9e:	bd30      	pop	{r4, r5, pc}
    eaa0:	2801      	cmp	r0, #1
    eaa2:	d102      	bne.n	eaaa <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x50>
    eaa4:	7948      	ldrb	r0, [r1, #5]
    eaa6:	0980      	lsrs	r0, r0, #6
    eaa8:	d001      	beq.n	eaae <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x54>
    eaaa:	2000      	movs	r0, #0
    eaac:	4770      	bx	lr
    eaae:	2001      	movs	r0, #1
    eab0:	4770      	bx	lr
    eab2:	2801      	cmp	r0, #1
    eab4:	d106      	bne.n	eac4 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6a>
    eab6:	7948      	ldrb	r0, [r1, #5]
    eab8:	2101      	movs	r1, #1
    eaba:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    eabe:	d101      	bne.n	eac4 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6a>
    eac0:	2001      	movs	r0, #1
    eac2:	4770      	bx	lr
    eac4:	2000      	movs	r0, #0
    eac6:	4770      	bx	lr
    eac8:	2802      	cmp	r0, #2
    eaca:	d003      	beq.n	ead4 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x7a>
    eacc:	2803      	cmp	r0, #3
    eace:	d001      	beq.n	ead4 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x7a>
    ead0:	2000      	movs	r0, #0
    ead2:	4770      	bx	lr
    ead4:	2001      	movs	r0, #1
    ead6:	4770      	bx	lr

0000ead8 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    ead8:	b510      	push	{r4, lr}
    eada:	4604      	mov	r4, r0
    eadc:	7c00      	ldrb	r0, [r0, #16]
    eade:	f7ff fff3 	bl	eac8 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6e>
    eae2:	b148      	cbz	r0, eaf8 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    eae4:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    eae8:	f104 0158 	add.w	r1, r4, #88	; 0x58
    eaec:	f7ff f890 	bl	dc10 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    eaf0:	2808      	cmp	r0, #8
    eaf2:	d001      	beq.n	eaf8 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    eaf4:	2001      	movs	r0, #1
    eaf6:	bd10      	pop	{r4, pc}
    eaf8:	7c20      	ldrb	r0, [r4, #16]
    eafa:	b118      	cbz	r0, eb04 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    eafc:	2802      	cmp	r0, #2
    eafe:	d001      	beq.n	eb04 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    eb00:	7de0      	ldrb	r0, [r4, #23]
    eb02:	bd10      	pop	{r4, pc}
    eb04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eb08:	2000      	movs	r0, #0
    eb0a:	f7f2 bee1 	b.w	18d0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000eb0e <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    eb0e:	b508      	push	{r3, lr}
    eb10:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    eb14:	f88d 1000 	strb.w	r1, [sp]
    eb18:	9900      	ldr	r1, [sp, #0]
    eb1a:	9100      	str	r1, [sp, #0]
    eb1c:	f89d 1000 	ldrb.w	r1, [sp]
    eb20:	b941      	cbnz	r1, eb34 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x26>
    eb22:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    eb26:	f88d 1000 	strb.w	r1, [sp]
    eb2a:	9900      	ldr	r1, [sp, #0]
    eb2c:	9100      	str	r1, [sp, #0]
    eb2e:	f89d 1000 	ldrb.w	r1, [sp]
    eb32:	b109      	cbz	r1, eb38 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x2a>
    eb34:	2001      	movs	r0, #1
    eb36:	bd08      	pop	{r3, pc}
    eb38:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    eb3c:	f88d 0000 	strb.w	r0, [sp]
    eb40:	9800      	ldr	r0, [sp, #0]
    eb42:	9000      	str	r0, [sp, #0]
    eb44:	f89d 0000 	ldrb.w	r0, [sp]
    eb48:	2000      	movs	r0, #0
    eb4a:	bd08      	pop	{r3, pc}

0000eb4c <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    eb4c:	20ff      	movs	r0, #255	; 0xff
    eb4e:	7008      	strb	r0, [r1, #0]
    eb50:	6b48      	ldr	r0, [r1, #52]	; 0x34
    eb52:	f7fe bf62 	b.w	da1a <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0000eb56 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    eb56:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    eb58:	460d      	mov	r5, r1
    eb5a:	4604      	mov	r4, r0
    eb5c:	f44f 728c 	mov.w	r2, #280	; 0x118
    eb60:	2100      	movs	r1, #0
    eb62:	f002 fa0a 	bl	10f7a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    eb66:	20ff      	movs	r0, #255	; 0xff
    eb68:	7020      	strb	r0, [r4, #0]
    eb6a:	207f      	movs	r0, #127	; 0x7f
    eb6c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    eb70:	2013      	movs	r0, #19
    eb72:	8060      	strh	r0, [r4, #2]
    eb74:	f242 7010 	movw	r0, #10000	; 0x2710
    eb78:	8460      	strh	r0, [r4, #34]	; 0x22
    eb7a:	f7f2 fc99 	bl	14b0 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    eb7e:	4601      	mov	r1, r0
    eb80:	6360      	str	r0, [r4, #52]	; 0x34
    eb82:	2200      	movs	r2, #0
    eb84:	4668      	mov	r0, sp
    eb86:	f7fe feae 	bl	d8e6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    eb8a:	2200      	movs	r2, #0
    eb8c:	2101      	movs	r1, #1
    eb8e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    eb90:	f7fe ff23 	bl	d9da <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    eb94:	2204      	movs	r2, #4
    eb96:	4668      	mov	r0, sp
    eb98:	6b61      	ldr	r1, [r4, #52]	; 0x34
    eb9a:	f7fe fea4 	bl	d8e6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    eb9e:	2200      	movs	r2, #0
    eba0:	4611      	mov	r1, r2
    eba2:	6b60      	ldr	r0, [r4, #52]	; 0x34
    eba4:	f7fe ff19 	bl	d9da <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    eba8:	73a5      	strb	r5, [r4, #14]
    ebaa:	f104 0028 	add.w	r0, r4, #40	; 0x28
    ebae:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    ebb2:	f000 b958 	b.w	ee66 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000ebb6 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    ebb6:	7880      	ldrb	r0, [r0, #2]
    ebb8:	f3c0 0080 	ubfx	r0, r0, #2, #1
    ebbc:	b108      	cbz	r0, ebc2 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    ebbe:	2000      	movs	r0, #0
    ebc0:	4770      	bx	lr
    ebc2:	201f      	movs	r0, #31
    ebc4:	4770      	bx	lr

0000ebc6 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    ebc6:	f7f5 b9cf 	b.w	3f68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>

0000ebca <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    ebca:	6880      	ldr	r0, [r0, #8]
    ebcc:	4770      	bx	lr

0000ebce <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    ebce:	2001      	movs	r0, #1
    ebd0:	4770      	bx	lr

0000ebd2 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    ebd2:	b510      	push	{r4, lr}
    ebd4:	4604      	mov	r4, r0
    ebd6:	3028      	adds	r0, #40	; 0x28
    ebd8:	f000 f905 	bl	ede6 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    ebdc:	8861      	ldrh	r1, [r4, #2]
    ebde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ebe2:	2228      	movs	r2, #40	; 0x28
    ebe4:	f7f5 bb90 	b.w	4308 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000ebe8 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    ebe8:	2200      	movs	r2, #0
    ebea:	8602      	strh	r2, [r0, #48]	; 0x30
    ebec:	8843      	ldrh	r3, [r0, #2]
    ebee:	2b1d      	cmp	r3, #29
    ebf0:	d001      	beq.n	ebf6 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    ebf2:	7341      	strb	r1, [r0, #13]
    ebf4:	4770      	bx	lr
    ebf6:	7342      	strb	r2, [r0, #13]
    ebf8:	4770      	bx	lr

0000ebfa <sym_WE45Z7LOSJEAVMD3HUIMZMMRDD5BLMKOFVBGE4Y>:
    ebfa:	b510      	push	{r4, lr}
    ebfc:	2400      	movs	r4, #0
    ebfe:	6b40      	ldr	r0, [r0, #52]	; 0x34
    ec00:	f7fe fee3 	bl	d9ca <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I>
    ec04:	4384      	bics	r4, r0
    ec06:	f084 0001 	eor.w	r0, r4, #1
    ec0a:	bd10      	pop	{r4, pc}

0000ec0c <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    ec0c:	2000      	movs	r0, #0
    ec0e:	4770      	bx	lr

0000ec10 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    ec10:	7880      	ldrb	r0, [r0, #2]
    ec12:	f000 0001 	and.w	r0, r0, #1
    ec16:	4770      	bx	lr

0000ec18 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    ec18:	7880      	ldrb	r0, [r0, #2]
    ec1a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    ec1e:	4770      	bx	lr

0000ec20 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    ec20:	2001      	movs	r0, #1
    ec22:	4770      	bx	lr

0000ec24 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    ec24:	7880      	ldrb	r0, [r0, #2]
    ec26:	f3c0 0040 	ubfx	r0, r0, #1, #1
    ec2a:	4770      	bx	lr

0000ec2c <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    ec2c:	f990 000e 	ldrsb.w	r0, [r0, #14]
    ec30:	4770      	bx	lr

0000ec32 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    ec32:	7800      	ldrb	r0, [r0, #0]
    ec34:	28ff      	cmp	r0, #255	; 0xff
    ec36:	d001      	beq.n	ec3c <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    ec38:	2001      	movs	r0, #1
    ec3a:	4770      	bx	lr
    ec3c:	2000      	movs	r0, #0
    ec3e:	4770      	bx	lr

0000ec40 <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>:
    ec40:	f800 1f20 	strb.w	r1, [r0, #32]!
    ec44:	7042      	strb	r2, [r0, #1]
    ec46:	4770      	bx	lr

0000ec48 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    ec48:	680a      	ldr	r2, [r1, #0]
    ec4a:	f840 2f11 	str.w	r2, [r0, #17]!
    ec4e:	8889      	ldrh	r1, [r1, #4]
    ec50:	8081      	strh	r1, [r0, #4]
    ec52:	2101      	movs	r1, #1
    ec54:	7181      	strb	r1, [r0, #6]
    ec56:	4770      	bx	lr

0000ec58 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    ec58:	7b00      	ldrb	r0, [r0, #12]
    ec5a:	4770      	bx	lr

0000ec5c <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    ec5c:	2001      	movs	r0, #1
    ec5e:	4770      	bx	lr

0000ec60 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    ec60:	61c1      	str	r1, [r0, #28]
    ec62:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
    ec66:	724a      	strb	r2, [r1, #9]
    ec68:	f8d0 2051 	ldr.w	r2, [r0, #81]	; 0x51
    ec6c:	f8c1 200a 	str.w	r2, [r1, #10]
    ec70:	f8b0 0055 	ldrh.w	r0, [r0, #85]	; 0x55
    ec74:	81c8      	strh	r0, [r1, #14]
    ec76:	4770      	bx	lr

0000ec78 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    ec78:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    ec7c:	4770      	bx	lr

0000ec7e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    ec7e:	7bc0      	ldrb	r0, [r0, #15]
    ec80:	2800      	cmp	r0, #0
    ec82:	d000      	beq.n	ec86 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    ec84:	2001      	movs	r0, #1
    ec86:	4770      	bx	lr
    ec88:	7802      	ldrb	r2, [r0, #0]
    ec8a:	2320      	movs	r3, #32
    ec8c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    ec90:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    ec94:	430a      	orrs	r2, r1
    ec96:	7002      	strb	r2, [r0, #0]
    ec98:	4770      	bx	lr
    ec9a:	2101      	movs	r1, #1
    ec9c:	f7f4 bdb4 	b.w	3808 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    eca0:	2101      	movs	r1, #1
    eca2:	f7f4 bdb1 	b.w	3808 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    eca6:	2200      	movs	r2, #0
    eca8:	704a      	strb	r2, [r1, #1]
    ecaa:	2205      	movs	r2, #5
    ecac:	700a      	strb	r2, [r1, #0]
    ecae:	f8d0 000a 	ldr.w	r0, [r0, #10]
    ecb2:	6048      	str	r0, [r1, #4]
    ecb4:	4770      	bx	lr
    ecb6:	b510      	push	{r4, lr}
    ecb8:	460c      	mov	r4, r1
    ecba:	2100      	movs	r1, #0
    ecbc:	7061      	strb	r1, [r4, #1]
    ecbe:	2112      	movs	r1, #18
    ecc0:	7021      	strb	r1, [r4, #0]
    ecc2:	f100 0109 	add.w	r1, r0, #9
    ecc6:	2221      	movs	r2, #33	; 0x21
    ecc8:	1d20      	adds	r0, r4, #4
    ecca:	f002 f8dc 	bl	10e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ecce:	2001      	movs	r0, #1
    ecd0:	71e0      	strb	r0, [r4, #7]
    ecd2:	7920      	ldrb	r0, [r4, #4]
    ecd4:	2800      	cmp	r0, #0
    ecd6:	d015      	beq.n	ed04 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x86>
    ecd8:	f8b4 4005 	ldrh.w	r4, [r4, #5]
    ecdc:	2100      	movs	r1, #0
    ecde:	4620      	mov	r0, r4
    ece0:	f7f2 f994 	bl	100c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ece4:	2800      	cmp	r0, #0
    ece6:	d00d      	beq.n	ed04 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x86>
    ece8:	8800      	ldrh	r0, [r0, #0]
    ecea:	f7fe fef5 	bl	dad8 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    ecee:	2100      	movs	r1, #0
    ecf0:	4620      	mov	r0, r4
    ecf2:	f7f2 fa2d 	bl	1150 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    ecf6:	2800      	cmp	r0, #0
    ecf8:	d004      	beq.n	ed04 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x86>
    ecfa:	f240 2151 	movw	r1, #593	; 0x251
    ecfe:	202d      	movs	r0, #45	; 0x2d
    ed00:	f7f1 fe56 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ed04:	bd10      	pop	{r4, pc}
    ed06:	2200      	movs	r2, #0
    ed08:	704a      	strb	r2, [r1, #1]
    ed0a:	221a      	movs	r2, #26
    ed0c:	700a      	strb	r2, [r1, #0]
    ed0e:	f850 2f09 	ldr.w	r2, [r0, #9]!
    ed12:	604a      	str	r2, [r1, #4]
    ed14:	6842      	ldr	r2, [r0, #4]
    ed16:	608a      	str	r2, [r1, #8]
    ed18:	7a00      	ldrb	r0, [r0, #8]
    ed1a:	7308      	strb	r0, [r1, #12]
    ed1c:	4770      	bx	lr
    ed1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ed22:	4604      	mov	r4, r0
    ed24:	460f      	mov	r7, r1
    ed26:	7e40      	ldrb	r0, [r0, #25]
    ed28:	f7f3 fb0e 	bl	2348 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    ed2c:	4606      	mov	r6, r0
    ed2e:	7e20      	ldrb	r0, [r4, #24]
    ed30:	f104 0551 	add.w	r5, r4, #81	; 0x51
    ed34:	b120      	cbz	r0, ed40 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc2>
    ed36:	b11e      	cbz	r6, ed40 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc2>
    ed38:	7e60      	ldrb	r0, [r4, #25]
    ed3a:	f7f3 faf9 	bl	2330 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    ed3e:	b1a0      	cbz	r0, ed6a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xec>
    ed40:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    ed44:	2800      	cmp	r0, #0
    ed46:	d024      	beq.n	ed92 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x114>
    ed48:	7ea0      	ldrb	r0, [r4, #26]
    ed4a:	2800      	cmp	r0, #0
    ed4c:	d021      	beq.n	ed92 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x114>
    ed4e:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    ed52:	4629      	mov	r1, r5
    ed54:	f7ff fead 	bl	eab2 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    ed58:	b1a8      	cbz	r0, ed86 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x108>
    ed5a:	f7f3 fae5 	bl	2328 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    ed5e:	463a      	mov	r2, r7
    ed60:	4629      	mov	r1, r5
    ed62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ed66:	f7fe beeb 	b.w	db40 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    ed6a:	2001      	movs	r0, #1
    ed6c:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    ed70:	463a      	mov	r2, r7
    ed72:	4629      	mov	r1, r5
    ed74:	4630      	mov	r0, r6
    ed76:	f7fe fee3 	bl	db40 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    ed7a:	7e61      	ldrb	r1, [r4, #25]
    ed7c:	4628      	mov	r0, r5
    ed7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ed82:	f7f3 baed 	b.w	2360 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    ed86:	4639      	mov	r1, r7
    ed88:	4628      	mov	r0, r5
    ed8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ed8e:	f7fe bec6 	b.w	db1e <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    ed92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ed96:	b510      	push	{r4, lr}
    ed98:	4604      	mov	r4, r0
    ed9a:	4608      	mov	r0, r1
    ed9c:	f7f9 f964 	bl	8068 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    eda0:	7921      	ldrb	r1, [r4, #4]
    eda2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eda6:	2025      	movs	r0, #37	; 0x25
    eda8:	f7f9 b934 	b.w	8014 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    edac:	b570      	push	{r4, r5, r6, lr}
    edae:	4614      	mov	r4, r2
    edb0:	461d      	mov	r5, r3
    edb2:	4606      	mov	r6, r0
    edb4:	f001 fed5 	bl	10b62 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    edb8:	1900      	adds	r0, r0, r4
    edba:	4169      	adcs	r1, r5
    edbc:	e9c6 0100 	strd	r0, r1, [r6]
    edc0:	bd70      	pop	{r4, r5, r6, pc}

0000edc2 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    edc2:	b570      	push	{r4, r5, r6, lr}
    edc4:	7001      	strb	r1, [r0, #0]
    edc6:	7042      	strb	r2, [r0, #1]
    edc8:	4614      	mov	r4, r2
    edca:	460d      	mov	r5, r1
    edcc:	7880      	ldrb	r0, [r0, #2]
    edce:	f000 f87f 	bl	eed0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    edd2:	fb10 f005 	smulbb	r0, r0, r5
    edd6:	4360      	muls	r0, r4
    edd8:	28ff      	cmp	r0, #255	; 0xff
    edda:	d303      	bcc.n	ede4 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    eddc:	215c      	movs	r1, #92	; 0x5c
    edde:	202e      	movs	r0, #46	; 0x2e
    ede0:	f7f1 fde6 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ede4:	bd70      	pop	{r4, r5, r6, pc}

0000ede6 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    ede6:	b510      	push	{r4, lr}
    ede8:	4604      	mov	r4, r0
    edea:	7880      	ldrb	r0, [r0, #2]
    edec:	f000 f870 	bl	eed0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    edf0:	7861      	ldrb	r1, [r4, #1]
    edf2:	7822      	ldrb	r2, [r4, #0]
    edf4:	fb11 f102 	smulbb	r1, r1, r2
    edf8:	4348      	muls	r0, r1
    edfa:	b2c0      	uxtb	r0, r0
    edfc:	bd10      	pop	{r4, pc}

0000edfe <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    edfe:	b510      	push	{r4, lr}
    ee00:	4604      	mov	r4, r0
    ee02:	f000 f84d 	bl	eea0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    ee06:	7961      	ldrb	r1, [r4, #5]
    ee08:	1c49      	adds	r1, r1, #1
    ee0a:	b2c9      	uxtb	r1, r1
    ee0c:	7161      	strb	r1, [r4, #5]
    ee0e:	7862      	ldrb	r2, [r4, #1]
    ee10:	4291      	cmp	r1, r2
    ee12:	d10b      	bne.n	ee2c <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    ee14:	2200      	movs	r2, #0
    ee16:	7162      	strb	r2, [r4, #5]
    ee18:	78e1      	ldrb	r1, [r4, #3]
    ee1a:	4301      	orrs	r1, r0
    ee1c:	70e1      	strb	r1, [r4, #3]
    ee1e:	78a3      	ldrb	r3, [r4, #2]
    ee20:	4299      	cmp	r1, r3
    ee22:	d103      	bne.n	ee2c <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    ee24:	70e2      	strb	r2, [r4, #3]
    ee26:	7921      	ldrb	r1, [r4, #4]
    ee28:	1c49      	adds	r1, r1, #1
    ee2a:	7121      	strb	r1, [r4, #4]
    ee2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ee30:	f000 b825 	b.w	ee7e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000ee34 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    ee34:	7081      	strb	r1, [r0, #2]
    ee36:	4770      	bx	lr

0000ee38 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    ee38:	b570      	push	{r4, r5, r6, lr}
    ee3a:	4604      	mov	r4, r0
    ee3c:	7880      	ldrb	r0, [r0, #2]
    ee3e:	f000 f847 	bl	eed0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    ee42:	7861      	ldrb	r1, [r4, #1]
    ee44:	fb11 f500 	smulbb	r5, r1, r0
    ee48:	78e0      	ldrb	r0, [r4, #3]
    ee4a:	f000 f841 	bl	eed0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    ee4e:	7861      	ldrb	r1, [r4, #1]
    ee50:	7962      	ldrb	r2, [r4, #5]
    ee52:	fb10 2001 	smlabb	r0, r0, r1, r2
    ee56:	7821      	ldrb	r1, [r4, #0]
    ee58:	7922      	ldrb	r2, [r4, #4]
    ee5a:	1a89      	subs	r1, r1, r2
    ee5c:	fb11 f105 	smulbb	r1, r1, r5
    ee60:	1a08      	subs	r0, r1, r0
    ee62:	b2c0      	uxtb	r0, r0
    ee64:	bd70      	pop	{r4, r5, r6, pc}

0000ee66 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    ee66:	2100      	movs	r1, #0
    ee68:	6001      	str	r1, [r0, #0]
    ee6a:	8081      	strh	r1, [r0, #4]
    ee6c:	2101      	movs	r1, #1
    ee6e:	7041      	strb	r1, [r0, #1]
    ee70:	7001      	strb	r1, [r0, #0]
    ee72:	4770      	bx	lr

0000ee74 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    ee74:	2100      	movs	r1, #0
    ee76:	70c1      	strb	r1, [r0, #3]
    ee78:	7141      	strb	r1, [r0, #5]
    ee7a:	7101      	strb	r1, [r0, #4]
    ee7c:	4770      	bx	lr
    ee7e:	b510      	push	{r4, lr}
    ee80:	2801      	cmp	r0, #1
    ee82:	d007      	beq.n	ee94 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    ee84:	2802      	cmp	r0, #2
    ee86:	d007      	beq.n	ee98 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    ee88:	2804      	cmp	r0, #4
    ee8a:	d007      	beq.n	ee9c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    ee8c:	2139      	movs	r1, #57	; 0x39
    ee8e:	202e      	movs	r0, #46	; 0x2e
    ee90:	f7f1 fd8e 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ee94:	2025      	movs	r0, #37	; 0x25
    ee96:	bd10      	pop	{r4, pc}
    ee98:	2026      	movs	r0, #38	; 0x26
    ee9a:	bd10      	pop	{r4, pc}
    ee9c:	2027      	movs	r0, #39	; 0x27
    ee9e:	bd10      	pop	{r4, pc}
    eea0:	4601      	mov	r1, r0
    eea2:	2000      	movs	r0, #0
    eea4:	788a      	ldrb	r2, [r1, #2]
    eea6:	07d3      	lsls	r3, r2, #31
    eea8:	d002      	beq.n	eeb0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    eeaa:	78cb      	ldrb	r3, [r1, #3]
    eeac:	07db      	lsls	r3, r3, #31
    eeae:	d006      	beq.n	eebe <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    eeb0:	0793      	lsls	r3, r2, #30
    eeb2:	d506      	bpl.n	eec2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    eeb4:	78cb      	ldrb	r3, [r1, #3]
    eeb6:	079b      	lsls	r3, r3, #30
    eeb8:	d403      	bmi.n	eec2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    eeba:	2002      	movs	r0, #2
    eebc:	4770      	bx	lr
    eebe:	2001      	movs	r0, #1
    eec0:	4770      	bx	lr
    eec2:	0752      	lsls	r2, r2, #29
    eec4:	d5fc      	bpl.n	eec0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    eec6:	78c9      	ldrb	r1, [r1, #3]
    eec8:	0749      	lsls	r1, r1, #29
    eeca:	d4f9      	bmi.n	eec0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    eecc:	2004      	movs	r0, #4
    eece:	4770      	bx	lr
    eed0:	f3c0 0180 	ubfx	r1, r0, #2, #1
    eed4:	f3c0 0240 	ubfx	r2, r0, #1, #1
    eed8:	4411      	add	r1, r2
    eeda:	f000 0001 	and.w	r0, r0, #1
    eede:	4408      	add	r0, r1
    eee0:	4770      	bx	lr

0000eee2 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    eee2:	f240 315a 	movw	r1, #858	; 0x35a
    eee6:	4348      	muls	r0, r1
    eee8:	4770      	bx	lr

0000eeea <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    eeea:	f240 20ef 	movw	r0, #751	; 0x2ef
    eeee:	4770      	bx	lr
    eef0:	041c020e 	.word	0x041c020e
    eef4:	0c600630 	.word	0x0c600630
    eef8:	06b4035a 	.word	0x06b4035a
    eefc:	0bf505c5 	.word	0x0bf505c5
    ef00:	01a31225 	.word	0x01a31225
    ef04:	05bf03b1 	.word	0x05bf03b1
    ef08:	064902ef 	.word	0x064902ef
    ef0c:	09a3      	.short	0x09a3

0000ef0e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    ef0e:	b510      	push	{r4, lr}
    ef10:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
    ef14:	b109      	cbz	r1, ef1a <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    ef16:	2000      	movs	r0, #0
    ef18:	bd10      	pop	{r4, pc}
    ef1a:	f890 10d0 	ldrb.w	r1, [r0, #208]	; 0xd0
    ef1e:	b131      	cbz	r1, ef2e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    ef20:	e9d0 1235 	ldrd	r1, r2, [r0, #212]	; 0xd4
    ef24:	428a      	cmp	r2, r1
    ef26:	d902      	bls.n	ef2e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    ef28:	f7f4 fc56 	bl	37d8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    ef2c:	e7f3      	b.n	ef16 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    ef2e:	2001      	movs	r0, #1
    ef30:	bd10      	pop	{r4, pc}

0000ef32 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    ef32:	b510      	push	{r4, lr}
    ef34:	b131      	cbz	r1, ef44 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    ef36:	2901      	cmp	r1, #1
    ef38:	d008      	beq.n	ef4c <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    ef3a:	f240 71d3 	movw	r1, #2003	; 0x7d3
    ef3e:	2030      	movs	r0, #48	; 0x30
    ef40:	f7f1 fd36 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ef48:	f000 b9c7 	b.w	f2da <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x328>
    ef4c:	2100      	movs	r1, #0
    ef4e:	f880 10d0 	strb.w	r1, [r0, #208]	; 0xd0
    ef52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ef56:	f000 b923 	b.w	f1a0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>

0000ef5a <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
    ef5a:	b510      	push	{r4, lr}
    ef5c:	4604      	mov	r4, r0
    ef5e:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    ef62:	2800      	cmp	r0, #0
    ef64:	d019      	beq.n	ef9a <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
    ef66:	2001      	movs	r0, #1
    ef68:	f884 0110 	strb.w	r0, [r4, #272]	; 0x110
    ef6c:	4601      	mov	r1, r0
    ef6e:	4620      	mov	r0, r4
    ef70:	f7ff fe82 	bl	ec78 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    ef74:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
    ef78:	b170      	cbz	r0, ef98 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
    ef7a:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    ef7e:	f7fb fcc7 	bl	a910 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    ef82:	7820      	ldrb	r0, [r4, #0]
    ef84:	f7fb fe3c 	bl	ac00 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    ef88:	f814 09c8 	ldrb.w	r0, [r4], #-200
    ef8c:	f7fb fe16 	bl	abbc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    ef90:	b120      	cbz	r0, ef9c <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
    ef92:	2000      	movs	r0, #0
    ef94:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
    ef98:	2000      	movs	r0, #0
    ef9a:	bd10      	pop	{r4, pc}
    ef9c:	f240 210b 	movw	r1, #523	; 0x20b
    efa0:	2030      	movs	r0, #48	; 0x30
    efa2:	f7f1 fd05 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000efa6 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
    efa6:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
    efaa:	4770      	bx	lr

0000efac <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
    efac:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    efb0:	4770      	bx	lr

0000efb2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>:
    efb2:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    efb4:	4604      	mov	r4, r0
    efb6:	f890 022b 	ldrb.w	r0, [r0, #555]	; 0x22b
    efba:	2800      	cmp	r0, #0
    efbc:	d15f      	bne.n	f07e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    efbe:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    efc2:	2803      	cmp	r0, #3
    efc4:	d15b      	bne.n	f07e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    efc6:	f001 fdcc 	bl	10b62 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    efca:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
    efce:	f8d4 2294 	ldr.w	r2, [r4, #660]	; 0x294
    efd2:	1ac0      	subs	r0, r0, r3
    efd4:	eb61 0102 	sbc.w	r1, r1, r2
    efd8:	2300      	movs	r3, #0
    efda:	461a      	mov	r2, r3
    efdc:	1a1b      	subs	r3, r3, r0
    efde:	418a      	sbcs	r2, r1
    efe0:	da4d      	bge.n	f07e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    efe2:	1c42      	adds	r2, r0, #1
    efe4:	f171 0100 	sbcs.w	r1, r1, #0
    efe8:	db02      	blt.n	eff0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3e>
    efea:	f240 610b 	movw	r1, #1547	; 0x60b
    efee:	e036      	b.n	f05e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xac>
    eff0:	6921      	ldr	r1, [r4, #16]
    eff2:	b111      	cbz	r1, effa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x48>
    eff4:	fbb0 f0f1 	udiv	r0, r0, r1
    eff8:	e000      	b.n	effc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4a>
    effa:	2000      	movs	r0, #0
    effc:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    f000:	1c40      	adds	r0, r0, #1
    f002:	4408      	add	r0, r1
    f004:	f8a4 026c 	strh.w	r0, [r4, #620]	; 0x26c
    f008:	f8b4 026c 	ldrh.w	r0, [r4, #620]	; 0x26c
    f00c:	f8b4 1224 	ldrh.w	r1, [r4, #548]	; 0x224
    f010:	1a08      	subs	r0, r1, r0
    f012:	b200      	sxth	r0, r0
    f014:	2800      	cmp	r0, #0
    f016:	dd32      	ble.n	f07e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    f018:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    f01c:	f7fb fc78 	bl	a910 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    f020:	2800      	cmp	r0, #0
    f022:	d02c      	beq.n	f07e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    f024:	20ff      	movs	r0, #255	; 0xff
    f026:	f884 0271 	strb.w	r0, [r4, #625]	; 0x271
    f02a:	f8b4 00ce 	ldrh.w	r0, [r4, #206]	; 0xce
    f02e:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
    f032:	ae01      	add	r6, sp, #4
    f034:	1a40      	subs	r0, r0, r1
    f036:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    f03a:	1e40      	subs	r0, r0, #1
    f03c:	4408      	add	r0, r1
    f03e:	b285      	uxth	r5, r0
    f040:	e017      	b.n	f072 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xc0>
    f042:	9600      	str	r6, [sp, #0]
    f044:	f8b4 126c 	ldrh.w	r1, [r4, #620]	; 0x26c
    f048:	2300      	movs	r3, #0
    f04a:	2201      	movs	r2, #1
    f04c:	4620      	mov	r0, r4
    f04e:	f7f5 fc63 	bl	4918 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f8>
    f052:	2800      	cmp	r0, #0
    f054:	d013      	beq.n	f07e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    f056:	2801      	cmp	r0, #1
    f058:	d004      	beq.n	f064 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb2>
    f05a:	f240 6144 	movw	r1, #1604	; 0x644
    f05e:	2030      	movs	r0, #48	; 0x30
    f060:	f7f1 fca6 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f064:	f8b4 026c 	ldrh.w	r0, [r4, #620]	; 0x26c
    f068:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    f06c:	4408      	add	r0, r1
    f06e:	f8a4 026c 	strh.w	r0, [r4, #620]	; 0x26c
    f072:	f8b4 026c 	ldrh.w	r0, [r4, #620]	; 0x26c
    f076:	1a28      	subs	r0, r5, r0
    f078:	b200      	sxth	r0, r0
    f07a:	2800      	cmp	r0, #0
    f07c:	dae1      	bge.n	f042 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x90>
    f07e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f080:	2000      	movs	r0, #0
    f082:	4770      	bx	lr
    f084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f088:	4604      	mov	r4, r0
    f08a:	f000 f8ff 	bl	f28c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2da>
    f08e:	2700      	movs	r7, #0
    f090:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    f094:	f884 70e8 	strb.w	r7, [r4, #232]	; 0xe8
    f098:	2601      	movs	r6, #1
    f09a:	f884 60f3 	strb.w	r6, [r4, #243]	; 0xf3
    f09e:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    f0a0:	463d      	mov	r5, r7
    f0a2:	b130      	cbz	r0, f0b2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x100>
    f0a4:	f001 fd5d 	bl	10b62 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    f0a8:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    f0aa:	fbb0 f2f1 	udiv	r2, r0, r1
    f0ae:	fb01 0512 	mls	r5, r1, r2, r0
    f0b2:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
    f0b6:	2100      	movs	r1, #0
    f0b8:	4680      	mov	r8, r0
    f0ba:	f7fe fec5 	bl	de48 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    f0be:	e9f4 103e 	ldrd	r1, r0, [r4, #248]!	; 0xf8
    f0c2:	1949      	adds	r1, r1, r5
    f0c4:	4178      	adcs	r0, r7
    f0c6:	e9c4 1000 	strd	r1, r0, [r4]
    f0ca:	8920      	ldrh	r0, [r4, #8]
    f0cc:	3cf8      	subs	r4, #248	; 0xf8
    f0ce:	1c40      	adds	r0, r0, #1
    f0d0:	280a      	cmp	r0, #10
    f0d2:	d201      	bcs.n	f0d8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x126>
    f0d4:	f8a4 0100 	strh.w	r0, [r4, #256]	; 0x100
    f0d8:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    f0dc:	b138      	cbz	r0, f0ee <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x13c>
    f0de:	f8b4 0100 	ldrh.w	r0, [r4, #256]	; 0x100
    f0e2:	1c40      	adds	r0, r0, #1
    f0e4:	280a      	cmp	r0, #10
    f0e6:	d302      	bcc.n	f0ee <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x13c>
    f0e8:	f884 60f2 	strb.w	r6, [r4, #242]	; 0xf2
    f0ec:	e002      	b.n	f0f4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x142>
    f0ee:	2002      	movs	r0, #2
    f0f0:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    f0f4:	4620      	mov	r0, r4
    f0f6:	f000 f823 	bl	f140 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18e>
    f0fa:	b120      	cbz	r0, f106 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x154>
    f0fc:	4620      	mov	r0, r4
    f0fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f102:	f000 b80e 	b.w	f122 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x170>
    f106:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    f10a:	4641      	mov	r1, r8
    f10c:	f000 f8bc 	bl	f288 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d6>
    f110:	2800      	cmp	r0, #0
    f112:	d104      	bne.n	f11e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16c>
    f114:	f240 61e7 	movw	r1, #1767	; 0x6e7
    f118:	2030      	movs	r0, #48	; 0x30
    f11a:	f7f1 fc49 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f11e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f122:	b510      	push	{r4, lr}
    f124:	4604      	mov	r4, r0
    f126:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    f12a:	f7fb fd47 	bl	abbc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f12e:	2000      	movs	r0, #0
    f130:	7620      	strb	r0, [r4, #24]
    f132:	bd10      	pop	{r4, pc}
    f134:	b510      	push	{r4, lr}
    f136:	f7ff fd4c 	bl	ebd2 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    f13a:	f200 1015 	addw	r0, r0, #277	; 0x115
    f13e:	bd10      	pop	{r4, pc}
    f140:	b570      	push	{r4, r5, r6, lr}
    f142:	4605      	mov	r5, r0
    f144:	f890 0110 	ldrb.w	r0, [r0, #272]	; 0x110
    f148:	b108      	cbz	r0, f14e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x19c>
    f14a:	2001      	movs	r0, #1
    f14c:	bd70      	pop	{r4, r5, r6, pc}
    f14e:	e9d5 1042 	ldrd	r1, r0, [r5, #264]	; 0x108
    f152:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    f156:	4050      	eors	r0, r2
    f158:	ea70 0101 	orns	r1, r0, r1
    f15c:	d012      	beq.n	f184 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d2>
    f15e:	2400      	movs	r4, #0
    f160:	4621      	mov	r1, r4
    f162:	4628      	mov	r0, r5
    f164:	f7ff ffe6 	bl	f134 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
    f168:	e9f5 123e 	ldrd	r1, r2, [r5, #248]!	; 0xf8
    f16c:	1840      	adds	r0, r0, r1
    f16e:	4154      	adcs	r4, r2
    f170:	e9d5 2104 	ldrd	r2, r1, [r5, #16]
    f174:	3df8      	subs	r5, #248	; 0xf8
    f176:	1a10      	subs	r0, r2, r0
    f178:	41a1      	sbcs	r1, r4
    f17a:	d503      	bpl.n	f184 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d2>
    f17c:	4628      	mov	r0, r5
    f17e:	f7f4 fb2b 	bl	37d8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    f182:	e7e2      	b.n	f14a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x198>
    f184:	2000      	movs	r0, #0
    f186:	bd70      	pop	{r4, r5, r6, pc}
    f188:	b510      	push	{r4, lr}
    f18a:	4604      	mov	r4, r0
    f18c:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    f190:	f000 f988 	bl	f4a4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4f2>
    f194:	4601      	mov	r1, r0
    f196:	4620      	mov	r0, r4
    f198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f19c:	f7ff b9c7 	b.w	e52e <sym_DGN3THKILL676ISUGG6LI5PGTHVDBLTDPNXUCAA>
    f1a0:	b510      	push	{r4, lr}
    f1a2:	f7f8 fd93 	bl	7ccc <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    f1a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f1aa:	f7fb be65 	b.w	ae78 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    f1ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f1b2:	4604      	mov	r4, r0
    f1b4:	f890 0272 	ldrb.w	r0, [r0, #626]	; 0x272
    f1b8:	2800      	cmp	r0, #0
    f1ba:	d051      	beq.n	f260 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ae>
    f1bc:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    f1c0:	2803      	cmp	r0, #3
    f1c2:	d14d      	bne.n	f260 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ae>
    f1c4:	f894 906b 	ldrb.w	r9, [r4, #107]	; 0x6b
    f1c8:	f001 fab2 	bl	10730 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    f1cc:	4605      	mov	r5, r0
    f1ce:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    f1d2:	f7f5 fa6d 	bl	46b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x90>
    f1d6:	4428      	add	r0, r5
    f1d8:	b286      	uxth	r6, r0
    f1da:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    f1de:	f7f5 fa67 	bl	46b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x90>
    f1e2:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    f1e6:	fa1f f880 	uxth.w	r8, r0
    f1ea:	4648      	mov	r0, r9
    f1ec:	f7f8 fe2c 	bl	7e48 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f1f0:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    f1f4:	1a0d      	subs	r5, r1, r0
    f1f6:	4648      	mov	r0, r9
    f1f8:	f7f8 fe52 	bl	7ea0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f1fc:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    f200:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    f204:	fbb0 f0fa 	udiv	r0, r0, sl
    f208:	1a2d      	subs	r5, r5, r0
    f20a:	4648      	mov	r0, r9
    f20c:	f7f8 fe1c 	bl	7e48 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f210:	f8d4 1230 	ldr.w	r1, [r4, #560]	; 0x230
    f214:	1a0f      	subs	r7, r1, r0
    f216:	4648      	mov	r0, r9
    f218:	f7f8 fe42 	bl	7ea0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f21c:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    f220:	4401      	add	r1, r0
    f222:	fbb1 f0fa 	udiv	r0, r1, sl
    f226:	1a39      	subs	r1, r7, r0
    f228:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
    f22c:	4370      	muls	r0, r6
    f22e:	fbb0 f2f8 	udiv	r2, r0, r8
    f232:	2029      	movs	r0, #41	; 0x29
    f234:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    f238:	3260      	adds	r2, #96	; 0x60
    f23a:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
    f23e:	eb00 0052 	add.w	r0, r0, r2, lsr #1
    f242:	42a9      	cmp	r1, r5
    f244:	d801      	bhi.n	f24a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x298>
    f246:	4285      	cmp	r5, r0
    f248:	d901      	bls.n	f24e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x29c>
    f24a:	f7fd f80f 	bl	c26c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    f24e:	4631      	mov	r1, r6
    f250:	6920      	ldr	r0, [r4, #16]
    f252:	f7fd f873 	bl	c33c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    f256:	2100      	movs	r1, #0
    f258:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    f25c:	f884 1272 	strb.w	r1, [r4, #626]	; 0x272
    f260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f264:	b570      	push	{r4, r5, r6, lr}
    f266:	460c      	mov	r4, r1
    f268:	4605      	mov	r5, r0
    f26a:	f7f8 fe19 	bl	7ea0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f26e:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    f272:	4408      	add	r0, r1
    f274:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f278:	fbb0 f6f1 	udiv	r6, r0, r1
    f27c:	4628      	mov	r0, r5
    f27e:	f7f8 fde3 	bl	7e48 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f282:	4430      	add	r0, r6
    f284:	4420      	add	r0, r4
    f286:	bd70      	pop	{r4, r5, r6, pc}
    f288:	f7fa bee4 	b.w	a054 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    f28c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f28e:	4604      	mov	r4, r0
    f290:	f7ff fcc6 	bl	ec20 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f294:	b1f8      	cbz	r0, f2d6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x324>
    f296:	4620      	mov	r0, r4
    f298:	f7ff fcba 	bl	ec10 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    f29c:	b918      	cbnz	r0, f2a6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f4>
    f29e:	4620      	mov	r0, r4
    f2a0:	f7ff fcc0 	bl	ec24 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f2a4:	b140      	cbz	r0, f2b8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x306>
    f2a6:	245a      	movs	r4, #90	; 0x5a
    f2a8:	4668      	mov	r0, sp
    f2aa:	f7fd fa9d 	bl	c7e8 <mpsl_fem_pa_is_configured>
    f2ae:	f89d 0000 	ldrb.w	r0, [sp]
    f2b2:	b118      	cbz	r0, f2bc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30a>
    f2b4:	2501      	movs	r5, #1
    f2b6:	e002      	b.n	f2be <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30c>
    f2b8:	2450      	movs	r4, #80	; 0x50
    f2ba:	e7f5      	b.n	f2a8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f6>
    f2bc:	2500      	movs	r5, #0
    f2be:	a801      	add	r0, sp, #4
    f2c0:	f7fd fa7a 	bl	c7b8 <mpsl_fem_lna_is_configured>
    f2c4:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f2c8:	b100      	cbz	r0, f2cc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x31a>
    f2ca:	2001      	movs	r0, #1
    f2cc:	4305      	orrs	r5, r0
    f2ce:	d000      	beq.n	f2d2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x320>
    f2d0:	340a      	adds	r4, #10
    f2d2:	4620      	mov	r0, r4
    f2d4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f2d6:	2061      	movs	r0, #97	; 0x61
    f2d8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f2da:	b570      	push	{r4, r5, r6, lr}
    f2dc:	4604      	mov	r4, r0
    f2de:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    f2e0:	2500      	movs	r5, #0
    f2e2:	b130      	cbz	r0, f2f2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x340>
    f2e4:	f7f3 fe66 	bl	2fb4 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    f2e8:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    f2ea:	fbb0 f2f1 	udiv	r2, r0, r1
    f2ee:	fb01 0512 	mls	r5, r1, r2, r0
    f2f2:	4620      	mov	r0, r4
    f2f4:	f7ff fc69 	bl	ebca <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    f2f8:	e9d4 213e 	ldrd	r2, r1, [r4, #248]	; 0xf8
    f2fc:	4428      	add	r0, r5
    f2fe:	34e8      	adds	r4, #232	; 0xe8
    f300:	2500      	movs	r5, #0
    f302:	1882      	adds	r2, r0, r2
    f304:	eb45 0001 	adc.w	r0, r5, r1
    f308:	e9c4 2004 	strd	r2, r0, [r4, #16]
    f30c:	f804 5b0b 	strb.w	r5, [r4], #11
    f310:	2001      	movs	r0, #1
    f312:	f804 0901 	strb.w	r0, [r4], #-1
    f316:	2002      	movs	r0, #2
    f318:	f804 09f2 	strb.w	r0, [r4], #-242
    f31c:	4620      	mov	r0, r4
    f31e:	f7ff ffb5 	bl	f28c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2da>
    f322:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    f326:	4620      	mov	r0, r4
    f328:	f7ff ff0a 	bl	f140 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18e>
    f32c:	b930      	cbnz	r0, f33c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x38a>
    f32e:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    f332:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    f336:	f7ff ffa7 	bl	f288 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d6>
    f33a:	b128      	cbz	r0, f348 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x396>
    f33c:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    f340:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f344:	f7ff bf2c 	b.w	f1a0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>
    f348:	f240 712d 	movw	r1, #1837	; 0x72d
    f34c:	2030      	movs	r0, #48	; 0x30
    f34e:	f7f1 fb2f 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f352:	b510      	push	{r4, lr}
    f354:	4604      	mov	r4, r0
    f356:	2000      	movs	r0, #0
    f358:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    f35c:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    f360:	f7fb fc2c 	bl	abbc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f364:	2020      	movs	r0, #32
    f366:	f884 02a4 	strb.w	r0, [r4, #676]	; 0x2a4
    f36a:	bd10      	pop	{r4, pc}
    f36c:	b510      	push	{r4, lr}
    f36e:	b140      	cbz	r0, f382 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3d0>
    f370:	2909      	cmp	r1, #9
    f372:	d22f      	bcs.n	f3d4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x422>
    f374:	e8df f001 	tbb	[pc, r1]
    f378:	1e1e1607 	.word	0x1e1e1607
    f37c:	26222e1a 	.word	0x26222e1a
    f380:	002a      	.short	0x002a
    f382:	21cd      	movs	r1, #205	; 0xcd
    f384:	e023      	b.n	f3ce <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x41c>
    f386:	4604      	mov	r4, r0
    f388:	f7f4 f9f6 	bl	3778 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    f38c:	b110      	cbz	r0, f394 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3e2>
    f38e:	f240 2187 	movw	r1, #647	; 0x287
    f392:	e01c      	b.n	f3ce <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x41c>
    f394:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    f398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f39c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
    f3a0:	f7fb be46 	b.w	b030 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    f3a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f3a8:	f000 b8b1 	b.w	f50e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x55c>
    f3ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f3b0:	f7f8 be60 	b.w	8074 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    f3b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f3b8:	f7ff be64 	b.w	f084 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xd2>
    f3bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f3c0:	f7ff bc01 	b.w	ebc6 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    f3c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f3c8:	f7ff beab 	b.w	f122 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x170>
    f3cc:	21ed      	movs	r1, #237	; 0xed
    f3ce:	2030      	movs	r0, #48	; 0x30
    f3d0:	f7f1 faee 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f3d4:	21f1      	movs	r1, #241	; 0xf1
    f3d6:	e7fa      	b.n	f3ce <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x41c>
    f3d8:	b510      	push	{r4, lr}
    f3da:	0004      	movs	r4, r0
    f3dc:	d009      	beq.n	f3f2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x440>
    f3de:	2200      	movs	r2, #0
    f3e0:	2909      	cmp	r1, #9
    f3e2:	d25d      	bcs.n	f4a0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ee>
    f3e4:	e8df f001 	tbb	[pc, r1]
    f3e8:	43433b07 	.word	0x43433b07
    f3ec:	4f485c3f 	.word	0x4f485c3f
    f3f0:	0058      	.short	0x0058
    f3f2:	2196      	movs	r1, #150	; 0x96
    f3f4:	e051      	b.n	f49a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e8>
    f3f6:	f8c4 22ac 	str.w	r2, [r4, #684]	; 0x2ac
    f3fa:	f894 1270 	ldrb.w	r1, [r4, #624]	; 0x270
    f3fe:	4620      	mov	r0, r4
    f400:	b189      	cbz	r1, f426 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x474>
    f402:	f8b0 226e 	ldrh.w	r2, [r0, #622]	; 0x26e
    f406:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
    f40a:	428a      	cmp	r2, r1
    f40c:	d106      	bne.n	f41c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x46a>
    f40e:	f8b0 2224 	ldrh.w	r2, [r0, #548]	; 0x224
    f412:	1a51      	subs	r1, r2, r1
    f414:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
    f418:	4611      	mov	r1, r2
    f41a:	e00d      	b.n	f438 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x486>
    f41c:	1a51      	subs	r1, r2, r1
    f41e:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
    f422:	b291      	uxth	r1, r2
    f424:	e008      	b.n	f438 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x486>
    f426:	f8b0 126c 	ldrh.w	r1, [r0, #620]	; 0x26c
    f42a:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
    f42e:	1a89      	subs	r1, r1, r2
    f430:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
    f434:	f8b0 126c 	ldrh.w	r1, [r0, #620]	; 0x26c
    f438:	f8a0 1094 	strh.w	r1, [r0, #148]	; 0x94
    f43c:	e9d0 12a2 	ldrd	r1, r2, [r0, #648]	; 0x288
    f440:	f8c0 1290 	str.w	r1, [r0, #656]	; 0x290
    f444:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
    f448:	f7f5 fe00 	bl	504c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    f44c:	f894 022b 	ldrb.w	r0, [r4, #555]	; 0x22b
    f450:	2800      	cmp	r0, #0
    f452:	d020      	beq.n	f496 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e4>
    f454:	4620      	mov	r0, r4
    f456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f45a:	f7f5 b9e1 	b.w	4820 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x200>
    f45e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f462:	f000 b8a0 	b.w	f5a6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    f466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f46a:	f7f8 be03 	b.w	8074 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    f46e:	4620      	mov	r0, r4
    f470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f474:	f7f5 bc5a 	b.w	4d2c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x70c>
    f478:	2001      	movs	r0, #1
    f47a:	f7fa fb93 	bl	9ba4 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    f47e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f482:	f7fe bb92 	b.w	dbaa <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A>
    f486:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    f48a:	2804      	cmp	r0, #4
    f48c:	d001      	beq.n	f492 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e0>
    f48e:	21bb      	movs	r1, #187	; 0xbb
    f490:	e003      	b.n	f49a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e8>
    f492:	f884 225c 	strb.w	r2, [r4, #604]	; 0x25c
    f496:	bd10      	pop	{r4, pc}
    f498:	21c1      	movs	r1, #193	; 0xc1
    f49a:	2030      	movs	r0, #48	; 0x30
    f49c:	f7f1 fa88 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f4a0:	21c5      	movs	r1, #197	; 0xc5
    f4a2:	e7fa      	b.n	f49a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e8>
    f4a4:	b510      	push	{r4, lr}
    f4a6:	f7f8 fcfb 	bl	7ea0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f4aa:	f64d 7141 	movw	r1, #57153	; 0xdf41
    f4ae:	4408      	add	r0, r1
    f4b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f4b4:	fbb0 f0f1 	udiv	r0, r0, r1
    f4b8:	f500 70bf 	add.w	r0, r0, #382	; 0x17e
    f4bc:	bd10      	pop	{r4, pc}
    f4be:	b538      	push	{r3, r4, r5, lr}
    f4c0:	2500      	movs	r5, #0
    f4c2:	4604      	mov	r4, r0
    f4c4:	f880 525c 	strb.w	r5, [r0, #604]	; 0x25c
    f4c8:	f8a0 52a0 	strh.w	r5, [r0, #672]	; 0x2a0
    f4cc:	462b      	mov	r3, r5
    f4ce:	462a      	mov	r2, r5
    f4d0:	4629      	mov	r1, r5
    f4d2:	9500      	str	r5, [sp, #0]
    f4d4:	f7f5 fa20 	bl	4918 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f8>
    f4d8:	b120      	cbz	r0, f4e4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x532>
    f4da:	f240 211f 	movw	r1, #543	; 0x21f
    f4de:	2030      	movs	r0, #48	; 0x30
    f4e0:	f7f1 fa66 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f4e4:	f8c4 5258 	str.w	r5, [r4, #600]	; 0x258
    f4e8:	2001      	movs	r0, #1
    f4ea:	f8c4 5250 	str.w	r5, [r4, #592]	; 0x250
    f4ee:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    f4f2:	f8a4 526e 	strh.w	r5, [r4, #622]	; 0x26e
    f4f6:	f8a4 526c 	strh.w	r5, [r4, #620]	; 0x26c
    f4fa:	3494      	adds	r4, #148	; 0x94
    f4fc:	f884 51dd 	strb.w	r5, [r4, #477]	; 0x1dd
    f500:	8820      	ldrh	r0, [r4, #0]
    f502:	1e40      	subs	r0, r0, #1
    f504:	8020      	strh	r0, [r4, #0]
    f506:	f8a4 520e 	strh.w	r5, [r4, #526]	; 0x20e
    f50a:	2000      	movs	r0, #0
    f50c:	bd38      	pop	{r3, r4, r5, pc}
    f50e:	b570      	push	{r4, r5, r6, lr}
    f510:	4605      	mov	r5, r0
    f512:	f7ff fb81 	bl	ec18 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    f516:	b9c8      	cbnz	r0, f54c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x59a>
    f518:	2100      	movs	r1, #0
    f51a:	4628      	mov	r0, r5
    f51c:	f7ff fe0a 	bl	f134 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
    f520:	4604      	mov	r4, r0
    f522:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
    f526:	42a0      	cmp	r0, r4
    f528:	d20e      	bcs.n	f548 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x596>
    f52a:	1a20      	subs	r0, r4, r0
    f52c:	2867      	cmp	r0, #103	; 0x67
    f52e:	d200      	bcs.n	f532 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x580>
    f530:	2067      	movs	r0, #103	; 0x67
    f532:	2103      	movs	r1, #3
    f534:	f7fa fb46 	bl	9bc4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    f538:	b130      	cbz	r0, f548 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x596>
    f53a:	4628      	mov	r0, r5
    f53c:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    f540:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f544:	f7ff bb3f 	b.w	ebc6 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    f548:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    f54c:	4628      	mov	r0, r5
    f54e:	f7f4 f92f 	bl	37b0 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    f552:	2800      	cmp	r0, #0
    f554:	d004      	beq.n	f560 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5ae>
    f556:	f240 21bd 	movw	r1, #701	; 0x2bd
    f55a:	2030      	movs	r0, #48	; 0x30
    f55c:	f7f1 fa28 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f560:	bd70      	pop	{r4, r5, r6, pc}
    f562:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f566:	f001 0307 	and.w	r3, r1, #7
    f56a:	7802      	ldrb	r2, [r0, #0]
    f56c:	2101      	movs	r1, #1
    f56e:	4099      	lsls	r1, r3
    f570:	438a      	bics	r2, r1
    f572:	7002      	strb	r2, [r0, #0]
    f574:	4770      	bx	lr

0000f576 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    f576:	b510      	push	{r4, lr}
    f578:	460c      	mov	r4, r1
    f57a:	f7f1 fe69 	bl	1250 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    f57e:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    f582:	2820      	cmp	r0, #32
    f584:	d00c      	beq.n	f5a0 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY+0x2a>
    f586:	f7fb fb3b 	bl	ac00 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    f58a:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    f58e:	f7fb fb15 	bl	abbc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f592:	2800      	cmp	r0, #0
    f594:	d104      	bne.n	f5a0 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY+0x2a>
    f596:	f640 4129 	movw	r1, #3113	; 0xc29
    f59a:	2031      	movs	r0, #49	; 0x31
    f59c:	f7f1 fa08 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f5a0:	bd10      	pop	{r4, pc}

0000f5a2 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    f5a2:	2000      	movs	r0, #0
    f5a4:	4770      	bx	lr

0000f5a6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    f5a6:	f7f2 bae7 	b.w	1b78 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA>

0000f5aa <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
    f5aa:	2100      	movs	r1, #0
    f5ac:	f880 109d 	strb.w	r1, [r0, #157]	; 0x9d
    f5b0:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f5b4:	f880 10a1 	strb.w	r1, [r0, #161]	; 0xa1
    f5b8:	f890 122b 	ldrb.w	r1, [r0, #555]	; 0x22b
    f5bc:	b109      	cbz	r1, f5c2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
    f5be:	2102      	movs	r1, #2
    f5c0:	e000      	b.n	f5c4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
    f5c2:	2103      	movs	r1, #3
    f5c4:	f7f4 bfea 	b.w	459c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    f5c8:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    f5cc:	28fe      	cmp	r0, #254	; 0xfe
    f5ce:	d001      	beq.n	f5d4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
    f5d0:	2001      	movs	r0, #1
    f5d2:	4770      	bx	lr
    f5d4:	2000      	movs	r0, #0
    f5d6:	4770      	bx	lr
    f5d8:	b510      	push	{r4, lr}
    f5da:	2801      	cmp	r0, #1
    f5dc:	d006      	beq.n	f5ec <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    f5de:	2802      	cmp	r0, #2
    f5e0:	d004      	beq.n	f5ec <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    f5e2:	f240 21d7 	movw	r1, #727	; 0x2d7
    f5e6:	2006      	movs	r0, #6
    f5e8:	f7f1 f9e2 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f5ec:	bd10      	pop	{r4, pc}
    f5ee:	2801      	cmp	r0, #1
    f5f0:	d002      	beq.n	f5f8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
    f5f2:	2802      	cmp	r0, #2
    f5f4:	d105      	bne.n	f602 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    f5f6:	e002      	b.n	f5fe <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
    f5f8:	2901      	cmp	r1, #1
    f5fa:	d004      	beq.n	f606 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    f5fc:	e001      	b.n	f602 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    f5fe:	2902      	cmp	r1, #2
    f600:	d001      	beq.n	f606 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    f602:	2000      	movs	r0, #0
    f604:	4770      	bx	lr
    f606:	2001      	movs	r0, #1
    f608:	4770      	bx	lr
    f60a:	1a40      	subs	r0, r0, r1
    f60c:	b200      	sxth	r0, r0
    f60e:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    f612:	4288      	cmp	r0, r1
    f614:	dc01      	bgt.n	f61a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
    f616:	2800      	cmp	r0, #0
    f618:	dc01      	bgt.n	f61e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
    f61a:	2001      	movs	r0, #1
    f61c:	4770      	bx	lr
    f61e:	2000      	movs	r0, #0
    f620:	4770      	bx	lr
    f622:	6840      	ldr	r0, [r0, #4]
    f624:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    f628:	2912      	cmp	r1, #18
    f62a:	d001      	beq.n	f630 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x86>
    f62c:	2002      	movs	r0, #2
    f62e:	4770      	bx	lr
    f630:	2113      	movs	r1, #19
    f632:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f636:	2000      	movs	r0, #0
    f638:	4770      	bx	lr
    f63a:	b510      	push	{r4, lr}
    f63c:	6843      	ldr	r3, [r0, #4]
    f63e:	4604      	mov	r4, r0
    f640:	f893 012c 	ldrb.w	r0, [r3, #300]	; 0x12c
    f644:	2808      	cmp	r0, #8
    f646:	d20d      	bcs.n	f664 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xba>
    f648:	f500 7210 	add.w	r2, r0, #576	; 0x240
    f64c:	f1c0 0008 	rsb	r0, r0, #8
    f650:	b2c1      	uxtb	r1, r0
    f652:	1898      	adds	r0, r3, r2
    f654:	f7f1 fa4e 	bl	af4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    f658:	6861      	ldr	r1, [r4, #4]
    f65a:	f891 212c 	ldrb.w	r2, [r1, #300]	; 0x12c
    f65e:	4410      	add	r0, r2
    f660:	f881 012c 	strb.w	r0, [r1, #300]	; 0x12c
    f664:	6862      	ldr	r2, [r4, #4]
    f666:	f892 112c 	ldrb.w	r1, [r2, #300]	; 0x12c
    f66a:	3908      	subs	r1, #8
    f66c:	2904      	cmp	r1, #4
    f66e:	d20d      	bcs.n	f68c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xe2>
    f670:	f501 708e 	add.w	r0, r1, #284	; 0x11c
    f674:	f1c1 0104 	rsb	r1, r1, #4
    f678:	b2c9      	uxtb	r1, r1
    f67a:	4410      	add	r0, r2
    f67c:	f7f1 fa3a 	bl	af4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    f680:	6861      	ldr	r1, [r4, #4]
    f682:	f891 212c 	ldrb.w	r2, [r1, #300]	; 0x12c
    f686:	4410      	add	r0, r2
    f688:	f881 012c 	strb.w	r0, [r1, #300]	; 0x12c
    f68c:	6860      	ldr	r0, [r4, #4]
    f68e:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    f692:	290c      	cmp	r1, #12
    f694:	d30f      	bcc.n	f6b6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x10c>
    f696:	d005      	beq.n	f6a4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xfa>
    f698:	f640 01c2 	movw	r1, #2242	; 0x8c2
    f69c:	f04f 0031 	mov.w	r0, #49	; 0x31
    f6a0:	f7f1 f986 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f6a4:	2100      	movs	r1, #0
    f6a6:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
    f6aa:	2101      	movs	r1, #1
    f6ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f6b0:	2004      	movs	r0, #4
    f6b2:	f7f6 bb57 	b.w	5d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    f6b6:	bd10      	pop	{r4, pc}
    f6b8:	6842      	ldr	r2, [r0, #4]
    f6ba:	2131      	movs	r1, #49	; 0x31
    f6bc:	f882 109d 	strb.w	r1, [r2, #157]	; 0x9d
    f6c0:	6840      	ldr	r0, [r0, #4]
    f6c2:	2100      	movs	r1, #0
    f6c4:	f880 12c4 	strb.w	r1, [r0, #708]	; 0x2c4
    f6c8:	4770      	bx	lr
    f6ca:	b510      	push	{r4, lr}
    f6cc:	6841      	ldr	r1, [r0, #4]
    f6ce:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
    f6d2:	2a15      	cmp	r2, #21
    f6d4:	d004      	beq.n	f6e0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x136>
    f6d6:	f240 7183 	movw	r1, #1923	; 0x783
    f6da:	2031      	movs	r0, #49	; 0x31
    f6dc:	f7f1 f968 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f6e0:	2201      	movs	r2, #1
    f6e2:	f881 20db 	strb.w	r2, [r1, #219]	; 0xdb
    f6e6:	6840      	ldr	r0, [r0, #4]
    f6e8:	2116      	movs	r1, #22
    f6ea:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f6ee:	bd10      	pop	{r4, pc}
    f6f0:	f7ff b8e1 	b.w	e8b6 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>
    f6f4:	b510      	push	{r4, lr}
    f6f6:	6841      	ldr	r1, [r0, #4]
    f6f8:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
    f6fc:	2a11      	cmp	r2, #17
    f6fe:	d004      	beq.n	f70a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x160>
    f700:	f240 717b 	movw	r1, #1915	; 0x77b
    f704:	2031      	movs	r0, #49	; 0x31
    f706:	f7f1 f953 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f70a:	2201      	movs	r2, #1
    f70c:	f881 20db 	strb.w	r2, [r1, #219]	; 0xdb
    f710:	6840      	ldr	r0, [r0, #4]
    f712:	2112      	movs	r1, #18
    f714:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f718:	bd10      	pop	{r4, pc}
    f71a:	b510      	push	{r4, lr}
    f71c:	6841      	ldr	r1, [r0, #4]
    f71e:	f891 009e 	ldrb.w	r0, [r1, #158]	; 0x9e
    f722:	2822      	cmp	r0, #34	; 0x22
    f724:	d005      	beq.n	f732 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x188>
    f726:	b120      	cbz	r0, f732 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x188>
    f728:	f240 71e7 	movw	r1, #2023	; 0x7e7
    f72c:	2031      	movs	r0, #49	; 0x31
    f72e:	f7f1 f93f 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f732:	2023      	movs	r0, #35	; 0x23
    f734:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    f738:	bd10      	pop	{r4, pc}
    f73a:	b510      	push	{r4, lr}
    f73c:	6840      	ldr	r0, [r0, #4]
    f73e:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    f742:	2916      	cmp	r1, #22
    f744:	d004      	beq.n	f750 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a6>
    f746:	f44f 61f2 	mov.w	r1, #1936	; 0x790
    f74a:	2031      	movs	r0, #49	; 0x31
    f74c:	f7f1 f930 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f750:	211a      	movs	r1, #26
    f752:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f756:	bd10      	pop	{r4, pc}
    f758:	f7ff b89b 	b.w	e892 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>
    f75c:	b510      	push	{r4, lr}
    f75e:	6840      	ldr	r0, [r0, #4]
    f760:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    f764:	2916      	cmp	r1, #22
    f766:	d004      	beq.n	f772 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1c8>
    f768:	f240 718a 	movw	r1, #1930	; 0x78a
    f76c:	2031      	movs	r0, #49	; 0x31
    f76e:	f7f1 f91f 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f772:	2118      	movs	r1, #24
    f774:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f778:	bd10      	pop	{r4, pc}
    f77a:	f7ff b921 	b.w	e9c0 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>
    f77e:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f782:	f001 0107 	and.w	r1, r1, #7
    f786:	7800      	ldrb	r0, [r0, #0]
    f788:	40c8      	lsrs	r0, r1
    f78a:	f000 0001 	and.w	r0, r0, #1
    f78e:	4770      	bx	lr

0000f790 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>:
    f790:	b510      	push	{r4, lr}
    f792:	2801      	cmp	r0, #1
    f794:	d006      	beq.n	f7a4 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x14>
    f796:	2802      	cmp	r0, #2
    f798:	d006      	beq.n	f7a8 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x18>
    f79a:	f240 2175 	movw	r1, #629	; 0x275
    f79e:	2078      	movs	r0, #120	; 0x78
    f7a0:	f7f1 f906 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f7a4:	2000      	movs	r0, #0
    f7a6:	bd10      	pop	{r4, pc}
    f7a8:	2001      	movs	r0, #1
    f7aa:	bd10      	pop	{r4, pc}

0000f7ac <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>:
    f7ac:	207f      	movs	r0, #127	; 0x7f
    f7ae:	f000 b88c 	b.w	f8ca <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x92>

0000f7b2 <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>:
    f7b2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    f7b6:	f000 b888 	b.w	f8ca <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x92>

0000f7ba <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>:
    f7ba:	b510      	push	{r4, lr}
    f7bc:	4604      	mov	r4, r0
    f7be:	f7f7 fe4f 	bl	7460 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f7c2:	1e64      	subs	r4, r4, #1
    f7c4:	b2e2      	uxtb	r2, r4
    f7c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f7ca:	f000 b85b 	b.w	f884 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x4c>

0000f7ce <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>:
    f7ce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f7d2:	4607      	mov	r7, r0
    f7d4:	461e      	mov	r6, r3
    f7d6:	4690      	mov	r8, r2
    f7d8:	460c      	mov	r4, r1
    f7da:	4608      	mov	r0, r1
    f7dc:	f7ff ffed 	bl	f7ba <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>
    f7e0:	b1e8      	cbz	r0, f81e <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x50>
    f7e2:	687d      	ldr	r5, [r7, #4]
    f7e4:	2121      	movs	r1, #33	; 0x21
    f7e6:	f105 00ec 	add.w	r0, r5, #236	; 0xec
    f7ea:	3580      	adds	r5, #128	; 0x80
    f7ec:	f7ff ffc7 	bl	f77e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1d4>
    f7f0:	b1b8      	cbz	r0, f822 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x54>
    f7f2:	1e64      	subs	r4, r4, #1
    f7f4:	6f29      	ldr	r1, [r5, #112]	; 0x70
    f7f6:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
    f7f8:	b2e2      	uxtb	r2, r4
    f7fa:	f000 f843 	bl	f884 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x4c>
    f7fe:	b180      	cbz	r0, f822 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x54>
    f800:	6878      	ldr	r0, [r7, #4]
    f802:	f890 1149 	ldrb.w	r1, [r0, #329]	; 0x149
    f806:	f88d 1000 	strb.w	r1, [sp]
    f80a:	9900      	ldr	r1, [sp, #0]
    f80c:	9100      	str	r1, [sp, #0]
    f80e:	f89d 1000 	ldrb.w	r1, [sp]
    f812:	f200 1047 	addw	r0, r0, #327	; 0x147
    f816:	b131      	cbz	r1, f826 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x58>
    f818:	203a      	movs	r0, #58	; 0x3a
    f81a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f81e:	2011      	movs	r0, #17
    f820:	e7fb      	b.n	f81a <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x4c>
    f822:	201a      	movs	r0, #26
    f824:	e7f9      	b.n	f81a <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x4c>
    f826:	1c81      	adds	r1, r0, #2
    f828:	700e      	strb	r6, [r1, #0]
    f82a:	2101      	movs	r1, #1
    f82c:	40a1      	lsls	r1, r4
    f82e:	7001      	strb	r1, [r0, #0]
    f830:	f880 8001 	strb.w	r8, [r0, #1]
    f834:	2000      	movs	r0, #0
    f836:	e7f0      	b.n	f81a <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x4c>

0000f838 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>:
    f838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f83c:	460d      	mov	r5, r1
    f83e:	4606      	mov	r6, r0
    f840:	f7ff ffb4 	bl	f7ac <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>
    f844:	4607      	mov	r7, r0
    f846:	f7ff ffb4 	bl	f7b2 <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>
    f84a:	2400      	movs	r4, #0
    f84c:	4285      	cmp	r5, r0
    f84e:	d100      	bne.n	f852 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x1a>
    f850:	2401      	movs	r4, #1
    f852:	42bd      	cmp	r5, r7
    f854:	d101      	bne.n	f85a <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x22>
    f856:	f044 0402 	orr.w	r4, r4, #2
    f85a:	f000 f826 	bl	f8aa <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x72>
    f85e:	2200      	movs	r2, #0
    f860:	4601      	mov	r1, r0
    f862:	2301      	movs	r3, #1
    f864:	fa03 f002 	lsl.w	r0, r3, r2
    f868:	4208      	tst	r0, r1
    f86a:	d005      	beq.n	f878 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x40>
    f86c:	eb06 0042 	add.w	r0, r6, r2, lsl #1
    f870:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
    f874:	f880 406f 	strb.w	r4, [r0, #111]	; 0x6f
    f878:	1c52      	adds	r2, r2, #1
    f87a:	b2d2      	uxtb	r2, r2
    f87c:	2a02      	cmp	r2, #2
    f87e:	d3f1      	bcc.n	f864 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x2c>
    f880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f884:	b510      	push	{r4, lr}
    f886:	4614      	mov	r4, r2
    f888:	4602      	mov	r2, r0
    f88a:	2000      	movs	r0, #0
    f88c:	4603      	mov	r3, r0
    f88e:	2c02      	cmp	r4, #2
    f890:	d205      	bcs.n	f89e <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x66>
    f892:	4610      	mov	r0, r2
    f894:	f000 f810 	bl	f8b8 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x80>
    f898:	2101      	movs	r1, #1
    f89a:	40a1      	lsls	r1, r4
    f89c:	b2cb      	uxtb	r3, r1
    f89e:	4203      	tst	r3, r0
    f8a0:	d001      	beq.n	f8a6 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x6e>
    f8a2:	2001      	movs	r0, #1
    f8a4:	bd10      	pop	{r4, pc}
    f8a6:	2000      	movs	r0, #0
    f8a8:	bd10      	pop	{r4, pc}
    f8aa:	b510      	push	{r4, lr}
    f8ac:	f7f7 fdd8 	bl	7460 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f8b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f8b4:	f000 b800 	b.w	f8b8 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x80>
    f8b8:	0a00      	lsrs	r0, r0, #8
    f8ba:	2201      	movs	r2, #1
    f8bc:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    f8c0:	07c0      	lsls	r0, r0, #31
    f8c2:	d000      	beq.n	f8c6 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x8e>
    f8c4:	2203      	movs	r2, #3
    f8c6:	4610      	mov	r0, r2
    f8c8:	4770      	bx	lr
    f8ca:	b508      	push	{r3, lr}
    f8cc:	2301      	movs	r3, #1
    f8ce:	f640 1288 	movw	r2, #2440	; 0x988
    f8d2:	4669      	mov	r1, sp
    f8d4:	f7fc ff8e 	bl	c7f4 <mpsl_fem_tx_power_split>
    f8d8:	bd08      	pop	{r3, pc}
    f8da:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f8de:	f001 0107 	and.w	r1, r1, #7
    f8e2:	7800      	ldrb	r0, [r0, #0]
    f8e4:	40c8      	lsrs	r0, r1
    f8e6:	f000 0001 	and.w	r0, r0, #1
    f8ea:	4770      	bx	lr
    f8ec:	b118      	cbz	r0, f8f6 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xbe>
    f8ee:	2802      	cmp	r0, #2
    f8f0:	d001      	beq.n	f8f6 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xbe>
    f8f2:	2001      	movs	r0, #1
    f8f4:	4770      	bx	lr
    f8f6:	2000      	movs	r0, #0
    f8f8:	4770      	bx	lr

0000f8fa <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    f8fa:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f8fc:	7881      	ldrb	r1, [r0, #2]
    f8fe:	2500      	movs	r5, #0
    f900:	4604      	mov	r4, r0
    f902:	291a      	cmp	r1, #26
    f904:	d024      	beq.n	f950 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    f906:	dc0e      	bgt.n	f926 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
    f908:	2916      	cmp	r1, #22
    f90a:	d22b      	bcs.n	f964 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f90c:	e8df f001 	tbb	[pc, r1]
    f910:	2a2a2a2a 	.word	0x2a2a2a2a
    f914:	2a2a202a 	.word	0x2a2a202a
    f918:	2a2a2a2a 	.word	0x2a2a2a2a
    f91c:	2a2a2a2a 	.word	0x2a2a2a2a
    f920:	202a2a2a 	.word	0x202a2a2a
    f924:	2020      	.short	0x2020
    f926:	292a      	cmp	r1, #42	; 0x2a
    f928:	d01c      	beq.n	f964 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f92a:	dc0b      	bgt.n	f944 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
    f92c:	f1a1 011e 	sub.w	r1, r1, #30
    f930:	290c      	cmp	r1, #12
    f932:	d217      	bcs.n	f964 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f934:	e8df f001 	tbb	[pc, r1]
    f938:	16161616 	.word	0x16161616
    f93c:	16161616 	.word	0x16161616
    f940:	0c161616 	.word	0x0c161616
    f944:	393a      	subs	r1, #58	; 0x3a
    f946:	2902      	cmp	r1, #2
    f948:	d20c      	bcs.n	f964 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f94a:	e8df f001 	tbb	[pc, r1]
    f94e:	010b      	.short	0x010b
    f950:	8820      	ldrh	r0, [r4, #0]
    f952:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    f956:	d205      	bcs.n	f964 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f958:	4669      	mov	r1, sp
    f95a:	f7fe f990 	bl	dc7e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f95e:	b118      	cbz	r0, f968 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6e>
    f960:	2002      	movs	r0, #2
    f962:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f964:	2012      	movs	r0, #18
    f966:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f968:	9901      	ldr	r1, [sp, #4]
    f96a:	4668      	mov	r0, sp
    f96c:	f891 2130 	ldrb.w	r2, [r1, #304]	; 0x130
    f970:	f88d 2008 	strb.w	r2, [sp, #8]
    f974:	9a02      	ldr	r2, [sp, #8]
    f976:	9202      	str	r2, [sp, #8]
    f978:	f89d 2008 	ldrb.w	r2, [sp, #8]
    f97c:	f501 7198 	add.w	r1, r1, #304	; 0x130
    f980:	b10a      	cbz	r2, f986 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8c>
    f982:	200c      	movs	r0, #12
    f984:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f986:	78a2      	ldrb	r2, [r4, #2]
    f988:	704a      	strb	r2, [r1, #1]
    f98a:	22ff      	movs	r2, #255	; 0xff
    f98c:	700a      	strb	r2, [r1, #0]
    f98e:	f7fe fd09 	bl	e3a4 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    f992:	4628      	mov	r0, r5
    f994:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f996 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    f996:	b510      	push	{r4, lr}
    f998:	4604      	mov	r4, r0
    f99a:	7800      	ldrb	r0, [r0, #0]
    f99c:	b108      	cbz	r0, f9a2 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0xc>
    f99e:	2801      	cmp	r0, #1
    f9a0:	d116      	bne.n	f9d0 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x3a>
    f9a2:	f000 fe0c 	bl	105be <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ba>
    f9a6:	b120      	cbz	r0, f9b2 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x1c>
    f9a8:	f7f2 fd34 	bl	2414 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    f9ac:	b108      	cbz	r0, f9b2 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x1c>
    f9ae:	200c      	movs	r0, #12
    f9b0:	bd10      	pop	{r4, pc}
    f9b2:	7820      	ldrb	r0, [r4, #0]
    f9b4:	f7ff ff9a 	bl	f8ec <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    f9b8:	2801      	cmp	r0, #1
    f9ba:	d10b      	bne.n	f9d4 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x3e>
    f9bc:	7820      	ldrb	r0, [r4, #0]
    f9be:	f7ff ff95 	bl	f8ec <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    f9c2:	2801      	cmp	r0, #1
    f9c4:	d104      	bne.n	f9d0 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x3a>
    f9c6:	79a0      	ldrb	r0, [r4, #6]
    f9c8:	2103      	movs	r1, #3
    f9ca:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    f9ce:	d001      	beq.n	f9d4 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x3e>
    f9d0:	2012      	movs	r0, #18
    f9d2:	bd10      	pop	{r4, pc}
    f9d4:	7820      	ldrb	r0, [r4, #0]
    f9d6:	f7ff ff89 	bl	f8ec <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    f9da:	1de2      	adds	r2, r4, #7
    f9dc:	f104 0317 	add.w	r3, r4, #23
    f9e0:	1c61      	adds	r1, r4, #1
    f9e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f9e6:	f7f2 bd35 	b.w	2454 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0000f9ea <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    f9ea:	b510      	push	{r4, lr}
    f9ec:	4604      	mov	r4, r0
    f9ee:	f7f7 fc61 	bl	72b4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20c>
    f9f2:	b108      	cbz	r0, f9f8 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    f9f4:	200c      	movs	r0, #12
    f9f6:	bd10      	pop	{r4, pc}
    f9f8:	7820      	ldrb	r0, [r4, #0]
    f9fa:	b118      	cbz	r0, fa04 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    f9fc:	2801      	cmp	r0, #1
    f9fe:	d001      	beq.n	fa04 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    fa00:	2012      	movs	r0, #18
    fa02:	bd10      	pop	{r4, pc}
    fa04:	f7ff ff72 	bl	f8ec <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    fa08:	1c61      	adds	r1, r4, #1
    fa0a:	f7f3 fcdd 	bl	33c8 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI>
    fa0e:	b108      	cbz	r0, fa14 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    fa10:	2000      	movs	r0, #0
    fa12:	bd10      	pop	{r4, pc}
    fa14:	2007      	movs	r0, #7
    fa16:	bd10      	pop	{r4, pc}

0000fa18 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    fa18:	b510      	push	{r4, lr}
    fa1a:	f000 fdd0 	bl	105be <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ba>
    fa1e:	b120      	cbz	r0, fa2a <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    fa20:	f7f2 fcf8 	bl	2414 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    fa24:	b108      	cbz	r0, fa2a <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    fa26:	200c      	movs	r0, #12
    fa28:	bd10      	pop	{r4, pc}
    fa2a:	f7f2 fd67 	bl	24fc <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    fa2e:	2000      	movs	r0, #0
    fa30:	bd10      	pop	{r4, pc}

0000fa32 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    fa32:	b510      	push	{r4, lr}
    fa34:	f7f7 fc3e 	bl	72b4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20c>
    fa38:	b108      	cbz	r0, fa3e <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    fa3a:	200c      	movs	r0, #12
    fa3c:	bd10      	pop	{r4, pc}
    fa3e:	f7f3 fd21 	bl	3484 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>
    fa42:	2000      	movs	r0, #0
    fa44:	f7f2 fd8c 	bl	2560 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>
    fa48:	2000      	movs	r0, #0
    fa4a:	bd10      	pop	{r4, pc}

0000fa4c <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    fa4c:	b510      	push	{r4, lr}
    fa4e:	460b      	mov	r3, r1
    fa50:	2201      	movs	r2, #1
    fa52:	f100 0110 	add.w	r1, r0, #16
    fa56:	f7fe f8f4 	bl	dc42 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    fa5a:	2000      	movs	r0, #0
    fa5c:	bd10      	pop	{r4, pc}

0000fa5e <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    fa5e:	b510      	push	{r4, lr}
    fa60:	8800      	ldrh	r0, [r0, #0]
    fa62:	2100      	movs	r1, #0
    fa64:	f7f1 fad2 	bl	100c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fa68:	b118      	cbz	r0, fa72 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    fa6a:	f890 12b0 	ldrb.w	r1, [r0, #688]	; 0x2b0
    fa6e:	b111      	cbz	r1, fa76 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    fa70:	e007      	b.n	fa82 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    fa72:	2002      	movs	r0, #2
    fa74:	bd10      	pop	{r4, pc}
    fa76:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    fa7a:	2915      	cmp	r1, #21
    fa7c:	d003      	beq.n	fa86 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    fa7e:	2916      	cmp	r1, #22
    fa80:	d001      	beq.n	fa86 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    fa82:	200c      	movs	r0, #12
    fa84:	bd10      	pop	{r4, pc}
    fa86:	2102      	movs	r1, #2
    fa88:	f880 12b0 	strb.w	r1, [r0, #688]	; 0x2b0
    fa8c:	2000      	movs	r0, #0
    fa8e:	bd10      	pop	{r4, pc}

0000fa90 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
    fa90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fa92:	4605      	mov	r5, r0
    fa94:	8800      	ldrh	r0, [r0, #0]
    fa96:	2100      	movs	r1, #0
    fa98:	f7f1 fab8 	bl	100c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fa9c:	0004      	movs	r4, r0
    fa9e:	d003      	beq.n	faa8 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
    faa0:	f894 02b0 	ldrb.w	r0, [r4, #688]	; 0x2b0
    faa4:	b110      	cbz	r0, faac <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
    faa6:	e011      	b.n	facc <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
    faa8:	2002      	movs	r0, #2
    faaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    faac:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    fab0:	2815      	cmp	r0, #21
    fab2:	d001      	beq.n	fab8 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
    fab4:	2816      	cmp	r0, #22
    fab6:	d109      	bne.n	facc <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
    fab8:	f894 02e4 	ldrb.w	r0, [r4, #740]	; 0x2e4
    fabc:	f88d 0000 	strb.w	r0, [sp]
    fac0:	9800      	ldr	r0, [sp, #0]
    fac2:	9000      	str	r0, [sp, #0]
    fac4:	f89d 0000 	ldrb.w	r0, [sp]
    fac8:	2601      	movs	r6, #1
    faca:	b108      	cbz	r0, fad0 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x40>
    facc:	200c      	movs	r0, #12
    face:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fad0:	2210      	movs	r2, #16
    fad2:	1ca9      	adds	r1, r5, #2
    fad4:	f204 20b1 	addw	r0, r4, #689	; 0x2b1
    fad8:	f001 f9d5 	bl	10e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    fadc:	f884 62b0 	strb.w	r6, [r4, #688]	; 0x2b0
    fae0:	2000      	movs	r0, #0
    fae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000fae4 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    fae4:	b510      	push	{r4, lr}
    fae6:	2108      	movs	r1, #8
    fae8:	f7f1 f812 	bl	b10 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    faec:	2000      	movs	r0, #0
    faee:	bd10      	pop	{r4, pc}

0000faf0 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    faf0:	b510      	push	{r4, lr}
    faf2:	4604      	mov	r4, r0
    faf4:	f7f7 fabc 	bl	7070 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
    faf8:	f7ff f898 	bl	ec2c <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    fafc:	f7f2 fe9c 	bl	2838 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    fb00:	7020      	strb	r0, [r4, #0]
    fb02:	2000      	movs	r0, #0
    fb04:	bd10      	pop	{r4, pc}

0000fb06 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    fb06:	21fb      	movs	r1, #251	; 0xfb
    fb08:	8001      	strh	r1, [r0, #0]
    fb0a:	f640 0248 	movw	r2, #2120	; 0x848
    fb0e:	8042      	strh	r2, [r0, #2]
    fb10:	8081      	strh	r1, [r0, #4]
    fb12:	80c2      	strh	r2, [r0, #6]
    fb14:	2000      	movs	r0, #0
    fb16:	4770      	bx	lr

0000fb18 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    fb18:	b51c      	push	{r2, r3, r4, lr}
    fb1a:	8800      	ldrh	r0, [r0, #0]
    fb1c:	4669      	mov	r1, sp
    fb1e:	f7fe f8ae 	bl	dc7e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fb22:	2800      	cmp	r0, #0
    fb24:	d10d      	bne.n	fb42 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2a>
    fb26:	f89d 0000 	ldrb.w	r0, [sp]
    fb2a:	9c01      	ldr	r4, [sp, #4]
    fb2c:	2801      	cmp	r0, #1
    fb2e:	f504 7498 	add.w	r4, r4, #304	; 0x130
    fb32:	d103      	bne.n	fb3c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x24>
    fb34:	9801      	ldr	r0, [sp, #4]
    fb36:	f000 fd2c 	bl	10592 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28e>
    fb3a:	b118      	cbz	r0, fb44 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
    fb3c:	7ce0      	ldrb	r0, [r4, #19]
    fb3e:	b118      	cbz	r0, fb48 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x30>
    fb40:	203a      	movs	r0, #58	; 0x3a
    fb42:	bd1c      	pop	{r2, r3, r4, pc}
    fb44:	2002      	movs	r0, #2
    fb46:	bd1c      	pop	{r2, r3, r4, pc}
    fb48:	2001      	movs	r0, #1
    fb4a:	74e0      	strb	r0, [r4, #19]
    fb4c:	2000      	movs	r0, #0
    fb4e:	bd1c      	pop	{r2, r3, r4, pc}

0000fb50 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
    fb50:	2108      	movs	r1, #8
    fb52:	7001      	strb	r1, [r0, #0]
    fb54:	2000      	movs	r0, #0
    fb56:	4770      	bx	lr

0000fb58 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    fb58:	b510      	push	{r4, lr}
    fb5a:	4604      	mov	r4, r0
    fb5c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    fb60:	f000 fd5a 	bl	10618 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x314>
    fb64:	f7f2 fe68 	bl	2838 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    fb68:	7020      	strb	r0, [r4, #0]
    fb6a:	f000 fd0f 	bl	1058c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x288>
    fb6e:	f7f2 fe63 	bl	2838 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    fb72:	7060      	strb	r0, [r4, #1]
    fb74:	2000      	movs	r0, #0
    fb76:	bd10      	pop	{r4, pc}

0000fb78 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    fb78:	b510      	push	{r4, lr}
    fb7a:	4604      	mov	r4, r0
    fb7c:	f7f3 fc88 	bl	3490 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ>
    fb80:	7020      	strb	r0, [r4, #0]
    fb82:	2000      	movs	r0, #0
    fb84:	bd10      	pop	{r4, pc}

0000fb86 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
    fb86:	b510      	push	{r4, lr}
    fb88:	4604      	mov	r4, r0
    fb8a:	7800      	ldrb	r0, [r0, #0]
    fb8c:	b108      	cbz	r0, fb92 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
    fb8e:	2801      	cmp	r0, #1
    fb90:	d110      	bne.n	fbb4 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    fb92:	f000 fd14 	bl	105be <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ba>
    fb96:	b120      	cbz	r0, fba2 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    fb98:	f7f2 fc3c 	bl	2414 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    fb9c:	b108      	cbz	r0, fba2 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    fb9e:	200c      	movs	r0, #12
    fba0:	bd10      	pop	{r4, pc}
    fba2:	7820      	ldrb	r0, [r4, #0]
    fba4:	f7ff fea2 	bl	f8ec <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    fba8:	1c61      	adds	r1, r4, #1
    fbaa:	f7fe f83b 	bl	dc24 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
    fbae:	b108      	cbz	r0, fbb4 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    fbb0:	2000      	movs	r0, #0
    fbb2:	bd10      	pop	{r4, pc}
    fbb4:	2012      	movs	r0, #18
    fbb6:	bd10      	pop	{r4, pc}

0000fbb8 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    fbb8:	b510      	push	{r4, lr}
    fbba:	4604      	mov	r4, r0
    fbbc:	f7f7 fb7a 	bl	72b4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20c>
    fbc0:	b108      	cbz	r0, fbc6 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    fbc2:	200c      	movs	r0, #12
    fbc4:	bd10      	pop	{r4, pc}
    fbc6:	7820      	ldrb	r0, [r4, #0]
    fbc8:	b108      	cbz	r0, fbce <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    fbca:	2801      	cmp	r0, #1
    fbcc:	d107      	bne.n	fbde <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    fbce:	f7ff fe8d 	bl	f8ec <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    fbd2:	1c61      	adds	r1, r4, #1
    fbd4:	f7f3 fc36 	bl	3444 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ>
    fbd8:	b108      	cbz	r0, fbde <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    fbda:	2000      	movs	r0, #0
    fbdc:	bd10      	pop	{r4, pc}
    fbde:	2012      	movs	r0, #18
    fbe0:	bd10      	pop	{r4, pc}

0000fbe2 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
    fbe2:	b510      	push	{r4, lr}
    fbe4:	4604      	mov	r4, r0
    fbe6:	f000 fcea 	bl	105be <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ba>
    fbea:	b108      	cbz	r0, fbf0 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
    fbec:	200c      	movs	r0, #12
    fbee:	bd10      	pop	{r4, pc}
    fbf0:	7820      	ldrb	r0, [r4, #0]
    fbf2:	b100      	cbz	r0, fbf6 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0x14>
    fbf4:	2001      	movs	r0, #1
    fbf6:	f7f2 fc07 	bl	2408 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
    fbfa:	2000      	movs	r0, #0
    fbfc:	bd10      	pop	{r4, pc}

0000fbfe <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    fbfe:	b51c      	push	{r2, r3, r4, lr}
    fc00:	4604      	mov	r4, r0
    fc02:	f7f7 fa35 	bl	7070 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
    fc06:	2000      	movs	r0, #0
    fc08:	f88d 0002 	strb.w	r0, [sp, #2]
    fc0c:	2103      	movs	r1, #3
    fc0e:	f88d 1001 	strb.w	r1, [sp, #1]
    fc12:	f814 1b01 	ldrb.w	r1, [r4], #1
    fc16:	f88d 1003 	strb.w	r1, [sp, #3]
    fc1a:	f88d 0000 	strb.w	r0, [sp]
    fc1e:	4668      	mov	r0, sp
    fc20:	9401      	str	r4, [sp, #4]
    fc22:	f000 f9c1 	bl	ffa8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    fc26:	bd1c      	pop	{r2, r3, r4, pc}

0000fc28 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    fc28:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    fc2a:	4605      	mov	r5, r0
    fc2c:	f7f7 fa20 	bl	7070 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
    fc30:	4606      	mov	r6, r0
    fc32:	7828      	ldrb	r0, [r5, #0]
    fc34:	2400      	movs	r4, #0
    fc36:	b160      	cbz	r0, fc52 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    fc38:	f88d 4000 	strb.w	r4, [sp]
    fc3c:	2001      	movs	r0, #1
    fc3e:	f10d 0101 	add.w	r1, sp, #1
    fc42:	f7f1 fe19 	bl	1878 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    fc46:	b120      	cbz	r0, fc52 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    fc48:	4668      	mov	r0, sp
    fc4a:	f000 f897 	bl	fd7c <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    fc4e:	2800      	cmp	r0, #0
    fc50:	d112      	bne.n	fc78 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    fc52:	f88d 400c 	strb.w	r4, [sp, #12]
    fc56:	4630      	mov	r0, r6
    fc58:	f7fe ffde 	bl	ec18 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    fc5c:	b118      	cbz	r0, fc66 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
    fc5e:	2080      	movs	r0, #128	; 0x80
    fc60:	f8ad 000d 	strh.w	r0, [sp, #13]
    fc64:	e001      	b.n	fc6a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
    fc66:	f8ad 400d 	strh.w	r4, [sp, #13]
    fc6a:	f88d 400f 	strb.w	r4, [sp, #15]
    fc6e:	7828      	ldrb	r0, [r5, #0]
    fc70:	2801      	cmp	r0, #1
    fc72:	d003      	beq.n	fc7c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
    fc74:	b138      	cbz	r0, fc86 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
    fc76:	2012      	movs	r0, #18
    fc78:	b004      	add	sp, #16
    fc7a:	bd70      	pop	{r4, r5, r6, pc}
    fc7c:	a903      	add	r1, sp, #12
    fc7e:	4630      	mov	r0, r6
    fc80:	f7f7 fa12 	bl	70a8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    fc84:	e7f8      	b.n	fc78 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    fc86:	4630      	mov	r0, r6
    fc88:	f000 fca0 	bl	105cc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2c8>
    fc8c:	e7f4      	b.n	fc78 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

0000fc8e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    fc8e:	b530      	push	{r4, r5, lr}
    fc90:	b08b      	sub	sp, #44	; 0x2c
    fc92:	4604      	mov	r4, r0
    fc94:	f7f7 f9ec 	bl	7070 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
    fc98:	4602      	mov	r2, r0
    fc9a:	7920      	ldrb	r0, [r4, #4]
    fc9c:	2804      	cmp	r0, #4
    fc9e:	d803      	bhi.n	fca8 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    fca0:	8860      	ldrh	r0, [r4, #2]
    fca2:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    fca6:	d902      	bls.n	fcae <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
    fca8:	2012      	movs	r0, #18
    fcaa:	b00b      	add	sp, #44	; 0x2c
    fcac:	bd30      	pop	{r4, r5, pc}
    fcae:	2500      	movs	r5, #0
    fcb0:	f88d 5004 	strb.w	r5, [sp, #4]
    fcb4:	7921      	ldrb	r1, [r4, #4]
    fcb6:	9500      	str	r5, [sp, #0]
    fcb8:	f89d 0000 	ldrb.w	r0, [sp]
    fcbc:	2905      	cmp	r1, #5
    fcbe:	f040 0010 	orr.w	r0, r0, #16
    fcc2:	f88d 0000 	strb.w	r0, [sp]
    fcc6:	d254      	bcs.n	fd72 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
    fcc8:	e8df f001 	tbb	[pc, r1]
    fccc:	11050803 	.word	0x11050803
    fcd0:	000b      	.short	0x000b
    fcd2:	f040 0001 	orr.w	r0, r0, #1
    fcd6:	f040 0002 	orr.w	r0, r0, #2
    fcda:	e006      	b.n	fcea <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
    fcdc:	f040 0009 	orr.w	r0, r0, #9
    fce0:	e001      	b.n	fce6 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
    fce2:	f040 0001 	orr.w	r0, r0, #1
    fce6:	f040 0004 	orr.w	r0, r0, #4
    fcea:	f88d 0000 	strb.w	r0, [sp]
    fcee:	f8bd 0000 	ldrh.w	r0, [sp]
    fcf2:	9000      	str	r0, [sp, #0]
    fcf4:	f8bd 0000 	ldrh.w	r0, [sp]
    fcf8:	f8ad 0005 	strh.w	r0, [sp, #5]
    fcfc:	8821      	ldrh	r1, [r4, #0]
    fcfe:	f8dd 0006 	ldr.w	r0, [sp, #6]
    fd02:	f361 201f 	bfi	r0, r1, #8, #24
    fd06:	f8cd 0006 	str.w	r0, [sp, #6]
    fd0a:	8861      	ldrh	r1, [r4, #2]
    fd0c:	f8dd 0009 	ldr.w	r0, [sp, #9]
    fd10:	f361 201f 	bfi	r0, r1, #8, #24
    fd14:	f8cd 0009 	str.w	r0, [sp, #9]
    fd18:	7b60      	ldrb	r0, [r4, #13]
    fd1a:	f88d 000d 	strb.w	r0, [sp, #13]
    fd1e:	7960      	ldrb	r0, [r4, #5]
    fd20:	f88d 000e 	strb.w	r0, [sp, #14]
    fd24:	79a0      	ldrb	r0, [r4, #6]
    fd26:	f88d 000f 	strb.w	r0, [sp, #15]
    fd2a:	f8d4 0007 	ldr.w	r0, [r4, #7]
    fd2e:	9004      	str	r0, [sp, #16]
    fd30:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    fd34:	f8ad 0014 	strh.w	r0, [sp, #20]
    fd38:	7ba0      	ldrb	r0, [r4, #14]
    fd3a:	f88d 0016 	strb.w	r0, [sp, #22]
    fd3e:	207f      	movs	r0, #127	; 0x7f
    fd40:	f88d 0017 	strb.w	r0, [sp, #23]
    fd44:	2001      	movs	r0, #1
    fd46:	f88d 0018 	strb.w	r0, [sp, #24]
    fd4a:	f88d 5019 	strb.w	r5, [sp, #25]
    fd4e:	f88d 001a 	strb.w	r0, [sp, #26]
    fd52:	f88d 501b 	strb.w	r5, [sp, #27]
    fd56:	4610      	mov	r0, r2
    fd58:	f7fe ff7e 	bl	ec58 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    fd5c:	f88d 001c 	strb.w	r0, [sp, #28]
    fd60:	f88d 501d 	strb.w	r5, [sp, #29]
    fd64:	f88d 501e 	strb.w	r5, [sp, #30]
    fd68:	a909      	add	r1, sp, #36	; 0x24
    fd6a:	a801      	add	r0, sp, #4
    fd6c:	f7f6 ffb6 	bl	6cdc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    fd70:	e79b      	b.n	fcaa <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
    fd72:	f241 31a9 	movw	r1, #5033	; 0x13a9
    fd76:	2039      	movs	r0, #57	; 0x39
    fd78:	f7f0 fe1a 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000fd7c <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    fd7c:	b570      	push	{r4, r5, r6, lr}
    fd7e:	4604      	mov	r4, r0
    fd80:	7800      	ldrb	r0, [r0, #0]
    fd82:	2101      	movs	r1, #1
    fd84:	f7f1 f942 	bl	100c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fd88:	0005      	movs	r5, r0
    fd8a:	d007      	beq.n	fd9c <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    fd8c:	f7ff f90e 	bl	efac <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    fd90:	b160      	cbz	r0, fdac <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    fd92:	4628      	mov	r0, r5
    fd94:	f7fe ff46 	bl	ec24 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    fd98:	b110      	cbz	r0, fda0 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    fd9a:	e005      	b.n	fda8 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    fd9c:	2042      	movs	r0, #66	; 0x42
    fd9e:	bd70      	pop	{r4, r5, r6, pc}
    fda0:	4628      	mov	r0, r5
    fda2:	f7fe ff35 	bl	ec10 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    fda6:	b108      	cbz	r0, fdac <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    fda8:	200c      	movs	r0, #12
    fdaa:	bd70      	pop	{r4, r5, r6, pc}
    fdac:	1c61      	adds	r1, r4, #1
    fdae:	4628      	mov	r0, r5
    fdb0:	f7fe ff4a 	bl	ec48 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    fdb4:	2000      	movs	r0, #0
    fdb6:	bd70      	pop	{r4, r5, r6, pc}

0000fdb8 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    fdb8:	b50e      	push	{r1, r2, r3, lr}
    fdba:	8882      	ldrh	r2, [r0, #4]
    fdbc:	f244 2390 	movw	r3, #17040	; 0x4290
    fdc0:	429a      	cmp	r2, r3
    fdc2:	d901      	bls.n	fdc8 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x10>
    fdc4:	2012      	movs	r0, #18
    fdc6:	bd0e      	pop	{r1, r2, r3, pc}
    fdc8:	f640 0348 	movw	r3, #2120	; 0x848
    fdcc:	429a      	cmp	r2, r3
    fdce:	d300      	bcc.n	fdd2 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    fdd0:	461a      	mov	r2, r3
    fdd2:	8803      	ldrh	r3, [r0, #0]
    fdd4:	f8ad 3000 	strh.w	r3, [sp]
    fdd8:	8843      	ldrh	r3, [r0, #2]
    fdda:	f8ad 3002 	strh.w	r3, [sp, #2]
    fdde:	f8ad 2004 	strh.w	r2, [sp, #4]
    fde2:	8843      	ldrh	r3, [r0, #2]
    fde4:	f8ad 3006 	strh.w	r3, [sp, #6]
    fde8:	f8ad 2008 	strh.w	r2, [sp, #8]
    fdec:	8800      	ldrh	r0, [r0, #0]
    fdee:	8008      	strh	r0, [r1, #0]
    fdf0:	4668      	mov	r0, sp
    fdf2:	f7f7 f9db 	bl	71ac <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x104>
    fdf6:	bd0e      	pop	{r1, r2, r3, pc}

0000fdf8 <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>:
    fdf8:	b510      	push	{r4, lr}
    fdfa:	4604      	mov	r4, r0
    fdfc:	f7f7 f938 	bl	7070 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
    fe00:	7861      	ldrb	r1, [r4, #1]
    fe02:	f3c1 0240 	ubfx	r2, r1, #1, #1
    fe06:	f001 0101 	and.w	r1, r1, #1
    fe0a:	f7fe ff19 	bl	ec40 <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>
    fe0e:	2000      	movs	r0, #0
    fe10:	bd10      	pop	{r4, pc}

0000fe12 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    fe12:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    fe14:	4604      	mov	r4, r0
    fe16:	f10d 0007 	add.w	r0, sp, #7
    fe1a:	9000      	str	r0, [sp, #0]
    fe1c:	7922      	ldrb	r2, [r4, #4]
    fe1e:	78e1      	ldrb	r1, [r4, #3]
    fe20:	78a0      	ldrb	r0, [r4, #2]
    fe22:	f10d 0306 	add.w	r3, sp, #6
    fe26:	f000 fbff 	bl	10628 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x324>
    fe2a:	2800      	cmp	r0, #0
    fe2c:	d109      	bne.n	fe42 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x30>
    fe2e:	8820      	ldrh	r0, [r4, #0]
    fe30:	f8ad 0004 	strh.w	r0, [sp, #4]
    fe34:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    fe38:	f8ad 0008 	strh.w	r0, [sp, #8]
    fe3c:	a801      	add	r0, sp, #4
    fe3e:	f000 f96e 	bl	1011e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    fe42:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000fe44 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
    fe44:	b510      	push	{r4, lr}
    fe46:	4604      	mov	r4, r0
    fe48:	f000 fbb9 	bl	105be <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ba>
    fe4c:	b120      	cbz	r0, fe58 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    fe4e:	f7f2 fae1 	bl	2414 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    fe52:	b108      	cbz	r0, fe58 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    fe54:	200c      	movs	r0, #12
    fe56:	bd10      	pop	{r4, pc}
    fe58:	7820      	ldrb	r0, [r4, #0]
    fe5a:	f7ff fd47 	bl	f8ec <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    fe5e:	79e2      	ldrb	r2, [r4, #7]
    fe60:	1c61      	adds	r1, r4, #1
    fe62:	f7f2 fa8b 	bl	237c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
    fe66:	b108      	cbz	r0, fe6c <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
    fe68:	2000      	movs	r0, #0
    fe6a:	bd10      	pop	{r4, pc}
    fe6c:	2002      	movs	r0, #2
    fe6e:	bd10      	pop	{r4, pc}

0000fe70 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    fe70:	b510      	push	{r4, lr}
    fe72:	4604      	mov	r4, r0
    fe74:	2001      	movs	r0, #1
    fe76:	f000 fa67 	bl	10348 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
    fe7a:	b128      	cbz	r0, fe88 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    fe7c:	4621      	mov	r1, r4
    fe7e:	2001      	movs	r0, #1
    fe80:	f7f1 fd12 	bl	18a8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    fe84:	2000      	movs	r0, #0
    fe86:	bd10      	pop	{r4, pc}
    fe88:	200c      	movs	r0, #12
    fe8a:	bd10      	pop	{r4, pc}

0000fe8c <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
    fe8c:	b510      	push	{r4, lr}
    fe8e:	8800      	ldrh	r0, [r0, #0]
    fe90:	f7f2 fb4a 	bl	2528 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
    fe94:	b108      	cbz	r0, fe9a <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
    fe96:	2000      	movs	r0, #0
    fe98:	bd10      	pop	{r4, pc}
    fe9a:	2030      	movs	r0, #48	; 0x30
    fe9c:	bd10      	pop	{r4, pc}

0000fe9e <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    fe9e:	b51c      	push	{r2, r3, r4, lr}
    fea0:	4604      	mov	r4, r0
    fea2:	f7f7 f8e5 	bl	7070 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
    fea6:	2000      	movs	r0, #0
    fea8:	f88d 0000 	strb.w	r0, [sp]
    feac:	f88d 0002 	strb.w	r0, [sp, #2]
    feb0:	2003      	movs	r0, #3
    feb2:	f88d 0001 	strb.w	r0, [sp, #1]
    feb6:	f814 0b01 	ldrb.w	r0, [r4], #1
    feba:	f88d 0003 	strb.w	r0, [sp, #3]
    febe:	4668      	mov	r0, sp
    fec0:	9401      	str	r4, [sp, #4]
    fec2:	f000 f8da 	bl	1007a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    fec6:	bd1c      	pop	{r2, r3, r4, pc}

0000fec8 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    fec8:	b51c      	push	{r2, r3, r4, lr}
    feca:	8801      	ldrh	r1, [r0, #0]
    fecc:	f8ad 1000 	strh.w	r1, [sp]
    fed0:	8841      	ldrh	r1, [r0, #2]
    fed2:	f8ad 1002 	strh.w	r1, [sp, #2]
    fed6:	8801      	ldrh	r1, [r0, #0]
    fed8:	f8ad 1004 	strh.w	r1, [sp, #4]
    fedc:	8840      	ldrh	r0, [r0, #2]
    fede:	f8ad 0006 	strh.w	r0, [sp, #6]
    fee2:	4668      	mov	r0, sp
    fee4:	f7f7 fa02 	bl	72ec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x244>
    fee8:	bd1c      	pop	{r2, r3, r4, pc}

0000feea <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    feea:	b510      	push	{r4, lr}
    feec:	f7f1 fd00 	bl	18f0 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY>
    fef0:	2000      	movs	r0, #0
    fef2:	bd10      	pop	{r4, pc}

0000fef4 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>:
    fef4:	b510      	push	{r4, lr}
    fef6:	460c      	mov	r4, r1
    fef8:	2100      	movs	r1, #0
    fefa:	f7f1 f887 	bl	100c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fefe:	b118      	cbz	r0, ff08 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x14>
    ff00:	2c02      	cmp	r4, #2
    ff02:	d903      	bls.n	ff0c <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x18>
    ff04:	2012      	movs	r0, #18
    ff06:	bd10      	pop	{r4, pc}
    ff08:	2002      	movs	r0, #2
    ff0a:	bd10      	pop	{r4, pc}
    ff0c:	f014 0101 	ands.w	r1, r4, #1
    ff10:	f880 122d 	strb.w	r1, [r0, #557]	; 0x22d
    ff14:	f3c4 0240 	ubfx	r2, r4, #1, #1
    ff18:	f880 222c 	strb.w	r2, [r0, #556]	; 0x22c
    ff1c:	d004      	beq.n	ff28 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
    ff1e:	f890 122a 	ldrb.w	r1, [r0, #554]	; 0x22a
    ff22:	b109      	cbz	r1, ff28 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
    ff24:	f7ff f845 	bl	efb2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    ff28:	2000      	movs	r0, #0
    ff2a:	bd10      	pop	{r4, pc}

0000ff2c <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    ff2c:	b51c      	push	{r2, r3, r4, lr}
    ff2e:	460c      	mov	r4, r1
    ff30:	4669      	mov	r1, sp
    ff32:	f7fd fea4 	bl	dc7e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ff36:	2800      	cmp	r0, #0
    ff38:	d105      	bne.n	ff46 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x1a>
    ff3a:	2100      	movs	r1, #0
    ff3c:	4622      	mov	r2, r4
    ff3e:	9801      	ldr	r0, [sp, #4]
    ff40:	f000 face 	bl	104e0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    ff44:	2000      	movs	r0, #0
    ff46:	bd1c      	pop	{r2, r3, r4, pc}

0000ff48 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>:
    ff48:	b510      	push	{r4, lr}
    ff4a:	4604      	mov	r4, r0
    ff4c:	7800      	ldrb	r0, [r0, #0]
    ff4e:	28ff      	cmp	r0, #255	; 0xff
    ff50:	d009      	beq.n	ff66 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1e>
    ff52:	2101      	movs	r1, #1
    ff54:	f7f1 f85a 	bl	100c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ff58:	b118      	cbz	r0, ff62 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1a>
    ff5a:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    ff5e:	8441      	strh	r1, [r0, #34]	; 0x22
    ff60:	e005      	b.n	ff6e <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x26>
    ff62:	2042      	movs	r0, #66	; 0x42
    ff64:	bd10      	pop	{r4, pc}
    ff66:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    ff6a:	f7f4 fac3 	bl	44f4 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>
    ff6e:	2000      	movs	r0, #0
    ff70:	bd10      	pop	{r4, pc}

0000ff72 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    ff72:	b510      	push	{r4, lr}
    ff74:	4604      	mov	r4, r0
    ff76:	f7f7 f9f9 	bl	736c <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>
    ff7a:	b118      	cbz	r0, ff84 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x12>
    ff7c:	2000      	movs	r0, #0
    ff7e:	f000 f9e3 	bl	10348 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
    ff82:	b128      	cbz	r0, ff90 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x1e>
    ff84:	4621      	mov	r1, r4
    ff86:	2000      	movs	r0, #0
    ff88:	f7f1 fc8e 	bl	18a8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    ff8c:	2000      	movs	r0, #0
    ff8e:	bd10      	pop	{r4, pc}
    ff90:	200c      	movs	r0, #12
    ff92:	bd10      	pop	{r4, pc}

0000ff94 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    ff94:	b510      	push	{r4, lr}
    ff96:	7800      	ldrb	r0, [r0, #0]
    ff98:	b100      	cbz	r0, ff9c <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
    ff9a:	2001      	movs	r0, #1
    ff9c:	f7f4 fad4 	bl	4548 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
    ffa0:	2000      	movs	r0, #0
    ffa2:	bd10      	pop	{r4, pc}

0000ffa4 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    ffa4:	f7f7 b902 	b.w	71ac <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x104>

0000ffa8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    ffa8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    ffac:	4606      	mov	r6, r0
    ffae:	7845      	ldrb	r5, [r0, #1]
    ffb0:	7800      	ldrb	r0, [r0, #0]
    ffb2:	2101      	movs	r1, #1
    ffb4:	f7f1 f82a 	bl	100c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ffb8:	0004      	movs	r4, r0
    ffba:	d01e      	beq.n	fffa <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
    ffbc:	f7fe fdfb 	bl	ebb6 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    ffc0:	78f1      	ldrb	r1, [r6, #3]
    ffc2:	4281      	cmp	r1, r0
    ffc4:	d800      	bhi.n	ffc8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
    ffc6:	4608      	mov	r0, r1
    ffc8:	4607      	mov	r7, r0
    ffca:	2d04      	cmp	r5, #4
    ffcc:	d018      	beq.n	10000 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
    ffce:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ffd0:	f7fd fd26 	bl	da20 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    ffd4:	4438      	add	r0, r7
    ffd6:	b281      	uxth	r1, r0
    ffd8:	4620      	mov	r0, r4
    ffda:	2201      	movs	r2, #1
    ffdc:	f000 f9c6 	bl	1036c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x68>
    ffe0:	2800      	cmp	r0, #0
    ffe2:	d10b      	bne.n	fffc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    ffe4:	2d03      	cmp	r5, #3
    ffe6:	d000      	beq.n	ffea <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    ffe8:	b1df      	cbz	r7, 10022 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    ffea:	4620      	mov	r0, r4
    ffec:	f7fe fe18 	bl	ec20 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    fff0:	7871      	ldrb	r1, [r6, #1]
    fff2:	2903      	cmp	r1, #3
    fff4:	d010      	beq.n	10018 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    fff6:	b9a0      	cbnz	r0, 10022 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    fff8:	e004      	b.n	10004 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
    fffa:	2042      	movs	r0, #66	; 0x42
    fffc:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   10000:	b97f      	cbnz	r7, 10022 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10002:	e7f2      	b.n	ffea <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
   10004:	2904      	cmp	r1, #4
   10006:	d107      	bne.n	10018 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   10008:	4620      	mov	r0, r4
   1000a:	f7fe ffcf 	bl	efac <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   1000e:	b140      	cbz	r0, 10022 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10010:	6b60      	ldr	r0, [r4, #52]	; 0x34
   10012:	f7fd fccc 	bl	d9ae <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
   10016:	b120      	cbz	r0, 10022 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10018:	2d01      	cmp	r5, #1
   1001a:	d004      	beq.n	10026 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
   1001c:	2d03      	cmp	r5, #3
   1001e:	d002      	beq.n	10026 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
   10020:	e00e      	b.n	10040 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
   10022:	2012      	movs	r0, #18
   10024:	e7ea      	b.n	fffc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   10026:	4620      	mov	r0, r4
   10028:	f7fe fdfa 	bl	ec20 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   1002c:	b108      	cbz	r0, 10032 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
   1002e:	2200      	movs	r2, #0
   10030:	e002      	b.n	10038 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
   10032:	2d01      	cmp	r5, #1
   10034:	d013      	beq.n	1005e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
   10036:	2201      	movs	r2, #1
   10038:	4668      	mov	r0, sp
   1003a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1003c:	f7fd fc53 	bl	d8e6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   10040:	2d04      	cmp	r5, #4
   10042:	d018      	beq.n	10076 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   10044:	6872      	ldr	r2, [r6, #4]
   10046:	463b      	mov	r3, r7
   10048:	2101      	movs	r1, #1
   1004a:	6b60      	ldr	r0, [r4, #52]	; 0x34
   1004c:	f7fd fc7f 	bl	d94e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   10050:	b138      	cbz	r0, 10062 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
   10052:	7870      	ldrb	r0, [r6, #1]
   10054:	2802      	cmp	r0, #2
   10056:	d006      	beq.n	10066 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   10058:	2803      	cmp	r0, #3
   1005a:	d004      	beq.n	10066 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   1005c:	e00b      	b.n	10076 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   1005e:	2202      	movs	r2, #2
   10060:	e7ea      	b.n	10038 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
   10062:	2007      	movs	r0, #7
   10064:	e7ca      	b.n	fffc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   10066:	6b60      	ldr	r0, [r4, #52]	; 0x34
   10068:	f7fd fcda 	bl	da20 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   1006c:	4602      	mov	r2, r0
   1006e:	2101      	movs	r1, #1
   10070:	6b60      	ldr	r0, [r4, #52]	; 0x34
   10072:	f7fd fcb2 	bl	d9da <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   10076:	2000      	movs	r0, #0
   10078:	e7c0      	b.n	fffc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

0001007a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
   1007a:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   1007e:	4607      	mov	r7, r0
   10080:	7845      	ldrb	r5, [r0, #1]
   10082:	78c6      	ldrb	r6, [r0, #3]
   10084:	7800      	ldrb	r0, [r0, #0]
   10086:	2101      	movs	r1, #1
   10088:	f7f0 ffc0 	bl	100c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1008c:	0004      	movs	r4, r0
   1008e:	d003      	beq.n	10098 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
   10090:	f7fe fdc8 	bl	ec24 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   10094:	b118      	cbz	r0, 1009e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
   10096:	e003      	b.n	100a0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
   10098:	2042      	movs	r0, #66	; 0x42
   1009a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   1009e:	2600      	movs	r6, #0
   100a0:	6b60      	ldr	r0, [r4, #52]	; 0x34
   100a2:	f7fd fcc1 	bl	da28 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
   100a6:	4430      	add	r0, r6
   100a8:	b281      	uxth	r1, r0
   100aa:	4688      	mov	r8, r1
   100ac:	4620      	mov	r0, r4
   100ae:	2201      	movs	r2, #1
   100b0:	f000 f95c 	bl	1036c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x68>
   100b4:	2800      	cmp	r0, #0
   100b6:	d1f0      	bne.n	1009a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   100b8:	2d04      	cmp	r5, #4
   100ba:	d008      	beq.n	100ce <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   100bc:	2d03      	cmp	r5, #3
   100be:	d00a      	beq.n	100d6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
   100c0:	b12e      	cbz	r6, 100ce <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   100c2:	4620      	mov	r0, r4
   100c4:	f7fe ff72 	bl	efac <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   100c8:	b118      	cbz	r0, 100d2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
   100ca:	200c      	movs	r0, #12
   100cc:	e7e5      	b.n	1009a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   100ce:	2012      	movs	r0, #18
   100d0:	e7e3      	b.n	1009a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   100d2:	2d01      	cmp	r5, #1
   100d4:	d10c      	bne.n	100f0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
   100d6:	4620      	mov	r0, r4
   100d8:	f7fe fda2 	bl	ec20 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   100dc:	b108      	cbz	r0, 100e2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
   100de:	2204      	movs	r2, #4
   100e0:	e002      	b.n	100e8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   100e2:	2d01      	cmp	r5, #1
   100e4:	d010      	beq.n	10108 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
   100e6:	2205      	movs	r2, #5
   100e8:	4668      	mov	r0, sp
   100ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
   100ec:	f7fd fbfb 	bl	d8e6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   100f0:	687a      	ldr	r2, [r7, #4]
   100f2:	4633      	mov	r3, r6
   100f4:	2100      	movs	r1, #0
   100f6:	6b60      	ldr	r0, [r4, #52]	; 0x34
   100f8:	f7fd fc29 	bl	d94e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   100fc:	b130      	cbz	r0, 1010c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
   100fe:	2d02      	cmp	r5, #2
   10100:	d006      	beq.n	10110 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   10102:	2d03      	cmp	r5, #3
   10104:	d004      	beq.n	10110 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   10106:	e008      	b.n	1011a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
   10108:	2206      	movs	r2, #6
   1010a:	e7ed      	b.n	100e8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   1010c:	2007      	movs	r0, #7
   1010e:	e7c4      	b.n	1009a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   10110:	4642      	mov	r2, r8
   10112:	2100      	movs	r1, #0
   10114:	6b60      	ldr	r0, [r4, #52]	; 0x34
   10116:	f7fd fc60 	bl	d9da <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   1011a:	2000      	movs	r0, #0
   1011c:	e7bd      	b.n	1009a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

0001011e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
   1011e:	b510      	push	{r4, lr}
   10120:	4604      	mov	r4, r0
   10122:	8880      	ldrh	r0, [r0, #4]
   10124:	b128      	cbz	r0, 10132 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   10126:	2801      	cmp	r0, #1
   10128:	d003      	beq.n	10132 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   1012a:	2802      	cmp	r0, #2
   1012c:	d001      	beq.n	10132 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   1012e:	2012      	movs	r0, #18
   10130:	bd10      	pop	{r4, pc}
   10132:	78e0      	ldrb	r0, [r4, #3]
   10134:	f000 f9b1 	bl	1049a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
   10138:	b148      	cbz	r0, 1014e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   1013a:	78a0      	ldrb	r0, [r4, #2]
   1013c:	f000 f9ad 	bl	1049a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
   10140:	b128      	cbz	r0, 1014e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   10142:	4620      	mov	r0, r4
   10144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10148:	2101      	movs	r1, #1
   1014a:	f000 b862 	b.w	10212 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   1014e:	2011      	movs	r0, #17
   10150:	bd10      	pop	{r4, pc}

00010152 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
   10152:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   10154:	460c      	mov	r4, r1
   10156:	4605      	mov	r5, r0
   10158:	8800      	ldrh	r0, [r0, #0]
   1015a:	4669      	mov	r1, sp
   1015c:	f7fd fd8f 	bl	dc7e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10160:	2800      	cmp	r0, #0
   10162:	d106      	bne.n	10172 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
   10164:	9801      	ldr	r0, [sp, #4]
   10166:	8829      	ldrh	r1, [r5, #0]
   10168:	8021      	strh	r1, [r4, #0]
   1016a:	f8b0 00c8 	ldrh.w	r0, [r0, #200]	; 0xc8
   1016e:	8060      	strh	r0, [r4, #2]
   10170:	2000      	movs	r0, #0
   10172:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00010174 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
   10174:	b510      	push	{r4, lr}
   10176:	4604      	mov	r4, r0
   10178:	4601      	mov	r1, r0
   1017a:	2000      	movs	r0, #0
   1017c:	f7f1 fb7c 	bl	1878 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   10180:	b910      	cbnz	r0, 10188 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
   10182:	2000      	movs	r0, #0
   10184:	6020      	str	r0, [r4, #0]
   10186:	80a0      	strh	r0, [r4, #4]
   10188:	2000      	movs	r0, #0
   1018a:	bd10      	pop	{r4, pc}

0001018c <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
   1018c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   1018e:	460c      	mov	r4, r1
   10190:	4605      	mov	r5, r0
   10192:	8800      	ldrh	r0, [r0, #0]
   10194:	4669      	mov	r1, sp
   10196:	f7fd fd72 	bl	dc7e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1019a:	b108      	cbz	r0, 101a0 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
   1019c:	2002      	movs	r0, #2
   1019e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   101a0:	78a8      	ldrb	r0, [r5, #2]
   101a2:	b158      	cbz	r0, 101bc <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x30>
   101a4:	f000 f9f2 	bl	1058c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x288>
   101a8:	70a0      	strb	r0, [r4, #2]
   101aa:	8828      	ldrh	r0, [r5, #0]
   101ac:	8020      	strh	r0, [r4, #0]
   101ae:	f994 0002 	ldrsb.w	r0, [r4, #2]
   101b2:	f7f2 fb41 	bl	2838 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
   101b6:	70a0      	strb	r0, [r4, #2]
   101b8:	2000      	movs	r0, #0
   101ba:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   101bc:	9801      	ldr	r0, [sp, #4]
   101be:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
   101c2:	e7f1      	b.n	101a8 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

000101c4 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
   101c4:	b510      	push	{r4, lr}
   101c6:	f7f7 f8d7 	bl	7378 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   101ca:	2000      	movs	r0, #0
   101cc:	bd10      	pop	{r4, pc}

000101ce <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
   101ce:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   101d2:	4604      	mov	r4, r0
   101d4:	8840      	ldrh	r0, [r0, #2]
   101d6:	460d      	mov	r5, r1
   101d8:	b1b8      	cbz	r0, 1020a <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
   101da:	8820      	ldrh	r0, [r4, #0]
   101dc:	4669      	mov	r1, sp
   101de:	f7fd fd4e 	bl	dc7e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   101e2:	2800      	cmp	r0, #0
   101e4:	d10f      	bne.n	10206 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
   101e6:	8820      	ldrh	r0, [r4, #0]
   101e8:	8028      	strh	r0, [r5, #0]
   101ea:	9e01      	ldr	r6, [sp, #4]
   101ec:	f106 0510 	add.w	r5, r6, #16
   101f0:	3680      	adds	r6, #128	; 0x80
   101f2:	682f      	ldr	r7, [r5, #0]
   101f4:	8862      	ldrh	r2, [r4, #2]
   101f6:	4639      	mov	r1, r7
   101f8:	4630      	mov	r0, r6
   101fa:	f7fd fe62 	bl	dec2 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
   101fe:	6828      	ldr	r0, [r5, #0]
   10200:	42b8      	cmp	r0, r7
   10202:	d1f6      	bne.n	101f2 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
   10204:	2000      	movs	r0, #0
   10206:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   1020a:	2012      	movs	r0, #18
   1020c:	e7fb      	b.n	10206 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

0001020e <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
   1020e:	f000 b868 	b.w	102e2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

00010212 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
   10212:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10216:	b085      	sub	sp, #20
   10218:	4688      	mov	r8, r1
   1021a:	4606      	mov	r6, r0
   1021c:	8800      	ldrh	r0, [r0, #0]
   1021e:	a901      	add	r1, sp, #4
   10220:	f7fd fd2d 	bl	dc7e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10224:	2800      	cmp	r0, #0
   10226:	d13b      	bne.n	102a0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
   10228:	9802      	ldr	r0, [sp, #8]
   1022a:	4601      	mov	r1, r0
   1022c:	468a      	mov	sl, r1
   1022e:	f890 1194 	ldrb.w	r1, [r0, #404]	; 0x194
   10232:	f500 7498 	add.w	r4, r0, #304	; 0x130
   10236:	f88d 1000 	strb.w	r1, [sp]
   1023a:	9900      	ldr	r1, [sp, #0]
   1023c:	9100      	str	r1, [sp, #0]
   1023e:	f89d 1000 	ldrb.w	r1, [sp]
   10242:	f04f 0900 	mov.w	r9, #0
   10246:	3080      	adds	r0, #128	; 0x80
   10248:	b121      	cbz	r1, 10254 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
   1024a:	f1b8 0f02 	cmp.w	r8, #2
   1024e:	d001      	beq.n	10254 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
   10250:	2701      	movs	r7, #1
   10252:	e000      	b.n	10256 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
   10254:	2700      	movs	r7, #0
   10256:	7f81      	ldrb	r1, [r0, #30]
   10258:	2922      	cmp	r1, #34	; 0x22
   1025a:	d100      	bne.n	1025e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
   1025c:	b13f      	cbz	r7, 1026e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
   1025e:	2500      	movs	r5, #0
   10260:	306c      	adds	r0, #108	; 0x6c
   10262:	2108      	movs	r1, #8
   10264:	4683      	mov	fp, r0
   10266:	f7ff fb38 	bl	f8da <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xa2>
   1026a:	b110      	cbz	r0, 10272 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x60>
   1026c:	e007      	b.n	1027e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x6c>
   1026e:	2501      	movs	r5, #1
   10270:	e7f6      	b.n	10260 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4e>
   10272:	210b      	movs	r1, #11
   10274:	4658      	mov	r0, fp
   10276:	f7ff fb30 	bl	f8da <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xa2>
   1027a:	b900      	cbnz	r0, 1027e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x6c>
   1027c:	b17d      	cbz	r5, 1029e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8c>
   1027e:	a804      	add	r0, sp, #16
   10280:	9000      	str	r0, [sp, #0]
   10282:	f89d 0004 	ldrb.w	r0, [sp, #4]
   10286:	ab03      	add	r3, sp, #12
   10288:	4632      	mov	r2, r6
   1028a:	4651      	mov	r1, sl
   1028c:	f000 f95e 	bl	1054c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x248>
   10290:	0005      	movs	r5, r0
   10292:	d105      	bne.n	102a0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
   10294:	340c      	adds	r4, #12
   10296:	20ff      	movs	r0, #255	; 0xff
   10298:	7060      	strb	r0, [r4, #1]
   1029a:	b937      	cbnz	r7, 102aa <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x98>
   1029c:	e003      	b.n	102a6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x94>
   1029e:	201a      	movs	r0, #26
   102a0:	b005      	add	sp, #20
   102a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   102a6:	7820      	ldrb	r0, [r4, #0]
   102a8:	b108      	cbz	r0, 102ae <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9c>
   102aa:	253a      	movs	r5, #58	; 0x3a
   102ac:	e012      	b.n	102d4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc2>
   102ae:	f884 8000 	strb.w	r8, [r4]
   102b2:	f89d 000c 	ldrb.w	r0, [sp, #12]
   102b6:	70a0      	strb	r0, [r4, #2]
   102b8:	f89d 1010 	ldrb.w	r1, [sp, #16]
   102bc:	70e1      	strb	r1, [r4, #3]
   102be:	f88d 0000 	strb.w	r0, [sp]
   102c2:	f88d 1001 	strb.w	r1, [sp, #1]
   102c6:	88b0      	ldrh	r0, [r6, #4]
   102c8:	f8ad 0002 	strh.w	r0, [sp, #2]
   102cc:	4669      	mov	r1, sp
   102ce:	4650      	mov	r0, sl
   102d0:	f7fd fd92 	bl	ddf8 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   102d4:	f884 9001 	strb.w	r9, [r4, #1]
   102d8:	4628      	mov	r0, r5
   102da:	e7e1      	b.n	102a0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>

000102dc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   102dc:	2008      	movs	r0, #8
   102de:	f7f7 b8b3 	b.w	7448 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>

000102e2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
   102e2:	b510      	push	{r4, lr}
   102e4:	f7fd fc2b 	bl	db3e <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
   102e8:	f7f2 f87a 	bl	23e0 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
   102ec:	f7f7 f8ce 	bl	748c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
   102f0:	f7fe f896 	bl	e420 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
   102f4:	f7fd fe55 	bl	dfa2 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q>
   102f8:	f7f3 f8c4 	bl	3484 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>
   102fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10300:	f7f6 be96 	b.w	7030 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x48>

00010304 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>:
   10304:	f7f4 be8a 	b.w	501c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
   10308:	f44f 71a4 	mov.w	r1, #328	; 0x148
   1030c:	4288      	cmp	r0, r1
   1030e:	d303      	bcc.n	10318 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14>
   10310:	f640 0148 	movw	r1, #2120	; 0x848
   10314:	4288      	cmp	r0, r1
   10316:	d300      	bcc.n	1031a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x16>
   10318:	4608      	mov	r0, r1
   1031a:	b280      	uxth	r0, r0
   1031c:	4770      	bx	lr
   1031e:	07c1      	lsls	r1, r0, #31
   10320:	d001      	beq.n	10326 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22>
   10322:	2001      	movs	r0, #1
   10324:	4770      	bx	lr
   10326:	0780      	lsls	r0, r0, #30
   10328:	d501      	bpl.n	1032e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a>
   1032a:	2002      	movs	r0, #2
   1032c:	4770      	bx	lr
   1032e:	2000      	movs	r0, #0
   10330:	4770      	bx	lr
   10332:	b510      	push	{r4, lr}
   10334:	2801      	cmp	r0, #1
   10336:	d006      	beq.n	10346 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
   10338:	2802      	cmp	r0, #2
   1033a:	d004      	beq.n	10346 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
   1033c:	f240 21d7 	movw	r1, #727	; 0x2d7
   10340:	2006      	movs	r0, #6
   10342:	f7f0 fb35 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10346:	bd10      	pop	{r4, pc}
   10348:	b510      	push	{r4, lr}
   1034a:	f7f6 fe5b 	bl	7004 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1c>
   1034e:	b158      	cbz	r0, 10368 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64>
   10350:	f7f6 fe8e 	bl	7070 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
   10354:	4604      	mov	r4, r0
   10356:	f7fe fc65 	bl	ec24 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   1035a:	b918      	cbnz	r0, 10364 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x60>
   1035c:	4620      	mov	r0, r4
   1035e:	f7fe fc57 	bl	ec10 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   10362:	b108      	cbz	r0, 10368 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64>
   10364:	2000      	movs	r0, #0
   10366:	bd10      	pop	{r4, pc}
   10368:	2001      	movs	r0, #1
   1036a:	bd10      	pop	{r4, pc}
   1036c:	b570      	push	{r4, r5, r6, lr}
   1036e:	460c      	mov	r4, r1
   10370:	4605      	mov	r5, r0
   10372:	b112      	cbz	r2, 1037a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x76>
   10374:	291f      	cmp	r1, #31
   10376:	d80c      	bhi.n	10392 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x8e>
   10378:	e016      	b.n	103a8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa4>
   1037a:	f7f1 f8bd 	bl	14f8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
   1037e:	42a0      	cmp	r0, r4
   10380:	d201      	bcs.n	10386 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x82>
   10382:	2007      	movs	r0, #7
   10384:	bd70      	pop	{r4, r5, r6, pc}
   10386:	4628      	mov	r0, r5
   10388:	f7fe fc4a 	bl	ec20 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   1038c:	b118      	cbz	r0, 10396 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x92>
   1038e:	2c1f      	cmp	r4, #31
   10390:	d901      	bls.n	10396 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x92>
   10392:	2012      	movs	r0, #18
   10394:	bd70      	pop	{r4, r5, r6, pc}
   10396:	4628      	mov	r0, r5
   10398:	f7fe fc4b 	bl	ec32 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   1039c:	b130      	cbz	r0, 103ac <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa8>
   1039e:	4621      	mov	r1, r4
   103a0:	4628      	mov	r0, r5
   103a2:	f7fe fc14 	bl	ebce <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
   103a6:	b118      	cbz	r0, 103b0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xac>
   103a8:	2000      	movs	r0, #0
   103aa:	bd70      	pop	{r4, r5, r6, pc}
   103ac:	2042      	movs	r0, #66	; 0x42
   103ae:	bd70      	pop	{r4, r5, r6, pc}
   103b0:	2045      	movs	r0, #69	; 0x45
   103b2:	bd70      	pop	{r4, r5, r6, pc}
   103b4:	b510      	push	{r4, lr}
   103b6:	4604      	mov	r4, r0
   103b8:	7840      	ldrb	r0, [r0, #1]
   103ba:	06c1      	lsls	r1, r0, #27
   103bc:	d51c      	bpl.n	103f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   103be:	07c0      	lsls	r0, r0, #31
   103c0:	d00b      	beq.n	103da <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   103c2:	f7f7 f815 	bl	73f0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
   103c6:	b1b8      	cbz	r0, 103f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   103c8:	7860      	ldrb	r0, [r4, #1]
   103ca:	06c1      	lsls	r1, r0, #27
   103cc:	d405      	bmi.n	103da <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   103ce:	0700      	lsls	r0, r0, #28
   103d0:	d503      	bpl.n	103da <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   103d2:	7d20      	ldrb	r0, [r4, #20]
   103d4:	2802      	cmp	r0, #2
   103d6:	d10f      	bne.n	103f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   103d8:	e010      	b.n	103fc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   103da:	7d20      	ldrb	r0, [r4, #20]
   103dc:	2802      	cmp	r0, #2
   103de:	d001      	beq.n	103e4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xe0>
   103e0:	7ea0      	ldrb	r0, [r4, #26]
   103e2:	b948      	cbnz	r0, 103f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   103e4:	7860      	ldrb	r0, [r4, #1]
   103e6:	0700      	lsls	r0, r0, #28
   103e8:	d408      	bmi.n	103fc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   103ea:	f8d4 0005 	ldr.w	r0, [r4, #5]
   103ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   103f2:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   103f6:	d201      	bcs.n	103fc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   103f8:	2011      	movs	r0, #17
   103fa:	bd10      	pop	{r4, pc}
   103fc:	2000      	movs	r0, #0
   103fe:	bd10      	pop	{r4, pc}
   10400:	b538      	push	{r3, r4, r5, lr}
   10402:	4604      	mov	r4, r0
   10404:	7800      	ldrb	r0, [r0, #0]
   10406:	28ef      	cmp	r0, #239	; 0xef
   10408:	d843      	bhi.n	10492 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   1040a:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   1040e:	f8ad 0000 	strh.w	r0, [sp]
   10412:	9800      	ldr	r0, [sp, #0]
   10414:	f000 f91f 	bl	10656 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x352>
   10418:	b3a0      	cbz	r0, 10484 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x180>
   1041a:	7861      	ldrb	r1, [r4, #1]
   1041c:	0708      	lsls	r0, r1, #28
   1041e:	d40b      	bmi.n	10438 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x134>
   10420:	f8d4 0002 	ldr.w	r0, [r4, #2]
   10424:	f8d4 3005 	ldr.w	r3, [r4, #5]
   10428:	0a02      	lsrs	r2, r0, #8
   1042a:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
   1042e:	d830      	bhi.n	10492 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10430:	2220      	movs	r2, #32
   10432:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   10436:	d82c      	bhi.n	10492 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10438:	7a60      	ldrb	r0, [r4, #9]
   1043a:	b318      	cbz	r0, 10484 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x180>
   1043c:	2807      	cmp	r0, #7
   1043e:	d828      	bhi.n	10492 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10440:	7aa0      	ldrb	r0, [r4, #10]
   10442:	b128      	cbz	r0, 10450 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   10444:	2801      	cmp	r0, #1
   10446:	d003      	beq.n	10450 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   10448:	2802      	cmp	r0, #2
   1044a:	d001      	beq.n	10450 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   1044c:	2803      	cmp	r0, #3
   1044e:	d120      	bne.n	10492 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10450:	074a      	lsls	r2, r1, #29
   10452:	d403      	bmi.n	1045c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x158>
   10454:	2802      	cmp	r0, #2
   10456:	d001      	beq.n	1045c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x158>
   10458:	2803      	cmp	r0, #3
   1045a:	d105      	bne.n	10468 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x164>
   1045c:	7ae0      	ldrb	r0, [r4, #11]
   1045e:	b108      	cbz	r0, 10464 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x160>
   10460:	2801      	cmp	r0, #1
   10462:	d116      	bne.n	10492 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10464:	0748      	lsls	r0, r1, #29
   10466:	d407      	bmi.n	10478 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   10468:	7ca0      	ldrb	r0, [r4, #18]
   1046a:	b128      	cbz	r0, 10478 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   1046c:	2801      	cmp	r0, #1
   1046e:	d003      	beq.n	10478 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   10470:	2802      	cmp	r0, #2
   10472:	d001      	beq.n	10478 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   10474:	2803      	cmp	r0, #3
   10476:	d10c      	bne.n	10492 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10478:	06c8      	lsls	r0, r1, #27
   1047a:	7d20      	ldrb	r0, [r4, #20]
   1047c:	d503      	bpl.n	10486 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x182>
   1047e:	2801      	cmp	r0, #1
   10480:	d107      	bne.n	10492 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10482:	e002      	b.n	1048a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x186>
   10484:	e005      	b.n	10492 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10486:	2802      	cmp	r0, #2
   10488:	d003      	beq.n	10492 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   1048a:	7e20      	ldrb	r0, [r4, #24]
   1048c:	b118      	cbz	r0, 10496 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x192>
   1048e:	2801      	cmp	r0, #1
   10490:	d001      	beq.n	10496 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x192>
   10492:	2012      	movs	r0, #18
   10494:	bd38      	pop	{r3, r4, r5, pc}
   10496:	2000      	movs	r0, #0
   10498:	bd38      	pop	{r3, r4, r5, pc}
   1049a:	b510      	push	{r4, lr}
   1049c:	0004      	movs	r4, r0
   1049e:	d005      	beq.n	104ac <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a8>
   104a0:	f7f6 ffe4 	bl	746c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   104a4:	4384      	bics	r4, r0
   104a6:	d001      	beq.n	104ac <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a8>
   104a8:	2000      	movs	r0, #0
   104aa:	bd10      	pop	{r4, pc}
   104ac:	2001      	movs	r0, #1
   104ae:	bd10      	pop	{r4, pc}
   104b0:	28fb      	cmp	r0, #251	; 0xfb
   104b2:	d803      	bhi.n	104bc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b8>
   104b4:	f640 0048 	movw	r0, #2120	; 0x848
   104b8:	4281      	cmp	r1, r0
   104ba:	d901      	bls.n	104c0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1bc>
   104bc:	2011      	movs	r0, #17
   104be:	4770      	bx	lr
   104c0:	2000      	movs	r0, #0
   104c2:	4770      	bx	lr
   104c4:	381b      	subs	r0, #27
   104c6:	28e1      	cmp	r0, #225	; 0xe1
   104c8:	d206      	bcs.n	104d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d4>
   104ca:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   104ce:	d303      	bcc.n	104d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d4>
   104d0:	f244 2090 	movw	r0, #17040	; 0x4290
   104d4:	4281      	cmp	r1, r0
   104d6:	d901      	bls.n	104dc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d8>
   104d8:	2012      	movs	r0, #18
   104da:	4770      	bx	lr
   104dc:	2000      	movs	r0, #0
   104de:	4770      	bx	lr
   104e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   104e4:	4606      	mov	r6, r0
   104e6:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
   104ea:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
   104ee:	4615      	mov	r5, r2
   104f0:	302c      	adds	r0, #44	; 0x2c
   104f2:	f7f4 f82f 	bl	4554 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
   104f6:	4680      	mov	r8, r0
   104f8:	2102      	movs	r1, #2
   104fa:	f7fd fc4d 	bl	dd98 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   104fe:	4287      	cmp	r7, r0
   10500:	d200      	bcs.n	10504 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x200>
   10502:	4638      	mov	r0, r7
   10504:	4607      	mov	r7, r0
   10506:	2102      	movs	r1, #2
   10508:	4640      	mov	r0, r8
   1050a:	f7fd fc45 	bl	dd98 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   1050e:	4284      	cmp	r4, r0
   10510:	d200      	bcs.n	10514 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x210>
   10512:	4620      	mov	r0, r4
   10514:	8831      	ldrh	r1, [r6, #0]
   10516:	8029      	strh	r1, [r5, #0]
   10518:	2f1b      	cmp	r7, #27
   1051a:	d913      	bls.n	10544 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x240>
   1051c:	2ffb      	cmp	r7, #251	; 0xfb
   1051e:	d300      	bcc.n	10522 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21e>
   10520:	27fb      	movs	r7, #251	; 0xfb
   10522:	806f      	strh	r7, [r5, #2]
   10524:	281b      	cmp	r0, #27
   10526:	d90f      	bls.n	10548 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x244>
   10528:	28fb      	cmp	r0, #251	; 0xfb
   1052a:	d300      	bcc.n	1052e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22a>
   1052c:	20fb      	movs	r0, #251	; 0xfb
   1052e:	80e8      	strh	r0, [r5, #6]
   10530:	4640      	mov	r0, r8
   10532:	f7ff fee9 	bl	10308 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   10536:	80a8      	strh	r0, [r5, #4]
   10538:	4640      	mov	r0, r8
   1053a:	f7ff fee5 	bl	10308 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   1053e:	8128      	strh	r0, [r5, #8]
   10540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10544:	271b      	movs	r7, #27
   10546:	e7ec      	b.n	10522 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21e>
   10548:	201b      	movs	r0, #27
   1054a:	e7f0      	b.n	1052e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22a>
   1054c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10550:	7890      	ldrb	r0, [r2, #2]
   10552:	9e06      	ldr	r6, [sp, #24]
   10554:	461d      	mov	r5, r3
   10556:	4614      	mov	r4, r2
   10558:	b908      	cbnz	r0, 1055e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x25a>
   1055a:	f7f6 ff87 	bl	746c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1055e:	78e4      	ldrb	r4, [r4, #3]
   10560:	4607      	mov	r7, r0
   10562:	b914      	cbnz	r4, 1056a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x266>
   10564:	f7f6 ff82 	bl	746c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10568:	4604      	mov	r4, r0
   1056a:	b16f      	cbz	r7, 10588 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   1056c:	b164      	cbz	r4, 10588 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   1056e:	4638      	mov	r0, r7
   10570:	f7ff fed5 	bl	1031e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   10574:	4620      	mov	r0, r4
   10576:	f7ff fed2 	bl	1031e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   1057a:	b12f      	cbz	r7, 10588 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   1057c:	b124      	cbz	r4, 10588 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   1057e:	702f      	strb	r7, [r5, #0]
   10580:	7034      	strb	r4, [r6, #0]
   10582:	2000      	movs	r0, #0
   10584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10588:	2009      	movs	r0, #9
   1058a:	e7fb      	b.n	10584 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x280>
   1058c:	207f      	movs	r0, #127	; 0x7f
   1058e:	f000 b843 	b.w	10618 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x314>
   10592:	b508      	push	{r3, lr}
   10594:	f890 125c 	ldrb.w	r1, [r0, #604]	; 0x25c
   10598:	f890 00bc 	ldrb.w	r0, [r0, #188]	; 0xbc
   1059c:	f88d 0000 	strb.w	r0, [sp]
   105a0:	9800      	ldr	r0, [sp, #0]
   105a2:	9000      	str	r0, [sp, #0]
   105a4:	f89d 0000 	ldrb.w	r0, [sp]
   105a8:	b100      	cbz	r0, 105ac <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a8>
   105aa:	2001      	movs	r0, #1
   105ac:	1e40      	subs	r0, r0, #1
   105ae:	4208      	tst	r0, r1
   105b0:	d003      	beq.n	105ba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b6>
   105b2:	2904      	cmp	r1, #4
   105b4:	d001      	beq.n	105ba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b6>
   105b6:	2001      	movs	r0, #1
   105b8:	bd08      	pop	{r3, pc}
   105ba:	2000      	movs	r0, #0
   105bc:	bd08      	pop	{r3, pc}
   105be:	b510      	push	{r4, lr}
   105c0:	f7f6 fd20 	bl	7004 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1c>
   105c4:	2800      	cmp	r0, #0
   105c6:	d000      	beq.n	105ca <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2c6>
   105c8:	2001      	movs	r0, #1
   105ca:	bd10      	pop	{r4, pc}
   105cc:	b570      	push	{r4, r5, r6, lr}
   105ce:	4605      	mov	r5, r0
   105d0:	f7fe fb2f 	bl	ec32 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   105d4:	b170      	cbz	r0, 105f4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2f0>
   105d6:	4628      	mov	r0, r5
   105d8:	f7fe fce8 	bl	efac <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   105dc:	2800      	cmp	r0, #0
   105de:	d008      	beq.n	105f2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ee>
   105e0:	4628      	mov	r0, r5
   105e2:	f7fe fce0 	bl	efa6 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
   105e6:	4604      	mov	r4, r0
   105e8:	4628      	mov	r0, r5
   105ea:	f7fe fcb6 	bl	ef5a <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
   105ee:	b118      	cbz	r0, 105f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2f4>
   105f0:	200c      	movs	r0, #12
   105f2:	bd70      	pop	{r4, r5, r6, pc}
   105f4:	2042      	movs	r0, #66	; 0x42
   105f6:	bd70      	pop	{r4, r5, r6, pc}
   105f8:	b164      	cbz	r4, 10614 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x310>
   105fa:	8820      	ldrh	r0, [r4, #0]
   105fc:	f7fd fa6c 	bl	dad8 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   10600:	8820      	ldrh	r0, [r4, #0]
   10602:	2100      	movs	r1, #0
   10604:	f7f0 fda4 	bl	1150 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   10608:	b120      	cbz	r0, 10614 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x310>
   1060a:	f241 71ae 	movw	r1, #6062	; 0x17ae
   1060e:	2039      	movs	r0, #57	; 0x39
   10610:	f7f0 f9ce 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10614:	2000      	movs	r0, #0
   10616:	bd70      	pop	{r4, r5, r6, pc}
   10618:	b508      	push	{r3, lr}
   1061a:	f640 1288 	movw	r2, #2440	; 0x988
   1061e:	2300      	movs	r3, #0
   10620:	4669      	mov	r1, sp
   10622:	f7fc f8e7 	bl	c7f4 <mpsl_fem_tx_power_split>
   10626:	bd08      	pop	{r3, pc}
   10628:	b530      	push	{r4, r5, lr}
   1062a:	f340 0400 	sbfx	r4, r0, #0, #1
   1062e:	f340 0040 	sbfx	r0, r0, #1, #1
   10632:	1c40      	adds	r0, r0, #1
   10634:	9d03      	ldr	r5, [sp, #12]
   10636:	1c64      	adds	r4, r4, #1
   10638:	d000      	beq.n	1063c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x338>
   1063a:	b119      	cbz	r1, 10644 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x340>
   1063c:	b100      	cbz	r0, 10640 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x33c>
   1063e:	b10a      	cbz	r2, 10644 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x340>
   10640:	b91c      	cbnz	r4, 1064a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x346>
   10642:	e001      	b.n	10648 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x344>
   10644:	2011      	movs	r0, #17
   10646:	bd30      	pop	{r4, r5, pc}
   10648:	2100      	movs	r1, #0
   1064a:	7019      	strb	r1, [r3, #0]
   1064c:	b900      	cbnz	r0, 10650 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x34c>
   1064e:	2200      	movs	r2, #0
   10650:	702a      	strb	r2, [r5, #0]
   10652:	2000      	movs	r0, #0
   10654:	bd30      	pop	{r4, r5, pc}
   10656:	b2c0      	uxtb	r0, r0
   10658:	06c1      	lsls	r1, r0, #27
   1065a:	d40c      	bmi.n	10676 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x372>
   1065c:	0681      	lsls	r1, r0, #26
   1065e:	ea4f 71c0 	mov.w	r1, r0, lsl #31
   10662:	d503      	bpl.n	1066c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x368>
   10664:	b9d1      	cbnz	r1, 1069c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x398>
   10666:	0781      	lsls	r1, r0, #30
   10668:	d418      	bmi.n	1069c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x398>
   1066a:	e001      	b.n	10670 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x36c>
   1066c:	2900      	cmp	r1, #0
   1066e:	d1fa      	bne.n	10666 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x362>
   10670:	0700      	lsls	r0, r0, #28
   10672:	d413      	bmi.n	1069c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x398>
   10674:	e010      	b.n	10698 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x394>
   10676:	0641      	lsls	r1, r0, #25
   10678:	d410      	bmi.n	1069c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x398>
   1067a:	0681      	lsls	r1, r0, #26
   1067c:	d40e      	bmi.n	1069c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x398>
   1067e:	07c1      	lsls	r1, r0, #31
   10680:	ea4f 7180 	mov.w	r1, r0, lsl #30
   10684:	d004      	beq.n	10690 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38c>
   10686:	2900      	cmp	r1, #0
   10688:	db02      	blt.n	10690 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38c>
   1068a:	0740      	lsls	r0, r0, #29
   1068c:	d404      	bmi.n	10698 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x394>
   1068e:	e005      	b.n	1069c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x398>
   10690:	0701      	lsls	r1, r0, #28
   10692:	d403      	bmi.n	1069c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x398>
   10694:	0740      	lsls	r0, r0, #29
   10696:	d401      	bmi.n	1069c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x398>
   10698:	2001      	movs	r0, #1
   1069a:	4770      	bx	lr
   1069c:	2000      	movs	r0, #0
   1069e:	4770      	bx	lr
   106a0:	b510      	push	{r4, lr}
   106a2:	f7f3 ff3b 	bl	451c <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
   106a6:	b110      	cbz	r0, 106ae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3aa>
   106a8:	f44f 7188 	mov.w	r1, #272	; 0x110
   106ac:	e004      	b.n	106b8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
   106ae:	f7f3 f86b 	bl	3788 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   106b2:	b120      	cbz	r0, 106be <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ba>
   106b4:	f240 1115 	movw	r1, #277	; 0x115
   106b8:	2001      	movs	r0, #1
   106ba:	f7f0 f979 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   106be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   106c2:	2001      	movs	r0, #1
   106c4:	f7fd b858 	b.w	d778 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   106c8:	6802      	ldr	r2, [r0, #0]
   106ca:	b912      	cbnz	r2, 106d2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ce>
   106cc:	6001      	str	r1, [r0, #0]
   106ce:	4770      	bx	lr
   106d0:	4602      	mov	r2, r0
   106d2:	6850      	ldr	r0, [r2, #4]
   106d4:	b108      	cbz	r0, 106da <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3d6>
   106d6:	428a      	cmp	r2, r1
   106d8:	d1fa      	bne.n	106d0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3cc>
   106da:	428a      	cmp	r2, r1
   106dc:	d0f7      	beq.n	106ce <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ca>
   106de:	6051      	str	r1, [r2, #4]
   106e0:	4770      	bx	lr
   106e2:	b510      	push	{r4, lr}
   106e4:	4604      	mov	r4, r0
   106e6:	e002      	b.n	106ee <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ea>
   106e8:	6820      	ldr	r0, [r4, #0]
   106ea:	4780      	blx	r0
   106ec:	6864      	ldr	r4, [r4, #4]
   106ee:	2c00      	cmp	r4, #0
   106f0:	d1fa      	bne.n	106e8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3e4>
   106f2:	bd10      	pop	{r4, pc}
   106f4:	b510      	push	{r4, lr}
   106f6:	2000      	movs	r0, #0
   106f8:	f7fd f83e 	bl	d778 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   106fc:	f7f0 fe06 	bl	130c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   10700:	f7f1 f89c 	bl	183c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   10704:	f7f1 fa2a 	bl	1b5c <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY>
   10708:	2800      	cmp	r0, #0
   1070a:	d003      	beq.n	10714 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x410>
   1070c:	21f2      	movs	r1, #242	; 0xf2
   1070e:	2001      	movs	r0, #1
   10710:	f7f0 f94e 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10714:	bd10      	pop	{r4, pc}
   10716:	b510      	push	{r4, lr}
   10718:	f7ff ffc2 	bl	106a0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x39c>
   1071c:	f7fe ff41 	bl	f5a2 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
   10720:	2800      	cmp	r0, #0
   10722:	d004      	beq.n	1072e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42a>
   10724:	f44f 7195 	mov.w	r1, #298	; 0x12a
   10728:	2001      	movs	r0, #1
   1072a:	f7f0 f941 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1072e:	bd10      	pop	{r4, pc}

00010730 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
   10730:	f7fb bd96 	b.w	c260 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   10734:	000b0001 	.word	0x000b0001
   10738:	000a0002 	.word	0x000a0002
   1073c:	00090005 	.word	0x00090005
   10740:	0008000a 	.word	0x0008000a
   10744:	00070014 	.word	0x00070014
   10748:	0006001e 	.word	0x0006001e
   1074c:	00050032 	.word	0x00050032
   10750:	0004004b 	.word	0x0004004b
   10754:	00030064 	.word	0x00030064
   10758:	00020096 	.word	0x00020096
   1075c:	000100fa 	.word	0x000100fa
   10760:	000001f4 	.word	0x000001f4

00010764 <sym_5UID3SBXLTGQYGRFXVINZNLWHB7EKFT76O275JI>:
   10764:	b510      	push	{r4, lr}
   10766:	6844      	ldr	r4, [r0, #4]
   10768:	7803      	ldrb	r3, [r0, #0]
   1076a:	2100      	movs	r1, #0
   1076c:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
   10770:	3480      	adds	r4, #128	; 0x80
   10772:	4620      	mov	r0, r4
   10774:	f7fd fa9a 	bl	dcac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   10778:	b110      	cbz	r0, 10780 <sym_5UID3SBXLTGQYGRFXVINZNLWHB7EKFT76O275JI+0x1c>
   1077a:	2020      	movs	r0, #32
   1077c:	7760      	strb	r0, [r4, #29]
   1077e:	bd10      	pop	{r4, pc}
   10780:	2180      	movs	r1, #128	; 0x80
   10782:	207e      	movs	r0, #126	; 0x7e
   10784:	f7f0 f914 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00010788 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA>:
   10788:	2200      	movs	r2, #0
   1078a:	704a      	strb	r2, [r1, #1]
   1078c:	2214      	movs	r2, #20
   1078e:	700a      	strb	r2, [r1, #0]
   10790:	f8d0 200a 	ldr.w	r2, [r0, #10]
   10794:	604a      	str	r2, [r1, #4]
   10796:	89c0      	ldrh	r0, [r0, #14]
   10798:	8108      	strh	r0, [r1, #8]
   1079a:	4770      	bx	lr
   1079c:	b510      	push	{r4, lr}
   1079e:	2801      	cmp	r0, #1
   107a0:	d006      	beq.n	107b0 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0x28>
   107a2:	2802      	cmp	r0, #2
   107a4:	d004      	beq.n	107b0 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0x28>
   107a6:	f240 21d7 	movw	r1, #727	; 0x2d7
   107aa:	2006      	movs	r0, #6
   107ac:	f7f0 f900 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   107b0:	bd10      	pop	{r4, pc}

000107b2 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   107b2:	b510      	push	{r4, lr}
   107b4:	f7f7 fa48 	bl	7c48 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   107b8:	f000 f81d 	bl	107f6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   107bc:	f7f6 ff24 	bl	7608 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   107c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   107c4:	f7f7 b81e 	b.w	7804 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

000107c8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   107c8:	b510      	push	{r4, lr}
   107ca:	24c8      	movs	r4, #200	; 0xc8
   107cc:	1e64      	subs	r4, r4, #1
   107ce:	b2e4      	uxtb	r4, r4
   107d0:	f7f6 ff38 	bl	7644 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   107d4:	2802      	cmp	r0, #2
   107d6:	d003      	beq.n	107e0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   107d8:	2801      	cmp	r0, #1
   107da:	d000      	beq.n	107de <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   107dc:	2000      	movs	r0, #0
   107de:	bd10      	pop	{r4, pc}
   107e0:	2c00      	cmp	r4, #0
   107e2:	d1f3      	bne.n	107cc <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   107e4:	21ed      	movs	r1, #237	; 0xed
   107e6:	203b      	movs	r0, #59	; 0x3b
   107e8:	f7f0 f8e2 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   107ec:	5840      	ldr	r0, [r0, r1]
   107ee:	2800      	cmp	r0, #0
   107f0:	d000      	beq.n	107f4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2c>
   107f2:	2001      	movs	r0, #1
   107f4:	4770      	bx	lr

000107f6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   107f6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   107fa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   107fe:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   10802:	f3bf 8f4f 	dsb	sy
   10806:	f3bf 8f6f 	isb	sy
   1080a:	f7f7 b895 	b.w	7938 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
   1080e:	2800      	cmp	r0, #0
   10810:	db09      	blt.n	10826 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   10812:	f000 021f 	and.w	r2, r0, #31
   10816:	2101      	movs	r1, #1
   10818:	4091      	lsls	r1, r2
   1081a:	0940      	lsrs	r0, r0, #5
   1081c:	0080      	lsls	r0, r0, #2
   1081e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10822:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10826:	4770      	bx	lr
   10828:	2800      	cmp	r0, #0
   1082a:	db0d      	blt.n	10848 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   1082c:	f000 021f 	and.w	r2, r0, #31
   10830:	2101      	movs	r1, #1
   10832:	4091      	lsls	r1, r2
   10834:	0940      	lsrs	r0, r0, #5
   10836:	0080      	lsls	r0, r0, #2
   10838:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1083c:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10840:	f3bf 8f4f 	dsb	sy
   10844:	f3bf 8f6f 	isb	sy
   10848:	4770      	bx	lr
   1084a:	5840      	ldr	r0, [r0, r1]
   1084c:	2800      	cmp	r0, #0
   1084e:	d000      	beq.n	10852 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
   10850:	2001      	movs	r0, #1
   10852:	4770      	bx	lr
   10854:	5840      	ldr	r0, [r0, r1]
   10856:	2800      	cmp	r0, #0
   10858:	d000      	beq.n	1085c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
   1085a:	2001      	movs	r0, #1
   1085c:	4770      	bx	lr

0001085e <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   1085e:	b510      	push	{r4, lr}
   10860:	4604      	mov	r4, r0
   10862:	4608      	mov	r0, r1
   10864:	f7f7 fb1c 	bl	7ea0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10868:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1086c:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   10870:	fbb0 f0f1 	udiv	r0, r0, r1
   10874:	1a20      	subs	r0, r4, r0
   10876:	1e80      	subs	r0, r0, #2
   10878:	bd10      	pop	{r4, pc}

0001087a <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   1087a:	b510      	push	{r4, lr}
   1087c:	4604      	mov	r4, r0
   1087e:	4608      	mov	r0, r1
   10880:	f7f7 fb0e 	bl	7ea0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10884:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10888:	fbb0 f0f1 	udiv	r0, r0, r1
   1088c:	1a20      	subs	r0, r4, r0
   1088e:	bd10      	pop	{r4, pc}
   10890:	2804      	cmp	r0, #4
   10892:	d202      	bcs.n	1089a <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x20>
   10894:	f04f 0028 	mov.w	r0, #40	; 0x28
   10898:	4770      	bx	lr
   1089a:	d102      	bne.n	108a2 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x28>
   1089c:	f04f 0010 	mov.w	r0, #16
   108a0:	4770      	bx	lr
   108a2:	f04f 0000 	mov.w	r0, #0
   108a6:	4770      	bx	lr
   108a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   108ac:	000d      	movs	r5, r1
   108ae:	4604      	mov	r4, r0
   108b0:	f04f 0602 	mov.w	r6, #2
   108b4:	f04f 0701 	mov.w	r7, #1
   108b8:	d008      	beq.n	108cc <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x52>
   108ba:	7828      	ldrb	r0, [r5, #0]
   108bc:	b1d0      	cbz	r0, 108f4 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x7a>
   108be:	2801      	cmp	r0, #1
   108c0:	d007      	beq.n	108d2 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x58>
   108c2:	2802      	cmp	r0, #2
   108c4:	d014      	beq.n	108f0 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x76>
   108c6:	2803      	cmp	r0, #3
   108c8:	d13e      	bne.n	10948 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xce>
   108ca:	e016      	b.n	108fa <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x80>
   108cc:	f880 7029 	strb.w	r7, [r0, #41]	; 0x29
   108d0:	e00e      	b.n	108f0 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x76>
   108d2:	6868      	ldr	r0, [r5, #4]
   108d4:	28c8      	cmp	r0, #200	; 0xc8
   108d6:	d303      	bcc.n	108e0 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x66>
   108d8:	2103      	movs	r1, #3
   108da:	f7f9 f973 	bl	9bc4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
   108de:	b108      	cbz	r0, 108e4 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x6a>
   108e0:	2600      	movs	r6, #0
   108e2:	e007      	b.n	108f4 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x7a>
   108e4:	4620      	mov	r0, r4
   108e6:	6869      	ldr	r1, [r5, #4]
   108e8:	f000 f833 	bl	10952 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xd8>
   108ec:	2601      	movs	r6, #1
   108ee:	e001      	b.n	108f4 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x7a>
   108f0:	f7f8 f974 	bl	8bdc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2bc>
   108f4:	4630      	mov	r0, r6
   108f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   108fa:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   108fe:	2800      	cmp	r0, #0
   10900:	d1f6      	bne.n	108f0 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x76>
   10902:	6868      	ldr	r0, [r5, #4]
   10904:	f7f8 f93c 	bl	8b80 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x260>
   10908:	b1f0      	cbz	r0, 10948 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xce>
   1090a:	6869      	ldr	r1, [r5, #4]
   1090c:	7808      	ldrb	r0, [r1, #0]
   1090e:	b130      	cbz	r0, 1091e <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xa4>
   10910:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   10914:	2805      	cmp	r0, #5
   10916:	d008      	beq.n	1092a <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xb0>
   10918:	f44f 71be 	mov.w	r1, #380	; 0x17c
   1091c:	e011      	b.n	10942 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xc8>
   1091e:	4620      	mov	r0, r4
   10920:	f000 f81f 	bl	10962 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xe8>
   10924:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
   10928:	e7e2      	b.n	108f0 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x76>
   1092a:	4620      	mov	r0, r4
   1092c:	f000 f832 	bl	10994 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x11a>
   10930:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
   10934:	4621      	mov	r1, r4
   10936:	f000 f80a 	bl	1094e <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xd4>
   1093a:	2800      	cmp	r0, #0
   1093c:	d1d8      	bne.n	108f0 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x76>
   1093e:	f44f 71bf 	mov.w	r1, #382	; 0x17e
   10942:	206a      	movs	r0, #106	; 0x6a
   10944:	f7fb fd98 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   10948:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
   1094c:	e7d0      	b.n	108f0 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x76>
   1094e:	f7f9 bb81 	b.w	a054 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
   10952:	4602      	mov	r2, r0
   10954:	7803      	ldrb	r3, [r0, #0]
   10956:	6840      	ldr	r0, [r0, #4]
   10958:	4408      	add	r0, r1
   1095a:	6050      	str	r0, [r2, #4]
   1095c:	3862      	subs	r0, #98	; 0x62
   1095e:	f7fa bb67 	b.w	b030 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
   10962:	2201      	movs	r2, #1
   10964:	7002      	strb	r2, [r0, #0]
   10966:	2200      	movs	r2, #0
   10968:	72c2      	strb	r2, [r0, #11]
   1096a:	790a      	ldrb	r2, [r1, #4]
   1096c:	b172      	cbz	r2, 1098c <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x112>
   1096e:	2200      	movs	r2, #0
   10970:	8102      	strh	r2, [r0, #8]
   10972:	794a      	ldrb	r2, [r1, #5]
   10974:	b162      	cbz	r2, 10990 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x116>
   10976:	2203      	movs	r2, #3
   10978:	7282      	strb	r2, [r0, #10]
   1097a:	688a      	ldr	r2, [r1, #8]
   1097c:	3273      	adds	r2, #115	; 0x73
   1097e:	6042      	str	r2, [r0, #4]
   10980:	68c9      	ldr	r1, [r1, #12]
   10982:	6101      	str	r1, [r0, #16]
   10984:	2103      	movs	r1, #3
   10986:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
   1098a:	4770      	bx	lr
   1098c:	222b      	movs	r2, #43	; 0x2b
   1098e:	e7ef      	b.n	10970 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xf6>
   10990:	2202      	movs	r2, #2
   10992:	e7f1      	b.n	10978 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xfe>
   10994:	b510      	push	{r4, lr}
   10996:	2200      	movs	r2, #0
   10998:	7002      	strb	r2, [r0, #0]
   1099a:	72c2      	strb	r2, [r0, #11]
   1099c:	790a      	ldrb	r2, [r1, #4]
   1099e:	b1a2      	cbz	r2, 109ca <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x150>
   109a0:	2200      	movs	r2, #0
   109a2:	8102      	strh	r2, [r0, #8]
   109a4:	794a      	ldrb	r2, [r1, #5]
   109a6:	b192      	cbz	r2, 109ce <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x154>
   109a8:	2203      	movs	r2, #3
   109aa:	7282      	strb	r2, [r0, #10]
   109ac:	68ca      	ldr	r2, [r1, #12]
   109ae:	3273      	adds	r2, #115	; 0x73
   109b0:	6042      	str	r2, [r0, #4]
   109b2:	e9d0 4206 	ldrd	r4, r2, [r0, #24]
   109b6:	6889      	ldr	r1, [r1, #8]
   109b8:	17cb      	asrs	r3, r1, #31
   109ba:	1861      	adds	r1, r4, r1
   109bc:	415a      	adcs	r2, r3
   109be:	e9c0 1204 	strd	r1, r2, [r0, #16]
   109c2:	2104      	movs	r1, #4
   109c4:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
   109c8:	bd10      	pop	{r4, pc}
   109ca:	222b      	movs	r2, #43	; 0x2b
   109cc:	e7e9      	b.n	109a2 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x128>
   109ce:	2202      	movs	r2, #2
   109d0:	e7eb      	b.n	109aa <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x130>
   109d2:	b570      	push	{r4, r5, r6, lr}
   109d4:	4605      	mov	r5, r0
   109d6:	460c      	mov	r4, r1
   109d8:	f891 0027 	ldrb.w	r0, [r1, #39]	; 0x27
   109dc:	f7fa f8ee 	bl	abbc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   109e0:	b178      	cbz	r0, 10a02 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x188>
   109e2:	4620      	mov	r0, r4
   109e4:	f000 f810 	bl	10a08 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x18e>
   109e8:	6a22      	ldr	r2, [r4, #32]
   109ea:	2109      	movs	r1, #9
   109ec:	4628      	mov	r0, r5
   109ee:	4790      	blx	r2
   109f0:	2800      	cmp	r0, #0
   109f2:	d008      	beq.n	10a06 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x18c>
   109f4:	7800      	ldrb	r0, [r0, #0]
   109f6:	2800      	cmp	r0, #0
   109f8:	d005      	beq.n	10a06 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x18c>
   109fa:	21dc      	movs	r1, #220	; 0xdc
   109fc:	206a      	movs	r0, #106	; 0x6a
   109fe:	f7fb fd3b 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   10a02:	21d8      	movs	r1, #216	; 0xd8
   10a04:	e7fa      	b.n	109fc <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x182>
   10a06:	bd70      	pop	{r4, r5, r6, pc}
   10a08:	2100      	movs	r1, #0
   10a0a:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
   10a0e:	f800 1f24 	strb.w	r1, [r0, #36]!
   10a12:	7041      	strb	r1, [r0, #1]
   10a14:	4770      	bx	lr

00010a16 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
   10a16:	b570      	push	{r4, r5, r6, lr}
   10a18:	f7f8 f93c 	bl	8c94 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
   10a1c:	4605      	mov	r5, r0
   10a1e:	2400      	movs	r4, #0
   10a20:	e006      	b.n	10a30 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
   10a22:	4620      	mov	r0, r4
   10a24:	f7f8 f93c 	bl	8ca0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   10a28:	f7ff ffee 	bl	10a08 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x18e>
   10a2c:	1c64      	adds	r4, r4, #1
   10a2e:	b2e4      	uxtb	r4, r4
   10a30:	42ac      	cmp	r4, r5
   10a32:	d3f6      	bcc.n	10a22 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
   10a34:	bd70      	pop	{r4, r5, r6, pc}

00010a36 <mpsl_timeslot_request>:
   10a36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10a3a:	460d      	mov	r5, r1
   10a3c:	f7f8 f930 	bl	8ca0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   10a40:	0004      	movs	r4, r0
   10a42:	d008      	beq.n	10a56 <mpsl_timeslot_request+0x20>
   10a44:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   10a48:	f06f 0622 	mvn.w	r6, #34	; 0x22
   10a4c:	2801      	cmp	r0, #1
   10a4e:	d006      	beq.n	10a5e <mpsl_timeslot_request+0x28>
   10a50:	2802      	cmp	r0, #2
   10a52:	d111      	bne.n	10a78 <mpsl_timeslot_request+0x42>
   10a54:	e003      	b.n	10a5e <mpsl_timeslot_request+0x28>
   10a56:	f06f 0001 	mvn.w	r0, #1
   10a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10a5e:	f06f 0715 	mvn.w	r7, #21
   10a62:	b15d      	cbz	r5, 10a7c <mpsl_timeslot_request+0x46>
   10a64:	4628      	mov	r0, r5
   10a66:	f7f8 f88b 	bl	8b80 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x260>
   10a6a:	b138      	cbz	r0, 10a7c <mpsl_timeslot_request+0x46>
   10a6c:	7828      	ldrb	r0, [r5, #0]
   10a6e:	b138      	cbz	r0, 10a80 <mpsl_timeslot_request+0x4a>
   10a70:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   10a74:	2802      	cmp	r0, #2
   10a76:	d008      	beq.n	10a8a <mpsl_timeslot_request+0x54>
   10a78:	4630      	mov	r0, r6
   10a7a:	e7ee      	b.n	10a5a <mpsl_timeslot_request+0x24>
   10a7c:	4638      	mov	r0, r7
   10a7e:	e7ec      	b.n	10a5a <mpsl_timeslot_request+0x24>
   10a80:	4629      	mov	r1, r5
   10a82:	4620      	mov	r0, r4
   10a84:	f7ff ff6d 	bl	10962 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xe8>
   10a88:	e003      	b.n	10a92 <mpsl_timeslot_request+0x5c>
   10a8a:	4629      	mov	r1, r5
   10a8c:	4620      	mov	r0, r4
   10a8e:	f7ff ff81 	bl	10994 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x11a>
   10a92:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
   10a96:	4621      	mov	r1, r4
   10a98:	f7ff ff59 	bl	1094e <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xd4>
   10a9c:	b108      	cbz	r0, 10aa2 <mpsl_timeslot_request+0x6c>
   10a9e:	2000      	movs	r0, #0
   10aa0:	e7db      	b.n	10a5a <mpsl_timeslot_request+0x24>
   10aa2:	f240 21b1 	movw	r1, #689	; 0x2b1
   10aa6:	206a      	movs	r0, #106	; 0x6a
   10aa8:	f7fb fce6 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

00010aac <mpsl_timeslot_session_close>:
   10aac:	b510      	push	{r4, lr}
   10aae:	4604      	mov	r4, r0
   10ab0:	f7f8 f8f6 	bl	8ca0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   10ab4:	0001      	movs	r1, r0
   10ab6:	d005      	beq.n	10ac4 <mpsl_timeslot_session_close+0x18>
   10ab8:	f891 0024 	ldrb.w	r0, [r1, #36]	; 0x24
   10abc:	f06f 0222 	mvn.w	r2, #34	; 0x22
   10ac0:	b978      	cbnz	r0, 10ae2 <mpsl_timeslot_session_close+0x36>
   10ac2:	e002      	b.n	10aca <mpsl_timeslot_session_close+0x1e>
   10ac4:	f06f 0001 	mvn.w	r0, #1
   10ac8:	bd10      	pop	{r4, pc}
   10aca:	f891 0026 	ldrb.w	r0, [r1, #38]	; 0x26
   10ace:	b140      	cbz	r0, 10ae2 <mpsl_timeslot_session_close+0x36>
   10ad0:	2802      	cmp	r0, #2
   10ad2:	d008      	beq.n	10ae6 <mpsl_timeslot_session_close+0x3a>
   10ad4:	2801      	cmp	r0, #1
   10ad6:	d006      	beq.n	10ae6 <mpsl_timeslot_session_close+0x3a>
   10ad8:	2001      	movs	r0, #1
   10ada:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
   10ade:	2000      	movs	r0, #0
   10ae0:	bd10      	pop	{r4, pc}
   10ae2:	4610      	mov	r0, r2
   10ae4:	bd10      	pop	{r4, pc}
   10ae6:	4620      	mov	r0, r4
   10ae8:	f7ff ff73 	bl	109d2 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x158>
   10aec:	e7f7      	b.n	10ade <mpsl_timeslot_session_close+0x32>

00010aee <mpsl_timeslot_session_count_set>:
   10aee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10af2:	460e      	mov	r6, r1
   10af4:	4607      	mov	r7, r0
   10af6:	f7f8 f8cd 	bl	8c94 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
   10afa:	4605      	mov	r5, r0
   10afc:	2400      	movs	r4, #0
   10afe:	e00b      	b.n	10b18 <mpsl_timeslot_session_count_set+0x2a>
   10b00:	4620      	mov	r0, r4
   10b02:	f7f8 f8cd 	bl	8ca0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   10b06:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
   10b0a:	b118      	cbz	r0, 10b14 <mpsl_timeslot_session_count_set+0x26>
   10b0c:	f04f 30ff 	mov.w	r0, #4294967295
   10b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10b14:	1c64      	adds	r4, r4, #1
   10b16:	b2e4      	uxtb	r4, r4
   10b18:	42ac      	cmp	r4, r5
   10b1a:	d3f1      	bcc.n	10b00 <mpsl_timeslot_session_count_set+0x12>
   10b1c:	2e08      	cmp	r6, #8
   10b1e:	d902      	bls.n	10b26 <mpsl_timeslot_session_count_set+0x38>
   10b20:	f06f 0015 	mvn.w	r0, #21
   10b24:	e7f4      	b.n	10b10 <mpsl_timeslot_session_count_set+0x22>
   10b26:	b117      	cbz	r7, 10b2e <mpsl_timeslot_session_count_set+0x40>
   10b28:	4631      	mov	r1, r6
   10b2a:	4638      	mov	r0, r7
   10b2c:	e001      	b.n	10b32 <mpsl_timeslot_session_count_set+0x44>
   10b2e:	2100      	movs	r1, #0
   10b30:	4608      	mov	r0, r1
   10b32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   10b36:	f7f8 b899 	b.w	8c6c <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>

00010b3a <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
   10b3a:	f7fa bd33 	b.w	b5a4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

00010b3e <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
   10b3e:	b510      	push	{r4, lr}
   10b40:	2000      	movs	r0, #0
   10b42:	f7fb f88b 	bl	bc5c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
   10b46:	6800      	ldr	r0, [r0, #0]
   10b48:	2800      	cmp	r0, #0
   10b4a:	bf18      	it	ne
   10b4c:	2001      	movne	r0, #1
   10b4e:	bd10      	pop	{r4, pc}

00010b50 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
   10b50:	b510      	push	{r4, lr}
   10b52:	f7fb f8fb 	bl	bd4c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
   10b56:	f7fa fbdf 	bl	b318 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
   10b5a:	f000 f804 	bl	10b66 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
   10b5e:	b280      	uxth	r0, r0
   10b60:	bd10      	pop	{r4, pc}

00010b62 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
   10b62:	f7fb b855 	b.w	bc10 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA>

00010b66 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
   10b66:	0a41      	lsrs	r1, r0, #9
   10b68:	f643 5209 	movw	r2, #15625	; 0x3d09
   10b6c:	4351      	muls	r1, r2
   10b6e:	f3c0 0008 	ubfx	r0, r0, #0, #9
   10b72:	fb10 f002 	smulbb	r0, r0, r2
   10b76:	f500 7080 	add.w	r0, r0, #256	; 0x100
   10b7a:	eb01 2050 	add.w	r0, r1, r0, lsr #9
   10b7e:	4770      	bx	lr
   10b80:	2800      	cmp	r0, #0
   10b82:	db09      	blt.n	10b98 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
   10b84:	f000 021f 	and.w	r2, r0, #31
   10b88:	2101      	movs	r1, #1
   10b8a:	4091      	lsls	r1, r2
   10b8c:	0940      	lsrs	r0, r0, #5
   10b8e:	0080      	lsls	r0, r0, #2
   10b90:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10b94:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10b98:	4770      	bx	lr
   10b9a:	2800      	cmp	r0, #0
   10b9c:	db0d      	blt.n	10bba <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
   10b9e:	f000 021f 	and.w	r2, r0, #31
   10ba2:	2101      	movs	r1, #1
   10ba4:	4091      	lsls	r1, r2
   10ba6:	0940      	lsrs	r0, r0, #5
   10ba8:	0080      	lsls	r0, r0, #2
   10baa:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10bae:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10bb2:	f3bf 8f4f 	dsb	sy
   10bb6:	f3bf 8f6f 	isb	sy
   10bba:	4770      	bx	lr
   10bbc:	5840      	ldr	r0, [r0, r1]
   10bbe:	2800      	cmp	r0, #0
   10bc0:	d000      	beq.n	10bc4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x5e>
   10bc2:	2001      	movs	r0, #1
   10bc4:	4770      	bx	lr
   10bc6:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
   10bca:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
   10bce:	f002 0201 	and.w	r2, r2, #1
   10bd2:	03c0      	lsls	r0, r0, #15
   10bd4:	d503      	bpl.n	10bde <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
   10bd6:	428a      	cmp	r2, r1
   10bd8:	d101      	bne.n	10bde <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
   10bda:	2001      	movs	r0, #1
   10bdc:	4770      	bx	lr
   10bde:	2000      	movs	r0, #0
   10be0:	4770      	bx	lr

00010be2 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
   10be2:	b510      	push	{r4, lr}
   10be4:	2101      	movs	r1, #1
   10be6:	0788      	lsls	r0, r1, #30
   10be8:	f7fb fbf0 	bl	c3cc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   10bec:	2800      	cmp	r0, #0
   10bee:	d000      	beq.n	10bf2 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
   10bf0:	2001      	movs	r0, #1
   10bf2:	bd10      	pop	{r4, pc}

00010bf4 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
   10bf4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   10bf8:	2101      	movs	r1, #1
   10bfa:	6001      	str	r1, [r0, #0]
   10bfc:	4770      	bx	lr

00010bfe <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
   10bfe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   10c02:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
   10c06:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
   10c0a:	f002 0203 	and.w	r2, r2, #3
   10c0e:	03c9      	lsls	r1, r1, #15
   10c10:	d503      	bpl.n	10c1a <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   10c12:	4282      	cmp	r2, r0
   10c14:	d101      	bne.n	10c1a <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   10c16:	2001      	movs	r0, #1
   10c18:	4770      	bx	lr
   10c1a:	2000      	movs	r0, #0
   10c1c:	4770      	bx	lr

00010c1e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
   10c1e:	b510      	push	{r4, lr}
   10c20:	2100      	movs	r1, #0
   10c22:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   10c26:	f7fb fbd1 	bl	c3cc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   10c2a:	2800      	cmp	r0, #0
   10c2c:	d000      	beq.n	10c30 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
   10c2e:	2001      	movs	r0, #1
   10c30:	bd10      	pop	{r4, pc}
   10c32:	2800      	cmp	r0, #0
   10c34:	db09      	blt.n	10c4a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
   10c36:	f000 021f 	and.w	r2, r0, #31
   10c3a:	2101      	movs	r1, #1
   10c3c:	4091      	lsls	r1, r2
   10c3e:	0940      	lsrs	r0, r0, #5
   10c40:	0080      	lsls	r0, r0, #2
   10c42:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10c46:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10c4a:	4770      	bx	lr
   10c4c:	2800      	cmp	r0, #0
   10c4e:	db0d      	blt.n	10c6c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
   10c50:	f000 021f 	and.w	r2, r0, #31
   10c54:	2101      	movs	r1, #1
   10c56:	4091      	lsls	r1, r2
   10c58:	0940      	lsrs	r0, r0, #5
   10c5a:	0080      	lsls	r0, r0, #2
   10c5c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10c60:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10c64:	f3bf 8f4f 	dsb	sy
   10c68:	f3bf 8f6f 	isb	sy
   10c6c:	4770      	bx	lr
   10c6e:	1000      	.short	0x1000
   10c70:	00fa0002 	.word	0x00fa0002
   10c74:	e8ff0000 	.word	0xe8ff0000
   10c78:	95775fae 	.word	0x95775fae
   10c7c:	6227c87c 	.word	0x6227c87c
   10c80:	eae61814 	.word	0xeae61814
   10c84:	3992c65d 	.word	0x3992c65d
   10c88:	3a72      	.short	0x3a72
   10c8a:	2800      	cmp	r0, #0
   10c8c:	db09      	blt.n	10ca2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
   10c8e:	f000 021f 	and.w	r2, r0, #31
   10c92:	2101      	movs	r1, #1
   10c94:	4091      	lsls	r1, r2
   10c96:	0940      	lsrs	r0, r0, #5
   10c98:	0080      	lsls	r0, r0, #2
   10c9a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10c9e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10ca2:	4770      	bx	lr

00010ca4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
   10ca4:	f3ef 8110 	mrs	r1, PRIMASK
   10ca8:	b672      	cpsid	i
   10caa:	7802      	ldrb	r2, [r0, #0]
   10cac:	2a01      	cmp	r2, #1
   10cae:	d001      	beq.n	10cb4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
   10cb0:	2201      	movs	r2, #1
   10cb2:	e000      	b.n	10cb6 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
   10cb4:	2200      	movs	r2, #0
   10cb6:	2301      	movs	r3, #1
   10cb8:	7003      	strb	r3, [r0, #0]
   10cba:	b901      	cbnz	r1, 10cbe <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
   10cbc:	b662      	cpsie	i
   10cbe:	b10a      	cbz	r2, 10cc4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
   10cc0:	2000      	movs	r0, #0
   10cc2:	4770      	bx	lr
   10cc4:	f06f 0022 	mvn.w	r0, #34	; 0x22
   10cc8:	4770      	bx	lr

00010cca <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
   10cca:	2100      	movs	r1, #0
   10ccc:	7001      	strb	r1, [r0, #0]
   10cce:	4608      	mov	r0, r1
   10cd0:	4770      	bx	lr

00010cd2 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
   10cd2:	f3ef 8110 	mrs	r1, PRIMASK
   10cd6:	b672      	cpsid	i
   10cd8:	2200      	movs	r2, #0
   10cda:	7002      	strb	r2, [r0, #0]
   10cdc:	b901      	cbnz	r1, 10ce0 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
   10cde:	b662      	cpsie	i
   10ce0:	2000      	movs	r0, #0
   10ce2:	4770      	bx	lr

00010ce4 <mpsl_low_priority_process>:
   10ce4:	f7fb bcc6 	b.w	c674 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

00010ce8 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
   10ce8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10cec:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10cf0:	280f      	cmp	r0, #15
   10cf2:	d001      	beq.n	10cf8 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
   10cf4:	2000      	movs	r0, #0
   10cf6:	4770      	bx	lr
   10cf8:	2001      	movs	r0, #1
   10cfa:	4770      	bx	lr

00010cfc <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
   10cfc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10d00:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10d04:	280a      	cmp	r0, #10
   10d06:	d001      	beq.n	10d0c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
   10d08:	2000      	movs	r0, #0
   10d0a:	4770      	bx	lr
   10d0c:	2001      	movs	r0, #1
   10d0e:	4770      	bx	lr

00010d10 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
   10d10:	b500      	push	{lr}
   10d12:	f7ff fff3 	bl	10cfc <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   10d16:	b120      	cbz	r0, 10d22 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
   10d18:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10d1c:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10d20:	b108      	cbz	r0, 10d26 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
   10d22:	2000      	movs	r0, #0
   10d24:	bd00      	pop	{pc}
   10d26:	2001      	movs	r0, #1
   10d28:	bd00      	pop	{pc}

00010d2a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
   10d2a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10d2e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10d32:	280e      	cmp	r0, #14
   10d34:	d001      	beq.n	10d3a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
   10d36:	2000      	movs	r0, #0
   10d38:	4770      	bx	lr
   10d3a:	2001      	movs	r0, #1
   10d3c:	4770      	bx	lr

00010d3e <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
   10d3e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10d42:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10d46:	2810      	cmp	r0, #16
   10d48:	d001      	beq.n	10d4e <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
   10d4a:	2000      	movs	r0, #0
   10d4c:	4770      	bx	lr
   10d4e:	2001      	movs	r0, #1
   10d50:	4770      	bx	lr

00010d52 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
   10d52:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10d56:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10d5a:	2806      	cmp	r0, #6
   10d5c:	d003      	beq.n	10d66 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   10d5e:	1c40      	adds	r0, r0, #1
   10d60:	d001      	beq.n	10d66 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   10d62:	2000      	movs	r0, #0
   10d64:	4770      	bx	lr
   10d66:	2001      	movs	r0, #1
   10d68:	4770      	bx	lr

00010d6a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
   10d6a:	b500      	push	{lr}
   10d6c:	f7ff fff1 	bl	10d52 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10d70:	b148      	cbz	r0, 10d86 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10d72:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10d76:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10d7a:	2806      	cmp	r0, #6
   10d7c:	d303      	bcc.n	10d86 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10d7e:	1c40      	adds	r0, r0, #1
   10d80:	d001      	beq.n	10d86 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10d82:	2001      	movs	r0, #1
   10d84:	bd00      	pop	{pc}
   10d86:	2000      	movs	r0, #0
   10d88:	bd00      	pop	{pc}

00010d8a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
   10d8a:	b500      	push	{lr}
   10d8c:	f7ff ffe1 	bl	10d52 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10d90:	b138      	cbz	r0, 10da2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
   10d92:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10d96:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10d9a:	2806      	cmp	r0, #6
   10d9c:	d303      	bcc.n	10da6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   10d9e:	1c40      	adds	r0, r0, #1
   10da0:	d001      	beq.n	10da6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   10da2:	2000      	movs	r0, #0
   10da4:	bd00      	pop	{pc}
   10da6:	2001      	movs	r0, #1
   10da8:	bd00      	pop	{pc}

00010daa <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
   10daa:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10dae:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10db2:	280d      	cmp	r0, #13
   10db4:	d001      	beq.n	10dba <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
   10db6:	2000      	movs	r0, #0
   10db8:	4770      	bx	lr
   10dba:	2001      	movs	r0, #1
   10dbc:	4770      	bx	lr

00010dbe <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
   10dbe:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10dc2:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10dc6:	2808      	cmp	r0, #8
   10dc8:	d001      	beq.n	10dce <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
   10dca:	2000      	movs	r0, #0
   10dcc:	4770      	bx	lr
   10dce:	2001      	movs	r0, #1
   10dd0:	4770      	bx	lr

00010dd2 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
   10dd2:	f7fb bc89 	b.w	c6e8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

00010dd6 <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>:
   10dd6:	f7fb bc87 	b.w	c6e8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

00010dda <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>:
   10dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10dde:	428a      	cmp	r2, r1
   10de0:	d803      	bhi.n	10dea <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x10>
   10de2:	2179      	movs	r1, #121	; 0x79
   10de4:	2096      	movs	r0, #150	; 0x96
   10de6:	f7fb fb47 	bl	c478 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   10dea:	fab2 f382 	clz	r3, r2
   10dee:	b143      	cbz	r3, 10e02 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x28>
   10df0:	4099      	lsls	r1, r3
   10df2:	f1c3 0c20 	rsb	ip, r3, #32
   10df6:	fa20 fc0c 	lsr.w	ip, r0, ip
   10dfa:	4098      	lsls	r0, r3
   10dfc:	ea41 010c 	orr.w	r1, r1, ip
   10e00:	409a      	lsls	r2, r3
   10e02:	0c13      	lsrs	r3, r2, #16
   10e04:	fbb1 f5f3 	udiv	r5, r1, r3
   10e08:	ea4f 4c10 	mov.w	ip, r0, lsr #16
   10e0c:	b287      	uxth	r7, r0
   10e0e:	fbb1 f0f3 	udiv	r0, r1, r3
   10e12:	fb03 1615 	mls	r6, r3, r5, r1
   10e16:	b294      	uxth	r4, r2
   10e18:	fb00 f504 	mul.w	r5, r0, r4
   10e1c:	eb0c 4606 	add.w	r6, ip, r6, lsl #16
   10e20:	42b5      	cmp	r5, r6
   10e22:	d905      	bls.n	10e30 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x56>
   10e24:	1bad      	subs	r5, r5, r6
   10e26:	4295      	cmp	r5, r2
   10e28:	bf94      	ite	ls
   10e2a:	2501      	movls	r5, #1
   10e2c:	2502      	movhi	r5, #2
   10e2e:	1b40      	subs	r0, r0, r5
   10e30:	0409      	lsls	r1, r1, #16
   10e32:	0405      	lsls	r5, r0, #16
   10e34:	eb11 010c 	adds.w	r1, r1, ip
   10e38:	fba0 0c02 	umull	r0, ip, r0, r2
   10e3c:	1a09      	subs	r1, r1, r0
   10e3e:	fbb1 f0f3 	udiv	r0, r1, r3
   10e42:	fbb1 fcf3 	udiv	ip, r1, r3
   10e46:	fb03 131c 	mls	r3, r3, ip, r1
   10e4a:	fb00 f104 	mul.w	r1, r0, r4
   10e4e:	eb07 4303 	add.w	r3, r7, r3, lsl #16
   10e52:	4299      	cmp	r1, r3
   10e54:	d905      	bls.n	10e62 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x88>
   10e56:	1ac9      	subs	r1, r1, r3
   10e58:	4291      	cmp	r1, r2
   10e5a:	bf94      	ite	ls
   10e5c:	2101      	movls	r1, #1
   10e5e:	2102      	movhi	r1, #2
   10e60:	1a40      	subs	r0, r0, r1
   10e62:	4328      	orrs	r0, r5
   10e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010e68 <sym_ZY67JFDYC72ZRZASFF2HOA7TV55LM74BXABVWRI>:
   10e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10e6c:	461e      	mov	r6, r3
   10e6e:	4615      	mov	r5, r2
   10e70:	4604      	mov	r4, r0
   10e72:	9f06      	ldr	r7, [sp, #24]
   10e74:	f7ff ffb1 	bl	10dda <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
   10e78:	6030      	str	r0, [r6, #0]
   10e7a:	fba0 0105 	umull	r0, r1, r0, r5
   10e7e:	1a20      	subs	r0, r4, r0
   10e80:	6038      	str	r0, [r7, #0]
   10e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010e86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
   10e86:	b4f0      	push	{r4, r5, r6, r7}
   10e88:	ea80 0c01 	eor.w	ip, r0, r1
   10e8c:	4603      	mov	r3, r0
   10e8e:	f01c 0f03 	tst.w	ip, #3
   10e92:	d13c      	bne.n	10f0e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10e94:	f013 0f03 	tst.w	r3, #3
   10e98:	d00b      	beq.n	10eb2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
   10e9a:	2a00      	cmp	r2, #0
   10e9c:	bf04      	itt	eq
   10e9e:	bcf0      	popeq	{r4, r5, r6, r7}
   10ea0:	4770      	bxeq	lr
   10ea2:	f811 cb01 	ldrb.w	ip, [r1], #1
   10ea6:	f803 cb01 	strb.w	ip, [r3], #1
   10eaa:	1e52      	subs	r2, r2, #1
   10eac:	f013 0f03 	tst.w	r3, #3
   10eb0:	d1f3      	bne.n	10e9a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
   10eb2:	2a03      	cmp	r2, #3
   10eb4:	d94f      	bls.n	10f56 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   10eb6:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10eba:	d24c      	bcs.n	10f56 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   10ebc:	f1c2 0c00 	rsb	ip, r2, #0
   10ec0:	ea4f 74ec 	mov.w	r4, ip, asr #31
   10ec4:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
   10ec8:	ea4f 0cac 	mov.w	ip, ip, asr #2
   10ecc:	f1cc 0c00 	rsb	ip, ip, #0
   10ed0:	f1bc 0f00 	cmp.w	ip, #0
   10ed4:	dd1b      	ble.n	10f0e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10ed6:	1f0d      	subs	r5, r1, #4
   10ed8:	1f1c      	subs	r4, r3, #4
   10eda:	f01c 0f01 	tst.w	ip, #1
   10ede:	d003      	beq.n	10ee8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
   10ee0:	f855 6f04 	ldr.w	r6, [r5, #4]!
   10ee4:	f844 6f04 	str.w	r6, [r4, #4]!
   10ee8:	ea5f 066c 	movs.w	r6, ip, asr #1
   10eec:	d007      	beq.n	10efe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
   10eee:	686f      	ldr	r7, [r5, #4]
   10ef0:	6067      	str	r7, [r4, #4]
   10ef2:	f855 7f08 	ldr.w	r7, [r5, #8]!
   10ef6:	f844 7f08 	str.w	r7, [r4, #8]!
   10efa:	1e76      	subs	r6, r6, #1
   10efc:	d1f7      	bne.n	10eee <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
   10efe:	eb01 018c 	add.w	r1, r1, ip, lsl #2
   10f02:	eb03 038c 	add.w	r3, r3, ip, lsl #2
   10f06:	f1cc 0c00 	rsb	ip, ip, #0
   10f0a:	eb02 028c 	add.w	r2, r2, ip, lsl #2
   10f0e:	2a00      	cmp	r2, #0
   10f10:	bf04      	itt	eq
   10f12:	bcf0      	popeq	{r4, r5, r6, r7}
   10f14:	4770      	bxeq	lr
   10f16:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10f1a:	d226      	bcs.n	10f6a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   10f1c:	2a00      	cmp	r2, #0
   10f1e:	bfdc      	itt	le
   10f20:	bcf0      	pople	{r4, r5, r6, r7}
   10f22:	4770      	bxle	lr
   10f24:	1e49      	subs	r1, r1, #1
   10f26:	1e5b      	subs	r3, r3, #1
   10f28:	f012 0f01 	tst.w	r2, #1
   10f2c:	d003      	beq.n	10f36 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
   10f2e:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   10f32:	f803 cf01 	strb.w	ip, [r3, #1]!
   10f36:	1052      	asrs	r2, r2, #1
   10f38:	bf04      	itt	eq
   10f3a:	bcf0      	popeq	{r4, r5, r6, r7}
   10f3c:	4770      	bxeq	lr
   10f3e:	f891 c001 	ldrb.w	ip, [r1, #1]
   10f42:	f883 c001 	strb.w	ip, [r3, #1]
   10f46:	f811 cf02 	ldrb.w	ip, [r1, #2]!
   10f4a:	f803 cf02 	strb.w	ip, [r3, #2]!
   10f4e:	1e52      	subs	r2, r2, #1
   10f50:	d1f5      	bne.n	10f3e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
   10f52:	bcf0      	pop	{r4, r5, r6, r7}
   10f54:	4770      	bx	lr
   10f56:	2a04      	cmp	r2, #4
   10f58:	d3d9      	bcc.n	10f0e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10f5a:	f851 cb04 	ldr.w	ip, [r1], #4
   10f5e:	1f12      	subs	r2, r2, #4
   10f60:	f843 cb04 	str.w	ip, [r3], #4
   10f64:	2a04      	cmp	r2, #4
   10f66:	d2f8      	bcs.n	10f5a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
   10f68:	e7d1      	b.n	10f0e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10f6a:	f811 cb01 	ldrb.w	ip, [r1], #1
   10f6e:	f803 cb01 	strb.w	ip, [r3], #1
   10f72:	1e52      	subs	r2, r2, #1
   10f74:	d1f9      	bne.n	10f6a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   10f76:	bcf0      	pop	{r4, r5, r6, r7}
   10f78:	4770      	bx	lr

00010f7a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
   10f7a:	b470      	push	{r4, r5, r6}
   10f7c:	4603      	mov	r3, r0
   10f7e:	f001 0cff 	and.w	ip, r1, #255	; 0xff
   10f82:	f010 0f03 	tst.w	r0, #3
   10f86:	d009      	beq.n	10f9c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
   10f88:	2a00      	cmp	r2, #0
   10f8a:	bf04      	itt	eq
   10f8c:	bc70      	popeq	{r4, r5, r6}
   10f8e:	4770      	bxeq	lr
   10f90:	f803 cb01 	strb.w	ip, [r3], #1
   10f94:	1e52      	subs	r2, r2, #1
   10f96:	f013 0f03 	tst.w	r3, #3
   10f9a:	d1f5      	bne.n	10f88 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
   10f9c:	b2c9      	uxtb	r1, r1
   10f9e:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   10fa2:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
   10fa6:	2a03      	cmp	r2, #3
   10fa8:	d939      	bls.n	1101e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   10faa:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10fae:	d236      	bcs.n	1101e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   10fb0:	4251      	negs	r1, r2
   10fb2:	17cc      	asrs	r4, r1, #31
   10fb4:	eb01 7194 	add.w	r1, r1, r4, lsr #30
   10fb8:	1089      	asrs	r1, r1, #2
   10fba:	424e      	negs	r6, r1
   10fbc:	2e00      	cmp	r6, #0
   10fbe:	dd11      	ble.n	10fe4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   10fc0:	1f19      	subs	r1, r3, #4
   10fc2:	f016 0f01 	tst.w	r6, #1
   10fc6:	bf18      	it	ne
   10fc8:	f841 5f04 	strne.w	r5, [r1, #4]!
   10fcc:	1074      	asrs	r4, r6, #1
   10fce:	d004      	beq.n	10fda <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
   10fd0:	604d      	str	r5, [r1, #4]
   10fd2:	f841 5f08 	str.w	r5, [r1, #8]!
   10fd6:	1e64      	subs	r4, r4, #1
   10fd8:	d1fa      	bne.n	10fd0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
   10fda:	4271      	negs	r1, r6
   10fdc:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   10fe0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   10fe4:	2a00      	cmp	r2, #0
   10fe6:	bf04      	itt	eq
   10fe8:	bc70      	popeq	{r4, r5, r6}
   10fea:	4770      	bxeq	lr
   10fec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10ff0:	d21d      	bcs.n	1102e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   10ff2:	2a00      	cmp	r2, #0
   10ff4:	bfdc      	itt	le
   10ff6:	bc70      	pople	{r4, r5, r6}
   10ff8:	4770      	bxle	lr
   10ffa:	1e59      	subs	r1, r3, #1
   10ffc:	f012 0f01 	tst.w	r2, #1
   11000:	bf18      	it	ne
   11002:	f801 cf01 	strbne.w	ip, [r1, #1]!
   11006:	1052      	asrs	r2, r2, #1
   11008:	bf04      	itt	eq
   1100a:	bc70      	popeq	{r4, r5, r6}
   1100c:	4770      	bxeq	lr
   1100e:	f881 c001 	strb.w	ip, [r1, #1]
   11012:	f801 cf02 	strb.w	ip, [r1, #2]!
   11016:	1e52      	subs	r2, r2, #1
   11018:	d1f9      	bne.n	1100e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
   1101a:	bc70      	pop	{r4, r5, r6}
   1101c:	4770      	bx	lr
   1101e:	2a04      	cmp	r2, #4
   11020:	d3e0      	bcc.n	10fe4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   11022:	1f12      	subs	r2, r2, #4
   11024:	f843 5b04 	str.w	r5, [r3], #4
   11028:	2a04      	cmp	r2, #4
   1102a:	d2fa      	bcs.n	11022 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
   1102c:	e7da      	b.n	10fe4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   1102e:	f803 cb01 	strb.w	ip, [r3], #1
   11032:	1e52      	subs	r2, r2, #1
   11034:	d1fb      	bne.n	1102e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   11036:	bc70      	pop	{r4, r5, r6}
   11038:	4770      	bx	lr
   1103a:	f04f 30ff 	mov.w	r0, #4294967295
   1103e:	4770      	bx	lr
   11040:	2000      	movs	r0, #0
   11042:	4770      	bx	lr
   11044:	2000      	movs	r0, #0
   11046:	4770      	bx	lr
   11048:	f04f 30ff 	mov.w	r0, #4294967295
   1104c:	4770      	bx	lr
   1104e:	4770      	bx	lr
   11050:	4770      	bx	lr
   11052:	2000      	movs	r0, #0
   11054:	4770      	bx	lr
   11056:	2100      	movs	r1, #0
   11058:	7001      	strb	r1, [r0, #0]
   1105a:	4770      	bx	lr
   1105c:	f04f 30ff 	mov.w	r0, #4294967295
   11060:	4770      	bx	lr
   11062:	f04f 30ff 	mov.w	r0, #4294967295
   11066:	4770      	bx	lr
   11068:	2100      	movs	r1, #0
   1106a:	7001      	strb	r1, [r0, #0]
   1106c:	4770      	bx	lr
   1106e:	f04f 30ff 	mov.w	r0, #4294967295
   11072:	4770      	bx	lr
   11074:	f04f 30ff 	mov.w	r0, #4294967295
   11078:	4770      	bx	lr
   1107a:	7800      	ldrb	r0, [r0, #0]
   1107c:	2800      	cmp	r0, #0
   1107e:	d001      	beq.n	11084 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
   11080:	f06f 0015 	mvn.w	r0, #21
   11084:	4770      	bx	lr
   11086:	2000      	movs	r0, #0
   11088:	4770      	bx	lr
   1108a:	2200      	movs	r2, #0
   1108c:	f000 b802 	b.w	11094 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

00011090 <mpsl_fem_init>:
   11090:	f7f7 bbd4 	b.w	883c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

00011094 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
   11094:	b570      	push	{r4, r5, r6, lr}
   11096:	4614      	mov	r4, r2
   11098:	460d      	mov	r5, r1
   1109a:	1b00      	subs	r0, r0, r4
   1109c:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   110a0:	4288      	cmp	r0, r1
   110a2:	da01      	bge.n	110a8 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
   110a4:	4608      	mov	r0, r1
   110a6:	e002      	b.n	110ae <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   110a8:	287f      	cmp	r0, #127	; 0x7f
   110aa:	dd00      	ble.n	110ae <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   110ac:	207f      	movs	r0, #127	; 0x7f
   110ae:	4619      	mov	r1, r3
   110b0:	b240      	sxtb	r0, r0
   110b2:	f7f7 fbf7 	bl	88a4 <mpsl_tx_power_radio_supported_power_adjust>
   110b6:	7028      	strb	r0, [r5, #0]
   110b8:	706c      	strb	r4, [r5, #1]
   110ba:	2100      	movs	r1, #0
   110bc:	4420      	add	r0, r4
   110be:	70a9      	strb	r1, [r5, #2]
   110c0:	b240      	sxtb	r0, r0
   110c2:	bd70      	pop	{r4, r5, r6, pc}
   110c4:	1702080c 	.word	0x1702080c
   110c8:	0201010d 	.word	0x0201010d
   110cc:	01010909 	.word	0x01010909
   110d0:	18090206 	.word	0x18090206
   110d4:	01010318 	.word	0x01010318
   110d8:	03030909 	.word	0x03030909
   110dc:	01020305 	.word	0x01020305
   110e0:	24020223 	.word	0x24020223
   110e4:	04041009 	.word	0x04041009
   110e8:	0b0b0505 	.word	0x0b0b0505
   110ec:	0b04      	.short	0x0b04
   110ee:	2b          	.byte	0x2b
   110ef:	d8          	.byte	0xd8
   110f0:	f8f4f0ec 	.word	0xf8f4f0ec
   110f4:	030200fc 	.word	0x030200fc
   110f8:	07060504 	.word	0x07060504
   110fc:	00000008 	.word	0x00000008
	...
   11110:	01010100 	.word	0x01010100
   11114:	02020201 	.word	0x02020201
   11118:	03030302 	.word	0x03030302
   1111c:	04040403 	.word	0x04040403
   11120:	05050504 	.word	0x05050504
   11124:	07060605 	.word	0x07060605
   11128:	0b0a0908 	.word	0x0b0a0908
   1112c:	00000d0c 	.word	0x00000d0c
	...
   11140:	01010000 	.word	0x01010000
   11144:	02020101 	.word	0x02020101
   11148:	03030202 	.word	0x03030202
   1114c:	04040303 	.word	0x04040303
   11150:	05050404 	.word	0x05050404
   11154:	06060505 	.word	0x06060505
   11158:	00090806 	.word	0x00090806
   1115c:	00000000 	.word	0x00000000

00011160 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
   11160:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   11162:	4d42      	ldr	r5, [pc, #264]	; (1126c <bt_init+0x10c>)
{
   11164:	b089      	sub	sp, #36	; 0x24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   11166:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
   1116a:	6899      	ldr	r1, [r3, #8]
   1116c:	f011 0101 	ands.w	r1, r1, #1
{
   11170:	af00      	add	r7, sp, #0
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   11172:	d120      	bne.n	111b6 <bt_init+0x56>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   11174:	f107 0208 	add.w	r2, r7, #8
   11178:	f640 4003 	movw	r0, #3075	; 0xc03
   1117c:	f005 fbbc 	bl	168f8 <bt_hci_cmd_send_sync>
		if (err) {
   11180:	4604      	mov	r4, r0
   11182:	2800      	cmp	r0, #0
   11184:	d16e      	bne.n	11264 <bt_init+0x104>
		hci_reset_complete(rsp);
   11186:	68ba      	ldr	r2, [r7, #8]
	uint8_t status = buf->data[0];
   11188:	68d3      	ldr	r3, [r2, #12]
	if (status) {
   1118a:	781b      	ldrb	r3, [r3, #0]
   1118c:	b983      	cbnz	r3, 111b0 <bt_init+0x50>
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   1118e:	f105 03d4 	add.w	r3, r5, #212	; 0xd4
   11192:	4618      	mov	r0, r3
   11194:	f017 ffef 	bl	29176 <atomic_get>
   11198:	f3bf 8f5b 	dmb	ish
   1119c:	f000 0009 	and.w	r0, r0, #9
   111a0:	e853 1f00 	ldrex	r1, [r3]
   111a4:	e843 0400 	strex	r4, r0, [r3]
   111a8:	2c00      	cmp	r4, #0
   111aa:	d1f9      	bne.n	111a0 <bt_init+0x40>
   111ac:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   111b0:	4610      	mov	r0, r2
   111b2:	f00d fc79 	bl	1eaa8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   111b6:	f107 0208 	add.w	r2, r7, #8
   111ba:	2100      	movs	r1, #0
   111bc:	f241 0003 	movw	r0, #4099	; 0x1003
   111c0:	f005 fb9a 	bl	168f8 <bt_hci_cmd_send_sync>
	if (err) {
   111c4:	4604      	mov	r4, r0
   111c6:	2800      	cmp	r0, #0
   111c8:	d14c      	bne.n	11264 <bt_init+0x104>
	read_local_features_complete(rsp);
   111ca:	68be      	ldr	r6, [r7, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   111cc:	4828      	ldr	r0, [pc, #160]	; (11270 <bt_init+0x110>)
   111ce:	68f1      	ldr	r1, [r6, #12]
   111d0:	2208      	movs	r2, #8
   111d2:	3101      	adds	r1, #1
   111d4:	f017 fea8 	bl	28f28 <memcpy>
	net_buf_unref(rsp);
   111d8:	4630      	mov	r0, r6
   111da:	f00d fc65 	bl	1eaa8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   111de:	4621      	mov	r1, r4
   111e0:	f107 0208 	add.w	r2, r7, #8
   111e4:	f241 0001 	movw	r0, #4097	; 0x1001
   111e8:	f005 fb86 	bl	168f8 <bt_hci_cmd_send_sync>
	if (err) {
   111ec:	4604      	mov	r4, r0
   111ee:	2800      	cmp	r0, #0
   111f0:	d138      	bne.n	11264 <bt_init+0x104>
	read_local_ver_complete(rsp);
   111f2:	68b8      	ldr	r0, [r7, #8]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   111f4:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
   111f6:	785a      	ldrb	r2, [r3, #1]
   111f8:	f885 2070 	strb.w	r2, [r5, #112]	; 0x70
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   111fc:	885a      	ldrh	r2, [r3, #2]
   111fe:	f8a5 2072 	strh.w	r2, [r5, #114]	; 0x72
	bt_dev.lmp_version = rp->lmp_version;
   11202:	791a      	ldrb	r2, [r3, #4]
   11204:	f885 2071 	strb.w	r2, [r5, #113]	; 0x71
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   11208:	f8b3 2007 	ldrh.w	r2, [r3, #7]
   1120c:	f8a5 2074 	strh.w	r2, [r5, #116]	; 0x74
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   11210:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   11214:	f8a5 3076 	strh.w	r3, [r5, #118]	; 0x76
	net_buf_unref(rsp);
   11218:	f00d fc46 	bl	1eaa8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   1121c:	4621      	mov	r1, r4
   1121e:	f107 0208 	add.w	r2, r7, #8
   11222:	f241 0002 	movw	r0, #4098	; 0x1002
   11226:	f005 fb67 	bl	168f8 <bt_hci_cmd_send_sync>
	if (err) {
   1122a:	4604      	mov	r4, r0
   1122c:	b9d0      	cbnz	r0, 11264 <bt_init+0x104>
	read_supported_commands_complete(rsp);
   1122e:	68be      	ldr	r6, [r7, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
   11230:	4810      	ldr	r0, [pc, #64]	; (11274 <bt_init+0x114>)
   11232:	68f1      	ldr	r1, [r6, #12]
   11234:	2240      	movs	r2, #64	; 0x40
   11236:	3101      	adds	r1, #1
   11238:	f017 fe76 	bl	28f28 <memcpy>
	net_buf_unref(rsp);
   1123c:	4630      	mov	r0, r6
   1123e:	f00d fc33 	bl	1eaa8 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   11242:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
   11246:	065a      	lsls	r2, r3, #25
   11248:	d41a      	bmi.n	11280 <bt_init+0x120>
		LOG_ERR("Non-LE capable controller detected!");
   1124a:	4b0b      	ldr	r3, [pc, #44]	; (11278 <bt_init+0x118>)
   1124c:	61fb      	str	r3, [r7, #28]
   1124e:	2302      	movs	r3, #2
   11250:	480a      	ldr	r0, [pc, #40]	; (1127c <bt_init+0x11c>)
   11252:	61bb      	str	r3, [r7, #24]
   11254:	f107 0218 	add.w	r2, r7, #24
   11258:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
   1125c:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("Non-LE capable controller detected!");
   11260:	f017 ffa6 	bl	291b0 <z_log_msg_static_create.constprop.0>
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
   11264:	4620      	mov	r0, r4
   11266:	3724      	adds	r7, #36	; 0x24
   11268:	46bd      	mov	sp, r7
   1126a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1126c:	20000390 	.word	0x20000390
   11270:	20000408 	.word	0x20000408
   11274:	20000410 	.word	0x20000410
   11278:	0002eab6 	.word	0x0002eab6
   1127c:	0002cb24 	.word	0x0002cb24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   11280:	4621      	mov	r1, r4
   11282:	f107 0208 	add.w	r2, r7, #8
   11286:	f242 0003 	movw	r0, #8195	; 0x2003
   1128a:	f005 fb35 	bl	168f8 <bt_hci_cmd_send_sync>
	if (err) {
   1128e:	4604      	mov	r4, r0
   11290:	2800      	cmp	r0, #0
   11292:	d1e7      	bne.n	11264 <bt_init+0x104>
	read_le_features_complete(rsp);
   11294:	68be      	ldr	r6, [r7, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   11296:	48b8      	ldr	r0, [pc, #736]	; (11578 <bt_init+0x418>)
   11298:	68f1      	ldr	r1, [r6, #12]
   1129a:	2208      	movs	r2, #8
   1129c:	3101      	adds	r1, #1
   1129e:	f017 fe43 	bl	28f28 <memcpy>
	net_buf_unref(rsp);
   112a2:	4630      	mov	r0, r6
   112a4:	f00d fc00 	bl	1eaa8 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   112a8:	4621      	mov	r1, r4
   112aa:	f107 0208 	add.w	r2, r7, #8
   112ae:	f242 0002 	movw	r0, #8194	; 0x2002
   112b2:	f005 fb21 	bl	168f8 <bt_hci_cmd_send_sync>
		if (err) {
   112b6:	4604      	mov	r4, r0
   112b8:	2800      	cmp	r0, #0
   112ba:	d1d3      	bne.n	11264 <bt_init+0x104>
		le_read_buffer_size_complete(rsp);
   112bc:	68bc      	ldr	r4, [r7, #8]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   112be:	68e3      	ldr	r3, [r4, #12]
	uint16_t acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   112c0:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   112c4:	b291      	uxth	r1, r2
	if (!acl_mtu || !rp->le_max_num) {
   112c6:	b141      	cbz	r1, 112da <bt_init+0x17a>
   112c8:	78d9      	ldrb	r1, [r3, #3]
   112ca:	b131      	cbz	r1, 112da <bt_init+0x17a>
	bt_dev.le.acl_mtu = acl_mtu;
   112cc:	f8a5 2104 	strh.w	r2, [r5, #260]	; 0x104
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   112d0:	78da      	ldrb	r2, [r3, #3]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
   112d2:	48aa      	ldr	r0, [pc, #680]	; (1157c <bt_init+0x41c>)
   112d4:	4611      	mov	r1, r2
   112d6:	f01a fdf7 	bl	2bec8 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   112da:	4620      	mov	r0, r4
   112dc:	f00d fbe4 	bl	1eaa8 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   112e0:	f895 607c 	ldrb.w	r6, [r5, #124]	; 0x7c
   112e4:	f016 0620 	ands.w	r6, r6, #32
   112e8:	d118      	bne.n	1131c <bt_init+0x1bc>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   112ea:	2102      	movs	r1, #2
   112ec:	f640 406d 	movw	r0, #3181	; 0xc6d
   112f0:	f005 fac8 	bl	16884 <bt_hci_cmd_create>
		if (!buf) {
   112f4:	4604      	mov	r4, r0
   112f6:	2800      	cmp	r0, #0
   112f8:	f000 80e6 	beq.w	114c8 <bt_init+0x368>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
   112fc:	2102      	movs	r1, #2
   112fe:	300c      	adds	r0, #12
   11300:	f01a f824 	bl	2b34c <net_buf_simple_add>
		cp_le->le = 0x01;
   11304:	2301      	movs	r3, #1
   11306:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   11308:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   1130a:	4621      	mov	r1, r4
   1130c:	4632      	mov	r2, r6
   1130e:	f640 406d 	movw	r0, #3181	; 0xc6d
   11312:	f005 faf1 	bl	168f8 <bt_hci_cmd_send_sync>
		if (err) {
   11316:	4604      	mov	r4, r0
   11318:	2800      	cmp	r0, #0
   1131a:	d1a3      	bne.n	11264 <bt_init+0x104>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   1131c:	f895 309c 	ldrb.w	r3, [r5, #156]	; 0x9c
   11320:	071b      	lsls	r3, r3, #28
   11322:	d513      	bpl.n	1134c <bt_init+0x1ec>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   11324:	f107 0208 	add.w	r2, r7, #8
   11328:	2100      	movs	r1, #0
   1132a:	f242 001c 	movw	r0, #8220	; 0x201c
   1132e:	f005 fae3 	bl	168f8 <bt_hci_cmd_send_sync>
		if (err) {
   11332:	4604      	mov	r4, r0
   11334:	2800      	cmp	r0, #0
   11336:	d195      	bne.n	11264 <bt_init+0x104>
		le_read_supp_states_complete(rsp);
   11338:	68b8      	ldr	r0, [r7, #8]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   1133a:	68c3      	ldr	r3, [r0, #12]
   1133c:	f8d3 2001 	ldr.w	r2, [r3, #1]
   11340:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   11344:	e9c5 2338 	strd	r2, r3, [r5, #224]	; 0xe0
		net_buf_unref(rsp);
   11348:	f00d fbae 	bl	1eaa8 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   1134c:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   11350:	069e      	lsls	r6, r3, #26
   11352:	d521      	bpl.n	11398 <bt_init+0x238>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   11354:	1d39      	adds	r1, r7, #4
   11356:	1cb8      	adds	r0, r7, #2
   11358:	f005 fb4e 	bl	169f8 <hci_le_read_max_data_len>
		if (err) {
   1135c:	4604      	mov	r4, r0
   1135e:	2800      	cmp	r0, #0
   11360:	d180      	bne.n	11264 <bt_init+0x104>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   11362:	2104      	movs	r1, #4
   11364:	f242 0024 	movw	r0, #8228	; 0x2024
   11368:	f005 fa8c 	bl	16884 <bt_hci_cmd_create>
		if (!buf) {
   1136c:	4606      	mov	r6, r0
   1136e:	2800      	cmp	r0, #0
   11370:	f000 80aa 	beq.w	114c8 <bt_init+0x368>
   11374:	2104      	movs	r1, #4
   11376:	300c      	adds	r0, #12
   11378:	f019 ffe8 	bl	2b34c <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   1137c:	887b      	ldrh	r3, [r7, #2]
   1137e:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   11380:	88bb      	ldrh	r3, [r7, #4]
   11382:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   11384:	4622      	mov	r2, r4
   11386:	4631      	mov	r1, r6
   11388:	f242 0024 	movw	r0, #8228	; 0x2024
   1138c:	f005 fab4 	bl	168f8 <bt_hci_cmd_send_sync>
		if (err) {
   11390:	4604      	mov	r4, r0
   11392:	2800      	cmp	r0, #0
   11394:	f47f af66 	bne.w	11264 <bt_init+0x104>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   11398:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   1139c:	065c      	lsls	r4, r3, #25
   1139e:	d52b      	bpl.n	113f8 <bt_init+0x298>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RPA_TIMEOUT,
   113a0:	2102      	movs	r1, #2
   113a2:	f242 002e 	movw	r0, #8238	; 0x202e
   113a6:	f005 fa6d 	bl	16884 <bt_hci_cmd_create>
		if (!buf) {
   113aa:	4604      	mov	r4, r0
   113ac:	2800      	cmp	r0, #0
   113ae:	f000 808b 	beq.w	114c8 <bt_init+0x368>
   113b2:	2102      	movs	r1, #2
   113b4:	300c      	adds	r0, #12
   113b6:	f019 ffc9 	bl	2b34c <net_buf_simple_add>
		cp->rpa_timeout = sys_cpu_to_le16(bt_dev.rpa_timeout);
   113ba:	f8b5 31a8 	ldrh.w	r3, [r5, #424]	; 0x1a8
   113be:	8003      	strh	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RPA_TIMEOUT, buf,
   113c0:	4621      	mov	r1, r4
   113c2:	2200      	movs	r2, #0
   113c4:	f242 002e 	movw	r0, #8238	; 0x202e
   113c8:	f005 fa96 	bl	168f8 <bt_hci_cmd_send_sync>
		if (err) {
   113cc:	4604      	mov	r4, r0
   113ce:	2800      	cmp	r0, #0
   113d0:	f47f af48 	bne.w	11264 <bt_init+0x104>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
   113d4:	4601      	mov	r1, r0
   113d6:	f107 0208 	add.w	r2, r7, #8
   113da:	f242 002a 	movw	r0, #8234	; 0x202a
   113de:	f005 fa8b 	bl	168f8 <bt_hci_cmd_send_sync>
		if (err) {
   113e2:	4604      	mov	r4, r0
   113e4:	2800      	cmp	r0, #0
   113e6:	f47f af3d 	bne.w	11264 <bt_init+0x104>
		le_read_resolving_list_size_complete(rsp);
   113ea:	68b8      	ldr	r0, [r7, #8]
	bt_dev.le.rl_size = rp->rl_size;
   113ec:	68c3      	ldr	r3, [r0, #12]
   113ee:	785b      	ldrb	r3, [r3, #1]
   113f0:	f885 3120 	strb.w	r3, [r5, #288]	; 0x120
		net_buf_unref(rsp);
   113f4:	f00d fb58 	bl	1eaa8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   113f8:	2108      	movs	r1, #8
   113fa:	f242 0001 	movw	r0, #8193	; 0x2001
   113fe:	f005 fa41 	bl	16884 <bt_hci_cmd_create>
	if (!buf) {
   11402:	4604      	mov	r4, r0
   11404:	2800      	cmp	r0, #0
   11406:	d05f      	beq.n	114c8 <bt_init+0x368>
   11408:	2108      	movs	r1, #8
   1140a:	300c      	adds	r0, #12
   1140c:	f019 ff9e 	bl	2b34c <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
   11410:	f895 10d8 	ldrb.w	r1, [r5, #216]	; 0xd8
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
   11414:	f011 0f40 	tst.w	r1, #64	; 0x40
   11418:	4602      	mov	r2, r0
   1141a:	f240 2302 	movw	r3, #514	; 0x202
   1141e:	bf08      	it	eq
   11420:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   11422:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   11424:	bf4c      	ite	mi
   11426:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   1142a:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   1142e:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   11430:	f895 30d9 	ldrb.w	r3, [r5, #217]	; 0xd9
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   11434:	bf48      	it	mi
   11436:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   1143a:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   1143e:	f895 30a2 	ldrb.w	r3, [r5, #162]	; 0xa2
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   11442:	bf18      	it	ne
   11444:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   11448:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1144c:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
   1144e:	bf48      	it	mi
   11450:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   11454:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
   11456:	bf08      	it	eq
   11458:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
   1145c:	2100      	movs	r1, #0
   1145e:	f017 feb6 	bl	291ce <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   11462:	4621      	mov	r1, r4
   11464:	2200      	movs	r2, #0
   11466:	f242 0001 	movw	r0, #8193	; 0x2001
   1146a:	f005 fa45 	bl	168f8 <bt_hci_cmd_send_sync>
	if (err) {
   1146e:	4604      	mov	r4, r0
   11470:	2800      	cmp	r0, #0
   11472:	f47f aef7 	bne.w	11264 <bt_init+0x104>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   11476:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
	if (bt_dev.le.acl_mtu) {
   1147a:	f8b5 1104 	ldrh.w	r1, [r5, #260]	; 0x104
	if (BT_FEAT_BREDR(bt_dev.features)) {
   1147e:	0698      	lsls	r0, r3, #26
   11480:	d425      	bmi.n	114ce <bt_init+0x36e>
	if (bt_dev.le.acl_mtu) {
   11482:	b9d1      	cbnz	r1, 114ba <bt_init+0x35a>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   11484:	f107 0208 	add.w	r2, r7, #8
   11488:	f241 0005 	movw	r0, #4101	; 0x1005
   1148c:	f005 fa34 	bl	168f8 <bt_hci_cmd_send_sync>
	if (err) {
   11490:	4604      	mov	r4, r0
   11492:	2800      	cmp	r0, #0
   11494:	f47f aee6 	bne.w	11264 <bt_init+0x104>
	if (bt_dev.le.acl_mtu) {
   11498:	f8b5 3104 	ldrh.w	r3, [r5, #260]	; 0x104
	read_buffer_size_complete(rsp);
   1149c:	68bc      	ldr	r4, [r7, #8]
	if (bt_dev.le.acl_mtu) {
   1149e:	b94b      	cbnz	r3, 114b4 <bt_init+0x354>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   114a0:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   114a2:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   114a6:	f8a5 2104 	strh.w	r2, [r5, #260]	; 0x104
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   114aa:	889a      	ldrh	r2, [r3, #4]
   114ac:	4833      	ldr	r0, [pc, #204]	; (1157c <bt_init+0x41c>)
   114ae:	4611      	mov	r1, r2
   114b0:	f01a fd0a 	bl	2bec8 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   114b4:	4620      	mov	r0, r4
   114b6:	f00d faf7 	bl	1eaa8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   114ba:	2108      	movs	r1, #8
   114bc:	f640 4001 	movw	r0, #3073	; 0xc01
   114c0:	f005 f9e0 	bl	16884 <bt_hci_cmd_create>
	if (!buf) {
   114c4:	4604      	mov	r4, r0
   114c6:	b990      	cbnz	r0, 114ee <bt_init+0x38e>
		return -ENOBUFS;
   114c8:	f06f 0468 	mvn.w	r4, #104	; 0x68
   114cc:	e6ca      	b.n	11264 <bt_init+0x104>
	else if (!bt_dev.le.acl_mtu) {
   114ce:	2900      	cmp	r1, #0
   114d0:	d1f3      	bne.n	114ba <bt_init+0x35a>
		LOG_ERR("ACL BR/EDR buffers not initialized");
   114d2:	4b2b      	ldr	r3, [pc, #172]	; (11580 <bt_init+0x420>)
   114d4:	61fb      	str	r3, [r7, #28]
   114d6:	2302      	movs	r3, #2
   114d8:	482a      	ldr	r0, [pc, #168]	; (11584 <bt_init+0x424>)
   114da:	61bb      	str	r3, [r7, #24]
   114dc:	f107 0218 	add.w	r2, r7, #24
   114e0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   114e4:	f017 fe64 	bl	291b0 <z_log_msg_static_create.constprop.0>
		return -EIO;
   114e8:	f06f 0404 	mvn.w	r4, #4
   114ec:	e6ba      	b.n	11264 <bt_init+0x104>
   114ee:	2108      	movs	r1, #8
   114f0:	300c      	adds	r0, #12
   114f2:	f019 ff2b 	bl	2b34c <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   114f6:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   114fa:	07d9      	lsls	r1, r3, #31
   114fc:	4602      	mov	r2, r0
   114fe:	d430      	bmi.n	11562 <bt_init+0x402>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
   11500:	4821      	ldr	r0, [pc, #132]	; (11588 <bt_init+0x428>)
   11502:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
	sys_put_le64(mask, ev->events);
   11506:	f017 fe62 	bl	291ce <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   1150a:	4621      	mov	r1, r4
   1150c:	2200      	movs	r2, #0
   1150e:	f640 4001 	movw	r0, #3073	; 0xc01
   11512:	f005 f9f1 	bl	168f8 <bt_hci_cmd_send_sync>
	if (err) {
   11516:	4604      	mov	r4, r0
   11518:	2800      	cmp	r0, #0
   1151a:	f47f aea3 	bne.w	11264 <bt_init+0x104>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   1151e:	4601      	mov	r1, r0
   11520:	1d3a      	adds	r2, r7, #4
   11522:	f64f 4001 	movw	r0, #64513	; 0xfc01
   11526:	f005 f9e7 	bl	168f8 <bt_hci_cmd_send_sync>
	if (err) {
   1152a:	b388      	cbz	r0, 11590 <bt_init+0x430>
		LOG_WRN("Vendor HCI extensions not available");
   1152c:	4b17      	ldr	r3, [pc, #92]	; (1158c <bt_init+0x42c>)
			LOG_WRN("Failed to read supported vendor features");
   1152e:	61fb      	str	r3, [r7, #28]
   11530:	2302      	movs	r3, #2
   11532:	4814      	ldr	r0, [pc, #80]	; (11584 <bt_init+0x424>)
   11534:	61bb      	str	r3, [r7, #24]
   11536:	f107 0218 	add.w	r2, r7, #24
   1153a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1153e:	f017 fe37 	bl	291b0 <z_log_msg_static_create.constprop.0>
	err = bt_id_init();
   11542:	f006 fed9 	bl	182f8 <bt_id_init>
	if (err) {
   11546:	4604      	mov	r4, r0
   11548:	2800      	cmp	r0, #0
   1154a:	f47f ae8b 	bne.w	11264 <bt_init+0x104>
		err = bt_conn_init();
   1154e:	f008 fa59 	bl	19a04 <bt_conn_init>
		if (err) {
   11552:	4604      	mov	r4, r0
   11554:	2800      	cmp	r0, #0
   11556:	f47f ae85 	bne.w	11264 <bt_init+0x104>
   1155a:	f006 f865 	bl	17628 <bt_init.part.0>
   1155e:	4604      	mov	r4, r0
   11560:	e680      	b.n	11264 <bt_init+0x104>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
   11562:	a103      	add	r1, pc, #12	; (adr r1, 11570 <bt_init+0x410>)
   11564:	e9d1 0100 	ldrd	r0, r1, [r1]
   11568:	e7cd      	b.n	11506 <bt_init+0x3a6>
   1156a:	bf00      	nop
   1156c:	f3af 8000 	nop.w
   11570:	02008890 	.word	0x02008890
   11574:	20008000 	.word	0x20008000
   11578:	20000468 	.word	0x20000468
   1157c:	20000498 	.word	0x20000498
   11580:	0002eada 	.word	0x0002eada
   11584:	0002cb24 	.word	0x0002cb24
   11588:	02008810 	.word	0x02008810
   1158c:	0002eafd 	.word	0x0002eafd
	rp.info = (void *)rsp->data;
   11590:	687b      	ldr	r3, [r7, #4]
   11592:	68dc      	ldr	r4, [r3, #12]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
   11594:	f8b4 3001 	ldrh.w	r3, [r4, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
   11598:	2b03      	cmp	r3, #3
		return plat_str[platform];
   1159a:	bf96      	itet	ls
   1159c:	4a45      	ldrls	r2, [pc, #276]	; (116b4 <bt_init+0x554>)
	return "unknown";
   1159e:	4946      	ldrhi	r1, [pc, #280]	; (116b8 <bt_init+0x558>)
		return plat_str[platform];
   115a0:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
   115a4:	466e      	mov	r6, sp
   115a6:	b08a      	sub	sp, #40	; 0x28
   115a8:	466a      	mov	r2, sp
   115aa:	4844      	ldr	r0, [pc, #272]	; (116bc <bt_init+0x55c>)
   115ac:	61d3      	str	r3, [r2, #28]
   115ae:	f44f 7300 	mov.w	r3, #512	; 0x200
   115b2:	8413      	strh	r3, [r2, #32]
   115b4:	4b42      	ldr	r3, [pc, #264]	; (116c0 <bt_init+0x560>)
   115b6:	e9c2 0105 	strd	r0, r1, [r2, #20]
   115ba:	f842 3f10 	str.w	r3, [r2, #16]!
   115be:	4841      	ldr	r0, [pc, #260]	; (116c4 <bt_init+0x564>)
   115c0:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
   115c4:	f017 fdf4 	bl	291b0 <z_log_msg_static_create.constprop.0>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   115c8:	f8b4 2001 	ldrh.w	r2, [r4, #1]
	LOG_INF("HW Variant: %s (0x%04x)",
   115cc:	f8b4 3003 	ldrh.w	r3, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   115d0:	2a02      	cmp	r2, #2
   115d2:	46b5      	mov	sp, r6
   115d4:	d149      	bne.n	1166a <bt_init+0x50a>
	if (variant < ARRAY_SIZE(nordic_str)) {
   115d6:	2b03      	cmp	r3, #3
   115d8:	d847      	bhi.n	1166a <bt_init+0x50a>
		return nordic_str[variant];
   115da:	4a3b      	ldr	r2, [pc, #236]	; (116c8 <bt_init+0x568>)
   115dc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
	LOG_INF("HW Variant: %s (0x%04x)",
   115e0:	466e      	mov	r6, sp
   115e2:	b08a      	sub	sp, #40	; 0x28
   115e4:	466a      	mov	r2, sp
   115e6:	4839      	ldr	r0, [pc, #228]	; (116cc <bt_init+0x56c>)
   115e8:	61d3      	str	r3, [r2, #28]
   115ea:	f44f 7300 	mov.w	r3, #512	; 0x200
   115ee:	8413      	strh	r3, [r2, #32]
   115f0:	4b33      	ldr	r3, [pc, #204]	; (116c0 <bt_init+0x560>)
   115f2:	e9c2 0105 	strd	r0, r1, [r2, #20]
   115f6:	f842 3f10 	str.w	r3, [r2, #16]!
   115fa:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
   115fe:	4831      	ldr	r0, [pc, #196]	; (116c4 <bt_init+0x564>)
   11600:	f017 fdd6 	bl	291b0 <z_log_msg_static_create.constprop.0>
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
   11604:	7963      	ldrb	r3, [r4, #5]
   11606:	f894 c006 	ldrb.w	ip, [r4, #6]
   1160a:	f8d4 0009 	ldr.w	r0, [r4, #9]
	if (variant < ARRAY_SIZE(var_str)) {
   1160e:	2b03      	cmp	r3, #3
   11610:	46b5      	mov	sp, r6
		return var_str[variant];
   11612:	bf98      	it	ls
   11614:	4a2e      	ldrls	r2, [pc, #184]	; (116d0 <bt_init+0x570>)
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
   11616:	f8b4 6007 	ldrh.w	r6, [r4, #7]
		return var_str[variant];
   1161a:	bf94      	ite	ls
   1161c:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	return "unknown";
   11620:	4925      	ldrhi	r1, [pc, #148]	; (116b8 <bt_init+0x558>)
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
   11622:	466c      	mov	r4, sp
   11624:	b08c      	sub	sp, #48	; 0x30
   11626:	466a      	mov	r2, sp
   11628:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 116d4 <bt_init+0x574>
   1162c:	e9c2 3c07 	strd	r3, ip, [r2, #28]
   11630:	f44f 7300 	mov.w	r3, #512	; 0x200
   11634:	8593      	strh	r3, [r2, #44]	; 0x2c
   11636:	4b28      	ldr	r3, [pc, #160]	; (116d8 <bt_init+0x578>)
   11638:	e9c2 e105 	strd	lr, r1, [r2, #20]
   1163c:	e9c2 6009 	strd	r6, r0, [r2, #36]	; 0x24
   11640:	f44f 5173 	mov.w	r1, #15552	; 0x3cc0
   11644:	f842 3f10 	str.w	r3, [r2, #16]!
   11648:	481e      	ldr	r0, [pc, #120]	; (116c4 <bt_init+0x564>)
   1164a:	f017 fdb1 	bl	291b0 <z_log_msg_static_create.constprop.0>
   1164e:	46a5      	mov	sp, r4
	net_buf_unref(rsp);
   11650:	6878      	ldr	r0, [r7, #4]
   11652:	f00d fa29 	bl	1eaa8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   11656:	1d3a      	adds	r2, r7, #4
   11658:	2100      	movs	r1, #0
   1165a:	f64f 4002 	movw	r0, #64514	; 0xfc02
   1165e:	f005 f94b 	bl	168f8 <bt_hci_cmd_send_sync>
	if (err) {
   11662:	4604      	mov	r4, r0
   11664:	b118      	cbz	r0, 1166e <bt_init+0x50e>
		LOG_WRN("Failed to read supported vendor commands");
   11666:	4b1d      	ldr	r3, [pc, #116]	; (116dc <bt_init+0x57c>)
   11668:	e761      	b.n	1152e <bt_init+0x3ce>
		return "unknown";
   1166a:	4913      	ldr	r1, [pc, #76]	; (116b8 <bt_init+0x558>)
   1166c:	e7b8      	b.n	115e0 <bt_init+0x480>
	rp.cmds = (void *)rsp->data;
   1166e:	687e      	ldr	r6, [r7, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   11670:	481b      	ldr	r0, [pc, #108]	; (116e0 <bt_init+0x580>)
   11672:	68f1      	ldr	r1, [r6, #12]
   11674:	2202      	movs	r2, #2
   11676:	3101      	adds	r1, #1
   11678:	f017 fc56 	bl	28f28 <memcpy>
	net_buf_unref(rsp);
   1167c:	4630      	mov	r0, r6
   1167e:	f00d fa13 	bl	1eaa8 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   11682:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   11686:	075b      	lsls	r3, r3, #29
   11688:	f57f af5b 	bpl.w	11542 <bt_init+0x3e2>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   1168c:	1d3a      	adds	r2, r7, #4
   1168e:	4621      	mov	r1, r4
   11690:	f64f 4003 	movw	r0, #64515	; 0xfc03
   11694:	f005 f930 	bl	168f8 <bt_hci_cmd_send_sync>
		if (err) {
   11698:	b108      	cbz	r0, 1169e <bt_init+0x53e>
			LOG_WRN("Failed to read supported vendor features");
   1169a:	4b12      	ldr	r3, [pc, #72]	; (116e4 <bt_init+0x584>)
   1169c:	e747      	b.n	1152e <bt_init+0x3ce>
		rp.feat = (void *)rsp->data;
   1169e:	687c      	ldr	r4, [r7, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   116a0:	4811      	ldr	r0, [pc, #68]	; (116e8 <bt_init+0x588>)
   116a2:	68e1      	ldr	r1, [r4, #12]
   116a4:	2201      	movs	r2, #1
   116a6:	4411      	add	r1, r2
   116a8:	f017 fc3e 	bl	28f28 <memcpy>
		net_buf_unref(rsp);
   116ac:	4620      	mov	r0, r4
   116ae:	f00d f9fb 	bl	1eaa8 <net_buf_unref>
   116b2:	e746      	b.n	11542 <bt_init+0x3e2>
   116b4:	0002cfdc 	.word	0x0002cfdc
   116b8:	0002e54f 	.word	0x0002e54f
   116bc:	0002eb21 	.word	0x0002eb21
   116c0:	01000004 	.word	0x01000004
   116c4:	0002cb24 	.word	0x0002cb24
   116c8:	0002cfcc 	.word	0x0002cfcc
   116cc:	0002eb3a 	.word	0x0002eb3a
   116d0:	0002cfbc 	.word	0x0002cfbc
   116d4:	0002eb52 	.word	0x0002eb52
   116d8:	01000007 	.word	0x01000007
   116dc:	0002eb7f 	.word	0x0002eb7f
   116e0:	20000451 	.word	0x20000451
   116e4:	0002eba8 	.word	0x0002eba8
   116e8:	20000450 	.word	0x20000450

000116ec <main>:
		k_sleep(K_MSEC(SYNC_INTERVAL));
	}
}

void main(void)
{
   116ec:	b510      	push	{r4, lr}
   116ee:	b086      	sub	sp, #24
	int err;

	LOG_INF("Starting DCLK Controller \n");
   116f0:	4b18      	ldr	r3, [pc, #96]	; (11754 <main+0x68>)
   116f2:	9305      	str	r3, [sp, #20]
   116f4:	2402      	movs	r4, #2
   116f6:	9404      	str	r4, [sp, #16]
   116f8:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   116fc:	4816      	ldr	r0, [pc, #88]	; (11758 <main+0x6c>)
   116fe:	2300      	movs	r3, #0
   11700:	aa04      	add	r2, sp, #16
   11702:	f002 fa5f 	bl	13bc4 <z_impl_z_log_msg_static_create>

	err = interface_init(&inter_callbacks);
   11706:	4815      	ldr	r0, [pc, #84]	; (1175c <main+0x70>)
   11708:	f000 fb42 	bl	11d90 <interface_init>
   1170c:	4601      	mov	r1, r0
	if (err)
   1170e:	b128      	cbz	r0, 1171c <main+0x30>
	{
		printk("Interface init failed (err %d)\n", err);
   11710:	4813      	ldr	r0, [pc, #76]	; (11760 <main+0x74>)
	for (;;)
	{
		//dk_set_led(RUN_STATUS_LED, (++blink_status) % 2);
		k_sleep(K_MSEC(RUN_LED_BLINK_INTERVAL));
	}
}
   11712:	b006      	add	sp, #24
   11714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Failed to init LBS (err:%d)\n", err);
   11718:	f015 bf3f 	b.w	2759a <printk>
	err= bt_unpair(BT_ID_DEFAULT,BT_ADDR_LE_ANY);
   1171c:	4911      	ldr	r1, [pc, #68]	; (11764 <main+0x78>)
   1171e:	f005 fb87 	bl	16e30 <bt_unpair>
	err = dclk_init(&app_callbacks);
   11722:	4811      	ldr	r0, [pc, #68]	; (11768 <main+0x7c>)
   11724:	f000 fa06 	bl	11b34 <dclk_init>
	if (err)
   11728:	4603      	mov	r3, r0
   1172a:	b110      	cbz	r0, 11732 <main+0x46>
		printk("Failed to init LBS (err:%d)\n", err);
   1172c:	4601      	mov	r1, r0
   1172e:	480f      	ldr	r0, [pc, #60]	; (1176c <main+0x80>)
   11730:	e7ef      	b.n	11712 <main+0x26>
	LOG_INF("Bluetooth initialized\n");
   11732:	4a0f      	ldr	r2, [pc, #60]	; (11770 <main+0x84>)
   11734:	e9cd 4204 	strd	r4, r2, [sp, #16]
   11738:	4807      	ldr	r0, [pc, #28]	; (11758 <main+0x6c>)
   1173a:	aa04      	add	r2, sp, #16
   1173c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   11740:	f002 fa40 	bl	13bc4 <z_impl_z_log_msg_static_create>
	start_advertising();
   11744:	f000 fa22 	bl	11b8c <start_advertising>
	return z_impl_k_sleep(timeout);
   11748:	2100      	movs	r1, #0
   1174a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1174e:	f012 fae3 	bl	23d18 <z_impl_k_sleep>
	for (;;)
   11752:	e7f9      	b.n	11748 <main+0x5c>
   11754:	0002d7ca 	.word	0x0002d7ca
   11758:	0002cad4 	.word	0x0002cad4
   1175c:	20000540 	.word	0x20000540
   11760:	0002d7e5 	.word	0x0002d7e5
   11764:	0002e38f 	.word	0x0002e38f
   11768:	20000548 	.word	0x20000548
   1176c:	0002d805 	.word	0x0002d805
   11770:	0002d822 	.word	0x0002d822

00011774 <dclk_ccc_state_cfg_changed>:
};

/* state configuration change callback function */
static void dclk_ccc_state_cfg_changed(const struct bt_gatt_attr *attr, uint16_t value)
{
	notify_state_enabled = (value == BT_GATT_CCC_NOTIFY);
   11774:	1e4b      	subs	r3, r1, #1
   11776:	4259      	negs	r1, r3
   11778:	4159      	adcs	r1, r3
   1177a:	4b01      	ldr	r3, [pc, #4]	; (11780 <dclk_ccc_state_cfg_changed+0xc>)
   1177c:	7019      	strb	r1, [r3, #0]
}
   1177e:	4770      	bx	lr
   11780:	20004566 	.word	0x20004566

00011784 <dclk_ccc_clock_cfg_changed>:

/* clock configuration change callback function */
static void dclk_ccc_clock_cfg_changed(const struct bt_gatt_attr *attr, uint16_t value)
{
	notify_clock_enabled = (value == BT_GATT_CCC_NOTIFY);
   11784:	1e4b      	subs	r3, r1, #1
   11786:	4259      	negs	r1, r3
   11788:	4159      	adcs	r1, r3
   1178a:	4b01      	ldr	r3, [pc, #4]	; (11790 <dclk_ccc_clock_cfg_changed+0xc>)
   1178c:	7019      	strb	r1, [r3, #0]
}
   1178e:	4770      	bx	lr
   11790:	20004565 	.word	0x20004565

00011794 <read_clock>:
	return 0;
}

static ssize_t read_clock(struct bt_conn *conn, const struct bt_gatt_attr *attr, void *buf,
						  uint16_t len, uint16_t offset)
{
   11794:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   11798:	461f      	mov	r7, r3
	// get a pointer to state which is passed in the BT_GATT_CHARACTERISTIC() and stored in attr->user_data
	const char *value = attr->user_data;

	LOG_DBG("Attribute read, handle: %u, conn: %p", attr->handle, (void *)conn);

	if (dclk_cb.clock_cb)
   1179a:	4b0d      	ldr	r3, [pc, #52]	; (117d0 <read_clock+0x3c>)
{
   1179c:	4605      	mov	r5, r0
	if (dclk_cb.clock_cb)
   1179e:	6818      	ldr	r0, [r3, #0]
{
   117a0:	460c      	mov	r4, r1
   117a2:	4616      	mov	r6, r2
	if (dclk_cb.clock_cb)
   117a4:	b180      	cbz	r0, 117c8 <read_clock+0x34>
	const char *value = attr->user_data;
   117a6:	f8d1 800c 	ldr.w	r8, [r1, #12]
	{
		// Call the application callback function to update the get the current value of the button
		clock = dclk_cb.clock_cb();
   117aa:	4780      	blx	r0
   117ac:	4b09      	ldr	r3, [pc, #36]	; (117d4 <read_clock+0x40>)
   117ae:	6018      	str	r0, [r3, #0]
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value, sizeof(*value));
   117b0:	2301      	movs	r3, #1
   117b2:	e9cd 8301 	strd	r8, r3, [sp, #4]
   117b6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   117ba:	9300      	str	r3, [sp, #0]
   117bc:	4632      	mov	r2, r6
   117be:	463b      	mov	r3, r7
   117c0:	4621      	mov	r1, r4
   117c2:	4628      	mov	r0, r5
   117c4:	f018 fffa 	bl	2a7bc <bt_gatt_attr_read>
	}

	return 0;
}
   117c8:	b004      	add	sp, #16
   117ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   117ce:	bf00      	nop
   117d0:	20002e10 	.word	0x20002e10
   117d4:	20002e18 	.word	0x20002e18

000117d8 <read_state>:
{
   117d8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   117dc:	461f      	mov	r7, r3
	if (dclk_cb.state_cb)
   117de:	4b0d      	ldr	r3, [pc, #52]	; (11814 <read_state+0x3c>)
{
   117e0:	4605      	mov	r5, r0
	if (dclk_cb.state_cb)
   117e2:	6858      	ldr	r0, [r3, #4]
{
   117e4:	460c      	mov	r4, r1
   117e6:	4616      	mov	r6, r2
	if (dclk_cb.state_cb)
   117e8:	b180      	cbz	r0, 1180c <read_state+0x34>
	const char *value = attr->user_data;
   117ea:	f8d1 800c 	ldr.w	r8, [r1, #12]
		state = dclk_cb.state_cb();
   117ee:	4780      	blx	r0
   117f0:	4b09      	ldr	r3, [pc, #36]	; (11818 <read_state+0x40>)
   117f2:	7018      	strb	r0, [r3, #0]
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value, sizeof(*value));
   117f4:	2301      	movs	r3, #1
   117f6:	e9cd 8301 	strd	r8, r3, [sp, #4]
   117fa:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   117fe:	9300      	str	r3, [sp, #0]
   11800:	4632      	mov	r2, r6
   11802:	463b      	mov	r3, r7
   11804:	4621      	mov	r1, r4
   11806:	4628      	mov	r0, r5
   11808:	f018 ffd8 	bl	2a7bc <bt_gatt_attr_read>
}
   1180c:	b004      	add	sp, #16
   1180e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11812:	bf00      	nop
   11814:	20002e10 	.word	0x20002e10
   11818:	20004564 	.word	0x20004564

0001181c <on_disconnected>:
{
   1181c:	b598      	push	{r3, r4, r7, lr}
   1181e:	af00      	add	r7, sp, #0
	LOG_INF("Disconnected (reason %u)\n", reason);
   11820:	466c      	mov	r4, sp
   11822:	b088      	sub	sp, #32
   11824:	466a      	mov	r2, sp
   11826:	4b08      	ldr	r3, [pc, #32]	; (11848 <on_disconnected+0x2c>)
   11828:	4808      	ldr	r0, [pc, #32]	; (1184c <on_disconnected+0x30>)
   1182a:	e9c2 3105 	strd	r3, r1, [r2, #20]
   1182e:	2303      	movs	r3, #3
   11830:	f842 3f10 	str.w	r3, [r2, #16]!
   11834:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   11838:	f015 fd9c 	bl	27374 <z_log_msg_static_create.constprop.0>
	k_work_submit(&advertise_acceptlist_work);
   1183c:	4804      	ldr	r0, [pc, #16]	; (11850 <on_disconnected+0x34>)
   1183e:	46a5      	mov	sp, r4
   11840:	f011 ff06 	bl	23650 <k_work_submit>
}
   11844:	46bd      	mov	sp, r7
   11846:	bd98      	pop	{r3, r4, r7, pc}
   11848:	0002d850 	.word	0x0002d850
   1184c:	0002cad4 	.word	0x0002cad4
   11850:	200005ac 	.word	0x200005ac

00011854 <on_connected.part.0>:
static void on_connected(struct bt_conn *conn, uint8_t err)
   11854:	b580      	push	{r7, lr}
   11856:	af00      	add	r7, sp, #0
		LOG_INF("Connection failed (err %u)\n", err);
   11858:	b088      	sub	sp, #32
   1185a:	466a      	mov	r2, sp
   1185c:	4b06      	ldr	r3, [pc, #24]	; (11878 <on_connected.part.0+0x24>)
   1185e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   11862:	2303      	movs	r3, #3
   11864:	f842 3f10 	str.w	r3, [r2, #16]!
   11868:	4804      	ldr	r0, [pc, #16]	; (1187c <on_connected.part.0+0x28>)
   1186a:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   1186e:	f015 fd81 	bl	27374 <z_log_msg_static_create.constprop.0>
}
   11872:	46bd      	mov	sp, r7
   11874:	bd80      	pop	{r7, pc}
   11876:	bf00      	nop
   11878:	0002d86a 	.word	0x0002d86a
   1187c:	0002cad4 	.word	0x0002cad4

00011880 <on_connected>:
{
   11880:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (err)
   11882:	4608      	mov	r0, r1
   11884:	b121      	cbz	r1, 11890 <on_connected+0x10>
}
   11886:	b007      	add	sp, #28
   11888:	f85d eb04 	ldr.w	lr, [sp], #4
   1188c:	f7ff bfe2 	b.w	11854 <on_connected.part.0>
	LOG_INF("Connected\n");
   11890:	4b06      	ldr	r3, [pc, #24]	; (118ac <on_connected+0x2c>)
   11892:	9305      	str	r3, [sp, #20]
   11894:	4806      	ldr	r0, [pc, #24]	; (118b0 <on_connected+0x30>)
   11896:	2302      	movs	r3, #2
   11898:	aa04      	add	r2, sp, #16
   1189a:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   1189e:	9304      	str	r3, [sp, #16]
   118a0:	f015 fd68 	bl	27374 <z_log_msg_static_create.constprop.0>
}
   118a4:	b007      	add	sp, #28
   118a6:	f85d fb04 	ldr.w	pc, [sp], #4
   118aa:	bf00      	nop
   118ac:	0002d886 	.word	0x0002d886
   118b0:	0002cad4 	.word	0x0002cad4

000118b4 <setup_accept_list_cb.part.0>:
static void setup_accept_list_cb(const struct bt_bond_info *info, void *user_data)
   118b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   118b6:	af00      	add	r7, sp, #0
   118b8:	4606      	mov	r6, r0
   118ba:	460c      	mov	r4, r1
	int err = bt_le_filter_accept_list_add(&info->addr);
   118bc:	f005 ff84 	bl	177c8 <bt_le_filter_accept_list_add>
	LOG_INF("Added following peer to accept list: %x %x\n", info->addr.a.val[0],
   118c0:	7871      	ldrb	r1, [r6, #1]
   118c2:	78b3      	ldrb	r3, [r6, #2]
   118c4:	466e      	mov	r6, sp
   118c6:	b088      	sub	sp, #32
	int err = bt_le_filter_accept_list_add(&info->addr);
   118c8:	4605      	mov	r5, r0
	LOG_INF("Added following peer to accept list: %x %x\n", info->addr.a.val[0],
   118ca:	466a      	mov	r2, sp
   118cc:	4811      	ldr	r0, [pc, #68]	; (11914 <setup_accept_list_cb.part.0+0x60>)
   118ce:	61d3      	str	r3, [r2, #28]
   118d0:	2304      	movs	r3, #4
   118d2:	e9c2 0105 	strd	r0, r1, [r2, #20]
   118d6:	f842 3f10 	str.w	r3, [r2, #16]!
   118da:	480f      	ldr	r0, [pc, #60]	; (11918 <setup_accept_list_cb.part.0+0x64>)
   118dc:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
   118e0:	f015 fd48 	bl	27374 <z_log_msg_static_create.constprop.0>
   118e4:	46b5      	mov	sp, r6
	if (err)
   118e6:	b195      	cbz	r5, 1190e <setup_accept_list_cb.part.0+0x5a>
		LOG_INF("Cannot add peer to filter accept list (err: %d)\n", err);
   118e8:	b088      	sub	sp, #32
   118ea:	466a      	mov	r2, sp
   118ec:	4b0b      	ldr	r3, [pc, #44]	; (1191c <setup_accept_list_cb.part.0+0x68>)
   118ee:	480a      	ldr	r0, [pc, #40]	; (11918 <setup_accept_list_cb.part.0+0x64>)
   118f0:	e9c2 3505 	strd	r3, r5, [r2, #20]
   118f4:	2303      	movs	r3, #3
   118f6:	f842 3f10 	str.w	r3, [r2, #16]!
   118fa:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   118fe:	f015 fd39 	bl	27374 <z_log_msg_static_create.constprop.0>
   11902:	f06f 0304 	mvn.w	r3, #4
   11906:	46b5      	mov	sp, r6
		(*bond_cnt) = -EIO;
   11908:	6023      	str	r3, [r4, #0]
}
   1190a:	46bd      	mov	sp, r7
   1190c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		(*bond_cnt)++;
   1190e:	6823      	ldr	r3, [r4, #0]
   11910:	3301      	adds	r3, #1
   11912:	e7f9      	b.n	11908 <setup_accept_list_cb.part.0+0x54>
   11914:	0002d891 	.word	0x0002d891
   11918:	0002cad4 	.word	0x0002cad4
   1191c:	0002d8bd 	.word	0x0002d8bd

00011920 <advertise_with_acceptlist>:
{
   11920:	b5f0      	push	{r4, r5, r6, r7, lr}
   11922:	b089      	sub	sp, #36	; 0x24
   11924:	af02      	add	r7, sp, #8
	int err = bt_le_filter_accept_list_clear();
   11926:	f005 ff87 	bl	17838 <bt_le_filter_accept_list_clear>
	if (err)
   1192a:	4604      	mov	r4, r0
   1192c:	b310      	cbz	r0, 11974 <advertise_with_acceptlist+0x54>
		LOG_INF("Cannot clear accept list (err: %d)\n", err);
   1192e:	466d      	mov	r5, sp
   11930:	b088      	sub	sp, #32
   11932:	aa02      	add	r2, sp, #8
   11934:	4b38      	ldr	r3, [pc, #224]	; (11a18 <advertise_with_acceptlist+0xf8>)
   11936:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1193a:	2303      	movs	r3, #3
   1193c:	f842 3f10 	str.w	r3, [r2, #16]!
   11940:	4836      	ldr	r0, [pc, #216]	; (11a1c <advertise_with_acceptlist+0xfc>)
   11942:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   11946:	f015 fd15 	bl	27374 <z_log_msg_static_create.constprop.0>
	if (allowed_cnt < 0)
   1194a:	2c00      	cmp	r4, #0
   1194c:	46ad      	mov	sp, r5
   1194e:	da44      	bge.n	119da <advertise_with_acceptlist+0xba>
		LOG_INF("Acceptlist setup failed (err:%d)\n", allowed_cnt);
   11950:	466d      	mov	r5, sp
   11952:	b088      	sub	sp, #32
   11954:	aa02      	add	r2, sp, #8
   11956:	4b32      	ldr	r3, [pc, #200]	; (11a20 <advertise_with_acceptlist+0x100>)
   11958:	4830      	ldr	r0, [pc, #192]	; (11a1c <advertise_with_acceptlist+0xfc>)
   1195a:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1195e:	2303      	movs	r3, #3
   11960:	f842 3f10 	str.w	r3, [r2, #16]!
   11964:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   11968:	f015 fd04 	bl	27374 <z_log_msg_static_create.constprop.0>
   1196c:	46ad      	mov	sp, r5
}
   1196e:	371c      	adds	r7, #28
   11970:	46bd      	mov	sp, r7
   11972:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_foreach_bond(local_id, setup_accept_list_cb, &bond_cnt);
   11974:	492b      	ldr	r1, [pc, #172]	; (11a24 <advertise_with_acceptlist+0x104>)
	int bond_cnt = 0;
   11976:	6038      	str	r0, [r7, #0]
	bt_foreach_bond(local_id, setup_accept_list_cb, &bond_cnt);
   11978:	463a      	mov	r2, r7
   1197a:	f00c fd27 	bl	1e3cc <bt_foreach_bond>
	return bond_cnt;
   1197e:	683c      	ldr	r4, [r7, #0]
	if (allowed_cnt < 0)
   11980:	2c00      	cmp	r4, #0
   11982:	dbe5      	blt.n	11950 <advertise_with_acceptlist+0x30>
		if (allowed_cnt == 0)
   11984:	d129      	bne.n	119da <advertise_with_acceptlist+0xba>
			LOG_INF("Advertising with no Accept list \n");
   11986:	4b28      	ldr	r3, [pc, #160]	; (11a28 <advertise_with_acceptlist+0x108>)
			err = bt_le_adv_start(BT_LE_ADV_CONN_NO_ACCEPT_LIST, ad, ARRAY_SIZE(ad), sd,
   11988:	4d28      	ldr	r5, [pc, #160]	; (11a2c <advertise_with_acceptlist+0x10c>)
			LOG_INF("Advertising with no Accept list \n");
   1198a:	4824      	ldr	r0, [pc, #144]	; (11a1c <advertise_with_acceptlist+0xfc>)
   1198c:	617b      	str	r3, [r7, #20]
   1198e:	2602      	movs	r6, #2
   11990:	613e      	str	r6, [r7, #16]
   11992:	f107 0210 	add.w	r2, r7, #16
   11996:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
			err = bt_le_adv_start(BT_LE_ADV_CONN_NO_ACCEPT_LIST, ad, ARRAY_SIZE(ad), sd,
   1199a:	463c      	mov	r4, r7
			LOG_INF("Advertising with no Accept list \n");
   1199c:	f015 fcea 	bl	27374 <z_log_msg_static_create.constprop.0>
			err = bt_le_adv_start(BT_LE_ADV_CONN_ACCEPT_LIST, ad, ARRAY_SIZE(ad), sd,
   119a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   119a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   119a4:	682b      	ldr	r3, [r5, #0]
   119a6:	6023      	str	r3, [r4, #0]
   119a8:	2301      	movs	r3, #1
   119aa:	9300      	str	r3, [sp, #0]
   119ac:	4920      	ldr	r1, [pc, #128]	; (11a30 <advertise_with_acceptlist+0x110>)
   119ae:	4b21      	ldr	r3, [pc, #132]	; (11a34 <advertise_with_acceptlist+0x114>)
   119b0:	2202      	movs	r2, #2
   119b2:	4638      	mov	r0, r7
   119b4:	f006 fef0 	bl	18798 <bt_le_adv_start>
		if (err)
   119b8:	b308      	cbz	r0, 119fe <advertise_with_acceptlist+0xde>
			LOG_INF("Advertising failed to start (err %d)\n", err);
   119ba:	466c      	mov	r4, sp
   119bc:	b088      	sub	sp, #32
   119be:	aa02      	add	r2, sp, #8
   119c0:	4b1d      	ldr	r3, [pc, #116]	; (11a38 <advertise_with_acceptlist+0x118>)
   119c2:	e9c2 3005 	strd	r3, r0, [r2, #20]
   119c6:	2303      	movs	r3, #3
   119c8:	f842 3f10 	str.w	r3, [r2, #16]!
   119cc:	4813      	ldr	r0, [pc, #76]	; (11a1c <advertise_with_acceptlist+0xfc>)
   119ce:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   119d2:	f015 fccf 	bl	27374 <z_log_msg_static_create.constprop.0>
   119d6:	46a5      	mov	sp, r4
			return;
   119d8:	e7c9      	b.n	1196e <advertise_with_acceptlist+0x4e>
			LOG_INF("Acceptlist setup number  = %d \n", allowed_cnt);
   119da:	466d      	mov	r5, sp
   119dc:	b088      	sub	sp, #32
   119de:	aa02      	add	r2, sp, #8
   119e0:	4b16      	ldr	r3, [pc, #88]	; (11a3c <advertise_with_acceptlist+0x11c>)
   119e2:	480e      	ldr	r0, [pc, #56]	; (11a1c <advertise_with_acceptlist+0xfc>)
   119e4:	e9c2 3405 	strd	r3, r4, [r2, #20]
   119e8:	2303      	movs	r3, #3
   119ea:	f842 3f10 	str.w	r3, [r2, #16]!
   119ee:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   119f2:	f015 fcbf 	bl	27374 <z_log_msg_static_create.constprop.0>
			err = bt_le_adv_start(BT_LE_ADV_CONN_ACCEPT_LIST, ad, ARRAY_SIZE(ad), sd,
   119f6:	463c      	mov	r4, r7
   119f8:	46ad      	mov	sp, r5
   119fa:	4d11      	ldr	r5, [pc, #68]	; (11a40 <advertise_with_acceptlist+0x120>)
   119fc:	e7d0      	b.n	119a0 <advertise_with_acceptlist+0x80>
		LOG_INF("Advertising successfully started\n");
   119fe:	4b11      	ldr	r3, [pc, #68]	; (11a44 <advertise_with_acceptlist+0x124>)
   11a00:	617b      	str	r3, [r7, #20]
   11a02:	2302      	movs	r3, #2
   11a04:	4805      	ldr	r0, [pc, #20]	; (11a1c <advertise_with_acceptlist+0xfc>)
   11a06:	613b      	str	r3, [r7, #16]
   11a08:	f107 0210 	add.w	r2, r7, #16
   11a0c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   11a10:	f015 fcb0 	bl	27374 <z_log_msg_static_create.constprop.0>
   11a14:	e7ab      	b.n	1196e <advertise_with_acceptlist+0x4e>
   11a16:	bf00      	nop
   11a18:	0002d8ee 	.word	0x0002d8ee
   11a1c:	0002cad4 	.word	0x0002cad4
   11a20:	0002d912 	.word	0x0002d912
   11a24:	0002737b 	.word	0x0002737b
   11a28:	0002d934 	.word	0x0002d934
   11a2c:	0002ccb0 	.word	0x0002ccb0
   11a30:	0002ce1c 	.word	0x0002ce1c
   11a34:	0002ce14 	.word	0x0002ce14
   11a38:	0002d976 	.word	0x0002d976
   11a3c:	0002d956 	.word	0x0002d956
   11a40:	0002ccc4 	.word	0x0002ccc4
   11a44:	0002d99c 	.word	0x0002d99c

00011a48 <on_security_changed>:
{
   11a48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11a4c:	b093      	sub	sp, #76	; 0x4c
   11a4e:	af06      	add	r7, sp, #24
   11a50:	4689      	mov	r9, r1
   11a52:	4690      	mov	r8, r2
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   11a54:	f017 ffa7 	bl	299a6 <bt_conn_get_dst>
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   11a58:	7803      	ldrb	r3, [r0, #0]
   11a5a:	4605      	mov	r5, r0
   11a5c:	1d3e      	adds	r6, r7, #4
   11a5e:	2b03      	cmp	r3, #3
   11a60:	d83b      	bhi.n	11ada <on_security_changed+0x92>
   11a62:	e8df f003 	tbb	[pc, r3]
   11a66:	3402      	.short	0x3402
   11a68:	3836      	.short	0x3836
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   11a6a:	4927      	ldr	r1, [pc, #156]	; (11b08 <on_security_changed+0xc0>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   11a6c:	4630      	mov	r0, r6
   11a6e:	f017 f9fa 	bl	28e66 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   11a72:	79ab      	ldrb	r3, [r5, #6]
   11a74:	9605      	str	r6, [sp, #20]
   11a76:	786a      	ldrb	r2, [r5, #1]
   11a78:	9204      	str	r2, [sp, #16]
   11a7a:	78aa      	ldrb	r2, [r5, #2]
   11a7c:	9203      	str	r2, [sp, #12]
   11a7e:	78ea      	ldrb	r2, [r5, #3]
   11a80:	9202      	str	r2, [sp, #8]
   11a82:	792a      	ldrb	r2, [r5, #4]
   11a84:	9201      	str	r2, [sp, #4]
   11a86:	796a      	ldrb	r2, [r5, #5]
   11a88:	9200      	str	r2, [sp, #0]
   11a8a:	f107 0410 	add.w	r4, r7, #16
   11a8e:	4a1f      	ldr	r2, [pc, #124]	; (11b0c <on_security_changed+0xc4>)
   11a90:	211e      	movs	r1, #30
   11a92:	4620      	mov	r0, r4
   11a94:	f015 fd8e 	bl	275b4 <snprintk>
		LOG_INF("Security changed: %s level %u\n", addr, level);
   11a98:	466d      	mov	r5, sp
	if (!err)
   11a9a:	f1b8 0f00 	cmp.w	r8, #0
   11a9e:	d122      	bne.n	11ae6 <on_security_changed+0x9e>
		LOG_INF("Security changed: %s level %u\n", addr, level);
   11aa0:	b08a      	sub	sp, #40	; 0x28
   11aa2:	aa06      	add	r2, sp, #24
   11aa4:	4b1a      	ldr	r3, [pc, #104]	; (11b10 <on_security_changed+0xc8>)
   11aa6:	f8c2 901c 	str.w	r9, [r2, #28]
   11aaa:	e9c2 3405 	strd	r3, r4, [r2, #20]
   11aae:	f44f 7300 	mov.w	r3, #512	; 0x200
   11ab2:	8413      	strh	r3, [r2, #32]
   11ab4:	4b17      	ldr	r3, [pc, #92]	; (11b14 <on_security_changed+0xcc>)
   11ab6:	f842 3f10 	str.w	r3, [r2, #16]!
   11aba:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
		LOG_INF("Security failed: %s level %u err %d\n", addr, level, err);
   11abe:	4816      	ldr	r0, [pc, #88]	; (11b18 <on_security_changed+0xd0>)
   11ac0:	f015 fc58 	bl	27374 <z_log_msg_static_create.constprop.0>
}
   11ac4:	3734      	adds	r7, #52	; 0x34
   11ac6:	46ad      	mov	sp, r5
   11ac8:	46bd      	mov	sp, r7
   11aca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		strcpy(type, "random");
   11ace:	4913      	ldr	r1, [pc, #76]	; (11b1c <on_security_changed+0xd4>)
   11ad0:	e7cc      	b.n	11a6c <on_security_changed+0x24>
		strcpy(type, "public-id");
   11ad2:	4913      	ldr	r1, [pc, #76]	; (11b20 <on_security_changed+0xd8>)
   11ad4:	e7ca      	b.n	11a6c <on_security_changed+0x24>
		strcpy(type, "random-id");
   11ad6:	4913      	ldr	r1, [pc, #76]	; (11b24 <on_security_changed+0xdc>)
   11ad8:	e7c8      	b.n	11a6c <on_security_changed+0x24>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   11ada:	4a13      	ldr	r2, [pc, #76]	; (11b28 <on_security_changed+0xe0>)
   11adc:	210a      	movs	r1, #10
   11ade:	4630      	mov	r0, r6
   11ae0:	f015 fd68 	bl	275b4 <snprintk>
		break;
   11ae4:	e7c5      	b.n	11a72 <on_security_changed+0x2a>
		LOG_INF("Security failed: %s level %u err %d\n", addr, level, err);
   11ae6:	b08a      	sub	sp, #40	; 0x28
   11ae8:	aa06      	add	r2, sp, #24
   11aea:	4b10      	ldr	r3, [pc, #64]	; (11b2c <on_security_changed+0xe4>)
   11aec:	e9c2 3405 	strd	r3, r4, [r2, #20]
   11af0:	f44f 7300 	mov.w	r3, #512	; 0x200
   11af4:	8493      	strh	r3, [r2, #36]	; 0x24
   11af6:	4b0e      	ldr	r3, [pc, #56]	; (11b30 <on_security_changed+0xe8>)
   11af8:	e9c2 9807 	strd	r9, r8, [r2, #28]
   11afc:	f44f 5133 	mov.w	r1, #11456	; 0x2cc0
   11b00:	f842 3f10 	str.w	r3, [r2, #16]!
   11b04:	e7db      	b.n	11abe <on_security_changed+0x76>
   11b06:	bf00      	nop
   11b08:	0002d9be 	.word	0x0002d9be
   11b0c:	0002d9e0 	.word	0x0002d9e0
   11b10:	0002da03 	.word	0x0002da03
   11b14:	01000004 	.word	0x01000004
   11b18:	0002cad4 	.word	0x0002cad4
   11b1c:	0002d9c5 	.word	0x0002d9c5
   11b20:	0002d9cc 	.word	0x0002d9cc
   11b24:	0002d9d6 	.word	0x0002d9d6
   11b28:	0002fd6e 	.word	0x0002fd6e
   11b2c:	0002da22 	.word	0x0002da22
   11b30:	01000005 	.word	0x01000005

00011b34 <dclk_init>:

);

/* A function to register application callbacks for the LED and Button characteristics  */
int dclk_init(struct dclk_cb *callbacks)
{
   11b34:	b598      	push	{r3, r4, r7, lr}
   11b36:	4604      	mov	r4, r0
   11b38:	af00      	add	r7, sp, #0
	// if (err)
	// {
	// 	LOG_INF("Failed to register authorization callbacks.\n");
	// 	return;
	// }
	bt_conn_cb_register(&connection_callbacks);
   11b3a:	4810      	ldr	r0, [pc, #64]	; (11b7c <dclk_init+0x48>)
   11b3c:	f007 fd6c 	bl	19618 <bt_conn_cb_register>

	err = bt_enable(NULL);
   11b40:	2000      	movs	r0, #0
   11b42:	f005 fd9d 	bl	17680 <bt_enable>
	if (err)
   11b46:	b170      	cbz	r0, 11b66 <dclk_init+0x32>
	{
		LOG_ERR("Bluetooth init failed (err %d)\n", err);
   11b48:	b088      	sub	sp, #32
   11b4a:	466a      	mov	r2, sp
   11b4c:	4b0c      	ldr	r3, [pc, #48]	; (11b80 <dclk_init+0x4c>)
   11b4e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   11b52:	2303      	movs	r3, #3
   11b54:	480b      	ldr	r0, [pc, #44]	; (11b84 <dclk_init+0x50>)
   11b56:	f842 3f10 	str.w	r3, [r2, #16]!
   11b5a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11b5e:	f015 fc09 	bl	27374 <z_log_msg_static_create.constprop.0>
		dclk_cb.clock_cb = callbacks->clock_cb;
		dclk_cb.state_cb = callbacks->state_cb;
	}

	return 0;
}
   11b62:	46bd      	mov	sp, r7
   11b64:	bd98      	pop	{r3, r4, r7, pc}
	settings_load();
   11b66:	f016 fdcd 	bl	28704 <settings_load>
	if (callbacks)
   11b6a:	b124      	cbz	r4, 11b76 <dclk_init+0x42>
		dclk_cb.clock_cb = callbacks->clock_cb;
   11b6c:	4b06      	ldr	r3, [pc, #24]	; (11b88 <dclk_init+0x54>)
   11b6e:	6822      	ldr	r2, [r4, #0]
   11b70:	601a      	str	r2, [r3, #0]
		dclk_cb.state_cb = callbacks->state_cb;
   11b72:	6862      	ldr	r2, [r4, #4]
   11b74:	605a      	str	r2, [r3, #4]
	return 0;
   11b76:	2000      	movs	r0, #0
   11b78:	e7f3      	b.n	11b62 <dclk_init+0x2e>
   11b7a:	bf00      	nop
   11b7c:	20000590 	.word	0x20000590
   11b80:	0002da47 	.word	0x0002da47
   11b84:	0002cad4 	.word	0x0002cad4
   11b88:	20002e10 	.word	0x20002e10

00011b8c <start_advertising>:

void start_advertising(void)
{
	k_work_submit(&advertise_acceptlist_work);
   11b8c:	4801      	ldr	r0, [pc, #4]	; (11b94 <start_advertising+0x8>)
   11b8e:	f011 bd5f 	b.w	23650 <k_work_submit>
   11b92:	bf00      	nop
   11b94:	200005ac 	.word	0x200005ac

00011b98 <start_pairing>:
}

int start_pairing(void)
{
   11b98:	b590      	push	{r4, r7, lr}
   11b9a:	b087      	sub	sp, #28
	int err = bt_unpair(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   11b9c:	4911      	ldr	r1, [pc, #68]	; (11be4 <start_pairing+0x4c>)
{
   11b9e:	af00      	add	r7, sp, #0
	int err = bt_unpair(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   11ba0:	2000      	movs	r0, #0
   11ba2:	f005 f945 	bl	16e30 <bt_unpair>
	if (err)
   11ba6:	b188      	cbz	r0, 11bcc <start_pairing+0x34>
	{
		LOG_INF("Cannot delete bond (err: %d)\n", err);
   11ba8:	466c      	mov	r4, sp
   11baa:	b088      	sub	sp, #32
   11bac:	466a      	mov	r2, sp
   11bae:	4b0e      	ldr	r3, [pc, #56]	; (11be8 <start_pairing+0x50>)
   11bb0:	e9c2 3005 	strd	r3, r0, [r2, #20]
   11bb4:	2303      	movs	r3, #3
   11bb6:	f842 3f10 	str.w	r3, [r2, #16]!
   11bba:	480c      	ldr	r0, [pc, #48]	; (11bec <start_pairing+0x54>)
   11bbc:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   11bc0:	f015 fbd8 	bl	27374 <z_log_msg_static_create.constprop.0>
   11bc4:	46a5      	mov	sp, r4
	}
	else
	{
		LOG_INF("Bond deleted succesfully \n");
	}
}
   11bc6:	371c      	adds	r7, #28
   11bc8:	46bd      	mov	sp, r7
   11bca:	bd90      	pop	{r4, r7, pc}
		LOG_INF("Bond deleted succesfully \n");
   11bcc:	4b08      	ldr	r3, [pc, #32]	; (11bf0 <start_pairing+0x58>)
   11bce:	617b      	str	r3, [r7, #20]
   11bd0:	4806      	ldr	r0, [pc, #24]	; (11bec <start_pairing+0x54>)
   11bd2:	2302      	movs	r3, #2
   11bd4:	f107 0210 	add.w	r2, r7, #16
   11bd8:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   11bdc:	613b      	str	r3, [r7, #16]
   11bde:	f015 fbc9 	bl	27374 <z_log_msg_static_create.constprop.0>
   11be2:	e7f0      	b.n	11bc6 <start_pairing+0x2e>
   11be4:	0002e38f 	.word	0x0002e38f
   11be8:	0002da67 	.word	0x0002da67
   11bec:	0002cad4 	.word	0x0002cad4
   11bf0:	0002da85 	.word	0x0002da85

00011bf4 <dclk_send_state_notify>:

int dclk_send_state_notify(uint8_t state)
{
   11bf4:	b500      	push	{lr}
	if (!notify_state_enabled)
   11bf6:	4b0e      	ldr	r3, [pc, #56]	; (11c30 <dclk_send_state_notify+0x3c>)
{
   11bf8:	b089      	sub	sp, #36	; 0x24
	if (!notify_state_enabled)
   11bfa:	781b      	ldrb	r3, [r3, #0]
{
   11bfc:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!notify_state_enabled)
   11c00:	b19b      	cbz	r3, 11c2a <dclk_send_state_notify+0x36>
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
   11c02:	2100      	movs	r1, #0
   11c04:	2218      	movs	r2, #24
   11c06:	a802      	add	r0, sp, #8
   11c08:	f017 f999 	bl	28f3e <memset>

	params.attr = attr;
   11c0c:	4b09      	ldr	r3, [pc, #36]	; (11c34 <dclk_send_state_notify+0x40>)
   11c0e:	9303      	str	r3, [sp, #12]
	params.data = data;
   11c10:	f10d 0307 	add.w	r3, sp, #7
   11c14:	9304      	str	r3, [sp, #16]
	params.len = len;
#if defined(CONFIG_BT_EATT)
	params.chan_opt = BT_ATT_CHAN_OPT_NONE;
#endif /* CONFIG_BT_EATT */

	return bt_gatt_notify_cb(conn, &params);
   11c16:	a902      	add	r1, sp, #8
	params.len = len;
   11c18:	2301      	movs	r3, #1
	return bt_gatt_notify_cb(conn, &params);
   11c1a:	2000      	movs	r0, #0
	params.len = len;
   11c1c:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
   11c20:	f00a fb98 	bl	1c354 <bt_gatt_notify_cb>
	{
		return -EACCES;
	}

	return bt_gatt_notify(NULL, &dclk_svc.attrs[2], &state, sizeof(state));
}
   11c24:	b009      	add	sp, #36	; 0x24
   11c26:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EACCES;
   11c2a:	f06f 000c 	mvn.w	r0, #12
   11c2e:	e7f9      	b.n	11c24 <dclk_send_state_notify+0x30>
   11c30:	20004566 	.word	0x20004566
   11c34:	0002cdb0 	.word	0x0002cdb0

00011c38 <dclk_send_clock_notify>:

int dclk_send_clock_notify(uint32_t clock)
{
   11c38:	b500      	push	{lr}
	if (!notify_clock_enabled)
   11c3a:	4b0d      	ldr	r3, [pc, #52]	; (11c70 <dclk_send_clock_notify+0x38>)
{
   11c3c:	b089      	sub	sp, #36	; 0x24
	if (!notify_clock_enabled)
   11c3e:	781b      	ldrb	r3, [r3, #0]
{
   11c40:	9001      	str	r0, [sp, #4]
	if (!notify_clock_enabled)
   11c42:	b193      	cbz	r3, 11c6a <dclk_send_clock_notify+0x32>
	memset(&params, 0, sizeof(params));
   11c44:	2100      	movs	r1, #0
   11c46:	2218      	movs	r2, #24
   11c48:	a802      	add	r0, sp, #8
   11c4a:	f017 f978 	bl	28f3e <memset>
	params.attr = attr;
   11c4e:	4b09      	ldr	r3, [pc, #36]	; (11c74 <dclk_send_clock_notify+0x3c>)
   11c50:	9303      	str	r3, [sp, #12]
	params.data = data;
   11c52:	ab01      	add	r3, sp, #4
   11c54:	9304      	str	r3, [sp, #16]
	return bt_gatt_notify_cb(conn, &params);
   11c56:	a902      	add	r1, sp, #8
	params.len = len;
   11c58:	2304      	movs	r3, #4
	return bt_gatt_notify_cb(conn, &params);
   11c5a:	2000      	movs	r0, #0
	params.len = len;
   11c5c:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
   11c60:	f00a fb78 	bl	1c354 <bt_gatt_notify_cb>
	{
		return -EACCES;
	}
	return bt_gatt_notify(NULL, &dclk_svc.attrs[5], &clock, sizeof(clock));
}
   11c64:	b009      	add	sp, #36	; 0x24
   11c66:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EACCES;
   11c6a:	f06f 000c 	mvn.w	r0, #12
   11c6e:	e7f9      	b.n	11c64 <dclk_send_clock_notify+0x2c>
   11c70:	20004565 	.word	0x20004565
   11c74:	0002cdec 	.word	0x0002cdec

00011c78 <d_clock_expire>:
/*DCLOCK*/


static void d_clock_expire(struct k_timer *timer_id)
{
	d_state = 2;
   11c78:	4b03      	ldr	r3, [pc, #12]	; (11c88 <d_clock_expire+0x10>)
   11c7a:	2202      	movs	r2, #2
   11c7c:	701a      	strb	r2, [r3, #0]
	d_clock = 0;
   11c7e:	4b03      	ldr	r3, [pc, #12]	; (11c8c <d_clock_expire+0x14>)
   11c80:	2200      	movs	r2, #0
   11c82:	601a      	str	r2, [r3, #0]
}
   11c84:	4770      	bx	lr
   11c86:	bf00      	nop
   11c88:	20004567 	.word	0x20004567
   11c8c:	200005cc 	.word	0x200005cc

00011c90 <pair_work_cb>:

static void pair_work_cb(void)
{
	inter_cb.pair_cb();
   11c90:	4b01      	ldr	r3, [pc, #4]	; (11c98 <pair_work_cb+0x8>)
   11c92:	681b      	ldr	r3, [r3, #0]
   11c94:	4718      	bx	r3
   11c96:	bf00      	nop
   11c98:	20002e1c 	.word	0x20002e1c

00011c9c <gpio_add_callback.constprop.0.isra.0>:
static inline int gpio_add_callback(const struct device *port,
   11c9c:	4601      	mov	r1, r0
	const struct gpio_driver_api *api =
   11c9e:	4803      	ldr	r0, [pc, #12]	; (11cac <gpio_add_callback.constprop.0.isra.0+0x10>)
	if (api->manage_callback == NULL) {
   11ca0:	6883      	ldr	r3, [r0, #8]
   11ca2:	69db      	ldr	r3, [r3, #28]
   11ca4:	b10b      	cbz	r3, 11caa <gpio_add_callback.constprop.0.isra.0+0xe>
	return api->manage_callback(port, callback, true);
   11ca6:	2201      	movs	r2, #1
   11ca8:	4718      	bx	r3
}
   11caa:	4770      	bx	lr
   11cac:	0002c80c 	.word	0x0002c80c

00011cb0 <button_pressed>:
/*UI*/

static void button_pressed(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{

	if (pins == BIT(button0.pin))
   11cb0:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
{
   11cb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (pins == BIT(button0.pin))
   11cb6:	d112      	bne.n	11cde <button_pressed+0x2e>
	{
		d_state = 0;
   11cb8:	4b22      	ldr	r3, [pc, #136]	; (11d44 <button_pressed+0x94>)
   11cba:	2200      	movs	r2, #0
   11cbc:	701a      	strb	r2, [r3, #0]
		d_clock = 10000;
   11cbe:	4b22      	ldr	r3, [pc, #136]	; (11d48 <button_pressed+0x98>)
   11cc0:	f242 7210 	movw	r2, #10000	; 0x2710
   11cc4:	601a      	str	r2, [r3, #0]
	z_impl_k_timer_start(timer, duration, period);
   11cc6:	2200      	movs	r2, #0
   11cc8:	2300      	movs	r3, #0
   11cca:	e9cd 2300 	strd	r2, r3, [sp]
   11cce:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   11cd2:	2300      	movs	r3, #0
   11cd4:	481d      	ldr	r0, [pc, #116]	; (11d4c <button_pressed+0x9c>)
   11cd6:	f012 faa1 	bl	2421c <z_impl_k_timer_start>

	else if (pins == BIT(pairbtn.pin))
	{
		k_work_submit(&initiate_pairing);
	}
}
   11cda:	b003      	add	sp, #12
   11cdc:	bd30      	pop	{r4, r5, pc}
	else if (pins == BIT(button1.pin))
   11cde:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
   11ce2:	d10b      	bne.n	11cfc <button_pressed+0x4c>
		d_state = 2;
   11ce4:	4b17      	ldr	r3, [pc, #92]	; (11d44 <button_pressed+0x94>)
   11ce6:	2202      	movs	r2, #2
   11ce8:	701a      	strb	r2, [r3, #0]
		d_clock = 0;
   11cea:	4b17      	ldr	r3, [pc, #92]	; (11d48 <button_pressed+0x98>)
   11cec:	2200      	movs	r2, #0
   11cee:	601a      	str	r2, [r3, #0]
	z_impl_k_timer_stop(timer);
   11cf0:	4816      	ldr	r0, [pc, #88]	; (11d4c <button_pressed+0x9c>)
}
   11cf2:	b003      	add	sp, #12
   11cf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   11cf8:	f01a bb8d 	b.w	2c416 <z_impl_k_timer_stop>
	else if (pins == BIT(userbtn.pin))
   11cfc:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   11d00:	d116      	bne.n	11d30 <button_pressed+0x80>
		d_state = 0;
   11d02:	4b10      	ldr	r3, [pc, #64]	; (11d44 <button_pressed+0x94>)
   11d04:	2100      	movs	r1, #0
   11d06:	7019      	strb	r1, [r3, #0]
		k_timer_start(&d_timer, K_MSEC(d_clock), K_NO_WAIT);
   11d08:	4b0f      	ldr	r3, [pc, #60]	; (11d48 <button_pressed+0x98>)
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   11d0a:	681d      	ldr	r5, [r3, #0]
   11d0c:	f44f 4400 	mov.w	r4, #32768	; 0x8000
   11d10:	f240 30e7 	movw	r0, #999	; 0x3e7
   11d14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11d18:	2300      	movs	r3, #0
   11d1a:	fbe5 0104 	umlal	r0, r1, r5, r4
   11d1e:	f7ee f9ef 	bl	100 <__aeabi_uldivmod>
   11d22:	4602      	mov	r2, r0
   11d24:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   11d26:	2000      	movs	r0, #0
   11d28:	2100      	movs	r1, #0
   11d2a:	e9cd 0100 	strd	r0, r1, [sp]
   11d2e:	e7d1      	b.n	11cd4 <button_pressed+0x24>
	else if (pins == BIT(pairbtn.pin))
   11d30:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
   11d34:	d1d1      	bne.n	11cda <button_pressed+0x2a>
		k_work_submit(&initiate_pairing);
   11d36:	4806      	ldr	r0, [pc, #24]	; (11d50 <button_pressed+0xa0>)
}
   11d38:	b003      	add	sp, #12
   11d3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		k_work_submit(&initiate_pairing);
   11d3e:	f011 bc87 	b.w	23650 <k_work_submit>
   11d42:	bf00      	nop
   11d44:	20004567 	.word	0x20004567
   11d48:	200005cc 	.word	0x200005cc
   11d4c:	200009d8 	.word	0x200009d8
   11d50:	200005bc 	.word	0x200005bc

00011d54 <get_dclock>:




uint32_t get_dclock (void)
{
   11d54:	b510      	push	{r4, lr}
	if(d_state ==0)
   11d56:	4b08      	ldr	r3, [pc, #32]	; (11d78 <get_dclock+0x24>)
   11d58:	4c08      	ldr	r4, [pc, #32]	; (11d7c <get_dclock+0x28>)
   11d5a:	781b      	ldrb	r3, [r3, #0]
   11d5c:	b953      	cbnz	r3, 11d74 <get_dclock+0x20>
__syscall k_ticks_t k_timer_remaining_ticks(const struct k_timer *timer);

static inline k_ticks_t z_impl_k_timer_remaining_ticks(
				       const struct k_timer *timer)
{
	return z_timeout_remaining(&timer->timeout);
   11d5e:	4808      	ldr	r0, [pc, #32]	; (11d80 <get_dclock+0x2c>)
   11d60:	f01a fb01 	bl	2c366 <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
   11d64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   11d68:	fba0 0203 	umull	r0, r2, r0, r3
   11d6c:	0bc0      	lsrs	r0, r0, #15
   11d6e:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
 * @return The converted time value
 */
static TIME_CONSTEXPR inline uint32_t k_ticks_to_ms_floor32(uint32_t t)
{
	/* Generated.  Do not edit.  See above. */
	return z_tmcvt(t, Z_HZ_ticks, Z_HZ_ms, true, true, false, false);
   11d72:	6020      	str	r0, [r4, #0]
	{
		d_clock = k_timer_remaining_get(&d_timer);
	}
	return d_clock;
}
   11d74:	6820      	ldr	r0, [r4, #0]
   11d76:	bd10      	pop	{r4, pc}
   11d78:	20004567 	.word	0x20004567
   11d7c:	200005cc 	.word	0x200005cc
   11d80:	200009d8 	.word	0x200009d8

00011d84 <get_dstate>:

uint32_t get_dstate (void)
{
	return d_state;
}
   11d84:	4b01      	ldr	r3, [pc, #4]	; (11d8c <get_dstate+0x8>)
   11d86:	7818      	ldrb	r0, [r3, #0]
   11d88:	4770      	bx	lr
   11d8a:	bf00      	nop
   11d8c:	20004567 	.word	0x20004567

00011d90 <interface_init>:

int interface_init(struct interface_cb *app_cb)
{
   11d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11d92:	4605      	mov	r5, r0
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   11d94:	482b      	ldr	r0, [pc, #172]	; (11e44 <interface_init+0xb4>)
   11d96:	f019 ff0f 	bl	2bbb8 <z_device_is_ready>
   11d9a:	4604      	mov	r4, r0
   11d9c:	4829      	ldr	r0, [pc, #164]	; (11e44 <interface_init+0xb4>)
   11d9e:	f019 ff0b 	bl	2bbb8 <z_device_is_ready>
   11da2:	4004      	ands	r4, r0
   11da4:	b2e4      	uxtb	r4, r4
   11da6:	4827      	ldr	r0, [pc, #156]	; (11e44 <interface_init+0xb4>)
   11da8:	f019 ff06 	bl	2bbb8 <z_device_is_ready>
   11dac:	4004      	ands	r4, r0
   11dae:	4825      	ldr	r0, [pc, #148]	; (11e44 <interface_init+0xb4>)
   11db0:	f019 ff02 	bl	2bbb8 <z_device_is_ready>
	int err;
	err = device_is_ready(button0.port);
	err &= device_is_ready(button1.port);
	err &= device_is_ready(userbtn.port);
	err &= device_is_ready(pairbtn.port);
	if (!err)
   11db4:	2c00      	cmp	r4, #0
   11db6:	d042      	beq.n	11e3e <interface_init+0xae>
   11db8:	2800      	cmp	r0, #0
   11dba:	d040      	beq.n	11e3e <interface_init+0xae>
	{
		return !err;
	}

	gpio_pin_configure_dt(&button0, GPIO_INPUT);
   11dbc:	4822      	ldr	r0, [pc, #136]	; (11e48 <interface_init+0xb8>)
	callback->handler = handler;
   11dbe:	4f23      	ldr	r7, [pc, #140]	; (11e4c <interface_init+0xbc>)
   11dc0:	4e23      	ldr	r6, [pc, #140]	; (11e50 <interface_init+0xc0>)
   11dc2:	4c24      	ldr	r4, [pc, #144]	; (11e54 <interface_init+0xc4>)
   11dc4:	f015 faec 	bl	273a0 <gpio_pin_configure_dt.constprop.0.isra.0>
	gpio_pin_configure_dt(&button1, GPIO_INPUT);
   11dc8:	4823      	ldr	r0, [pc, #140]	; (11e58 <interface_init+0xc8>)
   11dca:	f015 fae9 	bl	273a0 <gpio_pin_configure_dt.constprop.0.isra.0>
	gpio_pin_configure_dt(&userbtn, GPIO_INPUT);
   11dce:	4823      	ldr	r0, [pc, #140]	; (11e5c <interface_init+0xcc>)
   11dd0:	f015 fae6 	bl	273a0 <gpio_pin_configure_dt.constprop.0.isra.0>
	gpio_pin_configure_dt(&pairbtn, GPIO_INPUT);
   11dd4:	4822      	ldr	r0, [pc, #136]	; (11e60 <interface_init+0xd0>)
   11dd6:	f015 fae3 	bl	273a0 <gpio_pin_configure_dt.constprop.0.isra.0>

	gpio_pin_interrupt_configure_dt(&button0, GPIO_INT_EDGE_RISING);
   11dda:	481b      	ldr	r0, [pc, #108]	; (11e48 <interface_init+0xb8>)
   11ddc:	f015 fad3 	bl	27386 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	gpio_pin_interrupt_configure_dt(&button1, GPIO_INT_EDGE_RISING);
   11de0:	481d      	ldr	r0, [pc, #116]	; (11e58 <interface_init+0xc8>)
   11de2:	f015 fad0 	bl	27386 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	gpio_pin_interrupt_configure_dt(&userbtn, GPIO_INT_EDGE_RISING);
   11de6:	481d      	ldr	r0, [pc, #116]	; (11e5c <interface_init+0xcc>)
   11de8:	f015 facd 	bl	27386 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	gpio_pin_interrupt_configure_dt(&pairbtn, GPIO_INT_EDGE_RISING);
   11dec:	481c      	ldr	r0, [pc, #112]	; (11e60 <interface_init+0xd0>)
   11dee:	f015 faca 	bl	27386 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
   11df2:	481c      	ldr	r0, [pc, #112]	; (11e64 <interface_init+0xd4>)
   11df4:	4b1c      	ldr	r3, [pc, #112]	; (11e68 <interface_init+0xd8>)
   11df6:	6043      	str	r3, [r0, #4]
	callback->pin_mask = pin_mask;
   11df8:	f44f 6200 	mov.w	r2, #2048	; 0x800
   11dfc:	6082      	str	r2, [r0, #8]
   11dfe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	callback->handler = handler;
   11e02:	607b      	str	r3, [r7, #4]
	callback->pin_mask = pin_mask;
   11e04:	60ba      	str	r2, [r7, #8]
	callback->handler = handler;
   11e06:	6073      	str	r3, [r6, #4]
	callback->pin_mask = pin_mask;
   11e08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
	callback->handler = handler;
   11e0c:	6063      	str	r3, [r4, #4]
	callback->pin_mask = pin_mask;
   11e0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   11e12:	60b2      	str	r2, [r6, #8]
   11e14:	60a3      	str	r3, [r4, #8]
	gpio_init_callback(&button0_cb_data, button_pressed, BIT(button0.pin));
	gpio_init_callback(&button1_cb_data, button_pressed, BIT(button1.pin));
	gpio_init_callback(&userbtn_cb_data, button_pressed, BIT(userbtn.pin));
	gpio_init_callback(&pairbtn_cb_data, button_pressed, BIT(pairbtn.pin));

	gpio_add_callback(button0.port, &button0_cb_data);
   11e16:	f7ff ff41 	bl	11c9c <gpio_add_callback.constprop.0.isra.0>
	gpio_add_callback(button1.port, &button1_cb_data);
   11e1a:	4638      	mov	r0, r7
   11e1c:	f7ff ff3e 	bl	11c9c <gpio_add_callback.constprop.0.isra.0>
	gpio_add_callback(userbtn.port, &userbtn_cb_data);
   11e20:	4630      	mov	r0, r6
   11e22:	f7ff ff3b 	bl	11c9c <gpio_add_callback.constprop.0.isra.0>
	gpio_add_callback(pairbtn.port, &pairbtn_cb_data);
   11e26:	4620      	mov	r0, r4
   11e28:	f7ff ff38 	bl	11c9c <gpio_add_callback.constprop.0.isra.0>

	if(app_cb)
   11e2c:	b90d      	cbnz	r5, 11e32 <interface_init+0xa2>
		inter_cb.pair_cb = app_cb->pair_cb;
		inter_cb.user_cb = app_cb->user_cb;
		
	}
	
	return 0;
   11e2e:	2000      	movs	r0, #0
}
   11e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		inter_cb.pair_cb = app_cb->pair_cb;
   11e32:	4b0e      	ldr	r3, [pc, #56]	; (11e6c <interface_init+0xdc>)
   11e34:	682a      	ldr	r2, [r5, #0]
   11e36:	601a      	str	r2, [r3, #0]
		inter_cb.user_cb = app_cb->user_cb;
   11e38:	686a      	ldr	r2, [r5, #4]
   11e3a:	605a      	str	r2, [r3, #4]
   11e3c:	e7f7      	b.n	11e2e <interface_init+0x9e>
		return !err;
   11e3e:	2001      	movs	r0, #1
   11e40:	e7f6      	b.n	11e30 <interface_init+0xa0>
   11e42:	bf00      	nop
   11e44:	0002c80c 	.word	0x0002c80c
   11e48:	0002ce44 	.word	0x0002ce44
   11e4c:	20002e3c 	.word	0x20002e3c
   11e50:	20002e30 	.word	0x20002e30
   11e54:	20002e24 	.word	0x20002e24
   11e58:	0002ce3c 	.word	0x0002ce3c
   11e5c:	0002ce34 	.word	0x0002ce34
   11e60:	0002ce2c 	.word	0x0002ce2c
   11e64:	20002e48 	.word	0x20002e48
   11e68:	00011cb1 	.word	0x00011cb1
   11e6c:	20002e1c 	.word	0x20002e1c

00011e70 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   11e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e74:	b091      	sub	sp, #68	; 0x44
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
   11e76:	0784      	lsls	r4, r0, #30
{
   11e78:	9300      	str	r3, [sp, #0]
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
   11e7a:	f002 0304 	and.w	r3, r2, #4
   11e7e:	9302      	str	r3, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   11e80:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   11e84:	f103 0301 	add.w	r3, r3, #1
   11e88:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
{
   11e8c:	9203      	str	r2, [sp, #12]
   11e8e:	4605      	mov	r5, r0
   11e90:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   11e92:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
   11e94:	f040 81be 	bne.w	12214 <cbvprintf_package+0x3a4>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
   11e98:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
   11e9a:	b130      	cbz	r0, 11eaa <cbvprintf_package+0x3a>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
   11e9c:	2907      	cmp	r1, #7
   11e9e:	d809      	bhi.n	11eb4 <cbvprintf_package+0x44>
		return -ENOSPC;
   11ea0:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
   11ea4:	b011      	add	sp, #68	; 0x44
   11ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
   11eaa:	f001 0607 	and.w	r6, r1, #7
   11eae:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
   11eb0:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
   11eb4:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
   11eb6:	f04f 0900 	mov.w	r9, #0
	s = fmt--;
   11eba:	1e59      	subs	r1, r3, #1
	align = VA_STACK_ALIGN(char *);
   11ebc:	f04f 0a04 	mov.w	sl, #4
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
   11ec0:	f04f 33ff 	mov.w	r3, #4294967295
   11ec4:	9301      	str	r3, [sp, #4]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
   11ec6:	f8cd 9010 	str.w	r9, [sp, #16]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
   11eca:	464f      	mov	r7, r9
	bool parsing = false;
   11ecc:	46cb      	mov	fp, r9
	size = sizeof(char *);
   11ece:	4653      	mov	r3, sl
			if (buf0 != NULL) {
   11ed0:	b10d      	cbz	r5, 11ed6 <cbvprintf_package+0x66>
				*(const char **)buf = s;
   11ed2:	9a00      	ldr	r2, [sp, #0]
   11ed4:	6022      	str	r2, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   11ed6:	9805      	ldr	r0, [sp, #20]
   11ed8:	2800      	cmp	r0, #0
   11eda:	f300 80eb 	bgt.w	120b4 <cbvprintf_package+0x244>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   11ede:	489a      	ldr	r0, [pc, #616]	; (12148 <cbvprintf_package+0x2d8>)
   11ee0:	9a00      	ldr	r2, [sp, #0]
   11ee2:	4282      	cmp	r2, r0
   11ee4:	d303      	bcc.n	11eee <cbvprintf_package+0x7e>
   11ee6:	4899      	ldr	r0, [pc, #612]	; (1214c <cbvprintf_package+0x2dc>)
   11ee8:	4282      	cmp	r2, r0
   11eea:	f0c0 80e3 	bcc.w	120b4 <cbvprintf_package+0x244>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   11eee:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   11ef0:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   11ef4:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   11ef6:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   11efa:	f100 8106 	bmi.w	1210a <cbvprintf_package+0x29a>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   11efe:	2f0f      	cmp	r7, #15
   11f00:	f200 80b4 	bhi.w	1206c <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
   11f04:	2d00      	cmp	r5, #0
   11f06:	f000 8108 	beq.w	1211a <cbvprintf_package+0x2aa>
					str_ptr_pos[s_idx] = s_ptr_idx;
   11f0a:	f107 0240 	add.w	r2, r7, #64	; 0x40
   11f0e:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
   11f12:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
   11f14:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   11f18:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
   11f1c:	9804      	ldr	r0, [sp, #16]
   11f1e:	3001      	adds	r0, #1
   11f20:	9004      	str	r0, [sp, #16]
   11f22:	e0ea      	b.n	120fa <cbvprintf_package+0x28a>
			switch (*fmt) {
   11f24:	287a      	cmp	r0, #122	; 0x7a
   11f26:	d860      	bhi.n	11fea <cbvprintf_package+0x17a>
   11f28:	284b      	cmp	r0, #75	; 0x4b
   11f2a:	d80e      	bhi.n	11f4a <cbvprintf_package+0xda>
   11f2c:	2847      	cmp	r0, #71	; 0x47
   11f2e:	d85c      	bhi.n	11fea <cbvprintf_package+0x17a>
   11f30:	2829      	cmp	r0, #41	; 0x29
   11f32:	d82f      	bhi.n	11f94 <cbvprintf_package+0x124>
   11f34:	2825      	cmp	r0, #37	; 0x25
   11f36:	d055      	beq.n	11fe4 <cbvprintf_package+0x174>
   11f38:	d857      	bhi.n	11fea <cbvprintf_package+0x17a>
   11f3a:	2820      	cmp	r0, #32
   11f3c:	d07d      	beq.n	1203a <cbvprintf_package+0x1ca>
   11f3e:	3823      	subs	r0, #35	; 0x23
   11f40:	f1d0 0b00 	rsbs	fp, r0, #0
   11f44:	eb4b 0b00 	adc.w	fp, fp, r0
   11f48:	e077      	b.n	1203a <cbvprintf_package+0x1ca>
   11f4a:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
   11f4e:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
   11f52:	d84a      	bhi.n	11fea <cbvprintf_package+0x17a>
   11f54:	e8df f00c 	tbb	[pc, ip]
   11f58:	49494971 	.word	0x49494971
   11f5c:	49494949 	.word	0x49494949
   11f60:	49494949 	.word	0x49494949
   11f64:	4949494c 	.word	0x4949494c
   11f68:	49494949 	.word	0x49494949
   11f6c:	4c495a49 	.word	0x4c495a49
   11f70:	5a5a5a4c 	.word	0x5a5a5a4c
   11f74:	496e4c71 	.word	0x496e4c71
   11f78:	4c184971 	.word	0x4c184971
   11f7c:	83494918 	.word	0x83494918
   11f80:	49494c80 	.word	0x49494c80
   11f84:	494c      	.short	0x494c
   11f86:	80          	.byte	0x80
   11f87:	00          	.byte	0x00
   11f88:	2000      	movs	r0, #0
   11f8a:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
   11f8e:	f04f 0a04 	mov.w	sl, #4
   11f92:	e039      	b.n	12008 <cbvprintf_package+0x198>
			switch (*fmt) {
   11f94:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
   11f98:	fa5f fc8c 	uxtb.w	ip, ip
   11f9c:	2201      	movs	r2, #1
   11f9e:	fa02 fc0c 	lsl.w	ip, r2, ip
   11fa2:	ea1c 0f0e 	tst.w	ip, lr
   11fa6:	d148      	bne.n	1203a <cbvprintf_package+0x1ca>
   11fa8:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
   11fac:	d12e      	bne.n	1200c <cbvprintf_package+0x19c>
   11fae:	ea1c 0b02 	ands.w	fp, ip, r2
   11fb2:	d042      	beq.n	1203a <cbvprintf_package+0x1ca>
		buf = (void *) ROUND_UP(buf, align);
   11fb4:	3c01      	subs	r4, #1
   11fb6:	4454      	add	r4, sl
   11fb8:	f1ca 0c00 	rsb	ip, sl, #0
   11fbc:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
   11fc0:	2d00      	cmp	r5, #0
   11fc2:	d061      	beq.n	12088 <cbvprintf_package+0x218>
   11fc4:	eba3 0c05 	sub.w	ip, r3, r5
   11fc8:	44a4      	add	ip, r4
   11fca:	45b4      	cmp	ip, r6
   11fcc:	f63f af68 	bhi.w	11ea0 <cbvprintf_package+0x30>
		if (is_str_arg) {
   11fd0:	2800      	cmp	r0, #0
   11fd2:	d168      	bne.n	120a6 <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
   11fd4:	2b04      	cmp	r3, #4
   11fd6:	d147      	bne.n	12068 <cbvprintf_package+0x1f8>
			int v = va_arg(ap, int);
   11fd8:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
   11fdc:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
   11fde:	3404      	adds	r4, #4
   11fe0:	2304      	movs	r3, #4
   11fe2:	e02a      	b.n	1203a <cbvprintf_package+0x1ca>
				arg_idx--;
   11fe4:	9a01      	ldr	r2, [sp, #4]
   11fe6:	3a01      	subs	r2, #1
   11fe8:	9201      	str	r2, [sp, #4]
				parsing = false;
   11fea:	f04f 0b00 	mov.w	fp, #0
				continue;
   11fee:	e024      	b.n	1203a <cbvprintf_package+0x1ca>
				if (fmt[-1] == 'l') {
   11ff0:	f811 0c01 	ldrb.w	r0, [r1, #-1]
   11ff4:	286c      	cmp	r0, #108	; 0x6c
   11ff6:	d134      	bne.n	12062 <cbvprintf_package+0x1f2>
					if (fmt[-2] == 'l') {
   11ff8:	f811 3c02 	ldrb.w	r3, [r1, #-2]
   11ffc:	2000      	movs	r0, #0
   11ffe:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
   12000:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
   12002:	d1c4      	bne.n	11f8e <cbvprintf_package+0x11e>
						align = VA_STACK_ALIGN(long long);
   12004:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
   12008:	4653      	mov	r3, sl
   1200a:	e7d3      	b.n	11fb4 <cbvprintf_package+0x144>
					v.ld = va_arg(ap, long double);
   1200c:	f108 0807 	add.w	r8, r8, #7
   12010:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
   12014:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
   12016:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				buf = (void *) ROUND_UP(buf, align);
   1201a:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
   1201e:	b135      	cbz	r5, 1202e <cbvprintf_package+0x1be>
					if (BUF_OFFSET + size > len) {
   12020:	9806      	ldr	r0, [sp, #24]
   12022:	4420      	add	r0, r4
   12024:	42b0      	cmp	r0, r6
   12026:	f63f af3b 	bhi.w	11ea0 <cbvprintf_package+0x30>
						*(long double *)buf = v.ld;
   1202a:	e9c4 ab00 	strd	sl, fp, [r4]
				buf += size;
   1202e:	3408      	adds	r4, #8
				parsing = false;
   12030:	f04f 0b00 	mov.w	fp, #0
			switch (*fmt) {
   12034:	f04f 0a08 	mov.w	sl, #8
   12038:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
   1203a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1203e:	2800      	cmp	r0, #0
   12040:	d078      	beq.n	12134 <cbvprintf_package+0x2c4>
			if (!parsing) {
   12042:	f1bb 0f00 	cmp.w	fp, #0
   12046:	f47f af6d 	bne.w	11f24 <cbvprintf_package+0xb4>
				if (*fmt == '%') {
   1204a:	2825      	cmp	r0, #37	; 0x25
   1204c:	d1f5      	bne.n	1203a <cbvprintf_package+0x1ca>
					arg_idx++;
   1204e:	9b01      	ldr	r3, [sp, #4]
   12050:	3301      	adds	r3, #1
   12052:	9301      	str	r3, [sp, #4]
					parsing = true;
   12054:	f04f 0b01 	mov.w	fp, #1
				align = VA_STACK_ALIGN(size_t);
   12058:	f04f 0a04 	mov.w	sl, #4
   1205c:	e7ec      	b.n	12038 <cbvprintf_package+0x1c8>
			switch (*fmt) {
   1205e:	4658      	mov	r0, fp
   12060:	e793      	b.n	11f8a <cbvprintf_package+0x11a>
   12062:	2000      	movs	r0, #0
				parsing = false;
   12064:	4683      	mov	fp, r0
   12066:	e7a5      	b.n	11fb4 <cbvprintf_package+0x144>
		} else if (size == sizeof(long long)) {
   12068:	2b08      	cmp	r3, #8
   1206a:	d002      	beq.n	12072 <cbvprintf_package+0x202>
					return -EINVAL;
   1206c:	f06f 0015 	mvn.w	r0, #21
   12070:	e718      	b.n	11ea4 <cbvprintf_package+0x34>
			long long v = va_arg(ap, long long);
   12072:	f108 0807 	add.w	r8, r8, #7
   12076:	f028 0807 	bic.w	r8, r8, #7
   1207a:	e8f8 2302 	ldrd	r2, r3, [r8], #8
					*(long long *)buf = v;
   1207e:	e9c4 2300 	strd	r2, r3, [r4]
			buf += sizeof(long long);
   12082:	3408      	adds	r4, #8
   12084:	2308      	movs	r3, #8
   12086:	e7d8      	b.n	1203a <cbvprintf_package+0x1ca>
		if (is_str_arg) {
   12088:	b968      	cbnz	r0, 120a6 <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
   1208a:	2b04      	cmp	r3, #4
   1208c:	d102      	bne.n	12094 <cbvprintf_package+0x224>
			int v = va_arg(ap, int);
   1208e:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
   12092:	e7a4      	b.n	11fde <cbvprintf_package+0x16e>
		} else if (size == sizeof(long long)) {
   12094:	2b08      	cmp	r3, #8
   12096:	d1e9      	bne.n	1206c <cbvprintf_package+0x1fc>
			long long v = va_arg(ap, long long);
   12098:	f108 0807 	add.w	r8, r8, #7
   1209c:	f028 0807 	bic.w	r8, r8, #7
   120a0:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
   120a4:	e7ed      	b.n	12082 <cbvprintf_package+0x212>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   120a6:	9a05      	ldr	r2, [sp, #20]
   120a8:	3a01      	subs	r2, #1
   120aa:	9205      	str	r2, [sp, #20]
			s = va_arg(ap, char *);
   120ac:	f858 2b04 	ldr.w	r2, [r8], #4
   120b0:	9200      	str	r2, [sp, #0]
   120b2:	e70d      	b.n	11ed0 <cbvprintf_package+0x60>
			if (is_ro && !do_ro) {
   120b4:	9a03      	ldr	r2, [sp, #12]
   120b6:	0790      	lsls	r0, r2, #30
   120b8:	d520      	bpl.n	120fc <cbvprintf_package+0x28c>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   120ba:	eba4 0e05 	sub.w	lr, r4, r5
   120be:	ea4f 009e 	mov.w	r0, lr, lsr #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   120c2:	f04f 0c01 	mov.w	ip, #1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   120c6:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   120ca:	d2cf      	bcs.n	1206c <cbvprintf_package+0x1fc>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   120cc:	2f0f      	cmp	r7, #15
   120ce:	d8cd      	bhi.n	1206c <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
   120d0:	b1f5      	cbz	r5, 12110 <cbvprintf_package+0x2a0>
					str_ptr_pos[s_idx] = s_ptr_idx;
   120d2:	f107 0240 	add.w	r2, r7, #64	; 0x40
   120d6:	eb0d 0e02 	add.w	lr, sp, r2
   120da:	b2c0      	uxtb	r0, r0
					str_ptr_arg[s_idx] = arg_idx;
   120dc:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
   120de:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   120e2:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
   120e6:	f1bc 0f00 	cmp.w	ip, #0
   120ea:	f43f af17 	beq.w	11f1c <cbvprintf_package+0xac>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
   120ee:	f060 007f 	orn	r0, r0, #127	; 0x7f
   120f2:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
   120f6:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
   120fa:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
   120fc:	f1c5 0208 	rsb	r2, r5, #8
			buf += sizeof(char *);
   12100:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
   12102:	9206      	str	r2, [sp, #24]
			switch (*fmt) {
   12104:	f64f 7eda 	movw	lr, #65498	; 0xffda
   12108:	e797      	b.n	1203a <cbvprintf_package+0x1ca>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   1210a:	f04f 0c00 	mov.w	ip, #0
   1210e:	e7da      	b.n	120c6 <cbvprintf_package+0x256>
				} else if (is_ro) {
   12110:	f1bc 0f00 	cmp.w	ip, #0
   12114:	d001      	beq.n	1211a <cbvprintf_package+0x2aa>
					len += 1;
   12116:	3601      	adds	r6, #1
   12118:	e7ef      	b.n	120fa <cbvprintf_package+0x28a>
				} else if (rws_pos_en) {
   1211a:	9802      	ldr	r0, [sp, #8]
					len += 2;
   1211c:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
   1211e:	2800      	cmp	r0, #0
   12120:	d1eb      	bne.n	120fa <cbvprintf_package+0x28a>
					len += strlen(s) + 1 + 1;
   12122:	9800      	ldr	r0, [sp, #0]
   12124:	e9cd 3106 	strd	r3, r1, [sp, #24]
   12128:	f016 fea7 	bl	28e7a <strlen>
   1212c:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
   12130:	4406      	add	r6, r0
   12132:	e7e2      	b.n	120fa <cbvprintf_package+0x28a>
	if (BUF_OFFSET / sizeof(int) > 255) {
   12134:	1b63      	subs	r3, r4, r5
   12136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1213a:	d297      	bcs.n	1206c <cbvprintf_package+0x1fc>
	if (buf0 == NULL) {
   1213c:	b945      	cbnz	r5, 12150 <cbvprintf_package+0x2e0>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
   1213e:	f1a6 0408 	sub.w	r4, r6, #8
   12142:	18e0      	adds	r0, r4, r3
   12144:	e6ae      	b.n	11ea4 <cbvprintf_package+0x34>
   12146:	bf00      	nop
   12148:	0002c714 	.word	0x0002c714
   1214c:	00030668 	.word	0x00030668
	if (rws_pos_en) {
   12150:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
   12152:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
   12154:	089b      	lsrs	r3, r3, #2
   12156:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   12158:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
   1215c:	b1c2      	cbz	r2, 12190 <cbvprintf_package+0x320>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   1215e:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
   12160:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
   12164:	f1b9 0f00 	cmp.w	r9, #0
   12168:	d005      	beq.n	12176 <cbvprintf_package+0x306>
   1216a:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
   1216c:	2200      	movs	r2, #0
			if (BUF_OFFSET + 1 > len) {
   1216e:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
   12172:	4297      	cmp	r7, r2
   12174:	d10e      	bne.n	12194 <cbvprintf_package+0x324>
		if (BUF_OFFSET + 1 + size > len) {
   12176:	f1c5 0301 	rsb	r3, r5, #1
   1217a:	f10d 0820 	add.w	r8, sp, #32
			*buf++ = str_ptr_arg[i];
   1217e:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
   12182:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
   12184:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
   12188:	4557      	cmp	r7, sl
   1218a:	d112      	bne.n	121b2 <cbvprintf_package+0x342>
	return BUF_OFFSET;
   1218c:	1b60      	subs	r0, r4, r5
   1218e:	e689      	b.n	11ea4 <cbvprintf_package+0x34>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
   12190:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
   12192:	e7e5      	b.n	12160 <cbvprintf_package+0x2f0>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
   12194:	f810 3b01 	ldrb.w	r3, [r0], #1
   12198:	0619      	lsls	r1, r3, #24
   1219a:	d508      	bpl.n	121ae <cbvprintf_package+0x33e>
			if (BUF_OFFSET + 1 > len) {
   1219c:	eb04 0e0c 	add.w	lr, r4, ip
   121a0:	45b6      	cmp	lr, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
   121a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
   121a6:	f63f ae7b 	bhi.w	11ea0 <cbvprintf_package+0x30>
			*buf++ = pos;
   121aa:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
   121ae:	3201      	adds	r2, #1
   121b0:	e7df      	b.n	12172 <cbvprintf_package+0x302>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
   121b2:	f1b9 0f00 	cmp.w	r9, #0
   121b6:	d003      	beq.n	121c0 <cbvprintf_package+0x350>
   121b8:	f998 2000 	ldrsb.w	r2, [r8]
   121bc:	2a00      	cmp	r2, #0
   121be:	db17      	blt.n	121f0 <cbvprintf_package+0x380>
		if (rws_pos_en) {
   121c0:	9b02      	ldr	r3, [sp, #8]
   121c2:	b1d3      	cbz	r3, 121fa <cbvprintf_package+0x38a>
			*buf++ = str_ptr_arg[i];
   121c4:	f81a 200b 	ldrb.w	r2, [sl, fp]
   121c8:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
   121cc:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
   121ce:	9b01      	ldr	r3, [sp, #4]
   121d0:	1898      	adds	r0, r3, r2
   121d2:	4420      	add	r0, r4
   121d4:	42b0      	cmp	r0, r6
   121d6:	f63f ae63 	bhi.w	11ea0 <cbvprintf_package+0x30>
		*buf++ = str_ptr_pos[i];
   121da:	f898 0000 	ldrb.w	r0, [r8]
   121de:	f804 0b01 	strb.w	r0, [r4], #1
		memcpy(buf, s, size);
   121e2:	9900      	ldr	r1, [sp, #0]
   121e4:	9203      	str	r2, [sp, #12]
   121e6:	4620      	mov	r0, r4
   121e8:	f016 fe9e 	bl	28f28 <memcpy>
		buf += size;
   121ec:	9a03      	ldr	r2, [sp, #12]
   121ee:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
   121f0:	f10a 0a01 	add.w	sl, sl, #1
   121f4:	f108 0801 	add.w	r8, r8, #1
   121f8:	e7c6      	b.n	12188 <cbvprintf_package+0x318>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
   121fa:	f898 2000 	ldrb.w	r2, [r8]
   121fe:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   12202:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
   12204:	9b02      	ldr	r3, [sp, #8]
   12206:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
   1220a:	9800      	ldr	r0, [sp, #0]
   1220c:	f016 fe35 	bl	28e7a <strlen>
   12210:	1c42      	adds	r2, r0, #1
   12212:	e7dc      	b.n	121ce <cbvprintf_package+0x35e>
		return -EFAULT;
   12214:	f06f 000d 	mvn.w	r0, #13
   12218:	e644      	b.n	11ea4 <cbvprintf_package+0x34>
   1221a:	bf00      	nop

0001221c <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
   1221c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12220:	b095      	sub	sp, #84	; 0x54
   12222:	af00      	add	r7, sp, #0
   12224:	4604      	mov	r4, r0
   12226:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
   1222a:	61bb      	str	r3, [r7, #24]
   1222c:	f3cb 03c0 	ubfx	r3, fp, #3, #1
   12230:	627a      	str	r2, [r7, #36]	; 0x24
   12232:	613b      	str	r3, [r7, #16]
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   12234:	6239      	str	r1, [r7, #32]
   12236:	b951      	cbnz	r1, 1224e <cbprintf_package_convert+0x32>
	buf += ros_nbr;
   12238:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
   1223a:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
   1223c:	7880      	ldrb	r0, [r0, #2]
   1223e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   12242:	4420      	add	r0, r4
	for (unsigned int i = 0; i < s_nbr; i++) {
   12244:	6a3b      	ldr	r3, [r7, #32]
   12246:	429e      	cmp	r6, r3
   12248:	d81a      	bhi.n	12280 <cbprintf_package_convert+0x64>
	return (size_t)(uintptr_t)(buf - start);
   1224a:	1b03      	subs	r3, r0, r4
   1224c:	623b      	str	r3, [r7, #32]

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
   1224e:	f894 a002 	ldrb.w	sl, [r4, #2]
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
   12252:	78e3      	ldrb	r3, [r4, #3]
   12254:	617b      	str	r3, [r7, #20]
	ros_nbr = in_desc->ro_str_cnt;
   12256:	4656      	mov	r6, sl
	ro_cpy = ros_nbr &&
   12258:	f1ba 0f00 	cmp.w	sl, #0
   1225c:	d002      	beq.n	12264 <cbprintf_package_convert+0x48>
   1225e:	f01b 0f01 	tst.w	fp, #1
   12262:	d117      	bne.n	12294 <cbprintf_package_convert+0x78>
	rw_cpy = rws_nbr > 0 &&
   12264:	697b      	ldr	r3, [r7, #20]
   12266:	bb5b      	cbnz	r3, 122c0 <cbprintf_package_convert+0xa4>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
   12268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1226a:	b11b      	cbz	r3, 12274 <cbprintf_package_convert+0x58>
			cb(in_packaged, in_len, ctx);
   1226c:	69ba      	ldr	r2, [r7, #24]
   1226e:	6a39      	ldr	r1, [r7, #32]
   12270:	4620      	mov	r0, r4
   12272:	4798      	blx	r3
		}

		return in_len;
   12274:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
   12276:	4628      	mov	r0, r5
   12278:	3754      	adds	r7, #84	; 0x54
   1227a:	46bd      	mov	sp, r7
   1227c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
   12280:	1c45      	adds	r5, r0, #1
		buf += strlen((const char *)buf) + 1;
   12282:	4628      	mov	r0, r5
   12284:	f016 fdf9 	bl	28e7a <strlen>
	for (unsigned int i = 0; i < s_nbr; i++) {
   12288:	6a3b      	ldr	r3, [r7, #32]
		buf += strlen((const char *)buf) + 1;
   1228a:	3001      	adds	r0, #1
	for (unsigned int i = 0; i < s_nbr; i++) {
   1228c:	3301      	adds	r3, #1
		buf += strlen((const char *)buf) + 1;
   1228e:	4428      	add	r0, r5
	for (unsigned int i = 0; i < s_nbr; i++) {
   12290:	623b      	str	r3, [r7, #32]
   12292:	e7d7      	b.n	12244 <cbprintf_package_convert+0x28>
	rw_cpy = rws_nbr > 0 &&
   12294:	f894 8000 	ldrb.w	r8, [r4]
   12298:	6863      	ldr	r3, [r4, #4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
   1229a:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
   1229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
   1229e:	ea4f 0288 	mov.w	r2, r8, lsl #2
   122a2:	60fa      	str	r2, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
   122a4:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
   122a8:	2b00      	cmp	r3, #0
   122aa:	f040 8101 	bne.w	124b0 <cbprintf_package_convert+0x294>
		out_len = (int)in_len;
   122ae:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
   122b0:	46c1      	mov	r9, r8
   122b2:	eb0a 0308 	add.w	r3, sl, r8
	size_t strl_cnt = 0;
   122b6:	2600      	movs	r6, #0
			for (unsigned int i = 0; i < ros_nbr; i++) {
   122b8:	454b      	cmp	r3, r9
   122ba:	d14e      	bne.n	1235a <cbprintf_package_convert+0x13e>
   122bc:	44d0      	add	r8, sl
   122be:	e013      	b.n	122e8 <cbprintf_package_convert+0xcc>
	rw_cpy = rws_nbr > 0 &&
   122c0:	f01b 0f02 	tst.w	fp, #2
   122c4:	d0d0      	beq.n	12268 <cbprintf_package_convert+0x4c>
	args_size = in_desc->len * sizeof(int);
   122c6:	f894 8000 	ldrb.w	r8, [r4]
   122ca:	ea4f 0388 	mov.w	r3, r8, lsl #2
   122ce:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
   122d0:	6863      	ldr	r3, [r4, #4]
   122d2:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
   122d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	uint8_t *str_pos = &buf[args_size];
   122d6:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
   122da:	2b00      	cmp	r3, #0
   122dc:	d178      	bne.n	123d0 <cbprintf_package_convert+0x1b4>
		out_len = (int)in_len;
   122de:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   122e0:	f1ba 0f00 	cmp.w	sl, #0
   122e4:	d14e      	bne.n	12384 <cbprintf_package_convert+0x168>
	size_t strl_cnt = 0;
   122e6:	4656      	mov	r6, sl
		for (unsigned int i = 0; i < rws_nbr; i++) {
   122e8:	f01b 0f05 	tst.w	fp, #5
   122ec:	bf0c      	ite	eq
   122ee:	2302      	moveq	r3, #2
   122f0:	2301      	movne	r3, #1
   122f2:	627b      	str	r3, [r7, #36]	; 0x24
   122f4:	697b      	ldr	r3, [r7, #20]
   122f6:	eb08 0a43 	add.w	sl, r8, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   122fa:	f00b 0302 	and.w	r3, fp, #2
   122fe:	623b      	str	r3, [r7, #32]
		for (unsigned int i = 0; i < rws_nbr; i++) {
   12300:	45d0      	cmp	r8, sl
   12302:	d0b8      	beq.n	12276 <cbprintf_package_convert+0x5a>
			uint8_t arg_idx = *str_pos++;
   12304:	f818 1b02 	ldrb.w	r1, [r8], #2
			const char *str = *(const char **)&buf32[arg_pos];
   12308:	f818 3c01 	ldrb.w	r3, [r8, #-1]
   1230c:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
   12310:	4bac      	ldr	r3, [pc, #688]	; (125c4 <cbprintf_package_convert+0x3a8>)
   12312:	4599      	cmp	r9, r3
   12314:	d302      	bcc.n	1231c <cbprintf_package_convert+0x100>
   12316:	4bac      	ldr	r3, [pc, #688]	; (125c8 <cbprintf_package_convert+0x3ac>)
   12318:	4599      	cmp	r9, r3
   1231a:	d339      	bcc.n	12390 <cbprintf_package_convert+0x174>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   1231c:	693b      	ldr	r3, [r7, #16]
   1231e:	2b00      	cmp	r3, #0
   12320:	d043      	beq.n	123aa <cbprintf_package_convert+0x18e>
   12322:	69f8      	ldr	r0, [r7, #28]
   12324:	f015 f884 	bl	27430 <is_ptr>
   12328:	2800      	cmp	r0, #0
   1232a:	d03e      	beq.n	123aa <cbprintf_package_convert+0x18e>
				LOG_WRN("(unsigned) char * used for %%p argument. "
   1232c:	46e9      	mov	r9, sp
   1232e:	b08a      	sub	sp, #40	; 0x28
   12330:	466a      	mov	r2, sp
   12332:	4ba6      	ldr	r3, [pc, #664]	; (125cc <cbprintf_package_convert+0x3b0>)
   12334:	6153      	str	r3, [r2, #20]
   12336:	69fb      	ldr	r3, [r7, #28]
   12338:	e9c2 3106 	strd	r3, r1, [r2, #24]
   1233c:	f44f 7300 	mov.w	r3, #512	; 0x200
   12340:	8413      	strh	r3, [r2, #32]
   12342:	4ba3      	ldr	r3, [pc, #652]	; (125d0 <cbprintf_package_convert+0x3b4>)
   12344:	f842 3f10 	str.w	r3, [r2, #16]!
   12348:	48a2      	ldr	r0, [pc, #648]	; (125d4 <cbprintf_package_convert+0x3b8>)
   1234a:	2300      	movs	r3, #0
   1234c:	f44f 5112 	mov.w	r1, #9344	; 0x2480
   12350:	f001 fc38 	bl	13bc4 <z_impl_z_log_msg_static_create>
				out_len -= 2;
   12354:	3d02      	subs	r5, #2
   12356:	46cd      	mov	sp, r9
				continue;
   12358:	e7d2      	b.n	12300 <cbprintf_package_convert+0xe4>
				const char *str = *(const char **)&buf32[*str_pos];
   1235a:	f819 2b01 	ldrb.w	r2, [r9], #1
   1235e:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
   12360:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
   12364:	f016 fd89 	bl	28e7a <strlen>
				if (strl && strl_cnt < strl_len) {
   12368:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   1236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
   1236c:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
   1236e:	b13a      	cbz	r2, 12380 <cbprintf_package_convert+0x164>
   12370:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   12374:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
   12376:	bf3e      	ittt	cc
   12378:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
   1237a:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
   1237e:	3601      	addcc	r6, #1
				out_len += len;
   12380:	4405      	add	r5, r0
			for (unsigned int i = 0; i < ros_nbr; i++) {
   12382:	e799      	b.n	122b8 <cbprintf_package_convert+0x9c>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   12384:	f01b 0604 	ands.w	r6, fp, #4
	size_t strl_cnt = 0;
   12388:	bf1c      	itt	ne
   1238a:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
   1238c:	44d0      	addne	r8, sl
   1238e:	e7ab      	b.n	122e8 <cbprintf_package_convert+0xcc>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   12390:	693b      	ldr	r3, [r7, #16]
   12392:	b123      	cbz	r3, 1239e <cbprintf_package_convert+0x182>
   12394:	69f8      	ldr	r0, [r7, #28]
   12396:	f015 f84b 	bl	27430 <is_ptr>
   1239a:	2800      	cmp	r0, #0
   1239c:	d1c6      	bne.n	1232c <cbprintf_package_convert+0x110>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   1239e:	f01b 0f01 	tst.w	fp, #1
   123a2:	d105      	bne.n	123b0 <cbprintf_package_convert+0x194>
					out_len -= drop_ro_str_pos ? 2 : 1;
   123a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   123a6:	1aed      	subs	r5, r5, r3
   123a8:	e7aa      	b.n	12300 <cbprintf_package_convert+0xe4>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   123aa:	6a3b      	ldr	r3, [r7, #32]
   123ac:	2b00      	cmp	r3, #0
   123ae:	d0a7      	beq.n	12300 <cbprintf_package_convert+0xe4>
		return 1 + strlen(str);
   123b0:	4648      	mov	r0, r9
   123b2:	f016 fd62 	bl	28e7a <strlen>
				if (strl && strl_cnt < strl_len) {
   123b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   123b8:	b143      	cbz	r3, 123cc <cbprintf_package_convert+0x1b0>
   123ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   123be:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
   123c0:	bf3f      	itttt	cc
   123c2:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
   123c4:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
   123c6:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
   123ca:	3601      	addcc	r6, #1
				out_len += (len - 1);
   123cc:	4405      	add	r5, r0
		for (unsigned int i = 0; i < rws_nbr; i++) {
   123ce:	e797      	b.n	12300 <cbprintf_package_convert+0xe4>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   123d0:	f1ba 0f00 	cmp.w	sl, #0
   123d4:	d071      	beq.n	124ba <cbprintf_package_convert+0x29e>
   123d6:	f01b 0604 	ands.w	r6, fp, #4
   123da:	d071      	beq.n	124c0 <cbprintf_package_convert+0x2a4>
		keep_cnt = ros_nbr;
   123dc:	46d1      	mov	r9, sl
		scpy_cnt = 0;
   123de:	2600      	movs	r6, #0
		dst = keep_str_pos;
   123e0:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
   123e4:	4652      	mov	r2, sl
   123e6:	4641      	mov	r1, r8
   123e8:	f016 fd9e 	bl	28f28 <memcpy>
	str_pos += ros_nbr;
   123ec:	697b      	ldr	r3, [r7, #20]
   123ee:	005b      	lsls	r3, r3, #1
   123f0:	60bb      	str	r3, [r7, #8]
   123f2:	697b      	ldr	r3, [r7, #20]
   123f4:	44d0      	add	r8, sl
	for (unsigned int i = 0; i < rws_nbr; i++) {
   123f6:	eb08 0343 	add.w	r3, r8, r3, lsl #1
   123fa:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   123fc:	f00b 0302 	and.w	r3, fp, #2
   12400:	607b      	str	r3, [r7, #4]
	for (unsigned int i = 0; i < rws_nbr; i++) {
   12402:	697b      	ldr	r3, [r7, #20]
   12404:	4598      	cmp	r8, r3
   12406:	d15d      	bne.n	124c4 <cbprintf_package_convert+0x2a8>
	out_desc.len = in_desc->len;
   12408:	7823      	ldrb	r3, [r4, #0]
   1240a:	61fb      	str	r3, [r7, #28]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   1240c:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   1240e:	f01b 0f02 	tst.w	fp, #2
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   12412:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   12416:	bf0c      	ite	eq
   12418:	ea4f 0159 	moveq.w	r1, r9, lsr #1
   1241c:	2100      	movne	r1, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   1241e:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   12422:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   12424:	f040 809d 	bne.w	12562 <cbprintf_package_convert+0x346>
   12428:	f01b 0f04 	tst.w	fp, #4
   1242c:	bf14      	ite	ne
   1242e:	4648      	movne	r0, r9
   12430:	2000      	moveq	r0, #0
	struct cbprintf_package_desc in_desc_backup = *in_desc;
   12432:	f894 b002 	ldrb.w	fp, [r4, #2]
   12436:	f894 8003 	ldrb.w	r8, [r4, #3]
   1243a:	613b      	str	r3, [r7, #16]
	*in_desc = out_desc;
   1243c:	7062      	strb	r2, [r4, #1]
   1243e:	70a0      	strb	r0, [r4, #2]
   12440:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
   12442:	69ba      	ldr	r2, [r7, #24]
   12444:	68f9      	ldr	r1, [r7, #12]
   12446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12448:	4620      	mov	r0, r4
   1244a:	4798      	blx	r3
	if (rv < 0) {
   1244c:	1e05      	subs	r5, r0, #0
   1244e:	f6ff af12 	blt.w	12276 <cbprintf_package_convert+0x5a>
	*in_desc = in_desc_backup;
   12452:	69fb      	ldr	r3, [r7, #28]
   12454:	7023      	strb	r3, [r4, #0]
   12456:	693b      	ldr	r3, [r7, #16]
   12458:	7063      	strb	r3, [r4, #1]
   1245a:	f884 8003 	strb.w	r8, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   1245e:	69ba      	ldr	r2, [r7, #24]
   12460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	*in_desc = in_desc_backup;
   12462:	f884 b002 	strb.w	fp, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   12466:	4649      	mov	r1, r9
   12468:	f107 0040 	add.w	r0, r7, #64	; 0x40
   1246c:	4798      	blx	r3
	if (rv < 0) {
   1246e:	f1b0 0800 	subs.w	r8, r0, #0
   12472:	f2c0 80a3 	blt.w	125bc <cbprintf_package_convert+0x3a0>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   12476:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
   12478:	69ba      	ldr	r2, [r7, #24]
   1247a:	6978      	ldr	r0, [r7, #20]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   1247c:	eba3 010a 	sub.w	r1, r3, sl
   12480:	68fb      	ldr	r3, [r7, #12]
   12482:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
   12484:	68bb      	ldr	r3, [r7, #8]
   12486:	1ac9      	subs	r1, r1, r3
   12488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1248a:	4798      	blx	r3
	if (rv < 0) {
   1248c:	2800      	cmp	r0, #0
   1248e:	f2c0 8097 	blt.w	125c0 <cbprintf_package_convert+0x3a4>
	out_len += rv;
   12492:	44a8      	add	r8, r5
	out_len += rv;
   12494:	eb08 0500 	add.w	r5, r8, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
   12498:	f04f 0b00 	mov.w	fp, #0
		uint8_t loc = cpy_str_pos[i];
   1249c:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (unsigned int i = 0; i < scpy_cnt; i++) {
   124a0:	45b3      	cmp	fp, r6
   124a2:	d360      	bcc.n	12566 <cbprintf_package_convert+0x34a>
	(void)cb(NULL, 0, ctx);
   124a4:	2100      	movs	r1, #0
   124a6:	69ba      	ldr	r2, [r7, #24]
   124a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   124aa:	4608      	mov	r0, r1
   124ac:	4798      	blx	r3
	return out_len;
   124ae:	e6e2      	b.n	12276 <cbprintf_package_convert+0x5a>
	if (cb == NULL) {
   124b0:	f04f 0900 	mov.w	r9, #0
   124b4:	f107 0030 	add.w	r0, r7, #48	; 0x30
   124b8:	e794      	b.n	123e4 <cbprintf_package_convert+0x1c8>
		scpy_cnt = 0;
   124ba:	4656      	mov	r6, sl
		keep_cnt = 0;
   124bc:	46d1      	mov	r9, sl
   124be:	e795      	b.n	123ec <cbprintf_package_convert+0x1d0>
   124c0:	46b1      	mov	r9, r6
   124c2:	e793      	b.n	123ec <cbprintf_package_convert+0x1d0>
		uint8_t arg_idx = *str_pos++;
   124c4:	f818 1b02 	ldrb.w	r1, [r8], #2
   124c8:	4a3e      	ldr	r2, [pc, #248]	; (125c4 <cbprintf_package_convert+0x3a8>)
		uint8_t arg_pos = *str_pos++;
   124ca:	f818 5c01 	ldrb.w	r5, [r8, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
   124ce:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   124d2:	4293      	cmp	r3, r2
   124d4:	d302      	bcc.n	124dc <cbprintf_package_convert+0x2c0>
   124d6:	4a3c      	ldr	r2, [pc, #240]	; (125c8 <cbprintf_package_convert+0x3ac>)
   124d8:	4293      	cmp	r3, r2
   124da:	d31c      	bcc.n	12516 <cbprintf_package_convert+0x2fa>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   124dc:	693b      	ldr	r3, [r7, #16]
   124de:	b123      	cbz	r3, 124ea <cbprintf_package_convert+0x2ce>
   124e0:	69f8      	ldr	r0, [r7, #28]
   124e2:	f014 ffa5 	bl	27430 <is_ptr>
   124e6:	2800      	cmp	r0, #0
   124e8:	d18b      	bne.n	12402 <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   124ea:	687b      	ldr	r3, [r7, #4]
   124ec:	b9f3      	cbnz	r3, 1252c <cbprintf_package_convert+0x310>
				keep_str_pos[keep_cnt++] = arg_idx;
   124ee:	f109 0228 	add.w	r2, r9, #40	; 0x28
   124f2:	f107 0028 	add.w	r0, r7, #40	; 0x28
   124f6:	4402      	add	r2, r0
   124f8:	f109 0301 	add.w	r3, r9, #1
   124fc:	f802 1c10 	strb.w	r1, [r2, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
   12500:	f107 0250 	add.w	r2, r7, #80	; 0x50
   12504:	fa52 f383 	uxtab	r3, r2, r3
   12508:	f109 0902 	add.w	r9, r9, #2
   1250c:	fa5f f989 	uxtb.w	r9, r9
   12510:	f803 5c10 	strb.w	r5, [r3, #-16]
	for (unsigned int i = 0; i < rws_nbr; i++) {
   12514:	e775      	b.n	12402 <cbprintf_package_convert+0x1e6>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   12516:	693b      	ldr	r3, [r7, #16]
   12518:	b12b      	cbz	r3, 12526 <cbprintf_package_convert+0x30a>
   1251a:	69f8      	ldr	r0, [r7, #28]
   1251c:	f014 ff88 	bl	27430 <is_ptr>
   12520:	2800      	cmp	r0, #0
   12522:	f47f af6e 	bne.w	12402 <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   12526:	f01b 0f01 	tst.w	fp, #1
   1252a:	d009      	beq.n	12540 <cbprintf_package_convert+0x324>
				cpy_str_pos[scpy_cnt++] = arg_pos;
   1252c:	f106 0228 	add.w	r2, r6, #40	; 0x28
   12530:	f107 0128 	add.w	r1, r7, #40	; 0x28
   12534:	1c73      	adds	r3, r6, #1
   12536:	1856      	adds	r6, r2, r1
   12538:	f806 5c20 	strb.w	r5, [r6, #-32]
   1253c:	b2de      	uxtb	r6, r3
   1253e:	e760      	b.n	12402 <cbprintf_package_convert+0x1e6>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   12540:	f01b 0f04 	tst.w	fp, #4
   12544:	f43f af5d 	beq.w	12402 <cbprintf_package_convert+0x1e6>
				keep_str_pos[keep_cnt++] = arg_pos;
   12548:	f109 0228 	add.w	r2, r9, #40	; 0x28
   1254c:	f107 0128 	add.w	r1, r7, #40	; 0x28
   12550:	f109 0301 	add.w	r3, r9, #1
   12554:	eb02 0901 	add.w	r9, r2, r1
   12558:	f809 5c10 	strb.w	r5, [r9, #-16]
   1255c:	fa5f f983 	uxtb.w	r9, r3
   12560:	e74f      	b.n	12402 <cbprintf_package_convert+0x1e6>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   12562:	2000      	movs	r0, #0
   12564:	e765      	b.n	12432 <cbprintf_package_convert+0x216>
		uint8_t loc = cpy_str_pos[i];
   12566:	f81b 300a 	ldrb.w	r3, [fp, sl]
   1256a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		const char *str = *(const char **)&buf32[loc];
   1256e:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
   12572:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   12574:	b1fb      	cbz	r3, 125b6 <cbprintf_package_convert+0x39a>
   12576:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
   1257a:	69ba      	ldr	r2, [r7, #24]
   1257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1257e:	2101      	movs	r1, #1
   12580:	f107 002f 	add.w	r0, r7, #47	; 0x2f
   12584:	4798      	blx	r3
		if (rv < 0) {
   12586:	2800      	cmp	r0, #0
   12588:	db1a      	blt.n	125c0 <cbprintf_package_convert+0x3a4>
		out_len += rv;
   1258a:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
   1258c:	f1b8 0f00 	cmp.w	r8, #0
   12590:	d106      	bne.n	125a0 <cbprintf_package_convert+0x384>
   12592:	4648      	mov	r0, r9
   12594:	f016 fc71 	bl	28e7a <strlen>
   12598:	f100 0801 	add.w	r8, r0, #1
   1259c:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
   125a0:	69ba      	ldr	r2, [r7, #24]
   125a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   125a4:	4641      	mov	r1, r8
   125a6:	4648      	mov	r0, r9
   125a8:	4798      	blx	r3
		if (rv < 0) {
   125aa:	2800      	cmp	r0, #0
   125ac:	db08      	blt.n	125c0 <cbprintf_package_convert+0x3a4>
		out_len += rv;
   125ae:	4405      	add	r5, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
   125b0:	f10b 0b01 	add.w	fp, fp, #1
   125b4:	e774      	b.n	124a0 <cbprintf_package_convert+0x284>
		uint16_t str_len = strl ? strl[i] : 0;
   125b6:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
   125ba:	e7de      	b.n	1257a <cbprintf_package_convert+0x35e>
   125bc:	4645      	mov	r5, r8
   125be:	e65a      	b.n	12276 <cbprintf_package_convert+0x5a>
   125c0:	4605      	mov	r5, r0
   125c2:	e658      	b.n	12276 <cbprintf_package_convert+0x5a>
   125c4:	0002c714 	.word	0x0002c714
   125c8:	00030668 	.word	0x00030668
   125cc:	0002daa7 	.word	0x0002daa7
   125d0:	01000004 	.word	0x01000004
   125d4:	0002cb74 	.word	0x0002cb74

000125d8 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
   125d8:	4b01      	ldr	r3, [pc, #4]	; (125e0 <__printk_hook_install+0x8>)
   125da:	6018      	str	r0, [r3, #0]
}
   125dc:	4770      	bx	lr
   125de:	bf00      	nop
   125e0:	200005d0 	.word	0x200005d0

000125e4 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   125e4:	b530      	push	{r4, r5, lr}
   125e6:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
   125e8:	2500      	movs	r5, #0
   125ea:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
   125ee:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   125f0:	9500      	str	r5, [sp, #0]
   125f2:	a903      	add	r1, sp, #12
   125f4:	4805      	ldr	r0, [pc, #20]	; (1260c <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
   125f6:	9505      	str	r5, [sp, #20]
   125f8:	f000 f92e 	bl	12858 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   125fc:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
   12600:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   12602:	bfb8      	it	lt
   12604:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   12606:	b007      	add	sp, #28
   12608:	bd30      	pop	{r4, r5, pc}
   1260a:	bf00      	nop
   1260c:	00027571 	.word	0x00027571

00012610 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   12610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12614:	8b05      	ldrh	r5, [r0, #24]
{
   12616:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   12618:	0728      	lsls	r0, r5, #28
{
   1261a:	4690      	mov	r8, r2
	if (processing) {
   1261c:	d411      	bmi.n	12642 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
   1261e:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12620:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   12624:	f040 80cd 	bne.w	127c2 <process_event+0x1b2>
			evt = process_recheck(mgr);
   12628:	4620      	mov	r0, r4
   1262a:	f015 f99f 	bl	2796c <process_recheck>
		}

		if (evt == EVT_NOP) {
   1262e:	b178      	cbz	r0, 12650 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
   12630:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12632:	8b21      	ldrh	r1, [r4, #24]
   12634:	2804      	cmp	r0, #4
   12636:	d811      	bhi.n	1265c <process_event+0x4c>
   12638:	e8df f000 	tbb	[pc, r0]
   1263c:	856d10c3 	.word	0x856d10c3
   12640:	95          	.byte	0x95
   12641:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
   12642:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   12644:	bf0c      	ite	eq
   12646:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1264a:	f045 0520 	orrne.w	r5, r5, #32
   1264e:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   12650:	f388 8811 	msr	BASEPRI, r8
   12654:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   12658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1265c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   12660:	45aa      	cmp	sl, r5
   12662:	f000 80a6 	beq.w	127b2 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
   12666:	2700      	movs	r7, #0
   12668:	46b9      	mov	r9, r7
   1266a:	463e      	mov	r6, r7
   1266c:	68a3      	ldr	r3, [r4, #8]
   1266e:	2b00      	cmp	r3, #0
   12670:	f000 80bd 	beq.w	127ee <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   12674:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   12678:	8321      	strh	r1, [r4, #24]
   1267a:	f388 8811 	msr	BASEPRI, r8
   1267e:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   12682:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   12684:	2900      	cmp	r1, #0
   12686:	f000 80bb 	beq.w	12800 <process_event+0x1f0>
	return node->next;
   1268a:	680d      	ldr	r5, [r1, #0]
   1268c:	2900      	cmp	r1, #0
   1268e:	f000 80b7 	beq.w	12800 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
   12692:	f8d1 8004 	ldr.w	r8, [r1, #4]
   12696:	4633      	mov	r3, r6
   12698:	4652      	mov	r2, sl
   1269a:	4620      	mov	r0, r4
   1269c:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1269e:	2d00      	cmp	r5, #0
   126a0:	d076      	beq.n	12790 <process_event+0x180>
   126a2:	682b      	ldr	r3, [r5, #0]
   126a4:	4629      	mov	r1, r5
   126a6:	461d      	mov	r5, r3
   126a8:	e7f0      	b.n	1268c <process_event+0x7c>
   126aa:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   126ae:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   126b0:	2a01      	cmp	r2, #1
   126b2:	d81b      	bhi.n	126ec <process_event+0xdc>
	list->head = NULL;
   126b4:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   126b6:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   126ba:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   126bc:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   126be:	b289      	uxth	r1, r1
	list->tail = NULL;
   126c0:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   126c4:	d109      	bne.n	126da <process_event+0xca>
   126c6:	463b      	mov	r3, r7
   126c8:	e003      	b.n	126d2 <process_event+0xc2>
				mgr->refs += 1U;
   126ca:	8b62      	ldrh	r2, [r4, #26]
   126cc:	3201      	adds	r2, #1
   126ce:	8362      	strh	r2, [r4, #26]
	return node->next;
   126d0:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   126d2:	2b00      	cmp	r3, #0
   126d4:	d1f9      	bne.n	126ca <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   126d6:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   126da:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   126dc:	4620      	mov	r0, r4
   126de:	f015 f945 	bl	2796c <process_recheck>
   126e2:	2800      	cmp	r0, #0
   126e4:	d07b      	beq.n	127de <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   126e6:	f041 0120 	orr.w	r1, r1, #32
   126ea:	e077      	b.n	127dc <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
   126ec:	2b04      	cmp	r3, #4
   126ee:	d10a      	bne.n	12706 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   126f0:	f021 0107 	bic.w	r1, r1, #7
   126f4:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   126f6:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   126f8:	4620      	mov	r0, r4
   126fa:	f015 f937 	bl	2796c <process_recheck>
   126fe:	b110      	cbz	r0, 12706 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   12700:	f041 0120 	orr.w	r1, r1, #32
   12704:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   12706:	8b21      	ldrh	r1, [r4, #24]
   12708:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   1270c:	45aa      	cmp	sl, r5
   1270e:	d050      	beq.n	127b2 <process_event+0x1a2>
   12710:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
   12712:	46b9      	mov	r9, r7
   12714:	e7aa      	b.n	1266c <process_event+0x5c>
			transit = mgr->transitions->start;
   12716:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12718:	f021 0107 	bic.w	r1, r1, #7
   1271c:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
   12720:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
   12722:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
   12726:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   12728:	d12d      	bne.n	12786 <process_event+0x176>
		    || (transit != NULL)) {
   1272a:	f1b9 0f00 	cmp.w	r9, #0
   1272e:	d040      	beq.n	127b2 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   12730:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   12734:	8321      	strh	r1, [r4, #24]
   12736:	f388 8811 	msr	BASEPRI, r8
   1273a:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
   1273e:	493a      	ldr	r1, [pc, #232]	; (12828 <process_event+0x218>)
   12740:	4620      	mov	r0, r4
   12742:	47c8      	blx	r9
   12744:	e029      	b.n	1279a <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12746:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
   1274a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1274c:	f041 0104 	orr.w	r1, r1, #4
   12750:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   12752:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
   12754:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
   12758:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   1275a:	d0e6      	beq.n	1272a <process_event+0x11a>
   1275c:	2700      	movs	r7, #0
		res = 0;
   1275e:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   12760:	f04f 0a04 	mov.w	sl, #4
   12764:	e782      	b.n	1266c <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12766:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
   1276a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1276c:	f041 0105 	orr.w	r1, r1, #5
   12770:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   12772:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
   12774:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
   12778:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   1277a:	d0d6      	beq.n	1272a <process_event+0x11a>
   1277c:	2700      	movs	r7, #0
		res = 0;
   1277e:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   12780:	f04f 0a05 	mov.w	sl, #5
   12784:	e772      	b.n	1266c <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
   12786:	2700      	movs	r7, #0
		res = 0;
   12788:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1278a:	f04f 0a06 	mov.w	sl, #6
   1278e:	e76d      	b.n	1266c <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   12790:	462b      	mov	r3, r5
   12792:	e787      	b.n	126a4 <process_event+0x94>
			if (transit != NULL) {
   12794:	f1b9 0f00 	cmp.w	r9, #0
   12798:	d1d1      	bne.n	1273e <process_event+0x12e>
	__asm__ volatile(
   1279a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1279e:	f3ef 8811 	mrs	r8, BASEPRI
   127a2:	f383 8812 	msr	BASEPRI_MAX, r3
   127a6:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   127aa:	8b23      	ldrh	r3, [r4, #24]
   127ac:	f023 0308 	bic.w	r3, r3, #8
   127b0:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   127b2:	8b25      	ldrh	r5, [r4, #24]
   127b4:	06ea      	lsls	r2, r5, #27
   127b6:	d52e      	bpl.n	12816 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   127b8:	f025 0310 	bic.w	r3, r5, #16
   127bc:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   127be:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
   127c2:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   127c4:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   127c6:	2e00      	cmp	r6, #0
   127c8:	f6bf af6f 	bge.w	126aa <process_event+0x9a>
	list->head = NULL;
   127cc:	2300      	movs	r3, #0
		*clients = mgr->clients;
   127ce:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
   127d0:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   127d4:	f021 0107 	bic.w	r1, r1, #7
   127d8:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
   127dc:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   127de:	8b21      	ldrh	r1, [r4, #24]
   127e0:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   127e4:	45aa      	cmp	sl, r5
   127e6:	f04f 0900 	mov.w	r9, #0
   127ea:	f47f af3f 	bne.w	1266c <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
   127ee:	2f00      	cmp	r7, #0
   127f0:	d09b      	beq.n	1272a <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   127f2:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   127f6:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
   127f8:	f388 8811 	msr	BASEPRI, r8
   127fc:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
   12800:	2f00      	cmp	r7, #0
   12802:	d0c7      	beq.n	12794 <process_event+0x184>
	return node->next;
   12804:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
   12806:	4639      	mov	r1, r7
   12808:	4633      	mov	r3, r6
   1280a:	4652      	mov	r2, sl
   1280c:	4620      	mov	r0, r4
   1280e:	f015 f8d9 	bl	279c4 <notify_one>
	list->head = node;
   12812:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
   12814:	e7f4      	b.n	12800 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   12816:	06ab      	lsls	r3, r5, #26
   12818:	f57f af1a 	bpl.w	12650 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   1281c:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   12820:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   12822:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   12826:	e6ff      	b.n	12628 <process_event+0x18>
   12828:	000279f1 	.word	0x000279f1

0001282c <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   1282c:	b510      	push	{r4, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   1282e:	4c09      	ldr	r4, [pc, #36]	; (12854 <crc8_ccitt+0x28>)
   12830:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
   12832:	4291      	cmp	r1, r2
   12834:	d100      	bne.n	12838 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
   12836:	bd10      	pop	{r4, pc}
		val ^= p[i];
   12838:	f811 3b01 	ldrb.w	r3, [r1], #1
   1283c:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   1283e:	0903      	lsrs	r3, r0, #4
   12840:	0100      	lsls	r0, r0, #4
   12842:	5ce3      	ldrb	r3, [r4, r3]
   12844:	b2c0      	uxtb	r0, r0
   12846:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   12848:	0918      	lsrs	r0, r3, #4
   1284a:	011b      	lsls	r3, r3, #4
   1284c:	5c20      	ldrb	r0, [r4, r0]
   1284e:	b2db      	uxtb	r3, r3
   12850:	4058      	eors	r0, r3
	for (i = 0; i < cnt; i++) {
   12852:	e7ee      	b.n	12832 <crc8_ccitt+0x6>
   12854:	0002db5b 	.word	0x0002db5b

00012858 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   12858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1285c:	4681      	mov	r9, r0
   1285e:	b095      	sub	sp, #84	; 0x54
   12860:	468b      	mov	fp, r1
   12862:	4617      	mov	r7, r2
   12864:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   12866:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   12868:	7838      	ldrb	r0, [r7, #0]
   1286a:	b908      	cbnz	r0, 12870 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
   1286c:	4628      	mov	r0, r5
   1286e:	e358      	b.n	12f22 <z_cbvprintf_impl+0x6ca>
			OUTC(*fp++);
   12870:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
   12872:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   12874:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
   12876:	d006      	beq.n	12886 <z_cbvprintf_impl+0x2e>
			OUTC('%');
   12878:	4659      	mov	r1, fp
   1287a:	47c8      	blx	r9
   1287c:	2800      	cmp	r0, #0
   1287e:	f2c0 8350 	blt.w	12f22 <z_cbvprintf_impl+0x6ca>
   12882:	3501      	adds	r5, #1
		if (bps == NULL) {
   12884:	e1fb      	b.n	12c7e <z_cbvprintf_impl+0x426>
		} state = {
   12886:	2218      	movs	r2, #24
   12888:	2100      	movs	r1, #0
   1288a:	a80e      	add	r0, sp, #56	; 0x38
   1288c:	f016 fb57 	bl	28f3e <memset>
	if (*sp == '%') {
   12890:	787b      	ldrb	r3, [r7, #1]
   12892:	2b25      	cmp	r3, #37	; 0x25
   12894:	d07d      	beq.n	12992 <z_cbvprintf_impl+0x13a>
   12896:	2300      	movs	r3, #0
   12898:	1c78      	adds	r0, r7, #1
   1289a:	4698      	mov	r8, r3
   1289c:	469e      	mov	lr, r3
   1289e:	469c      	mov	ip, r3
   128a0:	461e      	mov	r6, r3
   128a2:	4601      	mov	r1, r0
		switch (*sp) {
   128a4:	f810 2b01 	ldrb.w	r2, [r0], #1
   128a8:	2a2b      	cmp	r2, #43	; 0x2b
   128aa:	f000 80a1 	beq.w	129f0 <z_cbvprintf_impl+0x198>
   128ae:	f200 8098 	bhi.w	129e2 <z_cbvprintf_impl+0x18a>
   128b2:	2a20      	cmp	r2, #32
   128b4:	f000 809f 	beq.w	129f6 <z_cbvprintf_impl+0x19e>
   128b8:	2a23      	cmp	r2, #35	; 0x23
   128ba:	f000 809f 	beq.w	129fc <z_cbvprintf_impl+0x1a4>
   128be:	b12b      	cbz	r3, 128cc <z_cbvprintf_impl+0x74>
   128c0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   128c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   128c8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   128cc:	f1b8 0f00 	cmp.w	r8, #0
   128d0:	d005      	beq.n	128de <z_cbvprintf_impl+0x86>
   128d2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   128d6:	f043 0320 	orr.w	r3, r3, #32
   128da:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   128de:	f1be 0f00 	cmp.w	lr, #0
   128e2:	d005      	beq.n	128f0 <z_cbvprintf_impl+0x98>
   128e4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   128e8:	f043 0310 	orr.w	r3, r3, #16
   128ec:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   128f0:	f1bc 0f00 	cmp.w	ip, #0
   128f4:	d005      	beq.n	12902 <z_cbvprintf_impl+0xaa>
   128f6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   128fa:	f043 0308 	orr.w	r3, r3, #8
   128fe:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   12902:	b12e      	cbz	r6, 12910 <z_cbvprintf_impl+0xb8>
   12904:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   12908:	f043 0304 	orr.w	r3, r3, #4
   1290c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
   12910:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   12914:	f003 0044 	and.w	r0, r3, #68	; 0x44
   12918:	2844      	cmp	r0, #68	; 0x44
   1291a:	d103      	bne.n	12924 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
   1291c:	f36f 1386 	bfc	r3, #6, #1
   12920:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
   12924:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   12928:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
   1292a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1292e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   12932:	d17f      	bne.n	12a34 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
   12934:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   12938:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
   1293c:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
   1293e:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
   12942:	781a      	ldrb	r2, [r3, #0]
   12944:	2a2e      	cmp	r2, #46	; 0x2e
   12946:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   1294a:	bf0c      	ite	eq
   1294c:	2101      	moveq	r1, #1
   1294e:	2100      	movne	r1, #0
   12950:	f361 0241 	bfi	r2, r1, #1, #1
   12954:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
   12958:	d178      	bne.n	12a4c <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
   1295a:	785a      	ldrb	r2, [r3, #1]
   1295c:	2a2a      	cmp	r2, #42	; 0x2a
   1295e:	d06e      	beq.n	12a3e <z_cbvprintf_impl+0x1e6>
	++sp;
   12960:	3301      	adds	r3, #1
	size_t val = 0;
   12962:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   12964:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   12968:	4619      	mov	r1, r3
   1296a:	f811 0b01 	ldrb.w	r0, [r1], #1
   1296e:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
   12972:	2e09      	cmp	r6, #9
   12974:	f240 8095 	bls.w	12aa2 <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
   12978:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
   1297c:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
   1297e:	f3c1 0040 	ubfx	r0, r1, #1, #1
   12982:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
   12986:	460a      	mov	r2, r1
   12988:	f360 0241 	bfi	r2, r0, #1, #1
   1298c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   12990:	e05c      	b.n	12a4c <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
   12992:	1cba      	adds	r2, r7, #2
   12994:	9203      	str	r2, [sp, #12]
   12996:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
   1299a:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   1299e:	07da      	lsls	r2, r3, #31
   129a0:	f140 812e 	bpl.w	12c00 <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
   129a4:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
   129a8:	f1b8 0f00 	cmp.w	r8, #0
   129ac:	da07      	bge.n	129be <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
   129ae:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   129b2:	f042 0204 	orr.w	r2, r2, #4
   129b6:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
   129ba:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
   129be:	075e      	lsls	r6, r3, #29
   129c0:	f140 8127 	bpl.w	12c12 <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
   129c4:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
   129c8:	f1ba 0f00 	cmp.w	sl, #0
   129cc:	f280 8126 	bge.w	12c1c <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
   129d0:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   129d4:	f36f 0341 	bfc	r3, #1, #1
   129d8:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
   129dc:	f04f 3aff 	mov.w	sl, #4294967295
   129e0:	e11c      	b.n	12c1c <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
   129e2:	2a2d      	cmp	r2, #45	; 0x2d
   129e4:	d00d      	beq.n	12a02 <z_cbvprintf_impl+0x1aa>
   129e6:	2a30      	cmp	r2, #48	; 0x30
   129e8:	f47f af69 	bne.w	128be <z_cbvprintf_impl+0x66>
   129ec:	2301      	movs	r3, #1
	} while (loop);
   129ee:	e758      	b.n	128a2 <z_cbvprintf_impl+0x4a>
		switch (*sp) {
   129f0:	f04f 0c01 	mov.w	ip, #1
   129f4:	e755      	b.n	128a2 <z_cbvprintf_impl+0x4a>
   129f6:	f04f 0e01 	mov.w	lr, #1
   129fa:	e752      	b.n	128a2 <z_cbvprintf_impl+0x4a>
   129fc:	f04f 0801 	mov.w	r8, #1
   12a00:	e74f      	b.n	128a2 <z_cbvprintf_impl+0x4a>
   12a02:	2601      	movs	r6, #1
   12a04:	e74d      	b.n	128a2 <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
   12a06:	fb0e 6202 	mla	r2, lr, r2, r6
   12a0a:	3a30      	subs	r2, #48	; 0x30
   12a0c:	4603      	mov	r3, r0
   12a0e:	4618      	mov	r0, r3
   12a10:	f810 6b01 	ldrb.w	r6, [r0], #1
   12a14:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
   12a18:	f1bc 0f09 	cmp.w	ip, #9
   12a1c:	d9f3      	bls.n	12a06 <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
   12a1e:	4299      	cmp	r1, r3
   12a20:	d08f      	beq.n	12942 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   12a22:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
   12a26:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
   12a28:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   12a2a:	f362 0141 	bfi	r1, r2, #1, #1
   12a2e:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
   12a32:	e786      	b.n	12942 <z_cbvprintf_impl+0xea>
   12a34:	460b      	mov	r3, r1
	size_t val = 0;
   12a36:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   12a38:	f04f 0e0a 	mov.w	lr, #10
   12a3c:	e7e7      	b.n	12a0e <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
   12a3e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   12a42:	f042 0204 	orr.w	r2, r2, #4
   12a46:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
   12a4a:	3302      	adds	r3, #2
	switch (*sp) {
   12a4c:	781a      	ldrb	r2, [r3, #0]
   12a4e:	2a6c      	cmp	r2, #108	; 0x6c
   12a50:	d047      	beq.n	12ae2 <z_cbvprintf_impl+0x28a>
   12a52:	d82b      	bhi.n	12aac <z_cbvprintf_impl+0x254>
   12a54:	2a68      	cmp	r2, #104	; 0x68
   12a56:	d031      	beq.n	12abc <z_cbvprintf_impl+0x264>
   12a58:	2a6a      	cmp	r2, #106	; 0x6a
   12a5a:	d04b      	beq.n	12af4 <z_cbvprintf_impl+0x29c>
   12a5c:	2a4c      	cmp	r2, #76	; 0x4c
   12a5e:	d051      	beq.n	12b04 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
   12a60:	461a      	mov	r2, r3
   12a62:	f812 3b01 	ldrb.w	r3, [r2], #1
   12a66:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
   12a68:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
   12a6a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
   12a6e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
   12a72:	f200 80be 	bhi.w	12bf2 <z_cbvprintf_impl+0x39a>
   12a76:	2b6d      	cmp	r3, #109	; 0x6d
   12a78:	d851      	bhi.n	12b1e <z_cbvprintf_impl+0x2c6>
   12a7a:	2b69      	cmp	r3, #105	; 0x69
   12a7c:	f200 80b9 	bhi.w	12bf2 <z_cbvprintf_impl+0x39a>
   12a80:	2b57      	cmp	r3, #87	; 0x57
   12a82:	d867      	bhi.n	12b54 <z_cbvprintf_impl+0x2fc>
   12a84:	2b41      	cmp	r3, #65	; 0x41
   12a86:	d003      	beq.n	12a90 <z_cbvprintf_impl+0x238>
   12a88:	3b45      	subs	r3, #69	; 0x45
   12a8a:	2b02      	cmp	r3, #2
   12a8c:	f200 80b1 	bhi.w	12bf2 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
   12a90:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   12a94:	2204      	movs	r2, #4
   12a96:	f362 0302 	bfi	r3, r2, #0, #3
   12a9a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
   12a9e:	2301      	movs	r3, #1
			break;
   12aa0:	e073      	b.n	12b8a <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
   12aa2:	fb0c 0202 	mla	r2, ip, r2, r0
   12aa6:	3a30      	subs	r2, #48	; 0x30
   12aa8:	460b      	mov	r3, r1
   12aaa:	e75d      	b.n	12968 <z_cbvprintf_impl+0x110>
	switch (*sp) {
   12aac:	2a74      	cmp	r2, #116	; 0x74
   12aae:	d025      	beq.n	12afc <z_cbvprintf_impl+0x2a4>
   12ab0:	2a7a      	cmp	r2, #122	; 0x7a
   12ab2:	d1d5      	bne.n	12a60 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
   12ab4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   12ab8:	2106      	movs	r1, #6
   12aba:	e00c      	b.n	12ad6 <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
   12abc:	785a      	ldrb	r2, [r3, #1]
   12abe:	2a68      	cmp	r2, #104	; 0x68
   12ac0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   12ac4:	d106      	bne.n	12ad4 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
   12ac6:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   12ac8:	f361 02c6 	bfi	r2, r1, #3, #4
   12acc:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
   12ad0:	3302      	adds	r3, #2
   12ad2:	e7c5      	b.n	12a60 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
   12ad4:	2102      	movs	r1, #2
   12ad6:	f361 02c6 	bfi	r2, r1, #3, #4
   12ada:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
   12ade:	3301      	adds	r3, #1
   12ae0:	e7be      	b.n	12a60 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
   12ae2:	785a      	ldrb	r2, [r3, #1]
   12ae4:	2a6c      	cmp	r2, #108	; 0x6c
   12ae6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   12aea:	d101      	bne.n	12af0 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
   12aec:	2104      	movs	r1, #4
   12aee:	e7eb      	b.n	12ac8 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
   12af0:	2103      	movs	r1, #3
   12af2:	e7f0      	b.n	12ad6 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
   12af4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   12af8:	2105      	movs	r1, #5
   12afa:	e7ec      	b.n	12ad6 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
   12afc:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   12b00:	2107      	movs	r1, #7
   12b02:	e7e8      	b.n	12ad6 <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
   12b04:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
   12b08:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
   12b0c:	f022 0202 	bic.w	r2, r2, #2
   12b10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   12b14:	f042 0202 	orr.w	r2, r2, #2
   12b18:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
   12b1c:	e7df      	b.n	12ade <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
   12b1e:	3b6e      	subs	r3, #110	; 0x6e
   12b20:	b2d9      	uxtb	r1, r3
   12b22:	2301      	movs	r3, #1
   12b24:	408b      	lsls	r3, r1
   12b26:	f240 4182 	movw	r1, #1154	; 0x482
   12b2a:	420b      	tst	r3, r1
   12b2c:	d137      	bne.n	12b9e <z_cbvprintf_impl+0x346>
   12b2e:	f013 0f24 	tst.w	r3, #36	; 0x24
   12b32:	d151      	bne.n	12bd8 <z_cbvprintf_impl+0x380>
   12b34:	07d8      	lsls	r0, r3, #31
   12b36:	d55c      	bpl.n	12bf2 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
   12b38:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   12b3c:	2103      	movs	r1, #3
   12b3e:	f361 0302 	bfi	r3, r1, #0, #3
   12b42:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   12b46:	f002 0378 	and.w	r3, r2, #120	; 0x78
   12b4a:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
   12b4e:	424b      	negs	r3, r1
   12b50:	414b      	adcs	r3, r1
   12b52:	e01a      	b.n	12b8a <z_cbvprintf_impl+0x332>
	switch (conv->specifier) {
   12b54:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
   12b58:	b2c9      	uxtb	r1, r1
   12b5a:	2001      	movs	r0, #1
   12b5c:	fa00 f101 	lsl.w	r1, r0, r1
   12b60:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   12b64:	d194      	bne.n	12a90 <z_cbvprintf_impl+0x238>
   12b66:	f640 0601 	movw	r6, #2049	; 0x801
   12b6a:	4231      	tst	r1, r6
   12b6c:	d11d      	bne.n	12baa <z_cbvprintf_impl+0x352>
   12b6e:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   12b72:	d03e      	beq.n	12bf2 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
   12b74:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   12b78:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   12b7c:	f002 0278 	and.w	r2, r2, #120	; 0x78
   12b80:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
   12b82:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   12b86:	d034      	beq.n	12bf2 <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
   12b88:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
   12b8a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   12b8e:	f3c2 0140 	ubfx	r1, r2, #1, #1
   12b92:	430b      	orrs	r3, r1
   12b94:	f363 0241 	bfi	r2, r3, #1, #1
   12b98:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   12b9c:	e6fd      	b.n	1299a <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
   12b9e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   12ba2:	2102      	movs	r1, #2
   12ba4:	f361 0302 	bfi	r3, r1, #0, #3
   12ba8:	e7e8      	b.n	12b7c <z_cbvprintf_impl+0x324>
   12baa:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
   12bae:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
   12bb0:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   12bb4:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   12bb8:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   12bba:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
   12bbe:	bf02      	ittt	eq
   12bc0:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
   12bc4:	f041 0101 	orreq.w	r1, r1, #1
   12bc8:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
   12bcc:	2b63      	cmp	r3, #99	; 0x63
   12bce:	d1db      	bne.n	12b88 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
   12bd0:	1e13      	subs	r3, r2, #0
   12bd2:	bf18      	it	ne
   12bd4:	2301      	movne	r3, #1
   12bd6:	e7d8      	b.n	12b8a <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
   12bd8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   12bdc:	2103      	movs	r1, #3
   12bde:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
   12be2:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   12be6:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
   12bea:	bf14      	ite	ne
   12bec:	2301      	movne	r3, #1
   12bee:	2300      	moveq	r3, #0
   12bf0:	e7cb      	b.n	12b8a <z_cbvprintf_impl+0x332>
		conv->invalid = true;
   12bf2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   12bf6:	f043 0301 	orr.w	r3, r3, #1
   12bfa:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
   12bfe:	e7c3      	b.n	12b88 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
   12c00:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
   12c04:	2a00      	cmp	r2, #0
			width = conv->width_value;
   12c06:	bfb4      	ite	lt
   12c08:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
   12c0c:	f04f 38ff 	movge.w	r8, #4294967295
   12c10:	e6d5      	b.n	129be <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
   12c12:	0798      	lsls	r0, r3, #30
   12c14:	f57f aee2 	bpl.w	129dc <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
   12c18:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
   12c1c:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
   12c20:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   12c22:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
   12c26:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
   12c2a:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   12c2e:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   12c30:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   12c34:	d133      	bne.n	12c9e <z_cbvprintf_impl+0x446>
			switch (length_mod) {
   12c36:	1ecb      	subs	r3, r1, #3
   12c38:	2b04      	cmp	r3, #4
   12c3a:	d804      	bhi.n	12c46 <z_cbvprintf_impl+0x3ee>
   12c3c:	e8df f003 	tbb	[pc, r3]
   12c40:	21464621 	.word	0x21464621
   12c44:	21          	.byte	0x21
   12c45:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   12c46:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
   12c48:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
   12c4a:	ea4f 72e3 	mov.w	r2, r3, asr #31
   12c4e:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   12c52:	d11c      	bne.n	12c8e <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
   12c54:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
   12c58:	17da      	asrs	r2, r3, #31
   12c5a:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
   12c5e:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
   12c60:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   12c64:	f013 0603 	ands.w	r6, r3, #3
   12c68:	d050      	beq.n	12d0c <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
   12c6a:	9b03      	ldr	r3, [sp, #12]
   12c6c:	463a      	mov	r2, r7
   12c6e:	4659      	mov	r1, fp
   12c70:	4648      	mov	r0, r9
   12c72:	f014 ffa9 	bl	27bc8 <outs>
   12c76:	2800      	cmp	r0, #0
   12c78:	f2c0 8153 	blt.w	12f22 <z_cbvprintf_impl+0x6ca>
   12c7c:	4405      	add	r5, r0
			continue;
   12c7e:	9f03      	ldr	r7, [sp, #12]
   12c80:	e5f2      	b.n	12868 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   12c82:	f854 3b04 	ldr.w	r3, [r4], #4
   12c86:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
   12c88:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
   12c8c:	e7e8      	b.n	12c60 <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
   12c8e:	2902      	cmp	r1, #2
   12c90:	d1e5      	bne.n	12c5e <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
   12c92:	b21a      	sxth	r2, r3
   12c94:	f343 33c0 	sbfx	r3, r3, #15, #1
   12c98:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   12c9c:	e7df      	b.n	12c5e <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
   12c9e:	2b02      	cmp	r3, #2
   12ca0:	d124      	bne.n	12cec <z_cbvprintf_impl+0x494>
			switch (length_mod) {
   12ca2:	1ecb      	subs	r3, r1, #3
   12ca4:	2b04      	cmp	r3, #4
   12ca6:	d804      	bhi.n	12cb2 <z_cbvprintf_impl+0x45a>
   12ca8:	e8df f003 	tbb	[pc, r3]
   12cac:	18101018 	.word	0x18101018
   12cb0:	18          	.byte	0x18
   12cb1:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
   12cb2:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
   12cb4:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   12cb8:	f04f 0200 	mov.w	r2, #0
   12cbc:	d014      	beq.n	12ce8 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
   12cbe:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
   12cc0:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
   12cc4:	d1cc      	bne.n	12c60 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
   12cc6:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
   12cc8:	930e      	str	r3, [sp, #56]	; 0x38
   12cca:	e7c9      	b.n	12c60 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
   12ccc:	3407      	adds	r4, #7
   12cce:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
   12cd2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   12cd6:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   12cda:	e7c1      	b.n	12c60 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
   12cdc:	f854 3b04 	ldr.w	r3, [r4], #4
   12ce0:	930e      	str	r3, [sp, #56]	; 0x38
   12ce2:	2300      	movs	r3, #0
   12ce4:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
   12ce6:	e7bb      	b.n	12c60 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
   12ce8:	b2db      	uxtb	r3, r3
   12cea:	e7cd      	b.n	12c88 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
   12cec:	2b04      	cmp	r3, #4
   12cee:	d108      	bne.n	12d02 <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
   12cf0:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
   12cf2:	f024 0407 	bic.w	r4, r4, #7
   12cf6:	e9d4 2300 	ldrd	r2, r3, [r4]
   12cfa:	3408      	adds	r4, #8
   12cfc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   12d00:	e7ae      	b.n	12c60 <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
   12d02:	2b03      	cmp	r3, #3
   12d04:	d1ac      	bne.n	12c60 <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
   12d06:	f854 3b04 	ldr.w	r3, [r4], #4
   12d0a:	e7dd      	b.n	12cc8 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
   12d0c:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   12d10:	2878      	cmp	r0, #120	; 0x78
   12d12:	d8b4      	bhi.n	12c7e <z_cbvprintf_impl+0x426>
   12d14:	2862      	cmp	r0, #98	; 0x62
   12d16:	d81c      	bhi.n	12d52 <z_cbvprintf_impl+0x4fa>
   12d18:	2825      	cmp	r0, #37	; 0x25
   12d1a:	f43f adad 	beq.w	12878 <z_cbvprintf_impl+0x20>
   12d1e:	2858      	cmp	r0, #88	; 0x58
   12d20:	d1ad      	bne.n	12c7e <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
   12d22:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   12d26:	9300      	str	r3, [sp, #0]
   12d28:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   12d2c:	ab08      	add	r3, sp, #32
   12d2e:	aa10      	add	r2, sp, #64	; 0x40
   12d30:	f014 ff04 	bl	27b3c <encode_uint>
			if (precision >= 0) {
   12d34:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
   12d38:	4607      	mov	r7, r0
			if (precision >= 0) {
   12d3a:	f280 809a 	bge.w	12e72 <z_cbvprintf_impl+0x61a>
		if (bps == NULL) {
   12d3e:	2f00      	cmp	r7, #0
   12d40:	d09d      	beq.n	12c7e <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
   12d42:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   12d46:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
   12d48:	2e00      	cmp	r6, #0
   12d4a:	f000 80c1 	beq.w	12ed0 <z_cbvprintf_impl+0x678>
			nj_len += 1U;
   12d4e:	3001      	adds	r0, #1
   12d50:	e0be      	b.n	12ed0 <z_cbvprintf_impl+0x678>
		switch (conv->specifier) {
   12d52:	3863      	subs	r0, #99	; 0x63
   12d54:	2815      	cmp	r0, #21
   12d56:	d892      	bhi.n	12c7e <z_cbvprintf_impl+0x426>
   12d58:	a201      	add	r2, pc, #4	; (adr r2, 12d60 <z_cbvprintf_impl+0x508>)
   12d5a:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   12d5e:	bf00      	nop
   12d60:	00012e35 	.word	0x00012e35
   12d64:	00012e47 	.word	0x00012e47
   12d68:	00012c7f 	.word	0x00012c7f
   12d6c:	00012c7f 	.word	0x00012c7f
   12d70:	00012c7f 	.word	0x00012c7f
   12d74:	00012c7f 	.word	0x00012c7f
   12d78:	00012e47 	.word	0x00012e47
   12d7c:	00012c7f 	.word	0x00012c7f
   12d80:	00012c7f 	.word	0x00012c7f
   12d84:	00012c7f 	.word	0x00012c7f
   12d88:	00012c7f 	.word	0x00012c7f
   12d8c:	00012ed5 	.word	0x00012ed5
   12d90:	00012e6d 	.word	0x00012e6d
   12d94:	00012e93 	.word	0x00012e93
   12d98:	00012c7f 	.word	0x00012c7f
   12d9c:	00012c7f 	.word	0x00012c7f
   12da0:	00012db9 	.word	0x00012db9
   12da4:	00012c7f 	.word	0x00012c7f
   12da8:	00012e6d 	.word	0x00012e6d
   12dac:	00012c7f 	.word	0x00012c7f
   12db0:	00012c7f 	.word	0x00012c7f
   12db4:	00012e6d 	.word	0x00012e6d
			if (precision >= 0) {
   12db8:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
   12dbc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
   12dbe:	db35      	blt.n	12e2c <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
   12dc0:	4651      	mov	r1, sl
   12dc2:	4638      	mov	r0, r7
   12dc4:	f016 f860 	bl	28e88 <strnlen>
			bpe = bps + len;
   12dc8:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
   12dcc:	2f00      	cmp	r7, #0
   12dce:	f43f af56 	beq.w	12c7e <z_cbvprintf_impl+0x426>
		char sign = 0;
   12dd2:	2600      	movs	r6, #0
		if (conv->altform_0c) {
   12dd4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   12dd8:	f013 0210 	ands.w	r2, r3, #16
   12ddc:	9205      	str	r2, [sp, #20]
   12dde:	f000 8093 	beq.w	12f08 <z_cbvprintf_impl+0x6b0>
			nj_len += 2U;
   12de2:	3002      	adds	r0, #2
		if (conv->pad_fp) {
   12de4:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
   12de6:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
   12de8:	bf48      	it	mi
   12dea:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
   12dec:	9204      	str	r2, [sp, #16]
   12dee:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
   12df0:	bf48      	it	mi
   12df2:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
   12df4:	f1b8 0f00 	cmp.w	r8, #0
   12df8:	f340 80a0 	ble.w	12f3c <z_cbvprintf_impl+0x6e4>
			if (!conv->flag_dash) {
   12dfc:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
   12e00:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
   12e04:	f3c2 0380 	ubfx	r3, r2, #2, #1
   12e08:	0750      	lsls	r0, r2, #29
   12e0a:	9306      	str	r3, [sp, #24]
   12e0c:	f100 8096 	bmi.w	12f3c <z_cbvprintf_impl+0x6e4>
				if (conv->flag_zero) {
   12e10:	0651      	lsls	r1, r2, #25
   12e12:	f140 8089 	bpl.w	12f28 <z_cbvprintf_impl+0x6d0>
					if (sign != 0) {
   12e16:	b13e      	cbz	r6, 12e28 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
   12e18:	4659      	mov	r1, fp
   12e1a:	4630      	mov	r0, r6
   12e1c:	47c8      	blx	r9
   12e1e:	2800      	cmp	r0, #0
   12e20:	db7f      	blt.n	12f22 <z_cbvprintf_impl+0x6ca>
   12e22:	9b06      	ldr	r3, [sp, #24]
   12e24:	3501      	adds	r5, #1
   12e26:	461e      	mov	r6, r3
					pad = '0';
   12e28:	2230      	movs	r2, #48	; 0x30
   12e2a:	e07e      	b.n	12f2a <z_cbvprintf_impl+0x6d2>
				len = strlen(bps);
   12e2c:	4638      	mov	r0, r7
   12e2e:	f016 f824 	bl	28e7a <strlen>
   12e32:	e7c9      	b.n	12dc8 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   12e34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12e36:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
   12e3a:	2600      	movs	r6, #0
			bps = buf;
   12e3c:	af08      	add	r7, sp, #32
			bpe = buf + 1;
   12e3e:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
   12e42:	2001      	movs	r0, #1
   12e44:	e7c6      	b.n	12dd4 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
   12e46:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
   12e48:	bf5c      	itt	pl
   12e4a:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
   12e4e:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
   12e50:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
   12e54:	bf48      	it	mi
   12e56:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
   12e58:	2b00      	cmp	r3, #0
   12e5a:	f6bf af62 	bge.w	12d22 <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
   12e5e:	4252      	negs	r2, r2
   12e60:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   12e64:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
   12e68:	262d      	movs	r6, #45	; 0x2d
   12e6a:	e75a      	b.n	12d22 <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
   12e6c:	2600      	movs	r6, #0
   12e6e:	e758      	b.n	12d22 <z_cbvprintf_impl+0x4ca>
		char sign = 0;
   12e70:	2600      	movs	r6, #0
				conv->flag_zero = false;
   12e72:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
   12e76:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   12e7a:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
   12e7c:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   12e80:	459a      	cmp	sl, r3
				conv->flag_zero = false;
   12e82:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
   12e86:	f67f af5a 	bls.w	12d3e <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
   12e8a:	ebaa 0303 	sub.w	r3, sl, r3
   12e8e:	9311      	str	r3, [sp, #68]	; 0x44
   12e90:	e755      	b.n	12d3e <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
   12e92:	980e      	ldr	r0, [sp, #56]	; 0x38
   12e94:	b390      	cbz	r0, 12efc <z_cbvprintf_impl+0x6a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   12e96:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   12e9a:	9300      	str	r3, [sp, #0]
   12e9c:	aa10      	add	r2, sp, #64	; 0x40
   12e9e:	ab08      	add	r3, sp, #32
   12ea0:	2100      	movs	r1, #0
   12ea2:	f014 fe4b 	bl	27b3c <encode_uint>
				conv->altform_0c = true;
   12ea6:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
   12eaa:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   12eae:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   12eb2:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
   12eb6:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
   12eba:	4607      	mov	r7, r0
				conv->altform_0c = true;
   12ebc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
   12ec0:	dad6      	bge.n	12e70 <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
   12ec2:	2800      	cmp	r0, #0
   12ec4:	f43f aedb 	beq.w	12c7e <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
   12ec8:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   12ecc:	1a18      	subs	r0, r3, r0
		char sign = 0;
   12ece:	2600      	movs	r6, #0
   12ed0:	469a      	mov	sl, r3
   12ed2:	e77f      	b.n	12dd4 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
   12ed4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
   12ed6:	2907      	cmp	r1, #7
   12ed8:	f63f aed1 	bhi.w	12c7e <z_cbvprintf_impl+0x426>
   12edc:	e8df f001 	tbb	[pc, r1]
   12ee0:	0c06040c 	.word	0x0c06040c
   12ee4:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
   12ee8:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
   12eea:	e6c8      	b.n	12c7e <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
   12eec:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
   12eee:	e6c6      	b.n	12c7e <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
   12ef0:	17ea      	asrs	r2, r5, #31
   12ef2:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
   12ef6:	e6c2      	b.n	12c7e <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   12ef8:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
   12efa:	e6c0      	b.n	12c7e <z_cbvprintf_impl+0x426>
   12efc:	4f2e      	ldr	r7, [pc, #184]	; (12fb8 <z_cbvprintf_impl+0x760>)
		char sign = 0;
   12efe:	4606      	mov	r6, r0
			bpe = bps + 5;
   12f00:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
   12f04:	2005      	movs	r0, #5
   12f06:	e765      	b.n	12dd4 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
   12f08:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
   12f0a:	bf48      	it	mi
   12f0c:	3001      	addmi	r0, #1
   12f0e:	e769      	b.n	12de4 <z_cbvprintf_impl+0x58c>
   12f10:	9307      	str	r3, [sp, #28]
					OUTC(pad);
   12f12:	4610      	mov	r0, r2
   12f14:	9206      	str	r2, [sp, #24]
   12f16:	4659      	mov	r1, fp
   12f18:	47c8      	blx	r9
   12f1a:	2800      	cmp	r0, #0
   12f1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   12f20:	da04      	bge.n	12f2c <z_cbvprintf_impl+0x6d4>
#undef OUTS
#undef OUTC
}
   12f22:	b015      	add	sp, #84	; 0x54
   12f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   12f28:	2220      	movs	r2, #32
					pad = '0';
   12f2a:	4643      	mov	r3, r8
				while (width-- > 0) {
   12f2c:	4619      	mov	r1, r3
   12f2e:	2900      	cmp	r1, #0
   12f30:	f103 33ff 	add.w	r3, r3, #4294967295
   12f34:	dcec      	bgt.n	12f10 <z_cbvprintf_impl+0x6b8>
   12f36:	4445      	add	r5, r8
   12f38:	1a6d      	subs	r5, r5, r1
   12f3a:	4698      	mov	r8, r3
		if (sign != 0) {
   12f3c:	b12e      	cbz	r6, 12f4a <z_cbvprintf_impl+0x6f2>
			OUTC(sign);
   12f3e:	4659      	mov	r1, fp
   12f40:	4630      	mov	r0, r6
   12f42:	47c8      	blx	r9
   12f44:	2800      	cmp	r0, #0
   12f46:	dbec      	blt.n	12f22 <z_cbvprintf_impl+0x6ca>
   12f48:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   12f4a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   12f4e:	06da      	lsls	r2, r3, #27
   12f50:	d401      	bmi.n	12f56 <z_cbvprintf_impl+0x6fe>
   12f52:	071b      	lsls	r3, r3, #28
   12f54:	d505      	bpl.n	12f62 <z_cbvprintf_impl+0x70a>
				OUTC('0');
   12f56:	4659      	mov	r1, fp
   12f58:	2030      	movs	r0, #48	; 0x30
   12f5a:	47c8      	blx	r9
   12f5c:	2800      	cmp	r0, #0
   12f5e:	dbe0      	blt.n	12f22 <z_cbvprintf_impl+0x6ca>
   12f60:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   12f62:	9b05      	ldr	r3, [sp, #20]
   12f64:	b133      	cbz	r3, 12f74 <z_cbvprintf_impl+0x71c>
				OUTC(conv->specifier);
   12f66:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   12f6a:	4659      	mov	r1, fp
   12f6c:	47c8      	blx	r9
   12f6e:	2800      	cmp	r0, #0
   12f70:	dbd7      	blt.n	12f22 <z_cbvprintf_impl+0x6ca>
   12f72:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   12f74:	9e04      	ldr	r6, [sp, #16]
   12f76:	442e      	add	r6, r5
   12f78:	e005      	b.n	12f86 <z_cbvprintf_impl+0x72e>
				OUTC('0');
   12f7a:	4659      	mov	r1, fp
   12f7c:	2030      	movs	r0, #48	; 0x30
   12f7e:	47c8      	blx	r9
   12f80:	2800      	cmp	r0, #0
   12f82:	dbce      	blt.n	12f22 <z_cbvprintf_impl+0x6ca>
   12f84:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   12f86:	1b73      	subs	r3, r6, r5
   12f88:	2b00      	cmp	r3, #0
   12f8a:	dcf6      	bgt.n	12f7a <z_cbvprintf_impl+0x722>
			OUTS(bps, bpe);
   12f8c:	4653      	mov	r3, sl
   12f8e:	463a      	mov	r2, r7
   12f90:	4659      	mov	r1, fp
   12f92:	4648      	mov	r0, r9
   12f94:	f014 fe18 	bl	27bc8 <outs>
   12f98:	2800      	cmp	r0, #0
   12f9a:	dbc2      	blt.n	12f22 <z_cbvprintf_impl+0x6ca>
   12f9c:	4405      	add	r5, r0
		while (width > 0) {
   12f9e:	44a8      	add	r8, r5
   12fa0:	eba8 0305 	sub.w	r3, r8, r5
   12fa4:	2b00      	cmp	r3, #0
   12fa6:	f77f ae6a 	ble.w	12c7e <z_cbvprintf_impl+0x426>
			OUTC(' ');
   12faa:	4659      	mov	r1, fp
   12fac:	2020      	movs	r0, #32
   12fae:	47c8      	blx	r9
   12fb0:	2800      	cmp	r0, #0
   12fb2:	dbb6      	blt.n	12f22 <z_cbvprintf_impl+0x6ca>
   12fb4:	3501      	adds	r5, #1
			--width;
   12fb6:	e7f3      	b.n	12fa0 <z_cbvprintf_impl+0x748>
   12fb8:	0002db6b 	.word	0x0002db6b

00012fbc <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   12fbc:	b508      	push	{r3, lr}
   12fbe:	4604      	mov	r4, r0
	__asm__ volatile(
   12fc0:	f04f 0240 	mov.w	r2, #64	; 0x40
   12fc4:	f3ef 8311 	mrs	r3, BASEPRI
   12fc8:	f382 8812 	msr	BASEPRI_MAX, r2
   12fcc:	f3bf 8f6f 	isb	sy
	sys_cache_instr_disable();
#endif /* CONFIG_ICACHE */
#endif /* CONFIG_ARCH_CACHE */

	if (IS_ENABLED(CONFIG_SYSTEM_TIMER_HAS_DISABLE_SUPPORT)) {
		sys_clock_disable();
   12fd0:	f00d fbee 	bl	207b0 <sys_clock_disable>
	}

	sys_arch_reboot(type);
   12fd4:	4620      	mov	r0, r4
   12fd6:	f002 fce3 	bl	159a0 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   12fda:	4803      	ldr	r0, [pc, #12]	; (12fe8 <sys_reboot+0x2c>)
   12fdc:	f014 fadd 	bl	2759a <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   12fe0:	f001 fe66 	bl	14cb0 <arch_cpu_idle>
   12fe4:	e7fc      	b.n	12fe0 <sys_reboot+0x24>
   12fe6:	bf00      	nop
   12fe8:	0002db71 	.word	0x0002db71

00012fec <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   12fec:	f00e bd94 	b.w	21b18 <SystemInit>

00012ff0 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
   12ff0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   12ff4:	460f      	mov	r7, r1
   12ff6:	4606      	mov	r6, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   12ff8:	2108      	movs	r1, #8
   12ffa:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

	*addr -= ate_size;
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
   12ffc:	f8df 9050 	ldr.w	r9, [pc, #80]	; 13050 <nvs_recover_last_ate+0x60>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   13000:	f015 f8eb 	bl	281da <nvs_al_size.isra.0>
	*addr -= ate_size;
   13004:	683c      	ldr	r4, [r7, #0]
   13006:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   13008:	4680      	mov	r8, r0
	*addr -= ate_size;
   1300a:	603c      	str	r4, [r7, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
   1300c:	ea04 0509 	and.w	r5, r4, r9
	while (ate_end_addr > data_end_addr) {
   13010:	42ac      	cmp	r4, r5
   13012:	d803      	bhi.n	1301c <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
   13014:	2000      	movs	r0, #0
}
   13016:	b003      	add	sp, #12
   13018:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1301c:	2308      	movs	r3, #8
   1301e:	466a      	mov	r2, sp
   13020:	4621      	mov	r1, r4
   13022:	4630      	mov	r0, r6
   13024:	f015 f849 	bl	280ba <nvs_flash_rd>
		if (rc) {
   13028:	2800      	cmp	r0, #0
   1302a:	d1f4      	bne.n	13016 <nvs_recover_last_ate+0x26>
		if (nvs_ate_valid(fs, &end_ate)) {
   1302c:	4669      	mov	r1, sp
   1302e:	4630      	mov	r0, r6
   13030:	f015 f8dd 	bl	281ee <nvs_ate_valid>
   13034:	b140      	cbz	r0, 13048 <nvs_recover_last_ate+0x58>
			data_end_addr += end_ate.offset + end_ate.len;
   13036:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1303a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
   1303e:	603c      	str	r4, [r7, #0]
			data_end_addr &= ADDR_SECT_MASK;
   13040:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
   13044:	4413      	add	r3, r2
   13046:	441d      	add	r5, r3
		ate_end_addr -= ate_size;
   13048:	eba4 0408 	sub.w	r4, r4, r8
   1304c:	e7e0      	b.n	13010 <nvs_recover_last_ate+0x20>
   1304e:	bf00      	nop
   13050:	ffff0000 	.word	0xffff0000

00013054 <nvs_mount>:

	return 0;
}

int nvs_mount(struct nvs_fs *fs)
{
   13054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13058:	b08f      	sub	sp, #60	; 0x3c
   1305a:	4604      	mov	r4, r0
   1305c:	af00      	add	r7, sp, #0

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
   1305e:	f100 0814 	add.w	r8, r0, #20
	return z_impl_k_mutex_init(mutex);
   13062:	4640      	mov	r0, r8
   13064:	f018 fe92 	bl	2bd8c <z_impl_k_mutex_init>

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
   13068:	6aa0      	ldr	r0, [r4, #40]	; 0x28
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   1306a:	6883      	ldr	r3, [r0, #8]
   1306c:	68db      	ldr	r3, [r3, #12]
   1306e:	4798      	blx	r3
   13070:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
   13072:	b988      	cbnz	r0, 13098 <nvs_mount+0x44>
		LOG_ERR("Could not obtain flash parameters");
   13074:	4b8d      	ldr	r3, [pc, #564]	; (132ac <nvs_mount+0x258>)

	write_block_size = flash_get_write_block_size(fs->flash_device);

	/* check that the write block size is supported */
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
		LOG_ERR("Unsupported write block size");
   13076:	637b      	str	r3, [r7, #52]	; 0x34
   13078:	2302      	movs	r3, #2
   1307a:	488d      	ldr	r0, [pc, #564]	; (132b0 <nvs_mount+0x25c>)
   1307c:	633b      	str	r3, [r7, #48]	; 0x30
   1307e:	f107 0230 	add.w	r2, r7, #48	; 0x30
   13082:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EINVAL;
   13086:	f06f 0515 	mvn.w	r5, #21
		LOG_ERR("Unsupported write block size");
   1308a:	f015 f8a3 	bl	281d4 <z_log_msg_static_create.constprop.0>
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
   1308e:	4628      	mov	r0, r5
   13090:	373c      	adds	r7, #60	; 0x3c
   13092:	46bd      	mov	sp, r7
   13094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	write_block_size = flash_get_write_block_size(fs->flash_device);
   13098:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
   1309a:	6883      	ldr	r3, [r0, #8]
   1309c:	68db      	ldr	r3, [r3, #12]
   1309e:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
   130a0:	6803      	ldr	r3, [r0, #0]
   130a2:	3b01      	subs	r3, #1
   130a4:	2b1f      	cmp	r3, #31
   130a6:	d901      	bls.n	130ac <nvs_mount+0x58>
		LOG_ERR("Unsupported write block size");
   130a8:	4b82      	ldr	r3, [pc, #520]	; (132b4 <nvs_mount+0x260>)
   130aa:	e7e4      	b.n	13076 <nvs_mount+0x22>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
   130ac:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   130ae:	6821      	ldr	r1, [r4, #0]
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   130b0:	f107 0214 	add.w	r2, r7, #20
   130b4:	f018 faf9 	bl	2b6aa <z_impl_flash_get_page_info_by_offs>
	if (rc) {
   130b8:	b108      	cbz	r0, 130be <nvs_mount+0x6a>
		LOG_ERR("Unable to get page info");
   130ba:	4b7f      	ldr	r3, [pc, #508]	; (132b8 <nvs_mount+0x264>)
   130bc:	e7db      	b.n	13076 <nvs_mount+0x22>
	if (!fs->sector_size || fs->sector_size % info.size) {
   130be:	89a5      	ldrh	r5, [r4, #12]
   130c0:	b12d      	cbz	r5, 130ce <nvs_mount+0x7a>
   130c2:	69bb      	ldr	r3, [r7, #24]
   130c4:	fbb5 f2f3 	udiv	r2, r5, r3
   130c8:	fb03 5512 	mls	r5, r3, r2, r5
   130cc:	b10d      	cbz	r5, 130d2 <nvs_mount+0x7e>
		LOG_ERR("Invalid sector size");
   130ce:	4b7b      	ldr	r3, [pc, #492]	; (132bc <nvs_mount+0x268>)
   130d0:	e7d1      	b.n	13076 <nvs_mount+0x22>
	if (fs->sector_count < 2) {
   130d2:	89e3      	ldrh	r3, [r4, #14]
   130d4:	2b01      	cmp	r3, #1
   130d6:	d801      	bhi.n	130dc <nvs_mount+0x88>
		LOG_ERR("Configuration error - sector count");
   130d8:	4b79      	ldr	r3, [pc, #484]	; (132c0 <nvs_mount+0x26c>)
   130da:	e7cc      	b.n	13076 <nvs_mount+0x22>
	uint8_t erase_value = fs->flash_parameters->erase_value;
   130dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
   130de:	603d      	str	r5, [r7, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
   130e0:	f893 a004 	ldrb.w	sl, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   130e4:	f04f 33ff 	mov.w	r3, #4294967295
   130e8:	f04f 32ff 	mov.w	r2, #4294967295
   130ec:	4640      	mov	r0, r8
   130ee:	f010 f827 	bl	23140 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   130f2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   130f4:	2108      	movs	r1, #8
   130f6:	f015 f870 	bl	281da <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
   130fa:	46a9      	mov	r9, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   130fc:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
   130fe:	89e3      	ldrh	r3, [r4, #14]
   13100:	fa1f fb85 	uxth.w	fp, r5
   13104:	455b      	cmp	r3, fp
   13106:	d808      	bhi.n	1311a <nvs_mount+0xc6>
	if (closed_sectors == fs->sector_count) {
   13108:	89e3      	ldrh	r3, [r4, #14]
   1310a:	454b      	cmp	r3, r9
   1310c:	d123      	bne.n	13156 <nvs_mount+0x102>
	return z_impl_k_mutex_unlock(mutex);
   1310e:	4640      	mov	r0, r8
   13110:	f010 f890 	bl	23234 <z_impl_k_mutex_unlock>
		rc = -EDEADLK;
   13114:	f06f 052c 	mvn.w	r5, #44	; 0x2c
   13118:	e7b9      	b.n	1308e <nvs_mount+0x3a>
		       (uint16_t)(fs->sector_size - ate_size);
   1311a:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
   1311c:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
   1311e:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
   13120:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   13124:	4652      	mov	r2, sl
   13126:	2308      	movs	r3, #8
   13128:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
   1312a:	6039      	str	r1, [r7, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   1312c:	f015 f80a 	bl	28144 <nvs_flash_cmp_const>
		if (rc) {
   13130:	b178      	cbz	r0, 13152 <nvs_mount+0xfe>
			nvs_sector_advance(fs, &addr);
   13132:	4639      	mov	r1, r7
   13134:	4620      	mov	r0, r4
   13136:	f014 ffce 	bl	280d6 <nvs_sector_advance>
			closed_sectors++;
   1313a:	f109 0901 	add.w	r9, r9, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   1313e:	6839      	ldr	r1, [r7, #0]
   13140:	2308      	movs	r3, #8
   13142:	4652      	mov	r2, sl
   13144:	4620      	mov	r0, r4
			closed_sectors++;
   13146:	fa1f f989 	uxth.w	r9, r9
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   1314a:	f014 fffb 	bl	28144 <nvs_flash_cmp_const>
			if (!rc) {
   1314e:	2800      	cmp	r0, #0
   13150:	d0da      	beq.n	13108 <nvs_mount+0xb4>
	for (i = 0; i < fs->sector_count; i++) {
   13152:	3501      	adds	r5, #1
   13154:	e7d3      	b.n	130fe <nvs_mount+0xaa>
	if (i == fs->sector_count) {
   13156:	455b      	cmp	r3, fp
   13158:	d10b      	bne.n	13172 <nvs_mount+0x11e>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
   1315a:	6839      	ldr	r1, [r7, #0]
   1315c:	2308      	movs	r3, #8
   1315e:	4652      	mov	r2, sl
   13160:	1b89      	subs	r1, r1, r6
   13162:	4620      	mov	r0, r4
   13164:	f014 ffee 	bl	28144 <nvs_flash_cmp_const>
		if (!rc) {
   13168:	b918      	cbnz	r0, 13172 <nvs_mount+0x11e>
			nvs_sector_advance(fs, &addr);
   1316a:	4639      	mov	r1, r7
   1316c:	4620      	mov	r0, r4
   1316e:	f014 ffb2 	bl	280d6 <nvs_sector_advance>
	rc = nvs_recover_last_ate(fs, &addr);
   13172:	4639      	mov	r1, r7
   13174:	4620      	mov	r0, r4
   13176:	f7ff ff3b 	bl	12ff0 <nvs_recover_last_ate>
	if (rc) {
   1317a:	4605      	mov	r5, r0
   1317c:	b118      	cbz	r0, 13186 <nvs_mount+0x132>
   1317e:	4640      	mov	r0, r8
   13180:	f010 f858 	bl	23234 <z_impl_k_mutex_unlock>
	if (rc) {
   13184:	e783      	b.n	1308e <nvs_mount+0x3a>
	fs->ate_wra = addr;
   13186:	683b      	ldr	r3, [r7, #0]
   13188:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
   1318a:	ea4f 4913 	mov.w	r9, r3, lsr #16
   1318e:	ea4f 4909 	mov.w	r9, r9, lsl #16
   13192:	f8c4 9008 	str.w	r9, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
   13196:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   1319a:	4299      	cmp	r1, r3
   1319c:	d30f      	bcc.n	131be <nvs_mount+0x16a>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1319e:	2308      	movs	r3, #8
   131a0:	1d3a      	adds	r2, r7, #4
   131a2:	4620      	mov	r0, r4
   131a4:	f014 ff89 	bl	280ba <nvs_flash_rd>
		if (rc) {
   131a8:	4605      	mov	r5, r0
   131aa:	2800      	cmp	r0, #0
   131ac:	d1e7      	bne.n	1317e <nvs_mount+0x12a>
   131ae:	1d3b      	adds	r3, r7, #4
		if (data8[i] != value) {
   131b0:	f813 2b01 	ldrb.w	r2, [r3], #1
   131b4:	4592      	cmp	sl, r2
   131b6:	d144      	bne.n	13242 <nvs_mount+0x1ee>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   131b8:	3501      	adds	r5, #1
   131ba:	2d08      	cmp	r5, #8
   131bc:	d1f8      	bne.n	131b0 <nvs_mount+0x15c>
	addr = fs->ate_wra & ADDR_SECT_MASK;
   131be:	6863      	ldr	r3, [r4, #4]
   131c0:	0c1b      	lsrs	r3, r3, #16
   131c2:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
   131c4:	4639      	mov	r1, r7
   131c6:	4620      	mov	r0, r4
	addr = fs->ate_wra & ADDR_SECT_MASK;
   131c8:	603b      	str	r3, [r7, #0]
	nvs_sector_advance(fs, &addr);
   131ca:	f014 ff84 	bl	280d6 <nvs_sector_advance>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
   131ce:	89a3      	ldrh	r3, [r4, #12]
   131d0:	6839      	ldr	r1, [r7, #0]
   131d2:	4652      	mov	r2, sl
   131d4:	4620      	mov	r0, r4
   131d6:	f014 ffb5 	bl	28144 <nvs_flash_cmp_const>
	if (rc < 0) {
   131da:	1e05      	subs	r5, r0, #0
   131dc:	dbcf      	blt.n	1317e <nvs_mount+0x12a>
		addr = fs->ate_wra + ate_size;
   131de:	6863      	ldr	r3, [r4, #4]
	if (rc) {
   131e0:	f000 8082 	beq.w	132e8 <nvs_mount+0x294>
		addr = fs->ate_wra + ate_size;
   131e4:	eb06 0903 	add.w	r9, r6, r3
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   131e8:	f64f 7aff 	movw	sl, #65535	; 0xffff
   131ec:	89a3      	ldrh	r3, [r4, #12]
		addr = fs->ate_wra + ate_size;
   131ee:	f8c7 9000 	str.w	r9, [r7]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   131f2:	fa1f f289 	uxth.w	r2, r9
   131f6:	1b9b      	subs	r3, r3, r6
   131f8:	429a      	cmp	r2, r3
   131fa:	d33c      	bcc.n	13276 <nvs_mount+0x222>
		LOG_INF("No GC Done marker found: restarting gc");
   131fc:	4b31      	ldr	r3, [pc, #196]	; (132c4 <nvs_mount+0x270>)
   131fe:	637b      	str	r3, [r7, #52]	; 0x34
   13200:	2302      	movs	r3, #2
   13202:	482b      	ldr	r0, [pc, #172]	; (132b0 <nvs_mount+0x25c>)
   13204:	633b      	str	r3, [r7, #48]	; 0x30
   13206:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1320a:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   1320e:	f014 ffe1 	bl	281d4 <z_log_msg_static_create.constprop.0>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   13212:	4620      	mov	r0, r4
   13214:	6861      	ldr	r1, [r4, #4]
   13216:	f014 ffba 	bl	2818e <nvs_flash_erase_sector>
		if (rc) {
   1321a:	4605      	mov	r5, r0
   1321c:	2800      	cmp	r0, #0
   1321e:	d1ae      	bne.n	1317e <nvs_mount+0x12a>
		fs->ate_wra &= ADDR_SECT_MASK;
   13220:	6863      	ldr	r3, [r4, #4]
   13222:	4a29      	ldr	r2, [pc, #164]	; (132c8 <nvs_mount+0x274>)
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   13224:	89a1      	ldrh	r1, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
   13226:	4013      	ands	r3, r2
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   13228:	440b      	add	r3, r1
   1322a:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
   1322e:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
   13230:	4013      	ands	r3, r2
   13232:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   13234:	4620      	mov	r0, r4
   13236:	f015 f8bc 	bl	283b2 <nvs_gc>
			rc = nvs_flash_erase_sector(fs, addr);
   1323a:	4605      	mov	r5, r0
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   1323c:	2d00      	cmp	r5, #0
   1323e:	d06f      	beq.n	13320 <nvs_mount+0x2cc>
   13240:	e79d      	b.n	1317e <nvs_mount+0x12a>
		if (nvs_ate_valid(fs, &last_ate)) {
   13242:	1d39      	adds	r1, r7, #4
   13244:	4620      	mov	r0, r4
   13246:	f014 ffd2 	bl	281ee <nvs_ate_valid>
   1324a:	6862      	ldr	r2, [r4, #4]
   1324c:	b910      	cbnz	r0, 13254 <nvs_mount+0x200>
		fs->ate_wra -= ate_size;
   1324e:	1b92      	subs	r2, r2, r6
   13250:	6062      	str	r2, [r4, #4]
   13252:	e7a0      	b.n	13196 <nvs_mount+0x142>
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   13254:	893d      	ldrh	r5, [r7, #8]
   13256:	88f9      	ldrh	r1, [r7, #6]
   13258:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
   1325a:	f8c4 9008 	str.w	r9, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   1325e:	4429      	add	r1, r5
   13260:	f014 ffbb 	bl	281da <nvs_al_size.isra.0>
   13264:	4448      	add	r0, r9
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   13266:	4290      	cmp	r0, r2
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   13268:	60a0      	str	r0, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   1326a:	d1f0      	bne.n	1324e <nvs_mount+0x1fa>
   1326c:	2d00      	cmp	r5, #0
   1326e:	d0ee      	beq.n	1324e <nvs_mount+0x1fa>
				rc = -ESPIPE;
   13270:	f06f 051c 	mvn.w	r5, #28
   13274:	e09c      	b.n	133b0 <nvs_mount+0x35c>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   13276:	2308      	movs	r3, #8
   13278:	f107 020c 	add.w	r2, r7, #12
   1327c:	4649      	mov	r1, r9
   1327e:	4620      	mov	r0, r4
   13280:	f014 ff1b 	bl	280ba <nvs_flash_rd>
			if (rc) {
   13284:	4605      	mov	r5, r0
   13286:	2800      	cmp	r0, #0
   13288:	f47f af79 	bne.w	1317e <nvs_mount+0x12a>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
   1328c:	f107 010c 	add.w	r1, r7, #12
   13290:	4620      	mov	r0, r4
   13292:	f014 ffac 	bl	281ee <nvs_ate_valid>
   13296:	b130      	cbz	r0, 132a6 <nvs_mount+0x252>
   13298:	89bb      	ldrh	r3, [r7, #12]
   1329a:	4553      	cmp	r3, sl
   1329c:	d103      	bne.n	132a6 <nvs_mount+0x252>
			    (gc_done_ate.id == 0xffff) &&
   1329e:	8a3b      	ldrh	r3, [r7, #16]
   132a0:	2b00      	cmp	r3, #0
   132a2:	f000 808b 	beq.w	133bc <nvs_mount+0x368>
			addr += ate_size;
   132a6:	44b1      	add	r9, r6
   132a8:	e7a0      	b.n	131ec <nvs_mount+0x198>
   132aa:	bf00      	nop
   132ac:	0002dbae 	.word	0x0002dbae
   132b0:	0002cba4 	.word	0x0002cba4
   132b4:	0002dbd0 	.word	0x0002dbd0
   132b8:	0002dbed 	.word	0x0002dbed
   132bc:	0002dc05 	.word	0x0002dc05
   132c0:	0002dc19 	.word	0x0002dc19
   132c4:	0002dc76 	.word	0x0002dc76
   132c8:	ffff0000 	.word	0xffff0000
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
   132cc:	1a5b      	subs	r3, r3, r1
   132ce:	4652      	mov	r2, sl
   132d0:	4620      	mov	r0, r4
   132d2:	f014 ff37 	bl	28144 <nvs_flash_cmp_const>
		if (rc < 0) {
   132d6:	1e05      	subs	r5, r0, #0
   132d8:	f6ff af51 	blt.w	1317e <nvs_mount+0x12a>
		if (!rc) {
   132dc:	d008      	beq.n	132f0 <nvs_mount+0x29c>
		fs->data_wra += fs->flash_parameters->write_block_size;
   132de:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   132e0:	68a3      	ldr	r3, [r4, #8]
   132e2:	6812      	ldr	r2, [r2, #0]
   132e4:	4413      	add	r3, r2
   132e6:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
   132e8:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   132ec:	428b      	cmp	r3, r1
   132ee:	d8ed      	bhi.n	132cc <nvs_mount+0x278>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   132f0:	6861      	ldr	r1, [r4, #4]
   132f2:	89a3      	ldrh	r3, [r4, #12]
   132f4:	eb01 0246 	add.w	r2, r1, r6, lsl #1
   132f8:	429a      	cmp	r2, r3
   132fa:	d19f      	bne.n	1323c <nvs_mount+0x1e8>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   132fc:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 133ec <nvs_mount+0x398>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   13300:	68a3      	ldr	r3, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   13302:	ea01 0209 	and.w	r2, r1, r9
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   13306:	4293      	cmp	r3, r2
   13308:	d098      	beq.n	1323c <nvs_mount+0x1e8>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   1330a:	4620      	mov	r0, r4
   1330c:	f014 ff3f 	bl	2818e <nvs_flash_erase_sector>
		if (rc) {
   13310:	4605      	mov	r5, r0
   13312:	2800      	cmp	r0, #0
   13314:	f47f af33 	bne.w	1317e <nvs_mount+0x12a>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   13318:	6863      	ldr	r3, [r4, #4]
   1331a:	ea03 0309 	and.w	r3, r3, r9
   1331e:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
   13320:	89a3      	ldrh	r3, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   13322:	88a2      	ldrh	r2, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
   13324:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   13328:	429a      	cmp	r2, r3
   1332a:	d03d      	beq.n	133a8 <nvs_mount+0x354>
   1332c:	4640      	mov	r0, r8
   1332e:	f00f ff81 	bl	23234 <z_impl_k_mutex_unlock>
	fs->ready = true;
   13332:	2301      	movs	r3, #1
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   13334:	46e8      	mov	r8, sp
   13336:	b088      	sub	sp, #32
	fs->ready = true;
   13338:	7423      	strb	r3, [r4, #16]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   1333a:	89e2      	ldrh	r2, [r4, #14]
   1333c:	89a3      	ldrh	r3, [r4, #12]
   1333e:	466d      	mov	r5, sp
   13340:	492b      	ldr	r1, [pc, #172]	; (133f0 <nvs_mount+0x39c>)
   13342:	61eb      	str	r3, [r5, #28]
   13344:	462e      	mov	r6, r5
   13346:	f04f 0904 	mov.w	r9, #4
   1334a:	e9c5 1205 	strd	r1, r2, [r5, #20]
   1334e:	f846 9f10 	str.w	r9, [r6, #16]!
   13352:	4828      	ldr	r0, [pc, #160]	; (133f4 <nvs_mount+0x3a0>)
   13354:	4632      	mov	r2, r6
   13356:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
   1335a:	f014 ff3b 	bl	281d4 <z_log_msg_static_create.constprop.0>
   1335e:	46c5      	mov	sp, r8
	LOG_INF("alloc wra: %d, %x",
   13360:	6863      	ldr	r3, [r4, #4]
   13362:	46ad      	mov	sp, r5
   13364:	4a24      	ldr	r2, [pc, #144]	; (133f8 <nvs_mount+0x3a4>)
   13366:	616a      	str	r2, [r5, #20]
   13368:	0c1a      	lsrs	r2, r3, #16
   1336a:	b29b      	uxth	r3, r3
   1336c:	61aa      	str	r2, [r5, #24]
   1336e:	61eb      	str	r3, [r5, #28]
   13370:	4820      	ldr	r0, [pc, #128]	; (133f4 <nvs_mount+0x3a0>)
   13372:	f8c5 9010 	str.w	r9, [r5, #16]
   13376:	4632      	mov	r2, r6
   13378:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
   1337c:	f014 ff2a 	bl	281d4 <z_log_msg_static_create.constprop.0>
   13380:	46c5      	mov	sp, r8
	LOG_INF("data wra: %d, %x",
   13382:	68a3      	ldr	r3, [r4, #8]
   13384:	46ad      	mov	sp, r5
   13386:	4a1d      	ldr	r2, [pc, #116]	; (133fc <nvs_mount+0x3a8>)
   13388:	616a      	str	r2, [r5, #20]
   1338a:	0c1a      	lsrs	r2, r3, #16
   1338c:	b29b      	uxth	r3, r3
   1338e:	61aa      	str	r2, [r5, #24]
   13390:	61eb      	str	r3, [r5, #28]
   13392:	f8c5 9010 	str.w	r9, [r5, #16]
   13396:	4817      	ldr	r0, [pc, #92]	; (133f4 <nvs_mount+0x3a0>)
   13398:	4632      	mov	r2, r6
   1339a:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
   1339e:	f014 ff19 	bl	281d4 <z_log_msg_static_create.constprop.0>
	return 0;
   133a2:	2500      	movs	r5, #0
   133a4:	46c5      	mov	sp, r8
   133a6:	e672      	b.n	1308e <nvs_mount+0x3a>
		rc = nvs_add_gc_done_ate(fs);
   133a8:	4620      	mov	r0, r4
   133aa:	f014 ffed 	bl	28388 <nvs_add_gc_done_ate>
   133ae:	4605      	mov	r5, r0
   133b0:	4640      	mov	r0, r8
   133b2:	f00f ff3f 	bl	23234 <z_impl_k_mutex_unlock>
	if (rc) {
   133b6:	2d00      	cmp	r5, #0
   133b8:	d0bb      	beq.n	13332 <nvs_mount+0x2de>
   133ba:	e668      	b.n	1308e <nvs_mount+0x3a>
			LOG_INF("GC Done marker found");
   133bc:	4b10      	ldr	r3, [pc, #64]	; (13400 <nvs_mount+0x3ac>)
   133be:	637b      	str	r3, [r7, #52]	; 0x34
   133c0:	2302      	movs	r3, #2
   133c2:	633b      	str	r3, [r7, #48]	; 0x30
   133c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
   133c8:	480a      	ldr	r0, [pc, #40]	; (133f4 <nvs_mount+0x3a0>)
   133ca:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   133ce:	f014 ff01 	bl	281d4 <z_log_msg_static_create.constprop.0>
			addr = fs->ate_wra & ADDR_SECT_MASK;
   133d2:	6863      	ldr	r3, [r4, #4]
   133d4:	0c1b      	lsrs	r3, r3, #16
   133d6:	041b      	lsls	r3, r3, #16
			nvs_sector_advance(fs, &addr);
   133d8:	4639      	mov	r1, r7
   133da:	4620      	mov	r0, r4
			addr = fs->ate_wra & ADDR_SECT_MASK;
   133dc:	603b      	str	r3, [r7, #0]
			nvs_sector_advance(fs, &addr);
   133de:	f014 fe7a 	bl	280d6 <nvs_sector_advance>
			rc = nvs_flash_erase_sector(fs, addr);
   133e2:	6839      	ldr	r1, [r7, #0]
   133e4:	4620      	mov	r0, r4
   133e6:	f014 fed2 	bl	2818e <nvs_flash_erase_sector>
   133ea:	e726      	b.n	1323a <nvs_mount+0x1e6>
   133ec:	ffff0000 	.word	0xffff0000
   133f0:	0002dc3c 	.word	0x0002dc3c
   133f4:	0002cba4 	.word	0x0002cba4
   133f8:	0002dc53 	.word	0x0002dc53
   133fc:	0002dc65 	.word	0x0002dc65
   13400:	0002dc9d 	.word	0x0002dc9d

00013404 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
   13404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13408:	461d      	mov	r5, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
   1340a:	7c03      	ldrb	r3, [r0, #16]
{
   1340c:	b08d      	sub	sp, #52	; 0x34
   1340e:	4604      	mov	r4, r0
   13410:	4689      	mov	r9, r1
   13412:	4690      	mov	r8, r2
	if (!fs->ready) {
   13414:	b97b      	cbnz	r3, 13436 <nvs_write+0x32>
		LOG_ERR("NVS not initialized");
   13416:	4b66      	ldr	r3, [pc, #408]	; (135b0 <nvs_write+0x1ac>)
   13418:	930b      	str	r3, [sp, #44]	; 0x2c
   1341a:	4866      	ldr	r0, [pc, #408]	; (135b4 <nvs_write+0x1b0>)
   1341c:	2302      	movs	r3, #2
   1341e:	aa0a      	add	r2, sp, #40	; 0x28
   13420:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EACCES;
   13424:	f06f 060c 	mvn.w	r6, #12
		LOG_ERR("NVS not initialized");
   13428:	930a      	str	r3, [sp, #40]	; 0x28
   1342a:	f014 fed3 	bl	281d4 <z_log_msg_static_create.constprop.0>
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
   1342e:	4630      	mov	r0, r6
   13430:	b00d      	add	sp, #52	; 0x34
   13432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   13436:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   13438:	2108      	movs	r1, #8
   1343a:	4610      	mov	r0, r2
   1343c:	f014 fecd 	bl	281da <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
   13440:	4629      	mov	r1, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   13442:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
   13444:	4610      	mov	r0, r2
   13446:	f014 fec8 	bl	281da <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   1344a:	89a3      	ldrh	r3, [r4, #12]
   1344c:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
   13450:	42ab      	cmp	r3, r5
	data_size = nvs_al_size(fs, len);
   13452:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   13454:	f0c0 80a9 	bcc.w	135aa <nvs_write+0x1a6>
   13458:	b11d      	cbz	r5, 13462 <nvs_write+0x5e>
	    ((len > 0) && (data == NULL))) {
   1345a:	f1b8 0f00 	cmp.w	r8, #0
   1345e:	f000 80a4 	beq.w	135aa <nvs_write+0x1a6>
	wlk_addr = fs->ate_wra;
   13462:	6863      	ldr	r3, [r4, #4]
   13464:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   13466:	aa04      	add	r2, sp, #16
   13468:	a903      	add	r1, sp, #12
   1346a:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   1346c:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   13470:	f014 fef5 	bl	2825e <nvs_prev_ate>
		if (rc) {
   13474:	4606      	mov	r6, r0
   13476:	2800      	cmp	r0, #0
   13478:	d1d9      	bne.n	1342e <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   1347a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   1347e:	454b      	cmp	r3, r9
   13480:	d005      	beq.n	1348e <nvs_write+0x8a>
		if (wlk_addr == fs->ate_wra) {
   13482:	6862      	ldr	r2, [r4, #4]
   13484:	9b03      	ldr	r3, [sp, #12]
   13486:	429a      	cmp	r2, r3
   13488:	d1ed      	bne.n	13466 <nvs_write+0x62>
		if (len == 0) {
   1348a:	b9e5      	cbnz	r5, 134c6 <nvs_write+0xc2>
   1348c:	e7cf      	b.n	1342e <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   1348e:	a904      	add	r1, sp, #16
   13490:	4620      	mov	r0, r4
   13492:	f014 feac 	bl	281ee <nvs_ate_valid>
   13496:	2800      	cmp	r0, #0
   13498:	d0f3      	beq.n	13482 <nvs_write+0x7e>
		rd_addr += wlk_ate.offset;
   1349a:	f8bd 0012 	ldrh.w	r0, [sp, #18]
			if (wlk_ate.len == 0U) {
   1349e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
		if (len == 0) {
   134a2:	b175      	cbz	r5, 134c2 <nvs_write+0xbe>
		} else if (len == wlk_ate.len) {
   134a4:	42ab      	cmp	r3, r5
   134a6:	d10e      	bne.n	134c6 <nvs_write+0xc2>
		rd_addr &= ADDR_SECT_MASK;
   134a8:	ea4f 411b 	mov.w	r1, fp, lsr #16
   134ac:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
   134ae:	4401      	add	r1, r0
   134b0:	462b      	mov	r3, r5
   134b2:	4642      	mov	r2, r8
   134b4:	4620      	mov	r0, r4
   134b6:	f014 fe1b 	bl	280f0 <nvs_flash_block_cmp>
			if (rc <= 0) {
   134ba:	2800      	cmp	r0, #0
   134bc:	dc03      	bgt.n	134c6 <nvs_write+0xc2>
   134be:	4606      	mov	r6, r0
   134c0:	e7b5      	b.n	1342e <nvs_write+0x2a>
			if (wlk_ate.len == 0U) {
   134c2:	2b00      	cmp	r3, #0
   134c4:	d0b3      	beq.n	1342e <nvs_write+0x2a>
	if (data_size) {
   134c6:	2f00      	cmp	r7, #0
   134c8:	d13e      	bne.n	13548 <nvs_write+0x144>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   134ca:	f104 0314 	add.w	r3, r4, #20
   134ce:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   134d0:	f04f 32ff 	mov.w	r2, #4294967295
   134d4:	f04f 33ff 	mov.w	r3, #4294967295
   134d8:	f104 0014 	add.w	r0, r4, #20
   134dc:	f00f fe30 	bl	23140 <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
   134e0:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 135b8 <nvs_write+0x1b4>
		if (gc_count == fs->sector_count) {
   134e4:	89e3      	ldrh	r3, [r4, #14]
   134e6:	429e      	cmp	r6, r3
   134e8:	d05c      	beq.n	135a4 <nvs_write+0x1a0>
		if (fs->ate_wra >= (fs->data_wra + required_space)) {
   134ea:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   134ee:	18f9      	adds	r1, r7, r3
   134f0:	428a      	cmp	r2, r1
   134f2:	d32c      	bcc.n	1354e <nvs_write+0x14a>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   134f4:	f8ad 301a 	strh.w	r3, [sp, #26]
	nvs_ate_crc8_update(&entry);
   134f8:	a806      	add	r0, sp, #24
	entry.part = 0xff;
   134fa:	23ff      	movs	r3, #255	; 0xff
   134fc:	f88d 301e 	strb.w	r3, [sp, #30]
	entry.id = id;
   13500:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.len = (uint16_t)len;
   13504:	f8ad 501c 	strh.w	r5, [sp, #28]
	nvs_ate_crc8_update(&entry);
   13508:	f014 fe5b 	bl	281c2 <nvs_ate_crc8_update>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   1350c:	68a1      	ldr	r1, [r4, #8]
   1350e:	462b      	mov	r3, r5
   13510:	4642      	mov	r2, r8
   13512:	4620      	mov	r0, r4
   13514:	f014 feed 	bl	282f2 <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
   13518:	4629      	mov	r1, r5
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   1351a:	4682      	mov	sl, r0
	fs->data_wra += nvs_al_size(fs, len);
   1351c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1351e:	f014 fe5c 	bl	281da <nvs_al_size.isra.0>
   13522:	68a2      	ldr	r2, [r4, #8]
   13524:	4402      	add	r2, r0
   13526:	60a2      	str	r2, [r4, #8]
	if (rc) {
   13528:	f1ba 0f00 	cmp.w	sl, #0
   1352c:	d107      	bne.n	1353e <nvs_write+0x13a>
	rc = nvs_flash_ate_wrt(fs, &entry);
   1352e:	a906      	add	r1, sp, #24
   13530:	4620      	mov	r0, r4
   13532:	f014 ff18 	bl	28366 <nvs_flash_ate_wrt>
	rc = len;
   13536:	2800      	cmp	r0, #0
   13538:	bf14      	ite	ne
   1353a:	4682      	movne	sl, r0
   1353c:	46aa      	moveq	sl, r5
	return z_impl_k_mutex_unlock(mutex);
   1353e:	9801      	ldr	r0, [sp, #4]
   13540:	f00f fe78 	bl	23234 <z_impl_k_mutex_unlock>
	return rc;
   13544:	4656      	mov	r6, sl
   13546:	e772      	b.n	1342e <nvs_write+0x2a>
		required_space = data_size + ate_size;
   13548:	4457      	add	r7, sl
   1354a:	b2bf      	uxth	r7, r7
   1354c:	e7bd      	b.n	134ca <nvs_write+0xc6>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1354e:	2108      	movs	r1, #8
   13550:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   13552:	f014 fe42 	bl	281da <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
   13556:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1355a:	f8ad 3018 	strh.w	r3, [sp, #24]
	close_ate.len = 0U;
   1355e:	2300      	movs	r3, #0
   13560:	f8ad 301c 	strh.w	r3, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   13564:	1813      	adds	r3, r2, r0
   13566:	f8ad 301a 	strh.w	r3, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
   1356a:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
   1356c:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
   13570:	441a      	add	r2, r3
   13572:	1a10      	subs	r0, r2, r0
   13574:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   13576:	a806      	add	r0, sp, #24
   13578:	f014 fe23 	bl	281c2 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   1357c:	a906      	add	r1, sp, #24
   1357e:	4620      	mov	r0, r4
   13580:	f014 fef1 	bl	28366 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   13584:	1d21      	adds	r1, r4, #4
   13586:	4620      	mov	r0, r4
   13588:	f014 fda5 	bl	280d6 <nvs_sector_advance>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   1358c:	6863      	ldr	r3, [r4, #4]
   1358e:	ea03 030b 	and.w	r3, r3, fp
   13592:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   13594:	4620      	mov	r0, r4
   13596:	f014 ff0c 	bl	283b2 <nvs_gc>
		if (rc) {
   1359a:	4682      	mov	sl, r0
   1359c:	2800      	cmp	r0, #0
   1359e:	d1ce      	bne.n	1353e <nvs_write+0x13a>
		gc_count++;
   135a0:	3601      	adds	r6, #1
		if (gc_count == fs->sector_count) {
   135a2:	e79f      	b.n	134e4 <nvs_write+0xe0>
			rc = -ENOSPC;
   135a4:	f06f 0a1b 	mvn.w	sl, #27
   135a8:	e7c9      	b.n	1353e <nvs_write+0x13a>
		return -EINVAL;
   135aa:	f06f 0615 	mvn.w	r6, #21
   135ae:	e73e      	b.n	1342e <nvs_write+0x2a>
   135b0:	0002db9a 	.word	0x0002db9a
   135b4:	0002cba4 	.word	0x0002cba4
   135b8:	ffff0000 	.word	0xffff0000

000135bc <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   135bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   135c0:	461e      	mov	r6, r3
   135c2:	b088      	sub	sp, #32
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   135c4:	7c03      	ldrb	r3, [r0, #16]
{
   135c6:	f8bd 9040 	ldrh.w	r9, [sp, #64]	; 0x40
   135ca:	4604      	mov	r4, r0
   135cc:	460f      	mov	r7, r1
   135ce:	4690      	mov	r8, r2
	if (!fs->ready) {
   135d0:	b973      	cbnz	r3, 135f0 <nvs_read_hist+0x34>
		LOG_ERR("NVS not initialized");
   135d2:	4b2f      	ldr	r3, [pc, #188]	; (13690 <nvs_read_hist+0xd4>)
   135d4:	482f      	ldr	r0, [pc, #188]	; (13694 <nvs_read_hist+0xd8>)
   135d6:	9307      	str	r3, [sp, #28]
   135d8:	aa06      	add	r2, sp, #24
   135da:	2302      	movs	r3, #2
   135dc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   135e0:	9306      	str	r3, [sp, #24]
   135e2:	f014 fdf7 	bl	281d4 <z_log_msg_static_create.constprop.0>
		return -EACCES;
   135e6:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
   135ea:	b008      	add	sp, #32
   135ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   135f0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   135f2:	2108      	movs	r1, #8
   135f4:	f014 fdf1 	bl	281da <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
   135f8:	89a3      	ldrh	r3, [r4, #12]
   135fa:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
   135fe:	42b3      	cmp	r3, r6
   13600:	d343      	bcc.n	1368a <nvs_read_hist+0xce>
	wlk_addr = fs->ate_wra;
   13602:	f8d4 a004 	ldr.w	sl, [r4, #4]
   13606:	f8cd a004 	str.w	sl, [sp, #4]
	cnt_his = 0U;
   1360a:	2500      	movs	r5, #0
	while (cnt_his <= cnt) {
   1360c:	454d      	cmp	r5, r9
   1360e:	4651      	mov	r1, sl
		rd_addr = wlk_addr;
   13610:	f8dd a004 	ldr.w	sl, [sp, #4]
	while (cnt_his <= cnt) {
   13614:	d909      	bls.n	1362a <nvs_read_hist+0x6e>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   13616:	6863      	ldr	r3, [r4, #4]
   13618:	4553      	cmp	r3, sl
   1361a:	d11e      	bne.n	1365a <nvs_read_hist+0x9e>
   1361c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   13620:	42bb      	cmp	r3, r7
   13622:	d01a      	beq.n	1365a <nvs_read_hist+0x9e>
		return -ENOENT;
   13624:	f06f 0001 	mvn.w	r0, #1
   13628:	e7df      	b.n	135ea <nvs_read_hist+0x2e>
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   1362a:	aa02      	add	r2, sp, #8
   1362c:	a901      	add	r1, sp, #4
   1362e:	4620      	mov	r0, r4
   13630:	f014 fe15 	bl	2825e <nvs_prev_ate>
		if (rc) {
   13634:	2800      	cmp	r0, #0
   13636:	d1d8      	bne.n	135ea <nvs_read_hist+0x2e>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   13638:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1363c:	42bb      	cmp	r3, r7
   1363e:	d106      	bne.n	1364e <nvs_read_hist+0x92>
   13640:	a902      	add	r1, sp, #8
   13642:	4620      	mov	r0, r4
   13644:	f014 fdd3 	bl	281ee <nvs_ate_valid>
   13648:	b108      	cbz	r0, 1364e <nvs_read_hist+0x92>
			cnt_his++;
   1364a:	3501      	adds	r5, #1
   1364c:	b2ad      	uxth	r5, r5
		if (wlk_addr == fs->ate_wra) {
   1364e:	6862      	ldr	r2, [r4, #4]
   13650:	9b01      	ldr	r3, [sp, #4]
   13652:	429a      	cmp	r2, r3
   13654:	d1da      	bne.n	1360c <nvs_read_hist+0x50>
		rd_addr = wlk_addr;
   13656:	4651      	mov	r1, sl
   13658:	e7e0      	b.n	1361c <nvs_read_hist+0x60>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   1365a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   1365e:	2b00      	cmp	r3, #0
   13660:	d0e0      	beq.n	13624 <nvs_read_hist+0x68>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   13662:	45a9      	cmp	r9, r5
   13664:	d8de      	bhi.n	13624 <nvs_read_hist+0x68>
	rd_addr += wlk_ate.offset;
   13666:	f8bd 000a 	ldrh.w	r0, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
   1366a:	0c09      	lsrs	r1, r1, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   1366c:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
   1366e:	ea4f 4101 	mov.w	r1, r1, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   13672:	bf28      	it	cs
   13674:	4633      	movcs	r3, r6
   13676:	4401      	add	r1, r0
   13678:	4642      	mov	r2, r8
   1367a:	4620      	mov	r0, r4
   1367c:	f014 fd1d 	bl	280ba <nvs_flash_rd>
	if (rc) {
   13680:	2800      	cmp	r0, #0
   13682:	d1b2      	bne.n	135ea <nvs_read_hist+0x2e>
	return wlk_ate.len;
   13684:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   13688:	e7af      	b.n	135ea <nvs_read_hist+0x2e>
		return -EINVAL;
   1368a:	f06f 0015 	mvn.w	r0, #21
   1368e:	e7ac      	b.n	135ea <nvs_read_hist+0x2e>
   13690:	0002db9a 	.word	0x0002db9a
   13694:	0002cba4 	.word	0x0002cba4

00013698 <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
   13698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (mask_cpy) {
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   1369c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 136f8 <activate_foreach_backend+0x60>
{
   136a0:	4604      	mov	r4, r0
	while (mask_cpy) {
   136a2:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
   136a4:	f04f 0901 	mov.w	r9, #1
	while (mask_cpy) {
   136a8:	b914      	cbnz	r4, 136b0 <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
   136aa:	4638      	mov	r0, r7
   136ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
   136b0:	fa94 f5a4 	rbit	r5, r4
   136b4:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
   136b8:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   136bc:	012e      	lsls	r6, r5, #4
   136be:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
   136c2:	ea6f 0a03 	mvn.w	sl, r3
   136c6:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   136ca:	7b2b      	ldrb	r3, [r5, #12]
   136cc:	2b00      	cmp	r3, #0
   136ce:	d0eb      	beq.n	136a8 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
   136d0:	f858 3006 	ldr.w	r3, [r8, r6]
   136d4:	691b      	ldr	r3, [r3, #16]
   136d6:	b94b      	cbnz	r3, 136ec <activate_foreach_backend+0x54>
					   backend->cb->ctx,
   136d8:	4446      	add	r6, r8
			log_backend_enable(backend,
   136da:	2204      	movs	r2, #4
   136dc:	6873      	ldr	r3, [r6, #4]
   136de:	4628      	mov	r0, r5
   136e0:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
   136e2:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
   136e6:	f000 fa59 	bl	13b9c <log_backend_enable>
   136ea:	e7dd      	b.n	136a8 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
   136ec:	4628      	mov	r0, r5
   136ee:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   136f0:	2800      	cmp	r0, #0
   136f2:	d1d9      	bne.n	136a8 <activate_foreach_backend+0x10>
   136f4:	e7f0      	b.n	136d8 <activate_foreach_backend+0x40>
   136f6:	bf00      	nop
   136f8:	0002cc14 	.word	0x0002cc14

000136fc <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(void)
{
   136fc:	b530      	push	{r4, r5, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   136fe:	4910      	ldr	r1, [pc, #64]	; (13740 <enable_logger+0x44>)
   13700:	4810      	ldr	r0, [pc, #64]	; (13744 <enable_logger+0x48>)
{
   13702:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   13704:	2200      	movs	r2, #0
   13706:	f018 fe7a 	bl	2c3fe <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1370a:	4d0f      	ldr	r5, [pc, #60]	; (13748 <enable_logger+0x4c>)
   1370c:	490f      	ldr	r1, [pc, #60]	; (1374c <enable_logger+0x50>)
   1370e:	2200      	movs	r2, #0
   13710:	2300      	movs	r3, #0
   13712:	e9cd 2306 	strd	r2, r3, [sp, #24]
   13716:	2400      	movs	r4, #0
   13718:	230e      	movs	r3, #14
   1371a:	e9cd 3403 	strd	r3, r4, [sp, #12]
   1371e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   13722:	4b0b      	ldr	r3, [pc, #44]	; (13750 <enable_logger+0x54>)
   13724:	9400      	str	r4, [sp, #0]
   13726:	f44f 7240 	mov.w	r2, #768	; 0x300
   1372a:	4628      	mov	r0, r5
   1372c:	f00f fc64 	bl	22ff8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   13730:	4908      	ldr	r1, [pc, #32]	; (13754 <enable_logger+0x58>)
   13732:	4628      	mov	r0, r5
   13734:	f018 fb14 	bl	2bd60 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
   13738:	4620      	mov	r0, r4
   1373a:	b009      	add	sp, #36	; 0x24
   1373c:	bd30      	pop	{r4, r5, pc}
   1373e:	bf00      	nop
   13740:	00013759 	.word	0x00013759
   13744:	20001db8 	.word	0x20001db8
   13748:	20001930 	.word	0x20001930
   1374c:	20004fc0 	.word	0x20004fc0
   13750:	00013a49 	.word	0x00013a49
   13754:	0002dcb9 	.word	0x0002dcb9

00013758 <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   13758:	4801      	ldr	r0, [pc, #4]	; (13760 <log_process_thread_timer_expiry_fn+0x8>)
   1375a:	f00f bddb 	b.w	23314 <z_impl_k_sem_give>
   1375e:	bf00      	nop
   13760:	20000af0 	.word	0x20000af0

00013764 <z_log_init>:
{
   13764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13768:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
   1376a:	481f      	ldr	r0, [pc, #124]	; (137e8 <z_log_init+0x84>)
{
   1376c:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
   1376e:	f014 ff0c 	bl	2858a <atomic_inc>
   13772:	4606      	mov	r6, r0
   13774:	2800      	cmp	r0, #0
   13776:	d030      	beq.n	137da <z_log_init+0x76>
	uint32_t mask = 0;
   13778:	2500      	movs	r5, #0
}
   1377a:	4628      	mov	r0, r5
   1377c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
   13780:	7b23      	ldrb	r3, [r4, #12]
   13782:	b173      	cbz	r3, 137a2 <z_log_init+0x3e>
	if (backend->api->init) {
   13784:	6823      	ldr	r3, [r4, #0]
   13786:	68db      	ldr	r3, [r3, #12]
   13788:	b10b      	cbz	r3, 1378e <z_log_init+0x2a>
		backend->api->init(backend);
   1378a:	4620      	mov	r0, r4
   1378c:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
   1378e:	6823      	ldr	r3, [r4, #0]
   13790:	691b      	ldr	r3, [r3, #16]
   13792:	b9d3      	cbnz	r3, 137ca <z_log_init+0x66>
				log_backend_enable(backend,
   13794:	6863      	ldr	r3, [r4, #4]
   13796:	2204      	movs	r2, #4
   13798:	6819      	ldr	r1, [r3, #0]
   1379a:	4620      	mov	r0, r4
   1379c:	f000 f9fe 	bl	13b9c <log_backend_enable>
			i++;
   137a0:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   137a2:	3410      	adds	r4, #16
   137a4:	454c      	cmp	r4, r9
   137a6:	d3eb      	bcc.n	13780 <z_log_init+0x1c>
	if (blocking) {
   137a8:	f1b8 0f00 	cmp.w	r8, #0
   137ac:	d0e5      	beq.n	1377a <z_log_init+0x16>
		while (mask) {
   137ae:	2d00      	cmp	r5, #0
   137b0:	d0e2      	beq.n	13778 <z_log_init+0x14>
			mask = activate_foreach_backend(mask);
   137b2:	4628      	mov	r0, r5
   137b4:	f7ff ff70 	bl	13698 <activate_foreach_backend>
   137b8:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
   137ba:	2f00      	cmp	r7, #0
   137bc:	d0f7      	beq.n	137ae <z_log_init+0x4a>
	return z_impl_k_sleep(timeout);
   137be:	2100      	movs	r1, #0
   137c0:	f44f 70a4 	mov.w	r0, #328	; 0x148
   137c4:	f010 faa8 	bl	23d18 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   137c8:	e7f1      	b.n	137ae <z_log_init+0x4a>
		return backend->api->is_ready(backend);
   137ca:	4620      	mov	r0, r4
   137cc:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
   137ce:	2800      	cmp	r0, #0
   137d0:	d0e0      	beq.n	13794 <z_log_init+0x30>
				mask |= BIT(i);
   137d2:	fa0a f306 	lsl.w	r3, sl, r6
   137d6:	431d      	orrs	r5, r3
   137d8:	e7e2      	b.n	137a0 <z_log_init+0x3c>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   137da:	4c04      	ldr	r4, [pc, #16]	; (137ec <z_log_init+0x88>)
   137dc:	f8df 9010 	ldr.w	r9, [pc, #16]	; 137f0 <z_log_init+0x8c>
	uint32_t mask = 0;
   137e0:	4605      	mov	r5, r0
				mask |= BIT(i);
   137e2:	f04f 0a01 	mov.w	sl, #1
   137e6:	e7dd      	b.n	137a4 <z_log_init+0x40>
   137e8:	20002e64 	.word	0x20002e64
   137ec:	0002cc14 	.word	0x0002cc14
   137f0:	0002cc34 	.word	0x0002cc34

000137f4 <log_format_func_t_get>:
}
   137f4:	4b01      	ldr	r3, [pc, #4]	; (137fc <log_format_func_t_get+0x8>)
   137f6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   137fa:	4770      	bx	lr
   137fc:	0002ce60 	.word	0x0002ce60

00013800 <log_set_timestamp_func>:
{
   13800:	b508      	push	{r3, lr}
   13802:	4603      	mov	r3, r0
   13804:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
   13806:	b12b      	cbz	r3, 13814 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
   13808:	4a04      	ldr	r2, [pc, #16]	; (1381c <log_set_timestamp_func+0x1c>)
   1380a:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
   1380c:	f000 fc78 	bl	14100 <log_output_timestamp_freq_set>
	return 0;
   13810:	2000      	movs	r0, #0
}
   13812:	bd08      	pop	{r3, pc}
		return -EINVAL;
   13814:	f06f 0015 	mvn.w	r0, #21
   13818:	e7fb      	b.n	13812 <log_set_timestamp_func+0x12>
   1381a:	bf00      	nop
   1381c:	200005d4 	.word	0x200005d4

00013820 <z_log_notify_backend_enabled>:
{
   13820:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   13822:	4c04      	ldr	r4, [pc, #16]	; (13834 <z_log_notify_backend_enabled+0x14>)
   13824:	7823      	ldrb	r3, [r4, #0]
   13826:	b913      	cbnz	r3, 1382e <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
   13828:	4803      	ldr	r0, [pc, #12]	; (13838 <z_log_notify_backend_enabled+0x18>)
   1382a:	f00f fd73 	bl	23314 <z_impl_k_sem_give>
	backend_attached = true;
   1382e:	2301      	movs	r3, #1
   13830:	7023      	strb	r3, [r4, #0]
}
   13832:	bd10      	pop	{r4, pc}
   13834:	20004568 	.word	0x20004568
   13838:	20000af0 	.word	0x20000af0

0001383c <z_log_dropped>:
{
   1383c:	b510      	push	{r4, lr}
   1383e:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
   13840:	4808      	ldr	r0, [pc, #32]	; (13864 <z_log_dropped+0x28>)
   13842:	f014 fea2 	bl	2858a <atomic_inc>
	if (buffered) {
   13846:	b15c      	cbz	r4, 13860 <z_log_dropped+0x24>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   13848:	f3bf 8f5b 	dmb	ish
   1384c:	4b06      	ldr	r3, [pc, #24]	; (13868 <z_log_dropped+0x2c>)
   1384e:	e853 1f00 	ldrex	r1, [r3]
   13852:	3901      	subs	r1, #1
   13854:	e843 1200 	strex	r2, r1, [r3]
   13858:	2a00      	cmp	r2, #0
   1385a:	d1f8      	bne.n	1384e <z_log_dropped+0x12>
   1385c:	f3bf 8f5b 	dmb	ish
}
   13860:	bd10      	pop	{r4, pc}
   13862:	bf00      	nop
   13864:	20002e5c 	.word	0x20002e5c
   13868:	20002e60 	.word	0x20002e60

0001386c <z_log_dropped_read_and_clear>:
}
   1386c:	2000      	movs	r0, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1386e:	4b06      	ldr	r3, [pc, #24]	; (13888 <z_log_dropped_read_and_clear+0x1c>)
   13870:	f3bf 8f5b 	dmb	ish
   13874:	4601      	mov	r1, r0
   13876:	e853 0f00 	ldrex	r0, [r3]
   1387a:	e843 1200 	strex	r2, r1, [r3]
   1387e:	2a00      	cmp	r2, #0
   13880:	d1f9      	bne.n	13876 <z_log_dropped_read_and_clear+0xa>
   13882:	f3bf 8f5b 	dmb	ish
   13886:	4770      	bx	lr
   13888:	20002e5c 	.word	0x20002e5c

0001388c <dropped_notify>:
{
   1388c:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   1388e:	f7ff ffed 	bl	1386c <z_log_dropped_read_and_clear>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13892:	4c08      	ldr	r4, [pc, #32]	; (138b4 <dropped_notify+0x28>)
   13894:	4e08      	ldr	r6, [pc, #32]	; (138b8 <dropped_notify+0x2c>)
	uint32_t dropped = z_log_dropped_read_and_clear();
   13896:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13898:	42b4      	cmp	r4, r6
   1389a:	d300      	bcc.n	1389e <dropped_notify+0x12>
}
   1389c:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   1389e:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   138a0:	795b      	ldrb	r3, [r3, #5]
   138a2:	b12b      	cbz	r3, 138b0 <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
   138a4:	6823      	ldr	r3, [r4, #0]
   138a6:	685b      	ldr	r3, [r3, #4]
   138a8:	b113      	cbz	r3, 138b0 <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
   138aa:	4629      	mov	r1, r5
   138ac:	4620      	mov	r0, r4
   138ae:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   138b0:	3410      	adds	r4, #16
   138b2:	e7f1      	b.n	13898 <dropped_notify+0xc>
   138b4:	0002cc14 	.word	0x0002cc14
   138b8:	0002cc34 	.word	0x0002cc34

000138bc <z_log_msg_init>:
{
   138bc:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
   138be:	4c04      	ldr	r4, [pc, #16]	; (138d0 <z_log_msg_init+0x14>)
   138c0:	4904      	ldr	r1, [pc, #16]	; (138d4 <z_log_msg_init+0x18>)
   138c2:	4620      	mov	r0, r4
   138c4:	f014 fa9e 	bl	27e04 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
   138c8:	4b03      	ldr	r3, [pc, #12]	; (138d8 <z_log_msg_init+0x1c>)
   138ca:	601c      	str	r4, [r3, #0]
}
   138cc:	bd10      	pop	{r4, pc}
   138ce:	bf00      	nop
   138d0:	20000994 	.word	0x20000994
   138d4:	0002ce4c 	.word	0x0002ce4c
   138d8:	20002e54 	.word	0x20002e54

000138dc <log_core_init>:
	panic_mode = false;
   138dc:	4a08      	ldr	r2, [pc, #32]	; (13900 <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
   138de:	4809      	ldr	r0, [pc, #36]	; (13904 <log_core_init+0x28>)
{
   138e0:	b508      	push	{r3, lr}
	panic_mode = false;
   138e2:	2300      	movs	r3, #0
   138e4:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   138e6:	4a08      	ldr	r2, [pc, #32]	; (13908 <log_core_init+0x2c>)
   138e8:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
   138ea:	4a08      	ldr	r2, [pc, #32]	; (1390c <log_core_init+0x30>)
		log_set_timestamp_func(default_get_timestamp,
   138ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	buffered_cnt = 0;
   138f0:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
   138f2:	f7ff ff85 	bl	13800 <log_set_timestamp_func>
}
   138f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
   138fa:	f7ff bfdf 	b.w	138bc <z_log_msg_init>
   138fe:	bf00      	nop
   13900:	20004569 	.word	0x20004569
   13904:	00028587 	.word	0x00028587
   13908:	20002e5c 	.word	0x20002e5c
   1390c:	20002e60 	.word	0x20002e60

00013910 <z_log_msg_alloc>:
{
   13910:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
   13912:	2200      	movs	r2, #0
   13914:	4801      	ldr	r0, [pc, #4]	; (1391c <z_log_msg_alloc+0xc>)
   13916:	2300      	movs	r3, #0
   13918:	f014 ba95 	b.w	27e46 <mpsc_pbuf_alloc>
   1391c:	20000994 	.word	0x20000994

00013920 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
   13920:	4801      	ldr	r0, [pc, #4]	; (13928 <z_log_msg_local_claim+0x8>)
   13922:	f014 bb2e 	b.w	27f82 <mpsc_pbuf_claim>
   13926:	bf00      	nop
   13928:	20000994 	.word	0x20000994

0001392c <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
   1392c:	4b02      	ldr	r3, [pc, #8]	; (13938 <z_log_msg_free+0xc>)
{
   1392e:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
   13930:	6818      	ldr	r0, [r3, #0]
   13932:	f014 bb78 	b.w	28026 <mpsc_pbuf_free>
   13936:	bf00      	nop
   13938:	20002e54 	.word	0x20002e54

0001393c <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
   1393c:	4801      	ldr	r0, [pc, #4]	; (13944 <z_log_msg_pending+0x8>)
   1393e:	f014 bbae 	b.w	2809e <mpsc_pbuf_is_pending>
   13942:	bf00      	nop
   13944:	20000994 	.word	0x20000994

00013948 <z_impl_log_process>:
{
   13948:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
   1394a:	4b28      	ldr	r3, [pc, #160]	; (139ec <z_impl_log_process+0xa4>)
   1394c:	7818      	ldrb	r0, [r3, #0]
   1394e:	2800      	cmp	r0, #0
   13950:	d04b      	beq.n	139ea <z_impl_log_process+0xa2>
	return z_log_msg_local_claim();
   13952:	f7ff ffe5 	bl	13920 <z_log_msg_local_claim>
	if (msg) {
   13956:	4605      	mov	r5, r0
   13958:	b190      	cbz	r0, 13980 <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1395a:	f3bf 8f5b 	dmb	ish
   1395e:	4b24      	ldr	r3, [pc, #144]	; (139f0 <z_impl_log_process+0xa8>)
   13960:	e853 1f00 	ldrex	r1, [r3]
   13964:	3901      	subs	r1, #1
   13966:	e843 1200 	strex	r2, r1, [r3]
   1396a:	2a00      	cmp	r2, #0
   1396c:	d1f8      	bne.n	13960 <z_impl_log_process+0x18>
   1396e:	f3bf 8f5b 	dmb	ish
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13972:	4c20      	ldr	r4, [pc, #128]	; (139f4 <z_impl_log_process+0xac>)
   13974:	4e20      	ldr	r6, [pc, #128]	; (139f8 <z_impl_log_process+0xb0>)
   13976:	42b4      	cmp	r4, r6
   13978:	d32d      	bcc.n	139d6 <z_impl_log_process+0x8e>
		z_log_msg_free(msg);
   1397a:	4628      	mov	r0, r5
   1397c:	f7ff ffd6 	bl	1392c <z_log_msg_free>
	return dropped_cnt > 0;
   13980:	4b1e      	ldr	r3, [pc, #120]	; (139fc <z_impl_log_process+0xb4>)
   13982:	4c1f      	ldr	r4, [pc, #124]	; (13a00 <z_impl_log_process+0xb8>)
		if ((dropped_pend || unordered_pend) &&
   13984:	681b      	ldr	r3, [r3, #0]
   13986:	2b00      	cmp	r3, #0
   13988:	dd19      	ble.n	139be <z_impl_log_process+0x76>
	return z_impl_k_uptime_ticks();
   1398a:	f018 fd10 	bl	2c3ae <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
   1398e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13992:	fba0 0302 	umull	r0, r3, r0, r2
   13996:	fb02 3101 	mla	r1, r2, r1, r3
   1399a:	0bc3      	lsrs	r3, r0, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   1399c:	e9d4 2000 	ldrd	r2, r0, [r4]
   139a0:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   139a4:	1a9b      	subs	r3, r3, r2
   139a6:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		if ((dropped_pend || unordered_pend) &&
   139aa:	f240 32e9 	movw	r2, #1001	; 0x3e9
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   139ae:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
   139b2:	4293      	cmp	r3, r2
   139b4:	f171 0100 	sbcs.w	r1, r1, #0
   139b8:	d301      	bcc.n	139be <z_impl_log_process+0x76>
				dropped_notify();
   139ba:	f7ff ff67 	bl	1388c <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
   139be:	e9d4 3200 	ldrd	r3, r2, [r4]
   139c2:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
   139c6:	f142 0200 	adc.w	r2, r2, #0
   139ca:	e9c4 3200 	strd	r3, r2, [r4]
}
   139ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
   139d2:	f7ff bfb3 	b.w	1393c <z_log_msg_pending>
	return backend->cb->active;
   139d6:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
   139d8:	795b      	ldrb	r3, [r3, #5]
   139da:	b123      	cbz	r3, 139e6 <z_impl_log_process+0x9e>
	backend->api->process(backend, msg);
   139dc:	6823      	ldr	r3, [r4, #0]
   139de:	4629      	mov	r1, r5
   139e0:	681b      	ldr	r3, [r3, #0]
   139e2:	4620      	mov	r0, r4
   139e4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   139e6:	3410      	adds	r4, #16
   139e8:	e7c5      	b.n	13976 <z_impl_log_process+0x2e>
}
   139ea:	bd70      	pop	{r4, r5, r6, pc}
   139ec:	20004568 	.word	0x20004568
   139f0:	20002e60 	.word	0x20002e60
   139f4:	0002cc14 	.word	0x0002cc14
   139f8:	0002cc34 	.word	0x0002cc34
   139fc:	20002e5c 	.word	0x20002e5c
   13a00:	20001db0 	.word	0x20001db0

00013a04 <z_impl_log_panic>:
{
   13a04:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
   13a06:	4d0d      	ldr	r5, [pc, #52]	; (13a3c <z_impl_log_panic+0x38>)
   13a08:	7829      	ldrb	r1, [r5, #0]
   13a0a:	b961      	cbnz	r1, 13a26 <z_impl_log_panic+0x22>
	(void)z_log_init(true, false);
   13a0c:	2001      	movs	r0, #1
   13a0e:	f7ff fea9 	bl	13764 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13a12:	4c0b      	ldr	r4, [pc, #44]	; (13a40 <z_impl_log_panic+0x3c>)
   13a14:	4e0b      	ldr	r6, [pc, #44]	; (13a44 <z_impl_log_panic+0x40>)
   13a16:	42b4      	cmp	r4, r6
   13a18:	d306      	bcc.n	13a28 <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
   13a1a:	f7ff ff95 	bl	13948 <z_impl_log_process>
		while (log_process() == true) {
   13a1e:	2800      	cmp	r0, #0
   13a20:	d1fb      	bne.n	13a1a <z_impl_log_panic+0x16>
	panic_mode = true;
   13a22:	2301      	movs	r3, #1
   13a24:	702b      	strb	r3, [r5, #0]
}
   13a26:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
   13a28:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   13a2a:	795b      	ldrb	r3, [r3, #5]
   13a2c:	b11b      	cbz	r3, 13a36 <z_impl_log_panic+0x32>
	backend->api->panic(backend);
   13a2e:	6823      	ldr	r3, [r4, #0]
   13a30:	4620      	mov	r0, r4
   13a32:	689b      	ldr	r3, [r3, #8]
   13a34:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13a36:	3410      	adds	r4, #16
   13a38:	e7ed      	b.n	13a16 <z_impl_log_panic+0x12>
   13a3a:	bf00      	nop
   13a3c:	20004569 	.word	0x20004569
   13a40:	0002cc14 	.word	0x0002cc14
   13a44:	0002cc34 	.word	0x0002cc34

00013a48 <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
   13a48:	2100      	movs	r1, #0
{
   13a4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
   13a4e:	4608      	mov	r0, r1
   13a50:	f7ff fe88 	bl	13764 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   13a54:	4604      	mov	r4, r0
   13a56:	b348      	cbz	r0, 13aac <log_process_thread_func+0x64>
   13a58:	f240 6867 	movw	r8, #1639	; 0x667
   13a5c:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
   13a60:	f010 f974 	bl	23d4c <z_impl_z_current_get>
	proc_tid = process_tid;
   13a64:	4b1a      	ldr	r3, [pc, #104]	; (13ad0 <log_process_thread_func+0x88>)
   13a66:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   13a68:	b130      	cbz	r0, 13a78 <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   13a6a:	4b1a      	ldr	r3, [pc, #104]	; (13ad4 <log_process_thread_func+0x8c>)
	    process_tid &&
   13a6c:	681b      	ldr	r3, [r3, #0]
   13a6e:	2b09      	cmp	r3, #9
   13a70:	dd02      	ble.n	13a78 <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
   13a72:	4819      	ldr	r0, [pc, #100]	; (13ad8 <log_process_thread_func+0x90>)
   13a74:	f00f fc4e 	bl	23314 <z_impl_k_sem_give>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13a78:	4f18      	ldr	r7, [pc, #96]	; (13adc <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
   13a7a:	f8df a05c 	ldr.w	sl, [pc, #92]	; 13ad8 <log_process_thread_func+0x90>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   13a7e:	2500      	movs	r5, #0
		if (activate_mask) {
   13a80:	b144      	cbz	r4, 13a94 <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
   13a82:	4620      	mov	r0, r4
   13a84:	f7ff fe08 	bl	13698 <activate_foreach_backend>
			if (!activate_mask) {
   13a88:	4604      	mov	r4, r0
   13a8a:	b918      	cbnz	r0, 13a94 <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
   13a8c:	f04f 38ff 	mov.w	r8, #4294967295
   13a90:	f04f 39ff 	mov.w	r9, #4294967295
   13a94:	f7ff ff58 	bl	13948 <z_impl_log_process>
		if (log_process() == false) {
   13a98:	4606      	mov	r6, r0
   13a9a:	b928      	cbnz	r0, 13aa8 <log_process_thread_func+0x60>
			if (processed_any) {
   13a9c:	b9b5      	cbnz	r5, 13acc <log_process_thread_func+0x84>
   13a9e:	4642      	mov	r2, r8
   13aa0:	464b      	mov	r3, r9
   13aa2:	4650      	mov	r0, sl
   13aa4:	f00f fc5c 	bl	23360 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   13aa8:	4635      	mov	r5, r6
   13aaa:	e7e9      	b.n	13a80 <log_process_thread_func+0x38>
   13aac:	f04f 38ff 	mov.w	r8, #4294967295
   13ab0:	f04f 39ff 	mov.w	r9, #4294967295
   13ab4:	e7d4      	b.n	13a60 <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
   13ab6:	682b      	ldr	r3, [r5, #0]
   13ab8:	699b      	ldr	r3, [r3, #24]
   13aba:	b11b      	cbz	r3, 13ac4 <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
   13abc:	2200      	movs	r2, #0
   13abe:	4611      	mov	r1, r2
   13ac0:	4628      	mov	r0, r5
   13ac2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13ac4:	3510      	adds	r5, #16
   13ac6:	42bd      	cmp	r5, r7
   13ac8:	d3f5      	bcc.n	13ab6 <log_process_thread_func+0x6e>
   13aca:	e7e8      	b.n	13a9e <log_process_thread_func+0x56>
   13acc:	4d04      	ldr	r5, [pc, #16]	; (13ae0 <log_process_thread_func+0x98>)
   13ace:	e7fa      	b.n	13ac6 <log_process_thread_func+0x7e>
   13ad0:	20002e58 	.word	0x20002e58
   13ad4:	20002e60 	.word	0x20002e60
   13ad8:	20000af0 	.word	0x20000af0
   13adc:	0002cc34 	.word	0x0002cc34
   13ae0:	0002cc14 	.word	0x0002cc14

00013ae4 <z_log_msg_post_finalize>:
{
   13ae4:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
   13ae6:	4818      	ldr	r0, [pc, #96]	; (13b48 <z_log_msg_post_finalize+0x64>)
   13ae8:	f014 fd4f 	bl	2858a <atomic_inc>
	if (panic_mode) {
   13aec:	4b17      	ldr	r3, [pc, #92]	; (13b4c <z_log_msg_post_finalize+0x68>)
   13aee:	781b      	ldrb	r3, [r3, #0]
   13af0:	b17b      	cbz	r3, 13b12 <z_log_msg_post_finalize+0x2e>
   13af2:	f04f 0340 	mov.w	r3, #64	; 0x40
   13af6:	f3ef 8411 	mrs	r4, BASEPRI
   13afa:	f383 8812 	msr	BASEPRI_MAX, r3
   13afe:	f3bf 8f6f 	isb	sy
   13b02:	f7ff ff21 	bl	13948 <z_impl_log_process>
	__asm__ volatile(
   13b06:	f384 8811 	msr	BASEPRI, r4
   13b0a:	f3bf 8f6f 	isb	sy
}
   13b0e:	b002      	add	sp, #8
   13b10:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
   13b12:	4b0f      	ldr	r3, [pc, #60]	; (13b50 <z_log_msg_post_finalize+0x6c>)
   13b14:	681b      	ldr	r3, [r3, #0]
   13b16:	2b00      	cmp	r3, #0
   13b18:	d0f9      	beq.n	13b0e <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
   13b1a:	b950      	cbnz	r0, 13b32 <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
   13b1c:	2200      	movs	r2, #0
   13b1e:	2300      	movs	r3, #0
   13b20:	e9cd 2300 	strd	r2, r3, [sp]
   13b24:	480b      	ldr	r0, [pc, #44]	; (13b54 <z_log_msg_post_finalize+0x70>)
   13b26:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   13b2a:	2300      	movs	r3, #0
   13b2c:	f010 fb76 	bl	2421c <z_impl_k_timer_start>
   13b30:	e7ed      	b.n	13b0e <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   13b32:	280a      	cmp	r0, #10
   13b34:	d1eb      	bne.n	13b0e <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
   13b36:	4807      	ldr	r0, [pc, #28]	; (13b54 <z_log_msg_post_finalize+0x70>)
   13b38:	f018 fc6d 	bl	2c416 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   13b3c:	4806      	ldr	r0, [pc, #24]	; (13b58 <z_log_msg_post_finalize+0x74>)
}
   13b3e:	b002      	add	sp, #8
   13b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13b44:	f00f bbe6 	b.w	23314 <z_impl_k_sem_give>
   13b48:	20002e60 	.word	0x20002e60
   13b4c:	20004569 	.word	0x20004569
   13b50:	20002e58 	.word	0x20002e58
   13b54:	20001db8 	.word	0x20001db8
   13b58:	20000af0 	.word	0x20000af0

00013b5c <z_log_msg_commit>:
{
   13b5c:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
   13b5e:	4b06      	ldr	r3, [pc, #24]	; (13b78 <z_log_msg_commit+0x1c>)
   13b60:	681b      	ldr	r3, [r3, #0]
{
   13b62:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   13b64:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
   13b66:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
   13b68:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
   13b6a:	4804      	ldr	r0, [pc, #16]	; (13b7c <z_log_msg_commit+0x20>)
   13b6c:	f014 f9e9 	bl	27f42 <mpsc_pbuf_commit>
}
   13b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
   13b74:	f7ff bfb6 	b.w	13ae4 <z_log_msg_post_finalize>
   13b78:	200005d4 	.word	0x200005d4
   13b7c:	20000994 	.word	0x20000994

00013b80 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   13b80:	4a04      	ldr	r2, [pc, #16]	; (13b94 <log_source_name_get+0x14>)
   13b82:	4b05      	ldr	r3, [pc, #20]	; (13b98 <log_source_name_get+0x18>)
   13b84:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
   13b86:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
   13b8a:	bf34      	ite	cc
   13b8c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
   13b90:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
   13b92:	4770      	bx	lr
   13b94:	0002cad4 	.word	0x0002cad4
   13b98:	0002cc14 	.word	0x0002cc14

00013b9c <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   13b9c:	4b08      	ldr	r3, [pc, #32]	; (13bc0 <log_backend_enable+0x24>)
   13b9e:	1ac3      	subs	r3, r0, r3
{
   13ba0:	b410      	push	{r4}
	id += backend - log_backend_get(0);
   13ba2:	111b      	asrs	r3, r3, #4
	backend->cb->id = id;
   13ba4:	6844      	ldr	r4, [r0, #4]
   13ba6:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
   13ba8:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
   13baa:	6843      	ldr	r3, [r0, #4]
   13bac:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
   13bae:	6843      	ldr	r3, [r0, #4]
   13bb0:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   13bb2:	6843      	ldr	r3, [r0, #4]
   13bb4:	2201      	movs	r2, #1
   13bb6:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
   13bb8:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
   13bba:	f7ff be31 	b.w	13820 <z_log_notify_backend_enabled>
   13bbe:	bf00      	nop
   13bc0:	0002cc14 	.word	0x0002cc14

00013bc4 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
   13bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13bc8:	b08f      	sub	sp, #60	; 0x3c
   13bca:	af04      	add	r7, sp, #16
   13bcc:	f3c1 284a 	ubfx	r8, r1, #9, #11
   13bd0:	60b8      	str	r0, [r7, #8]
   13bd2:	460d      	mov	r5, r1
   13bd4:	4691      	mov	r9, r2
   13bd6:	607b      	str	r3, [r7, #4]

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
   13bd8:	0d0c      	lsrs	r4, r1, #20
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
   13bda:	f1b8 0f00 	cmp.w	r8, #0
   13bde:	d063      	beq.n	13ca8 <z_impl_z_log_msg_static_create+0xe4>
	struct z_cbprintf_buf_desc buf_desc = {
   13be0:	2600      	movs	r6, #0
	return cbprintf_package_convert(in_packaged, in_len,
   13be2:	f107 0314 	add.w	r3, r7, #20
   13be6:	f04f 0b04 	mov.w	fp, #4
   13bea:	f04f 0a0a 	mov.w	sl, #10
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
   13bee:	f8c7 800c 	str.w	r8, [r7, #12]
	struct z_cbprintf_buf_desc buf_desc = {
   13bf2:	e9c7 6607 	strd	r6, r6, [r7, #28]
   13bf6:	627e      	str	r6, [r7, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
   13bf8:	9301      	str	r3, [sp, #4]
   13bfa:	f8cd b008 	str.w	fp, [sp, #8]
   13bfe:	f8cd a000 	str.w	sl, [sp]
   13c02:	f107 031c 	add.w	r3, r7, #28
   13c06:	68f9      	ldr	r1, [r7, #12]
   13c08:	4632      	mov	r2, r6
   13c0a:	4648      	mov	r0, r9
   13c0c:	f7fe fb06 	bl	1221c <cbprintf_package_convert>
					    NULL, 0, flags,
					    strl, ARRAY_SIZE(strl));

		if (len > Z_LOG_MSG_MAX_PACKAGE) {
   13c10:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   13c14:	4603      	mov	r3, r0
   13c16:	d31c      	bcc.n	13c52 <z_impl_z_log_msg_static_create+0x8e>
			struct cbprintf_package_hdr_ext *pkg =
				(struct cbprintf_package_hdr_ext *)package;

			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
   13c18:	466c      	mov	r4, sp
   13c1a:	b08a      	sub	sp, #40	; 0x28
   13c1c:	f8d9 1004 	ldr.w	r1, [r9, #4]
   13c20:	ab04      	add	r3, sp, #16
   13c22:	4826      	ldr	r0, [pc, #152]	; (13cbc <z_impl_z_log_msg_static_create+0xf8>)
   13c24:	e9c3 0105 	strd	r0, r1, [r3, #20]
   13c28:	f240 71ff 	movw	r1, #2047	; 0x7ff
   13c2c:	61d9      	str	r1, [r3, #28]
   13c2e:	461a      	mov	r2, r3
   13c30:	f44f 7100 	mov.w	r1, #512	; 0x200
   13c34:	8419      	strh	r1, [r3, #32]
   13c36:	4b22      	ldr	r3, [pc, #136]	; (13cc0 <z_impl_z_log_msg_static_create+0xfc>)
   13c38:	f842 3f10 	str.w	r3, [r2, #16]!
   13c3c:	4821      	ldr	r0, [pc, #132]	; (13cc4 <z_impl_z_log_msg_static_create+0x100>)
   13c3e:	4633      	mov	r3, r6
   13c40:	f44f 5112 	mov.w	r1, #9344	; 0x2480
   13c44:	f7ff ffbe 	bl	13bc4 <z_impl_z_log_msg_static_create>
   13c48:	46a5      	mov	sp, r4
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
}
   13c4a:	372c      	adds	r7, #44	; 0x2c
   13c4c:	46bd      	mov	sp, r7
   13c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_desc.package_len = len;
   13c52:	f3c0 080a 	ubfx	r8, r0, #0, #11
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
   13c56:	f104 0017 	add.w	r0, r4, #23
   13c5a:	4418      	add	r0, r3
   13c5c:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   13c60:	0880      	lsrs	r0, r0, #2
   13c62:	603b      	str	r3, [r7, #0]
   13c64:	f7ff fe54 	bl	13910 <z_log_msg_alloc>
   13c68:	f368 2553 	bfi	r5, r8, #9, #11
		if (msg) {
   13c6c:	4604      	mov	r4, r0
   13c6e:	b190      	cbz	r0, 13c96 <z_impl_z_log_msg_static_create+0xd2>
	struct z_cbprintf_buf_desc buf_desc = {
   13c70:	683b      	ldr	r3, [r7, #0]
	return cbprintf_package_convert(in_packaged, in_len,
   13c72:	4a15      	ldr	r2, [pc, #84]	; (13cc8 <z_impl_z_log_msg_static_create+0x104>)
	struct z_cbprintf_buf_desc buf_desc = {
   13c74:	e9c7 3608 	strd	r3, r6, [r7, #32]
						    msg->data, out_desc.package_len,
   13c78:	f100 0110 	add.w	r1, r0, #16
	return cbprintf_package_convert(in_packaged, in_len,
   13c7c:	f107 0314 	add.w	r3, r7, #20
	struct z_cbprintf_buf_desc buf_desc = {
   13c80:	61f9      	str	r1, [r7, #28]
	return cbprintf_package_convert(in_packaged, in_len,
   13c82:	e9cd a300 	strd	sl, r3, [sp]
   13c86:	f8cd b008 	str.w	fp, [sp, #8]
   13c8a:	68f9      	ldr	r1, [r7, #12]
   13c8c:	f107 031c 	add.w	r3, r7, #28
   13c90:	4648      	mov	r0, r9
   13c92:	f7fe fac3 	bl	1221c <cbprintf_package_convert>
	z_log_msg_finalize(msg, source, out_desc, data);
   13c96:	f368 2553 	bfi	r5, r8, #9, #11
   13c9a:	687b      	ldr	r3, [r7, #4]
   13c9c:	68b9      	ldr	r1, [r7, #8]
   13c9e:	462a      	mov	r2, r5
   13ca0:	4620      	mov	r0, r4
   13ca2:	f014 fca8 	bl	285f6 <z_log_msg_finalize>
   13ca6:	e7d0      	b.n	13c4a <z_impl_z_log_msg_static_create+0x86>
   13ca8:	f104 0017 	add.w	r0, r4, #23
   13cac:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   13cb0:	0880      	lsrs	r0, r0, #2
   13cb2:	f7ff fe2d 	bl	13910 <z_log_msg_alloc>
   13cb6:	4604      	mov	r4, r0
   13cb8:	e7ed      	b.n	13c96 <z_impl_z_log_msg_static_create+0xd2>
   13cba:	bf00      	nop
   13cbc:	0002dcce 	.word	0x0002dcce
   13cc0:	01000004 	.word	0x01000004
   13cc4:	0002cbac 	.word	0x0002cbac
   13cc8:	000285cb 	.word	0x000285cb

00013ccc <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
   13ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13cd0:	b087      	sub	sp, #28
   13cd2:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
   13cd6:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
   13cda:	4604      	mov	r4, r0
   13cdc:	460f      	mov	r7, r1
   13cde:	4693      	mov	fp, r2
   13ce0:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
   13ce2:	b3a6      	cbz	r6, 13d4e <z_impl_z_log_msg_runtime_vcreate+0x82>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
   13ce4:	2110      	movs	r1, #16
   13ce6:	f8cd 9000 	str.w	r9, [sp]
   13cea:	4633      	mov	r3, r6
   13cec:	4652      	mov	r2, sl
   13cee:	2000      	movs	r0, #0
		va_copy(ap2, ap);
   13cf0:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
   13cf4:	f7fe f8bc 	bl	11e70 <cbvprintf_package>
   13cf8:	4601      	mov	r1, r0
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
   13cfa:	f105 0017 	add.w	r0, r5, #23
   13cfe:	4408      	add	r0, r1
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
   13d00:	4b14      	ldr	r3, [pc, #80]	; (13d54 <z_impl_z_log_msg_runtime_vcreate+0x88>)
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
   13d02:	9103      	str	r1, [sp, #12]
	struct log_msg_desc desc =
   13d04:	f004 0407 	and.w	r4, r4, #7
   13d08:	f00b 0b07 	and.w	fp, fp, #7
   13d0c:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
   13d0e:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
   13d12:	ea03 2341 	and.w	r3, r3, r1, lsl #9
   13d16:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
   13d1a:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
   13d1c:	431c      	orrs	r4, r3
		msg = z_log_msg_alloc(msg_wlen);
   13d1e:	f7ff fdf7 	bl	13910 <z_log_msg_alloc>
	struct log_msg_desc desc =
   13d22:	ea44 5405 	orr.w	r4, r4, r5, lsl #20
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
   13d26:	4605      	mov	r5, r0
   13d28:	b140      	cbz	r0, 13d3c <z_impl_z_log_msg_runtime_vcreate+0x70>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
   13d2a:	b13e      	cbz	r6, 13d3c <z_impl_z_log_msg_runtime_vcreate+0x70>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
   13d2c:	9903      	ldr	r1, [sp, #12]
   13d2e:	f8cd 9000 	str.w	r9, [sp]
   13d32:	4633      	mov	r3, r6
   13d34:	4652      	mov	r2, sl
   13d36:	3010      	adds	r0, #16
   13d38:	f7fe f89a 	bl	11e70 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
   13d3c:	4643      	mov	r3, r8
   13d3e:	4622      	mov	r2, r4
   13d40:	4639      	mov	r1, r7
   13d42:	4628      	mov	r0, r5
	}
}
   13d44:	b007      	add	sp, #28
   13d46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
   13d4a:	f014 bc54 	b.w	285f6 <z_log_msg_finalize>
		plen = 0;
   13d4e:	4631      	mov	r1, r6
   13d50:	e7d3      	b.n	13cfa <z_impl_z_log_msg_runtime_vcreate+0x2e>
   13d52:	bf00      	nop
   13d54:	000ffe00 	.word	0x000ffe00

00013d58 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   13d58:	b40e      	push	{r1, r2, r3}
   13d5a:	b503      	push	{r0, r1, lr}
   13d5c:	ab03      	add	r3, sp, #12
   13d5e:	4601      	mov	r1, r0
   13d60:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   13d64:	4804      	ldr	r0, [pc, #16]	; (13d78 <print_formatted+0x20>)
	va_start(args, fmt);
   13d66:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   13d68:	f014 fc6b 	bl	28642 <cbvprintf>
	va_end(args);

	return length;
}
   13d6c:	b002      	add	sp, #8
   13d6e:	f85d eb04 	ldr.w	lr, [sp], #4
   13d72:	b003      	add	sp, #12
   13d74:	4770      	bx	lr
   13d76:	bf00      	nop
   13d78:	0002866b 	.word	0x0002866b

00013d7c <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   13d7c:	06ca      	lsls	r2, r1, #27
   13d7e:	d405      	bmi.n	13d8c <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   13d80:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
   13d82:	bf4c      	ite	mi
   13d84:	4902      	ldrmi	r1, [pc, #8]	; (13d90 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
   13d86:	4903      	ldrpl	r1, [pc, #12]	; (13d94 <newline_print+0x18>)
   13d88:	f7ff bfe6 	b.w	13d58 <print_formatted>
	}
}
   13d8c:	4770      	bx	lr
   13d8e:	bf00      	nop
   13d90:	0002dd0e 	.word	0x0002dd0e
   13d94:	0002dd0d 	.word	0x0002dd0d

00013d98 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
   13d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d9c:	b089      	sub	sp, #36	; 0x24
   13d9e:	469b      	mov	fp, r3
   13da0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   13da4:	9304      	str	r3, [sp, #16]
   13da6:	e9dd 9313 	ldrd	r9, r3, [sp, #76]	; 0x4c
   13daa:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
   13dac:	9b04      	ldr	r3, [sp, #16]
{
   13dae:	9206      	str	r2, [sp, #24]
   13db0:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
   13db4:	4604      	mov	r4, r0
   13db6:	460d      	mov	r5, r1
	if (!raw_string) {
   13db8:	2b00      	cmp	r3, #0
   13dba:	f000 8087 	beq.w	13ecc <log_output_process+0x134>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   13dbe:	f006 0308 	and.w	r3, r6, #8
   13dc2:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
   13dc4:	f014 fbff 	bl	285c6 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   13dc8:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
   13dcc:	4602      	mov	r2, r0
   13dce:	2800      	cmp	r0, #0
   13dd0:	d04b      	beq.n	13e6a <log_output_process+0xd2>
		length += print_formatted(output, "%s ", tag);
   13dd2:	4986      	ldr	r1, [pc, #536]	; (13fec <log_output_process+0x254>)
   13dd4:	4620      	mov	r0, r4
   13dd6:	f7ff ffbf 	bl	13d58 <print_formatted>
   13dda:	4680      	mov	r8, r0
	if (stamp) {
   13ddc:	f1ba 0f00 	cmp.w	sl, #0
   13de0:	d008      	beq.n	13df4 <log_output_process+0x5c>
	if (!format) {
   13de2:	f016 0f44 	tst.w	r6, #68	; 0x44
   13de6:	d142      	bne.n	13e6e <log_output_process+0xd6>
		length = print_formatted(output, "[%08lu] ", timestamp);
   13de8:	4981      	ldr	r1, [pc, #516]	; (13ff0 <log_output_process+0x258>)
   13dea:	462a      	mov	r2, r5
   13dec:	4620      	mov	r0, r4
   13dee:	f7ff ffb3 	bl	13d58 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   13df2:	4480      	add	r8, r0
	if (color) {
   13df4:	f006 0301 	and.w	r3, r6, #1
   13df8:	b15b      	cbz	r3, 13e12 <log_output_process+0x7a>
		const char *log_color = start && (colors[level] != NULL) ?
   13dfa:	4b7e      	ldr	r3, [pc, #504]	; (13ff4 <log_output_process+0x25c>)
   13dfc:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
   13dfe:	497e      	ldr	r1, [pc, #504]	; (13ff8 <log_output_process+0x260>)
		const char *log_color = start && (colors[level] != NULL) ?
   13e00:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
   13e04:	4b7d      	ldr	r3, [pc, #500]	; (13ffc <log_output_process+0x264>)
   13e06:	4620      	mov	r0, r4
   13e08:	2a00      	cmp	r2, #0
   13e0a:	bf08      	it	eq
   13e0c:	461a      	moveq	r2, r3
   13e0e:	f7ff ffa3 	bl	13d58 <print_formatted>
	if (level_on) {
   13e12:	f006 0308 	and.w	r3, r6, #8
   13e16:	2b00      	cmp	r3, #0
   13e18:	d055      	beq.n	13ec6 <log_output_process+0x12e>
		total += print_formatted(output, "<%s> ", severity[level]);
   13e1a:	4b79      	ldr	r3, [pc, #484]	; (14000 <log_output_process+0x268>)
   13e1c:	9a04      	ldr	r2, [sp, #16]
   13e1e:	4979      	ldr	r1, [pc, #484]	; (14004 <log_output_process+0x26c>)
   13e20:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   13e24:	4620      	mov	r0, r4
   13e26:	f7ff ff97 	bl	13d58 <print_formatted>
   13e2a:	4605      	mov	r5, r0
	if (domain) {
   13e2c:	9b06      	ldr	r3, [sp, #24]
   13e2e:	b12b      	cbz	r3, 13e3c <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
   13e30:	4975      	ldr	r1, [pc, #468]	; (14008 <log_output_process+0x270>)
   13e32:	461a      	mov	r2, r3
   13e34:	4620      	mov	r0, r4
   13e36:	f7ff ff8f 	bl	13d58 <print_formatted>
   13e3a:	4405      	add	r5, r0
	if (source) {
   13e3c:	f1bb 0f00 	cmp.w	fp, #0
   13e40:	d005      	beq.n	13e4e <log_output_process+0xb6>
		total += print_formatted(output,
   13e42:	4972      	ldr	r1, [pc, #456]	; (1400c <log_output_process+0x274>)
   13e44:	465a      	mov	r2, fp
   13e46:	4620      	mov	r0, r4
   13e48:	f7ff ff86 	bl	13d58 <print_formatted>
   13e4c:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
   13e4e:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
   13e50:	f1b9 0f00 	cmp.w	r9, #0
   13e54:	d149      	bne.n	13eea <log_output_process+0x152>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
   13e56:	2f00      	cmp	r7, #0
   13e58:	d14f      	bne.n	13efa <log_output_process+0x162>
	if (color) {
   13e5a:	07f3      	lsls	r3, r6, #31
   13e5c:	f100 80c0 	bmi.w	13fe0 <log_output_process+0x248>
	newline_print(output, flags);
   13e60:	4631      	mov	r1, r6
   13e62:	4620      	mov	r0, r4
   13e64:	f7ff ff8a 	bl	13d7c <newline_print>
}
   13e68:	e0b4      	b.n	13fd4 <log_output_process+0x23c>
	uint32_t length = 0U;
   13e6a:	4680      	mov	r8, r0
   13e6c:	e7b6      	b.n	13ddc <log_output_process+0x44>
	} else if (freq != 0U) {
   13e6e:	4b68      	ldr	r3, [pc, #416]	; (14010 <log_output_process+0x278>)
   13e70:	6818      	ldr	r0, [r3, #0]
   13e72:	2800      	cmp	r0, #0
   13e74:	d0bd      	beq.n	13df2 <log_output_process+0x5a>
		timestamp /= timestamp_div;
   13e76:	4b67      	ldr	r3, [pc, #412]	; (14014 <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
   13e78:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
   13e7c:	681b      	ldr	r3, [r3, #0]
   13e7e:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
   13e82:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   13e86:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
   13e8a:	fb00 5513 	mls	r5, r0, r3, r5
   13e8e:	fbb3 faf2 	udiv	sl, r3, r2
		ms = (remainder * 1000U) / freq;
   13e92:	fb0e f505 	mul.w	r5, lr, r5
   13e96:	fb02 321a 	mls	r2, r2, sl, r3
		mins = seconds / 60U;
   13e9a:	213c      	movs	r1, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   13e9c:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
   13ea0:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   13ea4:	fb00 551c 	mls	r5, r0, ip, r5
				length = print_formatted(output,
   13ea8:	fb01 2213 	mls	r2, r1, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   13eac:	fb0e f505 	mul.w	r5, lr, r5
				length = print_formatted(output,
   13eb0:	9200      	str	r2, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   13eb2:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
   13eb6:	4958      	ldr	r1, [pc, #352]	; (14018 <log_output_process+0x280>)
   13eb8:	e9cd c501 	strd	ip, r5, [sp, #4]
   13ebc:	4652      	mov	r2, sl
   13ebe:	4620      	mov	r0, r4
   13ec0:	f7ff ff4a 	bl	13d58 <print_formatted>
   13ec4:	e795      	b.n	13df2 <log_output_process+0x5a>
	int total = 0;
   13ec6:	f006 0508 	and.w	r5, r6, #8
   13eca:	e7af      	b.n	13e2c <log_output_process+0x94>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   13ecc:	f1bb 0f01 	cmp.w	fp, #1
   13ed0:	d106      	bne.n	13ee0 <log_output_process+0x148>
	if (package) {
   13ed2:	f1b9 0f00 	cmp.w	r9, #0
   13ed6:	d164      	bne.n	13fa2 <log_output_process+0x20a>
	if (data_len) {
   13ed8:	2f00      	cmp	r7, #0
   13eda:	d07b      	beq.n	13fd4 <log_output_process+0x23c>
		prefix_offset = 0;
   13edc:	2500      	movs	r5, #0
   13ede:	e00c      	b.n	13efa <log_output_process+0x162>
	if (package) {
   13ee0:	f1b9 0f00 	cmp.w	r9, #0
   13ee4:	d0f8      	beq.n	13ed8 <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   13ee6:	484d      	ldr	r0, [pc, #308]	; (1401c <log_output_process+0x284>)
   13ee8:	e05c      	b.n	13fa4 <log_output_process+0x20c>
		cb = out_func;
   13eea:	484d      	ldr	r0, [pc, #308]	; (14020 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
   13eec:	494d      	ldr	r1, [pc, #308]	; (14024 <log_output_process+0x28c>)
   13eee:	464b      	mov	r3, r9
   13ef0:	4622      	mov	r2, r4
   13ef2:	f013 fa6c 	bl	273ce <cbpprintf_external>
	if (data_len) {
   13ef6:	2f00      	cmp	r7, #0
   13ef8:	d068      	beq.n	13fcc <log_output_process+0x234>
		print_formatted(output, " ");
   13efa:	f8df 912c 	ldr.w	r9, [pc, #300]	; 14028 <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
   13efe:	f8df a12c 	ldr.w	sl, [pc, #300]	; 1402c <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   13f02:	2f10      	cmp	r7, #16
	newline_print(output, flags);
   13f04:	4631      	mov	r1, r6
   13f06:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   13f08:	46b8      	mov	r8, r7
   13f0a:	bf28      	it	cs
   13f0c:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
   13f10:	f7ff ff34 	bl	13d7c <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
   13f14:	f04f 0b00 	mov.w	fp, #0
   13f18:	455d      	cmp	r5, fp
   13f1a:	dc45      	bgt.n	13fa8 <log_output_process+0x210>
			print_formatted(output, "%02x ", data[i]);
   13f1c:	9b05      	ldr	r3, [sp, #20]
   13f1e:	4651      	mov	r1, sl
   13f20:	781a      	ldrb	r2, [r3, #0]
   13f22:	4620      	mov	r0, r4
   13f24:	f7ff ff18 	bl	13d58 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13f28:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
   13f2c:	f01b 0f07 	tst.w	fp, #7
   13f30:	d103      	bne.n	13f3a <log_output_process+0x1a2>
			print_formatted(output, " ");
   13f32:	4649      	mov	r1, r9
   13f34:	4620      	mov	r0, r4
   13f36:	f7ff ff0f 	bl	13d58 <print_formatted>
		if (i < length) {
   13f3a:	45d8      	cmp	r8, fp
   13f3c:	d93b      	bls.n	13fb6 <log_output_process+0x21e>
			print_formatted(output, "%02x ", data[i]);
   13f3e:	9b05      	ldr	r3, [sp, #20]
   13f40:	4651      	mov	r1, sl
   13f42:	f813 200b 	ldrb.w	r2, [r3, fp]
   13f46:	4620      	mov	r0, r4
   13f48:	f7ff ff06 	bl	13d58 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13f4c:	f10b 0b01 	add.w	fp, fp, #1
   13f50:	f1bb 0f10 	cmp.w	fp, #16
   13f54:	d1ea      	bne.n	13f2c <log_output_process+0x194>
	print_formatted(output, "|");
   13f56:	4936      	ldr	r1, [pc, #216]	; (14030 <log_output_process+0x298>)
   13f58:	4620      	mov	r0, r4
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13f5a:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
   13f5e:	f7ff fefb 	bl	13d58 <print_formatted>
		if (i < length) {
   13f62:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
   13f64:	9b05      	ldr	r3, [sp, #20]
   13f66:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
   13f68:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
   13f6c:	295f      	cmp	r1, #95	; 0x5f
   13f6e:	bf28      	it	cs
   13f70:	222e      	movcs	r2, #46	; 0x2e
   13f72:	4930      	ldr	r1, [pc, #192]	; (14034 <log_output_process+0x29c>)
   13f74:	4620      	mov	r0, r4
   13f76:	f7ff feef 	bl	13d58 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13f7a:	f10b 0b01 	add.w	fp, fp, #1
   13f7e:	f1bb 0f10 	cmp.w	fp, #16
   13f82:	d01d      	beq.n	13fc0 <log_output_process+0x228>
		if (i > 0 && !(i % 8)) {
   13f84:	f01b 0f07 	tst.w	fp, #7
   13f88:	d103      	bne.n	13f92 <log_output_process+0x1fa>
			print_formatted(output, " ");
   13f8a:	4649      	mov	r1, r9
   13f8c:	4620      	mov	r0, r4
   13f8e:	f7ff fee3 	bl	13d58 <print_formatted>
		if (i < length) {
   13f92:	45d8      	cmp	r8, fp
   13f94:	465a      	mov	r2, fp
   13f96:	d8e5      	bhi.n	13f64 <log_output_process+0x1cc>
			print_formatted(output, " ");
   13f98:	4649      	mov	r1, r9
   13f9a:	4620      	mov	r0, r4
   13f9c:	f7ff fedc 	bl	13d58 <print_formatted>
   13fa0:	e7eb      	b.n	13f7a <log_output_process+0x1e2>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   13fa2:	481f      	ldr	r0, [pc, #124]	; (14020 <log_output_process+0x288>)
		prefix_offset = 0;
   13fa4:	9d04      	ldr	r5, [sp, #16]
   13fa6:	e7a1      	b.n	13eec <log_output_process+0x154>
		print_formatted(output, " ");
   13fa8:	4649      	mov	r1, r9
   13faa:	4620      	mov	r0, r4
   13fac:	f7ff fed4 	bl	13d58 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   13fb0:	f10b 0b01 	add.w	fp, fp, #1
   13fb4:	e7b0      	b.n	13f18 <log_output_process+0x180>
			print_formatted(output, "   ");
   13fb6:	4920      	ldr	r1, [pc, #128]	; (14038 <log_output_process+0x2a0>)
   13fb8:	4620      	mov	r0, r4
   13fba:	f7ff fecd 	bl	13d58 <print_formatted>
   13fbe:	e7c5      	b.n	13f4c <log_output_process+0x1b4>
		data += length;
   13fc0:	9b05      	ldr	r3, [sp, #20]
	} while (len);
   13fc2:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
   13fc6:	4443      	add	r3, r8
   13fc8:	9305      	str	r3, [sp, #20]
	} while (len);
   13fca:	d19a      	bne.n	13f02 <log_output_process+0x16a>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
   13fcc:	9b04      	ldr	r3, [sp, #16]
   13fce:	2b00      	cmp	r3, #0
   13fd0:	f47f af43 	bne.w	13e5a <log_output_process+0xc2>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
   13fd4:	4620      	mov	r0, r4
}
   13fd6:	b009      	add	sp, #36	; 0x24
   13fd8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
   13fdc:	f014 bb38 	b.w	28650 <log_output_flush>
		print_formatted(output, "%s", log_color);
   13fe0:	4a06      	ldr	r2, [pc, #24]	; (13ffc <log_output_process+0x264>)
   13fe2:	4905      	ldr	r1, [pc, #20]	; (13ff8 <log_output_process+0x260>)
   13fe4:	4620      	mov	r0, r4
   13fe6:	f7ff feb7 	bl	13d58 <print_formatted>
}
   13fea:	e739      	b.n	13e60 <log_output_process+0xc8>
   13fec:	0002dd15 	.word	0x0002dd15
   13ff0:	0002dd19 	.word	0x0002dd19
   13ff4:	0002ce70 	.word	0x0002ce70
   13ff8:	0002ea21 	.word	0x0002ea21
   13ffc:	0002dd10 	.word	0x0002dd10
   14000:	0002ce84 	.word	0x0002ce84
   14004:	0002dd3e 	.word	0x0002dd3e
   14008:	0002dd44 	.word	0x0002dd44
   1400c:	0002dd48 	.word	0x0002dd48
   14010:	20002e6c 	.word	0x20002e6c
   14014:	20002e68 	.word	0x20002e68
   14018:	0002dd22 	.word	0x0002dd22
   1401c:	000286a1 	.word	0x000286a1
   14020:	0002866b 	.word	0x0002866b
   14024:	00028643 	.word	0x00028643
   14028:	0002dd55 	.word	0x0002dd55
   1402c:	0002dd4d 	.word	0x0002dd4d
   14030:	0002dd57 	.word	0x0002dd57
   14034:	0002dd59 	.word	0x0002dd59
   14038:	0002dd53 	.word	0x0002dd53

0001403c <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
   1403c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
   14040:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
   14042:	684b      	ldr	r3, [r1, #4]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
   14044:	688e      	ldr	r6, [r1, #8]
   14046:	b086      	sub	sp, #24
   14048:	4605      	mov	r5, r0
   1404a:	460c      	mov	r4, r1
   1404c:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
   1404e:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
   14052:	b15b      	cbz	r3, 1406c <log_output_msg_process+0x30>
   14054:	4a13      	ldr	r2, [pc, #76]	; (140a4 <log_output_msg_process+0x68>)
   14056:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
   14058:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   1405c:	2900      	cmp	r1, #0
   1405e:	db1f      	blt.n	140a0 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
   14060:	7820      	ldrb	r0, [r4, #0]
   14062:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   14066:	f7ff fd8b 	bl	13b80 <log_source_name_get>
   1406a:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
   1406c:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
   1406e:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
   14070:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
   14074:	9700      	str	r7, [sp, #0]
   14076:	f3c2 224a 	ubfx	r2, r2, #9, #11
   1407a:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
   1407c:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
   14080:	f3c0 100b 	ubfx	r0, r0, #4, #12
   14084:	bf08      	it	eq
   14086:	2100      	moveq	r1, #0
   14088:	e9cd 0803 	strd	r0, r8, [sp, #12]
   1408c:	e9cd 1401 	strd	r1, r4, [sp, #4]
   14090:	2200      	movs	r2, #0
   14092:	4631      	mov	r1, r6
   14094:	4628      	mov	r0, r5
   14096:	f7ff fe7f 	bl	13d98 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
   1409a:	b006      	add	sp, #24
   1409c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   140a0:	2300      	movs	r3, #0
   140a2:	e7e3      	b.n	1406c <log_output_msg_process+0x30>
   140a4:	0002cad4 	.word	0x0002cad4

000140a8 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   140a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   140aa:	f242 730f 	movw	r3, #9999	; 0x270f
   140ae:	428b      	cmp	r3, r1
   140b0:	bf28      	it	cs
   140b2:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
   140b4:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   140b6:	4a0f      	ldr	r2, [pc, #60]	; (140f4 <log_output_dropped_process+0x4c>)
{
   140b8:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   140ba:	2105      	movs	r1, #5
   140bc:	4668      	mov	r0, sp
   140be:	f013 fa79 	bl	275b4 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   140c2:	6863      	ldr	r3, [r4, #4]
   140c4:	490c      	ldr	r1, [pc, #48]	; (140f8 <log_output_dropped_process+0x50>)
   140c6:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   140c8:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   140ca:	220b      	movs	r2, #11
   140cc:	4628      	mov	r0, r5
   140ce:	f014 faab 	bl	28628 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
   140d2:	6863      	ldr	r3, [r4, #4]
   140d4:	4632      	mov	r2, r6
   140d6:	4669      	mov	r1, sp
   140d8:	4628      	mov	r0, r5
   140da:	685b      	ldr	r3, [r3, #4]
   140dc:	f014 faa4 	bl	28628 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   140e0:	6863      	ldr	r3, [r4, #4]
   140e2:	4906      	ldr	r1, [pc, #24]	; (140fc <log_output_dropped_process+0x54>)
   140e4:	685b      	ldr	r3, [r3, #4]
   140e6:	221b      	movs	r2, #27
   140e8:	4628      	mov	r0, r5
   140ea:	f014 fa9d 	bl	28628 <buffer_write>
		     output->control_block->ctx);
}
   140ee:	b002      	add	sp, #8
   140f0:	bd70      	pop	{r4, r5, r6, pc}
   140f2:	bf00      	nop
   140f4:	000304eb 	.word	0x000304eb
   140f8:	0002dd78 	.word	0x0002dd78
   140fc:	0002dd5c 	.word	0x0002dd5c

00014100 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   14100:	4a07      	ldr	r2, [pc, #28]	; (14120 <log_output_timestamp_freq_set+0x20>)
   14102:	2100      	movs	r1, #0
   14104:	2301      	movs	r3, #1
   14106:	4290      	cmp	r0, r2
   14108:	d806      	bhi.n	14118 <log_output_timestamp_freq_set+0x18>
   1410a:	4a06      	ldr	r2, [pc, #24]	; (14124 <log_output_timestamp_freq_set+0x24>)
   1410c:	b901      	cbnz	r1, 14110 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
   1410e:	2301      	movs	r3, #1
   14110:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   14112:	4b05      	ldr	r3, [pc, #20]	; (14128 <log_output_timestamp_freq_set+0x28>)
   14114:	6018      	str	r0, [r3, #0]
}
   14116:	4770      	bx	lr
		frequency /= 2U;
   14118:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   1411a:	005b      	lsls	r3, r3, #1
   1411c:	2101      	movs	r1, #1
   1411e:	e7f2      	b.n	14106 <log_output_timestamp_freq_set+0x6>
   14120:	000f4240 	.word	0x000f4240
   14124:	20002e68 	.word	0x20002e68
   14128:	20002e6c 	.word	0x20002e6c

0001412c <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   1412c:	4b01      	ldr	r3, [pc, #4]	; (14134 <log_backend_rtt_init+0x8>)
   1412e:	2201      	movs	r2, #1
   14130:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   14132:	4770      	bx	lr
   14134:	2000456a 	.word	0x2000456a

00014138 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   14138:	4b01      	ldr	r3, [pc, #4]	; (14140 <format_set+0x8>)
	return 0;
}
   1413a:	2000      	movs	r0, #0
	log_format_current = log_type;
   1413c:	6019      	str	r1, [r3, #0]
}
   1413e:	4770      	bx	lr
   14140:	20002e84 	.word	0x20002e84

00014144 <panic>:
	panic_mode = true;
   14144:	4b02      	ldr	r3, [pc, #8]	; (14150 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   14146:	4803      	ldr	r0, [pc, #12]	; (14154 <panic+0x10>)
   14148:	2201      	movs	r2, #1
   1414a:	701a      	strb	r2, [r3, #0]
   1414c:	f014 ba80 	b.w	28650 <log_output_flush>
   14150:	2000456b 	.word	0x2000456b
   14154:	0002ceb4 	.word	0x0002ceb4

00014158 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   14158:	4801      	ldr	r0, [pc, #4]	; (14160 <dropped+0x8>)
   1415a:	f7ff bfa5 	b.w	140a8 <log_output_dropped_process>
   1415e:	bf00      	nop
   14160:	0002ceb4 	.word	0x0002ceb4

00014164 <process>:
{
   14164:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   14166:	4b06      	ldr	r3, [pc, #24]	; (14180 <process+0x1c>)
   14168:	6818      	ldr	r0, [r3, #0]
{
   1416a:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   1416c:	f7ff fb42 	bl	137f4 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
   14170:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   14172:	4603      	mov	r3, r0
}
   14174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
   14178:	4802      	ldr	r0, [pc, #8]	; (14184 <process+0x20>)
   1417a:	220f      	movs	r2, #15
   1417c:	4718      	bx	r3
   1417e:	bf00      	nop
   14180:	20002e84 	.word	0x20002e84
   14184:	0002ceb4 	.word	0x0002ceb4

00014188 <on_failed_write>:
	if (retry_cnt == 0) {
   14188:	b910      	cbnz	r0, 14190 <on_failed_write+0x8>
		host_present = false;
   1418a:	4b07      	ldr	r3, [pc, #28]	; (141a8 <on_failed_write+0x20>)
   1418c:	7018      	strb	r0, [r3, #0]
}
   1418e:	4770      	bx	lr
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   14190:	4b06      	ldr	r3, [pc, #24]	; (141ac <on_failed_write+0x24>)
	} else if (is_sync_mode()) {
   14192:	781b      	ldrb	r3, [r3, #0]
   14194:	b11b      	cbz	r3, 1419e <on_failed_write+0x16>
	z_impl_k_busy_wait(usec_to_wait);
   14196:	f241 3088 	movw	r0, #5000	; 0x1388
   1419a:	f018 b90a 	b.w	2c3b2 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
   1419e:	20a4      	movs	r0, #164	; 0xa4
   141a0:	2100      	movs	r1, #0
   141a2:	f00f bdb9 	b.w	23d18 <z_impl_k_sleep>
   141a6:	bf00      	nop
   141a8:	2000456a 	.word	0x2000456a
   141ac:	2000456b 	.word	0x2000456b

000141b0 <data_out_block_mode>:
{
   141b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   141b4:	f8df 9074 	ldr.w	r9, [pc, #116]	; 1422c <data_out_block_mode+0x7c>
   141b8:	4f1d      	ldr	r7, [pc, #116]	; (14230 <data_out_block_mode+0x80>)
{
   141ba:	4680      	mov	r8, r0
   141bc:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   141be:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
   141c0:	f899 5000 	ldrb.w	r5, [r9]
   141c4:	b995      	cbnz	r5, 141ec <data_out_block_mode+0x3c>
			RTT_LOCK();
   141c6:	f00e fd0d 	bl	22be4 <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   141ca:	4628      	mov	r0, r5
   141cc:	4632      	mov	r2, r6
   141ce:	4641      	mov	r1, r8
   141d0:	f00e fcb6 	bl	22b40 <SEGGER_RTT_WriteSkipNoLock>
   141d4:	4605      	mov	r5, r0
			RTT_UNLOCK();
   141d6:	f00e fd0f 	bl	22bf8 <zephyr_rtt_mutex_unlock>
		if (ret) {
   141da:	b1e5      	cbz	r5, 14216 <data_out_block_mode+0x66>
	host_present = true;
   141dc:	2301      	movs	r3, #1
   141de:	703b      	strb	r3, [r7, #0]
	if (is_panic_mode()) {
   141e0:	f899 3000 	ldrb.w	r3, [r9]
   141e4:	b973      	cbnz	r3, 14204 <data_out_block_mode+0x54>
}
   141e6:	4630      	mov	r0, r6
   141e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   141ec:	4632      	mov	r2, r6
   141ee:	4641      	mov	r1, r8
   141f0:	2000      	movs	r0, #0
   141f2:	f00e fca5 	bl	22b40 <SEGGER_RTT_WriteSkipNoLock>
   141f6:	4605      	mov	r5, r0
   141f8:	e7ef      	b.n	141da <data_out_block_mode+0x2a>
			on_failed_write(retry_cnt--);
   141fa:	4620      	mov	r0, r4
   141fc:	f7ff ffc4 	bl	14188 <on_failed_write>
   14200:	1e65      	subs	r5, r4, #1
   14202:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   14204:	2000      	movs	r0, #0
   14206:	f00e fce3 	bl	22bd0 <SEGGER_RTT_HasDataUp>
   1420a:	2800      	cmp	r0, #0
   1420c:	d0eb      	beq.n	141e6 <data_out_block_mode+0x36>
   1420e:	783b      	ldrb	r3, [r7, #0]
   14210:	2b00      	cmp	r3, #0
   14212:	d1f2      	bne.n	141fa <data_out_block_mode+0x4a>
   14214:	e7e7      	b.n	141e6 <data_out_block_mode+0x36>
		} else if (host_present) {
   14216:	783b      	ldrb	r3, [r7, #0]
   14218:	2b00      	cmp	r3, #0
   1421a:	d0e4      	beq.n	141e6 <data_out_block_mode+0x36>
			retry_cnt--;
   1421c:	3c01      	subs	r4, #1
			on_failed_write(retry_cnt);
   1421e:	4620      	mov	r0, r4
   14220:	f7ff ffb2 	bl	14188 <on_failed_write>
	} while ((ret == 0) && host_present);
   14224:	783b      	ldrb	r3, [r7, #0]
   14226:	2b00      	cmp	r3, #0
   14228:	d1ca      	bne.n	141c0 <data_out_block_mode+0x10>
   1422a:	e7dc      	b.n	141e6 <data_out_block_mode+0x36>
   1422c:	2000456b 	.word	0x2000456b
   14230:	2000456a 	.word	0x2000456a

00014234 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   14234:	4b01      	ldr	r3, [pc, #4]	; (1423c <format_set+0x8>)
	return 0;
}
   14236:	2000      	movs	r0, #0
	log_format_current = log_type;
   14238:	6019      	str	r1, [r3, #0]
}
   1423a:	4770      	bx	lr
   1423c:	20002e9c 	.word	0x20002e9c

00014240 <panic>:
	if ((rc == 0) && (pm_state == PM_DEVICE_STATE_SUSPENDED)) {
		pm_device_action_run(uart_dev, PM_DEVICE_ACTION_RESUME);
	}
#endif /* CONFIG_PM_DEVICE */

	in_panic = true;
   14240:	4b02      	ldr	r3, [pc, #8]	; (1424c <panic+0xc>)
	log_output_flush(output);
   14242:	4803      	ldr	r0, [pc, #12]	; (14250 <panic+0x10>)
   14244:	2201      	movs	r2, #1
   14246:	701a      	strb	r2, [r3, #0]
   14248:	f014 ba02 	b.w	28650 <log_output_flush>
   1424c:	2000457d 	.word	0x2000457d
   14250:	0002cee0 	.word	0x0002cee0

00014254 <dropped>:
	log_output_dropped_process(output, cnt);
   14254:	4801      	ldr	r0, [pc, #4]	; (1425c <dropped+0x8>)
   14256:	f7ff bf27 	b.w	140a8 <log_output_dropped_process>
   1425a:	bf00      	nop
   1425c:	0002cee0 	.word	0x0002cee0

00014260 <process>:
{
   14260:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   14262:	4b06      	ldr	r3, [pc, #24]	; (1427c <process+0x1c>)
   14264:	6818      	ldr	r0, [r3, #0]
{
   14266:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   14268:	f7ff fac4 	bl	137f4 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
   1426c:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   1426e:	4603      	mov	r3, r0
}
   14270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
   14274:	4802      	ldr	r0, [pc, #8]	; (14280 <process+0x20>)
   14276:	220f      	movs	r2, #15
   14278:	4718      	bx	r3
   1427a:	bf00      	nop
   1427c:	20002e9c 	.word	0x20002e9c
   14280:	0002cee0 	.word	0x0002cee0

00014284 <char_out>:
{
   14284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   14286:	4f07      	ldr	r7, [pc, #28]	; (142a4 <char_out+0x20>)
   14288:	460d      	mov	r5, r1
   1428a:	4604      	mov	r4, r0
   1428c:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
   1428e:	42b4      	cmp	r4, r6
   14290:	d101      	bne.n	14296 <char_out+0x12>
}
   14292:	4628      	mov	r0, r5
   14294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
   14296:	f814 1b01 	ldrb.w	r1, [r4], #1
   1429a:	68bb      	ldr	r3, [r7, #8]
   1429c:	4801      	ldr	r0, [pc, #4]	; (142a4 <char_out+0x20>)
   1429e:	685b      	ldr	r3, [r3, #4]
   142a0:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   142a2:	e7f4      	b.n	1428e <char_out+0xa>
   142a4:	0002c86c 	.word	0x0002c86c

000142a8 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   142a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   142ac:	4605      	mov	r5, r0
	__asm__ volatile(
   142ae:	f04f 0340 	mov.w	r3, #64	; 0x40
   142b2:	f3ef 8611 	mrs	r6, BASEPRI
   142b6:	f383 8812 	msr	BASEPRI_MAX, r3
   142ba:	f3bf 8f6f 	isb	sy
	return list->head;
   142be:	4b0e      	ldr	r3, [pc, #56]	; (142f8 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   142c0:	4f0e      	ldr	r7, [pc, #56]	; (142fc <pm_state_notify+0x54>)
   142c2:	681c      	ldr	r4, [r3, #0]
   142c4:	f8df 8038 	ldr.w	r8, [pc, #56]	; 14300 <pm_state_notify+0x58>
   142c8:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   142cc:	b92c      	cbnz	r4, 142da <pm_state_notify+0x32>
	__asm__ volatile(
   142ce:	f386 8811 	msr	BASEPRI, r6
   142d2:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   142d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
   142da:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   142de:	2d00      	cmp	r5, #0
   142e0:	bf18      	it	ne
   142e2:	4613      	movne	r3, r2
		if (callback) {
   142e4:	b12b      	cbz	r3, 142f2 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   142e6:	f898 2010 	ldrb.w	r2, [r8, #16]
   142ea:	fb09 f202 	mul.w	r2, r9, r2
   142ee:	5cb8      	ldrb	r0, [r7, r2]
   142f0:	4798      	blx	r3
	return node->next;
   142f2:	6824      	ldr	r4, [r4, #0]
   142f4:	e7ea      	b.n	142cc <pm_state_notify+0x24>
   142f6:	bf00      	nop
   142f8:	20002eb8 	.word	0x20002eb8
   142fc:	20002eac 	.word	0x20002eac
   14300:	20003a14 	.word	0x20003a14

00014304 <pm_system_resume>:

void pm_system_resume(void)
{
   14304:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   14306:	4b19      	ldr	r3, [pc, #100]	; (1436c <pm_system_resume+0x68>)
   14308:	7c1c      	ldrb	r4, [r3, #16]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1430a:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   1430e:	f004 031f 	and.w	r3, r4, #31
   14312:	2201      	movs	r2, #1
   14314:	409a      	lsls	r2, r3
   14316:	4b16      	ldr	r3, [pc, #88]	; (14370 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14318:	0961      	lsrs	r1, r4, #5
   1431a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1431e:	43d0      	mvns	r0, r2
   14320:	e853 1f00 	ldrex	r1, [r3]
   14324:	ea01 0500 	and.w	r5, r1, r0
   14328:	e843 5600 	strex	r6, r5, [r3]
   1432c:	2e00      	cmp	r6, #0
   1432e:	d1f7      	bne.n	14320 <pm_system_resume+0x1c>
   14330:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   14334:	420a      	tst	r2, r1
   14336:	d013      	beq.n	14360 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
   14338:	4b0e      	ldr	r3, [pc, #56]	; (14374 <pm_system_resume+0x70>)
   1433a:	4d0f      	ldr	r5, [pc, #60]	; (14378 <pm_system_resume+0x74>)
   1433c:	b18b      	cbz	r3, 14362 <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
   1433e:	230c      	movs	r3, #12
   14340:	4363      	muls	r3, r4
   14342:	18ea      	adds	r2, r5, r3
   14344:	5ce8      	ldrb	r0, [r5, r3]
   14346:	7851      	ldrb	r1, [r2, #1]
   14348:	f014 fe11 	bl	28f6e <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   1434c:	2000      	movs	r0, #0
   1434e:	f7ff ffab 	bl	142a8 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   14352:	230c      	movs	r3, #12
   14354:	435c      	muls	r4, r3
   14356:	192a      	adds	r2, r5, r4
   14358:	2300      	movs	r3, #0
   1435a:	512b      	str	r3, [r5, r4]
   1435c:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   14360:	bd70      	pop	{r4, r5, r6, pc}
   14362:	f383 8811 	msr	BASEPRI, r3
   14366:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   1436a:	e7ef      	b.n	1434c <pm_system_resume+0x48>
   1436c:	20003a14 	.word	0x20003a14
   14370:	20002ec0 	.word	0x20002ec0
   14374:	00028f6f 	.word	0x00028f6f
   14378:	20002eac 	.word	0x20002eac

0001437c <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   1437c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   14380:	4b35      	ldr	r3, [pc, #212]	; (14458 <pm_system_suspend+0xdc>)
{
   14382:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   14384:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
   14386:	f04f 0340 	mov.w	r3, #64	; 0x40
   1438a:	f3ef 8811 	mrs	r8, BASEPRI
   1438e:	f383 8812 	msr	BASEPRI_MAX, r3
   14392:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   14396:	240c      	movs	r4, #12
   14398:	4b30      	ldr	r3, [pc, #192]	; (1445c <pm_system_suspend+0xe0>)
   1439a:	4e31      	ldr	r6, [pc, #196]	; (14460 <pm_system_suspend+0xe4>)
   1439c:	436c      	muls	r4, r5
   1439e:	191a      	adds	r2, r3, r4
   143a0:	5d19      	ldrb	r1, [r3, r4]
   143a2:	2900      	cmp	r1, #0
   143a4:	d04c      	beq.n	14440 <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   143a6:	ca07      	ldmia	r2, {r0, r1, r2}
   143a8:	eb06 0c04 	add.w	ip, r6, r4
   143ac:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   143b0:	2200      	movs	r2, #0
   143b2:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
   143b4:	f388 8811 	msr	BASEPRI, r8
   143b8:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   143bc:	230c      	movs	r3, #12
   143be:	436b      	muls	r3, r5
   143c0:	18f2      	adds	r2, r6, r3
   143c2:	5cf0      	ldrb	r0, [r6, r3]
   143c4:	2800      	cmp	r0, #0
   143c6:	d039      	beq.n	1443c <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   143c8:	1c7b      	adds	r3, r7, #1
   143ca:	d010      	beq.n	143ee <pm_system_suspend+0x72>
			return (uint32_t)((t * to_hz + off) / from_hz);
   143cc:	f8d2 c008 	ldr.w	ip, [r2, #8]
   143d0:	4c24      	ldr	r4, [pc, #144]	; (14464 <pm_system_suspend+0xe8>)
   143d2:	4a25      	ldr	r2, [pc, #148]	; (14468 <pm_system_suspend+0xec>)
   143d4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   143d8:	2100      	movs	r1, #0
   143da:	fbec 4100 	umlal	r4, r1, ip, r0
   143de:	2300      	movs	r3, #0
   143e0:	4620      	mov	r0, r4
   143e2:	f7eb fe8d 	bl	100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
   143e6:	2101      	movs	r1, #1
   143e8:	1a38      	subs	r0, r7, r0
   143ea:	f00c f9a5 	bl	20738 <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   143ee:	f00f fbd9 	bl	23ba4 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   143f2:	2001      	movs	r0, #1
   143f4:	f7ff ff58 	bl	142a8 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   143f8:	f3bf 8f5b 	dmb	ish
   143fc:	4b1b      	ldr	r3, [pc, #108]	; (1446c <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   143fe:	096a      	lsrs	r2, r5, #5
   14400:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   14404:	f005 011f 	and.w	r1, r5, #31
   14408:	2201      	movs	r2, #1
   1440a:	408a      	lsls	r2, r1
   1440c:	e853 0f00 	ldrex	r0, [r3]
   14410:	4310      	orrs	r0, r2
   14412:	e843 0100 	strex	r1, r0, [r3]
   14416:	2900      	cmp	r1, #0
   14418:	d1f8      	bne.n	1440c <pm_system_suspend+0x90>
   1441a:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   1441e:	4b14      	ldr	r3, [pc, #80]	; (14470 <pm_system_suspend+0xf4>)
   14420:	b13b      	cbz	r3, 14432 <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
   14422:	230c      	movs	r3, #12
   14424:	fb03 f005 	mul.w	r0, r3, r5
   14428:	1833      	adds	r3, r6, r0
   1442a:	5c30      	ldrb	r0, [r6, r0]
   1442c:	7859      	ldrb	r1, [r3, #1]
   1442e:	f014 fd92 	bl	28f56 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   14432:	f7ff ff67 	bl	14304 <pm_system_resume>
	k_sched_unlock();
   14436:	f00f fbc9 	bl	23bcc <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   1443a:	2001      	movs	r0, #1
}
   1443c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
   14440:	4601      	mov	r1, r0
   14442:	4628      	mov	r0, r5
   14444:	f000 f816 	bl	14474 <pm_policy_next_state>
		if (info != NULL) {
   14448:	2800      	cmp	r0, #0
   1444a:	d0b3      	beq.n	143b4 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
   1444c:	c807      	ldmia	r0, {r0, r1, r2}
   1444e:	4434      	add	r4, r6
   14450:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   14454:	e7ae      	b.n	143b4 <pm_system_suspend+0x38>
   14456:	bf00      	nop
   14458:	20003a14 	.word	0x20003a14
   1445c:	20002ea0 	.word	0x20002ea0
   14460:	20002eac 	.word	0x20002eac
   14464:	000f423f 	.word	0x000f423f
   14468:	000f4240 	.word	0x000f4240
   1446c:	20002ec0 	.word	0x20002ec0
   14470:	00028f57 	.word	0x00028f57

00014474 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   14474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14478:	b085      	sub	sp, #20
   1447a:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   1447c:	a903      	add	r1, sp, #12
   1447e:	f000 f843 	bl	14508 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   14482:	4b1e      	ldr	r3, [pc, #120]	; (144fc <pm_policy_next_state+0x88>)
   14484:	9d03      	ldr	r5, [sp, #12]
   14486:	f8d3 a000 	ldr.w	sl, [r3]
   1448a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 14500 <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   1448e:	1e43      	subs	r3, r0, #1
   14490:	b21b      	sxth	r3, r3
   14492:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   14496:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   14498:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   1449c:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   144a0:	f04f 0b00 	mov.w	fp, #0
   144a4:	b924      	cbnz	r4, 144b0 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   144a6:	46a1      	mov	r9, r4
}
   144a8:	4648      	mov	r0, r9
   144aa:	b005      	add	sp, #20
   144ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144b0:	6868      	ldr	r0, [r5, #4]
   144b2:	4a14      	ldr	r2, [pc, #80]	; (14504 <pm_policy_next_state+0x90>)
   144b4:	46c4      	mov	ip, r8
   144b6:	4659      	mov	r1, fp
   144b8:	fbe0 c107 	umlal	ip, r1, r0, r7
   144bc:	2300      	movs	r3, #0
   144be:	4660      	mov	r0, ip
   144c0:	f7eb fe1e 	bl	100 <__aeabi_uldivmod>
   144c4:	9001      	str	r0, [sp, #4]
   144c6:	68a8      	ldr	r0, [r5, #8]
   144c8:	4a0e      	ldr	r2, [pc, #56]	; (14504 <pm_policy_next_state+0x90>)
   144ca:	46c4      	mov	ip, r8
   144cc:	4659      	mov	r1, fp
   144ce:	fbe0 c107 	umlal	ip, r1, r0, r7
   144d2:	2300      	movs	r3, #0
   144d4:	4660      	mov	r0, ip
   144d6:	f7eb fe13 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   144da:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
   144de:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   144e0:	d001      	beq.n	144e6 <pm_policy_next_state+0x72>
   144e2:	4582      	cmp	sl, r0
   144e4:	d905      	bls.n	144f2 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   144e6:	1c73      	adds	r3, r6, #1
   144e8:	d0de      	beq.n	144a8 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   144ea:	9b01      	ldr	r3, [sp, #4]
   144ec:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   144ee:	42b0      	cmp	r0, r6
   144f0:	d9da      	bls.n	144a8 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   144f2:	3c01      	subs	r4, #1
   144f4:	b2a4      	uxth	r4, r4
   144f6:	3d0c      	subs	r5, #12
   144f8:	e7d4      	b.n	144a4 <pm_policy_next_state+0x30>
   144fa:	bf00      	nop
   144fc:	200005d8 	.word	0x200005d8
   14500:	000f423f 	.word	0x000f423f
   14504:	000f4240 	.word	0x000f4240

00014508 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   14508:	b908      	cbnz	r0, 1450e <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   1450a:	4b02      	ldr	r3, [pc, #8]	; (14514 <pm_state_cpu_get_all+0xc>)
   1450c:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   1450e:	2000      	movs	r0, #0
   14510:	4770      	bx	lr
   14512:	bf00      	nop
   14514:	0002cef0 	.word	0x0002cef0

00014518 <flash_area_open>:
		user_cb(&flash_map[i], user_data);
	}
}

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
   14518:	b570      	push	{r4, r5, r6, lr}
	const struct flash_area *area;

	if (flash_map == NULL) {
   1451a:	4b11      	ldr	r3, [pc, #68]	; (14560 <flash_area_open+0x48>)
   1451c:	681c      	ldr	r4, [r3, #0]
{
   1451e:	460d      	mov	r5, r1
	if (flash_map == NULL) {
   14520:	b1dc      	cbz	r4, 1455a <flash_area_open+0x42>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   14522:	4b10      	ldr	r3, [pc, #64]	; (14564 <flash_area_open+0x4c>)
   14524:	6819      	ldr	r1, [r3, #0]
   14526:	2300      	movs	r3, #0
   14528:	428b      	cmp	r3, r1
   1452a:	db02      	blt.n	14532 <flash_area_open+0x1a>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
   1452c:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;

	return 0;
}
   14530:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
   14532:	4622      	mov	r2, r4
   14534:	f812 6b10 	ldrb.w	r6, [r2], #16
   14538:	4286      	cmp	r6, r0
   1453a:	d002      	beq.n	14542 <flash_area_open+0x2a>
	for (int i = 0; i < flash_map_entries; i++) {
   1453c:	3301      	adds	r3, #1
   1453e:	4614      	mov	r4, r2
   14540:	e7f2      	b.n	14528 <flash_area_open+0x10>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
   14542:	68e0      	ldr	r0, [r4, #12]
   14544:	b910      	cbnz	r0, 1454c <flash_area_open+0x34>
		return -ENODEV;
   14546:	f06f 0012 	mvn.w	r0, #18
   1454a:	e7f1      	b.n	14530 <flash_area_open+0x18>
   1454c:	f017 fb34 	bl	2bbb8 <z_device_is_ready>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
   14550:	2800      	cmp	r0, #0
   14552:	d0f8      	beq.n	14546 <flash_area_open+0x2e>
	*fap = area;
   14554:	602c      	str	r4, [r5, #0]
	return 0;
   14556:	2000      	movs	r0, #0
   14558:	e7ea      	b.n	14530 <flash_area_open+0x18>
		return -EACCES;
   1455a:	f06f 000c 	mvn.w	r0, #12
   1455e:	e7e7      	b.n	14530 <flash_area_open+0x18>
   14560:	200005dc 	.word	0x200005dc
   14564:	0002cef0 	.word	0x0002cef0

00014568 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   14568:	b570      	push	{r4, r5, r6, lr}
   1456a:	b088      	sub	sp, #32
   1456c:	4605      	mov	r5, r0
   1456e:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
   14570:	b2c0      	uxtb	r0, r0
   14572:	4669      	mov	r1, sp
{
   14574:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
   14576:	f7ff ffcf 	bl	14518 <flash_area_open>
	if (rc < 0 || fa == NULL) {
   1457a:	2800      	cmp	r0, #0
   1457c:	db1b      	blt.n	145b6 <flash_area_get_sectors+0x4e>
   1457e:	9800      	ldr	r0, [sp, #0]
   14580:	b1c8      	cbz	r0, 145b6 <flash_area_get_sectors+0x4e>
	cb_data->area_off = fa->fa_off;
   14582:	6843      	ldr	r3, [r0, #4]
   14584:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
   14586:	6883      	ldr	r3, [r0, #8]
	cb_data->ret_len = *cnt;
   14588:	6822      	ldr	r2, [r4, #0]
	cb_data->area_idx = idx;
   1458a:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
   1458c:	e9cd 3603 	strd	r3, r6, [sp, #12]
	cb_data->ret_idx = 0U;
   14590:	2300      	movs	r3, #0
	cb_data->status = 0;
   14592:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
   14596:	9305      	str	r3, [sp, #20]
	flash_dev = fa->fa_dev;
   14598:	68c5      	ldr	r5, [r0, #12]
	flash_area_close(fa);
   1459a:	f014 f890 	bl	286be <flash_area_close>
	if (flash_dev == NULL) {
   1459e:	b16d      	cbz	r5, 145bc <flash_area_get_sectors+0x54>
	flash_page_foreach(flash_dev, cb, cb_data);
   145a0:	4628      	mov	r0, r5
   145a2:	4908      	ldr	r1, [pc, #32]	; (145c4 <flash_area_get_sectors+0x5c>)
   145a4:	aa01      	add	r2, sp, #4
   145a6:	f017 f884 	bl	2b6b2 <flash_page_foreach>
	if (cb_data->status == 0) {
   145aa:	9807      	ldr	r0, [sp, #28]
   145ac:	b908      	cbnz	r0, 145b2 <flash_area_get_sectors+0x4a>
		*cnt = cb_data->ret_idx;
   145ae:	9b05      	ldr	r3, [sp, #20]
   145b0:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
   145b2:	b008      	add	sp, #32
   145b4:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   145b6:	f06f 0015 	mvn.w	r0, #21
   145ba:	e7fa      	b.n	145b2 <flash_area_get_sectors+0x4a>
		return -ENODEV;
   145bc:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   145c0:	e7f7      	b.n	145b2 <flash_area_get_sectors+0x4a>
   145c2:	bf00      	nop
   145c4:	000286c1 	.word	0x000286c1

000145c8 <settings_save_one>:

/*
 * Append a single value to persisted config. Don't store duplicate value.
 */
int settings_save_one(const char *name, const void *value, size_t val_len)
{
   145c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   145cc:	4b0f      	ldr	r3, [pc, #60]	; (1460c <settings_save_one+0x44>)
   145ce:	681c      	ldr	r4, [r3, #0]
{
   145d0:	4605      	mov	r5, r0
   145d2:	460e      	mov	r6, r1
   145d4:	4617      	mov	r7, r2
	if (!cs) {
   145d6:	b1ac      	cbz	r4, 14604 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   145d8:	f04f 32ff 	mov.w	r2, #4294967295
   145dc:	f04f 33ff 	mov.w	r3, #4294967295
   145e0:	480b      	ldr	r0, [pc, #44]	; (14610 <settings_save_one+0x48>)
   145e2:	f00e fdad 	bl	23140 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   145e6:	6863      	ldr	r3, [r4, #4]
   145e8:	4632      	mov	r2, r6
   145ea:	f8d3 8008 	ldr.w	r8, [r3, #8]
   145ee:	4629      	mov	r1, r5
   145f0:	463b      	mov	r3, r7
   145f2:	4620      	mov	r0, r4
   145f4:	47c0      	blx	r8
   145f6:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   145f8:	4805      	ldr	r0, [pc, #20]	; (14610 <settings_save_one+0x48>)
   145fa:	f00e fe1b 	bl	23234 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   145fe:	4620      	mov	r0, r4
   14600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   14604:	f06f 0401 	mvn.w	r4, #1
   14608:	e7f9      	b.n	145fe <settings_save_one+0x36>
   1460a:	bf00      	nop
   1460c:	20002ec4 	.word	0x20002ec4
   14610:	20000ac8 	.word	0x20000ac8

00014614 <settings_src_register>:
	parent->next = child;
   14614:	2300      	movs	r3, #0
   14616:	6003      	str	r3, [r0, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   14618:	4b04      	ldr	r3, [pc, #16]	; (1462c <settings_src_register+0x18>)
   1461a:	685a      	ldr	r2, [r3, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   1461c:	b912      	cbnz	r2, 14624 <settings_src_register+0x10>
	list->head = node;
   1461e:	e9c3 0000 	strd	r0, r0, [r3]
}
   14622:	4770      	bx	lr
	parent->next = child;
   14624:	6010      	str	r0, [r2, #0]
	list->tail = node;
   14626:	6058      	str	r0, [r3, #4]
}
   14628:	4770      	bx	lr
   1462a:	bf00      	nop
   1462c:	20002ec8 	.word	0x20002ec8

00014630 <settings_dst_register>:
	settings_save_dst = cs;
   14630:	4b01      	ldr	r3, [pc, #4]	; (14638 <settings_dst_register+0x8>)
   14632:	6018      	str	r0, [r3, #0]
}
   14634:	4770      	bx	lr
   14636:	bf00      	nop
   14638:	20002ec4 	.word	0x20002ec4

0001463c <settings_load_subtree>:
{
   1463c:	b530      	push	{r4, r5, lr}
   1463e:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
   14640:	2300      	movs	r3, #0
{
   14642:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   14644:	e9cd 3302 	strd	r3, r3, [sp, #8]
   14648:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   1464a:	f04f 33ff 	mov.w	r3, #4294967295
   1464e:	480c      	ldr	r0, [pc, #48]	; (14680 <settings_load_subtree+0x44>)
   14650:	f04f 32ff 	mov.w	r2, #4294967295
   14654:	f00e fd74 	bl	23140 <z_impl_k_mutex_lock>
	return list->head;
   14658:	4b0a      	ldr	r3, [pc, #40]	; (14684 <settings_load_subtree+0x48>)
   1465a:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   1465c:	b94c      	cbnz	r4, 14672 <settings_load_subtree+0x36>
	rc = settings_commit_subtree(subtree);
   1465e:	4628      	mov	r0, r5
   14660:	f000 f8e0 	bl	14824 <settings_commit_subtree>
   14664:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   14666:	4806      	ldr	r0, [pc, #24]	; (14680 <settings_load_subtree+0x44>)
   14668:	f00e fde4 	bl	23234 <z_impl_k_mutex_unlock>
}
   1466c:	4620      	mov	r0, r4
   1466e:	b005      	add	sp, #20
   14670:	bd30      	pop	{r4, r5, pc}
		cs->cs_itf->csi_load(cs, &arg);
   14672:	6863      	ldr	r3, [r4, #4]
   14674:	4620      	mov	r0, r4
   14676:	681b      	ldr	r3, [r3, #0]
   14678:	a901      	add	r1, sp, #4
   1467a:	4798      	blx	r3
	return node->next;
   1467c:	6824      	ldr	r4, [r4, #0]
   1467e:	e7ed      	b.n	1465c <settings_load_subtree+0x20>
   14680:	20000ac8 	.word	0x20000ac8
   14684:	20002ec8 	.word	0x20002ec8

00014688 <settings_load_subtree_direct>:
{
   14688:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
   1468a:	e9cd 0101 	strd	r0, r1, [sp, #4]
   1468e:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   14690:	f04f 33ff 	mov.w	r3, #4294967295
   14694:	480a      	ldr	r0, [pc, #40]	; (146c0 <settings_load_subtree_direct+0x38>)
   14696:	f04f 32ff 	mov.w	r2, #4294967295
   1469a:	f00e fd51 	bl	23140 <z_impl_k_mutex_lock>
	return list->head;
   1469e:	4b09      	ldr	r3, [pc, #36]	; (146c4 <settings_load_subtree_direct+0x3c>)
   146a0:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   146a2:	b92c      	cbnz	r4, 146b0 <settings_load_subtree_direct+0x28>
	return z_impl_k_mutex_unlock(mutex);
   146a4:	4806      	ldr	r0, [pc, #24]	; (146c0 <settings_load_subtree_direct+0x38>)
   146a6:	f00e fdc5 	bl	23234 <z_impl_k_mutex_unlock>
}
   146aa:	4620      	mov	r0, r4
   146ac:	b004      	add	sp, #16
   146ae:	bd10      	pop	{r4, pc}
		cs->cs_itf->csi_load(cs, &arg);
   146b0:	6863      	ldr	r3, [r4, #4]
   146b2:	4620      	mov	r0, r4
   146b4:	681b      	ldr	r3, [r3, #0]
   146b6:	a901      	add	r1, sp, #4
   146b8:	4798      	blx	r3
	return node->next;
   146ba:	6824      	ldr	r4, [r4, #0]
   146bc:	e7f1      	b.n	146a2 <settings_load_subtree_direct+0x1a>
   146be:	bf00      	nop
   146c0:	20000ac8 	.word	0x20000ac8
   146c4:	20002ec8 	.word	0x20002ec8

000146c8 <settings_store_init>:
	list->head = NULL;
   146c8:	4b02      	ldr	r3, [pc, #8]	; (146d4 <settings_store_init+0xc>)
   146ca:	2200      	movs	r2, #0
	list->tail = NULL;
   146cc:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   146d0:	4770      	bx	lr
   146d2:	bf00      	nop
   146d4:	20002ec8 	.word	0x20002ec8

000146d8 <settings_init>:
	list->head = NULL;
   146d8:	4b02      	ldr	r3, [pc, #8]	; (146e4 <settings_init+0xc>)
   146da:	2200      	movs	r2, #0
	list->tail = NULL;
   146dc:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   146e0:	f7ff bff2 	b.w	146c8 <settings_store_init>
   146e4:	20002ed0 	.word	0x20002ed0

000146e8 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   146e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   146ec:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   146ee:	460c      	mov	r4, r1
   146f0:	b109      	cbz	r1, 146f6 <settings_parse_and_lookup+0xe>
		*next = NULL;
   146f2:	2300      	movs	r3, #0
   146f4:	600b      	str	r3, [r1, #0]
{
   146f6:	4d1f      	ldr	r5, [pc, #124]	; (14774 <settings_parse_and_lookup+0x8c>)
	}

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   146f8:	f8df 907c 	ldr.w	r9, [pc, #124]	; 14778 <settings_parse_and_lookup+0x90>
{
   146fc:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   146fe:	454d      	cmp	r5, r9
   14700:	d30f      	bcc.n	14722 <settings_parse_and_lookup+0x3a>
	return list->head;
   14702:	4b1e      	ldr	r3, [pc, #120]	; (1477c <settings_parse_and_lookup+0x94>)
   14704:	681d      	ldr	r5, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   14706:	b385      	cbz	r5, 1476a <settings_parse_and_lookup+0x82>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   14708:	f855 8c14 	ldr.w	r8, [r5, #-20]
   1470c:	aa01      	add	r2, sp, #4
   1470e:	4641      	mov	r1, r8
   14710:	4638      	mov	r0, r7
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   14712:	3d14      	subs	r5, #20
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   14714:	f013 fffd 	bl	28712 <settings_name_steq>
   14718:	b310      	cbz	r0, 14760 <settings_parse_and_lookup+0x78>
			continue;
		}
		if (!bestmatch) {
   1471a:	b9d6      	cbnz	r6, 14752 <settings_parse_and_lookup+0x6a>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
   1471c:	bb14      	cbnz	r4, 14764 <settings_parse_and_lookup+0x7c>
{
   1471e:	462e      	mov	r6, r5
   14720:	e01e      	b.n	14760 <settings_parse_and_lookup+0x78>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   14722:	f8d5 8000 	ldr.w	r8, [r5]
   14726:	aa01      	add	r2, sp, #4
   14728:	4641      	mov	r1, r8
   1472a:	4638      	mov	r0, r7
   1472c:	f013 fff1 	bl	28712 <settings_name_steq>
   14730:	b150      	cbz	r0, 14748 <settings_parse_and_lookup+0x60>
		if (!bestmatch) {
   14732:	b916      	cbnz	r6, 1473a <settings_parse_and_lookup+0x52>
			if (next) {
   14734:	b954      	cbnz	r4, 1474c <settings_parse_and_lookup+0x64>
{
   14736:	462e      	mov	r6, r5
   14738:	e006      	b.n	14748 <settings_parse_and_lookup+0x60>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   1473a:	6831      	ldr	r1, [r6, #0]
   1473c:	2200      	movs	r2, #0
   1473e:	4640      	mov	r0, r8
   14740:	f013 ffe7 	bl	28712 <settings_name_steq>
   14744:	2800      	cmp	r0, #0
   14746:	d1f5      	bne.n	14734 <settings_parse_and_lookup+0x4c>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   14748:	3514      	adds	r5, #20
   1474a:	e7d8      	b.n	146fe <settings_parse_and_lookup+0x16>
				*next = tmpnext;
   1474c:	9b01      	ldr	r3, [sp, #4]
   1474e:	6023      	str	r3, [r4, #0]
   14750:	e7f1      	b.n	14736 <settings_parse_and_lookup+0x4e>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   14752:	6831      	ldr	r1, [r6, #0]
   14754:	2200      	movs	r2, #0
   14756:	4640      	mov	r0, r8
   14758:	f013 ffdb 	bl	28712 <settings_name_steq>
   1475c:	2800      	cmp	r0, #0
   1475e:	d1dd      	bne.n	1471c <settings_parse_and_lookup+0x34>
	return node->next;
   14760:	696d      	ldr	r5, [r5, #20]
   14762:	e7d0      	b.n	14706 <settings_parse_and_lookup+0x1e>
				*next = tmpnext;
   14764:	9b01      	ldr	r3, [sp, #4]
   14766:	6023      	str	r3, [r4, #0]
   14768:	e7d9      	b.n	1471e <settings_parse_and_lookup+0x36>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   1476a:	4630      	mov	r0, r6
   1476c:	b003      	add	sp, #12
   1476e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14772:	bf00      	nop
   14774:	0002cc34 	.word	0x0002cc34
   14778:	0002ccac 	.word	0x0002ccac
   1477c:	20002ed0 	.word	0x20002ed0

00014780 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
   14780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14784:	b084      	sub	sp, #16
   14786:	af02      	add	r7, sp, #8
   14788:	4604      	mov	r4, r0
   1478a:	f8d7 9028 	ldr.w	r9, [r7, #40]	; 0x28
	int rc;
	const char *name_key = name;
   1478e:	6078      	str	r0, [r7, #4]
{
   14790:	460d      	mov	r5, r1
   14792:	4616      	mov	r6, r2
   14794:	4698      	mov	r8, r3

	if (load_arg && load_arg->subtree &&
   14796:	f1b9 0f00 	cmp.w	r9, #0
   1479a:	d007      	beq.n	147ac <settings_call_set_handler+0x2c>
   1479c:	f8d9 1000 	ldr.w	r1, [r9]
   147a0:	bb31      	cbnz	r1, 147f0 <settings_call_set_handler+0x70>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
		return 0;
	}

	if (load_arg && load_arg->cb) {
   147a2:	f8d9 a004 	ldr.w	sl, [r9, #4]
   147a6:	f1ba 0f00 	cmp.w	sl, #0
   147aa:	d128      	bne.n	147fe <settings_call_set_handler+0x7e>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
				  load_arg->param);
	} else {
		struct settings_handler_static *ch;

		ch = settings_parse_and_lookup(name, &name_key);
   147ac:	1d39      	adds	r1, r7, #4
   147ae:	4620      	mov	r0, r4
   147b0:	f7ff ff9a 	bl	146e8 <settings_parse_and_lookup>
		if (!ch) {
   147b4:	b308      	cbz	r0, 147fa <settings_call_set_handler+0x7a>
			return 0;
		}

		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   147b6:	f8d0 9008 	ldr.w	r9, [r0, #8]
   147ba:	6878      	ldr	r0, [r7, #4]
   147bc:	4643      	mov	r3, r8
   147be:	4632      	mov	r2, r6
   147c0:	4629      	mov	r1, r5
   147c2:	47c8      	blx	r9

		if (rc != 0) {
   147c4:	b1c8      	cbz	r0, 147fa <settings_call_set_handler+0x7a>
			LOG_ERR("set-value failure. key: %s error(%d)",
   147c6:	466d      	mov	r5, sp
   147c8:	b08a      	sub	sp, #40	; 0x28
   147ca:	aa02      	add	r2, sp, #8
   147cc:	4b12      	ldr	r3, [pc, #72]	; (14818 <settings_call_set_handler+0x98>)
   147ce:	61d0      	str	r0, [r2, #28]
   147d0:	e9c2 3405 	strd	r3, r4, [r2, #20]
   147d4:	f44f 7300 	mov.w	r3, #512	; 0x200
   147d8:	8413      	strh	r3, [r2, #32]
   147da:	4b10      	ldr	r3, [pc, #64]	; (1481c <settings_call_set_handler+0x9c>)
   147dc:	f842 3f10 	str.w	r3, [r2, #16]!
   147e0:	480f      	ldr	r0, [pc, #60]	; (14820 <settings_call_set_handler+0xa0>)
   147e2:	2300      	movs	r3, #0
   147e4:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   147e8:	f7ff f9ec 	bl	13bc4 <z_impl_z_log_msg_static_create>
   147ec:	46ad      	mov	sp, r5
				name, rc);
			/* Ignoring the error */
			rc = 0;
   147ee:	e004      	b.n	147fa <settings_call_set_handler+0x7a>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   147f0:	1d3a      	adds	r2, r7, #4
   147f2:	f013 ff8e 	bl	28712 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   147f6:	2800      	cmp	r0, #0
   147f8:	d1d3      	bne.n	147a2 <settings_call_set_handler+0x22>
		return 0;
   147fa:	2000      	movs	r0, #0
   147fc:	e007      	b.n	1480e <settings_call_set_handler+0x8e>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   147fe:	f8d9 3008 	ldr.w	r3, [r9, #8]
   14802:	9300      	str	r3, [sp, #0]
   14804:	6878      	ldr	r0, [r7, #4]
   14806:	4643      	mov	r3, r8
   14808:	4632      	mov	r2, r6
   1480a:	4629      	mov	r1, r5
   1480c:	47d0      	blx	sl
			LOG_DBG("set-value OK. key: %s",
				name);
		}
	}
	return rc;
}
   1480e:	3708      	adds	r7, #8
   14810:	46bd      	mov	sp, r7
   14812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14816:	bf00      	nop
   14818:	0002ddd1 	.word	0x0002ddd1
   1481c:	01000004 	.word	0x01000004
   14820:	0002cbfc 	.word	0x0002cbfc

00014824 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   14824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc;
	int rc2;

	rc = 0;

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   14826:	4c18      	ldr	r4, [pc, #96]	; (14888 <settings_commit_subtree+0x64>)
   14828:	4f18      	ldr	r7, [pc, #96]	; (1488c <settings_commit_subtree+0x68>)
{
   1482a:	4606      	mov	r6, r0
	rc = 0;
   1482c:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   1482e:	42bc      	cmp	r4, r7
   14830:	d308      	bcc.n	14844 <settings_commit_subtree+0x20>
	return list->head;
   14832:	4b17      	ldr	r3, [pc, #92]	; (14890 <settings_commit_subtree+0x6c>)
   14834:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   14836:	b32c      	cbz	r4, 14884 <settings_commit_subtree+0x60>
   14838:	3c14      	subs	r4, #20
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   1483a:	b9b6      	cbnz	r6, 1486a <settings_commit_subtree+0x46>
			continue;
		}
		if (ch->h_commit) {
   1483c:	68e3      	ldr	r3, [r4, #12]
   1483e:	b9e3      	cbnz	r3, 1487a <settings_commit_subtree+0x56>
	return node->next;
   14840:	6964      	ldr	r4, [r4, #20]
   14842:	e7f8      	b.n	14836 <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   14844:	b92e      	cbnz	r6, 14852 <settings_commit_subtree+0x2e>
		if (ch->h_commit) {
   14846:	68e3      	ldr	r3, [r4, #12]
   14848:	b95b      	cbnz	r3, 14862 <settings_commit_subtree+0x3e>
{
   1484a:	4628      	mov	r0, r5
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   1484c:	3414      	adds	r4, #20
   1484e:	4605      	mov	r5, r0
   14850:	e7ed      	b.n	1482e <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   14852:	6820      	ldr	r0, [r4, #0]
   14854:	2200      	movs	r2, #0
   14856:	4631      	mov	r1, r6
   14858:	f013 ff5b 	bl	28712 <settings_name_steq>
   1485c:	2800      	cmp	r0, #0
   1485e:	d1f2      	bne.n	14846 <settings_commit_subtree+0x22>
   14860:	e7f3      	b.n	1484a <settings_commit_subtree+0x26>
			rc2 = ch->h_commit();
   14862:	4798      	blx	r3
			if (!rc) {
   14864:	2d00      	cmp	r5, #0
   14866:	d1f0      	bne.n	1484a <settings_commit_subtree+0x26>
   14868:	e7f0      	b.n	1484c <settings_commit_subtree+0x28>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   1486a:	6820      	ldr	r0, [r4, #0]
   1486c:	2200      	movs	r2, #0
   1486e:	4631      	mov	r1, r6
   14870:	f013 ff4f 	bl	28712 <settings_name_steq>
   14874:	2800      	cmp	r0, #0
   14876:	d1e1      	bne.n	1483c <settings_commit_subtree+0x18>
   14878:	e7e2      	b.n	14840 <settings_commit_subtree+0x1c>
			rc2 = ch->h_commit();
   1487a:	4798      	blx	r3
			if (!rc) {
				rc = rc2;
   1487c:	2d00      	cmp	r5, #0
   1487e:	bf08      	it	eq
   14880:	4605      	moveq	r5, r0
   14882:	e7dd      	b.n	14840 <settings_commit_subtree+0x1c>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   14884:	4628      	mov	r0, r5
   14886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14888:	0002cc34 	.word	0x0002cc34
   1488c:	0002ccac 	.word	0x0002ccac
   14890:	20002ed0 	.word	0x20002ed0

00014894 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   14894:	b538      	push	{r3, r4, r5, lr}

	int err = 0;

	k_mutex_lock(&settings_lock, K_FOREVER);

	if (!settings_subsys_initialized) {
   14896:	4d0c      	ldr	r5, [pc, #48]	; (148c8 <settings_subsys_init+0x34>)
	return z_impl_k_mutex_lock(mutex, timeout);
   14898:	480c      	ldr	r0, [pc, #48]	; (148cc <settings_subsys_init+0x38>)
   1489a:	f04f 33ff 	mov.w	r3, #4294967295
   1489e:	f04f 32ff 	mov.w	r2, #4294967295
   148a2:	f00e fc4d 	bl	23140 <z_impl_k_mutex_lock>
   148a6:	782b      	ldrb	r3, [r5, #0]
   148a8:	b93b      	cbnz	r3, 148ba <settings_subsys_init+0x26>
		settings_init();
   148aa:	f7ff ff15 	bl	146d8 <settings_init>

		err = settings_backend_init();
   148ae:	f000 f86d 	bl	1498c <settings_backend_init>

		if (!err) {
   148b2:	4604      	mov	r4, r0
   148b4:	b910      	cbnz	r0, 148bc <settings_subsys_init+0x28>
			settings_subsys_initialized = true;
   148b6:	2301      	movs	r3, #1
   148b8:	702b      	strb	r3, [r5, #0]
	int err = 0;
   148ba:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
   148bc:	4803      	ldr	r0, [pc, #12]	; (148cc <settings_subsys_init+0x38>)
   148be:	f00e fcb9 	bl	23234 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&settings_lock);

	return err;
}
   148c2:	4620      	mov	r0, r4
   148c4:	bd38      	pop	{r3, r4, r5, pc}
   148c6:	bf00      	nop
   148c8:	2000457e 	.word	0x2000457e
   148cc:	20000ac8 	.word	0x20000ac8

000148d0 <settings_nvs_load>:
}
#endif /* CONFIG_SETTINGS_NVS_NAME_CACHE */

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   148d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
   148d4:	8f04      	ldrh	r4, [r0, #56]	; 0x38

#if CONFIG_SETTINGS_NVS_NAME_CACHE
		settings_nvs_cache_add(cf, name, name_id);
#endif

		ret = settings_call_set_handler(
   148d6:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 14988 <settings_nvs_load+0xb8>
	name_id = cf->last_name_id + 1;
   148da:	3401      	adds	r4, #1
{
   148dc:	b098      	sub	sp, #96	; 0x60
   148de:	4680      	mov	r8, r0
   148e0:	4689      	mov	r9, r1
	name_id = cf->last_name_id + 1;
   148e2:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   148e4:	f100 0608 	add.w	r6, r0, #8
		name_id--;
   148e8:	1e65      	subs	r5, r4, #1
   148ea:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
   148ec:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   148f0:	d047      	beq.n	14982 <settings_nvs_load+0xb2>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   148f2:	234a      	movs	r3, #74	; 0x4a
   148f4:	aa05      	add	r2, sp, #20
   148f6:	4629      	mov	r1, r5
   148f8:	4630      	mov	r0, r6
   148fa:	f013 fe2b 	bl	28554 <nvs_read>
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   148fe:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
   14902:	343f      	adds	r4, #63	; 0x3f
   14904:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   14906:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   14908:	4621      	mov	r1, r4
   1490a:	2301      	movs	r3, #1
   1490c:	f10d 020b 	add.w	r2, sp, #11
   14910:	4630      	mov	r0, r6
   14912:	f013 fe1f 	bl	28554 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
   14916:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   14918:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
   1491a:	dc03      	bgt.n	14924 <settings_nvs_load+0x54>
   1491c:	2800      	cmp	r0, #0
   1491e:	dc03      	bgt.n	14928 <settings_nvs_load+0x58>
{
   14920:	462c      	mov	r4, r5
   14922:	e7e1      	b.n	148e8 <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
   14924:	2800      	cmp	r0, #0
   14926:	dc16      	bgt.n	14956 <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
   14928:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
   1492c:	42ab      	cmp	r3, r5
   1492e:	d109      	bne.n	14944 <settings_nvs_load+0x74>
				cf->last_name_id--;
   14930:	4642      	mov	r2, r8
   14932:	1e6b      	subs	r3, r5, #1
   14934:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   14938:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1493c:	2302      	movs	r3, #2
   1493e:	4630      	mov	r0, r6
   14940:	f7fe fd60 	bl	13404 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
   14944:	4629      	mov	r1, r5
   14946:	4630      	mov	r0, r6
   14948:	f013 fe00 	bl	2854c <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
   1494c:	4621      	mov	r1, r4
   1494e:	4630      	mov	r0, r6
   14950:	f013 fdfc 	bl	2854c <nvs_delete>
			continue;
   14954:	e7e4      	b.n	14920 <settings_nvs_load+0x50>
		name[rc1] = '\0';
   14956:	f107 0360 	add.w	r3, r7, #96	; 0x60
   1495a:	eb0d 0703 	add.w	r7, sp, r3
   1495e:	2300      	movs	r3, #0
   14960:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
   14964:	4652      	mov	r2, sl
   14966:	f8cd 9000 	str.w	r9, [sp]
   1496a:	ab03      	add	r3, sp, #12
   1496c:	a805      	add	r0, sp, #20
		read_fn_arg.fs = &cf->cf_nvs;
   1496e:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
   14970:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
   14974:	f7ff ff04 	bl	14780 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
   14978:	2800      	cmp	r0, #0
   1497a:	d0d1      	beq.n	14920 <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
   1497c:	b018      	add	sp, #96	; 0x60
   1497e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14982:	2000      	movs	r0, #0
	return ret;
   14984:	e7fa      	b.n	1497c <settings_nvs_load+0xac>
   14986:	bf00      	nop
   14988:	00028783 	.word	0x00028783

0001498c <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
   1498c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
   1498e:	2301      	movs	r3, #1

	rc = flash_area_open(SETTINGS_PARTITION, &fa);
   14990:	4669      	mov	r1, sp
   14992:	2003      	movs	r0, #3
	uint32_t sector_cnt = 1;
   14994:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(SETTINGS_PARTITION, &fa);
   14996:	f7ff fdbf 	bl	14518 <flash_area_open>
	if (rc) {
   1499a:	4604      	mov	r4, r0
   1499c:	bb60      	cbnz	r0, 149f8 <settings_backend_init+0x6c>
		return rc;
	}

	rc = flash_area_get_sectors(SETTINGS_PARTITION, &sector_cnt,
   1499e:	aa02      	add	r2, sp, #8
   149a0:	a901      	add	r1, sp, #4
   149a2:	2003      	movs	r0, #3
   149a4:	f7ff fde0 	bl	14568 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc != 0 && rc != -ENOMEM) {
   149a8:	4604      	mov	r4, r0
   149aa:	b110      	cbz	r0, 149b2 <settings_backend_init+0x26>
   149ac:	f110 0f0c 	cmn.w	r0, #12
   149b0:	d122      	bne.n	149f8 <settings_backend_init+0x6c>
		return rc;
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
   149b2:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
   149b4:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   149b8:	d223      	bcs.n	14a02 <settings_backend_init+0x76>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
   149ba:	9a00      	ldr	r2, [sp, #0]
   149bc:	2300      	movs	r3, #0
   149be:	6894      	ldr	r4, [r2, #8]
	size_t nvs_sector_size, nvs_size = 0;
   149c0:	4618      	mov	r0, r3
		nvs_size += nvs_sector_size;
   149c2:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
   149c4:	4284      	cmp	r4, r0
   149c6:	d31a      	bcc.n	149fe <settings_backend_init+0x72>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
   149c8:	3301      	adds	r3, #1
   149ca:	2b08      	cmp	r3, #8
   149cc:	d1f9      	bne.n	149c2 <settings_backend_init+0x36>
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   149ce:	4d0e      	ldr	r5, [pc, #56]	; (14a08 <settings_backend_init+0x7c>)
   149d0:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.cf_nvs.sector_count = cnt;
   149d2:	82eb      	strh	r3, [r5, #22]
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   149d4:	6853      	ldr	r3, [r2, #4]
   149d6:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev = fa->fa_dev;

	rc = settings_nvs_backend_init(&default_settings_nvs);
   149d8:	4628      	mov	r0, r5
	default_settings_nvs.flash_dev = fa->fa_dev;
   149da:	68d3      	ldr	r3, [r2, #12]
   149dc:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
   149de:	f013 ff6a 	bl	288b6 <settings_nvs_backend_init>
	if (rc) {
   149e2:	4604      	mov	r4, r0
   149e4:	b940      	cbnz	r0, 149f8 <settings_backend_init+0x6c>
	cf->cf_store.cs_itf = &settings_nvs_itf;
   149e6:	4e09      	ldr	r6, [pc, #36]	; (14a0c <settings_backend_init+0x80>)
   149e8:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
   149ea:	4628      	mov	r0, r5
   149ec:	f7ff fe12 	bl	14614 <settings_src_register>
	settings_dst_register(&cf->cf_store);
   149f0:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
   149f2:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
   149f4:	f7ff fe1c 	bl	14630 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
   149f8:	4620      	mov	r0, r4
   149fa:	b004      	add	sp, #16
   149fc:	bd70      	pop	{r4, r5, r6, pc}
   149fe:	b29b      	uxth	r3, r3
   14a00:	e7e5      	b.n	149ce <settings_backend_init+0x42>
		return -EDOM;
   14a02:	f06f 0420 	mvn.w	r4, #32
   14a06:	e7f7      	b.n	149f8 <settings_backend_init+0x6c>
   14a08:	20002ed8 	.word	0x20002ed8
   14a0c:	200005e0 	.word	0x200005e0

00014a10 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   14a10:	4904      	ldr	r1, [pc, #16]	; (14a24 <sub_bytes+0x14>)
   14a12:	1e43      	subs	r3, r0, #1
   14a14:	300f      	adds	r0, #15
   14a16:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   14a1a:	5c8a      	ldrb	r2, [r1, r2]
   14a1c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   14a1e:	4283      	cmp	r3, r0
   14a20:	d1f9      	bne.n	14a16 <sub_bytes+0x6>
	}
}
   14a22:	4770      	bx	lr
   14a24:	0002ddf6 	.word	0x0002ddf6

00014a28 <tc_aes128_set_encrypt_key>:
{
   14a28:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   14a2a:	4e26      	ldr	r6, [pc, #152]	; (14ac4 <tc_aes128_set_encrypt_key+0x9c>)
{
   14a2c:	4607      	mov	r7, r0
   14a2e:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   14a30:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   14a32:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   14a34:	ad01      	add	r5, sp, #4
   14a36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   14a38:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   14a3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   14a3c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   14a40:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   14a44:	4638      	mov	r0, r7
   14a46:	2f00      	cmp	r7, #0
   14a48:	d038      	beq.n	14abc <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   14a4a:	2c00      	cmp	r4, #0
   14a4c:	d038      	beq.n	14ac0 <tc_aes128_set_encrypt_key+0x98>
   14a4e:	1f38      	subs	r0, r7, #4
   14a50:	4621      	mov	r1, r4
   14a52:	4602      	mov	r2, r0
   14a54:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   14a56:	784b      	ldrb	r3, [r1, #1]
   14a58:	780d      	ldrb	r5, [r1, #0]
   14a5a:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   14a5c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   14a60:	78cd      	ldrb	r5, [r1, #3]
   14a62:	432b      	orrs	r3, r5
   14a64:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   14a66:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   14a68:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   14a6c:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   14a6e:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   14a72:	d1f0      	bne.n	14a56 <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   14a74:	4c14      	ldr	r4, [pc, #80]	; (14ac8 <tc_aes128_set_encrypt_key+0xa0>)
   14a76:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   14a78:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   14a7a:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   14a7c:	d116      	bne.n	14aac <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   14a7e:	f3c3 4207 	ubfx	r2, r3, #16, #8
   14a82:	5ca5      	ldrb	r5, [r4, r2]
   14a84:	0e1a      	lsrs	r2, r3, #24
   14a86:	5ca2      	ldrb	r2, [r4, r2]
   14a88:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   14a8c:	f3c3 2507 	ubfx	r5, r3, #8, #8
   14a90:	b2db      	uxtb	r3, r3
   14a92:	5d65      	ldrb	r5, [r4, r5]
   14a94:	5ce3      	ldrb	r3, [r4, r3]
   14a96:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   14a9a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   14a9e:	f021 0303 	bic.w	r3, r1, #3
   14aa2:	3330      	adds	r3, #48	; 0x30
   14aa4:	446b      	add	r3, sp
   14aa6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   14aaa:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   14aac:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   14ab0:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   14ab2:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   14ab4:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   14ab6:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   14ab8:	d1de      	bne.n	14a78 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   14aba:	2001      	movs	r0, #1
}
   14abc:	b00d      	add	sp, #52	; 0x34
   14abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   14ac0:	4620      	mov	r0, r4
   14ac2:	e7fb      	b.n	14abc <tc_aes128_set_encrypt_key+0x94>
   14ac4:	0002ccd8 	.word	0x0002ccd8
   14ac8:	0002ddf6 	.word	0x0002ddf6

00014acc <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
   14acc:	4801      	ldr	r0, [pc, #4]	; (14ad4 <nrf_cc3xx_platform_abort_init+0x8>)
   14ace:	f010 b833 	b.w	24b38 <nrf_cc3xx_platform_set_abort>
   14ad2:	bf00      	nop
   14ad4:	0002cf34 	.word	0x0002cf34

00014ad8 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   14ad8:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
   14ada:	4604      	mov	r4, r0
   14adc:	b918      	cbnz	r0, 14ae6 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
   14ade:	4b0f      	ldr	r3, [pc, #60]	; (14b1c <mutex_free_platform+0x44>)
   14ae0:	480f      	ldr	r0, [pc, #60]	; (14b20 <mutex_free_platform+0x48>)
   14ae2:	685b      	ldr	r3, [r3, #4]
   14ae4:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   14ae6:	6861      	ldr	r1, [r4, #4]
   14ae8:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
   14aec:	d00f      	beq.n	14b0e <mutex_free_platform+0x36>
   14aee:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
   14af2:	d00c      	beq.n	14b0e <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   14af4:	4d0b      	ldr	r5, [pc, #44]	; (14b24 <mutex_free_platform+0x4c>)
   14af6:	42a9      	cmp	r1, r5
   14af8:	d009      	beq.n	14b0e <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   14afa:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
   14afe:	d007      	beq.n	14b10 <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   14b00:	4809      	ldr	r0, [pc, #36]	; (14b28 <mutex_free_platform+0x50>)
   14b02:	4621      	mov	r1, r4
   14b04:	f017 f8fd 	bl	2bd02 <k_mem_slab_free>
        mutex->mutex = NULL;
   14b08:	2300      	movs	r3, #0
   14b0a:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   14b0c:	6065      	str	r5, [r4, #4]
}
   14b0e:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   14b10:	6820      	ldr	r0, [r4, #0]
   14b12:	2214      	movs	r2, #20
   14b14:	f014 fa13 	bl	28f3e <memset>
   14b18:	e7f8      	b.n	14b0c <mutex_free_platform+0x34>
   14b1a:	bf00      	nop
   14b1c:	20000838 	.word	0x20000838
   14b20:	0002def6 	.word	0x0002def6
   14b24:	a95c5f2c 	.word	0xa95c5f2c
   14b28:	20003418 	.word	0x20003418

00014b2c <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   14b2c:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   14b2e:	b320      	cbz	r0, 14b7a <mutex_lock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
   14b30:	6843      	ldr	r3, [r0, #4]
   14b32:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   14b36:	d110      	bne.n	14b5a <mutex_lock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   14b38:	2201      	movs	r2, #1
   14b3a:	6803      	ldr	r3, [r0, #0]
   14b3c:	f3bf 8f5b 	dmb	ish
   14b40:	e853 1f00 	ldrex	r1, [r3]
   14b44:	2900      	cmp	r1, #0
   14b46:	d103      	bne.n	14b50 <mutex_lock_platform+0x24>
   14b48:	e843 2000 	strex	r0, r2, [r3]
   14b4c:	2800      	cmp	r0, #0
   14b4e:	d1f7      	bne.n	14b40 <mutex_lock_platform+0x14>
   14b50:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   14b54:	d10d      	bne.n	14b72 <mutex_lock_platform+0x46>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
   14b56:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
   14b58:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   14b5a:	4a09      	ldr	r2, [pc, #36]	; (14b80 <mutex_lock_platform+0x54>)
   14b5c:	4293      	cmp	r3, r2
   14b5e:	d00a      	beq.n	14b76 <mutex_lock_platform+0x4a>
        p_mutex = (struct k_mutex *)mutex->mutex;
   14b60:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   14b62:	f04f 32ff 	mov.w	r2, #4294967295
   14b66:	f04f 33ff 	mov.w	r3, #4294967295
   14b6a:	f00e fae9 	bl	23140 <z_impl_k_mutex_lock>
        if (ret == 0) {
   14b6e:	2800      	cmp	r0, #0
   14b70:	d0f1      	beq.n	14b56 <mutex_lock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   14b72:	4804      	ldr	r0, [pc, #16]	; (14b84 <mutex_lock_platform+0x58>)
   14b74:	e7f0      	b.n	14b58 <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   14b76:	4804      	ldr	r0, [pc, #16]	; (14b88 <mutex_lock_platform+0x5c>)
   14b78:	e7ee      	b.n	14b58 <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   14b7a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   14b7e:	e7eb      	b.n	14b58 <mutex_lock_platform+0x2c>
   14b80:	a95c5f2c 	.word	0xa95c5f2c
   14b84:	ffff8fe9 	.word	0xffff8fe9
   14b88:	ffff8fea 	.word	0xffff8fea

00014b8c <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   14b8c:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   14b8e:	b1d8      	cbz	r0, 14bc8 <mutex_unlock_platform+0x3c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   14b90:	6843      	ldr	r3, [r0, #4]
   14b92:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   14b96:	d110      	bne.n	14bba <mutex_unlock_platform+0x2e>
   14b98:	2200      	movs	r2, #0
   14b9a:	6803      	ldr	r3, [r0, #0]
   14b9c:	f3bf 8f5b 	dmb	ish
   14ba0:	e853 1f00 	ldrex	r1, [r3]
   14ba4:	2901      	cmp	r1, #1
   14ba6:	d103      	bne.n	14bb0 <mutex_unlock_platform+0x24>
   14ba8:	e843 2000 	strex	r0, r2, [r3]
   14bac:	2800      	cmp	r0, #0
   14bae:	d1f7      	bne.n	14ba0 <mutex_unlock_platform+0x14>
   14bb0:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   14bb4:	d10b      	bne.n	14bce <mutex_unlock_platform+0x42>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
   14bb6:	2000      	movs	r0, #0
    }
}
   14bb8:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   14bba:	4a07      	ldr	r2, [pc, #28]	; (14bd8 <mutex_unlock_platform+0x4c>)
   14bbc:	4293      	cmp	r3, r2
   14bbe:	d008      	beq.n	14bd2 <mutex_unlock_platform+0x46>
        p_mutex = (struct k_mutex *)mutex->mutex;
   14bc0:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   14bc2:	f00e fb37 	bl	23234 <z_impl_k_mutex_unlock>
   14bc6:	e7f6      	b.n	14bb6 <mutex_unlock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   14bc8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   14bcc:	e7f4      	b.n	14bb8 <mutex_unlock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   14bce:	4803      	ldr	r0, [pc, #12]	; (14bdc <mutex_unlock_platform+0x50>)
   14bd0:	e7f2      	b.n	14bb8 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   14bd2:	4803      	ldr	r0, [pc, #12]	; (14be0 <mutex_unlock_platform+0x54>)
   14bd4:	e7f0      	b.n	14bb8 <mutex_unlock_platform+0x2c>
   14bd6:	bf00      	nop
   14bd8:	a95c5f2c 	.word	0xa95c5f2c
   14bdc:	ffff8fe9 	.word	0xffff8fe9
   14be0:	ffff8fea 	.word	0xffff8fea

00014be4 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   14be4:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   14be6:	4604      	mov	r4, r0
   14be8:	b918      	cbnz	r0, 14bf2 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
   14bea:	4b1d      	ldr	r3, [pc, #116]	; (14c60 <mutex_init_platform+0x7c>)
   14bec:	481d      	ldr	r0, [pc, #116]	; (14c64 <mutex_init_platform+0x80>)
   14bee:	685b      	ldr	r3, [r3, #4]
   14bf0:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   14bf2:	6863      	ldr	r3, [r4, #4]
   14bf4:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   14bf8:	d02f      	beq.n	14c5a <mutex_init_platform+0x76>
   14bfa:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
   14bfe:	d02c      	beq.n	14c5a <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
   14c00:	4a19      	ldr	r2, [pc, #100]	; (14c68 <mutex_init_platform+0x84>)
   14c02:	4293      	cmp	r3, r2
   14c04:	d119      	bne.n	14c3a <mutex_init_platform+0x56>
   14c06:	6823      	ldr	r3, [r4, #0]
   14c08:	bb03      	cbnz	r3, 14c4c <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   14c0a:	4818      	ldr	r0, [pc, #96]	; (14c6c <mutex_init_platform+0x88>)
   14c0c:	f04f 32ff 	mov.w	r2, #4294967295
   14c10:	f04f 33ff 	mov.w	r3, #4294967295
   14c14:	4621      	mov	r1, r4
   14c16:	f00e f98f 	bl	22f38 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   14c1a:	b908      	cbnz	r0, 14c20 <mutex_init_platform+0x3c>
   14c1c:	6823      	ldr	r3, [r4, #0]
   14c1e:	b91b      	cbnz	r3, 14c28 <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
   14c20:	4b0f      	ldr	r3, [pc, #60]	; (14c60 <mutex_init_platform+0x7c>)
   14c22:	4813      	ldr	r0, [pc, #76]	; (14c70 <mutex_init_platform+0x8c>)
   14c24:	685b      	ldr	r3, [r3, #4]
   14c26:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   14c28:	6820      	ldr	r0, [r4, #0]
   14c2a:	2214      	movs	r2, #20
   14c2c:	2100      	movs	r1, #0
   14c2e:	f014 f986 	bl	28f3e <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   14c32:	f44f 6368 	mov.w	r3, #3712	; 0xe80
   14c36:	6063      	str	r3, [r4, #4]
   14c38:	e008      	b.n	14c4c <mutex_init_platform+0x68>
    switch(flags){
   14c3a:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   14c3e:	d80d      	bhi.n	14c5c <mutex_init_platform+0x78>
   14c40:	2b3a      	cmp	r3, #58	; 0x3a
   14c42:	d003      	beq.n	14c4c <mutex_init_platform+0x68>
   14c44:	f640 62ba 	movw	r2, #3770	; 0xeba
   14c48:	4293      	cmp	r3, r2
   14c4a:	d1de      	bne.n	14c0a <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
   14c4c:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   14c4e:	f017 f89d 	bl	2bd8c <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   14c52:	6863      	ldr	r3, [r4, #4]
   14c54:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
   14c58:	6063      	str	r3, [r4, #4]
}
   14c5a:	bd10      	pop	{r4, pc}
    switch(flags){
   14c5c:	4a05      	ldr	r2, [pc, #20]	; (14c74 <mutex_init_platform+0x90>)
   14c5e:	e7f3      	b.n	14c48 <mutex_init_platform+0x64>
   14c60:	20000838 	.word	0x20000838
   14c64:	0002def6 	.word	0x0002def6
   14c68:	a95c5f2c 	.word	0xa95c5f2c
   14c6c:	20003418 	.word	0x20003418
   14c70:	0002df1c 	.word	0x0002df1c
   14c74:	3a00003a 	.word	0x3a00003a

00014c78 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   14c78:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   14c7a:	4906      	ldr	r1, [pc, #24]	; (14c94 <nrf_cc3xx_platform_mutex_init+0x1c>)
   14c7c:	4806      	ldr	r0, [pc, #24]	; (14c98 <nrf_cc3xx_platform_mutex_init+0x20>)
   14c7e:	2340      	movs	r3, #64	; 0x40
   14c80:	2214      	movs	r2, #20
   14c82:	f017 f830 	bl	2bce6 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
   14c86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   14c8a:	4904      	ldr	r1, [pc, #16]	; (14c9c <nrf_cc3xx_platform_mutex_init+0x24>)
   14c8c:	4804      	ldr	r0, [pc, #16]	; (14ca0 <nrf_cc3xx_platform_mutex_init+0x28>)
   14c8e:	f010 b817 	b.w	24cc0 <nrf_cc3xx_platform_set_mutexes>
   14c92:	bf00      	nop
   14c94:	20002f18 	.word	0x20002f18
   14c98:	20003418 	.word	0x20003418
   14c9c:	0002cf3c 	.word	0x0002cf3c
   14ca0:	0002cf50 	.word	0x0002cf50

00014ca4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   14ca4:	4901      	ldr	r1, [pc, #4]	; (14cac <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   14ca6:	2210      	movs	r2, #16
	str	r2, [r1]
   14ca8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   14caa:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   14cac:	e000ed10 	.word	0xe000ed10

00014cb0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   14cb0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   14cb2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   14cb4:	f380 8811 	msr	BASEPRI, r0
	isb
   14cb8:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
   14cbc:	f3bf 8f4f 	dsb	sy
   14cc0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   14cc2:	b662      	cpsie	i
	isb
   14cc4:	f3bf 8f6f 	isb	sy

	bx	lr
   14cc8:	4770      	bx	lr
   14cca:	bf00      	nop

00014ccc <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   14ccc:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   14cce:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   14cd0:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
   14cd4:	f3bf 8f4f 	dsb	sy
   14cd8:	bf20      	wfe

	msr	BASEPRI, r0
   14cda:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   14cde:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   14ce0:	4770      	bx	lr
   14ce2:	bf00      	nop

00014ce4 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   14ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14ce8:	4681      	mov	r9, r0
   14cea:	af00      	add	r7, sp, #0

	if (esf != NULL) {
   14cec:	460c      	mov	r4, r1
   14cee:	2900      	cmp	r1, #0
   14cf0:	d04c      	beq.n	14d8c <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   14cf2:	466e      	mov	r6, sp
   14cf4:	b08a      	sub	sp, #40	; 0x28
   14cf6:	e9d1 1200 	ldrd	r1, r2, [r1]
   14cfa:	68a3      	ldr	r3, [r4, #8]
   14cfc:	466d      	mov	r5, sp
   14cfe:	4827      	ldr	r0, [pc, #156]	; (14d9c <z_arm_fatal_error+0xb8>)
   14d00:	46a8      	mov	r8, r5
   14d02:	f04f 0a05 	mov.w	sl, #5
   14d06:	e9c5 0105 	strd	r0, r1, [r5, #20]
   14d0a:	e9c5 2307 	strd	r2, r3, [r5, #28]
   14d0e:	f848 af10 	str.w	sl, [r8, #16]!
   14d12:	4823      	ldr	r0, [pc, #140]	; (14da0 <z_arm_fatal_error+0xbc>)
   14d14:	4642      	mov	r2, r8
   14d16:	2300      	movs	r3, #0
   14d18:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   14d1c:	f7fe ff52 	bl	13bc4 <z_impl_z_log_msg_static_create>
   14d20:	46b5      	mov	sp, r6
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   14d22:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   14d26:	6963      	ldr	r3, [r4, #20]
   14d28:	46ad      	mov	sp, r5
   14d2a:	481e      	ldr	r0, [pc, #120]	; (14da4 <z_arm_fatal_error+0xc0>)
   14d2c:	f8c5 a010 	str.w	sl, [r5, #16]
   14d30:	e9c5 0105 	strd	r0, r1, [r5, #20]
   14d34:	e9c5 2307 	strd	r2, r3, [r5, #28]
   14d38:	4819      	ldr	r0, [pc, #100]	; (14da0 <z_arm_fatal_error+0xbc>)
   14d3a:	2300      	movs	r3, #0
   14d3c:	4642      	mov	r2, r8
   14d3e:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   14d42:	f7fe ff3f 	bl	13bc4 <z_impl_z_log_msg_static_create>
   14d46:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   14d48:	b088      	sub	sp, #32
   14d4a:	69e3      	ldr	r3, [r4, #28]
   14d4c:	466d      	mov	r5, sp
   14d4e:	4a16      	ldr	r2, [pc, #88]	; (14da8 <z_arm_fatal_error+0xc4>)
   14d50:	46a8      	mov	r8, r5
   14d52:	f04f 0a03 	mov.w	sl, #3
   14d56:	e9c5 2305 	strd	r2, r3, [r5, #20]
   14d5a:	f848 af10 	str.w	sl, [r8, #16]!
   14d5e:	4810      	ldr	r0, [pc, #64]	; (14da0 <z_arm_fatal_error+0xbc>)
   14d60:	2300      	movs	r3, #0
   14d62:	4642      	mov	r2, r8
   14d64:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14d68:	f7fe ff2c 	bl	13bc4 <z_impl_z_log_msg_static_create>
   14d6c:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   14d6e:	69a3      	ldr	r3, [r4, #24]
   14d70:	46ad      	mov	sp, r5
   14d72:	4a0e      	ldr	r2, [pc, #56]	; (14dac <z_arm_fatal_error+0xc8>)
   14d74:	f8c5 a010 	str.w	sl, [r5, #16]
   14d78:	e9c5 2305 	strd	r2, r3, [r5, #20]
   14d7c:	4808      	ldr	r0, [pc, #32]	; (14da0 <z_arm_fatal_error+0xbc>)
   14d7e:	2300      	movs	r3, #0
   14d80:	4642      	mov	r2, r8
   14d82:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14d86:	f7fe ff1d 	bl	13bc4 <z_impl_z_log_msg_static_create>
   14d8a:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   14d8c:	4621      	mov	r1, r4
   14d8e:	4648      	mov	r0, r9
   14d90:	f00d ff3e 	bl	22c10 <z_fatal_error>
}
   14d94:	46bd      	mov	sp, r7
   14d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14d9a:	bf00      	nop
   14d9c:	0002df49 	.word	0x0002df49
   14da0:	0002cbe4 	.word	0x0002cbe4
   14da4:	0002df78 	.word	0x0002df78
   14da8:	0002dfa7 	.word	0x0002dfa7
   14dac:	0002dfb6 	.word	0x0002dfb6

00014db0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   14db0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   14db2:	2800      	cmp	r0, #0
   14db4:	db07      	blt.n	14dc6 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14db6:	4a04      	ldr	r2, [pc, #16]	; (14dc8 <arch_irq_enable+0x18>)
   14db8:	0941      	lsrs	r1, r0, #5
   14dba:	2301      	movs	r3, #1
   14dbc:	f000 001f 	and.w	r0, r0, #31
   14dc0:	4083      	lsls	r3, r0
   14dc2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   14dc6:	4770      	bx	lr
   14dc8:	e000e100 	.word	0xe000e100

00014dcc <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   14dcc:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   14dce:	2800      	cmp	r0, #0
   14dd0:	db0c      	blt.n	14dec <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14dd2:	0943      	lsrs	r3, r0, #5
   14dd4:	4906      	ldr	r1, [pc, #24]	; (14df0 <arch_irq_disable+0x24>)
   14dd6:	f000 001f 	and.w	r0, r0, #31
   14dda:	3320      	adds	r3, #32
   14ddc:	2201      	movs	r2, #1
   14dde:	4082      	lsls	r2, r0
   14de0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   14de4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14de8:	f3bf 8f6f 	isb	sy
}
   14dec:	4770      	bx	lr
   14dee:	bf00      	nop
   14df0:	e000e100 	.word	0xe000e100

00014df4 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   14df4:	4b05      	ldr	r3, [pc, #20]	; (14e0c <arch_irq_is_enabled+0x18>)
   14df6:	0942      	lsrs	r2, r0, #5
   14df8:	f000 001f 	and.w	r0, r0, #31
   14dfc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   14e00:	2301      	movs	r3, #1
   14e02:	fa03 f000 	lsl.w	r0, r3, r0
}
   14e06:	4010      	ands	r0, r2
   14e08:	4770      	bx	lr
   14e0a:	bf00      	nop
   14e0c:	e000e100 	.word	0xe000e100

00014e10 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   14e10:	b240      	sxtb	r0, r0
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   14e12:	07d3      	lsls	r3, r2, #31
		prio += _IRQ_PRIO_OFFSET;
   14e14:	bf54      	ite	pl
   14e16:	3102      	addpl	r1, #2
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   14e18:	2100      	movmi	r1, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   14e1a:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14e1c:	bfac      	ite	ge
   14e1e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14e22:	4a07      	ldrlt	r2, [pc, #28]	; (14e40 <z_arm_irq_priority_set+0x30>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14e24:	ea4f 1341 	mov.w	r3, r1, lsl #5
   14e28:	bfac      	ite	ge
   14e2a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14e2e:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14e32:	b2db      	uxtb	r3, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14e34:	bfb4      	ite	lt
   14e36:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14e38:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
}
   14e3c:	4770      	bx	lr
   14e3e:	bf00      	nop
   14e40:	e000ed14 	.word	0xe000ed14

00014e44 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   14e44:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   14e46:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   14e48:	4b04      	ldr	r3, [pc, #16]	; (14e5c <_arch_isr_direct_pm+0x18>)
   14e4a:	695a      	ldr	r2, [r3, #20]
   14e4c:	b11a      	cbz	r2, 14e56 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   14e4e:	2200      	movs	r2, #0
   14e50:	615a      	str	r2, [r3, #20]
		z_pm_save_idle_exit();
   14e52:	f016 ff8c 	bl	2bd6e <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   14e56:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   14e58:	bd08      	pop	{r3, pc}
   14e5a:	bf00      	nop
   14e5c:	20003a14 	.word	0x20003a14

00014e60 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   14e60:	bf30      	wfi
    b z_SysNmiOnReset
   14e62:	f7ff bffd 	b.w	14e60 <z_SysNmiOnReset>
   14e66:	bf00      	nop

00014e68 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   14e68:	4a0b      	ldr	r2, [pc, #44]	; (14e98 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   14e6a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   14e6c:	4b0b      	ldr	r3, [pc, #44]	; (14e9c <z_arm_prep_c+0x34>)
   14e6e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   14e72:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   14e74:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14e78:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   14e7c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   14e80:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   14e84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   14e88:	f00d ff7e 	bl	22d88 <z_bss_zero>
	z_data_copy();
   14e8c:	f00e ffd6 	bl	23e3c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   14e90:	f000 fbd6 	bl	15640 <z_arm_interrupt_init>
	z_cstart();
   14e94:	f00d ffbc 	bl	22e10 <z_cstart>
   14e98:	00000000 	.word	0x00000000
   14e9c:	e000ed00 	.word	0xe000ed00

00014ea0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   14ea0:	4a09      	ldr	r2, [pc, #36]	; (14ec8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   14ea2:	490a      	ldr	r1, [pc, #40]	; (14ecc <arch_swap+0x2c>)
	_current->arch.basepri = key;
   14ea4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   14ea6:	6809      	ldr	r1, [r1, #0]
   14ea8:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   14eaa:	4909      	ldr	r1, [pc, #36]	; (14ed0 <arch_swap+0x30>)
	_current->arch.basepri = key;
   14eac:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   14eae:	684b      	ldr	r3, [r1, #4]
   14eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   14eb4:	604b      	str	r3, [r1, #4]
   14eb6:	2300      	movs	r3, #0
   14eb8:	f383 8811 	msr	BASEPRI, r3
   14ebc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   14ec0:	6893      	ldr	r3, [r2, #8]
}
   14ec2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   14ec4:	4770      	bx	lr
   14ec6:	bf00      	nop
   14ec8:	20003a14 	.word	0x20003a14
   14ecc:	0002d4fc 	.word	0x0002d4fc
   14ed0:	e000ed00 	.word	0xe000ed00

00014ed4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   14ed4:	4912      	ldr	r1, [pc, #72]	; (14f20 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   14ed6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   14ed8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   14edc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   14ede:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   14ee2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   14ee6:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   14ee8:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   14eec:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   14ef0:	4f0c      	ldr	r7, [pc, #48]	; (14f24 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   14ef2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   14ef6:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
   14ef8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   14efa:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   14efc:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   14efe:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   14f00:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   14f02:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   14f06:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   14f08:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   14f0a:	f000 fc35 	bl	15778 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   14f0e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   14f12:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   14f16:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   14f1a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   14f1e:	4770      	bx	lr
    ldr r1, =_kernel
   14f20:	20003a14 	.word	0x20003a14
    ldr v4, =_SCS_ICSR
   14f24:	e000ed04 	.word	0xe000ed04

00014f28 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   14f28:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   14f2c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   14f2e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   14f32:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   14f36:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   14f38:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   14f3c:	2902      	cmp	r1, #2
    beq _oops
   14f3e:	d0ff      	beq.n	14f40 <_oops>

00014f40 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   14f40:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   14f42:	f013 ff07 	bl	28d54 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   14f46:	bd01      	pop	{r0, pc}

00014f48 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   14f48:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   14f4c:	9b00      	ldr	r3, [sp, #0]
   14f4e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   14f52:	490a      	ldr	r1, [pc, #40]	; (14f7c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   14f54:	9b01      	ldr	r3, [sp, #4]
   14f56:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   14f5a:	9b02      	ldr	r3, [sp, #8]
   14f5c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   14f60:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   14f64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   14f68:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   14f6c:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   14f70:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   14f72:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   14f74:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   14f76:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   14f78:	4770      	bx	lr
   14f7a:	bf00      	nop
   14f7c:	000275cf 	.word	0x000275cf

00014f80 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   14f80:	4a09      	ldr	r2, [pc, #36]	; (14fa8 <z_check_thread_stack_fail+0x28>)
{
   14f82:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   14f84:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   14f86:	b170      	cbz	r0, 14fa6 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   14f88:	f113 0f16 	cmn.w	r3, #22
   14f8c:	6e80      	ldr	r0, [r0, #104]	; 0x68
   14f8e:	d005      	beq.n	14f9c <z_check_thread_stack_fail+0x1c>
   14f90:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
   14f94:	429a      	cmp	r2, r3
   14f96:	d805      	bhi.n	14fa4 <z_check_thread_stack_fail+0x24>
   14f98:	4283      	cmp	r3, r0
   14f9a:	d203      	bcs.n	14fa4 <z_check_thread_stack_fail+0x24>
		return 0;
   14f9c:	4281      	cmp	r1, r0
   14f9e:	bf28      	it	cs
   14fa0:	2000      	movcs	r0, #0
   14fa2:	4770      	bx	lr
   14fa4:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
   14fa6:	4770      	bx	lr
   14fa8:	20003a14 	.word	0x20003a14

00014fac <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   14fac:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   14fae:	4b09      	ldr	r3, [pc, #36]	; (14fd4 <arch_switch_to_main_thread+0x28>)
{
   14fb0:	460d      	mov	r5, r1
   14fb2:	4614      	mov	r4, r2
	_current = main_thread;
   14fb4:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   14fb6:	f000 fbdf 	bl	15778 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   14fba:	4620      	mov	r0, r4
   14fbc:	f385 8809 	msr	PSP, r5
   14fc0:	2100      	movs	r1, #0
   14fc2:	b663      	cpsie	if
   14fc4:	f381 8811 	msr	BASEPRI, r1
   14fc8:	f3bf 8f6f 	isb	sy
   14fcc:	2200      	movs	r2, #0
   14fce:	2300      	movs	r3, #0
   14fd0:	f012 fafd 	bl	275ce <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   14fd4:	20003a14 	.word	0x20003a14

00014fd8 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   14fd8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   14fda:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   14fdc:	4a0b      	ldr	r2, [pc, #44]	; (1500c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   14fde:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
   14fe0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   14fe2:	bf1e      	ittt	ne
	movne	r1, #0
   14fe4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   14fe6:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
   14fe8:	f016 fec1 	blne	2bd6e <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   14fec:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   14fee:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   14ff2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   14ff6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   14ffa:	4905      	ldr	r1, [pc, #20]	; (15010 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   14ffc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   14ffe:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   15000:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   15002:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   15006:	4903      	ldr	r1, [pc, #12]	; (15014 <_isr_wrapper+0x3c>)
	bx r1
   15008:	4708      	bx	r1
   1500a:	0000      	.short	0x0000
	ldr r2, =_kernel
   1500c:	20003a14 	.word	0x20003a14
	ldr r1, =_sw_isr_table
   15010:	0002c8b4 	.word	0x0002c8b4
	ldr r1, =z_arm_int_exit
   15014:	00015019 	.word	0x00015019

00015018 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   15018:	4b04      	ldr	r3, [pc, #16]	; (1502c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   1501a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   1501c:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
   1501e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   15020:	d003      	beq.n	1502a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   15022:	4903      	ldr	r1, [pc, #12]	; (15030 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   15024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   15028:	600a      	str	r2, [r1, #0]

0001502a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   1502a:	4770      	bx	lr
	ldr r3, =_kernel
   1502c:	20003a14 	.word	0x20003a14
	ldr r1, =_SCS_ICSR
   15030:	e000ed04 	.word	0xe000ed04

00015034 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   15034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15038:	b086      	sub	sp, #24
   1503a:	4606      	mov	r6, r0
   1503c:	af00      	add	r7, sp, #0
   1503e:	460d      	mov	r5, r1
{
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");
   15040:	4b47      	ldr	r3, [pc, #284]	; (15160 <bus_fault.constprop.0+0x12c>)
   15042:	617b      	str	r3, [r7, #20]
   15044:	2402      	movs	r4, #2
   15046:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1504a:	4846      	ldr	r0, [pc, #280]	; (15164 <bus_fault.constprop.0+0x130>)
   1504c:	613c      	str	r4, [r7, #16]
   1504e:	f107 0210 	add.w	r2, r7, #16
   15052:	f013 fe8e 	bl	28d72 <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   15056:	4b44      	ldr	r3, [pc, #272]	; (15168 <bus_fault.constprop.0+0x134>)
   15058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1505a:	04d9      	lsls	r1, r3, #19
   1505c:	d56d      	bpl.n	1513a <bus_fault.constprop.0+0x106>
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
   1505e:	4b43      	ldr	r3, [pc, #268]	; (1516c <bus_fault.constprop.0+0x138>)
   15060:	4840      	ldr	r0, [pc, #256]	; (15164 <bus_fault.constprop.0+0x130>)
   15062:	e9c7 4304 	strd	r4, r3, [r7, #16]
   15066:	f107 0210 	add.w	r2, r7, #16
   1506a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1506e:	f013 fe80 	bl	28d72 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_STACKING;
   15072:	2017      	movs	r0, #23
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   15074:	4b3c      	ldr	r3, [pc, #240]	; (15168 <bus_fault.constprop.0+0x134>)
   15076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15078:	051a      	lsls	r2, r3, #20
   1507a:	d50b      	bpl.n	15094 <bus_fault.constprop.0+0x60>
		reason = K_ERR_ARM_BUS_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
   1507c:	4b3c      	ldr	r3, [pc, #240]	; (15170 <bus_fault.constprop.0+0x13c>)
   1507e:	617b      	str	r3, [r7, #20]
   15080:	2302      	movs	r3, #2
   15082:	4838      	ldr	r0, [pc, #224]	; (15164 <bus_fault.constprop.0+0x130>)
   15084:	613b      	str	r3, [r7, #16]
   15086:	f107 0210 	add.w	r2, r7, #16
   1508a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1508e:	f013 fe70 	bl	28d72 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_UNSTACKING;
   15092:	2018      	movs	r0, #24
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   15094:	4c34      	ldr	r4, [pc, #208]	; (15168 <bus_fault.constprop.0+0x134>)
   15096:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   15098:	059b      	lsls	r3, r3, #22
   1509a:	d523      	bpl.n	150e4 <bus_fault.constprop.0+0xb0>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
		PR_FAULT_INFO("  Precise data bus error");
   1509c:	46e8      	mov	r8, sp
   1509e:	4b35      	ldr	r3, [pc, #212]	; (15174 <bus_fault.constprop.0+0x140>)
   150a0:	617b      	str	r3, [r7, #20]
   150a2:	2302      	movs	r3, #2
   150a4:	482f      	ldr	r0, [pc, #188]	; (15164 <bus_fault.constprop.0+0x130>)
   150a6:	613b      	str	r3, [r7, #16]
   150a8:	f107 0210 	add.w	r2, r7, #16
   150ac:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   150b0:	f013 fe5f 	bl	28d72 <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   150b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   150b6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   150b8:	0410      	lsls	r0, r2, #16
   150ba:	d512      	bpl.n	150e2 <bus_fault.constprop.0+0xae>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   150bc:	b088      	sub	sp, #32
   150be:	466a      	mov	r2, sp
   150c0:	492d      	ldr	r1, [pc, #180]	; (15178 <bus_fault.constprop.0+0x144>)
   150c2:	4828      	ldr	r0, [pc, #160]	; (15164 <bus_fault.constprop.0+0x130>)
   150c4:	e9c2 1305 	strd	r1, r3, [r2, #20]
   150c8:	2303      	movs	r3, #3
   150ca:	f842 3f10 	str.w	r3, [r2, #16]!
   150ce:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   150d2:	f013 fe4e 	bl	28d72 <z_log_msg_static_create.constprop.0>
   150d6:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   150d8:	b11e      	cbz	r6, 150e2 <bus_fault.constprop.0+0xae>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   150da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   150dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   150e0:	62a3      	str	r3, [r4, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
   150e2:	2019      	movs	r0, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   150e4:	4b20      	ldr	r3, [pc, #128]	; (15168 <bus_fault.constprop.0+0x134>)
   150e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   150e8:	0559      	lsls	r1, r3, #21
   150ea:	d50b      	bpl.n	15104 <bus_fault.constprop.0+0xd0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
		PR_FAULT_INFO("  Imprecise data bus error");
   150ec:	4b23      	ldr	r3, [pc, #140]	; (1517c <bus_fault.constprop.0+0x148>)
   150ee:	617b      	str	r3, [r7, #20]
   150f0:	2302      	movs	r3, #2
   150f2:	481c      	ldr	r0, [pc, #112]	; (15164 <bus_fault.constprop.0+0x130>)
   150f4:	613b      	str	r3, [r7, #16]
   150f6:	f107 0210 	add.w	r2, r7, #16
   150fa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   150fe:	f013 fe38 	bl	28d72 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
   15102:	201a      	movs	r0, #26
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   15104:	4b18      	ldr	r3, [pc, #96]	; (15168 <bus_fault.constprop.0+0x134>)
   15106:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   15108:	05d2      	lsls	r2, r2, #23
   1510a:	d518      	bpl.n	1513e <bus_fault.constprop.0+0x10a>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
   1510c:	4b1c      	ldr	r3, [pc, #112]	; (15180 <bus_fault.constprop.0+0x14c>)
   1510e:	617b      	str	r3, [r7, #20]
   15110:	2302      	movs	r3, #2
   15112:	4814      	ldr	r0, [pc, #80]	; (15164 <bus_fault.constprop.0+0x130>)
   15114:	613b      	str	r3, [r7, #16]
   15116:	f107 0210 	add.w	r2, r7, #16
   1511a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1511e:	f013 fe28 	bl	28d72 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
   15122:	201b      	movs	r0, #27
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   15124:	4a10      	ldr	r2, [pc, #64]	; (15168 <bus_fault.constprop.0+0x134>)
   15126:	6a93      	ldr	r3, [r2, #40]	; 0x28
   15128:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   1512c:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);

	return reason;
}
   1512e:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
   15130:	2300      	movs	r3, #0
   15132:	702b      	strb	r3, [r5, #0]
}
   15134:	46bd      	mov	sp, r7
   15136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
   1513a:	2016      	movs	r0, #22
   1513c:	e79a      	b.n	15074 <bus_fault.constprop.0+0x40>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   1513e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15140:	049b      	lsls	r3, r3, #18
   15142:	d5ef      	bpl.n	15124 <bus_fault.constprop.0+0xf0>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   15144:	4b0f      	ldr	r3, [pc, #60]	; (15184 <bus_fault.constprop.0+0x150>)
   15146:	617b      	str	r3, [r7, #20]
   15148:	2302      	movs	r3, #2
   1514a:	4806      	ldr	r0, [pc, #24]	; (15164 <bus_fault.constprop.0+0x130>)
   1514c:	613b      	str	r3, [r7, #16]
   1514e:	f107 0210 	add.w	r2, r7, #16
   15152:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15156:	f013 fe0c 	bl	28d72 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
   1515a:	201c      	movs	r0, #28
   1515c:	e7e2      	b.n	15124 <bus_fault.constprop.0+0xf0>
   1515e:	bf00      	nop
   15160:	0002dfe4 	.word	0x0002dfe4
   15164:	0002cbe4 	.word	0x0002cbe4
   15168:	e000ed00 	.word	0xe000ed00
   1516c:	0002dffa 	.word	0x0002dffa
   15170:	0002e00b 	.word	0x0002e00b
   15174:	0002e01e 	.word	0x0002e01e
   15178:	0002e037 	.word	0x0002e037
   1517c:	0002e04c 	.word	0x0002e04c
   15180:	0002e067 	.word	0x0002e067
   15184:	0002e07f 	.word	0x0002e07f

00015188 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   15188:	b510      	push	{r4, lr}
   1518a:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   1518c:	4b36      	ldr	r3, [pc, #216]	; (15268 <usage_fault.constprop.0+0xe0>)
   1518e:	4837      	ldr	r0, [pc, #220]	; (1526c <usage_fault.constprop.0+0xe4>)
   15190:	9305      	str	r3, [sp, #20]
   15192:	aa04      	add	r2, sp, #16
   15194:	2402      	movs	r4, #2
   15196:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1519a:	9404      	str	r4, [sp, #16]
   1519c:	f013 fde9 	bl	28d72 <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   151a0:	4b33      	ldr	r3, [pc, #204]	; (15270 <usage_fault.constprop.0+0xe8>)
   151a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   151a4:	019a      	lsls	r2, r3, #6
   151a6:	d55d      	bpl.n	15264 <usage_fault.constprop.0+0xdc>
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
   151a8:	4b32      	ldr	r3, [pc, #200]	; (15274 <usage_fault.constprop.0+0xec>)
   151aa:	4830      	ldr	r0, [pc, #192]	; (1526c <usage_fault.constprop.0+0xe4>)
   151ac:	aa04      	add	r2, sp, #16
   151ae:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   151b2:	e9cd 4304 	strd	r4, r3, [sp, #16]
   151b6:	f013 fddc 	bl	28d72 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_DIV_0;
   151ba:	201e      	movs	r0, #30
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   151bc:	4b2c      	ldr	r3, [pc, #176]	; (15270 <usage_fault.constprop.0+0xe8>)
   151be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   151c0:	01db      	lsls	r3, r3, #7
   151c2:	d50a      	bpl.n	151da <usage_fault.constprop.0+0x52>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
		PR_FAULT_INFO("  Unaligned memory access");
   151c4:	4b2c      	ldr	r3, [pc, #176]	; (15278 <usage_fault.constprop.0+0xf0>)
   151c6:	4829      	ldr	r0, [pc, #164]	; (1526c <usage_fault.constprop.0+0xe4>)
   151c8:	9305      	str	r3, [sp, #20]
   151ca:	aa04      	add	r2, sp, #16
   151cc:	2302      	movs	r3, #2
   151ce:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   151d2:	9304      	str	r3, [sp, #16]
   151d4:	f013 fdcd 	bl	28d72 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
   151d8:	201f      	movs	r0, #31
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   151da:	4b25      	ldr	r3, [pc, #148]	; (15270 <usage_fault.constprop.0+0xe8>)
   151dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   151de:	031c      	lsls	r4, r3, #12
   151e0:	d50a      	bpl.n	151f8 <usage_fault.constprop.0+0x70>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
		PR_FAULT_INFO("  No coprocessor instructions");
   151e2:	4b26      	ldr	r3, [pc, #152]	; (1527c <usage_fault.constprop.0+0xf4>)
   151e4:	4821      	ldr	r0, [pc, #132]	; (1526c <usage_fault.constprop.0+0xe4>)
   151e6:	9305      	str	r3, [sp, #20]
   151e8:	aa04      	add	r2, sp, #16
   151ea:	2302      	movs	r3, #2
   151ec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   151f0:	9304      	str	r3, [sp, #16]
   151f2:	f013 fdbe 	bl	28d72 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
   151f6:	2021      	movs	r0, #33	; 0x21
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   151f8:	4b1d      	ldr	r3, [pc, #116]	; (15270 <usage_fault.constprop.0+0xe8>)
   151fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   151fc:	0359      	lsls	r1, r3, #13
   151fe:	d50a      	bpl.n	15216 <usage_fault.constprop.0+0x8e>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   15200:	4b1f      	ldr	r3, [pc, #124]	; (15280 <usage_fault.constprop.0+0xf8>)
   15202:	481a      	ldr	r0, [pc, #104]	; (1526c <usage_fault.constprop.0+0xe4>)
   15204:	9305      	str	r3, [sp, #20]
   15206:	aa04      	add	r2, sp, #16
   15208:	2302      	movs	r3, #2
   1520a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1520e:	9304      	str	r3, [sp, #16]
   15210:	f013 fdaf 	bl	28d72 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
   15214:	2022      	movs	r0, #34	; 0x22
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   15216:	4b16      	ldr	r3, [pc, #88]	; (15270 <usage_fault.constprop.0+0xe8>)
   15218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1521a:	039a      	lsls	r2, r3, #14
   1521c:	d50a      	bpl.n	15234 <usage_fault.constprop.0+0xac>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
		PR_FAULT_INFO("  Illegal use of the EPSR");
   1521e:	4b19      	ldr	r3, [pc, #100]	; (15284 <usage_fault.constprop.0+0xfc>)
   15220:	4812      	ldr	r0, [pc, #72]	; (1526c <usage_fault.constprop.0+0xe4>)
   15222:	9305      	str	r3, [sp, #20]
   15224:	aa04      	add	r2, sp, #16
   15226:	2302      	movs	r3, #2
   15228:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1522c:	9304      	str	r3, [sp, #16]
   1522e:	f013 fda0 	bl	28d72 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
   15232:	2023      	movs	r0, #35	; 0x23
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   15234:	4b0e      	ldr	r3, [pc, #56]	; (15270 <usage_fault.constprop.0+0xe8>)
   15236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15238:	03db      	lsls	r3, r3, #15
   1523a:	d50a      	bpl.n	15252 <usage_fault.constprop.0+0xca>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   1523c:	4b12      	ldr	r3, [pc, #72]	; (15288 <usage_fault.constprop.0+0x100>)
   1523e:	480b      	ldr	r0, [pc, #44]	; (1526c <usage_fault.constprop.0+0xe4>)
   15240:	9305      	str	r3, [sp, #20]
   15242:	aa04      	add	r2, sp, #16
   15244:	2302      	movs	r3, #2
   15246:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1524a:	9304      	str	r3, [sp, #16]
   1524c:	f013 fd91 	bl	28d72 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
   15250:	2024      	movs	r0, #36	; 0x24
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   15252:	4a07      	ldr	r2, [pc, #28]	; (15270 <usage_fault.constprop.0+0xe8>)
   15254:	6a93      	ldr	r3, [r2, #40]	; 0x28
   15256:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   1525a:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   1525e:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   15260:	b006      	add	sp, #24
   15262:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
   15264:	201d      	movs	r0, #29
   15266:	e7a9      	b.n	151bc <usage_fault.constprop.0+0x34>
   15268:	0002e0ae 	.word	0x0002e0ae
   1526c:	0002cbe4 	.word	0x0002cbe4
   15270:	e000ed00 	.word	0xe000ed00
   15274:	0002e0c6 	.word	0x0002e0c6
   15278:	0002e0d9 	.word	0x0002e0d9
   1527c:	0002e0f3 	.word	0x0002e0f3
   15280:	0002e111 	.word	0x0002e111
   15284:	0002e136 	.word	0x0002e136
   15288:	0002e150 	.word	0x0002e150

0001528c <mem_manage_fault>:
{
   1528c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15290:	b086      	sub	sp, #24
   15292:	4681      	mov	r9, r0
   15294:	af00      	add	r7, sp, #0
   15296:	468a      	mov	sl, r1
   15298:	4690      	mov	r8, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   1529a:	4b51      	ldr	r3, [pc, #324]	; (153e0 <mem_manage_fault+0x154>)
   1529c:	617b      	str	r3, [r7, #20]
   1529e:	2402      	movs	r4, #2
   152a0:	4850      	ldr	r0, [pc, #320]	; (153e4 <mem_manage_fault+0x158>)
   152a2:	613c      	str	r4, [r7, #16]
   152a4:	f107 0210 	add.w	r2, r7, #16
   152a8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   152ac:	f013 fd61 	bl	28d72 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   152b0:	4b4d      	ldr	r3, [pc, #308]	; (153e8 <mem_manage_fault+0x15c>)
   152b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   152b4:	06de      	lsls	r6, r3, #27
   152b6:	d545      	bpl.n	15344 <mem_manage_fault+0xb8>
		PR_FAULT_INFO("  Stacking error (context area might be"
   152b8:	4b4c      	ldr	r3, [pc, #304]	; (153ec <mem_manage_fault+0x160>)
   152ba:	484a      	ldr	r0, [pc, #296]	; (153e4 <mem_manage_fault+0x158>)
   152bc:	e9c7 4304 	strd	r4, r3, [r7, #16]
   152c0:	f107 0210 	add.w	r2, r7, #16
   152c4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_STACKING;
   152c8:	2411      	movs	r4, #17
		PR_FAULT_INFO("  Stacking error (context area might be"
   152ca:	f013 fd52 	bl	28d72 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   152ce:	4b46      	ldr	r3, [pc, #280]	; (153e8 <mem_manage_fault+0x15c>)
   152d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   152d2:	071d      	lsls	r5, r3, #28
   152d4:	d50b      	bpl.n	152ee <mem_manage_fault+0x62>
		PR_FAULT_INFO("  Unstacking error");
   152d6:	4b46      	ldr	r3, [pc, #280]	; (153f0 <mem_manage_fault+0x164>)
   152d8:	617b      	str	r3, [r7, #20]
   152da:	2302      	movs	r3, #2
   152dc:	4841      	ldr	r0, [pc, #260]	; (153e4 <mem_manage_fault+0x158>)
   152de:	613b      	str	r3, [r7, #16]
   152e0:	f107 0210 	add.w	r2, r7, #16
   152e4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_UNSTACKING;
   152e8:	2412      	movs	r4, #18
		PR_FAULT_INFO("  Unstacking error");
   152ea:	f013 fd42 	bl	28d72 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   152ee:	4d3e      	ldr	r5, [pc, #248]	; (153e8 <mem_manage_fault+0x15c>)
   152f0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   152f2:	0798      	lsls	r0, r3, #30
   152f4:	d528      	bpl.n	15348 <mem_manage_fault+0xbc>
		PR_FAULT_INFO("  Data Access Violation");
   152f6:	466c      	mov	r4, sp
   152f8:	4b3e      	ldr	r3, [pc, #248]	; (153f4 <mem_manage_fault+0x168>)
   152fa:	617b      	str	r3, [r7, #20]
   152fc:	2302      	movs	r3, #2
   152fe:	613b      	str	r3, [r7, #16]
   15300:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15304:	4837      	ldr	r0, [pc, #220]	; (153e4 <mem_manage_fault+0x158>)
   15306:	f107 0210 	add.w	r2, r7, #16
   1530a:	f013 fd32 	bl	28d72 <z_log_msg_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
   1530e:	6b6e      	ldr	r6, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   15310:	6aab      	ldr	r3, [r5, #40]	; 0x28
   15312:	0619      	lsls	r1, r3, #24
   15314:	d560      	bpl.n	153d8 <mem_manage_fault+0x14c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   15316:	b088      	sub	sp, #32
   15318:	466a      	mov	r2, sp
   1531a:	4b37      	ldr	r3, [pc, #220]	; (153f8 <mem_manage_fault+0x16c>)
   1531c:	4831      	ldr	r0, [pc, #196]	; (153e4 <mem_manage_fault+0x158>)
   1531e:	e9c2 3605 	strd	r3, r6, [r2, #20]
   15322:	2303      	movs	r3, #3
   15324:	f842 3f10 	str.w	r3, [r2, #16]!
   15328:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1532c:	f013 fd21 	bl	28d72 <z_log_msg_static_create.constprop.0>
   15330:	46a5      	mov	sp, r4
			if (from_hard_fault != 0) {
   15332:	f1ba 0f00 	cmp.w	sl, #0
   15336:	d003      	beq.n	15340 <mem_manage_fault+0xb4>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   15338:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1533a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1533e:	62ab      	str	r3, [r5, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
   15340:	2413      	movs	r4, #19
   15342:	e003      	b.n	1534c <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
   15344:	2410      	movs	r4, #16
   15346:	e7c2      	b.n	152ce <mem_manage_fault+0x42>
	uint32_t mmfar = -EINVAL;
   15348:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   1534c:	4b26      	ldr	r3, [pc, #152]	; (153e8 <mem_manage_fault+0x15c>)
   1534e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15350:	07da      	lsls	r2, r3, #31
   15352:	d50b      	bpl.n	1536c <mem_manage_fault+0xe0>
		PR_FAULT_INFO("  Instruction Access Violation");
   15354:	4b29      	ldr	r3, [pc, #164]	; (153fc <mem_manage_fault+0x170>)
   15356:	617b      	str	r3, [r7, #20]
   15358:	2302      	movs	r3, #2
   1535a:	4822      	ldr	r0, [pc, #136]	; (153e4 <mem_manage_fault+0x158>)
   1535c:	613b      	str	r3, [r7, #16]
   1535e:	f107 0210 	add.w	r2, r7, #16
   15362:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
   15366:	2414      	movs	r4, #20
		PR_FAULT_INFO("  Instruction Access Violation");
   15368:	f013 fd03 	bl	28d72 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1536c:	4b1e      	ldr	r3, [pc, #120]	; (153e8 <mem_manage_fault+0x15c>)
   1536e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15370:	069b      	lsls	r3, r3, #26
   15372:	d50b      	bpl.n	1538c <mem_manage_fault+0x100>
		PR_FAULT_INFO(
   15374:	4b22      	ldr	r3, [pc, #136]	; (15400 <mem_manage_fault+0x174>)
   15376:	617b      	str	r3, [r7, #20]
   15378:	2302      	movs	r3, #2
   1537a:	481a      	ldr	r0, [pc, #104]	; (153e4 <mem_manage_fault+0x158>)
   1537c:	613b      	str	r3, [r7, #16]
   1537e:	f107 0210 	add.w	r2, r7, #16
   15382:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
   15386:	2415      	movs	r4, #21
		PR_FAULT_INFO(
   15388:	f013 fcf3 	bl	28d72 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1538c:	4b16      	ldr	r3, [pc, #88]	; (153e8 <mem_manage_fault+0x15c>)
   1538e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   15390:	06d5      	lsls	r5, r2, #27
   15392:	d402      	bmi.n	1539a <mem_manage_fault+0x10e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   15394:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   15396:	0790      	lsls	r0, r2, #30
   15398:	d50a      	bpl.n	153b0 <mem_manage_fault+0x124>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   1539a:	685b      	ldr	r3, [r3, #4]
   1539c:	0519      	lsls	r1, r3, #20
   1539e:	d507      	bpl.n	153b0 <mem_manage_fault+0x124>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   153a0:	4649      	mov	r1, r9
   153a2:	4630      	mov	r0, r6
   153a4:	f7ff fdec 	bl	14f80 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   153a8:	b110      	cbz	r0, 153b0 <mem_manage_fault+0x124>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   153aa:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   153ae:	2402      	movs	r4, #2
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   153b0:	4b0d      	ldr	r3, [pc, #52]	; (153e8 <mem_manage_fault+0x15c>)
   153b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   153b4:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   153b6:	bf42      	ittt	mi
   153b8:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   153ba:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   153be:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   153c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   153c2:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   153c6:	629a      	str	r2, [r3, #40]	; 0x28
}
   153c8:	4620      	mov	r0, r4
	*recoverable = memory_fault_recoverable(esf, true);
   153ca:	2300      	movs	r3, #0
}
   153cc:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
   153ce:	f888 3000 	strb.w	r3, [r8]
}
   153d2:	46bd      	mov	sp, r7
   153d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32_t mmfar = -EINVAL;
   153d8:	f06f 0615 	mvn.w	r6, #21
   153dc:	e7b0      	b.n	15340 <mem_manage_fault+0xb4>
   153de:	bf00      	nop
   153e0:	0002e17b 	.word	0x0002e17b
   153e4:	0002cbe4 	.word	0x0002cbe4
   153e8:	e000ed00 	.word	0xe000ed00
   153ec:	0002e191 	.word	0x0002e191
   153f0:	0002e00b 	.word	0x0002e00b
   153f4:	0002e1c4 	.word	0x0002e1c4
   153f8:	0002e1dc 	.word	0x0002e1dc
   153fc:	0002e1f2 	.word	0x0002e1f2
   15400:	0002e07f 	.word	0x0002e07f

00015404 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   15404:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   15408:	4b77      	ldr	r3, [pc, #476]	; (155e8 <z_arm_fault+0x1e4>)
{
   1540a:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1540c:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   15410:	af00      	add	r7, sp, #0
   15412:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   15414:	f3c8 0408 	ubfx	r4, r8, #0, #9
   15418:	2600      	movs	r6, #0
   1541a:	f386 8811 	msr	BASEPRI, r6
   1541e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   15422:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   15426:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   1542a:	d10e      	bne.n	1544a <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   1542c:	f002 030c 	and.w	r3, r2, #12
   15430:	2b08      	cmp	r3, #8
   15432:	d119      	bne.n	15468 <z_arm_fault+0x64>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   15434:	4b6d      	ldr	r3, [pc, #436]	; (155ec <z_arm_fault+0x1e8>)
   15436:	61fb      	str	r3, [r7, #28]
   15438:	2302      	movs	r3, #2
   1543a:	486d      	ldr	r0, [pc, #436]	; (155f0 <z_arm_fault+0x1ec>)
   1543c:	61bb      	str	r3, [r7, #24]
   1543e:	f107 0218 	add.w	r2, r7, #24
   15442:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15446:	f013 fc94 	bl	28d72 <z_log_msg_static_create.constprop.0>
	*nested_exc = false;
   1544a:	2600      	movs	r6, #0
		return NULL;
   1544c:	4635      	mov	r5, r6
	*recoverable = false;
   1544e:	2300      	movs	r3, #0
   15450:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
   15452:	1ee3      	subs	r3, r4, #3
   15454:	2b09      	cmp	r3, #9
   15456:	f200 80a6 	bhi.w	155a6 <z_arm_fault+0x1a2>
   1545a:	e8df f003 	tbb	[pc, r3]
   1545e:	990a      	.short	0x990a
   15460:	a4a4959c 	.word	0xa4a4959c
   15464:	9fa4a4a4 	.word	0x9fa4a4a4
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   15468:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
   1546a:	bf4c      	ite	mi
   1546c:	460d      	movmi	r5, r1
			*nested_exc = true;
   1546e:	2601      	movpl	r6, #1
   15470:	e7ed      	b.n	1544e <z_arm_fault+0x4a>
	PR_FAULT_INFO("***** HARD FAULT *****");
   15472:	46e9      	mov	r9, sp
   15474:	4b5f      	ldr	r3, [pc, #380]	; (155f4 <z_arm_fault+0x1f0>)
   15476:	61fb      	str	r3, [r7, #28]
   15478:	f04f 0802 	mov.w	r8, #2
   1547c:	f107 0218 	add.w	r2, r7, #24
   15480:	485b      	ldr	r0, [pc, #364]	; (155f0 <z_arm_fault+0x1ec>)
   15482:	f8c7 8018 	str.w	r8, [r7, #24]
   15486:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1548a:	f013 fc72 	bl	28d72 <z_log_msg_static_create.constprop.0>
	*recoverable = false;
   1548e:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   15490:	4c55      	ldr	r4, [pc, #340]	; (155e8 <z_arm_fault+0x1e4>)
	*recoverable = false;
   15492:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   15494:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   15496:	079a      	lsls	r2, r3, #30
   15498:	d50b      	bpl.n	154b2 <z_arm_fault+0xae>
		PR_EXC("  Bus fault on vector table read");
   1549a:	4b57      	ldr	r3, [pc, #348]	; (155f8 <z_arm_fault+0x1f4>)
		PR_EXC("  Debug event");
   1549c:	e9c7 8306 	strd	r8, r3, [r7, #24]
	PR_FAULT_INFO(
   154a0:	4853      	ldr	r0, [pc, #332]	; (155f0 <z_arm_fault+0x1ec>)
   154a2:	f107 0218 	add.w	r2, r7, #24
   154a6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   154aa:	f013 fc62 	bl	28d72 <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   154ae:	2400      	movs	r4, #0
   154b0:	e041      	b.n	15536 <z_arm_fault+0x132>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   154b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   154b4:	2b00      	cmp	r3, #0
   154b6:	da01      	bge.n	154bc <z_arm_fault+0xb8>
		PR_EXC("  Debug event");
   154b8:	4b50      	ldr	r3, [pc, #320]	; (155fc <z_arm_fault+0x1f8>)
   154ba:	e7ef      	b.n	1549c <z_arm_fault+0x98>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   154bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   154be:	005b      	lsls	r3, r3, #1
   154c0:	d5f5      	bpl.n	154ae <z_arm_fault+0xaa>
		PR_EXC("  Fault escalation (see below)");
   154c2:	4b4f      	ldr	r3, [pc, #316]	; (15600 <z_arm_fault+0x1fc>)
   154c4:	484a      	ldr	r0, [pc, #296]	; (155f0 <z_arm_fault+0x1ec>)
   154c6:	e9c7 8306 	strd	r8, r3, [r7, #24]
   154ca:	f107 0218 	add.w	r2, r7, #24
   154ce:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   154d2:	f013 fc4e 	bl	28d72 <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   154d6:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   154d8:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   154da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   154de:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   154e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   154e4:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   154e8:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   154ea:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   154ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   154f2:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   154f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   154f8:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   154fc:	f64d 7302 	movw	r3, #57090	; 0xdf02
   15500:	429a      	cmp	r2, r3
   15502:	d008      	beq.n	15516 <z_arm_fault+0x112>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   15504:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   15506:	b2db      	uxtb	r3, r3
   15508:	b38b      	cbz	r3, 1556e <z_arm_fault+0x16a>
			reason = mem_manage_fault(esf, 1, recoverable);
   1550a:	1dfa      	adds	r2, r7, #7
   1550c:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   1550e:	4628      	mov	r0, r5
   15510:	f7ff febc 	bl	1528c <mem_manage_fault>
   15514:	e03a      	b.n	1558c <z_arm_fault+0x188>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   15516:	b088      	sub	sp, #32
   15518:	682b      	ldr	r3, [r5, #0]
   1551a:	466a      	mov	r2, sp
   1551c:	4939      	ldr	r1, [pc, #228]	; (15604 <z_arm_fault+0x200>)
   1551e:	4834      	ldr	r0, [pc, #208]	; (155f0 <z_arm_fault+0x1ec>)
   15520:	e9c2 1305 	strd	r1, r3, [r2, #20]
   15524:	2303      	movs	r3, #3
   15526:	f842 3f10 	str.w	r3, [r2, #16]!
   1552a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1552e:	f013 fc20 	bl	28d72 <z_log_msg_static_create.constprop.0>
			reason = esf->basic.r0;
   15532:	682c      	ldr	r4, [r5, #0]
   15534:	46cd      	mov	sp, r9
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   15536:	79fb      	ldrb	r3, [r7, #7]
   15538:	b9ab      	cbnz	r3, 15566 <z_arm_fault+0x162>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   1553a:	2220      	movs	r2, #32
   1553c:	4629      	mov	r1, r5
   1553e:	f107 0008 	add.w	r0, r7, #8
   15542:	f013 fcf1 	bl	28f28 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   15546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15548:	2e00      	cmp	r6, #0
   1554a:	d047      	beq.n	155dc <z_arm_fault+0x1d8>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   1554c:	f3c3 0208 	ubfx	r2, r3, #0, #9
   15550:	b922      	cbnz	r2, 1555c <z_arm_fault+0x158>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   15552:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   15556:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1555a:	627b      	str	r3, [r7, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
   1555c:	f107 0108 	add.w	r1, r7, #8
   15560:	4620      	mov	r0, r4
   15562:	f7ff fbbf 	bl	14ce4 <z_arm_fatal_error>
}
   15566:	372c      	adds	r7, #44	; 0x2c
   15568:	46bd      	mov	sp, r7
   1556a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   1556e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   15570:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   15574:	d004      	beq.n	15580 <z_arm_fault+0x17c>
			reason = bus_fault(esf, 1, recoverable);
   15576:	1df9      	adds	r1, r7, #7
   15578:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   1557a:	f7ff fd5b 	bl	15034 <bus_fault.constprop.0>
   1557e:	e005      	b.n	1558c <z_arm_fault+0x188>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   15580:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   15582:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   15586:	d392      	bcc.n	154ae <z_arm_fault+0xaa>
			reason = usage_fault(esf);
   15588:	f7ff fdfe 	bl	15188 <usage_fault.constprop.0>
   1558c:	4604      	mov	r4, r0
   1558e:	e7d2      	b.n	15536 <z_arm_fault+0x132>
		reason = mem_manage_fault(esf, 0, recoverable);
   15590:	1dfa      	adds	r2, r7, #7
   15592:	2100      	movs	r1, #0
   15594:	e7bb      	b.n	1550e <z_arm_fault+0x10a>
		reason = bus_fault(esf, 0, recoverable);
   15596:	1df9      	adds	r1, r7, #7
   15598:	2000      	movs	r0, #0
   1559a:	e7ee      	b.n	1557a <z_arm_fault+0x176>
	PR_FAULT_INFO(
   1559c:	4b1a      	ldr	r3, [pc, #104]	; (15608 <z_arm_fault+0x204>)
   1559e:	61fb      	str	r3, [r7, #28]
   155a0:	2302      	movs	r3, #2
   155a2:	61bb      	str	r3, [r7, #24]
   155a4:	e77c      	b.n	154a0 <z_arm_fault+0x9c>
	PR_FAULT_INFO("***** %s %d) *****",
   155a6:	4a19      	ldr	r2, [pc, #100]	; (1560c <z_arm_fault+0x208>)
   155a8:	4b19      	ldr	r3, [pc, #100]	; (15610 <z_arm_fault+0x20c>)
   155aa:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   155ae:	46e8      	mov	r8, sp
   155b0:	b08a      	sub	sp, #40	; 0x28
   155b2:	bf18      	it	ne
   155b4:	4613      	movne	r3, r2
   155b6:	466a      	mov	r2, sp
   155b8:	4916      	ldr	r1, [pc, #88]	; (15614 <z_arm_fault+0x210>)
   155ba:	480d      	ldr	r0, [pc, #52]	; (155f0 <z_arm_fault+0x1ec>)
   155bc:	e9c2 1305 	strd	r1, r3, [r2, #20]
   155c0:	f44f 7300 	mov.w	r3, #512	; 0x200
   155c4:	8413      	strh	r3, [r2, #32]
   155c6:	3c10      	subs	r4, #16
   155c8:	4b13      	ldr	r3, [pc, #76]	; (15618 <z_arm_fault+0x214>)
   155ca:	61d4      	str	r4, [r2, #28]
   155cc:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   155d0:	f842 3f10 	str.w	r3, [r2, #16]!
   155d4:	f013 fbcd 	bl	28d72 <z_log_msg_static_create.constprop.0>
   155d8:	46c5      	mov	sp, r8
}
   155da:	e768      	b.n	154ae <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   155dc:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   155e0:	f023 0301 	bic.w	r3, r3, #1
   155e4:	e7b9      	b.n	1555a <z_arm_fault+0x156>
   155e6:	bf00      	nop
   155e8:	e000ed00 	.word	0xe000ed00
   155ec:	0002e23f 	.word	0x0002e23f
   155f0:	0002cbe4 	.word	0x0002cbe4
   155f4:	0002e26a 	.word	0x0002e26a
   155f8:	0002e281 	.word	0x0002e281
   155fc:	0002e2a2 	.word	0x0002e2a2
   15600:	0002e2b0 	.word	0x0002e2b0
   15604:	0002e2cf 	.word	0x0002e2cf
   15608:	0002e2eb 	.word	0x0002e2eb
   1560c:	0002e226 	.word	0x0002e226
   15610:	0002e211 	.word	0x0002e211
   15614:	0002e30f 	.word	0x0002e30f
   15618:	01000004 	.word	0x01000004

0001561c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1561c:	4a02      	ldr	r2, [pc, #8]	; (15628 <z_arm_fault_init+0xc>)
   1561e:	6953      	ldr	r3, [r2, #20]
   15620:	f043 0310 	orr.w	r3, r3, #16
   15624:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   15626:	4770      	bx	lr
   15628:	e000ed00 	.word	0xe000ed00

0001562c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   1562c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   15630:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   15634:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   15636:	4672      	mov	r2, lr
	bl z_arm_fault
   15638:	f7ff fee4 	bl	15404 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   1563c:	bd01      	pop	{r0, pc}
   1563e:	bf00      	nop

00015640 <z_arm_interrupt_init>:
   15640:	4804      	ldr	r0, [pc, #16]	; (15654 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   15642:	2300      	movs	r3, #0
   15644:	2140      	movs	r1, #64	; 0x40
   15646:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   15648:	3301      	adds	r3, #1
   1564a:	2b30      	cmp	r3, #48	; 0x30
   1564c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   15650:	d1f9      	bne.n	15646 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   15652:	4770      	bx	lr
   15654:	e000e100 	.word	0xe000e100

00015658 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   15658:	2000      	movs	r0, #0
    msr CONTROL, r0
   1565a:	f380 8814 	msr	CONTROL, r0
    isb
   1565e:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   15662:	f7fd fcc3 	bl	12fec <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   15666:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   15668:	490d      	ldr	r1, [pc, #52]	; (156a0 <__start+0x48>)
    str r0, [r1]
   1566a:	6008      	str	r0, [r1, #0]
    dsb
   1566c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   15670:	480c      	ldr	r0, [pc, #48]	; (156a4 <__start+0x4c>)
    msr msp, r0
   15672:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   15676:	f000 f82b 	bl	156d0 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1567a:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   1567c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   15680:	4809      	ldr	r0, [pc, #36]	; (156a8 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   15682:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
   15686:	1840      	adds	r0, r0, r1
    msr PSP, r0
   15688:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   1568c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   15690:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   15692:	4308      	orrs	r0, r1
    msr CONTROL, r0
   15694:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   15698:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   1569c:	f7ff fbe4 	bl	14e68 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   156a0:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   156a4:	200081c0 	.word	0x200081c0
    ldr r0, =z_interrupt_stacks
   156a8:	20007000 	.word	0x20007000

000156ac <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   156ac:	4907      	ldr	r1, [pc, #28]	; (156cc <z_arm_clear_arm_mpu_config+0x20>)
   156ae:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
   156b2:	2300      	movs	r3, #0
	int num_regions =
   156b4:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   156b8:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   156ba:	4293      	cmp	r3, r2
   156bc:	db00      	blt.n	156c0 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   156be:	4770      	bx	lr
  MPU->RNR = rnr;
   156c0:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
   156c4:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   156c8:	3301      	adds	r3, #1
   156ca:	e7f6      	b.n	156ba <z_arm_clear_arm_mpu_config+0xe>
   156cc:	e000ed00 	.word	0xe000ed00

000156d0 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   156d0:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   156d2:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   156d4:	2300      	movs	r3, #0
   156d6:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   156da:	f7ff ffe7 	bl	156ac <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   156de:	4b14      	ldr	r3, [pc, #80]	; (15730 <z_arm_init_arch_hw_at_boot+0x60>)
   156e0:	f04f 32ff 	mov.w	r2, #4294967295
   156e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   156e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   156ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   156f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   156f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   156f8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   156fc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   15700:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   15704:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   15708:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   1570c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   15710:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   15714:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   15718:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   1571c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   15720:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   15724:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   15726:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1572a:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   1572e:	bd08      	pop	{r3, pc}
   15730:	e000e100 	.word	0xe000e100

00015734 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   15734:	4b08      	ldr	r3, [pc, #32]	; (15758 <z_impl_k_thread_abort+0x24>)
   15736:	689b      	ldr	r3, [r3, #8]
   15738:	4283      	cmp	r3, r0
   1573a:	d10b      	bne.n	15754 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1573c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   15740:	b143      	cbz	r3, 15754 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   15742:	4b06      	ldr	r3, [pc, #24]	; (1575c <z_impl_k_thread_abort+0x28>)
   15744:	685a      	ldr	r2, [r3, #4]
   15746:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   1574a:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   1574c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1574e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   15752:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   15754:	f00e bb00 	b.w	23d58 <z_thread_abort>
   15758:	20003a14 	.word	0x20003a14
   1575c:	e000ed00 	.word	0xe000ed00

00015760 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   15760:	4b02      	ldr	r3, [pc, #8]	; (1576c <z_arm_configure_static_mpu_regions+0xc>)
   15762:	4a03      	ldr	r2, [pc, #12]	; (15770 <z_arm_configure_static_mpu_regions+0x10>)
   15764:	4803      	ldr	r0, [pc, #12]	; (15774 <z_arm_configure_static_mpu_regions+0x14>)
   15766:	2101      	movs	r1, #1
   15768:	f000 b892 	b.w	15890 <arm_core_mpu_configure_static_mpu_regions>
   1576c:	20040000 	.word	0x20040000
   15770:	20000000 	.word	0x20000000
   15774:	0002cf60 	.word	0x0002cf60

00015778 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   15778:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   1577a:	4b05      	ldr	r3, [pc, #20]	; (15790 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   1577c:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
   1577e:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   15780:	4a04      	ldr	r2, [pc, #16]	; (15794 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   15782:	2140      	movs	r1, #64	; 0x40
   15784:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   15788:	4618      	mov	r0, r3
   1578a:	2101      	movs	r1, #1
   1578c:	f000 b88a 	b.w	158a4 <arm_core_mpu_configure_dynamic_mpu_regions>
   15790:	20003434 	.word	0x20003434
   15794:	150b0000 	.word	0x150b0000

00015798 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   15798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   1579c:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 15854 <mpu_configure_regions+0xbc>
   157a0:	469c      	mov	ip, r3
   157a2:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;
   157a4:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
   157a6:	2300      	movs	r3, #0
   157a8:	428b      	cmp	r3, r1
   157aa:	da1a      	bge.n	157e2 <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
   157ac:	6844      	ldr	r4, [r0, #4]
   157ae:	2c00      	cmp	r4, #0
   157b0:	d04d      	beq.n	1584e <mpu_configure_regions+0xb6>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   157b2:	f1bc 0f00 	cmp.w	ip, #0
   157b6:	d01d      	beq.n	157f4 <mpu_configure_regions+0x5c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   157b8:	1e66      	subs	r6, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   157ba:	4234      	tst	r4, r6
   157bc:	d015      	beq.n	157ea <mpu_configure_regions+0x52>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   157be:	466c      	mov	r4, sp
   157c0:	b088      	sub	sp, #32
   157c2:	466a      	mov	r2, sp
   157c4:	4924      	ldr	r1, [pc, #144]	; (15858 <mpu_configure_regions+0xc0>)
   157c6:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   157ca:	2303      	movs	r3, #3
   157cc:	f842 3f10 	str.w	r3, [r2, #16]!
   157d0:	4822      	ldr	r0, [pc, #136]	; (1585c <mpu_configure_regions+0xc4>)
   157d2:	2300      	movs	r3, #0
   157d4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   157d8:	f7fe f9f4 	bl	13bc4 <z_impl_z_log_msg_static_create>
			return -EINVAL;
   157dc:	f06f 0515 	mvn.w	r5, #21
   157e0:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   157e2:	4628      	mov	r0, r5
   157e4:	46bd      	mov	sp, r7
   157e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		&&
   157ea:	2c1f      	cmp	r4, #31
   157ec:	d9e7      	bls.n	157be <mpu_configure_regions+0x26>
		((part->start & (part->size - 1U)) == 0U);
   157ee:	6802      	ldr	r2, [r0, #0]
		&&
   157f0:	4216      	tst	r6, r2
   157f2:	d1e4      	bne.n	157be <mpu_configure_regions+0x26>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   157f4:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   157f6:	6802      	ldr	r2, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   157f8:	6886      	ldr	r6, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   157fa:	fa5f f885 	uxtb.w	r8, r5
	if (size <= 32U) {
   157fe:	d914      	bls.n	1582a <mpu_configure_regions+0x92>
	if (size > (1UL << 31)) {
   15800:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   15804:	d813      	bhi.n	1582e <mpu_configure_regions+0x96>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   15806:	3c01      	subs	r4, #1
   15808:	fab4 f484 	clz	r4, r4
   1580c:	f1c4 041f 	rsb	r4, r4, #31
   15810:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   15812:	f1b8 0f07 	cmp.w	r8, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   15816:	ea46 0604 	orr.w	r6, r6, r4
   1581a:	d90a      	bls.n	15832 <mpu_configure_regions+0x9a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   1581c:	466c      	mov	r4, sp
   1581e:	b088      	sub	sp, #32
   15820:	466a      	mov	r2, sp
   15822:	4b0f      	ldr	r3, [pc, #60]	; (15860 <mpu_configure_regions+0xc8>)
   15824:	e9c2 3505 	strd	r3, r5, [r2, #20]
   15828:	e7cf      	b.n	157ca <mpu_configure_regions+0x32>
		return REGION_32B;
   1582a:	2408      	movs	r4, #8
   1582c:	e7f1      	b.n	15812 <mpu_configure_regions+0x7a>
		return REGION_4G;
   1582e:	243e      	movs	r4, #62	; 0x3e
   15830:	e7ef      	b.n	15812 <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   15832:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
   15836:	432a      	orrs	r2, r5
   15838:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   1583c:	f046 0601 	orr.w	r6, r6, #1
   15840:	f8ce 5098 	str.w	r5, [lr, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   15844:	f8ce 209c 	str.w	r2, [lr, #156]	; 0x9c
		reg_index++;
   15848:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   1584a:	f8ce 60a0 	str.w	r6, [lr, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
   1584e:	3301      	adds	r3, #1
   15850:	300c      	adds	r0, #12
   15852:	e7a9      	b.n	157a8 <mpu_configure_regions+0x10>
   15854:	e000ed00 	.word	0xe000ed00
   15858:	0002e326 	.word	0x0002e326
   1585c:	0002cbcc 	.word	0x0002cbcc
   15860:	0002e349 	.word	0x0002e349

00015864 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   15864:	4b04      	ldr	r3, [pc, #16]	; (15878 <arm_core_mpu_enable+0x14>)
   15866:	2205      	movs	r2, #5
   15868:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   1586c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15870:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   15874:	4770      	bx	lr
   15876:	bf00      	nop
   15878:	e000ed00 	.word	0xe000ed00

0001587c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   1587c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   15880:	4b02      	ldr	r3, [pc, #8]	; (1588c <arm_core_mpu_disable+0x10>)
   15882:	2200      	movs	r2, #0
   15884:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   15888:	4770      	bx	lr
   1588a:	bf00      	nop
   1588c:	e000ed00 	.word	0xe000ed00

00015890 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   15890:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   15892:	4c03      	ldr	r4, [pc, #12]	; (158a0 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   15894:	2301      	movs	r3, #1
   15896:	7822      	ldrb	r2, [r4, #0]
   15898:	f7ff ff7e 	bl	15798 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   1589c:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   1589e:	bd10      	pop	{r4, pc}
   158a0:	2000457f 	.word	0x2000457f

000158a4 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
   158a4:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   158a6:	4a09      	ldr	r2, [pc, #36]	; (158cc <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
   158a8:	2300      	movs	r3, #0
   158aa:	7812      	ldrb	r2, [r2, #0]
   158ac:	f7ff ff74 	bl	15798 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   158b0:	f110 0f16 	cmn.w	r0, #22
   158b4:	d003      	beq.n	158be <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
   158b6:	4b06      	ldr	r3, [pc, #24]	; (158d0 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
   158b8:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   158ba:	2807      	cmp	r0, #7
   158bc:	dd00      	ble.n	158c0 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   158be:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
   158c0:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
   158c4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   158c8:	3001      	adds	r0, #1
   158ca:	e7f6      	b.n	158ba <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
   158cc:	2000457f 	.word	0x2000457f
   158d0:	e000ed00 	.word	0xe000ed00

000158d4 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   158d4:	4914      	ldr	r1, [pc, #80]	; (15928 <z_arm_mpu_init+0x54>)
   158d6:	6808      	ldr	r0, [r1, #0]
   158d8:	2808      	cmp	r0, #8
{
   158da:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   158dc:	d821      	bhi.n	15922 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   158de:	f7ff ffcd 	bl	1587c <arm_core_mpu_disable>
   158e2:	4c12      	ldr	r4, [pc, #72]	; (1592c <z_arm_mpu_init+0x58>)
   158e4:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   158e6:	2200      	movs	r2, #0
   158e8:	4290      	cmp	r0, r2
   158ea:	f101 010c 	add.w	r1, r1, #12
   158ee:	d105      	bne.n	158fc <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   158f0:	4b0f      	ldr	r3, [pc, #60]	; (15930 <z_arm_mpu_init+0x5c>)
   158f2:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   158f4:	f7ff ffb6 	bl	15864 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   158f8:	2000      	movs	r0, #0
}
   158fa:	bd10      	pop	{r4, pc}
   158fc:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   15900:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   15904:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   15908:	4313      	orrs	r3, r2
   1590a:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   1590e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   15912:	f851 3c04 	ldr.w	r3, [r1, #-4]
   15916:	f043 0301 	orr.w	r3, r3, #1
   1591a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1591e:	3201      	adds	r2, #1
   15920:	e7e2      	b.n	158e8 <z_arm_mpu_init+0x14>
		return -1;
   15922:	f04f 30ff 	mov.w	r0, #4294967295
   15926:	e7e8      	b.n	158fa <z_arm_mpu_init+0x26>
   15928:	0002cf6c 	.word	0x0002cf6c
   1592c:	e000ed00 	.word	0xe000ed00
   15930:	2000457f 	.word	0x2000457f

00015934 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
   15934:	4b01      	ldr	r3, [pc, #4]	; (1593c <__stdout_hook_install+0x8>)
   15936:	6018      	str	r0, [r3, #0]
}
   15938:	4770      	bx	lr
   1593a:	bf00      	nop
   1593c:	20000614 	.word	0x20000614

00015940 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(void)
{
   15940:	b510      	push	{r4, lr}
	__asm__ volatile(
   15942:	f04f 0340 	mov.w	r3, #64	; 0x40
   15946:	f3ef 8011 	mrs	r0, BASEPRI
   1594a:	f383 8812 	msr	BASEPRI_MAX, r3
   1594e:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   15952:	4a11      	ldr	r2, [pc, #68]	; (15998 <nordicsemi_nrf52_init+0x58>)
   15954:	2301      	movs	r3, #1
   15956:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   1595a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1595e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   15962:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   15966:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
   1596a:	2c08      	cmp	r4, #8
   1596c:	d108      	bne.n	15980 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1596e:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
   15972:	2905      	cmp	r1, #5
   15974:	d804      	bhi.n	15980 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
   15976:	4c09      	ldr	r4, [pc, #36]	; (1599c <nordicsemi_nrf52_init+0x5c>)
   15978:	5c61      	ldrb	r1, [r4, r1]
   1597a:	b109      	cbz	r1, 15980 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
   1597c:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   15980:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   15984:	2201      	movs	r2, #1
   15986:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
   1598a:	f380 8811 	msr	BASEPRI, r0
   1598e:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   15992:	2000      	movs	r0, #0
   15994:	bd10      	pop	{r4, pc}
   15996:	bf00      	nop
   15998:	4001e000 	.word	0x4001e000
   1599c:	0002e37e 	.word	0x0002e37e

000159a0 <sys_arch_reboot>:
    *p_gpregret = val;
   159a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   159a4:	b2c0      	uxtb	r0, r0
   159a6:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   159aa:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   159ae:	4905      	ldr	r1, [pc, #20]	; (159c4 <sys_arch_reboot+0x24>)
   159b0:	4b05      	ldr	r3, [pc, #20]	; (159c8 <sys_arch_reboot+0x28>)
   159b2:	68ca      	ldr	r2, [r1, #12]
   159b4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   159b8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   159ba:	60cb      	str	r3, [r1, #12]
   159bc:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   159c0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   159c2:	e7fd      	b.n	159c0 <sys_arch_reboot+0x20>
   159c4:	e000ed00 	.word	0xe000ed00
   159c8:	05fa0004 	.word	0x05fa0004

000159cc <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   159cc:	b120      	cbz	r0, 159d8 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   159ce:	4b03      	ldr	r3, [pc, #12]	; (159dc <arch_busy_wait+0x10>)
   159d0:	0180      	lsls	r0, r0, #6
   159d2:	f043 0301 	orr.w	r3, r3, #1
   159d6:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   159d8:	4770      	bx	lr
   159da:	bf00      	nop
   159dc:	0002cd80 	.word	0x0002cd80

000159e0 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(void)
{
   159e0:	b508      	push	{r3, lr}
   159e2:	4804      	ldr	r0, [pc, #16]	; (159f4 <xoshiro128_initialize+0x14>)
   159e4:	f016 f8e8 	bl	2bbb8 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
   159e8:	2800      	cmp	r0, #0
}
   159ea:	bf0c      	ite	eq
   159ec:	f06f 0012 	mvneq.w	r0, #18
   159f0:	2000      	movne	r0, #0
   159f2:	bd08      	pop	{r3, pc}
   159f4:	0002c854 	.word	0x0002c854

000159f8 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   159f8:	4b0e      	ldr	r3, [pc, #56]	; (15a34 <bt_hex+0x3c>)
   159fa:	2940      	cmp	r1, #64	; 0x40
{
   159fc:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   159fe:	bf28      	it	cs
   15a00:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
   15a02:	4c0d      	ldr	r4, [pc, #52]	; (15a38 <bt_hex+0x40>)
   15a04:	1846      	adds	r6, r0, r1
   15a06:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   15a08:	42b0      	cmp	r0, r6
   15a0a:	f103 0302 	add.w	r3, r3, #2
   15a0e:	d104      	bne.n	15a1a <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   15a10:	2300      	movs	r3, #0
   15a12:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   15a16:	4807      	ldr	r0, [pc, #28]	; (15a34 <bt_hex+0x3c>)
   15a18:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
   15a1a:	7802      	ldrb	r2, [r0, #0]
   15a1c:	0912      	lsrs	r2, r2, #4
   15a1e:	5ca2      	ldrb	r2, [r4, r2]
   15a20:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   15a24:	f810 2b01 	ldrb.w	r2, [r0], #1
   15a28:	f002 020f 	and.w	r2, r2, #15
   15a2c:	5ca2      	ldrb	r2, [r4, r2]
   15a2e:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   15a32:	e7e9      	b.n	15a08 <bt_hex+0x10>
   15a34:	2000459e 	.word	0x2000459e
   15a38:	0002e3a2 	.word	0x0002e3a2

00015a3c <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   15a3c:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   15a3e:	7803      	ldrb	r3, [r0, #0]
   15a40:	b08b      	sub	sp, #44	; 0x2c
   15a42:	4604      	mov	r4, r0
   15a44:	ad07      	add	r5, sp, #28
   15a46:	2b03      	cmp	r3, #3
   15a48:	d821      	bhi.n	15a8e <bt_addr_le_str+0x52>
   15a4a:	e8df f003 	tbb	[pc, r3]
   15a4e:	1a02      	.short	0x1a02
   15a50:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   15a52:	4912      	ldr	r1, [pc, #72]	; (15a9c <bt_addr_le_str+0x60>)
		strcpy(type, "random");
   15a54:	4628      	mov	r0, r5
   15a56:	f013 fa06 	bl	28e66 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   15a5a:	9505      	str	r5, [sp, #20]
   15a5c:	7863      	ldrb	r3, [r4, #1]
   15a5e:	9304      	str	r3, [sp, #16]
   15a60:	78a3      	ldrb	r3, [r4, #2]
   15a62:	9303      	str	r3, [sp, #12]
   15a64:	78e3      	ldrb	r3, [r4, #3]
   15a66:	9302      	str	r3, [sp, #8]
   15a68:	7923      	ldrb	r3, [r4, #4]
   15a6a:	9301      	str	r3, [sp, #4]
   15a6c:	7963      	ldrb	r3, [r4, #5]
   15a6e:	9300      	str	r3, [sp, #0]
   15a70:	79a3      	ldrb	r3, [r4, #6]
   15a72:	4a0b      	ldr	r2, [pc, #44]	; (15aa0 <bt_addr_le_str+0x64>)
   15a74:	480b      	ldr	r0, [pc, #44]	; (15aa4 <bt_addr_le_str+0x68>)
   15a76:	211e      	movs	r1, #30
   15a78:	f011 fd9c 	bl	275b4 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   15a7c:	4809      	ldr	r0, [pc, #36]	; (15aa4 <bt_addr_le_str+0x68>)
   15a7e:	b00b      	add	sp, #44	; 0x2c
   15a80:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   15a82:	4909      	ldr	r1, [pc, #36]	; (15aa8 <bt_addr_le_str+0x6c>)
   15a84:	e7e6      	b.n	15a54 <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
   15a86:	4909      	ldr	r1, [pc, #36]	; (15aac <bt_addr_le_str+0x70>)
   15a88:	e7e4      	b.n	15a54 <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
   15a8a:	4909      	ldr	r1, [pc, #36]	; (15ab0 <bt_addr_le_str+0x74>)
   15a8c:	e7e2      	b.n	15a54 <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   15a8e:	4a09      	ldr	r2, [pc, #36]	; (15ab4 <bt_addr_le_str+0x78>)
   15a90:	210a      	movs	r1, #10
   15a92:	4628      	mov	r0, r5
   15a94:	f011 fd8e 	bl	275b4 <snprintk>
		break;
   15a98:	e7df      	b.n	15a5a <bt_addr_le_str+0x1e>
   15a9a:	bf00      	nop
   15a9c:	0002d9be 	.word	0x0002d9be
   15aa0:	0002d9e0 	.word	0x0002d9e0
   15aa4:	20004580 	.word	0x20004580
   15aa8:	0002d9c5 	.word	0x0002d9c5
   15aac:	0002d9cc 	.word	0x0002d9cc
   15ab0:	0002d9d6 	.word	0x0002d9d6
   15ab4:	0002fd6e 	.word	0x0002fd6e

00015ab8 <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
   15ab8:	b5b0      	push	{r4, r5, r7, lr}
   15aba:	b086      	sub	sp, #24
	int err;
	LOG_INF("Saving ID");
   15abc:	466d      	mov	r5, sp
{
   15abe:	af00      	add	r7, sp, #0
	LOG_INF("Saving ID");
   15ac0:	4b1d      	ldr	r3, [pc, #116]	; (15b38 <save_id+0x80>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   15ac2:	4c1e      	ldr	r4, [pc, #120]	; (15b3c <save_id+0x84>)
	LOG_INF("Saving ID");
   15ac4:	481e      	ldr	r0, [pc, #120]	; (15b40 <save_id+0x88>)
   15ac6:	617b      	str	r3, [r7, #20]
   15ac8:	f107 0210 	add.w	r2, r7, #16
   15acc:	2302      	movs	r3, #2
   15ace:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   15ad2:	613b      	str	r3, [r7, #16]
   15ad4:	f013 fa98 	bl	29008 <z_log_msg_static_create.constprop.0>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   15ad8:	79e2      	ldrb	r2, [r4, #7]
   15ada:	481a      	ldr	r0, [pc, #104]	; (15b44 <save_id+0x8c>)
   15adc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   15ae0:	4621      	mov	r1, r4
   15ae2:	f7fe fd71 	bl	145c8 <settings_save_one>
	if (err) {
   15ae6:	b168      	cbz	r0, 15b04 <save_id+0x4c>
		LOG_ERR("Failed to save ID (err %d)", err);
   15ae8:	b088      	sub	sp, #32
   15aea:	466a      	mov	r2, sp
   15aec:	4b16      	ldr	r3, [pc, #88]	; (15b48 <save_id+0x90>)
   15aee:	e9c2 3005 	strd	r3, r0, [r2, #20]
   15af2:	2303      	movs	r3, #3
   15af4:	f842 3f10 	str.w	r3, [r2, #16]!
   15af8:	4811      	ldr	r0, [pc, #68]	; (15b40 <save_id+0x88>)
   15afa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15afe:	f013 fa83 	bl	29008 <z_log_msg_static_create.constprop.0>
   15b02:	46ad      	mov	sp, r5
	}

#if defined(CONFIG_BT_PRIVACY)
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
   15b04:	79e2      	ldrb	r2, [r4, #7]
   15b06:	4911      	ldr	r1, [pc, #68]	; (15b4c <save_id+0x94>)
   15b08:	4811      	ldr	r0, [pc, #68]	; (15b50 <save_id+0x98>)
   15b0a:	0112      	lsls	r2, r2, #4
   15b0c:	f7fe fd5c 	bl	145c8 <settings_save_one>
	if (err) {
   15b10:	b170      	cbz	r0, 15b30 <save_id+0x78>
		LOG_ERR("Failed to save IRK (err %d)", err);
   15b12:	466c      	mov	r4, sp
   15b14:	b088      	sub	sp, #32
   15b16:	466a      	mov	r2, sp
   15b18:	4b0e      	ldr	r3, [pc, #56]	; (15b54 <save_id+0x9c>)
   15b1a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   15b1e:	2303      	movs	r3, #3
   15b20:	f842 3f10 	str.w	r3, [r2, #16]!
   15b24:	4806      	ldr	r0, [pc, #24]	; (15b40 <save_id+0x88>)
   15b26:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15b2a:	f013 fa6d 	bl	29008 <z_log_msg_static_create.constprop.0>
   15b2e:	46a5      	mov	sp, r4
	}
#endif
}
   15b30:	3718      	adds	r7, #24
   15b32:	46bd      	mov	sp, r7
   15b34:	bdb0      	pop	{r4, r5, r7, pc}
   15b36:	bf00      	nop
   15b38:	0002e3ba 	.word	0x0002e3ba
   15b3c:	20000390 	.word	0x20000390
   15b40:	0002cb64 	.word	0x0002cb64
   15b44:	0002e3c4 	.word	0x0002e3c4
   15b48:	0002e3ca 	.word	0x0002e3ca
   15b4c:	200004f8 	.word	0x200004f8
   15b50:	0002e3e5 	.word	0x0002e3e5
   15b54:	0002e3ec 	.word	0x0002e3ec

00015b58 <set_setting>:
{
   15b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15b5c:	4c3c      	ldr	r4, [pc, #240]	; (15c50 <set_setting+0xf8>)
   15b5e:	f3bf 8f5b 	dmb	ish
   15b62:	461f      	mov	r7, r3
   15b64:	6823      	ldr	r3, [r4, #0]
   15b66:	f3bf 8f5b 	dmb	ish
   15b6a:	4616      	mov	r6, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   15b6c:	07da      	lsls	r2, r3, #31
{
   15b6e:	b088      	sub	sp, #32
   15b70:	4605      	mov	r5, r0
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   15b72:	d52b      	bpl.n	15bcc <set_setting+0x74>
	if (!name) {
   15b74:	b960      	cbnz	r0, 15b90 <set_setting+0x38>
		LOG_ERR("Insufficient number of arguments");
   15b76:	4b37      	ldr	r3, [pc, #220]	; (15c54 <set_setting+0xfc>)
   15b78:	9307      	str	r3, [sp, #28]
   15b7a:	4837      	ldr	r0, [pc, #220]	; (15c58 <set_setting+0x100>)
   15b7c:	2302      	movs	r3, #2
   15b7e:	aa06      	add	r2, sp, #24
   15b80:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15b84:	9306      	str	r3, [sp, #24]
   15b86:	f013 fa3f 	bl	29008 <z_log_msg_static_create.constprop.0>
		return -ENOENT;
   15b8a:	f06f 0001 	mvn.w	r0, #1
   15b8e:	e01e      	b.n	15bce <set_setting+0x76>
	len = settings_name_next(name, &next);
   15b90:	a901      	add	r1, sp, #4
   15b92:	f012 fde2 	bl	2875a <settings_name_next>
	if (!strncmp(name, "id", len)) {
   15b96:	4931      	ldr	r1, [pc, #196]	; (15c5c <set_setting+0x104>)
	len = settings_name_next(name, &next);
   15b98:	4680      	mov	r8, r0
	if (!strncmp(name, "id", len)) {
   15b9a:	4602      	mov	r2, r0
   15b9c:	4628      	mov	r0, r5
   15b9e:	f013 f988 	bl	28eb2 <strncmp>
   15ba2:	2800      	cmp	r0, #0
   15ba4:	d133      	bne.n	15c0e <set_setting+0xb6>
   15ba6:	f3bf 8f5b 	dmb	ish
   15baa:	6823      	ldr	r3, [r4, #0]
   15bac:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   15bb0:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   15bb4:	071b      	lsls	r3, r3, #28
   15bb6:	d50d      	bpl.n	15bd4 <set_setting+0x7c>
			LOG_WRN("Ignoring identities stored in flash");
   15bb8:	4b29      	ldr	r3, [pc, #164]	; (15c60 <set_setting+0x108>)
   15bba:	9307      	str	r3, [sp, #28]
   15bbc:	4826      	ldr	r0, [pc, #152]	; (15c58 <set_setting+0x100>)
   15bbe:	2302      	movs	r3, #2
   15bc0:	aa06      	add	r2, sp, #24
   15bc2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   15bc6:	9306      	str	r3, [sp, #24]
   15bc8:	f013 fa1e 	bl	29008 <z_log_msg_static_create.constprop.0>
		return 0;
   15bcc:	2000      	movs	r0, #0
}
   15bce:	b008      	add	sp, #32
   15bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   15bd4:	3cd4      	subs	r4, #212	; 0xd4
   15bd6:	2207      	movs	r2, #7
   15bd8:	4621      	mov	r1, r4
   15bda:	4638      	mov	r0, r7
   15bdc:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
   15bde:	2806      	cmp	r0, #6
   15be0:	d810      	bhi.n	15c04 <set_setting+0xac>
				LOG_ERR("Invalid length ID address in storage");
   15be2:	4b20      	ldr	r3, [pc, #128]	; (15c64 <set_setting+0x10c>)
   15be4:	481c      	ldr	r0, [pc, #112]	; (15c58 <set_setting+0x100>)
   15be6:	9307      	str	r3, [sp, #28]
   15be8:	aa06      	add	r2, sp, #24
   15bea:	2302      	movs	r3, #2
   15bec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15bf0:	9306      	str	r3, [sp, #24]
   15bf2:	f013 fa09 	bl	29008 <z_log_msg_static_create.constprop.0>
			(void)memset(bt_dev.id_addr, 0,
   15bf6:	2207      	movs	r2, #7
   15bf8:	4629      	mov	r1, r5
   15bfa:	4620      	mov	r0, r4
   15bfc:	f013 f99f 	bl	28f3e <memset>
			bt_dev.id_count = 0U;
   15c00:	71e5      	strb	r5, [r4, #7]
   15c02:	e7e3      	b.n	15bcc <set_setting+0x74>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   15c04:	2307      	movs	r3, #7
   15c06:	fbb0 f0f3 	udiv	r0, r0, r3
   15c0a:	71e0      	strb	r0, [r4, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   15c0c:	e7de      	b.n	15bcc <set_setting+0x74>
	if (!strncmp(name, "irk", len)) {
   15c0e:	4628      	mov	r0, r5
   15c10:	4915      	ldr	r1, [pc, #84]	; (15c68 <set_setting+0x110>)
   15c12:	4642      	mov	r2, r8
   15c14:	f013 f94d 	bl	28eb2 <strncmp>
   15c18:	4605      	mov	r5, r0
   15c1a:	2800      	cmp	r0, #0
   15c1c:	d1b5      	bne.n	15b8a <set_setting+0x32>
		len = read_cb(cb_arg, bt_dev.irk, sizeof(bt_dev.irk));
   15c1e:	2210      	movs	r2, #16
   15c20:	f104 0194 	add.w	r1, r4, #148	; 0x94
   15c24:	4638      	mov	r0, r7
   15c26:	47b0      	blx	r6
		if (len < sizeof(bt_dev.irk[0])) {
   15c28:	280f      	cmp	r0, #15
   15c2a:	d8cf      	bhi.n	15bcc <set_setting+0x74>
				LOG_ERR("Invalid length IRK in storage");
   15c2c:	4b0f      	ldr	r3, [pc, #60]	; (15c6c <set_setting+0x114>)
   15c2e:	9307      	str	r3, [sp, #28]
   15c30:	aa06      	add	r2, sp, #24
   15c32:	2302      	movs	r3, #2
   15c34:	4808      	ldr	r0, [pc, #32]	; (15c58 <set_setting+0x100>)
   15c36:	9306      	str	r3, [sp, #24]
   15c38:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15c3c:	f013 f9e4 	bl	29008 <z_log_msg_static_create.constprop.0>
				(void)memset(bt_dev.irk, 0, sizeof(bt_dev.irk));
   15c40:	2210      	movs	r2, #16
   15c42:	4629      	mov	r1, r5
   15c44:	f104 0094 	add.w	r0, r4, #148	; 0x94
   15c48:	f013 f979 	bl	28f3e <memset>
   15c4c:	e7be      	b.n	15bcc <set_setting+0x74>
   15c4e:	bf00      	nop
   15c50:	20000464 	.word	0x20000464
   15c54:	0002e408 	.word	0x0002e408
   15c58:	0002cb64 	.word	0x0002cb64
   15c5c:	0002d9d3 	.word	0x0002d9d3
   15c60:	0002e429 	.word	0x0002e429
   15c64:	0002e44d 	.word	0x0002e44d
   15c68:	0002e3e8 	.word	0x0002e3e8
   15c6c:	0002e472 	.word	0x0002e472

00015c70 <bt_settings_encode_key>:
{
   15c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15c74:	b088      	sub	sp, #32
		snprintk(path, path_size,
   15c76:	799c      	ldrb	r4, [r3, #6]
{
   15c78:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
   15c7c:	795d      	ldrb	r5, [r3, #5]
   15c7e:	791e      	ldrb	r6, [r3, #4]
   15c80:	78df      	ldrb	r7, [r3, #3]
   15c82:	f893 c002 	ldrb.w	ip, [r3, #2]
   15c86:	f893 e001 	ldrb.w	lr, [r3, #1]
   15c8a:	781b      	ldrb	r3, [r3, #0]
	if (key) {
   15c8c:	f1b8 0f00 	cmp.w	r8, #0
   15c90:	d00e      	beq.n	15cb0 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
   15c92:	e9cd 3806 	strd	r3, r8, [sp, #24]
   15c96:	e9cd ce04 	strd	ip, lr, [sp, #16]
   15c9a:	4613      	mov	r3, r2
   15c9c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   15ca0:	e9cd 4500 	strd	r4, r5, [sp]
   15ca4:	4a08      	ldr	r2, [pc, #32]	; (15cc8 <bt_settings_encode_key+0x58>)
   15ca6:	f011 fc85 	bl	275b4 <snprintk>
}
   15caa:	b008      	add	sp, #32
   15cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
   15cb0:	e9cd e305 	strd	lr, r3, [sp, #20]
   15cb4:	e9cd 7c03 	strd	r7, ip, [sp, #12]
   15cb8:	4613      	mov	r3, r2
   15cba:	e9cd 5601 	strd	r5, r6, [sp, #4]
   15cbe:	4a03      	ldr	r2, [pc, #12]	; (15ccc <bt_settings_encode_key+0x5c>)
   15cc0:	9400      	str	r4, [sp, #0]
   15cc2:	f011 fc77 	bl	275b4 <snprintk>
}
   15cc6:	e7f0      	b.n	15caa <bt_settings_encode_key+0x3a>
   15cc8:	0002e490 	.word	0x0002e490
   15ccc:	0002e4b4 	.word	0x0002e4b4

00015cd0 <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
   15cd0:	4801      	ldr	r0, [pc, #4]	; (15cd8 <bt_settings_save_id+0x8>)
   15cd2:	f00d bcbd 	b.w	23650 <k_work_submit>
   15cd6:	bf00      	nop
   15cd8:	20000618 	.word	0x20000618

00015cdc <commit_settings>:
}

static int commit_settings(void)
{
   15cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
   15cde:	4d21      	ldr	r5, [pc, #132]	; (15d64 <commit_settings+0x88>)
   15ce0:	f3bf 8f5b 	dmb	ish
   15ce4:	682b      	ldr	r3, [r5, #0]
   15ce6:	f3bf 8f5b 	dmb	ish
	int err;

	LOG_DBG("");

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   15cea:	f013 0f01 	tst.w	r3, #1
{
   15cee:	b087      	sub	sp, #28
   15cf0:	462e      	mov	r6, r5
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   15cf2:	d035      	beq.n	15d60 <commit_settings+0x84>
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
   15cf4:	f815 3ccd 	ldrb.w	r3, [r5, #-205]
   15cf8:	f1a5 07d4 	sub.w	r7, r5, #212	; 0xd4
   15cfc:	b9bb      	cbnz	r3, 15d2e <commit_settings+0x52>
		err = bt_setup_public_id_addr();
   15cfe:	f002 f9a1 	bl	18044 <bt_setup_public_id_addr>
		if (err) {
   15d02:	4604      	mov	r4, r0
   15d04:	b160      	cbz	r0, 15d20 <commit_settings+0x44>
	}

	if (!bt_dev.id_count) {
		err = bt_setup_random_id_addr();
		if (err) {
			LOG_ERR("Unable to setup an identity address");
   15d06:	4b18      	ldr	r3, [pc, #96]	; (15d68 <commit_settings+0x8c>)
   15d08:	9305      	str	r3, [sp, #20]
   15d0a:	4818      	ldr	r0, [pc, #96]	; (15d6c <commit_settings+0x90>)
   15d0c:	2302      	movs	r3, #2
   15d0e:	aa04      	add	r2, sp, #16
   15d10:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15d14:	9304      	str	r3, [sp, #16]
   15d16:	f013 f977 	bl	29008 <z_log_msg_static_create.constprop.0>
		LOG_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
   15d1a:	4620      	mov	r0, r4
   15d1c:	b007      	add	sp, #28
   15d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!bt_dev.id_count) {
   15d20:	79fb      	ldrb	r3, [r7, #7]
   15d22:	b923      	cbnz	r3, 15d2e <commit_settings+0x52>
		err = bt_setup_random_id_addr();
   15d24:	f002 fa2a 	bl	1817c <bt_setup_random_id_addr>
		if (err) {
   15d28:	4604      	mov	r4, r0
   15d2a:	2800      	cmp	r0, #0
   15d2c:	d1eb      	bne.n	15d06 <commit_settings+0x2a>
   15d2e:	f3bf 8f5b 	dmb	ish
   15d32:	682b      	ldr	r3, [r5, #0]
   15d34:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   15d38:	075a      	lsls	r2, r3, #29
   15d3a:	d401      	bmi.n	15d40 <commit_settings+0x64>
		bt_finalize_init();
   15d3c:	f001 fbca 	bl	174d4 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15d40:	f3bf 8f5b 	dmb	ish
   15d44:	e856 3f00 	ldrex	r3, [r6]
   15d48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
   15d4c:	e846 2100 	strex	r1, r2, [r6]
   15d50:	2900      	cmp	r1, #0
   15d52:	d1f7      	bne.n	15d44 <commit_settings+0x68>
   15d54:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   15d58:	03db      	lsls	r3, r3, #15
   15d5a:	d501      	bpl.n	15d60 <commit_settings+0x84>
		bt_settings_save_id();
   15d5c:	f7ff ffb8 	bl	15cd0 <bt_settings_save_id>
		return 0;
   15d60:	2400      	movs	r4, #0
   15d62:	e7da      	b.n	15d1a <commit_settings+0x3e>
   15d64:	20000464 	.word	0x20000464
   15d68:	0002e4d5 	.word	0x0002e4d5
   15d6c:	0002cb64 	.word	0x0002cb64

00015d70 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set_setting, commit_settings, NULL);

int bt_settings_init(void)
{
   15d70:	b5b0      	push	{r4, r5, r7, lr}
   15d72:	af00      	add	r7, sp, #0
	int err;

	LOG_DBG("");

	err = settings_subsys_init();
   15d74:	f7fe fd8e 	bl	14894 <settings_subsys_init>
	if (err) {
   15d78:	4604      	mov	r4, r0
   15d7a:	b170      	cbz	r0, 15d9a <bt_settings_init+0x2a>
		LOG_ERR("settings_subsys_init failed (err %d)", err);
   15d7c:	466d      	mov	r5, sp
   15d7e:	b088      	sub	sp, #32
   15d80:	466a      	mov	r2, sp
   15d82:	4b07      	ldr	r3, [pc, #28]	; (15da0 <bt_settings_init+0x30>)
   15d84:	e9c2 3005 	strd	r3, r0, [r2, #20]
   15d88:	2303      	movs	r3, #3
   15d8a:	f842 3f10 	str.w	r3, [r2, #16]!
   15d8e:	4805      	ldr	r0, [pc, #20]	; (15da4 <bt_settings_init+0x34>)
   15d90:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15d94:	f013 f938 	bl	29008 <z_log_msg_static_create.constprop.0>
   15d98:	46ad      	mov	sp, r5
		return err;
	}

	return 0;
}
   15d9a:	4620      	mov	r0, r4
   15d9c:	46bd      	mov	sp, r7
   15d9e:	bdb0      	pop	{r4, r5, r7, pc}
   15da0:	0002e4f9 	.word	0x0002e4f9
   15da4:	0002cb64 	.word	0x0002cb64

00015da8 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(void)
{
   15da8:	b530      	push	{r4, r5, lr}

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};

	k_work_queue_init(&bt_long_wq);
   15daa:	4d0a      	ldr	r5, [pc, #40]	; (15dd4 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   15dac:	4b0a      	ldr	r3, [pc, #40]	; (15dd8 <long_wq_init+0x30>)
{
   15dae:	b085      	sub	sp, #20
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   15db0:	2400      	movs	r4, #0
	k_work_queue_init(&bt_long_wq);
   15db2:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   15db4:	9302      	str	r3, [sp, #8]
   15db6:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   15db8:	f016 f947 	bl	2c04a <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   15dbc:	ab02      	add	r3, sp, #8
   15dbe:	9300      	str	r3, [sp, #0]
   15dc0:	4628      	mov	r0, r5
   15dc2:	4906      	ldr	r1, [pc, #24]	; (15ddc <long_wq_init+0x34>)
   15dc4:	230a      	movs	r3, #10
   15dc6:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   15dca:	f00d fc47 	bl	2365c <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   15dce:	4620      	mov	r0, r4
   15dd0:	b005      	add	sp, #20
   15dd2:	bd30      	pop	{r4, r5, pc}
   15dd4:	20001df0 	.word	0x20001df0
   15dd8:	0002e52d 	.word	0x0002e52d
   15ddc:	20005300 	.word	0x20005300

00015de0 <bt_long_wq_schedule>:
{
   15de0:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   15de2:	4801      	ldr	r0, [pc, #4]	; (15de8 <bt_long_wq_schedule+0x8>)
   15de4:	f00d bc72 	b.w	236cc <k_work_schedule_for_queue>
   15de8:	20001df0 	.word	0x20001df0

00015dec <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   15dec:	b430      	push	{r4, r5}
   15dee:	4603      	mov	r3, r0
   15df0:	4608      	mov	r0, r1
	switch (src->type) {
   15df2:	781a      	ldrb	r2, [r3, #0]
   15df4:	2a01      	cmp	r2, #1
   15df6:	d013      	beq.n	15e20 <uuid_to_uuid128+0x34>
   15df8:	2a02      	cmp	r2, #2
   15dfa:	d026      	beq.n	15e4a <uuid_to_uuid128+0x5e>
   15dfc:	b972      	cbnz	r2, 15e1c <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   15dfe:	4a15      	ldr	r2, [pc, #84]	; (15e54 <uuid_to_uuid128+0x68>)
   15e00:	f102 0410 	add.w	r4, r2, #16
   15e04:	f852 5b04 	ldr.w	r5, [r2], #4
   15e08:	f841 5b04 	str.w	r5, [r1], #4
   15e0c:	42a2      	cmp	r2, r4
   15e0e:	d1f9      	bne.n	15e04 <uuid_to_uuid128+0x18>
   15e10:	7812      	ldrb	r2, [r2, #0]
   15e12:	700a      	strb	r2, [r1, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   15e14:	885b      	ldrh	r3, [r3, #2]
	dst[0] = val;
   15e16:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   15e18:	0a1b      	lsrs	r3, r3, #8
   15e1a:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   15e1c:	bc30      	pop	{r4, r5}
   15e1e:	4770      	bx	lr
		*dst = uuid128_base;
   15e20:	4a0c      	ldr	r2, [pc, #48]	; (15e54 <uuid_to_uuid128+0x68>)
   15e22:	f102 0410 	add.w	r4, r2, #16
   15e26:	f852 5b04 	ldr.w	r5, [r2], #4
   15e2a:	f841 5b04 	str.w	r5, [r1], #4
   15e2e:	42a2      	cmp	r2, r4
   15e30:	d1f9      	bne.n	15e26 <uuid_to_uuid128+0x3a>
   15e32:	7812      	ldrb	r2, [r2, #0]
   15e34:	700a      	strb	r2, [r1, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   15e36:	685b      	ldr	r3, [r3, #4]
	dst[0] = val;
   15e38:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   15e3a:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   15e3e:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   15e40:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
   15e42:	0a1b      	lsrs	r3, r3, #8
   15e44:	7382      	strb	r2, [r0, #14]
   15e46:	7403      	strb	r3, [r0, #16]
}
   15e48:	e7e8      	b.n	15e1c <uuid_to_uuid128+0x30>
}
   15e4a:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
   15e4c:	2211      	movs	r2, #17
   15e4e:	4619      	mov	r1, r3
   15e50:	f013 b86a 	b.w	28f28 <memcpy>
   15e54:	0002e536 	.word	0x0002e536

00015e58 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   15e58:	b538      	push	{r3, r4, r5, lr}
   15e5a:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
   15e5c:	4805      	ldr	r0, [pc, #20]	; (15e74 <bt_buf_get_rx+0x1c>)
   15e5e:	f015 fa15 	bl	2b28c <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   15e62:	4604      	mov	r4, r0
   15e64:	b120      	cbz	r0, 15e70 <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
   15e66:	2100      	movs	r1, #0
   15e68:	300c      	adds	r0, #12
   15e6a:	f015 fa6b 	bl	2b344 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   15e6e:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   15e70:	4620      	mov	r0, r4
   15e72:	bd38      	pop	{r3, r4, r5, pc}
   15e74:	20000c00 	.word	0x20000c00

00015e78 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   15e78:	b570      	push	{r4, r5, r6, lr}
   15e7a:	4602      	mov	r2, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   15e7c:	480d      	ldr	r0, [pc, #52]	; (15eb4 <bt_buf_get_cmd_complete+0x3c>)
   15e7e:	f3bf 8f5b 	dmb	ish
   15e82:	460b      	mov	r3, r1
   15e84:	2100      	movs	r1, #0
   15e86:	e850 4f00 	ldrex	r4, [r0]
   15e8a:	e840 1500 	strex	r5, r1, [r0]
   15e8e:	2d00      	cmp	r5, #0
   15e90:	d1f9      	bne.n	15e86 <bt_buf_get_cmd_complete+0xe>
   15e92:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	buf = (struct net_buf *)atomic_ptr_clear((atomic_ptr_t *)&bt_dev.sent_cmd);
	if (buf) {
   15e96:	b924      	cbnz	r4, 15ea2 <bt_buf_get_cmd_complete+0x2a>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   15e98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   15e9c:	2001      	movs	r0, #1
   15e9e:	f7ff bfdb 	b.w	15e58 <bt_buf_get_rx>
   15ea2:	2301      	movs	r3, #1
   15ea4:	f104 000c 	add.w	r0, r4, #12
   15ea8:	7623      	strb	r3, [r4, #24]
		buf->len = 0U;
   15eaa:	8221      	strh	r1, [r4, #16]
   15eac:	f015 fa4a 	bl	2b344 <net_buf_simple_reserve>
}
   15eb0:	4620      	mov	r0, r4
   15eb2:	bd70      	pop	{r4, r5, r6, pc}
   15eb4:	200004d0 	.word	0x200004d0

00015eb8 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   15eb8:	b570      	push	{r4, r5, r6, lr}
   15eba:	4604      	mov	r4, r0
	switch (evt) {
   15ebc:	2c0f      	cmp	r4, #15
{
   15ebe:	460d      	mov	r5, r1
   15ec0:	4610      	mov	r0, r2
   15ec2:	4619      	mov	r1, r3
	switch (evt) {
   15ec4:	d805      	bhi.n	15ed2 <bt_buf_get_evt+0x1a>
   15ec6:	2c0d      	cmp	r4, #13
   15ec8:	d90d      	bls.n	15ee6 <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   15eca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   15ece:	f7ff bfd3 	b.w	15e78 <bt_buf_get_cmd_complete>
	switch (evt) {
   15ed2:	2c13      	cmp	r4, #19
   15ed4:	d107      	bne.n	15ee6 <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
   15ed6:	480c      	ldr	r0, [pc, #48]	; (15f08 <bt_buf_get_evt+0x50>)
   15ed8:	f015 f9d8 	bl	2b28c <net_buf_alloc_fixed>
			if (buf) {
   15edc:	4604      	mov	r4, r0
   15ede:	b938      	cbnz	r0, 15ef0 <bt_buf_get_evt+0x38>
{
   15ee0:	2400      	movs	r4, #0
}
   15ee2:	4620      	mov	r0, r4
   15ee4:	bd70      	pop	{r4, r5, r6, pc}
   15ee6:	4602      	mov	r2, r0
   15ee8:	460b      	mov	r3, r1
		if (discardable) {
   15eea:	b145      	cbz	r5, 15efe <bt_buf_get_evt+0x46>
   15eec:	4807      	ldr	r0, [pc, #28]	; (15f0c <bt_buf_get_evt+0x54>)
   15eee:	e7f3      	b.n	15ed8 <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
   15ef0:	2100      	movs	r1, #0
   15ef2:	300c      	adds	r0, #12
   15ef4:	f015 fa26 	bl	2b344 <net_buf_simple_reserve>
   15ef8:	2301      	movs	r3, #1
   15efa:	7623      	strb	r3, [r4, #24]
}
   15efc:	e7f1      	b.n	15ee2 <bt_buf_get_evt+0x2a>
}
   15efe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   15f02:	2001      	movs	r0, #1
   15f04:	f7ff bfa8 	b.w	15e58 <bt_buf_get_rx>
   15f08:	20000c2c 	.word	0x20000c2c
   15f0c:	20000b7c 	.word	0x20000b7c

00015f10 <ver_str>:
{
   15f10:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
   15f12:	4d0c      	ldr	r5, [pc, #48]	; (15f44 <ver_str+0x34>)
{
   15f14:	4606      	mov	r6, r0
	const char * const str[] = {
   15f16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   15f18:	b08e      	sub	sp, #56	; 0x38
	const char * const str[] = {
   15f1a:	466c      	mov	r4, sp
   15f1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   15f1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   15f20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   15f22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   15f24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   15f26:	e895 0003 	ldmia.w	r5, {r0, r1}
	if (ver < ARRAY_SIZE(str)) {
   15f2a:	2e0d      	cmp	r6, #13
	const char * const str[] = {
   15f2c:	e884 0003 	stmia.w	r4, {r0, r1}
		return str[ver];
   15f30:	bf9b      	ittet	ls
   15f32:	ab0e      	addls	r3, sp, #56	; 0x38
   15f34:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	return "unknown";
   15f38:	4803      	ldrhi	r0, [pc, #12]	; (15f48 <ver_str+0x38>)
		return str[ver];
   15f3a:	f856 0c38 	ldrls.w	r0, [r6, #-56]
}
   15f3e:	b00e      	add	sp, #56	; 0x38
   15f40:	bd70      	pop	{r4, r5, r6, pc}
   15f42:	bf00      	nop
   15f44:	0002cd04 	.word	0x0002cd04
   15f48:	0002e54f 	.word	0x0002e54f

00015f4c <unpair>:
{
   15f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15f4e:	4606      	mov	r6, r0
   15f50:	460f      	mov	r7, r1
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, addr);
   15f52:	f003 fb85 	bl	19660 <bt_conn_lookup_addr_le>
	if (conn) {
   15f56:	4604      	mov	r4, r0
   15f58:	b140      	cbz	r0, 15f6c <unpair+0x20>
		if (conn->type == BT_CONN_TYPE_LE) {
   15f5a:	7883      	ldrb	r3, [r0, #2]
   15f5c:	2b01      	cmp	r3, #1
   15f5e:	d024      	beq.n	15faa <unpair+0x5e>
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
   15f60:	2113      	movs	r1, #19
   15f62:	f013 fc97 	bl	29894 <bt_conn_disconnect>
		bt_conn_unref(conn);
   15f66:	4620      	mov	r0, r4
   15f68:	f013 fc4d 	bl	29806 <bt_conn_unref>
			keys = bt_keys_find_addr(id, addr);
   15f6c:	4639      	mov	r1, r7
   15f6e:	4630      	mov	r0, r6
   15f70:	f008 fae4 	bl	1e53c <bt_keys_find_addr>
		if (keys) {
   15f74:	4605      	mov	r5, r0
   15f76:	bb28      	cbnz	r0, 15fc4 <unpair+0x78>
	bt_gatt_clear(id, addr);
   15f78:	4639      	mov	r1, r7
   15f7a:	4630      	mov	r0, r6
   15f7c:	f006 fbf0 	bl	1c760 <bt_gatt_clear>
	return list->head;
   15f80:	4b14      	ldr	r3, [pc, #80]	; (15fd4 <unpair+0x88>)
   15f82:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   15f84:	b323      	cbz	r3, 15fd0 <unpair+0x84>
	return node->next;
   15f86:	681c      	ldr	r4, [r3, #0]
   15f88:	b104      	cbz	r4, 15f8c <unpair+0x40>
   15f8a:	3c0c      	subs	r4, #12
		if (listener->bond_deleted) {
   15f8c:	f853 3c04 	ldr.w	r3, [r3, #-4]
   15f90:	b113      	cbz	r3, 15f98 <unpair+0x4c>
			listener->bond_deleted(id, addr);
   15f92:	4639      	mov	r1, r7
   15f94:	4630      	mov	r0, r6
   15f96:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   15f98:	b1d4      	cbz	r4, 15fd0 <unpair+0x84>
   15f9a:	4623      	mov	r3, r4
   15f9c:	68e4      	ldr	r4, [r4, #12]
   15f9e:	689b      	ldr	r3, [r3, #8]
   15fa0:	b1a4      	cbz	r4, 15fcc <unpair+0x80>
   15fa2:	3c0c      	subs	r4, #12
		if (listener->bond_deleted) {
   15fa4:	2b00      	cmp	r3, #0
   15fa6:	d1f4      	bne.n	15f92 <unpair+0x46>
   15fa8:	e7f7      	b.n	15f9a <unpair+0x4e>
			conn->le.keys = NULL;
   15faa:	2300      	movs	r3, #0
			keys = conn->le.keys;
   15fac:	f8d0 50b8 	ldr.w	r5, [r0, #184]	; 0xb8
			conn->le.keys = NULL;
   15fb0:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
   15fb4:	2113      	movs	r1, #19
   15fb6:	f013 fc6d 	bl	29894 <bt_conn_disconnect>
		bt_conn_unref(conn);
   15fba:	4620      	mov	r0, r4
   15fbc:	f013 fc23 	bl	29806 <bt_conn_unref>
		if (!keys) {
   15fc0:	2d00      	cmp	r5, #0
   15fc2:	d0d3      	beq.n	15f6c <unpair+0x20>
			bt_keys_clear(keys);
   15fc4:	4628      	mov	r0, r5
   15fc6:	f008 fad7 	bl	1e578 <bt_keys_clear>
   15fca:	e7d5      	b.n	15f78 <unpair+0x2c>
		if (listener->bond_deleted) {
   15fcc:	2b00      	cmp	r3, #0
   15fce:	d1e0      	bne.n	15f92 <unpair+0x46>
}
   15fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15fd2:	bf00      	nop
   15fd4:	2000349c 	.word	0x2000349c

00015fd8 <hci_disconn_complete_prio>:
{
   15fd8:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   15fda:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15fdc:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   15fe0:	781b      	ldrb	r3, [r3, #0]
   15fe2:	b963      	cbnz	r3, 15ffe <hci_disconn_complete_prio+0x26>
	conn = bt_conn_lookup_handle(handle);
   15fe4:	4620      	mov	r0, r4
   15fe6:	f003 f919 	bl	1921c <bt_conn_lookup_handle>
	if (!conn) {
   15fea:	4605      	mov	r5, r0
   15fec:	b940      	cbnz	r0, 16000 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   15fee:	4b08      	ldr	r3, [pc, #32]	; (16010 <hci_disconn_complete_prio+0x38>)
   15ff0:	881a      	ldrh	r2, [r3, #0]
   15ff2:	b922      	cbnz	r2, 15ffe <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   15ff4:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   15ff8:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   15ffc:	8018      	strh	r0, [r3, #0]
}
   15ffe:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   16000:	2101      	movs	r1, #1
   16002:	f003 f913 	bl	1922c <bt_conn_set_state>
	bt_conn_unref(conn);
   16006:	4628      	mov	r0, r5
}
   16008:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1600c:	f013 bbfb 	b.w	29806 <bt_conn_unref>
   16010:	20004518 	.word	0x20004518

00016014 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   16014:	b510      	push	{r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   16016:	4c08      	ldr	r4, [pc, #32]	; (16038 <find_pending_connect.part.0+0x24>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   16018:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   1601a:	2205      	movs	r2, #5
   1601c:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
   16020:	f003 fb68 	bl	196f4 <bt_conn_lookup_state_le>
		if (!conn) {
   16024:	b938      	cbnz	r0, 16036 <find_pending_connect.part.0+0x22>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   16026:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
   1602a:	4904      	ldr	r1, [pc, #16]	; (1603c <find_pending_connect.part.0+0x28>)
}
   1602c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   16030:	2204      	movs	r2, #4
   16032:	f003 bb5f 	b.w	196f4 <bt_conn_lookup_state_le>
}
   16036:	bd10      	pop	{r4, pc}
   16038:	20000390 	.word	0x20000390
   1603c:	0002e388 	.word	0x0002e388

00016040 <hci_data_buf_overflow>:
{
   16040:	b580      	push	{r7, lr}
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   16042:	68c3      	ldr	r3, [r0, #12]
{
   16044:	af00      	add	r7, sp, #0
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   16046:	b088      	sub	sp, #32
   16048:	781b      	ldrb	r3, [r3, #0]
   1604a:	466a      	mov	r2, sp
   1604c:	4906      	ldr	r1, [pc, #24]	; (16068 <hci_data_buf_overflow+0x28>)
   1604e:	4807      	ldr	r0, [pc, #28]	; (1606c <hci_data_buf_overflow+0x2c>)
   16050:	e9c2 1305 	strd	r1, r3, [r2, #20]
   16054:	2303      	movs	r3, #3
   16056:	f842 3f10 	str.w	r3, [r2, #16]!
   1605a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1605e:	f013 f8a7 	bl	291b0 <z_log_msg_static_create.constprop.0>
}
   16062:	46bd      	mov	sp, r7
   16064:	bd80      	pop	{r7, pc}
   16066:	bf00      	nop
   16068:	0002e557 	.word	0x0002e557
   1606c:	0002cb24 	.word	0x0002cb24

00016070 <le_conn_param_neg_reply.part.0>:
static void le_conn_param_neg_reply(uint16_t handle, uint8_t reason)
   16070:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_ERR("Unable to allocate buffer");
   16072:	4b06      	ldr	r3, [pc, #24]	; (1608c <le_conn_param_neg_reply.part.0+0x1c>)
   16074:	9305      	str	r3, [sp, #20]
   16076:	4806      	ldr	r0, [pc, #24]	; (16090 <le_conn_param_neg_reply.part.0+0x20>)
   16078:	2302      	movs	r3, #2
   1607a:	aa04      	add	r2, sp, #16
   1607c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16080:	9304      	str	r3, [sp, #16]
   16082:	f013 f895 	bl	291b0 <z_log_msg_static_create.constprop.0>
}
   16086:	b007      	add	sp, #28
   16088:	f85d fb04 	ldr.w	pc, [sp], #4
   1608c:	0002e57f 	.word	0x0002e57f
   16090:	0002cb24 	.word	0x0002cb24

00016094 <rx_queue_put>:
{
   16094:	b598      	push	{r3, r4, r7, lr}
   16096:	4601      	mov	r1, r0
   16098:	af00      	add	r7, sp, #0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   1609a:	480d      	ldr	r0, [pc, #52]	; (160d0 <rx_queue_put+0x3c>)
   1609c:	f015 f8fd 	bl	2b29a <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   160a0:	490c      	ldr	r1, [pc, #48]	; (160d4 <rx_queue_put+0x40>)
   160a2:	480d      	ldr	r0, [pc, #52]	; (160d8 <rx_queue_put+0x44>)
   160a4:	f015 ffc0 	bl	2c028 <k_work_submit_to_queue>
	if (err < 0) {
   160a8:	2800      	cmp	r0, #0
   160aa:	da0e      	bge.n	160ca <rx_queue_put+0x36>
		LOG_ERR("Could not submit rx_work: %d", err);
   160ac:	466c      	mov	r4, sp
   160ae:	b088      	sub	sp, #32
   160b0:	466a      	mov	r2, sp
   160b2:	4b0a      	ldr	r3, [pc, #40]	; (160dc <rx_queue_put+0x48>)
   160b4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   160b8:	2303      	movs	r3, #3
   160ba:	f842 3f10 	str.w	r3, [r2, #16]!
   160be:	4808      	ldr	r0, [pc, #32]	; (160e0 <rx_queue_put+0x4c>)
   160c0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   160c4:	f013 f874 	bl	291b0 <z_log_msg_static_create.constprop.0>
   160c8:	46a5      	mov	sp, r4
}
   160ca:	46bd      	mov	sp, r7
   160cc:	bd98      	pop	{r3, r4, r7, pc}
   160ce:	bf00      	nop
   160d0:	200004d4 	.word	0x200004d4
   160d4:	20000664 	.word	0x20000664
   160d8:	20001f10 	.word	0x20001f10
   160dc:	0002e599 	.word	0x0002e599
   160e0:	0002cb24 	.word	0x0002cb24

000160e4 <handle_event.part.0>:
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   160e4:	b5b0      	push	{r4, r5, r7, lr}
   160e6:	460b      	mov	r3, r1
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   160e8:	8a0d      	ldrh	r5, [r1, #16]
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   160ea:	af00      	add	r7, sp, #0
   160ec:	4604      	mov	r4, r0
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   160ee:	4629      	mov	r1, r5
   160f0:	68d8      	ldr	r0, [r3, #12]
   160f2:	f7ff fc81 	bl	159f8 <bt_hex>
   160f6:	b08a      	sub	sp, #40	; 0x28
   160f8:	466a      	mov	r2, sp
   160fa:	4b09      	ldr	r3, [pc, #36]	; (16120 <handle_event.part.0+0x3c>)
   160fc:	e9c2 3405 	strd	r3, r4, [r2, #20]
   16100:	f240 4302 	movw	r3, #1026	; 0x402
   16104:	8493      	strh	r3, [r2, #36]	; 0x24
   16106:	4b07      	ldr	r3, [pc, #28]	; (16124 <handle_event.part.0+0x40>)
   16108:	e9c2 5007 	strd	r5, r0, [r2, #28]
   1610c:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
   16110:	f842 3f10 	str.w	r3, [r2, #16]!
   16114:	4804      	ldr	r0, [pc, #16]	; (16128 <handle_event.part.0+0x44>)
   16116:	f013 f84b 	bl	291b0 <z_log_msg_static_create.constprop.0>
}
   1611a:	46bd      	mov	sp, r7
   1611c:	bdb0      	pop	{r4, r5, r7, pc}
   1611e:	bf00      	nop
   16120:	0002e5b6 	.word	0x0002e5b6
   16124:	01000005 	.word	0x01000005
   16128:	0002cb24 	.word	0x0002cb24

0001612c <hci_hardware_error>:
{
   1612c:	b580      	push	{r7, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   1612e:	2101      	movs	r1, #1
   16130:	af00      	add	r7, sp, #0
   16132:	300c      	adds	r0, #12
   16134:	f015 f931 	bl	2b39a <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   16138:	b088      	sub	sp, #32
   1613a:	7803      	ldrb	r3, [r0, #0]
   1613c:	466a      	mov	r2, sp
   1613e:	4906      	ldr	r1, [pc, #24]	; (16158 <hci_hardware_error+0x2c>)
   16140:	4806      	ldr	r0, [pc, #24]	; (1615c <hci_hardware_error+0x30>)
   16142:	e9c2 1305 	strd	r1, r3, [r2, #20]
   16146:	2303      	movs	r3, #3
   16148:	f842 3f10 	str.w	r3, [r2, #16]!
   1614c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16150:	f013 f82e 	bl	291b0 <z_log_msg_static_create.constprop.0>
}
   16154:	46bd      	mov	sp, r7
   16156:	bd80      	pop	{r7, pc}
   16158:	0002e5d8 	.word	0x0002e5d8
   1615c:	0002cb24 	.word	0x0002cb24

00016160 <le_data_len_change>:
{
   16160:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16162:	68c3      	ldr	r3, [r0, #12]
   16164:	881c      	ldrh	r4, [r3, #0]
{
   16166:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   16168:	4620      	mov	r0, r4
   1616a:	f003 f857 	bl	1921c <bt_conn_lookup_handle>
	if (!conn) {
   1616e:	b980      	cbnz	r0, 16192 <le_data_len_change+0x32>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   16170:	466d      	mov	r5, sp
   16172:	b088      	sub	sp, #32
   16174:	466a      	mov	r2, sp
   16176:	4b08      	ldr	r3, [pc, #32]	; (16198 <le_data_len_change+0x38>)
   16178:	4808      	ldr	r0, [pc, #32]	; (1619c <le_data_len_change+0x3c>)
   1617a:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1617e:	2303      	movs	r3, #3
   16180:	f842 3f10 	str.w	r3, [r2, #16]!
   16184:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16188:	f013 f812 	bl	291b0 <z_log_msg_static_create.constprop.0>
   1618c:	46ad      	mov	sp, r5
}
   1618e:	46bd      	mov	sp, r7
   16190:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   16192:	f013 fb38 	bl	29806 <bt_conn_unref>
   16196:	e7fa      	b.n	1618e <le_data_len_change+0x2e>
   16198:	0002e5fa 	.word	0x0002e5fa
   1619c:	0002cb24 	.word	0x0002cb24

000161a0 <le_phy_update_complete>:
{
   161a0:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   161a2:	68c3      	ldr	r3, [r0, #12]
   161a4:	f8b3 4001 	ldrh.w	r4, [r3, #1]
{
   161a8:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   161aa:	4620      	mov	r0, r4
   161ac:	f003 f836 	bl	1921c <bt_conn_lookup_handle>
	if (!conn) {
   161b0:	b980      	cbnz	r0, 161d4 <le_phy_update_complete+0x34>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   161b2:	466d      	mov	r5, sp
   161b4:	b088      	sub	sp, #32
   161b6:	466a      	mov	r2, sp
   161b8:	4b08      	ldr	r3, [pc, #32]	; (161dc <le_phy_update_complete+0x3c>)
   161ba:	4809      	ldr	r0, [pc, #36]	; (161e0 <le_phy_update_complete+0x40>)
   161bc:	e9c2 3405 	strd	r3, r4, [r2, #20]
   161c0:	2303      	movs	r3, #3
   161c2:	f842 3f10 	str.w	r3, [r2, #16]!
   161c6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   161ca:	f012 fff1 	bl	291b0 <z_log_msg_static_create.constprop.0>
   161ce:	46ad      	mov	sp, r5
}
   161d0:	46bd      	mov	sp, r7
   161d2:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   161d4:	f013 fb17 	bl	29806 <bt_conn_unref>
   161d8:	e7fa      	b.n	161d0 <le_phy_update_complete+0x30>
   161da:	bf00      	nop
   161dc:	0002e5fa 	.word	0x0002e5fa
   161e0:	0002cb24 	.word	0x0002cb24

000161e4 <hci_disconn_complete>:
{
   161e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   161e8:	68c5      	ldr	r5, [r0, #12]
	if (evt->status) {
   161ea:	782e      	ldrb	r6, [r5, #0]
{
   161ec:	af00      	add	r7, sp, #0
	if (evt->status) {
   161ee:	b9ae      	cbnz	r6, 1621c <hci_disconn_complete+0x38>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   161f0:	f8b5 8001 	ldrh.w	r8, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   161f4:	4640      	mov	r0, r8
   161f6:	f003 f811 	bl	1921c <bt_conn_lookup_handle>
	if (!conn) {
   161fa:	4604      	mov	r4, r0
   161fc:	b988      	cbnz	r0, 16222 <hci_disconn_complete+0x3e>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   161fe:	466c      	mov	r4, sp
   16200:	b088      	sub	sp, #32
   16202:	466a      	mov	r2, sp
   16204:	4b0b      	ldr	r3, [pc, #44]	; (16234 <hci_disconn_complete+0x50>)
   16206:	480c      	ldr	r0, [pc, #48]	; (16238 <hci_disconn_complete+0x54>)
   16208:	e9c2 3805 	strd	r3, r8, [r2, #20]
   1620c:	2303      	movs	r3, #3
   1620e:	f842 3f10 	str.w	r3, [r2, #16]!
   16212:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16216:	f012 ffcb 	bl	291b0 <z_log_msg_static_create.constprop.0>
   1621a:	46a5      	mov	sp, r4
}
   1621c:	46bd      	mov	sp, r7
   1621e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = evt->reason;
   16222:	78eb      	ldrb	r3, [r5, #3]
   16224:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   16226:	4631      	mov	r1, r6
   16228:	f003 f800 	bl	1922c <bt_conn_set_state>
		bt_conn_unref(conn);
   1622c:	4620      	mov	r0, r4
	bt_conn_unref(conn);
   1622e:	f013 faea 	bl	29806 <bt_conn_unref>
   16232:	e7f3      	b.n	1621c <hci_disconn_complete+0x38>
   16234:	0002e61e 	.word	0x0002e61e
   16238:	0002cb24 	.word	0x0002cb24

0001623c <handle_event>:
{
   1623c:	b5b0      	push	{r4, r5, r7, lr}
   1623e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   16242:	af00      	add	r7, sp, #0
   16244:	4604      	mov	r4, r0
	for (i = 0; i < num_handlers; i++) {
   16246:	4293      	cmp	r3, r2
   16248:	d103      	bne.n	16252 <handle_event+0x16>
	if (err == -EOPNOTSUPP) {
   1624a:	4620      	mov	r0, r4
   1624c:	f7ff ff4a 	bl	160e4 <handle_event.part.0>
}
   16250:	e018      	b.n	16284 <handle_event+0x48>
		if (handler->event != event) {
   16252:	4610      	mov	r0, r2
   16254:	f810 5b08 	ldrb.w	r5, [r0], #8
   16258:	42a5      	cmp	r5, r4
   1625a:	d119      	bne.n	16290 <handle_event+0x54>
		if (buf->len < handler->min_len) {
   1625c:	8a0b      	ldrh	r3, [r1, #16]
   1625e:	7850      	ldrb	r0, [r2, #1]
   16260:	4298      	cmp	r0, r3
   16262:	d911      	bls.n	16288 <handle_event+0x4c>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   16264:	466d      	mov	r5, sp
   16266:	b088      	sub	sp, #32
   16268:	466a      	mov	r2, sp
   1626a:	490a      	ldr	r1, [pc, #40]	; (16294 <handle_event+0x58>)
   1626c:	61d4      	str	r4, [r2, #28]
   1626e:	e9c2 1305 	strd	r1, r3, [r2, #20]
   16272:	2304      	movs	r3, #4
   16274:	f842 3f10 	str.w	r3, [r2, #16]!
   16278:	4807      	ldr	r0, [pc, #28]	; (16298 <handle_event+0x5c>)
   1627a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1627e:	f012 ff97 	bl	291b0 <z_log_msg_static_create.constprop.0>
   16282:	46ad      	mov	sp, r5
}
   16284:	46bd      	mov	sp, r7
   16286:	bdb0      	pop	{r4, r5, r7, pc}
		handler->handler(buf);
   16288:	6853      	ldr	r3, [r2, #4]
   1628a:	4608      	mov	r0, r1
   1628c:	4798      	blx	r3
	if (err == -EOPNOTSUPP) {
   1628e:	e7f9      	b.n	16284 <handle_event+0x48>
   16290:	4602      	mov	r2, r0
   16292:	e7d8      	b.n	16246 <handle_event+0xa>
   16294:	0002e644 	.word	0x0002e644
   16298:	0002cb24 	.word	0x0002cb24

0001629c <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   1629c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   1629e:	4855      	ldr	r0, [pc, #340]	; (163f4 <rx_work_handler+0x158>)
{
   162a0:	af00      	add	r7, sp, #0
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   162a2:	f015 f810 	bl	2b2c6 <net_buf_slist_get>
	if (!buf) {
   162a6:	4604      	mov	r4, r0
   162a8:	2800      	cmp	r0, #0
   162aa:	d06a      	beq.n	16382 <rx_work_handler+0xe6>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   162ac:	7e03      	ldrb	r3, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   162ae:	2b01      	cmp	r3, #1
   162b0:	d069      	beq.n	16386 <rx_work_handler+0xea>
   162b2:	2b03      	cmp	r3, #3
   162b4:	f040 8099 	bne.w	163ea <rx_work_handler+0x14e>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   162b8:	8a03      	ldrh	r3, [r0, #16]
   162ba:	2b03      	cmp	r3, #3
   162bc:	d80c      	bhi.n	162d8 <rx_work_handler+0x3c>
   162be:	4a4e      	ldr	r2, [pc, #312]	; (163f8 <rx_work_handler+0x15c>)
   162c0:	494e      	ldr	r1, [pc, #312]	; (163fc <rx_work_handler+0x160>)
   162c2:	484f      	ldr	r0, [pc, #316]	; (16400 <rx_work_handler+0x164>)
   162c4:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
   162c8:	f011 fc95 	bl	27bf6 <assert_print>
   162cc:	4040      	eors	r0, r0
   162ce:	f380 8811 	msr	BASEPRI, r0
   162d2:	f04f 0003 	mov.w	r0, #3
   162d6:	df02      	svc	2
   162d8:	2104      	movs	r1, #4
   162da:	f104 000c 	add.w	r0, r4, #12
   162de:	f015 f85c 	bl	2b39a <net_buf_simple_pull_mem>
	if (buf->len != len) {
   162e2:	8a21      	ldrh	r1, [r4, #16]
	len = sys_le16_to_cpu(hdr->len);
   162e4:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   162e6:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   162e8:	22ff      	movs	r2, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
   162ea:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   162ee:	428b      	cmp	r3, r1
	acl(buf)->handle = bt_acl_handle(handle);
   162f0:	8360      	strh	r0, [r4, #26]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   162f2:	7662      	strb	r2, [r4, #25]
	if (buf->len != len) {
   162f4:	d010      	beq.n	16318 <rx_work_handler+0x7c>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   162f6:	466d      	mov	r5, sp
   162f8:	b088      	sub	sp, #32
   162fa:	466a      	mov	r2, sp
   162fc:	4841      	ldr	r0, [pc, #260]	; (16404 <rx_work_handler+0x168>)
   162fe:	61d3      	str	r3, [r2, #28]
   16300:	2304      	movs	r3, #4
   16302:	e9c2 0105 	strd	r0, r1, [r2, #20]
   16306:	f842 3f10 	str.w	r3, [r2, #16]!
   1630a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
#endif /* CONFIG_BT_ISO */
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   1630e:	483e      	ldr	r0, [pc, #248]	; (16408 <rx_work_handler+0x16c>)
   16310:	f012 ff4e 	bl	291b0 <z_log_msg_static_create.constprop.0>
   16314:	46ad      	mov	sp, r5
   16316:	e064      	b.n	163e2 <rx_work_handler+0x146>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   16318:	f002 ff80 	bl	1921c <bt_conn_lookup_handle>
	if (!conn) {
   1631c:	4605      	mov	r5, r0
   1631e:	b960      	cbnz	r0, 1633a <rx_work_handler+0x9e>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   16320:	466d      	mov	r5, sp
   16322:	b088      	sub	sp, #32
   16324:	8b63      	ldrh	r3, [r4, #26]
   16326:	466a      	mov	r2, sp
   16328:	4938      	ldr	r1, [pc, #224]	; (1640c <rx_work_handler+0x170>)
	switch (bt_buf_get_type(buf)) {
   1632a:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   1632e:	2303      	movs	r3, #3
   16330:	f842 3f10 	str.w	r3, [r2, #16]!
   16334:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16338:	e7e9      	b.n	1630e <rx_work_handler+0x72>
	acl(buf)->index = bt_conn_index(conn);
   1633a:	f003 f879 	bl	19430 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   1633e:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   16340:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
   16342:	4621      	mov	r1, r4
   16344:	4628      	mov	r0, r5
   16346:	f002 fe13 	bl	18f70 <bt_conn_recv>
	bt_conn_unref(conn);
   1634a:	4628      	mov	r0, r5
   1634c:	f013 fa5b 	bl	29806 <bt_conn_unref>
	return list->head;
   16350:	4b2f      	ldr	r3, [pc, #188]	; (16410 <rx_work_handler+0x174>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   16352:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   16356:	b1a3      	cbz	r3, 16382 <rx_work_handler+0xe6>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   16358:	492e      	ldr	r1, [pc, #184]	; (16414 <rx_work_handler+0x178>)
   1635a:	482f      	ldr	r0, [pc, #188]	; (16418 <rx_work_handler+0x17c>)
   1635c:	f015 fe64 	bl	2c028 <k_work_submit_to_queue>
#endif
		if (err < 0) {
   16360:	2800      	cmp	r0, #0
   16362:	da0e      	bge.n	16382 <rx_work_handler+0xe6>
			LOG_ERR("Could not submit rx_work: %d", err);
   16364:	466c      	mov	r4, sp
   16366:	b088      	sub	sp, #32
   16368:	466a      	mov	r2, sp
   1636a:	4b2c      	ldr	r3, [pc, #176]	; (1641c <rx_work_handler+0x180>)
   1636c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   16370:	2303      	movs	r3, #3
   16372:	f842 3f10 	str.w	r3, [r2, #16]!
   16376:	4824      	ldr	r0, [pc, #144]	; (16408 <rx_work_handler+0x16c>)
   16378:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1637c:	f012 ff18 	bl	291b0 <z_log_msg_static_create.constprop.0>
   16380:	46a5      	mov	sp, r4
		}
	}
}
   16382:	46bd      	mov	sp, r7
   16384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   16386:	8a03      	ldrh	r3, [r0, #16]
   16388:	2b01      	cmp	r3, #1
   1638a:	d80c      	bhi.n	163a6 <rx_work_handler+0x10a>
   1638c:	4a1a      	ldr	r2, [pc, #104]	; (163f8 <rx_work_handler+0x15c>)
   1638e:	491b      	ldr	r1, [pc, #108]	; (163fc <rx_work_handler+0x160>)
   16390:	481b      	ldr	r0, [pc, #108]	; (16400 <rx_work_handler+0x164>)
   16392:	f640 2347 	movw	r3, #2631	; 0xa47
   16396:	f011 fc2e 	bl	27bf6 <assert_print>
   1639a:	4040      	eors	r0, r0
   1639c:	f380 8811 	msr	BASEPRI, r0
   163a0:	f04f 0003 	mov.w	r0, #3
   163a4:	df02      	svc	2
   163a6:	2102      	movs	r1, #2
   163a8:	f104 000c 	add.w	r0, r4, #12
   163ac:	f014 fff5 	bl	2b39a <net_buf_simple_pull_mem>
   163b0:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   163b2:	7800      	ldrb	r0, [r0, #0]
   163b4:	f012 feb4 	bl	29120 <bt_hci_evt_get_flags>
   163b8:	0783      	lsls	r3, r0, #30
   163ba:	d40c      	bmi.n	163d6 <rx_work_handler+0x13a>
   163bc:	4a0e      	ldr	r2, [pc, #56]	; (163f8 <rx_work_handler+0x15c>)
   163be:	4918      	ldr	r1, [pc, #96]	; (16420 <rx_work_handler+0x184>)
   163c0:	480f      	ldr	r0, [pc, #60]	; (16400 <rx_work_handler+0x164>)
   163c2:	f640 234b 	movw	r3, #2635	; 0xa4b
   163c6:	f011 fc16 	bl	27bf6 <assert_print>
   163ca:	4040      	eors	r0, r0
   163cc:	f380 8811 	msr	BASEPRI, r0
   163d0:	f04f 0003 	mov.w	r0, #3
   163d4:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   163d6:	4a13      	ldr	r2, [pc, #76]	; (16424 <rx_work_handler+0x188>)
   163d8:	7828      	ldrb	r0, [r5, #0]
   163da:	2306      	movs	r3, #6
   163dc:	4621      	mov	r1, r4
   163de:	f7ff ff2d 	bl	1623c <handle_event>
		net_buf_unref(buf);
   163e2:	4620      	mov	r0, r4
   163e4:	f008 fb60 	bl	1eaa8 <net_buf_unref>
		break;
   163e8:	e7b2      	b.n	16350 <rx_work_handler+0xb4>
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   163ea:	466d      	mov	r5, sp
   163ec:	b088      	sub	sp, #32
   163ee:	466a      	mov	r2, sp
   163f0:	490d      	ldr	r1, [pc, #52]	; (16428 <rx_work_handler+0x18c>)
   163f2:	e79a      	b.n	1632a <rx_work_handler+0x8e>
   163f4:	200004d4 	.word	0x200004d4
   163f8:	0002e666 	.word	0x0002e666
   163fc:	0002e69a 	.word	0x0002e69a
   16400:	0002e6b3 	.word	0x0002e6b3
   16404:	0002e6d0 	.word	0x0002e6d0
   16408:	0002cb24 	.word	0x0002cb24
   1640c:	0002e6f4 	.word	0x0002e6f4
   16410:	20000390 	.word	0x20000390
   16414:	20000664 	.word	0x20000664
   16418:	20001f10 	.word	0x20001f10
   1641c:	0002e599 	.word	0x0002e599
   16420:	0002e716 	.word	0x0002e716
   16424:	0002d014 	.word	0x0002d014
   16428:	0002e744 	.word	0x0002e744

0001642c <hci_le_meta_event>:
{
   1642c:	b510      	push	{r4, lr}
   1642e:	2101      	movs	r1, #1
   16430:	4604      	mov	r4, r0
   16432:	300c      	adds	r0, #12
   16434:	f014 ffb1 	bl	2b39a <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   16438:	4621      	mov	r1, r4
   1643a:	4a03      	ldr	r2, [pc, #12]	; (16448 <hci_le_meta_event+0x1c>)
   1643c:	7800      	ldrb	r0, [r0, #0]
}
   1643e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   16442:	230a      	movs	r3, #10
   16444:	f7ff befa 	b.w	1623c <handle_event>
   16448:	0002d044 	.word	0x0002d044

0001644c <le_remote_feat_complete>:
{
   1644c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   1644e:	68c5      	ldr	r5, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16450:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
   16454:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   16456:	4630      	mov	r0, r6
   16458:	f002 fee0 	bl	1921c <bt_conn_lookup_handle>
	if (!conn) {
   1645c:	4604      	mov	r4, r0
   1645e:	b980      	cbnz	r0, 16482 <le_remote_feat_complete+0x36>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   16460:	466c      	mov	r4, sp
   16462:	b088      	sub	sp, #32
   16464:	466a      	mov	r2, sp
   16466:	4b0f      	ldr	r3, [pc, #60]	; (164a4 <le_remote_feat_complete+0x58>)
   16468:	480f      	ldr	r0, [pc, #60]	; (164a8 <le_remote_feat_complete+0x5c>)
   1646a:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1646e:	2303      	movs	r3, #3
   16470:	f842 3f10 	str.w	r3, [r2, #16]!
   16474:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16478:	f012 fe9a 	bl	291b0 <z_log_msg_static_create.constprop.0>
   1647c:	46a5      	mov	sp, r4
}
   1647e:	46bd      	mov	sp, r7
   16480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!evt->status) {
   16482:	782b      	ldrb	r3, [r5, #0]
   16484:	b923      	cbnz	r3, 16490 <le_remote_feat_complete+0x44>
		memcpy(conn->le.features, evt->features,
   16486:	2208      	movs	r2, #8
   16488:	1ce9      	adds	r1, r5, #3
   1648a:	30ad      	adds	r0, #173	; 0xad
   1648c:	f012 fd4c 	bl	28f28 <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16490:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   16494:	1d20      	adds	r0, r4, #4
   16496:	f012 fe77 	bl	29188 <atomic_or>
	bt_conn_unref(conn);
   1649a:	4620      	mov	r0, r4
   1649c:	f013 f9b3 	bl	29806 <bt_conn_unref>
   164a0:	e7ed      	b.n	1647e <le_remote_feat_complete+0x32>
   164a2:	bf00      	nop
   164a4:	0002e5fa 	.word	0x0002e5fa
   164a8:	0002cb24 	.word	0x0002cb24

000164ac <hci_cmd_done>:
{
   164ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   164b0:	4606      	mov	r6, r0
   164b2:	af00      	add	r7, sp, #0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   164b4:	7a90      	ldrb	r0, [r2, #10]
   164b6:	4d43      	ldr	r5, [pc, #268]	; (165c4 <hci_cmd_done+0x118>)
{
   164b8:	4688      	mov	r8, r1
   164ba:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   164bc:	f008 fa32 	bl	1e924 <net_buf_pool_get>
   164c0:	4285      	cmp	r5, r0
   164c2:	d018      	beq.n	164f6 <hci_cmd_done+0x4a>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   164c4:	7aa4      	ldrb	r4, [r4, #10]
   164c6:	4620      	mov	r0, r4
   164c8:	f008 fa2c 	bl	1e924 <net_buf_pool_get>
   164cc:	46e8      	mov	r8, sp
   164ce:	b08a      	sub	sp, #40	; 0x28
   164d0:	466a      	mov	r2, sp
   164d2:	4b3d      	ldr	r3, [pc, #244]	; (165c8 <hci_cmd_done+0x11c>)
   164d4:	6255      	str	r5, [r2, #36]	; 0x24
   164d6:	e9c2 3605 	strd	r3, r6, [r2, #20]
   164da:	2306      	movs	r3, #6
   164dc:	e9c2 4007 	strd	r4, r0, [r2, #28]
   164e0:	f44f 5142 	mov.w	r1, #12416	; 0x3080
   164e4:	f842 3f10 	str.w	r3, [r2, #16]!
   164e8:	4838      	ldr	r0, [pc, #224]	; (165cc <hci_cmd_done+0x120>)
   164ea:	f012 fe61 	bl	291b0 <z_log_msg_static_create.constprop.0>
   164ee:	46c5      	mov	sp, r8
}
   164f0:	46bd      	mov	sp, r7
   164f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   164f6:	4620      	mov	r0, r4
   164f8:	f008 fa1c 	bl	1e934 <net_buf_id>
   164fc:	4d34      	ldr	r5, [pc, #208]	; (165d0 <hci_cmd_done+0x124>)
   164fe:	f04f 090c 	mov.w	r9, #12
   16502:	fb09 5000 	mla	r0, r9, r0, r5
   16506:	8843      	ldrh	r3, [r0, #2]
   16508:	42b3      	cmp	r3, r6
   1650a:	d016      	beq.n	1653a <hci_cmd_done+0x8e>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   1650c:	4620      	mov	r0, r4
   1650e:	f008 fa11 	bl	1e934 <net_buf_id>
   16512:	fb09 5000 	mla	r0, r9, r0, r5
   16516:	466c      	mov	r4, sp
   16518:	b088      	sub	sp, #32
   1651a:	8843      	ldrh	r3, [r0, #2]
   1651c:	466a      	mov	r2, sp
   1651e:	492d      	ldr	r1, [pc, #180]	; (165d4 <hci_cmd_done+0x128>)
   16520:	61d3      	str	r3, [r2, #28]
   16522:	2304      	movs	r3, #4
   16524:	e9c2 1605 	strd	r1, r6, [r2, #20]
   16528:	4828      	ldr	r0, [pc, #160]	; (165cc <hci_cmd_done+0x120>)
   1652a:	f842 3f10 	str.w	r3, [r2, #16]!
   1652e:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   16532:	f012 fe3d 	bl	291b0 <z_log_msg_static_create.constprop.0>
   16536:	46a5      	mov	sp, r4
		return;
   16538:	e7da      	b.n	164f0 <hci_cmd_done+0x44>
	if (bt_dev.sent_cmd) {
   1653a:	4e27      	ldr	r6, [pc, #156]	; (165d8 <hci_cmd_done+0x12c>)
   1653c:	f8d6 0140 	ldr.w	r0, [r6, #320]	; 0x140
   16540:	b120      	cbz	r0, 1654c <hci_cmd_done+0xa0>
		net_buf_unref(bt_dev.sent_cmd);
   16542:	f008 fab1 	bl	1eaa8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   16546:	2300      	movs	r3, #0
   16548:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
	if (cmd(buf)->state && !status) {
   1654c:	4620      	mov	r0, r4
   1654e:	f008 f9f1 	bl	1e934 <net_buf_id>
   16552:	260c      	movs	r6, #12
   16554:	fb06 5000 	mla	r0, r6, r0, r5
   16558:	6843      	ldr	r3, [r0, #4]
   1655a:	b1ab      	cbz	r3, 16588 <hci_cmd_done+0xdc>
   1655c:	f1b8 0f00 	cmp.w	r8, #0
   16560:	d112      	bne.n	16588 <hci_cmd_done+0xdc>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   16562:	4620      	mov	r0, r4
   16564:	f008 f9e6 	bl	1e934 <net_buf_id>
   16568:	fb06 5000 	mla	r0, r6, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   1656c:	2101      	movs	r1, #1
   1656e:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   16570:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   16574:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   16576:	f003 061f 	and.w	r6, r3, #31
   1657a:	40b1      	lsls	r1, r6
	if (val) {
   1657c:	095b      	lsrs	r3, r3, #5
   1657e:	b1da      	cbz	r2, 165b8 <hci_cmd_done+0x10c>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16580:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   16584:	f012 fe00 	bl	29188 <atomic_or>
	if (cmd(buf)->sync) {
   16588:	4620      	mov	r0, r4
   1658a:	f008 f9d3 	bl	1e934 <net_buf_id>
   1658e:	260c      	movs	r6, #12
   16590:	fb06 5000 	mla	r0, r6, r0, r5
   16594:	6883      	ldr	r3, [r0, #8]
   16596:	2b00      	cmp	r3, #0
   16598:	d0aa      	beq.n	164f0 <hci_cmd_done+0x44>
		cmd(buf)->status = status;
   1659a:	4620      	mov	r0, r4
   1659c:	f008 f9ca 	bl	1e934 <net_buf_id>
   165a0:	4370      	muls	r0, r6
   165a2:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   165a6:	4620      	mov	r0, r4
   165a8:	f008 f9c4 	bl	1e934 <net_buf_id>
   165ac:	fb06 5500 	mla	r5, r6, r0, r5
   165b0:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
   165b2:	f00c feaf 	bl	23314 <z_impl_k_sem_give>
}
   165b6:	e79b      	b.n	164f0 <hci_cmd_done+0x44>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   165b8:	43c9      	mvns	r1, r1
   165ba:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   165be:	f012 fdfa 	bl	291b6 <atomic_and.isra.0>
   165c2:	e7e1      	b.n	16588 <hci_cmd_done+0xdc>
   165c4:	20000bd4 	.word	0x20000bd4
   165c8:	0002e758 	.word	0x0002e758
   165cc:	0002cb24 	.word	0x0002cb24
   165d0:	20003440 	.word	0x20003440
   165d4:	0002e78d 	.word	0x0002e78d
   165d8:	20000390 	.word	0x20000390

000165dc <hci_cmd_status>:
{
   165dc:	b538      	push	{r3, r4, r5, lr}
   165de:	2104      	movs	r1, #4
   165e0:	4604      	mov	r4, r0
   165e2:	300c      	adds	r0, #12
   165e4:	f014 fed9 	bl	2b39a <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   165e8:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   165ea:	7801      	ldrb	r1, [r0, #0]
   165ec:	8840      	ldrh	r0, [r0, #2]
   165ee:	4622      	mov	r2, r4
   165f0:	f7ff ff5c 	bl	164ac <hci_cmd_done>
	if (ncmd) {
   165f4:	b125      	cbz	r5, 16600 <hci_cmd_status+0x24>
	z_impl_k_sem_give(sem);
   165f6:	4803      	ldr	r0, [pc, #12]	; (16604 <hci_cmd_status+0x28>)
}
   165f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   165fc:	f00c be8a 	b.w	23314 <z_impl_k_sem_give>
   16600:	bd38      	pop	{r3, r4, r5, pc}
   16602:	bf00      	nop
   16604:	200004b8 	.word	0x200004b8

00016608 <hci_cmd_complete>:
{
   16608:	b538      	push	{r3, r4, r5, lr}
   1660a:	2103      	movs	r1, #3
   1660c:	4604      	mov	r4, r0
   1660e:	300c      	adds	r0, #12
   16610:	f014 fec3 	bl	2b39a <net_buf_simple_pull_mem>
	status = buf->data[0];
   16614:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
   16616:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   16618:	7819      	ldrb	r1, [r3, #0]
   1661a:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   1661e:	4622      	mov	r2, r4
   16620:	f7ff ff44 	bl	164ac <hci_cmd_done>
	if (ncmd) {
   16624:	b125      	cbz	r5, 16630 <hci_cmd_complete+0x28>
   16626:	4803      	ldr	r0, [pc, #12]	; (16634 <hci_cmd_complete+0x2c>)
}
   16628:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1662c:	f00c be72 	b.w	23314 <z_impl_k_sem_give>
   16630:	bd38      	pop	{r3, r4, r5, pc}
   16632:	bf00      	nop
   16634:	200004b8 	.word	0x200004b8

00016638 <hci_num_completed_packets>:
{
   16638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1663c:	b087      	sub	sp, #28
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   1663e:	f8d0 800c 	ldr.w	r8, [r0, #12]
	if (sizeof(*evt) + sizeof(evt->h[0]) * evt->num_handles > buf->len) {
   16642:	8a01      	ldrh	r1, [r0, #16]
   16644:	f898 4000 	ldrb.w	r4, [r8]
   16648:	2301      	movs	r3, #1
   1664a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   1664e:	428b      	cmp	r3, r1
{
   16650:	af00      	add	r7, sp, #0
	if (sizeof(*evt) + sizeof(evt->h[0]) * evt->num_handles > buf->len) {
   16652:	f240 808c 	bls.w	1676e <hci_num_completed_packets+0x136>
		LOG_ERR("evt num_handles (=%u) too large (%u > %u)",
   16656:	466d      	mov	r5, sp
   16658:	b08a      	sub	sp, #40	; 0x28
   1665a:	466a      	mov	r2, sp
   1665c:	4846      	ldr	r0, [pc, #280]	; (16778 <hci_num_completed_packets+0x140>)
   1665e:	e9c2 3107 	strd	r3, r1, [r2, #28]
   16662:	2305      	movs	r3, #5
   16664:	e9c2 0405 	strd	r0, r4, [r2, #20]
   16668:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   1666c:	f842 3f10 	str.w	r3, [r2, #16]!
   16670:	4842      	ldr	r0, [pc, #264]	; (1677c <hci_num_completed_packets+0x144>)
   16672:	f012 fd9d 	bl	291b0 <z_log_msg_static_create.constprop.0>
   16676:	46ad      	mov	sp, r5
}
   16678:	371c      	adds	r7, #28
   1667a:	46bd      	mov	sp, r7
   1667c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LOG_ERR("No connection for handle %u", handle);
   16680:	466c      	mov	r4, sp
   16682:	b088      	sub	sp, #32
   16684:	466a      	mov	r2, sp
   16686:	4b3e      	ldr	r3, [pc, #248]	; (16780 <hci_num_completed_packets+0x148>)
   16688:	483c      	ldr	r0, [pc, #240]	; (1677c <hci_num_completed_packets+0x144>)
   1668a:	e9c2 3b05 	strd	r3, fp, [r2, #20]
   1668e:	2303      	movs	r3, #3
   16690:	f842 3f10 	str.w	r3, [r2, #16]!
   16694:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16698:	f012 fd8a 	bl	291b0 <z_log_msg_static_create.constprop.0>
   1669c:	46a5      	mov	sp, r4
	for (i = 0; i < evt->num_handles; i++) {
   1669e:	3501      	adds	r5, #1
   166a0:	f898 3000 	ldrb.w	r3, [r8]
   166a4:	429d      	cmp	r5, r3
   166a6:	dae7      	bge.n	16678 <hci_num_completed_packets+0x40>
		handle = sys_le16_to_cpu(evt->h[i].handle);
   166a8:	eb08 0385 	add.w	r3, r8, r5, lsl #2
   166ac:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   166b0:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   166b4:	4658      	mov	r0, fp
   166b6:	f002 fdb1 	bl	1921c <bt_conn_lookup_handle>
		if (!conn) {
   166ba:	4604      	mov	r4, r0
   166bc:	2800      	cmp	r0, #0
   166be:	d0df      	beq.n	16680 <hci_num_completed_packets+0x48>
			k_work_submit(&conn->tx_complete_work);
   166c0:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
   166c4:	b346      	cbz	r6, 16718 <hci_num_completed_packets+0xe0>
	__asm__ volatile(
   166c6:	f04f 0340 	mov.w	r3, #64	; 0x40
   166ca:	f3ef 8211 	mrs	r2, BASEPRI
   166ce:	f383 8812 	msr	BASEPRI_MAX, r3
   166d2:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   166d6:	69e3      	ldr	r3, [r4, #28]
   166d8:	b16b      	cbz	r3, 166f6 <hci_num_completed_packets+0xbe>
				conn->pending_no_cb--;
   166da:	3b01      	subs	r3, #1
   166dc:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   166de:	f382 8811 	msr	BASEPRI, r2
   166e2:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   166e6:	4620      	mov	r0, r4
   166e8:	f002 fc04 	bl	18ef4 <bt_conn_get_pkts>
   166ec:	3e01      	subs	r6, #1
   166ee:	f00c fe11 	bl	23314 <z_impl_k_sem_give>
   166f2:	b2b6      	uxth	r6, r6
   166f4:	e7e6      	b.n	166c4 <hci_num_completed_packets+0x8c>
   166f6:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   166f8:	b993      	cbnz	r3, 16720 <hci_num_completed_packets+0xe8>
   166fa:	f382 8811 	msr	BASEPRI, r2
   166fe:	f3bf 8f6f 	isb	sy
				LOG_ERR("packets count mismatch");
   16702:	2302      	movs	r3, #2
   16704:	481d      	ldr	r0, [pc, #116]	; (1677c <hci_num_completed_packets+0x144>)
   16706:	f8c7 a014 	str.w	sl, [r7, #20]
   1670a:	f107 0210 	add.w	r2, r7, #16
   1670e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16712:	613b      	str	r3, [r7, #16]
   16714:	f012 fd4c 	bl	291b0 <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   16718:	4620      	mov	r0, r4
   1671a:	f013 f874 	bl	29806 <bt_conn_unref>
   1671e:	e7be      	b.n	1669e <hci_num_completed_packets+0x66>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16720:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   16722:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   16724:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16726:	428b      	cmp	r3, r1
	list->tail = node;
   16728:	bf08      	it	eq
   1672a:	61a0      	streq	r0, [r4, #24]
   1672c:	f382 8811 	msr	BASEPRI, r2
   16730:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   16734:	f04f 0240 	mov.w	r2, #64	; 0x40
   16738:	f3ef 8111 	mrs	r1, BASEPRI
   1673c:	f382 8812 	msr	BASEPRI_MAX, r2
   16740:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   16744:	68da      	ldr	r2, [r3, #12]
   16746:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   16748:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
   1674c:	f8c3 9000 	str.w	r9, [r3]
	return list->tail;
   16750:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   16752:	b94a      	cbnz	r2, 16768 <hci_num_completed_packets+0x130>
	list->head = node;
   16754:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   16758:	f381 8811 	msr	BASEPRI, r1
   1675c:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   16760:	4658      	mov	r0, fp
   16762:	f00c ff75 	bl	23650 <k_work_submit>
   16766:	e7be      	b.n	166e6 <hci_num_completed_packets+0xae>
	parent->next = child;
   16768:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1676a:	6263      	str	r3, [r4, #36]	; 0x24
}
   1676c:	e7f4      	b.n	16758 <hci_num_completed_packets+0x120>
	for (i = 0; i < evt->num_handles; i++) {
   1676e:	2500      	movs	r5, #0
				LOG_ERR("packets count mismatch");
   16770:	f8df a010 	ldr.w	sl, [pc, #16]	; 16784 <hci_num_completed_packets+0x14c>
			tx->pending_no_cb = 0U;
   16774:	46a9      	mov	r9, r5
   16776:	e793      	b.n	166a0 <hci_num_completed_packets+0x68>
   16778:	0002e7c0 	.word	0x0002e7c0
   1677c:	0002cb24 	.word	0x0002cb24
   16780:	0002e7ea 	.word	0x0002e7ea
   16784:	0002e806 	.word	0x0002e806

00016788 <le_conn_update_complete>:
{
   16788:	b5f0      	push	{r4, r5, r6, r7, lr}
   1678a:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   1678c:	68c5      	ldr	r5, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   1678e:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
   16792:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   16794:	4630      	mov	r0, r6
   16796:	f002 fd41 	bl	1921c <bt_conn_lookup_handle>
	if (!conn) {
   1679a:	4604      	mov	r4, r0
   1679c:	b988      	cbnz	r0, 167c2 <le_conn_update_complete+0x3a>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1679e:	466c      	mov	r4, sp
   167a0:	b088      	sub	sp, #32
   167a2:	466a      	mov	r2, sp
   167a4:	4b2c      	ldr	r3, [pc, #176]	; (16858 <le_conn_update_complete+0xd0>)
   167a6:	482d      	ldr	r0, [pc, #180]	; (1685c <le_conn_update_complete+0xd4>)
   167a8:	e9c2 3605 	strd	r3, r6, [r2, #20]
   167ac:	2303      	movs	r3, #3
   167ae:	f842 3f10 	str.w	r3, [r2, #16]!
   167b2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   167b6:	f012 fcfb 	bl	291b0 <z_log_msg_static_create.constprop.0>
   167ba:	46a5      	mov	sp, r4
}
   167bc:	370c      	adds	r7, #12
   167be:	46bd      	mov	sp, r7
   167c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   167c2:	782b      	ldrb	r3, [r5, #0]
   167c4:	2b1a      	cmp	r3, #26
	    !atomic_test_and_set_bit(conn->flags,
   167c6:	f100 0604 	add.w	r6, r0, #4
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   167ca:	d117      	bne.n	167fc <le_conn_update_complete+0x74>
   167cc:	78c3      	ldrb	r3, [r0, #3]
   167ce:	2b01      	cmp	r3, #1
   167d0:	d128      	bne.n	16824 <le_conn_update_complete+0x9c>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   167d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
   167d6:	4630      	mov	r0, r6
   167d8:	f012 fcd6 	bl	29188 <atomic_or>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   167dc:	0542      	lsls	r2, r0, #21
   167de:	d40d      	bmi.n	167fc <le_conn_update_complete+0x74>
		param.interval_min = conn->le.interval_min;
   167e0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   167e4:	603b      	str	r3, [r7, #0]
		bt_l2cap_update_conn_param(conn, &param);
   167e6:	4639      	mov	r1, r7
		param.latency = conn->le.pending_latency;
   167e8:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   167ec:	607b      	str	r3, [r7, #4]
		bt_l2cap_update_conn_param(conn, &param);
   167ee:	4620      	mov	r0, r4
   167f0:	f003 fa68 	bl	19cc4 <bt_l2cap_update_conn_param>
	bt_conn_unref(conn);
   167f4:	4620      	mov	r0, r4
   167f6:	f013 f806 	bl	29806 <bt_conn_unref>
   167fa:	e7df      	b.n	167bc <le_conn_update_complete+0x34>
		if (!evt->status) {
   167fc:	782b      	ldrb	r3, [r5, #0]
   167fe:	b98b      	cbnz	r3, 16824 <le_conn_update_complete+0x9c>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
   16800:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   16804:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
			conn->le.latency = sys_le16_to_cpu(evt->latency);
   16808:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   1680c:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   16810:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   16814:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16818:	f46f 7180 	mvn.w	r1, #256	; 0x100
   1681c:	4630      	mov	r0, r6
   1681e:	f012 fcca 	bl	291b6 <atomic_and.isra.0>
}
   16822:	e015      	b.n	16850 <le_conn_update_complete+0xc8>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   16824:	4630      	mov	r0, r6
   16826:	f012 fca6 	bl	29176 <atomic_get>
		} else if (atomic_test_bit(conn->flags,
   1682a:	05c3      	lsls	r3, r0, #23
   1682c:	d5f4      	bpl.n	16818 <le_conn_update_complete+0x90>
					   BT_CONN_PERIPHERAL_PARAM_AUTO_UPDATE) &&
   1682e:	782b      	ldrb	r3, [r5, #0]
   16830:	2b20      	cmp	r3, #32
   16832:	d1f1      	bne.n	16818 <le_conn_update_complete+0x90>
			   conn->le.conn_param_retry_countdown) {
   16834:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
			   evt->status == BT_HCI_ERR_UNSUPP_LL_PARAM_VAL &&
   16838:	2b00      	cmp	r3, #0
   1683a:	d0ed      	beq.n	16818 <le_conn_update_complete+0x90>
			conn->le.conn_param_retry_countdown--;
   1683c:	3b01      	subs	r3, #1
   1683e:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
			k_work_schedule(&conn->deferred_work,
   16842:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   16846:	2300      	movs	r3, #0
   16848:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1684c:	f00c ff68 	bl	23720 <k_work_schedule>
		notify_le_param_updated(conn);
   16850:	4620      	mov	r0, r4
   16852:	f002 fe0f 	bl	19474 <notify_le_param_updated>
   16856:	e7cd      	b.n	167f4 <le_conn_update_complete+0x6c>
   16858:	0002e5fa 	.word	0x0002e5fa
   1685c:	0002cb24 	.word	0x0002cb24

00016860 <bt_hci_cmd_state_set_init>:
{
   16860:	b510      	push	{r4, lr}
	state->bit = bit;
   16862:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   16866:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1686a:	720b      	strb	r3, [r1, #8]
{
   1686c:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   1686e:	f008 f861 	bl	1e934 <net_buf_id>
   16872:	4b03      	ldr	r3, [pc, #12]	; (16880 <bt_hci_cmd_state_set_init+0x20>)
   16874:	220c      	movs	r2, #12
   16876:	fb02 3300 	mla	r3, r2, r0, r3
   1687a:	605c      	str	r4, [r3, #4]
}
   1687c:	bd10      	pop	{r4, pc}
   1687e:	bf00      	nop
   16880:	20003440 	.word	0x20003440

00016884 <bt_hci_cmd_create>:
{
   16884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   16888:	f04f 32ff 	mov.w	r2, #4294967295
   1688c:	f04f 33ff 	mov.w	r3, #4294967295
   16890:	4606      	mov	r6, r0
   16892:	4817      	ldr	r0, [pc, #92]	; (168f0 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
   16894:	4d17      	ldr	r5, [pc, #92]	; (168f4 <bt_hci_cmd_create+0x70>)
{
   16896:	460f      	mov	r7, r1
   16898:	f014 fcf8 	bl	2b28c <net_buf_alloc_fixed>
   1689c:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   1689e:	f100 0a0c 	add.w	sl, r0, #12
   168a2:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   168a4:	f04f 0800 	mov.w	r8, #0
   168a8:	4650      	mov	r0, sl
   168aa:	f014 fd4b 	bl	2b344 <net_buf_simple_reserve>
   168ae:	f884 8018 	strb.w	r8, [r4, #24]
	cmd(buf)->opcode = opcode;
   168b2:	4620      	mov	r0, r4
   168b4:	f008 f83e 	bl	1e934 <net_buf_id>
   168b8:	f04f 090c 	mov.w	r9, #12
   168bc:	fb09 5000 	mla	r0, r9, r0, r5
   168c0:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   168c2:	4620      	mov	r0, r4
   168c4:	f008 f836 	bl	1e934 <net_buf_id>
   168c8:	fb09 5000 	mla	r0, r9, r0, r5
   168cc:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   168d0:	4620      	mov	r0, r4
   168d2:	f008 f82f 	bl	1e934 <net_buf_id>
   168d6:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   168da:	2103      	movs	r1, #3
   168dc:	4650      	mov	r0, sl
   168de:	f8c5 8004 	str.w	r8, [r5, #4]
   168e2:	f014 fd33 	bl	2b34c <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   168e6:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   168e8:	7087      	strb	r7, [r0, #2]
}
   168ea:	4620      	mov	r0, r4
   168ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   168f0:	20000bd4 	.word	0x20000bd4
   168f4:	20003440 	.word	0x20003440

000168f8 <bt_hci_cmd_send_sync>:
{
   168f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   168fc:	b087      	sub	sp, #28
   168fe:	4606      	mov	r6, r0
   16900:	af00      	add	r7, sp, #0
   16902:	4615      	mov	r5, r2
	if (!buf) {
   16904:	460c      	mov	r4, r1
   16906:	b921      	cbnz	r1, 16912 <bt_hci_cmd_send_sync+0x1a>
		buf = bt_hci_cmd_create(opcode, 0);
   16908:	f7ff ffbc 	bl	16884 <bt_hci_cmd_create>
		if (!buf) {
   1690c:	4604      	mov	r4, r0
   1690e:	2800      	cmp	r0, #0
   16910:	d05f      	beq.n	169d2 <bt_hci_cmd_send_sync+0xda>
	return z_impl_k_sem_init(sem, initial_count, limit);
   16912:	2201      	movs	r2, #1
   16914:	2100      	movs	r1, #0
   16916:	4638      	mov	r0, r7
   16918:	f015 fad6 	bl	2bec8 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   1691c:	4620      	mov	r0, r4
   1691e:	f008 f809 	bl	1e934 <net_buf_id>
   16922:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 169d8 <bt_hci_cmd_send_sync+0xe0>
   16926:	230c      	movs	r3, #12
   16928:	fb03 9000 	mla	r0, r3, r0, r9
   1692c:	6087      	str	r7, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   1692e:	4620      	mov	r0, r4
   16930:	f014 fce2 	bl	2b2f8 <net_buf_ref>
   16934:	4601      	mov	r1, r0
   16936:	4829      	ldr	r0, [pc, #164]	; (169dc <bt_hci_cmd_send_sync+0xe4>)
   16938:	f014 fcdc 	bl	2b2f4 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   1693c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   16940:	2300      	movs	r3, #0
   16942:	4638      	mov	r0, r7
   16944:	f00c fd0c 	bl	23360 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "command opcode 0x%04x timeout with err %d", opcode, err);
   16948:	4680      	mov	r8, r0
   1694a:	b188      	cbz	r0, 16970 <bt_hci_cmd_send_sync+0x78>
   1694c:	f44f 73a5 	mov.w	r3, #330	; 0x14a
   16950:	4a23      	ldr	r2, [pc, #140]	; (169e0 <bt_hci_cmd_send_sync+0xe8>)
   16952:	4924      	ldr	r1, [pc, #144]	; (169e4 <bt_hci_cmd_send_sync+0xec>)
   16954:	4824      	ldr	r0, [pc, #144]	; (169e8 <bt_hci_cmd_send_sync+0xf0>)
   16956:	f011 f94e 	bl	27bf6 <assert_print>
   1695a:	4824      	ldr	r0, [pc, #144]	; (169ec <bt_hci_cmd_send_sync+0xf4>)
   1695c:	4642      	mov	r2, r8
   1695e:	4631      	mov	r1, r6
   16960:	f011 f949 	bl	27bf6 <assert_print>
   16964:	4040      	eors	r0, r0
   16966:	f380 8811 	msr	BASEPRI, r0
   1696a:	f04f 0003 	mov.w	r0, #3
   1696e:	df02      	svc	2
	status = cmd(buf)->status;
   16970:	4620      	mov	r0, r4
   16972:	f007 ffdf 	bl	1e934 <net_buf_id>
   16976:	230c      	movs	r3, #12
   16978:	4358      	muls	r0, r3
   1697a:	f819 8000 	ldrb.w	r8, [r9, r0]
	if (status) {
   1697e:	f1b8 0f00 	cmp.w	r8, #0
   16982:	d01e      	beq.n	169c2 <bt_hci_cmd_send_sync+0xca>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   16984:	466d      	mov	r5, sp
   16986:	b088      	sub	sp, #32
   16988:	466a      	mov	r2, sp
   1698a:	4b19      	ldr	r3, [pc, #100]	; (169f0 <bt_hci_cmd_send_sync+0xf8>)
   1698c:	f8c2 801c 	str.w	r8, [r2, #28]
   16990:	e9c2 3605 	strd	r3, r6, [r2, #20]
   16994:	2304      	movs	r3, #4
   16996:	f842 3f10 	str.w	r3, [r2, #16]!
   1699a:	4816      	ldr	r0, [pc, #88]	; (169f4 <bt_hci_cmd_send_sync+0xfc>)
   1699c:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   169a0:	f012 fc06 	bl	291b0 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   169a4:	4620      	mov	r0, r4
   169a6:	46ad      	mov	sp, r5
   169a8:	f008 f87e 	bl	1eaa8 <net_buf_unref>
			return -ECONNREFUSED;
   169ac:	f1b8 0f09 	cmp.w	r8, #9
   169b0:	bf14      	ite	ne
   169b2:	f06f 0004 	mvnne.w	r0, #4
   169b6:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
   169ba:	371c      	adds	r7, #28
   169bc:	46bd      	mov	sp, r7
   169be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (rsp) {
   169c2:	b115      	cbz	r5, 169ca <bt_hci_cmd_send_sync+0xd2>
		*rsp = buf;
   169c4:	602c      	str	r4, [r5, #0]
	return 0;
   169c6:	2000      	movs	r0, #0
   169c8:	e7f7      	b.n	169ba <bt_hci_cmd_send_sync+0xc2>
		net_buf_unref(buf);
   169ca:	4620      	mov	r0, r4
   169cc:	f008 f86c 	bl	1eaa8 <net_buf_unref>
   169d0:	e7f9      	b.n	169c6 <bt_hci_cmd_send_sync+0xce>
			return -ENOBUFS;
   169d2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   169d6:	e7f0      	b.n	169ba <bt_hci_cmd_send_sync+0xc2>
   169d8:	20003440 	.word	0x20003440
   169dc:	200004dc 	.word	0x200004dc
   169e0:	0002e666 	.word	0x0002e666
   169e4:	0002e81d 	.word	0x0002e81d
   169e8:	0002e6b3 	.word	0x0002e6b3
   169ec:	0002e826 	.word	0x0002e826
   169f0:	0002e852 	.word	0x0002e852
   169f4:	0002cb24 	.word	0x0002cb24

000169f8 <hci_le_read_max_data_len>:
{
   169f8:	b570      	push	{r4, r5, r6, lr}
   169fa:	b088      	sub	sp, #32
   169fc:	4606      	mov	r6, r0
   169fe:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   16a00:	aa01      	add	r2, sp, #4
   16a02:	2100      	movs	r1, #0
   16a04:	f242 002f 	movw	r0, #8239	; 0x202f
   16a08:	f7ff ff76 	bl	168f8 <bt_hci_cmd_send_sync>
	if (err) {
   16a0c:	4604      	mov	r4, r0
   16a0e:	b160      	cbz	r0, 16a2a <hci_le_read_max_data_len+0x32>
		LOG_ERR("Failed to read DLE max data len");
   16a10:	4b0b      	ldr	r3, [pc, #44]	; (16a40 <hci_le_read_max_data_len+0x48>)
   16a12:	9307      	str	r3, [sp, #28]
   16a14:	480b      	ldr	r0, [pc, #44]	; (16a44 <hci_le_read_max_data_len+0x4c>)
   16a16:	2302      	movs	r3, #2
   16a18:	aa06      	add	r2, sp, #24
   16a1a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16a1e:	9306      	str	r3, [sp, #24]
   16a20:	f012 fbc6 	bl	291b0 <z_log_msg_static_create.constprop.0>
}
   16a24:	4620      	mov	r0, r4
   16a26:	b008      	add	sp, #32
   16a28:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   16a2a:	9801      	ldr	r0, [sp, #4]
   16a2c:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   16a2e:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   16a32:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   16a34:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   16a38:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   16a3a:	f008 f835 	bl	1eaa8 <net_buf_unref>
	return 0;
   16a3e:	e7f1      	b.n	16a24 <hci_le_read_max_data_len+0x2c>
   16a40:	0002e86e 	.word	0x0002e86e
   16a44:	0002cb24 	.word	0x0002cb24

00016a48 <bt_hci_le_rand>:
{
   16a48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   16a4a:	4b14      	ldr	r3, [pc, #80]	; (16a9c <bt_hci_le_rand+0x54>)
   16a4c:	f993 309b 	ldrsb.w	r3, [r3, #155]	; 0x9b
   16a50:	2b00      	cmp	r3, #0
{
   16a52:	4605      	mov	r5, r0
   16a54:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   16a56:	da1d      	bge.n	16a94 <bt_hci_le_rand+0x4c>
	while (len > 0) {
   16a58:	b914      	cbnz	r4, 16a60 <bt_hci_le_rand+0x18>
	return 0;
   16a5a:	4620      	mov	r0, r4
}
   16a5c:	b003      	add	sp, #12
   16a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   16a60:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   16a62:	aa01      	add	r2, sp, #4
   16a64:	f04f 0100 	mov.w	r1, #0
   16a68:	f242 0018 	movw	r0, #8216	; 0x2018
		count = MIN(len, sizeof(rp->rand));
   16a6c:	4626      	mov	r6, r4
   16a6e:	bf28      	it	cs
   16a70:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   16a72:	f7ff ff41 	bl	168f8 <bt_hci_cmd_send_sync>
		if (err) {
   16a76:	2800      	cmp	r0, #0
   16a78:	d1f0      	bne.n	16a5c <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   16a7a:	9f01      	ldr	r7, [sp, #4]
		memcpy(buffer, rp->rand, count);
   16a7c:	68f9      	ldr	r1, [r7, #12]
   16a7e:	4632      	mov	r2, r6
   16a80:	3101      	adds	r1, #1
   16a82:	4628      	mov	r0, r5
   16a84:	f012 fa50 	bl	28f28 <memcpy>
		net_buf_unref(rsp);
   16a88:	4638      	mov	r0, r7
   16a8a:	f008 f80d 	bl	1eaa8 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   16a8e:	4435      	add	r5, r6
		len -= count;
   16a90:	1ba4      	subs	r4, r4, r6
   16a92:	e7e1      	b.n	16a58 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   16a94:	f06f 0085 	mvn.w	r0, #133	; 0x85
   16a98:	e7e0      	b.n	16a5c <bt_hci_le_rand+0x14>
   16a9a:	bf00      	nop
   16a9c:	20000390 	.word	0x20000390

00016aa0 <bt_hci_le_enh_conn_complete>:
{
   16aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16aa4:	b08c      	sub	sp, #48	; 0x30
		if (disconnected_handles[i] == handle) {
   16aa6:	4bbc      	ldr	r3, [pc, #752]	; (16d98 <bt_hci_le_enh_conn_complete+0x2f8>)
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16aa8:	f8b0 8001 	ldrh.w	r8, [r0, #1]
		if (disconnected_handles[i] == handle) {
   16aac:	8819      	ldrh	r1, [r3, #0]
{
   16aae:	4605      	mov	r5, r0
		if (disconnected_handles[i] == handle) {
   16ab0:	f448 4270 	orr.w	r2, r8, #61440	; 0xf000
   16ab4:	4291      	cmp	r1, r2
   16ab6:	f04f 0600 	mov.w	r6, #0
{
   16aba:	af02      	add	r7, sp, #8
			disconnected_handles[i] = 0;
   16abc:	bf04      	itt	eq
   16abe:	801e      	strheq	r6, [r3, #0]
			return true;
   16ac0:	2601      	moveq	r6, #1
	bt_id_pending_keys_update();
   16ac2:	f001 f9bb 	bl	17e3c <bt_id_pending_keys_update>
	if (evt->status) {
   16ac6:	782c      	ldrb	r4, [r5, #0]
   16ac8:	b3a4      	cbz	r4, 16b34 <bt_hci_le_enh_conn_complete+0x94>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16aca:	2c3c      	cmp	r4, #60	; 0x3c
   16acc:	d122      	bne.n	16b14 <bt_hci_le_enh_conn_complete+0x74>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   16ace:	f001 fd17 	bl	18500 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16ad2:	f06f 0180 	mvn.w	r1, #128	; 0x80
   16ad6:	3010      	adds	r0, #16
   16ad8:	f012 fb6d 	bl	291b6 <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   16adc:	2000      	movs	r0, #0
   16ade:	f7ff fa99 	bl	16014 <find_pending_connect.part.0>
		if (!conn) {
   16ae2:	4605      	mov	r5, r0
   16ae4:	b970      	cbnz	r0, 16b04 <bt_hci_le_enh_conn_complete+0x64>
			LOG_ERR("No pending peripheral connection");
   16ae6:	4bad      	ldr	r3, [pc, #692]	; (16d9c <bt_hci_le_enh_conn_complete+0x2fc>)
   16ae8:	627b      	str	r3, [r7, #36]	; 0x24
   16aea:	2302      	movs	r3, #2
   16aec:	48ac      	ldr	r0, [pc, #688]	; (16da0 <bt_hci_le_enh_conn_complete+0x300>)
   16aee:	623b      	str	r3, [r7, #32]
   16af0:	f107 0220 	add.w	r2, r7, #32
   16af4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16af8:	f012 fb5a 	bl	291b0 <z_log_msg_static_create.constprop.0>
}
   16afc:	3728      	adds	r7, #40	; 0x28
   16afe:	46bd      	mov	sp, r7
   16b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   16b04:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   16b06:	2100      	movs	r1, #0
   16b08:	f002 fb90 	bl	1922c <bt_conn_set_state>
		bt_conn_unref(conn);
   16b0c:	4628      	mov	r0, r5
	bt_conn_unref(conn);
   16b0e:	f012 fe7a 	bl	29806 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   16b12:	e7f3      	b.n	16afc <bt_hci_le_enh_conn_complete+0x5c>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   16b14:	466d      	mov	r5, sp
   16b16:	b088      	sub	sp, #32
   16b18:	aa02      	add	r2, sp, #8
   16b1a:	4ba2      	ldr	r3, [pc, #648]	; (16da4 <bt_hci_le_enh_conn_complete+0x304>)
   16b1c:	48a0      	ldr	r0, [pc, #640]	; (16da0 <bt_hci_le_enh_conn_complete+0x300>)
   16b1e:	e9c2 3405 	strd	r3, r4, [r2, #20]
   16b22:	2303      	movs	r3, #3
   16b24:	f842 3f10 	str.w	r3, [r2, #16]!
   16b28:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   16b2c:	f012 fb40 	bl	291b0 <z_log_msg_static_create.constprop.0>
   16b30:	46ad      	mov	sp, r5
		return;
   16b32:	e7e3      	b.n	16afc <bt_hci_le_enh_conn_complete+0x5c>
	id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id : BT_ID_DEFAULT;
   16b34:	78eb      	ldrb	r3, [r5, #3]
   16b36:	2b01      	cmp	r3, #1
   16b38:	bf08      	it	eq
   16b3a:	4b9b      	ldreq	r3, [pc, #620]	; (16da8 <bt_hci_le_enh_conn_complete+0x308>)
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
   16b3c:	f105 0904 	add.w	r9, r5, #4
   16b40:	4648      	mov	r0, r9
	id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id : BT_ID_DEFAULT;
   16b42:	bf08      	it	eq
   16b44:	f893 406f 	ldrbeq.w	r4, [r3, #111]	; 0x6f
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
   16b48:	f012 fae6 	bl	29118 <bt_addr_le_is_resolved>
		bt_addr_le_copy_resolved(id_addr, &evt->peer_addr);
   16b4c:	4649      	mov	r1, r9
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
   16b4e:	b348      	cbz	r0, 16ba4 <bt_hci_le_enh_conn_complete+0x104>
		bt_addr_le_copy_resolved(id_addr, &evt->peer_addr);
   16b50:	f107 0010 	add.w	r0, r7, #16
   16b54:	f012 fad6 	bl	29104 <bt_addr_le_copy_resolved>
	memcpy(dst, src, sizeof(*dst));
   16b58:	2206      	movs	r2, #6
   16b5a:	f105 0111 	add.w	r1, r5, #17
   16b5e:	f107 0009 	add.w	r0, r7, #9
   16b62:	f012 f9e1 	bl	28f28 <memcpy>
		peer_addr->type = BT_ADDR_LE_RANDOM;
   16b66:	2301      	movs	r3, #1
   16b68:	723b      	strb	r3, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   16b6a:	78eb      	ldrb	r3, [r5, #3]
   16b6c:	2b01      	cmp	r3, #1
   16b6e:	d027      	beq.n	16bc0 <bt_hci_le_enh_conn_complete+0x120>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   16b70:	4648      	mov	r0, r9
   16b72:	f7fe ff63 	bl	15a3c <bt_addr_le_str>
   16b76:	466c      	mov	r4, sp
   16b78:	b088      	sub	sp, #32
   16b7a:	aa02      	add	r2, sp, #8
   16b7c:	4b8b      	ldr	r3, [pc, #556]	; (16dac <bt_hci_le_enh_conn_complete+0x30c>)
   16b7e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   16b82:	f44f 7300 	mov.w	r3, #512	; 0x200
   16b86:	8393      	strh	r3, [r2, #28]
   16b88:	4b89      	ldr	r3, [pc, #548]	; (16db0 <bt_hci_le_enh_conn_complete+0x310>)
   16b8a:	f842 3f10 	str.w	r3, [r2, #16]!
   16b8e:	4884      	ldr	r0, [pc, #528]	; (16da0 <bt_hci_le_enh_conn_complete+0x300>)
   16b90:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   16b94:	f012 fb0c 	bl	291b0 <z_log_msg_static_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   16b98:	211f      	movs	r1, #31
   16b9a:	46a5      	mov	sp, r4
   16b9c:	4640      	mov	r0, r8
   16b9e:	f012 fb26 	bl	291ee <bt_hci_disconnect>
		return;
   16ba2:	e7ab      	b.n	16afc <bt_hci_le_enh_conn_complete+0x5c>
		bt_addr_le_copy(id_addr, bt_lookup_id_addr(id, &evt->peer_addr));
   16ba4:	4620      	mov	r0, r4
   16ba6:	f012 fc9b 	bl	294e0 <bt_lookup_id_addr>
   16baa:	4601      	mov	r1, r0
   16bac:	f107 0010 	add.w	r0, r7, #16
   16bb0:	f012 fae7 	bl	29182 <bt_addr_le_copy>
		bt_addr_le_copy(peer_addr, &evt->peer_addr);
   16bb4:	4649      	mov	r1, r9
   16bb6:	f107 0008 	add.w	r0, r7, #8
   16bba:	f012 fae2 	bl	29182 <bt_addr_le_copy>
   16bbe:	e7d4      	b.n	16b6a <bt_hci_le_enh_conn_complete+0xca>
   16bc0:	f107 0010 	add.w	r0, r7, #16
   16bc4:	f7ff fa26 	bl	16014 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16bc8:	78eb      	ldrb	r3, [r5, #3]
   16bca:	2b01      	cmp	r3, #1
   16bcc:	4604      	mov	r4, r0
   16bce:	d10a      	bne.n	16be6 <bt_hci_le_enh_conn_complete+0x146>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   16bd0:	f001 fc96 	bl	18500 <bt_le_adv_lookup_legacy>
   16bd4:	f06f 0180 	mvn.w	r1, #128	; 0x80
   16bd8:	4682      	mov	sl, r0
   16bda:	3010      	adds	r0, #16
   16bdc:	f012 faeb 	bl	291b6 <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   16be0:	4650      	mov	r0, sl
   16be2:	f012 fd95 	bl	29710 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   16be6:	2c00      	cmp	r4, #0
   16be8:	d0c2      	beq.n	16b70 <bt_hci_le_enh_conn_complete+0xd0>
	conn->handle = sys_le16_to_cpu(evt->handle);
   16bea:	4620      	mov	r0, r4
   16bec:	f8b5 3001 	ldrh.w	r3, [r5, #1]
   16bf0:	f820 3b88 	strh.w	r3, [r0], #136
	bt_addr_le_copy(&conn->le.dst, id_addr);
   16bf4:	f107 0110 	add.w	r1, r7, #16
   16bf8:	f012 fac3 	bl	29182 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   16bfc:	f8b5 3017 	ldrh.w	r3, [r5, #23]
   16c00:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   16c04:	f8b5 3019 	ldrh.w	r3, [r5, #25]
   16c08:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   16c0c:	f8b5 301b 	ldrh.w	r3, [r5, #27]
   16c10:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   16c14:	f895 9003 	ldrb.w	r9, [r5, #3]
   16c18:	f884 9003 	strb.w	r9, [r4, #3]
	conn->err = 0U;
   16c1c:	2300      	movs	r3, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16c1e:	f1b9 0f01 	cmp.w	r9, #1
	conn->err = 0U;
   16c22:	7323      	strb	r3, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16c24:	d128      	bne.n	16c78 <bt_hci_le_enh_conn_complete+0x1d8>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   16c26:	f107 0108 	add.w	r1, r7, #8
   16c2a:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   16c2e:	f012 faa8 	bl	29182 <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   16c32:	f001 fc65 	bl	18500 <bt_le_adv_lookup_legacy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   16c36:	3010      	adds	r0, #16
   16c38:	f012 fa9d 	bl	29176 <atomic_get>
			if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   16c3c:	f410 5f00 	tst.w	r0, #8192	; 0x2000
   16c40:	f8df 8164 	ldr.w	r8, [pc, #356]	; 16da8 <bt_hci_le_enh_conn_complete+0x308>
   16c44:	f040 809b 	bne.w	16d7e <bt_hci_le_enh_conn_complete+0x2de>
				if (bt_addr_cmp(&evt->local_rpa,
   16c48:	350b      	adds	r5, #11
	return memcmp(a, b, sizeof(*a));
   16c4a:	2206      	movs	r2, #6
   16c4c:	4959      	ldr	r1, [pc, #356]	; (16db4 <bt_hci_le_enh_conn_complete+0x314>)
				conn->le.resp_addr.type = BT_ADDR_LE_RANDOM;
   16c4e:	f884 9096 	strb.w	r9, [r4, #150]	; 0x96
   16c52:	4628      	mov	r0, r5
   16c54:	f012 f941 	bl	28eda <memcmp>
   16c58:	4603      	mov	r3, r0
	memcpy(dst, src, sizeof(*dst));
   16c5a:	2206      	movs	r2, #6
					bt_addr_copy(&conn->le.resp_addr.a,
   16c5c:	f104 0097 	add.w	r0, r4, #151	; 0x97
				if (bt_addr_cmp(&evt->local_rpa,
   16c60:	2b00      	cmp	r3, #0
   16c62:	f000 8089 	beq.w	16d78 <bt_hci_le_enh_conn_complete+0x2d8>
   16c66:	4629      	mov	r1, r5
   16c68:	f012 f95e 	bl	28f28 <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   16c6c:	f8d8 30e4 	ldr.w	r3, [r8, #228]	; 0xe4
   16c70:	065d      	lsls	r5, r3, #25
   16c72:	d501      	bpl.n	16c78 <bt_hci_le_enh_conn_complete+0x1d8>
			bt_le_adv_resume();
   16c74:	f001 fe1a 	bl	188ac <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   16c78:	2107      	movs	r1, #7
   16c7a:	4620      	mov	r0, r4
   16c7c:	f002 fad6 	bl	1922c <bt_conn_set_state>
	if (is_disconnected) {
   16c80:	b11e      	cbz	r6, 16c8a <bt_hci_le_enh_conn_complete+0x1ea>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   16c82:	2101      	movs	r1, #1
   16c84:	4620      	mov	r0, r4
   16c86:	f002 fad1 	bl	1922c <bt_conn_set_state>
	bt_conn_connected(conn);
   16c8a:	4620      	mov	r0, r4
   16c8c:	f012 fdf9 	bl	29882 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   16c90:	7b63      	ldrb	r3, [r4, #13]
   16c92:	2b07      	cmp	r3, #7
   16c94:	d16e      	bne.n	16d74 <bt_hci_le_enh_conn_complete+0x2d4>
   16c96:	1d20      	adds	r0, r4, #4
   16c98:	f012 fa6d 	bl	29176 <atomic_get>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   16c9c:	f410 5f80 	tst.w	r0, #4096	; 0x1000
   16ca0:	4d41      	ldr	r5, [pc, #260]	; (16da8 <bt_hci_le_enh_conn_complete+0x308>)
   16ca2:	d129      	bne.n	16cf8 <bt_hci_le_enh_conn_complete+0x258>
   16ca4:	78e3      	ldrb	r3, [r4, #3]
   16ca6:	b11b      	cbz	r3, 16cb0 <bt_hci_le_enh_conn_complete+0x210>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   16ca8:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   16cac:	0718      	lsls	r0, r3, #28
   16cae:	d523      	bpl.n	16cf8 <bt_hci_le_enh_conn_complete+0x258>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   16cb0:	2102      	movs	r1, #2
   16cb2:	f242 0016 	movw	r0, #8214	; 0x2016
   16cb6:	f7ff fde5 	bl	16884 <bt_hci_cmd_create>
	if (!buf) {
   16cba:	4606      	mov	r6, r0
   16cbc:	2800      	cmp	r0, #0
   16cbe:	d067      	beq.n	16d90 <bt_hci_le_enh_conn_complete+0x2f0>
   16cc0:	2102      	movs	r1, #2
   16cc2:	300c      	adds	r0, #12
   16cc4:	f014 fb42 	bl	2b34c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   16cc8:	8823      	ldrh	r3, [r4, #0]
   16cca:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   16ccc:	2200      	movs	r2, #0
   16cce:	4631      	mov	r1, r6
   16cd0:	f242 0016 	movw	r0, #8214	; 0x2016
   16cd4:	f7ff fe10 	bl	168f8 <bt_hci_cmd_send_sync>
		if (err) {
   16cd8:	b170      	cbz	r0, 16cf8 <bt_hci_le_enh_conn_complete+0x258>
			LOG_ERR("Failed read remote features (%d)", err);
   16cda:	466e      	mov	r6, sp
   16cdc:	b088      	sub	sp, #32
   16cde:	aa02      	add	r2, sp, #8
   16ce0:	4b35      	ldr	r3, [pc, #212]	; (16db8 <bt_hci_le_enh_conn_complete+0x318>)
   16ce2:	e9c2 3005 	strd	r3, r0, [r2, #20]
   16ce6:	2303      	movs	r3, #3
   16ce8:	f842 3f10 	str.w	r3, [r2, #16]!
   16cec:	482c      	ldr	r0, [pc, #176]	; (16da0 <bt_hci_le_enh_conn_complete+0x300>)
   16cee:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16cf2:	f012 fa5d 	bl	291b0 <z_log_msg_static_create.constprop.0>
   16cf6:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   16cf8:	f895 30d9 	ldrb.w	r3, [r5, #217]	; 0xd9
   16cfc:	07d9      	lsls	r1, r3, #31
   16cfe:	d516      	bpl.n	16d2e <bt_hci_le_enh_conn_complete+0x28e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   16d00:	2100      	movs	r1, #0
   16d02:	2302      	movs	r3, #2
   16d04:	9100      	str	r1, [sp, #0]
   16d06:	461a      	mov	r2, r3
   16d08:	4620      	mov	r0, r4
   16d0a:	f012 faa9 	bl	29260 <bt_le_set_phy>
		if (err) {
   16d0e:	b170      	cbz	r0, 16d2e <bt_hci_le_enh_conn_complete+0x28e>
			LOG_ERR("Failed LE Set PHY (%d)", err);
   16d10:	466e      	mov	r6, sp
   16d12:	b088      	sub	sp, #32
   16d14:	aa02      	add	r2, sp, #8
   16d16:	4b29      	ldr	r3, [pc, #164]	; (16dbc <bt_hci_le_enh_conn_complete+0x31c>)
   16d18:	e9c2 3005 	strd	r3, r0, [r2, #20]
   16d1c:	2303      	movs	r3, #3
   16d1e:	f842 3f10 	str.w	r3, [r2, #16]!
   16d22:	481f      	ldr	r0, [pc, #124]	; (16da0 <bt_hci_le_enh_conn_complete+0x300>)
   16d24:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16d28:	f012 fa42 	bl	291b0 <z_log_msg_static_create.constprop.0>
   16d2c:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   16d2e:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   16d32:	069a      	lsls	r2, r3, #26
   16d34:	d51e      	bpl.n	16d74 <bt_hci_le_enh_conn_complete+0x2d4>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   16d36:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
   16d3a:	689b      	ldr	r3, [r3, #8]
   16d3c:	079b      	lsls	r3, r3, #30
   16d3e:	d519      	bpl.n	16d74 <bt_hci_le_enh_conn_complete+0x2d4>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   16d40:	1db9      	adds	r1, r7, #6
   16d42:	1d38      	adds	r0, r7, #4
   16d44:	f7ff fe58 	bl	169f8 <hci_le_read_max_data_len>
			if (!err) {
   16d48:	b9a0      	cbnz	r0, 16d74 <bt_hci_le_enh_conn_complete+0x2d4>
				err = bt_le_set_data_len(conn,
   16d4a:	88fa      	ldrh	r2, [r7, #6]
   16d4c:	88b9      	ldrh	r1, [r7, #4]
   16d4e:	4620      	mov	r0, r4
   16d50:	f012 fa68 	bl	29224 <bt_le_set_data_len>
				if (err) {
   16d54:	b170      	cbz	r0, 16d74 <bt_hci_le_enh_conn_complete+0x2d4>
					LOG_ERR("Failed to set data len (%d)", err);
   16d56:	466d      	mov	r5, sp
   16d58:	b088      	sub	sp, #32
   16d5a:	aa02      	add	r2, sp, #8
   16d5c:	4b18      	ldr	r3, [pc, #96]	; (16dc0 <bt_hci_le_enh_conn_complete+0x320>)
   16d5e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   16d62:	2303      	movs	r3, #3
   16d64:	f842 3f10 	str.w	r3, [r2, #16]!
   16d68:	480d      	ldr	r0, [pc, #52]	; (16da0 <bt_hci_le_enh_conn_complete+0x300>)
   16d6a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16d6e:	f012 fa1f 	bl	291b0 <z_log_msg_static_create.constprop.0>
   16d72:	46ad      	mov	sp, r5
	bt_conn_unref(conn);
   16d74:	4620      	mov	r0, r4
   16d76:	e6ca      	b.n	16b0e <bt_hci_le_enh_conn_complete+0x6e>
   16d78:	f108 0169 	add.w	r1, r8, #105	; 0x69
   16d7c:	e774      	b.n	16c68 <bt_hci_le_enh_conn_complete+0x1c8>
						&bt_dev.id_addr[conn->id]);
   16d7e:	7a21      	ldrb	r1, [r4, #8]
   16d80:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   16d84:	4441      	add	r1, r8
   16d86:	f104 0096 	add.w	r0, r4, #150	; 0x96
   16d8a:	f012 f9fa 	bl	29182 <bt_addr_le_copy>
   16d8e:	e76d      	b.n	16c6c <bt_hci_le_enh_conn_complete+0x1cc>
		return -ENOBUFS;
   16d90:	f06f 0068 	mvn.w	r0, #104	; 0x68
   16d94:	e7a1      	b.n	16cda <bt_hci_le_enh_conn_complete+0x23a>
   16d96:	bf00      	nop
   16d98:	20004518 	.word	0x20004518
   16d9c:	0002e88e 	.word	0x0002e88e
   16da0:	0002cb24 	.word	0x0002cb24
   16da4:	0002e8af 	.word	0x0002e8af
   16da8:	20000390 	.word	0x20000390
   16dac:	0002e8c8 	.word	0x0002e8c8
   16db0:	01000003 	.word	0x01000003
   16db4:	0002e39c 	.word	0x0002e39c
   16db8:	0002e8e4 	.word	0x0002e8e4
   16dbc:	0002e905 	.word	0x0002e905
   16dc0:	0002e91c 	.word	0x0002e91c

00016dc4 <le_legacy_conn_complete>:
{
   16dc4:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   16dc6:	68c1      	ldr	r1, [r0, #12]
{
   16dc8:	b089      	sub	sp, #36	; 0x24
	enh.status         = evt->status;
   16dca:	780b      	ldrb	r3, [r1, #0]
   16dcc:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   16dd0:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   16dd4:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   16dd8:	78cb      	ldrb	r3, [r1, #3]
   16dda:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   16dde:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   16de2:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   16de6:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   16dea:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   16dee:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   16df2:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   16df6:	7c4b      	ldrb	r3, [r1, #17]
   16df8:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   16dfc:	a801      	add	r0, sp, #4
   16dfe:	3104      	adds	r1, #4
   16e00:	f012 f9bf 	bl	29182 <bt_addr_le_copy>
   16e04:	4908      	ldr	r1, [pc, #32]	; (16e28 <le_legacy_conn_complete+0x64>)
   16e06:	2206      	movs	r2, #6
   16e08:	f10d 000b 	add.w	r0, sp, #11
   16e0c:	f012 f88c 	bl	28f28 <memcpy>
   16e10:	4906      	ldr	r1, [pc, #24]	; (16e2c <le_legacy_conn_complete+0x68>)
   16e12:	2206      	movs	r2, #6
   16e14:	f10d 0011 	add.w	r0, sp, #17
   16e18:	f012 f886 	bl	28f28 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   16e1c:	4668      	mov	r0, sp
   16e1e:	f7ff fe3f 	bl	16aa0 <bt_hci_le_enh_conn_complete>
}
   16e22:	b009      	add	sp, #36	; 0x24
   16e24:	f85d fb04 	ldr.w	pc, [sp], #4
   16e28:	200003f9 	.word	0x200003f9
   16e2c:	0002e39c 	.word	0x0002e39c

00016e30 <bt_unpair>:
{
   16e30:	b513      	push	{r0, r1, r4, lr}
   16e32:	460c      	mov	r4, r1
   16e34:	f88d 0007 	strb.w	r0, [sp, #7]
	if (id >= CONFIG_BT_ID_MAX) {
   16e38:	b9b8      	cbnz	r0, 16e6a <bt_unpair+0x3a>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   16e3a:	b949      	cbnz	r1, 16e50 <bt_unpair+0x20>
		bt_foreach_bond(id, unpair_remote, &id);
   16e3c:	490c      	ldr	r1, [pc, #48]	; (16e70 <bt_unpair+0x40>)
   16e3e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   16e42:	f10d 0207 	add.w	r2, sp, #7
   16e46:	f007 fac1 	bl	1e3cc <bt_foreach_bond>
		return 0;
   16e4a:	2000      	movs	r0, #0
}
   16e4c:	b002      	add	sp, #8
   16e4e:	bd10      	pop	{r4, pc}
	return memcmp(a, b, sizeof(*a));
   16e50:	4908      	ldr	r1, [pc, #32]	; (16e74 <bt_unpair+0x44>)
   16e52:	2207      	movs	r2, #7
   16e54:	4620      	mov	r0, r4
   16e56:	f012 f840 	bl	28eda <memcmp>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   16e5a:	2800      	cmp	r0, #0
   16e5c:	d0ee      	beq.n	16e3c <bt_unpair+0xc>
	unpair(id, addr);
   16e5e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   16e62:	4621      	mov	r1, r4
   16e64:	f7ff f872 	bl	15f4c <unpair>
	return 0;
   16e68:	e7ef      	b.n	16e4a <bt_unpair+0x1a>
		return -EINVAL;
   16e6a:	f06f 0015 	mvn.w	r0, #21
   16e6e:	e7ed      	b.n	16e4c <bt_unpair+0x1c>
   16e70:	000291a7 	.word	0x000291a7
   16e74:	0002e38f 	.word	0x0002e38f

00016e78 <bt_security_err_get>:
	switch (hci_err) {
   16e78:	2829      	cmp	r0, #41	; 0x29
   16e7a:	bf9a      	itte	ls
   16e7c:	4b01      	ldrls	r3, [pc, #4]	; (16e84 <bt_security_err_get+0xc>)
   16e7e:	5c18      	ldrbls	r0, [r3, r0]
{
   16e80:	2009      	movhi	r0, #9
}
   16e82:	4770      	bx	lr
   16e84:	0002ec60 	.word	0x0002ec60

00016e88 <hci_encrypt_key_refresh_complete>:
{
   16e88:	b5f0      	push	{r4, r5, r6, r7, lr}
   16e8a:	b087      	sub	sp, #28
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   16e8c:	68c3      	ldr	r3, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   16e8e:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
   16e92:	781d      	ldrb	r5, [r3, #0]
{
   16e94:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   16e96:	4630      	mov	r0, r6
   16e98:	f002 f9c0 	bl	1921c <bt_conn_lookup_handle>
	if (!conn) {
   16e9c:	4604      	mov	r4, r0
   16e9e:	b988      	cbnz	r0, 16ec4 <hci_encrypt_key_refresh_complete+0x3c>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   16ea0:	466c      	mov	r4, sp
   16ea2:	b088      	sub	sp, #32
   16ea4:	466a      	mov	r2, sp
   16ea6:	4b1f      	ldr	r3, [pc, #124]	; (16f24 <hci_encrypt_key_refresh_complete+0x9c>)
   16ea8:	481f      	ldr	r0, [pc, #124]	; (16f28 <hci_encrypt_key_refresh_complete+0xa0>)
   16eaa:	e9c2 3605 	strd	r3, r6, [r2, #20]
   16eae:	2303      	movs	r3, #3
   16eb0:	f842 3f10 	str.w	r3, [r2, #16]!
   16eb4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16eb8:	f012 f97a 	bl	291b0 <z_log_msg_static_create.constprop.0>
   16ebc:	46a5      	mov	sp, r4
}
   16ebe:	371c      	adds	r7, #28
   16ec0:	46bd      	mov	sp, r7
   16ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status) {
   16ec4:	b15d      	cbz	r5, 16ede <hci_encrypt_key_refresh_complete+0x56>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   16ec6:	4628      	mov	r0, r5
   16ec8:	f7ff ffd6 	bl	16e78 <bt_security_err_get>
   16ecc:	4629      	mov	r1, r5
   16ece:	4602      	mov	r2, r0
   16ed0:	4620      	mov	r0, r4
   16ed2:	f002 fb7b 	bl	195cc <bt_conn_security_changed>
	bt_conn_unref(conn);
   16ed6:	4620      	mov	r0, r4
   16ed8:	f012 fc95 	bl	29806 <bt_conn_unref>
   16edc:	e7ef      	b.n	16ebe <hci_encrypt_key_refresh_complete+0x36>
	if (conn->type == BT_CONN_TYPE_LE) {
   16ede:	7883      	ldrb	r3, [r0, #2]
   16ee0:	2b01      	cmp	r3, #1
   16ee2:	d1f0      	bne.n	16ec6 <hci_encrypt_key_refresh_complete+0x3e>
		bt_smp_update_keys(conn);
   16ee4:	f007 f97c 	bl	1e1e0 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   16ee8:	4620      	mov	r0, r4
   16eea:	f012 f92b 	bl	29144 <update_sec_level>
   16eee:	2800      	cmp	r0, #0
   16ef0:	d1e9      	bne.n	16ec6 <hci_encrypt_key_refresh_complete+0x3e>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   16ef2:	2005      	movs	r0, #5
   16ef4:	f7ff ffc0 	bl	16e78 <bt_security_err_get>
   16ef8:	2105      	movs	r1, #5
   16efa:	4602      	mov	r2, r0
   16efc:	4620      	mov	r0, r4
   16efe:	f002 fb65 	bl	195cc <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
   16f02:	4b0a      	ldr	r3, [pc, #40]	; (16f2c <hci_encrypt_key_refresh_complete+0xa4>)
   16f04:	617b      	str	r3, [r7, #20]
   16f06:	4808      	ldr	r0, [pc, #32]	; (16f28 <hci_encrypt_key_refresh_complete+0xa0>)
   16f08:	2302      	movs	r3, #2
   16f0a:	f107 0210 	add.w	r2, r7, #16
   16f0e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16f12:	613b      	str	r3, [r7, #16]
   16f14:	f012 f94c 	bl	291b0 <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
   16f18:	2105      	movs	r1, #5
   16f1a:	4620      	mov	r0, r4
   16f1c:	f012 fcba 	bl	29894 <bt_conn_disconnect>
   16f20:	e7d9      	b.n	16ed6 <hci_encrypt_key_refresh_complete+0x4e>
   16f22:	bf00      	nop
   16f24:	0002e61e 	.word	0x0002e61e
   16f28:	0002cb24 	.word	0x0002cb24
   16f2c:	0002e938 	.word	0x0002e938

00016f30 <hci_encrypt_change>:
{
   16f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16f34:	b086      	sub	sp, #24
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   16f36:	68c6      	ldr	r6, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16f38:	f8b6 8001 	ldrh.w	r8, [r6, #1]
	uint8_t status = evt->status;
   16f3c:	7835      	ldrb	r5, [r6, #0]
{
   16f3e:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   16f40:	4640      	mov	r0, r8
   16f42:	f002 f96b 	bl	1921c <bt_conn_lookup_handle>
	if (!conn) {
   16f46:	4604      	mov	r4, r0
   16f48:	b990      	cbnz	r0, 16f70 <hci_encrypt_change+0x40>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   16f4a:	466c      	mov	r4, sp
   16f4c:	b088      	sub	sp, #32
   16f4e:	466a      	mov	r2, sp
   16f50:	4b23      	ldr	r3, [pc, #140]	; (16fe0 <hci_encrypt_change+0xb0>)
   16f52:	4824      	ldr	r0, [pc, #144]	; (16fe4 <hci_encrypt_change+0xb4>)
   16f54:	e9c2 3805 	strd	r3, r8, [r2, #20]
   16f58:	2303      	movs	r3, #3
   16f5a:	f842 3f10 	str.w	r3, [r2, #16]!
   16f5e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16f62:	f012 f925 	bl	291b0 <z_log_msg_static_create.constprop.0>
   16f66:	46a5      	mov	sp, r4
}
   16f68:	3718      	adds	r7, #24
   16f6a:	46bd      	mov	sp, r7
   16f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (status) {
   16f70:	b15d      	cbz	r5, 16f8a <hci_encrypt_change+0x5a>
		bt_conn_security_changed(conn, status,
   16f72:	4628      	mov	r0, r5
   16f74:	f7ff ff80 	bl	16e78 <bt_security_err_get>
   16f78:	4629      	mov	r1, r5
   16f7a:	4602      	mov	r2, r0
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   16f7c:	4620      	mov	r0, r4
   16f7e:	f002 fb25 	bl	195cc <bt_conn_security_changed>
	bt_conn_unref(conn);
   16f82:	4620      	mov	r0, r4
   16f84:	f012 fc3f 	bl	29806 <bt_conn_unref>
   16f88:	e7ee      	b.n	16f68 <hci_encrypt_change+0x38>
	if (conn->type == BT_CONN_TYPE_LE) {
   16f8a:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   16f8c:	78f3      	ldrb	r3, [r6, #3]
   16f8e:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   16f90:	2a01      	cmp	r2, #1
   16f92:	d005      	beq.n	16fa0 <hci_encrypt_change+0x70>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   16f94:	2000      	movs	r0, #0
   16f96:	f7ff ff6f 	bl	16e78 <bt_security_err_get>
   16f9a:	2100      	movs	r1, #0
   16f9c:	4602      	mov	r2, r0
   16f9e:	e7ed      	b.n	16f7c <hci_encrypt_change+0x4c>
		if (conn->encrypt) {
   16fa0:	b10b      	cbz	r3, 16fa6 <hci_encrypt_change+0x76>
			bt_smp_update_keys(conn);
   16fa2:	f007 f91d 	bl	1e1e0 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   16fa6:	4620      	mov	r0, r4
   16fa8:	f012 f8cc 	bl	29144 <update_sec_level>
   16fac:	2800      	cmp	r0, #0
   16fae:	d1f1      	bne.n	16f94 <hci_encrypt_change+0x64>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   16fb0:	2005      	movs	r0, #5
   16fb2:	f7ff ff61 	bl	16e78 <bt_security_err_get>
   16fb6:	2105      	movs	r1, #5
   16fb8:	4602      	mov	r2, r0
   16fba:	4620      	mov	r0, r4
   16fbc:	f002 fb06 	bl	195cc <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
   16fc0:	4b09      	ldr	r3, [pc, #36]	; (16fe8 <hci_encrypt_change+0xb8>)
   16fc2:	617b      	str	r3, [r7, #20]
   16fc4:	4807      	ldr	r0, [pc, #28]	; (16fe4 <hci_encrypt_change+0xb4>)
   16fc6:	2302      	movs	r3, #2
   16fc8:	f107 0210 	add.w	r2, r7, #16
   16fcc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16fd0:	613b      	str	r3, [r7, #16]
   16fd2:	f012 f8ed 	bl	291b0 <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
   16fd6:	2105      	movs	r1, #5
   16fd8:	4620      	mov	r0, r4
   16fda:	f012 fc5b 	bl	29894 <bt_conn_disconnect>
   16fde:	e7d0      	b.n	16f82 <hci_encrypt_change+0x52>
   16fe0:	0002e61e 	.word	0x0002e61e
   16fe4:	0002cb24 	.word	0x0002cb24
   16fe8:	0002e938 	.word	0x0002e938

00016fec <bt_send>:
	return bt_dev.drv->send(buf);
   16fec:	4b02      	ldr	r3, [pc, #8]	; (16ff8 <bt_send+0xc>)
   16fee:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   16ff2:	695b      	ldr	r3, [r3, #20]
   16ff4:	4718      	bx	r3
   16ff6:	bf00      	nop
   16ff8:	20000390 	.word	0x20000390

00016ffc <bt_hci_cmd_send>:
{
   16ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16ffe:	4605      	mov	r5, r0
   17000:	af00      	add	r7, sp, #0
	if (!buf) {
   17002:	460c      	mov	r4, r1
   17004:	b919      	cbnz	r1, 1700e <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
   17006:	f7ff fc3d 	bl	16884 <bt_hci_cmd_create>
		if (!buf) {
   1700a:	4604      	mov	r4, r0
   1700c:	b318      	cbz	r0, 17056 <bt_hci_cmd_send+0x5a>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   1700e:	f640 4335 	movw	r3, #3125	; 0xc35
   17012:	429d      	cmp	r5, r3
   17014:	d119      	bne.n	1704a <bt_hci_cmd_send+0x4e>
		err = bt_send(buf);
   17016:	4620      	mov	r0, r4
   17018:	f7ff ffe8 	bl	16fec <bt_send>
		if (err) {
   1701c:	4605      	mov	r5, r0
   1701e:	b188      	cbz	r0, 17044 <bt_hci_cmd_send+0x48>
			LOG_ERR("Unable to send to driver (err %d)", err);
   17020:	466e      	mov	r6, sp
   17022:	b088      	sub	sp, #32
   17024:	466a      	mov	r2, sp
   17026:	4b0d      	ldr	r3, [pc, #52]	; (1705c <bt_hci_cmd_send+0x60>)
   17028:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1702c:	2303      	movs	r3, #3
   1702e:	480c      	ldr	r0, [pc, #48]	; (17060 <bt_hci_cmd_send+0x64>)
   17030:	f842 3f10 	str.w	r3, [r2, #16]!
   17034:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17038:	f012 f8ba 	bl	291b0 <z_log_msg_static_create.constprop.0>
			net_buf_unref(buf);
   1703c:	4620      	mov	r0, r4
   1703e:	46b5      	mov	sp, r6
   17040:	f007 fd32 	bl	1eaa8 <net_buf_unref>
}
   17044:	4628      	mov	r0, r5
   17046:	46bd      	mov	sp, r7
   17048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   1704a:	4806      	ldr	r0, [pc, #24]	; (17064 <bt_hci_cmd_send+0x68>)
   1704c:	4621      	mov	r1, r4
   1704e:	f014 f951 	bl	2b2f4 <net_buf_put>
	return 0;
   17052:	2500      	movs	r5, #0
   17054:	e7f6      	b.n	17044 <bt_hci_cmd_send+0x48>
			return -ENOBUFS;
   17056:	f06f 0568 	mvn.w	r5, #104	; 0x68
   1705a:	e7f3      	b.n	17044 <bt_hci_cmd_send+0x48>
   1705c:	0002e95e 	.word	0x0002e95e
   17060:	0002cb24 	.word	0x0002cb24
   17064:	200004dc 	.word	0x200004dc

00017068 <le_ltk_request>:
{
   17068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1706c:	b08c      	sub	sp, #48	; 0x30
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   1706e:	68c4      	ldr	r4, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   17070:	8826      	ldrh	r6, [r4, #0]
   17072:	fa1f f886 	uxth.w	r8, r6
{
   17076:	af02      	add	r7, sp, #8
	conn = bt_conn_lookup_handle(handle);
   17078:	4640      	mov	r0, r8
   1707a:	f002 f8cf 	bl	1921c <bt_conn_lookup_handle>
	if (!conn) {
   1707e:	4605      	mov	r5, r0
   17080:	b990      	cbnz	r0, 170a8 <le_ltk_request+0x40>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   17082:	466c      	mov	r4, sp
   17084:	b088      	sub	sp, #32
   17086:	aa02      	add	r2, sp, #8
   17088:	4b28      	ldr	r3, [pc, #160]	; (1712c <le_ltk_request+0xc4>)
   1708a:	4829      	ldr	r0, [pc, #164]	; (17130 <le_ltk_request+0xc8>)
   1708c:	e9c2 3805 	strd	r3, r8, [r2, #20]
   17090:	2303      	movs	r3, #3
   17092:	f842 3f10 	str.w	r3, [r2, #16]!
   17096:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1709a:	f012 f889 	bl	291b0 <z_log_msg_static_create.constprop.0>
   1709e:	46a5      	mov	sp, r4
}
   170a0:	3728      	adds	r7, #40	; 0x28
   170a2:	46bd      	mov	sp, r7
   170a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   170a8:	f8d4 2002 	ldr.w	r2, [r4, #2]
   170ac:	f8d4 3006 	ldr.w	r3, [r4, #6]
   170b0:	9701      	str	r7, [sp, #4]
   170b2:	8961      	ldrh	r1, [r4, #10]
   170b4:	9100      	str	r1, [sp, #0]
   170b6:	f013 fee7 	bl	2ae88 <bt_smp_request_ltk>
   170ba:	b328      	cbz	r0, 17108 <le_ltk_request+0xa0>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   170bc:	2112      	movs	r1, #18
   170be:	f242 001a 	movw	r0, #8218	; 0x201a
   170c2:	f7ff fbdf 	bl	16884 <bt_hci_cmd_create>
	if (!buf) {
   170c6:	4604      	mov	r4, r0
   170c8:	b970      	cbnz	r0, 170e8 <le_ltk_request+0x80>
		LOG_ERR("Out of command buffers");
   170ca:	4b1a      	ldr	r3, [pc, #104]	; (17134 <le_ltk_request+0xcc>)
   170cc:	627b      	str	r3, [r7, #36]	; 0x24
   170ce:	2302      	movs	r3, #2
   170d0:	4817      	ldr	r0, [pc, #92]	; (17130 <le_ltk_request+0xc8>)
   170d2:	623b      	str	r3, [r7, #32]
   170d4:	f107 0220 	add.w	r2, r7, #32
   170d8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   170dc:	f012 f868 	bl	291b0 <z_log_msg_static_create.constprop.0>
	bt_conn_unref(conn);
   170e0:	4628      	mov	r0, r5
   170e2:	f012 fb90 	bl	29806 <bt_conn_unref>
   170e6:	e7db      	b.n	170a0 <le_ltk_request+0x38>
   170e8:	2112      	movs	r1, #18
   170ea:	300c      	adds	r0, #12
   170ec:	f014 f92e 	bl	2b34c <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   170f0:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
   170f2:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   170f6:	2210      	movs	r2, #16
   170f8:	f011 ff16 	bl	28f28 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   170fc:	4621      	mov	r1, r4
   170fe:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   17102:	f7ff ff7b 	bl	16ffc <bt_hci_cmd_send>
   17106:	e7eb      	b.n	170e0 <le_ltk_request+0x78>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   17108:	2102      	movs	r1, #2
   1710a:	f242 001b 	movw	r0, #8219	; 0x201b
   1710e:	f7ff fbb9 	bl	16884 <bt_hci_cmd_create>
	if (!buf) {
   17112:	4604      	mov	r4, r0
   17114:	2800      	cmp	r0, #0
   17116:	d0d8      	beq.n	170ca <le_ltk_request+0x62>
   17118:	2102      	movs	r1, #2
   1711a:	300c      	adds	r0, #12
   1711c:	f014 f916 	bl	2b34c <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   17120:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   17122:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   17124:	f242 001b 	movw	r0, #8219	; 0x201b
   17128:	e7eb      	b.n	17102 <le_ltk_request+0x9a>
   1712a:	bf00      	nop
   1712c:	0002e5fa 	.word	0x0002e5fa
   17130:	0002cb24 	.word	0x0002cb24
   17134:	0002e980 	.word	0x0002e980

00017138 <le_conn_param_req>:
{
   17138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1713c:	b082      	sub	sp, #8
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   1713e:	68c3      	ldr	r3, [r0, #12]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   17140:	78d9      	ldrb	r1, [r3, #3]
   17142:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   17144:	f8b3 8000 	ldrh.w	r8, [r3]
{
   17148:	af00      	add	r7, sp, #0
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1714a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1714e:	803a      	strh	r2, [r7, #0]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   17150:	7959      	ldrb	r1, [r3, #5]
   17152:	791a      	ldrb	r2, [r3, #4]
   17154:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   17158:	807a      	strh	r2, [r7, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   1715a:	799a      	ldrb	r2, [r3, #6]
   1715c:	79d9      	ldrb	r1, [r3, #7]
   1715e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   17162:	80ba      	strh	r2, [r7, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   17164:	7a1a      	ldrb	r2, [r3, #8]
   17166:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   17168:	fa1f f488 	uxth.w	r4, r8
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1716c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   17170:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   17172:	80fb      	strh	r3, [r7, #6]
	conn = bt_conn_lookup_handle(handle);
   17174:	f002 f852 	bl	1921c <bt_conn_lookup_handle>
	if (!conn) {
   17178:	4606      	mov	r6, r0
   1717a:	b9b0      	cbnz	r0, 171aa <le_conn_param_req+0x72>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1717c:	466d      	mov	r5, sp
   1717e:	b088      	sub	sp, #32
   17180:	466a      	mov	r2, sp
   17182:	4b20      	ldr	r3, [pc, #128]	; (17204 <le_conn_param_req+0xcc>)
   17184:	4820      	ldr	r0, [pc, #128]	; (17208 <le_conn_param_req+0xd0>)
   17186:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1718a:	2303      	movs	r3, #3
   1718c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17190:	f842 3f10 	str.w	r3, [r2, #16]!
   17194:	f012 f80c 	bl	291b0 <z_log_msg_static_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   17198:	2102      	movs	r1, #2
   1719a:	46ad      	mov	sp, r5
   1719c:	4620      	mov	r0, r4
   1719e:	f012 f8ab 	bl	292f8 <le_conn_param_neg_reply>
}
   171a2:	3708      	adds	r7, #8
   171a4:	46bd      	mov	sp, r7
   171a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!le_param_req(conn, &param)) {
   171aa:	4639      	mov	r1, r7
   171ac:	f002 f9a6 	bl	194fc <le_param_req>
   171b0:	b938      	cbnz	r0, 171c2 <le_conn_param_req+0x8a>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   171b2:	211e      	movs	r1, #30
   171b4:	4620      	mov	r0, r4
   171b6:	f012 f89f 	bl	292f8 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   171ba:	4630      	mov	r0, r6
   171bc:	f012 fb23 	bl	29806 <bt_conn_unref>
   171c0:	e7ef      	b.n	171a2 <le_conn_param_req+0x6a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   171c2:	210e      	movs	r1, #14
   171c4:	f242 0020 	movw	r0, #8224	; 0x2020
   171c8:	f7ff fb5c 	bl	16884 <bt_hci_cmd_create>
	if (!buf) {
   171cc:	4605      	mov	r5, r0
   171ce:	2800      	cmp	r0, #0
   171d0:	d0f3      	beq.n	171ba <le_conn_param_req+0x82>
   171d2:	210e      	movs	r1, #14
   171d4:	300c      	adds	r0, #12
   171d6:	f014 f8b9 	bl	2b34c <net_buf_simple_add>
   171da:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   171dc:	220e      	movs	r2, #14
   171de:	2100      	movs	r1, #0
   171e0:	f011 fead 	bl	28f3e <memset>
	cp->handle = sys_cpu_to_le16(handle);
   171e4:	f8a4 8000 	strh.w	r8, [r4]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   171e8:	883b      	ldrh	r3, [r7, #0]
   171ea:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   171ec:	887b      	ldrh	r3, [r7, #2]
   171ee:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   171f0:	88bb      	ldrh	r3, [r7, #4]
   171f2:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   171f4:	88fb      	ldrh	r3, [r7, #6]
   171f6:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   171f8:	4629      	mov	r1, r5
   171fa:	f242 0020 	movw	r0, #8224	; 0x2020
   171fe:	f7ff fefd 	bl	16ffc <bt_hci_cmd_send>
   17202:	e7da      	b.n	171ba <le_conn_param_req+0x82>
   17204:	0002e5fa 	.word	0x0002e5fa
   17208:	0002cb24 	.word	0x0002cb24

0001720c <hci_tx_thread>:
{
   1720c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   17210:	f8df 8154 	ldr.w	r8, [pc, #340]	; 17368 <hci_tx_thread+0x15c>
		BT_ASSERT(err == 0);
   17214:	f8df 9154 	ldr.w	r9, [pc, #340]	; 1736c <hci_tx_thread+0x160>
{
   17218:	b087      	sub	sp, #28
   1721a:	af00      	add	r7, sp, #0
		events[0].state = K_POLL_STATE_NOT_READY;
   1721c:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   17220:	4853      	ldr	r0, [pc, #332]	; (17370 <hci_tx_thread+0x164>)
		events[0].state = K_POLL_STATE_NOT_READY;
   17222:	f36f 3394 	bfc	r3, #14, #7
   17226:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   1722a:	f001 ffad 	bl	19188 <bt_conn_prepare_events>
   1722e:	1c45      	adds	r5, r0, #1
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   17230:	484d      	ldr	r0, [pc, #308]	; (17368 <hci_tx_thread+0x15c>)
   17232:	f04f 32ff 	mov.w	r2, #4294967295
   17236:	f04f 33ff 	mov.w	r3, #4294967295
   1723a:	4629      	mov	r1, r5
   1723c:	f00d f81e 	bl	2427c <z_impl_k_poll>
		BT_ASSERT(err == 0);
   17240:	b160      	cbz	r0, 1725c <hci_tx_thread+0x50>
   17242:	494c      	ldr	r1, [pc, #304]	; (17374 <hci_tx_thread+0x168>)
   17244:	484c      	ldr	r0, [pc, #304]	; (17378 <hci_tx_thread+0x16c>)
   17246:	f640 23c8 	movw	r3, #2760	; 0xac8
   1724a:	464a      	mov	r2, r9
   1724c:	f010 fcd3 	bl	27bf6 <assert_print>
   17250:	4040      	eors	r0, r0
   17252:	f380 8811 	msr	BASEPRI, r0
   17256:	f04f 0003 	mov.w	r0, #3
   1725a:	df02      	svc	2
{
   1725c:	4e42      	ldr	r6, [pc, #264]	; (17368 <hci_tx_thread+0x15c>)
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   1725e:	f04f 0a03 	mov.w	sl, #3
	for (; count; ev++, count--) {
   17262:	b915      	cbnz	r5, 1726a <hci_tx_thread+0x5e>
	z_impl_k_yield();
   17264:	f00c fcd6 	bl	23c14 <z_impl_k_yield>
	while (1) {
   17268:	e7d8      	b.n	1721c <hci_tx_thread+0x10>
		switch (ev->state) {
   1726a:	68f3      	ldr	r3, [r6, #12]
   1726c:	f3c3 3386 	ubfx	r3, r3, #14, #7
   17270:	2b02      	cmp	r3, #2
   17272:	d960      	bls.n	17336 <hci_tx_thread+0x12a>
   17274:	2b04      	cmp	r3, #4
   17276:	d168      	bne.n	1734a <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
   17278:	7b33      	ldrb	r3, [r6, #12]
   1727a:	2b00      	cmp	r3, #0
   1727c:	d15e      	bne.n	1733c <hci_tx_thread+0x130>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   1727e:	483f      	ldr	r0, [pc, #252]	; (1737c <hci_tx_thread+0x170>)
   17280:	2200      	movs	r2, #0
   17282:	2300      	movs	r3, #0
   17284:	f014 f807 	bl	2b296 <net_buf_get>
	BT_ASSERT(buf);
   17288:	4604      	mov	r4, r0
   1728a:	b960      	cbnz	r0, 172a6 <hci_tx_thread+0x9a>
   1728c:	493c      	ldr	r1, [pc, #240]	; (17380 <hci_tx_thread+0x174>)
   1728e:	483a      	ldr	r0, [pc, #232]	; (17378 <hci_tx_thread+0x16c>)
   17290:	f640 235a 	movw	r3, #2650	; 0xa5a
   17294:	464a      	mov	r2, r9
   17296:	f010 fcae 	bl	27bf6 <assert_print>
   1729a:	4040      	eors	r0, r0
   1729c:	f380 8811 	msr	BASEPRI, r0
   172a0:	f04f 0003 	mov.w	r0, #3
   172a4:	df02      	svc	2
	if (bt_dev.sent_cmd) {
   172a6:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 17384 <hci_tx_thread+0x178>
	return z_impl_k_sem_take(sem, timeout);
   172aa:	4837      	ldr	r0, [pc, #220]	; (17388 <hci_tx_thread+0x17c>)
   172ac:	f04f 33ff 	mov.w	r3, #4294967295
   172b0:	f04f 32ff 	mov.w	r2, #4294967295
   172b4:	f00c f854 	bl	23360 <z_impl_k_sem_take>
   172b8:	f8db 3140 	ldr.w	r3, [fp, #320]	; 0x140
   172bc:	b18b      	cbz	r3, 172e2 <hci_tx_thread+0xd6>
		LOG_ERR("Uncleared pending sent_cmd");
   172be:	4b33      	ldr	r3, [pc, #204]	; (1738c <hci_tx_thread+0x180>)
   172c0:	4833      	ldr	r0, [pc, #204]	; (17390 <hci_tx_thread+0x184>)
   172c2:	617b      	str	r3, [r7, #20]
   172c4:	f107 0210 	add.w	r2, r7, #16
   172c8:	2302      	movs	r3, #2
   172ca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   172ce:	613b      	str	r3, [r7, #16]
   172d0:	f011 ff6e 	bl	291b0 <z_log_msg_static_create.constprop.0>
		net_buf_unref(bt_dev.sent_cmd);
   172d4:	f8db 0140 	ldr.w	r0, [fp, #320]	; 0x140
   172d8:	f007 fbe6 	bl	1eaa8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   172dc:	2300      	movs	r3, #0
   172de:	f8cb 3140 	str.w	r3, [fp, #320]	; 0x140
	bt_dev.sent_cmd = net_buf_ref(buf);
   172e2:	4620      	mov	r0, r4
   172e4:	f014 f808 	bl	2b2f8 <net_buf_ref>
   172e8:	f8cb 0140 	str.w	r0, [fp, #320]	; 0x140
	err = bt_send(buf);
   172ec:	4620      	mov	r0, r4
   172ee:	f7ff fe7d 	bl	16fec <bt_send>
	if (err) {
   172f2:	b300      	cbz	r0, 17336 <hci_tx_thread+0x12a>
		LOG_ERR("Unable to send to driver (err %d)", err);
   172f4:	46eb      	mov	fp, sp
   172f6:	b088      	sub	sp, #32
   172f8:	466a      	mov	r2, sp
   172fa:	4b26      	ldr	r3, [pc, #152]	; (17394 <hci_tx_thread+0x188>)
   172fc:	e9c2 3005 	strd	r3, r0, [r2, #20]
   17300:	2303      	movs	r3, #3
   17302:	f842 3f10 	str.w	r3, [r2, #16]!
   17306:	4822      	ldr	r0, [pc, #136]	; (17390 <hci_tx_thread+0x184>)
   17308:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1730c:	f011 ff50 	bl	291b0 <z_log_msg_static_create.constprop.0>
   17310:	46dd      	mov	sp, fp
	z_impl_k_sem_give(sem);
   17312:	481d      	ldr	r0, [pc, #116]	; (17388 <hci_tx_thread+0x17c>)
   17314:	f00b fffe 	bl	23314 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   17318:	4620      	mov	r0, r4
   1731a:	f007 fb0b 	bl	1e934 <net_buf_id>
   1731e:	4b1e      	ldr	r3, [pc, #120]	; (17398 <hci_tx_thread+0x18c>)
   17320:	220c      	movs	r2, #12
   17322:	fb02 3000 	mla	r0, r2, r0, r3
   17326:	211f      	movs	r1, #31
   17328:	8840      	ldrh	r0, [r0, #2]
   1732a:	4622      	mov	r2, r4
   1732c:	f7ff f8be 	bl	164ac <hci_cmd_done>
		net_buf_unref(buf);
   17330:	4620      	mov	r0, r4
   17332:	f007 fbb9 	bl	1eaa8 <net_buf_unref>
	for (; count; ev++, count--) {
   17336:	3614      	adds	r6, #20
   17338:	3d01      	subs	r5, #1
   1733a:	e792      	b.n	17262 <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   1733c:	2b01      	cmp	r3, #1
   1733e:	d1fa      	bne.n	17336 <hci_tx_thread+0x12a>
					conn = CONTAINER_OF(ev->fifo,
   17340:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   17342:	3838      	subs	r0, #56	; 0x38
   17344:	f002 fac2 	bl	198cc <bt_conn_process_tx>
   17348:	e7f5      	b.n	17336 <hci_tx_thread+0x12a>
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   1734a:	466c      	mov	r4, sp
   1734c:	b088      	sub	sp, #32
   1734e:	466a      	mov	r2, sp
   17350:	4912      	ldr	r1, [pc, #72]	; (1739c <hci_tx_thread+0x190>)
   17352:	480f      	ldr	r0, [pc, #60]	; (17390 <hci_tx_thread+0x184>)
		switch (ev->state) {
   17354:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   17358:	f842 af10 	str.w	sl, [r2, #16]!
   1735c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   17360:	f011 ff26 	bl	291b0 <z_log_msg_static_create.constprop.0>
   17364:	46a5      	mov	sp, r4
   17366:	e7e6      	b.n	17336 <hci_tx_thread+0x12a>
   17368:	20000628 	.word	0x20000628
   1736c:	0002e666 	.word	0x0002e666
   17370:	2000063c 	.word	0x2000063c
   17374:	0002e81d 	.word	0x0002e81d
   17378:	0002e6b3 	.word	0x0002e6b3
   1737c:	200004dc 	.word	0x200004dc
   17380:	0002fffe 	.word	0x0002fffe
   17384:	20000390 	.word	0x20000390
   17388:	200004b8 	.word	0x200004b8
   1738c:	0002e997 	.word	0x0002e997
   17390:	0002cb24 	.word	0x0002cb24
   17394:	0002e95e 	.word	0x0002e95e
   17398:	20003440 	.word	0x20003440
   1739c:	0002e9b2 	.word	0x0002e9b2

000173a0 <hci_event_prio>:
{
   173a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   173a4:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   173a6:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   173aa:	4630      	mov	r0, r6
   173ac:	f014 f805 	bl	2b3ba <net_buf_simple_headroom>
	state->len = buf->len;
   173b0:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   173b4:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   173b8:	4605      	mov	r5, r0
   173ba:	d80c      	bhi.n	173d6 <hci_event_prio+0x36>
   173bc:	4a1c      	ldr	r2, [pc, #112]	; (17430 <hci_event_prio+0x90>)
   173be:	491d      	ldr	r1, [pc, #116]	; (17434 <hci_event_prio+0x94>)
   173c0:	481d      	ldr	r0, [pc, #116]	; (17438 <hci_event_prio+0x98>)
   173c2:	f640 636f 	movw	r3, #3695	; 0xe6f
   173c6:	f010 fc16 	bl	27bf6 <assert_print>
   173ca:	4040      	eors	r0, r0
   173cc:	f380 8811 	msr	BASEPRI, r0
   173d0:	f04f 0003 	mov.w	r0, #3
   173d4:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   173d6:	4630      	mov	r0, r6
   173d8:	2102      	movs	r1, #2
   173da:	f013 ffde 	bl	2b39a <net_buf_simple_pull_mem>
   173de:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   173e0:	7800      	ldrb	r0, [r0, #0]
   173e2:	f011 fe9d 	bl	29120 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   173e6:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   173e8:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   173ea:	d40c      	bmi.n	17406 <hci_event_prio+0x66>
   173ec:	4a10      	ldr	r2, [pc, #64]	; (17430 <hci_event_prio+0x90>)
   173ee:	4913      	ldr	r1, [pc, #76]	; (1743c <hci_event_prio+0x9c>)
   173f0:	4811      	ldr	r0, [pc, #68]	; (17438 <hci_event_prio+0x98>)
   173f2:	f640 6373 	movw	r3, #3699	; 0xe73
   173f6:	f010 fbfe 	bl	27bf6 <assert_print>
   173fa:	4040      	eors	r0, r0
   173fc:	f380 8811 	msr	BASEPRI, r0
   17400:	f04f 0003 	mov.w	r0, #3
   17404:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   17406:	2305      	movs	r3, #5
   17408:	4a0d      	ldr	r2, [pc, #52]	; (17440 <hci_event_prio+0xa0>)
   1740a:	7838      	ldrb	r0, [r7, #0]
   1740c:	4621      	mov	r1, r4
   1740e:	f7fe ff15 	bl	1623c <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   17412:	07b3      	lsls	r3, r6, #30
   17414:	d507      	bpl.n	17426 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   17416:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   17418:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   1741c:	fa13 f585 	uxtah	r5, r3, r5
   17420:	60e5      	str	r5, [r4, #12]
}
   17422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   17426:	4620      	mov	r0, r4
}
   17428:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   1742c:	f007 bb3c 	b.w	1eaa8 <net_buf_unref>
   17430:	0002e666 	.word	0x0002e666
   17434:	0002e69a 	.word	0x0002e69a
   17438:	0002e6b3 	.word	0x0002e6b3
   1743c:	0002e9d3 	.word	0x0002e9d3
   17440:	0002cfec 	.word	0x0002cfec

00017444 <bt_recv>:
{
   17444:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   17446:	7e03      	ldrb	r3, [r0, #24]
	switch (bt_buf_get_type(buf)) {
   17448:	2b01      	cmp	r3, #1
{
   1744a:	af00      	add	r7, sp, #0
   1744c:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
   1744e:	d006      	beq.n	1745e <bt_recv+0x1a>
   17450:	2b03      	cmp	r3, #3
   17452:	d112      	bne.n	1747a <bt_recv+0x36>
			rx_queue_put(buf);
   17454:	f7fe fe1e 	bl	16094 <rx_queue_put>
		return 0;
   17458:	2000      	movs	r0, #0
}
   1745a:	46bd      	mov	sp, r7
   1745c:	bdb0      	pop	{r4, r5, r7, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1745e:	68c3      	ldr	r3, [r0, #12]
   17460:	7818      	ldrb	r0, [r3, #0]
   17462:	f011 fe5d 	bl	29120 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   17466:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   17468:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1746a:	d502      	bpl.n	17472 <bt_recv+0x2e>
			hci_event_prio(buf);
   1746c:	4620      	mov	r0, r4
   1746e:	f7ff ff97 	bl	173a0 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   17472:	07ab      	lsls	r3, r5, #30
   17474:	d5f0      	bpl.n	17458 <bt_recv+0x14>
			rx_queue_put(buf);
   17476:	4620      	mov	r0, r4
   17478:	e7ec      	b.n	17454 <bt_recv+0x10>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   1747a:	466d      	mov	r5, sp
   1747c:	b088      	sub	sp, #32
   1747e:	466a      	mov	r2, sp
   17480:	4908      	ldr	r1, [pc, #32]	; (174a4 <bt_recv+0x60>)
   17482:	4809      	ldr	r0, [pc, #36]	; (174a8 <bt_recv+0x64>)
	switch (bt_buf_get_type(buf)) {
   17484:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   17488:	2303      	movs	r3, #3
   1748a:	f842 3f10 	str.w	r3, [r2, #16]!
   1748e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17492:	f011 fe8d 	bl	291b0 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   17496:	4620      	mov	r0, r4
   17498:	46ad      	mov	sp, r5
   1749a:	f007 fb05 	bl	1eaa8 <net_buf_unref>
		return -EINVAL;
   1749e:	f06f 0015 	mvn.w	r0, #21
   174a2:	e7da      	b.n	1745a <bt_recv+0x16>
   174a4:	0002e9ec 	.word	0x0002e9ec
   174a8:	0002cb24 	.word	0x0002cb24

000174ac <bt_hci_driver_register>:
	if (bt_dev.drv) {
   174ac:	4a08      	ldr	r2, [pc, #32]	; (174d0 <bt_hci_driver_register+0x24>)
{
   174ae:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   174b0:	f8d2 0164 	ldr.w	r0, [r2, #356]	; 0x164
   174b4:	b930      	cbnz	r0, 174c4 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   174b6:	68d9      	ldr	r1, [r3, #12]
   174b8:	b139      	cbz	r1, 174ca <bt_hci_driver_register+0x1e>
   174ba:	6959      	ldr	r1, [r3, #20]
   174bc:	b129      	cbz	r1, 174ca <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   174be:	f8c2 3164 	str.w	r3, [r2, #356]	; 0x164
	return 0;
   174c2:	4770      	bx	lr
		return -EALREADY;
   174c4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   174c8:	4770      	bx	lr
		return -EINVAL;
   174ca:	f06f 0015 	mvn.w	r0, #21
}
   174ce:	4770      	bx	lr
   174d0:	20000390 	.word	0x20000390

000174d4 <bt_finalize_init>:
{
   174d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   174d8:	4c45      	ldr	r4, [pc, #276]	; (175f0 <bt_finalize_init+0x11c>)
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   174da:	4846      	ldr	r0, [pc, #280]	; (175f4 <bt_finalize_init+0x120>)
   174dc:	4d46      	ldr	r5, [pc, #280]	; (175f8 <bt_finalize_init+0x124>)
{
   174de:	b083      	sub	sp, #12
   174e0:	2104      	movs	r1, #4
   174e2:	af00      	add	r7, sp, #0
   174e4:	f011 fe50 	bl	29188 <atomic_or>
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   174e8:	79e2      	ldrb	r2, [r4, #7]
   174ea:	4b44      	ldr	r3, [pc, #272]	; (175fc <bt_finalize_init+0x128>)
   174ec:	4620      	mov	r0, r4
   174ee:	2a01      	cmp	r2, #1
   174f0:	bf88      	it	hi
   174f2:	461d      	movhi	r5, r3
   174f4:	466e      	mov	r6, sp
   174f6:	f7fe faa1 	bl	15a3c <bt_addr_le_str>
   174fa:	b08a      	sub	sp, #40	; 0x28
   174fc:	466b      	mov	r3, sp
   174fe:	4940      	ldr	r1, [pc, #256]	; (17600 <bt_finalize_init+0x12c>)
   17500:	61d8      	str	r0, [r3, #28]
   17502:	e9c3 1505 	strd	r1, r5, [r3, #20]
   17506:	493f      	ldr	r1, [pc, #252]	; (17604 <bt_finalize_init+0x130>)
   17508:	6079      	str	r1, [r7, #4]
   1750a:	f103 0210 	add.w	r2, r3, #16
   1750e:	1d38      	adds	r0, r7, #4
   17510:	f103 011f 	add.w	r1, r3, #31
   17514:	f103 0523 	add.w	r5, r3, #35	; 0x23
   17518:	f810 cb01 	ldrb.w	ip, [r0], #1
   1751c:	f801 cf01 	strb.w	ip, [r1, #1]!
   17520:	42a9      	cmp	r1, r5
   17522:	d1f9      	bne.n	17518 <bt_finalize_init+0x44>
   17524:	4938      	ldr	r1, [pc, #224]	; (17608 <bt_finalize_init+0x134>)
   17526:	6119      	str	r1, [r3, #16]
   17528:	4838      	ldr	r0, [pc, #224]	; (1760c <bt_finalize_init+0x138>)
   1752a:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 175f0 <bt_finalize_init+0x11c>
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
   1752e:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 17610 <bt_finalize_init+0x13c>
   17532:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 1760c <bt_finalize_init+0x138>
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   17536:	f44f 5123 	mov.w	r1, #10432	; 0x28c0
   1753a:	f011 fe39 	bl	291b0 <z_log_msg_static_create.constprop.0>
   1753e:	46b5      	mov	sp, r6
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
   17540:	4e34      	ldr	r6, [pc, #208]	; (17614 <bt_finalize_init+0x140>)
	for (i = 1; i < bt_dev.id_count; i++) {
   17542:	2501      	movs	r5, #1
   17544:	79e3      	ldrb	r3, [r4, #7]
   17546:	429d      	cmp	r5, r3
   17548:	f10b 0b07 	add.w	fp, fp, #7
   1754c:	db39      	blt.n	175c2 <bt_finalize_init+0xee>
	LOG_INF("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
   1754e:	f894 5070 	ldrb.w	r5, [r4, #112]	; 0x70
   17552:	4628      	mov	r0, r5
   17554:	f7fe fcdc 	bl	15f10 <ver_str>
   17558:	466e      	mov	r6, sp
   1755a:	b08c      	sub	sp, #48	; 0x30
   1755c:	f8b4 1072 	ldrh.w	r1, [r4, #114]	; 0x72
   17560:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
   17564:	466a      	mov	r2, sp
   17566:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 17618 <bt_finalize_init+0x144>
   1756a:	6253      	str	r3, [r2, #36]	; 0x24
   1756c:	e9c2 5107 	strd	r5, r1, [r2, #28]
   17570:	4b2a      	ldr	r3, [pc, #168]	; (1761c <bt_finalize_init+0x148>)
   17572:	f44f 7500 	mov.w	r5, #512	; 0x200
   17576:	e9c2 c005 	strd	ip, r0, [r2, #20]
   1757a:	8515      	strh	r5, [r2, #40]	; 0x28
   1757c:	f44f 5153 	mov.w	r1, #13504	; 0x34c0
   17580:	f842 3f10 	str.w	r3, [r2, #16]!
   17584:	4821      	ldr	r0, [pc, #132]	; (1760c <bt_finalize_init+0x138>)
   17586:	f011 fe13 	bl	291b0 <z_log_msg_static_create.constprop.0>
   1758a:	46b5      	mov	sp, r6
	LOG_INF("LMP: version %s (0x%02x) subver 0x%04x", ver_str(bt_dev.lmp_version),
   1758c:	f894 6071 	ldrb.w	r6, [r4, #113]	; 0x71
   17590:	4630      	mov	r0, r6
   17592:	f7fe fcbd 	bl	15f10 <ver_str>
   17596:	b08a      	sub	sp, #40	; 0x28
   17598:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
   1759c:	466a      	mov	r2, sp
   1759e:	4920      	ldr	r1, [pc, #128]	; (17620 <bt_finalize_init+0x14c>)
   175a0:	8495      	strh	r5, [r2, #36]	; 0x24
   175a2:	e9c2 6307 	strd	r6, r3, [r2, #28]
   175a6:	4b1f      	ldr	r3, [pc, #124]	; (17624 <bt_finalize_init+0x150>)
   175a8:	e9c2 1005 	strd	r1, r0, [r2, #20]
   175ac:	f842 3f10 	str.w	r3, [r2, #16]!
   175b0:	4816      	ldr	r0, [pc, #88]	; (1760c <bt_finalize_init+0x138>)
   175b2:	f44f 5133 	mov.w	r1, #11456	; 0x2cc0
   175b6:	f011 fdfb 	bl	291b0 <z_log_msg_static_create.constprop.0>
}
   175ba:	370c      	adds	r7, #12
   175bc:	46bd      	mov	sp, r7
   175be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
   175c2:	4658      	mov	r0, fp
   175c4:	f7fe fa3a 	bl	15a3c <bt_addr_le_str>
   175c8:	46ea      	mov	sl, sp
   175ca:	b08a      	sub	sp, #40	; 0x28
   175cc:	466a      	mov	r2, sp
   175ce:	f240 3301 	movw	r3, #769	; 0x301
   175d2:	e9c2 6505 	strd	r6, r5, [r2, #20]
   175d6:	61d0      	str	r0, [r2, #28]
   175d8:	8413      	strh	r3, [r2, #32]
   175da:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
   175de:	f842 8f10 	str.w	r8, [r2, #16]!
   175e2:	4648      	mov	r0, r9
   175e4:	f011 fde4 	bl	291b0 <z_log_msg_static_create.constprop.0>
	for (i = 1; i < bt_dev.id_count; i++) {
   175e8:	3501      	adds	r5, #1
   175ea:	46d5      	mov	sp, sl
   175ec:	e7aa      	b.n	17544 <bt_finalize_init+0x70>
   175ee:	bf00      	nop
   175f0:	20000390 	.word	0x20000390
   175f4:	20000464 	.word	0x20000464
   175f8:	0002dd0f 	.word	0x0002dd0f
   175fc:	0002ea00 	.word	0x0002ea00
   17600:	0002ea04 	.word	0x0002ea04
   17604:	03010200 	.word	0x03010200
   17608:	02000004 	.word	0x02000004
   1760c:	0002cb24 	.word	0x0002cb24
   17610:	01000004 	.word	0x01000004
   17614:	0002ea13 	.word	0x0002ea13
   17618:	0002ea24 	.word	0x0002ea24
   1761c:	01000006 	.word	0x01000006
   17620:	0002ea62 	.word	0x0002ea62
   17624:	01000005 	.word	0x01000005

00017628 <bt_init.part.0>:
static int bt_init(void)
   17628:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		if (!bt_dev.id_count) {
   1762a:	480c      	ldr	r0, [pc, #48]	; (1765c <bt_init.part.0+0x34>)
   1762c:	79c3      	ldrb	r3, [r0, #7]
   1762e:	b96b      	cbnz	r3, 1764c <bt_init.part.0+0x24>
			LOG_INF("No ID address. App must call settings_load()");
   17630:	4b0b      	ldr	r3, [pc, #44]	; (17660 <bt_init.part.0+0x38>)
   17632:	9305      	str	r3, [sp, #20]
   17634:	480b      	ldr	r0, [pc, #44]	; (17664 <bt_init.part.0+0x3c>)
   17636:	2302      	movs	r3, #2
   17638:	aa04      	add	r2, sp, #16
   1763a:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   1763e:	9304      	str	r3, [sp, #16]
   17640:	f011 fdb6 	bl	291b0 <z_log_msg_static_create.constprop.0>
}
   17644:	2000      	movs	r0, #0
   17646:	b007      	add	sp, #28
   17648:	f85d fb04 	ldr.w	pc, [sp], #4
   1764c:	2108      	movs	r1, #8
   1764e:	30d4      	adds	r0, #212	; 0xd4
   17650:	f011 fd9a 	bl	29188 <atomic_or>
	bt_finalize_init();
   17654:	f7ff ff3e 	bl	174d4 <bt_finalize_init>
	return 0;
   17658:	e7f4      	b.n	17644 <bt_init.part.0+0x1c>
   1765a:	bf00      	nop
   1765c:	20000390 	.word	0x20000390
   17660:	0002ea89 	.word	0x0002ea89
   17664:	0002cb24 	.word	0x0002cb24

00017668 <init_work>:
{
   17668:	b510      	push	{r4, lr}
	err = bt_init();
   1766a:	f7f9 fd79 	bl	11160 <bt_init>
	if (ready_cb) {
   1766e:	4b03      	ldr	r3, [pc, #12]	; (1767c <init_work+0x14>)
   17670:	681b      	ldr	r3, [r3, #0]
   17672:	b113      	cbz	r3, 1767a <init_work+0x12>
}
   17674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   17678:	4718      	bx	r3
}
   1767a:	bd10      	pop	{r4, pc}
   1767c:	20003458 	.word	0x20003458

00017680 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   17680:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (!bt_dev.drv) {
   17682:	4d3e      	ldr	r5, [pc, #248]	; (1777c <bt_enable+0xfc>)
{
   17684:	b08f      	sub	sp, #60	; 0x3c
	if (!bt_dev.drv) {
   17686:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
{
   1768a:	af08      	add	r7, sp, #32
   1768c:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   1768e:	b983      	cbnz	r3, 176b2 <bt_enable+0x32>
		LOG_ERR("No HCI driver registered");
   17690:	4b3b      	ldr	r3, [pc, #236]	; (17780 <bt_enable+0x100>)
   17692:	617b      	str	r3, [r7, #20]
   17694:	483b      	ldr	r0, [pc, #236]	; (17784 <bt_enable+0x104>)
   17696:	2302      	movs	r3, #2
   17698:	f107 0210 	add.w	r2, r7, #16
   1769c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
   176a0:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("No HCI driver registered");
   176a4:	613b      	str	r3, [r7, #16]
   176a6:	f011 fd83 	bl	291b0 <z_log_msg_static_create.constprop.0>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   176aa:	4620      	mov	r0, r4
   176ac:	371c      	adds	r7, #28
   176ae:	46bd      	mov	sp, r7
   176b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   176b2:	f06f 0102 	mvn.w	r1, #2
   176b6:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
   176ba:	f011 fd7c 	bl	291b6 <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   176be:	2101      	movs	r1, #1
   176c0:	f011 fd62 	bl	29188 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   176c4:	07c3      	lsls	r3, r0, #31
   176c6:	d456      	bmi.n	17776 <bt_enable+0xf6>
		err = bt_settings_init();
   176c8:	f7fe fb52 	bl	15d70 <bt_settings_init>
		if (err) {
   176cc:	4604      	mov	r4, r0
   176ce:	2800      	cmp	r0, #0
   176d0:	d1eb      	bne.n	176aa <bt_enable+0x2a>
	ready_cb = cb;
   176d2:	4b2d      	ldr	r3, [pc, #180]	; (17788 <bt_enable+0x108>)
   176d4:	601e      	str	r6, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   176d6:	2201      	movs	r2, #1
   176d8:	4611      	mov	r1, r2
   176da:	f505 7094 	add.w	r0, r5, #296	; 0x128
   176de:	f014 fbf3 	bl	2bec8 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   176e2:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
   176e6:	f014 fbca 	bl	2be7e <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   176ea:	2200      	movs	r2, #0
   176ec:	2300      	movs	r3, #0
   176ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
   176f2:	f06f 0308 	mvn.w	r3, #8
   176f6:	e9cd 4302 	strd	r4, r3, [sp, #8]
   176fa:	e9cd 4400 	strd	r4, r4, [sp]
   176fe:	4b23      	ldr	r3, [pc, #140]	; (1778c <bt_enable+0x10c>)
   17700:	4923      	ldr	r1, [pc, #140]	; (17790 <bt_enable+0x110>)
   17702:	9404      	str	r4, [sp, #16]
   17704:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   17708:	4822      	ldr	r0, [pc, #136]	; (17794 <bt_enable+0x114>)
   1770a:	f00b fc75 	bl	22ff8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1770e:	4922      	ldr	r1, [pc, #136]	; (17798 <bt_enable+0x118>)
   17710:	4820      	ldr	r0, [pc, #128]	; (17794 <bt_enable+0x114>)
   17712:	f014 fb25 	bl	2bd60 <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
   17716:	4821      	ldr	r0, [pc, #132]	; (1779c <bt_enable+0x11c>)
   17718:	f014 fc97 	bl	2c04a <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   1771c:	4920      	ldr	r1, [pc, #128]	; (177a0 <bt_enable+0x120>)
   1771e:	481f      	ldr	r0, [pc, #124]	; (1779c <bt_enable+0x11c>)
   17720:	9400      	str	r4, [sp, #0]
   17722:	f06f 0307 	mvn.w	r3, #7
   17726:	f640 0298 	movw	r2, #2200	; 0x898
   1772a:	f00b ff97 	bl	2365c <k_work_queue_start>
   1772e:	491d      	ldr	r1, [pc, #116]	; (177a4 <bt_enable+0x124>)
   17730:	481a      	ldr	r0, [pc, #104]	; (1779c <bt_enable+0x11c>)
   17732:	f014 fb15 	bl	2bd60 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   17736:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
   1773a:	68db      	ldr	r3, [r3, #12]
   1773c:	4798      	blx	r3
	if (err) {
   1773e:	4604      	mov	r4, r0
   17740:	b178      	cbz	r0, 17762 <bt_enable+0xe2>
		LOG_ERR("HCI driver open failed (%d)", err);
   17742:	466d      	mov	r5, sp
   17744:	462a      	mov	r2, r5
   17746:	b088      	sub	sp, #32
   17748:	4b17      	ldr	r3, [pc, #92]	; (177a8 <bt_enable+0x128>)
   1774a:	e9c5 3005 	strd	r3, r0, [r5, #20]
   1774e:	2303      	movs	r3, #3
   17750:	f842 3f10 	str.w	r3, [r2, #16]!
   17754:	480b      	ldr	r0, [pc, #44]	; (17784 <bt_enable+0x104>)
   17756:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1775a:	f011 fd29 	bl	291b0 <z_log_msg_static_create.constprop.0>
   1775e:	46ad      	mov	sp, r5
		return err;
   17760:	e7a3      	b.n	176aa <bt_enable+0x2a>
	if (!cb) {
   17762:	b91e      	cbnz	r6, 1776c <bt_enable+0xec>
		return bt_init();
   17764:	f7f9 fcfc 	bl	11160 <bt_init>
   17768:	4604      	mov	r4, r0
   1776a:	e79e      	b.n	176aa <bt_enable+0x2a>
	k_work_submit(&bt_dev.init);
   1776c:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
   17770:	f00b ff6e 	bl	23650 <k_work_submit>
	return 0;
   17774:	e799      	b.n	176aa <bt_enable+0x2a>
		return -EALREADY;
   17776:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1777a:	e796      	b.n	176aa <bt_enable+0x2a>
   1777c:	20000390 	.word	0x20000390
   17780:	0002ebd1 	.word	0x0002ebd1
   17784:	0002cb24 	.word	0x0002cb24
   17788:	20003458 	.word	0x20003458
   1778c:	0001720d 	.word	0x0001720d
   17790:	20005880 	.word	0x20005880
   17794:	20001e90 	.word	0x20001e90
   17798:	0002ebea 	.word	0x0002ebea
   1779c:	20001f10 	.word	0x20001f10
   177a0:	20005ec0 	.word	0x20005ec0
   177a4:	0002ebf0 	.word	0x0002ebf0
   177a8:	0002ebf6 	.word	0x0002ebf6

000177ac <bt_is_ready>:

	return 0;
}

bool bt_is_ready(void)
{
   177ac:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   177ae:	4803      	ldr	r0, [pc, #12]	; (177bc <bt_is_ready+0x10>)
   177b0:	f011 fce1 	bl	29176 <atomic_get>
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   177b4:	f3c0 0080 	ubfx	r0, r0, #2, #1
   177b8:	bd08      	pop	{r3, pc}
   177ba:	bf00      	nop
   177bc:	20000464 	.word	0x20000464

000177c0 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   177c0:	4800      	ldr	r0, [pc, #0]	; (177c4 <bt_get_name+0x4>)
   177c2:	4770      	bx	lr
   177c4:	0002daa0 	.word	0x0002daa0

000177c8 <bt_le_filter_accept_list_add>:
	}
}

#if defined(CONFIG_BT_FILTER_ACCEPT_LIST)
int bt_le_filter_accept_list_add(const bt_addr_le_t *addr)
{
   177c8:	b530      	push	{r4, r5, lr}
   177ca:	4605      	mov	r5, r0
   177cc:	b087      	sub	sp, #28
   177ce:	4817      	ldr	r0, [pc, #92]	; (1782c <bt_le_filter_accept_list_add+0x64>)
   177d0:	f011 fcd1 	bl	29176 <atomic_get>
	struct bt_hci_cp_le_add_dev_to_fal *cp;
	struct net_buf *buf;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   177d4:	0743      	lsls	r3, r0, #29
   177d6:	d522      	bpl.n	1781e <bt_le_filter_accept_list_add+0x56>
		return -EAGAIN;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_FAL, sizeof(*cp));
   177d8:	2107      	movs	r1, #7
   177da:	f242 0011 	movw	r0, #8209	; 0x2011
   177de:	f7ff f851 	bl	16884 <bt_hci_cmd_create>
	if (!buf) {
   177e2:	4604      	mov	r4, r0
   177e4:	b1f0      	cbz	r0, 17824 <bt_le_filter_accept_list_add+0x5c>
	return net_buf_simple_add(&buf->b, len);
   177e6:	2107      	movs	r1, #7
   177e8:	300c      	adds	r0, #12
   177ea:	f013 fdaf 	bl	2b34c <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
	bt_addr_le_copy(&cp->addr, addr);
   177ee:	4629      	mov	r1, r5
   177f0:	f011 fcc7 	bl	29182 <bt_addr_le_copy>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_FAL, buf, NULL);
   177f4:	4621      	mov	r1, r4
   177f6:	2200      	movs	r2, #0
   177f8:	f242 0011 	movw	r0, #8209	; 0x2011
   177fc:	f7ff f87c 	bl	168f8 <bt_hci_cmd_send_sync>
	if (err) {
   17800:	4604      	mov	r4, r0
   17802:	b148      	cbz	r0, 17818 <bt_le_filter_accept_list_add+0x50>
		LOG_ERR("Failed to add device to filter accept list");
   17804:	4b0a      	ldr	r3, [pc, #40]	; (17830 <bt_le_filter_accept_list_add+0x68>)
   17806:	9305      	str	r3, [sp, #20]
   17808:	480a      	ldr	r0, [pc, #40]	; (17834 <bt_le_filter_accept_list_add+0x6c>)
   1780a:	2302      	movs	r3, #2
   1780c:	aa04      	add	r2, sp, #16
   1780e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17812:	9304      	str	r3, [sp, #16]
   17814:	f011 fccc 	bl	291b0 <z_log_msg_static_create.constprop.0>

		return err;
	}

	return 0;
}
   17818:	4620      	mov	r0, r4
   1781a:	b007      	add	sp, #28
   1781c:	bd30      	pop	{r4, r5, pc}
		return -EAGAIN;
   1781e:	f06f 040a 	mvn.w	r4, #10
   17822:	e7f9      	b.n	17818 <bt_le_filter_accept_list_add+0x50>
		return -ENOBUFS;
   17824:	f06f 0468 	mvn.w	r4, #104	; 0x68
   17828:	e7f6      	b.n	17818 <bt_le_filter_accept_list_add+0x50>
   1782a:	bf00      	nop
   1782c:	20000464 	.word	0x20000464
   17830:	0002ec12 	.word	0x0002ec12
   17834:	0002cb24 	.word	0x0002cb24

00017838 <bt_le_filter_accept_list_clear>:

	return 0;
}

int bt_le_filter_accept_list_clear(void)
{
   17838:	b510      	push	{r4, lr}
   1783a:	480f      	ldr	r0, [pc, #60]	; (17878 <bt_le_filter_accept_list_clear+0x40>)
   1783c:	b086      	sub	sp, #24
   1783e:	f011 fc9a 	bl	29176 <atomic_get>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   17842:	0743      	lsls	r3, r0, #29
   17844:	d514      	bpl.n	17870 <bt_le_filter_accept_list_clear+0x38>
		return -EAGAIN;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_FAL, NULL, NULL);
   17846:	2200      	movs	r2, #0
   17848:	4611      	mov	r1, r2
   1784a:	f242 0010 	movw	r0, #8208	; 0x2010
   1784e:	f7ff f853 	bl	168f8 <bt_hci_cmd_send_sync>
	if (err) {
   17852:	4604      	mov	r4, r0
   17854:	b148      	cbz	r0, 1786a <bt_le_filter_accept_list_clear+0x32>
		LOG_ERR("Failed to clear filter accept list");
   17856:	4b09      	ldr	r3, [pc, #36]	; (1787c <bt_le_filter_accept_list_clear+0x44>)
   17858:	9305      	str	r3, [sp, #20]
   1785a:	4809      	ldr	r0, [pc, #36]	; (17880 <bt_le_filter_accept_list_clear+0x48>)
   1785c:	2302      	movs	r3, #2
   1785e:	aa04      	add	r2, sp, #16
   17860:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17864:	9304      	str	r3, [sp, #16]
   17866:	f011 fca3 	bl	291b0 <z_log_msg_static_create.constprop.0>
		return err;
	}

	return 0;
}
   1786a:	4620      	mov	r0, r4
   1786c:	b006      	add	sp, #24
   1786e:	bd10      	pop	{r4, pc}
		return -EAGAIN;
   17870:	f06f 040a 	mvn.w	r4, #10
   17874:	e7f9      	b.n	1786a <bt_le_filter_accept_list_clear+0x32>
   17876:	bf00      	nop
   17878:	20000464 	.word	0x20000464
   1787c:	0002ec3d 	.word	0x0002ec3d
   17880:	0002cb24 	.word	0x0002cb24

00017884 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   17884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   17886:	4f0a      	ldr	r7, [pc, #40]	; (178b0 <id_find+0x2c>)
{
   17888:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   1788a:	2500      	movs	r5, #0
   1788c:	79fb      	ldrb	r3, [r7, #7]
   1788e:	b2ec      	uxtb	r4, r5
   17890:	42a3      	cmp	r3, r4
   17892:	d802      	bhi.n	1789a <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   17894:	f06f 0001 	mvn.w	r0, #1
   17898:	e009      	b.n	178ae <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   1789a:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   1789e:	4439      	add	r1, r7
   178a0:	4630      	mov	r0, r6
   178a2:	f011 fd4f 	bl	29344 <bt_addr_le_eq>
   178a6:	3501      	adds	r5, #1
   178a8:	2800      	cmp	r0, #0
   178aa:	d0ef      	beq.n	1788c <id_find+0x8>
   178ac:	4620      	mov	r0, r4
}
   178ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   178b0:	20000390 	.word	0x20000390

000178b4 <le_rpa_timeout_submit>:
{
   178b4:	b570      	push	{r4, r5, r6, lr}
	(void)k_work_schedule(&bt_dev.rpa_update, K_SECONDS(bt_dev.rpa_timeout));
   178b6:	4d0d      	ldr	r5, [pc, #52]	; (178ec <le_rpa_timeout_submit+0x38>)
   178b8:	f8b5 41a8 	ldrh.w	r4, [r5, #424]	; 0x1a8
   178bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   178c0:	435c      	muls	r4, r3
			return ((t * to_hz + off) / from_hz);
   178c2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   178c6:	f240 30e7 	movw	r0, #999	; 0x3e7
   178ca:	2100      	movs	r1, #0
   178cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   178d0:	2300      	movs	r3, #0
   178d2:	fbe4 0106 	umlal	r0, r1, r4, r6
   178d6:	f7e8 fc13 	bl	100 <__aeabi_uldivmod>
   178da:	4602      	mov	r2, r0
   178dc:	460b      	mov	r3, r1
   178de:	f505 70bc 	add.w	r0, r5, #376	; 0x178
}
   178e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)k_work_schedule(&bt_dev.rpa_update, K_SECONDS(bt_dev.rpa_timeout));
   178e6:	f00b bf1b 	b.w	23720 <k_work_schedule>
   178ea:	bf00      	nop
   178ec:	20000390 	.word	0x20000390

000178f0 <le_rpa_invalidate>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   178f0:	4b08      	ldr	r3, [pc, #32]	; (17914 <le_rpa_invalidate+0x24>)
   178f2:	f3bf 8f5b 	dmb	ish
   178f6:	e853 1f00 	ldrex	r1, [r3]
   178fa:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   178fe:	e843 1200 	strex	r2, r1, [r3]
   17902:	2a00      	cmp	r2, #0
   17904:	d1f7      	bne.n	178f6 <le_rpa_invalidate+0x6>
   17906:	f3bf 8f5b 	dmb	ish
		bt_le_ext_adv_foreach(adv_rpa_invalidate, NULL);
   1790a:	4803      	ldr	r0, [pc, #12]	; (17918 <le_rpa_invalidate+0x28>)
   1790c:	2100      	movs	r1, #0
   1790e:	f000 bdf1 	b.w	184f4 <bt_le_ext_adv_foreach>
   17912:	bf00      	nop
   17914:	20000464 	.word	0x20000464
   17918:	000294ad 	.word	0x000294ad

0001791c <hci_id_add>:
{
   1791c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17920:	4688      	mov	r8, r1
   17922:	4617      	mov	r7, r2
	if (id >= CONFIG_BT_ID_MAX) {
   17924:	4605      	mov	r5, r0
   17926:	bb08      	cbnz	r0, 1796c <hci_id_add+0x50>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   17928:	2127      	movs	r1, #39	; 0x27
   1792a:	f242 0027 	movw	r0, #8231	; 0x2027
   1792e:	f7fe ffa9 	bl	16884 <bt_hci_cmd_create>
	if (!buf) {
   17932:	4604      	mov	r4, r0
   17934:	b1f0      	cbz	r0, 17974 <hci_id_add+0x58>
   17936:	2127      	movs	r1, #39	; 0x27
   17938:	300c      	adds	r0, #12
   1793a:	f013 fd07 	bl	2b34c <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   1793e:	4641      	mov	r1, r8
   17940:	4606      	mov	r6, r0
   17942:	f011 fd07 	bl	29354 <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   17946:	4639      	mov	r1, r7
   17948:	2210      	movs	r2, #16
   1794a:	1df0      	adds	r0, r6, #7
   1794c:	f011 faec 	bl	28f28 <memcpy>
	(void)memcpy(cp->local_irk, &bt_dev.irk[id], 16);
   17950:	490a      	ldr	r1, [pc, #40]	; (1797c <hci_id_add+0x60>)
   17952:	2210      	movs	r2, #16
   17954:	f106 0017 	add.w	r0, r6, #23
   17958:	f011 fae6 	bl	28f28 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   1795c:	462a      	mov	r2, r5
   1795e:	4621      	mov	r1, r4
   17960:	f242 0027 	movw	r0, #8231	; 0x2027
}
   17964:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   17968:	f7fe bfc6 	b.w	168f8 <bt_hci_cmd_send_sync>
		return -EINVAL;
   1796c:	f06f 0015 	mvn.w	r0, #21
}
   17970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   17974:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17978:	e7fa      	b.n	17970 <hci_id_add+0x54>
   1797a:	bf00      	nop
   1797c:	200004f8 	.word	0x200004f8

00017980 <id_create>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
   17980:	b5f0      	push	{r4, r5, r6, r7, lr}
   17982:	4604      	mov	r4, r0
   17984:	b085      	sub	sp, #20
   17986:	4616      	mov	r6, r2
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   17988:	460d      	mov	r5, r1
   1798a:	b351      	cbz	r1, 179e2 <id_create+0x62>
   1798c:	492a      	ldr	r1, [pc, #168]	; (17a38 <id_create+0xb8>)
   1798e:	4628      	mov	r0, r5
   17990:	f011 fcd8 	bl	29344 <bt_addr_le_eq>
   17994:	bb28      	cbnz	r0, 179e2 <id_create+0x62>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   17996:	4b29      	ldr	r3, [pc, #164]	; (17a3c <id_create+0xbc>)
   17998:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   1799c:	4629      	mov	r1, r5
   1799e:	4418      	add	r0, r3
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   179a0:	f011 fcd8 	bl	29354 <bt_addr_le_copy>
		}
	}

#if defined(CONFIG_BT_PRIVACY)
	{
		uint8_t zero_irk[16] = { 0 };
   179a4:	2300      	movs	r3, #0
   179a6:	e9cd 3300 	strd	r3, r3, [sp]
   179aa:	e9cd 3302 	strd	r3, r3, [sp, #8]

		if (irk && memcmp(irk, zero_irk, 16)) {
			memcpy(&bt_dev.irk[id], irk, 16);
   179ae:	2510      	movs	r5, #16
   179b0:	f44f 73b4 	mov.w	r3, #360	; 0x168
   179b4:	fb15 3404 	smlabb	r4, r5, r4, r3
   179b8:	4b20      	ldr	r3, [pc, #128]	; (17a3c <id_create+0xbc>)
   179ba:	441c      	add	r4, r3
		if (irk && memcmp(irk, zero_irk, 16)) {
   179bc:	b33e      	cbz	r6, 17a0e <id_create+0x8e>
   179be:	462a      	mov	r2, r5
   179c0:	4669      	mov	r1, sp
   179c2:	4630      	mov	r0, r6
   179c4:	f011 fa89 	bl	28eda <memcmp>
   179c8:	b348      	cbz	r0, 17a1e <id_create+0x9e>
			memcpy(&bt_dev.irk[id], irk, 16);
   179ca:	462a      	mov	r2, r5
   179cc:	4631      	mov	r1, r6
   179ce:	4620      	mov	r0, r4
			if (err) {
				return err;
			}

			if (irk) {
				memcpy(irk, &bt_dev.irk[id], 16);
   179d0:	f011 faaa 	bl	28f28 <memcpy>
   179d4:	481a      	ldr	r0, [pc, #104]	; (17a40 <id_create+0xc0>)
   179d6:	f011 fcc0 	bl	2935a <atomic_get>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   179da:	0743      	lsls	r3, r0, #29
   179dc:	d429      	bmi.n	17a32 <id_create+0xb2>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   179de:	2000      	movs	r0, #0
   179e0:	e01b      	b.n	17a1a <id_create+0x9a>
			err = bt_addr_le_create_static(&new_addr);
   179e2:	4668      	mov	r0, sp
   179e4:	f011 fb80 	bl	290e8 <bt_addr_le_create_static>
			if (err) {
   179e8:	b9b8      	cbnz	r0, 17a1a <id_create+0x9a>
		} while (id_find(&new_addr) >= 0);
   179ea:	4668      	mov	r0, sp
   179ec:	f7ff ff4a 	bl	17884 <id_find>
   179f0:	2800      	cmp	r0, #0
   179f2:	daf6      	bge.n	179e2 <id_create+0x62>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   179f4:	4b11      	ldr	r3, [pc, #68]	; (17a3c <id_create+0xbc>)
   179f6:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
   179fa:	441f      	add	r7, r3
   179fc:	4669      	mov	r1, sp
   179fe:	4638      	mov	r0, r7
   17a00:	f011 fca8 	bl	29354 <bt_addr_le_copy>
		if (addr) {
   17a04:	2d00      	cmp	r5, #0
   17a06:	d0cd      	beq.n	179a4 <id_create+0x24>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   17a08:	4639      	mov	r1, r7
   17a0a:	4628      	mov	r0, r5
   17a0c:	e7c8      	b.n	179a0 <id_create+0x20>
			err = bt_rand(&bt_dev.irk[id], 16);
   17a0e:	4629      	mov	r1, r5
   17a10:	4620      	mov	r0, r4
   17a12:	f009 fd39 	bl	21488 <bt_rand>
			if (err) {
   17a16:	2800      	cmp	r0, #0
   17a18:	d0dc      	beq.n	179d4 <id_create+0x54>
}
   17a1a:	b005      	add	sp, #20
   17a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			err = bt_rand(&bt_dev.irk[id], 16);
   17a1e:	4629      	mov	r1, r5
   17a20:	4620      	mov	r0, r4
   17a22:	f009 fd31 	bl	21488 <bt_rand>
			if (err) {
   17a26:	2800      	cmp	r0, #0
   17a28:	d1f7      	bne.n	17a1a <id_create+0x9a>
				memcpy(irk, &bt_dev.irk[id], 16);
   17a2a:	462a      	mov	r2, r5
   17a2c:	4621      	mov	r1, r4
   17a2e:	4630      	mov	r0, r6
   17a30:	e7ce      	b.n	179d0 <id_create+0x50>
		bt_settings_save_id();
   17a32:	f7fe f94d 	bl	15cd0 <bt_settings_save_id>
   17a36:	e7d2      	b.n	179de <id_create+0x5e>
   17a38:	0002e38f 	.word	0x0002e38f
   17a3c:	20000390 	.word	0x20000390
   17a40:	20000464 	.word	0x20000464

00017a44 <bt_id_add.part.0>:
void bt_id_add(struct bt_keys *keys)
   17a44:	b5f0      	push	{r4, r5, r6, r7, lr}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   17a46:	2100      	movs	r1, #0
void bt_id_add(struct bt_keys *keys)
   17a48:	b087      	sub	sp, #28
   17a4a:	4604      	mov	r4, r0
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   17a4c:	2206      	movs	r2, #6
   17a4e:	4608      	mov	r0, r1
   17a50:	f001 fe50 	bl	196f4 <bt_conn_lookup_state_le>
	if (conn) {
   17a54:	4606      	mov	r6, r0
   17a56:	b170      	cbz	r0, 17a76 <bt_id_add.part.0+0x32>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   17a58:	4848      	ldr	r0, [pc, #288]	; (17b7c <bt_id_add.part.0+0x138>)
   17a5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   17a5e:	f011 fcc0 	bl	293e2 <atomic_or.isra.0>
	keys->state |= flag;
   17a62:	7a23      	ldrb	r3, [r4, #8]
		bt_conn_unref(conn);
   17a64:	4630      	mov	r0, r6
	keys->state |= flag;
   17a66:	f043 0301 	orr.w	r3, r3, #1
   17a6a:	7223      	strb	r3, [r4, #8]
}
   17a6c:	b007      	add	sp, #28
   17a6e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   17a72:	f011 bec8 	b.w	29806 <bt_conn_unref>
	if (bt_dev.le.rl_entries) {
   17a76:	4d42      	ldr	r5, [pc, #264]	; (17b80 <bt_id_add.part.0+0x13c>)
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   17a78:	4601      	mov	r1, r0
   17a7a:	4842      	ldr	r0, [pc, #264]	; (17b84 <bt_id_add.part.0+0x140>)
   17a7c:	f000 fd3a 	bl	184f4 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   17a80:	f895 3121 	ldrb.w	r3, [r5, #289]	; 0x121
   17a84:	b173      	cbz	r3, 17aa4 <bt_id_add.part.0+0x60>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   17a86:	4630      	mov	r0, r6
   17a88:	f011 fc93 	bl	293b2 <addr_res_enable>
		if (err) {
   17a8c:	b150      	cbz	r0, 17aa4 <bt_id_add.part.0+0x60>
			LOG_WRN("Failed to disable address resolution");
   17a8e:	4b3e      	ldr	r3, [pc, #248]	; (17b88 <bt_id_add.part.0+0x144>)
		LOG_WRN("Set privacy mode command is not supported");
   17a90:	9305      	str	r3, [sp, #20]
   17a92:	2302      	movs	r3, #2
   17a94:	9304      	str	r3, [sp, #16]
   17a96:	aa04      	add	r2, sp, #16
   17a98:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		LOG_ERR("Failed to set privacy mode");
   17a9c:	483b      	ldr	r0, [pc, #236]	; (17b8c <bt_id_add.part.0+0x148>)
   17a9e:	f011 fc85 	bl	293ac <z_log_msg_static_create.constprop.0>
		goto done;
   17aa2:	e026      	b.n	17af2 <bt_id_add.part.0+0xae>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   17aa4:	f895 2121 	ldrb.w	r2, [r5, #289]	; 0x121
   17aa8:	f895 3120 	ldrb.w	r3, [r5, #288]	; 0x120
   17aac:	429a      	cmp	r2, r3
   17aae:	d12a      	bne.n	17b06 <bt_id_add.part.0+0xc2>
		LOG_WRN("Resolving list size exceeded. Switching to host.");
   17ab0:	4b37      	ldr	r3, [pc, #220]	; (17b90 <bt_id_add.part.0+0x14c>)
   17ab2:	4836      	ldr	r0, [pc, #216]	; (17b8c <bt_id_add.part.0+0x148>)
   17ab4:	9305      	str	r3, [sp, #20]
   17ab6:	aa04      	add	r2, sp, #16
   17ab8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17abc:	2602      	movs	r6, #2
   17abe:	9604      	str	r6, [sp, #16]
   17ac0:	f011 fc74 	bl	293ac <z_log_msg_static_create.constprop.0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   17ac4:	2200      	movs	r2, #0
   17ac6:	4611      	mov	r1, r2
   17ac8:	f242 0029 	movw	r0, #8233	; 0x2029
   17acc:	f7fe ff14 	bl	168f8 <bt_hci_cmd_send_sync>
		if (err) {
   17ad0:	b130      	cbz	r0, 17ae0 <bt_id_add.part.0+0x9c>
			LOG_ERR("Failed to clear resolution list");
   17ad2:	4b30      	ldr	r3, [pc, #192]	; (17b94 <bt_id_add.part.0+0x150>)
   17ad4:	e9cd 6304 	strd	r6, r3, [sp, #16]
		LOG_ERR("Failed to set privacy mode");
   17ad8:	aa04      	add	r2, sp, #16
   17ada:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17ade:	e7dd      	b.n	17a9c <bt_id_add.part.0+0x58>
		bt_dev.le.rl_entries++;
   17ae0:	f895 3121 	ldrb.w	r3, [r5, #289]	; 0x121
   17ae4:	3301      	adds	r3, #1
   17ae6:	f885 3121 	strb.w	r3, [r5, #289]	; 0x121
		keys->state |= BT_KEYS_ID_ADDED;
   17aea:	7a23      	ldrb	r3, [r4, #8]
   17aec:	f043 0304 	orr.w	r3, r3, #4
   17af0:	7223      	strb	r3, [r4, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   17af2:	2001      	movs	r0, #1
   17af4:	f011 fc5d 	bl	293b2 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   17af8:	4827      	ldr	r0, [pc, #156]	; (17b98 <bt_id_add.part.0+0x154>)
   17afa:	2100      	movs	r1, #0
}
   17afc:	b007      	add	sp, #28
   17afe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   17b02:	f000 bcf7 	b.w	184f4 <bt_le_ext_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   17b06:	4622      	mov	r2, r4
   17b08:	1c67      	adds	r7, r4, #1
   17b0a:	f812 0b2a 	ldrb.w	r0, [r2], #42
   17b0e:	4639      	mov	r1, r7
   17b10:	f7ff ff04 	bl	1791c <hci_id_add>
	if (err) {
   17b14:	4606      	mov	r6, r0
   17b16:	b120      	cbz	r0, 17b22 <bt_id_add.part.0+0xde>
		LOG_ERR("Failed to add IRK to controller");
   17b18:	4b20      	ldr	r3, [pc, #128]	; (17b9c <bt_id_add.part.0+0x158>)
		LOG_ERR("Failed to set privacy mode");
   17b1a:	9305      	str	r3, [sp, #20]
   17b1c:	2302      	movs	r3, #2
   17b1e:	9304      	str	r3, [sp, #16]
   17b20:	e7da      	b.n	17ad8 <bt_id_add.part.0+0x94>
	bt_dev.le.rl_entries++;
   17b22:	f895 3121 	ldrb.w	r3, [r5, #289]	; 0x121
   17b26:	3301      	adds	r3, #1
   17b28:	f885 3121 	strb.w	r3, [r5, #289]	; 0x121
	keys->state |= BT_KEYS_ID_ADDED;
   17b2c:	7a23      	ldrb	r3, [r4, #8]
   17b2e:	f043 0304 	orr.w	r3, r3, #4
   17b32:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   17b34:	f895 30a7 	ldrb.w	r3, [r5, #167]	; 0xa7
   17b38:	075b      	lsls	r3, r3, #29
   17b3a:	d401      	bmi.n	17b40 <bt_id_add.part.0+0xfc>
		LOG_WRN("Set privacy mode command is not supported");
   17b3c:	4b18      	ldr	r3, [pc, #96]	; (17ba0 <bt_id_add.part.0+0x15c>)
   17b3e:	e7a7      	b.n	17a90 <bt_id_add.part.0+0x4c>
	bt_addr_le_copy(&cp.id_addr, addr);
   17b40:	4639      	mov	r1, r7
   17b42:	4668      	mov	r0, sp
   17b44:	f011 fc06 	bl	29354 <bt_addr_le_copy>
	cp.mode = mode;
   17b48:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   17b4a:	2108      	movs	r1, #8
   17b4c:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   17b50:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   17b54:	f7fe fe96 	bl	16884 <bt_hci_cmd_create>
	if (!buf) {
   17b58:	4604      	mov	r4, r0
   17b5a:	b160      	cbz	r0, 17b76 <bt_id_add.part.0+0x132>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17b5c:	2208      	movs	r2, #8
   17b5e:	4669      	mov	r1, sp
   17b60:	300c      	adds	r0, #12
   17b62:	f013 fbf9 	bl	2b358 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   17b66:	4632      	mov	r2, r6
   17b68:	4621      	mov	r1, r4
   17b6a:	f242 004e 	movw	r0, #8270	; 0x204e
   17b6e:	f7fe fec3 	bl	168f8 <bt_hci_cmd_send_sync>
	if (err) {
   17b72:	2800      	cmp	r0, #0
   17b74:	d0bd      	beq.n	17af2 <bt_id_add.part.0+0xae>
		LOG_ERR("Failed to set privacy mode");
   17b76:	4b0b      	ldr	r3, [pc, #44]	; (17ba4 <bt_id_add.part.0+0x160>)
   17b78:	e7cf      	b.n	17b1a <bt_id_add.part.0+0xd6>
   17b7a:	bf00      	nop
   17b7c:	20000464 	.word	0x20000464
   17b80:	20000390 	.word	0x20000390
   17b84:	000293fb 	.word	0x000293fb
   17b88:	0002ed7d 	.word	0x0002ed7d
   17b8c:	0002cb2c 	.word	0x0002cb2c
   17b90:	0002eda2 	.word	0x0002eda2
   17b94:	0002edd3 	.word	0x0002edd3
   17b98:	0002947f 	.word	0x0002947f
   17b9c:	0002edf3 	.word	0x0002edf3
   17ba0:	0002ee13 	.word	0x0002ee13
   17ba4:	0002ee3d 	.word	0x0002ee3d

00017ba8 <set_random_address>:
{
   17ba8:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   17baa:	4913      	ldr	r1, [pc, #76]	; (17bf8 <set_random_address+0x50>)
   17bac:	2206      	movs	r2, #6
   17bae:	4605      	mov	r5, r0
   17bb0:	f011 f993 	bl	28eda <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   17bb4:	b1d8      	cbz	r0, 17bee <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   17bb6:	2106      	movs	r1, #6
   17bb8:	f242 0005 	movw	r0, #8197	; 0x2005
   17bbc:	f7fe fe62 	bl	16884 <bt_hci_cmd_create>
	if (!buf) {
   17bc0:	4604      	mov	r4, r0
   17bc2:	b1b0      	cbz	r0, 17bf2 <set_random_address+0x4a>
   17bc4:	2206      	movs	r2, #6
   17bc6:	4629      	mov	r1, r5
   17bc8:	300c      	adds	r0, #12
   17bca:	f013 fbc5 	bl	2b358 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   17bce:	2200      	movs	r2, #0
   17bd0:	4621      	mov	r1, r4
   17bd2:	f242 0005 	movw	r0, #8197	; 0x2005
   17bd6:	f7fe fe8f 	bl	168f8 <bt_hci_cmd_send_sync>
	if (err) {
   17bda:	b948      	cbnz	r0, 17bf0 <set_random_address+0x48>
	memcpy(dst, src, sizeof(*dst));
   17bdc:	2206      	movs	r2, #6
   17bde:	4806      	ldr	r0, [pc, #24]	; (17bf8 <set_random_address+0x50>)
   17be0:	4629      	mov	r1, r5
   17be2:	f011 f9a1 	bl	28f28 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   17be6:	4b05      	ldr	r3, [pc, #20]	; (17bfc <set_random_address+0x54>)
   17be8:	2201      	movs	r2, #1
   17bea:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		return 0;
   17bee:	2000      	movs	r0, #0
}
   17bf0:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   17bf2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17bf6:	e7fb      	b.n	17bf0 <set_random_address+0x48>
   17bf8:	200003f9 	.word	0x200003f9
   17bfc:	20000390 	.word	0x20000390

00017c00 <bt_id_del.part.0>:
void bt_id_del(struct bt_keys *keys)
   17c00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   17c04:	2100      	movs	r1, #0
void bt_id_del(struct bt_keys *keys)
   17c06:	b087      	sub	sp, #28
   17c08:	4604      	mov	r4, r0
   17c0a:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   17c0c:	2206      	movs	r2, #6
   17c0e:	4608      	mov	r0, r1
   17c10:	f001 fd70 	bl	196f4 <bt_conn_lookup_state_le>
	if (conn) {
   17c14:	4605      	mov	r5, r0
   17c16:	b178      	cbz	r0, 17c38 <bt_id_del.part.0+0x38>
   17c18:	483a      	ldr	r0, [pc, #232]	; (17d04 <bt_id_del.part.0+0x104>)
   17c1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   17c1e:	f011 fbe0 	bl	293e2 <atomic_or.isra.0>
	keys->state |= flag;
   17c22:	7a23      	ldrb	r3, [r4, #8]
   17c24:	f043 0302 	orr.w	r3, r3, #2
   17c28:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
   17c2a:	4628      	mov	r0, r5
   17c2c:	f011 fdeb 	bl	29806 <bt_conn_unref>
}
   17c30:	371c      	adds	r7, #28
   17c32:	46bd      	mov	sp, r7
   17c34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   17c38:	4601      	mov	r1, r0
   17c3a:	4833      	ldr	r0, [pc, #204]	; (17d08 <bt_id_del.part.0+0x108>)
   17c3c:	f000 fc5a 	bl	184f4 <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   17c40:	4628      	mov	r0, r5
   17c42:	f011 fbb6 	bl	293b2 <addr_res_enable>
	if (err) {
   17c46:	4d31      	ldr	r5, [pc, #196]	; (17d0c <bt_id_del.part.0+0x10c>)
   17c48:	4606      	mov	r6, r0
   17c4a:	b1d0      	cbz	r0, 17c82 <bt_id_del.part.0+0x82>
		LOG_ERR("Disabling address resolution failed (err %d)", err);
   17c4c:	466c      	mov	r4, sp
   17c4e:	b088      	sub	sp, #32
   17c50:	466b      	mov	r3, sp
   17c52:	4a2f      	ldr	r2, [pc, #188]	; (17d10 <bt_id_del.part.0+0x110>)
   17c54:	e9c3 2005 	strd	r2, r0, [r3, #20]
   17c58:	461a      	mov	r2, r3
   17c5a:	2303      	movs	r3, #3
   17c5c:	f842 3f10 	str.w	r3, [r2, #16]!
   17c60:	482c      	ldr	r0, [pc, #176]	; (17d14 <bt_id_del.part.0+0x114>)
   17c62:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17c66:	f011 fba1 	bl	293ac <z_log_msg_static_create.constprop.0>
   17c6a:	46a5      	mov	sp, r4
	if (bt_dev.le.rl_entries) {
   17c6c:	f895 3121 	ldrb.w	r3, [r5, #289]	; 0x121
   17c70:	b113      	cbz	r3, 17c78 <bt_id_del.part.0+0x78>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   17c72:	2001      	movs	r0, #1
   17c74:	f011 fb9d 	bl	293b2 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   17c78:	4827      	ldr	r0, [pc, #156]	; (17d18 <bt_id_del.part.0+0x118>)
   17c7a:	2100      	movs	r1, #0
   17c7c:	f000 fc3a 	bl	184f4 <bt_le_ext_adv_foreach>
   17c80:	e7d6      	b.n	17c30 <bt_id_del.part.0+0x30>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   17c82:	f895 3121 	ldrb.w	r3, [r5, #289]	; 0x121
   17c86:	f895 2120 	ldrb.w	r2, [r5, #288]	; 0x120
   17c8a:	429a      	cmp	r2, r3
   17c8c:	d20c      	bcs.n	17ca8 <bt_id_del.part.0+0xa8>
		bt_dev.le.rl_entries--;
   17c8e:	3b01      	subs	r3, #1
   17c90:	f885 3121 	strb.w	r3, [r5, #289]	; 0x121
		keys->state &= ~BT_KEYS_ID_ADDED;
   17c94:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   17c96:	4921      	ldr	r1, [pc, #132]	; (17d1c <bt_id_del.part.0+0x11c>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   17c98:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   17c9c:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   17c9e:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   17ca0:	2002      	movs	r0, #2
   17ca2:	f006 fbb3 	bl	1e40c <bt_keys_foreach_type>
		goto done;
   17ca6:	e7e1      	b.n	17c6c <bt_id_del.part.0+0x6c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   17ca8:	2107      	movs	r1, #7
   17caa:	f242 0028 	movw	r0, #8232	; 0x2028
   17cae:	f7fe fde9 	bl	16884 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   17cb2:	f104 0901 	add.w	r9, r4, #1
	if (!buf) {
   17cb6:	4680      	mov	r8, r0
   17cb8:	b958      	cbnz	r0, 17cd2 <bt_id_del.part.0+0xd2>
		LOG_ERR("Failed to remove IRK from controller");
   17cba:	4b19      	ldr	r3, [pc, #100]	; (17d20 <bt_id_del.part.0+0x120>)
   17cbc:	617b      	str	r3, [r7, #20]
   17cbe:	4815      	ldr	r0, [pc, #84]	; (17d14 <bt_id_del.part.0+0x114>)
   17cc0:	2302      	movs	r3, #2
   17cc2:	f107 0210 	add.w	r2, r7, #16
   17cc6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17cca:	613b      	str	r3, [r7, #16]
   17ccc:	f011 fb6e 	bl	293ac <z_log_msg_static_create.constprop.0>
		goto done;
   17cd0:	e7cc      	b.n	17c6c <bt_id_del.part.0+0x6c>
	return net_buf_simple_add(&buf->b, len);
   17cd2:	2107      	movs	r1, #7
   17cd4:	300c      	adds	r0, #12
   17cd6:	f013 fb39 	bl	2b34c <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   17cda:	4649      	mov	r1, r9
   17cdc:	f011 fb3a 	bl	29354 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   17ce0:	4632      	mov	r2, r6
   17ce2:	4641      	mov	r1, r8
   17ce4:	f242 0028 	movw	r0, #8232	; 0x2028
   17ce8:	f7fe fe06 	bl	168f8 <bt_hci_cmd_send_sync>
	if (err) {
   17cec:	2800      	cmp	r0, #0
   17cee:	d1e4      	bne.n	17cba <bt_id_del.part.0+0xba>
	bt_dev.le.rl_entries--;
   17cf0:	f895 3121 	ldrb.w	r3, [r5, #289]	; 0x121
   17cf4:	3b01      	subs	r3, #1
   17cf6:	f885 3121 	strb.w	r3, [r5, #289]	; 0x121
	keys->state &= ~BT_KEYS_ID_ADDED;
   17cfa:	7a23      	ldrb	r3, [r4, #8]
   17cfc:	f023 0304 	bic.w	r3, r3, #4
   17d00:	7223      	strb	r3, [r4, #8]
   17d02:	e7b3      	b.n	17c6c <bt_id_del.part.0+0x6c>
   17d04:	20000464 	.word	0x20000464
   17d08:	000293fb 	.word	0x000293fb
   17d0c:	20000390 	.word	0x20000390
   17d10:	0002ee58 	.word	0x0002ee58
   17d14:	0002cb2c 	.word	0x0002cb2c
   17d18:	0002947f 	.word	0x0002947f
   17d1c:	00029397 	.word	0x00029397
   17d20:	0002ee85 	.word	0x0002ee85

00017d24 <bt_id_set_private_addr>:
{
   17d24:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(id >= CONFIG_BT_ID_MAX) {
   17d26:	b9f0      	cbnz	r0, 17d66 <bt_id_set_private_addr+0x42>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17d28:	4810      	ldr	r0, [pc, #64]	; (17d6c <bt_id_set_private_addr+0x48>)
   17d2a:	f011 fb16 	bl	2935a <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_RPA_VALID)) {
   17d2e:	0483      	lsls	r3, r0, #18
   17d30:	d417      	bmi.n	17d62 <bt_id_set_private_addr+0x3e>
	err = bt_rpa_create(bt_dev.irk[id], &rpa);
   17d32:	480f      	ldr	r0, [pc, #60]	; (17d70 <bt_id_set_private_addr+0x4c>)
   17d34:	4669      	mov	r1, sp
   17d36:	f011 f950 	bl	28fda <bt_rpa_create>
	if (!err) {
   17d3a:	4604      	mov	r4, r0
   17d3c:	b120      	cbz	r0, 17d48 <bt_id_set_private_addr+0x24>
	le_rpa_timeout_submit();
   17d3e:	f7ff fdb9 	bl	178b4 <le_rpa_timeout_submit>
}
   17d42:	4620      	mov	r0, r4
   17d44:	b002      	add	sp, #8
   17d46:	bd10      	pop	{r4, pc}
		err = set_random_address(&rpa);
   17d48:	4668      	mov	r0, sp
   17d4a:	f7ff ff2d 	bl	17ba8 <set_random_address>
		if (!err) {
   17d4e:	4604      	mov	r4, r0
   17d50:	2800      	cmp	r0, #0
   17d52:	d1f4      	bne.n	17d3e <bt_id_set_private_addr+0x1a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   17d54:	4805      	ldr	r0, [pc, #20]	; (17d6c <bt_id_set_private_addr+0x48>)
   17d56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   17d5a:	f011 fb42 	bl	293e2 <atomic_or.isra.0>
	le_rpa_timeout_submit();
   17d5e:	f7ff fda9 	bl	178b4 <le_rpa_timeout_submit>
		return 0;
   17d62:	2400      	movs	r4, #0
   17d64:	e7ed      	b.n	17d42 <bt_id_set_private_addr+0x1e>
		return -EINVAL;
   17d66:	f06f 0415 	mvn.w	r4, #21
   17d6a:	e7ea      	b.n	17d42 <bt_id_set_private_addr+0x1e>
   17d6c:	20000464 	.word	0x20000464
   17d70:	200004f8 	.word	0x200004f8

00017d74 <le_update_private_addr>:
{
   17d74:	b5b0      	push	{r4, r5, r7, lr}
   17d76:	af00      	add	r7, sp, #0
		adv = bt_le_adv_lookup_legacy();
   17d78:	f000 fbc2 	bl	18500 <bt_le_adv_lookup_legacy>
		if (adv &&
   17d7c:	4604      	mov	r4, r0
   17d7e:	b328      	cbz	r0, 17dcc <le_update_private_addr+0x58>
		    atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   17d80:	f100 0210 	add.w	r2, r0, #16
   17d84:	2107      	movs	r1, #7
   17d86:	4610      	mov	r0, r2
   17d88:	f011 faed 	bl	29366 <atomic_test_bit>
		if (adv &&
   17d8c:	b1f0      	cbz	r0, 17dcc <le_update_private_addr+0x58>
		    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
   17d8e:	210d      	movs	r1, #13
   17d90:	4610      	mov	r0, r2
   17d92:	f011 fae8 	bl	29366 <atomic_test_bit>
		    atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   17d96:	4601      	mov	r1, r0
   17d98:	b9b8      	cbnz	r0, 17dca <le_update_private_addr+0x56>
			id = adv->id;
   17d9a:	7825      	ldrb	r5, [r4, #0]
			bt_le_adv_set_enable_legacy(adv, false);
   17d9c:	4620      	mov	r0, r4
   17d9e:	f011 fc90 	bl	296c2 <bt_le_adv_set_enable_legacy>
	err = bt_id_set_private_addr(id);
   17da2:	4628      	mov	r0, r5
   17da4:	f7ff ffbe 	bl	17d24 <bt_id_set_private_addr>
	if (err) {
   17da8:	b1b0      	cbz	r0, 17dd8 <le_update_private_addr+0x64>
		LOG_WRN("Failed to update RPA address (%d)", err);
   17daa:	466c      	mov	r4, sp
   17dac:	b088      	sub	sp, #32
   17dae:	466a      	mov	r2, sp
   17db0:	4b0c      	ldr	r3, [pc, #48]	; (17de4 <le_update_private_addr+0x70>)
   17db2:	e9c2 3005 	strd	r3, r0, [r2, #20]
   17db6:	2303      	movs	r3, #3
   17db8:	f842 3f10 	str.w	r3, [r2, #16]!
   17dbc:	480a      	ldr	r0, [pc, #40]	; (17de8 <le_update_private_addr+0x74>)
   17dbe:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   17dc2:	f011 faf3 	bl	293ac <z_log_msg_static_create.constprop.0>
   17dc6:	46a5      	mov	sp, r4
		return;
   17dc8:	e004      	b.n	17dd4 <le_update_private_addr+0x60>
	err = bt_id_set_private_addr(id);
   17dca:	2000      	movs	r0, #0
   17dcc:	f7ff ffaa 	bl	17d24 <bt_id_set_private_addr>
	if (err) {
   17dd0:	2800      	cmp	r0, #0
   17dd2:	d1ea      	bne.n	17daa <le_update_private_addr+0x36>
}
   17dd4:	46bd      	mov	sp, r7
   17dd6:	bdb0      	pop	{r4, r5, r7, pc}
		bt_le_adv_set_enable_legacy(adv, true);
   17dd8:	2101      	movs	r1, #1
   17dda:	4620      	mov	r0, r4
   17ddc:	f011 fc71 	bl	296c2 <bt_le_adv_set_enable_legacy>
   17de0:	e7f8      	b.n	17dd4 <le_update_private_addr+0x60>
   17de2:	bf00      	nop
   17de4:	0002eeaa 	.word	0x0002eeaa
   17de8:	0002cb2c 	.word	0x0002cb2c

00017dec <rpa_timeout>:
{
   17dec:	b513      	push	{r0, r1, r4, lr}
	bool adv_enabled = false;
   17dee:	2300      	movs	r3, #0
			bt_le_ext_adv_foreach(adv_is_private_enabled, &adv_enabled);
   17df0:	4810      	ldr	r0, [pc, #64]	; (17e34 <rpa_timeout+0x48>)
	bool adv_enabled = false;
   17df2:	f88d 3007 	strb.w	r3, [sp, #7]
			bt_le_ext_adv_foreach(adv_is_private_enabled, &adv_enabled);
   17df6:	f10d 0107 	add.w	r1, sp, #7
   17dfa:	f000 fb7b 	bl	184f4 <bt_le_ext_adv_foreach>
	return adv_enabled;
   17dfe:	f89d 4007 	ldrb.w	r4, [sp, #7]
	le_rpa_invalidate();
   17e02:	f7ff fd75 	bl	178f0 <le_rpa_invalidate>
	if (!(adv_enabled ||
   17e06:	b124      	cbz	r4, 17e12 <rpa_timeout+0x26>
}
   17e08:	b002      	add	sp, #8
   17e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	le_update_private_addr();
   17e0e:	f7ff bfb1 	b.w	17d74 <le_update_private_addr>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17e12:	4809      	ldr	r0, [pc, #36]	; (17e38 <rpa_timeout+0x4c>)
   17e14:	f011 faa1 	bl	2935a <atomic_get>
	if (!(adv_enabled ||
   17e18:	04c1      	lsls	r1, r0, #19
   17e1a:	d4f5      	bmi.n	17e08 <rpa_timeout+0x1c>
   17e1c:	4806      	ldr	r0, [pc, #24]	; (17e38 <rpa_timeout+0x4c>)
   17e1e:	f011 fa9c 	bl	2935a <atomic_get>
   17e22:	0642      	lsls	r2, r0, #25
   17e24:	d504      	bpl.n	17e30 <rpa_timeout+0x44>
   17e26:	4804      	ldr	r0, [pc, #16]	; (17e38 <rpa_timeout+0x4c>)
   17e28:	f011 fa97 	bl	2935a <atomic_get>
	      (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   17e2c:	05c3      	lsls	r3, r0, #23
   17e2e:	d4eb      	bmi.n	17e08 <rpa_timeout+0x1c>
}
   17e30:	b002      	add	sp, #8
   17e32:	bd10      	pop	{r4, pc}
   17e34:	00029375 	.word	0x00029375
   17e38:	20000464 	.word	0x20000464

00017e3c <bt_id_pending_keys_update>:
   17e3c:	4b0a      	ldr	r3, [pc, #40]	; (17e68 <bt_id_pending_keys_update+0x2c>)
   17e3e:	f3bf 8f5b 	dmb	ish
   17e42:	e853 2f00 	ldrex	r2, [r3]
   17e46:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   17e4a:	e843 1000 	strex	r0, r1, [r3]
   17e4e:	2800      	cmp	r0, #0
   17e50:	d1f7      	bne.n	17e42 <bt_id_pending_keys_update+0x6>
   17e52:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   17e56:	0413      	lsls	r3, r2, #16
   17e58:	d504      	bpl.n	17e64 <bt_id_pending_keys_update+0x28>
			bt_keys_foreach_type(BT_KEYS_IRK, pending_id_update, NULL);
   17e5a:	4904      	ldr	r1, [pc, #16]	; (17e6c <bt_id_pending_keys_update+0x30>)
   17e5c:	2200      	movs	r2, #0
   17e5e:	2002      	movs	r0, #2
   17e60:	f006 bad4 	b.w	1e40c <bt_keys_foreach_type>
}
   17e64:	4770      	bx	lr
   17e66:	bf00      	nop
   17e68:	20000464 	.word	0x20000464
   17e6c:	0002951f 	.word	0x0002951f

00017e70 <bt_id_find_conflict>:
{
   17e70:	b507      	push	{r0, r1, r2, lr}
	struct bt_id_conflict conflict = {
   17e72:	2300      	movs	r3, #0
   17e74:	e9cd 0300 	strd	r0, r3, [sp]
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
   17e78:	4904      	ldr	r1, [pc, #16]	; (17e8c <bt_id_find_conflict+0x1c>)
   17e7a:	466a      	mov	r2, sp
   17e7c:	2002      	movs	r0, #2
   17e7e:	f006 fac5 	bl	1e40c <bt_keys_foreach_type>
}
   17e82:	9801      	ldr	r0, [sp, #4]
   17e84:	b003      	add	sp, #12
   17e86:	f85d fb04 	ldr.w	pc, [sp], #4
   17e8a:	bf00      	nop
   17e8c:	00029425 	.word	0x00029425

00017e90 <bt_id_add>:
{
   17e90:	b410      	push	{r4}
	CHECKIF(keys == NULL) {
   17e92:	4603      	mov	r3, r0
   17e94:	b170      	cbz	r0, 17eb4 <bt_id_add+0x24>
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   17e96:	490a      	ldr	r1, [pc, #40]	; (17ec0 <bt_id_add+0x30>)
   17e98:	f891 4120 	ldrb.w	r4, [r1, #288]	; 0x120
   17e9c:	f891 2121 	ldrb.w	r2, [r1, #289]	; 0x121
   17ea0:	b10c      	cbz	r4, 17ea6 <bt_id_add+0x16>
   17ea2:	4294      	cmp	r4, r2
   17ea4:	d208      	bcs.n	17eb8 <bt_id_add+0x28>
		bt_dev.le.rl_entries++;
   17ea6:	3201      	adds	r2, #1
   17ea8:	f881 2121 	strb.w	r2, [r1, #289]	; 0x121
		keys->state |= BT_KEYS_ID_ADDED;
   17eac:	7a1a      	ldrb	r2, [r3, #8]
   17eae:	f042 0204 	orr.w	r2, r2, #4
   17eb2:	721a      	strb	r2, [r3, #8]
}
   17eb4:	bc10      	pop	{r4}
   17eb6:	4770      	bx	lr
   17eb8:	bc10      	pop	{r4}
   17eba:	f7ff bdc3 	b.w	17a44 <bt_id_add.part.0>
   17ebe:	bf00      	nop
   17ec0:	20000390 	.word	0x20000390

00017ec4 <bt_id_del>:
{
   17ec4:	b410      	push	{r4}
	CHECKIF(keys == NULL) {
   17ec6:	4603      	mov	r3, r0
   17ec8:	b198      	cbz	r0, 17ef2 <bt_id_del+0x2e>
	if (!bt_dev.le.rl_size ||
   17eca:	4c0b      	ldr	r4, [pc, #44]	; (17ef8 <bt_id_del+0x34>)
   17ecc:	f894 1120 	ldrb.w	r1, [r4, #288]	; 0x120
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   17ed0:	f894 2121 	ldrb.w	r2, [r4, #289]	; 0x121
	if (!bt_dev.le.rl_size ||
   17ed4:	b129      	cbz	r1, 17ee2 <bt_id_del+0x1e>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   17ed6:	3101      	adds	r1, #1
	if (!bt_dev.le.rl_size ||
   17ed8:	428a      	cmp	r2, r1
   17eda:	dc03      	bgt.n	17ee4 <bt_id_del+0x20>
}
   17edc:	bc10      	pop	{r4}
   17ede:	f7ff be8f 	b.w	17c00 <bt_id_del.part.0>
		if (bt_dev.le.rl_entries > 0) {
   17ee2:	b112      	cbz	r2, 17eea <bt_id_del+0x26>
			bt_dev.le.rl_entries--;
   17ee4:	3a01      	subs	r2, #1
   17ee6:	f884 2121 	strb.w	r2, [r4, #289]	; 0x121
		keys->state &= ~BT_KEYS_ID_ADDED;
   17eea:	7a1a      	ldrb	r2, [r3, #8]
   17eec:	f022 0204 	bic.w	r2, r2, #4
   17ef0:	721a      	strb	r2, [r3, #8]
}
   17ef2:	bc10      	pop	{r4}
   17ef4:	4770      	bx	lr
   17ef6:	bf00      	nop
   17ef8:	20000390 	.word	0x20000390

00017efc <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   17efc:	b5f0      	push	{r4, r5, r6, r7, lr}
   17efe:	460e      	mov	r6, r1
   17f00:	b087      	sub	sp, #28
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   17f02:	4604      	mov	r4, r0
   17f04:	b930      	cbnz	r0, 17f14 <bt_id_create+0x18>

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   17f06:	4d29      	ldr	r5, [pc, #164]	; (17fac <bt_id_create+0xb0>)
   17f08:	79eb      	ldrb	r3, [r5, #7]
   17f0a:	2b01      	cmp	r3, #1
   17f0c:	d125      	bne.n	17f5a <bt_id_create+0x5e>
		return -ENOMEM;
   17f0e:	f06f 000b 	mvn.w	r0, #11
   17f12:	e018      	b.n	17f46 <bt_id_create+0x4a>
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   17f14:	4926      	ldr	r1, [pc, #152]	; (17fb0 <bt_id_create+0xb4>)
   17f16:	f011 fa15 	bl	29344 <bt_addr_le_eq>
   17f1a:	2800      	cmp	r0, #0
   17f1c:	d1f3      	bne.n	17f06 <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   17f1e:	7823      	ldrb	r3, [r4, #0]
   17f20:	2b01      	cmp	r3, #1
   17f22:	d104      	bne.n	17f2e <bt_id_create+0x32>
   17f24:	79a3      	ldrb	r3, [r4, #6]
   17f26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   17f2a:	2bc0      	cmp	r3, #192	; 0xc0
   17f2c:	d00d      	beq.n	17f4a <bt_id_create+0x4e>
			LOG_ERR("Only static random identity address supported");
   17f2e:	4b21      	ldr	r3, [pc, #132]	; (17fb4 <bt_id_create+0xb8>)
   17f30:	9305      	str	r3, [sp, #20]
   17f32:	4821      	ldr	r0, [pc, #132]	; (17fb8 <bt_id_create+0xbc>)
   17f34:	2302      	movs	r3, #2
   17f36:	aa04      	add	r2, sp, #16
   17f38:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17f3c:	9304      	str	r3, [sp, #16]
   17f3e:	f011 fa35 	bl	293ac <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   17f42:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
   17f46:	b007      	add	sp, #28
   17f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (id_find(addr) >= 0) {
   17f4a:	4620      	mov	r0, r4
   17f4c:	f7ff fc9a 	bl	17884 <id_find>
   17f50:	2800      	cmp	r0, #0
   17f52:	dbd8      	blt.n	17f06 <bt_id_create+0xa>
			return -EALREADY;
   17f54:	f06f 0077 	mvn.w	r0, #119	; 0x77
   17f58:	e7f5      	b.n	17f46 <bt_id_create+0x4a>
   17f5a:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
   17f5e:	f011 f9fc 	bl	2935a <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   17f62:	f010 0001 	ands.w	r0, r0, #1
   17f66:	d114      	bne.n	17f92 <bt_id_create+0x96>
		uint8_t zero_irk[16] = { 0 };
   17f68:	e9cd 0000 	strd	r0, r0, [sp]
   17f6c:	e9cd 0002 	strd	r0, r0, [sp, #8]
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   17f70:	2c00      	cmp	r4, #0
   17f72:	d0e6      	beq.n	17f42 <bt_id_create+0x46>
   17f74:	490e      	ldr	r1, [pc, #56]	; (17fb0 <bt_id_create+0xb4>)
   17f76:	4620      	mov	r0, r4
   17f78:	f011 f9e4 	bl	29344 <bt_addr_le_eq>
   17f7c:	2800      	cmp	r0, #0
   17f7e:	d1e0      	bne.n	17f42 <bt_id_create+0x46>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   17f80:	2e00      	cmp	r6, #0
   17f82:	d0de      	beq.n	17f42 <bt_id_create+0x46>
		    !(irk && memcmp(irk, zero_irk, 16))) {
   17f84:	2210      	movs	r2, #16
   17f86:	4669      	mov	r1, sp
   17f88:	4630      	mov	r0, r6
   17f8a:	f010 ffa6 	bl	28eda <memcmp>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   17f8e:	2800      	cmp	r0, #0
   17f90:	d0d7      	beq.n	17f42 <bt_id_create+0x46>
	new_id = bt_dev.id_count;
   17f92:	79ef      	ldrb	r7, [r5, #7]
	err = id_create(new_id, addr, irk);
   17f94:	4632      	mov	r2, r6
   17f96:	4621      	mov	r1, r4
   17f98:	4638      	mov	r0, r7
   17f9a:	f7ff fcf1 	bl	17980 <id_create>
	if (err) {
   17f9e:	2800      	cmp	r0, #0
   17fa0:	d1d1      	bne.n	17f46 <bt_id_create+0x4a>
		bt_dev.id_count++;
   17fa2:	79eb      	ldrb	r3, [r5, #7]
   17fa4:	3301      	adds	r3, #1
	new_id = bt_dev.id_count;
   17fa6:	4638      	mov	r0, r7
		bt_dev.id_count++;
   17fa8:	71eb      	strb	r3, [r5, #7]
	return new_id;
   17faa:	e7cc      	b.n	17f46 <bt_id_create+0x4a>
   17fac:	20000390 	.word	0x20000390
   17fb0:	0002e38f 	.word	0x0002e38f
   17fb4:	0002eecc 	.word	0x0002eecc
   17fb8:	0002cb2c 	.word	0x0002cb2c

00017fbc <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   17fbc:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   17fbe:	4604      	mov	r4, r0
{
   17fc0:	b088      	sub	sp, #32
	CHECKIF(addr == NULL) {
   17fc2:	b960      	cbnz	r0, 17fde <bt_id_read_public_addr+0x22>
		LOG_WRN("Invalid input parameters");
   17fc4:	4b1a      	ldr	r3, [pc, #104]	; (18030 <bt_id_read_public_addr+0x74>)
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read public address");
   17fc6:	9307      	str	r3, [sp, #28]
   17fc8:	481a      	ldr	r0, [pc, #104]	; (18034 <bt_id_read_public_addr+0x78>)
   17fca:	2302      	movs	r3, #2
   17fcc:	aa06      	add	r2, sp, #24
   17fce:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17fd2:	9306      	str	r3, [sp, #24]
   17fd4:	f011 f9ea 	bl	293ac <z_log_msg_static_create.constprop.0>
		return 0U;
   17fd8:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   17fda:	b008      	add	sp, #32
   17fdc:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   17fde:	aa01      	add	r2, sp, #4
   17fe0:	2100      	movs	r1, #0
   17fe2:	f241 0009 	movw	r0, #4105	; 0x1009
   17fe6:	f7fe fc87 	bl	168f8 <bt_hci_cmd_send_sync>
	if (err) {
   17fea:	4606      	mov	r6, r0
   17fec:	b108      	cbz	r0, 17ff2 <bt_id_read_public_addr+0x36>
		LOG_WRN("Failed to read public address");
   17fee:	4b12      	ldr	r3, [pc, #72]	; (18038 <bt_id_read_public_addr+0x7c>)
   17ff0:	e7e9      	b.n	17fc6 <bt_id_read_public_addr+0xa>
	rp = (void *)rsp->data;
   17ff2:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
   17ff4:	4911      	ldr	r1, [pc, #68]	; (1803c <bt_id_read_public_addr+0x80>)
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   17ff6:	68dd      	ldr	r5, [r3, #12]
   17ff8:	3501      	adds	r5, #1
   17ffa:	2206      	movs	r2, #6
   17ffc:	4628      	mov	r0, r5
   17ffe:	f010 ff6c 	bl	28eda <memcmp>
   18002:	b918      	cbnz	r0, 1800c <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
   18004:	9801      	ldr	r0, [sp, #4]
   18006:	f006 fd4f 	bl	1eaa8 <net_buf_unref>
		return 0U;
   1800a:	e7e5      	b.n	17fd8 <bt_id_read_public_addr+0x1c>
   1800c:	490c      	ldr	r1, [pc, #48]	; (18040 <bt_id_read_public_addr+0x84>)
   1800e:	2206      	movs	r2, #6
   18010:	4628      	mov	r0, r5
   18012:	f010 ff62 	bl	28eda <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   18016:	2800      	cmp	r0, #0
   18018:	d0f4      	beq.n	18004 <bt_id_read_public_addr+0x48>
	memcpy(dst, src, sizeof(*dst));
   1801a:	2206      	movs	r2, #6
   1801c:	4629      	mov	r1, r5
   1801e:	1c60      	adds	r0, r4, #1
   18020:	f010 ff82 	bl	28f28 <memcpy>
	net_buf_unref(rsp);
   18024:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   18026:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
   18028:	f006 fd3e 	bl	1eaa8 <net_buf_unref>
	return 1U;
   1802c:	2001      	movs	r0, #1
   1802e:	e7d4      	b.n	17fda <bt_id_read_public_addr+0x1e>
   18030:	0002eefa 	.word	0x0002eefa
   18034:	0002cb2c 	.word	0x0002cb2c
   18038:	0002ef13 	.word	0x0002ef13
   1803c:	0002e39c 	.word	0x0002e39c
   18040:	0002e396 	.word	0x0002e396

00018044 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   18044:	b510      	push	{r4, lr}
   18046:	b08e      	sub	sp, #56	; 0x38
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   18048:	a802      	add	r0, sp, #8
   1804a:	f7ff ffb7 	bl	17fbc <bt_id_read_public_addr>
   1804e:	4c1e      	ldr	r4, [pc, #120]	; (180c8 <bt_setup_public_id_addr+0x84>)
   18050:	71e0      	strb	r0, [r4, #7]

	if (!bt_dev.id_count) {
   18052:	b348      	cbz	r0, 180a8 <bt_setup_public_id_addr+0x64>
	memset(ir, 0, 16);
   18054:	2210      	movs	r2, #16
   18056:	2100      	movs	r1, #0
   18058:	eb0d 0002 	add.w	r0, sp, r2
   1805c:	f010 ff6f 	bl	28f3e <memset>
	if (!BT_VS_CMD_READ_KEY_ROOTS(bt_dev.vs_commands)) {
   18060:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   18064:	079b      	lsls	r3, r3, #30
   18066:	d510      	bpl.n	1808a <bt_setup_public_id_addr+0x46>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_KEY_HIERARCHY_ROOTS, NULL,
   18068:	aa01      	add	r2, sp, #4
   1806a:	2100      	movs	r1, #0
   1806c:	f64f 400a 	movw	r0, #64522	; 0xfc0a
   18070:	f7fe fc42 	bl	168f8 <bt_hci_cmd_send_sync>
	if (err) {
   18074:	b1d0      	cbz	r0, 180ac <bt_setup_public_id_addr+0x68>
		LOG_WRN("Failed to read identity root");
   18076:	4b15      	ldr	r3, [pc, #84]	; (180cc <bt_setup_public_id_addr+0x88>)
   18078:	930d      	str	r3, [sp, #52]	; 0x34
   1807a:	4815      	ldr	r0, [pc, #84]	; (180d0 <bt_setup_public_id_addr+0x8c>)
   1807c:	2302      	movs	r3, #2
   1807e:	aa0c      	add	r2, sp, #48	; 0x30
   18080:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18084:	930c      	str	r3, [sp, #48]	; 0x30
   18086:	f011 f991 	bl	293ac <z_log_msg_static_create.constprop.0>
	uint8_t ir[16];

	bt_read_identity_root(ir);

	if (!IS_ENABLED(CONFIG_BT_PRIVACY_RANDOMIZE_IR)) {
		if (!bt_smp_irk_get(ir, ir_irk)) {
   1808a:	a908      	add	r1, sp, #32
   1808c:	a804      	add	r0, sp, #16
   1808e:	f012 ff88 	bl	2afa2 <bt_smp_irk_get>
   18092:	b1b8      	cbz	r0, 180c4 <bt_setup_public_id_addr+0x80>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   18094:	480f      	ldr	r0, [pc, #60]	; (180d4 <bt_setup_public_id_addr+0x90>)
   18096:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   1809a:	f011 f9a2 	bl	293e2 <atomic_or.isra.0>
	uint8_t *irk = NULL;
   1809e:	2200      	movs	r2, #0
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
   180a0:	a902      	add	r1, sp, #8
   180a2:	2000      	movs	r0, #0
   180a4:	f7ff fc6c 	bl	17980 <id_create>
}
   180a8:	b00e      	add	sp, #56	; 0x38
   180aa:	bd10      	pop	{r4, pc}
	rp = (void *)rsp->data;
   180ac:	9b01      	ldr	r3, [sp, #4]
	memcpy(ir, rp->ir, 16);
   180ae:	68d9      	ldr	r1, [r3, #12]
   180b0:	2210      	movs	r2, #16
   180b2:	3101      	adds	r1, #1
   180b4:	eb0d 0002 	add.w	r0, sp, r2
   180b8:	f010 ff36 	bl	28f28 <memcpy>
	net_buf_unref(rsp);
   180bc:	9801      	ldr	r0, [sp, #4]
   180be:	f006 fcf3 	bl	1eaa8 <net_buf_unref>
   180c2:	e7e2      	b.n	1808a <bt_setup_public_id_addr+0x46>
			irk = ir_irk;
   180c4:	aa08      	add	r2, sp, #32
   180c6:	e7eb      	b.n	180a0 <bt_setup_public_id_addr+0x5c>
   180c8:	20000390 	.word	0x20000390
   180cc:	0002ef31 	.word	0x0002ef31
   180d0:	0002cb2c 	.word	0x0002cb2c
   180d4:	20000464 	.word	0x20000464

000180d8 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   180d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   180dc:	4b22      	ldr	r3, [pc, #136]	; (18168 <bt_read_static_addr+0x90>)
   180de:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
   180e2:	07db      	lsls	r3, r3, #31
{
   180e4:	b088      	sub	sp, #32
   180e6:	4607      	mov	r7, r0
   180e8:	4688      	mov	r8, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   180ea:	d40e      	bmi.n	1810a <bt_read_static_addr+0x32>
		LOG_WRN("Read Static Addresses command not available");
   180ec:	4b1f      	ldr	r3, [pc, #124]	; (1816c <bt_read_static_addr+0x94>)
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read static addresses");
   180ee:	9307      	str	r3, [sp, #28]
   180f0:	481f      	ldr	r0, [pc, #124]	; (18170 <bt_read_static_addr+0x98>)
   180f2:	2302      	movs	r3, #2
   180f4:	aa06      	add	r2, sp, #24
   180f6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return 0;
   180fa:	2500      	movs	r5, #0
		LOG_WRN("Failed to read static addresses");
   180fc:	9306      	str	r3, [sp, #24]
   180fe:	f011 f955 	bl	293ac <z_log_msg_static_create.constprop.0>
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   18102:	4628      	mov	r0, r5
   18104:	b008      	add	sp, #32
   18106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   1810a:	aa01      	add	r2, sp, #4
   1810c:	2100      	movs	r1, #0
   1810e:	f64f 4009 	movw	r0, #64521	; 0xfc09
   18112:	f7fe fbf1 	bl	168f8 <bt_hci_cmd_send_sync>
	if (err) {
   18116:	4604      	mov	r4, r0
   18118:	b108      	cbz	r0, 1811e <bt_read_static_addr+0x46>
		LOG_WRN("Failed to read static addresses");
   1811a:	4b16      	ldr	r3, [pc, #88]	; (18174 <bt_read_static_addr+0x9c>)
   1811c:	e7e7      	b.n	180ee <bt_read_static_addr+0x16>
	rp = (void *)rsp->data;
   1811e:	9b01      	ldr	r3, [sp, #4]
   18120:	68de      	ldr	r6, [r3, #12]
	cnt = MIN(rp->num_addrs, size);
   18122:	7875      	ldrb	r5, [r6, #1]
   18124:	4545      	cmp	r5, r8
   18126:	bf28      	it	cs
   18128:	4645      	movcs	r5, r8
	for (i = 0; i < cnt; i++) {
   1812a:	3602      	adds	r6, #2
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   1812c:	f04f 0816 	mov.w	r8, #22
	for (i = 0; i < cnt; i++) {
   18130:	42a5      	cmp	r5, r4
   18132:	dc0f      	bgt.n	18154 <bt_read_static_addr+0x7c>
	net_buf_unref(rsp);
   18134:	9801      	ldr	r0, [sp, #4]
   18136:	f006 fcb7 	bl	1eaa8 <net_buf_unref>
	if (!cnt) {
   1813a:	2d00      	cmp	r5, #0
   1813c:	d1e1      	bne.n	18102 <bt_read_static_addr+0x2a>
		LOG_WRN("No static addresses stored in controller");
   1813e:	4b0e      	ldr	r3, [pc, #56]	; (18178 <bt_read_static_addr+0xa0>)
   18140:	9307      	str	r3, [sp, #28]
   18142:	480b      	ldr	r0, [pc, #44]	; (18170 <bt_read_static_addr+0x98>)
   18144:	2302      	movs	r3, #2
   18146:	aa06      	add	r2, sp, #24
   18148:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1814c:	9306      	str	r3, [sp, #24]
   1814e:	f011 f92d 	bl	293ac <z_log_msg_static_create.constprop.0>
   18152:	e7d6      	b.n	18102 <bt_read_static_addr+0x2a>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   18154:	4631      	mov	r1, r6
   18156:	fb08 7004 	mla	r0, r8, r4, r7
   1815a:	2216      	movs	r2, #22
   1815c:	f010 fee4 	bl	28f28 <memcpy>
	for (i = 0; i < cnt; i++) {
   18160:	3401      	adds	r4, #1
   18162:	3616      	adds	r6, #22
   18164:	e7e4      	b.n	18130 <bt_read_static_addr+0x58>
   18166:	bf00      	nop
   18168:	20000390 	.word	0x20000390
   1816c:	0002ef4e 	.word	0x0002ef4e
   18170:	0002cb2c 	.word	0x0002cb2c
   18174:	0002ef7a 	.word	0x0002ef7a
   18178:	0002ef9a 	.word	0x0002ef9a

0001817c <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   1817c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   18180:	4e23      	ldr	r6, [pc, #140]	; (18210 <bt_setup_random_id_addr+0x94>)
   18182:	79f4      	ldrb	r4, [r6, #7]
{
   18184:	b08c      	sub	sp, #48	; 0x30
	if (!bt_dev.id_count) {
   18186:	b92c      	cbnz	r4, 18194 <bt_setup_random_id_addr+0x18>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   18188:	2101      	movs	r1, #1
   1818a:	a806      	add	r0, sp, #24
   1818c:	f7ff ffa4 	bl	180d8 <bt_read_static_addr>
   18190:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
   18192:	bb90      	cbnz	r0, 181fa <bt_setup_random_id_addr+0x7e>
   18194:	481f      	ldr	r0, [pc, #124]	; (18214 <bt_setup_random_id_addr+0x98>)
   18196:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   1819a:	f011 f922 	bl	293e2 <atomic_or.isra.0>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   1819e:	2100      	movs	r1, #0
   181a0:	4608      	mov	r0, r1
}
   181a2:	b00c      	add	sp, #48	; 0x30
   181a4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_id_create(NULL, NULL);
   181a8:	f7ff bea8 	b.w	17efc <bt_id_create>
					if (!bt_smp_irk_get(addrs[i].ir, ir_irk)) {
   181ac:	fb08 fa05 	mul.w	sl, r8, r5
   181b0:	f10a 0006 	add.w	r0, sl, #6
   181b4:	ab06      	add	r3, sp, #24
   181b6:	a902      	add	r1, sp, #8
   181b8:	4418      	add	r0, r3
   181ba:	f012 fef2 	bl	2afa2 <bt_smp_irk_get>
   181be:	b1d0      	cbz	r0, 181f6 <bt_setup_random_id_addr+0x7a>
   181c0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   181c4:	4648      	mov	r0, r9
   181c6:	f011 f90c 	bl	293e2 <atomic_or.isra.0>
				uint8_t *irk = NULL;
   181ca:	2700      	movs	r7, #0
   181cc:	ab06      	add	r3, sp, #24
   181ce:	eb03 010a 	add.w	r1, r3, sl
   181d2:	2206      	movs	r2, #6
   181d4:	f10d 0001 	add.w	r0, sp, #1
   181d8:	f010 fea6 	bl	28f28 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   181dc:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   181de:	463a      	mov	r2, r7
   181e0:	4669      	mov	r1, sp
   181e2:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
   181e4:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   181e8:	f7ff fbca 	bl	17980 <id_create>
				if (err) {
   181ec:	3401      	adds	r4, #1
   181ee:	b140      	cbz	r0, 18202 <bt_setup_random_id_addr+0x86>
}
   181f0:	b00c      	add	sp, #48	; 0x30
   181f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						irk = ir_irk;
   181f6:	af02      	add	r7, sp, #8
   181f8:	e7e8      	b.n	181cc <bt_setup_random_id_addr+0x50>
   181fa:	f04f 0816 	mov.w	r8, #22
   181fe:	f106 09d4 	add.w	r9, r6, #212	; 0xd4
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   18202:	79f3      	ldrb	r3, [r6, #7]
   18204:	b2e5      	uxtb	r5, r4
   18206:	42ab      	cmp	r3, r5
   18208:	d8d0      	bhi.n	181ac <bt_setup_random_id_addr+0x30>
			return 0;
   1820a:	2000      	movs	r0, #0
   1820c:	e7f0      	b.n	181f0 <bt_setup_random_id_addr+0x74>
   1820e:	bf00      	nop
   18210:	20000390 	.word	0x20000390
   18214:	20000464 	.word	0x20000464

00018218 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   18218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1821c:	461d      	mov	r5, r3
   1821e:	460f      	mov	r7, r1
   18220:	4690      	mov	r8, r2
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
   18222:	4603      	mov	r3, r0
   18224:	2800      	cmp	r0, #0
   18226:	d05e      	beq.n	182e6 <bt_id_set_adv_own_addr+0xce>
   18228:	2d00      	cmp	r5, #0
   1822a:	d05c      	beq.n	182e6 <bt_id_set_adv_own_addr+0xce>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   1822c:	07ca      	lsls	r2, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
   1822e:	7806      	ldrb	r6, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   18230:	d542      	bpl.n	182b8 <bt_id_set_adv_own_addr+0xa0>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   18232:	f1b8 0f00 	cmp.w	r8, #0
   18236:	d118      	bne.n	1826a <bt_id_set_adv_own_addr+0x52>
		    !BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
			return -ENOTSUP;
		}

		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   18238:	074c      	lsls	r4, r1, #29
   1823a:	d526      	bpl.n	1828a <bt_id_set_adv_own_addr+0x72>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   1823c:	492d      	ldr	r1, [pc, #180]	; (182f4 <bt_id_set_adv_own_addr+0xdc>)
   1823e:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
   18242:	5c8c      	ldrb	r4, [r1, r2]
   18244:	2c01      	cmp	r4, #1
   18246:	d125      	bne.n	18294 <bt_id_set_adv_own_addr+0x7c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   18248:	4c2a      	ldr	r4, [pc, #168]	; (182f4 <bt_id_set_adv_own_addr+0xdc>)
   1824a:	2107      	movs	r1, #7
   1824c:	2201      	movs	r2, #1
   1824e:	fb11 2106 	smlabb	r1, r1, r6, r2
   18252:	4421      	add	r1, r4
   18254:	4618      	mov	r0, r3
   18256:	f011 f94f 	bl	294f8 <bt_id_set_adv_random_addr>
				if (err) {
   1825a:	b9a0      	cbnz	r0, 18286 <bt_id_set_adv_own_addr+0x6e>
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   1825c:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
   18260:	5da4      	ldrb	r4, [r4, r6]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   18262:	f1b8 0f00 	cmp.w	r8, #0
   18266:	d015      	beq.n	18294 <bt_id_set_adv_own_addr+0x7c>
   18268:	e021      	b.n	182ae <bt_id_set_adv_own_addr+0x96>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   1826a:	f011 0420 	ands.w	r4, r1, #32
   1826e:	d004      	beq.n	1827a <bt_id_set_adv_own_addr+0x62>
		    !BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   18270:	4a20      	ldr	r2, [pc, #128]	; (182f4 <bt_id_set_adv_own_addr+0xdc>)
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   18272:	f892 20d8 	ldrb.w	r2, [r2, #216]	; 0xd8
   18276:	0650      	lsls	r0, r2, #25
   18278:	d538      	bpl.n	182ec <bt_id_set_adv_own_addr+0xd4>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   1827a:	0779      	lsls	r1, r7, #29
   1827c:	d411      	bmi.n	182a2 <bt_id_set_adv_own_addr+0x8a>
			err = bt_id_set_adv_private_addr(adv);
   1827e:	4618      	mov	r0, r3
   18280:	f011 f942 	bl	29508 <bt_id_set_adv_private_addr>
			if (err) {
   18284:	b148      	cbz	r0, 1829a <bt_id_set_adv_own_addr+0x82>
			return err;
		}
	}

	return 0;
}
   18286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = bt_id_set_adv_private_addr(adv);
   1828a:	f011 f93d 	bl	29508 <bt_id_set_adv_private_addr>
			if (err) {
   1828e:	2800      	cmp	r0, #0
   18290:	d1f9      	bne.n	18286 <bt_id_set_adv_own_addr+0x6e>
{
   18292:	2401      	movs	r4, #1
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   18294:	702c      	strb	r4, [r5, #0]
	return 0;
   18296:	2000      	movs	r0, #0
   18298:	e7f5      	b.n	18286 <bt_id_set_adv_own_addr+0x6e>
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   1829a:	2c00      	cmp	r4, #0
   1829c:	d0f9      	beq.n	18292 <bt_id_set_adv_own_addr+0x7a>
   1829e:	2403      	movs	r4, #3
   182a0:	e7f8      	b.n	18294 <bt_id_set_adv_own_addr+0x7c>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   182a2:	4914      	ldr	r1, [pc, #80]	; (182f4 <bt_id_set_adv_own_addr+0xdc>)
   182a4:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
   182a8:	5c8c      	ldrb	r4, [r1, r2]
   182aa:	2c01      	cmp	r4, #1
   182ac:	d0cc      	beq.n	18248 <bt_id_set_adv_own_addr+0x30>
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   182ae:	06ba      	lsls	r2, r7, #26
   182b0:	d5f0      	bpl.n	18294 <bt_id_set_adv_own_addr+0x7c>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   182b2:	f044 0402 	orr.w	r4, r4, #2
   182b6:	e7ed      	b.n	18294 <bt_id_set_adv_own_addr+0x7c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   182b8:	074b      	lsls	r3, r1, #29
   182ba:	d510      	bpl.n	182de <bt_id_set_adv_own_addr+0xc6>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   182bc:	4f0d      	ldr	r7, [pc, #52]	; (182f4 <bt_id_set_adv_own_addr+0xdc>)
   182be:	ebc6 08c6 	rsb	r8, r6, r6, lsl #3
   182c2:	f817 4008 	ldrb.w	r4, [r7, r8]
   182c6:	2c01      	cmp	r4, #1
   182c8:	d1e4      	bne.n	18294 <bt_id_set_adv_own_addr+0x7c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   182ca:	2107      	movs	r1, #7
   182cc:	fb11 4106 	smlabb	r1, r1, r6, r4
   182d0:	4439      	add	r1, r7
   182d2:	f011 f911 	bl	294f8 <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
   182d6:	f817 3008 	ldrb.w	r3, [r7, r8]
   182da:	702b      	strb	r3, [r5, #0]
		if (err) {
   182dc:	e7d3      	b.n	18286 <bt_id_set_adv_own_addr+0x6e>
			err = bt_id_set_adv_private_addr(adv);
   182de:	f011 f913 	bl	29508 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   182e2:	2301      	movs	r3, #1
   182e4:	e7f9      	b.n	182da <bt_id_set_adv_own_addr+0xc2>
		return -EINVAL;
   182e6:	f06f 0015 	mvn.w	r0, #21
   182ea:	e7cc      	b.n	18286 <bt_id_set_adv_own_addr+0x6e>
			return -ENOTSUP;
   182ec:	f06f 0085 	mvn.w	r0, #133	; 0x85
   182f0:	e7c9      	b.n	18286 <bt_id_set_adv_own_addr+0x6e>
   182f2:	bf00      	nop
   182f4:	20000390 	.word	0x20000390

000182f8 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   182f8:	b508      	push	{r3, lr}
			return err;
		}
	}

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
   182fa:	4903      	ldr	r1, [pc, #12]	; (18308 <bt_id_init+0x10>)
   182fc:	4803      	ldr	r0, [pc, #12]	; (1830c <bt_id_init+0x14>)
   182fe:	f013 feaa 	bl	2c056 <k_work_init_delayable>
#endif

	return 0;
}
   18302:	2000      	movs	r0, #0
   18304:	bd08      	pop	{r3, pc}
   18306:	bf00      	nop
   18308:	00017ded 	.word	0x00017ded
   1830c:	20000508 	.word	0x20000508

00018310 <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   18310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18314:	b089      	sub	sp, #36	; 0x24
   18316:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   18318:	2120      	movs	r1, #32
{
   1831a:	9000      	str	r0, [sp, #0]
   1831c:	4692      	mov	sl, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1831e:	f7fe fab1 	bl	16884 <bt_hci_cmd_create>
	if (!buf) {
   18322:	4605      	mov	r5, r0
   18324:	2800      	cmp	r0, #0
   18326:	d05b      	beq.n	183e0 <hci_set_ad+0xd0>
   18328:	2120      	movs	r1, #32
   1832a:	300c      	adds	r0, #12
   1832c:	f013 f80e 	bl	2b34c <net_buf_simple_add>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));
   18330:	2220      	movs	r2, #32
   18332:	2100      	movs	r1, #0
   18334:	4681      	mov	r9, r0
   18336:	f010 fe02 	bl	28f3e <memset>

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   1833a:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   1833e:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
	uint8_t set_data_len = 0;
   18342:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   18344:	f8d4 8000 	ldr.w	r8, [r4]
   18348:	2300      	movs	r3, #0
   1834a:	6862      	ldr	r2, [r4, #4]
   1834c:	4293      	cmp	r3, r2
   1834e:	d30c      	bcc.n	1836a <hci_set_ad+0x5a>
	for (size_t i = 0; i < ad_len; i++) {
   18350:	3408      	adds	r4, #8
   18352:	45a2      	cmp	sl, r4
   18354:	d1f6      	bne.n	18344 <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   18356:	9800      	ldr	r0, [sp, #0]
	*data_len = set_data_len;
   18358:	f889 6000 	strb.w	r6, [r9]
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1835c:	2200      	movs	r2, #0
   1835e:	4629      	mov	r1, r5
}
   18360:	b009      	add	sp, #36	; 0x24
   18362:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   18366:	f7fe bac7 	b.w	168f8 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   1836a:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   1836e:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   18372:	1cb0      	adds	r0, r6, #2
   18374:	1811      	adds	r1, r2, r0
   18376:	291f      	cmp	r1, #31
   18378:	d91b      	bls.n	183b2 <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1837a:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   1837e:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   18382:	d101      	bne.n	18388 <hci_set_ad+0x78>
   18384:	2a00      	cmp	r2, #0
   18386:	dc12      	bgt.n	183ae <hci_set_ad+0x9e>
					LOG_ERR("Too big advertising data");
   18388:	4b17      	ldr	r3, [pc, #92]	; (183e8 <hci_set_ad+0xd8>)
   1838a:	9307      	str	r3, [sp, #28]
   1838c:	2302      	movs	r3, #2
   1838e:	9306      	str	r3, [sp, #24]
   18390:	4816      	ldr	r0, [pc, #88]	; (183ec <hci_set_ad+0xdc>)
   18392:	2300      	movs	r3, #0
   18394:	aa06      	add	r2, sp, #24
   18396:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1839a:	f7fb fc13 	bl	13bc4 <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
   1839e:	4628      	mov	r0, r5
   183a0:	f006 fb82 	bl	1eaa8 <net_buf_unref>
					return -EINVAL;
   183a4:	f06f 0015 	mvn.w	r0, #21
}
   183a8:	b009      	add	sp, #36	; 0x24
   183aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   183ae:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   183b2:	b2d7      	uxtb	r7, r2
   183b4:	1c79      	adds	r1, r7, #1
   183b6:	f80b 1006 	strb.w	r1, [fp, r6]
   183ba:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   183bc:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   183be:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   183c2:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   183c6:	f8d8 1004 	ldr.w	r1, [r8, #4]
   183ca:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   183cc:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   183ce:	f010 fdab 	bl	28f28 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   183d2:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   183d4:	4437      	add	r7, r6
   183d6:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
   183d8:	3301      	adds	r3, #1
   183da:	f108 0808 	add.w	r8, r8, #8
   183de:	e7b4      	b.n	1834a <hci_set_ad+0x3a>
		return -ENOBUFS;
   183e0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   183e4:	e7e0      	b.n	183a8 <hci_set_ad+0x98>
   183e6:	bf00      	nop
   183e8:	0002efc9 	.word	0x0002efc9
   183ec:	0002caec 	.word	0x0002caec

000183f0 <adv_is_directed>:

	return channel_map;
}

static inline bool adv_is_directed(const struct bt_le_ext_adv *adv)
{
   183f0:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   183f2:	4904      	ldr	r1, [pc, #16]	; (18404 <adv_is_directed+0x14>)
   183f4:	2207      	movs	r2, #7
   183f6:	3009      	adds	r0, #9
   183f8:	f010 fd6f 	bl	28eda <memcmp>
	/* The advertiser is assumed to be directed when the peer address has
	 * been set.
	 */
	return !bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY);
}
   183fc:	3800      	subs	r0, #0
   183fe:	bf18      	it	ne
   18400:	2001      	movne	r0, #1
   18402:	bd08      	pop	{r3, pc}
   18404:	0002e38f 	.word	0x0002e38f

00018408 <le_adv_start_add_conn>:

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   18408:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   1840a:	4b15      	ldr	r3, [pc, #84]	; (18460 <le_adv_start_add_conn+0x58>)
   1840c:	7802      	ldrb	r2, [r0, #0]
   1840e:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
{
   18412:	4604      	mov	r4, r0
   18414:	460d      	mov	r5, r1

	if (!adv_is_directed(adv)) {
   18416:	f7ff ffeb 	bl	183f0 <adv_is_directed>
   1841a:	4603      	mov	r3, r0
   1841c:	7820      	ldrb	r0, [r4, #0]
   1841e:	b96b      	cbnz	r3, 1843c <le_adv_start_add_conn+0x34>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   18420:	4910      	ldr	r1, [pc, #64]	; (18464 <le_adv_start_add_conn+0x5c>)
   18422:	f001 f901 	bl	19628 <bt_conn_add_le>
		if (!conn) {
   18426:	4604      	mov	r4, r0
   18428:	b910      	cbnz	r0, 18430 <le_adv_start_add_conn+0x28>
			return -ENOMEM;
   1842a:	f06f 000b 	mvn.w	r0, #11
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
   1842e:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   18430:	2104      	movs	r1, #4
   18432:	f000 fefb 	bl	1922c <bt_conn_set_state>
		*out_conn = conn;
   18436:	602c      	str	r4, [r5, #0]
		return 0;
   18438:	2000      	movs	r0, #0
   1843a:	e7f8      	b.n	1842e <le_adv_start_add_conn+0x26>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   1843c:	f104 0609 	add.w	r6, r4, #9
   18440:	4631      	mov	r1, r6
   18442:	f001 f927 	bl	19694 <bt_conn_exists_le>
   18446:	b940      	cbnz	r0, 1845a <le_adv_start_add_conn+0x52>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   18448:	7820      	ldrb	r0, [r4, #0]
   1844a:	4631      	mov	r1, r6
   1844c:	f001 f8ec 	bl	19628 <bt_conn_add_le>
	if (!conn) {
   18450:	4604      	mov	r4, r0
   18452:	2800      	cmp	r0, #0
   18454:	d0e9      	beq.n	1842a <le_adv_start_add_conn+0x22>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   18456:	2105      	movs	r1, #5
   18458:	e7eb      	b.n	18432 <le_adv_start_add_conn+0x2a>
		return -EINVAL;
   1845a:	f06f 0015 	mvn.w	r0, #21
   1845e:	e7e6      	b.n	1842e <le_adv_start_add_conn+0x26>
   18460:	20000390 	.word	0x20000390
   18464:	0002e388 	.word	0x0002e388

00018468 <valid_adv_param>:
{
   18468:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   1846a:	6843      	ldr	r3, [r0, #4]
{
   1846c:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   1846e:	0558      	lsls	r0, r3, #21
   18470:	d501      	bpl.n	18476 <valid_adv_param+0xe>
		return false;
   18472:	2000      	movs	r0, #0
}
   18474:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   18476:	6922      	ldr	r2, [r4, #16]
   18478:	b12a      	cbz	r2, 18486 <valid_adv_param+0x1e>
   1847a:	07d9      	lsls	r1, r3, #31
   1847c:	d5f9      	bpl.n	18472 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_USE_IDENTITY) &&
   1847e:	f003 0324 	and.w	r3, r3, #36	; 0x24
   18482:	2b24      	cmp	r3, #36	; 0x24
   18484:	d0f5      	beq.n	18472 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   18486:	4d19      	ldr	r5, [pc, #100]	; (184ec <valid_adv_param+0x84>)
   18488:	7820      	ldrb	r0, [r4, #0]
   1848a:	79eb      	ldrb	r3, [r5, #7]
   1848c:	4283      	cmp	r3, r0
   1848e:	d9f0      	bls.n	18472 <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   18490:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   18494:	4916      	ldr	r1, [pc, #88]	; (184f0 <valid_adv_param+0x88>)
   18496:	2207      	movs	r2, #7
   18498:	4428      	add	r0, r5
   1849a:	f010 fd1e 	bl	28eda <memcmp>
	if (param->id >= bt_dev.id_count ||
   1849e:	2800      	cmp	r0, #0
   184a0:	d0e7      	beq.n	18472 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   184a2:	6860      	ldr	r0, [r4, #4]
   184a4:	07c2      	lsls	r2, r0, #31
   184a6:	d406      	bmi.n	184b6 <valid_adv_param+0x4e>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   184a8:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
   184ac:	2b08      	cmp	r3, #8
   184ae:	d802      	bhi.n	184b6 <valid_adv_param+0x4e>
   184b0:	68a3      	ldr	r3, [r4, #8]
   184b2:	2b9f      	cmp	r3, #159	; 0x9f
   184b4:	d9dd      	bls.n	18472 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   184b6:	f010 0f30 	tst.w	r0, #48	; 0x30
   184ba:	d002      	beq.n	184c2 <valid_adv_param+0x5a>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   184bc:	6923      	ldr	r3, [r4, #16]
   184be:	2b00      	cmp	r3, #0
   184c0:	d0d7      	beq.n	18472 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   184c2:	06c3      	lsls	r3, r0, #27
   184c4:	d401      	bmi.n	184ca <valid_adv_param+0x62>
   184c6:	6923      	ldr	r3, [r4, #16]
   184c8:	b943      	cbnz	r3, 184dc <valid_adv_param+0x74>
		if (param->interval_min > param->interval_max ||
   184ca:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   184ce:	429a      	cmp	r2, r3
   184d0:	d8cf      	bhi.n	18472 <valid_adv_param+0xa>
   184d2:	2a1f      	cmp	r2, #31
   184d4:	d9cd      	bls.n	18472 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   184d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   184da:	d8ca      	bhi.n	18472 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   184dc:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   184e0:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   184e4:	bf18      	it	ne
   184e6:	2001      	movne	r0, #1
   184e8:	e7c4      	b.n	18474 <valid_adv_param+0xc>
   184ea:	bf00      	nop
   184ec:	20000390 	.word	0x20000390
   184f0:	0002e38f 	.word	0x0002e38f

000184f4 <bt_le_ext_adv_foreach>:
{
   184f4:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   184f6:	4801      	ldr	r0, [pc, #4]	; (184fc <bt_le_ext_adv_foreach+0x8>)
   184f8:	4718      	bx	r3
   184fa:	bf00      	nop
   184fc:	200003a8 	.word	0x200003a8

00018500 <bt_le_adv_lookup_legacy>:
}
   18500:	4800      	ldr	r0, [pc, #0]	; (18504 <bt_le_adv_lookup_legacy+0x4>)
   18502:	4770      	bx	lr
   18504:	200003a8 	.word	0x200003a8

00018508 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   18508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1850c:	b093      	sub	sp, #76	; 0x4c
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   1850e:	f8d1 a010 	ldr.w	sl, [r1, #16]
{
   18512:	9305      	str	r3, [sp, #20]
	struct bt_conn *conn = NULL;
   18514:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
   18516:	ebba 0403 	subs.w	r4, sl, r3
{
   1851a:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1851c:	4899      	ldr	r0, [pc, #612]	; (18784 <bt_le_adv_start_legacy+0x27c>)
	struct bt_conn *conn = NULL;
   1851e:	9307      	str	r3, [sp, #28]
	bool dir_adv = (param->peer != NULL), scannable = false;
   18520:	bf18      	it	ne
   18522:	2401      	movne	r4, #1
   18524:	f011 f81a 	bl	2955c <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   18528:	0743      	lsls	r3, r0, #29
{
   1852a:	460d      	mov	r5, r1
   1852c:	4693      	mov	fp, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1852e:	f140 811f 	bpl.w	18770 <bt_le_adv_start_legacy+0x268>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   18532:	4608      	mov	r0, r1
   18534:	f7ff ff98 	bl	18468 <valid_adv_param>
   18538:	b928      	cbnz	r0, 18546 <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   1853a:	f06f 0415 	mvn.w	r4, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   1853e:	4620      	mov	r0, r4
   18540:	b013      	add	sp, #76	; 0x4c
   18542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   18546:	4628      	mov	r0, r5
   18548:	f010 ffe5 	bl	29516 <bt_id_adv_random_addr_check>
   1854c:	4681      	mov	r9, r0
   1854e:	2800      	cmp	r0, #0
   18550:	d0f3      	beq.n	1853a <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   18552:	f106 0810 	add.w	r8, r6, #16
   18556:	4640      	mov	r0, r8
   18558:	f011 f800 	bl	2955c <atomic_get>
   1855c:	0607      	lsls	r7, r0, #24
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1855e:	f3c0 11c0 	ubfx	r1, r0, #7, #1
   18562:	f100 8108 	bmi.w	18776 <bt_le_adv_start_legacy+0x26e>
	(void)memset(&set_param, 0, sizeof(set_param));
   18566:	220f      	movs	r2, #15
   18568:	a808      	add	r0, sp, #32
   1856a:	f010 fce8 	bl	28f3e <memset>
	set_param.channel_map  = get_adv_channel_map(param->options);
   1856e:	6869      	ldr	r1, [r5, #4]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   18570:	68ab      	ldr	r3, [r5, #8]
   18572:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.channel_map  = get_adv_channel_map(param->options);
   18576:	4608      	mov	r0, r1
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   18578:	68eb      	ldr	r3, [r5, #12]
   1857a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   1857e:	f010 ffde 	bl	2953e <get_adv_channel_map>
	} else if ((options & BT_LE_ADV_OPT_FILTER_SCAN_REQ) &&
   18582:	f001 03c0 	and.w	r3, r1, #192	; 0xc0
   18586:	2bc0      	cmp	r3, #192	; 0xc0
	set_param.channel_map  = get_adv_channel_map(param->options);
   18588:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	} else if ((options & BT_LE_ADV_OPT_FILTER_SCAN_REQ) &&
   1858c:	d038      	beq.n	18600 <bt_le_adv_start_legacy+0xf8>
	} else if (options & BT_LE_ADV_OPT_FILTER_SCAN_REQ) {
   1858e:	0648      	lsls	r0, r1, #25
   18590:	d438      	bmi.n	18604 <bt_le_adv_start_legacy+0xfc>
	} else if (options & BT_LE_ADV_OPT_FILTER_CONN) {
   18592:	f3c1 11c0 	ubfx	r1, r1, #7, #1
   18596:	0049      	lsls	r1, r1, #1
	if (adv->id != param->id) {
   18598:	7832      	ldrb	r2, [r6, #0]
   1859a:	782b      	ldrb	r3, [r5, #0]
	set_param.filter_policy = get_filter_policy(param->options);
   1859c:	f88d 102e 	strb.w	r1, [sp, #46]	; 0x2e
	if (adv->id != param->id) {
   185a0:	429a      	cmp	r2, r3
   185a2:	d004      	beq.n	185ae <bt_le_adv_start_legacy+0xa6>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   185a4:	4877      	ldr	r0, [pc, #476]	; (18784 <bt_le_adv_start_legacy+0x27c>)
   185a6:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   185aa:	f010 ffdd 	bl	29568 <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   185ae:	4a76      	ldr	r2, [pc, #472]	; (18788 <bt_le_adv_start_legacy+0x280>)
	adv->id = param->id;
   185b0:	782b      	ldrb	r3, [r5, #0]
   185b2:	7033      	strb	r3, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
   185b4:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   185b8:	6869      	ldr	r1, [r5, #4]
   185ba:	4622      	mov	r2, r4
   185bc:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   185c0:	4630      	mov	r0, r6
   185c2:	f7ff fe29 	bl	18218 <bt_id_set_adv_own_addr>
	if (err) {
   185c6:	4604      	mov	r4, r0
   185c8:	2800      	cmp	r0, #0
   185ca:	d1b8      	bne.n	1853e <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   185cc:	f106 0009 	add.w	r0, r6, #9
	memcpy(dst, src, sizeof(*dst));
   185d0:	2207      	movs	r2, #7
	if (dir_adv) {
   185d2:	f1ba 0f00 	cmp.w	sl, #0
   185d6:	d017      	beq.n	18608 <bt_le_adv_start_legacy+0x100>
   185d8:	6929      	ldr	r1, [r5, #16]
   185da:	f010 fca5 	bl	28f28 <memcpy>
	name_type = get_adv_name_type_param(param);
   185de:	4628      	mov	r0, r5
   185e0:	f011 f85f 	bl	296a2 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   185e4:	686b      	ldr	r3, [r5, #4]
   185e6:	07d9      	lsls	r1, r3, #31
	name_type = get_adv_name_type_param(param);
   185e8:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   185ea:	d41a      	bmi.n	18622 <bt_le_adv_start_legacy+0x11a>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   185ec:	059b      	lsls	r3, r3, #22
   185ee:	d403      	bmi.n	185f8 <bt_le_adv_start_legacy+0xf0>
   185f0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   185f2:	b90b      	cbnz	r3, 185f8 <bt_le_adv_start_legacy+0xf0>
   185f4:	2f02      	cmp	r7, #2
   185f6:	d15e      	bne.n	186b6 <bt_le_adv_start_legacy+0x1ae>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   185f8:	2302      	movs	r3, #2
   185fa:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   185fe:	e01e      	b.n	1863e <bt_le_adv_start_legacy+0x136>
		return BT_LE_ADV_FP_FILTER_BOTH;
   18600:	2103      	movs	r1, #3
   18602:	e7c9      	b.n	18598 <bt_le_adv_start_legacy+0x90>
		return BT_LE_ADV_FP_FILTER_SCAN_REQ;
   18604:	2101      	movs	r1, #1
   18606:	e7c7      	b.n	18598 <bt_le_adv_start_legacy+0x90>
   18608:	4960      	ldr	r1, [pc, #384]	; (1878c <bt_le_adv_start_legacy+0x284>)
   1860a:	f010 fc8d 	bl	28f28 <memcpy>
	name_type = get_adv_name_type_param(param);
   1860e:	4628      	mov	r0, r5
   18610:	f011 f847 	bl	296a2 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   18614:	686b      	ldr	r3, [r5, #4]
   18616:	07da      	lsls	r2, r3, #31
	name_type = get_adv_name_type_param(param);
   18618:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   1861a:	d5e7      	bpl.n	185ec <bt_le_adv_start_legacy+0xe4>
			set_param.type = BT_HCI_ADV_IND;
   1861c:	f88d a024 	strb.w	sl, [sp, #36]	; 0x24
   18620:	e00d      	b.n	1863e <bt_le_adv_start_legacy+0x136>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   18622:	f013 0f10 	tst.w	r3, #16
   18626:	bf0c      	ite	eq
   18628:	2301      	moveq	r3, #1
   1862a:	2304      	movne	r3, #4
   1862c:	6929      	ldr	r1, [r5, #16]
   1862e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   18632:	2207      	movs	r2, #7
   18634:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   18638:	f010 fc76 	bl	28f28 <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   1863c:	46a1      	mov	r9, r4
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   1863e:	210f      	movs	r1, #15
   18640:	f242 0006 	movw	r0, #8198	; 0x2006
   18644:	f7fe f91e 	bl	16884 <bt_hci_cmd_create>
	if (!buf) {
   18648:	4604      	mov	r4, r0
   1864a:	2800      	cmp	r0, #0
   1864c:	f000 8096 	beq.w	1877c <bt_le_adv_start_legacy+0x274>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   18650:	220f      	movs	r2, #15
   18652:	a908      	add	r1, sp, #32
   18654:	300c      	adds	r0, #12
   18656:	f012 fe7f 	bl	2b358 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   1865a:	4621      	mov	r1, r4
   1865c:	2200      	movs	r2, #0
   1865e:	f242 0006 	movw	r0, #8198	; 0x2006
   18662:	f7fe f949 	bl	168f8 <bt_hci_cmd_send_sync>
	if (err) {
   18666:	4604      	mov	r4, r0
   18668:	2800      	cmp	r0, #0
   1866a:	f47f af68 	bne.w	1853e <bt_le_adv_start_legacy+0x36>
	if (!dir_adv) {
   1866e:	f1ba 0f00 	cmp.w	sl, #0
   18672:	d026      	beq.n	186c2 <bt_le_adv_start_legacy+0x1ba>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   18674:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   18676:	07dc      	lsls	r4, r3, #31
   18678:	d431      	bmi.n	186de <bt_le_adv_start_legacy+0x1d6>
	return bt_le_adv_set_enable_legacy(adv, enable);
   1867a:	2101      	movs	r1, #1
   1867c:	4630      	mov	r0, r6
   1867e:	f011 f820 	bl	296c2 <bt_le_adv_set_enable_legacy>
	if (err) {
   18682:	4604      	mov	r4, r0
   18684:	2800      	cmp	r0, #0
   18686:	d06b      	beq.n	18760 <bt_le_adv_start_legacy+0x258>
		LOG_ERR("Failed to start advertiser");
   18688:	4b41      	ldr	r3, [pc, #260]	; (18790 <bt_le_adv_start_legacy+0x288>)
   1868a:	9311      	str	r3, [sp, #68]	; 0x44
   1868c:	2302      	movs	r3, #2
   1868e:	9310      	str	r3, [sp, #64]	; 0x40
   18690:	4840      	ldr	r0, [pc, #256]	; (18794 <bt_le_adv_start_legacy+0x28c>)
   18692:	2300      	movs	r3, #0
   18694:	aa10      	add	r2, sp, #64	; 0x40
   18696:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1869a:	f7fb fa93 	bl	13bc4 <z_impl_z_log_msg_static_create>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   1869e:	9d07      	ldr	r5, [sp, #28]
   186a0:	2d00      	cmp	r5, #0
   186a2:	f43f af4c 	beq.w	1853e <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   186a6:	4628      	mov	r0, r5
   186a8:	2100      	movs	r1, #0
   186aa:	f000 fdbf 	bl	1922c <bt_conn_set_state>
			bt_conn_unref(conn);
   186ae:	4628      	mov	r0, r5
   186b0:	f011 f8a9 	bl	29806 <bt_conn_unref>
   186b4:	e743      	b.n	1853e <bt_le_adv_start_legacy+0x36>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   186b6:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   186b8:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   186bc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   186c0:	e7bd      	b.n	1863e <bt_le_adv_start_legacy+0x136>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   186c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   186c4:	9300      	str	r3, [sp, #0]
   186c6:	e9cd 9701 	strd	r9, r7, [sp, #4]
   186ca:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   186cc:	9a05      	ldr	r2, [sp, #20]
   186ce:	4659      	mov	r1, fp
   186d0:	4630      	mov	r0, r6
   186d2:	f010 ff6f 	bl	295b4 <le_adv_update.constprop.0>
		if (err) {
   186d6:	4604      	mov	r4, r0
   186d8:	2800      	cmp	r0, #0
   186da:	d0cb      	beq.n	18674 <bt_le_adv_start_legacy+0x16c>
   186dc:	e72f      	b.n	1853e <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   186de:	a907      	add	r1, sp, #28
   186e0:	4630      	mov	r0, r6
   186e2:	f7ff fe91 	bl	18408 <le_adv_start_add_conn>
		if (err) {
   186e6:	4604      	mov	r4, r0
   186e8:	2800      	cmp	r0, #0
   186ea:	d0c6      	beq.n	1867a <bt_le_adv_start_legacy+0x172>
			if (err == -ENOMEM && !dir_adv &&
   186ec:	f110 0f0c 	cmn.w	r0, #12
   186f0:	f47f af25 	bne.w	1853e <bt_le_adv_start_legacy+0x36>
   186f4:	f1ba 0f00 	cmp.w	sl, #0
   186f8:	f47f af21 	bne.w	1853e <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   186fc:	686b      	ldr	r3, [r5, #4]
			if (err == -ENOMEM && !dir_adv &&
   186fe:	0798      	lsls	r0, r3, #30
   18700:	f53f af1d 	bmi.w	1853e <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   18704:	686c      	ldr	r4, [r5, #4]
   18706:	f084 0402 	eor.w	r4, r4, #2
   1870a:	f3c4 0440 	ubfx	r4, r4, #1, #1
   1870e:	f004 0201 	and.w	r2, r4, #1
   18712:	210e      	movs	r1, #14
   18714:	4640      	mov	r0, r8
   18716:	f010 ff36 	bl	29586 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   1871a:	1e7b      	subs	r3, r7, #1
   1871c:	425a      	negs	r2, r3
   1871e:	415a      	adcs	r2, r3
   18720:	2108      	movs	r1, #8
   18722:	4640      	mov	r0, r8
   18724:	f010 ff2f 	bl	29586 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   18728:	1eb9      	subs	r1, r7, #2
   1872a:	424a      	negs	r2, r1
   1872c:	414a      	adcs	r2, r1
   1872e:	4640      	mov	r0, r8
   18730:	2109      	movs	r1, #9
   18732:	f010 ff28 	bl	29586 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   18736:	686a      	ldr	r2, [r5, #4]
   18738:	210a      	movs	r1, #10
   1873a:	f002 0201 	and.w	r2, r2, #1
   1873e:	4640      	mov	r0, r8
   18740:	f010 ff21 	bl	29586 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   18744:	464a      	mov	r2, r9
   18746:	210b      	movs	r1, #11
   18748:	4640      	mov	r0, r8
   1874a:	f010 ff1c 	bl	29586 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   1874e:	686a      	ldr	r2, [r5, #4]
   18750:	210d      	movs	r1, #13
   18752:	f3c2 0280 	ubfx	r2, r2, #2, #1
   18756:	4640      	mov	r0, r8
   18758:	f010 ff15 	bl	29586 <atomic_set_bit_to>
	return 0;
   1875c:	2400      	movs	r4, #0
   1875e:	e6ee      	b.n	1853e <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   18760:	9807      	ldr	r0, [sp, #28]
   18762:	b108      	cbz	r0, 18768 <bt_le_adv_start_legacy+0x260>
		bt_conn_unref(conn);
   18764:	f011 f84f 	bl	29806 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   18768:	f1ba 0f00 	cmp.w	sl, #0
   1876c:	d1cf      	bne.n	1870e <bt_le_adv_start_legacy+0x206>
   1876e:	e7c9      	b.n	18704 <bt_le_adv_start_legacy+0x1fc>
		return -EAGAIN;
   18770:	f06f 040a 	mvn.w	r4, #10
   18774:	e6e3      	b.n	1853e <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   18776:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1877a:	e6e0      	b.n	1853e <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   1877c:	f06f 0468 	mvn.w	r4, #104	; 0x68
   18780:	e6dd      	b.n	1853e <bt_le_adv_start_legacy+0x36>
   18782:	bf00      	nop
   18784:	20000464 	.word	0x20000464
   18788:	20000390 	.word	0x20000390
   1878c:	0002e38f 	.word	0x0002e38f
   18790:	0002efe2 	.word	0x0002efe2
   18794:	0002caec 	.word	0x0002caec

00018798 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   18798:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1879a:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   1879c:	9a06      	ldr	r2, [sp, #24]
{
   1879e:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   187a0:	e9cd 3200 	strd	r3, r2, [sp]
   187a4:	462b      	mov	r3, r5
   187a6:	460a      	mov	r2, r1
   187a8:	4601      	mov	r1, r0
   187aa:	4811      	ldr	r0, [pc, #68]	; (187f0 <bt_le_adv_start+0x58>)
   187ac:	f7ff feac 	bl	18508 <bt_le_adv_start_legacy>
   187b0:	4621      	mov	r1, r4
   187b2:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   187b4:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   187b6:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   187ba:	429d      	cmp	r5, r3
   187bc:	d102      	bne.n	187c4 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   187be:	4630      	mov	r0, r6
   187c0:	b002      	add	sp, #8
   187c2:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   187c4:	880a      	ldrh	r2, [r1, #0]
   187c6:	4282      	cmp	r2, r0
   187c8:	d104      	bne.n	187d4 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   187ca:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   187cc:	b112      	cbz	r2, 187d4 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   187ce:	7812      	ldrb	r2, [r2, #0]
   187d0:	07d2      	lsls	r2, r2, #31
   187d2:	d402      	bmi.n	187da <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   187d4:	3301      	adds	r3, #1
   187d6:	3108      	adds	r1, #8
   187d8:	e7ef      	b.n	187ba <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   187da:	4906      	ldr	r1, [pc, #24]	; (187f4 <bt_le_adv_start+0x5c>)
   187dc:	4806      	ldr	r0, [pc, #24]	; (187f8 <bt_le_adv_start+0x60>)
   187de:	f013 fc3a 	bl	2c056 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   187e2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   187e6:	2300      	movs	r3, #0
   187e8:	4803      	ldr	r0, [pc, #12]	; (187f8 <bt_le_adv_start+0x60>)
   187ea:	f00a ffcd 	bl	23788 <k_work_reschedule>
   187ee:	e7e6      	b.n	187be <bt_le_adv_start+0x26>
   187f0:	200003a8 	.word	0x200003a8
   187f4:	00018875 	.word	0x00018875
   187f8:	200003c0 	.word	0x200003c0

000187fc <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   187fc:	b510      	push	{r4, lr}
	if (!adv) {
		LOG_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   187fe:	4819      	ldr	r0, [pc, #100]	; (18864 <bt_le_adv_stop+0x68>)
   18800:	f010 ff86 	bl	29710 <bt_le_lim_adv_cancel_timeout>
   18804:	4818      	ldr	r0, [pc, #96]	; (18868 <bt_le_adv_stop+0x6c>)
   18806:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   1880a:	f010 fead 	bl	29568 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1880e:	4816      	ldr	r0, [pc, #88]	; (18868 <bt_le_adv_stop+0x6c>)
   18810:	f010 fea4 	bl	2955c <atomic_get>
   18814:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   18816:	061a      	lsls	r2, r3, #24
   18818:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   1881c:	d521      	bpl.n	18862 <bt_le_adv_stop+0x66>
   1881e:	4812      	ldr	r0, [pc, #72]	; (18868 <bt_le_adv_stop+0x6c>)
   18820:	f010 fe9c 	bl	2955c <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   18824:	0543      	lsls	r3, r0, #21
   18826:	d512      	bpl.n	1884e <bt_le_adv_stop+0x52>
	if (!adv_is_directed(adv)) {
   18828:	480e      	ldr	r0, [pc, #56]	; (18864 <bt_le_adv_stop+0x68>)
   1882a:	f7ff fde1 	bl	183f0 <adv_is_directed>
   1882e:	4b0f      	ldr	r3, [pc, #60]	; (1886c <bt_le_adv_stop+0x70>)
   18830:	b998      	cbnz	r0, 1885a <bt_le_adv_stop+0x5e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   18832:	490f      	ldr	r1, [pc, #60]	; (18870 <bt_le_adv_stop+0x74>)
   18834:	2204      	movs	r2, #4
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   18836:	7e18      	ldrb	r0, [r3, #24]
   18838:	f000 ff5c 	bl	196f4 <bt_conn_lookup_state_le>
   1883c:	4604      	mov	r4, r0
	if (conn) {
   1883e:	b130      	cbz	r0, 1884e <bt_le_adv_stop+0x52>
		conn->err = status;
   18840:	2100      	movs	r1, #0
   18842:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   18844:	f000 fcf2 	bl	1922c <bt_conn_set_state>
		bt_conn_unref(conn);
   18848:	4620      	mov	r0, r4
   1884a:	f010 ffdc 	bl	29806 <bt_conn_unref>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   1884e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   18852:	4804      	ldr	r0, [pc, #16]	; (18864 <bt_le_adv_stop+0x68>)
   18854:	2100      	movs	r1, #0
   18856:	f010 bf34 	b.w	296c2 <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   1885a:	2205      	movs	r2, #5
   1885c:	f103 0121 	add.w	r1, r3, #33	; 0x21
   18860:	e7e9      	b.n	18836 <bt_le_adv_stop+0x3a>
}
   18862:	bd10      	pop	{r4, pc}
   18864:	200003a8 	.word	0x200003a8
   18868:	200003b8 	.word	0x200003b8
   1886c:	20000390 	.word	0x20000390
   18870:	0002e388 	.word	0x0002e388

00018874 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   18874:	b598      	push	{r3, r4, r7, lr}
   18876:	af00      	add	r7, sp, #0
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   18878:	f7ff ffc0 	bl	187fc <bt_le_adv_stop>
#endif
	if (err) {
   1887c:	b178      	cbz	r0, 1889e <adv_timeout+0x2a>
		LOG_WRN("Failed to stop advertising: %d", err);
   1887e:	466c      	mov	r4, sp
   18880:	b088      	sub	sp, #32
   18882:	466a      	mov	r2, sp
   18884:	4b07      	ldr	r3, [pc, #28]	; (188a4 <adv_timeout+0x30>)
   18886:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1888a:	2303      	movs	r3, #3
   1888c:	f842 3f10 	str.w	r3, [r2, #16]!
   18890:	4805      	ldr	r0, [pc, #20]	; (188a8 <adv_timeout+0x34>)
   18892:	2300      	movs	r3, #0
   18894:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   18898:	f7fb f994 	bl	13bc4 <z_impl_z_log_msg_static_create>
   1889c:	46a5      	mov	sp, r4
	}
}
   1889e:	46bd      	mov	sp, r7
   188a0:	bd98      	pop	{r3, r4, r7, pc}
   188a2:	bf00      	nop
   188a4:	0002effd 	.word	0x0002effd
   188a8:	0002caec 	.word	0x0002caec

000188ac <bt_le_adv_resume>:
{
   188ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   188ae:	b083      	sub	sp, #12
   188b0:	483d      	ldr	r0, [pc, #244]	; (189a8 <bt_le_adv_resume+0xfc>)
   188b2:	4c3d      	ldr	r4, [pc, #244]	; (189a8 <bt_le_adv_resume+0xfc>)
   188b4:	af00      	add	r7, sp, #0
   188b6:	f010 fe51 	bl	2955c <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   188ba:	f410 4f80 	tst.w	r0, #16384	; 0x4000
   188be:	d054      	beq.n	1896a <bt_le_adv_resume+0xbe>
   188c0:	4620      	mov	r0, r4
   188c2:	f010 fe4b 	bl	2955c <atomic_get>
   188c6:	0603      	lsls	r3, r0, #24
   188c8:	d44f      	bmi.n	1896a <bt_le_adv_resume+0xbe>
   188ca:	4620      	mov	r0, r4
   188cc:	f010 fe46 	bl	2955c <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   188d0:	0546      	lsls	r6, r0, #21
   188d2:	d54a      	bpl.n	1896a <bt_le_adv_resume+0xbe>
	err = le_adv_start_add_conn(adv, &conn);
   188d4:	1d39      	adds	r1, r7, #4
   188d6:	f1a4 0010 	sub.w	r0, r4, #16
   188da:	f7ff fd95 	bl	18408 <le_adv_start_add_conn>
	if (err) {
   188de:	2800      	cmp	r0, #0
   188e0:	d143      	bne.n	1896a <bt_le_adv_resume+0xbe>
   188e2:	4620      	mov	r0, r4
   188e4:	f010 fe3a 	bl	2955c <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   188e8:	f410 5f00 	tst.w	r0, #8192	; 0x2000
		bt_id_set_adv_private_addr(adv);
   188ec:	f1a4 0010 	sub.w	r0, r4, #16
	if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   188f0:	d10b      	bne.n	1890a <bt_le_adv_resume+0x5e>
		bt_id_set_adv_private_addr(adv);
   188f2:	f010 fe09 	bl	29508 <bt_id_set_adv_private_addr>
	return bt_le_adv_set_enable_legacy(adv, enable);
   188f6:	482d      	ldr	r0, [pc, #180]	; (189ac <bt_le_adv_resume+0x100>)
   188f8:	2101      	movs	r1, #1
   188fa:	f010 fee2 	bl	296c2 <bt_le_adv_set_enable_legacy>
	bt_conn_unref(conn);
   188fe:	687e      	ldr	r6, [r7, #4]
	if (err) {
   18900:	bbb0      	cbnz	r0, 18970 <bt_le_adv_resume+0xc4>
	bt_conn_unref(conn);
   18902:	4630      	mov	r0, r6
   18904:	f010 ff7f 	bl	29806 <bt_conn_unref>
	if (persist_paused) {
   18908:	e02f      	b.n	1896a <bt_le_adv_resume+0xbe>
		bool dir_adv = adv_is_directed(adv);
   1890a:	f7ff fd71 	bl	183f0 <adv_is_directed>
   1890e:	4602      	mov	r2, r0
   18910:	4620      	mov	r0, r4
   18912:	f010 fe23 	bl	2955c <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   18916:	f3c0 3180 	ubfx	r1, r0, #14, #1
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1891a:	4620      	mov	r0, r4
   1891c:	f010 fe1e 	bl	2955c <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_PERSIST)) {
   18920:	f081 0101 	eor.w	r1, r1, #1
	if (atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   18924:	0545      	lsls	r5, r0, #21
	if (!atomic_test_bit(adv->flags, BT_ADV_PERSIST)) {
   18926:	ea4f 0141 	mov.w	r1, r1, lsl #1
   1892a:	481f      	ldr	r0, [pc, #124]	; (189a8 <bt_le_adv_resume+0xfc>)
		options |= BT_LE_ADV_OPT_CONNECTABLE;
   1892c:	bf48      	it	mi
   1892e:	f041 0101 	orrmi.w	r1, r1, #1
   18932:	f010 fe13 	bl	2955c <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
   18936:	0480      	lsls	r0, r0, #18
		options |= BT_LE_ADV_OPT_USE_IDENTITY;
   18938:	bf48      	it	mi
   1893a:	f041 0104 	orrmi.w	r1, r1, #4
		err = bt_id_set_adv_own_addr(adv, options, dir_adv, &own_addr_type);
   1893e:	481b      	ldr	r0, [pc, #108]	; (189ac <bt_le_adv_resume+0x100>)
   18940:	1cfb      	adds	r3, r7, #3
   18942:	f7ff fc69 	bl	18218 <bt_id_set_adv_own_addr>
		if (err) {
   18946:	2800      	cmp	r0, #0
   18948:	d0d5      	beq.n	188f6 <bt_le_adv_resume+0x4a>
			LOG_ERR("Controller cannot resume connectable advertising (%d)", err);
   1894a:	466c      	mov	r4, sp
   1894c:	b088      	sub	sp, #32
   1894e:	466a      	mov	r2, sp
   18950:	4b17      	ldr	r3, [pc, #92]	; (189b0 <bt_le_adv_resume+0x104>)
   18952:	e9c2 3005 	strd	r3, r0, [r2, #20]
   18956:	2303      	movs	r3, #3
   18958:	f842 3f10 	str.w	r3, [r2, #16]!
   1895c:	4815      	ldr	r0, [pc, #84]	; (189b4 <bt_le_adv_resume+0x108>)
   1895e:	2300      	movs	r3, #0
   18960:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18964:	f7fb f92e 	bl	13bc4 <z_impl_z_log_msg_static_create>
   18968:	46a5      	mov	sp, r4
}
   1896a:	370c      	adds	r7, #12
   1896c:	46bd      	mov	sp, r7
   1896e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   18970:	2100      	movs	r1, #0
   18972:	4630      	mov	r0, r6
   18974:	f000 fc5a 	bl	1922c <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18978:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   1897c:	480a      	ldr	r0, [pc, #40]	; (189a8 <bt_le_adv_resume+0xfc>)
   1897e:	f010 fdf3 	bl	29568 <atomic_and>
   18982:	4605      	mov	r5, r0
	bt_conn_unref(conn);
   18984:	4630      	mov	r0, r6
   18986:	f010 ff3e 	bl	29806 <bt_conn_unref>
	if (persist_paused) {
   1898a:	046b      	lsls	r3, r5, #17
   1898c:	d5ed      	bpl.n	1896a <bt_le_adv_resume+0xbe>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1898e:	f3bf 8f5b 	dmb	ish
   18992:	e854 3f00 	ldrex	r3, [r4]
   18996:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   1899a:	e844 3200 	strex	r2, r3, [r4]
   1899e:	2a00      	cmp	r2, #0
   189a0:	d1f7      	bne.n	18992 <bt_le_adv_resume+0xe6>
   189a2:	f3bf 8f5b 	dmb	ish
   189a6:	e7e0      	b.n	1896a <bt_le_adv_resume+0xbe>
   189a8:	200003b8 	.word	0x200003b8
   189ac:	200003a8 	.word	0x200003a8
   189b0:	0002f01c 	.word	0x0002f01c
   189b4:	0002caec 	.word	0x0002caec

000189b8 <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
   189b8:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   189ba:	4904      	ldr	r1, [pc, #16]	; (189cc <bt_pub_key_is_debug+0x14>)
   189bc:	2240      	movs	r2, #64	; 0x40
   189be:	f010 fa8c 	bl	28eda <memcmp>
}
   189c2:	fab0 f080 	clz	r0, r0
   189c6:	0940      	lsrs	r0, r0, #5
   189c8:	bd08      	pop	{r3, pc}
   189ca:	bf00      	nop
   189cc:	0002f0e0 	.word	0x0002f0e0

000189d0 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   189d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   189d2:	4b43      	ldr	r3, [pc, #268]	; (18ae0 <bt_pub_key_gen+0x110>)
   189d4:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
   189d8:	f003 0306 	and.w	r3, r3, #6
   189dc:	2b06      	cmp	r3, #6
{
   189de:	b087      	sub	sp, #28
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   189e0:	d00f      	beq.n	18a02 <bt_pub_key_gen+0x32>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		LOG_WRN("ECC HCI commands not available");
   189e2:	4b40      	ldr	r3, [pc, #256]	; (18ae4 <bt_pub_key_gen+0x114>)
   189e4:	9305      	str	r3, [sp, #20]
   189e6:	2302      	movs	r3, #2
   189e8:	9304      	str	r3, [sp, #16]
   189ea:	483f      	ldr	r0, [pc, #252]	; (18ae8 <bt_pub_key_gen+0x118>)
   189ec:	2300      	movs	r3, #0
   189ee:	aa04      	add	r2, sp, #16
   189f0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return -ENOTSUP;
   189f4:	f06f 0585 	mvn.w	r5, #133	; 0x85
   189f8:	f7fb f8e4 	bl	13bc4 <z_impl_z_log_msg_static_create>
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   189fc:	4628      	mov	r0, r5
   189fe:	b007      	add	sp, #28
   18a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!new_cb) {
   18a02:	2800      	cmp	r0, #0
   18a04:	d069      	beq.n	18ada <bt_pub_key_gen+0x10a>
	return list->head;
   18a06:	4e39      	ldr	r6, [pc, #228]	; (18aec <bt_pub_key_gen+0x11c>)
   18a08:	6832      	ldr	r2, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   18a0a:	b1a2      	cbz	r2, 18a36 <bt_pub_key_gen+0x66>
   18a0c:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   18a0e:	4283      	cmp	r3, r0
   18a10:	d10d      	bne.n	18a2e <bt_pub_key_gen+0x5e>
			LOG_WRN("Callback already registered");
   18a12:	4b37      	ldr	r3, [pc, #220]	; (18af0 <bt_pub_key_gen+0x120>)
   18a14:	9305      	str	r3, [sp, #20]
   18a16:	2302      	movs	r3, #2
   18a18:	9304      	str	r3, [sp, #16]
   18a1a:	4833      	ldr	r0, [pc, #204]	; (18ae8 <bt_pub_key_gen+0x118>)
   18a1c:	2300      	movs	r3, #0
   18a1e:	aa04      	add	r2, sp, #16
   18a20:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18a24:	f7fb f8ce 	bl	13bc4 <z_impl_z_log_msg_static_create>
			return -EALREADY;
   18a28:	f06f 0577 	mvn.w	r5, #119	; 0x77
   18a2c:	e7e6      	b.n	189fc <bt_pub_key_gen+0x2c>
	return node->next;
   18a2e:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   18a30:	b10b      	cbz	r3, 18a36 <bt_pub_key_gen+0x66>
   18a32:	3b04      	subs	r3, #4
   18a34:	e7eb      	b.n	18a0e <bt_pub_key_gen+0x3e>
	parent->next = child;
   18a36:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   18a38:	6872      	ldr	r2, [r6, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   18a3a:	1d03      	adds	r3, r0, #4
	list->head = node;
   18a3c:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   18a3e:	b902      	cbnz	r2, 18a42 <bt_pub_key_gen+0x72>
	list->tail = node;
   18a40:	6073      	str	r3, [r6, #4]
   18a42:	4c2c      	ldr	r4, [pc, #176]	; (18af4 <bt_pub_key_gen+0x124>)
   18a44:	f3bf 8f5b 	dmb	ish
   18a48:	e854 7f00 	ldrex	r7, [r4]
   18a4c:	f047 0320 	orr.w	r3, r7, #32
   18a50:	e844 3200 	strex	r2, r3, [r4]
   18a54:	2a00      	cmp	r2, #0
   18a56:	d1f7      	bne.n	18a48 <bt_pub_key_gen+0x78>
   18a58:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   18a5c:	f017 0720 	ands.w	r7, r7, #32
   18a60:	d001      	beq.n	18a66 <bt_pub_key_gen+0x96>
	return 0;
   18a62:	2500      	movs	r5, #0
   18a64:	e7ca      	b.n	189fc <bt_pub_key_gen+0x2c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18a66:	f3bf 8f5b 	dmb	ish
   18a6a:	e854 3f00 	ldrex	r3, [r4]
   18a6e:	f023 0310 	bic.w	r3, r3, #16
   18a72:	e844 3200 	strex	r2, r3, [r4]
   18a76:	2a00      	cmp	r2, #0
   18a78:	d1f7      	bne.n	18a6a <bt_pub_key_gen+0x9a>
   18a7a:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   18a7e:	463a      	mov	r2, r7
   18a80:	4639      	mov	r1, r7
   18a82:	f242 0025 	movw	r0, #8229	; 0x2025
   18a86:	f7fd ff37 	bl	168f8 <bt_hci_cmd_send_sync>
	if (err) {
   18a8a:	4605      	mov	r5, r0
   18a8c:	2800      	cmp	r0, #0
   18a8e:	d0e8      	beq.n	18a62 <bt_pub_key_gen+0x92>
		LOG_ERR("Sending LE P256 Public Key command failed");
   18a90:	4b19      	ldr	r3, [pc, #100]	; (18af8 <bt_pub_key_gen+0x128>)
   18a92:	9305      	str	r3, [sp, #20]
   18a94:	2302      	movs	r3, #2
   18a96:	9304      	str	r3, [sp, #16]
   18a98:	4813      	ldr	r0, [pc, #76]	; (18ae8 <bt_pub_key_gen+0x118>)
   18a9a:	463b      	mov	r3, r7
   18a9c:	aa04      	add	r2, sp, #16
   18a9e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18aa2:	f7fb f88f 	bl	13bc4 <z_impl_z_log_msg_static_create>
   18aa6:	f3bf 8f5b 	dmb	ish
   18aaa:	e854 3f00 	ldrex	r3, [r4]
   18aae:	f023 0320 	bic.w	r3, r3, #32
   18ab2:	e844 3200 	strex	r2, r3, [r4]
   18ab6:	2a00      	cmp	r2, #0
   18ab8:	d1f7      	bne.n	18aaa <bt_pub_key_gen+0xda>
   18aba:	f3bf 8f5b 	dmb	ish
	return list->head;
   18abe:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   18ac0:	b13c      	cbz	r4, 18ad2 <bt_pub_key_gen+0x102>
			if (cb->func) {
   18ac2:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   18ac6:	3c04      	subs	r4, #4
			if (cb->func) {
   18ac8:	b10b      	cbz	r3, 18ace <bt_pub_key_gen+0xfe>
				cb->func(NULL);
   18aca:	2000      	movs	r0, #0
   18acc:	4798      	blx	r3
	return node->next;
   18ace:	6864      	ldr	r4, [r4, #4]
   18ad0:	e7f6      	b.n	18ac0 <bt_pub_key_gen+0xf0>
	list->head = NULL;
   18ad2:	2300      	movs	r3, #0
	list->tail = NULL;
   18ad4:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   18ad8:	e790      	b.n	189fc <bt_pub_key_gen+0x2c>
		return -EINVAL;
   18ada:	f06f 0515 	mvn.w	r5, #21
   18ade:	e78d      	b.n	189fc <bt_pub_key_gen+0x2c>
   18ae0:	20000390 	.word	0x20000390
   18ae4:	0002f059 	.word	0x0002f059
   18ae8:	0002cb14 	.word	0x0002cb14
   18aec:	20003460 	.word	0x20003460
   18af0:	0002f078 	.word	0x0002f078
   18af4:	20000464 	.word	0x20000464
   18af8:	0002f094 	.word	0x0002f094

00018afc <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18afc:	4b05      	ldr	r3, [pc, #20]	; (18b14 <bt_pub_key_get+0x18>)
   18afe:	f3bf 8f5b 	dmb	ish
   18b02:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
   18b04:	4804      	ldr	r0, [pc, #16]	; (18b18 <bt_pub_key_get+0x1c>)
   18b06:	f3bf 8f5b 	dmb	ish
	return NULL;
   18b0a:	f013 0f10 	tst.w	r3, #16
}
   18b0e:	bf08      	it	eq
   18b10:	2000      	moveq	r0, #0
   18b12:	4770      	bx	lr
   18b14:	20000464 	.word	0x20000464
   18b18:	2000461f 	.word	0x2000461f

00018b1c <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   18b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err;

	if (dh_key_cb == cb) {
   18b20:	4d28      	ldr	r5, [pc, #160]	; (18bc4 <bt_dh_key_gen+0xa8>)
   18b22:	682b      	ldr	r3, [r5, #0]
   18b24:	428b      	cmp	r3, r1
{
   18b26:	af00      	add	r7, sp, #0
   18b28:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
   18b2a:	d045      	beq.n	18bb8 <bt_dh_key_gen+0x9c>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   18b2c:	b12b      	cbz	r3, 18b3a <bt_dh_key_gen+0x1e>
		return -EBUSY;
   18b2e:	f06f 040f 	mvn.w	r4, #15
		LOG_WRN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   18b32:	4620      	mov	r0, r4
   18b34:	46bd      	mov	sp, r7
   18b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18b3a:	4b23      	ldr	r3, [pc, #140]	; (18bc8 <bt_dh_key_gen+0xac>)
   18b3c:	f3bf 8f5b 	dmb	ish
   18b40:	681a      	ldr	r2, [r3, #0]
   18b42:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   18b46:	f3c2 1840 	ubfx	r8, r2, #5, #1
   18b4a:	0692      	lsls	r2, r2, #26
   18b4c:	d4ef      	bmi.n	18b2e <bt_dh_key_gen+0x12>
   18b4e:	f3bf 8f5b 	dmb	ish
   18b52:	681b      	ldr	r3, [r3, #0]
   18b54:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   18b58:	06db      	lsls	r3, r3, #27
   18b5a:	d530      	bpl.n	18bbe <bt_dh_key_gen+0xa2>
	dh_key_cb = cb;
   18b5c:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   18b5e:	f242 0026 	movw	r0, #8230	; 0x2026
   18b62:	2140      	movs	r1, #64	; 0x40
   18b64:	f7fd fe8e 	bl	16884 <bt_hci_cmd_create>
	if (!buf) {
   18b68:	4604      	mov	r4, r0
   18b6a:	b310      	cbz	r0, 18bb2 <bt_dh_key_gen+0x96>
	return net_buf_simple_add(&buf->b, len);
   18b6c:	2140      	movs	r1, #64	; 0x40
   18b6e:	300c      	adds	r0, #12
   18b70:	f012 fbec 	bl	2b34c <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   18b74:	2240      	movs	r2, #64	; 0x40
   18b76:	4631      	mov	r1, r6
   18b78:	f010 f9d6 	bl	28f28 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   18b7c:	4621      	mov	r1, r4
   18b7e:	4642      	mov	r2, r8
   18b80:	f242 0026 	movw	r0, #8230	; 0x2026
   18b84:	f7fd feb8 	bl	168f8 <bt_hci_cmd_send_sync>
	if (err) {
   18b88:	4604      	mov	r4, r0
   18b8a:	2800      	cmp	r0, #0
   18b8c:	d0d1      	beq.n	18b32 <bt_dh_key_gen+0x16>
		dh_key_cb = NULL;
   18b8e:	2300      	movs	r3, #0
   18b90:	602b      	str	r3, [r5, #0]
		LOG_WRN("Failed to generate DHKey (err %d)", err);
   18b92:	466d      	mov	r5, sp
   18b94:	b088      	sub	sp, #32
   18b96:	466a      	mov	r2, sp
   18b98:	490c      	ldr	r1, [pc, #48]	; (18bcc <bt_dh_key_gen+0xb0>)
   18b9a:	e9c2 1405 	strd	r1, r4, [r2, #20]
   18b9e:	2103      	movs	r1, #3
   18ba0:	f842 1f10 	str.w	r1, [r2, #16]!
   18ba4:	480a      	ldr	r0, [pc, #40]	; (18bd0 <bt_dh_key_gen+0xb4>)
   18ba6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   18baa:	f7fb f80b 	bl	13bc4 <z_impl_z_log_msg_static_create>
   18bae:	46ad      	mov	sp, r5
		return err;
   18bb0:	e7bf      	b.n	18b32 <bt_dh_key_gen+0x16>
		return -ENOBUFS;
   18bb2:	f06f 0468 	mvn.w	r4, #104	; 0x68
   18bb6:	e7ea      	b.n	18b8e <bt_dh_key_gen+0x72>
		return -EALREADY;
   18bb8:	f06f 0477 	mvn.w	r4, #119	; 0x77
   18bbc:	e7b9      	b.n	18b32 <bt_dh_key_gen+0x16>
		return -EADDRNOTAVAIL;
   18bbe:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   18bc2:	e7b6      	b.n	18b32 <bt_dh_key_gen+0x16>
   18bc4:	2000345c 	.word	0x2000345c
   18bc8:	20000464 	.word	0x20000464
   18bcc:	0002f0be 	.word	0x0002f0be
   18bd0:	0002cb14 	.word	0x0002cb14

00018bd4 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   18bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18bd6:	4c1b      	ldr	r4, [pc, #108]	; (18c44 <bt_hci_evt_le_pkey_complete+0x70>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   18bd8:	68c6      	ldr	r6, [r0, #12]
   18bda:	f3bf 8f5b 	dmb	ish
   18bde:	e854 3f00 	ldrex	r3, [r4]
   18be2:	f023 0320 	bic.w	r3, r3, #32
   18be6:	e844 3200 	strex	r2, r3, [r4]
   18bea:	2a00      	cmp	r2, #0
   18bec:	d1f7      	bne.n	18bde <bt_hci_evt_le_pkey_complete+0xa>
   18bee:	f3bf 8f5b 	dmb	ish

	LOG_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   18bf2:	7833      	ldrb	r3, [r6, #0]
   18bf4:	b983      	cbnz	r3, 18c18 <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   18bf6:	4814      	ldr	r0, [pc, #80]	; (18c48 <bt_hci_evt_le_pkey_complete+0x74>)
   18bf8:	2240      	movs	r2, #64	; 0x40
   18bfa:	1c71      	adds	r1, r6, #1
   18bfc:	f010 f994 	bl	28f28 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18c00:	f3bf 8f5b 	dmb	ish
   18c04:	e854 3f00 	ldrex	r3, [r4]
   18c08:	f043 0310 	orr.w	r3, r3, #16
   18c0c:	e844 3200 	strex	r2, r3, [r4]
   18c10:	2a00      	cmp	r2, #0
   18c12:	d1f7      	bne.n	18c04 <bt_hci_evt_le_pkey_complete+0x30>
   18c14:	f3bf 8f5b 	dmb	ish
	return list->head;
   18c18:	4d0c      	ldr	r5, [pc, #48]	; (18c4c <bt_hci_evt_le_pkey_complete+0x78>)
   18c1a:	682c      	ldr	r4, [r5, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   18c1c:	b16c      	cbz	r4, 18c3a <bt_hci_evt_le_pkey_complete+0x66>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   18c1e:	4f0a      	ldr	r7, [pc, #40]	; (18c48 <bt_hci_evt_le_pkey_complete+0x74>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   18c20:	3c04      	subs	r4, #4
		if (cb->func) {
   18c22:	6823      	ldr	r3, [r4, #0]
   18c24:	b12b      	cbz	r3, 18c32 <bt_hci_evt_le_pkey_complete+0x5e>
			cb->func(evt->status ? NULL : pub_key);
   18c26:	7832      	ldrb	r2, [r6, #0]
   18c28:	2a00      	cmp	r2, #0
   18c2a:	bf0c      	ite	eq
   18c2c:	4638      	moveq	r0, r7
   18c2e:	2000      	movne	r0, #0
   18c30:	4798      	blx	r3
	return node->next;
   18c32:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   18c34:	b10c      	cbz	r4, 18c3a <bt_hci_evt_le_pkey_complete+0x66>
   18c36:	3c04      	subs	r4, #4
   18c38:	e7f3      	b.n	18c22 <bt_hci_evt_le_pkey_complete+0x4e>
	list->head = NULL;
   18c3a:	2300      	movs	r3, #0
	list->tail = NULL;
   18c3c:	e9c5 3300 	strd	r3, r3, [r5]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   18c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18c42:	bf00      	nop
   18c44:	20000464 	.word	0x20000464
   18c48:	2000461f 	.word	0x2000461f
   18c4c:	20003460 	.word	0x20003460

00018c50 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	LOG_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   18c50:	4905      	ldr	r1, [pc, #20]	; (18c68 <bt_hci_evt_le_dhkey_complete+0x18>)
   18c52:	680b      	ldr	r3, [r1, #0]
   18c54:	b133      	cbz	r3, 18c64 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   18c56:	68c2      	ldr	r2, [r0, #12]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   18c58:	2000      	movs	r0, #0
   18c5a:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   18c5c:	7811      	ldrb	r1, [r2, #0]
   18c5e:	b901      	cbnz	r1, 18c62 <bt_hci_evt_le_dhkey_complete+0x12>
   18c60:	1c50      	adds	r0, r2, #1
   18c62:	4718      	bx	r3
	}
}
   18c64:	4770      	bx	lr
   18c66:	bf00      	nop
   18c68:	2000345c 	.word	0x2000345c

00018c6c <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   18c6c:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   18c6e:	4b0b      	ldr	r3, [pc, #44]	; (18c9c <notify_connected+0x30>)
   18c70:	681d      	ldr	r5, [r3, #0]
{
   18c72:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   18c74:	b925      	cbnz	r5, 18c80 <notify_connected+0x14>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18c76:	4d0a      	ldr	r5, [pc, #40]	; (18ca0 <notify_connected+0x34>)
   18c78:	4e0a      	ldr	r6, [pc, #40]	; (18ca4 <notify_connected+0x38>)
   18c7a:	42b5      	cmp	r5, r6
   18c7c:	d307      	bcc.n	18c8e <notify_connected+0x22>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
   18c7e:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->connected) {
   18c80:	682b      	ldr	r3, [r5, #0]
   18c82:	b113      	cbz	r3, 18c8a <notify_connected+0x1e>
			cb->connected(conn, conn->err);
   18c84:	7b21      	ldrb	r1, [r4, #12]
   18c86:	4620      	mov	r0, r4
   18c88:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   18c8a:	69ad      	ldr	r5, [r5, #24]
   18c8c:	e7f2      	b.n	18c74 <notify_connected+0x8>
		if (cb->connected) {
   18c8e:	682b      	ldr	r3, [r5, #0]
   18c90:	b113      	cbz	r3, 18c98 <notify_connected+0x2c>
			cb->connected(conn, conn->err);
   18c92:	7b21      	ldrb	r1, [r4, #12]
   18c94:	4620      	mov	r0, r4
   18c96:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18c98:	351c      	adds	r5, #28
   18c9a:	e7ee      	b.n	18c7a <notify_connected+0xe>
   18c9c:	20003498 	.word	0x20003498
   18ca0:	0002cabc 	.word	0x0002cabc
   18ca4:	0002cabc 	.word	0x0002cabc

00018ca8 <bt_conn_create_pdu_timeout.part.0>:
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
   18ca8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_WRN("Unable to allocate buffer within timeout");
   18caa:	4b07      	ldr	r3, [pc, #28]	; (18cc8 <bt_conn_create_pdu_timeout.part.0+0x20>)
   18cac:	9305      	str	r3, [sp, #20]
   18cae:	4807      	ldr	r0, [pc, #28]	; (18ccc <bt_conn_create_pdu_timeout.part.0+0x24>)
   18cb0:	2302      	movs	r3, #2
   18cb2:	aa04      	add	r2, sp, #16
   18cb4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18cb8:	9304      	str	r3, [sp, #16]
   18cba:	f010 fd56 	bl	2976a <z_log_msg_static_create.constprop.0>
}
   18cbe:	2000      	movs	r0, #0
   18cc0:	b007      	add	sp, #28
   18cc2:	f85d fb04 	ldr.w	pc, [sp], #4
   18cc6:	bf00      	nop
   18cc8:	0002f127 	.word	0x0002f127
   18ccc:	0002cafc 	.word	0x0002cafc

00018cd0 <tx_notify>:
{
   18cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_fifo_put(&free_tx, tx);
   18cd4:	4f15      	ldr	r7, [pc, #84]	; (18d2c <tx_notify+0x5c>)
{
   18cd6:	4604      	mov	r4, r0
	tx->cb = NULL;
   18cd8:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
   18cdc:	f04f 0240 	mov.w	r2, #64	; 0x40
   18ce0:	f3ef 8311 	mrs	r3, BASEPRI
   18ce4:	f382 8812 	msr	BASEPRI_MAX, r2
   18ce8:	f3bf 8f6f 	isb	sy
	return list->head;
   18cec:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   18cee:	b929      	cbnz	r1, 18cfc <tx_notify+0x2c>
	__asm__ volatile(
   18cf0:	f383 8811 	msr	BASEPRI, r3
   18cf4:	f3bf 8f6f 	isb	sy
}
   18cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18cfc:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   18cfe:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   18d00:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18d02:	4281      	cmp	r1, r0
	list->tail = node;
   18d04:	bf08      	it	eq
   18d06:	6262      	streq	r2, [r4, #36]	; 0x24
   18d08:	f383 8811 	msr	BASEPRI, r3
   18d0c:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   18d10:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   18d14:	f8c1 800c 	str.w	r8, [r1, #12]
	tx->user_data = NULL;
   18d18:	e9c1 8801 	strd	r8, r8, [r1, #4]
	k_fifo_put(&free_tx, tx);
   18d1c:	4638      	mov	r0, r7
   18d1e:	f013 f8ba 	bl	2be96 <k_queue_append>
		cb(conn, user_data, 0);
   18d22:	2200      	movs	r2, #0
   18d24:	4631      	mov	r1, r6
   18d26:	4620      	mov	r0, r4
   18d28:	47a8      	blx	r5
	while (1) {
   18d2a:	e7d7      	b.n	18cdc <tx_notify+0xc>
   18d2c:	20000b38 	.word	0x20000b38

00018d30 <conn_tx_destroy>:
{
   18d30:	b570      	push	{r4, r5, r6, lr}
	void *user_data = tx->user_data;
   18d32:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->cb = NULL;
   18d36:	2200      	movs	r2, #0
	tx->user_data = NULL;
   18d38:	e9c1 2201 	strd	r2, r2, [r1, #4]
{
   18d3c:	4604      	mov	r4, r0
	tx->pending_no_cb = 0U;
   18d3e:	60ca      	str	r2, [r1, #12]
	k_fifo_put(&free_tx, tx);
   18d40:	4805      	ldr	r0, [pc, #20]	; (18d58 <conn_tx_destroy+0x28>)
   18d42:	f013 f8a8 	bl	2be96 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   18d46:	4631      	mov	r1, r6
   18d48:	4620      	mov	r0, r4
   18d4a:	462b      	mov	r3, r5
   18d4c:	f06f 026d 	mvn.w	r2, #109	; 0x6d
}
   18d50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   18d54:	4718      	bx	r3
   18d56:	bf00      	nop
   18d58:	20000b38 	.word	0x20000b38

00018d5c <send_frag>:
{
   18d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (bt_dev.le.acl_mtu) {
   18d60:	f8df 9180 	ldr.w	r9, [pc, #384]	; 18ee4 <send_frag+0x188>
{
   18d64:	b083      	sub	sp, #12
   18d66:	4698      	mov	r8, r3
	if (bt_dev.le.acl_mtu) {
   18d68:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
	return NULL;
   18d6c:	2b00      	cmp	r3, #0
{
   18d6e:	af00      	add	r7, sp, #0
   18d70:	4604      	mov	r4, r0
   18d72:	460e      	mov	r6, r1
	return NULL;
   18d74:	f509 7084 	add.w	r0, r9, #264	; 0x108
{
   18d78:	4615      	mov	r5, r2
	return NULL;
   18d7a:	bf08      	it	eq
   18d7c:	2000      	moveq	r0, #0
	return z_impl_k_sem_take(sem, timeout);
   18d7e:	2200      	movs	r2, #0
   18d80:	2300      	movs	r3, #0
   18d82:	f00a faed 	bl	23360 <z_impl_k_sem_take>
	if (k_sem_take(bt_conn_get_pkts(conn), K_NO_WAIT)) {
   18d86:	2800      	cmp	r0, #0
   18d88:	f040 80a9 	bne.w	18ede <send_frag+0x182>
	if (frag) {
   18d8c:	2d00      	cmp	r5, #0
   18d8e:	f000 8085 	beq.w	18e9c <send_frag+0x140>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   18d92:	f105 0b0c 	add.w	fp, r5, #12
		uint16_t frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   18d96:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
   18d9a:	607b      	str	r3, [r7, #4]
   18d9c:	4658      	mov	r0, fp
   18d9e:	f012 fb10 	bl	2b3c2 <net_buf_simple_tailroom>
   18da2:	687b      	ldr	r3, [r7, #4]
   18da4:	4298      	cmp	r0, r3
   18da6:	d974      	bls.n	18e92 <send_frag+0x136>
	return bt_dev.le.acl_mtu;
   18da8:	f8b9 2104 	ldrh.w	r2, [r9, #260]	; 0x104
	return net_buf_simple_add_mem(&buf->b, mem, len);
   18dac:	f856 1f0c 	ldr.w	r1, [r6, #12]!
   18db0:	607a      	str	r2, [r7, #4]
   18db2:	4658      	mov	r0, fp
   18db4:	f012 fad0 	bl	2b358 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   18db8:	687a      	ldr	r2, [r7, #4]
   18dba:	4630      	mov	r0, r6
   18dbc:	4611      	mov	r1, r2
   18dbe:	f012 fae4 	bl	2b38a <net_buf_simple_pull>
	if (conn->state != BT_CONN_CONNECTED) {
   18dc2:	7b63      	ldrb	r3, [r4, #13]
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   18dc4:	69ae      	ldr	r6, [r5, #24]
	if (conn->state != BT_CONN_CONNECTED) {
   18dc6:	2b07      	cmp	r3, #7
   18dc8:	f040 8086 	bne.w	18ed8 <send_frag+0x17c>
	__asm__ volatile(
   18dcc:	f04f 0340 	mov.w	r3, #64	; 0x40
   18dd0:	f3ef 8211 	mrs	r2, BASEPRI
   18dd4:	f383 8812 	msr	BASEPRI_MAX, r3
   18dd8:	f3bf 8f6f 	isb	sy
	if (tx) {
   18ddc:	2e00      	cmp	r6, #0
   18dde:	d068      	beq.n	18eb2 <send_frag+0x156>
	parent->next = child;
   18de0:	2300      	movs	r3, #0
   18de2:	6033      	str	r3, [r6, #0]
	return list->tail;
   18de4:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   18de6:	2b00      	cmp	r3, #0
   18de8:	d160      	bne.n	18eac <send_frag+0x150>
	list->head = node;
   18dea:	e9c4 6605 	strd	r6, r6, [r4, #20]
	__asm__ volatile(
   18dee:	f382 8811 	msr	BASEPRI, r2
   18df2:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   18df6:	2104      	movs	r1, #4
   18df8:	f105 000c 	add.w	r0, r5, #12
   18dfc:	f012 fabd 	bl	2b37a <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   18e00:	8823      	ldrh	r3, [r4, #0]
   18e02:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
   18e06:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
   18e0a:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   18e0e:	8a2b      	ldrh	r3, [r5, #16]
   18e10:	3b04      	subs	r3, #4
   18e12:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   18e14:	2302      	movs	r3, #2
   18e16:	762b      	strb	r3, [r5, #24]
	return bt_send(buf);
   18e18:	4628      	mov	r0, r5
   18e1a:	f7fe f8e7 	bl	16fec <bt_send>
	if (err) {
   18e1e:	4680      	mov	r8, r0
   18e20:	b390      	cbz	r0, 18e88 <send_frag+0x12c>
		LOG_ERR("Unable to send to driver (err %d)", err);
   18e22:	46eb      	mov	fp, sp
   18e24:	b088      	sub	sp, #32
   18e26:	466a      	mov	r2, sp
   18e28:	4b2f      	ldr	r3, [pc, #188]	; (18ee8 <send_frag+0x18c>)
   18e2a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   18e2e:	2303      	movs	r3, #3
   18e30:	f842 3f10 	str.w	r3, [r2, #16]!
   18e34:	482d      	ldr	r0, [pc, #180]	; (18eec <send_frag+0x190>)
   18e36:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18e3a:	f010 fc96 	bl	2976a <z_log_msg_static_create.constprop.0>
   18e3e:	46dd      	mov	sp, fp
	__asm__ volatile(
   18e40:	f04f 0340 	mov.w	r3, #64	; 0x40
   18e44:	f3ef 8811 	mrs	r8, BASEPRI
   18e48:	f383 8812 	msr	BASEPRI_MAX, r3
   18e4c:	f3bf 8f6f 	isb	sy
		if (tx) {
   18e50:	2e00      	cmp	r6, #0
   18e52:	d03b      	beq.n	18ecc <send_frag+0x170>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   18e54:	4631      	mov	r1, r6
   18e56:	f104 0014 	add.w	r0, r4, #20
   18e5a:	f010 fc5c 	bl	29716 <sys_slist_find_and_remove>
	__asm__ volatile(
   18e5e:	f388 8811 	msr	BASEPRI, r8
   18e62:	f3bf 8f6f 	isb	sy
		err = -EIO;
   18e66:	f06f 0804 	mvn.w	r8, #4
	if (bt_dev.le.acl_mtu) {
   18e6a:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
	return NULL;
   18e6e:	4820      	ldr	r0, [pc, #128]	; (18ef0 <send_frag+0x194>)
   18e70:	2b00      	cmp	r3, #0
   18e72:	bf08      	it	eq
   18e74:	2000      	moveq	r0, #0
	z_impl_k_sem_give(sem);
   18e76:	f00a fa4d 	bl	23314 <z_impl_k_sem_give>
	if (tx) {
   18e7a:	b12e      	cbz	r6, 18e88 <send_frag+0x12c>
		tx_data(buf)->tx = NULL;
   18e7c:	2300      	movs	r3, #0
   18e7e:	61ab      	str	r3, [r5, #24]
		conn_tx_destroy(conn, tx);
   18e80:	4631      	mov	r1, r6
   18e82:	4620      	mov	r0, r4
   18e84:	f7ff ff54 	bl	18d30 <conn_tx_destroy>
}
   18e88:	4640      	mov	r0, r8
   18e8a:	370c      	adds	r7, #12
   18e8c:	46bd      	mov	sp, r7
   18e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_tailroom(&buf->b);
   18e92:	4658      	mov	r0, fp
   18e94:	f012 fa95 	bl	2b3c2 <net_buf_simple_tailroom>
		uint16_t frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   18e98:	b282      	uxth	r2, r0
   18e9a:	e787      	b.n	18dac <send_frag+0x50>
		buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   18e9c:	2200      	movs	r2, #0
   18e9e:	2300      	movs	r3, #0
   18ea0:	f104 0038 	add.w	r0, r4, #56	; 0x38
   18ea4:	f012 f9f7 	bl	2b296 <net_buf_get>
   18ea8:	4605      	mov	r5, r0
		frag = buf;
   18eaa:	e78a      	b.n	18dc2 <send_frag+0x66>
	parent->next = child;
   18eac:	601e      	str	r6, [r3, #0]
	list->tail = node;
   18eae:	61a6      	str	r6, [r4, #24]
}
   18eb0:	e79d      	b.n	18dee <send_frag+0x92>
	return list->tail;
   18eb2:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   18eb4:	b133      	cbz	r3, 18ec4 <send_frag+0x168>
			pending_no_cb = &tail_tx->pending_no_cb;
   18eb6:	f103 0a0c 	add.w	sl, r3, #12
   18eba:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   18ebc:	3301      	adds	r3, #1
   18ebe:	f8ca 3000 	str.w	r3, [sl]
   18ec2:	e794      	b.n	18dee <send_frag+0x92>
			pending_no_cb = &conn->pending_no_cb;
   18ec4:	69e3      	ldr	r3, [r4, #28]
   18ec6:	f104 0a1c 	add.w	sl, r4, #28
   18eca:	e7f7      	b.n	18ebc <send_frag+0x160>
			(*pending_no_cb)--;
   18ecc:	f8da 3000 	ldr.w	r3, [sl]
   18ed0:	3b01      	subs	r3, #1
   18ed2:	f8ca 3000 	str.w	r3, [sl]
   18ed6:	e7c2      	b.n	18e5e <send_frag+0x102>
		err = -ENOTCONN;
   18ed8:	f06f 087f 	mvn.w	r8, #127	; 0x7f
   18edc:	e7c5      	b.n	18e6a <send_frag+0x10e>
		return -ENOBUFS;
   18ede:	f06f 0868 	mvn.w	r8, #104	; 0x68
   18ee2:	e7d1      	b.n	18e88 <send_frag+0x12c>
   18ee4:	20000390 	.word	0x20000390
   18ee8:	0002e95e 	.word	0x0002e95e
   18eec:	0002cafc 	.word	0x0002cafc
   18ef0:	20000498 	.word	0x20000498

00018ef4 <bt_conn_get_pkts>:
	if (bt_dev.le.acl_mtu) {
   18ef4:	4804      	ldr	r0, [pc, #16]	; (18f08 <bt_conn_get_pkts+0x14>)
   18ef6:	f8b0 3104 	ldrh.w	r3, [r0, #260]	; 0x104
	return NULL;
   18efa:	2b00      	cmp	r3, #0
   18efc:	f500 7084 	add.w	r0, r0, #264	; 0x108
}
   18f00:	bf08      	it	eq
   18f02:	2000      	moveq	r0, #0
   18f04:	4770      	bx	lr
   18f06:	bf00      	nop
   18f08:	20000390 	.word	0x20000390

00018f0c <bt_conn_new>:
{
   18f0c:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   18f0e:	2200      	movs	r2, #0
   18f10:	4604      	mov	r4, r0
   18f12:	428a      	cmp	r2, r1
   18f14:	d102      	bne.n	18f1c <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   18f16:	2400      	movs	r4, #0
}
   18f18:	4620      	mov	r0, r4
   18f1a:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   18f1c:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
   18f20:	2001      	movs	r0, #1
   18f22:	f3bf 8f5b 	dmb	ish
   18f26:	e853 5f00 	ldrex	r5, [r3]
   18f2a:	2d00      	cmp	r5, #0
   18f2c:	d104      	bne.n	18f38 <bt_conn_new+0x2c>
   18f2e:	e843 0c00 	strex	ip, r0, [r3]
   18f32:	f1bc 0f00 	cmp.w	ip, #0
   18f36:	d1f6      	bne.n	18f26 <bt_conn_new+0x1a>
   18f38:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   18f3c:	d002      	beq.n	18f44 <bt_conn_new+0x38>
   18f3e:	34c0      	adds	r4, #192	; 0xc0
	for (i = 0; i < size; i++) {
   18f40:	4402      	add	r2, r0
   18f42:	e7e6      	b.n	18f12 <bt_conn_new+0x6>
	if (!conn) {
   18f44:	2c00      	cmp	r4, #0
   18f46:	d0e6      	beq.n	18f16 <bt_conn_new+0xa>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   18f48:	22bc      	movs	r2, #188	; 0xbc
   18f4a:	2100      	movs	r1, #0
   18f4c:	4620      	mov	r0, r4
   18f4e:	f00f fff6 	bl	28f3e <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   18f52:	f104 0058 	add.w	r0, r4, #88	; 0x58
   18f56:	4904      	ldr	r1, [pc, #16]	; (18f68 <bt_conn_new+0x5c>)
   18f58:	f013 f87d 	bl	2c056 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   18f5c:	4903      	ldr	r1, [pc, #12]	; (18f6c <bt_conn_new+0x60>)
   18f5e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   18f62:	f013 f834 	bl	2bfce <k_work_init>
	return conn;
   18f66:	e7d7      	b.n	18f18 <bt_conn_new+0xc>
   18f68:	000197a5 	.word	0x000197a5
   18f6c:	00029771 	.word	0x00029771

00018f70 <bt_conn_recv>:
{
   18f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18f74:	b086      	sub	sp, #24
   18f76:	4616      	mov	r6, r2
   18f78:	af00      	add	r7, sp, #0
   18f7a:	4604      	mov	r4, r0
   18f7c:	460d      	mov	r5, r1
	tx_notify(conn);
   18f7e:	f7ff fea7 	bl	18cd0 <tx_notify>
	switch (flags) {
   18f82:	2e01      	cmp	r6, #1
   18f84:	d030      	beq.n	18fe8 <bt_conn_recv+0x78>
   18f86:	2e02      	cmp	r6, #2
   18f88:	d16a      	bne.n	19060 <bt_conn_recv+0xf0>
		if (conn->rx) {
   18f8a:	6923      	ldr	r3, [r4, #16]
   18f8c:	b163      	cbz	r3, 18fa8 <bt_conn_recv+0x38>
			LOG_ERR("Unexpected first L2CAP frame");
   18f8e:	4b40      	ldr	r3, [pc, #256]	; (19090 <bt_conn_recv+0x120>)
   18f90:	4840      	ldr	r0, [pc, #256]	; (19094 <bt_conn_recv+0x124>)
   18f92:	e9c7 6304 	strd	r6, r3, [r7, #16]
   18f96:	f107 0210 	add.w	r2, r7, #16
   18f9a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18f9e:	f010 fbe4 	bl	2976a <z_log_msg_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
   18fa2:	4620      	mov	r0, r4
   18fa4:	f010 fbe7 	bl	29776 <bt_conn_reset_rx_state>
		conn->rx = buf;
   18fa8:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   18faa:	6921      	ldr	r1, [r4, #16]
   18fac:	8a08      	ldrh	r0, [r1, #16]
   18fae:	2801      	cmp	r0, #1
   18fb0:	d930      	bls.n	19014 <bt_conn_recv+0xa4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   18fb2:	68cb      	ldr	r3, [r1, #12]
   18fb4:	881b      	ldrh	r3, [r3, #0]
   18fb6:	3304      	adds	r3, #4
   18fb8:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   18fba:	4298      	cmp	r0, r3
   18fbc:	d32a      	bcc.n	19014 <bt_conn_recv+0xa4>
	if (conn->rx->len > acl_total_len) {
   18fbe:	d95f      	bls.n	19080 <bt_conn_recv+0x110>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   18fc0:	466d      	mov	r5, sp
   18fc2:	b088      	sub	sp, #32
   18fc4:	466a      	mov	r2, sp
   18fc6:	4934      	ldr	r1, [pc, #208]	; (19098 <bt_conn_recv+0x128>)
   18fc8:	61d3      	str	r3, [r2, #28]
   18fca:	2304      	movs	r3, #4
   18fcc:	e9c2 1005 	strd	r1, r0, [r2, #20]
   18fd0:	f842 3f10 	str.w	r3, [r2, #16]!
   18fd4:	482f      	ldr	r0, [pc, #188]	; (19094 <bt_conn_recv+0x124>)
   18fd6:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   18fda:	f010 fbc6 	bl	2976a <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   18fde:	4620      	mov	r0, r4
   18fe0:	46ad      	mov	sp, r5
   18fe2:	f010 fbc8 	bl	29776 <bt_conn_reset_rx_state>
		return;
   18fe6:	e015      	b.n	19014 <bt_conn_recv+0xa4>
		if (!conn->rx) {
   18fe8:	6920      	ldr	r0, [r4, #16]
   18fea:	b970      	cbnz	r0, 1900a <bt_conn_recv+0x9a>
			LOG_ERR("Unexpected L2CAP continuation");
   18fec:	4b2b      	ldr	r3, [pc, #172]	; (1909c <bt_conn_recv+0x12c>)
   18fee:	617b      	str	r3, [r7, #20]
   18ff0:	2302      	movs	r3, #2
   18ff2:	4828      	ldr	r0, [pc, #160]	; (19094 <bt_conn_recv+0x124>)
   18ff4:	613b      	str	r3, [r7, #16]
   18ff6:	f107 0210 	add.w	r2, r7, #16
   18ffa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18ffe:	f010 fbb4 	bl	2976a <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   19002:	4620      	mov	r0, r4
   19004:	f010 fbb7 	bl	29776 <bt_conn_reset_rx_state>
   19008:	e001      	b.n	1900e <bt_conn_recv+0x9e>
		if (!buf->len) {
   1900a:	8a2e      	ldrh	r6, [r5, #16]
   1900c:	b936      	cbnz	r6, 1901c <bt_conn_recv+0xac>
		net_buf_unref(buf);
   1900e:	4628      	mov	r0, r5
   19010:	f005 fd4a 	bl	1eaa8 <net_buf_unref>
}
   19014:	3718      	adds	r7, #24
   19016:	46bd      	mov	sp, r7
   19018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1901c:	300c      	adds	r0, #12
   1901e:	f012 f9d0 	bl	2b3c2 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   19022:	4286      	cmp	r6, r0
   19024:	d912      	bls.n	1904c <bt_conn_recv+0xdc>
			LOG_ERR("Not enough buffer space for L2CAP data");
   19026:	4b1e      	ldr	r3, [pc, #120]	; (190a0 <bt_conn_recv+0x130>)
   19028:	617b      	str	r3, [r7, #20]
   1902a:	2302      	movs	r3, #2
   1902c:	613b      	str	r3, [r7, #16]
   1902e:	4819      	ldr	r0, [pc, #100]	; (19094 <bt_conn_recv+0x124>)
   19030:	f107 0210 	add.w	r2, r7, #16
   19034:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19038:	f010 fb97 	bl	2976a <z_log_msg_static_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
   1903c:	2200      	movs	r2, #0
   1903e:	6921      	ldr	r1, [r4, #16]
   19040:	4620      	mov	r0, r4
   19042:	f000 fe01 	bl	19c48 <bt_l2cap_recv>
			conn->rx = NULL;
   19046:	2300      	movs	r3, #0
   19048:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
   1904a:	e7e0      	b.n	1900e <bt_conn_recv+0x9e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1904c:	6920      	ldr	r0, [r4, #16]
   1904e:	8a2a      	ldrh	r2, [r5, #16]
   19050:	68e9      	ldr	r1, [r5, #12]
   19052:	300c      	adds	r0, #12
   19054:	f012 f980 	bl	2b358 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   19058:	4628      	mov	r0, r5
   1905a:	f005 fd25 	bl	1eaa8 <net_buf_unref>
		break;
   1905e:	e7a4      	b.n	18faa <bt_conn_recv+0x3a>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   19060:	46e8      	mov	r8, sp
   19062:	b088      	sub	sp, #32
   19064:	466a      	mov	r2, sp
   19066:	4b0f      	ldr	r3, [pc, #60]	; (190a4 <bt_conn_recv+0x134>)
   19068:	480a      	ldr	r0, [pc, #40]	; (19094 <bt_conn_recv+0x124>)
	switch (flags) {
   1906a:	e9c2 3605 	strd	r3, r6, [r2, #20]
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   1906e:	2303      	movs	r3, #3
   19070:	f842 3f10 	str.w	r3, [r2, #16]!
   19074:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19078:	f010 fb77 	bl	2976a <z_log_msg_static_create.constprop.0>
   1907c:	46c5      	mov	sp, r8
   1907e:	e7c0      	b.n	19002 <bt_conn_recv+0x92>
	conn->rx = NULL;
   19080:	2300      	movs	r3, #0
   19082:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   19084:	2201      	movs	r2, #1
   19086:	4620      	mov	r0, r4
   19088:	f000 fdde 	bl	19c48 <bt_l2cap_recv>
		__ASSERT(false, "Invalid connection type %u", conn->type);
   1908c:	e7c2      	b.n	19014 <bt_conn_recv+0xa4>
   1908e:	bf00      	nop
   19090:	0002f150 	.word	0x0002f150
   19094:	0002cafc 	.word	0x0002cafc
   19098:	0002f1d0 	.word	0x0002f1d0
   1909c:	0002f16d 	.word	0x0002f16d
   190a0:	0002f18b 	.word	0x0002f18b
   190a4:	0002f1b2 	.word	0x0002f1b2

000190a8 <bt_conn_send_cb>:
{
   190a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   190ac:	4698      	mov	r8, r3
	if (buf->user_data_size < CONFIG_BT_CONN_TX_USER_DATA_SIZE) {
   190ae:	7acb      	ldrb	r3, [r1, #11]
   190b0:	2b07      	cmp	r3, #7
{
   190b2:	b086      	sub	sp, #24
   190b4:	4606      	mov	r6, r0
   190b6:	460d      	mov	r5, r1
   190b8:	4617      	mov	r7, r2
	if (buf->user_data_size < CONFIG_BT_CONN_TX_USER_DATA_SIZE) {
   190ba:	d80e      	bhi.n	190da <bt_conn_send_cb+0x32>
		LOG_ERR("not enough room in user_data");
   190bc:	4b2c      	ldr	r3, [pc, #176]	; (19170 <bt_conn_send_cb+0xc8>)
   190be:	482d      	ldr	r0, [pc, #180]	; (19174 <bt_conn_send_cb+0xcc>)
   190c0:	9305      	str	r3, [sp, #20]
   190c2:	aa04      	add	r2, sp, #16
   190c4:	2302      	movs	r3, #2
   190c6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   190ca:	9304      	str	r3, [sp, #16]
   190cc:	f010 fb4d 	bl	2976a <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   190d0:	f06f 0015 	mvn.w	r0, #21
}
   190d4:	b006      	add	sp, #24
   190d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (conn->state != BT_CONN_CONNECTED) {
   190da:	7b43      	ldrb	r3, [r0, #13]
   190dc:	2b07      	cmp	r3, #7
   190de:	d00c      	beq.n	190fa <bt_conn_send_cb+0x52>
		LOG_ERR("not connected!");
   190e0:	4b25      	ldr	r3, [pc, #148]	; (19178 <bt_conn_send_cb+0xd0>)
   190e2:	9305      	str	r3, [sp, #20]
   190e4:	4823      	ldr	r0, [pc, #140]	; (19174 <bt_conn_send_cb+0xcc>)
   190e6:	2302      	movs	r3, #2
   190e8:	aa04      	add	r2, sp, #16
   190ea:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   190ee:	9304      	str	r3, [sp, #16]
   190f0:	f010 fb3b 	bl	2976a <z_log_msg_static_create.constprop.0>
		return -ENOTCONN;
   190f4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   190f8:	e7ec      	b.n	190d4 <bt_conn_send_cb+0x2c>
	if (cb) {
   190fa:	2a00      	cmp	r2, #0
   190fc:	d033      	beq.n	19166 <bt_conn_send_cb+0xbe>
	return z_impl_z_current_get();
   190fe:	f00a fe25 	bl	23d4c <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   19102:	4b1e      	ldr	r3, [pc, #120]	; (1917c <bt_conn_send_cb+0xd4>)
   19104:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   19106:	481e      	ldr	r0, [pc, #120]	; (19180 <bt_conn_send_cb+0xd8>)
   19108:	bf07      	ittee	eq
   1910a:	2200      	moveq	r2, #0
   1910c:	2300      	moveq	r3, #0
   1910e:	f04f 32ff 	movne.w	r2, #4294967295
   19112:	f04f 33ff 	movne.w	r3, #4294967295
   19116:	f00a f8c9 	bl	232ac <z_impl_k_queue_get>
   1911a:	4604      	mov	r4, r0
		if (!tx) {
   1911c:	b328      	cbz	r0, 1916a <bt_conn_send_cb+0xc2>
		if (conn->state != BT_CONN_CONNECTED) {
   1911e:	7b73      	ldrb	r3, [r6, #13]
   19120:	2b07      	cmp	r3, #7
   19122:	d012      	beq.n	1914a <bt_conn_send_cb+0xa2>
			LOG_WRN("Disconnected while allocating context");
   19124:	4b17      	ldr	r3, [pc, #92]	; (19184 <bt_conn_send_cb+0xdc>)
   19126:	9305      	str	r3, [sp, #20]
   19128:	4812      	ldr	r0, [pc, #72]	; (19174 <bt_conn_send_cb+0xcc>)
   1912a:	2302      	movs	r3, #2
   1912c:	aa04      	add	r2, sp, #16
   1912e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   19132:	9304      	str	r3, [sp, #16]
   19134:	f010 fb19 	bl	2976a <z_log_msg_static_create.constprop.0>
	tx->cb = NULL;
   19138:	2300      	movs	r3, #0
	tx->user_data = NULL;
   1913a:	e9c4 3301 	strd	r3, r3, [r4, #4]
	k_fifo_put(&free_tx, tx);
   1913e:	4810      	ldr	r0, [pc, #64]	; (19180 <bt_conn_send_cb+0xd8>)
	tx->pending_no_cb = 0U;
   19140:	60e3      	str	r3, [r4, #12]
	k_fifo_put(&free_tx, tx);
   19142:	4621      	mov	r1, r4
   19144:	f012 fea7 	bl	2be96 <k_queue_append>
}
   19148:	e7d4      	b.n	190f4 <bt_conn_send_cb+0x4c>
		tx->user_data = user_data;
   1914a:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   1914e:	2300      	movs	r3, #0
   19150:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   19152:	61ac      	str	r4, [r5, #24]
	tx_data(buf)->is_cont = false;
   19154:	2400      	movs	r4, #0
	net_buf_put(&conn->tx_queue, buf);
   19156:	f106 0038 	add.w	r0, r6, #56	; 0x38
	tx_data(buf)->is_cont = false;
   1915a:	772c      	strb	r4, [r5, #28]
	net_buf_put(&conn->tx_queue, buf);
   1915c:	4629      	mov	r1, r5
   1915e:	f012 f8c9 	bl	2b2f4 <net_buf_put>
	return 0;
   19162:	4620      	mov	r0, r4
   19164:	e7b6      	b.n	190d4 <bt_conn_send_cb+0x2c>
   19166:	4614      	mov	r4, r2
   19168:	e7f3      	b.n	19152 <bt_conn_send_cb+0xaa>
			return -ENOBUFS;
   1916a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1916e:	e7b1      	b.n	190d4 <bt_conn_send_cb+0x2c>
   19170:	0002f1eb 	.word	0x0002f1eb
   19174:	0002cafc 	.word	0x0002cafc
   19178:	0002f208 	.word	0x0002f208
   1917c:	20002d50 	.word	0x20002d50
   19180:	20000b38 	.word	0x20000b38
   19184:	0002f217 	.word	0x0002f217

00019188 <bt_conn_prepare_events>:
{
   19188:	b570      	push	{r4, r5, r6, lr}
   1918a:	4604      	mov	r4, r0
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
   1918c:	481f      	ldr	r0, [pc, #124]	; (1920c <bt_conn_prepare_events+0x84>)
   1918e:	f013 faad 	bl	2c6ec <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   19192:	4b1e      	ldr	r3, [pc, #120]	; (1920c <bt_conn_prepare_events+0x84>)
   19194:	2200      	movs	r2, #0
   19196:	2101      	movs	r1, #1
   19198:	4620      	mov	r0, r4
   1919a:	f013 fa8a 	bl	2c6b2 <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1919e:	f3bf 8f5b 	dmb	ish
   191a2:	4b1b      	ldr	r3, [pc, #108]	; (19210 <bt_conn_prepare_events+0x88>)
   191a4:	681a      	ldr	r2, [r3, #0]
   191a6:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
   191aa:	f104 0614 	add.w	r6, r4, #20
	if (!atomic_get(&conn->ref)) {
   191ae:	b90a      	cbnz	r2, 191b4 <bt_conn_prepare_events+0x2c>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   191b0:	2001      	movs	r0, #1
}
   191b2:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   191b4:	f1a3 05bc 	sub.w	r5, r3, #188	; 0xbc
   191b8:	f813 3caf 	ldrb.w	r3, [r3, #-175]
   191bc:	b953      	cbnz	r3, 191d4 <bt_conn_prepare_events+0x4c>
   191be:	f06f 0140 	mvn.w	r1, #64	; 0x40
   191c2:	1d28      	adds	r0, r5, #4
   191c4:	f010 fac2 	bl	2974c <atomic_and>
   191c8:	0643      	lsls	r3, r0, #25
   191ca:	d503      	bpl.n	191d4 <bt_conn_prepare_events+0x4c>
		conn_cleanup(conn);
   191cc:	4628      	mov	r0, r5
   191ce:	f010 fadb 	bl	29788 <conn_cleanup>
		return -ENOTCONN;
   191d2:	e7ed      	b.n	191b0 <bt_conn_prepare_events+0x28>
	if (conn->state != BT_CONN_CONNECTED) {
   191d4:	7b6b      	ldrb	r3, [r5, #13]
   191d6:	2b07      	cmp	r3, #7
   191d8:	d1ea      	bne.n	191b0 <bt_conn_prepare_events+0x28>
	if (bt_dev.le.acl_mtu) {
   191da:	4b0e      	ldr	r3, [pc, #56]	; (19214 <bt_conn_prepare_events+0x8c>)
   191dc:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
   191e0:	2a00      	cmp	r2, #0
   191e2:	d0e5      	beq.n	191b0 <bt_conn_prepare_events+0x28>
	return sem->count;
   191e4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (packets_waiting && !buffers_available) {
   191e8:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   191ea:	b159      	cbz	r1, 19204 <bt_conn_prepare_events+0x7c>
   191ec:	b952      	cbnz	r2, 19204 <bt_conn_prepare_events+0x7c>
		k_poll_event_init(&events[0],
   191ee:	f503 7384 	add.w	r3, r3, #264	; 0x108
   191f2:	2102      	movs	r1, #2
		k_poll_event_init(&events[0],
   191f4:	4630      	mov	r0, r6
   191f6:	f013 fa5c 	bl	2c6b2 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   191fa:	2301      	movs	r3, #1
   191fc:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   19200:	2002      	movs	r0, #2
	return ev_count;
   19202:	e7d6      	b.n	191b2 <bt_conn_prepare_events+0x2a>
		k_poll_event_init(&events[0],
   19204:	4b04      	ldr	r3, [pc, #16]	; (19218 <bt_conn_prepare_events+0x90>)
   19206:	2200      	movs	r2, #0
   19208:	2104      	movs	r1, #4
   1920a:	e7f3      	b.n	191f4 <bt_conn_prepare_events+0x6c>
   1920c:	20000674 	.word	0x20000674
   19210:	2000206c 	.word	0x2000206c
   19214:	20000390 	.word	0x20000390
   19218:	20001fe8 	.word	0x20001fe8

0001921c <bt_conn_lookup_handle>:
{
   1921c:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   1921e:	2101      	movs	r1, #1
   19220:	4801      	ldr	r0, [pc, #4]	; (19228 <bt_conn_lookup_handle+0xc>)
   19222:	f010 bb0c 	b.w	2983e <conn_lookup_handle>
   19226:	bf00      	nop
   19228:	20001fb0 	.word	0x20001fb0

0001922c <bt_conn_set_state>:
{
   1922c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state == state) {
   19230:	7b46      	ldrb	r6, [r0, #13]
   19232:	428e      	cmp	r6, r1
{
   19234:	af00      	add	r7, sp, #0
   19236:	4604      	mov	r4, r0
   19238:	460d      	mov	r5, r1
	if (conn->state == state) {
   1923a:	d118      	bne.n	1926e <bt_conn_set_state+0x42>
	switch (state) {
   1923c:	2e08      	cmp	r6, #8
   1923e:	bf96      	itet	ls
   19240:	4b72      	ldrls	r3, [pc, #456]	; (1940c <bt_conn_set_state+0x1e0>)
	if (conn->state == state) {
   19242:	4b73      	ldrhi	r3, [pc, #460]	; (19410 <bt_conn_set_state+0x1e4>)
   19244:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
		LOG_WRN("no transition %s", state2str(state));
   19248:	466c      	mov	r4, sp
   1924a:	b088      	sub	sp, #32
   1924c:	466a      	mov	r2, sp
   1924e:	4971      	ldr	r1, [pc, #452]	; (19414 <bt_conn_set_state+0x1e8>)
   19250:	e9c2 1305 	strd	r1, r3, [r2, #20]
   19254:	f44f 7300 	mov.w	r3, #512	; 0x200
   19258:	8393      	strh	r3, [r2, #28]
   1925a:	4b6f      	ldr	r3, [pc, #444]	; (19418 <bt_conn_set_state+0x1ec>)
   1925c:	f842 3f10 	str.w	r3, [r2, #16]!
   19260:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
		LOG_WRN("no valid (%u) state was set", state);
   19264:	486d      	ldr	r0, [pc, #436]	; (1941c <bt_conn_set_state+0x1f0>)
   19266:	f010 fa80 	bl	2976a <z_log_msg_static_create.constprop.0>
   1926a:	46a5      	mov	sp, r4
   1926c:	e04c      	b.n	19308 <bt_conn_set_state+0xdc>
	conn->state = state;
   1926e:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   19270:	b926      	cbnz	r6, 1927c <bt_conn_set_state+0x50>
		if (conn->type != BT_CONN_TYPE_ISO) {
   19272:	7883      	ldrb	r3, [r0, #2]
   19274:	2b08      	cmp	r3, #8
   19276:	d001      	beq.n	1927c <bt_conn_set_state+0x50>
			bt_conn_ref(conn);
   19278:	f010 faa9 	bl	297ce <bt_conn_ref>
	switch (conn->state) {
   1927c:	7b63      	ldrb	r3, [r4, #13]
   1927e:	2b08      	cmp	r3, #8
   19280:	f200 80bf 	bhi.w	19402 <bt_conn_set_state+0x1d6>
   19284:	e8df f003 	tbb	[pc, r3]
   19288:	40400543 	.word	0x40400543
   1928c:	25404040 	.word	0x25404040
   19290:	40          	.byte	0x40
   19291:	00          	.byte	0x00
	if (bt_dev.le.acl_mtu) {
   19292:	4d63      	ldr	r5, [pc, #396]	; (19420 <bt_conn_set_state+0x1f4>)
		tx->pending_no_cb = 0U;
   19294:	f04f 0800 	mov.w	r8, #0
	return NULL;
   19298:	f505 7684 	add.w	r6, r5, #264	; 0x108
	__asm__ volatile(
   1929c:	f04f 0240 	mov.w	r2, #64	; 0x40
   192a0:	f3ef 8311 	mrs	r3, BASEPRI
   192a4:	f382 8812 	msr	BASEPRI_MAX, r2
   192a8:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   192ac:	69e2      	ldr	r2, [r4, #28]
   192ae:	2a00      	cmp	r2, #0
   192b0:	f000 8082 	beq.w	193b8 <bt_conn_set_state+0x18c>
			conn->pending_no_cb--;
   192b4:	3a01      	subs	r2, #1
   192b6:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   192b8:	f383 8811 	msr	BASEPRI, r3
   192bc:	f3bf 8f6f 	isb	sy
	if (bt_dev.le.acl_mtu) {
   192c0:	f8b5 3104 	ldrh.w	r3, [r5, #260]	; 0x104
	return NULL;
   192c4:	2b00      	cmp	r3, #0
   192c6:	bf14      	ite	ne
   192c8:	4630      	movne	r0, r6
   192ca:	2000      	moveq	r0, #0
	z_impl_k_sem_give(sem);
   192cc:	f00a f822 	bl	23314 <z_impl_k_sem_give>
}
   192d0:	e7e4      	b.n	1929c <bt_conn_set_state+0x70>
		if (conn->type == BT_CONN_TYPE_SCO) {
   192d2:	78a3      	ldrb	r3, [r4, #2]
   192d4:	2b04      	cmp	r3, #4
   192d6:	d017      	beq.n	19308 <bt_conn_set_state+0xdc>
	z_impl_k_queue_init(queue);
   192d8:	f104 0038 	add.w	r0, r4, #56	; 0x38
   192dc:	f012 fdcf 	bl	2be7e <z_impl_k_queue_init>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   192e0:	4850      	ldr	r0, [pc, #320]	; (19424 <bt_conn_set_state+0x1f8>)
   192e2:	2100      	movs	r1, #0
   192e4:	f00b f826 	bl	24334 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   192e8:	2300      	movs	r3, #0
	list->tail = NULL;
   192ea:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   192ee:	78e3      	ldrb	r3, [r4, #3]
   192f0:	2b01      	cmp	r3, #1
   192f2:	d109      	bne.n	19308 <bt_conn_set_state+0xdc>
			conn->le.conn_param_retry_countdown =
   192f4:	2303      	movs	r3, #3
   192f6:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
			k_work_schedule(&conn->deferred_work,
   192fa:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   192fe:	2300      	movs	r3, #0
   19300:	f104 0058 	add.w	r0, r4, #88	; 0x58
   19304:	f00a fa0c 	bl	23720 <k_work_schedule>
}
   19308:	46bd      	mov	sp, r7
   1930a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   1930e:	78a3      	ldrb	r3, [r4, #2]
   19310:	2b04      	cmp	r3, #4
   19312:	d103      	bne.n	1931c <bt_conn_set_state+0xf0>
			bt_conn_unref(conn);
   19314:	4620      	mov	r0, r4
   19316:	f010 fa76 	bl	29806 <bt_conn_unref>
			break;
   1931a:	e7f5      	b.n	19308 <bt_conn_set_state+0xdc>
		switch (old_state) {
   1931c:	2e08      	cmp	r6, #8
   1931e:	d8f3      	bhi.n	19308 <bt_conn_set_state+0xdc>
   19320:	a301      	add	r3, pc, #4	; (adr r3, 19328 <bt_conn_set_state+0xfc>)
   19322:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   19326:	bf00      	nop
   19328:	000193a1 	.word	0x000193a1
   1932c:	0001934d 	.word	0x0001934d
   19330:	00019393 	.word	0x00019393
   19334:	00019315 	.word	0x00019315
   19338:	00019315 	.word	0x00019315
   1933c:	00019393 	.word	0x00019393
   19340:	00019393 	.word	0x00019393
   19344:	000193a1 	.word	0x000193a1
   19348:	000193a1 	.word	0x000193a1
			tx_notify(conn);
   1934c:	4620      	mov	r0, r4
   1934e:	f7ff fcbf 	bl	18cd0 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   19352:	78a3      	ldrb	r3, [r4, #2]
   19354:	2b01      	cmp	r3, #1
   19356:	d10a      	bne.n	1936e <bt_conn_set_state+0x142>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   19358:	f104 0558 	add.w	r5, r4, #88	; 0x58
   1935c:	4628      	mov	r0, r5
   1935e:	f012 fe86 	bl	2c06e <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   19362:	f010 0f0c 	tst.w	r0, #12
   19366:	d002      	beq.n	1936e <bt_conn_set_state+0x142>
				k_work_cancel_delayable(&conn->deferred_work);
   19368:	4628      	mov	r0, r5
   1936a:	f012 fe82 	bl	2c072 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1936e:	f3bf 8f5b 	dmb	ish
   19372:	3404      	adds	r4, #4
   19374:	e854 3f00 	ldrex	r3, [r4]
   19378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1937c:	e844 3200 	strex	r2, r3, [r4]
   19380:	2a00      	cmp	r2, #0
   19382:	d1f7      	bne.n	19374 <bt_conn_set_state+0x148>
   19384:	f3bf 8f5b 	dmb	ish
   19388:	2100      	movs	r1, #0
   1938a:	4826      	ldr	r0, [pc, #152]	; (19424 <bt_conn_set_state+0x1f8>)
   1938c:	f00a ffd2 	bl	24334 <z_impl_k_poll_signal_raise>
   19390:	e7ba      	b.n	19308 <bt_conn_set_state+0xdc>
			if (conn->err) {
   19392:	7b23      	ldrb	r3, [r4, #12]
   19394:	2b00      	cmp	r3, #0
   19396:	d0bd      	beq.n	19314 <bt_conn_set_state+0xe8>
				notify_connected(conn);
   19398:	4620      	mov	r0, r4
   1939a:	f7ff fc67 	bl	18c6c <notify_connected>
   1939e:	e7b9      	b.n	19314 <bt_conn_set_state+0xe8>
			LOG_WRN("Invalid (%u) old state", state);
   193a0:	466c      	mov	r4, sp
   193a2:	b088      	sub	sp, #32
   193a4:	466a      	mov	r2, sp
   193a6:	4b20      	ldr	r3, [pc, #128]	; (19428 <bt_conn_set_state+0x1fc>)
		LOG_WRN("no valid (%u) state was set", state);
   193a8:	e9c2 3505 	strd	r3, r5, [r2, #20]
   193ac:	2303      	movs	r3, #3
   193ae:	f842 3f10 	str.w	r3, [r2, #16]!
   193b2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   193b6:	e755      	b.n	19264 <bt_conn_set_state+0x38>
	return list->head;
   193b8:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   193ba:	b921      	cbnz	r1, 193c6 <bt_conn_set_state+0x19a>
   193bc:	f383 8811 	msr	BASEPRI, r3
   193c0:	f3bf 8f6f 	isb	sy
		if (!node) {
   193c4:	e7a0      	b.n	19308 <bt_conn_set_state+0xdc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   193c6:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   193c8:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   193ca:	6162      	str	r2, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   193cc:	4281      	cmp	r1, r0
	list->tail = node;
   193ce:	bf08      	it	eq
   193d0:	61a2      	streq	r2, [r4, #24]
   193d2:	f383 8811 	msr	BASEPRI, r3
   193d6:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   193da:	f04f 0240 	mov.w	r2, #64	; 0x40
   193de:	f3ef 8311 	mrs	r3, BASEPRI
   193e2:	f382 8812 	msr	BASEPRI_MAX, r2
   193e6:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   193ea:	68ca      	ldr	r2, [r1, #12]
   193ec:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   193ee:	f8c1 800c 	str.w	r8, [r1, #12]
	__asm__ volatile(
   193f2:	f383 8811 	msr	BASEPRI, r3
   193f6:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   193fa:	4620      	mov	r0, r4
   193fc:	f7ff fc98 	bl	18d30 <conn_tx_destroy>
   19400:	e75e      	b.n	192c0 <bt_conn_set_state+0x94>
		LOG_WRN("no valid (%u) state was set", state);
   19402:	466c      	mov	r4, sp
   19404:	b088      	sub	sp, #32
   19406:	466a      	mov	r2, sp
   19408:	4b08      	ldr	r3, [pc, #32]	; (1942c <bt_conn_set_state+0x200>)
   1940a:	e7cd      	b.n	193a8 <bt_conn_set_state+0x17c>
   1940c:	0002d0a4 	.word	0x0002d0a4
   19410:	0002f23d 	.word	0x0002f23d
   19414:	0002f247 	.word	0x0002f247
   19418:	01000003 	.word	0x01000003
   1941c:	0002cafc 	.word	0x0002cafc
   19420:	20000390 	.word	0x20000390
   19424:	20000674 	.word	0x20000674
   19428:	0002f258 	.word	0x0002f258
   1942c:	0002f26f 	.word	0x0002f26f

00019430 <bt_conn_index>:
		index = conn - acl_conns;
   19430:	4b03      	ldr	r3, [pc, #12]	; (19440 <bt_conn_index+0x10>)
   19432:	1ac0      	subs	r0, r0, r3
   19434:	4b03      	ldr	r3, [pc, #12]	; (19444 <bt_conn_index+0x14>)
   19436:	1180      	asrs	r0, r0, #6
   19438:	4358      	muls	r0, r3
}
   1943a:	b2c0      	uxtb	r0, r0
   1943c:	4770      	bx	lr
   1943e:	bf00      	nop
   19440:	20001fb0 	.word	0x20001fb0
   19444:	aaaaaaab 	.word	0xaaaaaaab

00019448 <bt_conn_create_pdu_timeout>:
{
   19448:	b538      	push	{r3, r4, r5, lr}
   1944a:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   1944c:	4908      	ldr	r1, [pc, #32]	; (19470 <bt_conn_create_pdu_timeout+0x28>)
   1944e:	2800      	cmp	r0, #0
   19450:	bf08      	it	eq
   19452:	4608      	moveq	r0, r1
   19454:	f011 ff1a 	bl	2b28c <net_buf_alloc_fixed>
	if (!buf) {
   19458:	4604      	mov	r4, r0
   1945a:	b918      	cbnz	r0, 19464 <bt_conn_create_pdu_timeout+0x1c>
}
   1945c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   19460:	f7ff bc22 	b.w	18ca8 <bt_conn_create_pdu_timeout.part.0>
	net_buf_simple_reserve(&buf->b, reserve);
   19464:	1d29      	adds	r1, r5, #4
   19466:	300c      	adds	r0, #12
   19468:	f011 ff6c 	bl	2b344 <net_buf_simple_reserve>
   1946c:	4620      	mov	r0, r4
   1946e:	bd38      	pop	{r3, r4, r5, pc}
   19470:	20000b50 	.word	0x20000b50

00019474 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   19474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19476:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19478:	f3bf 8f5b 	dmb	ish
   1947c:	6863      	ldr	r3, [r4, #4]
   1947e:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   19482:	059b      	lsls	r3, r3, #22
   19484:	f100 0004 	add.w	r0, r0, #4
   19488:	d511      	bpl.n	194ae <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
   1948a:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1948e:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
   19492:	429a      	cmp	r2, r3
   19494:	d80b      	bhi.n	194ae <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
   19496:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	; 0xa2
   1949a:	429a      	cmp	r2, r3
   1949c:	d307      	bcc.n	194ae <notify_le_param_updated+0x3a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   1949e:	e9d4 2329 	ldrd	r2, r3, [r4, #164]	; 0xa4
   194a2:	429a      	cmp	r2, r3
   194a4:	d103      	bne.n	194ae <notify_le_param_updated+0x3a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   194a6:	f46f 7100 	mvn.w	r1, #512	; 0x200
   194aa:	f010 f94f 	bl	2974c <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   194ae:	4b10      	ldr	r3, [pc, #64]	; (194f0 <notify_le_param_updated+0x7c>)
   194b0:	681d      	ldr	r5, [r3, #0]
   194b2:	b925      	cbnz	r5, 194be <notify_le_param_updated+0x4a>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   194b4:	4d0f      	ldr	r5, [pc, #60]	; (194f4 <notify_le_param_updated+0x80>)
   194b6:	4f10      	ldr	r7, [pc, #64]	; (194f8 <notify_le_param_updated+0x84>)
   194b8:	42bd      	cmp	r5, r7
   194ba:	d30c      	bcc.n	194d6 <notify_le_param_updated+0x62>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   194bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
   194be:	68ee      	ldr	r6, [r5, #12]
   194c0:	b13e      	cbz	r6, 194d2 <notify_le_param_updated+0x5e>
			cb->le_param_updated(conn, conn->le.interval,
   194c2:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   194c6:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   194ca:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   194ce:	4620      	mov	r0, r4
   194d0:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   194d2:	69ad      	ldr	r5, [r5, #24]
   194d4:	e7ed      	b.n	194b2 <notify_le_param_updated+0x3e>
		if (cb->le_param_updated) {
   194d6:	68ee      	ldr	r6, [r5, #12]
   194d8:	b13e      	cbz	r6, 194ea <notify_le_param_updated+0x76>
			cb->le_param_updated(conn, conn->le.interval,
   194da:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   194de:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   194e2:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   194e6:	4620      	mov	r0, r4
   194e8:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   194ea:	351c      	adds	r5, #28
   194ec:	e7e4      	b.n	194b8 <notify_le_param_updated+0x44>
   194ee:	bf00      	nop
   194f0:	20003498 	.word	0x20003498
   194f4:	0002cabc 	.word	0x0002cabc
   194f8:	0002cabc 	.word	0x0002cabc

000194fc <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   194fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19500:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   19502:	4608      	mov	r0, r1
{
   19504:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   19506:	f00f fed6 	bl	292b6 <bt_le_conn_params_valid>
   1950a:	4605      	mov	r5, r0
   1950c:	b918      	cbnz	r0, 19516 <le_param_req+0x1a>
		return false;
   1950e:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   19510:	4628      	mov	r0, r5
   19512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   19516:	4b13      	ldr	r3, [pc, #76]	; (19564 <le_param_req+0x68>)
   19518:	681e      	ldr	r6, [r3, #0]
   1951a:	b946      	cbnz	r6, 1952e <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1951c:	4e12      	ldr	r6, [pc, #72]	; (19568 <le_param_req+0x6c>)
   1951e:	f8df 804c 	ldr.w	r8, [pc, #76]	; 1956c <le_param_req+0x70>
   19522:	4546      	cmp	r6, r8
   19524:	d2f4      	bcs.n	19510 <le_param_req+0x14>
		if (!cb->le_param_req) {
   19526:	68b3      	ldr	r3, [r6, #8]
   19528:	b983      	cbnz	r3, 1954c <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1952a:	361c      	adds	r6, #28
   1952c:	e7f9      	b.n	19522 <le_param_req+0x26>
		if (!cb->le_param_req) {
   1952e:	68b3      	ldr	r3, [r6, #8]
   19530:	b90b      	cbnz	r3, 19536 <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
   19532:	69b6      	ldr	r6, [r6, #24]
   19534:	e7f1      	b.n	1951a <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   19536:	4621      	mov	r1, r4
   19538:	4638      	mov	r0, r7
   1953a:	4798      	blx	r3
   1953c:	2800      	cmp	r0, #0
   1953e:	d0e6      	beq.n	1950e <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   19540:	4620      	mov	r0, r4
   19542:	f00f feb8 	bl	292b6 <bt_le_conn_params_valid>
   19546:	2800      	cmp	r0, #0
   19548:	d1f3      	bne.n	19532 <le_param_req+0x36>
   1954a:	e7e0      	b.n	1950e <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   1954c:	4621      	mov	r1, r4
   1954e:	4638      	mov	r0, r7
   19550:	4798      	blx	r3
   19552:	2800      	cmp	r0, #0
   19554:	d0db      	beq.n	1950e <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   19556:	4620      	mov	r0, r4
   19558:	f00f fead 	bl	292b6 <bt_le_conn_params_valid>
   1955c:	2800      	cmp	r0, #0
   1955e:	d1e4      	bne.n	1952a <le_param_req+0x2e>
   19560:	e7d5      	b.n	1950e <le_param_req+0x12>
   19562:	bf00      	nop
   19564:	20003498 	.word	0x20003498
   19568:	0002cabc 	.word	0x0002cabc
   1956c:	0002cabc 	.word	0x0002cabc

00019570 <bt_conn_identity_resolved>:

	return false;
}

void bt_conn_identity_resolved(struct bt_conn *conn)
{
   19570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   19574:	78c3      	ldrb	r3, [r0, #3]
{
   19576:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   19578:	b973      	cbnz	r3, 19598 <bt_conn_identity_resolved+0x28>
		rpa = &conn->le.resp_addr;
   1957a:	f100 0696 	add.w	r6, r0, #150	; 0x96
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   1957e:	4b10      	ldr	r3, [pc, #64]	; (195c0 <bt_conn_identity_resolved+0x50>)
   19580:	681d      	ldr	r5, [r3, #0]
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   19582:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
   19586:	b955      	cbnz	r5, 1959e <bt_conn_identity_resolved+0x2e>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19588:	4d0e      	ldr	r5, [pc, #56]	; (195c4 <bt_conn_identity_resolved+0x54>)
   1958a:	4f0f      	ldr	r7, [pc, #60]	; (195c8 <bt_conn_identity_resolved+0x58>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1958c:	f104 0888 	add.w	r8, r4, #136	; 0x88
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19590:	42bd      	cmp	r5, r7
   19592:	d30c      	bcc.n	195ae <bt_conn_identity_resolved+0x3e>
		}
	}
}
   19594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rpa = &conn->le.init_addr;
   19598:	f100 068f 	add.w	r6, r0, #143	; 0x8f
   1959c:	e7ef      	b.n	1957e <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   1959e:	692b      	ldr	r3, [r5, #16]
   195a0:	b11b      	cbz	r3, 195aa <bt_conn_identity_resolved+0x3a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   195a2:	463a      	mov	r2, r7
   195a4:	4631      	mov	r1, r6
   195a6:	4620      	mov	r0, r4
   195a8:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   195aa:	69ad      	ldr	r5, [r5, #24]
   195ac:	e7eb      	b.n	19586 <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   195ae:	692b      	ldr	r3, [r5, #16]
   195b0:	b11b      	cbz	r3, 195ba <bt_conn_identity_resolved+0x4a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   195b2:	4642      	mov	r2, r8
   195b4:	4631      	mov	r1, r6
   195b6:	4620      	mov	r0, r4
   195b8:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   195ba:	351c      	adds	r5, #28
   195bc:	e7e8      	b.n	19590 <bt_conn_identity_resolved+0x20>
   195be:	bf00      	nop
   195c0:	20003498 	.word	0x20003498
   195c4:	0002cabc 	.word	0x0002cabc
   195c8:	0002cabc 	.word	0x0002cabc

000195cc <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   195cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
   195ce:	7a43      	ldrb	r3, [r0, #9]
   195d0:	7283      	strb	r3, [r0, #10]
{
   195d2:	4604      	mov	r4, r0
   195d4:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   195d6:	f010 fa5d 	bl	29a94 <bt_l2cap_security_changed>
	if (IS_ENABLED(CONFIG_BT_ISO_CENTRAL)) {
		bt_iso_security_changed(conn, hci_err);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   195da:	4b0c      	ldr	r3, [pc, #48]	; (1960c <bt_conn_security_changed+0x40>)
   195dc:	681d      	ldr	r5, [r3, #0]
   195de:	b925      	cbnz	r5, 195ea <bt_conn_security_changed+0x1e>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   195e0:	4d0b      	ldr	r5, [pc, #44]	; (19610 <bt_conn_security_changed+0x44>)
   195e2:	4f0c      	ldr	r7, [pc, #48]	; (19614 <bt_conn_security_changed+0x48>)
   195e4:	42bd      	cmp	r5, r7
   195e6:	d308      	bcc.n	195fa <bt_conn_security_changed+0x2e>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   195e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->security_changed) {
   195ea:	696b      	ldr	r3, [r5, #20]
   195ec:	b11b      	cbz	r3, 195f6 <bt_conn_security_changed+0x2a>
			cb->security_changed(conn, conn->sec_level, err);
   195ee:	7a61      	ldrb	r1, [r4, #9]
   195f0:	4632      	mov	r2, r6
   195f2:	4620      	mov	r0, r4
   195f4:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   195f6:	69ad      	ldr	r5, [r5, #24]
   195f8:	e7f1      	b.n	195de <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
   195fa:	696b      	ldr	r3, [r5, #20]
   195fc:	b11b      	cbz	r3, 19606 <bt_conn_security_changed+0x3a>
			cb->security_changed(conn, conn->sec_level, err);
   195fe:	7a61      	ldrb	r1, [r4, #9]
   19600:	4632      	mov	r2, r6
   19602:	4620      	mov	r0, r4
   19604:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19606:	351c      	adds	r5, #28
   19608:	e7ec      	b.n	195e4 <bt_conn_security_changed+0x18>
   1960a:	bf00      	nop
   1960c:	20003498 	.word	0x20003498
   19610:	0002cabc 	.word	0x0002cabc
   19614:	0002cabc 	.word	0x0002cabc

00019618 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   19618:	4b02      	ldr	r3, [pc, #8]	; (19624 <bt_conn_cb_register+0xc>)
   1961a:	681a      	ldr	r2, [r3, #0]
   1961c:	6182      	str	r2, [r0, #24]
	callback_list = cb;
   1961e:	6018      	str	r0, [r3, #0]
}
   19620:	4770      	bx	lr
   19622:	bf00      	nop
   19624:	20003498 	.word	0x20003498

00019628 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   19628:	b570      	push	{r4, r5, r6, lr}
   1962a:	4606      	mov	r6, r0
   1962c:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   1962e:	480a      	ldr	r0, [pc, #40]	; (19658 <bt_conn_add_le+0x30>)
   19630:	2101      	movs	r1, #1
   19632:	f7ff fc6b 	bl	18f0c <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   19636:	4604      	mov	r4, r0
   19638:	b160      	cbz	r0, 19654 <bt_conn_add_le+0x2c>
		return NULL;
	}

	conn->id = id;
   1963a:	7206      	strb	r6, [r0, #8]
   1963c:	2207      	movs	r2, #7
   1963e:	4629      	mov	r1, r5
   19640:	3088      	adds	r0, #136	; 0x88
   19642:	f00f fc71 	bl	28f28 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   19646:	2301      	movs	r3, #1
   19648:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   1964a:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   1964c:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   1964e:	4b03      	ldr	r3, [pc, #12]	; (1965c <bt_conn_add_le+0x34>)
   19650:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   19654:	4620      	mov	r0, r4
   19656:	bd70      	pop	{r4, r5, r6, pc}
   19658:	20001fb0 	.word	0x20001fb0
   1965c:	00280018 	.word	0x00280018

00019660 <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   19660:	b570      	push	{r4, r5, r6, lr}
   19662:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   19664:	480a      	ldr	r0, [pc, #40]	; (19690 <bt_conn_lookup_addr_le+0x30>)
{
   19666:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   19668:	f010 f8b1 	bl	297ce <bt_conn_ref>
   1966c:	4604      	mov	r4, r0

		if (!conn) {
   1966e:	b120      	cbz	r0, 1967a <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   19670:	7883      	ldrb	r3, [r0, #2]
   19672:	2b01      	cmp	r3, #1
   19674:	d004      	beq.n	19680 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   19676:	f010 f8c6 	bl	29806 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   1967a:	2400      	movs	r4, #0
}
   1967c:	4620      	mov	r0, r4
   1967e:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   19680:	4632      	mov	r2, r6
   19682:	4629      	mov	r1, r5
   19684:	f010 f96f 	bl	29966 <bt_conn_is_peer_addr_le>
   19688:	2800      	cmp	r0, #0
   1968a:	d1f7      	bne.n	1967c <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   1968c:	4620      	mov	r0, r4
   1968e:	e7f2      	b.n	19676 <bt_conn_lookup_addr_le+0x16>
   19690:	20001fb0 	.word	0x20001fb0

00019694 <bt_conn_exists_le>:
{
   19694:	b5b0      	push	{r4, r5, r7, lr}
   19696:	af00      	add	r7, sp, #0
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   19698:	f7ff ffe2 	bl	19660 <bt_conn_lookup_addr_le>
	if (conn) {
   1969c:	4604      	mov	r4, r0
   1969e:	b1e0      	cbz	r0, 196da <bt_conn_exists_le+0x46>
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   196a0:	7b43      	ldrb	r3, [r0, #13]
	switch (state) {
   196a2:	2b08      	cmp	r3, #8
   196a4:	bf96      	itet	ls
   196a6:	4a0e      	ldrls	r2, [pc, #56]	; (196e0 <bt_conn_exists_le+0x4c>)
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   196a8:	4b0e      	ldrhi	r3, [pc, #56]	; (196e4 <bt_conn_exists_le+0x50>)
   196aa:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   196ae:	466d      	mov	r5, sp
   196b0:	b088      	sub	sp, #32
   196b2:	466a      	mov	r2, sp
   196b4:	490c      	ldr	r1, [pc, #48]	; (196e8 <bt_conn_exists_le+0x54>)
   196b6:	480d      	ldr	r0, [pc, #52]	; (196ec <bt_conn_exists_le+0x58>)
   196b8:	e9c2 1305 	strd	r1, r3, [r2, #20]
   196bc:	f44f 7300 	mov.w	r3, #512	; 0x200
   196c0:	8393      	strh	r3, [r2, #28]
   196c2:	4b0b      	ldr	r3, [pc, #44]	; (196f0 <bt_conn_exists_le+0x5c>)
   196c4:	f842 3f10 	str.w	r3, [r2, #16]!
   196c8:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   196cc:	f010 f84d 	bl	2976a <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   196d0:	4620      	mov	r0, r4
   196d2:	46ad      	mov	sp, r5
   196d4:	f010 f897 	bl	29806 <bt_conn_unref>
		return true;
   196d8:	2001      	movs	r0, #1
}
   196da:	46bd      	mov	sp, r7
   196dc:	bdb0      	pop	{r4, r5, r7, pc}
   196de:	bf00      	nop
   196e0:	0002d0a4 	.word	0x0002d0a4
   196e4:	0002f23d 	.word	0x0002f23d
   196e8:	0002f28b 	.word	0x0002f28b
   196ec:	0002cafc 	.word	0x0002cafc
   196f0:	01000003 	.word	0x01000003

000196f4 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   196f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   196f6:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   196f8:	480e      	ldr	r0, [pc, #56]	; (19734 <bt_conn_lookup_state_le+0x40>)
{
   196fa:	460e      	mov	r6, r1
   196fc:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   196fe:	f010 f866 	bl	297ce <bt_conn_ref>

		if (!conn) {
   19702:	4604      	mov	r4, r0
   19704:	b120      	cbz	r0, 19710 <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   19706:	7883      	ldrb	r3, [r0, #2]
   19708:	2b01      	cmp	r3, #1
   1970a:	d003      	beq.n	19714 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   1970c:	f010 f87b 	bl	29806 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   19710:	2400      	movs	r4, #0
   19712:	e00d      	b.n	19730 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   19714:	b136      	cbz	r6, 19724 <bt_conn_lookup_state_le+0x30>
   19716:	4632      	mov	r2, r6
   19718:	4629      	mov	r1, r5
   1971a:	f010 f924 	bl	29966 <bt_conn_is_peer_addr_le>
   1971e:	b908      	cbnz	r0, 19724 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   19720:	4620      	mov	r0, r4
   19722:	e7f3      	b.n	1970c <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   19724:	7b63      	ldrb	r3, [r4, #13]
   19726:	42bb      	cmp	r3, r7
   19728:	d1fa      	bne.n	19720 <bt_conn_lookup_state_le+0x2c>
   1972a:	7a23      	ldrb	r3, [r4, #8]
   1972c:	42ab      	cmp	r3, r5
   1972e:	d1f7      	bne.n	19720 <bt_conn_lookup_state_le+0x2c>
}
   19730:	4620      	mov	r0, r4
   19732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19734:	20001fb0 	.word	0x20001fb0

00019738 <send_conn_le_param_update>:
{
   19738:	b538      	push	{r3, r4, r5, lr}
   1973a:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   1973c:	4608      	mov	r0, r1
{
   1973e:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   19740:	f00f fdb9 	bl	292b6 <bt_le_conn_params_valid>
   19744:	b348      	cbz	r0, 1979a <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   19746:	4b16      	ldr	r3, [pc, #88]	; (197a0 <send_conn_le_param_update+0x68>)
   19748:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
   1974c:	0799      	lsls	r1, r3, #30
   1974e:	d407      	bmi.n	19760 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   19750:	78e3      	ldrb	r3, [r4, #3]
   19752:	b183      	cbz	r3, 19776 <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   19754:	4629      	mov	r1, r5
   19756:	4620      	mov	r0, r4
}
   19758:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   1975c:	f000 bab2 	b.w	19cc4 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   19760:	f894 30ad 	ldrb.w	r3, [r4, #173]	; 0xad
   19764:	079a      	lsls	r2, r3, #30
   19766:	d5f3      	bpl.n	19750 <send_conn_le_param_update+0x18>
   19768:	f3bf 8f5b 	dmb	ish
   1976c:	6863      	ldr	r3, [r4, #4]
   1976e:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   19772:	055b      	lsls	r3, r3, #21
   19774:	d4ec      	bmi.n	19750 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   19776:	4629      	mov	r1, r5
   19778:	4620      	mov	r0, r4
   1977a:	f010 f916 	bl	299aa <bt_conn_le_conn_update>
		if (rc == 0) {
   1977e:	b958      	cbnz	r0, 19798 <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
   19780:	882b      	ldrh	r3, [r5, #0]
   19782:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   19786:	886b      	ldrh	r3, [r5, #2]
   19788:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   1978c:	88ab      	ldrh	r3, [r5, #4]
   1978e:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   19792:	88eb      	ldrh	r3, [r5, #6]
   19794:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   19798:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1979a:	f06f 0015 	mvn.w	r0, #21
   1979e:	e7fb      	b.n	19798 <send_conn_le_param_update+0x60>
   197a0:	20000390 	.word	0x20000390

000197a4 <deferred_work>:
{
   197a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   197a8:	b082      	sub	sp, #8
	if (conn->state == BT_CONN_DISCONNECTED) {
   197aa:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
   197ae:	af00      	add	r7, sp, #0
   197b0:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   197b2:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   197b6:	bb0b      	cbnz	r3, 197fc <deferred_work+0x58>
		bt_l2cap_disconnected(conn);
   197b8:	4630      	mov	r0, r6
   197ba:	f010 f953 	bl	29a64 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   197be:	4b39      	ldr	r3, [pc, #228]	; (198a4 <deferred_work+0x100>)
   197c0:	681d      	ldr	r5, [r3, #0]
   197c2:	b95d      	cbnz	r5, 197dc <deferred_work+0x38>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   197c4:	4d38      	ldr	r5, [pc, #224]	; (198a8 <deferred_work+0x104>)
   197c6:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 198ac <deferred_work+0x108>
   197ca:	4545      	cmp	r5, r8
   197cc:	d30e      	bcc.n	197ec <deferred_work+0x48>
		bt_conn_unref(conn);
   197ce:	4630      	mov	r0, r6
   197d0:	f010 f819 	bl	29806 <bt_conn_unref>
}
   197d4:	3708      	adds	r7, #8
   197d6:	46bd      	mov	sp, r7
   197d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cb->disconnected) {
   197dc:	686b      	ldr	r3, [r5, #4]
   197de:	b11b      	cbz	r3, 197e8 <deferred_work+0x44>
			cb->disconnected(conn, conn->err);
   197e0:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   197e4:	4630      	mov	r0, r6
   197e6:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   197e8:	69ad      	ldr	r5, [r5, #24]
   197ea:	e7ea      	b.n	197c2 <deferred_work+0x1e>
		if (cb->disconnected) {
   197ec:	686b      	ldr	r3, [r5, #4]
   197ee:	b11b      	cbz	r3, 197f8 <deferred_work+0x54>
			cb->disconnected(conn, conn->err);
   197f0:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   197f4:	4630      	mov	r0, r6
   197f6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   197f8:	351c      	adds	r5, #28
   197fa:	e7e6      	b.n	197ca <deferred_work+0x26>
	if (conn->type != BT_CONN_TYPE_LE) {
   197fc:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   19800:	2b01      	cmp	r3, #1
   19802:	d1e7      	bne.n	197d4 <deferred_work+0x30>
	if (atomic_test_and_clear_bit(conn->flags,
   19804:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19808:	f46f 7100 	mvn.w	r1, #512	; 0x200
   1980c:	4628      	mov	r0, r5
   1980e:	f00f ff9d 	bl	2974c <atomic_and>
   19812:	0581      	lsls	r1, r0, #22
   19814:	d52a      	bpl.n	1986c <deferred_work+0xc8>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   19816:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   19818:	603b      	str	r3, [r7, #0]
   1981a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1981c:	607b      	str	r3, [r7, #4]
		err = send_conn_le_param_update(conn, param);
   1981e:	4639      	mov	r1, r7
   19820:	4630      	mov	r0, r6
   19822:	f7ff ff89 	bl	19738 <send_conn_le_param_update>
		if (!err) {
   19826:	b988      	cbnz	r0, 1984c <deferred_work+0xa8>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19828:	f46f 7180 	mvn.w	r1, #256	; 0x100
   1982c:	4628      	mov	r0, r5
   1982e:	f00f ff8d 	bl	2974c <atomic_and>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19832:	f3bf 8f5b 	dmb	ish
   19836:	e855 3f00 	ldrex	r3, [r5]
   1983a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1983e:	e845 3200 	strex	r2, r3, [r5]
   19842:	2a00      	cmp	r2, #0
   19844:	d1f7      	bne.n	19836 <deferred_work+0x92>
   19846:	f3bf 8f5b 	dmb	ish
   1984a:	e7c3      	b.n	197d4 <deferred_work+0x30>
			LOG_WRN("Send LE param update failed (err %d)", err);
   1984c:	466c      	mov	r4, sp
   1984e:	b088      	sub	sp, #32
   19850:	466a      	mov	r2, sp
   19852:	4b17      	ldr	r3, [pc, #92]	; (198b0 <deferred_work+0x10c>)
			LOG_WRN("Send auto LE param update failed (err %d)",
   19854:	e9c2 3005 	strd	r3, r0, [r2, #20]
   19858:	2303      	movs	r3, #3
   1985a:	f842 3f10 	str.w	r3, [r2, #16]!
   1985e:	4815      	ldr	r0, [pc, #84]	; (198b4 <deferred_work+0x110>)
   19860:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   19864:	f00f ff81 	bl	2976a <z_log_msg_static_create.constprop.0>
   19868:	46a5      	mov	sp, r4
   1986a:	e7e2      	b.n	19832 <deferred_work+0x8e>
		param = BT_LE_CONN_PARAM(
   1986c:	4a12      	ldr	r2, [pc, #72]	; (198b8 <deferred_work+0x114>)
   1986e:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
   19872:	e9c7 2300 	strd	r2, r3, [r7]
		err = send_conn_le_param_update(conn, param);
   19876:	4639      	mov	r1, r7
   19878:	4630      	mov	r0, r6
   1987a:	f7ff ff5d 	bl	19738 <send_conn_le_param_update>
		if (!err) {
   1987e:	b960      	cbnz	r0, 1989a <deferred_work+0xf6>
   19880:	f3bf 8f5b 	dmb	ish
   19884:	e855 3f00 	ldrex	r3, [r5]
   19888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1988c:	e845 3200 	strex	r2, r3, [r5]
   19890:	2a00      	cmp	r2, #0
   19892:	d1f7      	bne.n	19884 <deferred_work+0xe0>
   19894:	f3bf 8f5b 	dmb	ish
   19898:	e7cb      	b.n	19832 <deferred_work+0x8e>
			LOG_WRN("Send auto LE param update failed (err %d)",
   1989a:	466c      	mov	r4, sp
   1989c:	b088      	sub	sp, #32
   1989e:	466a      	mov	r2, sp
   198a0:	4b06      	ldr	r3, [pc, #24]	; (198bc <deferred_work+0x118>)
   198a2:	e7d7      	b.n	19854 <deferred_work+0xb0>
   198a4:	20003498 	.word	0x20003498
   198a8:	0002cabc 	.word	0x0002cabc
   198ac:	0002cabc 	.word	0x0002cabc
   198b0:	0002f2ae 	.word	0x0002f2ae
   198b4:	0002cafc 	.word	0x0002cafc
   198b8:	00280018 	.word	0x00280018
   198bc:	0002f2d3 	.word	0x0002f2d3

000198c0 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   198c0:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   198c2:	4801      	ldr	r0, [pc, #4]	; (198c8 <bt_conn_create_frag_timeout+0x8>)
   198c4:	f7ff bdc0 	b.w	19448 <bt_conn_create_pdu_timeout>
   198c8:	20000ba8 	.word	0x20000ba8

000198cc <bt_conn_process_tx>:
{
   198cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   198d0:	7b43      	ldrb	r3, [r0, #13]
{
   198d2:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   198d4:	b95b      	cbnz	r3, 198ee <bt_conn_process_tx+0x22>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   198d6:	f06f 0140 	mvn.w	r1, #64	; 0x40
   198da:	3004      	adds	r0, #4
   198dc:	f00f ff36 	bl	2974c <atomic_and>
   198e0:	0643      	lsls	r3, r0, #25
   198e2:	d504      	bpl.n	198ee <bt_conn_process_tx+0x22>
		conn_cleanup(conn);
   198e4:	4628      	mov	r0, r5
}
   198e6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		conn_cleanup(conn);
   198ea:	f00f bf4d 	b.w	29788 <conn_cleanup>
	return z_impl_k_queue_peek_head(queue);
   198ee:	f105 0038 	add.w	r0, r5, #56	; 0x38
   198f2:	f012 fae5 	bl	2bec0 <z_impl_k_queue_peek_head>
	BT_ASSERT(buf);
   198f6:	4604      	mov	r4, r0
   198f8:	b960      	cbnz	r0, 19914 <bt_conn_process_tx+0x48>
   198fa:	4a34      	ldr	r2, [pc, #208]	; (199cc <bt_conn_process_tx+0x100>)
   198fc:	4934      	ldr	r1, [pc, #208]	; (199d0 <bt_conn_process_tx+0x104>)
   198fe:	4835      	ldr	r0, [pc, #212]	; (199d4 <bt_conn_process_tx+0x108>)
   19900:	f44f 735d 	mov.w	r3, #884	; 0x374
   19904:	f00e f977 	bl	27bf6 <assert_print>
   19908:	4040      	eors	r0, r0
   1990a:	f380 8811 	msr	BASEPRI, r0
   1990e:	f04f 0003 	mov.w	r0, #3
   19912:	df02      	svc	2
	buf = net_buf_ref(buf);
   19914:	4620      	mov	r0, r4
   19916:	f011 fcef 	bl	2b2f8 <net_buf_ref>
	return bt_dev.le.acl_mtu;
   1991a:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 199d8 <bt_conn_process_tx+0x10c>
	if (buf->len <= conn_mtu(conn) && !tx_data(buf)->is_cont) {
   1991e:	8a02      	ldrh	r2, [r0, #16]
   19920:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
   19924:	429a      	cmp	r2, r3
	buf = net_buf_ref(buf);
   19926:	4604      	mov	r4, r0
	return bt_dev.le.acl_mtu;
   19928:	7f02      	ldrb	r2, [r0, #28]
	if (buf->len <= conn_mtu(conn) && !tx_data(buf)->is_cont) {
   1992a:	d807      	bhi.n	1993c <bt_conn_process_tx+0x70>
   1992c:	b932      	cbnz	r2, 1993c <bt_conn_process_tx+0x70>
		return send_frag(conn, buf, NULL, FRAG_SINGLE);
   1992e:	2302      	movs	r3, #2
	return send_frag(conn, buf, NULL, FRAG_END);
   19930:	4621      	mov	r1, r4
   19932:	4628      	mov	r0, r5
   19934:	f7ff fa12 	bl	18d5c <send_frag>
   19938:	4606      	mov	r6, r0
   1993a:	e030      	b.n	1999e <bt_conn_process_tx+0xd2>
	if (tx_data(buf)->is_cont) {
   1993c:	4617      	mov	r7, r2
		frag = bt_conn_create_frag(0);
   1993e:	f04f 0a00 	mov.w	sl, #0
	while (buf->len > conn_mtu(conn)) {
   19942:	8a22      	ldrh	r2, [r4, #16]
   19944:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
   19948:	429a      	cmp	r2, r3
   1994a:	d804      	bhi.n	19956 <bt_conn_process_tx+0x8a>
	tx_data(buf)->is_cont = true;
   1994c:	2301      	movs	r3, #1
   1994e:	7723      	strb	r3, [r4, #28]
	return send_frag(conn, buf, NULL, FRAG_END);
   19950:	2200      	movs	r2, #0
   19952:	2303      	movs	r3, #3
   19954:	e7ec      	b.n	19930 <bt_conn_process_tx+0x64>
		frag = bt_conn_create_frag(0);
   19956:	f04f 33ff 	mov.w	r3, #4294967295
   1995a:	f04f 32ff 	mov.w	r2, #4294967295
   1995e:	2000      	movs	r0, #0
   19960:	f7ff ffae 	bl	198c0 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   19964:	7b6b      	ldrb	r3, [r5, #13]
   19966:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   19968:	4680      	mov	r8, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1996a:	d006      	beq.n	1997a <bt_conn_process_tx+0xae>
		net_buf_unref(frag);
   1996c:	f005 f89c 	bl	1eaa8 <net_buf_unref>
	net_buf_unref(buf);
   19970:	4620      	mov	r0, r4
}
   19972:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	net_buf_unref(buf);
   19976:	f005 b897 	b.w	1eaa8 <net_buf_unref>
	tx_data(frag)->tx = NULL;
   1997a:	f8c0 a018 	str.w	sl, [r0, #24]
	tx_data(frag)->is_cont = false;
   1997e:	f880 a01c 	strb.w	sl, [r0, #28]
		err = send_frag(conn, buf, frag, flags);
   19982:	4602      	mov	r2, r0
   19984:	463b      	mov	r3, r7
   19986:	4621      	mov	r1, r4
   19988:	4628      	mov	r0, r5
   1998a:	f7ff f9e7 	bl	18d5c <send_frag>
		if (err) {
   1998e:	4606      	mov	r6, r0
   19990:	b1b8      	cbz	r0, 199c2 <bt_conn_process_tx+0xf6>
			tx_data(buf)->is_cont = flags != FRAG_START;
   19992:	f007 0701 	and.w	r7, r7, #1
   19996:	7727      	strb	r7, [r4, #28]
			net_buf_unref(frag);
   19998:	4640      	mov	r0, r8
   1999a:	f005 f885 	bl	1eaa8 <net_buf_unref>
	net_buf_unref(buf);
   1999e:	4620      	mov	r0, r4
   199a0:	f005 f882 	bl	1eaa8 <net_buf_unref>
	if (err  == -EIO) {
   199a4:	3605      	adds	r6, #5
   199a6:	d10e      	bne.n	199c6 <bt_conn_process_tx+0xfa>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   199a8:	69a6      	ldr	r6, [r4, #24]
		tx_data(buf)->tx = NULL;
   199aa:	2300      	movs	r3, #0
   199ac:	61a3      	str	r3, [r4, #24]
		net_buf_unref(buf);
   199ae:	4620      	mov	r0, r4
   199b0:	f005 f87a 	bl	1eaa8 <net_buf_unref>
		if (tx) {
   199b4:	b13e      	cbz	r6, 199c6 <bt_conn_process_tx+0xfa>
			conn_tx_destroy(conn, tx);
   199b6:	4631      	mov	r1, r6
   199b8:	4628      	mov	r0, r5
}
   199ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			conn_tx_destroy(conn, tx);
   199be:	f7ff b9b7 	b.w	18d30 <conn_tx_destroy>
		flags = FRAG_CONT;
   199c2:	2701      	movs	r7, #1
   199c4:	e7bd      	b.n	19942 <bt_conn_process_tx+0x76>
}
   199c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   199ca:	bf00      	nop
   199cc:	0002f2fd 	.word	0x0002f2fd
   199d0:	0002fffe 	.word	0x0002fffe
   199d4:	0002e6b3 	.word	0x0002e6b3
   199d8:	20000390 	.word	0x20000390

000199dc <bt_conn_auth_info_cb_register>:
}
#endif

int bt_conn_auth_info_cb_register(struct bt_conn_auth_info_cb *cb)
{
	CHECKIF(cb == NULL) {
   199dc:	b168      	cbz	r0, 199fa <bt_conn_auth_info_cb_register+0x1e>
	parent->next = child;
   199de:	2300      	movs	r3, #0
   199e0:	60c3      	str	r3, [r0, #12]
	return list->tail;
   199e2:	4b07      	ldr	r3, [pc, #28]	; (19a00 <bt_conn_auth_info_cb_register+0x24>)
   199e4:	6859      	ldr	r1, [r3, #4]
		return -EINVAL;
	}

	sys_slist_append(&bt_auth_info_cbs, &cb->node);
   199e6:	f100 020c 	add.w	r2, r0, #12
Z_GENLIST_APPEND(slist, snode)
   199ea:	b919      	cbnz	r1, 199f4 <bt_conn_auth_info_cb_register+0x18>
	list->head = node;
   199ec:	e9c3 2200 	strd	r2, r2, [r3]

	return 0;
   199f0:	2000      	movs	r0, #0
   199f2:	4770      	bx	lr
	parent->next = child;
   199f4:	600a      	str	r2, [r1, #0]
	list->tail = node;
   199f6:	605a      	str	r2, [r3, #4]
}
   199f8:	e7fa      	b.n	199f0 <bt_conn_auth_info_cb_register+0x14>
		return -EINVAL;
   199fa:	f06f 0015 	mvn.w	r0, #21
}
   199fe:	4770      	bx	lr
   19a00:	2000349c 	.word	0x2000349c

00019a04 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   19a04:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   19a06:	480c      	ldr	r0, [pc, #48]	; (19a38 <bt_conn_init+0x34>)
   19a08:	f012 fa39 	bl	2be7e <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   19a0c:	490b      	ldr	r1, [pc, #44]	; (19a3c <bt_conn_init+0x38>)
   19a0e:	480a      	ldr	r0, [pc, #40]	; (19a38 <bt_conn_init+0x34>)
   19a10:	f012 fa41 	bl	2be96 <k_queue_append>
   19a14:	490a      	ldr	r1, [pc, #40]	; (19a40 <bt_conn_init+0x3c>)
   19a16:	4808      	ldr	r0, [pc, #32]	; (19a38 <bt_conn_init+0x34>)
   19a18:	f012 fa3d 	bl	2be96 <k_queue_append>
   19a1c:	4909      	ldr	r1, [pc, #36]	; (19a44 <bt_conn_init+0x40>)
   19a1e:	4806      	ldr	r0, [pc, #24]	; (19a38 <bt_conn_init+0x34>)
   19a20:	f012 fa39 	bl	2be96 <k_queue_append>
	}

	bt_att_init();
   19a24:	f001 f8d2 	bl	1abcc <bt_att_init>

	err = bt_smp_init();
   19a28:	f004 fc7a 	bl	1e320 <bt_smp_init>
	if (err) {
   19a2c:	4604      	mov	r4, r0
   19a2e:	b908      	cbnz	r0, 19a34 <bt_conn_init+0x30>
		return err;
	}

	bt_l2cap_init();
   19a30:	f010 f87d 	bl	29b2e <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   19a34:	4620      	mov	r0, r4
   19a36:	bd10      	pop	{r4, pc}
   19a38:	20000b38 	.word	0x20000b38
   19a3c:	20003468 	.word	0x20003468
   19a40:	20003478 	.word	0x20003478
   19a44:	20003488 	.word	0x20003488

00019a48 <l2cap_create_le_sig_pdu.part.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   19a48:	b580      	push	{r7, lr}
   19a4a:	af00      	add	r7, sp, #0
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
	if (!buf) {
		/* If it was not possible to allocate a buffer within the
		 * timeout return NULL.
		 */
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   19a4c:	b088      	sub	sp, #32
   19a4e:	466a      	mov	r2, sp
   19a50:	4b06      	ldr	r3, [pc, #24]	; (19a6c <l2cap_create_le_sig_pdu.part.0+0x24>)
   19a52:	e9c2 3005 	strd	r3, r0, [r2, #20]
   19a56:	2303      	movs	r3, #3
   19a58:	f842 3f10 	str.w	r3, [r2, #16]!
   19a5c:	4804      	ldr	r0, [pc, #16]	; (19a70 <l2cap_create_le_sig_pdu.part.0+0x28>)
   19a5e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19a62:	f00f ffcb 	bl	299fc <z_log_msg_static_create.constprop.0>
	hdr->code = code;
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);

	return buf;
}
   19a66:	2000      	movs	r0, #0
   19a68:	46bd      	mov	sp, r7
   19a6a:	bd80      	pop	{r7, pc}
   19a6c:	0002f3a6 	.word	0x0002f3a6
   19a70:	0002cb3c 	.word	0x0002cb3c

00019a74 <l2cap_accept.part.0>:
	 */
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   19a74:	b580      	push	{r7, lr}
   19a76:	af00      	add	r7, sp, #0
		*chan = &l2cap->chan.chan;

		return 0;
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);
   19a78:	b088      	sub	sp, #32
   19a7a:	466a      	mov	r2, sp
   19a7c:	4b07      	ldr	r3, [pc, #28]	; (19a9c <l2cap_accept.part.0+0x28>)
   19a7e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   19a82:	2303      	movs	r3, #3
   19a84:	f842 3f10 	str.w	r3, [r2, #16]!
   19a88:	4805      	ldr	r0, [pc, #20]	; (19aa0 <l2cap_accept.part.0+0x2c>)
   19a8a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19a8e:	f00f ffb5 	bl	299fc <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   19a92:	f06f 000b 	mvn.w	r0, #11
   19a96:	46bd      	mov	sp, r7
   19a98:	bd80      	pop	{r7, pc}
   19a9a:	bf00      	nop
   19a9c:	0002f3ce 	.word	0x0002f3ce
   19aa0:	0002cb3c 	.word	0x0002cb3c

00019aa4 <l2cap_accept>:
		if (l2cap->chan.chan.conn) {
   19aa4:	4b04      	ldr	r3, [pc, #16]	; (19ab8 <l2cap_accept+0x14>)
   19aa6:	681a      	ldr	r2, [r3, #0]
   19aa8:	b10a      	cbz	r2, 19aae <l2cap_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   19aaa:	f7ff bfe3 	b.w	19a74 <l2cap_accept.part.0>
		l2cap->chan.chan.ops = &ops;
   19aae:	4803      	ldr	r0, [pc, #12]	; (19abc <l2cap_accept+0x18>)
   19ab0:	6058      	str	r0, [r3, #4]
		*chan = &l2cap->chan.chan;
   19ab2:	600b      	str	r3, [r1, #0]
}
   19ab4:	4610      	mov	r0, r2
   19ab6:	4770      	bx	lr
   19ab8:	200034a8 	.word	0x200034a8
   19abc:	0002d0e8 	.word	0x0002d0e8

00019ac0 <bt_l2cap_connected>:
{
   19ac0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   19ac2:	4d24      	ldr	r5, [pc, #144]	; (19b54 <bt_l2cap_connected+0x94>)
   19ac4:	4f24      	ldr	r7, [pc, #144]	; (19b58 <bt_l2cap_connected+0x98>)
{
   19ac6:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   19ac8:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   19aca:	42bd      	cmp	r5, r7
   19acc:	d301      	bcc.n	19ad2 <bt_l2cap_connected+0x12>
}
   19ace:	b003      	add	sp, #12
   19ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (fchan->accept(conn, &chan) < 0) {
   19ad2:	686b      	ldr	r3, [r5, #4]
   19ad4:	a901      	add	r1, sp, #4
   19ad6:	4620      	mov	r0, r4
   19ad8:	4798      	blx	r3
   19ada:	2800      	cmp	r0, #0
   19adc:	db34      	blt.n	19b48 <bt_l2cap_connected+0x88>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   19ade:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   19ae0:	882a      	ldrh	r2, [r5, #0]
   19ae2:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   19ae4:	849a      	strh	r2, [r3, #36]	; 0x24
   19ae6:	f103 0210 	add.w	r2, r3, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   19aea:	68a8      	ldr	r0, [r5, #8]
   19aec:	f3bf 8f5b 	dmb	ish
   19af0:	e852 1f00 	ldrex	r1, [r2]
   19af4:	e842 6c00 	strex	ip, r6, [r2]
   19af8:	f1bc 0f00 	cmp.w	ip, #0
   19afc:	d1f8      	bne.n	19af0 <bt_l2cap_connected+0x30>
   19afe:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   19b02:	609e      	str	r6, [r3, #8]
	return list->tail;
   19b04:	6d61      	ldr	r1, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   19b06:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   19b0a:	b9f9      	cbnz	r1, 19b4c <bt_l2cap_connected+0x8c>
	list->head = node;
   19b0c:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
	chan->conn = conn;
   19b10:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   19b12:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   19b14:	9801      	ldr	r0, [sp, #4]
   19b16:	6843      	ldr	r3, [r0, #4]
   19b18:	681b      	ldr	r3, [r3, #0]
   19b1a:	b103      	cbz	r3, 19b1e <bt_l2cap_connected+0x5e>
			chan->ops->connected(chan);
   19b1c:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19b1e:	9b01      	ldr	r3, [sp, #4]
   19b20:	f3bf 8f5b 	dmb	ish
   19b24:	3310      	adds	r3, #16
   19b26:	e853 1f00 	ldrex	r1, [r3]
   19b2a:	f041 0101 	orr.w	r1, r1, #1
   19b2e:	e843 1200 	strex	r2, r1, [r3]
   19b32:	2a00      	cmp	r2, #0
   19b34:	d1f7      	bne.n	19b26 <bt_l2cap_connected+0x66>
   19b36:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   19b3a:	9801      	ldr	r0, [sp, #4]
   19b3c:	6843      	ldr	r3, [r0, #4]
   19b3e:	69db      	ldr	r3, [r3, #28]
   19b40:	b113      	cbz	r3, 19b48 <bt_l2cap_connected+0x88>
			chan->ops->status(chan, chan->status);
   19b42:	f100 0110 	add.w	r1, r0, #16
   19b46:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   19b48:	350c      	adds	r5, #12
   19b4a:	e7be      	b.n	19aca <bt_l2cap_connected+0xa>
	parent->next = child;
   19b4c:	600a      	str	r2, [r1, #0]
	list->tail = node;
   19b4e:	6562      	str	r2, [r4, #84]	; 0x54
}
   19b50:	e7de      	b.n	19b10 <bt_l2cap_connected+0x50>
   19b52:	bf00      	nop
   19b54:	0002ca98 	.word	0x0002ca98
   19b58:	0002cabc 	.word	0x0002cabc

00019b5c <l2cap_recv>:
{
   19b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   19b5e:	b089      	sub	sp, #36	; 0x24
	if (buf->len < sizeof(*hdr)) {
   19b60:	8a0b      	ldrh	r3, [r1, #16]
   19b62:	2b03      	cmp	r3, #3
{
   19b64:	af02      	add	r7, sp, #8
   19b66:	4606      	mov	r6, r0
   19b68:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   19b6a:	d80b      	bhi.n	19b84 <l2cap_recv+0x28>
		LOG_ERR("Too small L2CAP signaling PDU");
   19b6c:	4b30      	ldr	r3, [pc, #192]	; (19c30 <l2cap_recv+0xd4>)
		LOG_ERR("Invalid ident value in L2CAP PDU");
   19b6e:	617b      	str	r3, [r7, #20]
   19b70:	2302      	movs	r3, #2
   19b72:	4830      	ldr	r0, [pc, #192]	; (19c34 <l2cap_recv+0xd8>)
   19b74:	613b      	str	r3, [r7, #16]
   19b76:	f107 0210 	add.w	r2, r7, #16
   19b7a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19b7e:	f00f ff3d 	bl	299fc <z_log_msg_static_create.constprop.0>
		return 0;
   19b82:	e019      	b.n	19bb8 <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   19b84:	2104      	movs	r1, #4
   19b86:	f105 000c 	add.w	r0, r5, #12
   19b8a:	f011 fc06 	bl	2b39a <net_buf_simple_pull_mem>
	if (buf->len != len) {
   19b8e:	8a29      	ldrh	r1, [r5, #16]
	len = sys_le16_to_cpu(hdr->len);
   19b90:	8843      	ldrh	r3, [r0, #2]
	if (buf->len != len) {
   19b92:	4299      	cmp	r1, r3
   19b94:	4604      	mov	r4, r0
   19b96:	d013      	beq.n	19bc0 <l2cap_recv+0x64>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   19b98:	466c      	mov	r4, sp
   19b9a:	b088      	sub	sp, #32
   19b9c:	aa02      	add	r2, sp, #8
   19b9e:	4826      	ldr	r0, [pc, #152]	; (19c38 <l2cap_recv+0xdc>)
   19ba0:	61d3      	str	r3, [r2, #28]
   19ba2:	2304      	movs	r3, #4
   19ba4:	e9c2 0105 	strd	r0, r1, [r2, #20]
   19ba8:	f842 3f10 	str.w	r3, [r2, #16]!
   19bac:	4821      	ldr	r0, [pc, #132]	; (19c34 <l2cap_recv+0xd8>)
   19bae:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   19bb2:	f00f ff23 	bl	299fc <z_log_msg_static_create.constprop.0>
   19bb6:	46a5      	mov	sp, r4
}
   19bb8:	2000      	movs	r0, #0
   19bba:	371c      	adds	r7, #28
   19bbc:	46bd      	mov	sp, r7
   19bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   19bc0:	7843      	ldrb	r3, [r0, #1]
   19bc2:	b90b      	cbnz	r3, 19bc8 <l2cap_recv+0x6c>
		LOG_ERR("Invalid ident value in L2CAP PDU");
   19bc4:	4b1d      	ldr	r3, [pc, #116]	; (19c3c <l2cap_recv+0xe0>)
   19bc6:	e7d2      	b.n	19b6e <l2cap_recv+0x12>
	switch (hdr->code) {
   19bc8:	7803      	ldrb	r3, [r0, #0]
   19bca:	2b01      	cmp	r3, #1
   19bcc:	d0f4      	beq.n	19bb8 <l2cap_recv+0x5c>
   19bce:	2b13      	cmp	r3, #19
   19bd0:	d103      	bne.n	19bda <l2cap_recv+0x7e>
	if (buf->len < sizeof(*rsp)) {
   19bd2:	2901      	cmp	r1, #1
   19bd4:	d8f0      	bhi.n	19bb8 <l2cap_recv+0x5c>
		LOG_ERR("Too small LE conn param rsp");
   19bd6:	4b1a      	ldr	r3, [pc, #104]	; (19c40 <l2cap_recv+0xe4>)
   19bd8:	e7c9      	b.n	19b6e <l2cap_recv+0x12>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   19bda:	466d      	mov	r5, sp
   19bdc:	b088      	sub	sp, #32
   19bde:	aa02      	add	r2, sp, #8
   19be0:	4918      	ldr	r1, [pc, #96]	; (19c44 <l2cap_recv+0xe8>)
   19be2:	4814      	ldr	r0, [pc, #80]	; (19c34 <l2cap_recv+0xd8>)
	switch (hdr->code) {
   19be4:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   19be8:	2303      	movs	r3, #3
   19bea:	f842 3f10 	str.w	r3, [r2, #16]!
   19bee:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   19bf2:	f00f ff03 	bl	299fc <z_log_msg_static_create.constprop.0>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   19bf6:	2202      	movs	r2, #2
   19bf8:	7861      	ldrb	r1, [r4, #1]
   19bfa:	46ad      	mov	sp, r5
   19bfc:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   19bfe:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   19c00:	f00f feff 	bl	29a02 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   19c04:	4604      	mov	r4, r0
   19c06:	2800      	cmp	r0, #0
   19c08:	d0d6      	beq.n	19bb8 <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   19c0a:	2102      	movs	r1, #2
   19c0c:	300c      	adds	r0, #12
   19c0e:	f011 fb9d 	bl	2b34c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   19c12:	2300      	movs	r3, #0
   19c14:	7003      	strb	r3, [r0, #0]
   19c16:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   19c18:	4622      	mov	r2, r4
   19c1a:	9300      	str	r3, [sp, #0]
   19c1c:	2105      	movs	r1, #5
   19c1e:	4628      	mov	r0, r5
   19c20:	f00f ff58 	bl	29ad4 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   19c24:	2800      	cmp	r0, #0
   19c26:	d0c7      	beq.n	19bb8 <l2cap_recv+0x5c>
		net_buf_unref(buf);
   19c28:	4620      	mov	r0, r4
   19c2a:	f004 ff3d 	bl	1eaa8 <net_buf_unref>
   19c2e:	e7c3      	b.n	19bb8 <l2cap_recv+0x5c>
   19c30:	0002f3f5 	.word	0x0002f3f5
   19c34:	0002cb3c 	.word	0x0002cb3c
   19c38:	0002f413 	.word	0x0002f413
   19c3c:	0002f434 	.word	0x0002f434
   19c40:	0002f455 	.word	0x0002f455
   19c44:	0002f471 	.word	0x0002f471

00019c48 <bt_l2cap_recv>:
{
   19c48:	b5b0      	push	{r4, r5, r7, lr}
   19c4a:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   19c4c:	8a0b      	ldrh	r3, [r1, #16]
   19c4e:	2b03      	cmp	r3, #3
{
   19c50:	af00      	add	r7, sp, #0
   19c52:	4605      	mov	r5, r0
   19c54:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   19c56:	d810      	bhi.n	19c7a <bt_l2cap_recv+0x32>
		LOG_ERR("Too small L2CAP PDU received");
   19c58:	4b17      	ldr	r3, [pc, #92]	; (19cb8 <bt_l2cap_recv+0x70>)
   19c5a:	617b      	str	r3, [r7, #20]
   19c5c:	4817      	ldr	r0, [pc, #92]	; (19cbc <bt_l2cap_recv+0x74>)
   19c5e:	2302      	movs	r3, #2
   19c60:	f107 0210 	add.w	r2, r7, #16
   19c64:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19c68:	613b      	str	r3, [r7, #16]
   19c6a:	f00f fec7 	bl	299fc <z_log_msg_static_create.constprop.0>
	net_buf_unref(buf);
   19c6e:	4620      	mov	r0, r4
   19c70:	f004 ff1a 	bl	1eaa8 <net_buf_unref>
}
   19c74:	3718      	adds	r7, #24
   19c76:	46bd      	mov	sp, r7
   19c78:	bdb0      	pop	{r4, r5, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   19c7a:	2104      	movs	r1, #4
   19c7c:	f104 000c 	add.w	r0, r4, #12
   19c80:	f011 fb8b 	bl	2b39a <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   19c84:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   19c86:	4628      	mov	r0, r5
   19c88:	f00f ff47 	bl	29b1a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   19c8c:	b978      	cbnz	r0, 19cae <bt_l2cap_recv+0x66>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   19c8e:	466d      	mov	r5, sp
   19c90:	b088      	sub	sp, #32
   19c92:	466a      	mov	r2, sp
   19c94:	4b0a      	ldr	r3, [pc, #40]	; (19cc0 <bt_l2cap_recv+0x78>)
   19c96:	4809      	ldr	r0, [pc, #36]	; (19cbc <bt_l2cap_recv+0x74>)
   19c98:	e9c2 3105 	strd	r3, r1, [r2, #20]
   19c9c:	2303      	movs	r3, #3
   19c9e:	f842 3f10 	str.w	r3, [r2, #16]!
   19ca2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   19ca6:	f00f fea9 	bl	299fc <z_log_msg_static_create.constprop.0>
   19caa:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   19cac:	e7df      	b.n	19c6e <bt_l2cap_recv+0x26>
	chan->ops->recv(chan, buf);
   19cae:	6843      	ldr	r3, [r0, #4]
   19cb0:	4621      	mov	r1, r4
   19cb2:	695b      	ldr	r3, [r3, #20]
   19cb4:	4798      	blx	r3
   19cb6:	e7da      	b.n	19c6e <bt_l2cap_recv+0x26>
   19cb8:	0002f499 	.word	0x0002f499
   19cbc:	0002cb3c 	.word	0x0002cb3c
   19cc0:	0002f4b6 	.word	0x0002f4b6

00019cc4 <bt_l2cap_update_conn_param>:
{
   19cc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   19cc6:	4b17      	ldr	r3, [pc, #92]	; (19d24 <bt_l2cap_update_conn_param+0x60>)
{
   19cc8:	460e      	mov	r6, r1
	ident++;
   19cca:	7819      	ldrb	r1, [r3, #0]
   19ccc:	3101      	adds	r1, #1
   19cce:	b2c9      	uxtb	r1, r1
   19cd0:	2901      	cmp	r1, #1
   19cd2:	bf38      	it	cc
   19cd4:	2101      	movcc	r1, #1
{
   19cd6:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   19cd8:	2208      	movs	r2, #8
   19cda:	2012      	movs	r0, #18
	ident++;
   19cdc:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   19cde:	f00f fe90 	bl	29a02 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   19ce2:	4604      	mov	r4, r0
   19ce4:	b1d0      	cbz	r0, 19d1c <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   19ce6:	2108      	movs	r1, #8
   19ce8:	300c      	adds	r0, #12
   19cea:	f011 fb2f 	bl	2b34c <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   19cee:	8833      	ldrh	r3, [r6, #0]
   19cf0:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   19cf2:	8873      	ldrh	r3, [r6, #2]
   19cf4:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   19cf6:	88b3      	ldrh	r3, [r6, #4]
   19cf8:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   19cfa:	88f3      	ldrh	r3, [r6, #6]
   19cfc:	80c3      	strh	r3, [r0, #6]
   19cfe:	2300      	movs	r3, #0
   19d00:	4628      	mov	r0, r5
   19d02:	9300      	str	r3, [sp, #0]
   19d04:	4622      	mov	r2, r4
   19d06:	2105      	movs	r1, #5
   19d08:	f00f fee4 	bl	29ad4 <bt_l2cap_send_cb>
	if (err) {
   19d0c:	4605      	mov	r5, r0
   19d0e:	b110      	cbz	r0, 19d16 <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   19d10:	4620      	mov	r0, r4
   19d12:	f004 fec9 	bl	1eaa8 <net_buf_unref>
}
   19d16:	4628      	mov	r0, r5
   19d18:	b002      	add	sp, #8
   19d1a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   19d1c:	f06f 050b 	mvn.w	r5, #11
   19d20:	e7f9      	b.n	19d16 <bt_l2cap_update_conn_param+0x52>
   19d22:	bf00      	nop
   19d24:	2000465f 	.word	0x2000465f

00019d28 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   19d28:	2823      	cmp	r0, #35	; 0x23
   19d2a:	d81f      	bhi.n	19d6c <att_op_get_type+0x44>
   19d2c:	281a      	cmp	r0, #26
   19d2e:	d804      	bhi.n	19d3a <att_op_get_type+0x12>
   19d30:	1e43      	subs	r3, r0, #1
   19d32:	2b18      	cmp	r3, #24
   19d34:	d90e      	bls.n	19d54 <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   19d36:	2006      	movs	r0, #6
   19d38:	4770      	bx	lr
	switch (op) {
   19d3a:	f1a0 031b 	sub.w	r3, r0, #27
   19d3e:	2b08      	cmp	r3, #8
   19d40:	d81e      	bhi.n	19d80 <att_op_get_type+0x58>
   19d42:	e8df f003 	tbb	[pc, r3]
   19d46:	1d05      	.short	0x1d05
   19d48:	191d231b 	.word	0x191d231b
   19d4c:	1d25      	.short	0x1d25
   19d4e:	05          	.byte	0x05
   19d4f:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   19d50:	2003      	movs	r0, #3
   19d52:	4770      	bx	lr
	switch (op) {
   19d54:	4a0f      	ldr	r2, [pc, #60]	; (19d94 <att_op_get_type+0x6c>)
   19d56:	2301      	movs	r3, #1
   19d58:	4083      	lsls	r3, r0
   19d5a:	401a      	ands	r2, r3
   19d5c:	b9c2      	cbnz	r2, 19d90 <att_op_get_type+0x68>
   19d5e:	4a0e      	ldr	r2, [pc, #56]	; (19d98 <att_op_get_type+0x70>)
   19d60:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   19d62:	2a00      	cmp	r2, #0
   19d64:	bf14      	ite	ne
   19d66:	2001      	movne	r0, #1
   19d68:	2006      	moveq	r0, #6
   19d6a:	4770      	bx	lr
	switch (op) {
   19d6c:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   19d70:	2b52      	cmp	r3, #82	; 0x52
   19d72:	d105      	bne.n	19d80 <att_op_get_type+0x58>
		return ATT_COMMAND;
   19d74:	2000      	movs	r0, #0
}
   19d76:	4770      	bx	lr
		return ATT_REQUEST;
   19d78:	2001      	movs	r0, #1
   19d7a:	4770      	bx	lr
		return ATT_INDICATION;
   19d7c:	2005      	movs	r0, #5
   19d7e:	4770      	bx	lr
		return ATT_COMMAND;
   19d80:	f010 0f40 	tst.w	r0, #64	; 0x40
   19d84:	bf0c      	ite	eq
   19d86:	2006      	moveq	r0, #6
   19d88:	2000      	movne	r0, #0
   19d8a:	4770      	bx	lr
	switch (op) {
   19d8c:	2004      	movs	r0, #4
   19d8e:	4770      	bx	lr
		return ATT_RESPONSE;
   19d90:	2002      	movs	r0, #2
   19d92:	4770      	bx	lr
   19d94:	028aaaaa 	.word	0x028aaaaa
   19d98:	01455554 	.word	0x01455554

00019d9c <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   19d9c:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   19d9e:	3804      	subs	r0, #4
   19da0:	9001      	str	r0, [sp, #4]

	LOG_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   19da2:	a901      	add	r1, sp, #4
   19da4:	4802      	ldr	r0, [pc, #8]	; (19db0 <bt_att_released+0x14>)
   19da6:	f011 ffac 	bl	2bd02 <k_mem_slab_free>
}
   19daa:	b003      	add	sp, #12
   19dac:	f85d fb04 	ldr.w	pc, [sp], #4
   19db0:	20000a2c 	.word	0x20000a2c

00019db4 <tx_meta_data_free>:
{
   19db4:	b510      	push	{r4, lr}
	(void)memset(data, 0, sizeof(*data));
   19db6:	2100      	movs	r1, #0
{
   19db8:	4604      	mov	r4, r0
	(void)memset(data, 0, sizeof(*data));
   19dba:	2214      	movs	r2, #20
   19dbc:	f00f f8bf 	bl	28f3e <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   19dc0:	4621      	mov	r1, r4
   19dc2:	4802      	ldr	r0, [pc, #8]	; (19dcc <tx_meta_data_free+0x18>)
}
   19dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   19dc8:	f012 b865 	b.w	2be96 <k_queue_append>
   19dcc:	20000b20 	.word	0x20000b20

00019dd0 <find_type_cb>:
{
   19dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19dd4:	b093      	sub	sp, #76	; 0x4c
	struct bt_att_chan *chan = data->chan;
   19dd6:	f8d2 a000 	ldr.w	sl, [r2]
{
   19dda:	af02      	add	r7, sp, #8
	struct bt_conn *conn = chan->chan.chan.conn;
   19ddc:	f8da 3004 	ldr.w	r3, [sl, #4]
   19de0:	607b      	str	r3, [r7, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   19de2:	2500      	movs	r5, #0
   19de4:	f642 0301 	movw	r3, #10241	; 0x2801
{
   19de8:	4680      	mov	r8, r0
   19dea:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   19dec:	6800      	ldr	r0, [r0, #0]
   19dee:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   19df2:	85fb      	strh	r3, [r7, #46]	; 0x2e
   19df4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
{
   19df8:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   19dfa:	f00f f92c 	bl	29056 <bt_uuid_cmp>
   19dfe:	2800      	cmp	r0, #0
   19e00:	d070      	beq.n	19ee4 <find_type_cb+0x114>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   19e02:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   19e06:	f8d8 0000 	ldr.w	r0, [r8]
   19e0a:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   19e0e:	85fb      	strh	r3, [r7, #46]	; 0x2e
   19e10:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   19e14:	f00f f91f 	bl	29056 <bt_uuid_cmp>
   19e18:	b138      	cbz	r0, 19e2a <find_type_cb+0x5a>
		if (data->group &&
   19e1a:	68a3      	ldr	r3, [r4, #8]
   19e1c:	b11b      	cbz	r3, 19e26 <find_type_cb+0x56>
   19e1e:	885a      	ldrh	r2, [r3, #2]
   19e20:	42b2      	cmp	r2, r6
   19e22:	d200      	bcs.n	19e26 <find_type_cb+0x56>
	data->group->end_handle = sys_cpu_to_le16(handle);
   19e24:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   19e26:	2001      	movs	r0, #1
   19e28:	e009      	b.n	19e3e <find_type_cb+0x6e>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   19e2a:	6861      	ldr	r1, [r4, #4]
   19e2c:	4608      	mov	r0, r1
   19e2e:	f00f fe89 	bl	29b44 <net_buf_frags_len>
   19e32:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   19e36:	1a1b      	subs	r3, r3, r0
   19e38:	2b03      	cmp	r3, #3
   19e3a:	d804      	bhi.n	19e46 <find_type_cb+0x76>
		return BT_GATT_ITER_STOP;
   19e3c:	2000      	movs	r0, #0
}
   19e3e:	3744      	adds	r7, #68	; 0x44
   19e40:	46bd      	mov	sp, r7
   19e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   19e46:	4608      	mov	r0, r1
   19e48:	f011 fa5a 	bl	2b300 <net_buf_frag_last>
   19e4c:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   19e4e:	6860      	ldr	r0, [r4, #4]
   19e50:	f00f fe78 	bl	29b44 <net_buf_frags_len>
   19e54:	f8ba b02a 	ldrh.w	fp, [sl, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   19e58:	f105 090c 	add.w	r9, r5, #12
   19e5c:	ebab 0b00 	sub.w	fp, fp, r0
   19e60:	4648      	mov	r0, r9
   19e62:	f011 faae 	bl	2b3c2 <net_buf_simple_tailroom>
   19e66:	4558      	cmp	r0, fp
   19e68:	d93f      	bls.n	19eea <find_type_cb+0x11a>
   19e6a:	6860      	ldr	r0, [r4, #4]
   19e6c:	f00f fe6a 	bl	29b44 <net_buf_frags_len>
   19e70:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   19e74:	1a18      	subs	r0, r3, r0
	if (!len) {
   19e76:	b970      	cbnz	r0, 19e96 <find_type_cb+0xc6>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   19e78:	6863      	ldr	r3, [r4, #4]
   19e7a:	7a98      	ldrb	r0, [r3, #10]
   19e7c:	f004 fd52 	bl	1e924 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   19e80:	2200      	movs	r2, #0
   19e82:	2300      	movs	r3, #0
   19e84:	f011 fa02 	bl	2b28c <net_buf_alloc_fixed>
		if (!frag) {
   19e88:	4605      	mov	r5, r0
   19e8a:	2800      	cmp	r0, #0
   19e8c:	d0d6      	beq.n	19e3c <find_type_cb+0x6c>
		net_buf_frag_add(data->buf, frag);
   19e8e:	4601      	mov	r1, r0
   19e90:	6860      	ldr	r0, [r4, #4]
   19e92:	f011 fa46 	bl	2b322 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   19e96:	2300      	movs	r3, #0
   19e98:	9300      	str	r3, [sp, #0]
   19e9a:	f8d8 a004 	ldr.w	sl, [r8, #4]
   19e9e:	6878      	ldr	r0, [r7, #4]
   19ea0:	4641      	mov	r1, r8
   19ea2:	2310      	movs	r3, #16
   19ea4:	f107 0208 	add.w	r2, r7, #8
   19ea8:	47d0      	blx	sl
	if (read < 0) {
   19eaa:	f1b0 0800 	subs.w	r8, r0, #0
   19eae:	db19      	blt.n	19ee4 <find_type_cb+0x114>
	if (read != data->value_len) {
   19eb0:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   19eb2:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   19eb4:	4542      	cmp	r2, r8
   19eb6:	d03f      	beq.n	19f38 <find_type_cb+0x168>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   19eb8:	4601      	mov	r1, r0
   19eba:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   19ebe:	f00f f8f8 	bl	290b2 <bt_uuid_create>
   19ec2:	b9b0      	cbnz	r0, 19ef2 <find_type_cb+0x122>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   19ec4:	466d      	mov	r5, sp
   19ec6:	b088      	sub	sp, #32
   19ec8:	7c23      	ldrb	r3, [r4, #16]
   19eca:	aa02      	add	r2, sp, #8
   19ecc:	491d      	ldr	r1, [pc, #116]	; (19f44 <find_type_cb+0x174>)
   19ece:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_WRN("Unable to create UUID: size %d", read);
   19ed2:	2303      	movs	r3, #3
   19ed4:	f842 3f10 	str.w	r3, [r2, #16]!
   19ed8:	481b      	ldr	r0, [pc, #108]	; (19f48 <find_type_cb+0x178>)
   19eda:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   19ede:	f00f ff1f 	bl	29d20 <z_log_msg_static_create.constprop.0>
   19ee2:	46ad      	mov	sp, r5
	data->group = NULL;
   19ee4:	2300      	movs	r3, #0
   19ee6:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   19ee8:	e79d      	b.n	19e26 <find_type_cb+0x56>
	return net_buf_simple_tailroom(&buf->b);
   19eea:	4648      	mov	r0, r9
   19eec:	f011 fa69 	bl	2b3c2 <net_buf_simple_tailroom>
   19ef0:	e7c1      	b.n	19e76 <find_type_cb+0xa6>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   19ef2:	fa5f f288 	uxtb.w	r2, r8
   19ef6:	f107 0108 	add.w	r1, r7, #8
   19efa:	f107 0018 	add.w	r0, r7, #24
   19efe:	f00f f8d8 	bl	290b2 <bt_uuid_create>
   19f02:	b930      	cbnz	r0, 19f12 <find_type_cb+0x142>
			LOG_WRN("Unable to create UUID: size %d", read);
   19f04:	466d      	mov	r5, sp
   19f06:	b088      	sub	sp, #32
   19f08:	aa02      	add	r2, sp, #8
   19f0a:	4b10      	ldr	r3, [pc, #64]	; (19f4c <find_type_cb+0x17c>)
   19f0c:	e9c2 3805 	strd	r3, r8, [r2, #20]
   19f10:	e7df      	b.n	19ed2 <find_type_cb+0x102>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   19f12:	f107 0118 	add.w	r1, r7, #24
   19f16:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   19f1a:	f00f f89c 	bl	29056 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   19f1e:	2800      	cmp	r0, #0
   19f20:	d1e0      	bne.n	19ee4 <find_type_cb+0x114>
	data->err = 0x00;
   19f22:	2300      	movs	r3, #0
   19f24:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   19f26:	2104      	movs	r1, #4
   19f28:	f105 000c 	add.w	r0, r5, #12
   19f2c:	f011 fa0e 	bl	2b34c <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   19f30:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   19f32:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   19f34:	68a3      	ldr	r3, [r4, #8]
   19f36:	e775      	b.n	19e24 <find_type_cb+0x54>
	} else if (memcmp(data->value, uuid, read)) {
   19f38:	f107 0108 	add.w	r1, r7, #8
   19f3c:	f00e ffcd 	bl	28eda <memcmp>
   19f40:	e7ed      	b.n	19f1e <find_type_cb+0x14e>
   19f42:	bf00      	nop
   19f44:	0002f4f2 	.word	0x0002f4f2
   19f48:	0002caf4 	.word	0x0002caf4
   19f4c:	0002f511 	.word	0x0002f511

00019f50 <chan_send>:
{
   19f50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19f54:	4606      	mov	r6, r0
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   19f56:	f8d1 9018 	ldr.w	r9, [r1, #24]
	hdr = (void *)buf->data;
   19f5a:	68cb      	ldr	r3, [r1, #12]
{
   19f5c:	b089      	sub	sp, #36	; 0x24
   19f5e:	460c      	mov	r4, r1
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   19f60:	3034      	adds	r0, #52	; 0x34
   19f62:	2102      	movs	r1, #2
   19f64:	f00f fe08 	bl	29b78 <atomic_test_bit>
   19f68:	b970      	cbnz	r0, 19f88 <chan_send+0x38>
		LOG_ERR("ATT channel not connected");
   19f6a:	4b2e      	ldr	r3, [pc, #184]	; (1a024 <chan_send+0xd4>)
   19f6c:	482e      	ldr	r0, [pc, #184]	; (1a028 <chan_send+0xd8>)
   19f6e:	e9cd 1306 	strd	r1, r3, [sp, #24]
   19f72:	aa06      	add	r2, sp, #24
   19f74:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EINVAL;
   19f78:	f06f 0515 	mvn.w	r5, #21
		LOG_ERR("ATT channel not connected");
   19f7c:	f00f fed0 	bl	29d20 <z_log_msg_static_create.constprop.0>
}
   19f80:	4628      	mov	r0, r5
   19f82:	b009      	add	sp, #36	; 0x24
   19f84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   19f88:	781b      	ldrb	r3, [r3, #0]
   19f8a:	2bd2      	cmp	r3, #210	; 0xd2
   19f8c:	d117      	bne.n	19fbe <chan_send+0x6e>
		err = bt_smp_sign(chan->att->conn, buf);
   19f8e:	6833      	ldr	r3, [r6, #0]
   19f90:	4621      	mov	r1, r4
   19f92:	6818      	ldr	r0, [r3, #0]
   19f94:	f011 f802 	bl	2af9c <bt_smp_sign>
		if (err) {
   19f98:	4605      	mov	r5, r0
   19f9a:	b180      	cbz	r0, 19fbe <chan_send+0x6e>
			LOG_ERR("Error signing data");
   19f9c:	4b23      	ldr	r3, [pc, #140]	; (1a02c <chan_send+0xdc>)
   19f9e:	9307      	str	r3, [sp, #28]
   19fa0:	aa06      	add	r2, sp, #24
   19fa2:	2302      	movs	r3, #2
   19fa4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19fa8:	481f      	ldr	r0, [pc, #124]	; (1a028 <chan_send+0xd8>)
   19faa:	9306      	str	r3, [sp, #24]
   19fac:	f00f feb8 	bl	29d20 <z_log_msg_static_create.constprop.0>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   19fb0:	69a0      	ldr	r0, [r4, #24]
   19fb2:	f7ff feff 	bl	19db4 <tx_meta_data_free>
			net_buf_unref(buf);
   19fb6:	4620      	mov	r0, r4
   19fb8:	f004 fd76 	bl	1eaa8 <net_buf_unref>
			return err;
   19fbc:	e7e0      	b.n	19f80 <chan_send+0x30>
	state->offset = net_buf_simple_headroom(buf);
   19fbe:	f104 000c 	add.w	r0, r4, #12
   19fc2:	f011 f9fa 	bl	2b3ba <net_buf_simple_headroom>
	state->len = buf->len;
   19fc6:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	data->att_chan = chan;
   19fca:	f8c9 6000 	str.w	r6, [r9]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   19fce:	6833      	ldr	r3, [r6, #0]
   19fd0:	681d      	ldr	r5, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   19fd2:	68e3      	ldr	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   19fd4:	4607      	mov	r7, r0
   19fd6:	7818      	ldrb	r0, [r3, #0]
   19fd8:	f7ff fea6 	bl	19d28 <att_op_get_type>
	switch (op_type) {
   19fdc:	2805      	cmp	r0, #5
   19fde:	bf96      	itet	ls
   19fe0:	4b13      	ldrls	r3, [pc, #76]	; (1a030 <chan_send+0xe0>)
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   19fe2:	4b14      	ldrhi	r3, [pc, #80]	; (1a034 <chan_send+0xe4>)
   19fe4:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   19fe8:	f8cd 9000 	str.w	r9, [sp]
   19fec:	4628      	mov	r0, r5
   19fee:	4622      	mov	r2, r4
   19ff0:	2104      	movs	r1, #4
   19ff2:	f00f fd6f 	bl	29ad4 <bt_l2cap_send_cb>
	if (err) {
   19ff6:	4605      	mov	r5, r0
   19ff8:	2800      	cmp	r0, #0
   19ffa:	d0c1      	beq.n	19f80 <chan_send+0x30>
		if (err == -ENOBUFS) {
   19ffc:	f110 0f69 	cmn.w	r0, #105	; 0x69
   1a000:	d109      	bne.n	1a016 <chan_send+0xc6>
			LOG_ERR("Ran out of TX buffers or contexts.");
   1a002:	4b0d      	ldr	r3, [pc, #52]	; (1a038 <chan_send+0xe8>)
   1a004:	9307      	str	r3, [sp, #28]
   1a006:	4808      	ldr	r0, [pc, #32]	; (1a028 <chan_send+0xd8>)
   1a008:	2302      	movs	r3, #2
   1a00a:	aa06      	add	r2, sp, #24
   1a00c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a010:	9306      	str	r3, [sp, #24]
   1a012:	f00f fe85 	bl	29d20 <z_log_msg_static_create.constprop.0>
	buf->data = buf->__buf + state->offset;
   1a016:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   1a018:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   1a01c:	fa13 f787 	uxtah	r7, r3, r7
   1a020:	60e7      	str	r7, [r4, #12]
}
   1a022:	e7ad      	b.n	19f80 <chan_send+0x30>
   1a024:	0002f530 	.word	0x0002f530
   1a028:	0002caf4 	.word	0x0002caf4
   1a02c:	0002f54a 	.word	0x0002f54a
   1a030:	0002d110 	.word	0x0002d110
   1a034:	0002a115 	.word	0x0002a115
   1a038:	0002f55d 	.word	0x0002f55d

0001a03c <att_get>:
{
   1a03c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1a03e:	7b43      	ldrb	r3, [r0, #13]
   1a040:	2b07      	cmp	r3, #7
   1a042:	d00d      	beq.n	1a060 <att_get+0x24>
		LOG_WRN("Not connected");
   1a044:	4b13      	ldr	r3, [pc, #76]	; (1a094 <att_get+0x58>)
   1a046:	9305      	str	r3, [sp, #20]
   1a048:	2302      	movs	r3, #2
   1a04a:	9304      	str	r3, [sp, #16]
   1a04c:	aa04      	add	r2, sp, #16
   1a04e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		LOG_ERR("Unable to find ATT channel");
   1a052:	4811      	ldr	r0, [pc, #68]	; (1a098 <att_get+0x5c>)
   1a054:	f00f fe64 	bl	29d20 <z_log_msg_static_create.constprop.0>
		return NULL;
   1a058:	2000      	movs	r0, #0
}
   1a05a:	b007      	add	sp, #28
   1a05c:	f85d fb04 	ldr.w	pc, [sp], #4
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1a060:	2104      	movs	r1, #4
   1a062:	f00f fd5a 	bl	29b1a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1a066:	4603      	mov	r3, r0
   1a068:	b938      	cbnz	r0, 1a07a <att_get+0x3e>
		LOG_ERR("Unable to find ATT channel");
   1a06a:	4b0c      	ldr	r3, [pc, #48]	; (1a09c <att_get+0x60>)
   1a06c:	9305      	str	r3, [sp, #20]
   1a06e:	2302      	movs	r3, #2
   1a070:	9304      	str	r3, [sp, #16]
   1a072:	aa04      	add	r2, sp, #16
   1a074:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a078:	e7eb      	b.n	1a052 <att_get+0x16>
	if (!atomic_test_bit(att_chan->flags, ATT_CONNECTED)) {
   1a07a:	2102      	movs	r1, #2
   1a07c:	3030      	adds	r0, #48	; 0x30
   1a07e:	f00f fd7b 	bl	29b78 <atomic_test_bit>
   1a082:	b918      	cbnz	r0, 1a08c <att_get+0x50>
		LOG_ERR("ATT channel not connected");
   1a084:	4b06      	ldr	r3, [pc, #24]	; (1a0a0 <att_get+0x64>)
   1a086:	e9cd 1304 	strd	r1, r3, [sp, #16]
   1a08a:	e7f2      	b.n	1a072 <att_get+0x36>
	return att_chan->att;
   1a08c:	f853 0c04 	ldr.w	r0, [r3, #-4]
   1a090:	e7e3      	b.n	1a05a <att_get+0x1e>
   1a092:	bf00      	nop
   1a094:	0002f580 	.word	0x0002f580
   1a098:	0002caf4 	.word	0x0002caf4
   1a09c:	0002f58e 	.word	0x0002f58e
   1a0a0:	0002f530 	.word	0x0002f530

0001a0a4 <bt_att_connected>:
{
   1a0a4:	b510      	push	{r4, lr}
   1a0a6:	f100 0330 	add.w	r3, r0, #48	; 0x30
   1a0aa:	4604      	mov	r4, r0
   1a0ac:	f3bf 8f5b 	dmb	ish
   1a0b0:	e853 1f00 	ldrex	r1, [r3]
   1a0b4:	f041 0104 	orr.w	r1, r1, #4
   1a0b8:	e843 1200 	strex	r2, r1, [r3]
   1a0bc:	2a00      	cmp	r2, #0
   1a0be:	d1f7      	bne.n	1a0b0 <bt_att_connected+0xc>
   1a0c0:	f3bf 8f5b 	dmb	ish
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1a0c4:	2317      	movs	r3, #23
   1a0c6:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1a0c8:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   1a0ca:	1f20      	subs	r0, r4, #4
   1a0cc:	f00f fde5 	bl	29c9a <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1a0d0:	f104 0054 	add.w	r0, r4, #84	; 0x54
   1a0d4:	4903      	ldr	r1, [pc, #12]	; (1a0e4 <bt_att_connected+0x40>)
   1a0d6:	f011 ffbe 	bl	2c056 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   1a0da:	6820      	ldr	r0, [r4, #0]
}
   1a0dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   1a0e0:	f002 ba44 	b.w	1c56c <bt_gatt_connected>
   1a0e4:	0001add5 	.word	0x0001add5

0001a0e8 <read_group_cb>:
{
   1a0e8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1a0ec:	4605      	mov	r5, r0
   1a0ee:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1a0f0:	f04f 0800 	mov.w	r8, #0
   1a0f4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1a0f8:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   1a0fa:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1a0fc:	f88d 8008 	strb.w	r8, [sp, #8]
   1a100:	a902      	add	r1, sp, #8
{
   1a102:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1a104:	f8ad 300a 	strh.w	r3, [sp, #10]
   1a108:	f00e ffa5 	bl	29056 <bt_uuid_cmp>
   1a10c:	b1a0      	cbz	r0, 1a138 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1a10e:	f642 0301 	movw	r3, #10241	; 0x2801
   1a112:	6828      	ldr	r0, [r5, #0]
   1a114:	f88d 800c 	strb.w	r8, [sp, #12]
   1a118:	a903      	add	r1, sp, #12
   1a11a:	f8ad 300e 	strh.w	r3, [sp, #14]
   1a11e:	f00e ff9a 	bl	29056 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1a122:	b148      	cbz	r0, 1a138 <read_group_cb+0x50>
		if (data->group &&
   1a124:	6923      	ldr	r3, [r4, #16]
   1a126:	b11b      	cbz	r3, 1a130 <read_group_cb+0x48>
   1a128:	885a      	ldrh	r2, [r3, #2]
   1a12a:	42b2      	cmp	r2, r6
   1a12c:	d200      	bcs.n	1a130 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1a12e:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1a130:	2001      	movs	r0, #1
}
   1a132:	b004      	add	sp, #16
   1a134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1a138:	6861      	ldr	r1, [r4, #4]
   1a13a:	6828      	ldr	r0, [r5, #0]
   1a13c:	f00e ff8b 	bl	29056 <bt_uuid_cmp>
   1a140:	b110      	cbz	r0, 1a148 <read_group_cb+0x60>
		data->group = NULL;
   1a142:	2300      	movs	r3, #0
   1a144:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1a146:	e7f3      	b.n	1a130 <read_group_cb+0x48>
	if (data->rsp->len &&
   1a148:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1a14a:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   1a14c:	781a      	ldrb	r2, [r3, #0]
   1a14e:	b132      	cbz	r2, 1a15e <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1a150:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1a152:	8a01      	ldrh	r1, [r0, #16]
   1a154:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   1a156:	4293      	cmp	r3, r2
   1a158:	da01      	bge.n	1a15e <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   1a15a:	2000      	movs	r0, #0
   1a15c:	e7e9      	b.n	1a132 <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1a15e:	2104      	movs	r1, #4
   1a160:	300c      	adds	r0, #12
   1a162:	f011 f8f3 	bl	2b34c <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1a166:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1a168:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1a16a:	6923      	ldr	r3, [r4, #16]
   1a16c:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1a16e:	4b08      	ldr	r3, [pc, #32]	; (1a190 <read_group_cb+0xa8>)
   1a170:	9300      	str	r3, [sp, #0]
   1a172:	9401      	str	r4, [sp, #4]
   1a174:	68a2      	ldr	r2, [r4, #8]
   1a176:	2300      	movs	r3, #0
   1a178:	4629      	mov	r1, r5
   1a17a:	4638      	mov	r0, r7
   1a17c:	f00f fe12 	bl	29da4 <att_chan_read>
	if (read < 0) {
   1a180:	2800      	cmp	r0, #0
   1a182:	dbea      	blt.n	1a15a <read_group_cb+0x72>
	if (!data->group) {
   1a184:	6920      	ldr	r0, [r4, #16]
   1a186:	3800      	subs	r0, #0
   1a188:	bf18      	it	ne
   1a18a:	2001      	movne	r0, #1
   1a18c:	e7d1      	b.n	1a132 <read_group_cb+0x4a>
   1a18e:	bf00      	nop
   1a190:	00029d01 	.word	0x00029d01

0001a194 <read_type_cb>:
{
   1a194:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   1a198:	6817      	ldr	r7, [r2, #0]
{
   1a19a:	4605      	mov	r5, r0
   1a19c:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1a19e:	6800      	ldr	r0, [r0, #0]
   1a1a0:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   1a1a2:	687e      	ldr	r6, [r7, #4]
{
   1a1a4:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1a1a6:	f00e ff56 	bl	29056 <bt_uuid_cmp>
   1a1aa:	4681      	mov	r9, r0
   1a1ac:	2800      	cmp	r0, #0
   1a1ae:	d13c      	bne.n	1a22a <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1a1b0:	4630      	mov	r0, r6
   1a1b2:	2295      	movs	r2, #149	; 0x95
   1a1b4:	4629      	mov	r1, r5
   1a1b6:	f010 fb73 	bl	2a8a0 <bt_gatt_check_perm>
   1a1ba:	4606      	mov	r6, r0
   1a1bc:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1a1be:	b140      	cbz	r0, 1a1d2 <read_type_cb+0x3e>
		if (data->rsp->len) {
   1a1c0:	68e3      	ldr	r3, [r4, #12]
   1a1c2:	781b      	ldrb	r3, [r3, #0]
   1a1c4:	b10b      	cbz	r3, 1a1ca <read_type_cb+0x36>
			data->err = 0x00;
   1a1c6:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   1a1ca:	2000      	movs	r0, #0
}
   1a1cc:	b003      	add	sp, #12
   1a1ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1a1d2:	68a0      	ldr	r0, [r4, #8]
   1a1d4:	f011 f894 	bl	2b300 <net_buf_frag_last>
   1a1d8:	2102      	movs	r1, #2
   1a1da:	300c      	adds	r0, #12
   1a1dc:	f011 f8b6 	bl	2b34c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1a1e0:	4b13      	ldr	r3, [pc, #76]	; (1a230 <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1a1e2:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   1a1e4:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1a1e8:	9300      	str	r3, [sp, #0]
   1a1ea:	9401      	str	r4, [sp, #4]
   1a1ec:	68a2      	ldr	r2, [r4, #8]
   1a1ee:	4633      	mov	r3, r6
   1a1f0:	4629      	mov	r1, r5
   1a1f2:	4638      	mov	r0, r7
   1a1f4:	f00f fdd6 	bl	29da4 <att_chan_read>
	if (read < 0) {
   1a1f8:	2800      	cmp	r0, #0
   1a1fa:	da07      	bge.n	1a20c <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   1a1fc:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   1a200:	bf26      	itte	cs
   1a202:	4240      	negcs	r0, r0
   1a204:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   1a206:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   1a208:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1a20a:	e7de      	b.n	1a1ca <read_type_cb+0x36>
	if (!data->item) {
   1a20c:	6923      	ldr	r3, [r4, #16]
   1a20e:	2b00      	cmp	r3, #0
   1a210:	d0db      	beq.n	1a1ca <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1a212:	68a0      	ldr	r0, [r4, #8]
   1a214:	f00f fc96 	bl	29b44 <net_buf_frags_len>
   1a218:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1a21a:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1a21c:	68e3      	ldr	r3, [r4, #12]
   1a21e:	781b      	ldrb	r3, [r3, #0]
   1a220:	4298      	cmp	r0, r3
   1a222:	bf94      	ite	ls
   1a224:	2000      	movls	r0, #0
   1a226:	2001      	movhi	r0, #1
   1a228:	e7d0      	b.n	1a1cc <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   1a22a:	2001      	movs	r0, #1
   1a22c:	e7ce      	b.n	1a1cc <read_type_cb+0x38>
   1a22e:	bf00      	nop
   1a230:	00029b55 	.word	0x00029b55

0001a234 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   1a234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a238:	b082      	sub	sp, #8
   1a23a:	af00      	add	r7, sp, #0
   1a23c:	4604      	mov	r4, r0
   1a23e:	460e      	mov	r6, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1a240:	483b      	ldr	r0, [pc, #236]	; (1a330 <bt_att_accept+0xfc>)
   1a242:	2200      	movs	r2, #0
   1a244:	2300      	movs	r3, #0
   1a246:	4639      	mov	r1, r7
   1a248:	f008 fe76 	bl	22f38 <k_mem_slab_alloc>
   1a24c:	4605      	mov	r5, r0
   1a24e:	b1a8      	cbz	r0, 1a27c <bt_att_accept+0x48>
		LOG_ERR("No available ATT context for conn %p", conn);
   1a250:	466d      	mov	r5, sp
   1a252:	b088      	sub	sp, #32
   1a254:	466a      	mov	r2, sp
   1a256:	4b37      	ldr	r3, [pc, #220]	; (1a334 <bt_att_accept+0x100>)
   1a258:	4837      	ldr	r0, [pc, #220]	; (1a338 <bt_att_accept+0x104>)
   1a25a:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1a25e:	2303      	movs	r3, #3
   1a260:	f842 3f10 	str.w	r3, [r2, #16]!
   1a264:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a268:	f00f fd5a 	bl	29d20 <z_log_msg_static_create.constprop.0>
   1a26c:	46ad      	mov	sp, r5
		return -ENOMEM;
   1a26e:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   1a272:	4628      	mov	r0, r5
   1a274:	3708      	adds	r7, #8
   1a276:	46bd      	mov	sp, r7
   1a278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_z_current_get();
   1a27c:	f009 fd66 	bl	23d4c <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   1a280:	4b2e      	ldr	r3, [pc, #184]	; (1a33c <bt_att_accept+0x108>)
	(void)memset(att, 0, sizeof(*att));
   1a282:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
   1a284:	6018      	str	r0, [r3, #0]
	(void)memset(att, 0, sizeof(*att));
   1a286:	222c      	movs	r2, #44	; 0x2c
   1a288:	6838      	ldr	r0, [r7, #0]
   1a28a:	f00e fe58 	bl	28f3e <memset>
	att->conn = conn;
   1a28e:	683b      	ldr	r3, [r7, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1a290:	482b      	ldr	r0, [pc, #172]	; (1a340 <bt_att_accept+0x10c>)
	att->conn = conn;
   1a292:	601c      	str	r4, [r3, #0]
	sys_slist_init(&att->reqs);
   1a294:	683c      	ldr	r4, [r7, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1a296:	607d      	str	r5, [r7, #4]
	list->tail = NULL;
   1a298:	e9c4 5501 	strd	r5, r5, [r4, #4]
   1a29c:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1a2a0:	2200      	movs	r2, #0
   1a2a2:	2300      	movs	r3, #0
   1a2a4:	1d39      	adds	r1, r7, #4
   1a2a6:	f008 fe47 	bl	22f38 <k_mem_slab_alloc>
   1a2aa:	4605      	mov	r5, r0
   1a2ac:	b180      	cbz	r0, 1a2d0 <bt_att_accept+0x9c>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   1a2ae:	6823      	ldr	r3, [r4, #0]
   1a2b0:	466c      	mov	r4, sp
   1a2b2:	b088      	sub	sp, #32
   1a2b4:	466a      	mov	r2, sp
   1a2b6:	4923      	ldr	r1, [pc, #140]	; (1a344 <bt_att_accept+0x110>)
   1a2b8:	481f      	ldr	r0, [pc, #124]	; (1a338 <bt_att_accept+0x104>)
   1a2ba:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1a2be:	2303      	movs	r3, #3
   1a2c0:	f842 3f10 	str.w	r3, [r2, #16]!
   1a2c4:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1a2c8:	f00f fd2a 	bl	29d20 <z_log_msg_static_create.constprop.0>
   1a2cc:	46a5      	mov	sp, r4
	if (!chan) {
   1a2ce:	e7ce      	b.n	1a26e <bt_att_accept+0x3a>
	(void)memset(chan, 0, sizeof(*chan));
   1a2d0:	4601      	mov	r1, r0
   1a2d2:	2290      	movs	r2, #144	; 0x90
   1a2d4:	6878      	ldr	r0, [r7, #4]
   1a2d6:	f00e fe32 	bl	28f3e <memset>
	chan->chan.chan.ops = &ops;
   1a2da:	6878      	ldr	r0, [r7, #4]
   1a2dc:	4b1a      	ldr	r3, [pc, #104]	; (1a348 <bt_att_accept+0x114>)
   1a2de:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
   1a2e0:	303c      	adds	r0, #60	; 0x3c
   1a2e2:	f011 fdcc 	bl	2be7e <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1a2e6:	687b      	ldr	r3, [r7, #4]
   1a2e8:	f3bf 8f5b 	dmb	ish
   1a2ec:	3334      	adds	r3, #52	; 0x34
   1a2ee:	e853 2f00 	ldrex	r2, [r3]
   1a2f2:	e843 5100 	strex	r1, r5, [r3]
   1a2f6:	2900      	cmp	r1, #0
   1a2f8:	d1f9      	bne.n	1a2ee <bt_att_accept+0xba>
   1a2fa:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   1a2fe:	687b      	ldr	r3, [r7, #4]
   1a300:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   1a302:	6a63      	ldr	r3, [r4, #36]	; 0x24
	att_chan_attach(att, chan);
   1a304:	f8d7 8004 	ldr.w	r8, [r7, #4]
	if (sys_slist_is_empty(&att->chans)) {
   1a308:	b91b      	cbnz	r3, 1a312 <bt_att_accept+0xde>
   1a30a:	f104 000c 	add.w	r0, r4, #12
   1a30e:	f011 fdb6 	bl	2be7e <z_impl_k_queue_init>
	return list->head;
   1a312:	6a62      	ldr	r2, [r4, #36]	; 0x24
	parent->next = child;
   1a314:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
Z_GENLIST_PREPEND(slist, snode)
   1a318:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   1a31a:	f108 0388 	add.w	r3, r8, #136	; 0x88
	list->head = node;
   1a31e:	6263      	str	r3, [r4, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   1a320:	b902      	cbnz	r2, 1a324 <bt_att_accept+0xf0>
	list->tail = node;
   1a322:	62a3      	str	r3, [r4, #40]	; 0x28
	return chan;
   1a324:	687b      	ldr	r3, [r7, #4]
	if (!chan) {
   1a326:	2b00      	cmp	r3, #0
   1a328:	d0a1      	beq.n	1a26e <bt_att_accept+0x3a>
	*ch = &chan->chan.chan;
   1a32a:	3304      	adds	r3, #4
   1a32c:	6033      	str	r3, [r6, #0]
	return 0;
   1a32e:	e7a0      	b.n	1a272 <bt_att_accept+0x3e>
   1a330:	20000a10 	.word	0x20000a10
   1a334:	0002f5a9 	.word	0x0002f5a9
   1a338:	0002caf4 	.word	0x0002caf4
   1a33c:	20003514 	.word	0x20003514
   1a340:	20000a2c 	.word	0x20000a2c
   1a344:	0002f5ce 	.word	0x0002f5ce
   1a348:	20000684 	.word	0x20000684

0001a34c <bt_att_chan_create_pdu>:
{
   1a34c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   1a350:	b086      	sub	sp, #24
   1a352:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1a354:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   1a356:	1c53      	adds	r3, r2, #1
   1a358:	428b      	cmp	r3, r1
{
   1a35a:	af00      	add	r7, sp, #0
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1a35c:	d915      	bls.n	1a38a <bt_att_chan_create_pdu+0x3e>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   1a35e:	466c      	mov	r4, sp
   1a360:	b088      	sub	sp, #32
   1a362:	466a      	mov	r2, sp
   1a364:	482d      	ldr	r0, [pc, #180]	; (1a41c <bt_att_chan_create_pdu+0xd0>)
   1a366:	61d3      	str	r3, [r2, #28]
   1a368:	2304      	movs	r3, #4
   1a36a:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1a36e:	f842 3f10 	str.w	r3, [r2, #16]!
   1a372:	f44f 5102 	mov.w	r1, #8320	; 0x2080
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   1a376:	482a      	ldr	r0, [pc, #168]	; (1a420 <bt_att_chan_create_pdu+0xd4>)
   1a378:	f00f fcd2 	bl	29d20 <z_log_msg_static_create.constprop.0>
   1a37c:	46a5      	mov	sp, r4
		return NULL;
   1a37e:	2400      	movs	r4, #0
}
   1a380:	4620      	mov	r0, r4
   1a382:	3718      	adds	r7, #24
   1a384:	46bd      	mov	sp, r7
   1a386:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	switch (att_op_get_type(op)) {
   1a38a:	4628      	mov	r0, r5
   1a38c:	f7ff fccc 	bl	19d28 <att_op_get_type>
   1a390:	2802      	cmp	r0, #2
   1a392:	d019      	beq.n	1a3c8 <bt_att_chan_create_pdu+0x7c>
   1a394:	2804      	cmp	r0, #4
   1a396:	d017      	beq.n	1a3c8 <bt_att_chan_create_pdu+0x7c>
		timeout = K_FOREVER;
   1a398:	f04f 38ff 	mov.w	r8, #4294967295
   1a39c:	f04f 39ff 	mov.w	r9, #4294967295
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1a3a0:	2100      	movs	r1, #0
   1a3a2:	4642      	mov	r2, r8
   1a3a4:	464b      	mov	r3, r9
   1a3a6:	4608      	mov	r0, r1
   1a3a8:	f00f fb91 	bl	29ace <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1a3ac:	4604      	mov	r4, r0
   1a3ae:	b980      	cbnz	r0, 1a3d2 <bt_att_chan_create_pdu+0x86>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   1a3b0:	466c      	mov	r4, sp
   1a3b2:	b088      	sub	sp, #32
   1a3b4:	466a      	mov	r2, sp
   1a3b6:	4b1b      	ldr	r3, [pc, #108]	; (1a424 <bt_att_chan_create_pdu+0xd8>)
   1a3b8:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1a3bc:	2303      	movs	r3, #3
   1a3be:	f842 3f10 	str.w	r3, [r2, #16]!
   1a3c2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a3c6:	e7d6      	b.n	1a376 <bt_att_chan_create_pdu+0x2a>
	switch (att_op_get_type(op)) {
   1a3c8:	f44f 2870 	mov.w	r8, #983040	; 0xf0000
   1a3cc:	f04f 0900 	mov.w	r9, #0
   1a3d0:	e7e6      	b.n	1a3a0 <bt_att_chan_create_pdu+0x54>
	return z_impl_z_current_get();
   1a3d2:	f009 fcbb 	bl	23d4c <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   1a3d6:	4b14      	ldr	r3, [pc, #80]	; (1a428 <bt_att_chan_create_pdu+0xdc>)
   1a3d8:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   1a3da:	4814      	ldr	r0, [pc, #80]	; (1a42c <bt_att_chan_create_pdu+0xe0>)
   1a3dc:	bf07      	ittee	eq
   1a3de:	2200      	moveq	r2, #0
   1a3e0:	2300      	moveq	r3, #0
   1a3e2:	4642      	movne	r2, r8
   1a3e4:	464b      	movne	r3, r9
   1a3e6:	f008 ff61 	bl	232ac <z_impl_k_queue_get>
	if (!data) {
   1a3ea:	b970      	cbnz	r0, 1a40a <bt_att_chan_create_pdu+0xbe>
		LOG_WRN("Unable to allocate ATT TX meta");
   1a3ec:	4b10      	ldr	r3, [pc, #64]	; (1a430 <bt_att_chan_create_pdu+0xe4>)
   1a3ee:	617b      	str	r3, [r7, #20]
   1a3f0:	480b      	ldr	r0, [pc, #44]	; (1a420 <bt_att_chan_create_pdu+0xd4>)
   1a3f2:	2302      	movs	r3, #2
   1a3f4:	f107 0210 	add.w	r2, r7, #16
   1a3f8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1a3fc:	613b      	str	r3, [r7, #16]
   1a3fe:	f00f fc8f 	bl	29d20 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   1a402:	4620      	mov	r0, r4
   1a404:	f004 fb50 	bl	1eaa8 <net_buf_unref>
		return NULL;
   1a408:	e7b9      	b.n	1a37e <bt_att_chan_create_pdu+0x32>
	bt_att_tx_meta_data(buf) = data;
   1a40a:	61a0      	str	r0, [r4, #24]
   1a40c:	2101      	movs	r1, #1
   1a40e:	f104 000c 	add.w	r0, r4, #12
   1a412:	f010 ff9b 	bl	2b34c <net_buf_simple_add>
	hdr->code = op;
   1a416:	7005      	strb	r5, [r0, #0]
	return buf;
   1a418:	e7b2      	b.n	1a380 <bt_att_chan_create_pdu+0x34>
   1a41a:	bf00      	nop
   1a41c:	0002f5f3 	.word	0x0002f5f3
   1a420:	0002caf4 	.word	0x0002caf4
   1a424:	0002f3a6 	.word	0x0002f3a6
   1a428:	20002d50 	.word	0x20002d50
   1a42c:	20000b20 	.word	0x20000b20
   1a430:	0002f618 	.word	0x0002f618

0001a434 <bt_att_recv>:
{
   1a434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a438:	b087      	sub	sp, #28
	if (buf->len < sizeof(*hdr)) {
   1a43a:	8a0b      	ldrh	r3, [r1, #16]
{
   1a43c:	af00      	add	r7, sp, #0
   1a43e:	4682      	mov	sl, r0
   1a440:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1a442:	b97b      	cbnz	r3, 1a464 <bt_att_recv+0x30>
		LOG_ERR("Too small ATT PDU received");
   1a444:	4b4c      	ldr	r3, [pc, #304]	; (1a578 <bt_att_recv+0x144>)
   1a446:	617b      	str	r3, [r7, #20]
   1a448:	2302      	movs	r3, #2
   1a44a:	613b      	str	r3, [r7, #16]
   1a44c:	f107 0210 	add.w	r2, r7, #16
   1a450:	f44f 5182 	mov.w	r1, #4160	; 0x1040
			LOG_WRN("Ignoring unexpected request");
   1a454:	4849      	ldr	r0, [pc, #292]	; (1a57c <bt_att_recv+0x148>)
   1a456:	f00f fc63 	bl	29d20 <z_log_msg_static_create.constprop.0>
}
   1a45a:	2000      	movs	r0, #0
   1a45c:	371c      	adds	r7, #28
   1a45e:	46bd      	mov	sp, r7
   1a460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1a464:	2101      	movs	r1, #1
   1a466:	f104 000c 	add.w	r0, r4, #12
   1a46a:	f010 ff96 	bl	2b39a <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   1a46e:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   1a472:	4605      	mov	r5, r0
   1a474:	2b00      	cmp	r3, #0
   1a476:	d0f0      	beq.n	1a45a <bt_att_recv+0x26>
		if (hdr->code == handlers[i].op) {
   1a478:	7801      	ldrb	r1, [r0, #0]
   1a47a:	f8df 8104 	ldr.w	r8, [pc, #260]	; 1a580 <bt_att_recv+0x14c>
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1a47e:	f1aa 0604 	sub.w	r6, sl, #4
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1a482:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   1a484:	f818 0033 	ldrb.w	r0, [r8, r3, lsl #3]
   1a488:	4288      	cmp	r0, r1
   1a48a:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   1a48e:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   1a492:	d114      	bne.n	1a4be <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
   1a494:	f892 9002 	ldrb.w	r9, [r2, #2]
   1a498:	f1b9 0f01 	cmp.w	r9, #1
   1a49c:	d131      	bne.n	1a502 <bt_att_recv+0xce>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   1a49e:	2100      	movs	r1, #0
   1a4a0:	f10a 0030 	add.w	r0, sl, #48	; 0x30
   1a4a4:	f00f fd33 	bl	29f0e <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   1a4a8:	2800      	cmp	r0, #0
   1a4aa:	d035      	beq.n	1a518 <bt_att_recv+0xe4>
			LOG_WRN("Ignoring unexpected request");
   1a4ac:	4b35      	ldr	r3, [pc, #212]	; (1a584 <bt_att_recv+0x150>)
   1a4ae:	617b      	str	r3, [r7, #20]
   1a4b0:	2302      	movs	r3, #2
   1a4b2:	613b      	str	r3, [r7, #16]
   1a4b4:	f107 0210 	add.w	r2, r7, #16
   1a4b8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1a4bc:	e7ca      	b.n	1a454 <bt_att_recv+0x20>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1a4be:	3301      	adds	r3, #1
   1a4c0:	2b0e      	cmp	r3, #14
   1a4c2:	d1df      	bne.n	1a484 <bt_att_recv+0x50>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   1a4c4:	466c      	mov	r4, sp
   1a4c6:	b088      	sub	sp, #32
   1a4c8:	466a      	mov	r2, sp
   1a4ca:	4b2f      	ldr	r3, [pc, #188]	; (1a588 <bt_att_recv+0x154>)
   1a4cc:	482b      	ldr	r0, [pc, #172]	; (1a57c <bt_att_recv+0x148>)
   1a4ce:	e9c2 3105 	strd	r3, r1, [r2, #20]
   1a4d2:	2303      	movs	r3, #3
   1a4d4:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1a4d8:	f842 3f10 	str.w	r3, [r2, #16]!
   1a4dc:	f00f fc20 	bl	29d20 <z_log_msg_static_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   1a4e0:	7829      	ldrb	r1, [r5, #0]
   1a4e2:	46a5      	mov	sp, r4
   1a4e4:	4608      	mov	r0, r1
   1a4e6:	f7ff fc1f 	bl	19d28 <att_op_get_type>
   1a4ea:	2800      	cmp	r0, #0
   1a4ec:	d0b5      	beq.n	1a45a <bt_att_recv+0x26>
   1a4ee:	2805      	cmp	r0, #5
   1a4f0:	d0b3      	beq.n	1a45a <bt_att_recv+0x26>
	if (!req) {
   1a4f2:	2900      	cmp	r1, #0
   1a4f4:	d0b1      	beq.n	1a45a <bt_att_recv+0x26>
   1a4f6:	2306      	movs	r3, #6
   1a4f8:	2200      	movs	r2, #0
   1a4fa:	4630      	mov	r0, r6
   1a4fc:	f00f fe65 	bl	2a1ca <send_err_rsp.part.0>
   1a500:	e7ab      	b.n	1a45a <bt_att_recv+0x26>
		} else if (handler->type == ATT_INDICATION &&
   1a502:	f1b9 0f05 	cmp.w	r9, #5
   1a506:	d107      	bne.n	1a518 <bt_att_recv+0xe4>
			   atomic_test_and_set_bit(att_chan->flags,
   1a508:	2101      	movs	r1, #1
   1a50a:	f10a 0030 	add.w	r0, sl, #48	; 0x30
   1a50e:	f00f fcfe 	bl	29f0e <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   1a512:	b108      	cbz	r0, 1a518 <bt_att_recv+0xe4>
			LOG_WRN("Ignoring unexpected indication");
   1a514:	4b1d      	ldr	r3, [pc, #116]	; (1a58c <bt_att_recv+0x158>)
   1a516:	e7ca      	b.n	1a4ae <bt_att_recv+0x7a>
	if (buf->len < handler->expect_len) {
   1a518:	44d8      	add	r8, fp
   1a51a:	8a23      	ldrh	r3, [r4, #16]
   1a51c:	f898 2001 	ldrb.w	r2, [r8, #1]
   1a520:	429a      	cmp	r2, r3
   1a522:	d916      	bls.n	1a552 <bt_att_recv+0x11e>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1a524:	46e9      	mov	r9, sp
   1a526:	b088      	sub	sp, #32
   1a528:	7829      	ldrb	r1, [r5, #0]
   1a52a:	466a      	mov	r2, sp
   1a52c:	4818      	ldr	r0, [pc, #96]	; (1a590 <bt_att_recv+0x15c>)
   1a52e:	61d1      	str	r1, [r2, #28]
   1a530:	2404      	movs	r4, #4
   1a532:	e9c2 0305 	strd	r0, r3, [r2, #20]
   1a536:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1a53a:	f842 4f10 	str.w	r4, [r2, #16]!
   1a53e:	480f      	ldr	r0, [pc, #60]	; (1a57c <bt_att_recv+0x148>)
   1a540:	f00f fbee 	bl	29d20 <z_log_msg_static_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
   1a544:	f898 3002 	ldrb.w	r3, [r8, #2]
   1a548:	2b01      	cmp	r3, #1
   1a54a:	46cd      	mov	sp, r9
   1a54c:	d185      	bne.n	1a45a <bt_att_recv+0x26>
		err = BT_ATT_ERR_INVALID_PDU;
   1a54e:	4623      	mov	r3, r4
   1a550:	e00c      	b.n	1a56c <bt_att_recv+0x138>
		err = handler->func(att_chan, buf);
   1a552:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1a556:	4621      	mov	r1, r4
   1a558:	4630      	mov	r0, r6
   1a55a:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   1a55c:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   1a560:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   1a562:	f47f af7a 	bne.w	1a45a <bt_att_recv+0x26>
   1a566:	2800      	cmp	r0, #0
   1a568:	f43f af77 	beq.w	1a45a <bt_att_recv+0x26>
		send_err_rsp(att_chan, hdr->code, 0, err);
   1a56c:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   1a56e:	2900      	cmp	r1, #0
   1a570:	f43f af73 	beq.w	1a45a <bt_att_recv+0x26>
   1a574:	e7c0      	b.n	1a4f8 <bt_att_recv+0xc4>
   1a576:	bf00      	nop
   1a578:	0002f637 	.word	0x0002f637
   1a57c:	0002caf4 	.word	0x0002caf4
   1a580:	0002d128 	.word	0x0002d128
   1a584:	0002f66c 	.word	0x0002f66c
   1a588:	0002f652 	.word	0x0002f652
   1a58c:	0002f688 	.word	0x0002f688
   1a590:	0002f6a7 	.word	0x0002f6a7

0001a594 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1a594:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a596:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1a598:	6803      	ldr	r3, [r0, #0]
   1a59a:	460d      	mov	r5, r1
   1a59c:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1a59e:	b087      	sub	sp, #28
   1a5a0:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1a5a2:	bf18      	it	ne
   1a5a4:	2101      	movne	r1, #1
   1a5a6:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1a5a8:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1a5aa:	f010 fa37 	bl	2aa1c <bt_gatt_change_aware>
   1a5ae:	b948      	cbnz	r0, 1a5c4 <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1a5b0:	2105      	movs	r1, #5
   1a5b2:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1a5b6:	f00f fcaa 	bl	29f0e <atomic_test_and_set_bit>
   1a5ba:	2800      	cmp	r0, #0
   1a5bc:	d048      	beq.n	1a650 <att_write_rsp.constprop.0+0xbc>
			return 0;
   1a5be:	2000      	movs	r0, #0
}
   1a5c0:	b007      	add	sp, #28
   1a5c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   1a5c4:	2e00      	cmp	r6, #0
   1a5c6:	d045      	beq.n	1a654 <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   1a5c8:	2218      	movs	r2, #24
   1a5ca:	2100      	movs	r1, #0
   1a5cc:	4668      	mov	r0, sp
   1a5ce:	f00e fcb6 	bl	28f3e <memset>
	if (rsp) {
   1a5d2:	bb67      	cbnz	r7, 1a62e <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   1a5d4:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1a5d6:	4a20      	ldr	r2, [pc, #128]	; (1a658 <att_write_rsp.constprop.0+0xc4>)
	data.conn = chan->att->conn;
   1a5d8:	681b      	ldr	r3, [r3, #0]
   1a5da:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   1a5dc:	2300      	movs	r3, #0
   1a5de:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   1a5e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1a5e4:	9303      	str	r3, [sp, #12]
	data.len = len;
   1a5e6:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   1a5ea:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1a5ee:	2301      	movs	r3, #1
   1a5f0:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1a5f4:	4631      	mov	r1, r6
   1a5f6:	466b      	mov	r3, sp
   1a5f8:	4630      	mov	r0, r6
	data.req = req;
   1a5fa:	f88d 5008 	strb.w	r5, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1a5fe:	f00f faf5 	bl	29bec <bt_gatt_foreach_attr>
	if (data.err) {
   1a602:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1a606:	b1e3      	cbz	r3, 1a642 <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   1a608:	2f00      	cmp	r7, #0
   1a60a:	d0d8      	beq.n	1a5be <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1a60c:	9b01      	ldr	r3, [sp, #4]
   1a60e:	6998      	ldr	r0, [r3, #24]
   1a610:	f7ff fbd0 	bl	19db4 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1a614:	9801      	ldr	r0, [sp, #4]
   1a616:	f004 fa47 	bl	1eaa8 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   1a61a:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   1a61e:	2d00      	cmp	r5, #0
   1a620:	d0cd      	beq.n	1a5be <att_write_rsp.constprop.0+0x2a>
   1a622:	4632      	mov	r2, r6
   1a624:	4629      	mov	r1, r5
   1a626:	4620      	mov	r0, r4
   1a628:	f00f fdcf 	bl	2a1ca <send_err_rsp.part.0>
   1a62c:	e7c7      	b.n	1a5be <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1a62e:	2200      	movs	r2, #0
   1a630:	4639      	mov	r1, r7
   1a632:	4620      	mov	r0, r4
   1a634:	f7ff fe8a 	bl	1a34c <bt_att_chan_create_pdu>
   1a638:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   1a63a:	2800      	cmp	r0, #0
   1a63c:	d1ca      	bne.n	1a5d4 <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   1a63e:	200e      	movs	r0, #14
   1a640:	e7be      	b.n	1a5c0 <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   1a642:	9901      	ldr	r1, [sp, #4]
   1a644:	2900      	cmp	r1, #0
   1a646:	d0ba      	beq.n	1a5be <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   1a648:	4620      	mov	r0, r4
   1a64a:	f00f fb9d 	bl	29d88 <bt_att_chan_send_rsp>
   1a64e:	e7b6      	b.n	1a5be <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1a650:	2012      	movs	r0, #18
   1a652:	e7b5      	b.n	1a5c0 <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   1a654:	2001      	movs	r0, #1
   1a656:	e7b3      	b.n	1a5c0 <att_write_rsp.constprop.0+0x2c>
   1a658:	00029b8b 	.word	0x00029b8b

0001a65c <bt_att_create_pdu>:
{
   1a65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a65e:	af00      	add	r7, sp, #0
   1a660:	460e      	mov	r6, r1
   1a662:	4615      	mov	r5, r2
	att = att_get(conn);
   1a664:	f7ff fcea 	bl	1a03c <att_get>
	if (!att) {
   1a668:	b1e0      	cbz	r0, 1a6a4 <bt_att_create_pdu+0x48>
	return list->head;
   1a66a:	6a43      	ldr	r3, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a66c:	4618      	mov	r0, r3
   1a66e:	b11b      	cbz	r3, 1a678 <bt_att_create_pdu+0x1c>
	return node->next;
   1a670:	f850 3988 	ldr.w	r3, [r0], #-136
   1a674:	b103      	cbz	r3, 1a678 <bt_att_create_pdu+0x1c>
   1a676:	3b88      	subs	r3, #136	; 0x88
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1a678:	1c6c      	adds	r4, r5, #1
   1a67a:	4622      	mov	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a67c:	b118      	cbz	r0, 1a686 <bt_att_create_pdu+0x2a>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1a67e:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   1a680:	42a1      	cmp	r1, r4
   1a682:	d21a      	bcs.n	1a6ba <bt_att_create_pdu+0x5e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a684:	b983      	cbnz	r3, 1a6a8 <bt_att_create_pdu+0x4c>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   1a686:	466d      	mov	r5, sp
   1a688:	b088      	sub	sp, #32
   1a68a:	466a      	mov	r2, sp
   1a68c:	4b0f      	ldr	r3, [pc, #60]	; (1a6cc <bt_att_create_pdu+0x70>)
   1a68e:	4810      	ldr	r0, [pc, #64]	; (1a6d0 <bt_att_create_pdu+0x74>)
   1a690:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1a694:	2303      	movs	r3, #3
   1a696:	f842 3f10 	str.w	r3, [r2, #16]!
   1a69a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1a69e:	f00f fb3f 	bl	29d20 <z_log_msg_static_create.constprop.0>
   1a6a2:	46ad      	mov	sp, r5
		return NULL;
   1a6a4:	2000      	movs	r0, #0
   1a6a6:	e00c      	b.n	1a6c2 <bt_att_create_pdu+0x66>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a6a8:	4618      	mov	r0, r3
   1a6aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   1a6ae:	b153      	cbz	r3, 1a6c6 <bt_att_create_pdu+0x6a>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1a6b0:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   1a6b2:	428a      	cmp	r2, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a6b4:	f1a3 0388 	sub.w	r3, r3, #136	; 0x88
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1a6b8:	d8f6      	bhi.n	1a6a8 <bt_att_create_pdu+0x4c>
		return bt_att_chan_create_pdu(chan, op, len);
   1a6ba:	462a      	mov	r2, r5
   1a6bc:	4631      	mov	r1, r6
   1a6be:	f7ff fe45 	bl	1a34c <bt_att_chan_create_pdu>
}
   1a6c2:	46bd      	mov	sp, r7
   1a6c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1a6c6:	4614      	mov	r4, r2
   1a6c8:	e7d9      	b.n	1a67e <bt_att_create_pdu+0x22>
   1a6ca:	bf00      	nop
   1a6cc:	0002f6c6 	.word	0x0002f6c6
   1a6d0:	0002caf4 	.word	0x0002caf4

0001a6d4 <att_read_group_req>:
{
   1a6d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1a6d8:	8a0e      	ldrh	r6, [r1, #16]
   1a6da:	3e04      	subs	r6, #4
   1a6dc:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   1a6de:	2e02      	cmp	r6, #2
{
   1a6e0:	4604      	mov	r4, r0
   1a6e2:	b08c      	sub	sp, #48	; 0x30
   1a6e4:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   1a6e6:	d001      	beq.n	1a6ec <att_read_group_req+0x18>
   1a6e8:	2e10      	cmp	r6, #16
   1a6ea:	d16a      	bne.n	1a7c2 <att_read_group_req+0xee>
   1a6ec:	2104      	movs	r1, #4
   1a6ee:	300c      	adds	r0, #12
   1a6f0:	f010 fe53 	bl	2b39a <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1a6f4:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   1a6f8:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1a6fa:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1a6fc:	1d01      	adds	r1, r0, #4
   1a6fe:	4632      	mov	r2, r6
   1a700:	4640      	mov	r0, r8
   1a702:	f00e fcd6 	bl	290b2 <bt_uuid_create>
   1a706:	2800      	cmp	r0, #0
   1a708:	d05d      	beq.n	1a7c6 <att_read_group_req+0xf2>
	if (!start || !end) {
   1a70a:	2d00      	cmp	r5, #0
   1a70c:	d03a      	beq.n	1a784 <att_read_group_req+0xb0>
   1a70e:	2600      	movs	r6, #0
   1a710:	2f00      	cmp	r7, #0
   1a712:	d036      	beq.n	1a782 <att_read_group_req+0xae>
	if (start > end) {
   1a714:	42bd      	cmp	r5, r7
   1a716:	d835      	bhi.n	1a784 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1a718:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1a71c:	a901      	add	r1, sp, #4
   1a71e:	4640      	mov	r0, r8
   1a720:	f88d 6004 	strb.w	r6, [sp, #4]
   1a724:	f8ad 3006 	strh.w	r3, [sp, #6]
   1a728:	f00e fc95 	bl	29056 <bt_uuid_cmp>
   1a72c:	bb70      	cbnz	r0, 1a78c <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   1a72e:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   1a730:	2214      	movs	r2, #20
   1a732:	2100      	movs	r1, #0
   1a734:	a807      	add	r0, sp, #28
   1a736:	f00e fc02 	bl	28f3e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   1a73a:	2201      	movs	r2, #1
   1a73c:	2111      	movs	r1, #17
   1a73e:	4630      	mov	r0, r6
   1a740:	f7ff ff8c 	bl	1a65c <bt_att_create_pdu>
   1a744:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   1a746:	2800      	cmp	r0, #0
   1a748:	d03d      	beq.n	1a7c6 <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   1a74a:	2101      	movs	r1, #1
   1a74c:	300c      	adds	r0, #12
	data.uuid = uuid;
   1a74e:	e9cd 4807 	strd	r4, r8, [sp, #28]
   1a752:	f010 fdfb 	bl	2b34c <net_buf_simple_add>
	data.rsp->len = 0U;
   1a756:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1a758:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1a75a:	4a1c      	ldr	r2, [pc, #112]	; (1a7cc <att_read_group_req+0xf8>)
	data.rsp->len = 0U;
   1a75c:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1a75e:	4639      	mov	r1, r7
	data.group = NULL;
   1a760:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1a762:	4628      	mov	r0, r5
   1a764:	ab07      	add	r3, sp, #28
   1a766:	f00f fa41 	bl	29bec <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   1a76a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a76c:	781b      	ldrb	r3, [r3, #0]
   1a76e:	bb1b      	cbnz	r3, 1a7b8 <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1a770:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a772:	6998      	ldr	r0, [r3, #24]
   1a774:	f7ff fb1e 	bl	19db4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1a778:	9809      	ldr	r0, [sp, #36]	; 0x24
   1a77a:	f004 f995 	bl	1eaa8 <net_buf_unref>
	if (!req) {
   1a77e:	230a      	movs	r3, #10
   1a780:	e001      	b.n	1a786 <att_read_group_req+0xb2>
			*err = 0U;
   1a782:	463d      	mov	r5, r7
	if (!req) {
   1a784:	2301      	movs	r3, #1
   1a786:	462a      	mov	r2, r5
   1a788:	2110      	movs	r1, #16
   1a78a:	e00e      	b.n	1a7aa <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   1a78c:	f642 0301 	movw	r3, #10241	; 0x2801
   1a790:	a907      	add	r1, sp, #28
   1a792:	4640      	mov	r0, r8
   1a794:	f88d 601c 	strb.w	r6, [sp, #28]
   1a798:	f8ad 301e 	strh.w	r3, [sp, #30]
   1a79c:	f00e fc5b 	bl	29056 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1a7a0:	2800      	cmp	r0, #0
   1a7a2:	d0c4      	beq.n	1a72e <att_read_group_req+0x5a>
	if (!req) {
   1a7a4:	2310      	movs	r3, #16
   1a7a6:	462a      	mov	r2, r5
   1a7a8:	4619      	mov	r1, r3
   1a7aa:	4620      	mov	r0, r4
   1a7ac:	f00f fd0d 	bl	2a1ca <send_err_rsp.part.0>
		return 0;
   1a7b0:	2000      	movs	r0, #0
}
   1a7b2:	b00c      	add	sp, #48	; 0x30
   1a7b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   1a7b8:	9909      	ldr	r1, [sp, #36]	; 0x24
   1a7ba:	4620      	mov	r0, r4
   1a7bc:	f00f fae4 	bl	29d88 <bt_att_chan_send_rsp>
	return 0;
   1a7c0:	e7f6      	b.n	1a7b0 <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   1a7c2:	2004      	movs	r0, #4
   1a7c4:	e7f5      	b.n	1a7b2 <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   1a7c6:	200e      	movs	r0, #14
   1a7c8:	e7f3      	b.n	1a7b2 <att_read_group_req+0xde>
   1a7ca:	bf00      	nop
   1a7cc:	0001a0e9 	.word	0x0001a0e9

0001a7d0 <att_read_mult_vl_req>:
{
   1a7d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1a7d4:	6846      	ldr	r6, [r0, #4]
{
   1a7d6:	b085      	sub	sp, #20
   1a7d8:	4604      	mov	r4, r0
   1a7da:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1a7dc:	4630      	mov	r0, r6
   1a7de:	2101      	movs	r1, #1
   1a7e0:	f010 f91c 	bl	2aa1c <bt_gatt_change_aware>
   1a7e4:	b950      	cbnz	r0, 1a7fc <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1a7e6:	2105      	movs	r1, #5
   1a7e8:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1a7ec:	f00f fb8f 	bl	29f0e <atomic_test_and_set_bit>
   1a7f0:	2800      	cmp	r0, #0
   1a7f2:	d13b      	bne.n	1a86c <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1a7f4:	2012      	movs	r0, #18
}
   1a7f6:	b005      	add	sp, #20
   1a7f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   1a7fc:	2210      	movs	r2, #16
   1a7fe:	2100      	movs	r1, #0
   1a800:	4668      	mov	r0, sp
   1a802:	f00e fb9c 	bl	28f3e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   1a806:	2200      	movs	r2, #0
   1a808:	2121      	movs	r1, #33	; 0x21
   1a80a:	4630      	mov	r0, r6
   1a80c:	f7ff ff26 	bl	1a65c <bt_att_create_pdu>
   1a810:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1a812:	b368      	cbz	r0, 1a870 <att_read_mult_vl_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1a814:	f8df 905c 	ldr.w	r9, [pc, #92]	; 1a874 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   1a818:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   1a81a:	f105 070c 	add.w	r7, r5, #12
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1a81e:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   1a822:	8a2b      	ldrh	r3, [r5, #16]
   1a824:	2b01      	cmp	r3, #1
   1a826:	d804      	bhi.n	1a832 <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   1a828:	9902      	ldr	r1, [sp, #8]
   1a82a:	4620      	mov	r0, r4
   1a82c:	f00f faac 	bl	29d88 <bt_att_chan_send_rsp>
	return 0;
   1a830:	e01c      	b.n	1a86c <att_read_mult_vl_req+0x9c>
   1a832:	4638      	mov	r0, r7
   1a834:	f010 fdb9 	bl	2b3aa <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1a838:	466b      	mov	r3, sp
   1a83a:	464a      	mov	r2, r9
   1a83c:	4601      	mov	r1, r0
   1a83e:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1a840:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1a844:	f00f f9d2 	bl	29bec <bt_gatt_foreach_attr>
		if (data.err) {
   1a848:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1a84c:	2b00      	cmp	r3, #0
   1a84e:	d0e8      	beq.n	1a822 <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1a850:	9b02      	ldr	r3, [sp, #8]
   1a852:	6998      	ldr	r0, [r3, #24]
   1a854:	f7ff faae 	bl	19db4 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1a858:	9802      	ldr	r0, [sp, #8]
   1a85a:	f004 f925 	bl	1eaa8 <net_buf_unref>
	if (!req) {
   1a85e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1a862:	4632      	mov	r2, r6
   1a864:	2120      	movs	r1, #32
   1a866:	4620      	mov	r0, r4
   1a868:	f00f fcaf 	bl	2a1ca <send_err_rsp.part.0>
			return 0;
   1a86c:	2000      	movs	r0, #0
   1a86e:	e7c2      	b.n	1a7f6 <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   1a870:	200e      	movs	r0, #14
   1a872:	e7c0      	b.n	1a7f6 <att_read_mult_vl_req+0x26>
   1a874:	00029f7f 	.word	0x00029f7f

0001a878 <att_read_mult_req>:
{
   1a878:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1a87c:	6846      	ldr	r6, [r0, #4]
{
   1a87e:	b085      	sub	sp, #20
   1a880:	4604      	mov	r4, r0
   1a882:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1a884:	4630      	mov	r0, r6
   1a886:	2101      	movs	r1, #1
   1a888:	f010 f8c8 	bl	2aa1c <bt_gatt_change_aware>
   1a88c:	b950      	cbnz	r0, 1a8a4 <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1a88e:	2105      	movs	r1, #5
   1a890:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1a894:	f00f fb3b 	bl	29f0e <atomic_test_and_set_bit>
   1a898:	2800      	cmp	r0, #0
   1a89a:	d13b      	bne.n	1a914 <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1a89c:	2012      	movs	r0, #18
}
   1a89e:	b005      	add	sp, #20
   1a8a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   1a8a4:	2210      	movs	r2, #16
   1a8a6:	2100      	movs	r1, #0
   1a8a8:	4668      	mov	r0, sp
   1a8aa:	f00e fb48 	bl	28f3e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   1a8ae:	2200      	movs	r2, #0
   1a8b0:	210f      	movs	r1, #15
   1a8b2:	4630      	mov	r0, r6
   1a8b4:	f7ff fed2 	bl	1a65c <bt_att_create_pdu>
   1a8b8:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1a8ba:	b368      	cbz	r0, 1a918 <att_read_mult_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1a8bc:	f8df 905c 	ldr.w	r9, [pc, #92]	; 1a91c <att_read_mult_req+0xa4>
	data.chan = chan;
   1a8c0:	9400      	str	r4, [sp, #0]
   1a8c2:	f105 070c 	add.w	r7, r5, #12
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1a8c6:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   1a8ca:	8a2b      	ldrh	r3, [r5, #16]
   1a8cc:	2b01      	cmp	r3, #1
   1a8ce:	d804      	bhi.n	1a8da <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   1a8d0:	9902      	ldr	r1, [sp, #8]
   1a8d2:	4620      	mov	r0, r4
   1a8d4:	f00f fa58 	bl	29d88 <bt_att_chan_send_rsp>
	return 0;
   1a8d8:	e01c      	b.n	1a914 <att_read_mult_req+0x9c>
   1a8da:	4638      	mov	r0, r7
   1a8dc:	f010 fd65 	bl	2b3aa <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1a8e0:	466b      	mov	r3, sp
   1a8e2:	464a      	mov	r2, r9
   1a8e4:	4601      	mov	r1, r0
   1a8e6:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1a8e8:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1a8ec:	f00f f97e 	bl	29bec <bt_gatt_foreach_attr>
		if (data.err) {
   1a8f0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1a8f4:	2b00      	cmp	r3, #0
   1a8f6:	d0e8      	beq.n	1a8ca <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1a8f8:	9b02      	ldr	r3, [sp, #8]
   1a8fa:	6998      	ldr	r0, [r3, #24]
   1a8fc:	f7ff fa5a 	bl	19db4 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1a900:	9802      	ldr	r0, [sp, #8]
   1a902:	f004 f8d1 	bl	1eaa8 <net_buf_unref>
	if (!req) {
   1a906:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1a90a:	4632      	mov	r2, r6
   1a90c:	210e      	movs	r1, #14
   1a90e:	4620      	mov	r0, r4
   1a910:	f00f fc5b 	bl	2a1ca <send_err_rsp.part.0>
			return 0;
   1a914:	2000      	movs	r0, #0
   1a916:	e7c2      	b.n	1a89e <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   1a918:	200e      	movs	r0, #14
   1a91a:	e7c0      	b.n	1a89e <att_read_mult_req+0x26>
   1a91c:	00029f39 	.word	0x00029f39

0001a920 <att_read_rsp>:
{
   1a920:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1a924:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   1a928:	4604      	mov	r4, r0
   1a92a:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1a92c:	4640      	mov	r0, r8
   1a92e:	2101      	movs	r1, #1
{
   1a930:	4617      	mov	r7, r2
   1a932:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   1a934:	f010 f872 	bl	2aa1c <bt_gatt_change_aware>
   1a938:	b948      	cbnz	r0, 1a94e <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1a93a:	2105      	movs	r1, #5
   1a93c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1a940:	f00f fae5 	bl	29f0e <atomic_test_and_set_bit>
   1a944:	bb78      	cbnz	r0, 1a9a6 <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1a946:	2012      	movs	r0, #18
}
   1a948:	b004      	add	sp, #16
   1a94a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   1a94e:	b38d      	cbz	r5, 1a9b4 <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   1a950:	2210      	movs	r2, #16
   1a952:	2100      	movs	r1, #0
   1a954:	4668      	mov	r0, sp
   1a956:	f00e faf2 	bl	28f3e <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1a95a:	2200      	movs	r2, #0
   1a95c:	4639      	mov	r1, r7
   1a95e:	4640      	mov	r0, r8
   1a960:	f7ff fe7c 	bl	1a65c <bt_att_create_pdu>
   1a964:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1a966:	b338      	cbz	r0, 1a9b8 <att_read_rsp+0x98>
	data.offset = offset;
   1a968:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1a96c:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1a970:	2301      	movs	r3, #1
   1a972:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1a976:	4a11      	ldr	r2, [pc, #68]	; (1a9bc <att_read_rsp+0x9c>)
	data.chan = chan;
   1a978:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1a97a:	466b      	mov	r3, sp
   1a97c:	4629      	mov	r1, r5
   1a97e:	4628      	mov	r0, r5
   1a980:	f00f f934 	bl	29bec <bt_gatt_foreach_attr>
	if (data.err) {
   1a984:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1a988:	b17b      	cbz	r3, 1a9aa <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1a98a:	9b02      	ldr	r3, [sp, #8]
   1a98c:	6998      	ldr	r0, [r3, #24]
   1a98e:	f7ff fa11 	bl	19db4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1a992:	9802      	ldr	r0, [sp, #8]
   1a994:	f004 f888 	bl	1eaa8 <net_buf_unref>
	if (!req) {
   1a998:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1a99c:	462a      	mov	r2, r5
   1a99e:	4631      	mov	r1, r6
   1a9a0:	4620      	mov	r0, r4
   1a9a2:	f00f fc12 	bl	2a1ca <send_err_rsp.part.0>
			return 0;
   1a9a6:	2000      	movs	r0, #0
   1a9a8:	e7ce      	b.n	1a948 <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   1a9aa:	9902      	ldr	r1, [sp, #8]
   1a9ac:	4620      	mov	r0, r4
   1a9ae:	f00f f9eb 	bl	29d88 <bt_att_chan_send_rsp>
	return 0;
   1a9b2:	e7f8      	b.n	1a9a6 <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   1a9b4:	2001      	movs	r0, #1
   1a9b6:	e7c7      	b.n	1a948 <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   1a9b8:	200e      	movs	r0, #14
   1a9ba:	e7c5      	b.n	1a948 <att_read_rsp+0x28>
   1a9bc:	00029f39 	.word	0x00029f39

0001a9c0 <att_read_type_req>:
{
   1a9c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1a9c4:	8a0d      	ldrh	r5, [r1, #16]
   1a9c6:	3d04      	subs	r5, #4
   1a9c8:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   1a9ca:	2d02      	cmp	r5, #2
{
   1a9cc:	4604      	mov	r4, r0
   1a9ce:	b08c      	sub	sp, #48	; 0x30
   1a9d0:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   1a9d2:	d001      	beq.n	1a9d8 <att_read_type_req+0x18>
   1a9d4:	2d10      	cmp	r5, #16
   1a9d6:	d150      	bne.n	1aa7a <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   1a9d8:	2104      	movs	r1, #4
   1a9da:	300c      	adds	r0, #12
   1a9dc:	f010 fcdd 	bl	2b39a <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1a9e0:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   1a9e4:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1a9e6:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1a9e8:	1d01      	adds	r1, r0, #4
   1a9ea:	462a      	mov	r2, r5
   1a9ec:	4640      	mov	r0, r8
   1a9ee:	f00e fb60 	bl	290b2 <bt_uuid_create>
   1a9f2:	b188      	cbz	r0, 1aa18 <att_read_type_req+0x58>
	if (!start || !end) {
   1a9f4:	b19e      	cbz	r6, 1aa1e <att_read_type_req+0x5e>
   1a9f6:	b18f      	cbz	r7, 1aa1c <att_read_type_req+0x5c>
	if (start > end) {
   1a9f8:	42b7      	cmp	r7, r6
   1a9fa:	d310      	bcc.n	1aa1e <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   1a9fc:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   1a9fe:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   1aa00:	2100      	movs	r1, #0
   1aa02:	eb0d 0002 	add.w	r0, sp, r2
   1aa06:	f00e fa9a 	bl	28f3e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1aa0a:	2201      	movs	r2, #1
   1aa0c:	2109      	movs	r1, #9
   1aa0e:	4628      	mov	r0, r5
   1aa10:	f7ff fe24 	bl	1a65c <bt_att_create_pdu>
   1aa14:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   1aa16:	b960      	cbnz	r0, 1aa32 <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   1aa18:	200e      	movs	r0, #14
   1aa1a:	e007      	b.n	1aa2c <att_read_type_req+0x6c>
			*err = 0U;
   1aa1c:	463e      	mov	r6, r7
	if (!req) {
   1aa1e:	2301      	movs	r3, #1
   1aa20:	4632      	mov	r2, r6
   1aa22:	2108      	movs	r1, #8
   1aa24:	4620      	mov	r0, r4
   1aa26:	f00f fbd0 	bl	2a1ca <send_err_rsp.part.0>
		return 0;
   1aa2a:	2000      	movs	r0, #0
}
   1aa2c:	b00c      	add	sp, #48	; 0x30
   1aa2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   1aa32:	2101      	movs	r1, #1
   1aa34:	300c      	adds	r0, #12
	data.uuid = uuid;
   1aa36:	e9cd 4806 	strd	r4, r8, [sp, #24]
   1aa3a:	f010 fc87 	bl	2b34c <net_buf_simple_add>
	data.rsp->len = 0U;
   1aa3e:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1aa40:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   1aa42:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1aa44:	230a      	movs	r3, #10
   1aa46:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1aa4a:	4a0d      	ldr	r2, [pc, #52]	; (1aa80 <att_read_type_req+0xc0>)
   1aa4c:	ab06      	add	r3, sp, #24
   1aa4e:	4639      	mov	r1, r7
   1aa50:	4630      	mov	r0, r6
   1aa52:	f00f f8cb 	bl	29bec <bt_gatt_foreach_attr>
	if (data.err) {
   1aa56:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1aa5a:	b14b      	cbz	r3, 1aa70 <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1aa5c:	9b08      	ldr	r3, [sp, #32]
   1aa5e:	6998      	ldr	r0, [r3, #24]
   1aa60:	f7ff f9a8 	bl	19db4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1aa64:	9808      	ldr	r0, [sp, #32]
   1aa66:	f004 f81f 	bl	1eaa8 <net_buf_unref>
	if (!req) {
   1aa6a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1aa6e:	e7d7      	b.n	1aa20 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   1aa70:	9908      	ldr	r1, [sp, #32]
   1aa72:	4620      	mov	r0, r4
   1aa74:	f00f f988 	bl	29d88 <bt_att_chan_send_rsp>
	return 0;
   1aa78:	e7d7      	b.n	1aa2a <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   1aa7a:	2004      	movs	r0, #4
   1aa7c:	e7d6      	b.n	1aa2c <att_read_type_req+0x6c>
   1aa7e:	bf00      	nop
   1aa80:	0001a195 	.word	0x0001a195

0001aa84 <att_find_type_req>:
{
   1aa84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1aa88:	460f      	mov	r7, r1
   1aa8a:	b086      	sub	sp, #24
   1aa8c:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   1aa8e:	2106      	movs	r1, #6
   1aa90:	f107 000c 	add.w	r0, r7, #12
   1aa94:	f010 fc81 	bl	2b39a <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   1aa98:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1aa9a:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   1aa9e:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   1aaa0:	f8d7 900c 	ldr.w	r9, [r7, #12]
	if (!start || !end) {
   1aaa4:	b1c5      	cbz	r5, 1aad8 <att_find_type_req+0x54>
   1aaa6:	2300      	movs	r3, #0
   1aaa8:	f1b8 0f00 	cmp.w	r8, #0
   1aaac:	d013      	beq.n	1aad6 <att_find_type_req+0x52>
	if (start > end) {
   1aaae:	4545      	cmp	r5, r8
   1aab0:	d812      	bhi.n	1aad8 <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1aab2:	f88d 3000 	strb.w	r3, [sp]
   1aab6:	f88d 3004 	strb.w	r3, [sp, #4]
   1aaba:	a901      	add	r1, sp, #4
   1aabc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1aac0:	4668      	mov	r0, sp
   1aac2:	f8ad 2002 	strh.w	r2, [sp, #2]
   1aac6:	f8ad 3006 	strh.w	r3, [sp, #6]
   1aaca:	f00e fac4 	bl	29056 <bt_uuid_cmp>
   1aace:	4606      	mov	r6, r0
   1aad0:	b160      	cbz	r0, 1aaec <att_find_type_req+0x68>
	if (!req) {
   1aad2:	230a      	movs	r3, #10
   1aad4:	e001      	b.n	1aada <att_find_type_req+0x56>
			*err = 0U;
   1aad6:	4645      	mov	r5, r8
	if (!req) {
   1aad8:	2301      	movs	r3, #1
   1aada:	462a      	mov	r2, r5
   1aadc:	2106      	movs	r1, #6
   1aade:	4620      	mov	r0, r4
   1aae0:	f00f fb73 	bl	2a1ca <send_err_rsp.part.0>
		return 0;
   1aae4:	2000      	movs	r0, #0
}
   1aae6:	b006      	add	sp, #24
   1aae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   1aaec:	f8d4 a004 	ldr.w	sl, [r4, #4]
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1aaf0:	7c3f      	ldrb	r7, [r7, #16]
	(void)memset(&data, 0, sizeof(data));
   1aaf2:	4601      	mov	r1, r0
   1aaf4:	2214      	movs	r2, #20
   1aaf6:	a801      	add	r0, sp, #4
   1aaf8:	f00e fa21 	bl	28f3e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   1aafc:	4632      	mov	r2, r6
   1aafe:	2107      	movs	r1, #7
   1ab00:	4650      	mov	r0, sl
   1ab02:	f7ff fdab 	bl	1a65c <bt_att_create_pdu>
   1ab06:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1ab08:	b1f8      	cbz	r0, 1ab4a <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1ab0a:	230a      	movs	r3, #10
   1ab0c:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1ab10:	4a0f      	ldr	r2, [pc, #60]	; (1ab50 <att_find_type_req+0xcc>)
	data.chan = chan;
   1ab12:	9401      	str	r4, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1ab14:	ab01      	add	r3, sp, #4
   1ab16:	4641      	mov	r1, r8
   1ab18:	4628      	mov	r0, r5
	data.value = value;
   1ab1a:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.value_len = value_len;
   1ab1e:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1ab22:	f00f f863 	bl	29bec <bt_gatt_foreach_attr>
	if (data.err) {
   1ab26:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1ab2a:	b14b      	cbz	r3, 1ab40 <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1ab2c:	9b02      	ldr	r3, [sp, #8]
   1ab2e:	6998      	ldr	r0, [r3, #24]
   1ab30:	f7ff f940 	bl	19db4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1ab34:	9802      	ldr	r0, [sp, #8]
   1ab36:	f003 ffb7 	bl	1eaa8 <net_buf_unref>
	if (!req) {
   1ab3a:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1ab3e:	e7cc      	b.n	1aada <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   1ab40:	9902      	ldr	r1, [sp, #8]
   1ab42:	4620      	mov	r0, r4
   1ab44:	f00f f920 	bl	29d88 <bt_att_chan_send_rsp>
	return 0;
   1ab48:	e7cc      	b.n	1aae4 <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   1ab4a:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1ab4c:	e7cb      	b.n	1aae6 <att_find_type_req+0x62>
   1ab4e:	bf00      	nop
   1ab50:	00019dd1 	.word	0x00019dd1

0001ab54 <att_find_info_req>:
{
   1ab54:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   1ab56:	68cb      	ldr	r3, [r1, #12]
	start_handle = sys_le16_to_cpu(req->start_handle);
   1ab58:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1ab5a:	885e      	ldrh	r6, [r3, #2]
{
   1ab5c:	b085      	sub	sp, #20
   1ab5e:	4604      	mov	r4, r0
	if (!start || !end) {
   1ab60:	b195      	cbz	r5, 1ab88 <att_find_info_req+0x34>
   1ab62:	b186      	cbz	r6, 1ab86 <att_find_info_req+0x32>
	if (start > end) {
   1ab64:	42b5      	cmp	r5, r6
   1ab66:	d80f      	bhi.n	1ab88 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   1ab68:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1ab6a:	2210      	movs	r2, #16
   1ab6c:	2100      	movs	r1, #0
   1ab6e:	4668      	mov	r0, sp
   1ab70:	f00e f9e5 	bl	28f3e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   1ab74:	2200      	movs	r2, #0
   1ab76:	2105      	movs	r1, #5
   1ab78:	4638      	mov	r0, r7
   1ab7a:	f7ff fd6f 	bl	1a65c <bt_att_create_pdu>
   1ab7e:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   1ab80:	b958      	cbnz	r0, 1ab9a <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   1ab82:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   1ab84:	e007      	b.n	1ab96 <att_find_info_req+0x42>
			*err = 0U;
   1ab86:	4635      	mov	r5, r6
	if (!req) {
   1ab88:	2301      	movs	r3, #1
   1ab8a:	462a      	mov	r2, r5
   1ab8c:	2104      	movs	r1, #4
   1ab8e:	4620      	mov	r0, r4
   1ab90:	f00f fb1b 	bl	2a1ca <send_err_rsp.part.0>
		return 0;
   1ab94:	2000      	movs	r0, #0
}
   1ab96:	b005      	add	sp, #20
   1ab98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1ab9a:	466b      	mov	r3, sp
   1ab9c:	4a0a      	ldr	r2, [pc, #40]	; (1abc8 <att_find_info_req+0x74>)
	data.chan = chan;
   1ab9e:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1aba0:	4631      	mov	r1, r6
   1aba2:	4628      	mov	r0, r5
   1aba4:	f00f f822 	bl	29bec <bt_gatt_foreach_attr>
	if (!data.rsp) {
   1aba8:	9b02      	ldr	r3, [sp, #8]
   1abaa:	b943      	cbnz	r3, 1abbe <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1abac:	9b01      	ldr	r3, [sp, #4]
   1abae:	6998      	ldr	r0, [r3, #24]
   1abb0:	f7ff f900 	bl	19db4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1abb4:	9801      	ldr	r0, [sp, #4]
   1abb6:	f003 ff77 	bl	1eaa8 <net_buf_unref>
	if (!req) {
   1abba:	230a      	movs	r3, #10
   1abbc:	e7e5      	b.n	1ab8a <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   1abbe:	9901      	ldr	r1, [sp, #4]
   1abc0:	4620      	mov	r0, r4
   1abc2:	f00f f8e1 	bl	29d88 <bt_att_chan_send_rsp>
	return 0;
   1abc6:	e7e5      	b.n	1ab94 <att_find_info_req+0x40>
   1abc8:	00029c03 	.word	0x00029c03

0001abcc <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   1abcc:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   1abce:	4c0b      	ldr	r4, [pc, #44]	; (1abfc <bt_att_init+0x30>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   1abd0:	4d0b      	ldr	r5, [pc, #44]	; (1ac00 <bt_att_init+0x34>)
   1abd2:	4620      	mov	r0, r4
   1abd4:	f011 f953 	bl	2be7e <z_impl_k_queue_init>
   1abd8:	4629      	mov	r1, r5
   1abda:	4620      	mov	r0, r4
   1abdc:	f011 f95b 	bl	2be96 <k_queue_append>
   1abe0:	f105 0114 	add.w	r1, r5, #20
   1abe4:	4620      	mov	r0, r4
   1abe6:	f011 f956 	bl	2be96 <k_queue_append>
   1abea:	f105 0128 	add.w	r1, r5, #40	; 0x28
   1abee:	4620      	mov	r0, r4
   1abf0:	f011 f951 	bl	2be96 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   1abf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   1abf8:	f000 bf34 	b.w	1ba64 <bt_gatt_init>
   1abfc:	20000b20 	.word	0x20000b20
   1ac00:	200034d8 	.word	0x200034d8

0001ac04 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   1ac04:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   1ac06:	2300      	movs	r3, #0
{
   1ac08:	4605      	mov	r5, r0
   1ac0a:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   1ac0c:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   1ac0e:	f009 f89d 	bl	23d4c <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   1ac12:	4b0b      	ldr	r3, [pc, #44]	; (1ac40 <bt_att_req_alloc+0x3c>)
   1ac14:	681b      	ldr	r3, [r3, #0]
   1ac16:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   1ac18:	bf04      	itt	eq
   1ac1a:	2500      	moveq	r5, #0
   1ac1c:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1ac1e:	a901      	add	r1, sp, #4
   1ac20:	4808      	ldr	r0, [pc, #32]	; (1ac44 <bt_att_req_alloc+0x40>)
   1ac22:	462a      	mov	r2, r5
   1ac24:	4623      	mov	r3, r4
   1ac26:	f008 f987 	bl	22f38 <k_mem_slab_alloc>
   1ac2a:	4601      	mov	r1, r0
   1ac2c:	b930      	cbnz	r0, 1ac3c <bt_att_req_alloc+0x38>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   1ac2e:	9801      	ldr	r0, [sp, #4]
   1ac30:	221c      	movs	r2, #28
   1ac32:	f00e f984 	bl	28f3e <memset>

	return req;
   1ac36:	9801      	ldr	r0, [sp, #4]
}
   1ac38:	b003      	add	sp, #12
   1ac3a:	bd30      	pop	{r4, r5, pc}
		return NULL;
   1ac3c:	2000      	movs	r0, #0
   1ac3e:	e7fb      	b.n	1ac38 <bt_att_req_alloc+0x34>
   1ac40:	20003514 	.word	0x20003514
   1ac44:	20000a48 	.word	0x20000a48

0001ac48 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   1ac48:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("req %p", req);

	if (req->buf) {
   1ac4a:	6883      	ldr	r3, [r0, #8]
{
   1ac4c:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   1ac4e:	b14b      	cbz	r3, 1ac64 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   1ac50:	6998      	ldr	r0, [r3, #24]
   1ac52:	f7ff f8af 	bl	19db4 <tx_meta_data_free>
		net_buf_unref(req->buf);
   1ac56:	9b01      	ldr	r3, [sp, #4]
   1ac58:	6898      	ldr	r0, [r3, #8]
   1ac5a:	f003 ff25 	bl	1eaa8 <net_buf_unref>
		req->buf = NULL;
   1ac5e:	9b01      	ldr	r3, [sp, #4]
   1ac60:	2200      	movs	r2, #0
   1ac62:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   1ac64:	4803      	ldr	r0, [pc, #12]	; (1ac74 <bt_att_req_free+0x2c>)
   1ac66:	a901      	add	r1, sp, #4
   1ac68:	f011 f84b 	bl	2bd02 <k_mem_slab_free>
}
   1ac6c:	b003      	add	sp, #12
   1ac6e:	f85d fb04 	ldr.w	pc, [sp], #4
   1ac72:	bf00      	nop
   1ac74:	20000a48 	.word	0x20000a48

0001ac78 <att_handle_rsp>:
{
   1ac78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ac7c:	4604      	mov	r4, r0
   1ac7e:	b088      	sub	sp, #32
	k_work_cancel_delayable(&chan->timeout_work);
   1ac80:	3058      	adds	r0, #88	; 0x58
{
   1ac82:	460e      	mov	r6, r1
   1ac84:	4617      	mov	r7, r2
   1ac86:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
   1ac88:	f011 f9f3 	bl	2c072 <k_work_cancel_delayable>
	if (!chan->req) {
   1ac8c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1ac8e:	b980      	cbnz	r0, 1acb2 <att_handle_rsp+0x3a>
		LOG_WRN("No pending ATT request");
   1ac90:	4b19      	ldr	r3, [pc, #100]	; (1acf8 <att_handle_rsp+0x80>)
   1ac92:	9307      	str	r3, [sp, #28]
   1ac94:	4819      	ldr	r0, [pc, #100]	; (1acfc <att_handle_rsp+0x84>)
   1ac96:	2302      	movs	r3, #2
   1ac98:	aa06      	add	r2, sp, #24
   1ac9a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1ac9e:	9306      	str	r3, [sp, #24]
   1aca0:	f00f f83e 	bl	29d20 <z_log_msg_static_create.constprop.0>
	att_req_send_process(chan->att);
   1aca4:	6820      	ldr	r0, [r4, #0]
   1aca6:	f00f f9cb 	bl	2a040 <att_req_send_process>
}
   1acaa:	2000      	movs	r0, #0
   1acac:	b008      	add	sp, #32
   1acae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   1acb2:	4b13      	ldr	r3, [pc, #76]	; (1ad00 <att_handle_rsp+0x88>)
   1acb4:	4298      	cmp	r0, r3
   1acb6:	f04f 0800 	mov.w	r8, #0
   1acba:	d102      	bne.n	1acc2 <att_handle_rsp+0x4a>
		chan->req = NULL;
   1acbc:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
   1acc0:	e7f0      	b.n	1aca4 <att_handle_rsp+0x2c>
	func = chan->req->func;
   1acc2:	f8d0 9004 	ldr.w	r9, [r0, #4]
	chan->req->func = NULL;
   1acc6:	f8c0 8004 	str.w	r8, [r0, #4]
	params = chan->req->user_data;
   1acca:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1accc:	f8d0 a018 	ldr.w	sl, [r0, #24]
	bt_att_req_free(chan->req);
   1acd0:	f7ff ffba 	bl	1ac48 <bt_att_req_free>
	att_req_send_process(chan->att);
   1acd4:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   1acd6:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
	att_req_send_process(chan->att);
   1acda:	f00f f9b1 	bl	2a040 <att_req_send_process>
	if (func) {
   1acde:	f1b9 0f00 	cmp.w	r9, #0
   1ace2:	d0e2      	beq.n	1acaa <att_handle_rsp+0x32>
		func(chan->att->conn, err, pdu, len, params);
   1ace4:	6820      	ldr	r0, [r4, #0]
   1ace6:	f8cd a000 	str.w	sl, [sp]
   1acea:	6800      	ldr	r0, [r0, #0]
   1acec:	463b      	mov	r3, r7
   1acee:	4632      	mov	r2, r6
   1acf0:	4629      	mov	r1, r5
   1acf2:	47c8      	blx	r9
   1acf4:	e7d9      	b.n	1acaa <att_handle_rsp+0x32>
   1acf6:	bf00      	nop
   1acf8:	0002f6e1 	.word	0x0002f6e1
   1acfc:	0002caf4 	.word	0x0002caf4
   1ad00:	20003518 	.word	0x20003518

0001ad04 <bt_att_disconnected>:
{
   1ad04:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   1ad08:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   1ad0c:	4604      	mov	r4, r0
	if (!att_chan->att) {
   1ad0e:	2e00      	cmp	r6, #0
   1ad10:	d05a      	beq.n	1adc8 <bt_att_disconnected+0xc4>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1ad12:	f100 0184 	add.w	r1, r0, #132	; 0x84
   1ad16:	f106 0024 	add.w	r0, r6, #36	; 0x24
   1ad1a:	f00f f8ce 	bl	29eba <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1ad1e:	1f27      	subs	r7, r4, #4
   1ad20:	f104 0838 	add.w	r8, r4, #56	; 0x38
   1ad24:	2200      	movs	r2, #0
   1ad26:	2300      	movs	r3, #0
   1ad28:	4640      	mov	r0, r8
   1ad2a:	f010 fab4 	bl	2b296 <net_buf_get>
   1ad2e:	4605      	mov	r5, r0
   1ad30:	bb48      	cbnz	r0, 1ad86 <bt_att_disconnected+0x82>
	if (chan->req) {
   1ad32:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1ad34:	b12b      	cbz	r3, 1ad42 <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1ad36:	4602      	mov	r2, r0
   1ad38:	4601      	mov	r1, r0
   1ad3a:	230e      	movs	r3, #14
   1ad3c:	4638      	mov	r0, r7
   1ad3e:	f7ff ff9b 	bl	1ac78 <att_handle_rsp>
	chan->att = NULL;
   1ad42:	2300      	movs	r3, #0
   1ad44:	f844 3c04 	str.w	r3, [r4, #-4]
	atomic_clear_bit(chan->flags, ATT_CONNECTED);
   1ad48:	2102      	movs	r1, #2
   1ad4a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1ad4e:	f00f f8cd 	bl	29eec <atomic_clear_bit>
	if (!sys_slist_is_empty(&att->chans)) {
   1ad52:	6a73      	ldr	r3, [r6, #36]	; 0x24
   1ad54:	2b00      	cmp	r3, #0
   1ad56:	d137      	bne.n	1adc8 <bt_att_disconnected+0xc4>
	att_reset(att);
   1ad58:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1ad5a:	9803      	ldr	r0, [sp, #12]
   1ad5c:	2200      	movs	r2, #0
   1ad5e:	2300      	movs	r3, #0
   1ad60:	300c      	adds	r0, #12
   1ad62:	f010 fa98 	bl	2b296 <net_buf_get>
   1ad66:	4605      	mov	r5, r0
   1ad68:	b9a0      	cbnz	r0, 1ad94 <bt_att_disconnected+0x90>
	while (!sys_slist_is_empty(&att->reqs)) {
   1ad6a:	9803      	ldr	r0, [sp, #12]
	return list->head;
   1ad6c:	6845      	ldr	r5, [r0, #4]
   1ad6e:	b9c5      	cbnz	r5, 1ada2 <bt_att_disconnected+0x9e>
	att->conn = NULL;
   1ad70:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   1ad72:	a903      	add	r1, sp, #12
   1ad74:	4816      	ldr	r0, [pc, #88]	; (1add0 <bt_att_disconnected+0xcc>)
   1ad76:	f010 ffc4 	bl	2bd02 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   1ad7a:	6820      	ldr	r0, [r4, #0]
}
   1ad7c:	b004      	add	sp, #16
   1ad7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   1ad82:	f001 bd3b 	b.w	1c7fc <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1ad86:	69a8      	ldr	r0, [r5, #24]
   1ad88:	f7ff f814 	bl	19db4 <tx_meta_data_free>
		net_buf_unref(buf);
   1ad8c:	4628      	mov	r0, r5
   1ad8e:	f003 fe8b 	bl	1eaa8 <net_buf_unref>
   1ad92:	e7c7      	b.n	1ad24 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1ad94:	69a8      	ldr	r0, [r5, #24]
   1ad96:	f7ff f80d 	bl	19db4 <tx_meta_data_free>
		net_buf_unref(buf);
   1ad9a:	4628      	mov	r0, r5
   1ad9c:	f003 fe84 	bl	1eaa8 <net_buf_unref>
   1ada0:	e7db      	b.n	1ad5a <bt_att_disconnected+0x56>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ada2:	6882      	ldr	r2, [r0, #8]
	return node->next;
   1ada4:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1ada6:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ada8:	4295      	cmp	r5, r2
	list->tail = node;
   1adaa:	bf08      	it	eq
   1adac:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   1adae:	686e      	ldr	r6, [r5, #4]
   1adb0:	b136      	cbz	r6, 1adc0 <bt_att_disconnected+0xbc>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1adb2:	69ab      	ldr	r3, [r5, #24]
   1adb4:	9300      	str	r3, [sp, #0]
   1adb6:	2300      	movs	r3, #0
   1adb8:	6800      	ldr	r0, [r0, #0]
   1adba:	461a      	mov	r2, r3
   1adbc:	210e      	movs	r1, #14
   1adbe:	47b0      	blx	r6
		bt_att_req_free(req);
   1adc0:	4628      	mov	r0, r5
   1adc2:	f7ff ff41 	bl	1ac48 <bt_att_req_free>
   1adc6:	e7d0      	b.n	1ad6a <bt_att_disconnected+0x66>
}
   1adc8:	b004      	add	sp, #16
   1adca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1adce:	bf00      	nop
   1add0:	20000a10 	.word	0x20000a10

0001add4 <att_timeout>:
{
   1add4:	b510      	push	{r4, lr}
   1add6:	4604      	mov	r4, r0
   1add8:	b086      	sub	sp, #24
	LOG_ERR("ATT Timeout");
   1adda:	4b08      	ldr	r3, [pc, #32]	; (1adfc <att_timeout+0x28>)
   1addc:	9305      	str	r3, [sp, #20]
   1adde:	4808      	ldr	r0, [pc, #32]	; (1ae00 <att_timeout+0x2c>)
   1ade0:	2302      	movs	r3, #2
   1ade2:	aa04      	add	r2, sp, #16
   1ade4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ade8:	9304      	str	r3, [sp, #16]
   1adea:	f00e ff99 	bl	29d20 <z_log_msg_static_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   1adee:	f1a4 0054 	sub.w	r0, r4, #84	; 0x54
}
   1adf2:	b006      	add	sp, #24
   1adf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   1adf8:	f7ff bf84 	b.w	1ad04 <bt_att_disconnected>
   1adfc:	0002f6f8 	.word	0x0002f6f8
   1ae00:	0002caf4 	.word	0x0002caf4

0001ae04 <find_cf_cfg_by_addr>:
#endif
}

static struct gatt_cf_cfg *find_cf_cfg_by_addr(uint8_t id,
					       const bt_addr_le_t *addr)
{
   1ae04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ae06:	4d0b      	ldr	r5, [pc, #44]	; (1ae34 <find_cf_cfg_by_addr+0x30>)
   1ae08:	4606      	mov	r6, r0
   1ae0a:	460f      	mov	r7, r1
   1ae0c:	2400      	movs	r4, #0
	if (IS_ENABLED(CONFIG_BT_GATT_CACHING)) {
		int i;

		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
			if (id == cf_cfg[i].id &&
   1ae0e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1ae12:	42b3      	cmp	r3, r6
   1ae14:	d107      	bne.n	1ae26 <find_cf_cfg_by_addr+0x22>
			    bt_addr_le_eq(addr, &cf_cfg[i].peer)) {
   1ae16:	4629      	mov	r1, r5
   1ae18:	4638      	mov	r0, r7
   1ae1a:	f00f fb98 	bl	2a54e <bt_addr_le_eq>
			if (id == cf_cfg[i].id &&
   1ae1e:	b110      	cbz	r0, 1ae26 <find_cf_cfg_by_addr+0x22>
				return &cf_cfg[i];
   1ae20:	4805      	ldr	r0, [pc, #20]	; (1ae38 <find_cf_cfg_by_addr+0x34>)
   1ae22:	4420      	add	r0, r4
			}
		}
	}

	return NULL;
}
   1ae24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1ae26:	3410      	adds	r4, #16
   1ae28:	2c60      	cmp	r4, #96	; 0x60
   1ae2a:	f105 0510 	add.w	r5, r5, #16
   1ae2e:	d1ee      	bne.n	1ae0e <find_cf_cfg_by_addr+0xa>
	return NULL;
   1ae30:	2000      	movs	r0, #0
   1ae32:	e7f7      	b.n	1ae24 <find_cf_cfg_by_addr+0x20>
   1ae34:	2000354d 	.word	0x2000354d
   1ae38:	2000354c 	.word	0x2000354c

0001ae3c <gatt_delayed_store_find>:
{
   1ae3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ae3e:	4d0c      	ldr	r5, [pc, #48]	; (1ae70 <gatt_delayed_store_find+0x34>)
   1ae40:	4607      	mov	r7, r0
   1ae42:	460e      	mov	r6, r1
   1ae44:	2400      	movs	r4, #0
		if (el->id == id &&
   1ae46:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1ae4a:	42bb      	cmp	r3, r7
   1ae4c:	d006      	beq.n	1ae5c <gatt_delayed_store_find+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(gatt_delayed_store.peer_list); i++) {
   1ae4e:	340c      	adds	r4, #12
   1ae50:	2c48      	cmp	r4, #72	; 0x48
   1ae52:	f105 050c 	add.w	r5, r5, #12
   1ae56:	d1f6      	bne.n	1ae46 <gatt_delayed_store_find+0xa>
	return NULL;
   1ae58:	2000      	movs	r0, #0
}
   1ae5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		    bt_addr_le_eq(peer_addr, &el->peer)) {
   1ae5c:	4629      	mov	r1, r5
   1ae5e:	4630      	mov	r0, r6
   1ae60:	f00f fb75 	bl	2a54e <bt_addr_le_eq>
		if (el->id == id &&
   1ae64:	2800      	cmp	r0, #0
   1ae66:	d0f2      	beq.n	1ae4e <gatt_delayed_store_find+0x12>
		el = &gatt_delayed_store.peer_list[i];
   1ae68:	4802      	ldr	r0, [pc, #8]	; (1ae74 <gatt_delayed_store_find+0x38>)
   1ae6a:	4420      	add	r0, r4
   1ae6c:	e7f5      	b.n	1ae5a <gatt_delayed_store_find+0x1e>
   1ae6e:	bf00      	nop
   1ae70:	20002071 	.word	0x20002071
   1ae74:	20002070 	.word	0x20002070

0001ae78 <find_sc_cfg>:
{
   1ae78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ae7a:	4d0b      	ldr	r5, [pc, #44]	; (1aea8 <find_sc_cfg+0x30>)
   1ae7c:	4606      	mov	r6, r0
   1ae7e:	460f      	mov	r7, r1
   1ae80:	2400      	movs	r4, #0
		if (id == sc_cfg[i].id &&
   1ae82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1ae86:	42b3      	cmp	r3, r6
   1ae88:	d107      	bne.n	1ae9a <find_sc_cfg+0x22>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   1ae8a:	4639      	mov	r1, r7
   1ae8c:	4628      	mov	r0, r5
   1ae8e:	f00f fb5e 	bl	2a54e <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   1ae92:	b110      	cbz	r0, 1ae9a <find_sc_cfg+0x22>
			return &sc_cfg[i];
   1ae94:	4805      	ldr	r0, [pc, #20]	; (1aeac <find_sc_cfg+0x34>)
   1ae96:	4420      	add	r0, r4
}
   1ae98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1ae9a:	340c      	adds	r4, #12
   1ae9c:	2c48      	cmp	r4, #72	; 0x48
   1ae9e:	f105 050c 	add.w	r5, r5, #12
   1aea2:	d1ee      	bne.n	1ae82 <find_sc_cfg+0xa>
	return NULL;
   1aea4:	2000      	movs	r0, #0
   1aea6:	e7f7      	b.n	1ae98 <find_sc_cfg+0x20>
   1aea8:	2000451b 	.word	0x2000451b
   1aeac:	2000451a 	.word	0x2000451a

0001aeb0 <ccc_load>:
{
   1aeb0:	b570      	push	{r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1aeb2:	4b20      	ldr	r3, [pc, #128]	; (1af34 <ccc_load+0x84>)
{
   1aeb4:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1aeb6:	6882      	ldr	r2, [r0, #8]
   1aeb8:	429a      	cmp	r2, r3
   1aeba:	d10f      	bne.n	1aedc <ccc_load+0x2c>
	if (!load->entry) {
   1aebc:	68a5      	ldr	r5, [r4, #8]
	ccc = attr->user_data;
   1aebe:	68c6      	ldr	r6, [r0, #12]
	if (!load->entry) {
   1aec0:	b975      	cbnz	r5, 1aee0 <ccc_load+0x30>
	cfg = ccc_find_cfg(ccc, addr, id);
   1aec2:	7922      	ldrb	r2, [r4, #4]
   1aec4:	6821      	ldr	r1, [r4, #0]
   1aec6:	4630      	mov	r0, r6
   1aec8:	f00f fb49 	bl	2a55e <ccc_find_cfg>
	if (!cfg) {
   1aecc:	4604      	mov	r4, r0
   1aece:	b128      	cbz	r0, 1aedc <ccc_load+0x2c>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1aed0:	4919      	ldr	r1, [pc, #100]	; (1af38 <ccc_load+0x88>)
   1aed2:	3001      	adds	r0, #1
   1aed4:	f00f fb6e 	bl	2a5b4 <bt_addr_le_copy>
	cfg->id = 0U;
   1aed8:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1aeda:	8125      	strh	r5, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
   1aedc:	2001      	movs	r0, #1
}
   1aede:	bd70      	pop	{r4, r5, r6, pc}
	} else if (!load->count) {
   1aee0:	68e0      	ldr	r0, [r4, #12]
   1aee2:	2800      	cmp	r0, #0
   1aee4:	d0fb      	beq.n	1aede <ccc_load+0x2e>
	if (load->entry->handle != handle) {
   1aee6:	882b      	ldrh	r3, [r5, #0]
   1aee8:	428b      	cmp	r3, r1
   1aeea:	d00a      	beq.n	1af02 <ccc_load+0x52>
		if (load->entry->handle < handle) {
   1aeec:	d2f6      	bcs.n	1aedc <ccc_load+0x2c>
	load->count--;
   1aeee:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   1aef0:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   1aef2:	3801      	subs	r0, #1
	load->entry++;
   1aef4:	3304      	adds	r3, #4
	load->count--;
   1aef6:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1aef8:	3800      	subs	r0, #0
	load->entry++;
   1aefa:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1aefc:	bf18      	it	ne
   1aefe:	2001      	movne	r0, #1
   1af00:	e7ed      	b.n	1aede <ccc_load+0x2e>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   1af02:	7922      	ldrb	r2, [r4, #4]
   1af04:	6821      	ldr	r1, [r4, #0]
   1af06:	4630      	mov	r0, r6
   1af08:	f00f fb29 	bl	2a55e <ccc_find_cfg>
	if (!cfg) {
   1af0c:	4605      	mov	r5, r0
   1af0e:	b968      	cbnz	r0, 1af2c <ccc_load+0x7c>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   1af10:	4602      	mov	r2, r0
   1af12:	4909      	ldr	r1, [pc, #36]	; (1af38 <ccc_load+0x88>)
   1af14:	4630      	mov	r0, r6
   1af16:	f00f fb22 	bl	2a55e <ccc_find_cfg>
		if (!cfg) {
   1af1a:	4605      	mov	r5, r0
   1af1c:	2800      	cmp	r0, #0
   1af1e:	d0e6      	beq.n	1aeee <ccc_load+0x3e>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   1af20:	6821      	ldr	r1, [r4, #0]
   1af22:	3001      	adds	r0, #1
   1af24:	f00f fb46 	bl	2a5b4 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   1af28:	7923      	ldrb	r3, [r4, #4]
   1af2a:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   1af2c:	68a3      	ldr	r3, [r4, #8]
   1af2e:	885b      	ldrh	r3, [r3, #2]
   1af30:	812b      	strh	r3, [r5, #8]
   1af32:	e7dc      	b.n	1aeee <ccc_load+0x3e>
   1af34:	0001b665 	.word	0x0001b665
   1af38:	0002e38f 	.word	0x0002e38f

0001af3c <find_cf_cfg>:
{
   1af3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1af40:	4c0d      	ldr	r4, [pc, #52]	; (1af78 <find_cf_cfg+0x3c>)
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1af42:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1af7c <find_cf_cfg+0x40>
{
   1af46:	4605      	mov	r5, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1af48:	2600      	movs	r6, #0
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1af4a:	4627      	mov	r7, r4
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1af4c:	1c62      	adds	r2, r4, #1
		if (!conn) {
   1af4e:	b96d      	cbnz	r5, 1af6c <find_cf_cfg+0x30>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1af50:	4641      	mov	r1, r8
   1af52:	4610      	mov	r0, r2
   1af54:	f00f fafb 	bl	2a54e <bt_addr_le_eq>
   1af58:	b928      	cbnz	r0, 1af66 <find_cf_cfg+0x2a>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1af5a:	3601      	adds	r6, #1
   1af5c:	2e06      	cmp	r6, #6
   1af5e:	f104 0410 	add.w	r4, r4, #16
   1af62:	d1f2      	bne.n	1af4a <find_cf_cfg+0xe>
	return NULL;
   1af64:	2700      	movs	r7, #0
}
   1af66:	4638      	mov	r0, r7
   1af68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1af6c:	7821      	ldrb	r1, [r4, #0]
   1af6e:	4628      	mov	r0, r5
   1af70:	f00e fcf9 	bl	29966 <bt_conn_is_peer_addr_le>
   1af74:	e7f0      	b.n	1af58 <find_cf_cfg+0x1c>
   1af76:	bf00      	nop
   1af78:	2000354c 	.word	0x2000354c
   1af7c:	0002e38f 	.word	0x0002e38f

0001af80 <find_ccc_cfg>:
{
   1af80:	b510      	push	{r4, lr}
						    &cfg->peer)) {
   1af82:	1c4a      	adds	r2, r1, #1
{
   1af84:	460c      	mov	r4, r1
		if (conn) {
   1af86:	b138      	cbz	r0, 1af98 <find_ccc_cfg+0x18>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1af88:	7809      	ldrb	r1, [r1, #0]
   1af8a:	f00e fcec 	bl	29966 <bt_conn_is_peer_addr_le>
   1af8e:	b108      	cbz	r0, 1af94 <find_ccc_cfg+0x14>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1af90:	4620      	mov	r0, r4
}
   1af92:	bd10      	pop	{r4, pc}
	return NULL;
   1af94:	2000      	movs	r0, #0
   1af96:	e7fc      	b.n	1af92 <find_ccc_cfg+0x12>
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1af98:	4902      	ldr	r1, [pc, #8]	; (1afa4 <find_ccc_cfg+0x24>)
   1af9a:	4610      	mov	r0, r2
   1af9c:	f00f fad7 	bl	2a54e <bt_addr_le_eq>
   1afa0:	e7f5      	b.n	1af8e <find_ccc_cfg+0xe>
   1afa2:	bf00      	nop
   1afa4:	0002e38f 	.word	0x0002e38f

0001afa8 <gatt_delayed_store_enqueue>:
{
   1afa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1afac:	4606      	mov	r6, r0
   1afae:	460f      	mov	r7, r1
   1afb0:	4690      	mov	r8, r2
	bool bonded = bt_addr_le_is_bonded(id, peer_addr);
   1afb2:	f00e f9be 	bl	29332 <bt_addr_le_is_bonded>
	struct ds_peer *el = gatt_delayed_store_find(id, peer_addr);
   1afb6:	4639      	mov	r1, r7
	bool bonded = bt_addr_le_is_bonded(id, peer_addr);
   1afb8:	4604      	mov	r4, r0
	struct ds_peer *el = gatt_delayed_store_find(id, peer_addr);
   1afba:	4630      	mov	r0, r6
   1afbc:	f7ff ff3e 	bl	1ae3c <gatt_delayed_store_find>
   1afc0:	4605      	mov	r5, r0
	if (bonded) {
   1afc2:	b344      	cbz	r4, 1b016 <gatt_delayed_store_enqueue+0x6e>
		if (el == NULL) {
   1afc4:	b990      	cbnz	r0, 1afec <gatt_delayed_store_enqueue+0x44>
   1afc6:	4a15      	ldr	r2, [pc, #84]	; (1b01c <gatt_delayed_store_enqueue+0x74>)
	for (size_t i = 0; i < ARRAY_SIZE(gatt_delayed_store.peer_list); i++) {
   1afc8:	4604      	mov	r4, r0
		if (atomic_get(el->flags) == 0) {
   1afca:	4610      	mov	r0, r2
   1afcc:	f00f faf5 	bl	2a5ba <atomic_get>
   1afd0:	b9d8      	cbnz	r0, 1b00a <gatt_delayed_store_enqueue+0x62>
   1afd2:	220c      	movs	r2, #12
   1afd4:	4354      	muls	r4, r2
		el = &gatt_delayed_store.peer_list[i];
   1afd6:	f8df 9048 	ldr.w	r9, [pc, #72]	; 1b020 <gatt_delayed_store_enqueue+0x78>
			bt_addr_le_copy(&el->peer, peer_addr);
   1afda:	1c60      	adds	r0, r4, #1
   1afdc:	4639      	mov	r1, r7
   1afde:	4448      	add	r0, r9
   1afe0:	f00f fae8 	bl	2a5b4 <bt_addr_le_copy>
			el->id = id;
   1afe4:	f809 6004 	strb.w	r6, [r9, r4]
		el = &gatt_delayed_store.peer_list[i];
   1afe8:	eb04 0509 	add.w	r5, r4, r9
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1afec:	2101      	movs	r1, #1
   1afee:	fa01 f108 	lsl.w	r1, r1, r8
   1aff2:	f105 0008 	add.w	r0, r5, #8
   1aff6:	f00f fabf 	bl	2a578 <atomic_or>
}
   1affa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		k_work_reschedule(&gatt_delayed_store.work,
   1affe:	4809      	ldr	r0, [pc, #36]	; (1b024 <gatt_delayed_store_enqueue+0x7c>)
   1b000:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1b004:	2300      	movs	r3, #0
   1b006:	f008 bbbf 	b.w	23788 <k_work_reschedule>
	for (size_t i = 0; i < ARRAY_SIZE(gatt_delayed_store.peer_list); i++) {
   1b00a:	3401      	adds	r4, #1
   1b00c:	2c06      	cmp	r4, #6
   1b00e:	f102 020c 	add.w	r2, r2, #12
   1b012:	d1da      	bne.n	1afca <gatt_delayed_store_enqueue+0x22>
   1b014:	e7ea      	b.n	1afec <gatt_delayed_store_enqueue+0x44>
}
   1b016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b01a:	bf00      	nop
   1b01c:	20002078 	.word	0x20002078
   1b020:	20002070 	.word	0x20002070
   1b024:	200020b8 	.word	0x200020b8

0001b028 <ccc_set_direct.part.0>:
static int ccc_set_direct(const char *key, size_t len, settings_read_cb read_cb,
   1b028:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
			LOG_ERR("Invalid key");
   1b02a:	4b07      	ldr	r3, [pc, #28]	; (1b048 <ccc_set_direct.part.0+0x20>)
   1b02c:	9305      	str	r3, [sp, #20]
   1b02e:	4807      	ldr	r0, [pc, #28]	; (1b04c <ccc_set_direct.part.0+0x24>)
   1b030:	2302      	movs	r3, #2
   1b032:	aa04      	add	r2, sp, #16
   1b034:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b038:	9304      	str	r3, [sp, #16]
   1b03a:	f00f fac4 	bl	2a5c6 <z_log_msg_static_create.constprop.0>
}
   1b03e:	f06f 0015 	mvn.w	r0, #21
   1b042:	b007      	add	sp, #28
   1b044:	f85d fb04 	ldr.w	pc, [sp], #4
   1b048:	0002f70b 	.word	0x0002f70b
   1b04c:	0002cb1c 	.word	0x0002cb1c

0001b050 <sc_set>:
}

#if defined(CONFIG_BT_GATT_SERVICE_CHANGED)
static int sc_set(const char *name, size_t len_rd, settings_read_cb read_cb,
		  void *cb_arg)
{
   1b050:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b054:	b08b      	sub	sp, #44	; 0x2c
   1b056:	460e      	mov	r6, r1
   1b058:	af00      	add	r7, sp, #0
   1b05a:	4690      	mov	r8, r2
   1b05c:	4699      	mov	r9, r3
	bt_addr_le_t addr;
	ssize_t len;
	int err;
	const char *next;

	if (!name) {
   1b05e:	4604      	mov	r4, r0
   1b060:	b988      	cbnz	r0, 1b086 <sc_set+0x36>
		LOG_ERR("Insufficient number of arguments");
   1b062:	4b44      	ldr	r3, [pc, #272]	; (1b174 <sc_set+0x124>)
   1b064:	627b      	str	r3, [r7, #36]	; 0x24
   1b066:	2302      	movs	r3, #2
   1b068:	4843      	ldr	r0, [pc, #268]	; (1b178 <sc_set+0x128>)
   1b06a:	623b      	str	r3, [r7, #32]
   1b06c:	f107 0220 	add.w	r2, r7, #32
   1b070:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b074:	f00f faa7 	bl	2a5c6 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   1b078:	f06f 0515 	mvn.w	r5, #21

		LOG_DBG("Removed SC for %s", bt_addr_le_str(&addr));
	}

	return 0;
}
   1b07c:	4628      	mov	r0, r5
   1b07e:	372c      	adds	r7, #44	; 0x2c
   1b080:	46bd      	mov	sp, r7
   1b082:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   1b086:	f107 0108 	add.w	r1, r7, #8
   1b08a:	f00d ffc0 	bl	2900e <bt_settings_decode_key>
	if (err) {
   1b08e:	4605      	mov	r5, r0
   1b090:	b190      	cbz	r0, 1b0b8 <sc_set+0x68>
		LOG_ERR("Unable to decode address %s", name);
   1b092:	466d      	mov	r5, sp
   1b094:	b088      	sub	sp, #32
   1b096:	466a      	mov	r2, sp
   1b098:	4b38      	ldr	r3, [pc, #224]	; (1b17c <sc_set+0x12c>)
   1b09a:	4837      	ldr	r0, [pc, #220]	; (1b178 <sc_set+0x128>)
   1b09c:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1b0a0:	f44f 7300 	mov.w	r3, #512	; 0x200
   1b0a4:	8393      	strh	r3, [r2, #28]
   1b0a6:	4b36      	ldr	r3, [pc, #216]	; (1b180 <sc_set+0x130>)
   1b0a8:	f842 3f10 	str.w	r3, [r2, #16]!
   1b0ac:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1b0b0:	f00f fa89 	bl	2a5c6 <z_log_msg_static_create.constprop.0>
   1b0b4:	46ad      	mov	sp, r5
		return -EINVAL;
   1b0b6:	e7df      	b.n	1b078 <sc_set+0x28>
	settings_name_next(name, &next);
   1b0b8:	1d39      	adds	r1, r7, #4
   1b0ba:	4620      	mov	r0, r4
   1b0bc:	f00d fb4d 	bl	2875a <settings_name_next>
	if (!next) {
   1b0c0:	6878      	ldr	r0, [r7, #4]
   1b0c2:	b1a0      	cbz	r0, 1b0ee <sc_set+0x9e>
		unsigned long next_id = strtoul(next, NULL, 10);
   1b0c4:	220a      	movs	r2, #10
   1b0c6:	4629      	mov	r1, r5
   1b0c8:	f00d fe56 	bl	28d78 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1b0cc:	b178      	cbz	r0, 1b0ee <sc_set+0x9e>
			LOG_ERR("Invalid local identity %lu", next_id);
   1b0ce:	466c      	mov	r4, sp
   1b0d0:	b088      	sub	sp, #32
   1b0d2:	466a      	mov	r2, sp
   1b0d4:	4b2b      	ldr	r3, [pc, #172]	; (1b184 <sc_set+0x134>)
   1b0d6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1b0da:	2303      	movs	r3, #3
   1b0dc:	f842 3f10 	str.w	r3, [r2, #16]!
   1b0e0:	4825      	ldr	r0, [pc, #148]	; (1b178 <sc_set+0x128>)
   1b0e2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b0e6:	f00f fa6e 	bl	2a5c6 <z_log_msg_static_create.constprop.0>
   1b0ea:	46a5      	mov	sp, r4
			return -EINVAL;
   1b0ec:	e7c4      	b.n	1b078 <sc_set+0x28>
	cfg = find_sc_cfg(id, &addr);
   1b0ee:	f107 0108 	add.w	r1, r7, #8
   1b0f2:	2000      	movs	r0, #0
   1b0f4:	f7ff fec0 	bl	1ae78 <find_sc_cfg>
	if (!cfg && len_rd) {
   1b0f8:	4604      	mov	r4, r0
   1b0fa:	bb98      	cbnz	r0, 1b164 <sc_set+0x114>
   1b0fc:	2e00      	cmp	r6, #0
   1b0fe:	d0bd      	beq.n	1b07c <sc_set+0x2c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1b100:	4921      	ldr	r1, [pc, #132]	; (1b188 <sc_set+0x138>)
   1b102:	f7ff feb9 	bl	1ae78 <find_sc_cfg>
		if (!cfg) {
   1b106:	4604      	mov	r4, r0
   1b108:	b968      	cbnz	r0, 1b126 <sc_set+0xd6>
			LOG_ERR("Unable to restore SC: no cfg left");
   1b10a:	4b20      	ldr	r3, [pc, #128]	; (1b18c <sc_set+0x13c>)
   1b10c:	627b      	str	r3, [r7, #36]	; 0x24
   1b10e:	2302      	movs	r3, #2
   1b110:	4819      	ldr	r0, [pc, #100]	; (1b178 <sc_set+0x128>)
   1b112:	623b      	str	r3, [r7, #32]
   1b114:	f107 0220 	add.w	r2, r7, #32
   1b118:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b11c:	f00f fa53 	bl	2a5c6 <z_log_msg_static_create.constprop.0>
			return -ENOMEM;
   1b120:	f06f 050b 	mvn.w	r5, #11
   1b124:	e7aa      	b.n	1b07c <sc_set+0x2c>
		cfg->id = id;
   1b126:	2300      	movs	r3, #0
   1b128:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   1b12c:	f107 0108 	add.w	r1, r7, #8
   1b130:	f00f fa40 	bl	2a5b4 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   1b134:	f104 0108 	add.w	r1, r4, #8
   1b138:	2204      	movs	r2, #4
   1b13a:	4648      	mov	r0, r9
   1b13c:	47c0      	blx	r8
		if (len < 0) {
   1b13e:	1e04      	subs	r4, r0, #0
   1b140:	da9c      	bge.n	1b07c <sc_set+0x2c>
			LOG_ERR("Failed to decode value (err %zd)", len);
   1b142:	466d      	mov	r5, sp
   1b144:	b088      	sub	sp, #32
   1b146:	466a      	mov	r2, sp
   1b148:	4b11      	ldr	r3, [pc, #68]	; (1b190 <sc_set+0x140>)
   1b14a:	480b      	ldr	r0, [pc, #44]	; (1b178 <sc_set+0x128>)
   1b14c:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1b150:	2303      	movs	r3, #3
   1b152:	f842 3f10 	str.w	r3, [r2, #16]!
   1b156:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b15a:	f00f fa34 	bl	2a5c6 <z_log_msg_static_create.constprop.0>
   1b15e:	46ad      	mov	sp, r5
			return len;
   1b160:	4625      	mov	r5, r4
   1b162:	e78b      	b.n	1b07c <sc_set+0x2c>
	if (len_rd) {
   1b164:	2e00      	cmp	r6, #0
   1b166:	d1e5      	bne.n	1b134 <sc_set+0xe4>
		memset(cfg, 0, sizeof(*cfg));
   1b168:	220c      	movs	r2, #12
   1b16a:	4631      	mov	r1, r6
   1b16c:	f00d fee7 	bl	28f3e <memset>
		LOG_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   1b170:	e784      	b.n	1b07c <sc_set+0x2c>
   1b172:	bf00      	nop
   1b174:	0002e408 	.word	0x0002e408
   1b178:	0002cb1c 	.word	0x0002cb1c
   1b17c:	0002f717 	.word	0x0002f717
   1b180:	01000003 	.word	0x01000003
   1b184:	0002f733 	.word	0x0002f733
   1b188:	0002e38f 	.word	0x0002e38f
   1b18c:	0002f74e 	.word	0x0002f74e
   1b190:	0002f770 	.word	0x0002f770

0001b194 <sc_store>:
{
   1b194:	b5b0      	push	{r4, r5, r7, lr}
	if (cfg->id) {
   1b196:	4605      	mov	r5, r0
{
   1b198:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   1b19a:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   1b19e:	af02      	add	r7, sp, #8
   1b1a0:	4604      	mov	r4, r0
	if (cfg->id) {
   1b1a2:	b31a      	cbz	r2, 1b1ec <sc_store+0x58>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   1b1a4:	2104      	movs	r1, #4
   1b1a6:	4638      	mov	r0, r7
   1b1a8:	f00c f967 	bl	2747a <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   1b1ac:	9700      	str	r7, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   1b1ae:	4a10      	ldr	r2, [pc, #64]	; (1b1f0 <sc_store+0x5c>)
   1b1b0:	2124      	movs	r1, #36	; 0x24
   1b1b2:	1d38      	adds	r0, r7, #4
   1b1b4:	462b      	mov	r3, r5
   1b1b6:	f7fa fd5b 	bl	15c70 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   1b1ba:	2204      	movs	r2, #4
   1b1bc:	f104 0108 	add.w	r1, r4, #8
   1b1c0:	18b8      	adds	r0, r7, r2
   1b1c2:	f7f9 fa01 	bl	145c8 <settings_save_one>
	if (err) {
   1b1c6:	b170      	cbz	r0, 1b1e6 <sc_store+0x52>
		LOG_ERR("failed to store SC (err %d)", err);
   1b1c8:	466c      	mov	r4, sp
   1b1ca:	b088      	sub	sp, #32
   1b1cc:	aa02      	add	r2, sp, #8
   1b1ce:	4b09      	ldr	r3, [pc, #36]	; (1b1f4 <sc_store+0x60>)
   1b1d0:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1b1d4:	2303      	movs	r3, #3
   1b1d6:	f842 3f10 	str.w	r3, [r2, #16]!
   1b1da:	4807      	ldr	r0, [pc, #28]	; (1b1f8 <sc_store+0x64>)
   1b1dc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b1e0:	f00f f9f1 	bl	2a5c6 <z_log_msg_static_create.constprop.0>
   1b1e4:	46a5      	mov	sp, r4
}
   1b1e6:	3728      	adds	r7, #40	; 0x28
   1b1e8:	46bd      	mov	sp, r7
   1b1ea:	bdb0      	pop	{r4, r5, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   1b1ec:	9200      	str	r2, [sp, #0]
   1b1ee:	e7de      	b.n	1b1ae <sc_store+0x1a>
   1b1f0:	0002fae0 	.word	0x0002fae0
   1b1f4:	0002f791 	.word	0x0002f791
   1b1f8:	0002cb1c 	.word	0x0002cb1c

0001b1fc <sc_save>:
{
   1b1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b200:	b086      	sub	sp, #24
   1b202:	4680      	mov	r8, r0
   1b204:	460f      	mov	r7, r1
   1b206:	4616      	mov	r6, r2
   1b208:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1b20a:	f7ff fe35 	bl	1ae78 <find_sc_cfg>
	if (!cfg) {
   1b20e:	4604      	mov	r4, r0
   1b210:	b9b0      	cbnz	r0, 1b240 <sc_save+0x44>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1b212:	4919      	ldr	r1, [pc, #100]	; (1b278 <sc_save+0x7c>)
   1b214:	f7ff fe30 	bl	1ae78 <find_sc_cfg>
		if (!cfg) {
   1b218:	4604      	mov	r4, r0
   1b21a:	b960      	cbnz	r0, 1b236 <sc_save+0x3a>
			LOG_ERR("unable to save SC: no cfg left");
   1b21c:	4b17      	ldr	r3, [pc, #92]	; (1b27c <sc_save+0x80>)
   1b21e:	9305      	str	r3, [sp, #20]
   1b220:	4817      	ldr	r0, [pc, #92]	; (1b280 <sc_save+0x84>)
   1b222:	2302      	movs	r3, #2
   1b224:	aa04      	add	r2, sp, #16
   1b226:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b22a:	9304      	str	r3, [sp, #16]
   1b22c:	f00f f9cb 	bl	2a5c6 <z_log_msg_static_create.constprop.0>
}
   1b230:	b006      	add	sp, #24
   1b232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
   1b236:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   1b23a:	4639      	mov	r1, r7
   1b23c:	f00f f9ba 	bl	2a5b4 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1b240:	8922      	ldrh	r2, [r4, #8]
   1b242:	8963      	ldrh	r3, [r4, #10]
   1b244:	b97a      	cbnz	r2, 1b266 <sc_save+0x6a>
   1b246:	b983      	cbnz	r3, 1b26a <sc_save+0x6e>
		cfg->data.start = start;
   1b248:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1b24a:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   1b24c:	4621      	mov	r1, r4
   1b24e:	f811 0b01 	ldrb.w	r0, [r1], #1
   1b252:	f00e f86e 	bl	29332 <bt_addr_le_is_bonded>
   1b256:	2800      	cmp	r0, #0
   1b258:	d0ea      	beq.n	1b230 <sc_save+0x34>
		sc_store(cfg);
   1b25a:	4620      	mov	r0, r4
}
   1b25c:	b006      	add	sp, #24
   1b25e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
   1b262:	f7ff bf97 	b.w	1b194 <sc_store>
	if (new_start >= *start && new_end <= *end) {
   1b266:	4296      	cmp	r6, r2
   1b268:	d302      	bcc.n	1b270 <sc_save+0x74>
   1b26a:	429d      	cmp	r5, r3
   1b26c:	d8ed      	bhi.n	1b24a <sc_save+0x4e>
   1b26e:	e7df      	b.n	1b230 <sc_save+0x34>
	if (*end < new_end) {
   1b270:	429d      	cmp	r5, r3
		*start = new_start;
   1b272:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   1b274:	d9ea      	bls.n	1b24c <sc_save+0x50>
   1b276:	e7e8      	b.n	1b24a <sc_save+0x4e>
   1b278:	0002e38f 	.word	0x0002e38f
   1b27c:	0002f7ad 	.word	0x0002f7ad
   1b280:	0002cb1c 	.word	0x0002cb1c

0001b284 <db_hash_store>:
{
   1b284:	b598      	push	{r3, r4, r7, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   1b286:	490c      	ldr	r1, [pc, #48]	; (1b2b8 <db_hash_store+0x34>)
   1b288:	480c      	ldr	r0, [pc, #48]	; (1b2bc <db_hash_store+0x38>)
{
   1b28a:	af00      	add	r7, sp, #0
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   1b28c:	2210      	movs	r2, #16
   1b28e:	f7f9 f99b 	bl	145c8 <settings_save_one>
	if (err) {
   1b292:	b170      	cbz	r0, 1b2b2 <db_hash_store+0x2e>
		LOG_ERR("Failed to save Database Hash (err %d)", err);
   1b294:	466c      	mov	r4, sp
   1b296:	b088      	sub	sp, #32
   1b298:	466a      	mov	r2, sp
   1b29a:	4b09      	ldr	r3, [pc, #36]	; (1b2c0 <db_hash_store+0x3c>)
   1b29c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1b2a0:	2303      	movs	r3, #3
   1b2a2:	f842 3f10 	str.w	r3, [r2, #16]!
   1b2a6:	4807      	ldr	r0, [pc, #28]	; (1b2c4 <db_hash_store+0x40>)
   1b2a8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b2ac:	f00f f98b 	bl	2a5c6 <z_log_msg_static_create.constprop.0>
   1b2b0:	46a5      	mov	sp, r4
}
   1b2b2:	46bd      	mov	sp, r7
   1b2b4:	bd98      	pop	{r3, r4, r7, pc}
   1b2b6:	bf00      	nop
   1b2b8:	200020e8 	.word	0x200020e8
   1b2bc:	0002f7cc 	.word	0x0002f7cc
   1b2c0:	0002f7d4 	.word	0x0002f7d4
   1b2c4:	0002cb1c 	.word	0x0002cb1c

0001b2c8 <db_hash_set>:

SETTINGS_STATIC_HANDLER_DEFINE(bt_cf, "bt/cf", NULL, cf_set, NULL, NULL);

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   1b2c8:	b5b0      	push	{r4, r5, r7, lr}
	ssize_t len;

	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   1b2ca:	490e      	ldr	r1, [pc, #56]	; (1b304 <db_hash_set+0x3c>)
{
   1b2cc:	4614      	mov	r4, r2
   1b2ce:	af00      	add	r7, sp, #0
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   1b2d0:	2210      	movs	r2, #16
   1b2d2:	4618      	mov	r0, r3
   1b2d4:	47a0      	blx	r4
	if (len < 0) {
   1b2d6:	1e04      	subs	r4, r0, #0
   1b2d8:	da11      	bge.n	1b2fe <db_hash_set+0x36>
		LOG_ERR("Failed to decode value (err %zd)", len);
   1b2da:	466d      	mov	r5, sp
   1b2dc:	b088      	sub	sp, #32
   1b2de:	466a      	mov	r2, sp
   1b2e0:	4b09      	ldr	r3, [pc, #36]	; (1b308 <db_hash_set+0x40>)
   1b2e2:	480a      	ldr	r0, [pc, #40]	; (1b30c <db_hash_set+0x44>)
   1b2e4:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1b2e8:	2303      	movs	r3, #3
   1b2ea:	f842 3f10 	str.w	r3, [r2, #16]!
   1b2ee:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b2f2:	f00f f968 	bl	2a5c6 <z_log_msg_static_create.constprop.0>
   1b2f6:	46ad      	mov	sp, r5
	}

	LOG_HEXDUMP_DBG(db_hash.stored_hash, sizeof(db_hash.stored_hash), "Stored Hash: ");

	return 0;
}
   1b2f8:	4620      	mov	r0, r4
   1b2fa:	46bd      	mov	sp, r7
   1b2fc:	bdb0      	pop	{r4, r5, r7, pc}
	return 0;
   1b2fe:	2400      	movs	r4, #0
   1b300:	e7fa      	b.n	1b2f8 <db_hash_set+0x30>
   1b302:	bf00      	nop
   1b304:	200020f8 	.word	0x200020f8
   1b308:	0002f770 	.word	0x0002f770
   1b30c:	0002cb1c 	.word	0x0002cb1c

0001b310 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   1b310:	b508      	push	{r3, lr}
   1b312:	4613      	mov	r3, r2
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b314:	6881      	ldr	r1, [r0, #8]
   1b316:	4a07      	ldr	r2, [pc, #28]	; (1b334 <remove_peer_from_attr+0x24>)
   1b318:	4291      	cmp	r1, r2
   1b31a:	d109      	bne.n	1b330 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   1b31c:	791a      	ldrb	r2, [r3, #4]
   1b31e:	6819      	ldr	r1, [r3, #0]
   1b320:	68c0      	ldr	r0, [r0, #12]
   1b322:	f00f f91c 	bl	2a55e <ccc_find_cfg>
	if (cfg) {
   1b326:	b118      	cbz	r0, 1b330 <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   1b328:	220a      	movs	r2, #10
   1b32a:	2100      	movs	r1, #0
   1b32c:	f00d fe07 	bl	28f3e <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   1b330:	2001      	movs	r0, #1
   1b332:	bd08      	pop	{r3, pc}
   1b334:	0001b665 	.word	0x0001b665

0001b338 <convert_to_id_on_match>:
{
   1b338:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b33a:	4b09      	ldr	r3, [pc, #36]	; (1b360 <convert_to_id_on_match+0x28>)
{
   1b33c:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b33e:	6882      	ldr	r2, [r0, #8]
   1b340:	429a      	cmp	r2, r3
   1b342:	d10a      	bne.n	1b35a <convert_to_id_on_match+0x22>
		if (bt_addr_le_eq(&ccc->cfg[i].peer, match->private_addr)) {
   1b344:	68c4      	ldr	r4, [r0, #12]
   1b346:	6829      	ldr	r1, [r5, #0]
   1b348:	3401      	adds	r4, #1
   1b34a:	4620      	mov	r0, r4
   1b34c:	f00f f8ff 	bl	2a54e <bt_addr_le_eq>
   1b350:	b118      	cbz	r0, 1b35a <convert_to_id_on_match+0x22>
			bt_addr_le_copy(&ccc->cfg[i].peer, match->id_addr);
   1b352:	6869      	ldr	r1, [r5, #4]
   1b354:	4620      	mov	r0, r4
   1b356:	f00f f92d 	bl	2a5b4 <bt_addr_le_copy>
}
   1b35a:	2001      	movs	r0, #1
   1b35c:	bd38      	pop	{r3, r4, r5, pc}
   1b35e:	bf00      	nop
   1b360:	0001b665 	.word	0x0001b665

0001b364 <ccc_save>:
{
   1b364:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b366:	4b0c      	ldr	r3, [pc, #48]	; (1b398 <ccc_save+0x34>)
{
   1b368:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b36a:	6882      	ldr	r2, [r0, #8]
   1b36c:	429a      	cmp	r2, r3
{
   1b36e:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b370:	d10f      	bne.n	1b392 <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   1b372:	7922      	ldrb	r2, [r4, #4]
   1b374:	6821      	ldr	r1, [r4, #0]
   1b376:	68c0      	ldr	r0, [r0, #12]
   1b378:	f00f f8f1 	bl	2a55e <ccc_find_cfg>
	if (!cfg) {
   1b37c:	b148      	cbz	r0, 1b392 <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   1b37e:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
   1b382:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   1b386:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   1b388:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   1b38a:	8901      	ldrh	r1, [r0, #8]
   1b38c:	8151      	strh	r1, [r2, #10]
	save->count++;
   1b38e:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   1b392:	2001      	movs	r0, #1
   1b394:	bd38      	pop	{r3, r4, r5, pc}
   1b396:	bf00      	nop
   1b398:	0001b665 	.word	0x0001b665

0001b39c <sc_commit.part.0>:
	k_work_reschedule(&gatt_sc.work, timeout);
   1b39c:	4802      	ldr	r0, [pc, #8]	; (1b3a8 <sc_commit.part.0+0xc>)
   1b39e:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1b3a2:	2300      	movs	r3, #0
   1b3a4:	f008 b9f0 	b.w	23788 <k_work_reschedule>
   1b3a8:	20002180 	.word	0x20002180

0001b3ac <sc_commit>:
{
   1b3ac:	b508      	push	{r3, lr}
   1b3ae:	2104      	movs	r1, #4
   1b3b0:	4808      	ldr	r0, [pc, #32]	; (1b3d4 <sc_commit+0x28>)
   1b3b2:	f00f f8e1 	bl	2a578 <atomic_or>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b3b6:	4807      	ldr	r0, [pc, #28]	; (1b3d4 <sc_commit+0x28>)
   1b3b8:	f06f 0102 	mvn.w	r1, #2
   1b3bc:	f00f f8eb 	bl	2a596 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1b3c0:	4804      	ldr	r0, [pc, #16]	; (1b3d4 <sc_commit+0x28>)
   1b3c2:	f00f f8fa 	bl	2a5ba <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1b3c6:	07c3      	lsls	r3, r0, #31
   1b3c8:	d501      	bpl.n	1b3ce <sc_commit+0x22>
   1b3ca:	f7ff ffe7 	bl	1b39c <sc_commit.part.0>
}
   1b3ce:	2000      	movs	r0, #0
   1b3d0:	bd08      	pop	{r3, pc}
   1b3d2:	bf00      	nop
   1b3d4:	200021b0 	.word	0x200021b0

0001b3d8 <clear_cf_cfg>:
{
   1b3d8:	b510      	push	{r4, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1b3da:	490c      	ldr	r1, [pc, #48]	; (1b40c <clear_cf_cfg+0x34>)
{
   1b3dc:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1b3de:	3001      	adds	r0, #1
   1b3e0:	f00f f8e8 	bl	2a5b4 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1b3e4:	f104 0008 	add.w	r0, r4, #8
   1b3e8:	2201      	movs	r2, #1
   1b3ea:	2100      	movs	r1, #0
   1b3ec:	f00d fda7 	bl	28f3e <memset>
   1b3f0:	f3bf 8f5b 	dmb	ish
   1b3f4:	340c      	adds	r4, #12
   1b3f6:	2300      	movs	r3, #0
   1b3f8:	e854 2f00 	ldrex	r2, [r4]
   1b3fc:	e844 3100 	strex	r1, r3, [r4]
   1b400:	2900      	cmp	r1, #0
   1b402:	d1f9      	bne.n	1b3f8 <clear_cf_cfg+0x20>
   1b404:	f3bf 8f5b 	dmb	ish
}
   1b408:	bd10      	pop	{r4, pc}
   1b40a:	bf00      	nop
   1b40c:	0002e38f 	.word	0x0002e38f

0001b410 <bt_gatt_clear_sc>:
{
   1b410:	b5b0      	push	{r4, r5, r7, lr}
   1b412:	b08c      	sub	sp, #48	; 0x30
   1b414:	af02      	add	r7, sp, #8
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1b416:	f7ff fd2f 	bl	1ae78 <find_sc_cfg>
	if (!cfg) {
   1b41a:	4604      	mov	r4, r0
   1b41c:	b330      	cbz	r0, 1b46c <bt_gatt_clear_sc+0x5c>
		if (cfg->id) {
   1b41e:	4605      	mov	r5, r0
   1b420:	f815 2b01 	ldrb.w	r2, [r5], #1
   1b424:	b332      	cbz	r2, 1b474 <bt_gatt_clear_sc+0x64>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   1b426:	2104      	movs	r1, #4
   1b428:	4638      	mov	r0, r7
   1b42a:	f00c f826 	bl	2747a <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   1b42e:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   1b430:	1d38      	adds	r0, r7, #4
   1b432:	4a11      	ldr	r2, [pc, #68]	; (1b478 <bt_gatt_clear_sc+0x68>)
   1b434:	462b      	mov	r3, r5
   1b436:	2124      	movs	r1, #36	; 0x24
   1b438:	f7fa fc1a 	bl	15c70 <bt_settings_encode_key>
		err = settings_delete(key);
   1b43c:	1d38      	adds	r0, r7, #4
   1b43e:	f00d f964 	bl	2870a <settings_delete>
		if (err) {
   1b442:	b170      	cbz	r0, 1b462 <bt_gatt_clear_sc+0x52>
			LOG_ERR("failed to delete SC (err %d)", err);
   1b444:	466d      	mov	r5, sp
   1b446:	b088      	sub	sp, #32
   1b448:	aa02      	add	r2, sp, #8
   1b44a:	4b0c      	ldr	r3, [pc, #48]	; (1b47c <bt_gatt_clear_sc+0x6c>)
   1b44c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1b450:	2303      	movs	r3, #3
   1b452:	f842 3f10 	str.w	r3, [r2, #16]!
   1b456:	480a      	ldr	r0, [pc, #40]	; (1b480 <bt_gatt_clear_sc+0x70>)
   1b458:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b45c:	f00f f8b3 	bl	2a5c6 <z_log_msg_static_create.constprop.0>
   1b460:	46ad      	mov	sp, r5
	memset(cfg, 0, sizeof(*cfg));
   1b462:	220c      	movs	r2, #12
   1b464:	2100      	movs	r1, #0
   1b466:	4620      	mov	r0, r4
   1b468:	f00d fd69 	bl	28f3e <memset>
}
   1b46c:	2000      	movs	r0, #0
   1b46e:	3728      	adds	r7, #40	; 0x28
   1b470:	46bd      	mov	sp, r7
   1b472:	bdb0      	pop	{r4, r5, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   1b474:	9200      	str	r2, [sp, #0]
   1b476:	e7db      	b.n	1b430 <bt_gatt_clear_sc+0x20>
   1b478:	0002fae0 	.word	0x0002fae0
   1b47c:	0002f7fa 	.word	0x0002f7fa
   1b480:	0002cb1c 	.word	0x0002cb1c

0001b484 <sc_clear>:
{
   1b484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b486:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   1b48a:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b48c:	4631      	mov	r1, r6
   1b48e:	7a00      	ldrb	r0, [r0, #8]
{
   1b490:	af00      	add	r7, sp, #0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b492:	f00d ff4e 	bl	29332 <bt_addr_le_is_bonded>
   1b496:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1b498:	4631      	mov	r1, r6
   1b49a:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b49c:	b19d      	cbz	r5, 1b4c6 <sc_clear+0x42>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1b49e:	f7ff ffb7 	bl	1b410 <bt_gatt_clear_sc>
		if (err) {
   1b4a2:	b170      	cbz	r0, 1b4c2 <sc_clear+0x3e>
			LOG_ERR("Failed to clear SC %d", err);
   1b4a4:	466c      	mov	r4, sp
   1b4a6:	b088      	sub	sp, #32
   1b4a8:	466a      	mov	r2, sp
   1b4aa:	4b0b      	ldr	r3, [pc, #44]	; (1b4d8 <sc_clear+0x54>)
   1b4ac:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1b4b0:	2303      	movs	r3, #3
   1b4b2:	f842 3f10 	str.w	r3, [r2, #16]!
   1b4b6:	4809      	ldr	r0, [pc, #36]	; (1b4dc <sc_clear+0x58>)
   1b4b8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b4bc:	f00f f883 	bl	2a5c6 <z_log_msg_static_create.constprop.0>
   1b4c0:	46a5      	mov	sp, r4
}
   1b4c2:	46bd      	mov	sp, r7
   1b4c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1b4c6:	f7ff fcd7 	bl	1ae78 <find_sc_cfg>
		if (cfg) {
   1b4ca:	2800      	cmp	r0, #0
   1b4cc:	d0f9      	beq.n	1b4c2 <sc_clear+0x3e>
	memset(cfg, 0, sizeof(*cfg));
   1b4ce:	220c      	movs	r2, #12
   1b4d0:	4629      	mov	r1, r5
   1b4d2:	f00d fd34 	bl	28f3e <memset>
}
   1b4d6:	e7f4      	b.n	1b4c2 <sc_clear+0x3e>
   1b4d8:	0002f817 	.word	0x0002f817
   1b4dc:	0002cb1c 	.word	0x0002cb1c

0001b4e0 <bt_gatt_store_cf.isra.0>:
static int bt_gatt_store_cf(uint8_t id, const bt_addr_le_t *peer)
   1b4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b4e4:	b08c      	sub	sp, #48	; 0x30
   1b4e6:	af02      	add	r7, sp, #8
   1b4e8:	4605      	mov	r5, r0
   1b4ea:	460e      	mov	r6, r1
	cfg = find_cf_cfg_by_addr(id, peer);
   1b4ec:	f7ff fc8a 	bl	1ae04 <find_cf_cfg_by_addr>
	if (!cfg) {
   1b4f0:	4604      	mov	r4, r0
   1b4f2:	2800      	cmp	r0, #0
   1b4f4:	d03e      	beq.n	1b574 <bt_gatt_store_cf.isra.0+0x94>
		str = (char *)cfg->data;
   1b4f6:	f100 0808 	add.w	r8, r0, #8
		if (id) {
   1b4fa:	b15d      	cbz	r5, 1b514 <bt_gatt_store_cf.isra.0+0x34>
			u8_to_dec(id_str, sizeof(id_str), id);
   1b4fc:	462a      	mov	r2, r5
   1b4fe:	2104      	movs	r1, #4
   1b500:	4638      	mov	r0, r7
   1b502:	f00b ffba 	bl	2747a <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1b506:	4a1e      	ldr	r2, [pc, #120]	; (1b580 <bt_gatt_store_cf.isra.0+0xa0>)
   1b508:	9700      	str	r7, [sp, #0]
   1b50a:	4633      	mov	r3, r6
   1b50c:	2124      	movs	r1, #36	; 0x24
   1b50e:	1d38      	adds	r0, r7, #4
   1b510:	f7fa fbae 	bl	15c70 <bt_settings_encode_key>
		memcpy(dst, str, len);
   1b514:	2201      	movs	r2, #1
   1b516:	4641      	mov	r1, r8
   1b518:	4638      	mov	r0, r7
   1b51a:	f00d fd05 	bl	28f28 <memcpy>
   1b51e:	f104 000c 	add.w	r0, r4, #12
   1b522:	f00f f84a 	bl	2a5ba <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1b526:	f000 0001 	and.w	r0, r0, #1
   1b52a:	7078      	strb	r0, [r7, #1]
	if (!cfg || !id) {
   1b52c:	bb25      	cbnz	r5, 1b578 <bt_gatt_store_cf.isra.0+0x98>
		len += CF_FLAGS_STORE_LEN;
   1b52e:	2502      	movs	r5, #2
		str = dst;
   1b530:	463c      	mov	r4, r7
		bt_settings_encode_key(key, sizeof(key), "cf",
   1b532:	2300      	movs	r3, #0
   1b534:	9300      	str	r3, [sp, #0]
   1b536:	4a12      	ldr	r2, [pc, #72]	; (1b580 <bt_gatt_store_cf.isra.0+0xa0>)
   1b538:	4633      	mov	r3, r6
   1b53a:	2124      	movs	r1, #36	; 0x24
   1b53c:	1d38      	adds	r0, r7, #4
   1b53e:	f7fa fb97 	bl	15c70 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   1b542:	462a      	mov	r2, r5
   1b544:	4621      	mov	r1, r4
   1b546:	1d38      	adds	r0, r7, #4
   1b548:	f7f9 f83e 	bl	145c8 <settings_save_one>
	if (err) {
   1b54c:	b170      	cbz	r0, 1b56c <bt_gatt_store_cf.isra.0+0x8c>
		LOG_ERR("Failed to store Client Features (err %d)", err);
   1b54e:	466c      	mov	r4, sp
   1b550:	b088      	sub	sp, #32
   1b552:	aa02      	add	r2, sp, #8
   1b554:	4b0b      	ldr	r3, [pc, #44]	; (1b584 <bt_gatt_store_cf.isra.0+0xa4>)
   1b556:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1b55a:	2303      	movs	r3, #3
   1b55c:	f842 3f10 	str.w	r3, [r2, #16]!
   1b560:	4809      	ldr	r0, [pc, #36]	; (1b588 <bt_gatt_store_cf.isra.0+0xa8>)
   1b562:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b566:	f00f f82e 	bl	2a5c6 <z_log_msg_static_create.constprop.0>
   1b56a:	46a5      	mov	sp, r4
}
   1b56c:	3728      	adds	r7, #40	; 0x28
   1b56e:	46bd      	mov	sp, r7
   1b570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
   1b574:	4605      	mov	r5, r0
   1b576:	e7dc      	b.n	1b532 <bt_gatt_store_cf.isra.0+0x52>
		len += CF_FLAGS_STORE_LEN;
   1b578:	2502      	movs	r5, #2
		str = dst;
   1b57a:	463c      	mov	r4, r7
   1b57c:	e7e1      	b.n	1b542 <bt_gatt_store_cf.isra.0+0x62>
   1b57e:	bf00      	nop
   1b580:	0002fada 	.word	0x0002fada
   1b584:	0002f82d 	.word	0x0002f82d
   1b588:	0002cb1c 	.word	0x0002cb1c

0001b58c <read_ppcp>:
{
   1b58c:	b513      	push	{r0, r1, r4, lr}
   1b58e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   1b592:	4c0b      	ldr	r4, [pc, #44]	; (1b5c0 <read_ppcp+0x34>)
{
   1b594:	4610      	mov	r0, r2
	if (offset > value_len) {
   1b596:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   1b598:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
   1b59c:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   1b5a0:	d80b      	bhi.n	1b5ba <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
   1b5a2:	f1c1 0408 	rsb	r4, r1, #8
   1b5a6:	429c      	cmp	r4, r3
   1b5a8:	bfa8      	it	ge
   1b5aa:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1b5ac:	4622      	mov	r2, r4
   1b5ae:	4469      	add	r1, sp
   1b5b0:	f00d fcba 	bl	28f28 <memcpy>
}
   1b5b4:	4620      	mov	r0, r4
   1b5b6:	b002      	add	sp, #8
   1b5b8:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b5ba:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1b5be:	e7f9      	b.n	1b5b4 <read_ppcp+0x28>
   1b5c0:	00280018 	.word	0x00280018

0001b5c4 <disconnected_cb>:
{
   1b5c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b5c8:	4b23      	ldr	r3, [pc, #140]	; (1b658 <disconnected_cb+0x94>)
{
   1b5ca:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b5cc:	6882      	ldr	r2, [r0, #8]
   1b5ce:	429a      	cmp	r2, r3
{
   1b5d0:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b5d2:	d102      	bne.n	1b5da <disconnected_cb+0x16>
	ccc = attr->user_data;
   1b5d4:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   1b5d6:	8963      	ldrh	r3, [r4, #10]
   1b5d8:	bb33      	cbnz	r3, 1b628 <disconnected_cb+0x64>
}
   1b5da:	2001      	movs	r0, #1
   1b5dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				bt_conn_unref(tmp);
   1b5e0:	f00e f911 	bl	29806 <bt_conn_unref>
		if (ccc->cfg_changed) {
   1b5e4:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   1b5e6:	2100      	movs	r1, #0
   1b5e8:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   1b5ea:	2b00      	cmp	r3, #0
   1b5ec:	d0f5      	beq.n	1b5da <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   1b5ee:	4638      	mov	r0, r7
   1b5f0:	4798      	blx	r3
   1b5f2:	e7f2      	b.n	1b5da <disconnected_cb+0x16>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b5f4:	f105 0888 	add.w	r8, r5, #136	; 0x88
   1b5f8:	7a28      	ldrb	r0, [r5, #8]
   1b5fa:	4641      	mov	r1, r8
   1b5fc:	f00d fe99 	bl	29332 <bt_addr_le_is_bonded>
   1b600:	b968      	cbnz	r0, 1b61e <disconnected_cb+0x5a>
				if (ccc == &sc_ccc) {
   1b602:	4b16      	ldr	r3, [pc, #88]	; (1b65c <disconnected_cb+0x98>)
   1b604:	429c      	cmp	r4, r3
   1b606:	d102      	bne.n	1b60e <disconnected_cb+0x4a>
					sc_clear(conn);
   1b608:	4628      	mov	r0, r5
   1b60a:	f7ff ff3b 	bl	1b484 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1b60e:	4914      	ldr	r1, [pc, #80]	; (1b660 <disconnected_cb+0x9c>)
   1b610:	4630      	mov	r0, r6
   1b612:	f00e ffcf 	bl	2a5b4 <bt_addr_le_copy>
	cfg->id = 0U;
   1b616:	2300      	movs	r3, #0
   1b618:	7023      	strb	r3, [r4, #0]
	cfg->value = 0U;
   1b61a:	8123      	strh	r3, [r4, #8]
}
   1b61c:	e7e2      	b.n	1b5e4 <disconnected_cb+0x20>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1b61e:	4641      	mov	r1, r8
   1b620:	4630      	mov	r0, r6
   1b622:	f00e ffc7 	bl	2a5b4 <bt_addr_le_copy>
   1b626:	e7dd      	b.n	1b5e4 <disconnected_cb+0x20>
		if (!cfg->value) {
   1b628:	8923      	ldrh	r3, [r4, #8]
   1b62a:	2b00      	cmp	r3, #0
   1b62c:	d0da      	beq.n	1b5e4 <disconnected_cb+0x20>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1b62e:	4626      	mov	r6, r4
   1b630:	4628      	mov	r0, r5
   1b632:	f816 1b01 	ldrb.w	r1, [r6], #1
   1b636:	4632      	mov	r2, r6
   1b638:	f00e f995 	bl	29966 <bt_conn_is_peer_addr_le>
   1b63c:	2800      	cmp	r0, #0
   1b63e:	d1d9      	bne.n	1b5f4 <disconnected_cb+0x30>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1b640:	7820      	ldrb	r0, [r4, #0]
   1b642:	4631      	mov	r1, r6
   1b644:	f7fe f80c 	bl	19660 <bt_conn_lookup_addr_le>
			if (tmp) {
   1b648:	2800      	cmp	r0, #0
   1b64a:	d0cb      	beq.n	1b5e4 <disconnected_cb+0x20>
				if (tmp->state == BT_CONN_CONNECTED) {
   1b64c:	7b43      	ldrb	r3, [r0, #13]
   1b64e:	2b07      	cmp	r3, #7
   1b650:	d1c6      	bne.n	1b5e0 <disconnected_cb+0x1c>
				bt_conn_unref(tmp);
   1b652:	f00e f8d8 	bl	29806 <bt_conn_unref>
	if (!value_used) {
   1b656:	e7c0      	b.n	1b5da <disconnected_cb+0x16>
   1b658:	0001b665 	.word	0x0001b665
   1b65c:	200006f0 	.word	0x200006f0
   1b660:	0002e38f 	.word	0x0002e38f

0001b664 <bt_gatt_attr_write_ccc>:
{
   1b664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b668:	b086      	sub	sp, #24
   1b66a:	461f      	mov	r7, r3
   1b66c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1b670:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   1b674:	4606      	mov	r6, r0
   1b676:	4688      	mov	r8, r1
	if (offset) {
   1b678:	2b00      	cmp	r3, #0
   1b67a:	d154      	bne.n	1b726 <bt_gatt_attr_write_ccc+0xc2>
	if (!len || len > sizeof(uint16_t)) {
   1b67c:	1e7b      	subs	r3, r7, #1
   1b67e:	2b01      	cmp	r3, #1
   1b680:	d854      	bhi.n	1b72c <bt_gatt_attr_write_ccc+0xc8>
	if (len < sizeof(uint16_t)) {
   1b682:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
   1b684:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   1b686:	7815      	ldrb	r5, [r2, #0]
   1b688:	bf18      	it	ne
   1b68a:	8815      	ldrhne	r5, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   1b68c:	f7ff fc78 	bl	1af80 <find_ccc_cfg>
	if (!cfg) {
   1b690:	4604      	mov	r4, r0
   1b692:	b9e8      	cbnz	r0, 1b6d0 <bt_gatt_attr_write_ccc+0x6c>
		if (!value) {
   1b694:	b91d      	cbnz	r5, 1b69e <bt_gatt_attr_write_ccc+0x3a>
			return len;
   1b696:	4638      	mov	r0, r7
}
   1b698:	b006      	add	sp, #24
   1b69a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1b69e:	4649      	mov	r1, r9
   1b6a0:	f7ff fc6e 	bl	1af80 <find_ccc_cfg>
		if (!cfg) {
   1b6a4:	4604      	mov	r4, r0
   1b6a6:	b960      	cbnz	r0, 1b6c2 <bt_gatt_attr_write_ccc+0x5e>
			LOG_WRN("No space to store CCC cfg");
   1b6a8:	4b22      	ldr	r3, [pc, #136]	; (1b734 <bt_gatt_attr_write_ccc+0xd0>)
   1b6aa:	4823      	ldr	r0, [pc, #140]	; (1b738 <bt_gatt_attr_write_ccc+0xd4>)
   1b6ac:	9305      	str	r3, [sp, #20]
   1b6ae:	aa04      	add	r2, sp, #16
   1b6b0:	2302      	movs	r3, #2
   1b6b2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1b6b6:	9304      	str	r3, [sp, #16]
   1b6b8:	f00e ff85 	bl	2a5c6 <z_log_msg_static_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1b6bc:	f06f 0010 	mvn.w	r0, #16
   1b6c0:	e7ea      	b.n	1b698 <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1b6c2:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1b6c6:	3001      	adds	r0, #1
   1b6c8:	f00e ff74 	bl	2a5b4 <bt_addr_le_copy>
		cfg->id = conn->id;
   1b6cc:	7a33      	ldrb	r3, [r6, #8]
   1b6ce:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   1b6d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1b6d4:	b9db      	cbnz	r3, 1b70e <bt_gatt_attr_write_ccc+0xaa>
	value_changed = cfg->value != value;
   1b6d6:	f8b4 a008 	ldrh.w	sl, [r4, #8]
	cfg->value = value;
   1b6da:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   1b6dc:	f8b9 300a 	ldrh.w	r3, [r9, #10]
   1b6e0:	42ab      	cmp	r3, r5
   1b6e2:	d003      	beq.n	1b6ec <bt_gatt_attr_write_ccc+0x88>
		gatt_ccc_changed(attr, ccc);
   1b6e4:	4649      	mov	r1, r9
   1b6e6:	4640      	mov	r0, r8
   1b6e8:	f00e febb 	bl	2a462 <gatt_ccc_changed>
	if (value_changed) {
   1b6ec:	45aa      	cmp	sl, r5
   1b6ee:	d005      	beq.n	1b6fc <bt_gatt_attr_write_ccc+0x98>
		gatt_delayed_store_enqueue(conn->id, &conn->le.dst, DELAYED_STORE_CCC);
   1b6f0:	7a30      	ldrb	r0, [r6, #8]
   1b6f2:	2200      	movs	r2, #0
   1b6f4:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1b6f8:	f7ff fc56 	bl	1afa8 <gatt_delayed_store_enqueue>
	if (!value) {
   1b6fc:	2d00      	cmp	r5, #0
   1b6fe:	d1ca      	bne.n	1b696 <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1b700:	490e      	ldr	r1, [pc, #56]	; (1b73c <bt_gatt_attr_write_ccc+0xd8>)
   1b702:	1c60      	adds	r0, r4, #1
   1b704:	f00e ff56 	bl	2a5b4 <bt_addr_le_copy>
	cfg->id = 0U;
   1b708:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1b70a:	8125      	strh	r5, [r4, #8]
}
   1b70c:	e7c3      	b.n	1b696 <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1b70e:	462a      	mov	r2, r5
   1b710:	4641      	mov	r1, r8
   1b712:	4630      	mov	r0, r6
   1b714:	4798      	blx	r3
		if (write < 0) {
   1b716:	2800      	cmp	r0, #0
   1b718:	dbbe      	blt.n	1b698 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   1b71a:	3801      	subs	r0, #1
   1b71c:	2801      	cmp	r0, #1
   1b71e:	d9da      	bls.n	1b6d6 <bt_gatt_attr_write_ccc+0x72>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1b720:	f06f 000d 	mvn.w	r0, #13
   1b724:	e7b8      	b.n	1b698 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b726:	f06f 0006 	mvn.w	r0, #6
   1b72a:	e7b5      	b.n	1b698 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1b72c:	f06f 000c 	mvn.w	r0, #12
   1b730:	e7b2      	b.n	1b698 <bt_gatt_attr_write_ccc+0x34>
   1b732:	bf00      	nop
   1b734:	0002f856 	.word	0x0002f856
   1b738:	0002cb1c 	.word	0x0002cb1c
   1b73c:	0002e38f 	.word	0x0002e38f

0001b740 <sc_indicate.constprop.0>:
static void sc_indicate(uint16_t start, uint16_t end)
   1b740:	b508      	push	{r3, lr}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b742:	4812      	ldr	r0, [pc, #72]	; (1b78c <sc_indicate.constprop.0+0x4c>)
   1b744:	2101      	movs	r1, #1
   1b746:	f00e ff17 	bl	2a578 <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1b74a:	f010 0f01 	tst.w	r0, #1
   1b74e:	4b10      	ldr	r3, [pc, #64]	; (1b790 <sc_indicate.constprop.0+0x50>)
   1b750:	d10a      	bne.n	1b768 <sc_indicate.constprop.0+0x28>
		gatt_sc.start = start;
   1b752:	4a10      	ldr	r2, [pc, #64]	; (1b794 <sc_indicate.constprop.0+0x54>)
   1b754:	619a      	str	r2, [r3, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1b756:	480d      	ldr	r0, [pc, #52]	; (1b78c <sc_indicate.constprop.0+0x4c>)
   1b758:	f00e ff2f 	bl	2a5ba <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   1b75c:	0783      	lsls	r3, r0, #30
   1b75e:	d413      	bmi.n	1b788 <sc_indicate.constprop.0+0x48>
}
   1b760:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1b764:	f7ff be1a 	b.w	1b39c <sc_commit.part.0>
	if (new_start >= *start && new_end <= *end) {
   1b768:	8b1a      	ldrh	r2, [r3, #24]
   1b76a:	8b58      	ldrh	r0, [r3, #26]
   1b76c:	2a01      	cmp	r2, #1
   1b76e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1b772:	d805      	bhi.n	1b780 <sc_indicate.constprop.0+0x40>
   1b774:	4290      	cmp	r0, r2
   1b776:	d007      	beq.n	1b788 <sc_indicate.constprop.0+0x48>
		*end = new_end;
   1b778:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1b77c:	835a      	strh	r2, [r3, #26]
   1b77e:	e7ea      	b.n	1b756 <sc_indicate.constprop.0+0x16>
	if (*end < new_end) {
   1b780:	4290      	cmp	r0, r2
		*start = new_start;
   1b782:	8319      	strh	r1, [r3, #24]
	if (*end < new_end) {
   1b784:	d0e7      	beq.n	1b756 <sc_indicate.constprop.0+0x16>
   1b786:	e7f7      	b.n	1b778 <sc_indicate.constprop.0+0x38>
}
   1b788:	bd08      	pop	{r3, pc}
   1b78a:	bf00      	nop
   1b78c:	200021b0 	.word	0x200021b0
   1b790:	20002160 	.word	0x20002160
   1b794:	ffff0001 	.word	0xffff0001

0001b798 <set_all_change_unaware>:
{
   1b798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b79a:	4c0b      	ldr	r4, [pc, #44]	; (1b7c8 <set_all_change_unaware+0x30>)
		if (!bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1b79c:	4f0b      	ldr	r7, [pc, #44]	; (1b7cc <set_all_change_unaware+0x34>)
	for (size_t i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1b79e:	2500      	movs	r5, #0
		if (!bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1b7a0:	1c66      	adds	r6, r4, #1
   1b7a2:	4639      	mov	r1, r7
   1b7a4:	4630      	mov	r0, r6
   1b7a6:	f00e fed2 	bl	2a54e <bt_addr_le_eq>
   1b7aa:	4601      	mov	r1, r0
   1b7ac:	b930      	cbnz	r0, 1b7bc <set_all_change_unaware+0x24>
			set_change_aware_no_store(cfg, false);
   1b7ae:	4620      	mov	r0, r4
   1b7b0:	f00e ffc3 	bl	2a73a <set_change_aware_no_store>
			bt_gatt_store_cf(cfg->id, &cfg->peer);
   1b7b4:	7820      	ldrb	r0, [r4, #0]
   1b7b6:	4631      	mov	r1, r6
   1b7b8:	f7ff fe92 	bl	1b4e0 <bt_gatt_store_cf.isra.0>
	for (size_t i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1b7bc:	3501      	adds	r5, #1
   1b7be:	2d06      	cmp	r5, #6
   1b7c0:	f104 0410 	add.w	r4, r4, #16
   1b7c4:	d1ec      	bne.n	1b7a0 <set_all_change_unaware+0x8>
}
   1b7c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b7c8:	2000354c 	.word	0x2000354c
   1b7cc:	0002e38f 	.word	0x0002e38f

0001b7d0 <cf_write>:
{
   1b7d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b7d4:	b086      	sub	sp, #24
   1b7d6:	461f      	mov	r7, r3
   1b7d8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
	if (offset > sizeof(cfg->data)) {
   1b7dc:	2b01      	cmp	r3, #1
{
   1b7de:	4606      	mov	r6, r0
   1b7e0:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   1b7e2:	d83b      	bhi.n	1b85c <cf_write+0x8c>
	if (offset + len > sizeof(cfg->data)) {
   1b7e4:	443b      	add	r3, r7
   1b7e6:	2b01      	cmp	r3, #1
   1b7e8:	463d      	mov	r5, r7
   1b7ea:	dc3a      	bgt.n	1b862 <cf_write+0x92>
	cfg = find_cf_cfg(conn);
   1b7ec:	f7ff fba6 	bl	1af3c <find_cf_cfg>
	if (!cfg) {
   1b7f0:	4604      	mov	r4, r0
   1b7f2:	b998      	cbnz	r0, 1b81c <cf_write+0x4c>
		cfg = find_cf_cfg(NULL);
   1b7f4:	f7ff fba2 	bl	1af3c <find_cf_cfg>
	if (!cfg) {
   1b7f8:	4604      	mov	r4, r0
   1b7fa:	b978      	cbnz	r0, 1b81c <cf_write+0x4c>
		LOG_WRN("No space to store Client Supported Features");
   1b7fc:	4b1c      	ldr	r3, [pc, #112]	; (1b870 <cf_write+0xa0>)
   1b7fe:	9305      	str	r3, [sp, #20]
   1b800:	481c      	ldr	r0, [pc, #112]	; (1b874 <cf_write+0xa4>)
   1b802:	2302      	movs	r3, #2
   1b804:	aa04      	add	r2, sp, #16
   1b806:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1b80a:	f06f 0510 	mvn.w	r5, #16
		LOG_WRN("No space to store Client Supported Features");
   1b80e:	9304      	str	r3, [sp, #16]
   1b810:	f00e fed9 	bl	2a5c6 <z_log_msg_static_create.constprop.0>
}
   1b814:	4628      	mov	r0, r5
   1b816:	b006      	add	sp, #24
   1b818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1b81c:	b197      	cbz	r7, 1b844 <cf_write+0x74>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1b81e:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   1b820:	f898 2000 	ldrb.w	r2, [r8]
   1b824:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1b826:	fa21 f003 	lsr.w	r0, r1, r3
   1b82a:	07c7      	lsls	r7, r0, #31
   1b82c:	d503      	bpl.n	1b836 <cf_write+0x66>
		    !(value[i / 8] & BIT(i % 8))) {
   1b82e:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1b832:	07c0      	lsls	r0, r0, #31
   1b834:	d518      	bpl.n	1b868 <cf_write+0x98>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1b836:	3301      	adds	r3, #1
   1b838:	2b03      	cmp	r3, #3
   1b83a:	d1f4      	bne.n	1b826 <cf_write+0x56>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1b83c:	f002 0207 	and.w	r2, r2, #7
   1b840:	4311      	orrs	r1, r2
   1b842:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1b844:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1b848:	1c60      	adds	r0, r4, #1
   1b84a:	f00e feb3 	bl	2a5b4 <bt_addr_le_copy>
	cfg->id = conn->id;
   1b84e:	7a33      	ldrb	r3, [r6, #8]
   1b850:	7023      	strb	r3, [r4, #0]
	set_change_aware(cfg, true);
   1b852:	2101      	movs	r1, #1
   1b854:	4620      	mov	r0, r4
   1b856:	f00e ff80 	bl	2a75a <set_change_aware>
	return len;
   1b85a:	e7db      	b.n	1b814 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b85c:	f06f 0506 	mvn.w	r5, #6
   1b860:	e7d8      	b.n	1b814 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1b862:	f06f 050c 	mvn.w	r5, #12
   1b866:	e7d5      	b.n	1b814 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1b868:	f06f 0512 	mvn.w	r5, #18
   1b86c:	e7d2      	b.n	1b814 <cf_write+0x44>
   1b86e:	bf00      	nop
   1b870:	0002f870 	.word	0x0002f870
   1b874:	0002cb1c 	.word	0x0002cb1c

0001b878 <sc_indicate_rsp>:
{
   1b878:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b87a:	f06f 0102 	mvn.w	r1, #2
   1b87e:	4604      	mov	r4, r0
   1b880:	480e      	ldr	r0, [pc, #56]	; (1b8bc <sc_indicate_rsp+0x44>)
   1b882:	f00e fe88 	bl	2a596 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1b886:	480d      	ldr	r0, [pc, #52]	; (1b8bc <sc_indicate_rsp+0x44>)
   1b888:	f00e fe97 	bl	2a5ba <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1b88c:	07c2      	lsls	r2, r0, #31
   1b88e:	d504      	bpl.n	1b89a <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   1b890:	480b      	ldr	r0, [pc, #44]	; (1b8c0 <sc_indicate_rsp+0x48>)
   1b892:	2200      	movs	r2, #0
   1b894:	2300      	movs	r3, #0
   1b896:	f007 ff77 	bl	23788 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   1b89a:	4620      	mov	r0, r4
   1b89c:	f00e fdb9 	bl	2a412 <bt_att_fixed_chan_only>
   1b8a0:	b158      	cbz	r0, 1b8ba <sc_indicate_rsp+0x42>
		cfg = find_cf_cfg(conn);
   1b8a2:	4620      	mov	r0, r4
   1b8a4:	f7ff fb4a 	bl	1af3c <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1b8a8:	b138      	cbz	r0, 1b8ba <sc_indicate_rsp+0x42>
   1b8aa:	7a03      	ldrb	r3, [r0, #8]
   1b8ac:	07db      	lsls	r3, r3, #31
   1b8ae:	d504      	bpl.n	1b8ba <sc_indicate_rsp+0x42>
}
   1b8b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			set_change_aware(cfg, true);
   1b8b4:	2101      	movs	r1, #1
   1b8b6:	f00e bf50 	b.w	2a75a <set_change_aware>
}
   1b8ba:	bd10      	pop	{r4, pc}
   1b8bc:	200021b0 	.word	0x200021b0
   1b8c0:	20002180 	.word	0x20002180

0001b8c4 <cf_set>:
{
   1b8c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b8c8:	b08b      	sub	sp, #44	; 0x2c
   1b8ca:	4689      	mov	r9, r1
   1b8cc:	af00      	add	r7, sp, #0
   1b8ce:	4616      	mov	r6, r2
   1b8d0:	4698      	mov	r8, r3
	if (!name) {
   1b8d2:	4604      	mov	r4, r0
   1b8d4:	b988      	cbnz	r0, 1b8fa <cf_set+0x36>
		LOG_ERR("Insufficient number of arguments");
   1b8d6:	4b5a      	ldr	r3, [pc, #360]	; (1ba40 <cf_set+0x17c>)
   1b8d8:	627b      	str	r3, [r7, #36]	; 0x24
   1b8da:	2302      	movs	r3, #2
   1b8dc:	4859      	ldr	r0, [pc, #356]	; (1ba44 <cf_set+0x180>)
   1b8de:	623b      	str	r3, [r7, #32]
   1b8e0:	f107 0220 	add.w	r2, r7, #32
   1b8e4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b8e8:	f00e fe6d 	bl	2a5c6 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   1b8ec:	f06f 0515 	mvn.w	r5, #21
}
   1b8f0:	4628      	mov	r0, r5
   1b8f2:	372c      	adds	r7, #44	; 0x2c
   1b8f4:	46bd      	mov	sp, r7
   1b8f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   1b8fa:	f107 0108 	add.w	r1, r7, #8
   1b8fe:	f00d fb86 	bl	2900e <bt_settings_decode_key>
	if (err) {
   1b902:	4605      	mov	r5, r0
   1b904:	b190      	cbz	r0, 1b92c <cf_set+0x68>
		LOG_ERR("Unable to decode address %s", name);
   1b906:	466d      	mov	r5, sp
   1b908:	b088      	sub	sp, #32
   1b90a:	466a      	mov	r2, sp
   1b90c:	4b4e      	ldr	r3, [pc, #312]	; (1ba48 <cf_set+0x184>)
   1b90e:	484d      	ldr	r0, [pc, #308]	; (1ba44 <cf_set+0x180>)
   1b910:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1b914:	f44f 7300 	mov.w	r3, #512	; 0x200
   1b918:	8393      	strh	r3, [r2, #28]
   1b91a:	4b4c      	ldr	r3, [pc, #304]	; (1ba4c <cf_set+0x188>)
   1b91c:	f842 3f10 	str.w	r3, [r2, #16]!
   1b920:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1b924:	f00e fe4f 	bl	2a5c6 <z_log_msg_static_create.constprop.0>
   1b928:	46ad      	mov	sp, r5
		return -EINVAL;
   1b92a:	e7df      	b.n	1b8ec <cf_set+0x28>
	settings_name_next(name, &next);
   1b92c:	1d39      	adds	r1, r7, #4
   1b92e:	4620      	mov	r0, r4
   1b930:	f00c ff13 	bl	2875a <settings_name_next>
	if (!next) {
   1b934:	6878      	ldr	r0, [r7, #4]
   1b936:	b1a0      	cbz	r0, 1b962 <cf_set+0x9e>
		unsigned long next_id = strtoul(next, NULL, 10);
   1b938:	220a      	movs	r2, #10
   1b93a:	4629      	mov	r1, r5
   1b93c:	f00d fa1c 	bl	28d78 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1b940:	b178      	cbz	r0, 1b962 <cf_set+0x9e>
			LOG_ERR("Invalid local identity %lu", next_id);
   1b942:	466c      	mov	r4, sp
   1b944:	b088      	sub	sp, #32
   1b946:	466a      	mov	r2, sp
   1b948:	4b41      	ldr	r3, [pc, #260]	; (1ba50 <cf_set+0x18c>)
   1b94a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1b94e:	2303      	movs	r3, #3
   1b950:	f842 3f10 	str.w	r3, [r2, #16]!
   1b954:	483b      	ldr	r0, [pc, #236]	; (1ba44 <cf_set+0x180>)
   1b956:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b95a:	f00e fe34 	bl	2a5c6 <z_log_msg_static_create.constprop.0>
   1b95e:	46a5      	mov	sp, r4
			return -EINVAL;
   1b960:	e7c4      	b.n	1b8ec <cf_set+0x28>
	cfg = find_cf_cfg_by_addr(id, &addr);
   1b962:	f107 0108 	add.w	r1, r7, #8
   1b966:	2000      	movs	r0, #0
   1b968:	f7ff fa4c 	bl	1ae04 <find_cf_cfg_by_addr>
	if (!cfg) {
   1b96c:	4604      	mov	r4, r0
   1b96e:	b9c0      	cbnz	r0, 1b9a2 <cf_set+0xde>
		cfg = find_cf_cfg(NULL);
   1b970:	f7ff fae4 	bl	1af3c <find_cf_cfg>
		if (!cfg) {
   1b974:	4604      	mov	r4, r0
   1b976:	b968      	cbnz	r0, 1b994 <cf_set+0xd0>
			LOG_ERR("Unable to restore CF: no cfg left");
   1b978:	4b36      	ldr	r3, [pc, #216]	; (1ba54 <cf_set+0x190>)
   1b97a:	627b      	str	r3, [r7, #36]	; 0x24
   1b97c:	2302      	movs	r3, #2
   1b97e:	4831      	ldr	r0, [pc, #196]	; (1ba44 <cf_set+0x180>)
   1b980:	623b      	str	r3, [r7, #32]
   1b982:	f107 0220 	add.w	r2, r7, #32
   1b986:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b98a:	f00e fe1c 	bl	2a5c6 <z_log_msg_static_create.constprop.0>
			return -ENOMEM;
   1b98e:	f06f 050b 	mvn.w	r5, #11
   1b992:	e7ad      	b.n	1b8f0 <cf_set+0x2c>
		cfg->id = id;
   1b994:	2300      	movs	r3, #0
   1b996:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   1b99a:	f107 0108 	add.w	r1, r7, #8
   1b99e:	f00e fe09 	bl	2a5b4 <bt_addr_le_copy>
	if (len_rd) {
   1b9a2:	f1b9 0f00 	cmp.w	r9, #0
   1b9a6:	d047      	beq.n	1ba38 <cf_set+0x174>
		len = read_cb(cb_arg, dst, sizeof(dst));
   1b9a8:	2202      	movs	r2, #2
   1b9aa:	4639      	mov	r1, r7
   1b9ac:	4640      	mov	r0, r8
   1b9ae:	47b0      	blx	r6
		if (len < 0) {
   1b9b0:	1e06      	subs	r6, r0, #0
   1b9b2:	da10      	bge.n	1b9d6 <cf_set+0x112>
			LOG_ERR("Failed to decode value (err %zd)", len);
   1b9b4:	466c      	mov	r4, sp
   1b9b6:	b088      	sub	sp, #32
   1b9b8:	466a      	mov	r2, sp
   1b9ba:	4b27      	ldr	r3, [pc, #156]	; (1ba58 <cf_set+0x194>)
   1b9bc:	4821      	ldr	r0, [pc, #132]	; (1ba44 <cf_set+0x180>)
   1b9be:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1b9c2:	2303      	movs	r3, #3
   1b9c4:	f842 3f10 	str.w	r3, [r2, #16]!
   1b9c8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b9cc:	f00e fdfb 	bl	2a5c6 <z_log_msg_static_create.constprop.0>
			return len;
   1b9d0:	4635      	mov	r5, r6
   1b9d2:	46a5      	mov	sp, r4
   1b9d4:	e78c      	b.n	1b8f0 <cf_set+0x2c>
		memcpy(cfg->data, dst, sizeof(cfg->data));
   1b9d6:	2201      	movs	r2, #1
   1b9d8:	4639      	mov	r1, r7
   1b9da:	f104 0008 	add.w	r0, r4, #8
   1b9de:	f00d faa3 	bl	28f28 <memcpy>
		if (len != sizeof(dst)) {
   1b9e2:	2e02      	cmp	r6, #2
   1b9e4:	d00f      	beq.n	1ba06 <cf_set+0x142>
			LOG_WRN("Change-aware status not found in settings, "
   1b9e6:	4b1d      	ldr	r3, [pc, #116]	; (1ba5c <cf_set+0x198>)
   1b9e8:	627b      	str	r3, [r7, #36]	; 0x24
   1b9ea:	2302      	movs	r3, #2
   1b9ec:	4815      	ldr	r0, [pc, #84]	; (1ba44 <cf_set+0x180>)
   1b9ee:	623b      	str	r3, [r7, #32]
   1b9f0:	f107 0220 	add.w	r2, r7, #32
   1b9f4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1b9f8:	f00e fde5 	bl	2a5c6 <z_log_msg_static_create.constprop.0>
				set_change_aware(cfg, false);
   1b9fc:	2100      	movs	r1, #0
   1b9fe:	4620      	mov	r0, r4
   1ba00:	f00e feab 	bl	2a75a <set_change_aware>
   1ba04:	e774      	b.n	1b8f0 <cf_set+0x2c>
			uint8_t change_aware = dst[sizeof(cfg->data)];
   1ba06:	7879      	ldrb	r1, [r7, #1]
			if (change_aware & ~BIT(CF_CHANGE_AWARE)) {
   1ba08:	2901      	cmp	r1, #1
   1ba0a:	d90f      	bls.n	1ba2c <cf_set+0x168>
				LOG_WRN("Read back bad change-aware value: 0x%x, "
   1ba0c:	466e      	mov	r6, sp
   1ba0e:	b088      	sub	sp, #32
   1ba10:	466a      	mov	r2, sp
   1ba12:	4b13      	ldr	r3, [pc, #76]	; (1ba60 <cf_set+0x19c>)
   1ba14:	480b      	ldr	r0, [pc, #44]	; (1ba44 <cf_set+0x180>)
   1ba16:	e9c2 3105 	strd	r3, r1, [r2, #20]
   1ba1a:	2303      	movs	r3, #3
   1ba1c:	f842 3f10 	str.w	r3, [r2, #16]!
   1ba20:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1ba24:	f00e fdcf 	bl	2a5c6 <z_log_msg_static_create.constprop.0>
   1ba28:	46b5      	mov	sp, r6
   1ba2a:	e7e7      	b.n	1b9fc <cf_set+0x138>
				set_change_aware_no_store(cfg, change_aware);
   1ba2c:	f001 0101 	and.w	r1, r1, #1
   1ba30:	4620      	mov	r0, r4
   1ba32:	f00e fe82 	bl	2a73a <set_change_aware_no_store>
   1ba36:	e75b      	b.n	1b8f0 <cf_set+0x2c>
		clear_cf_cfg(cfg);
   1ba38:	4620      	mov	r0, r4
   1ba3a:	f7ff fccd 	bl	1b3d8 <clear_cf_cfg>
   1ba3e:	e757      	b.n	1b8f0 <cf_set+0x2c>
   1ba40:	0002e408 	.word	0x0002e408
   1ba44:	0002cb1c 	.word	0x0002cb1c
   1ba48:	0002f717 	.word	0x0002f717
   1ba4c:	01000003 	.word	0x01000003
   1ba50:	0002f733 	.word	0x0002f733
   1ba54:	0002f89c 	.word	0x0002f89c
   1ba58:	0002f770 	.word	0x0002f770
   1ba5c:	0002f8be 	.word	0x0002f8be
   1ba60:	0002f912 	.word	0x0002f912

0001ba64 <bt_gatt_init>:
{
   1ba64:	b510      	push	{r4, lr}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1ba66:	481e      	ldr	r0, [pc, #120]	; (1bae0 <bt_gatt_init+0x7c>)
   1ba68:	2101      	movs	r1, #1
   1ba6a:	f00e fd85 	bl	2a578 <atomic_or>
	if (atomic_test_and_set_bit(gatt_flags, GATT_INITIALIZED)) {
   1ba6e:	07c3      	lsls	r3, r0, #31
   1ba70:	d435      	bmi.n	1bade <bt_gatt_init+0x7a>
   1ba72:	2102      	movs	r1, #2
   1ba74:	481a      	ldr	r0, [pc, #104]	; (1bae0 <bt_gatt_init+0x7c>)
   1ba76:	f00e fd7f 	bl	2a578 <atomic_or>
	if (atomic_test_and_set_bit(gatt_flags, GATT_SERVICE_INITIALIZED)) {
   1ba7a:	4008      	ands	r0, r1
   1ba7c:	d107      	bne.n	1ba8e <bt_gatt_init+0x2a>
   1ba7e:	4919      	ldr	r1, [pc, #100]	; (1bae4 <bt_gatt_init+0x80>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1ba80:	4a19      	ldr	r2, [pc, #100]	; (1bae8 <bt_gatt_init+0x84>)
   1ba82:	880b      	ldrh	r3, [r1, #0]
   1ba84:	4c19      	ldr	r4, [pc, #100]	; (1baec <bt_gatt_init+0x88>)
   1ba86:	42a2      	cmp	r2, r4
   1ba88:	d323      	bcc.n	1bad2 <bt_gatt_init+0x6e>
   1ba8a:	b100      	cbz	r0, 1ba8e <bt_gatt_init+0x2a>
   1ba8c:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   1ba8e:	4b18      	ldr	r3, [pc, #96]	; (1baf0 <bt_gatt_init+0x8c>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1ba90:	4918      	ldr	r1, [pc, #96]	; (1baf4 <bt_gatt_init+0x90>)
   1ba92:	4819      	ldr	r0, [pc, #100]	; (1baf8 <bt_gatt_init+0x94>)
   1ba94:	2200      	movs	r2, #0
	list->tail = NULL;
   1ba96:	e9c3 2200 	strd	r2, r2, [r3]
   1ba9a:	f010 fadc 	bl	2c056 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1ba9e:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1baa2:	2300      	movs	r3, #0
   1baa4:	4814      	ldr	r0, [pc, #80]	; (1baf8 <bt_gatt_init+0x94>)
   1baa6:	f7fa f99b 	bl	15de0 <bt_long_wq_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1baaa:	4914      	ldr	r1, [pc, #80]	; (1bafc <bt_gatt_init+0x98>)
   1baac:	4814      	ldr	r0, [pc, #80]	; (1bb00 <bt_gatt_init+0x9c>)
   1baae:	f010 fad2 	bl	2c056 <k_work_init_delayable>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1bab2:	2102      	movs	r1, #2
   1bab4:	4813      	ldr	r0, [pc, #76]	; (1bb04 <bt_gatt_init+0xa0>)
   1bab6:	f00e fd5f 	bl	2a578 <atomic_or>
	k_work_init_delayable(&gatt_delayed_store.work, delayed_store);
   1baba:	4913      	ldr	r1, [pc, #76]	; (1bb08 <bt_gatt_init+0xa4>)
   1babc:	4813      	ldr	r0, [pc, #76]	; (1bb0c <bt_gatt_init+0xa8>)
   1babe:	f010 faca 	bl	2c056 <k_work_init_delayable>
	bt_conn_auth_info_cb_register(&gatt_conn_auth_info_cb);
   1bac2:	4813      	ldr	r0, [pc, #76]	; (1bb10 <bt_gatt_init+0xac>)
   1bac4:	f7fd ff8a 	bl	199dc <bt_conn_auth_info_cb_register>
}
   1bac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_cb_register(&gatt_conn_cb);
   1bacc:	4811      	ldr	r0, [pc, #68]	; (1bb14 <bt_gatt_init+0xb0>)
   1bace:	f7fd bda3 	b.w	19618 <bt_conn_cb_register>
		last_static_handle += svc->attr_count;
   1bad2:	6850      	ldr	r0, [r2, #4]
   1bad4:	4403      	add	r3, r0
   1bad6:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1bad8:	3208      	adds	r2, #8
   1bada:	2001      	movs	r0, #1
   1badc:	e7d3      	b.n	1ba86 <bt_gatt_init+0x22>
}
   1bade:	bd10      	pop	{r4, pc}
   1bae0:	200035ac 	.word	0x200035ac
   1bae4:	20004562 	.word	0x20004562
   1bae8:	0002cabc 	.word	0x0002cabc
   1baec:	0002cad4 	.word	0x0002cad4
   1baf0:	200035b0 	.word	0x200035b0
   1baf4:	0002a89d 	.word	0x0002a89d
   1baf8:	20002108 	.word	0x20002108
   1bafc:	0001c10d 	.word	0x0001c10d
   1bb00:	20002180 	.word	0x20002180
   1bb04:	200021b0 	.word	0x200021b0
   1bb08:	0002aa8f 	.word	0x0002aa8f
   1bb0c:	200020b8 	.word	0x200020b8
   1bb10:	200006c8 	.word	0x200006c8
   1bb14:	200006ac 	.word	0x200006ac

0001bb18 <bt_gatt_attr_get_handle>:
{
   1bb18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   1bb1c:	4603      	mov	r3, r0
   1bb1e:	b148      	cbz	r0, 1bb34 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   1bb20:	8a00      	ldrh	r0, [r0, #16]
   1bb22:	b938      	cbnz	r0, 1bb34 <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1bb24:	4912      	ldr	r1, [pc, #72]	; (1bb70 <bt_gatt_attr_get_handle+0x58>)
   1bb26:	f8df e04c 	ldr.w	lr, [pc, #76]	; 1bb74 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   1bb2a:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1bb2c:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1bb30:	4571      	cmp	r1, lr
   1bb32:	d301      	bcc.n	1bb38 <bt_gatt_attr_get_handle+0x20>
}
   1bb34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1bb38:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   1bb3c:	42bb      	cmp	r3, r7
   1bb3e:	d304      	bcc.n	1bb4a <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1bb40:	fb0c 7206 	mla	r2, ip, r6, r7
   1bb44:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   1bb46:	4293      	cmp	r3, r2
   1bb48:	d90e      	bls.n	1bb68 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   1bb4a:	4434      	add	r4, r6
   1bb4c:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1bb4e:	3108      	adds	r1, #8
   1bb50:	4614      	mov	r4, r2
   1bb52:	e7ed      	b.n	1bb30 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   1bb54:	fb0c 7805 	mla	r8, ip, r5, r7
   1bb58:	4543      	cmp	r3, r8
   1bb5a:	d007      	beq.n	1bb6c <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1bb5c:	3501      	adds	r5, #1
   1bb5e:	1962      	adds	r2, r4, r5
   1bb60:	42b5      	cmp	r5, r6
   1bb62:	b292      	uxth	r2, r2
   1bb64:	d1f6      	bne.n	1bb54 <bt_gatt_attr_get_handle+0x3c>
   1bb66:	e7f2      	b.n	1bb4e <bt_gatt_attr_get_handle+0x36>
   1bb68:	2500      	movs	r5, #0
   1bb6a:	e7f8      	b.n	1bb5e <bt_gatt_attr_get_handle+0x46>
   1bb6c:	4610      	mov	r0, r2
   1bb6e:	e7e1      	b.n	1bb34 <bt_gatt_attr_get_handle+0x1c>
   1bb70:	0002cabc 	.word	0x0002cabc
   1bb74:	0002cad4 	.word	0x0002cad4

0001bb78 <bt_gatt_foreach_attr_type>:
{
   1bb78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bb7c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   1bb80:	9100      	str	r1, [sp, #0]
   1bb82:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   1bb84:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1bb88:	2d00      	cmp	r5, #0
   1bb8a:	bf08      	it	eq
   1bb8c:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   1bb8e:	4b24      	ldr	r3, [pc, #144]	; (1bc20 <bt_gatt_foreach_attr_type+0xa8>)
   1bb90:	881b      	ldrh	r3, [r3, #0]
   1bb92:	4283      	cmp	r3, r0
{
   1bb94:	4607      	mov	r7, r0
   1bb96:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   1bb98:	d23c      	bcs.n	1bc14 <bt_gatt_foreach_attr_type+0x9c>
}
   1bb9a:	b003      	add	sp, #12
   1bb9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   1bba0:	6873      	ldr	r3, [r6, #4]
   1bba2:	4423      	add	r3, r4
   1bba4:	42bb      	cmp	r3, r7
   1bba6:	d232      	bcs.n	1bc0e <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   1bba8:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1bbaa:	3608      	adds	r6, #8
   1bbac:	4b1d      	ldr	r3, [pc, #116]	; (1bc24 <bt_gatt_foreach_attr_type+0xac>)
   1bbae:	429e      	cmp	r6, r3
   1bbb0:	d3f6      	bcc.n	1bba0 <bt_gatt_foreach_attr_type+0x28>
   1bbb2:	e7f2      	b.n	1bb9a <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1bbb4:	5889      	ldr	r1, [r1, r2]
   1bbb6:	9301      	str	r3, [sp, #4]
   1bbb8:	4640      	mov	r0, r8
   1bbba:	f00d fa4c 	bl	29056 <bt_uuid_cmp>
   1bbbe:	9b01      	ldr	r3, [sp, #4]
   1bbc0:	b190      	cbz	r0, 1bbe8 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1bbc2:	3401      	adds	r4, #1
   1bbc4:	f10a 0a01 	add.w	sl, sl, #1
   1bbc8:	b2a4      	uxth	r4, r4
   1bbca:	6873      	ldr	r3, [r6, #4]
   1bbcc:	4553      	cmp	r3, sl
   1bbce:	d9ec      	bls.n	1bbaa <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   1bbd0:	9b00      	ldr	r3, [sp, #0]
   1bbd2:	429c      	cmp	r4, r3
   1bbd4:	d8e1      	bhi.n	1bb9a <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   1bbd6:	42bc      	cmp	r4, r7
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1bbd8:	6831      	ldr	r1, [r6, #0]
	if (handle < start_handle) {
   1bbda:	d3f2      	bcc.n	1bbc2 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1bbdc:	fb0b f20a 	mul.w	r2, fp, sl
   1bbe0:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1bbe2:	f1b8 0f00 	cmp.w	r8, #0
   1bbe6:	d1e5      	bne.n	1bbb4 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   1bbe8:	f1b9 0f00 	cmp.w	r9, #0
   1bbec:	d10b      	bne.n	1bc06 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   1bbee:	3d01      	subs	r5, #1
   1bbf0:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   1bbf2:	4618      	mov	r0, r3
   1bbf4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1bbf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1bbf8:	4621      	mov	r1, r4
   1bbfa:	4798      	blx	r3
	if (!*num_matches) {
   1bbfc:	2d00      	cmp	r5, #0
   1bbfe:	d0cc      	beq.n	1bb9a <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1bc00:	2800      	cmp	r0, #0
   1bc02:	d1de      	bne.n	1bbc2 <bt_gatt_foreach_attr_type+0x4a>
   1bc04:	e7c9      	b.n	1bb9a <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   1bc06:	68da      	ldr	r2, [r3, #12]
   1bc08:	4591      	cmp	r9, r2
   1bc0a:	d1da      	bne.n	1bbc2 <bt_gatt_foreach_attr_type+0x4a>
   1bc0c:	e7ef      	b.n	1bbee <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1bc0e:	f04f 0a00 	mov.w	sl, #0
   1bc12:	e7da      	b.n	1bbca <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1bc14:	4e04      	ldr	r6, [pc, #16]	; (1bc28 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   1bc16:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1bc18:	f04f 0b14 	mov.w	fp, #20
   1bc1c:	e7c6      	b.n	1bbac <bt_gatt_foreach_attr_type+0x34>
   1bc1e:	bf00      	nop
   1bc20:	20004562 	.word	0x20004562
   1bc24:	0002cad4 	.word	0x0002cad4
   1bc28:	0002cabc 	.word	0x0002cabc

0001bc2c <db_hash_gen>:
{
   1bc2c:	b510      	push	{r4, lr}
   1bc2e:	b0ce      	sub	sp, #312	; 0x138
	uint8_t key[16] = {};
   1bc30:	2400      	movs	r4, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1bc32:	aa22      	add	r2, sp, #136	; 0x88
   1bc34:	4669      	mov	r1, sp
   1bc36:	a80a      	add	r0, sp, #40	; 0x28
	uint8_t key[16] = {};
   1bc38:	e9cd 4400 	strd	r4, r4, [sp]
   1bc3c:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1bc40:	f00c ffba 	bl	28bb8 <tc_cmac_setup>
   1bc44:	b958      	cbnz	r0, 1bc5e <db_hash_gen+0x32>
		LOG_ERR("Unable to setup AES CMAC");
   1bc46:	4b15      	ldr	r3, [pc, #84]	; (1bc9c <db_hash_gen+0x70>)
		LOG_ERR("Unable to calculate hash");
   1bc48:	9309      	str	r3, [sp, #36]	; 0x24
   1bc4a:	4815      	ldr	r0, [pc, #84]	; (1bca0 <db_hash_gen+0x74>)
   1bc4c:	2302      	movs	r3, #2
   1bc4e:	aa08      	add	r2, sp, #32
   1bc50:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bc54:	9308      	str	r3, [sp, #32]
   1bc56:	f00e fcb6 	bl	2a5c6 <z_log_msg_static_create.constprop.0>
}
   1bc5a:	b04e      	add	sp, #312	; 0x138
   1bc5c:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   1bc5e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1bc62:	2001      	movs	r0, #1
   1bc64:	4a0f      	ldr	r2, [pc, #60]	; (1bca4 <db_hash_gen+0x78>)
   1bc66:	ab0a      	add	r3, sp, #40	; 0x28
   1bc68:	f00e fe0d 	bl	2a886 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1bc6c:	480e      	ldr	r0, [pc, #56]	; (1bca8 <db_hash_gen+0x7c>)
   1bc6e:	a90a      	add	r1, sp, #40	; 0x28
   1bc70:	f00d f837 	bl	28ce2 <tc_cmac_final>
   1bc74:	b908      	cbnz	r0, 1bc7a <db_hash_gen+0x4e>
		LOG_ERR("Unable to calculate hash");
   1bc76:	4b0d      	ldr	r3, [pc, #52]	; (1bcac <db_hash_gen+0x80>)
   1bc78:	e7e6      	b.n	1bc48 <db_hash_gen+0x1c>
   1bc7a:	4b0b      	ldr	r3, [pc, #44]	; (1bca8 <db_hash_gen+0x7c>)
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   1bc7c:	4621      	mov	r1, r4
   1bc7e:	f103 0210 	add.w	r2, r3, #16
   1bc82:	3101      	adds	r1, #1
		uint8_t tmp = ((uint8_t *)buf)[i];
   1bc84:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1bc86:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1bc8a:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
   1bc8e:	2908      	cmp	r1, #8
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1bc90:	7010      	strb	r0, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   1bc92:	d1f6      	bne.n	1bc82 <db_hash_gen+0x56>
   1bc94:	4806      	ldr	r0, [pc, #24]	; (1bcb0 <db_hash_gen+0x84>)
   1bc96:	f00e fc6f 	bl	2a578 <atomic_or>
   1bc9a:	e7de      	b.n	1bc5a <db_hash_gen+0x2e>
   1bc9c:	0002f963 	.word	0x0002f963
   1bca0:	0002cb1c 	.word	0x0002cb1c
   1bca4:	0002a4a9 	.word	0x0002a4a9
   1bca8:	200020e8 	.word	0x200020e8
   1bcac:	0002f97c 	.word	0x0002f97c
   1bcb0:	200021b0 	.word	0x200021b0

0001bcb4 <db_hash_read>:
{
   1bcb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1bcb6:	491c      	ldr	r1, [pc, #112]	; (1bd28 <db_hash_read+0x74>)
{
   1bcb8:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1bcbc:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1bcbe:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   1bcc2:	4615      	mov	r5, r2
   1bcc4:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1bcc6:	f010 f9e8 	bl	2c09a <k_work_cancel_delayable_sync>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1bcca:	4818      	ldr	r0, [pc, #96]	; (1bd2c <db_hash_read+0x78>)
   1bccc:	f00e fc75 	bl	2a5ba <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1bcd0:	0701      	lsls	r1, r0, #28
   1bcd2:	d405      	bmi.n	1bce0 <db_hash_read+0x2c>
		db_hash_gen();
   1bcd4:	f7ff ffaa 	bl	1bc2c <db_hash_gen>
			set_all_change_unaware();
   1bcd8:	f7ff fd5e 	bl	1b798 <set_all_change_unaware>
			db_hash_store();
   1bcdc:	f7ff fad2 	bl	1b284 <db_hash_store>
	cfg = find_cf_cfg(conn);
   1bce0:	4620      	mov	r0, r4
   1bce2:	f7ff f92b 	bl	1af3c <find_cf_cfg>
	if (cfg &&
   1bce6:	b168      	cbz	r0, 1bd04 <db_hash_read+0x50>
   1bce8:	7a03      	ldrb	r3, [r0, #8]
   1bcea:	07da      	lsls	r2, r3, #31
   1bcec:	d50a      	bpl.n	1bd04 <db_hash_read+0x50>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1bcee:	f100 040c 	add.w	r4, r0, #12
   1bcf2:	4620      	mov	r0, r4
   1bcf4:	f00e fc61 	bl	2a5ba <atomic_get>
	    CF_ROBUST_CACHING(cfg) &&
   1bcf8:	07c3      	lsls	r3, r0, #31
   1bcfa:	d403      	bmi.n	1bd04 <db_hash_read+0x50>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1bcfc:	2102      	movs	r1, #2
   1bcfe:	4620      	mov	r0, r4
   1bd00:	f00e fc3a 	bl	2a578 <atomic_or>
	if (offset > value_len) {
   1bd04:	2e10      	cmp	r6, #16
   1bd06:	d80c      	bhi.n	1bd22 <db_hash_read+0x6e>
	len = MIN(buf_len, value_len - offset);
   1bd08:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   1bd0c:	4908      	ldr	r1, [pc, #32]	; (1bd30 <db_hash_read+0x7c>)
	len = MIN(buf_len, value_len - offset);
   1bd0e:	42bc      	cmp	r4, r7
   1bd10:	bfa8      	it	ge
   1bd12:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1bd14:	4622      	mov	r2, r4
   1bd16:	4431      	add	r1, r6
   1bd18:	4628      	mov	r0, r5
   1bd1a:	f00d f905 	bl	28f28 <memcpy>
}
   1bd1e:	4620      	mov	r0, r4
   1bd20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1bd22:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1bd26:	e7fa      	b.n	1bd1e <db_hash_read+0x6a>
   1bd28:	20002138 	.word	0x20002138
   1bd2c:	200021b0 	.word	0x200021b0
   1bd30:	200020e8 	.word	0x200020e8

0001bd34 <do_db_hash>:
{
   1bd34:	b510      	push	{r4, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1bd36:	481a      	ldr	r0, [pc, #104]	; (1bda0 <do_db_hash+0x6c>)
   1bd38:	f00e fc3f 	bl	2a5ba <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1bd3c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	if (new_hash) {
   1bd40:	f080 0401 	eor.w	r4, r0, #1
   1bd44:	b908      	cbnz	r0, 1bd4a <do_db_hash+0x16>
		db_hash_gen();
   1bd46:	f7ff ff71 	bl	1bc2c <db_hash_gen>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1bd4a:	4815      	ldr	r0, [pc, #84]	; (1bda0 <do_db_hash+0x6c>)
   1bd4c:	f00e fc35 	bl	2a5ba <atomic_get>
   1bd50:	4603      	mov	r3, r0
   1bd52:	4813      	ldr	r0, [pc, #76]	; (1bda0 <do_db_hash+0x6c>)
   1bd54:	f00e fc31 	bl	2a5ba <atomic_get>
	if (!hash_loaded_from_settings) {
   1bd58:	06da      	lsls	r2, r3, #27
   1bd5a:	d51f      	bpl.n	1bd9c <do_db_hash+0x68>
	if (already_processed) {
   1bd5c:	0683      	lsls	r3, r0, #26
   1bd5e:	d506      	bpl.n	1bd6e <do_db_hash+0x3a>
		if (new_hash) {
   1bd60:	b1e4      	cbz	r4, 1bd9c <do_db_hash+0x68>
		set_all_change_unaware();
   1bd62:	f7ff fd19 	bl	1b798 <set_all_change_unaware>
}
   1bd66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		db_hash_store();
   1bd6a:	f7ff ba8b 	b.w	1b284 <db_hash_store>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1bd6e:	2120      	movs	r1, #32
   1bd70:	480b      	ldr	r0, [pc, #44]	; (1bda0 <do_db_hash+0x6c>)
   1bd72:	f00e fc01 	bl	2a578 <atomic_or>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   1bd76:	490b      	ldr	r1, [pc, #44]	; (1bda4 <do_db_hash+0x70>)
   1bd78:	2210      	movs	r2, #16
   1bd7a:	1888      	adds	r0, r1, r2
   1bd7c:	f00d f8ad 	bl	28eda <memcmp>
   1bd80:	b948      	cbnz	r0, 1bd96 <do_db_hash+0x62>
			k_work_cancel_delayable(&gatt_sc.work);
   1bd82:	4809      	ldr	r0, [pc, #36]	; (1bda8 <do_db_hash+0x74>)
   1bd84:	f010 f975 	bl	2c072 <k_work_cancel_delayable>
}
   1bd88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1bd8c:	4804      	ldr	r0, [pc, #16]	; (1bda0 <do_db_hash+0x6c>)
   1bd8e:	f06f 0101 	mvn.w	r1, #1
   1bd92:	f00e bc00 	b.w	2a596 <atomic_and>
		sc_indicate(0x0001, 0xffff);
   1bd96:	f7ff fcd3 	bl	1b740 <sc_indicate.constprop.0>
   1bd9a:	e7e2      	b.n	1bd62 <do_db_hash+0x2e>
}
   1bd9c:	bd10      	pop	{r4, pc}
   1bd9e:	bf00      	nop
   1bda0:	200021b0 	.word	0x200021b0
   1bda4:	200020e8 	.word	0x200020e8
   1bda8:	20002180 	.word	0x20002180

0001bdac <db_hash_commit>:
{
   1bdac:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1bdae:	2110      	movs	r1, #16
   1bdb0:	4803      	ldr	r0, [pc, #12]	; (1bdc0 <db_hash_commit+0x14>)
   1bdb2:	f00e fbe1 	bl	2a578 <atomic_or>
	do_db_hash();
   1bdb6:	f7ff ffbd 	bl	1bd34 <do_db_hash>
}
   1bdba:	2000      	movs	r0, #0
   1bdbc:	bd08      	pop	{r3, pc}
   1bdbe:	bf00      	nop
   1bdc0:	200021b0 	.word	0x200021b0

0001bdc4 <ccc_set_direct>:
{
   1bdc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bdc8:	b0b8      	sub	sp, #224	; 0xe0
   1bdca:	af00      	add	r7, sp, #0
   1bdcc:	460c      	mov	r4, r1
   1bdce:	4690      	mov	r8, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   1bdd0:	493f      	ldr	r1, [pc, #252]	; (1bed0 <ccc_set_direct+0x10c>)
   1bdd2:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
   1bdd6:	463a      	mov	r2, r7
{
   1bdd8:	4699      	mov	r9, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   1bdda:	f00c fc9a 	bl	28712 <settings_name_steq>
   1bdde:	b938      	cbnz	r0, 1bdf0 <ccc_set_direct+0x2c>
   1bde0:	f7ff f922 	bl	1b028 <ccc_set_direct.part.0>
   1bde4:	4605      	mov	r5, r0
}
   1bde6:	4628      	mov	r0, r5
   1bde8:	37e0      	adds	r7, #224	; 0xe0
   1bdea:	46bd      	mov	sp, r7
   1bdec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   1bdf0:	683e      	ldr	r6, [r7, #0]
		settings_name_next(name, &next);
   1bdf2:	1d39      	adds	r1, r7, #4
   1bdf4:	4630      	mov	r0, r6
   1bdf6:	f00c fcb0 	bl	2875a <settings_name_next>
		if (!name) {
   1bdfa:	b96e      	cbnz	r6, 1be18 <ccc_set_direct+0x54>
			LOG_ERR("Insufficient number of arguments");
   1bdfc:	4b35      	ldr	r3, [pc, #212]	; (1bed4 <ccc_set_direct+0x110>)
   1bdfe:	637b      	str	r3, [r7, #52]	; 0x34
   1be00:	2302      	movs	r3, #2
   1be02:	4835      	ldr	r0, [pc, #212]	; (1bed8 <ccc_set_direct+0x114>)
   1be04:	633b      	str	r3, [r7, #48]	; 0x30
   1be06:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1be0a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1be0e:	f00e fbda 	bl	2a5c6 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1be12:	f06f 0415 	mvn.w	r4, #21
   1be16:	e049      	b.n	1beac <ccc_set_direct+0xe8>
		} else if (!next) {
   1be18:	6878      	ldr	r0, [r7, #4]
   1be1a:	b9c0      	cbnz	r0, 1be4e <ccc_set_direct+0x8a>
		err = bt_settings_decode_key(name, &addr);
   1be1c:	f107 0a08 	add.w	sl, r7, #8
			load.addr_with_id.id = BT_ID_DEFAULT;
   1be20:	2300      	movs	r3, #0
		err = bt_settings_decode_key(name, &addr);
   1be22:	4651      	mov	r1, sl
   1be24:	4630      	mov	r0, r6
			load.addr_with_id.id = BT_ID_DEFAULT;
   1be26:	753b      	strb	r3, [r7, #20]
		err = bt_settings_decode_key(name, &addr);
   1be28:	f00d f8f1 	bl	2900e <bt_settings_decode_key>
		if (err) {
   1be2c:	4605      	mov	r5, r0
   1be2e:	b320      	cbz	r0, 1be7a <ccc_set_direct+0xb6>
			LOG_ERR("Unable to decode address %s", name);
   1be30:	466c      	mov	r4, sp
   1be32:	b088      	sub	sp, #32
   1be34:	466a      	mov	r2, sp
   1be36:	4b29      	ldr	r3, [pc, #164]	; (1bedc <ccc_set_direct+0x118>)
   1be38:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1be3c:	f44f 7300 	mov.w	r3, #512	; 0x200
   1be40:	8393      	strh	r3, [r2, #28]
   1be42:	4b27      	ldr	r3, [pc, #156]	; (1bee0 <ccc_set_direct+0x11c>)
   1be44:	f842 3f10 	str.w	r3, [r2, #16]!
   1be48:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1be4c:	e010      	b.n	1be70 <ccc_set_direct+0xac>
			unsigned long next_id = strtoul(next, NULL, 10);
   1be4e:	220a      	movs	r2, #10
   1be50:	2100      	movs	r1, #0
   1be52:	f00c ff91 	bl	28d78 <strtoul>
			if (next_id >= CONFIG_BT_ID_MAX) {
   1be56:	2800      	cmp	r0, #0
   1be58:	d0e0      	beq.n	1be1c <ccc_set_direct+0x58>
				LOG_ERR("Invalid local identity %lu", next_id);
   1be5a:	466c      	mov	r4, sp
   1be5c:	b088      	sub	sp, #32
   1be5e:	466a      	mov	r2, sp
   1be60:	4b20      	ldr	r3, [pc, #128]	; (1bee4 <ccc_set_direct+0x120>)
   1be62:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1be66:	2303      	movs	r3, #3
   1be68:	f842 3f10 	str.w	r3, [r2, #16]!
   1be6c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
			LOG_ERR("Unable to decode address %s", name);
   1be70:	4819      	ldr	r0, [pc, #100]	; (1bed8 <ccc_set_direct+0x114>)
   1be72:	f00e fba8 	bl	2a5c6 <z_log_msg_static_create.constprop.0>
   1be76:	46a5      	mov	sp, r4
			return -EINVAL;
   1be78:	e7cb      	b.n	1be12 <ccc_set_direct+0x4e>
		load.addr_with_id.addr = &addr;
   1be7a:	f8c7 a010 	str.w	sl, [r7, #16]
		if (len_rd) {
   1be7e:	b32c      	cbz	r4, 1becc <ccc_set_direct+0x108>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   1be80:	22c0      	movs	r2, #192	; 0xc0
   1be82:	f107 0120 	add.w	r1, r7, #32
   1be86:	4648      	mov	r0, r9
   1be88:	47c0      	blx	r8
			if (len < 0) {
   1be8a:	1e04      	subs	r4, r0, #0
   1be8c:	da10      	bge.n	1beb0 <ccc_set_direct+0xec>
				LOG_ERR("Failed to decode value (err %zd)", len);
   1be8e:	466d      	mov	r5, sp
   1be90:	b088      	sub	sp, #32
   1be92:	466a      	mov	r2, sp
   1be94:	4b14      	ldr	r3, [pc, #80]	; (1bee8 <ccc_set_direct+0x124>)
   1be96:	4810      	ldr	r0, [pc, #64]	; (1bed8 <ccc_set_direct+0x114>)
   1be98:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1be9c:	2303      	movs	r3, #3
   1be9e:	f842 3f10 	str.w	r3, [r2, #16]!
   1bea2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1bea6:	f00e fb8e 	bl	2a5c6 <z_log_msg_static_create.constprop.0>
   1beaa:	46ad      	mov	sp, r5
			return -EINVAL;
   1beac:	4625      	mov	r5, r4
   1beae:	e79a      	b.n	1bde6 <ccc_set_direct+0x22>
			load.count = len / sizeof(*ccc_store);
   1beb0:	08a4      	lsrs	r4, r4, #2
			for (size_t i = 0; i < load.count; i++) {
   1beb2:	f107 0320 	add.w	r3, r7, #32
			load.count = len / sizeof(*ccc_store);
   1beb6:	e9c7 3406 	strd	r3, r4, [r7, #24]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   1beba:	4a0c      	ldr	r2, [pc, #48]	; (1beec <ccc_set_direct+0x128>)
   1bebc:	f107 0310 	add.w	r3, r7, #16
   1bec0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1bec4:	2001      	movs	r0, #1
   1bec6:	f00e fcde 	bl	2a886 <bt_gatt_foreach_attr>
	return 0;
   1beca:	e78c      	b.n	1bde6 <ccc_set_direct+0x22>
   1becc:	4623      	mov	r3, r4
   1bece:	e7f2      	b.n	1beb6 <ccc_set_direct+0xf2>
   1bed0:	0002f995 	.word	0x0002f995
   1bed4:	0002e408 	.word	0x0002e408
   1bed8:	0002cb1c 	.word	0x0002cb1c
   1bedc:	0002f717 	.word	0x0002f717
   1bee0:	01000003 	.word	0x01000003
   1bee4:	0002f733 	.word	0x0002f733
   1bee8:	0002f770 	.word	0x0002f770
   1beec:	0001aeb1 	.word	0x0001aeb1

0001bef0 <bt_gatt_attr_next>:
{
   1bef0:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   1bef2:	2300      	movs	r3, #0
   1bef4:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   1bef6:	f7ff fe0f 	bl	1bb18 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   1befa:	1c41      	adds	r1, r0, #1
   1befc:	b289      	uxth	r1, r1
   1befe:	4608      	mov	r0, r1
   1bf00:	4a03      	ldr	r2, [pc, #12]	; (1bf10 <bt_gatt_attr_next+0x20>)
   1bf02:	ab01      	add	r3, sp, #4
   1bf04:	f00e fcbf 	bl	2a886 <bt_gatt_foreach_attr>
}
   1bf08:	9801      	ldr	r0, [sp, #4]
   1bf0a:	b003      	add	sp, #12
   1bf0c:	f85d fb04 	ldr.w	pc, [sp], #4
   1bf10:	0002a45d 	.word	0x0002a45d

0001bf14 <gatt_indicate>:
{
   1bf14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bf18:	4615      	mov	r5, r2
   1bf1a:	b086      	sub	sp, #24
   1bf1c:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1bf1e:	2294      	movs	r2, #148	; 0x94
   1bf20:	6869      	ldr	r1, [r5, #4]
{
   1bf22:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1bf24:	f00e fcbc 	bl	2a8a0 <bt_gatt_check_perm>
   1bf28:	4680      	mov	r8, r0
   1bf2a:	b178      	cbz	r0, 1bf4c <gatt_indicate+0x38>
		LOG_WRN("Link is not encrypted");
   1bf2c:	4b36      	ldr	r3, [pc, #216]	; (1c008 <gatt_indicate+0xf4>)
   1bf2e:	9305      	str	r3, [sp, #20]
   1bf30:	4836      	ldr	r0, [pc, #216]	; (1c00c <gatt_indicate+0xf8>)
   1bf32:	2302      	movs	r3, #2
   1bf34:	aa04      	add	r2, sp, #16
   1bf36:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return -EPERM;
   1bf3a:	f04f 35ff 	mov.w	r5, #4294967295
		LOG_WRN("Link is not encrypted");
   1bf3e:	9304      	str	r3, [sp, #16]
   1bf40:	f00e fb41 	bl	2a5c6 <z_log_msg_static_create.constprop.0>
}
   1bf44:	4628      	mov	r0, r5
   1bf46:	b006      	add	sp, #24
   1bf48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   1bf4c:	6869      	ldr	r1, [r5, #4]
   1bf4e:	2202      	movs	r2, #2
   1bf50:	4630      	mov	r0, r6
   1bf52:	f00e fcdf 	bl	2a914 <bt_gatt_is_subscribed>
   1bf56:	b960      	cbnz	r0, 1bf72 <gatt_indicate+0x5e>
			LOG_WRN("Device is not subscribed to characteristic");
   1bf58:	4b2d      	ldr	r3, [pc, #180]	; (1c010 <gatt_indicate+0xfc>)
   1bf5a:	9305      	str	r3, [sp, #20]
   1bf5c:	482b      	ldr	r0, [pc, #172]	; (1c00c <gatt_indicate+0xf8>)
   1bf5e:	2302      	movs	r3, #2
   1bf60:	aa04      	add	r2, sp, #16
   1bf62:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1bf66:	9304      	str	r3, [sp, #16]
			return -EINVAL;
   1bf68:	f06f 0515 	mvn.w	r5, #21
			LOG_WRN("Device is not subscribed to characteristic");
   1bf6c:	f00e fb2b 	bl	2a5c6 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1bf70:	e7e8      	b.n	1bf44 <gatt_indicate+0x30>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1bf72:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1bf76:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   1bf78:	8aaf      	ldrh	r7, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1bf7a:	f7fe fe43 	bl	1ac04 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   1bf7e:	3702      	adds	r7, #2
	if (!req) {
   1bf80:	4604      	mov	r4, r0
   1bf82:	b1d0      	cbz	r0, 1bfba <gatt_indicate+0xa6>
	req->func = func;
   1bf84:	4b23      	ldr	r3, [pc, #140]	; (1c014 <gatt_indicate+0x100>)
	req->len = len;
   1bf86:	6147      	str	r7, [r0, #20]
	req->att_op = op;
   1bf88:	211d      	movs	r1, #29
   1bf8a:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   1bf8c:	f8c0 800c 	str.w	r8, [r0, #12]
	req->func = func;
   1bf90:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   1bf92:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1bf94:	463a      	mov	r2, r7
   1bf96:	4630      	mov	r0, r6
   1bf98:	f7fe fb60 	bl	1a65c <bt_att_create_pdu>
	if (!buf) {
   1bf9c:	4607      	mov	r7, r0
   1bf9e:	b978      	cbnz	r0, 1bfc0 <gatt_indicate+0xac>
		LOG_WRN("No buffer available to send indication");
   1bfa0:	4b1d      	ldr	r3, [pc, #116]	; (1c018 <gatt_indicate+0x104>)
   1bfa2:	481a      	ldr	r0, [pc, #104]	; (1c00c <gatt_indicate+0xf8>)
   1bfa4:	9305      	str	r3, [sp, #20]
   1bfa6:	aa04      	add	r2, sp, #16
   1bfa8:	2302      	movs	r3, #2
   1bfaa:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1bfae:	9304      	str	r3, [sp, #16]
   1bfb0:	f00e fb09 	bl	2a5c6 <z_log_msg_static_create.constprop.0>
		bt_att_req_free(req);
   1bfb4:	4620      	mov	r0, r4
   1bfb6:	f7fe fe47 	bl	1ac48 <bt_att_req_free>
		return -ENOMEM;
   1bfba:	f06f 050b 	mvn.w	r5, #11
   1bfbe:	e7c1      	b.n	1bf44 <gatt_indicate+0x30>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   1bfc0:	2301      	movs	r3, #1
   1bfc2:	4642      	mov	r2, r8
   1bfc4:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   1bfc6:	f107 0a0c 	add.w	sl, r7, #12
   1bfca:	f00e fa40 	bl	2a44e <bt_att_set_tx_meta_data>
   1bfce:	2102      	movs	r1, #2
   1bfd0:	4650      	mov	r0, sl
   1bfd2:	f00f f9bb 	bl	2b34c <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1bfd6:	4680      	mov	r8, r0
   1bfd8:	4650      	mov	r0, sl
   1bfda:	f828 9b02 	strh.w	r9, [r8], #2
   1bfde:	8aa9      	ldrh	r1, [r5, #20]
   1bfe0:	f00f f9b4 	bl	2b34c <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   1bfe4:	8aaa      	ldrh	r2, [r5, #20]
   1bfe6:	6929      	ldr	r1, [r5, #16]
   1bfe8:	4640      	mov	r0, r8
   1bfea:	f00c ff9d 	bl	28f28 <memcpy>
	req->buf = buf;
   1bfee:	60a7      	str	r7, [r4, #8]
	err = bt_att_req_send(conn, req);
   1bff0:	4621      	mov	r1, r4
   1bff2:	4630      	mov	r0, r6
   1bff4:	f00e f9f8 	bl	2a3e8 <bt_att_req_send>
	if (err) {
   1bff8:	4605      	mov	r5, r0
   1bffa:	2800      	cmp	r0, #0
   1bffc:	d0a2      	beq.n	1bf44 <gatt_indicate+0x30>
		bt_att_req_free(req);
   1bffe:	4620      	mov	r0, r4
   1c000:	f7fe fe22 	bl	1ac48 <bt_att_req_free>
   1c004:	e79e      	b.n	1bf44 <gatt_indicate+0x30>
   1c006:	bf00      	nop
   1c008:	0002f99c 	.word	0x0002f99c
   1c00c:	0002cb1c 	.word	0x0002cb1c
   1c010:	0002f9b2 	.word	0x0002f9b2
   1c014:	0002a477 	.word	0x0002a477
   1c018:	0002f9dd 	.word	0x0002f9dd

0001c01c <bt_gatt_indicate>:
{
   1c01c:	b530      	push	{r4, r5, lr}
   1c01e:	4604      	mov	r4, r0
   1c020:	b08b      	sub	sp, #44	; 0x2c
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1c022:	4837      	ldr	r0, [pc, #220]	; (1c100 <bt_gatt_indicate+0xe4>)
   1c024:	f00e fac9 	bl	2a5ba <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1c028:	0742      	lsls	r2, r0, #29
{
   1c02a:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1c02c:	d561      	bpl.n	1c0f2 <bt_gatt_indicate+0xd6>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1c02e:	b114      	cbz	r4, 1c036 <bt_gatt_indicate+0x1a>
   1c030:	7b63      	ldrb	r3, [r4, #13]
   1c032:	2b07      	cmp	r3, #7
   1c034:	d160      	bne.n	1c0f8 <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
   1c036:	6868      	ldr	r0, [r5, #4]
   1c038:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1c03a:	f7ff fd6d 	bl	1bb18 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1c03e:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1c040:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1c044:	b33a      	cbz	r2, 1c096 <bt_gatt_indicate+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1c046:	a905      	add	r1, sp, #20
   1c048:	9102      	str	r1, [sp, #8]
   1c04a:	492e      	ldr	r1, [pc, #184]	; (1c104 <bt_gatt_indicate+0xe8>)
   1c04c:	9101      	str	r1, [sp, #4]
   1c04e:	2101      	movs	r1, #1
	found->attr = NULL;
   1c050:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1c052:	9100      	str	r1, [sp, #0]
   1c054:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1c058:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1c05a:	f7ff fd8d 	bl	1bb78 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1c05e:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1c060:	b91b      	cbnz	r3, 1c06a <bt_gatt_indicate+0x4e>
			return -ENOENT;
   1c062:	f06f 0001 	mvn.w	r0, #1
}
   1c066:	b00b      	add	sp, #44	; 0x2c
   1c068:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1c06a:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1c06c:	9b05      	ldr	r3, [sp, #20]
   1c06e:	6818      	ldr	r0, [r3, #0]
   1c070:	2300      	movs	r3, #0
   1c072:	f88d 3010 	strb.w	r3, [sp, #16]
   1c076:	a904      	add	r1, sp, #16
   1c078:	f642 0303 	movw	r3, #10243	; 0x2803
   1c07c:	f8ad 3012 	strh.w	r3, [sp, #18]
   1c080:	f00c ffe9 	bl	29056 <bt_uuid_cmp>
   1c084:	b970      	cbnz	r0, 1c0a4 <bt_gatt_indicate+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1c086:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1c088:	68c3      	ldr	r3, [r0, #12]
   1c08a:	799b      	ldrb	r3, [r3, #6]
   1c08c:	069b      	lsls	r3, r3, #26
   1c08e:	d405      	bmi.n	1c09c <bt_gatt_indicate+0x80>
			return -EINVAL;
   1c090:	f06f 0015 	mvn.w	r0, #21
   1c094:	e7e7      	b.n	1c066 <bt_gatt_indicate+0x4a>
		if (!data.handle) {
   1c096:	2800      	cmp	r0, #0
   1c098:	d1e8      	bne.n	1c06c <bt_gatt_indicate+0x50>
   1c09a:	e7e2      	b.n	1c062 <bt_gatt_indicate+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1c09c:	f00e fba5 	bl	2a7ea <bt_gatt_attr_value_handle>
   1c0a0:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   1c0a4:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1c0a8:	b13c      	cbz	r4, 1c0ba <bt_gatt_indicate+0x9e>
		params->_ref = 1;
   1c0aa:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   1c0ac:	4601      	mov	r1, r0
		params->_ref = 1;
   1c0ae:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   1c0b0:	462a      	mov	r2, r5
   1c0b2:	4620      	mov	r0, r4
   1c0b4:	f7ff ff2e 	bl	1bf14 <gatt_indicate>
   1c0b8:	e7d5      	b.n	1c066 <bt_gatt_indicate+0x4a>
	data.err = -ENOTCONN;
   1c0ba:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1c0be:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1c0c0:	2302      	movs	r3, #2
   1c0c2:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1c0c6:	f642 1302 	movw	r3, #10498	; 0x2902
   1c0ca:	f8ad 3012 	strh.w	r3, [sp, #18]
   1c0ce:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   1c0d0:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1c0d2:	9302      	str	r3, [sp, #8]
   1c0d4:	4b0c      	ldr	r3, [pc, #48]	; (1c108 <bt_gatt_indicate+0xec>)
   1c0d6:	9301      	str	r3, [sp, #4]
   1c0d8:	2301      	movs	r3, #1
   1c0da:	9300      	str	r3, [sp, #0]
   1c0dc:	aa04      	add	r2, sp, #16
   1c0de:	4623      	mov	r3, r4
   1c0e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   1c0e4:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1c0e6:	f88d 4010 	strb.w	r4, [sp, #16]
   1c0ea:	f7ff fd45 	bl	1bb78 <bt_gatt_foreach_attr_type>
	return data.err;
   1c0ee:	9807      	ldr	r0, [sp, #28]
   1c0f0:	e7b9      	b.n	1c066 <bt_gatt_indicate+0x4a>
		return -EAGAIN;
   1c0f2:	f06f 000a 	mvn.w	r0, #10
   1c0f6:	e7b6      	b.n	1c066 <bt_gatt_indicate+0x4a>
		return -ENOTCONN;
   1c0f8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1c0fc:	e7b3      	b.n	1c066 <bt_gatt_indicate+0x4a>
   1c0fe:	bf00      	nop
   1c100:	20000464 	.word	0x20000464
   1c104:	0002a49d 	.word	0x0002a49d
   1c108:	0001c43d 	.word	0x0001c43d

0001c10c <sc_process>:
{
   1c10c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   1c10e:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   1c112:	4604      	mov	r4, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1c114:	f850 3c08 	ldr.w	r3, [r0, #-8]
   1c118:	9301      	str	r3, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   1c11a:	f1a0 0620 	sub.w	r6, r0, #32
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1c11e:	f06f 0101 	mvn.w	r1, #1
   1c122:	4628      	mov	r0, r5
   1c124:	f00e fa37 	bl	2a596 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1c128:	4b0d      	ldr	r3, [pc, #52]	; (1c160 <sc_process+0x54>)
   1c12a:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   1c12e:	4b0d      	ldr	r3, [pc, #52]	; (1c164 <sc_process+0x58>)
   1c130:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   1c134:	ab01      	add	r3, sp, #4
	sc->start = 0U;
   1c136:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   1c138:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   1c13c:	2304      	movs	r3, #4
	sc->start = 0U;
   1c13e:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   1c142:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   1c146:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1c14a:	4631      	mov	r1, r6
   1c14c:	f7ff ff66 	bl	1c01c <bt_gatt_indicate>
   1c150:	b918      	cbnz	r0, 1c15a <sc_process+0x4e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1c152:	2102      	movs	r1, #2
   1c154:	4628      	mov	r0, r5
   1c156:	f00e fa0f 	bl	2a578 <atomic_or>
}
   1c15a:	b002      	add	sp, #8
   1c15c:	bd70      	pop	{r4, r5, r6, pc}
   1c15e:	bf00      	nop
   1c160:	0002d1c0 	.word	0x0002d1c0
   1c164:	0001b879 	.word	0x0001b879

0001c168 <update_ccc>:
{
   1c168:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c16c:	b089      	sub	sp, #36	; 0x24
	struct bt_conn *conn = data->conn;
   1c16e:	6814      	ldr	r4, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c170:	4b3b      	ldr	r3, [pc, #236]	; (1c260 <update_ccc+0xf8>)
{
   1c172:	4690      	mov	r8, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c174:	6882      	ldr	r2, [r0, #8]
   1c176:	429a      	cmp	r2, r3
{
   1c178:	af00      	add	r7, sp, #0
   1c17a:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c17c:	d11f      	bne.n	1c1be <update_ccc+0x56>
	ccc = attr->user_data;
   1c17e:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   1c180:	8933      	ldrh	r3, [r6, #8]
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1c182:	1c72      	adds	r2, r6, #1
		if (!cfg->value ||
   1c184:	b1db      	cbz	r3, 1c1be <update_ccc+0x56>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1c186:	7831      	ldrb	r1, [r6, #0]
   1c188:	4620      	mov	r0, r4
   1c18a:	f00d fbec 	bl	29966 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1c18e:	b1b0      	cbz	r0, 1c1be <update_ccc+0x56>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1c190:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1c194:	4629      	mov	r1, r5
   1c196:	4620      	mov	r0, r4
   1c198:	f00e fb82 	bl	2a8a0 <bt_gatt_check_perm>
		if (err) {
   1c19c:	b330      	cbz	r0, 1c1ec <update_ccc+0x84>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1c19e:	2803      	cmp	r0, #3
   1c1a0:	d112      	bne.n	1c1c8 <update_ccc+0x60>
				LOG_WRN("CCC %p not writable", attr);
   1c1a2:	466c      	mov	r4, sp
   1c1a4:	b088      	sub	sp, #32
   1c1a6:	466a      	mov	r2, sp
   1c1a8:	4b2e      	ldr	r3, [pc, #184]	; (1c264 <update_ccc+0xfc>)
   1c1aa:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1c1ae:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1c1b2:	f842 0f10 	str.w	r0, [r2, #16]!
   1c1b6:	482c      	ldr	r0, [pc, #176]	; (1c268 <update_ccc+0x100>)
   1c1b8:	f00e fa05 	bl	2a5c6 <z_log_msg_static_create.constprop.0>
   1c1bc:	46a5      	mov	sp, r4
}
   1c1be:	2001      	movs	r0, #1
   1c1c0:	3724      	adds	r7, #36	; 0x24
   1c1c2:	46bd      	mov	sp, r7
   1c1c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			sec = BT_SECURITY_L2;
   1c1c8:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   1c1ca:	4620      	mov	r0, r4
			sec = BT_SECURITY_L2;
   1c1cc:	bf0c      	ite	eq
   1c1ce:	f04f 0903 	moveq.w	r9, #3
   1c1d2:	f04f 0902 	movne.w	r9, #2
			    bt_conn_get_security(conn) < sec) {
   1c1d6:	f00d fbc4 	bl	29962 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   1c1da:	4581      	cmp	r9, r0
   1c1dc:	d906      	bls.n	1c1ec <update_ccc+0x84>
				if (data->sec < sec) {
   1c1de:	f898 3004 	ldrb.w	r3, [r8, #4]
   1c1e2:	454b      	cmp	r3, r9
   1c1e4:	d2eb      	bcs.n	1c1be <update_ccc+0x56>
					data->sec = sec;
   1c1e6:	f888 9004 	strb.w	r9, [r8, #4]
   1c1ea:	e7e8      	b.n	1c1be <update_ccc+0x56>
		gatt_ccc_changed(attr, ccc);
   1c1ec:	4631      	mov	r1, r6
   1c1ee:	4628      	mov	r0, r5
   1c1f0:	f00e f937 	bl	2a462 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1c1f4:	4b1d      	ldr	r3, [pc, #116]	; (1c26c <update_ccc+0x104>)
   1c1f6:	429e      	cmp	r6, r3
   1c1f8:	d1e1      	bne.n	1c1be <update_ccc+0x56>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1c1fa:	7a20      	ldrb	r0, [r4, #8]
   1c1fc:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1c200:	f7fe fe3a 	bl	1ae78 <find_sc_cfg>
	if (!cfg) {
   1c204:	2800      	cmp	r0, #0
   1c206:	d0da      	beq.n	1c1be <update_ccc+0x56>
	if (!(cfg->data.start || cfg->data.end)) {
   1c208:	8902      	ldrh	r2, [r0, #8]
   1c20a:	8943      	ldrh	r3, [r0, #10]
   1c20c:	ea52 0103 	orrs.w	r1, r2, r3
   1c210:	d0d5      	beq.n	1c1be <update_ccc+0x56>
	index = bt_conn_index(conn);
   1c212:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1c214:	80ba      	strh	r2, [r7, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1c216:	80fb      	strh	r3, [r7, #6]
	index = bt_conn_index(conn);
   1c218:	f7fd f90a 	bl	19430 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1c21c:	4914      	ldr	r1, [pc, #80]	; (1c270 <update_ccc+0x108>)
   1c21e:	4a15      	ldr	r2, [pc, #84]	; (1c274 <update_ccc+0x10c>)
   1c220:	2318      	movs	r3, #24
   1c222:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1c226:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1c228:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1c22a:	4a13      	ldr	r2, [pc, #76]	; (1c278 <update_ccc+0x110>)
   1c22c:	609a      	str	r2, [r3, #8]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1c22e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   1c232:	1d3a      	adds	r2, r7, #4
   1c234:	611a      	str	r2, [r3, #16]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1c236:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   1c23a:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1c23c:	4620      	mov	r0, r4
	sc_restore_params[index].len = sizeof(sc_range);
   1c23e:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1c240:	f7ff feec 	bl	1c01c <bt_gatt_indicate>
   1c244:	2800      	cmp	r0, #0
   1c246:	d0ba      	beq.n	1c1be <update_ccc+0x56>
		LOG_ERR("SC restore indication failed");
   1c248:	4b0c      	ldr	r3, [pc, #48]	; (1c27c <update_ccc+0x114>)
   1c24a:	61fb      	str	r3, [r7, #28]
   1c24c:	4806      	ldr	r0, [pc, #24]	; (1c268 <update_ccc+0x100>)
   1c24e:	2302      	movs	r3, #2
   1c250:	f107 0218 	add.w	r2, r7, #24
   1c254:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c258:	61bb      	str	r3, [r7, #24]
   1c25a:	f00e f9b4 	bl	2a5c6 <z_log_msg_static_create.constprop.0>
   1c25e:	e7ae      	b.n	1c1be <update_ccc+0x56>
   1c260:	0001b665 	.word	0x0001b665
   1c264:	0002fa04 	.word	0x0002fa04
   1c268:	0002cb1c 	.word	0x0002cb1c
   1c26c:	200006f0 	.word	0x200006f0
   1c270:	20003534 	.word	0x20003534
   1c274:	0002d1c0 	.word	0x0002d1c0
   1c278:	0002a777 	.word	0x0002a777
   1c27c:	0002fa18 	.word	0x0002fa18

0001c280 <gatt_notify>:
{
   1c280:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c284:	4614      	mov	r4, r2
   1c286:	b087      	sub	sp, #28
   1c288:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1c28a:	2294      	movs	r2, #148	; 0x94
   1c28c:	6861      	ldr	r1, [r4, #4]
{
   1c28e:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1c290:	f00e fb06 	bl	2a8a0 <bt_gatt_check_perm>
   1c294:	b170      	cbz	r0, 1c2b4 <gatt_notify+0x34>
		LOG_WRN("Link is not encrypted");
   1c296:	4b2b      	ldr	r3, [pc, #172]	; (1c344 <gatt_notify+0xc4>)
   1c298:	482b      	ldr	r0, [pc, #172]	; (1c348 <gatt_notify+0xc8>)
   1c29a:	9305      	str	r3, [sp, #20]
   1c29c:	aa04      	add	r2, sp, #16
   1c29e:	2302      	movs	r3, #2
   1c2a0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1c2a4:	9304      	str	r3, [sp, #16]
   1c2a6:	f00e f98e 	bl	2a5c6 <z_log_msg_static_create.constprop.0>
		return -EPERM;
   1c2aa:	f04f 30ff 	mov.w	r0, #4294967295
}
   1c2ae:	b007      	add	sp, #28
   1c2b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   1c2b4:	6861      	ldr	r1, [r4, #4]
   1c2b6:	2201      	movs	r2, #1
   1c2b8:	4630      	mov	r0, r6
   1c2ba:	f00e fb2b 	bl	2a914 <bt_gatt_is_subscribed>
   1c2be:	b960      	cbnz	r0, 1c2da <gatt_notify+0x5a>
			LOG_WRN("Device is not subscribed to characteristic");
   1c2c0:	4b22      	ldr	r3, [pc, #136]	; (1c34c <gatt_notify+0xcc>)
   1c2c2:	4821      	ldr	r0, [pc, #132]	; (1c348 <gatt_notify+0xc8>)
   1c2c4:	9305      	str	r3, [sp, #20]
   1c2c6:	aa04      	add	r2, sp, #16
   1c2c8:	2302      	movs	r3, #2
   1c2ca:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1c2ce:	9304      	str	r3, [sp, #16]
   1c2d0:	f00e f979 	bl	2a5c6 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1c2d4:	f06f 0015 	mvn.w	r0, #21
   1c2d8:	e7e9      	b.n	1c2ae <gatt_notify+0x2e>
				sizeof(*nfy) + params->len);
   1c2da:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1c2dc:	211b      	movs	r1, #27
   1c2de:	3202      	adds	r2, #2
   1c2e0:	4630      	mov	r0, r6
   1c2e2:	f7fe f9bb 	bl	1a65c <bt_att_create_pdu>
	if (!buf) {
   1c2e6:	4605      	mov	r5, r0
   1c2e8:	b960      	cbnz	r0, 1c304 <gatt_notify+0x84>
		LOG_WRN("No buffer available to send notification");
   1c2ea:	4b19      	ldr	r3, [pc, #100]	; (1c350 <gatt_notify+0xd0>)
   1c2ec:	4816      	ldr	r0, [pc, #88]	; (1c348 <gatt_notify+0xc8>)
   1c2ee:	9305      	str	r3, [sp, #20]
   1c2f0:	aa04      	add	r2, sp, #16
   1c2f2:	2302      	movs	r3, #2
   1c2f4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1c2f8:	9304      	str	r3, [sp, #16]
   1c2fa:	f00e f964 	bl	2a5c6 <z_log_msg_static_create.constprop.0>
		return -ENOMEM;
   1c2fe:	f06f 000b 	mvn.w	r0, #11
   1c302:	e7d4      	b.n	1c2ae <gatt_notify+0x2e>
   1c304:	f100 090c 	add.w	r9, r0, #12
   1c308:	2102      	movs	r1, #2
   1c30a:	4648      	mov	r0, r9
   1c30c:	f00f f81e 	bl	2b34c <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1c310:	4607      	mov	r7, r0
   1c312:	4648      	mov	r0, r9
   1c314:	f827 8b02 	strh.w	r8, [r7], #2
   1c318:	89a1      	ldrh	r1, [r4, #12]
   1c31a:	f00f f817 	bl	2b34c <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   1c31e:	89a2      	ldrh	r2, [r4, #12]
   1c320:	68a1      	ldr	r1, [r4, #8]
   1c322:	4638      	mov	r0, r7
   1c324:	f00c fe00 	bl	28f28 <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   1c328:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1c32c:	4628      	mov	r0, r5
   1c32e:	2301      	movs	r3, #1
   1c330:	f00e f88d 	bl	2a44e <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   1c334:	4629      	mov	r1, r5
   1c336:	4630      	mov	r0, r6
}
   1c338:	b007      	add	sp, #28
   1c33a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   1c33e:	f00e b815 	b.w	2a36c <bt_att_send>
   1c342:	bf00      	nop
   1c344:	0002f99c 	.word	0x0002f99c
   1c348:	0002cb1c 	.word	0x0002cb1c
   1c34c:	0002f9b2 	.word	0x0002f9b2
   1c350:	0002fa35 	.word	0x0002fa35

0001c354 <bt_gatt_notify_cb>:
{
   1c354:	b530      	push	{r4, r5, lr}
   1c356:	4604      	mov	r4, r0
   1c358:	b08b      	sub	sp, #44	; 0x2c
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1c35a:	4835      	ldr	r0, [pc, #212]	; (1c430 <bt_gatt_notify_cb+0xdc>)
   1c35c:	f00e f92d 	bl	2a5ba <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1c360:	0742      	lsls	r2, r0, #29
{
   1c362:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1c364:	d55d      	bpl.n	1c422 <bt_gatt_notify_cb+0xce>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1c366:	b114      	cbz	r4, 1c36e <bt_gatt_notify_cb+0x1a>
   1c368:	7b63      	ldrb	r3, [r4, #13]
   1c36a:	2b07      	cmp	r3, #7
   1c36c:	d15c      	bne.n	1c428 <bt_gatt_notify_cb+0xd4>
	data.attr = params->attr;
   1c36e:	6868      	ldr	r0, [r5, #4]
   1c370:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1c372:	f7ff fbd1 	bl	1bb18 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1c376:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1c378:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1c37c:	b33a      	cbz	r2, 1c3ce <bt_gatt_notify_cb+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1c37e:	a905      	add	r1, sp, #20
   1c380:	9102      	str	r1, [sp, #8]
   1c382:	492c      	ldr	r1, [pc, #176]	; (1c434 <bt_gatt_notify_cb+0xe0>)
   1c384:	9101      	str	r1, [sp, #4]
   1c386:	2101      	movs	r1, #1
	found->attr = NULL;
   1c388:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1c38a:	9100      	str	r1, [sp, #0]
   1c38c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1c390:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1c392:	f7ff fbf1 	bl	1bb78 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1c396:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1c398:	b91b      	cbnz	r3, 1c3a2 <bt_gatt_notify_cb+0x4e>
			return -ENOENT;
   1c39a:	f06f 0001 	mvn.w	r0, #1
}
   1c39e:	b00b      	add	sp, #44	; 0x2c
   1c3a0:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1c3a2:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1c3a4:	9b05      	ldr	r3, [sp, #20]
   1c3a6:	6818      	ldr	r0, [r3, #0]
   1c3a8:	2300      	movs	r3, #0
   1c3aa:	f88d 3010 	strb.w	r3, [sp, #16]
   1c3ae:	a904      	add	r1, sp, #16
   1c3b0:	f642 0303 	movw	r3, #10243	; 0x2803
   1c3b4:	f8ad 3012 	strh.w	r3, [sp, #18]
   1c3b8:	f00c fe4d 	bl	29056 <bt_uuid_cmp>
   1c3bc:	b970      	cbnz	r0, 1c3dc <bt_gatt_notify_cb+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1c3be:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   1c3c0:	68c3      	ldr	r3, [r0, #12]
   1c3c2:	799b      	ldrb	r3, [r3, #6]
   1c3c4:	06db      	lsls	r3, r3, #27
   1c3c6:	d405      	bmi.n	1c3d4 <bt_gatt_notify_cb+0x80>
			return -EINVAL;
   1c3c8:	f06f 0015 	mvn.w	r0, #21
   1c3cc:	e7e7      	b.n	1c39e <bt_gatt_notify_cb+0x4a>
		if (!data.handle) {
   1c3ce:	2800      	cmp	r0, #0
   1c3d0:	d1e8      	bne.n	1c3a4 <bt_gatt_notify_cb+0x50>
   1c3d2:	e7e2      	b.n	1c39a <bt_gatt_notify_cb+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1c3d4:	f00e fa09 	bl	2a7ea <bt_gatt_attr_value_handle>
   1c3d8:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   1c3dc:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1c3e0:	b12c      	cbz	r4, 1c3ee <bt_gatt_notify_cb+0x9a>
		return gatt_notify(conn, data.handle, params);
   1c3e2:	4601      	mov	r1, r0
   1c3e4:	462a      	mov	r2, r5
   1c3e6:	4620      	mov	r0, r4
   1c3e8:	f7ff ff4a 	bl	1c280 <gatt_notify>
   1c3ec:	e7d7      	b.n	1c39e <bt_gatt_notify_cb+0x4a>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1c3ee:	f642 1202 	movw	r2, #10498	; 0x2902
   1c3f2:	f8ad 2012 	strh.w	r2, [sp, #18]
   1c3f6:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
   1c3f8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1c3fc:	9202      	str	r2, [sp, #8]
   1c3fe:	4a0e      	ldr	r2, [pc, #56]	; (1c438 <bt_gatt_notify_cb+0xe4>)
	data.err = -ENOTCONN;
   1c400:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   1c402:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1c404:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
   1c408:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1c40c:	aa04      	add	r2, sp, #16
   1c40e:	4623      	mov	r3, r4
   1c410:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
   1c414:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1c416:	f88d 4010 	strb.w	r4, [sp, #16]
   1c41a:	f7ff fbad 	bl	1bb78 <bt_gatt_foreach_attr_type>
	return data.err;
   1c41e:	9807      	ldr	r0, [sp, #28]
   1c420:	e7bd      	b.n	1c39e <bt_gatt_notify_cb+0x4a>
		return -EAGAIN;
   1c422:	f06f 000a 	mvn.w	r0, #10
   1c426:	e7ba      	b.n	1c39e <bt_gatt_notify_cb+0x4a>
		return -ENOTCONN;
   1c428:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1c42c:	e7b7      	b.n	1c39e <bt_gatt_notify_cb+0x4a>
   1c42e:	bf00      	nop
   1c430:	20000464 	.word	0x20000464
   1c434:	0002a49d 	.word	0x0002a49d
   1c438:	0001c43d 	.word	0x0001c43d

0001c43c <notify_cb>:
{
   1c43c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c440:	4b44      	ldr	r3, [pc, #272]	; (1c554 <notify_cb+0x118>)
{
   1c442:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c444:	6882      	ldr	r2, [r0, #8]
   1c446:	429a      	cmp	r2, r3
{
   1c448:	b087      	sub	sp, #28
   1c44a:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c44c:	d004      	beq.n	1c458 <notify_cb+0x1c>
		return BT_GATT_ITER_CONTINUE;
   1c44e:	2701      	movs	r7, #1
}
   1c450:	4638      	mov	r0, r7
   1c452:	b007      	add	sp, #28
   1c454:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ccc = attr->user_data;
   1c458:	68c6      	ldr	r6, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1c45a:	4b3f      	ldr	r3, [pc, #252]	; (1c558 <notify_cb+0x11c>)
   1c45c:	429e      	cmp	r6, r3
   1c45e:	d011      	beq.n	1c484 <notify_cb+0x48>
		if (cfg->value != data->type) {
   1c460:	8932      	ldrh	r2, [r6, #8]
   1c462:	89ab      	ldrh	r3, [r5, #12]
   1c464:	429a      	cmp	r2, r3
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1c466:	f106 0101 	add.w	r1, r6, #1
		if (cfg->value != data->type) {
   1c46a:	d1f0      	bne.n	1c44e <notify_cb+0x12>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1c46c:	7830      	ldrb	r0, [r6, #0]
   1c46e:	f7fd f8f7 	bl	19660 <bt_conn_lookup_addr_le>
		if (!conn) {
   1c472:	4604      	mov	r4, r0
   1c474:	2800      	cmp	r0, #0
   1c476:	d0ea      	beq.n	1c44e <notify_cb+0x12>
		if (conn->state != BT_CONN_CONNECTED) {
   1c478:	7b43      	ldrb	r3, [r0, #13]
   1c47a:	2b07      	cmp	r3, #7
   1c47c:	d027      	beq.n	1c4ce <notify_cb+0x92>
			bt_conn_unref(conn);
   1c47e:	f00d f9c2 	bl	29806 <bt_conn_unref>
			continue;
   1c482:	e7e4      	b.n	1c44e <notify_cb+0x12>
   1c484:	4c35      	ldr	r4, [pc, #212]	; (1c55c <notify_cb+0x120>)
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1c486:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 1c560 <notify_cb+0x124>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1c48a:	f04f 0800 	mov.w	r8, #0
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1c48e:	4649      	mov	r1, r9
   1c490:	4620      	mov	r0, r4
   1c492:	f00e f85c 	bl	2a54e <bt_addr_le_eq>
   1c496:	b978      	cbnz	r0, 1c4b8 <notify_cb+0x7c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1c498:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1c49c:	2207      	movs	r2, #7
   1c49e:	4621      	mov	r1, r4
   1c4a0:	f7fd f928 	bl	196f4 <bt_conn_lookup_state_le>
			if (!conn) {
   1c4a4:	b980      	cbnz	r0, 1c4c8 <notify_cb+0x8c>
				sc = (struct sc_data *)data->ind_params->data;
   1c4a6:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   1c4a8:	f814 0c01 	ldrb.w	r0, [r4, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   1c4ac:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1c4ae:	4621      	mov	r1, r4
   1c4b0:	8853      	ldrh	r3, [r2, #2]
   1c4b2:	8812      	ldrh	r2, [r2, #0]
   1c4b4:	f7fe fea2 	bl	1b1fc <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1c4b8:	f108 0801 	add.w	r8, r8, #1
   1c4bc:	f1b8 0f06 	cmp.w	r8, #6
   1c4c0:	f104 040c 	add.w	r4, r4, #12
   1c4c4:	d1e3      	bne.n	1c48e <notify_cb+0x52>
   1c4c6:	e7cb      	b.n	1c460 <notify_cb+0x24>
			bt_conn_unref(conn);
   1c4c8:	f00d f99d 	bl	29806 <bt_conn_unref>
   1c4cc:	e7f4      	b.n	1c4b8 <notify_cb+0x7c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1c4ce:	6973      	ldr	r3, [r6, #20]
   1c4d0:	b123      	cbz	r3, 1c4dc <notify_cb+0xa0>
   1c4d2:	4639      	mov	r1, r7
   1c4d4:	4798      	blx	r3
   1c4d6:	b908      	cbnz	r0, 1c4dc <notify_cb+0xa0>
			bt_conn_unref(conn);
   1c4d8:	4620      	mov	r0, r4
   1c4da:	e7d0      	b.n	1c47e <notify_cb+0x42>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1c4dc:	4639      	mov	r1, r7
   1c4de:	2294      	movs	r2, #148	; 0x94
   1c4e0:	4620      	mov	r0, r4
   1c4e2:	f00e f9dd 	bl	2a8a0 <bt_gatt_check_perm>
   1c4e6:	4607      	mov	r7, r0
   1c4e8:	b150      	cbz	r0, 1c500 <notify_cb+0xc4>
			LOG_WRN("Link is not encrypted");
   1c4ea:	4b1e      	ldr	r3, [pc, #120]	; (1c564 <notify_cb+0x128>)
   1c4ec:	9305      	str	r3, [sp, #20]
   1c4ee:	481e      	ldr	r0, [pc, #120]	; (1c568 <notify_cb+0x12c>)
   1c4f0:	2302      	movs	r3, #2
   1c4f2:	aa04      	add	r2, sp, #16
   1c4f4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1c4f8:	9304      	str	r3, [sp, #16]
   1c4fa:	f00e f864 	bl	2a5c6 <z_log_msg_static_create.constprop.0>
   1c4fe:	e7eb      	b.n	1c4d8 <notify_cb+0x9c>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1c500:	89ab      	ldrh	r3, [r5, #12]
   1c502:	2b02      	cmp	r3, #2
   1c504:	d114      	bne.n	1c530 <notify_cb+0xf4>
   1c506:	8933      	ldrh	r3, [r6, #8]
   1c508:	079a      	lsls	r2, r3, #30
   1c50a:	d405      	bmi.n	1c518 <notify_cb+0xdc>
		bt_conn_unref(conn);
   1c50c:	4620      	mov	r0, r4
   1c50e:	f00d f97a 	bl	29806 <bt_conn_unref>
		data->err = 0;
   1c512:	2300      	movs	r3, #0
   1c514:	60ab      	str	r3, [r5, #8]
   1c516:	e79a      	b.n	1c44e <notify_cb+0x12>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   1c518:	692a      	ldr	r2, [r5, #16]
   1c51a:	88a9      	ldrh	r1, [r5, #4]
   1c51c:	4620      	mov	r0, r4
   1c51e:	f7ff fcf9 	bl	1bf14 <gatt_indicate>
			if (err == 0) {
   1c522:	4606      	mov	r6, r0
   1c524:	b978      	cbnz	r0, 1c546 <notify_cb+0x10a>
				data->ind_params->_ref++;
   1c526:	692a      	ldr	r2, [r5, #16]
   1c528:	7d93      	ldrb	r3, [r2, #22]
   1c52a:	3301      	adds	r3, #1
   1c52c:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1c52e:	e7ed      	b.n	1c50c <notify_cb+0xd0>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1c530:	2b01      	cmp	r3, #1
   1c532:	d1eb      	bne.n	1c50c <notify_cb+0xd0>
   1c534:	8933      	ldrh	r3, [r6, #8]
   1c536:	07db      	lsls	r3, r3, #31
   1c538:	d5e8      	bpl.n	1c50c <notify_cb+0xd0>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1c53a:	692a      	ldr	r2, [r5, #16]
   1c53c:	88a9      	ldrh	r1, [r5, #4]
   1c53e:	4620      	mov	r0, r4
   1c540:	f7ff fe9e 	bl	1c280 <gatt_notify>
   1c544:	4606      	mov	r6, r0
		bt_conn_unref(conn);
   1c546:	4620      	mov	r0, r4
   1c548:	f00d f95d 	bl	29806 <bt_conn_unref>
		if (err < 0) {
   1c54c:	2e00      	cmp	r6, #0
   1c54e:	f6ff af7f 	blt.w	1c450 <notify_cb+0x14>
   1c552:	e7de      	b.n	1c512 <notify_cb+0xd6>
   1c554:	0001b665 	.word	0x0001b665
   1c558:	200006f0 	.word	0x200006f0
   1c55c:	2000451b 	.word	0x2000451b
   1c560:	0002e38f 	.word	0x0002e38f
   1c564:	0002f99c 	.word	0x0002f99c
   1c568:	0002cb1c 	.word	0x0002cb1c

0001c56c <bt_gatt_connected>:
{
   1c56c:	b5b0      	push	{r4, r5, r7, lr}
   1c56e:	b08e      	sub	sp, #56	; 0x38
   1c570:	af02      	add	r7, sp, #8
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1c572:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
   1c576:	4604      	mov	r4, r0
	data.conn = conn;
   1c578:	6078      	str	r0, [r7, #4]
	data.sec = BT_SECURITY_L1;
   1c57a:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1c57c:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   1c57e:	723b      	strb	r3, [r7, #8]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1c580:	4629      	mov	r1, r5
   1c582:	f00c fed6 	bl	29332 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1c586:	b198      	cbz	r0, 1c5b0 <bt_gatt_connected+0x44>
		if (conn->id) {
   1c588:	7a22      	ldrb	r2, [r4, #8]
   1c58a:	b3a2      	cbz	r2, 1c5f6 <bt_gatt_connected+0x8a>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1c58c:	2104      	movs	r1, #4
   1c58e:	4638      	mov	r0, r7
   1c590:	f00a ff73 	bl	2747a <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1c594:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1c596:	4a19      	ldr	r2, [pc, #100]	; (1c5fc <bt_gatt_connected+0x90>)
   1c598:	2124      	movs	r1, #36	; 0x24
   1c59a:	f107 000c 	add.w	r0, r7, #12
   1c59e:	462b      	mov	r3, r5
   1c5a0:	f7f9 fb66 	bl	15c70 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   1c5a4:	f107 020c 	add.w	r2, r7, #12
   1c5a8:	4915      	ldr	r1, [pc, #84]	; (1c600 <bt_gatt_connected+0x94>)
   1c5aa:	4610      	mov	r0, r2
   1c5ac:	f7f8 f86c 	bl	14688 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1c5b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1c5b4:	4a13      	ldr	r2, [pc, #76]	; (1c604 <bt_gatt_connected+0x98>)
   1c5b6:	1d3b      	adds	r3, r7, #4
   1c5b8:	2001      	movs	r0, #1
   1c5ba:	f00e f964 	bl	2a886 <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
   1c5be:	4620      	mov	r0, r4
   1c5c0:	f00d f9cf 	bl	29962 <bt_conn_get_security>
   1c5c4:	7a39      	ldrb	r1, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1c5c6:	4288      	cmp	r0, r1
   1c5c8:	d212      	bcs.n	1c5f0 <bt_gatt_connected+0x84>
		int err = bt_conn_set_security(conn, data.sec);
   1c5ca:	4620      	mov	r0, r4
   1c5cc:	f00d f999 	bl	29902 <bt_conn_set_security>
		if (err) {
   1c5d0:	b170      	cbz	r0, 1c5f0 <bt_gatt_connected+0x84>
			LOG_WRN("Failed to set security for bonded peer (%d)", err);
   1c5d2:	466c      	mov	r4, sp
   1c5d4:	b088      	sub	sp, #32
   1c5d6:	aa02      	add	r2, sp, #8
   1c5d8:	4b0b      	ldr	r3, [pc, #44]	; (1c608 <bt_gatt_connected+0x9c>)
   1c5da:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1c5de:	2303      	movs	r3, #3
   1c5e0:	f842 3f10 	str.w	r3, [r2, #16]!
   1c5e4:	4809      	ldr	r0, [pc, #36]	; (1c60c <bt_gatt_connected+0xa0>)
   1c5e6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1c5ea:	f00d ffec 	bl	2a5c6 <z_log_msg_static_create.constprop.0>
   1c5ee:	46a5      	mov	sp, r4
}
   1c5f0:	3730      	adds	r7, #48	; 0x30
   1c5f2:	46bd      	mov	sp, r7
   1c5f4:	bdb0      	pop	{r4, r5, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1c5f6:	9200      	str	r2, [sp, #0]
   1c5f8:	e7cd      	b.n	1c596 <bt_gatt_connected+0x2a>
   1c5fa:	bf00      	nop
   1c5fc:	0002f998 	.word	0x0002f998
   1c600:	0001bdc5 	.word	0x0001bdc5
   1c604:	0001c169 	.word	0x0001c169
   1c608:	0002fa5e 	.word	0x0002fa5e
   1c60c:	0002cb1c 	.word	0x0002cb1c

0001c610 <bt_gatt_att_max_mtu_changed>:
{
   1c610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   1c612:	4b08      	ldr	r3, [pc, #32]	; (1c634 <bt_gatt_att_max_mtu_changed+0x24>)
   1c614:	681c      	ldr	r4, [r3, #0]
   1c616:	4605      	mov	r5, r0
   1c618:	460e      	mov	r6, r1
   1c61a:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1c61c:	b14c      	cbz	r4, 1c632 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   1c61e:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1c622:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   1c624:	b11b      	cbz	r3, 1c62e <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   1c626:	463a      	mov	r2, r7
   1c628:	4631      	mov	r1, r6
   1c62a:	4628      	mov	r0, r5
   1c62c:	4798      	blx	r3
	return node->next;
   1c62e:	6864      	ldr	r4, [r4, #4]
   1c630:	e7f4      	b.n	1c61c <bt_gatt_att_max_mtu_changed+0xc>
}
   1c632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c634:	200035b0 	.word	0x200035b0

0001c638 <bt_gatt_encrypt_change>:
{
   1c638:	b513      	push	{r0, r1, r4, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1c63a:	4a0a      	ldr	r2, [pc, #40]	; (1c664 <bt_gatt_encrypt_change+0x2c>)
	data.conn = conn;
   1c63c:	9000      	str	r0, [sp, #0]
{
   1c63e:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1c640:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   1c644:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1c646:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   1c648:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1c64c:	f00e f91b 	bl	2a886 <bt_gatt_foreach_attr>
	if (!bt_gatt_change_aware(conn, false)) {
   1c650:	2100      	movs	r1, #0
   1c652:	4620      	mov	r0, r4
   1c654:	f00e f9e2 	bl	2aa1c <bt_gatt_change_aware>
   1c658:	b908      	cbnz	r0, 1c65e <bt_gatt_encrypt_change+0x26>
		sc_indicate(0x0001, 0xffff);
   1c65a:	f7ff f871 	bl	1b740 <sc_indicate.constprop.0>
}
   1c65e:	b002      	add	sp, #8
   1c660:	bd10      	pop	{r4, pc}
   1c662:	bf00      	nop
   1c664:	0001c169 	.word	0x0001c169

0001c668 <bt_gatt_store_ccc>:
{
   1c668:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c66a:	b0c1      	sub	sp, #260	; 0x104
   1c66c:	af02      	add	r7, sp, #8
	save.count = 0;
   1c66e:	2300      	movs	r3, #0
{
   1c670:	4604      	mov	r4, r0
   1c672:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   1c674:	62f9      	str	r1, [r7, #44]	; 0x2c
	save.addr_with_id.id = id;
   1c676:	f887 0030 	strb.w	r0, [r7, #48]	; 0x30
	save.count = 0;
   1c67a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   1c67e:	4a1d      	ldr	r2, [pc, #116]	; (1c6f4 <bt_gatt_store_ccc+0x8c>)
   1c680:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1c684:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1c688:	2001      	movs	r0, #1
   1c68a:	f00e f8fc 	bl	2a886 <bt_gatt_foreach_attr>
	if (id) {
   1c68e:	b364      	cbz	r4, 1c6ea <bt_gatt_store_ccc+0x82>
		u8_to_dec(id_str, sizeof(id_str), id);
   1c690:	1d3e      	adds	r6, r7, #4
   1c692:	4622      	mov	r2, r4
   1c694:	2104      	movs	r1, #4
   1c696:	4630      	mov	r0, r6
   1c698:	f00a feef 	bl	2747a <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   1c69c:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1c69e:	4a16      	ldr	r2, [pc, #88]	; (1c6f8 <bt_gatt_store_ccc+0x90>)
   1c6a0:	462b      	mov	r3, r5
   1c6a2:	2124      	movs	r1, #36	; 0x24
   1c6a4:	f107 0008 	add.w	r0, r7, #8
   1c6a8:	f7f9 fae2 	bl	15c70 <bt_settings_encode_key>
	if (save.count) {
   1c6ac:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
   1c6b0:	b1ea      	cbz	r2, 1c6ee <bt_gatt_store_ccc+0x86>
		len = save.count * sizeof(*save.store);
   1c6b2:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   1c6b4:	f107 0134 	add.w	r1, r7, #52	; 0x34
	err = settings_save_one(key, str, len);
   1c6b8:	f107 0008 	add.w	r0, r7, #8
   1c6bc:	f7f7 ff84 	bl	145c8 <settings_save_one>
	if (err) {
   1c6c0:	4604      	mov	r4, r0
   1c6c2:	b170      	cbz	r0, 1c6e2 <bt_gatt_store_ccc+0x7a>
		LOG_ERR("Failed to store CCCs (err %d)", err);
   1c6c4:	466d      	mov	r5, sp
   1c6c6:	b088      	sub	sp, #32
   1c6c8:	aa02      	add	r2, sp, #8
   1c6ca:	4b0c      	ldr	r3, [pc, #48]	; (1c6fc <bt_gatt_store_ccc+0x94>)
   1c6cc:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1c6d0:	2303      	movs	r3, #3
   1c6d2:	f842 3f10 	str.w	r3, [r2, #16]!
   1c6d6:	480a      	ldr	r0, [pc, #40]	; (1c700 <bt_gatt_store_ccc+0x98>)
   1c6d8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c6dc:	f00d ff73 	bl	2a5c6 <z_log_msg_static_create.constprop.0>
   1c6e0:	46ad      	mov	sp, r5
}
   1c6e2:	4620      	mov	r0, r4
   1c6e4:	37fc      	adds	r7, #252	; 0xfc
   1c6e6:	46bd      	mov	sp, r7
   1c6e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1c6ea:	9400      	str	r4, [sp, #0]
   1c6ec:	e7d7      	b.n	1c69e <bt_gatt_store_ccc+0x36>
		str = NULL;
   1c6ee:	4611      	mov	r1, r2
   1c6f0:	e7e2      	b.n	1c6b8 <bt_gatt_store_ccc+0x50>
   1c6f2:	bf00      	nop
   1c6f4:	0001b365 	.word	0x0001b365
   1c6f8:	0002f998 	.word	0x0002f998
   1c6fc:	0002fa8a 	.word	0x0002fa8a
   1c700:	0002cb1c 	.word	0x0002cb1c

0001c704 <bt_gatt_identity_resolved>:
{
   1c704:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	bool is_bonded = bt_addr_le_is_bonded(conn->id, &conn->le.dst);
   1c708:	f100 0888 	add.w	r8, r0, #136	; 0x88
	struct addr_match user_data = {
   1c70c:	e9cd 1200 	strd	r1, r2, [sp]
{
   1c710:	4604      	mov	r4, r0
   1c712:	460f      	mov	r7, r1
	bool is_bonded = bt_addr_le_is_bonded(conn->id, &conn->le.dst);
   1c714:	7a00      	ldrb	r0, [r0, #8]
   1c716:	4641      	mov	r1, r8
{
   1c718:	4616      	mov	r6, r2
	bool is_bonded = bt_addr_le_is_bonded(conn->id, &conn->le.dst);
   1c71a:	f00c fe0a 	bl	29332 <bt_addr_le_is_bonded>
	bt_gatt_foreach_attr(0x0001, 0xffff, convert_to_id_on_match, &user_data);
   1c71e:	4a0f      	ldr	r2, [pc, #60]	; (1c75c <bt_gatt_identity_resolved+0x58>)
	bool is_bonded = bt_addr_le_is_bonded(conn->id, &conn->le.dst);
   1c720:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, convert_to_id_on_match, &user_data);
   1c722:	466b      	mov	r3, sp
   1c724:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1c728:	2001      	movs	r0, #1
   1c72a:	f00e f8ac 	bl	2a886 <bt_gatt_foreach_attr>
	if (is_bonded) {
   1c72e:	b11d      	cbz	r5, 1c738 <bt_gatt_identity_resolved+0x34>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   1c730:	7a20      	ldrb	r0, [r4, #8]
   1c732:	4641      	mov	r1, r8
   1c734:	f7ff ff98 	bl	1c668 <bt_gatt_store_ccc>
	struct gatt_cf_cfg *cfg = find_cf_cfg_by_addr(conn->id, private_addr);
   1c738:	7a20      	ldrb	r0, [r4, #8]
   1c73a:	4639      	mov	r1, r7
   1c73c:	f7fe fb62 	bl	1ae04 <find_cf_cfg_by_addr>
	if (cfg) {
   1c740:	b140      	cbz	r0, 1c754 <bt_gatt_identity_resolved+0x50>
		bt_addr_le_copy(&cfg->peer, id_addr);
   1c742:	4631      	mov	r1, r6
   1c744:	3001      	adds	r0, #1
   1c746:	f00d ff35 	bl	2a5b4 <bt_addr_le_copy>
		if (is_bonded) {
   1c74a:	b11d      	cbz	r5, 1c754 <bt_gatt_identity_resolved+0x50>
			bt_gatt_store_cf(conn->id, &conn->le.dst);
   1c74c:	7a20      	ldrb	r0, [r4, #8]
   1c74e:	4641      	mov	r1, r8
   1c750:	f7fe fec6 	bl	1b4e0 <bt_gatt_store_cf.isra.0>
}
   1c754:	b002      	add	sp, #8
   1c756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c75a:	bf00      	nop
   1c75c:	0001b339 	.word	0x0001b339

0001c760 <bt_gatt_clear>:
		gatt_sub_remove(NULL, sub, prev, params);
	}
}

int bt_gatt_clear(uint8_t id, const bt_addr_le_t *addr)
{
   1c760:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c762:	b08f      	sub	sp, #60	; 0x3c
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
   1c764:	ae03      	add	r6, sp, #12
{
   1c766:	4604      	mov	r4, r0
   1c768:	460d      	mov	r5, r1
	struct addr_with_id addr_with_id = {
   1c76a:	9103      	str	r1, [sp, #12]
   1c76c:	f88d 0010 	strb.w	r0, [sp, #16]
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
   1c770:	4a1f      	ldr	r2, [pc, #124]	; (1c7f0 <bt_gatt_clear+0x90>)
   1c772:	4633      	mov	r3, r6
   1c774:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1c778:	2001      	movs	r0, #1
   1c77a:	f00e f884 	bl	2a886 <bt_gatt_foreach_attr>
		if (id) {
   1c77e:	b394      	cbz	r4, 1c7e6 <bt_gatt_clear+0x86>
			u8_to_dec(id_str, sizeof(id_str), id);
   1c780:	af02      	add	r7, sp, #8
   1c782:	4622      	mov	r2, r4
   1c784:	2104      	movs	r1, #4
   1c786:	4638      	mov	r0, r7
   1c788:	f00a fe77 	bl	2747a <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1c78c:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1c78e:	4a19      	ldr	r2, [pc, #100]	; (1c7f4 <bt_gatt_clear+0x94>)
   1c790:	462b      	mov	r3, r5
   1c792:	2124      	movs	r1, #36	; 0x24
   1c794:	a805      	add	r0, sp, #20
   1c796:	f7f9 fa6b 	bl	15c70 <bt_settings_encode_key>
		return settings_delete(key);
   1c79a:	a805      	add	r0, sp, #20
   1c79c:	f00b ffb5 	bl	2870a <settings_delete>
	int err;

	err = bt_gatt_clear_ccc(id, addr);
	if (err < 0) {
   1c7a0:	2800      	cmp	r0, #0
   1c7a2:	db1e      	blt.n	1c7e2 <bt_gatt_clear+0x82>
		return err;
	}

	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
		err = bt_gatt_clear_sc(id, addr);
   1c7a4:	4629      	mov	r1, r5
   1c7a6:	4620      	mov	r0, r4
   1c7a8:	f7fe fe32 	bl	1b410 <bt_gatt_clear_sc>
		if (err < 0) {
   1c7ac:	2800      	cmp	r0, #0
   1c7ae:	db18      	blt.n	1c7e2 <bt_gatt_clear+0x82>
	cfg = find_cf_cfg_by_addr(id, addr);
   1c7b0:	4629      	mov	r1, r5
   1c7b2:	4620      	mov	r0, r4
   1c7b4:	f7fe fb26 	bl	1ae04 <find_cf_cfg_by_addr>
	if (cfg) {
   1c7b8:	b108      	cbz	r0, 1c7be <bt_gatt_clear+0x5e>
		clear_cf_cfg(cfg);
   1c7ba:	f7fe fe0d 	bl	1b3d8 <clear_cf_cfg>
		if (id) {
   1c7be:	b1a4      	cbz	r4, 1c7ea <bt_gatt_clear+0x8a>
			u8_to_dec(id_str, sizeof(id_str), id);
   1c7c0:	4622      	mov	r2, r4
   1c7c2:	2104      	movs	r1, #4
   1c7c4:	4630      	mov	r0, r6
   1c7c6:	f00a fe58 	bl	2747a <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1c7ca:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "cf",
   1c7cc:	4a0a      	ldr	r2, [pc, #40]	; (1c7f8 <bt_gatt_clear+0x98>)
   1c7ce:	462b      	mov	r3, r5
   1c7d0:	2124      	movs	r1, #36	; 0x24
   1c7d2:	a805      	add	r0, sp, #20
   1c7d4:	f7f9 fa4c 	bl	15c70 <bt_settings_encode_key>
		return settings_delete(key);
   1c7d8:	a805      	add	r0, sp, #20
   1c7da:	f00b ff96 	bl	2870a <settings_delete>
		}
	}

	if (IS_ENABLED(CONFIG_BT_GATT_CACHING)) {
		err = bt_gatt_clear_cf(id, addr);
		if (err < 0) {
   1c7de:	ea00 70e0 	and.w	r0, r0, r0, asr #31
	if (IS_ENABLED(CONFIG_BT_GATT_CLIENT)) {
		bt_gatt_clear_subscriptions(id, addr);
	}

	return 0;
}
   1c7e2:	b00f      	add	sp, #60	; 0x3c
   1c7e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1c7e6:	9400      	str	r4, [sp, #0]
   1c7e8:	e7d1      	b.n	1c78e <bt_gatt_clear+0x2e>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1c7ea:	9400      	str	r4, [sp, #0]
   1c7ec:	e7ee      	b.n	1c7cc <bt_gatt_clear+0x6c>
   1c7ee:	bf00      	nop
   1c7f0:	0001b311 	.word	0x0001b311
   1c7f4:	0002f998 	.word	0x0002f998
   1c7f8:	0002fada 	.word	0x0002fada

0001c7fc <bt_gatt_disconnected>:

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1c7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c7fe:	4604      	mov	r4, r0
   1c800:	b083      	sub	sp, #12
	LOG_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1c802:	4603      	mov	r3, r0
{
   1c804:	af00      	add	r7, sp, #0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1c806:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1c80a:	2001      	movs	r0, #1
   1c80c:	4a21      	ldr	r2, [pc, #132]	; (1c894 <bt_gatt_disconnected+0x98>)
	/* Clear pending notifications */
	cleanup_notify(conn);
#endif /* CONFIG_BT_GATT_NOTIFY_MULTIPLE */

#if defined(CONFIG_BT_SETTINGS_DELAYED_STORE)
	if (gatt_delayed_store_find(conn->id, &conn->le.dst)) {
   1c80e:	f104 0688 	add.w	r6, r4, #136	; 0x88
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1c812:	f00e f838 	bl	2a886 <bt_gatt_foreach_attr>
	if (gatt_delayed_store_find(conn->id, &conn->le.dst)) {
   1c816:	7a20      	ldrb	r0, [r4, #8]
   1c818:	4631      	mov	r1, r6
   1c81a:	f7fe fb0f 	bl	1ae3c <gatt_delayed_store_find>
   1c81e:	b1a8      	cbz	r0, 1c84c <bt_gatt_disconnected+0x50>
		int err = k_work_reschedule(&gatt_delayed_store.work, K_NO_WAIT);
   1c820:	481d      	ldr	r0, [pc, #116]	; (1c898 <bt_gatt_disconnected+0x9c>)
   1c822:	2200      	movs	r2, #0
   1c824:	2300      	movs	r3, #0
   1c826:	f006 ffaf 	bl	23788 <k_work_reschedule>

		if (err < 0) {
   1c82a:	2800      	cmp	r0, #0
   1c82c:	da0e      	bge.n	1c84c <bt_gatt_disconnected+0x50>
			LOG_ERR("Unable to reschedule settings storage (err %d)",
   1c82e:	466d      	mov	r5, sp
   1c830:	b088      	sub	sp, #32
   1c832:	466a      	mov	r2, sp
   1c834:	4b19      	ldr	r3, [pc, #100]	; (1c89c <bt_gatt_disconnected+0xa0>)
   1c836:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1c83a:	2303      	movs	r3, #3
   1c83c:	f842 3f10 	str.w	r3, [r2, #16]!
   1c840:	4817      	ldr	r0, [pc, #92]	; (1c8a0 <bt_gatt_disconnected+0xa4>)
   1c842:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c846:	f00d febe 	bl	2a5c6 <z_log_msg_static_create.constprop.0>
   1c84a:	46ad      	mov	sp, r5
	}
#endif	/* CONFIG_BT_SETTINGS_DELAYED_STORE */

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1c84c:	7a20      	ldrb	r0, [r4, #8]
   1c84e:	4631      	mov	r1, r6
   1c850:	f00c fd6f 	bl	29332 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1c854:	b148      	cbz	r0, 1c86a <bt_gatt_disconnected+0x6e>
		struct addr_with_id addr_with_id = {
   1c856:	7a23      	ldrb	r3, [r4, #8]
   1c858:	713b      	strb	r3, [r7, #4]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1c85a:	4a12      	ldr	r2, [pc, #72]	; (1c8a4 <bt_gatt_disconnected+0xa8>)
		struct addr_with_id addr_with_id = {
   1c85c:	603e      	str	r6, [r7, #0]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1c85e:	463b      	mov	r3, r7
   1c860:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1c864:	2001      	movs	r0, #1
   1c866:	f00e f80e 	bl	2a886 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   1c86a:	4620      	mov	r0, r4
   1c86c:	f7fe fb66 	bl	1af3c <find_cf_cfg>
	if (!cfg) {
   1c870:	4605      	mov	r5, r0
   1c872:	b138      	cbz	r0, 1c884 <bt_gatt_disconnected+0x88>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1c874:	7a20      	ldrb	r0, [r4, #8]
   1c876:	4631      	mov	r1, r6
   1c878:	f00c fd5b 	bl	29332 <bt_addr_le_is_bonded>
   1c87c:	b928      	cbnz	r0, 1c88a <bt_gatt_disconnected+0x8e>
		clear_cf_cfg(cfg);
   1c87e:	4628      	mov	r0, r5
   1c880:	f7fe fdaa 	bl	1b3d8 <clear_cf_cfg>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1c884:	370c      	adds	r7, #12
   1c886:	46bd      	mov	sp, r7
   1c888:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1c88a:	4631      	mov	r1, r6
   1c88c:	1c68      	adds	r0, r5, #1
   1c88e:	f00d fe91 	bl	2a5b4 <bt_addr_le_copy>
}
   1c892:	e7f7      	b.n	1c884 <bt_gatt_disconnected+0x88>
   1c894:	0001b5c5 	.word	0x0001b5c5
   1c898:	200020b8 	.word	0x200020b8
   1c89c:	0002faa8 	.word	0x0002faa8
   1c8a0:	0002cb1c 	.word	0x0002cb1c
   1c8a4:	0001b311 	.word	0x0001b311

0001c8a8 <smp_find>:

	return 0;
}

static struct bt_smp *smp_find(int flag)
{
   1c8a8:	b508      	push	{r3, lr}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1c8aa:	4b05      	ldr	r3, [pc, #20]	; (1c8c0 <smp_find+0x18>)
{
   1c8ac:	4601      	mov	r1, r0
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1c8ae:	4618      	mov	r0, r3
   1c8b0:	f00e f93e 	bl	2ab30 <atomic_test_bit>
			return &bt_smp_pool[i];
		}
	}

	return NULL;
   1c8b4:	3b04      	subs	r3, #4
   1c8b6:	2800      	cmp	r0, #0
}
   1c8b8:	bf14      	ite	ne
   1c8ba:	4618      	movne	r0, r3
   1c8bc:	2000      	moveq	r0, #0
   1c8be:	bd08      	pop	{r3, pc}
   1c8c0:	200021bc 	.word	0x200021bc

0001c8c4 <latch_auth_cb>:
{
   1c8c4:	b510      	push	{r4, lr}
	atomic_ptr_cas(&smp->auth_cb, BT_SMP_AUTH_CB_UNINITIALIZED, (atomic_ptr_val_t)bt_auth);
   1c8c6:	4a0c      	ldr	r2, [pc, #48]	; (1c8f8 <latch_auth_cb+0x34>)
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1c8c8:	6811      	ldr	r1, [r2, #0]
   1c8ca:	4a0c      	ldr	r2, [pc, #48]	; (1c8fc <latch_auth_cb+0x38>)
   1c8cc:	f3bf 8f5b 	dmb	ish
   1c8d0:	f500 73a8 	add.w	r3, r0, #336	; 0x150
   1c8d4:	e853 4f00 	ldrex	r4, [r3]
   1c8d8:	4294      	cmp	r4, r2
   1c8da:	d104      	bne.n	1c8e6 <latch_auth_cb+0x22>
   1c8dc:	e843 1c00 	strex	ip, r1, [r3]
   1c8e0:	f1bc 0f00 	cmp.w	ip, #0
   1c8e4:	d1f6      	bne.n	1c8d4 <latch_auth_cb+0x10>
   1c8e6:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c8ea:	f3bf 8f5b 	dmb	ish
   1c8ee:	f8d0 0150 	ldr.w	r0, [r0, #336]	; 0x150
   1c8f2:	f3bf 8f5b 	dmb	ish
}
   1c8f6:	bd10      	pop	{r4, pc}
   1c8f8:	200034a4 	.word	0x200034a4
   1c8fc:	200021b8 	.word	0x200021b8

0001c900 <get_io_capa>:
{
   1c900:	b508      	push	{r3, lr}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1c902:	f7ff ffdf 	bl	1c8c4 <latch_auth_cb>
	if (!smp_auth_cb) {
   1c906:	4603      	mov	r3, r0
   1c908:	b1c8      	cbz	r0, 1c93e <get_io_capa+0x3e>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1c90a:	e9d0 1200 	ldrd	r1, r2, [r0]
   1c90e:	b921      	cbnz	r1, 1c91a <get_io_capa+0x1a>
			return BT_SMP_IO_KEYBOARD_ONLY;
   1c910:	2a00      	cmp	r2, #0
   1c912:	bf0c      	ite	eq
   1c914:	2003      	moveq	r0, #3
   1c916:	2002      	movne	r0, #2
   1c918:	e010      	b.n	1c93c <get_io_capa+0x3c>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1c91a:	b132      	cbz	r2, 1c92a <get_io_capa+0x2a>
   1c91c:	6883      	ldr	r3, [r0, #8]
   1c91e:	b913      	cbnz	r3, 1c926 <get_io_capa+0x26>
	    (smp_auth_cb->passkey_confirm || !sc_supported)) {
   1c920:	4b09      	ldr	r3, [pc, #36]	; (1c948 <get_io_capa+0x48>)
   1c922:	781b      	ldrb	r3, [r3, #0]
   1c924:	b933      	cbnz	r3, 1c934 <get_io_capa+0x34>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   1c926:	2004      	movs	r0, #4
   1c928:	e008      	b.n	1c93c <get_io_capa+0x3c>
	if (sc_supported && smp_auth_cb->passkey_display &&
   1c92a:	4907      	ldr	r1, [pc, #28]	; (1c948 <get_io_capa+0x48>)
   1c92c:	7808      	ldrb	r0, [r1, #0]
   1c92e:	b128      	cbz	r0, 1c93c <get_io_capa+0x3c>
   1c930:	689b      	ldr	r3, [r3, #8]
   1c932:	b933      	cbnz	r3, 1c942 <get_io_capa+0x42>
	if (smp_auth_cb->passkey_entry) {
   1c934:	3a00      	subs	r2, #0
   1c936:	bf18      	it	ne
   1c938:	2201      	movne	r2, #1
   1c93a:	0050      	lsls	r0, r2, #1
}
   1c93c:	bd08      	pop	{r3, pc}
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   1c93e:	2003      	movs	r0, #3
   1c940:	e7fc      	b.n	1c93c <get_io_capa+0x3c>
		return BT_SMP_IO_DISPLAY_YESNO;
   1c942:	2001      	movs	r0, #1
   1c944:	e7fa      	b.n	1c93c <get_io_capa+0x3c>
   1c946:	bf00      	nop
   1c948:	20004660 	.word	0x20004660

0001c94c <get_auth>:
{
   1c94c:	b510      	push	{r4, lr}
	if (sc_supported) {
   1c94e:	4b0c      	ldr	r3, [pc, #48]	; (1c980 <get_auth+0x34>)
   1c950:	781b      	ldrb	r3, [r3, #0]
   1c952:	b17b      	cbz	r3, 1c974 <get_auth+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   1c954:	f001 040f 	and.w	r4, r1, #15
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1c958:	f7ff ffd2 	bl	1c900 <get_io_capa>
	if (bondable) {
   1c95c:	4b09      	ldr	r3, [pc, #36]	; (1c984 <get_auth+0x38>)
   1c95e:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1c960:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
   1c962:	bf0c      	ite	eq
   1c964:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   1c968:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   1c96c:	b12b      	cbz	r3, 1c97a <get_auth+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   1c96e:	f044 0001 	orr.w	r0, r4, #1
}
   1c972:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   1c974:	f001 0407 	and.w	r4, r1, #7
   1c978:	e7ee      	b.n	1c958 <get_auth+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   1c97a:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   1c97e:	e7f8      	b.n	1c972 <get_auth+0x26>
   1c980:	20004660 	.word	0x20004660
   1c984:	2000097e 	.word	0x2000097e

0001c988 <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   1c988:	b530      	push	{r4, r5, lr}
   1c98a:	b089      	sub	sp, #36	; 0x24
   1c98c:	4613      	mov	r3, r2
	int err = bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
   1c98e:	2200      	movs	r2, #0
   1c990:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   1c992:	4604      	mov	r4, r0
   1c994:	460d      	mov	r5, r1
	int err = bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
   1c996:	460a      	mov	r2, r1
   1c998:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   1c99c:	2106      	movs	r1, #6
   1c99e:	f00d f899 	bl	29ad4 <bt_l2cap_send_cb>
	if (err) {
   1c9a2:	b188      	cbz	r0, 1c9c8 <smp_send.constprop.0+0x40>
		if (err == -ENOBUFS) {
   1c9a4:	3069      	adds	r0, #105	; 0x69
   1c9a6:	d109      	bne.n	1c9bc <smp_send.constprop.0+0x34>
			LOG_ERR("Ran out of TX buffers or contexts.");
   1c9a8:	4b0c      	ldr	r3, [pc, #48]	; (1c9dc <smp_send.constprop.0+0x54>)
   1c9aa:	9307      	str	r3, [sp, #28]
   1c9ac:	480c      	ldr	r0, [pc, #48]	; (1c9e0 <smp_send.constprop.0+0x58>)
   1c9ae:	2302      	movs	r3, #2
   1c9b0:	aa06      	add	r2, sp, #24
   1c9b2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c9b6:	9306      	str	r3, [sp, #24]
   1c9b8:	f00e f8f5 	bl	2aba6 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   1c9bc:	4628      	mov	r0, r5
}
   1c9be:	b009      	add	sp, #36	; 0x24
   1c9c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   1c9c4:	f002 b870 	b.w	1eaa8 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   1c9c8:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1c9cc:	2300      	movs	r3, #0
   1c9ce:	f504 7090 	add.w	r0, r4, #288	; 0x120
}
   1c9d2:	b009      	add	sp, #36	; 0x24
   1c9d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   1c9d8:	f006 bed6 	b.w	23788 <k_work_reschedule>
   1c9dc:	0002f55d 	.word	0x0002f55d
   1c9e0:	0002cb6c 	.word	0x0002cb6c

0001c9e4 <bt_smp_pkey_ready.part.0>:
	}

	return 0;
}

static void bt_smp_pkey_ready(const uint8_t *pkey)
   1c9e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_DBG("");

	sc_public_key = pkey;

	if (!pkey) {
		LOG_WRN("Public key not available");
   1c9e6:	4b06      	ldr	r3, [pc, #24]	; (1ca00 <bt_smp_pkey_ready.part.0+0x1c>)
   1c9e8:	9305      	str	r3, [sp, #20]
   1c9ea:	4806      	ldr	r0, [pc, #24]	; (1ca04 <bt_smp_pkey_ready.part.0+0x20>)
   1c9ec:	2302      	movs	r3, #2
   1c9ee:	aa04      	add	r2, sp, #16
   1c9f0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1c9f4:	9304      	str	r3, [sp, #16]
   1c9f6:	f00e f8d6 	bl	2aba6 <z_log_msg_static_create.constprop.0>
		if (err) {
			smp_error(smp, err);
		}
#endif /* CONFIG_BT_PERIPHERAL */
	}
}
   1c9fa:	b007      	add	sp, #28
   1c9fc:	f85d fb04 	ldr.w	pc, [sp], #4
   1ca00:	0002faeb 	.word	0x0002faeb
   1ca04:	0002cb6c 	.word	0x0002cb6c

0001ca08 <bt_smp_accept.part.0>:
	} else {
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   1ca08:	b580      	push	{r7, lr}
   1ca0a:	af00      	add	r7, sp, #0
		*chan = &smp->chan.chan;

		return 0;
	}

	LOG_ERR("No available SMP context for conn %p", conn);
   1ca0c:	b088      	sub	sp, #32
   1ca0e:	466a      	mov	r2, sp
   1ca10:	4b07      	ldr	r3, [pc, #28]	; (1ca30 <bt_smp_accept.part.0+0x28>)
   1ca12:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1ca16:	2303      	movs	r3, #3
   1ca18:	f842 3f10 	str.w	r3, [r2, #16]!
   1ca1c:	4805      	ldr	r0, [pc, #20]	; (1ca34 <bt_smp_accept.part.0+0x2c>)
   1ca1e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ca22:	f00e f8c0 	bl	2aba6 <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   1ca26:	f06f 000b 	mvn.w	r0, #11
   1ca2a:	46bd      	mov	sp, r7
   1ca2c:	bd80      	pop	{r7, pc}
   1ca2e:	bf00      	nop
   1ca30:	0002fb04 	.word	0x0002fb04
   1ca34:	0002cb6c 	.word	0x0002cb6c

0001ca38 <bt_smp_accept>:
		if (smp->chan.chan.conn) {
   1ca38:	4b06      	ldr	r3, [pc, #24]	; (1ca54 <bt_smp_accept+0x1c>)
   1ca3a:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
   1ca3e:	b10a      	cbz	r2, 1ca44 <bt_smp_accept+0xc>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1ca40:	f7ff bfe2 	b.w	1ca08 <bt_smp_accept.part.0>
		smp->chan.chan.ops = &ops;
   1ca44:	4804      	ldr	r0, [pc, #16]	; (1ca58 <bt_smp_accept+0x20>)
   1ca46:	f8c3 00f0 	str.w	r0, [r3, #240]	; 0xf0
		*chan = &smp->chan.chan;
   1ca4a:	33ec      	adds	r3, #236	; 0xec
   1ca4c:	600b      	str	r3, [r1, #0]
}
   1ca4e:	4610      	mov	r0, r2
   1ca50:	4770      	bx	lr
   1ca52:	bf00      	nop
   1ca54:	200021b8 	.word	0x200021b8
   1ca58:	0002d2c4 	.word	0x0002d2c4

0001ca5c <smp_chan_get.part.0>:
static struct bt_smp *smp_chan_get(struct bt_conn *conn)
   1ca5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_ERR("Unable to find SMP channel");
   1ca5e:	4b07      	ldr	r3, [pc, #28]	; (1ca7c <smp_chan_get.part.0+0x20>)
   1ca60:	9305      	str	r3, [sp, #20]
   1ca62:	4807      	ldr	r0, [pc, #28]	; (1ca80 <smp_chan_get.part.0+0x24>)
   1ca64:	2302      	movs	r3, #2
   1ca66:	aa04      	add	r2, sp, #16
   1ca68:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ca6c:	9304      	str	r3, [sp, #16]
   1ca6e:	f00e f89a 	bl	2aba6 <z_log_msg_static_create.constprop.0>
}
   1ca72:	2000      	movs	r0, #0
   1ca74:	b007      	add	sp, #28
   1ca76:	f85d fb04 	ldr.w	pc, [sp], #4
   1ca7a:	bf00      	nop
   1ca7c:	0002fb29 	.word	0x0002fb29
   1ca80:	0002cb6c 	.word	0x0002cb6c

0001ca84 <smp_init>:
{
   1ca84:	b538      	push	{r3, r4, r5, lr}
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   1ca86:	22ec      	movs	r2, #236	; 0xec
{
   1ca88:	4605      	mov	r5, r0
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   1ca8a:	2100      	movs	r1, #0
   1ca8c:	f00c fa57 	bl	28f3e <memset>
	if (bt_rand(smp->prnd, 16)) {
   1ca90:	2110      	movs	r1, #16
   1ca92:	f105 0027 	add.w	r0, r5, #39	; 0x27
   1ca96:	f004 fcf7 	bl	21488 <bt_rand>
   1ca9a:	4604      	mov	r4, r0
   1ca9c:	b948      	cbnz	r0, 1cab2 <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   1ca9e:	2105      	movs	r1, #5
   1caa0:	4628      	mov	r0, r5
   1caa2:	f00e f88e 	bl	2abc2 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   1caa6:	f7fc f829 	bl	18afc <bt_pub_key_get>
   1caaa:	4b03      	ldr	r3, [pc, #12]	; (1cab8 <smp_init+0x34>)
   1caac:	6018      	str	r0, [r3, #0]
}
   1caae:	4620      	mov	r0, r4
   1cab0:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1cab2:	2408      	movs	r4, #8
   1cab4:	e7fb      	b.n	1caae <smp_init+0x2a>
   1cab6:	bf00      	nop
   1cab8:	200035b8 	.word	0x200035b8

0001cabc <smp_dhkey_generate>:
{
   1cabc:	b530      	push	{r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1cabe:	1d05      	adds	r5, r0, #4
{
   1cac0:	b087      	sub	sp, #28
   1cac2:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1cac4:	2108      	movs	r1, #8
   1cac6:	4628      	mov	r0, r5
   1cac8:	f00e f87b 	bl	2abc2 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   1cacc:	490b      	ldr	r1, [pc, #44]	; (1cafc <smp_dhkey_generate+0x40>)
   1cace:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1cad2:	f7fc f823 	bl	18b1c <bt_dh_key_gen>
	if (err) {
   1cad6:	b170      	cbz	r0, 1caf6 <smp_dhkey_generate+0x3a>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1cad8:	2108      	movs	r1, #8
   1cada:	4628      	mov	r0, r5
   1cadc:	f00e f852 	bl	2ab84 <atomic_clear_bit>
		LOG_ERR("Failed to generate DHKey");
   1cae0:	4b07      	ldr	r3, [pc, #28]	; (1cb00 <smp_dhkey_generate+0x44>)
   1cae2:	4808      	ldr	r0, [pc, #32]	; (1cb04 <smp_dhkey_generate+0x48>)
   1cae4:	9305      	str	r3, [sp, #20]
   1cae6:	aa04      	add	r2, sp, #16
   1cae8:	2302      	movs	r3, #2
   1caea:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1caee:	9304      	str	r3, [sp, #16]
   1caf0:	f00e f859 	bl	2aba6 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1caf4:	2008      	movs	r0, #8
}
   1caf6:	b007      	add	sp, #28
   1caf8:	bd30      	pop	{r4, r5, pc}
   1cafa:	bf00      	nop
   1cafc:	0002afe5 	.word	0x0002afe5
   1cb00:	0002fb44 	.word	0x0002fb44
   1cb04:	0002cb6c 	.word	0x0002cb6c

0001cb08 <smp_ident_info>:
{
   1cb08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cb0a:	4604      	mov	r4, r0
   1cb0c:	af00      	add	r7, sp, #0
   1cb0e:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1cb10:	3004      	adds	r0, #4
   1cb12:	210d      	movs	r1, #13
   1cb14:	f00e f80c 	bl	2ab30 <atomic_test_bit>
   1cb18:	b338      	cbz	r0, 1cb6a <smp_ident_info+0x62>
		struct bt_smp_ident_info *req = (void *)buf->data;
   1cb1a:	68de      	ldr	r6, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   1cb1c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1cb20:	f103 0588 	add.w	r5, r3, #136	; 0x88
   1cb24:	7a19      	ldrb	r1, [r3, #8]
   1cb26:	462a      	mov	r2, r5
   1cb28:	2002      	movs	r0, #2
   1cb2a:	f00e faf3 	bl	2b114 <bt_keys_get_type>
		if (!keys) {
   1cb2e:	b9b8      	cbnz	r0, 1cb60 <smp_ident_info+0x58>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1cb30:	4628      	mov	r0, r5
   1cb32:	f7f8 ff83 	bl	15a3c <bt_addr_le_str>
   1cb36:	466c      	mov	r4, sp
   1cb38:	b088      	sub	sp, #32
   1cb3a:	466a      	mov	r2, sp
   1cb3c:	4b0e      	ldr	r3, [pc, #56]	; (1cb78 <smp_ident_info+0x70>)
   1cb3e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1cb42:	f44f 7300 	mov.w	r3, #512	; 0x200
   1cb46:	8393      	strh	r3, [r2, #28]
   1cb48:	4b0c      	ldr	r3, [pc, #48]	; (1cb7c <smp_ident_info+0x74>)
   1cb4a:	480d      	ldr	r0, [pc, #52]	; (1cb80 <smp_ident_info+0x78>)
   1cb4c:	f842 3f10 	str.w	r3, [r2, #16]!
   1cb50:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1cb54:	f00e f827 	bl	2aba6 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1cb58:	2008      	movs	r0, #8
   1cb5a:	46a5      	mov	sp, r4
}
   1cb5c:	46bd      	mov	sp, r7
   1cb5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->irk.val, req->irk, 16);
   1cb60:	2210      	movs	r2, #16
   1cb62:	4631      	mov	r1, r6
   1cb64:	302a      	adds	r0, #42	; 0x2a
   1cb66:	f00c f9df 	bl	28f28 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   1cb6a:	4620      	mov	r0, r4
   1cb6c:	2109      	movs	r1, #9
   1cb6e:	f00e f828 	bl	2abc2 <atomic_set_bit>
	return 0;
   1cb72:	2000      	movs	r0, #0
   1cb74:	e7f2      	b.n	1cb5c <smp_ident_info+0x54>
   1cb76:	bf00      	nop
   1cb78:	0002fb5d 	.word	0x0002fb5d
   1cb7c:	01000003 	.word	0x01000003
   1cb80:	0002cb6c 	.word	0x0002cb6c

0001cb84 <smp_encrypt_info>:
{
   1cb84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cb86:	4604      	mov	r4, r0
   1cb88:	af00      	add	r7, sp, #0
   1cb8a:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1cb8c:	3004      	adds	r0, #4
   1cb8e:	210d      	movs	r1, #13
   1cb90:	f00d ffce 	bl	2ab30 <atomic_test_bit>
   1cb94:	b338      	cbz	r0, 1cbe6 <smp_encrypt_info+0x62>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   1cb96:	68de      	ldr	r6, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   1cb98:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1cb9c:	f103 0588 	add.w	r5, r3, #136	; 0x88
   1cba0:	7a19      	ldrb	r1, [r3, #8]
   1cba2:	462a      	mov	r2, r5
   1cba4:	2004      	movs	r0, #4
   1cba6:	f00e fab5 	bl	2b114 <bt_keys_get_type>
		if (!keys) {
   1cbaa:	b9b8      	cbnz	r0, 1cbdc <smp_encrypt_info+0x58>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1cbac:	4628      	mov	r0, r5
   1cbae:	f7f8 ff45 	bl	15a3c <bt_addr_le_str>
   1cbb2:	466c      	mov	r4, sp
   1cbb4:	b088      	sub	sp, #32
   1cbb6:	466a      	mov	r2, sp
   1cbb8:	4b0e      	ldr	r3, [pc, #56]	; (1cbf4 <smp_encrypt_info+0x70>)
   1cbba:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1cbbe:	f44f 7300 	mov.w	r3, #512	; 0x200
   1cbc2:	8393      	strh	r3, [r2, #28]
   1cbc4:	4b0c      	ldr	r3, [pc, #48]	; (1cbf8 <smp_encrypt_info+0x74>)
   1cbc6:	480d      	ldr	r0, [pc, #52]	; (1cbfc <smp_encrypt_info+0x78>)
   1cbc8:	f842 3f10 	str.w	r3, [r2, #16]!
   1cbcc:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1cbd0:	f00d ffe9 	bl	2aba6 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1cbd4:	2008      	movs	r0, #8
   1cbd6:	46a5      	mov	sp, r4
}
   1cbd8:	46bd      	mov	sp, r7
   1cbda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
   1cbdc:	2210      	movs	r2, #16
   1cbde:	4631      	mov	r1, r6
   1cbe0:	301a      	adds	r0, #26
   1cbe2:	f00c f9a1 	bl	28f28 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
   1cbe6:	4620      	mov	r0, r4
   1cbe8:	2107      	movs	r1, #7
   1cbea:	f00d ffea 	bl	2abc2 <atomic_set_bit>
	return 0;
   1cbee:	2000      	movs	r0, #0
   1cbf0:	e7f2      	b.n	1cbd8 <smp_encrypt_info+0x54>
   1cbf2:	bf00      	nop
   1cbf4:	0002fb5d 	.word	0x0002fb5d
   1cbf8:	01000003 	.word	0x01000003
   1cbfc:	0002cb6c 	.word	0x0002cb6c

0001cc00 <smp_send_pairing_confirm>:
{
   1cc00:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cc02:	b083      	sub	sp, #12
	switch (smp->method) {
   1cc04:	7a04      	ldrb	r4, [r0, #8]
   1cc06:	2c02      	cmp	r4, #2
{
   1cc08:	af02      	add	r7, sp, #8
   1cc0a:	4605      	mov	r5, r0
	switch (smp->method) {
   1cc0c:	d823      	bhi.n	1cc56 <smp_send_pairing_confirm+0x56>
   1cc0e:	b144      	cbz	r4, 1cc22 <smp_send_pairing_confirm+0x22>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1cc10:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   1cc14:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   1cc18:	40dc      	lsrs	r4, r3
   1cc1a:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   1cc1e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1cc22:	2103      	movs	r1, #3
   1cc24:	4628      	mov	r0, r5
   1cc26:	f00d ffe0 	bl	2abea <smp_create_pdu.constprop.0>
	if (!buf) {
   1cc2a:	4606      	mov	r6, r0
   1cc2c:	b320      	cbz	r0, 1cc78 <smp_send_pairing_confirm+0x78>
   1cc2e:	2110      	movs	r1, #16
   1cc30:	300c      	adds	r0, #12
   1cc32:	f00e fb8b 	bl	2b34c <net_buf_simple_add>
	if (bt_crypto_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   1cc36:	9000      	str	r0, [sp, #0]
   1cc38:	4818      	ldr	r0, [pc, #96]	; (1cc9c <smp_send_pairing_confirm+0x9c>)
   1cc3a:	4623      	mov	r3, r4
   1cc3c:	6800      	ldr	r0, [r0, #0]
   1cc3e:	f105 0227 	add.w	r2, r5, #39	; 0x27
   1cc42:	f105 0157 	add.w	r1, r5, #87	; 0x57
   1cc46:	f00e faaf 	bl	2b1a8 <bt_crypto_f4>
   1cc4a:	4604      	mov	r4, r0
   1cc4c:	b1d0      	cbz	r0, 1cc84 <smp_send_pairing_confirm+0x84>
		net_buf_unref(buf);
   1cc4e:	4630      	mov	r0, r6
   1cc50:	f001 ff2a 	bl	1eaa8 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1cc54:	e010      	b.n	1cc78 <smp_send_pairing_confirm+0x78>
	switch (smp->method) {
   1cc56:	2c03      	cmp	r4, #3
   1cc58:	d012      	beq.n	1cc80 <smp_send_pairing_confirm+0x80>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1cc5a:	466d      	mov	r5, sp
   1cc5c:	b088      	sub	sp, #32
   1cc5e:	aa02      	add	r2, sp, #8
   1cc60:	4b0f      	ldr	r3, [pc, #60]	; (1cca0 <smp_send_pairing_confirm+0xa0>)
   1cc62:	4810      	ldr	r0, [pc, #64]	; (1cca4 <smp_send_pairing_confirm+0xa4>)
	switch (smp->method) {
   1cc64:	e9c2 3405 	strd	r3, r4, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1cc68:	2303      	movs	r3, #3
   1cc6a:	f842 3f10 	str.w	r3, [r2, #16]!
   1cc6e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1cc72:	f00d ff98 	bl	2aba6 <z_log_msg_static_create.constprop.0>
   1cc76:	46ad      	mov	sp, r5
		return BT_SMP_ERR_UNSPECIFIED;
   1cc78:	2008      	movs	r0, #8
}
   1cc7a:	3704      	adds	r7, #4
   1cc7c:	46bd      	mov	sp, r7
   1cc7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (smp->method) {
   1cc80:	2400      	movs	r4, #0
   1cc82:	e7ce      	b.n	1cc22 <smp_send_pairing_confirm+0x22>
	smp_send(smp, buf, NULL, NULL);
   1cc84:	4602      	mov	r2, r0
   1cc86:	4631      	mov	r1, r6
   1cc88:	4628      	mov	r0, r5
   1cc8a:	f7ff fe7d 	bl	1c988 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1cc8e:	1d28      	adds	r0, r5, #4
   1cc90:	4621      	mov	r1, r4
   1cc92:	f00d ff77 	bl	2ab84 <atomic_clear_bit>
	return 0;
   1cc96:	4620      	mov	r0, r4
   1cc98:	e7ef      	b.n	1cc7a <smp_send_pairing_confirm+0x7a>
   1cc9a:	bf00      	nop
   1cc9c:	200035b8 	.word	0x200035b8
   1cca0:	0002fb77 	.word	0x0002fb77
   1cca4:	0002cb6c 	.word	0x0002cb6c

0001cca8 <smp_public_key_periph>:
{
   1cca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ccac:	b086      	sub	sp, #24
   1ccae:	af00      	add	r7, sp, #0
   1ccb0:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ccb2:	f7ff fe07 	bl	1c8c4 <latch_auth_cb>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1ccb6:	1d26      	adds	r6, r4, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ccb8:	4680      	mov	r8, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1ccba:	210e      	movs	r1, #14
   1ccbc:	4630      	mov	r0, r6
   1ccbe:	f00d ff37 	bl	2ab30 <atomic_test_bit>
   1ccc2:	b9a0      	cbnz	r0, 1ccee <smp_public_key_periph+0x46>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   1ccc4:	4b52      	ldr	r3, [pc, #328]	; (1ce10 <smp_public_key_periph+0x168>)
   1ccc6:	2220      	movs	r2, #32
   1ccc8:	6819      	ldr	r1, [r3, #0]
   1ccca:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1ccce:	f00c f904 	bl	28eda <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1ccd2:	b960      	cbnz	r0, 1ccee <smp_public_key_periph+0x46>
		LOG_WRN("Remote public key rejected");
   1ccd4:	4b4f      	ldr	r3, [pc, #316]	; (1ce14 <smp_public_key_periph+0x16c>)
   1ccd6:	617b      	str	r3, [r7, #20]
   1ccd8:	484f      	ldr	r0, [pc, #316]	; (1ce18 <smp_public_key_periph+0x170>)
   1ccda:	2302      	movs	r3, #2
   1ccdc:	f107 0210 	add.w	r2, r7, #16
   1cce0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1cce4:	613b      	str	r3, [r7, #16]
   1cce6:	f00d ff5e 	bl	2aba6 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1ccea:	2008      	movs	r0, #8
   1ccec:	e02f      	b.n	1cd4e <smp_public_key_periph+0xa6>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   1ccee:	210c      	movs	r1, #12
   1ccf0:	4620      	mov	r0, r4
   1ccf2:	f00d ff7a 	bl	2abea <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1ccf6:	4605      	mov	r5, r0
   1ccf8:	2800      	cmp	r0, #0
   1ccfa:	d0f6      	beq.n	1ccea <smp_public_key_periph+0x42>
   1ccfc:	2140      	movs	r1, #64	; 0x40
   1ccfe:	300c      	adds	r0, #12
   1cd00:	f00e fb24 	bl	2b34c <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   1cd04:	f8df a108 	ldr.w	sl, [pc, #264]	; 1ce10 <smp_public_key_periph+0x168>
   1cd08:	2220      	movs	r2, #32
   1cd0a:	f8da 1000 	ldr.w	r1, [sl]
   1cd0e:	4681      	mov	r9, r0
   1cd10:	f00c f90a 	bl	28f28 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   1cd14:	f8da 1000 	ldr.w	r1, [sl]
   1cd18:	2220      	movs	r2, #32
   1cd1a:	4411      	add	r1, r2
   1cd1c:	eb09 0002 	add.w	r0, r9, r2
   1cd20:	f00c f902 	bl	28f28 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   1cd24:	2200      	movs	r2, #0
   1cd26:	4629      	mov	r1, r5
   1cd28:	4620      	mov	r0, r4
   1cd2a:	f7ff fe2d 	bl	1c988 <smp_send.constprop.0>
	switch (smp->method) {
   1cd2e:	7a23      	ldrb	r3, [r4, #8]
   1cd30:	2b05      	cmp	r3, #5
   1cd32:	d85b      	bhi.n	1cdec <smp_public_key_periph+0x144>
   1cd34:	e8df f003 	tbb	[pc, r3]
   1cd38:	030f3b03 	.word	0x030f3b03
   1cd3c:	575a      	.short	0x575a
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1cd3e:	2104      	movs	r1, #4
   1cd40:	4620      	mov	r0, r4
   1cd42:	f00d ff3e 	bl	2abc2 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   1cd46:	f7ff ff5b 	bl	1cc00 <smp_send_pairing_confirm>
		if (err) {
   1cd4a:	2800      	cmp	r0, #0
   1cd4c:	d03f      	beq.n	1cdce <smp_public_key_periph+0x126>
}
   1cd4e:	3718      	adds	r7, #24
   1cd50:	46bd      	mov	sp, r7
   1cd52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1cd56:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   1cd58:	f8d4 80ec 	ldr.w	r8, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1cd5c:	f7ff fdb2 	bl	1c8c4 <latch_auth_cb>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1cd60:	2104      	movs	r1, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1cd62:	4605      	mov	r5, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1cd64:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   1cd68:	f004 fb8e 	bl	21488 <bt_rand>
   1cd6c:	2800      	cmp	r0, #0
   1cd6e:	d1bc      	bne.n	1ccea <smp_public_key_periph+0x42>
		smp->passkey %= 1000000;
   1cd70:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   1cd74:	4a29      	ldr	r2, [pc, #164]	; (1ce1c <smp_public_key_periph+0x174>)
   1cd76:	fbb3 f1f2 	udiv	r1, r3, r2
   1cd7a:	fb02 3311 	mls	r3, r2, r1, r3
   1cd7e:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	smp->passkey_round = 0U;
   1cd82:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1cd86:	b155      	cbz	r5, 1cd9e <smp_public_key_periph+0xf6>
   1cd88:	682b      	ldr	r3, [r5, #0]
   1cd8a:	b143      	cbz	r3, 1cd9e <smp_public_key_periph+0xf6>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1cd8c:	210b      	movs	r1, #11
   1cd8e:	4630      	mov	r0, r6
   1cd90:	f00d ff17 	bl	2abc2 <atomic_set_bit>
		smp_auth_cb->passkey_display(conn, smp->passkey);
   1cd94:	682b      	ldr	r3, [r5, #0]
   1cd96:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   1cd9a:	4640      	mov	r0, r8
   1cd9c:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1cd9e:	2103      	movs	r1, #3
   1cda0:	4620      	mov	r0, r4
   1cda2:	f00d ff0e 	bl	2abc2 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1cda6:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1cda8:	f00d ff0b 	bl	2abc2 <atomic_set_bit>
		break;
   1cdac:	e00f      	b.n	1cdce <smp_public_key_periph+0x126>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1cdae:	4620      	mov	r0, r4
   1cdb0:	2103      	movs	r1, #3
   1cdb2:	f00d ff06 	bl	2abc2 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1cdb6:	210e      	movs	r1, #14
   1cdb8:	f00d ff03 	bl	2abc2 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1cdbc:	4630      	mov	r0, r6
   1cdbe:	210a      	movs	r1, #10
   1cdc0:	f00d feff 	bl	2abc2 <atomic_set_bit>
		smp_auth_cb->passkey_entry(smp->chan.chan.conn);
   1cdc4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1cdc8:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1cdcc:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   1cdce:	4630      	mov	r0, r6
   1cdd0:	2107      	movs	r1, #7
   1cdd2:	f00d fef6 	bl	2abc2 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   1cdd6:	2008      	movs	r0, #8
   1cdd8:	f7ff fd66 	bl	1c8a8 <smp_find>
   1cddc:	b9b0      	cbnz	r0, 1ce0c <smp_public_key_periph+0x164>
		return smp_dhkey_generate(smp);
   1cdde:	4620      	mov	r0, r4
   1cde0:	f7ff fe6c 	bl	1cabc <smp_dhkey_generate>
   1cde4:	e7b3      	b.n	1cd4e <smp_public_key_periph+0xa6>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1cde6:	2104      	movs	r1, #4
   1cde8:	4620      	mov	r0, r4
   1cdea:	e7dd      	b.n	1cda8 <smp_public_key_periph+0x100>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1cdec:	466c      	mov	r4, sp
   1cdee:	b088      	sub	sp, #32
   1cdf0:	466a      	mov	r2, sp
   1cdf2:	490b      	ldr	r1, [pc, #44]	; (1ce20 <smp_public_key_periph+0x178>)
   1cdf4:	4808      	ldr	r0, [pc, #32]	; (1ce18 <smp_public_key_periph+0x170>)
	switch (smp->method) {
   1cdf6:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1cdfa:	2303      	movs	r3, #3
   1cdfc:	f842 3f10 	str.w	r3, [r2, #16]!
   1ce00:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ce04:	f00d fecf 	bl	2aba6 <z_log_msg_static_create.constprop.0>
   1ce08:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   1ce0a:	e76e      	b.n	1ccea <smp_public_key_periph+0x42>
	return 0;
   1ce0c:	2000      	movs	r0, #0
   1ce0e:	e79e      	b.n	1cd4e <smp_public_key_periph+0xa6>
   1ce10:	200035b8 	.word	0x200035b8
   1ce14:	0002fb93 	.word	0x0002fb93
   1ce18:	0002cb6c 	.word	0x0002cb6c
   1ce1c:	000f4240 	.word	0x000f4240
   1ce20:	0002fb77 	.word	0x0002fb77

0001ce24 <smp_public_key>:
{
   1ce24:	b570      	push	{r4, r5, r6, lr}
   1ce26:	460d      	mov	r5, r1
   1ce28:	b086      	sub	sp, #24
   1ce2a:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ce2c:	f7ff fd4a 	bl	1c8c4 <latch_auth_cb>
	struct bt_smp_public_key *req = (void *)buf->data;
   1ce30:	68ee      	ldr	r6, [r5, #12]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   1ce32:	f104 0557 	add.w	r5, r4, #87	; 0x57
   1ce36:	2220      	movs	r2, #32
   1ce38:	4631      	mov	r1, r6
   1ce3a:	4628      	mov	r0, r5
   1ce3c:	f00c f874 	bl	28f28 <memcpy>
	memcpy(&smp->pkey[BT_PUB_KEY_COORD_LEN], req->y, BT_PUB_KEY_COORD_LEN);
   1ce40:	2220      	movs	r2, #32
   1ce42:	18b1      	adds	r1, r6, r2
   1ce44:	f104 0077 	add.w	r0, r4, #119	; 0x77
   1ce48:	f00c f86e 	bl	28f28 <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
   1ce4c:	4628      	mov	r0, r5
   1ce4e:	f7fb fdb3 	bl	189b8 <bt_pub_key_is_debug>
   1ce52:	b940      	cbnz	r0, 1ce66 <smp_public_key+0x42>
	if (!sc_public_key) {
   1ce54:	4b1b      	ldr	r3, [pc, #108]	; (1cec4 <smp_public_key+0xa0>)
   1ce56:	681d      	ldr	r5, [r3, #0]
   1ce58:	bb75      	cbnz	r5, 1ceb8 <smp_public_key+0x94>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   1ce5a:	1d20      	adds	r0, r4, #4
   1ce5c:	2106      	movs	r1, #6
   1ce5e:	f00d feb0 	bl	2abc2 <atomic_set_bit>
	return 0;
   1ce62:	4628      	mov	r0, r5
		return 0;
   1ce64:	e026      	b.n	1ceb4 <smp_public_key+0x90>
		LOG_INF("Remote is using Debug Public key");
   1ce66:	4b18      	ldr	r3, [pc, #96]	; (1cec8 <smp_public_key+0xa4>)
   1ce68:	4818      	ldr	r0, [pc, #96]	; (1cecc <smp_public_key+0xa8>)
   1ce6a:	9305      	str	r3, [sp, #20]
   1ce6c:	aa04      	add	r2, sp, #16
   1ce6e:	2302      	movs	r3, #2
   1ce70:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   1ce74:	9304      	str	r3, [sp, #16]
   1ce76:	f00d fe96 	bl	2aba6 <z_log_msg_static_create.constprop.0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   1ce7a:	210e      	movs	r1, #14
   1ce7c:	1d20      	adds	r0, r4, #4
   1ce7e:	f00d fea0 	bl	2abc2 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   1ce82:	f8d4 50ec 	ldr.w	r5, [r4, #236]	; 0xec
	if (!conn->le.keys) {
   1ce86:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
   1ce8a:	b933      	cbnz	r3, 1ce9a <smp_public_key+0x76>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1ce8c:	7a28      	ldrb	r0, [r5, #8]
   1ce8e:	f105 0188 	add.w	r1, r5, #136	; 0x88
   1ce92:	f001 fa5b 	bl	1e34c <bt_keys_get_addr>
   1ce96:	f8c5 00b8 	str.w	r0, [r5, #184]	; 0xb8
	if (!conn->le.keys ||
   1ce9a:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
   1ce9e:	2b00      	cmp	r3, #0
   1cea0:	d0d8      	beq.n	1ce54 <smp_public_key+0x30>
   1cea2:	89da      	ldrh	r2, [r3, #14]
   1cea4:	f002 0224 	and.w	r2, r2, #36	; 0x24
   1cea8:	2a00      	cmp	r2, #0
   1ceaa:	d0d3      	beq.n	1ce54 <smp_public_key+0x30>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   1ceac:	7b5b      	ldrb	r3, [r3, #13]
   1ceae:	079b      	lsls	r3, r3, #30
   1ceb0:	d4d0      	bmi.n	1ce54 <smp_public_key+0x30>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1ceb2:	2003      	movs	r0, #3
}
   1ceb4:	b006      	add	sp, #24
   1ceb6:	bd70      	pop	{r4, r5, r6, pc}
	err = smp_public_key_periph(smp);
   1ceb8:	4620      	mov	r0, r4
}
   1ceba:	b006      	add	sp, #24
   1cebc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = smp_public_key_periph(smp);
   1cec0:	f7ff bef2 	b.w	1cca8 <smp_public_key_periph>
   1cec4:	200035b8 	.word	0x200035b8
   1cec8:	0002fbae 	.word	0x0002fbae
   1cecc:	0002cb6c 	.word	0x0002cb6c

0001ced0 <smp_pairing_req>:
{
   1ced0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ced4:	460d      	mov	r5, r1
   1ced6:	b087      	sub	sp, #28
   1ced8:	af00      	add	r7, sp, #0
	struct bt_conn *conn = smp->chan.chan.conn;
   1ceda:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
{
   1cede:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1cee0:	f7ff fcf0 	bl	1c8c4 <latch_auth_cb>
	struct bt_smp_pairing *req = (void *)buf->data;
   1cee4:	f8d5 900c 	ldr.w	r9, [r5, #12]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1cee8:	f899 3003 	ldrb.w	r3, [r9, #3]
   1ceec:	3b07      	subs	r3, #7
   1ceee:	2b09      	cmp	r3, #9
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1cef0:	4680      	mov	r8, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1cef2:	d904      	bls.n	1cefe <smp_pairing_req+0x2e>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   1cef4:	2006      	movs	r0, #6
}
   1cef6:	371c      	adds	r7, #28
   1cef8:	46bd      	mov	sp, r7
   1cefa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   1cefe:	f8d6 30b8 	ldr.w	r3, [r6, #184]	; 0xb8
   1cf02:	b15b      	cbz	r3, 1cf1c <smp_pairing_req+0x4c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1cf04:	1d25      	adds	r5, r4, #4
   1cf06:	210f      	movs	r1, #15
   1cf08:	4628      	mov	r0, r5
   1cf0a:	f00d fe11 	bl	2ab30 <atomic_test_bit>
   1cf0e:	b980      	cbnz	r0, 1cf32 <smp_pairing_req+0x62>
		int ret = smp_init(smp);
   1cf10:	4620      	mov	r0, r4
   1cf12:	f7ff fdb7 	bl	1ca84 <smp_init>
		if (ret) {
   1cf16:	b160      	cbz	r0, 1cf32 <smp_pairing_req+0x62>
			return ret;
   1cf18:	b2c0      	uxtb	r0, r0
   1cf1a:	e7ec      	b.n	1cef6 <smp_pairing_req+0x26>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1cf1c:	7a30      	ldrb	r0, [r6, #8]
   1cf1e:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1cf22:	f001 fa13 	bl	1e34c <bt_keys_get_addr>
   1cf26:	f8c6 00b8 	str.w	r0, [r6, #184]	; 0xb8
		if (!conn->le.keys) {
   1cf2a:	2800      	cmp	r0, #0
   1cf2c:	d1ea      	bne.n	1cf04 <smp_pairing_req+0x34>
			return BT_SMP_ERR_UNSPECIFIED;
   1cf2e:	2008      	movs	r0, #8
   1cf30:	e7e1      	b.n	1cef6 <smp_pairing_req+0x26>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1cf32:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
   1cf34:	2206      	movs	r2, #6
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1cf36:	7263      	strb	r3, [r4, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
   1cf38:	4649      	mov	r1, r9
   1cf3a:	f104 000a 	add.w	r0, r4, #10
   1cf3e:	f00b fff3 	bl	28f28 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   1cf42:	2302      	movs	r3, #2
   1cf44:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(smp, req->auth_req);
   1cf46:	f899 1002 	ldrb.w	r1, [r9, #2]
   1cf4a:	4620      	mov	r0, r4
   1cf4c:	f7ff fcfe 	bl	1c94c <get_auth>
   1cf50:	74e0      	strb	r0, [r4, #19]
	rsp->io_capability = get_io_capa(smp);
   1cf52:	4620      	mov	r0, r4
   1cf54:	f7ff fcd4 	bl	1c900 <get_io_capa>
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   1cf58:	2310      	movs	r3, #16
	rsp->io_capability = get_io_capa(smp);
   1cf5a:	7460      	strb	r0, [r4, #17]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   1cf5c:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   1cf5e:	f899 3004 	ldrb.w	r3, [r9, #4]
   1cf62:	f003 0303 	and.w	r3, r3, #3
   1cf66:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   1cf68:	f899 3005 	ldrb.w	r3, [r9, #5]
   1cf6c:	f003 0303 	and.w	r3, r3, #3
   1cf70:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1cf72:	7ce3      	ldrb	r3, [r4, #19]
   1cf74:	071b      	lsls	r3, r3, #28
   1cf76:	d50f      	bpl.n	1cf98 <smp_pairing_req+0xc8>
   1cf78:	f899 3002 	ldrb.w	r3, [r9, #2]
   1cf7c:	0718      	lsls	r0, r3, #28
   1cf7e:	d50b      	bpl.n	1cf98 <smp_pairing_req+0xc8>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   1cf80:	2105      	movs	r1, #5
   1cf82:	4628      	mov	r0, r5
   1cf84:	f00d fe1d 	bl	2abc2 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   1cf88:	7d63      	ldrb	r3, [r4, #21]
   1cf8a:	f003 0302 	and.w	r3, r3, #2
   1cf8e:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   1cf90:	7da3      	ldrb	r3, [r4, #22]
   1cf92:	f003 0302 	and.w	r3, r3, #2
   1cf96:	75a3      	strb	r3, [r4, #22]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1cf98:	2105      	movs	r1, #5
   1cf9a:	4628      	mov	r0, r5
   1cf9c:	f00d fdc8 	bl	2ab30 <atomic_test_bit>
   1cfa0:	2800      	cmp	r0, #0
   1cfa2:	d051      	beq.n	1d048 <smp_pairing_req+0x178>
		rsp->oob_flag = sc_oobd_present ? BT_SMP_OOB_PRESENT :
   1cfa4:	4baa      	ldr	r3, [pc, #680]	; (1d250 <smp_pairing_req+0x380>)
		rsp->oob_flag = legacy_oobd_present ? BT_SMP_OOB_PRESENT :
   1cfa6:	781b      	ldrb	r3, [r3, #0]
   1cfa8:	74a3      	strb	r3, [r4, #18]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   1cfaa:	7ce3      	ldrb	r3, [r4, #19]
   1cfac:	0699      	lsls	r1, r3, #26
   1cfae:	d507      	bpl.n	1cfc0 <smp_pairing_req+0xf0>
   1cfb0:	f899 3002 	ldrb.w	r3, [r9, #2]
   1cfb4:	069a      	lsls	r2, r3, #26
   1cfb6:	d503      	bpl.n	1cfc0 <smp_pairing_req+0xf0>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   1cfb8:	2114      	movs	r1, #20
   1cfba:	4628      	mov	r0, r5
   1cfbc:	f00d fe01 	bl	2abc2 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   1cfc0:	7ce3      	ldrb	r3, [r4, #19]
   1cfc2:	07db      	lsls	r3, r3, #31
   1cfc4:	d542      	bpl.n	1d04c <smp_pairing_req+0x17c>
   1cfc6:	f899 3002 	ldrb.w	r3, [r9, #2]
   1cfca:	07d8      	lsls	r0, r3, #31
   1cfcc:	d53e      	bpl.n	1d04c <smp_pairing_req+0x17c>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   1cfce:	210d      	movs	r1, #13
   1cfd0:	4628      	mov	r0, r5
   1cfd2:	f00d fdf6 	bl	2abc2 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   1cfd6:	7da3      	ldrb	r3, [r4, #22]
   1cfd8:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   1cfdc:	7d63      	ldrb	r3, [r4, #21]
   1cfde:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   1cfe2:	2103      	movs	r1, #3
   1cfe4:	4628      	mov	r0, r5
   1cfe6:	f00d fdec 	bl	2abc2 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1cfea:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
   1cfec:	f899 9000 	ldrb.w	r9, [r9]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1cff0:	f00d fd9e 	bl	2ab30 <atomic_test_bit>
   1cff4:	bb70      	cbnz	r0, 1d054 <smp_pairing_req+0x184>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1cff6:	f1b9 0f04 	cmp.w	r9, #4
   1cffa:	d84b      	bhi.n	1d094 <smp_pairing_req+0x1c4>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1cffc:	7ae3      	ldrb	r3, [r4, #11]
   1cffe:	7ca2      	ldrb	r2, [r4, #18]
   1d000:	4013      	ands	r3, r2
   1d002:	07d9      	lsls	r1, r3, #31
   1d004:	d444      	bmi.n	1d090 <smp_pairing_req+0x1c0>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1d006:	7b21      	ldrb	r1, [r4, #12]
   1d008:	7ce3      	ldrb	r3, [r4, #19]
   1d00a:	4319      	orrs	r1, r3
   1d00c:	f011 0104 	ands.w	r1, r1, #4
   1d010:	d011      	beq.n	1d036 <smp_pairing_req+0x166>
	method = gen_method_legacy[remote_io][get_io_capa(smp)];
   1d012:	4620      	mov	r0, r4
   1d014:	f7ff fc74 	bl	1c900 <get_io_capa>
   1d018:	4b8e      	ldr	r3, [pc, #568]	; (1d254 <smp_pairing_req+0x384>)
   1d01a:	eb09 0989 	add.w	r9, r9, r9, lsl #2
   1d01e:	4499      	add	r9, r3
   1d020:	f819 1000 	ldrb.w	r1, [r9, r0]
	if (method == PASSKEY_ROLE) {
   1d024:	2904      	cmp	r1, #4
   1d026:	d106      	bne.n	1d036 <smp_pairing_req+0x166>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1d028:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1d02c:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_DISPLAY;
   1d02e:	2b00      	cmp	r3, #0
   1d030:	bf14      	ite	ne
   1d032:	2101      	movne	r1, #1
   1d034:	2102      	moveq	r1, #2
	smp->method = get_pair_method(smp, req->io_capability);
   1d036:	7221      	strb	r1, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   1d038:	f8d6 10b8 	ldr.w	r1, [r6, #184]	; 0xb8
   1d03c:	4620      	mov	r0, r4
   1d03e:	f00d fd80 	bl	2ab42 <update_keys_check>
   1d042:	bb48      	cbnz	r0, 1d098 <smp_pairing_req+0x1c8>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1d044:	2003      	movs	r0, #3
   1d046:	e756      	b.n	1cef6 <smp_pairing_req+0x26>
		rsp->oob_flag = legacy_oobd_present ? BT_SMP_OOB_PRESENT :
   1d048:	4b83      	ldr	r3, [pc, #524]	; (1d258 <smp_pairing_req+0x388>)
   1d04a:	e7ac      	b.n	1cfa6 <smp_pairing_req+0xd6>
		rsp->init_key_dist = 0;
   1d04c:	2300      	movs	r3, #0
   1d04e:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist = 0;
   1d050:	75a3      	strb	r3, [r4, #22]
   1d052:	e7c0      	b.n	1cfd6 <smp_pairing_req+0x106>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   1d054:	7b23      	ldrb	r3, [r4, #12]
   1d056:	7ce0      	ldrb	r0, [r4, #19]
   1d058:	ea03 0200 	and.w	r2, r3, r0
   1d05c:	0712      	lsls	r2, r2, #28
   1d05e:	d506      	bpl.n	1d06e <smp_pairing_req+0x19e>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1d060:	7ae2      	ldrb	r2, [r4, #11]
   1d062:	f894 c012 	ldrb.w	ip, [r4, #18]
   1d066:	ea42 020c 	orr.w	r2, r2, ip
   1d06a:	07d2      	lsls	r2, r2, #31
   1d06c:	d4e3      	bmi.n	1d036 <smp_pairing_req+0x166>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1d06e:	f1b9 0f04 	cmp.w	r9, #4
   1d072:	d80f      	bhi.n	1d094 <smp_pairing_req+0x1c4>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1d074:	ea43 0100 	orr.w	r1, r3, r0
   1d078:	f011 0104 	ands.w	r1, r1, #4
   1d07c:	d0db      	beq.n	1d036 <smp_pairing_req+0x166>
	return gen_method_sc[remote_io][get_io_capa(smp)];
   1d07e:	4620      	mov	r0, r4
   1d080:	f7ff fc3e 	bl	1c900 <get_io_capa>
   1d084:	4b75      	ldr	r3, [pc, #468]	; (1d25c <smp_pairing_req+0x38c>)
   1d086:	eb09 0989 	add.w	r9, r9, r9, lsl #2
   1d08a:	444b      	add	r3, r9
   1d08c:	5c19      	ldrb	r1, [r3, r0]
   1d08e:	e7d2      	b.n	1d036 <smp_pairing_req+0x166>
		return LEGACY_OOB;
   1d090:	2106      	movs	r1, #6
   1d092:	e7d0      	b.n	1d036 <smp_pairing_req+0x166>
		return JUST_WORKS;
   1d094:	2100      	movs	r1, #0
   1d096:	e7ce      	b.n	1d036 <smp_pairing_req+0x166>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   1d098:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1d09c:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   1d09e:	2b03      	cmp	r3, #3
   1d0a0:	d03e      	beq.n	1d120 <smp_pairing_req+0x250>
   1d0a2:	d82c      	bhi.n	1d0fe <smp_pairing_req+0x22e>
   1d0a4:	3b01      	subs	r3, #1
   1d0a6:	2b01      	cmp	r3, #1
   1d0a8:	f63f af41 	bhi.w	1cf2e <smp_pairing_req+0x5e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1d0ac:	2105      	movs	r1, #5
   1d0ae:	4628      	mov	r0, r5
   1d0b0:	f00d fd3e 	bl	2ab30 <atomic_test_bit>
   1d0b4:	2800      	cmp	r0, #0
   1d0b6:	f040 80b5 	bne.w	1d224 <smp_pairing_req+0x354>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d0ba:	4620      	mov	r0, r4
   1d0bc:	f7ff fc02 	bl	1c8c4 <latch_auth_cb>
   1d0c0:	4680      	mov	r8, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d0c2:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   1d0c4:	f8d4 90ec 	ldr.w	r9, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d0c8:	f7ff fbfc 	bl	1c8c4 <latch_auth_cb>
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1d0cc:	f109 0188 	add.w	r1, r9, #136	; 0x88
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d0d0:	4606      	mov	r6, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1d0d2:	f899 0008 	ldrb.w	r0, [r9, #8]
   1d0d6:	f001 fa31 	bl	1e53c <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   1d0da:	7a23      	ldrb	r3, [r4, #8]
   1d0dc:	b320      	cbz	r0, 1d128 <smp_pairing_req+0x258>
   1d0de:	7b42      	ldrb	r2, [r0, #13]
   1d0e0:	07d2      	lsls	r2, r2, #31
   1d0e2:	d521      	bpl.n	1d128 <smp_pairing_req+0x258>
   1d0e4:	bb03      	cbnz	r3, 1d128 <smp_pairing_req+0x258>
		LOG_ERR("JustWorks failed, authenticated keys present");
   1d0e6:	4b5e      	ldr	r3, [pc, #376]	; (1d260 <smp_pairing_req+0x390>)
   1d0e8:	617b      	str	r3, [r7, #20]
   1d0ea:	2302      	movs	r3, #2
   1d0ec:	485d      	ldr	r0, [pc, #372]	; (1d264 <smp_pairing_req+0x394>)
   1d0ee:	613b      	str	r3, [r7, #16]
   1d0f0:	f107 0210 	add.w	r2, r7, #16
   1d0f4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d0f8:	f00d fd55 	bl	2aba6 <z_log_msg_static_create.constprop.0>
	if (ret) {
   1d0fc:	e717      	b.n	1cf2e <smp_pairing_req+0x5e>
	switch (sec) {
   1d0fe:	2b04      	cmp	r3, #4
   1d100:	f47f af15 	bne.w	1cf2e <smp_pairing_req+0x5e>
	return MIN(req->max_key_size, rsp->max_key_size);
   1d104:	7d23      	ldrb	r3, [r4, #20]
   1d106:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   1d108:	4293      	cmp	r3, r2
   1d10a:	bf28      	it	cs
   1d10c:	4613      	movcs	r3, r2
   1d10e:	2b10      	cmp	r3, #16
   1d110:	f47f aef0 	bne.w	1cef4 <smp_pairing_req+0x24>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1d114:	2105      	movs	r1, #5
   1d116:	4628      	mov	r0, r5
   1d118:	f00d fd0a 	bl	2ab30 <atomic_test_bit>
   1d11c:	2800      	cmp	r0, #0
   1d11e:	d091      	beq.n	1d044 <smp_pairing_req+0x174>
		if (smp->method == JUST_WORKS) {
   1d120:	7a23      	ldrb	r3, [r4, #8]
   1d122:	2b00      	cmp	r3, #0
   1d124:	d1c2      	bne.n	1d0ac <smp_pairing_req+0x1dc>
   1d126:	e78d      	b.n	1d044 <smp_pairing_req+0x174>
	switch (smp->method) {
   1d128:	2b06      	cmp	r3, #6
   1d12a:	d85f      	bhi.n	1d1ec <smp_pairing_req+0x31c>
   1d12c:	e8df f003 	tbb	[pc, r3]
   1d130:	5e2f5617 	.word	0x5e2f5617
   1d134:	5e5e      	.short	0x5e5e
   1d136:	04          	.byte	0x04
   1d137:	00          	.byte	0x00
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1d138:	2e00      	cmp	r6, #0
   1d13a:	d067      	beq.n	1d20c <smp_pairing_req+0x33c>
   1d13c:	68f3      	ldr	r3, [r6, #12]
   1d13e:	2b00      	cmp	r3, #0
   1d140:	d064      	beq.n	1d20c <smp_pairing_req+0x33c>
			struct bt_conn_oob_info info = {
   1d142:	2300      	movs	r3, #0
   1d144:	803b      	strh	r3, [r7, #0]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1d146:	210a      	movs	r1, #10
   1d148:	4628      	mov	r0, r5
   1d14a:	f00d fd3a 	bl	2abc2 <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1d14e:	68f3      	ldr	r3, [r6, #12]
   1d150:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1d154:	4639      	mov	r1, r7
   1d156:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1d158:	7a23      	ldrb	r3, [r4, #8]
   1d15a:	2b00      	cmp	r3, #0
   1d15c:	d158      	bne.n	1d210 <smp_pairing_req+0x340>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1d15e:	210f      	movs	r1, #15
   1d160:	4628      	mov	r0, r5
   1d162:	f00d fce5 	bl	2ab30 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1d166:	2800      	cmp	r0, #0
   1d168:	d152      	bne.n	1d210 <smp_pairing_req+0x340>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1d16a:	f1b8 0f00 	cmp.w	r8, #0
   1d16e:	d04f      	beq.n	1d210 <smp_pairing_req+0x340>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1d170:	f8d8 3014 	ldr.w	r3, [r8, #20]
   1d174:	2b00      	cmp	r3, #0
   1d176:	d04b      	beq.n	1d210 <smp_pairing_req+0x340>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1d178:	4628      	mov	r0, r5
   1d17a:	210a      	movs	r1, #10
   1d17c:	f00d fd21 	bl	2abc2 <atomic_set_bit>
		smp_auth_cb->pairing_confirm(smp->chan.chan.conn);
   1d180:	f8d8 3014 	ldr.w	r3, [r8, #20]
   1d184:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
		smp_auth_cb->pairing_confirm(conn);
   1d188:	4798      	blx	r3
		return 0;
   1d18a:	2000      	movs	r0, #0
   1d18c:	e6b3      	b.n	1cef6 <smp_pairing_req+0x26>
			if (bt_rand(&passkey, sizeof(passkey))) {
   1d18e:	2104      	movs	r1, #4
   1d190:	4638      	mov	r0, r7
   1d192:	f004 f979 	bl	21488 <bt_rand>
   1d196:	2800      	cmp	r0, #0
   1d198:	f47f aec9 	bne.w	1cf2e <smp_pairing_req+0x5e>
			passkey %= 1000000;
   1d19c:	683b      	ldr	r3, [r7, #0]
   1d19e:	4a32      	ldr	r2, [pc, #200]	; (1d268 <smp_pairing_req+0x398>)
   1d1a0:	fbb3 f1f2 	udiv	r1, r3, r2
   1d1a4:	fb02 3311 	mls	r3, r2, r1, r3
   1d1a8:	603b      	str	r3, [r7, #0]
		if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1d1aa:	b14e      	cbz	r6, 1d1c0 <smp_pairing_req+0x2f0>
   1d1ac:	6833      	ldr	r3, [r6, #0]
   1d1ae:	b13b      	cbz	r3, 1d1c0 <smp_pairing_req+0x2f0>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1d1b0:	210b      	movs	r1, #11
   1d1b2:	4628      	mov	r0, r5
   1d1b4:	f00d fd05 	bl	2abc2 <atomic_set_bit>
			smp_auth_cb->passkey_display(conn, passkey);
   1d1b8:	6833      	ldr	r3, [r6, #0]
   1d1ba:	6839      	ldr	r1, [r7, #0]
   1d1bc:	4648      	mov	r0, r9
   1d1be:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   1d1c0:	683b      	ldr	r3, [r7, #0]
	dst[0] = val;
   1d1c2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	dst[1] = val >> 8;
   1d1c6:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   1d1ca:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   1d1cc:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   1d1d0:	0a1b      	lsrs	r3, r3, #8
   1d1d2:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   1d1d6:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   1d1da:	e7bd      	b.n	1d158 <smp_pairing_req+0x288>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1d1dc:	4628      	mov	r0, r5
   1d1de:	210a      	movs	r1, #10
   1d1e0:	f00d fcef 	bl	2abc2 <atomic_set_bit>
		smp_auth_cb->passkey_entry(conn);
   1d1e4:	6873      	ldr	r3, [r6, #4]
   1d1e6:	4648      	mov	r0, r9
   1d1e8:	4798      	blx	r3
	if (ret) {
   1d1ea:	e7b5      	b.n	1d158 <smp_pairing_req+0x288>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1d1ec:	466c      	mov	r4, sp
   1d1ee:	b088      	sub	sp, #32
   1d1f0:	466a      	mov	r2, sp
   1d1f2:	491e      	ldr	r1, [pc, #120]	; (1d26c <smp_pairing_req+0x39c>)
   1d1f4:	481b      	ldr	r0, [pc, #108]	; (1d264 <smp_pairing_req+0x394>)
	switch (smp->method) {
   1d1f6:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1d1fa:	2303      	movs	r3, #3
   1d1fc:	f842 3f10 	str.w	r3, [r2, #16]!
   1d200:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d204:	f00d fccf 	bl	2aba6 <z_log_msg_static_create.constprop.0>
   1d208:	46a5      	mov	sp, r4
	if (ret) {
   1d20a:	e690      	b.n	1cf2e <smp_pairing_req+0x5e>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1d20c:	2002      	movs	r0, #2
   1d20e:	e672      	b.n	1cef6 <smp_pairing_req+0x26>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1d210:	2103      	movs	r1, #3
   1d212:	4620      	mov	r0, r4
   1d214:	f00d fcd5 	bl	2abc2 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1d218:	210e      	movs	r1, #14
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1d21a:	f00d fcd2 	bl	2abc2 <atomic_set_bit>
	return send_pairing_rsp(smp);
   1d21e:	f00d fd03 	bl	2ac28 <send_pairing_rsp>
   1d222:	e668      	b.n	1cef6 <smp_pairing_req+0x26>
	if (!IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) &&
   1d224:	7a23      	ldrb	r3, [r4, #8]
   1d226:	bb1b      	cbnz	r3, 1d270 <smp_pairing_req+0x3a0>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1d228:	210f      	movs	r1, #15
   1d22a:	4628      	mov	r0, r5
   1d22c:	f00d fc80 	bl	2ab30 <atomic_test_bit>
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1d230:	b9f0      	cbnz	r0, 1d270 <smp_pairing_req+0x3a0>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1d232:	f1b8 0f00 	cmp.w	r8, #0
   1d236:	d01b      	beq.n	1d270 <smp_pairing_req+0x3a0>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1d238:	f8d8 3014 	ldr.w	r3, [r8, #20]
   1d23c:	b1c3      	cbz	r3, 1d270 <smp_pairing_req+0x3a0>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1d23e:	4628      	mov	r0, r5
   1d240:	210a      	movs	r1, #10
   1d242:	f00d fcbe 	bl	2abc2 <atomic_set_bit>
		smp_auth_cb->pairing_confirm(conn);
   1d246:	f8d8 3014 	ldr.w	r3, [r8, #20]
   1d24a:	4630      	mov	r0, r6
   1d24c:	e79c      	b.n	1d188 <smp_pairing_req+0x2b8>
   1d24e:	bf00      	nop
   1d250:	20004662 	.word	0x20004662
   1d254:	0002ff14 	.word	0x0002ff14
   1d258:	20004661 	.word	0x20004661
   1d25c:	0002fefb 	.word	0x0002fefb
   1d260:	0002fbcf 	.word	0x0002fbcf
   1d264:	0002cb6c 	.word	0x0002cb6c
   1d268:	000f4240 	.word	0x000f4240
   1d26c:	0002fb77 	.word	0x0002fb77
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1d270:	210c      	movs	r1, #12
   1d272:	4620      	mov	r0, r4
   1d274:	e7d1      	b.n	1d21a <smp_pairing_req+0x34a>
   1d276:	bf00      	nop

0001d278 <compute_and_check_and_send_periph_dhcheck>:
{
   1d278:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d27c:	b097      	sub	sp, #92	; 0x5c
   1d27e:	4604      	mov	r4, r0
   1d280:	af04      	add	r7, sp, #16
	(void)memset(r, 0, sizeof(r));
   1d282:	2210      	movs	r2, #16
   1d284:	2100      	movs	r1, #0
   1d286:	f107 0020 	add.w	r0, r7, #32
   1d28a:	f00b fe58 	bl	28f3e <memset>
	switch (smp->method) {
   1d28e:	7a23      	ldrb	r3, [r4, #8]
   1d290:	2b05      	cmp	r3, #5
   1d292:	d834      	bhi.n	1d2fe <compute_and_check_and_send_periph_dhcheck+0x86>
   1d294:	e8df f003 	tbb	[pc, r3]
   1d298:	0a03030a 	.word	0x0a03030a
   1d29c:	2d33      	.short	0x2d33
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1d29e:	2204      	movs	r2, #4
   1d2a0:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1d2a4:	f107 0020 	add.w	r0, r7, #32
   1d2a8:	f00b fe3e 	bl	28f28 <memcpy>
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   1d2ac:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   1d2b0:	f104 0247 	add.w	r2, r4, #71	; 0x47
   1d2b4:	f104 05c7 	add.w	r5, r4, #199	; 0xc7
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   1d2b8:	e9cd 5201 	strd	r5, r2, [sp, #4]
   1d2bc:	f104 0637 	add.w	r6, r4, #55	; 0x37
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   1d2c0:	f103 0296 	add.w	r2, r3, #150	; 0x96
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   1d2c4:	f104 0927 	add.w	r9, r4, #39	; 0x27
   1d2c8:	9200      	str	r2, [sp, #0]
   1d2ca:	338f      	adds	r3, #143	; 0x8f
   1d2cc:	464a      	mov	r2, r9
   1d2ce:	4631      	mov	r1, r6
   1d2d0:	f104 0097 	add.w	r0, r4, #151	; 0x97
   1d2d4:	f001 fa8a 	bl	1e7ec <bt_crypto_f5>
   1d2d8:	b328      	cbz	r0, 1d326 <compute_and_check_and_send_periph_dhcheck+0xae>
		LOG_ERR("Calculate LTK failed");
   1d2da:	4b42      	ldr	r3, [pc, #264]	; (1d3e4 <compute_and_check_and_send_periph_dhcheck+0x16c>)
   1d2dc:	647b      	str	r3, [r7, #68]	; 0x44
   1d2de:	2302      	movs	r3, #2
   1d2e0:	4841      	ldr	r0, [pc, #260]	; (1d3e8 <compute_and_check_and_send_periph_dhcheck+0x170>)
   1d2e2:	643b      	str	r3, [r7, #64]	; 0x40
   1d2e4:	f107 0240 	add.w	r2, r7, #64	; 0x40
   1d2e8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d2ec:	f00d fc5b 	bl	2aba6 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1d2f0:	e014      	b.n	1d31c <compute_and_check_and_send_periph_dhcheck+0xa4>
		if (smp->oobd_remote) {
   1d2f2:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   1d2f6:	2900      	cmp	r1, #0
   1d2f8:	d0d8      	beq.n	1d2ac <compute_and_check_and_send_periph_dhcheck+0x34>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1d2fa:	2210      	movs	r2, #16
   1d2fc:	e7d2      	b.n	1d2a4 <compute_and_check_and_send_periph_dhcheck+0x2c>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1d2fe:	466c      	mov	r4, sp
   1d300:	b088      	sub	sp, #32
   1d302:	aa04      	add	r2, sp, #16
   1d304:	4939      	ldr	r1, [pc, #228]	; (1d3ec <compute_and_check_and_send_periph_dhcheck+0x174>)
   1d306:	4838      	ldr	r0, [pc, #224]	; (1d3e8 <compute_and_check_and_send_periph_dhcheck+0x170>)
	switch (smp->method) {
   1d308:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1d30c:	2303      	movs	r3, #3
   1d30e:	f842 3f10 	str.w	r3, [r2, #16]!
   1d312:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d316:	f00d fc46 	bl	2aba6 <z_log_msg_static_create.constprop.0>
   1d31a:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   1d31c:	2008      	movs	r0, #8
}
   1d31e:	374c      	adds	r7, #76	; 0x4c
   1d320:	46bd      	mov	sp, r7
   1d322:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			 &smp->chan.chan.conn->le.resp_addr, &smp->chan.chan.conn->le.init_addr,
   1d326:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1d32a:	f103 028f 	add.w	r2, r3, #143	; 0x8f
   1d32e:	3396      	adds	r3, #150	; 0x96
	if (bt_crypto_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1d330:	f107 0810 	add.w	r8, r7, #16
   1d334:	9301      	str	r3, [sp, #4]
   1d336:	f104 0311 	add.w	r3, r4, #17
   1d33a:	9202      	str	r2, [sp, #8]
   1d33c:	9300      	str	r3, [sp, #0]
   1d33e:	f8cd 800c 	str.w	r8, [sp, #12]
   1d342:	f107 0320 	add.w	r3, r7, #32
   1d346:	4632      	mov	r2, r6
   1d348:	4649      	mov	r1, r9
   1d34a:	4628      	mov	r0, r5
   1d34c:	f00d ff51 	bl	2b1f2 <bt_crypto_f6>
   1d350:	b108      	cbz	r0, 1d356 <compute_and_check_and_send_periph_dhcheck+0xde>
		LOG_ERR("Calculate local DHKey check failed");
   1d352:	4b27      	ldr	r3, [pc, #156]	; (1d3f0 <compute_and_check_and_send_periph_dhcheck+0x178>)
   1d354:	e7c2      	b.n	1d2dc <compute_and_check_and_send_periph_dhcheck+0x64>
	if (smp->method == LE_SC_OOB) {
   1d356:	7a23      	ldrb	r3, [r4, #8]
   1d358:	2b05      	cmp	r3, #5
   1d35a:	d107      	bne.n	1d36c <compute_and_check_and_send_periph_dhcheck+0xf4>
		if (smp->oobd_local) {
   1d35c:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1d360:	2210      	movs	r2, #16
   1d362:	f107 0020 	add.w	r0, r7, #32
		if (smp->oobd_local) {
   1d366:	b1b1      	cbz	r1, 1d396 <compute_and_check_and_send_periph_dhcheck+0x11e>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1d368:	f00b fdde 	bl	28f28 <memcpy>
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   1d36c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1d370:	9703      	str	r7, [sp, #12]
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   1d372:	f103 0296 	add.w	r2, r3, #150	; 0x96
   1d376:	338f      	adds	r3, #143	; 0x8f
	if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1d378:	9301      	str	r3, [sp, #4]
   1d37a:	f104 030a 	add.w	r3, r4, #10
   1d37e:	9202      	str	r2, [sp, #8]
   1d380:	9300      	str	r3, [sp, #0]
   1d382:	464a      	mov	r2, r9
   1d384:	f107 0320 	add.w	r3, r7, #32
   1d388:	4631      	mov	r1, r6
   1d38a:	4628      	mov	r0, r5
   1d38c:	f00d ff31 	bl	2b1f2 <bt_crypto_f6>
   1d390:	b120      	cbz	r0, 1d39c <compute_and_check_and_send_periph_dhcheck+0x124>
		LOG_ERR("Calculate remote DHKey check failed");
   1d392:	4b18      	ldr	r3, [pc, #96]	; (1d3f4 <compute_and_check_and_send_periph_dhcheck+0x17c>)
   1d394:	e7a2      	b.n	1d2dc <compute_and_check_and_send_periph_dhcheck+0x64>
			memset(r, 0, sizeof(r));
   1d396:	f00b fdd2 	bl	28f3e <memset>
   1d39a:	e7e7      	b.n	1d36c <compute_and_check_and_send_periph_dhcheck+0xf4>
	if (memcmp(smp->e, re, 16)) {
   1d39c:	2210      	movs	r2, #16
   1d39e:	4639      	mov	r1, r7
   1d3a0:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   1d3a4:	f00b fd99 	bl	28eda <memcmp>
   1d3a8:	4605      	mov	r5, r0
   1d3aa:	b9c8      	cbnz	r0, 1d3e0 <compute_and_check_and_send_periph_dhcheck+0x168>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   1d3ac:	210d      	movs	r1, #13
   1d3ae:	4620      	mov	r0, r4
   1d3b0:	f00d fc1b 	bl	2abea <smp_create_pdu.constprop.0>
	if (!buf) {
   1d3b4:	4606      	mov	r6, r0
   1d3b6:	2800      	cmp	r0, #0
   1d3b8:	d0b0      	beq.n	1d31c <compute_and_check_and_send_periph_dhcheck+0xa4>
   1d3ba:	2110      	movs	r1, #16
   1d3bc:	300c      	adds	r0, #12
   1d3be:	f00d ffc5 	bl	2b34c <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   1d3c2:	2210      	movs	r2, #16
   1d3c4:	4641      	mov	r1, r8
   1d3c6:	f00b fdaf 	bl	28f28 <memcpy>
	smp_send(smp, buf, NULL, NULL);
   1d3ca:	462a      	mov	r2, r5
   1d3cc:	4631      	mov	r1, r6
   1d3ce:	4620      	mov	r0, r4
   1d3d0:	f7ff fada 	bl	1c988 <smp_send.constprop.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1d3d4:	1d20      	adds	r0, r4, #4
   1d3d6:	2101      	movs	r1, #1
   1d3d8:	f00d fbf3 	bl	2abc2 <atomic_set_bit>
	return 0;
   1d3dc:	4628      	mov	r0, r5
   1d3de:	e79e      	b.n	1d31e <compute_and_check_and_send_periph_dhcheck+0xa6>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1d3e0:	200b      	movs	r0, #11
   1d3e2:	e79c      	b.n	1d31e <compute_and_check_and_send_periph_dhcheck+0xa6>
   1d3e4:	0002fbfc 	.word	0x0002fbfc
   1d3e8:	0002cb6c 	.word	0x0002cb6c
   1d3ec:	0002fb77 	.word	0x0002fb77
   1d3f0:	0002fc11 	.word	0x0002fc11
   1d3f4:	0002fc34 	.word	0x0002fc34

0001d3f8 <bt_smp_connected>:
{
   1d3f8:	b538      	push	{r3, r4, r5, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
   1d3fa:	490b      	ldr	r1, [pc, #44]	; (1d428 <bt_smp_connected+0x30>)
{
   1d3fc:	4604      	mov	r4, r0
	k_work_init_delayable(&smp->work, smp_timeout);
   1d3fe:	f1a0 05ec 	sub.w	r5, r0, #236	; 0xec
   1d402:	3034      	adds	r0, #52	; 0x34
   1d404:	f00e fe27 	bl	2c056 <k_work_init_delayable>
	smp_reset(smp);
   1d408:	4628      	mov	r0, r5
   1d40a:	f00d fc80 	bl	2ad0e <smp_reset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1d40e:	f3bf 8f5b 	dmb	ish
   1d412:	4b06      	ldr	r3, [pc, #24]	; (1d42c <bt_smp_connected+0x34>)
   1d414:	3464      	adds	r4, #100	; 0x64
   1d416:	e854 2f00 	ldrex	r2, [r4]
   1d41a:	e844 3100 	strex	r1, r3, [r4]
   1d41e:	2900      	cmp	r1, #0
   1d420:	d1f9      	bne.n	1d416 <bt_smp_connected+0x1e>
   1d422:	f3bf 8f5b 	dmb	ish
}
   1d426:	bd38      	pop	{r3, r4, r5, pc}
   1d428:	0001e1a5 	.word	0x0001e1a5
   1d42c:	200021b8 	.word	0x200021b8

0001d430 <smp_pairing_confirm>:
{
   1d430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1d432:	1d05      	adds	r5, r0, #4
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   1d434:	68ce      	ldr	r6, [r1, #12]
{
   1d436:	af00      	add	r7, sp, #0
   1d438:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1d43a:	210b      	movs	r1, #11
   1d43c:	4628      	mov	r0, r5
   1d43e:	f00d fba1 	bl	2ab84 <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   1d442:	4631      	mov	r1, r6
   1d444:	2210      	movs	r2, #16
   1d446:	f104 0017 	add.w	r0, r4, #23
   1d44a:	f00b fd6d 	bl	28f28 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1d44e:	2105      	movs	r1, #5
   1d450:	4628      	mov	r0, r5
   1d452:	f00d fb6d 	bl	2ab30 <atomic_test_bit>
   1d456:	b920      	cbnz	r0, 1d462 <smp_pairing_confirm+0x32>
		return legacy_pairing_confirm(smp);
   1d458:	4620      	mov	r0, r4
   1d45a:	f00d fcd5 	bl	2ae08 <legacy_pairing_confirm>
}
   1d45e:	46bd      	mov	sp, r7
   1d460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (smp->method) {
   1d462:	7a23      	ldrb	r3, [r4, #8]
   1d464:	2b01      	cmp	r3, #1
   1d466:	d008      	beq.n	1d47a <smp_pairing_confirm+0x4a>
   1d468:	2b02      	cmp	r3, #2
   1d46a:	d112      	bne.n	1d492 <smp_pairing_confirm+0x62>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1d46c:	2104      	movs	r1, #4
   1d46e:	4620      	mov	r0, r4
   1d470:	f00d fba7 	bl	2abc2 <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
   1d474:	f7ff fbc4 	bl	1cc00 <smp_send_pairing_confirm>
   1d478:	e7f1      	b.n	1d45e <smp_pairing_confirm+0x2e>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1d47a:	210a      	movs	r1, #10
   1d47c:	4628      	mov	r0, r5
   1d47e:	f00d fb57 	bl	2ab30 <atomic_test_bit>
   1d482:	2800      	cmp	r0, #0
   1d484:	d0f2      	beq.n	1d46c <smp_pairing_confirm+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1d486:	4628      	mov	r0, r5
   1d488:	2100      	movs	r1, #0
   1d48a:	f00d fb9a 	bl	2abc2 <atomic_set_bit>
			return 0;
   1d48e:	2000      	movs	r0, #0
   1d490:	e7e5      	b.n	1d45e <smp_pairing_confirm+0x2e>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1d492:	466c      	mov	r4, sp
   1d494:	b088      	sub	sp, #32
   1d496:	466a      	mov	r2, sp
   1d498:	4906      	ldr	r1, [pc, #24]	; (1d4b4 <smp_pairing_confirm+0x84>)
   1d49a:	4807      	ldr	r0, [pc, #28]	; (1d4b8 <smp_pairing_confirm+0x88>)
	switch (smp->method) {
   1d49c:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1d4a0:	2303      	movs	r3, #3
   1d4a2:	f842 3f10 	str.w	r3, [r2, #16]!
   1d4a6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d4aa:	f00d fb7c 	bl	2aba6 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1d4ae:	2008      	movs	r0, #8
   1d4b0:	46a5      	mov	sp, r4
   1d4b2:	e7d4      	b.n	1d45e <smp_pairing_confirm+0x2e>
   1d4b4:	0002fb77 	.word	0x0002fb77
   1d4b8:	0002cb6c 	.word	0x0002cb6c

0001d4bc <smp_pairing_random>:
{
   1d4bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d4c0:	b08e      	sub	sp, #56	; 0x38
   1d4c2:	af04      	add	r7, sp, #16
   1d4c4:	4604      	mov	r4, r0
   1d4c6:	460d      	mov	r5, r1
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d4c8:	f7ff f9fc 	bl	1c8c4 <latch_auth_cb>
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1d4cc:	f104 0837 	add.w	r8, r4, #55	; 0x37
   1d4d0:	68e9      	ldr	r1, [r5, #12]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d4d2:	4606      	mov	r6, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1d4d4:	2210      	movs	r2, #16
   1d4d6:	4640      	mov	r0, r8
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1d4d8:	1d25      	adds	r5, r4, #4
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1d4da:	f00b fd25 	bl	28f28 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1d4de:	2105      	movs	r1, #5
   1d4e0:	4628      	mov	r0, r5
   1d4e2:	f00d fb25 	bl	2ab30 <atomic_test_bit>
   1d4e6:	2800      	cmp	r0, #0
   1d4e8:	d148      	bne.n	1d57c <smp_pairing_random+0xc0>
	struct bt_conn *conn = smp->chan.chan.conn;
   1d4ea:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1d4ee:	9702      	str	r7, [sp, #8]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1d4f0:	f103 0296 	add.w	r2, r3, #150	; 0x96
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1d4f4:	f104 0647 	add.w	r6, r4, #71	; 0x47
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1d4f8:	338f      	adds	r3, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1d4fa:	9201      	str	r2, [sp, #4]
   1d4fc:	9300      	str	r3, [sp, #0]
   1d4fe:	f104 0209 	add.w	r2, r4, #9
   1d502:	f104 0310 	add.w	r3, r4, #16
   1d506:	4641      	mov	r1, r8
   1d508:	4630      	mov	r0, r6
   1d50a:	f00d fc23 	bl	2ad54 <smp_c1>
	if (err) {
   1d50e:	bb18      	cbnz	r0, 1d558 <smp_pairing_random+0x9c>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   1d510:	2210      	movs	r2, #16
   1d512:	4639      	mov	r1, r7
   1d514:	f104 0017 	add.w	r0, r4, #23
   1d518:	f00b fcdf 	bl	28eda <memcmp>
   1d51c:	2800      	cmp	r0, #0
   1d51e:	d16e      	bne.n	1d5fe <smp_pairing_random+0x142>
	memcpy(out, r2, 8);
   1d520:	2208      	movs	r2, #8
   1d522:	4641      	mov	r1, r8
   1d524:	4638      	mov	r0, r7
   1d526:	f00b fcff 	bl	28f28 <memcpy>
	memcpy(out + 8, r1, 8);
   1d52a:	2208      	movs	r2, #8
   1d52c:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1d530:	18b8      	adds	r0, r7, r2
   1d532:	f00b fcf9 	bl	28f28 <memcpy>
	return bt_encrypt_le(k, out, out);
   1d536:	463a      	mov	r2, r7
   1d538:	4639      	mov	r1, r7
   1d53a:	4630      	mov	r0, r6
   1d53c:	f00e fa16 	bl	2b96c <bt_encrypt_le>
		if (err) {
   1d540:	b178      	cbz	r0, 1d562 <smp_pairing_random+0xa6>
			LOG_ERR("Calculate STK failed");
   1d542:	4b5f      	ldr	r3, [pc, #380]	; (1d6c0 <smp_pairing_random+0x204>)
		LOG_ERR("Calculate confirm failed");
   1d544:	627b      	str	r3, [r7, #36]	; 0x24
   1d546:	2302      	movs	r3, #2
   1d548:	485e      	ldr	r0, [pc, #376]	; (1d6c4 <smp_pairing_random+0x208>)
   1d54a:	623b      	str	r3, [r7, #32]
   1d54c:	f107 0220 	add.w	r2, r7, #32
   1d550:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d554:	f00d fb27 	bl	2aba6 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1d558:	2008      	movs	r0, #8
}
   1d55a:	3728      	adds	r7, #40	; 0x28
   1d55c:	46bd      	mov	sp, r7
   1d55e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(smp->tk, tmp, sizeof(smp->tk));
   1d562:	4639      	mov	r1, r7
   1d564:	2210      	movs	r2, #16
   1d566:	4630      	mov	r0, r6
   1d568:	f00b fcde 	bl	28f28 <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1d56c:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1d56e:	4628      	mov	r0, r5
   1d570:	f00d fb27 	bl	2abc2 <atomic_set_bit>
	return smp_send_pairing_random(smp);
   1d574:	4620      	mov	r0, r4
   1d576:	f00d fb70 	bl	2ac5a <smp_send_pairing_random>
   1d57a:	e7ee      	b.n	1d55a <smp_pairing_random+0x9e>
	switch (smp->method) {
   1d57c:	7a23      	ldrb	r3, [r4, #8]
   1d57e:	2b05      	cmp	r3, #5
   1d580:	f200 808c 	bhi.w	1d69c <smp_pairing_random+0x1e0>
   1d584:	e8df f003 	tbb	[pc, r3]
   1d588:	0320201a 	.word	0x0320201a
   1d58c:	618a      	.short	0x618a
		if (bt_crypto_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd, &passkey)) {
   1d58e:	f107 0310 	add.w	r3, r7, #16
   1d592:	494d      	ldr	r1, [pc, #308]	; (1d6c8 <smp_pairing_random+0x20c>)
   1d594:	9300      	str	r3, [sp, #0]
   1d596:	6809      	ldr	r1, [r1, #0]
   1d598:	f104 0327 	add.w	r3, r4, #39	; 0x27
   1d59c:	4642      	mov	r2, r8
   1d59e:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1d5a2:	f001 f98b 	bl	1e8bc <bt_crypto_g2>
   1d5a6:	2800      	cmp	r0, #0
   1d5a8:	d1d6      	bne.n	1d558 <smp_pairing_random+0x9c>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1d5aa:	210a      	movs	r1, #10
   1d5ac:	4628      	mov	r0, r5
   1d5ae:	f00d fb08 	bl	2abc2 <atomic_set_bit>
		smp_auth_cb->passkey_confirm(smp->chan.chan.conn, passkey);
   1d5b2:	68b3      	ldr	r3, [r6, #8]
   1d5b4:	6939      	ldr	r1, [r7, #16]
   1d5b6:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1d5ba:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1d5bc:	210d      	movs	r1, #13
   1d5be:	4620      	mov	r0, r4
   1d5c0:	f00d faff 	bl	2abc2 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1d5c4:	2110      	movs	r1, #16
   1d5c6:	e7d2      	b.n	1d56e <smp_pairing_random+0xb2>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1d5c8:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   1d5cc:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1d5d0:	493d      	ldr	r1, [pc, #244]	; (1d6c8 <smp_pairing_random+0x20c>)
   1d5d2:	9700      	str	r7, [sp, #0]
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1d5d4:	40d3      	lsrs	r3, r2
   1d5d6:	f003 0301 	and.w	r3, r3, #1
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1d5da:	6809      	ldr	r1, [r1, #0]
   1d5dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1d5e0:	4642      	mov	r2, r8
   1d5e2:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1d5e6:	f00d fddf 	bl	2b1a8 <bt_crypto_f4>
   1d5ea:	b108      	cbz	r0, 1d5f0 <smp_pairing_random+0x134>
		LOG_ERR("Calculate confirm failed");
   1d5ec:	4b37      	ldr	r3, [pc, #220]	; (1d6cc <smp_pairing_random+0x210>)
   1d5ee:	e7a9      	b.n	1d544 <smp_pairing_random+0x88>
	if (memcmp(smp->pcnf, cfm, 16)) {
   1d5f0:	2210      	movs	r2, #16
   1d5f2:	4639      	mov	r1, r7
   1d5f4:	f104 0017 	add.w	r0, r4, #23
   1d5f8:	f00b fc6f 	bl	28eda <memcmp>
   1d5fc:	b108      	cbz	r0, 1d602 <smp_pairing_random+0x146>
		return BT_SMP_ERR_CONFIRM_FAILED;
   1d5fe:	2004      	movs	r0, #4
   1d600:	e7ab      	b.n	1d55a <smp_pairing_random+0x9e>
		atomic_set_bit(smp->allowed_cmds,
   1d602:	2103      	movs	r1, #3
   1d604:	4620      	mov	r0, r4
   1d606:	f00d fadc 	bl	2abc2 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   1d60a:	f00d fb26 	bl	2ac5a <smp_send_pairing_random>
		if (err) {
   1d60e:	2800      	cmp	r0, #0
   1d610:	d1a3      	bne.n	1d55a <smp_pairing_random+0x9e>
		smp->passkey_round++;
   1d612:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1d616:	3301      	adds	r3, #1
   1d618:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   1d61a:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   1d61c:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   1d620:	d109      	bne.n	1d636 <smp_pairing_random+0x17a>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1d622:	210d      	movs	r1, #13
   1d624:	4620      	mov	r0, r4
   1d626:	f00d facc 	bl	2abc2 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1d62a:	2110      	movs	r1, #16
   1d62c:	4628      	mov	r0, r5
   1d62e:	f00d fac8 	bl	2abc2 <atomic_set_bit>
			return 0;
   1d632:	2000      	movs	r0, #0
   1d634:	e791      	b.n	1d55a <smp_pairing_random+0x9e>
		if (bt_rand(smp->prnd, 16)) {
   1d636:	2110      	movs	r1, #16
   1d638:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1d63c:	f003 ff24 	bl	21488 <bt_rand>
   1d640:	3800      	subs	r0, #0
   1d642:	bf18      	it	ne
   1d644:	2001      	movne	r0, #1
   1d646:	00c0      	lsls	r0, r0, #3
   1d648:	e787      	b.n	1d55a <smp_pairing_random+0x9e>
		if (bt_rand(smp->prnd, 16)) {
   1d64a:	2110      	movs	r1, #16
   1d64c:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1d650:	f003 ff1a 	bl	21488 <bt_rand>
   1d654:	2800      	cmp	r0, #0
   1d656:	f47f af7f 	bne.w	1d558 <smp_pairing_random+0x9c>
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1d65a:	b37e      	cbz	r6, 1d6bc <smp_pairing_random+0x200>
   1d65c:	68f3      	ldr	r3, [r6, #12]
   1d65e:	b36b      	cbz	r3, 1d6bc <smp_pairing_random+0x200>
			struct bt_conn_oob_info info = {
   1d660:	4b1b      	ldr	r3, [pc, #108]	; (1d6d0 <smp_pairing_random+0x214>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1d662:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
   1d664:	881b      	ldrh	r3, [r3, #0]
   1d666:	823b      	strh	r3, [r7, #16]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1d668:	7ca3      	ldrb	r3, [r4, #18]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1d66a:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1d66c:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1d670:	d412      	bmi.n	1d698 <smp_pairing_random+0x1dc>
   1d672:	2b00      	cmp	r3, #0
   1d674:	bf14      	ite	ne
   1d676:	2301      	movne	r3, #1
   1d678:	2303      	moveq	r3, #3
	info->lesc.oob_config = oob_config;
   1d67a:	747b      	strb	r3, [r7, #17]
			smp->oobd_local = NULL;
   1d67c:	2300      	movs	r3, #0
			smp->oobd_remote = NULL;
   1d67e:	e9c4 3338 	strd	r3, r3, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   1d682:	4628      	mov	r0, r5
   1d684:	210c      	movs	r1, #12
   1d686:	f00d fa9c 	bl	2abc2 <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1d68a:	68f3      	ldr	r3, [r6, #12]
   1d68c:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1d690:	f107 0110 	add.w	r1, r7, #16
   1d694:	4798      	blx	r3
			return 0;
   1d696:	e7cc      	b.n	1d632 <smp_pairing_random+0x176>
		if (rsp_oob_present) {
   1d698:	005b      	lsls	r3, r3, #1
   1d69a:	e7ee      	b.n	1d67a <smp_pairing_random+0x1be>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1d69c:	466c      	mov	r4, sp
   1d69e:	b088      	sub	sp, #32
   1d6a0:	aa04      	add	r2, sp, #16
   1d6a2:	490c      	ldr	r1, [pc, #48]	; (1d6d4 <smp_pairing_random+0x218>)
   1d6a4:	4807      	ldr	r0, [pc, #28]	; (1d6c4 <smp_pairing_random+0x208>)
	switch (smp->method) {
   1d6a6:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1d6aa:	2303      	movs	r3, #3
   1d6ac:	f842 3f10 	str.w	r3, [r2, #16]!
   1d6b0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d6b4:	f00d fa77 	bl	2aba6 <z_log_msg_static_create.constprop.0>
   1d6b8:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   1d6ba:	e74d      	b.n	1d558 <smp_pairing_random+0x9c>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1d6bc:	2002      	movs	r0, #2
   1d6be:	e74c      	b.n	1d55a <smp_pairing_random+0x9e>
   1d6c0:	0002fc58 	.word	0x0002fc58
   1d6c4:	0002cb6c 	.word	0x0002cb6c
   1d6c8:	200035b8 	.word	0x200035b8
   1d6cc:	0002fc6d 	.word	0x0002fc6d
   1d6d0:	0002cd48 	.word	0x0002cd48
   1d6d4:	0002fb77 	.word	0x0002fb77

0001d6d8 <bt_smp_start_security>:
{
   1d6d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   1d6dc:	78c6      	ldrb	r6, [r0, #3]
   1d6de:	2e01      	cmp	r6, #1
{
   1d6e0:	4604      	mov	r4, r0
	switch (conn->role) {
   1d6e2:	d005      	beq.n	1d6f0 <bt_smp_start_security+0x18>
		return -EINVAL;
   1d6e4:	f06f 0415 	mvn.w	r4, #21
}
   1d6e8:	4620      	mov	r0, r4
   1d6ea:	b003      	add	sp, #12
   1d6ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   1d6f0:	f00d fa5c 	bl	2abac <smp_chan_get>
	if (!smp) {
   1d6f4:	4605      	mov	r5, r0
   1d6f6:	2800      	cmp	r0, #0
   1d6f8:	f000 80ac 	beq.w	1d854 <bt_smp_start_security+0x17c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1d6fc:	1d07      	adds	r7, r0, #4
   1d6fe:	2104      	movs	r1, #4
   1d700:	4638      	mov	r0, r7
   1d702:	f00d fa15 	bl	2ab30 <atomic_test_bit>
   1d706:	2800      	cmp	r0, #0
   1d708:	f040 80a7 	bne.w	1d85a <bt_smp_start_security+0x182>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1d70c:	2103      	movs	r1, #3
   1d70e:	4638      	mov	r0, r7
   1d710:	f00d fa0e 	bl	2ab30 <atomic_test_bit>
   1d714:	b110      	cbz	r0, 1d71c <bt_smp_start_security+0x44>
		return -EBUSY;
   1d716:	f06f 040f 	mvn.w	r4, #15
   1d71a:	e7e5      	b.n	1d6e8 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1d71c:	4631      	mov	r1, r6
   1d71e:	4638      	mov	r0, r7
   1d720:	f00d fa06 	bl	2ab30 <atomic_test_bit>
   1d724:	2800      	cmp	r0, #0
   1d726:	d1f6      	bne.n	1d716 <bt_smp_start_security+0x3e>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d728:	4628      	mov	r0, r5
   1d72a:	f7ff f8cb 	bl	1c8c4 <latch_auth_cb>
	switch (smp->chan.chan.conn->required_sec_level) {
   1d72e:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   1d732:	7a9b      	ldrb	r3, [r3, #10]
   1d734:	2b03      	cmp	r3, #3
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d736:	4606      	mov	r6, r0
	switch (smp->chan.chan.conn->required_sec_level) {
   1d738:	d042      	beq.n	1d7c0 <bt_smp_start_security+0xe8>
   1d73a:	d832      	bhi.n	1d7a2 <bt_smp_start_security+0xca>
   1d73c:	3b01      	subs	r3, #1
   1d73e:	2b01      	cmp	r3, #1
   1d740:	d948      	bls.n	1d7d4 <bt_smp_start_security+0xfc>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   1d742:	210b      	movs	r1, #11
   1d744:	1d20      	adds	r0, r4, #4
   1d746:	f00d f9f3 	bl	2ab30 <atomic_test_bit>
   1d74a:	2800      	cmp	r0, #0
   1d74c:	d1ca      	bne.n	1d6e4 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
   1d74e:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   1d752:	b983      	cbnz	r3, 1d776 <bt_smp_start_security+0x9e>
						     conn->id, &conn->le.dst);
   1d754:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   1d758:	7a21      	ldrb	r1, [r4, #8]
   1d75a:	4632      	mov	r2, r6
   1d75c:	2020      	movs	r0, #32
   1d75e:	f000 fe75 	bl	1e44c <bt_keys_find>
   1d762:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
		if (!conn->le.keys) {
   1d766:	b930      	cbnz	r0, 1d776 <bt_smp_start_security+0x9e>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   1d768:	7a21      	ldrb	r1, [r4, #8]
   1d76a:	4632      	mov	r2, r6
   1d76c:	2004      	movs	r0, #4
   1d76e:	f000 fe6d 	bl	1e44c <bt_keys_find>
   1d772:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	if (!conn->le.keys ||
   1d776:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   1d77a:	2b00      	cmp	r3, #0
   1d77c:	d0b2      	beq.n	1d6e4 <bt_smp_start_security+0xc>
	    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
   1d77e:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
   1d780:	f012 0f24 	tst.w	r2, #36	; 0x24
   1d784:	d0ae      	beq.n	1d6e4 <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L3 &&
   1d786:	7aa1      	ldrb	r1, [r4, #10]
   1d788:	2902      	cmp	r1, #2
   1d78a:	d923      	bls.n	1d7d4 <bt_smp_start_security+0xfc>
   1d78c:	7b58      	ldrb	r0, [r3, #13]
   1d78e:	07c0      	lsls	r0, r0, #31
   1d790:	d5a8      	bpl.n	1d6e4 <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L4 &&
   1d792:	2903      	cmp	r1, #3
   1d794:	d01e      	beq.n	1d7d4 <bt_smp_start_security+0xfc>
	    !((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   1d796:	0692      	lsls	r2, r2, #26
   1d798:	d5a4      	bpl.n	1d6e4 <bt_smp_start_security+0xc>
   1d79a:	7b1b      	ldrb	r3, [r3, #12]
   1d79c:	2b10      	cmp	r3, #16
   1d79e:	d1a1      	bne.n	1d6e4 <bt_smp_start_security+0xc>
   1d7a0:	e018      	b.n	1d7d4 <bt_smp_start_security+0xfc>
	switch (smp->chan.chan.conn->required_sec_level) {
   1d7a2:	2b04      	cmp	r3, #4
   1d7a4:	d1cd      	bne.n	1d742 <bt_smp_start_security+0x6a>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1d7a6:	4628      	mov	r0, r5
   1d7a8:	f7ff f8aa 	bl	1c900 <get_io_capa>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1d7ac:	2803      	cmp	r0, #3
   1d7ae:	d104      	bne.n	1d7ba <bt_smp_start_security+0xe2>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1d7b0:	2e00      	cmp	r6, #0
   1d7b2:	d0c6      	beq.n	1d742 <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1d7b4:	68f3      	ldr	r3, [r6, #12]
   1d7b6:	2b00      	cmp	r3, #0
   1d7b8:	d0c3      	beq.n	1d742 <bt_smp_start_security+0x6a>
   1d7ba:	4b29      	ldr	r3, [pc, #164]	; (1d860 <bt_smp_start_security+0x188>)
   1d7bc:	781b      	ldrb	r3, [r3, #0]
   1d7be:	e007      	b.n	1d7d0 <bt_smp_start_security+0xf8>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1d7c0:	4628      	mov	r0, r5
   1d7c2:	f7ff f89d 	bl	1c900 <get_io_capa>
   1d7c6:	2803      	cmp	r0, #3
   1d7c8:	d104      	bne.n	1d7d4 <bt_smp_start_security+0xfc>
   1d7ca:	2e00      	cmp	r6, #0
   1d7cc:	d0b9      	beq.n	1d742 <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request);
   1d7ce:	68f3      	ldr	r3, [r6, #12]
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1d7d0:	2b00      	cmp	r3, #0
   1d7d2:	d0b6      	beq.n	1d742 <bt_smp_start_security+0x6a>
	if (!conn->le.keys) {
   1d7d4:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   1d7d8:	b13b      	cbz	r3, 1d7ea <bt_smp_start_security+0x112>
	if (smp_init(smp) != 0) {
   1d7da:	4628      	mov	r0, r5
   1d7dc:	f7ff f952 	bl	1ca84 <smp_init>
   1d7e0:	4680      	mov	r8, r0
   1d7e2:	b170      	cbz	r0, 1d802 <bt_smp_start_security+0x12a>
		return -ENOBUFS;
   1d7e4:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1d7e8:	e77e      	b.n	1d6e8 <bt_smp_start_security+0x10>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1d7ea:	7a20      	ldrb	r0, [r4, #8]
   1d7ec:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1d7f0:	f000 fdac 	bl	1e34c <bt_keys_get_addr>
   1d7f4:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
		if (!conn->le.keys) {
   1d7f8:	2800      	cmp	r0, #0
   1d7fa:	d1ee      	bne.n	1d7da <bt_smp_start_security+0x102>
			return -ENOMEM;
   1d7fc:	f06f 040b 	mvn.w	r4, #11
   1d800:	e772      	b.n	1d6e8 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   1d802:	210b      	movs	r1, #11
   1d804:	4628      	mov	r0, r5
   1d806:	f00d f9f0 	bl	2abea <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1d80a:	4606      	mov	r6, r0
   1d80c:	2800      	cmp	r0, #0
   1d80e:	d0e9      	beq.n	1d7e4 <bt_smp_start_security+0x10c>
   1d810:	2101      	movs	r1, #1
   1d812:	300c      	adds	r0, #12
   1d814:	f00d fd9a 	bl	2b34c <net_buf_simple_add>
	req->auth_req = get_auth(smp, BT_SMP_AUTH_DEFAULT);
   1d818:	2109      	movs	r1, #9
   1d81a:	4681      	mov	r9, r0
   1d81c:	4628      	mov	r0, r5
   1d81e:	f7ff f895 	bl	1c94c <get_auth>
   1d822:	4643      	mov	r3, r8
   1d824:	f889 0000 	strb.w	r0, [r9]
   1d828:	4632      	mov	r2, r6
   1d82a:	4620      	mov	r0, r4
   1d82c:	f8cd 8000 	str.w	r8, [sp]
   1d830:	2106      	movs	r1, #6
   1d832:	f00c f94f 	bl	29ad4 <bt_l2cap_send_cb>
	if (err) {
   1d836:	4604      	mov	r4, r0
   1d838:	b118      	cbz	r0, 1d842 <bt_smp_start_security+0x16a>
		net_buf_unref(req_buf);
   1d83a:	4630      	mov	r0, r6
   1d83c:	f001 f934 	bl	1eaa8 <net_buf_unref>
		return err;
   1d840:	e752      	b.n	1d6e8 <bt_smp_start_security+0x10>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   1d842:	4638      	mov	r0, r7
   1d844:	210f      	movs	r1, #15
   1d846:	f00d f9bc 	bl	2abc2 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1d84a:	2101      	movs	r1, #1
   1d84c:	4628      	mov	r0, r5
   1d84e:	f00d f9b8 	bl	2abc2 <atomic_set_bit>
	return 0;
   1d852:	e749      	b.n	1d6e8 <bt_smp_start_security+0x10>
		return -ENOTCONN;
   1d854:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   1d858:	e746      	b.n	1d6e8 <bt_smp_start_security+0x10>
		return -EIO;
   1d85a:	f06f 0404 	mvn.w	r4, #4
   1d85e:	e743      	b.n	1d6e8 <bt_smp_start_security+0x10>
   1d860:	20004660 	.word	0x20004660

0001d864 <smp_pairing_complete>:
{
   1d864:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   1d866:	f8d0 40ec 	ldr.w	r4, [r0, #236]	; 0xec
	if (conn->state != BT_CONN_CONNECTED) {
   1d86a:	7b63      	ldrb	r3, [r4, #13]
   1d86c:	2b07      	cmp	r3, #7
{
   1d86e:	b087      	sub	sp, #28
   1d870:	4606      	mov	r6, r0
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1d872:	f100 0504 	add.w	r5, r0, #4
	if (conn->state != BT_CONN_CONNECTED) {
   1d876:	d037      	beq.n	1d8e8 <smp_pairing_complete+0x84>
		LOG_WRN("Not connected!");
   1d878:	4b43      	ldr	r3, [pc, #268]	; (1d988 <smp_pairing_complete+0x124>)
   1d87a:	9305      	str	r3, [sp, #20]
   1d87c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1d880:	2302      	movs	r3, #2
   1d882:	4842      	ldr	r0, [pc, #264]	; (1d98c <smp_pairing_complete+0x128>)
   1d884:	9304      	str	r3, [sp, #16]
   1d886:	aa04      	add	r2, sp, #16
   1d888:	f00d f98d 	bl	2aba6 <z_log_msg_static_create.constprop.0>
	switch (smp_err) {
   1d88c:	2107      	movs	r1, #7
   1d88e:	4b40      	ldr	r3, [pc, #256]	; (1d990 <smp_pairing_complete+0x12c>)
   1d890:	5c5f      	ldrb	r7, [r3, r1]
		if (conn->le.keys &&
   1d892:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   1d896:	b14b      	cbz	r3, 1d8ac <smp_pairing_complete+0x48>
   1d898:	7b1b      	ldrb	r3, [r3, #12]
   1d89a:	2b00      	cmp	r3, #0
   1d89c:	d15c      	bne.n	1d958 <smp_pairing_complete+0xf4>
			bt_keys_clear(conn->le.keys);
   1d89e:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   1d8a2:	f000 fe69 	bl	1e578 <bt_keys_clear>
			conn->le.keys = NULL;
   1d8a6:	2300      	movs	r3, #0
   1d8a8:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1d8ac:	2102      	movs	r1, #2
   1d8ae:	4628      	mov	r0, r5
   1d8b0:	f00d f93e 	bl	2ab30 <atomic_test_bit>
   1d8b4:	b940      	cbnz	r0, 1d8c8 <smp_pairing_complete+0x64>
	switch (err) {
   1d8b6:	2f07      	cmp	r7, #7
   1d8b8:	bf96      	itet	ls
   1d8ba:	4b36      	ldrls	r3, [pc, #216]	; (1d994 <smp_pairing_complete+0x130>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1d8bc:	211f      	movhi	r1, #31
   1d8be:	5dd9      	ldrbls	r1, [r3, r7]
			bt_conn_security_changed(conn,
   1d8c0:	463a      	mov	r2, r7
   1d8c2:	4620      	mov	r0, r4
   1d8c4:	f7fb fe82 	bl	195cc <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1d8c8:	2103      	movs	r1, #3
   1d8ca:	4628      	mov	r0, r5
   1d8cc:	f00d f930 	bl	2ab30 <atomic_test_bit>
   1d8d0:	b360      	cbz	r0, 1d92c <smp_pairing_complete+0xc8>
	return list->head;
   1d8d2:	4b31      	ldr	r3, [pc, #196]	; (1d998 <smp_pairing_complete+0x134>)
   1d8d4:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1d8d6:	b34b      	cbz	r3, 1d92c <smp_pairing_complete+0xc8>
	return node->next;
   1d8d8:	681d      	ldr	r5, [r3, #0]
   1d8da:	b105      	cbz	r5, 1d8de <smp_pairing_complete+0x7a>
   1d8dc:	3d0c      	subs	r5, #12
				if (listener->pairing_failed) {
   1d8de:	f853 3c08 	ldr.w	r3, [r3, #-8]
   1d8e2:	2b00      	cmp	r3, #0
   1d8e4:	d141      	bne.n	1d96a <smp_pairing_complete+0x106>
   1d8e6:	e043      	b.n	1d970 <smp_pairing_complete+0x10c>
	if (!status) {
   1d8e8:	bb81      	cbnz	r1, 1d94c <smp_pairing_complete+0xe8>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1d8ea:	210d      	movs	r1, #13
   1d8ec:	4628      	mov	r0, r5
   1d8ee:	f00d f91f 	bl	2ab30 <atomic_test_bit>
		if (bond_flag) {
   1d8f2:	4607      	mov	r7, r0
   1d8f4:	b118      	cbz	r0, 1d8fe <smp_pairing_complete+0x9a>
			bt_keys_store(conn->le.keys);
   1d8f6:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   1d8fa:	f000 ff3f 	bl	1e77c <bt_keys_store>
	return list->head;
   1d8fe:	4b26      	ldr	r3, [pc, #152]	; (1d998 <smp_pairing_complete+0x134>)
   1d900:	681b      	ldr	r3, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1d902:	b19b      	cbz	r3, 1d92c <smp_pairing_complete+0xc8>
	return node->next;
   1d904:	681d      	ldr	r5, [r3, #0]
   1d906:	b105      	cbz	r5, 1d90a <smp_pairing_complete+0xa6>
   1d908:	3d0c      	subs	r5, #12
			if (listener->pairing_complete) {
   1d90a:	f853 3c0c 	ldr.w	r3, [r3, #-12]
   1d90e:	b113      	cbz	r3, 1d916 <smp_pairing_complete+0xb2>
				listener->pairing_complete(conn, bond_flag);
   1d910:	4639      	mov	r1, r7
   1d912:	4620      	mov	r0, r4
   1d914:	4798      	blx	r3
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1d916:	b14d      	cbz	r5, 1d92c <smp_pairing_complete+0xc8>
   1d918:	462b      	mov	r3, r5
   1d91a:	68ed      	ldr	r5, [r5, #12]
   1d91c:	681b      	ldr	r3, [r3, #0]
   1d91e:	b11d      	cbz	r5, 1d928 <smp_pairing_complete+0xc4>
   1d920:	3d0c      	subs	r5, #12
			if (listener->pairing_complete) {
   1d922:	2b00      	cmp	r3, #0
   1d924:	d1f4      	bne.n	1d910 <smp_pairing_complete+0xac>
   1d926:	e7f7      	b.n	1d918 <smp_pairing_complete+0xb4>
   1d928:	2b00      	cmp	r3, #0
   1d92a:	d1f1      	bne.n	1d910 <smp_pairing_complete+0xac>
	smp_reset(smp);
   1d92c:	4630      	mov	r0, r6
   1d92e:	f00d f9ee 	bl	2ad0e <smp_reset>
	if (conn->state == BT_CONN_CONNECTED && conn->sec_level != conn->required_sec_level) {
   1d932:	7b63      	ldrb	r3, [r4, #13]
   1d934:	2b07      	cmp	r3, #7
   1d936:	d125      	bne.n	1d984 <smp_pairing_complete+0x120>
   1d938:	7a62      	ldrb	r2, [r4, #9]
   1d93a:	7aa3      	ldrb	r3, [r4, #10]
   1d93c:	429a      	cmp	r2, r3
   1d93e:	d021      	beq.n	1d984 <smp_pairing_complete+0x120>
		bt_smp_start_security(conn);
   1d940:	4620      	mov	r0, r4
}
   1d942:	b007      	add	sp, #28
   1d944:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   1d948:	f7ff bec6 	b.w	1d6d8 <bt_smp_start_security>
	switch (smp_err) {
   1d94c:	3901      	subs	r1, #1
   1d94e:	b2c9      	uxtb	r1, r1
   1d950:	290e      	cmp	r1, #14
   1d952:	d99c      	bls.n	1d88e <smp_pairing_complete+0x2a>
	if (!status) {
   1d954:	2709      	movs	r7, #9
   1d956:	e79c      	b.n	1d892 <smp_pairing_complete+0x2e>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   1d958:	2102      	movs	r1, #2
   1d95a:	4628      	mov	r0, r5
   1d95c:	f00d f8e8 	bl	2ab30 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   1d960:	2800      	cmp	r0, #0
   1d962:	d19c      	bne.n	1d89e <smp_pairing_complete+0x3a>
   1d964:	e7a2      	b.n	1d8ac <smp_pairing_complete+0x48>
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1d966:	3d0c      	subs	r5, #12
				if (listener->pairing_failed) {
   1d968:	b123      	cbz	r3, 1d974 <smp_pairing_complete+0x110>
					listener->pairing_failed(conn, security_err);
   1d96a:	4639      	mov	r1, r7
   1d96c:	4620      	mov	r0, r4
   1d96e:	4798      	blx	r3
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1d970:	2d00      	cmp	r5, #0
   1d972:	d0db      	beq.n	1d92c <smp_pairing_complete+0xc8>
   1d974:	462b      	mov	r3, r5
   1d976:	68ed      	ldr	r5, [r5, #12]
   1d978:	685b      	ldr	r3, [r3, #4]
   1d97a:	2d00      	cmp	r5, #0
   1d97c:	d1f3      	bne.n	1d966 <smp_pairing_complete+0x102>
				if (listener->pairing_failed) {
   1d97e:	2b00      	cmp	r3, #0
   1d980:	d1f3      	bne.n	1d96a <smp_pairing_complete+0x106>
   1d982:	e7d3      	b.n	1d92c <smp_pairing_complete+0xc8>
}
   1d984:	b007      	add	sp, #28
   1d986:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d988:	0002fc86 	.word	0x0002fc86
   1d98c:	0002cb6c 	.word	0x0002cb6c
   1d990:	0002feec 	.word	0x0002feec
   1d994:	0002fedb 	.word	0x0002fedb
   1d998:	2000349c 	.word	0x2000349c

0001d99c <smp_error>:
{
   1d99c:	b5f0      	push	{r4, r5, r6, r7, lr}
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   1d99e:	1d03      	adds	r3, r0, #4
{
   1d9a0:	b089      	sub	sp, #36	; 0x24
   1d9a2:	4606      	mov	r6, r0
   1d9a4:	460f      	mov	r7, r1
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   1d9a6:	4618      	mov	r0, r3
   1d9a8:	2102      	movs	r1, #2
   1d9aa:	f00d f8c1 	bl	2ab30 <atomic_test_bit>
				    !smp->local_dist && !smp->remote_dist);
   1d9ae:	4604      	mov	r4, r0
   1d9b0:	b120      	cbz	r0, 1d9bc <smp_error+0x20>
   1d9b2:	f8b6 40e8 	ldrh.w	r4, [r6, #232]	; 0xe8
   1d9b6:	fab4 f484 	clz	r4, r4
   1d9ba:	0964      	lsrs	r4, r4, #5
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1d9bc:	2103      	movs	r1, #3
   1d9be:	4618      	mov	r0, r3
   1d9c0:	f00d f8b6 	bl	2ab30 <atomic_test_bit>
   1d9c4:	b1b0      	cbz	r0, 1d9f4 <smp_error+0x58>
		smp_pairing_complete(smp, reason);
   1d9c6:	4639      	mov	r1, r7
   1d9c8:	4630      	mov	r0, r6
   1d9ca:	f7ff ff4b 	bl	1d864 <smp_pairing_complete>
	if (remote_already_completed) {
   1d9ce:	b1f4      	cbz	r4, 1da0e <smp_error+0x72>
		LOG_WRN("SMP does not allow a pairing failure at this point. Known issue. "
   1d9d0:	4b1d      	ldr	r3, [pc, #116]	; (1da48 <smp_error+0xac>)
   1d9d2:	481e      	ldr	r0, [pc, #120]	; (1da4c <smp_error+0xb0>)
   1d9d4:	9307      	str	r3, [sp, #28]
   1d9d6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1d9da:	2302      	movs	r3, #2
   1d9dc:	aa06      	add	r2, sp, #24
   1d9de:	9306      	str	r3, [sp, #24]
   1d9e0:	f00d f8e1 	bl	2aba6 <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(smp->chan.chan.conn, BT_HCI_ERR_AUTH_FAIL);
   1d9e4:	2105      	movs	r1, #5
   1d9e6:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   1d9ea:	f00b ff53 	bl	29894 <bt_conn_disconnect>
		return 0;
   1d9ee:	2000      	movs	r0, #0
}
   1d9f0:	b009      	add	sp, #36	; 0x24
   1d9f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1d9f4:	2101      	movs	r1, #1
   1d9f6:	4618      	mov	r0, r3
   1d9f8:	f00d f89a 	bl	2ab30 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1d9fc:	2800      	cmp	r0, #0
   1d9fe:	d1e2      	bne.n	1d9c6 <smp_error+0x2a>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1da00:	210f      	movs	r1, #15
   1da02:	4618      	mov	r0, r3
   1da04:	f00d f894 	bl	2ab30 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1da08:	2800      	cmp	r0, #0
   1da0a:	d1dc      	bne.n	1d9c6 <smp_error+0x2a>
   1da0c:	e7df      	b.n	1d9ce <smp_error+0x32>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   1da0e:	2105      	movs	r1, #5
   1da10:	4630      	mov	r0, r6
   1da12:	f00d f8ea 	bl	2abea <smp_create_pdu.constprop.0>
	if (!buf) {
   1da16:	4605      	mov	r5, r0
   1da18:	b190      	cbz	r0, 1da40 <smp_error+0xa4>
   1da1a:	2101      	movs	r1, #1
   1da1c:	300c      	adds	r0, #12
   1da1e:	f00d fc95 	bl	2b34c <net_buf_simple_add>
	rsp->reason = reason;
   1da22:	7007      	strb	r7, [r0, #0]
   1da24:	9400      	str	r4, [sp, #0]
   1da26:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   1da2a:	4623      	mov	r3, r4
   1da2c:	462a      	mov	r2, r5
   1da2e:	2106      	movs	r1, #6
   1da30:	f00c f850 	bl	29ad4 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   1da34:	2800      	cmp	r0, #0
   1da36:	d0da      	beq.n	1d9ee <smp_error+0x52>
		net_buf_unref(buf);
   1da38:	4628      	mov	r0, r5
   1da3a:	f001 f835 	bl	1eaa8 <net_buf_unref>
   1da3e:	e7d6      	b.n	1d9ee <smp_error+0x52>
		return -ENOBUFS;
   1da40:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1da44:	e7d4      	b.n	1d9f0 <smp_error+0x54>
   1da46:	bf00      	nop
   1da48:	0002fc95 	.word	0x0002fc95
   1da4c:	0002cb6c 	.word	0x0002cb6c

0001da50 <bt_smp_recv>:
{
   1da50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1da54:	b087      	sub	sp, #28
	if (buf->len < sizeof(*hdr)) {
   1da56:	8a0b      	ldrh	r3, [r1, #16]
{
   1da58:	af00      	add	r7, sp, #0
   1da5a:	4604      	mov	r4, r0
   1da5c:	460e      	mov	r6, r1
	if (buf->len < sizeof(*hdr)) {
   1da5e:	b97b      	cbnz	r3, 1da80 <bt_smp_recv+0x30>
		LOG_ERR("Too small SMP PDU received");
   1da60:	4b47      	ldr	r3, [pc, #284]	; (1db80 <bt_smp_recv+0x130>)
   1da62:	617b      	str	r3, [r7, #20]
   1da64:	4847      	ldr	r0, [pc, #284]	; (1db84 <bt_smp_recv+0x134>)
   1da66:	2302      	movs	r3, #2
   1da68:	f107 0210 	add.w	r2, r7, #16
   1da6c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1da70:	613b      	str	r3, [r7, #16]
   1da72:	f00d f898 	bl	2aba6 <z_log_msg_static_create.constprop.0>
}
   1da76:	2000      	movs	r0, #0
   1da78:	371c      	adds	r7, #28
   1da7a:	46bd      	mov	sp, r7
   1da7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1da80:	2101      	movs	r1, #1
   1da82:	f106 000c 	add.w	r0, r6, #12
   1da86:	f00d fc88 	bl	2b39a <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1da8a:	f1a4 05ec 	sub.w	r5, r4, #236	; 0xec
   1da8e:	3ce8      	subs	r4, #232	; 0xe8
   1da90:	4680      	mov	r8, r0
   1da92:	2104      	movs	r1, #4
   1da94:	4620      	mov	r0, r4
   1da96:	f00d f84b 	bl	2ab30 <atomic_test_bit>
   1da9a:	f898 1000 	ldrb.w	r1, [r8]
   1da9e:	b178      	cbz	r0, 1dac0 <bt_smp_recv+0x70>
		LOG_WRN("SMP command (code 0x%02x) received after timeout", hdr->code);
   1daa0:	466c      	mov	r4, sp
   1daa2:	b088      	sub	sp, #32
   1daa4:	466a      	mov	r2, sp
   1daa6:	4b38      	ldr	r3, [pc, #224]	; (1db88 <bt_smp_recv+0x138>)
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   1daa8:	4836      	ldr	r0, [pc, #216]	; (1db84 <bt_smp_recv+0x134>)
   1daaa:	e9c2 3105 	strd	r3, r1, [r2, #20]
   1daae:	2303      	movs	r3, #3
   1dab0:	f842 3f10 	str.w	r3, [r2, #16]!
   1dab4:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1dab8:	f00d f875 	bl	2aba6 <z_log_msg_static_create.constprop.0>
   1dabc:	46a5      	mov	sp, r4
		return 0;
   1dabe:	e7da      	b.n	1da76 <bt_smp_recv+0x26>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   1dac0:	290e      	cmp	r1, #14
   1dac2:	d904      	bls.n	1dace <bt_smp_recv+0x7e>
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   1dac4:	466c      	mov	r4, sp
   1dac6:	b088      	sub	sp, #32
   1dac8:	466a      	mov	r2, sp
   1daca:	4b30      	ldr	r3, [pc, #192]	; (1db8c <bt_smp_recv+0x13c>)
   1dacc:	e7ec      	b.n	1daa8 <bt_smp_recv+0x58>
	if (!handlers[hdr->code].func) {
   1dace:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 1db90 <bt_smp_recv+0x140>
   1dad2:	f859 3031 	ldr.w	r3, [r9, r1, lsl #3]
   1dad6:	b99b      	cbnz	r3, 1db00 <bt_smp_recv+0xb0>
		LOG_WRN("Unhandled SMP code 0x%02x", hdr->code);
   1dad8:	466c      	mov	r4, sp
   1dada:	b088      	sub	sp, #32
   1dadc:	466a      	mov	r2, sp
   1dade:	4b2d      	ldr	r3, [pc, #180]	; (1db94 <bt_smp_recv+0x144>)
   1dae0:	4828      	ldr	r0, [pc, #160]	; (1db84 <bt_smp_recv+0x134>)
   1dae2:	e9c2 3105 	strd	r3, r1, [r2, #20]
   1dae6:	2303      	movs	r3, #3
   1dae8:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1daec:	f842 3f10 	str.w	r3, [r2, #16]!
   1daf0:	f00d f859 	bl	2aba6 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   1daf4:	2107      	movs	r1, #7
   1daf6:	46a5      	mov	sp, r4
		smp_error(smp, err);
   1daf8:	4628      	mov	r0, r5
   1dafa:	f7ff ff4f 	bl	1d99c <smp_error>
   1dafe:	e7ba      	b.n	1da76 <bt_smp_recv+0x26>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   1db00:	4628      	mov	r0, r5
   1db02:	f00d f8ee 	bl	2ace2 <atomic_test_and_clear_bit>
   1db06:	f898 3000 	ldrb.w	r3, [r8]
   1db0a:	b9b0      	cbnz	r0, 1db3a <bt_smp_recv+0xea>
		LOG_WRN("Unexpected SMP code 0x%02x", hdr->code);
   1db0c:	46e8      	mov	r8, sp
   1db0e:	b088      	sub	sp, #32
   1db10:	466a      	mov	r2, sp
   1db12:	4921      	ldr	r1, [pc, #132]	; (1db98 <bt_smp_recv+0x148>)
   1db14:	481b      	ldr	r0, [pc, #108]	; (1db84 <bt_smp_recv+0x134>)
   1db16:	2603      	movs	r6, #3
   1db18:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1db1c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1db20:	f842 6f10 	str.w	r6, [r2, #16]!
   1db24:	f00d f83f 	bl	2aba6 <z_log_msg_static_create.constprop.0>
	return atomic_test_bit(smp->flags, SMP_FLAG_PAIRING);
   1db28:	4631      	mov	r1, r6
   1db2a:	46c5      	mov	sp, r8
   1db2c:	4620      	mov	r0, r4
   1db2e:	f00c ffff 	bl	2ab30 <atomic_test_bit>
		if (is_in_pairing_procedure(smp)) {
   1db32:	2800      	cmp	r0, #0
   1db34:	d09f      	beq.n	1da76 <bt_smp_recv+0x26>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1db36:	2108      	movs	r1, #8
   1db38:	e7de      	b.n	1daf8 <bt_smp_recv+0xa8>
	if (buf->len != handlers[hdr->code].expect_len) {
   1db3a:	eb09 02c3 	add.w	r2, r9, r3, lsl #3
   1db3e:	8a31      	ldrh	r1, [r6, #16]
   1db40:	7912      	ldrb	r2, [r2, #4]
   1db42:	428a      	cmp	r2, r1
   1db44:	d011      	beq.n	1db6a <bt_smp_recv+0x11a>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1db46:	466c      	mov	r4, sp
   1db48:	b088      	sub	sp, #32
   1db4a:	466a      	mov	r2, sp
   1db4c:	4813      	ldr	r0, [pc, #76]	; (1db9c <bt_smp_recv+0x14c>)
   1db4e:	61d3      	str	r3, [r2, #28]
   1db50:	2304      	movs	r3, #4
   1db52:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1db56:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1db5a:	f842 3f10 	str.w	r3, [r2, #16]!
   1db5e:	4809      	ldr	r0, [pc, #36]	; (1db84 <bt_smp_recv+0x134>)
   1db60:	f00d f821 	bl	2aba6 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   1db64:	210a      	movs	r1, #10
   1db66:	46a5      	mov	sp, r4
   1db68:	e7c6      	b.n	1daf8 <bt_smp_recv+0xa8>
	err = handlers[hdr->code].func(smp, buf);
   1db6a:	4631      	mov	r1, r6
   1db6c:	f859 3033 	ldr.w	r3, [r9, r3, lsl #3]
   1db70:	4628      	mov	r0, r5
   1db72:	4798      	blx	r3
	if (err) {
   1db74:	4601      	mov	r1, r0
   1db76:	2800      	cmp	r0, #0
   1db78:	f43f af7d 	beq.w	1da76 <bt_smp_recv+0x26>
   1db7c:	e7bc      	b.n	1daf8 <bt_smp_recv+0xa8>
   1db7e:	bf00      	nop
   1db80:	0002fced 	.word	0x0002fced
   1db84:	0002cb6c 	.word	0x0002cb6c
   1db88:	0002fd08 	.word	0x0002fd08
   1db8c:	0002fd39 	.word	0x0002fd39
   1db90:	0002d2ec 	.word	0x0002d2ec
   1db94:	0002fd5b 	.word	0x0002fd5b
   1db98:	0002fd75 	.word	0x0002fd75
   1db9c:	0002f6a7 	.word	0x0002f6a7

0001dba0 <bt_smp_pkey_ready>:
	sc_public_key = pkey;
   1dba0:	4b0e      	ldr	r3, [pc, #56]	; (1dbdc <bt_smp_pkey_ready+0x3c>)
{
   1dba2:	b510      	push	{r4, lr}
	sc_public_key = pkey;
   1dba4:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   1dba6:	b918      	cbnz	r0, 1dbb0 <bt_smp_pkey_ready+0x10>
}
   1dba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1dbac:	f7fe bf1a 	b.w	1c9e4 <bt_smp_pkey_ready.part.0>
		err = smp_public_key_periph(smp);
   1dbb0:	4c0b      	ldr	r4, [pc, #44]	; (1dbe0 <bt_smp_pkey_ready+0x40>)
	z_impl_k_sem_give(sem);
   1dbb2:	480c      	ldr	r0, [pc, #48]	; (1dbe4 <bt_smp_pkey_ready+0x44>)
   1dbb4:	f005 fbae 	bl	23314 <z_impl_k_sem_give>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1dbb8:	f3bf 8f5b 	dmb	ish
   1dbbc:	f854 3904 	ldr.w	r3, [r4], #-4
   1dbc0:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   1dbc4:	065b      	lsls	r3, r3, #25
   1dbc6:	d507      	bpl.n	1dbd8 <bt_smp_pkey_ready+0x38>
		err = smp_public_key_periph(smp);
   1dbc8:	4620      	mov	r0, r4
   1dbca:	f7ff f86d 	bl	1cca8 <smp_public_key_periph>
		if (err) {
   1dbce:	4601      	mov	r1, r0
   1dbd0:	b110      	cbz	r0, 1dbd8 <bt_smp_pkey_ready+0x38>
			smp_error(smp, err);
   1dbd2:	4620      	mov	r0, r4
   1dbd4:	f7ff fee2 	bl	1d99c <smp_error>
}
   1dbd8:	bd10      	pop	{r4, pc}
   1dbda:	bf00      	nop
   1dbdc:	200035b8 	.word	0x200035b8
   1dbe0:	200021bc 	.word	0x200021bc
   1dbe4:	20000b08 	.word	0x20000b08

0001dbe8 <smp_ident_addr_info>:
{
   1dbe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1dbec:	b086      	sub	sp, #24
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1dbee:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   1dbf2:	f8d1 800c 	ldr.w	r8, [r1, #12]
	struct bt_conn *conn = smp->chan.chan.conn;
   1dbf6:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1dbfa:	f023 0302 	bic.w	r3, r3, #2
   1dbfe:	f880 30e9 	strb.w	r3, [r0, #233]	; 0xe9
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1dc02:	f898 3000 	ldrb.w	r3, [r8]
{
   1dc06:	af00      	add	r7, sp, #0
   1dc08:	4604      	mov	r4, r0
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1dc0a:	f105 0988 	add.w	r9, r5, #136	; 0x88
   1dc0e:	b3ab      	cbz	r3, 1dc7c <smp_ident_addr_info+0x94>
	if (!bt_addr_le_is_identity(&req->addr)) {
   1dc10:	f898 3006 	ldrb.w	r3, [r8, #6]
   1dc14:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1dc18:	2bc0      	cmp	r3, #192	; 0xc0
   1dc1a:	d02f      	beq.n	1dc7c <smp_ident_addr_info+0x94>
		LOG_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   1dc1c:	4640      	mov	r0, r8
   1dc1e:	f7f7 ff0d 	bl	15a3c <bt_addr_le_str>
   1dc22:	466e      	mov	r6, sp
   1dc24:	b088      	sub	sp, #32
   1dc26:	466c      	mov	r4, sp
   1dc28:	4b58      	ldr	r3, [pc, #352]	; (1dd8c <smp_ident_addr_info+0x1a4>)
   1dc2a:	f8df 8164 	ldr.w	r8, [pc, #356]	; 1dd90 <smp_ident_addr_info+0x1a8>
   1dc2e:	4625      	mov	r5, r4
   1dc30:	f44f 7a00 	mov.w	sl, #512	; 0x200
   1dc34:	e9c4 3005 	strd	r3, r0, [r4, #20]
   1dc38:	f8a4 a01c 	strh.w	sl, [r4, #28]
   1dc3c:	f845 8f10 	str.w	r8, [r5, #16]!
   1dc40:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1dc44:	462a      	mov	r2, r5
   1dc46:	4853      	ldr	r0, [pc, #332]	; (1dd94 <smp_ident_addr_info+0x1ac>)
   1dc48:	f00c ffad 	bl	2aba6 <z_log_msg_static_create.constprop.0>
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1dc4c:	4648      	mov	r0, r9
   1dc4e:	46b5      	mov	sp, r6
   1dc50:	f7f7 fef4 	bl	15a3c <bt_addr_le_str>
   1dc54:	46a5      	mov	sp, r4
   1dc56:	4b50      	ldr	r3, [pc, #320]	; (1dd98 <smp_ident_addr_info+0x1b0>)
   1dc58:	f8a4 a01c 	strh.w	sl, [r4, #28]
   1dc5c:	e9c4 3005 	strd	r3, r0, [r4, #20]
   1dc60:	f8c4 8010 	str.w	r8, [r4, #16]
   1dc64:	484b      	ldr	r0, [pc, #300]	; (1dd94 <smp_ident_addr_info+0x1ac>)
   1dc66:	462a      	mov	r2, r5
   1dc68:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1dc6c:	f00c ff9b 	bl	2aba6 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_INVALID_PARAMS;
   1dc70:	200a      	movs	r0, #10
   1dc72:	46b5      	mov	sp, r6
}
   1dc74:	3718      	adds	r7, #24
   1dc76:	46bd      	mov	sp, r7
   1dc78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return memcmp(a, b, sizeof(*a));
   1dc7c:	2207      	movs	r2, #7
   1dc7e:	4641      	mov	r1, r8
   1dc80:	4648      	mov	r0, r9
   1dc82:	f00b f92a 	bl	28eda <memcmp>
	if (!bt_addr_le_eq(&conn->le.dst, &req->addr)) {
   1dc86:	b168      	cbz	r0, 1dca4 <smp_ident_addr_info+0xbc>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   1dc88:	7a28      	ldrb	r0, [r5, #8]
   1dc8a:	4641      	mov	r1, r8
   1dc8c:	f000 fc56 	bl	1e53c <bt_keys_find_addr>
		if (keys) {
   1dc90:	4606      	mov	r6, r0
   1dc92:	b138      	cbz	r0, 1dca4 <smp_ident_addr_info+0xbc>
			if (!update_keys_check(smp, keys)) {
   1dc94:	4601      	mov	r1, r0
   1dc96:	4620      	mov	r0, r4
   1dc98:	f00c ff53 	bl	2ab42 <update_keys_check>
   1dc9c:	b320      	cbz	r0, 1dce8 <smp_ident_addr_info+0x100>
			bt_keys_clear(keys);
   1dc9e:	4630      	mov	r0, r6
   1dca0:	f000 fc6a 	bl	1e578 <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1dca4:	210d      	movs	r1, #13
   1dca6:	1d20      	adds	r0, r4, #4
   1dca8:	f00c ff42 	bl	2ab30 <atomic_test_bit>
   1dcac:	2800      	cmp	r0, #0
   1dcae:	d05c      	beq.n	1dd6a <smp_ident_addr_info+0x182>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1dcb0:	7a29      	ldrb	r1, [r5, #8]
   1dcb2:	464a      	mov	r2, r9
   1dcb4:	2002      	movs	r0, #2
   1dcb6:	f00d fa2d 	bl	2b114 <bt_keys_get_type>
		if (!keys) {
   1dcba:	4606      	mov	r6, r0
   1dcbc:	b9b0      	cbnz	r0, 1dcec <smp_ident_addr_info+0x104>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1dcbe:	4648      	mov	r0, r9
   1dcc0:	f7f7 febc 	bl	15a3c <bt_addr_le_str>
   1dcc4:	466c      	mov	r4, sp
   1dcc6:	b088      	sub	sp, #32
   1dcc8:	466a      	mov	r2, sp
   1dcca:	4b34      	ldr	r3, [pc, #208]	; (1dd9c <smp_ident_addr_info+0x1b4>)
   1dccc:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1dcd0:	f44f 7300 	mov.w	r3, #512	; 0x200
   1dcd4:	8393      	strh	r3, [r2, #28]
   1dcd6:	4b2e      	ldr	r3, [pc, #184]	; (1dd90 <smp_ident_addr_info+0x1a8>)
   1dcd8:	f842 3f10 	str.w	r3, [r2, #16]!
   1dcdc:	482d      	ldr	r0, [pc, #180]	; (1dd94 <smp_ident_addr_info+0x1ac>)
   1dcde:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1dce2:	f00c ff60 	bl	2aba6 <z_log_msg_static_create.constprop.0>
   1dce6:	46a5      	mov	sp, r4
				return BT_SMP_ERR_UNSPECIFIED;
   1dce8:	2008      	movs	r0, #8
   1dcea:	e7c3      	b.n	1dc74 <smp_ident_addr_info+0x8c>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1dcec:	78eb      	ldrb	r3, [r5, #3]
   1dcee:	bbb3      	cbnz	r3, 1dd5e <smp_ident_addr_info+0x176>
			dst = &conn->le.resp_addr;
   1dcf0:	f105 0196 	add.w	r1, r5, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1dcf4:	780b      	ldrb	r3, [r1, #0]
   1dcf6:	2b01      	cmp	r3, #1
   1dcf8:	d120      	bne.n	1dd3c <smp_ident_addr_info+0x154>
		if (bt_addr_le_is_rpa(dst)) {
   1dcfa:	798b      	ldrb	r3, [r1, #6]
   1dcfc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1dd00:	2b40      	cmp	r3, #64	; 0x40
   1dd02:	d11b      	bne.n	1dd3c <smp_ident_addr_info+0x154>
	memcpy(dst, src, sizeof(*dst));
   1dd04:	2206      	movs	r2, #6
   1dd06:	3101      	adds	r1, #1
   1dd08:	f106 003a 	add.w	r0, r6, #58	; 0x3a
   1dd0c:	f00b f90c 	bl	28f28 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1dd10:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
   1dd14:	b193      	cbz	r3, 1dd3c <smp_ident_addr_info+0x154>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   1dd16:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
   1dd1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1dd1e:	2bc0      	cmp	r3, #192	; 0xc0
   1dd20:	d00c      	beq.n	1dd3c <smp_ident_addr_info+0x154>
	memcpy(dst, src, sizeof(*dst));
   1dd22:	2207      	movs	r2, #7
   1dd24:	4641      	mov	r1, r8
   1dd26:	1c70      	adds	r0, r6, #1
   1dd28:	f00b f8fe 	bl	28f28 <memcpy>
   1dd2c:	2207      	movs	r2, #7
   1dd2e:	4641      	mov	r1, r8
   1dd30:	4648      	mov	r0, r9
   1dd32:	f00b f8f9 	bl	28f28 <memcpy>
				bt_conn_identity_resolved(conn);
   1dd36:	4628      	mov	r0, r5
   1dd38:	f7fb fc1a 	bl	19570 <bt_conn_identity_resolved>
	conflict = bt_id_find_conflict(new_bond);
   1dd3c:	4630      	mov	r0, r6
   1dd3e:	f7fa f897 	bl	17e70 <bt_id_find_conflict>
	if (conflict && !IS_ENABLED(CONFIG_BT_ID_UNPAIR_MATCHING_BONDS)) {
   1dd42:	b178      	cbz	r0, 1dd64 <smp_ident_addr_info+0x17c>
		LOG_WRN("Refusing new pairing. The old bond must be unpaired first.");
   1dd44:	4b16      	ldr	r3, [pc, #88]	; (1dda0 <smp_ident_addr_info+0x1b8>)
   1dd46:	4813      	ldr	r0, [pc, #76]	; (1dd94 <smp_ident_addr_info+0x1ac>)
   1dd48:	617b      	str	r3, [r7, #20]
   1dd4a:	f107 0210 	add.w	r2, r7, #16
   1dd4e:	2302      	movs	r3, #2
   1dd50:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1dd54:	613b      	str	r3, [r7, #16]
   1dd56:	f00c ff26 	bl	2aba6 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1dd5a:	2003      	movs	r0, #3
   1dd5c:	e78a      	b.n	1dc74 <smp_ident_addr_info+0x8c>
			dst = &conn->le.init_addr;
   1dd5e:	f105 018f 	add.w	r1, r5, #143	; 0x8f
   1dd62:	e7c7      	b.n	1dcf4 <smp_ident_addr_info+0x10c>
	bt_id_add(new_bond);
   1dd64:	4630      	mov	r0, r6
   1dd66:	f7fa f893 	bl	17e90 <bt_id_add>
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1dd6a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1dd6e:	075b      	lsls	r3, r3, #29
   1dd70:	d503      	bpl.n	1dd7a <smp_ident_addr_info+0x192>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1dd72:	210a      	movs	r1, #10
   1dd74:	4620      	mov	r0, r4
   1dd76:	f00c ff24 	bl	2abc2 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1dd7a:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   1dd7e:	b109      	cbz	r1, 1dd84 <smp_ident_addr_info+0x19c>
	return 0;
   1dd80:	2000      	movs	r0, #0
   1dd82:	e777      	b.n	1dc74 <smp_ident_addr_info+0x8c>
		smp_pairing_complete(smp, 0);
   1dd84:	4620      	mov	r0, r4
   1dd86:	f7ff fd6d 	bl	1d864 <smp_pairing_complete>
   1dd8a:	e7f9      	b.n	1dd80 <smp_ident_addr_info+0x198>
   1dd8c:	0002fd90 	.word	0x0002fd90
   1dd90:	01000003 	.word	0x01000003
   1dd94:	0002cb6c 	.word	0x0002cb6c
   1dd98:	0002fe0e 	.word	0x0002fe0e
   1dd9c:	0002fb5d 	.word	0x0002fb5d
   1dda0:	0002fda4 	.word	0x0002fda4

0001dda4 <smp_central_ident>:
{
   1dda4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dda8:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
   1ddaa:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
{
   1ddae:	af00      	add	r7, sp, #0
   1ddb0:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1ddb2:	210d      	movs	r1, #13
   1ddb4:	3004      	adds	r0, #4
   1ddb6:	f00c febb 	bl	2ab30 <atomic_test_bit>
   1ddba:	b368      	cbz	r0, 1de18 <smp_central_ident+0x74>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1ddbc:	f105 0888 	add.w	r8, r5, #136	; 0x88
   1ddc0:	7a29      	ldrb	r1, [r5, #8]
		struct bt_smp_central_ident *req = (void *)buf->data;
   1ddc2:	68de      	ldr	r6, [r3, #12]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1ddc4:	4642      	mov	r2, r8
   1ddc6:	2004      	movs	r0, #4
   1ddc8:	f00d f9a4 	bl	2b114 <bt_keys_get_type>
		if (!keys) {
   1ddcc:	4605      	mov	r5, r0
   1ddce:	b9c0      	cbnz	r0, 1de02 <smp_central_ident+0x5e>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1ddd0:	4640      	mov	r0, r8
   1ddd2:	f7f7 fe33 	bl	15a3c <bt_addr_le_str>
   1ddd6:	466c      	mov	r4, sp
   1ddd8:	b088      	sub	sp, #32
   1ddda:	466a      	mov	r2, sp
   1dddc:	4b1b      	ldr	r3, [pc, #108]	; (1de4c <smp_central_ident+0xa8>)
   1ddde:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1dde2:	f44f 7300 	mov.w	r3, #512	; 0x200
   1dde6:	8393      	strh	r3, [r2, #28]
   1dde8:	4b19      	ldr	r3, [pc, #100]	; (1de50 <smp_central_ident+0xac>)
   1ddea:	481a      	ldr	r0, [pc, #104]	; (1de54 <smp_central_ident+0xb0>)
   1ddec:	f842 3f10 	str.w	r3, [r2, #16]!
   1ddf0:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1ddf4:	f00c fed7 	bl	2aba6 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1ddf8:	2008      	movs	r0, #8
   1ddfa:	46a5      	mov	sp, r4
}
   1ddfc:	46bd      	mov	sp, r7
   1ddfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   1de02:	2202      	movs	r2, #2
   1de04:	4631      	mov	r1, r6
   1de06:	3018      	adds	r0, #24
   1de08:	f00b f88e 	bl	28f28 <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   1de0c:	2208      	movs	r2, #8
   1de0e:	1cb1      	adds	r1, r6, #2
   1de10:	f105 0010 	add.w	r0, r5, #16
   1de14:	f00b f888 	bl	28f28 <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   1de18:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1de1c:	f023 0201 	bic.w	r2, r3, #1
   1de20:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1de24:	079a      	lsls	r2, r3, #30
   1de26:	d508      	bpl.n	1de3a <smp_central_ident+0x96>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1de28:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1de2a:	4620      	mov	r0, r4
   1de2c:	f00c fec9 	bl	2abc2 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1de30:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   1de34:	b129      	cbz	r1, 1de42 <smp_central_ident+0x9e>
	return 0;
   1de36:	2000      	movs	r0, #0
   1de38:	e7e0      	b.n	1ddfc <smp_central_ident+0x58>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1de3a:	075b      	lsls	r3, r3, #29
   1de3c:	d5f8      	bpl.n	1de30 <smp_central_ident+0x8c>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1de3e:	210a      	movs	r1, #10
   1de40:	e7f3      	b.n	1de2a <smp_central_ident+0x86>
		smp_pairing_complete(smp, 0);
   1de42:	4620      	mov	r0, r4
   1de44:	f7ff fd0e 	bl	1d864 <smp_pairing_complete>
   1de48:	e7f5      	b.n	1de36 <smp_central_ident+0x92>
   1de4a:	bf00      	nop
   1de4c:	0002fb5d 	.word	0x0002fb5d
   1de50:	01000003 	.word	0x01000003
   1de54:	0002cb6c 	.word	0x0002cb6c

0001de58 <smp_pairing_failed>:
{
   1de58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1de5c:	460e      	mov	r6, r1
   1de5e:	af00      	add	r7, sp, #0
	struct bt_conn *conn = smp->chan.chan.conn;
   1de60:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
{
   1de64:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1de66:	f7fe fd2d 	bl	1c8c4 <latch_auth_cb>
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   1de6a:	68f6      	ldr	r6, [r6, #12]
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   1de6c:	46e9      	mov	r9, sp
   1de6e:	b088      	sub	sp, #32
   1de70:	7833      	ldrb	r3, [r6, #0]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1de72:	4605      	mov	r5, r0
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   1de74:	466a      	mov	r2, sp
   1de76:	4914      	ldr	r1, [pc, #80]	; (1dec8 <smp_pairing_failed+0x70>)
   1de78:	4814      	ldr	r0, [pc, #80]	; (1decc <smp_pairing_failed+0x74>)
   1de7a:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1de7e:	2303      	movs	r3, #3
   1de80:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1de84:	f842 3f10 	str.w	r3, [r2, #16]!
   1de88:	f00c fe8d 	bl	2aba6 <z_log_msg_static_create.constprop.0>
   1de8c:	46cd      	mov	sp, r9
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1de8e:	f104 0904 	add.w	r9, r4, #4
   1de92:	210a      	movs	r1, #10
   1de94:	4648      	mov	r0, r9
   1de96:	f00c ff24 	bl	2ace2 <atomic_test_and_clear_bit>
   1de9a:	b140      	cbz	r0, 1deae <smp_pairing_failed+0x56>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1de9c:	b975      	cbnz	r5, 1debc <smp_pairing_failed+0x64>
	smp_pairing_complete(smp, req->reason);
   1de9e:	4620      	mov	r0, r4
   1dea0:	7831      	ldrb	r1, [r6, #0]
   1dea2:	f7ff fcdf 	bl	1d864 <smp_pairing_complete>
}
   1dea6:	2000      	movs	r0, #0
   1dea8:	46bd      	mov	sp, r7
   1deaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   1deae:	210b      	movs	r1, #11
   1deb0:	4648      	mov	r0, r9
   1deb2:	f00c ff16 	bl	2ace2 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1deb6:	2800      	cmp	r0, #0
   1deb8:	d1f0      	bne.n	1de9c <smp_pairing_failed+0x44>
   1deba:	e7f0      	b.n	1de9e <smp_pairing_failed+0x46>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1debc:	692b      	ldr	r3, [r5, #16]
   1debe:	2b00      	cmp	r3, #0
   1dec0:	d0ed      	beq.n	1de9e <smp_pairing_failed+0x46>
			smp_auth_cb->cancel(conn);
   1dec2:	4640      	mov	r0, r8
   1dec4:	4798      	blx	r3
   1dec6:	e7ea      	b.n	1de9e <smp_pairing_failed+0x46>
   1dec8:	0002fddf 	.word	0x0002fddf
   1decc:	0002cb6c 	.word	0x0002cb6c

0001ded0 <bt_smp_encrypt_change>:
{
   1ded0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = chan->conn;
   1ded4:	4604      	mov	r4, r0
{
   1ded6:	b091      	sub	sp, #68	; 0x44
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1ded8:	f1a0 06e8 	sub.w	r6, r0, #232	; 0xe8
{
   1dedc:	4605      	mov	r5, r0
   1dede:	af00      	add	r7, sp, #0
   1dee0:	4688      	mov	r8, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1dee2:	4630      	mov	r0, r6
   1dee4:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
   1dee6:	f854 99ec 	ldr.w	r9, [r4], #-236
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1deea:	f00c fefa 	bl	2ace2 <atomic_test_and_clear_bit>
   1deee:	b328      	cbz	r0, 1df3c <bt_smp_encrypt_change+0x6c>
	if (hci_status) {
   1def0:	f1b8 0f00 	cmp.w	r8, #0
   1def4:	d017      	beq.n	1df26 <bt_smp_encrypt_change+0x56>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1def6:	2103      	movs	r1, #3
   1def8:	4630      	mov	r0, r6
   1defa:	f00c fe19 	bl	2ab30 <atomic_test_bit>
   1defe:	b1e8      	cbz	r0, 1df3c <bt_smp_encrypt_change+0x6c>
			uint8_t smp_err = smp_err_get(
   1df00:	4640      	mov	r0, r8
   1df02:	f7f8 ffb9 	bl	16e78 <bt_security_err_get>
	switch (auth_err) {
   1df06:	3801      	subs	r0, #1
   1df08:	b2c0      	uxtb	r0, r0
   1df0a:	2808      	cmp	r0, #8
   1df0c:	bf9a      	itte	ls
   1df0e:	4b99      	ldrls	r3, [pc, #612]	; (1e174 <bt_smp_encrypt_change+0x2a4>)
   1df10:	5c1d      	ldrbls	r5, [r3, r0]
			uint8_t smp_err = smp_err_get(
   1df12:	2500      	movhi	r5, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1df14:	2102      	movs	r1, #2
   1df16:	4630      	mov	r0, r6
   1df18:	f00c fe53 	bl	2abc2 <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   1df1c:	4629      	mov	r1, r5
		smp_pairing_complete(smp, 0);
   1df1e:	4620      	mov	r0, r4
   1df20:	f7ff fca0 	bl	1d864 <smp_pairing_complete>
   1df24:	e00a      	b.n	1df3c <bt_smp_encrypt_change+0x6c>
	if (!conn->encrypt) {
   1df26:	f899 300b 	ldrb.w	r3, [r9, #11]
   1df2a:	b13b      	cbz	r3, 1df3c <bt_smp_encrypt_change+0x6c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1df2c:	2103      	movs	r1, #3
   1df2e:	4630      	mov	r0, r6
   1df30:	f00c fdfe 	bl	2ab30 <atomic_test_bit>
   1df34:	b930      	cbnz	r0, 1df44 <bt_smp_encrypt_change+0x74>
		smp_reset(smp);
   1df36:	4620      	mov	r0, r4
   1df38:	f00c fee9 	bl	2ad0e <smp_reset>
}
   1df3c:	3744      	adds	r7, #68	; 0x44
   1df3e:	46bd      	mov	sp, r7
   1df40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1df44:	2105      	movs	r1, #5
   1df46:	4630      	mov	r0, r6
   1df48:	f00c fdf2 	bl	2ab30 <atomic_test_bit>
   1df4c:	b1b8      	cbz	r0, 1df7e <bt_smp_encrypt_change+0xae>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   1df4e:	f815 3c04 	ldrb.w	r3, [r5, #-4]
   1df52:	0718      	lsls	r0, r3, #28
   1df54:	d507      	bpl.n	1df66 <bt_smp_encrypt_change+0x96>
   1df56:	f815 3c03 	ldrb.w	r3, [r5, #-3]
   1df5a:	0719      	lsls	r1, r3, #28
   1df5c:	d503      	bpl.n	1df66 <bt_smp_encrypt_change+0x96>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   1df5e:	2111      	movs	r1, #17
   1df60:	4630      	mov	r0, r6
   1df62:	f00c fe2e 	bl	2abc2 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   1df66:	f815 3c04 	ldrb.w	r3, [r5, #-4]
   1df6a:	f023 0308 	bic.w	r3, r3, #8
   1df6e:	f805 3c04 	strb.w	r3, [r5, #-4]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   1df72:	f815 3c03 	ldrb.w	r3, [r5, #-3]
   1df76:	f023 0308 	bic.w	r3, r3, #8
   1df7a:	f805 3c03 	strb.w	r3, [r5, #-3]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   1df7e:	f815 3c03 	ldrb.w	r3, [r5, #-3]
   1df82:	07da      	lsls	r2, r3, #31
   1df84:	d523      	bpl.n	1dfce <bt_smp_encrypt_change+0xfe>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   1df86:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1df88:	4620      	mov	r0, r4
   1df8a:	f00c fe1a 	bl	2abc2 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1df8e:	2102      	movs	r1, #2
   1df90:	4630      	mov	r0, r6
   1df92:	f00c fe16 	bl	2abc2 <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
   1df96:	f8d5 9000 	ldr.w	r9, [r5]
	if (!keys) {
   1df9a:	f8d9 30b8 	ldr.w	r3, [r9, #184]	; 0xb8
   1df9e:	b9f3      	cbnz	r3, 1dfde <bt_smp_encrypt_change+0x10e>
		LOG_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   1dfa0:	f109 0088 	add.w	r0, r9, #136	; 0x88
   1dfa4:	f7f7 fd4a 	bl	15a3c <bt_addr_le_str>
   1dfa8:	466c      	mov	r4, sp
   1dfaa:	b088      	sub	sp, #32
   1dfac:	466a      	mov	r2, sp
   1dfae:	4b72      	ldr	r3, [pc, #456]	; (1e178 <bt_smp_encrypt_change+0x2a8>)
   1dfb0:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1dfb4:	f44f 7300 	mov.w	r3, #512	; 0x200
   1dfb8:	8393      	strh	r3, [r2, #28]
   1dfba:	4b70      	ldr	r3, [pc, #448]	; (1e17c <bt_smp_encrypt_change+0x2ac>)
   1dfbc:	f842 3f10 	str.w	r3, [r2, #16]!
   1dfc0:	486f      	ldr	r0, [pc, #444]	; (1e180 <bt_smp_encrypt_change+0x2b0>)
   1dfc2:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1dfc6:	f00c fdee 	bl	2aba6 <z_log_msg_static_create.constprop.0>
   1dfca:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   1dfcc:	e7b6      	b.n	1df3c <bt_smp_encrypt_change+0x6c>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1dfce:	0798      	lsls	r0, r3, #30
   1dfd0:	d501      	bpl.n	1dfd6 <bt_smp_encrypt_change+0x106>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1dfd2:	2108      	movs	r1, #8
   1dfd4:	e7d8      	b.n	1df88 <bt_smp_encrypt_change+0xb8>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1dfd6:	0759      	lsls	r1, r3, #29
   1dfd8:	d5d9      	bpl.n	1df8e <bt_smp_encrypt_change+0xbe>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1dfda:	210a      	movs	r1, #10
   1dfdc:	e7d4      	b.n	1df88 <bt_smp_encrypt_change+0xb8>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1dfde:	2105      	movs	r1, #5
   1dfe0:	f00c fda6 	bl	2ab30 <atomic_test_bit>
   1dfe4:	b9c0      	cbnz	r0, 1e018 <bt_smp_encrypt_change+0x148>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   1dfe6:	f815 3c04 	ldrb.w	r3, [r5, #-4]
   1dfea:	07da      	lsls	r2, r3, #31
   1dfec:	d514      	bpl.n	1e018 <bt_smp_encrypt_change+0x148>
	struct bt_keys *keys = conn->le.keys;
   1dfee:	682b      	ldr	r3, [r5, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1dff0:	211a      	movs	r1, #26
   1dff2:	f107 0020 	add.w	r0, r7, #32
	struct bt_keys *keys = conn->le.keys;
   1dff6:	f8d3 80b8 	ldr.w	r8, [r3, #184]	; 0xb8
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1dffa:	f003 fa45 	bl	21488 <bt_rand>
   1dffe:	4683      	mov	fp, r0
   1e000:	b310      	cbz	r0, 1e048 <bt_smp_encrypt_change+0x178>
			LOG_ERR("Unable to get random bytes");
   1e002:	4b60      	ldr	r3, [pc, #384]	; (1e184 <bt_smp_encrypt_change+0x2b4>)
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   1e004:	61fb      	str	r3, [r7, #28]
   1e006:	2302      	movs	r3, #2
   1e008:	485d      	ldr	r0, [pc, #372]	; (1e180 <bt_smp_encrypt_change+0x2b0>)
   1e00a:	61bb      	str	r3, [r7, #24]
   1e00c:	f107 0218 	add.w	r2, r7, #24
   1e010:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e014:	f00c fdc7 	bl	2aba6 <z_log_msg_static_create.constprop.0>
	if (smp->local_dist & BT_SMP_DIST_ID_KEY) {
   1e018:	f815 3c04 	ldrb.w	r3, [r5, #-4]
   1e01c:	079b      	lsls	r3, r3, #30
   1e01e:	f140 80a2 	bpl.w	1e166 <bt_smp_encrypt_change+0x296>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_INFO,
   1e022:	2108      	movs	r1, #8
   1e024:	4620      	mov	r0, r4
   1e026:	f00c fde0 	bl	2abea <smp_create_pdu.constprop.0>
		if (!buf) {
   1e02a:	4606      	mov	r6, r0
   1e02c:	2800      	cmp	r0, #0
   1e02e:	d16c      	bne.n	1e10a <bt_smp_encrypt_change+0x23a>
			LOG_ERR("Unable to allocate Ident Info buffer");
   1e030:	4b55      	ldr	r3, [pc, #340]	; (1e188 <bt_smp_encrypt_change+0x2b8>)
			LOG_ERR("Unable to allocate Ident Addr Info buffer");
   1e032:	637b      	str	r3, [r7, #52]	; 0x34
   1e034:	2302      	movs	r3, #2
   1e036:	4852      	ldr	r0, [pc, #328]	; (1e180 <bt_smp_encrypt_change+0x2b0>)
   1e038:	633b      	str	r3, [r7, #48]	; 0x30
   1e03a:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1e03e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e042:	f00c fdb0 	bl	2aba6 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1e046:	e779      	b.n	1df3c <bt_smp_encrypt_change+0x6c>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   1e048:	2106      	movs	r1, #6
   1e04a:	4620      	mov	r0, r4
   1e04c:	f00c fdcd 	bl	2abea <smp_create_pdu.constprop.0>
		if (!buf) {
   1e050:	4682      	mov	sl, r0
   1e052:	b908      	cbnz	r0, 1e058 <bt_smp_encrypt_change+0x188>
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   1e054:	4b4d      	ldr	r3, [pc, #308]	; (1e18c <bt_smp_encrypt_change+0x2bc>)
   1e056:	e7d5      	b.n	1e004 <bt_smp_encrypt_change+0x134>
	return net_buf_simple_add(&buf->b, len);
   1e058:	2110      	movs	r1, #16
   1e05a:	300c      	adds	r0, #12
   1e05c:	f00d f976 	bl	2b34c <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
   1e060:	f898 200c 	ldrb.w	r2, [r8, #12]
   1e064:	6078      	str	r0, [r7, #4]
   1e066:	f107 0120 	add.w	r1, r7, #32
   1e06a:	f00a ff5d 	bl	28f28 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   1e06e:	f898 000c 	ldrb.w	r0, [r8, #12]
   1e072:	687b      	ldr	r3, [r7, #4]
   1e074:	280f      	cmp	r0, #15
   1e076:	d805      	bhi.n	1e084 <bt_smp_encrypt_change+0x1b4>
			(void)memset(info->ltk + keys->enc_size, 0,
   1e078:	f1c0 0210 	rsb	r2, r0, #16
   1e07c:	4659      	mov	r1, fp
   1e07e:	4418      	add	r0, r3
   1e080:	f00a ff5d 	bl	28f3e <memset>
		smp_send(smp, buf, NULL, NULL);
   1e084:	4651      	mov	r1, sl
   1e086:	2200      	movs	r2, #0
   1e088:	4620      	mov	r0, r4
   1e08a:	f7fe fc7d 	bl	1c988 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   1e08e:	2107      	movs	r1, #7
   1e090:	4620      	mov	r0, r4
   1e092:	f00c fdaa 	bl	2abea <smp_create_pdu.constprop.0>
		if (!buf) {
   1e096:	4682      	mov	sl, r0
   1e098:	b908      	cbnz	r0, 1e09e <bt_smp_encrypt_change+0x1ce>
			LOG_ERR("Unable to allocate Central Ident buffer");
   1e09a:	4b3d      	ldr	r3, [pc, #244]	; (1e190 <bt_smp_encrypt_change+0x2c0>)
   1e09c:	e7b2      	b.n	1e004 <bt_smp_encrypt_change+0x134>
   1e09e:	210a      	movs	r1, #10
   1e0a0:	300c      	adds	r0, #12
   1e0a2:	f00d f953 	bl	2b34c <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
   1e0a6:	2208      	movs	r2, #8
   1e0a8:	4683      	mov	fp, r0
   1e0aa:	f107 0130 	add.w	r1, r7, #48	; 0x30
   1e0ae:	3002      	adds	r0, #2
   1e0b0:	f00a ff3a 	bl	28f28 <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
   1e0b4:	2202      	movs	r2, #2
   1e0b6:	f107 0138 	add.w	r1, r7, #56	; 0x38
   1e0ba:	4658      	mov	r0, fp
   1e0bc:	f00a ff34 	bl	28f28 <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
   1e0c0:	4651      	mov	r1, sl
   1e0c2:	4620      	mov	r0, r4
   1e0c4:	4a33      	ldr	r2, [pc, #204]	; (1e194 <bt_smp_encrypt_change+0x2c4>)
   1e0c6:	f7fe fc5f 	bl	1c988 <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1e0ca:	210d      	movs	r1, #13
   1e0cc:	4630      	mov	r0, r6
   1e0ce:	f00c fd2f 	bl	2ab30 <atomic_test_bit>
   1e0d2:	2800      	cmp	r0, #0
   1e0d4:	d0a0      	beq.n	1e018 <bt_smp_encrypt_change+0x148>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   1e0d6:	4640      	mov	r0, r8
   1e0d8:	2101      	movs	r1, #1
   1e0da:	f00d f82b 	bl	2b134 <bt_keys_add_type>
			memcpy(keys->periph_ltk.val, rand.key,
   1e0de:	f107 0120 	add.w	r1, r7, #32
   1e0e2:	2210      	movs	r2, #16
   1e0e4:	f108 004a 	add.w	r0, r8, #74	; 0x4a
   1e0e8:	f00a ff1e 	bl	28f28 <memcpy>
			memcpy(keys->periph_ltk.rand, rand.rand,
   1e0ec:	f107 0130 	add.w	r1, r7, #48	; 0x30
   1e0f0:	2208      	movs	r2, #8
   1e0f2:	f108 0040 	add.w	r0, r8, #64	; 0x40
   1e0f6:	f00a ff17 	bl	28f28 <memcpy>
			memcpy(keys->periph_ltk.ediv, rand.ediv,
   1e0fa:	2202      	movs	r2, #2
   1e0fc:	f107 0138 	add.w	r1, r7, #56	; 0x38
   1e100:	f108 0048 	add.w	r0, r8, #72	; 0x48
   1e104:	f00a ff10 	bl	28f28 <memcpy>
   1e108:	e786      	b.n	1e018 <bt_smp_encrypt_change+0x148>
   1e10a:	2110      	movs	r1, #16
   1e10c:	300c      	adds	r0, #12
   1e10e:	f00d f91d 	bl	2b34c <net_buf_simple_add>
		memcpy(id_info->irk, bt_dev.irk[conn->id], 16);
   1e112:	f899 1008 	ldrb.w	r1, [r9, #8]
   1e116:	f8df 8080 	ldr.w	r8, [pc, #128]	; 1e198 <bt_smp_encrypt_change+0x2c8>
   1e11a:	f44f 73b4 	mov.w	r3, #360	; 0x168
   1e11e:	2210      	movs	r2, #16
   1e120:	fb12 3101 	smlabb	r1, r2, r1, r3
   1e124:	4441      	add	r1, r8
   1e126:	f00a feff 	bl	28f28 <memcpy>
		smp_send(smp, buf, NULL, NULL);
   1e12a:	4631      	mov	r1, r6
   1e12c:	2200      	movs	r2, #0
   1e12e:	4620      	mov	r0, r4
   1e130:	f7fe fc2a 	bl	1c988 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_ADDR_INFO,
   1e134:	2109      	movs	r1, #9
   1e136:	4620      	mov	r0, r4
   1e138:	f00c fd57 	bl	2abea <smp_create_pdu.constprop.0>
		if (!buf) {
   1e13c:	4606      	mov	r6, r0
   1e13e:	b908      	cbnz	r0, 1e144 <bt_smp_encrypt_change+0x274>
			LOG_ERR("Unable to allocate Ident Addr Info buffer");
   1e140:	4b16      	ldr	r3, [pc, #88]	; (1e19c <bt_smp_encrypt_change+0x2cc>)
   1e142:	e776      	b.n	1e032 <bt_smp_encrypt_change+0x162>
   1e144:	2107      	movs	r1, #7
   1e146:	300c      	adds	r0, #12
   1e148:	f00d f900 	bl	2b34c <net_buf_simple_add>
		bt_addr_le_copy(&id_addr_info->addr, &bt_dev.id_addr[conn->id]);
   1e14c:	f899 1008 	ldrb.w	r1, [r9, #8]
   1e150:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   1e154:	2207      	movs	r2, #7
   1e156:	4441      	add	r1, r8
   1e158:	f00a fee6 	bl	28f28 <memcpy>
		smp_send(smp, buf, smp_id_sent, NULL);
   1e15c:	4a10      	ldr	r2, [pc, #64]	; (1e1a0 <bt_smp_encrypt_change+0x2d0>)
   1e15e:	4631      	mov	r1, r6
   1e160:	4620      	mov	r0, r4
   1e162:	f7fe fc11 	bl	1c988 <smp_send.constprop.0>
	if (!smp->local_dist && !smp->remote_dist) {
   1e166:	f835 1c04 	ldrh.w	r1, [r5, #-4]
   1e16a:	2900      	cmp	r1, #0
   1e16c:	f47f aee6 	bne.w	1df3c <bt_smp_encrypt_change+0x6c>
   1e170:	e6d5      	b.n	1df1e <bt_smp_encrypt_change+0x4e>
   1e172:	bf00      	nop
   1e174:	0002fee3 	.word	0x0002fee3
   1e178:	0002fe01 	.word	0x0002fe01
   1e17c:	01000003 	.word	0x01000003
   1e180:	0002cb6c 	.word	0x0002cb6c
   1e184:	0002fe16 	.word	0x0002fe16
   1e188:	0002fe80 	.word	0x0002fe80
   1e18c:	0002fe31 	.word	0x0002fe31
   1e190:	0002fe58 	.word	0x0002fe58
   1e194:	0002b08f 	.word	0x0002b08f
   1e198:	20000390 	.word	0x20000390
   1e19c:	0002fea5 	.word	0x0002fea5
   1e1a0:	0002b09d 	.word	0x0002b09d

0001e1a4 <smp_timeout>:
{
   1e1a4:	b510      	push	{r4, lr}
   1e1a6:	4604      	mov	r4, r0
   1e1a8:	b086      	sub	sp, #24
	LOG_ERR("SMP Timeout");
   1e1aa:	4b0b      	ldr	r3, [pc, #44]	; (1e1d8 <smp_timeout+0x34>)
   1e1ac:	9305      	str	r3, [sp, #20]
   1e1ae:	aa04      	add	r2, sp, #16
   1e1b0:	2302      	movs	r3, #2
   1e1b2:	480a      	ldr	r0, [pc, #40]	; (1e1dc <smp_timeout+0x38>)
   1e1b4:	9304      	str	r3, [sp, #16]
   1e1b6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e1ba:	f00c fcf4 	bl	2aba6 <z_log_msg_static_create.constprop.0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1e1be:	f5a4 7090 	sub.w	r0, r4, #288	; 0x120
   1e1c2:	2108      	movs	r1, #8
   1e1c4:	f7ff fb4e 	bl	1d864 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1e1c8:	2104      	movs	r1, #4
   1e1ca:	f5a4 708e 	sub.w	r0, r4, #284	; 0x11c
}
   1e1ce:	b006      	add	sp, #24
   1e1d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1e1d4:	f00c bcf5 	b.w	2abc2 <atomic_set_bit>
   1e1d8:	0002fecf 	.word	0x0002fecf
   1e1dc:	0002cb6c 	.word	0x0002cb6c

0001e1e0 <bt_smp_update_keys>:
{
   1e1e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e1e4:	af00      	add	r7, sp, #0
   1e1e6:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1e1e8:	f00c fce0 	bl	2abac <smp_chan_get>
	if (!smp) {
   1e1ec:	4605      	mov	r5, r0
   1e1ee:	b360      	cbz	r0, 1e24a <bt_smp_update_keys+0x6a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1e1f0:	1d06      	adds	r6, r0, #4
   1e1f2:	2103      	movs	r1, #3
   1e1f4:	4630      	mov	r0, r6
   1e1f6:	f00c fc9b 	bl	2ab30 <atomic_test_bit>
   1e1fa:	b330      	cbz	r0, 1e24a <bt_smp_update_keys+0x6a>
	if (conn->le.keys) {
   1e1fc:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   1e200:	b108      	cbz	r0, 1e206 <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   1e202:	f000 f9b9 	bl	1e578 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1e206:	f104 0888 	add.w	r8, r4, #136	; 0x88
   1e20a:	7a20      	ldrb	r0, [r4, #8]
   1e20c:	4641      	mov	r1, r8
   1e20e:	f000 f89d 	bl	1e34c <bt_keys_get_addr>
   1e212:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	if (!conn->le.keys) {
   1e216:	b9d8      	cbnz	r0, 1e250 <bt_smp_update_keys+0x70>
		LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1e218:	4640      	mov	r0, r8
   1e21a:	f7f7 fc0f 	bl	15a3c <bt_addr_le_str>
   1e21e:	466c      	mov	r4, sp
   1e220:	b088      	sub	sp, #32
   1e222:	466a      	mov	r2, sp
   1e224:	4b3b      	ldr	r3, [pc, #236]	; (1e314 <bt_smp_update_keys+0x134>)
   1e226:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1e22a:	f44f 7300 	mov.w	r3, #512	; 0x200
   1e22e:	8393      	strh	r3, [r2, #28]
   1e230:	4b39      	ldr	r3, [pc, #228]	; (1e318 <bt_smp_update_keys+0x138>)
   1e232:	483a      	ldr	r0, [pc, #232]	; (1e31c <bt_smp_update_keys+0x13c>)
   1e234:	f842 3f10 	str.w	r3, [r2, #16]!
   1e238:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1e23c:	f00c fcb3 	bl	2aba6 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1e240:	2108      	movs	r1, #8
   1e242:	46a5      	mov	sp, r4
   1e244:	4628      	mov	r0, r5
   1e246:	f7ff fba9 	bl	1d99c <smp_error>
}
   1e24a:	46bd      	mov	sp, r7
   1e24c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   1e250:	210e      	movs	r1, #14
   1e252:	4630      	mov	r0, r6
   1e254:	f00c fc6c 	bl	2ab30 <atomic_test_bit>
   1e258:	b128      	cbz	r0, 1e266 <bt_smp_update_keys+0x86>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1e25a:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
   1e25e:	7b53      	ldrb	r3, [r2, #13]
   1e260:	f043 0302 	orr.w	r3, r3, #2
   1e264:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   1e266:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_OOB;
   1e268:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
	switch (smp->method) {
   1e26c:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_OOB;
   1e26e:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   1e270:	d83c      	bhi.n	1e2ec <bt_smp_update_keys+0x10c>
   1e272:	2a00      	cmp	r2, #0
   1e274:	d041      	beq.n	1e2fa <bt_smp_update_keys+0x11a>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1e276:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
   1e27a:	7b53      	ldrb	r3, [r2, #13]
   1e27c:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1e280:	7353      	strb	r3, [r2, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   1e282:	7d2b      	ldrb	r3, [r5, #20]
   1e284:	7b69      	ldrb	r1, [r5, #13]
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1e286:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
	return MIN(req->max_key_size, rsp->max_key_size);
   1e28a:	428b      	cmp	r3, r1
   1e28c:	bf28      	it	cs
   1e28e:	460b      	movcs	r3, r1
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1e290:	7313      	strb	r3, [r2, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1e292:	2105      	movs	r1, #5
   1e294:	4630      	mov	r0, r6
   1e296:	f00c fc4b 	bl	2ab30 <atomic_test_bit>
   1e29a:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
		conn->le.keys->flags |= BT_KEYS_SC;
   1e29e:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1e2a0:	b3a0      	cbz	r0, 1e30c <bt_smp_update_keys+0x12c>
		conn->le.keys->flags |= BT_KEYS_SC;
   1e2a2:	f042 0210 	orr.w	r2, r2, #16
   1e2a6:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1e2a8:	210d      	movs	r1, #13
   1e2aa:	4630      	mov	r0, r6
   1e2ac:	f00c fc40 	bl	2ab30 <atomic_test_bit>
   1e2b0:	2800      	cmp	r0, #0
   1e2b2:	d0ca      	beq.n	1e24a <bt_smp_update_keys+0x6a>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   1e2b4:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   1e2b8:	2120      	movs	r1, #32
   1e2ba:	f00c ff3b 	bl	2b134 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   1e2be:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   1e2c2:	f105 0147 	add.w	r1, r5, #71	; 0x47
   1e2c6:	2210      	movs	r2, #16
   1e2c8:	301a      	adds	r0, #26
   1e2ca:	f00a fe2d 	bl	28f28 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   1e2ce:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   1e2d2:	2208      	movs	r2, #8
   1e2d4:	2100      	movs	r1, #0
   1e2d6:	3010      	adds	r0, #16
   1e2d8:	f00a fe31 	bl	28f3e <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1e2dc:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   1e2e0:	2202      	movs	r2, #2
   1e2e2:	2100      	movs	r1, #0
   1e2e4:	3018      	adds	r0, #24
   1e2e6:	f00a fe2a 	bl	28f3e <memset>
   1e2ea:	e7ae      	b.n	1e24a <bt_smp_update_keys+0x6a>
	switch (smp->method) {
   1e2ec:	3a05      	subs	r2, #5
   1e2ee:	2a01      	cmp	r2, #1
   1e2f0:	d803      	bhi.n	1e2fa <bt_smp_update_keys+0x11a>
		conn->le.keys->flags |= BT_KEYS_OOB;
   1e2f2:	f043 0320 	orr.w	r3, r3, #32
   1e2f6:	734b      	strb	r3, [r1, #13]
   1e2f8:	e7bd      	b.n	1e276 <bt_smp_update_keys+0x96>
		conn->le.keys->flags &= ~BT_KEYS_OOB;
   1e2fa:	f023 0320 	bic.w	r3, r3, #32
   1e2fe:	734b      	strb	r3, [r1, #13]
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1e300:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
   1e304:	7b53      	ldrb	r3, [r2, #13]
   1e306:	f023 0301 	bic.w	r3, r3, #1
   1e30a:	e7b9      	b.n	1e280 <bt_smp_update_keys+0xa0>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   1e30c:	f022 0210 	bic.w	r2, r2, #16
   1e310:	735a      	strb	r2, [r3, #13]
   1e312:	e79a      	b.n	1e24a <bt_smp_update_keys+0x6a>
   1e314:	0002fb5d 	.word	0x0002fb5d
   1e318:	01000003 	.word	0x01000003
   1e31c:	0002cb6c 	.word	0x0002cb6c

0001e320 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   1e320:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1e322:	4b07      	ldr	r3, [pc, #28]	; (1e340 <bt_smp_init+0x20>)
	}

	LOG_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   1e324:	4807      	ldr	r0, [pc, #28]	; (1e344 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1e326:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
   1e32a:	f003 0306 	and.w	r3, r3, #6
   1e32e:	1f9a      	subs	r2, r3, #6
   1e330:	4253      	negs	r3, r2
   1e332:	4153      	adcs	r3, r2
   1e334:	4a04      	ldr	r2, [pc, #16]	; (1e348 <bt_smp_init+0x28>)
   1e336:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   1e338:	f7fa fb4a 	bl	189d0 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   1e33c:	2000      	movs	r0, #0
   1e33e:	bd08      	pop	{r3, pc}
   1e340:	20000390 	.word	0x20000390
   1e344:	20000720 	.word	0x20000720
   1e348:	20004660 	.word	0x20004660

0001e34c <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   1e34c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e350:	4d1b      	ldr	r5, [pc, #108]	; (1e3c0 <bt_keys_get_addr+0x74>)
   1e352:	4680      	mov	r8, r0
   1e354:	460f      	mov	r7, r1

	__ASSERT_NO_MSG(addr != NULL);

	LOG_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1e356:	2600      	movs	r6, #0
	size_t first_free_slot = ARRAY_SIZE(key_pool);
   1e358:	2405      	movs	r4, #5
		keys = &key_pool[i];

		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1e35a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1e35e:	4543      	cmp	r3, r8
   1e360:	d01d      	beq.n	1e39e <bt_keys_get_addr+0x52>
			return keys;
		}
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   1e362:	2c05      	cmp	r4, #5
   1e364:	d107      	bne.n	1e376 <bt_keys_get_addr+0x2a>
	return memcmp(a, b, sizeof(*a));
   1e366:	4917      	ldr	r1, [pc, #92]	; (1e3c4 <bt_keys_get_addr+0x78>)
   1e368:	2207      	movs	r2, #7
   1e36a:	4628      	mov	r0, r5
   1e36c:	f00a fdb5 	bl	28eda <memcmp>
   1e370:	2800      	cmp	r0, #0
   1e372:	bf08      	it	eq
   1e374:	4634      	moveq	r4, r6
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1e376:	3601      	adds	r6, #1
   1e378:	2e05      	cmp	r6, #5
   1e37a:	f105 055c 	add.w	r5, r5, #92	; 0x5c
   1e37e:	d1ec      	bne.n	1e35a <bt_keys_get_addr+0xe>
			first_free_slot = oldest - &key_pool[0];
		}
	}

#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
   1e380:	2c05      	cmp	r4, #5
   1e382:	d01a      	beq.n	1e3ba <bt_keys_get_addr+0x6e>
		keys = &key_pool[first_free_slot];
   1e384:	235c      	movs	r3, #92	; 0x5c
   1e386:	435c      	muls	r4, r3
   1e388:	480f      	ldr	r0, [pc, #60]	; (1e3c8 <bt_keys_get_addr+0x7c>)
		keys->id = id;
   1e38a:	f800 8004 	strb.w	r8, [r0, r4]
		keys = &key_pool[first_free_slot];
   1e38e:	1825      	adds	r5, r4, r0
		bt_addr_le_copy(&keys->addr, addr);
   1e390:	3401      	adds	r4, #1
	memcpy(dst, src, sizeof(*dst));
   1e392:	2207      	movs	r2, #7
   1e394:	4639      	mov	r1, r7
   1e396:	4420      	add	r0, r4
   1e398:	f00a fdc6 	bl	28f28 <memcpy>
}
   1e39c:	e00a      	b.n	1e3b4 <bt_keys_get_addr+0x68>
	return memcmp(a, b, sizeof(*a));
   1e39e:	2207      	movs	r2, #7
   1e3a0:	4639      	mov	r1, r7
   1e3a2:	4628      	mov	r0, r5
   1e3a4:	f00a fd99 	bl	28eda <memcmp>
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1e3a8:	2800      	cmp	r0, #0
   1e3aa:	d1da      	bne.n	1e362 <bt_keys_get_addr+0x16>
		keys = &key_pool[i];
   1e3ac:	4d06      	ldr	r5, [pc, #24]	; (1e3c8 <bt_keys_get_addr+0x7c>)
   1e3ae:	235c      	movs	r3, #92	; 0x5c
   1e3b0:	fb03 5506 	mla	r5, r3, r6, r5
	}

	LOG_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
}
   1e3b4:	4628      	mov	r0, r5
   1e3b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   1e3ba:	2500      	movs	r5, #0
   1e3bc:	e7fa      	b.n	1e3b4 <bt_keys_get_addr+0x68>
   1e3be:	bf00      	nop
   1e3c0:	200035bd 	.word	0x200035bd
   1e3c4:	0002e38f 	.word	0x0002e38f
   1e3c8:	200035bc 	.word	0x200035bc

0001e3cc <bt_foreach_bond>:

void bt_foreach_bond(uint8_t id, void (*func)(const struct bt_bond_info *info,
					   void *user_data),
		     void *user_data)
{
   1e3cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1e3d0:	4c0d      	ldr	r4, [pc, #52]	; (1e408 <bt_foreach_bond+0x3c>)
   1e3d2:	4605      	mov	r5, r0
   1e3d4:	460e      	mov	r6, r1
   1e3d6:	4617      	mov	r7, r2
   1e3d8:	f504 78e6 	add.w	r8, r4, #460	; 0x1cc
	__ASSERT_NO_MSG(func != NULL);

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		struct bt_keys *keys = &key_pool[i];

		if (keys->keys && keys->id == id) {
   1e3dc:	f8b4 300d 	ldrh.w	r3, [r4, #13]
   1e3e0:	b15b      	cbz	r3, 1e3fa <bt_foreach_bond+0x2e>
   1e3e2:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   1e3e6:	42ab      	cmp	r3, r5
   1e3e8:	d107      	bne.n	1e3fa <bt_foreach_bond+0x2e>
	memcpy(dst, src, sizeof(*dst));
   1e3ea:	4621      	mov	r1, r4
   1e3ec:	2207      	movs	r2, #7
   1e3ee:	4668      	mov	r0, sp
   1e3f0:	f00a fd9a 	bl	28f28 <memcpy>
			struct bt_bond_info info;

			bt_addr_le_copy(&info.addr, &keys->addr);
			func(&info, user_data);
   1e3f4:	4639      	mov	r1, r7
   1e3f6:	4668      	mov	r0, sp
   1e3f8:	47b0      	blx	r6
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1e3fa:	345c      	adds	r4, #92	; 0x5c
   1e3fc:	4544      	cmp	r4, r8
   1e3fe:	d1ed      	bne.n	1e3dc <bt_foreach_bond+0x10>
		}
	}
}
   1e400:	b002      	add	sp, #8
   1e402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e406:	bf00      	nop
   1e408:	200035bd 	.word	0x200035bd

0001e40c <bt_keys_foreach_type>:

void bt_keys_foreach_type(enum bt_keys_type type, void (*func)(struct bt_keys *keys, void *data),
			  void *data)
{
   1e40c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e410:	4c08      	ldr	r4, [pc, #32]	; (1e434 <bt_keys_foreach_type+0x28>)
   1e412:	4605      	mov	r5, r0
   1e414:	460e      	mov	r6, r1
   1e416:	4617      	mov	r7, r2
   1e418:	f504 78e6 	add.w	r8, r4, #460	; 0x1cc
	int i;

	__ASSERT_NO_MSG(func != NULL);

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   1e41c:	89e3      	ldrh	r3, [r4, #14]
   1e41e:	422b      	tst	r3, r5
   1e420:	d002      	beq.n	1e428 <bt_keys_foreach_type+0x1c>
			func(&key_pool[i], data);
   1e422:	4639      	mov	r1, r7
   1e424:	4620      	mov	r0, r4
   1e426:	47b0      	blx	r6
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1e428:	345c      	adds	r4, #92	; 0x5c
   1e42a:	4544      	cmp	r4, r8
   1e42c:	d1f6      	bne.n	1e41c <bt_keys_foreach_type+0x10>
		}
	}
}
   1e42e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e432:	bf00      	nop
   1e434:	200035bc 	.word	0x200035bc

0001e438 <keys_commit>:

	bt_id_add(keys);
}

static int keys_commit(void)
{
   1e438:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach_type(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach_type(BT_KEYS_IRK, id_add, NULL);
   1e43a:	4903      	ldr	r1, [pc, #12]	; (1e448 <keys_commit+0x10>)
   1e43c:	2200      	movs	r2, #0
   1e43e:	2002      	movs	r0, #2
   1e440:	f7ff ffe4 	bl	1e40c <bt_keys_foreach_type>
	}

	return 0;
}
   1e444:	2000      	movs	r0, #0
   1e446:	bd08      	pop	{r3, pc}
   1e448:	0002b111 	.word	0x0002b111

0001e44c <bt_keys_find>:
{
   1e44c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e450:	4d0f      	ldr	r5, [pc, #60]	; (1e490 <bt_keys_find+0x44>)
   1e452:	4606      	mov	r6, r0
   1e454:	460f      	mov	r7, r1
   1e456:	4690      	mov	r8, r2
   1e458:	2400      	movs	r4, #0
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1e45a:	f8b5 300d 	ldrh.w	r3, [r5, #13]
   1e45e:	4233      	tst	r3, r6
   1e460:	d00d      	beq.n	1e47e <bt_keys_find+0x32>
   1e462:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1e466:	42bb      	cmp	r3, r7
   1e468:	d109      	bne.n	1e47e <bt_keys_find+0x32>
	return memcmp(a, b, sizeof(*a));
   1e46a:	2207      	movs	r2, #7
   1e46c:	4641      	mov	r1, r8
   1e46e:	4628      	mov	r0, r5
   1e470:	f00a fd33 	bl	28eda <memcmp>
   1e474:	b918      	cbnz	r0, 1e47e <bt_keys_find+0x32>
			return &key_pool[i];
   1e476:	4807      	ldr	r0, [pc, #28]	; (1e494 <bt_keys_find+0x48>)
   1e478:	4420      	add	r0, r4
}
   1e47a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1e47e:	345c      	adds	r4, #92	; 0x5c
   1e480:	f5b4 7fe6 	cmp.w	r4, #460	; 0x1cc
   1e484:	f105 055c 	add.w	r5, r5, #92	; 0x5c
   1e488:	d1e7      	bne.n	1e45a <bt_keys_find+0xe>
	return NULL;
   1e48a:	2000      	movs	r0, #0
   1e48c:	e7f5      	b.n	1e47a <bt_keys_find+0x2e>
   1e48e:	bf00      	nop
   1e490:	200035bd 	.word	0x200035bd
   1e494:	200035bc 	.word	0x200035bc

0001e498 <bt_keys_find_irk>:
{
   1e498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1e49c:	780b      	ldrb	r3, [r1, #0]
   1e49e:	2b01      	cmp	r3, #1
   1e4a0:	4607      	mov	r7, r0
   1e4a2:	460d      	mov	r5, r1
   1e4a4:	d002      	beq.n	1e4ac <bt_keys_find_irk+0x14>
		return NULL;
   1e4a6:	2000      	movs	r0, #0
}
   1e4a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   1e4ac:	798b      	ldrb	r3, [r1, #6]
   1e4ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1e4b2:	2b40      	cmp	r3, #64	; 0x40
   1e4b4:	d1f7      	bne.n	1e4a6 <bt_keys_find_irk+0xe>
   1e4b6:	4e1e      	ldr	r6, [pc, #120]	; (1e530 <bt_keys_find_irk+0x98>)
   1e4b8:	2400      	movs	r4, #0
		    !bt_addr_cmp(&addr->a, &key_pool[i].irk.rpa)) {
   1e4ba:	f101 0801 	add.w	r8, r1, #1
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1e4be:	f836 3c2c 	ldrh.w	r3, [r6, #-44]
   1e4c2:	079a      	lsls	r2, r3, #30
   1e4c4:	d50c      	bpl.n	1e4e0 <bt_keys_find_irk+0x48>
		if (key_pool[i].id == id &&
   1e4c6:	f816 3c3a 	ldrb.w	r3, [r6, #-58]
   1e4ca:	42bb      	cmp	r3, r7
   1e4cc:	d108      	bne.n	1e4e0 <bt_keys_find_irk+0x48>
	return memcmp(a, b, sizeof(*a));
   1e4ce:	2206      	movs	r2, #6
   1e4d0:	4631      	mov	r1, r6
   1e4d2:	4640      	mov	r0, r8
   1e4d4:	f00a fd01 	bl	28eda <memcmp>
   1e4d8:	b910      	cbnz	r0, 1e4e0 <bt_keys_find_irk+0x48>
			return &key_pool[i];
   1e4da:	4816      	ldr	r0, [pc, #88]	; (1e534 <bt_keys_find_irk+0x9c>)
   1e4dc:	4420      	add	r0, r4
   1e4de:	e7e3      	b.n	1e4a8 <bt_keys_find_irk+0x10>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1e4e0:	345c      	adds	r4, #92	; 0x5c
   1e4e2:	f5b4 7fe6 	cmp.w	r4, #460	; 0x1cc
   1e4e6:	f106 065c 	add.w	r6, r6, #92	; 0x5c
   1e4ea:	d1e8      	bne.n	1e4be <bt_keys_find_irk+0x26>
   1e4ec:	4e12      	ldr	r6, [pc, #72]	; (1e538 <bt_keys_find_irk+0xa0>)
   1e4ee:	2400      	movs	r4, #0
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   1e4f0:	3501      	adds	r5, #1
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1e4f2:	f836 3c1c 	ldrh.w	r3, [r6, #-28]
   1e4f6:	079b      	lsls	r3, r3, #30
   1e4f8:	d512      	bpl.n	1e520 <bt_keys_find_irk+0x88>
		if (key_pool[i].id != id) {
   1e4fa:	f816 3c2a 	ldrb.w	r3, [r6, #-42]
   1e4fe:	42bb      	cmp	r3, r7
   1e500:	d10e      	bne.n	1e520 <bt_keys_find_irk+0x88>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   1e502:	4629      	mov	r1, r5
   1e504:	4630      	mov	r0, r6
   1e506:	f00a fd55 	bl	28fb4 <bt_rpa_irk_matches>
   1e50a:	b148      	cbz	r0, 1e520 <bt_keys_find_irk+0x88>
			bt_addr_copy(&key_pool[i].irk.rpa, &addr->a);
   1e50c:	4e09      	ldr	r6, [pc, #36]	; (1e534 <bt_keys_find_irk+0x9c>)
   1e50e:	f104 003a 	add.w	r0, r4, #58	; 0x3a
	memcpy(dst, src, sizeof(*dst));
   1e512:	2206      	movs	r2, #6
   1e514:	4629      	mov	r1, r5
   1e516:	4430      	add	r0, r6
   1e518:	f00a fd06 	bl	28f28 <memcpy>
			return &key_pool[i];
   1e51c:	19a0      	adds	r0, r4, r6
   1e51e:	e7c3      	b.n	1e4a8 <bt_keys_find_irk+0x10>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1e520:	345c      	adds	r4, #92	; 0x5c
   1e522:	f5b4 7fe6 	cmp.w	r4, #460	; 0x1cc
   1e526:	f106 065c 	add.w	r6, r6, #92	; 0x5c
   1e52a:	d1e2      	bne.n	1e4f2 <bt_keys_find_irk+0x5a>
   1e52c:	e7bb      	b.n	1e4a6 <bt_keys_find_irk+0xe>
   1e52e:	bf00      	nop
   1e530:	200035f6 	.word	0x200035f6
   1e534:	200035bc 	.word	0x200035bc
   1e538:	200035e6 	.word	0x200035e6

0001e53c <bt_keys_find_addr>:
{
   1e53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e53e:	4d0c      	ldr	r5, [pc, #48]	; (1e570 <bt_keys_find_addr+0x34>)
   1e540:	4606      	mov	r6, r0
   1e542:	460f      	mov	r7, r1
   1e544:	2400      	movs	r4, #0
		if (key_pool[i].id == id &&
   1e546:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1e54a:	42b3      	cmp	r3, r6
   1e54c:	d108      	bne.n	1e560 <bt_keys_find_addr+0x24>
	return memcmp(a, b, sizeof(*a));
   1e54e:	2207      	movs	r2, #7
   1e550:	4639      	mov	r1, r7
   1e552:	4628      	mov	r0, r5
   1e554:	f00a fcc1 	bl	28eda <memcmp>
   1e558:	b910      	cbnz	r0, 1e560 <bt_keys_find_addr+0x24>
			return &key_pool[i];
   1e55a:	4806      	ldr	r0, [pc, #24]	; (1e574 <bt_keys_find_addr+0x38>)
   1e55c:	4420      	add	r0, r4
}
   1e55e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1e560:	345c      	adds	r4, #92	; 0x5c
   1e562:	f5b4 7fe6 	cmp.w	r4, #460	; 0x1cc
   1e566:	f105 055c 	add.w	r5, r5, #92	; 0x5c
   1e56a:	d1ec      	bne.n	1e546 <bt_keys_find_addr+0xa>
	return NULL;
   1e56c:	2000      	movs	r0, #0
   1e56e:	e7f6      	b.n	1e55e <bt_keys_find_addr+0x22>
   1e570:	200035bd 	.word	0x200035bd
   1e574:	200035bc 	.word	0x200035bc

0001e578 <bt_keys_clear>:
{
   1e578:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
   1e57a:	7a03      	ldrb	r3, [r0, #8]
   1e57c:	075b      	lsls	r3, r3, #29
{
   1e57e:	b08c      	sub	sp, #48	; 0x30
   1e580:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   1e582:	d501      	bpl.n	1e588 <bt_keys_clear+0x10>
		bt_id_del(keys);
   1e584:	f7f9 fc9e 	bl	17ec4 <bt_id_del>
		if (keys->id) {
   1e588:	4625      	mov	r5, r4
   1e58a:	f815 2b01 	ldrb.w	r2, [r5], #1
   1e58e:	b1b2      	cbz	r2, 1e5be <bt_keys_clear+0x46>
			u8_to_dec(id, sizeof(id), keys->id);
   1e590:	ae02      	add	r6, sp, #8
   1e592:	2104      	movs	r1, #4
   1e594:	4630      	mov	r0, r6
   1e596:	f008 ff70 	bl	2747a <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1e59a:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   1e59c:	4a09      	ldr	r2, [pc, #36]	; (1e5c4 <bt_keys_clear+0x4c>)
   1e59e:	462b      	mov	r3, r5
   1e5a0:	2124      	movs	r1, #36	; 0x24
   1e5a2:	a803      	add	r0, sp, #12
   1e5a4:	f7f7 fb64 	bl	15c70 <bt_settings_encode_key>
		settings_delete(key);
   1e5a8:	a803      	add	r0, sp, #12
   1e5aa:	f00a f8ae 	bl	2870a <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
   1e5ae:	225c      	movs	r2, #92	; 0x5c
   1e5b0:	2100      	movs	r1, #0
   1e5b2:	4620      	mov	r0, r4
}
   1e5b4:	b00c      	add	sp, #48	; 0x30
   1e5b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(keys, 0, sizeof(*keys));
   1e5ba:	f00a bcc0 	b.w	28f3e <memset>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1e5be:	9200      	str	r2, [sp, #0]
   1e5c0:	e7ec      	b.n	1e59c <bt_keys_clear+0x24>
   1e5c2:	bf00      	nop
   1e5c4:	0002ffd3 	.word	0x0002ffd3

0001e5c8 <keys_set>:
{
   1e5c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e5ca:	b099      	sub	sp, #100	; 0x64
   1e5cc:	4614      	mov	r4, r2
   1e5ce:	af00      	add	r7, sp, #0
	if (!name) {
   1e5d0:	4606      	mov	r6, r0
   1e5d2:	b988      	cbnz	r0, 1e5f8 <keys_set+0x30>
		LOG_ERR("Insufficient number of arguments");
   1e5d4:	4b60      	ldr	r3, [pc, #384]	; (1e758 <keys_set+0x190>)
   1e5d6:	627b      	str	r3, [r7, #36]	; 0x24
   1e5d8:	2302      	movs	r3, #2
   1e5da:	623b      	str	r3, [r7, #32]
   1e5dc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e5e0:	4603      	mov	r3, r0
   1e5e2:	f107 0220 	add.w	r2, r7, #32
   1e5e6:	485d      	ldr	r0, [pc, #372]	; (1e75c <keys_set+0x194>)
   1e5e8:	f7f5 faec 	bl	13bc4 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1e5ec:	f06f 0515 	mvn.w	r5, #21
}
   1e5f0:	4628      	mov	r0, r5
   1e5f2:	3764      	adds	r7, #100	; 0x64
   1e5f4:	46bd      	mov	sp, r7
   1e5f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	len = read_cb(cb_arg, val, sizeof(val));
   1e5f8:	2250      	movs	r2, #80	; 0x50
   1e5fa:	f107 0110 	add.w	r1, r7, #16
   1e5fe:	4618      	mov	r0, r3
   1e600:	47a0      	blx	r4
	if (len < 0) {
   1e602:	1e04      	subs	r4, r0, #0
   1e604:	da10      	bge.n	1e628 <keys_set+0x60>
		LOG_ERR("Failed to read value (err %zd)", len);
   1e606:	466d      	mov	r5, sp
   1e608:	b088      	sub	sp, #32
   1e60a:	466a      	mov	r2, sp
   1e60c:	4b54      	ldr	r3, [pc, #336]	; (1e760 <keys_set+0x198>)
   1e60e:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1e612:	2303      	movs	r3, #3
   1e614:	f842 3f10 	str.w	r3, [r2, #16]!
   1e618:	4850      	ldr	r0, [pc, #320]	; (1e75c <keys_set+0x194>)
   1e61a:	2300      	movs	r3, #0
   1e61c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1e620:	f7f5 fad0 	bl	13bc4 <z_impl_z_log_msg_static_create>
   1e624:	46ad      	mov	sp, r5
		return -EINVAL;
   1e626:	e7e1      	b.n	1e5ec <keys_set+0x24>
	err = bt_settings_decode_key(name, &addr);
   1e628:	f107 0108 	add.w	r1, r7, #8
   1e62c:	4630      	mov	r0, r6
   1e62e:	f00a fcee 	bl	2900e <bt_settings_decode_key>
	if (err) {
   1e632:	4605      	mov	r5, r0
   1e634:	b198      	cbz	r0, 1e65e <keys_set+0x96>
		LOG_ERR("Unable to decode address %s", name);
   1e636:	466c      	mov	r4, sp
   1e638:	b088      	sub	sp, #32
   1e63a:	466a      	mov	r2, sp
   1e63c:	4b49      	ldr	r3, [pc, #292]	; (1e764 <keys_set+0x19c>)
   1e63e:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1e642:	f44f 7300 	mov.w	r3, #512	; 0x200
   1e646:	8393      	strh	r3, [r2, #28]
   1e648:	4b47      	ldr	r3, [pc, #284]	; (1e768 <keys_set+0x1a0>)
   1e64a:	f842 3f10 	str.w	r3, [r2, #16]!
   1e64e:	2300      	movs	r3, #0
   1e650:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1e654:	4841      	ldr	r0, [pc, #260]	; (1e75c <keys_set+0x194>)
   1e656:	f7f5 fab5 	bl	13bc4 <z_impl_z_log_msg_static_create>
   1e65a:	46a5      	mov	sp, r4
			return -EINVAL;
   1e65c:	e7c6      	b.n	1e5ec <keys_set+0x24>
	settings_name_next(name, &next);
   1e65e:	1d39      	adds	r1, r7, #4
   1e660:	4630      	mov	r0, r6
   1e662:	f00a f87a 	bl	2875a <settings_name_next>
	if (!next) {
   1e666:	6878      	ldr	r0, [r7, #4]
   1e668:	b188      	cbz	r0, 1e68e <keys_set+0xc6>
		unsigned long next_id = strtoul(next, NULL, 10);
   1e66a:	220a      	movs	r2, #10
   1e66c:	4629      	mov	r1, r5
   1e66e:	f00a fb83 	bl	28d78 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1e672:	b160      	cbz	r0, 1e68e <keys_set+0xc6>
			LOG_ERR("Invalid local identity %lu", next_id);
   1e674:	466c      	mov	r4, sp
   1e676:	b088      	sub	sp, #32
   1e678:	466a      	mov	r2, sp
   1e67a:	4b3c      	ldr	r3, [pc, #240]	; (1e76c <keys_set+0x1a4>)
   1e67c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1e680:	2303      	movs	r3, #3
   1e682:	f842 3f10 	str.w	r3, [r2, #16]!
   1e686:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1e68a:	462b      	mov	r3, r5
   1e68c:	e7e2      	b.n	1e654 <keys_set+0x8c>
	if (!len) {
   1e68e:	bb1c      	cbnz	r4, 1e6d8 <keys_set+0x110>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   1e690:	f107 0208 	add.w	r2, r7, #8
   1e694:	4621      	mov	r1, r4
   1e696:	203f      	movs	r0, #63	; 0x3f
   1e698:	f7ff fed8 	bl	1e44c <bt_keys_find>
		if (keys) {
   1e69c:	b120      	cbz	r0, 1e6a8 <keys_set+0xe0>
			(void)memset(keys, 0, sizeof(*keys));
   1e69e:	225c      	movs	r2, #92	; 0x5c
   1e6a0:	4621      	mov	r1, r4
   1e6a2:	f00a fc4c 	bl	28f3e <memset>
			LOG_DBG("Cleared keys for %s", bt_addr_le_str(&addr));
   1e6a6:	e7a3      	b.n	1e5f0 <keys_set+0x28>
			LOG_WRN("Unable to find deleted keys for %s", bt_addr_le_str(&addr));
   1e6a8:	f107 0008 	add.w	r0, r7, #8
   1e6ac:	f7f7 f9c6 	bl	15a3c <bt_addr_le_str>
   1e6b0:	466e      	mov	r6, sp
   1e6b2:	b088      	sub	sp, #32
   1e6b4:	466a      	mov	r2, sp
   1e6b6:	4b2e      	ldr	r3, [pc, #184]	; (1e770 <keys_set+0x1a8>)
   1e6b8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1e6bc:	f44f 7300 	mov.w	r3, #512	; 0x200
   1e6c0:	8393      	strh	r3, [r2, #28]
   1e6c2:	4b29      	ldr	r3, [pc, #164]	; (1e768 <keys_set+0x1a0>)
   1e6c4:	f842 3f10 	str.w	r3, [r2, #16]!
   1e6c8:	4824      	ldr	r0, [pc, #144]	; (1e75c <keys_set+0x194>)
   1e6ca:	4623      	mov	r3, r4
   1e6cc:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   1e6d0:	f7f5 fa78 	bl	13bc4 <z_impl_z_log_msg_static_create>
   1e6d4:	46b5      	mov	sp, r6
   1e6d6:	e78b      	b.n	1e5f0 <keys_set+0x28>
	keys = bt_keys_get_addr(id, &addr);
   1e6d8:	f107 0108 	add.w	r1, r7, #8
   1e6dc:	2000      	movs	r0, #0
   1e6de:	f7ff fe35 	bl	1e34c <bt_keys_get_addr>
	if (!keys) {
   1e6e2:	4606      	mov	r6, r0
   1e6e4:	b9c8      	cbnz	r0, 1e71a <keys_set+0x152>
		LOG_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
   1e6e6:	f107 0008 	add.w	r0, r7, #8
   1e6ea:	f7f7 f9a7 	bl	15a3c <bt_addr_le_str>
   1e6ee:	466c      	mov	r4, sp
   1e6f0:	b088      	sub	sp, #32
   1e6f2:	466a      	mov	r2, sp
   1e6f4:	4b1f      	ldr	r3, [pc, #124]	; (1e774 <keys_set+0x1ac>)
   1e6f6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1e6fa:	f44f 7300 	mov.w	r3, #512	; 0x200
   1e6fe:	8393      	strh	r3, [r2, #28]
   1e700:	4b19      	ldr	r3, [pc, #100]	; (1e768 <keys_set+0x1a0>)
   1e702:	f842 3f10 	str.w	r3, [r2, #16]!
   1e706:	4815      	ldr	r0, [pc, #84]	; (1e75c <keys_set+0x194>)
   1e708:	4633      	mov	r3, r6
   1e70a:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1e70e:	f7f5 fa59 	bl	13bc4 <z_impl_z_log_msg_static_create>
		return -ENOMEM;
   1e712:	f06f 050b 	mvn.w	r5, #11
   1e716:	46a5      	mov	sp, r4
   1e718:	e76a      	b.n	1e5f0 <keys_set+0x28>
	if (len != BT_KEYS_STORAGE_LEN) {
   1e71a:	2c50      	cmp	r4, #80	; 0x50
   1e71c:	d015      	beq.n	1e74a <keys_set+0x182>
			LOG_ERR("Invalid key length %zd != %zu", len, BT_KEYS_STORAGE_LEN);
   1e71e:	466d      	mov	r5, sp
   1e720:	b088      	sub	sp, #32
   1e722:	466a      	mov	r2, sp
   1e724:	4b14      	ldr	r3, [pc, #80]	; (1e778 <keys_set+0x1b0>)
   1e726:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1e72a:	2350      	movs	r3, #80	; 0x50
   1e72c:	61d3      	str	r3, [r2, #28]
   1e72e:	2304      	movs	r3, #4
   1e730:	f842 3f10 	str.w	r3, [r2, #16]!
   1e734:	4809      	ldr	r0, [pc, #36]	; (1e75c <keys_set+0x194>)
   1e736:	2300      	movs	r3, #0
   1e738:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1e73c:	f7f5 fa42 	bl	13bc4 <z_impl_z_log_msg_static_create>
			bt_keys_clear(keys);
   1e740:	4630      	mov	r0, r6
   1e742:	46ad      	mov	sp, r5
   1e744:	f7ff ff18 	bl	1e578 <bt_keys_clear>
			return -EINVAL;
   1e748:	e750      	b.n	1e5ec <keys_set+0x24>
		memcpy(keys->storage_start, val, len);
   1e74a:	4622      	mov	r2, r4
   1e74c:	f107 0110 	add.w	r1, r7, #16
   1e750:	300c      	adds	r0, #12
   1e752:	f00a fbe9 	bl	28f28 <memcpy>
	return 0;
   1e756:	e74b      	b.n	1e5f0 <keys_set+0x28>
   1e758:	0002e408 	.word	0x0002e408
   1e75c:	0002cb34 	.word	0x0002cb34
   1e760:	0002ff34 	.word	0x0002ff34
   1e764:	0002f717 	.word	0x0002f717
   1e768:	01000003 	.word	0x01000003
   1e76c:	0002f733 	.word	0x0002f733
   1e770:	0002ff53 	.word	0x0002ff53
   1e774:	0002ff76 	.word	0x0002ff76
   1e778:	0002ff95 	.word	0x0002ff95

0001e77c <bt_keys_store>:
{
   1e77c:	b5b0      	push	{r4, r5, r7, lr}
	if (keys->id) {
   1e77e:	4605      	mov	r5, r0
{
   1e780:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
   1e782:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   1e786:	af02      	add	r7, sp, #8
   1e788:	4604      	mov	r4, r0
	if (keys->id) {
   1e78a:	b332      	cbz	r2, 1e7da <bt_keys_store+0x5e>
		u8_to_dec(id, sizeof(id), keys->id);
   1e78c:	2104      	movs	r1, #4
   1e78e:	4638      	mov	r0, r7
   1e790:	f008 fe73 	bl	2747a <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1e794:	9700      	str	r7, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1e796:	4a12      	ldr	r2, [pc, #72]	; (1e7e0 <bt_keys_store+0x64>)
   1e798:	462b      	mov	r3, r5
   1e79a:	2124      	movs	r1, #36	; 0x24
   1e79c:	1d38      	adds	r0, r7, #4
   1e79e:	f7f7 fa67 	bl	15c70 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   1e7a2:	f104 010c 	add.w	r1, r4, #12
   1e7a6:	2250      	movs	r2, #80	; 0x50
   1e7a8:	1d38      	adds	r0, r7, #4
   1e7aa:	f7f5 ff0d 	bl	145c8 <settings_save_one>
	if (err) {
   1e7ae:	4604      	mov	r4, r0
   1e7b0:	b178      	cbz	r0, 1e7d2 <bt_keys_store+0x56>
		LOG_ERR("Failed to save keys (err %d)", err);
   1e7b2:	466d      	mov	r5, sp
   1e7b4:	b088      	sub	sp, #32
   1e7b6:	aa02      	add	r2, sp, #8
   1e7b8:	4b0a      	ldr	r3, [pc, #40]	; (1e7e4 <bt_keys_store+0x68>)
   1e7ba:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1e7be:	2303      	movs	r3, #3
   1e7c0:	f842 3f10 	str.w	r3, [r2, #16]!
   1e7c4:	4808      	ldr	r0, [pc, #32]	; (1e7e8 <bt_keys_store+0x6c>)
   1e7c6:	2300      	movs	r3, #0
   1e7c8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1e7cc:	f7f5 f9fa 	bl	13bc4 <z_impl_z_log_msg_static_create>
   1e7d0:	46ad      	mov	sp, r5
}
   1e7d2:	4620      	mov	r0, r4
   1e7d4:	3728      	adds	r7, #40	; 0x28
   1e7d6:	46bd      	mov	sp, r7
   1e7d8:	bdb0      	pop	{r4, r5, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1e7da:	9200      	str	r2, [sp, #0]
   1e7dc:	e7db      	b.n	1e796 <bt_keys_store+0x1a>
   1e7de:	bf00      	nop
   1e7e0:	0002ffd3 	.word	0x0002ffd3
   1e7e4:	0002ffb3 	.word	0x0002ffb3
   1e7e8:	0002cb34 	.word	0x0002cb34

0001e7ec <bt_crypto_f5>:
	return err;
}

int bt_crypto_f5(const uint8_t *w, const uint8_t *n1, const uint8_t *n2, const bt_addr_le_t *a1,
		 const bt_addr_le_t *a2, uint8_t *mackey, uint8_t *ltk)
{
   1e7ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e7f0:	b09a      	sub	sp, #104	; 0x68
   1e7f2:	461d      	mov	r5, r3
   1e7f4:	e9dd 9723 	ldrd	r9, r7, [sp, #140]	; 0x8c
	static const uint8_t salt[16] = {0x6c, 0x88, 0x83, 0x91, 0xaa, 0xf5, 0xa5, 0x38,
					 0x60, 0x37, 0x0b, 0xdb, 0x5a, 0x60, 0x83, 0xbe};
	uint8_t m[53] = {0x00,						 /* counter */
   1e7f8:	4b2e      	ldr	r3, [pc, #184]	; (1e8b4 <bt_crypto_f5+0xc8>)
{
   1e7fa:	4616      	mov	r6, r2
	uint8_t m[53] = {0x00,						 /* counter */
   1e7fc:	aa0c      	add	r2, sp, #48	; 0x30
{
   1e7fe:	4684      	mov	ip, r0
   1e800:	468a      	mov	sl, r1
	uint8_t m[53] = {0x00,						 /* counter */
   1e802:	f103 0e30 	add.w	lr, r3, #48	; 0x30
   1e806:	4690      	mov	r8, r2
   1e808:	6818      	ldr	r0, [r3, #0]
   1e80a:	6859      	ldr	r1, [r3, #4]
   1e80c:	4614      	mov	r4, r2
   1e80e:	c403      	stmia	r4!, {r0, r1}
   1e810:	3308      	adds	r3, #8
   1e812:	4573      	cmp	r3, lr
   1e814:	4622      	mov	r2, r4
   1e816:	d1f7      	bne.n	1e808 <bt_crypto_f5+0x1c>
   1e818:	6818      	ldr	r0, [r3, #0]
   1e81a:	791b      	ldrb	r3, [r3, #4]
   1e81c:	6020      	str	r0, [r4, #0]
   1e81e:	7123      	strb	r3, [r4, #4]

	LOG_DBG("w %s", bt_hex(w, 32));
	LOG_DBG("n1 %s", bt_hex(n1, 16));
	LOG_DBG("n2 %s", bt_hex(n2, 16));

	sys_memcpy_swap(ws, w, 32);
   1e820:	4661      	mov	r1, ip
   1e822:	2220      	movs	r2, #32
   1e824:	a804      	add	r0, sp, #16
   1e826:	f00c fc89 	bl	2b13c <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(salt, ws, 32, t);
   1e82a:	4823      	ldr	r0, [pc, #140]	; (1e8b8 <bt_crypto_f5+0xcc>)
   1e82c:	466b      	mov	r3, sp
   1e82e:	2220      	movs	r2, #32
   1e830:	a904      	add	r1, sp, #16
   1e832:	f00c fc9b 	bl	2b16c <bt_crypto_aes_cmac>
	if (err) {
   1e836:	4604      	mov	r4, r0
   1e838:	bbc0      	cbnz	r0, 1e8ac <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("t %s", bt_hex(t, 16));

	sys_memcpy_swap(m + 5, n1, 16);
   1e83a:	2210      	movs	r2, #16
   1e83c:	4651      	mov	r1, sl
   1e83e:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   1e842:	f00c fc7b 	bl	2b13c <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   1e846:	2210      	movs	r2, #16
   1e848:	4631      	mov	r1, r6
   1e84a:	f10d 0045 	add.w	r0, sp, #69	; 0x45
   1e84e:	f00c fc75 	bl	2b13c <sys_memcpy_swap>
	m[37] = a1->type;
   1e852:	4629      	mov	r1, r5
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1e854:	2206      	movs	r2, #6
	m[37] = a1->type;
   1e856:	f811 3b01 	ldrb.w	r3, [r1], #1
   1e85a:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1e85e:	f10d 0056 	add.w	r0, sp, #86	; 0x56
   1e862:	f00c fc6b 	bl	2b13c <sys_memcpy_swap>
	m[44] = a2->type;
   1e866:	9922      	ldr	r1, [sp, #136]	; 0x88
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1e868:	2206      	movs	r2, #6
	m[44] = a2->type;
   1e86a:	f811 3b01 	ldrb.w	r3, [r1], #1
   1e86e:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1e872:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
   1e876:	f00c fc61 	bl	2b13c <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(t, m, sizeof(m), mackey);
   1e87a:	464b      	mov	r3, r9
   1e87c:	2235      	movs	r2, #53	; 0x35
   1e87e:	4641      	mov	r1, r8
   1e880:	4668      	mov	r0, sp
   1e882:	f00c fc73 	bl	2b16c <bt_crypto_aes_cmac>
	if (err) {
   1e886:	4604      	mov	r4, r0
   1e888:	b980      	cbnz	r0, 1e8ac <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("mackey %1s", bt_hex(mackey, 16));

	sys_mem_swap(mackey, 16);
   1e88a:	4648      	mov	r0, r9
   1e88c:	f00c fc60 	bl	2b150 <sys_mem_swap.constprop.0>

	/* counter for ltk is 1 */
	m[0] = 0x01;
   1e890:	2301      	movs	r3, #1
   1e892:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30

	err = bt_crypto_aes_cmac(t, m, sizeof(m), ltk);
   1e896:	2235      	movs	r2, #53	; 0x35
   1e898:	463b      	mov	r3, r7
   1e89a:	4641      	mov	r1, r8
   1e89c:	4668      	mov	r0, sp
   1e89e:	f00c fc65 	bl	2b16c <bt_crypto_aes_cmac>
	if (err) {
   1e8a2:	4604      	mov	r4, r0
   1e8a4:	b910      	cbnz	r0, 1e8ac <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("ltk %s", bt_hex(ltk, 16));

	sys_mem_swap(ltk, 16);
   1e8a6:	4638      	mov	r0, r7
   1e8a8:	f00c fc52 	bl	2b150 <sys_mem_swap.constprop.0>

	return 0;
}
   1e8ac:	4620      	mov	r0, r4
   1e8ae:	b01a      	add	sp, #104	; 0x68
   1e8b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e8b4:	0002cd4a 	.word	0x0002cd4a
   1e8b8:	0002ffe0 	.word	0x0002ffe0

0001e8bc <bt_crypto_g2>:
	return 0;
}

int bt_crypto_g2(const uint8_t u[32], const uint8_t v[32], const uint8_t x[16], const uint8_t y[16],
		 uint32_t *passkey)
{
   1e8bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e8be:	b099      	sub	sp, #100	; 0x64
   1e8c0:	4614      	mov	r4, r2
   1e8c2:	460f      	mov	r7, r1
	LOG_DBG("u %s", bt_hex(u, 32));
	LOG_DBG("v %s", bt_hex(v, 32));
	LOG_DBG("x %s", bt_hex(x, 16));
	LOG_DBG("y %s", bt_hex(y, 16));

	sys_memcpy_swap(m, u, 32);
   1e8c4:	2220      	movs	r2, #32
   1e8c6:	4601      	mov	r1, r0
   1e8c8:	a804      	add	r0, sp, #16
{
   1e8ca:	461e      	mov	r6, r3
   1e8cc:	9d1e      	ldr	r5, [sp, #120]	; 0x78
	sys_memcpy_swap(m, u, 32);
   1e8ce:	f00c fc35 	bl	2b13c <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1e8d2:	2220      	movs	r2, #32
   1e8d4:	4639      	mov	r1, r7
   1e8d6:	a80c      	add	r0, sp, #48	; 0x30
   1e8d8:	f00c fc30 	bl	2b13c <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   1e8dc:	2210      	movs	r2, #16
   1e8de:	4631      	mov	r1, r6
   1e8e0:	a814      	add	r0, sp, #80	; 0x50
   1e8e2:	f00c fc2b 	bl	2b13c <sys_memcpy_swap>

	sys_memcpy_swap(xs, x, 16);
   1e8e6:	4621      	mov	r1, r4
   1e8e8:	2210      	movs	r2, #16
   1e8ea:	4668      	mov	r0, sp
   1e8ec:	f00c fc26 	bl	2b13c <sys_memcpy_swap>

	/* reuse xs (key) as buffer for result */
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), xs);
   1e8f0:	466b      	mov	r3, sp
   1e8f2:	2250      	movs	r2, #80	; 0x50
   1e8f4:	a904      	add	r1, sp, #16
   1e8f6:	4618      	mov	r0, r3
   1e8f8:	f00c fc38 	bl	2b16c <bt_crypto_aes_cmac>
	if (err) {
   1e8fc:	4604      	mov	r4, r0
   1e8fe:	b960      	cbnz	r0, 1e91a <bt_crypto_g2+0x5e>
		return err;
	}
	LOG_DBG("res %s", bt_hex(xs, 16));

	memcpy(passkey, xs + 12, 4);
   1e900:	2204      	movs	r2, #4
   1e902:	a903      	add	r1, sp, #12
   1e904:	4628      	mov	r0, r5
   1e906:	f00a fb0f 	bl	28f28 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1e90a:	682b      	ldr	r3, [r5, #0]
   1e90c:	4a04      	ldr	r2, [pc, #16]	; (1e920 <bt_crypto_g2+0x64>)
   1e90e:	ba1b      	rev	r3, r3
   1e910:	fbb3 f1f2 	udiv	r1, r3, r2
   1e914:	fb02 3311 	mls	r3, r2, r1, r3
   1e918:	602b      	str	r3, [r5, #0]

	LOG_DBG("passkey %u", *passkey);

	return 0;
}
   1e91a:	4620      	mov	r0, r4
   1e91c:	b019      	add	sp, #100	; 0x64
   1e91e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e920:	000f4240 	.word	0x000f4240

0001e924 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1e924:	4b02      	ldr	r3, [pc, #8]	; (1e930 <net_buf_pool_get+0xc>)
   1e926:	222c      	movs	r2, #44	; 0x2c
   1e928:	fb02 3000 	mla	r0, r2, r0, r3
   1e92c:	4770      	bx	lr
   1e92e:	bf00      	nop
   1e930:	20000b50 	.word	0x20000b50

0001e934 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1e934:	7a82      	ldrb	r2, [r0, #10]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1e936:	4b06      	ldr	r3, [pc, #24]	; (1e950 <net_buf_id+0x1c>)
   1e938:	212c      	movs	r1, #44	; 0x2c
   1e93a:	fb01 3302 	mla	r3, r1, r2, r3
   1e93e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1e940:	7f1b      	ldrb	r3, [r3, #28]
   1e942:	331b      	adds	r3, #27
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1e944:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1e946:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1e94a:	fbb0 f0f3 	udiv	r0, r0, r3
   1e94e:	4770      	bx	lr
   1e950:	20000b50 	.word	0x20000b50

0001e954 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1e954:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1e956:	4b0a      	ldr	r3, [pc, #40]	; (1e980 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1e958:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1e95a:	242c      	movs	r4, #44	; 0x2c
   1e95c:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   1e960:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1e962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e964:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1e966:	681a      	ldr	r2, [r3, #0]
   1e968:	4294      	cmp	r4, r2
   1e96a:	bf94      	ite	ls
   1e96c:	600c      	strls	r4, [r1, #0]
   1e96e:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1e970:	e9d3 5400 	ldrd	r5, r4, [r3]
   1e974:	f7ff ffde 	bl	1e934 <net_buf_id>
}
   1e978:	fb05 4000 	mla	r0, r5, r0, r4
   1e97c:	bd38      	pop	{r3, r4, r5, pc}
   1e97e:	bf00      	nop
   1e980:	20000b50 	.word	0x20000b50

0001e984 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1e984:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e988:	4605      	mov	r5, r0
   1e98a:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1e98c:	4610      	mov	r0, r2
   1e98e:	4619      	mov	r1, r3
{
   1e990:	4691      	mov	r9, r2
   1e992:	4698      	mov	r8, r3
   1e994:	4617      	mov	r7, r2
   1e996:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1e998:	f00d fd0f 	bl	2c3ba <sys_clock_timeout_end_calc>
   1e99c:	4682      	mov	sl, r0
   1e99e:	468b      	mov	fp, r1
	__asm__ volatile(
   1e9a0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e9a4:	f3ef 8111 	mrs	r1, BASEPRI
   1e9a8:	f383 8812 	msr	BASEPRI_MAX, r3
   1e9ac:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1e9b0:	8b6b      	ldrh	r3, [r5, #26]
   1e9b2:	2b00      	cmp	r3, #0
   1e9b4:	d058      	beq.n	1ea68 <net_buf_alloc_len+0xe4>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1e9b6:	8b2a      	ldrh	r2, [r5, #24]
   1e9b8:	429a      	cmp	r2, r3
   1e9ba:	d93c      	bls.n	1ea36 <net_buf_alloc_len+0xb2>
   1e9bc:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   1e9be:	2200      	movs	r2, #0
   1e9c0:	2300      	movs	r3, #0
   1e9c2:	4628      	mov	r0, r5
   1e9c4:	f004 fc72 	bl	232ac <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1e9c8:	9900      	ldr	r1, [sp, #0]
   1e9ca:	4604      	mov	r4, r0
   1e9cc:	2800      	cmp	r0, #0
   1e9ce:	d032      	beq.n	1ea36 <net_buf_alloc_len+0xb2>
	__asm__ volatile(
   1e9d0:	f381 8811 	msr	BASEPRI, r1
   1e9d4:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1e9d8:	9b01      	ldr	r3, [sp, #4]
   1e9da:	2b00      	cmp	r3, #0
   1e9dc:	d055      	beq.n	1ea8a <net_buf_alloc_len+0x106>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1e9de:	ea58 0309 	orrs.w	r3, r8, r9
   1e9e2:	d00f      	beq.n	1ea04 <net_buf_alloc_len+0x80>
   1e9e4:	f1b8 3fff 	cmp.w	r8, #4294967295
   1e9e8:	bf08      	it	eq
   1e9ea:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   1e9ee:	d009      	beq.n	1ea04 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   1e9f0:	f005 fb88 	bl	24104 <sys_clock_tick_get>
   1e9f4:	ebba 0700 	subs.w	r7, sl, r0
   1e9f8:	eb6b 0601 	sbc.w	r6, fp, r1

			if (remaining <= 0) {
   1e9fc:	2e00      	cmp	r6, #0
   1e9fe:	bfbc      	itt	lt
   1ea00:	2700      	movlt	r7, #0
   1ea02:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1ea04:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1ea06:	4d26      	ldr	r5, [pc, #152]	; (1eaa0 <net_buf_alloc_len+0x11c>)
   1ea08:	f04f 082c 	mov.w	r8, #44	; 0x2c
   1ea0c:	fb08 5303 	mla	r3, r8, r3, r5
   1ea10:	463a      	mov	r2, r7
   1ea12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ea14:	681b      	ldr	r3, [r3, #0]
   1ea16:	a901      	add	r1, sp, #4
   1ea18:	f8d3 9000 	ldr.w	r9, [r3]
   1ea1c:	4620      	mov	r0, r4
   1ea1e:	4633      	mov	r3, r6
   1ea20:	47c8      	blx	r9
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1ea22:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   1ea24:	2800      	cmp	r0, #0
   1ea26:	d131      	bne.n	1ea8c <net_buf_alloc_len+0x108>
	k_lifo_put(&pool->free, buf);
   1ea28:	7aa0      	ldrb	r0, [r4, #10]
   1ea2a:	4621      	mov	r1, r4
   1ea2c:	fb00 5008 	mla	r0, r0, r8, r5
   1ea30:	f00d fa3c 	bl	2beac <k_queue_prepend>
}
   1ea34:	e024      	b.n	1ea80 <net_buf_alloc_len+0xfc>
		uninit_count = pool->uninit_count--;
   1ea36:	8b68      	ldrh	r0, [r5, #26]
   1ea38:	1e43      	subs	r3, r0, #1
   1ea3a:	836b      	strh	r3, [r5, #26]
   1ea3c:	f381 8811 	msr	BASEPRI, r1
   1ea40:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1ea44:	7f2b      	ldrb	r3, [r5, #28]
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1ea46:	8b2a      	ldrh	r2, [r5, #24]
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1ea48:	6aac      	ldr	r4, [r5, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1ea4a:	331b      	adds	r3, #27
   1ea4c:	f023 0303 	bic.w	r3, r3, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1ea50:	1a12      	subs	r2, r2, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1ea52:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   1ea56:	4b12      	ldr	r3, [pc, #72]	; (1eaa0 <net_buf_alloc_len+0x11c>)
   1ea58:	4a12      	ldr	r2, [pc, #72]	; (1eaa4 <net_buf_alloc_len+0x120>)
   1ea5a:	1aeb      	subs	r3, r5, r3
   1ea5c:	109b      	asrs	r3, r3, #2
   1ea5e:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   1ea60:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
   1ea62:	7f2b      	ldrb	r3, [r5, #28]
   1ea64:	72e3      	strb	r3, [r4, #11]
		goto success;
   1ea66:	e7b7      	b.n	1e9d8 <net_buf_alloc_len+0x54>
   1ea68:	f381 8811 	msr	BASEPRI, r1
   1ea6c:	f3bf 8f6f 	isb	sy
   1ea70:	464a      	mov	r2, r9
   1ea72:	4643      	mov	r3, r8
   1ea74:	4628      	mov	r0, r5
   1ea76:	f004 fc19 	bl	232ac <z_impl_k_queue_get>
	if (!buf) {
   1ea7a:	4604      	mov	r4, r0
   1ea7c:	2800      	cmp	r0, #0
   1ea7e:	d1ab      	bne.n	1e9d8 <net_buf_alloc_len+0x54>
		return NULL;
   1ea80:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1ea82:	4620      	mov	r0, r4
   1ea84:	b003      	add	sp, #12
   1ea86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   1ea8a:	6163      	str	r3, [r4, #20]
	buf->frags = NULL;
   1ea8c:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1ea8e:	2201      	movs	r2, #1
	buf->frags = NULL;
   1ea90:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
   1ea92:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
   1ea94:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
   1ea96:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1ea98:	6963      	ldr	r3, [r4, #20]
   1ea9a:	8262      	strh	r2, [r4, #18]
   1ea9c:	60e3      	str	r3, [r4, #12]
	return buf;
   1ea9e:	e7f0      	b.n	1ea82 <net_buf_alloc_len+0xfe>
   1eaa0:	20000b50 	.word	0x20000b50
   1eaa4:	ba2e8ba3 	.word	0xba2e8ba3

0001eaa8 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1eaa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eaac:	4d16      	ldr	r5, [pc, #88]	; (1eb08 <net_buf_unref+0x60>)
   1eaae:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1eab0:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1eab2:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   1eab4:	b90c      	cbnz	r4, 1eaba <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1eab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1eaba:	7a23      	ldrb	r3, [r4, #8]
		struct net_buf *frags = buf->frags;
   1eabc:	f8d4 8004 	ldr.w	r8, [r4, #4]
		if (--buf->ref > 0) {
   1eac0:	3b01      	subs	r3, #1
   1eac2:	b2db      	uxtb	r3, r3
   1eac4:	7223      	strb	r3, [r4, #8]
   1eac6:	2b00      	cmp	r3, #0
   1eac8:	d1f5      	bne.n	1eab6 <net_buf_unref+0xe>
		if (buf->__buf) {
   1eaca:	6961      	ldr	r1, [r4, #20]
   1eacc:	b159      	cbz	r1, 1eae6 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1eace:	7a63      	ldrb	r3, [r4, #9]
   1ead0:	07db      	lsls	r3, r3, #31
   1ead2:	d407      	bmi.n	1eae4 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1ead4:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
   1ead6:	fb07 5303 	mla	r3, r7, r3, r5
   1eada:	4620      	mov	r0, r4
   1eadc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1eade:	681b      	ldr	r3, [r3, #0]
   1eae0:	689b      	ldr	r3, [r3, #8]
   1eae2:	4798      	blx	r3
			buf->__buf = NULL;
   1eae4:	6166      	str	r6, [r4, #20]
		pool = net_buf_pool_get(buf->pool_id);
   1eae6:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
   1eae8:	60e6      	str	r6, [r4, #12]
		if (pool->destroy) {
   1eaea:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1eaee:	6066      	str	r6, [r4, #4]
		if (pool->destroy) {
   1eaf0:	6a1b      	ldr	r3, [r3, #32]
   1eaf2:	b11b      	cbz	r3, 1eafc <net_buf_unref+0x54>
			pool->destroy(buf);
   1eaf4:	4620      	mov	r0, r4
   1eaf6:	4798      	blx	r3
{
   1eaf8:	4644      	mov	r4, r8
   1eafa:	e7db      	b.n	1eab4 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   1eafc:	4621      	mov	r1, r4
   1eafe:	fb00 5007 	mla	r0, r0, r7, r5
   1eb02:	f00d f9d3 	bl	2beac <k_queue_prepend>
}
   1eb06:	e7f7      	b.n	1eaf8 <net_buf_unref+0x50>
   1eb08:	20000b50 	.word	0x20000b50

0001eb0c <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   1eb0c:	4b08      	ldr	r3, [pc, #32]	; (1eb30 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1eb0e:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1eb10:	1ac3      	subs	r3, r0, r3
{
   1eb12:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1eb14:	4907      	ldr	r1, [pc, #28]	; (1eb34 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   1eb16:	109b      	asrs	r3, r3, #2
{
   1eb18:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1eb1a:	4359      	muls	r1, r3
   1eb1c:	4806      	ldr	r0, [pc, #24]	; (1eb38 <onoff_stop+0x2c>)
   1eb1e:	2240      	movs	r2, #64	; 0x40
   1eb20:	f00c fc73 	bl	2b40a <stop>
	notify(mgr, res);
   1eb24:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1eb26:	4601      	mov	r1, r0
	notify(mgr, res);
   1eb28:	4620      	mov	r0, r4
}
   1eb2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1eb2e:	4718      	bx	r3
   1eb30:	2000379c 	.word	0x2000379c
   1eb34:	b6db6db7 	.word	0xb6db6db7
   1eb38:	0002c7dc 	.word	0x0002c7dc

0001eb3c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1eb3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1eb3e:	4c0c      	ldr	r4, [pc, #48]	; (1eb70 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1eb40:	4a0c      	ldr	r2, [pc, #48]	; (1eb74 <onoff_start+0x38>)
   1eb42:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   1eb44:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1eb46:	9300      	str	r3, [sp, #0]
{
   1eb48:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1eb4a:	460b      	mov	r3, r1
   1eb4c:	490a      	ldr	r1, [pc, #40]	; (1eb78 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   1eb4e:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1eb50:	4361      	muls	r1, r4
{
   1eb52:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1eb54:	4809      	ldr	r0, [pc, #36]	; (1eb7c <onoff_start+0x40>)
   1eb56:	f00c fc84 	bl	2b462 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1eb5a:	1e01      	subs	r1, r0, #0
   1eb5c:	da05      	bge.n	1eb6a <onoff_start+0x2e>
		notify(mgr, err);
   1eb5e:	4630      	mov	r0, r6
   1eb60:	462b      	mov	r3, r5
	}
}
   1eb62:	b002      	add	sp, #8
   1eb64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   1eb68:	4718      	bx	r3
}
   1eb6a:	b002      	add	sp, #8
   1eb6c:	bd70      	pop	{r4, r5, r6, pc}
   1eb6e:	bf00      	nop
   1eb70:	2000379c 	.word	0x2000379c
   1eb74:	0002b4cd 	.word	0x0002b4cd
   1eb78:	b6db6db7 	.word	0xb6db6db7
   1eb7c:	0002c7dc 	.word	0x0002c7dc

0001eb80 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1eb80:	2200      	movs	r2, #0
{
   1eb82:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1eb84:	2101      	movs	r1, #1
{
   1eb86:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1eb88:	4610      	mov	r0, r2
   1eb8a:	f7f6 f941 	bl	14e10 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1eb8e:	480f      	ldr	r0, [pc, #60]	; (1ebcc <clk_init+0x4c>)
   1eb90:	f002 fea8 	bl	218e4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1eb94:	4b0e      	ldr	r3, [pc, #56]	; (1ebd0 <clk_init+0x50>)
   1eb96:	4298      	cmp	r0, r3
   1eb98:	d115      	bne.n	1ebc6 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1eb9a:	f00c ff73 	bl	2ba84 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   1eb9e:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1eba0:	490c      	ldr	r1, [pc, #48]	; (1ebd4 <clk_init+0x54>)
   1eba2:	4630      	mov	r0, r6
   1eba4:	f008 ff32 	bl	27a0c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1eba8:	2800      	cmp	r0, #0
   1ebaa:	db0b      	blt.n	1ebc4 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1ebac:	2501      	movs	r5, #1
   1ebae:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
   1ebb0:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1ebb2:	4908      	ldr	r1, [pc, #32]	; (1ebd4 <clk_init+0x54>)
   1ebb4:	f104 001c 	add.w	r0, r4, #28
   1ebb8:	f008 ff28 	bl	27a0c <onoff_manager_init>
		if (err < 0) {
   1ebbc:	2800      	cmp	r0, #0
   1ebbe:	db01      	blt.n	1ebc4 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1ebc0:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   1ebc2:	2000      	movs	r0, #0
}
   1ebc4:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1ebc6:	f06f 0004 	mvn.w	r0, #4
   1ebca:	e7fb      	b.n	1ebc4 <clk_init+0x44>
   1ebcc:	0001ec0d 	.word	0x0001ec0d
   1ebd0:	0bad0000 	.word	0x0bad0000
   1ebd4:	0002d370 	.word	0x0002d370

0001ebd8 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1ebd8:	b570      	push	{r4, r5, r6, lr}
   1ebda:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1ebdc:	230c      	movs	r3, #12
   1ebde:	4809      	ldr	r0, [pc, #36]	; (1ec04 <clkstarted_handle.constprop.0+0x2c>)
   1ebe0:	434b      	muls	r3, r1
   1ebe2:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   1ebe4:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   1ebe8:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   1ebea:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   1ebec:	4418      	add	r0, r3
	sub_data->cb = NULL;
   1ebee:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   1ebf0:	f00c fbf8 	bl	2b3e4 <set_on_state>
	if (callback) {
   1ebf4:	b12d      	cbz	r5, 1ec02 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1ebf6:	4632      	mov	r2, r6
   1ebf8:	462b      	mov	r3, r5
   1ebfa:	4803      	ldr	r0, [pc, #12]	; (1ec08 <clkstarted_handle.constprop.0+0x30>)
}
   1ebfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1ec00:	4718      	bx	r3
}
   1ec02:	bd70      	pop	{r4, r5, r6, pc}
   1ec04:	2000379c 	.word	0x2000379c
   1ec08:	0002c7dc 	.word	0x0002c7dc

0001ec0c <clock_event_handler>:
	switch (event) {
   1ec0c:	b110      	cbz	r0, 1ec14 <clock_event_handler+0x8>
   1ec0e:	2801      	cmp	r0, #1
   1ec10:	d004      	beq.n	1ec1c <clock_event_handler+0x10>
   1ec12:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1ec14:	4b03      	ldr	r3, [pc, #12]	; (1ec24 <clock_event_handler+0x18>)
   1ec16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ec18:	075b      	lsls	r3, r3, #29
   1ec1a:	d101      	bne.n	1ec20 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1ec1c:	f7ff bfdc 	b.w	1ebd8 <clkstarted_handle.constprop.0>
}
   1ec20:	4770      	bx	lr
   1ec22:	bf00      	nop
   1ec24:	2000379c 	.word	0x2000379c

0001ec28 <generic_hfclk_start>:
{
   1ec28:	b508      	push	{r3, lr}
	__asm__ volatile(
   1ec2a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ec2e:	f3ef 8111 	mrs	r1, BASEPRI
   1ec32:	f383 8812 	msr	BASEPRI_MAX, r3
   1ec36:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1ec3a:	4a12      	ldr	r2, [pc, #72]	; (1ec84 <generic_hfclk_start+0x5c>)
   1ec3c:	6813      	ldr	r3, [r2, #0]
   1ec3e:	f043 0002 	orr.w	r0, r3, #2
   1ec42:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1ec44:	07da      	lsls	r2, r3, #31
   1ec46:	d408      	bmi.n	1ec5a <generic_hfclk_start+0x32>
	__asm__ volatile(
   1ec48:	f381 8811 	msr	BASEPRI, r1
   1ec4c:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1ec50:	2001      	movs	r0, #1
}
   1ec52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1ec56:	f002 be35 	b.w	218c4 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1ec5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ec5e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1ec62:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1ec66:	07d3      	lsls	r3, r2, #31
   1ec68:	d5ee      	bpl.n	1ec48 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   1ec6a:	4807      	ldr	r0, [pc, #28]	; (1ec88 <generic_hfclk_start+0x60>)
   1ec6c:	f00c fbba 	bl	2b3e4 <set_on_state>
   1ec70:	f381 8811 	msr	BASEPRI, r1
   1ec74:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
   1ec78:	2000      	movs	r0, #0
}
   1ec7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1ec7e:	f7ff bfab 	b.w	1ebd8 <clkstarted_handle.constprop.0>
   1ec82:	bf00      	nop
   1ec84:	200037ec 	.word	0x200037ec
   1ec88:	200037dc 	.word	0x200037dc

0001ec8c <api_blocking_start>:
{
   1ec8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1ec8e:	2200      	movs	r2, #0
   1ec90:	2301      	movs	r3, #1
   1ec92:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1ec96:	ab04      	add	r3, sp, #16
   1ec98:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1ec9c:	4a09      	ldr	r2, [pc, #36]	; (1ecc4 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1ec9e:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1eca2:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1eca4:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1eca8:	f00c fc09 	bl	2b4be <api_start>
	if (err < 0) {
   1ecac:	2800      	cmp	r0, #0
   1ecae:	db05      	blt.n	1ecbc <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1ecb0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1ecb4:	2300      	movs	r3, #0
   1ecb6:	4668      	mov	r0, sp
   1ecb8:	f004 fb52 	bl	23360 <z_impl_k_sem_take>
}
   1ecbc:	b007      	add	sp, #28
   1ecbe:	f85d fb04 	ldr.w	pc, [sp], #4
   1ecc2:	bf00      	nop
   1ecc4:	0002b4eb 	.word	0x0002b4eb

0001ecc8 <generic_hfclk_stop>:
{
   1ecc8:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ecca:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ecce:	f3ef 8411 	mrs	r4, BASEPRI
   1ecd2:	f383 8812 	msr	BASEPRI_MAX, r3
   1ecd6:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   1ecda:	4a07      	ldr	r2, [pc, #28]	; (1ecf8 <generic_hfclk_stop+0x30>)
   1ecdc:	6813      	ldr	r3, [r2, #0]
   1ecde:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   1ece2:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   1ece4:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   1ece6:	d402      	bmi.n	1ecee <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1ece8:	2001      	movs	r0, #1
   1ecea:	f00c fec6 	bl	2ba7a <nrfx_clock_stop>
	__asm__ volatile(
   1ecee:	f384 8811 	msr	BASEPRI, r4
   1ecf2:	f3bf 8f6f 	isb	sy
}
   1ecf6:	bd10      	pop	{r4, pc}
   1ecf8:	200037ec 	.word	0x200037ec

0001ecfc <z_nrf_clock_control_lf_on>:
{
   1ecfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1ed00:	4938      	ldr	r1, [pc, #224]	; (1ede4 <z_nrf_clock_control_lf_on+0xe8>)
   1ed02:	f3bf 8f5b 	dmb	ish
   1ed06:	4607      	mov	r7, r0
   1ed08:	2201      	movs	r2, #1
   1ed0a:	e851 3f00 	ldrex	r3, [r1]
   1ed0e:	e841 2000 	strex	r0, r2, [r1]
   1ed12:	2800      	cmp	r0, #0
   1ed14:	d1f9      	bne.n	1ed0a <z_nrf_clock_control_lf_on+0xe>
   1ed16:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1ed1a:	b933      	cbnz	r3, 1ed2a <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1ed1c:	4932      	ldr	r1, [pc, #200]	; (1ede8 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
   1ed1e:	4833      	ldr	r0, [pc, #204]	; (1edec <z_nrf_clock_control_lf_on+0xf0>)
   1ed20:	604b      	str	r3, [r1, #4]
   1ed22:	60cb      	str	r3, [r1, #12]
   1ed24:	608a      	str	r2, [r1, #8]
   1ed26:	f008 fe84 	bl	27a32 <onoff_request>
	switch (start_mode) {
   1ed2a:	1e7b      	subs	r3, r7, #1
   1ed2c:	2b01      	cmp	r3, #1
   1ed2e:	d82b      	bhi.n	1ed88 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1ed30:	2f01      	cmp	r7, #1
   1ed32:	d107      	bne.n	1ed44 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1ed34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ed38:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1ed3c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1ed40:	2b01      	cmp	r3, #1
   1ed42:	d021      	beq.n	1ed88 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1ed44:	f00d f806 	bl	2bd54 <k_is_in_isr>
   1ed48:	4605      	mov	r5, r0
   1ed4a:	b9f8      	cbnz	r0, 1ed8c <z_nrf_clock_control_lf_on+0x90>
	return !z_sys_post_kernel;
   1ed4c:	4b28      	ldr	r3, [pc, #160]	; (1edf0 <z_nrf_clock_control_lf_on+0xf4>)
   1ed4e:	781b      	ldrb	r3, [r3, #0]
   1ed50:	b1e3      	cbz	r3, 1ed8c <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
   1ed52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ed56:	2202      	movs	r2, #2
   1ed58:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   1ed5c:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ed5e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 1edf4 <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1ed62:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   1ed66:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1ed6a:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   1ed6e:	03d2      	lsls	r2, r2, #15
   1ed70:	d516      	bpl.n	1eda0 <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1ed72:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1ed76:	2b01      	cmp	r3, #1
   1ed78:	d001      	beq.n	1ed7e <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1ed7a:	2f01      	cmp	r7, #1
   1ed7c:	d110      	bne.n	1eda0 <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
   1ed7e:	b35d      	cbz	r5, 1edd8 <z_nrf_clock_control_lf_on+0xdc>
   1ed80:	f386 8811 	msr	BASEPRI, r6
   1ed84:	f3bf 8f6f 	isb	sy
}
   1ed88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1ed8c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ed90:	f3ef 8611 	mrs	r6, BASEPRI
   1ed94:	f383 8812 	msr	BASEPRI_MAX, r3
   1ed98:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1ed9c:	2501      	movs	r5, #1
   1ed9e:	e7de      	b.n	1ed5e <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1eda0:	b1ad      	cbz	r5, 1edce <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1eda2:	4630      	mov	r0, r6
   1eda4:	f7f5 ff92 	bl	14ccc <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1eda8:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1edac:	2b00      	cmp	r3, #0
   1edae:	d1da      	bne.n	1ed66 <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1edb0:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1edb4:	2a00      	cmp	r2, #0
   1edb6:	d0d6      	beq.n	1ed66 <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1edb8:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1edbc:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   1edc0:	2301      	movs	r3, #1
   1edc2:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
   1edc6:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1edca:	60a3      	str	r3, [r4, #8]
}
   1edcc:	e7cb      	b.n	1ed66 <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
   1edce:	2100      	movs	r1, #0
   1edd0:	2021      	movs	r0, #33	; 0x21
   1edd2:	f004 ffa1 	bl	23d18 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1edd6:	e7e7      	b.n	1eda8 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
   1edd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1eddc:	2202      	movs	r2, #2
   1edde:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1ede2:	e7d1      	b.n	1ed88 <z_nrf_clock_control_lf_on+0x8c>
   1ede4:	20003798 	.word	0x20003798
   1ede8:	20003788 	.word	0x20003788
   1edec:	200037b8 	.word	0x200037b8
   1edf0:	20004b67 	.word	0x20004b67
   1edf4:	e000e100 	.word	0xe000e100

0001edf8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
   1edf8:	b508      	push	{r3, lr}
   1edfa:	4807      	ldr	r0, [pc, #28]	; (1ee18 <uart_console_init+0x20>)
   1edfc:	f00c fedc 	bl	2bbb8 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   1ee00:	b138      	cbz	r0, 1ee12 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   1ee02:	4806      	ldr	r0, [pc, #24]	; (1ee1c <uart_console_init+0x24>)
   1ee04:	f7f6 fd96 	bl	15934 <__stdout_hook_install>
	__printk_hook_install(console_out);
   1ee08:	4804      	ldr	r0, [pc, #16]	; (1ee1c <uart_console_init+0x24>)
   1ee0a:	f7f3 fbe5 	bl	125d8 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   1ee0e:	2000      	movs	r0, #0
}
   1ee10:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1ee12:	f06f 0012 	mvn.w	r0, #18
   1ee16:	e7fb      	b.n	1ee10 <uart_console_init+0x18>
   1ee18:	0002c86c 	.word	0x0002c86c
   1ee1c:	0001ee21 	.word	0x0001ee21

0001ee20 <console_out>:
	if ('\n' == c) {
   1ee20:	280a      	cmp	r0, #10
{
   1ee22:	b538      	push	{r3, r4, r5, lr}
   1ee24:	4d07      	ldr	r5, [pc, #28]	; (1ee44 <console_out+0x24>)
   1ee26:	4604      	mov	r4, r0
	if ('\n' == c) {
   1ee28:	d104      	bne.n	1ee34 <console_out+0x14>
   1ee2a:	68ab      	ldr	r3, [r5, #8]
   1ee2c:	210d      	movs	r1, #13
   1ee2e:	685b      	ldr	r3, [r3, #4]
   1ee30:	4628      	mov	r0, r5
   1ee32:	4798      	blx	r3
   1ee34:	68ab      	ldr	r3, [r5, #8]
   1ee36:	4803      	ldr	r0, [pc, #12]	; (1ee44 <console_out+0x24>)
   1ee38:	685b      	ldr	r3, [r3, #4]
   1ee3a:	b2e1      	uxtb	r1, r4
   1ee3c:	4798      	blx	r3
}
   1ee3e:	4620      	mov	r0, r4
   1ee40:	bd38      	pop	{r3, r4, r5, pc}
   1ee42:	bf00      	nop
   1ee44:	0002c86c 	.word	0x0002c86c

0001ee48 <random_byte_get>:
   1ee48:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ee4c:	f3ef 8211 	mrs	r2, BASEPRI
   1ee50:	f383 8812 	msr	BASEPRI_MAX, r3
   1ee54:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1ee58:	4b09      	ldr	r3, [pc, #36]	; (1ee80 <random_byte_get+0x38>)
   1ee5a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1ee5e:	b161      	cbz	r1, 1ee7a <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1ee60:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1ee62:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1ee66:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1ee6a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   1ee6e:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1ee70:	f382 8811 	msr	BASEPRI, r2
   1ee74:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1ee78:	4770      	bx	lr
	int retval = -EAGAIN;
   1ee7a:	f06f 000a 	mvn.w	r0, #10
   1ee7e:	e7f7      	b.n	1ee70 <random_byte_get+0x28>
   1ee80:	4000d000 	.word	0x4000d000

0001ee84 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1ee84:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ee86:	4603      	mov	r3, r0
   1ee88:	4610      	mov	r0, r2
	uint32_t last  = rngp->last;
   1ee8a:	789c      	ldrb	r4, [r3, #2]
	uint32_t mask  = rngp->mask;
   1ee8c:	f893 c003 	ldrb.w	ip, [r3, #3]
	__asm__ volatile(
   1ee90:	f04f 0540 	mov.w	r5, #64	; 0x40
   1ee94:	f3ef 8211 	mrs	r2, BASEPRI
   1ee98:	f385 8812 	msr	BASEPRI_MAX, r5
   1ee9c:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1eea0:	781f      	ldrb	r7, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1eea2:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   1eea6:	1be4      	subs	r4, r4, r7
   1eea8:	ea04 040c 	and.w	r4, r4, ip
	if (available < len) {
   1eeac:	42a0      	cmp	r0, r4
		len = available;
   1eeae:	bf88      	it	hi
   1eeb0:	b2a0      	uxthhi	r0, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1eeb2:	183e      	adds	r6, r7, r0
   1eeb4:	ea0c 0606 	and.w	r6, ip, r6
	first = rngp->first_alloc;
   1eeb8:	463d      	mov	r5, r7
	rngp->first_alloc = (first + len) & mask;
   1eeba:	701e      	strb	r6, [r3, #0]
	__asm__ volatile(
   1eebc:	f382 8811 	msr	BASEPRI, r2
   1eec0:	f3bf 8f6f 	isb	sy
   1eec4:	180a      	adds	r2, r1, r0
	irq_unlock(key);

	while (likely(len--)) {
   1eec6:	428a      	cmp	r2, r1
   1eec8:	d117      	bne.n	1eefa <rng_pool_get+0x76>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1eeca:	4577      	cmp	r7, lr
   1eecc:	d10d      	bne.n	1eeea <rng_pool_get+0x66>
	__asm__ volatile(
   1eece:	f04f 0140 	mov.w	r1, #64	; 0x40
   1eed2:	f3ef 8211 	mrs	r2, BASEPRI
   1eed6:	f381 8812 	msr	BASEPRI_MAX, r1
   1eeda:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1eede:	7819      	ldrb	r1, [r3, #0]
   1eee0:	7059      	strb	r1, [r3, #1]
	__asm__ volatile(
   1eee2:	f382 8811 	msr	BASEPRI, r2
   1eee6:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
	available = available - len;
	if (available <= rngp->threshold) {
   1eeea:	791b      	ldrb	r3, [r3, #4]
	available = available - len;
   1eeec:	1a24      	subs	r4, r4, r0
	if (available <= rngp->threshold) {
   1eeee:	42a3      	cmp	r3, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1eef0:	bf22      	ittt	cs
   1eef2:	4b06      	ldrcs	r3, [pc, #24]	; (1ef0c <rng_pool_get+0x88>)
   1eef4:	2201      	movcs	r2, #1
   1eef6:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1eef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1eefa:	195e      	adds	r6, r3, r5
		first = (first + 1) & mask;
   1eefc:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1eefe:	7976      	ldrb	r6, [r6, #5]
   1ef00:	f801 6b01 	strb.w	r6, [r1], #1
		first = (first + 1) & mask;
   1ef04:	ea05 050c 	and.w	r5, r5, ip
   1ef08:	e7dd      	b.n	1eec6 <rng_pool_get+0x42>
   1ef0a:	bf00      	nop
   1ef0c:	4000d000 	.word	0x4000d000

0001ef10 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1ef10:	43db      	mvns	r3, r3
{
   1ef12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1ef16:	f013 0501 	ands.w	r5, r3, #1
{
   1ef1a:	460e      	mov	r6, r1
   1ef1c:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1ef1e:	d004      	beq.n	1ef2a <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1ef20:	4823      	ldr	r0, [pc, #140]	; (1efb0 <entropy_nrf5_get_entropy_isr+0xa0>)
   1ef22:	f7ff ffaf 	bl	1ee84 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1ef26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1ef2a:	b3a2      	cbz	r2, 1ef96 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   1ef2c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ef30:	f3ef 8811 	mrs	r8, BASEPRI
   1ef34:	f383 8812 	msr	BASEPRI_MAX, r3
   1ef38:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1ef3c:	200d      	movs	r0, #13
   1ef3e:	f7f5 ff59 	bl	14df4 <arch_irq_is_enabled>
   1ef42:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1ef44:	200d      	movs	r0, #13
   1ef46:	f7f5 ff41 	bl	14dcc <arch_irq_disable>
	__asm__ volatile(
   1ef4a:	f388 8811 	msr	BASEPRI, r8
   1ef4e:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1ef52:	f8df a060 	ldr.w	sl, [pc, #96]	; 1efb4 <entropy_nrf5_get_entropy_isr+0xa4>
   1ef56:	f8df 8060 	ldr.w	r8, [pc, #96]	; 1efb8 <entropy_nrf5_get_entropy_isr+0xa8>
   1ef5a:	f8ca 5100 	str.w	r5, [sl, #256]	; 0x100
   1ef5e:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
   1ef62:	f44f 5900 	mov.w	r9, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1ef66:	2301      	movs	r3, #1
   1ef68:	f8ca 3000 	str.w	r3, [sl]
   1ef6c:	4625      	mov	r5, r4
   1ef6e:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1ef72:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   1ef76:	b183      	cbz	r3, 1ef9a <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   1ef78:	f7ff ff66 	bl	1ee48 <random_byte_get>
			if (byte < 0) {
   1ef7c:	1e03      	subs	r3, r0, #0
   1ef7e:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
   1ef82:	dbf6      	blt.n	1ef72 <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   1ef84:	3d01      	subs	r5, #1
   1ef86:	b2ad      	uxth	r5, r5
   1ef88:	5573      	strb	r3, [r6, r5]
		} while (len);
   1ef8a:	2d00      	cmp	r5, #0
   1ef8c:	d1f1      	bne.n	1ef72 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   1ef8e:	b117      	cbz	r7, 1ef96 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   1ef90:	200d      	movs	r0, #13
   1ef92:	f7f5 ff0d 	bl	14db0 <arch_irq_enable>
	return cnt;
   1ef96:	4620      	mov	r0, r4
   1ef98:	e7c5      	b.n	1ef26 <entropy_nrf5_get_entropy_isr+0x16>
	__asm__ volatile(
   1ef9a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ef9e:	f3ef 8011 	mrs	r0, BASEPRI
   1efa2:	f383 8812 	msr	BASEPRI_MAX, r3
   1efa6:	f3bf 8f6f 	isb	sy
	arch_cpu_atomic_idle(key);
   1efaa:	f7f5 fe8f 	bl	14ccc <arch_cpu_atomic_idle>
}
   1efae:	e7e0      	b.n	1ef72 <entropy_nrf5_get_entropy_isr+0x62>
   1efb0:	20003820 	.word	0x20003820
   1efb4:	4000d000 	.word	0x4000d000
   1efb8:	e000e100 	.word	0xe000e100

0001efbc <entropy_nrf5_get_entropy>:
{
   1efbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   1efc0:	4f12      	ldr	r7, [pc, #72]	; (1f00c <entropy_nrf5_get_entropy+0x50>)
   1efc2:	460d      	mov	r5, r1
   1efc4:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1efc6:	f107 0845 	add.w	r8, r7, #69	; 0x45
	while (len) {
   1efca:	b914      	cbnz	r4, 1efd2 <entropy_nrf5_get_entropy+0x16>
}
   1efcc:	4620      	mov	r0, r4
   1efce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1efd2:	f04f 33ff 	mov.w	r3, #4294967295
   1efd6:	f04f 32ff 	mov.w	r2, #4294967295
   1efda:	4638      	mov	r0, r7
   1efdc:	f004 f9c0 	bl	23360 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1efe0:	4622      	mov	r2, r4
   1efe2:	4629      	mov	r1, r5
   1efe4:	4640      	mov	r0, r8
   1efe6:	f7ff ff4d 	bl	1ee84 <rng_pool_get>
   1efea:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   1efec:	4638      	mov	r0, r7
   1efee:	f004 f991 	bl	23314 <z_impl_k_sem_give>
		if (bytes == 0U) {
   1eff2:	b93e      	cbnz	r6, 1f004 <entropy_nrf5_get_entropy+0x48>
	return z_impl_k_sem_take(sem, timeout);
   1eff4:	f04f 32ff 	mov.w	r2, #4294967295
   1eff8:	f04f 33ff 	mov.w	r3, #4294967295
   1effc:	4804      	ldr	r0, [pc, #16]	; (1f010 <entropy_nrf5_get_entropy+0x54>)
   1effe:	f004 f9af 	bl	23360 <z_impl_k_sem_take>
	while (len) {
   1f002:	e7e6      	b.n	1efd2 <entropy_nrf5_get_entropy+0x16>
		len -= bytes;
   1f004:	1ba4      	subs	r4, r4, r6
   1f006:	b2a4      	uxth	r4, r4
		buf += bytes;
   1f008:	4435      	add	r5, r6
   1f00a:	e7de      	b.n	1efca <entropy_nrf5_get_entropy+0xe>
   1f00c:	200037f0 	.word	0x200037f0
   1f010:	20003808 	.word	0x20003808

0001f014 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1f014:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1f016:	4c19      	ldr	r4, [pc, #100]	; (1f07c <entropy_nrf5_init+0x68>)
   1f018:	2201      	movs	r2, #1
   1f01a:	4611      	mov	r1, r2
   1f01c:	4620      	mov	r0, r4
   1f01e:	f00c ff53 	bl	2bec8 <z_impl_k_sem_init>
   1f022:	2201      	movs	r2, #1
   1f024:	2100      	movs	r1, #0
   1f026:	f104 0018 	add.w	r0, r4, #24
   1f02a:	f00c ff4d 	bl	2bec8 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1f02e:	f240 4307 	movw	r3, #1031	; 0x407
   1f032:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1f036:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1f03a:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1f03c:	230c      	movs	r3, #12
   1f03e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1f042:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   1f044:	4b0e      	ldr	r3, [pc, #56]	; (1f080 <entropy_nrf5_init+0x6c>)
   1f046:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1f04a:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1f04e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1f052:	f022 0201 	bic.w	r2, r2, #1
   1f056:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   1f05a:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1f05c:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   1f060:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1f064:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1f068:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1f06a:	6019      	str	r1, [r3, #0]
   1f06c:	200d      	movs	r0, #13
   1f06e:	f7f5 fecf 	bl	14e10 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1f072:	200d      	movs	r0, #13
   1f074:	f7f5 fe9c 	bl	14db0 <arch_irq_enable>

	return 0;
}
   1f078:	4628      	mov	r0, r5
   1f07a:	bd38      	pop	{r3, r4, r5, pc}
   1f07c:	200037f0 	.word	0x200037f0
   1f080:	4000d000 	.word	0x4000d000

0001f084 <isr>:
{
   1f084:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1f086:	f7ff fedf 	bl	1ee48 <random_byte_get>
	if (byte < 0) {
   1f08a:	2800      	cmp	r0, #0
   1f08c:	db20      	blt.n	1f0d0 <isr+0x4c>
	uint8_t last  = rngp->last;
   1f08e:	4b17      	ldr	r3, [pc, #92]	; (1f0ec <isr+0x68>)
   1f090:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1f094:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1f098:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1f09c:	1b14      	subs	r4, r2, r4
   1f09e:	ea31 0404 	bics.w	r4, r1, r4
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1f0a2:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1f0a4:	d10d      	bne.n	1f0c2 <isr+0x3e>
	uint8_t last  = rngp->last;
   1f0a6:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1f0aa:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1f0ae:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1f0b2:	1b14      	subs	r4, r2, r4
   1f0b4:	ea31 0404 	bics.w	r4, r1, r4
   1f0b8:	d10b      	bne.n	1f0d2 <isr+0x4e>
   1f0ba:	4b0d      	ldr	r3, [pc, #52]	; (1f0f0 <isr+0x6c>)
   1f0bc:	2201      	movs	r2, #1
   1f0be:	605a      	str	r2, [r3, #4]
}
   1f0c0:	e00e      	b.n	1f0e0 <isr+0x5c>
	rngp->buffer[last] = byte;
   1f0c2:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   1f0c4:	3201      	adds	r2, #1
   1f0c6:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   1f0c8:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1f0cc:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
}
   1f0d0:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1f0d2:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   1f0d4:	3201      	adds	r2, #1
   1f0d6:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   1f0d8:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1f0dc:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1f0e0:	4804      	ldr	r0, [pc, #16]	; (1f0f4 <isr+0x70>)
}
   1f0e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f0e6:	f004 b915 	b.w	23314 <z_impl_k_sem_give>
   1f0ea:	bf00      	nop
   1f0ec:	200037f0 	.word	0x200037f0
   1f0f0:	4000d000 	.word	0x4000d000
   1f0f4:	20003808 	.word	0x20003808

0001f0f8 <qspi_get_zephyr_ret_code>:
/**
 * @brief Converts NRFX return codes to the zephyr ones
 */
static inline int qspi_get_zephyr_ret_code(nrfx_err_t res)
{
	switch (res) {
   1f0f8:	f100 4074 	add.w	r0, r0, #4093640704	; 0xf4000000
   1f0fc:	f500 00a6 	add.w	r0, r0, #5439488	; 0x530000
   1f100:	280a      	cmp	r0, #10
   1f102:	bf9a      	itte	ls
   1f104:	4b02      	ldrls	r3, [pc, #8]	; (1f110 <qspi_get_zephyr_ret_code+0x18>)
   1f106:	f933 0010 	ldrshls.w	r0, [r3, r0, lsl #1]
{
   1f10a:	f06f 000f 	mvnhi.w	r0, #15
	case NRFX_ERROR_BUSY:
	case NRFX_ERROR_TIMEOUT:
	default:
		return -EBUSY;
	}
}
   1f10e:	4770      	bx	lr
   1f110:	0002d7b4 	.word	0x0002d7b4

0001f114 <qspi_nor_pages_layout>:

static void qspi_nor_pages_layout(const struct device *dev,
				  const struct flash_pages_layout **layout,
				  size_t *layout_size)
{
	*layout = &dev_layout;
   1f114:	4b02      	ldr	r3, [pc, #8]	; (1f120 <qspi_nor_pages_layout+0xc>)
   1f116:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1f118:	2301      	movs	r3, #1
   1f11a:	6013      	str	r3, [r2, #0]
}
   1f11c:	4770      	bx	lr
   1f11e:	bf00      	nop
   1f120:	0002d434 	.word	0x0002d434

0001f124 <qspi_flash_get_parameters>:
		.write_block_size = 4,
		.erase_value = 0xff,
	};

	return &qspi_flash_parameters;
}
   1f124:	4800      	ldr	r0, [pc, #0]	; (1f128 <qspi_flash_get_parameters+0x4>)
   1f126:	4770      	bx	lr
   1f128:	0002d3c8 	.word	0x0002d3c8

0001f12c <qspi_wait_for_completion.isra.0>:
	if (res == NRFX_SUCCESS) {
   1f12c:	4b05      	ldr	r3, [pc, #20]	; (1f144 <qspi_wait_for_completion.isra.0+0x18>)
   1f12e:	4299      	cmp	r1, r3
   1f130:	d106      	bne.n	1f140 <qspi_wait_for_completion.isra.0+0x14>
	return z_impl_k_sem_take(sem, timeout);
   1f132:	f04f 32ff 	mov.w	r2, #4294967295
   1f136:	f04f 33ff 	mov.w	r3, #4294967295
   1f13a:	3030      	adds	r0, #48	; 0x30
   1f13c:	f004 b910 	b.w	23360 <z_impl_k_sem_take>
}
   1f140:	4770      	bx	lr
   1f142:	bf00      	nop
   1f144:	0bad0000 	.word	0x0bad0000

0001f148 <qspi_nor_erase.part.0>:
static int qspi_nor_erase(const struct device *dev, off_t addr, size_t size)
   1f148:	b580      	push	{r7, lr}
   1f14a:	af00      	add	r7, sp, #0
		LOG_ERR("erase error: address or size "
   1f14c:	b088      	sub	sp, #32
   1f14e:	466a      	mov	r2, sp
   1f150:	4b08      	ldr	r3, [pc, #32]	; (1f174 <qspi_nor_erase.part.0+0x2c>)
   1f152:	61d1      	str	r1, [r2, #28]
   1f154:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f158:	2304      	movs	r3, #4
   1f15a:	f842 3f10 	str.w	r3, [r2, #16]!
   1f15e:	4806      	ldr	r0, [pc, #24]	; (1f178 <qspi_nor_erase.part.0+0x30>)
   1f160:	2300      	movs	r3, #0
   1f162:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1f166:	f7f4 fd2d 	bl	13bc4 <z_impl_z_log_msg_static_create>
}
   1f16a:	f06f 0015 	mvn.w	r0, #21
   1f16e:	46bd      	mov	sp, r7
   1f170:	bd80      	pop	{r7, pc}
   1f172:	bf00      	nop
   1f174:	00030069 	.word	0x00030069
   1f178:	0002cbf4 	.word	0x0002cbf4

0001f17c <qspi_send_cmd>:
{
   1f17c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f17e:	b083      	sub	sp, #12
	if (cmd->tx_buf) {
   1f180:	684c      	ldr	r4, [r1, #4]
{
   1f182:	af00      	add	r7, sp, #0
   1f184:	4605      	mov	r5, r0
	if (cmd->tx_buf) {
   1f186:	b174      	cbz	r4, 1f1a6 <qspi_send_cmd+0x2a>
		tx_buf = cmd->tx_buf->buf;
   1f188:	e9d4 4300 	ldrd	r4, r3, [r4]
	if (cmd->rx_buf) {
   1f18c:	6888      	ldr	r0, [r1, #8]
   1f18e:	b310      	cbz	r0, 1f1d6 <qspi_send_cmd+0x5a>
		rx_len = cmd->rx_buf->len;
   1f190:	e9d0 6000 	ldrd	r6, r0, [r0]
	if ((rx_len != 0) && (tx_len != 0)) {
   1f194:	b300      	cbz	r0, 1f1d8 <qspi_send_cmd+0x5c>
   1f196:	b1fb      	cbz	r3, 1f1d8 <qspi_send_cmd+0x5c>
		if (rx_len != tx_len) {
   1f198:	4298      	cmp	r0, r3
   1f19a:	d006      	beq.n	1f1aa <qspi_send_cmd+0x2e>
		return -EINVAL;
   1f19c:	f06f 0015 	mvn.w	r0, #21
}
   1f1a0:	370c      	adds	r7, #12
   1f1a2:	46bd      	mov	sp, r7
   1f1a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	size_t tx_len = 0;
   1f1a6:	4623      	mov	r3, r4
   1f1a8:	e7f0      	b.n	1f18c <qspi_send_cmd+0x10>
		xfer_len += tx_len;
   1f1aa:	3301      	adds	r3, #1
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   1f1ac:	2b09      	cmp	r3, #9
		LOG_WRN("cinstr %02x transfer too long: %zu",
   1f1ae:	7809      	ldrb	r1, [r1, #0]
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   1f1b0:	d915      	bls.n	1f1de <qspi_send_cmd+0x62>
		LOG_WRN("cinstr %02x transfer too long: %zu",
   1f1b2:	466c      	mov	r4, sp
   1f1b4:	b088      	sub	sp, #32
   1f1b6:	466a      	mov	r2, sp
   1f1b8:	4815      	ldr	r0, [pc, #84]	; (1f210 <qspi_send_cmd+0x94>)
   1f1ba:	61d3      	str	r3, [r2, #28]
   1f1bc:	2304      	movs	r3, #4
   1f1be:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1f1c2:	f842 3f10 	str.w	r3, [r2, #16]!
   1f1c6:	4813      	ldr	r0, [pc, #76]	; (1f214 <qspi_send_cmd+0x98>)
   1f1c8:	2300      	movs	r3, #0
   1f1ca:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1f1ce:	f7f4 fcf9 	bl	13bc4 <z_impl_z_log_msg_static_create>
   1f1d2:	46a5      	mov	sp, r4
		return -EINVAL;
   1f1d4:	e7e2      	b.n	1f19c <qspi_send_cmd+0x20>
	void *rx_buf = NULL;
   1f1d6:	4606      	mov	r6, r0
		xfer_len += tx_len + rx_len;
   1f1d8:	3301      	adds	r3, #1
   1f1da:	4403      	add	r3, r0
   1f1dc:	e7e6      	b.n	1f1ac <qspi_send_cmd+0x30>
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   1f1de:	707b      	strb	r3, [r7, #1]
   1f1e0:	f240 1301 	movw	r3, #257	; 0x101
	qspi_lock(dev);
   1f1e4:	6928      	ldr	r0, [r5, #16]
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   1f1e6:	807b      	strh	r3, [r7, #2]
   1f1e8:	2300      	movs	r3, #0
   1f1ea:	713b      	strb	r3, [r7, #4]
   1f1ec:	7039      	strb	r1, [r7, #0]
   1f1ee:	717a      	strb	r2, [r7, #5]
	qspi_lock(dev);
   1f1f0:	f00c f9c2 	bl	2b578 <qspi_lock.isra.0>
	int res = nrfx_qspi_cinstr_xfer(&cinstr_cfg, tx_buf, rx_buf);
   1f1f4:	4621      	mov	r1, r4
   1f1f6:	4632      	mov	r2, r6
   1f1f8:	4638      	mov	r0, r7
   1f1fa:	f003 fb49 	bl	22890 <nrfx_qspi_cinstr_xfer>
   1f1fe:	4604      	mov	r4, r0
	qspi_unlock(dev);
   1f200:	6928      	ldr	r0, [r5, #16]
   1f202:	f00c f9c6 	bl	2b592 <qspi_unlock.isra.0>
	return qspi_get_zephyr_ret_code(res);
   1f206:	4620      	mov	r0, r4
   1f208:	f7ff ff76 	bl	1f0f8 <qspi_get_zephyr_ret_code>
   1f20c:	e7c8      	b.n	1f1a0 <qspi_send_cmd+0x24>
   1f20e:	bf00      	nop
   1f210:	000300b3 	.word	0x000300b3
   1f214:	0002cbf4 	.word	0x0002cbf4

0001f218 <qspi_device_uninit>:
{
   1f218:	b538      	push	{r3, r4, r5, lr}
	struct qspi_nor_data *dev_data = dev->data;
   1f21a:	6905      	ldr	r5, [r0, #16]
	if (dev_data->xip_enabled) {
   1f21c:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
{
   1f220:	4604      	mov	r4, r0
	if (dev_data->xip_enabled) {
   1f222:	b9fb      	cbnz	r3, 1f264 <qspi_device_uninit+0x4c>
	qspi_lock(dev);
   1f224:	4628      	mov	r0, r5
   1f226:	f00c f9a7 	bl	2b578 <qspi_lock.isra.0>
   1f22a:	2200      	movs	r2, #0
   1f22c:	2300      	movs	r3, #0
   1f22e:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1f232:	f004 f895 	bl	23360 <z_impl_k_sem_take>
	if (last) {
   1f236:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   1f238:	b94b      	cbnz	r3, 1f24e <qspi_device_uninit+0x36>
		while (nrfx_qspi_mem_busy_check() != NRFX_SUCCESS) {
   1f23a:	4d0b      	ldr	r5, [pc, #44]	; (1f268 <qspi_device_uninit+0x50>)
   1f23c:	f003 fb74 	bl	22928 <nrfx_qspi_mem_busy_check>
   1f240:	42a8      	cmp	r0, r5
   1f242:	d109      	bne.n	1f258 <qspi_device_uninit+0x40>
		nrfx_qspi_uninit();
   1f244:	f003 fb92 	bl	2296c <nrfx_qspi_uninit>
		qspi_initialized = false;
   1f248:	4b08      	ldr	r3, [pc, #32]	; (1f26c <qspi_device_uninit+0x54>)
   1f24a:	2200      	movs	r2, #0
   1f24c:	701a      	strb	r2, [r3, #0]
	qspi_unlock(dev);
   1f24e:	6920      	ldr	r0, [r4, #16]
}
   1f250:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	qspi_unlock(dev);
   1f254:	f00c b99d 	b.w	2b592 <qspi_unlock.isra.0>
	return z_impl_k_sleep(timeout);
   1f258:	2100      	movs	r1, #0
   1f25a:	f240 6067 	movw	r0, #1639	; 0x667
   1f25e:	f004 fd5b 	bl	23d18 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1f262:	e7eb      	b.n	1f23c <qspi_device_uninit+0x24>
}
   1f264:	bd38      	pop	{r3, r4, r5, pc}
   1f266:	bf00      	nop
   1f268:	0bad0000 	.word	0x0bad0000
   1f26c:	20004663 	.word	0x20004663

0001f270 <qspi_device_init>:
{
   1f270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct qspi_nor_data *dev_data = dev->data;
   1f272:	6906      	ldr	r6, [r0, #16]
	if (dev_data->xip_enabled) {
   1f274:	f896 4060 	ldrb.w	r4, [r6, #96]	; 0x60
{
   1f278:	4605      	mov	r5, r0
	if (dev_data->xip_enabled) {
   1f27a:	b9d4      	cbnz	r4, 1f2b2 <qspi_device_init+0x42>
	qspi_lock(dev);
   1f27c:	4630      	mov	r0, r6
   1f27e:	f00c f97b 	bl	2b578 <qspi_lock.isra.0>
	if (!qspi_initialized) {
   1f282:	4f0d      	ldr	r7, [pc, #52]	; (1f2b8 <qspi_device_init+0x48>)
	z_impl_k_sem_give(sem);
   1f284:	f106 0048 	add.w	r0, r6, #72	; 0x48
   1f288:	f004 f844 	bl	23314 <z_impl_k_sem_give>
   1f28c:	783b      	ldrb	r3, [r7, #0]
   1f28e:	b95b      	cbnz	r3, 1f2a8 <qspi_device_init+0x38>
		res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   1f290:	490a      	ldr	r1, [pc, #40]	; (1f2bc <qspi_device_init+0x4c>)
   1f292:	6868      	ldr	r0, [r5, #4]
   1f294:	4632      	mov	r2, r6
   1f296:	f003 fa0b 	bl	226b0 <nrfx_qspi_init>
		ret = qspi_get_zephyr_ret_code(res);
   1f29a:	f7ff ff2d 	bl	1f0f8 <qspi_get_zephyr_ret_code>
		qspi_initialized = (ret == 0);
   1f29e:	fab0 f380 	clz	r3, r0
   1f2a2:	095b      	lsrs	r3, r3, #5
   1f2a4:	4604      	mov	r4, r0
   1f2a6:	703b      	strb	r3, [r7, #0]
	qspi_unlock(dev);
   1f2a8:	6928      	ldr	r0, [r5, #16]
   1f2aa:	f00c f972 	bl	2b592 <qspi_unlock.isra.0>
}
   1f2ae:	4620      	mov	r0, r4
   1f2b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   1f2b2:	2400      	movs	r4, #0
   1f2b4:	e7fb      	b.n	1f2ae <qspi_device_init+0x3e>
   1f2b6:	bf00      	nop
   1f2b8:	20004663 	.word	0x20004663
   1f2bc:	0002b56d 	.word	0x0002b56d

0001f2c0 <qspi_nor_erase>:
{
   1f2c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (addr < 0 ||
   1f2c4:	1e0b      	subs	r3, r1, #0
	const struct qspi_nor_config *params = dev->config;
   1f2c6:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
   1f2ca:	af00      	add	r7, sp, #0
   1f2cc:	4606      	mov	r6, r0
   1f2ce:	4615      	mov	r5, r2
	if (addr < 0 ||
   1f2d0:	db05      	blt.n	1f2de <qspi_nor_erase+0x1e>
	    (addr + size) > params->size) {
   1f2d2:	1899      	adds	r1, r3, r2
	if (addr < 0 ||
   1f2d4:	f8da 2018 	ldr.w	r2, [sl, #24]
   1f2d8:	4291      	cmp	r1, r2
	    (addr + size) > params->size) {
   1f2da:	4699      	mov	r9, r3
	if (addr < 0 ||
   1f2dc:	d908      	bls.n	1f2f0 <qspi_nor_erase+0x30>
   1f2de:	4629      	mov	r1, r5
   1f2e0:	4618      	mov	r0, r3
   1f2e2:	f7ff ff31 	bl	1f148 <qspi_nor_erase.part.0>
   1f2e6:	4604      	mov	r4, r0
}
   1f2e8:	4620      	mov	r0, r4
   1f2ea:	46bd      	mov	sp, r7
   1f2ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((addr % QSPI_SECTOR_SIZE) != 0) {
   1f2f0:	f3c3 020b 	ubfx	r2, r3, #0, #12
	if ((size == 0) || (size % QSPI_SECTOR_SIZE) != 0) {
   1f2f4:	2d00      	cmp	r5, #0
   1f2f6:	d07f      	beq.n	1f3f8 <qspi_nor_erase+0x138>
   1f2f8:	f3c5 030b 	ubfx	r3, r5, #0, #12
   1f2fc:	4313      	orrs	r3, r2
   1f2fe:	d17b      	bne.n	1f3f8 <qspi_nor_erase+0x138>
	rv = qspi_device_init(dev);
   1f300:	f7ff ffb6 	bl	1f270 <qspi_device_init>
	if (rv != 0) {
   1f304:	4604      	mov	r4, r0
   1f306:	bb58      	cbnz	r0, 1f360 <qspi_nor_erase+0xa0>
	qspi_trans_lock(dev);
   1f308:	6930      	ldr	r0, [r6, #16]
   1f30a:	f00c f93c 	bl	2b586 <qspi_trans_lock.isra.0>
	rv = qspi_nor_write_protection_set(dev, false);
   1f30e:	4621      	mov	r1, r4
   1f310:	4630      	mov	r0, r6
   1f312:	f00c f941 	bl	2b598 <qspi_nor_write_protection_set>
	if (rv != 0) {
   1f316:	4604      	mov	r4, r0
   1f318:	b9f8      	cbnz	r0, 1f35a <qspi_nor_erase+0x9a>
	qspi_lock(dev);
   1f31a:	6930      	ldr	r0, [r6, #16]
   1f31c:	f00c f92c 	bl	2b578 <qspi_lock.isra.0>
		if (size == params->size) {
   1f320:	f8da 3018 	ldr.w	r3, [sl, #24]
   1f324:	42ab      	cmp	r3, r5
   1f326:	d11f      	bne.n	1f368 <qspi_nor_erase+0xa8>
			res = nrfx_qspi_chip_erase();
   1f328:	f00c fc3a 	bl	2bba0 <nrfx_qspi_chip_erase>
   1f32c:	46ab      	mov	fp, r5
   1f32e:	4680      	mov	r8, r0
		qspi_wait_for_completion(dev, res);
   1f330:	6930      	ldr	r0, [r6, #16]
   1f332:	4641      	mov	r1, r8
   1f334:	f7ff fefa 	bl	1f12c <qspi_wait_for_completion.isra.0>
		if (res == NRFX_SUCCESS) {
   1f338:	4b31      	ldr	r3, [pc, #196]	; (1f400 <qspi_nor_erase+0x140>)
   1f33a:	4598      	cmp	r8, r3
   1f33c:	d146      	bne.n	1f3cc <qspi_nor_erase+0x10c>
	while (size > 0) {
   1f33e:	ebb5 050b 	subs.w	r5, r5, fp
			addr += adj;
   1f342:	44d9      	add	r9, fp
	while (size > 0) {
   1f344:	d1ec      	bne.n	1f320 <qspi_nor_erase+0x60>
	qspi_unlock(dev);
   1f346:	6930      	ldr	r0, [r6, #16]
   1f348:	f00c f923 	bl	2b592 <qspi_unlock.isra.0>
	int rv2 = qspi_nor_write_protection_set(dev, true);
   1f34c:	2101      	movs	r1, #1
   1f34e:	4630      	mov	r0, r6
   1f350:	f00c f922 	bl	2b598 <qspi_nor_write_protection_set>
   1f354:	2c00      	cmp	r4, #0
   1f356:	bf08      	it	eq
   1f358:	4604      	moveq	r4, r0
	k_sem_give(&dev_data->trans);
   1f35a:	6930      	ldr	r0, [r6, #16]
   1f35c:	f003 ffda 	bl	23314 <z_impl_k_sem_give>
	qspi_device_uninit(dev);
   1f360:	4630      	mov	r0, r6
   1f362:	f7ff ff59 	bl	1f218 <qspi_device_uninit>
	return rv;
   1f366:	e7bf      	b.n	1f2e8 <qspi_nor_erase+0x28>
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   1f368:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   1f36c:	d30a      	bcc.n	1f384 <qspi_nor_erase+0xc4>
			   QSPI_IS_BLOCK_ALIGNED(addr)) {
   1f36e:	fa1f f389 	uxth.w	r3, r9
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   1f372:	b953      	cbnz	r3, 1f38a <qspi_nor_erase+0xca>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
   1f374:	4649      	mov	r1, r9
   1f376:	2001      	movs	r0, #1
   1f378:	f003 fb4c 	bl	22a14 <nrfx_qspi_erase>
			adj = QSPI_BLOCK_SIZE;
   1f37c:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
   1f380:	4680      	mov	r8, r0
			adj = QSPI_BLOCK_SIZE;
   1f382:	e7d5      	b.n	1f330 <qspi_nor_erase+0x70>
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   1f384:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1f388:	d309      	bcc.n	1f39e <qspi_nor_erase+0xde>
			   QSPI_IS_SECTOR_ALIGNED(addr)) {
   1f38a:	f3c9 000b 	ubfx	r0, r9, #0, #12
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   1f38e:	b930      	cbnz	r0, 1f39e <qspi_nor_erase+0xde>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
   1f390:	4649      	mov	r1, r9
   1f392:	f003 fb3f 	bl	22a14 <nrfx_qspi_erase>
			adj = QSPI_SECTOR_SIZE;
   1f396:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
   1f39a:	4680      	mov	r8, r0
			adj = QSPI_SECTOR_SIZE;
   1f39c:	e7c8      	b.n	1f330 <qspi_nor_erase+0x70>
			LOG_ERR("unsupported at 0x%lx size %zu", (long)addr, size);
   1f39e:	466c      	mov	r4, sp
   1f3a0:	b088      	sub	sp, #32
   1f3a2:	466a      	mov	r2, sp
   1f3a4:	4b17      	ldr	r3, [pc, #92]	; (1f404 <qspi_nor_erase+0x144>)
   1f3a6:	61d5      	str	r5, [r2, #28]
   1f3a8:	e9c2 3905 	strd	r3, r9, [r2, #20]
   1f3ac:	2304      	movs	r3, #4
   1f3ae:	f842 3f10 	str.w	r3, [r2, #16]!
   1f3b2:	4815      	ldr	r0, [pc, #84]	; (1f408 <qspi_nor_erase+0x148>)
			res = NRFX_ERROR_INVALID_PARAM;
   1f3b4:	f8df 8054 	ldr.w	r8, [pc, #84]	; 1f40c <qspi_nor_erase+0x14c>
   1f3b8:	2300      	movs	r3, #0
   1f3ba:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1f3be:	f7f4 fc01 	bl	13bc4 <z_impl_z_log_msg_static_create>
		qspi_wait_for_completion(dev, res);
   1f3c2:	4912      	ldr	r1, [pc, #72]	; (1f40c <qspi_nor_erase+0x14c>)
   1f3c4:	6930      	ldr	r0, [r6, #16]
   1f3c6:	46a5      	mov	sp, r4
   1f3c8:	f7ff feb0 	bl	1f12c <qspi_wait_for_completion.isra.0>
			LOG_ERR("erase error at 0x%lx size %zu", (long)addr, size);
   1f3cc:	466c      	mov	r4, sp
   1f3ce:	b088      	sub	sp, #32
   1f3d0:	466a      	mov	r2, sp
   1f3d2:	4b0f      	ldr	r3, [pc, #60]	; (1f410 <qspi_nor_erase+0x150>)
   1f3d4:	61d5      	str	r5, [r2, #28]
   1f3d6:	e9c2 3905 	strd	r3, r9, [r2, #20]
   1f3da:	2304      	movs	r3, #4
   1f3dc:	f842 3f10 	str.w	r3, [r2, #16]!
   1f3e0:	4809      	ldr	r0, [pc, #36]	; (1f408 <qspi_nor_erase+0x148>)
   1f3e2:	2300      	movs	r3, #0
   1f3e4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1f3e8:	f7f4 fbec 	bl	13bc4 <z_impl_z_log_msg_static_create>
			rv = qspi_get_zephyr_ret_code(res);
   1f3ec:	4640      	mov	r0, r8
   1f3ee:	46a5      	mov	sp, r4
   1f3f0:	f7ff fe82 	bl	1f0f8 <qspi_get_zephyr_ret_code>
   1f3f4:	4604      	mov	r4, r0
			break;
   1f3f6:	e7a6      	b.n	1f346 <qspi_nor_erase+0x86>
		return -EINVAL;
   1f3f8:	f06f 0415 	mvn.w	r4, #21
   1f3fc:	e774      	b.n	1f2e8 <qspi_nor_erase+0x28>
   1f3fe:	bf00      	nop
   1f400:	0bad0000 	.word	0x0bad0000
   1f404:	000300d6 	.word	0x000300d6
   1f408:	0002cbf4 	.word	0x0002cbf4
   1f40c:	0bad0004 	.word	0x0bad0004
   1f410:	000300f4 	.word	0x000300f4

0001f414 <qspi_nor_init>:
{
   1f414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f418:	b086      	sub	sp, #24
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   1f41a:	6843      	ldr	r3, [r0, #4]
   1f41c:	6a1e      	ldr	r6, [r3, #32]
{
   1f41e:	af00      	add	r7, sp, #0
   1f420:	4605      	mov	r5, r0
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1f422:	f107 020c 	add.w	r2, r7, #12
   1f426:	2100      	movs	r1, #0
   1f428:	4630      	mov	r0, r6
   1f42a:	f00c f9c3 	bl	2b7b4 <pinctrl_lookup_state>
	if (ret < 0) {
   1f42e:	1e04      	subs	r4, r0, #0
   1f430:	db4a      	blt.n	1f4c8 <qspi_nor_init+0xb4>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   1f432:	68fb      	ldr	r3, [r7, #12]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1f434:	6832      	ldr	r2, [r6, #0]
   1f436:	7919      	ldrb	r1, [r3, #4]
   1f438:	6818      	ldr	r0, [r3, #0]
   1f43a:	f000 fd4f 	bl	1fedc <pinctrl_configure_pins>
	if (ret < 0) {
   1f43e:	1e04      	subs	r4, r0, #0
   1f440:	db42      	blt.n	1f4c8 <qspi_nor_init+0xb4>
	IRQ_CONNECT(DT_IRQN(QSPI_NODE), DT_IRQ(QSPI_NODE, priority),
   1f442:	2200      	movs	r2, #0
   1f444:	2101      	movs	r1, #1
   1f446:	2029      	movs	r0, #41	; 0x29
   1f448:	f7f5 fce2 	bl	14e10 <z_arm_irq_priority_set>
	const struct qspi_nor_config *dev_config = dev->config;
   1f44c:	686e      	ldr	r6, [r5, #4]
	nrfx_err_t res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   1f44e:	692a      	ldr	r2, [r5, #16]
   1f450:	4963      	ldr	r1, [pc, #396]	; (1f5e0 <qspi_nor_init+0x1cc>)
   1f452:	4630      	mov	r0, r6
   1f454:	f003 f92c 	bl	226b0 <nrfx_qspi_init>
	int ret = qspi_get_zephyr_ret_code(res);
   1f458:	f7ff fe4e 	bl	1f0f8 <qspi_get_zephyr_ret_code>
	if (ret < 0) {
   1f45c:	1e04      	subs	r4, r0, #0
   1f45e:	db33      	blt.n	1f4c8 <qspi_nor_init+0xb4>
#endif /* CONFIG_PM_DEVICE */

static int exit_dpd(const struct device *const dev)
{
	if (IS_ENABLED(DT_INST_PROP(0, has_dpd))) {
		struct qspi_cmd cmd = {
   1f460:	2200      	movs	r2, #0
   1f462:	23ab      	movs	r3, #171	; 0xab
   1f464:	e9c7 2203 	strd	r2, r2, [r7, #12]
   1f468:	617a      	str	r2, [r7, #20]
   1f46a:	733b      	strb	r3, [r7, #12]
			.op_code = SPI_NOR_CMD_RDPD,
		};
		uint32_t t_exit_dpd = DT_INST_PROP_OR(0, t_exit_dpd, 0);
		int ret;

		ret = qspi_send_cmd(dev, &cmd, false);
   1f46c:	f107 010c 	add.w	r1, r7, #12
   1f470:	4628      	mov	r0, r5
   1f472:	f7ff fe83 	bl	1f17c <qspi_send_cmd>
		if (ret < 0) {
   1f476:	1e04      	subs	r4, r0, #0
   1f478:	db26      	blt.n	1f4c8 <qspi_nor_init+0xb4>
	z_impl_k_busy_wait(usec_to_wait);
   1f47a:	2023      	movs	r0, #35	; 0x23
   1f47c:	f00c ff99 	bl	2c3b2 <z_impl_k_busy_wait>
		bool qe_value = (prot_if->writeoc == NRF_QSPI_WRITEOC_PP4IO) ||
   1f480:	7af3      	ldrb	r3, [r6, #11]
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   1f482:	3b02      	subs	r3, #2
   1f484:	2b01      	cmp	r3, #1
   1f486:	d924      	bls.n	1f4d2 <qspi_nor_init+0xbe>
				(prot_if->writeoc == NRF_QSPI_WRITEOC_PP4O)  ||
   1f488:	f896 800a 	ldrb.w	r8, [r6, #10]
   1f48c:	f1a8 0803 	sub.w	r8, r8, #3
   1f490:	f1b8 0f01 	cmp.w	r8, #1
   1f494:	bf8c      	ite	hi
   1f496:	f04f 0800 	movhi.w	r8, #0
   1f49a:	f04f 0801 	movls.w	r8, #1
		ret = qspi_rdsr(dev, sr_num);
   1f49e:	4628      	mov	r0, r5
   1f4a0:	f00c f88f 	bl	2b5c2 <qspi_rdsr.constprop.0>
		if (ret < 0) {
   1f4a4:	1e04      	subs	r4, r0, #0
   1f4a6:	da17      	bge.n	1f4d8 <qspi_nor_init+0xc4>
			LOG_ERR("RDSR failed: %d", ret);
   1f4a8:	466d      	mov	r5, sp
   1f4aa:	b088      	sub	sp, #32
   1f4ac:	466a      	mov	r2, sp
   1f4ae:	4b4d      	ldr	r3, [pc, #308]	; (1f5e4 <qspi_nor_init+0x1d0>)
   1f4b0:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1f4b4:	2303      	movs	r3, #3
   1f4b6:	f842 3f10 	str.w	r3, [r2, #16]!
   1f4ba:	2300      	movs	r3, #0
   1f4bc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f4c0:	4849      	ldr	r0, [pc, #292]	; (1f5e8 <qspi_nor_init+0x1d4>)
   1f4c2:	f7f4 fb7f 	bl	13bc4 <z_impl_z_log_msg_static_create>
   1f4c6:	46ad      	mov	sp, r5
}
   1f4c8:	4620      	mov	r0, r4
   1f4ca:	3718      	adds	r7, #24
   1f4cc:	46bd      	mov	sp, r7
   1f4ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   1f4d2:	f04f 0801 	mov.w	r8, #1
   1f4d6:	e7e2      	b.n	1f49e <qspi_nor_init+0x8a>
		uint8_t sr = (uint8_t)ret;
   1f4d8:	b2e2      	uxtb	r2, r4
		if (qe_state != qe_value) {
   1f4da:	f3c4 1480 	ubfx	r4, r4, #6, #1
   1f4de:	45a0      	cmp	r8, r4
   1f4e0:	f107 0604 	add.w	r6, r7, #4
   1f4e4:	d031      	beq.n	1f54a <qspi_nor_init+0x136>
	uint8_t sr_array[2] = {0};
   1f4e6:	2300      	movs	r3, #0
			sr ^= qe_mask;
   1f4e8:	f082 0240 	eor.w	r2, r2, #64	; 0x40
	uint8_t sr_array[2] = {0};
   1f4ec:	803b      	strh	r3, [r7, #0]
		sr_array[0] = sr_val;
   1f4ee:	703a      	strb	r2, [r7, #0]
	const struct qspi_buf sr_buf = {
   1f4f0:	2201      	movs	r2, #1
	struct qspi_cmd cmd = {
   1f4f2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	const struct qspi_buf sr_buf = {
   1f4f6:	607f      	str	r7, [r7, #4]
	struct qspi_cmd cmd = {
   1f4f8:	617b      	str	r3, [r7, #20]
   1f4fa:	733a      	strb	r2, [r7, #12]
   1f4fc:	613e      	str	r6, [r7, #16]
	ret = qspi_send_cmd(dev, &cmd, true);
   1f4fe:	f107 010c 	add.w	r1, r7, #12
   1f502:	4628      	mov	r0, r5
   1f504:	f7ff fe3a 	bl	1f17c <qspi_send_cmd>
	if (ret == 0) {
   1f508:	1e04      	subs	r4, r0, #0
   1f50a:	d017      	beq.n	1f53c <qspi_nor_init+0x128>
		if (ret < 0) {
   1f50c:	dadc      	bge.n	1f4c8 <qspi_nor_init+0xb4>
			LOG_ERR("QE %s failed: %d", qe_value ? "set" : "clear",
   1f50e:	4a37      	ldr	r2, [pc, #220]	; (1f5ec <qspi_nor_init+0x1d8>)
   1f510:	4b37      	ldr	r3, [pc, #220]	; (1f5f0 <qspi_nor_init+0x1dc>)
   1f512:	466d      	mov	r5, sp
   1f514:	b08a      	sub	sp, #40	; 0x28
   1f516:	f1b8 0f00 	cmp.w	r8, #0
   1f51a:	bf18      	it	ne
   1f51c:	4613      	movne	r3, r2
   1f51e:	466a      	mov	r2, sp
   1f520:	4934      	ldr	r1, [pc, #208]	; (1f5f4 <qspi_nor_init+0x1e0>)
   1f522:	61d4      	str	r4, [r2, #28]
   1f524:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1f528:	f44f 7300 	mov.w	r3, #512	; 0x200
   1f52c:	8413      	strh	r3, [r2, #32]
   1f52e:	4b32      	ldr	r3, [pc, #200]	; (1f5f8 <qspi_nor_init+0x1e4>)
   1f530:	f842 3f10 	str.w	r3, [r2, #16]!
   1f534:	2300      	movs	r3, #0
   1f536:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1f53a:	e7c1      	b.n	1f4c0 <qspi_nor_init+0xac>
		ret = qspi_rdsr(dev, 1);
   1f53c:	4628      	mov	r0, r5
   1f53e:	f00c f840 	bl	2b5c2 <qspi_rdsr.constprop.0>
		 && ((ret & SPI_NOR_WIP_BIT) != 0U));
   1f542:	1e04      	subs	r4, r0, #0
   1f544:	dbe3      	blt.n	1f50e <qspi_nor_init+0xfa>
   1f546:	07e3      	lsls	r3, r4, #31
   1f548:	d4f8      	bmi.n	1f53c <qspi_nor_init+0x128>
	qspi_device_uninit(dev);
   1f54a:	4628      	mov	r0, r5
   1f54c:	f7ff fe64 	bl	1f218 <qspi_device_uninit>
	const struct qspi_cmd cmd = {
   1f550:	2403      	movs	r4, #3
   1f552:	2300      	movs	r3, #0
   1f554:	e9c7 4302 	strd	r4, r3, [r7, #8]
   1f558:	613b      	str	r3, [r7, #16]
   1f55a:	239f      	movs	r3, #159	; 0x9f
	const struct qspi_buf rx_buf = {
   1f55c:	607f      	str	r7, [r7, #4]
	const struct qspi_cmd cmd = {
   1f55e:	733b      	strb	r3, [r7, #12]
   1f560:	617e      	str	r6, [r7, #20]
	int ret = qspi_device_init(dev);
   1f562:	4628      	mov	r0, r5
   1f564:	f7ff fe84 	bl	1f270 <qspi_device_init>
	if (ret == 0) {
   1f568:	4602      	mov	r2, r0
   1f56a:	b128      	cbz	r0, 1f578 <qspi_nor_init+0x164>
	qspi_device_uninit(dev);
   1f56c:	4628      	mov	r0, r5
   1f56e:	f7ff fe53 	bl	1f218 <qspi_device_uninit>
		return -ENODEV;
   1f572:	f06f 0412 	mvn.w	r4, #18
   1f576:	e7a7      	b.n	1f4c8 <qspi_nor_init+0xb4>
		ret = qspi_send_cmd(dev, &cmd, false);
   1f578:	f107 010c 	add.w	r1, r7, #12
   1f57c:	4628      	mov	r0, r5
   1f57e:	f7ff fdfd 	bl	1f17c <qspi_send_cmd>
   1f582:	4606      	mov	r6, r0
	qspi_device_uninit(dev);
   1f584:	4628      	mov	r0, r5
   1f586:	f7ff fe47 	bl	1f218 <qspi_device_uninit>
	if (ret != 0) {
   1f58a:	2e00      	cmp	r6, #0
   1f58c:	d1f1      	bne.n	1f572 <qspi_nor_init+0x15e>
	const struct qspi_nor_config *qnc = dev->config;
   1f58e:	686d      	ldr	r5, [r5, #4]
	if (memcmp(qnc->id, id, SPI_NOR_MAX_ID_LEN) != 0) {
   1f590:	4622      	mov	r2, r4
   1f592:	4639      	mov	r1, r7
   1f594:	f105 001c 	add.w	r0, r5, #28
   1f598:	f009 fc9f 	bl	28eda <memcmp>
   1f59c:	4604      	mov	r4, r0
   1f59e:	2800      	cmp	r0, #0
   1f5a0:	d092      	beq.n	1f4c8 <qspi_nor_init+0xb4>
		LOG_ERR("JEDEC id [%02x %02x %02x] expect [%02x %02x %02x]",
   1f5a2:	466c      	mov	r4, sp
   1f5a4:	b08c      	sub	sp, #48	; 0x30
   1f5a6:	f897 8000 	ldrb.w	r8, [r7]
   1f5aa:	f897 e001 	ldrb.w	lr, [r7, #1]
   1f5ae:	f897 c002 	ldrb.w	ip, [r7, #2]
   1f5b2:	7f28      	ldrb	r0, [r5, #28]
   1f5b4:	7f69      	ldrb	r1, [r5, #29]
   1f5b6:	7fab      	ldrb	r3, [r5, #30]
   1f5b8:	466a      	mov	r2, sp
   1f5ba:	4d10      	ldr	r5, [pc, #64]	; (1f5fc <qspi_nor_init+0x1e8>)
   1f5bc:	62d3      	str	r3, [r2, #44]	; 0x2c
   1f5be:	2308      	movs	r3, #8
   1f5c0:	e9c2 5805 	strd	r5, r8, [r2, #20]
   1f5c4:	e9c2 ec07 	strd	lr, ip, [r2, #28]
   1f5c8:	e9c2 0109 	strd	r0, r1, [r2, #36]	; 0x24
   1f5cc:	f842 3f10 	str.w	r3, [r2, #16]!
   1f5d0:	4805      	ldr	r0, [pc, #20]	; (1f5e8 <qspi_nor_init+0x1d4>)
   1f5d2:	4633      	mov	r3, r6
   1f5d4:	f244 0140 	movw	r1, #16448	; 0x4040
   1f5d8:	f7f4 faf4 	bl	13bc4 <z_impl_z_log_msg_static_create>
   1f5dc:	46a5      	mov	sp, r4
		return -ENODEV;
   1f5de:	e7c8      	b.n	1f572 <qspi_nor_init+0x15e>
   1f5e0:	0002b56d 	.word	0x0002b56d
   1f5e4:	00030118 	.word	0x00030118
   1f5e8:	0002cbf4 	.word	0x0002cbf4
   1f5ec:	0002f287 	.word	0x0002f287
   1f5f0:	00030112 	.word	0x00030112
   1f5f4:	00030128 	.word	0x00030128
   1f5f8:	01000004 	.word	0x01000004
   1f5fc:	00030139 	.word	0x00030139

0001f600 <qspi_nor_write>:
{
   1f600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f604:	b083      	sub	sp, #12
   1f606:	4605      	mov	r5, r0
   1f608:	af00      	add	r7, sp, #0
   1f60a:	4688      	mov	r8, r1
   1f60c:	461e      	mov	r6, r3
	if (!src) {
   1f60e:	4691      	mov	r9, r2
   1f610:	b30a      	cbz	r2, 1f656 <qspi_nor_write+0x56>
	if ((size == 0)
   1f612:	b303      	cbz	r3, 1f656 <qspi_nor_write+0x56>
	    || ((size > 4) && ((size % 4U) != 0))) {
   1f614:	2b04      	cmp	r3, #4
   1f616:	d901      	bls.n	1f61c <qspi_nor_write+0x1c>
   1f618:	07b3      	lsls	r3, r6, #30
   1f61a:	d11c      	bne.n	1f656 <qspi_nor_write+0x56>
	if ((addr % 4U) != 0) {
   1f61c:	f018 0f03 	tst.w	r8, #3
   1f620:	d119      	bne.n	1f656 <qspi_nor_write+0x56>
	if (addr < 0 ||
   1f622:	f1b8 0f00 	cmp.w	r8, #0
	const struct qspi_nor_config *params = dev->config;
   1f626:	686a      	ldr	r2, [r5, #4]
	if (addr < 0 ||
   1f628:	db04      	blt.n	1f634 <qspi_nor_write+0x34>
   1f62a:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
   1f62c:	eb08 0306 	add.w	r3, r8, r6
	if (addr < 0 ||
   1f630:	4293      	cmp	r3, r2
   1f632:	d917      	bls.n	1f664 <qspi_nor_write+0x64>
		LOG_ERR("write error: address or size "
   1f634:	466c      	mov	r4, sp
   1f636:	b088      	sub	sp, #32
   1f638:	466a      	mov	r2, sp
   1f63a:	4b41      	ldr	r3, [pc, #260]	; (1f740 <qspi_nor_write+0x140>)
   1f63c:	61d6      	str	r6, [r2, #28]
   1f63e:	e9c2 3805 	strd	r3, r8, [r2, #20]
   1f642:	2304      	movs	r3, #4
   1f644:	f842 3f10 	str.w	r3, [r2, #16]!
   1f648:	483e      	ldr	r0, [pc, #248]	; (1f744 <qspi_nor_write+0x144>)
   1f64a:	2300      	movs	r3, #0
   1f64c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1f650:	f7f4 fab8 	bl	13bc4 <z_impl_z_log_msg_static_create>
   1f654:	46a5      	mov	sp, r4
		return -EINVAL;
   1f656:	f06f 0415 	mvn.w	r4, #21
}
   1f65a:	4620      	mov	r0, r4
   1f65c:	370c      	adds	r7, #12
   1f65e:	46bd      	mov	sp, r7
   1f660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int rc = qspi_device_init(dev);
   1f664:	4628      	mov	r0, r5
   1f666:	f7ff fe03 	bl	1f270 <qspi_device_init>
	if (rc != 0) {
   1f66a:	4604      	mov	r4, r0
   1f66c:	2800      	cmp	r0, #0
   1f66e:	d15f      	bne.n	1f730 <qspi_nor_write+0x130>
	qspi_trans_lock(dev);
   1f670:	6928      	ldr	r0, [r5, #16]
   1f672:	f00b ff88 	bl	2b586 <qspi_trans_lock.isra.0>
	res = qspi_nor_write_protection_set(dev, false);
   1f676:	4621      	mov	r1, r4
   1f678:	4628      	mov	r0, r5
   1f67a:	f00b ff8d 	bl	2b598 <qspi_nor_write_protection_set>
   1f67e:	4604      	mov	r4, r0
	qspi_lock(dev);
   1f680:	6928      	ldr	r0, [r5, #16]
   1f682:	f00b ff79 	bl	2b578 <qspi_lock.isra.0>
	if (!res) {
   1f686:	2c00      	cmp	r4, #0
   1f688:	d140      	bne.n	1f70c <qspi_nor_write+0x10c>
		if (size < 4U) {
   1f68a:	2e03      	cmp	r6, #3
   1f68c:	d81c      	bhi.n	1f6c8 <qspi_nor_write+0xc8>
	res = nrfx_qspi_read(buf, sizeof(buf), addr);
   1f68e:	2104      	movs	r1, #4
   1f690:	4642      	mov	r2, r8
   1f692:	1878      	adds	r0, r7, r1
   1f694:	f00c fa81 	bl	2bb9a <nrfx_qspi_read>
   1f698:	4604      	mov	r4, r0
	qspi_wait_for_completion(dev, res);
   1f69a:	4601      	mov	r1, r0
   1f69c:	6928      	ldr	r0, [r5, #16]
   1f69e:	f7ff fd45 	bl	1f12c <qspi_wait_for_completion.isra.0>
	if (res == NRFX_SUCCESS) {
   1f6a2:	4b29      	ldr	r3, [pc, #164]	; (1f748 <qspi_nor_write+0x148>)
   1f6a4:	429c      	cmp	r4, r3
   1f6a6:	d131      	bne.n	1f70c <qspi_nor_write+0x10c>
		memcpy(buf, sptr, slen);
   1f6a8:	4632      	mov	r2, r6
   1f6aa:	4649      	mov	r1, r9
   1f6ac:	1d38      	adds	r0, r7, #4
   1f6ae:	f009 fc3b 	bl	28f28 <memcpy>
		res = nrfx_qspi_write(buf, sizeof(buf), addr);
   1f6b2:	2104      	movs	r1, #4
   1f6b4:	4642      	mov	r2, r8
   1f6b6:	1878      	adds	r0, r7, r1
			res = nrfx_qspi_write(src, size, addr);
   1f6b8:	f00c fa6c 	bl	2bb94 <nrfx_qspi_write>
   1f6bc:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
   1f6be:	4601      	mov	r1, r0
   1f6c0:	6928      	ldr	r0, [r5, #16]
   1f6c2:	f7ff fd33 	bl	1f12c <qspi_wait_for_completion.isra.0>
   1f6c6:	e021      	b.n	1f70c <qspi_nor_write+0x10c>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1f6c8:	f009 4360 	and.w	r3, r9, #3758096384	; 0xe0000000
		} else if (!nrfx_is_in_ram(src)) {
   1f6cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1f6d0:	d032      	beq.n	1f738 <qspi_nor_write+0x138>
			if (res == NRFX_SUCCESS) {
   1f6d2:	f8df b074 	ldr.w	fp, [pc, #116]	; 1f748 <qspi_nor_write+0x148>
			size_t len = MIN(slen, sizeof(buf));
   1f6d6:	2e04      	cmp	r6, #4
   1f6d8:	46b2      	mov	sl, r6
   1f6da:	bf28      	it	cs
   1f6dc:	f04f 0a04 	movcs.w	sl, #4
			memcpy(buf, sp, len);
   1f6e0:	4652      	mov	r2, sl
   1f6e2:	4649      	mov	r1, r9
   1f6e4:	1d38      	adds	r0, r7, #4
   1f6e6:	f009 fc1f 	bl	28f28 <memcpy>
			res = nrfx_qspi_write(buf, sizeof(buf), addr);
   1f6ea:	2104      	movs	r1, #4
   1f6ec:	4642      	mov	r2, r8
   1f6ee:	1878      	adds	r0, r7, r1
   1f6f0:	f00c fa50 	bl	2bb94 <nrfx_qspi_write>
   1f6f4:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
   1f6f6:	4601      	mov	r1, r0
   1f6f8:	6928      	ldr	r0, [r5, #16]
   1f6fa:	f7ff fd17 	bl	1f12c <qspi_wait_for_completion.isra.0>
			if (res == NRFX_SUCCESS) {
   1f6fe:	455c      	cmp	r4, fp
   1f700:	d104      	bne.n	1f70c <qspi_nor_write+0x10c>
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
   1f702:	ebb6 060a 	subs.w	r6, r6, sl
				sp += len;
   1f706:	44d1      	add	r9, sl
				addr += len;
   1f708:	44d0      	add	r8, sl
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
   1f70a:	d1e4      	bne.n	1f6d6 <qspi_nor_write+0xd6>
	qspi_unlock(dev);
   1f70c:	6928      	ldr	r0, [r5, #16]
   1f70e:	f00b ff40 	bl	2b592 <qspi_unlock.isra.0>
	int res2 = qspi_nor_write_protection_set(dev, true);
   1f712:	2101      	movs	r1, #1
   1f714:	4628      	mov	r0, r5
   1f716:	f00b ff3f 	bl	2b598 <qspi_nor_write_protection_set>
   1f71a:	4606      	mov	r6, r0
	k_sem_give(&dev_data->trans);
   1f71c:	6928      	ldr	r0, [r5, #16]
	z_impl_k_sem_give(sem);
   1f71e:	f003 fdf9 	bl	23314 <z_impl_k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
   1f722:	2c00      	cmp	r4, #0
   1f724:	bf14      	ite	ne
   1f726:	4620      	movne	r0, r4
   1f728:	4630      	moveq	r0, r6
   1f72a:	f7ff fce5 	bl	1f0f8 <qspi_get_zephyr_ret_code>
   1f72e:	4604      	mov	r4, r0
	qspi_device_uninit(dev);
   1f730:	4628      	mov	r0, r5
   1f732:	f7ff fd71 	bl	1f218 <qspi_device_uninit>
	return rc;
   1f736:	e790      	b.n	1f65a <qspi_nor_write+0x5a>
			res = nrfx_qspi_write(src, size, addr);
   1f738:	4642      	mov	r2, r8
   1f73a:	4631      	mov	r1, r6
   1f73c:	4648      	mov	r0, r9
   1f73e:	e7bb      	b.n	1f6b8 <qspi_nor_write+0xb8>
   1f740:	0003016b 	.word	0x0003016b
   1f744:	0002cbf4 	.word	0x0002cbf4
   1f748:	0bad0000 	.word	0x0bad0000

0001f74c <qspi_nor_read>:
{
   1f74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f750:	b085      	sub	sp, #20
   1f752:	4681      	mov	r9, r0
   1f754:	af00      	add	r7, sp, #0
   1f756:	460e      	mov	r6, r1
   1f758:	461c      	mov	r4, r3
	if (!dest) {
   1f75a:	4690      	mov	r8, r2
   1f75c:	b1d2      	cbz	r2, 1f794 <qspi_nor_read+0x48>
	if (!size) {
   1f75e:	2b00      	cmp	r3, #0
   1f760:	f000 80aa 	beq.w	1f8b8 <qspi_nor_read+0x16c>
	if (addr < 0 ||
   1f764:	2900      	cmp	r1, #0
	const struct qspi_nor_config *params = dev->config;
   1f766:	6842      	ldr	r2, [r0, #4]
	if (addr < 0 ||
   1f768:	db03      	blt.n	1f772 <qspi_nor_read+0x26>
   1f76a:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
   1f76c:	18cb      	adds	r3, r1, r3
	if (addr < 0 ||
   1f76e:	4293      	cmp	r3, r2
   1f770:	d917      	bls.n	1f7a2 <qspi_nor_read+0x56>
		LOG_ERR("read error: address or size "
   1f772:	466d      	mov	r5, sp
   1f774:	b088      	sub	sp, #32
   1f776:	466a      	mov	r2, sp
   1f778:	4b50      	ldr	r3, [pc, #320]	; (1f8bc <qspi_nor_read+0x170>)
   1f77a:	61d4      	str	r4, [r2, #28]
   1f77c:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1f780:	2304      	movs	r3, #4
   1f782:	f842 3f10 	str.w	r3, [r2, #16]!
   1f786:	484e      	ldr	r0, [pc, #312]	; (1f8c0 <qspi_nor_read+0x174>)
   1f788:	2300      	movs	r3, #0
   1f78a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1f78e:	f7f4 fa19 	bl	13bc4 <z_impl_z_log_msg_static_create>
   1f792:	46ad      	mov	sp, r5
		return -EINVAL;
   1f794:	f06f 0515 	mvn.w	r5, #21
}
   1f798:	4628      	mov	r0, r5
   1f79a:	3714      	adds	r7, #20
   1f79c:	46bd      	mov	sp, r7
   1f79e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int rc = qspi_device_init(dev);
   1f7a2:	f7ff fd65 	bl	1f270 <qspi_device_init>
	if (rc != 0) {
   1f7a6:	4605      	mov	r5, r0
   1f7a8:	2800      	cmp	r0, #0
   1f7aa:	d17f      	bne.n	1f8ac <qspi_nor_read+0x160>
	qspi_lock(dev);
   1f7ac:	4275      	negs	r5, r6
   1f7ae:	f005 0503 	and.w	r5, r5, #3
   1f7b2:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1f7b6:	f00b fedf 	bl	2b578 <qspi_lock.isra.0>
	if (flash_prefix > size) {
   1f7ba:	42a5      	cmp	r5, r4
   1f7bc:	bf28      	it	cs
   1f7be:	4625      	movcs	r5, r4
	off_t dest_prefix = (WORD_SIZE - (off_t)dptr % WORD_SIZE) % WORD_SIZE;
   1f7c0:	f1d8 0200 	rsbs	r2, r8, #0
   1f7c4:	f002 0203 	and.w	r2, r2, #3
   1f7c8:	f008 0303 	and.w	r3, r8, #3
   1f7cc:	bf58      	it	pl
   1f7ce:	4253      	negpl	r3, r2
   1f7d0:	425b      	negs	r3, r3
   1f7d2:	f003 0303 	and.w	r3, r3, #3
   1f7d6:	42a3      	cmp	r3, r4
   1f7d8:	bf28      	it	cs
   1f7da:	4623      	movcs	r3, r4
	off_t flash_suffix = (size - flash_prefix) % WORD_SIZE;
   1f7dc:	1b62      	subs	r2, r4, r5
			    (size - dest_prefix) % WORD_SIZE;
   1f7de:	1ae4      	subs	r4, r4, r3
   1f7e0:	f024 0403 	bic.w	r4, r4, #3
	off_t flash_middle = size - flash_prefix - flash_suffix;
   1f7e4:	f022 0a03 	bic.w	sl, r2, #3
	if (flash_middle > dest_middle) {
   1f7e8:	45a2      	cmp	sl, r4
		flash_suffix = size - flash_prefix - flash_middle;
   1f7ea:	bfc8      	it	gt
   1f7ec:	46a2      	movgt	sl, r4
   1f7ee:	f002 0b03 	and.w	fp, r2, #3
   1f7f2:	bfc8      	it	gt
   1f7f4:	eba2 0b04 	subgt.w	fp, r2, r4
	if (flash_middle != 0) {
   1f7f8:	f1ba 0f00 	cmp.w	sl, #0
   1f7fc:	d01a      	beq.n	1f834 <qspi_nor_read+0xe8>
		res = nrfx_qspi_read(dptr + dest_prefix, flash_middle,
   1f7fe:	eb08 0203 	add.w	r2, r8, r3
   1f802:	e9c7 3200 	strd	r3, r2, [r7]
   1f806:	4651      	mov	r1, sl
   1f808:	1972      	adds	r2, r6, r5
   1f80a:	6878      	ldr	r0, [r7, #4]
   1f80c:	f00c f9c5 	bl	2bb9a <nrfx_qspi_read>
   1f810:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   1f812:	4601      	mov	r1, r0
   1f814:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1f818:	f7ff fc88 	bl	1f12c <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   1f81c:	4a29      	ldr	r2, [pc, #164]	; (1f8c4 <qspi_nor_read+0x178>)
   1f81e:	4294      	cmp	r4, r2
   1f820:	d13c      	bne.n	1f89c <qspi_nor_read+0x150>
		if (flash_prefix != dest_prefix) {
   1f822:	683b      	ldr	r3, [r7, #0]
   1f824:	429d      	cmp	r5, r3
   1f826:	d005      	beq.n	1f834 <qspi_nor_read+0xe8>
			memmove(dptr + flash_prefix, dptr + dest_prefix, flash_middle);
   1f828:	6879      	ldr	r1, [r7, #4]
   1f82a:	4652      	mov	r2, sl
   1f82c:	eb08 0005 	add.w	r0, r8, r5
   1f830:	f009 fb63 	bl	28efa <memmove>
	if (flash_prefix != 0) {
   1f834:	b1c5      	cbz	r5, 1f868 <qspi_nor_read+0x11c>
				     (WORD_SIZE - flash_prefix));
   1f836:	f1c5 0304 	rsb	r3, r5, #4
		res = nrfx_qspi_read(buf, WORD_SIZE, addr -
   1f83a:	1af2      	subs	r2, r6, r3
   1f83c:	2104      	movs	r1, #4
   1f83e:	f107 0008 	add.w	r0, r7, #8
   1f842:	607b      	str	r3, [r7, #4]
   1f844:	f00c f9a9 	bl	2bb9a <nrfx_qspi_read>
   1f848:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   1f84a:	4601      	mov	r1, r0
   1f84c:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1f850:	f7ff fc6c 	bl	1f12c <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   1f854:	4a1b      	ldr	r2, [pc, #108]	; (1f8c4 <qspi_nor_read+0x178>)
   1f856:	687b      	ldr	r3, [r7, #4]
   1f858:	4294      	cmp	r4, r2
   1f85a:	d11f      	bne.n	1f89c <qspi_nor_read+0x150>
		memcpy(dptr, buf + WORD_SIZE - flash_prefix, flash_prefix);
   1f85c:	3308      	adds	r3, #8
   1f85e:	462a      	mov	r2, r5
   1f860:	19d9      	adds	r1, r3, r7
   1f862:	4640      	mov	r0, r8
   1f864:	f009 fb60 	bl	28f28 <memcpy>
	if (flash_suffix != 0) {
   1f868:	f1bb 0f00 	cmp.w	fp, #0
   1f86c:	d022      	beq.n	1f8b4 <qspi_nor_read+0x168>
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
   1f86e:	2108      	movs	r1, #8
				     addr + flash_prefix + flash_middle);
   1f870:	1972      	adds	r2, r6, r5
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
   1f872:	4452      	add	r2, sl
   1f874:	1878      	adds	r0, r7, r1
   1f876:	f00c f990 	bl	2bb9a <nrfx_qspi_read>
   1f87a:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   1f87c:	4601      	mov	r1, r0
   1f87e:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1f882:	f7ff fc53 	bl	1f12c <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   1f886:	4b0f      	ldr	r3, [pc, #60]	; (1f8c4 <qspi_nor_read+0x178>)
   1f888:	429c      	cmp	r4, r3
   1f88a:	d107      	bne.n	1f89c <qspi_nor_read+0x150>
		memcpy(dptr + flash_prefix + flash_middle, buf, flash_suffix);
   1f88c:	eb0a 0005 	add.w	r0, sl, r5
   1f890:	465a      	mov	r2, fp
   1f892:	f107 0108 	add.w	r1, r7, #8
   1f896:	4440      	add	r0, r8
   1f898:	f009 fb46 	bl	28f28 <memcpy>
	qspi_unlock(dev);
   1f89c:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1f8a0:	f00b fe77 	bl	2b592 <qspi_unlock.isra.0>
	rc = qspi_get_zephyr_ret_code(res);
   1f8a4:	4620      	mov	r0, r4
   1f8a6:	f7ff fc27 	bl	1f0f8 <qspi_get_zephyr_ret_code>
   1f8aa:	4605      	mov	r5, r0
	qspi_device_uninit(dev);
   1f8ac:	4648      	mov	r0, r9
   1f8ae:	f7ff fcb3 	bl	1f218 <qspi_device_uninit>
	return rc;
   1f8b2:	e771      	b.n	1f798 <qspi_nor_read+0x4c>
	return res;
   1f8b4:	4c03      	ldr	r4, [pc, #12]	; (1f8c4 <qspi_nor_read+0x178>)
   1f8b6:	e7f1      	b.n	1f89c <qspi_nor_read+0x150>
		return 0;
   1f8b8:	461d      	mov	r5, r3
   1f8ba:	e76d      	b.n	1f798 <qspi_nor_read+0x4c>
   1f8bc:	000301b5 	.word	0x000301b5
   1f8c0:	0002cbf4 	.word	0x0002cbf4
   1f8c4:	0bad0000 	.word	0x0bad0000

0001f8c8 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   1f8c8:	4b02      	ldr	r3, [pc, #8]	; (1f8d4 <flash_nrf_pages_layout+0xc>)
   1f8ca:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1f8cc:	2301      	movs	r3, #1
   1f8ce:	6013      	str	r3, [r2, #0]
}
   1f8d0:	4770      	bx	lr
   1f8d2:	bf00      	nop
   1f8d4:	20003844 	.word	0x20003844

0001f8d8 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   1f8d8:	4800      	ldr	r0, [pc, #0]	; (1f8dc <flash_nrf_get_parameters+0x4>)
   1f8da:	4770      	bx	lr
   1f8dc:	0002d450 	.word	0x0002d450

0001f8e0 <flash_nrf_read.part.0>:
static int flash_nrf_read(const struct device *dev, off_t addr,
   1f8e0:	b580      	push	{r7, lr}
   1f8e2:	af00      	add	r7, sp, #0
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1f8e4:	b088      	sub	sp, #32
   1f8e6:	466a      	mov	r2, sp
   1f8e8:	4b08      	ldr	r3, [pc, #32]	; (1f90c <flash_nrf_read.part.0+0x2c>)
   1f8ea:	61d1      	str	r1, [r2, #28]
   1f8ec:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f8f0:	2304      	movs	r3, #4
   1f8f2:	f842 3f10 	str.w	r3, [r2, #16]!
   1f8f6:	4806      	ldr	r0, [pc, #24]	; (1f910 <flash_nrf_read.part.0+0x30>)
   1f8f8:	2300      	movs	r3, #0
   1f8fa:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1f8fe:	f7f4 f961 	bl	13bc4 <z_impl_z_log_msg_static_create>
}
   1f902:	f06f 0015 	mvn.w	r0, #21
   1f906:	46bd      	mov	sp, r7
   1f908:	bd80      	pop	{r7, pc}
   1f90a:	bf00      	nop
   1f90c:	00030214 	.word	0x00030214
   1f910:	0002cb94 	.word	0x0002cb94

0001f914 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   1f914:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1f916:	2201      	movs	r2, #1
   1f918:	4611      	mov	r1, r2
   1f91a:	4807      	ldr	r0, [pc, #28]	; (1f938 <nrf_flash_init+0x24>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1f91c:	4c07      	ldr	r4, [pc, #28]	; (1f93c <nrf_flash_init+0x28>)
   1f91e:	f00c fad3 	bl	2bec8 <z_impl_k_sem_init>
	nrf_flash_sync_init();
   1f922:	f002 f829 	bl	21978 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1f926:	f00c f923 	bl	2bb70 <nrfx_nvmc_flash_page_count_get>
   1f92a:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1f92c:	f00c f91c 	bl	2bb68 <nrfx_nvmc_flash_page_size_get>
   1f930:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   1f932:	2000      	movs	r0, #0
   1f934:	bd10      	pop	{r4, pc}
   1f936:	bf00      	nop
   1f938:	2000384c 	.word	0x2000384c
   1f93c:	20003844 	.word	0x20003844

0001f940 <restore_pofwarn.part.0>:
    uint32_t pofcon = p_reg->POFCON;
   1f940:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1f944:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    uint32_t pofcon = p_reg->POFCON;
   1f948:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   1f94c:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   1f950:	f023 031f 	bic.w	r3, r3, #31
   1f954:	430b      	orrs	r3, r1
    pofcon |=
   1f956:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   1f95a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

	if (pofcon_enabled) {
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
		pofcon_enabled = false;
   1f95e:	4b02      	ldr	r3, [pc, #8]	; (1f968 <restore_pofwarn.part.0+0x28>)
   1f960:	2200      	movs	r2, #0
   1f962:	701a      	strb	r2, [r3, #0]
	}
}
   1f964:	4770      	bx	lr
   1f966:	bf00      	nop
   1f968:	20004664 	.word	0x20004664

0001f96c <suspend_pofwarn>:
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1f96c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1f970:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   1f974:	2b08      	cmp	r3, #8
   1f976:	d120      	bne.n	1f9ba <suspend_pofwarn+0x4e>
    uint32_t pofcon = p_reg->POFCON;
   1f978:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1f97c:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
	if (enabled) {
   1f980:	07cb      	lsls	r3, r1, #31
   1f982:	d51a      	bpl.n	1f9ba <suspend_pofwarn+0x4e>
    uint32_t pofcon = p_reg->POFCON;
   1f984:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   1f988:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   1f98c:	f023 031f 	bic.w	r3, r3, #31
    pofcon |=
   1f990:	430b      	orrs	r3, r1
    p_reg->POFCON = pofcon;
   1f992:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f996:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
   1f99a:	b15b      	cbz	r3, 1f9b4 <suspend_pofwarn+0x48>
    uint32_t pofcon = p_reg->POFCON;
   1f99c:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   1f9a0:	f023 031f 	bic.w	r3, r3, #31
   1f9a4:	430b      	orrs	r3, r1
    pofcon |=
   1f9a6:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   1f9aa:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			return -ECANCELED;
   1f9ae:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   1f9b2:	4770      	bx	lr
		pofcon_enabled = enabled;
   1f9b4:	4b02      	ldr	r3, [pc, #8]	; (1f9c0 <suspend_pofwarn+0x54>)
   1f9b6:	2201      	movs	r2, #1
   1f9b8:	701a      	strb	r2, [r3, #0]
		return 0;
   1f9ba:	2000      	movs	r0, #0
}
   1f9bc:	4770      	bx	lr
   1f9be:	bf00      	nop
   1f9c0:	20004664 	.word	0x20004664

0001f9c4 <erase_op>:
{
   1f9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f9c6:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1f9c8:	f00c f8ce 	bl	2bb68 <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   1f9cc:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1f9ce:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   1f9d0:	b10b      	cbz	r3, 1f9d6 <erase_op+0x12>
		nrf_flash_sync_get_timestamp_begin();
   1f9d2:	f00c f85c 	bl	2ba8e <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   1f9d6:	4f13      	ldr	r7, [pc, #76]	; (1fa24 <erase_op+0x60>)
{
   1f9d8:	2600      	movs	r6, #0
		if (SUSPEND_POFWARN()) {
   1f9da:	f7ff ffc7 	bl	1f96c <suspend_pofwarn>
   1f9de:	b9e8      	cbnz	r0, 1fa1c <erase_op+0x58>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   1f9e0:	6860      	ldr	r0, [r4, #4]
   1f9e2:	f002 fd2b 	bl	2243c <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   1f9e6:	68a3      	ldr	r3, [r4, #8]
   1f9e8:	1b5b      	subs	r3, r3, r5
   1f9ea:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   1f9ec:	6863      	ldr	r3, [r4, #4]
   1f9ee:	442b      	add	r3, r5
   1f9f0:	6063      	str	r3, [r4, #4]
	if (pofcon_enabled) {
   1f9f2:	783b      	ldrb	r3, [r7, #0]
   1f9f4:	b10b      	cbz	r3, 1f9fa <erase_op+0x36>
   1f9f6:	f7ff ffa3 	bl	1f940 <restore_pofwarn.part.0>
		if (e_ctx->enable_time_limit) {
   1f9fa:	7b23      	ldrb	r3, [r4, #12]
		i++;
   1f9fc:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   1f9fe:	b93b      	cbnz	r3, 1fa10 <erase_op+0x4c>
	} while (e_ctx->len > 0);
   1fa00:	68a3      	ldr	r3, [r4, #8]
   1fa02:	2b00      	cmp	r3, #0
   1fa04:	d1e9      	bne.n	1f9da <erase_op+0x16>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   1fa06:	68a0      	ldr	r0, [r4, #8]
   1fa08:	3800      	subs	r0, #0
   1fa0a:	bf18      	it	ne
   1fa0c:	2001      	movne	r0, #1
}
   1fa0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (nrf_flash_sync_check_time_limit(i)) {
   1fa10:	4630      	mov	r0, r6
   1fa12:	f002 f853 	bl	21abc <nrf_flash_sync_check_time_limit>
   1fa16:	2800      	cmp	r0, #0
   1fa18:	d0f2      	beq.n	1fa00 <erase_op+0x3c>
   1fa1a:	e7f4      	b.n	1fa06 <erase_op+0x42>
			return -ECANCELED;
   1fa1c:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1fa20:	e7f5      	b.n	1fa0e <erase_op+0x4a>
   1fa22:	bf00      	nop
   1fa24:	20004664 	.word	0x20004664

0001fa28 <write_op>:
{
   1fa28:	b570      	push	{r4, r5, r6, lr}
	if (w_ctx->enable_time_limit) {
   1fa2a:	7b03      	ldrb	r3, [r0, #12]
{
   1fa2c:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   1fa2e:	b10b      	cbz	r3, 1fa34 <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   1fa30:	f00c f82d 	bl	2ba8e <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   1fa34:	4e19      	ldr	r6, [pc, #100]	; (1fa9c <write_op+0x74>)
{
   1fa36:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   1fa38:	68a3      	ldr	r3, [r4, #8]
   1fa3a:	2b03      	cmp	r3, #3
   1fa3c:	d806      	bhi.n	1fa4c <write_op+0x24>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1fa3e:	4a18      	ldr	r2, [pc, #96]	; (1faa0 <write_op+0x78>)
   1fa40:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1fa44:	07db      	lsls	r3, r3, #31
   1fa46:	d5fb      	bpl.n	1fa40 <write_op+0x18>
	return FLASH_OP_DONE;
   1fa48:	2000      	movs	r0, #0
}
   1fa4a:	bd70      	pop	{r4, r5, r6, pc}
		if (SUSPEND_POFWARN()) {
   1fa4c:	f7ff ff8e 	bl	1f96c <suspend_pofwarn>
   1fa50:	bb08      	cbnz	r0, 1fa96 <write_op+0x6e>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   1fa52:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   1fa54:	6860      	ldr	r0, [r4, #4]
   1fa56:	6819      	ldr	r1, [r3, #0]
   1fa58:	f002 fd10 	bl	2247c <nrfx_nvmc_word_write>
	if (pofcon_enabled) {
   1fa5c:	7833      	ldrb	r3, [r6, #0]
   1fa5e:	b10b      	cbz	r3, 1fa64 <write_op+0x3c>
   1fa60:	f7ff ff6e 	bl	1f940 <restore_pofwarn.part.0>
	w_ctx->flash_addr += shift;
   1fa64:	6863      	ldr	r3, [r4, #4]
   1fa66:	3304      	adds	r3, #4
   1fa68:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   1fa6a:	6823      	ldr	r3, [r4, #0]
   1fa6c:	3304      	adds	r3, #4
   1fa6e:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   1fa70:	68a3      	ldr	r3, [r4, #8]
   1fa72:	3b04      	subs	r3, #4
   1fa74:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   1fa76:	7b23      	ldrb	r3, [r4, #12]
		i++;
   1fa78:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   1fa7a:	2b00      	cmp	r3, #0
   1fa7c:	d0dc      	beq.n	1fa38 <write_op+0x10>
			if (nrf_flash_sync_check_time_limit(i)) {
   1fa7e:	4628      	mov	r0, r5
   1fa80:	f002 f81c 	bl	21abc <nrf_flash_sync_check_time_limit>
   1fa84:	2800      	cmp	r0, #0
   1fa86:	d0d7      	beq.n	1fa38 <write_op+0x10>
   1fa88:	4a05      	ldr	r2, [pc, #20]	; (1faa0 <write_op+0x78>)
   1fa8a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1fa8e:	07d9      	lsls	r1, r3, #31
   1fa90:	d5fb      	bpl.n	1fa8a <write_op+0x62>
				return FLASH_OP_ONGOING;
   1fa92:	2001      	movs	r0, #1
   1fa94:	e7d9      	b.n	1fa4a <write_op+0x22>
			return -ECANCELED;
   1fa96:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1fa9a:	e7d6      	b.n	1fa4a <write_op+0x22>
   1fa9c:	20004664 	.word	0x20004664
   1faa0:	4001e000 	.word	0x4001e000

0001faa4 <flash_nrf_erase>:
{
   1faa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1faa8:	b086      	sub	sp, #24
   1faaa:	af00      	add	r7, sp, #0
   1faac:	460e      	mov	r6, r1
   1faae:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1fab0:	f00c f85a 	bl	2bb68 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   1fab4:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1fab6:	4680      	mov	r8, r0
	if (is_regular_addr_valid(addr, size)) {
   1fab8:	4630      	mov	r0, r6
   1faba:	f00b fd9d 	bl	2b5f8 <is_regular_addr_valid>
   1fabe:	4603      	mov	r3, r0
   1fac0:	b3c8      	cbz	r0, 1fb36 <flash_nrf_erase+0x92>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1fac2:	fbb6 f3f8 	udiv	r3, r6, r8
   1fac6:	fb08 6313 	mls	r3, r8, r3, r6
   1faca:	b923      	cbnz	r3, 1fad6 <flash_nrf_erase+0x32>
   1facc:	fbb5 f4f8 	udiv	r4, r5, r8
   1fad0:	fb08 5414 	mls	r4, r8, r4, r5
   1fad4:	b1bc      	cbz	r4, 1fb06 <flash_nrf_erase+0x62>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   1fad6:	466c      	mov	r4, sp
   1fad8:	b088      	sub	sp, #32
   1fada:	466a      	mov	r2, sp
   1fadc:	4b27      	ldr	r3, [pc, #156]	; (1fb7c <flash_nrf_erase+0xd8>)
   1fade:	61d5      	str	r5, [r2, #28]
   1fae0:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1fae4:	2304      	movs	r3, #4
   1fae6:	f842 3f10 	str.w	r3, [r2, #16]!
   1faea:	2300      	movs	r3, #0
   1faec:	4824      	ldr	r0, [pc, #144]	; (1fb80 <flash_nrf_erase+0xdc>)
   1faee:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1faf2:	f7f4 f867 	bl	13bc4 <z_impl_z_log_msg_static_create>
   1faf6:	46a5      	mov	sp, r4
			return -EINVAL;
   1faf8:	f06f 0415 	mvn.w	r4, #21
}
   1fafc:	4620      	mov	r0, r4
   1fafe:	3718      	adds	r7, #24
   1fb00:	46bd      	mov	sp, r7
   1fb02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!n_pages) {
   1fb06:	45a8      	cmp	r8, r5
   1fb08:	d8f8      	bhi.n	1fafc <flash_nrf_erase+0x58>
	return z_impl_k_sem_take(sem, timeout);
   1fb0a:	f04f 33ff 	mov.w	r3, #4294967295
   1fb0e:	f04f 32ff 	mov.w	r2, #4294967295
   1fb12:	481c      	ldr	r0, [pc, #112]	; (1fb84 <flash_nrf_erase+0xe0>)
   1fb14:	f003 fc24 	bl	23360 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1fb18:	f00b ffb7 	bl	2ba8a <nrf_flash_sync_is_required>
   1fb1c:	f107 0308 	add.w	r3, r7, #8
   1fb20:	4601      	mov	r1, r0
   1fb22:	b998      	cbnz	r0, 1fb4c <flash_nrf_erase+0xa8>
	struct flash_context context = {
   1fb24:	2210      	movs	r2, #16
   1fb26:	4618      	mov	r0, r3
   1fb28:	f009 fa09 	bl	28f3e <memset>
   1fb2c:	e9c7 6503 	strd	r6, r5, [r7, #12]
	return	erase_op(&context);
   1fb30:	f7ff ff48 	bl	1f9c4 <erase_op>
   1fb34:	e01c      	b.n	1fb70 <flash_nrf_erase+0xcc>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1fb36:	466c      	mov	r4, sp
   1fb38:	b088      	sub	sp, #32
   1fb3a:	466a      	mov	r2, sp
   1fb3c:	4912      	ldr	r1, [pc, #72]	; (1fb88 <flash_nrf_erase+0xe4>)
   1fb3e:	61d5      	str	r5, [r2, #28]
   1fb40:	e9c2 1605 	strd	r1, r6, [r2, #20]
   1fb44:	2104      	movs	r1, #4
   1fb46:	f842 1f10 	str.w	r1, [r2, #16]!
	compiler_barrier();
   1fb4a:	e7cf      	b.n	1faec <flash_nrf_erase+0x48>
	struct flash_context context = {
   1fb4c:	2210      	movs	r2, #16
   1fb4e:	4621      	mov	r1, r4
   1fb50:	4618      	mov	r0, r3
   1fb52:	f009 f9f4 	bl	28f3e <memset>
   1fb56:	2201      	movs	r2, #1
   1fb58:	753a      	strb	r2, [r7, #20]
	struct flash_op_desc flash_op_desc = {
   1fb5a:	4a0c      	ldr	r2, [pc, #48]	; (1fb8c <flash_nrf_erase+0xe8>)
	struct flash_context context = {
   1fb5c:	e9c7 6503 	strd	r6, r5, [r7, #12]
	struct flash_op_desc flash_op_desc = {
   1fb60:	e9c7 2000 	strd	r2, r0, [r7]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1fb64:	480a      	ldr	r0, [pc, #40]	; (1fb90 <flash_nrf_erase+0xec>)
   1fb66:	f001 ff0f 	bl	21988 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1fb6a:	4638      	mov	r0, r7
   1fb6c:	f001 ff12 	bl	21994 <nrf_flash_sync_exe>
	return	erase_op(&context);
   1fb70:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1fb72:	4804      	ldr	r0, [pc, #16]	; (1fb84 <flash_nrf_erase+0xe0>)
   1fb74:	f003 fbce 	bl	23314 <z_impl_k_sem_give>
}
   1fb78:	e7c0      	b.n	1fafc <flash_nrf_erase+0x58>
   1fb7a:	bf00      	nop
   1fb7c:	00030231 	.word	0x00030231
   1fb80:	0002cb94 	.word	0x0002cb94
   1fb84:	2000384c 	.word	0x2000384c
   1fb88:	00030214 	.word	0x00030214
   1fb8c:	0001f9c5 	.word	0x0001f9c5
   1fb90:	00015e64 	.word	0x00015e64

0001fb94 <flash_nrf_write>:
{
   1fb94:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fb96:	460d      	mov	r5, r1
   1fb98:	b087      	sub	sp, #28
	if (is_regular_addr_valid(addr, len)) {
   1fb9a:	4619      	mov	r1, r3
{
   1fb9c:	af00      	add	r7, sp, #0
	if (is_regular_addr_valid(addr, len)) {
   1fb9e:	4628      	mov	r0, r5
{
   1fba0:	461c      	mov	r4, r3
   1fba2:	4616      	mov	r6, r2
	if (is_regular_addr_valid(addr, len)) {
   1fba4:	f00b fd28 	bl	2b5f8 <is_regular_addr_valid>
   1fba8:	4603      	mov	r3, r0
   1fbaa:	b9a8      	cbnz	r0, 1fbd8 <flash_nrf_write+0x44>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1fbac:	466e      	mov	r6, sp
   1fbae:	b088      	sub	sp, #32
   1fbb0:	466a      	mov	r2, sp
   1fbb2:	4925      	ldr	r1, [pc, #148]	; (1fc48 <flash_nrf_write+0xb4>)
   1fbb4:	61d4      	str	r4, [r2, #28]
   1fbb6:	e9c2 1505 	strd	r1, r5, [r2, #20]
   1fbba:	2104      	movs	r1, #4
   1fbbc:	f842 1f10 	str.w	r1, [r2, #16]!
	z_impl_z_log_msg_static_create(source, desc, package, data);
   1fbc0:	4822      	ldr	r0, [pc, #136]	; (1fc4c <flash_nrf_write+0xb8>)
   1fbc2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1fbc6:	f7f3 fffd 	bl	13bc4 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1fbca:	f06f 0415 	mvn.w	r4, #21
   1fbce:	46b5      	mov	sp, r6
}
   1fbd0:	4620      	mov	r0, r4
   1fbd2:	371c      	adds	r7, #28
   1fbd4:	46bd      	mov	sp, r7
   1fbd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   1fbd8:	ea45 0304 	orr.w	r3, r5, r4
   1fbdc:	079b      	lsls	r3, r3, #30
   1fbde:	d00b      	beq.n	1fbf8 <flash_nrf_write+0x64>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1fbe0:	466e      	mov	r6, sp
   1fbe2:	b088      	sub	sp, #32
   1fbe4:	466a      	mov	r2, sp
   1fbe6:	4b1a      	ldr	r3, [pc, #104]	; (1fc50 <flash_nrf_write+0xbc>)
   1fbe8:	61d4      	str	r4, [r2, #28]
   1fbea:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1fbee:	2304      	movs	r3, #4
   1fbf0:	f842 3f10 	str.w	r3, [r2, #16]!
   1fbf4:	2300      	movs	r3, #0
   1fbf6:	e7e3      	b.n	1fbc0 <flash_nrf_write+0x2c>
	if (!len) {
   1fbf8:	2c00      	cmp	r4, #0
   1fbfa:	d0e9      	beq.n	1fbd0 <flash_nrf_write+0x3c>
	return z_impl_k_sem_take(sem, timeout);
   1fbfc:	f04f 33ff 	mov.w	r3, #4294967295
   1fc00:	f04f 32ff 	mov.w	r2, #4294967295
   1fc04:	4813      	ldr	r0, [pc, #76]	; (1fc54 <flash_nrf_write+0xc0>)
   1fc06:	f003 fbab 	bl	23360 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1fc0a:	f00b ff3e 	bl	2ba8a <nrf_flash_sync_is_required>
   1fc0e:	4603      	mov	r3, r0
	struct flash_context context = {
   1fc10:	e9c7 6502 	strd	r6, r5, [r7, #8]
   1fc14:	f107 0008 	add.w	r0, r7, #8
   1fc18:	613c      	str	r4, [r7, #16]
	if (nrf_flash_sync_is_required()) {
   1fc1a:	b183      	cbz	r3, 1fc3e <flash_nrf_write+0xaa>
	struct flash_context context = {
   1fc1c:	2301      	movs	r3, #1
   1fc1e:	753b      	strb	r3, [r7, #20]
	struct flash_op_desc flash_op_desc = {
   1fc20:	4b0d      	ldr	r3, [pc, #52]	; (1fc58 <flash_nrf_write+0xc4>)
   1fc22:	e9c7 3000 	strd	r3, r0, [r7]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   1fc26:	f641 504c 	movw	r0, #7500	; 0x1d4c
   1fc2a:	f001 fead 	bl	21988 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1fc2e:	4638      	mov	r0, r7
   1fc30:	f001 feb0 	bl	21994 <nrf_flash_sync_exe>
	return write_op(&context);
   1fc34:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1fc36:	4807      	ldr	r0, [pc, #28]	; (1fc54 <flash_nrf_write+0xc0>)
   1fc38:	f003 fb6c 	bl	23314 <z_impl_k_sem_give>
}
   1fc3c:	e7c8      	b.n	1fbd0 <flash_nrf_write+0x3c>
	struct flash_context context = {
   1fc3e:	753b      	strb	r3, [r7, #20]
	return write_op(&context);
   1fc40:	f7ff fef2 	bl	1fa28 <write_op>
   1fc44:	e7f6      	b.n	1fc34 <flash_nrf_write+0xa0>
   1fc46:	bf00      	nop
   1fc48:	00030214 	.word	0x00030214
   1fc4c:	0002cb94 	.word	0x0002cb94
   1fc50:	00030250 	.word	0x00030250
   1fc54:	2000384c 	.word	0x2000384c
   1fc58:	0001fa29 	.word	0x0001fa29

0001fc5c <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   1fc5c:	b530      	push	{r4, r5, lr}
	return port->config;
   1fc5e:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1fc60:	7b05      	ldrb	r5, [r0, #12]
   1fc62:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
   1fc66:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   1fc6a:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1fc6c:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1fc70:	d105      	bne.n	1fc7e <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   1fc72:	4620      	mov	r0, r4
   1fc74:	f002 faac 	bl	221d0 <nrfx_gpiote_trigger_disable>

		return 0;
   1fc78:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
   1fc7a:	b005      	add	sp, #20
   1fc7c:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   1fc7e:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   1fc80:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1fc84:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1fc88:	d114      	bne.n	1fcb4 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1fc8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1fc8e:	bf0c      	ite	eq
   1fc90:	2304      	moveq	r3, #4
   1fc92:	2305      	movne	r3, #5
   1fc94:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1fc98:	2300      	movs	r3, #0
   1fc9a:	4619      	mov	r1, r3
   1fc9c:	aa02      	add	r2, sp, #8
   1fc9e:	4620      	mov	r0, r4
   1fca0:	f002 f8d4 	bl	21e4c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1fca4:	4b1f      	ldr	r3, [pc, #124]	; (1fd24 <gpio_nrfx_pin_interrupt_configure+0xc8>)
   1fca6:	4298      	cmp	r0, r3
   1fca8:	d139      	bne.n	1fd1e <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1fcaa:	2101      	movs	r1, #1
   1fcac:	4620      	mov	r0, r4
   1fcae:	f002 fa47 	bl	22140 <nrfx_gpiote_trigger_enable>
	return 0;
   1fcb2:	e7e1      	b.n	1fc78 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1fcb4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   1fcb8:	d026      	beq.n	1fd08 <gpio_nrfx_pin_interrupt_configure+0xac>
   1fcba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1fcbe:	bf14      	ite	ne
   1fcc0:	2301      	movne	r3, #1
   1fcc2:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   1fcc4:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1fcc8:	6883      	ldr	r3, [r0, #8]
   1fcca:	40cb      	lsrs	r3, r1
   1fccc:	07d9      	lsls	r1, r3, #31
   1fcce:	d4e3      	bmi.n	1fc98 <gpio_nrfx_pin_interrupt_configure+0x3c>
   1fcd0:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   1fcd4:	d1e0      	bne.n	1fc98 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   1fcd6:	0962      	lsrs	r2, r4, #5
        case 1: return NRF_P1;
   1fcd8:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   1fcda:	f004 031f 	and.w	r3, r4, #31
        case 1: return NRF_P1;
   1fcde:	4a12      	ldr	r2, [pc, #72]	; (1fd28 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1fce0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   1fce4:	bf18      	it	ne
   1fce6:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1fcea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1fcee:	07db      	lsls	r3, r3, #31
   1fcf0:	d4d2      	bmi.n	1fc98 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1fcf2:	f10d 0507 	add.w	r5, sp, #7
   1fcf6:	4629      	mov	r1, r5
   1fcf8:	4620      	mov	r0, r4
   1fcfa:	f002 f9cd 	bl	22098 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1fcfe:	4b0b      	ldr	r3, [pc, #44]	; (1fd2c <gpio_nrfx_pin_interrupt_configure+0xd0>)
   1fd00:	4298      	cmp	r0, r3
   1fd02:	d003      	beq.n	1fd0c <gpio_nrfx_pin_interrupt_configure+0xb0>
		trigger_config.p_in_channel = &ch;
   1fd04:	9503      	str	r5, [sp, #12]
   1fd06:	e7c7      	b.n	1fc98 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1fd08:	2303      	movs	r3, #3
   1fd0a:	e7db      	b.n	1fcc4 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
   1fd0c:	4628      	mov	r0, r5
   1fd0e:	f002 fa11 	bl	22134 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1fd12:	4b04      	ldr	r3, [pc, #16]	; (1fd24 <gpio_nrfx_pin_interrupt_configure+0xc8>)
   1fd14:	4298      	cmp	r0, r3
   1fd16:	d0f5      	beq.n	1fd04 <gpio_nrfx_pin_interrupt_configure+0xa8>
				return -ENOMEM;
   1fd18:	f06f 000b 	mvn.w	r0, #11
   1fd1c:	e7ad      	b.n	1fc7a <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   1fd1e:	f06f 0015 	mvn.w	r0, #21
   1fd22:	e7aa      	b.n	1fc7a <gpio_nrfx_pin_interrupt_configure+0x1e>
   1fd24:	0bad0000 	.word	0x0bad0000
   1fd28:	50000300 	.word	0x50000300
   1fd2c:	0bad0004 	.word	0x0bad0004

0001fd30 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1fd30:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1fd32:	f002 f9ef 	bl	22114 <nrfx_gpiote_is_init>
   1fd36:	4604      	mov	r4, r0
   1fd38:	b968      	cbnz	r0, 1fd56 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1fd3a:	f002 f9c3 	bl	220c4 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1fd3e:	4b08      	ldr	r3, [pc, #32]	; (1fd60 <gpio_nrfx_init+0x30>)
   1fd40:	4298      	cmp	r0, r3
   1fd42:	d10a      	bne.n	1fd5a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1fd44:	4807      	ldr	r0, [pc, #28]	; (1fd64 <gpio_nrfx_init+0x34>)
   1fd46:	4621      	mov	r1, r4
   1fd48:	f002 f9a0 	bl	2208c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1fd4c:	4622      	mov	r2, r4
   1fd4e:	2105      	movs	r1, #5
   1fd50:	2006      	movs	r0, #6
   1fd52:	f7f5 f85d 	bl	14e10 <z_arm_irq_priority_set>
		return 0;
   1fd56:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1fd58:	bd10      	pop	{r4, pc}
		return -EIO;
   1fd5a:	f06f 0004 	mvn.w	r0, #4
   1fd5e:	e7fb      	b.n	1fd58 <gpio_nrfx_init+0x28>
   1fd60:	0bad0000 	.word	0x0bad0000
   1fd64:	0001fd69 	.word	0x0001fd69

0001fd68 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1fd68:	0942      	lsrs	r2, r0, #5
{
   1fd6a:	b570      	push	{r4, r5, r6, lr}
   1fd6c:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1fd6e:	d002      	beq.n	1fd76 <nrfx_gpio_handler+0xe>
   1fd70:	2a01      	cmp	r2, #1
   1fd72:	d017      	beq.n	1fda4 <nrfx_gpio_handler+0x3c>
}
   1fd74:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1fd76:	4e0d      	ldr	r6, [pc, #52]	; (1fdac <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
   1fd78:	6932      	ldr	r2, [r6, #16]
   1fd7a:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1fd7c:	2900      	cmp	r1, #0
   1fd7e:	d0f9      	beq.n	1fd74 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
   1fd80:	f003 031f 	and.w	r3, r3, #31
   1fd84:	2501      	movs	r5, #1
   1fd86:	680c      	ldr	r4, [r1, #0]
   1fd88:	409d      	lsls	r5, r3
   1fd8a:	2900      	cmp	r1, #0
   1fd8c:	d0f2      	beq.n	1fd74 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   1fd8e:	688a      	ldr	r2, [r1, #8]
   1fd90:	402a      	ands	r2, r5
   1fd92:	d002      	beq.n	1fd9a <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1fd94:	684b      	ldr	r3, [r1, #4]
   1fd96:	4630      	mov	r0, r6
   1fd98:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1fd9a:	b12c      	cbz	r4, 1fda8 <nrfx_gpio_handler+0x40>
   1fd9c:	6823      	ldr	r3, [r4, #0]
   1fd9e:	4621      	mov	r1, r4
   1fda0:	461c      	mov	r4, r3
   1fda2:	e7f2      	b.n	1fd8a <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1fda4:	4e02      	ldr	r6, [pc, #8]	; (1fdb0 <nrfx_gpio_handler+0x48>)
   1fda6:	e7e7      	b.n	1fd78 <nrfx_gpio_handler+0x10>
   1fda8:	4623      	mov	r3, r4
   1fdaa:	e7f8      	b.n	1fd9e <nrfx_gpio_handler+0x36>
   1fdac:	0002c80c 	.word	0x0002c80c
   1fdb0:	0002c7f4 	.word	0x0002c7f4

0001fdb4 <gpio_nrfx_pin_configure>:
{
   1fdb4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   1fdb8:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1fdba:	7b3b      	ldrb	r3, [r7, #12]
   1fdbc:	f001 051f 	and.w	r5, r1, #31
   1fdc0:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   1fdc4:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1fdc6:	4628      	mov	r0, r5
   1fdc8:	f10d 0103 	add.w	r1, sp, #3
{
   1fdcc:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1fdce:	f002 f963 	bl	22098 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1fdd2:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1fdd6:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1fdd8:	d10b      	bne.n	1fdf2 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1fdda:	4628      	mov	r0, r5
   1fddc:	f002 fa20 	bl	22220 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   1fde0:	4b3d      	ldr	r3, [pc, #244]	; (1fed8 <gpio_nrfx_pin_configure+0x124>)
   1fde2:	4598      	cmp	r8, r3
   1fde4:	d103      	bne.n	1fdee <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
   1fde6:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1fdea:	f002 f99d 	bl	22128 <nrfx_gpiote_channel_free>
		return 0;
   1fdee:	2000      	movs	r0, #0
   1fdf0:	e00c      	b.n	1fe0c <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1fdf2:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1fdf4:	4619      	mov	r1, r3
   1fdf6:	aa02      	add	r2, sp, #8
   1fdf8:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
   1fdfa:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1fdfe:	f002 f825 	bl	21e4c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1fe02:	4b35      	ldr	r3, [pc, #212]	; (1fed8 <gpio_nrfx_pin_configure+0x124>)
   1fe04:	4298      	cmp	r0, r3
   1fe06:	d004      	beq.n	1fe12 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
   1fe08:	f06f 0015 	mvn.w	r0, #21
}
   1fe0c:	b004      	add	sp, #16
   1fe0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   1fe12:	4580      	cmp	r8, r0
   1fe14:	d103      	bne.n	1fe1e <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
   1fe16:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1fe1a:	f002 f985 	bl	22128 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   1fe1e:	03a3      	lsls	r3, r4, #14
   1fe20:	d54b      	bpl.n	1feba <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1fe22:	f240 3306 	movw	r3, #774	; 0x306
   1fe26:	4023      	ands	r3, r4
   1fe28:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   1fe2c:	d019      	beq.n	1fe62 <gpio_nrfx_pin_configure+0xae>
   1fe2e:	d80c      	bhi.n	1fe4a <gpio_nrfx_pin_configure+0x96>
   1fe30:	2b06      	cmp	r3, #6
   1fe32:	d017      	beq.n	1fe64 <gpio_nrfx_pin_configure+0xb0>
   1fe34:	d804      	bhi.n	1fe40 <gpio_nrfx_pin_configure+0x8c>
   1fe36:	b1ab      	cbz	r3, 1fe64 <gpio_nrfx_pin_configure+0xb0>
   1fe38:	2b02      	cmp	r3, #2
   1fe3a:	d1e5      	bne.n	1fe08 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
   1fe3c:	2304      	movs	r3, #4
   1fe3e:	e011      	b.n	1fe64 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1fe40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1fe44:	d1e0      	bne.n	1fe08 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
   1fe46:	2301      	movs	r3, #1
   1fe48:	e00c      	b.n	1fe64 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1fe4a:	f240 2202 	movw	r2, #514	; 0x202
   1fe4e:	4293      	cmp	r3, r2
   1fe50:	d027      	beq.n	1fea2 <gpio_nrfx_pin_configure+0xee>
   1fe52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1fe56:	d026      	beq.n	1fea6 <gpio_nrfx_pin_configure+0xf2>
   1fe58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1fe5c:	d1d4      	bne.n	1fe08 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
   1fe5e:	2302      	movs	r3, #2
   1fe60:	e000      	b.n	1fe64 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
   1fe62:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   1fe64:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1fe68:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   1fe6c:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   1fe70:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1fe72:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
   1fe76:	bf54      	ite	pl
   1fe78:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1fe7c:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1fe7e:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   1fe80:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1fe84:	d511      	bpl.n	1feaa <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1fe86:	687a      	ldr	r2, [r7, #4]
   1fe88:	2301      	movs	r3, #1
   1fe8a:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   1fe8c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1fe90:	2200      	movs	r2, #0
   1fe92:	a901      	add	r1, sp, #4
   1fe94:	4628      	mov	r0, r5
   1fe96:	f002 f887 	bl	21fa8 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1fe9a:	4b0f      	ldr	r3, [pc, #60]	; (1fed8 <gpio_nrfx_pin_configure+0x124>)
   1fe9c:	4298      	cmp	r0, r3
   1fe9e:	d0a6      	beq.n	1fdee <gpio_nrfx_pin_configure+0x3a>
   1fea0:	e7b2      	b.n	1fe08 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
   1fea2:	2305      	movs	r3, #5
   1fea4:	e7de      	b.n	1fe64 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1fea6:	2303      	movs	r3, #3
   1fea8:	e7dc      	b.n	1fe64 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1feaa:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1feac:	bf41      	itttt	mi
   1feae:	2301      	movmi	r3, #1
   1feb0:	687a      	ldrmi	r2, [r7, #4]
   1feb2:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
   1feb4:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
   1feb8:	e7ea      	b.n	1fe90 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
   1feba:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1febc:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
   1fec0:	bf54      	ite	pl
   1fec2:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1fec6:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1fec8:	461a      	mov	r2, r3
   1feca:	a901      	add	r1, sp, #4
   1fecc:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   1fece:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1fed2:	f001 ffbb 	bl	21e4c <nrfx_gpiote_input_configure>
   1fed6:	e7e0      	b.n	1fe9a <gpio_nrfx_pin_configure+0xe6>
   1fed8:	0bad0000 	.word	0x0bad0000

0001fedc <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   1fedc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        case 1: return NRF_P1;
   1fee0:	4e5a      	ldr	r6, [pc, #360]	; (2004c <pinctrl_configure_pins+0x170>)
   1fee2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1fee6:	2701      	movs	r7, #1
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1fee8:	4281      	cmp	r1, r0
   1feea:	d102      	bne.n	1fef2 <pinctrl_configure_pins+0x16>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   1feec:	2000      	movs	r0, #0
}
   1feee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   1fef2:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   1fef4:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   1fef8:	f3c4 2543 	ubfx	r5, r4, #9, #4
			pin = 0xFFFFFFFFU;
   1fefc:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   1fefe:	ea4f 4414 	mov.w	r4, r4, lsr #16
			pin = 0xFFFFFFFFU;
   1ff02:	bf08      	it	eq
   1ff04:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   1ff08:	2c22      	cmp	r4, #34	; 0x22
   1ff0a:	f200 809b 	bhi.w	20044 <pinctrl_configure_pins+0x168>
   1ff0e:	e8df f004 	tbb	[pc, r4]
   1ff12:	2412      	.short	0x2412
   1ff14:	402c4429 	.word	0x402c4429
   1ff18:	99999944 	.word	0x99999944
   1ff1c:	99704799 	.word	0x99704799
   1ff20:	99999999 	.word	0x99999999
   1ff24:	99999999 	.word	0x99999999
   1ff28:	817e7b73 	.word	0x817e7b73
   1ff2c:	84999999 	.word	0x84999999
   1ff30:	93908d8a 	.word	0x93908d8a
   1ff34:	96          	.byte	0x96
   1ff35:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
   1ff36:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    return pin_number >> 5;
   1ff3a:	ea4f 1c53 	mov.w	ip, r3, lsr #5
        case 1: return NRF_P1;
   1ff3e:	f1bc 0f01 	cmp.w	ip, #1
    *p_pin = pin_number & 0x1F;
   1ff42:	f003 041f 	and.w	r4, r3, #31
        case 1: return NRF_P1;
   1ff46:	bf14      	ite	ne
   1ff48:	f04f 4ca0 	movne.w	ip, #1342177280	; 0x50000000
   1ff4c:	46b4      	moveq	ip, r6
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1ff4e:	fa07 f404 	lsl.w	r4, r7, r4
    p_reg->OUTSET = set_mask;
   1ff52:	f8cc 4508 	str.w	r4, [ip, #1288]	; 0x508
   1ff56:	2401      	movs	r4, #1
   1ff58:	e002      	b.n	1ff60 <pinctrl_configure_pins+0x84>
			NRF_PSEL_UART(reg, RXD) = pin;
   1ff5a:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1ff5e:	2400      	movs	r4, #0
   1ff60:	46a6      	mov	lr, r4
   1ff62:	e024      	b.n	1ffae <pinctrl_configure_pins+0xd2>
			NRF_PSEL_UART(reg, RTS) = pin;
   1ff64:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
   1ff68:	e7e7      	b.n	1ff3a <pinctrl_configure_pins+0x5e>
			NRF_PSEL_SPIM(reg, SCK) = pin;
   1ff6a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1ff6e:	2400      	movs	r4, #0
    return pin_number >> 5;
   1ff70:	ea4f 1e53 	mov.w	lr, r3, lsr #5
        case 1: return NRF_P1;
   1ff74:	f1be 0f01 	cmp.w	lr, #1
   1ff78:	bf14      	ite	ne
   1ff7a:	f04f 4ea0 	movne.w	lr, #1342177280	; 0x50000000
   1ff7e:	46b6      	moveq	lr, r6
    *p_pin = pin_number & 0x1F;
   1ff80:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1ff84:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
   1ff88:	f8ce c50c 	str.w	ip, [lr, #1292]	; 0x50c
   1ff8c:	f04f 0e01 	mov.w	lr, #1
   1ff90:	e00d      	b.n	1ffae <pinctrl_configure_pins+0xd2>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   1ff92:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   1ff96:	2401      	movs	r4, #1
   1ff98:	e7ea      	b.n	1ff70 <pinctrl_configure_pins+0x94>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   1ff9a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
   1ff9e:	e7de      	b.n	1ff5e <pinctrl_configure_pins+0x82>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   1ffa0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   1ffa4:	2d00      	cmp	r5, #0
   1ffa6:	d1da      	bne.n	1ff5e <pinctrl_configure_pins+0x82>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1ffa8:	2400      	movs	r4, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1ffaa:	46a6      	mov	lr, r4
				drive = NRF_DRIVE_S0D1;
   1ffac:	2506      	movs	r5, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   1ffae:	f850 cb04 	ldr.w	ip, [r0], #4
   1ffb2:	f40c 5800 	and.w	r8, ip, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1ffb6:	f1b8 0f00 	cmp.w	r8, #0
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   1ffba:	ea4f 2505 	mov.w	r5, r5, lsl #8
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   1ffbe:	f3cc 18c1 	ubfx	r8, ip, #7, #2
    *p_pin = pin_number & 0x1F;
   1ffc2:	f003 0c1f 	and.w	ip, r3, #31
    return pin_number >> 5;
   1ffc6:	ea4f 1353 	mov.w	r3, r3, lsr #5
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1ffca:	bf1c      	itt	ne
   1ffcc:	2401      	movne	r4, #1
   1ffce:	f04f 0e00 	movne.w	lr, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1ffd2:	ea45 0588 	orr.w	r5, r5, r8, lsl #2
        case 0: return NRF_P0;
   1ffd6:	2b01      	cmp	r3, #1
   1ffd8:	bf0c      	ite	eq
   1ffda:	4633      	moveq	r3, r6
   1ffdc:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1ffe0:	ea45 050e 	orr.w	r5, r5, lr
    reg->PIN_CNF[pin_number] = cnf;
   1ffe4:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1ffe8:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   1ffec:	f843 502c 	str.w	r5, [r3, ip, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1fff0:	e77a      	b.n	1fee8 <pinctrl_configure_pins+0xc>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   1fff2:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   1fff6:	e7d5      	b.n	1ffa4 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   1fff8:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   1fffc:	6804      	ldr	r4, [r0, #0]
   1fffe:	f3c4 3480 	ubfx	r4, r4, #14, #1
    if (value == 0)
   20002:	2c00      	cmp	r4, #0
   20004:	d0c7      	beq.n	1ff96 <pinctrl_configure_pins+0xba>
   20006:	e798      	b.n	1ff3a <pinctrl_configure_pins+0x5e>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   20008:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   2000c:	e7f6      	b.n	1fffc <pinctrl_configure_pins+0x120>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   2000e:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   20012:	e7f3      	b.n	1fffc <pinctrl_configure_pins+0x120>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   20014:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
   20018:	e7f0      	b.n	1fffc <pinctrl_configure_pins+0x120>
			NRF_PSEL_QSPI(reg, SCK) = pin;
   2001a:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2001e:	2401      	movs	r4, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   20020:	f04f 0e00 	mov.w	lr, #0
   20024:	e7c3      	b.n	1ffae <pinctrl_configure_pins+0xd2>
			NRF_PSEL_QSPI(reg, CSN) = pin;
   20026:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
   2002a:	e786      	b.n	1ff3a <pinctrl_configure_pins+0x5e>
			NRF_PSEL_QSPI(reg, IO0) = pin;
   2002c:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
			if (write != NO_WRITE) {
   20030:	e7f5      	b.n	2001e <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO1) = pin;
   20032:	f8c2 3534 	str.w	r3, [r2, #1332]	; 0x534
   20036:	e7f2      	b.n	2001e <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO2) = pin;
   20038:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
			if (write != NO_WRITE) {
   2003c:	e7ef      	b.n	2001e <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO3) = pin;
   2003e:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
			if (write != NO_WRITE) {
   20042:	e7ec      	b.n	2001e <pinctrl_configure_pins+0x142>
		switch (NRF_GET_FUN(pins[i])) {
   20044:	f06f 0085 	mvn.w	r0, #133	; 0x85
   20048:	e751      	b.n	1feee <pinctrl_configure_pins+0x12>
   2004a:	bf00      	nop
   2004c:	50000300 	.word	0x50000300

00020050 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   20050:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   20052:	794b      	ldrb	r3, [r1, #5]
   20054:	2b01      	cmp	r3, #1
   20056:	d026      	beq.n	200a6 <uarte_nrfx_configure+0x56>
   20058:	2b03      	cmp	r3, #3
   2005a:	d121      	bne.n	200a0 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   2005c:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   2005e:	798b      	ldrb	r3, [r1, #6]
   20060:	2b03      	cmp	r3, #3
   20062:	d11d      	bne.n	200a0 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   20064:	79ce      	ldrb	r6, [r1, #7]
   20066:	b10e      	cbz	r6, 2006c <uarte_nrfx_configure+0x1c>
   20068:	2e01      	cmp	r6, #1
   2006a:	d119      	bne.n	200a0 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   2006c:	790a      	ldrb	r2, [r1, #4]
   2006e:	b112      	cbz	r2, 20076 <uarte_nrfx_configure+0x26>
   20070:	2a02      	cmp	r2, #2
   20072:	d115      	bne.n	200a0 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   20074:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   20076:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   20078:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
   2007a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   2007e:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
   20080:	d067      	beq.n	20152 <uarte_nrfx_configure+0x102>
   20082:	d82d      	bhi.n	200e0 <uarte_nrfx_configure+0x90>
   20084:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   20088:	d066      	beq.n	20158 <uarte_nrfx_configure+0x108>
   2008a:	d816      	bhi.n	200ba <uarte_nrfx_configure+0x6a>
   2008c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   20090:	d064      	beq.n	2015c <uarte_nrfx_configure+0x10c>
   20092:	d80a      	bhi.n	200aa <uarte_nrfx_configure+0x5a>
   20094:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   20098:	d063      	beq.n	20162 <uarte_nrfx_configure+0x112>
   2009a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   2009e:	d063      	beq.n	20168 <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
   200a0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   200a4:	e054      	b.n	20150 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
   200a6:	2500      	movs	r5, #0
   200a8:	e7d9      	b.n	2005e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   200aa:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   200ae:	d05e      	beq.n	2016e <uarte_nrfx_configure+0x11e>
   200b0:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   200b4:	d1f4      	bne.n	200a0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   200b6:	4b38      	ldr	r3, [pc, #224]	; (20198 <uarte_nrfx_configure+0x148>)
   200b8:	e03c      	b.n	20134 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   200ba:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   200be:	d059      	beq.n	20174 <uarte_nrfx_configure+0x124>
   200c0:	d807      	bhi.n	200d2 <uarte_nrfx_configure+0x82>
   200c2:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   200c6:	d057      	beq.n	20178 <uarte_nrfx_configure+0x128>
   200c8:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   200cc:	d1e8      	bne.n	200a0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   200ce:	4b33      	ldr	r3, [pc, #204]	; (2019c <uarte_nrfx_configure+0x14c>)
   200d0:	e030      	b.n	20134 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   200d2:	f647 2412 	movw	r4, #31250	; 0x7a12
   200d6:	42a3      	cmp	r3, r4
   200d8:	d1e2      	bne.n	200a0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   200da:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   200de:	e029      	b.n	20134 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   200e0:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   200e4:	d04a      	beq.n	2017c <uarte_nrfx_configure+0x12c>
   200e6:	d813      	bhi.n	20110 <uarte_nrfx_configure+0xc0>
   200e8:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   200ec:	d049      	beq.n	20182 <uarte_nrfx_configure+0x132>
   200ee:	d809      	bhi.n	20104 <uarte_nrfx_configure+0xb4>
   200f0:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   200f4:	42a3      	cmp	r3, r4
   200f6:	d046      	beq.n	20186 <uarte_nrfx_configure+0x136>
   200f8:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   200fc:	d1d0      	bne.n	200a0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   200fe:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   20102:	e017      	b.n	20134 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   20104:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   20108:	d1ca      	bne.n	200a0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   2010a:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   2010e:	e011      	b.n	20134 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   20110:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   20114:	d03a      	beq.n	2018c <uarte_nrfx_configure+0x13c>
   20116:	d808      	bhi.n	2012a <uarte_nrfx_configure+0xda>
   20118:	4c21      	ldr	r4, [pc, #132]	; (201a0 <uarte_nrfx_configure+0x150>)
   2011a:	42a3      	cmp	r3, r4
   2011c:	d039      	beq.n	20192 <uarte_nrfx_configure+0x142>
   2011e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   20122:	d1bd      	bne.n	200a0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   20124:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   20128:	e004      	b.n	20134 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2012a:	4c1e      	ldr	r4, [pc, #120]	; (201a4 <uarte_nrfx_configure+0x154>)
   2012c:	42a3      	cmp	r3, r4
   2012e:	d1b7      	bne.n	200a0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   20130:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   20134:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   20136:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
   2013a:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
   2013c:	4335      	orrs	r5, r6
   2013e:	681b      	ldr	r3, [r3, #0]
   20140:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   20142:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   20146:	c903      	ldmia	r1, {r0, r1}
   20148:	1d23      	adds	r3, r4, #4
   2014a:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   2014e:	2000      	movs	r0, #0
}
   20150:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   20152:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   20156:	e7ed      	b.n	20134 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   20158:	4b13      	ldr	r3, [pc, #76]	; (201a8 <uarte_nrfx_configure+0x158>)
   2015a:	e7eb      	b.n	20134 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   2015c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   20160:	e7e8      	b.n	20134 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   20162:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   20166:	e7e5      	b.n	20134 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   20168:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   2016c:	e7e2      	b.n	20134 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   2016e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   20172:	e7df      	b.n	20134 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   20174:	4b0d      	ldr	r3, [pc, #52]	; (201ac <uarte_nrfx_configure+0x15c>)
   20176:	e7dd      	b.n	20134 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   20178:	4b0d      	ldr	r3, [pc, #52]	; (201b0 <uarte_nrfx_configure+0x160>)
   2017a:	e7db      	b.n	20134 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   2017c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   20180:	e7d8      	b.n	20134 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   20182:	4b0c      	ldr	r3, [pc, #48]	; (201b4 <uarte_nrfx_configure+0x164>)
   20184:	e7d6      	b.n	20134 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   20186:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   2018a:	e7d3      	b.n	20134 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   2018c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   20190:	e7d0      	b.n	20134 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   20192:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   20196:	e7cd      	b.n	20134 <uarte_nrfx_configure+0xe4>
   20198:	0013b000 	.word	0x0013b000
   2019c:	004ea000 	.word	0x004ea000
   201a0:	0003d090 	.word	0x0003d090
   201a4:	000f4240 	.word	0x000f4240
   201a8:	00275000 	.word	0x00275000
   201ac:	0075c000 	.word	0x0075c000
   201b0:	003af000 	.word	0x003af000
   201b4:	013a9000 	.word	0x013a9000

000201b8 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   201b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   201bc:	2200      	movs	r2, #0
   201be:	b087      	sub	sp, #28
   201c0:	4680      	mov	r8, r0
   201c2:	2101      	movs	r1, #1
   201c4:	2002      	movs	r0, #2
   201c6:	f7f4 fe23 	bl	14e10 <z_arm_irq_priority_set>
   201ca:	2002      	movs	r0, #2
   201cc:	f7f4 fdf0 	bl	14db0 <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
   201d0:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
   201d4:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
   201d8:	683c      	ldr	r4, [r7, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   201da:	2100      	movs	r1, #0
   201dc:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
   201e0:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   201e4:	f8d7 900c 	ldr.w	r9, [r7, #12]
	ret = pinctrl_lookup_state(config, id, &state);
   201e8:	466a      	mov	r2, sp
   201ea:	4648      	mov	r0, r9
   201ec:	f00b fae2 	bl	2b7b4 <pinctrl_lookup_state>
	if (ret < 0) {
   201f0:	1e05      	subs	r5, r0, #0
   201f2:	db25      	blt.n	20240 <uarte_0_init+0x88>
	return pinctrl_apply_state_direct(config, state);
   201f4:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   201f6:	f8d9 2000 	ldr.w	r2, [r9]
   201fa:	7919      	ldrb	r1, [r3, #4]
   201fc:	6818      	ldr	r0, [r3, #0]
   201fe:	f7ff fe6d 	bl	1fedc <pinctrl_configure_pins>
	if (err < 0) {
   20202:	1e05      	subs	r5, r0, #0
   20204:	db1c      	blt.n	20240 <uarte_0_init+0x88>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   20206:	1d31      	adds	r1, r6, #4
   20208:	4640      	mov	r0, r8
   2020a:	f7ff ff21 	bl	20050 <uarte_nrfx_configure>
	if (err) {
   2020e:	4605      	mov	r5, r0
   20210:	b9b0      	cbnz	r0, 20240 <uarte_0_init+0x88>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   20212:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   20214:	0799      	lsls	r1, r3, #30
   20216:	d52b      	bpl.n	20270 <uarte_0_init+0xb8>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   20218:	f106 0018 	add.w	r0, r6, #24
   2021c:	f002 f93c 	bl	22498 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   20220:	4b27      	ldr	r3, [pc, #156]	; (202c0 <uarte_0_init+0x108>)
   20222:	4298      	cmp	r0, r3
   20224:	d010      	beq.n	20248 <uarte_0_init+0x90>
		LOG_ERR("Failed to allocate PPI Channel");
   20226:	4b27      	ldr	r3, [pc, #156]	; (202c4 <uarte_0_init+0x10c>)
   20228:	9305      	str	r3, [sp, #20]
   2022a:	2302      	movs	r3, #2
   2022c:	9304      	str	r3, [sp, #16]
   2022e:	4826      	ldr	r0, [pc, #152]	; (202c8 <uarte_0_init+0x110>)
   20230:	462b      	mov	r3, r5
   20232:	aa04      	add	r2, sp, #16
   20234:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EIO;
   20238:	f06f 0504 	mvn.w	r5, #4
   2023c:	f7f3 fcc2 	bl	13bc4 <z_impl_z_log_msg_static_create>
UART_NRF_UARTE_DEVICE(0);
   20240:	4628      	mov	r0, r5
   20242:	b007      	add	sp, #28
   20244:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   20248:	7e33      	ldrb	r3, [r6, #24]
   2024a:	00db      	lsls	r3, r3, #3
   2024c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   20250:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   20254:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   20258:	f504 7190 	add.w	r1, r4, #288	; 0x120
   2025c:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   20260:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   20264:	7e32      	ldrb	r2, [r6, #24]
   20266:	2301      	movs	r3, #1
   20268:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
   2026a:	4a18      	ldr	r2, [pc, #96]	; (202cc <uarte_0_init+0x114>)
   2026c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   20270:	2308      	movs	r3, #8
   20272:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   20276:	7a3b      	ldrb	r3, [r7, #8]
   20278:	b953      	cbnz	r3, 20290 <uarte_0_init+0xd8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2027a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   2027e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   20282:	6973      	ldr	r3, [r6, #20]
   20284:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   20288:	2301      	movs	r3, #1
   2028a:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2028e:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   20290:	687b      	ldr	r3, [r7, #4]
   20292:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   20294:	bf5c      	itt	pl
   20296:	f44f 7380 	movpl.w	r3, #256	; 0x100
   2029a:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2029e:	687b      	ldr	r3, [r7, #4]
   202a0:	06db      	lsls	r3, r3, #27
   202a2:	bf44      	itt	mi
   202a4:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   202a8:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   202ac:	6933      	ldr	r3, [r6, #16]
   202ae:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   202b2:	2300      	movs	r3, #0
   202b4:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   202b8:	2301      	movs	r3, #1
   202ba:	60a3      	str	r3, [r4, #8]
   202bc:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   202be:	e7bf      	b.n	20240 <uarte_0_init+0x88>
   202c0:	0bad0000 	.word	0x0bad0000
   202c4:	000302ae 	.word	0x000302ae
   202c8:	0002cc0c 	.word	0x0002cc0c
   202cc:	4001f000 	.word	0x4001f000

000202d0 <uarte_nrfx_poll_out>:
{
   202d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   202d2:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   202d4:	6907      	ldr	r7, [r0, #16]
{
   202d6:	460d      	mov	r5, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   202d8:	f00b fd3c 	bl	2bd54 <k_is_in_isr>
   202dc:	b9b0      	cbnz	r0, 2030c <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
   202de:	4b2e      	ldr	r3, [pc, #184]	; (20398 <uarte_nrfx_poll_out+0xc8>)
   202e0:	781b      	ldrb	r3, [r3, #0]
   202e2:	b19b      	cbz	r3, 2030c <uarte_nrfx_poll_out+0x3c>
{
   202e4:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   202e6:	6860      	ldr	r0, [r4, #4]
   202e8:	f00b fa9a 	bl	2b820 <is_tx_ready.isra.0>
   202ec:	bb00      	cbnz	r0, 20330 <uarte_nrfx_poll_out+0x60>
   202ee:	2001      	movs	r0, #1
   202f0:	f00b fbda 	bl	2baa8 <nrfx_busy_wait>
   202f4:	3e01      	subs	r6, #1
   202f6:	d1f6      	bne.n	202e6 <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
   202f8:	2100      	movs	r1, #0
   202fa:	2021      	movs	r0, #33	; 0x21
   202fc:	f003 fd0c 	bl	23d18 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   20300:	e7f0      	b.n	202e4 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
   20302:	f386 8811 	msr	BASEPRI, r6
   20306:	f3bf 8f6f 	isb	sy
}
   2030a:	e7f5      	b.n	202f8 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
   2030c:	f04f 0340 	mov.w	r3, #64	; 0x40
   20310:	f3ef 8611 	mrs	r6, BASEPRI
   20314:	f383 8812 	msr	BASEPRI_MAX, r3
   20318:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   2031c:	6860      	ldr	r0, [r4, #4]
   2031e:	4631      	mov	r1, r6
   20320:	f00b fa7e 	bl	2b820 <is_tx_ready.isra.0>
   20324:	b990      	cbnz	r0, 2034c <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
   20326:	f386 8811 	msr	BASEPRI, r6
   2032a:	f3bf 8f6f 	isb	sy
}
   2032e:	e7ed      	b.n	2030c <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
   20330:	f04f 0340 	mov.w	r3, #64	; 0x40
   20334:	f3ef 8611 	mrs	r6, BASEPRI
   20338:	f383 8812 	msr	BASEPRI_MAX, r3
   2033c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   20340:	6860      	ldr	r0, [r4, #4]
   20342:	4631      	mov	r1, r6
   20344:	f00b fa6c 	bl	2b820 <is_tx_ready.isra.0>
   20348:	2800      	cmp	r0, #0
   2034a:	d0da      	beq.n	20302 <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
   2034c:	693b      	ldr	r3, [r7, #16]
   2034e:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
   20350:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   20352:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
   20354:	6813      	ldr	r3, [r2, #0]
   20356:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2035a:	2001      	movs	r0, #1
   2035c:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20360:	2000      	movs	r0, #0
   20362:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   20366:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
   2036a:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2036e:	6852      	ldr	r2, [r2, #4]
   20370:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
   20374:	06d2      	lsls	r2, r2, #27
   20376:	d508      	bpl.n	2038a <uarte_nrfx_poll_out+0xba>
	return config->uarte_regs;
   20378:	6862      	ldr	r2, [r4, #4]
   2037a:	6812      	ldr	r2, [r2, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2037c:	2008      	movs	r0, #8
   2037e:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   20382:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   20386:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2038a:	2201      	movs	r2, #1
   2038c:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   2038e:	f381 8811 	msr	BASEPRI, r1
   20392:	f3bf 8f6f 	isb	sy
}
   20396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20398:	20004b67 	.word	0x20004b67

0002039c <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   2039c:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   2039e:	2301      	movs	r3, #1
   203a0:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   203a2:	4a0e      	ldr	r2, [pc, #56]	; (203dc <compare_int_lock+0x40>)
   203a4:	f3bf 8f5b 	dmb	ish
   203a8:	43dc      	mvns	r4, r3
   203aa:	e852 1f00 	ldrex	r1, [r2]
   203ae:	ea01 0504 	and.w	r5, r1, r4
   203b2:	e842 5600 	strex	r6, r5, [r2]
   203b6:	2e00      	cmp	r6, #0
   203b8:	d1f7      	bne.n	203aa <compare_int_lock+0xe>
   203ba:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   203be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   203c2:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   203c4:	4806      	ldr	r0, [pc, #24]	; (203e0 <compare_int_lock+0x44>)
   203c6:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   203ca:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   203ce:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   203d2:	420b      	tst	r3, r1
}
   203d4:	bf14      	ite	ne
   203d6:	2001      	movne	r0, #1
   203d8:	2000      	moveq	r0, #0
   203da:	bd70      	pop	{r4, r5, r6, pc}
   203dc:	20003880 	.word	0x20003880
   203e0:	40011000 	.word	0x40011000

000203e4 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   203e4:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   203e6:	490e      	ldr	r1, [pc, #56]	; (20420 <sys_clock_timeout_handler+0x3c>)
   203e8:	e9d1 3400 	ldrd	r3, r4, [r1]
   203ec:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
   203ee:	18c3      	adds	r3, r0, r3
   203f0:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
   203f4:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
   203f8:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   203fc:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   20400:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   20404:	d209      	bcs.n	2041a <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   20406:	4b07      	ldr	r3, [pc, #28]	; (20424 <sys_clock_timeout_handler+0x40>)
   20408:	681b      	ldr	r3, [r3, #0]
   2040a:	0a1a      	lsrs	r2, r3, #8
   2040c:	061b      	lsls	r3, r3, #24
   2040e:	199c      	adds	r4, r3, r6
   20410:	4b05      	ldr	r3, [pc, #20]	; (20428 <sys_clock_timeout_handler+0x44>)
   20412:	f142 0500 	adc.w	r5, r2, #0
   20416:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
   2041a:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
   2041c:	f003 be08 	b.w	24030 <sys_clock_announce>
   20420:	20002320 	.word	0x20002320
   20424:	20003884 	.word	0x20003884
   20428:	20002328 	.word	0x20002328

0002042c <compare_int_unlock>:
	if (key) {
   2042c:	b311      	cbz	r1, 20474 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2042e:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   20432:	2301      	movs	r3, #1
   20434:	4a10      	ldr	r2, [pc, #64]	; (20478 <compare_int_unlock+0x4c>)
   20436:	4083      	lsls	r3, r0
   20438:	e852 cf00 	ldrex	ip, [r2]
   2043c:	ea4c 0c03 	orr.w	ip, ip, r3
   20440:	e842 c100 	strex	r1, ip, [r2]
   20444:	2900      	cmp	r1, #0
   20446:	d1f7      	bne.n	20438 <compare_int_unlock+0xc>
   20448:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   2044c:	4a0b      	ldr	r2, [pc, #44]	; (2047c <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   2044e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   20452:	4083      	lsls	r3, r0
   20454:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20458:	4b09      	ldr	r3, [pc, #36]	; (20480 <compare_int_unlock+0x54>)
   2045a:	f3bf 8f5b 	dmb	ish
   2045e:	681b      	ldr	r3, [r3, #0]
   20460:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   20464:	40c3      	lsrs	r3, r0
   20466:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   20468:	bf42      	ittt	mi
   2046a:	4b06      	ldrmi	r3, [pc, #24]	; (20484 <compare_int_unlock+0x58>)
   2046c:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   20470:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   20474:	4770      	bx	lr
   20476:	bf00      	nop
   20478:	20003880 	.word	0x20003880
   2047c:	40011000 	.word	0x40011000
   20480:	2000387c 	.word	0x2000387c
   20484:	e000e100 	.word	0xe000e100

00020488 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   20488:	4b0d      	ldr	r3, [pc, #52]	; (204c0 <z_nrf_rtc_timer_read+0x38>)
   2048a:	6818      	ldr	r0, [r3, #0]
   2048c:	0a01      	lsrs	r1, r0, #8
   2048e:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   20490:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   20494:	4b0b      	ldr	r3, [pc, #44]	; (204c4 <z_nrf_rtc_timer_read+0x3c>)
   20496:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   2049a:	1818      	adds	r0, r3, r0
   2049c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   204a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   204a4:	d20a      	bcs.n	204bc <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   204a6:	4b08      	ldr	r3, [pc, #32]	; (204c8 <z_nrf_rtc_timer_read+0x40>)
   204a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   204ac:	4290      	cmp	r0, r2
   204ae:	eb71 0303 	sbcs.w	r3, r1, r3
   204b2:	d203      	bcs.n	204bc <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   204b4:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   204b8:	f141 0100 	adc.w	r1, r1, #0
}
   204bc:	4770      	bx	lr
   204be:	bf00      	nop
   204c0:	20003884 	.word	0x20003884
   204c4:	40011000 	.word	0x40011000
   204c8:	20002328 	.word	0x20002328

000204cc <compare_set>:
{
   204cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   204d0:	4616      	mov	r6, r2
   204d2:	461f      	mov	r7, r3
   204d4:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
   204d6:	f7ff ff61 	bl	2039c <compare_int_lock>
   204da:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   204dc:	f7ff ffd4 	bl	20488 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   204e0:	42b0      	cmp	r0, r6
   204e2:	eb71 0307 	sbcs.w	r3, r1, r7
   204e6:	d251      	bcs.n	2058c <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   204e8:	4b3a      	ldr	r3, [pc, #232]	; (205d4 <compare_set+0x108>)
   204ea:	1a30      	subs	r0, r6, r0
   204ec:	eb67 0101 	sbc.w	r1, r7, r1
   204f0:	4298      	cmp	r0, r3
   204f2:	f171 0100 	sbcs.w	r1, r1, #0
   204f6:	d26a      	bcs.n	205ce <compare_set+0x102>
		if (target_time != cc_data[chan].target_time) {
   204f8:	4b37      	ldr	r3, [pc, #220]	; (205d8 <compare_set+0x10c>)
   204fa:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   204fe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   20502:	429f      	cmp	r7, r3
   20504:	bf08      	it	eq
   20506:	4296      	cmpeq	r6, r2
   20508:	d04e      	beq.n	205a8 <compare_set+0xdc>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   2050a:	4934      	ldr	r1, [pc, #208]	; (205dc <compare_set+0x110>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   2050c:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   20510:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   20514:	fa09 f904 	lsl.w	r9, r9, r4
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   20518:	00ad      	lsls	r5, r5, #2
   2051a:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
   2051e:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20520:	b2ad      	uxth	r5, r5
   20522:	f00b f9c7 	bl	2b8b4 <event_clear>
	return absolute_time & COUNTER_MAX;
   20526:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
   2052a:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
   2052e:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   20532:	4a2b      	ldr	r2, [pc, #172]	; (205e0 <compare_set+0x114>)
   20534:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20536:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
   2053a:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   2053c:	f04f 0a03 	mov.w	sl, #3
    p_reg->CC[ch] = cc_val;
   20540:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   20542:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
   20546:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->EVTENSET = mask;
   2054a:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
   2054e:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   20552:	f06f 0002 	mvn.w	r0, #2
   20556:	eba0 0008 	sub.w	r0, r0, r8
   2055a:	4460      	add	r0, ip
   2055c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   20560:	4290      	cmp	r0, r2
   20562:	d921      	bls.n	205a8 <compare_set+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20564:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
   20566:	b160      	cbz	r0, 20582 <compare_set+0xb6>
     return p_reg->COUNTER;
   20568:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   2056c:	eba8 000b 	sub.w	r0, r8, fp
   20570:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   20574:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   20578:	d916      	bls.n	205a8 <compare_set+0xdc>
					event_clear(chan);
   2057a:	4620      	mov	r0, r4
   2057c:	f00b f99a 	bl	2b8b4 <event_clear>
   20580:	4a17      	ldr	r2, [pc, #92]	; (205e0 <compare_set+0x114>)
			cc_val = now + cc_inc;
   20582:	eb0a 0c08 	add.w	ip, sl, r8
			cc_inc++;
   20586:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
   2058a:	e7d9      	b.n	20540 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   2058c:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2058e:	4a15      	ldr	r2, [pc, #84]	; (205e4 <compare_set+0x118>)
   20590:	f3bf 8f5b 	dmb	ish
   20594:	40a3      	lsls	r3, r4
   20596:	e852 0f00 	ldrex	r0, [r2]
   2059a:	4318      	orrs	r0, r3
   2059c:	e842 0100 	strex	r1, r0, [r2]
   205a0:	2900      	cmp	r1, #0
   205a2:	d1f8      	bne.n	20596 <compare_set+0xca>
   205a4:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   205a8:	490b      	ldr	r1, [pc, #44]	; (205d8 <compare_set+0x10c>)
	cc_data[chan].callback = handler;
   205aa:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
   205ac:	0123      	lsls	r3, r4, #4
   205ae:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   205b2:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].callback = handler;
   205b6:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   205b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   205ba:	6053      	str	r3, [r2, #4]
	return ret;
   205bc:	2500      	movs	r5, #0
	compare_int_unlock(chan, key);
   205be:	4620      	mov	r0, r4
   205c0:	9900      	ldr	r1, [sp, #0]
   205c2:	f7ff ff33 	bl	2042c <compare_int_unlock>
}
   205c6:	4628      	mov	r0, r5
   205c8:	b003      	add	sp, #12
   205ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
   205ce:	f06f 0515 	mvn.w	r5, #21
   205d2:	e7f4      	b.n	205be <compare_set+0xf2>
   205d4:	00800001 	.word	0x00800001
   205d8:	20002310 	.word	0x20002310
   205dc:	40011000 	.word	0x40011000
   205e0:	007ffffd 	.word	0x007ffffd
   205e4:	2000387c 	.word	0x2000387c

000205e8 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
   205e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENCLR = mask;
   205ea:	4c1b      	ldr	r4, [pc, #108]	; (20658 <sys_clock_driver_init+0x70>)
   205ec:	4b1b      	ldr	r3, [pc, #108]	; (2065c <sys_clock_driver_init+0x74>)
   205ee:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
   205f2:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   205f6:	4b1a      	ldr	r3, [pc, #104]	; (20660 <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
   205f8:	2500      	movs	r5, #0
   205fa:	f04f 30ff 	mov.w	r0, #4294967295
   205fe:	f04f 31ff 	mov.w	r1, #4294967295
   20602:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   20606:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   2060a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2060e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   20612:	4b14      	ldr	r3, [pc, #80]	; (20664 <sys_clock_driver_init+0x7c>)
   20614:	2602      	movs	r6, #2
   20616:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   2061a:	2101      	movs	r1, #1
   2061c:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   20620:	2011      	movs	r0, #17
   20622:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   20626:	462a      	mov	r2, r5
   20628:	f7f4 fbf2 	bl	14e10 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   2062c:	2011      	movs	r0, #17
   2062e:	f7f4 fbbf 	bl	14db0 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   20632:	4a0d      	ldr	r2, [pc, #52]	; (20668 <sys_clock_driver_init+0x80>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   20634:	2301      	movs	r3, #1
   20636:	60a3      	str	r3, [r4, #8]
   20638:	6023      	str	r3, [r4, #0]
   2063a:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   2063c:	4b0b      	ldr	r3, [pc, #44]	; (2066c <sys_clock_driver_init+0x84>)
   2063e:	4a0c      	ldr	r2, [pc, #48]	; (20670 <sys_clock_driver_init+0x88>)
   20640:	9300      	str	r3, [sp, #0]
   20642:	9501      	str	r5, [sp, #4]
   20644:	2300      	movs	r3, #0
   20646:	4628      	mov	r0, r5
   20648:	f7ff ff40 	bl	204cc <compare_set>

	z_nrf_clock_control_lf_on(mode);
   2064c:	4630      	mov	r0, r6
   2064e:	f7fe fb55 	bl	1ecfc <z_nrf_clock_control_lf_on>

	return 0;
}
   20652:	4628      	mov	r0, r5
   20654:	b002      	add	sp, #8
   20656:	bd70      	pop	{r4, r5, r6, pc}
   20658:	40011000 	.word	0x40011000
   2065c:	000f0003 	.word	0x000f0003
   20660:	20002310 	.word	0x20002310
   20664:	e000e100 	.word	0xe000e100
   20668:	20003880 	.word	0x20003880
   2066c:	000203e5 	.word	0x000203e5
   20670:	007fffff 	.word	0x007fffff

00020674 <rtc_nrf_isr>:
{
   20674:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   20678:	4c2b      	ldr	r4, [pc, #172]	; (20728 <rtc_nrf_isr+0xb4>)
   2067a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   2067e:	0799      	lsls	r1, r3, #30
   20680:	d50b      	bpl.n	2069a <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20682:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   20686:	b143      	cbz	r3, 2069a <rtc_nrf_isr+0x26>
		overflow_cnt++;
   20688:	4a28      	ldr	r2, [pc, #160]	; (2072c <rtc_nrf_isr+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2068a:	2300      	movs	r3, #0
   2068c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   20690:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   20694:	6813      	ldr	r3, [r2, #0]
   20696:	3301      	adds	r3, #1
   20698:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   2069a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   2069e:	03da      	lsls	r2, r3, #15
   206a0:	d523      	bpl.n	206ea <rtc_nrf_isr+0x76>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   206a2:	f3bf 8f5b 	dmb	ish
   206a6:	4b22      	ldr	r3, [pc, #136]	; (20730 <rtc_nrf_isr+0xbc>)
   206a8:	e853 2f00 	ldrex	r2, [r3]
   206ac:	f022 0101 	bic.w	r1, r2, #1
   206b0:	e843 1000 	strex	r0, r1, [r3]
   206b4:	2800      	cmp	r0, #0
   206b6:	d1f7      	bne.n	206a8 <rtc_nrf_isr+0x34>
   206b8:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   206bc:	07d3      	lsls	r3, r2, #31
   206be:	d402      	bmi.n	206c6 <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   206c0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   206c4:	b18b      	cbz	r3, 206ea <rtc_nrf_isr+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   206c6:	2500      	movs	r5, #0
   206c8:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   206cc:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
   206d0:	f7ff feda 	bl	20488 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   206d4:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   206d8:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   206da:	4b16      	ldr	r3, [pc, #88]	; (20734 <rtc_nrf_isr+0xc0>)
   206dc:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   206e0:	42b0      	cmp	r0, r6
   206e2:	41b9      	sbcs	r1, r7
   206e4:	d204      	bcs.n	206f0 <rtc_nrf_isr+0x7c>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   206e6:	f382 8810 	msr	PRIMASK, r2
}
   206ea:	b003      	add	sp, #12
   206ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   206f0:	f04f 38ff 	mov.w	r8, #4294967295
   206f4:	f04f 39ff 	mov.w	r9, #4294967295
   206f8:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
   206fc:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
   20700:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
   20702:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   20706:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2070a:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   2070e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   20712:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   20716:	2900      	cmp	r1, #0
   20718:	d0e7      	beq.n	206ea <rtc_nrf_isr+0x76>
			handler(chan, expire_time, user_context);
   2071a:	9000      	str	r0, [sp, #0]
   2071c:	4632      	mov	r2, r6
   2071e:	463b      	mov	r3, r7
   20720:	4628      	mov	r0, r5
   20722:	4788      	blx	r1
   20724:	e7e1      	b.n	206ea <rtc_nrf_isr+0x76>
   20726:	bf00      	nop
   20728:	40011000 	.word	0x40011000
   2072c:	20003884 	.word	0x20003884
   20730:	2000387c 	.word	0x2000387c
   20734:	20002310 	.word	0x20002310

00020738 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
   20738:	1c43      	adds	r3, r0, #1
{
   2073a:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
   2073c:	d022      	beq.n	20784 <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   2073e:	2801      	cmp	r0, #1
   20740:	dd22      	ble.n	20788 <sys_clock_set_timeout+0x50>
   20742:	4a12      	ldr	r2, [pc, #72]	; (2078c <sys_clock_set_timeout+0x54>)
   20744:	4b12      	ldr	r3, [pc, #72]	; (20790 <sys_clock_set_timeout+0x58>)
   20746:	4290      	cmp	r0, r2
   20748:	bfd4      	ite	le
   2074a:	4604      	movle	r4, r0
   2074c:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   2074e:	f7ff fe9b 	bl	20488 <z_nrf_rtc_timer_read>
   20752:	4b10      	ldr	r3, [pc, #64]	; (20794 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
   20754:	490e      	ldr	r1, [pc, #56]	; (20790 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   20756:	e9d3 2300 	ldrd	r2, r3, [r3]
   2075a:	1a80      	subs	r0, r0, r2
		cyc = 0;
   2075c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   20760:	bf28      	it	cs
   20762:	2400      	movcs	r4, #0
	cyc += unannounced;
   20764:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   20766:	428c      	cmp	r4, r1
   20768:	bf28      	it	cs
   2076a:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
   2076c:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   2076e:	490a      	ldr	r1, [pc, #40]	; (20798 <sys_clock_set_timeout+0x60>)
   20770:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
   20772:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   20776:	9001      	str	r0, [sp, #4]
   20778:	f143 0300 	adc.w	r3, r3, #0
   2077c:	f7ff fea6 	bl	204cc <compare_set>
}
   20780:	b002      	add	sp, #8
   20782:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
   20784:	4c02      	ldr	r4, [pc, #8]	; (20790 <sys_clock_set_timeout+0x58>)
   20786:	e7e2      	b.n	2074e <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   20788:	2401      	movs	r4, #1
   2078a:	e7e0      	b.n	2074e <sys_clock_set_timeout+0x16>
   2078c:	007ffffe 	.word	0x007ffffe
   20790:	007fffff 	.word	0x007fffff
   20794:	20002320 	.word	0x20002320
   20798:	000203e5 	.word	0x000203e5

0002079c <sys_clock_elapsed>:
{
   2079c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   2079e:	f7ff fe73 	bl	20488 <z_nrf_rtc_timer_read>
   207a2:	4b02      	ldr	r3, [pc, #8]	; (207ac <sys_clock_elapsed+0x10>)
   207a4:	681b      	ldr	r3, [r3, #0]
}
   207a6:	1ac0      	subs	r0, r0, r3
   207a8:	bd08      	pop	{r3, pc}
   207aa:	bf00      	nop
   207ac:	20002320 	.word	0x20002320

000207b0 <sys_clock_disable>:
{
   207b0:	b510      	push	{r4, lr}
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   207b2:	4c08      	ldr	r4, [pc, #32]	; (207d4 <sys_clock_disable+0x24>)
   207b4:	2301      	movs	r3, #1
   207b6:	6063      	str	r3, [r4, #4]
	irq_disable(RTC_IRQn);
   207b8:	2011      	movs	r0, #17
   207ba:	f7f4 fb07 	bl	14dcc <arch_irq_disable>
    p_reg->INTENCLR = mask;
   207be:	4b06      	ldr	r3, [pc, #24]	; (207d8 <sys_clock_disable+0x28>)
   207c0:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
   207c4:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
   207c8:	4b04      	ldr	r3, [pc, #16]	; (207dc <sys_clock_disable+0x2c>)
   207ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   207ce:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   207d2:	bd10      	pop	{r4, pc}
   207d4:	40011000 	.word	0x40011000
   207d8:	000f0003 	.word	0x000f0003
   207dc:	e000e100 	.word	0xe000e100

000207e0 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   207e0:	4602      	mov	r2, r0
   207e2:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   207e4:	4801      	ldr	r0, [pc, #4]	; (207ec <multithreading_lock_acquire+0xc>)
   207e6:	f002 bcab 	b.w	23140 <z_impl_k_mutex_lock>
   207ea:	bf00      	nop
   207ec:	20000a78 	.word	0x20000a78

000207f0 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   207f0:	4801      	ldr	r0, [pc, #4]	; (207f8 <multithreading_lock_release+0x8>)
   207f2:	f002 bd1f 	b.w	23234 <z_impl_k_mutex_unlock>
   207f6:	bf00      	nop
   207f8:	20000a78 	.word	0x20000a78

000207fc <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   207fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
   207fe:	f7f3 f901 	bl	13a04 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   20802:	4b07      	ldr	r3, [pc, #28]	; (20820 <k_sys_fatal_error_handler+0x24>)
   20804:	9305      	str	r3, [sp, #20]
   20806:	2302      	movs	r3, #2
   20808:	9304      	str	r3, [sp, #16]
   2080a:	4806      	ldr	r0, [pc, #24]	; (20824 <k_sys_fatal_error_handler+0x28>)
   2080c:	2300      	movs	r3, #0
   2080e:	aa04      	add	r2, sp, #16
   20810:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   20814:	f7f3 f9d6 	bl	13bc4 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   20818:	2000      	movs	r0, #0
   2081a:	f7f5 f8c1 	bl	159a0 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   2081e:	bf00      	nop
   20820:	000302ff 	.word	0x000302ff
   20824:	0002cb8c 	.word	0x0002cb8c

00020828 <sdc_assertion_handler>:
	bt_ctlr_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_BT_CTLR_ASSERT_HANDLER) */
void sdc_assertion_handler(const char *const file, const uint32_t line)
{
   20828:	b598      	push	{r3, r4, r7, lr}
   2082a:	af00      	add	r7, sp, #0
	LOG_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   2082c:	466c      	mov	r4, sp
   2082e:	b08a      	sub	sp, #40	; 0x28
   20830:	466a      	mov	r2, sp
   20832:	4b0c      	ldr	r3, [pc, #48]	; (20864 <sdc_assertion_handler+0x3c>)
   20834:	61d1      	str	r1, [r2, #28]
   20836:	e9c2 3005 	strd	r3, r0, [r2, #20]
   2083a:	f44f 7300 	mov.w	r3, #512	; 0x200
   2083e:	8413      	strh	r3, [r2, #32]
   20840:	4b09      	ldr	r3, [pc, #36]	; (20868 <sdc_assertion_handler+0x40>)
   20842:	f842 3f10 	str.w	r3, [r2, #16]!
   20846:	4809      	ldr	r0, [pc, #36]	; (2086c <sdc_assertion_handler+0x44>)
   20848:	2300      	movs	r3, #0
   2084a:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   2084e:	f7f3 f9b9 	bl	13bc4 <z_impl_z_log_msg_static_create>
   20852:	46a5      	mov	sp, r4
	k_oops();
   20854:	4040      	eors	r0, r0
   20856:	f380 8811 	msr	BASEPRI, r0
   2085a:	f04f 0003 	mov.w	r0, #3
   2085e:	df02      	svc	2
}
   20860:	46bd      	mov	sp, r7
   20862:	bd98      	pop	{r3, r4, r7, pc}
   20864:	0003031c 	.word	0x0003031c
   20868:	01000004 	.word	0x01000004
   2086c:	0002cb5c 	.word	0x0002cb5c

00020870 <rand_prio_low_vector_get>:
}

static const struct device *entropy_source = DEVICE_DT_GET(DT_NODELABEL(rng));

static uint8_t rand_prio_low_vector_get(uint8_t *p_buff, uint8_t length)
{
   20870:	b538      	push	{r3, r4, r5, lr}
   20872:	4604      	mov	r4, r0
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   20874:	4807      	ldr	r0, [pc, #28]	; (20894 <rand_prio_low_vector_get+0x24>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   20876:	6883      	ldr	r3, [r0, #8]
   20878:	685d      	ldr	r5, [r3, #4]
   2087a:	460a      	mov	r2, r1
   2087c:	b135      	cbz	r5, 2088c <rand_prio_low_vector_get+0x1c>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   2087e:	2300      	movs	r3, #0
   20880:	4621      	mov	r1, r4
   20882:	47a8      	blx	r5
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);

	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
	return ret >= 0 ? ret : 0;
   20884:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   20888:	b2c0      	uxtb	r0, r0
   2088a:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   2088c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   20890:	e7f8      	b.n	20884 <rand_prio_low_vector_get+0x14>
   20892:	bf00      	nop
   20894:	0002c824 	.word	0x0002c824

00020898 <receive_signal_raise>:
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   20898:	4901      	ldr	r1, [pc, #4]	; (208a0 <receive_signal_raise+0x8>)
   2089a:	4802      	ldr	r0, [pc, #8]	; (208a4 <receive_signal_raise+0xc>)
   2089c:	f00b bbc4 	b.w	2c028 <k_work_submit_to_queue>
   208a0:	20003888 	.word	0x20003888
   208a4:	20002bb0 	.word	0x20002bb0

000208a8 <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   208a8:	b410      	push	{r4}
   208aa:	4603      	mov	r3, r0
   208ac:	460a      	mov	r2, r1
	return api->get_entropy(dev, buffer, length);
   208ae:	4803      	ldr	r0, [pc, #12]	; (208bc <rand_prio_low_vector_get_blocking+0x14>)
   208b0:	6881      	ldr	r1, [r0, #8]
   208b2:	680c      	ldr	r4, [r1, #0]
   208b4:	4619      	mov	r1, r3
   208b6:	4623      	mov	r3, r4
	int err = entropy_get_entropy(entropy_source, p_buff, length);

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
   208b8:	bc10      	pop	{r4}
   208ba:	4718      	bx	r3
   208bc:	0002c824 	.word	0x0002c824

000208c0 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(void)
{
   208c0:	b5b0      	push	{r4, r5, r7, lr}
   208c2:	b082      	sub	sp, #8
	int err = 0;

	bt_hci_driver_register(&drv);
   208c4:	4839      	ldr	r0, [pc, #228]	; (209ac <hci_driver_init+0xec>)
{
   208c6:	af00      	add	r7, sp, #0
	bt_hci_driver_register(&drv);
   208c8:	f7f6 fdf0 	bl	174ac <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   208cc:	4838      	ldr	r0, [pc, #224]	; (209b0 <hci_driver_init+0xf0>)
   208ce:	f7e0 f829 	bl	924 <sdc_init>
		err = sdc_support_adv();
   208d2:	f7e0 f8a1 	bl	a18 <sdc_support_adv>
		if (err) {
   208d6:	b120      	cbz	r0, 208e2 <hci_driver_init+0x22>
			return -ENOTSUP;
   208d8:	f06f 0085 	mvn.w	r0, #133	; 0x85
	if (err) {
		return err;
	}

	return err;
}
   208dc:	3708      	adds	r7, #8
   208de:	46bd      	mov	sp, r7
   208e0:	bdb0      	pop	{r4, r5, r7, pc}
		err = sdc_support_peripheral();
   208e2:	f7e0 f8c9 	bl	a78 <sdc_support_peripheral>
		if (err) {
   208e6:	2800      	cmp	r0, #0
   208e8:	d1f6      	bne.n	208d8 <hci_driver_init+0x18>
			err = sdc_support_dle_peripheral();
   208ea:	f7e0 f8a5 	bl	a38 <sdc_support_dle_peripheral>
			if (err) {
   208ee:	2800      	cmp	r0, #0
   208f0:	d1f2      	bne.n	208d8 <hci_driver_init+0x18>
		err = sdc_support_le_2m_phy();
   208f2:	f7e0 f8b1 	bl	a58 <sdc_support_le_2m_phy>
		if (err) {
   208f6:	2800      	cmp	r0, #0
   208f8:	d1ee      	bne.n	208d8 <hci_driver_init+0x18>
			err = sdc_support_phy_update_peripheral();
   208fa:	f7e0 f8cd 	bl	a98 <sdc_support_phy_update_peripheral>
			if (err) {
   208fe:	4604      	mov	r4, r0
   20900:	2800      	cmp	r0, #0
   20902:	d1e9      	bne.n	208d8 <hci_driver_init+0x18>
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   20904:	2501      	movs	r5, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   20906:	1d3a      	adds	r2, r7, #4
   20908:	2102      	movs	r1, #2
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   2090a:	713d      	strb	r5, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2090c:	f7df ff80 	bl	810 <sdc_cfg_set>
	if (required_memory < 0) {
   20910:	2800      	cmp	r0, #0
   20912:	dbe3      	blt.n	208dc <hci_driver_init+0x1c>
	cfg.fal_size = CONFIG_BT_CTLR_FAL_SIZE;
   20914:	2108      	movs	r1, #8
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   20916:	1d3a      	adds	r2, r7, #4
   20918:	4620      	mov	r0, r4
	cfg.fal_size = CONFIG_BT_CTLR_FAL_SIZE;
   2091a:	80b9      	strh	r1, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2091c:	f7df ff78 	bl	810 <sdc_cfg_set>
	if (required_memory < 0) {
   20920:	2800      	cmp	r0, #0
   20922:	dbdb      	blt.n	208dc <hci_driver_init+0x1c>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   20924:	4b23      	ldr	r3, [pc, #140]	; (209b4 <hci_driver_init+0xf4>)
   20926:	607b      	str	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   20928:	1d3a      	adds	r2, r7, #4
   2092a:	2103      	movs	r1, #3
   2092c:	4620      	mov	r0, r4
   2092e:	f7df ff6f 	bl	810 <sdc_cfg_set>
	if (required_memory < 0) {
   20932:	2800      	cmp	r0, #0
   20934:	dbd2      	blt.n	208dc <hci_driver_init+0x1c>
	cfg.event_length.event_length_us =
   20936:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2093a:	1d3a      	adds	r2, r7, #4
   2093c:	2104      	movs	r1, #4
   2093e:	4620      	mov	r0, r4
	cfg.event_length.event_length_us =
   20940:	607b      	str	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   20942:	f7df ff65 	bl	810 <sdc_cfg_set>
	if (required_memory < 0) {
   20946:	2800      	cmp	r0, #0
   20948:	dbc8      	blt.n	208dc <hci_driver_init+0x1c>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2094a:	1d3a      	adds	r2, r7, #4
   2094c:	2105      	movs	r1, #5
   2094e:	4620      	mov	r0, r4
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   20950:	713d      	strb	r5, [r7, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   20952:	f7df ff5d 	bl	810 <sdc_cfg_set>
	if (required_memory < 0) {
   20956:	2800      	cmp	r0, #0
   20958:	dbc0      	blt.n	208dc <hci_driver_init+0x1c>
	cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   2095a:	231f      	movs	r3, #31
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2095c:	1d3a      	adds	r2, r7, #4
   2095e:	2107      	movs	r1, #7
   20960:	2000      	movs	r0, #0
	cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   20962:	80bb      	strh	r3, [r7, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   20964:	f7df ff54 	bl	810 <sdc_cfg_set>
	if (required_memory < 0) {
   20968:	2800      	cmp	r0, #0
   2096a:	dbb7      	blt.n	208dc <hci_driver_init+0x1c>
	if (required_memory > sizeof(sdc_mempool)) {
   2096c:	f240 73fa 	movw	r3, #2042	; 0x7fa
   20970:	4298      	cmp	r0, r3
   20972:	dd19      	ble.n	209a8 <hci_driver_init+0xe8>
		LOG_ERR("Allocated memory too low: %u < %u",
   20974:	466c      	mov	r4, sp
   20976:	b088      	sub	sp, #32
   20978:	466a      	mov	r2, sp
   2097a:	490f      	ldr	r1, [pc, #60]	; (209b8 <hci_driver_init+0xf8>)
   2097c:	61d0      	str	r0, [r2, #28]
   2097e:	e9c2 1305 	strd	r1, r3, [r2, #20]
   20982:	2304      	movs	r3, #4
   20984:	f842 3f10 	str.w	r3, [r2, #16]!
   20988:	480c      	ldr	r0, [pc, #48]	; (209bc <hci_driver_init+0xfc>)
   2098a:	2300      	movs	r3, #0
   2098c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   20990:	f7f3 f918 	bl	13bc4 <z_impl_z_log_msg_static_create>
   20994:	46a5      	mov	sp, r4
		k_panic();
   20996:	4040      	eors	r0, r0
   20998:	f380 8811 	msr	BASEPRI, r0
   2099c:	f04f 0004 	mov.w	r0, #4
   209a0:	df02      	svc	2
		return -ENOMEM;
   209a2:	f06f 000b 	mvn.w	r0, #11
   209a6:	e799      	b.n	208dc <hci_driver_init+0x1c>
	return 0;
   209a8:	2000      	movs	r0, #0
	if (err) {
   209aa:	e797      	b.n	208dc <hci_driver_init+0x1c>
   209ac:	0002d4e4 	.word	0x0002d4e4
   209b0:	00020829 	.word	0x00020829
   209b4:	02031b1b 	.word	0x02031b1b
   209b8:	00030341 	.word	0x00030341
   209bc:	0002cb5c 	.word	0x0002cb5c

000209c0 <hci_driver_open>:
{
   209c0:	b590      	push	{r4, r7, lr}
   209c2:	b08d      	sub	sp, #52	; 0x34
	k_work_init(&receive_work, receive_work_handler);
   209c4:	492f      	ldr	r1, [pc, #188]	; (20a84 <hci_driver_open+0xc4>)
   209c6:	4830      	ldr	r0, [pc, #192]	; (20a88 <hci_driver_open+0xc8>)
{
   209c8:	af00      	add	r7, sp, #0
	k_work_init(&receive_work, receive_work_handler);
   209ca:	f00b fb00 	bl	2bfce <k_work_init>
		hci_ecdh_init();
   209ce:	f000 fe77 	bl	216c0 <hci_ecdh_init>
	sdc_build_revision_get(build_revision);
   209d2:	1d38      	adds	r0, r7, #4
   209d4:	f7df ff0e 	bl	7f4 <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   209d8:	466c      	mov	r4, sp
   209da:	b088      	sub	sp, #32
   209dc:	466a      	mov	r2, sp
   209de:	4b2b      	ldr	r3, [pc, #172]	; (20a8c <hci_driver_open+0xcc>)
   209e0:	6153      	str	r3, [r2, #20]
   209e2:	4b2b      	ldr	r3, [pc, #172]	; (20a90 <hci_driver_open+0xd0>)
   209e4:	6193      	str	r3, [r2, #24]
   209e6:	f44f 7300 	mov.w	r3, #512	; 0x200
   209ea:	8393      	strh	r3, [r2, #28]
   209ec:	4b29      	ldr	r3, [pc, #164]	; (20a94 <hci_driver_open+0xd4>)
   209ee:	f842 3f10 	str.w	r3, [r2, #16]!
   209f2:	4929      	ldr	r1, [pc, #164]	; (20a98 <hci_driver_open+0xd8>)
   209f4:	4829      	ldr	r0, [pc, #164]	; (20a9c <hci_driver_open+0xdc>)
   209f6:	1d3b      	adds	r3, r7, #4
   209f8:	f7f3 f8e4 	bl	13bc4 <z_impl_z_log_msg_static_create>
   209fc:	46a5      	mov	sp, r4
   209fe:	4828      	ldr	r0, [pc, #160]	; (20aa0 <hci_driver_open+0xe0>)
   20a00:	f00b f8da 	bl	2bbb8 <z_device_is_ready>
	if (!device_is_ready(entropy_source)) {
   20a04:	4603      	mov	r3, r0
   20a06:	b980      	cbnz	r0, 20a2a <hci_driver_open+0x6a>
		LOG_ERR("Entropy source device not ready");
   20a08:	4a26      	ldr	r2, [pc, #152]	; (20aa4 <hci_driver_open+0xe4>)
   20a0a:	62fa      	str	r2, [r7, #44]	; 0x2c
   20a0c:	2202      	movs	r2, #2
   20a0e:	62ba      	str	r2, [r7, #40]	; 0x28
   20a10:	4822      	ldr	r0, [pc, #136]	; (20a9c <hci_driver_open+0xdc>)
   20a12:	f107 0228 	add.w	r2, r7, #40	; 0x28
   20a16:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
   20a1a:	f06f 0412 	mvn.w	r4, #18
   20a1e:	f7f3 f8d1 	bl	13bc4 <z_impl_z_log_msg_static_create>
}
   20a22:	4620      	mov	r0, r4
   20a24:	3734      	adds	r7, #52	; 0x34
   20a26:	46bd      	mov	sp, r7
   20a28:	bd90      	pop	{r4, r7, pc}
	sdc_rand_source_t rand_functions = {
   20a2a:	4a1f      	ldr	r2, [pc, #124]	; (20aa8 <hci_driver_open+0xe8>)
   20a2c:	ca07      	ldmia	r2, {r0, r1, r2}
   20a2e:	f107 0318 	add.w	r3, r7, #24
   20a32:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   20a36:	4618      	mov	r0, r3
   20a38:	f7e0 f886 	bl	b48 <sdc_rand_source_register>
	if (err) {
   20a3c:	b188      	cbz	r0, 20a62 <hci_driver_open+0xa2>
		LOG_ERR("Failed to register rand source (%d)", err);
   20a3e:	b088      	sub	sp, #32
   20a40:	466a      	mov	r2, sp
   20a42:	4b1a      	ldr	r3, [pc, #104]	; (20aac <hci_driver_open+0xec>)
   20a44:	e9c2 3005 	strd	r3, r0, [r2, #20]
   20a48:	2303      	movs	r3, #3
   20a4a:	f842 3f10 	str.w	r3, [r2, #16]!
   20a4e:	4813      	ldr	r0, [pc, #76]	; (20a9c <hci_driver_open+0xdc>)
   20a50:	2300      	movs	r3, #0
   20a52:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   20a56:	f7f3 f8b5 	bl	13bc4 <z_impl_z_log_msg_static_create>
   20a5a:	46a5      	mov	sp, r4
		return -EINVAL;
   20a5c:	f06f 0415 	mvn.w	r4, #21
   20a60:	e7df      	b.n	20a22 <hci_driver_open+0x62>
	err = MULTITHREADING_LOCK_ACQUIRE();
   20a62:	f04f 30ff 	mov.w	r0, #4294967295
   20a66:	f04f 31ff 	mov.w	r1, #4294967295
   20a6a:	f7ff feb9 	bl	207e0 <multithreading_lock_acquire>
	if (err) {
   20a6e:	4604      	mov	r4, r0
   20a70:	2800      	cmp	r0, #0
   20a72:	d1d6      	bne.n	20a22 <hci_driver_open+0x62>
	err = sdc_enable(receive_signal_raise, sdc_mempool);
   20a74:	490e      	ldr	r1, [pc, #56]	; (20ab0 <hci_driver_open+0xf0>)
   20a76:	480f      	ldr	r0, [pc, #60]	; (20ab4 <hci_driver_open+0xf4>)
   20a78:	f7df ff2a 	bl	8d0 <sdc_enable>
	if (err) {
   20a7c:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   20a7e:	f7ff feb7 	bl	207f0 <multithreading_lock_release>
	return 0;
   20a82:	e7ce      	b.n	20a22 <hci_driver_open+0x62>
   20a84:	0002b969 	.word	0x0002b969
   20a88:	20003888 	.word	0x20003888
   20a8c:	0002ea21 	.word	0x0002ea21
   20a90:	00030363 	.word	0x00030363
   20a94:	01000003 	.word	0x01000003
   20a98:	01401cc0 	.word	0x01401cc0
   20a9c:	0002cb5c 	.word	0x0002cb5c
   20aa0:	0002c824 	.word	0x0002c824
   20aa4:	0003038a 	.word	0x0003038a
   20aa8:	0002cd3c 	.word	0x0002cd3c
   20aac:	000303aa 	.word	0x000303aa
   20ab0:	20002330 	.word	0x20002330
   20ab4:	00020899 	.word	0x00020899

00020ab8 <hci_driver_receive_process>:
{
   20ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
   20aba:	b089      	sub	sp, #36	; 0x24
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   20abc:	f04f 30ff 	mov.w	r0, #4294967295
{
   20ac0:	af00      	add	r7, sp, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   20ac2:	f04f 31ff 	mov.w	r1, #4294967295
   20ac6:	f7ff fe8b 	bl	207e0 <multithreading_lock_acquire>
	if (!errcode) {
   20aca:	bb40      	cbnz	r0, 20b1e <hci_driver_receive_process+0x66>
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   20acc:	4d33      	ldr	r5, [pc, #204]	; (20b9c <hci_driver_receive_process+0xe4>)
   20ace:	1df9      	adds	r1, r7, #7
   20ad0:	4628      	mov	r0, r5
   20ad2:	f000 fcc3 	bl	2145c <hci_internal_msg_get>
   20ad6:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   20ad8:	f7ff fe8a 	bl	207f0 <multithreading_lock_release>
	if (errcode) {
   20adc:	b9fc      	cbnz	r4, 20b1e <hci_driver_receive_process+0x66>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   20ade:	79fe      	ldrb	r6, [r7, #7]
   20ae0:	2e04      	cmp	r6, #4
   20ae2:	d133      	bne.n	20b4c <hci_driver_receive_process+0x94>
	switch (hdr->evt) {
   20ae4:	7828      	ldrb	r0, [r5, #0]
   20ae6:	283e      	cmp	r0, #62	; 0x3e
   20ae8:	d01c      	beq.n	20b24 <hci_driver_receive_process+0x6c>
   20aea:	28ff      	cmp	r0, #255	; 0xff
   20aec:	d021      	beq.n	20b32 <hci_driver_receive_process+0x7a>
		switch (subevent) {
   20aee:	f04f 32ff 	mov.w	r2, #4294967295
   20af2:	f04f 33ff 	mov.w	r3, #4294967295
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   20af6:	4621      	mov	r1, r4
   20af8:	f7f5 f9de 	bl	15eb8 <bt_buf_get_evt>
	if (!evt_buf) {
   20afc:	4606      	mov	r6, r0
   20afe:	b9d8      	cbnz	r0, 20b38 <hci_driver_receive_process+0x80>
		if (discardable) {
   20b00:	b95c      	cbnz	r4, 20b1a <hci_driver_receive_process+0x62>
		LOG_ERR("No event buffer available");
   20b02:	4b27      	ldr	r3, [pc, #156]	; (20ba0 <hci_driver_receive_process+0xe8>)
   20b04:	61fb      	str	r3, [r7, #28]
   20b06:	2302      	movs	r3, #2
   20b08:	61bb      	str	r3, [r7, #24]
   20b0a:	4826      	ldr	r0, [pc, #152]	; (20ba4 <hci_driver_receive_process+0xec>)
   20b0c:	4623      	mov	r3, r4
   20b0e:	f107 0218 	add.w	r2, r7, #24
   20b12:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   20b16:	f7f3 f855 	bl	13bc4 <z_impl_z_log_msg_static_create>
		receive_signal_raise();
   20b1a:	f7ff febd 	bl	20898 <receive_signal_raise>
}
   20b1e:	3724      	adds	r7, #36	; 0x24
   20b20:	46bd      	mov	sp, r7
   20b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (me->subevent) {
   20b24:	78ab      	ldrb	r3, [r5, #2]
   20b26:	2b02      	cmp	r3, #2
		switch (subevent) {
   20b28:	d1e1      	bne.n	20aee <hci_driver_receive_process+0x36>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   20b2a:	2200      	movs	r2, #0
   20b2c:	2300      	movs	r3, #0
			return true;
   20b2e:	2401      	movs	r4, #1
   20b30:	e7e1      	b.n	20af6 <hci_driver_receive_process+0x3e>
		switch (subevent) {
   20b32:	78ab      	ldrb	r3, [r5, #2]
   20b34:	2b80      	cmp	r3, #128	; 0x80
   20b36:	e7f7      	b.n	20b28 <hci_driver_receive_process+0x70>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   20b38:	786a      	ldrb	r2, [r5, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   20b3a:	4918      	ldr	r1, [pc, #96]	; (20b9c <hci_driver_receive_process+0xe4>)
   20b3c:	3202      	adds	r2, #2
   20b3e:	300c      	adds	r0, #12
   20b40:	f00a fc0a 	bl	2b358 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   20b44:	4630      	mov	r0, r6
	bt_recv(data_buf);
   20b46:	f7f6 fc7d 	bl	17444 <bt_recv>
   20b4a:	e7e6      	b.n	20b1a <hci_driver_receive_process+0x62>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   20b4c:	2e02      	cmp	r6, #2
   20b4e:	d114      	bne.n	20b7a <hci_driver_receive_process+0xc2>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   20b50:	f04f 32ff 	mov.w	r2, #4294967295
   20b54:	f04f 33ff 	mov.w	r3, #4294967295
   20b58:	2003      	movs	r0, #3
   20b5a:	f7f5 f97d 	bl	15e58 <bt_buf_get_rx>
	if (!data_buf) {
   20b5e:	4604      	mov	r4, r0
   20b60:	b918      	cbnz	r0, 20b6a <hci_driver_receive_process+0xb2>
		LOG_ERR("No data buffer available");
   20b62:	4b11      	ldr	r3, [pc, #68]	; (20ba8 <hci_driver_receive_process+0xf0>)
   20b64:	e9c7 6306 	strd	r6, r3, [r7, #24]
   20b68:	e7cf      	b.n	20b0a <hci_driver_receive_process+0x52>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   20b6a:	886a      	ldrh	r2, [r5, #2]
   20b6c:	4629      	mov	r1, r5
   20b6e:	3204      	adds	r2, #4
   20b70:	300c      	adds	r0, #12
   20b72:	f00a fbf1 	bl	2b358 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   20b76:	4620      	mov	r0, r4
   20b78:	e7e5      	b.n	20b46 <hci_driver_receive_process+0x8e>
		LOG_ERR("Unexpected msg_type: %u. This if-else needs a new branch", msg_type);
   20b7a:	466d      	mov	r5, sp
   20b7c:	b088      	sub	sp, #32
   20b7e:	466a      	mov	r2, sp
   20b80:	4b0a      	ldr	r3, [pc, #40]	; (20bac <hci_driver_receive_process+0xf4>)
   20b82:	e9c2 3605 	strd	r3, r6, [r2, #20]
   20b86:	2303      	movs	r3, #3
   20b88:	f842 3f10 	str.w	r3, [r2, #16]!
   20b8c:	4805      	ldr	r0, [pc, #20]	; (20ba4 <hci_driver_receive_process+0xec>)
   20b8e:	4623      	mov	r3, r4
   20b90:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   20b94:	f7f3 f816 	bl	13bc4 <z_impl_z_log_msg_static_create>
   20b98:	46ad      	mov	sp, r5
   20b9a:	e7be      	b.n	20b1a <hci_driver_receive_process+0x62>
   20b9c:	20004667 	.word	0x20004667
   20ba0:	000303ce 	.word	0x000303ce
   20ba4:	0002cb5c 	.word	0x0002cb5c
   20ba8:	000303e8 	.word	0x000303e8
   20bac:	00030401 	.word	0x00030401

00020bb0 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   20bb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   20bb2:	4cca      	ldr	r4, [pc, #808]	; (20edc <hci_internal_cmd_put+0x32c>)
   20bb4:	8806      	ldrh	r6, [r0, #0]
   20bb6:	7823      	ldrb	r3, [r4, #0]
{
   20bb8:	4605      	mov	r5, r0
	if (cmd_complete_or_status.occurred) {
   20bba:	2b00      	cmp	r3, #0
   20bbc:	f040 8446 	bne.w	2144c <hci_internal_cmd_put+0x89c>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   20bc0:	2304      	movs	r3, #4
   20bc2:	f88d 3007 	strb.w	r3, [sp, #7]
	if (user_cmd_handler) {
   20bc6:	4bc6      	ldr	r3, [pc, #792]	; (20ee0 <hci_internal_cmd_put+0x330>)
   20bc8:	681f      	ldr	r7, [r3, #0]
   20bca:	b1bf      	cbz	r7, 20bfc <hci_internal_cmd_put+0x4c>
		status = user_cmd_handler(cmd_in,
   20bcc:	f10d 0306 	add.w	r3, sp, #6
   20bd0:	f10d 0207 	add.w	r2, sp, #7
   20bd4:	1c61      	adds	r1, r4, #1
   20bd6:	47b8      	blx	r7
	if (status == BT_HCI_ERR_UNKNOWN_CMD) {
   20bd8:	2801      	cmp	r0, #1
   20bda:	d00f      	beq.n	20bfc <hci_internal_cmd_put+0x4c>
	if (generate_command_status_event ||
   20bdc:	f89d 3006 	ldrb.w	r3, [sp, #6]
   20be0:	2b00      	cmp	r3, #0
   20be2:	f040 8411 	bne.w	21408 <hci_internal_cmd_put+0x858>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   20be6:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   20bea:	70a3      	strb	r3, [r4, #2]
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   20bec:	220e      	movs	r2, #14
	evt_data->ncmd = 1;
   20bee:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   20bf0:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   20bf2:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   20bf4:	80a6      	strh	r6, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   20bf6:	71a0      	strb	r0, [r4, #6]
}
   20bf8:	f000 bc0f 	b.w	2141a <hci_internal_cmd_put+0x86a>
		switch (BT_OGF(opcode)) {
   20bfc:	f5b6 5f10 	cmp.w	r6, #9216	; 0x2400
   20c00:	ea4f 2396 	mov.w	r3, r6, lsr #10
   20c04:	d20f      	bcs.n	20c26 <hci_internal_cmd_put+0x76>
   20c06:	2b00      	cmp	r3, #0
   20c08:	d079      	beq.n	20cfe <hci_internal_cmd_put+0x14e>
   20c0a:	3b01      	subs	r3, #1
   20c0c:	2b07      	cmp	r3, #7
   20c0e:	f200 83f1 	bhi.w	213f4 <hci_internal_cmd_put+0x844>
   20c12:	e8df f013 	tbh	[pc, r3, lsl #1]
   20c16:	000d      	.short	0x000d
   20c18:	003f03ef 	.word	0x003f03ef
   20c1c:	03ef008e 	.word	0x03ef008e
   20c20:	03ef03ef 	.word	0x03ef03ef
   20c24:	0169      	.short	0x0169
   20c26:	2b3f      	cmp	r3, #63	; 0x3f
   20c28:	f000 8315 	beq.w	21256 <hci_internal_cmd_put+0x6a6>
	switch (opcode)	{
   20c2c:	2001      	movs	r0, #1
   20c2e:	e36d      	b.n	2130c <hci_internal_cmd_put+0x75c>
	return ((uint16_t)src[1] << 8) | src[0];
   20c30:	4628      	mov	r0, r5
	switch (opcode)	{
   20c32:	f240 4206 	movw	r2, #1030	; 0x406
   20c36:	f930 3b03 	ldrsh.w	r3, [r0], #3
   20c3a:	4293      	cmp	r3, r2
   20c3c:	d010      	beq.n	20c60 <hci_internal_cmd_put+0xb0>
   20c3e:	f240 421d 	movw	r2, #1053	; 0x41d
   20c42:	4293      	cmp	r3, r2
   20c44:	d023      	beq.n	20c8e <hci_internal_cmd_put+0xde>
   20c46:	2001      	movs	r0, #1
	switch (hci_opcode) {
   20c48:	f240 4306 	movw	r3, #1030	; 0x406
   20c4c:	429e      	cmp	r6, r3
   20c4e:	f040 83cb 	bne.w	213e8 <hci_internal_cmd_put+0x838>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   20c52:	230f      	movs	r3, #15
   20c54:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   20c56:	2304      	movs	r3, #4
   20c58:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   20c5a:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   20c5c:	2301      	movs	r3, #1
   20c5e:	e033      	b.n	20cc8 <hci_internal_cmd_put+0x118>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   20c60:	f7ec fb03 	bl	d26a <sdc_hci_cmd_lc_disconnect>
	switch (hci_opcode) {
   20c64:	f242 0332 	movw	r3, #8242	; 0x2032
   20c68:	429e      	cmp	r6, r3
   20c6a:	f240 83b5 	bls.w	213d8 <hci_internal_cmd_put+0x828>
   20c6e:	f242 0385 	movw	r3, #8325	; 0x2085
   20c72:	429e      	cmp	r6, r3
   20c74:	d840      	bhi.n	20cf8 <hci_internal_cmd_put+0x148>
   20c76:	f242 036c 	movw	r3, #8300	; 0x206c
   20c7a:	429e      	cmp	r6, r3
   20c7c:	f5a6 5301 	sub.w	r3, r6, #8256	; 0x2040
   20c80:	f200 83ba 	bhi.w	213f8 <hci_internal_cmd_put+0x848>
   20c84:	3b03      	subs	r3, #3
   20c86:	b29b      	uxth	r3, r3
   20c88:	2b01      	cmp	r3, #1
   20c8a:	d835      	bhi.n	20cf8 <hci_internal_cmd_put+0x148>
   20c8c:	e7e1      	b.n	20c52 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   20c8e:	f7ec faee 	bl	d26e <sdc_hci_cmd_lc_read_remote_version_information>
	switch (hci_opcode) {
   20c92:	e7e7      	b.n	20c64 <hci_internal_cmd_put+0xb4>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   20c94:	4628      	mov	r0, r5
	switch (opcode)	{
   20c96:	f640 4263 	movw	r2, #3171	; 0xc63
   20c9a:	f930 3b03 	ldrsh.w	r3, [r0], #3
   20c9e:	4293      	cmp	r3, r2
   20ca0:	d03b      	beq.n	20d1a <hci_internal_cmd_put+0x16a>
   20ca2:	dc16      	bgt.n	20cd2 <hci_internal_cmd_put+0x122>
   20ca4:	f640 4203 	movw	r2, #3075	; 0xc03
   20ca8:	4293      	cmp	r3, r2
   20caa:	d02a      	beq.n	20d02 <hci_internal_cmd_put+0x152>
   20cac:	f640 422d 	movw	r2, #3117	; 0xc2d
   20cb0:	4293      	cmp	r3, r2
   20cb2:	d029      	beq.n	20d08 <hci_internal_cmd_put+0x158>
   20cb4:	f640 4201 	movw	r2, #3073	; 0xc01
   20cb8:	4293      	cmp	r3, r2
   20cba:	d01b      	beq.n	20cf4 <hci_internal_cmd_put+0x144>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   20cbc:	230f      	movs	r3, #15
   20cbe:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   20cc0:	2304      	movs	r3, #4
   20cc2:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   20cc4:	2301      	movs	r3, #1
   20cc6:	70e3      	strb	r3, [r4, #3]
	evt_data->ncmd = 1;
   20cc8:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   20cca:	f8a4 6005 	strh.w	r6, [r4, #5]
		cmd_complete_or_status.raw_event[0] == BT_HCI_EVT_CMD_COMPLETE) {
		/* SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
		 * will generate command complete at a later time (unless unsupported)
		 */

		cmd_complete_or_status.occurred = false;
   20cce:	7023      	strb	r3, [r4, #0]
   20cd0:	e0db      	b.n	20e8a <hci_internal_cmd_put+0x2da>
	switch (opcode)	{
   20cd2:	f640 427b 	movw	r2, #3195	; 0xc7b
   20cd6:	4293      	cmp	r3, r2
   20cd8:	d022      	beq.n	20d20 <hci_internal_cmd_put+0x170>
   20cda:	f640 427c 	movw	r2, #3196	; 0xc7c
   20cde:	4293      	cmp	r3, r2
   20ce0:	d1ec      	bne.n	20cbc <hci_internal_cmd_put+0x10c>
		*param_length_out +=
   20ce2:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   20ce6:	497f      	ldr	r1, [pc, #508]	; (20ee4 <hci_internal_cmd_put+0x334>)
		*param_length_out +=
   20ce8:	3302      	adds	r3, #2
   20cea:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   20cee:	f7ec fa3c 	bl	d16a <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
	if (generate_command_status_event ||
   20cf2:	e001      	b.n	20cf8 <hci_internal_cmd_put+0x148>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   20cf4:	f7ec fa2f 	bl	d156 <sdc_hci_cmd_cb_set_event_mask>
	if (generate_command_status_event ||
   20cf8:	2801      	cmp	r0, #1
   20cfa:	f47f af74 	bne.w	20be6 <hci_internal_cmd_put+0x36>
	switch (hci_opcode) {
   20cfe:	2001      	movs	r0, #1
   20d00:	e382      	b.n	21408 <hci_internal_cmd_put+0x858>
		return sdc_hci_cmd_cb_reset();
   20d02:	f7e0 f821 	bl	d48 <sdc_hci_cmd_cb_reset>
	if (generate_command_status_event ||
   20d06:	e7f7      	b.n	20cf8 <hci_internal_cmd_put+0x148>
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   20d08:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   20d0c:	4975      	ldr	r1, [pc, #468]	; (20ee4 <hci_internal_cmd_put+0x334>)
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   20d0e:	3303      	adds	r3, #3
   20d10:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   20d14:	f7ec fa1d 	bl	d152 <sdc_hci_cmd_cb_read_transmit_power_level>
	if (generate_command_status_event ||
   20d18:	e7ee      	b.n	20cf8 <hci_internal_cmd_put+0x148>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   20d1a:	f7ec fa21 	bl	d160 <sdc_hci_cmd_cb_set_event_mask_page_2>
	if (generate_command_status_event ||
   20d1e:	e7eb      	b.n	20cf8 <hci_internal_cmd_put+0x148>
		*param_length_out +=
   20d20:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   20d24:	496f      	ldr	r1, [pc, #444]	; (20ee4 <hci_internal_cmd_put+0x334>)
		*param_length_out +=
   20d26:	3304      	adds	r3, #4
   20d28:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   20d2c:	f7ec fa0f 	bl	d14e <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
	if (generate_command_status_event ||
   20d30:	e7e2      	b.n	20cf8 <hci_internal_cmd_put+0x148>
	switch (opcode)	{
   20d32:	882b      	ldrh	r3, [r5, #0]
   20d34:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   20d38:	3b01      	subs	r3, #1
   20d3a:	2b08      	cmp	r3, #8
   20d3c:	d8be      	bhi.n	20cbc <hci_internal_cmd_put+0x10c>
   20d3e:	a201      	add	r2, pc, #4	; (adr r2, 20d44 <hci_internal_cmd_put+0x194>)
   20d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   20d44:	00020d69 	.word	0x00020d69
   20d48:	00020d7b 	.word	0x00020d7b
   20d4c:	00020e91 	.word	0x00020e91
   20d50:	00020cbd 	.word	0x00020cbd
   20d54:	00020cbd 	.word	0x00020cbd
   20d58:	00020cbd 	.word	0x00020cbd
   20d5c:	00020cbd 	.word	0x00020cbd
   20d60:	00020cbd 	.word	0x00020cbd
   20d64:	00020ec9 	.word	0x00020ec9
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   20d68:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   20d6c:	485d      	ldr	r0, [pc, #372]	; (20ee4 <hci_internal_cmd_put+0x334>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   20d6e:	3308      	adds	r3, #8
   20d70:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   20d74:	f7ec fa2c 	bl	d1d0 <sdc_hci_cmd_ip_read_local_version_information>
	if (generate_command_status_event ||
   20d78:	e7be      	b.n	20cf8 <hci_internal_cmd_put+0x148>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   20d7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   20d7e:	4d59      	ldr	r5, [pc, #356]	; (20ee4 <hci_internal_cmd_put+0x334>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   20d80:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   20d82:	2230      	movs	r2, #48	; 0x30
   20d84:	2100      	movs	r1, #0
   20d86:	4628      	mov	r0, r5
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   20d88:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   20d8c:	f008 f8d7 	bl	28f3e <memset>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   20d90:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   20d94:	70a3      	strb	r3, [r4, #2]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   20d96:	2300      	movs	r3, #0
   20d98:	71a3      	strb	r3, [r4, #6]
	cmds->hci_disconnect = 1;
   20d9a:	79e3      	ldrb	r3, [r4, #7]
	evt_data->opcode = hci_opcode;
   20d9c:	80a6      	strh	r6, [r4, #4]
	cmds->hci_disconnect = 1;
   20d9e:	f043 0320 	orr.w	r3, r3, #32
   20da2:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   20da4:	7a63      	ldrb	r3, [r4, #9]
   20da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   20daa:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   20dac:	7b23      	ldrb	r3, [r4, #12]
   20dae:	f063 033f 	orn	r3, r3, #63	; 0x3f
   20db2:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   20db4:	7c63      	ldrb	r3, [r4, #17]
   20db6:	f043 0304 	orr.w	r3, r3, #4
   20dba:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   20dbc:	7d63      	ldrb	r3, [r4, #21]
   20dbe:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   20dc2:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   20dc6:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   20dc8:	7da3      	ldrb	r3, [r4, #22]
   20dca:	f043 0302 	orr.w	r3, r3, #2
   20dce:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   20dd0:	7f63      	ldrb	r3, [r4, #29]
   20dd2:	f043 0304 	orr.w	r3, r3, #4
   20dd6:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   20dd8:	f894 3020 	ldrb.w	r3, [r4, #32]
   20ddc:	f063 0308 	orn	r3, r3, #8
   20de0:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   20de4:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   20de8:	f063 033c 	orn	r3, r3, #60	; 0x3c
   20dec:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   20df0:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   20df4:	f063 030c 	orn	r3, r3, #12
   20df8:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_long_term_key_request_reply = 1;
   20dfc:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   20e00:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
   20e04:	f043 037e 	orr.w	r3, r3, #126	; 0x7e
   20e08:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   20e0c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   20e10:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   20e14:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   20e18:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   20e1c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   20e20:	220e      	movs	r2, #14
   20e22:	7062      	strb	r2, [r4, #1]
	cmds->hci_le_set_data_length = 1;
   20e24:	f063 033f 	orn	r3, r3, #63	; 0x3f
	evt_data->ncmd = 1;
   20e28:	2201      	movs	r2, #1
   20e2a:	70e2      	strb	r2, [r4, #3]
	cmds->hci_le_set_data_length = 1;
   20e2c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   20e30:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   20e34:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   20e38:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
   20e3c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   20e40:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   20e44:	f063 0301 	orn	r3, r3, #1
   20e48:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   20e4c:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   20e50:	4313      	orrs	r3, r2
   20e52:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   20e56:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   20e5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   20e5e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   20e62:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   20e66:	f043 0304 	orr.w	r3, r3, #4
   20e6a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	cmds->hci_le_generate_dhkey_v2 = 1;
   20e6e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   20e72:	f043 0304 	orr.w	r3, r3, #4
   20e76:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	cmds->hci_le_set_data_related_address_changes = 1;
   20e7a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
   20e7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   20e82:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	cmd_complete_or_status.occurred = true;
   20e86:	f805 2c07 	strb.w	r2, [r5, #-7]
	}

	return 0;
   20e8a:	2000      	movs	r0, #0
}
   20e8c:	b003      	add	sp, #12
   20e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   20e90:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   20e94:	4d13      	ldr	r5, [pc, #76]	; (20ee4 <hci_internal_cmd_put+0x334>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   20e96:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
   20e98:	2208      	movs	r2, #8
   20e9a:	2100      	movs	r1, #0
   20e9c:	4628      	mov	r0, r5
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   20e9e:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   20ea2:	f008 f84c 	bl	28f3e <memset>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   20ea6:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   20eaa:	70a3      	strb	r3, [r4, #2]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   20eac:	2300      	movs	r3, #0
   20eae:	71a3      	strb	r3, [r4, #6]
	features->bdedr_not_supported = 1;
   20eb0:	7ae3      	ldrb	r3, [r4, #11]
	evt_data->opcode = hci_opcode;
   20eb2:	80a6      	strh	r6, [r4, #4]
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   20eb4:	220e      	movs	r2, #14
	features->bdedr_not_supported = 1;
   20eb6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   20eba:	7062      	strb	r2, [r4, #1]
	features->bdedr_not_supported = 1;
   20ebc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
	evt_data->ncmd = 1;
   20ec0:	2201      	movs	r2, #1
   20ec2:	70e2      	strb	r2, [r4, #3]
	features->bdedr_not_supported = 1;
   20ec4:	72e3      	strb	r3, [r4, #11]
   20ec6:	e7de      	b.n	20e86 <hci_internal_cmd_put+0x2d6>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   20ec8:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   20ecc:	4805      	ldr	r0, [pc, #20]	; (20ee4 <hci_internal_cmd_put+0x334>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   20ece:	3306      	adds	r3, #6
   20ed0:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   20ed4:	f7ec f97a 	bl	d1cc <sdc_hci_cmd_ip_read_bd_addr>
	if (generate_command_status_event ||
   20ed8:	e70e      	b.n	20cf8 <hci_internal_cmd_put+0x148>
   20eda:	bf00      	nop
   20edc:	200046b0 	.word	0x200046b0
   20ee0:	20003898 	.word	0x20003898
   20ee4:	200046b7 	.word	0x200046b7
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   20ee8:	4628      	mov	r0, r5
	switch (opcode)	{
   20eea:	f242 015e 	movw	r1, #8286	; 0x205e
   20eee:	f830 3b03 	ldrh.w	r3, [r0], #3
   20ef2:	b21a      	sxth	r2, r3
   20ef4:	428a      	cmp	r2, r1
   20ef6:	f242 0132 	movw	r1, #8242	; 0x2032
   20efa:	f300 8086 	bgt.w	2100a <hci_internal_cmd_put+0x45a>
   20efe:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   20f02:	dc01      	bgt.n	20f08 <hci_internal_cmd_put+0x358>
	switch (hci_opcode) {
   20f04:	428e      	cmp	r6, r1
   20f06:	e067      	b.n	20fd8 <hci_internal_cmd_put+0x428>
	switch (opcode)	{
   20f08:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   20f0c:	3b01      	subs	r3, #1
   20f0e:	2b5d      	cmp	r3, #93	; 0x5d
   20f10:	d85f      	bhi.n	20fd2 <hci_internal_cmd_put+0x422>
   20f12:	e8df f013 	tbh	[pc, r3, lsl #1]
   20f16:	008e      	.short	0x008e
   20f18:	00a4009b 	.word	0x00a4009b
   20f1c:	00d7005e 	.word	0x00d7005e
   20f20:	00dd00da 	.word	0x00dd00da
   20f24:	00e900e6 	.word	0x00e900e6
   20f28:	005e00ec 	.word	0x005e00ec
   20f2c:	005e005e 	.word	0x005e005e
   20f30:	00ef005e 	.word	0x00ef005e
   20f34:	00fb00f8 	.word	0x00fb00f8
   20f38:	005e00fe 	.word	0x005e00fe
   20f3c:	0101005e 	.word	0x0101005e
   20f40:	010d010a 	.word	0x010d010a
   20f44:	005e0116 	.word	0x005e0116
   20f48:	0128011f 	.word	0x0128011f
   20f4c:	005e0131 	.word	0x005e0131
   20f50:	005e005e 	.word	0x005e005e
   20f54:	005e005e 	.word	0x005e005e
   20f58:	014f0146 	.word	0x014f0146
   20f5c:	015b0158 	.word	0x015b0158
   20f60:	0164015e 	.word	0x0164015e
   20f64:	016a0167 	.word	0x016a0167
   20f68:	005e016d 	.word	0x005e016d
   20f6c:	0176005e 	.word	0x0176005e
   20f70:	017c0179 	.word	0x017c0179
   20f74:	018e0185 	.word	0x018e0185
   20f78:	005e0191 	.word	0x005e0191
   20f7c:	005e005e 	.word	0x005e005e
   20f80:	005e005e 	.word	0x005e005e
   20f84:	005e005e 	.word	0x005e005e
   20f88:	005e005e 	.word	0x005e005e
   20f8c:	005e005e 	.word	0x005e005e
   20f90:	005e005e 	.word	0x005e005e
   20f94:	005e005e 	.word	0x005e005e
   20f98:	005e005e 	.word	0x005e005e
   20f9c:	005e005e 	.word	0x005e005e
   20fa0:	005e005e 	.word	0x005e005e
   20fa4:	005e005e 	.word	0x005e005e
   20fa8:	0194005e 	.word	0x0194005e
   20fac:	005e005e 	.word	0x005e005e
   20fb0:	005e019d 	.word	0x005e019d
   20fb4:	005e005e 	.word	0x005e005e
   20fb8:	005e005e 	.word	0x005e005e
   20fbc:	005e005e 	.word	0x005e005e
   20fc0:	005e005e 	.word	0x005e005e
   20fc4:	005e005e 	.word	0x005e005e
   20fc8:	005e005e 	.word	0x005e005e
   20fcc:	005e005e 	.word	0x005e005e
   20fd0:	0161      	.short	0x0161
	switch (hci_opcode) {
   20fd2:	f242 0332 	movw	r3, #8242	; 0x2032
   20fd6:	429e      	cmp	r6, r3
   20fd8:	d01f      	beq.n	2101a <hci_internal_cmd_put+0x46a>
   20fda:	f200 8231 	bhi.w	21440 <hci_internal_cmd_put+0x890>
   20fde:	f242 0326 	movw	r3, #8230	; 0x2026
   20fe2:	429e      	cmp	r6, r3
   20fe4:	f63f ae8b 	bhi.w	20cfe <hci_internal_cmd_put+0x14e>
   20fe8:	2001      	movs	r0, #1
   20fea:	f242 030c 	movw	r3, #8204	; 0x200c
   20fee:	429e      	cmp	r6, r3
   20ff0:	f67f ae2a 	bls.w	20c48 <hci_internal_cmd_put+0x98>
   20ff4:	f5a6 5300 	sub.w	r3, r6, #8192	; 0x2000
   20ff8:	4ac7      	ldr	r2, [pc, #796]	; (21318 <hci_internal_cmd_put+0x768>)
   20ffa:	3b0d      	subs	r3, #13
   20ffc:	b29b      	uxth	r3, r3
   20ffe:	fa22 f303 	lsr.w	r3, r2, r3
   21002:	07db      	lsls	r3, r3, #31
   21004:	f57f ae78 	bpl.w	20cf8 <hci_internal_cmd_put+0x148>
   21008:	e623      	b.n	20c52 <hci_internal_cmd_put+0xa2>
	switch (opcode)	{
   2100a:	f242 037c 	movw	r3, #8316	; 0x207c
   2100e:	429a      	cmp	r2, r3
   21010:	f47f af78 	bne.w	20f04 <hci_internal_cmd_put+0x354>
		return sdc_hci_cmd_le_set_data_related_address_changes((void *)cmd_params);
   21014:	f7ec f914 	bl	d240 <sdc_hci_cmd_le_set_data_related_address_changes>
   21018:	e00d      	b.n	21036 <hci_internal_cmd_put+0x486>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   2101a:	230f      	movs	r3, #15
   2101c:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   2101e:	2304      	movs	r3, #4
   21020:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   21022:	2301      	movs	r3, #1
   21024:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   21026:	2232      	movs	r2, #50	; 0x32
   21028:	7162      	strb	r2, [r4, #5]
   2102a:	2220      	movs	r2, #32
	evt_data->ncmd = 1;
   2102c:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   2102e:	71a2      	strb	r2, [r4, #6]
	cmd_complete_or_status.occurred = true;
   21030:	e64d      	b.n	20cce <hci_internal_cmd_put+0x11e>
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   21032:	f7ec f909 	bl	d248 <sdc_hci_cmd_le_set_event_mask>
	switch (hci_opcode) {
   21036:	f242 0332 	movw	r3, #8242	; 0x2032
   2103a:	429e      	cmp	r6, r3
   2103c:	f47f ae12 	bne.w	20c64 <hci_internal_cmd_put+0xb4>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   21040:	230f      	movs	r3, #15
   21042:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   21044:	2304      	movs	r3, #4
   21046:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   21048:	70e0      	strb	r0, [r4, #3]
   2104a:	e0a8      	b.n	2119e <hci_internal_cmd_put+0x5ee>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   2104c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   21050:	48b2      	ldr	r0, [pc, #712]	; (2131c <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   21052:	3303      	adds	r3, #3
   21054:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   21058:	f7ec f8d2 	bl	d200 <sdc_hci_cmd_le_read_buffer_size>
   2105c:	e7eb      	b.n	21036 <hci_internal_cmd_put+0x486>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   2105e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   21062:	4dae      	ldr	r5, [pc, #696]	; (2131c <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   21064:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
   21066:	2208      	movs	r2, #8
   21068:	2100      	movs	r1, #0
   2106a:	4628      	mov	r0, r5
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   2106c:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   21070:	f007 ff65 	bl	28f3e <memset>
	features->params.le_encryption = 1;
   21074:	79e3      	ldrb	r3, [r4, #7]
   21076:	f023 037d 	bic.w	r3, r3, #125	; 0x7d
   2107a:	f043 037d 	orr.w	r3, r3, #125	; 0x7d
   2107e:	71e3      	strb	r3, [r4, #7]
	features->params.le_2m_phy = 1;
   21080:	7a23      	ldrb	r3, [r4, #8]
   21082:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   21086:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   2108a:	7223      	strb	r3, [r4, #8]
	switch (hci_opcode) {
   2108c:	f242 0332 	movw	r3, #8242	; 0x2032
   21090:	429e      	cmp	r6, r3
   21092:	d008      	beq.n	210a6 <hci_internal_cmd_put+0x4f6>
   21094:	f200 81ce 	bhi.w	21434 <hci_internal_cmd_put+0x884>
   21098:	f242 0326 	movw	r3, #8230	; 0x2026
   2109c:	429e      	cmp	r6, r3
   2109e:	f240 81a1 	bls.w	213e4 <hci_internal_cmd_put+0x834>
		return 0;
   210a2:	2000      	movs	r0, #0
   210a4:	e59f      	b.n	20be6 <hci_internal_cmd_put+0x36>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   210a6:	230f      	movs	r3, #15
   210a8:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   210aa:	2304      	movs	r3, #4
	evt_data->opcode = hci_opcode;
   210ac:	2232      	movs	r2, #50	; 0x32
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   210ae:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   210b0:	2300      	movs	r3, #0
   210b2:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   210b4:	7162      	strb	r2, [r4, #5]
	evt_data->ncmd = 1;
   210b6:	2301      	movs	r3, #1
	evt_data->opcode = hci_opcode;
   210b8:	2220      	movs	r2, #32
	evt_data->ncmd = 1;
   210ba:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   210bc:	71a2      	strb	r2, [r4, #6]
	cmd_complete_or_status.occurred = true;
   210be:	f805 3c07 	strb.w	r3, [r5, #-7]
	if (opcode == SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
   210c2:	e6e2      	b.n	20e8a <hci_internal_cmd_put+0x2da>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   210c4:	f7ec f8c9 	bl	d25a <sdc_hci_cmd_le_set_random_address>
   210c8:	e7b5      	b.n	21036 <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   210ca:	f7ec f8b5 	bl	d238 <sdc_hci_cmd_le_set_adv_params>
   210ce:	e7b2      	b.n	21036 <hci_internal_cmd_put+0x486>
		*param_length_out +=
   210d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   210d4:	4891      	ldr	r0, [pc, #580]	; (2131c <hci_internal_cmd_put+0x76c>)
		*param_length_out +=
   210d6:	3301      	adds	r3, #1
   210d8:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   210dc:	f7ec f88e 	bl	d1fc <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
   210e0:	e7a9      	b.n	21036 <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   210e2:	f7ec f8a5 	bl	d230 <sdc_hci_cmd_le_set_adv_data>
   210e6:	e7a6      	b.n	21036 <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   210e8:	f7ec f8bb 	bl	d262 <sdc_hci_cmd_le_set_scan_response_data>
   210ec:	e7a3      	b.n	21036 <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   210ee:	f7ec f8a1 	bl	d234 <sdc_hci_cmd_le_set_adv_enable>
   210f2:	e7a0      	b.n	21036 <hci_internal_cmd_put+0x486>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   210f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   210f8:	4888      	ldr	r0, [pc, #544]	; (2131c <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   210fa:	3301      	adds	r3, #1
   210fc:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   21100:	f7ec f882 	bl	d208 <sdc_hci_cmd_le_read_filter_accept_list_size>
   21104:	e797      	b.n	21036 <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   21106:	f7ec f869 	bl	d1dc <sdc_hci_cmd_le_clear_filter_accept_list>
   2110a:	e794      	b.n	21036 <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   2110c:	f7ec f862 	bl	d1d4 <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   21110:	e791      	b.n	21036 <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   21112:	f7ec f887 	bl	d224 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   21116:	e78e      	b.n	21036 <hci_internal_cmd_put+0x486>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   21118:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   2111c:	497f      	ldr	r1, [pc, #508]	; (2131c <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   2111e:	3307      	adds	r3, #7
   21120:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   21124:	f7ec f86e 	bl	d204 <sdc_hci_cmd_le_read_channel_map>
   21128:	e785      	b.n	21036 <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   2112a:	f7ec f873 	bl	d214 <sdc_hci_cmd_le_read_remote_features>
   2112e:	e782      	b.n	21036 <hci_internal_cmd_put+0x486>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   21130:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   21134:	4979      	ldr	r1, [pc, #484]	; (2131c <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   21136:	3310      	adds	r3, #16
   21138:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   2113c:	f7ec f852 	bl	d1e4 <sdc_hci_cmd_le_encrypt>
   21140:	e779      	b.n	21036 <hci_internal_cmd_put+0x486>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   21142:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   21146:	4875      	ldr	r0, [pc, #468]	; (2131c <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   21148:	3308      	adds	r3, #8
   2114a:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   2114e:	f7ec f853 	bl	d1f8 <sdc_hci_cmd_le_rand>
   21152:	e770      	b.n	21036 <hci_internal_cmd_put+0x486>
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   21154:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   21158:	4970      	ldr	r1, [pc, #448]	; (2131c <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   2115a:	3302      	adds	r3, #2
   2115c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   21160:	f7ec f846 	bl	d1f0 <sdc_hci_cmd_le_long_term_key_request_reply>
   21164:	e767      	b.n	21036 <hci_internal_cmd_put+0x486>
		*param_length_out +=
   21166:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   2116a:	496c      	ldr	r1, [pc, #432]	; (2131c <hci_internal_cmd_put+0x76c>)
		*param_length_out +=
   2116c:	3302      	adds	r3, #2
   2116e:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   21172:	f7ec f839 	bl	d1e8 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   21176:	e75e      	b.n	21036 <hci_internal_cmd_put+0x486>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   21178:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2117c:	3308      	adds	r3, #8
   2117e:	f88d 3007 	strb.w	r3, [sp, #7]
	*buf = states1;
   21182:	238f      	movs	r3, #143	; 0x8f
   21184:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   21186:	23c0      	movs	r3, #192	; 0xc0
   21188:	72e3      	strb	r3, [r4, #11]
	switch (hci_opcode) {
   2118a:	f242 0332 	movw	r3, #8242	; 0x2032
   2118e:	429e      	cmp	r6, r3
   21190:	d180      	bne.n	21094 <hci_internal_cmd_put+0x4e4>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   21192:	230f      	movs	r3, #15
   21194:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   21196:	2304      	movs	r3, #4
   21198:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   2119a:	2300      	movs	r3, #0
   2119c:	70e3      	strb	r3, [r4, #3]
	evt_data->ncmd = 1;
   2119e:	2301      	movs	r3, #1
   211a0:	e741      	b.n	21026 <hci_internal_cmd_put+0x476>
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   211a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   211a6:	495d      	ldr	r1, [pc, #372]	; (2131c <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   211a8:	3302      	adds	r3, #2
   211aa:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   211ae:	f7ec f845 	bl	d23c <sdc_hci_cmd_le_set_data_length>
   211b2:	e740      	b.n	21036 <hci_internal_cmd_put+0x486>
		*param_length_out +=
   211b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   211b8:	4858      	ldr	r0, [pc, #352]	; (2131c <hci_internal_cmd_put+0x76c>)
		*param_length_out +=
   211ba:	3304      	adds	r3, #4
   211bc:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   211c0:	f7ec f82c 	bl	d21c <sdc_hci_cmd_le_read_suggested_default_data_length>
   211c4:	e737      	b.n	21036 <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   211c6:	f7ec f84e 	bl	d266 <sdc_hci_cmd_le_write_suggested_default_data_length>
   211ca:	e734      	b.n	21036 <hci_internal_cmd_put+0x486>
		return hci_cmd_le_read_local_p256_public_key();
   211cc:	f000 faa8 	bl	21720 <hci_cmd_le_read_local_p256_public_key>
   211d0:	e731      	b.n	21036 <hci_internal_cmd_put+0x486>
		return hci_cmd_le_generate_dhkey((void *)cmd_params);
   211d2:	f00a fc0a 	bl	2b9ea <hci_cmd_le_generate_dhkey>
   211d6:	e72e      	b.n	21036 <hci_internal_cmd_put+0x486>
		return hci_cmd_le_generate_dhkey_v2((void *)cmd_params);
   211d8:	f00a fc0a 	bl	2b9f0 <hci_cmd_le_generate_dhkey_v2>
   211dc:	e72b      	b.n	21036 <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   211de:	f7eb fffb 	bl	d1d8 <sdc_hci_cmd_le_add_device_to_resolving_list>
   211e2:	e728      	b.n	21036 <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   211e4:	f7ec f820 	bl	d228 <sdc_hci_cmd_le_remove_device_from_resolving_list>
   211e8:	e725      	b.n	21036 <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_clear_resolving_list();
   211ea:	f7eb fff9 	bl	d1e0 <sdc_hci_cmd_le_clear_resolving_list>
   211ee:	e722      	b.n	21036 <hci_internal_cmd_put+0x486>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   211f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   211f4:	4849      	ldr	r0, [pc, #292]	; (2131c <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   211f6:	3301      	adds	r3, #1
   211f8:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   211fc:	f7ec f80c 	bl	d218 <sdc_hci_cmd_le_read_resolving_list_size>
   21200:	e719      	b.n	21036 <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   21202:	f7ec f813 	bl	d22c <sdc_hci_cmd_le_set_address_resolution_enable>
   21206:	e716      	b.n	21036 <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   21208:	f7ec f829 	bl	d25e <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   2120c:	e713      	b.n	21036 <hci_internal_cmd_put+0x486>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   2120e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   21212:	4842      	ldr	r0, [pc, #264]	; (2131c <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   21214:	3308      	adds	r3, #8
   21216:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   2121a:	f7eb fff7 	bl	d20c <sdc_hci_cmd_le_read_max_data_length>
   2121e:	e70a      	b.n	21036 <hci_internal_cmd_put+0x486>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   21220:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   21224:	493d      	ldr	r1, [pc, #244]	; (2131c <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   21226:	3304      	adds	r3, #4
   21228:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   2122c:	f7eb fff0 	bl	d210 <sdc_hci_cmd_le_read_phy>
   21230:	e701      	b.n	21036 <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   21232:	f7ec f807 	bl	d244 <sdc_hci_cmd_le_set_default_phy>
   21236:	e6fe      	b.n	21036 <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   21238:	f7ec f80b 	bl	d252 <sdc_hci_cmd_le_set_phy>
   2123c:	e6fb      	b.n	21036 <hci_internal_cmd_put+0x486>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   2123e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   21242:	4836      	ldr	r0, [pc, #216]	; (2131c <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   21244:	3302      	adds	r3, #2
   21246:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   2124a:	f7eb ffe9 	bl	d220 <sdc_hci_cmd_le_read_transmit_power>
   2124e:	e6f2      	b.n	21036 <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   21250:	f7ec f801 	bl	d256 <sdc_hci_cmd_le_set_privacy_mode>
   21254:	e6ef      	b.n	21036 <hci_internal_cmd_put+0x486>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   21256:	4628      	mov	r0, r5
	switch (opcode)	{
   21258:	f64f 420b 	movw	r2, #64523	; 0xfc0b
   2125c:	f830 3b03 	ldrh.w	r3, [r0], #3
   21260:	4293      	cmp	r3, r2
   21262:	d823      	bhi.n	212ac <hci_internal_cmd_put+0x6fc>
   21264:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   21268:	f67f ace0 	bls.w	20c2c <hci_internal_cmd_put+0x7c>
   2126c:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   21270:	3b01      	subs	r3, #1
   21272:	2b0a      	cmp	r3, #10
   21274:	f63f acda 	bhi.w	20c2c <hci_internal_cmd_put+0x7c>
   21278:	a201      	add	r2, pc, #4	; (adr r2, 21280 <hci_internal_cmd_put+0x6d0>)
   2127a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2127e:	bf00      	nop
   21280:	000212fd 	.word	0x000212fd
   21284:	00021321 	.word	0x00021321
   21288:	00020c2d 	.word	0x00020c2d
   2128c:	00020c2d 	.word	0x00020c2d
   21290:	00020c2d 	.word	0x00020c2d
   21294:	00021375 	.word	0x00021375
   21298:	00020c2d 	.word	0x00020c2d
   2129c:	00020c2d 	.word	0x00020c2d
   212a0:	00021351 	.word	0x00021351
   212a4:	00021363 	.word	0x00021363
   212a8:	0002137b 	.word	0x0002137b
   212ac:	f503 7240 	add.w	r2, r3, #768	; 0x300
   212b0:	b292      	uxth	r2, r2
   212b2:	2a0c      	cmp	r2, #12
   212b4:	f63f acba 	bhi.w	20c2c <hci_internal_cmd_put+0x7c>
   212b8:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   212bc:	2b0c      	cmp	r3, #12
   212be:	f63f acb5 	bhi.w	20c2c <hci_internal_cmd_put+0x7c>
   212c2:	a201      	add	r2, pc, #4	; (adr r2, 212c8 <hci_internal_cmd_put+0x718>)
   212c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   212c8:	0002138d 	.word	0x0002138d
   212cc:	000213af 	.word	0x000213af
   212d0:	000213b5 	.word	0x000213b5
   212d4:	000213bb 	.word	0x000213bb
   212d8:	000213c1 	.word	0x000213c1
   212dc:	000213c7 	.word	0x000213c7
   212e0:	00020c2d 	.word	0x00020c2d
   212e4:	00020c2d 	.word	0x00020c2d
   212e8:	00020c2d 	.word	0x00020c2d
   212ec:	000213cd 	.word	0x000213cd
   212f0:	00020c2d 	.word	0x00020c2d
   212f4:	00020c2d 	.word	0x00020c2d
   212f8:	000213d3 	.word	0x000213d3
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   212fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   21300:	4806      	ldr	r0, [pc, #24]	; (2131c <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   21302:	330c      	adds	r3, #12
   21304:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   21308:	f7df fdc6 	bl	e98 <sdc_hci_cmd_vs_zephyr_read_version_info>
	switch (hci_opcode) {
   2130c:	f026 0308 	bic.w	r3, r6, #8
   21310:	f64f 5202 	movw	r2, #64770	; 0xfd02
   21314:	4293      	cmp	r3, r2
   21316:	e06a      	b.n	213ee <hci_internal_cmd_put+0x83e>
   21318:	03001241 	.word	0x03001241
   2131c:	200046b7 	.word	0x200046b7
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   21320:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   21324:	484b      	ldr	r0, [pc, #300]	; (21454 <hci_internal_cmd_put+0x8a4>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   21326:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   21328:	2202      	movs	r2, #2
   2132a:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   2132c:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   21330:	f007 fe05 	bl	28f3e <memset>
	cmds->read_version_info = 1;
   21334:	79e3      	ldrb	r3, [r4, #7]
   21336:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   2133a:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   2133e:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   21340:	7a23      	ldrb	r3, [r4, #8]
   21342:	f023 0307 	bic.w	r3, r3, #7
   21346:	f043 0307 	orr.w	r3, r3, #7
   2134a:	7223      	strb	r3, [r4, #8]
		return 0;
   2134c:	2000      	movs	r0, #0
   2134e:	e7dd      	b.n	2130c <hci_internal_cmd_put+0x75c>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   21350:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   21354:	483f      	ldr	r0, [pc, #252]	; (21454 <hci_internal_cmd_put+0x8a4>)
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   21356:	3317      	adds	r3, #23
   21358:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   2135c:	f7df fd50 	bl	e00 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   21360:	e7d4      	b.n	2130c <hci_internal_cmd_put+0x75c>
		*param_length_out +=
   21362:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   21366:	483b      	ldr	r0, [pc, #236]	; (21454 <hci_internal_cmd_put+0x8a4>)
		*param_length_out +=
   21368:	3320      	adds	r3, #32
   2136a:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   2136e:	f7df fcff 	bl	d70 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   21372:	e7cb      	b.n	2130c <hci_internal_cmd_put+0x75c>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   21374:	f7eb ff28 	bl	d1c8 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   21378:	e7c8      	b.n	2130c <hci_internal_cmd_put+0x75c>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   2137a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   2137e:	4835      	ldr	r0, [pc, #212]	; (21454 <hci_internal_cmd_put+0x8a4>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   21380:	3301      	adds	r3, #1
   21382:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   21386:	f7eb ff0b 	bl	d1a0 <sdc_hci_cmd_vs_zephyr_read_chip_temp>
   2138a:	e7bf      	b.n	2130c <hci_internal_cmd_put+0x75c>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   2138c:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   21390:	4830      	ldr	r0, [pc, #192]	; (21454 <hci_internal_cmd_put+0x8a4>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   21392:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   21394:	2202      	movs	r2, #2
   21396:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   21398:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   2139c:	f007 fdcf 	bl	28f3e <memset>
	cmds->read_supported_vs_commands = 1;
   213a0:	79e3      	ldrb	r3, [r4, #7]
   213a2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   213a6:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   213aa:	71e3      	strb	r3, [r4, #7]
	switch (hci_opcode) {
   213ac:	e7ce      	b.n	2134c <hci_internal_cmd_put+0x79c>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   213ae:	f7eb feea 	bl	d186 <sdc_hci_cmd_vs_llpm_mode_set>
   213b2:	e7ab      	b.n	2130c <hci_internal_cmd_put+0x75c>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   213b4:	f7eb fee3 	bl	d17e <sdc_hci_cmd_vs_conn_update>
   213b8:	e7a8      	b.n	2130c <hci_internal_cmd_put+0x75c>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   213ba:	f7eb fed8 	bl	d16e <sdc_hci_cmd_vs_conn_event_extend>
   213be:	e7a5      	b.n	2130c <hci_internal_cmd_put+0x75c>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   213c0:	f7eb fee7 	bl	d192 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   213c4:	e7a2      	b.n	2130c <hci_internal_cmd_put+0x75c>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   213c6:	f7eb fedc 	bl	d182 <sdc_hci_cmd_vs_event_length_set>
   213ca:	e79f      	b.n	2130c <hci_internal_cmd_put+0x75c>
		return sdc_hci_cmd_vs_peripheral_latency_mode_set((void *)cmd_params);
   213cc:	f7eb fedd 	bl	d18a <sdc_hci_cmd_vs_peripheral_latency_mode_set>
   213d0:	e79c      	b.n	2130c <hci_internal_cmd_put+0x75c>
		return sdc_hci_cmd_vs_set_adv_randomness((void *)cmd_params);
   213d2:	f7eb fee3 	bl	d19c <sdc_hci_cmd_vs_set_adv_randomness>
   213d6:	e799      	b.n	2130c <hci_internal_cmd_put+0x75c>
	switch (hci_opcode) {
   213d8:	f242 0326 	movw	r3, #8230	; 0x2026
   213dc:	429e      	cmp	r6, r3
   213de:	f67f ae04 	bls.w	20fea <hci_internal_cmd_put+0x43a>
   213e2:	e489      	b.n	20cf8 <hci_internal_cmd_put+0x148>
		return 0;
   213e4:	2000      	movs	r0, #0
   213e6:	e600      	b.n	20fea <hci_internal_cmd_put+0x43a>
	switch (hci_opcode) {
   213e8:	f240 431d 	movw	r3, #1053	; 0x41d
   213ec:	429e      	cmp	r6, r3
   213ee:	f43f ac30 	beq.w	20c52 <hci_internal_cmd_put+0xa2>
   213f2:	e481      	b.n	20cf8 <hci_internal_cmd_put+0x148>
		switch (BT_OGF(opcode)) {
   213f4:	2001      	movs	r0, #1
	if (generate_command_status_event ||
   213f6:	e47f      	b.n	20cf8 <hci_internal_cmd_put+0x148>
	switch (hci_opcode) {
   213f8:	4a17      	ldr	r2, [pc, #92]	; (21458 <hci_internal_cmd_put+0x8a8>)
   213fa:	3b2d      	subs	r3, #45	; 0x2d
   213fc:	b29b      	uxth	r3, r3
   213fe:	fa22 f303 	lsr.w	r3, r2, r3
   21402:	07da      	lsls	r2, r3, #31
   21404:	f57f ac78 	bpl.w	20cf8 <hci_internal_cmd_put+0x148>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   21408:	230f      	movs	r3, #15
   2140a:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   2140c:	2304      	movs	r3, #4
   2140e:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   21410:	2301      	movs	r3, #1
	evt_data->status = status_code;
   21412:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   21414:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   21416:	f8a4 6005 	strh.w	r6, [r4, #5]
	cmd_complete_or_status.occurred = true;
   2141a:	2301      	movs	r3, #1
   2141c:	7023      	strb	r3, [r4, #0]
	if (opcode == SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
   2141e:	f242 0383 	movw	r3, #8323	; 0x2083
   21422:	429e      	cmp	r6, r3
   21424:	f47f ad31 	bne.w	20e8a <hci_internal_cmd_put+0x2da>
		&&
   21428:	7863      	ldrb	r3, [r4, #1]
   2142a:	2b0e      	cmp	r3, #14
   2142c:	f47f ad2d 	bne.w	20e8a <hci_internal_cmd_put+0x2da>
		cmd_complete_or_status.occurred = false;
   21430:	2300      	movs	r3, #0
   21432:	e44c      	b.n	20cce <hci_internal_cmd_put+0x11e>
	switch (hci_opcode) {
   21434:	f242 0385 	movw	r3, #8325	; 0x2085
   21438:	429e      	cmp	r6, r3
   2143a:	d905      	bls.n	21448 <hci_internal_cmd_put+0x898>
		return 0;
   2143c:	2000      	movs	r0, #0
   2143e:	e45b      	b.n	20cf8 <hci_internal_cmd_put+0x148>
	switch (hci_opcode) {
   21440:	f242 0385 	movw	r3, #8325	; 0x2085
   21444:	2001      	movs	r0, #1
   21446:	e414      	b.n	20c72 <hci_internal_cmd_put+0xc2>
		return 0;
   21448:	2000      	movs	r0, #0
   2144a:	e414      	b.n	20c76 <hci_internal_cmd_put+0xc6>
		return -NRF_EPERM;
   2144c:	f04f 30ff 	mov.w	r0, #4294967295
   21450:	e51c      	b.n	20e8c <hci_internal_cmd_put+0x2dc>
   21452:	bf00      	nop
   21454:	200046b7 	.word	0x200046b7
   21458:	01000401 	.word	0x01000401

0002145c <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   2145c:	b538      	push	{r3, r4, r5, lr}
	if (cmd_complete_or_status.occurred) {
   2145e:	4c09      	ldr	r4, [pc, #36]	; (21484 <hci_internal_msg_get+0x28>)
   21460:	7823      	ldrb	r3, [r4, #0]
{
   21462:	460d      	mov	r5, r1
	if (cmd_complete_or_status.occurred) {
   21464:	b91b      	cbnz	r3, 2146e <hci_internal_msg_get+0x12>

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
}
   21466:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return sdc_hci_get(msg_out, msg_type_out);
   2146a:	f7eb be60 	b.w	d12e <sdc_hci_get>
					 evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   2146e:	78a2      	ldrb	r2, [r4, #2]
		memcpy(msg_out,
   21470:	1c61      	adds	r1, r4, #1
   21472:	3202      	adds	r2, #2
   21474:	f007 fd58 	bl	28f28 <memcpy>
		cmd_complete_or_status.occurred = false;
   21478:	2000      	movs	r0, #0
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   2147a:	2304      	movs	r3, #4
		cmd_complete_or_status.occurred = false;
   2147c:	7020      	strb	r0, [r4, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   2147e:	702b      	strb	r3, [r5, #0]
}
   21480:	bd38      	pop	{r3, r4, r5, pc}
   21482:	bf00      	nop
   21484:	200046b0 	.word	0x200046b0

00021488 <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   21488:	b570      	push	{r4, r5, r6, lr}
   2148a:	4605      	mov	r5, r0
   2148c:	460e      	mov	r6, r1
   2148e:	4c08      	ldr	r4, [pc, #32]	; (214b0 <bt_rand+0x28>)
   21490:	4620      	mov	r0, r4
   21492:	f00a fb91 	bl	2bbb8 <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   21496:	b138      	cbz	r0, 214a8 <bt_rand+0x20>
   21498:	68a3      	ldr	r3, [r4, #8]
   2149a:	b2b2      	uxth	r2, r6
   2149c:	4629      	mov	r1, r5
   2149e:	4620      	mov	r0, r4
   214a0:	681b      	ldr	r3, [r3, #0]
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
}
   214a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   214a6:	4718      	bx	r3
   214a8:	f06f 0012 	mvn.w	r0, #18
   214ac:	bd70      	pop	{r4, r5, r6, pc}
   214ae:	bf00      	nop
   214b0:	0002c824 	.word	0x0002c824

000214b4 <ecdh_p256_common_secret>:

	return buf;
}

static struct net_buf *ecdh_p256_common_secret(bool use_debug)
{
   214b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   214b6:	4b24      	ldr	r3, [pc, #144]	; (21548 <ecdh_p256_common_secret+0x94>)
   214b8:	4924      	ldr	r1, [pc, #144]	; (2154c <ecdh_p256_common_secret+0x98>)
   214ba:	f103 0220 	add.w	r2, r3, #32
   214be:	2800      	cmp	r0, #0
   214c0:	bf08      	it	eq
   214c2:	4619      	moveq	r1, r3
{
   214c4:	af00      	add	r7, sp, #0
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   214c6:	4610      	mov	r0, r2
   214c8:	f002 ff96 	bl	243f8 <ocrypto_ecdh_p256_common_secret>
	if (err) {
   214cc:	4604      	mov	r4, r0
   214ce:	b180      	cbz	r0, 214f2 <ecdh_p256_common_secret+0x3e>
		LOG_ERR("public key is not valid (err %d)", err);
   214d0:	466d      	mov	r5, sp
   214d2:	b088      	sub	sp, #32
   214d4:	466a      	mov	r2, sp
   214d6:	4b1e      	ldr	r3, [pc, #120]	; (21550 <ecdh_p256_common_secret+0x9c>)
   214d8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   214dc:	2303      	movs	r3, #3
   214de:	f842 3f10 	str.w	r3, [r2, #16]!
   214e2:	481c      	ldr	r0, [pc, #112]	; (21554 <ecdh_p256_common_secret+0xa0>)
   214e4:	2300      	movs	r3, #0
   214e6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   214ea:	f7f2 fb6b 	bl	13bc4 <z_impl_z_log_msg_static_create>
		return BT_HCI_ERR_INVALID_PARAM;
   214ee:	2412      	movs	r4, #18
   214f0:	46ad      	mov	sp, r5
	struct net_buf *buf;
	uint8_t status;

	status = common_secret(use_debug);

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   214f2:	f04f 32ff 	mov.w	r2, #4294967295
   214f6:	f04f 33ff 	mov.w	r3, #4294967295
   214fa:	2001      	movs	r0, #1
   214fc:	f7f4 fcac 	bl	15e58 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   21500:	f100 060c 	add.w	r6, r0, #12
   21504:	2102      	movs	r1, #2
   21506:	4605      	mov	r5, r0
   21508:	4630      	mov	r0, r6
   2150a:	f009 ff1f 	bl	2b34c <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   2150e:	233e      	movs	r3, #62	; 0x3e
   21510:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   21512:	2322      	movs	r3, #34	; 0x22
   21514:	7043      	strb	r3, [r0, #1]
   21516:	2101      	movs	r1, #1
   21518:	4630      	mov	r0, r6
   2151a:	f009 ff17 	bl	2b34c <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   2151e:	2309      	movs	r3, #9
   21520:	7003      	strb	r3, [r0, #0]
   21522:	2121      	movs	r1, #33	; 0x21
   21524:	4630      	mov	r0, r6
   21526:	f009 ff11 	bl	2b34c <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   2152a:	f800 4b01 	strb.w	r4, [r0], #1

	if (status) {
   2152e:	b134      	cbz	r4, 2153e <ecdh_p256_common_secret+0x8a>
		memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   21530:	2220      	movs	r2, #32
   21532:	21ff      	movs	r1, #255	; 0xff
   21534:	f007 fd03 	bl	28f3e <memset>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
				sizeof(ecdh.dhkey_be));
	}

	return buf;
}
   21538:	4628      	mov	r0, r5
   2153a:	46bd      	mov	sp, r7
   2153c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
   2153e:	4906      	ldr	r1, [pc, #24]	; (21558 <ecdh_p256_common_secret+0xa4>)
   21540:	f00a fa49 	bl	2b9d6 <sys_memcpy_swap.constprop.0>
   21544:	e7f8      	b.n	21538 <ecdh_p256_common_secret+0x84>
   21546:	bf00      	nop
   21548:	200046f7 	.word	0x200046f7
   2154c:	000304ae 	.word	0x000304ae
   21550:	00030470 	.word	0x00030470
   21554:	0002cb54 	.word	0x0002cb54
   21558:	20004717 	.word	0x20004717

0002155c <ecdh_cmd_process>:

void ecdh_cmd_process(void)
{
   2155c:	b5f0      	push	{r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2155e:	4c42      	ldr	r4, [pc, #264]	; (21668 <ecdh_cmd_process+0x10c>)
   21560:	f3bf 8f5b 	dmb	ish
   21564:	6823      	ldr	r3, [r4, #0]
   21566:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	switch (atomic_get(&cmd)) {
   2156a:	2b02      	cmp	r3, #2
{
   2156c:	b087      	sub	sp, #28
   2156e:	4627      	mov	r7, r4
	switch (atomic_get(&cmd)) {
   21570:	d05a      	beq.n	21628 <ecdh_cmd_process+0xcc>
   21572:	2b04      	cmp	r3, #4
   21574:	d05d      	beq.n	21632 <ecdh_cmd_process+0xd6>
   21576:	2b01      	cmp	r3, #1
   21578:	d15d      	bne.n	21636 <ecdh_cmd_process+0xda>
		err = bt_rand(ecdh.private_key_be, 32);
   2157a:	4c3c      	ldr	r4, [pc, #240]	; (2166c <ecdh_cmd_process+0x110>)
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   2157c:	4e3c      	ldr	r6, [pc, #240]	; (21670 <ecdh_cmd_process+0x114>)
		err = bt_rand(ecdh.private_key_be, 32);
   2157e:	2120      	movs	r1, #32
   21580:	4620      	mov	r0, r4
   21582:	f7ff ff81 	bl	21488 <bt_rand>
		if (err) {
   21586:	2800      	cmp	r0, #0
   21588:	d143      	bne.n	21612 <ecdh_cmd_process+0xb6>
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   2158a:	2220      	movs	r2, #32
   2158c:	4631      	mov	r1, r6
   2158e:	4620      	mov	r0, r4
   21590:	f007 fca3 	bl	28eda <memcmp>
   21594:	2800      	cmp	r0, #0
   21596:	d0f2      	beq.n	2157e <ecdh_cmd_process+0x22>
		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
   21598:	4836      	ldr	r0, [pc, #216]	; (21674 <ecdh_cmd_process+0x118>)
   2159a:	4621      	mov	r1, r4
   2159c:	f002 ff18 	bl	243d0 <ocrypto_ecdh_p256_public_key>
	} while (err);
   215a0:	4605      	mov	r5, r0
   215a2:	2800      	cmp	r0, #0
   215a4:	d1eb      	bne.n	2157e <ecdh_cmd_process+0x22>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   215a6:	f04f 32ff 	mov.w	r2, #4294967295
   215aa:	f04f 33ff 	mov.w	r3, #4294967295
   215ae:	2001      	movs	r0, #1
   215b0:	f7f4 fc52 	bl	15e58 <bt_buf_get_rx>
   215b4:	f100 060c 	add.w	r6, r0, #12
   215b8:	2102      	movs	r1, #2
   215ba:	4604      	mov	r4, r0
   215bc:	4630      	mov	r0, r6
   215be:	f009 fec5 	bl	2b34c <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   215c2:	233e      	movs	r3, #62	; 0x3e
   215c4:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   215c6:	2342      	movs	r3, #66	; 0x42
   215c8:	7043      	strb	r3, [r0, #1]
   215ca:	2101      	movs	r1, #1
   215cc:	4630      	mov	r0, r6
   215ce:	f009 febd 	bl	2b34c <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   215d2:	2308      	movs	r3, #8
   215d4:	7003      	strb	r3, [r0, #0]
   215d6:	2141      	movs	r1, #65	; 0x41
   215d8:	4630      	mov	r0, r6
   215da:	f009 feb7 	bl	2b34c <net_buf_simple_add>
   215de:	4606      	mov	r6, r0
	evt->status = status;
   215e0:	f800 5b01 	strb.w	r5, [r0], #1
	if (status) {
   215e4:	b1bd      	cbz	r5, 21616 <ecdh_cmd_process+0xba>
		(void)memset(evt->key, 0, sizeof(evt->key));
   215e6:	2240      	movs	r2, #64	; 0x40
   215e8:	2100      	movs	r1, #0
   215ea:	f007 fca8 	bl	28f3e <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   215ee:	f3bf 8f5b 	dmb	ish
   215f2:	2300      	movs	r3, #0
   215f4:	e857 2f00 	ldrex	r2, [r7]
   215f8:	e847 3100 	strex	r1, r3, [r7]
   215fc:	2900      	cmp	r1, #0
   215fe:	d1f9      	bne.n	215f4 <ecdh_cmd_process+0x98>
   21600:	f3bf 8f5b 	dmb	ish
		buf = NULL;
		break;
	}

	atomic_set(&cmd, 0);
	if (buf) {
   21604:	b36c      	cbz	r4, 21662 <ecdh_cmd_process+0x106>
		bt_recv(buf);
   21606:	4620      	mov	r0, r4
	}
}
   21608:	b007      	add	sp, #28
   2160a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_recv(buf);
   2160e:	f7f5 bf19 	b.w	17444 <bt_recv>
			return BT_HCI_ERR_UNSPECIFIED;
   21612:	251f      	movs	r5, #31
   21614:	e7c7      	b.n	215a6 <ecdh_cmd_process+0x4a>
		sys_memcpy_swap(&evt->key[0], &ecdh.public_key_be[0], 32);
   21616:	4917      	ldr	r1, [pc, #92]	; (21674 <ecdh_cmd_process+0x118>)
   21618:	f00a f9dd 	bl	2b9d6 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecdh.public_key_be[32], 32);
   2161c:	3120      	adds	r1, #32
   2161e:	f106 0021 	add.w	r0, r6, #33	; 0x21
   21622:	f00a f9d8 	bl	2b9d6 <sys_memcpy_swap.constprop.0>
		break;
   21626:	e7e2      	b.n	215ee <ecdh_cmd_process+0x92>
		buf = ecdh_p256_common_secret(false);
   21628:	2000      	movs	r0, #0
		buf = ecdh_p256_common_secret(true);
   2162a:	f7ff ff43 	bl	214b4 <ecdh_p256_common_secret>
   2162e:	4604      	mov	r4, r0
		break;
   21630:	e7dd      	b.n	215ee <ecdh_cmd_process+0x92>
		buf = ecdh_p256_common_secret(true);
   21632:	2001      	movs	r0, #1
   21634:	e7f9      	b.n	2162a <ecdh_cmd_process+0xce>
		LOG_WRN("Unknown command");
   21636:	4b10      	ldr	r3, [pc, #64]	; (21678 <ecdh_cmd_process+0x11c>)
   21638:	9305      	str	r3, [sp, #20]
   2163a:	2302      	movs	r3, #2
   2163c:	9304      	str	r3, [sp, #16]
   2163e:	2300      	movs	r3, #0
   21640:	480e      	ldr	r0, [pc, #56]	; (2167c <ecdh_cmd_process+0x120>)
   21642:	aa04      	add	r2, sp, #16
   21644:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   21648:	f7f2 fabc 	bl	13bc4 <z_impl_z_log_msg_static_create>
   2164c:	f3bf 8f5b 	dmb	ish
   21650:	2300      	movs	r3, #0
   21652:	e854 2f00 	ldrex	r2, [r4]
   21656:	e844 3100 	strex	r1, r3, [r4]
   2165a:	2900      	cmp	r1, #0
   2165c:	d1f9      	bne.n	21652 <ecdh_cmd_process+0xf6>
   2165e:	f3bf 8f5b 	dmb	ish
}
   21662:	b007      	add	sp, #28
   21664:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21666:	bf00      	nop
   21668:	200038ac 	.word	0x200038ac
   2166c:	200046f7 	.word	0x200046f7
   21670:	000304ae 	.word	0x000304ae
   21674:	20004717 	.word	0x20004717
   21678:	00030491 	.word	0x00030491
   2167c:	0002cb54 	.word	0x0002cb54

00021680 <ecdh_thread>:
{
	k_poll_signal_raise(&ecdh_signal, 0);
}

static void ecdh_thread(void *p1, void *p2, void *p3)
{
   21680:	b510      	push	{r4, lr}
   21682:	b086      	sub	sp, #24
	struct k_poll_event events[1] = {
   21684:	2210      	movs	r2, #16
   21686:	2100      	movs	r1, #0
   21688:	a801      	add	r0, sp, #4
   2168a:	f007 fc58 	bl	28f3e <memset>
   2168e:	4c0b      	ldr	r4, [pc, #44]	; (216bc <ecdh_thread+0x3c>)
   21690:	9405      	str	r4, [sp, #20]
   21692:	2301      	movs	r3, #1
   21694:	f88d 3011 	strb.w	r3, [sp, #17]
	return z_impl_k_poll(events, num_events, timeout);
   21698:	f04f 32ff 	mov.w	r2, #4294967295
   2169c:	f04f 33ff 	mov.w	r3, #4294967295
   216a0:	2101      	movs	r1, #1
   216a2:	a801      	add	r0, sp, #4
   216a4:	f002 fdea 	bl	2427c <z_impl_k_poll>
	z_impl_k_poll_signal_reset(sig);
   216a8:	4620      	mov	r0, r4
   216aa:	f00b f824 	bl	2c6f6 <z_impl_k_poll_signal_reset>

	while (true) {
		k_poll(events, 1, K_FOREVER);

		k_poll_signal_reset(&ecdh_signal);
		events[0].state = K_POLL_STATE_NOT_READY;
   216ae:	9b04      	ldr	r3, [sp, #16]
   216b0:	f36f 3394 	bfc	r3, #14, #7
   216b4:	9304      	str	r3, [sp, #16]

		ecdh_cmd_process();
   216b6:	f7ff ff51 	bl	2155c <ecdh_cmd_process>
	while (true) {
   216ba:	e7ed      	b.n	21698 <ecdh_thread+0x18>
   216bc:	2000389c 	.word	0x2000389c

000216c0 <hci_ecdh_init>:
	}
}
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */

void hci_ecdh_init(void)
{
   216c0:	b510      	push	{r4, lr}
   216c2:	b088      	sub	sp, #32
	z_impl_k_poll_signal_init(sig);
   216c4:	480e      	ldr	r0, [pc, #56]	; (21700 <hci_ecdh_init+0x40>)
   216c6:	f00b f811 	bl	2c6ec <z_impl_k_poll_signal_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   216ca:	4c0e      	ldr	r4, [pc, #56]	; (21704 <hci_ecdh_init+0x44>)
   216cc:	490e      	ldr	r1, [pc, #56]	; (21708 <hci_ecdh_init+0x48>)
   216ce:	2200      	movs	r2, #0
   216d0:	2300      	movs	r3, #0
   216d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   216d6:	2300      	movs	r3, #0
   216d8:	220a      	movs	r2, #10
   216da:	e9cd 2303 	strd	r2, r3, [sp, #12]
   216de:	e9cd 3301 	strd	r3, r3, [sp, #4]
   216e2:	9300      	str	r3, [sp, #0]
   216e4:	f44f 7262 	mov.w	r2, #904	; 0x388
   216e8:	4b08      	ldr	r3, [pc, #32]	; (2170c <hci_ecdh_init+0x4c>)
   216ea:	4620      	mov	r0, r4
   216ec:	f001 fc84 	bl	22ff8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   216f0:	4907      	ldr	r1, [pc, #28]	; (21710 <hci_ecdh_init+0x50>)
   216f2:	4620      	mov	r0, r4
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecdh_thread_data, "BT CTLR ECDH");
#else
	k_work_init(&ecdh_work, ecdh_work_handler);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   216f4:	b008      	add	sp, #32
   216f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   216fa:	f00a bb31 	b.w	2bd60 <z_impl_k_thread_name_set>
   216fe:	bf00      	nop
   21700:	2000389c 	.word	0x2000389c
   21704:	20002b30 	.word	0x20002b30
   21708:	200067c0 	.word	0x200067c0
   2170c:	00021681 	.word	0x00021681
   21710:	000304a1 	.word	0x000304a1

00021714 <hci_ecdh_uninit>:
	z_impl_k_thread_abort(thread);
   21714:	4801      	ldr	r0, [pc, #4]	; (2171c <hci_ecdh_uninit+0x8>)
   21716:	f7f4 b80d 	b.w	15734 <z_impl_k_thread_abort>
   2171a:	bf00      	nop
   2171c:	20002b30 	.word	0x20002b30

00021720 <hci_cmd_le_read_local_p256_public_key>:
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}


uint8_t hci_cmd_le_read_local_p256_public_key(void)
{
   21720:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   21722:	4b0b      	ldr	r3, [pc, #44]	; (21750 <hci_cmd_le_read_local_p256_public_key+0x30>)
   21724:	f3bf 8f5b 	dmb	ish
   21728:	2201      	movs	r2, #1
   2172a:	e853 1f00 	ldrex	r1, [r3]
   2172e:	2900      	cmp	r1, #0
   21730:	d103      	bne.n	2173a <hci_cmd_le_read_local_p256_public_key+0x1a>
   21732:	e843 2000 	strex	r0, r2, [r3]
   21736:	2800      	cmp	r0, #0
   21738:	d1f7      	bne.n	2172a <hci_cmd_le_read_local_p256_public_key+0xa>
   2173a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&cmd, 0, GEN_PUBLIC_KEY)) {
   2173e:	d105      	bne.n	2174c <hci_cmd_le_read_local_p256_public_key+0x2c>
	return z_impl_k_poll_signal_raise(sig, result);
   21740:	4804      	ldr	r0, [pc, #16]	; (21754 <hci_cmd_le_read_local_p256_public_key+0x34>)
   21742:	2100      	movs	r1, #0
   21744:	f002 fdf6 	bl	24334 <z_impl_k_poll_signal_raise>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	work_submit();

	return 0;
   21748:	2000      	movs	r0, #0
}
   2174a:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   2174c:	200c      	movs	r0, #12
   2174e:	e7fc      	b.n	2174a <hci_cmd_le_read_local_p256_public_key+0x2a>
   21750:	200038ac 	.word	0x200038ac
   21754:	2000389c 	.word	0x2000389c

00021758 <cmd_le_generate_dhkey>:

uint8_t cmd_le_generate_dhkey(uint8_t *key, uint8_t key_type)
{
   21758:	b510      	push	{r4, lr}
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   2175a:	2900      	cmp	r1, #0
   2175c:	4b11      	ldr	r3, [pc, #68]	; (217a4 <cmd_le_generate_dhkey+0x4c>)
   2175e:	f3bf 8f5b 	dmb	ish
{
   21762:	4604      	mov	r4, r0
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   21764:	bf0c      	ite	eq
   21766:	2202      	moveq	r2, #2
   21768:	2204      	movne	r2, #4
   2176a:	e853 1f00 	ldrex	r1, [r3]
   2176e:	2900      	cmp	r1, #0
   21770:	d103      	bne.n	2177a <cmd_le_generate_dhkey+0x22>
   21772:	e843 2000 	strex	r0, r2, [r3]
   21776:	2800      	cmp	r0, #0
   21778:	d1f7      	bne.n	2176a <cmd_le_generate_dhkey+0x12>
   2177a:	f3bf 8f5b 	dmb	ish
   2177e:	d10e      	bne.n	2179e <cmd_le_generate_dhkey+0x46>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	sys_memcpy_swap(&ecdh.public_key_be[0], &key[0], 32);
   21780:	4621      	mov	r1, r4
   21782:	4809      	ldr	r0, [pc, #36]	; (217a8 <cmd_le_generate_dhkey+0x50>)
   21784:	f00a f927 	bl	2b9d6 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecdh.public_key_be[32], &key[32], 32);
   21788:	4808      	ldr	r0, [pc, #32]	; (217ac <cmd_le_generate_dhkey+0x54>)
   2178a:	f104 0120 	add.w	r1, r4, #32
   2178e:	f00a f922 	bl	2b9d6 <sys_memcpy_swap.constprop.0>
   21792:	4807      	ldr	r0, [pc, #28]	; (217b0 <cmd_le_generate_dhkey+0x58>)
   21794:	2100      	movs	r1, #0
   21796:	f002 fdcd 	bl	24334 <z_impl_k_poll_signal_raise>

	work_submit();

	return 0;
   2179a:	2000      	movs	r0, #0
}
   2179c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   2179e:	200c      	movs	r0, #12
   217a0:	e7fc      	b.n	2179c <cmd_le_generate_dhkey+0x44>
   217a2:	bf00      	nop
   217a4:	200038ac 	.word	0x200038ac
   217a8:	20004717 	.word	0x20004717
   217ac:	20004737 	.word	0x20004737
   217b0:	2000389c 	.word	0x2000389c

000217b4 <mpsl_low_prio_irq_handler>:
static uint8_t __aligned(4) timeslot_context[TIMESLOT_MEM_SIZE];
#endif

static void mpsl_low_prio_irq_handler(const void *arg)
{
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   217b4:	4901      	ldr	r1, [pc, #4]	; (217bc <mpsl_low_prio_irq_handler+0x8>)
   217b6:	4802      	ldr	r0, [pc, #8]	; (217c0 <mpsl_low_prio_irq_handler+0xc>)
   217b8:	f00a bc36 	b.w	2c028 <k_work_submit_to_queue>
   217bc:	200038e0 	.word	0x200038e0
   217c0:	20002bb0 	.word	0x20002bb0

000217c4 <mpsl_lib_init_sys>:

	return 0;
}

static int mpsl_lib_init_sys(void)
{
   217c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   217c6:	2332      	movs	r3, #50	; 0x32
   217c8:	f8ad 3004 	strh.w	r3, [sp, #4]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   217cc:	4a13      	ldr	r2, [pc, #76]	; (2181c <mpsl_lib_init_sys+0x58>)
	clock_cfg.skip_wait_lfclk_started =
   217ce:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   217d0:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   217d2:	2119      	movs	r1, #25
   217d4:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   217d6:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   217da:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   217de:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   217e2:	f7ea fe6d 	bl	c4c0 <mpsl_init>
	if (err) {
   217e6:	4604      	mov	r4, r0
   217e8:	b9a0      	cbnz	r0, 21814 <mpsl_lib_init_sys+0x50>
	err = mpsl_timeslot_session_count_set((void *) timeslot_context,
   217ea:	480d      	ldr	r0, [pc, #52]	; (21820 <mpsl_lib_init_sys+0x5c>)
   217ec:	4629      	mov	r1, r5
   217ee:	f7ef f97e 	bl	10aee <mpsl_timeslot_session_count_set>
	int err = 0;

	err = mpsl_lib_init_internal();
	if (err) {
   217f2:	4604      	mov	r4, r0
   217f4:	b970      	cbnz	r0, 21814 <mpsl_lib_init_sys+0x50>
	ARM_IRQ_DIRECT_DYNAMIC_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			IRQ_CONNECT_FLAGS, reschedule);

	mpsl_lib_irq_connect();
#else /* !IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   217f6:	4601      	mov	r1, r0
   217f8:	462a      	mov	r2, r5
   217fa:	2008      	movs	r0, #8
   217fc:	f7f3 fb08 	bl	14e10 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   21800:	462a      	mov	r2, r5
   21802:	4621      	mov	r1, r4
   21804:	200b      	movs	r0, #11
   21806:	f7f3 fb03 	bl	14e10 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   2180a:	462a      	mov	r2, r5
   2180c:	4621      	mov	r1, r4
   2180e:	4628      	mov	r0, r5
   21810:	f7f3 fafe 	bl	14e10 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);
#endif /* IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */

	return 0;
}
   21814:	4620      	mov	r0, r4
   21816:	b003      	add	sp, #12
   21818:	bd30      	pop	{r4, r5, pc}
   2181a:	bf00      	nop
   2181c:	00021825 	.word	0x00021825
   21820:	200038b0 	.word	0x200038b0

00021824 <m_assert_handler>:
{
   21824:	b598      	push	{r3, r4, r7, lr}
   21826:	af00      	add	r7, sp, #0
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   21828:	466c      	mov	r4, sp
   2182a:	b08a      	sub	sp, #40	; 0x28
   2182c:	466a      	mov	r2, sp
   2182e:	4b0c      	ldr	r3, [pc, #48]	; (21860 <m_assert_handler+0x3c>)
   21830:	61d1      	str	r1, [r2, #28]
   21832:	e9c2 3005 	strd	r3, r0, [r2, #20]
   21836:	f44f 7300 	mov.w	r3, #512	; 0x200
   2183a:	8413      	strh	r3, [r2, #32]
   2183c:	4b09      	ldr	r3, [pc, #36]	; (21864 <m_assert_handler+0x40>)
   2183e:	f842 3f10 	str.w	r3, [r2, #16]!
   21842:	4809      	ldr	r0, [pc, #36]	; (21868 <m_assert_handler+0x44>)
   21844:	2300      	movs	r3, #0
   21846:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   2184a:	f7f2 f9bb 	bl	13bc4 <z_impl_z_log_msg_static_create>
   2184e:	46a5      	mov	sp, r4
	k_oops();
   21850:	4040      	eors	r0, r0
   21852:	f380 8811 	msr	BASEPRI, r0
   21856:	f04f 0003 	mov.w	r0, #3
   2185a:	df02      	svc	2
}
   2185c:	46bd      	mov	sp, r7
   2185e:	bd98      	pop	{r3, r4, r7, pc}
   21860:	000304da 	.word	0x000304da
   21864:	01000004 	.word	0x01000004
   21868:	0002cbc4 	.word	0x0002cbc4

0002186c <mpsl_low_prio_init>:

static int mpsl_low_prio_init(void)
{
   2186c:	b537      	push	{r0, r1, r2, r4, r5, lr}

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   2186e:	4d0d      	ldr	r5, [pc, #52]	; (218a4 <mpsl_low_prio_init+0x38>)
   21870:	490d      	ldr	r1, [pc, #52]	; (218a8 <mpsl_low_prio_init+0x3c>)
   21872:	2400      	movs	r4, #0
   21874:	9400      	str	r4, [sp, #0]
   21876:	f06f 0309 	mvn.w	r3, #9
   2187a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2187e:	4628      	mov	r0, r5
   21880:	f001 feec 	bl	2365c <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   21884:	4909      	ldr	r1, [pc, #36]	; (218ac <mpsl_low_prio_init+0x40>)
   21886:	4628      	mov	r0, r5
   21888:	f00a fa6a 	bl	2bd60 <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   2188c:	4908      	ldr	r1, [pc, #32]	; (218b0 <mpsl_low_prio_init+0x44>)
   2188e:	4809      	ldr	r0, [pc, #36]	; (218b4 <mpsl_low_prio_init+0x48>)
   21890:	f00a fb9d 	bl	2bfce <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   21894:	4622      	mov	r2, r4
   21896:	2104      	movs	r1, #4
   21898:	2019      	movs	r0, #25
   2189a:	f7f3 fab9 	bl	14e10 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   2189e:	4620      	mov	r0, r4
   218a0:	b003      	add	sp, #12
   218a2:	bd30      	pop	{r4, r5, pc}
   218a4:	20002bb0 	.word	0x20002bb0
   218a8:	20006bc0 	.word	0x20006bc0
   218ac:	000304ee 	.word	0x000304ee
   218b0:	0002ba1f 	.word	0x0002ba1f
   218b4:	200038e0 	.word	0x200038e0

000218b8 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   218b8:	4b01      	ldr	r3, [pc, #4]	; (218c0 <mpsl_hfclk_callback+0x8>)
   218ba:	2000      	movs	r0, #0
   218bc:	681b      	ldr	r3, [r3, #0]
   218be:	4718      	bx	r3
   218c0:	200038f0 	.word	0x200038f0

000218c4 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
   218c4:	b120      	cbz	r0, 218d0 <nrfx_clock_start+0xc>
   218c6:	2801      	cmp	r0, #1
   218c8:	d106      	bne.n	218d8 <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   218ca:	4804      	ldr	r0, [pc, #16]	; (218dc <nrfx_clock_start+0x18>)
   218cc:	f7ea bc5a 	b.w	c184 <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   218d0:	4b03      	ldr	r3, [pc, #12]	; (218e0 <nrfx_clock_start+0x1c>)
   218d2:	2001      	movs	r0, #1
   218d4:	681b      	ldr	r3, [r3, #0]
   218d6:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   218d8:	4770      	bx	lr
   218da:	bf00      	nop
   218dc:	000218b9 	.word	0x000218b9
   218e0:	200038f0 	.word	0x200038f0

000218e4 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   218e4:	4b01      	ldr	r3, [pc, #4]	; (218ec <nrfx_clock_init+0x8>)
   218e6:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   218e8:	4801      	ldr	r0, [pc, #4]	; (218f0 <nrfx_clock_init+0xc>)
   218ea:	4770      	bx	lr
   218ec:	200038f0 	.word	0x200038f0
   218f0:	0bad0000 	.word	0x0bad0000

000218f4 <timeslot_callback>:
		      "mpsl_timeslot_request failed: %d", ret);
}

static mpsl_timeslot_signal_return_param_t *
timeslot_callback(mpsl_timeslot_session_id_t session_id, uint32_t signal)
{
   218f4:	b510      	push	{r4, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   218f6:	481d      	ldr	r0, [pc, #116]	; (2196c <timeslot_callback+0x78>)
   218f8:	f3bf 8f5b 	dmb	ish
   218fc:	6803      	ldr	r3, [r0, #0]
   218fe:	f3bf 8f5b 	dmb	ish
	int rc;
	__ASSERT_NO_MSG(session_id == _context.session_id);

	if (atomic_get(&_context.timeout_occured)) {
   21902:	b923      	cbnz	r3, 2190e <timeslot_callback+0x1a>
		return NULL;
	}

	switch (signal) {
   21904:	2906      	cmp	r1, #6
   21906:	d804      	bhi.n	21912 <timeslot_callback+0x1e>
   21908:	2904      	cmp	r1, #4
   2190a:	d823      	bhi.n	21954 <timeslot_callback+0x60>
   2190c:	b139      	cbz	r1, 2191e <timeslot_callback+0x2a>
		return NULL;
   2190e:	2000      	movs	r0, #0
		__ASSERT(false, "unexpected signal: %u", signal);
		return NULL;
	}

	return &_context.return_param;
}
   21910:	bd10      	pop	{r4, pc}
	switch (signal) {
   21912:	2907      	cmp	r1, #7
   21914:	d1fb      	bne.n	2190e <timeslot_callback+0x1a>
	z_impl_k_sem_give(sem);
   21916:	3840      	subs	r0, #64	; 0x40
   21918:	f001 fcfc 	bl	23314 <z_impl_k_sem_give>
}
   2191c:	e7f7      	b.n	2190e <timeslot_callback+0x1a>
		rc = _context.op_desc->handler(_context.op_desc->context);
   2191e:	f850 3c20 	ldr.w	r3, [r0, #-32]
   21922:	f1a0 0440 	sub.w	r4, r0, #64	; 0x40
   21926:	e9d3 2000 	ldrd	r2, r0, [r3]
   2192a:	4790      	blx	r2
		if (rc != FLASH_OP_ONGOING) {
   2192c:	2801      	cmp	r0, #1
   2192e:	d005      	beq.n	2193c <timeslot_callback+0x48>
			_context.return_param.callback_action =
   21930:	2302      	movs	r3, #2
			_context.status = (rc == FLASH_OP_DONE) ? 0 : rc;
   21932:	63e0      	str	r0, [r4, #60]	; 0x3c
			_context.return_param.callback_action =
   21934:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		return NULL;
   21938:	480d      	ldr	r0, [pc, #52]	; (21970 <timeslot_callback+0x7c>)
   2193a:	e7e9      	b.n	21910 <timeslot_callback+0x1c>
			_context.timeslot_request.params.earliest.timeout_us =
   2193c:	f247 5330 	movw	r3, #30000	; 0x7530
   21940:	6323      	str	r3, [r4, #48]	; 0x30
			_context.return_param.callback_action =
   21942:	2303      	movs	r3, #3
   21944:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			_context.return_param.params.request.p_next =
   21948:	f104 0324 	add.w	r3, r4, #36	; 0x24
			_context.timeslot_request.params.earliest.priority =
   2194c:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
			_context.return_param.params.request.p_next =
   21950:	63a3      	str	r3, [r4, #56]	; 0x38
   21952:	e7f1      	b.n	21938 <timeslot_callback+0x44>
	_context.timeslot_request.params.earliest.priority =
   21954:	f800 3c17 	strb.w	r3, [r0, #-23]
	_context.timeslot_request.params.earliest.timeout_us =
   21958:	4b06      	ldr	r3, [pc, #24]	; (21974 <timeslot_callback+0x80>)
   2195a:	f840 3c10 	str.w	r3, [r0, #-16]
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   2195e:	f1a0 011c 	sub.w	r1, r0, #28
	_context.timeslot_request.params.earliest.priority =
   21962:	3840      	subs	r0, #64	; 0x40
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   21964:	7e00      	ldrb	r0, [r0, #24]
   21966:	f7ef f866 	bl	10a36 <mpsl_timeslot_request>
}
   2196a:	e7d0      	b.n	2190e <timeslot_callback+0x1a>
   2196c:	20003934 	.word	0x20003934
   21970:	20003928 	.word	0x20003928
   21974:	0f423fff 	.word	0x0f423fff

00021978 <nrf_flash_sync_init>:
	return z_impl_k_sem_init(sem, initial_count, limit);
   21978:	4802      	ldr	r0, [pc, #8]	; (21984 <nrf_flash_sync_init+0xc>)
   2197a:	2201      	movs	r2, #1
   2197c:	2100      	movs	r1, #0
   2197e:	f00a baa3 	b.w	2bec8 <z_impl_k_sem_init>
   21982:	bf00      	nop
   21984:	200038f4 	.word	0x200038f4

00021988 <nrf_flash_sync_set_context>:
}

void nrf_flash_sync_set_context(uint32_t duration)
{
	LOG_DBG("duration: %u", duration);
	_context.request_length_us = duration;
   21988:	4b01      	ldr	r3, [pc, #4]	; (21990 <nrf_flash_sync_set_context+0x8>)
   2198a:	61d8      	str	r0, [r3, #28]
}
   2198c:	4770      	bx	lr
   2198e:	bf00      	nop
   21990:	200038f4 	.word	0x200038f4

00021994 <nrf_flash_sync_exe>:
{
	return mpsl_is_initialized();
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
   21994:	b5f0      	push	{r4, r5, r6, r7, lr}
   21996:	b087      	sub	sp, #28
	LOG_DBG("");

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   21998:	f04f 31ff 	mov.w	r1, #4294967295
{
   2199c:	af00      	add	r7, sp, #0
   2199e:	4605      	mov	r5, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   219a0:	f04f 30ff 	mov.w	r0, #4294967295
   219a4:	f7fe ff1c 	bl	207e0 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
	int32_t ret = mpsl_timeslot_session_open(timeslot_callback,
   219a8:	493d      	ldr	r1, [pc, #244]	; (21aa0 <nrf_flash_sync_exe+0x10c>)
   219aa:	483e      	ldr	r0, [pc, #248]	; (21aa4 <nrf_flash_sync_exe+0x110>)
   219ac:	f7e7 f924 	bl	8bf8 <mpsl_timeslot_session_open>
   219b0:	4604      	mov	r4, r0
						 &_context.session_id);
	MULTITHREADING_LOCK_RELEASE();
   219b2:	f7fe ff1d 	bl	207f0 <multithreading_lock_release>

	if (ret < 0) {
   219b6:	2c00      	cmp	r4, #0
   219b8:	da14      	bge.n	219e4 <nrf_flash_sync_exe+0x50>
		LOG_ERR("mpsl_timeslot_session_open failed: %d", ret);
   219ba:	466d      	mov	r5, sp
   219bc:	b088      	sub	sp, #32
   219be:	466a      	mov	r2, sp
   219c0:	4b39      	ldr	r3, [pc, #228]	; (21aa8 <nrf_flash_sync_exe+0x114>)
   219c2:	e9c2 3405 	strd	r3, r4, [r2, #20]
   219c6:	2303      	movs	r3, #3
   219c8:	f842 3f10 	str.w	r3, [r2, #16]!
   219cc:	4837      	ldr	r0, [pc, #220]	; (21aac <nrf_flash_sync_exe+0x118>)
   219ce:	2300      	movs	r3, #0
   219d0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   219d4:	f7f2 f8f6 	bl	13bc4 <z_impl_z_log_msg_static_create>
		return -ENOMEM;
   219d8:	f06f 000b 	mvn.w	r0, #11
   219dc:	46ad      	mov	sp, r5
	if (atomic_get(&_context.timeout_occured)) {
		k_sem_reset(&_context.timeout_sem);
	}

	return _context.status;
}
   219de:	371c      	adds	r7, #28
   219e0:	46bd      	mov	sp, r7
   219e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   219e4:	4c32      	ldr	r4, [pc, #200]	; (21ab0 <nrf_flash_sync_exe+0x11c>)
	req->params.earliest.hfclk = MPSL_TIMESLOT_HFCLK_CFG_NO_GUARANTEE;
   219e6:	f240 1301 	movw	r3, #257	; 0x101
   219ea:	8523      	strh	r3, [r4, #40]	; 0x28
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   219ec:	69e3      	ldr	r3, [r4, #28]
	_context.op_desc = op_desc;
   219ee:	6225      	str	r5, [r4, #32]
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   219f0:	3364      	adds	r3, #100	; 0x64
	req->params.earliest.length_us =
   219f2:	62e3      	str	r3, [r4, #44]	; 0x2c
	req->params.earliest.timeout_us = TIMESLOT_TIMEOUT_PRIORITY_NORMAL_US;
   219f4:	f247 5330 	movw	r3, #30000	; 0x7530
   219f8:	6323      	str	r3, [r4, #48]	; 0x30
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   219fa:	2600      	movs	r6, #0
	_context.status = -ETIMEDOUT;
   219fc:	f06f 0373 	mvn.w	r3, #115	; 0x73
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   21a00:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
	_context.status = -ETIMEDOUT;
   21a04:	63e3      	str	r3, [r4, #60]	; 0x3c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   21a06:	f104 0540 	add.w	r5, r4, #64	; 0x40
   21a0a:	f3bf 8f5b 	dmb	ish
   21a0e:	e855 3f00 	ldrex	r3, [r5]
   21a12:	e845 6200 	strex	r2, r6, [r5]
   21a16:	2a00      	cmp	r2, #0
   21a18:	d1f9      	bne.n	21a0e <nrf_flash_sync_exe+0x7a>
   21a1a:	f3bf 8f5b 	dmb	ish
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   21a1e:	f04f 31ff 	mov.w	r1, #4294967295
   21a22:	f04f 30ff 	mov.w	r0, #4294967295
   21a26:	f7fe fedb 	bl	207e0 <multithreading_lock_acquire>
	ret = mpsl_timeslot_request(_context.session_id, req);
   21a2a:	f104 0124 	add.w	r1, r4, #36	; 0x24
   21a2e:	7e20      	ldrb	r0, [r4, #24]
   21a30:	f7ef f801 	bl	10a36 <mpsl_timeslot_request>
	MULTITHREADING_LOCK_RELEASE();
   21a34:	f7fe fedc 	bl	207f0 <multithreading_lock_release>
	return z_impl_k_sem_take(sem, timeout);
   21a38:	4a1e      	ldr	r2, [pc, #120]	; (21ab4 <nrf_flash_sync_exe+0x120>)
   21a3a:	2300      	movs	r3, #0
   21a3c:	4620      	mov	r0, r4
   21a3e:	f001 fc8f 	bl	23360 <z_impl_k_sem_take>
	if (k_sem_take(&_context.timeout_sem, K_MSEC(FLASH_TIMEOUT_MS)) < 0) {
   21a42:	42b0      	cmp	r0, r6
   21a44:	da16      	bge.n	21a74 <nrf_flash_sync_exe+0xe0>
		LOG_ERR("timeout");
   21a46:	4b1c      	ldr	r3, [pc, #112]	; (21ab8 <nrf_flash_sync_exe+0x124>)
   21a48:	617b      	str	r3, [r7, #20]
   21a4a:	2302      	movs	r3, #2
   21a4c:	613b      	str	r3, [r7, #16]
   21a4e:	4817      	ldr	r0, [pc, #92]	; (21aac <nrf_flash_sync_exe+0x118>)
   21a50:	4633      	mov	r3, r6
   21a52:	f107 0210 	add.w	r2, r7, #16
   21a56:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   21a5a:	f7f2 f8b3 	bl	13bc4 <z_impl_z_log_msg_static_create>
   21a5e:	f3bf 8f5b 	dmb	ish
   21a62:	2301      	movs	r3, #1
   21a64:	e855 2f00 	ldrex	r2, [r5]
   21a68:	e845 3100 	strex	r1, r3, [r5]
   21a6c:	2900      	cmp	r1, #0
   21a6e:	d1f9      	bne.n	21a64 <nrf_flash_sync_exe+0xd0>
   21a70:	f3bf 8f5b 	dmb	ish
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   21a74:	f04f 31ff 	mov.w	r1, #4294967295
   21a78:	f04f 30ff 	mov.w	r0, #4294967295
   21a7c:	f7fe feb0 	bl	207e0 <multithreading_lock_acquire>
	mpsl_timeslot_session_close(_context.session_id);
   21a80:	7e20      	ldrb	r0, [r4, #24]
   21a82:	f7ef f813 	bl	10aac <mpsl_timeslot_session_close>
	MULTITHREADING_LOCK_RELEASE();
   21a86:	f7fe feb3 	bl	207f0 <multithreading_lock_release>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21a8a:	f3bf 8f5b 	dmb	ish
   21a8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   21a90:	f3bf 8f5b 	dmb	ish
	if (atomic_get(&_context.timeout_occured)) {
   21a94:	b113      	cbz	r3, 21a9c <nrf_flash_sync_exe+0x108>
	z_impl_k_sem_reset(sem);
   21a96:	4806      	ldr	r0, [pc, #24]	; (21ab0 <nrf_flash_sync_exe+0x11c>)
   21a98:	f001 fc8a 	bl	233b0 <z_impl_k_sem_reset>
	return _context.status;
   21a9c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   21a9e:	e79e      	b.n	219de <nrf_flash_sync_exe+0x4a>
   21aa0:	2000390c 	.word	0x2000390c
   21aa4:	000218f5 	.word	0x000218f5
   21aa8:	00030502 	.word	0x00030502
   21aac:	0002cb9c 	.word	0x0002cb9c
   21ab0:	200038f4 	.word	0x200038f4
   21ab4:	000b7b44 	.word	0x000b7b44
   21ab8:	0002f148 	.word	0x0002f148

00021abc <nrf_flash_sync_check_time_limit>:
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_timer_task_trigger(NRF_TIMER_Type * p_reg,
                                              nrf_timer_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21abc:	4b07      	ldr	r3, [pc, #28]	; (21adc <nrf_flash_sync_check_time_limit+0x20>)
   21abe:	2201      	movs	r2, #1
   21ac0:	641a      	str	r2, [r3, #64]	; 0x40
}

NRF_STATIC_INLINE uint32_t nrf_timer_cc_get(NRF_TIMER_Type const * p_reg,
                                            nrf_timer_cc_channel_t cc_channel)
{
    return (uint32_t)p_reg->CC[cc_channel];
   21ac2:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
	uint32_t now_us = get_timeslot_time_us();
	uint32_t time_per_iteration_us = now_us / iteration;
   21ac6:	fbb3 f0f0 	udiv	r0, r3, r0
	return now_us + time_per_iteration_us >= _context.request_length_us;
   21aca:	4418      	add	r0, r3
   21acc:	4b04      	ldr	r3, [pc, #16]	; (21ae0 <nrf_flash_sync_check_time_limit+0x24>)
   21ace:	69db      	ldr	r3, [r3, #28]
}
   21ad0:	4298      	cmp	r0, r3
   21ad2:	bf34      	ite	cc
   21ad4:	2000      	movcc	r0, #0
   21ad6:	2001      	movcs	r0, #1
   21ad8:	4770      	bx	lr
   21ada:	bf00      	nop
   21adc:	40008000 	.word	0x40008000
   21ae0:	200038f4 	.word	0x200038f4

00021ae4 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   21ae4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   21ae8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   21aec:	2a08      	cmp	r2, #8
   21aee:	d106      	bne.n	21afe <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   21af0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   21af4:	2b05      	cmp	r3, #5
   21af6:	d802      	bhi.n	21afe <nrf52_errata_103+0x1a>
   21af8:	4a02      	ldr	r2, [pc, #8]	; (21b04 <nrf52_errata_103+0x20>)
   21afa:	5cd0      	ldrb	r0, [r2, r3]
   21afc:	4770      	bx	lr
                        return false;
   21afe:	2000      	movs	r0, #0
}
   21b00:	4770      	bx	lr
   21b02:	bf00      	nop
   21b04:	0003053e 	.word	0x0003053e

00021b08 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   21b08:	4a02      	ldr	r2, [pc, #8]	; (21b14 <nvmc_wait+0xc>)
   21b0a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   21b0e:	2b00      	cmp	r3, #0
   21b10:	d0fb      	beq.n	21b0a <nvmc_wait+0x2>
}
   21b12:	4770      	bx	lr
   21b14:	4001e000 	.word	0x4001e000

00021b18 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
   21b18:	b510      	push	{r4, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   21b1a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   21b1e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   21b22:	2a08      	cmp	r2, #8
   21b24:	d14e      	bne.n	21bc4 <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
   21b26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   21b2a:	2100      	movs	r1, #0
   21b2c:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   21b30:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   21b34:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   21b38:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
   21b3c:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
   21b40:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   21b44:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
   21b48:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   21b4c:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
   21b50:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   21b54:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
   21b58:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   21b5c:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
   21b60:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   21b64:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   21b68:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   21b6c:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
   21b70:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   21b74:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
   21b78:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   21b7c:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
   21b80:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   21b84:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
   21b88:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   21b8c:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
   21b90:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   21b94:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
   21b98:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   21b9c:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
   21ba0:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   21ba4:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
   21ba8:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   21bac:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
   21bb0:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   21bb4:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
   21bb8:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   21bbc:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
   21bc0:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   21bc4:	f7ff ff8e 	bl	21ae4 <nrf52_errata_103>
   21bc8:	b118      	cbz	r0, 21bd2 <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   21bca:	4b3a      	ldr	r3, [pc, #232]	; (21cb4 <SystemInit+0x19c>)
   21bcc:	4a3a      	ldr	r2, [pc, #232]	; (21cb8 <SystemInit+0x1a0>)
   21bce:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   21bd2:	f7ff ff87 	bl	21ae4 <nrf52_errata_103>
   21bd6:	b118      	cbz	r0, 21be0 <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   21bd8:	4b38      	ldr	r3, [pc, #224]	; (21cbc <SystemInit+0x1a4>)
   21bda:	22fb      	movs	r2, #251	; 0xfb
   21bdc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   21be0:	f7ff ff80 	bl	21ae4 <nrf52_errata_103>
   21be4:	b170      	cbz	r0, 21c04 <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   21be6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   21bea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   21bee:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   21bf2:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   21bf6:	f022 020f 	bic.w	r2, r2, #15
   21bfa:	f003 030f 	and.w	r3, r3, #15
   21bfe:	4313      	orrs	r3, r2
   21c00:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   21c04:	f7ff ff6e 	bl	21ae4 <nrf52_errata_103>
   21c08:	b120      	cbz	r0, 21c14 <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   21c0a:	4b2d      	ldr	r3, [pc, #180]	; (21cc0 <SystemInit+0x1a8>)
   21c0c:	f44f 7200 	mov.w	r2, #512	; 0x200
   21c10:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   21c14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   21c18:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   21c1c:	2b08      	cmp	r3, #8
   21c1e:	d11a      	bne.n	21c56 <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   21c20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   21c24:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   21c28:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   21c2a:	bf44      	itt	mi
   21c2c:	f06f 0201 	mvnmi.w	r2, #1
   21c30:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   21c34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   21c38:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
   21c3c:	2b05      	cmp	r3, #5
   21c3e:	d802      	bhi.n	21c46 <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   21c40:	4a20      	ldr	r2, [pc, #128]	; (21cc4 <SystemInit+0x1ac>)
   21c42:	5cd3      	ldrb	r3, [r2, r3]
   21c44:	b13b      	cbz	r3, 21c56 <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   21c46:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   21c4a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   21c4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   21c52:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   21c56:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   21c5a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   21c5e:	2a00      	cmp	r2, #0
   21c60:	db03      	blt.n	21c6a <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   21c62:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   21c66:	2b00      	cmp	r3, #0
   21c68:	da22      	bge.n	21cb0 <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   21c6a:	4917      	ldr	r1, [pc, #92]	; (21cc8 <SystemInit+0x1b0>)
   21c6c:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   21c6e:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   21c72:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   21c76:	2412      	movs	r4, #18
    nvmc_wait();
   21c78:	f7ff ff46 	bl	21b08 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   21c7c:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   21c80:	f7ff ff42 	bl	21b08 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   21c84:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   21c88:	f7ff ff3e 	bl	21b08 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   21c8c:	2300      	movs	r3, #0
   21c8e:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   21c92:	f7ff ff39 	bl	21b08 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   21c96:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   21c9a:	490c      	ldr	r1, [pc, #48]	; (21ccc <SystemInit+0x1b4>)
   21c9c:	4b0c      	ldr	r3, [pc, #48]	; (21cd0 <SystemInit+0x1b8>)
   21c9e:	68ca      	ldr	r2, [r1, #12]
   21ca0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   21ca4:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   21ca6:	60cb      	str	r3, [r1, #12]
   21ca8:	f3bf 8f4f 	dsb	sy
    __NOP();
   21cac:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   21cae:	e7fd      	b.n	21cac <SystemInit+0x194>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
   21cb0:	bd10      	pop	{r4, pc}
   21cb2:	bf00      	nop
   21cb4:	40005000 	.word	0x40005000
   21cb8:	00038148 	.word	0x00038148
   21cbc:	4000f000 	.word	0x4000f000
   21cc0:	40029000 	.word	0x40029000
   21cc4:	00030538 	.word	0x00030538
   21cc8:	4001e000 	.word	0x4001e000
   21ccc:	e000ed00 	.word	0xe000ed00
   21cd0:	05fa0004 	.word	0x05fa0004

00021cd4 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   21cd4:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   21cd6:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   21cd8:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   21cda:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
   21cde:	fab2 f382 	clz	r3, r2
   21ce2:	f1c3 031f 	rsb	r3, r3, #31
   21ce6:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   21ce8:	fa05 f403 	lsl.w	r4, r5, r3
   21cec:	ea22 0404 	bic.w	r4, r2, r4
   21cf0:	e850 6f00 	ldrex	r6, [r0]
   21cf4:	4296      	cmp	r6, r2
   21cf6:	d104      	bne.n	21d02 <nrfx_flag32_alloc+0x2e>
   21cf8:	e840 4c00 	strex	ip, r4, [r0]
   21cfc:	f1bc 0f00 	cmp.w	ip, #0
   21d00:	d1f6      	bne.n	21cf0 <nrfx_flag32_alloc+0x1c>
   21d02:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   21d06:	d1e7      	bne.n	21cd8 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   21d08:	4801      	ldr	r0, [pc, #4]	; (21d10 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
   21d0a:	700b      	strb	r3, [r1, #0]
}
   21d0c:	bd70      	pop	{r4, r5, r6, pc}
   21d0e:	bf00      	nop
   21d10:	0bad0000 	.word	0x0bad0000

00021d14 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   21d14:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   21d16:	6803      	ldr	r3, [r0, #0]
   21d18:	40cb      	lsrs	r3, r1
   21d1a:	07db      	lsls	r3, r3, #31
   21d1c:	d414      	bmi.n	21d48 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   21d1e:	2301      	movs	r3, #1
   21d20:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   21d22:	6802      	ldr	r2, [r0, #0]
   21d24:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   21d28:	ea43 0102 	orr.w	r1, r3, r2
   21d2c:	e850 4f00 	ldrex	r4, [r0]
   21d30:	4294      	cmp	r4, r2
   21d32:	d104      	bne.n	21d3e <nrfx_flag32_free+0x2a>
   21d34:	e840 1c00 	strex	ip, r1, [r0]
   21d38:	f1bc 0f00 	cmp.w	ip, #0
   21d3c:	d1f6      	bne.n	21d2c <nrfx_flag32_free+0x18>
   21d3e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   21d42:	d1ee      	bne.n	21d22 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   21d44:	4801      	ldr	r0, [pc, #4]	; (21d4c <nrfx_flag32_free+0x38>)
}
   21d46:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   21d48:	4801      	ldr	r0, [pc, #4]	; (21d50 <nrfx_flag32_free+0x3c>)
   21d4a:	e7fc      	b.n	21d46 <nrfx_flag32_free+0x32>
   21d4c:	0bad0000 	.word	0x0bad0000
   21d50:	0bad0004 	.word	0x0bad0004

00021d54 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   21d54:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   21d56:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   21d5a:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
   21d5c:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   21d5e:	6002      	str	r2, [r0, #0]
}
   21d60:	4802      	ldr	r0, [pc, #8]	; (21d6c <nrf_gpio_pin_port_decode+0x18>)
   21d62:	bf18      	it	ne
   21d64:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   21d68:	4770      	bx	lr
   21d6a:	bf00      	nop
   21d6c:	50000300 	.word	0x50000300

00021d70 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   21d70:	4b03      	ldr	r3, [pc, #12]	; (21d80 <pin_in_use_by_te+0x10>)
   21d72:	3008      	adds	r0, #8
   21d74:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   21d78:	f3c0 1040 	ubfx	r0, r0, #5, #1
   21d7c:	4770      	bx	lr
   21d7e:	bf00      	nop
   21d80:	200007a8 	.word	0x200007a8

00021d84 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   21d84:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   21d86:	f100 0308 	add.w	r3, r0, #8
   21d8a:	4c0c      	ldr	r4, [pc, #48]	; (21dbc <call_handler+0x38>)
   21d8c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   21d90:	05da      	lsls	r2, r3, #23
{
   21d92:	4605      	mov	r5, r0
   21d94:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   21d96:	d507      	bpl.n	21da8 <call_handler+0x24>
   21d98:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   21d9c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   21da0:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   21da4:	6852      	ldr	r2, [r2, #4]
   21da6:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   21da8:	68a3      	ldr	r3, [r4, #8]
   21daa:	b12b      	cbz	r3, 21db8 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   21dac:	68e2      	ldr	r2, [r4, #12]
   21dae:	4631      	mov	r1, r6
   21db0:	4628      	mov	r0, r5
    }
}
   21db2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   21db6:	4718      	bx	r3
}
   21db8:	bd70      	pop	{r4, r5, r6, pc}
   21dba:	bf00      	nop
   21dbc:	200007a8 	.word	0x200007a8

00021dc0 <release_handler>:
{
   21dc0:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   21dc2:	4a12      	ldr	r2, [pc, #72]	; (21e0c <release_handler+0x4c>)
   21dc4:	3008      	adds	r0, #8
   21dc6:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   21dca:	05d9      	lsls	r1, r3, #23
   21dcc:	d51b      	bpl.n	21e06 <release_handler+0x46>
   21dce:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   21dd2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   21dd6:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   21dda:	f102 040e 	add.w	r4, r2, #14
   21dde:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   21de0:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   21de4:	f413 7f80 	tst.w	r3, #256	; 0x100
   21de8:	d003      	beq.n	21df2 <release_handler+0x32>
   21dea:	f3c3 2343 	ubfx	r3, r3, #9, #4
   21dee:	4299      	cmp	r1, r3
   21df0:	d009      	beq.n	21e06 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   21df2:	3001      	adds	r0, #1
   21df4:	2830      	cmp	r0, #48	; 0x30
   21df6:	d1f3      	bne.n	21de0 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   21df8:	2300      	movs	r3, #0
   21dfa:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   21dfe:	4804      	ldr	r0, [pc, #16]	; (21e10 <release_handler+0x50>)
}
   21e00:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   21e02:	f7ff bf87 	b.w	21d14 <nrfx_flag32_free>
}
   21e06:	bc10      	pop	{r4}
   21e08:	4770      	bx	lr
   21e0a:	bf00      	nop
   21e0c:	200007a8 	.word	0x200007a8
   21e10:	2000081c 	.word	0x2000081c

00021e14 <pin_handler_trigger_uninit>:
{
   21e14:	b538      	push	{r3, r4, r5, lr}
   21e16:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   21e18:	f7ff ffaa 	bl	21d70 <pin_in_use_by_te>
   21e1c:	4c09      	ldr	r4, [pc, #36]	; (21e44 <pin_handler_trigger_uninit+0x30>)
   21e1e:	f102 0508 	add.w	r5, r2, #8
   21e22:	b140      	cbz	r0, 21e36 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   21e24:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   21e28:	4907      	ldr	r1, [pc, #28]	; (21e48 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   21e2a:	0b5b      	lsrs	r3, r3, #13
   21e2c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   21e30:	2000      	movs	r0, #0
   21e32:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   21e36:	4610      	mov	r0, r2
   21e38:	f7ff ffc2 	bl	21dc0 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   21e3c:	2300      	movs	r3, #0
   21e3e:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   21e42:	bd38      	pop	{r3, r4, r5, pc}
   21e44:	200007a8 	.word	0x200007a8
   21e48:	40006000 	.word	0x40006000

00021e4c <nrfx_gpiote_input_configure>:
{
   21e4c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   21e50:	4604      	mov	r4, r0
   21e52:	4616      	mov	r6, r2
   21e54:	461d      	mov	r5, r3
    if (p_input_config)
   21e56:	b301      	cbz	r1, 21e9a <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   21e58:	4f4e      	ldr	r7, [pc, #312]	; (21f94 <nrfx_gpiote_input_configure+0x148>)
   21e5a:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   21e5e:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
   21e62:	079b      	lsls	r3, r3, #30
   21e64:	d502      	bpl.n	21e6c <nrfx_gpiote_input_configure+0x20>
   21e66:	f7ff ff83 	bl	21d70 <pin_in_use_by_te>
   21e6a:	bb10      	cbnz	r0, 21eb2 <nrfx_gpiote_input_configure+0x66>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   21e6c:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   21e6e:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   21e72:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   21e76:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   21e7a:	f10d 020f 	add.w	r2, sp, #15
   21e7e:	460b      	mov	r3, r1
   21e80:	4620      	mov	r0, r4
   21e82:	f10d 010e 	add.w	r1, sp, #14
   21e86:	f009 fe11 	bl	2baac <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   21e8a:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
   21e8e:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   21e92:	f043 0301 	orr.w	r3, r3, #1
   21e96:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
   21e9a:	b346      	cbz	r6, 21eee <nrfx_gpiote_input_configure+0xa2>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   21e9c:	4b3d      	ldr	r3, [pc, #244]	; (21f94 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   21e9e:	f896 c000 	ldrb.w	ip, [r6]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   21ea2:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   21ea4:	f104 0708 	add.w	r7, r4, #8
   21ea8:	f833 1017 	ldrh.w	r1, [r3, r7, lsl #1]
        if (pin_is_output(pin))
   21eac:	0788      	lsls	r0, r1, #30
   21eae:	d502      	bpl.n	21eb6 <nrfx_gpiote_input_configure+0x6a>
            if (use_evt)
   21eb0:	b1aa      	cbz	r2, 21ede <nrfx_gpiote_input_configure+0x92>
            return NRFX_ERROR_INVALID_PARAM;
   21eb2:	4839      	ldr	r0, [pc, #228]	; (21f98 <nrfx_gpiote_input_configure+0x14c>)
   21eb4:	e01d      	b.n	21ef2 <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   21eb6:	f021 0120 	bic.w	r1, r1, #32
   21eba:	04c9      	lsls	r1, r1, #19
   21ebc:	0cc9      	lsrs	r1, r1, #19
   21ebe:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
            if (use_evt)
   21ec2:	b162      	cbz	r2, 21ede <nrfx_gpiote_input_configure+0x92>
                if (!edge)
   21ec4:	f1bc 0f03 	cmp.w	ip, #3
   21ec8:	d8f3      	bhi.n	21eb2 <nrfx_gpiote_input_configure+0x66>
                uint8_t ch = *p_trigger_config->p_in_channel;
   21eca:	6872      	ldr	r2, [r6, #4]
   21ecc:	7816      	ldrb	r6, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   21ece:	f1bc 0f00 	cmp.w	ip, #0
   21ed2:	d111      	bne.n	21ef8 <nrfx_gpiote_input_configure+0xac>
   21ed4:	4a31      	ldr	r2, [pc, #196]	; (21f9c <nrfx_gpiote_input_configure+0x150>)
   21ed6:	f506 76a2 	add.w	r6, r6, #324	; 0x144
   21eda:	f842 c026 	str.w	ip, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   21ede:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
   21ee2:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   21ee6:	ea42 028c 	orr.w	r2, r2, ip, lsl #2
   21eea:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
    if (p_handler_config)
   21eee:	bb45      	cbnz	r5, 21f42 <nrfx_gpiote_input_configure+0xf6>
        err = NRFX_SUCCESS;
   21ef0:	482b      	ldr	r0, [pc, #172]	; (21fa0 <nrfx_gpiote_input_configure+0x154>)
}
   21ef2:	b004      	add	sp, #16
   21ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   21ef8:	00b2      	lsls	r2, r6, #2
   21efa:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   21efe:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   21f02:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
   21f06:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   21f0a:	f020 0003 	bic.w	r0, r0, #3
   21f0e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   21f12:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   21f16:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
   21f1a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   21f1e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   21f22:	0220      	lsls	r0, r4, #8
   21f24:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   21f28:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
   21f2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   21f30:	ea40 000e 	orr.w	r0, r0, lr
   21f34:	f041 0120 	orr.w	r1, r1, #32
   21f38:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
   21f3c:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   21f40:	e7cd      	b.n	21ede <nrfx_gpiote_input_configure+0x92>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   21f42:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   21f46:	4620      	mov	r0, r4
   21f48:	f7ff ff3a 	bl	21dc0 <release_handler>
    if (!handler)
   21f4c:	2e00      	cmp	r6, #0
   21f4e:	d0cf      	beq.n	21ef0 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   21f50:	4d10      	ldr	r5, [pc, #64]	; (21f94 <nrfx_gpiote_input_configure+0x148>)
   21f52:	e9d5 2300 	ldrd	r2, r3, [r5]
   21f56:	4296      	cmp	r6, r2
   21f58:	d101      	bne.n	21f5e <nrfx_gpiote_input_configure+0x112>
   21f5a:	429f      	cmp	r7, r3
   21f5c:	d018      	beq.n	21f90 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   21f5e:	4811      	ldr	r0, [pc, #68]	; (21fa4 <nrfx_gpiote_input_configure+0x158>)
   21f60:	f10d 010f 	add.w	r1, sp, #15
   21f64:	f7ff feb6 	bl	21cd4 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   21f68:	4b0d      	ldr	r3, [pc, #52]	; (21fa0 <nrfx_gpiote_input_configure+0x154>)
   21f6a:	4298      	cmp	r0, r3
   21f6c:	d1c1      	bne.n	21ef2 <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
   21f6e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   21f72:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   21f76:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   21f7a:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   21f7c:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   21f7e:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   21f82:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   21f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   21f8a:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   21f8e:	e7af      	b.n	21ef0 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   21f90:	2200      	movs	r2, #0
   21f92:	e7ee      	b.n	21f72 <nrfx_gpiote_input_configure+0x126>
   21f94:	200007a8 	.word	0x200007a8
   21f98:	0bad0004 	.word	0x0bad0004
   21f9c:	40006000 	.word	0x40006000
   21fa0:	0bad0000 	.word	0x0bad0000
   21fa4:	2000081c 	.word	0x2000081c

00021fa8 <nrfx_gpiote_output_configure>:
{
   21fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
   21faa:	4604      	mov	r4, r0
   21fac:	b085      	sub	sp, #20
   21fae:	4615      	mov	r5, r2
    if (p_config)
   21fb0:	b319      	cbz	r1, 21ffa <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   21fb2:	4e33      	ldr	r6, [pc, #204]	; (22080 <nrfx_gpiote_output_configure+0xd8>)
   21fb4:	f100 0708 	add.w	r7, r0, #8
   21fb8:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   21fbc:	0793      	lsls	r3, r2, #30
   21fbe:	d403      	bmi.n	21fc8 <nrfx_gpiote_output_configure+0x20>
   21fc0:	f7ff fed6 	bl	21d70 <pin_in_use_by_te>
   21fc4:	2800      	cmp	r0, #0
   21fc6:	d158      	bne.n	2207a <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   21fc8:	f012 0f1c 	tst.w	r2, #28
   21fcc:	d002      	beq.n	21fd4 <nrfx_gpiote_output_configure+0x2c>
   21fce:	784b      	ldrb	r3, [r1, #1]
   21fd0:	2b01      	cmp	r3, #1
   21fd2:	d052      	beq.n	2207a <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   21fd4:	2301      	movs	r3, #1
   21fd6:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   21fda:	2300      	movs	r3, #0
   21fdc:	e9cd 1300 	strd	r1, r3, [sp]
   21fe0:	1c4a      	adds	r2, r1, #1
   21fe2:	1c8b      	adds	r3, r1, #2
   21fe4:	4620      	mov	r0, r4
   21fe6:	f10d 010f 	add.w	r1, sp, #15
   21fea:	f009 fd5f 	bl	2baac <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   21fee:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   21ff2:	f043 0303 	orr.w	r3, r3, #3
   21ff6:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   21ffa:	b915      	cbnz	r5, 22002 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   21ffc:	4821      	ldr	r0, [pc, #132]	; (22084 <nrfx_gpiote_output_configure+0xdc>)
}
   21ffe:	b005      	add	sp, #20
   22000:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   22002:	4e1f      	ldr	r6, [pc, #124]	; (22080 <nrfx_gpiote_output_configure+0xd8>)
   22004:	f104 0708 	add.w	r7, r4, #8
   22008:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   2200c:	0783      	lsls	r3, r0, #30
   2200e:	d534      	bpl.n	2207a <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
   22010:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   22014:	4661      	mov	r1, ip
   22016:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   22018:	f020 0020 	bic.w	r0, r0, #32
   2201c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   22020:	04c0      	lsls	r0, r0, #19
   22022:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   22026:	0cc0      	lsrs	r0, r0, #19
   22028:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   2202c:	2300      	movs	r3, #0
   2202e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   22032:	786a      	ldrb	r2, [r5, #1]
   22034:	2a00      	cmp	r2, #0
   22036:	d0e1      	beq.n	21ffc <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   22038:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   2203c:	78ad      	ldrb	r5, [r5, #2]
   2203e:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   22042:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   22046:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2204a:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   2204e:	0223      	lsls	r3, r4, #8
   22050:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   22054:	0412      	lsls	r2, r2, #16
   22056:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2205a:	ea43 030e 	orr.w	r3, r3, lr
   2205e:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   22060:	052a      	lsls	r2, r5, #20
   22062:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   22066:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2206a:	4313      	orrs	r3, r2
   2206c:	f040 0020 	orr.w	r0, r0, #32
   22070:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   22074:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   22078:	e7c0      	b.n	21ffc <nrfx_gpiote_output_configure+0x54>
{
   2207a:	4803      	ldr	r0, [pc, #12]	; (22088 <nrfx_gpiote_output_configure+0xe0>)
   2207c:	e7bf      	b.n	21ffe <nrfx_gpiote_output_configure+0x56>
   2207e:	bf00      	nop
   22080:	200007a8 	.word	0x200007a8
   22084:	0bad0000 	.word	0x0bad0000
   22088:	0bad0004 	.word	0x0bad0004

0002208c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   2208c:	4b01      	ldr	r3, [pc, #4]	; (22094 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   2208e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   22092:	4770      	bx	lr
   22094:	200007a8 	.word	0x200007a8

00022098 <nrfx_gpiote_channel_get>:
{
   22098:	b508      	push	{r3, lr}
   2209a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   2209c:	f7ff fe68 	bl	21d70 <pin_in_use_by_te>
   220a0:	b138      	cbz	r0, 220b2 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   220a2:	4b05      	ldr	r3, [pc, #20]	; (220b8 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   220a4:	4805      	ldr	r0, [pc, #20]	; (220bc <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   220a6:	3208      	adds	r2, #8
   220a8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   220ac:	0b5b      	lsrs	r3, r3, #13
   220ae:	700b      	strb	r3, [r1, #0]
}
   220b0:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   220b2:	4803      	ldr	r0, [pc, #12]	; (220c0 <nrfx_gpiote_channel_get+0x28>)
   220b4:	e7fc      	b.n	220b0 <nrfx_gpiote_channel_get+0x18>
   220b6:	bf00      	nop
   220b8:	200007a8 	.word	0x200007a8
   220bc:	0bad0000 	.word	0x0bad0000
   220c0:	0bad0004 	.word	0x0bad0004

000220c4 <nrfx_gpiote_init>:
{
   220c4:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   220c6:	4c0f      	ldr	r4, [pc, #60]	; (22104 <nrfx_gpiote_init+0x40>)
   220c8:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   220cc:	b9bd      	cbnz	r5, 220fe <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   220ce:	2260      	movs	r2, #96	; 0x60
   220d0:	4629      	mov	r1, r5
   220d2:	f104 0010 	add.w	r0, r4, #16
   220d6:	f006 ff32 	bl	28f3e <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   220da:	2006      	movs	r0, #6
   220dc:	f7f2 fe68 	bl	14db0 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   220e0:	4b09      	ldr	r3, [pc, #36]	; (22108 <nrfx_gpiote_init+0x44>)
    return err_code;
   220e2:	480a      	ldr	r0, [pc, #40]	; (2210c <nrfx_gpiote_init+0x48>)
   220e4:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   220e8:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   220ec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   220f0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   220f4:	2301      	movs	r3, #1
   220f6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   220fa:	6763      	str	r3, [r4, #116]	; 0x74
}
   220fc:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   220fe:	4804      	ldr	r0, [pc, #16]	; (22110 <nrfx_gpiote_init+0x4c>)
   22100:	e7fc      	b.n	220fc <nrfx_gpiote_init+0x38>
   22102:	bf00      	nop
   22104:	200007a8 	.word	0x200007a8
   22108:	40006000 	.word	0x40006000
   2210c:	0bad0000 	.word	0x0bad0000
   22110:	0bad0005 	.word	0x0bad0005

00022114 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   22114:	4b03      	ldr	r3, [pc, #12]	; (22124 <nrfx_gpiote_is_init+0x10>)
   22116:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   2211a:	3800      	subs	r0, #0
   2211c:	bf18      	it	ne
   2211e:	2001      	movne	r0, #1
   22120:	4770      	bx	lr
   22122:	bf00      	nop
   22124:	200007a8 	.word	0x200007a8

00022128 <nrfx_gpiote_channel_free>:
{
   22128:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   2212a:	4801      	ldr	r0, [pc, #4]	; (22130 <nrfx_gpiote_channel_free+0x8>)
   2212c:	f7ff bdf2 	b.w	21d14 <nrfx_flag32_free>
   22130:	20000818 	.word	0x20000818

00022134 <nrfx_gpiote_channel_alloc>:
{
   22134:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   22136:	4801      	ldr	r0, [pc, #4]	; (2213c <nrfx_gpiote_channel_alloc+0x8>)
   22138:	f7ff bdcc 	b.w	21cd4 <nrfx_flag32_alloc>
   2213c:	20000818 	.word	0x20000818

00022140 <nrfx_gpiote_trigger_enable>:
{
   22140:	b537      	push	{r0, r1, r2, r4, r5, lr}
   22142:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   22144:	f7ff fe14 	bl	21d70 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   22148:	f104 0208 	add.w	r2, r4, #8
   2214c:	4b1e      	ldr	r3, [pc, #120]	; (221c8 <nrfx_gpiote_trigger_enable+0x88>)
   2214e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   22152:	b1e8      	cbz	r0, 22190 <nrfx_gpiote_trigger_enable+0x50>
   22154:	f013 0502 	ands.w	r5, r3, #2
   22158:	d11a      	bne.n	22190 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2215a:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   2215c:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   2215e:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   22162:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   22166:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   2216a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2216e:	6005      	str	r5, [r0, #0]
   22170:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   22172:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   22176:	f040 0001 	orr.w	r0, r0, #1
   2217a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   2217e:	b129      	cbz	r1, 2218c <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   22180:	2201      	movs	r2, #1
   22182:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   22186:	4a11      	ldr	r2, [pc, #68]	; (221cc <nrfx_gpiote_trigger_enable+0x8c>)
   22188:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   2218c:	b003      	add	sp, #12
   2218e:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   22190:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   22194:	2b04      	cmp	r3, #4
   22196:	d012      	beq.n	221be <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   22198:	2b05      	cmp	r3, #5
   2219a:	d012      	beq.n	221c2 <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2219c:	a801      	add	r0, sp, #4
   2219e:	9401      	str	r4, [sp, #4]
   221a0:	f7ff fdd8 	bl	21d54 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   221a4:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   221a6:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   221aa:	40d9      	lsrs	r1, r3
   221ac:	f001 0101 	and.w	r1, r1, #1
   221b0:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   221b2:	4620      	mov	r0, r4
}
   221b4:	b003      	add	sp, #12
   221b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   221ba:	f009 bcc0 	b.w	2bb3e <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   221be:	2103      	movs	r1, #3
   221c0:	e7f7      	b.n	221b2 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   221c2:	2102      	movs	r1, #2
   221c4:	e7f5      	b.n	221b2 <nrfx_gpiote_trigger_enable+0x72>
   221c6:	bf00      	nop
   221c8:	200007a8 	.word	0x200007a8
   221cc:	40006000 	.word	0x40006000

000221d0 <nrfx_gpiote_trigger_disable>:
{
   221d0:	b508      	push	{r3, lr}
   221d2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   221d4:	f7ff fdcc 	bl	21d70 <pin_in_use_by_te>
   221d8:	b1c0      	cbz	r0, 2220c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   221da:	f102 0108 	add.w	r1, r2, #8
   221de:	4b0e      	ldr	r3, [pc, #56]	; (22218 <nrfx_gpiote_trigger_disable+0x48>)
   221e0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   221e4:	0799      	lsls	r1, r3, #30
   221e6:	d411      	bmi.n	2220c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   221e8:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   221ea:	2201      	movs	r2, #1
   221ec:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   221ee:	009b      	lsls	r3, r3, #2
   221f0:	490a      	ldr	r1, [pc, #40]	; (2221c <nrfx_gpiote_trigger_disable+0x4c>)
   221f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   221f6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   221fa:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   221fe:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   22202:	f022 0203 	bic.w	r2, r2, #3
   22206:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   2220a:	bd08      	pop	{r3, pc}
   2220c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   22210:	2100      	movs	r1, #0
   22212:	4610      	mov	r0, r2
   22214:	f009 bc93 	b.w	2bb3e <nrf_gpio_cfg_sense_set>
   22218:	200007a8 	.word	0x200007a8
   2221c:	40006000 	.word	0x40006000

00022220 <nrfx_gpiote_pin_uninit>:
{
   22220:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   22222:	4b0e      	ldr	r3, [pc, #56]	; (2225c <nrfx_gpiote_pin_uninit+0x3c>)
   22224:	f100 0208 	add.w	r2, r0, #8
{
   22228:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   2222a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   2222e:	07db      	lsls	r3, r3, #31
   22230:	d511      	bpl.n	22256 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   22232:	f7ff ffcd 	bl	221d0 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   22236:	4620      	mov	r0, r4
   22238:	f7ff fdec 	bl	21e14 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2223c:	a801      	add	r0, sp, #4
   2223e:	9401      	str	r4, [sp, #4]
   22240:	f7ff fd88 	bl	21d54 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   22244:	9b01      	ldr	r3, [sp, #4]
   22246:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2224a:	2202      	movs	r2, #2
   2224c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   22250:	4803      	ldr	r0, [pc, #12]	; (22260 <nrfx_gpiote_pin_uninit+0x40>)
}
   22252:	b002      	add	sp, #8
   22254:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   22256:	4803      	ldr	r0, [pc, #12]	; (22264 <nrfx_gpiote_pin_uninit+0x44>)
   22258:	e7fb      	b.n	22252 <nrfx_gpiote_pin_uninit+0x32>
   2225a:	bf00      	nop
   2225c:	200007a8 	.word	0x200007a8
   22260:	0bad0000 	.word	0x0bad0000
   22264:	0bad0004 	.word	0x0bad0004

00022268 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   22268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2226c:	4b68      	ldr	r3, [pc, #416]	; (22410 <nrfx_gpiote_irq_handler+0x1a8>)
    return p_reg->INTENSET & mask;
   2226e:	4869      	ldr	r0, [pc, #420]	; (22414 <nrfx_gpiote_irq_handler+0x1ac>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   22270:	4969      	ldr	r1, [pc, #420]	; (22418 <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t status = 0;
   22272:	2600      	movs	r6, #0
{
   22274:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   22276:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   22278:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2227a:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   2227c:	b135      	cbz	r5, 2228c <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   2227e:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   22282:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   22284:	bf1e      	ittt	ne
   22286:	601c      	strne	r4, [r3, #0]
   22288:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   2228a:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   2228c:	3304      	adds	r3, #4
   2228e:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   22290:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   22294:	d1f1      	bne.n	2227a <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22296:	f8df 917c 	ldr.w	r9, [pc, #380]	; 22414 <nrfx_gpiote_irq_handler+0x1ac>
   2229a:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   2229e:	2b00      	cmp	r3, #0
   222a0:	f000 8099 	beq.w	223d6 <nrfx_gpiote_irq_handler+0x16e>
        *p_masks = gpio_regs[i]->LATCH;
   222a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   222a8:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   222ac:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   222ae:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   222b2:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   222b6:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   222b8:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   222bc:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
   222c0:	f10d 0a10 	add.w	sl, sp, #16
   222c4:	ea4f 1348 	mov.w	r3, r8, lsl #5
   222c8:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   222ca:	f04f 0b01 	mov.w	fp, #1
   222ce:	e049      	b.n	22364 <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
   222d0:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   222d2:	4a52      	ldr	r2, [pc, #328]	; (2241c <nrfx_gpiote_irq_handler+0x1b4>)
                uint32_t pin = NRF_CTZ(latch[i]);
   222d4:	fa94 f4a4 	rbit	r4, r4
   222d8:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   222dc:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   222de:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   222e0:	f104 0308 	add.w	r3, r4, #8
   222e4:	9403      	str	r4, [sp, #12]
   222e6:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
   222ea:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
   222ee:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   222f2:	fa0b f202 	lsl.w	r2, fp, r2
   222f6:	ea23 0302 	bic.w	r3, r3, r2
   222fa:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   222fe:	a803      	add	r0, sp, #12
   22300:	f7ff fd28 	bl	21d54 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   22304:	9b03      	ldr	r3, [sp, #12]
   22306:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2230a:	08b9      	lsrs	r1, r7, #2
   2230c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   22310:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
   22314:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   22316:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   22318:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   2231c:	d52c      	bpl.n	22378 <nrfx_gpiote_irq_handler+0x110>
        call_handler(pin, trigger);
   2231e:	4620      	mov	r0, r4
   22320:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   22322:	b2dd      	uxtb	r5, r3
   22324:	f7ff fd2e 	bl	21d84 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22328:	a803      	add	r0, sp, #12
   2232a:	9403      	str	r4, [sp, #12]
   2232c:	f7ff fd12 	bl	21d54 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   22330:	9b03      	ldr	r3, [sp, #12]
   22332:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   22336:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   2233a:	f3c3 4301 	ubfx	r3, r3, #16, #2
   2233e:	429d      	cmp	r5, r3
   22340:	d107      	bne.n	22352 <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   22342:	2100      	movs	r1, #0
   22344:	4620      	mov	r0, r4
   22346:	f009 fbfa 	bl	2bb3e <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   2234a:	4629      	mov	r1, r5
   2234c:	4620      	mov	r0, r4
   2234e:	f009 fbf6 	bl	2bb3e <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22352:	a803      	add	r0, sp, #12
   22354:	9403      	str	r4, [sp, #12]
   22356:	f7ff fcfd 	bl	21d54 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   2235a:	9b03      	ldr	r3, [sp, #12]
   2235c:	fa0b f303 	lsl.w	r3, fp, r3
   22360:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   22364:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
   22368:	2c00      	cmp	r4, #0
   2236a:	d1b1      	bne.n	222d0 <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   2236c:	f1b8 0f00 	cmp.w	r8, #0
   22370:	d11d      	bne.n	223ae <nrfx_gpiote_irq_handler+0x146>
   22372:	f04f 0801 	mov.w	r8, #1
   22376:	e7a5      	b.n	222c4 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   22378:	2b02      	cmp	r3, #2
   2237a:	d10c      	bne.n	22396 <nrfx_gpiote_irq_handler+0x12e>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   2237c:	2103      	movs	r1, #3
   2237e:	4620      	mov	r0, r4
   22380:	f009 fbdd 	bl	2bb3e <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   22384:	f005 0305 	and.w	r3, r5, #5
   22388:	2b01      	cmp	r3, #1
   2238a:	d1e2      	bne.n	22352 <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
   2238c:	4639      	mov	r1, r7
   2238e:	4620      	mov	r0, r4
   22390:	f7ff fcf8 	bl	21d84 <call_handler>
   22394:	e7dd      	b.n	22352 <nrfx_gpiote_irq_handler+0xea>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   22396:	2102      	movs	r1, #2
   22398:	4620      	mov	r0, r4
   2239a:	9301      	str	r3, [sp, #4]
   2239c:	f009 fbcf 	bl	2bb3e <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   223a0:	2d03      	cmp	r5, #3
   223a2:	d0f3      	beq.n	2238c <nrfx_gpiote_irq_handler+0x124>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   223a4:	9b01      	ldr	r3, [sp, #4]
   223a6:	2b03      	cmp	r3, #3
   223a8:	d1d3      	bne.n	22352 <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   223aa:	2d02      	cmp	r5, #2
   223ac:	e7ed      	b.n	2238a <nrfx_gpiote_irq_handler+0x122>
        *p_masks = gpio_regs[i]->LATCH;
   223ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   223b2:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
   223b6:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
   223ba:	4919      	ldr	r1, [pc, #100]	; (22420 <nrfx_gpiote_irq_handler+0x1b8>)
   223bc:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
   223c0:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   223c2:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   223c6:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
   223ca:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
   223cc:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
   223ce:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
   223d2:	f47f af73 	bne.w	222bc <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   223d6:	2401      	movs	r4, #1
    while (mask)
   223d8:	b916      	cbnz	r6, 223e0 <nrfx_gpiote_irq_handler+0x178>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   223da:	b007      	add	sp, #28
   223dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   223e0:	fa96 f3a6 	rbit	r3, r6
   223e4:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   223e8:	fa04 f203 	lsl.w	r2, r4, r3
   223ec:	009b      	lsls	r3, r3, #2
   223ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   223f2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   223f6:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   223fa:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   223fe:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   22402:	f3c0 2005 	ubfx	r0, r0, #8, #6
   22406:	f3c1 4101 	ubfx	r1, r1, #16, #2
   2240a:	f7ff fcbb 	bl	21d84 <call_handler>
   2240e:	e7e3      	b.n	223d8 <nrfx_gpiote_irq_handler+0x170>
   22410:	40006100 	.word	0x40006100
   22414:	40006000 	.word	0x40006000
   22418:	40006120 	.word	0x40006120
   2241c:	200007a8 	.word	0x200007a8
   22420:	50000300 	.word	0x50000300

00022424 <nvmc_word_write>:
   22424:	4a04      	ldr	r2, [pc, #16]	; (22438 <nvmc_word_write+0x14>)
   22426:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF91_SERIES)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   2242a:	07db      	lsls	r3, r3, #31
   2242c:	d5fb      	bpl.n	22426 <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   2242e:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   22430:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   22434:	4770      	bx	lr
   22436:	bf00      	nop
   22438:	4001e000 	.word	0x4001e000

0002243c <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   2243c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   22440:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   22442:	fbb0 f3f2 	udiv	r3, r0, r2
   22446:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   2244a:	b973      	cbnz	r3, 2246a <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   2244c:	4b08      	ldr	r3, [pc, #32]	; (22470 <nrfx_nvmc_page_erase+0x34>)
   2244e:	2202      	movs	r2, #2
   22450:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   22454:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   22458:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   2245c:	07d2      	lsls	r2, r2, #31
   2245e:	d5fb      	bpl.n	22458 <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
   22460:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   22462:	4804      	ldr	r0, [pc, #16]	; (22474 <nrfx_nvmc_page_erase+0x38>)
   22464:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   22468:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   2246a:	4803      	ldr	r0, [pc, #12]	; (22478 <nrfx_nvmc_page_erase+0x3c>)
}
   2246c:	4770      	bx	lr
   2246e:	bf00      	nop
   22470:	4001e000 	.word	0x4001e000
   22474:	0bad0000 	.word	0x0bad0000
   22478:	0bad000a 	.word	0x0bad000a

0002247c <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   2247c:	b510      	push	{r4, lr}
   2247e:	4c05      	ldr	r4, [pc, #20]	; (22494 <nrfx_nvmc_word_write+0x18>)
   22480:	2301      	movs	r3, #1
   22482:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   22486:	f7ff ffcd 	bl	22424 <nvmc_word_write>
   2248a:	2300      	movs	r3, #0
   2248c:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   22490:	bd10      	pop	{r4, pc}
   22492:	bf00      	nop
   22494:	4001e000 	.word	0x4001e000

00022498 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   22498:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   2249a:	4801      	ldr	r0, [pc, #4]	; (224a0 <nrfx_ppi_channel_alloc+0x8>)
   2249c:	f7ff bc1a 	b.w	21cd4 <nrfx_flag32_alloc>
   224a0:	20000824 	.word	0x20000824

000224a4 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   224a4:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   224a6:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   224aa:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
   224ac:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   224ae:	6002      	str	r2, [r0, #0]
}
   224b0:	4802      	ldr	r0, [pc, #8]	; (224bc <nrf_gpio_pin_port_decode+0x18>)
   224b2:	bf18      	it	ne
   224b4:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   224b8:	4770      	bx	lr
   224ba:	bf00      	nop
   224bc:	50000300 	.word	0x50000300

000224c0 <qspi_xfer>:

static nrfx_err_t qspi_xfer(void *            p_buffer,
                            size_t            length,
                            uint32_t          address,
                            nrfx_qspi_state_t desired_state)
{
   224c0:	b570      	push	{r4, r5, r6, lr}
   224c2:	f000 4460 	and.w	r4, r0, #3758096384	; 0xe0000000
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
    NRFX_ASSERT(p_buffer != NULL);

    if (!nrfx_is_in_ram(p_buffer) || !nrfx_is_word_aligned(p_buffer))
   224c6:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
   224ca:	d166      	bne.n	2259a <qspi_xfer+0xda>
   224cc:	0784      	lsls	r4, r0, #30
   224ce:	d164      	bne.n	2259a <qspi_xfer+0xda>
    {
        return NRFX_ERROR_INVALID_ADDR;
    }

    if ((m_cb.state != NRFX_QSPI_STATE_IDLE) &&
   224d0:	4d34      	ldr	r5, [pc, #208]	; (225a4 <qspi_xfer+0xe4>)
   224d2:	f895 4030 	ldrb.w	r4, [r5, #48]	; 0x30
   224d6:	2c01      	cmp	r4, #1
   224d8:	d001      	beq.n	224de <qspi_xfer+0x1e>
   224da:	429c      	cmp	r4, r3
   224dc:	d15f      	bne.n	2259e <qspi_xfer+0xde>
    {
        return NRFX_ERROR_BUSY;
    }

    bool is_first_buffer = false;
    if (m_cb.handler)
   224de:	682c      	ldr	r4, [r5, #0]
   224e0:	bb04      	cbnz	r4, 22524 <qspi_xfer+0x64>
            is_first_buffer = true;
        }
    }

    nrf_qspi_task_t task;
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   224e2:	2b02      	cmp	r3, #2
   224e4:	4b30      	ldr	r3, [pc, #192]	; (225a8 <qspi_xfer+0xe8>)
NRF_STATIC_INLINE void nrf_qspi_write_buffer_set(NRF_QSPI_Type * p_reg,
                                                 void const    * p_buffer,
                                                 uint32_t        length,
                                                 uint32_t        dest_addr)
{
    p_reg->WRITE.DST = dest_addr;
   224e6:	bf0b      	itete	eq
   224e8:	f8c3 2510 	streq.w	r2, [r3, #1296]	; 0x510
NRF_STATIC_INLINE void nrf_qspi_read_buffer_set(NRF_QSPI_Type * p_reg,
                                                void          * p_buffer,
                                                uint32_t        length,
                                                uint32_t        src_addr)
{
    p_reg->READ.SRC = src_addr;
   224ec:	f8c3 2504 	strne.w	r2, [r3, #1284]	; 0x504
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   224f0:	f8c3 0514 	streq.w	r0, [r3, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
   224f4:	f8c3 0508 	strne.w	r0, [r3, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
   224f8:	bf0b      	itete	eq
   224fa:	f8c3 1518 	streq.w	r1, [r3, #1304]	; 0x518
    p_reg->READ.CNT = length;
   224fe:	f8c3 150c 	strne.w	r1, [r3, #1292]	; 0x50c
    {
        nrf_qspi_write_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_WRITESTART;
   22502:	2208      	moveq	r2, #8
    }
    else
    {
        nrf_qspi_read_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_READSTART;
   22504:	2204      	movne	r2, #4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22506:	2100      	movs	r1, #0
   22508:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2250c:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   22510:	f503 3324 	add.w	r3, r3, #167936	; 0x29000
   22514:	2201      	movs	r2, #1
   22516:	601a      	str	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22518:	4a23      	ldr	r2, [pc, #140]	; (225a8 <qspi_xfer+0xe8>)
   2251a:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100

    if (!m_cb.handler)
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_task_trigger(NRF_QSPI, task);
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   2251e:	2b00      	cmp	r3, #0
   22520:	d0fb      	beq.n	2251a <qspi_xfer+0x5a>
   22522:	e00d      	b.n	22540 <qspi_xfer+0x80>
        if (m_cb.p_buffer_primary)
   22524:	68ae      	ldr	r6, [r5, #8]
   22526:	4c20      	ldr	r4, [pc, #128]	; (225a8 <qspi_xfer+0xe8>)
   22528:	b166      	cbz	r6, 22544 <qspi_xfer+0x84>
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   2252a:	2b02      	cmp	r3, #2
            m_cb.p_buffer_secondary = p_buffer;
   2252c:	60e8      	str	r0, [r5, #12]
            m_cb.size_secondary     = length;
   2252e:	6169      	str	r1, [r5, #20]
            m_cb.addr_secondary     = address;
   22530:	61ea      	str	r2, [r5, #28]
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   22532:	d12b      	bne.n	2258c <qspi_xfer+0xcc>
    p_reg->WRITE.DST = dest_addr;
   22534:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   22538:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    p_reg->WRITE.CNT = length;
   2253c:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_int_enable(NRF_QSPI, NRF_QSPI_INT_READY_MASK);
        nrf_qspi_task_trigger(NRF_QSPI, task);
    }

    return NRFX_SUCCESS;
   22540:	481a      	ldr	r0, [pc, #104]	; (225ac <qspi_xfer+0xec>)
}
   22542:	bd70      	pop	{r4, r5, r6, pc}
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   22544:	2b02      	cmp	r3, #2
            m_cb.state = desired_state;
   22546:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
        task = NRF_QSPI_TASK_WRITESTART;
   2254a:	bf0c      	ite	eq
   2254c:	2308      	moveq	r3, #8
        task = NRF_QSPI_TASK_READSTART;
   2254e:	2304      	movne	r3, #4
            m_cb.size_primary     = length;
   22550:	6129      	str	r1, [r5, #16]
            m_cb.addr_primary     = address;
   22552:	61aa      	str	r2, [r5, #24]
            m_cb.p_buffer_primary = p_buffer;
   22554:	60a8      	str	r0, [r5, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22556:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    p_reg->WRITE.DST = dest_addr;
   2255a:	bf0b      	itete	eq
   2255c:	f8c4 2510 	streq.w	r2, [r4, #1296]	; 0x510
    p_reg->READ.SRC = src_addr;
   22560:	f8c4 2504 	strne.w	r2, [r4, #1284]	; 0x504
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   22564:	f8c4 0514 	streq.w	r0, [r4, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
   22568:	f8c4 0508 	strne.w	r0, [r4, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
   2256c:	bf0c      	ite	eq
   2256e:	f8c4 1518 	streq.w	r1, [r4, #1304]	; 0x518
    p_reg->READ.CNT = length;
   22572:	f8c4 150c 	strne.w	r1, [r4, #1292]	; 0x50c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22576:	490c      	ldr	r1, [pc, #48]	; (225a8 <qspi_xfer+0xe8>)
   22578:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2257a:	f503 3324 	add.w	r3, r3, #167936	; 0x29000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2257e:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
    p_reg->INTENSET = mask;
   22582:	2201      	movs	r2, #1
   22584:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22588:	601a      	str	r2, [r3, #0]
}
   2258a:	e7d9      	b.n	22540 <qspi_xfer+0x80>
    p_reg->READ.SRC = src_addr;
   2258c:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    p_reg->READ.DST = (uint32_t) p_buffer;
   22590:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    p_reg->READ.CNT = length;
   22594:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
    else if (is_first_buffer)
   22598:	e7d2      	b.n	22540 <qspi_xfer+0x80>
        return NRFX_ERROR_INVALID_ADDR;
   2259a:	4805      	ldr	r0, [pc, #20]	; (225b0 <qspi_xfer+0xf0>)
   2259c:	e7d1      	b.n	22542 <qspi_xfer+0x82>
        return NRFX_ERROR_BUSY;
   2259e:	4805      	ldr	r0, [pc, #20]	; (225b4 <qspi_xfer+0xf4>)
   225a0:	e7cf      	b.n	22542 <qspi_xfer+0x82>
   225a2:	bf00      	nop
   225a4:	20003938 	.word	0x20003938
   225a8:	40029000 	.word	0x40029000
   225ac:	0bad0000 	.word	0x0bad0000
   225b0:	0bad000a 	.word	0x0bad000a
   225b4:	0bad000b 	.word	0x0bad000b

000225b8 <qspi_ready_wait>:
        nrf_gpio_cfg_default(pins.io3_pin);
    }
}

static nrfx_err_t qspi_ready_wait(void)
{
   225b8:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   225ba:	4d07      	ldr	r5, [pc, #28]	; (225d8 <qspi_ready_wait+0x20>)
   225bc:	f24c 3450 	movw	r4, #50000	; 0xc350
   225c0:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    bool result;
    NRFX_WAIT_FOR(nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY),
   225c4:	b933      	cbnz	r3, 225d4 <qspi_ready_wait+0x1c>
   225c6:	200a      	movs	r0, #10
   225c8:	f009 fa6e 	bl	2baa8 <nrfx_busy_wait>
   225cc:	3c01      	subs	r4, #1
   225ce:	d1f7      	bne.n	225c0 <qspi_ready_wait+0x8>
                                       QSPI_DEF_WAIT_ATTEMPTS,
                                       QSPI_DEF_WAIT_TIME_US,
                                       result);
    if (!result)
    {
        return NRFX_ERROR_TIMEOUT;
   225d0:	4802      	ldr	r0, [pc, #8]	; (225dc <qspi_ready_wait+0x24>)
    }

    return NRFX_SUCCESS;
}
   225d2:	bd38      	pop	{r3, r4, r5, pc}
    return NRFX_SUCCESS;
   225d4:	4802      	ldr	r0, [pc, #8]	; (225e0 <qspi_ready_wait+0x28>)
   225d6:	e7fc      	b.n	225d2 <qspi_ready_wait+0x1a>
   225d8:	40029000 	.word	0x40029000
   225dc:	0bad0007 	.word	0x0bad0007
   225e0:	0bad0000 	.word	0x0bad0000

000225e4 <qspi_event_xfer_handle.constprop.0>:
}
#endif

static void qspi_event_xfer_handle(nrfx_qspi_evt_ext_xfer_t * p_xfer)
{
    p_xfer->p_buffer = (uint8_t *)m_cb.p_buffer_primary;
   225e4:	4b08      	ldr	r3, [pc, #32]	; (22608 <qspi_event_xfer_handle.constprop.0+0x24>)
   225e6:	689a      	ldr	r2, [r3, #8]
   225e8:	625a      	str	r2, [r3, #36]	; 0x24
    p_xfer->size     = m_cb.size_primary;
   225ea:	691a      	ldr	r2, [r3, #16]
   225ec:	629a      	str	r2, [r3, #40]	; 0x28
    p_xfer->addr     = m_cb.addr_primary;
   225ee:	699a      	ldr	r2, [r3, #24]
   225f0:	62da      	str	r2, [r3, #44]	; 0x2c
    if (m_cb.p_buffer_secondary)
   225f2:	68da      	ldr	r2, [r3, #12]
    {
        m_cb.p_buffer_primary = m_cb.p_buffer_secondary;
   225f4:	609a      	str	r2, [r3, #8]
    if (m_cb.p_buffer_secondary)
   225f6:	b132      	cbz	r2, 22606 <qspi_event_xfer_handle.constprop.0+0x22>
        m_cb.size_primary     = m_cb.size_secondary;
   225f8:	695a      	ldr	r2, [r3, #20]
   225fa:	611a      	str	r2, [r3, #16]
        m_cb.addr_primary     = m_cb.addr_secondary;
   225fc:	69da      	ldr	r2, [r3, #28]
   225fe:	619a      	str	r2, [r3, #24]

        m_cb.p_buffer_secondary = NULL;
   22600:	2200      	movs	r2, #0
   22602:	60da      	str	r2, [r3, #12]
   22604:	4770      	bx	lr
    }
    else
    {
        m_cb.p_buffer_primary = NULL;
    }
}
   22606:	4770      	bx	lr
   22608:	20003938 	.word	0x20003938

0002260c <nrf_qspi_cinstrdata_get.constprop.0>:
        default:
            break;
    }
}

NRF_STATIC_INLINE void nrf_qspi_cinstrdata_get(NRF_QSPI_Type const * p_reg,
   2260c:	b510      	push	{r4, lr}
                                               nrf_qspi_cinstr_len_t length,
                                               void *                p_rx_data)
{
    uint8_t *p_rx_data_8 = (uint8_t *) p_rx_data;

    uint32_t reg1 = p_reg->CINSTRDAT1;
   2260e:	4b0e      	ldr	r3, [pc, #56]	; (22648 <nrf_qspi_cinstrdata_get.constprop.0+0x3c>)
    uint32_t reg0 = p_reg->CINSTRDAT0;
    switch (length)
   22610:	3802      	subs	r0, #2
    uint32_t reg1 = p_reg->CINSTRDAT1;
   22612:	f8d3 263c 	ldr.w	r2, [r3, #1596]	; 0x63c
    uint32_t reg0 = p_reg->CINSTRDAT0;
   22616:	f8d3 3638 	ldr.w	r3, [r3, #1592]	; 0x638
    switch (length)
   2261a:	2807      	cmp	r0, #7
   2261c:	d813      	bhi.n	22646 <nrf_qspi_cinstrdata_get.constprop.0+0x3a>
   2261e:	e8df f000 	tbb	[pc, r0]
   22622:	0f11      	.short	0x0f11
   22624:	080a0b0d 	.word	0x080a0b0d
   22628:	0406      	.short	0x0406
    {
        case NRF_QSPI_CINSTR_LEN_9B:
            p_rx_data_8[7] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE7_Pos);
   2262a:	0e10      	lsrs	r0, r2, #24
   2262c:	71c8      	strb	r0, [r1, #7]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_8B:
            p_rx_data_8[6] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE6_Pos);
   2262e:	0c10      	lsrs	r0, r2, #16
   22630:	7188      	strb	r0, [r1, #6]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_7B:
            p_rx_data_8[5] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE5_Pos);
   22632:	0a10      	lsrs	r0, r2, #8
   22634:	7148      	strb	r0, [r1, #5]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_6B:
            p_rx_data_8[4] = (uint8_t)(reg1);
   22636:	710a      	strb	r2, [r1, #4]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_5B:
            p_rx_data_8[3] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE3_Pos);
   22638:	0e1a      	lsrs	r2, r3, #24
   2263a:	70ca      	strb	r2, [r1, #3]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_4B:
            p_rx_data_8[2] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE2_Pos);
   2263c:	0c1a      	lsrs	r2, r3, #16
   2263e:	708a      	strb	r2, [r1, #2]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_3B:
            p_rx_data_8[1] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE1_Pos);
   22640:	0a1a      	lsrs	r2, r3, #8
   22642:	704a      	strb	r2, [r1, #1]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_2B:
            p_rx_data_8[0] = (uint8_t)(reg0);
   22644:	700b      	strb	r3, [r1, #0]
            /* Send only opcode. Case to avoid compiler warnings. */
            break;
        default:
            break;
    }
}
   22646:	bd10      	pop	{r4, pc}
   22648:	40029000 	.word	0x40029000

0002264c <nrf_qspi_cinstrdata_set.constprop.0>:
    switch (length)
   2264c:	3802      	subs	r0, #2
   2264e:	2807      	cmp	r0, #7
   22650:	d81f      	bhi.n	22692 <nrf_qspi_cinstrdata_set.constprop.0+0x46>
   22652:	e8df f000 	tbb	[pc, r0]
   22656:	2729      	.short	0x2729
   22658:	21231125 	.word	0x21231125
   2265c:	041f      	.short	0x041f
            reg |= ((uint32_t)p_tx_data_8[7]) << QSPI_CINSTRDAT1_BYTE7_Pos;
   2265e:	79cb      	ldrb	r3, [r1, #7]
   22660:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[6]) << QSPI_CINSTRDAT1_BYTE6_Pos;
   22662:	798a      	ldrb	r2, [r1, #6]
   22664:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[5]) << QSPI_CINSTRDAT1_BYTE5_Pos;
   22668:	794a      	ldrb	r2, [r1, #5]
   2266a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[4]);
   2266e:	790a      	ldrb	r2, [r1, #4]
   22670:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT1 = reg;
   22672:	4a0e      	ldr	r2, [pc, #56]	; (226ac <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
   22674:	f8c2 363c 	str.w	r3, [r2, #1596]	; 0x63c
            reg |= ((uint32_t)p_tx_data_8[3]) << QSPI_CINSTRDAT0_BYTE3_Pos;
   22678:	78cb      	ldrb	r3, [r1, #3]
   2267a:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[2]) << QSPI_CINSTRDAT0_BYTE2_Pos;
   2267c:	788a      	ldrb	r2, [r1, #2]
   2267e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[1]) << QSPI_CINSTRDAT0_BYTE1_Pos;
   22682:	784a      	ldrb	r2, [r1, #1]
   22684:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[0]);
   22688:	780a      	ldrb	r2, [r1, #0]
   2268a:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT0 = reg;
   2268c:	4a07      	ldr	r2, [pc, #28]	; (226ac <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
   2268e:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
}
   22692:	4770      	bx	lr
    switch (length)
   22694:	2300      	movs	r3, #0
   22696:	e7e4      	b.n	22662 <nrf_qspi_cinstrdata_set.constprop.0+0x16>
   22698:	2300      	movs	r3, #0
   2269a:	e7e5      	b.n	22668 <nrf_qspi_cinstrdata_set.constprop.0+0x1c>
   2269c:	2300      	movs	r3, #0
   2269e:	e7e6      	b.n	2266e <nrf_qspi_cinstrdata_set.constprop.0+0x22>
   226a0:	2300      	movs	r3, #0
   226a2:	e7eb      	b.n	2267c <nrf_qspi_cinstrdata_set.constprop.0+0x30>
   226a4:	2300      	movs	r3, #0
   226a6:	e7ec      	b.n	22682 <nrf_qspi_cinstrdata_set.constprop.0+0x36>
   226a8:	2300      	movs	r3, #0
   226aa:	e7ed      	b.n	22688 <nrf_qspi_cinstrdata_set.constprop.0+0x3c>
   226ac:	40029000 	.word	0x40029000

000226b0 <nrfx_qspi_init>:
{
   226b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
   226b4:	4d71      	ldr	r5, [pc, #452]	; (2287c <nrfx_qspi_init+0x1cc>)
   226b6:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
{
   226ba:	4604      	mov	r4, r0
   226bc:	460e      	mov	r6, r1
   226be:	4617      	mov	r7, r2
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
   226c0:	2b00      	cmp	r3, #0
   226c2:	f040 80d5 	bne.w	22870 <nrfx_qspi_init+0x1c0>
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   226c6:	7cc2      	ldrb	r2, [r0, #19]
   226c8:	b11a      	cbz	r2, 226d2 <nrfx_qspi_init+0x22>
   226ca:	7d03      	ldrb	r3, [r0, #20]
   226cc:	2b00      	cmp	r3, #0
   226ce:	f040 8084 	bne.w	227da <nrfx_qspi_init+0x12a>
    if ((p_config->pins.sck_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   226d2:	7923      	ldrb	r3, [r4, #4]
   226d4:	2bff      	cmp	r3, #255	; 0xff
   226d6:	f000 80cf 	beq.w	22878 <nrfx_qspi_init+0x1c8>
   226da:	7961      	ldrb	r1, [r4, #5]
   226dc:	29ff      	cmp	r1, #255	; 0xff
   226de:	f000 80cb 	beq.w	22878 <nrfx_qspi_init+0x1c8>
        (p_config->pins.csn_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   226e2:	79a1      	ldrb	r1, [r4, #6]
   226e4:	29ff      	cmp	r1, #255	; 0xff
   226e6:	f000 80c7 	beq.w	22878 <nrfx_qspi_init+0x1c8>
        (p_config->pins.io0_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   226ea:	79e1      	ldrb	r1, [r4, #7]
   226ec:	29ff      	cmp	r1, #255	; 0xff
   226ee:	f000 80c3 	beq.w	22878 <nrfx_qspi_init+0x1c8>
    if (!p_config->skip_gpio_cfg)
   226f2:	2a00      	cmp	r2, #0
   226f4:	d142      	bne.n	2277c <nrfx_qspi_init+0xcc>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   226f6:	a801      	add	r0, sp, #4
        QSPI_PIN_INIT(p_config->pins.sck_pin);
   226f8:	9301      	str	r3, [sp, #4]
   226fa:	f7ff fed3 	bl	224a4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   226fe:	9b01      	ldr	r3, [sp, #4]
   22700:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   22704:	f240 3102 	movw	r1, #770	; 0x302
   22708:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2270c:	a801      	add	r0, sp, #4
        QSPI_PIN_INIT(p_config->pins.csn_pin);
   2270e:	7963      	ldrb	r3, [r4, #5]
   22710:	9301      	str	r3, [sp, #4]
   22712:	f7ff fec7 	bl	224a4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   22716:	9b01      	ldr	r3, [sp, #4]
   22718:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2271c:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22720:	a801      	add	r0, sp, #4
        QSPI_PIN_INIT(p_config->pins.io0_pin);
   22722:	79a3      	ldrb	r3, [r4, #6]
   22724:	9301      	str	r3, [sp, #4]
   22726:	f7ff febd 	bl	224a4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2272a:	9b01      	ldr	r3, [sp, #4]
   2272c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   22730:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22734:	a801      	add	r0, sp, #4
        QSPI_PIN_INIT(p_config->pins.io1_pin);
   22736:	79e3      	ldrb	r3, [r4, #7]
   22738:	9301      	str	r3, [sp, #4]
   2273a:	f7ff feb3 	bl	224a4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2273e:	9b01      	ldr	r3, [sp, #4]
   22740:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   22744:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        if (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   22748:	7a23      	ldrb	r3, [r4, #8]
   2274a:	2bff      	cmp	r3, #255	; 0xff
   2274c:	d008      	beq.n	22760 <nrfx_qspi_init+0xb0>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2274e:	a801      	add	r0, sp, #4
            QSPI_PIN_INIT(p_config->pins.io2_pin);
   22750:	9301      	str	r3, [sp, #4]
   22752:	f7ff fea7 	bl	224a4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   22756:	9b01      	ldr	r3, [sp, #4]
   22758:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2275c:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        if (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   22760:	7a63      	ldrb	r3, [r4, #9]
   22762:	2bff      	cmp	r3, #255	; 0xff
   22764:	d00a      	beq.n	2277c <nrfx_qspi_init+0xcc>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22766:	a801      	add	r0, sp, #4
            QSPI_PIN_INIT(p_config->pins.io3_pin);
   22768:	9301      	str	r3, [sp, #4]
   2276a:	f7ff fe9b 	bl	224a4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2276e:	9b01      	ldr	r3, [sp, #4]
   22770:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   22774:	f240 3202 	movw	r2, #770	; 0x302
   22778:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   2277c:	7d23      	ldrb	r3, [r4, #20]
   2277e:	bb63      	cbnz	r3, 227da <nrfx_qspi_init+0x12a>
    p_reg->PSEL.SCK = NRF_QSPI_PIN_VAL(p_pins->sck_pin);
   22780:	7923      	ldrb	r3, [r4, #4]
   22782:	2bff      	cmp	r3, #255	; 0xff
   22784:	bf18      	it	ne
   22786:	461a      	movne	r2, r3
   22788:	4b3d      	ldr	r3, [pc, #244]	; (22880 <nrfx_qspi_init+0x1d0>)
   2278a:	bf08      	it	eq
   2278c:	f04f 32ff 	moveq.w	r2, #4294967295
   22790:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->PSEL.CSN = NRF_QSPI_PIN_VAL(p_pins->csn_pin);
   22794:	7962      	ldrb	r2, [r4, #5]
   22796:	2aff      	cmp	r2, #255	; 0xff
   22798:	bf08      	it	eq
   2279a:	f04f 32ff 	moveq.w	r2, #4294967295
   2279e:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
    p_reg->PSEL.IO0 = NRF_QSPI_PIN_VAL(p_pins->io0_pin);
   227a2:	79a2      	ldrb	r2, [r4, #6]
   227a4:	2aff      	cmp	r2, #255	; 0xff
   227a6:	bf08      	it	eq
   227a8:	f04f 32ff 	moveq.w	r2, #4294967295
   227ac:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
    p_reg->PSEL.IO1 = NRF_QSPI_PIN_VAL(p_pins->io1_pin);
   227b0:	79e2      	ldrb	r2, [r4, #7]
   227b2:	2aff      	cmp	r2, #255	; 0xff
   227b4:	bf08      	it	eq
   227b6:	f04f 32ff 	moveq.w	r2, #4294967295
   227ba:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    p_reg->PSEL.IO2 = NRF_QSPI_PIN_VAL(p_pins->io2_pin);
   227be:	7a22      	ldrb	r2, [r4, #8]
   227c0:	2aff      	cmp	r2, #255	; 0xff
   227c2:	bf08      	it	eq
   227c4:	f04f 32ff 	moveq.w	r2, #4294967295
   227c8:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->PSEL.IO3 = NRF_QSPI_PIN_VAL(p_pins->io3_pin);
   227cc:	7a62      	ldrb	r2, [r4, #9]
   227ce:	2aff      	cmp	r2, #255	; 0xff
   227d0:	bf08      	it	eq
   227d2:	f04f 32ff 	moveq.w	r2, #4294967295
   227d6:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
    p_reg->INTENCLR = mask;
   227da:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 22880 <nrfx_qspi_init+0x1d0>
   227de:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   227e0:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   227e2:	f8c8 3308 	str.w	r3, [r8, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   227e6:	f8c8 2100 	str.w	r2, [r8, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   227ea:	f8c8 3000 	str.w	r3, [r8]
        if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
   227ee:	f7ff fee3 	bl	225b8 <qspi_ready_wait>
   227f2:	4b24      	ldr	r3, [pc, #144]	; (22884 <nrfx_qspi_init+0x1d4>)
   227f4:	4298      	cmp	r0, r3
   227f6:	d03c      	beq.n	22872 <nrfx_qspi_init+0x1c2>
    nrf_qspi_xip_offset_set(NRF_QSPI, p_config->xip_offset);
   227f8:	6823      	ldr	r3, [r4, #0]
    p_reg->XIPOFFSET = xip_offset;
   227fa:	f8c8 3540 	str.w	r3, [r8, #1344]	; 0x540
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   227fe:	7b23      	ldrb	r3, [r4, #12]
    config |= ((uint32_t)p_config->writeoc)    << QSPI_IFCONFIG0_WRITEOC_Pos;
   22800:	7ae1      	ldrb	r1, [r4, #11]
    uint32_t config = p_config->readoc;
   22802:	7aa2      	ldrb	r2, [r4, #10]
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   22804:	019b      	lsls	r3, r3, #6
   22806:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
   2280a:	4313      	orrs	r3, r2
    config |= (p_config->dpmconfig ? 1U : 0U ) << QSPI_IFCONFIG0_DPMENABLE_Pos;
   2280c:	7b62      	ldrb	r2, [r4, #13]
   2280e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
    p_reg->IFCONFIG0 = config;
   22812:	f8c8 3544 	str.w	r3, [r8, #1348]	; 0x544
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   22816:	f8d8 2600 	ldr.w	r2, [r8, #1536]	; 0x600
    config |= p_config->sck_delay;
   2281a:	7ba3      	ldrb	r3, [r4, #14]
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   2281c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   22820:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    config |= p_config->sck_delay;
   22824:	4313      	orrs	r3, r2
    config |= (p_config->dpmen ? 1U : 0U)      << QSPI_IFCONFIG1_DPMEN_Pos;
   22826:	7be2      	ldrb	r2, [r4, #15]
   22828:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    config |= ((uint32_t)(p_config->spi_mode)) << QSPI_IFCONFIG1_SPIMODE_Pos;
   2282c:	7c22      	ldrb	r2, [r4, #16]
   2282e:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
    config |= ((uint32_t)(p_config->sck_freq)) << QSPI_IFCONFIG1_SCKFREQ_Pos;
   22832:	7c62      	ldrb	r2, [r4, #17]
   22834:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    p_reg->IFCONFIG1 = config;
   22838:	f8c8 3600 	str.w	r3, [r8, #1536]	; 0x600
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
   2283c:	7ce3      	ldrb	r3, [r4, #19]
   2283e:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    m_cb.p_context = p_context;
   22842:	e9c5 6700 	strd	r6, r7, [r5]
    if (handler)
   22846:	b116      	cbz	r6, 2284e <nrfx_qspi_init+0x19e>
        NRFX_IRQ_ENABLE(QSPI_IRQn);
   22848:	2029      	movs	r0, #41	; 0x29
   2284a:	f7f2 fab1 	bl	14db0 <arch_irq_enable>
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Enabled << QSPI_ENABLE_ENABLE_Pos);
   2284e:	4b0c      	ldr	r3, [pc, #48]	; (22880 <nrfx_qspi_init+0x1d0>)
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   22850:	2201      	movs	r2, #1
    m_cb.p_buffer_primary = NULL;
   22852:	2100      	movs	r1, #0
    m_cb.p_buffer_secondary = NULL;
   22854:	e9c5 1102 	strd	r1, r1, [r5, #8]
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   22858:	f885 2030 	strb.w	r2, [r5, #48]	; 0x30
   2285c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22860:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22864:	601a      	str	r2, [r3, #0]
}
   22866:	b002      	add	sp, #8
   22868:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return qspi_ready_wait();
   2286c:	f7ff bea4 	b.w	225b8 <qspi_ready_wait>
        return NRFX_ERROR_INVALID_STATE;
   22870:	4805      	ldr	r0, [pc, #20]	; (22888 <nrfx_qspi_init+0x1d8>)
}
   22872:	b002      	add	sp, #8
   22874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return NRFX_ERROR_INVALID_PARAM;
   22878:	4804      	ldr	r0, [pc, #16]	; (2288c <nrfx_qspi_init+0x1dc>)
   2287a:	e7fa      	b.n	22872 <nrfx_qspi_init+0x1c2>
   2287c:	20003938 	.word	0x20003938
   22880:	40029000 	.word	0x40029000
   22884:	0bad0007 	.word	0x0bad0007
   22888:	0bad0005 	.word	0x0bad0005
   2288c:	0bad0004 	.word	0x0bad0004

00022890 <nrfx_qspi_cinstr_xfer>:
{
   22890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22894:	4615      	mov	r5, r2
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
   22896:	4a1f      	ldr	r2, [pc, #124]	; (22914 <nrfx_qspi_cinstr_xfer+0x84>)
   22898:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   2289c:	2a01      	cmp	r2, #1
{
   2289e:	4604      	mov	r4, r0
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
   228a0:	d135      	bne.n	2290e <nrfx_qspi_cinstr_xfer+0x7e>
    if (p_tx_buffer)
   228a2:	b111      	cbz	r1, 228aa <nrfx_qspi_cinstr_xfer+0x1a>
        nrf_qspi_cinstrdata_set(NRF_QSPI, p_config->length, p_tx_buffer);
   228a4:	7840      	ldrb	r0, [r0, #1]
   228a6:	f7ff fed1 	bl	2264c <nrf_qspi_cinstrdata_set.constprop.0>
    p_reg->INTENCLR = mask;
   228aa:	4e1b      	ldr	r6, [pc, #108]	; (22918 <nrfx_qspi_cinstr_xfer+0x88>)
        if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
   228ac:	f8df 806c 	ldr.w	r8, [pc, #108]	; 2291c <nrfx_qspi_cinstr_xfer+0x8c>
   228b0:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   228b2:	2700      	movs	r7, #0
    p_reg->INTENCLR = mask;
   228b4:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   228b8:	f8c6 7100 	str.w	r7, [r6, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   228bc:	6033      	str	r3, [r6, #0]
   228be:	f7ff fe7b 	bl	225b8 <qspi_ready_wait>
   228c2:	4540      	cmp	r0, r8
   228c4:	d102      	bne.n	228cc <nrfx_qspi_cinstr_xfer+0x3c>
            return NRFX_ERROR_TIMEOUT;
   228c6:	4815      	ldr	r0, [pc, #84]	; (2291c <nrfx_qspi_cinstr_xfer+0x8c>)
}
   228c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   228cc:	f8c6 7100 	str.w	r7, [r6, #256]	; 0x100
NRF_STATIC_INLINE void nrf_qspi_cinstr_transfer_start(NRF_QSPI_Type *                p_reg,
                                                      nrf_qspi_cinstr_conf_t const * p_config)
{
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   228d0:	78a3      	ldrb	r3, [r4, #2]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   228d2:	7862      	ldrb	r2, [r4, #1]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   228d4:	031b      	lsls	r3, r3, #12
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   228d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   228da:	7822      	ldrb	r2, [r4, #0]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   228dc:	4313      	orrs	r3, r2
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   228de:	78e2      	ldrb	r2, [r4, #3]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   228e0:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   228e4:	7922      	ldrb	r2, [r4, #4]
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   228e6:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
                         ((uint32_t)p_config->wren      << QSPI_CINSTRCONF_WREN_Pos));
   228ea:	7962      	ldrb	r2, [r4, #5]
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   228ec:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   228f0:	f8c6 3634 	str.w	r3, [r6, #1588]	; 0x634
    if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
   228f4:	f7ff fe60 	bl	225b8 <qspi_ready_wait>
   228f8:	4540      	cmp	r0, r8
   228fa:	d0e4      	beq.n	228c6 <nrfx_qspi_cinstr_xfer+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   228fc:	f8c6 7100 	str.w	r7, [r6, #256]	; 0x100
    if (p_rx_buffer)
   22900:	b11d      	cbz	r5, 2290a <nrfx_qspi_cinstr_xfer+0x7a>
        nrf_qspi_cinstrdata_get(NRF_QSPI, p_config->length, p_rx_buffer);
   22902:	7860      	ldrb	r0, [r4, #1]
   22904:	4629      	mov	r1, r5
   22906:	f7ff fe81 	bl	2260c <nrf_qspi_cinstrdata_get.constprop.0>
    return NRFX_SUCCESS;
   2290a:	4805      	ldr	r0, [pc, #20]	; (22920 <nrfx_qspi_cinstr_xfer+0x90>)
   2290c:	e7dc      	b.n	228c8 <nrfx_qspi_cinstr_xfer+0x38>
        return NRFX_ERROR_BUSY;
   2290e:	4805      	ldr	r0, [pc, #20]	; (22924 <nrfx_qspi_cinstr_xfer+0x94>)
   22910:	e7da      	b.n	228c8 <nrfx_qspi_cinstr_xfer+0x38>
   22912:	bf00      	nop
   22914:	20003938 	.word	0x20003938
   22918:	40029000 	.word	0x40029000
   2291c:	0bad0007 	.word	0x0bad0007
   22920:	0bad0000 	.word	0x0bad0000
   22924:	0bad000b 	.word	0x0bad000b

00022928 <nrfx_qspi_mem_busy_check>:
{
   22928:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_qspi_cinstr_conf_t const config = {
   2292a:	4a0d      	ldr	r2, [pc, #52]	; (22960 <nrfx_qspi_mem_busy_check+0x38>)
   2292c:	9202      	str	r2, [sp, #8]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   2292e:	f10d 0207 	add.w	r2, sp, #7
    uint8_t status_value = 0;
   22932:	2300      	movs	r3, #0
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   22934:	4611      	mov	r1, r2
   22936:	a802      	add	r0, sp, #8
    uint8_t status_value = 0;
   22938:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_qspi_cinstr_conf_t const config = {
   2293c:	f8ad 300c 	strh.w	r3, [sp, #12]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   22940:	f7ff ffa6 	bl	22890 <nrfx_qspi_cinstr_xfer>
    if (ret_code != NRFX_SUCCESS)
   22944:	4b07      	ldr	r3, [pc, #28]	; (22964 <nrfx_qspi_mem_busy_check+0x3c>)
   22946:	4298      	cmp	r0, r3
   22948:	d106      	bne.n	22958 <nrfx_qspi_mem_busy_check+0x30>
    if ((status_value & QSPI_MEM_STATUSREG_WIP_Pos) != 0x00)
   2294a:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRFX_ERROR_BUSY;
   2294e:	f013 0f01 	tst.w	r3, #1
   22952:	4b05      	ldr	r3, [pc, #20]	; (22968 <nrfx_qspi_mem_busy_check+0x40>)
   22954:	bf18      	it	ne
   22956:	4618      	movne	r0, r3
}
   22958:	b005      	add	sp, #20
   2295a:	f85d fb04 	ldr.w	pc, [sp], #4
   2295e:	bf00      	nop
   22960:	01000205 	.word	0x01000205
   22964:	0bad0000 	.word	0x0bad0000
   22968:	0bad000b 	.word	0x0bad000b

0002296c <nrfx_qspi_uninit>:
{
   2296c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    NRFX_IRQ_DISABLE(QSPI_IRQn);
   22970:	2029      	movs	r0, #41	; 0x29
   22972:	f7f2 fa2b 	bl	14dcc <arch_irq_disable>
                         (QSPI_CINSTRCONF_LFEN_Msk));
}

NRF_STATIC_INLINE bool nrf_qspi_cinstr_long_transfer_is_ongoing(NRF_QSPI_Type const * p_reg)
{
    return (bool)((p_reg->CINSTRCONF & (QSPI_CINSTRCONF_LFEN_Msk | QSPI_CINSTRCONF_LFSTOP_Msk))
   22976:	4b24      	ldr	r3, [pc, #144]	; (22a08 <nrfx_qspi_uninit+0x9c>)
    if (!m_cb.skip_gpio_cfg)
   22978:	4d24      	ldr	r5, [pc, #144]	; (22a0c <nrfx_qspi_uninit+0xa0>)
   2297a:	f8d3 2634 	ldr.w	r2, [r3, #1588]	; 0x634
   2297e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
    if (nrf_qspi_cinstr_long_transfer_is_ongoing(NRF_QSPI))
   22982:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
                                                              bool                  finalize)
{
    uint32_t mask = (((uint32_t)length << QSPI_CINSTRCONF_LENGTH_Pos) | (QSPI_CINSTRCONF_LFEN_Msk));
    mask |= (finalize ? QSPI_CINSTRCONF_LFSTOP_Msk : 0);

    p_reg->CINSTRCONF = mask;
   22986:	bf04      	itt	eq
   22988:	4a21      	ldreq	r2, [pc, #132]	; (22a10 <nrfx_qspi_uninit+0xa4>)
   2298a:	f8c3 2634 	streq.w	r2, [r3, #1588]	; 0x634
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2298e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    p_reg->INTENCLR = mask;
   22992:	2201      	movs	r2, #1
   22994:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22998:	611a      	str	r2, [r3, #16]
            if (var1 == 0x08)
   2299a:	f8d1 1130 	ldr.w	r1, [r1, #304]	; 0x130
   2299e:	2908      	cmp	r1, #8
        *(volatile uint32_t *)0x40029054ul = 1ul;
   229a0:	bf08      	it	eq
   229a2:	655a      	streq	r2, [r3, #84]	; 0x54
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Disabled << QSPI_ENABLE_ENABLE_Pos);
   229a4:	4b18      	ldr	r3, [pc, #96]	; (22a08 <nrfx_qspi_uninit+0x9c>)
   229a6:	2200      	movs	r2, #0
   229a8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   229ac:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (!m_cb.skip_gpio_cfg)
   229b0:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
   229b4:	bb1a      	cbnz	r2, 229fe <nrfx_qspi_uninit+0x92>
    p_pins->sck_pin = (uint8_t)p_reg->PSEL.SCK;
   229b6:	f8d3 0524 	ldr.w	r0, [r3, #1316]	; 0x524
    p_pins->csn_pin = (uint8_t)p_reg->PSEL.CSN;
   229ba:	f8d3 8528 	ldr.w	r8, [r3, #1320]	; 0x528
    p_pins->io0_pin = (uint8_t)p_reg->PSEL.IO0;
   229be:	f8d3 7530 	ldr.w	r7, [r3, #1328]	; 0x530
    p_pins->io1_pin = (uint8_t)p_reg->PSEL.IO1;
   229c2:	f8d3 6534 	ldr.w	r6, [r3, #1332]	; 0x534
    p_pins->io2_pin = (uint8_t)p_reg->PSEL.IO2;
   229c6:	f8d3 4538 	ldr.w	r4, [r3, #1336]	; 0x538
    p_pins->io3_pin = (uint8_t)p_reg->PSEL.IO3;
   229ca:	f8d3 153c 	ldr.w	r1, [r3, #1340]	; 0x53c
    nrf_gpio_cfg_default(pins.sck_pin);
   229ce:	b2c0      	uxtb	r0, r0
   229d0:	f009 f8d2 	bl	2bb78 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.csn_pin);
   229d4:	fa5f f088 	uxtb.w	r0, r8
   229d8:	f009 f8ce 	bl	2bb78 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io0_pin);
   229dc:	b2f8      	uxtb	r0, r7
   229de:	f009 f8cb 	bl	2bb78 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io1_pin);
   229e2:	b2f0      	uxtb	r0, r6
   229e4:	f009 f8c8 	bl	2bb78 <nrf_gpio_cfg_default>
    if (pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   229e8:	b2e0      	uxtb	r0, r4
   229ea:	28ff      	cmp	r0, #255	; 0xff
   229ec:	b2c9      	uxtb	r1, r1
   229ee:	d001      	beq.n	229f4 <nrfx_qspi_uninit+0x88>
        nrf_gpio_cfg_default(pins.io2_pin);
   229f0:	f009 f8c2 	bl	2bb78 <nrf_gpio_cfg_default>
    if (pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   229f4:	29ff      	cmp	r1, #255	; 0xff
   229f6:	d002      	beq.n	229fe <nrfx_qspi_uninit+0x92>
        nrf_gpio_cfg_default(pins.io3_pin);
   229f8:	4608      	mov	r0, r1
   229fa:	f009 f8bd 	bl	2bb78 <nrf_gpio_cfg_default>
    m_cb.state = NRFX_QSPI_STATE_UNINITIALIZED;
   229fe:	2300      	movs	r3, #0
   22a00:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
}
   22a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22a08:	40029000 	.word	0x40029000
   22a0c:	20003938 	.word	0x20003938
   22a10:	00030100 	.word	0x00030100

00022a14 <nrfx_qspi_erase>:
    if (!nrfx_is_word_aligned((void const *)start_address))
   22a14:	078b      	lsls	r3, r1, #30
   22a16:	d121      	bne.n	22a5c <nrfx_qspi_erase+0x48>
    if (m_cb.handler && m_cb.state != NRFX_QSPI_STATE_IDLE)
   22a18:	4a12      	ldr	r2, [pc, #72]	; (22a64 <nrfx_qspi_erase+0x50>)
   22a1a:	6813      	ldr	r3, [r2, #0]
   22a1c:	b11b      	cbz	r3, 22a26 <nrfx_qspi_erase+0x12>
   22a1e:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
   22a22:	2b01      	cmp	r3, #1
   22a24:	d11c      	bne.n	22a60 <nrfx_qspi_erase+0x4c>
    m_cb.state = NRFX_QSPI_STATE_ERASE;
   22a26:	2304      	movs	r3, #4
   22a28:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    p_reg->ERASE.PTR = erase_addr;
   22a2c:	4b0e      	ldr	r3, [pc, #56]	; (22a68 <nrfx_qspi_erase+0x54>)
   22a2e:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22a32:	2100      	movs	r1, #0
    p_reg->ERASE.LEN = len;
   22a34:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22a38:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22a3c:	2101      	movs	r1, #1
   22a3e:	60d9      	str	r1, [r3, #12]
    if (!m_cb.handler)
   22a40:	6810      	ldr	r0, [r2, #0]
   22a42:	b940      	cbnz	r0, 22a56 <nrfx_qspi_erase+0x42>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22a44:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   22a48:	2900      	cmp	r1, #0
   22a4a:	d0fb      	beq.n	22a44 <nrfx_qspi_erase+0x30>
        m_cb.state = NRFX_QSPI_STATE_IDLE;
   22a4c:	2301      	movs	r3, #1
   22a4e:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        return NRFX_ERROR_BUSY;
   22a52:	4806      	ldr	r0, [pc, #24]	; (22a6c <nrfx_qspi_erase+0x58>)
   22a54:	4770      	bx	lr
    p_reg->INTENSET = mask;
   22a56:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
}
   22a5a:	e7fa      	b.n	22a52 <nrfx_qspi_erase+0x3e>
        return NRFX_ERROR_INVALID_ADDR;
   22a5c:	4804      	ldr	r0, [pc, #16]	; (22a70 <nrfx_qspi_erase+0x5c>)
   22a5e:	4770      	bx	lr
        return NRFX_ERROR_BUSY;
   22a60:	4804      	ldr	r0, [pc, #16]	; (22a74 <nrfx_qspi_erase+0x60>)
}
   22a62:	4770      	bx	lr
   22a64:	20003938 	.word	0x20003938
   22a68:	40029000 	.word	0x40029000
   22a6c:	0bad0000 	.word	0x0bad0000
   22a70:	0bad000a 	.word	0x0bad000a
   22a74:	0bad000b 	.word	0x0bad000b

00022a78 <nrfx_qspi_irq_handler>:
            break;
    }
}

void nrfx_qspi_irq_handler(void)
{
   22a78:	b510      	push	{r4, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22a7a:	4b17      	ldr	r3, [pc, #92]	; (22ad8 <nrfx_qspi_irq_handler+0x60>)
   22a7c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    // Catch Event ready interrupts
    if (nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   22a80:	b1e2      	cbz	r2, 22abc <nrfx_qspi_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22a82:	2200      	movs	r2, #0
    switch (m_cb.state)
   22a84:	4c15      	ldr	r4, [pc, #84]	; (22adc <nrfx_qspi_irq_handler+0x64>)
   22a86:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   22a8a:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   22a8e:	2a03      	cmp	r2, #3
   22a90:	d015      	beq.n	22abe <nrfx_qspi_irq_handler+0x46>
   22a92:	2a04      	cmp	r2, #4
   22a94:	d015      	beq.n	22ac2 <nrfx_qspi_irq_handler+0x4a>
   22a96:	2a02      	cmp	r2, #2
   22a98:	d104      	bne.n	22aa4 <nrfx_qspi_irq_handler+0x2c>
            p_event->type = NRFX_QSPI_EVENT_WRITE_DONE;
   22a9a:	2301      	movs	r3, #1
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   22a9c:	f884 3020 	strb.w	r3, [r4, #32]
            qspi_event_xfer_handle(&p_event->data.xfer);
   22aa0:	f7ff fda0 	bl	225e4 <qspi_event_xfer_handle.constprop.0>
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);

        qspi_extended_event_process(&m_cb.evt_ext);
        if (!m_cb.p_buffer_primary)
   22aa4:	68a3      	ldr	r3, [r4, #8]
   22aa6:	b913      	cbnz	r3, 22aae <nrfx_qspi_irq_handler+0x36>
        {
            m_cb.state = NRFX_QSPI_STATE_IDLE;
   22aa8:	2301      	movs	r3, #1
   22aaa:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        }

        m_cb.handler(NRFX_QSPI_EVENT_DONE, m_cb.p_context);
   22aae:	e9d4 3100 	ldrd	r3, r1, [r4]
   22ab2:	2000      	movs	r0, #0
   22ab4:	4798      	blx	r3
        m_cb.evt_ext.type = NRFX_QSPI_EVENT_NONE;
   22ab6:	2300      	movs	r3, #0
   22ab8:	f884 3020 	strb.w	r3, [r4, #32]
    }
}
   22abc:	bd10      	pop	{r4, pc}
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   22abe:	2302      	movs	r3, #2
   22ac0:	e7ec      	b.n	22a9c <nrfx_qspi_irq_handler+0x24>
            p_event->type = NRFX_QSPI_EVENT_ERASE_DONE;
   22ac2:	2203      	movs	r2, #3
   22ac4:	f884 2020 	strb.w	r2, [r4, #32]
    return p_reg->ERASE.PTR;
   22ac8:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
    p_erase->addr = nrf_qspi_erase_ptr_get(NRF_QSPI);
   22acc:	6262      	str	r2, [r4, #36]	; 0x24
    return (nrf_qspi_erase_len_t)p_reg->ERASE.LEN;
   22ace:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
   22ad2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   22ad6:	e7e5      	b.n	22aa4 <nrfx_qspi_irq_handler+0x2c>
   22ad8:	40029000 	.word	0x40029000
   22adc:	20003938 	.word	0x20003938

00022ae0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   22ae0:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   22ae2:	4c11      	ldr	r4, [pc, #68]	; (22b28 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   22ae4:	4a11      	ldr	r2, [pc, #68]	; (22b2c <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   22ae6:	4912      	ldr	r1, [pc, #72]	; (22b30 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   22ae8:	2303      	movs	r3, #3
   22aea:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   22aec:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   22aee:	4b11      	ldr	r3, [pc, #68]	; (22b34 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
   22af0:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   22af2:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   22af4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   22af8:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   22afa:	2300      	movs	r3, #0
   22afc:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   22afe:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   22b00:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   22b02:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   22b04:	4a0c      	ldr	r2, [pc, #48]	; (22b38 <_DoInit+0x58>)
   22b06:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   22b08:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   22b0a:	2210      	movs	r2, #16
   22b0c:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   22b0e:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   22b10:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   22b12:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   22b14:	f006 f9a7 	bl	28e66 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   22b18:	4908      	ldr	r1, [pc, #32]	; (22b3c <_DoInit+0x5c>)
   22b1a:	4620      	mov	r0, r4
   22b1c:	f006 f9a3 	bl	28e66 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   22b20:	2320      	movs	r3, #32
   22b22:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   22b24:	bd10      	pop	{r4, pc}
   22b26:	bf00      	nop
   22b28:	2000396c 	.word	0x2000396c
   22b2c:	00030559 	.word	0x00030559
   22b30:	00030562 	.word	0x00030562
   22b34:	20004767 	.word	0x20004767
   22b38:	20004757 	.word	0x20004757
   22b3c:	00030566 	.word	0x00030566

00022b40 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   22b40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   22b44:	4f21      	ldr	r7, [pc, #132]	; (22bcc <SEGGER_RTT_WriteSkipNoLock+0x8c>)
   22b46:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   22b4a:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   22b4c:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   22b50:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
   22b52:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   22b54:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   22b56:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   22b58:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   22b5a:	d831      	bhi.n	22bc0 <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   22b5c:	f8d2 a020 	ldr.w	sl, [r2, #32]
   22b60:	ebaa 0905 	sub.w	r9, sl, r5
   22b64:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   22b68:	4294      	cmp	r4, r2
   22b6a:	d811      	bhi.n	22b90 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   22b6c:	2318      	movs	r3, #24
   22b6e:	fb06 3303 	mla	r3, r6, r3, r3
   22b72:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
   22b74:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   22b76:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   22b78:	4641      	mov	r1, r8
   22b7a:	4428      	add	r0, r5
   22b7c:	f006 f9d4 	bl	28f28 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   22b80:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   22b82:	2318      	movs	r3, #24
   22b84:	fb03 7306 	mla	r3, r3, r6, r7
      return 1;
   22b88:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
   22b8a:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   22b8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   22b90:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   22b92:	429c      	cmp	r4, r3
   22b94:	d818      	bhi.n	22bc8 <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   22b96:	fb00 bb0b 	mla	fp, r0, fp, fp
   22b9a:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   22b9c:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   22b9e:	f8db 0004 	ldr.w	r0, [fp, #4]
   22ba2:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   22ba4:	4428      	add	r0, r5
   22ba6:	f006 f9bf 	bl	28f28 <memcpy>
      if (NumBytes) {
   22baa:	ebb4 040a 	subs.w	r4, r4, sl
   22bae:	d0e8      	beq.n	22b82 <SEGGER_RTT_WriteSkipNoLock+0x42>
        memcpy((void*)pDst, pData + Rem, NumBytes);
   22bb0:	f8db 0004 	ldr.w	r0, [fp, #4]
   22bb4:	4622      	mov	r2, r4
   22bb6:	eb08 0109 	add.w	r1, r8, r9
   22bba:	f006 f9b5 	bl	28f28 <memcpy>
      return 1;
   22bbe:	e7e0      	b.n	22b82 <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
   22bc0:	3b01      	subs	r3, #1
   22bc2:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   22bc4:	42a3      	cmp	r3, r4
   22bc6:	d2d1      	bcs.n	22b6c <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   22bc8:	2000      	movs	r0, #0
   22bca:	e7df      	b.n	22b8c <SEGGER_RTT_WriteSkipNoLock+0x4c>
   22bcc:	2000396c 	.word	0x2000396c

00022bd0 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   22bd0:	4b03      	ldr	r3, [pc, #12]	; (22be0 <SEGGER_RTT_HasDataUp+0x10>)
   22bd2:	2218      	movs	r2, #24
   22bd4:	fb02 3300 	mla	r3, r2, r0, r3
   22bd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   22bda:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   22bdc:	1a80      	subs	r0, r0, r2
   22bde:	4770      	bx	lr
   22be0:	2000396c 	.word	0x2000396c

00022be4 <zephyr_rtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
   22be4:	4803      	ldr	r0, [pc, #12]	; (22bf4 <zephyr_rtt_mutex_lock+0x10>)
   22be6:	f04f 32ff 	mov.w	r2, #4294967295
   22bea:	f04f 33ff 	mov.w	r3, #4294967295
   22bee:	f000 baa7 	b.w	23140 <z_impl_k_mutex_lock>
   22bf2:	bf00      	nop
   22bf4:	20000ab4 	.word	0x20000ab4

00022bf8 <zephyr_rtt_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   22bf8:	4801      	ldr	r0, [pc, #4]	; (22c00 <zephyr_rtt_mutex_unlock+0x8>)
   22bfa:	f000 bb1b 	b.w	23234 <z_impl_k_mutex_unlock>
   22bfe:	bf00      	nop
   22c00:	20000ab4 	.word	0x20000ab4

00022c04 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   22c04:	4b01      	ldr	r3, [pc, #4]	; (22c0c <z_impl_z_errno+0x8>)
   22c06:	6898      	ldr	r0, [r3, #8]
}
   22c08:	3064      	adds	r0, #100	; 0x64
   22c0a:	4770      	bx	lr
   22c0c:	20003a14 	.word	0x20003a14

00022c10 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   22c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22c14:	b086      	sub	sp, #24
   22c16:	4605      	mov	r5, r0
   22c18:	af00      	add	r7, sp, #0
   22c1a:	460e      	mov	r6, r1
	__asm__ volatile(
   22c1c:	f04f 0340 	mov.w	r3, #64	; 0x40
   22c20:	f3ef 8811 	mrs	r8, BASEPRI
   22c24:	f383 8812 	msr	BASEPRI_MAX, r3
   22c28:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   22c2c:	f001 f88e 	bl	23d4c <z_impl_z_current_get>
   22c30:	2d04      	cmp	r5, #4
   22c32:	bf96      	itet	ls
   22c34:	4b2c      	ldrls	r3, [pc, #176]	; (22ce8 <z_fatal_error+0xd8>)
   22c36:	4b2d      	ldrhi	r3, [pc, #180]	; (22cec <z_fatal_error+0xdc>)
   22c38:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   22c3c:	46e9      	mov	r9, sp
   22c3e:	b08a      	sub	sp, #40	; 0x28
   22c40:	4604      	mov	r4, r0
   22c42:	466a      	mov	r2, sp
   22c44:	492a      	ldr	r1, [pc, #168]	; (22cf0 <z_fatal_error+0xe0>)
   22c46:	61d3      	str	r3, [r2, #28]
   22c48:	f240 3301 	movw	r3, #769	; 0x301
   22c4c:	8493      	strh	r3, [r2, #36]	; 0x24
   22c4e:	f04f 0a00 	mov.w	sl, #0
   22c52:	4b28      	ldr	r3, [pc, #160]	; (22cf4 <z_fatal_error+0xe4>)
   22c54:	f8c2 a020 	str.w	sl, [r2, #32]
   22c58:	e9c2 1505 	strd	r1, r5, [r2, #20]
   22c5c:	f842 3f10 	str.w	r3, [r2, #16]!
   22c60:	4825      	ldr	r0, [pc, #148]	; (22cf8 <z_fatal_error+0xe8>)
   22c62:	4653      	mov	r3, sl
   22c64:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   22c68:	f7f0 ffac 	bl	13bc4 <z_impl_z_log_msg_static_create>
   22c6c:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   22c6e:	b17e      	cbz	r6, 22c90 <z_fatal_error+0x80>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   22c70:	69f3      	ldr	r3, [r6, #28]
   22c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
   22c76:	b15b      	cbz	r3, 22c90 <z_fatal_error+0x80>
		LOG_ERR("Fault during interrupt handling\n");
   22c78:	4b20      	ldr	r3, [pc, #128]	; (22cfc <z_fatal_error+0xec>)
   22c7a:	617b      	str	r3, [r7, #20]
   22c7c:	2302      	movs	r3, #2
   22c7e:	613b      	str	r3, [r7, #16]
   22c80:	481d      	ldr	r0, [pc, #116]	; (22cf8 <z_fatal_error+0xe8>)
   22c82:	4653      	mov	r3, sl
   22c84:	f107 0210 	add.w	r2, r7, #16
   22c88:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   22c8c:	f7f0 ff9a 	bl	13bc4 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   22c90:	b12c      	cbz	r4, 22c9e <z_fatal_error+0x8e>
   22c92:	4620      	mov	r0, r4
   22c94:	f009 f867 	bl	2bd66 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   22c98:	b108      	cbz	r0, 22c9e <z_fatal_error+0x8e>
   22c9a:	7803      	ldrb	r3, [r0, #0]
   22c9c:	b903      	cbnz	r3, 22ca0 <z_fatal_error+0x90>
		thread_name = "unknown";
   22c9e:	4818      	ldr	r0, [pc, #96]	; (22d00 <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   22ca0:	46e9      	mov	r9, sp
   22ca2:	b08a      	sub	sp, #40	; 0x28
   22ca4:	466a      	mov	r2, sp
   22ca6:	4b17      	ldr	r3, [pc, #92]	; (22d04 <z_fatal_error+0xf4>)
   22ca8:	61d0      	str	r0, [r2, #28]
   22caa:	e9c2 3405 	strd	r3, r4, [r2, #20]
   22cae:	f240 3301 	movw	r3, #769	; 0x301
   22cb2:	8413      	strh	r3, [r2, #32]
   22cb4:	4b14      	ldr	r3, [pc, #80]	; (22d08 <z_fatal_error+0xf8>)
   22cb6:	f842 3f10 	str.w	r3, [r2, #16]!
   22cba:	2300      	movs	r3, #0
   22cbc:	480e      	ldr	r0, [pc, #56]	; (22cf8 <z_fatal_error+0xe8>)
   22cbe:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   22cc2:	f7f0 ff7f 	bl	13bc4 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   22cc6:	4631      	mov	r1, r6
   22cc8:	46cd      	mov	sp, r9
   22cca:	4628      	mov	r0, r5
   22ccc:	f7fd fd96 	bl	207fc <k_sys_fatal_error_handler>
	__asm__ volatile(
   22cd0:	f388 8811 	msr	BASEPRI, r8
   22cd4:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   22cd8:	4620      	mov	r0, r4
   22cda:	f7f2 fd2b 	bl	15734 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   22cde:	3718      	adds	r7, #24
   22ce0:	46bd      	mov	sp, r7
   22ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22ce6:	bf00      	nop
   22ce8:	0002d500 	.word	0x0002d500
   22cec:	0003056d 	.word	0x0003056d
   22cf0:	0003057b 	.word	0x0003057b
   22cf4:	01000005 	.word	0x01000005
   22cf8:	0002cbe4 	.word	0x0002cbe4
   22cfc:	000305a3 	.word	0x000305a3
   22d00:	0002e54f 	.word	0x0002e54f
   22d04:	000305c4 	.word	0x000305c4
   22d08:	01000004 	.word	0x01000004

00022d0c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   22d0c:	4b10      	ldr	r3, [pc, #64]	; (22d50 <z_sys_init_run_level+0x44>)
{
   22d0e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   22d10:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   22d14:	3001      	adds	r0, #1
   22d16:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   22d1a:	42a6      	cmp	r6, r4
   22d1c:	d800      	bhi.n	22d20 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
   22d1e:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
   22d20:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
   22d24:	b18d      	cbz	r5, 22d4a <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
   22d26:	4628      	mov	r0, r5
   22d28:	4798      	blx	r3
			if (rc != 0) {
   22d2a:	b138      	cbz	r0, 22d3c <z_sys_init_run_level+0x30>
				if (rc < 0) {
   22d2c:	2800      	cmp	r0, #0
   22d2e:	bfb8      	it	lt
   22d30:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   22d32:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
   22d34:	28ff      	cmp	r0, #255	; 0xff
   22d36:	bfa8      	it	ge
   22d38:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   22d3a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   22d3c:	68ea      	ldr	r2, [r5, #12]
   22d3e:	7853      	ldrb	r3, [r2, #1]
   22d40:	f043 0301 	orr.w	r3, r3, #1
   22d44:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   22d46:	3408      	adds	r4, #8
   22d48:	e7e7      	b.n	22d1a <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
   22d4a:	4798      	blx	r3
   22d4c:	e7fb      	b.n	22d46 <z_sys_init_run_level+0x3a>
   22d4e:	bf00      	nop
   22d50:	0002d514 	.word	0x0002d514

00022d54 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   22d54:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   22d56:	4b0a      	ldr	r3, [pc, #40]	; (22d80 <bg_thread_main+0x2c>)
   22d58:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   22d5a:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   22d5c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   22d5e:	f7ff ffd5 	bl	22d0c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   22d62:	f001 fb2f 	bl	243c4 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   22d66:	2004      	movs	r0, #4
   22d68:	f7ff ffd0 	bl	22d0c <z_sys_init_run_level>

	z_init_static_threads();
   22d6c:	f000 f970 	bl	23050 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
   22d70:	f7ee fcbc 	bl	116ec <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   22d74:	4a03      	ldr	r2, [pc, #12]	; (22d84 <bg_thread_main+0x30>)
   22d76:	7b13      	ldrb	r3, [r2, #12]
   22d78:	f023 0301 	bic.w	r3, r3, #1
   22d7c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   22d7e:	bd08      	pop	{r3, pc}
   22d80:	20004b67 	.word	0x20004b67
   22d84:	20002cd0 	.word	0x20002cd0

00022d88 <z_bss_zero>:
{
   22d88:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   22d8a:	4803      	ldr	r0, [pc, #12]	; (22d98 <z_bss_zero+0x10>)
   22d8c:	4a03      	ldr	r2, [pc, #12]	; (22d9c <z_bss_zero+0x14>)
   22d8e:	2100      	movs	r1, #0
   22d90:	1a12      	subs	r2, r2, r0
   22d92:	f008 ff1c 	bl	2bbce <z_early_memset>
}
   22d96:	bd08      	pop	{r3, pc}
   22d98:	20000c58 	.word	0x20000c58
   22d9c:	20004b6c 	.word	0x20004b6c

00022da0 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   22da0:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
   22da2:	2300      	movs	r3, #0
{
   22da4:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   22da6:	2201      	movs	r2, #1
   22da8:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
   22dac:	4e13      	ldr	r6, [pc, #76]	; (22dfc <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   22dae:	4d14      	ldr	r5, [pc, #80]	; (22e00 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   22db0:	9301      	str	r3, [sp, #4]
   22db2:	220f      	movs	r2, #15
   22db4:	e9cd 3202 	strd	r3, r2, [sp, #8]
   22db8:	4912      	ldr	r1, [pc, #72]	; (22e04 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   22dba:	2314      	movs	r3, #20
   22dbc:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
   22dc0:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
   22dc4:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   22dc6:	f44f 70c0 	mov.w	r0, #384	; 0x180
   22dca:	fb00 1104 	mla	r1, r0, r4, r1
   22dce:	4b0e      	ldr	r3, [pc, #56]	; (22e08 <z_init_cpu+0x68>)
   22dd0:	9500      	str	r5, [sp, #0]
   22dd2:	f44f 72a0 	mov.w	r2, #320	; 0x140
   22dd6:	4630      	mov	r0, r6
   22dd8:	f000 f8dc 	bl	22f94 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   22ddc:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   22dde:	4a0b      	ldr	r2, [pc, #44]	; (22e0c <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   22de0:	60ee      	str	r6, [r5, #12]
   22de2:	f023 0304 	bic.w	r3, r3, #4
   22de6:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   22de8:	f44f 6304 	mov.w	r3, #2112	; 0x840
   22dec:	fb04 3303 	mla	r3, r4, r3, r3
   22df0:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
   22df2:	742c      	strb	r4, [r5, #16]
	_kernel.cpus[id].irq_stack =
   22df4:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   22df6:	b006      	add	sp, #24
   22df8:	bd70      	pop	{r4, r5, r6, pc}
   22dfa:	bf00      	nop
   22dfc:	20002c50 	.word	0x20002c50
   22e00:	20003a14 	.word	0x20003a14
   22e04:	20007840 	.word	0x20007840
   22e08:	00023109 	.word	0x00023109
   22e0c:	20007000 	.word	0x20007000

00022e10 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
   22e10:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   22e12:	2000      	movs	r0, #0
{
   22e14:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   22e16:	f7ff ff79 	bl	22d0c <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   22e1a:	4b2e      	ldr	r3, [pc, #184]	; (22ed4 <z_cstart+0xc4>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   22e1c:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   22e20:	4d2d      	ldr	r5, [pc, #180]	; (22ed8 <z_cstart+0xc8>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   22e22:	4e2e      	ldr	r6, [pc, #184]	; (22edc <z_cstart+0xcc>)
   22e24:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   22e26:	4f2e      	ldr	r7, [pc, #184]	; (22ee0 <z_cstart+0xd0>)
   22e28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   22e2c:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   22e2e:	23e0      	movs	r3, #224	; 0xe0
   22e30:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   22e34:	2400      	movs	r4, #0
   22e36:	2320      	movs	r3, #32
   22e38:	77eb      	strb	r3, [r5, #31]
   22e3a:	762c      	strb	r4, [r5, #24]
   22e3c:	766c      	strb	r4, [r5, #25]
   22e3e:	76ac      	strb	r4, [r5, #26]
   22e40:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   22e44:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   22e46:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   22e4a:	626b      	str	r3, [r5, #36]	; 0x24
   22e4c:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   22e50:	f7f2 fbe4 	bl	1561c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   22e54:	f7f1 ff26 	bl	14ca4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   22e58:	f04f 33ff 	mov.w	r3, #4294967295
   22e5c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   22e5e:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   22e60:	f7f2 fd38 	bl	158d4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   22e64:	f7f2 fc7c 	bl	15760 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   22e68:	f7f0 fd38 	bl	138dc <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   22e6c:	f240 1301 	movw	r3, #257	; 0x101
   22e70:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   22e74:	ab06      	add	r3, sp, #24
   22e76:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   22e78:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
   22e7c:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   22e7e:	f008 fe9a 	bl	2bbb6 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   22e82:	2001      	movs	r0, #1
   22e84:	f7ff ff42 	bl	22d0c <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   22e88:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   22e8a:	4d16      	ldr	r5, [pc, #88]	; (22ee4 <z_cstart+0xd4>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   22e8c:	f7ff ff3e 	bl	22d0c <z_sys_init_run_level>
	z_sched_init();
   22e90:	f000 feb8 	bl	23c04 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   22e94:	4b14      	ldr	r3, [pc, #80]	; (22ee8 <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
   22e96:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   22e98:	9305      	str	r3, [sp, #20]
   22e9a:	2301      	movs	r3, #1
   22e9c:	4913      	ldr	r1, [pc, #76]	; (22eec <z_cstart+0xdc>)
   22e9e:	9400      	str	r4, [sp, #0]
   22ea0:	e9cd 4303 	strd	r4, r3, [sp, #12]
   22ea4:	f44f 6200 	mov.w	r2, #2048	; 0x800
   22ea8:	463b      	mov	r3, r7
   22eaa:	e9cd 4401 	strd	r4, r4, [sp, #4]
   22eae:	4628      	mov	r0, r5
   22eb0:	f000 f870 	bl	22f94 <z_setup_new_thread>
   22eb4:	7b6a      	ldrb	r2, [r5, #13]
   22eb6:	4606      	mov	r6, r0
   22eb8:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   22ebc:	4628      	mov	r0, r5
   22ebe:	736a      	strb	r2, [r5, #13]
   22ec0:	f009 f95f 	bl	2c182 <z_ready_thread>
	z_init_cpu(0);
   22ec4:	4620      	mov	r0, r4
   22ec6:	f7ff ff6b 	bl	22da0 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   22eca:	463a      	mov	r2, r7
   22ecc:	4631      	mov	r1, r6
   22ece:	4628      	mov	r0, r5
   22ed0:	f7f2 f86c 	bl	14fac <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   22ed4:	20007840 	.word	0x20007840
   22ed8:	e000ed00 	.word	0xe000ed00
   22edc:	20003a14 	.word	0x20003a14
   22ee0:	00022d55 	.word	0x00022d55
   22ee4:	20002cd0 	.word	0x20002cd0
   22ee8:	00030626 	.word	0x00030626
   22eec:	200079c0 	.word	0x200079c0

00022ef0 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
   22ef0:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
   22ef2:	4c06      	ldr	r4, [pc, #24]	; (22f0c <statics_init+0x1c>)
   22ef4:	4d06      	ldr	r5, [pc, #24]	; (22f10 <statics_init+0x20>)
   22ef6:	42ac      	cmp	r4, r5
   22ef8:	d301      	bcc.n	22efe <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   22efa:	2000      	movs	r0, #0
   22efc:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   22efe:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   22f02:	4620      	mov	r0, r4
   22f04:	f008 fe67 	bl	2bbd6 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   22f08:	3414      	adds	r4, #20
   22f0a:	e7f4      	b.n	22ef6 <statics_init+0x6>
   22f0c:	20000a64 	.word	0x20000a64
   22f10:	20000a64 	.word	0x20000a64

00022f14 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
   22f14:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   22f16:	4c06      	ldr	r4, [pc, #24]	; (22f30 <init_mem_slab_module+0x1c>)
   22f18:	4d06      	ldr	r5, [pc, #24]	; (22f34 <init_mem_slab_module+0x20>)
	int rc = 0;
   22f1a:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   22f1c:	42ac      	cmp	r4, r5
   22f1e:	d300      	bcc.n	22f22 <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
   22f20:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
   22f22:	4620      	mov	r0, r4
   22f24:	f008 fec9 	bl	2bcba <create_free_list>
		if (rc < 0) {
   22f28:	2800      	cmp	r0, #0
   22f2a:	dbf9      	blt.n	22f20 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   22f2c:	341c      	adds	r4, #28
   22f2e:	e7f5      	b.n	22f1c <init_mem_slab_module+0x8>
   22f30:	20000a10 	.word	0x20000a10
   22f34:	20000a64 	.word	0x20000a64

00022f38 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   22f38:	b573      	push	{r0, r1, r4, r5, r6, lr}
   22f3a:	460c      	mov	r4, r1
	__asm__ volatile(
   22f3c:	f04f 0540 	mov.w	r5, #64	; 0x40
   22f40:	f3ef 8111 	mrs	r1, BASEPRI
   22f44:	f385 8812 	msr	BASEPRI_MAX, r5
   22f48:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   22f4c:	6945      	ldr	r5, [r0, #20]
   22f4e:	b15d      	cbz	r5, 22f68 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   22f50:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   22f52:	682b      	ldr	r3, [r5, #0]
   22f54:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   22f56:	6983      	ldr	r3, [r0, #24]
   22f58:	3301      	adds	r3, #1
   22f5a:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   22f5c:	2000      	movs	r0, #0
	__asm__ volatile(
   22f5e:	f381 8811 	msr	BASEPRI, r1
   22f62:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   22f66:	e011      	b.n	22f8c <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   22f68:	ea52 0603 	orrs.w	r6, r2, r3
   22f6c:	d103      	bne.n	22f76 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   22f6e:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   22f70:	f06f 000b 	mvn.w	r0, #11
   22f74:	e7f3      	b.n	22f5e <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   22f76:	e9cd 2300 	strd	r2, r3, [sp]
   22f7a:	4602      	mov	r2, r0
   22f7c:	3008      	adds	r0, #8
   22f7e:	f000 fd4b 	bl	23a18 <z_pend_curr>
		if (result == 0) {
   22f82:	b918      	cbnz	r0, 22f8c <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   22f84:	4b02      	ldr	r3, [pc, #8]	; (22f90 <k_mem_slab_alloc+0x58>)
   22f86:	689b      	ldr	r3, [r3, #8]
   22f88:	695b      	ldr	r3, [r3, #20]
   22f8a:	6023      	str	r3, [r4, #0]
}
   22f8c:	b002      	add	sp, #8
   22f8e:	bd70      	pop	{r4, r5, r6, pc}
   22f90:	20003a14 	.word	0x20003a14

00022f94 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   22f94:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   22f98:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   22f9a:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   22f9c:	2604      	movs	r6, #4
   22f9e:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   22fa0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   22fa2:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   22fa4:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   22fa8:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   22faa:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   22fac:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   22fb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   22fb2:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   22fb4:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   22fb8:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   22fba:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   22fbe:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   22fc2:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   22fc4:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   22fc6:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   22fc8:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   22fcc:	9202      	str	r2, [sp, #8]
   22fce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   22fd0:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   22fd2:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   22fd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   22fd6:	9200      	str	r2, [sp, #0]
   22fd8:	4642      	mov	r2, r8
{
   22fda:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   22fdc:	f7f1 ffb4 	bl	14f48 <arch_new_thread>
	if (!_current) {
   22fe0:	4b04      	ldr	r3, [pc, #16]	; (22ff4 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   22fe2:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   22fe4:	689b      	ldr	r3, [r3, #8]
   22fe6:	b103      	cbz	r3, 22fea <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   22fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   22fea:	6763      	str	r3, [r4, #116]	; 0x74
}
   22fec:	4640      	mov	r0, r8
   22fee:	b004      	add	sp, #16
   22ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22ff4:	20003a14 	.word	0x20003a14

00022ff8 <z_impl_k_thread_create>:
{
   22ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
   22ffa:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   22ffc:	2500      	movs	r5, #0
   22ffe:	9505      	str	r5, [sp, #20]
   23000:	9d10      	ldr	r5, [sp, #64]	; 0x40
   23002:	9504      	str	r5, [sp, #16]
   23004:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   23006:	9503      	str	r5, [sp, #12]
   23008:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   2300a:	9502      	str	r5, [sp, #8]
{
   2300c:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   23010:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   23012:	9501      	str	r5, [sp, #4]
   23014:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   23016:	9500      	str	r5, [sp, #0]
{
   23018:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2301a:	f7ff ffbb 	bl	22f94 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   2301e:	f1b6 3fff 	cmp.w	r6, #4294967295
   23022:	bf08      	it	eq
   23024:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   23028:	d005      	beq.n	23036 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2302a:	ea56 0307 	orrs.w	r3, r6, r7
   2302e:	d105      	bne.n	2303c <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   23030:	4620      	mov	r0, r4
   23032:	f000 fd67 	bl	23b04 <z_sched_start>
}
   23036:	4620      	mov	r0, r4
   23038:	b007      	add	sp, #28
   2303a:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   2303c:	4903      	ldr	r1, [pc, #12]	; (2304c <z_impl_k_thread_create+0x54>)
   2303e:	463a      	mov	r2, r7
   23040:	4633      	mov	r3, r6
   23042:	f104 0018 	add.w	r0, r4, #24
   23046:	f000 ff7d 	bl	23f44 <z_add_timeout>
   2304a:	e7f4      	b.n	23036 <z_impl_k_thread_create+0x3e>
   2304c:	0002c20b 	.word	0x0002c20b

00023050 <z_init_static_threads>:
{
   23050:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23054:	4c29      	ldr	r4, [pc, #164]	; (230fc <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   23056:	4d2a      	ldr	r5, [pc, #168]	; (23100 <z_init_static_threads+0xb0>)
{
   23058:	b087      	sub	sp, #28
   2305a:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   2305c:	42ae      	cmp	r6, r5
   2305e:	f104 042c 	add.w	r4, r4, #44	; 0x2c
   23062:	d30f      	bcc.n	23084 <z_init_static_threads+0x34>
	k_sched_lock();
   23064:	f000 fd9e 	bl	23ba4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   23068:	4c24      	ldr	r4, [pc, #144]	; (230fc <z_init_static_threads+0xac>)
   2306a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 23104 <z_init_static_threads+0xb4>
   2306e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   23072:	f240 37e7 	movw	r7, #999	; 0x3e7
   23076:	42ac      	cmp	r4, r5
   23078:	d320      	bcc.n	230bc <z_init_static_threads+0x6c>
}
   2307a:	b007      	add	sp, #28
   2307c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   23080:	f000 bda4 	b.w	23bcc <k_sched_unlock>
		z_setup_new_thread(
   23084:	f854 3c04 	ldr.w	r3, [r4, #-4]
   23088:	9305      	str	r3, [sp, #20]
   2308a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   2308e:	9304      	str	r3, [sp, #16]
   23090:	f854 3c10 	ldr.w	r3, [r4, #-16]
   23094:	9303      	str	r3, [sp, #12]
   23096:	f854 3c14 	ldr.w	r3, [r4, #-20]
   2309a:	9302      	str	r3, [sp, #8]
   2309c:	f854 3c18 	ldr.w	r3, [r4, #-24]
   230a0:	9301      	str	r3, [sp, #4]
   230a2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   230a6:	9300      	str	r3, [sp, #0]
   230a8:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
   230ac:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
   230b0:	f7ff ff70 	bl	22f94 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   230b4:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   230b8:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   230ba:	e7ce      	b.n	2305a <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   230bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   230be:	1c5a      	adds	r2, r3, #1
   230c0:	d00d      	beq.n	230de <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   230c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   230c6:	2100      	movs	r1, #0
   230c8:	4638      	mov	r0, r7
   230ca:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   230ce:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   230d2:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   230d6:	d104      	bne.n	230e2 <z_init_static_threads+0x92>
	z_sched_start(thread);
   230d8:	4640      	mov	r0, r8
   230da:	f000 fd13 	bl	23b04 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   230de:	342c      	adds	r4, #44	; 0x2c
   230e0:	e7c9      	b.n	23076 <z_init_static_threads+0x26>
   230e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   230e6:	2300      	movs	r3, #0
   230e8:	f7dd f80a 	bl	100 <__aeabi_uldivmod>
   230ec:	4602      	mov	r2, r0
   230ee:	460b      	mov	r3, r1
   230f0:	f108 0018 	add.w	r0, r8, #24
   230f4:	4649      	mov	r1, r9
   230f6:	f000 ff25 	bl	23f44 <z_add_timeout>
   230fa:	e7f0      	b.n	230de <z_init_static_threads+0x8e>
   230fc:	0002ca34 	.word	0x0002ca34
   23100:	0002ca60 	.word	0x0002ca60
   23104:	0002c20b 	.word	0x0002c20b

00023108 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   23108:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   2310a:	4c0b      	ldr	r4, [pc, #44]	; (23138 <idle+0x30>)
	return !z_sys_post_kernel;
   2310c:	4d0b      	ldr	r5, [pc, #44]	; (2313c <idle+0x34>)
	__asm__ volatile(
   2310e:	f04f 0240 	mov.w	r2, #64	; 0x40
   23112:	f3ef 8311 	mrs	r3, BASEPRI
   23116:	f382 8812 	msr	BASEPRI_MAX, r2
   2311a:	f3bf 8f6f 	isb	sy
   2311e:	f009 f932 	bl	2c386 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   23122:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   23124:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   23126:	b913      	cbnz	r3, 2312e <idle+0x26>
	arch_cpu_idle();
   23128:	f7f1 fdc2 	bl	14cb0 <arch_cpu_idle>
}
   2312c:	e7ef      	b.n	2310e <idle+0x6>
   2312e:	f7f1 f925 	bl	1437c <pm_system_suspend>
   23132:	2800      	cmp	r0, #0
   23134:	d1eb      	bne.n	2310e <idle+0x6>
   23136:	e7f7      	b.n	23128 <idle+0x20>
   23138:	20003a14 	.word	0x20003a14
   2313c:	20004b67 	.word	0x20004b67

00023140 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   23140:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   23144:	4604      	mov	r4, r0
   23146:	4617      	mov	r7, r2
   23148:	461e      	mov	r6, r3
   2314a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2314e:	f3ef 8811 	mrs	r8, BASEPRI
   23152:	f383 8812 	msr	BASEPRI_MAX, r3
   23156:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   2315a:	68c3      	ldr	r3, [r0, #12]
   2315c:	4a33      	ldr	r2, [pc, #204]	; (2322c <z_impl_k_mutex_lock+0xec>)
   2315e:	b17b      	cbz	r3, 23180 <z_impl_k_mutex_lock+0x40>
   23160:	6880      	ldr	r0, [r0, #8]
   23162:	6891      	ldr	r1, [r2, #8]
   23164:	4288      	cmp	r0, r1
   23166:	d019      	beq.n	2319c <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   23168:	ea57 0306 	orrs.w	r3, r7, r6
   2316c:	d118      	bne.n	231a0 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   2316e:	f388 8811 	msr	BASEPRI, r8
   23172:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   23176:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   2317a:	b002      	add	sp, #8
   2317c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   23180:	6891      	ldr	r1, [r2, #8]
   23182:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   23186:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   23188:	3301      	adds	r3, #1
   2318a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   2318c:	6893      	ldr	r3, [r2, #8]
   2318e:	60a3      	str	r3, [r4, #8]
   23190:	f388 8811 	msr	BASEPRI, r8
   23194:	f3bf 8f6f 	isb	sy
		return 0;
   23198:	2000      	movs	r0, #0
   2319a:	e7ee      	b.n	2317a <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   2319c:	6921      	ldr	r1, [r4, #16]
   2319e:	e7f2      	b.n	23186 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   231a0:	f991 100e 	ldrsb.w	r1, [r1, #14]
   231a4:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   231a8:	4299      	cmp	r1, r3
   231aa:	bfa8      	it	ge
   231ac:	4619      	movge	r1, r3
   231ae:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   231b2:	4291      	cmp	r1, r2
   231b4:	bfb8      	it	lt
   231b6:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   231b8:	428b      	cmp	r3, r1
   231ba:	dd2e      	ble.n	2321a <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   231bc:	f008 fdde 	bl	2bd7c <adjust_owner_prio.isra.0>
   231c0:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   231c2:	e9cd 7600 	strd	r7, r6, [sp]
   231c6:	481a      	ldr	r0, [pc, #104]	; (23230 <z_impl_k_mutex_lock+0xf0>)
   231c8:	4622      	mov	r2, r4
   231ca:	4641      	mov	r1, r8
   231cc:	f000 fc24 	bl	23a18 <z_pend_curr>
	if (got_mutex == 0) {
   231d0:	2800      	cmp	r0, #0
   231d2:	d0e1      	beq.n	23198 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   231d4:	f04f 0340 	mov.w	r3, #64	; 0x40
   231d8:	f3ef 8611 	mrs	r6, BASEPRI
   231dc:	f383 8812 	msr	BASEPRI_MAX, r3
   231e0:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
   231e4:	68a0      	ldr	r0, [r4, #8]
   231e6:	b1d0      	cbz	r0, 2321e <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   231e8:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   231ea:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   231ec:	429c      	cmp	r4, r3
   231ee:	d00a      	beq.n	23206 <z_impl_k_mutex_lock+0xc6>
   231f0:	b14b      	cbz	r3, 23206 <z_impl_k_mutex_lock+0xc6>
   231f2:	f993 300e 	ldrsb.w	r3, [r3, #14]
   231f6:	4299      	cmp	r1, r3
   231f8:	bfa8      	it	ge
   231fa:	4619      	movge	r1, r3
   231fc:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   23200:	4299      	cmp	r1, r3
   23202:	bfb8      	it	lt
   23204:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   23206:	f008 fdb9 	bl	2bd7c <adjust_owner_prio.isra.0>
   2320a:	b140      	cbz	r0, 2321e <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   2320c:	4808      	ldr	r0, [pc, #32]	; (23230 <z_impl_k_mutex_lock+0xf0>)
   2320e:	4631      	mov	r1, r6
   23210:	f000 fc66 	bl	23ae0 <z_reschedule>
	return -EAGAIN;
   23214:	f06f 000a 	mvn.w	r0, #10
   23218:	e7af      	b.n	2317a <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   2321a:	2500      	movs	r5, #0
   2321c:	e7d1      	b.n	231c2 <z_impl_k_mutex_lock+0x82>
	if (resched) {
   2321e:	2d00      	cmp	r5, #0
   23220:	d1f4      	bne.n	2320c <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   23222:	f386 8811 	msr	BASEPRI, r6
   23226:	f3bf 8f6f 	isb	sy
   2322a:	e7f3      	b.n	23214 <z_impl_k_mutex_lock+0xd4>
   2322c:	20003a14 	.word	0x20003a14
   23230:	20004b68 	.word	0x20004b68

00023234 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   23234:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   23236:	6883      	ldr	r3, [r0, #8]
{
   23238:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   2323a:	b36b      	cbz	r3, 23298 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   2323c:	4a19      	ldr	r2, [pc, #100]	; (232a4 <z_impl_k_mutex_unlock+0x70>)
   2323e:	6892      	ldr	r2, [r2, #8]
   23240:	4293      	cmp	r3, r2
   23242:	d12c      	bne.n	2329e <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   23244:	68c3      	ldr	r3, [r0, #12]
   23246:	2b01      	cmp	r3, #1
   23248:	d903      	bls.n	23252 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   2324a:	3b01      	subs	r3, #1
   2324c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   2324e:	2000      	movs	r0, #0
}
   23250:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   23252:	f04f 0340 	mov.w	r3, #64	; 0x40
   23256:	f3ef 8511 	mrs	r5, BASEPRI
   2325a:	f383 8812 	msr	BASEPRI_MAX, r3
   2325e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   23262:	6901      	ldr	r1, [r0, #16]
   23264:	6880      	ldr	r0, [r0, #8]
   23266:	f008 fd89 	bl	2bd7c <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   2326a:	4620      	mov	r0, r4
   2326c:	f008 ffe8 	bl	2c240 <z_unpend_first_thread>
	mutex->owner = new_owner;
   23270:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   23272:	b158      	cbz	r0, 2328c <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   23274:	f990 200e 	ldrsb.w	r2, [r0, #14]
   23278:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   2327a:	2200      	movs	r2, #0
   2327c:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   2327e:	f008 ff80 	bl	2c182 <z_ready_thread>
		z_reschedule(&lock, key);
   23282:	4809      	ldr	r0, [pc, #36]	; (232a8 <z_impl_k_mutex_unlock+0x74>)
   23284:	4629      	mov	r1, r5
   23286:	f000 fc2b 	bl	23ae0 <z_reschedule>
   2328a:	e7e0      	b.n	2324e <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   2328c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   2328e:	f385 8811 	msr	BASEPRI, r5
   23292:	f3bf 8f6f 	isb	sy
   23296:	e7da      	b.n	2324e <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   23298:	f06f 0015 	mvn.w	r0, #21
   2329c:	e7d8      	b.n	23250 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   2329e:	f04f 30ff 	mov.w	r0, #4294967295
   232a2:	e7d5      	b.n	23250 <z_impl_k_mutex_unlock+0x1c>
   232a4:	20003a14 	.word	0x20003a14
   232a8:	20004b68 	.word	0x20004b68

000232ac <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   232ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   232ae:	4611      	mov	r1, r2
	__asm__ volatile(
   232b0:	f04f 0240 	mov.w	r2, #64	; 0x40
   232b4:	f3ef 8511 	mrs	r5, BASEPRI
   232b8:	f382 8812 	msr	BASEPRI_MAX, r2
   232bc:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   232c0:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   232c2:	b19c      	cbz	r4, 232ec <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   232c4:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   232c6:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   232c8:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   232cc:	4294      	cmp	r4, r2
	list->head = node;
   232ce:	6003      	str	r3, [r0, #0]
	list->tail = node;
   232d0:	bf08      	it	eq
   232d2:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   232d4:	2101      	movs	r1, #1
   232d6:	4620      	mov	r0, r4
   232d8:	f008 fdc5 	bl	2be66 <z_queue_node_peek>
   232dc:	4604      	mov	r4, r0
	__asm__ volatile(
   232de:	f385 8811 	msr	BASEPRI, r5
   232e2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   232e6:	4620      	mov	r0, r4
   232e8:	b003      	add	sp, #12
   232ea:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   232ec:	ea51 0203 	orrs.w	r2, r1, r3
   232f0:	d0f5      	beq.n	232de <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   232f2:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   232f6:	e9cd 1300 	strd	r1, r3, [sp]
   232fa:	4610      	mov	r0, r2
   232fc:	4629      	mov	r1, r5
   232fe:	f000 fb8b 	bl	23a18 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   23302:	2800      	cmp	r0, #0
   23304:	d1ef      	bne.n	232e6 <z_impl_k_queue_get+0x3a>
   23306:	4b02      	ldr	r3, [pc, #8]	; (23310 <z_impl_k_queue_get+0x64>)
   23308:	689b      	ldr	r3, [r3, #8]
   2330a:	695c      	ldr	r4, [r3, #20]
   2330c:	e7eb      	b.n	232e6 <z_impl_k_queue_get+0x3a>
   2330e:	bf00      	nop
   23310:	20003a14 	.word	0x20003a14

00023314 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   23314:	b538      	push	{r3, r4, r5, lr}
   23316:	4604      	mov	r4, r0
	__asm__ volatile(
   23318:	f04f 0340 	mov.w	r3, #64	; 0x40
   2331c:	f3ef 8511 	mrs	r5, BASEPRI
   23320:	f383 8812 	msr	BASEPRI_MAX, r3
   23324:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   23328:	f008 ff8a 	bl	2c240 <z_unpend_first_thread>

	if (thread != NULL) {
   2332c:	b148      	cbz	r0, 23342 <z_impl_k_sem_give+0x2e>
   2332e:	2200      	movs	r2, #0
   23330:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   23332:	f008 ff26 	bl	2c182 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   23336:	4629      	mov	r1, r5
   23338:	4808      	ldr	r0, [pc, #32]	; (2335c <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   2333a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   2333e:	f000 bbcf 	b.w	23ae0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   23342:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   23346:	429a      	cmp	r2, r3
   23348:	bf18      	it	ne
   2334a:	3301      	addne	r3, #1
   2334c:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2334e:	2102      	movs	r1, #2
   23350:	f104 0010 	add.w	r0, r4, #16
   23354:	f009 f9bc 	bl	2c6d0 <z_handle_obj_poll_events>
}
   23358:	e7ed      	b.n	23336 <z_impl_k_sem_give+0x22>
   2335a:	bf00      	nop
   2335c:	20004b68 	.word	0x20004b68

00023360 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   23360:	b513      	push	{r0, r1, r4, lr}
   23362:	f04f 0440 	mov.w	r4, #64	; 0x40
   23366:	f3ef 8111 	mrs	r1, BASEPRI
   2336a:	f384 8812 	msr	BASEPRI_MAX, r4
   2336e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   23372:	6884      	ldr	r4, [r0, #8]
   23374:	b144      	cbz	r4, 23388 <z_impl_k_sem_take+0x28>
		sem->count--;
   23376:	3c01      	subs	r4, #1
   23378:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   2337a:	f381 8811 	msr	BASEPRI, r1
   2337e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   23382:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   23384:	b002      	add	sp, #8
   23386:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   23388:	ea52 0403 	orrs.w	r4, r2, r3
   2338c:	d106      	bne.n	2339c <z_impl_k_sem_take+0x3c>
   2338e:	f381 8811 	msr	BASEPRI, r1
   23392:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   23396:	f06f 000f 	mvn.w	r0, #15
   2339a:	e7f3      	b.n	23384 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   2339c:	e9cd 2300 	strd	r2, r3, [sp]
   233a0:	4602      	mov	r2, r0
   233a2:	4802      	ldr	r0, [pc, #8]	; (233ac <z_impl_k_sem_take+0x4c>)
   233a4:	f000 fb38 	bl	23a18 <z_pend_curr>
	return ret;
   233a8:	e7ec      	b.n	23384 <z_impl_k_sem_take+0x24>
   233aa:	bf00      	nop
   233ac:	20004b68 	.word	0x20004b68

000233b0 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   233b0:	b570      	push	{r4, r5, r6, lr}
   233b2:	4604      	mov	r4, r0
	__asm__ volatile(
   233b4:	f04f 0340 	mov.w	r3, #64	; 0x40
   233b8:	f3ef 8511 	mrs	r5, BASEPRI
   233bc:	f383 8812 	msr	BASEPRI_MAX, r3
   233c0:	f3bf 8f6f 	isb	sy
   233c4:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   233c8:	4620      	mov	r0, r4
   233ca:	f008 ff39 	bl	2c240 <z_unpend_first_thread>
		if (thread == NULL) {
   233ce:	b118      	cbz	r0, 233d8 <z_impl_k_sem_reset+0x28>
   233d0:	67c6      	str	r6, [r0, #124]	; 0x7c
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   233d2:	f008 fed6 	bl	2c182 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   233d6:	e7f7      	b.n	233c8 <z_impl_k_sem_reset+0x18>
	}
	sem->count = 0;
   233d8:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   233da:	2102      	movs	r1, #2
   233dc:	f104 0010 	add.w	r0, r4, #16
   233e0:	f009 f976 	bl	2c6d0 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   233e4:	4629      	mov	r1, r5
   233e6:	4802      	ldr	r0, [pc, #8]	; (233f0 <z_impl_k_sem_reset+0x40>)
}
   233e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   233ec:	f000 bb78 	b.w	23ae0 <z_reschedule>
   233f0:	20004b68 	.word	0x20004b68

000233f4 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
   233f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
   233f6:	4b09      	ldr	r3, [pc, #36]	; (2341c <k_sys_work_q_init+0x28>)
   233f8:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   233fa:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   233fc:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   233fe:	9300      	str	r3, [sp, #0]
   23400:	4907      	ldr	r1, [pc, #28]	; (23420 <k_sys_work_q_init+0x2c>)
   23402:	4808      	ldr	r0, [pc, #32]	; (23424 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   23404:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   23408:	f04f 33ff 	mov.w	r3, #4294967295
   2340c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   23410:	f000 f924 	bl	2365c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   23414:	4620      	mov	r0, r4
   23416:	b004      	add	sp, #16
   23418:	bd10      	pop	{r4, pc}
   2341a:	bf00      	nop
   2341c:	0003062e 	.word	0x0003062e
   23420:	20008200 	.word	0x20008200
   23424:	20002d50 	.word	0x20002d50

00023428 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   23428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   2342c:	4e4a      	ldr	r6, [pc, #296]	; (23558 <work_queue_main+0x130>)
   2342e:	b085      	sub	sp, #20
   23430:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   23432:	f04f 38ff 	mov.w	r8, #4294967295
   23436:	f04f 39ff 	mov.w	r9, #4294967295
   2343a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2343e:	f3ef 8711 	mrs	r7, BASEPRI
   23442:	f383 8812 	msr	BASEPRI_MAX, r3
   23446:	f3bf 8f6f 	isb	sy
   2344a:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   2344e:	b98d      	cbnz	r5, 23474 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   23450:	2102      	movs	r1, #2
   23452:	f104 0098 	add.w	r0, r4, #152	; 0x98
   23456:	f008 fd47 	bl	2bee8 <flag_test_and_clear>
   2345a:	2800      	cmp	r0, #0
   2345c:	d143      	bne.n	234e6 <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   2345e:	2300      	movs	r3, #0
   23460:	e9cd 8900 	strd	r8, r9, [sp]
   23464:	9302      	str	r3, [sp, #8]
   23466:	f104 0288 	add.w	r2, r4, #136	; 0x88
   2346a:	4639      	mov	r1, r7
   2346c:	483b      	ldr	r0, [pc, #236]	; (2355c <work_queue_main+0x134>)
   2346e:	f000 fcd3 	bl	23e18 <z_sched_wait>
			continue;
   23472:	e7e2      	b.n	2343a <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   23474:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   23478:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   2347a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2347e:	4295      	cmp	r5, r2
	list->tail = node;
   23480:	bf08      	it	eq
   23482:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   23486:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   2348a:	f043 0302 	orr.w	r3, r3, #2
   2348e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   23492:	68eb      	ldr	r3, [r5, #12]
   23494:	f023 0304 	bic.w	r3, r3, #4
   23498:	f043 0301 	orr.w	r3, r3, #1
   2349c:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   2349e:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   234a0:	f387 8811 	msr	BASEPRI, r7
   234a4:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   234a8:	4628      	mov	r0, r5
   234aa:	4798      	blx	r3
	__asm__ volatile(
   234ac:	f04f 0340 	mov.w	r3, #64	; 0x40
   234b0:	f3ef 8b11 	mrs	fp, BASEPRI
   234b4:	f383 8812 	msr	BASEPRI_MAX, r3
   234b8:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   234bc:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   234be:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   234c0:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   234c4:	d419      	bmi.n	234fa <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
   234c6:	60ea      	str	r2, [r5, #12]
   234c8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   234cc:	f023 0302 	bic.w	r3, r3, #2
   234d0:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   234d4:	f38b 8811 	msr	BASEPRI, fp
   234d8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   234dc:	05db      	lsls	r3, r3, #23
   234de:	d4ac      	bmi.n	2343a <work_queue_main+0x12>
	z_impl_k_yield();
   234e0:	f000 fb98 	bl	23c14 <z_impl_k_yield>
}
   234e4:	e7a9      	b.n	2343a <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   234e6:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   234ea:	2200      	movs	r2, #0
   234ec:	2101      	movs	r1, #1
   234ee:	4628      	mov	r0, r5
   234f0:	f008 ff00 	bl	2c2f4 <z_sched_wake>
   234f4:	2800      	cmp	r0, #0
   234f6:	d1f8      	bne.n	234ea <work_queue_main+0xc2>
   234f8:	e7b1      	b.n	2345e <work_queue_main+0x36>
	return list->head;
   234fa:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   234fc:	f023 0303 	bic.w	r3, r3, #3
   23500:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   23502:	2800      	cmp	r0, #0
   23504:	d0e0      	beq.n	234c8 <work_queue_main+0xa0>
	return node->next;
   23506:	2700      	movs	r7, #0
   23508:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   2350c:	463b      	mov	r3, r7
   2350e:	2800      	cmp	r0, #0
   23510:	d0da      	beq.n	234c8 <work_queue_main+0xa0>
		if (wc->work == work) {
   23512:	6842      	ldr	r2, [r0, #4]
   23514:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   23516:	4601      	mov	r1, r0
		if (wc->work == work) {
   23518:	d10c      	bne.n	23534 <work_queue_main+0x10c>
	return node->next;
   2351a:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   2351c:	b99f      	cbnz	r7, 23546 <work_queue_main+0x11e>
   2351e:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   23520:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   23522:	4282      	cmp	r2, r0
   23524:	d100      	bne.n	23528 <work_queue_main+0x100>
	list->tail = node;
   23526:	6071      	str	r1, [r6, #4]
	parent->next = child;
   23528:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   2352c:	f7ff fef2 	bl	23314 <z_impl_k_sem_give>
}
   23530:	4639      	mov	r1, r7
   23532:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   23534:	f1ba 0f00 	cmp.w	sl, #0
   23538:	d00b      	beq.n	23552 <work_queue_main+0x12a>
	return node->next;
   2353a:	f8da 2000 	ldr.w	r2, [sl]
   2353e:	4650      	mov	r0, sl
   23540:	460f      	mov	r7, r1
   23542:	4692      	mov	sl, r2
   23544:	e7e3      	b.n	2350e <work_queue_main+0xe6>
	parent->next = child;
   23546:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   23548:	6872      	ldr	r2, [r6, #4]
   2354a:	4282      	cmp	r2, r0
	list->tail = node;
   2354c:	bf08      	it	eq
   2354e:	6077      	streq	r7, [r6, #4]
}
   23550:	e7ea      	b.n	23528 <work_queue_main+0x100>
   23552:	4652      	mov	r2, sl
   23554:	e7f3      	b.n	2353e <work_queue_main+0x116>
   23556:	bf00      	nop
   23558:	20003a38 	.word	0x20003a38
   2355c:	20004b68 	.word	0x20004b68

00023560 <cancel_sync_locked>:
{
   23560:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   23562:	68c3      	ldr	r3, [r0, #12]
   23564:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   23568:	079b      	lsls	r3, r3, #30
{
   2356a:	4605      	mov	r5, r0
   2356c:	460c      	mov	r4, r1
	if (ret) {
   2356e:	d50d      	bpl.n	2358c <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   23570:	2201      	movs	r2, #1
   23572:	2100      	movs	r1, #0
   23574:	f104 0008 	add.w	r0, r4, #8
   23578:	f008 fca6 	bl	2bec8 <z_impl_k_sem_init>
	parent->next = child;
   2357c:	2300      	movs	r3, #0
   2357e:	6023      	str	r3, [r4, #0]
	return list->tail;
   23580:	4b05      	ldr	r3, [pc, #20]	; (23598 <cancel_sync_locked+0x38>)
	canceler->work = work;
   23582:	6065      	str	r5, [r4, #4]
   23584:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   23586:	b91a      	cbnz	r2, 23590 <cancel_sync_locked+0x30>
	list->head = node;
   23588:	e9c3 4400 	strd	r4, r4, [r3]
}
   2358c:	4630      	mov	r0, r6
   2358e:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   23590:	6014      	str	r4, [r2, #0]
	list->tail = node;
   23592:	605c      	str	r4, [r3, #4]
}
   23594:	e7fa      	b.n	2358c <cancel_sync_locked+0x2c>
   23596:	bf00      	nop
   23598:	20003a38 	.word	0x20003a38

0002359c <submit_to_queue_locked>:
{
   2359c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   2359e:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   235a0:	079a      	lsls	r2, r3, #30
{
   235a2:	4604      	mov	r4, r0
   235a4:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   235a6:	f3c3 0640 	ubfx	r6, r3, #1, #1
   235aa:	d42c      	bmi.n	23606 <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   235ac:	075b      	lsls	r3, r3, #29
   235ae:	d41a      	bmi.n	235e6 <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
   235b0:	680b      	ldr	r3, [r1, #0]
   235b2:	b90b      	cbnz	r3, 235b8 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   235b4:	6883      	ldr	r3, [r0, #8]
   235b6:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   235b8:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   235ba:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   235bc:	bf44      	itt	mi
   235be:	68a3      	ldrmi	r3, [r4, #8]
   235c0:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   235c2:	683d      	ldr	r5, [r7, #0]
			ret = 2;
   235c4:	bf4c      	ite	mi
   235c6:	2602      	movmi	r6, #2
		ret = 1;
   235c8:	2601      	movpl	r6, #1
	if (queue == NULL) {
   235ca:	2d00      	cmp	r5, #0
   235cc:	d03a      	beq.n	23644 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   235ce:	4b1f      	ldr	r3, [pc, #124]	; (2364c <submit_to_queue_locked+0xb0>)
   235d0:	689b      	ldr	r3, [r3, #8]
   235d2:	42ab      	cmp	r3, r5
   235d4:	d00a      	beq.n	235ec <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
   235d6:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   235da:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   235dc:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   235e0:	d414      	bmi.n	2360c <submit_to_queue_locked+0x70>
		ret = -EBUSY;
   235e2:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   235e6:	2300      	movs	r3, #0
   235e8:	603b      	str	r3, [r7, #0]
	return ret;
   235ea:	e025      	b.n	23638 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   235ec:	f008 fbb2 	bl	2bd54 <k_is_in_isr>
   235f0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   235f4:	2800      	cmp	r0, #0
   235f6:	d1f0      	bne.n	235da <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   235f8:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   235fa:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   235fe:	d5f0      	bpl.n	235e2 <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
   23600:	b152      	cbz	r2, 23618 <submit_to_queue_locked+0x7c>
   23602:	075b      	lsls	r3, r3, #29
   23604:	d408      	bmi.n	23618 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   23606:	f06f 060f 	mvn.w	r6, #15
   2360a:	e7ec      	b.n	235e6 <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
   2360c:	2a00      	cmp	r2, #0
   2360e:	d1fa      	bne.n	23606 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   23610:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   23614:	2b00      	cmp	r3, #0
   23616:	d1f6      	bne.n	23606 <submit_to_queue_locked+0x6a>
	parent->next = child;
   23618:	2300      	movs	r3, #0
   2361a:	6023      	str	r3, [r4, #0]
	return list->tail;
   2361c:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   23620:	b963      	cbnz	r3, 2363c <submit_to_queue_locked+0xa0>
	list->head = node;
   23622:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
   23626:	4628      	mov	r0, r5
   23628:	f008 fc78 	bl	2bf1c <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   2362c:	68e3      	ldr	r3, [r4, #12]
   2362e:	f043 0304 	orr.w	r3, r3, #4
   23632:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   23634:	683b      	ldr	r3, [r7, #0]
   23636:	60a3      	str	r3, [r4, #8]
}
   23638:	4630      	mov	r0, r6
   2363a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   2363c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2363e:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
   23642:	e7f0      	b.n	23626 <submit_to_queue_locked+0x8a>
		return -EINVAL;
   23644:	f06f 0615 	mvn.w	r6, #21
   23648:	e7cd      	b.n	235e6 <submit_to_queue_locked+0x4a>
   2364a:	bf00      	nop
   2364c:	20003a14 	.word	0x20003a14

00023650 <k_work_submit>:
{
   23650:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   23652:	4801      	ldr	r0, [pc, #4]	; (23658 <k_work_submit+0x8>)
   23654:	f008 bce8 	b.w	2c028 <k_work_submit_to_queue>
   23658:	20002d50 	.word	0x20002d50

0002365c <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   2365c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2365e:	b089      	sub	sp, #36	; 0x24
   23660:	4604      	mov	r4, r0
	list->head = NULL;
   23662:	2000      	movs	r0, #0
	list->tail = NULL;
   23664:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   23668:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   2366a:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   2366e:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   23672:	f104 0090 	add.w	r0, r4, #144	; 0x90
   23676:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   2367a:	b31d      	cbz	r5, 236c4 <k_work_queue_start+0x68>
   2367c:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   2367e:	2800      	cmp	r0, #0
   23680:	f240 1001 	movw	r0, #257	; 0x101
   23684:	bf08      	it	eq
   23686:	2001      	moveq	r0, #1
	*flagp = flags;
   23688:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2368c:	2000      	movs	r0, #0
   2368e:	f04f 36ff 	mov.w	r6, #4294967295
   23692:	f04f 37ff 	mov.w	r7, #4294967295
   23696:	e9cd 3003 	strd	r3, r0, [sp, #12]
   2369a:	e9cd 0001 	strd	r0, r0, [sp, #4]
   2369e:	e9cd 6706 	strd	r6, r7, [sp, #24]
   236a2:	4b09      	ldr	r3, [pc, #36]	; (236c8 <k_work_queue_start+0x6c>)
   236a4:	9400      	str	r4, [sp, #0]
   236a6:	4620      	mov	r0, r4
   236a8:	f7ff fca6 	bl	22ff8 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   236ac:	b125      	cbz	r5, 236b8 <k_work_queue_start+0x5c>
   236ae:	6829      	ldr	r1, [r5, #0]
   236b0:	b111      	cbz	r1, 236b8 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   236b2:	4620      	mov	r0, r4
   236b4:	f008 fb54 	bl	2bd60 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   236b8:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   236ba:	b009      	add	sp, #36	; 0x24
   236bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   236c0:	f008 bb53 	b.w	2bd6a <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   236c4:	2001      	movs	r0, #1
   236c6:	e7df      	b.n	23688 <k_work_queue_start+0x2c>
   236c8:	00023429 	.word	0x00023429

000236cc <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   236cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   236ce:	9001      	str	r0, [sp, #4]
   236d0:	4608      	mov	r0, r1
	__asm__ volatile(
   236d2:	f04f 0140 	mov.w	r1, #64	; 0x40
   236d6:	f3ef 8411 	mrs	r4, BASEPRI
   236da:	f381 8812 	msr	BASEPRI_MAX, r1
   236de:	f3bf 8f6f 	isb	sy
	return *flagp;
   236e2:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   236e4:	f011 0f0e 	tst.w	r1, #14
   236e8:	d116      	bne.n	23718 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   236ea:	ea53 0502 	orrs.w	r5, r3, r2
   236ee:	d108      	bne.n	23702 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   236f0:	a901      	add	r1, sp, #4
   236f2:	f7ff ff53 	bl	2359c <submit_to_queue_locked>
	__asm__ volatile(
   236f6:	f384 8811 	msr	BASEPRI, r4
   236fa:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   236fe:	b003      	add	sp, #12
   23700:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
   23702:	f041 0108 	orr.w	r1, r1, #8
   23706:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   23708:	9901      	ldr	r1, [sp, #4]
   2370a:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2370c:	3010      	adds	r0, #16
   2370e:	4903      	ldr	r1, [pc, #12]	; (2371c <k_work_schedule_for_queue+0x50>)
   23710:	f000 fc18 	bl	23f44 <z_add_timeout>
	return ret;
   23714:	2001      	movs	r0, #1
   23716:	e7ee      	b.n	236f6 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   23718:	2000      	movs	r0, #0
   2371a:	e7ec      	b.n	236f6 <k_work_schedule_for_queue+0x2a>
   2371c:	0002bf91 	.word	0x0002bf91

00023720 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   23720:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   23722:	4801      	ldr	r0, [pc, #4]	; (23728 <k_work_schedule+0x8>)
   23724:	f7ff bfd2 	b.w	236cc <k_work_schedule_for_queue>
   23728:	20002d50 	.word	0x20002d50

0002372c <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   2372c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2372e:	460c      	mov	r4, r1
   23730:	9001      	str	r0, [sp, #4]
   23732:	4616      	mov	r6, r2
   23734:	461d      	mov	r5, r3
	__asm__ volatile(
   23736:	f04f 0340 	mov.w	r3, #64	; 0x40
   2373a:	f3ef 8711 	mrs	r7, BASEPRI
   2373e:	f383 8812 	msr	BASEPRI_MAX, r3
   23742:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   23746:	4608      	mov	r0, r1
   23748:	f008 fbd9 	bl	2befe <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2374c:	ea55 0306 	orrs.w	r3, r5, r6
   23750:	d109      	bne.n	23766 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   23752:	a901      	add	r1, sp, #4
   23754:	4620      	mov	r0, r4
   23756:	f7ff ff21 	bl	2359c <submit_to_queue_locked>
	__asm__ volatile(
   2375a:	f387 8811 	msr	BASEPRI, r7
   2375e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   23762:	b003      	add	sp, #12
   23764:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   23766:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   23768:	4906      	ldr	r1, [pc, #24]	; (23784 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   2376a:	f043 0308 	orr.w	r3, r3, #8
   2376e:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   23770:	9b01      	ldr	r3, [sp, #4]
   23772:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   23774:	f104 0010 	add.w	r0, r4, #16
   23778:	4632      	mov	r2, r6
   2377a:	462b      	mov	r3, r5
   2377c:	f000 fbe2 	bl	23f44 <z_add_timeout>
	return ret;
   23780:	2001      	movs	r0, #1
   23782:	e7ea      	b.n	2375a <k_work_reschedule_for_queue+0x2e>
   23784:	0002bf91 	.word	0x0002bf91

00023788 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   23788:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   2378a:	4801      	ldr	r0, [pc, #4]	; (23790 <k_work_reschedule+0x8>)
   2378c:	f7ff bfce 	b.w	2372c <k_work_reschedule_for_queue>
   23790:	20002d50 	.word	0x20002d50

00023794 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
   23794:	89c3      	ldrh	r3, [r0, #14]
   23796:	2b7f      	cmp	r3, #127	; 0x7f
   23798:	d812      	bhi.n	237c0 <sliceable+0x2c>
	int ret = slice_ticks;
   2379a:	4b0a      	ldr	r3, [pc, #40]	; (237c4 <sliceable+0x30>)
   2379c:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
   2379e:	b163      	cbz	r3, 237ba <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   237a0:	4b09      	ldr	r3, [pc, #36]	; (237c8 <sliceable+0x34>)
   237a2:	f990 200e 	ldrsb.w	r2, [r0, #14]
   237a6:	681b      	ldr	r3, [r3, #0]
   237a8:	429a      	cmp	r2, r3
   237aa:	db09      	blt.n	237c0 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
   237ac:	7b43      	ldrb	r3, [r0, #13]
   237ae:	06db      	lsls	r3, r3, #27
   237b0:	d106      	bne.n	237c0 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
   237b2:	4b06      	ldr	r3, [pc, #24]	; (237cc <sliceable+0x38>)
   237b4:	1ac3      	subs	r3, r0, r3
   237b6:	bf18      	it	ne
   237b8:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   237ba:	f003 0001 	and.w	r0, r3, #1
   237be:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
   237c0:	2300      	movs	r3, #0
   237c2:	e7fa      	b.n	237ba <sliceable+0x26>
   237c4:	20003a48 	.word	0x20003a48
   237c8:	20003a44 	.word	0x20003a44
   237cc:	20002c50 	.word	0x20002c50

000237d0 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
   237d0:	4b04      	ldr	r3, [pc, #16]	; (237e4 <slice_timeout+0x14>)
   237d2:	1ac0      	subs	r0, r0, r3
   237d4:	4b04      	ldr	r3, [pc, #16]	; (237e8 <slice_timeout+0x18>)
   237d6:	10c0      	asrs	r0, r0, #3
   237d8:	4358      	muls	r0, r3

	slice_expired[cpu] = true;
   237da:	4b04      	ldr	r3, [pc, #16]	; (237ec <slice_timeout+0x1c>)
   237dc:	2201      	movs	r2, #1
   237de:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
   237e0:	4770      	bx	lr
   237e2:	bf00      	nop
   237e4:	20002df0 	.word	0x20002df0
   237e8:	aaaaaaab 	.word	0xaaaaaaab
   237ec:	20004b68 	.word	0x20004b68

000237f0 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
   237f0:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
   237f2:	4b0e      	ldr	r3, [pc, #56]	; (2382c <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
   237f4:	4c0e      	ldr	r4, [pc, #56]	; (23830 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
   237f6:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
   237f8:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   237fc:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
{
   23800:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
   23802:	4620      	mov	r0, r4
   23804:	f008 fd99 	bl	2c33a <z_abort_timeout>
	slice_expired[cpu] = false;
   23808:	4b0a      	ldr	r3, [pc, #40]	; (23834 <z_reset_time_slice+0x44>)
   2380a:	2200      	movs	r2, #0
	if (sliceable(curr)) {
   2380c:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
   2380e:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
   23810:	f7ff ffc0 	bl	23794 <sliceable>
   23814:	b148      	cbz	r0, 2382a <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
   23816:	4b08      	ldr	r3, [pc, #32]	; (23838 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   23818:	4908      	ldr	r1, [pc, #32]	; (2383c <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
   2381a:	681a      	ldr	r2, [r3, #0]
   2381c:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   2381e:	4620      	mov	r0, r4
   23820:	17d3      	asrs	r3, r2, #31
	}
}
   23822:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   23826:	f000 bb8d 	b.w	23f44 <z_add_timeout>
}
   2382a:	bd70      	pop	{r4, r5, r6, pc}
   2382c:	20003a14 	.word	0x20003a14
   23830:	20002df0 	.word	0x20002df0
   23834:	20004b68 	.word	0x20004b68
   23838:	20003a48 	.word	0x20003a48
   2383c:	000237d1 	.word	0x000237d1

00023840 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   23840:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   23842:	4d0d      	ldr	r5, [pc, #52]	; (23878 <update_cache+0x38>)
   23844:	462b      	mov	r3, r5
   23846:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2384a:	429c      	cmp	r4, r3
   2384c:	d000      	beq.n	23850 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   2384e:	b904      	cbnz	r4, 23852 <update_cache+0x12>
   23850:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   23852:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   23854:	b938      	cbnz	r0, 23866 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   23856:	7b5a      	ldrb	r2, [r3, #13]
   23858:	06d2      	lsls	r2, r2, #27
   2385a:	d104      	bne.n	23866 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   2385c:	69a2      	ldr	r2, [r4, #24]
   2385e:	b912      	cbnz	r2, 23866 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   23860:	89da      	ldrh	r2, [r3, #14]
   23862:	2a7f      	cmp	r2, #127	; 0x7f
   23864:	d805      	bhi.n	23872 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   23866:	429c      	cmp	r4, r3
   23868:	d002      	beq.n	23870 <update_cache+0x30>
			z_reset_time_slice(thread);
   2386a:	4620      	mov	r0, r4
   2386c:	f7ff ffc0 	bl	237f0 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   23870:	4623      	mov	r3, r4
   23872:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   23874:	bd38      	pop	{r3, r4, r5, pc}
   23876:	bf00      	nop
   23878:	20003a14 	.word	0x20003a14

0002387c <move_thread_to_end_of_prio_q>:
{
   2387c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   2387e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   23882:	7b43      	ldrb	r3, [r0, #13]
   23884:	2a00      	cmp	r2, #0
{
   23886:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   23888:	da04      	bge.n	23894 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2388a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2388e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   23890:	f008 fc34 	bl	2c0fc <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   23894:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   23896:	4a15      	ldr	r2, [pc, #84]	; (238ec <move_thread_to_end_of_prio_q+0x70>)
   23898:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2389c:	4610      	mov	r0, r2
   2389e:	734b      	strb	r3, [r1, #13]
   238a0:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   238a4:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   238a6:	4283      	cmp	r3, r0
   238a8:	bf08      	it	eq
   238aa:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   238ac:	b923      	cbnz	r3, 238b8 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   238ae:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   238b2:	6021      	str	r1, [r4, #0]
	list->tail = node;
   238b4:	6211      	str	r1, [r2, #32]
}
   238b6:	e00c      	b.n	238d2 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   238b8:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   238bc:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   238c0:	42b5      	cmp	r5, r6
   238c2:	d00e      	beq.n	238e2 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   238c4:	42ae      	cmp	r6, r5
   238c6:	dd0c      	ble.n	238e2 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   238c8:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   238ca:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   238ce:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   238d0:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   238d2:	6890      	ldr	r0, [r2, #8]
   238d4:	1a43      	subs	r3, r0, r1
   238d6:	4258      	negs	r0, r3
}
   238d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   238dc:	4158      	adcs	r0, r3
   238de:	f7ff bfaf 	b.w	23840 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   238e2:	429c      	cmp	r4, r3
   238e4:	d0e3      	beq.n	238ae <move_thread_to_end_of_prio_q+0x32>
   238e6:	681b      	ldr	r3, [r3, #0]
   238e8:	e7e0      	b.n	238ac <move_thread_to_end_of_prio_q+0x30>
   238ea:	bf00      	nop
   238ec:	20003a14 	.word	0x20003a14

000238f0 <ready_thread>:
{
   238f0:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   238f2:	f990 300d 	ldrsb.w	r3, [r0, #13]
   238f6:	7b42      	ldrb	r2, [r0, #13]
   238f8:	2b00      	cmp	r3, #0
   238fa:	db29      	blt.n	23950 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   238fc:	06d3      	lsls	r3, r2, #27
   238fe:	d127      	bne.n	23950 <ready_thread+0x60>
	return node->next != NULL;
   23900:	6983      	ldr	r3, [r0, #24]
   23902:	bb2b      	cbnz	r3, 23950 <ready_thread+0x60>
	return list->head == list;
   23904:	4913      	ldr	r1, [pc, #76]	; (23954 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   23906:	f062 027f 	orn	r2, r2, #127	; 0x7f
   2390a:	7342      	strb	r2, [r0, #13]
   2390c:	460a      	mov	r2, r1
   2390e:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23912:	4294      	cmp	r4, r2
   23914:	bf18      	it	ne
   23916:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   23918:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2391a:	b923      	cbnz	r3, 23926 <ready_thread+0x36>
	node->prev = tail;
   2391c:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   23920:	6020      	str	r0, [r4, #0]
	list->tail = node;
   23922:	6208      	str	r0, [r1, #32]
}
   23924:	e00c      	b.n	23940 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   23926:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2392a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   2392e:	42b5      	cmp	r5, r6
   23930:	d00a      	beq.n	23948 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   23932:	42ae      	cmp	r6, r5
   23934:	dd08      	ble.n	23948 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   23936:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   23938:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   2393c:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   2393e:	6058      	str	r0, [r3, #4]
}
   23940:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   23942:	2000      	movs	r0, #0
   23944:	f7ff bf7c 	b.w	23840 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   23948:	42a3      	cmp	r3, r4
   2394a:	d0e7      	beq.n	2391c <ready_thread+0x2c>
   2394c:	681b      	ldr	r3, [r3, #0]
   2394e:	e7e4      	b.n	2391a <ready_thread+0x2a>
}
   23950:	bc70      	pop	{r4, r5, r6}
   23952:	4770      	bx	lr
   23954:	20003a14 	.word	0x20003a14

00023958 <unready_thread>:
{
   23958:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   2395a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   2395e:	7b43      	ldrb	r3, [r0, #13]
   23960:	2a00      	cmp	r2, #0
{
   23962:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   23964:	da04      	bge.n	23970 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23966:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2396a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   2396c:	f008 fbc6 	bl	2c0fc <sys_dlist_remove>
	update_cache(thread == _current);
   23970:	4b04      	ldr	r3, [pc, #16]	; (23984 <unready_thread+0x2c>)
   23972:	6898      	ldr	r0, [r3, #8]
   23974:	1a43      	subs	r3, r0, r1
   23976:	4258      	negs	r0, r3
   23978:	4158      	adcs	r0, r3
}
   2397a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   2397e:	f7ff bf5f 	b.w	23840 <update_cache>
   23982:	bf00      	nop
   23984:	20003a14 	.word	0x20003a14

00023988 <pend_locked>:
{
   23988:	b570      	push	{r4, r5, r6, lr}
   2398a:	4615      	mov	r5, r2
   2398c:	461c      	mov	r4, r3
   2398e:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   23990:	f008 fbcf 	bl	2c132 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   23994:	f1b4 3fff 	cmp.w	r4, #4294967295
   23998:	bf08      	it	eq
   2399a:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   2399e:	d008      	beq.n	239b2 <pend_locked+0x2a>
   239a0:	462a      	mov	r2, r5
   239a2:	4623      	mov	r3, r4
   239a4:	f106 0018 	add.w	r0, r6, #24
   239a8:	4902      	ldr	r1, [pc, #8]	; (239b4 <pend_locked+0x2c>)
}
   239aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   239ae:	f000 bac9 	b.w	23f44 <z_add_timeout>
   239b2:	bd70      	pop	{r4, r5, r6, pc}
   239b4:	0002c20b 	.word	0x0002c20b

000239b8 <z_time_slice>:
{
   239b8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   239ba:	f04f 0340 	mov.w	r3, #64	; 0x40
   239be:	f3ef 8511 	mrs	r5, BASEPRI
   239c2:	f383 8812 	msr	BASEPRI_MAX, r3
   239c6:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
   239ca:	4b10      	ldr	r3, [pc, #64]	; (23a0c <z_time_slice+0x54>)
	if (pending_current == curr) {
   239cc:	4a10      	ldr	r2, [pc, #64]	; (23a10 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
   239ce:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
   239d0:	6810      	ldr	r0, [r2, #0]
   239d2:	42a0      	cmp	r0, r4
   239d4:	d106      	bne.n	239e4 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
   239d6:	f7ff ff0b 	bl	237f0 <z_reset_time_slice>
	__asm__ volatile(
   239da:	f385 8811 	msr	BASEPRI, r5
   239de:	f3bf 8f6f 	isb	sy
}
   239e2:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   239e4:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   239e6:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
   239e8:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   239ea:	4a0a      	ldr	r2, [pc, #40]	; (23a14 <z_time_slice+0x5c>)
   239ec:	5cd3      	ldrb	r3, [r2, r3]
   239ee:	2b00      	cmp	r3, #0
   239f0:	d0f3      	beq.n	239da <z_time_slice+0x22>
   239f2:	4620      	mov	r0, r4
   239f4:	f7ff fece 	bl	23794 <sliceable>
   239f8:	2800      	cmp	r0, #0
   239fa:	d0ee      	beq.n	239da <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
   239fc:	7b63      	ldrb	r3, [r4, #13]
   239fe:	06db      	lsls	r3, r3, #27
   23a00:	d102      	bne.n	23a08 <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
   23a02:	4620      	mov	r0, r4
   23a04:	f7ff ff3a 	bl	2387c <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
   23a08:	4620      	mov	r0, r4
   23a0a:	e7e4      	b.n	239d6 <z_time_slice+0x1e>
   23a0c:	20003a14 	.word	0x20003a14
   23a10:	20003a40 	.word	0x20003a40
   23a14:	20004b68 	.word	0x20004b68

00023a18 <z_pend_curr>:
{
   23a18:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
   23a1a:	480c      	ldr	r0, [pc, #48]	; (23a4c <z_pend_curr+0x34>)
   23a1c:	4d0c      	ldr	r5, [pc, #48]	; (23a50 <z_pend_curr+0x38>)
   23a1e:	6886      	ldr	r6, [r0, #8]
   23a20:	602e      	str	r6, [r5, #0]
{
   23a22:	460c      	mov	r4, r1
   23a24:	4611      	mov	r1, r2
   23a26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
   23a2a:	f04f 0640 	mov.w	r6, #64	; 0x40
   23a2e:	f3ef 8511 	mrs	r5, BASEPRI
   23a32:	f386 8812 	msr	BASEPRI_MAX, r6
   23a36:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   23a3a:	6880      	ldr	r0, [r0, #8]
   23a3c:	f7ff ffa4 	bl	23988 <pend_locked>
	ret = arch_swap(key);
   23a40:	4620      	mov	r0, r4
}
   23a42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   23a46:	f7f1 ba2b 	b.w	14ea0 <arch_swap>
   23a4a:	bf00      	nop
   23a4c:	20003a14 	.word	0x20003a14
   23a50:	20003a40 	.word	0x20003a40

00023a54 <z_set_prio>:
{
   23a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23a56:	4604      	mov	r4, r0
   23a58:	f04f 0340 	mov.w	r3, #64	; 0x40
   23a5c:	f3ef 8611 	mrs	r6, BASEPRI
   23a60:	f383 8812 	msr	BASEPRI_MAX, r3
   23a64:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   23a68:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   23a6a:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   23a6c:	b249      	sxtb	r1, r1
   23a6e:	d119      	bne.n	23aa4 <z_set_prio+0x50>
	return node->next != NULL;
   23a70:	6985      	ldr	r5, [r0, #24]
   23a72:	b9bd      	cbnz	r5, 23aa4 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23a74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   23a78:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   23a7a:	f008 fb3f 	bl	2c0fc <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   23a7e:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   23a80:	4a16      	ldr	r2, [pc, #88]	; (23adc <z_set_prio+0x88>)
				thread->base.prio = prio;
   23a82:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   23a84:	f063 037f 	orn	r3, r3, #127	; 0x7f
   23a88:	7343      	strb	r3, [r0, #13]
   23a8a:	4613      	mov	r3, r2
   23a8c:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23a90:	4298      	cmp	r0, r3
   23a92:	bf18      	it	ne
   23a94:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   23a96:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23a98:	b95d      	cbnz	r5, 23ab2 <z_set_prio+0x5e>
	node->prev = tail;
   23a9a:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   23a9e:	6004      	str	r4, [r0, #0]
	list->tail = node;
   23aa0:	6214      	str	r4, [r2, #32]
}
   23aa2:	e011      	b.n	23ac8 <z_set_prio+0x74>
			thread->base.prio = prio;
   23aa4:	73a1      	strb	r1, [r4, #14]
   23aa6:	2000      	movs	r0, #0
	__asm__ volatile(
   23aa8:	f386 8811 	msr	BASEPRI, r6
   23aac:	f3bf 8f6f 	isb	sy
}
   23ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   23ab2:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   23ab6:	42b9      	cmp	r1, r7
   23ab8:	d00b      	beq.n	23ad2 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   23aba:	428f      	cmp	r7, r1
   23abc:	dd09      	ble.n	23ad2 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   23abe:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   23ac0:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   23ac4:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   23ac6:	606c      	str	r4, [r5, #4]
			update_cache(1);
   23ac8:	2001      	movs	r0, #1
   23aca:	f7ff feb9 	bl	23840 <update_cache>
   23ace:	2001      	movs	r0, #1
   23ad0:	e7ea      	b.n	23aa8 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   23ad2:	42a8      	cmp	r0, r5
   23ad4:	d0e1      	beq.n	23a9a <z_set_prio+0x46>
   23ad6:	682d      	ldr	r5, [r5, #0]
   23ad8:	e7de      	b.n	23a98 <z_set_prio+0x44>
   23ada:	bf00      	nop
   23adc:	20003a14 	.word	0x20003a14

00023ae0 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   23ae0:	b949      	cbnz	r1, 23af6 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   23ae2:	f3ef 8005 	mrs	r0, IPSR
   23ae6:	b930      	cbnz	r0, 23af6 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   23ae8:	4b05      	ldr	r3, [pc, #20]	; (23b00 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   23aea:	699a      	ldr	r2, [r3, #24]
   23aec:	689b      	ldr	r3, [r3, #8]
   23aee:	429a      	cmp	r2, r3
   23af0:	d001      	beq.n	23af6 <z_reschedule+0x16>
   23af2:	f7f1 b9d5 	b.w	14ea0 <arch_swap>
   23af6:	f381 8811 	msr	BASEPRI, r1
   23afa:	f3bf 8f6f 	isb	sy
}
   23afe:	4770      	bx	lr
   23b00:	20003a14 	.word	0x20003a14

00023b04 <z_sched_start>:
{
   23b04:	b510      	push	{r4, lr}
	__asm__ volatile(
   23b06:	f04f 0240 	mov.w	r2, #64	; 0x40
   23b0a:	f3ef 8411 	mrs	r4, BASEPRI
   23b0e:	f382 8812 	msr	BASEPRI_MAX, r2
   23b12:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   23b16:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   23b18:	0751      	lsls	r1, r2, #29
   23b1a:	d404      	bmi.n	23b26 <z_sched_start+0x22>
	__asm__ volatile(
   23b1c:	f384 8811 	msr	BASEPRI, r4
   23b20:	f3bf 8f6f 	isb	sy
}
   23b24:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   23b26:	f022 0204 	bic.w	r2, r2, #4
   23b2a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   23b2c:	f7ff fee0 	bl	238f0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   23b30:	4621      	mov	r1, r4
   23b32:	4802      	ldr	r0, [pc, #8]	; (23b3c <z_sched_start+0x38>)
}
   23b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   23b38:	f7ff bfd2 	b.w	23ae0 <z_reschedule>
   23b3c:	20004b69 	.word	0x20004b69

00023b40 <z_impl_k_thread_suspend>:
{
   23b40:	b570      	push	{r4, r5, r6, lr}
   23b42:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   23b44:	3018      	adds	r0, #24
   23b46:	f008 fbf8 	bl	2c33a <z_abort_timeout>
	__asm__ volatile(
   23b4a:	f04f 0340 	mov.w	r3, #64	; 0x40
   23b4e:	f3ef 8611 	mrs	r6, BASEPRI
   23b52:	f383 8812 	msr	BASEPRI_MAX, r3
   23b56:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   23b5a:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   23b5e:	7b63      	ldrb	r3, [r4, #13]
   23b60:	2a00      	cmp	r2, #0
   23b62:	da05      	bge.n	23b70 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23b64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   23b68:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   23b6a:	4620      	mov	r0, r4
   23b6c:	f008 fac6 	bl	2c0fc <sys_dlist_remove>
		update_cache(thread == _current);
   23b70:	4d0b      	ldr	r5, [pc, #44]	; (23ba0 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   23b72:	7b63      	ldrb	r3, [r4, #13]
   23b74:	68a8      	ldr	r0, [r5, #8]
   23b76:	f043 0310 	orr.w	r3, r3, #16
   23b7a:	7363      	strb	r3, [r4, #13]
   23b7c:	1b03      	subs	r3, r0, r4
   23b7e:	4258      	negs	r0, r3
   23b80:	4158      	adcs	r0, r3
   23b82:	f7ff fe5d 	bl	23840 <update_cache>
	__asm__ volatile(
   23b86:	f386 8811 	msr	BASEPRI, r6
   23b8a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   23b8e:	68ab      	ldr	r3, [r5, #8]
   23b90:	42a3      	cmp	r3, r4
   23b92:	d103      	bne.n	23b9c <z_impl_k_thread_suspend+0x5c>
}
   23b94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   23b98:	f008 bb92 	b.w	2c2c0 <z_reschedule_unlocked>
}
   23b9c:	bd70      	pop	{r4, r5, r6, pc}
   23b9e:	bf00      	nop
   23ba0:	20003a14 	.word	0x20003a14

00023ba4 <k_sched_lock>:
	__asm__ volatile(
   23ba4:	f04f 0340 	mov.w	r3, #64	; 0x40
   23ba8:	f3ef 8111 	mrs	r1, BASEPRI
   23bac:	f383 8812 	msr	BASEPRI_MAX, r3
   23bb0:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   23bb4:	4b04      	ldr	r3, [pc, #16]	; (23bc8 <k_sched_lock+0x24>)
   23bb6:	689a      	ldr	r2, [r3, #8]
   23bb8:	7bd3      	ldrb	r3, [r2, #15]
   23bba:	3b01      	subs	r3, #1
   23bbc:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   23bbe:	f381 8811 	msr	BASEPRI, r1
   23bc2:	f3bf 8f6f 	isb	sy
}
   23bc6:	4770      	bx	lr
   23bc8:	20003a14 	.word	0x20003a14

00023bcc <k_sched_unlock>:
{
   23bcc:	b510      	push	{r4, lr}
	__asm__ volatile(
   23bce:	f04f 0340 	mov.w	r3, #64	; 0x40
   23bd2:	f3ef 8411 	mrs	r4, BASEPRI
   23bd6:	f383 8812 	msr	BASEPRI_MAX, r3
   23bda:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   23bde:	4b08      	ldr	r3, [pc, #32]	; (23c00 <k_sched_unlock+0x34>)
   23be0:	689a      	ldr	r2, [r3, #8]
   23be2:	7bd3      	ldrb	r3, [r2, #15]
   23be4:	3301      	adds	r3, #1
   23be6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   23be8:	2000      	movs	r0, #0
   23bea:	f7ff fe29 	bl	23840 <update_cache>
	__asm__ volatile(
   23bee:	f384 8811 	msr	BASEPRI, r4
   23bf2:	f3bf 8f6f 	isb	sy
}
   23bf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   23bfa:	f008 bb61 	b.w	2c2c0 <z_reschedule_unlocked>
   23bfe:	bf00      	nop
   23c00:	20003a14 	.word	0x20003a14

00023c04 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   23c04:	4b02      	ldr	r3, [pc, #8]	; (23c10 <z_sched_init+0xc>)
   23c06:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
   23c0a:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
   23c0e:	4770      	bx	lr
   23c10:	20003a14 	.word	0x20003a14

00023c14 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   23c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   23c16:	f04f 0340 	mov.w	r3, #64	; 0x40
   23c1a:	f3ef 8511 	mrs	r5, BASEPRI
   23c1e:	f383 8812 	msr	BASEPRI_MAX, r3
   23c22:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   23c26:	4919      	ldr	r1, [pc, #100]	; (23c8c <z_impl_k_yield+0x78>)
   23c28:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23c2a:	7b43      	ldrb	r3, [r0, #13]
   23c2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   23c30:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   23c32:	f008 fa63 	bl	2c0fc <sys_dlist_remove>
	}
	queue_thread(_current);
   23c36:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   23c38:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   23c3a:	4608      	mov	r0, r1
   23c3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   23c40:	735a      	strb	r2, [r3, #13]
   23c42:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
   23c46:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23c48:	4282      	cmp	r2, r0
   23c4a:	bf08      	it	eq
   23c4c:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23c4e:	b922      	cbnz	r2, 23c5a <z_impl_k_yield+0x46>
	node->prev = tail;
   23c50:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
   23c54:	6023      	str	r3, [r4, #0]
	list->tail = node;
   23c56:	620b      	str	r3, [r1, #32]
}
   23c58:	e00c      	b.n	23c74 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
   23c5a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   23c5e:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   23c62:	42be      	cmp	r6, r7
   23c64:	d00e      	beq.n	23c84 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
   23c66:	42b7      	cmp	r7, r6
   23c68:	dd0c      	ble.n	23c84 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
   23c6a:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   23c6c:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   23c70:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   23c72:	6053      	str	r3, [r2, #4]
	update_cache(1);
   23c74:	2001      	movs	r0, #1
   23c76:	f7ff fde3 	bl	23840 <update_cache>
   23c7a:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   23c7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   23c80:	f7f1 b90e 	b.w	14ea0 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   23c84:	42a2      	cmp	r2, r4
   23c86:	d0e3      	beq.n	23c50 <z_impl_k_yield+0x3c>
   23c88:	6812      	ldr	r2, [r2, #0]
   23c8a:	e7e0      	b.n	23c4e <z_impl_k_yield+0x3a>
   23c8c:	20003a14 	.word	0x20003a14

00023c90 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   23c90:	ea50 0301 	orrs.w	r3, r0, r1
{
   23c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23c98:	4605      	mov	r5, r0
   23c9a:	460e      	mov	r6, r1
	if (ticks == 0) {
   23c9c:	d103      	bne.n	23ca6 <z_tick_sleep+0x16>
	z_impl_k_yield();
   23c9e:	f7ff ffb9 	bl	23c14 <z_impl_k_yield>
		k_yield();
		return 0;
   23ca2:	2000      	movs	r0, #0
   23ca4:	e02c      	b.n	23d00 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   23ca6:	1c83      	adds	r3, r0, #2
   23ca8:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   23cac:	db2a      	blt.n	23d04 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   23cae:	f008 fb7a 	bl	2c3a6 <sys_clock_tick_get_32>
   23cb2:	182c      	adds	r4, r5, r0
   23cb4:	f04f 0340 	mov.w	r3, #64	; 0x40
   23cb8:	f3ef 8811 	mrs	r8, BASEPRI
   23cbc:	f383 8812 	msr	BASEPRI_MAX, r3
   23cc0:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   23cc4:	4f11      	ldr	r7, [pc, #68]	; (23d0c <z_tick_sleep+0x7c>)
   23cc6:	4b12      	ldr	r3, [pc, #72]	; (23d10 <z_tick_sleep+0x80>)
   23cc8:	68b8      	ldr	r0, [r7, #8]
   23cca:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   23ccc:	f7ff fe44 	bl	23958 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   23cd0:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   23cd2:	4910      	ldr	r1, [pc, #64]	; (23d14 <z_tick_sleep+0x84>)
   23cd4:	462a      	mov	r2, r5
   23cd6:	4633      	mov	r3, r6
   23cd8:	3018      	adds	r0, #24
   23cda:	f000 f933 	bl	23f44 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   23cde:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   23ce0:	7b53      	ldrb	r3, [r2, #13]
   23ce2:	f043 0310 	orr.w	r3, r3, #16
   23ce6:	7353      	strb	r3, [r2, #13]
   23ce8:	4640      	mov	r0, r8
   23cea:	f7f1 f8d9 	bl	14ea0 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   23cee:	f008 fb5a 	bl	2c3a6 <sys_clock_tick_get_32>
   23cf2:	1a20      	subs	r0, r4, r0
   23cf4:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   23cf8:	2801      	cmp	r0, #1
   23cfa:	f173 0300 	sbcs.w	r3, r3, #0
   23cfe:	dbd0      	blt.n	23ca2 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   23d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   23d04:	f06f 0401 	mvn.w	r4, #1
   23d08:	1a24      	subs	r4, r4, r0
   23d0a:	e7d3      	b.n	23cb4 <z_tick_sleep+0x24>
   23d0c:	20003a14 	.word	0x20003a14
   23d10:	20003a40 	.word	0x20003a40
   23d14:	0002c20b 	.word	0x0002c20b

00023d18 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   23d18:	f1b1 3fff 	cmp.w	r1, #4294967295
   23d1c:	bf08      	it	eq
   23d1e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   23d22:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   23d24:	d106      	bne.n	23d34 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   23d26:	4b08      	ldr	r3, [pc, #32]	; (23d48 <z_impl_k_sleep+0x30>)
   23d28:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   23d2a:	f7ff ff09 	bl	23b40 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   23d2e:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   23d32:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   23d34:	f7ff ffac 	bl	23c90 <z_tick_sleep>
   23d38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   23d3c:	fb80 0303 	smull	r0, r3, r0, r3
   23d40:	0bc0      	lsrs	r0, r0, #15
   23d42:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   23d46:	e7f4      	b.n	23d32 <z_impl_k_sleep+0x1a>
   23d48:	20003a14 	.word	0x20003a14

00023d4c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   23d4c:	4b01      	ldr	r3, [pc, #4]	; (23d54 <z_impl_z_current_get+0x8>)
   23d4e:	6898      	ldr	r0, [r3, #8]
   23d50:	4770      	bx	lr
   23d52:	bf00      	nop
   23d54:	20003a14 	.word	0x20003a14

00023d58 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   23d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23d5c:	4604      	mov	r4, r0
   23d5e:	f04f 0340 	mov.w	r3, #64	; 0x40
   23d62:	f3ef 8611 	mrs	r6, BASEPRI
   23d66:	f383 8812 	msr	BASEPRI_MAX, r3
   23d6a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   23d6e:	7b03      	ldrb	r3, [r0, #12]
   23d70:	07d9      	lsls	r1, r3, #31
   23d72:	d50b      	bpl.n	23d8c <z_thread_abort+0x34>
	__asm__ volatile(
   23d74:	f386 8811 	msr	BASEPRI, r6
   23d78:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   23d7c:	4040      	eors	r0, r0
   23d7e:	f380 8811 	msr	BASEPRI, r0
   23d82:	f04f 0004 	mov.w	r0, #4
   23d86:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   23d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   23d8c:	7b43      	ldrb	r3, [r0, #13]
   23d8e:	071a      	lsls	r2, r3, #28
   23d90:	d504      	bpl.n	23d9c <z_thread_abort+0x44>
   23d92:	f386 8811 	msr	BASEPRI, r6
   23d96:	f3bf 8f6f 	isb	sy
   23d9a:	e7f5      	b.n	23d88 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   23d9c:	f023 0220 	bic.w	r2, r3, #32
   23da0:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   23da4:	09d2      	lsrs	r2, r2, #7
   23da6:	d120      	bne.n	23dea <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   23da8:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   23daa:	68a3      	ldr	r3, [r4, #8]
   23dac:	b113      	cbz	r3, 23db4 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   23dae:	4620      	mov	r0, r4
   23db0:	f008 f9ac 	bl	2c10c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   23db4:	f104 0018 	add.w	r0, r4, #24
   23db8:	f008 fabf 	bl	2c33a <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   23dbc:	f104 0758 	add.w	r7, r4, #88	; 0x58
   23dc0:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   23dc4:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23dc6:	42bd      	cmp	r5, r7
   23dc8:	d000      	beq.n	23dcc <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   23dca:	b9b5      	cbnz	r5, 23dfa <z_thread_abort+0xa2>
		update_cache(1);
   23dcc:	2001      	movs	r0, #1
   23dce:	f7ff fd37 	bl	23840 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   23dd2:	4b10      	ldr	r3, [pc, #64]	; (23e14 <z_thread_abort+0xbc>)
   23dd4:	689b      	ldr	r3, [r3, #8]
   23dd6:	42a3      	cmp	r3, r4
   23dd8:	d1db      	bne.n	23d92 <z_thread_abort+0x3a>
   23dda:	f3ef 8305 	mrs	r3, IPSR
   23dde:	2b00      	cmp	r3, #0
   23de0:	d1d7      	bne.n	23d92 <z_thread_abort+0x3a>
   23de2:	4630      	mov	r0, r6
   23de4:	f7f1 f85c 	bl	14ea0 <arch_swap>
	return ret;
   23de8:	e7d3      	b.n	23d92 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23dea:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   23dee:	f043 0308 	orr.w	r3, r3, #8
   23df2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   23df4:	f008 f982 	bl	2c0fc <sys_dlist_remove>
}
   23df8:	e7d7      	b.n	23daa <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   23dfa:	4628      	mov	r0, r5
   23dfc:	f008 f986 	bl	2c10c <unpend_thread_no_timeout>
   23e00:	f105 0018 	add.w	r0, r5, #24
   23e04:	f008 fa99 	bl	2c33a <z_abort_timeout>
   23e08:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   23e0c:	4628      	mov	r0, r5
   23e0e:	f7ff fd6f 	bl	238f0 <ready_thread>
   23e12:	e7d7      	b.n	23dc4 <z_thread_abort+0x6c>
   23e14:	20003a14 	.word	0x20003a14

00023e18 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   23e18:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   23e1a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   23e1e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   23e20:	e9cd 6700 	strd	r6, r7, [sp]
   23e24:	f7ff fdf8 	bl	23a18 <z_pend_curr>

	if (data != NULL) {
   23e28:	b11c      	cbz	r4, 23e32 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   23e2a:	4b03      	ldr	r3, [pc, #12]	; (23e38 <z_sched_wait+0x20>)
   23e2c:	689b      	ldr	r3, [r3, #8]
   23e2e:	695b      	ldr	r3, [r3, #20]
   23e30:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   23e32:	b002      	add	sp, #8
   23e34:	bdd0      	pop	{r4, r6, r7, pc}
   23e36:	bf00      	nop
   23e38:	20003a14 	.word	0x20003a14

00023e3c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   23e3c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   23e3e:	4806      	ldr	r0, [pc, #24]	; (23e58 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   23e40:	4a06      	ldr	r2, [pc, #24]	; (23e5c <z_data_copy+0x20>)
   23e42:	4907      	ldr	r1, [pc, #28]	; (23e60 <z_data_copy+0x24>)
   23e44:	1a12      	subs	r2, r2, r0
   23e46:	f007 fec4 	bl	2bbd2 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   23e4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   23e4e:	4a05      	ldr	r2, [pc, #20]	; (23e64 <z_data_copy+0x28>)
   23e50:	4905      	ldr	r1, [pc, #20]	; (23e68 <z_data_copy+0x2c>)
   23e52:	4806      	ldr	r0, [pc, #24]	; (23e6c <z_data_copy+0x30>)
   23e54:	f007 bebd 	b.w	2bbd2 <z_early_memcpy>
   23e58:	20000000 	.word	0x20000000
   23e5c:	20000c58 	.word	0x20000c58
   23e60:	00030668 	.word	0x00030668
   23e64:	00000000 	.word	0x00000000
   23e68:	00030668 	.word	0x00030668
   23e6c:	20000000 	.word	0x20000000

00023e70 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   23e70:	4b03      	ldr	r3, [pc, #12]	; (23e80 <elapsed+0x10>)
   23e72:	681b      	ldr	r3, [r3, #0]
   23e74:	b90b      	cbnz	r3, 23e7a <elapsed+0xa>
   23e76:	f7fc bc91 	b.w	2079c <sys_clock_elapsed>
}
   23e7a:	2000      	movs	r0, #0
   23e7c:	4770      	bx	lr
   23e7e:	bf00      	nop
   23e80:	20003a4c 	.word	0x20003a4c

00023e84 <next_timeout>:

static int32_t next_timeout(void)
{
   23e84:	b510      	push	{r4, lr}
	return list->head == list;
   23e86:	4b0e      	ldr	r3, [pc, #56]	; (23ec0 <next_timeout+0x3c>)
   23e88:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23e8a:	429c      	cmp	r4, r3
   23e8c:	d104      	bne.n	23e98 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   23e8e:	f7ff ffef 	bl	23e70 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   23e92:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
   23e96:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   23e98:	f7ff ffea 	bl	23e70 <elapsed>
	if ((to == NULL) ||
   23e9c:	2c00      	cmp	r4, #0
   23e9e:	d0f8      	beq.n	23e92 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   23ea0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   23ea4:	1a1b      	subs	r3, r3, r0
   23ea6:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   23eaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   23eae:	f172 0100 	sbcs.w	r1, r2, #0
   23eb2:	daee      	bge.n	23e92 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   23eb4:	2a00      	cmp	r2, #0
   23eb6:	bfac      	ite	ge
   23eb8:	4618      	movge	r0, r3
   23eba:	2000      	movlt	r0, #0
	return ret;
   23ebc:	e7eb      	b.n	23e96 <next_timeout+0x12>
   23ebe:	bf00      	nop
   23ec0:	20000828 	.word	0x20000828

00023ec4 <remove_timeout>:
{
   23ec4:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   23ec6:	b170      	cbz	r0, 23ee6 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   23ec8:	4b0b      	ldr	r3, [pc, #44]	; (23ef8 <remove_timeout+0x34>)
   23eca:	685b      	ldr	r3, [r3, #4]
   23ecc:	4298      	cmp	r0, r3
   23ece:	d00a      	beq.n	23ee6 <remove_timeout+0x22>
   23ed0:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   23ed2:	b143      	cbz	r3, 23ee6 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   23ed4:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   23ed8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   23edc:	1912      	adds	r2, r2, r4
   23ede:	eb41 0105 	adc.w	r1, r1, r5
   23ee2:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   23ee6:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
   23eea:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   23eec:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   23eee:	2300      	movs	r3, #0
	node->prev = NULL;
   23ef0:	e9c0 3300 	strd	r3, r3, [r0]
}
   23ef4:	bd30      	pop	{r4, r5, pc}
   23ef6:	bf00      	nop
   23ef8:	20000828 	.word	0x20000828

00023efc <timeout_rem>:
	return ret;
}

/* must be locked */
static k_ticks_t timeout_rem(const struct _timeout *timeout)
{
   23efc:	b570      	push	{r4, r5, r6, lr}
	k_ticks_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   23efe:	6804      	ldr	r4, [r0, #0]
   23f00:	b1d4      	cbz	r4, 23f38 <timeout_rem+0x3c>
	return list->head == list;
   23f02:	4a0f      	ldr	r2, [pc, #60]	; (23f40 <timeout_rem+0x44>)
   23f04:	6813      	ldr	r3, [r2, #0]
	return (node == list->tail) ? NULL : node->next;
   23f06:	6851      	ldr	r1, [r2, #4]
   23f08:	2400      	movs	r4, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23f0a:	4293      	cmp	r3, r2
   23f0c:	bf08      	it	eq
   23f0e:	2300      	moveq	r3, #0
	return (node == list->tail) ? NULL : node->next;
   23f10:	4625      	mov	r5, r4
		return 0;
	}

	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   23f12:	b933      	cbnz	r3, 23f22 <timeout_rem+0x26>
		if (timeout == t) {
			break;
		}
	}

	return ticks - elapsed();
   23f14:	f7ff ffac 	bl	23e70 <elapsed>
   23f18:	4603      	mov	r3, r0
   23f1a:	1a20      	subs	r0, r4, r0
   23f1c:	eb65 71e3 	sbc.w	r1, r5, r3, asr #31
}
   23f20:	bd70      	pop	{r4, r5, r6, pc}
		ticks += t->dticks;
   23f22:	e9d3 2604 	ldrd	r2, r6, [r3, #16]
   23f26:	18a4      	adds	r4, r4, r2
   23f28:	eb45 0506 	adc.w	r5, r5, r6
		if (timeout == t) {
   23f2c:	4283      	cmp	r3, r0
   23f2e:	d0f1      	beq.n	23f14 <timeout_rem+0x18>
   23f30:	4299      	cmp	r1, r3
   23f32:	d0ef      	beq.n	23f14 <timeout_rem+0x18>
   23f34:	681b      	ldr	r3, [r3, #0]
   23f36:	e7ec      	b.n	23f12 <timeout_rem+0x16>
		return 0;
   23f38:	4620      	mov	r0, r4
   23f3a:	4621      	mov	r1, r4
   23f3c:	e7f0      	b.n	23f20 <timeout_rem+0x24>
   23f3e:	bf00      	nop
   23f40:	20000828 	.word	0x20000828

00023f44 <z_add_timeout>:
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   23f44:	f1b3 3fff 	cmp.w	r3, #4294967295
   23f48:	bf08      	it	eq
   23f4a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   23f4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23f50:	4604      	mov	r4, r0
   23f52:	461d      	mov	r5, r3
   23f54:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   23f56:	d05c      	beq.n	24012 <z_add_timeout+0xce>
	to->fn = fn;
   23f58:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   23f5a:	f04f 0340 	mov.w	r3, #64	; 0x40
   23f5e:	f3ef 8711 	mrs	r7, BASEPRI
   23f62:	f383 8812 	msr	BASEPRI_MAX, r3
   23f66:	f3bf 8f6f 	isb	sy
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   23f6a:	3201      	adds	r2, #1
   23f6c:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   23f70:	da24      	bge.n	23fbc <z_add_timeout+0x78>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   23f72:	492d      	ldr	r1, [pc, #180]	; (24028 <z_add_timeout+0xe4>)
   23f74:	e9d1 2000 	ldrd	r2, r0, [r1]
   23f78:	f06f 0301 	mvn.w	r3, #1
   23f7c:	1a9b      	subs	r3, r3, r2
   23f7e:	f04f 32ff 	mov.w	r2, #4294967295
   23f82:	eb62 0000 	sbc.w	r0, r2, r0
   23f86:	1b9e      	subs	r6, r3, r6
   23f88:	eb60 0005 	sbc.w	r0, r0, r5
			to->dticks = MAX(1, ticks);
   23f8c:	2e01      	cmp	r6, #1
   23f8e:	f170 0300 	sbcs.w	r3, r0, #0
   23f92:	da01      	bge.n	23f98 <z_add_timeout+0x54>
   23f94:	2601      	movs	r6, #1
   23f96:	2000      	movs	r0, #0
   23f98:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   23f9c:	4e23      	ldr	r6, [pc, #140]	; (2402c <z_add_timeout+0xe8>)
   23f9e:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   23fa2:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23fa4:	45b4      	cmp	ip, r6
   23fa6:	bf08      	it	eq
   23fa8:	f04f 0c00 	moveq.w	ip, #0
		for (t = first(); t != NULL; t = next(t)) {
   23fac:	f1bc 0f00 	cmp.w	ip, #0
   23fb0:	d10d      	bne.n	23fce <z_add_timeout+0x8a>
	node->prev = tail;
   23fb2:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   23fb6:	602c      	str	r4, [r5, #0]
	list->tail = node;
   23fb8:	6074      	str	r4, [r6, #4]
}
   23fba:	e01c      	b.n	23ff6 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   23fbc:	f7ff ff58 	bl	23e70 <elapsed>
   23fc0:	3601      	adds	r6, #1
   23fc2:	f145 0500 	adc.w	r5, r5, #0
   23fc6:	1836      	adds	r6, r6, r0
   23fc8:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   23fcc:	e7e4      	b.n	23f98 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   23fce:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   23fd2:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   23fd6:	4293      	cmp	r3, r2
   23fd8:	eb71 0e00 	sbcs.w	lr, r1, r0
   23fdc:	da1a      	bge.n	24014 <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
   23fde:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   23fe0:	f8dc 3004 	ldr.w	r3, [ip, #4]
   23fe4:	eb60 0001 	sbc.w	r0, r0, r1
   23fe8:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   23fec:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   23ff0:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   23ff2:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   23ff6:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23ff8:	42b3      	cmp	r3, r6
   23ffa:	d006      	beq.n	2400a <z_add_timeout+0xc6>
		if (to == first()) {
   23ffc:	429c      	cmp	r4, r3
   23ffe:	d104      	bne.n	2400a <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
   24000:	f7ff ff40 	bl	23e84 <next_timeout>
   24004:	2100      	movs	r1, #0
   24006:	f7fc fb97 	bl	20738 <sys_clock_set_timeout>
	__asm__ volatile(
   2400a:	f387 8811 	msr	BASEPRI, r7
   2400e:	f3bf 8f6f 	isb	sy
}
   24012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   24014:	1a9b      	subs	r3, r3, r2
   24016:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   2401a:	45ac      	cmp	ip, r5
   2401c:	e9c4 3104 	strd	r3, r1, [r4, #16]
   24020:	d0c7      	beq.n	23fb2 <z_add_timeout+0x6e>
   24022:	f8dc c000 	ldr.w	ip, [ip]
   24026:	e7c1      	b.n	23fac <z_add_timeout+0x68>
   24028:	20002e08 	.word	0x20002e08
   2402c:	20000828 	.word	0x20000828

00024030 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
   24030:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
   24034:	f04f 0340 	mov.w	r3, #64	; 0x40
   24038:	f3ef 8c11 	mrs	ip, BASEPRI
   2403c:	f383 8812 	msr	BASEPRI_MAX, r3
   24040:	f3bf 8f6f 	isb	sy
	return list->head == list;
   24044:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 240f8 <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   24048:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 240fc <sys_clock_announce+0xcc>
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
   2404c:	4f2c      	ldr	r7, [pc, #176]	; (24100 <sys_clock_announce+0xd0>)
	announce_remaining = ticks;
   2404e:	f8c9 0000 	str.w	r0, [r9]
   24052:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
   24056:	2400      	movs	r4, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24058:	4550      	cmp	r0, sl
   2405a:	bf08      	it	eq
   2405c:	2000      	moveq	r0, #0
   2405e:	2500      	movs	r5, #0
		curr_tick += dt;
   24060:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
   24064:	f8d9 3000 	ldr.w	r3, [r9]
   24068:	46e0      	mov	r8, ip
   2406a:	b380      	cbz	r0, 240ce <sys_clock_announce+0x9e>
   2406c:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
   24070:	ea4f 7ee3 	mov.w	lr, r3, asr #31
   24074:	42b3      	cmp	r3, r6
   24076:	eb7e 0b0c 	sbcs.w	fp, lr, ip
   2407a:	da05      	bge.n	24088 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
   2407c:	1af6      	subs	r6, r6, r3
   2407e:	eb6c 040e 	sbc.w	r4, ip, lr
   24082:	e9c0 6404 	strd	r6, r4, [r0, #16]
   24086:	e022      	b.n	240ce <sys_clock_announce+0x9e>
		curr_tick += dt;
   24088:	18b2      	adds	r2, r6, r2
   2408a:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
   2408e:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
   24092:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
   24096:	f7ff ff15 	bl	23ec4 <remove_timeout>
	__asm__ volatile(
   2409a:	f388 8811 	msr	BASEPRI, r8
   2409e:	f3bf 8f6f 	isb	sy
		t->fn(t);
   240a2:	6883      	ldr	r3, [r0, #8]
   240a4:	4798      	blx	r3
	__asm__ volatile(
   240a6:	f04f 0340 	mov.w	r3, #64	; 0x40
   240aa:	f3ef 8811 	mrs	r8, BASEPRI
   240ae:	f383 8812 	msr	BASEPRI_MAX, r3
   240b2:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   240b6:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
   240ba:	f8da 0000 	ldr.w	r0, [sl]
   240be:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
   240c0:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
   240c2:	46c4      	mov	ip, r8
   240c4:	f8c9 3000 	str.w	r3, [r9]
   240c8:	d1ca      	bne.n	24060 <sys_clock_announce+0x30>
		curr_tick += dt;
   240ca:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
   240ce:	189a      	adds	r2, r3, r2
   240d0:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
	announce_remaining = 0;
   240d4:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   240d6:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
   240da:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
   240de:	f7ff fed1 	bl	23e84 <next_timeout>
   240e2:	4621      	mov	r1, r4
   240e4:	f7fc fb28 	bl	20738 <sys_clock_set_timeout>
	__asm__ volatile(
   240e8:	f388 8811 	msr	BASEPRI, r8
   240ec:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
   240f0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
   240f4:	f7ff bc60 	b.w	239b8 <z_time_slice>
   240f8:	20000828 	.word	0x20000828
   240fc:	20003a4c 	.word	0x20003a4c
   24100:	20002e08 	.word	0x20002e08

00024104 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   24104:	b510      	push	{r4, lr}
	__asm__ volatile(
   24106:	f04f 0340 	mov.w	r3, #64	; 0x40
   2410a:	f3ef 8411 	mrs	r4, BASEPRI
   2410e:	f383 8812 	msr	BASEPRI_MAX, r3
   24112:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   24116:	f7ff feab 	bl	23e70 <elapsed>
   2411a:	4a06      	ldr	r2, [pc, #24]	; (24134 <sys_clock_tick_get+0x30>)
   2411c:	4603      	mov	r3, r0
   2411e:	e9d2 0100 	ldrd	r0, r1, [r2]
   24122:	1818      	adds	r0, r3, r0
   24124:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   24128:	f384 8811 	msr	BASEPRI, r4
   2412c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   24130:	bd10      	pop	{r4, pc}
   24132:	bf00      	nop
   24134:	20002e08 	.word	0x20002e08

00024138 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   24138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2413a:	4604      	mov	r4, r0
	__asm__ volatile(
   2413c:	f04f 0340 	mov.w	r3, #64	; 0x40
   24140:	f3ef 8711 	mrs	r7, BASEPRI
   24144:	f383 8812 	msr	BASEPRI_MAX, r3
   24148:	f3bf 8f6f 	isb	sy
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
   2414c:	6802      	ldr	r2, [r0, #0]
   2414e:	b122      	cbz	r2, 2415a <z_timer_expiration_handler+0x22>
	__asm__ volatile(
   24150:	f387 8811 	msr	BASEPRI, r7
   24154:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   24158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   2415a:	e9d0 360a 	ldrd	r3, r6, [r0, #40]	; 0x28
   2415e:	1c58      	adds	r0, r3, #1
   24160:	f146 0100 	adc.w	r1, r6, #0
   24164:	2802      	cmp	r0, #2
   24166:	f171 0100 	sbcs.w	r1, r1, #0
   2416a:	d327      	bcc.n	241bc <z_timer_expiration_handler+0x84>
		next.ticks = MAX(next.ticks - 1, 0);
   2416c:	2b01      	cmp	r3, #1
   2416e:	f176 0100 	sbcs.w	r1, r6, #0
   24172:	bfbc      	itt	lt
   24174:	2301      	movlt	r3, #1
   24176:	4616      	movlt	r6, r2
   24178:	1e5d      	subs	r5, r3, #1
   2417a:	f146 36ff 	adc.w	r6, r6, #4294967295
	return z_impl_k_uptime_ticks();
   2417e:	f008 f916 	bl	2c3ae <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   24182:	3001      	adds	r0, #1
   24184:	f141 0100 	adc.w	r1, r1, #0
   24188:	1940      	adds	r0, r0, r5
   2418a:	eb46 0101 	adc.w	r1, r6, r1
   2418e:	2801      	cmp	r0, #1
   24190:	f171 0100 	sbcs.w	r1, r1, #0
   24194:	db3a      	blt.n	2420c <z_timer_expiration_handler+0xd4>
   24196:	f008 f90a 	bl	2c3ae <z_impl_k_uptime_ticks>
   2419a:	3001      	adds	r0, #1
   2419c:	f141 0100 	adc.w	r1, r1, #0
   241a0:	f06f 0201 	mvn.w	r2, #1
   241a4:	1940      	adds	r0, r0, r5
   241a6:	eb46 0301 	adc.w	r3, r6, r1
   241aa:	1a12      	subs	r2, r2, r0
   241ac:	f04f 31ff 	mov.w	r1, #4294967295
   241b0:	eb61 0303 	sbc.w	r3, r1, r3
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   241b4:	4918      	ldr	r1, [pc, #96]	; (24218 <z_timer_expiration_handler+0xe0>)
   241b6:	4620      	mov	r0, r4
   241b8:	f7ff fec4 	bl	23f44 <z_add_timeout>
	timer->status += 1U;
   241bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   241be:	3301      	adds	r3, #1
   241c0:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
   241c2:	6a23      	ldr	r3, [r4, #32]
   241c4:	b173      	cbz	r3, 241e4 <z_timer_expiration_handler+0xac>
   241c6:	f387 8811 	msr	BASEPRI, r7
   241ca:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
   241ce:	6a23      	ldr	r3, [r4, #32]
   241d0:	4620      	mov	r0, r4
   241d2:	4798      	blx	r3
	__asm__ volatile(
   241d4:	f04f 0340 	mov.w	r3, #64	; 0x40
   241d8:	f3ef 8711 	mrs	r7, BASEPRI
   241dc:	f383 8812 	msr	BASEPRI_MAX, r3
   241e0:	f3bf 8f6f 	isb	sy
	return list->head == list;
   241e4:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   241e8:	42a5      	cmp	r5, r4
   241ea:	d0b1      	beq.n	24150 <z_timer_expiration_handler+0x18>
	if (thread == NULL) {
   241ec:	2d00      	cmp	r5, #0
   241ee:	d0af      	beq.n	24150 <z_timer_expiration_handler+0x18>
	z_unpend_thread_no_timeout(thread);
   241f0:	4628      	mov	r0, r5
   241f2:	f007 ffd6 	bl	2c1a2 <z_unpend_thread_no_timeout>
   241f6:	2300      	movs	r3, #0
   241f8:	67eb      	str	r3, [r5, #124]	; 0x7c
	__asm__ volatile(
   241fa:	f387 8811 	msr	BASEPRI, r7
   241fe:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   24202:	4628      	mov	r0, r5
}
   24204:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   24208:	f007 bfbb 	b.w	2c182 <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   2420c:	f06f 0201 	mvn.w	r2, #1
   24210:	f04f 33ff 	mov.w	r3, #4294967295
   24214:	e7ce      	b.n	241b4 <z_timer_expiration_handler+0x7c>
   24216:	bf00      	nop
   24218:	00024139 	.word	0x00024139

0002421c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   2421c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   24220:	f1b3 3fff 	cmp.w	r3, #4294967295
   24224:	bf08      	it	eq
   24226:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   2422a:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   2422e:	4605      	mov	r5, r0
   24230:	461c      	mov	r4, r3
   24232:	4691      	mov	r9, r2
   24234:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   24236:	d01c      	beq.n	24272 <z_impl_k_timer_start+0x56>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
   24238:	1c53      	adds	r3, r2, #1
   2423a:	f174 33ff 	sbcs.w	r3, r4, #4294967295
   2423e:	db09      	blt.n	24254 <z_impl_k_timer_start+0x38>
		duration.ticks = MAX(duration.ticks - 1, 0);
   24240:	2a01      	cmp	r2, #1
   24242:	f174 0300 	sbcs.w	r3, r4, #0
   24246:	bfbc      	itt	lt
   24248:	2201      	movlt	r2, #1
   2424a:	2400      	movlt	r4, #0
   2424c:	f112 39ff 	adds.w	r9, r2, #4294967295
   24250:	f144 38ff 	adc.w	r8, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   24254:	4628      	mov	r0, r5
   24256:	f008 f870 	bl	2c33a <z_abort_timeout>
	timer->period = period;
   2425a:	e9c5 670a 	strd	r6, r7, [r5, #40]	; 0x28
	timer->status = 0U;
   2425e:	2300      	movs	r3, #0
   24260:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   24262:	464a      	mov	r2, r9
   24264:	4643      	mov	r3, r8
   24266:	4628      	mov	r0, r5
   24268:	4903      	ldr	r1, [pc, #12]	; (24278 <z_impl_k_timer_start+0x5c>)
		     duration);
}
   2426a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2426e:	f7ff be69 	b.w	23f44 <z_add_timeout>
}
   24272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24276:	bf00      	nop
   24278:	00024139 	.word	0x00024139

0002427c <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   2427c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   24280:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   24282:	4b29      	ldr	r3, [pc, #164]	; (24328 <z_impl_k_poll+0xac>)
   24284:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   24286:	2301      	movs	r3, #1
   24288:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   2428c:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   24290:	ea52 0305 	orrs.w	r3, r2, r5
{
   24294:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   24296:	bf0c      	ite	eq
   24298:	2301      	moveq	r3, #1
   2429a:	2300      	movne	r3, #0
   2429c:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   242a0:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   242a2:	f008 f906 	bl	2c4b2 <register_events>
   242a6:	4681      	mov	r9, r0
	__asm__ volatile(
   242a8:	f04f 0340 	mov.w	r3, #64	; 0x40
   242ac:	f3ef 8a11 	mrs	sl, BASEPRI
   242b0:	f383 8812 	msr	BASEPRI_MAX, r3
   242b4:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   242b8:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   242bc:	b964      	cbnz	r4, 242d8 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   242be:	4601      	mov	r1, r0
   242c0:	4652      	mov	r2, sl
   242c2:	4640      	mov	r0, r8
   242c4:	f008 f9c6 	bl	2c654 <clear_event_registrations>
	__asm__ volatile(
   242c8:	f38a 8811 	msr	BASEPRI, sl
   242cc:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   242d0:	4620      	mov	r0, r4
   242d2:	b002      	add	sp, #8
   242d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   242d8:	2300      	movs	r3, #0
   242da:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   242de:	ea56 0305 	orrs.w	r3, r6, r5
   242e2:	d106      	bne.n	242f2 <z_impl_k_poll+0x76>
   242e4:	f38a 8811 	msr	BASEPRI, sl
   242e8:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   242ec:	f06f 040a 	mvn.w	r4, #10
   242f0:	e7ee      	b.n	242d0 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   242f2:	e9cd 6500 	strd	r6, r5, [sp]
   242f6:	4a0d      	ldr	r2, [pc, #52]	; (2432c <z_impl_k_poll+0xb0>)
   242f8:	480d      	ldr	r0, [pc, #52]	; (24330 <z_impl_k_poll+0xb4>)
   242fa:	4651      	mov	r1, sl
   242fc:	f7ff fb8c 	bl	23a18 <z_pend_curr>
   24300:	4604      	mov	r4, r0
	__asm__ volatile(
   24302:	f04f 0340 	mov.w	r3, #64	; 0x40
   24306:	f3ef 8511 	mrs	r5, BASEPRI
   2430a:	f383 8812 	msr	BASEPRI_MAX, r3
   2430e:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   24312:	462a      	mov	r2, r5
   24314:	4649      	mov	r1, r9
   24316:	4640      	mov	r0, r8
   24318:	f008 f99c 	bl	2c654 <clear_event_registrations>
	__asm__ volatile(
   2431c:	f385 8811 	msr	BASEPRI, r5
   24320:	f3bf 8f6f 	isb	sy
	return swap_rc;
   24324:	e7d4      	b.n	242d0 <z_impl_k_poll+0x54>
   24326:	bf00      	nop
   24328:	20003a14 	.word	0x20003a14
   2432c:	20000830 	.word	0x20000830
   24330:	20004b69 	.word	0x20004b69

00024334 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   24334:	b538      	push	{r3, r4, r5, lr}
   24336:	4603      	mov	r3, r0
	__asm__ volatile(
   24338:	f04f 0240 	mov.w	r2, #64	; 0x40
   2433c:	f3ef 8511 	mrs	r5, BASEPRI
   24340:	f382 8812 	msr	BASEPRI_MAX, r2
   24344:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   24348:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   2434a:	2101      	movs	r1, #1
   2434c:	6081      	str	r1, [r0, #8]
	return list->head == list;
   2434e:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   24350:	4283      	cmp	r3, r0
   24352:	d106      	bne.n	24362 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   24354:	f385 8811 	msr	BASEPRI, r5
   24358:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   2435c:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   2435e:	4620      	mov	r0, r4
   24360:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   24362:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   24366:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   24368:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2436a:	2300      	movs	r3, #0
	node->prev = NULL;
   2436c:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   24370:	f008 f916 	bl	2c5a0 <signal_poll_event>
	z_reschedule(&lock, key);
   24374:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   24376:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   24378:	4801      	ldr	r0, [pc, #4]	; (24380 <z_impl_k_poll_signal_raise+0x4c>)
   2437a:	f7ff fbb1 	bl	23ae0 <z_reschedule>
	return rc;
   2437e:	e7ee      	b.n	2435e <z_impl_k_poll_signal_raise+0x2a>
   24380:	20004b69 	.word	0x20004b69

00024384 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   24384:	b573      	push	{r0, r1, r4, r5, r6, lr}
   24386:	4606      	mov	r6, r0
   24388:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   2438a:	f007 fce3 	bl	2bd54 <k_is_in_isr>
   2438e:	b978      	cbnz	r0, 243b0 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   24390:	4b0b      	ldr	r3, [pc, #44]	; (243c0 <z_thread_aligned_alloc+0x3c>)
   24392:	689b      	ldr	r3, [r3, #8]
   24394:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   24396:	b17c      	cbz	r4, 243b8 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   24398:	1d2a      	adds	r2, r5, #4
   2439a:	d209      	bcs.n	243b0 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   2439c:	2000      	movs	r0, #0
   2439e:	2100      	movs	r1, #0
   243a0:	e9cd 0100 	strd	r0, r1, [sp]
   243a4:	f046 0104 	orr.w	r1, r6, #4
   243a8:	4620      	mov	r0, r4
   243aa:	f007 fc1c 	bl	2bbe6 <k_heap_aligned_alloc>
	if (mem == NULL) {
   243ae:	b908      	cbnz	r0, 243b4 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   243b0:	2400      	movs	r4, #0
	}

	return ret;
   243b2:	e001      	b.n	243b8 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   243b4:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   243b6:	1d04      	adds	r4, r0, #4
}
   243b8:	4620      	mov	r0, r4
   243ba:	b002      	add	sp, #8
   243bc:	bd70      	pop	{r4, r5, r6, pc}
   243be:	bf00      	nop
   243c0:	20003a14 	.word	0x20003a14

000243c4 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   243c4:	4801      	ldr	r0, [pc, #4]	; (243cc <boot_banner+0x8>)
   243c6:	f003 b8e8 	b.w	2759a <printk>
   243ca:	bf00      	nop
   243cc:	00030637 	.word	0x00030637

000243d0 <ocrypto_ecdh_p256_public_key>:
   243d0:	b530      	push	{r4, r5, lr}
   243d2:	b099      	sub	sp, #100	; 0x64
   243d4:	4605      	mov	r5, r0
   243d6:	4668      	mov	r0, sp
   243d8:	f000 f828 	bl	2442c <ocrypto_sc_p256_from32bytes>
   243dc:	4669      	mov	r1, sp
   243de:	4604      	mov	r4, r0
   243e0:	a808      	add	r0, sp, #32
   243e2:	f000 fa53 	bl	2488c <ocrypto_curve_p256_scalarmult_base>
   243e6:	a908      	add	r1, sp, #32
   243e8:	4304      	orrs	r4, r0
   243ea:	4628      	mov	r0, r5
   243ec:	f000 f98a 	bl	24704 <ocrypto_curve_p256_to64bytes>
   243f0:	4620      	mov	r0, r4
   243f2:	b019      	add	sp, #100	; 0x64
   243f4:	bd30      	pop	{r4, r5, pc}
   243f6:	bf00      	nop

000243f8 <ocrypto_ecdh_p256_common_secret>:
   243f8:	b570      	push	{r4, r5, r6, lr}
   243fa:	b098      	sub	sp, #96	; 0x60
   243fc:	4605      	mov	r5, r0
   243fe:	4668      	mov	r0, sp
   24400:	4616      	mov	r6, r2
   24402:	f000 f813 	bl	2442c <ocrypto_sc_p256_from32bytes>
   24406:	4631      	mov	r1, r6
   24408:	4604      	mov	r4, r0
   2440a:	a808      	add	r0, sp, #32
   2440c:	f000 f946 	bl	2469c <ocrypto_curve_p256_from64bytes>
   24410:	a908      	add	r1, sp, #32
   24412:	466a      	mov	r2, sp
   24414:	4304      	orrs	r4, r0
   24416:	4608      	mov	r0, r1
   24418:	f000 f982 	bl	24720 <ocrypto_curve_p256_scalarmult>
   2441c:	a908      	add	r1, sp, #32
   2441e:	4304      	orrs	r4, r0
   24420:	4628      	mov	r0, r5
   24422:	f000 f96d 	bl	24700 <ocrypto_curve_p256_to32bytes>
   24426:	4620      	mov	r0, r4
   24428:	b018      	add	sp, #96	; 0x60
   2442a:	bd70      	pop	{r4, r5, r6, pc}

0002442c <ocrypto_sc_p256_from32bytes>:
   2442c:	b570      	push	{r4, r5, r6, lr}
   2442e:	680b      	ldr	r3, [r1, #0]
   24430:	4e12      	ldr	r6, [pc, #72]	; (2447c <ocrypto_sc_p256_from32bytes+0x50>)
   24432:	ba1b      	rev	r3, r3
   24434:	61c3      	str	r3, [r0, #28]
   24436:	684b      	ldr	r3, [r1, #4]
   24438:	ba1b      	rev	r3, r3
   2443a:	6183      	str	r3, [r0, #24]
   2443c:	688b      	ldr	r3, [r1, #8]
   2443e:	ba1b      	rev	r3, r3
   24440:	6143      	str	r3, [r0, #20]
   24442:	68cb      	ldr	r3, [r1, #12]
   24444:	ba1b      	rev	r3, r3
   24446:	6103      	str	r3, [r0, #16]
   24448:	690b      	ldr	r3, [r1, #16]
   2444a:	ba1b      	rev	r3, r3
   2444c:	60c3      	str	r3, [r0, #12]
   2444e:	694b      	ldr	r3, [r1, #20]
   24450:	ba1b      	rev	r3, r3
   24452:	6083      	str	r3, [r0, #8]
   24454:	698b      	ldr	r3, [r1, #24]
   24456:	ba1b      	rev	r3, r3
   24458:	6043      	str	r3, [r0, #4]
   2445a:	69cb      	ldr	r3, [r1, #28]
   2445c:	ba1b      	rev	r3, r3
   2445e:	4632      	mov	r2, r6
   24460:	6003      	str	r3, [r0, #0]
   24462:	4601      	mov	r1, r0
   24464:	4604      	mov	r4, r0
   24466:	f7db fe85 	bl	174 <ocrypto_bigint_sub256>
   2446a:	4631      	mov	r1, r6
   2446c:	4605      	mov	r5, r0
   2446e:	4602      	mov	r2, r0
   24470:	4620      	mov	r0, r4
   24472:	f7db fe9f 	bl	1b4 <ocrypto_bigint_cadd256>
   24476:	1e68      	subs	r0, r5, #1
   24478:	bd70      	pop	{r4, r5, r6, pc}
   2447a:	bf00      	nop
   2447c:	0002d52c 	.word	0x0002d52c

00024480 <p256_zdblu>:
   24480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24484:	b088      	sub	sp, #32
   24486:	460c      	mov	r4, r1
   24488:	4606      	mov	r6, r0
   2448a:	f102 0120 	add.w	r1, r2, #32
   2448e:	4668      	mov	r0, sp
   24490:	f106 0720 	add.w	r7, r6, #32
   24494:	4690      	mov	r8, r2
   24496:	f7dc f967 	bl	768 <ocrypto_mod_p256_sqr>
   2449a:	466a      	mov	r2, sp
   2449c:	4669      	mov	r1, sp
   2449e:	4668      	mov	r0, sp
   244a0:	f7dc f884 	bl	5ac <ocrypto_mod_p256_add>
   244a4:	4669      	mov	r1, sp
   244a6:	4638      	mov	r0, r7
   244a8:	f7dc f95e 	bl	768 <ocrypto_mod_p256_sqr>
   244ac:	463a      	mov	r2, r7
   244ae:	4639      	mov	r1, r7
   244b0:	4638      	mov	r0, r7
   244b2:	f104 0520 	add.w	r5, r4, #32
   244b6:	f7dc f879 	bl	5ac <ocrypto_mod_p256_add>
   244ba:	466a      	mov	r2, sp
   244bc:	4669      	mov	r1, sp
   244be:	4668      	mov	r0, sp
   244c0:	f7dc f874 	bl	5ac <ocrypto_mod_p256_add>
   244c4:	4641      	mov	r1, r8
   244c6:	4628      	mov	r0, r5
   244c8:	f7dc f94e 	bl	768 <ocrypto_mod_p256_sqr>
   244cc:	466a      	mov	r2, sp
   244ce:	4641      	mov	r1, r8
   244d0:	4630      	mov	r0, r6
   244d2:	f7dc f931 	bl	738 <ocrypto_mod_p256_mul>
   244d6:	462a      	mov	r2, r5
   244d8:	4629      	mov	r1, r5
   244da:	4668      	mov	r0, sp
   244dc:	f7dc f866 	bl	5ac <ocrypto_mod_p256_add>
   244e0:	462a      	mov	r2, r5
   244e2:	4669      	mov	r1, sp
   244e4:	4668      	mov	r0, sp
   244e6:	f7dc f861 	bl	5ac <ocrypto_mod_p256_add>
   244ea:	4a12      	ldr	r2, [pc, #72]	; (24534 <p256_zdblu+0xb4>)
   244ec:	4669      	mov	r1, sp
   244ee:	4668      	mov	r0, sp
   244f0:	f7dc f85c 	bl	5ac <ocrypto_mod_p256_add>
   244f4:	4669      	mov	r1, sp
   244f6:	4620      	mov	r0, r4
   244f8:	f7dc f936 	bl	768 <ocrypto_mod_p256_sqr>
   244fc:	4632      	mov	r2, r6
   244fe:	4621      	mov	r1, r4
   24500:	4620      	mov	r0, r4
   24502:	f7dc f891 	bl	628 <ocrypto_mod_p256_sub>
   24506:	4632      	mov	r2, r6
   24508:	4621      	mov	r1, r4
   2450a:	4620      	mov	r0, r4
   2450c:	f7dc f88c 	bl	628 <ocrypto_mod_p256_sub>
   24510:	4622      	mov	r2, r4
   24512:	4631      	mov	r1, r6
   24514:	4628      	mov	r0, r5
   24516:	f7dc f887 	bl	628 <ocrypto_mod_p256_sub>
   2451a:	466a      	mov	r2, sp
   2451c:	4629      	mov	r1, r5
   2451e:	4628      	mov	r0, r5
   24520:	f7dc f90a 	bl	738 <ocrypto_mod_p256_mul>
   24524:	463a      	mov	r2, r7
   24526:	4629      	mov	r1, r5
   24528:	4628      	mov	r0, r5
   2452a:	f7dc f87d 	bl	628 <ocrypto_mod_p256_sub>
   2452e:	b008      	add	sp, #32
   24530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24534:	0002d60c 	.word	0x0002d60c

00024538 <p256_zaddc>:
   24538:	b5f0      	push	{r4, r5, r6, r7, lr}
   2453a:	b099      	sub	sp, #100	; 0x64
   2453c:	4604      	mov	r4, r0
   2453e:	460d      	mov	r5, r1
   24540:	460a      	mov	r2, r1
   24542:	4601      	mov	r1, r0
   24544:	4668      	mov	r0, sp
   24546:	f7dc f86f 	bl	628 <ocrypto_mod_p256_sub>
   2454a:	4669      	mov	r1, sp
   2454c:	4668      	mov	r0, sp
   2454e:	f7dc f90b 	bl	768 <ocrypto_mod_p256_sqr>
   24552:	466a      	mov	r2, sp
   24554:	4621      	mov	r1, r4
   24556:	a808      	add	r0, sp, #32
   24558:	f105 0620 	add.w	r6, r5, #32
   2455c:	f104 0720 	add.w	r7, r4, #32
   24560:	f7dc f8ea 	bl	738 <ocrypto_mod_p256_mul>
   24564:	466a      	mov	r2, sp
   24566:	4629      	mov	r1, r5
   24568:	4668      	mov	r0, sp
   2456a:	f7dc f8e5 	bl	738 <ocrypto_mod_p256_mul>
   2456e:	4632      	mov	r2, r6
   24570:	4639      	mov	r1, r7
   24572:	a810      	add	r0, sp, #64	; 0x40
   24574:	f7dc f81a 	bl	5ac <ocrypto_mod_p256_add>
   24578:	4632      	mov	r2, r6
   2457a:	4639      	mov	r1, r7
   2457c:	4630      	mov	r0, r6
   2457e:	f7dc f853 	bl	628 <ocrypto_mod_p256_sub>
   24582:	4631      	mov	r1, r6
   24584:	4628      	mov	r0, r5
   24586:	f7dc f8ef 	bl	768 <ocrypto_mod_p256_sqr>
   2458a:	466a      	mov	r2, sp
   2458c:	a908      	add	r1, sp, #32
   2458e:	4620      	mov	r0, r4
   24590:	f7dc f80c 	bl	5ac <ocrypto_mod_p256_add>
   24594:	4622      	mov	r2, r4
   24596:	4629      	mov	r1, r5
   24598:	4628      	mov	r0, r5
   2459a:	f7dc f845 	bl	628 <ocrypto_mod_p256_sub>
   2459e:	466a      	mov	r2, sp
   245a0:	a908      	add	r1, sp, #32
   245a2:	4668      	mov	r0, sp
   245a4:	f7dc f840 	bl	628 <ocrypto_mod_p256_sub>
   245a8:	466a      	mov	r2, sp
   245aa:	4639      	mov	r1, r7
   245ac:	4638      	mov	r0, r7
   245ae:	f7dc f8c3 	bl	738 <ocrypto_mod_p256_mul>
   245b2:	462a      	mov	r2, r5
   245b4:	a908      	add	r1, sp, #32
   245b6:	4668      	mov	r0, sp
   245b8:	f7dc f836 	bl	628 <ocrypto_mod_p256_sub>
   245bc:	466a      	mov	r2, sp
   245be:	4631      	mov	r1, r6
   245c0:	4630      	mov	r0, r6
   245c2:	f7dc f8b9 	bl	738 <ocrypto_mod_p256_mul>
   245c6:	463a      	mov	r2, r7
   245c8:	4631      	mov	r1, r6
   245ca:	4630      	mov	r0, r6
   245cc:	f7dc f82c 	bl	628 <ocrypto_mod_p256_sub>
   245d0:	a910      	add	r1, sp, #64	; 0x40
   245d2:	4668      	mov	r0, sp
   245d4:	f7dc f8c8 	bl	768 <ocrypto_mod_p256_sqr>
   245d8:	4622      	mov	r2, r4
   245da:	4669      	mov	r1, sp
   245dc:	4620      	mov	r0, r4
   245de:	f7dc f823 	bl	628 <ocrypto_mod_p256_sub>
   245e2:	a908      	add	r1, sp, #32
   245e4:	4622      	mov	r2, r4
   245e6:	4608      	mov	r0, r1
   245e8:	f7dc f81e 	bl	628 <ocrypto_mod_p256_sub>
   245ec:	a910      	add	r1, sp, #64	; 0x40
   245ee:	aa08      	add	r2, sp, #32
   245f0:	4608      	mov	r0, r1
   245f2:	f7dc f8a1 	bl	738 <ocrypto_mod_p256_mul>
   245f6:	463a      	mov	r2, r7
   245f8:	a910      	add	r1, sp, #64	; 0x40
   245fa:	4638      	mov	r0, r7
   245fc:	f7dc f814 	bl	628 <ocrypto_mod_p256_sub>
   24600:	b019      	add	sp, #100	; 0x64
   24602:	bdf0      	pop	{r4, r5, r6, r7, pc}

00024604 <p256_zaddu>:
   24604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24608:	b088      	sub	sp, #32
   2460a:	460c      	mov	r4, r1
   2460c:	4605      	mov	r5, r0
   2460e:	4690      	mov	r8, r2
   24610:	460a      	mov	r2, r1
   24612:	4601      	mov	r1, r0
   24614:	4668      	mov	r0, sp
   24616:	f7dc f807 	bl	628 <ocrypto_mod_p256_sub>
   2461a:	4669      	mov	r1, sp
   2461c:	4668      	mov	r0, sp
   2461e:	f7dc f8a3 	bl	768 <ocrypto_mod_p256_sqr>
   24622:	466a      	mov	r2, sp
   24624:	4629      	mov	r1, r5
   24626:	4628      	mov	r0, r5
   24628:	f104 0620 	add.w	r6, r4, #32
   2462c:	f7dc f884 	bl	738 <ocrypto_mod_p256_mul>
   24630:	f105 0720 	add.w	r7, r5, #32
   24634:	466a      	mov	r2, sp
   24636:	4621      	mov	r1, r4
   24638:	4668      	mov	r0, sp
   2463a:	f7dc f87d 	bl	738 <ocrypto_mod_p256_mul>
   2463e:	4632      	mov	r2, r6
   24640:	4639      	mov	r1, r7
   24642:	4630      	mov	r0, r6
   24644:	f7db fff0 	bl	628 <ocrypto_mod_p256_sub>
   24648:	4631      	mov	r1, r6
   2464a:	4620      	mov	r0, r4
   2464c:	f7dc f88c 	bl	768 <ocrypto_mod_p256_sqr>
   24650:	462a      	mov	r2, r5
   24652:	4621      	mov	r1, r4
   24654:	4620      	mov	r0, r4
   24656:	f7db ffe7 	bl	628 <ocrypto_mod_p256_sub>
   2465a:	466a      	mov	r2, sp
   2465c:	4621      	mov	r1, r4
   2465e:	4620      	mov	r0, r4
   24660:	f7db ffe2 	bl	628 <ocrypto_mod_p256_sub>
   24664:	466a      	mov	r2, sp
   24666:	4629      	mov	r1, r5
   24668:	4640      	mov	r0, r8
   2466a:	f7db ffdd 	bl	628 <ocrypto_mod_p256_sub>
   2466e:	4642      	mov	r2, r8
   24670:	4639      	mov	r1, r7
   24672:	4638      	mov	r0, r7
   24674:	f7dc f860 	bl	738 <ocrypto_mod_p256_mul>
   24678:	4622      	mov	r2, r4
   2467a:	4629      	mov	r1, r5
   2467c:	4668      	mov	r0, sp
   2467e:	f7db ffd3 	bl	628 <ocrypto_mod_p256_sub>
   24682:	466a      	mov	r2, sp
   24684:	4631      	mov	r1, r6
   24686:	4630      	mov	r0, r6
   24688:	f7dc f856 	bl	738 <ocrypto_mod_p256_mul>
   2468c:	463a      	mov	r2, r7
   2468e:	4631      	mov	r1, r6
   24690:	4630      	mov	r0, r6
   24692:	f7db ffc9 	bl	628 <ocrypto_mod_p256_sub>
   24696:	b008      	add	sp, #32
   24698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002469c <ocrypto_curve_p256_from64bytes>:
   2469c:	b570      	push	{r4, r5, r6, lr}
   2469e:	f100 0620 	add.w	r6, r0, #32
   246a2:	b090      	sub	sp, #64	; 0x40
   246a4:	460d      	mov	r5, r1
   246a6:	4604      	mov	r4, r0
   246a8:	f000 f914 	bl	248d4 <ocrypto_mod_p256_from_bytes>
   246ac:	f105 0120 	add.w	r1, r5, #32
   246b0:	4630      	mov	r0, r6
   246b2:	f000 f90f 	bl	248d4 <ocrypto_mod_p256_from_bytes>
   246b6:	4621      	mov	r1, r4
   246b8:	a808      	add	r0, sp, #32
   246ba:	f7dc f855 	bl	768 <ocrypto_mod_p256_sqr>
   246be:	a908      	add	r1, sp, #32
   246c0:	4608      	mov	r0, r1
   246c2:	4a0d      	ldr	r2, [pc, #52]	; (246f8 <ocrypto_curve_p256_from64bytes+0x5c>)
   246c4:	f7db ff72 	bl	5ac <ocrypto_mod_p256_add>
   246c8:	a908      	add	r1, sp, #32
   246ca:	4622      	mov	r2, r4
   246cc:	4608      	mov	r0, r1
   246ce:	f7dc f833 	bl	738 <ocrypto_mod_p256_mul>
   246d2:	a908      	add	r1, sp, #32
   246d4:	4a09      	ldr	r2, [pc, #36]	; (246fc <ocrypto_curve_p256_from64bytes+0x60>)
   246d6:	4608      	mov	r0, r1
   246d8:	f7db ff68 	bl	5ac <ocrypto_mod_p256_add>
   246dc:	4631      	mov	r1, r6
   246de:	4668      	mov	r0, sp
   246e0:	f7dc f842 	bl	768 <ocrypto_mod_p256_sqr>
   246e4:	2220      	movs	r2, #32
   246e6:	4669      	mov	r1, sp
   246e8:	eb0d 0002 	add.w	r0, sp, r2
   246ec:	f7db ff30 	bl	550 <ocrypto_constant_time_equal>
   246f0:	3801      	subs	r0, #1
   246f2:	b010      	add	sp, #64	; 0x40
   246f4:	bd70      	pop	{r4, r5, r6, pc}
   246f6:	bf00      	nop
   246f8:	0002d60c 	.word	0x0002d60c
   246fc:	0002d5ec 	.word	0x0002d5ec

00024700 <ocrypto_curve_p256_to32bytes>:
   24700:	f000 b902 	b.w	24908 <ocrypto_mod_p256_to_bytes>

00024704 <ocrypto_curve_p256_to64bytes>:
   24704:	b538      	push	{r3, r4, r5, lr}
   24706:	4604      	mov	r4, r0
   24708:	460d      	mov	r5, r1
   2470a:	f000 f8fd 	bl	24908 <ocrypto_mod_p256_to_bytes>
   2470e:	f105 0120 	add.w	r1, r5, #32
   24712:	f104 0020 	add.w	r0, r4, #32
   24716:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2471a:	f000 b8f5 	b.w	24908 <ocrypto_mod_p256_to_bytes>
   2471e:	bf00      	nop

00024720 <ocrypto_curve_p256_scalarmult>:
   24720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24724:	4613      	mov	r3, r2
   24726:	b0b8      	sub	sp, #224	; 0xe0
   24728:	4a54      	ldr	r2, [pc, #336]	; (2487c <ocrypto_curve_p256_scalarmult+0x15c>)
   2472a:	4689      	mov	r9, r1
   2472c:	4680      	mov	r8, r0
   2472e:	4619      	mov	r1, r3
   24730:	a810      	add	r0, sp, #64	; 0x40
   24732:	f7db fd1f 	bl	174 <ocrypto_bigint_sub256>
   24736:	4952      	ldr	r1, [pc, #328]	; (24880 <ocrypto_curve_p256_scalarmult+0x160>)
   24738:	4602      	mov	r2, r0
   2473a:	a810      	add	r0, sp, #64	; 0x40
   2473c:	f7db fd3a 	bl	1b4 <ocrypto_bigint_cadd256>
   24740:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   24742:	494e      	ldr	r1, [pc, #312]	; (2487c <ocrypto_curve_p256_scalarmult+0x15c>)
   24744:	ea00 76d6 	and.w	r6, r0, r6, lsr #31
   24748:	4607      	mov	r7, r0
   2474a:	f1c6 0201 	rsb	r2, r6, #1
   2474e:	a810      	add	r0, sp, #64	; 0x40
   24750:	f7db fd30 	bl	1b4 <ocrypto_bigint_cadd256>
   24754:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   24756:	464a      	mov	r2, r9
   24758:	ea6f 0a03 	mvn.w	sl, r3
   2475c:	a928      	add	r1, sp, #160	; 0xa0
   2475e:	a818      	add	r0, sp, #96	; 0x60
   24760:	f7ff fe8e 	bl	24480 <p256_zdblu>
   24764:	ea4f 7ada 	mov.w	sl, sl, lsr #31
   24768:	a920      	add	r1, sp, #128	; 0x80
   2476a:	f1ca 0201 	rsb	r2, sl, #1
   2476e:	4608      	mov	r0, r1
   24770:	f000 f892 	bl	24898 <ocrypto_mod_p256_cneg>
   24774:	f1c7 0701 	rsb	r7, r7, #1
   24778:	24fe      	movs	r4, #254	; 0xfe
   2477a:	466a      	mov	r2, sp
   2477c:	a918      	add	r1, sp, #96	; 0x60
   2477e:	a828      	add	r0, sp, #160	; 0xa0
   24780:	f7ff ff40 	bl	24604 <p256_zaddu>
   24784:	1163      	asrs	r3, r4, #5
   24786:	aa38      	add	r2, sp, #224	; 0xe0
   24788:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   2478c:	f004 021f 	and.w	r2, r4, #31
   24790:	f853 3ca0 	ldr.w	r3, [r3, #-160]
   24794:	40d3      	lsrs	r3, r2
   24796:	4655      	mov	r5, sl
   24798:	f003 0a01 	and.w	sl, r3, #1
   2479c:	ea8a 0505 	eor.w	r5, sl, r5
   247a0:	462a      	mov	r2, r5
   247a2:	a928      	add	r1, sp, #160	; 0xa0
   247a4:	a818      	add	r0, sp, #96	; 0x60
   247a6:	f7db fd61 	bl	26c <ocrypto_bigint_cswap256>
   247aa:	462a      	mov	r2, r5
   247ac:	a930      	add	r1, sp, #192	; 0xc0
   247ae:	a820      	add	r0, sp, #128	; 0x80
   247b0:	f7db fd5c 	bl	26c <ocrypto_bigint_cswap256>
   247b4:	3c01      	subs	r4, #1
   247b6:	a928      	add	r1, sp, #160	; 0xa0
   247b8:	a818      	add	r0, sp, #96	; 0x60
   247ba:	f7ff febd 	bl	24538 <p256_zaddc>
   247be:	1c63      	adds	r3, r4, #1
   247c0:	d1db      	bne.n	2477a <ocrypto_curve_p256_scalarmult+0x5a>
   247c2:	f1ca 0201 	rsb	r2, sl, #1
   247c6:	a920      	add	r1, sp, #128	; 0x80
   247c8:	a808      	add	r0, sp, #32
   247ca:	f000 f865 	bl	24898 <ocrypto_mod_p256_cneg>
   247ce:	ea86 060a 	eor.w	r6, r6, sl
   247d2:	466a      	mov	r2, sp
   247d4:	a918      	add	r1, sp, #96	; 0x60
   247d6:	a828      	add	r0, sp, #160	; 0xa0
   247d8:	f7ff ff14 	bl	24604 <p256_zaddu>
   247dc:	a928      	add	r1, sp, #160	; 0xa0
   247de:	4632      	mov	r2, r6
   247e0:	a818      	add	r0, sp, #96	; 0x60
   247e2:	f7db fd43 	bl	26c <ocrypto_bigint_cswap256>
   247e6:	4632      	mov	r2, r6
   247e8:	a930      	add	r1, sp, #192	; 0xc0
   247ea:	a820      	add	r0, sp, #128	; 0x80
   247ec:	f7db fd3e 	bl	26c <ocrypto_bigint_cswap256>
   247f0:	a908      	add	r1, sp, #32
   247f2:	466a      	mov	r2, sp
   247f4:	4608      	mov	r0, r1
   247f6:	f7db ff9f 	bl	738 <ocrypto_mod_p256_mul>
   247fa:	a908      	add	r1, sp, #32
   247fc:	4608      	mov	r0, r1
   247fe:	f000 f89d 	bl	2493c <ocrypto_mod_p256_inv>
   24802:	a908      	add	r1, sp, #32
   24804:	f108 0420 	add.w	r4, r8, #32
   24808:	f109 0220 	add.w	r2, r9, #32
   2480c:	4608      	mov	r0, r1
   2480e:	f7db ff93 	bl	738 <ocrypto_mod_p256_mul>
   24812:	a920      	add	r1, sp, #128	; 0x80
   24814:	aa08      	add	r2, sp, #32
   24816:	4620      	mov	r0, r4
   24818:	f7db ff8e 	bl	738 <ocrypto_mod_p256_mul>
   2481c:	aa08      	add	r2, sp, #32
   2481e:	a918      	add	r1, sp, #96	; 0x60
   24820:	4668      	mov	r0, sp
   24822:	f7db ff89 	bl	738 <ocrypto_mod_p256_mul>
   24826:	4669      	mov	r1, sp
   24828:	4668      	mov	r0, sp
   2482a:	f7db ff9d 	bl	768 <ocrypto_mod_p256_sqr>
   2482e:	aa18      	add	r2, sp, #96	; 0x60
   24830:	4669      	mov	r1, sp
   24832:	a808      	add	r0, sp, #32
   24834:	f7db ff80 	bl	738 <ocrypto_mod_p256_mul>
   24838:	4621      	mov	r1, r4
   2483a:	4668      	mov	r0, sp
   2483c:	f7db ff94 	bl	768 <ocrypto_mod_p256_sqr>
   24840:	aa08      	add	r2, sp, #32
   24842:	4669      	mov	r1, sp
   24844:	4610      	mov	r0, r2
   24846:	f7db feef 	bl	628 <ocrypto_mod_p256_sub>
   2484a:	4a0e      	ldr	r2, [pc, #56]	; (24884 <ocrypto_curve_p256_scalarmult+0x164>)
   2484c:	a908      	add	r1, sp, #32
   2484e:	4668      	mov	r0, sp
   24850:	f7db feea 	bl	628 <ocrypto_mod_p256_sub>
   24854:	4620      	mov	r0, r4
   24856:	2120      	movs	r1, #32
   24858:	f7db fe8e 	bl	578 <ocrypto_constant_time_is_zero>
   2485c:	a908      	add	r1, sp, #32
   2485e:	4602      	mov	r2, r0
   24860:	4244      	negs	r4, r0
   24862:	4668      	mov	r0, sp
   24864:	f7db fd02 	bl	26c <ocrypto_bigint_cswap256>
   24868:	4640      	mov	r0, r8
   2486a:	4a07      	ldr	r2, [pc, #28]	; (24888 <ocrypto_curve_p256_scalarmult+0x168>)
   2486c:	4669      	mov	r1, sp
   2486e:	f7db ff63 	bl	738 <ocrypto_mod_p256_mul>
   24872:	433c      	orrs	r4, r7
   24874:	4620      	mov	r0, r4
   24876:	b038      	add	sp, #224	; 0xe0
   24878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2487c:	0002d56c 	.word	0x0002d56c
   24880:	0002d58c 	.word	0x0002d58c
   24884:	0002d5ec 	.word	0x0002d5ec
   24888:	0002d54c 	.word	0x0002d54c

0002488c <ocrypto_curve_p256_scalarmult_base>:
   2488c:	460a      	mov	r2, r1
   2488e:	4901      	ldr	r1, [pc, #4]	; (24894 <ocrypto_curve_p256_scalarmult_base+0x8>)
   24890:	f7ff bf46 	b.w	24720 <ocrypto_curve_p256_scalarmult>
   24894:	0002d5ac 	.word	0x0002d5ac

00024898 <ocrypto_mod_p256_cneg>:
   24898:	b570      	push	{r4, r5, r6, lr}
   2489a:	b088      	sub	sp, #32
   2489c:	4604      	mov	r4, r0
   2489e:	460d      	mov	r5, r1
   248a0:	4616      	mov	r6, r2
   248a2:	2100      	movs	r1, #0
   248a4:	2220      	movs	r2, #32
   248a6:	4668      	mov	r0, sp
   248a8:	f004 fb49 	bl	28f3e <memset>
   248ac:	2300      	movs	r3, #0
   248ae:	4629      	mov	r1, r5
   248b0:	2220      	movs	r2, #32
   248b2:	4620      	mov	r0, r4
   248b4:	9300      	str	r3, [sp, #0]
   248b6:	f004 fb37 	bl	28f28 <memcpy>
   248ba:	462a      	mov	r2, r5
   248bc:	4669      	mov	r1, sp
   248be:	4668      	mov	r0, sp
   248c0:	f7db feb2 	bl	628 <ocrypto_mod_p256_sub>
   248c4:	4632      	mov	r2, r6
   248c6:	4669      	mov	r1, sp
   248c8:	4620      	mov	r0, r4
   248ca:	f7db fccf 	bl	26c <ocrypto_bigint_cswap256>
   248ce:	b008      	add	sp, #32
   248d0:	bd70      	pop	{r4, r5, r6, pc}
   248d2:	bf00      	nop

000248d4 <ocrypto_mod_p256_from_bytes>:
   248d4:	680b      	ldr	r3, [r1, #0]
   248d6:	ba1b      	rev	r3, r3
   248d8:	61c3      	str	r3, [r0, #28]
   248da:	684b      	ldr	r3, [r1, #4]
   248dc:	ba1b      	rev	r3, r3
   248de:	6183      	str	r3, [r0, #24]
   248e0:	688b      	ldr	r3, [r1, #8]
   248e2:	ba1b      	rev	r3, r3
   248e4:	6143      	str	r3, [r0, #20]
   248e6:	68cb      	ldr	r3, [r1, #12]
   248e8:	ba1b      	rev	r3, r3
   248ea:	6103      	str	r3, [r0, #16]
   248ec:	690b      	ldr	r3, [r1, #16]
   248ee:	ba1b      	rev	r3, r3
   248f0:	60c3      	str	r3, [r0, #12]
   248f2:	694b      	ldr	r3, [r1, #20]
   248f4:	ba1b      	rev	r3, r3
   248f6:	6083      	str	r3, [r0, #8]
   248f8:	698b      	ldr	r3, [r1, #24]
   248fa:	ba1b      	rev	r3, r3
   248fc:	6043      	str	r3, [r0, #4]
   248fe:	69cb      	ldr	r3, [r1, #28]
   24900:	ba1b      	rev	r3, r3
   24902:	6003      	str	r3, [r0, #0]
   24904:	4770      	bx	lr
   24906:	bf00      	nop

00024908 <ocrypto_mod_p256_to_bytes>:
   24908:	69cb      	ldr	r3, [r1, #28]
   2490a:	ba1b      	rev	r3, r3
   2490c:	6003      	str	r3, [r0, #0]
   2490e:	698b      	ldr	r3, [r1, #24]
   24910:	ba1b      	rev	r3, r3
   24912:	6043      	str	r3, [r0, #4]
   24914:	694b      	ldr	r3, [r1, #20]
   24916:	ba1b      	rev	r3, r3
   24918:	6083      	str	r3, [r0, #8]
   2491a:	690b      	ldr	r3, [r1, #16]
   2491c:	ba1b      	rev	r3, r3
   2491e:	60c3      	str	r3, [r0, #12]
   24920:	68cb      	ldr	r3, [r1, #12]
   24922:	ba1b      	rev	r3, r3
   24924:	6103      	str	r3, [r0, #16]
   24926:	688b      	ldr	r3, [r1, #8]
   24928:	ba1b      	rev	r3, r3
   2492a:	6143      	str	r3, [r0, #20]
   2492c:	684b      	ldr	r3, [r1, #4]
   2492e:	ba1b      	rev	r3, r3
   24930:	6183      	str	r3, [r0, #24]
   24932:	680b      	ldr	r3, [r1, #0]
   24934:	ba1b      	rev	r3, r3
   24936:	61c3      	str	r3, [r0, #28]
   24938:	4770      	bx	lr
   2493a:	bf00      	nop

0002493c <ocrypto_mod_p256_inv>:
   2493c:	b570      	push	{r4, r5, r6, lr}
   2493e:	b098      	sub	sp, #96	; 0x60
   24940:	460d      	mov	r5, r1
   24942:	4606      	mov	r6, r0
   24944:	a810      	add	r0, sp, #64	; 0x40
   24946:	f7db ff0f 	bl	768 <ocrypto_mod_p256_sqr>
   2494a:	462a      	mov	r2, r5
   2494c:	a910      	add	r1, sp, #64	; 0x40
   2494e:	4668      	mov	r0, sp
   24950:	f7db fef2 	bl	738 <ocrypto_mod_p256_mul>
   24954:	4669      	mov	r1, sp
   24956:	a810      	add	r0, sp, #64	; 0x40
   24958:	f7db ff06 	bl	768 <ocrypto_mod_p256_sqr>
   2495c:	a910      	add	r1, sp, #64	; 0x40
   2495e:	4608      	mov	r0, r1
   24960:	f7db ff02 	bl	768 <ocrypto_mod_p256_sqr>
   24964:	466a      	mov	r2, sp
   24966:	a910      	add	r1, sp, #64	; 0x40
   24968:	a808      	add	r0, sp, #32
   2496a:	f7db fee5 	bl	738 <ocrypto_mod_p256_mul>
   2496e:	a908      	add	r1, sp, #32
   24970:	a810      	add	r0, sp, #64	; 0x40
   24972:	f7db fef9 	bl	768 <ocrypto_mod_p256_sqr>
   24976:	a910      	add	r1, sp, #64	; 0x40
   24978:	4608      	mov	r0, r1
   2497a:	f7db fef5 	bl	768 <ocrypto_mod_p256_sqr>
   2497e:	a910      	add	r1, sp, #64	; 0x40
   24980:	4608      	mov	r0, r1
   24982:	f7db fef1 	bl	768 <ocrypto_mod_p256_sqr>
   24986:	a910      	add	r1, sp, #64	; 0x40
   24988:	4608      	mov	r0, r1
   2498a:	f7db feed 	bl	768 <ocrypto_mod_p256_sqr>
   2498e:	a910      	add	r1, sp, #64	; 0x40
   24990:	aa08      	add	r2, sp, #32
   24992:	4608      	mov	r0, r1
   24994:	f7db fed0 	bl	738 <ocrypto_mod_p256_mul>
   24998:	a910      	add	r1, sp, #64	; 0x40
   2499a:	4608      	mov	r0, r1
   2499c:	f7db fee4 	bl	768 <ocrypto_mod_p256_sqr>
   249a0:	a910      	add	r1, sp, #64	; 0x40
   249a2:	4608      	mov	r0, r1
   249a4:	f7db fee0 	bl	768 <ocrypto_mod_p256_sqr>
   249a8:	a910      	add	r1, sp, #64	; 0x40
   249aa:	466a      	mov	r2, sp
   249ac:	a808      	add	r0, sp, #32
   249ae:	f7db fec3 	bl	738 <ocrypto_mod_p256_mul>
   249b2:	2405      	movs	r4, #5
   249b4:	a908      	add	r1, sp, #32
   249b6:	a810      	add	r0, sp, #64	; 0x40
   249b8:	f7db fed6 	bl	768 <ocrypto_mod_p256_sqr>
   249bc:	a910      	add	r1, sp, #64	; 0x40
   249be:	4608      	mov	r0, r1
   249c0:	f7db fed2 	bl	768 <ocrypto_mod_p256_sqr>
   249c4:	3c01      	subs	r4, #1
   249c6:	a910      	add	r1, sp, #64	; 0x40
   249c8:	d1f5      	bne.n	249b6 <ocrypto_mod_p256_inv+0x7a>
   249ca:	aa08      	add	r2, sp, #32
   249cc:	4608      	mov	r0, r1
   249ce:	f7db feb3 	bl	738 <ocrypto_mod_p256_mul>
   249d2:	2405      	movs	r4, #5
   249d4:	a910      	add	r1, sp, #64	; 0x40
   249d6:	4608      	mov	r0, r1
   249d8:	f7db fec6 	bl	768 <ocrypto_mod_p256_sqr>
   249dc:	a910      	add	r1, sp, #64	; 0x40
   249de:	4608      	mov	r0, r1
   249e0:	f7db fec2 	bl	768 <ocrypto_mod_p256_sqr>
   249e4:	3c01      	subs	r4, #1
   249e6:	d1f5      	bne.n	249d4 <ocrypto_mod_p256_inv+0x98>
   249e8:	a910      	add	r1, sp, #64	; 0x40
   249ea:	aa08      	add	r2, sp, #32
   249ec:	4608      	mov	r0, r1
   249ee:	f7db fea3 	bl	738 <ocrypto_mod_p256_mul>
   249f2:	a910      	add	r1, sp, #64	; 0x40
   249f4:	a808      	add	r0, sp, #32
   249f6:	f7db feb7 	bl	768 <ocrypto_mod_p256_sqr>
   249fa:	a908      	add	r1, sp, #32
   249fc:	4608      	mov	r0, r1
   249fe:	f7db feb3 	bl	768 <ocrypto_mod_p256_sqr>
   24a02:	a908      	add	r1, sp, #32
   24a04:	466a      	mov	r2, sp
   24a06:	4668      	mov	r0, sp
   24a08:	f7db fe96 	bl	738 <ocrypto_mod_p256_mul>
   24a0c:	2410      	movs	r4, #16
   24a0e:	4669      	mov	r1, sp
   24a10:	a810      	add	r0, sp, #64	; 0x40
   24a12:	f7db fea9 	bl	768 <ocrypto_mod_p256_sqr>
   24a16:	a910      	add	r1, sp, #64	; 0x40
   24a18:	4608      	mov	r0, r1
   24a1a:	f7db fea5 	bl	768 <ocrypto_mod_p256_sqr>
   24a1e:	3c01      	subs	r4, #1
   24a20:	a910      	add	r1, sp, #64	; 0x40
   24a22:	d1f5      	bne.n	24a10 <ocrypto_mod_p256_inv+0xd4>
   24a24:	462a      	mov	r2, r5
   24a26:	4608      	mov	r0, r1
   24a28:	f7db fe86 	bl	738 <ocrypto_mod_p256_mul>
   24a2c:	2440      	movs	r4, #64	; 0x40
   24a2e:	a910      	add	r1, sp, #64	; 0x40
   24a30:	4608      	mov	r0, r1
   24a32:	f7db fe99 	bl	768 <ocrypto_mod_p256_sqr>
   24a36:	a910      	add	r1, sp, #64	; 0x40
   24a38:	4608      	mov	r0, r1
   24a3a:	f7db fe95 	bl	768 <ocrypto_mod_p256_sqr>
   24a3e:	3c01      	subs	r4, #1
   24a40:	d1f5      	bne.n	24a2e <ocrypto_mod_p256_inv+0xf2>
   24a42:	a910      	add	r1, sp, #64	; 0x40
   24a44:	466a      	mov	r2, sp
   24a46:	4608      	mov	r0, r1
   24a48:	f7db fe76 	bl	738 <ocrypto_mod_p256_mul>
   24a4c:	2410      	movs	r4, #16
   24a4e:	a910      	add	r1, sp, #64	; 0x40
   24a50:	4608      	mov	r0, r1
   24a52:	f7db fe89 	bl	768 <ocrypto_mod_p256_sqr>
   24a56:	a910      	add	r1, sp, #64	; 0x40
   24a58:	4608      	mov	r0, r1
   24a5a:	f7db fe85 	bl	768 <ocrypto_mod_p256_sqr>
   24a5e:	3c01      	subs	r4, #1
   24a60:	d1f5      	bne.n	24a4e <ocrypto_mod_p256_inv+0x112>
   24a62:	a910      	add	r1, sp, #64	; 0x40
   24a64:	466a      	mov	r2, sp
   24a66:	4608      	mov	r0, r1
   24a68:	f7db fe66 	bl	738 <ocrypto_mod_p256_mul>
   24a6c:	2410      	movs	r4, #16
   24a6e:	a910      	add	r1, sp, #64	; 0x40
   24a70:	4608      	mov	r0, r1
   24a72:	f7db fe79 	bl	768 <ocrypto_mod_p256_sqr>
   24a76:	a910      	add	r1, sp, #64	; 0x40
   24a78:	4608      	mov	r0, r1
   24a7a:	f7db fe75 	bl	768 <ocrypto_mod_p256_sqr>
   24a7e:	3c01      	subs	r4, #1
   24a80:	d1f5      	bne.n	24a6e <ocrypto_mod_p256_inv+0x132>
   24a82:	a910      	add	r1, sp, #64	; 0x40
   24a84:	aa08      	add	r2, sp, #32
   24a86:	4608      	mov	r0, r1
   24a88:	f7db fe56 	bl	738 <ocrypto_mod_p256_mul>
   24a8c:	462a      	mov	r2, r5
   24a8e:	a910      	add	r1, sp, #64	; 0x40
   24a90:	4630      	mov	r0, r6
   24a92:	f7db fe51 	bl	738 <ocrypto_mod_p256_mul>
   24a96:	b018      	add	sp, #96	; 0x60
   24a98:	bd70      	pop	{r4, r5, r6, pc}
   24a9a:	bf00      	nop

00024a9c <nrf_cc3xx_platform_init>:
   24a9c:	b510      	push	{r4, lr}
   24a9e:	4c0c      	ldr	r4, [pc, #48]	; (24ad0 <nrf_cc3xx_platform_init+0x34>)
   24aa0:	6823      	ldr	r3, [r4, #0]
   24aa2:	b113      	cbz	r3, 24aaa <nrf_cc3xx_platform_init+0xe>
   24aa4:	4b0b      	ldr	r3, [pc, #44]	; (24ad4 <nrf_cc3xx_platform_init+0x38>)
   24aa6:	681b      	ldr	r3, [r3, #0]
   24aa8:	b92b      	cbnz	r3, 24ab6 <nrf_cc3xx_platform_init+0x1a>
   24aaa:	f000 fe29 	bl	25700 <CC_LibInit>
   24aae:	b930      	cbnz	r0, 24abe <nrf_cc3xx_platform_init+0x22>
   24ab0:	4b08      	ldr	r3, [pc, #32]	; (24ad4 <nrf_cc3xx_platform_init+0x38>)
   24ab2:	2201      	movs	r2, #1
   24ab4:	601a      	str	r2, [r3, #0]
   24ab6:	2301      	movs	r3, #1
   24ab8:	6023      	str	r3, [r4, #0]
   24aba:	2000      	movs	r0, #0
   24abc:	bd10      	pop	{r4, pc}
   24abe:	3801      	subs	r0, #1
   24ac0:	2806      	cmp	r0, #6
   24ac2:	d901      	bls.n	24ac8 <nrf_cc3xx_platform_init+0x2c>
   24ac4:	4804      	ldr	r0, [pc, #16]	; (24ad8 <nrf_cc3xx_platform_init+0x3c>)
   24ac6:	bd10      	pop	{r4, pc}
   24ac8:	4b04      	ldr	r3, [pc, #16]	; (24adc <nrf_cc3xx_platform_init+0x40>)
   24aca:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   24ace:	bd10      	pop	{r4, pc}
   24ad0:	20003a54 	.word	0x20003a54
   24ad4:	20003a50 	.word	0x20003a50
   24ad8:	ffff8ffe 	.word	0xffff8ffe
   24adc:	0002d62c 	.word	0x0002d62c

00024ae0 <nrf_cc3xx_platform_abort>:
   24ae0:	f3bf 8f4f 	dsb	sy
   24ae4:	4905      	ldr	r1, [pc, #20]	; (24afc <nrf_cc3xx_platform_abort+0x1c>)
   24ae6:	4b06      	ldr	r3, [pc, #24]	; (24b00 <nrf_cc3xx_platform_abort+0x20>)
   24ae8:	68ca      	ldr	r2, [r1, #12]
   24aea:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   24aee:	4313      	orrs	r3, r2
   24af0:	60cb      	str	r3, [r1, #12]
   24af2:	f3bf 8f4f 	dsb	sy
   24af6:	bf00      	nop
   24af8:	e7fd      	b.n	24af6 <nrf_cc3xx_platform_abort+0x16>
   24afa:	bf00      	nop
   24afc:	e000ed00 	.word	0xe000ed00
   24b00:	05fa0004 	.word	0x05fa0004

00024b04 <CC_PalAbort>:
   24b04:	b410      	push	{r4}
   24b06:	4b09      	ldr	r3, [pc, #36]	; (24b2c <CC_PalAbort+0x28>)
   24b08:	4909      	ldr	r1, [pc, #36]	; (24b30 <CC_PalAbort+0x2c>)
   24b0a:	4c0a      	ldr	r4, [pc, #40]	; (24b34 <CC_PalAbort+0x30>)
   24b0c:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
   24b10:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   24b14:	6849      	ldr	r1, [r1, #4]
   24b16:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   24b1a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   24b1e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   24b22:	2300      	movs	r3, #0
   24b24:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   24b28:	bc10      	pop	{r4}
   24b2a:	4708      	bx	r1
   24b2c:	5002b000 	.word	0x5002b000
   24b30:	20000838 	.word	0x20000838
   24b34:	5002a000 	.word	0x5002a000

00024b38 <nrf_cc3xx_platform_set_abort>:
   24b38:	e9d0 1200 	ldrd	r1, r2, [r0]
   24b3c:	4b01      	ldr	r3, [pc, #4]	; (24b44 <nrf_cc3xx_platform_set_abort+0xc>)
   24b3e:	e9c3 1200 	strd	r1, r2, [r3]
   24b42:	4770      	bx	lr
   24b44:	20000838 	.word	0x20000838

00024b48 <nrf_cc3xx_platform_ctr_drbg_init>:
   24b48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24b4c:	4b13      	ldr	r3, [pc, #76]	; (24b9c <nrf_cc3xx_platform_ctr_drbg_init+0x54>)
   24b4e:	4e14      	ldr	r6, [pc, #80]	; (24ba0 <nrf_cc3xx_platform_ctr_drbg_init+0x58>)
   24b50:	2800      	cmp	r0, #0
   24b52:	bf14      	ite	ne
   24b54:	4604      	movne	r4, r0
   24b56:	461c      	moveq	r4, r3
   24b58:	b083      	sub	sp, #12
   24b5a:	6823      	ldr	r3, [r4, #0]
   24b5c:	42b3      	cmp	r3, r6
   24b5e:	d019      	beq.n	24b94 <nrf_cc3xx_platform_ctr_drbg_init+0x4c>
   24b60:	460d      	mov	r5, r1
   24b62:	4620      	mov	r0, r4
   24b64:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   24b68:	f104 0904 	add.w	r9, r4, #4
   24b6c:	4617      	mov	r7, r2
   24b6e:	f504 788e 	add.w	r8, r4, #284	; 0x11c
   24b72:	f000 f8e9 	bl	24d48 <mbedtls_platform_zeroize>
   24b76:	4648      	mov	r0, r9
   24b78:	f000 fcac 	bl	254d4 <cc_mbedtls_entropy_init>
   24b7c:	4640      	mov	r0, r8
   24b7e:	f000 fadb 	bl	25138 <cc_mbedtls_ctr_drbg_init>
   24b82:	4908      	ldr	r1, [pc, #32]	; (24ba4 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   24b84:	9700      	str	r7, [sp, #0]
   24b86:	462b      	mov	r3, r5
   24b88:	464a      	mov	r2, r9
   24b8a:	4640      	mov	r0, r8
   24b8c:	f000 faea 	bl	25164 <cc_mbedtls_ctr_drbg_seed>
   24b90:	b908      	cbnz	r0, 24b96 <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
   24b92:	6026      	str	r6, [r4, #0]
   24b94:	2000      	movs	r0, #0
   24b96:	b003      	add	sp, #12
   24b98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   24b9c:	20003a58 	.word	0x20003a58
   24ba0:	5ac9bca5 	.word	0x5ac9bca5
   24ba4:	0002555d 	.word	0x0002555d

00024ba8 <nrf_cc3xx_platform_ctr_drbg_get>:
   24ba8:	b570      	push	{r4, r5, r6, lr}
   24baa:	461d      	mov	r5, r3
   24bac:	4b0c      	ldr	r3, [pc, #48]	; (24be0 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   24bae:	2800      	cmp	r0, #0
   24bb0:	bf18      	it	ne
   24bb2:	4603      	movne	r3, r0
   24bb4:	480b      	ldr	r0, [pc, #44]	; (24be4 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   24bb6:	681e      	ldr	r6, [r3, #0]
   24bb8:	4286      	cmp	r6, r0
   24bba:	b082      	sub	sp, #8
   24bbc:	d10d      	bne.n	24bda <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   24bbe:	2600      	movs	r6, #0
   24bc0:	f503 708e 	add.w	r0, r3, #284	; 0x11c
   24bc4:	9600      	str	r6, [sp, #0]
   24bc6:	4633      	mov	r3, r6
   24bc8:	4614      	mov	r4, r2
   24bca:	f000 fb17 	bl	251fc <cc_mbedtls_ctr_drbg_random_with_add>
   24bce:	2800      	cmp	r0, #0
   24bd0:	bf18      	it	ne
   24bd2:	4634      	movne	r4, r6
   24bd4:	602c      	str	r4, [r5, #0]
   24bd6:	b002      	add	sp, #8
   24bd8:	bd70      	pop	{r4, r5, r6, pc}
   24bda:	4803      	ldr	r0, [pc, #12]	; (24be8 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   24bdc:	e7fb      	b.n	24bd6 <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   24bde:	bf00      	nop
   24be0:	20003a58 	.word	0x20003a58
   24be4:	5ac9bca5 	.word	0x5ac9bca5
   24be8:	ffff8fe8 	.word	0xffff8fe8

00024bec <mutex_free>:
   24bec:	b510      	push	{r4, lr}
   24bee:	4604      	mov	r4, r0
   24bf0:	b150      	cbz	r0, 24c08 <mutex_free+0x1c>
   24bf2:	6863      	ldr	r3, [r4, #4]
   24bf4:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   24bf8:	d005      	beq.n	24c06 <mutex_free+0x1a>
   24bfa:	4a06      	ldr	r2, [pc, #24]	; (24c14 <mutex_free+0x28>)
   24bfc:	4293      	cmp	r3, r2
   24bfe:	d002      	beq.n	24c06 <mutex_free+0x1a>
   24c00:	2300      	movs	r3, #0
   24c02:	6023      	str	r3, [r4, #0]
   24c04:	6062      	str	r2, [r4, #4]
   24c06:	bd10      	pop	{r4, pc}
   24c08:	4b03      	ldr	r3, [pc, #12]	; (24c18 <mutex_free+0x2c>)
   24c0a:	4804      	ldr	r0, [pc, #16]	; (24c1c <mutex_free+0x30>)
   24c0c:	685b      	ldr	r3, [r3, #4]
   24c0e:	4798      	blx	r3
   24c10:	e7ef      	b.n	24bf2 <mutex_free+0x6>
   24c12:	bf00      	nop
   24c14:	a95c5f2c 	.word	0xa95c5f2c
   24c18:	20000838 	.word	0x20000838
   24c1c:	0002d648 	.word	0x0002d648

00024c20 <mutex_lock>:
   24c20:	b1c8      	cbz	r0, 24c56 <mutex_lock+0x36>
   24c22:	6843      	ldr	r3, [r0, #4]
   24c24:	4a0d      	ldr	r2, [pc, #52]	; (24c5c <mutex_lock+0x3c>)
   24c26:	4293      	cmp	r3, r2
   24c28:	d013      	beq.n	24c52 <mutex_lock+0x32>
   24c2a:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   24c2e:	d00e      	beq.n	24c4e <mutex_lock+0x2e>
   24c30:	2301      	movs	r3, #1
   24c32:	e850 2f00 	ldrex	r2, [r0]
   24c36:	4619      	mov	r1, r3
   24c38:	e840 1c00 	strex	ip, r1, [r0]
   24c3c:	f09c 0f00 	teq	ip, #0
   24c40:	d1f7      	bne.n	24c32 <mutex_lock+0x12>
   24c42:	2a01      	cmp	r2, #1
   24c44:	d0f5      	beq.n	24c32 <mutex_lock+0x12>
   24c46:	f3bf 8f5f 	dmb	sy
   24c4a:	2000      	movs	r0, #0
   24c4c:	4770      	bx	lr
   24c4e:	4804      	ldr	r0, [pc, #16]	; (24c60 <mutex_lock+0x40>)
   24c50:	4770      	bx	lr
   24c52:	4804      	ldr	r0, [pc, #16]	; (24c64 <mutex_lock+0x44>)
   24c54:	4770      	bx	lr
   24c56:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   24c5a:	4770      	bx	lr
   24c5c:	a95c5f2c 	.word	0xa95c5f2c
   24c60:	ffff8fe9 	.word	0xffff8fe9
   24c64:	ffff8fea 	.word	0xffff8fea

00024c68 <mutex_unlock>:
   24c68:	b180      	cbz	r0, 24c8c <mutex_unlock+0x24>
   24c6a:	6843      	ldr	r3, [r0, #4]
   24c6c:	4a09      	ldr	r2, [pc, #36]	; (24c94 <mutex_unlock+0x2c>)
   24c6e:	4293      	cmp	r3, r2
   24c70:	d00a      	beq.n	24c88 <mutex_unlock+0x20>
   24c72:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   24c76:	d005      	beq.n	24c84 <mutex_unlock+0x1c>
   24c78:	f3bf 8f5f 	dmb	sy
   24c7c:	2300      	movs	r3, #0
   24c7e:	6003      	str	r3, [r0, #0]
   24c80:	4618      	mov	r0, r3
   24c82:	4770      	bx	lr
   24c84:	4804      	ldr	r0, [pc, #16]	; (24c98 <mutex_unlock+0x30>)
   24c86:	4770      	bx	lr
   24c88:	4804      	ldr	r0, [pc, #16]	; (24c9c <mutex_unlock+0x34>)
   24c8a:	4770      	bx	lr
   24c8c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   24c90:	4770      	bx	lr
   24c92:	bf00      	nop
   24c94:	a95c5f2c 	.word	0xa95c5f2c
   24c98:	ffff8fe9 	.word	0xffff8fe9
   24c9c:	ffff8fea 	.word	0xffff8fea

00024ca0 <mutex_init>:
   24ca0:	b510      	push	{r4, lr}
   24ca2:	4604      	mov	r4, r0
   24ca4:	b120      	cbz	r0, 24cb0 <mutex_init+0x10>
   24ca6:	4b04      	ldr	r3, [pc, #16]	; (24cb8 <mutex_init+0x18>)
   24ca8:	6063      	str	r3, [r4, #4]
   24caa:	2200      	movs	r2, #0
   24cac:	6022      	str	r2, [r4, #0]
   24cae:	bd10      	pop	{r4, pc}
   24cb0:	4802      	ldr	r0, [pc, #8]	; (24cbc <mutex_init+0x1c>)
   24cb2:	f7ff ff27 	bl	24b04 <CC_PalAbort>
   24cb6:	e7f6      	b.n	24ca6 <mutex_init+0x6>
   24cb8:	3a00003a 	.word	0x3a00003a
   24cbc:	0002d670 	.word	0x0002d670

00024cc0 <nrf_cc3xx_platform_set_mutexes>:
   24cc0:	b570      	push	{r4, r5, r6, lr}
   24cc2:	e9d0 2300 	ldrd	r2, r3, [r0]
   24cc6:	4c17      	ldr	r4, [pc, #92]	; (24d24 <nrf_cc3xx_platform_set_mutexes+0x64>)
   24cc8:	4d17      	ldr	r5, [pc, #92]	; (24d28 <nrf_cc3xx_platform_set_mutexes+0x68>)
   24cca:	6063      	str	r3, [r4, #4]
   24ccc:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
   24cd0:	e9c4 3002 	strd	r3, r0, [r4, #8]
   24cd4:	6022      	str	r2, [r4, #0]
   24cd6:	6848      	ldr	r0, [r1, #4]
   24cd8:	f8d1 c000 	ldr.w	ip, [r1]
   24cdc:	4b13      	ldr	r3, [pc, #76]	; (24d2c <nrf_cc3xx_platform_set_mutexes+0x6c>)
   24cde:	e9c3 c000 	strd	ip, r0, [r3]
   24ce2:	f8d5 0118 	ldr.w	r0, [r5, #280]	; 0x118
   24ce6:	f8d1 c008 	ldr.w	ip, [r1, #8]
   24cea:	f8c3 c008 	str.w	ip, [r3, #8]
   24cee:	f010 5f68 	tst.w	r0, #973078528	; 0x3a000000
   24cf2:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   24cf6:	6909      	ldr	r1, [r1, #16]
   24cf8:	f8c3 c00c 	str.w	ip, [r3, #12]
   24cfc:	6119      	str	r1, [r3, #16]
   24cfe:	d010      	beq.n	24d22 <nrf_cc3xx_platform_set_mutexes+0x62>
   24d00:	490b      	ldr	r1, [pc, #44]	; (24d30 <nrf_cc3xx_platform_set_mutexes+0x70>)
   24d02:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
   24d06:	2300      	movs	r3, #0
   24d08:	e9c5 3145 	strd	r3, r1, [r5, #276]	; 0x114
   24d0c:	f505 708a 	add.w	r0, r5, #276	; 0x114
   24d10:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
   24d14:	4790      	blx	r2
   24d16:	6823      	ldr	r3, [r4, #0]
   24d18:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
   24d1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   24d20:	4718      	bx	r3
   24d22:	bd70      	pop	{r4, r5, r6, pc}
   24d24:	20000854 	.word	0x20000854
   24d28:	20003a58 	.word	0x20003a58
   24d2c:	20000840 	.word	0x20000840
   24d30:	a95c5f2c 	.word	0xa95c5f2c

00024d34 <mbedtls_zeroize_internal>:
   24d34:	b138      	cbz	r0, 24d46 <mbedtls_zeroize_internal+0x12>
   24d36:	b131      	cbz	r1, 24d46 <mbedtls_zeroize_internal+0x12>
   24d38:	4401      	add	r1, r0
   24d3a:	2200      	movs	r2, #0
   24d3c:	4603      	mov	r3, r0
   24d3e:	3001      	adds	r0, #1
   24d40:	4281      	cmp	r1, r0
   24d42:	701a      	strb	r2, [r3, #0]
   24d44:	d1fa      	bne.n	24d3c <mbedtls_zeroize_internal+0x8>
   24d46:	4770      	bx	lr

00024d48 <mbedtls_platform_zeroize>:
   24d48:	b138      	cbz	r0, 24d5a <mbedtls_platform_zeroize+0x12>
   24d4a:	b131      	cbz	r1, 24d5a <mbedtls_platform_zeroize+0x12>
   24d4c:	4401      	add	r1, r0
   24d4e:	2200      	movs	r2, #0
   24d50:	4603      	mov	r3, r0
   24d52:	3001      	adds	r0, #1
   24d54:	4288      	cmp	r0, r1
   24d56:	701a      	strb	r2, [r3, #0]
   24d58:	d1fa      	bne.n	24d50 <mbedtls_platform_zeroize+0x8>
   24d5a:	4770      	bx	lr

00024d5c <block_cipher_df>:
   24d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24d60:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   24d64:	b0b5      	sub	sp, #212	; 0xd4
   24d66:	f200 80d7 	bhi.w	24f18 <block_cipher_df+0x1bc>
   24d6a:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 24f20 <block_cipher_df+0x1c4>
   24d6e:	4614      	mov	r4, r2
   24d70:	460d      	mov	r5, r1
   24d72:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   24d76:	2100      	movs	r1, #0
   24d78:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
   24d7c:	4607      	mov	r7, r0
   24d7e:	4648      	mov	r0, r9
   24d80:	f004 f8dd 	bl	28f3e <memset>
   24d84:	4640      	mov	r0, r8
   24d86:	f001 f951 	bl	2602c <cc_mbedtls_aes_init>
   24d8a:	2300      	movs	r3, #0
   24d8c:	f8a9 3010 	strh.w	r3, [r9, #16]
   24d90:	ba63      	rev16	r3, r4
   24d92:	f109 0618 	add.w	r6, r9, #24
   24d96:	f8a9 3012 	strh.w	r3, [r9, #18]
   24d9a:	2320      	movs	r3, #32
   24d9c:	4629      	mov	r1, r5
   24d9e:	4622      	mov	r2, r4
   24da0:	f889 3017 	strb.w	r3, [r9, #23]
   24da4:	4630      	mov	r0, r6
   24da6:	f004 f8bf 	bl	28f28 <memcpy>
   24daa:	4b5e      	ldr	r3, [pc, #376]	; (24f24 <block_cipher_df+0x1c8>)
   24dac:	9307      	str	r3, [sp, #28]
   24dae:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   24db2:	2280      	movs	r2, #128	; 0x80
   24db4:	9308      	str	r3, [sp, #32]
   24db6:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   24dba:	9309      	str	r3, [sp, #36]	; 0x24
   24dbc:	5532      	strb	r2, [r6, r4]
   24dbe:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   24dc2:	a907      	add	r1, sp, #28
   24dc4:	4640      	mov	r0, r8
   24dc6:	930a      	str	r3, [sp, #40]	; 0x28
   24dc8:	f001 f946 	bl	26058 <cc_mbedtls_aes_setkey_enc>
   24dcc:	4682      	mov	sl, r0
   24dce:	2800      	cmp	r0, #0
   24dd0:	d17f      	bne.n	24ed2 <block_cipher_df+0x176>
   24dd2:	f104 0319 	add.w	r3, r4, #25
   24dd6:	ae0b      	add	r6, sp, #44	; 0x2c
   24dd8:	ac0f      	add	r4, sp, #60	; 0x3c
   24dda:	9302      	str	r3, [sp, #8]
   24ddc:	9703      	str	r7, [sp, #12]
   24dde:	9601      	str	r6, [sp, #4]
   24de0:	9404      	str	r4, [sp, #16]
   24de2:	9801      	ldr	r0, [sp, #4]
   24de4:	f8df b140 	ldr.w	fp, [pc, #320]	; 24f28 <block_cipher_df+0x1cc>
   24de8:	2210      	movs	r2, #16
   24dea:	2100      	movs	r1, #0
   24dec:	f004 f8a7 	bl	28f3e <memset>
   24df0:	f8dd a008 	ldr.w	sl, [sp, #8]
   24df4:	9405      	str	r4, [sp, #20]
   24df6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   24df8:	f85b 4c04 	ldr.w	r4, [fp, #-4]
   24dfc:	f85b 7c0c 	ldr.w	r7, [fp, #-12]
   24e00:	990b      	ldr	r1, [sp, #44]	; 0x2c
   24e02:	f85b 0c10 	ldr.w	r0, [fp, #-16]
   24e06:	f85b 5c08 	ldr.w	r5, [fp, #-8]
   24e0a:	e9dd 620c 	ldrd	r6, r2, [sp, #48]	; 0x30
   24e0e:	405c      	eors	r4, r3
   24e10:	9b01      	ldr	r3, [sp, #4]
   24e12:	407e      	eors	r6, r7
   24e14:	4055      	eors	r5, r2
   24e16:	ea81 0700 	eor.w	r7, r1, r0
   24e1a:	461a      	mov	r2, r3
   24e1c:	2101      	movs	r1, #1
   24e1e:	4640      	mov	r0, r8
   24e20:	e9cd 760b 	strd	r7, r6, [sp, #44]	; 0x2c
   24e24:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
   24e28:	f001 f930 	bl	2608c <cc_mbedtls_aes_crypt_ecb>
   24e2c:	f1ba 0f10 	cmp.w	sl, #16
   24e30:	bf94      	ite	ls
   24e32:	ebaa 0a0a 	subls.w	sl, sl, sl
   24e36:	f1aa 0a10 	subhi.w	sl, sl, #16
   24e3a:	f10b 0b10 	add.w	fp, fp, #16
   24e3e:	2800      	cmp	r0, #0
   24e40:	d165      	bne.n	24f0e <block_cipher_df+0x1b2>
   24e42:	f1ba 0f00 	cmp.w	sl, #0
   24e46:	d1d6      	bne.n	24df6 <block_cipher_df+0x9a>
   24e48:	9c05      	ldr	r4, [sp, #20]
   24e4a:	9901      	ldr	r1, [sp, #4]
   24e4c:	4620      	mov	r0, r4
   24e4e:	2210      	movs	r2, #16
   24e50:	f004 f86a 	bl	28f28 <memcpy>
   24e54:	f899 3003 	ldrb.w	r3, [r9, #3]
   24e58:	3410      	adds	r4, #16
   24e5a:	3301      	adds	r3, #1
   24e5c:	45a0      	cmp	r8, r4
   24e5e:	f889 3003 	strb.w	r3, [r9, #3]
   24e62:	d1be      	bne.n	24de2 <block_cipher_df+0x86>
   24e64:	9c04      	ldr	r4, [sp, #16]
   24e66:	9f03      	ldr	r7, [sp, #12]
   24e68:	9e01      	ldr	r6, [sp, #4]
   24e6a:	2280      	movs	r2, #128	; 0x80
   24e6c:	4621      	mov	r1, r4
   24e6e:	4640      	mov	r0, r8
   24e70:	f001 f8f2 	bl	26058 <cc_mbedtls_aes_setkey_enc>
   24e74:	4682      	mov	sl, r0
   24e76:	bb70      	cbnz	r0, 24ed6 <block_cipher_df+0x17a>
   24e78:	f107 0920 	add.w	r9, r7, #32
   24e7c:	463d      	mov	r5, r7
   24e7e:	ab13      	add	r3, sp, #76	; 0x4c
   24e80:	461a      	mov	r2, r3
   24e82:	2101      	movs	r1, #1
   24e84:	4640      	mov	r0, r8
   24e86:	f001 f901 	bl	2608c <cc_mbedtls_aes_crypt_ecb>
   24e8a:	2210      	movs	r2, #16
   24e8c:	4682      	mov	sl, r0
   24e8e:	a913      	add	r1, sp, #76	; 0x4c
   24e90:	4628      	mov	r0, r5
   24e92:	4415      	add	r5, r2
   24e94:	f1ba 0f00 	cmp.w	sl, #0
   24e98:	d11d      	bne.n	24ed6 <block_cipher_df+0x17a>
   24e9a:	f004 f845 	bl	28f28 <memcpy>
   24e9e:	454d      	cmp	r5, r9
   24ea0:	d1ed      	bne.n	24e7e <block_cipher_df+0x122>
   24ea2:	4640      	mov	r0, r8
   24ea4:	f001 f8d2 	bl	2604c <cc_mbedtls_aes_free>
   24ea8:	481d      	ldr	r0, [pc, #116]	; (24f20 <block_cipher_df+0x1c4>)
   24eaa:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   24eae:	f7ff ff4b 	bl	24d48 <mbedtls_platform_zeroize>
   24eb2:	4620      	mov	r0, r4
   24eb4:	2120      	movs	r1, #32
   24eb6:	f7ff ff47 	bl	24d48 <mbedtls_platform_zeroize>
   24eba:	a807      	add	r0, sp, #28
   24ebc:	2110      	movs	r1, #16
   24ebe:	f7ff ff43 	bl	24d48 <mbedtls_platform_zeroize>
   24ec2:	4630      	mov	r0, r6
   24ec4:	2110      	movs	r1, #16
   24ec6:	f7ff ff3f 	bl	24d48 <mbedtls_platform_zeroize>
   24eca:	4650      	mov	r0, sl
   24ecc:	b035      	add	sp, #212	; 0xd4
   24ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24ed2:	ac0f      	add	r4, sp, #60	; 0x3c
   24ed4:	ae0b      	add	r6, sp, #44	; 0x2c
   24ed6:	4640      	mov	r0, r8
   24ed8:	f001 f8b8 	bl	2604c <cc_mbedtls_aes_free>
   24edc:	4810      	ldr	r0, [pc, #64]	; (24f20 <block_cipher_df+0x1c4>)
   24ede:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   24ee2:	f7ff ff31 	bl	24d48 <mbedtls_platform_zeroize>
   24ee6:	4620      	mov	r0, r4
   24ee8:	2120      	movs	r1, #32
   24eea:	f7ff ff2d 	bl	24d48 <mbedtls_platform_zeroize>
   24eee:	a807      	add	r0, sp, #28
   24ef0:	2110      	movs	r1, #16
   24ef2:	f7ff ff29 	bl	24d48 <mbedtls_platform_zeroize>
   24ef6:	2110      	movs	r1, #16
   24ef8:	4630      	mov	r0, r6
   24efa:	f7ff ff25 	bl	24d48 <mbedtls_platform_zeroize>
   24efe:	2120      	movs	r1, #32
   24f00:	4638      	mov	r0, r7
   24f02:	f7ff ff21 	bl	24d48 <mbedtls_platform_zeroize>
   24f06:	4650      	mov	r0, sl
   24f08:	b035      	add	sp, #212	; 0xd4
   24f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24f0e:	9f03      	ldr	r7, [sp, #12]
   24f10:	9e01      	ldr	r6, [sp, #4]
   24f12:	9c04      	ldr	r4, [sp, #16]
   24f14:	4682      	mov	sl, r0
   24f16:	e7de      	b.n	24ed6 <block_cipher_df+0x17a>
   24f18:	f06f 0a37 	mvn.w	sl, #55	; 0x37
   24f1c:	e7f3      	b.n	24f06 <block_cipher_df+0x1aa>
   24f1e:	bf00      	nop
   24f20:	20003c28 	.word	0x20003c28
   24f24:	03020100 	.word	0x03020100
   24f28:	20003c38 	.word	0x20003c38

00024f2c <ctr_drbg_update_internal>:
   24f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24f30:	b088      	sub	sp, #32
   24f32:	4604      	mov	r4, r0
   24f34:	460d      	mov	r5, r1
   24f36:	2220      	movs	r2, #32
   24f38:	2100      	movs	r1, #0
   24f3a:	4668      	mov	r0, sp
   24f3c:	f003 ffff 	bl	28f3e <memset>
   24f40:	f104 0620 	add.w	r6, r4, #32
   24f44:	466f      	mov	r7, sp
   24f46:	7be2      	ldrb	r2, [r4, #15]
   24f48:	3201      	adds	r2, #1
   24f4a:	b2d2      	uxtb	r2, r2
   24f4c:	73e2      	strb	r2, [r4, #15]
   24f4e:	2a00      	cmp	r2, #0
   24f50:	d14d      	bne.n	24fee <ctr_drbg_update_internal+0xc2>
   24f52:	7ba2      	ldrb	r2, [r4, #14]
   24f54:	3201      	adds	r2, #1
   24f56:	b2d2      	uxtb	r2, r2
   24f58:	73a2      	strb	r2, [r4, #14]
   24f5a:	2a00      	cmp	r2, #0
   24f5c:	d147      	bne.n	24fee <ctr_drbg_update_internal+0xc2>
   24f5e:	7b63      	ldrb	r3, [r4, #13]
   24f60:	3301      	adds	r3, #1
   24f62:	b2db      	uxtb	r3, r3
   24f64:	7363      	strb	r3, [r4, #13]
   24f66:	2b00      	cmp	r3, #0
   24f68:	d141      	bne.n	24fee <ctr_drbg_update_internal+0xc2>
   24f6a:	7b23      	ldrb	r3, [r4, #12]
   24f6c:	3301      	adds	r3, #1
   24f6e:	b2db      	uxtb	r3, r3
   24f70:	7323      	strb	r3, [r4, #12]
   24f72:	2b00      	cmp	r3, #0
   24f74:	d13b      	bne.n	24fee <ctr_drbg_update_internal+0xc2>
   24f76:	7ae3      	ldrb	r3, [r4, #11]
   24f78:	3301      	adds	r3, #1
   24f7a:	b2db      	uxtb	r3, r3
   24f7c:	72e3      	strb	r3, [r4, #11]
   24f7e:	2b00      	cmp	r3, #0
   24f80:	d135      	bne.n	24fee <ctr_drbg_update_internal+0xc2>
   24f82:	7aa3      	ldrb	r3, [r4, #10]
   24f84:	3301      	adds	r3, #1
   24f86:	b2db      	uxtb	r3, r3
   24f88:	72a3      	strb	r3, [r4, #10]
   24f8a:	2b00      	cmp	r3, #0
   24f8c:	d12f      	bne.n	24fee <ctr_drbg_update_internal+0xc2>
   24f8e:	7a63      	ldrb	r3, [r4, #9]
   24f90:	3301      	adds	r3, #1
   24f92:	b2db      	uxtb	r3, r3
   24f94:	7263      	strb	r3, [r4, #9]
   24f96:	bb53      	cbnz	r3, 24fee <ctr_drbg_update_internal+0xc2>
   24f98:	7a23      	ldrb	r3, [r4, #8]
   24f9a:	3301      	adds	r3, #1
   24f9c:	b2db      	uxtb	r3, r3
   24f9e:	7223      	strb	r3, [r4, #8]
   24fa0:	bb2b      	cbnz	r3, 24fee <ctr_drbg_update_internal+0xc2>
   24fa2:	79e3      	ldrb	r3, [r4, #7]
   24fa4:	3301      	adds	r3, #1
   24fa6:	b2db      	uxtb	r3, r3
   24fa8:	71e3      	strb	r3, [r4, #7]
   24faa:	bb03      	cbnz	r3, 24fee <ctr_drbg_update_internal+0xc2>
   24fac:	79a3      	ldrb	r3, [r4, #6]
   24fae:	3301      	adds	r3, #1
   24fb0:	b2db      	uxtb	r3, r3
   24fb2:	71a3      	strb	r3, [r4, #6]
   24fb4:	b9db      	cbnz	r3, 24fee <ctr_drbg_update_internal+0xc2>
   24fb6:	7963      	ldrb	r3, [r4, #5]
   24fb8:	3301      	adds	r3, #1
   24fba:	b2db      	uxtb	r3, r3
   24fbc:	7163      	strb	r3, [r4, #5]
   24fbe:	b9b3      	cbnz	r3, 24fee <ctr_drbg_update_internal+0xc2>
   24fc0:	7923      	ldrb	r3, [r4, #4]
   24fc2:	3301      	adds	r3, #1
   24fc4:	b2db      	uxtb	r3, r3
   24fc6:	7123      	strb	r3, [r4, #4]
   24fc8:	b98b      	cbnz	r3, 24fee <ctr_drbg_update_internal+0xc2>
   24fca:	78e3      	ldrb	r3, [r4, #3]
   24fcc:	3301      	adds	r3, #1
   24fce:	b2db      	uxtb	r3, r3
   24fd0:	70e3      	strb	r3, [r4, #3]
   24fd2:	b963      	cbnz	r3, 24fee <ctr_drbg_update_internal+0xc2>
   24fd4:	78a3      	ldrb	r3, [r4, #2]
   24fd6:	3301      	adds	r3, #1
   24fd8:	b2db      	uxtb	r3, r3
   24fda:	70a3      	strb	r3, [r4, #2]
   24fdc:	b93b      	cbnz	r3, 24fee <ctr_drbg_update_internal+0xc2>
   24fde:	7863      	ldrb	r3, [r4, #1]
   24fe0:	3301      	adds	r3, #1
   24fe2:	b2db      	uxtb	r3, r3
   24fe4:	7063      	strb	r3, [r4, #1]
   24fe6:	b913      	cbnz	r3, 24fee <ctr_drbg_update_internal+0xc2>
   24fe8:	7823      	ldrb	r3, [r4, #0]
   24fea:	3301      	adds	r3, #1
   24fec:	7023      	strb	r3, [r4, #0]
   24fee:	463b      	mov	r3, r7
   24ff0:	4622      	mov	r2, r4
   24ff2:	2101      	movs	r1, #1
   24ff4:	4630      	mov	r0, r6
   24ff6:	f001 f849 	bl	2608c <cc_mbedtls_aes_crypt_ecb>
   24ffa:	4680      	mov	r8, r0
   24ffc:	bb50      	cbnz	r0, 25054 <ctr_drbg_update_internal+0x128>
   24ffe:	3710      	adds	r7, #16
   25000:	ab08      	add	r3, sp, #32
   25002:	429f      	cmp	r7, r3
   25004:	d19f      	bne.n	24f46 <ctr_drbg_update_internal+0x1a>
   25006:	9a02      	ldr	r2, [sp, #8]
   25008:	68ab      	ldr	r3, [r5, #8]
   2500a:	9f03      	ldr	r7, [sp, #12]
   2500c:	9907      	ldr	r1, [sp, #28]
   2500e:	4053      	eors	r3, r2
   25010:	9302      	str	r3, [sp, #8]
   25012:	4630      	mov	r0, r6
   25014:	68ee      	ldr	r6, [r5, #12]
   25016:	9b00      	ldr	r3, [sp, #0]
   25018:	407e      	eors	r6, r7
   2501a:	9603      	str	r6, [sp, #12]
   2501c:	9f04      	ldr	r7, [sp, #16]
   2501e:	692e      	ldr	r6, [r5, #16]
   25020:	407e      	eors	r6, r7
   25022:	9604      	str	r6, [sp, #16]
   25024:	696e      	ldr	r6, [r5, #20]
   25026:	9f05      	ldr	r7, [sp, #20]
   25028:	407e      	eors	r6, r7
   2502a:	9605      	str	r6, [sp, #20]
   2502c:	9f06      	ldr	r7, [sp, #24]
   2502e:	69ae      	ldr	r6, [r5, #24]
   25030:	407e      	eors	r6, r7
   25032:	9606      	str	r6, [sp, #24]
   25034:	69ee      	ldr	r6, [r5, #28]
   25036:	4071      	eors	r1, r6
   25038:	9107      	str	r1, [sp, #28]
   2503a:	6829      	ldr	r1, [r5, #0]
   2503c:	404b      	eors	r3, r1
   2503e:	9300      	str	r3, [sp, #0]
   25040:	9901      	ldr	r1, [sp, #4]
   25042:	686b      	ldr	r3, [r5, #4]
   25044:	2280      	movs	r2, #128	; 0x80
   25046:	404b      	eors	r3, r1
   25048:	4669      	mov	r1, sp
   2504a:	9301      	str	r3, [sp, #4]
   2504c:	f001 f804 	bl	26058 <cc_mbedtls_aes_setkey_enc>
   25050:	4680      	mov	r8, r0
   25052:	b138      	cbz	r0, 25064 <ctr_drbg_update_internal+0x138>
   25054:	4668      	mov	r0, sp
   25056:	2120      	movs	r1, #32
   25058:	f7ff fe76 	bl	24d48 <mbedtls_platform_zeroize>
   2505c:	4640      	mov	r0, r8
   2505e:	b008      	add	sp, #32
   25060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25064:	2210      	movs	r2, #16
   25066:	eb0d 0102 	add.w	r1, sp, r2
   2506a:	4620      	mov	r0, r4
   2506c:	f003 ff5c 	bl	28f28 <memcpy>
   25070:	e7f0      	b.n	25054 <ctr_drbg_update_internal+0x128>
   25072:	bf00      	nop

00025074 <mbedtls_ctr_drbg_reseed_internal>:
   25074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25078:	4604      	mov	r4, r0
   2507a:	6980      	ldr	r0, [r0, #24]
   2507c:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   25080:	d852      	bhi.n	25128 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   25082:	461d      	mov	r5, r3
   25084:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   25088:	42ab      	cmp	r3, r5
   2508a:	d34d      	bcc.n	25128 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   2508c:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   25090:	1a1b      	subs	r3, r3, r0
   25092:	4293      	cmp	r3, r2
   25094:	4616      	mov	r6, r2
   25096:	d347      	bcc.n	25128 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   25098:	f8df 9098 	ldr.w	r9, [pc, #152]	; 25134 <mbedtls_ctr_drbg_reseed_internal+0xc0>
   2509c:	f44f 72c0 	mov.w	r2, #384	; 0x180
   250a0:	460f      	mov	r7, r1
   250a2:	4648      	mov	r0, r9
   250a4:	2100      	movs	r1, #0
   250a6:	f003 ff4a 	bl	28f3e <memset>
   250aa:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   250ae:	69a2      	ldr	r2, [r4, #24]
   250b0:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   250b4:	4649      	mov	r1, r9
   250b6:	4798      	blx	r3
   250b8:	2800      	cmp	r0, #0
   250ba:	d138      	bne.n	2512e <mbedtls_ctr_drbg_reseed_internal+0xba>
   250bc:	f8d4 8018 	ldr.w	r8, [r4, #24]
   250c0:	b13d      	cbz	r5, 250d2 <mbedtls_ctr_drbg_reseed_internal+0x5e>
   250c2:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   250c6:	462a      	mov	r2, r5
   250c8:	eb09 0108 	add.w	r1, r9, r8
   250cc:	4798      	blx	r3
   250ce:	bb70      	cbnz	r0, 2512e <mbedtls_ctr_drbg_reseed_internal+0xba>
   250d0:	44a8      	add	r8, r5
   250d2:	b107      	cbz	r7, 250d6 <mbedtls_ctr_drbg_reseed_internal+0x62>
   250d4:	b9c6      	cbnz	r6, 25108 <mbedtls_ctr_drbg_reseed_internal+0x94>
   250d6:	4917      	ldr	r1, [pc, #92]	; (25134 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   250d8:	4642      	mov	r2, r8
   250da:	4608      	mov	r0, r1
   250dc:	f7ff fe3e 	bl	24d5c <block_cipher_df>
   250e0:	4605      	mov	r5, r0
   250e2:	b138      	cbz	r0, 250f4 <mbedtls_ctr_drbg_reseed_internal+0x80>
   250e4:	4813      	ldr	r0, [pc, #76]	; (25134 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   250e6:	f44f 71c0 	mov.w	r1, #384	; 0x180
   250ea:	f7ff fe2d 	bl	24d48 <mbedtls_platform_zeroize>
   250ee:	4628      	mov	r0, r5
   250f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   250f4:	490f      	ldr	r1, [pc, #60]	; (25134 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   250f6:	4620      	mov	r0, r4
   250f8:	f7ff ff18 	bl	24f2c <ctr_drbg_update_internal>
   250fc:	4605      	mov	r5, r0
   250fe:	2800      	cmp	r0, #0
   25100:	d1f0      	bne.n	250e4 <mbedtls_ctr_drbg_reseed_internal+0x70>
   25102:	2301      	movs	r3, #1
   25104:	6123      	str	r3, [r4, #16]
   25106:	e7ed      	b.n	250e4 <mbedtls_ctr_drbg_reseed_internal+0x70>
   25108:	eb09 0008 	add.w	r0, r9, r8
   2510c:	4639      	mov	r1, r7
   2510e:	4632      	mov	r2, r6
   25110:	f003 ff0a 	bl	28f28 <memcpy>
   25114:	4907      	ldr	r1, [pc, #28]	; (25134 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   25116:	44b0      	add	r8, r6
   25118:	4642      	mov	r2, r8
   2511a:	4608      	mov	r0, r1
   2511c:	f7ff fe1e 	bl	24d5c <block_cipher_df>
   25120:	4605      	mov	r5, r0
   25122:	2800      	cmp	r0, #0
   25124:	d1de      	bne.n	250e4 <mbedtls_ctr_drbg_reseed_internal+0x70>
   25126:	e7e5      	b.n	250f4 <mbedtls_ctr_drbg_reseed_internal+0x80>
   25128:	f06f 0537 	mvn.w	r5, #55	; 0x37
   2512c:	e7df      	b.n	250ee <mbedtls_ctr_drbg_reseed_internal+0x7a>
   2512e:	f06f 0533 	mvn.w	r5, #51	; 0x33
   25132:	e7dc      	b.n	250ee <mbedtls_ctr_drbg_reseed_internal+0x7a>
   25134:	20003dc8 	.word	0x20003dc8

00025138 <cc_mbedtls_ctr_drbg_init>:
   25138:	b510      	push	{r4, lr}
   2513a:	22a4      	movs	r2, #164	; 0xa4
   2513c:	4604      	mov	r4, r0
   2513e:	2100      	movs	r1, #0
   25140:	f003 fefd 	bl	28f3e <memset>
   25144:	4b06      	ldr	r3, [pc, #24]	; (25160 <cc_mbedtls_ctr_drbg_init+0x28>)
   25146:	f04f 31ff 	mov.w	r1, #4294967295
   2514a:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   2514e:	6121      	str	r1, [r4, #16]
   25150:	61e2      	str	r2, [r4, #28]
   25152:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   25156:	681b      	ldr	r3, [r3, #0]
   25158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2515c:	4718      	bx	r3
   2515e:	bf00      	nop
   25160:	200008a4 	.word	0x200008a4

00025164 <cc_mbedtls_ctr_drbg_seed>:
   25164:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25168:	b085      	sub	sp, #20
   2516a:	4605      	mov	r5, r0
   2516c:	460f      	mov	r7, r1
   2516e:	4616      	mov	r6, r2
   25170:	2100      	movs	r1, #0
   25172:	2210      	movs	r2, #16
   25174:	4668      	mov	r0, sp
   25176:	4699      	mov	r9, r3
   25178:	f003 fee1 	bl	28f3e <memset>
   2517c:	4b1d      	ldr	r3, [pc, #116]	; (251f4 <cc_mbedtls_ctr_drbg_seed+0x90>)
   2517e:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   25182:	681b      	ldr	r3, [r3, #0]
   25184:	4640      	mov	r0, r8
   25186:	4798      	blx	r3
   25188:	b120      	cbz	r0, 25194 <cc_mbedtls_ctr_drbg_seed+0x30>
   2518a:	4604      	mov	r4, r0
   2518c:	4620      	mov	r0, r4
   2518e:	b005      	add	sp, #20
   25190:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25194:	f105 0420 	add.w	r4, r5, #32
   25198:	4620      	mov	r0, r4
   2519a:	f000 ff47 	bl	2602c <cc_mbedtls_aes_init>
   2519e:	69aa      	ldr	r2, [r5, #24]
   251a0:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   251a4:	692e      	ldr	r6, [r5, #16]
   251a6:	b9e2      	cbnz	r2, 251e2 <cc_mbedtls_ctr_drbg_seed+0x7e>
   251a8:	2220      	movs	r2, #32
   251aa:	2e00      	cmp	r6, #0
   251ac:	61aa      	str	r2, [r5, #24]
   251ae:	db1f      	blt.n	251f0 <cc_mbedtls_ctr_drbg_seed+0x8c>
   251b0:	4620      	mov	r0, r4
   251b2:	4669      	mov	r1, sp
   251b4:	2280      	movs	r2, #128	; 0x80
   251b6:	f000 ff4f 	bl	26058 <cc_mbedtls_aes_setkey_enc>
   251ba:	4604      	mov	r4, r0
   251bc:	b930      	cbnz	r0, 251cc <cc_mbedtls_ctr_drbg_seed+0x68>
   251be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   251c0:	4633      	mov	r3, r6
   251c2:	4649      	mov	r1, r9
   251c4:	4628      	mov	r0, r5
   251c6:	f7ff ff55 	bl	25074 <mbedtls_ctr_drbg_reseed_internal>
   251ca:	4604      	mov	r4, r0
   251cc:	4b0a      	ldr	r3, [pc, #40]	; (251f8 <cc_mbedtls_ctr_drbg_seed+0x94>)
   251ce:	4640      	mov	r0, r8
   251d0:	681b      	ldr	r3, [r3, #0]
   251d2:	4798      	blx	r3
   251d4:	2800      	cmp	r0, #0
   251d6:	bf18      	it	ne
   251d8:	4604      	movne	r4, r0
   251da:	4620      	mov	r0, r4
   251dc:	b005      	add	sp, #20
   251de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   251e2:	2e00      	cmp	r6, #0
   251e4:	dae4      	bge.n	251b0 <cc_mbedtls_ctr_drbg_seed+0x4c>
   251e6:	2a17      	cmp	r2, #23
   251e8:	d802      	bhi.n	251f0 <cc_mbedtls_ctr_drbg_seed+0x8c>
   251ea:	3201      	adds	r2, #1
   251ec:	0856      	lsrs	r6, r2, #1
   251ee:	e7df      	b.n	251b0 <cc_mbedtls_ctr_drbg_seed+0x4c>
   251f0:	2600      	movs	r6, #0
   251f2:	e7dd      	b.n	251b0 <cc_mbedtls_ctr_drbg_seed+0x4c>
   251f4:	200008a0 	.word	0x200008a0
   251f8:	2000089c 	.word	0x2000089c

000251fc <cc_mbedtls_ctr_drbg_random_with_add>:
   251fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25200:	b08d      	sub	sp, #52	; 0x34
   25202:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   25206:	9f16      	ldr	r7, [sp, #88]	; 0x58
   25208:	f200 80e3 	bhi.w	253d2 <cc_mbedtls_ctr_drbg_random_with_add+0x1d6>
   2520c:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   25210:	f200 80dc 	bhi.w	253cc <cc_mbedtls_ctr_drbg_random_with_add+0x1d0>
   25214:	4604      	mov	r4, r0
   25216:	4615      	mov	r5, r2
   25218:	460e      	mov	r6, r1
   2521a:	2220      	movs	r2, #32
   2521c:	2100      	movs	r1, #0
   2521e:	a804      	add	r0, sp, #16
   25220:	4698      	mov	r8, r3
   25222:	f003 fe8c 	bl	28f3e <memset>
   25226:	4b6c      	ldr	r3, [pc, #432]	; (253d8 <cc_mbedtls_ctr_drbg_random_with_add+0x1dc>)
   25228:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   2522c:	681b      	ldr	r3, [r3, #0]
   2522e:	4648      	mov	r0, r9
   25230:	4798      	blx	r3
   25232:	4683      	mov	fp, r0
   25234:	2800      	cmp	r0, #0
   25236:	f040 8092 	bne.w	2535e <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   2523a:	6922      	ldr	r2, [r4, #16]
   2523c:	69e3      	ldr	r3, [r4, #28]
   2523e:	429a      	cmp	r2, r3
   25240:	f300 8091 	bgt.w	25366 <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   25244:	6963      	ldr	r3, [r4, #20]
   25246:	2b00      	cmp	r3, #0
   25248:	f040 808d 	bne.w	25366 <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   2524c:	2f00      	cmp	r7, #0
   2524e:	f040 80a9 	bne.w	253a4 <cc_mbedtls_ctr_drbg_random_with_add+0x1a8>
   25252:	f8df a188 	ldr.w	sl, [pc, #392]	; 253dc <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   25256:	466f      	mov	r7, sp
   25258:	2d00      	cmp	r5, #0
   2525a:	f000 8098 	beq.w	2538e <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   2525e:	f104 0820 	add.w	r8, r4, #32
   25262:	466f      	mov	r7, sp
   25264:	e00e      	b.n	25284 <cc_mbedtls_ctr_drbg_random_with_add+0x88>
   25266:	2d10      	cmp	r5, #16
   25268:	46ab      	mov	fp, r5
   2526a:	bf28      	it	cs
   2526c:	f04f 0b10 	movcs.w	fp, #16
   25270:	4630      	mov	r0, r6
   25272:	465a      	mov	r2, fp
   25274:	4639      	mov	r1, r7
   25276:	f003 fe57 	bl	28f28 <memcpy>
   2527a:	ebb5 050b 	subs.w	r5, r5, fp
   2527e:	445e      	add	r6, fp
   25280:	f000 8085 	beq.w	2538e <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   25284:	7be3      	ldrb	r3, [r4, #15]
   25286:	3301      	adds	r3, #1
   25288:	b2db      	uxtb	r3, r3
   2528a:	73e3      	strb	r3, [r4, #15]
   2528c:	2b00      	cmp	r3, #0
   2528e:	d14d      	bne.n	2532c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   25290:	7ba3      	ldrb	r3, [r4, #14]
   25292:	3301      	adds	r3, #1
   25294:	b2db      	uxtb	r3, r3
   25296:	73a3      	strb	r3, [r4, #14]
   25298:	2b00      	cmp	r3, #0
   2529a:	d147      	bne.n	2532c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   2529c:	7b63      	ldrb	r3, [r4, #13]
   2529e:	3301      	adds	r3, #1
   252a0:	b2db      	uxtb	r3, r3
   252a2:	7363      	strb	r3, [r4, #13]
   252a4:	2b00      	cmp	r3, #0
   252a6:	d141      	bne.n	2532c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   252a8:	7b23      	ldrb	r3, [r4, #12]
   252aa:	3301      	adds	r3, #1
   252ac:	b2db      	uxtb	r3, r3
   252ae:	7323      	strb	r3, [r4, #12]
   252b0:	2b00      	cmp	r3, #0
   252b2:	d13b      	bne.n	2532c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   252b4:	7ae3      	ldrb	r3, [r4, #11]
   252b6:	3301      	adds	r3, #1
   252b8:	b2db      	uxtb	r3, r3
   252ba:	72e3      	strb	r3, [r4, #11]
   252bc:	2b00      	cmp	r3, #0
   252be:	d135      	bne.n	2532c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   252c0:	7aa3      	ldrb	r3, [r4, #10]
   252c2:	3301      	adds	r3, #1
   252c4:	b2db      	uxtb	r3, r3
   252c6:	72a3      	strb	r3, [r4, #10]
   252c8:	2b00      	cmp	r3, #0
   252ca:	d12f      	bne.n	2532c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   252cc:	7a63      	ldrb	r3, [r4, #9]
   252ce:	3301      	adds	r3, #1
   252d0:	b2db      	uxtb	r3, r3
   252d2:	7263      	strb	r3, [r4, #9]
   252d4:	bb53      	cbnz	r3, 2532c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   252d6:	7a23      	ldrb	r3, [r4, #8]
   252d8:	3301      	adds	r3, #1
   252da:	b2db      	uxtb	r3, r3
   252dc:	7223      	strb	r3, [r4, #8]
   252de:	bb2b      	cbnz	r3, 2532c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   252e0:	79e3      	ldrb	r3, [r4, #7]
   252e2:	3301      	adds	r3, #1
   252e4:	b2db      	uxtb	r3, r3
   252e6:	71e3      	strb	r3, [r4, #7]
   252e8:	bb03      	cbnz	r3, 2532c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   252ea:	79a3      	ldrb	r3, [r4, #6]
   252ec:	3301      	adds	r3, #1
   252ee:	b2db      	uxtb	r3, r3
   252f0:	71a3      	strb	r3, [r4, #6]
   252f2:	b9db      	cbnz	r3, 2532c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   252f4:	7963      	ldrb	r3, [r4, #5]
   252f6:	3301      	adds	r3, #1
   252f8:	b2db      	uxtb	r3, r3
   252fa:	7163      	strb	r3, [r4, #5]
   252fc:	b9b3      	cbnz	r3, 2532c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   252fe:	7923      	ldrb	r3, [r4, #4]
   25300:	3301      	adds	r3, #1
   25302:	b2db      	uxtb	r3, r3
   25304:	7123      	strb	r3, [r4, #4]
   25306:	b98b      	cbnz	r3, 2532c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   25308:	78e3      	ldrb	r3, [r4, #3]
   2530a:	3301      	adds	r3, #1
   2530c:	b2db      	uxtb	r3, r3
   2530e:	70e3      	strb	r3, [r4, #3]
   25310:	b963      	cbnz	r3, 2532c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   25312:	78a3      	ldrb	r3, [r4, #2]
   25314:	3301      	adds	r3, #1
   25316:	b2db      	uxtb	r3, r3
   25318:	70a3      	strb	r3, [r4, #2]
   2531a:	b93b      	cbnz	r3, 2532c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   2531c:	7863      	ldrb	r3, [r4, #1]
   2531e:	3301      	adds	r3, #1
   25320:	b2db      	uxtb	r3, r3
   25322:	7063      	strb	r3, [r4, #1]
   25324:	b913      	cbnz	r3, 2532c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   25326:	7823      	ldrb	r3, [r4, #0]
   25328:	3301      	adds	r3, #1
   2532a:	7023      	strb	r3, [r4, #0]
   2532c:	463b      	mov	r3, r7
   2532e:	4622      	mov	r2, r4
   25330:	2101      	movs	r1, #1
   25332:	4640      	mov	r0, r8
   25334:	f000 feaa 	bl	2608c <cc_mbedtls_aes_crypt_ecb>
   25338:	4683      	mov	fp, r0
   2533a:	2800      	cmp	r0, #0
   2533c:	d093      	beq.n	25266 <cc_mbedtls_ctr_drbg_random_with_add+0x6a>
   2533e:	f8da 3000 	ldr.w	r3, [sl]
   25342:	4648      	mov	r0, r9
   25344:	4798      	blx	r3
   25346:	2120      	movs	r1, #32
   25348:	4603      	mov	r3, r0
   2534a:	a804      	add	r0, sp, #16
   2534c:	2b00      	cmp	r3, #0
   2534e:	bf18      	it	ne
   25350:	469b      	movne	fp, r3
   25352:	f7ff fcf9 	bl	24d48 <mbedtls_platform_zeroize>
   25356:	2110      	movs	r1, #16
   25358:	4638      	mov	r0, r7
   2535a:	f7ff fcf5 	bl	24d48 <mbedtls_platform_zeroize>
   2535e:	4658      	mov	r0, fp
   25360:	b00d      	add	sp, #52	; 0x34
   25362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25366:	463a      	mov	r2, r7
   25368:	4641      	mov	r1, r8
   2536a:	2300      	movs	r3, #0
   2536c:	4620      	mov	r0, r4
   2536e:	f7ff fe81 	bl	25074 <mbedtls_ctr_drbg_reseed_internal>
   25372:	f8df a068 	ldr.w	sl, [pc, #104]	; 253dc <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   25376:	2800      	cmp	r0, #0
   25378:	f43f af6d 	beq.w	25256 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   2537c:	f8da 3000 	ldr.w	r3, [sl]
   25380:	4648      	mov	r0, r9
   25382:	4798      	blx	r3
   25384:	4683      	mov	fp, r0
   25386:	2800      	cmp	r0, #0
   25388:	f43f af65 	beq.w	25256 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   2538c:	e7e7      	b.n	2535e <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   2538e:	a904      	add	r1, sp, #16
   25390:	4620      	mov	r0, r4
   25392:	f7ff fdcb 	bl	24f2c <ctr_drbg_update_internal>
   25396:	4683      	mov	fp, r0
   25398:	2800      	cmp	r0, #0
   2539a:	d1d0      	bne.n	2533e <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   2539c:	6923      	ldr	r3, [r4, #16]
   2539e:	3301      	adds	r3, #1
   253a0:	6123      	str	r3, [r4, #16]
   253a2:	e7cc      	b.n	2533e <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   253a4:	463a      	mov	r2, r7
   253a6:	4641      	mov	r1, r8
   253a8:	a804      	add	r0, sp, #16
   253aa:	f7ff fcd7 	bl	24d5c <block_cipher_df>
   253ae:	4683      	mov	fp, r0
   253b0:	b118      	cbz	r0, 253ba <cc_mbedtls_ctr_drbg_random_with_add+0x1be>
   253b2:	f8df a028 	ldr.w	sl, [pc, #40]	; 253dc <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   253b6:	466f      	mov	r7, sp
   253b8:	e7c1      	b.n	2533e <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   253ba:	a904      	add	r1, sp, #16
   253bc:	4620      	mov	r0, r4
   253be:	f7ff fdb5 	bl	24f2c <ctr_drbg_update_internal>
   253c2:	4683      	mov	fp, r0
   253c4:	2800      	cmp	r0, #0
   253c6:	f43f af44 	beq.w	25252 <cc_mbedtls_ctr_drbg_random_with_add+0x56>
   253ca:	e7f2      	b.n	253b2 <cc_mbedtls_ctr_drbg_random_with_add+0x1b6>
   253cc:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   253d0:	e7c5      	b.n	2535e <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   253d2:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   253d6:	e7c2      	b.n	2535e <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   253d8:	200008a0 	.word	0x200008a0
   253dc:	2000089c 	.word	0x2000089c

000253e0 <entropy_update>:
   253e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   253e4:	2b20      	cmp	r3, #32
   253e6:	b08b      	sub	sp, #44	; 0x2c
   253e8:	461d      	mov	r5, r3
   253ea:	4606      	mov	r6, r0
   253ec:	4688      	mov	r8, r1
   253ee:	4691      	mov	r9, r2
   253f0:	d826      	bhi.n	25440 <entropy_update+0x60>
   253f2:	b2db      	uxtb	r3, r3
   253f4:	af02      	add	r7, sp, #8
   253f6:	f88d 8004 	strb.w	r8, [sp, #4]
   253fa:	46b0      	mov	r8, r6
   253fc:	f88d 3005 	strb.w	r3, [sp, #5]
   25400:	f858 1b04 	ldr.w	r1, [r8], #4
   25404:	b921      	cbnz	r1, 25410 <entropy_update+0x30>
   25406:	4640      	mov	r0, r8
   25408:	f000 fe84 	bl	26114 <cc_mbedtls_sha256_starts>
   2540c:	4604      	mov	r4, r0
   2540e:	b940      	cbnz	r0, 25422 <entropy_update+0x42>
   25410:	2301      	movs	r3, #1
   25412:	6033      	str	r3, [r6, #0]
   25414:	2202      	movs	r2, #2
   25416:	a901      	add	r1, sp, #4
   25418:	4640      	mov	r0, r8
   2541a:	f000 fe8f 	bl	2613c <cc_mbedtls_sha256_update>
   2541e:	4604      	mov	r4, r0
   25420:	b138      	cbz	r0, 25432 <entropy_update+0x52>
   25422:	4638      	mov	r0, r7
   25424:	2120      	movs	r1, #32
   25426:	f7ff fc8f 	bl	24d48 <mbedtls_platform_zeroize>
   2542a:	4620      	mov	r0, r4
   2542c:	b00b      	add	sp, #44	; 0x2c
   2542e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25432:	462a      	mov	r2, r5
   25434:	4649      	mov	r1, r9
   25436:	4640      	mov	r0, r8
   25438:	f000 fe80 	bl	2613c <cc_mbedtls_sha256_update>
   2543c:	4604      	mov	r4, r0
   2543e:	e7f0      	b.n	25422 <entropy_update+0x42>
   25440:	af02      	add	r7, sp, #8
   25442:	4619      	mov	r1, r3
   25444:	4610      	mov	r0, r2
   25446:	2300      	movs	r3, #0
   25448:	463a      	mov	r2, r7
   2544a:	f000 fffd 	bl	26448 <cc_mbedtls_sha256>
   2544e:	4604      	mov	r4, r0
   25450:	2800      	cmp	r0, #0
   25452:	d1e6      	bne.n	25422 <entropy_update+0x42>
   25454:	2320      	movs	r3, #32
   25456:	46b9      	mov	r9, r7
   25458:	461d      	mov	r5, r3
   2545a:	e7cc      	b.n	253f6 <entropy_update+0x16>

0002545c <entropy_gather_internal.part.0>:
   2545c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2545e:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   25462:	b0a7      	sub	sp, #156	; 0x9c
   25464:	2b00      	cmp	r3, #0
   25466:	bfd8      	it	le
   25468:	ae02      	addle	r6, sp, #8
   2546a:	dd2c      	ble.n	254c6 <entropy_gather_internal.part.0+0x6a>
   2546c:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
   25470:	4605      	mov	r5, r0
   25472:	2300      	movs	r3, #0
   25474:	ae02      	add	r6, sp, #8
   25476:	9301      	str	r3, [sp, #4]
   25478:	f1a4 0701 	sub.w	r7, r4, #1
   2547c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   25480:	f8d5 40fc 	ldr.w	r4, [r5, #252]	; 0xfc
   25484:	ab01      	add	r3, sp, #4
   25486:	2290      	movs	r2, #144	; 0x90
   25488:	4631      	mov	r1, r6
   2548a:	47a0      	blx	r4
   2548c:	fab7 f787 	clz	r7, r7
   25490:	097f      	lsrs	r7, r7, #5
   25492:	4604      	mov	r4, r0
   25494:	b910      	cbnz	r0, 2549c <entropy_gather_internal.part.0+0x40>
   25496:	9b01      	ldr	r3, [sp, #4]
   25498:	b93b      	cbnz	r3, 254aa <entropy_gather_internal.part.0+0x4e>
   2549a:	b1a7      	cbz	r7, 254c6 <entropy_gather_internal.part.0+0x6a>
   2549c:	4630      	mov	r0, r6
   2549e:	2190      	movs	r1, #144	; 0x90
   254a0:	f7ff fc52 	bl	24d48 <mbedtls_platform_zeroize>
   254a4:	4620      	mov	r0, r4
   254a6:	b027      	add	sp, #156	; 0x9c
   254a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   254aa:	4601      	mov	r1, r0
   254ac:	4632      	mov	r2, r6
   254ae:	4628      	mov	r0, r5
   254b0:	f7ff ff96 	bl	253e0 <entropy_update>
   254b4:	b950      	cbnz	r0, 254cc <entropy_gather_internal.part.0+0x70>
   254b6:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   254ba:	9a01      	ldr	r2, [sp, #4]
   254bc:	4413      	add	r3, r2
   254be:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   254c2:	2f00      	cmp	r7, #0
   254c4:	d1ea      	bne.n	2549c <entropy_gather_internal.part.0+0x40>
   254c6:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   254ca:	e7e7      	b.n	2549c <entropy_gather_internal.part.0+0x40>
   254cc:	4604      	mov	r4, r0
   254ce:	4620      	mov	r0, r4
   254d0:	b027      	add	sp, #156	; 0x9c
   254d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000254d4 <cc_mbedtls_entropy_init>:
   254d4:	b570      	push	{r4, r5, r6, lr}
   254d6:	2500      	movs	r5, #0
   254d8:	4604      	mov	r4, r0
   254da:	f504 7688 	add.w	r6, r4, #272	; 0x110
   254de:	2214      	movs	r2, #20
   254e0:	4629      	mov	r1, r5
   254e2:	f8c0 50f8 	str.w	r5, [r0, #248]	; 0xf8
   254e6:	30fc      	adds	r0, #252	; 0xfc
   254e8:	f003 fd29 	bl	28f3e <memset>
   254ec:	2208      	movs	r2, #8
   254ee:	4629      	mov	r1, r5
   254f0:	4630      	mov	r0, r6
   254f2:	f003 fd24 	bl	28f3e <memset>
   254f6:	4b15      	ldr	r3, [pc, #84]	; (2554c <cc_mbedtls_entropy_init+0x78>)
   254f8:	4630      	mov	r0, r6
   254fa:	681b      	ldr	r3, [r3, #0]
   254fc:	4798      	blx	r3
   254fe:	4620      	mov	r0, r4
   25500:	f840 5b04 	str.w	r5, [r0], #4
   25504:	f000 fdec 	bl	260e0 <cc_mbedtls_sha256_init>
   25508:	4b11      	ldr	r3, [pc, #68]	; (25550 <cc_mbedtls_entropy_init+0x7c>)
   2550a:	4630      	mov	r0, r6
   2550c:	681b      	ldr	r3, [r3, #0]
   2550e:	4798      	blx	r3
   25510:	b9d8      	cbnz	r0, 2554a <cc_mbedtls_entropy_init+0x76>
   25512:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   25516:	42ab      	cmp	r3, r5
   25518:	dc11      	bgt.n	2553e <cc_mbedtls_entropy_init+0x6a>
   2551a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   2551e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   25522:	2120      	movs	r1, #32
   25524:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
   25528:	2101      	movs	r1, #1
   2552a:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
   2552e:	3301      	adds	r3, #1
   25530:	4908      	ldr	r1, [pc, #32]	; (25554 <cc_mbedtls_entropy_init+0x80>)
   25532:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
   25536:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
   2553a:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
   2553e:	4b06      	ldr	r3, [pc, #24]	; (25558 <cc_mbedtls_entropy_init+0x84>)
   25540:	4630      	mov	r0, r6
   25542:	681b      	ldr	r3, [r3, #0]
   25544:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   25548:	4718      	bx	r3
   2554a:	bd70      	pop	{r4, r5, r6, pc}
   2554c:	200008a4 	.word	0x200008a4
   25550:	200008a0 	.word	0x200008a0
   25554:	00025f31 	.word	0x00025f31
   25558:	2000089c 	.word	0x2000089c

0002555c <cc_mbedtls_entropy_func>:
   2555c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25560:	2a20      	cmp	r2, #32
   25562:	b088      	sub	sp, #32
   25564:	d879      	bhi.n	2565a <cc_mbedtls_entropy_func+0xfe>
   25566:	4b3e      	ldr	r3, [pc, #248]	; (25660 <cc_mbedtls_entropy_func+0x104>)
   25568:	f500 7988 	add.w	r9, r0, #272	; 0x110
   2556c:	681b      	ldr	r3, [r3, #0]
   2556e:	4604      	mov	r4, r0
   25570:	4648      	mov	r0, r9
   25572:	4617      	mov	r7, r2
   25574:	4688      	mov	r8, r1
   25576:	4798      	blx	r3
   25578:	4605      	mov	r5, r0
   2557a:	b9f8      	cbnz	r0, 255bc <cc_mbedtls_entropy_func+0x60>
   2557c:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   25580:	f240 1601 	movw	r6, #257	; 0x101
   25584:	2b00      	cmp	r3, #0
   25586:	d064      	beq.n	25652 <cc_mbedtls_entropy_func+0xf6>
   25588:	4620      	mov	r0, r4
   2558a:	f7ff ff67 	bl	2545c <entropy_gather_internal.part.0>
   2558e:	4605      	mov	r5, r0
   25590:	b938      	cbnz	r0, 255a2 <cc_mbedtls_entropy_func+0x46>
   25592:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   25596:	2b00      	cmp	r3, #0
   25598:	dc14      	bgt.n	255c4 <cc_mbedtls_entropy_func+0x68>
   2559a:	3e01      	subs	r6, #1
   2559c:	d1f2      	bne.n	25584 <cc_mbedtls_entropy_func+0x28>
   2559e:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   255a2:	466e      	mov	r6, sp
   255a4:	2120      	movs	r1, #32
   255a6:	4630      	mov	r0, r6
   255a8:	f7ff fbce 	bl	24d48 <mbedtls_platform_zeroize>
   255ac:	4b2d      	ldr	r3, [pc, #180]	; (25664 <cc_mbedtls_entropy_func+0x108>)
   255ae:	4648      	mov	r0, r9
   255b0:	681b      	ldr	r3, [r3, #0]
   255b2:	4798      	blx	r3
   255b4:	2800      	cmp	r0, #0
   255b6:	bf18      	it	ne
   255b8:	f06f 051d 	mvnne.w	r5, #29
   255bc:	4628      	mov	r0, r5
   255be:	b008      	add	sp, #32
   255c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   255c4:	e9d4 3241 	ldrd	r3, r2, [r4, #260]	; 0x104
   255c8:	4293      	cmp	r3, r2
   255ca:	d303      	bcc.n	255d4 <cc_mbedtls_entropy_func+0x78>
   255cc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   255d0:	2a01      	cmp	r2, #1
   255d2:	d002      	beq.n	255da <cc_mbedtls_entropy_func+0x7e>
   255d4:	3e01      	subs	r6, #1
   255d6:	d1d7      	bne.n	25588 <cc_mbedtls_entropy_func+0x2c>
   255d8:	e7e1      	b.n	2559e <cc_mbedtls_entropy_func+0x42>
   255da:	2b1f      	cmp	r3, #31
   255dc:	d9fa      	bls.n	255d4 <cc_mbedtls_entropy_func+0x78>
   255de:	466e      	mov	r6, sp
   255e0:	4601      	mov	r1, r0
   255e2:	2220      	movs	r2, #32
   255e4:	4630      	mov	r0, r6
   255e6:	f104 0a04 	add.w	sl, r4, #4
   255ea:	f003 fca8 	bl	28f3e <memset>
   255ee:	4631      	mov	r1, r6
   255f0:	4650      	mov	r0, sl
   255f2:	f000 fdcd 	bl	26190 <cc_mbedtls_sha256_finish>
   255f6:	4605      	mov	r5, r0
   255f8:	2800      	cmp	r0, #0
   255fa:	d1d3      	bne.n	255a4 <cc_mbedtls_entropy_func+0x48>
   255fc:	4650      	mov	r0, sl
   255fe:	f000 fd83 	bl	26108 <cc_mbedtls_sha256_free>
   25602:	4650      	mov	r0, sl
   25604:	f000 fd6c 	bl	260e0 <cc_mbedtls_sha256_init>
   25608:	4629      	mov	r1, r5
   2560a:	4650      	mov	r0, sl
   2560c:	f000 fd82 	bl	26114 <cc_mbedtls_sha256_starts>
   25610:	4605      	mov	r5, r0
   25612:	2800      	cmp	r0, #0
   25614:	d1c6      	bne.n	255a4 <cc_mbedtls_entropy_func+0x48>
   25616:	4650      	mov	r0, sl
   25618:	2220      	movs	r2, #32
   2561a:	4631      	mov	r1, r6
   2561c:	f000 fd8e 	bl	2613c <cc_mbedtls_sha256_update>
   25620:	4605      	mov	r5, r0
   25622:	2800      	cmp	r0, #0
   25624:	d1be      	bne.n	255a4 <cc_mbedtls_entropy_func+0x48>
   25626:	4603      	mov	r3, r0
   25628:	4632      	mov	r2, r6
   2562a:	2120      	movs	r1, #32
   2562c:	4630      	mov	r0, r6
   2562e:	f000 ff0b 	bl	26448 <cc_mbedtls_sha256>
   25632:	4605      	mov	r5, r0
   25634:	2800      	cmp	r0, #0
   25636:	d1b5      	bne.n	255a4 <cc_mbedtls_entropy_func+0x48>
   25638:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   2563c:	2b00      	cmp	r3, #0
   2563e:	bfc4      	itt	gt
   25640:	2300      	movgt	r3, #0
   25642:	f8c4 3104 	strgt.w	r3, [r4, #260]	; 0x104
   25646:	463a      	mov	r2, r7
   25648:	4640      	mov	r0, r8
   2564a:	4631      	mov	r1, r6
   2564c:	f003 fc6c 	bl	28f28 <memcpy>
   25650:	e7a8      	b.n	255a4 <cc_mbedtls_entropy_func+0x48>
   25652:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   25656:	466e      	mov	r6, sp
   25658:	e7a4      	b.n	255a4 <cc_mbedtls_entropy_func+0x48>
   2565a:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   2565e:	e7ad      	b.n	255bc <cc_mbedtls_entropy_func+0x60>
   25660:	200008a0 	.word	0x200008a0
   25664:	2000089c 	.word	0x2000089c

00025668 <RndStartupTest.constprop.0>:
   25668:	b530      	push	{r4, r5, lr}
   2566a:	b08d      	sub	sp, #52	; 0x34
   2566c:	2100      	movs	r1, #0
   2566e:	2228      	movs	r2, #40	; 0x28
   25670:	a802      	add	r0, sp, #8
   25672:	9101      	str	r1, [sp, #4]
   25674:	f003 fc63 	bl	28f3e <memset>
   25678:	a802      	add	r0, sp, #8
   2567a:	f000 ff0d 	bl	26498 <RNG_PLAT_SetUserRngParameters>
   2567e:	4604      	mov	r4, r0
   25680:	b110      	cbz	r0, 25688 <RndStartupTest.constprop.0+0x20>
   25682:	4620      	mov	r0, r4
   25684:	b00d      	add	sp, #52	; 0x34
   25686:	bd30      	pop	{r4, r5, pc}
   25688:	4d17      	ldr	r5, [pc, #92]	; (256e8 <RndStartupTest.constprop.0+0x80>)
   2568a:	f04f 31ff 	mov.w	r1, #4294967295
   2568e:	6828      	ldr	r0, [r5, #0]
   25690:	f000 f944 	bl	2591c <CC_PalMutexLock>
   25694:	4604      	mov	r4, r0
   25696:	b120      	cbz	r0, 256a2 <RndStartupTest.constprop.0+0x3a>
   25698:	4814      	ldr	r0, [pc, #80]	; (256ec <RndStartupTest.constprop.0+0x84>)
   2569a:	f7ff fa33 	bl	24b04 <CC_PalAbort>
   2569e:	2c01      	cmp	r4, #1
   256a0:	d018      	beq.n	256d4 <RndStartupTest.constprop.0+0x6c>
   256a2:	2000      	movs	r0, #0
   256a4:	f000 f96a 	bl	2597c <CC_PalPowerSaveModeSelect>
   256a8:	b9d0      	cbnz	r0, 256e0 <RndStartupTest.constprop.0+0x78>
   256aa:	4a11      	ldr	r2, [pc, #68]	; (256f0 <RndStartupTest.constprop.0+0x88>)
   256ac:	a902      	add	r1, sp, #8
   256ae:	a801      	add	r0, sp, #4
   256b0:	f000 fc30 	bl	25f14 <LLF_RND_RunTrngStartupTest>
   256b4:	4604      	mov	r4, r0
   256b6:	2001      	movs	r0, #1
   256b8:	f000 f960 	bl	2597c <CC_PalPowerSaveModeSelect>
   256bc:	b960      	cbnz	r0, 256d8 <RndStartupTest.constprop.0+0x70>
   256be:	6828      	ldr	r0, [r5, #0]
   256c0:	f000 f934 	bl	2592c <CC_PalMutexUnlock>
   256c4:	2800      	cmp	r0, #0
   256c6:	d0dc      	beq.n	25682 <RndStartupTest.constprop.0+0x1a>
   256c8:	480a      	ldr	r0, [pc, #40]	; (256f4 <RndStartupTest.constprop.0+0x8c>)
   256ca:	f7ff fa1b 	bl	24b04 <CC_PalAbort>
   256ce:	4620      	mov	r0, r4
   256d0:	b00d      	add	sp, #52	; 0x34
   256d2:	bd30      	pop	{r4, r5, pc}
   256d4:	2405      	movs	r4, #5
   256d6:	e7f2      	b.n	256be <RndStartupTest.constprop.0+0x56>
   256d8:	4807      	ldr	r0, [pc, #28]	; (256f8 <RndStartupTest.constprop.0+0x90>)
   256da:	f7ff fa13 	bl	24b04 <CC_PalAbort>
   256de:	e7ee      	b.n	256be <RndStartupTest.constprop.0+0x56>
   256e0:	4806      	ldr	r0, [pc, #24]	; (256fc <RndStartupTest.constprop.0+0x94>)
   256e2:	f7ff fa0f 	bl	24b04 <CC_PalAbort>
   256e6:	e7e0      	b.n	256aa <RndStartupTest.constprop.0+0x42>
   256e8:	20000888 	.word	0x20000888
   256ec:	0002d694 	.word	0x0002d694
   256f0:	20003f48 	.word	0x20003f48
   256f4:	0002d6ec 	.word	0x0002d6ec
   256f8:	0002d6cc 	.word	0x0002d6cc
   256fc:	0002d6ac 	.word	0x0002d6ac

00025700 <CC_LibInit>:
   25700:	b530      	push	{r4, r5, lr}
   25702:	b083      	sub	sp, #12
   25704:	f000 f85c 	bl	257c0 <CC_HalInit>
   25708:	b128      	cbz	r0, 25716 <CC_LibInit+0x16>
   2570a:	f000 f8ab 	bl	25864 <CC_PalTerminate>
   2570e:	2403      	movs	r4, #3
   25710:	4620      	mov	r0, r4
   25712:	b003      	add	sp, #12
   25714:	bd30      	pop	{r4, r5, pc}
   25716:	f000 f877 	bl	25808 <CC_PalInit>
   2571a:	b9d8      	cbnz	r0, 25754 <CC_LibInit+0x54>
   2571c:	f000 f92e 	bl	2597c <CC_PalPowerSaveModeSelect>
   25720:	b9e0      	cbnz	r0, 2575c <CC_LibInit+0x5c>
   25722:	4c22      	ldr	r4, [pc, #136]	; (257ac <CC_LibInit+0xac>)
   25724:	f8d4 3928 	ldr.w	r3, [r4, #2344]	; 0x928
   25728:	0e1b      	lsrs	r3, r3, #24
   2572a:	2bf0      	cmp	r3, #240	; 0xf0
   2572c:	d10a      	bne.n	25744 <CC_LibInit+0x44>
   2572e:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
   25732:	4b1f      	ldr	r3, [pc, #124]	; (257b0 <CC_LibInit+0xb0>)
   25734:	429a      	cmp	r2, r3
   25736:	d031      	beq.n	2579c <CC_LibInit+0x9c>
   25738:	f000 f844 	bl	257c4 <CC_HalTerminate>
   2573c:	2407      	movs	r4, #7
   2573e:	f000 f891 	bl	25864 <CC_PalTerminate>
   25742:	e7e5      	b.n	25710 <CC_LibInit+0x10>
   25744:	f000 f83e 	bl	257c4 <CC_HalTerminate>
   25748:	f000 f88c 	bl	25864 <CC_PalTerminate>
   2574c:	2406      	movs	r4, #6
   2574e:	4620      	mov	r0, r4
   25750:	b003      	add	sp, #12
   25752:	bd30      	pop	{r4, r5, pc}
   25754:	2404      	movs	r4, #4
   25756:	4620      	mov	r0, r4
   25758:	b003      	add	sp, #12
   2575a:	bd30      	pop	{r4, r5, pc}
   2575c:	f000 f832 	bl	257c4 <CC_HalTerminate>
   25760:	f000 f880 	bl	25864 <CC_PalTerminate>
   25764:	f7ff ff80 	bl	25668 <RndStartupTest.constprop.0>
   25768:	4604      	mov	r4, r0
   2576a:	b998      	cbnz	r0, 25794 <CC_LibInit+0x94>
   2576c:	4d11      	ldr	r5, [pc, #68]	; (257b4 <CC_LibInit+0xb4>)
   2576e:	682b      	ldr	r3, [r5, #0]
   25770:	2b00      	cmp	r3, #0
   25772:	d1cd      	bne.n	25710 <CC_LibInit+0x10>
   25774:	4602      	mov	r2, r0
   25776:	4601      	mov	r1, r0
   25778:	f7ff f9e6 	bl	24b48 <nrf_cc3xx_platform_ctr_drbg_init>
   2577c:	b950      	cbnz	r0, 25794 <CC_LibInit+0x94>
   2577e:	490e      	ldr	r1, [pc, #56]	; (257b8 <CC_LibInit+0xb8>)
   25780:	ab01      	add	r3, sp, #4
   25782:	2268      	movs	r2, #104	; 0x68
   25784:	f7ff fa10 	bl	24ba8 <nrf_cc3xx_platform_ctr_drbg_get>
   25788:	b920      	cbnz	r0, 25794 <CC_LibInit+0x94>
   2578a:	4b0c      	ldr	r3, [pc, #48]	; (257bc <CC_LibInit+0xbc>)
   2578c:	602b      	str	r3, [r5, #0]
   2578e:	4620      	mov	r0, r4
   25790:	b003      	add	sp, #12
   25792:	bd30      	pop	{r4, r5, pc}
   25794:	2405      	movs	r4, #5
   25796:	4620      	mov	r0, r4
   25798:	b003      	add	sp, #12
   2579a:	bd30      	pop	{r4, r5, pc}
   2579c:	2001      	movs	r0, #1
   2579e:	f000 f8ed 	bl	2597c <CC_PalPowerSaveModeSelect>
   257a2:	2800      	cmp	r0, #0
   257a4:	d1da      	bne.n	2575c <CC_LibInit+0x5c>
   257a6:	f8c4 0a0c 	str.w	r0, [r4, #2572]	; 0xa0c
   257aa:	e7db      	b.n	25764 <CC_LibInit+0x64>
   257ac:	5002b000 	.word	0x5002b000
   257b0:	20e00000 	.word	0x20e00000
   257b4:	20004168 	.word	0x20004168
   257b8:	2000416c 	.word	0x2000416c
   257bc:	5a5aea5a 	.word	0x5a5aea5a

000257c0 <CC_HalInit>:
   257c0:	2000      	movs	r0, #0
   257c2:	4770      	bx	lr

000257c4 <CC_HalTerminate>:
   257c4:	2000      	movs	r0, #0
   257c6:	4770      	bx	lr

000257c8 <CC_HalClearInterruptBit>:
   257c8:	0543      	lsls	r3, r0, #21
   257ca:	d504      	bpl.n	257d6 <CC_HalClearInterruptBit+0xe>
   257cc:	4b04      	ldr	r3, [pc, #16]	; (257e0 <CC_HalClearInterruptBit+0x18>)
   257ce:	f04f 32ff 	mov.w	r2, #4294967295
   257d2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   257d6:	4b02      	ldr	r3, [pc, #8]	; (257e0 <CC_HalClearInterruptBit+0x18>)
   257d8:	f8c3 0a08 	str.w	r0, [r3, #2568]	; 0xa08
   257dc:	4770      	bx	lr
   257de:	bf00      	nop
   257e0:	5002b000 	.word	0x5002b000

000257e4 <CC_HalMaskInterrupt>:
   257e4:	4b01      	ldr	r3, [pc, #4]	; (257ec <CC_HalMaskInterrupt+0x8>)
   257e6:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
   257ea:	4770      	bx	lr
   257ec:	5002b000 	.word	0x5002b000

000257f0 <CC_HalWaitInterrupt>:
   257f0:	b108      	cbz	r0, 257f6 <CC_HalWaitInterrupt+0x6>
   257f2:	f000 b86b 	b.w	258cc <CC_PalWaitInterrupt>
   257f6:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   257fa:	4770      	bx	lr

000257fc <CC_HalWaitInterruptRND>:
   257fc:	b108      	cbz	r0, 25802 <CC_HalWaitInterruptRND+0x6>
   257fe:	f000 b84f 	b.w	258a0 <CC_PalWaitInterruptRND>
   25802:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   25806:	4770      	bx	lr

00025808 <CC_PalInit>:
   25808:	b510      	push	{r4, lr}
   2580a:	4811      	ldr	r0, [pc, #68]	; (25850 <CC_PalInit+0x48>)
   2580c:	f000 f872 	bl	258f4 <CC_PalMutexCreate>
   25810:	b100      	cbz	r0, 25814 <CC_PalInit+0xc>
   25812:	bd10      	pop	{r4, pc}
   25814:	480f      	ldr	r0, [pc, #60]	; (25854 <CC_PalInit+0x4c>)
   25816:	f000 f86d 	bl	258f4 <CC_PalMutexCreate>
   2581a:	2800      	cmp	r0, #0
   2581c:	d1f9      	bne.n	25812 <CC_PalInit+0xa>
   2581e:	4c0e      	ldr	r4, [pc, #56]	; (25858 <CC_PalInit+0x50>)
   25820:	4620      	mov	r0, r4
   25822:	f000 f867 	bl	258f4 <CC_PalMutexCreate>
   25826:	2800      	cmp	r0, #0
   25828:	d1f3      	bne.n	25812 <CC_PalInit+0xa>
   2582a:	4b0c      	ldr	r3, [pc, #48]	; (2585c <CC_PalInit+0x54>)
   2582c:	480c      	ldr	r0, [pc, #48]	; (25860 <CC_PalInit+0x58>)
   2582e:	601c      	str	r4, [r3, #0]
   25830:	f000 f860 	bl	258f4 <CC_PalMutexCreate>
   25834:	4601      	mov	r1, r0
   25836:	2800      	cmp	r0, #0
   25838:	d1eb      	bne.n	25812 <CC_PalInit+0xa>
   2583a:	f000 f82d 	bl	25898 <CC_PalDmaInit>
   2583e:	4604      	mov	r4, r0
   25840:	b108      	cbz	r0, 25846 <CC_PalInit+0x3e>
   25842:	4620      	mov	r0, r4
   25844:	bd10      	pop	{r4, pc}
   25846:	f000 f87b 	bl	25940 <CC_PalPowerSaveModeInit>
   2584a:	4620      	mov	r0, r4
   2584c:	e7fa      	b.n	25844 <CC_PalInit+0x3c>
   2584e:	bf00      	nop
   25850:	20000898 	.word	0x20000898
   25854:	20000894 	.word	0x20000894
   25858:	20000890 	.word	0x20000890
   2585c:	20000888 	.word	0x20000888
   25860:	2000088c 	.word	0x2000088c

00025864 <CC_PalTerminate>:
   25864:	b508      	push	{r3, lr}
   25866:	4808      	ldr	r0, [pc, #32]	; (25888 <CC_PalTerminate+0x24>)
   25868:	f000 f84e 	bl	25908 <CC_PalMutexDestroy>
   2586c:	4807      	ldr	r0, [pc, #28]	; (2588c <CC_PalTerminate+0x28>)
   2586e:	f000 f84b 	bl	25908 <CC_PalMutexDestroy>
   25872:	4807      	ldr	r0, [pc, #28]	; (25890 <CC_PalTerminate+0x2c>)
   25874:	f000 f848 	bl	25908 <CC_PalMutexDestroy>
   25878:	4806      	ldr	r0, [pc, #24]	; (25894 <CC_PalTerminate+0x30>)
   2587a:	f000 f845 	bl	25908 <CC_PalMutexDestroy>
   2587e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   25882:	f000 b80b 	b.w	2589c <CC_PalDmaTerminate>
   25886:	bf00      	nop
   25888:	20000898 	.word	0x20000898
   2588c:	20000894 	.word	0x20000894
   25890:	20000890 	.word	0x20000890
   25894:	2000088c 	.word	0x2000088c

00025898 <CC_PalDmaInit>:
   25898:	2000      	movs	r0, #0
   2589a:	4770      	bx	lr

0002589c <CC_PalDmaTerminate>:
   2589c:	4770      	bx	lr
   2589e:	bf00      	nop

000258a0 <CC_PalWaitInterruptRND>:
   258a0:	b410      	push	{r4}
   258a2:	4c09      	ldr	r4, [pc, #36]	; (258c8 <CC_PalWaitInterruptRND+0x28>)
   258a4:	4602      	mov	r2, r0
   258a6:	f8d4 3a00 	ldr.w	r3, [r4, #2560]	; 0xa00
   258aa:	4213      	tst	r3, r2
   258ac:	d0fb      	beq.n	258a6 <CC_PalWaitInterruptRND+0x6>
   258ae:	b121      	cbz	r1, 258ba <CC_PalWaitInterruptRND+0x1a>
   258b0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   258b4:	600b      	str	r3, [r1, #0]
   258b6:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   258ba:	4b03      	ldr	r3, [pc, #12]	; (258c8 <CC_PalWaitInterruptRND+0x28>)
   258bc:	f8c3 2a08 	str.w	r2, [r3, #2568]	; 0xa08
   258c0:	2000      	movs	r0, #0
   258c2:	bc10      	pop	{r4}
   258c4:	4770      	bx	lr
   258c6:	bf00      	nop
   258c8:	5002b000 	.word	0x5002b000

000258cc <CC_PalWaitInterrupt>:
   258cc:	4a04      	ldr	r2, [pc, #16]	; (258e0 <CC_PalWaitInterrupt+0x14>)
   258ce:	f8d2 3a00 	ldr.w	r3, [r2, #2560]	; 0xa00
   258d2:	4218      	tst	r0, r3
   258d4:	d0fb      	beq.n	258ce <CC_PalWaitInterrupt+0x2>
   258d6:	f8c2 0a08 	str.w	r0, [r2, #2568]	; 0xa08
   258da:	2000      	movs	r0, #0
   258dc:	4770      	bx	lr
   258de:	bf00      	nop
   258e0:	5002b000 	.word	0x5002b000

000258e4 <CC_PalMemCopyPlat>:
   258e4:	f003 bb09 	b.w	28efa <memmove>

000258e8 <CC_PalMemSetPlat>:
   258e8:	f003 bb29 	b.w	28f3e <memset>

000258ec <CC_PalMemSetZeroPlat>:
   258ec:	460a      	mov	r2, r1
   258ee:	2100      	movs	r1, #0
   258f0:	f003 bb25 	b.w	28f3e <memset>

000258f4 <CC_PalMutexCreate>:
   258f4:	b508      	push	{r3, lr}
   258f6:	4b03      	ldr	r3, [pc, #12]	; (25904 <CC_PalMutexCreate+0x10>)
   258f8:	6802      	ldr	r2, [r0, #0]
   258fa:	681b      	ldr	r3, [r3, #0]
   258fc:	6810      	ldr	r0, [r2, #0]
   258fe:	4798      	blx	r3
   25900:	2000      	movs	r0, #0
   25902:	bd08      	pop	{r3, pc}
   25904:	20000854 	.word	0x20000854

00025908 <CC_PalMutexDestroy>:
   25908:	b508      	push	{r3, lr}
   2590a:	4b03      	ldr	r3, [pc, #12]	; (25918 <CC_PalMutexDestroy+0x10>)
   2590c:	6802      	ldr	r2, [r0, #0]
   2590e:	685b      	ldr	r3, [r3, #4]
   25910:	6810      	ldr	r0, [r2, #0]
   25912:	4798      	blx	r3
   25914:	2000      	movs	r0, #0
   25916:	bd08      	pop	{r3, pc}
   25918:	20000854 	.word	0x20000854

0002591c <CC_PalMutexLock>:
   2591c:	4b02      	ldr	r3, [pc, #8]	; (25928 <CC_PalMutexLock+0xc>)
   2591e:	6802      	ldr	r2, [r0, #0]
   25920:	689b      	ldr	r3, [r3, #8]
   25922:	6810      	ldr	r0, [r2, #0]
   25924:	4718      	bx	r3
   25926:	bf00      	nop
   25928:	20000854 	.word	0x20000854

0002592c <CC_PalMutexUnlock>:
   2592c:	b508      	push	{r3, lr}
   2592e:	4b03      	ldr	r3, [pc, #12]	; (2593c <CC_PalMutexUnlock+0x10>)
   25930:	6802      	ldr	r2, [r0, #0]
   25932:	68db      	ldr	r3, [r3, #12]
   25934:	6810      	ldr	r0, [r2, #0]
   25936:	4798      	blx	r3
   25938:	2000      	movs	r0, #0
   2593a:	bd08      	pop	{r3, pc}
   2593c:	20000854 	.word	0x20000854

00025940 <CC_PalPowerSaveModeInit>:
   25940:	b570      	push	{r4, r5, r6, lr}
   25942:	4c09      	ldr	r4, [pc, #36]	; (25968 <CC_PalPowerSaveModeInit+0x28>)
   25944:	4d09      	ldr	r5, [pc, #36]	; (2596c <CC_PalPowerSaveModeInit+0x2c>)
   25946:	6920      	ldr	r0, [r4, #16]
   25948:	68ab      	ldr	r3, [r5, #8]
   2594a:	4798      	blx	r3
   2594c:	b118      	cbz	r0, 25956 <CC_PalPowerSaveModeInit+0x16>
   2594e:	4b08      	ldr	r3, [pc, #32]	; (25970 <CC_PalPowerSaveModeInit+0x30>)
   25950:	4808      	ldr	r0, [pc, #32]	; (25974 <CC_PalPowerSaveModeInit+0x34>)
   25952:	685b      	ldr	r3, [r3, #4]
   25954:	4798      	blx	r3
   25956:	4a08      	ldr	r2, [pc, #32]	; (25978 <CC_PalPowerSaveModeInit+0x38>)
   25958:	68eb      	ldr	r3, [r5, #12]
   2595a:	6920      	ldr	r0, [r4, #16]
   2595c:	2100      	movs	r1, #0
   2595e:	6011      	str	r1, [r2, #0]
   25960:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   25964:	4718      	bx	r3
   25966:	bf00      	nop
   25968:	20000840 	.word	0x20000840
   2596c:	20000854 	.word	0x20000854
   25970:	20000838 	.word	0x20000838
   25974:	0002d704 	.word	0x0002d704
   25978:	200041d4 	.word	0x200041d4

0002597c <CC_PalPowerSaveModeSelect>:
   2597c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2597e:	4d1a      	ldr	r5, [pc, #104]	; (259e8 <CC_PalPowerSaveModeSelect+0x6c>)
   25980:	4e1a      	ldr	r6, [pc, #104]	; (259ec <CC_PalPowerSaveModeSelect+0x70>)
   25982:	4604      	mov	r4, r0
   25984:	68b2      	ldr	r2, [r6, #8]
   25986:	6928      	ldr	r0, [r5, #16]
   25988:	4790      	blx	r2
   2598a:	b9e8      	cbnz	r0, 259c8 <CC_PalPowerSaveModeSelect+0x4c>
   2598c:	4f18      	ldr	r7, [pc, #96]	; (259f0 <CC_PalPowerSaveModeSelect+0x74>)
   2598e:	683b      	ldr	r3, [r7, #0]
   25990:	b14c      	cbz	r4, 259a6 <CC_PalPowerSaveModeSelect+0x2a>
   25992:	b1a3      	cbz	r3, 259be <CC_PalPowerSaveModeSelect+0x42>
   25994:	2b01      	cmp	r3, #1
   25996:	d019      	beq.n	259cc <CC_PalPowerSaveModeSelect+0x50>
   25998:	3b01      	subs	r3, #1
   2599a:	603b      	str	r3, [r7, #0]
   2599c:	6928      	ldr	r0, [r5, #16]
   2599e:	68f3      	ldr	r3, [r6, #12]
   259a0:	4798      	blx	r3
   259a2:	2000      	movs	r0, #0
   259a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   259a6:	b943      	cbnz	r3, 259ba <CC_PalPowerSaveModeSelect+0x3e>
   259a8:	4a12      	ldr	r2, [pc, #72]	; (259f4 <CC_PalPowerSaveModeSelect+0x78>)
   259aa:	2101      	movs	r1, #1
   259ac:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   259b0:	4911      	ldr	r1, [pc, #68]	; (259f8 <CC_PalPowerSaveModeSelect+0x7c>)
   259b2:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
   259b6:	2a00      	cmp	r2, #0
   259b8:	d1fb      	bne.n	259b2 <CC_PalPowerSaveModeSelect+0x36>
   259ba:	3301      	adds	r3, #1
   259bc:	603b      	str	r3, [r7, #0]
   259be:	68f3      	ldr	r3, [r6, #12]
   259c0:	6928      	ldr	r0, [r5, #16]
   259c2:	4798      	blx	r3
   259c4:	2000      	movs	r0, #0
   259c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   259c8:	480c      	ldr	r0, [pc, #48]	; (259fc <CC_PalPowerSaveModeSelect+0x80>)
   259ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   259cc:	4a0a      	ldr	r2, [pc, #40]	; (259f8 <CC_PalPowerSaveModeSelect+0x7c>)
   259ce:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   259d2:	2b00      	cmp	r3, #0
   259d4:	d1fb      	bne.n	259ce <CC_PalPowerSaveModeSelect+0x52>
   259d6:	4a07      	ldr	r2, [pc, #28]	; (259f4 <CC_PalPowerSaveModeSelect+0x78>)
   259d8:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   259dc:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   259e0:	f7ff ff00 	bl	257e4 <CC_HalMaskInterrupt>
   259e4:	683b      	ldr	r3, [r7, #0]
   259e6:	e7d7      	b.n	25998 <CC_PalPowerSaveModeSelect+0x1c>
   259e8:	20000840 	.word	0x20000840
   259ec:	20000854 	.word	0x20000854
   259f0:	200041d4 	.word	0x200041d4
   259f4:	5002a000 	.word	0x5002a000
   259f8:	5002b000 	.word	0x5002b000
   259fc:	ffff8fe9 	.word	0xffff8fe9

00025a00 <mutex_init>:
   25a00:	4b01      	ldr	r3, [pc, #4]	; (25a08 <mutex_init+0x8>)
   25a02:	681b      	ldr	r3, [r3, #0]
   25a04:	4718      	bx	r3
   25a06:	bf00      	nop
   25a08:	20000854 	.word	0x20000854

00025a0c <mutex_lock>:
   25a0c:	4b01      	ldr	r3, [pc, #4]	; (25a14 <mutex_lock+0x8>)
   25a0e:	689b      	ldr	r3, [r3, #8]
   25a10:	4718      	bx	r3
   25a12:	bf00      	nop
   25a14:	20000854 	.word	0x20000854

00025a18 <mutex_unlock>:
   25a18:	4b01      	ldr	r3, [pc, #4]	; (25a20 <mutex_unlock+0x8>)
   25a1a:	68db      	ldr	r3, [r3, #12]
   25a1c:	4718      	bx	r3
   25a1e:	bf00      	nop
   25a20:	20000854 	.word	0x20000854

00025a24 <startTrngHW>:
   25a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25a28:	2800      	cmp	r0, #0
   25a2a:	d078      	beq.n	25b1e <startTrngHW+0xfa>
   25a2c:	460c      	mov	r4, r1
   25a2e:	2900      	cmp	r1, #0
   25a30:	d075      	beq.n	25b1e <startTrngHW+0xfa>
   25a32:	461d      	mov	r5, r3
   25a34:	2b00      	cmp	r3, #0
   25a36:	d072      	beq.n	25b1e <startTrngHW+0xfa>
   25a38:	4607      	mov	r7, r0
   25a3a:	b11a      	cbz	r2, 25a44 <startTrngHW+0x20>
   25a3c:	2201      	movs	r2, #1
   25a3e:	2300      	movs	r3, #0
   25a40:	602a      	str	r2, [r5, #0]
   25a42:	6003      	str	r3, [r0, #0]
   25a44:	682b      	ldr	r3, [r5, #0]
   25a46:	2b00      	cmp	r3, #0
   25a48:	d064      	beq.n	25b14 <startTrngHW+0xf0>
   25a4a:	4629      	mov	r1, r5
   25a4c:	4620      	mov	r0, r4
   25a4e:	f000 fddb 	bl	26608 <LLF_RND_GetFastestRosc>
   25a52:	4680      	mov	r8, r0
   25a54:	2800      	cmp	r0, #0
   25a56:	d15f      	bne.n	25b18 <startTrngHW+0xf4>
   25a58:	6828      	ldr	r0, [r5, #0]
   25a5a:	4621      	mov	r1, r4
   25a5c:	f000 fdba 	bl	265d4 <LLF_RND_GetRoscSampleCnt>
   25a60:	4680      	mov	r8, r0
   25a62:	2800      	cmp	r0, #0
   25a64:	d158      	bne.n	25b18 <startTrngHW+0xf4>
   25a66:	682b      	ldr	r3, [r5, #0]
   25a68:	2b08      	cmp	r3, #8
   25a6a:	d06c      	beq.n	25b46 <startTrngHW+0x122>
   25a6c:	2b04      	cmp	r3, #4
   25a6e:	d06d      	beq.n	25b4c <startTrngHW+0x128>
   25a70:	f1a3 0902 	sub.w	r9, r3, #2
   25a74:	fab9 f989 	clz	r9, r9
   25a78:	ea4f 1959 	mov.w	r9, r9, lsr #5
   25a7c:	4e35      	ldr	r6, [pc, #212]	; (25b54 <startTrngHW+0x130>)
   25a7e:	2101      	movs	r1, #1
   25a80:	f8c6 11c4 	str.w	r1, [r6, #452]	; 0x1c4
   25a84:	f8c6 1140 	str.w	r1, [r6, #320]	; 0x140
   25a88:	f8c6 11c4 	str.w	r1, [r6, #452]	; 0x1c4
   25a8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   25a8e:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
   25a92:	f8d6 2130 	ldr.w	r2, [r6, #304]	; 0x130
   25a96:	4293      	cmp	r3, r2
   25a98:	d1f6      	bne.n	25a88 <startTrngHW+0x64>
   25a9a:	f04f 0a00 	mov.w	sl, #0
   25a9e:	f04f 30ff 	mov.w	r0, #4294967295
   25aa2:	f8c6 a12c 	str.w	sl, [r6, #300]	; 0x12c
   25aa6:	f7ff fe8f 	bl	257c8 <CC_HalClearInterruptBit>
   25aaa:	f06f 031b 	mvn.w	r3, #27
   25aae:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
   25ab2:	4650      	mov	r0, sl
   25ab4:	f7ff fe96 	bl	257e4 <CC_HalMaskInterrupt>
   25ab8:	f8c6 910c 	str.w	r9, [r6, #268]	; 0x10c
   25abc:	f8d6 0a04 	ldr.w	r0, [r6, #2564]	; 0xa04
   25ac0:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   25ac4:	f7ff fe8e 	bl	257e4 <CC_HalMaskInterrupt>
   25ac8:	230a      	movs	r3, #10
   25aca:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
   25ace:	9b08      	ldr	r3, [sp, #32]
   25ad0:	2b01      	cmp	r3, #1
   25ad2:	d029      	beq.n	25b28 <startTrngHW+0x104>
   25ad4:	6923      	ldr	r3, [r4, #16]
   25ad6:	4a20      	ldr	r2, [pc, #128]	; (25b58 <startTrngHW+0x134>)
   25ad8:	fba2 2303 	umull	r2, r3, r2, r3
   25adc:	091b      	lsrs	r3, r3, #4
   25ade:	6a62      	ldr	r2, [r4, #36]	; 0x24
   25ae0:	fb02 f303 	mul.w	r3, r2, r3
   25ae4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   25ae8:	4a1a      	ldr	r2, [pc, #104]	; (25b54 <startTrngHW+0x130>)
   25aea:	03db      	lsls	r3, r3, #15
   25aec:	099b      	lsrs	r3, r3, #6
   25aee:	f8c2 31d8 	str.w	r3, [r2, #472]	; 0x1d8
   25af2:	2301      	movs	r3, #1
   25af4:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
   25af8:	683b      	ldr	r3, [r7, #0]
   25afa:	682a      	ldr	r2, [r5, #0]
   25afc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   25b00:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   25b04:	603b      	str	r3, [r7, #0]
   25b06:	682a      	ldr	r2, [r5, #0]
   25b08:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   25b0c:	603b      	str	r3, [r7, #0]
   25b0e:	4640      	mov	r0, r8
   25b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25b14:	f8df 8044 	ldr.w	r8, [pc, #68]	; 25b5c <startTrngHW+0x138>
   25b18:	4640      	mov	r0, r8
   25b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25b1e:	f8df 8040 	ldr.w	r8, [pc, #64]	; 25b60 <startTrngHW+0x13c>
   25b22:	4640      	mov	r0, r8
   25b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25b28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   25b2c:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
   25b30:	3201      	adds	r2, #1
   25b32:	d006      	beq.n	25b42 <startTrngHW+0x11e>
   25b34:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   25b38:	4a07      	ldr	r2, [pc, #28]	; (25b58 <startTrngHW+0x134>)
   25b3a:	fba2 2303 	umull	r2, r3, r2, r3
   25b3e:	091b      	lsrs	r3, r3, #4
   25b40:	e7cd      	b.n	25ade <startTrngHW+0xba>
   25b42:	2316      	movs	r3, #22
   25b44:	e7cb      	b.n	25ade <startTrngHW+0xba>
   25b46:	f04f 0903 	mov.w	r9, #3
   25b4a:	e797      	b.n	25a7c <startTrngHW+0x58>
   25b4c:	f04f 0902 	mov.w	r9, #2
   25b50:	e794      	b.n	25a7c <startTrngHW+0x58>
   25b52:	bf00      	nop
   25b54:	5002b000 	.word	0x5002b000
   25b58:	aaaaaaab 	.word	0xaaaaaaab
   25b5c:	00f10c31 	.word	0x00f10c31
   25b60:	00f10c35 	.word	0x00f10c35

00025b64 <LLF_RND_RepetitionCounterTest>:
   25b64:	b350      	cbz	r0, 25bbc <LLF_RND_RepetitionCounterTest+0x58>
   25b66:	1e4b      	subs	r3, r1, #1
   25b68:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
   25b6c:	d226      	bcs.n	25bbc <LLF_RND_RepetitionCounterTest+0x58>
   25b6e:	f04f 0c00 	mov.w	ip, #0
   25b72:	b530      	push	{r4, r5, lr}
   25b74:	00cd      	lsls	r5, r1, #3
   25b76:	46e6      	mov	lr, ip
   25b78:	4664      	mov	r4, ip
   25b7a:	0963      	lsrs	r3, r4, #5
   25b7c:	f004 011f 	and.w	r1, r4, #31
   25b80:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   25b84:	291f      	cmp	r1, #31
   25b86:	fa23 f301 	lsr.w	r3, r3, r1
   25b8a:	d006      	beq.n	25b9a <LLF_RND_RepetitionCounterTest+0x36>
   25b8c:	f003 0301 	and.w	r3, r3, #1
   25b90:	b91c      	cbnz	r4, 25b9a <LLF_RND_RepetitionCounterTest+0x36>
   25b92:	2401      	movs	r4, #1
   25b94:	469e      	mov	lr, r3
   25b96:	46a4      	mov	ip, r4
   25b98:	e7ef      	b.n	25b7a <LLF_RND_RepetitionCounterTest+0x16>
   25b9a:	459e      	cmp	lr, r3
   25b9c:	f104 0401 	add.w	r4, r4, #1
   25ba0:	d006      	beq.n	25bb0 <LLF_RND_RepetitionCounterTest+0x4c>
   25ba2:	469e      	mov	lr, r3
   25ba4:	f04f 0c01 	mov.w	ip, #1
   25ba8:	42ac      	cmp	r4, r5
   25baa:	d1e6      	bne.n	25b7a <LLF_RND_RepetitionCounterTest+0x16>
   25bac:	2000      	movs	r0, #0
   25bae:	bd30      	pop	{r4, r5, pc}
   25bb0:	f10c 0c01 	add.w	ip, ip, #1
   25bb4:	4594      	cmp	ip, r2
   25bb6:	d1f7      	bne.n	25ba8 <LLF_RND_RepetitionCounterTest+0x44>
   25bb8:	4801      	ldr	r0, [pc, #4]	; (25bc0 <LLF_RND_RepetitionCounterTest+0x5c>)
   25bba:	bd30      	pop	{r4, r5, pc}
   25bbc:	4800      	ldr	r0, [pc, #0]	; (25bc0 <LLF_RND_RepetitionCounterTest+0x5c>)
   25bbe:	4770      	bx	lr
   25bc0:	00f10c36 	.word	0x00f10c36

00025bc4 <LLF_RND_AdaptiveProportionTest>:
   25bc4:	b3c8      	cbz	r0, 25c3a <LLF_RND_AdaptiveProportionTest+0x76>
   25bc6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25bca:	1e4c      	subs	r4, r1, #1
   25bcc:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   25bd0:	d21c      	bcs.n	25c0c <LLF_RND_AdaptiveProportionTest+0x48>
   25bd2:	b1db      	cbz	r3, 25c0c <LLF_RND_AdaptiveProportionTest+0x48>
   25bd4:	b1d2      	cbz	r2, 25c0c <LLF_RND_AdaptiveProportionTest+0x48>
   25bd6:	f04f 0e00 	mov.w	lr, #0
   25bda:	00cf      	lsls	r7, r1, #3
   25bdc:	4676      	mov	r6, lr
   25bde:	46f0      	mov	r8, lr
   25be0:	4675      	mov	r5, lr
   25be2:	f103 39ff 	add.w	r9, r3, #4294967295
   25be6:	096c      	lsrs	r4, r5, #5
   25be8:	f005 011f 	and.w	r1, r5, #31
   25bec:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   25bf0:	291f      	cmp	r1, #31
   25bf2:	fa24 fc01 	lsr.w	ip, r4, r1
   25bf6:	d00c      	beq.n	25c12 <LLF_RND_AdaptiveProportionTest+0x4e>
   25bf8:	f00c 0c01 	and.w	ip, ip, #1
   25bfc:	b94d      	cbnz	r5, 25c12 <LLF_RND_AdaptiveProportionTest+0x4e>
   25bfe:	2601      	movs	r6, #1
   25c00:	46e0      	mov	r8, ip
   25c02:	4635      	mov	r5, r6
   25c04:	46b6      	mov	lr, r6
   25c06:	e7ee      	b.n	25be6 <LLF_RND_AdaptiveProportionTest+0x22>
   25c08:	4296      	cmp	r6, r2
   25c0a:	d918      	bls.n	25c3e <LLF_RND_AdaptiveProportionTest+0x7a>
   25c0c:	480d      	ldr	r0, [pc, #52]	; (25c44 <LLF_RND_AdaptiveProportionTest+0x80>)
   25c0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25c12:	4573      	cmp	r3, lr
   25c14:	d00c      	beq.n	25c30 <LLF_RND_AdaptiveProportionTest+0x6c>
   25c16:	45c4      	cmp	ip, r8
   25c18:	bf08      	it	eq
   25c1a:	3601      	addeq	r6, #1
   25c1c:	45f1      	cmp	r9, lr
   25c1e:	d0f3      	beq.n	25c08 <LLF_RND_AdaptiveProportionTest+0x44>
   25c20:	f10e 0e01 	add.w	lr, lr, #1
   25c24:	3501      	adds	r5, #1
   25c26:	42bd      	cmp	r5, r7
   25c28:	d1dd      	bne.n	25be6 <LLF_RND_AdaptiveProportionTest+0x22>
   25c2a:	2000      	movs	r0, #0
   25c2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25c30:	f04f 0e01 	mov.w	lr, #1
   25c34:	46e0      	mov	r8, ip
   25c36:	4676      	mov	r6, lr
   25c38:	e7f4      	b.n	25c24 <LLF_RND_AdaptiveProportionTest+0x60>
   25c3a:	4802      	ldr	r0, [pc, #8]	; (25c44 <LLF_RND_AdaptiveProportionTest+0x80>)
   25c3c:	4770      	bx	lr
   25c3e:	469e      	mov	lr, r3
   25c40:	e7f0      	b.n	25c24 <LLF_RND_AdaptiveProportionTest+0x60>
   25c42:	bf00      	nop
   25c44:	00f10c37 	.word	0x00f10c37

00025c48 <getTrngSource>:
   25c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25c4c:	b091      	sub	sp, #68	; 0x44
   25c4e:	460d      	mov	r5, r1
   25c50:	e9dd 411b 	ldrd	r4, r1, [sp, #108]	; 0x6c
   25c54:	4682      	mov	sl, r0
   25c56:	2900      	cmp	r1, #0
   25c58:	d16e      	bne.n	25d38 <getTrngSource+0xf0>
   25c5a:	6928      	ldr	r0, [r5, #16]
   25c5c:	9006      	str	r0, [sp, #24]
   25c5e:	981a      	ldr	r0, [sp, #104]	; 0x68
   25c60:	601c      	str	r4, [r3, #0]
   25c62:	2300      	movs	r3, #0
   25c64:	6003      	str	r3, [r0, #0]
   25c66:	2a00      	cmp	r2, #0
   25c68:	f000 812e 	beq.w	25ec8 <getTrngSource+0x280>
   25c6c:	4b9c      	ldr	r3, [pc, #624]	; (25ee0 <getTrngSource+0x298>)
   25c6e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   25c70:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   25c74:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   25c78:	429a      	cmp	r2, r3
   25c7a:	d169      	bne.n	25d50 <getTrngSource+0x108>
   25c7c:	290a      	cmp	r1, #10
   25c7e:	d167      	bne.n	25d50 <getTrngSource+0x108>
   25c80:	f89a 3003 	ldrb.w	r3, [sl, #3]
   25c84:	9308      	str	r3, [sp, #32]
   25c86:	f104 0308 	add.w	r3, r4, #8
   25c8a:	9906      	ldr	r1, [sp, #24]
   25c8c:	9307      	str	r3, [sp, #28]
   25c8e:	4b95      	ldr	r3, [pc, #596]	; (25ee4 <getTrngSource+0x29c>)
   25c90:	4c93      	ldr	r4, [pc, #588]	; (25ee0 <getTrngSource+0x298>)
   25c92:	fba3 2301 	umull	r2, r3, r3, r1
   25c96:	089b      	lsrs	r3, r3, #2
   25c98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   25c9c:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
   25ca0:	9303      	str	r3, [sp, #12]
   25ca2:	2304      	movs	r3, #4
   25ca4:	9305      	str	r3, [sp, #20]
   25ca6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   25ca8:	9e06      	ldr	r6, [sp, #24]
   25caa:	601e      	str	r6, [r3, #0]
   25cac:	2e00      	cmp	r6, #0
   25cae:	f000 80e9 	beq.w	25e84 <getTrngSource+0x23c>
   25cb2:	2700      	movs	r7, #0
   25cb4:	f000 fcb8 	bl	26628 <LLF_RND_TurnOffTrng>
   25cb8:	9709      	str	r7, [sp, #36]	; 0x24
   25cba:	f1ba 0f00 	cmp.w	sl, #0
   25cbe:	f000 80d5 	beq.w	25e6c <getTrngSource+0x224>
   25cc2:	f8dd 801c 	ldr.w	r8, [sp, #28]
   25cc6:	f04f 0901 	mov.w	r9, #1
   25cca:	2d00      	cmp	r5, #0
   25ccc:	f000 80ce 	beq.w	25e6c <getTrngSource+0x224>
   25cd0:	9b08      	ldr	r3, [sp, #32]
   25cd2:	2b00      	cmp	r3, #0
   25cd4:	d03e      	beq.n	25d54 <getTrngSource+0x10c>
   25cd6:	a908      	add	r1, sp, #32
   25cd8:	4628      	mov	r0, r5
   25cda:	f000 fc95 	bl	26608 <LLF_RND_GetFastestRosc>
   25cde:	2800      	cmp	r0, #0
   25ce0:	d03a      	beq.n	25d58 <getTrngSource+0x110>
   25ce2:	4b81      	ldr	r3, [pc, #516]	; (25ee8 <getTrngSource+0x2a0>)
   25ce4:	4298      	cmp	r0, r3
   25ce6:	d020      	beq.n	25d2a <getTrngSource+0xe2>
   25ce8:	9b08      	ldr	r3, [sp, #32]
   25cea:	2b08      	cmp	r3, #8
   25cec:	f000 80e4 	beq.w	25eb8 <getTrngSource+0x270>
   25cf0:	005b      	lsls	r3, r3, #1
   25cf2:	2200      	movs	r2, #0
   25cf4:	9308      	str	r3, [sp, #32]
   25cf6:	9200      	str	r2, [sp, #0]
   25cf8:	ab08      	add	r3, sp, #32
   25cfa:	4629      	mov	r1, r5
   25cfc:	4650      	mov	r0, sl
   25cfe:	f7ff fe91 	bl	25a24 <startTrngHW>
   25d02:	4b7a      	ldr	r3, [pc, #488]	; (25eec <getTrngSource+0x2a4>)
   25d04:	4298      	cmp	r0, r3
   25d06:	f000 80d3 	beq.w	25eb0 <getTrngSource+0x268>
   25d0a:	b970      	cbnz	r0, 25d2a <getTrngSource+0xe2>
   25d0c:	f8da 2000 	ldr.w	r2, [sl]
   25d10:	0a13      	lsrs	r3, r2, #8
   25d12:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   25d16:	4313      	orrs	r3, r2
   25d18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   25d1c:	f8ca 3000 	str.w	r3, [sl]
   25d20:	9b05      	ldr	r3, [sp, #20]
   25d22:	3b01      	subs	r3, #1
   25d24:	9305      	str	r3, [sp, #20]
   25d26:	d1be      	bne.n	25ca6 <getTrngSource+0x5e>
   25d28:	2000      	movs	r0, #0
   25d2a:	9003      	str	r0, [sp, #12]
   25d2c:	f000 fc7c 	bl	26628 <LLF_RND_TurnOffTrng>
   25d30:	9803      	ldr	r0, [sp, #12]
   25d32:	b011      	add	sp, #68	; 0x44
   25d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25d38:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   25d3c:	f8d0 6c0c 	ldr.w	r6, [r0, #3084]	; 0xc0c
   25d40:	3601      	adds	r6, #1
   25d42:	bf14      	ite	ne
   25d44:	f8d0 0c0c 	ldrne.w	r0, [r0, #3084]	; 0xc0c
   25d48:	f44f 7004 	moveq.w	r0, #528	; 0x210
   25d4c:	9006      	str	r0, [sp, #24]
   25d4e:	e786      	b.n	25c5e <getTrngSource+0x16>
   25d50:	4867      	ldr	r0, [pc, #412]	; (25ef0 <getTrngSource+0x2a8>)
   25d52:	e7ea      	b.n	25d2a <getTrngSource+0xe2>
   25d54:	4865      	ldr	r0, [pc, #404]	; (25eec <getTrngSource+0x2a4>)
   25d56:	e7c4      	b.n	25ce2 <getTrngSource+0x9a>
   25d58:	9808      	ldr	r0, [sp, #32]
   25d5a:	4629      	mov	r1, r5
   25d5c:	f000 fc3a 	bl	265d4 <LLF_RND_GetRoscSampleCnt>
   25d60:	2800      	cmp	r0, #0
   25d62:	d1be      	bne.n	25ce2 <getTrngSource+0x9a>
   25d64:	9b08      	ldr	r3, [sp, #32]
   25d66:	2b08      	cmp	r3, #8
   25d68:	f000 80a8 	beq.w	25ebc <getTrngSource+0x274>
   25d6c:	2b04      	cmp	r3, #4
   25d6e:	f000 80a8 	beq.w	25ec2 <getTrngSource+0x27a>
   25d72:	f1a3 0302 	sub.w	r3, r3, #2
   25d76:	fab3 f383 	clz	r3, r3
   25d7a:	095b      	lsrs	r3, r3, #5
   25d7c:	9304      	str	r3, [sp, #16]
   25d7e:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   25d82:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
   25d86:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   25d8a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   25d8c:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   25d90:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
   25d94:	4293      	cmp	r3, r2
   25d96:	d1f6      	bne.n	25d86 <getTrngSource+0x13e>
   25d98:	f04f 0b00 	mov.w	fp, #0
   25d9c:	f8c4 b12c 	str.w	fp, [r4, #300]	; 0x12c
   25da0:	f04f 30ff 	mov.w	r0, #4294967295
   25da4:	f7ff fd10 	bl	257c8 <CC_HalClearInterruptBit>
   25da8:	f06f 031b 	mvn.w	r3, #27
   25dac:	4658      	mov	r0, fp
   25dae:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   25db2:	f7ff fd17 	bl	257e4 <CC_HalMaskInterrupt>
   25db6:	9b04      	ldr	r3, [sp, #16]
   25db8:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
   25dbc:	f8d4 0a04 	ldr.w	r0, [r4, #2564]	; 0xa04
   25dc0:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   25dc4:	f7ff fd0e 	bl	257e4 <CC_HalMaskInterrupt>
   25dc8:	230a      	movs	r3, #10
   25dca:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
   25dce:	692b      	ldr	r3, [r5, #16]
   25dd0:	f1ab 3b55 	sub.w	fp, fp, #1431655765	; 0x55555555
   25dd4:	fbab 2303 	umull	r2, r3, fp, r3
   25dd8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   25dda:	091b      	lsrs	r3, r3, #4
   25ddc:	fb02 f303 	mul.w	r3, r2, r3
   25de0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   25de4:	03db      	lsls	r3, r3, #15
   25de6:	099b      	lsrs	r3, r3, #6
   25de8:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   25dec:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
   25df0:	f8da 3000 	ldr.w	r3, [sl]
   25df4:	9908      	ldr	r1, [sp, #32]
   25df6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   25dfa:	020b      	lsls	r3, r1, #8
   25dfc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   25e00:	4313      	orrs	r3, r2
   25e02:	f8ca 3000 	str.w	r3, [sl]
   25e06:	a809      	add	r0, sp, #36	; 0x24
   25e08:	f000 fbd4 	bl	265b4 <LLF_RND_WaitRngInterrupt>
   25e0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   25e0e:	f003 031a 	and.w	r3, r3, #26
   25e12:	4303      	orrs	r3, r0
   25e14:	f47f af68 	bne.w	25ce8 <getTrngSource+0xa0>
   25e18:	fbab 3b06 	umull	r3, fp, fp, r6
   25e1c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   25e20:	930a      	str	r3, [sp, #40]	; 0x28
   25e22:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   25e26:	930b      	str	r3, [sp, #44]	; 0x2c
   25e28:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   25e2c:	930c      	str	r3, [sp, #48]	; 0x30
   25e2e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   25e32:	930d      	str	r3, [sp, #52]	; 0x34
   25e34:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   25e38:	930e      	str	r3, [sp, #56]	; 0x38
   25e3a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   25e3e:	930f      	str	r3, [sp, #60]	; 0x3c
   25e40:	ebb7 0f9b 	cmp.w	r7, fp, lsr #2
   25e44:	d101      	bne.n	25e4a <getTrngSource+0x202>
   25e46:	9b03      	ldr	r3, [sp, #12]
   25e48:	b993      	cbnz	r3, 25e70 <getTrngSource+0x228>
   25e4a:	4640      	mov	r0, r8
   25e4c:	2218      	movs	r2, #24
   25e4e:	a90a      	add	r1, sp, #40	; 0x28
   25e50:	3e18      	subs	r6, #24
   25e52:	f7ff fd47 	bl	258e4 <CC_PalMemCopyPlat>
   25e56:	f108 0818 	add.w	r8, r8, #24
   25e5a:	3701      	adds	r7, #1
   25e5c:	b196      	cbz	r6, 25e84 <getTrngSource+0x23c>
   25e5e:	f000 fbe3 	bl	26628 <LLF_RND_TurnOffTrng>
   25e62:	2300      	movs	r3, #0
   25e64:	9309      	str	r3, [sp, #36]	; 0x24
   25e66:	2d00      	cmp	r5, #0
   25e68:	f47f af32 	bne.w	25cd0 <getTrngSource+0x88>
   25e6c:	4821      	ldr	r0, [pc, #132]	; (25ef4 <getTrngSource+0x2ac>)
   25e6e:	e738      	b.n	25ce2 <getTrngSource+0x9a>
   25e70:	4640      	mov	r0, r8
   25e72:	1af6      	subs	r6, r6, r3
   25e74:	461a      	mov	r2, r3
   25e76:	a90a      	add	r1, sp, #40	; 0x28
   25e78:	4498      	add	r8, r3
   25e7a:	3701      	adds	r7, #1
   25e7c:	f7ff fd32 	bl	258e4 <CC_PalMemCopyPlat>
   25e80:	2e00      	cmp	r6, #0
   25e82:	d1ec      	bne.n	25e5e <getTrngSource+0x216>
   25e84:	9f06      	ldr	r7, [sp, #24]
   25e86:	9e07      	ldr	r6, [sp, #28]
   25e88:	696a      	ldr	r2, [r5, #20]
   25e8a:	4639      	mov	r1, r7
   25e8c:	4630      	mov	r0, r6
   25e8e:	f7ff fe69 	bl	25b64 <LLF_RND_RepetitionCounterTest>
   25e92:	69aa      	ldr	r2, [r5, #24]
   25e94:	b940      	cbnz	r0, 25ea8 <getTrngSource+0x260>
   25e96:	f44f 6380 	mov.w	r3, #1024	; 0x400
   25e9a:	4639      	mov	r1, r7
   25e9c:	4630      	mov	r0, r6
   25e9e:	f7ff fe91 	bl	25bc4 <LLF_RND_AdaptiveProportionTest>
   25ea2:	2800      	cmp	r0, #0
   25ea4:	f43f af40 	beq.w	25d28 <getTrngSource+0xe0>
   25ea8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   25eaa:	2300      	movs	r3, #0
   25eac:	6013      	str	r3, [r2, #0]
   25eae:	e718      	b.n	25ce2 <getTrngSource+0x9a>
   25eb0:	6a2b      	ldr	r3, [r5, #32]
   25eb2:	2b00      	cmp	r3, #0
   25eb4:	f43f af39 	beq.w	25d2a <getTrngSource+0xe2>
   25eb8:	480f      	ldr	r0, [pc, #60]	; (25ef8 <getTrngSource+0x2b0>)
   25eba:	e736      	b.n	25d2a <getTrngSource+0xe2>
   25ebc:	2303      	movs	r3, #3
   25ebe:	9304      	str	r3, [sp, #16]
   25ec0:	e75d      	b.n	25d7e <getTrngSource+0x136>
   25ec2:	2302      	movs	r3, #2
   25ec4:	9304      	str	r3, [sp, #16]
   25ec6:	e75a      	b.n	25d7e <getTrngSource+0x136>
   25ec8:	9100      	str	r1, [sp, #0]
   25eca:	ab08      	add	r3, sp, #32
   25ecc:	2201      	movs	r2, #1
   25ece:	4629      	mov	r1, r5
   25ed0:	4650      	mov	r0, sl
   25ed2:	f7ff fda7 	bl	25a24 <startTrngHW>
   25ed6:	2800      	cmp	r0, #0
   25ed8:	f43f aed5 	beq.w	25c86 <getTrngSource+0x3e>
   25edc:	e725      	b.n	25d2a <getTrngSource+0xe2>
   25ede:	bf00      	nop
   25ee0:	5002b000 	.word	0x5002b000
   25ee4:	aaaaaaab 	.word	0xaaaaaaab
   25ee8:	00f10c02 	.word	0x00f10c02
   25eec:	00f10c31 	.word	0x00f10c31
   25ef0:	00f10c30 	.word	0x00f10c30
   25ef4:	00f10c35 	.word	0x00f10c35
   25ef8:	00f10c32 	.word	0x00f10c32

00025efc <LLF_RND_GetTrngSource>:
   25efc:	b410      	push	{r4}
   25efe:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
   25f02:	9401      	str	r4, [sp, #4]
   25f04:	9c03      	ldr	r4, [sp, #12]
   25f06:	9402      	str	r4, [sp, #8]
   25f08:	2400      	movs	r4, #0
   25f0a:	9403      	str	r4, [sp, #12]
   25f0c:	bc10      	pop	{r4}
   25f0e:	f7ff be9b 	b.w	25c48 <getTrngSource>
   25f12:	bf00      	nop

00025f14 <LLF_RND_RunTrngStartupTest>:
   25f14:	b510      	push	{r4, lr}
   25f16:	b086      	sub	sp, #24
   25f18:	ab05      	add	r3, sp, #20
   25f1a:	2401      	movs	r4, #1
   25f1c:	e9cd 2401 	strd	r2, r4, [sp, #4]
   25f20:	9300      	str	r3, [sp, #0]
   25f22:	2200      	movs	r2, #0
   25f24:	ab04      	add	r3, sp, #16
   25f26:	f7ff fe8f 	bl	25c48 <getTrngSource>
   25f2a:	b006      	add	sp, #24
   25f2c:	bd10      	pop	{r4, pc}
   25f2e:	bf00      	nop

00025f30 <mbedtls_hardware_poll>:
   25f30:	b5f0      	push	{r4, r5, r6, r7, lr}
   25f32:	b087      	sub	sp, #28
   25f34:	2900      	cmp	r1, #0
   25f36:	d066      	beq.n	26006 <mbedtls_hardware_poll+0xd6>
   25f38:	461e      	mov	r6, r3
   25f3a:	2b00      	cmp	r3, #0
   25f3c:	d063      	beq.n	26006 <mbedtls_hardware_poll+0xd6>
   25f3e:	4614      	mov	r4, r2
   25f40:	2a00      	cmp	r2, #0
   25f42:	d060      	beq.n	26006 <mbedtls_hardware_poll+0xd6>
   25f44:	4f31      	ldr	r7, [pc, #196]	; (2600c <mbedtls_hardware_poll+0xdc>)
   25f46:	460d      	mov	r5, r1
   25f48:	6838      	ldr	r0, [r7, #0]
   25f4a:	f04f 31ff 	mov.w	r1, #4294967295
   25f4e:	f7ff fce5 	bl	2591c <CC_PalMutexLock>
   25f52:	2800      	cmp	r0, #0
   25f54:	d14d      	bne.n	25ff2 <mbedtls_hardware_poll+0xc2>
   25f56:	2000      	movs	r0, #0
   25f58:	f7ff fd10 	bl	2597c <CC_PalPowerSaveModeSelect>
   25f5c:	2800      	cmp	r0, #0
   25f5e:	d144      	bne.n	25fea <mbedtls_hardware_poll+0xba>
   25f60:	482b      	ldr	r0, [pc, #172]	; (26010 <mbedtls_hardware_poll+0xe0>)
   25f62:	f000 fa99 	bl	26498 <RNG_PLAT_SetUserRngParameters>
   25f66:	4603      	mov	r3, r0
   25f68:	b1d8      	cbz	r0, 25fa2 <mbedtls_hardware_poll+0x72>
   25f6a:	2001      	movs	r0, #1
   25f6c:	f04f 35ff 	mov.w	r5, #4294967295
   25f70:	f7ff fd04 	bl	2597c <CC_PalPowerSaveModeSelect>
   25f74:	2800      	cmp	r0, #0
   25f76:	d134      	bne.n	25fe2 <mbedtls_hardware_poll+0xb2>
   25f78:	4826      	ldr	r0, [pc, #152]	; (26014 <mbedtls_hardware_poll+0xe4>)
   25f7a:	f44f 7108 	mov.w	r1, #544	; 0x220
   25f7e:	f7fe fed9 	bl	24d34 <mbedtls_zeroize_internal>
   25f82:	4825      	ldr	r0, [pc, #148]	; (26018 <mbedtls_hardware_poll+0xe8>)
   25f84:	2104      	movs	r1, #4
   25f86:	f7fe fed5 	bl	24d34 <mbedtls_zeroize_internal>
   25f8a:	4821      	ldr	r0, [pc, #132]	; (26010 <mbedtls_hardware_poll+0xe0>)
   25f8c:	2128      	movs	r1, #40	; 0x28
   25f8e:	f7fe fed1 	bl	24d34 <mbedtls_zeroize_internal>
   25f92:	6838      	ldr	r0, [r7, #0]
   25f94:	f7ff fcca 	bl	2592c <CC_PalMutexUnlock>
   25f98:	2800      	cmp	r0, #0
   25f9a:	d12e      	bne.n	25ffa <mbedtls_hardware_poll+0xca>
   25f9c:	4628      	mov	r0, r5
   25f9e:	b007      	add	sp, #28
   25fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25fa2:	4a1c      	ldr	r2, [pc, #112]	; (26014 <mbedtls_hardware_poll+0xe4>)
   25fa4:	9202      	str	r2, [sp, #8]
   25fa6:	aa05      	add	r2, sp, #20
   25fa8:	9201      	str	r2, [sp, #4]
   25faa:	aa04      	add	r2, sp, #16
   25fac:	9003      	str	r0, [sp, #12]
   25fae:	9200      	str	r2, [sp, #0]
   25fb0:	4917      	ldr	r1, [pc, #92]	; (26010 <mbedtls_hardware_poll+0xe0>)
   25fb2:	4819      	ldr	r0, [pc, #100]	; (26018 <mbedtls_hardware_poll+0xe8>)
   25fb4:	461a      	mov	r2, r3
   25fb6:	f7ff ffa1 	bl	25efc <LLF_RND_GetTrngSource>
   25fba:	4603      	mov	r3, r0
   25fbc:	2800      	cmp	r0, #0
   25fbe:	d1d4      	bne.n	25f6a <mbedtls_hardware_poll+0x3a>
   25fc0:	4628      	mov	r0, r5
   25fc2:	461d      	mov	r5, r3
   25fc4:	9b05      	ldr	r3, [sp, #20]
   25fc6:	9904      	ldr	r1, [sp, #16]
   25fc8:	429c      	cmp	r4, r3
   25fca:	4622      	mov	r2, r4
   25fcc:	bf28      	it	cs
   25fce:	461a      	movcs	r2, r3
   25fd0:	6032      	str	r2, [r6, #0]
   25fd2:	3108      	adds	r1, #8
   25fd4:	f7ff fc86 	bl	258e4 <CC_PalMemCopyPlat>
   25fd8:	2001      	movs	r0, #1
   25fda:	f7ff fccf 	bl	2597c <CC_PalPowerSaveModeSelect>
   25fde:	2800      	cmp	r0, #0
   25fe0:	d0ca      	beq.n	25f78 <mbedtls_hardware_poll+0x48>
   25fe2:	480e      	ldr	r0, [pc, #56]	; (2601c <mbedtls_hardware_poll+0xec>)
   25fe4:	f7fe fd8e 	bl	24b04 <CC_PalAbort>
   25fe8:	e7c6      	b.n	25f78 <mbedtls_hardware_poll+0x48>
   25fea:	480d      	ldr	r0, [pc, #52]	; (26020 <mbedtls_hardware_poll+0xf0>)
   25fec:	f7fe fd8a 	bl	24b04 <CC_PalAbort>
   25ff0:	e7b6      	b.n	25f60 <mbedtls_hardware_poll+0x30>
   25ff2:	480c      	ldr	r0, [pc, #48]	; (26024 <mbedtls_hardware_poll+0xf4>)
   25ff4:	f7fe fd86 	bl	24b04 <CC_PalAbort>
   25ff8:	e7ad      	b.n	25f56 <mbedtls_hardware_poll+0x26>
   25ffa:	480b      	ldr	r0, [pc, #44]	; (26028 <mbedtls_hardware_poll+0xf8>)
   25ffc:	f7fe fd82 	bl	24b04 <CC_PalAbort>
   26000:	4628      	mov	r0, r5
   26002:	b007      	add	sp, #28
   26004:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26006:	f04f 35ff 	mov.w	r5, #4294967295
   2600a:	e7c7      	b.n	25f9c <mbedtls_hardware_poll+0x6c>
   2600c:	20000888 	.word	0x20000888
   26010:	200041dc 	.word	0x200041dc
   26014:	20004204 	.word	0x20004204
   26018:	200041d8 	.word	0x200041d8
   2601c:	0002d6cc 	.word	0x0002d6cc
   26020:	0002d6ac 	.word	0x0002d6ac
   26024:	0002d694 	.word	0x0002d694
   26028:	0002d724 	.word	0x0002d724

0002602c <cc_mbedtls_aes_init>:
   2602c:	b510      	push	{r4, lr}
   2602e:	4604      	mov	r4, r0
   26030:	b130      	cbz	r0, 26040 <cc_mbedtls_aes_init+0x14>
   26032:	2200      	movs	r2, #0
   26034:	2301      	movs	r3, #1
   26036:	6562      	str	r2, [r4, #84]	; 0x54
   26038:	65a2      	str	r2, [r4, #88]	; 0x58
   2603a:	65e3      	str	r3, [r4, #92]	; 0x5c
   2603c:	6623      	str	r3, [r4, #96]	; 0x60
   2603e:	bd10      	pop	{r4, pc}
   26040:	4801      	ldr	r0, [pc, #4]	; (26048 <cc_mbedtls_aes_init+0x1c>)
   26042:	f7fe fd5f 	bl	24b04 <CC_PalAbort>
   26046:	e7f4      	b.n	26032 <cc_mbedtls_aes_init+0x6>
   26048:	0002d73c 	.word	0x0002d73c

0002604c <cc_mbedtls_aes_free>:
   2604c:	b118      	cbz	r0, 26056 <cc_mbedtls_aes_free+0xa>
   2604e:	2274      	movs	r2, #116	; 0x74
   26050:	2100      	movs	r1, #0
   26052:	f7ff bc49 	b.w	258e8 <CC_PalMemSetPlat>
   26056:	4770      	bx	lr

00026058 <cc_mbedtls_aes_setkey_enc>:
   26058:	b190      	cbz	r0, 26080 <cc_mbedtls_aes_setkey_enc+0x28>
   2605a:	b1a1      	cbz	r1, 26086 <cc_mbedtls_aes_setkey_enc+0x2e>
   2605c:	b510      	push	{r4, lr}
   2605e:	2a80      	cmp	r2, #128	; 0x80
   26060:	f04f 0400 	mov.w	r4, #0
   26064:	6384      	str	r4, [r0, #56]	; 0x38
   26066:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   2606a:	d106      	bne.n	2607a <cc_mbedtls_aes_setkey_enc+0x22>
   2606c:	2210      	movs	r2, #16
   2606e:	6304      	str	r4, [r0, #48]	; 0x30
   26070:	4410      	add	r0, r2
   26072:	f7ff fc37 	bl	258e4 <CC_PalMemCopyPlat>
   26076:	4620      	mov	r0, r4
   26078:	bd10      	pop	{r4, pc}
   2607a:	f06f 001f 	mvn.w	r0, #31
   2607e:	bd10      	pop	{r4, pc}
   26080:	f06f 0021 	mvn.w	r0, #33	; 0x21
   26084:	4770      	bx	lr
   26086:	f06f 001f 	mvn.w	r0, #31
   2608a:	4770      	bx	lr

0002608c <cc_mbedtls_aes_crypt_ecb>:
   2608c:	b328      	cbz	r0, 260da <cc_mbedtls_aes_crypt_ecb+0x4e>
   2608e:	b322      	cbz	r2, 260da <cc_mbedtls_aes_crypt_ecb+0x4e>
   26090:	b31b      	cbz	r3, 260da <cc_mbedtls_aes_crypt_ecb+0x4e>
   26092:	2901      	cmp	r1, #1
   26094:	d821      	bhi.n	260da <cc_mbedtls_aes_crypt_ecb+0x4e>
   26096:	b570      	push	{r4, r5, r6, lr}
   26098:	4604      	mov	r4, r0
   2609a:	6b81      	ldr	r1, [r0, #56]	; 0x38
   2609c:	b086      	sub	sp, #24
   2609e:	d017      	beq.n	260d0 <cc_mbedtls_aes_crypt_ecb+0x44>
   260a0:	2901      	cmp	r1, #1
   260a2:	d117      	bne.n	260d4 <cc_mbedtls_aes_crypt_ecb+0x48>
   260a4:	2510      	movs	r5, #16
   260a6:	2100      	movs	r1, #0
   260a8:	eb0d 0605 	add.w	r6, sp, r5
   260ac:	6361      	str	r1, [r4, #52]	; 0x34
   260ae:	4610      	mov	r0, r2
   260b0:	9500      	str	r5, [sp, #0]
   260b2:	9601      	str	r6, [sp, #4]
   260b4:	aa02      	add	r2, sp, #8
   260b6:	4629      	mov	r1, r5
   260b8:	f000 fac2 	bl	26640 <SetDataBuffersInfo>
   260bc:	b950      	cbnz	r0, 260d4 <cc_mbedtls_aes_crypt_ecb+0x48>
   260be:	462b      	mov	r3, r5
   260c0:	4632      	mov	r2, r6
   260c2:	a902      	add	r1, sp, #8
   260c4:	4620      	mov	r0, r4
   260c6:	f000 fd43 	bl	26b50 <ProcessAesDrv>
   260ca:	b918      	cbnz	r0, 260d4 <cc_mbedtls_aes_crypt_ecb+0x48>
   260cc:	b006      	add	sp, #24
   260ce:	bd70      	pop	{r4, r5, r6, pc}
   260d0:	2900      	cmp	r1, #0
   260d2:	d0e7      	beq.n	260a4 <cc_mbedtls_aes_crypt_ecb+0x18>
   260d4:	f06f 0021 	mvn.w	r0, #33	; 0x21
   260d8:	e7f8      	b.n	260cc <cc_mbedtls_aes_crypt_ecb+0x40>
   260da:	f06f 0021 	mvn.w	r0, #33	; 0x21
   260de:	4770      	bx	lr

000260e0 <cc_mbedtls_sha256_init>:
   260e0:	b510      	push	{r4, lr}
   260e2:	4604      	mov	r4, r0
   260e4:	b128      	cbz	r0, 260f2 <cc_mbedtls_sha256_init+0x12>
   260e6:	4620      	mov	r0, r4
   260e8:	21f4      	movs	r1, #244	; 0xf4
   260ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   260ee:	f7ff bbfd 	b.w	258ec <CC_PalMemSetZeroPlat>
   260f2:	4804      	ldr	r0, [pc, #16]	; (26104 <cc_mbedtls_sha256_init+0x24>)
   260f4:	f7fe fd06 	bl	24b04 <CC_PalAbort>
   260f8:	4620      	mov	r0, r4
   260fa:	21f4      	movs	r1, #244	; 0xf4
   260fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   26100:	f7ff bbf4 	b.w	258ec <CC_PalMemSetZeroPlat>
   26104:	0002d750 	.word	0x0002d750

00026108 <cc_mbedtls_sha256_free>:
   26108:	b110      	cbz	r0, 26110 <cc_mbedtls_sha256_free+0x8>
   2610a:	21f4      	movs	r1, #244	; 0xf4
   2610c:	f7fe be12 	b.w	24d34 <mbedtls_zeroize_internal>
   26110:	4770      	bx	lr
   26112:	bf00      	nop

00026114 <cc_mbedtls_sha256_starts>:
   26114:	b508      	push	{r3, lr}
   26116:	b121      	cbz	r1, 26122 <cc_mbedtls_sha256_starts+0xe>
   26118:	2901      	cmp	r1, #1
   2611a:	d008      	beq.n	2612e <cc_mbedtls_sha256_starts+0x1a>
   2611c:	f06f 0036 	mvn.w	r0, #54	; 0x36
   26120:	bd08      	pop	{r3, pc}
   26122:	2101      	movs	r1, #1
   26124:	f000 f858 	bl	261d8 <mbedtls_sha_starts_internal>
   26128:	2800      	cmp	r0, #0
   2612a:	d1f7      	bne.n	2611c <cc_mbedtls_sha256_starts+0x8>
   2612c:	bd08      	pop	{r3, pc}
   2612e:	2102      	movs	r1, #2
   26130:	f000 f852 	bl	261d8 <mbedtls_sha_starts_internal>
   26134:	2800      	cmp	r0, #0
   26136:	d0f9      	beq.n	2612c <cc_mbedtls_sha256_starts+0x18>
   26138:	e7f0      	b.n	2611c <cc_mbedtls_sha256_starts+0x8>
   2613a:	bf00      	nop

0002613c <cc_mbedtls_sha256_update>:
   2613c:	b530      	push	{r4, r5, lr}
   2613e:	4605      	mov	r5, r0
   26140:	1888      	adds	r0, r1, r2
   26142:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
   26146:	b0a1      	sub	sp, #132	; 0x84
   26148:	460b      	mov	r3, r1
   2614a:	4614      	mov	r4, r2
   2614c:	d801      	bhi.n	26152 <cc_mbedtls_sha256_update+0x16>
   2614e:	2a80      	cmp	r2, #128	; 0x80
   26150:	d90c      	bls.n	2616c <cc_mbedtls_sha256_update+0x30>
   26152:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   26156:	d917      	bls.n	26188 <cc_mbedtls_sha256_update+0x4c>
   26158:	4622      	mov	r2, r4
   2615a:	4619      	mov	r1, r3
   2615c:	4628      	mov	r0, r5
   2615e:	f000 f87d 	bl	2625c <mbedtls_sha_update_internal>
   26162:	4604      	mov	r4, r0
   26164:	b984      	cbnz	r4, 26188 <cc_mbedtls_sha256_update+0x4c>
   26166:	4620      	mov	r0, r4
   26168:	b021      	add	sp, #132	; 0x84
   2616a:	bd30      	pop	{r4, r5, pc}
   2616c:	4668      	mov	r0, sp
   2616e:	f7ff fbb9 	bl	258e4 <CC_PalMemCopyPlat>
   26172:	4622      	mov	r2, r4
   26174:	4669      	mov	r1, sp
   26176:	4628      	mov	r0, r5
   26178:	f000 f870 	bl	2625c <mbedtls_sha_update_internal>
   2617c:	2180      	movs	r1, #128	; 0x80
   2617e:	4604      	mov	r4, r0
   26180:	4668      	mov	r0, sp
   26182:	f7ff fbb3 	bl	258ec <CC_PalMemSetZeroPlat>
   26186:	e7ed      	b.n	26164 <cc_mbedtls_sha256_update+0x28>
   26188:	f06f 0436 	mvn.w	r4, #54	; 0x36
   2618c:	e7eb      	b.n	26166 <cc_mbedtls_sha256_update+0x2a>
   2618e:	bf00      	nop

00026190 <cc_mbedtls_sha256_finish>:
   26190:	b570      	push	{r4, r5, r6, lr}
   26192:	b1e8      	cbz	r0, 261d0 <cc_mbedtls_sha256_finish+0x40>
   26194:	460e      	mov	r6, r1
   26196:	b1d9      	cbz	r1, 261d0 <cc_mbedtls_sha256_finish+0x40>
   26198:	4604      	mov	r4, r0
   2619a:	f000 f831 	bl	26200 <mbedtls_sha_finish_internal>
   2619e:	4605      	mov	r5, r0
   261a0:	b9b0      	cbnz	r0, 261d0 <cc_mbedtls_sha256_finish+0x40>
   261a2:	6823      	ldr	r3, [r4, #0]
   261a4:	2b01      	cmp	r3, #1
   261a6:	d00b      	beq.n	261c0 <cc_mbedtls_sha256_finish+0x30>
   261a8:	2b02      	cmp	r3, #2
   261aa:	d001      	beq.n	261b0 <cc_mbedtls_sha256_finish+0x20>
   261ac:	4628      	mov	r0, r5
   261ae:	bd70      	pop	{r4, r5, r6, pc}
   261b0:	221c      	movs	r2, #28
   261b2:	f104 0108 	add.w	r1, r4, #8
   261b6:	4630      	mov	r0, r6
   261b8:	f7ff fb94 	bl	258e4 <CC_PalMemCopyPlat>
   261bc:	4628      	mov	r0, r5
   261be:	bd70      	pop	{r4, r5, r6, pc}
   261c0:	2220      	movs	r2, #32
   261c2:	f104 0108 	add.w	r1, r4, #8
   261c6:	4630      	mov	r0, r6
   261c8:	f7ff fb8c 	bl	258e4 <CC_PalMemCopyPlat>
   261cc:	4628      	mov	r0, r5
   261ce:	bd70      	pop	{r4, r5, r6, pc}
   261d0:	f06f 0536 	mvn.w	r5, #54	; 0x36
   261d4:	e7ea      	b.n	261ac <cc_mbedtls_sha256_finish+0x1c>
   261d6:	bf00      	nop

000261d8 <mbedtls_sha_starts_internal>:
   261d8:	b178      	cbz	r0, 261fa <mbedtls_sha_starts_internal+0x22>
   261da:	b538      	push	{r3, r4, r5, lr}
   261dc:	4604      	mov	r4, r0
   261de:	460d      	mov	r5, r1
   261e0:	21f0      	movs	r1, #240	; 0xf0
   261e2:	f7ff fb83 	bl	258ec <CC_PalMemSetZeroPlat>
   261e6:	2340      	movs	r3, #64	; 0x40
   261e8:	6025      	str	r5, [r4, #0]
   261ea:	65e3      	str	r3, [r4, #92]	; 0x5c
   261ec:	4620      	mov	r0, r4
   261ee:	f000 fa5b 	bl	266a8 <InitHashDrv>
   261f2:	3800      	subs	r0, #0
   261f4:	bf18      	it	ne
   261f6:	2001      	movne	r0, #1
   261f8:	bd38      	pop	{r3, r4, r5, pc}
   261fa:	2001      	movs	r0, #1
   261fc:	4770      	bx	lr
   261fe:	bf00      	nop

00026200 <mbedtls_sha_finish_internal>:
   26200:	b570      	push	{r4, r5, r6, lr}
   26202:	6e05      	ldr	r5, [r0, #96]	; 0x60
   26204:	b0a4      	sub	sp, #144	; 0x90
   26206:	4604      	mov	r4, r0
   26208:	ae04      	add	r6, sp, #16
   2620a:	b9e5      	cbnz	r5, 26246 <mbedtls_sha_finish_internal+0x46>
   2620c:	2201      	movs	r2, #1
   2620e:	2300      	movs	r3, #0
   26210:	6062      	str	r2, [r4, #4]
   26212:	4630      	mov	r0, r6
   26214:	e9cd 3300 	strd	r3, r3, [sp]
   26218:	aa02      	add	r2, sp, #8
   2621a:	4629      	mov	r1, r5
   2621c:	f000 fa10 	bl	26640 <SetDataBuffersInfo>
   26220:	b110      	cbz	r0, 26228 <mbedtls_sha_finish_internal+0x28>
   26222:	2001      	movs	r0, #1
   26224:	b024      	add	sp, #144	; 0x90
   26226:	bd70      	pop	{r4, r5, r6, pc}
   26228:	462a      	mov	r2, r5
   2622a:	a902      	add	r1, sp, #8
   2622c:	4620      	mov	r0, r4
   2622e:	f000 fa63 	bl	266f8 <ProcessHashDrv>
   26232:	2800      	cmp	r0, #0
   26234:	d1f5      	bne.n	26222 <mbedtls_sha_finish_internal+0x22>
   26236:	4620      	mov	r0, r4
   26238:	f000 fb74 	bl	26924 <FinishHashDrv>
   2623c:	2800      	cmp	r0, #0
   2623e:	d1f0      	bne.n	26222 <mbedtls_sha_finish_internal+0x22>
   26240:	6620      	str	r0, [r4, #96]	; 0x60
   26242:	b024      	add	sp, #144	; 0x90
   26244:	bd70      	pop	{r4, r5, r6, pc}
   26246:	2d80      	cmp	r5, #128	; 0x80
   26248:	462a      	mov	r2, r5
   2624a:	f100 0164 	add.w	r1, r0, #100	; 0x64
   2624e:	bf28      	it	cs
   26250:	2280      	movcs	r2, #128	; 0x80
   26252:	4630      	mov	r0, r6
   26254:	f7ff fb46 	bl	258e4 <CC_PalMemCopyPlat>
   26258:	6e25      	ldr	r5, [r4, #96]	; 0x60
   2625a:	e7d7      	b.n	2620c <mbedtls_sha_finish_internal+0xc>

0002625c <mbedtls_sha_update_internal>:
   2625c:	2800      	cmp	r0, #0
   2625e:	f000 80ae 	beq.w	263be <mbedtls_sha_update_internal+0x162>
   26262:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26266:	4614      	mov	r4, r2
   26268:	b0a5      	sub	sp, #148	; 0x94
   2626a:	2a00      	cmp	r2, #0
   2626c:	d03d      	beq.n	262ea <mbedtls_sha_update_internal+0x8e>
   2626e:	460f      	mov	r7, r1
   26270:	2900      	cmp	r1, #0
   26272:	d049      	beq.n	26308 <mbedtls_sha_update_internal+0xac>
   26274:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   26278:	4605      	mov	r5, r0
   2627a:	6e00      	ldr	r0, [r0, #96]	; 0x60
   2627c:	d320      	bcc.n	262c0 <mbedtls_sha_update_internal+0x64>
   2627e:	f64f 78ff 	movw	r8, #65535	; 0xffff
   26282:	f105 0a64 	add.w	sl, r5, #100	; 0x64
   26286:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   26288:	1a1a      	subs	r2, r3, r0
   2628a:	fbb2 f1f3 	udiv	r1, r2, r3
   2628e:	fb03 2211 	mls	r2, r3, r1, r2
   26292:	2a00      	cmp	r2, #0
   26294:	d165      	bne.n	26362 <mbedtls_sha_update_internal+0x106>
   26296:	4283      	cmp	r3, r0
   26298:	46b9      	mov	r9, r7
   2629a:	f64f 76ff 	movw	r6, #65535	; 0xffff
   2629e:	d072      	beq.n	26386 <mbedtls_sha_update_internal+0x12a>
   262a0:	fbb6 fbf3 	udiv	fp, r6, r3
   262a4:	fb03 fb0b 	mul.w	fp, r3, fp
   262a8:	f1bb 0f00 	cmp.w	fp, #0
   262ac:	d130      	bne.n	26310 <mbedtls_sha_update_internal+0xb4>
   262ae:	2e00      	cmp	r6, #0
   262b0:	d145      	bne.n	2633e <mbedtls_sha_update_internal+0xe2>
   262b2:	f5a4 447f 	sub.w	r4, r4, #65280	; 0xff00
   262b6:	3cff      	subs	r4, #255	; 0xff
   262b8:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   262bc:	4447      	add	r7, r8
   262be:	d2e2      	bcs.n	26286 <mbedtls_sha_update_internal+0x2a>
   262c0:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   262c2:	1a16      	subs	r6, r2, r0
   262c4:	fbb6 f3f2 	udiv	r3, r6, r2
   262c8:	fb02 6613 	mls	r6, r2, r3, r6
   262cc:	42a6      	cmp	r6, r4
   262ce:	bf28      	it	cs
   262d0:	4626      	movcs	r6, r4
   262d2:	2e00      	cmp	r6, #0
   262d4:	d175      	bne.n	263c2 <mbedtls_sha_update_internal+0x166>
   262d6:	4282      	cmp	r2, r0
   262d8:	f000 808d 	beq.w	263f6 <mbedtls_sha_update_internal+0x19a>
   262dc:	fbb4 f6f2 	udiv	r6, r4, r2
   262e0:	fb02 f606 	mul.w	r6, r2, r6
   262e4:	b92e      	cbnz	r6, 262f2 <mbedtls_sha_update_internal+0x96>
   262e6:	2c00      	cmp	r4, #0
   262e8:	d179      	bne.n	263de <mbedtls_sha_update_internal+0x182>
   262ea:	2000      	movs	r0, #0
   262ec:	b025      	add	sp, #148	; 0x94
   262ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   262f2:	2300      	movs	r3, #0
   262f4:	e9cd 3300 	strd	r3, r3, [sp]
   262f8:	aa02      	add	r2, sp, #8
   262fa:	4631      	mov	r1, r6
   262fc:	4638      	mov	r0, r7
   262fe:	f000 f99f 	bl	26640 <SetDataBuffersInfo>
   26302:	2800      	cmp	r0, #0
   26304:	f000 8095 	beq.w	26432 <mbedtls_sha_update_internal+0x1d6>
   26308:	2001      	movs	r0, #1
   2630a:	b025      	add	sp, #148	; 0x94
   2630c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26310:	2300      	movs	r3, #0
   26312:	e9cd 3300 	strd	r3, r3, [sp]
   26316:	aa02      	add	r2, sp, #8
   26318:	4659      	mov	r1, fp
   2631a:	4648      	mov	r0, r9
   2631c:	f000 f990 	bl	26640 <SetDataBuffersInfo>
   26320:	2800      	cmp	r0, #0
   26322:	d1f1      	bne.n	26308 <mbedtls_sha_update_internal+0xac>
   26324:	a902      	add	r1, sp, #8
   26326:	465a      	mov	r2, fp
   26328:	4628      	mov	r0, r5
   2632a:	f000 f9e5 	bl	266f8 <ProcessHashDrv>
   2632e:	2800      	cmp	r0, #0
   26330:	d1ea      	bne.n	26308 <mbedtls_sha_update_internal+0xac>
   26332:	eba6 060b 	sub.w	r6, r6, fp
   26336:	6e28      	ldr	r0, [r5, #96]	; 0x60
   26338:	44d9      	add	r9, fp
   2633a:	2e00      	cmp	r6, #0
   2633c:	d0b9      	beq.n	262b2 <mbedtls_sha_update_internal+0x56>
   2633e:	3019      	adds	r0, #25
   26340:	4649      	mov	r1, r9
   26342:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   26346:	4632      	mov	r2, r6
   26348:	f7ff facc 	bl	258e4 <CC_PalMemCopyPlat>
   2634c:	f5a4 447f 	sub.w	r4, r4, #65280	; 0xff00
   26350:	6e28      	ldr	r0, [r5, #96]	; 0x60
   26352:	3cff      	subs	r4, #255	; 0xff
   26354:	4430      	add	r0, r6
   26356:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   2635a:	4447      	add	r7, r8
   2635c:	6628      	str	r0, [r5, #96]	; 0x60
   2635e:	d292      	bcs.n	26286 <mbedtls_sha_update_internal+0x2a>
   26360:	e7ae      	b.n	262c0 <mbedtls_sha_update_internal+0x64>
   26362:	4542      	cmp	r2, r8
   26364:	bf28      	it	cs
   26366:	4642      	movcs	r2, r8
   26368:	4450      	add	r0, sl
   2636a:	4639      	mov	r1, r7
   2636c:	4616      	mov	r6, r2
   2636e:	f7ff fab9 	bl	258e4 <CC_PalMemCopyPlat>
   26372:	6e28      	ldr	r0, [r5, #96]	; 0x60
   26374:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   26376:	4430      	add	r0, r6
   26378:	4283      	cmp	r3, r0
   2637a:	eb07 0906 	add.w	r9, r7, r6
   2637e:	6628      	str	r0, [r5, #96]	; 0x60
   26380:	eba8 0606 	sub.w	r6, r8, r6
   26384:	d18c      	bne.n	262a0 <mbedtls_sha_update_internal+0x44>
   26386:	2b80      	cmp	r3, #128	; 0x80
   26388:	bf28      	it	cs
   2638a:	2380      	movcs	r3, #128	; 0x80
   2638c:	461a      	mov	r2, r3
   2638e:	4651      	mov	r1, sl
   26390:	a804      	add	r0, sp, #16
   26392:	f7ff faa7 	bl	258e4 <CC_PalMemCopyPlat>
   26396:	2300      	movs	r3, #0
   26398:	e9cd 3300 	strd	r3, r3, [sp]
   2639c:	aa02      	add	r2, sp, #8
   2639e:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   263a0:	a804      	add	r0, sp, #16
   263a2:	f000 f94d 	bl	26640 <SetDataBuffersInfo>
   263a6:	2800      	cmp	r0, #0
   263a8:	d1ae      	bne.n	26308 <mbedtls_sha_update_internal+0xac>
   263aa:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   263ac:	a902      	add	r1, sp, #8
   263ae:	4628      	mov	r0, r5
   263b0:	f000 f9a2 	bl	266f8 <ProcessHashDrv>
   263b4:	2800      	cmp	r0, #0
   263b6:	d1a7      	bne.n	26308 <mbedtls_sha_update_internal+0xac>
   263b8:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   263ba:	6628      	str	r0, [r5, #96]	; 0x60
   263bc:	e770      	b.n	262a0 <mbedtls_sha_update_internal+0x44>
   263be:	2001      	movs	r0, #1
   263c0:	4770      	bx	lr
   263c2:	f105 0364 	add.w	r3, r5, #100	; 0x64
   263c6:	4639      	mov	r1, r7
   263c8:	4632      	mov	r2, r6
   263ca:	4418      	add	r0, r3
   263cc:	f7ff fa8a 	bl	258e4 <CC_PalMemCopyPlat>
   263d0:	6e28      	ldr	r0, [r5, #96]	; 0x60
   263d2:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   263d4:	4430      	add	r0, r6
   263d6:	1ba4      	subs	r4, r4, r6
   263d8:	4437      	add	r7, r6
   263da:	6628      	str	r0, [r5, #96]	; 0x60
   263dc:	e77b      	b.n	262d6 <mbedtls_sha_update_internal+0x7a>
   263de:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   263e0:	3319      	adds	r3, #25
   263e2:	eb05 0083 	add.w	r0, r5, r3, lsl #2
   263e6:	4622      	mov	r2, r4
   263e8:	4639      	mov	r1, r7
   263ea:	f7ff fa7b 	bl	258e4 <CC_PalMemCopyPlat>
   263ee:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   263f0:	4423      	add	r3, r4
   263f2:	662b      	str	r3, [r5, #96]	; 0x60
   263f4:	e779      	b.n	262ea <mbedtls_sha_update_internal+0x8e>
   263f6:	2a80      	cmp	r2, #128	; 0x80
   263f8:	bf28      	it	cs
   263fa:	2280      	movcs	r2, #128	; 0x80
   263fc:	f105 0164 	add.w	r1, r5, #100	; 0x64
   26400:	a804      	add	r0, sp, #16
   26402:	f7ff fa6f 	bl	258e4 <CC_PalMemCopyPlat>
   26406:	2300      	movs	r3, #0
   26408:	e9cd 3300 	strd	r3, r3, [sp]
   2640c:	a804      	add	r0, sp, #16
   2640e:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   26410:	aa02      	add	r2, sp, #8
   26412:	f000 f915 	bl	26640 <SetDataBuffersInfo>
   26416:	2800      	cmp	r0, #0
   26418:	f47f af76 	bne.w	26308 <mbedtls_sha_update_internal+0xac>
   2641c:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   2641e:	a902      	add	r1, sp, #8
   26420:	4628      	mov	r0, r5
   26422:	f000 f969 	bl	266f8 <ProcessHashDrv>
   26426:	2800      	cmp	r0, #0
   26428:	f47f af6e 	bne.w	26308 <mbedtls_sha_update_internal+0xac>
   2642c:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   2642e:	6628      	str	r0, [r5, #96]	; 0x60
   26430:	e754      	b.n	262dc <mbedtls_sha_update_internal+0x80>
   26432:	a902      	add	r1, sp, #8
   26434:	4632      	mov	r2, r6
   26436:	4628      	mov	r0, r5
   26438:	f000 f95e 	bl	266f8 <ProcessHashDrv>
   2643c:	2800      	cmp	r0, #0
   2643e:	f47f af63 	bne.w	26308 <mbedtls_sha_update_internal+0xac>
   26442:	4437      	add	r7, r6
   26444:	1ba4      	subs	r4, r4, r6
   26446:	e74e      	b.n	262e6 <mbedtls_sha_update_internal+0x8a>

00026448 <cc_mbedtls_sha256>:
   26448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2644a:	461c      	mov	r4, r3
   2644c:	4605      	mov	r5, r0
   2644e:	4811      	ldr	r0, [pc, #68]	; (26494 <cc_mbedtls_sha256+0x4c>)
   26450:	460e      	mov	r6, r1
   26452:	4617      	mov	r7, r2
   26454:	f7ff fe44 	bl	260e0 <cc_mbedtls_sha256_init>
   26458:	4621      	mov	r1, r4
   2645a:	480e      	ldr	r0, [pc, #56]	; (26494 <cc_mbedtls_sha256+0x4c>)
   2645c:	f7ff fe5a 	bl	26114 <cc_mbedtls_sha256_starts>
   26460:	4604      	mov	r4, r0
   26462:	b120      	cbz	r0, 2646e <cc_mbedtls_sha256+0x26>
   26464:	480b      	ldr	r0, [pc, #44]	; (26494 <cc_mbedtls_sha256+0x4c>)
   26466:	f7ff fe4f 	bl	26108 <cc_mbedtls_sha256_free>
   2646a:	4620      	mov	r0, r4
   2646c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2646e:	4809      	ldr	r0, [pc, #36]	; (26494 <cc_mbedtls_sha256+0x4c>)
   26470:	4632      	mov	r2, r6
   26472:	4629      	mov	r1, r5
   26474:	f7ff fe62 	bl	2613c <cc_mbedtls_sha256_update>
   26478:	4604      	mov	r4, r0
   2647a:	2800      	cmp	r0, #0
   2647c:	d1f2      	bne.n	26464 <cc_mbedtls_sha256+0x1c>
   2647e:	4639      	mov	r1, r7
   26480:	4804      	ldr	r0, [pc, #16]	; (26494 <cc_mbedtls_sha256+0x4c>)
   26482:	f7ff fe85 	bl	26190 <cc_mbedtls_sha256_finish>
   26486:	4604      	mov	r4, r0
   26488:	4802      	ldr	r0, [pc, #8]	; (26494 <cc_mbedtls_sha256+0x4c>)
   2648a:	f7ff fe3d 	bl	26108 <cc_mbedtls_sha256_free>
   2648e:	4620      	mov	r0, r4
   26490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26492:	bf00      	nop
   26494:	20004424 	.word	0x20004424

00026498 <RNG_PLAT_SetUserRngParameters>:
   26498:	b530      	push	{r4, r5, lr}
   2649a:	b083      	sub	sp, #12
   2649c:	231c      	movs	r3, #28
   2649e:	a901      	add	r1, sp, #4
   264a0:	4605      	mov	r5, r0
   264a2:	9301      	str	r3, [sp, #4]
   264a4:	f000 f832 	bl	2650c <CC_PalTrngParamGet>
   264a8:	4604      	mov	r4, r0
   264aa:	b938      	cbnz	r0, 264bc <RNG_PLAT_SetUserRngParameters+0x24>
   264ac:	9b01      	ldr	r3, [sp, #4]
   264ae:	2b1c      	cmp	r3, #28
   264b0:	d007      	beq.n	264c2 <RNG_PLAT_SetUserRngParameters+0x2a>
   264b2:	4c14      	ldr	r4, [pc, #80]	; (26504 <RNG_PLAT_SetUserRngParameters+0x6c>)
   264b4:	211c      	movs	r1, #28
   264b6:	4628      	mov	r0, r5
   264b8:	f7ff fa18 	bl	258ec <CC_PalMemSetZeroPlat>
   264bc:	4620      	mov	r0, r4
   264be:	b003      	add	sp, #12
   264c0:	bd30      	pop	{r4, r5, pc}
   264c2:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
   264c6:	1e13      	subs	r3, r2, #0
   264c8:	bf18      	it	ne
   264ca:	2301      	movne	r3, #1
   264cc:	3900      	subs	r1, #0
   264ce:	682a      	ldr	r2, [r5, #0]
   264d0:	bf18      	it	ne
   264d2:	2101      	movne	r1, #1
   264d4:	009b      	lsls	r3, r3, #2
   264d6:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
   264da:	2a00      	cmp	r2, #0
   264dc:	bf18      	it	ne
   264de:	f043 0301 	orrne.w	r3, r3, #1
   264e2:	68ea      	ldr	r2, [r5, #12]
   264e4:	2001      	movs	r0, #1
   264e6:	61e8      	str	r0, [r5, #28]
   264e8:	b92a      	cbnz	r2, 264f6 <RNG_PLAT_SetUserRngParameters+0x5e>
   264ea:	e9c5 3408 	strd	r3, r4, [r5, #32]
   264ee:	2b00      	cmp	r3, #0
   264f0:	d1e4      	bne.n	264bc <RNG_PLAT_SetUserRngParameters+0x24>
   264f2:	4c05      	ldr	r4, [pc, #20]	; (26508 <RNG_PLAT_SetUserRngParameters+0x70>)
   264f4:	e7de      	b.n	264b4 <RNG_PLAT_SetUserRngParameters+0x1c>
   264f6:	f043 0308 	orr.w	r3, r3, #8
   264fa:	4620      	mov	r0, r4
   264fc:	e9c5 3408 	strd	r3, r4, [r5, #32]
   26500:	b003      	add	sp, #12
   26502:	bd30      	pop	{r4, r5, pc}
   26504:	00f00c37 	.word	0x00f00c37
   26508:	00f00c0e 	.word	0x00f00c0e

0002650c <CC_PalTrngParamGet>:
   2650c:	b118      	cbz	r0, 26516 <CC_PalTrngParamGet+0xa>
   2650e:	b111      	cbz	r1, 26516 <CC_PalTrngParamGet+0xa>
   26510:	680b      	ldr	r3, [r1, #0]
   26512:	2b1c      	cmp	r3, #28
   26514:	d001      	beq.n	2651a <CC_PalTrngParamGet+0xe>
   26516:	2001      	movs	r0, #1
   26518:	4770      	bx	lr
   2651a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2651e:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   26522:	3201      	adds	r2, #1
   26524:	bf14      	ite	ne
   26526:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   2652a:	f241 225c 	movweq	r2, #4700	; 0x125c
   2652e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   26532:	6002      	str	r2, [r0, #0]
   26534:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   26538:	3201      	adds	r2, #1
   2653a:	bf14      	ite	ne
   2653c:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   26540:	f641 1264 	movweq	r2, #6500	; 0x1964
   26544:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   26548:	6042      	str	r2, [r0, #4]
   2654a:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   2654e:	3201      	adds	r2, #1
   26550:	bf14      	ite	ne
   26552:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   26556:	f640 62d8 	movweq	r2, #3800	; 0xed8
   2655a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2655e:	6082      	str	r2, [r0, #8]
   26560:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   26564:	3201      	adds	r2, #1
   26566:	bf14      	ite	ne
   26568:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   2656c:	f241 3288 	movweq	r2, #5000	; 0x1388
   26570:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   26574:	60c2      	str	r2, [r0, #12]
   26576:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   2657a:	3201      	adds	r2, #1
   2657c:	bf14      	ite	ne
   2657e:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   26582:	2290      	moveq	r2, #144	; 0x90
   26584:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   26588:	6102      	str	r2, [r0, #16]
   2658a:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   2658e:	3201      	adds	r2, #1
   26590:	bf14      	ite	ne
   26592:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   26596:	2251      	moveq	r2, #81	; 0x51
   26598:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2659c:	6142      	str	r2, [r0, #20]
   2659e:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   265a2:	3201      	adds	r2, #1
   265a4:	bf14      	ite	ne
   265a6:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   265aa:	f240 3337 	movweq	r3, #823	; 0x337
   265ae:	6183      	str	r3, [r0, #24]
   265b0:	2000      	movs	r0, #0
   265b2:	4770      	bx	lr

000265b4 <LLF_RND_WaitRngInterrupt>:
   265b4:	b508      	push	{r3, lr}
   265b6:	4601      	mov	r1, r0
   265b8:	f44f 6080 	mov.w	r0, #1024	; 0x400
   265bc:	f7ff f91e 	bl	257fc <CC_HalWaitInterruptRND>
   265c0:	4b03      	ldr	r3, [pc, #12]	; (265d0 <LLF_RND_WaitRngInterrupt+0x1c>)
   265c2:	2200      	movs	r2, #0
   265c4:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
   265c8:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   265cc:	bd08      	pop	{r3, pc}
   265ce:	bf00      	nop
   265d0:	5002b000 	.word	0x5002b000

000265d4 <LLF_RND_GetRoscSampleCnt>:
   265d4:	3801      	subs	r0, #1
   265d6:	2807      	cmp	r0, #7
   265d8:	d805      	bhi.n	265e6 <LLF_RND_GetRoscSampleCnt+0x12>
   265da:	e8df f000 	tbb	[pc, r0]
   265de:	0e10      	.short	0x0e10
   265e0:	04040a04 	.word	0x04040a04
   265e4:	0604      	.short	0x0604
   265e6:	4807      	ldr	r0, [pc, #28]	; (26604 <LLF_RND_GetRoscSampleCnt+0x30>)
   265e8:	4770      	bx	lr
   265ea:	68cb      	ldr	r3, [r1, #12]
   265ec:	624b      	str	r3, [r1, #36]	; 0x24
   265ee:	2000      	movs	r0, #0
   265f0:	4770      	bx	lr
   265f2:	688b      	ldr	r3, [r1, #8]
   265f4:	624b      	str	r3, [r1, #36]	; 0x24
   265f6:	2000      	movs	r0, #0
   265f8:	4770      	bx	lr
   265fa:	684b      	ldr	r3, [r1, #4]
   265fc:	e7f6      	b.n	265ec <LLF_RND_GetRoscSampleCnt+0x18>
   265fe:	680b      	ldr	r3, [r1, #0]
   26600:	e7f4      	b.n	265ec <LLF_RND_GetRoscSampleCnt+0x18>
   26602:	bf00      	nop
   26604:	00f10c31 	.word	0x00f10c31

00026608 <LLF_RND_GetFastestRosc>:
   26608:	680b      	ldr	r3, [r1, #0]
   2660a:	e002      	b.n	26612 <LLF_RND_GetFastestRosc+0xa>
   2660c:	2b08      	cmp	r3, #8
   2660e:	600b      	str	r3, [r1, #0]
   26610:	d806      	bhi.n	26620 <LLF_RND_GetFastestRosc+0x18>
   26612:	6a02      	ldr	r2, [r0, #32]
   26614:	4213      	tst	r3, r2
   26616:	ea4f 0343 	mov.w	r3, r3, lsl #1
   2661a:	d0f7      	beq.n	2660c <LLF_RND_GetFastestRosc+0x4>
   2661c:	2000      	movs	r0, #0
   2661e:	4770      	bx	lr
   26620:	4800      	ldr	r0, [pc, #0]	; (26624 <LLF_RND_GetFastestRosc+0x1c>)
   26622:	4770      	bx	lr
   26624:	00f10c31 	.word	0x00f10c31

00026628 <LLF_RND_TurnOffTrng>:
   26628:	4b04      	ldr	r3, [pc, #16]	; (2663c <LLF_RND_TurnOffTrng+0x14>)
   2662a:	2200      	movs	r2, #0
   2662c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   26630:	f44f 6080 	mov.w	r0, #1024	; 0x400
   26634:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   26638:	f7ff b8c6 	b.w	257c8 <CC_HalClearInterruptBit>
   2663c:	5002b000 	.word	0x5002b000

00026640 <SetDataBuffersInfo>:
   26640:	b5f0      	push	{r4, r5, r6, r7, lr}
   26642:	b083      	sub	sp, #12
   26644:	461d      	mov	r5, r3
   26646:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   2664a:	f04f 0300 	mov.w	r3, #0
   2664e:	f88d 3007 	strb.w	r3, [sp, #7]
   26652:	d324      	bcc.n	2669e <SetDataBuffersInfo+0x5e>
   26654:	468c      	mov	ip, r1
   26656:	4484      	add	ip, r0
   26658:	f1bc 4f80 	cmp.w	ip, #1073741824	; 0x40000000
   2665c:	4604      	mov	r4, r0
   2665e:	d81e      	bhi.n	2669e <SetDataBuffersInfo+0x5e>
   26660:	4617      	mov	r7, r2
   26662:	f10d 0307 	add.w	r3, sp, #7
   26666:	2201      	movs	r2, #1
   26668:	f000 fe64 	bl	27334 <CC_PalDataBufferAttrGet>
   2666c:	4606      	mov	r6, r0
   2666e:	b9b0      	cbnz	r0, 2669e <SetDataBuffersInfo+0x5e>
   26670:	9a09      	ldr	r2, [sp, #36]	; 0x24
   26672:	f89d 3007 	ldrb.w	r3, [sp, #7]
   26676:	603c      	str	r4, [r7, #0]
   26678:	713b      	strb	r3, [r7, #4]
   2667a:	b192      	cbz	r2, 266a2 <SetDataBuffersInfo+0x62>
   2667c:	b14d      	cbz	r5, 26692 <SetDataBuffersInfo+0x52>
   2667e:	4602      	mov	r2, r0
   26680:	9908      	ldr	r1, [sp, #32]
   26682:	f10d 0307 	add.w	r3, sp, #7
   26686:	4628      	mov	r0, r5
   26688:	f000 fe54 	bl	27334 <CC_PalDataBufferAttrGet>
   2668c:	b938      	cbnz	r0, 2669e <SetDataBuffersInfo+0x5e>
   2668e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   26692:	9a09      	ldr	r2, [sp, #36]	; 0x24
   26694:	4630      	mov	r0, r6
   26696:	6015      	str	r5, [r2, #0]
   26698:	7113      	strb	r3, [r2, #4]
   2669a:	b003      	add	sp, #12
   2669c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2669e:	f44f 0675 	mov.w	r6, #16056320	; 0xf50000
   266a2:	4630      	mov	r0, r6
   266a4:	b003      	add	sp, #12
   266a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000266a8 <InitHashDrv>:
   266a8:	b1d8      	cbz	r0, 266e2 <InitHashDrv+0x3a>
   266aa:	b508      	push	{r3, lr}
   266ac:	6803      	ldr	r3, [r0, #0]
   266ae:	2b01      	cmp	r3, #1
   266b0:	d004      	beq.n	266bc <InitHashDrv+0x14>
   266b2:	2b02      	cmp	r3, #2
   266b4:	d00f      	beq.n	266d6 <InitHashDrv+0x2e>
   266b6:	b143      	cbz	r3, 266ca <InitHashDrv+0x22>
   266b8:	480b      	ldr	r0, [pc, #44]	; (266e8 <InitHashDrv+0x40>)
   266ba:	bd08      	pop	{r3, pc}
   266bc:	490b      	ldr	r1, [pc, #44]	; (266ec <InitHashDrv+0x44>)
   266be:	2220      	movs	r2, #32
   266c0:	3008      	adds	r0, #8
   266c2:	f7ff f90f 	bl	258e4 <CC_PalMemCopyPlat>
   266c6:	2000      	movs	r0, #0
   266c8:	bd08      	pop	{r3, pc}
   266ca:	4909      	ldr	r1, [pc, #36]	; (266f0 <InitHashDrv+0x48>)
   266cc:	2214      	movs	r2, #20
   266ce:	3008      	adds	r0, #8
   266d0:	f7ff f908 	bl	258e4 <CC_PalMemCopyPlat>
   266d4:	e7f7      	b.n	266c6 <InitHashDrv+0x1e>
   266d6:	4907      	ldr	r1, [pc, #28]	; (266f4 <InitHashDrv+0x4c>)
   266d8:	2220      	movs	r2, #32
   266da:	3008      	adds	r0, #8
   266dc:	f7ff f902 	bl	258e4 <CC_PalMemCopyPlat>
   266e0:	e7f1      	b.n	266c6 <InitHashDrv+0x1e>
   266e2:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   266e6:	4770      	bx	lr
   266e8:	00f30001 	.word	0x00f30001
   266ec:	0002d760 	.word	0x0002d760
   266f0:	0002d7a0 	.word	0x0002d7a0
   266f4:	0002d780 	.word	0x0002d780

000266f8 <ProcessHashDrv>:
   266f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   266fc:	2900      	cmp	r1, #0
   266fe:	f000 80f9 	beq.w	268f4 <ProcessHashDrv+0x1fc>
   26702:	4604      	mov	r4, r0
   26704:	2800      	cmp	r0, #0
   26706:	f000 80f9 	beq.w	268fc <ProcessHashDrv+0x204>
   2670a:	6803      	ldr	r3, [r0, #0]
   2670c:	4690      	mov	r8, r2
   2670e:	460f      	mov	r7, r1
   26710:	2b00      	cmp	r3, #0
   26712:	f000 80c3 	beq.w	2689c <ProcessHashDrv+0x1a4>
   26716:	3b01      	subs	r3, #1
   26718:	2b01      	cmp	r3, #1
   2671a:	f200 80d7 	bhi.w	268cc <ProcessHashDrv+0x1d4>
   2671e:	4879      	ldr	r0, [pc, #484]	; (26904 <ProcessHashDrv+0x20c>)
   26720:	f04f 31ff 	mov.w	r1, #4294967295
   26724:	f04f 0902 	mov.w	r9, #2
   26728:	f7ff f8f8 	bl	2591c <CC_PalMutexLock>
   2672c:	2800      	cmp	r0, #0
   2672e:	f040 80bf 	bne.w	268b0 <ProcessHashDrv+0x1b8>
   26732:	2000      	movs	r0, #0
   26734:	f7ff f922 	bl	2597c <CC_PalPowerSaveModeSelect>
   26738:	4606      	mov	r6, r0
   2673a:	2800      	cmp	r0, #0
   2673c:	f040 80c2 	bne.w	268c4 <ProcessHashDrv+0x1cc>
   26740:	4a71      	ldr	r2, [pc, #452]	; (26908 <ProcessHashDrv+0x210>)
   26742:	f8d2 391c 	ldr.w	r3, [r2, #2332]	; 0x91c
   26746:	2b00      	cmp	r3, #0
   26748:	d1fb      	bne.n	26742 <ProcessHashDrv+0x4a>
   2674a:	4d6f      	ldr	r5, [pc, #444]	; (26908 <ProcessHashDrv+0x210>)
   2674c:	f8d5 3c20 	ldr.w	r3, [r5, #3104]	; 0xc20
   26750:	2b00      	cmp	r3, #0
   26752:	d1fb      	bne.n	2674c <ProcessHashDrv+0x54>
   26754:	f04f 30ff 	mov.w	r0, #4294967295
   26758:	f7ff f836 	bl	257c8 <CC_HalClearInterruptBit>
   2675c:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   26760:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   26764:	f7ff f83e 	bl	257e4 <CC_HalMaskInterrupt>
   26768:	2301      	movs	r3, #1
   2676a:	2207      	movs	r2, #7
   2676c:	f8c5 3818 	str.w	r3, [r5, #2072]	; 0x818
   26770:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
   26774:	f8c5 37c4 	str.w	r3, [r5, #1988]	; 0x7c4
   26778:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   2677a:	f8c5 37cc 	str.w	r3, [r5, #1996]	; 0x7cc
   2677e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   26780:	f8c5 37d0 	str.w	r3, [r5, #2000]	; 0x7d0
   26784:	f8c5 97c0 	str.w	r9, [r5, #1984]	; 0x7c0
   26788:	6823      	ldr	r3, [r4, #0]
   2678a:	b15b      	cbz	r3, 267a4 <ProcessHashDrv+0xac>
   2678c:	3b01      	subs	r3, #1
   2678e:	2b01      	cmp	r3, #1
   26790:	d818      	bhi.n	267c4 <ProcessHashDrv+0xcc>
   26792:	6a63      	ldr	r3, [r4, #36]	; 0x24
   26794:	f8c5 365c 	str.w	r3, [r5, #1628]	; 0x65c
   26798:	6a23      	ldr	r3, [r4, #32]
   2679a:	f8c5 3658 	str.w	r3, [r5, #1624]	; 0x658
   2679e:	69e3      	ldr	r3, [r4, #28]
   267a0:	f8c5 3654 	str.w	r3, [r5, #1620]	; 0x654
   267a4:	4b58      	ldr	r3, [pc, #352]	; (26908 <ProcessHashDrv+0x210>)
   267a6:	69a2      	ldr	r2, [r4, #24]
   267a8:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   267ac:	6962      	ldr	r2, [r4, #20]
   267ae:	f8c3 264c 	str.w	r2, [r3, #1612]	; 0x64c
   267b2:	6922      	ldr	r2, [r4, #16]
   267b4:	f8c3 2648 	str.w	r2, [r3, #1608]	; 0x648
   267b8:	68e2      	ldr	r2, [r4, #12]
   267ba:	f8c3 2644 	str.w	r2, [r3, #1604]	; 0x644
   267be:	68a2      	ldr	r2, [r4, #8]
   267c0:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
   267c4:	4a50      	ldr	r2, [pc, #320]	; (26908 <ProcessHashDrv+0x210>)
   267c6:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   267ca:	2b00      	cmp	r3, #0
   267cc:	d1fb      	bne.n	267c6 <ProcessHashDrv+0xce>
   267ce:	f1b8 0f00 	cmp.w	r8, #0
   267d2:	d05f      	beq.n	26894 <ProcessHashDrv+0x19c>
   267d4:	6863      	ldr	r3, [r4, #4]
   267d6:	2b01      	cmp	r3, #1
   267d8:	bf08      	it	eq
   267da:	f8c2 3684 	streq.w	r3, [r2, #1668]	; 0x684
   267de:	4b4a      	ldr	r3, [pc, #296]	; (26908 <ProcessHashDrv+0x210>)
   267e0:	683a      	ldr	r2, [r7, #0]
   267e2:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   267e6:	2040      	movs	r0, #64	; 0x40
   267e8:	f8c3 8c2c 	str.w	r8, [r3, #3116]	; 0xc2c
   267ec:	f7ff f800 	bl	257f0 <CC_HalWaitInterrupt>
   267f0:	4606      	mov	r6, r0
   267f2:	4a45      	ldr	r2, [pc, #276]	; (26908 <ProcessHashDrv+0x210>)
   267f4:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   267f8:	2b00      	cmp	r3, #0
   267fa:	d1fb      	bne.n	267f4 <ProcessHashDrv+0xfc>
   267fc:	4a42      	ldr	r2, [pc, #264]	; (26908 <ProcessHashDrv+0x210>)
   267fe:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   26802:	2b00      	cmp	r3, #0
   26804:	d1fb      	bne.n	267fe <ProcessHashDrv+0x106>
   26806:	6823      	ldr	r3, [r4, #0]
   26808:	b15b      	cbz	r3, 26822 <ProcessHashDrv+0x12a>
   2680a:	3b01      	subs	r3, #1
   2680c:	2b01      	cmp	r3, #1
   2680e:	d818      	bhi.n	26842 <ProcessHashDrv+0x14a>
   26810:	f8d2 365c 	ldr.w	r3, [r2, #1628]	; 0x65c
   26814:	6263      	str	r3, [r4, #36]	; 0x24
   26816:	f8d2 3658 	ldr.w	r3, [r2, #1624]	; 0x658
   2681a:	6223      	str	r3, [r4, #32]
   2681c:	f8d2 3654 	ldr.w	r3, [r2, #1620]	; 0x654
   26820:	61e3      	str	r3, [r4, #28]
   26822:	4b39      	ldr	r3, [pc, #228]	; (26908 <ProcessHashDrv+0x210>)
   26824:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   26828:	61a2      	str	r2, [r4, #24]
   2682a:	f8d3 264c 	ldr.w	r2, [r3, #1612]	; 0x64c
   2682e:	6162      	str	r2, [r4, #20]
   26830:	f8d3 2648 	ldr.w	r2, [r3, #1608]	; 0x648
   26834:	6122      	str	r2, [r4, #16]
   26836:	f8d3 2644 	ldr.w	r2, [r3, #1604]	; 0x644
   2683a:	60e2      	str	r2, [r4, #12]
   2683c:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
   26840:	60a3      	str	r3, [r4, #8]
   26842:	4a31      	ldr	r2, [pc, #196]	; (26908 <ProcessHashDrv+0x210>)
   26844:	f8d2 17cc 	ldr.w	r1, [r2, #1996]	; 0x7cc
   26848:	64a1      	str	r1, [r4, #72]	; 0x48
   2684a:	f8d2 17d0 	ldr.w	r1, [r2, #2000]	; 0x7d0
   2684e:	64e1      	str	r1, [r4, #76]	; 0x4c
   26850:	2300      	movs	r3, #0
   26852:	2101      	movs	r1, #1
   26854:	f8c2 17c4 	str.w	r1, [r2, #1988]	; 0x7c4
   26858:	f8c2 3684 	str.w	r3, [r2, #1668]	; 0x684
   2685c:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   26860:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   26864:	2b00      	cmp	r3, #0
   26866:	d1fb      	bne.n	26860 <ProcessHashDrv+0x168>
   26868:	f8c2 3818 	str.w	r3, [r2, #2072]	; 0x818
   2686c:	2e00      	cmp	r6, #0
   2686e:	d13b      	bne.n	268e8 <ProcessHashDrv+0x1f0>
   26870:	4b25      	ldr	r3, [pc, #148]	; (26908 <ProcessHashDrv+0x210>)
   26872:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   26876:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   2687a:	f7fe ffb3 	bl	257e4 <CC_HalMaskInterrupt>
   2687e:	2001      	movs	r0, #1
   26880:	f7ff f87c 	bl	2597c <CC_PalPowerSaveModeSelect>
   26884:	bb60      	cbnz	r0, 268e0 <ProcessHashDrv+0x1e8>
   26886:	481f      	ldr	r0, [pc, #124]	; (26904 <ProcessHashDrv+0x20c>)
   26888:	f7ff f850 	bl	2592c <CC_PalMutexUnlock>
   2688c:	bb10      	cbnz	r0, 268d4 <ProcessHashDrv+0x1dc>
   2688e:	4630      	mov	r0, r6
   26890:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   26894:	2304      	movs	r3, #4
   26896:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   2689a:	e7aa      	b.n	267f2 <ProcessHashDrv+0xfa>
   2689c:	4819      	ldr	r0, [pc, #100]	; (26904 <ProcessHashDrv+0x20c>)
   2689e:	f04f 31ff 	mov.w	r1, #4294967295
   268a2:	f04f 0901 	mov.w	r9, #1
   268a6:	f7ff f839 	bl	2591c <CC_PalMutexLock>
   268aa:	2800      	cmp	r0, #0
   268ac:	f43f af41 	beq.w	26732 <ProcessHashDrv+0x3a>
   268b0:	4816      	ldr	r0, [pc, #88]	; (2690c <ProcessHashDrv+0x214>)
   268b2:	f7fe f927 	bl	24b04 <CC_PalAbort>
   268b6:	2000      	movs	r0, #0
   268b8:	f7ff f860 	bl	2597c <CC_PalPowerSaveModeSelect>
   268bc:	4606      	mov	r6, r0
   268be:	2800      	cmp	r0, #0
   268c0:	f43f af3e 	beq.w	26740 <ProcessHashDrv+0x48>
   268c4:	4812      	ldr	r0, [pc, #72]	; (26910 <ProcessHashDrv+0x218>)
   268c6:	f7fe f91d 	bl	24b04 <CC_PalAbort>
   268ca:	e739      	b.n	26740 <ProcessHashDrv+0x48>
   268cc:	4e11      	ldr	r6, [pc, #68]	; (26914 <ProcessHashDrv+0x21c>)
   268ce:	4630      	mov	r0, r6
   268d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   268d4:	4810      	ldr	r0, [pc, #64]	; (26918 <ProcessHashDrv+0x220>)
   268d6:	f7fe f915 	bl	24b04 <CC_PalAbort>
   268da:	4630      	mov	r0, r6
   268dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   268e0:	480e      	ldr	r0, [pc, #56]	; (2691c <ProcessHashDrv+0x224>)
   268e2:	f7fe f90f 	bl	24b04 <CC_PalAbort>
   268e6:	e7ce      	b.n	26886 <ProcessHashDrv+0x18e>
   268e8:	2110      	movs	r1, #16
   268ea:	f104 0008 	add.w	r0, r4, #8
   268ee:	f7fe fffd 	bl	258ec <CC_PalMemSetZeroPlat>
   268f2:	e7bd      	b.n	26870 <ProcessHashDrv+0x178>
   268f4:	4e0a      	ldr	r6, [pc, #40]	; (26920 <ProcessHashDrv+0x228>)
   268f6:	4630      	mov	r0, r6
   268f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   268fc:	f44f 0673 	mov.w	r6, #15925248	; 0xf30000
   26900:	e7c5      	b.n	2688e <ProcessHashDrv+0x196>
   26902:	bf00      	nop
   26904:	20000898 	.word	0x20000898
   26908:	5002b000 	.word	0x5002b000
   2690c:	0002d694 	.word	0x0002d694
   26910:	0002d6ac 	.word	0x0002d6ac
   26914:	00f30001 	.word	0x00f30001
   26918:	0002d6ec 	.word	0x0002d6ec
   2691c:	0002d6cc 	.word	0x0002d6cc
   26920:	00f30003 	.word	0x00f30003

00026924 <FinishHashDrv>:
   26924:	b398      	cbz	r0, 2698e <FinishHashDrv+0x6a>
   26926:	b470      	push	{r4, r5, r6}
   26928:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
   2692c:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   26930:	ba26      	rev	r6, r4
   26932:	ba0d      	rev	r5, r1
   26934:	ba14      	rev	r4, r2
   26936:	ba19      	rev	r1, r3
   26938:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
   2693c:	ba12      	rev	r2, r2
   2693e:	e9c0 4104 	strd	r4, r1, [r0, #16]
   26942:	6182      	str	r2, [r0, #24]
   26944:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
   26948:	e9c0 6502 	strd	r6, r5, [r0, #8]
   2694c:	ba1b      	rev	r3, r3
   2694e:	ba25      	rev	r5, r4
   26950:	e9c0 3507 	strd	r3, r5, [r0, #28]
   26954:	ba14      	rev	r4, r2
   26956:	e9d0 230b 	ldrd	r2, r3, [r0, #44]	; 0x2c
   2695a:	6a81      	ldr	r1, [r0, #40]	; 0x28
   2695c:	ba12      	rev	r2, r2
   2695e:	ba09      	rev	r1, r1
   26960:	e9c0 4109 	strd	r4, r1, [r0, #36]	; 0x24
   26964:	62c2      	str	r2, [r0, #44]	; 0x2c
   26966:	e9d0 420d 	ldrd	r4, r2, [r0, #52]	; 0x34
   2696a:	ba1b      	rev	r3, r3
   2696c:	ba25      	rev	r5, r4
   2696e:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   26972:	ba14      	rev	r4, r2
   26974:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
   26978:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
   2697a:	ba12      	rev	r2, r2
   2697c:	ba09      	rev	r1, r1
   2697e:	ba1b      	rev	r3, r3
   26980:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   26984:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   26988:	2000      	movs	r0, #0
   2698a:	bc70      	pop	{r4, r5, r6}
   2698c:	4770      	bx	lr
   2698e:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   26992:	4770      	bx	lr

00026994 <LoadAesKey>:
   26994:	2800      	cmp	r0, #0
   26996:	d047      	beq.n	26a28 <LoadAesKey+0x94>
   26998:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   2699c:	2b00      	cmp	r3, #0
   2699e:	d034      	beq.n	26a0a <LoadAesKey+0x76>
   269a0:	2b03      	cmp	r3, #3
   269a2:	b510      	push	{r4, lr}
   269a4:	d013      	beq.n	269ce <LoadAesKey+0x3a>
   269a6:	4822      	ldr	r0, [pc, #136]	; (26a30 <LoadAesKey+0x9c>)
   269a8:	4c22      	ldr	r4, [pc, #136]	; (26a34 <LoadAesKey+0xa0>)
   269aa:	6822      	ldr	r2, [r4, #0]
   269ac:	4b22      	ldr	r3, [pc, #136]	; (26a38 <LoadAesKey+0xa4>)
   269ae:	6812      	ldr	r2, [r2, #0]
   269b0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   269b4:	6822      	ldr	r2, [r4, #0]
   269b6:	6852      	ldr	r2, [r2, #4]
   269b8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   269bc:	6822      	ldr	r2, [r4, #0]
   269be:	6892      	ldr	r2, [r2, #8]
   269c0:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   269c4:	6822      	ldr	r2, [r4, #0]
   269c6:	68d2      	ldr	r2, [r2, #12]
   269c8:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   269cc:	bd10      	pop	{r4, pc}
   269ce:	6b01      	ldr	r1, [r0, #48]	; 0x30
   269d0:	6c00      	ldr	r0, [r0, #64]	; 0x40
   269d2:	4c18      	ldr	r4, [pc, #96]	; (26a34 <LoadAesKey+0xa0>)
   269d4:	f000 fba8 	bl	27128 <kmu_validate_kdr_slot_and_size>
   269d8:	2800      	cmp	r0, #0
   269da:	d1e6      	bne.n	269aa <LoadAesKey+0x16>
   269dc:	6822      	ldr	r2, [r4, #0]
   269de:	4b16      	ldr	r3, [pc, #88]	; (26a38 <LoadAesKey+0xa4>)
   269e0:	6812      	ldr	r2, [r2, #0]
   269e2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   269e6:	6822      	ldr	r2, [r4, #0]
   269e8:	6852      	ldr	r2, [r2, #4]
   269ea:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   269ee:	6822      	ldr	r2, [r4, #0]
   269f0:	6892      	ldr	r2, [r2, #8]
   269f2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   269f6:	6822      	ldr	r2, [r4, #0]
   269f8:	68d2      	ldr	r2, [r2, #12]
   269fa:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   269fe:	f000 fba1 	bl	27144 <kmu_use_kdr_key>
   26a02:	2800      	cmp	r0, #0
   26a04:	d1d1      	bne.n	269aa <LoadAesKey+0x16>
   26a06:	2000      	movs	r0, #0
   26a08:	bd10      	pop	{r4, pc}
   26a0a:	4b0b      	ldr	r3, [pc, #44]	; (26a38 <LoadAesKey+0xa4>)
   26a0c:	6902      	ldr	r2, [r0, #16]
   26a0e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   26a12:	6942      	ldr	r2, [r0, #20]
   26a14:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   26a18:	6982      	ldr	r2, [r0, #24]
   26a1a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   26a1e:	69c2      	ldr	r2, [r0, #28]
   26a20:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   26a24:	2000      	movs	r0, #0
   26a26:	4770      	bx	lr
   26a28:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   26a2c:	4770      	bx	lr
   26a2e:	bf00      	nop
   26a30:	00f10009 	.word	0x00f10009
   26a34:	20000884 	.word	0x20000884
   26a38:	5002b000 	.word	0x5002b000

00026a3c <InitAes.part.0>:
   26a3c:	4a37      	ldr	r2, [pc, #220]	; (26b1c <InitAes.part.0+0xe0>)
   26a3e:	b538      	push	{r3, r4, r5, lr}
   26a40:	4604      	mov	r4, r0
   26a42:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   26a46:	2b00      	cmp	r3, #0
   26a48:	d1fb      	bne.n	26a42 <InitAes.part.0+0x6>
   26a4a:	4a34      	ldr	r2, [pc, #208]	; (26b1c <InitAes.part.0+0xe0>)
   26a4c:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   26a50:	2b00      	cmp	r3, #0
   26a52:	d1fb      	bne.n	26a4c <InitAes.part.0+0x10>
   26a54:	4a31      	ldr	r2, [pc, #196]	; (26b1c <InitAes.part.0+0xe0>)
   26a56:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	; 0xd20
   26a5a:	2b00      	cmp	r3, #0
   26a5c:	d1fb      	bne.n	26a56 <InitAes.part.0+0x1a>
   26a5e:	4a2f      	ldr	r2, [pc, #188]	; (26b1c <InitAes.part.0+0xe0>)
   26a60:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   26a64:	2b00      	cmp	r3, #0
   26a66:	d1fb      	bne.n	26a60 <InitAes.part.0+0x24>
   26a68:	4a2c      	ldr	r2, [pc, #176]	; (26b1c <InitAes.part.0+0xe0>)
   26a6a:	f8d2 3d38 	ldr.w	r3, [r2, #3384]	; 0xd38
   26a6e:	2b00      	cmp	r3, #0
   26a70:	d1fb      	bne.n	26a6a <InitAes.part.0+0x2e>
   26a72:	4d2a      	ldr	r5, [pc, #168]	; (26b1c <InitAes.part.0+0xe0>)
   26a74:	f8d5 3c38 	ldr.w	r3, [r5, #3128]	; 0xc38
   26a78:	2b00      	cmp	r3, #0
   26a7a:	d1fb      	bne.n	26a74 <InitAes.part.0+0x38>
   26a7c:	f04f 30ff 	mov.w	r0, #4294967295
   26a80:	f7fe fea2 	bl	257c8 <CC_HalClearInterruptBit>
   26a84:	6b63      	ldr	r3, [r4, #52]	; 0x34
   26a86:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   26a8a:	f023 0304 	bic.w	r3, r3, #4
   26a8e:	2b03      	cmp	r3, #3
   26a90:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   26a92:	d039      	beq.n	26b08 <InitAes.part.0+0xcc>
   26a94:	2b01      	cmp	r3, #1
   26a96:	bf0c      	ite	eq
   26a98:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   26a9c:	f020 0020 	bicne.w	r0, r0, #32
   26aa0:	f7fe fea0 	bl	257e4 <CC_HalMaskInterrupt>
   26aa4:	4a1d      	ldr	r2, [pc, #116]	; (26b1c <InitAes.part.0+0xe0>)
   26aa6:	2301      	movs	r3, #1
   26aa8:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
   26aac:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   26ab0:	2b00      	cmp	r3, #0
   26ab2:	d1fb      	bne.n	26aac <InitAes.part.0+0x70>
   26ab4:	4a19      	ldr	r2, [pc, #100]	; (26b1c <InitAes.part.0+0xe0>)
   26ab6:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   26aba:	2b00      	cmp	r3, #0
   26abc:	d1fb      	bne.n	26ab6 <InitAes.part.0+0x7a>
   26abe:	4917      	ldr	r1, [pc, #92]	; (26b1c <InitAes.part.0+0xe0>)
   26ac0:	f8c2 34bc 	str.w	r3, [r2, #1212]	; 0x4bc
   26ac4:	f8d1 3910 	ldr.w	r3, [r1, #2320]	; 0x910
   26ac8:	2b00      	cmp	r3, #0
   26aca:	d1fb      	bne.n	26ac4 <InitAes.part.0+0x88>
   26acc:	4a13      	ldr	r2, [pc, #76]	; (26b1c <InitAes.part.0+0xe0>)
   26ace:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   26ad2:	2b00      	cmp	r3, #0
   26ad4:	d1fb      	bne.n	26ace <InitAes.part.0+0x92>
   26ad6:	6b62      	ldr	r2, [r4, #52]	; 0x34
   26ad8:	f022 0104 	bic.w	r1, r2, #4
   26adc:	2903      	cmp	r1, #3
   26ade:	bf18      	it	ne
   26ae0:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   26ae2:	490e      	ldr	r1, [pc, #56]	; (26b1c <InitAes.part.0+0xe0>)
   26ae4:	ea4f 0282 	mov.w	r2, r2, lsl #2
   26ae8:	bf18      	it	ne
   26aea:	f003 0301 	andne.w	r3, r3, #1
   26aee:	f002 021c 	and.w	r2, r2, #28
   26af2:	431a      	orrs	r2, r3
   26af4:	f8c1 24c0 	str.w	r2, [r1, #1216]	; 0x4c0
   26af8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   26afa:	2b07      	cmp	r3, #7
   26afc:	bf04      	itt	eq
   26afe:	2301      	moveq	r3, #1
   26b00:	f8c1 347c 	streq.w	r3, [r1, #1148]	; 0x47c
   26b04:	2000      	movs	r0, #0
   26b06:	bd38      	pop	{r3, r4, r5, pc}
   26b08:	2b01      	cmp	r3, #1
   26b0a:	bf0c      	ite	eq
   26b0c:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   26b10:	f020 0010 	bicne.w	r0, r0, #16
   26b14:	f7fe fe66 	bl	257e4 <CC_HalMaskInterrupt>
   26b18:	e7c4      	b.n	26aa4 <InitAes.part.0+0x68>
   26b1a:	bf00      	nop
   26b1c:	5002b000 	.word	0x5002b000

00026b20 <write_invalid_key>:
   26b20:	4a09      	ldr	r2, [pc, #36]	; (26b48 <write_invalid_key+0x28>)
   26b22:	4b0a      	ldr	r3, [pc, #40]	; (26b4c <write_invalid_key+0x2c>)
   26b24:	6811      	ldr	r1, [r2, #0]
   26b26:	6809      	ldr	r1, [r1, #0]
   26b28:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
   26b2c:	6811      	ldr	r1, [r2, #0]
   26b2e:	6849      	ldr	r1, [r1, #4]
   26b30:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
   26b34:	6811      	ldr	r1, [r2, #0]
   26b36:	6889      	ldr	r1, [r1, #8]
   26b38:	f8c3 1408 	str.w	r1, [r3, #1032]	; 0x408
   26b3c:	6812      	ldr	r2, [r2, #0]
   26b3e:	68d2      	ldr	r2, [r2, #12]
   26b40:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   26b44:	4770      	bx	lr
   26b46:	bf00      	nop
   26b48:	20000884 	.word	0x20000884
   26b4c:	5002b000 	.word	0x5002b000

00026b50 <ProcessAesDrv>:
   26b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26b54:	b085      	sub	sp, #20
   26b56:	2900      	cmp	r1, #0
   26b58:	f000 80ec 	beq.w	26d34 <ProcessAesDrv+0x1e4>
   26b5c:	4690      	mov	r8, r2
   26b5e:	2a00      	cmp	r2, #0
   26b60:	f000 80e8 	beq.w	26d34 <ProcessAesDrv+0x1e4>
   26b64:	4605      	mov	r5, r0
   26b66:	2800      	cmp	r0, #0
   26b68:	f000 8129 	beq.w	26dbe <ProcessAesDrv+0x26e>
   26b6c:	4699      	mov	r9, r3
   26b6e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   26b70:	460e      	mov	r6, r1
   26b72:	2b00      	cmp	r3, #0
   26b74:	d152      	bne.n	26c1c <ProcessAesDrv+0xcc>
   26b76:	f5b9 5f80 	cmp.w	r9, #4096	; 0x1000
   26b7a:	d254      	bcs.n	26c26 <ProcessAesDrv+0xd6>
   26b7c:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   26b80:	2b04      	cmp	r3, #4
   26b82:	f000 80ff 	beq.w	26d84 <ProcessAesDrv+0x234>
   26b86:	2700      	movs	r7, #0
   26b88:	48ad      	ldr	r0, [pc, #692]	; (26e40 <ProcessAesDrv+0x2f0>)
   26b8a:	f04f 31ff 	mov.w	r1, #4294967295
   26b8e:	f7fe fec5 	bl	2591c <CC_PalMutexLock>
   26b92:	2800      	cmp	r0, #0
   26b94:	f040 80d5 	bne.w	26d42 <ProcessAesDrv+0x1f2>
   26b98:	2000      	movs	r0, #0
   26b9a:	f7fe feef 	bl	2597c <CC_PalPowerSaveModeSelect>
   26b9e:	2800      	cmp	r0, #0
   26ba0:	f040 80d8 	bne.w	26d54 <ProcessAesDrv+0x204>
   26ba4:	48a7      	ldr	r0, [pc, #668]	; (26e44 <ProcessAesDrv+0x2f4>)
   26ba6:	2301      	movs	r3, #1
   26ba8:	f8c0 3810 	str.w	r3, [r0, #2064]	; 0x810
   26bac:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
   26bb0:	2c00      	cmp	r4, #0
   26bb2:	d1fb      	bne.n	26bac <ProcessAesDrv+0x5c>
   26bb4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   26bb6:	2b03      	cmp	r3, #3
   26bb8:	dc3a      	bgt.n	26c30 <ProcessAesDrv+0xe0>
   26bba:	2b00      	cmp	r3, #0
   26bbc:	da3b      	bge.n	26c36 <ProcessAesDrv+0xe6>
   26bbe:	4ca2      	ldr	r4, [pc, #648]	; (26e48 <ProcessAesDrv+0x2f8>)
   26bc0:	4aa0      	ldr	r2, [pc, #640]	; (26e44 <ProcessAesDrv+0x2f4>)
   26bc2:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   26bc6:	2b00      	cmp	r3, #0
   26bc8:	d1fb      	bne.n	26bc2 <ProcessAesDrv+0x72>
   26bca:	2f00      	cmp	r7, #0
   26bcc:	f040 80d1 	bne.w	26d72 <ProcessAesDrv+0x222>
   26bd0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   26bd2:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   26bd4:	f023 0304 	bic.w	r3, r3, #4
   26bd8:	2b03      	cmp	r3, #3
   26bda:	4b9a      	ldr	r3, [pc, #616]	; (26e44 <ProcessAesDrv+0x2f4>)
   26bdc:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   26be0:	f000 809f 	beq.w	26d22 <ProcessAesDrv+0x1d2>
   26be4:	2a01      	cmp	r2, #1
   26be6:	bf0c      	ite	eq
   26be8:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   26bec:	f040 0020 	orrne.w	r0, r0, #32
   26bf0:	f7fe fdf8 	bl	257e4 <CC_HalMaskInterrupt>
   26bf4:	4b93      	ldr	r3, [pc, #588]	; (26e44 <ProcessAesDrv+0x2f4>)
   26bf6:	2200      	movs	r2, #0
   26bf8:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
   26bfc:	2001      	movs	r0, #1
   26bfe:	f7fe febd 	bl	2597c <CC_PalPowerSaveModeSelect>
   26c02:	2800      	cmp	r0, #0
   26c04:	f040 80b1 	bne.w	26d6a <ProcessAesDrv+0x21a>
   26c08:	488d      	ldr	r0, [pc, #564]	; (26e40 <ProcessAesDrv+0x2f0>)
   26c0a:	f7fe fe8f 	bl	2592c <CC_PalMutexUnlock>
   26c0e:	2800      	cmp	r0, #0
   26c10:	f040 80a4 	bne.w	26d5c <ProcessAesDrv+0x20c>
   26c14:	4620      	mov	r0, r4
   26c16:	b005      	add	sp, #20
   26c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26c1c:	2b01      	cmp	r3, #1
   26c1e:	d1ad      	bne.n	26b7c <ProcessAesDrv+0x2c>
   26c20:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
   26c24:	d3aa      	bcc.n	26b7c <ProcessAesDrv+0x2c>
   26c26:	4c89      	ldr	r4, [pc, #548]	; (26e4c <ProcessAesDrv+0x2fc>)
   26c28:	4620      	mov	r0, r4
   26c2a:	b005      	add	sp, #20
   26c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26c30:	3b06      	subs	r3, #6
   26c32:	2b01      	cmp	r3, #1
   26c34:	d8c3      	bhi.n	26bbe <ProcessAesDrv+0x6e>
   26c36:	6bab      	ldr	r3, [r5, #56]	; 0x38
   26c38:	2b01      	cmp	r3, #1
   26c3a:	f200 80be 	bhi.w	26dba <ProcessAesDrv+0x26a>
   26c3e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   26c40:	2b01      	cmp	r3, #1
   26c42:	d87c      	bhi.n	26d3e <ProcessAesDrv+0x1ee>
   26c44:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   26c46:	2b01      	cmp	r3, #1
   26c48:	f200 80e8 	bhi.w	26e1c <ProcessAesDrv+0x2cc>
   26c4c:	4628      	mov	r0, r5
   26c4e:	f7ff fef5 	bl	26a3c <InitAes.part.0>
   26c52:	4604      	mov	r4, r0
   26c54:	2800      	cmp	r0, #0
   26c56:	d1b3      	bne.n	26bc0 <ProcessAesDrv+0x70>
   26c58:	4628      	mov	r0, r5
   26c5a:	f7ff fe9b 	bl	26994 <LoadAesKey>
   26c5e:	4604      	mov	r4, r0
   26c60:	2800      	cmp	r0, #0
   26c62:	d1ad      	bne.n	26bc0 <ProcessAesDrv+0x70>
   26c64:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   26c66:	2b07      	cmp	r3, #7
   26c68:	d8a9      	bhi.n	26bbe <ProcessAesDrv+0x6e>
   26c6a:	2201      	movs	r2, #1
   26c6c:	409a      	lsls	r2, r3
   26c6e:	f012 0f8a 	tst.w	r2, #138	; 0x8a
   26c72:	f040 80d5 	bne.w	26e20 <ProcessAesDrv+0x2d0>
   26c76:	f012 0f44 	tst.w	r2, #68	; 0x44
   26c7a:	f040 80ba 	bne.w	26df2 <ProcessAesDrv+0x2a2>
   26c7e:	07d2      	lsls	r2, r2, #31
   26c80:	d59d      	bpl.n	26bbe <ProcessAesDrv+0x6e>
   26c82:	f023 0304 	bic.w	r3, r3, #4
   26c86:	2b03      	cmp	r3, #3
   26c88:	6832      	ldr	r2, [r6, #0]
   26c8a:	d00d      	beq.n	26ca8 <ProcessAesDrv+0x158>
   26c8c:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   26c8e:	f8d8 1000 	ldr.w	r1, [r8]
   26c92:	2b01      	cmp	r3, #1
   26c94:	4b6b      	ldr	r3, [pc, #428]	; (26e44 <ProcessAesDrv+0x2f4>)
   26c96:	bf0b      	itete	eq
   26c98:	f8c3 1d28 	streq.w	r1, [r3, #3368]	; 0xd28
   26c9c:	f8c3 1d30 	strne.w	r1, [r3, #3376]	; 0xd30
   26ca0:	f8c3 9d2c 	streq.w	r9, [r3, #3372]	; 0xd2c
   26ca4:	f8c3 9d34 	strne.w	r9, [r3, #3380]	; 0xd34
   26ca8:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   26caa:	2b01      	cmp	r3, #1
   26cac:	4b65      	ldr	r3, [pc, #404]	; (26e44 <ProcessAesDrv+0x2f4>)
   26cae:	bf0b      	itete	eq
   26cb0:	f8c3 2c28 	streq.w	r2, [r3, #3112]	; 0xc28
   26cb4:	f8c3 2c30 	strne.w	r2, [r3, #3120]	; 0xc30
   26cb8:	f8c3 9c2c 	streq.w	r9, [r3, #3116]	; 0xc2c
   26cbc:	f8c3 9c34 	strne.w	r9, [r3, #3124]	; 0xc34
   26cc0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   26cc2:	f023 0304 	bic.w	r3, r3, #4
   26cc6:	2b03      	cmp	r3, #3
   26cc8:	f000 80a2 	beq.w	26e10 <ProcessAesDrv+0x2c0>
   26ccc:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   26cce:	2b01      	cmp	r3, #1
   26cd0:	bf14      	ite	ne
   26cd2:	2020      	movne	r0, #32
   26cd4:	2080      	moveq	r0, #128	; 0x80
   26cd6:	f7fe fd8b 	bl	257f0 <CC_HalWaitInterrupt>
   26cda:	4604      	mov	r4, r0
   26cdc:	2800      	cmp	r0, #0
   26cde:	f47f af6f 	bne.w	26bc0 <ProcessAesDrv+0x70>
   26ce2:	4b58      	ldr	r3, [pc, #352]	; (26e44 <ProcessAesDrv+0x2f4>)
   26ce4:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
   26ce8:	2c00      	cmp	r4, #0
   26cea:	d1fb      	bne.n	26ce4 <ProcessAesDrv+0x194>
   26cec:	6b69      	ldr	r1, [r5, #52]	; 0x34
   26cee:	2907      	cmp	r1, #7
   26cf0:	d814      	bhi.n	26d1c <ProcessAesDrv+0x1cc>
   26cf2:	2201      	movs	r2, #1
   26cf4:	408a      	lsls	r2, r1
   26cf6:	f012 0f8a 	tst.w	r2, #138	; 0x8a
   26cfa:	f040 80bb 	bne.w	26e74 <ProcessAesDrv+0x324>
   26cfe:	f012 0f44 	tst.w	r2, #68	; 0x44
   26d02:	d00b      	beq.n	26d1c <ProcessAesDrv+0x1cc>
   26d04:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   26d08:	602a      	str	r2, [r5, #0]
   26d0a:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   26d0e:	606a      	str	r2, [r5, #4]
   26d10:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   26d14:	60aa      	str	r2, [r5, #8]
   26d16:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   26d1a:	60eb      	str	r3, [r5, #12]
   26d1c:	2301      	movs	r3, #1
   26d1e:	65ab      	str	r3, [r5, #88]	; 0x58
   26d20:	e74e      	b.n	26bc0 <ProcessAesDrv+0x70>
   26d22:	2a01      	cmp	r2, #1
   26d24:	bf0c      	ite	eq
   26d26:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   26d2a:	f040 0010 	orrne.w	r0, r0, #16
   26d2e:	f7fe fd59 	bl	257e4 <CC_HalMaskInterrupt>
   26d32:	e75f      	b.n	26bf4 <ProcessAesDrv+0xa4>
   26d34:	4c46      	ldr	r4, [pc, #280]	; (26e50 <ProcessAesDrv+0x300>)
   26d36:	4620      	mov	r0, r4
   26d38:	b005      	add	sp, #20
   26d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26d3e:	4c45      	ldr	r4, [pc, #276]	; (26e54 <ProcessAesDrv+0x304>)
   26d40:	e73e      	b.n	26bc0 <ProcessAesDrv+0x70>
   26d42:	4845      	ldr	r0, [pc, #276]	; (26e58 <ProcessAesDrv+0x308>)
   26d44:	f7fd fede 	bl	24b04 <CC_PalAbort>
   26d48:	2000      	movs	r0, #0
   26d4a:	f7fe fe17 	bl	2597c <CC_PalPowerSaveModeSelect>
   26d4e:	2800      	cmp	r0, #0
   26d50:	f43f af28 	beq.w	26ba4 <ProcessAesDrv+0x54>
   26d54:	4841      	ldr	r0, [pc, #260]	; (26e5c <ProcessAesDrv+0x30c>)
   26d56:	f7fd fed5 	bl	24b04 <CC_PalAbort>
   26d5a:	e723      	b.n	26ba4 <ProcessAesDrv+0x54>
   26d5c:	4840      	ldr	r0, [pc, #256]	; (26e60 <ProcessAesDrv+0x310>)
   26d5e:	f7fd fed1 	bl	24b04 <CC_PalAbort>
   26d62:	4620      	mov	r0, r4
   26d64:	b005      	add	sp, #20
   26d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26d6a:	483e      	ldr	r0, [pc, #248]	; (26e64 <ProcessAesDrv+0x314>)
   26d6c:	f7fd feca 	bl	24b04 <CC_PalAbort>
   26d70:	e74a      	b.n	26c08 <ProcessAesDrv+0xb8>
   26d72:	2304      	movs	r3, #4
   26d74:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   26d78:	2120      	movs	r1, #32
   26d7a:	f105 0010 	add.w	r0, r5, #16
   26d7e:	f7fe fdb5 	bl	258ec <CC_PalMemSetZeroPlat>
   26d82:	e725      	b.n	26bd0 <ProcessAesDrv+0x80>
   26d84:	6b29      	ldr	r1, [r5, #48]	; 0x30
   26d86:	6c28      	ldr	r0, [r5, #64]	; 0x40
   26d88:	f000 f9c0 	bl	2710c <kmu_validate_slot_and_size>
   26d8c:	b998      	cbnz	r0, 26db6 <ProcessAesDrv+0x266>
   26d8e:	4f36      	ldr	r7, [pc, #216]	; (26e68 <ProcessAesDrv+0x318>)
   26d90:	4c2c      	ldr	r4, [pc, #176]	; (26e44 <ProcessAesDrv+0x2f4>)
   26d92:	683b      	ldr	r3, [r7, #0]
   26d94:	681b      	ldr	r3, [r3, #0]
   26d96:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   26d9a:	683b      	ldr	r3, [r7, #0]
   26d9c:	685b      	ldr	r3, [r3, #4]
   26d9e:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   26da2:	683b      	ldr	r3, [r7, #0]
   26da4:	689b      	ldr	r3, [r3, #8]
   26da6:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   26daa:	683b      	ldr	r3, [r7, #0]
   26dac:	68db      	ldr	r3, [r3, #12]
   26dae:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   26db2:	6b29      	ldr	r1, [r5, #48]	; 0x30
   26db4:	b131      	cbz	r1, 26dc4 <ProcessAesDrv+0x274>
   26db6:	2701      	movs	r7, #1
   26db8:	e6e6      	b.n	26b88 <ProcessAesDrv+0x38>
   26dba:	4c2c      	ldr	r4, [pc, #176]	; (26e6c <ProcessAesDrv+0x31c>)
   26dbc:	e700      	b.n	26bc0 <ProcessAesDrv+0x70>
   26dbe:	f44f 0471 	mov.w	r4, #15794176	; 0xf10000
   26dc2:	e727      	b.n	26c14 <ProcessAesDrv+0xc4>
   26dc4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   26dc6:	9301      	str	r3, [sp, #4]
   26dc8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   26dca:	9300      	str	r3, [sp, #0]
   26dcc:	f105 0a10 	add.w	sl, r5, #16
   26dd0:	f04f 0b10 	mov.w	fp, #16
   26dd4:	f8cd a008 	str.w	sl, [sp, #8]
   26dd8:	f8cd b00c 	str.w	fp, [sp, #12]
   26ddc:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
   26de0:	6c28      	ldr	r0, [r5, #64]	; 0x40
   26de2:	f000 f9b9 	bl	27158 <kmu_derive_cmac>
   26de6:	2800      	cmp	r0, #0
   26de8:	d151      	bne.n	26e8e <ProcessAesDrv+0x33e>
   26dea:	2300      	movs	r3, #0
   26dec:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   26df0:	e7e1      	b.n	26db6 <ProcessAesDrv+0x266>
   26df2:	4b14      	ldr	r3, [pc, #80]	; (26e44 <ProcessAesDrv+0x2f4>)
   26df4:	682a      	ldr	r2, [r5, #0]
   26df6:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   26dfa:	686a      	ldr	r2, [r5, #4]
   26dfc:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   26e00:	68aa      	ldr	r2, [r5, #8]
   26e02:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   26e06:	68ea      	ldr	r2, [r5, #12]
   26e08:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   26e0c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   26e0e:	e738      	b.n	26c82 <ProcessAesDrv+0x132>
   26e10:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   26e12:	2b01      	cmp	r3, #1
   26e14:	bf14      	ite	ne
   26e16:	2010      	movne	r0, #16
   26e18:	2040      	moveq	r0, #64	; 0x40
   26e1a:	e75c      	b.n	26cd6 <ProcessAesDrv+0x186>
   26e1c:	4c14      	ldr	r4, [pc, #80]	; (26e70 <ProcessAesDrv+0x320>)
   26e1e:	e6cf      	b.n	26bc0 <ProcessAesDrv+0x70>
   26e20:	4b08      	ldr	r3, [pc, #32]	; (26e44 <ProcessAesDrv+0x2f4>)
   26e22:	682a      	ldr	r2, [r5, #0]
   26e24:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   26e28:	686a      	ldr	r2, [r5, #4]
   26e2a:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   26e2e:	68aa      	ldr	r2, [r5, #8]
   26e30:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   26e34:	68ea      	ldr	r2, [r5, #12]
   26e36:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   26e3a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   26e3c:	e721      	b.n	26c82 <ProcessAesDrv+0x132>
   26e3e:	bf00      	nop
   26e40:	20000898 	.word	0x20000898
   26e44:	5002b000 	.word	0x5002b000
   26e48:	00f10001 	.word	0x00f10001
   26e4c:	00f10005 	.word	0x00f10005
   26e50:	00f1000b 	.word	0x00f1000b
   26e54:	00f10003 	.word	0x00f10003
   26e58:	0002d694 	.word	0x0002d694
   26e5c:	0002d6ac 	.word	0x0002d6ac
   26e60:	0002d6ec 	.word	0x0002d6ec
   26e64:	0002d6cc 	.word	0x0002d6cc
   26e68:	20000884 	.word	0x20000884
   26e6c:	00f10002 	.word	0x00f10002
   26e70:	00f10004 	.word	0x00f10004
   26e74:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   26e78:	602a      	str	r2, [r5, #0]
   26e7a:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   26e7e:	606a      	str	r2, [r5, #4]
   26e80:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   26e84:	60aa      	str	r2, [r5, #8]
   26e86:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   26e8a:	60eb      	str	r3, [r5, #12]
   26e8c:	e746      	b.n	26d1c <ProcessAesDrv+0x1cc>
   26e8e:	683b      	ldr	r3, [r7, #0]
   26e90:	681b      	ldr	r3, [r3, #0]
   26e92:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   26e96:	683b      	ldr	r3, [r7, #0]
   26e98:	685b      	ldr	r3, [r3, #4]
   26e9a:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   26e9e:	683b      	ldr	r3, [r7, #0]
   26ea0:	689b      	ldr	r3, [r3, #8]
   26ea2:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   26ea6:	683b      	ldr	r3, [r7, #0]
   26ea8:	68db      	ldr	r3, [r3, #12]
   26eaa:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   26eae:	4659      	mov	r1, fp
   26eb0:	4650      	mov	r0, sl
   26eb2:	f7fe fd1b 	bl	258ec <CC_PalMemSetZeroPlat>
   26eb6:	e798      	b.n	26dea <ProcessAesDrv+0x29a>

00026eb8 <FinishAesDrv>:
   26eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26ebc:	b309      	cbz	r1, 26f02 <FinishAesDrv+0x4a>
   26ebe:	b302      	cbz	r2, 26f02 <FinishAesDrv+0x4a>
   26ec0:	4604      	mov	r4, r0
   26ec2:	2800      	cmp	r0, #0
   26ec4:	f000 80af 	beq.w	27026 <FinishAesDrv+0x16e>
   26ec8:	461d      	mov	r5, r3
   26eca:	6b43      	ldr	r3, [r0, #52]	; 0x34
   26ecc:	2b07      	cmp	r3, #7
   26ece:	460e      	mov	r6, r1
   26ed0:	d01b      	beq.n	26f0a <FinishAesDrv+0x52>
   26ed2:	b95d      	cbnz	r5, 26eec <FinishAesDrv+0x34>
   26ed4:	2b03      	cmp	r3, #3
   26ed6:	d110      	bne.n	26efa <FinishAesDrv+0x42>
   26ed8:	6d83      	ldr	r3, [r0, #88]	; 0x58
   26eda:	b973      	cbnz	r3, 26efa <FinishAesDrv+0x42>
   26edc:	f100 0364 	add.w	r3, r0, #100	; 0x64
   26ee0:	6645      	str	r5, [r0, #100]	; 0x64
   26ee2:	6685      	str	r5, [r0, #104]	; 0x68
   26ee4:	66c5      	str	r5, [r0, #108]	; 0x6c
   26ee6:	6705      	str	r5, [r0, #112]	; 0x70
   26ee8:	600b      	str	r3, [r1, #0]
   26eea:	2510      	movs	r5, #16
   26eec:	462b      	mov	r3, r5
   26eee:	4631      	mov	r1, r6
   26ef0:	4620      	mov	r0, r4
   26ef2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   26ef6:	f7ff be2b 	b.w	26b50 <ProcessAesDrv>
   26efa:	462f      	mov	r7, r5
   26efc:	4638      	mov	r0, r7
   26efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26f02:	4f76      	ldr	r7, [pc, #472]	; (270dc <FinishAesDrv+0x224>)
   26f04:	4638      	mov	r0, r7
   26f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26f0a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   26f0c:	2b00      	cmp	r3, #0
   26f0e:	f040 808d 	bne.w	2702c <FinishAesDrv+0x174>
   26f12:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   26f16:	f080 8090 	bcs.w	2703a <FinishAesDrv+0x182>
   26f1a:	b91d      	cbnz	r5, 26f24 <FinishAesDrv+0x6c>
   26f1c:	6da3      	ldr	r3, [r4, #88]	; 0x58
   26f1e:	2b00      	cmp	r3, #0
   26f20:	f040 808b 	bne.w	2703a <FinishAesDrv+0x182>
   26f24:	486e      	ldr	r0, [pc, #440]	; (270e0 <FinishAesDrv+0x228>)
   26f26:	f04f 31ff 	mov.w	r1, #4294967295
   26f2a:	f7fe fcf7 	bl	2591c <CC_PalMutexLock>
   26f2e:	2800      	cmp	r0, #0
   26f30:	f040 808f 	bne.w	27052 <FinishAesDrv+0x19a>
   26f34:	2000      	movs	r0, #0
   26f36:	f7fe fd21 	bl	2597c <CC_PalPowerSaveModeSelect>
   26f3a:	2800      	cmp	r0, #0
   26f3c:	f040 8085 	bne.w	2704a <FinishAesDrv+0x192>
   26f40:	4a68      	ldr	r2, [pc, #416]	; (270e4 <FinishAesDrv+0x22c>)
   26f42:	2301      	movs	r3, #1
   26f44:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   26f48:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   26f4c:	2b00      	cmp	r3, #0
   26f4e:	d1fb      	bne.n	26f48 <FinishAesDrv+0x90>
   26f50:	6b63      	ldr	r3, [r4, #52]	; 0x34
   26f52:	2b03      	cmp	r3, #3
   26f54:	dd4f      	ble.n	26ff6 <FinishAesDrv+0x13e>
   26f56:	3b06      	subs	r3, #6
   26f58:	2b01      	cmp	r3, #1
   26f5a:	d84e      	bhi.n	26ffa <FinishAesDrv+0x142>
   26f5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   26f5e:	2b01      	cmp	r3, #1
   26f60:	d86d      	bhi.n	2703e <FinishAesDrv+0x186>
   26f62:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   26f64:	2b01      	cmp	r3, #1
   26f66:	d878      	bhi.n	2705a <FinishAesDrv+0x1a2>
   26f68:	6e23      	ldr	r3, [r4, #96]	; 0x60
   26f6a:	2b01      	cmp	r3, #1
   26f6c:	d877      	bhi.n	2705e <FinishAesDrv+0x1a6>
   26f6e:	4620      	mov	r0, r4
   26f70:	f7ff fd64 	bl	26a3c <InitAes.part.0>
   26f74:	4607      	mov	r7, r0
   26f76:	2800      	cmp	r0, #0
   26f78:	d140      	bne.n	26ffc <FinishAesDrv+0x144>
   26f7a:	4620      	mov	r0, r4
   26f7c:	f7ff fd0a 	bl	26994 <LoadAesKey>
   26f80:	4607      	mov	r7, r0
   26f82:	2800      	cmp	r0, #0
   26f84:	d13a      	bne.n	26ffc <FinishAesDrv+0x144>
   26f86:	6b62      	ldr	r2, [r4, #52]	; 0x34
   26f88:	2a07      	cmp	r2, #7
   26f8a:	d836      	bhi.n	26ffa <FinishAesDrv+0x142>
   26f8c:	2301      	movs	r3, #1
   26f8e:	4093      	lsls	r3, r2
   26f90:	f013 0f8a 	tst.w	r3, #138	; 0x8a
   26f94:	f040 8081 	bne.w	2709a <FinishAesDrv+0x1e2>
   26f98:	f013 0f44 	tst.w	r3, #68	; 0x44
   26f9c:	d16f      	bne.n	2707e <FinishAesDrv+0x1c6>
   26f9e:	07db      	lsls	r3, r3, #31
   26fa0:	d52b      	bpl.n	26ffa <FinishAesDrv+0x142>
   26fa2:	4b50      	ldr	r3, [pc, #320]	; (270e4 <FinishAesDrv+0x22c>)
   26fa4:	2201      	movs	r2, #1
   26fa6:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
   26faa:	f8c3 54bc 	str.w	r5, [r3, #1212]	; 0x4bc
   26fae:	6831      	ldr	r1, [r6, #0]
   26fb0:	2d00      	cmp	r5, #0
   26fb2:	d156      	bne.n	27062 <FinishAesDrv+0x1aa>
   26fb4:	6da1      	ldr	r1, [r4, #88]	; 0x58
   26fb6:	b909      	cbnz	r1, 26fbc <FinishAesDrv+0x104>
   26fb8:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
   26fbc:	4b49      	ldr	r3, [pc, #292]	; (270e4 <FinishAesDrv+0x22c>)
   26fbe:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
   26fc2:	2f00      	cmp	r7, #0
   26fc4:	d1fb      	bne.n	26fbe <FinishAesDrv+0x106>
   26fc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
   26fc8:	2907      	cmp	r1, #7
   26fca:	d817      	bhi.n	26ffc <FinishAesDrv+0x144>
   26fcc:	2201      	movs	r2, #1
   26fce:	408a      	lsls	r2, r1
   26fd0:	f012 0f8a 	tst.w	r2, #138	; 0x8a
   26fd4:	d16f      	bne.n	270b6 <FinishAesDrv+0x1fe>
   26fd6:	f012 0f44 	tst.w	r2, #68	; 0x44
   26fda:	d00f      	beq.n	26ffc <FinishAesDrv+0x144>
   26fdc:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   26fe0:	6022      	str	r2, [r4, #0]
   26fe2:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   26fe6:	6062      	str	r2, [r4, #4]
   26fe8:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   26fec:	60a2      	str	r2, [r4, #8]
   26fee:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   26ff2:	60e3      	str	r3, [r4, #12]
   26ff4:	e002      	b.n	26ffc <FinishAesDrv+0x144>
   26ff6:	2b00      	cmp	r3, #0
   26ff8:	dab0      	bge.n	26f5c <FinishAesDrv+0xa4>
   26ffa:	4f3b      	ldr	r7, [pc, #236]	; (270e8 <FinishAesDrv+0x230>)
   26ffc:	4a39      	ldr	r2, [pc, #228]	; (270e4 <FinishAesDrv+0x22c>)
   26ffe:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   27002:	2b00      	cmp	r3, #0
   27004:	d1fb      	bne.n	26ffe <FinishAesDrv+0x146>
   27006:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   2700a:	2001      	movs	r0, #1
   2700c:	f7fe fcb6 	bl	2597c <CC_PalPowerSaveModeSelect>
   27010:	b9b8      	cbnz	r0, 27042 <FinishAesDrv+0x18a>
   27012:	4833      	ldr	r0, [pc, #204]	; (270e0 <FinishAesDrv+0x228>)
   27014:	f7fe fc8a 	bl	2592c <CC_PalMutexUnlock>
   27018:	2800      	cmp	r0, #0
   2701a:	f43f af6f 	beq.w	26efc <FinishAesDrv+0x44>
   2701e:	4833      	ldr	r0, [pc, #204]	; (270ec <FinishAesDrv+0x234>)
   27020:	f7fd fd70 	bl	24b04 <CC_PalAbort>
   27024:	e76a      	b.n	26efc <FinishAesDrv+0x44>
   27026:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   2702a:	e767      	b.n	26efc <FinishAesDrv+0x44>
   2702c:	2b01      	cmp	r3, #1
   2702e:	f47f af74 	bne.w	26f1a <FinishAesDrv+0x62>
   27032:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   27036:	f4ff af70 	bcc.w	26f1a <FinishAesDrv+0x62>
   2703a:	4f2d      	ldr	r7, [pc, #180]	; (270f0 <FinishAesDrv+0x238>)
   2703c:	e75e      	b.n	26efc <FinishAesDrv+0x44>
   2703e:	4f2d      	ldr	r7, [pc, #180]	; (270f4 <FinishAesDrv+0x23c>)
   27040:	e7dc      	b.n	26ffc <FinishAesDrv+0x144>
   27042:	482d      	ldr	r0, [pc, #180]	; (270f8 <FinishAesDrv+0x240>)
   27044:	f7fd fd5e 	bl	24b04 <CC_PalAbort>
   27048:	e7e3      	b.n	27012 <FinishAesDrv+0x15a>
   2704a:	482c      	ldr	r0, [pc, #176]	; (270fc <FinishAesDrv+0x244>)
   2704c:	f7fd fd5a 	bl	24b04 <CC_PalAbort>
   27050:	e776      	b.n	26f40 <FinishAesDrv+0x88>
   27052:	482b      	ldr	r0, [pc, #172]	; (27100 <FinishAesDrv+0x248>)
   27054:	f7fd fd56 	bl	24b04 <CC_PalAbort>
   27058:	e76c      	b.n	26f34 <FinishAesDrv+0x7c>
   2705a:	4f2a      	ldr	r7, [pc, #168]	; (27104 <FinishAesDrv+0x24c>)
   2705c:	e7ce      	b.n	26ffc <FinishAesDrv+0x144>
   2705e:	4f2a      	ldr	r7, [pc, #168]	; (27108 <FinishAesDrv+0x250>)
   27060:	e7cc      	b.n	26ffc <FinishAesDrv+0x144>
   27062:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   27064:	2a01      	cmp	r2, #1
   27066:	d033      	beq.n	270d0 <FinishAesDrv+0x218>
   27068:	f8c3 1c30 	str.w	r1, [r3, #3120]	; 0xc30
   2706c:	2010      	movs	r0, #16
   2706e:	f8c3 5c34 	str.w	r5, [r3, #3124]	; 0xc34
   27072:	f7fe fbbd 	bl	257f0 <CC_HalWaitInterrupt>
   27076:	4607      	mov	r7, r0
   27078:	2800      	cmp	r0, #0
   2707a:	d09f      	beq.n	26fbc <FinishAesDrv+0x104>
   2707c:	e7be      	b.n	26ffc <FinishAesDrv+0x144>
   2707e:	4b19      	ldr	r3, [pc, #100]	; (270e4 <FinishAesDrv+0x22c>)
   27080:	6822      	ldr	r2, [r4, #0]
   27082:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   27086:	6862      	ldr	r2, [r4, #4]
   27088:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   2708c:	68a2      	ldr	r2, [r4, #8]
   2708e:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   27092:	68e2      	ldr	r2, [r4, #12]
   27094:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   27098:	e783      	b.n	26fa2 <FinishAesDrv+0xea>
   2709a:	4b12      	ldr	r3, [pc, #72]	; (270e4 <FinishAesDrv+0x22c>)
   2709c:	6822      	ldr	r2, [r4, #0]
   2709e:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   270a2:	6862      	ldr	r2, [r4, #4]
   270a4:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   270a8:	68a2      	ldr	r2, [r4, #8]
   270aa:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   270ae:	68e2      	ldr	r2, [r4, #12]
   270b0:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   270b4:	e775      	b.n	26fa2 <FinishAesDrv+0xea>
   270b6:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   270ba:	6022      	str	r2, [r4, #0]
   270bc:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   270c0:	6062      	str	r2, [r4, #4]
   270c2:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   270c6:	60a2      	str	r2, [r4, #8]
   270c8:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   270cc:	60e3      	str	r3, [r4, #12]
   270ce:	e795      	b.n	26ffc <FinishAesDrv+0x144>
   270d0:	f8c3 1c28 	str.w	r1, [r3, #3112]	; 0xc28
   270d4:	2040      	movs	r0, #64	; 0x40
   270d6:	f8c3 5c2c 	str.w	r5, [r3, #3116]	; 0xc2c
   270da:	e7ca      	b.n	27072 <FinishAesDrv+0x1ba>
   270dc:	00f1000b 	.word	0x00f1000b
   270e0:	20000898 	.word	0x20000898
   270e4:	5002b000 	.word	0x5002b000
   270e8:	00f10001 	.word	0x00f10001
   270ec:	0002d6ec 	.word	0x0002d6ec
   270f0:	00f10005 	.word	0x00f10005
   270f4:	00f10002 	.word	0x00f10002
   270f8:	0002d6cc 	.word	0x0002d6cc
   270fc:	0002d6ac 	.word	0x0002d6ac
   27100:	0002d694 	.word	0x0002d694
   27104:	00f10003 	.word	0x00f10003
   27108:	00f10004 	.word	0x00f10004

0002710c <kmu_validate_slot_and_size>:
   2710c:	b929      	cbnz	r1, 2711a <kmu_validate_slot_and_size+0xe>
   2710e:	4b04      	ldr	r3, [pc, #16]	; (27120 <kmu_validate_slot_and_size+0x14>)
   27110:	2800      	cmp	r0, #0
   27112:	bf14      	ite	ne
   27114:	4618      	movne	r0, r3
   27116:	2000      	moveq	r0, #0
   27118:	4770      	bx	lr
   2711a:	4802      	ldr	r0, [pc, #8]	; (27124 <kmu_validate_slot_and_size+0x18>)
   2711c:	4770      	bx	lr
   2711e:	bf00      	nop
   27120:	00f70001 	.word	0x00f70001
   27124:	00f70003 	.word	0x00f70003

00027128 <kmu_validate_kdr_slot_and_size>:
   27128:	b929      	cbnz	r1, 27136 <kmu_validate_kdr_slot_and_size+0xe>
   2712a:	4b04      	ldr	r3, [pc, #16]	; (2713c <kmu_validate_kdr_slot_and_size+0x14>)
   2712c:	2800      	cmp	r0, #0
   2712e:	bf14      	ite	ne
   27130:	4618      	movne	r0, r3
   27132:	2000      	moveq	r0, #0
   27134:	4770      	bx	lr
   27136:	4802      	ldr	r0, [pc, #8]	; (27140 <kmu_validate_kdr_slot_and_size+0x18>)
   27138:	4770      	bx	lr
   2713a:	bf00      	nop
   2713c:	00f70001 	.word	0x00f70001
   27140:	00f70003 	.word	0x00f70003

00027144 <kmu_use_kdr_key>:
   27144:	4b03      	ldr	r3, [pc, #12]	; (27154 <kmu_use_kdr_key+0x10>)
   27146:	2000      	movs	r0, #0
   27148:	2201      	movs	r2, #1
   2714a:	f8c3 0a38 	str.w	r0, [r3, #2616]	; 0xa38
   2714e:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   27152:	4770      	bx	lr
   27154:	5002b000 	.word	0x5002b000

00027158 <kmu_derive_cmac>:
   27158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2715c:	b0cc      	sub	sp, #304	; 0x130
   2715e:	2400      	movs	r4, #0
   27160:	9d57      	ldr	r5, [sp, #348]	; 0x15c
   27162:	f8dd 8158 	ldr.w	r8, [sp, #344]	; 0x158
   27166:	4682      	mov	sl, r0
   27168:	4689      	mov	r9, r1
   2716a:	4616      	mov	r6, r2
   2716c:	4621      	mov	r1, r4
   2716e:	2274      	movs	r2, #116	; 0x74
   27170:	a80e      	add	r0, sp, #56	; 0x38
   27172:	461f      	mov	r7, r3
   27174:	f001 fee3 	bl	28f3e <memset>
   27178:	2280      	movs	r2, #128	; 0x80
   2717a:	4621      	mov	r1, r4
   2717c:	a82c      	add	r0, sp, #176	; 0xb0
   2717e:	942b      	str	r4, [sp, #172]	; 0xac
   27180:	f001 fedd 	bl	28f3e <memset>
   27184:	2384      	movs	r3, #132	; 0x84
   27186:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   2718a:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   2718e:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   27192:	9305      	str	r3, [sp, #20]
   27194:	d863      	bhi.n	2725e <kmu_derive_cmac+0x106>
   27196:	f7ff fcc3 	bl	26b20 <write_invalid_key>
   2719a:	ab05      	add	r3, sp, #20
   2719c:	4630      	mov	r0, r6
   2719e:	ae2b      	add	r6, sp, #172	; 0xac
   271a0:	9301      	str	r3, [sp, #4]
   271a2:	9502      	str	r5, [sp, #8]
   271a4:	e9dd 2354 	ldrd	r2, r3, [sp, #336]	; 0x150
   271a8:	4639      	mov	r1, r7
   271aa:	9600      	str	r6, [sp, #0]
   271ac:	f000 f862 	bl	27274 <UtilCmacBuildDataForDerivation>
   271b0:	2800      	cmp	r0, #0
   271b2:	d14f      	bne.n	27254 <kmu_derive_cmac+0xfc>
   271b4:	2303      	movs	r3, #3
   271b6:	f88d 3013 	strb.w	r3, [sp, #19]
   271ba:	f89d 3013 	ldrb.w	r3, [sp, #19]
   271be:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   271c2:	2307      	movs	r3, #7
   271c4:	2200      	movs	r2, #0
   271c6:	901c      	str	r0, [sp, #112]	; 0x70
   271c8:	2110      	movs	r1, #16
   271ca:	a80e      	add	r0, sp, #56	; 0x38
   271cc:	931b      	str	r3, [sp, #108]	; 0x6c
   271ce:	2401      	movs	r4, #1
   271d0:	2301      	movs	r3, #1
   271d2:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   271d6:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
   271da:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
   271de:	9426      	str	r4, [sp, #152]	; 0x98
   271e0:	f10d 0920 	add.w	r9, sp, #32
   271e4:	f7fe fb82 	bl	258ec <CC_PalMemSetZeroPlat>
   271e8:	2210      	movs	r2, #16
   271ea:	9200      	str	r2, [sp, #0]
   271ec:	9905      	ldr	r1, [sp, #20]
   271ee:	f8cd 9004 	str.w	r9, [sp, #4]
   271f2:	ab0a      	add	r3, sp, #40	; 0x28
   271f4:	4630      	mov	r0, r6
   271f6:	aa06      	add	r2, sp, #24
   271f8:	f7ff fa22 	bl	26640 <SetDataBuffersInfo>
   271fc:	4607      	mov	r7, r0
   271fe:	b170      	cbz	r0, 2721e <kmu_derive_cmac+0xc6>
   27200:	e01d      	b.n	2723e <kmu_derive_cmac+0xe6>
   27202:	a90e      	add	r1, sp, #56	; 0x38
   27204:	eb08 0007 	add.w	r0, r8, r7
   27208:	f7fe fb6c 	bl	258e4 <CC_PalMemCopyPlat>
   2720c:	2110      	movs	r1, #16
   2720e:	a80e      	add	r0, sp, #56	; 0x38
   27210:	f7fe fb6c 	bl	258ec <CC_PalMemSetZeroPlat>
   27214:	3401      	adds	r4, #1
   27216:	1bad      	subs	r5, r5, r6
   27218:	4437      	add	r7, r6
   2721a:	b2e4      	uxtb	r4, r4
   2721c:	d024      	beq.n	27268 <kmu_derive_cmac+0x110>
   2721e:	2d10      	cmp	r5, #16
   27220:	464a      	mov	r2, r9
   27222:	9b05      	ldr	r3, [sp, #20]
   27224:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   27228:	a906      	add	r1, sp, #24
   2722a:	a80e      	add	r0, sp, #56	; 0x38
   2722c:	462e      	mov	r6, r5
   2722e:	bf28      	it	cs
   27230:	2610      	movcs	r6, #16
   27232:	f7ff fe41 	bl	26eb8 <FinishAesDrv>
   27236:	4632      	mov	r2, r6
   27238:	2800      	cmp	r0, #0
   2723a:	d0e2      	beq.n	27202 <kmu_derive_cmac+0xaa>
   2723c:	4607      	mov	r7, r0
   2723e:	a80e      	add	r0, sp, #56	; 0x38
   27240:	2274      	movs	r2, #116	; 0x74
   27242:	2100      	movs	r1, #0
   27244:	f7fe fb50 	bl	258e8 <CC_PalMemSetPlat>
   27248:	f7ff fc6a 	bl	26b20 <write_invalid_key>
   2724c:	4638      	mov	r0, r7
   2724e:	b04c      	add	sp, #304	; 0x130
   27250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27254:	4f05      	ldr	r7, [pc, #20]	; (2726c <kmu_derive_cmac+0x114>)
   27256:	4638      	mov	r0, r7
   27258:	b04c      	add	sp, #304	; 0x130
   2725a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2725e:	4f04      	ldr	r7, [pc, #16]	; (27270 <kmu_derive_cmac+0x118>)
   27260:	4638      	mov	r0, r7
   27262:	b04c      	add	sp, #304	; 0x130
   27264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27268:	462f      	mov	r7, r5
   2726a:	e7e8      	b.n	2723e <kmu_derive_cmac+0xe6>
   2726c:	00f1000e 	.word	0x00f1000e
   27270:	00f1000f 	.word	0x00f1000f

00027274 <UtilCmacBuildDataForDerivation>:
   27274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27278:	b082      	sub	sp, #8
   2727a:	461e      	mov	r6, r3
   2727c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   2727e:	2300      	movs	r3, #0
   27280:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   27284:	9301      	str	r3, [sp, #4]
   27286:	d83e      	bhi.n	27306 <UtilCmacBuildDataForDerivation+0x92>
   27288:	00ed      	lsls	r5, r5, #3
   2728a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
   2728e:	4617      	mov	r7, r2
   27290:	f101 32ff 	add.w	r2, r1, #4294967295
   27294:	bf34      	ite	cc
   27296:	2303      	movcc	r3, #3
   27298:	2304      	movcs	r3, #4
   2729a:	2a3f      	cmp	r2, #63	; 0x3f
   2729c:	460c      	mov	r4, r1
   2729e:	9300      	str	r3, [sp, #0]
   272a0:	d831      	bhi.n	27306 <UtilCmacBuildDataForDerivation+0x92>
   272a2:	b380      	cbz	r0, 27306 <UtilCmacBuildDataForDerivation+0x92>
   272a4:	bb66      	cbnz	r6, 27300 <UtilCmacBuildDataForDerivation+0x8c>
   272a6:	9a08      	ldr	r2, [sp, #32]
   272a8:	b36a      	cbz	r2, 27306 <UtilCmacBuildDataForDerivation+0x92>
   272aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
   272ac:	6811      	ldr	r1, [r2, #0]
   272ae:	b351      	cbz	r1, 27306 <UtilCmacBuildDataForDerivation+0x92>
   272b0:	19a2      	adds	r2, r4, r6
   272b2:	4413      	add	r3, r2
   272b4:	4299      	cmp	r1, r3
   272b6:	d326      	bcc.n	27306 <UtilCmacBuildDataForDerivation+0x92>
   272b8:	9b08      	ldr	r3, [sp, #32]
   272ba:	4601      	mov	r1, r0
   272bc:	4622      	mov	r2, r4
   272be:	1c58      	adds	r0, r3, #1
   272c0:	f7fe fb10 	bl	258e4 <CC_PalMemCopyPlat>
   272c4:	9b08      	ldr	r3, [sp, #32]
   272c6:	f104 0802 	add.w	r8, r4, #2
   272ca:	441c      	add	r4, r3
   272cc:	2300      	movs	r3, #0
   272ce:	7063      	strb	r3, [r4, #1]
   272d0:	bb26      	cbnz	r6, 2731c <UtilCmacBuildDataForDerivation+0xa8>
   272d2:	9b08      	ldr	r3, [sp, #32]
   272d4:	9500      	str	r5, [sp, #0]
   272d6:	2dff      	cmp	r5, #255	; 0xff
   272d8:	eb03 0008 	add.w	r0, r3, r8
   272dc:	d917      	bls.n	2730e <UtilCmacBuildDataForDerivation+0x9a>
   272de:	022b      	lsls	r3, r5, #8
   272e0:	b29b      	uxth	r3, r3
   272e2:	ea43 2315 	orr.w	r3, r3, r5, lsr #8
   272e6:	2202      	movs	r2, #2
   272e8:	a901      	add	r1, sp, #4
   272ea:	9301      	str	r3, [sp, #4]
   272ec:	f7fe fafa 	bl	258e4 <CC_PalMemCopyPlat>
   272f0:	f108 0302 	add.w	r3, r8, #2
   272f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   272f6:	2000      	movs	r0, #0
   272f8:	6013      	str	r3, [r2, #0]
   272fa:	b002      	add	sp, #8
   272fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27300:	b10f      	cbz	r7, 27306 <UtilCmacBuildDataForDerivation+0x92>
   27302:	2e40      	cmp	r6, #64	; 0x40
   27304:	d9cf      	bls.n	272a6 <UtilCmacBuildDataForDerivation+0x32>
   27306:	480a      	ldr	r0, [pc, #40]	; (27330 <UtilCmacBuildDataForDerivation+0xbc>)
   27308:	b002      	add	sp, #8
   2730a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2730e:	2201      	movs	r2, #1
   27310:	4669      	mov	r1, sp
   27312:	f7fe fae7 	bl	258e4 <CC_PalMemCopyPlat>
   27316:	f108 0301 	add.w	r3, r8, #1
   2731a:	e7eb      	b.n	272f4 <UtilCmacBuildDataForDerivation+0x80>
   2731c:	9b08      	ldr	r3, [sp, #32]
   2731e:	4632      	mov	r2, r6
   27320:	eb03 0008 	add.w	r0, r3, r8
   27324:	4639      	mov	r1, r7
   27326:	f7fe fadd 	bl	258e4 <CC_PalMemCopyPlat>
   2732a:	44b0      	add	r8, r6
   2732c:	e7d1      	b.n	272d2 <UtilCmacBuildDataForDerivation+0x5e>
   2732e:	bf00      	nop
   27330:	80000006 	.word	0x80000006

00027334 <CC_PalDataBufferAttrGet>:
   27334:	2000      	movs	r0, #0
   27336:	7018      	strb	r0, [r3, #0]
   27338:	4770      	bx	lr
   2733a:	bf00      	nop

0002733c <user_cb>:
}
   2733c:	4770      	bx	lr

0002733e <app_clock_cb>:
	return get_dclock();
   2733e:	f7ea bd09 	b.w	11d54 <get_dclock>

00027342 <app_state_cb>:
{
   27342:	b508      	push	{r3, lr}
	return get_dstate();
   27344:	f7ea fd1e 	bl	11d84 <get_dstate>
}
   27348:	b2c0      	uxtb	r0, r0
   2734a:	bd08      	pop	{r3, pc}

0002734c <pair_cb>:
{
   2734c:	b508      	push	{r3, lr}
	start_pairing();
   2734e:	f7ea fc23 	bl	11b98 <start_pairing>
}
   27352:	bd08      	pop	{r3, pc}

00027354 <update_dclock>:
{
   27354:	b508      	push	{r3, lr}
		dclk_send_clock_notify(get_dclock());
   27356:	f7ea fcfd 	bl	11d54 <get_dclock>
   2735a:	f7ea fc6d 	bl	11c38 <dclk_send_clock_notify>
		dclk_send_state_notify(get_dstate());
   2735e:	f7ea fd11 	bl	11d84 <get_dstate>
   27362:	b2c0      	uxtb	r0, r0
   27364:	f7ea fc46 	bl	11bf4 <dclk_send_state_notify>
	return z_impl_k_sleep(timeout);
   27368:	2100      	movs	r1, #0
   2736a:	f242 6067 	movw	r0, #9831	; 0x2667
   2736e:	f7fc fcd3 	bl	23d18 <z_impl_k_sleep>
	while (1)
   27372:	e7f0      	b.n	27356 <update_dclock+0x2>

00027374 <z_log_msg_static_create.constprop.0>:
   27374:	2300      	movs	r3, #0
   27376:	f7ec bc25 	b.w	13bc4 <z_impl_z_log_msg_static_create>

0002737a <setup_accept_list_cb>:
	if ((*bond_cnt) < 0)
   2737a:	680b      	ldr	r3, [r1, #0]
   2737c:	2b00      	cmp	r3, #0
   2737e:	db01      	blt.n	27384 <setup_accept_list_cb+0xa>
   27380:	f7ea ba98 	b.w	118b4 <setup_accept_list_cb.part.0>
}
   27384:	4770      	bx	lr

00027386 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>:
static inline int gpio_pin_interrupt_configure_dt(const struct gpio_dt_spec *spec,
   27386:	b410      	push	{r4}
   27388:	4603      	mov	r3, r0
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   2738a:	6800      	ldr	r0, [r0, #0]
   2738c:	7919      	ldrb	r1, [r3, #4]
	return api->pin_interrupt_configure(port, pin, mode, trig);
   2738e:	6883      	ldr	r3, [r0, #8]
   27390:	699c      	ldr	r4, [r3, #24]
   27392:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
   27396:	46a4      	mov	ip, r4
   27398:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
}
   2739c:	bc10      	pop	{r4}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   2739e:	4760      	bx	ip

000273a0 <gpio_pin_configure_dt.constprop.0.isra.0>:
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
   273a0:	b470      	push	{r4, r5, r6}
   273a2:	4603      	mov	r3, r0
	return gpio_pin_configure(spec->port,
   273a4:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   273a6:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
   273a8:	88db      	ldrh	r3, [r3, #6]
	return gpio_pin_configure(spec->port,
   273aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
	struct gpio_driver_data *data =
   273ae:	6905      	ldr	r5, [r0, #16]
	const struct gpio_driver_api *api =
   273b0:	6886      	ldr	r6, [r0, #8]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   273b2:	f013 0f01 	tst.w	r3, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   273b6:	f04f 0401 	mov.w	r4, #1
   273ba:	682b      	ldr	r3, [r5, #0]
   273bc:	fa04 f401 	lsl.w	r4, r4, r1
   273c0:	bf14      	ite	ne
   273c2:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   273c4:	43a3      	biceq	r3, r4
   273c6:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
   273c8:	6833      	ldr	r3, [r6, #0]
}
   273ca:	bc70      	pop	{r4, r5, r6}
	return api->pin_configure(port, pin, flags);
   273cc:	4718      	bx	r3

000273ce <cbpprintf_external>:
{
   273ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   273d2:	4606      	mov	r6, r0
   273d4:	460d      	mov	r5, r1
   273d6:	4617      	mov	r7, r2
	if (buf == NULL) {
   273d8:	4698      	mov	r8, r3
   273da:	b32b      	cbz	r3, 27428 <cbpprintf_external+0x5a>
	args_size = hdr->hdr.desc.len * sizeof(int);
   273dc:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   273e0:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   273e4:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   273e6:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   273e8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   273ec:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   273f0:	441c      	add	r4, r3
   273f2:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   273f4:	f04f 0a00 	mov.w	sl, #0
   273f8:	45ca      	cmp	sl, r9
   273fa:	d309      	bcc.n	27410 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   273fc:	f8d8 2004 	ldr.w	r2, [r8, #4]
   27400:	f108 0308 	add.w	r3, r8, #8
   27404:	4639      	mov	r1, r7
   27406:	4630      	mov	r0, r6
   27408:	46ac      	mov	ip, r5
}
   2740a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   2740e:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   27410:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
   27414:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   27418:	4620      	mov	r0, r4
   2741a:	f001 fd2e 	bl	28e7a <strlen>
   2741e:	3001      	adds	r0, #1
   27420:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   27422:	f10a 0a01 	add.w	sl, sl, #1
   27426:	e7e7      	b.n	273f8 <cbpprintf_external+0x2a>
}
   27428:	f06f 0015 	mvn.w	r0, #21
   2742c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00027430 <is_ptr>:
{
   27430:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
   27432:	2500      	movs	r5, #0
{
   27434:	4602      	mov	r2, r0
	bool mod = false;
   27436:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
   27438:	4614      	mov	r4, r2
   2743a:	f814 3b01 	ldrb.w	r3, [r4], #1
   2743e:	b90b      	cbnz	r3, 27444 <is_ptr+0x14>
					return false;
   27440:	4618      	mov	r0, r3
   27442:	e009      	b.n	27458 <is_ptr+0x28>
		if (mod) {
   27444:	b198      	cbz	r0, 2746e <is_ptr+0x3e>
			if (cnt == n) {
   27446:	428d      	cmp	r5, r1
   27448:	d107      	bne.n	2745a <is_ptr+0x2a>
				if (c == 'p') {
   2744a:	2b70      	cmp	r3, #112	; 0x70
   2744c:	d004      	beq.n	27458 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
   2744e:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
   27452:	2a3a      	cmp	r2, #58	; 0x3a
   27454:	d80b      	bhi.n	2746e <is_ptr+0x3e>
					return false;
   27456:	2000      	movs	r0, #0
}
   27458:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
   2745a:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
   2745e:	2e3a      	cmp	r6, #58	; 0x3a
   27460:	d805      	bhi.n	2746e <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
   27462:	7853      	ldrb	r3, [r2, #1]
				cnt++;
   27464:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
   27466:	1c94      	adds	r4, r2, #2
   27468:	2b00      	cmp	r3, #0
   2746a:	d0e9      	beq.n	27440 <is_ptr+0x10>
   2746c:	2000      	movs	r0, #0
		if (c == '%') {
   2746e:	2b25      	cmp	r3, #37	; 0x25
			mod = !mod;
   27470:	bf08      	it	eq
   27472:	f080 0001 	eoreq.w	r0, r0, #1
	while ((c = *fmt++) != '\0') {
   27476:	4622      	mov	r2, r4
   27478:	e7de      	b.n	27438 <is_ptr+0x8>

0002747a <u8_to_dec>:
 */

#include <zephyr/sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   2747a:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   2747c:	2364      	movs	r3, #100	; 0x64
{
   2747e:	4605      	mov	r5, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   27480:	2604      	movs	r6, #4
	uint8_t num_digits = 0;
   27482:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   27484:	270a      	movs	r7, #10
	while (buflen > 0 && divisor > 0) {
   27486:	b969      	cbnz	r1, 274a4 <u8_to_dec+0x2a>
	if (buflen) {
		*buf = '\0';
	}

	return num_digits;
}
   27488:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   2748a:	429a      	cmp	r2, r3
   2748c:	fbb2 f4f3 	udiv	r4, r2, r3
   27490:	d20c      	bcs.n	274ac <u8_to_dec+0x32>
   27492:	2b01      	cmp	r3, #1
   27494:	d00a      	beq.n	274ac <u8_to_dec+0x32>
   27496:	b948      	cbnz	r0, 274ac <u8_to_dec+0x32>
		value -= digit * divisor;
   27498:	fb03 2214 	mls	r2, r3, r4, r2
   2749c:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   2749e:	240a      	movs	r4, #10
   274a0:	fbb3 f3f4 	udiv	r3, r3, r4
	while (buflen > 0 && divisor > 0) {
   274a4:	3e01      	subs	r6, #1
   274a6:	d1f0      	bne.n	2748a <u8_to_dec+0x10>
		*buf = '\0';
   274a8:	702e      	strb	r6, [r5, #0]
	return num_digits;
   274aa:	e7ed      	b.n	27488 <u8_to_dec+0xe>
			*buf = (char)digit + '0';
   274ac:	3430      	adds	r4, #48	; 0x30
   274ae:	f805 4b01 	strb.w	r4, [r5], #1
			buflen--;
   274b2:	fbb2 f4f3 	udiv	r4, r2, r3
   274b6:	3901      	subs	r1, #1
   274b8:	fb03 2214 	mls	r2, r3, r4, r2
			num_digits++;
   274bc:	3001      	adds	r0, #1
		divisor /= 10;
   274be:	fbb3 f3f7 	udiv	r3, r3, r7
			buflen--;
   274c2:	b2c9      	uxtb	r1, r1
			num_digits++;
   274c4:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   274c6:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   274c8:	b2db      	uxtb	r3, r3
   274ca:	e7dc      	b.n	27486 <u8_to_dec+0xc>

000274cc <char2hex>:
#include <errno.h>
#include <zephyr/sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   274cc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   274d0:	b2db      	uxtb	r3, r3
   274d2:	2b09      	cmp	r3, #9
   274d4:	d802      	bhi.n	274dc <char2hex+0x10>
		*x = c - '0';
   274d6:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   274d8:	2000      	movs	r0, #0
   274da:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   274dc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   274e0:	2b05      	cmp	r3, #5
   274e2:	d802      	bhi.n	274ea <char2hex+0x1e>
		*x = c - 'a' + 10;
   274e4:	3857      	subs	r0, #87	; 0x57
		*x = c - 'A' + 10;
   274e6:	b2c3      	uxtb	r3, r0
   274e8:	e7f5      	b.n	274d6 <char2hex+0xa>
	} else if (c >= 'A' && c <= 'F') {
   274ea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   274ee:	2b05      	cmp	r3, #5
   274f0:	d801      	bhi.n	274f6 <char2hex+0x2a>
		*x = c - 'A' + 10;
   274f2:	3837      	subs	r0, #55	; 0x37
   274f4:	e7f7      	b.n	274e6 <char2hex+0x1a>
		return -EINVAL;
   274f6:	f06f 0015 	mvn.w	r0, #21
}
   274fa:	4770      	bx	lr

000274fc <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   274fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   274fe:	4605      	mov	r5, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   27500:	f001 0001 	and.w	r0, r1, #1
   27504:	eb00 0651 	add.w	r6, r0, r1, lsr #1
   27508:	429e      	cmp	r6, r3
   2750a:	ea4f 0751 	mov.w	r7, r1, lsr #1
   2750e:	d903      	bls.n	27518 <hex2bin+0x1c>
		return 0;
   27510:	2600      	movs	r6, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   27512:	4630      	mov	r0, r6
   27514:	b003      	add	sp, #12
   27516:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   27518:	b158      	cbz	r0, 27532 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   2751a:	7828      	ldrb	r0, [r5, #0]
   2751c:	f10d 0107 	add.w	r1, sp, #7
   27520:	f7ff ffd4 	bl	274cc <char2hex>
   27524:	2800      	cmp	r0, #0
   27526:	dbf3      	blt.n	27510 <hex2bin+0x14>
		buf[0] = dec;
   27528:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2752c:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   27530:	3501      	adds	r5, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   27532:	3501      	adds	r5, #1
   27534:	4417      	add	r7, r2
   27536:	42ba      	cmp	r2, r7
   27538:	d0eb      	beq.n	27512 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   2753a:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   2753e:	f10d 0107 	add.w	r1, sp, #7
   27542:	f7ff ffc3 	bl	274cc <char2hex>
   27546:	2800      	cmp	r0, #0
   27548:	dbe2      	blt.n	27510 <hex2bin+0x14>
		buf[i] = dec << 4;
   2754a:	f89d 4007 	ldrb.w	r4, [sp, #7]
   2754e:	0124      	lsls	r4, r4, #4
   27550:	b2e4      	uxtb	r4, r4
   27552:	7014      	strb	r4, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   27554:	f815 0b02 	ldrb.w	r0, [r5], #2
   27558:	f7ff ffb8 	bl	274cc <char2hex>
   2755c:	2800      	cmp	r0, #0
   2755e:	dbd7      	blt.n	27510 <hex2bin+0x14>
		buf[i] += dec;
   27560:	f89d 3007 	ldrb.w	r3, [sp, #7]
   27564:	441c      	add	r4, r3
   27566:	f802 4b01 	strb.w	r4, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   2756a:	e7e4      	b.n	27536 <hex2bin+0x3a>

0002756c <arch_printk_char_out>:
}
   2756c:	2000      	movs	r0, #0
   2756e:	4770      	bx	lr

00027570 <str_out>:
{
   27570:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   27572:	688a      	ldr	r2, [r1, #8]
   27574:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   27576:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   27578:	b114      	cbz	r4, 27580 <str_out+0x10>
   2757a:	684b      	ldr	r3, [r1, #4]
   2757c:	4293      	cmp	r3, r2
   2757e:	dc01      	bgt.n	27584 <str_out+0x14>
		ctx->count++;
   27580:	608d      	str	r5, [r1, #8]
}
   27582:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   27584:	3b01      	subs	r3, #1
   27586:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   27588:	bf08      	it	eq
   2758a:	2200      	moveq	r2, #0
   2758c:	608d      	str	r5, [r1, #8]
   2758e:	bf0c      	ite	eq
   27590:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   27592:	54a0      	strbne	r0, [r4, r2]
   27594:	e7f5      	b.n	27582 <str_out+0x12>

00027596 <vprintk>:
		z_log_vprintk(fmt, ap);
   27596:	f001 b805 	b.w	285a4 <z_log_vprintk>

0002759a <printk>:
{
   2759a:	b40f      	push	{r0, r1, r2, r3}
   2759c:	b507      	push	{r0, r1, r2, lr}
   2759e:	a904      	add	r1, sp, #16
   275a0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   275a4:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
   275a6:	f000 fffd 	bl	285a4 <z_log_vprintk>
}
   275aa:	b003      	add	sp, #12
   275ac:	f85d eb04 	ldr.w	lr, [sp], #4
   275b0:	b004      	add	sp, #16
   275b2:	4770      	bx	lr

000275b4 <snprintk>:
{
   275b4:	b40c      	push	{r2, r3}
   275b6:	b507      	push	{r0, r1, r2, lr}
   275b8:	ab04      	add	r3, sp, #16
   275ba:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   275be:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   275c0:	f7eb f810 	bl	125e4 <vsnprintk>
}
   275c4:	b003      	add	sp, #12
   275c6:	f85d eb04 	ldr.w	lr, [sp], #4
   275ca:	b002      	add	sp, #8
   275cc:	4770      	bx	lr

000275ce <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   275ce:	4604      	mov	r4, r0
   275d0:	b508      	push	{r3, lr}
   275d2:	4608      	mov	r0, r1
   275d4:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   275d6:	461a      	mov	r2, r3
   275d8:	47a0      	blx	r4
	return z_impl_z_current_get();
   275da:	f7fc fbb7 	bl	23d4c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   275de:	f7ee f8a9 	bl	15734 <z_impl_k_thread_abort>

000275e2 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   275e2:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   275e6:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   275e8:	0840      	lsrs	r0, r0, #1
   275ea:	4770      	bx	lr

000275ec <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   275ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   275ee:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   275f0:	f7ff fff7 	bl	275e2 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   275f4:	fab0 f080 	clz	r0, r0
   275f8:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   275fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   27600:	00ca      	lsls	r2, r1, #3
   27602:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   27606:	1d17      	adds	r7, r2, #4
{
   27608:	460c      	mov	r4, r1
   2760a:	3206      	adds	r2, #6
   2760c:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   2760e:	b956      	cbnz	r6, 27626 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   27610:	2101      	movs	r1, #1
   27612:	fa01 f000 	lsl.w	r0, r1, r0
   27616:	68d9      	ldr	r1, [r3, #12]
   27618:	4301      	orrs	r1, r0
   2761a:	60d9      	str	r1, [r3, #12]
		b->next = c;
   2761c:	f8cc 4010 	str.w	r4, [ip, #16]
   27620:	53dd      	strh	r5, [r3, r7]
   27622:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   27624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   27626:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   27628:	3104      	adds	r1, #4
   2762a:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   2762c:	53d8      	strh	r0, [r3, r7]
   2762e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   27632:	529e      	strh	r6, [r3, r2]
   27634:	80c5      	strh	r5, [r0, #6]
   27636:	525d      	strh	r5, [r3, r1]
   27638:	e7f4      	b.n	27624 <free_list_add+0x38>

0002763a <free_list_remove_bidx>:
{
   2763a:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   2763c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   27640:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   27642:	4299      	cmp	r1, r3
   27644:	f102 0104 	add.w	r1, r2, #4
   27648:	d10a      	bne.n	27660 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   2764a:	2301      	movs	r3, #1
   2764c:	fa03 f202 	lsl.w	r2, r3, r2
   27650:	68c3      	ldr	r3, [r0, #12]
   27652:	ea23 0302 	bic.w	r3, r3, r2
   27656:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   27658:	2300      	movs	r3, #0
   2765a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   2765e:	bd10      	pop	{r4, pc}
   27660:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   27662:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   27666:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   2766a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   2766e:	80cb      	strh	r3, [r1, #6]
   27670:	8082      	strh	r2, [r0, #4]
}
   27672:	e7f4      	b.n	2765e <free_list_remove_bidx+0x24>

00027674 <free_list_remove>:
{
   27674:	b508      	push	{r3, lr}
   27676:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   27678:	f7ff ffb3 	bl	275e2 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   2767c:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   27680:	f1c2 021f 	rsb	r2, r2, #31
   27684:	4618      	mov	r0, r3
}
   27686:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   2768a:	f7ff bfd6 	b.w	2763a <free_list_remove_bidx>

0002768e <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   2768e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27692:	fab1 f581 	clz	r5, r1
   27696:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   2769a:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
   2769e:	4603      	mov	r3, r0
	if (b->next) {
   276a0:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   276a4:	460e      	mov	r6, r1
	if (b->next) {
   276a6:	b1c2      	cbz	r2, 276da <alloc_chunk+0x4c>
   276a8:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   276aa:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   276ae:	4618      	mov	r0, r3
   276b0:	4621      	mov	r1, r4
   276b2:	f7ff ff96 	bl	275e2 <chunk_size>
   276b6:	42b0      	cmp	r0, r6
   276b8:	d306      	bcc.n	276c8 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   276ba:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   276bc:	4618      	mov	r0, r3
   276be:	f7ff ffbc 	bl	2763a <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   276c2:	4620      	mov	r0, r4
   276c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   276c8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   276cc:	3f01      	subs	r7, #1
   276ce:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
   276d0:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   276d4:	d001      	beq.n	276da <alloc_chunk+0x4c>
   276d6:	4282      	cmp	r2, r0
   276d8:	d1e7      	bne.n	276aa <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   276da:	f1c5 0220 	rsb	r2, r5, #32
   276de:	f04f 34ff 	mov.w	r4, #4294967295
   276e2:	4094      	lsls	r4, r2
   276e4:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   276e6:	4014      	ands	r4, r2
   276e8:	d0eb      	beq.n	276c2 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   276ea:	fa94 f2a4 	rbit	r2, r4
   276ee:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   276f2:	1d11      	adds	r1, r2, #4
   276f4:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   276f8:	4621      	mov	r1, r4
   276fa:	e7df      	b.n	276bc <alloc_chunk+0x2e>

000276fc <merge_chunks>:
{
   276fc:	b538      	push	{r3, r4, r5, lr}
   276fe:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   27700:	f7ff ff6f 	bl	275e2 <chunk_size>
{
   27704:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   27706:	4604      	mov	r4, r0
   27708:	4611      	mov	r1, r2
   2770a:	4618      	mov	r0, r3
   2770c:	f7ff ff69 	bl	275e2 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   27710:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   27714:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   27716:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   27718:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   2771a:	4618      	mov	r0, r3
   2771c:	f7ff ff61 	bl	275e2 <chunk_size>
	void *cmem = &buf[c];
   27720:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   27722:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   27726:	bd38      	pop	{r3, r4, r5, pc}

00027728 <split_chunks>:
{
   27728:	b538      	push	{r3, r4, r5, lr}
   2772a:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   2772c:	f7ff ff59 	bl	275e2 <chunk_size>
{
   27730:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   27732:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   27734:	1a51      	subs	r1, r2, r1
   27736:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   2773a:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2773c:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   2773e:	8060      	strh	r0, [r4, #2]
   27740:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   27744:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   27746:	8044      	strh	r4, [r0, #2]
   27748:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   2774c:	4618      	mov	r0, r3
   2774e:	4611      	mov	r1, r2
   27750:	f7ff ff47 	bl	275e2 <chunk_size>
	void *cmem = &buf[c];
   27754:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   27756:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   2775a:	bd38      	pop	{r3, r4, r5, pc}

0002775c <free_chunk>:
{
   2775c:	b538      	push	{r3, r4, r5, lr}
   2775e:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   27760:	f7ff ff3f 	bl	275e2 <chunk_size>
   27764:	460c      	mov	r4, r1
   27766:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   27768:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2776c:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   2776e:	07da      	lsls	r2, r3, #31
   27770:	d40a      	bmi.n	27788 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   27772:	4628      	mov	r0, r5
   27774:	f7ff ff7e 	bl	27674 <free_list_remove>
	return c + chunk_size(h, c);
   27778:	4621      	mov	r1, r4
   2777a:	4628      	mov	r0, r5
   2777c:	f7ff ff31 	bl	275e2 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   27780:	1822      	adds	r2, r4, r0
   27782:	4628      	mov	r0, r5
   27784:	f7ff ffba 	bl	276fc <merge_chunks>
		return ((uint16_t *)cmem)[f];
   27788:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2778c:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   2778e:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   27792:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   27794:	07db      	lsls	r3, r3, #31
   27796:	d40c      	bmi.n	277b2 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   27798:	4628      	mov	r0, r5
   2779a:	f7ff ff6b 	bl	27674 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   2779e:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   277a2:	4622      	mov	r2, r4
   277a4:	1a61      	subs	r1, r4, r1
   277a6:	4628      	mov	r0, r5
   277a8:	f7ff ffa8 	bl	276fc <merge_chunks>
   277ac:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   277b0:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   277b2:	4621      	mov	r1, r4
   277b4:	4628      	mov	r0, r5
}
   277b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   277ba:	f7ff bf17 	b.w	275ec <free_list_add>

000277be <sys_heap_free>:
	if (mem == NULL) {
   277be:	b161      	cbz	r1, 277da <sys_heap_free+0x1c>
   277c0:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   277c2:	3904      	subs	r1, #4
   277c4:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   277c6:	f021 0307 	bic.w	r3, r1, #7
   277ca:	4403      	add	r3, r0
	free_chunk(h, c);
   277cc:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   277ce:	885a      	ldrh	r2, [r3, #2]
   277d0:	f022 0201 	bic.w	r2, r2, #1
   277d4:	805a      	strh	r2, [r3, #2]
   277d6:	f7ff bfc1 	b.w	2775c <free_chunk>
}
   277da:	4770      	bx	lr

000277dc <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   277dc:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   277de:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   277e0:	b909      	cbnz	r1, 277e6 <sys_heap_alloc+0xa>
		return NULL;
   277e2:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   277e4:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   277e6:	68ab      	ldr	r3, [r5, #8]
   277e8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   277ec:	d9f9      	bls.n	277e2 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   277ee:	310b      	adds	r1, #11
   277f0:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   277f2:	4621      	mov	r1, r4
   277f4:	4628      	mov	r0, r5
   277f6:	f7ff ff4a 	bl	2768e <alloc_chunk>
	if (c == 0U) {
   277fa:	4606      	mov	r6, r0
   277fc:	2800      	cmp	r0, #0
   277fe:	d0f0      	beq.n	277e2 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   27800:	4601      	mov	r1, r0
   27802:	4628      	mov	r0, r5
   27804:	f7ff feed 	bl	275e2 <chunk_size>
   27808:	42a0      	cmp	r0, r4
   2780a:	d907      	bls.n	2781c <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   2780c:	1932      	adds	r2, r6, r4
   2780e:	4628      	mov	r0, r5
   27810:	f7ff ff8a 	bl	27728 <split_chunks>
		free_list_add(h, c + chunk_sz);
   27814:	4611      	mov	r1, r2
   27816:	4628      	mov	r0, r5
   27818:	f7ff fee8 	bl	275ec <free_list_add>
	void *cmem = &buf[c];
   2781c:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   27820:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   27822:	8853      	ldrh	r3, [r2, #2]
   27824:	f043 0301 	orr.w	r3, r3, #1
   27828:	8053      	strh	r3, [r2, #2]
   2782a:	3004      	adds	r0, #4
	return mem;
   2782c:	e7da      	b.n	277e4 <sys_heap_alloc+0x8>

0002782e <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   2782e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27832:	f101 39ff 	add.w	r9, r1, #4294967295
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   27836:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
   2783a:	6806      	ldr	r6, [r0, #0]
{
   2783c:	460f      	mov	r7, r1
   2783e:	4614      	mov	r4, r2
	if (align != rew) {
   27840:	d00c      	beq.n	2785c <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   27842:	424b      	negs	r3, r1
   27844:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   27846:	2b04      	cmp	r3, #4
   27848:	461a      	mov	r2, r3
   2784a:	464f      	mov	r7, r9
   2784c:	bf28      	it	cs
   2784e:	2204      	movcs	r2, #4
	rew = align & -align;
   27850:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   27852:	b964      	cbnz	r4, 2786e <sys_heap_aligned_alloc+0x40>
		return NULL;
   27854:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   27856:	4628      	mov	r0, r5
   27858:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   2785c:	2904      	cmp	r1, #4
   2785e:	d804      	bhi.n	2786a <sys_heap_aligned_alloc+0x3c>
}
   27860:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   27864:	4611      	mov	r1, r2
   27866:	f7ff bfb9 	b.w	277dc <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   2786a:	2204      	movs	r2, #4
   2786c:	e7f1      	b.n	27852 <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   2786e:	68b3      	ldr	r3, [r6, #8]
   27870:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   27874:	d9ee      	bls.n	27854 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   27876:	f104 010b 	add.w	r1, r4, #11
   2787a:	4439      	add	r1, r7
   2787c:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   2787e:	08c9      	lsrs	r1, r1, #3
   27880:	4630      	mov	r0, r6
   27882:	f7ff ff04 	bl	2768e <alloc_chunk>
	if (c0 == 0) {
   27886:	4680      	mov	r8, r0
   27888:	2800      	cmp	r0, #0
   2788a:	d0e3      	beq.n	27854 <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   2788c:	f109 0504 	add.w	r5, r9, #4
   27890:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   27894:	1e7b      	subs	r3, r7, #1
   27896:	4435      	add	r5, r6
   27898:	441d      	add	r5, r3
   2789a:	427f      	negs	r7, r7
   2789c:	403d      	ands	r5, r7
   2789e:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   278a2:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   278a4:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   278a6:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   278a8:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   278aa:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   278ae:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   278b0:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   278b4:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   278b8:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   278bc:	d208      	bcs.n	278d0 <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   278be:	4601      	mov	r1, r0
   278c0:	463a      	mov	r2, r7
   278c2:	4630      	mov	r0, r6
   278c4:	f7ff ff30 	bl	27728 <split_chunks>
		free_list_add(h, c0);
   278c8:	4641      	mov	r1, r8
   278ca:	4630      	mov	r0, r6
   278cc:	f7ff fe8e 	bl	275ec <free_list_add>
	return c + chunk_size(h, c);
   278d0:	4639      	mov	r1, r7
   278d2:	4630      	mov	r0, r6
   278d4:	f7ff fe85 	bl	275e2 <chunk_size>
   278d8:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   278da:	4284      	cmp	r4, r0
   278dc:	d207      	bcs.n	278ee <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   278de:	4630      	mov	r0, r6
   278e0:	4622      	mov	r2, r4
   278e2:	f7ff ff21 	bl	27728 <split_chunks>
		free_list_add(h, c_end);
   278e6:	4621      	mov	r1, r4
   278e8:	4630      	mov	r0, r6
   278ea:	f7ff fe7f 	bl	275ec <free_list_add>
	void *cmem = &buf[c];
   278ee:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   278f2:	8873      	ldrh	r3, [r6, #2]
   278f4:	f043 0301 	orr.w	r3, r3, #1
   278f8:	8073      	strh	r3, [r6, #2]
   278fa:	e7ac      	b.n	27856 <sys_heap_aligned_alloc+0x28>

000278fc <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   278fc:	3a04      	subs	r2, #4
{
   278fe:	b4f0      	push	{r4, r5, r6, r7}
   27900:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   27902:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   27904:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   27906:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   2790a:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   2790e:	1a0e      	subs	r6, r1, r0
   27910:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   27912:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
   27914:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   27918:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   2791a:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
   2791e:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
   27920:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   27922:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
   27924:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   27928:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   2792a:	f1c2 0220 	rsb	r2, r2, #32
   2792e:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   27930:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   27934:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   27938:	4294      	cmp	r4, r2
   2793a:	d1fb      	bne.n	27934 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2793c:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2793e:	f042 0201 	orr.w	r2, r2, #1
   27942:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
   27944:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   27948:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2794a:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   2794c:	8007      	strh	r7, [r0, #0]
   2794e:	8065      	strh	r5, [r4, #2]
   27950:	1984      	adds	r4, r0, r6
   27952:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   27956:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   2795a:	8067      	strh	r7, [r4, #2]
   2795c:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2795e:	885a      	ldrh	r2, [r3, #2]
   27960:	f042 0201 	orr.w	r2, r2, #1
   27964:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   27966:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   27968:	f7ff be40 	b.w	275ec <free_list_add>

0002796c <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2796c:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   2796e:	f013 0307 	ands.w	r3, r3, #7
   27972:	d105      	bne.n	27980 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   27974:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   27976:	2b00      	cmp	r3, #0
   27978:	bf0c      	ite	eq
   2797a:	2000      	moveq	r0, #0
   2797c:	2003      	movne	r0, #3
   2797e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   27980:	2b02      	cmp	r3, #2
   27982:	d105      	bne.n	27990 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   27984:	8b40      	ldrh	r0, [r0, #26]
   27986:	fab0 f080 	clz	r0, r0
   2798a:	0940      	lsrs	r0, r0, #5
   2798c:	0080      	lsls	r0, r0, #2
   2798e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   27990:	2b01      	cmp	r3, #1
   27992:	d105      	bne.n	279a0 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   27994:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   27996:	2b00      	cmp	r3, #0
   27998:	bf0c      	ite	eq
   2799a:	2000      	moveq	r0, #0
   2799c:	2005      	movne	r0, #5
   2799e:	4770      	bx	lr
	int evt = EVT_NOP;
   279a0:	2000      	movs	r0, #0
}
   279a2:	4770      	bx	lr

000279a4 <validate_args>:
{
   279a4:	b510      	push	{r4, lr}
   279a6:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   279a8:	b100      	cbz	r0, 279ac <validate_args+0x8>
   279aa:	b911      	cbnz	r1, 279b2 <validate_args+0xe>
		return -EINVAL;
   279ac:	f06f 0015 	mvn.w	r0, #21
}
   279b0:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   279b2:	1d08      	adds	r0, r1, #4
   279b4:	f000 f895 	bl	27ae2 <sys_notify_validate>
	if ((rv == 0)
   279b8:	2800      	cmp	r0, #0
   279ba:	d1f9      	bne.n	279b0 <validate_args+0xc>
	    && ((cli->notify.flags
   279bc:	68a3      	ldr	r3, [r4, #8]
   279be:	2b03      	cmp	r3, #3
   279c0:	d9f6      	bls.n	279b0 <validate_args+0xc>
   279c2:	e7f3      	b.n	279ac <validate_args+0x8>

000279c4 <notify_one>:
{
   279c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   279c8:	460d      	mov	r5, r1
   279ca:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   279cc:	4619      	mov	r1, r3
   279ce:	1d28      	adds	r0, r5, #4
{
   279d0:	4690      	mov	r8, r2
   279d2:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   279d4:	f000 f899 	bl	27b0a <sys_notify_finalize>
	if (cb) {
   279d8:	4604      	mov	r4, r0
   279da:	b138      	cbz	r0, 279ec <notify_one+0x28>
		cb(mgr, cli, state, res);
   279dc:	4633      	mov	r3, r6
   279de:	4642      	mov	r2, r8
   279e0:	4629      	mov	r1, r5
   279e2:	4638      	mov	r0, r7
   279e4:	46a4      	mov	ip, r4
}
   279e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   279ea:	4760      	bx	ip
}
   279ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000279f0 <transition_complete>:
{
   279f0:	b410      	push	{r4}
	__asm__ volatile(
   279f2:	f04f 0440 	mov.w	r4, #64	; 0x40
   279f6:	f3ef 8211 	mrs	r2, BASEPRI
   279fa:	f384 8812 	msr	BASEPRI_MAX, r4
   279fe:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   27a02:	6141      	str	r1, [r0, #20]
}
   27a04:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   27a06:	2101      	movs	r1, #1
   27a08:	f7ea be02 	b.w	12610 <process_event>

00027a0c <onoff_manager_init>:
{
   27a0c:	b538      	push	{r3, r4, r5, lr}
   27a0e:	460c      	mov	r4, r1
	if ((mgr == NULL)
   27a10:	4605      	mov	r5, r0
   27a12:	b158      	cbz	r0, 27a2c <onoff_manager_init+0x20>
	    || (transitions == NULL)
   27a14:	b151      	cbz	r1, 27a2c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   27a16:	680b      	ldr	r3, [r1, #0]
   27a18:	b143      	cbz	r3, 27a2c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   27a1a:	684b      	ldr	r3, [r1, #4]
   27a1c:	b133      	cbz	r3, 27a2c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   27a1e:	221c      	movs	r2, #28
   27a20:	2100      	movs	r1, #0
   27a22:	f001 fa8c 	bl	28f3e <memset>
   27a26:	612c      	str	r4, [r5, #16]
	return 0;
   27a28:	2000      	movs	r0, #0
}
   27a2a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   27a2c:	f06f 0015 	mvn.w	r0, #21
   27a30:	e7fb      	b.n	27a2a <onoff_manager_init+0x1e>

00027a32 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   27a32:	b570      	push	{r4, r5, r6, lr}
   27a34:	4605      	mov	r5, r0
   27a36:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   27a38:	f7ff ffb4 	bl	279a4 <validate_args>

	if (rv < 0) {
   27a3c:	1e04      	subs	r4, r0, #0
   27a3e:	db15      	blt.n	27a6c <onoff_request+0x3a>
   27a40:	f04f 0340 	mov.w	r3, #64	; 0x40
   27a44:	f3ef 8211 	mrs	r2, BASEPRI
   27a48:	f383 8812 	msr	BASEPRI_MAX, r3
   27a4c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   27a50:	8b6b      	ldrh	r3, [r5, #26]
   27a52:	8b2c      	ldrh	r4, [r5, #24]
   27a54:	f64f 71ff 	movw	r1, #65535	; 0xffff
   27a58:	428b      	cmp	r3, r1
   27a5a:	f004 0407 	and.w	r4, r4, #7
   27a5e:	d107      	bne.n	27a70 <onoff_request+0x3e>
	__asm__ volatile(
   27a60:	f382 8811 	msr	BASEPRI, r2
   27a64:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   27a68:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   27a6c:	4620      	mov	r0, r4
   27a6e:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   27a70:	2c02      	cmp	r4, #2
   27a72:	d10c      	bne.n	27a8e <onoff_request+0x5c>
		mgr->refs += 1U;
   27a74:	3301      	adds	r3, #1
   27a76:	836b      	strh	r3, [r5, #26]
   27a78:	f382 8811 	msr	BASEPRI, r2
   27a7c:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   27a80:	2300      	movs	r3, #0
   27a82:	4622      	mov	r2, r4
   27a84:	4631      	mov	r1, r6
   27a86:	4628      	mov	r0, r5
   27a88:	f7ff ff9c 	bl	279c4 <notify_one>
   27a8c:	e7ee      	b.n	27a6c <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   27a8e:	2c06      	cmp	r4, #6
   27a90:	d814      	bhi.n	27abc <onoff_request+0x8a>
   27a92:	e8df f004 	tbb	[pc, r4]
   27a96:	1304      	.short	0x1304
   27a98:	1a041313 	.word	0x1a041313
   27a9c:	04          	.byte	0x04
   27a9d:	00          	.byte	0x00
	parent->next = child;
   27a9e:	2300      	movs	r3, #0
   27aa0:	6033      	str	r3, [r6, #0]
	return list->tail;
   27aa2:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   27aa4:	b93b      	cbnz	r3, 27ab6 <onoff_request+0x84>
	list->head = node;
   27aa6:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   27aaa:	b9ac      	cbnz	r4, 27ad8 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   27aac:	2102      	movs	r1, #2
   27aae:	4628      	mov	r0, r5
   27ab0:	f7ea fdae 	bl	12610 <process_event>
   27ab4:	e7da      	b.n	27a6c <onoff_request+0x3a>
	parent->next = child;
   27ab6:	601e      	str	r6, [r3, #0]
	list->tail = node;
   27ab8:	606e      	str	r6, [r5, #4]
}
   27aba:	e7f6      	b.n	27aaa <onoff_request+0x78>
   27abc:	f382 8811 	msr	BASEPRI, r2
   27ac0:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   27ac4:	f06f 0404 	mvn.w	r4, #4
   27ac8:	e7d0      	b.n	27a6c <onoff_request+0x3a>
   27aca:	f382 8811 	msr	BASEPRI, r2
   27ace:	f3bf 8f6f 	isb	sy
   27ad2:	f06f 0485 	mvn.w	r4, #133	; 0x85
   27ad6:	e7c9      	b.n	27a6c <onoff_request+0x3a>
   27ad8:	f382 8811 	msr	BASEPRI, r2
   27adc:	f3bf 8f6f 	isb	sy
		if (notify) {
   27ae0:	e7c4      	b.n	27a6c <onoff_request+0x3a>

00027ae2 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   27ae2:	4603      	mov	r3, r0
   27ae4:	b140      	cbz	r0, 27af8 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   27ae6:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   27ae8:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   27aec:	2a02      	cmp	r2, #2
   27aee:	d006      	beq.n	27afe <sys_notify_validate+0x1c>
   27af0:	2a03      	cmp	r2, #3
   27af2:	d004      	beq.n	27afe <sys_notify_validate+0x1c>
   27af4:	2a01      	cmp	r2, #1
   27af6:	d005      	beq.n	27b04 <sys_notify_validate+0x22>
   27af8:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   27afc:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   27afe:	681a      	ldr	r2, [r3, #0]
   27b00:	2a00      	cmp	r2, #0
   27b02:	d0f9      	beq.n	27af8 <sys_notify_validate+0x16>
		notify->result = 0;
   27b04:	2000      	movs	r0, #0
   27b06:	6098      	str	r0, [r3, #8]
   27b08:	4770      	bx	lr

00027b0a <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   27b0a:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   27b0c:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   27b0e:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
   27b10:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
   27b14:	2a02      	cmp	r2, #2
{
   27b16:	4603      	mov	r3, r0
	switch (method) {
   27b18:	f04f 0400 	mov.w	r4, #0
   27b1c:	d007      	beq.n	27b2e <sys_notify_finalize+0x24>
   27b1e:	2a03      	cmp	r2, #3
   27b20:	d002      	beq.n	27b28 <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   27b22:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
   27b24:	2000      	movs	r0, #0
   27b26:	e001      	b.n	27b2c <sys_notify_finalize+0x22>
		rv = notify->method.callback;
   27b28:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   27b2a:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   27b2c:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   27b2e:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   27b30:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   27b32:	2800      	cmp	r0, #0
   27b34:	d0f6      	beq.n	27b24 <sys_notify_finalize+0x1a>
	return z_impl_k_poll_signal_raise(sig, result);
   27b36:	f7fc fbfd 	bl	24334 <z_impl_k_poll_signal_raise>
   27b3a:	e7f3      	b.n	27b24 <sys_notify_finalize+0x1a>

00027b3c <encode_uint>:
{
   27b3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27b40:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
   27b42:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   27b44:	2b6f      	cmp	r3, #111	; 0x6f
{
   27b46:	4680      	mov	r8, r0
   27b48:	460f      	mov	r7, r1
   27b4a:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   27b4c:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   27b50:	d029      	beq.n	27ba6 <encode_uint+0x6a>
   27b52:	d824      	bhi.n	27b9e <encode_uint+0x62>
		return 10;
   27b54:	2b58      	cmp	r3, #88	; 0x58
   27b56:	bf0c      	ite	eq
   27b58:	2610      	moveq	r6, #16
   27b5a:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   27b5c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   27b60:	4632      	mov	r2, r6
   27b62:	2300      	movs	r3, #0
   27b64:	4640      	mov	r0, r8
   27b66:	4639      	mov	r1, r7
   27b68:	f7d8 faca 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   27b6c:	2a09      	cmp	r2, #9
   27b6e:	b2d4      	uxtb	r4, r2
   27b70:	d81e      	bhi.n	27bb0 <encode_uint+0x74>
   27b72:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   27b74:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   27b76:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   27b78:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   27b7c:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   27b80:	d301      	bcc.n	27b86 <encode_uint+0x4a>
   27b82:	45d1      	cmp	r9, sl
   27b84:	d811      	bhi.n	27baa <encode_uint+0x6e>
	if (conv->flag_hash) {
   27b86:	782b      	ldrb	r3, [r5, #0]
   27b88:	069b      	lsls	r3, r3, #26
   27b8a:	d505      	bpl.n	27b98 <encode_uint+0x5c>
		if (radix == 8) {
   27b8c:	2e08      	cmp	r6, #8
   27b8e:	d115      	bne.n	27bbc <encode_uint+0x80>
			conv->altform_0 = true;
   27b90:	78ab      	ldrb	r3, [r5, #2]
   27b92:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   27b96:	70ab      	strb	r3, [r5, #2]
}
   27b98:	4648      	mov	r0, r9
   27b9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   27b9e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   27ba2:	2b70      	cmp	r3, #112	; 0x70
   27ba4:	e7d7      	b.n	27b56 <encode_uint+0x1a>
	switch (specifier) {
   27ba6:	2608      	movs	r6, #8
   27ba8:	e7d8      	b.n	27b5c <encode_uint+0x20>
		value /= radix;
   27baa:	4680      	mov	r8, r0
   27bac:	460f      	mov	r7, r1
   27bae:	e7d7      	b.n	27b60 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   27bb0:	f1bb 0f19 	cmp.w	fp, #25
   27bb4:	bf94      	ite	ls
   27bb6:	3437      	addls	r4, #55	; 0x37
   27bb8:	3457      	addhi	r4, #87	; 0x57
   27bba:	e7db      	b.n	27b74 <encode_uint+0x38>
		} else if (radix == 16) {
   27bbc:	2e10      	cmp	r6, #16
   27bbe:	d1eb      	bne.n	27b98 <encode_uint+0x5c>
			conv->altform_0c = true;
   27bc0:	78ab      	ldrb	r3, [r5, #2]
   27bc2:	f043 0310 	orr.w	r3, r3, #16
   27bc6:	e7e6      	b.n	27b96 <encode_uint+0x5a>

00027bc8 <outs>:
{
   27bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27bcc:	4607      	mov	r7, r0
   27bce:	4688      	mov	r8, r1
   27bd0:	4615      	mov	r5, r2
   27bd2:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   27bd4:	4614      	mov	r4, r2
   27bd6:	42b4      	cmp	r4, r6
   27bd8:	d305      	bcc.n	27be6 <outs+0x1e>
   27bda:	b10e      	cbz	r6, 27be0 <outs+0x18>
	return (int)count;
   27bdc:	1b60      	subs	r0, r4, r5
   27bde:	e008      	b.n	27bf2 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   27be0:	7823      	ldrb	r3, [r4, #0]
   27be2:	2b00      	cmp	r3, #0
   27be4:	d0fa      	beq.n	27bdc <outs+0x14>
		int rc = out((int)*sp++, ctx);
   27be6:	f814 0b01 	ldrb.w	r0, [r4], #1
   27bea:	4641      	mov	r1, r8
   27bec:	47b8      	blx	r7
		if (rc < 0) {
   27bee:	2800      	cmp	r0, #0
   27bf0:	daf1      	bge.n	27bd6 <outs+0xe>
}
   27bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027bf6 <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   27bf6:	b40f      	push	{r0, r1, r2, r3}
   27bf8:	b507      	push	{r0, r1, r2, lr}
   27bfa:	a904      	add	r1, sp, #16
   27bfc:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   27c00:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   27c02:	f7ff fcc8 	bl	27596 <vprintk>

	va_end(ap);
}
   27c06:	b003      	add	sp, #12
   27c08:	f85d eb04 	ldr.w	lr, [sp], #4
   27c0c:	b004      	add	sp, #16
   27c0e:	4770      	bx	lr

00027c10 <free_space>:
 * @retval true when space was calculated until end of buffer (and there might
 * be more space available after wrapping.
 * @retval false When result is total free space.
 */
static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
   27c10:	b510      	push	{r4, lr}
	if (buffer->flags & MPSC_PBUF_FULL) {
   27c12:	6903      	ldr	r3, [r0, #16]
{
   27c14:	4602      	mov	r2, r0
	if (buffer->flags & MPSC_PBUF_FULL) {
   27c16:	f013 0008 	ands.w	r0, r3, #8
   27c1a:	d109      	bne.n	27c30 <free_space+0x20>
		*res = 0;
		return false;
	}

	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   27c1c:	6813      	ldr	r3, [r2, #0]
   27c1e:	68d4      	ldr	r4, [r2, #12]
   27c20:	429c      	cmp	r4, r3
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
		return false;
	}
	*res = buffer->size - buffer->tmp_wr_idx;
   27c22:	bf97      	itett	ls
   27c24:	6a12      	ldrls	r2, [r2, #32]
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
   27c26:	1ae3      	subhi	r3, r4, r3
	*res = buffer->size - buffer->tmp_wr_idx;
   27c28:	1ad3      	subls	r3, r2, r3

	return true;
   27c2a:	2001      	movls	r0, #1
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
   27c2c:	600b      	str	r3, [r1, #0]
}
   27c2e:	bd10      	pop	{r4, pc}
   27c30:	2300      	movs	r3, #0
		return false;
   27c32:	4618      	mov	r0, r3
   27c34:	e7fa      	b.n	27c2c <free_space+0x1c>

00027c36 <get_usage>:

	return false;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
   27c36:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
   27c38:	a901      	add	r1, sp, #4
{
   27c3a:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   27c3c:	f7ff ffe8 	bl	27c10 <free_space>
   27c40:	b120      	cbz	r0, 27c4c <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   27c42:	9b01      	ldr	r3, [sp, #4]
   27c44:	68e2      	ldr	r2, [r4, #12]
   27c46:	3b01      	subs	r3, #1
   27c48:	4413      	add	r3, r2
   27c4a:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
   27c4c:	6a20      	ldr	r0, [r4, #32]
   27c4e:	9b01      	ldr	r3, [sp, #4]
   27c50:	1ac0      	subs	r0, r0, r3
}
   27c52:	3801      	subs	r0, #1
   27c54:	b002      	add	sp, #8
   27c56:	bd10      	pop	{r4, pc}

00027c58 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, int32_t val)
{
   27c58:	b510      	push	{r4, lr}
   27c5a:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   27c5c:	1850      	adds	r0, r2, r1

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   27c5e:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   27c60:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   27c62:	07d2      	lsls	r2, r2, #31
   27c64:	d502      	bpl.n	27c6c <idx_inc+0x14>
		return i & (buffer->size - 1);
   27c66:	3b01      	subs	r3, #1
   27c68:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
   27c6a:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   27c6c:	4298      	cmp	r0, r3
   27c6e:	bf28      	it	cs
   27c70:	1ac0      	subcs	r0, r0, r3
   27c72:	e7fa      	b.n	27c6a <idx_inc+0x12>

00027c74 <rd_idx_inc>:
		buffer->flags |= MPSC_PBUF_FULL;
	}
}

static void rd_idx_inc(struct mpsc_pbuf_buffer *buffer, int32_t wlen)
{
   27c74:	b510      	push	{r4, lr}
   27c76:	4604      	mov	r4, r0
   27c78:	460a      	mov	r2, r1
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   27c7a:	68c1      	ldr	r1, [r0, #12]
   27c7c:	f7ff ffec 	bl	27c58 <idx_inc>
	buffer->flags &= ~MPSC_PBUF_FULL;
   27c80:	6923      	ldr	r3, [r4, #16]
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   27c82:	60e0      	str	r0, [r4, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
   27c84:	f023 0308 	bic.w	r3, r3, #8
   27c88:	6123      	str	r3, [r4, #16]
}
   27c8a:	bd10      	pop	{r4, pc}

00027c8c <add_skip_item>:

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   27c8c:	b538      	push	{r3, r4, r5, lr}
   27c8e:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   27c90:	69c2      	ldr	r2, [r0, #28]
	union mpsc_pbuf_generic skip = {
   27c92:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   27c94:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   27c96:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   27c9a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
{
   27c9e:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   27ca0:	6801      	ldr	r1, [r0, #0]
   27ca2:	462a      	mov	r2, r5
   27ca4:	f7ff ffd8 	bl	27c58 <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   27ca8:	68e3      	ldr	r3, [r4, #12]
	tmp_wr_idx_inc(buffer, wlen);
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   27caa:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   27cac:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   27cae:	4298      	cmp	r0, r3
		buffer->flags |= MPSC_PBUF_FULL;
   27cb0:	bf02      	ittt	eq
   27cb2:	6923      	ldreq	r3, [r4, #16]
   27cb4:	f043 0308 	orreq.w	r3, r3, #8
   27cb8:	6123      	streq	r3, [r4, #16]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   27cba:	462a      	mov	r2, r5
   27cbc:	4620      	mov	r0, r4
   27cbe:	f7ff ffcb 	bl	27c58 <idx_inc>
   27cc2:	6060      	str	r0, [r4, #4]
}
   27cc4:	bd38      	pop	{r3, r4, r5, pc}

00027cc6 <drop_item_locked>:

static bool drop_item_locked(struct mpsc_pbuf_buffer *buffer,
			     uint32_t free_wlen,
			     union mpsc_pbuf_generic **item_to_drop,
			     uint32_t *tmp_wr_idx_shift)
{
   27cc6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t skip_wlen;

	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   27cca:	68c7      	ldr	r7, [r0, #12]
   27ccc:	69c6      	ldr	r6, [r0, #28]
{
   27cce:	469b      	mov	fp, r3
	if (item->hdr.busy && !item->hdr.valid) {
   27cd0:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
   27cd4:	f003 0303 	and.w	r3, r3, #3
   27cd8:	2b02      	cmp	r3, #2
{
   27cda:	4604      	mov	r4, r0
   27cdc:	4688      	mov	r8, r1
   27cde:	4691      	mov	r9, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   27ce0:	eb06 0a87 	add.w	sl, r6, r7, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   27ce4:	f04f 0300 	mov.w	r3, #0
   27ce8:	d009      	beq.n	27cfe <drop_item_locked+0x38>
	skip_wlen = get_skip(item);
	*item_to_drop = NULL;
   27cea:	6013      	str	r3, [r2, #0]
	*tmp_wr_idx_shift = 0;
   27cec:	f8cb 3000 	str.w	r3, [fp]
		buffer->tmp_rd_idx = buffer->rd_idx;
		return true;
	}

	/* Other options for dropping available only in overwrite mode. */
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
   27cf0:	6923      	ldr	r3, [r4, #16]
   27cf2:	0799      	lsls	r1, r3, #30
   27cf4:	d410      	bmi.n	27d18 <drop_item_locked+0x52>
		return false;
   27cf6:	2000      	movs	r0, #0
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
			       item, rd_wlen);
	}

	return true;
}
   27cf8:	b003      	add	sp, #12
   27cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return item->skip.len;
   27cfe:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
	*item_to_drop = NULL;
   27d02:	6013      	str	r3, [r2, #0]
	if (skip_wlen) {
   27d04:	0889      	lsrs	r1, r1, #2
	*tmp_wr_idx_shift = 0;
   27d06:	f8cb 3000 	str.w	r3, [fp]
	if (skip_wlen) {
   27d0a:	d0f1      	beq.n	27cf0 <drop_item_locked+0x2a>
		rd_idx_inc(buffer, skip_wlen);
   27d0c:	f7ff ffb2 	bl	27c74 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   27d10:	68e3      	ldr	r3, [r4, #12]
   27d12:	60a3      	str	r3, [r4, #8]
		return true;
   27d14:	2001      	movs	r0, #1
   27d16:	e7ef      	b.n	27cf8 <drop_item_locked+0x32>
	uint32_t rd_wlen = buffer->get_wlen(item);
   27d18:	69a3      	ldr	r3, [r4, #24]
   27d1a:	4650      	mov	r0, sl
   27d1c:	4798      	blx	r3
	return item->hdr.valid;
   27d1e:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
	if (!is_valid(item)) {
   27d22:	07da      	lsls	r2, r3, #31
	uint32_t rd_wlen = buffer->get_wlen(item);
   27d24:	4605      	mov	r5, r0
	if (!is_valid(item)) {
   27d26:	d5e6      	bpl.n	27cf6 <drop_item_locked+0x30>
	} else if (item->hdr.busy) {
   27d28:	f013 0302 	ands.w	r3, r3, #2
   27d2c:	d01d      	beq.n	27d6a <drop_item_locked+0xa4>
		if (free_wlen) {
   27d2e:	f1b8 0f00 	cmp.w	r8, #0
   27d32:	d003      	beq.n	27d3c <drop_item_locked+0x76>
			add_skip_item(buffer, free_wlen);
   27d34:	4641      	mov	r1, r8
   27d36:	4620      	mov	r0, r4
   27d38:	f7ff ffa8 	bl	27c8c <add_skip_item>
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   27d3c:	6861      	ldr	r1, [r4, #4]
   27d3e:	462a      	mov	r2, r5
   27d40:	4620      	mov	r0, r4
   27d42:	f7ff ff89 	bl	27c58 <idx_inc>
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   27d46:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
   27d4a:	4299      	cmp	r1, r3
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   27d4c:	6060      	str	r0, [r4, #4]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   27d4e:	d104      	bne.n	27d5a <drop_item_locked+0x94>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
   27d50:	462a      	mov	r2, r5
   27d52:	4620      	mov	r0, r4
   27d54:	f7ff ff80 	bl	27c58 <idx_inc>
   27d58:	60a0      	str	r0, [r4, #8]
		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
   27d5a:	68a3      	ldr	r3, [r4, #8]
   27d5c:	6023      	str	r3, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
   27d5e:	60e3      	str	r3, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
   27d60:	6923      	ldr	r3, [r4, #16]
   27d62:	f043 0308 	orr.w	r3, r3, #8
   27d66:	6123      	str	r3, [r4, #16]
   27d68:	e7d4      	b.n	27d14 <drop_item_locked+0x4e>
		rd_idx_inc(buffer, rd_wlen);
   27d6a:	4601      	mov	r1, r0
   27d6c:	4620      	mov	r0, r4
   27d6e:	9301      	str	r3, [sp, #4]
   27d70:	f7ff ff80 	bl	27c74 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   27d74:	68e2      	ldr	r2, [r4, #12]
   27d76:	60a2      	str	r2, [r4, #8]
		if (free_wlen) {
   27d78:	f1b8 0f00 	cmp.w	r8, #0
   27d7c:	d004      	beq.n	27d88 <drop_item_locked+0xc2>
			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
   27d7e:	6821      	ldr	r1, [r4, #0]
   27d80:	69e2      	ldr	r2, [r4, #28]
   27d82:	9b01      	ldr	r3, [sp, #4]
   27d84:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
   27d88:	eb05 0208 	add.w	r2, r5, r8
   27d8c:	f8cb 2000 	str.w	r2, [fp]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
   27d90:	6821      	ldr	r1, [r4, #0]
   27d92:	4620      	mov	r0, r4
   27d94:	f7ff ff60 	bl	27c58 <idx_inc>
		buffer->flags |= MPSC_PBUF_FULL;
   27d98:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
   27d9a:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
   27d9c:	f043 0308 	orr.w	r3, r3, #8
   27da0:	6123      	str	r3, [r4, #16]
		item->hdr.valid = 0;
   27da2:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
   27da6:	f36f 0300 	bfc	r3, #0, #1
   27daa:	f806 3027 	strb.w	r3, [r6, r7, lsl #2]
		*item_to_drop = item;
   27dae:	f8c9 a000 	str.w	sl, [r9]
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
   27db2:	e7af      	b.n	27d14 <drop_item_locked+0x4e>

00027db4 <post_drop_action>:

static void post_drop_action(struct mpsc_pbuf_buffer *buffer,
			     uint32_t prev_tmp_wr_idx,
			     uint32_t tmp_wr_idx_shift)
{
   27db4:	b570      	push	{r4, r5, r6, lr}
   27db6:	4604      	mov	r4, r0
   27db8:	4615      	mov	r5, r2
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);
   27dba:	f7ff ff4d 	bl	27c58 <idx_inc>

	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
   27dbe:	6823      	ldr	r3, [r4, #0]
   27dc0:	4283      	cmp	r3, r0
   27dc2:	d105      	bne.n	27dd0 <post_drop_action+0x1c>
		/* Operation not interrupted by another alloc. */
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
		buffer->flags &= ~MPSC_PBUF_FULL;
   27dc4:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
   27dc6:	6021      	str	r1, [r4, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
   27dc8:	f023 0308 	bic.w	r3, r3, #8
   27dcc:	6123      	str	r3, [r4, #16]
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
	buffer->wr_idx = idx_inc(buffer,
				 buffer->wr_idx,
				 tmp_wr_idx_shift);
	/* full flag? */
}
   27dce:	bd70      	pop	{r4, r5, r6, pc}
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
   27dd0:	69e2      	ldr	r2, [r4, #28]
	union mpsc_pbuf_generic skip = {
   27dd2:	00ab      	lsls	r3, r5, #2
   27dd4:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
   27dd8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->wr_idx = idx_inc(buffer,
   27ddc:	4620      	mov	r0, r4
   27dde:	6861      	ldr	r1, [r4, #4]
   27de0:	462a      	mov	r2, r5
   27de2:	f7ff ff39 	bl	27c58 <idx_inc>
   27de6:	6060      	str	r0, [r4, #4]
   27de8:	e7f1      	b.n	27dce <post_drop_action+0x1a>

00027dea <max_utilization_update>:
{
   27dea:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   27dec:	6903      	ldr	r3, [r0, #16]
   27dee:	075b      	lsls	r3, r3, #29
{
   27df0:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   27df2:	d506      	bpl.n	27e02 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   27df4:	6a45      	ldr	r5, [r0, #36]	; 0x24
   27df6:	f7ff ff1e 	bl	27c36 <get_usage>
   27dfa:	4285      	cmp	r5, r0
   27dfc:	bf2c      	ite	cs
   27dfe:	6265      	strcs	r5, [r4, #36]	; 0x24
   27e00:	6260      	strcc	r0, [r4, #36]	; 0x24
}
   27e02:	bd38      	pop	{r3, r4, r5, pc}

00027e04 <mpsc_pbuf_init>:
{
   27e04:	b538      	push	{r3, r4, r5, lr}
   27e06:	460d      	mov	r5, r1
   27e08:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
   27e0a:	221c      	movs	r2, #28
   27e0c:	2100      	movs	r1, #0
   27e0e:	f001 f896 	bl	28f3e <memset>
	buffer->get_wlen = cfg->get_wlen;
   27e12:	68eb      	ldr	r3, [r5, #12]
   27e14:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
   27e16:	68ab      	ldr	r3, [r5, #8]
   27e18:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
   27e1a:	682b      	ldr	r3, [r5, #0]
   27e1c:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
   27e1e:	686b      	ldr	r3, [r5, #4]
   27e20:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
   27e22:	2200      	movs	r2, #0
   27e24:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
   27e26:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return IS_POWER_OF_TWO(x);
   27e28:	b123      	cbz	r3, 27e34 <mpsc_pbuf_init+0x30>
   27e2a:	1e59      	subs	r1, r3, #1
   27e2c:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   27e2e:	bf08      	it	eq
   27e30:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
   27e34:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
   27e36:	2201      	movs	r2, #1
   27e38:	f104 0028 	add.w	r0, r4, #40	; 0x28
   27e3c:	2100      	movs	r1, #0
}
   27e3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   27e42:	f004 b841 	b.w	2bec8 <z_impl_k_sem_init>

00027e46 <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   27e46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27e4a:	b087      	sub	sp, #28
	union mpsc_pbuf_generic *item = NULL;
	union mpsc_pbuf_generic *dropped_item = NULL;
   27e4c:	2500      	movs	r5, #0
{
   27e4e:	9300      	str	r3, [sp, #0]
	uint32_t tmp_wr_idx_shift = 0;
	uint32_t tmp_wr_idx_val = 0;

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
   27e50:	6a03      	ldr	r3, [r0, #32]
	union mpsc_pbuf_generic *dropped_item = NULL;
   27e52:	9503      	str	r5, [sp, #12]
	if (wlen > (buffer->size)) {
   27e54:	428b      	cmp	r3, r1
{
   27e56:	4604      	mov	r4, r0
   27e58:	460e      	mov	r6, r1
   27e5a:	4692      	mov	sl, r2
	uint32_t tmp_wr_idx_shift = 0;
   27e5c:	9505      	str	r5, [sp, #20]
		MPSC_PBUF_DBG(buffer, "Failed to alloc");
		return NULL;
   27e5e:	46a9      	mov	r9, r5
	if (wlen > (buffer->size)) {
   27e60:	d33a      	bcc.n	27ed8 <mpsc_pbuf_alloc+0x92>
	__asm__ volatile(
   27e62:	f04f 0340 	mov.w	r3, #64	; 0x40
   27e66:	f3ef 8b11 	mrs	fp, BASEPRI
   27e6a:	f383 8812 	msr	BASEPRI_MAX, r3
   27e6e:	f3bf 8f6f 	isb	sy
	do {
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
		if (tmp_wr_idx_shift) {
   27e72:	9a05      	ldr	r2, [sp, #20]
   27e74:	46d8      	mov	r8, fp
   27e76:	b12a      	cbz	r2, 27e84 <mpsc_pbuf_alloc+0x3e>
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
   27e78:	4629      	mov	r1, r5
   27e7a:	4620      	mov	r0, r4
   27e7c:	f7ff ff9a 	bl	27db4 <post_drop_action>
			tmp_wr_idx_shift = 0;
   27e80:	2300      	movs	r3, #0
   27e82:	9305      	str	r3, [sp, #20]
		}

		wrap = free_space(buffer, &free_wlen);
   27e84:	a904      	add	r1, sp, #16
   27e86:	4620      	mov	r0, r4
   27e88:	f7ff fec2 	bl	27c10 <free_space>

		if (free_wlen >= wlen) {
   27e8c:	9904      	ldr	r1, [sp, #16]
   27e8e:	42b1      	cmp	r1, r6
		wrap = free_space(buffer, &free_wlen);
   27e90:	4607      	mov	r7, r0
		if (free_wlen >= wlen) {
   27e92:	d32a      	bcc.n	27eea <mpsc_pbuf_alloc+0xa4>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   27e94:	6822      	ldr	r2, [r4, #0]
			item =
   27e96:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
   27e98:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
   27e9c:	f021 0103 	bic.w	r1, r1, #3
   27ea0:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item =
   27ea4:	eb03 0982 	add.w	r9, r3, r2, lsl #2
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   27ea8:	6821      	ldr	r1, [r4, #0]
   27eaa:	4632      	mov	r2, r6
   27eac:	4620      	mov	r0, r4
   27eae:	f7ff fed3 	bl	27c58 <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   27eb2:	68e3      	ldr	r3, [r4, #12]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   27eb4:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   27eb6:	4298      	cmp	r0, r3
   27eb8:	d012      	beq.n	27ee0 <mpsc_pbuf_alloc+0x9a>
			item->hdr.busy = 0;
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
   27eba:	2700      	movs	r7, #0
	__asm__ volatile(
   27ebc:	f388 8811 	msr	BASEPRI, r8
   27ec0:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
   27ec4:	9903      	ldr	r1, [sp, #12]
   27ec6:	b129      	cbz	r1, 27ed4 <mpsc_pbuf_alloc+0x8e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
   27ec8:	6962      	ldr	r2, [r4, #20]
   27eca:	b10a      	cbz	r2, 27ed0 <mpsc_pbuf_alloc+0x8a>
				buffer->notify_drop(buffer, dropped_item);
   27ecc:	4620      	mov	r0, r4
   27ece:	4790      	blx	r2
			}
			dropped_item = NULL;
   27ed0:	2300      	movs	r3, #0
   27ed2:	9303      	str	r3, [sp, #12]
		}
	} while (cont);
   27ed4:	2f00      	cmp	r7, #0
   27ed6:	d1c4      	bne.n	27e62 <mpsc_pbuf_alloc+0x1c>
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   27ed8:	4648      	mov	r0, r9
   27eda:	b007      	add	sp, #28
   27edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buffer->flags |= MPSC_PBUF_FULL;
   27ee0:	6923      	ldr	r3, [r4, #16]
   27ee2:	f043 0308 	orr.w	r3, r3, #8
   27ee6:	6123      	str	r3, [r4, #16]
   27ee8:	e7e7      	b.n	27eba <mpsc_pbuf_alloc+0x74>
		} else if (wrap) {
   27eea:	b118      	cbz	r0, 27ef4 <mpsc_pbuf_alloc+0xae>
			add_skip_item(buffer, free_wlen);
   27eec:	4620      	mov	r0, r4
   27eee:	f7ff fecd 	bl	27c8c <add_skip_item>
			cont = true;
   27ef2:	e7e3      	b.n	27ebc <mpsc_pbuf_alloc+0x76>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
   27ef4:	9b00      	ldr	r3, [sp, #0]
   27ef6:	ea5a 0303 	orrs.w	r3, sl, r3
   27efa:	d01a      	beq.n	27f32 <mpsc_pbuf_alloc+0xec>
   27efc:	9101      	str	r1, [sp, #4]
   27efe:	f003 ff29 	bl	2bd54 <k_is_in_isr>
   27f02:	9901      	ldr	r1, [sp, #4]
   27f04:	b9a8      	cbnz	r0, 27f32 <mpsc_pbuf_alloc+0xec>
   27f06:	f38b 8811 	msr	BASEPRI, fp
   27f0a:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
   27f0e:	9b00      	ldr	r3, [sp, #0]
   27f10:	4652      	mov	r2, sl
   27f12:	f104 0028 	add.w	r0, r4, #40	; 0x28
   27f16:	f7fb fa23 	bl	23360 <z_impl_k_sem_take>
	__asm__ volatile(
   27f1a:	f04f 0340 	mov.w	r3, #64	; 0x40
   27f1e:	f3ef 8811 	mrs	r8, BASEPRI
   27f22:	f383 8812 	msr	BASEPRI_MAX, r3
   27f26:	f3bf 8f6f 	isb	sy
			cont = (err == 0) ? true : false;
   27f2a:	fab0 f780 	clz	r7, r0
   27f2e:	097f      	lsrs	r7, r7, #5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
   27f30:	e7c4      	b.n	27ebc <mpsc_pbuf_alloc+0x76>
			cont = drop_item_locked(buffer, free_wlen,
   27f32:	ab05      	add	r3, sp, #20
   27f34:	aa03      	add	r2, sp, #12
   27f36:	4620      	mov	r0, r4
			tmp_wr_idx_val = buffer->tmp_wr_idx;
   27f38:	6825      	ldr	r5, [r4, #0]
			cont = drop_item_locked(buffer, free_wlen,
   27f3a:	f7ff fec4 	bl	27cc6 <drop_item_locked>
   27f3e:	4607      	mov	r7, r0
   27f40:	e7bc      	b.n	27ebc <mpsc_pbuf_alloc+0x76>

00027f42 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   27f42:	b570      	push	{r4, r5, r6, lr}
   27f44:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   27f46:	6983      	ldr	r3, [r0, #24]
   27f48:	4608      	mov	r0, r1
{
   27f4a:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   27f4c:	4798      	blx	r3
   27f4e:	4602      	mov	r2, r0
   27f50:	f04f 0340 	mov.w	r3, #64	; 0x40
   27f54:	f3ef 8611 	mrs	r6, BASEPRI
   27f58:	f383 8812 	msr	BASEPRI_MAX, r3
   27f5c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   27f60:	782b      	ldrb	r3, [r5, #0]
   27f62:	f043 0301 	orr.w	r3, r3, #1
   27f66:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   27f68:	6861      	ldr	r1, [r4, #4]
   27f6a:	4620      	mov	r0, r4
   27f6c:	f7ff fe74 	bl	27c58 <idx_inc>
   27f70:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   27f72:	4620      	mov	r0, r4
   27f74:	f7ff ff39 	bl	27dea <max_utilization_update>
	__asm__ volatile(
   27f78:	f386 8811 	msr	BASEPRI, r6
   27f7c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
   27f80:	bd70      	pop	{r4, r5, r6, pc}

00027f82 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   27f82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27f84:	4604      	mov	r4, r0
	__asm__ volatile(
   27f86:	f04f 0340 	mov.w	r3, #64	; 0x40
   27f8a:	f3ef 8611 	mrs	r6, BASEPRI
   27f8e:	f383 8812 	msr	BASEPRI_MAX, r3
   27f92:	f3bf 8f6f 	isb	sy
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
   27f96:	6923      	ldr	r3, [r4, #16]
   27f98:	f013 0f08 	tst.w	r3, #8
   27f9c:	68a3      	ldr	r3, [r4, #8]
   27f9e:	d102      	bne.n	27fa6 <mpsc_pbuf_claim+0x24>
   27fa0:	6862      	ldr	r2, [r4, #4]
   27fa2:	4293      	cmp	r3, r2
   27fa4:	d900      	bls.n	27fa8 <mpsc_pbuf_claim+0x26>
		*res = buffer->size - buffer->tmp_rd_idx;
   27fa6:	6a22      	ldr	r2, [r4, #32]

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
   27fa8:	69e1      	ldr	r1, [r4, #28]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   27faa:	1ad2      	subs	r2, r2, r3

		if (!a || is_invalid(item)) {
   27fac:	b92a      	cbnz	r2, 27fba <mpsc_pbuf_claim+0x38>
	__asm__ volatile(
   27fae:	f386 8811 	msr	BASEPRI, r6
   27fb2:	f3bf 8f6f 	isb	sy
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
   27fb6:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, ">>claimed %d: %p", a, item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
   27fb8:	e033      	b.n	28022 <mpsc_pbuf_claim+0xa0>
	return !item->hdr.valid && !item->hdr.busy;
   27fba:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		if (!a || is_invalid(item)) {
   27fbe:	f012 0003 	ands.w	r0, r2, #3
		item = (union mpsc_pbuf_generic *)
   27fc2:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
   27fc6:	d0f2      	beq.n	27fae <mpsc_pbuf_claim+0x2c>
	if (item->hdr.busy && !item->hdr.valid) {
   27fc8:	2802      	cmp	r0, #2
   27fca:	d103      	bne.n	27fd4 <mpsc_pbuf_claim+0x52>
		return item->skip.len;
   27fcc:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
   27fd0:	08ad      	lsrs	r5, r5, #2
   27fd2:	d105      	bne.n	27fe0 <mpsc_pbuf_claim+0x5e>
   27fd4:	07d0      	lsls	r0, r2, #31
   27fd6:	d412      	bmi.n	27ffe <mpsc_pbuf_claim+0x7c>
					skip ? skip : buffer->get_wlen(item);
   27fd8:	69a3      	ldr	r3, [r4, #24]
   27fda:	4638      	mov	r0, r7
   27fdc:	4798      	blx	r3
   27fde:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   27fe0:	68a1      	ldr	r1, [r4, #8]
   27fe2:	462a      	mov	r2, r5
   27fe4:	4620      	mov	r0, r4
   27fe6:	f7ff fe37 	bl	27c58 <idx_inc>
				rd_idx_inc(buffer, inc);
   27fea:	4629      	mov	r1, r5
				buffer->tmp_rd_idx =
   27fec:	60a0      	str	r0, [r4, #8]
				rd_idx_inc(buffer, inc);
   27fee:	4620      	mov	r0, r4
   27ff0:	f7ff fe40 	bl	27c74 <rd_idx_inc>
   27ff4:	f386 8811 	msr	BASEPRI, r6
   27ff8:	f3bf 8f6f 	isb	sy
	} while (cont);
   27ffc:	e7c3      	b.n	27f86 <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
   27ffe:	f042 0202 	orr.w	r2, r2, #2
   28002:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
						buffer->get_wlen(item));
   28006:	4638      	mov	r0, r7
   28008:	69a3      	ldr	r3, [r4, #24]
					idx_inc(buffer, buffer->tmp_rd_idx,
   2800a:	68a5      	ldr	r5, [r4, #8]
						buffer->get_wlen(item));
   2800c:	4798      	blx	r3
					idx_inc(buffer, buffer->tmp_rd_idx,
   2800e:	4629      	mov	r1, r5
						buffer->get_wlen(item));
   28010:	4602      	mov	r2, r0
					idx_inc(buffer, buffer->tmp_rd_idx,
   28012:	4620      	mov	r0, r4
   28014:	f7ff fe20 	bl	27c58 <idx_inc>
				buffer->tmp_rd_idx =
   28018:	60a0      	str	r0, [r4, #8]
   2801a:	f386 8811 	msr	BASEPRI, r6
   2801e:	f3bf 8f6f 	isb	sy
}
   28022:	4638      	mov	r0, r7
   28024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00028026 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   28026:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28028:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   2802a:	6983      	ldr	r3, [r0, #24]
   2802c:	4608      	mov	r0, r1
{
   2802e:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   28030:	4798      	blx	r3
   28032:	4606      	mov	r6, r0
	__asm__ volatile(
   28034:	f04f 0340 	mov.w	r3, #64	; 0x40
   28038:	f3ef 8711 	mrs	r7, BASEPRI
   2803c:	f383 8812 	msr	BASEPRI_MAX, r3
   28040:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   28044:	782b      	ldrb	r3, [r5, #0]
   28046:	f36f 0300 	bfc	r3, #0, #1
   2804a:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   2804c:	6923      	ldr	r3, [r4, #16]
   2804e:	079b      	lsls	r3, r3, #30
   28050:	d505      	bpl.n	2805e <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   28052:	68e2      	ldr	r2, [r4, #12]
   28054:	69e3      	ldr	r3, [r4, #28]
   28056:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   2805a:	429d      	cmp	r5, r3
   2805c:	d11a      	bne.n	28094 <mpsc_pbuf_free+0x6e>
		witem->hdr.busy = 0;
   2805e:	782b      	ldrb	r3, [r5, #0]
   28060:	f36f 0341 	bfc	r3, #1, #1
   28064:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   28066:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
   2806a:	4299      	cmp	r1, r3
   2806c:	d104      	bne.n	28078 <mpsc_pbuf_free+0x52>
			 * at claimed item. In that case tmp_rd_idx points at
			 * the same location. In that case increment also tmp_rd_idx
			 * which will mark freed buffer as the only free space in
			 * the buffer.
			 */
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
   2806e:	4632      	mov	r2, r6
   28070:	4620      	mov	r0, r4
   28072:	f7ff fdf1 	bl	27c58 <idx_inc>
   28076:	60a0      	str	r0, [r4, #8]
		}
		rd_idx_inc(buffer, wlen);
   28078:	4631      	mov	r1, r6
   2807a:	4620      	mov	r0, r4
   2807c:	f7ff fdfa 	bl	27c74 <rd_idx_inc>
	__asm__ volatile(
   28080:	f387 8811 	msr	BASEPRI, r7
   28084:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   28088:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "<<freed: %p", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
   2808c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   28090:	f7fb b940 	b.w	23314 <z_impl_k_sem_give>
		witem->skip.len = wlen;
   28094:	682b      	ldr	r3, [r5, #0]
   28096:	f360 039f 	bfi	r3, r0, #2, #30
   2809a:	602b      	str	r3, [r5, #0]
   2809c:	e7f0      	b.n	28080 <mpsc_pbuf_free+0x5a>

0002809e <mpsc_pbuf_is_pending>:
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
   2809e:	6902      	ldr	r2, [r0, #16]
   280a0:	6883      	ldr	r3, [r0, #8]
   280a2:	0712      	lsls	r2, r2, #28
   280a4:	d402      	bmi.n	280ac <mpsc_pbuf_is_pending+0xe>
   280a6:	6842      	ldr	r2, [r0, #4]
   280a8:	429a      	cmp	r2, r3
   280aa:	d200      	bcs.n	280ae <mpsc_pbuf_is_pending+0x10>
		*res = buffer->size - buffer->tmp_rd_idx;
   280ac:	6a02      	ldr	r2, [r0, #32]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   280ae:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   280b0:	1e18      	subs	r0, r3, #0
   280b2:	bf18      	it	ne
   280b4:	2001      	movne	r0, #1
   280b6:	4770      	bx	lr

000280b8 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   280b8:	4770      	bx	lr

000280ba <nvs_flash_rd>:
{
   280ba:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   280bc:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   280be:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   280c0:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   280c2:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   280c4:	fa16 f181 	uxtah	r1, r6, r1
   280c8:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   280cc:	6884      	ldr	r4, [r0, #8]
   280ce:	6824      	ldr	r4, [r4, #0]
   280d0:	46a4      	mov	ip, r4
}
   280d2:	bc70      	pop	{r4, r5, r6}
   280d4:	4760      	bx	ip

000280d6 <nvs_sector_advance>:
	*addr += (1 << ADDR_SECT_SHIFT);
   280d6:	680b      	ldr	r3, [r1, #0]
   280d8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   280dc:	600b      	str	r3, [r1, #0]
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   280de:	89c0      	ldrh	r0, [r0, #14]
   280e0:	0c1a      	lsrs	r2, r3, #16
   280e2:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   280e6:	bf04      	itt	eq
   280e8:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   280ec:	600b      	streq	r3, [r1, #0]
}
   280ee:	4770      	bx	lr

000280f0 <nvs_flash_block_cmp>:
{
   280f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   280f4:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   280f6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   280f8:	681d      	ldr	r5, [r3, #0]
   280fa:	426d      	negs	r5, r5
{
   280fc:	b089      	sub	sp, #36	; 0x24
   280fe:	4681      	mov	r9, r0
   28100:	460e      	mov	r6, r1
   28102:	4617      	mov	r7, r2
	block_size =
   28104:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   28108:	b91c      	cbnz	r4, 28112 <nvs_flash_block_cmp+0x22>
	return 0;
   2810a:	4620      	mov	r0, r4
}
   2810c:	b009      	add	sp, #36	; 0x24
   2810e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   28112:	42ac      	cmp	r4, r5
   28114:	46a0      	mov	r8, r4
   28116:	bf28      	it	cs
   28118:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   2811a:	4643      	mov	r3, r8
   2811c:	466a      	mov	r2, sp
   2811e:	4631      	mov	r1, r6
   28120:	4648      	mov	r0, r9
   28122:	f7ff ffca 	bl	280ba <nvs_flash_rd>
		if (rc) {
   28126:	2800      	cmp	r0, #0
   28128:	d1f0      	bne.n	2810c <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   2812a:	4642      	mov	r2, r8
   2812c:	4669      	mov	r1, sp
   2812e:	4638      	mov	r0, r7
   28130:	f000 fed3 	bl	28eda <memcmp>
		if (rc) {
   28134:	b920      	cbnz	r0, 28140 <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   28136:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   2813a:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   2813c:	4447      	add	r7, r8
   2813e:	e7e3      	b.n	28108 <nvs_flash_block_cmp+0x18>
			return 1;
   28140:	2001      	movs	r0, #1
   28142:	e7e3      	b.n	2810c <nvs_flash_block_cmp+0x1c>

00028144 <nvs_flash_cmp_const>:
{
   28144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28148:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2814a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2814c:	681d      	ldr	r5, [r3, #0]
   2814e:	426d      	negs	r5, r5
{
   28150:	b088      	sub	sp, #32
	block_size =
   28152:	f005 0520 	and.w	r5, r5, #32
{
   28156:	4607      	mov	r7, r0
   28158:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   2815a:	4668      	mov	r0, sp
{
   2815c:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   2815e:	462a      	mov	r2, r5
   28160:	f000 feed 	bl	28f3e <memset>
	while (len) {
   28164:	b91c      	cbnz	r4, 2816e <nvs_flash_cmp_const+0x2a>
	return 0;
   28166:	4620      	mov	r0, r4
}
   28168:	b008      	add	sp, #32
   2816a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   2816e:	42ac      	cmp	r4, r5
   28170:	46a0      	mov	r8, r4
   28172:	bf28      	it	cs
   28174:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   28176:	4643      	mov	r3, r8
   28178:	466a      	mov	r2, sp
   2817a:	4631      	mov	r1, r6
   2817c:	4638      	mov	r0, r7
   2817e:	f7ff ffb7 	bl	280f0 <nvs_flash_block_cmp>
		if (rc) {
   28182:	2800      	cmp	r0, #0
   28184:	d1f0      	bne.n	28168 <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   28186:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   2818a:	4446      	add	r6, r8
   2818c:	e7ea      	b.n	28164 <nvs_flash_cmp_const+0x20>

0002818e <nvs_flash_erase_sector>:
{
   2818e:	b538      	push	{r3, r4, r5, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   28190:	8982      	ldrh	r2, [r0, #12]
   28192:	6803      	ldr	r3, [r0, #0]
	addr &= ADDR_SECT_MASK;
   28194:	0c0d      	lsrs	r5, r1, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   28196:	0c09      	lsrs	r1, r1, #16
{
   28198:	4604      	mov	r4, r0
	addr &= ADDR_SECT_MASK;
   2819a:	042d      	lsls	r5, r5, #16
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   2819c:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2819e:	fb02 3101 	mla	r1, r2, r1, r3
	rc = api->erase(dev, offset, size);
   281a2:	6883      	ldr	r3, [r0, #8]
   281a4:	689b      	ldr	r3, [r3, #8]
   281a6:	4798      	blx	r3
	if (rc) {
   281a8:	b950      	cbnz	r0, 281c0 <nvs_flash_erase_sector+0x32>
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   281aa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   281ac:	89a3      	ldrh	r3, [r4, #12]
   281ae:	7912      	ldrb	r2, [r2, #4]
   281b0:	4629      	mov	r1, r5
   281b2:	4620      	mov	r0, r4
   281b4:	f7ff ffc6 	bl	28144 <nvs_flash_cmp_const>
		rc = -ENXIO;
   281b8:	2800      	cmp	r0, #0
   281ba:	bf18      	it	ne
   281bc:	f06f 0005 	mvnne.w	r0, #5
}
   281c0:	bd38      	pop	{r3, r4, r5, pc}

000281c2 <nvs_ate_crc8_update>:
{
   281c2:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   281c4:	4601      	mov	r1, r0
{
   281c6:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   281c8:	2207      	movs	r2, #7
   281ca:	20ff      	movs	r0, #255	; 0xff
   281cc:	f7ea fb2e 	bl	1282c <crc8_ccitt>
	entry->crc8 = crc8;
   281d0:	71e0      	strb	r0, [r4, #7]
}
   281d2:	bd10      	pop	{r4, pc}

000281d4 <z_log_msg_static_create.constprop.0>:
   281d4:	2300      	movs	r3, #0
   281d6:	f7eb bcf5 	b.w	13bc4 <z_impl_z_log_msg_static_create>

000281da <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   281da:	7803      	ldrb	r3, [r0, #0]
   281dc:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   281de:	bf81      	itttt	hi
   281e0:	f101 31ff 	addhi.w	r1, r1, #4294967295
   281e4:	18c9      	addhi	r1, r1, r3
   281e6:	425b      	neghi	r3, r3
   281e8:	4019      	andhi	r1, r3
}
   281ea:	4608      	mov	r0, r1
   281ec:	4770      	bx	lr

000281ee <nvs_ate_valid>:
{
   281ee:	b570      	push	{r4, r5, r6, lr}
   281f0:	460c      	mov	r4, r1
   281f2:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   281f4:	2108      	movs	r1, #8
   281f6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   281f8:	f7ff ffef 	bl	281da <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   281fc:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   281fe:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   28200:	4621      	mov	r1, r4
   28202:	20ff      	movs	r0, #255	; 0xff
   28204:	f7ea fb12 	bl	1282c <crc8_ccitt>
	if (crc8 == entry->crc8) {
   28208:	79e3      	ldrb	r3, [r4, #7]
   2820a:	4283      	cmp	r3, r0
   2820c:	d107      	bne.n	2821e <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   2820e:	89aa      	ldrh	r2, [r5, #12]
   28210:	8863      	ldrh	r3, [r4, #2]
   28212:	1b90      	subs	r0, r2, r6
	if ((nvs_ate_crc8_check(entry)) ||
   28214:	4283      	cmp	r3, r0
   28216:	bf2c      	ite	cs
   28218:	2000      	movcs	r0, #0
   2821a:	2001      	movcc	r0, #1
}
   2821c:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   2821e:	2000      	movs	r0, #0
   28220:	e7fc      	b.n	2821c <nvs_ate_valid+0x2e>

00028222 <nvs_close_ate_valid>:
{
   28222:	b538      	push	{r3, r4, r5, lr}
   28224:	4605      	mov	r5, r0
   28226:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   28228:	f7ff ffe1 	bl	281ee <nvs_ate_valid>
   2822c:	b1a0      	cbz	r0, 28258 <nvs_close_ate_valid+0x36>
   2822e:	88a0      	ldrh	r0, [r4, #4]
   28230:	b998      	cbnz	r0, 2825a <nvs_close_ate_valid+0x38>
   28232:	8822      	ldrh	r2, [r4, #0]
   28234:	f64f 73ff 	movw	r3, #65535	; 0xffff
   28238:	429a      	cmp	r2, r3
   2823a:	d10d      	bne.n	28258 <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2823c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   2823e:	2108      	movs	r1, #8
   28240:	f7ff ffcb 	bl	281da <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   28244:	8862      	ldrh	r2, [r4, #2]
   28246:	89ab      	ldrh	r3, [r5, #12]
   28248:	1a9b      	subs	r3, r3, r2
   2824a:	fbb3 f2f0 	udiv	r2, r3, r0
   2824e:	fb02 3010 	mls	r0, r2, r0, r3
   28252:	fab0 f080 	clz	r0, r0
   28256:	0940      	lsrs	r0, r0, #5
}
   28258:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   2825a:	2000      	movs	r0, #0
   2825c:	e7fc      	b.n	28258 <nvs_close_ate_valid+0x36>

0002825e <nvs_prev_ate>:
{
   2825e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   28260:	4604      	mov	r4, r0
   28262:	460d      	mov	r5, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   28264:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   28266:	2108      	movs	r1, #8
   28268:	f7ff ffb7 	bl	281da <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2826c:	6829      	ldr	r1, [r5, #0]
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2826e:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   28270:	2308      	movs	r3, #8
   28272:	4620      	mov	r0, r4
   28274:	f7ff ff21 	bl	280ba <nvs_flash_rd>
	if (rc) {
   28278:	4606      	mov	r6, r0
   2827a:	2800      	cmp	r0, #0
   2827c:	d136      	bne.n	282ec <nvs_prev_ate+0x8e>
	*addr += ate_size;
   2827e:	682b      	ldr	r3, [r5, #0]
   28280:	443b      	add	r3, r7
   28282:	602b      	str	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   28284:	89a2      	ldrh	r2, [r4, #12]
   28286:	b299      	uxth	r1, r3
   28288:	1bd2      	subs	r2, r2, r7
   2828a:	4291      	cmp	r1, r2
   2828c:	d12e      	bne.n	282ec <nvs_prev_ate+0x8e>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   2828e:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   28290:	bf03      	ittte	eq
   28292:	89e2      	ldrheq	r2, [r4, #14]
   28294:	f102 32ff 	addeq.w	r2, r2, #4294967295
   28298:	eb03 4102 	addeq.w	r1, r3, r2, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
   2829c:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
   282a0:	6029      	str	r1, [r5, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   282a2:	2308      	movs	r3, #8
   282a4:	466a      	mov	r2, sp
   282a6:	4620      	mov	r0, r4
   282a8:	f7ff ff07 	bl	280ba <nvs_flash_rd>
	if (rc) {
   282ac:	b9e8      	cbnz	r0, 282ea <nvs_prev_ate+0x8c>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   282ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   282b0:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   282b2:	466b      	mov	r3, sp
		if (data8[i] != value) {
   282b4:	f813 1b01 	ldrb.w	r1, [r3], #1
   282b8:	428a      	cmp	r2, r1
   282ba:	d10c      	bne.n	282d6 <nvs_prev_ate+0x78>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   282bc:	3001      	adds	r0, #1
   282be:	2808      	cmp	r0, #8
   282c0:	d1f8      	bne.n	282b4 <nvs_prev_ate+0x56>
		*addr = fs->ate_wra;
   282c2:	6863      	ldr	r3, [r4, #4]
   282c4:	e005      	b.n	282d2 <nvs_prev_ate+0x74>
		(*addr) &= ADDR_SECT_MASK;
   282c6:	682b      	ldr	r3, [r5, #0]
		(*addr) += close_ate.offset;
   282c8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   282cc:	0c1b      	lsrs	r3, r3, #16
   282ce:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   282d0:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   282d2:	602b      	str	r3, [r5, #0]
		return 0;
   282d4:	e00a      	b.n	282ec <nvs_prev_ate+0x8e>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   282d6:	4669      	mov	r1, sp
   282d8:	4620      	mov	r0, r4
   282da:	f7ff ffa2 	bl	28222 <nvs_close_ate_valid>
   282de:	2800      	cmp	r0, #0
   282e0:	d1f1      	bne.n	282c6 <nvs_prev_ate+0x68>
	return nvs_recover_last_ate(fs, addr);
   282e2:	4629      	mov	r1, r5
   282e4:	4620      	mov	r0, r4
   282e6:	f7ea fe83 	bl	12ff0 <nvs_recover_last_ate>
   282ea:	4606      	mov	r6, r0
}
   282ec:	4630      	mov	r0, r6
   282ee:	b003      	add	sp, #12
   282f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000282f2 <nvs_flash_al_wrt>:
{
   282f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   282f6:	4607      	mov	r7, r0
   282f8:	b089      	sub	sp, #36	; 0x24
   282fa:	4690      	mov	r8, r2
	if (!len) {
   282fc:	461e      	mov	r6, r3
   282fe:	b91b      	cbnz	r3, 28308 <nvs_flash_al_wrt+0x16>
		return 0;
   28300:	2000      	movs	r0, #0
}
   28302:	b009      	add	sp, #36	; 0x24
   28304:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	offset += addr & ADDR_OFFS_MASK;
   28308:	683c      	ldr	r4, [r7, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2830a:	8983      	ldrh	r3, [r0, #12]
   2830c:	0c08      	lsrs	r0, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   2830e:	fa14 f181 	uxtah	r1, r4, r1
   28312:	fb00 1403 	mla	r4, r0, r3, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   28316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   28318:	681d      	ldr	r5, [r3, #0]
   2831a:	426d      	negs	r5, r5
	if (blen > 0) {
   2831c:	4035      	ands	r5, r6
   2831e:	d00c      	beq.n	2833a <nvs_flash_al_wrt+0x48>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   28320:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	rc = api->write(dev, offset, data, len);
   28322:	6883      	ldr	r3, [r0, #8]
   28324:	4621      	mov	r1, r4
   28326:	f8d3 9004 	ldr.w	r9, [r3, #4]
   2832a:	462b      	mov	r3, r5
   2832c:	47c8      	blx	r9
		if (rc) {
   2832e:	2800      	cmp	r0, #0
   28330:	d1e7      	bne.n	28302 <nvs_flash_al_wrt+0x10>
	if (len) {
   28332:	1b76      	subs	r6, r6, r5
   28334:	d0e4      	beq.n	28300 <nvs_flash_al_wrt+0xe>
		offset += blen;
   28336:	442c      	add	r4, r5
		data8 += blen;
   28338:	44a8      	add	r8, r5
		memcpy(buf, data8, len);
   2833a:	4632      	mov	r2, r6
   2833c:	4641      	mov	r1, r8
   2833e:	4668      	mov	r0, sp
   28340:	f000 fdf2 	bl	28f28 <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   28344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   28346:	681a      	ldr	r2, [r3, #0]
   28348:	7919      	ldrb	r1, [r3, #4]
   2834a:	1b92      	subs	r2, r2, r6
   2834c:	eb0d 0006 	add.w	r0, sp, r6
   28350:	f000 fdf5 	bl	28f3e <memset>
				 fs->flash_parameters->write_block_size);
   28354:	e9d7 030a 	ldrd	r0, r3, [r7, #40]	; 0x28
   28358:	681b      	ldr	r3, [r3, #0]
   2835a:	6882      	ldr	r2, [r0, #8]
   2835c:	4621      	mov	r1, r4
   2835e:	6855      	ldr	r5, [r2, #4]
   28360:	466a      	mov	r2, sp
   28362:	47a8      	blx	r5
	return rc;
   28364:	e7cd      	b.n	28302 <nvs_flash_al_wrt+0x10>

00028366 <nvs_flash_ate_wrt>:
{
   28366:	b510      	push	{r4, lr}
   28368:	460a      	mov	r2, r1
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   2836a:	2308      	movs	r3, #8
   2836c:	6841      	ldr	r1, [r0, #4]
{
   2836e:	4604      	mov	r4, r0
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   28370:	f7ff ffbf 	bl	282f2 <nvs_flash_al_wrt>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   28374:	2108      	movs	r1, #8
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   28376:	4602      	mov	r2, r0
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   28378:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2837a:	f7ff ff2e 	bl	281da <nvs_al_size.isra.0>
   2837e:	6863      	ldr	r3, [r4, #4]
   28380:	1a1b      	subs	r3, r3, r0
   28382:	6063      	str	r3, [r4, #4]
}
   28384:	4610      	mov	r0, r2
   28386:	bd10      	pop	{r4, pc}

00028388 <nvs_add_gc_done_ate>:
{
   28388:	b513      	push	{r0, r1, r4, lr}
	gc_done_ate.id = 0xffff;
   2838a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2838e:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   28392:	2300      	movs	r3, #0
{
   28394:	4604      	mov	r4, r0
	gc_done_ate.len = 0U;
   28396:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2839a:	6883      	ldr	r3, [r0, #8]
   2839c:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   283a0:	4668      	mov	r0, sp
   283a2:	f7ff ff0e 	bl	281c2 <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   283a6:	4669      	mov	r1, sp
   283a8:	4620      	mov	r0, r4
   283aa:	f7ff ffdc 	bl	28366 <nvs_flash_ate_wrt>
}
   283ae:	b002      	add	sp, #8
   283b0:	bd10      	pop	{r4, pc}

000283b2 <nvs_gc>:
{
   283b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   283b6:	4604      	mov	r4, r0
   283b8:	b095      	sub	sp, #84	; 0x54
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   283ba:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   283bc:	2108      	movs	r1, #8
   283be:	f7ff ff0c 	bl	281da <nvs_al_size.isra.0>
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   283c2:	6863      	ldr	r3, [r4, #4]
   283c4:	0c1b      	lsrs	r3, r3, #16
   283c6:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   283c8:	4605      	mov	r5, r0
	nvs_sector_advance(fs, &sec_addr);
   283ca:	a903      	add	r1, sp, #12
   283cc:	4620      	mov	r0, r4
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   283ce:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
   283d0:	f7ff fe81 	bl	280d6 <nvs_sector_advance>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   283d4:	f8dd b00c 	ldr.w	fp, [sp, #12]
   283d8:	89a6      	ldrh	r6, [r4, #12]
   283da:	445e      	add	r6, fp
   283dc:	1b76      	subs	r6, r6, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   283de:	aa06      	add	r2, sp, #24
   283e0:	2308      	movs	r3, #8
   283e2:	4631      	mov	r1, r6
   283e4:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
   283e6:	9604      	str	r6, [sp, #16]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   283e8:	f7ff fe67 	bl	280ba <nvs_flash_rd>
	if (rc < 0) {
   283ec:	1e02      	subs	r2, r0, #0
   283ee:	f2c0 80a9 	blt.w	28544 <nvs_gc+0x192>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   283f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   283f4:	aa06      	add	r2, sp, #24
   283f6:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   283f8:	2300      	movs	r3, #0
		if (data8[i] != value) {
   283fa:	f812 0b01 	ldrb.w	r0, [r2], #1
   283fe:	4281      	cmp	r1, r0
   28400:	f040 808f 	bne.w	28522 <nvs_gc+0x170>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   28404:	3301      	adds	r3, #1
   28406:	2b08      	cmp	r3, #8
   28408:	d1f7      	bne.n	283fa <nvs_gc+0x48>
	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   2840a:	68a3      	ldr	r3, [r4, #8]
   2840c:	6862      	ldr	r2, [r4, #4]
   2840e:	442b      	add	r3, r5
   28410:	429a      	cmp	r2, r3
   28412:	d27e      	bcs.n	28512 <nvs_gc+0x160>
	rc = nvs_flash_erase_sector(fs, sec_addr);
   28414:	4659      	mov	r1, fp
   28416:	4620      	mov	r0, r4
   28418:	f7ff feb9 	bl	2818e <nvs_flash_erase_sector>
   2841c:	4602      	mov	r2, r0
	if (rc) {
   2841e:	e091      	b.n	28544 <nvs_gc+0x192>
		gc_addr += close_ate.offset;
   28420:	f8bd 301a 	ldrh.w	r3, [sp, #26]
		gc_addr &= ADDR_SECT_MASK;
   28424:	0c36      	lsrs	r6, r6, #16
   28426:	0436      	lsls	r6, r6, #16
		gc_addr += close_ate.offset;
   28428:	441e      	add	r6, r3
   2842a:	9604      	str	r6, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   2842c:	aa08      	add	r2, sp, #32
   2842e:	a904      	add	r1, sp, #16
   28430:	4620      	mov	r0, r4
		gc_prev_addr = gc_addr;
   28432:	f8dd a010 	ldr.w	sl, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   28436:	f7ff ff12 	bl	2825e <nvs_prev_ate>
		if (rc) {
   2843a:	4602      	mov	r2, r0
   2843c:	2800      	cmp	r0, #0
   2843e:	f040 8081 	bne.w	28544 <nvs_gc+0x192>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   28442:	a908      	add	r1, sp, #32
   28444:	4620      	mov	r0, r4
   28446:	f7ff fed2 	bl	281ee <nvs_ate_valid>
   2844a:	b918      	cbnz	r0, 28454 <nvs_gc+0xa2>
	} while (gc_prev_addr != stop_addr);
   2844c:	9b01      	ldr	r3, [sp, #4]
   2844e:	459a      	cmp	sl, r3
   28450:	d1ec      	bne.n	2842c <nvs_gc+0x7a>
   28452:	e7da      	b.n	2840a <nvs_gc+0x58>
		wlk_addr = fs->ate_wra;
   28454:	6863      	ldr	r3, [r4, #4]
   28456:	9305      	str	r3, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   28458:	aa0a      	add	r2, sp, #40	; 0x28
   2845a:	a905      	add	r1, sp, #20
   2845c:	4620      	mov	r0, r4
			wlk_prev_addr = wlk_addr;
   2845e:	9e05      	ldr	r6, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   28460:	f7ff fefd 	bl	2825e <nvs_prev_ate>
			if (rc) {
   28464:	4602      	mov	r2, r0
   28466:	2800      	cmp	r0, #0
   28468:	d16c      	bne.n	28544 <nvs_gc+0x192>
			if ((wlk_ate.id == gc_ate.id) &&
   2846a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   2846e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   28472:	429a      	cmp	r2, r3
   28474:	d027      	beq.n	284c6 <nvs_gc+0x114>
		} while (wlk_addr != fs->ate_wra);
   28476:	6862      	ldr	r2, [r4, #4]
   28478:	9b05      	ldr	r3, [sp, #20]
   2847a:	429a      	cmp	r2, r3
   2847c:	d1ec      	bne.n	28458 <nvs_gc+0xa6>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   2847e:	4556      	cmp	r6, sl
   28480:	d1e4      	bne.n	2844c <nvs_gc+0x9a>
   28482:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   28486:	2b00      	cmp	r3, #0
   28488:	d0e0      	beq.n	2844c <nvs_gc+0x9a>
			data_addr += gc_ate.offset;
   2848a:	f8bd 7022 	ldrh.w	r7, [sp, #34]	; 0x22
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   2848e:	ea4f 431a 	mov.w	r3, sl, lsr #16
   28492:	041b      	lsls	r3, r3, #16
			data_addr += gc_ate.offset;
   28494:	441f      	add	r7, r3
			nvs_ate_crc8_update(&gc_ate);
   28496:	a808      	add	r0, sp, #32
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   28498:	68a3      	ldr	r3, [r4, #8]
   2849a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			nvs_ate_crc8_update(&gc_ate);
   2849e:	f7ff fe90 	bl	281c2 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   284a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   284a4:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   284a8:	681e      	ldr	r6, [r3, #0]
   284aa:	4276      	negs	r6, r6
	block_size =
   284ac:	f006 0620 	and.w	r6, r6, #32
	while (len) {
   284b0:	f1b9 0f00 	cmp.w	r9, #0
   284b4:	d10e      	bne.n	284d4 <nvs_gc+0x122>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   284b6:	a908      	add	r1, sp, #32
   284b8:	4620      	mov	r0, r4
   284ba:	f7ff ff54 	bl	28366 <nvs_flash_ate_wrt>
			if (rc) {
   284be:	4602      	mov	r2, r0
   284c0:	2800      	cmp	r0, #0
   284c2:	d0c3      	beq.n	2844c <nvs_gc+0x9a>
   284c4:	e03e      	b.n	28544 <nvs_gc+0x192>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   284c6:	a90a      	add	r1, sp, #40	; 0x28
   284c8:	4620      	mov	r0, r4
   284ca:	f7ff fe90 	bl	281ee <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   284ce:	2800      	cmp	r0, #0
   284d0:	d0d1      	beq.n	28476 <nvs_gc+0xc4>
   284d2:	e7d4      	b.n	2847e <nvs_gc+0xcc>
		bytes_to_copy = MIN(block_size, len);
   284d4:	454e      	cmp	r6, r9
   284d6:	46b0      	mov	r8, r6
   284d8:	bf28      	it	cs
   284da:	46c8      	movcs	r8, r9
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   284dc:	aa0c      	add	r2, sp, #48	; 0x30
   284de:	4643      	mov	r3, r8
   284e0:	4639      	mov	r1, r7
   284e2:	4620      	mov	r0, r4
   284e4:	f7ff fde9 	bl	280ba <nvs_flash_rd>
		if (rc) {
   284e8:	4602      	mov	r2, r0
   284ea:	bb58      	cbnz	r0, 28544 <nvs_gc+0x192>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   284ec:	4643      	mov	r3, r8
   284ee:	68a1      	ldr	r1, [r4, #8]
   284f0:	aa0c      	add	r2, sp, #48	; 0x30
   284f2:	4620      	mov	r0, r4
   284f4:	f7ff fefd 	bl	282f2 <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
   284f8:	4641      	mov	r1, r8
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   284fa:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   284fc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   284fe:	f7ff fe6c 	bl	281da <nvs_al_size.isra.0>
   28502:	68a3      	ldr	r3, [r4, #8]
   28504:	4403      	add	r3, r0
   28506:	60a3      	str	r3, [r4, #8]
		if (rc) {
   28508:	b9e2      	cbnz	r2, 28544 <nvs_gc+0x192>
		len -= bytes_to_copy;
   2850a:	eba9 0908 	sub.w	r9, r9, r8
		addr += bytes_to_copy;
   2850e:	4447      	add	r7, r8
   28510:	e7ce      	b.n	284b0 <nvs_gc+0xfe>
		rc = nvs_add_gc_done_ate(fs);
   28512:	4620      	mov	r0, r4
   28514:	f7ff ff38 	bl	28388 <nvs_add_gc_done_ate>
		if (rc) {
   28518:	4602      	mov	r2, r0
   2851a:	2800      	cmp	r0, #0
   2851c:	f43f af7a 	beq.w	28414 <nvs_gc+0x62>
   28520:	e010      	b.n	28544 <nvs_gc+0x192>
	stop_addr = gc_addr - ate_size;
   28522:	1b73      	subs	r3, r6, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
   28524:	a906      	add	r1, sp, #24
   28526:	4620      	mov	r0, r4
	stop_addr = gc_addr - ate_size;
   28528:	9301      	str	r3, [sp, #4]
	if (nvs_close_ate_valid(fs, &close_ate)) {
   2852a:	f7ff fe7a 	bl	28222 <nvs_close_ate_valid>
   2852e:	2800      	cmp	r0, #0
   28530:	f47f af76 	bne.w	28420 <nvs_gc+0x6e>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   28534:	a904      	add	r1, sp, #16
   28536:	4620      	mov	r0, r4
   28538:	f7ea fd5a 	bl	12ff0 <nvs_recover_last_ate>
		if (rc) {
   2853c:	4602      	mov	r2, r0
   2853e:	2800      	cmp	r0, #0
   28540:	f43f af74 	beq.w	2842c <nvs_gc+0x7a>
}
   28544:	4610      	mov	r0, r2
   28546:	b015      	add	sp, #84	; 0x54
   28548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002854c <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   2854c:	2300      	movs	r3, #0
   2854e:	461a      	mov	r2, r3
   28550:	f7ea bf58 	b.w	13404 <nvs_write>

00028554 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   28554:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   28556:	2400      	movs	r4, #0
   28558:	9400      	str	r4, [sp, #0]
   2855a:	f7eb f82f 	bl	135bc <nvs_read_hist>
	return rc;
}
   2855e:	b002      	add	sp, #8
   28560:	bd10      	pop	{r4, pc}

00028562 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG_LOG;
   28562:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   28564:	075b      	lsls	r3, r3, #29
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
   28566:	bf5f      	itttt	pl
   28568:	6803      	ldrpl	r3, [r0, #0]
   2856a:	8842      	ldrhpl	r2, [r0, #2]
   2856c:	f3c3 234a 	ubfxpl	r3, r3, #9, #11
   28570:	eb03 1012 	addpl.w	r0, r3, r2, lsr #4
   28574:	bf5d      	ittte	pl
   28576:	3017      	addpl	r0, #23
   28578:	f020 0007 	bicpl.w	r0, r0, #7
   2857c:	0880      	lsrpl	r0, r0, #2
	return 0;
   2857e:	2000      	movmi	r0, #0
}
   28580:	4770      	bx	lr

00028582 <dummy_timestamp>:
}
   28582:	2000      	movs	r0, #0
   28584:	4770      	bx	lr

00028586 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   28586:	f003 b9a1 	b.w	2b8cc <sys_clock_cycle_get_32>

0002858a <atomic_inc>:
{
   2858a:	4603      	mov	r3, r0
}
   2858c:	f3bf 8f5b 	dmb	ish
   28590:	e853 0f00 	ldrex	r0, [r3]
   28594:	1c42      	adds	r2, r0, #1
   28596:	e843 2100 	strex	r1, r2, [r3]
   2859a:	2900      	cmp	r1, #0
   2859c:	d1f8      	bne.n	28590 <atomic_inc+0x6>
   2859e:	f3bf 8f5b 	dmb	ish
   285a2:	4770      	bx	lr

000285a4 <z_log_vprintk>:
{
   285a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   285a6:	2300      	movs	r3, #0
   285a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   285ac:	e9cd 3300 	strd	r3, r3, [sp]
   285b0:	461a      	mov	r2, r3
   285b2:	4619      	mov	r1, r3
   285b4:	4618      	mov	r0, r3
   285b6:	f7eb fb89 	bl	13ccc <z_impl_z_log_msg_runtime_vcreate>
}
   285ba:	b005      	add	sp, #20
   285bc:	f85d fb04 	ldr.w	pc, [sp], #4

000285c0 <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   285c0:	2001      	movs	r0, #1
   285c2:	f7eb b93b 	b.w	1383c <z_log_dropped>

000285c6 <z_log_get_tag>:
}
   285c6:	2000      	movs	r0, #0
   285c8:	4770      	bx	lr

000285ca <z_cbprintf_cpy>:
{
   285ca:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   285cc:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
   285d0:	1b9b      	subs	r3, r3, r6
   285d2:	428b      	cmp	r3, r1
{
   285d4:	460c      	mov	r4, r1
   285d6:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   285d8:	d30a      	bcc.n	285f0 <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   285da:	6813      	ldr	r3, [r2, #0]
   285dc:	460a      	mov	r2, r1
   285de:	4601      	mov	r1, r0
   285e0:	1998      	adds	r0, r3, r6
   285e2:	f000 fca1 	bl	28f28 <memcpy>
	desc->off += len;
   285e6:	68ab      	ldr	r3, [r5, #8]
   285e8:	4423      	add	r3, r4
   285ea:	60ab      	str	r3, [r5, #8]
	return len;
   285ec:	4620      	mov	r0, r4
}
   285ee:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   285f0:	f06f 001b 	mvn.w	r0, #27
   285f4:	e7fb      	b.n	285ee <z_cbprintf_cpy+0x24>

000285f6 <z_log_msg_finalize>:
{
   285f6:	b570      	push	{r4, r5, r6, lr}
   285f8:	460e      	mov	r6, r1
   285fa:	4615      	mov	r5, r2
   285fc:	4619      	mov	r1, r3
	if (!msg) {
   285fe:	4604      	mov	r4, r0
   28600:	b918      	cbnz	r0, 2860a <z_log_msg_finalize+0x14>
}
   28602:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   28606:	f7eb b919 	b.w	1383c <z_log_dropped>
	if (data) {
   2860a:	b133      	cbz	r3, 2861a <z_log_msg_finalize+0x24>
		uint8_t *d = msg->data + desc.package_len;
   2860c:	f3c2 234a 	ubfx	r3, r2, #9, #11
   28610:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
   28612:	0d12      	lsrs	r2, r2, #20
   28614:	4418      	add	r0, r3
   28616:	f000 fc87 	bl	28f28 <memcpy>
	msg->hdr.source = source;
   2861a:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   2861e:	4620      	mov	r0, r4
}
   28620:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   28624:	f7eb ba9a 	b.w	13b5c <z_log_msg_commit>

00028628 <buffer_write>:
{
   28628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2862a:	4606      	mov	r6, r0
   2862c:	460d      	mov	r5, r1
   2862e:	4614      	mov	r4, r2
   28630:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   28632:	4621      	mov	r1, r4
   28634:	4628      	mov	r0, r5
   28636:	463a      	mov	r2, r7
   28638:	47b0      	blx	r6
	} while (len != 0);
   2863a:	1a24      	subs	r4, r4, r0
		buf += processed;
   2863c:	4405      	add	r5, r0
	} while (len != 0);
   2863e:	d1f8      	bne.n	28632 <buffer_write+0xa>
}
   28640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00028642 <cbvprintf>:
{
   28642:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   28644:	2400      	movs	r4, #0
   28646:	9400      	str	r4, [sp, #0]
   28648:	f7ea f906 	bl	12858 <z_cbvprintf_impl>
}
   2864c:	b002      	add	sp, #8
   2864e:	bd10      	pop	{r4, pc}

00028650 <log_output_flush>:
{
   28650:	b510      	push	{r4, lr}
		     output->control_block->offset,
   28652:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   28654:	6881      	ldr	r1, [r0, #8]
{
   28656:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   28658:	e9d2 2300 	ldrd	r2, r3, [r2]
   2865c:	6800      	ldr	r0, [r0, #0]
   2865e:	f7ff ffe3 	bl	28628 <buffer_write>
	output->control_block->offset = 0;
   28662:	6863      	ldr	r3, [r4, #4]
   28664:	2200      	movs	r2, #0
   28666:	601a      	str	r2, [r3, #0]
}
   28668:	bd10      	pop	{r4, pc}

0002866a <out_func>:
{
   2866a:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   2866c:	684b      	ldr	r3, [r1, #4]
   2866e:	681a      	ldr	r2, [r3, #0]
   28670:	68cb      	ldr	r3, [r1, #12]
   28672:	429a      	cmp	r2, r3
{
   28674:	4605      	mov	r5, r0
   28676:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   28678:	d102      	bne.n	28680 <out_func+0x16>
		log_output_flush(out_ctx);
   2867a:	4608      	mov	r0, r1
   2867c:	f7ff ffe8 	bl	28650 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   28680:	6863      	ldr	r3, [r4, #4]
   28682:	f3bf 8f5b 	dmb	ish
   28686:	e853 2f00 	ldrex	r2, [r3]
   2868a:	1c51      	adds	r1, r2, #1
   2868c:	e843 1000 	strex	r0, r1, [r3]
   28690:	2800      	cmp	r0, #0
   28692:	d1f8      	bne.n	28686 <out_func+0x1c>
   28694:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   28698:	68a3      	ldr	r3, [r4, #8]
   2869a:	549d      	strb	r5, [r3, r2]
}
   2869c:	2000      	movs	r0, #0
   2869e:	bd38      	pop	{r3, r4, r5, pc}

000286a0 <cr_out_func>:
	if (c == '\n') {
   286a0:	280a      	cmp	r0, #10
{
   286a2:	b538      	push	{r3, r4, r5, lr}
   286a4:	4604      	mov	r4, r0
   286a6:	460d      	mov	r5, r1
	if (c == '\n') {
   286a8:	d102      	bne.n	286b0 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   286aa:	200d      	movs	r0, #13
   286ac:	f7ff ffdd 	bl	2866a <out_func>
	out_func(c, ctx);
   286b0:	4629      	mov	r1, r5
   286b2:	4620      	mov	r0, r4
   286b4:	f7ff ffd9 	bl	2866a <out_func>
}
   286b8:	2000      	movs	r0, #0
   286ba:	bd38      	pop	{r3, r4, r5, pc}

000286bc <log_backend_uart_init>:
}
   286bc:	4770      	bx	lr

000286be <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   286be:	4770      	bx	lr

000286c0 <get_sectors_cb>:
{
   286c0:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   286c2:	684c      	ldr	r4, [r1, #4]
   286c4:	6803      	ldr	r3, [r0, #0]
   286c6:	42a3      	cmp	r3, r4
   286c8:	d201      	bcs.n	286ce <get_sectors_cb+0xe>
		*bail_value = true;
   286ca:	2001      	movs	r0, #1
}
   286cc:	bd70      	pop	{r4, r5, r6, pc}
	} else if (info->start_offset >= data->area_off + data->area_len) {
   286ce:	688a      	ldr	r2, [r1, #8]
   286d0:	4422      	add	r2, r4
   286d2:	4293      	cmp	r3, r2
   286d4:	d301      	bcc.n	286da <get_sectors_cb+0x1a>
		*bail_value = false;
   286d6:	2000      	movs	r0, #0
   286d8:	e7f8      	b.n	286cc <get_sectors_cb+0xc>
	} else if (data->ret_idx >= data->ret_len) {
   286da:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
   286de:	694e      	ldr	r6, [r1, #20]
   286e0:	42b5      	cmp	r5, r6
   286e2:	d303      	bcc.n	286ec <get_sectors_cb+0x2c>
		data->status = -ENOMEM;
   286e4:	f06f 030b 	mvn.w	r3, #11
   286e8:	618b      	str	r3, [r1, #24]
		return true;
   286ea:	e7f4      	b.n	286d6 <get_sectors_cb+0x16>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   286ec:	1b1b      	subs	r3, r3, r4
   286ee:	f842 3035 	str.w	r3, [r2, r5, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   286f2:	6843      	ldr	r3, [r0, #4]
   286f4:	6908      	ldr	r0, [r1, #16]
   286f6:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
   286fa:	6053      	str	r3, [r2, #4]
	data->ret_idx++;
   286fc:	690b      	ldr	r3, [r1, #16]
   286fe:	3301      	adds	r3, #1
   28700:	610b      	str	r3, [r1, #16]
	return true;
   28702:	e7e2      	b.n	286ca <get_sectors_cb+0xa>

00028704 <settings_load>:
	return settings_load_subtree(NULL);
   28704:	2000      	movs	r0, #0
   28706:	f7eb bf99 	b.w	1463c <settings_load_subtree>

0002870a <settings_delete>:
	return settings_save_one(name, NULL, 0);
   2870a:	2200      	movs	r2, #0
   2870c:	4611      	mov	r1, r2
   2870e:	f7eb bf5b 	b.w	145c8 <settings_save_one>

00028712 <settings_name_steq>:
{
   28712:	4603      	mov	r3, r0
   28714:	b510      	push	{r4, lr}
   28716:	4608      	mov	r0, r1
	if (next) {
   28718:	b10a      	cbz	r2, 2871e <settings_name_steq+0xc>
		*next = NULL;
   2871a:	2100      	movs	r1, #0
   2871c:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   2871e:	b153      	cbz	r3, 28736 <settings_name_steq+0x24>
   28720:	b1d0      	cbz	r0, 28758 <settings_name_steq+0x46>
   28722:	1e41      	subs	r1, r0, #1
	while ((*key != '\0') && (*key == *name) &&
   28724:	f811 0f01 	ldrb.w	r0, [r1, #1]!
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   28728:	b180      	cbz	r0, 2874c <settings_name_steq+0x3a>
	while ((*key != '\0') && (*key == *name) &&
   2872a:	f813 4b01 	ldrb.w	r4, [r3], #1
   2872e:	42a0      	cmp	r0, r4
   28730:	d101      	bne.n	28736 <settings_name_steq+0x24>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   28732:	283d      	cmp	r0, #61	; 0x3d
   28734:	d1f6      	bne.n	28724 <settings_name_steq+0x12>
		return 0;
   28736:	2000      	movs	r0, #0
   28738:	e00e      	b.n	28758 <settings_name_steq+0x46>
			*next = name + 1;
   2873a:	3301      	adds	r3, #1
   2873c:	6013      	str	r3, [r2, #0]
   2873e:	e00a      	b.n	28756 <settings_name_steq+0x44>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   28740:	283d      	cmp	r0, #61	; 0x3d
   28742:	d008      	beq.n	28756 <settings_name_steq+0x44>
   28744:	fab0 f080 	clz	r0, r0
   28748:	0940      	lsrs	r0, r0, #5
   2874a:	e005      	b.n	28758 <settings_name_steq+0x46>
	if (*name == SETTINGS_NAME_SEPARATOR) {
   2874c:	7818      	ldrb	r0, [r3, #0]
   2874e:	282f      	cmp	r0, #47	; 0x2f
   28750:	d1f6      	bne.n	28740 <settings_name_steq+0x2e>
		if (next) {
   28752:	2a00      	cmp	r2, #0
   28754:	d1f1      	bne.n	2873a <settings_name_steq+0x28>
		return 1;
   28756:	2001      	movs	r0, #1
}
   28758:	bd10      	pop	{r4, pc}

0002875a <settings_name_next>:
{
   2875a:	b510      	push	{r4, lr}
	if (next) {
   2875c:	b109      	cbz	r1, 28762 <settings_name_next+0x8>
		*next = NULL;
   2875e:	2300      	movs	r3, #0
   28760:	600b      	str	r3, [r1, #0]
	if (!name) {
   28762:	b158      	cbz	r0, 2877c <settings_name_next+0x22>
   28764:	4603      	mov	r3, r0
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   28766:	781a      	ldrb	r2, [r3, #0]
   28768:	461c      	mov	r4, r3
   2876a:	3301      	adds	r3, #1
   2876c:	b12a      	cbz	r2, 2877a <settings_name_next+0x20>
   2876e:	2a3d      	cmp	r2, #61	; 0x3d
   28770:	d003      	beq.n	2877a <settings_name_next+0x20>
   28772:	2a2f      	cmp	r2, #47	; 0x2f
   28774:	d1f7      	bne.n	28766 <settings_name_next+0xc>
		if (next) {
   28776:	b101      	cbz	r1, 2877a <settings_name_next+0x20>
			*next = name + 1;
   28778:	600b      	str	r3, [r1, #0]
   2877a:	1a20      	subs	r0, r4, r0
}
   2877c:	bd10      	pop	{r4, pc}

0002877e <settings_nvs_storage_get>:
static void *settings_nvs_storage_get(struct settings_store *cs)
{
	struct settings_nvs *cf = CONTAINER_OF(cs, struct settings_nvs, cf_store);

	return &cf->cf_nvs;
}
   2877e:	3008      	adds	r0, #8
   28780:	4770      	bx	lr

00028782 <settings_nvs_read_fn>:
{
   28782:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   28784:	4613      	mov	r3, r2
{
   28786:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   28788:	460a      	mov	r2, r1
   2878a:	8881      	ldrh	r1, [r0, #4]
   2878c:	6800      	ldr	r0, [r0, #0]
   2878e:	f7ff fee1 	bl	28554 <nvs_read>
}
   28792:	42a0      	cmp	r0, r4
   28794:	bfa8      	it	ge
   28796:	4620      	movge	r0, r4
   28798:	bd10      	pop	{r4, pc}

0002879a <settings_nvs_save>:
{
   2879a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2879e:	b097      	sub	sp, #92	; 0x5c
   287a0:	4604      	mov	r4, r0
   287a2:	9201      	str	r2, [sp, #4]
   287a4:	469a      	mov	sl, r3
	if (!name) {
   287a6:	4689      	mov	r9, r1
   287a8:	2900      	cmp	r1, #0
   287aa:	d07e      	beq.n	288aa <settings_nvs_save+0x110>
	delete = ((value == NULL) || (val_len == 0));
   287ac:	b1da      	cbz	r2, 287e6 <settings_nvs_save+0x4c>
   287ae:	faba f78a 	clz	r7, sl
   287b2:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   287b4:	8f25      	ldrh	r5, [r4, #56]	; 0x38
   287b6:	3501      	adds	r5, #1
   287b8:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   287ba:	46a8      	mov	r8, r5
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   287bc:	f104 0b08 	add.w	fp, r4, #8
		name_id--;
   287c0:	1e6e      	subs	r6, r5, #1
   287c2:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   287c4:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   287c8:	d029      	beq.n	2881e <settings_nvs_save+0x84>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   287ca:	234a      	movs	r3, #74	; 0x4a
   287cc:	aa03      	add	r2, sp, #12
   287ce:	4631      	mov	r1, r6
   287d0:	4658      	mov	r0, fp
   287d2:	f7ff febf 	bl	28554 <nvs_read>
		if (rc < 0) {
   287d6:	2800      	cmp	r0, #0
   287d8:	da07      	bge.n	287ea <settings_nvs_save+0x50>
		name_id--;
   287da:	f110 0f02 	cmn.w	r0, #2
   287de:	bf08      	it	eq
   287e0:	46b0      	moveq	r8, r6
   287e2:	4635      	mov	r5, r6
   287e4:	e7ec      	b.n	287c0 <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   287e6:	2701      	movs	r7, #1
   287e8:	e7e4      	b.n	287b4 <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   287ea:	f100 0358 	add.w	r3, r0, #88	; 0x58
   287ee:	eb0d 0003 	add.w	r0, sp, r3
   287f2:	2300      	movs	r3, #0
   287f4:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   287f8:	a903      	add	r1, sp, #12
   287fa:	4648      	mov	r0, r9
   287fc:	f000 fb4d 	bl	28e9a <strcmp>
   28800:	2800      	cmp	r0, #0
   28802:	d1ee      	bne.n	287e2 <settings_nvs_save+0x48>
		if (!delete) {
   28804:	b32f      	cbz	r7, 28852 <settings_nvs_save+0xb8>
		if (name_id == cf->last_name_id) {
   28806:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   28808:	42b3      	cmp	r3, r6
   2880a:	d00b      	beq.n	28824 <settings_nvs_save+0x8a>
		rc = nvs_delete(&cf->cf_nvs, name_id);
   2880c:	4631      	mov	r1, r6
   2880e:	4658      	mov	r0, fp
   28810:	f7ff fe9c 	bl	2854c <nvs_delete>
		if (rc >= 0) {
   28814:	2800      	cmp	r0, #0
   28816:	da12      	bge.n	2883e <settings_nvs_save+0xa4>
}
   28818:	b017      	add	sp, #92	; 0x5c
   2881a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   2881e:	b3b7      	cbz	r7, 2888e <settings_nvs_save+0xf4>
			return 0;
   28820:	2000      	movs	r0, #0
   28822:	e7f9      	b.n	28818 <settings_nvs_save+0x7e>
			cf->last_name_id--;
   28824:	4622      	mov	r2, r4
   28826:	1e73      	subs	r3, r6, #1
   28828:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   2882c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   28830:	2302      	movs	r3, #2
   28832:	4658      	mov	r0, fp
   28834:	f7ea fde6 	bl	13404 <nvs_write>
			if (rc < 0) {
   28838:	2800      	cmp	r0, #0
   2883a:	dae7      	bge.n	2880c <settings_nvs_save+0x72>
   2883c:	e7ec      	b.n	28818 <settings_nvs_save+0x7e>
			rc = nvs_delete(&cf->cf_nvs, name_id +
   2883e:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   28842:	313f      	adds	r1, #63	; 0x3f
   28844:	b289      	uxth	r1, r1
   28846:	4658      	mov	r0, fp
   28848:	f7ff fe80 	bl	2854c <nvs_delete>
	if (rc < 0) {
   2884c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   28850:	e7e2      	b.n	28818 <settings_nvs_save+0x7e>
		name_id--;
   28852:	46b0      	mov	r8, r6
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   28854:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   28858:	d02a      	beq.n	288b0 <settings_nvs_save+0x116>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   2885a:	f104 0508 	add.w	r5, r4, #8
   2885e:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   28862:	9a01      	ldr	r2, [sp, #4]
   28864:	4653      	mov	r3, sl
   28866:	b289      	uxth	r1, r1
   28868:	4628      	mov	r0, r5
   2886a:	f7ea fdcb 	bl	13404 <nvs_write>
	if (rc < 0) {
   2886e:	2800      	cmp	r0, #0
   28870:	dbd2      	blt.n	28818 <settings_nvs_save+0x7e>
	if (write_name) {
   28872:	b977      	cbnz	r7, 28892 <settings_nvs_save+0xf8>
	if (write_name_id > cf->last_name_id) {
   28874:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   28876:	4543      	cmp	r3, r8
   28878:	d2d2      	bcs.n	28820 <settings_nvs_save+0x86>
		cf->last_name_id = write_name_id;
   2887a:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   2887c:	2302      	movs	r3, #2
		cf->last_name_id = write_name_id;
   2887e:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   28882:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   28886:	4628      	mov	r0, r5
   28888:	f7ea fdbc 	bl	13404 <nvs_write>
   2888c:	e7de      	b.n	2884c <settings_nvs_save+0xb2>
	write_name = true;
   2888e:	2701      	movs	r7, #1
   28890:	e7e0      	b.n	28854 <settings_nvs_save+0xba>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   28892:	4648      	mov	r0, r9
   28894:	f000 faf1 	bl	28e7a <strlen>
   28898:	464a      	mov	r2, r9
   2889a:	4603      	mov	r3, r0
   2889c:	4641      	mov	r1, r8
   2889e:	4628      	mov	r0, r5
   288a0:	f7ea fdb0 	bl	13404 <nvs_write>
		if (rc < 0) {
   288a4:	2800      	cmp	r0, #0
   288a6:	dae5      	bge.n	28874 <settings_nvs_save+0xda>
   288a8:	e7b6      	b.n	28818 <settings_nvs_save+0x7e>
		return -EINVAL;
   288aa:	f06f 0015 	mvn.w	r0, #21
   288ae:	e7b3      	b.n	28818 <settings_nvs_save+0x7e>
		return -ENOMEM;
   288b0:	f06f 000b 	mvn.w	r0, #11
   288b4:	e7b0      	b.n	28818 <settings_nvs_save+0x7e>

000288b6 <settings_nvs_backend_init>:
{
   288b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	cf->cf_nvs.flash_device = cf->flash_dev;
   288b8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   288ba:	6303      	str	r3, [r0, #48]	; 0x30
{
   288bc:	4604      	mov	r4, r0
	if (cf->cf_nvs.flash_device == NULL) {
   288be:	b1c3      	cbz	r3, 288f2 <settings_nvs_backend_init+0x3c>
	rc = nvs_mount(&cf->cf_nvs);
   288c0:	f100 0608 	add.w	r6, r0, #8
   288c4:	4630      	mov	r0, r6
   288c6:	f7ea fbc5 	bl	13054 <nvs_mount>
	if (rc) {
   288ca:	4605      	mov	r5, r0
   288cc:	b970      	cbnz	r0, 288ec <settings_nvs_backend_init+0x36>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   288ce:	2302      	movs	r3, #2
   288d0:	f10d 0206 	add.w	r2, sp, #6
   288d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   288d8:	4630      	mov	r0, r6
   288da:	f7ff fe3b 	bl	28554 <nvs_read>
	if (rc < 0) {
   288de:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   288e0:	bfac      	ite	ge
   288e2:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
   288e6:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
   288ea:	8723      	strh	r3, [r4, #56]	; 0x38
}
   288ec:	4628      	mov	r0, r5
   288ee:	b002      	add	sp, #8
   288f0:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   288f2:	f06f 0512 	mvn.w	r5, #18
   288f6:	e7f9      	b.n	288ec <settings_nvs_backend_init+0x36>

000288f8 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   288f8:	b538      	push	{r3, r4, r5, lr}
   288fa:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   288fc:	42ab      	cmp	r3, r5
{
   288fe:	4611      	mov	r1, r2
   28900:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   28902:	d804      	bhi.n	2890e <_copy+0x16>
		(void)memcpy(to, from, from_len);
   28904:	461a      	mov	r2, r3
   28906:	f000 fb0f 	bl	28f28 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   2890a:	4620      	mov	r0, r4
   2890c:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   2890e:	2400      	movs	r4, #0
   28910:	e7fb      	b.n	2890a <_copy+0x12>

00028912 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   28912:	f000 bb14 	b.w	28f3e <memset>

00028916 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   28916:	09c3      	lsrs	r3, r0, #7
   28918:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2891c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   28920:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   28924:	b2c0      	uxtb	r0, r0
   28926:	4770      	bx	lr

00028928 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   28928:	78cb      	ldrb	r3, [r1, #3]
   2892a:	7802      	ldrb	r2, [r0, #0]
   2892c:	4053      	eors	r3, r2
   2892e:	7003      	strb	r3, [r0, #0]
   28930:	884b      	ldrh	r3, [r1, #2]
   28932:	7842      	ldrb	r2, [r0, #1]
   28934:	4053      	eors	r3, r2
   28936:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   28938:	680a      	ldr	r2, [r1, #0]
   2893a:	7883      	ldrb	r3, [r0, #2]
   2893c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   28940:	7083      	strb	r3, [r0, #2]
   28942:	680a      	ldr	r2, [r1, #0]
   28944:	78c3      	ldrb	r3, [r0, #3]
   28946:	4053      	eors	r3, r2
   28948:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   2894a:	79cb      	ldrb	r3, [r1, #7]
   2894c:	7902      	ldrb	r2, [r0, #4]
   2894e:	4053      	eors	r3, r2
   28950:	7103      	strb	r3, [r0, #4]
   28952:	88cb      	ldrh	r3, [r1, #6]
   28954:	7942      	ldrb	r2, [r0, #5]
   28956:	4053      	eors	r3, r2
   28958:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2895a:	684a      	ldr	r2, [r1, #4]
   2895c:	7983      	ldrb	r3, [r0, #6]
   2895e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   28962:	7183      	strb	r3, [r0, #6]
   28964:	684a      	ldr	r2, [r1, #4]
   28966:	79c3      	ldrb	r3, [r0, #7]
   28968:	4053      	eors	r3, r2
   2896a:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2896c:	7acb      	ldrb	r3, [r1, #11]
   2896e:	7a02      	ldrb	r2, [r0, #8]
   28970:	4053      	eors	r3, r2
   28972:	7203      	strb	r3, [r0, #8]
   28974:	7a42      	ldrb	r2, [r0, #9]
   28976:	894b      	ldrh	r3, [r1, #10]
   28978:	4053      	eors	r3, r2
   2897a:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   2897c:	688a      	ldr	r2, [r1, #8]
   2897e:	7a83      	ldrb	r3, [r0, #10]
   28980:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   28984:	7283      	strb	r3, [r0, #10]
   28986:	688a      	ldr	r2, [r1, #8]
   28988:	7ac3      	ldrb	r3, [r0, #11]
   2898a:	4053      	eors	r3, r2
   2898c:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   2898e:	7bcb      	ldrb	r3, [r1, #15]
   28990:	7b02      	ldrb	r2, [r0, #12]
   28992:	4053      	eors	r3, r2
   28994:	7303      	strb	r3, [r0, #12]
   28996:	89cb      	ldrh	r3, [r1, #14]
   28998:	7b42      	ldrb	r2, [r0, #13]
   2899a:	4053      	eors	r3, r2
   2899c:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2899e:	68ca      	ldr	r2, [r1, #12]
   289a0:	7b83      	ldrb	r3, [r0, #14]
   289a2:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   289a6:	7383      	strb	r3, [r0, #14]
   289a8:	68ca      	ldr	r2, [r1, #12]
   289aa:	7bc3      	ldrb	r3, [r0, #15]
   289ac:	4053      	eors	r3, r2
   289ae:	73c3      	strb	r3, [r0, #15]
}
   289b0:	4770      	bx	lr

000289b2 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   289b2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   289b4:	7802      	ldrb	r2, [r0, #0]
   289b6:	f88d 2000 	strb.w	r2, [sp]
   289ba:	7942      	ldrb	r2, [r0, #5]
   289bc:	f88d 2001 	strb.w	r2, [sp, #1]
   289c0:	7a82      	ldrb	r2, [r0, #10]
   289c2:	f88d 2002 	strb.w	r2, [sp, #2]
   289c6:	7bc2      	ldrb	r2, [r0, #15]
   289c8:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   289cc:	7902      	ldrb	r2, [r0, #4]
   289ce:	f88d 2004 	strb.w	r2, [sp, #4]
   289d2:	7a42      	ldrb	r2, [r0, #9]
   289d4:	f88d 2005 	strb.w	r2, [sp, #5]
   289d8:	7b82      	ldrb	r2, [r0, #14]
   289da:	f88d 2006 	strb.w	r2, [sp, #6]
   289de:	78c2      	ldrb	r2, [r0, #3]
   289e0:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   289e4:	7a02      	ldrb	r2, [r0, #8]
   289e6:	f88d 2008 	strb.w	r2, [sp, #8]
   289ea:	7b42      	ldrb	r2, [r0, #13]
   289ec:	f88d 2009 	strb.w	r2, [sp, #9]
   289f0:	7882      	ldrb	r2, [r0, #2]
   289f2:	f88d 200a 	strb.w	r2, [sp, #10]
   289f6:	79c2      	ldrb	r2, [r0, #7]
   289f8:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   289fc:	7b02      	ldrb	r2, [r0, #12]
   289fe:	f88d 200c 	strb.w	r2, [sp, #12]
   28a02:	7842      	ldrb	r2, [r0, #1]
   28a04:	7ac3      	ldrb	r3, [r0, #11]
   28a06:	f88d 200d 	strb.w	r2, [sp, #13]
   28a0a:	7982      	ldrb	r2, [r0, #6]
   28a0c:	f88d 200e 	strb.w	r2, [sp, #14]
   28a10:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   28a14:	2310      	movs	r3, #16
   28a16:	466a      	mov	r2, sp
   28a18:	4619      	mov	r1, r3
   28a1a:	f7ff ff6d 	bl	288f8 <_copy>
}
   28a1e:	b005      	add	sp, #20
   28a20:	f85d fb04 	ldr.w	pc, [sp], #4

00028a24 <mult_row_column>:
{
   28a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28a26:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   28a28:	7808      	ldrb	r0, [r1, #0]
{
   28a2a:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   28a2c:	f7ff ff73 	bl	28916 <_double_byte>
   28a30:	4605      	mov	r5, r0
   28a32:	7860      	ldrb	r0, [r4, #1]
   28a34:	f7ff ff6f 	bl	28916 <_double_byte>
   28a38:	78a2      	ldrb	r2, [r4, #2]
   28a3a:	7863      	ldrb	r3, [r4, #1]
   28a3c:	4053      	eors	r3, r2
   28a3e:	78e2      	ldrb	r2, [r4, #3]
   28a40:	4053      	eors	r3, r2
   28a42:	405d      	eors	r5, r3
   28a44:	4068      	eors	r0, r5
   28a46:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   28a48:	7860      	ldrb	r0, [r4, #1]
   28a4a:	7827      	ldrb	r7, [r4, #0]
   28a4c:	f7ff ff63 	bl	28916 <_double_byte>
   28a50:	4605      	mov	r5, r0
   28a52:	78a0      	ldrb	r0, [r4, #2]
   28a54:	f7ff ff5f 	bl	28916 <_double_byte>
   28a58:	78a3      	ldrb	r3, [r4, #2]
   28a5a:	405f      	eors	r7, r3
   28a5c:	78e3      	ldrb	r3, [r4, #3]
   28a5e:	405f      	eors	r7, r3
   28a60:	407d      	eors	r5, r7
   28a62:	4068      	eors	r0, r5
   28a64:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   28a66:	7863      	ldrb	r3, [r4, #1]
   28a68:	7827      	ldrb	r7, [r4, #0]
   28a6a:	78a0      	ldrb	r0, [r4, #2]
   28a6c:	405f      	eors	r7, r3
   28a6e:	f7ff ff52 	bl	28916 <_double_byte>
   28a72:	4605      	mov	r5, r0
   28a74:	78e0      	ldrb	r0, [r4, #3]
   28a76:	f7ff ff4e 	bl	28916 <_double_byte>
   28a7a:	78e3      	ldrb	r3, [r4, #3]
   28a7c:	405f      	eors	r7, r3
   28a7e:	407d      	eors	r5, r7
   28a80:	4068      	eors	r0, r5
   28a82:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   28a84:	7820      	ldrb	r0, [r4, #0]
   28a86:	f7ff ff46 	bl	28916 <_double_byte>
   28a8a:	7862      	ldrb	r2, [r4, #1]
   28a8c:	7823      	ldrb	r3, [r4, #0]
   28a8e:	4053      	eors	r3, r2
   28a90:	78a2      	ldrb	r2, [r4, #2]
   28a92:	4053      	eors	r3, r2
   28a94:	ea80 0503 	eor.w	r5, r0, r3
   28a98:	78e0      	ldrb	r0, [r4, #3]
   28a9a:	f7ff ff3c 	bl	28916 <_double_byte>
   28a9e:	b2ed      	uxtb	r5, r5
   28aa0:	4045      	eors	r5, r0
   28aa2:	70f5      	strb	r5, [r6, #3]
}
   28aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00028aa6 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   28aa6:	b570      	push	{r4, r5, r6, lr}
   28aa8:	4614      	mov	r4, r2
   28aaa:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   28aac:	4605      	mov	r5, r0
   28aae:	2800      	cmp	r0, #0
   28ab0:	d049      	beq.n	28b46 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   28ab2:	2900      	cmp	r1, #0
   28ab4:	d049      	beq.n	28b4a <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   28ab6:	2a00      	cmp	r2, #0
   28ab8:	d049      	beq.n	28b4e <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   28aba:	2310      	movs	r3, #16
   28abc:	460a      	mov	r2, r1
   28abe:	4668      	mov	r0, sp
   28ac0:	4619      	mov	r1, r3
   28ac2:	f7ff ff19 	bl	288f8 <_copy>
	add_round_key(state, s->words);
   28ac6:	4621      	mov	r1, r4
   28ac8:	4668      	mov	r0, sp
   28aca:	f7ff ff2d 	bl	28928 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   28ace:	3410      	adds	r4, #16
   28ad0:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   28ad4:	4668      	mov	r0, sp
   28ad6:	f7eb ff9b 	bl	14a10 <sub_bytes>
		shift_rows(state);
   28ada:	4668      	mov	r0, sp
   28adc:	f7ff ff69 	bl	289b2 <shift_rows>
	mult_row_column(t, s);
   28ae0:	4669      	mov	r1, sp
   28ae2:	a804      	add	r0, sp, #16
   28ae4:	f7ff ff9e 	bl	28a24 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   28ae8:	a901      	add	r1, sp, #4
   28aea:	a805      	add	r0, sp, #20
   28aec:	f7ff ff9a 	bl	28a24 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   28af0:	a902      	add	r1, sp, #8
   28af2:	a806      	add	r0, sp, #24
   28af4:	f7ff ff96 	bl	28a24 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   28af8:	a903      	add	r1, sp, #12
   28afa:	a807      	add	r0, sp, #28
   28afc:	f7ff ff92 	bl	28a24 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   28b00:	2310      	movs	r3, #16
   28b02:	4619      	mov	r1, r3
   28b04:	eb0d 0203 	add.w	r2, sp, r3
   28b08:	4668      	mov	r0, sp
   28b0a:	f7ff fef5 	bl	288f8 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   28b0e:	4621      	mov	r1, r4
   28b10:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   28b12:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   28b14:	f7ff ff08 	bl	28928 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   28b18:	42b4      	cmp	r4, r6
   28b1a:	d1db      	bne.n	28ad4 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   28b1c:	f7eb ff78 	bl	14a10 <sub_bytes>
	shift_rows(state);
   28b20:	4668      	mov	r0, sp
   28b22:	f7ff ff46 	bl	289b2 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   28b26:	4621      	mov	r1, r4
   28b28:	4668      	mov	r0, sp
   28b2a:	f7ff fefd 	bl	28928 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   28b2e:	2310      	movs	r3, #16
   28b30:	4619      	mov	r1, r3
   28b32:	466a      	mov	r2, sp
   28b34:	4628      	mov	r0, r5
   28b36:	f7ff fedf 	bl	288f8 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   28b3a:	4668      	mov	r0, sp
   28b3c:	2210      	movs	r2, #16
   28b3e:	2100      	movs	r1, #0
   28b40:	f7ff fee7 	bl	28912 <_set>

	return TC_CRYPTO_SUCCESS;
   28b44:	2001      	movs	r0, #1
}
   28b46:	b008      	add	sp, #32
   28b48:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   28b4a:	4608      	mov	r0, r1
   28b4c:	e7fb      	b.n	28b46 <tc_aes_encrypt+0xa0>
   28b4e:	4610      	mov	r0, r2
   28b50:	e7f9      	b.n	28b46 <tc_aes_encrypt+0xa0>

00028b52 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   28b52:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   28b54:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   28b56:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   28b58:	f912 3b10 	ldrsb.w	r3, [r2], #16
   28b5c:	2b00      	cmp	r3, #0
   28b5e:	bfac      	ite	ge
   28b60:	2300      	movge	r3, #0
   28b62:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   28b64:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   28b68:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   28b6c:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   28b6e:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   28b72:	d002      	beq.n	28b7a <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   28b74:	7813      	ldrb	r3, [r2, #0]
   28b76:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   28b78:	e7f4      	b.n	28b64 <gf_double+0x12>
	}
}
   28b7a:	bd10      	pop	{r4, pc}

00028b7c <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   28b7c:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   28b7e:	b120      	cbz	r0, 28b8a <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   28b80:	2258      	movs	r2, #88	; 0x58
   28b82:	2100      	movs	r1, #0
   28b84:	f7ff fec5 	bl	28912 <_set>
   28b88:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   28b8a:	bd08      	pop	{r3, pc}

00028b8c <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   28b8c:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   28b8e:	4604      	mov	r4, r0
   28b90:	b188      	cbz	r0, 28bb6 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   28b92:	2210      	movs	r2, #16
   28b94:	2100      	movs	r1, #0
   28b96:	f7ff febc 	bl	28912 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   28b9a:	2210      	movs	r2, #16
   28b9c:	f104 0030 	add.w	r0, r4, #48	; 0x30
   28ba0:	2100      	movs	r1, #0
   28ba2:	f7ff feb6 	bl	28912 <_set>
	s->leftover_offset = 0;
   28ba6:	2300      	movs	r3, #0
   28ba8:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   28baa:	2200      	movs	r2, #0
   28bac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   28bb0:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   28bb4:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   28bb6:	bd10      	pop	{r4, pc}

00028bb8 <tc_cmac_setup>:
{
   28bb8:	b570      	push	{r4, r5, r6, lr}
   28bba:	4604      	mov	r4, r0
   28bbc:	460d      	mov	r5, r1
   28bbe:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   28bc0:	b310      	cbz	r0, 28c08 <tc_cmac_setup+0x50>
   28bc2:	b311      	cbz	r1, 28c0a <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   28bc4:	2258      	movs	r2, #88	; 0x58
   28bc6:	2100      	movs	r1, #0
   28bc8:	f7ff fea3 	bl	28912 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   28bcc:	4629      	mov	r1, r5
	s->sched = sched;
   28bce:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   28bd0:	4630      	mov	r0, r6
   28bd2:	f7eb ff29 	bl	14a28 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   28bd6:	2210      	movs	r2, #16
   28bd8:	2100      	movs	r1, #0
   28bda:	4620      	mov	r0, r4
   28bdc:	f7ff fe99 	bl	28912 <_set>
	gf_double (s->K1, s->iv);
   28be0:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   28be4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   28be6:	4621      	mov	r1, r4
   28be8:	4620      	mov	r0, r4
   28bea:	f7ff ff5c 	bl	28aa6 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   28bee:	4621      	mov	r1, r4
   28bf0:	4628      	mov	r0, r5
   28bf2:	f7ff ffae 	bl	28b52 <gf_double>
	gf_double (s->K2, s->K1);
   28bf6:	4629      	mov	r1, r5
   28bf8:	f104 0020 	add.w	r0, r4, #32
   28bfc:	f7ff ffa9 	bl	28b52 <gf_double>
	tc_cmac_init(s);
   28c00:	4620      	mov	r0, r4
   28c02:	f7ff ffc3 	bl	28b8c <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   28c06:	2001      	movs	r0, #1
}
   28c08:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   28c0a:	4608      	mov	r0, r1
   28c0c:	e7fc      	b.n	28c08 <tc_cmac_setup+0x50>

00028c0e <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   28c0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28c12:	460e      	mov	r6, r1
   28c14:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   28c16:	4604      	mov	r4, r0
   28c18:	2800      	cmp	r0, #0
   28c1a:	d060      	beq.n	28cde <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   28c1c:	b1fa      	cbz	r2, 28c5e <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   28c1e:	2900      	cmp	r1, #0
   28c20:	d05d      	beq.n	28cde <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   28c22:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   28c26:	ea53 0102 	orrs.w	r1, r3, r2
   28c2a:	d058      	beq.n	28cde <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   28c2c:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   28c2e:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   28c32:	f142 32ff 	adc.w	r2, r2, #4294967295
   28c36:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   28c3a:	f1b8 0f00 	cmp.w	r8, #0
   28c3e:	d02c      	beq.n	28c9a <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   28c40:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   28c44:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   28c48:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   28c4a:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   28c4c:	d20a      	bcs.n	28c64 <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   28c4e:	462b      	mov	r3, r5
   28c50:	4632      	mov	r2, r6
   28c52:	4629      	mov	r1, r5
   28c54:	f7ff fe50 	bl	288f8 <_copy>
			s->leftover_offset += data_length;
   28c58:	6c63      	ldr	r3, [r4, #68]	; 0x44
   28c5a:	442b      	add	r3, r5
   28c5c:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   28c5e:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   28c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   28c64:	463b      	mov	r3, r7
   28c66:	4632      	mov	r2, r6
   28c68:	4639      	mov	r1, r7
   28c6a:	f7ff fe45 	bl	288f8 <_copy>
		data_length -= remaining_space;
   28c6e:	3d10      	subs	r5, #16
		s->leftover_offset = 0;
   28c70:	2300      	movs	r3, #0
   28c72:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   28c74:	4445      	add	r5, r8
		data += remaining_space;
   28c76:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   28c78:	1e63      	subs	r3, r4, #1
   28c7a:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   28c7e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   28c82:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   28c86:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   28c88:	ea82 0200 	eor.w	r2, r2, r0
   28c8c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   28c8e:	d1f6      	bne.n	28c7e <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   28c90:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   28c92:	4621      	mov	r1, r4
   28c94:	4620      	mov	r0, r4
   28c96:	f7ff ff06 	bl	28aa6 <tc_aes_encrypt>
   28c9a:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   28c9e:	2d10      	cmp	r5, #16
   28ca0:	d80a      	bhi.n	28cb8 <tc_cmac_update+0xaa>
	if (data_length > 0) {
   28ca2:	2d00      	cmp	r5, #0
   28ca4:	d0db      	beq.n	28c5e <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   28ca6:	462b      	mov	r3, r5
   28ca8:	4632      	mov	r2, r6
   28caa:	4629      	mov	r1, r5
   28cac:	f104 0030 	add.w	r0, r4, #48	; 0x30
   28cb0:	f7ff fe22 	bl	288f8 <_copy>
		s->leftover_offset = data_length;
   28cb4:	6465      	str	r5, [r4, #68]	; 0x44
   28cb6:	e7d2      	b.n	28c5e <tc_cmac_update+0x50>
   28cb8:	1e63      	subs	r3, r4, #1
   28cba:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   28cbc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   28cc0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   28cc4:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   28cc6:	ea82 0200 	eor.w	r2, r2, r0
   28cca:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   28ccc:	d1f6      	bne.n	28cbc <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   28cce:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   28cd0:	4621      	mov	r1, r4
   28cd2:	4620      	mov	r0, r4
   28cd4:	f7ff fee7 	bl	28aa6 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   28cd8:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   28cda:	3d10      	subs	r5, #16
   28cdc:	e7df      	b.n	28c9e <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   28cde:	2000      	movs	r0, #0
   28ce0:	e7be      	b.n	28c60 <tc_cmac_update+0x52>

00028ce2 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   28ce2:	b570      	push	{r4, r5, r6, lr}
   28ce4:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   28ce6:	4605      	mov	r5, r0
   28ce8:	b1e8      	cbz	r0, 28d26 <tc_cmac_final+0x44>
   28cea:	b369      	cbz	r1, 28d48 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   28cec:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   28cee:	2a10      	cmp	r2, #16
   28cf0:	d11a      	bne.n	28d28 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   28cf2:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   28cf4:	1e63      	subs	r3, r4, #1
   28cf6:	3901      	subs	r1, #1
   28cf8:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   28cfc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   28d00:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   28d04:	4072      	eors	r2, r6
   28d06:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   28d0a:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   28d0c:	ea82 0206 	eor.w	r2, r2, r6
   28d10:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   28d12:	d1f3      	bne.n	28cfc <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   28d14:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   28d16:	4621      	mov	r1, r4
   28d18:	4628      	mov	r0, r5
   28d1a:	f7ff fec4 	bl	28aa6 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   28d1e:	4620      	mov	r0, r4
   28d20:	f7ff ff2c 	bl	28b7c <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   28d24:	2001      	movs	r0, #1
}
   28d26:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   28d28:	f102 0030 	add.w	r0, r2, #48	; 0x30
   28d2c:	2100      	movs	r1, #0
   28d2e:	f1c2 0210 	rsb	r2, r2, #16
   28d32:	4420      	add	r0, r4
   28d34:	f7ff fded 	bl	28912 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   28d38:	6c63      	ldr	r3, [r4, #68]	; 0x44
   28d3a:	4423      	add	r3, r4
   28d3c:	2280      	movs	r2, #128	; 0x80
   28d3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   28d42:	f104 0120 	add.w	r1, r4, #32
   28d46:	e7d5      	b.n	28cf4 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   28d48:	4608      	mov	r0, r1
   28d4a:	e7ec      	b.n	28d26 <tc_cmac_final+0x44>

00028d4c <abort_function>:
{
   28d4c:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   28d4e:	2000      	movs	r0, #0
   28d50:	f7ea f934 	bl	12fbc <sys_reboot>

00028d54 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   28d54:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   28d56:	6800      	ldr	r0, [r0, #0]
   28d58:	f7eb bfc4 	b.w	14ce4 <z_arm_fatal_error>

00028d5c <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   28d5c:	2100      	movs	r1, #0
   28d5e:	2001      	movs	r0, #1
   28d60:	f7eb bfc0 	b.w	14ce4 <z_arm_fatal_error>

00028d64 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   28d64:	b508      	push	{r3, lr}
	handler();
   28d66:	f7ec f87b 	bl	14e60 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   28d6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   28d6e:	f7ec b953 	b.w	15018 <z_arm_exc_exit>

00028d72 <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
   28d72:	2300      	movs	r3, #0
   28d74:	f7ea bf26 	b.w	13bc4 <z_impl_z_log_msg_static_create>

00028d78 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   28d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28d7c:	4684      	mov	ip, r0
   28d7e:	460f      	mov	r7, r1
	register const char *s = nptr;
   28d80:	4604      	mov	r4, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   28d82:	4621      	mov	r1, r4
   28d84:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   28d88:	2b20      	cmp	r3, #32
   28d8a:	d0fa      	beq.n	28d82 <strtoul+0xa>
   28d8c:	f1a3 0009 	sub.w	r0, r3, #9
   28d90:	2804      	cmp	r0, #4
   28d92:	d9f6      	bls.n	28d82 <strtoul+0xa>
	} while (isspace((unsigned char)c) != 0);
	if (c == '-') {
   28d94:	2b2d      	cmp	r3, #45	; 0x2d
   28d96:	d125      	bne.n	28de4 <strtoul+0x6c>
		neg = 1;
		c = *s++;
   28d98:	784b      	ldrb	r3, [r1, #1]
   28d9a:	1c8c      	adds	r4, r1, #2
		neg = 1;
   28d9c:	f04f 0e01 	mov.w	lr, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   28da0:	bb3a      	cbnz	r2, 28df2 <strtoul+0x7a>
   28da2:	2b30      	cmp	r3, #48	; 0x30
   28da4:	d032      	beq.n	28e0c <strtoul+0x94>
		s += 2;
		base = 16;
	}

	if (base == 0) {
		base = c == '0' ? 8 : 10;
   28da6:	220a      	movs	r2, #10
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   28da8:	f04f 31ff 	mov.w	r1, #4294967295
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   28dac:	2500      	movs	r5, #0
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   28dae:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   28db2:	fb02 f801 	mul.w	r8, r2, r1
   28db6:	ea6f 0808 	mvn.w	r8, r8
	for (acc = 0, any = 0;; c = *s++) {
   28dba:	4628      	mov	r0, r5
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   28dbc:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
		if (isdigit((unsigned char)c) != 0) {
   28dc0:	2e09      	cmp	r6, #9
   28dc2:	d82a      	bhi.n	28e1a <strtoul+0xa2>
			c -= '0';
   28dc4:	4633      	mov	r3, r6
		} else if (isalpha((unsigned char)c) != 0) {
			c -= isupper((unsigned char)c) != 0 ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   28dc6:	429a      	cmp	r2, r3
   28dc8:	dd37      	ble.n	28e3a <strtoul+0xc2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   28dca:	1c6e      	adds	r6, r5, #1
   28dcc:	d007      	beq.n	28dde <strtoul+0x66>
   28dce:	4288      	cmp	r0, r1
   28dd0:	d830      	bhi.n	28e34 <strtoul+0xbc>
   28dd2:	d101      	bne.n	28dd8 <strtoul+0x60>
   28dd4:	4543      	cmp	r3, r8
   28dd6:	dc2d      	bgt.n	28e34 <strtoul+0xbc>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   28dd8:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   28ddc:	2501      	movs	r5, #1
	for (acc = 0, any = 0;; c = *s++) {
   28dde:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit((unsigned char)c) != 0) {
   28de2:	e7eb      	b.n	28dbc <strtoul+0x44>
	} else if (c == '+') {
   28de4:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   28de6:	bf04      	itt	eq
   28de8:	784b      	ldrbeq	r3, [r1, #1]
   28dea:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   28dec:	f04f 0e00 	mov.w	lr, #0
   28df0:	e7d6      	b.n	28da0 <strtoul+0x28>
	if ((base == 0 || base == 16) &&
   28df2:	2a10      	cmp	r2, #16
   28df4:	d1d8      	bne.n	28da8 <strtoul+0x30>
   28df6:	2b30      	cmp	r3, #48	; 0x30
   28df8:	d1d6      	bne.n	28da8 <strtoul+0x30>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   28dfa:	7821      	ldrb	r1, [r4, #0]
   28dfc:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   28e00:	2958      	cmp	r1, #88	; 0x58
   28e02:	d1d1      	bne.n	28da8 <strtoul+0x30>
		c = s[1];
   28e04:	7863      	ldrb	r3, [r4, #1]
		base = 16;
   28e06:	2210      	movs	r2, #16
		s += 2;
   28e08:	3402      	adds	r4, #2
	if (base == 0) {
   28e0a:	e7cd      	b.n	28da8 <strtoul+0x30>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   28e0c:	7822      	ldrb	r2, [r4, #0]
   28e0e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   28e12:	2a58      	cmp	r2, #88	; 0x58
   28e14:	d0f6      	beq.n	28e04 <strtoul+0x8c>
		base = c == '0' ? 8 : 10;
   28e16:	2208      	movs	r2, #8
   28e18:	e7c6      	b.n	28da8 <strtoul+0x30>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   28e1a:	f043 0620 	orr.w	r6, r3, #32
   28e1e:	3e61      	subs	r6, #97	; 0x61
		} else if (isalpha((unsigned char)c) != 0) {
   28e20:	2e19      	cmp	r6, #25
   28e22:	d80a      	bhi.n	28e3a <strtoul+0xc2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   28e24:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
			c -= isupper((unsigned char)c) != 0 ? 'A' - 10 : 'a' - 10;
   28e28:	2e1a      	cmp	r6, #26
   28e2a:	bf34      	ite	cc
   28e2c:	2637      	movcc	r6, #55	; 0x37
   28e2e:	2657      	movcs	r6, #87	; 0x57
   28e30:	1b9b      	subs	r3, r3, r6
   28e32:	e7c8      	b.n	28dc6 <strtoul+0x4e>
			any = -1;
   28e34:	f04f 35ff 	mov.w	r5, #4294967295
   28e38:	e7d1      	b.n	28dde <strtoul+0x66>
		}
	}
	if (any < 0) {
   28e3a:	1c6b      	adds	r3, r5, #1
   28e3c:	d107      	bne.n	28e4e <strtoul+0xd6>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   28e3e:	f7f9 fee1 	bl	22c04 <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   28e42:	2322      	movs	r3, #34	; 0x22
   28e44:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   28e46:	4628      	mov	r0, r5
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   28e48:	b947      	cbnz	r7, 28e5c <strtoul+0xe4>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   28e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   28e4e:	f1be 0f00 	cmp.w	lr, #0
   28e52:	d000      	beq.n	28e56 <strtoul+0xde>
		acc = -acc;
   28e54:	4240      	negs	r0, r0
	if (endptr != NULL) {
   28e56:	2f00      	cmp	r7, #0
   28e58:	d0f7      	beq.n	28e4a <strtoul+0xd2>
		*endptr = (char *)(any ? s - 1 : nptr);
   28e5a:	b10d      	cbz	r5, 28e60 <strtoul+0xe8>
   28e5c:	f104 3cff 	add.w	ip, r4, #4294967295
   28e60:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   28e64:	e7f1      	b.n	28e4a <strtoul+0xd2>

00028e66 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   28e66:	3901      	subs	r1, #1
   28e68:	4603      	mov	r3, r0
   28e6a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   28e6e:	b90a      	cbnz	r2, 28e74 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   28e70:	701a      	strb	r2, [r3, #0]

	return dest;
}
   28e72:	4770      	bx	lr
		*d = *s;
   28e74:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   28e78:	e7f7      	b.n	28e6a <strcpy+0x4>

00028e7a <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   28e7a:	4603      	mov	r3, r0
	size_t n = 0;
   28e7c:	2000      	movs	r0, #0

	while (*s != '\0') {
   28e7e:	5c1a      	ldrb	r2, [r3, r0]
   28e80:	b902      	cbnz	r2, 28e84 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   28e82:	4770      	bx	lr
		n++;
   28e84:	3001      	adds	r0, #1
   28e86:	e7fa      	b.n	28e7e <strlen+0x4>

00028e88 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   28e88:	4603      	mov	r3, r0
	size_t n = 0;
   28e8a:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   28e8c:	5c1a      	ldrb	r2, [r3, r0]
   28e8e:	b10a      	cbz	r2, 28e94 <strnlen+0xc>
   28e90:	4288      	cmp	r0, r1
   28e92:	d100      	bne.n	28e96 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   28e94:	4770      	bx	lr
		n++;
   28e96:	3001      	adds	r0, #1
   28e98:	e7f8      	b.n	28e8c <strnlen+0x4>

00028e9a <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   28e9a:	1e43      	subs	r3, r0, #1
   28e9c:	3901      	subs	r1, #1
   28e9e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   28ea2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   28ea6:	4282      	cmp	r2, r0
   28ea8:	d101      	bne.n	28eae <strcmp+0x14>
   28eaa:	2a00      	cmp	r2, #0
   28eac:	d1f7      	bne.n	28e9e <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   28eae:	1a10      	subs	r0, r2, r0
   28eb0:	4770      	bx	lr

00028eb2 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   28eb2:	b570      	push	{r4, r5, r6, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   28eb4:	460b      	mov	r3, r1
   28eb6:	4605      	mov	r5, r0
   28eb8:	b16a      	cbz	r2, 28ed6 <strncmp+0x24>
   28eba:	f810 6b01 	ldrb.w	r6, [r0], #1
   28ebe:	781c      	ldrb	r4, [r3, #0]
   28ec0:	42b4      	cmp	r4, r6
   28ec2:	f101 0101 	add.w	r1, r1, #1
   28ec6:	d100      	bne.n	28eca <strncmp+0x18>
   28ec8:	b91c      	cbnz	r4, 28ed2 <strncmp+0x20>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   28eca:	782a      	ldrb	r2, [r5, #0]
   28ecc:	781b      	ldrb	r3, [r3, #0]
   28ece:	1ad0      	subs	r0, r2, r3
   28ed0:	e002      	b.n	28ed8 <strncmp+0x26>
		n--;
   28ed2:	3a01      	subs	r2, #1
   28ed4:	e7ee      	b.n	28eb4 <strncmp+0x2>
	return (n == 0) ? 0 : (*s1 - *s2);
   28ed6:	4610      	mov	r0, r2
}
   28ed8:	bd70      	pop	{r4, r5, r6, pc}

00028eda <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   28eda:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   28edc:	b15a      	cbz	r2, 28ef6 <memcmp+0x1c>
   28ede:	3901      	subs	r1, #1
   28ee0:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   28ee2:	f810 2b01 	ldrb.w	r2, [r0], #1
   28ee6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   28eea:	42a0      	cmp	r0, r4
   28eec:	d001      	beq.n	28ef2 <memcmp+0x18>
   28eee:	429a      	cmp	r2, r3
   28ef0:	d0f7      	beq.n	28ee2 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   28ef2:	1ad0      	subs	r0, r2, r3
}
   28ef4:	bd10      	pop	{r4, pc}
		return 0;
   28ef6:	4610      	mov	r0, r2
   28ef8:	e7fc      	b.n	28ef4 <memcmp+0x1a>

00028efa <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   28efa:	1a43      	subs	r3, r0, r1
   28efc:	4293      	cmp	r3, r2
{
   28efe:	b510      	push	{r4, lr}
   28f00:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   28f04:	d308      	bcc.n	28f18 <memmove+0x1e>
   28f06:	3901      	subs	r1, #1
	char *dest = d;
   28f08:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   28f0a:	429a      	cmp	r2, r3
   28f0c:	d00b      	beq.n	28f26 <memmove+0x2c>
			*dest = *src;
   28f0e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   28f12:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   28f16:	e7f8      	b.n	28f0a <memmove+0x10>
   28f18:	440a      	add	r2, r1
			dest[n] = src[n];
   28f1a:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   28f1e:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   28f22:	428a      	cmp	r2, r1
   28f24:	d1f9      	bne.n	28f1a <memmove+0x20>
		}
	}

	return d;
}
   28f26:	bd10      	pop	{r4, pc}

00028f28 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   28f28:	b510      	push	{r4, lr}
   28f2a:	1e43      	subs	r3, r0, #1
   28f2c:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   28f2e:	4291      	cmp	r1, r2
   28f30:	d100      	bne.n	28f34 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   28f32:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   28f34:	f811 4b01 	ldrb.w	r4, [r1], #1
   28f38:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   28f3c:	e7f7      	b.n	28f2e <memcpy+0x6>

00028f3e <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   28f3e:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   28f40:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   28f42:	4603      	mov	r3, r0
	while (n > 0) {
   28f44:	4293      	cmp	r3, r2
   28f46:	d100      	bne.n	28f4a <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   28f48:	4770      	bx	lr
		*(d_byte++) = c_byte;
   28f4a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   28f4e:	e7f9      	b.n	28f44 <memset+0x6>

00028f50 <_stdout_hook_default>:
}
   28f50:	f04f 30ff 	mov.w	r0, #4294967295
   28f54:	4770      	bx	lr

00028f56 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   28f56:	2806      	cmp	r0, #6
   28f58:	d108      	bne.n	28f6c <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   28f5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   28f5e:	2201      	movs	r2, #1
   28f60:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   28f64:	f3bf 8f4f 	dsb	sy
        __WFE();
   28f68:	bf20      	wfe
    while (true)
   28f6a:	e7fd      	b.n	28f68 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   28f6c:	4770      	bx	lr

00028f6e <pm_state_exit_post_ops>:
   28f6e:	2300      	movs	r3, #0
   28f70:	f383 8811 	msr	BASEPRI, r3
   28f74:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   28f78:	4770      	bx	lr

00028f7a <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   28f7a:	b530      	push	{r4, r5, lr}
   28f7c:	b085      	sub	sp, #20
   28f7e:	4604      	mov	r4, r0
   28f80:	4615      	mov	r5, r2

	LOG_DBG("irk %s", bt_hex(irk, 16));
	LOG_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   28f82:	4668      	mov	r0, sp
   28f84:	2203      	movs	r2, #3
   28f86:	f7ff ffcf 	bl	28f28 <memcpy>
	(void)memset(res + 3, 0, 13);
   28f8a:	220d      	movs	r2, #13
   28f8c:	2100      	movs	r1, #0
   28f8e:	f10d 0003 	add.w	r0, sp, #3
   28f92:	f7ff ffd4 	bl	28f3e <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   28f96:	4620      	mov	r0, r4
   28f98:	466a      	mov	r2, sp
   28f9a:	4669      	mov	r1, sp
   28f9c:	f002 fce6 	bl	2b96c <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   28fa0:	4604      	mov	r4, r0
   28fa2:	b920      	cbnz	r0, 28fae <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   28fa4:	2203      	movs	r2, #3
   28fa6:	4669      	mov	r1, sp
   28fa8:	4628      	mov	r0, r5
   28faa:	f7ff ffbd 	bl	28f28 <memcpy>

	return 0;
}
   28fae:	4620      	mov	r0, r4
   28fb0:	b005      	add	sp, #20
   28fb2:	bd30      	pop	{r4, r5, pc}

00028fb4 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   28fb4:	b513      	push	{r0, r1, r4, lr}
   28fb6:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	LOG_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   28fb8:	aa01      	add	r2, sp, #4
   28fba:	3103      	adds	r1, #3
   28fbc:	f7ff ffdd 	bl	28f7a <ah>
	if (err) {
   28fc0:	b948      	cbnz	r0, 28fd6 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   28fc2:	2203      	movs	r2, #3
   28fc4:	a901      	add	r1, sp, #4
   28fc6:	4620      	mov	r0, r4
   28fc8:	f7ff ff87 	bl	28eda <memcmp>
   28fcc:	fab0 f080 	clz	r0, r0
   28fd0:	0940      	lsrs	r0, r0, #5
}
   28fd2:	b002      	add	sp, #8
   28fd4:	bd10      	pop	{r4, pc}
		return false;
   28fd6:	2000      	movs	r0, #0
   28fd8:	e7fb      	b.n	28fd2 <bt_rpa_irk_matches+0x1e>

00028fda <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   28fda:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   28fdc:	1cce      	adds	r6, r1, #3
{
   28fde:	4605      	mov	r5, r0
   28fe0:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   28fe2:	4630      	mov	r0, r6
   28fe4:	2103      	movs	r1, #3
   28fe6:	f7f8 fa4f 	bl	21488 <bt_rand>
	if (err) {
   28fea:	b960      	cbnz	r0, 29006 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   28fec:	7963      	ldrb	r3, [r4, #5]
   28fee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   28ff2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   28ff6:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   28ff8:	4622      	mov	r2, r4
   28ffa:	4631      	mov	r1, r6
   28ffc:	4628      	mov	r0, r5
	}

	LOG_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   28ffe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   29002:	f7ff bfba 	b.w	28f7a <ah>
}
   29006:	bd70      	pop	{r4, r5, r6, pc}

00029008 <z_log_msg_static_create.constprop.0>:
   29008:	2300      	movs	r3, #0
   2900a:	f7ea bddb 	b.w	13bc4 <z_impl_z_log_msg_static_create>

0002900e <bt_settings_decode_key>:
{
   2900e:	b570      	push	{r4, r5, r6, lr}
   29010:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   29012:	2100      	movs	r1, #0
{
   29014:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   29016:	f7ff fba0 	bl	2875a <settings_name_next>
   2901a:	280d      	cmp	r0, #13
   2901c:	d118      	bne.n	29050 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   2901e:	7b23      	ldrb	r3, [r4, #12]
   29020:	2b30      	cmp	r3, #48	; 0x30
   29022:	d013      	beq.n	2904c <bt_settings_decode_key+0x3e>
	} else if (key[12] == '1') {
   29024:	2b31      	cmp	r3, #49	; 0x31
   29026:	d113      	bne.n	29050 <bt_settings_decode_key+0x42>
   29028:	2301      	movs	r3, #1
		addr->type = BT_ADDR_LE_PUBLIC;
   2902a:	f805 3b06 	strb.w	r3, [r5], #6
   2902e:	f104 060c 	add.w	r6, r4, #12
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   29032:	462a      	mov	r2, r5
   29034:	4620      	mov	r0, r4
   29036:	2301      	movs	r3, #1
   29038:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   2903a:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   2903c:	f7fe fa5e 	bl	274fc <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   29040:	42b4      	cmp	r4, r6
   29042:	f105 35ff 	add.w	r5, r5, #4294967295
   29046:	d1f4      	bne.n	29032 <bt_settings_decode_key+0x24>
	return 0;
   29048:	2000      	movs	r0, #0
}
   2904a:	bd70      	pop	{r4, r5, r6, pc}
   2904c:	2300      	movs	r3, #0
   2904e:	e7ec      	b.n	2902a <bt_settings_decode_key+0x1c>
		return -EINVAL;
   29050:	f06f 0015 	mvn.w	r0, #21
   29054:	e7f9      	b.n	2904a <bt_settings_decode_key+0x3c>

00029056 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   29056:	b510      	push	{r4, lr}
   29058:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   2905a:	7801      	ldrb	r1, [r0, #0]
   2905c:	7822      	ldrb	r2, [r4, #0]
   2905e:	428a      	cmp	r2, r1
{
   29060:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   29062:	d00f      	beq.n	29084 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   29064:	4669      	mov	r1, sp
   29066:	f7ec fec1 	bl	15dec <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   2906a:	a905      	add	r1, sp, #20
   2906c:	4620      	mov	r0, r4
   2906e:	f7ec febd 	bl	15dec <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   29072:	2210      	movs	r2, #16
   29074:	f10d 0115 	add.w	r1, sp, #21
   29078:	f10d 0001 	add.w	r0, sp, #1
   2907c:	f7ff ff2d 	bl	28eda <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   29080:	b00a      	add	sp, #40	; 0x28
   29082:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   29084:	2a01      	cmp	r2, #1
   29086:	d006      	beq.n	29096 <bt_uuid_cmp+0x40>
   29088:	2a02      	cmp	r2, #2
   2908a:	d007      	beq.n	2909c <bt_uuid_cmp+0x46>
   2908c:	b972      	cbnz	r2, 290ac <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   2908e:	8840      	ldrh	r0, [r0, #2]
   29090:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   29092:	1ac0      	subs	r0, r0, r3
   29094:	e7f4      	b.n	29080 <bt_uuid_cmp+0x2a>
   29096:	6840      	ldr	r0, [r0, #4]
   29098:	6863      	ldr	r3, [r4, #4]
   2909a:	e7fa      	b.n	29092 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2909c:	2210      	movs	r2, #16
   2909e:	1c61      	adds	r1, r4, #1
   290a0:	3001      	adds	r0, #1
}
   290a2:	b00a      	add	sp, #40	; 0x28
   290a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   290a8:	f7ff bf17 	b.w	28eda <memcmp>
	switch (u1->type) {
   290ac:	f06f 0015 	mvn.w	r0, #21
   290b0:	e7e6      	b.n	29080 <bt_uuid_cmp+0x2a>

000290b2 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   290b2:	2a04      	cmp	r2, #4
{
   290b4:	b510      	push	{r4, lr}
	switch (data_len) {
   290b6:	d00a      	beq.n	290ce <bt_uuid_create+0x1c>
   290b8:	2a10      	cmp	r2, #16
   290ba:	d00d      	beq.n	290d8 <bt_uuid_create+0x26>
   290bc:	2a02      	cmp	r2, #2
   290be:	f04f 0300 	mov.w	r3, #0
   290c2:	d10f      	bne.n	290e4 <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   290c4:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   290c6:	880b      	ldrh	r3, [r1, #0]
   290c8:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   290ca:	2001      	movs	r0, #1
}
   290cc:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   290ce:	2301      	movs	r3, #1
   290d0:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   290d2:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   290d4:	6043      	str	r3, [r0, #4]
		break;
   290d6:	e7f8      	b.n	290ca <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   290d8:	2302      	movs	r3, #2
   290da:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   290de:	f7ff ff23 	bl	28f28 <memcpy>
		break;
   290e2:	e7f2      	b.n	290ca <bt_uuid_create+0x18>
	switch (data_len) {
   290e4:	4618      	mov	r0, r3
   290e6:	e7f1      	b.n	290cc <bt_uuid_create+0x1a>

000290e8 <bt_addr_le_create_static>:

#define ADDR_RESOLVED_BITMASK (0x02)

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   290e8:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   290ea:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   290ec:	2106      	movs	r1, #6
{
   290ee:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   290f0:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   290f4:	f7f8 f9c8 	bl	21488 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   290f8:	b918      	cbnz	r0, 29102 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   290fa:	79a3      	ldrb	r3, [r4, #6]
   290fc:	f063 033f 	orn	r3, r3, #63	; 0x3f
   29100:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   29102:	bd10      	pop	{r4, pc}

00029104 <bt_addr_le_copy_resolved>:

	return 0;
}

void bt_addr_le_copy_resolved(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
   29104:	b510      	push	{r4, lr}
   29106:	4604      	mov	r4, r0
	memcpy(dst, src, sizeof(*dst));
   29108:	2207      	movs	r2, #7
   2910a:	f7ff ff0d 	bl	28f28 <memcpy>
	bt_addr_le_copy(dst, src);
	/* translate to "regular" address type */
	dst->type &= ~ADDR_RESOLVED_BITMASK;
   2910e:	7823      	ldrb	r3, [r4, #0]
   29110:	f023 0302 	bic.w	r3, r3, #2
   29114:	7023      	strb	r3, [r4, #0]
}
   29116:	bd10      	pop	{r4, pc}

00029118 <bt_addr_le_is_resolved>:

bool bt_addr_le_is_resolved(const bt_addr_le_t *addr)
{
	return (addr->type & ADDR_RESOLVED_BITMASK) != 0;
   29118:	7800      	ldrb	r0, [r0, #0]
}
   2911a:	f3c0 0040 	ubfx	r0, r0, #1, #1
   2911e:	4770      	bx	lr

00029120 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   29120:	280f      	cmp	r0, #15
   29122:	d807      	bhi.n	29134 <bt_hci_evt_get_flags+0x14>
   29124:	280d      	cmp	r0, #13
   29126:	d80b      	bhi.n	29140 <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   29128:	2805      	cmp	r0, #5
   2912a:	bf08      	it	eq
   2912c:	2003      	moveq	r0, #3
   2912e:	bf18      	it	ne
   29130:	2002      	movne	r0, #2
   29132:	4770      	bx	lr
	switch (evt) {
   29134:	2813      	cmp	r0, #19
   29136:	d003      	beq.n	29140 <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   29138:	281a      	cmp	r0, #26
   2913a:	bf08      	it	eq
   2913c:	2001      	moveq	r0, #1
   2913e:	e7f6      	b.n	2912e <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   29140:	2001      	movs	r0, #1
	}
}
   29142:	4770      	bx	lr

00029144 <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   29144:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   29148:	b183      	cbz	r3, 2916c <update_sec_level+0x28>
   2914a:	7b5a      	ldrb	r2, [r3, #13]
   2914c:	07d1      	lsls	r1, r2, #31
   2914e:	d50d      	bpl.n	2916c <update_sec_level+0x28>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   29150:	06d2      	lsls	r2, r2, #27
   29152:	d50d      	bpl.n	29170 <update_sec_level+0x2c>
   29154:	7b1b      	ldrb	r3, [r3, #12]
   29156:	2b10      	cmp	r3, #16
   29158:	bf14      	ite	ne
   2915a:	2303      	movne	r3, #3
   2915c:	2304      	moveq	r3, #4
			conn->sec_level = BT_SECURITY_L3;
   2915e:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   29160:	7a80      	ldrb	r0, [r0, #10]
}
   29162:	4298      	cmp	r0, r3
   29164:	bf8c      	ite	hi
   29166:	2000      	movhi	r0, #0
   29168:	2001      	movls	r0, #1
   2916a:	4770      	bx	lr
   2916c:	2302      	movs	r3, #2
   2916e:	e7f6      	b.n	2915e <update_sec_level+0x1a>
   29170:	2303      	movs	r3, #3
   29172:	e7f4      	b.n	2915e <update_sec_level+0x1a>

00029174 <hci_vendor_event>:
}
   29174:	4770      	bx	lr

00029176 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   29176:	f3bf 8f5b 	dmb	ish
   2917a:	6800      	ldr	r0, [r0, #0]
   2917c:	f3bf 8f5b 	dmb	ish
}
   29180:	4770      	bx	lr

00029182 <bt_addr_le_copy>:
   29182:	2207      	movs	r2, #7
   29184:	f7ff bed0 	b.w	28f28 <memcpy>

00029188 <atomic_or>:
{
   29188:	b510      	push	{r4, lr}
   2918a:	4603      	mov	r3, r0
}
   2918c:	f3bf 8f5b 	dmb	ish
   29190:	e853 0f00 	ldrex	r0, [r3]
   29194:	ea40 0201 	orr.w	r2, r0, r1
   29198:	e843 2400 	strex	r4, r2, [r3]
   2919c:	2c00      	cmp	r4, #0
   2919e:	d1f7      	bne.n	29190 <atomic_or+0x8>
   291a0:	f3bf 8f5b 	dmb	ish
   291a4:	bd10      	pop	{r4, pc}

000291a6 <unpair_remote>:
{
   291a6:	460b      	mov	r3, r1
	unpair(*id, &info->addr);
   291a8:	4601      	mov	r1, r0
   291aa:	7818      	ldrb	r0, [r3, #0]
   291ac:	f7ec bece 	b.w	15f4c <unpair>

000291b0 <z_log_msg_static_create.constprop.0>:
   291b0:	2300      	movs	r3, #0
   291b2:	f7ea bd07 	b.w	13bc4 <z_impl_z_log_msg_static_create>

000291b6 <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   291b6:	f3bf 8f5b 	dmb	ish
   291ba:	e850 3f00 	ldrex	r3, [r0]
   291be:	400b      	ands	r3, r1
   291c0:	e840 3200 	strex	r2, r3, [r0]
   291c4:	2a00      	cmp	r2, #0
   291c6:	d1f8      	bne.n	291ba <atomic_and.isra.0+0x4>
   291c8:	f3bf 8f5b 	dmb	ish
}
   291cc:	4770      	bx	lr

000291ce <sys_put_le64>:
	dst[1] = val >> 8;
   291ce:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   291d2:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   291d4:	0e00      	lsrs	r0, r0, #24
   291d6:	7053      	strb	r3, [r2, #1]
   291d8:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   291da:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   291dc:	f3c1 2007 	ubfx	r0, r1, #8, #8
   291e0:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   291e2:	7093      	strb	r3, [r2, #2]
   291e4:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   291e6:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   291e8:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   291ea:	71d1      	strb	r1, [r2, #7]
}
   291ec:	4770      	bx	lr

000291ee <bt_hci_disconnect>:
{
   291ee:	b570      	push	{r4, r5, r6, lr}
   291f0:	4606      	mov	r6, r0
   291f2:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   291f4:	f240 4006 	movw	r0, #1030	; 0x406
   291f8:	2103      	movs	r1, #3
   291fa:	f7ed fb43 	bl	16884 <bt_hci_cmd_create>
	if (!buf) {
   291fe:	4604      	mov	r4, r0
   29200:	b168      	cbz	r0, 2921e <bt_hci_disconnect+0x30>
   29202:	2103      	movs	r1, #3
   29204:	300c      	adds	r0, #12
   29206:	f002 f8a1 	bl	2b34c <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   2920a:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   2920c:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2920e:	4621      	mov	r1, r4
   29210:	2200      	movs	r2, #0
}
   29212:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   29216:	f240 4006 	movw	r0, #1030	; 0x406
   2921a:	f7ed bb6d 	b.w	168f8 <bt_hci_cmd_send_sync>
}
   2921e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   29222:	bd70      	pop	{r4, r5, r6, pc}

00029224 <bt_le_set_data_len>:
{
   29224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29226:	4607      	mov	r7, r0
   29228:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2922a:	f242 0022 	movw	r0, #8226	; 0x2022
   2922e:	2106      	movs	r1, #6
{
   29230:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   29232:	f7ed fb27 	bl	16884 <bt_hci_cmd_create>
	if (!buf) {
   29236:	4604      	mov	r4, r0
   29238:	b178      	cbz	r0, 2925a <bt_le_set_data_len+0x36>
   2923a:	2106      	movs	r1, #6
   2923c:	300c      	adds	r0, #12
   2923e:	f002 f885 	bl	2b34c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   29242:	883b      	ldrh	r3, [r7, #0]
   29244:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   29246:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   29248:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   2924a:	4621      	mov	r1, r4
   2924c:	2200      	movs	r2, #0
}
   2924e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   29252:	f242 0022 	movw	r0, #8226	; 0x2022
   29256:	f7ed bb4f 	b.w	168f8 <bt_hci_cmd_send_sync>
}
   2925a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2925e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00029260 <bt_le_set_phy>:
{
   29260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29264:	4681      	mov	r9, r0
   29266:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   29268:	f242 0032 	movw	r0, #8242	; 0x2032
   2926c:	2107      	movs	r1, #7
{
   2926e:	f89d a020 	ldrb.w	sl, [sp, #32]
   29272:	4617      	mov	r7, r2
   29274:	461e      	mov	r6, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   29276:	f7ed fb05 	bl	16884 <bt_hci_cmd_create>
	if (!buf) {
   2927a:	4605      	mov	r5, r0
   2927c:	b1a0      	cbz	r0, 292a8 <bt_le_set_phy+0x48>
   2927e:	2107      	movs	r1, #7
   29280:	300c      	adds	r0, #12
   29282:	f002 f863 	bl	2b34c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   29286:	f8b9 3000 	ldrh.w	r3, [r9]
   2928a:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   2928c:	f880 8002 	strb.w	r8, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   29290:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   29292:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   29294:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   29298:	4629      	mov	r1, r5
   2929a:	2200      	movs	r2, #0
}
   2929c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   292a0:	f242 0032 	movw	r0, #8242	; 0x2032
   292a4:	f7ed bb28 	b.w	168f8 <bt_hci_cmd_send_sync>
}
   292a8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   292ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000292b0 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   292b0:	68c0      	ldr	r0, [r0, #12]
   292b2:	f7ed bbf5 	b.w	16aa0 <bt_hci_le_enh_conn_complete>

000292b6 <bt_le_conn_params_valid>:
{
   292b6:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   292b8:	8803      	ldrh	r3, [r0, #0]
   292ba:	8842      	ldrh	r2, [r0, #2]
   292bc:	4293      	cmp	r3, r2
   292be:	d819      	bhi.n	292f4 <bt_le_conn_params_valid+0x3e>
   292c0:	2b05      	cmp	r3, #5
   292c2:	d917      	bls.n	292f4 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   292c4:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   292c8:	d814      	bhi.n	292f4 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   292ca:	8883      	ldrh	r3, [r0, #4]
   292cc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   292d0:	d210      	bcs.n	292f4 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   292d2:	88c0      	ldrh	r0, [r0, #6]
   292d4:	f1a0 010a 	sub.w	r1, r0, #10
   292d8:	b289      	uxth	r1, r1
   292da:	f640 4476 	movw	r4, #3190	; 0xc76
   292de:	42a1      	cmp	r1, r4
   292e0:	d808      	bhi.n	292f4 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   292e2:	3301      	adds	r3, #1
   292e4:	b29b      	uxth	r3, r3
   292e6:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   292e8:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   292ec:	bf34      	ite	cc
   292ee:	2001      	movcc	r0, #1
   292f0:	2000      	movcs	r0, #0
}
   292f2:	bd10      	pop	{r4, pc}
		return false;
   292f4:	2000      	movs	r0, #0
   292f6:	e7fc      	b.n	292f2 <bt_le_conn_params_valid+0x3c>

000292f8 <le_conn_param_neg_reply>:
{
   292f8:	b570      	push	{r4, r5, r6, lr}
   292fa:	4606      	mov	r6, r0
   292fc:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   292fe:	f242 0021 	movw	r0, #8225	; 0x2021
   29302:	2103      	movs	r1, #3
   29304:	f7ed fabe 	bl	16884 <bt_hci_cmd_create>
	if (!buf) {
   29308:	4604      	mov	r4, r0
   2930a:	b918      	cbnz	r0, 29314 <le_conn_param_neg_reply+0x1c>
}
   2930c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   29310:	f7ec beae 	b.w	16070 <le_conn_param_neg_reply.part.0>
   29314:	2103      	movs	r1, #3
   29316:	300c      	adds	r0, #12
   29318:	f002 f818 	bl	2b34c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   2931c:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   2931e:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   29320:	4621      	mov	r1, r4
   29322:	f242 0021 	movw	r0, #8225	; 0x2021
}
   29326:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   2932a:	f7ed be67 	b.w	16ffc <bt_hci_cmd_send>

0002932e <bt_get_appearance>:
}
   2932e:	2000      	movs	r0, #0
   29330:	4770      	bx	lr

00029332 <bt_addr_le_is_bonded>:
{
   29332:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   29334:	f7f5 f902 	bl	1e53c <bt_keys_find_addr>
		return keys && keys->keys;
   29338:	b118      	cbz	r0, 29342 <bt_addr_le_is_bonded+0x10>
   2933a:	89c0      	ldrh	r0, [r0, #14]
   2933c:	3800      	subs	r0, #0
   2933e:	bf18      	it	ne
   29340:	2001      	movne	r0, #1
}
   29342:	bd08      	pop	{r3, pc}

00029344 <bt_addr_le_eq>:
{
   29344:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   29346:	2207      	movs	r2, #7
   29348:	f7ff fdc7 	bl	28eda <memcmp>
}
   2934c:	fab0 f080 	clz	r0, r0
   29350:	0940      	lsrs	r0, r0, #5
   29352:	bd08      	pop	{r3, pc}

00029354 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   29354:	2207      	movs	r2, #7
   29356:	f7ff bde7 	b.w	28f28 <memcpy>

0002935a <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2935a:	f3bf 8f5b 	dmb	ish
   2935e:	6800      	ldr	r0, [r0, #0]
   29360:	f3bf 8f5b 	dmb	ish
}
   29364:	4770      	bx	lr

00029366 <atomic_test_bit>:
{
   29366:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   29368:	f7ff fff7 	bl	2935a <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2936c:	4108      	asrs	r0, r1
}
   2936e:	f000 0001 	and.w	r0, r0, #1
   29372:	bd08      	pop	{r3, pc}

00029374 <adv_is_private_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   29374:	f100 0210 	add.w	r2, r0, #16
{
   29378:	b510      	push	{r4, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   2937a:	4610      	mov	r0, r2
{
   2937c:	460c      	mov	r4, r1
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   2937e:	2107      	movs	r1, #7
   29380:	f7ff fff1 	bl	29366 <atomic_test_bit>
   29384:	b130      	cbz	r0, 29394 <adv_is_private_enabled+0x20>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
   29386:	210d      	movs	r1, #13
   29388:	4610      	mov	r0, r2
   2938a:	f7ff ffec 	bl	29366 <atomic_test_bit>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   2938e:	b908      	cbnz	r0, 29394 <adv_is_private_enabled+0x20>
		*adv_enabled = true;
   29390:	2301      	movs	r3, #1
   29392:	7023      	strb	r3, [r4, #0]
}
   29394:	bd10      	pop	{r4, pc}

00029396 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   29396:	7a03      	ldrb	r3, [r0, #8]
   29398:	075b      	lsls	r3, r3, #29
{
   2939a:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   2939c:	d505      	bpl.n	293aa <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   2939e:	4601      	mov	r1, r0
   293a0:	322a      	adds	r2, #42	; 0x2a
   293a2:	f811 0b01 	ldrb.w	r0, [r1], #1
   293a6:	f7ee bab9 	b.w	1791c <hci_id_add>
}
   293aa:	4770      	bx	lr

000293ac <z_log_msg_static_create.constprop.0>:
   293ac:	2300      	movs	r3, #0
   293ae:	f7ea bc09 	b.w	13bc4 <z_impl_z_log_msg_static_create>

000293b2 <addr_res_enable>:
{
   293b2:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   293b4:	2101      	movs	r1, #1
{
   293b6:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   293b8:	f242 002d 	movw	r0, #8237	; 0x202d
   293bc:	f7ed fa62 	bl	16884 <bt_hci_cmd_create>
	if (!buf) {
   293c0:	4604      	mov	r4, r0
   293c2:	b158      	cbz	r0, 293dc <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   293c4:	4629      	mov	r1, r5
   293c6:	300c      	adds	r0, #12
   293c8:	f001 ffcf 	bl	2b36a <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   293cc:	4621      	mov	r1, r4
   293ce:	2200      	movs	r2, #0
}
   293d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   293d4:	f242 002d 	movw	r0, #8237	; 0x202d
   293d8:	f7ed ba8e 	b.w	168f8 <bt_hci_cmd_send_sync>
}
   293dc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   293e0:	bd38      	pop	{r3, r4, r5, pc}

000293e2 <atomic_or.isra.0>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   293e2:	f3bf 8f5b 	dmb	ish
   293e6:	e850 3f00 	ldrex	r3, [r0]
   293ea:	430b      	orrs	r3, r1
   293ec:	e840 3200 	strex	r2, r3, [r0]
   293f0:	2a00      	cmp	r2, #0
   293f2:	d1f8      	bne.n	293e6 <atomic_or.isra.0+0x4>
   293f4:	f3bf 8f5b 	dmb	ish
}
   293f8:	4770      	bx	lr

000293fa <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   293fa:	f100 0210 	add.w	r2, r0, #16
{
   293fe:	b510      	push	{r4, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   29400:	2107      	movs	r1, #7
{
   29402:	4604      	mov	r4, r0
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   29404:	4610      	mov	r0, r2
   29406:	f7ff ffae 	bl	29366 <atomic_test_bit>
   2940a:	b150      	cbz	r0, 29422 <adv_pause_enabled+0x28>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2940c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   29410:	4610      	mov	r0, r2
   29412:	f7ff ffe6 	bl	293e2 <atomic_or.isra.0>
		bt_le_adv_set_enable(adv, false);
   29416:	4620      	mov	r0, r4
   29418:	2100      	movs	r1, #0
}
   2941a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_set_enable(adv, false);
   2941e:	f000 b975 	b.w	2970c <bt_le_adv_set_enable>
}
   29422:	bd10      	pop	{r4, pc}

00029424 <find_rl_conflict>:
{
   29424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conflict->found) {
   29428:	684f      	ldr	r7, [r1, #4]
{
   2942a:	b086      	sub	sp, #24
   2942c:	4605      	mov	r5, r0
   2942e:	460c      	mov	r4, r1
	if (conflict->found) {
   29430:	b9c7      	cbnz	r7, 29464 <find_rl_conflict+0x40>
	if ((resident->state & BT_KEYS_ID_ADDED) == 0) {
   29432:	7a03      	ldrb	r3, [r0, #8]
   29434:	075b      	lsls	r3, r3, #29
   29436:	d515      	bpl.n	29464 <find_rl_conflict+0x40>
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   29438:	6808      	ldr	r0, [r1, #0]
   2943a:	1c69      	adds	r1, r5, #1
   2943c:	3001      	adds	r0, #1
   2943e:	f7ff ff81 	bl	29344 <bt_addr_le_eq>
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   29442:	f8d4 8000 	ldr.w	r8, [r4]
   29446:	2216      	movs	r2, #22
   29448:	4639      	mov	r1, r7
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   2944a:	4606      	mov	r6, r0
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   2944c:	4668      	mov	r0, sp
   2944e:	f7ff fd76 	bl	28f3e <memset>
	bt_addr_t               rpa;
};

static inline bool bt_irk_eq(struct bt_irk const *a, struct bt_irk const *b)
{
	return (memcmp(a->val, b->val, sizeof(a->val)) == 0);
   29452:	2210      	movs	r2, #16
   29454:	4669      	mov	r1, sp
   29456:	f108 002a 	add.w	r0, r8, #42	; 0x2a
   2945a:	f7ff fd3e 	bl	28eda <memcmp>
   2945e:	b920      	cbnz	r0, 2946a <find_rl_conflict+0x46>
	if (addr_conflict || irk_conflict) {
   29460:	b106      	cbz	r6, 29464 <find_rl_conflict+0x40>
		conflict->found = resident;
   29462:	6065      	str	r5, [r4, #4]
}
   29464:	b006      	add	sp, #24
   29466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2946a:	6820      	ldr	r0, [r4, #0]
   2946c:	2210      	movs	r2, #16
   2946e:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   29472:	302a      	adds	r0, #42	; 0x2a
   29474:	f7ff fd31 	bl	28eda <memcmp>
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   29478:	2800      	cmp	r0, #0
   2947a:	d0f2      	beq.n	29462 <find_rl_conflict+0x3e>
   2947c:	e7f0      	b.n	29460 <find_rl_conflict+0x3c>

0002947e <adv_unpause_enabled>:
{
   2947e:	b410      	push	{r4}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29480:	f100 0310 	add.w	r3, r0, #16
   29484:	f3bf 8f5b 	dmb	ish
   29488:	e853 2f00 	ldrex	r2, [r3]
   2948c:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   29490:	e843 1400 	strex	r4, r1, [r3]
   29494:	2c00      	cmp	r4, #0
   29496:	d1f7      	bne.n	29488 <adv_unpause_enabled+0xa>
   29498:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   2949c:	0413      	lsls	r3, r2, #16
   2949e:	d503      	bpl.n	294a8 <adv_unpause_enabled+0x2a>
}
   294a0:	bc10      	pop	{r4}
		bt_le_adv_set_enable(adv, true);
   294a2:	2101      	movs	r1, #1
   294a4:	f000 b932 	b.w	2970c <bt_le_adv_set_enable>
}
   294a8:	bc10      	pop	{r4}
   294aa:	4770      	bx	lr

000294ac <adv_rpa_invalidate>:
	if (!atomic_test_bit(adv->flags, BT_ADV_LIMITED) &&
   294ac:	f100 0210 	add.w	r2, r0, #16
{
   294b0:	b508      	push	{r3, lr}
	if (!atomic_test_bit(adv->flags, BT_ADV_LIMITED) &&
   294b2:	2106      	movs	r1, #6
   294b4:	4610      	mov	r0, r2
   294b6:	f7ff ff56 	bl	29366 <atomic_test_bit>
   294ba:	b980      	cbnz	r0, 294de <adv_rpa_invalidate+0x32>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
   294bc:	210d      	movs	r1, #13
   294be:	4610      	mov	r0, r2
   294c0:	f7ff ff51 	bl	29366 <atomic_test_bit>
	if (!atomic_test_bit(adv->flags, BT_ADV_LIMITED) &&
   294c4:	b958      	cbnz	r0, 294de <adv_rpa_invalidate+0x32>
   294c6:	f3bf 8f5b 	dmb	ish
   294ca:	e852 3f00 	ldrex	r3, [r2]
   294ce:	f023 0310 	bic.w	r3, r3, #16
   294d2:	e842 3100 	strex	r1, r3, [r2]
   294d6:	2900      	cmp	r1, #0
   294d8:	d1f7      	bne.n	294ca <adv_rpa_invalidate+0x1e>
   294da:	f3bf 8f5b 	dmb	ish
}
   294de:	bd08      	pop	{r3, pc}

000294e0 <bt_lookup_id_addr>:
{
   294e0:	b510      	push	{r4, lr}
   294e2:	460c      	mov	r4, r1
	CHECKIF(id >= CONFIG_BT_ID_MAX || addr == NULL) {
   294e4:	b930      	cbnz	r0, 294f4 <bt_lookup_id_addr+0x14>
   294e6:	b119      	cbz	r1, 294f0 <bt_lookup_id_addr+0x10>
		keys = bt_keys_find_irk(id, addr);
   294e8:	f7f4 ffd6 	bl	1e498 <bt_keys_find_irk>
		if (keys) {
   294ec:	b100      	cbz	r0, 294f0 <bt_lookup_id_addr+0x10>
			return &keys->addr;
   294ee:	1c44      	adds	r4, r0, #1
}
   294f0:	4620      	mov	r0, r4
   294f2:	bd10      	pop	{r4, pc}
		return NULL;
   294f4:	2400      	movs	r4, #0
   294f6:	e7fb      	b.n	294f0 <bt_lookup_id_addr+0x10>

000294f8 <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   294f8:	b118      	cbz	r0, 29502 <bt_id_set_adv_random_addr+0xa>
   294fa:	b111      	cbz	r1, 29502 <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   294fc:	4608      	mov	r0, r1
   294fe:	f7ee bb53 	b.w	17ba8 <set_random_address>
}
   29502:	f06f 0015 	mvn.w	r0, #21
   29506:	4770      	bx	lr

00029508 <bt_id_set_adv_private_addr>:
	CHECKIF(adv == NULL) {
   29508:	b110      	cbz	r0, 29510 <bt_id_set_adv_private_addr+0x8>
		return bt_id_set_private_addr(adv->id);
   2950a:	7800      	ldrb	r0, [r0, #0]
   2950c:	f7ee bc0a 	b.w	17d24 <bt_id_set_private_addr>
}
   29510:	f06f 0015 	mvn.w	r0, #21
   29514:	4770      	bx	lr

00029516 <bt_id_adv_random_addr_check>:
}
   29516:	3800      	subs	r0, #0
   29518:	bf18      	it	ne
   2951a:	2001      	movne	r0, #1
   2951c:	4770      	bx	lr

0002951e <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   2951e:	7a03      	ldrb	r3, [r0, #8]
   29520:	07d9      	lsls	r1, r3, #31
   29522:	d504      	bpl.n	2952e <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   29524:	f023 0301 	bic.w	r3, r3, #1
   29528:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   2952a:	f7ee bcb1 	b.w	17e90 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   2952e:	0799      	lsls	r1, r3, #30
   29530:	d504      	bpl.n	2953c <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   29532:	f023 0302 	bic.w	r3, r3, #2
   29536:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   29538:	f7ee bcc4 	b.w	17ec4 <bt_id_del>
}
   2953c:	4770      	bx	lr

0002953e <get_adv_channel_map>:
{
   2953e:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   29540:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   29544:	bf0c      	ite	eq
   29546:	2007      	moveq	r0, #7
   29548:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   2954a:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   2954c:	bf48      	it	mi
   2954e:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   29552:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   29554:	bf48      	it	mi
   29556:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   2955a:	4770      	bx	lr

0002955c <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2955c:	f3bf 8f5b 	dmb	ish
   29560:	6800      	ldr	r0, [r0, #0]
   29562:	f3bf 8f5b 	dmb	ish
}
   29566:	4770      	bx	lr

00029568 <atomic_and>:
{
   29568:	b510      	push	{r4, lr}
   2956a:	4603      	mov	r3, r0
}
   2956c:	f3bf 8f5b 	dmb	ish
   29570:	e853 0f00 	ldrex	r0, [r3]
   29574:	ea00 0201 	and.w	r2, r0, r1
   29578:	e843 2400 	strex	r4, r2, [r3]
   2957c:	2c00      	cmp	r4, #0
   2957e:	d1f7      	bne.n	29570 <atomic_and+0x8>
   29580:	f3bf 8f5b 	dmb	ish
   29584:	bd10      	pop	{r4, pc}

00029586 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   29586:	2301      	movs	r3, #1
{
   29588:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2958a:	fa03 f101 	lsl.w	r1, r3, r1
{
   2958e:	4604      	mov	r4, r0
	if (val) {
   29590:	b162      	cbz	r2, 295ac <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29592:	f3bf 8f5b 	dmb	ish
   29596:	e854 3f00 	ldrex	r3, [r4]
   2959a:	430b      	orrs	r3, r1
   2959c:	e844 3200 	strex	r2, r3, [r4]
   295a0:	2a00      	cmp	r2, #0
   295a2:	d1f8      	bne.n	29596 <atomic_set_bit_to+0x10>
   295a4:	f3bf 8f5b 	dmb	ish
	}
}
   295a8:	bc10      	pop	{r4}
   295aa:	4770      	bx	lr
   295ac:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   295ae:	43c9      	mvns	r1, r1
   295b0:	f7ff bfda 	b.w	29568 <atomic_and>

000295b4 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   295b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   295b8:	b087      	sub	sp, #28
   295ba:	4605      	mov	r5, r0
   295bc:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   295c0:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   295c4:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   295c8:	460c      	mov	r4, r1
   295ca:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   295cc:	2100      	movs	r1, #0
   295ce:	2210      	movs	r2, #16
   295d0:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   295d2:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   295d4:	f7ff fcb3 	bl	28f3e <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   295d8:	b9ee      	cbnz	r6, 29616 <le_adv_update.constprop.0+0x62>
		d[0].len = ad_len;
   295da:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   295de:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   295e0:	a902      	add	r1, sp, #8
   295e2:	f242 0008 	movw	r0, #8200	; 0x2008
   295e6:	f7ee fe93 	bl	18310 <hci_set_ad>
		if (err) {
   295ea:	4604      	mov	r4, r0
   295ec:	b978      	cbnz	r0, 2960e <le_adv_update.constprop.0+0x5a>
	if (scannable) {
   295ee:	f1ba 0f00 	cmp.w	sl, #0
   295f2:	d13e      	bne.n	29672 <le_adv_update.constprop.0+0xbe>
   295f4:	3510      	adds	r5, #16
   295f6:	f3bf 8f5b 	dmb	ish
   295fa:	e855 3f00 	ldrex	r3, [r5]
   295fe:	f043 0304 	orr.w	r3, r3, #4
   29602:	e845 3200 	strex	r2, r3, [r5]
   29606:	2a00      	cmp	r2, #0
   29608:	d1f7      	bne.n	295fa <le_adv_update.constprop.0+0x46>
   2960a:	f3bf 8f5b 	dmb	ish
}
   2960e:	4620      	mov	r0, r4
   29610:	b007      	add	sp, #28
   29612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   29616:	f7ee f8d3 	bl	177c0 <bt_get_name>
   2961a:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   2961c:	b9e4      	cbnz	r4, 29658 <le_adv_update.constprop.0+0xa4>
   2961e:	bb37      	cbnz	r7, 2966e <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   29620:	4658      	mov	r0, fp
   29622:	f7ff fc2a 	bl	28e7a <strlen>
   29626:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   29628:	2e01      	cmp	r6, #1
		d[0].data = ad;
   2962a:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   2962e:	f88d 3000 	strb.w	r3, [sp]
   29632:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   29636:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   2963a:	d1d0      	bne.n	295de <le_adv_update.constprop.0+0x2a>
			d[1].data = &data;
   2963c:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   29640:	9605      	str	r6, [sp, #20]
			d_len = 2;
   29642:	2202      	movs	r2, #2
   29644:	e7cc      	b.n	295e0 <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   29646:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   2964a:	3a08      	subs	r2, #8
   2964c:	2a01      	cmp	r2, #1
   2964e:	d925      	bls.n	2969c <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   29650:	3301      	adds	r3, #1
   29652:	4598      	cmp	r8, r3
   29654:	d1f7      	bne.n	29646 <le_adv_update.constprop.0+0x92>
   29656:	e7e2      	b.n	2961e <le_adv_update.constprop.0+0x6a>
   29658:	2300      	movs	r3, #0
   2965a:	e7fa      	b.n	29652 <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2965c:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   29660:	3a08      	subs	r2, #8
   29662:	2a01      	cmp	r2, #1
   29664:	d91a      	bls.n	2969c <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   29666:	3301      	adds	r3, #1
   29668:	4599      	cmp	r9, r3
   2966a:	d1f7      	bne.n	2965c <le_adv_update.constprop.0+0xa8>
   2966c:	e7d8      	b.n	29620 <le_adv_update.constprop.0+0x6c>
   2966e:	2300      	movs	r3, #0
   29670:	e7fa      	b.n	29668 <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   29672:	2e02      	cmp	r6, #2
   29674:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   29678:	bf08      	it	eq
   2967a:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2967c:	a902      	add	r1, sp, #8
			d_len = 2;
   2967e:	bf08      	it	eq
   29680:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   29682:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   29686:	bf08      	it	eq
   29688:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   2968c:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   29690:	f7ee fe3e 	bl	18310 <hci_set_ad>
		if (err) {
   29694:	2800      	cmp	r0, #0
   29696:	d0ad      	beq.n	295f4 <le_adv_update.constprop.0+0x40>
   29698:	4604      	mov	r4, r0
   2969a:	e7b8      	b.n	2960e <le_adv_update.constprop.0+0x5a>
			return -EINVAL;
   2969c:	f06f 0415 	mvn.w	r4, #21
   296a0:	e7b5      	b.n	2960e <le_adv_update.constprop.0+0x5a>

000296a2 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   296a2:	6843      	ldr	r3, [r0, #4]
   296a4:	f013 0008 	ands.w	r0, r3, #8
   296a8:	d00a      	beq.n	296c0 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   296aa:	035a      	lsls	r2, r3, #13
   296ac:	d407      	bmi.n	296be <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   296ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   296b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   296b6:	bf14      	ite	ne
   296b8:	2002      	movne	r0, #2
   296ba:	2001      	moveq	r0, #1
   296bc:	4770      	bx	lr
   296be:	2001      	movs	r0, #1
}
   296c0:	4770      	bx	lr

000296c2 <bt_le_adv_set_enable_legacy>:
{
   296c2:	b570      	push	{r4, r5, r6, lr}
   296c4:	4606      	mov	r6, r0
   296c6:	b086      	sub	sp, #24
   296c8:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   296ca:	f242 000a 	movw	r0, #8202	; 0x200a
   296ce:	2101      	movs	r1, #1
   296d0:	f7ed f8d8 	bl	16884 <bt_hci_cmd_create>
	if (!buf) {
   296d4:	4604      	mov	r4, r0
   296d6:	b1b0      	cbz	r0, 29706 <bt_le_adv_set_enable_legacy+0x44>
   296d8:	300c      	adds	r0, #12
	if (enable) {
   296da:	b195      	cbz	r5, 29702 <bt_le_adv_set_enable_legacy+0x40>
   296dc:	2101      	movs	r1, #1
   296de:	f001 fe44 	bl	2b36a <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   296e2:	f106 0210 	add.w	r2, r6, #16
   296e6:	a903      	add	r1, sp, #12
   296e8:	4620      	mov	r0, r4
   296ea:	9500      	str	r5, [sp, #0]
   296ec:	2307      	movs	r3, #7
   296ee:	f7ed f8b7 	bl	16860 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   296f2:	2200      	movs	r2, #0
   296f4:	4621      	mov	r1, r4
   296f6:	f242 000a 	movw	r0, #8202	; 0x200a
   296fa:	f7ed f8fd 	bl	168f8 <bt_hci_cmd_send_sync>
}
   296fe:	b006      	add	sp, #24
   29700:	bd70      	pop	{r4, r5, r6, pc}
   29702:	4629      	mov	r1, r5
   29704:	e7eb      	b.n	296de <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   29706:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2970a:	e7f8      	b.n	296fe <bt_le_adv_set_enable_legacy+0x3c>

0002970c <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   2970c:	f7ff bfd9 	b.w	296c2 <bt_le_adv_set_enable_legacy>

00029710 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   29710:	3018      	adds	r0, #24
   29712:	f002 bcae 	b.w	2c072 <k_work_cancel_delayable>

00029716 <sys_slist_find_and_remove>:
	return list->head;
   29716:	6803      	ldr	r3, [r0, #0]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29718:	2200      	movs	r2, #0
   2971a:	b90b      	cbnz	r3, 29720 <sys_slist_find_and_remove+0xa>
   2971c:	4618      	mov	r0, r3
   2971e:	4770      	bx	lr
   29720:	428b      	cmp	r3, r1
   29722:	d110      	bne.n	29746 <sys_slist_find_and_remove+0x30>
	return node->next;
   29724:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   29726:	b942      	cbnz	r2, 2973a <sys_slist_find_and_remove+0x24>
   29728:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   2972a:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2972c:	4291      	cmp	r1, r2
   2972e:	d100      	bne.n	29732 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   29730:	6043      	str	r3, [r0, #4]
	parent->next = child;
   29732:	2300      	movs	r3, #0
   29734:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29736:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   29738:	4770      	bx	lr
	parent->next = child;
   2973a:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2973c:	6843      	ldr	r3, [r0, #4]
   2973e:	4299      	cmp	r1, r3
	list->tail = node;
   29740:	bf08      	it	eq
   29742:	6042      	streq	r2, [r0, #4]
}
   29744:	e7f5      	b.n	29732 <sys_slist_find_and_remove+0x1c>
	return node->next;
   29746:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29748:	681b      	ldr	r3, [r3, #0]
   2974a:	e7e6      	b.n	2971a <sys_slist_find_and_remove+0x4>

0002974c <atomic_and>:
{
   2974c:	b510      	push	{r4, lr}
   2974e:	4603      	mov	r3, r0
}
   29750:	f3bf 8f5b 	dmb	ish
   29754:	e853 0f00 	ldrex	r0, [r3]
   29758:	ea00 0201 	and.w	r2, r0, r1
   2975c:	e843 2400 	strex	r4, r2, [r3]
   29760:	2c00      	cmp	r4, #0
   29762:	d1f7      	bne.n	29754 <atomic_and+0x8>
   29764:	f3bf 8f5b 	dmb	ish
   29768:	bd10      	pop	{r4, pc}

0002976a <z_log_msg_static_create.constprop.0>:
   2976a:	2300      	movs	r3, #0
   2976c:	f7ea ba2a 	b.w	13bc4 <z_impl_z_log_msg_static_create>

00029770 <tx_complete_work>:
	tx_notify(conn);
   29770:	3828      	subs	r0, #40	; 0x28
   29772:	f7ef baad 	b.w	18cd0 <tx_notify>

00029776 <bt_conn_reset_rx_state>:
{
   29776:	b510      	push	{r4, lr}
   29778:	4604      	mov	r4, r0
	if (!conn->rx) {
   2977a:	6900      	ldr	r0, [r0, #16]
   2977c:	b118      	cbz	r0, 29786 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   2977e:	f7f5 f993 	bl	1eaa8 <net_buf_unref>
	conn->rx = NULL;
   29782:	2300      	movs	r3, #0
   29784:	6123      	str	r3, [r4, #16]
}
   29786:	bd10      	pop	{r4, pc}

00029788 <conn_cleanup>:
{
   29788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2978c:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   2978e:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   29790:	f104 0638 	add.w	r6, r4, #56	; 0x38
   29794:	2300      	movs	r3, #0
   29796:	2200      	movs	r2, #0
   29798:	4630      	mov	r0, r6
   2979a:	f001 fd7c 	bl	2b296 <net_buf_get>
   2979e:	4603      	mov	r3, r0
   297a0:	b950      	cbnz	r0, 297b8 <conn_cleanup+0x30>
	bt_conn_reset_rx_state(conn);
   297a2:	4620      	mov	r0, r4
   297a4:	f7ff ffe7 	bl	29776 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   297a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   297ac:	2200      	movs	r2, #0
}
   297ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   297b2:	2300      	movs	r3, #0
   297b4:	f7f9 bfe8 	b.w	23788 <k_work_reschedule>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   297b8:	699d      	ldr	r5, [r3, #24]
		tx_data(buf)->tx = NULL;
   297ba:	619f      	str	r7, [r3, #24]
		net_buf_unref(buf);
   297bc:	f7f5 f974 	bl	1eaa8 <net_buf_unref>
		if (tx) {
   297c0:	2d00      	cmp	r5, #0
   297c2:	d0e7      	beq.n	29794 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   297c4:	4629      	mov	r1, r5
   297c6:	4620      	mov	r0, r4
   297c8:	f7ef fab2 	bl	18d30 <conn_tx_destroy>
   297cc:	e7e0      	b.n	29790 <conn_cleanup+0x8>

000297ce <bt_conn_ref>:
{
   297ce:	b510      	push	{r4, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   297d0:	f3bf 8f5b 	dmb	ish
   297d4:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   297d8:	f3bf 8f5b 	dmb	ish
		old = atomic_get(&conn->ref);
   297dc:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
		if (!old) {
   297e0:	b17b      	cbz	r3, 29802 <bt_conn_ref+0x34>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   297e2:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   297e6:	1c59      	adds	r1, r3, #1
   297e8:	e852 4f00 	ldrex	r4, [r2]
   297ec:	429c      	cmp	r4, r3
   297ee:	d104      	bne.n	297fa <bt_conn_ref+0x2c>
   297f0:	e842 1c00 	strex	ip, r1, [r2]
   297f4:	f1bc 0f00 	cmp.w	ip, #0
   297f8:	d1f6      	bne.n	297e8 <bt_conn_ref+0x1a>
   297fa:	f3bf 8f5b 	dmb	ish
   297fe:	d1e7      	bne.n	297d0 <bt_conn_ref+0x2>
}
   29800:	bd10      	pop	{r4, pc}
			return NULL;
   29802:	4618      	mov	r0, r3
   29804:	e7fc      	b.n	29800 <bt_conn_ref+0x32>

00029806 <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   29806:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2980a:	f3bf 8f5b 	dmb	ish
   2980e:	e853 1f00 	ldrex	r1, [r3]
   29812:	3901      	subs	r1, #1
   29814:	e843 1200 	strex	r2, r1, [r3]
   29818:	2a00      	cmp	r2, #0
   2981a:	d1f8      	bne.n	2980e <bt_conn_unref+0x8>
   2981c:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   29820:	8842      	ldrh	r2, [r0, #2]
   29822:	f240 1301 	movw	r3, #257	; 0x101
   29826:	429a      	cmp	r2, r3
   29828:	d108      	bne.n	2983c <bt_conn_unref+0x36>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2982a:	f3bf 8f5b 	dmb	ish
   2982e:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   29832:	f3bf 8f5b 	dmb	ish
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   29836:	b90b      	cbnz	r3, 2983c <bt_conn_unref+0x36>
		bt_le_adv_resume();
   29838:	f7ef b838 	b.w	188ac <bt_le_adv_resume>
}
   2983c:	4770      	bx	lr

0002983e <conn_lookup_handle>:
{
   2983e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29842:	4607      	mov	r7, r0
   29844:	460e      	mov	r6, r1
   29846:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   29848:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2984a:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   2984e:	42b4      	cmp	r4, r6
   29850:	d103      	bne.n	2985a <conn_lookup_handle+0x1c>
	return NULL;
   29852:	2300      	movs	r3, #0
}
   29854:	4618      	mov	r0, r3
   29856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2985a:	fb09 7004 	mla	r0, r9, r4, r7
   2985e:	f7ff ffb6 	bl	297ce <bt_conn_ref>
   29862:	4603      	mov	r3, r0
		if (!conn) {
   29864:	b158      	cbz	r0, 2987e <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   29866:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   29868:	2d01      	cmp	r5, #1
   2986a:	d002      	beq.n	29872 <conn_lookup_handle+0x34>
   2986c:	3d07      	subs	r5, #7
   2986e:	2d01      	cmp	r5, #1
   29870:	d803      	bhi.n	2987a <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   29872:	881a      	ldrh	r2, [r3, #0]
   29874:	4542      	cmp	r2, r8
   29876:	d0ed      	beq.n	29854 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   29878:	4618      	mov	r0, r3
   2987a:	f7ff ffc4 	bl	29806 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   2987e:	3401      	adds	r4, #1
   29880:	e7e5      	b.n	2984e <conn_lookup_handle+0x10>

00029882 <bt_conn_connected>:
{
   29882:	b510      	push	{r4, lr}
   29884:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   29886:	f7f0 f91b 	bl	19ac0 <bt_l2cap_connected>
	notify_connected(conn);
   2988a:	4620      	mov	r0, r4
}
   2988c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   29890:	f7ef b9ec 	b.w	18c6c <notify_connected>

00029894 <bt_conn_disconnect>:
{
   29894:	b510      	push	{r4, lr}
	switch (conn->state) {
   29896:	7b43      	ldrb	r3, [r0, #13]
   29898:	3b02      	subs	r3, #2
{
   2989a:	4604      	mov	r4, r0
	switch (conn->state) {
   2989c:	2b06      	cmp	r3, #6
   2989e:	d816      	bhi.n	298ce <bt_conn_disconnect+0x3a>
   298a0:	e8df f003 	tbb	[pc, r3]
   298a4:	15151504 	.word	0x15151504
   298a8:	0b09      	.short	0x0b09
   298aa:	09          	.byte	0x09
   298ab:	00          	.byte	0x00
		conn->err = reason;
   298ac:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   298ae:	2100      	movs	r1, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   298b0:	4620      	mov	r0, r4
   298b2:	f7ef fcbb 	bl	1922c <bt_conn_set_state>
{
   298b6:	2000      	movs	r0, #0
}
   298b8:	bd10      	pop	{r4, pc}
	err = bt_hci_disconnect(conn->handle, reason);
   298ba:	8800      	ldrh	r0, [r0, #0]
   298bc:	f7ff fc97 	bl	291ee <bt_hci_disconnect>
	if (err) {
   298c0:	2800      	cmp	r0, #0
   298c2:	d1f9      	bne.n	298b8 <bt_conn_disconnect+0x24>
	if (conn->state == BT_CONN_CONNECTED) {
   298c4:	7b63      	ldrb	r3, [r4, #13]
   298c6:	2b07      	cmp	r3, #7
   298c8:	d1f5      	bne.n	298b6 <bt_conn_disconnect+0x22>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   298ca:	2108      	movs	r1, #8
   298cc:	e7f0      	b.n	298b0 <bt_conn_disconnect+0x1c>
		return -ENOTCONN;
   298ce:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   298d2:	e7f1      	b.n	298b8 <bt_conn_disconnect+0x24>

000298d4 <bt_conn_ltk_present>:
{
   298d4:	b510      	push	{r4, lr}
   298d6:	4604      	mov	r4, r0
	const struct bt_keys *keys = conn->le.keys;
   298d8:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
	if (!keys) {
   298dc:	b928      	cbnz	r0, 298ea <bt_conn_ltk_present+0x16>
		keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   298de:	7a20      	ldrb	r0, [r4, #8]
   298e0:	f104 0188 	add.w	r1, r4, #136	; 0x88
   298e4:	f7f4 fe2a 	bl	1e53c <bt_keys_find_addr>
	if (keys) {
   298e8:	b138      	cbz	r0, 298fa <bt_conn_ltk_present+0x26>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   298ea:	78e2      	ldrb	r2, [r4, #3]
			return keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_PERIPH_LTK);
   298ec:	89c3      	ldrh	r3, [r0, #14]
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   298ee:	b92a      	cbnz	r2, 298fc <bt_conn_ltk_present+0x28>
			return keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_PERIPH_LTK);
   298f0:	f013 0f21 	tst.w	r3, #33	; 0x21
			return keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK);
   298f4:	bf14      	ite	ne
   298f6:	2001      	movne	r0, #1
   298f8:	2000      	moveq	r0, #0
}
   298fa:	bd10      	pop	{r4, pc}
			return keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK);
   298fc:	f013 0f24 	tst.w	r3, #36	; 0x24
   29900:	e7f8      	b.n	298f4 <bt_conn_ltk_present+0x20>

00029902 <bt_conn_set_security>:
{
   29902:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   29904:	7b43      	ldrb	r3, [r0, #13]
   29906:	2b07      	cmp	r3, #7
{
   29908:	4604      	mov	r4, r0
   2990a:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   2990c:	d126      	bne.n	2995c <bt_conn_set_security+0x5a>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   2990e:	7a43      	ldrb	r3, [r0, #9]
   29910:	428b      	cmp	r3, r1
   29912:	d219      	bcs.n	29948 <bt_conn_set_security+0x46>
   29914:	7a83      	ldrb	r3, [r0, #10]
   29916:	428b      	cmp	r3, r1
   29918:	d216      	bcs.n	29948 <bt_conn_set_security+0x46>
	if (val) {
   2991a:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   2991c:	f100 0004 	add.w	r0, r0, #4
   29920:	d514      	bpl.n	2994c <bt_conn_set_security+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29922:	f3bf 8f5b 	dmb	ish
   29926:	e850 3f00 	ldrex	r3, [r0]
   2992a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   2992e:	e840 3200 	strex	r2, r3, [r0]
   29932:	2a00      	cmp	r2, #0
   29934:	d1f7      	bne.n	29926 <bt_conn_set_security+0x24>
   29936:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   2993a:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   2993e:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   29940:	4620      	mov	r0, r4
   29942:	f7f3 fec9 	bl	1d6d8 <bt_smp_start_security>
	if (err) {
   29946:	b930      	cbnz	r0, 29956 <bt_conn_set_security+0x54>
		return -ENOTCONN;
   29948:	2000      	movs	r0, #0
}
   2994a:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2994c:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   29950:	f7ff fefc 	bl	2974c <atomic_and>
   29954:	e7f1      	b.n	2993a <bt_conn_set_security+0x38>
		conn->required_sec_level = conn->sec_level;
   29956:	7a63      	ldrb	r3, [r4, #9]
   29958:	72a3      	strb	r3, [r4, #10]
   2995a:	e7f6      	b.n	2994a <bt_conn_set_security+0x48>
		return -ENOTCONN;
   2995c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   29960:	e7f3      	b.n	2994a <bt_conn_set_security+0x48>

00029962 <bt_conn_get_security>:
}
   29962:	7a40      	ldrb	r0, [r0, #9]
   29964:	4770      	bx	lr

00029966 <bt_conn_is_peer_addr_le>:
{
   29966:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   29968:	7a03      	ldrb	r3, [r0, #8]
   2996a:	428b      	cmp	r3, r1
{
   2996c:	4604      	mov	r4, r0
   2996e:	4615      	mov	r5, r2
	if (id != conn->id) {
   29970:	d115      	bne.n	2999e <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   29972:	f100 0188 	add.w	r1, r0, #136	; 0x88
   29976:	2207      	movs	r2, #7
   29978:	4628      	mov	r0, r5
   2997a:	f7ff faae 	bl	28eda <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   2997e:	b180      	cbz	r0, 299a2 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   29980:	78e3      	ldrb	r3, [r4, #3]
   29982:	2207      	movs	r2, #7
   29984:	b943      	cbnz	r3, 29998 <bt_conn_is_peer_addr_le+0x32>
   29986:	f104 0196 	add.w	r1, r4, #150	; 0x96
   2998a:	4628      	mov	r0, r5
   2998c:	f7ff faa5 	bl	28eda <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   29990:	fab0 f080 	clz	r0, r0
   29994:	0940      	lsrs	r0, r0, #5
}
   29996:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   29998:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   2999c:	e7f5      	b.n	2998a <bt_conn_is_peer_addr_le+0x24>
		return false;
   2999e:	2000      	movs	r0, #0
   299a0:	e7f9      	b.n	29996 <bt_conn_is_peer_addr_le+0x30>
		return true;
   299a2:	2001      	movs	r0, #1
   299a4:	e7f7      	b.n	29996 <bt_conn_is_peer_addr_le+0x30>

000299a6 <bt_conn_get_dst>:
}
   299a6:	3088      	adds	r0, #136	; 0x88
   299a8:	4770      	bx	lr

000299aa <bt_conn_le_conn_update>:
{
   299aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   299ac:	4607      	mov	r7, r0
   299ae:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   299b0:	f242 0013 	movw	r0, #8211	; 0x2013
   299b4:	210e      	movs	r1, #14
   299b6:	f7ec ff65 	bl	16884 <bt_hci_cmd_create>
	if (!buf) {
   299ba:	4606      	mov	r6, r0
   299bc:	b1d0      	cbz	r0, 299f4 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   299be:	210e      	movs	r1, #14
   299c0:	300c      	adds	r0, #12
   299c2:	f001 fcc3 	bl	2b34c <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   299c6:	220e      	movs	r2, #14
   299c8:	4604      	mov	r4, r0
   299ca:	2100      	movs	r1, #0
   299cc:	f7ff fab7 	bl	28f3e <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   299d0:	883b      	ldrh	r3, [r7, #0]
   299d2:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   299d4:	882b      	ldrh	r3, [r5, #0]
   299d6:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   299d8:	886b      	ldrh	r3, [r5, #2]
   299da:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   299dc:	88ab      	ldrh	r3, [r5, #4]
   299de:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   299e0:	88eb      	ldrh	r3, [r5, #6]
   299e2:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   299e4:	4631      	mov	r1, r6
   299e6:	2200      	movs	r2, #0
}
   299e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   299ec:	f242 0013 	movw	r0, #8211	; 0x2013
   299f0:	f7ec bf82 	b.w	168f8 <bt_hci_cmd_send_sync>
}
   299f4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   299f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000299fa <l2cap_connected>:
}
   299fa:	4770      	bx	lr

000299fc <z_log_msg_static_create.constprop.0>:
   299fc:	2300      	movs	r3, #0
   299fe:	f7ea b8e1 	b.w	13bc4 <z_impl_z_log_msg_static_create>

00029a02 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   29a02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29a04:	4605      	mov	r5, r0
   29a06:	460f      	mov	r7, r1
   29a08:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   29a0a:	2300      	movs	r3, #0
   29a0c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   29a10:	2104      	movs	r1, #4
   29a12:	2000      	movs	r0, #0
   29a14:	f7ef fd18 	bl	19448 <bt_conn_create_pdu_timeout>
	if (!buf) {
   29a18:	4604      	mov	r4, r0
   29a1a:	b920      	cbnz	r0, 29a26 <l2cap_create_le_sig_pdu.constprop.0+0x24>
   29a1c:	4628      	mov	r0, r5
}
   29a1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   29a22:	f7f0 b811 	b.w	19a48 <l2cap_create_le_sig_pdu.part.0>
   29a26:	2104      	movs	r1, #4
   29a28:	300c      	adds	r0, #12
   29a2a:	f001 fc8f 	bl	2b34c <net_buf_simple_add>
	hdr->code = code;
   29a2e:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   29a30:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   29a32:	8046      	strh	r6, [r0, #2]
}
   29a34:	4620      	mov	r0, r4
   29a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00029a38 <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   29a38:	4770      	bx	lr

00029a3a <bt_l2cap_chan_del>:
{
   29a3a:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   29a3c:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   29a40:	4604      	mov	r4, r0
	if (!chan->conn) {
   29a42:	b123      	cbz	r3, 29a4e <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   29a44:	686b      	ldr	r3, [r5, #4]
   29a46:	b103      	cbz	r3, 29a4a <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   29a48:	4798      	blx	r3
	chan->conn = NULL;
   29a4a:	2300      	movs	r3, #0
   29a4c:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   29a4e:	68e3      	ldr	r3, [r4, #12]
   29a50:	b10b      	cbz	r3, 29a56 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   29a52:	4620      	mov	r0, r4
   29a54:	4798      	blx	r3
	if (ops->released) {
   29a56:	6a2b      	ldr	r3, [r5, #32]
   29a58:	b11b      	cbz	r3, 29a62 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   29a5a:	4620      	mov	r0, r4
}
   29a5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   29a60:	4718      	bx	r3
}
   29a62:	bd70      	pop	{r4, r5, r6, pc}

00029a64 <bt_l2cap_disconnected>:
{
   29a64:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   29a66:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   29a68:	b130      	cbz	r0, 29a78 <bt_l2cap_disconnected+0x14>
	return node->next;
   29a6a:	f850 4908 	ldr.w	r4, [r0], #-8
   29a6e:	b104      	cbz	r4, 29a72 <bt_l2cap_disconnected+0xe>
   29a70:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   29a72:	f7ff ffe2 	bl	29a3a <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   29a76:	b904      	cbnz	r4, 29a7a <bt_l2cap_disconnected+0x16>
}
   29a78:	bd38      	pop	{r3, r4, r5, pc}
   29a7a:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   29a7c:	b12d      	cbz	r5, 29a8a <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   29a7e:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   29a80:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   29a82:	f7ff ffda 	bl	29a3a <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   29a86:	462c      	mov	r4, r5
   29a88:	e7f7      	b.n	29a7a <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   29a8a:	4620      	mov	r0, r4
}
   29a8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   29a90:	f7ff bfd3 	b.w	29a3a <bt_l2cap_chan_del>

00029a94 <bt_l2cap_security_changed>:
{
   29a94:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   29a96:	6d03      	ldr	r3, [r0, #80]	; 0x50
   29a98:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   29a9a:	b1bb      	cbz	r3, 29acc <bt_l2cap_security_changed+0x38>
   29a9c:	4618      	mov	r0, r3
	return node->next;
   29a9e:	f850 4908 	ldr.w	r4, [r0], #-8
   29aa2:	b104      	cbz	r4, 29aa6 <bt_l2cap_security_changed+0x12>
   29aa4:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   29aa6:	f853 3c04 	ldr.w	r3, [r3, #-4]
   29aaa:	689b      	ldr	r3, [r3, #8]
   29aac:	b10b      	cbz	r3, 29ab2 <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   29aae:	4629      	mov	r1, r5
   29ab0:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   29ab2:	b15c      	cbz	r4, 29acc <bt_l2cap_security_changed+0x38>
   29ab4:	4620      	mov	r0, r4
   29ab6:	68a4      	ldr	r4, [r4, #8]
   29ab8:	6843      	ldr	r3, [r0, #4]
   29aba:	b124      	cbz	r4, 29ac6 <bt_l2cap_security_changed+0x32>
		if (chan->ops->encrypt_change) {
   29abc:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   29abe:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   29ac0:	2b00      	cmp	r3, #0
   29ac2:	d1f4      	bne.n	29aae <bt_l2cap_security_changed+0x1a>
   29ac4:	e7f6      	b.n	29ab4 <bt_l2cap_security_changed+0x20>
   29ac6:	689b      	ldr	r3, [r3, #8]
   29ac8:	2b00      	cmp	r3, #0
   29aca:	d1f0      	bne.n	29aae <bt_l2cap_security_changed+0x1a>
}
   29acc:	bd38      	pop	{r3, r4, r5, pc}

00029ace <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   29ace:	3104      	adds	r1, #4
   29ad0:	f7ef bcba 	b.w	19448 <bt_conn_create_pdu_timeout>

00029ad4 <bt_l2cap_send_cb>:
{
   29ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29ad8:	4614      	mov	r4, r2
   29ada:	4605      	mov	r5, r0
   29adc:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   29ade:	f102 000c 	add.w	r0, r2, #12
   29ae2:	2104      	movs	r1, #4
   29ae4:	461e      	mov	r6, r3
   29ae6:	f8dd 8018 	ldr.w	r8, [sp, #24]
   29aea:	f001 fc46 	bl	2b37a <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   29aee:	8a22      	ldrh	r2, [r4, #16]
	hdr->cid = sys_cpu_to_le16(cid);
   29af0:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   29af2:	3a04      	subs	r2, #4
   29af4:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   29af6:	4643      	mov	r3, r8
   29af8:	4632      	mov	r2, r6
   29afa:	4621      	mov	r1, r4
   29afc:	4628      	mov	r0, r5
}
   29afe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   29b02:	f7ef bad1 	b.w	190a8 <bt_conn_send_cb>

00029b06 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   29b06:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   29b08:	b130      	cbz	r0, 29b18 <bt_l2cap_le_lookup_tx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   29b0a:	8b83      	ldrh	r3, [r0, #28]
   29b0c:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   29b0e:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   29b12:	d001      	beq.n	29b18 <bt_l2cap_le_lookup_tx_cid+0x12>
	return node->next;
   29b14:	6880      	ldr	r0, [r0, #8]
   29b16:	e7f7      	b.n	29b08 <bt_l2cap_le_lookup_tx_cid+0x2>
}
   29b18:	4770      	bx	lr

00029b1a <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   29b1a:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   29b1c:	b130      	cbz	r0, 29b2c <bt_l2cap_le_lookup_rx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   29b1e:	8983      	ldrh	r3, [r0, #12]
   29b20:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   29b22:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   29b26:	d001      	beq.n	29b2c <bt_l2cap_le_lookup_rx_cid+0x12>
	return node->next;
   29b28:	6880      	ldr	r0, [r0, #8]
   29b2a:	e7f7      	b.n	29b1c <bt_l2cap_le_lookup_rx_cid+0x2>
}
   29b2c:	4770      	bx	lr

00029b2e <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   29b2e:	4770      	bx	lr

00029b30 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   29b30:	4603      	mov	r3, r0
	return list->head;
   29b32:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   29b34:	b128      	cbz	r0, 29b42 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   29b36:	6859      	ldr	r1, [r3, #4]
	return node->next;
   29b38:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   29b3a:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   29b3c:	4288      	cmp	r0, r1
	list->tail = node;
   29b3e:	bf08      	it	eq
   29b40:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   29b42:	4770      	bx	lr

00029b44 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   29b44:	4603      	mov	r3, r0
	size_t bytes = 0;
   29b46:	2000      	movs	r0, #0

	while (buf) {
   29b48:	b903      	cbnz	r3, 29b4c <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   29b4a:	4770      	bx	lr
		bytes += buf->len;
   29b4c:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   29b4e:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   29b50:	4410      	add	r0, r2
		buf = buf->frags;
   29b52:	e7f9      	b.n	29b48 <net_buf_frags_len+0x4>

00029b54 <attr_read_type_cb>:
{
   29b54:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   29b56:	68d4      	ldr	r4, [r2, #12]
   29b58:	7823      	ldrb	r3, [r4, #0]
   29b5a:	3102      	adds	r1, #2
   29b5c:	b913      	cbnz	r3, 29b64 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   29b5e:	7021      	strb	r1, [r4, #0]
	return true;
   29b60:	2001      	movs	r0, #1
}
   29b62:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   29b64:	428b      	cmp	r3, r1
   29b66:	d0fb      	beq.n	29b60 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   29b68:	8a03      	ldrh	r3, [r0, #16]
   29b6a:	3b02      	subs	r3, #2
   29b6c:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   29b6e:	2000      	movs	r0, #0
   29b70:	6110      	str	r0, [r2, #16]
		return false;
   29b72:	e7f6      	b.n	29b62 <attr_read_type_cb+0xe>

00029b74 <att_prepare_write_req>:
}
   29b74:	2006      	movs	r0, #6
   29b76:	4770      	bx	lr

00029b78 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   29b78:	f3bf 8f5b 	dmb	ish
   29b7c:	6800      	ldr	r0, [r0, #0]
   29b7e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   29b82:	4108      	asrs	r0, r1
}
   29b84:	f000 0001 	and.w	r0, r0, #1
   29b88:	4770      	bx	lr

00029b8a <write_cb>:
{
   29b8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   29b8c:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   29b8e:	4601      	mov	r1, r0
{
   29b90:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   29b92:	f44f 7295 	mov.w	r2, #298	; 0x12a
   29b96:	6820      	ldr	r0, [r4, #0]
   29b98:	f000 fe82 	bl	2a8a0 <bt_gatt_check_perm>
   29b9c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   29b9e:	bb00      	cbnz	r0, 29be2 <write_cb+0x58>
	if (!data->req) {
   29ba0:	7a23      	ldrb	r3, [r4, #8]
   29ba2:	b1b3      	cbz	r3, 29bd2 <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   29ba4:	f1a3 0218 	sub.w	r2, r3, #24
   29ba8:	4253      	negs	r3, r2
   29baa:	4153      	adcs	r3, r2
   29bac:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   29bae:	9301      	str	r3, [sp, #4]
   29bb0:	8a63      	ldrh	r3, [r4, #18]
   29bb2:	9300      	str	r3, [sp, #0]
   29bb4:	68ae      	ldr	r6, [r5, #8]
   29bb6:	8a23      	ldrh	r3, [r4, #16]
   29bb8:	68e2      	ldr	r2, [r4, #12]
   29bba:	6820      	ldr	r0, [r4, #0]
   29bbc:	4629      	mov	r1, r5
   29bbe:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   29bc0:	2800      	cmp	r0, #0
   29bc2:	db08      	blt.n	29bd6 <write_cb+0x4c>
   29bc4:	8a23      	ldrh	r3, [r4, #16]
   29bc6:	4298      	cmp	r0, r3
   29bc8:	d10e      	bne.n	29be8 <write_cb+0x5e>
	data->err = 0U;
   29bca:	2300      	movs	r3, #0
   29bcc:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   29bce:	2001      	movs	r0, #1
   29bd0:	e008      	b.n	29be4 <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   29bd2:	2302      	movs	r3, #2
   29bd4:	e7eb      	b.n	29bae <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   29bd6:	f110 0fff 	cmn.w	r0, #255	; 0xff
   29bda:	d305      	bcc.n	29be8 <write_cb+0x5e>
		return -err;
   29bdc:	4240      	negs	r0, r0
   29bde:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   29be0:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   29be2:	2000      	movs	r0, #0
}
   29be4:	b002      	add	sp, #8
   29be6:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   29be8:	200e      	movs	r0, #14
   29bea:	e7f9      	b.n	29be0 <write_cb+0x56>

00029bec <bt_gatt_foreach_attr>:
{
   29bec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   29bee:	e9cd 2301 	strd	r2, r3, [sp, #4]
   29bf2:	2300      	movs	r3, #0
   29bf4:	9300      	str	r3, [sp, #0]
   29bf6:	461a      	mov	r2, r3
   29bf8:	f7f1 ffbe 	bl	1bb78 <bt_gatt_foreach_attr_type>
}
   29bfc:	b005      	add	sp, #20
   29bfe:	f85d fb04 	ldr.w	pc, [sp], #4

00029c02 <find_info_cb>:
{
   29c02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   29c04:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   29c06:	6817      	ldr	r7, [r2, #0]
{
   29c08:	4605      	mov	r5, r0
   29c0a:	460e      	mov	r6, r1
   29c0c:	4614      	mov	r4, r2
	if (!data->rsp) {
   29c0e:	b963      	cbnz	r3, 29c2a <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   29c10:	6850      	ldr	r0, [r2, #4]
   29c12:	2101      	movs	r1, #1
   29c14:	300c      	adds	r0, #12
   29c16:	f001 fb99 	bl	2b34c <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   29c1a:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   29c1c:	682b      	ldr	r3, [r5, #0]
   29c1e:	781b      	ldrb	r3, [r3, #0]
   29c20:	2b00      	cmp	r3, #0
   29c22:	bf14      	ite	ne
   29c24:	2302      	movne	r3, #2
   29c26:	2301      	moveq	r3, #1
   29c28:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   29c2a:	68a3      	ldr	r3, [r4, #8]
   29c2c:	781b      	ldrb	r3, [r3, #0]
   29c2e:	2b01      	cmp	r3, #1
   29c30:	d003      	beq.n	29c3a <find_info_cb+0x38>
   29c32:	2b02      	cmp	r3, #2
   29c34:	d019      	beq.n	29c6a <find_info_cb+0x68>
   29c36:	2000      	movs	r0, #0
   29c38:	e016      	b.n	29c68 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   29c3a:	682b      	ldr	r3, [r5, #0]
   29c3c:	781b      	ldrb	r3, [r3, #0]
   29c3e:	2b00      	cmp	r3, #0
   29c40:	d1f9      	bne.n	29c36 <find_info_cb+0x34>
   29c42:	6860      	ldr	r0, [r4, #4]
   29c44:	2104      	movs	r1, #4
   29c46:	300c      	adds	r0, #12
   29c48:	f001 fb80 	bl	2b34c <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   29c4c:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   29c4e:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   29c50:	682a      	ldr	r2, [r5, #0]
   29c52:	68e3      	ldr	r3, [r4, #12]
   29c54:	8852      	ldrh	r2, [r2, #2]
   29c56:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   29c58:	6863      	ldr	r3, [r4, #4]
   29c5a:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   29c5c:	8a1b      	ldrh	r3, [r3, #16]
   29c5e:	1ac0      	subs	r0, r0, r3
   29c60:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   29c62:	bf94      	ite	ls
   29c64:	2000      	movls	r0, #0
   29c66:	2001      	movhi	r0, #1
}
   29c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   29c6a:	682b      	ldr	r3, [r5, #0]
   29c6c:	781b      	ldrb	r3, [r3, #0]
   29c6e:	2b02      	cmp	r3, #2
   29c70:	d1e1      	bne.n	29c36 <find_info_cb+0x34>
   29c72:	6860      	ldr	r0, [r4, #4]
   29c74:	2112      	movs	r1, #18
   29c76:	300c      	adds	r0, #12
   29c78:	f001 fb68 	bl	2b34c <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   29c7c:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   29c7e:	8006      	strh	r6, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   29c80:	6829      	ldr	r1, [r5, #0]
   29c82:	68e0      	ldr	r0, [r4, #12]
   29c84:	2210      	movs	r2, #16
   29c86:	3101      	adds	r1, #1
   29c88:	3002      	adds	r0, #2
   29c8a:	f7ff f94d 	bl	28f28 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   29c8e:	6863      	ldr	r3, [r4, #4]
   29c90:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   29c92:	8a1b      	ldrh	r3, [r3, #16]
   29c94:	1ac0      	subs	r0, r0, r3
   29c96:	2812      	cmp	r0, #18
   29c98:	e7e3      	b.n	29c62 <find_info_cb+0x60>

00029c9a <att_chan_mtu_updated>:
{
   29c9a:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   29c9c:	6805      	ldr	r5, [r0, #0]
	return list->head;
   29c9e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   29ca0:	b352      	cbz	r2, 29cf8 <att_chan_mtu_updated+0x5e>
	return node->next;
   29ca2:	6813      	ldr	r3, [r2, #0]
   29ca4:	b103      	cbz	r3, 29ca8 <att_chan_mtu_updated+0xe>
   29ca6:	3b88      	subs	r3, #136	; 0x88
   29ca8:	f1a2 0488 	sub.w	r4, r2, #136	; 0x88
   29cac:	2200      	movs	r2, #0
   29cae:	4611      	mov	r1, r2
   29cb0:	e000      	b.n	29cb4 <att_chan_mtu_updated+0x1a>
   29cb2:	3b88      	subs	r3, #136	; 0x88
		if (chan == updated_chan) {
   29cb4:	4284      	cmp	r4, r0
   29cb6:	d007      	beq.n	29cc8 <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   29cb8:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   29cba:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   29cbc:	42b1      	cmp	r1, r6
   29cbe:	bf38      	it	cc
   29cc0:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   29cc2:	42a2      	cmp	r2, r4
   29cc4:	bf38      	it	cc
   29cc6:	4622      	movcc	r2, r4
   29cc8:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   29cca:	b12b      	cbz	r3, 29cd8 <att_chan_mtu_updated+0x3e>
   29ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   29cd0:	2b00      	cmp	r3, #0
   29cd2:	d1ee      	bne.n	29cb2 <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   29cd4:	4284      	cmp	r4, r0
   29cd6:	d1ef      	bne.n	29cb8 <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   29cd8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   29cda:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   29cdc:	428b      	cmp	r3, r1
   29cde:	d801      	bhi.n	29ce4 <att_chan_mtu_updated+0x4a>
   29ce0:	4290      	cmp	r0, r2
   29ce2:	d90b      	bls.n	29cfc <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   29ce4:	4282      	cmp	r2, r0
   29ce6:	bf38      	it	cc
   29ce8:	4602      	movcc	r2, r0
   29cea:	4299      	cmp	r1, r3
   29cec:	6828      	ldr	r0, [r5, #0]
   29cee:	bf38      	it	cc
   29cf0:	4619      	movcc	r1, r3
}
   29cf2:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   29cf4:	f7f2 bc8c 	b.w	1c610 <bt_gatt_att_max_mtu_changed>
   29cf8:	4611      	mov	r1, r2
   29cfa:	e7ed      	b.n	29cd8 <att_chan_mtu_updated+0x3e>
}
   29cfc:	bc70      	pop	{r4, r5, r6}
   29cfe:	4770      	bx	lr

00029d00 <attr_read_group_cb>:
	if (!data->rsp->len) {
   29d00:	68d0      	ldr	r0, [r2, #12]
   29d02:	7803      	ldrb	r3, [r0, #0]
   29d04:	3104      	adds	r1, #4
   29d06:	b913      	cbnz	r3, 29d0e <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   29d08:	7001      	strb	r1, [r0, #0]
	return true;
   29d0a:	2001      	movs	r0, #1
   29d0c:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   29d0e:	428b      	cmp	r3, r1
   29d10:	d0fb      	beq.n	29d0a <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   29d12:	6891      	ldr	r1, [r2, #8]
   29d14:	8a0b      	ldrh	r3, [r1, #16]
		data->group = NULL;
   29d16:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   29d18:	3b04      	subs	r3, #4
   29d1a:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   29d1c:	6110      	str	r0, [r2, #16]
}
   29d1e:	4770      	bx	lr

00029d20 <z_log_msg_static_create.constprop.0>:
   29d20:	2300      	movs	r3, #0
   29d22:	f7e9 bf4f 	b.w	13bc4 <z_impl_z_log_msg_static_create>

00029d26 <chan_req_send>:
{
   29d26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29d28:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   29d2a:	6888      	ldr	r0, [r1, #8]
   29d2c:	f7ff ff0a 	bl	29b44 <net_buf_frags_len>
   29d30:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
   29d32:	4283      	cmp	r3, r0
{
   29d34:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   29d36:	d30b      	bcc.n	29d50 <chan_req_send+0x2a>
	chan->req = req;
   29d38:	63a9      	str	r1, [r5, #56]	; 0x38
	buf = req->buf;
   29d3a:	688f      	ldr	r7, [r1, #8]
	req->buf = NULL;
   29d3c:	2600      	movs	r6, #0
   29d3e:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   29d40:	4628      	mov	r0, r5
   29d42:	4639      	mov	r1, r7
   29d44:	f7f0 f904 	bl	19f50 <chan_send>
	if (err) {
   29d48:	b108      	cbz	r0, 29d4e <chan_req_send+0x28>
		req->buf = buf;
   29d4a:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   29d4c:	63ae      	str	r6, [r5, #56]	; 0x38
}
   29d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   29d50:	f06f 0079 	mvn.w	r0, #121	; 0x79
   29d54:	e7fb      	b.n	29d4e <chan_req_send+0x28>

00029d56 <process_queue>:
{
   29d56:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   29d58:	2200      	movs	r2, #0
{
   29d5a:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   29d5c:	2300      	movs	r3, #0
   29d5e:	4608      	mov	r0, r1
{
   29d60:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   29d62:	f001 fa98 	bl	2b296 <net_buf_get>
	if (buf) {
   29d66:	4605      	mov	r5, r0
   29d68:	b158      	cbz	r0, 29d82 <process_queue+0x2c>
	return chan_send(chan, buf);
   29d6a:	4601      	mov	r1, r0
   29d6c:	4620      	mov	r0, r4
   29d6e:	f7f0 f8ef 	bl	19f50 <chan_send>
		if (err) {
   29d72:	4604      	mov	r4, r0
   29d74:	b118      	cbz	r0, 29d7e <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   29d76:	4629      	mov	r1, r5
   29d78:	4630      	mov	r0, r6
   29d7a:	f002 f897 	bl	2beac <k_queue_prepend>
}
   29d7e:	4620      	mov	r0, r4
   29d80:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   29d82:	f06f 0401 	mvn.w	r4, #1
   29d86:	e7fa      	b.n	29d7e <process_queue+0x28>

00029d88 <bt_att_chan_send_rsp>:
{
   29d88:	b538      	push	{r3, r4, r5, lr}
   29d8a:	4604      	mov	r4, r0
   29d8c:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   29d8e:	f7f0 f8df 	bl	19f50 <chan_send>
	if (err) {
   29d92:	b130      	cbz	r0, 29da2 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   29d94:	4629      	mov	r1, r5
   29d96:	f104 003c 	add.w	r0, r4, #60	; 0x3c
}
   29d9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   29d9e:	f001 baa9 	b.w	2b2f4 <net_buf_put>
}
   29da2:	bd38      	pop	{r3, r4, r5, pc}

00029da4 <att_chan_read>:
{
   29da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29da8:	4680      	mov	r8, r0
   29daa:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   29dac:	4610      	mov	r0, r2
{
   29dae:	4699      	mov	r9, r3
   29db0:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   29db2:	f7ff fec7 	bl	29b44 <net_buf_frags_len>
   29db6:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   29dba:	4283      	cmp	r3, r0
{
   29dbc:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   29dbe:	d97a      	bls.n	29eb6 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   29dc0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   29dc4:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   29dc6:	4630      	mov	r0, r6
   29dc8:	f001 fa9a 	bl	2b300 <net_buf_frag_last>
	size_t len, total = 0;
   29dcc:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   29dd0:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   29dd2:	4630      	mov	r0, r6
   29dd4:	f7ff feb6 	bl	29b44 <net_buf_frags_len>
   29dd8:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   29ddc:	f105 070c 	add.w	r7, r5, #12
   29de0:	1a24      	subs	r4, r4, r0
   29de2:	4638      	mov	r0, r7
   29de4:	f001 faed 	bl	2b3c2 <net_buf_simple_tailroom>
   29de8:	4284      	cmp	r4, r0
   29dea:	d211      	bcs.n	29e10 <att_chan_read+0x6c>
   29dec:	4630      	mov	r0, r6
   29dee:	f7ff fea9 	bl	29b44 <net_buf_frags_len>
   29df2:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   29df6:	1a24      	subs	r4, r4, r0
		if (!len) {
   29df8:	bb34      	cbnz	r4, 29e48 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   29dfa:	7ab0      	ldrb	r0, [r6, #10]
   29dfc:	f7f4 fd92 	bl	1e924 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   29e00:	2200      	movs	r2, #0
   29e02:	2300      	movs	r3, #0
   29e04:	f001 fa42 	bl	2b28c <net_buf_alloc_fixed>
			if (!frag) {
   29e08:	4605      	mov	r5, r0
   29e0a:	b930      	cbnz	r0, 29e1a <att_chan_read+0x76>
	return total;
   29e0c:	4657      	mov	r7, sl
   29e0e:	e02c      	b.n	29e6a <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   29e10:	4638      	mov	r0, r7
   29e12:	f001 fad6 	bl	2b3c2 <net_buf_simple_tailroom>
   29e16:	4604      	mov	r4, r0
   29e18:	e7ee      	b.n	29df8 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   29e1a:	4601      	mov	r1, r0
   29e1c:	4630      	mov	r0, r6
   29e1e:	f001 fa80 	bl	2b322 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   29e22:	4630      	mov	r0, r6
   29e24:	f7ff fe8e 	bl	29b44 <net_buf_frags_len>
   29e28:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   29e2c:	f105 070c 	add.w	r7, r5, #12
   29e30:	1a24      	subs	r4, r4, r0
   29e32:	4638      	mov	r0, r7
   29e34:	f001 fac5 	bl	2b3c2 <net_buf_simple_tailroom>
   29e38:	4284      	cmp	r4, r0
   29e3a:	d21a      	bcs.n	29e72 <att_chan_read+0xce>
   29e3c:	4630      	mov	r0, r6
   29e3e:	f7ff fe81 	bl	29b44 <net_buf_frags_len>
   29e42:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   29e46:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   29e48:	68e9      	ldr	r1, [r5, #12]
   29e4a:	8a2a      	ldrh	r2, [r5, #16]
   29e4c:	f8cd 9000 	str.w	r9, [sp]
   29e50:	f8db 7004 	ldr.w	r7, [fp, #4]
   29e54:	9803      	ldr	r0, [sp, #12]
   29e56:	440a      	add	r2, r1
   29e58:	b2a3      	uxth	r3, r4
   29e5a:	4659      	mov	r1, fp
   29e5c:	47b8      	blx	r7
		if (read < 0) {
   29e5e:	1e07      	subs	r7, r0, #0
   29e60:	da0c      	bge.n	29e7c <att_chan_read+0xd8>
				return total;
   29e62:	f1ba 0f00 	cmp.w	sl, #0
   29e66:	bf18      	it	ne
   29e68:	4657      	movne	r7, sl
}
   29e6a:	4638      	mov	r0, r7
   29e6c:	b005      	add	sp, #20
   29e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29e72:	4638      	mov	r0, r7
   29e74:	f001 faa5 	bl	2b3c2 <net_buf_simple_tailroom>
   29e78:	4604      	mov	r4, r0
   29e7a:	e7e5      	b.n	29e48 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   29e7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   29e7e:	b993      	cbnz	r3, 29ea6 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   29e80:	4639      	mov	r1, r7
   29e82:	f105 000c 	add.w	r0, r5, #12
   29e86:	f001 fa61 	bl	2b34c <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   29e8a:	4630      	mov	r0, r6
   29e8c:	f7ff fe5a 	bl	29b44 <net_buf_frags_len>
   29e90:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   29e94:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   29e96:	4283      	cmp	r3, r0
		total += read;
   29e98:	44ba      	add	sl, r7
		offset += read;
   29e9a:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   29e9e:	d9b5      	bls.n	29e0c <att_chan_read+0x68>
   29ea0:	42a7      	cmp	r7, r4
   29ea2:	d096      	beq.n	29dd2 <att_chan_read+0x2e>
   29ea4:	e7b2      	b.n	29e0c <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   29ea6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   29ea8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   29eaa:	4639      	mov	r1, r7
   29eac:	4628      	mov	r0, r5
   29eae:	4798      	blx	r3
   29eb0:	2800      	cmp	r0, #0
   29eb2:	d1e5      	bne.n	29e80 <att_chan_read+0xdc>
   29eb4:	e7aa      	b.n	29e0c <att_chan_read+0x68>
		return 0;
   29eb6:	2700      	movs	r7, #0
   29eb8:	e7d7      	b.n	29e6a <att_chan_read+0xc6>

00029eba <sys_slist_find_and_remove.isra.0>:
	return list->head;
   29eba:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29ebc:	2200      	movs	r2, #0
   29ebe:	b903      	cbnz	r3, 29ec2 <sys_slist_find_and_remove.isra.0+0x8>
   29ec0:	4770      	bx	lr
   29ec2:	428b      	cmp	r3, r1
   29ec4:	d10f      	bne.n	29ee6 <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   29ec6:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   29ec8:	b93a      	cbnz	r2, 29eda <sys_slist_find_and_remove.isra.0+0x20>
   29eca:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   29ecc:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   29ece:	4291      	cmp	r1, r2
   29ed0:	d100      	bne.n	29ed4 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   29ed2:	6043      	str	r3, [r0, #4]
	parent->next = child;
   29ed4:	2300      	movs	r3, #0
   29ed6:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   29ed8:	4770      	bx	lr
	parent->next = child;
   29eda:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   29edc:	6843      	ldr	r3, [r0, #4]
   29ede:	4299      	cmp	r1, r3
	list->tail = node;
   29ee0:	bf08      	it	eq
   29ee2:	6042      	streq	r2, [r0, #4]
}
   29ee4:	e7f6      	b.n	29ed4 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   29ee6:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29ee8:	681b      	ldr	r3, [r3, #0]
   29eea:	e7e8      	b.n	29ebe <sys_slist_find_and_remove.isra.0+0x4>

00029eec <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   29eec:	2301      	movs	r3, #1
   29eee:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   29ef0:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29ef2:	f3bf 8f5b 	dmb	ish
   29ef6:	e850 2f00 	ldrex	r2, [r0]
   29efa:	401a      	ands	r2, r3
   29efc:	e840 2100 	strex	r1, r2, [r0]
   29f00:	2900      	cmp	r1, #0
   29f02:	d1f8      	bne.n	29ef6 <atomic_clear_bit+0xa>
   29f04:	f3bf 8f5b 	dmb	ish
}
   29f08:	4770      	bx	lr

00029f0a <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   29f0a:	2006      	movs	r0, #6
   29f0c:	4770      	bx	lr

00029f0e <atomic_test_and_set_bit>:
{
   29f0e:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   29f10:	2301      	movs	r3, #1
   29f12:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29f16:	f3bf 8f5b 	dmb	ish
   29f1a:	e850 3f00 	ldrex	r3, [r0]
   29f1e:	ea43 0201 	orr.w	r2, r3, r1
   29f22:	e840 2400 	strex	r4, r2, [r0]
   29f26:	2c00      	cmp	r4, #0
   29f28:	d1f7      	bne.n	29f1a <atomic_test_and_set_bit+0xc>
   29f2a:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   29f2e:	4219      	tst	r1, r3
}
   29f30:	bf14      	ite	ne
   29f32:	2001      	movne	r0, #1
   29f34:	2000      	moveq	r0, #0
   29f36:	bd10      	pop	{r4, pc}

00029f38 <read_cb>:
{
   29f38:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_att_chan *chan = data->chan;
   29f3a:	6816      	ldr	r6, [r2, #0]
{
   29f3c:	4605      	mov	r5, r0
	data->err = 0x00;
   29f3e:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   29f40:	6870      	ldr	r0, [r6, #4]
	data->err = 0x00;
   29f42:	7313      	strb	r3, [r2, #12]
{
   29f44:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   29f46:	4629      	mov	r1, r5
   29f48:	2295      	movs	r2, #149	; 0x95
   29f4a:	f000 fca9 	bl	2a8a0 <bt_gatt_check_perm>
   29f4e:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   29f50:	b980      	cbnz	r0, 29f74 <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   29f52:	e9cd 0000 	strd	r0, r0, [sp]
   29f56:	4629      	mov	r1, r5
   29f58:	88a3      	ldrh	r3, [r4, #4]
   29f5a:	68a2      	ldr	r2, [r4, #8]
   29f5c:	4630      	mov	r0, r6
   29f5e:	f7ff ff21 	bl	29da4 <att_chan_read>
	if (ret < 0) {
   29f62:	2800      	cmp	r0, #0
   29f64:	da09      	bge.n	29f7a <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   29f66:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   29f6a:	bf26      	itte	cs
   29f6c:	4240      	negcs	r0, r0
   29f6e:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   29f70:	200e      	movcc	r0, #14
		data->err = err_to_att(ret);
   29f72:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   29f74:	2000      	movs	r0, #0
}
   29f76:	b002      	add	sp, #8
   29f78:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   29f7a:	2001      	movs	r0, #1
   29f7c:	e7fb      	b.n	29f76 <read_cb+0x3e>

00029f7e <read_vl_cb>:
{
   29f7e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   29f82:	f8d2 8000 	ldr.w	r8, [r2]
{
   29f86:	4606      	mov	r6, r0
	data->err = 0x00;
   29f88:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   29f8a:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   29f8e:	7313      	strb	r3, [r2, #12]
{
   29f90:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   29f92:	4631      	mov	r1, r6
   29f94:	2295      	movs	r2, #149	; 0x95
   29f96:	f000 fc83 	bl	2a8a0 <bt_gatt_check_perm>
   29f9a:	4605      	mov	r5, r0
   29f9c:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   29f9e:	b9e0      	cbnz	r0, 29fda <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   29fa0:	68a0      	ldr	r0, [r4, #8]
   29fa2:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   29fa6:	8a02      	ldrh	r2, [r0, #16]
   29fa8:	1a9b      	subs	r3, r3, r2
   29faa:	2b01      	cmp	r3, #1
   29fac:	dd15      	ble.n	29fda <read_vl_cb+0x5c>
   29fae:	2102      	movs	r1, #2
   29fb0:	300c      	adds	r0, #12
   29fb2:	f001 f9cb 	bl	2b34c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   29fb6:	e9cd 5500 	strd	r5, r5, [sp]
   29fba:	4607      	mov	r7, r0
   29fbc:	88a3      	ldrh	r3, [r4, #4]
   29fbe:	68a2      	ldr	r2, [r4, #8]
   29fc0:	4631      	mov	r1, r6
   29fc2:	4640      	mov	r0, r8
   29fc4:	f7ff feee 	bl	29da4 <att_chan_read>
	if (read < 0) {
   29fc8:	1e03      	subs	r3, r0, #0
   29fca:	da0a      	bge.n	29fe2 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   29fcc:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   29fd0:	bf26      	itte	cs
   29fd2:	425b      	negcs	r3, r3
   29fd4:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   29fd6:	230e      	movcc	r3, #14
		data->err = err_to_att(read);
   29fd8:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   29fda:	2000      	movs	r0, #0
}
   29fdc:	b002      	add	sp, #8
   29fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rsp->len = read;
   29fe2:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   29fe4:	2001      	movs	r0, #1
   29fe6:	e7f9      	b.n	29fdc <read_vl_cb+0x5e>

00029fe8 <bt_att_sent>:
{
   29fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_att *att = chan->att;
   29fea:	f850 4c04 	ldr.w	r4, [r0, #-4]
{
   29fee:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   29ff0:	1f07      	subs	r7, r0, #4
	atomic_clear_bit(chan->flags, ATT_PENDING_SENT);
   29ff2:	2104      	movs	r1, #4
   29ff4:	3030      	adds	r0, #48	; 0x30
   29ff6:	f7ff ff79 	bl	29eec <atomic_clear_bit>
	if (!att) {
   29ffa:	b304      	cbz	r4, 2a03e <bt_att_sent+0x56>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   29ffc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   29ffe:	b98b      	cbnz	r3, 2a024 <bt_att_sent+0x3c>
   2a000:	6863      	ldr	r3, [r4, #4]
   2a002:	b17b      	cbz	r3, 2a024 <bt_att_sent+0x3c>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2a004:	1d20      	adds	r0, r4, #4
   2a006:	f7ff fd93 	bl	29b30 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2a00a:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2a00c:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2a00e:	4638      	mov	r0, r7
   2a010:	f7ff fe89 	bl	29d26 <chan_req_send>
   2a014:	2800      	cmp	r0, #0
   2a016:	da12      	bge.n	2a03e <bt_att_sent+0x56>
	return list->head;
   2a018:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   2a01a:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2a01c:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   2a01e:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   2a020:	b903      	cbnz	r3, 2a024 <bt_att_sent+0x3c>
	list->tail = node;
   2a022:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   2a024:	f105 0138 	add.w	r1, r5, #56	; 0x38
   2a028:	4638      	mov	r0, r7
   2a02a:	f7ff fe94 	bl	29d56 <process_queue>
	if (!err) {
   2a02e:	b130      	cbz	r0, 2a03e <bt_att_sent+0x56>
	(void)process_queue(chan, &att->tx_queue);
   2a030:	f104 010c 	add.w	r1, r4, #12
   2a034:	4638      	mov	r0, r7
}
   2a036:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   2a03a:	f7ff be8c 	b.w	29d56 <process_queue>
}
   2a03e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002a040 <att_req_send_process>:
{
   2a040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   2a044:	6a44      	ldr	r4, [r0, #36]	; 0x24
   2a046:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2a048:	2c00      	cmp	r4, #0
   2a04a:	d03a      	beq.n	2a0c2 <att_req_send_process+0x82>
	return node->next;
   2a04c:	f854 6988 	ldr.w	r6, [r4], #-136
   2a050:	b106      	cbz	r6, 2a054 <att_req_send_process+0x14>
   2a052:	3e88      	subs	r6, #136	; 0x88
{
   2a054:	2300      	movs	r3, #0
   2a056:	461d      	mov	r5, r3
		req = get_first_req_matching_chan(&att->reqs, chan);
   2a058:	f108 0704 	add.w	r7, r8, #4
   2a05c:	e013      	b.n	2a086 <att_req_send_process+0x46>
		if (!req && prev &&
   2a05e:	b1bb      	cbz	r3, 2a090 <att_req_send_process+0x50>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   2a060:	2103      	movs	r1, #3
   2a062:	f104 0034 	add.w	r0, r4, #52	; 0x34
   2a066:	f7ff fd87 	bl	29b78 <atomic_test_bit>
   2a06a:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   2a06c:	f103 0034 	add.w	r0, r3, #52	; 0x34
   2a070:	f7ff fd82 	bl	29b78 <atomic_test_bit>
		if (!req && prev &&
   2a074:	4282      	cmp	r2, r0
   2a076:	d10b      	bne.n	2a090 <att_req_send_process+0x50>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2a078:	b31e      	cbz	r6, 2a0c2 <att_req_send_process+0x82>
   2a07a:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
   2a07e:	b102      	cbz	r2, 2a082 <att_req_send_process+0x42>
   2a080:	3a88      	subs	r2, #136	; 0x88
{
   2a082:	4634      	mov	r4, r6
   2a084:	4616      	mov	r6, r2
		if (chan->req) {
   2a086:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   2a088:	2a00      	cmp	r2, #0
   2a08a:	d1f5      	bne.n	2a078 <att_req_send_process+0x38>
		if (!req && prev &&
   2a08c:	2d00      	cmp	r5, #0
   2a08e:	d0e6      	beq.n	2a05e <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   2a090:	4638      	mov	r0, r7
   2a092:	f7ff fd4d 	bl	29b30 <sys_slist_get>
	if (node) {
   2a096:	4605      	mov	r5, r0
   2a098:	b908      	cbnz	r0, 2a09e <att_req_send_process+0x5e>
   2a09a:	4623      	mov	r3, r4
   2a09c:	e7ec      	b.n	2a078 <att_req_send_process+0x38>
	return chan_req_send(chan, req);
   2a09e:	4601      	mov	r1, r0
   2a0a0:	4620      	mov	r0, r4
   2a0a2:	f7ff fe40 	bl	29d26 <chan_req_send>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   2a0a6:	2800      	cmp	r0, #0
   2a0a8:	da0b      	bge.n	2a0c2 <att_req_send_process+0x82>
	return list->head;
   2a0aa:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   2a0ae:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   2a0b0:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   2a0b4:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   2a0b8:	2b00      	cmp	r3, #0
   2a0ba:	d1ee      	bne.n	2a09a <att_req_send_process+0x5a>
	list->tail = node;
   2a0bc:	f8c8 5008 	str.w	r5, [r8, #8]
}
   2a0c0:	e7eb      	b.n	2a09a <att_req_send_process+0x5a>
}
   2a0c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002a0c6 <bt_att_status>:
{
   2a0c6:	b538      	push	{r3, r4, r5, lr}
   2a0c8:	4605      	mov	r5, r0
   2a0ca:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2a0cc:	2100      	movs	r1, #0
   2a0ce:	f7ff fd53 	bl	29b78 <atomic_test_bit>
   2a0d2:	b1b8      	cbz	r0, 2a104 <bt_att_status+0x3e>
	if (!chan->att) {
   2a0d4:	f855 0c04 	ldr.w	r0, [r5, #-4]
   2a0d8:	b1a0      	cbz	r0, 2a104 <bt_att_status+0x3e>
	if (chan->req) {
   2a0da:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2a0dc:	b993      	cbnz	r3, 2a104 <bt_att_status+0x3e>
	node = sys_slist_get(&chan->att->reqs);
   2a0de:	3004      	adds	r0, #4
   2a0e0:	f7ff fd26 	bl	29b30 <sys_slist_get>
	if (!node) {
   2a0e4:	4604      	mov	r4, r0
   2a0e6:	b168      	cbz	r0, 2a104 <bt_att_status+0x3e>
	return chan_req_send(chan, req);
   2a0e8:	4601      	mov	r1, r0
   2a0ea:	1f28      	subs	r0, r5, #4
   2a0ec:	f7ff fe1b 	bl	29d26 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2a0f0:	2800      	cmp	r0, #0
   2a0f2:	da07      	bge.n	2a104 <bt_att_status+0x3e>
	sys_slist_prepend(&chan->att->reqs, node);
   2a0f4:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   2a0f8:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2a0fa:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   2a0fc:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2a0fe:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2a100:	b902      	cbnz	r2, 2a104 <bt_att_status+0x3e>
	list->tail = node;
   2a102:	609c      	str	r4, [r3, #8]
}
   2a104:	bd38      	pop	{r3, r4, r5, pc}

0002a106 <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   2a106:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   2a108:	6883      	ldr	r3, [r0, #8]
   2a10a:	699b      	ldr	r3, [r3, #24]
   2a10c:	b10b      	cbz	r3, 2a112 <att_sent+0xc>
		chan->ops->sent(chan);
   2a10e:	3004      	adds	r0, #4
   2a110:	4718      	bx	r3
}
   2a112:	4770      	bx	lr

0002a114 <att_unknown>:
{
   2a114:	b510      	push	{r4, lr}
   2a116:	460c      	mov	r4, r1
	if (!err) {
   2a118:	b90a      	cbnz	r2, 2a11e <att_unknown+0xa>
		att_sent(conn, user_data);
   2a11a:	f7ff fff4 	bl	2a106 <att_sent>
	tx_meta_data_free(user_data);
   2a11e:	4620      	mov	r0, r4
}
   2a120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   2a124:	f7ef be46 	b.w	19db4 <tx_meta_data_free>

0002a128 <att_tx_complete>:
{
   2a128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a12c:	4606      	mov	r6, r0
   2a12e:	460d      	mov	r5, r1
	if (!err) {
   2a130:	4614      	mov	r4, r2
   2a132:	b122      	cbz	r2, 2a13e <att_tx_complete+0x16>
}
   2a134:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   2a138:	4608      	mov	r0, r1
   2a13a:	f7ef be3b 	b.w	19db4 <tx_meta_data_free>
		att_sent(conn, user_data);
   2a13e:	f7ff ffe2 	bl	2a106 <att_sent>
	bt_gatt_complete_func_t func = data->func;
   2a142:	68af      	ldr	r7, [r5, #8]
	uint16_t attr_count = data->attr_count;
   2a144:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   2a148:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   2a14c:	4628      	mov	r0, r5
   2a14e:	f7ef fe31 	bl	19db4 <tx_meta_data_free>
	if (!err && func) {
   2a152:	b92f      	cbnz	r7, 2a160 <att_tx_complete+0x38>
}
   2a154:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   2a158:	4649      	mov	r1, r9
   2a15a:	4630      	mov	r0, r6
   2a15c:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   2a15e:	3401      	adds	r4, #1
   2a160:	b2a3      	uxth	r3, r4
   2a162:	4543      	cmp	r3, r8
   2a164:	d3f8      	bcc.n	2a158 <att_tx_complete+0x30>
   2a166:	e7f5      	b.n	2a154 <att_tx_complete+0x2c>

0002a168 <att_req_sent>:
{
   2a168:	b510      	push	{r4, lr}
   2a16a:	460c      	mov	r4, r1
	if (!err) {
   2a16c:	b90a      	cbnz	r2, 2a172 <att_req_sent+0xa>
		att_sent(conn, user_data);
   2a16e:	f7ff ffca 	bl	2a106 <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   2a172:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   2a174:	6b83      	ldr	r3, [r0, #56]	; 0x38
   2a176:	b12b      	cbz	r3, 2a184 <att_req_sent+0x1c>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   2a178:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2a17c:	2300      	movs	r3, #0
   2a17e:	3058      	adds	r0, #88	; 0x58
   2a180:	f7f9 fb02 	bl	23788 <k_work_reschedule>
	tx_meta_data_free(user_data);
   2a184:	4620      	mov	r0, r4
}
   2a186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   2a18a:	f7ef be13 	b.w	19db4 <tx_meta_data_free>

0002a18e <att_cfm_sent>:
{
   2a18e:	b510      	push	{r4, lr}
   2a190:	460c      	mov	r4, r1
	if (!err) {
   2a192:	b90a      	cbnz	r2, 2a198 <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   2a194:	f7ff ffb7 	bl	2a106 <att_sent>
		atomic_clear_bit(chan->flags, ATT_PENDING_CFM);
   2a198:	6820      	ldr	r0, [r4, #0]
   2a19a:	2101      	movs	r1, #1
   2a19c:	3034      	adds	r0, #52	; 0x34
   2a19e:	f7ff fea5 	bl	29eec <atomic_clear_bit>
	tx_meta_data_free(data);
   2a1a2:	4620      	mov	r0, r4
}
   2a1a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   2a1a8:	f7ef be04 	b.w	19db4 <tx_meta_data_free>

0002a1ac <att_rsp_sent>:
{
   2a1ac:	b510      	push	{r4, lr}
   2a1ae:	460c      	mov	r4, r1
	if (!err) {
   2a1b0:	b90a      	cbnz	r2, 2a1b6 <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   2a1b2:	f7ff ffa8 	bl	2a106 <att_sent>
		atomic_clear_bit(chan->flags, ATT_PENDING_RSP);
   2a1b6:	6820      	ldr	r0, [r4, #0]
   2a1b8:	2100      	movs	r1, #0
   2a1ba:	3034      	adds	r0, #52	; 0x34
   2a1bc:	f7ff fe96 	bl	29eec <atomic_clear_bit>
	tx_meta_data_free(data);
   2a1c0:	4620      	mov	r0, r4
}
   2a1c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   2a1c6:	f7ef bdf5 	b.w	19db4 <tx_meta_data_free>

0002a1ca <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2a1ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a1ce:	4688      	mov	r8, r1
   2a1d0:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2a1d2:	2101      	movs	r1, #1
   2a1d4:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2a1d6:	4605      	mov	r5, r0
   2a1d8:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2a1da:	f7f0 f8b7 	bl	1a34c <bt_att_chan_create_pdu>
	if (!buf) {
   2a1de:	4604      	mov	r4, r0
   2a1e0:	b170      	cbz	r0, 2a200 <send_err_rsp.part.0+0x36>
   2a1e2:	2104      	movs	r1, #4
   2a1e4:	300c      	adds	r0, #12
   2a1e6:	f001 f8b1 	bl	2b34c <net_buf_simple_add>
	rsp->request = req;
   2a1ea:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   2a1ee:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   2a1f2:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   2a1f4:	4621      	mov	r1, r4
   2a1f6:	4628      	mov	r0, r5
}
   2a1f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   2a1fc:	f7ff bdc4 	b.w	29d88 <bt_att_chan_send_rsp>
}
   2a200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002a204 <att_write_req>:
{
   2a204:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2a206:	460c      	mov	r4, r1
   2a208:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   2a20a:	f101 000c 	add.w	r0, r1, #12
   2a20e:	f001 f8cc 	bl	2b3aa <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   2a212:	8a22      	ldrh	r2, [r4, #16]
   2a214:	9201      	str	r2, [sp, #4]
   2a216:	68e2      	ldr	r2, [r4, #12]
   2a218:	9200      	str	r2, [sp, #0]
   2a21a:	4603      	mov	r3, r0
   2a21c:	2213      	movs	r2, #19
   2a21e:	2112      	movs	r1, #18
   2a220:	4628      	mov	r0, r5
   2a222:	f7f0 f9b7 	bl	1a594 <att_write_rsp.constprop.0>
}
   2a226:	b003      	add	sp, #12
   2a228:	bd30      	pop	{r4, r5, pc}

0002a22a <att_write_cmd>:
{
   2a22a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2a22c:	460c      	mov	r4, r1
   2a22e:	4605      	mov	r5, r0
   2a230:	f101 000c 	add.w	r0, r1, #12
   2a234:	f001 f8b9 	bl	2b3aa <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   2a238:	8a22      	ldrh	r2, [r4, #16]
   2a23a:	9201      	str	r2, [sp, #4]
   2a23c:	68e2      	ldr	r2, [r4, #12]
   2a23e:	9200      	str	r2, [sp, #0]
   2a240:	2200      	movs	r2, #0
   2a242:	4603      	mov	r3, r0
   2a244:	4611      	mov	r1, r2
   2a246:	4628      	mov	r0, r5
   2a248:	f7f0 f9a4 	bl	1a594 <att_write_rsp.constprop.0>
}
   2a24c:	b003      	add	sp, #12
   2a24e:	bd30      	pop	{r4, r5, pc}

0002a250 <att_read_blob_req>:
{
   2a250:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   2a252:	68ca      	ldr	r2, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   2a254:	8813      	ldrh	r3, [r2, #0]
   2a256:	8852      	ldrh	r2, [r2, #2]
   2a258:	9200      	str	r2, [sp, #0]
   2a25a:	210c      	movs	r1, #12
   2a25c:	220d      	movs	r2, #13
   2a25e:	f7f0 fb5f 	bl	1a920 <att_read_rsp>
}
   2a262:	b003      	add	sp, #12
   2a264:	f85d fb04 	ldr.w	pc, [sp], #4

0002a268 <att_read_req>:
{
   2a268:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   2a26a:	68cb      	ldr	r3, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2a26c:	2200      	movs	r2, #0
   2a26e:	881b      	ldrh	r3, [r3, #0]
   2a270:	9200      	str	r2, [sp, #0]
   2a272:	210a      	movs	r1, #10
   2a274:	220b      	movs	r2, #11
   2a276:	f7f0 fb53 	bl	1a920 <att_read_rsp>
}
   2a27a:	b003      	add	sp, #12
   2a27c:	f85d fb04 	ldr.w	pc, [sp], #4

0002a280 <att_mtu_req>:
{
   2a280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a282:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   2a284:	f850 2b34 	ldr.w	r2, [r0], #52
{
   2a288:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2a28a:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   2a28c:	6817      	ldr	r7, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2a28e:	f7ff fc73 	bl	29b78 <atomic_test_bit>
   2a292:	4604      	mov	r4, r0
   2a294:	b9f0      	cbnz	r0, 2a2d4 <att_mtu_req+0x54>
	mtu_client = sys_le16_to_cpu(req->mtu);
   2a296:	68db      	ldr	r3, [r3, #12]
   2a298:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   2a29a:	2e16      	cmp	r6, #22
   2a29c:	d91c      	bls.n	2a2d8 <att_mtu_req+0x58>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   2a29e:	4638      	mov	r0, r7
   2a2a0:	2202      	movs	r2, #2
   2a2a2:	f7f0 f9db 	bl	1a65c <bt_att_create_pdu>
	if (!pdu) {
   2a2a6:	4607      	mov	r7, r0
   2a2a8:	b1c0      	cbz	r0, 2a2dc <att_mtu_req+0x5c>
	return net_buf_simple_add(&buf->b, len);
   2a2aa:	2102      	movs	r1, #2
   2a2ac:	300c      	adds	r0, #12
   2a2ae:	f001 f84d 	bl	2b34c <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   2a2b2:	2341      	movs	r3, #65	; 0x41
   2a2b4:	7003      	strb	r3, [r0, #0]
   2a2b6:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   2a2b8:	4639      	mov	r1, r7
   2a2ba:	4628      	mov	r0, r5
   2a2bc:	f7ff fd64 	bl	29d88 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2a2c0:	2e41      	cmp	r6, #65	; 0x41
   2a2c2:	bf28      	it	cs
   2a2c4:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   2a2c6:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2a2c8:	836e      	strh	r6, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2a2ca:	856e      	strh	r6, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   2a2cc:	f7ff fce5 	bl	29c9a <att_chan_mtu_updated>
	return 0;
   2a2d0:	4620      	mov	r0, r4
}
   2a2d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   2a2d4:	2006      	movs	r0, #6
   2a2d6:	e7fc      	b.n	2a2d2 <att_mtu_req+0x52>
		return BT_ATT_ERR_INVALID_PDU;
   2a2d8:	2004      	movs	r0, #4
   2a2da:	e7fa      	b.n	2a2d2 <att_mtu_req+0x52>
		return BT_ATT_ERR_UNLIKELY;
   2a2dc:	200e      	movs	r0, #14
   2a2de:	e7f8      	b.n	2a2d2 <att_mtu_req+0x52>

0002a2e0 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2a2e0:	8a0a      	ldrh	r2, [r1, #16]
   2a2e2:	68c9      	ldr	r1, [r1, #12]
   2a2e4:	2300      	movs	r3, #0
   2a2e6:	f7f0 bcc7 	b.w	1ac78 <att_handle_rsp>

0002a2ea <bt_att_encrypt_change>:
{
   2a2ea:	b570      	push	{r4, r5, r6, lr}
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   2a2ec:	4606      	mov	r6, r0
	if (!att_chan->att) {
   2a2ee:	f850 3c04 	ldr.w	r3, [r0, #-4]
	struct bt_conn *conn = le_chan->chan.conn;
   2a2f2:	f856 5904 	ldr.w	r5, [r6], #-4
{
   2a2f6:	4604      	mov	r4, r0
	if (!att_chan->att) {
   2a2f8:	2b00      	cmp	r3, #0
   2a2fa:	d036      	beq.n	2a36a <bt_att_encrypt_change+0x80>
	if (hci_status) {
   2a2fc:	b139      	cbz	r1, 2a30e <bt_att_encrypt_change+0x24>
		if (att_chan->req && att_chan->req->retrying) {
   2a2fe:	6b43      	ldr	r3, [r0, #52]	; 0x34
   2a300:	2b00      	cmp	r3, #0
   2a302:	d032      	beq.n	2a36a <bt_att_encrypt_change+0x80>
   2a304:	7c1b      	ldrb	r3, [r3, #16]
   2a306:	07da      	lsls	r2, r3, #31
   2a308:	d52f      	bpl.n	2a36a <bt_att_encrypt_change+0x80>
		return BT_ATT_ERR_AUTHENTICATION;
   2a30a:	2305      	movs	r3, #5
   2a30c:	e020      	b.n	2a350 <bt_att_encrypt_change+0x66>
	bt_gatt_encrypt_change(conn);
   2a30e:	4628      	mov	r0, r5
   2a310:	f7f2 f992 	bl	1c638 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   2a314:	7a6b      	ldrb	r3, [r5, #9]
   2a316:	2b01      	cmp	r3, #1
   2a318:	d027      	beq.n	2a36a <bt_att_encrypt_change+0x80>
	if (!(att_chan->req && att_chan->req->retrying)) {
   2a31a:	6b65      	ldr	r5, [r4, #52]	; 0x34
   2a31c:	b32d      	cbz	r5, 2a36a <bt_att_encrypt_change+0x80>
   2a31e:	7c2b      	ldrb	r3, [r5, #16]
   2a320:	07db      	lsls	r3, r3, #31
   2a322:	d522      	bpl.n	2a36a <bt_att_encrypt_change+0x80>
	if (!req->encode) {
   2a324:	68eb      	ldr	r3, [r5, #12]
   2a326:	2b00      	cmp	r3, #0
   2a328:	d0ef      	beq.n	2a30a <bt_att_encrypt_change+0x20>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   2a32a:	696a      	ldr	r2, [r5, #20]
   2a32c:	7c69      	ldrb	r1, [r5, #17]
   2a32e:	4630      	mov	r0, r6
   2a330:	f7f0 f80c 	bl	1a34c <bt_att_chan_create_pdu>
	if (!buf) {
   2a334:	4604      	mov	r4, r0
   2a336:	b150      	cbz	r0, 2a34e <bt_att_encrypt_change+0x64>
	if (req->encode(buf, req->len, req->user_data)) {
   2a338:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   2a33c:	68eb      	ldr	r3, [r5, #12]
   2a33e:	4798      	blx	r3
   2a340:	b168      	cbz	r0, 2a35e <bt_att_encrypt_change+0x74>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   2a342:	69a0      	ldr	r0, [r4, #24]
   2a344:	f7ef fd36 	bl	19db4 <tx_meta_data_free>
		net_buf_unref(buf);
   2a348:	4620      	mov	r0, r4
   2a34a:	f7f4 fbad 	bl	1eaa8 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   2a34e:	230e      	movs	r3, #14
		att_handle_rsp(att_chan, NULL, 0, err);
   2a350:	2200      	movs	r2, #0
   2a352:	4630      	mov	r0, r6
   2a354:	4611      	mov	r1, r2
}
   2a356:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   2a35a:	f7f0 bc8d 	b.w	1ac78 <att_handle_rsp>
	if (chan_send(att_chan, buf)) {
   2a35e:	4621      	mov	r1, r4
   2a360:	4630      	mov	r0, r6
   2a362:	f7ef fdf5 	bl	19f50 <chan_send>
   2a366:	2800      	cmp	r0, #0
   2a368:	d1eb      	bne.n	2a342 <bt_att_encrypt_change+0x58>
}
   2a36a:	bd70      	pop	{r4, r5, r6, pc}

0002a36c <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   2a36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a36e:	460d      	mov	r5, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   2a370:	f7ef fe64 	bl	1a03c <att_get>
	if (!att) {
   2a374:	4604      	mov	r4, r0
   2a376:	b940      	cbnz	r0, 2a38a <bt_att_send+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   2a378:	69a8      	ldr	r0, [r5, #24]
   2a37a:	f7ef fd1b 	bl	19db4 <tx_meta_data_free>
		net_buf_unref(buf);
   2a37e:	4628      	mov	r0, r5
   2a380:	f7f4 fb92 	bl	1eaa8 <net_buf_unref>
		return -ENOTCONN;
   2a384:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   2a388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   2a38a:	f100 060c 	add.w	r6, r0, #12
   2a38e:	4629      	mov	r1, r5
   2a390:	4630      	mov	r0, r6
   2a392:	f000 ffaf 	bl	2b2f4 <net_buf_put>
	return list->head;
   2a396:	6a65      	ldr	r5, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2a398:	b14d      	cbz	r5, 2a3ae <bt_att_send+0x42>
	return node->next;
   2a39a:	f855 4988 	ldr.w	r4, [r5], #-136
   2a39e:	b104      	cbz	r4, 2a3a2 <bt_att_send+0x36>
   2a3a0:	3c88      	subs	r4, #136	; 0x88
		err = process_queue(chan, &att->tx_queue);
   2a3a2:	4631      	mov	r1, r6
   2a3a4:	4628      	mov	r0, r5
   2a3a6:	f7ff fcd6 	bl	29d56 <process_queue>
		if (!err) {
   2a3aa:	4603      	mov	r3, r0
   2a3ac:	b980      	cbnz	r0, 2a3d0 <bt_att_send+0x64>
	return 0;
   2a3ae:	2000      	movs	r0, #0
   2a3b0:	e7ea      	b.n	2a388 <bt_att_send+0x1c>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   2a3b2:	2103      	movs	r1, #3
   2a3b4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   2a3b8:	f7ff fbde 	bl	29b78 <atomic_test_bit>
   2a3bc:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   2a3be:	f105 0034 	add.w	r0, r5, #52	; 0x34
   2a3c2:	f7ff fbd9 	bl	29b78 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   2a3c6:	4287      	cmp	r7, r0
   2a3c8:	f06f 0301 	mvn.w	r3, #1
   2a3cc:	d107      	bne.n	2a3de <bt_att_send+0x72>
   2a3ce:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2a3d0:	2c00      	cmp	r4, #0
   2a3d2:	d0ec      	beq.n	2a3ae <bt_att_send+0x42>
   2a3d4:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   2a3d8:	b922      	cbnz	r2, 2a3e4 <bt_att_send+0x78>
		if (err == -ENOENT && prev &&
   2a3da:	3302      	adds	r3, #2
   2a3dc:	d0e9      	beq.n	2a3b2 <bt_att_send+0x46>
{
   2a3de:	4625      	mov	r5, r4
   2a3e0:	4614      	mov	r4, r2
   2a3e2:	e7de      	b.n	2a3a2 <bt_att_send+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2a3e4:	3a88      	subs	r2, #136	; 0x88
   2a3e6:	e7f8      	b.n	2a3da <bt_att_send+0x6e>

0002a3e8 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   2a3e8:	b510      	push	{r4, lr}
   2a3ea:	460c      	mov	r4, r1
	LOG_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   2a3ec:	f7ef fe26 	bl	1a03c <att_get>
	if (!att) {
   2a3f0:	b160      	cbz	r0, 2a40c <bt_att_req_send+0x24>
	parent->next = child;
   2a3f2:	2300      	movs	r3, #0
   2a3f4:	6023      	str	r3, [r4, #0]
	return list->tail;
   2a3f6:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   2a3f8:	b92b      	cbnz	r3, 2a406 <bt_att_req_send+0x1e>
	list->head = node;
   2a3fa:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   2a3fe:	f7ff fe1f 	bl	2a040 <att_req_send_process>

	return 0;
   2a402:	2000      	movs	r0, #0
}
   2a404:	bd10      	pop	{r4, pc}
	parent->next = child;
   2a406:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2a408:	6084      	str	r4, [r0, #8]
}
   2a40a:	e7f8      	b.n	2a3fe <bt_att_req_send+0x16>
		return -ENOTCONN;
   2a40c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2a410:	e7f8      	b.n	2a404 <bt_att_req_send+0x1c>

0002a412 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   2a412:	2001      	movs	r0, #1
   2a414:	4770      	bx	lr

0002a416 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   2a416:	b510      	push	{r4, lr}
	struct bt_att *att = att_get(conn);
   2a418:	f7ef fe10 	bl	1a03c <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   2a41c:	b150      	cbz	r0, 2a434 <bt_att_clear_out_of_sync_sent+0x1e>
	return list->head;
   2a41e:	6a44      	ldr	r4, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2a420:	b144      	cbz	r4, 2a434 <bt_att_clear_out_of_sync_sent+0x1e>
   2a422:	3c88      	subs	r4, #136	; 0x88
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
   2a424:	f104 0034 	add.w	r0, r4, #52	; 0x34
   2a428:	2105      	movs	r1, #5
   2a42a:	f7ff fd5f 	bl	29eec <atomic_clear_bit>
	return node->next;
   2a42e:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
   2a432:	e7f5      	b.n	2a420 <bt_att_clear_out_of_sync_sent+0xa>
	}
}
   2a434:	bd10      	pop	{r4, pc}

0002a436 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   2a436:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   2a438:	2104      	movs	r1, #4
   2a43a:	f7ff fb6e 	bl	29b1a <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   2a43e:	b128      	cbz	r0, 2a44c <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   2a440:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   2a444:	2105      	movs	r1, #5
   2a446:	3030      	adds	r0, #48	; 0x30
   2a448:	f7ff bb96 	b.w	29b78 <atomic_test_bit>
}
   2a44c:	bd08      	pop	{r3, pc}

0002a44e <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   2a44e:	6980      	ldr	r0, [r0, #24]

	data->func = func;
	data->user_data = user_data;
   2a450:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   2a454:	2201      	movs	r2, #1
   2a456:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   2a458:	7403      	strb	r3, [r0, #16]
}
   2a45a:	4770      	bx	lr

0002a45c <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   2a45c:	6010      	str	r0, [r2, #0]
}
   2a45e:	2000      	movs	r0, #0
   2a460:	4770      	bx	lr

0002a462 <gatt_ccc_changed>:
{
   2a462:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   2a464:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   2a466:	895a      	ldrh	r2, [r3, #10]
   2a468:	428a      	cmp	r2, r1
   2a46a:	d003      	beq.n	2a474 <gatt_ccc_changed+0x12>
		ccc->value = value;
   2a46c:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   2a46e:	68db      	ldr	r3, [r3, #12]
   2a470:	b103      	cbz	r3, 2a474 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   2a472:	4718      	bx	r3
}
   2a474:	4770      	bx	lr

0002a476 <gatt_indicate_rsp>:
{
   2a476:	b510      	push	{r4, lr}
   2a478:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   2a47a:	68a3      	ldr	r3, [r4, #8]
{
   2a47c:	460a      	mov	r2, r1
	if (params->func) {
   2a47e:	b10b      	cbz	r3, 2a484 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   2a480:	4621      	mov	r1, r4
   2a482:	4798      	blx	r3
	params->_ref--;
   2a484:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2a486:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   2a488:	3b01      	subs	r3, #1
   2a48a:	b2db      	uxtb	r3, r3
   2a48c:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2a48e:	b122      	cbz	r2, 2a49a <gatt_indicate_rsp+0x24>
   2a490:	b91b      	cbnz	r3, 2a49a <gatt_indicate_rsp+0x24>
		params->destroy(params);
   2a492:	4620      	mov	r0, r4
}
   2a494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   2a498:	4710      	bx	r2
}
   2a49a:	bd10      	pop	{r4, pc}

0002a49c <match_uuid>:
	data->attr = attr;
   2a49c:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2a49e:	8091      	strh	r1, [r2, #4]
}
   2a4a0:	2000      	movs	r0, #0
   2a4a2:	4770      	bx	lr

0002a4a4 <ccc_set_cb>:
}
   2a4a4:	2000      	movs	r0, #0
   2a4a6:	4770      	bx	lr

0002a4a8 <gen_hash_m>:
{
   2a4a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2a4aa:	6807      	ldr	r7, [r0, #0]
   2a4ac:	783d      	ldrb	r5, [r7, #0]
{
   2a4ae:	b089      	sub	sp, #36	; 0x24
   2a4b0:	4606      	mov	r6, r0
   2a4b2:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2a4b4:	b9dd      	cbnz	r5, 2a4ee <gen_hash_m+0x46>
	switch (u16->val) {
   2a4b6:	887b      	ldrh	r3, [r7, #2]
   2a4b8:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   2a4bc:	d004      	beq.n	2a4c8 <gen_hash_m+0x20>
   2a4be:	d810      	bhi.n	2a4e2 <gen_hash_m+0x3a>
   2a4c0:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   2a4c4:	2b03      	cmp	r3, #3
   2a4c6:	d812      	bhi.n	2a4ee <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   2a4c8:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2a4cc:	2202      	movs	r2, #2
   2a4ce:	f10d 010a 	add.w	r1, sp, #10
   2a4d2:	4620      	mov	r0, r4
   2a4d4:	f7fe fb9b 	bl	28c0e <tc_cmac_update>
   2a4d8:	b968      	cbnz	r0, 2a4f6 <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   2a4da:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   2a4de:	65a2      	str	r2, [r4, #88]	; 0x58
   2a4e0:	e006      	b.n	2a4f0 <gen_hash_m+0x48>
	switch (u16->val) {
   2a4e2:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   2a4e6:	33ff      	adds	r3, #255	; 0xff
   2a4e8:	b29b      	uxth	r3, r3
   2a4ea:	2b04      	cmp	r3, #4
   2a4ec:	d91e      	bls.n	2a52c <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   2a4ee:	2501      	movs	r5, #1
}
   2a4f0:	4628      	mov	r0, r5
   2a4f2:	b009      	add	sp, #36	; 0x24
   2a4f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   2a4f6:	887b      	ldrh	r3, [r7, #2]
   2a4f8:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2a4fc:	2202      	movs	r2, #2
   2a4fe:	f10d 010a 	add.w	r1, sp, #10
   2a502:	4620      	mov	r0, r4
   2a504:	f7fe fb83 	bl	28c0e <tc_cmac_update>
   2a508:	2800      	cmp	r0, #0
   2a50a:	d0e6      	beq.n	2a4da <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   2a50c:	2000      	movs	r0, #0
   2a50e:	9000      	str	r0, [sp, #0]
   2a510:	aa03      	add	r2, sp, #12
   2a512:	6877      	ldr	r7, [r6, #4]
   2a514:	2313      	movs	r3, #19
   2a516:	4631      	mov	r1, r6
   2a518:	47b8      	blx	r7
		if (len < 0) {
   2a51a:	1e02      	subs	r2, r0, #0
   2a51c:	dbdf      	blt.n	2a4de <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   2a51e:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2a520:	4620      	mov	r0, r4
   2a522:	f7fe fb74 	bl	28c0e <tc_cmac_update>
   2a526:	2800      	cmp	r0, #0
   2a528:	d1e1      	bne.n	2a4ee <gen_hash_m+0x46>
   2a52a:	e7d6      	b.n	2a4da <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   2a52c:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2a530:	2202      	movs	r2, #2
   2a532:	f10d 010a 	add.w	r1, sp, #10
   2a536:	4620      	mov	r0, r4
   2a538:	f7fe fb69 	bl	28c0e <tc_cmac_update>
   2a53c:	2800      	cmp	r0, #0
   2a53e:	d0cc      	beq.n	2a4da <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   2a540:	887b      	ldrh	r3, [r7, #2]
   2a542:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2a546:	2202      	movs	r2, #2
   2a548:	f10d 010a 	add.w	r1, sp, #10
   2a54c:	e7e8      	b.n	2a520 <gen_hash_m+0x78>

0002a54e <bt_addr_le_eq>:
{
   2a54e:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   2a550:	2207      	movs	r2, #7
   2a552:	f7fe fcc2 	bl	28eda <memcmp>
}
   2a556:	fab0 f080 	clz	r0, r0
   2a55a:	0940      	lsrs	r0, r0, #5
   2a55c:	bd08      	pop	{r3, pc}

0002a55e <ccc_find_cfg>:
{
   2a55e:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   2a560:	7803      	ldrb	r3, [r0, #0]
   2a562:	4293      	cmp	r3, r2
{
   2a564:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   2a566:	d105      	bne.n	2a574 <ccc_find_cfg+0x16>
		    bt_addr_le_eq(&ccc->cfg[i].peer, addr)) {
   2a568:	3001      	adds	r0, #1
   2a56a:	f7ff fff0 	bl	2a54e <bt_addr_le_eq>
		if (id == ccc->cfg[i].id &&
   2a56e:	b108      	cbz	r0, 2a574 <ccc_find_cfg+0x16>
			return &ccc->cfg[i];
   2a570:	4620      	mov	r0, r4
}
   2a572:	bd10      	pop	{r4, pc}
	return NULL;
   2a574:	2000      	movs	r0, #0
   2a576:	e7fc      	b.n	2a572 <ccc_find_cfg+0x14>

0002a578 <atomic_or>:
{
   2a578:	b510      	push	{r4, lr}
   2a57a:	4603      	mov	r3, r0
}
   2a57c:	f3bf 8f5b 	dmb	ish
   2a580:	e853 0f00 	ldrex	r0, [r3]
   2a584:	ea40 0201 	orr.w	r2, r0, r1
   2a588:	e843 2400 	strex	r4, r2, [r3]
   2a58c:	2c00      	cmp	r4, #0
   2a58e:	d1f7      	bne.n	2a580 <atomic_or+0x8>
   2a590:	f3bf 8f5b 	dmb	ish
   2a594:	bd10      	pop	{r4, pc}

0002a596 <atomic_and>:
{
   2a596:	b510      	push	{r4, lr}
   2a598:	4603      	mov	r3, r0
}
   2a59a:	f3bf 8f5b 	dmb	ish
   2a59e:	e853 0f00 	ldrex	r0, [r3]
   2a5a2:	ea00 0201 	and.w	r2, r0, r1
   2a5a6:	e843 2400 	strex	r4, r2, [r3]
   2a5aa:	2c00      	cmp	r4, #0
   2a5ac:	d1f7      	bne.n	2a59e <atomic_and+0x8>
   2a5ae:	f3bf 8f5b 	dmb	ish
   2a5b2:	bd10      	pop	{r4, pc}

0002a5b4 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   2a5b4:	2207      	movs	r2, #7
   2a5b6:	f7fe bcb7 	b.w	28f28 <memcpy>

0002a5ba <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a5ba:	f3bf 8f5b 	dmb	ish
   2a5be:	6800      	ldr	r0, [r0, #0]
   2a5c0:	f3bf 8f5b 	dmb	ish
}
   2a5c4:	4770      	bx	lr

0002a5c6 <z_log_msg_static_create.constprop.0>:
   2a5c6:	2300      	movs	r3, #0
   2a5c8:	f7e9 bafc 	b.w	13bc4 <z_impl_z_log_msg_static_create>

0002a5cc <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   2a5cc:	2a02      	cmp	r2, #2
{
   2a5ce:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   2a5d0:	d108      	bne.n	2a5e4 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   2a5d2:	2300      	movs	r3, #0
   2a5d4:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2a5d8:	461a      	mov	r2, r3
   2a5da:	7a00      	ldrb	r0, [r0, #8]
   2a5dc:	f7f0 fe0e 	bl	1b1fc <sc_save>
}
   2a5e0:	2002      	movs	r0, #2
   2a5e2:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   2a5e4:	f7f0 ff4e 	bl	1b484 <sc_clear>
   2a5e8:	e7fa      	b.n	2a5e0 <sc_ccc_cfg_write+0x14>

0002a5ea <read_appearance>:
{
   2a5ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2a5ec:	4615      	mov	r5, r2
   2a5ee:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   2a5f2:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2a5f4:	f7fe fe9b 	bl	2932e <bt_get_appearance>
	if (offset > value_len) {
   2a5f8:	2e02      	cmp	r6, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2a5fa:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   2a5fe:	d80e      	bhi.n	2a61e <read_appearance+0x34>
	len = MIN(buf_len, value_len - offset);
   2a600:	f1c6 0402 	rsb	r4, r6, #2
   2a604:	42bc      	cmp	r4, r7
   2a606:	bfa8      	it	ge
   2a608:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2a60a:	f10d 0306 	add.w	r3, sp, #6
   2a60e:	4622      	mov	r2, r4
   2a610:	1999      	adds	r1, r3, r6
   2a612:	4628      	mov	r0, r5
   2a614:	f7fe fc88 	bl	28f28 <memcpy>
}
   2a618:	4620      	mov	r0, r4
   2a61a:	b003      	add	sp, #12
   2a61c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2a61e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2a622:	e7f9      	b.n	2a618 <read_appearance+0x2e>

0002a624 <read_name>:
{
   2a624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a628:	4698      	mov	r8, r3
   2a62a:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   2a62e:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   2a630:	f7ed f8c6 	bl	177c0 <bt_get_name>
   2a634:	4607      	mov	r7, r0
				 strlen(name));
   2a636:	f7fe fc20 	bl	28e7a <strlen>
	if (offset > value_len) {
   2a63a:	b283      	uxth	r3, r0
   2a63c:	42b3      	cmp	r3, r6
   2a63e:	d30c      	bcc.n	2a65a <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   2a640:	1b9c      	subs	r4, r3, r6
   2a642:	4544      	cmp	r4, r8
   2a644:	bfa8      	it	ge
   2a646:	4644      	movge	r4, r8
   2a648:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   2a64a:	4622      	mov	r2, r4
   2a64c:	19b9      	adds	r1, r7, r6
   2a64e:	4628      	mov	r0, r5
   2a650:	f7fe fc6a 	bl	28f28 <memcpy>
}
   2a654:	4620      	mov	r0, r4
   2a656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2a65a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2a65e:	e7f9      	b.n	2a654 <read_name+0x30>

0002a660 <cf_read>:
{
   2a660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2a662:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   2a664:	2300      	movs	r3, #0
{
   2a666:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   2a66a:	f88d 3004 	strb.w	r3, [sp, #4]
{
   2a66e:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   2a670:	f7f0 fc64 	bl	1af3c <find_cf_cfg>
	if (cfg) {
   2a674:	b128      	cbz	r0, 2a682 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   2a676:	f100 0108 	add.w	r1, r0, #8
   2a67a:	2201      	movs	r2, #1
   2a67c:	a801      	add	r0, sp, #4
   2a67e:	f7fe fc53 	bl	28f28 <memcpy>
	if (offset > value_len) {
   2a682:	2e01      	cmp	r6, #1
   2a684:	d80d      	bhi.n	2a6a2 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   2a686:	f1c6 0401 	rsb	r4, r6, #1
   2a68a:	42bc      	cmp	r4, r7
   2a68c:	bfa8      	it	ge
   2a68e:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2a690:	ab01      	add	r3, sp, #4
   2a692:	4622      	mov	r2, r4
   2a694:	1999      	adds	r1, r3, r6
   2a696:	4628      	mov	r0, r5
   2a698:	f7fe fc46 	bl	28f28 <memcpy>
}
   2a69c:	4620      	mov	r0, r4
   2a69e:	b003      	add	sp, #12
   2a6a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2a6a2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2a6a6:	e7f9      	b.n	2a69c <cf_read+0x3c>

0002a6a8 <bt_gatt_attr_read_service>:
{
   2a6a8:	b513      	push	{r0, r1, r4, lr}
	struct bt_uuid *uuid = attr->user_data;
   2a6aa:	68c9      	ldr	r1, [r1, #12]
{
   2a6ac:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   2a6ae:	780a      	ldrb	r2, [r1, #0]
{
   2a6b0:	461c      	mov	r4, r3
   2a6b2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	if (uuid->type == BT_UUID_TYPE_16) {
   2a6b6:	b992      	cbnz	r2, 2a6de <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2a6b8:	884a      	ldrh	r2, [r1, #2]
   2a6ba:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   2a6be:	2b02      	cmp	r3, #2
   2a6c0:	d818      	bhi.n	2a6f4 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   2a6c2:	f1c3 0202 	rsb	r2, r3, #2
   2a6c6:	4294      	cmp	r4, r2
   2a6c8:	bfa8      	it	ge
   2a6ca:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   2a6cc:	4622      	mov	r2, r4
   2a6ce:	f10d 0106 	add.w	r1, sp, #6
   2a6d2:	4419      	add	r1, r3
   2a6d4:	f7fe fc28 	bl	28f28 <memcpy>
}
   2a6d8:	4620      	mov	r0, r4
   2a6da:	b002      	add	sp, #8
   2a6dc:	bd10      	pop	{r4, pc}
	if (offset > value_len) {
   2a6de:	2b10      	cmp	r3, #16
				 BT_UUID_128(uuid)->val, 16);
   2a6e0:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   2a6e4:	d806      	bhi.n	2a6f4 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   2a6e6:	f1c3 0210 	rsb	r2, r3, #16
   2a6ea:	4294      	cmp	r4, r2
   2a6ec:	bfa8      	it	ge
   2a6ee:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   2a6f0:	4622      	mov	r2, r4
   2a6f2:	e7ee      	b.n	2a6d2 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2a6f4:	f06f 0406 	mvn.w	r4, #6
   2a6f8:	e7ee      	b.n	2a6d8 <bt_gatt_attr_read_service+0x30>

0002a6fa <bt_gatt_attr_read_ccc>:
{
   2a6fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   2a6fc:	68c9      	ldr	r1, [r1, #12]
{
   2a6fe:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   2a702:	4615      	mov	r5, r2
   2a704:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   2a706:	f7f0 fc3b 	bl	1af80 <find_ccc_cfg>
	if (cfg) {
   2a70a:	b100      	cbz	r0, 2a70e <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   2a70c:	8900      	ldrh	r0, [r0, #8]
   2a70e:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   2a712:	2e02      	cmp	r6, #2
   2a714:	d80e      	bhi.n	2a734 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   2a716:	f1c6 0402 	rsb	r4, r6, #2
   2a71a:	42bc      	cmp	r4, r7
   2a71c:	bfa8      	it	ge
   2a71e:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2a720:	f10d 0306 	add.w	r3, sp, #6
   2a724:	4622      	mov	r2, r4
   2a726:	1999      	adds	r1, r3, r6
   2a728:	4628      	mov	r0, r5
   2a72a:	f7fe fbfd 	bl	28f28 <memcpy>
}
   2a72e:	4620      	mov	r0, r4
   2a730:	b003      	add	sp, #12
   2a732:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2a734:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2a738:	e7f9      	b.n	2a72e <bt_gatt_attr_read_ccc+0x34>

0002a73a <set_change_aware_no_store>:
{
   2a73a:	b508      	push	{r3, lr}
		changed = !atomic_test_and_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2a73c:	300c      	adds	r0, #12
	if (aware) {
   2a73e:	b129      	cbz	r1, 2a74c <set_change_aware_no_store+0x12>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   2a740:	2101      	movs	r1, #1
   2a742:	f7ff ff19 	bl	2a578 <atomic_or>
		changed = !atomic_test_and_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2a746:	43c0      	mvns	r0, r0
   2a748:	4008      	ands	r0, r1
}
   2a74a:	bd08      	pop	{r3, pc}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2a74c:	f06f 0101 	mvn.w	r1, #1
   2a750:	f7ff ff21 	bl	2a596 <atomic_and>
	return (old & mask) != 0;
   2a754:	f000 0001 	and.w	r0, r0, #1
   2a758:	e7f7      	b.n	2a74a <set_change_aware_no_store+0x10>

0002a75a <set_change_aware>:
{
   2a75a:	b510      	push	{r4, lr}
   2a75c:	4604      	mov	r4, r0
	bool changed = set_change_aware_no_store(cfg, aware);
   2a75e:	f7ff ffec 	bl	2a73a <set_change_aware_no_store>
	if (changed) {
   2a762:	b138      	cbz	r0, 2a774 <set_change_aware+0x1a>
		gatt_delayed_store_enqueue(cfg->id, &cfg->peer, DELAYED_STORE_CF);
   2a764:	4621      	mov	r1, r4
   2a766:	2201      	movs	r2, #1
}
   2a768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		gatt_delayed_store_enqueue(cfg->id, &cfg->peer, DELAYED_STORE_CF);
   2a76c:	f811 0b01 	ldrb.w	r0, [r1], #1
   2a770:	f7f0 bc1a 	b.w	1afa8 <gatt_delayed_store_enqueue>
}
   2a774:	bd10      	pop	{r4, pc}

0002a776 <sc_restore_rsp>:
{
   2a776:	b538      	push	{r3, r4, r5, lr}
   2a778:	4604      	mov	r4, r0
   2a77a:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   2a77c:	f7ff fe49 	bl	2a412 <bt_att_fixed_chan_only>
   2a780:	b148      	cbz	r0, 2a796 <sc_restore_rsp+0x20>
		cfg = find_cf_cfg(conn);
   2a782:	4620      	mov	r0, r4
   2a784:	f7f0 fbda 	bl	1af3c <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   2a788:	b128      	cbz	r0, 2a796 <sc_restore_rsp+0x20>
   2a78a:	7a03      	ldrb	r3, [r0, #8]
   2a78c:	07db      	lsls	r3, r3, #31
   2a78e:	d502      	bpl.n	2a796 <sc_restore_rsp+0x20>
			set_change_aware(cfg, true);
   2a790:	2101      	movs	r1, #1
   2a792:	f7ff ffe2 	bl	2a75a <set_change_aware>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   2a796:	b985      	cbnz	r5, 2a7ba <sc_restore_rsp+0x44>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2a798:	7a20      	ldrb	r0, [r4, #8]
   2a79a:	f104 0188 	add.w	r1, r4, #136	; 0x88
   2a79e:	f7f0 fb6b 	bl	1ae78 <find_sc_cfg>
		if (sc_cfg) {
   2a7a2:	4604      	mov	r4, r0
   2a7a4:	b148      	cbz	r0, 2a7ba <sc_restore_rsp+0x44>
	memset(&cfg->data, 0, sizeof(cfg->data));
   2a7a6:	4629      	mov	r1, r5
   2a7a8:	2204      	movs	r2, #4
   2a7aa:	3008      	adds	r0, #8
   2a7ac:	f7fe fbc7 	bl	28f3e <memset>
		sc_store(cfg);
   2a7b0:	4620      	mov	r0, r4
}
   2a7b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		sc_store(cfg);
   2a7b6:	f7f0 bced 	b.w	1b194 <sc_store>
}
   2a7ba:	bd38      	pop	{r3, r4, r5, pc}

0002a7bc <bt_gatt_attr_read>:
{
   2a7bc:	b510      	push	{r4, lr}
   2a7be:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   2a7c2:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   2a7c6:	42a1      	cmp	r1, r4
{
   2a7c8:	4610      	mov	r0, r2
	if (offset > value_len) {
   2a7ca:	d80b      	bhi.n	2a7e4 <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   2a7cc:	1a64      	subs	r4, r4, r1
   2a7ce:	429c      	cmp	r4, r3
   2a7d0:	bfa8      	it	ge
   2a7d2:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   2a7d4:	9b03      	ldr	r3, [sp, #12]
   2a7d6:	b2a4      	uxth	r4, r4
   2a7d8:	4622      	mov	r2, r4
   2a7da:	4419      	add	r1, r3
   2a7dc:	f7fe fba4 	bl	28f28 <memcpy>
}
   2a7e0:	4620      	mov	r0, r4
   2a7e2:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2a7e4:	f06f 0406 	mvn.w	r4, #6
   2a7e8:	e7fa      	b.n	2a7e0 <bt_gatt_attr_read+0x24>

0002a7ea <bt_gatt_attr_value_handle>:
{
   2a7ea:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2a7ec:	4604      	mov	r4, r0
   2a7ee:	b910      	cbnz	r0, 2a7f6 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   2a7f0:	2000      	movs	r0, #0
}
   2a7f2:	b002      	add	sp, #8
   2a7f4:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2a7f6:	2300      	movs	r3, #0
   2a7f8:	f88d 3004 	strb.w	r3, [sp, #4]
   2a7fc:	6800      	ldr	r0, [r0, #0]
   2a7fe:	f642 0303 	movw	r3, #10243	; 0x2803
   2a802:	a901      	add	r1, sp, #4
   2a804:	f8ad 3006 	strh.w	r3, [sp, #6]
   2a808:	f7fe fc25 	bl	29056 <bt_uuid_cmp>
   2a80c:	2800      	cmp	r0, #0
   2a80e:	d1ef      	bne.n	2a7f0 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   2a810:	68e3      	ldr	r3, [r4, #12]
   2a812:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2a814:	2800      	cmp	r0, #0
   2a816:	d1ec      	bne.n	2a7f2 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2a818:	4620      	mov	r0, r4
   2a81a:	f7f1 f97d 	bl	1bb18 <bt_gatt_attr_get_handle>
   2a81e:	3001      	adds	r0, #1
   2a820:	b280      	uxth	r0, r0
	return handle;
   2a822:	e7e6      	b.n	2a7f2 <bt_gatt_attr_value_handle+0x8>

0002a824 <bt_gatt_attr_read_chrc>:
{
   2a824:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   2a826:	68cc      	ldr	r4, [r1, #12]
{
   2a828:	b087      	sub	sp, #28
   2a82a:	4608      	mov	r0, r1
   2a82c:	461f      	mov	r7, r3
	pdu.properties = chrc->properties;
   2a82e:	79a3      	ldrb	r3, [r4, #6]
   2a830:	f88d 3004 	strb.w	r3, [sp, #4]
{
   2a834:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   2a838:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2a83a:	f7ff ffd6 	bl	2a7ea <bt_gatt_attr_value_handle>
   2a83e:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2a842:	6821      	ldr	r1, [r4, #0]
   2a844:	780b      	ldrb	r3, [r1, #0]
   2a846:	b99b      	cbnz	r3, 2a870 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2a848:	884b      	ldrh	r3, [r1, #2]
   2a84a:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   2a84e:	2405      	movs	r4, #5
	if (offset > value_len) {
   2a850:	42b4      	cmp	r4, r6
   2a852:	d315      	bcc.n	2a880 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   2a854:	1ba4      	subs	r4, r4, r6
   2a856:	42bc      	cmp	r4, r7
   2a858:	bfa8      	it	ge
   2a85a:	463c      	movge	r4, r7
   2a85c:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   2a85e:	ab01      	add	r3, sp, #4
   2a860:	4622      	mov	r2, r4
   2a862:	1999      	adds	r1, r3, r6
   2a864:	4628      	mov	r0, r5
   2a866:	f7fe fb5f 	bl	28f28 <memcpy>
}
   2a86a:	4620      	mov	r0, r4
   2a86c:	b007      	add	sp, #28
   2a86e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   2a870:	2210      	movs	r2, #16
   2a872:	3101      	adds	r1, #1
   2a874:	f10d 0007 	add.w	r0, sp, #7
   2a878:	f7fe fb56 	bl	28f28 <memcpy>
		value_len += 16U;
   2a87c:	2413      	movs	r4, #19
   2a87e:	e7e7      	b.n	2a850 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2a880:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   2a884:	e7f1      	b.n	2a86a <bt_gatt_attr_read_chrc+0x46>

0002a886 <bt_gatt_foreach_attr>:
{
   2a886:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2a888:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2a88c:	2300      	movs	r3, #0
   2a88e:	9300      	str	r3, [sp, #0]
   2a890:	461a      	mov	r2, r3
   2a892:	f7f1 f971 	bl	1bb78 <bt_gatt_foreach_attr_type>
}
   2a896:	b005      	add	sp, #20
   2a898:	f85d fb04 	ldr.w	pc, [sp], #4

0002a89c <db_hash_process>:
	do_db_hash();
   2a89c:	f7f1 ba4a 	b.w	1bd34 <do_db_hash>

0002a8a0 <bt_gatt_check_perm>:
{
   2a8a0:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   2a8a2:	07d4      	lsls	r4, r2, #31
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2a8a4:	8a4b      	ldrh	r3, [r1, #18]
{
   2a8a6:	4605      	mov	r5, r0
	if ((mask & BT_GATT_PERM_READ) &&
   2a8a8:	d504      	bpl.n	2a8b4 <bt_gatt_check_perm+0x14>
   2a8aa:	f013 0f95 	tst.w	r3, #149	; 0x95
   2a8ae:	d02b      	beq.n	2a908 <bt_gatt_check_perm+0x68>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2a8b0:	6848      	ldr	r0, [r1, #4]
   2a8b2:	b348      	cbz	r0, 2a908 <bt_gatt_check_perm+0x68>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2a8b4:	0790      	lsls	r0, r2, #30
   2a8b6:	d504      	bpl.n	2a8c2 <bt_gatt_check_perm+0x22>
   2a8b8:	f413 7f95 	tst.w	r3, #298	; 0x12a
   2a8bc:	d026      	beq.n	2a90c <bt_gatt_check_perm+0x6c>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2a8be:	6889      	ldr	r1, [r1, #8]
   2a8c0:	b321      	cbz	r1, 2a90c <bt_gatt_check_perm+0x6c>
	mask &= attr->perm;
   2a8c2:	ea02 0403 	and.w	r4, r2, r3
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   2a8c6:	f014 0f3c 	tst.w	r4, #60	; 0x3c
   2a8ca:	d00d      	beq.n	2a8e8 <bt_gatt_check_perm+0x48>
		if (!conn->encrypt) {
   2a8cc:	7aeb      	ldrb	r3, [r5, #11]
   2a8ce:	b92b      	cbnz	r3, 2a8dc <bt_gatt_check_perm+0x3c>
			if (bt_conn_ltk_present(conn)) {
   2a8d0:	4628      	mov	r0, r5
   2a8d2:	f7fe ffff 	bl	298d4 <bt_conn_ltk_present>
   2a8d6:	b9d8      	cbnz	r0, 2a910 <bt_gatt_check_perm+0x70>
				return BT_ATT_ERR_AUTHENTICATION;
   2a8d8:	2005      	movs	r0, #5
}
   2a8da:	bd38      	pop	{r3, r4, r5, pc}
		if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   2a8dc:	f014 0f30 	tst.w	r4, #48	; 0x30
   2a8e0:	d104      	bne.n	2a8ec <bt_gatt_check_perm+0x4c>
		if (mask & BT_GATT_PERM_LESC_MASK) {
   2a8e2:	f414 7fc0 	tst.w	r4, #384	; 0x180
   2a8e6:	d107      	bne.n	2a8f8 <bt_gatt_check_perm+0x58>
	return 0;
   2a8e8:	2000      	movs	r0, #0
   2a8ea:	e7f6      	b.n	2a8da <bt_gatt_check_perm+0x3a>
			if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   2a8ec:	4628      	mov	r0, r5
   2a8ee:	f7ff f838 	bl	29962 <bt_conn_get_security>
   2a8f2:	2802      	cmp	r0, #2
   2a8f4:	d8f5      	bhi.n	2a8e2 <bt_gatt_check_perm+0x42>
   2a8f6:	e7ef      	b.n	2a8d8 <bt_gatt_check_perm+0x38>
			const struct bt_keys *keys = conn->le.keys;
   2a8f8:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
			if (!keys || (keys->flags & BT_KEYS_SC) == 0) {
   2a8fc:	2b00      	cmp	r3, #0
   2a8fe:	d0eb      	beq.n	2a8d8 <bt_gatt_check_perm+0x38>
   2a900:	7b5b      	ldrb	r3, [r3, #13]
   2a902:	06db      	lsls	r3, r3, #27
   2a904:	d5e8      	bpl.n	2a8d8 <bt_gatt_check_perm+0x38>
   2a906:	e7ef      	b.n	2a8e8 <bt_gatt_check_perm+0x48>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   2a908:	2002      	movs	r0, #2
   2a90a:	e7e6      	b.n	2a8da <bt_gatt_check_perm+0x3a>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2a90c:	2003      	movs	r0, #3
   2a90e:	e7e4      	b.n	2a8da <bt_gatt_check_perm+0x3a>
				return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2a910:	200f      	movs	r0, #15
   2a912:	e7e2      	b.n	2a8da <bt_gatt_check_perm+0x3a>

0002a914 <bt_gatt_is_subscribed>:
{
   2a914:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2a918:	7b43      	ldrb	r3, [r0, #13]
   2a91a:	2b07      	cmp	r3, #7
{
   2a91c:	4605      	mov	r5, r0
   2a91e:	460c      	mov	r4, r1
   2a920:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   2a922:	d110      	bne.n	2a946 <bt_gatt_is_subscribed+0x32>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   2a924:	2300      	movs	r3, #0
   2a926:	f88d 300c 	strb.w	r3, [sp, #12]
   2a92a:	6820      	ldr	r0, [r4, #0]
   2a92c:	f642 0303 	movw	r3, #10243	; 0x2803
   2a930:	a903      	add	r1, sp, #12
   2a932:	f8ad 300e 	strh.w	r3, [sp, #14]
   2a936:	f7fe fb8e 	bl	29056 <bt_uuid_cmp>
   2a93a:	b960      	cbnz	r0, 2a956 <bt_gatt_is_subscribed+0x42>
		if (!(chrc->properties &
   2a93c:	68e3      	ldr	r3, [r4, #12]
   2a93e:	799b      	ldrb	r3, [r3, #6]
   2a940:	f013 0f30 	tst.w	r3, #48	; 0x30
   2a944:	d103      	bne.n	2a94e <bt_gatt_is_subscribed+0x3a>
		return false;
   2a946:	2000      	movs	r0, #0
}
   2a948:	b004      	add	sp, #16
   2a94a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   2a94e:	4620      	mov	r0, r4
   2a950:	f7f1 face 	bl	1bef0 <bt_gatt_attr_next>
   2a954:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   2a956:	2300      	movs	r3, #0
   2a958:	6820      	ldr	r0, [r4, #0]
   2a95a:	f88d 300c 	strb.w	r3, [sp, #12]
   2a95e:	a903      	add	r1, sp, #12
   2a960:	f642 1302 	movw	r3, #10498	; 0x2902
   2a964:	f8ad 300e 	strh.w	r3, [sp, #14]
   2a968:	f7fe fb75 	bl	29056 <bt_uuid_cmp>
   2a96c:	b118      	cbz	r0, 2a976 <bt_gatt_is_subscribed+0x62>
		attr = bt_gatt_attr_next(attr);
   2a96e:	4620      	mov	r0, r4
   2a970:	f7f1 fabe 	bl	1bef0 <bt_gatt_attr_next>
   2a974:	4604      	mov	r4, r0
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   2a976:	2600      	movs	r6, #0
   2a978:	f642 1802 	movw	r8, #10498	; 0x2902
   2a97c:	6820      	ldr	r0, [r4, #0]
   2a97e:	f88d 6000 	strb.w	r6, [sp]
   2a982:	4669      	mov	r1, sp
   2a984:	f8ad 8002 	strh.w	r8, [sp, #2]
   2a988:	f7fe fb65 	bl	29056 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2a98c:	b9d8      	cbnz	r0, 2a9c6 <bt_gatt_is_subscribed+0xb2>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   2a98e:	2300      	movs	r3, #0
   2a990:	6820      	ldr	r0, [r4, #0]
   2a992:	f88d 300c 	strb.w	r3, [sp, #12]
   2a996:	a903      	add	r1, sp, #12
   2a998:	f642 1302 	movw	r3, #10498	; 0x2902
   2a99c:	f8ad 300e 	strh.w	r3, [sp, #14]
   2a9a0:	f7fe fb59 	bl	29056 <bt_uuid_cmp>
   2a9a4:	2800      	cmp	r0, #0
   2a9a6:	d1ce      	bne.n	2a946 <bt_gatt_is_subscribed+0x32>
	ccc = attr->user_data;
   2a9a8:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   2a9aa:	4622      	mov	r2, r4
   2a9ac:	4628      	mov	r0, r5
   2a9ae:	f812 1b01 	ldrb.w	r1, [r2], #1
   2a9b2:	f7fe ffd8 	bl	29966 <bt_conn_is_peer_addr_le>
   2a9b6:	2800      	cmp	r0, #0
   2a9b8:	d0c5      	beq.n	2a946 <bt_gatt_is_subscribed+0x32>
   2a9ba:	8923      	ldrh	r3, [r4, #8]
   2a9bc:	421f      	tst	r7, r3
   2a9be:	bf14      	ite	ne
   2a9c0:	2001      	movne	r0, #1
   2a9c2:	2000      	moveq	r0, #0
   2a9c4:	e7c0      	b.n	2a948 <bt_gatt_is_subscribed+0x34>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   2a9c6:	6820      	ldr	r0, [r4, #0]
   2a9c8:	f88d 6004 	strb.w	r6, [sp, #4]
   2a9cc:	f642 0303 	movw	r3, #10243	; 0x2803
   2a9d0:	a901      	add	r1, sp, #4
   2a9d2:	f8ad 3006 	strh.w	r3, [sp, #6]
   2a9d6:	f7fe fb3e 	bl	29056 <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   2a9da:	2800      	cmp	r0, #0
   2a9dc:	d0d7      	beq.n	2a98e <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2a9de:	6820      	ldr	r0, [r4, #0]
   2a9e0:	f88d 6008 	strb.w	r6, [sp, #8]
   2a9e4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2a9e8:	a902      	add	r1, sp, #8
   2a9ea:	f8ad 300a 	strh.w	r3, [sp, #10]
   2a9ee:	f7fe fb32 	bl	29056 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   2a9f2:	2800      	cmp	r0, #0
   2a9f4:	d0cb      	beq.n	2a98e <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   2a9f6:	6820      	ldr	r0, [r4, #0]
   2a9f8:	f88d 600c 	strb.w	r6, [sp, #12]
   2a9fc:	f642 0301 	movw	r3, #10241	; 0x2801
   2aa00:	a903      	add	r1, sp, #12
   2aa02:	f8ad 300e 	strh.w	r3, [sp, #14]
   2aa06:	f7fe fb26 	bl	29056 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2aa0a:	2800      	cmp	r0, #0
   2aa0c:	d0bf      	beq.n	2a98e <bt_gatt_is_subscribed+0x7a>
		attr = bt_gatt_attr_next(attr);
   2aa0e:	4620      	mov	r0, r4
   2aa10:	f7f1 fa6e 	bl	1bef0 <bt_gatt_attr_next>
		if (!attr) {
   2aa14:	4604      	mov	r4, r0
   2aa16:	2800      	cmp	r0, #0
   2aa18:	d1b0      	bne.n	2a97c <bt_gatt_is_subscribed+0x68>
   2aa1a:	e794      	b.n	2a946 <bt_gatt_is_subscribed+0x32>

0002aa1c <bt_gatt_change_aware>:
{
   2aa1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2aa20:	4605      	mov	r5, r0
   2aa22:	4688      	mov	r8, r1
	cfg = find_cf_cfg(conn);
   2aa24:	f7f0 fa8a 	bl	1af3c <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2aa28:	4604      	mov	r4, r0
   2aa2a:	b1e0      	cbz	r0, 2aa66 <bt_gatt_change_aware+0x4a>
   2aa2c:	7a03      	ldrb	r3, [r0, #8]
   2aa2e:	07db      	lsls	r3, r3, #31
   2aa30:	d519      	bpl.n	2aa66 <bt_gatt_change_aware+0x4a>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2aa32:	f100 070c 	add.w	r7, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2aa36:	4638      	mov	r0, r7
   2aa38:	f7ff fdbf 	bl	2a5ba <atomic_get>
   2aa3c:	f010 0601 	ands.w	r6, r0, #1
   2aa40:	d111      	bne.n	2aa66 <bt_gatt_change_aware+0x4a>
	if (!req) {
   2aa42:	f1b8 0f00 	cmp.w	r8, #0
   2aa46:	d00f      	beq.n	2aa68 <bt_gatt_change_aware+0x4c>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2aa48:	f06f 0102 	mvn.w	r1, #2
   2aa4c:	4638      	mov	r0, r7
   2aa4e:	f7ff fda2 	bl	2a596 <atomic_and>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2aa52:	f010 0f02 	tst.w	r0, #2
		bt_att_clear_out_of_sync_sent(conn);
   2aa56:	4628      	mov	r0, r5
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2aa58:	d009      	beq.n	2aa6e <bt_gatt_change_aware+0x52>
		bt_att_clear_out_of_sync_sent(conn);
   2aa5a:	f7ff fcdc 	bl	2a416 <bt_att_clear_out_of_sync_sent>
		set_change_aware(cfg, true);
   2aa5e:	2101      	movs	r1, #1
   2aa60:	4620      	mov	r0, r4
   2aa62:	f7ff fe7a 	bl	2a75a <set_change_aware>
		return true;
   2aa66:	2601      	movs	r6, #1
}
   2aa68:	4630      	mov	r0, r6
   2aa6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   2aa6e:	f7ff fcd0 	bl	2a412 <bt_att_fixed_chan_only>
   2aa72:	2800      	cmp	r0, #0
   2aa74:	d0f8      	beq.n	2aa68 <bt_gatt_change_aware+0x4c>
   2aa76:	4628      	mov	r0, r5
   2aa78:	f7ff fcdd 	bl	2a436 <bt_att_out_of_sync_sent_on_fixed>
   2aa7c:	2800      	cmp	r0, #0
   2aa7e:	d0f3      	beq.n	2aa68 <bt_gatt_change_aware+0x4c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2aa80:	f06f 0102 	mvn.w	r1, #2
   2aa84:	4638      	mov	r0, r7
   2aa86:	f7ff fd86 	bl	2a596 <atomic_and>
		bt_att_clear_out_of_sync_sent(conn);
   2aa8a:	4628      	mov	r0, r5
   2aa8c:	e7e5      	b.n	2aa5a <bt_gatt_change_aware+0x3e>

0002aa8e <delayed_store>:
{
   2aa8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2aa90:	f1a0 0447 	sub.w	r4, r0, #71	; 0x47
   2aa94:	1c47      	adds	r7, r0, #1
		if (bt_addr_le_is_bonded(el->id, &el->peer)) {
   2aa96:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   2aa9a:	4621      	mov	r1, r4
   2aa9c:	f7fe fc49 	bl	29332 <bt_addr_le_is_bonded>
   2aaa0:	b380      	cbz	r0, 2ab04 <delayed_store+0x76>
			    atomic_test_and_clear_bit(el->flags, DELAYED_STORE_CCC)) {
   2aaa2:	1de6      	adds	r6, r4, #7
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2aaa4:	f06f 0101 	mvn.w	r1, #1
   2aaa8:	4630      	mov	r0, r6
   2aaaa:	f7ff fd74 	bl	2a596 <atomic_and>
			if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_STORE_ON_WRITE) &&
   2aaae:	07c2      	lsls	r2, r0, #31
   2aab0:	d504      	bpl.n	2aabc <delayed_store+0x2e>
				bt_gatt_store_ccc(el->id, &el->peer);
   2aab2:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   2aab6:	4621      	mov	r1, r4
   2aab8:	f7f1 fdd6 	bl	1c668 <bt_gatt_store_ccc>
   2aabc:	f06f 0102 	mvn.w	r1, #2
   2aac0:	4630      	mov	r0, r6
   2aac2:	f7ff fd68 	bl	2a596 <atomic_and>
			if (IS_ENABLED(CONFIG_BT_SETTINGS_CF_STORE_ON_WRITE) &&
   2aac6:	0783      	lsls	r3, r0, #30
   2aac8:	d504      	bpl.n	2aad4 <delayed_store+0x46>
				bt_gatt_store_cf(el->id, &el->peer);
   2aaca:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   2aace:	4621      	mov	r1, r4
   2aad0:	f7f0 fd06 	bl	1b4e0 <bt_gatt_store_cf.isra.0>
			if (atomic_get(el->flags) == 0) {
   2aad4:	4630      	mov	r0, r6
   2aad6:	f7ff fd70 	bl	2a5ba <atomic_get>
   2aada:	4605      	mov	r5, r0
   2aadc:	b990      	cbnz	r0, 2ab04 <delayed_store+0x76>
	if (el) {
   2aade:	2c01      	cmp	r4, #1
   2aae0:	d010      	beq.n	2ab04 <delayed_store+0x76>
		el->id = 0;
   2aae2:	f804 0c01 	strb.w	r0, [r4, #-1]
		memset(&el->peer, 0, sizeof(el->peer));
   2aae6:	4601      	mov	r1, r0
   2aae8:	2207      	movs	r2, #7
   2aaea:	4620      	mov	r0, r4
   2aaec:	f7fe fa27 	bl	28f3e <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2aaf0:	f3bf 8f5b 	dmb	ish
   2aaf4:	e856 3f00 	ldrex	r3, [r6]
   2aaf8:	e846 5200 	strex	r2, r5, [r6]
   2aafc:	2a00      	cmp	r2, #0
   2aafe:	d1f9      	bne.n	2aaf4 <delayed_store+0x66>
   2ab00:	f3bf 8f5b 	dmb	ish
	for (size_t i = 0; i < ARRAY_SIZE(gatt_delayed_store.peer_list); i++) {
   2ab04:	340c      	adds	r4, #12
   2ab06:	42bc      	cmp	r4, r7
   2ab08:	d1c5      	bne.n	2aa96 <delayed_store+0x8>
}
   2ab0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002ab0c <bt_gatt_pairing_complete>:
{
   2ab0c:	b538      	push	{r3, r4, r5, lr}
   2ab0e:	4604      	mov	r4, r0
	if (bonded) {
   2ab10:	b159      	cbz	r1, 2ab2a <bt_gatt_pairing_complete+0x1e>
		bt_gatt_store_ccc(conn->id, &(conn->le.dst));
   2ab12:	f100 0588 	add.w	r5, r0, #136	; 0x88
   2ab16:	4629      	mov	r1, r5
   2ab18:	7a00      	ldrb	r0, [r0, #8]
   2ab1a:	f7f1 fda5 	bl	1c668 <bt_gatt_store_ccc>
		bt_gatt_store_cf(conn->id, &conn->le.dst);
   2ab1e:	7a20      	ldrb	r0, [r4, #8]
   2ab20:	4629      	mov	r1, r5
}
   2ab22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_store_cf(conn->id, &conn->le.dst);
   2ab26:	f7f0 bcdb 	b.w	1b4e0 <bt_gatt_store_cf.isra.0>
}
   2ab2a:	bd38      	pop	{r3, r4, r5, pc}

0002ab2c <smp_pairing_rsp>:
}
   2ab2c:	2007      	movs	r0, #7
   2ab2e:	4770      	bx	lr

0002ab30 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2ab30:	f3bf 8f5b 	dmb	ish
   2ab34:	6800      	ldr	r0, [r0, #0]
   2ab36:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2ab3a:	4108      	asrs	r0, r1
}
   2ab3c:	f000 0001 	and.w	r0, r0, #1
   2ab40:	4770      	bx	lr

0002ab42 <update_keys_check>:
{
   2ab42:	b510      	push	{r4, lr}
   2ab44:	4603      	mov	r3, r0
	if (!keys ||
   2ab46:	b1d9      	cbz	r1, 2ab80 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   2ab48:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   2ab4a:	f010 0f24 	tst.w	r0, #36	; 0x24
   2ab4e:	d017      	beq.n	2ab80 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   2ab50:	7d1a      	ldrb	r2, [r3, #20]
   2ab52:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   2ab54:	7b09      	ldrb	r1, [r1, #12]
   2ab56:	42a2      	cmp	r2, r4
   2ab58:	bf28      	it	cs
   2ab5a:	4622      	movcs	r2, r4
   2ab5c:	4291      	cmp	r1, r2
   2ab5e:	d901      	bls.n	2ab64 <update_keys_check+0x22>
			return false;
   2ab60:	2000      	movs	r0, #0
}
   2ab62:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2ab64:	0682      	lsls	r2, r0, #26
   2ab66:	d404      	bmi.n	2ab72 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   2ab68:	7a18      	ldrb	r0, [r3, #8]
   2ab6a:	3800      	subs	r0, #0
   2ab6c:	bf18      	it	ne
   2ab6e:	2001      	movne	r0, #1
   2ab70:	e7f7      	b.n	2ab62 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2ab72:	2105      	movs	r1, #5
   2ab74:	1d18      	adds	r0, r3, #4
   2ab76:	f7ff ffdb 	bl	2ab30 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2ab7a:	2800      	cmp	r0, #0
   2ab7c:	d1f4      	bne.n	2ab68 <update_keys_check+0x26>
   2ab7e:	e7ef      	b.n	2ab60 <update_keys_check+0x1e>
	return true;
   2ab80:	2001      	movs	r0, #1
   2ab82:	e7ee      	b.n	2ab62 <update_keys_check+0x20>

0002ab84 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2ab84:	2301      	movs	r3, #1
   2ab86:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2ab88:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2ab8a:	f3bf 8f5b 	dmb	ish
   2ab8e:	e850 2f00 	ldrex	r2, [r0]
   2ab92:	401a      	ands	r2, r3
   2ab94:	e840 2100 	strex	r1, r2, [r0]
   2ab98:	2900      	cmp	r1, #0
   2ab9a:	d1f8      	bne.n	2ab8e <atomic_clear_bit+0xa>
   2ab9c:	f3bf 8f5b 	dmb	ish
}
   2aba0:	4770      	bx	lr

0002aba2 <smp_security_request>:
static uint8_t smp_security_request(struct bt_smp *smp, struct net_buf *buf)
   2aba2:	2007      	movs	r0, #7
   2aba4:	4770      	bx	lr

0002aba6 <z_log_msg_static_create.constprop.0>:
   2aba6:	2300      	movs	r3, #0
   2aba8:	f7e9 b80c 	b.w	13bc4 <z_impl_z_log_msg_static_create>

0002abac <smp_chan_get>:
{
   2abac:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   2abae:	2106      	movs	r1, #6
   2abb0:	f7fe ffb3 	bl	29b1a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   2abb4:	b918      	cbnz	r0, 2abbe <smp_chan_get+0x12>
}
   2abb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2abba:	f7f1 bf4f 	b.w	1ca5c <smp_chan_get.part.0>
   2abbe:	38ec      	subs	r0, #236	; 0xec
   2abc0:	bd08      	pop	{r3, pc}

0002abc2 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2abc2:	2301      	movs	r3, #1
   2abc4:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2abc6:	f3bf 8f5b 	dmb	ish
   2abca:	e850 2f00 	ldrex	r2, [r0]
   2abce:	431a      	orrs	r2, r3
   2abd0:	e840 2100 	strex	r1, r2, [r0]
   2abd4:	2900      	cmp	r1, #0
   2abd6:	d1f8      	bne.n	2abca <atomic_set_bit+0x8>
   2abd8:	f3bf 8f5b 	dmb	ish
}
   2abdc:	4770      	bx	lr

0002abde <smp_keypress_notif>:
{
   2abde:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   2abe0:	210e      	movs	r1, #14
   2abe2:	f7ff ffee 	bl	2abc2 <atomic_set_bit>
}
   2abe6:	2000      	movs	r0, #0
   2abe8:	bd08      	pop	{r3, pc}

0002abea <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2abea:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2abec:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2abee:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2abf0:	4628      	mov	r0, r5
   2abf2:	2104      	movs	r1, #4
   2abf4:	f7ff ff9c 	bl	2ab30 <atomic_test_bit>
   2abf8:	b168      	cbz	r0, 2ac16 <smp_create_pdu.constprop.0+0x2c>
		timeout = K_NO_WAIT;
   2abfa:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2abfc:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   2abfe:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2ac00:	4608      	mov	r0, r1
   2ac02:	f7fe ff64 	bl	29ace <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   2ac06:	4604      	mov	r4, r0
   2ac08:	b940      	cbnz	r0, 2ac1c <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   2ac0a:	2104      	movs	r1, #4
   2ac0c:	4628      	mov	r0, r5
   2ac0e:	f7ff ffd8 	bl	2abc2 <atomic_set_bit>
}
   2ac12:	4620      	mov	r0, r4
   2ac14:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   2ac16:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2ac1a:	e7ef      	b.n	2abfc <smp_create_pdu.constprop.0+0x12>
   2ac1c:	2101      	movs	r1, #1
   2ac1e:	300c      	adds	r0, #12
   2ac20:	f000 fb94 	bl	2b34c <net_buf_simple_add>
	hdr->code = op;
   2ac24:	7006      	strb	r6, [r0, #0]
	return buf;
   2ac26:	e7f4      	b.n	2ac12 <smp_create_pdu.constprop.0+0x28>

0002ac28 <send_pairing_rsp>:
{
   2ac28:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2ac2a:	2102      	movs	r1, #2
{
   2ac2c:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2ac2e:	f7ff ffdc 	bl	2abea <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   2ac32:	4604      	mov	r4, r0
   2ac34:	b178      	cbz	r0, 2ac56 <send_pairing_rsp+0x2e>
   2ac36:	2106      	movs	r1, #6
   2ac38:	300c      	adds	r0, #12
   2ac3a:	f000 fb87 	bl	2b34c <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   2ac3e:	2206      	movs	r2, #6
   2ac40:	f105 0111 	add.w	r1, r5, #17
   2ac44:	f7fe f970 	bl	28f28 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   2ac48:	4628      	mov	r0, r5
   2ac4a:	2200      	movs	r2, #0
   2ac4c:	4621      	mov	r1, r4
   2ac4e:	f7f1 fe9b 	bl	1c988 <smp_send.constprop.0>
	return 0;
   2ac52:	2000      	movs	r0, #0
}
   2ac54:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2ac56:	2008      	movs	r0, #8
   2ac58:	e7fc      	b.n	2ac54 <send_pairing_rsp+0x2c>

0002ac5a <smp_send_pairing_random>:
{
   2ac5a:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2ac5c:	2104      	movs	r1, #4
{
   2ac5e:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2ac60:	f7ff ffc3 	bl	2abea <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   2ac64:	4604      	mov	r4, r0
   2ac66:	b178      	cbz	r0, 2ac88 <smp_send_pairing_random+0x2e>
   2ac68:	2110      	movs	r1, #16
   2ac6a:	300c      	adds	r0, #12
   2ac6c:	f000 fb6e 	bl	2b34c <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   2ac70:	2210      	movs	r2, #16
   2ac72:	f105 0127 	add.w	r1, r5, #39	; 0x27
   2ac76:	f7fe f957 	bl	28f28 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   2ac7a:	4628      	mov	r0, r5
   2ac7c:	2200      	movs	r2, #0
   2ac7e:	4621      	mov	r1, r4
   2ac80:	f7f1 fe82 	bl	1c988 <smp_send.constprop.0>
	return 0;
   2ac84:	2000      	movs	r0, #0
}
   2ac86:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2ac88:	2008      	movs	r0, #8
   2ac8a:	e7fc      	b.n	2ac86 <smp_send_pairing_random+0x2c>

0002ac8c <smp_dhkey_check>:
{
   2ac8c:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   2ac8e:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   2ac92:	78db      	ldrb	r3, [r3, #3]
   2ac94:	2b01      	cmp	r3, #1
{
   2ac96:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   2ac98:	d114      	bne.n	2acc4 <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   2ac9a:	68ce      	ldr	r6, [r1, #12]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   2ac9c:	1d05      	adds	r5, r0, #4
   2ac9e:	2110      	movs	r1, #16
   2aca0:	4628      	mov	r0, r5
   2aca2:	f7ff ff6f 	bl	2ab84 <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   2aca6:	4631      	mov	r1, r6
   2aca8:	2210      	movs	r2, #16
   2acaa:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   2acae:	f7fe f93b 	bl	28f28 <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   2acb2:	2107      	movs	r1, #7
   2acb4:	4628      	mov	r0, r5
   2acb6:	f7ff ff3b 	bl	2ab30 <atomic_test_bit>
   2acba:	b128      	cbz	r0, 2acc8 <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2acbc:	2109      	movs	r1, #9
   2acbe:	4628      	mov	r0, r5
   2acc0:	f7ff ff7f 	bl	2abc2 <atomic_set_bit>
}
   2acc4:	2000      	movs	r0, #0
   2acc6:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2acc8:	210a      	movs	r1, #10
   2acca:	4628      	mov	r0, r5
   2accc:	f7ff ff30 	bl	2ab30 <atomic_test_bit>
   2acd0:	2800      	cmp	r0, #0
   2acd2:	d1f3      	bne.n	2acbc <smp_dhkey_check+0x30>
		return compute_and_check_and_send_periph_dhcheck(smp);
   2acd4:	4620      	mov	r0, r4
}
   2acd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
   2acda:	f7f2 bacd 	b.w	1d278 <compute_and_check_and_send_periph_dhcheck>

0002acde <smp_signing_info>:
static uint8_t smp_signing_info(struct bt_smp *smp, struct net_buf *buf)
   2acde:	2007      	movs	r0, #7
   2ace0:	4770      	bx	lr

0002ace2 <atomic_test_and_clear_bit>:
{
   2ace2:	b530      	push	{r4, r5, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2ace4:	2301      	movs	r3, #1
   2ace6:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2acea:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2acec:	f3bf 8f5b 	dmb	ish
   2acf0:	e850 3f00 	ldrex	r3, [r0]
   2acf4:	ea03 0402 	and.w	r4, r3, r2
   2acf8:	e840 4500 	strex	r5, r4, [r0]
   2acfc:	2d00      	cmp	r5, #0
   2acfe:	d1f7      	bne.n	2acf0 <atomic_test_and_clear_bit+0xe>
   2ad00:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2ad04:	4219      	tst	r1, r3
}
   2ad06:	bf14      	ite	ne
   2ad08:	2001      	movne	r0, #1
   2ad0a:	2000      	moveq	r0, #0
   2ad0c:	bd30      	pop	{r4, r5, pc}

0002ad0e <smp_reset>:
{
   2ad0e:	b538      	push	{r3, r4, r5, lr}
   2ad10:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2ad12:	1d03      	adds	r3, r0, #4
   2ad14:	2500      	movs	r5, #0
   2ad16:	f3bf 8f5b 	dmb	ish
   2ad1a:	e853 2f00 	ldrex	r2, [r3]
   2ad1e:	e843 5100 	strex	r1, r5, [r3]
   2ad22:	2900      	cmp	r1, #0
   2ad24:	d1f9      	bne.n	2ad1a <smp_reset+0xc>
   2ad26:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   2ad2a:	f504 7090 	add.w	r0, r4, #288	; 0x120
   2ad2e:	f001 f9a0 	bl	2c072 <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   2ad32:	7225      	strb	r5, [r4, #8]
   2ad34:	f3bf 8f5b 	dmb	ish
   2ad38:	e854 3f00 	ldrex	r3, [r4]
   2ad3c:	e844 5200 	strex	r2, r5, [r4]
   2ad40:	2a00      	cmp	r2, #0
   2ad42:	d1f9      	bne.n	2ad38 <smp_reset+0x2a>
   2ad44:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2ad48:	4620      	mov	r0, r4
   2ad4a:	2101      	movs	r1, #1
}
   2ad4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2ad50:	f7ff bf37 	b.w	2abc2 <atomic_set_bit>

0002ad54 <smp_c1>:
{
   2ad54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2ad58:	b089      	sub	sp, #36	; 0x24
   2ad5a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   2ad5e:	4699      	mov	r9, r3
	p1[0] = ia->type;
   2ad60:	783b      	ldrb	r3, [r7, #0]
{
   2ad62:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   2ad64:	f88d 3000 	strb.w	r3, [sp]
{
   2ad68:	460c      	mov	r4, r1
	p1[1] = ra->type;
   2ad6a:	f898 3000 	ldrb.w	r3, [r8]
   2ad6e:	f88d 3001 	strb.w	r3, [sp, #1]
{
   2ad72:	4611      	mov	r1, r2
   2ad74:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   2ad76:	2207      	movs	r2, #7
   2ad78:	f10d 0002 	add.w	r0, sp, #2
   2ad7c:	f7fe f8d4 	bl	28f28 <memcpy>
	memcpy(p1 + 9, pres, 7);
   2ad80:	2207      	movs	r2, #7
   2ad82:	4649      	mov	r1, r9
   2ad84:	f10d 0009 	add.w	r0, sp, #9
   2ad88:	f7fe f8ce 	bl	28f28 <memcpy>
	while (len--) {
   2ad8c:	f104 0010 	add.w	r0, r4, #16
	memcpy(p1 + 9, pres, 7);
   2ad90:	462a      	mov	r2, r5
   2ad92:	4669      	mov	r1, sp
		*r++ = *p++ ^ *q++;
   2ad94:	f814 3b01 	ldrb.w	r3, [r4], #1
   2ad98:	f811 cb01 	ldrb.w	ip, [r1], #1
	while (len--) {
   2ad9c:	4284      	cmp	r4, r0
		*r++ = *p++ ^ *q++;
   2ad9e:	ea83 030c 	eor.w	r3, r3, ip
   2ada2:	f802 3b01 	strb.w	r3, [r2], #1
	while (len--) {
   2ada6:	d1f5      	bne.n	2ad94 <smp_c1+0x40>
	err = bt_encrypt_le(k, enc_data, enc_data);
   2ada8:	462a      	mov	r2, r5
   2adaa:	4629      	mov	r1, r5
   2adac:	4630      	mov	r0, r6
   2adae:	f000 fddd 	bl	2b96c <bt_encrypt_le>
	if (err) {
   2adb2:	4604      	mov	r4, r0
   2adb4:	bb20      	cbnz	r0, 2ae00 <smp_c1+0xac>
	memcpy(p2, ra->a.val, 6);
   2adb6:	2206      	movs	r2, #6
   2adb8:	f108 0101 	add.w	r1, r8, #1
   2adbc:	a804      	add	r0, sp, #16
   2adbe:	f7fe f8b3 	bl	28f28 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   2adc2:	2206      	movs	r2, #6
   2adc4:	1c79      	adds	r1, r7, #1
   2adc6:	f10d 0016 	add.w	r0, sp, #22
   2adca:	f7fe f8ad 	bl	28f28 <memcpy>
	(void)memset(p2 + 12, 0, 4);
   2adce:	2204      	movs	r2, #4
   2add0:	4621      	mov	r1, r4
   2add2:	a807      	add	r0, sp, #28
   2add4:	f7fe f8b3 	bl	28f3e <memset>
	while (len--) {
   2add8:	f105 0010 	add.w	r0, r5, #16
	(void)memset(p2 + 12, 0, 4);
   2addc:	462a      	mov	r2, r5
   2adde:	ab04      	add	r3, sp, #16
		*r++ = *p++ ^ *q++;
   2ade0:	f812 1b01 	ldrb.w	r1, [r2], #1
   2ade4:	f813 4b01 	ldrb.w	r4, [r3], #1
	while (len--) {
   2ade8:	4282      	cmp	r2, r0
		*r++ = *p++ ^ *q++;
   2adea:	ea81 0104 	eor.w	r1, r1, r4
   2adee:	f802 1c01 	strb.w	r1, [r2, #-1]
	while (len--) {
   2adf2:	d1f5      	bne.n	2ade0 <smp_c1+0x8c>
	return bt_encrypt_le(k, enc_data, enc_data);
   2adf4:	462a      	mov	r2, r5
   2adf6:	4629      	mov	r1, r5
   2adf8:	4630      	mov	r0, r6
   2adfa:	f000 fdb7 	bl	2b96c <bt_encrypt_le>
   2adfe:	4604      	mov	r4, r0
}
   2ae00:	4620      	mov	r0, r4
   2ae02:	b009      	add	sp, #36	; 0x24
   2ae04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002ae08 <legacy_pairing_confirm>:
{
   2ae08:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2ae0a:	1d07      	adds	r7, r0, #4
{
   2ae0c:	b085      	sub	sp, #20
   2ae0e:	4604      	mov	r4, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2ae10:	210a      	movs	r1, #10
   2ae12:	4638      	mov	r0, r7
   2ae14:	f7ff fe8c 	bl	2ab30 <atomic_test_bit>
   2ae18:	bb88      	cbnz	r0, 2ae7e <legacy_pairing_confirm+0x76>
			atomic_set_bit(smp->allowed_cmds,
   2ae1a:	2104      	movs	r1, #4
   2ae1c:	4620      	mov	r0, r4
   2ae1e:	f7ff fed0 	bl	2abc2 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2ae22:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   2ae24:	f8d4 60ec 	ldr.w	r6, [r4, #236]	; 0xec
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2ae28:	f7ff fedf 	bl	2abea <smp_create_pdu.constprop.0>
	if (!buf) {
   2ae2c:	4605      	mov	r5, r0
   2ae2e:	b1c0      	cbz	r0, 2ae62 <legacy_pairing_confirm+0x5a>
   2ae30:	2110      	movs	r1, #16
   2ae32:	300c      	adds	r0, #12
   2ae34:	f000 fa8a 	bl	2b34c <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   2ae38:	f106 0396 	add.w	r3, r6, #150	; 0x96
   2ae3c:	368f      	adds	r6, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   2ae3e:	9002      	str	r0, [sp, #8]
   2ae40:	9301      	str	r3, [sp, #4]
   2ae42:	9600      	str	r6, [sp, #0]
   2ae44:	f104 0310 	add.w	r3, r4, #16
   2ae48:	f104 0209 	add.w	r2, r4, #9
   2ae4c:	f104 0127 	add.w	r1, r4, #39	; 0x27
   2ae50:	f104 0047 	add.w	r0, r4, #71	; 0x47
   2ae54:	f7ff ff7e 	bl	2ad54 <smp_c1>
   2ae58:	4606      	mov	r6, r0
   2ae5a:	b128      	cbz	r0, 2ae68 <legacy_pairing_confirm+0x60>
		net_buf_unref(buf);
   2ae5c:	4628      	mov	r0, r5
   2ae5e:	f7f3 fe23 	bl	1eaa8 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   2ae62:	2008      	movs	r0, #8
}
   2ae64:	b005      	add	sp, #20
   2ae66:	bdf0      	pop	{r4, r5, r6, r7, pc}
	smp_send(smp, buf, NULL, NULL);
   2ae68:	4602      	mov	r2, r0
   2ae6a:	4629      	mov	r1, r5
   2ae6c:	4620      	mov	r0, r4
   2ae6e:	f7f1 fd8b 	bl	1c988 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2ae72:	4631      	mov	r1, r6
   2ae74:	4638      	mov	r0, r7
   2ae76:	f7ff fe85 	bl	2ab84 <atomic_clear_bit>
	return 0;
   2ae7a:	2000      	movs	r0, #0
   2ae7c:	e7f2      	b.n	2ae64 <legacy_pairing_confirm+0x5c>
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2ae7e:	2100      	movs	r1, #0
   2ae80:	4638      	mov	r0, r7
   2ae82:	f7ff fe9e 	bl	2abc2 <atomic_set_bit>
	return 0;
   2ae86:	e7f8      	b.n	2ae7a <legacy_pairing_confirm+0x72>

0002ae88 <bt_smp_request_ltk>:
{
   2ae88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2ae8c:	9f09      	ldr	r7, [sp, #36]	; 0x24
   2ae8e:	e9cd 2300 	strd	r2, r3, [sp]
   2ae92:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   2ae94:	f7ff fe8a 	bl	2abac <smp_chan_get>
	if (!smp) {
   2ae98:	4605      	mov	r5, r0
   2ae9a:	2800      	cmp	r0, #0
   2ae9c:	d07c      	beq.n	2af98 <bt_smp_request_ltk+0x110>
	if (ediv == 0U && rand == 0U &&
   2ae9e:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2aea2:	1d06      	adds	r6, r0, #4
	if (ediv == 0U && rand == 0U &&
   2aea4:	f1b8 0f00 	cmp.w	r8, #0
   2aea8:	d128      	bne.n	2aefc <bt_smp_request_ltk+0x74>
   2aeaa:	e9dd 3200 	ldrd	r3, r2, [sp]
   2aeae:	4313      	orrs	r3, r2
   2aeb0:	d124      	bne.n	2aefc <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2aeb2:	2103      	movs	r1, #3
   2aeb4:	4630      	mov	r0, r6
   2aeb6:	f7ff fe3b 	bl	2ab30 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   2aeba:	b1f8      	cbz	r0, 2aefc <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2aebc:	2101      	movs	r1, #1
   2aebe:	4630      	mov	r0, r6
   2aec0:	f7ff fe36 	bl	2ab30 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2aec4:	b1d0      	cbz	r0, 2aefc <bt_smp_request_ltk+0x74>
	return MIN(req->max_key_size, rsp->max_key_size);
   2aec6:	7d2c      	ldrb	r4, [r5, #20]
   2aec8:	7b6b      	ldrb	r3, [r5, #13]
   2aeca:	429c      	cmp	r4, r3
   2aecc:	bf28      	it	cs
   2aece:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   2aed0:	4622      	mov	r2, r4
   2aed2:	f105 0147 	add.w	r1, r5, #71	; 0x47
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   2aed6:	4638      	mov	r0, r7
   2aed8:	f7fe f826 	bl	28f28 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2aedc:	2c0f      	cmp	r4, #15
   2aede:	d805      	bhi.n	2aeec <bt_smp_request_ltk+0x64>
			(void)memset(ltk + enc_size, 0,
   2aee0:	f1c4 0210 	rsb	r2, r4, #16
   2aee4:	4641      	mov	r1, r8
   2aee6:	1938      	adds	r0, r7, r4
   2aee8:	f7fe f829 	bl	28f3e <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2aeec:	4630      	mov	r0, r6
   2aeee:	2101      	movs	r1, #1
   2aef0:	f7ff fe67 	bl	2abc2 <atomic_set_bit>
		return true;
   2aef4:	2001      	movs	r0, #1
}
   2aef6:	b002      	add	sp, #8
   2aef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!conn->le.keys) {
   2aefc:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   2af00:	b983      	cbnz	r3, 2af24 <bt_smp_request_ltk+0x9c>
					     &conn->le.dst);
   2af02:	f104 0888 	add.w	r8, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   2af06:	7a21      	ldrb	r1, [r4, #8]
   2af08:	4642      	mov	r2, r8
   2af0a:	2020      	movs	r0, #32
   2af0c:	f7f3 fa9e 	bl	1e44c <bt_keys_find>
   2af10:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
		if (!conn->le.keys) {
   2af14:	b930      	cbnz	r0, 2af24 <bt_smp_request_ltk+0x9c>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   2af16:	7a21      	ldrb	r1, [r4, #8]
   2af18:	4642      	mov	r2, r8
   2af1a:	2001      	movs	r0, #1
   2af1c:	f7f3 fa96 	bl	1e44c <bt_keys_find>
   2af20:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	if (ediv == 0U && rand == 0U &&
   2af24:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2af28:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
	if (ediv == 0U && rand == 0U &&
   2af2c:	f1b8 0f00 	cmp.w	r8, #0
   2af30:	d10c      	bne.n	2af4c <bt_smp_request_ltk+0xc4>
   2af32:	e9dd 3200 	ldrd	r3, r2, [sp]
   2af36:	4313      	orrs	r3, r2
   2af38:	d108      	bne.n	2af4c <bt_smp_request_ltk+0xc4>
   2af3a:	b300      	cbz	r0, 2af7e <bt_smp_request_ltk+0xf6>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2af3c:	89c3      	ldrh	r3, [r0, #14]
   2af3e:	069a      	lsls	r2, r3, #26
   2af40:	d505      	bpl.n	2af4e <bt_smp_request_ltk+0xc6>
		enc_size = conn->le.keys->enc_size;
   2af42:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   2af44:	f100 011a 	add.w	r1, r0, #26
   2af48:	4622      	mov	r2, r4
   2af4a:	e7c4      	b.n	2aed6 <bt_smp_request_ltk+0x4e>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2af4c:	b1b8      	cbz	r0, 2af7e <bt_smp_request_ltk+0xf6>
   2af4e:	89c3      	ldrh	r3, [r0, #14]
   2af50:	07db      	lsls	r3, r3, #31
   2af52:	d514      	bpl.n	2af7e <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2af54:	2208      	movs	r2, #8
   2af56:	4669      	mov	r1, sp
   2af58:	3040      	adds	r0, #64	; 0x40
   2af5a:	f7fd ffbe 	bl	28eda <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2af5e:	b970      	cbnz	r0, 2af7e <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   2af60:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   2af64:	2202      	movs	r2, #2
   2af66:	a908      	add	r1, sp, #32
   2af68:	3048      	adds	r0, #72	; 0x48
   2af6a:	f7fd ffb6 	bl	28eda <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2af6e:	4680      	mov	r8, r0
   2af70:	b928      	cbnz	r0, 2af7e <bt_smp_request_ltk+0xf6>
		enc_size = conn->le.keys->enc_size;
   2af72:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
   2af76:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->periph_ltk.val, enc_size);
   2af78:	314a      	adds	r1, #74	; 0x4a
   2af7a:	4622      	mov	r2, r4
   2af7c:	e7ab      	b.n	2aed6 <bt_smp_request_ltk+0x4e>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2af7e:	210f      	movs	r1, #15
   2af80:	4630      	mov	r0, r6
   2af82:	f7ff fdd5 	bl	2ab30 <atomic_test_bit>
   2af86:	b120      	cbz	r0, 2af92 <bt_smp_request_ltk+0x10a>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   2af88:	2202      	movs	r2, #2
   2af8a:	2106      	movs	r1, #6
   2af8c:	4620      	mov	r0, r4
   2af8e:	f7ee fb1d 	bl	195cc <bt_conn_security_changed>
	smp_reset(smp);
   2af92:	4628      	mov	r0, r5
   2af94:	f7ff febb 	bl	2ad0e <smp_reset>
		return false;
   2af98:	2000      	movs	r0, #0
   2af9a:	e7ac      	b.n	2aef6 <bt_smp_request_ltk+0x6e>

0002af9c <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   2af9c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2afa0:	4770      	bx	lr

0002afa2 <bt_smp_irk_get>:
{
   2afa2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t invalid_ir[16] = { 0 };
   2afa4:	2500      	movs	r5, #0
{
   2afa6:	460c      	mov	r4, r1
	if (!memcmp(ir, invalid_ir, 16)) {
   2afa8:	2210      	movs	r2, #16
   2afaa:	4669      	mov	r1, sp
	uint8_t invalid_ir[16] = { 0 };
   2afac:	e9cd 5500 	strd	r5, r5, [sp]
   2afb0:	e9cd 5502 	strd	r5, r5, [sp, #8]
{
   2afb4:	4606      	mov	r6, r0
	if (!memcmp(ir, invalid_ir, 16)) {
   2afb6:	f7fd ff90 	bl	28eda <memcmp>
   2afba:	b180      	cbz	r0, 2afde <bt_smp_irk_get+0x3c>
	dst[0] = val;
   2afbc:	2301      	movs	r3, #1
	memset(&res[4], 0, 16 - 4);
   2afbe:	220c      	movs	r2, #12
   2afc0:	4629      	mov	r1, r5
   2afc2:	7023      	strb	r3, [r4, #0]
	dst[1] = val >> 8;
   2afc4:	7065      	strb	r5, [r4, #1]
	dst[0] = val;
   2afc6:	70a5      	strb	r5, [r4, #2]
	dst[1] = val >> 8;
   2afc8:	70e5      	strb	r5, [r4, #3]
   2afca:	1d20      	adds	r0, r4, #4
   2afcc:	f7fd ffb7 	bl	28f3e <memset>
	err = bt_encrypt_le(key, res, res);
   2afd0:	4622      	mov	r2, r4
   2afd2:	4621      	mov	r1, r4
   2afd4:	4630      	mov	r0, r6
   2afd6:	f000 fcc9 	bl	2b96c <bt_encrypt_le>
}
   2afda:	b004      	add	sp, #16
   2afdc:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2afde:	f06f 0015 	mvn.w	r0, #21
   2afe2:	e7fa      	b.n	2afda <bt_smp_irk_get+0x38>

0002afe4 <bt_smp_dhkey_ready>:
{
   2afe4:	b570      	push	{r4, r5, r6, lr}
   2afe6:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   2afe8:	2008      	movs	r0, #8
   2afea:	f7f1 fc5d 	bl	1c8a8 <smp_find>
	if (smp) {
   2afee:	4604      	mov	r4, r0
   2aff0:	b1b8      	cbz	r0, 2b022 <bt_smp_dhkey_ready+0x3e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   2aff2:	1d05      	adds	r5, r0, #4
   2aff4:	2108      	movs	r1, #8
   2aff6:	4628      	mov	r0, r5
   2aff8:	f7ff fdc4 	bl	2ab84 <atomic_clear_bit>
	if (!dhkey) {
   2affc:	b38e      	cbz	r6, 2b062 <bt_smp_dhkey_ready+0x7e>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   2affe:	2107      	movs	r1, #7
   2b000:	f7ff fdc0 	bl	2ab84 <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, BT_DH_KEY_LEN);
   2b004:	4631      	mov	r1, r6
   2b006:	2220      	movs	r2, #32
   2b008:	f104 0097 	add.w	r0, r4, #151	; 0x97
   2b00c:	f7fd ff8c 	bl	28f28 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2b010:	210a      	movs	r1, #10
   2b012:	4628      	mov	r0, r5
   2b014:	f7ff fd8c 	bl	2ab30 <atomic_test_bit>
   2b018:	b168      	cbz	r0, 2b036 <bt_smp_dhkey_ready+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2b01a:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2b01c:	4628      	mov	r0, r5
   2b01e:	f7ff fdd0 	bl	2abc2 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   2b022:	2007      	movs	r0, #7
   2b024:	f7f1 fc40 	bl	1c8a8 <smp_find>
		if (smp) {
   2b028:	4604      	mov	r4, r0
   2b02a:	b118      	cbz	r0, 2b034 <bt_smp_dhkey_ready+0x50>
			err = smp_dhkey_generate(smp);
   2b02c:	f7f1 fd46 	bl	1cabc <smp_dhkey_generate>
			if (err) {
   2b030:	4601      	mov	r1, r0
   2b032:	b990      	cbnz	r0, 2b05a <bt_smp_dhkey_ready+0x76>
}
   2b034:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2b036:	2110      	movs	r1, #16
   2b038:	4628      	mov	r0, r5
   2b03a:	f7ff fd79 	bl	2ab30 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2b03e:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2b040:	2800      	cmp	r0, #0
   2b042:	d1eb      	bne.n	2b01c <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   2b044:	4628      	mov	r0, r5
   2b046:	f7ff fd73 	bl	2ab30 <atomic_test_bit>
   2b04a:	2800      	cmp	r0, #0
   2b04c:	d0e9      	beq.n	2b022 <bt_smp_dhkey_ready+0x3e>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   2b04e:	4620      	mov	r0, r4
   2b050:	f7f2 f912 	bl	1d278 <compute_and_check_and_send_periph_dhcheck>
		if (err) {
   2b054:	4601      	mov	r1, r0
   2b056:	2800      	cmp	r0, #0
   2b058:	d0e3      	beq.n	2b022 <bt_smp_dhkey_ready+0x3e>
			smp_error(smp, err);
   2b05a:	4620      	mov	r0, r4
   2b05c:	f7f2 fc9e 	bl	1d99c <smp_error>
   2b060:	e7df      	b.n	2b022 <bt_smp_dhkey_ready+0x3e>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   2b062:	210b      	movs	r1, #11
   2b064:	e7f9      	b.n	2b05a <bt_smp_dhkey_ready+0x76>

0002b066 <smp_check_complete.part.0>:
static void smp_check_complete(struct bt_conn *conn, uint8_t dist_complete)
   2b066:	b510      	push	{r4, lr}
   2b068:	460c      	mov	r4, r1
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   2b06a:	2106      	movs	r1, #6
   2b06c:	f7fe fd4b 	bl	29b06 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   2b070:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   2b074:	ea23 0104 	bic.w	r1, r3, r4
   2b078:	f800 1c04 	strb.w	r1, [r0, #-4]
		if (!smp->local_dist && !smp->remote_dist) {
   2b07c:	f830 1c04 	ldrh.w	r1, [r0, #-4]
   2b080:	b921      	cbnz	r1, 2b08c <smp_check_complete.part.0+0x26>
}
   2b082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_pairing_complete(smp, 0);
   2b086:	38ec      	subs	r0, #236	; 0xec
   2b088:	f7f2 bbec 	b.w	1d864 <smp_pairing_complete>
}
   2b08c:	bd10      	pop	{r4, pc}

0002b08e <smp_ident_sent>:
	if (!err) {
   2b08e:	b922      	cbnz	r2, 2b09a <smp_ident_sent+0xc>
	if (conn->type == BT_CONN_TYPE_LE) {
   2b090:	7881      	ldrb	r1, [r0, #2]
   2b092:	2901      	cmp	r1, #1
   2b094:	d101      	bne.n	2b09a <smp_ident_sent+0xc>
   2b096:	f7ff bfe6 	b.w	2b066 <smp_check_complete.part.0>
}
   2b09a:	4770      	bx	lr

0002b09c <smp_id_sent>:
	if (!err) {
   2b09c:	b92a      	cbnz	r2, 2b0aa <smp_id_sent+0xe>
	if (conn->type == BT_CONN_TYPE_LE) {
   2b09e:	7883      	ldrb	r3, [r0, #2]
   2b0a0:	2b01      	cmp	r3, #1
   2b0a2:	d102      	bne.n	2b0aa <smp_id_sent+0xe>
   2b0a4:	2102      	movs	r1, #2
   2b0a6:	f7ff bfde 	b.w	2b066 <smp_check_complete.part.0>
}
   2b0aa:	4770      	bx	lr

0002b0ac <bt_smp_disconnected>:
{
   2b0ac:	b570      	push	{r4, r5, r6, lr}
   2b0ae:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   2b0b0:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   2b0b4:	f850 3b34 	ldr.w	r3, [r0], #52
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2b0b8:	3ce8      	subs	r4, #232	; 0xe8
	struct bt_keys *keys = chan->conn->le.keys;
   2b0ba:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
	(void)k_work_cancel_delayable(&smp->work);
   2b0be:	f000 ffd8 	bl	2c072 <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2b0c2:	2103      	movs	r1, #3
   2b0c4:	4620      	mov	r0, r4
   2b0c6:	f7ff fd33 	bl	2ab30 <atomic_test_bit>
   2b0ca:	b1a0      	cbz	r0, 2b0f6 <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   2b0cc:	2108      	movs	r1, #8
   2b0ce:	4630      	mov	r0, r6
   2b0d0:	f7f2 fbc8 	bl	1d864 <smp_pairing_complete>
	if (keys) {
   2b0d4:	b13d      	cbz	r5, 2b0e6 <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   2b0d6:	89eb      	ldrh	r3, [r5, #14]
   2b0d8:	b113      	cbz	r3, 2b0e0 <bt_smp_disconnected+0x34>
   2b0da:	7b6b      	ldrb	r3, [r5, #13]
   2b0dc:	079b      	lsls	r3, r3, #30
   2b0de:	d502      	bpl.n	2b0e6 <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   2b0e0:	4628      	mov	r0, r5
   2b0e2:	f7f3 fa49 	bl	1e578 <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   2b0e6:	4630      	mov	r0, r6
   2b0e8:	f44f 72ac 	mov.w	r2, #344	; 0x158
}
   2b0ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(smp, 0, sizeof(*smp));
   2b0f0:	2100      	movs	r1, #0
   2b0f2:	f7fd bf24 	b.w	28f3e <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2b0f6:	2101      	movs	r1, #1
   2b0f8:	4620      	mov	r0, r4
   2b0fa:	f7ff fd19 	bl	2ab30 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2b0fe:	2800      	cmp	r0, #0
   2b100:	d1e4      	bne.n	2b0cc <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2b102:	210f      	movs	r1, #15
   2b104:	4620      	mov	r0, r4
   2b106:	f7ff fd13 	bl	2ab30 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2b10a:	2800      	cmp	r0, #0
   2b10c:	d1de      	bne.n	2b0cc <bt_smp_disconnected+0x20>
   2b10e:	e7e1      	b.n	2b0d4 <bt_smp_disconnected+0x28>

0002b110 <id_add>:
	bt_id_add(keys);
   2b110:	f7ec bebe 	b.w	17e90 <bt_id_add>

0002b114 <bt_keys_get_type>:
{
   2b114:	b570      	push	{r4, r5, r6, lr}
   2b116:	4604      	mov	r4, r0
   2b118:	460d      	mov	r5, r1
   2b11a:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   2b11c:	f7f3 f996 	bl	1e44c <bt_keys_find>
	if (keys) {
   2b120:	b938      	cbnz	r0, 2b132 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   2b122:	4631      	mov	r1, r6
   2b124:	4628      	mov	r0, r5
   2b126:	f7f3 f911 	bl	1e34c <bt_keys_get_addr>
	if (!keys) {
   2b12a:	b110      	cbz	r0, 2b132 <bt_keys_get_type+0x1e>
	keys->keys |= type;
   2b12c:	89c3      	ldrh	r3, [r0, #14]
   2b12e:	431c      	orrs	r4, r3
   2b130:	81c4      	strh	r4, [r0, #14]
}
   2b132:	bd70      	pop	{r4, r5, r6, pc}

0002b134 <bt_keys_add_type>:
	keys->keys |= type;
   2b134:	89c3      	ldrh	r3, [r0, #14]
   2b136:	4319      	orrs	r1, r3
   2b138:	81c1      	strh	r1, [r0, #14]
}
   2b13a:	4770      	bx	lr

0002b13c <sys_memcpy_swap>:
	psrc += length - 1;
   2b13c:	1e53      	subs	r3, r2, #1
   2b13e:	4419      	add	r1, r3
	for (; length > 0; length--) {
   2b140:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   2b142:	f811 3901 	ldrb.w	r3, [r1], #-1
   2b146:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   2b14a:	4290      	cmp	r0, r2
   2b14c:	d1f9      	bne.n	2b142 <sys_memcpy_swap+0x6>
}
   2b14e:	4770      	bx	lr

0002b150 <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   2b150:	b510      	push	{r4, lr}
   2b152:	1e43      	subs	r3, r0, #1
   2b154:	f100 0210 	add.w	r2, r0, #16
   2b158:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   2b15a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2b15e:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2b162:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   2b164:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2b166:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   2b168:	d1f7      	bne.n	2b15a <sys_mem_swap.constprop.0+0xa>
	}
}
   2b16a:	bd10      	pop	{r4, pc}

0002b16c <bt_crypto_aes_cmac>:
{
   2b16c:	b570      	push	{r4, r5, r6, lr}
   2b16e:	b0c2      	sub	sp, #264	; 0x108
   2b170:	460d      	mov	r5, r1
   2b172:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2b174:	4601      	mov	r1, r0
   2b176:	aa16      	add	r2, sp, #88	; 0x58
   2b178:	4668      	mov	r0, sp
{
   2b17a:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2b17c:	f7fd fd1c 	bl	28bb8 <tc_cmac_setup>
   2b180:	b918      	cbnz	r0, 2b18a <bt_crypto_aes_cmac+0x1e>
		return -EIO;
   2b182:	f06f 0004 	mvn.w	r0, #4
}
   2b186:	b042      	add	sp, #264	; 0x108
   2b188:	bd70      	pop	{r4, r5, r6, pc}
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   2b18a:	4632      	mov	r2, r6
   2b18c:	4629      	mov	r1, r5
   2b18e:	4668      	mov	r0, sp
   2b190:	f7fd fd3d 	bl	28c0e <tc_cmac_update>
   2b194:	2800      	cmp	r0, #0
   2b196:	d0f4      	beq.n	2b182 <bt_crypto_aes_cmac+0x16>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   2b198:	4669      	mov	r1, sp
   2b19a:	4620      	mov	r0, r4
   2b19c:	f7fd fda1 	bl	28ce2 <tc_cmac_final>
   2b1a0:	2800      	cmp	r0, #0
   2b1a2:	d0ee      	beq.n	2b182 <bt_crypto_aes_cmac+0x16>
	return 0;
   2b1a4:	2000      	movs	r0, #0
   2b1a6:	e7ee      	b.n	2b186 <bt_crypto_aes_cmac+0x1a>

0002b1a8 <bt_crypto_f4>:
{
   2b1a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b1aa:	b097      	sub	sp, #92	; 0x5c
   2b1ac:	4614      	mov	r4, r2
   2b1ae:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   2b1b0:	2220      	movs	r2, #32
   2b1b2:	4601      	mov	r1, r0
   2b1b4:	a805      	add	r0, sp, #20
{
   2b1b6:	461d      	mov	r5, r3
   2b1b8:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   2b1ba:	f7ff ffbf 	bl	2b13c <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   2b1be:	2220      	movs	r2, #32
   2b1c0:	4631      	mov	r1, r6
   2b1c2:	a80d      	add	r0, sp, #52	; 0x34
   2b1c4:	f7ff ffba 	bl	2b13c <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   2b1c8:	4621      	mov	r1, r4
   2b1ca:	2210      	movs	r2, #16
   2b1cc:	a801      	add	r0, sp, #4
	m[64] = z;
   2b1ce:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   2b1d2:	f7ff ffb3 	bl	2b13c <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), res);
   2b1d6:	463b      	mov	r3, r7
   2b1d8:	2241      	movs	r2, #65	; 0x41
   2b1da:	a905      	add	r1, sp, #20
   2b1dc:	a801      	add	r0, sp, #4
   2b1de:	f7ff ffc5 	bl	2b16c <bt_crypto_aes_cmac>
	if (err) {
   2b1e2:	4604      	mov	r4, r0
   2b1e4:	b910      	cbnz	r0, 2b1ec <bt_crypto_f4+0x44>
	sys_mem_swap(res, 16);
   2b1e6:	4638      	mov	r0, r7
   2b1e8:	f7ff ffb2 	bl	2b150 <sys_mem_swap.constprop.0>
}
   2b1ec:	4620      	mov	r0, r4
   2b1ee:	b017      	add	sp, #92	; 0x5c
   2b1f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002b1f2 <bt_crypto_f6>:
{
   2b1f2:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b1f4:	b097      	sub	sp, #92	; 0x5c
   2b1f6:	4605      	mov	r5, r0
   2b1f8:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   2b1fa:	a805      	add	r0, sp, #20
   2b1fc:	2210      	movs	r2, #16
{
   2b1fe:	461c      	mov	r4, r3
   2b200:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   2b202:	f7ff ff9b 	bl	2b13c <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   2b206:	2210      	movs	r2, #16
   2b208:	4631      	mov	r1, r6
   2b20a:	a809      	add	r0, sp, #36	; 0x24
   2b20c:	f7ff ff96 	bl	2b13c <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   2b210:	4621      	mov	r1, r4
   2b212:	2210      	movs	r2, #16
   2b214:	a80d      	add	r0, sp, #52	; 0x34
   2b216:	f7ff ff91 	bl	2b13c <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   2b21a:	991c      	ldr	r1, [sp, #112]	; 0x70
   2b21c:	2203      	movs	r2, #3
   2b21e:	a811      	add	r0, sp, #68	; 0x44
   2b220:	f7ff ff8c 	bl	2b13c <sys_memcpy_swap>
	m[51] = a1->type;
   2b224:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   2b226:	f814 3b01 	ldrb.w	r3, [r4], #1
   2b22a:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   2b22e:	4621      	mov	r1, r4
   2b230:	2206      	movs	r2, #6
   2b232:	a812      	add	r0, sp, #72	; 0x48
   2b234:	f7fd fe78 	bl	28f28 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   2b238:	4621      	mov	r1, r4
   2b23a:	2206      	movs	r2, #6
   2b23c:	a812      	add	r0, sp, #72	; 0x48
   2b23e:	f7ff ff7d 	bl	2b13c <sys_memcpy_swap>
	m[58] = a2->type;
   2b242:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   2b244:	f814 3b01 	ldrb.w	r3, [r4], #1
   2b248:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   2b24c:	4621      	mov	r1, r4
   2b24e:	2206      	movs	r2, #6
   2b250:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   2b254:	f7fd fe68 	bl	28f28 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2b258:	4621      	mov	r1, r4
   2b25a:	2206      	movs	r2, #6
   2b25c:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   2b260:	f7ff ff6c 	bl	2b13c <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   2b264:	2210      	movs	r2, #16
   2b266:	4629      	mov	r1, r5
   2b268:	a801      	add	r0, sp, #4
   2b26a:	f7ff ff67 	bl	2b13c <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(ws, m, sizeof(m), check);
   2b26e:	463b      	mov	r3, r7
   2b270:	2241      	movs	r2, #65	; 0x41
   2b272:	a905      	add	r1, sp, #20
   2b274:	a801      	add	r0, sp, #4
   2b276:	f7ff ff79 	bl	2b16c <bt_crypto_aes_cmac>
	if (err) {
   2b27a:	4604      	mov	r4, r0
   2b27c:	b910      	cbnz	r0, 2b284 <bt_crypto_f6+0x92>
	sys_mem_swap(check, 16);
   2b27e:	4638      	mov	r0, r7
   2b280:	f7ff ff66 	bl	2b150 <sys_mem_swap.constprop.0>
}
   2b284:	4620      	mov	r0, r4
   2b286:	b017      	add	sp, #92	; 0x5c
   2b288:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002b28a <fixed_data_unref>:
}
   2b28a:	4770      	bx	lr

0002b28c <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2b28c:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2b28e:	6849      	ldr	r1, [r1, #4]
   2b290:	6809      	ldr	r1, [r1, #0]
   2b292:	f7f3 bb77 	b.w	1e984 <net_buf_alloc_len>

0002b296 <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   2b296:	f7f8 b809 	b.w	232ac <z_impl_k_queue_get>

0002b29a <net_buf_slist_put>:
	__asm__ volatile(
   2b29a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2b29e:	f3ef 8211 	mrs	r2, BASEPRI
   2b2a2:	f383 8812 	msr	BASEPRI_MAX, r3
   2b2a6:	f3bf 8f6f 	isb	sy
	parent->next = child;
   2b2aa:	2300      	movs	r3, #0
   2b2ac:	600b      	str	r3, [r1, #0]
	return list->tail;
   2b2ae:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   2b2b0:	b933      	cbnz	r3, 2b2c0 <net_buf_slist_put+0x26>
	list->head = node;
   2b2b2:	e9c0 1100 	strd	r1, r1, [r0]
	__asm__ volatile(
   2b2b6:	f382 8811 	msr	BASEPRI, r2
   2b2ba:	f3bf 8f6f 	isb	sy
}
   2b2be:	4770      	bx	lr
	parent->next = child;
   2b2c0:	6019      	str	r1, [r3, #0]
	list->tail = node;
   2b2c2:	6041      	str	r1, [r0, #4]
}
   2b2c4:	e7f7      	b.n	2b2b6 <net_buf_slist_put+0x1c>

0002b2c6 <net_buf_slist_get>:
{
   2b2c6:	b510      	push	{r4, lr}
   2b2c8:	4603      	mov	r3, r0
	__asm__ volatile(
   2b2ca:	f04f 0240 	mov.w	r2, #64	; 0x40
   2b2ce:	f3ef 8111 	mrs	r1, BASEPRI
   2b2d2:	f382 8812 	msr	BASEPRI_MAX, r2
   2b2d6:	f3bf 8f6f 	isb	sy
	return list->head;
   2b2da:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2b2dc:	b128      	cbz	r0, 2b2ea <net_buf_slist_get+0x24>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2b2de:	685c      	ldr	r4, [r3, #4]
	return node->next;
   2b2e0:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2b2e2:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2b2e4:	42a0      	cmp	r0, r4
	list->tail = node;
   2b2e6:	bf08      	it	eq
   2b2e8:	605a      	streq	r2, [r3, #4]
	__asm__ volatile(
   2b2ea:	f381 8811 	msr	BASEPRI, r1
   2b2ee:	f3bf 8f6f 	isb	sy
}
   2b2f2:	bd10      	pop	{r4, pc}

0002b2f4 <net_buf_put>:
	k_fifo_put(fifo, buf);
   2b2f4:	f000 bdcf 	b.w	2be96 <k_queue_append>

0002b2f8 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   2b2f8:	7a02      	ldrb	r2, [r0, #8]
   2b2fa:	3201      	adds	r2, #1
   2b2fc:	7202      	strb	r2, [r0, #8]
	return buf;
}
   2b2fe:	4770      	bx	lr

0002b300 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   2b300:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   2b302:	4618      	mov	r0, r3
   2b304:	685b      	ldr	r3, [r3, #4]
   2b306:	2b00      	cmp	r3, #0
   2b308:	d1fb      	bne.n	2b302 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   2b30a:	4770      	bx	lr

0002b30c <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   2b30c:	6842      	ldr	r2, [r0, #4]
{
   2b30e:	b510      	push	{r4, lr}
	if (parent->frags) {
   2b310:	b12a      	cbz	r2, 2b31e <net_buf_frag_insert+0x12>
   2b312:	460b      	mov	r3, r1
	while (buf->frags) {
   2b314:	461c      	mov	r4, r3
   2b316:	685b      	ldr	r3, [r3, #4]
   2b318:	2b00      	cmp	r3, #0
   2b31a:	d1fb      	bne.n	2b314 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   2b31c:	6062      	str	r2, [r4, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   2b31e:	6041      	str	r1, [r0, #4]
}
   2b320:	bd10      	pop	{r4, pc}

0002b322 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   2b322:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   2b324:	4604      	mov	r4, r0
   2b326:	b920      	cbnz	r0, 2b332 <net_buf_frag_add+0x10>
	buf->ref++;
   2b328:	7a0b      	ldrb	r3, [r1, #8]
   2b32a:	3301      	adds	r3, #1
   2b32c:	720b      	strb	r3, [r1, #8]
		return net_buf_ref(frag);
   2b32e:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   2b330:	bd10      	pop	{r4, pc}
   2b332:	4603      	mov	r3, r0
	while (buf->frags) {
   2b334:	4618      	mov	r0, r3
   2b336:	685b      	ldr	r3, [r3, #4]
   2b338:	2b00      	cmp	r3, #0
   2b33a:	d1fb      	bne.n	2b334 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   2b33c:	f7ff ffe6 	bl	2b30c <net_buf_frag_insert>
   2b340:	4620      	mov	r0, r4
   2b342:	e7f5      	b.n	2b330 <net_buf_frag_add+0xe>

0002b344 <net_buf_simple_reserve>:
{
	__ASSERT_NO_MSG(buf);
	__ASSERT_NO_MSG(buf->len == 0U);
	NET_BUF_SIMPLE_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   2b344:	6883      	ldr	r3, [r0, #8]
   2b346:	440b      	add	r3, r1
   2b348:	6003      	str	r3, [r0, #0]
}
   2b34a:	4770      	bx	lr

0002b34c <net_buf_simple_add>:
	return buf->data + buf->len;
   2b34c:	8883      	ldrh	r3, [r0, #4]
   2b34e:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   2b350:	4419      	add	r1, r3
   2b352:	8081      	strh	r1, [r0, #4]
	return tail;
}
   2b354:	18d0      	adds	r0, r2, r3
   2b356:	4770      	bx	lr

0002b358 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   2b358:	b430      	push	{r4, r5}
   2b35a:	8884      	ldrh	r4, [r0, #4]
   2b35c:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   2b35e:	18a3      	adds	r3, r4, r2
   2b360:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2b362:	1928      	adds	r0, r5, r4
}
   2b364:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2b366:	f7fd bddf 	b.w	28f28 <memcpy>

0002b36a <net_buf_simple_add_u8>:

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   2b36a:	b510      	push	{r4, lr}
   2b36c:	8883      	ldrh	r3, [r0, #4]
   2b36e:	6802      	ldr	r2, [r0, #0]
	buf->len += len;
   2b370:	1c5c      	adds	r4, r3, #1
   2b372:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   2b374:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   2b376:	18d0      	adds	r0, r2, r3
   2b378:	bd10      	pop	{r4, pc}

0002b37a <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   2b37a:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   2b37c:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   2b37e:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   2b380:	1a40      	subs	r0, r0, r1
	buf->len += len;
   2b382:	4411      	add	r1, r2
	buf->data -= len;
   2b384:	6018      	str	r0, [r3, #0]
	buf->len += len;
   2b386:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   2b388:	4770      	bx	lr

0002b38a <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2b38a:	8882      	ldrh	r2, [r0, #4]
   2b38c:	1a52      	subs	r2, r2, r1
{
   2b38e:	4603      	mov	r3, r0
	buf->len -= len;
   2b390:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   2b392:	6800      	ldr	r0, [r0, #0]
   2b394:	4408      	add	r0, r1
   2b396:	6018      	str	r0, [r3, #0]
}
   2b398:	4770      	bx	lr

0002b39a <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   2b39a:	4603      	mov	r3, r0
	void *data = buf->data;
   2b39c:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2b39e:	889a      	ldrh	r2, [r3, #4]
   2b3a0:	1a52      	subs	r2, r2, r1
	buf->data += len;
   2b3a2:	4401      	add	r1, r0
	buf->len -= len;
   2b3a4:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   2b3a6:	6019      	str	r1, [r3, #0]

	return data;
}
   2b3a8:	4770      	bx	lr

0002b3aa <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   2b3aa:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   2b3ac:	6803      	ldr	r3, [r0, #0]
   2b3ae:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2b3b0:	2102      	movs	r1, #2
   2b3b2:	f7ff ffea 	bl	2b38a <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   2b3b6:	4620      	mov	r0, r4
   2b3b8:	bd10      	pop	{r4, pc}

0002b3ba <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   2b3ba:	6802      	ldr	r2, [r0, #0]
   2b3bc:	6880      	ldr	r0, [r0, #8]
}
   2b3be:	1a10      	subs	r0, r2, r0
   2b3c0:	4770      	bx	lr

0002b3c2 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2b3c2:	8883      	ldrh	r3, [r0, #4]
   2b3c4:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   2b3c6:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2b3c8:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   2b3ca:	6803      	ldr	r3, [r0, #0]
   2b3cc:	1a5b      	subs	r3, r3, r1
}
   2b3ce:	1ad0      	subs	r0, r2, r3
   2b3d0:	4770      	bx	lr

0002b3d2 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   2b3d2:	6903      	ldr	r3, [r0, #16]
   2b3d4:	b2c9      	uxtb	r1, r1
   2b3d6:	220c      	movs	r2, #12
   2b3d8:	fb01 3302 	mla	r3, r1, r2, r3
   2b3dc:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   2b3de:	f000 0007 	and.w	r0, r0, #7
   2b3e2:	4770      	bx	lr

0002b3e4 <set_on_state>:
	__asm__ volatile(
   2b3e4:	f04f 0340 	mov.w	r3, #64	; 0x40
   2b3e8:	f3ef 8211 	mrs	r2, BASEPRI
   2b3ec:	f383 8812 	msr	BASEPRI_MAX, r3
   2b3f0:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2b3f4:	6803      	ldr	r3, [r0, #0]
   2b3f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2b3fa:	f043 0302 	orr.w	r3, r3, #2
   2b3fe:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2b400:	f382 8811 	msr	BASEPRI, r2
   2b404:	f3bf 8f6f 	isb	sy
}
   2b408:	4770      	bx	lr

0002b40a <stop>:
{
   2b40a:	b570      	push	{r4, r5, r6, lr}
   2b40c:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   2b40e:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   2b410:	f04f 0440 	mov.w	r4, #64	; 0x40
   2b414:	f3ef 8511 	mrs	r5, BASEPRI
   2b418:	f384 8812 	msr	BASEPRI_MAX, r4
   2b41c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2b420:	260c      	movs	r6, #12
   2b422:	fb06 3401 	mla	r4, r6, r1, r3
   2b426:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   2b428:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   2b42c:	d008      	beq.n	2b440 <stop+0x36>
   2b42e:	42a2      	cmp	r2, r4
   2b430:	d006      	beq.n	2b440 <stop+0x36>
	__asm__ volatile(
   2b432:	f385 8811 	msr	BASEPRI, r5
   2b436:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   2b43a:	f04f 30ff 	mov.w	r0, #4294967295
}
   2b43e:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2b440:	4371      	muls	r1, r6
   2b442:	440b      	add	r3, r1
   2b444:	2201      	movs	r2, #1
   2b446:	641a      	str	r2, [r3, #64]	; 0x40
   2b448:	f385 8811 	msr	BASEPRI, r5
   2b44c:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   2b450:	6843      	ldr	r3, [r0, #4]
   2b452:	440b      	add	r3, r1
   2b454:	685b      	ldr	r3, [r3, #4]
   2b456:	4798      	blx	r3
	return 0;
   2b458:	2000      	movs	r0, #0
   2b45a:	e7f0      	b.n	2b43e <stop+0x34>

0002b45c <api_stop>:
	return stop(dev, subsys, CTX_API);
   2b45c:	2280      	movs	r2, #128	; 0x80
   2b45e:	f7ff bfd4 	b.w	2b40a <stop>

0002b462 <async_start>:
{
   2b462:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b464:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   2b466:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   2b468:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   2b46a:	f04f 0540 	mov.w	r5, #64	; 0x40
   2b46e:	f3ef 8611 	mrs	r6, BASEPRI
   2b472:	f385 8812 	msr	BASEPRI_MAX, r5
   2b476:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2b47a:	250c      	movs	r5, #12
   2b47c:	4369      	muls	r1, r5
   2b47e:	440c      	add	r4, r1
   2b480:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2b482:	f005 0c07 	and.w	ip, r5, #7
   2b486:	f1bc 0f01 	cmp.w	ip, #1
   2b48a:	d10b      	bne.n	2b4a4 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2b48c:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
   2b48e:	f386 8811 	msr	BASEPRI, r6
   2b492:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   2b496:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   2b49a:	6843      	ldr	r3, [r0, #4]
   2b49c:	585b      	ldr	r3, [r3, r1]
   2b49e:	4798      	blx	r3
	return 0;
   2b4a0:	2000      	movs	r0, #0
}
   2b4a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2b4a4:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   2b4a8:	42af      	cmp	r7, r5
   2b4aa:	f386 8811 	msr	BASEPRI, r6
   2b4ae:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   2b4b2:	bf0c      	ite	eq
   2b4b4:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   2b4b8:	f04f 30ff 	movne.w	r0, #4294967295
   2b4bc:	e7f1      	b.n	2b4a2 <async_start+0x40>

0002b4be <api_start>:
{
   2b4be:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2b4c0:	2480      	movs	r4, #128	; 0x80
   2b4c2:	9400      	str	r4, [sp, #0]
   2b4c4:	f7ff ffcd 	bl	2b462 <async_start>
}
   2b4c8:	b002      	add	sp, #8
   2b4ca:	bd10      	pop	{r4, pc}

0002b4cc <onoff_started_callback>:
{
   2b4cc:	b410      	push	{r4}
	return &data->mgr[type];
   2b4ce:	6900      	ldr	r0, [r0, #16]
   2b4d0:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2b4d2:	241c      	movs	r4, #28
   2b4d4:	fb03 0004 	mla	r0, r3, r4, r0
   2b4d8:	2100      	movs	r1, #0
}
   2b4da:	bc10      	pop	{r4}
	notify(mgr, 0);
   2b4dc:	4710      	bx	r2

0002b4de <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2b4de:	2000      	movs	r0, #0
   2b4e0:	f7f6 b9f0 	b.w	218c4 <nrfx_clock_start>

0002b4e4 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2b4e4:	2000      	movs	r0, #0
   2b4e6:	f000 bac8 	b.w	2ba7a <nrfx_clock_stop>

0002b4ea <blocking_start_callback>:
{
   2b4ea:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2b4ec:	f7f7 bf12 	b.w	23314 <z_impl_k_sem_give>

0002b4f0 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   2b4f0:	2000      	movs	r0, #0
   2b4f2:	4770      	bx	lr

0002b4f4 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   2b4f4:	b538      	push	{r3, r4, r5, lr}
   2b4f6:	460c      	mov	r4, r1
   2b4f8:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   2b4fa:	f7ec f957 	bl	177ac <bt_is_ready>
   2b4fe:	b128      	cbz	r0, 2b50c <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   2b500:	4629      	mov	r1, r5
   2b502:	4620      	mov	r0, r4
}
   2b504:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   2b508:	f7eb ba9e 	b.w	16a48 <bt_hci_le_rand>
}
   2b50c:	f06f 000a 	mvn.w	r0, #10
   2b510:	bd38      	pop	{r3, r4, r5, pc}

0002b512 <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   2b512:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2b514:	460f      	mov	r7, r1
   2b516:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(buffer != NULL);
	int err = EINVAL;

	size_t olen;
	size_t offset = 0;
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   2b518:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   2b51c:	2400      	movs	r4, #0
	/* This is a call from a secure app, in which case entropy is
	 * gathered using CC3xx HW using the CTR_DRBG features of the
	 * nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
   2b51e:	42a6      	cmp	r6, r4
   2b520:	d803      	bhi.n	2b52a <entropy_cc3xx_rng_get_entropy+0x18>
		}

		offset += chunk_size;
	}

	if (offset == length) {
   2b522:	d016      	beq.n	2b552 <entropy_cc3xx_rng_get_entropy+0x40>
	int err = EINVAL;
   2b524:	2016      	movs	r0, #22
		err = 0;
	}

	return err;
}
   2b526:	b003      	add	sp, #12
   2b528:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   2b52a:	1b33      	subs	r3, r6, r4
   2b52c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2b530:	bf38      	it	cc
   2b532:	461d      	movcc	r5, r3
		ret = nrf_cc3xx_platform_ctr_drbg_get(NULL, buffer + offset,
   2b534:	462a      	mov	r2, r5
   2b536:	ab01      	add	r3, sp, #4
   2b538:	1939      	adds	r1, r7, r4
   2b53a:	2000      	movs	r0, #0
   2b53c:	f7f9 fb34 	bl	24ba8 <nrf_cc3xx_platform_ctr_drbg_get>
		if (ret != 0) {
   2b540:	b920      	cbnz	r0, 2b54c <entropy_cc3xx_rng_get_entropy+0x3a>
		if (olen != chunk_size) {
   2b542:	9b01      	ldr	r3, [sp, #4]
   2b544:	42ab      	cmp	r3, r5
   2b546:	d101      	bne.n	2b54c <entropy_cc3xx_rng_get_entropy+0x3a>
		offset += chunk_size;
   2b548:	442c      	add	r4, r5
   2b54a:	e7e8      	b.n	2b51e <entropy_cc3xx_rng_get_entropy+0xc>
			return -EINVAL;
   2b54c:	f06f 0015 	mvn.w	r0, #21
   2b550:	e7e9      	b.n	2b526 <entropy_cc3xx_rng_get_entropy+0x14>
		err = 0;
   2b552:	2000      	movs	r0, #0
   2b554:	e7e7      	b.n	2b526 <entropy_cc3xx_rng_get_entropy+0x14>

0002b556 <entropy_cc3xx_rng_init>:
	int ret;

	/* When the given context is NULL, a global internal
	 * ctr_drbg context is being used.
	 */
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   2b556:	2200      	movs	r2, #0
{
   2b558:	b508      	push	{r3, lr}
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   2b55a:	4611      	mov	r1, r2
   2b55c:	4610      	mov	r0, r2
   2b55e:	f7f9 faf3 	bl	24b48 <nrf_cc3xx_platform_ctr_drbg_init>
	if (ret != 0) {
		return -EINVAL;
   2b562:	2800      	cmp	r0, #0
	}

	return 0;
}
   2b564:	bf18      	it	ne
   2b566:	f06f 0015 	mvnne.w	r0, #21
   2b56a:	bd08      	pop	{r3, pc}

0002b56c <qspi_handler>:
	if (event == NRFX_QSPI_EVENT_DONE) {
   2b56c:	b918      	cbnz	r0, 2b576 <qspi_handler+0xa>
   2b56e:	f101 0030 	add.w	r0, r1, #48	; 0x30
   2b572:	f7f7 becf 	b.w	23314 <z_impl_k_sem_give>
}
   2b576:	4770      	bx	lr

0002b578 <qspi_lock.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   2b578:	f04f 32ff 	mov.w	r2, #4294967295
   2b57c:	f04f 33ff 	mov.w	r3, #4294967295
   2b580:	3018      	adds	r0, #24
   2b582:	f7f7 beed 	b.w	23360 <z_impl_k_sem_take>

0002b586 <qspi_trans_lock.isra.0>:
   2b586:	f04f 32ff 	mov.w	r2, #4294967295
   2b58a:	f04f 33ff 	mov.w	r3, #4294967295
   2b58e:	f7f7 bee7 	b.w	23360 <z_impl_k_sem_take>

0002b592 <qspi_unlock.isra.0>:
	z_impl_k_sem_give(sem);
   2b592:	3018      	adds	r0, #24
   2b594:	f7f7 bebe 	b.w	23314 <z_impl_k_sem_give>

0002b598 <qspi_nor_write_protection_set>:
{
   2b598:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct qspi_cmd cmd = {
   2b59a:	2200      	movs	r2, #0
   2b59c:	4291      	cmp	r1, r2
   2b59e:	bf0c      	ite	eq
   2b5a0:	2306      	moveq	r3, #6
   2b5a2:	2304      	movne	r3, #4
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
   2b5a4:	a901      	add	r1, sp, #4
	struct qspi_cmd cmd = {
   2b5a6:	e9cd 2201 	strd	r2, r2, [sp, #4]
   2b5aa:	9203      	str	r2, [sp, #12]
   2b5ac:	f88d 3004 	strb.w	r3, [sp, #4]
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
   2b5b0:	f7f3 fde4 	bl	1f17c <qspi_send_cmd>
		ret = -EIO;
   2b5b4:	2800      	cmp	r0, #0
}
   2b5b6:	bf18      	it	ne
   2b5b8:	f06f 0004 	mvnne.w	r0, #4
   2b5bc:	b005      	add	sp, #20
   2b5be:	f85d fb04 	ldr.w	pc, [sp], #4

0002b5c2 <qspi_rdsr.constprop.0>:
static int qspi_rdsr(const struct device *dev, uint8_t sr_num)
   2b5c2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t sr = 0xFF;
   2b5c4:	23ff      	movs	r3, #255	; 0xff
   2b5c6:	f88d 3003 	strb.w	r3, [sp, #3]
	const struct qspi_buf sr_buf = {
   2b5ca:	f10d 0303 	add.w	r3, sp, #3
	struct qspi_cmd cmd = {
   2b5ce:	2200      	movs	r2, #0
	const struct qspi_buf sr_buf = {
   2b5d0:	9301      	str	r3, [sp, #4]
	struct qspi_cmd cmd = {
   2b5d2:	2301      	movs	r3, #1
   2b5d4:	e9cd 3202 	strd	r3, r2, [sp, #8]
   2b5d8:	2305      	movs	r3, #5
   2b5da:	f88d 300c 	strb.w	r3, [sp, #12]
	int ret = qspi_send_cmd(dev, &cmd, false);
   2b5de:	a903      	add	r1, sp, #12
	struct qspi_cmd cmd = {
   2b5e0:	ab01      	add	r3, sp, #4
   2b5e2:	9204      	str	r2, [sp, #16]
   2b5e4:	9305      	str	r3, [sp, #20]
	int ret = qspi_send_cmd(dev, &cmd, false);
   2b5e6:	f7f3 fdc9 	bl	1f17c <qspi_send_cmd>
	return (ret < 0) ? ret : sr;
   2b5ea:	2800      	cmp	r0, #0
   2b5ec:	bfa8      	it	ge
   2b5ee:	f89d 0003 	ldrbge.w	r0, [sp, #3]
}
   2b5f2:	b007      	add	sp, #28
   2b5f4:	f85d fb04 	ldr.w	pc, [sp], #4

0002b5f8 <is_regular_addr_valid>:
{
   2b5f8:	b538      	push	{r3, r4, r5, lr}
   2b5fa:	4605      	mov	r5, r0
   2b5fc:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   2b5fe:	f000 faad 	bl	2bb5c <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   2b602:	2d00      	cmp	r5, #0
   2b604:	db07      	blt.n	2b616 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   2b606:	42a8      	cmp	r0, r5
   2b608:	d905      	bls.n	2b616 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   2b60a:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   2b60c:	4284      	cmp	r4, r0
   2b60e:	bf8c      	ite	hi
   2b610:	2000      	movhi	r0, #0
   2b612:	2001      	movls	r0, #1
}
   2b614:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   2b616:	2000      	movs	r0, #0
   2b618:	e7fc      	b.n	2b614 <is_regular_addr_valid+0x1c>

0002b61a <flash_nrf_read>:
{
   2b61a:	b570      	push	{r4, r5, r6, lr}
   2b61c:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   2b61e:	4628      	mov	r0, r5
   2b620:	4619      	mov	r1, r3
{
   2b622:	4616      	mov	r6, r2
   2b624:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   2b626:	f7ff ffe7 	bl	2b5f8 <is_regular_addr_valid>
   2b62a:	b928      	cbnz	r0, 2b638 <flash_nrf_read+0x1e>
   2b62c:	4621      	mov	r1, r4
   2b62e:	4628      	mov	r0, r5
}
   2b630:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2b634:	f7f4 b954 	b.w	1f8e0 <flash_nrf_read.part.0>
	if (!len) {
   2b638:	b124      	cbz	r4, 2b644 <flash_nrf_read+0x2a>
	memcpy(data, (void *)addr, len);
   2b63a:	4622      	mov	r2, r4
   2b63c:	4629      	mov	r1, r5
   2b63e:	4630      	mov	r0, r6
   2b640:	f7fd fc72 	bl	28f28 <memcpy>
}
   2b644:	2000      	movs	r0, #0
   2b646:	bd70      	pop	{r4, r5, r6, pc}

0002b648 <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   2b648:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2b64a:	461c      	mov	r4, r3
   2b64c:	4616      	mov	r6, r2
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   2b64e:	2300      	movs	r3, #0
	const struct flash_driver_api *api = dev->api;
   2b650:	6882      	ldr	r2, [r0, #8]
	info->start_offset = 0;
   2b652:	6023      	str	r3, [r4, #0]
	info->index = 0U;
   2b654:	60a3      	str	r3, [r4, #8]

	api->page_layout(dev, &layout, &layout_size);
   2b656:	6913      	ldr	r3, [r2, #16]
{
   2b658:	460d      	mov	r5, r1
	api->page_layout(dev, &layout, &layout_size);
   2b65a:	aa01      	add	r2, sp, #4
   2b65c:	4669      	mov	r1, sp
   2b65e:	4798      	blx	r3

	while (layout_size--) {
   2b660:	9b01      	ldr	r3, [sp, #4]
   2b662:	1e5a      	subs	r2, r3, #1
   2b664:	9201      	str	r2, [sp, #4]
   2b666:	b91b      	cbnz	r3, 2b670 <flash_get_page_info+0x28>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   2b668:	f06f 0015 	mvn.w	r0, #21
}
   2b66c:	b003      	add	sp, #12
   2b66e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		info->size = layout->pages_size;
   2b670:	9800      	ldr	r0, [sp, #0]
			index_jmp = index - info->index;
   2b672:	68a2      	ldr	r2, [r4, #8]
		info->size = layout->pages_size;
   2b674:	6847      	ldr	r7, [r0, #4]
			index_jmp = (offs - info->start_offset) / info->size;
   2b676:	6821      	ldr	r1, [r4, #0]
		info->size = layout->pages_size;
   2b678:	6067      	str	r7, [r4, #4]
		if (offs == 0) {
   2b67a:	b985      	cbnz	r5, 2b69e <flash_get_page_info+0x56>
			index_jmp = index - info->index;
   2b67c:	1ab3      	subs	r3, r6, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
   2b67e:	f8d0 c000 	ldr.w	ip, [r0]
   2b682:	4563      	cmp	r3, ip
   2b684:	bf28      	it	cs
   2b686:	4663      	movcs	r3, ip
		info->index += index_jmp;
   2b688:	441a      	add	r2, r3
		info->start_offset += (index_jmp * info->size);
   2b68a:	fb03 1107 	mla	r1, r3, r7, r1
   2b68e:	6021      	str	r1, [r4, #0]
		info->index += index_jmp;
   2b690:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
   2b692:	6802      	ldr	r2, [r0, #0]
   2b694:	429a      	cmp	r2, r3
   2b696:	d806      	bhi.n	2b6a6 <flash_get_page_info+0x5e>
		layout++;
   2b698:	3008      	adds	r0, #8
   2b69a:	9000      	str	r0, [sp, #0]
   2b69c:	e7e0      	b.n	2b660 <flash_get_page_info+0x18>
			index_jmp = (offs - info->start_offset) / info->size;
   2b69e:	1a6b      	subs	r3, r5, r1
   2b6a0:	fbb3 f3f7 	udiv	r3, r3, r7
   2b6a4:	e7eb      	b.n	2b67e <flash_get_page_info+0x36>
			return 0;
   2b6a6:	2000      	movs	r0, #0
   2b6a8:	e7e0      	b.n	2b66c <flash_get_page_info+0x24>

0002b6aa <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   2b6aa:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   2b6ac:	2200      	movs	r2, #0
   2b6ae:	f7ff bfcb 	b.w	2b648 <flash_get_page_info>

0002b6b2 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   2b6b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   2b6b6:	6883      	ldr	r3, [r0, #8]
{
   2b6b8:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
   2b6ba:	691b      	ldr	r3, [r3, #16]
{
   2b6bc:	4688      	mov	r8, r1
   2b6be:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   2b6c0:	a901      	add	r1, sp, #4
   2b6c2:	aa02      	add	r2, sp, #8
   2b6c4:	4798      	blx	r3
	off_t off = 0;
   2b6c6:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   2b6c8:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   2b6ca:	4625      	mov	r5, r4
   2b6cc:	9b02      	ldr	r3, [sp, #8]
   2b6ce:	42ab      	cmp	r3, r5
   2b6d0:	d802      	bhi.n	2b6d8 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   2b6d2:	b006      	add	sp, #24
   2b6d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   2b6d8:	9f01      	ldr	r7, [sp, #4]
   2b6da:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   2b6de:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   2b6e0:	687b      	ldr	r3, [r7, #4]
   2b6e2:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2b6e4:	683a      	ldr	r2, [r7, #0]
   2b6e6:	42b2      	cmp	r2, r6
   2b6e8:	eb0a 0306 	add.w	r3, sl, r6
   2b6ec:	d802      	bhi.n	2b6f4 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   2b6ee:	3501      	adds	r5, #1
   2b6f0:	469a      	mov	sl, r3
   2b6f2:	e7eb      	b.n	2b6cc <flash_page_foreach+0x1a>
			page_info.start_offset = off;
   2b6f4:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   2b6f6:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   2b6f8:	4649      	mov	r1, r9
   2b6fa:	a803      	add	r0, sp, #12
   2b6fc:	47c0      	blx	r8
   2b6fe:	2800      	cmp	r0, #0
   2b700:	d0e7      	beq.n	2b6d2 <flash_page_foreach+0x20>
			off += page_info.size;
   2b702:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2b704:	3601      	adds	r6, #1
			off += page_info.size;
   2b706:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   2b708:	e7ec      	b.n	2b6e4 <flash_page_foreach+0x32>

0002b70a <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2b70a:	6843      	ldr	r3, [r0, #4]
   2b70c:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2b70e:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   2b712:	600b      	str	r3, [r1, #0]
}
   2b714:	2000      	movs	r0, #0
   2b716:	4770      	bx	lr

0002b718 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2b718:	6843      	ldr	r3, [r0, #4]
   2b71a:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   2b71c:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   2b720:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   2b724:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   2b728:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   2b72c:	2000      	movs	r0, #0
   2b72e:	4770      	bx	lr

0002b730 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2b730:	6843      	ldr	r3, [r0, #4]
   2b732:	685b      	ldr	r3, [r3, #4]
}
   2b734:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   2b736:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   2b73a:	4770      	bx	lr

0002b73c <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2b73c:	6843      	ldr	r3, [r0, #4]
   2b73e:	685b      	ldr	r3, [r3, #4]
}
   2b740:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2b742:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   2b746:	4770      	bx	lr

0002b748 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2b748:	6843      	ldr	r3, [r0, #4]
   2b74a:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2b74c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   2b750:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   2b754:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   2b756:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   2b75a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   2b75e:	2000      	movs	r0, #0
   2b760:	4770      	bx	lr

0002b762 <gpio_nrfx_manage_callback>:
{
   2b762:	b510      	push	{r4, lr}
	return port->data;
   2b764:	6903      	ldr	r3, [r0, #16]
	return list->head;
   2b766:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   2b768:	b1f8      	cbz	r0, 2b7aa <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2b76a:	4288      	cmp	r0, r1
   2b76c:	d119      	bne.n	2b7a2 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   2b76e:	689c      	ldr	r4, [r3, #8]
	return node->next;
   2b770:	6808      	ldr	r0, [r1, #0]
	list->head = node;
   2b772:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   2b774:	42a1      	cmp	r1, r4
   2b776:	d100      	bne.n	2b77a <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   2b778:	6098      	str	r0, [r3, #8]
	parent->next = child;
   2b77a:	2000      	movs	r0, #0
   2b77c:	6008      	str	r0, [r1, #0]
	if (set) {
   2b77e:	b12a      	cbz	r2, 2b78c <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   2b780:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2b782:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   2b784:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2b786:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2b788:	b902      	cbnz	r2, 2b78c <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   2b78a:	6099      	str	r1, [r3, #8]
	return 0;
   2b78c:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2b78e:	e010      	b.n	2b7b2 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2b790:	4281      	cmp	r1, r0
   2b792:	d106      	bne.n	2b7a2 <gpio_nrfx_manage_callback+0x40>
	return node->next;
   2b794:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   2b796:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   2b798:	6898      	ldr	r0, [r3, #8]
   2b79a:	4281      	cmp	r1, r0
   2b79c:	d1ed      	bne.n	2b77a <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   2b79e:	609c      	str	r4, [r3, #8]
}
   2b7a0:	e7eb      	b.n	2b77a <gpio_nrfx_manage_callback+0x18>
	return node->next;
   2b7a2:	4604      	mov	r4, r0
   2b7a4:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2b7a6:	2800      	cmp	r0, #0
   2b7a8:	d1f2      	bne.n	2b790 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   2b7aa:	2a00      	cmp	r2, #0
   2b7ac:	d1e8      	bne.n	2b780 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   2b7ae:	f06f 0015 	mvn.w	r0, #21
}
   2b7b2:	bd10      	pop	{r4, pc}

0002b7b4 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   2b7b4:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   2b7b6:	6843      	ldr	r3, [r0, #4]
   2b7b8:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   2b7ba:	7a05      	ldrb	r5, [r0, #8]
   2b7bc:	6844      	ldr	r4, [r0, #4]
   2b7be:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   2b7c2:	42a3      	cmp	r3, r4
   2b7c4:	d302      	bcc.n	2b7cc <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   2b7c6:	f06f 0001 	mvn.w	r0, #1
}
   2b7ca:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   2b7cc:	795c      	ldrb	r4, [r3, #5]
   2b7ce:	428c      	cmp	r4, r1
   2b7d0:	d001      	beq.n	2b7d6 <pinctrl_lookup_state+0x22>
		(*state)++;
   2b7d2:	3308      	adds	r3, #8
   2b7d4:	e7f0      	b.n	2b7b8 <pinctrl_lookup_state+0x4>
			return 0;
   2b7d6:	2000      	movs	r0, #0
   2b7d8:	e7f7      	b.n	2b7ca <pinctrl_lookup_state+0x16>

0002b7da <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
   2b7da:	6902      	ldr	r2, [r0, #16]
{
   2b7dc:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   2b7de:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   2b7e2:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2b7e6:	2000      	movs	r0, #0
   2b7e8:	4770      	bx	lr

0002b7ea <uarte_nrfx_err_check>:
	return config->uarte_regs;
   2b7ea:	6843      	ldr	r3, [r0, #4]
   2b7ec:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2b7ee:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2b7f2:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2b7f6:	4770      	bx	lr

0002b7f8 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   2b7f8:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   2b7fa:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   2b7fc:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2b7fe:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2b802:	b150      	cbz	r0, 2b81a <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
   2b804:	6952      	ldr	r2, [r2, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b806:	2000      	movs	r0, #0
   2b808:	7812      	ldrb	r2, [r2, #0]
   2b80a:	700a      	strb	r2, [r1, #0]
   2b80c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2b810:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2b814:	2201      	movs	r2, #1
   2b816:	601a      	str	r2, [r3, #0]
	return 0;
   2b818:	4770      	bx	lr
		return -1;
   2b81a:	f04f 30ff 	mov.w	r0, #4294967295
}
   2b81e:	4770      	bx	lr

0002b820 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   2b820:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   2b822:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2b824:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2b828:	b940      	cbnz	r0, 2b83c <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2b82a:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2b82c:	079b      	lsls	r3, r3, #30
   2b82e:	d406      	bmi.n	2b83e <is_tx_ready.isra.0+0x1e>
   2b830:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   2b834:	3800      	subs	r0, #0
   2b836:	bf18      	it	ne
   2b838:	2001      	movne	r0, #1
   2b83a:	4770      	bx	lr
   2b83c:	2001      	movs	r0, #1
}
   2b83e:	4770      	bx	lr

0002b840 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   2b840:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   2b842:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   2b844:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   2b848:	05c9      	lsls	r1, r1, #23
   2b84a:	d518      	bpl.n	2b87e <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2b84c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2b850:	b1a9      	cbz	r1, 2b87e <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   2b852:	f04f 0040 	mov.w	r0, #64	; 0x40
   2b856:	f3ef 8111 	mrs	r1, BASEPRI
   2b85a:	f380 8812 	msr	BASEPRI_MAX, r0
   2b85e:	f3bf 8f6f 	isb	sy
   2b862:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2b866:	b130      	cbz	r0, 2b876 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b868:	2000      	movs	r0, #0
   2b86a:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   2b86e:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2b872:	2001      	movs	r0, #1
   2b874:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   2b876:	f381 8811 	msr	BASEPRI, r1
   2b87a:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2b87e:	6852      	ldr	r2, [r2, #4]
   2b880:	06d2      	lsls	r2, r2, #27
   2b882:	d515      	bpl.n	2b8b0 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   2b884:	f04f 0140 	mov.w	r1, #64	; 0x40
   2b888:	f3ef 8211 	mrs	r2, BASEPRI
   2b88c:	f381 8812 	msr	BASEPRI_MAX, r1
   2b890:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2b894:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   2b898:	b111      	cbz	r1, 2b8a0 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2b89a:	2100      	movs	r1, #0
   2b89c:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   2b8a0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   2b8a4:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   2b8a8:	f382 8811 	msr	BASEPRI, r2
   2b8ac:	f3bf 8f6f 	isb	sy
}
   2b8b0:	4770      	bx	lr

0002b8b2 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2b8b2:	4770      	bx	lr

0002b8b4 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   2b8b4:	f100 0350 	add.w	r3, r0, #80	; 0x50
   2b8b8:	009b      	lsls	r3, r3, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2b8ba:	b29b      	uxth	r3, r3
   2b8bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2b8c0:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   2b8c4:	2200      	movs	r2, #0
   2b8c6:	601a      	str	r2, [r3, #0]
   2b8c8:	681b      	ldr	r3, [r3, #0]
}
   2b8ca:	4770      	bx	lr

0002b8cc <sys_clock_cycle_get_32>:
{
   2b8cc:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   2b8ce:	f7f4 fddb 	bl	20488 <z_nrf_rtc_timer_read>
}
   2b8d2:	bd08      	pop	{r3, pc}

0002b8d4 <hci_driver_close>:
{
   2b8d4:	b510      	push	{r4, lr}
		hci_ecdh_uninit();
   2b8d6:	f7f5 ff1d 	bl	21714 <hci_ecdh_uninit>
	err = MULTITHREADING_LOCK_ACQUIRE();
   2b8da:	f04f 30ff 	mov.w	r0, #4294967295
   2b8de:	f04f 31ff 	mov.w	r1, #4294967295
   2b8e2:	f7f4 ff7d 	bl	207e0 <multithreading_lock_acquire>
	if (err) {
   2b8e6:	4604      	mov	r4, r0
   2b8e8:	b920      	cbnz	r0, 2b8f4 <hci_driver_close+0x20>
	err = sdc_disable();
   2b8ea:	f7d4 ffdf 	bl	8ac <sdc_disable>
	if (err) {
   2b8ee:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   2b8f0:	f7f4 ff7e 	bl	207f0 <multithreading_lock_release>
}
   2b8f4:	4620      	mov	r0, r4
   2b8f6:	bd10      	pop	{r4, pc}

0002b8f8 <rand_prio_high_vector_get>:
static uint8_t rand_prio_high_vector_get(uint8_t *p_buff, uint8_t length)
   2b8f8:	f7f4 bfba 	b.w	20870 <rand_prio_low_vector_get>

0002b8fc <hci_driver_send>:
{
   2b8fc:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   2b8fe:	8a03      	ldrh	r3, [r0, #16]
{
   2b900:	4605      	mov	r5, r0
	if (!buf->len) {
   2b902:	b373      	cbz	r3, 2b962 <hci_driver_send+0x66>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   2b904:	7e03      	ldrb	r3, [r0, #24]
	switch (type) {
   2b906:	b1a3      	cbz	r3, 2b932 <hci_driver_send+0x36>
   2b908:	2b02      	cmp	r3, #2
   2b90a:	d12a      	bne.n	2b962 <hci_driver_send+0x66>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2b90c:	f04f 30ff 	mov.w	r0, #4294967295
   2b910:	f04f 31ff 	mov.w	r1, #4294967295
   2b914:	f7f4 ff64 	bl	207e0 <multithreading_lock_acquire>
	if (!errcode) {
   2b918:	4604      	mov	r4, r0
   2b91a:	b940      	cbnz	r0, 2b92e <hci_driver_send+0x32>
		errcode = sdc_hci_data_put(acl->data);
   2b91c:	68e8      	ldr	r0, [r5, #12]
   2b91e:	f7e1 fbfb 	bl	d118 <sdc_hci_data_put>
   2b922:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2b924:	f7f4 ff64 	bl	207f0 <multithreading_lock_release>
		if (errcode) {
   2b928:	b1b4      	cbz	r4, 2b958 <hci_driver_send+0x5c>
			receive_signal_raise();
   2b92a:	f7f4 ffb5 	bl	20898 <receive_signal_raise>
}
   2b92e:	4620      	mov	r0, r4
   2b930:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2b932:	f04f 30ff 	mov.w	r0, #4294967295
   2b936:	f04f 31ff 	mov.w	r1, #4294967295
   2b93a:	f7f4 ff51 	bl	207e0 <multithreading_lock_acquire>
	if (!errcode) {
   2b93e:	4604      	mov	r4, r0
   2b940:	2800      	cmp	r0, #0
   2b942:	d1f4      	bne.n	2b92e <hci_driver_send+0x32>
		errcode = hci_internal_cmd_put(cmd->data);
   2b944:	68e8      	ldr	r0, [r5, #12]
   2b946:	f7f5 f933 	bl	20bb0 <hci_internal_cmd_put>
   2b94a:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2b94c:	f7f4 ff50 	bl	207f0 <multithreading_lock_release>
	if (errcode) {
   2b950:	2c00      	cmp	r4, #0
   2b952:	d1ec      	bne.n	2b92e <hci_driver_send+0x32>
	receive_signal_raise();
   2b954:	f7f4 ffa0 	bl	20898 <receive_signal_raise>
		net_buf_unref(buf);
   2b958:	4628      	mov	r0, r5
   2b95a:	f7f3 f8a5 	bl	1eaa8 <net_buf_unref>
   2b95e:	2400      	movs	r4, #0
   2b960:	e7e5      	b.n	2b92e <hci_driver_send+0x32>
	switch (type) {
   2b962:	f06f 0415 	mvn.w	r4, #21
   2b966:	e7e2      	b.n	2b92e <hci_driver_send+0x32>

0002b968 <receive_work_handler>:
	hci_driver_receive_process();
   2b968:	f7f5 b8a6 	b.w	20ab8 <hci_driver_receive_process>

0002b96c <bt_encrypt_le>:

int bt_encrypt_le(const uint8_t key[BT_ECB_BLOCK_SIZE],
		  const uint8_t plaintext[BT_ECB_BLOCK_SIZE],
		  uint8_t enc_data[BT_ECB_BLOCK_SIZE])
{
   2b96c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b96e:	b08d      	sub	sp, #52	; 0x34
   2b970:	4615      	mov	r5, r2
   2b972:	466a      	mov	r2, sp
   2b974:	f100 0310 	add.w	r3, r0, #16
   2b978:	4616      	mov	r6, r2
		*pdst++ = *psrc--;
   2b97a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   2b97e:	f802 4b01 	strb.w	r4, [r2], #1
	for (; length > 0; length--) {
   2b982:	4283      	cmp	r3, r0
   2b984:	d1f9      	bne.n	2b97a <bt_encrypt_le+0xe>
   2b986:	aa04      	add	r2, sp, #16
   2b988:	f101 0310 	add.w	r3, r1, #16
   2b98c:	4617      	mov	r7, r2
		*pdst++ = *psrc--;
   2b98e:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   2b992:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
   2b996:	4299      	cmp	r1, r3
   2b998:	d1f9      	bne.n	2b98e <bt_encrypt_le+0x22>
	LOG_HEXDUMP_DBG(plaintext, BT_ECB_BLOCK_SIZE, "plaintext");

	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
	sys_memcpy_swap(plaintext_le, plaintext, BT_ECB_BLOCK_SIZE);

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2b99a:	f04f 30ff 	mov.w	r0, #4294967295
   2b99e:	f04f 31ff 	mov.w	r1, #4294967295
   2b9a2:	f7f4 ff1d 	bl	207e0 <multithreading_lock_acquire>

	if (!errcode) {
   2b9a6:	4604      	mov	r4, r0
   2b9a8:	b990      	cbnz	r0, 2b9d0 <bt_encrypt_le+0x64>
		errcode = sdc_soc_ecb_block_encrypt(key_le, plaintext_le, enc_data_le);
   2b9aa:	aa08      	add	r2, sp, #32
   2b9ac:	4639      	mov	r1, r7
   2b9ae:	4630      	mov	r0, r6
   2b9b0:	f7e1 f8f1 	bl	cb96 <sdc_soc_ecb_block_encrypt>
   2b9b4:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2b9b6:	f7f4 ff1b 	bl	207f0 <multithreading_lock_release>
	}

	if (!errcode) {
   2b9ba:	b94c      	cbnz	r4, 2b9d0 <bt_encrypt_le+0x64>
   2b9bc:	1e6b      	subs	r3, r5, #1
	psrc += length - 1;
   2b9be:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
   2b9c2:	350f      	adds	r5, #15
		*pdst++ = *psrc--;
   2b9c4:	f812 1901 	ldrb.w	r1, [r2], #-1
   2b9c8:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   2b9cc:	429d      	cmp	r5, r3
   2b9ce:	d1f9      	bne.n	2b9c4 <bt_encrypt_le+0x58>

		LOG_HEXDUMP_DBG(enc_data, BT_ECB_BLOCK_SIZE, "enc_data");
	}

	return errcode;
}
   2b9d0:	4620      	mov	r0, r4
   2b9d2:	b00d      	add	sp, #52	; 0x34
   2b9d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002b9d6 <sys_memcpy_swap.constprop.0>:
   2b9d6:	f101 0320 	add.w	r3, r1, #32
   2b9da:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   2b9dc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   2b9e0:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   2b9e4:	428b      	cmp	r3, r1
   2b9e6:	d1f9      	bne.n	2b9dc <sys_memcpy_swap.constprop.0+0x6>
}
   2b9e8:	4770      	bx	lr

0002b9ea <hci_cmd_le_generate_dhkey>:

uint8_t hci_cmd_le_generate_dhkey(struct bt_hci_cp_le_generate_dhkey *p_params)
{
	return cmd_le_generate_dhkey(p_params->key,
   2b9ea:	2100      	movs	r1, #0
   2b9ec:	f7f5 beb4 	b.w	21758 <cmd_le_generate_dhkey>

0002b9f0 <hci_cmd_le_generate_dhkey_v2>:
				     BT_HCI_LE_KEY_TYPE_GENERATED);
}

uint8_t hci_cmd_le_generate_dhkey_v2(struct bt_hci_cp_le_generate_dhkey_v2 *p_params)
{
	if (p_params->key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   2b9f0:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   2b9f4:	2901      	cmp	r1, #1
   2b9f6:	d801      	bhi.n	2b9fc <hci_cmd_le_generate_dhkey_v2+0xc>
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return cmd_le_generate_dhkey(p_params->key, p_params->key_type);
   2b9f8:	f7f5 beae 	b.w	21758 <cmd_le_generate_dhkey>
}
   2b9fc:	2012      	movs	r0, #18
   2b9fe:	4770      	bx	lr

0002ba00 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2ba00:	4668      	mov	r0, sp
   2ba02:	f020 0107 	bic.w	r1, r0, #7
   2ba06:	468d      	mov	sp, r1
   2ba08:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   2ba0a:	f7df fd19 	bl	b440 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   2ba0e:	f7e9 fa19 	bl	14e44 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   2ba12:	f7e9 fb01 	bl	15018 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2ba16:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2ba1a:	4685      	mov	sp, r0
   2ba1c:	4770      	bx	lr

0002ba1e <mpsl_low_prio_work_handler>:
{
   2ba1e:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   2ba20:	f04f 31ff 	mov.w	r1, #4294967295
   2ba24:	f04f 30ff 	mov.w	r0, #4294967295
   2ba28:	f7f4 feda 	bl	207e0 <multithreading_lock_acquire>
	mpsl_low_priority_process();
   2ba2c:	f7e5 f95a 	bl	10ce4 <mpsl_low_priority_process>
}
   2ba30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MULTITHREADING_LOCK_RELEASE();
   2ba34:	f7f4 bedc 	b.w	207f0 <multithreading_lock_release>

0002ba38 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2ba38:	4668      	mov	r0, sp
   2ba3a:	f020 0107 	bic.w	r1, r0, #7
   2ba3e:	468d      	mov	sp, r1
   2ba40:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   2ba42:	f7df fcb3 	bl	b3ac <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   2ba46:	f7e9 f9fd 	bl	14e44 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2ba4a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2ba4e:	4685      	mov	sp, r0
   2ba50:	4770      	bx	lr

0002ba52 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2ba52:	4668      	mov	r0, sp
   2ba54:	f020 0107 	bic.w	r1, r0, #7
   2ba58:	468d      	mov	sp, r1
   2ba5a:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   2ba5c:	f7dd f92e 	bl	8cbc <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   2ba60:	f7e9 f9f0 	bl	14e44 <_arch_isr_direct_pm>
   2ba64:	f7e9 fad8 	bl	15018 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2ba68:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2ba6c:	4685      	mov	sp, r0
   2ba6e:	4770      	bx	lr

0002ba70 <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(void)
{
   2ba70:	b508      	push	{r3, lr}

	mpsl_fem_init();
   2ba72:	f7e5 fb0d 	bl	11090 <mpsl_fem_init>

	return 0;
}
   2ba76:	2000      	movs	r0, #0
   2ba78:	bd08      	pop	{r3, pc}

0002ba7a <nrfx_clock_stop>:
	switch (domain) {
   2ba7a:	2801      	cmp	r0, #1
   2ba7c:	d101      	bne.n	2ba82 <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   2ba7e:	f7e0 bb73 	b.w	c168 <mpsl_clock_hfclk_release>
}
   2ba82:	4770      	bx	lr

0002ba84 <nrfx_clock_enable>:
}
   2ba84:	4770      	bx	lr

0002ba86 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   2ba86:	f7e0 b979 	b.w	bd7c <MPSL_IRQ_CLOCK_Handler>

0002ba8a <nrf_flash_sync_is_required>:
	return mpsl_is_initialized();
   2ba8a:	f7e0 bd51 	b.w	c530 <mpsl_is_initialized>

0002ba8e <nrf_flash_sync_get_timestamp_begin>:
}
   2ba8e:	4770      	bx	lr

0002ba90 <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   2ba90:	f7f9 b804 	b.w	24a9c <nrf_cc3xx_platform_init>

0002ba94 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(void)
{
   2ba94:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   2ba96:	f7e9 f819 	bl	14acc <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   2ba9a:	f7e9 f8ed 	bl	14c78 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal();
	return res;
}
   2ba9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   2baa2:	f7f8 bffb 	b.w	24a9c <nrf_cc3xx_platform_init>

0002baa6 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2baa6:	4700      	bx	r0

0002baa8 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2baa8:	f000 bc83 	b.w	2c3b2 <z_impl_k_busy_wait>

0002baac <nrf_gpio_reconfigure>:
{
   2baac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2baae:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2bab0:	a801      	add	r0, sp, #4
{
   2bab2:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   2bab6:	4616      	mov	r6, r2
   2bab8:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2baba:	f7f6 f94b 	bl	21d54 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2babe:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2bac0:	f1b6 0c00 	subs.w	ip, r6, #0
   2bac4:	bf18      	it	ne
   2bac6:	f04f 0c01 	movne.w	ip, #1
   2baca:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2bace:	1e0b      	subs	r3, r1, #0
   2bad0:	bf18      	it	ne
   2bad2:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2bad4:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2bad6:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2bada:	bf14      	ite	ne
   2badc:	f04f 0c0c 	movne.w	ip, #12
   2bae0:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2bae4:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2bae6:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2baea:	bf14      	ite	ne
   2baec:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   2baf0:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2baf4:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2baf6:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2bafa:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2bafe:	bf14      	ite	ne
   2bb00:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   2bb04:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2bb08:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   2bb0c:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2bb10:	b101      	cbz	r1, 2bb14 <nrf_gpio_reconfigure+0x68>
   2bb12:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2bb14:	b10e      	cbz	r6, 2bb1a <nrf_gpio_reconfigure+0x6e>
   2bb16:	7836      	ldrb	r6, [r6, #0]
   2bb18:	0076      	lsls	r6, r6, #1
   2bb1a:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2bb1c:	b10d      	cbz	r5, 2bb22 <nrf_gpio_reconfigure+0x76>
   2bb1e:	782d      	ldrb	r5, [r5, #0]
   2bb20:	00ad      	lsls	r5, r5, #2
   2bb22:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2bb24:	b10c      	cbz	r4, 2bb2a <nrf_gpio_reconfigure+0x7e>
   2bb26:	7824      	ldrb	r4, [r4, #0]
   2bb28:	0224      	lsls	r4, r4, #8
   2bb2a:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   2bb2c:	b10f      	cbz	r7, 2bb32 <nrf_gpio_reconfigure+0x86>
   2bb2e:	783f      	ldrb	r7, [r7, #0]
   2bb30:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2bb32:	430c      	orrs	r4, r1
   2bb34:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   2bb36:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   2bb3a:	b003      	add	sp, #12
   2bb3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002bb3e <nrf_gpio_cfg_sense_set>:
{
   2bb3e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2bb40:	f10d 030f 	add.w	r3, sp, #15
   2bb44:	9301      	str	r3, [sp, #4]
   2bb46:	2300      	movs	r3, #0
{
   2bb48:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2bb4c:	9300      	str	r3, [sp, #0]
   2bb4e:	461a      	mov	r2, r3
   2bb50:	4619      	mov	r1, r3
   2bb52:	f7ff ffab 	bl	2baac <nrf_gpio_reconfigure>
}
   2bb56:	b005      	add	sp, #20
   2bb58:	f85d fb04 	ldr.w	pc, [sp], #4

0002bb5c <nrfx_nvmc_flash_size_get>:
   2bb5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2bb60:	691a      	ldr	r2, [r3, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   2bb62:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   2bb64:	4350      	muls	r0, r2
   2bb66:	4770      	bx	lr

0002bb68 <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   2bb68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2bb6c:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   2bb6e:	4770      	bx	lr

0002bb70 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   2bb70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2bb74:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   2bb76:	4770      	bx	lr

0002bb78 <nrf_gpio_cfg_default>:
{
   2bb78:	b507      	push	{r0, r1, r2, lr}
   2bb7a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2bb7c:	a801      	add	r0, sp, #4
   2bb7e:	f7f6 fc91 	bl	224a4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2bb82:	9b01      	ldr	r3, [sp, #4]
   2bb84:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2bb88:	2202      	movs	r2, #2
   2bb8a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
   2bb8e:	b003      	add	sp, #12
   2bb90:	f85d fb04 	ldr.w	pc, [sp], #4

0002bb94 <nrfx_qspi_write>:
    return qspi_xfer((void *)p_tx_buffer, tx_buffer_length, dst_address, NRFX_QSPI_STATE_WRITE);
   2bb94:	2302      	movs	r3, #2
   2bb96:	f7f6 bc93 	b.w	224c0 <qspi_xfer>

0002bb9a <nrfx_qspi_read>:
    return qspi_xfer((void *)p_rx_buffer, rx_buffer_length, src_address, NRFX_QSPI_STATE_READ);
   2bb9a:	2303      	movs	r3, #3
   2bb9c:	f7f6 bc90 	b.w	224c0 <qspi_xfer>

0002bba0 <nrfx_qspi_chip_erase>:
    return nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_ALL, 0);
   2bba0:	2100      	movs	r1, #0
   2bba2:	2002      	movs	r0, #2
   2bba4:	f7f6 bf36 	b.w	22a14 <nrfx_qspi_erase>

0002bba8 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   2bba8:	f7f6 bf9a 	b.w	22ae0 <_DoInit>

0002bbac <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(void)
{
   2bbac:	b508      	push	{r3, lr}

	SEGGER_RTT_Init();
   2bbae:	f7ff fffb 	bl	2bba8 <SEGGER_RTT_Init>

	return 0;
}
   2bbb2:	2000      	movs	r0, #0
   2bbb4:	bd08      	pop	{r3, pc}

0002bbb6 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   2bbb6:	4770      	bx	lr

0002bbb8 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   2bbb8:	b140      	cbz	r0, 2bbcc <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   2bbba:	68c3      	ldr	r3, [r0, #12]
   2bbbc:	7858      	ldrb	r0, [r3, #1]
   2bbbe:	f010 0001 	ands.w	r0, r0, #1
   2bbc2:	bf1e      	ittt	ne
   2bbc4:	7818      	ldrbne	r0, [r3, #0]
   2bbc6:	fab0 f080 	clzne	r0, r0
   2bbca:	0940      	lsrne	r0, r0, #5
}
   2bbcc:	4770      	bx	lr

0002bbce <z_early_memset>:
	(void) memset(dst, c, n);
   2bbce:	f7fd b9b6 	b.w	28f3e <memset>

0002bbd2 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   2bbd2:	f7fd b9a9 	b.w	28f28 <memcpy>

0002bbd6 <k_heap_init>:
{
   2bbd6:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   2bbd8:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2bbdc:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2bbe0:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   2bbe2:	f7fb be8b 	b.w	278fc <sys_heap_init>

0002bbe6 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   2bbe6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bbea:	b085      	sub	sp, #20
   2bbec:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   2bbf0:	4607      	mov	r7, r0
   2bbf2:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2bbf4:	4650      	mov	r0, sl
   2bbf6:	4621      	mov	r1, r4
{
   2bbf8:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2bbfa:	f000 fbde 	bl	2c3ba <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   2bbfe:	f1b4 3fff 	cmp.w	r4, #4294967295
   2bc02:	bf08      	it	eq
   2bc04:	f1ba 3fff 	cmpeq.w	sl, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2bc08:	4605      	mov	r5, r0
   2bc0a:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   2bc0c:	bf04      	itt	eq
   2bc0e:	f04f 35ff 	moveq.w	r5, #4294967295
   2bc12:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2bc16:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
   2bc1a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2bc1e:	f3ef 8411 	mrs	r4, BASEPRI
   2bc22:	f383 8812 	msr	BASEPRI_MAX, r3
   2bc26:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2bc2a:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   2bc2e:	464a      	mov	r2, r9
   2bc30:	4641      	mov	r1, r8
   2bc32:	4638      	mov	r0, r7
   2bc34:	f7fb fdfb 	bl	2782e <sys_heap_aligned_alloc>
   2bc38:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   2bc3a:	f7f8 fa63 	bl	24104 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   2bc3e:	9b03      	ldr	r3, [sp, #12]
   2bc40:	b13b      	cbz	r3, 2bc52 <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   2bc42:	f384 8811 	msr	BASEPRI, r4
   2bc46:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   2bc4a:	4618      	mov	r0, r3
   2bc4c:	b005      	add	sp, #20
   2bc4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   2bc52:	1a28      	subs	r0, r5, r0
   2bc54:	eb66 0101 	sbc.w	r1, r6, r1
   2bc58:	2801      	cmp	r0, #1
   2bc5a:	f171 0200 	sbcs.w	r2, r1, #0
   2bc5e:	dbf0      	blt.n	2bc42 <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2bc60:	e9cd 0100 	strd	r0, r1, [sp]
   2bc64:	465a      	mov	r2, fp
   2bc66:	4621      	mov	r1, r4
   2bc68:	4650      	mov	r0, sl
   2bc6a:	f7f7 fed5 	bl	23a18 <z_pend_curr>
	__asm__ volatile(
   2bc6e:	f04f 0340 	mov.w	r3, #64	; 0x40
   2bc72:	f3ef 8411 	mrs	r4, BASEPRI
   2bc76:	f383 8812 	msr	BASEPRI_MAX, r3
   2bc7a:	f3bf 8f6f 	isb	sy
	return k;
   2bc7e:	e7d6      	b.n	2bc2e <k_heap_aligned_alloc+0x48>

0002bc80 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   2bc80:	b538      	push	{r3, r4, r5, lr}
   2bc82:	4604      	mov	r4, r0
   2bc84:	f04f 0340 	mov.w	r3, #64	; 0x40
   2bc88:	f3ef 8511 	mrs	r5, BASEPRI
   2bc8c:	f383 8812 	msr	BASEPRI_MAX, r3
   2bc90:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   2bc94:	f7fb fd93 	bl	277be <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   2bc98:	f104 000c 	add.w	r0, r4, #12
   2bc9c:	f000 fb1a 	bl	2c2d4 <z_unpend_all>
   2bca0:	b130      	cbz	r0, 2bcb0 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   2bca2:	4629      	mov	r1, r5
   2bca4:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   2bca8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   2bcac:	f7f7 bf18 	b.w	23ae0 <z_reschedule>
	__asm__ volatile(
   2bcb0:	f385 8811 	msr	BASEPRI, r5
   2bcb4:	f3bf 8f6f 	isb	sy
}
   2bcb8:	bd38      	pop	{r3, r4, r5, pc}

0002bcba <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2bcba:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
   2bcbe:	4313      	orrs	r3, r2
   2bcc0:	f013 0303 	ands.w	r3, r3, #3
   2bcc4:	d10c      	bne.n	2bce0 <create_free_list+0x26>
	slab->free_list = NULL;
   2bcc6:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2bcc8:	6881      	ldr	r1, [r0, #8]
   2bcca:	4299      	cmp	r1, r3
   2bccc:	d801      	bhi.n	2bcd2 <create_free_list+0x18>
	return 0;
   2bcce:	2000      	movs	r0, #0
   2bcd0:	4770      	bx	lr
		*(char **)p = slab->free_list;
   2bcd2:	6941      	ldr	r1, [r0, #20]
   2bcd4:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   2bcd6:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
   2bcd8:	6142      	str	r2, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2bcda:	3301      	adds	r3, #1
		p += slab->block_size;
   2bcdc:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   2bcde:	e7f3      	b.n	2bcc8 <create_free_list+0xe>
		return -EINVAL;
   2bce0:	f06f 0015 	mvn.w	r0, #21
}
   2bce4:	4770      	bx	lr

0002bce6 <k_mem_slab_init>:
{
   2bce6:	b510      	push	{r4, lr}
	slab->block_size = block_size;
   2bce8:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->num_used = 0U;
   2bcec:	2300      	movs	r3, #0
	slab->buffer = buffer;
   2bcee:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
   2bcf0:	6183      	str	r3, [r0, #24]
{
   2bcf2:	4604      	mov	r4, r0
	rc = create_free_list(slab);
   2bcf4:	f7ff ffe1 	bl	2bcba <create_free_list>
	if (rc < 0) {
   2bcf8:	2800      	cmp	r0, #0
   2bcfa:	bfa8      	it	ge
   2bcfc:	e9c4 4400 	strdge	r4, r4, [r4]
}
   2bd00:	bd10      	pop	{r4, pc}

0002bd02 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   2bd02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bd04:	4604      	mov	r4, r0
   2bd06:	460d      	mov	r5, r1
	__asm__ volatile(
   2bd08:	f04f 0340 	mov.w	r3, #64	; 0x40
   2bd0c:	f3ef 8611 	mrs	r6, BASEPRI
   2bd10:	f383 8812 	msr	BASEPRI_MAX, r3
   2bd14:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   2bd18:	6947      	ldr	r7, [r0, #20]
   2bd1a:	b977      	cbnz	r7, 2bd3a <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   2bd1c:	f000 fa90 	bl	2c240 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   2bd20:	b158      	cbz	r0, 2bd3a <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   2bd22:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   2bd24:	6142      	str	r2, [r0, #20]
   2bd26:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   2bd28:	f000 fa2b 	bl	2c182 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   2bd2c:	4631      	mov	r1, r6
   2bd2e:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   2bd32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   2bd36:	f7f7 bed3 	b.w	23ae0 <z_reschedule>
	**(char ***) mem = slab->free_list;
   2bd3a:	682b      	ldr	r3, [r5, #0]
   2bd3c:	6962      	ldr	r2, [r4, #20]
   2bd3e:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   2bd40:	682b      	ldr	r3, [r5, #0]
   2bd42:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   2bd44:	69a3      	ldr	r3, [r4, #24]
   2bd46:	3b01      	subs	r3, #1
   2bd48:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   2bd4a:	f386 8811 	msr	BASEPRI, r6
   2bd4e:	f3bf 8f6f 	isb	sy
}
   2bd52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002bd54 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2bd54:	f3ef 8005 	mrs	r0, IPSR
}
   2bd58:	3800      	subs	r0, #0
   2bd5a:	bf18      	it	ne
   2bd5c:	2001      	movne	r0, #1
   2bd5e:	4770      	bx	lr

0002bd60 <z_impl_k_thread_name_set>:
}
   2bd60:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2bd64:	4770      	bx	lr

0002bd66 <k_thread_name_get>:
}
   2bd66:	2000      	movs	r0, #0
   2bd68:	4770      	bx	lr

0002bd6a <z_impl_k_thread_start>:
	z_sched_start(thread);
   2bd6a:	f7f7 becb 	b.w	23b04 <z_sched_start>

0002bd6e <z_pm_save_idle_exit>:
{
   2bd6e:	b508      	push	{r3, lr}
	pm_system_resume();
   2bd70:	f7e8 fac8 	bl	14304 <pm_system_resume>
}
   2bd74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   2bd78:	f7ff bd9b 	b.w	2b8b2 <sys_clock_idle_exit>

0002bd7c <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   2bd7c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2bd80:	428b      	cmp	r3, r1
   2bd82:	d001      	beq.n	2bd88 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   2bd84:	f7f7 be66 	b.w	23a54 <z_set_prio>
}
   2bd88:	2000      	movs	r0, #0
   2bd8a:	4770      	bx	lr

0002bd8c <z_impl_k_mutex_init>:
{
   2bd8c:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2bd8e:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   2bd90:	e9c3 0002 	strd	r0, r0, [r3, #8]
   2bd94:	e9c3 3300 	strd	r3, r3, [r3]
}
   2bd98:	4770      	bx	lr

0002bd9a <queue_insert>:
{
   2bd9a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2bd9e:	4699      	mov	r9, r3
   2bda0:	4604      	mov	r4, r0
   2bda2:	f89d 3020 	ldrb.w	r3, [sp, #32]
   2bda6:	460d      	mov	r5, r1
   2bda8:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2bdaa:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   2bdae:	f04f 0240 	mov.w	r2, #64	; 0x40
   2bdb2:	f3ef 8711 	mrs	r7, BASEPRI
   2bdb6:	f382 8812 	msr	BASEPRI_MAX, r2
   2bdba:	f3bf 8f6f 	isb	sy
	if (is_append) {
   2bdbe:	b103      	cbz	r3, 2bdc2 <queue_insert+0x28>
	return list->tail;
   2bdc0:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   2bdc2:	4630      	mov	r0, r6
   2bdc4:	f000 fa3c 	bl	2c240 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   2bdc8:	b158      	cbz	r0, 2bde2 <queue_insert+0x48>
   2bdca:	2300      	movs	r3, #0
   2bdcc:	67c3      	str	r3, [r0, #124]	; 0x7c
   2bdce:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   2bdd2:	f000 f9d6 	bl	2c182 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   2bdd6:	4630      	mov	r0, r6
   2bdd8:	4639      	mov	r1, r7
   2bdda:	f7f7 fe81 	bl	23ae0 <z_reschedule>
		return 0;
   2bdde:	2000      	movs	r0, #0
   2bde0:	e00c      	b.n	2bdfc <queue_insert+0x62>
	if (alloc) {
   2bde2:	f1b9 0f00 	cmp.w	r9, #0
   2bde6:	d01b      	beq.n	2be20 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   2bde8:	2108      	movs	r1, #8
   2bdea:	f7f8 facb 	bl	24384 <z_thread_aligned_alloc>
		if (anode == NULL) {
   2bdee:	b938      	cbnz	r0, 2be00 <queue_insert+0x66>
	__asm__ volatile(
   2bdf0:	f387 8811 	msr	BASEPRI, r7
   2bdf4:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2bdf8:	f06f 000b 	mvn.w	r0, #11
}
   2bdfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   2be00:	2201      	movs	r2, #1
		anode->data = data;
   2be02:	f8c0 8004 	str.w	r8, [r0, #4]
   2be06:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2be08:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2be0a:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   2be0e:	b95d      	cbnz	r5, 2be28 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2be10:	6822      	ldr	r2, [r4, #0]
   2be12:	430a      	orrs	r2, r1
   2be14:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2be16:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   2be18:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2be1a:	b96a      	cbnz	r2, 2be38 <queue_insert+0x9e>
	list->tail = node;
   2be1c:	6060      	str	r0, [r4, #4]
}
   2be1e:	e00b      	b.n	2be38 <queue_insert+0x9e>
	node->next_and_flags = flags;
   2be20:	f8c8 9000 	str.w	r9, [r8]
}
   2be24:	4640      	mov	r0, r8
   2be26:	e7ef      	b.n	2be08 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2be28:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2be2a:	2a03      	cmp	r2, #3
   2be2c:	d810      	bhi.n	2be50 <queue_insert+0xb6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2be2e:	6001      	str	r1, [r0, #0]
	return list->tail;
   2be30:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   2be32:	b939      	cbnz	r1, 2be44 <queue_insert+0xaa>
	list->head = node;
   2be34:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2be38:	2104      	movs	r1, #4
   2be3a:	f104 0010 	add.w	r0, r4, #16
   2be3e:	f000 fc47 	bl	2c6d0 <z_handle_obj_poll_events>
   2be42:	e7c8      	b.n	2bdd6 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2be44:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2be46:	f002 0203 	and.w	r2, r2, #3
   2be4a:	4302      	orrs	r2, r0
   2be4c:	600a      	str	r2, [r1, #0]
   2be4e:	e7e5      	b.n	2be1c <queue_insert+0x82>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2be50:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2be54:	430a      	orrs	r2, r1
   2be56:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2be58:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2be5a:	f002 0203 	and.w	r2, r2, #3
   2be5e:	ea40 0302 	orr.w	r3, r0, r2
   2be62:	602b      	str	r3, [r5, #0]
}
   2be64:	e7e8      	b.n	2be38 <queue_insert+0x9e>

0002be66 <z_queue_node_peek>:
{
   2be66:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2be68:	4604      	mov	r4, r0
   2be6a:	b130      	cbz	r0, 2be7a <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2be6c:	6802      	ldr	r2, [r0, #0]
   2be6e:	0793      	lsls	r3, r2, #30
   2be70:	d003      	beq.n	2be7a <z_queue_node_peek+0x14>
		ret = anode->data;
   2be72:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2be74:	b109      	cbz	r1, 2be7a <z_queue_node_peek+0x14>
			k_free(anode);
   2be76:	f000 fc41 	bl	2c6fc <k_free>
}
   2be7a:	4620      	mov	r0, r4
   2be7c:	bd10      	pop	{r4, pc}

0002be7e <z_impl_k_queue_init>:
	list->head = NULL;
   2be7e:	2300      	movs	r3, #0
	list->tail = NULL;
   2be80:	e9c0 3300 	strd	r3, r3, [r0]
   2be84:	f100 0308 	add.w	r3, r0, #8
   2be88:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   2be8c:	f100 0310 	add.w	r3, r0, #16
   2be90:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   2be94:	4770      	bx	lr

0002be96 <k_queue_append>:
{
   2be96:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2be98:	2301      	movs	r3, #1
   2be9a:	9300      	str	r3, [sp, #0]
   2be9c:	2300      	movs	r3, #0
{
   2be9e:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2bea0:	4619      	mov	r1, r3
   2bea2:	f7ff ff7a 	bl	2bd9a <queue_insert>
}
   2bea6:	b003      	add	sp, #12
   2bea8:	f85d fb04 	ldr.w	pc, [sp], #4

0002beac <k_queue_prepend>:
{
   2beac:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   2beae:	2300      	movs	r3, #0
{
   2beb0:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2beb2:	9300      	str	r3, [sp, #0]
   2beb4:	4619      	mov	r1, r3
   2beb6:	f7ff ff70 	bl	2bd9a <queue_insert>
}
   2beba:	b003      	add	sp, #12
   2bebc:	f85d fb04 	ldr.w	pc, [sp], #4

0002bec0 <z_impl_k_queue_peek_head>:
	return true;
}

void *z_impl_k_queue_peek_head(struct k_queue *queue)
{
	void *ret = z_queue_node_peek(sys_sflist_peek_head(&queue->data_q), false);
   2bec0:	6800      	ldr	r0, [r0, #0]
   2bec2:	2100      	movs	r1, #0
   2bec4:	f7ff bfcf 	b.w	2be66 <z_queue_node_peek>

0002bec8 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2bec8:	b15a      	cbz	r2, 2bee2 <z_impl_k_sem_init+0x1a>
   2beca:	428a      	cmp	r2, r1
   2becc:	d309      	bcc.n	2bee2 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2bece:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2bed2:	e9c0 1202 	strd	r1, r2, [r0, #8]
   2bed6:	e9c0 0000 	strd	r0, r0, [r0]
   2beda:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2bede:	2000      	movs	r0, #0
   2bee0:	4770      	bx	lr
		return -EINVAL;
   2bee2:	f06f 0015 	mvn.w	r0, #21
}
   2bee6:	4770      	bx	lr

0002bee8 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   2bee8:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   2beea:	2301      	movs	r3, #1
   2beec:	408b      	lsls	r3, r1
   2beee:	ea22 0303 	bic.w	r3, r2, r3
   2bef2:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   2bef4:	fa22 f001 	lsr.w	r0, r2, r1
}
   2bef8:	f000 0001 	and.w	r0, r0, #1
   2befc:	4770      	bx	lr

0002befe <unschedule_locked>:
{
   2befe:	b510      	push	{r4, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2bf00:	2103      	movs	r1, #3
{
   2bf02:	4604      	mov	r4, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2bf04:	300c      	adds	r0, #12
   2bf06:	f7ff ffef 	bl	2bee8 <flag_test_and_clear>
   2bf0a:	b130      	cbz	r0, 2bf1a <unschedule_locked+0x1c>
		ret = z_abort_timeout(&dwork->timeout) == 0;
   2bf0c:	f104 0010 	add.w	r0, r4, #16
   2bf10:	f000 fa13 	bl	2c33a <z_abort_timeout>
   2bf14:	fab0 f080 	clz	r0, r0
   2bf18:	0940      	lsrs	r0, r0, #5
}
   2bf1a:	bd10      	pop	{r4, pc}

0002bf1c <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   2bf1c:	b120      	cbz	r0, 2bf28 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   2bf1e:	2200      	movs	r2, #0
   2bf20:	4611      	mov	r1, r2
   2bf22:	3088      	adds	r0, #136	; 0x88
   2bf24:	f000 b9e6 	b.w	2c2f4 <z_sched_wake>
}
   2bf28:	4770      	bx	lr

0002bf2a <cancel_async_locked>:
{
   2bf2a:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   2bf2c:	68c3      	ldr	r3, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2bf2e:	f3c3 0640 	ubfx	r6, r3, #1, #1
   2bf32:	079b      	lsls	r3, r3, #30
{
   2bf34:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2bf36:	d416      	bmi.n	2bf66 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   2bf38:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2bf3a:	2102      	movs	r1, #2
   2bf3c:	300c      	adds	r0, #12
   2bf3e:	f7ff ffd3 	bl	2bee8 <flag_test_and_clear>
   2bf42:	b180      	cbz	r0, 2bf66 <cancel_async_locked+0x3c>
	return list->head;
   2bf44:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2bf48:	b16a      	cbz	r2, 2bf66 <cancel_async_locked+0x3c>
   2bf4a:	4294      	cmp	r4, r2
   2bf4c:	d11d      	bne.n	2bf8a <cancel_async_locked+0x60>
	return node->next;
   2bf4e:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   2bf50:	b99e      	cbnz	r6, 2bf7a <cancel_async_locked+0x50>
   2bf52:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
	list->head = node;
   2bf56:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   2bf5a:	429c      	cmp	r4, r3
   2bf5c:	d101      	bne.n	2bf62 <cancel_async_locked+0x38>
	list->tail = node;
   2bf5e:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
	parent->next = child;
   2bf62:	2300      	movs	r3, #0
   2bf64:	6023      	str	r3, [r4, #0]
	return *flagp;
   2bf66:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   2bf68:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   2bf6c:	bf1e      	ittt	ne
   2bf6e:	f043 0302 	orrne.w	r3, r3, #2
   2bf72:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2bf74:	f040 0002 	orrne.w	r0, r0, #2
}
   2bf78:	bd70      	pop	{r4, r5, r6, pc}
   2bf7a:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   2bf7c:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
   2bf80:	4294      	cmp	r4, r2
	list->tail = node;
   2bf82:	bf08      	it	eq
   2bf84:	f8c5 6084 	streq.w	r6, [r5, #132]	; 0x84
}
   2bf88:	e7eb      	b.n	2bf62 <cancel_async_locked+0x38>
	return node->next;
   2bf8a:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2bf8c:	6812      	ldr	r2, [r2, #0]
   2bf8e:	e7db      	b.n	2bf48 <cancel_async_locked+0x1e>

0002bf90 <work_timeout>:
{
   2bf90:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2bf92:	4604      	mov	r4, r0
	__asm__ volatile(
   2bf94:	f04f 0340 	mov.w	r3, #64	; 0x40
   2bf98:	f3ef 8511 	mrs	r5, BASEPRI
   2bf9c:	f383 8812 	msr	BASEPRI_MAX, r3
   2bfa0:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   2bfa4:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2bfa6:	f1a0 0610 	sub.w	r6, r0, #16
   2bfaa:	2103      	movs	r1, #3
   2bfac:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   2bfae:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2bfb0:	f7ff ff9a 	bl	2bee8 <flag_test_and_clear>
   2bfb4:	b128      	cbz	r0, 2bfc2 <work_timeout+0x32>
		queue = dw->queue;
   2bfb6:	69a3      	ldr	r3, [r4, #24]
   2bfb8:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   2bfba:	a901      	add	r1, sp, #4
   2bfbc:	4630      	mov	r0, r6
   2bfbe:	f7f7 faed 	bl	2359c <submit_to_queue_locked>
	__asm__ volatile(
   2bfc2:	f385 8811 	msr	BASEPRI, r5
   2bfc6:	f3bf 8f6f 	isb	sy
}
   2bfca:	b002      	add	sp, #8
   2bfcc:	bd70      	pop	{r4, r5, r6, pc}

0002bfce <k_work_init>:
{
   2bfce:	b538      	push	{r3, r4, r5, lr}
   2bfd0:	4604      	mov	r4, r0
   2bfd2:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2bfd4:	2210      	movs	r2, #16
   2bfd6:	2100      	movs	r1, #0
   2bfd8:	f7fc ffb1 	bl	28f3e <memset>
   2bfdc:	6065      	str	r5, [r4, #4]
}
   2bfde:	bd38      	pop	{r3, r4, r5, pc}

0002bfe0 <k_work_busy_get>:
	__asm__ volatile(
   2bfe0:	f04f 0240 	mov.w	r2, #64	; 0x40
   2bfe4:	f3ef 8311 	mrs	r3, BASEPRI
   2bfe8:	f382 8812 	msr	BASEPRI_MAX, r2
   2bfec:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   2bff0:	68c0      	ldr	r0, [r0, #12]
   2bff2:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   2bff6:	f383 8811 	msr	BASEPRI, r3
   2bffa:	f3bf 8f6f 	isb	sy
}
   2bffe:	4770      	bx	lr

0002c000 <z_work_submit_to_queue>:
{
   2c000:	b513      	push	{r0, r1, r4, lr}
   2c002:	9001      	str	r0, [sp, #4]
   2c004:	4608      	mov	r0, r1
	__asm__ volatile(
   2c006:	f04f 0340 	mov.w	r3, #64	; 0x40
   2c00a:	f3ef 8411 	mrs	r4, BASEPRI
   2c00e:	f383 8812 	msr	BASEPRI_MAX, r3
   2c012:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   2c016:	a901      	add	r1, sp, #4
   2c018:	f7f7 fac0 	bl	2359c <submit_to_queue_locked>
	__asm__ volatile(
   2c01c:	f384 8811 	msr	BASEPRI, r4
   2c020:	f3bf 8f6f 	isb	sy
}
   2c024:	b002      	add	sp, #8
   2c026:	bd10      	pop	{r4, pc}

0002c028 <k_work_submit_to_queue>:
{
   2c028:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   2c02a:	f7ff ffe9 	bl	2c000 <z_work_submit_to_queue>
	if (ret > 0) {
   2c02e:	1e04      	subs	r4, r0, #0
   2c030:	dd09      	ble.n	2c046 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   2c032:	f04f 0340 	mov.w	r3, #64	; 0x40
   2c036:	f3ef 8011 	mrs	r0, BASEPRI
   2c03a:	f383 8812 	msr	BASEPRI_MAX, r3
   2c03e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2c042:	f000 f931 	bl	2c2a8 <z_reschedule_irqlock>
}
   2c046:	4620      	mov	r0, r4
   2c048:	bd10      	pop	{r4, pc}

0002c04a <k_work_queue_init>:
{
   2c04a:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   2c04c:	22a0      	movs	r2, #160	; 0xa0
   2c04e:	2100      	movs	r1, #0
   2c050:	f7fc ff75 	bl	28f3e <memset>
}
   2c054:	bd08      	pop	{r3, pc}

0002c056 <k_work_init_delayable>:
{
   2c056:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   2c058:	2230      	movs	r2, #48	; 0x30
{
   2c05a:	4604      	mov	r4, r0
   2c05c:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   2c05e:	2100      	movs	r1, #0
   2c060:	f7fc ff6d 	bl	28f3e <memset>
   2c064:	f44f 7380 	mov.w	r3, #256	; 0x100
   2c068:	6065      	str	r5, [r4, #4]
   2c06a:	60e3      	str	r3, [r4, #12]
}
   2c06c:	bd38      	pop	{r3, r4, r5, pc}

0002c06e <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   2c06e:	f7ff bfb7 	b.w	2bfe0 <k_work_busy_get>

0002c072 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   2c072:	b538      	push	{r3, r4, r5, lr}
   2c074:	4604      	mov	r4, r0
   2c076:	f04f 0340 	mov.w	r3, #64	; 0x40
   2c07a:	f3ef 8511 	mrs	r5, BASEPRI
   2c07e:	f383 8812 	msr	BASEPRI_MAX, r3
   2c082:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   2c086:	f7ff ff3a 	bl	2befe <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2c08a:	4620      	mov	r0, r4
   2c08c:	f7ff ff4d 	bl	2bf2a <cancel_async_locked>
	__asm__ volatile(
   2c090:	f385 8811 	msr	BASEPRI, r5
   2c094:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   2c098:	bd38      	pop	{r3, r4, r5, pc}

0002c09a <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   2c09a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c09c:	4604      	mov	r4, r0
   2c09e:	460d      	mov	r5, r1
	__asm__ volatile(
   2c0a0:	f04f 0340 	mov.w	r3, #64	; 0x40
   2c0a4:	f3ef 8611 	mrs	r6, BASEPRI
   2c0a8:	f383 8812 	msr	BASEPRI_MAX, r3
   2c0ac:	f3bf 8f6f 	isb	sy
	return *flagp;
   2c0b0:	68c3      	ldr	r3, [r0, #12]
   2c0b2:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   2c0b6:	2b00      	cmp	r3, #0
   2c0b8:	bf14      	ite	ne
   2c0ba:	2701      	movne	r7, #1
   2c0bc:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   2c0be:	d105      	bne.n	2c0cc <k_work_cancel_delayable_sync+0x32>
	__asm__ volatile(
   2c0c0:	f386 8811 	msr	BASEPRI, r6
   2c0c4:	f3bf 8f6f 	isb	sy
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   2c0c8:	4638      	mov	r0, r7
   2c0ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	(void)unschedule_locked(dwork);
   2c0cc:	f7ff ff17 	bl	2befe <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2c0d0:	4620      	mov	r0, r4
   2c0d2:	f7ff ff2a 	bl	2bf2a <cancel_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   2c0d6:	4629      	mov	r1, r5
   2c0d8:	4620      	mov	r0, r4
   2c0da:	f7f7 fa41 	bl	23560 <cancel_sync_locked>
   2c0de:	f386 8811 	msr	BASEPRI, r6
   2c0e2:	f3bf 8f6f 	isb	sy
	if (need_wait) {
   2c0e6:	2800      	cmp	r0, #0
   2c0e8:	d0ee      	beq.n	2c0c8 <k_work_cancel_delayable_sync+0x2e>
	return z_impl_k_sem_take(sem, timeout);
   2c0ea:	f04f 32ff 	mov.w	r2, #4294967295
   2c0ee:	f04f 33ff 	mov.w	r3, #4294967295
   2c0f2:	f105 0008 	add.w	r0, r5, #8
   2c0f6:	f7f7 f933 	bl	23360 <z_impl_k_sem_take>
   2c0fa:	e7e5      	b.n	2c0c8 <k_work_cancel_delayable_sync+0x2e>

0002c0fc <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   2c0fc:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2c100:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2c102:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2c104:	2300      	movs	r3, #0
	node->prev = NULL;
   2c106:	e9c0 3300 	strd	r3, r3, [r0]
}
   2c10a:	4770      	bx	lr

0002c10c <unpend_thread_no_timeout>:
{
   2c10c:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   2c10e:	f7ff fff5 	bl	2c0fc <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2c112:	7b43      	ldrb	r3, [r0, #13]
   2c114:	f023 0302 	bic.w	r3, r3, #2
   2c118:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   2c11a:	2300      	movs	r3, #0
   2c11c:	6083      	str	r3, [r0, #8]
}
   2c11e:	bd08      	pop	{r3, pc}

0002c120 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   2c120:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2c124:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2c128:	4283      	cmp	r3, r0
		return b2 - b1;
   2c12a:	bf14      	ite	ne
   2c12c:	1ac0      	subne	r0, r0, r3
	return 0;
   2c12e:	2000      	moveq	r0, #0
}
   2c130:	4770      	bx	lr

0002c132 <add_to_waitq_locked>:
{
   2c132:	b538      	push	{r3, r4, r5, lr}
   2c134:	4604      	mov	r4, r0
   2c136:	460d      	mov	r5, r1
	unready_thread(thread);
   2c138:	f7f7 fc0e 	bl	23958 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2c13c:	7b63      	ldrb	r3, [r4, #13]
   2c13e:	f043 0302 	orr.w	r3, r3, #2
   2c142:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2c144:	b1e5      	cbz	r5, 2c180 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   2c146:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   2c148:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2c14a:	429d      	cmp	r5, r3
   2c14c:	d109      	bne.n	2c162 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   2c14e:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   2c150:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   2c154:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2c156:	606c      	str	r4, [r5, #4]
}
   2c158:	e012      	b.n	2c180 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   2c15a:	686a      	ldr	r2, [r5, #4]
   2c15c:	4293      	cmp	r3, r2
   2c15e:	d0f6      	beq.n	2c14e <add_to_waitq_locked+0x1c>
   2c160:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2c162:	2b00      	cmp	r3, #0
   2c164:	d0f3      	beq.n	2c14e <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   2c166:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2c16a:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   2c16e:	428a      	cmp	r2, r1
   2c170:	d0f3      	beq.n	2c15a <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2c172:	4291      	cmp	r1, r2
   2c174:	ddf1      	ble.n	2c15a <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   2c176:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2c178:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   2c17c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2c17e:	605c      	str	r4, [r3, #4]
}
   2c180:	bd38      	pop	{r3, r4, r5, pc}

0002c182 <z_ready_thread>:
{
   2c182:	b510      	push	{r4, lr}
	__asm__ volatile(
   2c184:	f04f 0340 	mov.w	r3, #64	; 0x40
   2c188:	f3ef 8411 	mrs	r4, BASEPRI
   2c18c:	f383 8812 	msr	BASEPRI_MAX, r3
   2c190:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   2c194:	f7f7 fbac 	bl	238f0 <ready_thread>
	__asm__ volatile(
   2c198:	f384 8811 	msr	BASEPRI, r4
   2c19c:	f3bf 8f6f 	isb	sy
}
   2c1a0:	bd10      	pop	{r4, pc}

0002c1a2 <z_unpend_thread_no_timeout>:
{
   2c1a2:	b508      	push	{r3, lr}
	__asm__ volatile(
   2c1a4:	f04f 0240 	mov.w	r2, #64	; 0x40
   2c1a8:	f3ef 8111 	mrs	r1, BASEPRI
   2c1ac:	f382 8812 	msr	BASEPRI_MAX, r2
   2c1b0:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   2c1b4:	6883      	ldr	r3, [r0, #8]
   2c1b6:	b10b      	cbz	r3, 2c1bc <z_unpend_thread_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
   2c1b8:	f7ff ffa8 	bl	2c10c <unpend_thread_no_timeout>
	__asm__ volatile(
   2c1bc:	f381 8811 	msr	BASEPRI, r1
   2c1c0:	f3bf 8f6f 	isb	sy
}
   2c1c4:	bd08      	pop	{r3, pc}

0002c1c6 <z_sched_wake_thread>:
{
   2c1c6:	b538      	push	{r3, r4, r5, lr}
   2c1c8:	4604      	mov	r4, r0
	__asm__ volatile(
   2c1ca:	f04f 0340 	mov.w	r3, #64	; 0x40
   2c1ce:	f3ef 8511 	mrs	r5, BASEPRI
   2c1d2:	f383 8812 	msr	BASEPRI_MAX, r3
   2c1d6:	f3bf 8f6f 	isb	sy
		if (!killed) {
   2c1da:	7b43      	ldrb	r3, [r0, #13]
   2c1dc:	f013 0f28 	tst.w	r3, #40	; 0x28
   2c1e0:	d10b      	bne.n	2c1fa <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
   2c1e2:	6883      	ldr	r3, [r0, #8]
   2c1e4:	b10b      	cbz	r3, 2c1ea <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
   2c1e6:	f7ff ff91 	bl	2c10c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2c1ea:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
   2c1ec:	b951      	cbnz	r1, 2c204 <z_sched_wake_thread+0x3e>
   2c1ee:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2c1f2:	7363      	strb	r3, [r4, #13]
			ready_thread(thread);
   2c1f4:	4620      	mov	r0, r4
   2c1f6:	f7f7 fb7b 	bl	238f0 <ready_thread>
	__asm__ volatile(
   2c1fa:	f385 8811 	msr	BASEPRI, r5
   2c1fe:	f3bf 8f6f 	isb	sy
}
   2c202:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2c204:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
   2c208:	e7f3      	b.n	2c1f2 <z_sched_wake_thread+0x2c>

0002c20a <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
   2c20a:	2101      	movs	r1, #1
   2c20c:	3818      	subs	r0, #24
   2c20e:	f7ff bfda 	b.w	2c1c6 <z_sched_wake_thread>

0002c212 <z_unpend1_no_timeout>:
{
   2c212:	b508      	push	{r3, lr}
   2c214:	4603      	mov	r3, r0
	__asm__ volatile(
   2c216:	f04f 0240 	mov.w	r2, #64	; 0x40
   2c21a:	f3ef 8111 	mrs	r1, BASEPRI
   2c21e:	f382 8812 	msr	BASEPRI_MAX, r2
   2c222:	f3bf 8f6f 	isb	sy
	return list->head == list;
   2c226:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2c228:	4283      	cmp	r3, r0
   2c22a:	d007      	beq.n	2c23c <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
   2c22c:	b108      	cbz	r0, 2c232 <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
   2c22e:	f7ff ff6d 	bl	2c10c <unpend_thread_no_timeout>
	__asm__ volatile(
   2c232:	f381 8811 	msr	BASEPRI, r1
   2c236:	f3bf 8f6f 	isb	sy
}
   2c23a:	bd08      	pop	{r3, pc}
   2c23c:	2000      	movs	r0, #0
   2c23e:	e7f8      	b.n	2c232 <z_unpend1_no_timeout+0x20>

0002c240 <z_unpend_first_thread>:
{
   2c240:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2c242:	f04f 0340 	mov.w	r3, #64	; 0x40
   2c246:	f3ef 8511 	mrs	r5, BASEPRI
   2c24a:	f383 8812 	msr	BASEPRI_MAX, r3
   2c24e:	f3bf 8f6f 	isb	sy
	return list->head == list;
   2c252:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2c254:	42a0      	cmp	r0, r4
   2c256:	d00d      	beq.n	2c274 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   2c258:	b134      	cbz	r4, 2c268 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   2c25a:	4620      	mov	r0, r4
   2c25c:	f7ff ff56 	bl	2c10c <unpend_thread_no_timeout>
   2c260:	f104 0018 	add.w	r0, r4, #24
   2c264:	f000 f869 	bl	2c33a <z_abort_timeout>
	__asm__ volatile(
   2c268:	f385 8811 	msr	BASEPRI, r5
   2c26c:	f3bf 8f6f 	isb	sy
}
   2c270:	4620      	mov	r0, r4
   2c272:	bd38      	pop	{r3, r4, r5, pc}
   2c274:	2400      	movs	r4, #0
   2c276:	e7f7      	b.n	2c268 <z_unpend_first_thread+0x28>

0002c278 <z_unpend_thread>:
{
   2c278:	b510      	push	{r4, lr}
   2c27a:	4601      	mov	r1, r0
	__asm__ volatile(
   2c27c:	f04f 0340 	mov.w	r3, #64	; 0x40
   2c280:	f3ef 8411 	mrs	r4, BASEPRI
   2c284:	f383 8812 	msr	BASEPRI_MAX, r3
   2c288:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   2c28c:	6883      	ldr	r3, [r0, #8]
   2c28e:	b10b      	cbz	r3, 2c294 <z_unpend_thread+0x1c>
			unpend_thread_no_timeout(thread);
   2c290:	f7ff ff3c 	bl	2c10c <unpend_thread_no_timeout>
	__asm__ volatile(
   2c294:	f384 8811 	msr	BASEPRI, r4
   2c298:	f3bf 8f6f 	isb	sy
}
   2c29c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2c2a0:	f101 0018 	add.w	r0, r1, #24
   2c2a4:	f000 b849 	b.w	2c33a <z_abort_timeout>

0002c2a8 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2c2a8:	4603      	mov	r3, r0
   2c2aa:	b920      	cbnz	r0, 2c2b6 <z_reschedule_irqlock+0xe>
   2c2ac:	f3ef 8205 	mrs	r2, IPSR
   2c2b0:	b90a      	cbnz	r2, 2c2b6 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   2c2b2:	f7e8 bdf5 	b.w	14ea0 <arch_swap>
   2c2b6:	f383 8811 	msr	BASEPRI, r3
   2c2ba:	f3bf 8f6f 	isb	sy
}
   2c2be:	4770      	bx	lr

0002c2c0 <z_reschedule_unlocked>:
	__asm__ volatile(
   2c2c0:	f04f 0340 	mov.w	r3, #64	; 0x40
   2c2c4:	f3ef 8011 	mrs	r0, BASEPRI
   2c2c8:	f383 8812 	msr	BASEPRI_MAX, r3
   2c2cc:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2c2d0:	f7ff bfea 	b.w	2c2a8 <z_reschedule_irqlock>

0002c2d4 <z_unpend_all>:
{
   2c2d4:	b538      	push	{r3, r4, r5, lr}
   2c2d6:	4605      	mov	r5, r0
	int need_sched = 0;
   2c2d8:	2000      	movs	r0, #0
	return list->head == list;
   2c2da:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2c2dc:	42a5      	cmp	r5, r4
   2c2de:	d000      	beq.n	2c2e2 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2c2e0:	b904      	cbnz	r4, 2c2e4 <z_unpend_all+0x10>
}
   2c2e2:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2c2e4:	4620      	mov	r0, r4
   2c2e6:	f7ff ffc7 	bl	2c278 <z_unpend_thread>
		z_ready_thread(thread);
   2c2ea:	4620      	mov	r0, r4
   2c2ec:	f7ff ff49 	bl	2c182 <z_ready_thread>
		need_sched = 1;
   2c2f0:	2001      	movs	r0, #1
   2c2f2:	e7f2      	b.n	2c2da <z_unpend_all+0x6>

0002c2f4 <z_sched_wake>:
{
   2c2f4:	b538      	push	{r3, r4, r5, lr}
   2c2f6:	f04f 0340 	mov.w	r3, #64	; 0x40
   2c2fa:	f3ef 8511 	mrs	r5, BASEPRI
   2c2fe:	f383 8812 	msr	BASEPRI_MAX, r3
   2c302:	f3bf 8f6f 	isb	sy
	return list->head == list;
   2c306:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2c308:	42a0      	cmp	r0, r4
   2c30a:	d012      	beq.n	2c332 <z_sched_wake+0x3e>
		if (thread != NULL) {
   2c30c:	b19c      	cbz	r4, 2c336 <z_sched_wake+0x42>
   2c30e:	67e1      	str	r1, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   2c310:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   2c312:	4620      	mov	r0, r4
   2c314:	f7ff fefa 	bl	2c10c <unpend_thread_no_timeout>
   2c318:	f104 0018 	add.w	r0, r4, #24
   2c31c:	f000 f80d 	bl	2c33a <z_abort_timeout>
			ready_thread(thread);
   2c320:	4620      	mov	r0, r4
   2c322:	f7f7 fae5 	bl	238f0 <ready_thread>
			ret = true;
   2c326:	2001      	movs	r0, #1
	__asm__ volatile(
   2c328:	f385 8811 	msr	BASEPRI, r5
   2c32c:	f3bf 8f6f 	isb	sy
}
   2c330:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   2c332:	2000      	movs	r0, #0
   2c334:	e7f8      	b.n	2c328 <z_sched_wake+0x34>
   2c336:	4620      	mov	r0, r4
   2c338:	e7f6      	b.n	2c328 <z_sched_wake+0x34>

0002c33a <z_abort_timeout>:
{
   2c33a:	b510      	push	{r4, lr}
	__asm__ volatile(
   2c33c:	f04f 0240 	mov.w	r2, #64	; 0x40
   2c340:	f3ef 8411 	mrs	r4, BASEPRI
   2c344:	f382 8812 	msr	BASEPRI_MAX, r2
   2c348:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   2c34c:	6803      	ldr	r3, [r0, #0]
   2c34e:	b13b      	cbz	r3, 2c360 <z_abort_timeout+0x26>
			remove_timeout(to);
   2c350:	f7f7 fdb8 	bl	23ec4 <remove_timeout>
			ret = 0;
   2c354:	2000      	movs	r0, #0
	__asm__ volatile(
   2c356:	f384 8811 	msr	BASEPRI, r4
   2c35a:	f3bf 8f6f 	isb	sy
}
   2c35e:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   2c360:	f06f 0015 	mvn.w	r0, #21
   2c364:	e7f7      	b.n	2c356 <z_abort_timeout+0x1c>

0002c366 <z_timeout_remaining>:
{
   2c366:	b510      	push	{r4, lr}
	__asm__ volatile(
   2c368:	f04f 0340 	mov.w	r3, #64	; 0x40
   2c36c:	f3ef 8411 	mrs	r4, BASEPRI
   2c370:	f383 8812 	msr	BASEPRI_MAX, r3
   2c374:	f3bf 8f6f 	isb	sy
		ticks = timeout_rem(timeout);
   2c378:	f7f7 fdc0 	bl	23efc <timeout_rem>
	__asm__ volatile(
   2c37c:	f384 8811 	msr	BASEPRI, r4
   2c380:	f3bf 8f6f 	isb	sy
}
   2c384:	bd10      	pop	{r4, pc}

0002c386 <z_get_next_timeout_expiry>:
{
   2c386:	b510      	push	{r4, lr}
	__asm__ volatile(
   2c388:	f04f 0340 	mov.w	r3, #64	; 0x40
   2c38c:	f3ef 8411 	mrs	r4, BASEPRI
   2c390:	f383 8812 	msr	BASEPRI_MAX, r3
   2c394:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   2c398:	f7f7 fd74 	bl	23e84 <next_timeout>
	__asm__ volatile(
   2c39c:	f384 8811 	msr	BASEPRI, r4
   2c3a0:	f3bf 8f6f 	isb	sy
}
   2c3a4:	bd10      	pop	{r4, pc}

0002c3a6 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2c3a6:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2c3a8:	f7f7 feac 	bl	24104 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2c3ac:	bd08      	pop	{r3, pc}

0002c3ae <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   2c3ae:	f7f7 bea9 	b.w	24104 <sys_clock_tick_get>

0002c3b2 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2c3b2:	b108      	cbz	r0, 2c3b8 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2c3b4:	f7e9 bb0a 	b.w	159cc <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2c3b8:	4770      	bx	lr

0002c3ba <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2c3ba:	f1b1 3fff 	cmp.w	r1, #4294967295
   2c3be:	bf08      	it	eq
   2c3c0:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   2c3c4:	b538      	push	{r3, r4, r5, lr}
   2c3c6:	460c      	mov	r4, r1
   2c3c8:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2c3ca:	d014      	beq.n	2c3f6 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2c3cc:	4308      	orrs	r0, r1
   2c3ce:	d103      	bne.n	2c3d8 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2c3d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   2c3d4:	f7f7 be96 	b.w	24104 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2c3d8:	f06f 0001 	mvn.w	r0, #1
   2c3dc:	1b40      	subs	r0, r0, r5
   2c3de:	f04f 33ff 	mov.w	r3, #4294967295
   2c3e2:	eb63 0101 	sbc.w	r1, r3, r1
   2c3e6:	2900      	cmp	r1, #0
   2c3e8:	da04      	bge.n	2c3f4 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   2c3ea:	f7f7 fe8b 	bl	24104 <sys_clock_tick_get>
   2c3ee:	1940      	adds	r0, r0, r5
   2c3f0:	eb41 0104 	adc.w	r1, r1, r4
}
   2c3f4:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   2c3f6:	f04f 30ff 	mov.w	r0, #4294967295
   2c3fa:	4601      	mov	r1, r0
   2c3fc:	e7fa      	b.n	2c3f4 <sys_clock_timeout_end_calc+0x3a>

0002c3fe <k_timer_init>:
	timer->status = 0U;
   2c3fe:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   2c400:	e9c0 1208 	strd	r1, r2, [r0, #32]
   2c404:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   2c408:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   2c40c:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   2c410:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   2c412:	6343      	str	r3, [r0, #52]	; 0x34
}
   2c414:	4770      	bx	lr

0002c416 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2c416:	b510      	push	{r4, lr}
   2c418:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   2c41a:	f7ff ff8e 	bl	2c33a <z_abort_timeout>

	if (inactive) {
   2c41e:	b9b0      	cbnz	r0, 2c44e <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   2c420:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2c422:	b10b      	cbz	r3, 2c428 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2c424:	4620      	mov	r0, r4
   2c426:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   2c428:	f104 0018 	add.w	r0, r4, #24
   2c42c:	f7ff fef1 	bl	2c212 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   2c430:	b168      	cbz	r0, 2c44e <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   2c432:	f7ff fea6 	bl	2c182 <z_ready_thread>
	__asm__ volatile(
   2c436:	f04f 0340 	mov.w	r3, #64	; 0x40
   2c43a:	f3ef 8011 	mrs	r0, BASEPRI
   2c43e:	f383 8812 	msr	BASEPRI_MAX, r3
   2c442:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   2c446:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2c44a:	f7ff bf2d 	b.w	2c2a8 <z_reschedule_irqlock>
   2c44e:	bd10      	pop	{r4, pc}

0002c450 <add_event>:
{
   2c450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c452:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2c454:	e9d0 1300 	ldrd	r1, r3, [r0]
   2c458:	4288      	cmp	r0, r1
   2c45a:	4604      	mov	r4, r0
   2c45c:	d105      	bne.n	2c46a <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   2c45e:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   2c460:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   2c464:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2c466:	6065      	str	r5, [r4, #4]
   2c468:	e01d      	b.n	2c4a6 <add_event+0x56>
	if ((pending == NULL) ||
   2c46a:	2b00      	cmp	r3, #0
   2c46c:	d0f7      	beq.n	2c45e <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2c46e:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2c470:	b100      	cbz	r0, 2c474 <add_event+0x24>
   2c472:	3860      	subs	r0, #96	; 0x60
   2c474:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2c478:	4639      	mov	r1, r7
   2c47a:	f7ff fe51 	bl	2c120 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2c47e:	2800      	cmp	r0, #0
   2c480:	dced      	bgt.n	2c45e <add_event+0xe>
	return list->head == list;
   2c482:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2c484:	42b4      	cmp	r4, r6
   2c486:	d0ea      	beq.n	2c45e <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2c488:	2e00      	cmp	r6, #0
   2c48a:	d0e8      	beq.n	2c45e <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   2c48c:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2c48e:	b101      	cbz	r1, 2c492 <add_event+0x42>
   2c490:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   2c492:	4638      	mov	r0, r7
   2c494:	f7ff fe44 	bl	2c120 <z_sched_prio_cmp>
   2c498:	2800      	cmp	r0, #0
   2c49a:	dd05      	ble.n	2c4a8 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   2c49c:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2c49e:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   2c4a2:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2c4a4:	6075      	str	r5, [r6, #4]
}
   2c4a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2c4a8:	6863      	ldr	r3, [r4, #4]
   2c4aa:	429e      	cmp	r6, r3
   2c4ac:	d0d7      	beq.n	2c45e <add_event+0xe>
   2c4ae:	6836      	ldr	r6, [r6, #0]
   2c4b0:	e7ea      	b.n	2c488 <add_event+0x38>

0002c4b2 <register_events>:
{
   2c4b2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   2c4b6:	2500      	movs	r5, #0
{
   2c4b8:	468b      	mov	fp, r1
   2c4ba:	4614      	mov	r4, r2
   2c4bc:	461f      	mov	r7, r3
   2c4be:	4682      	mov	sl, r0
	int events_registered = 0;
   2c4c0:	462e      	mov	r6, r5
	event->poller = NULL;
   2c4c2:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   2c4c4:	455d      	cmp	r5, fp
   2c4c6:	db02      	blt.n	2c4ce <register_events+0x1c>
}
   2c4c8:	4630      	mov	r0, r6
   2c4ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c4ce:	f04f 0340 	mov.w	r3, #64	; 0x40
   2c4d2:	f3ef 8911 	mrs	r9, BASEPRI
   2c4d6:	f383 8812 	msr	BASEPRI_MAX, r3
   2c4da:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   2c4de:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2c4e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2c4e6:	3b01      	subs	r3, #1
   2c4e8:	2b07      	cmp	r3, #7
   2c4ea:	d80f      	bhi.n	2c50c <register_events+0x5a>
   2c4ec:	e8df f003 	tbb	[pc, r3]
   2c4f0:	0a0e041e 	.word	0x0a0e041e
   2c4f4:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   2c4f8:	f8da 3010 	ldr.w	r3, [sl, #16]
   2c4fc:	689b      	ldr	r3, [r3, #8]
   2c4fe:	b12b      	cbz	r3, 2c50c <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   2c500:	2302      	movs	r3, #2
   2c502:	e020      	b.n	2c546 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   2c504:	f8da 3010 	ldr.w	r3, [sl, #16]
   2c508:	681b      	ldr	r3, [r3, #0]
   2c50a:	bb8b      	cbnz	r3, 2c570 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   2c50c:	bb47      	cbnz	r7, 2c560 <register_events+0xae>
   2c50e:	7823      	ldrb	r3, [r4, #0]
   2c510:	b333      	cbz	r3, 2c560 <register_events+0xae>
	switch (event->type) {
   2c512:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2c516:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2c51a:	3b01      	subs	r3, #1
   2c51c:	2b07      	cmp	r3, #7
   2c51e:	d830      	bhi.n	2c582 <register_events+0xd0>
   2c520:	e8df f003 	tbb	[pc, r3]
   2c524:	282f2833 	.word	0x282f2833
   2c528:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   2c52c:	f8da 3010 	ldr.w	r3, [sl, #16]
   2c530:	689b      	ldr	r3, [r3, #8]
   2c532:	2b00      	cmp	r3, #0
   2c534:	d0ea      	beq.n	2c50c <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   2c536:	2301      	movs	r3, #1
   2c538:	e005      	b.n	2c546 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   2c53a:	f8da 3010 	ldr.w	r3, [sl, #16]
   2c53e:	6a1b      	ldr	r3, [r3, #32]
   2c540:	2b00      	cmp	r3, #0
   2c542:	d0e3      	beq.n	2c50c <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   2c544:	2310      	movs	r3, #16
	event->state |= state;
   2c546:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   2c54a:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   2c54e:	f3c2 3186 	ubfx	r1, r2, #14, #7
   2c552:	430b      	orrs	r3, r1
   2c554:	f363 3294 	bfi	r2, r3, #14, #7
   2c558:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   2c55c:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   2c560:	f389 8811 	msr	BASEPRI, r9
   2c564:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2c568:	3501      	adds	r5, #1
   2c56a:	f10a 0a14 	add.w	sl, sl, #20
   2c56e:	e7a9      	b.n	2c4c4 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2c570:	2304      	movs	r3, #4
   2c572:	e7e8      	b.n	2c546 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   2c574:	f8da 0010 	ldr.w	r0, [sl, #16]
   2c578:	4622      	mov	r2, r4
   2c57a:	4651      	mov	r1, sl
   2c57c:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   2c57e:	f7ff ff67 	bl	2c450 <add_event>
	event->poller = poller;
   2c582:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   2c586:	3601      	adds	r6, #1
   2c588:	e7ea      	b.n	2c560 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   2c58a:	f8da 0010 	ldr.w	r0, [sl, #16]
   2c58e:	4622      	mov	r2, r4
   2c590:	4651      	mov	r1, sl
   2c592:	e7f4      	b.n	2c57e <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   2c594:	f8da 0010 	ldr.w	r0, [sl, #16]
   2c598:	4622      	mov	r2, r4
   2c59a:	4651      	mov	r1, sl
   2c59c:	3024      	adds	r0, #36	; 0x24
   2c59e:	e7ee      	b.n	2c57e <register_events+0xcc>

0002c5a0 <signal_poll_event>:
{
   2c5a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2c5a4:	6884      	ldr	r4, [r0, #8]
{
   2c5a6:	4605      	mov	r5, r0
   2c5a8:	460e      	mov	r6, r1
	if (poller != NULL) {
   2c5aa:	b144      	cbz	r4, 2c5be <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   2c5ac:	7863      	ldrb	r3, [r4, #1]
   2c5ae:	2b01      	cmp	r3, #1
   2c5b0:	d12e      	bne.n	2c610 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   2c5b2:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2c5b6:	f013 0302 	ands.w	r3, r3, #2
   2c5ba:	d10a      	bne.n	2c5d2 <signal_poll_event+0x32>
		poller->is_polling = false;
   2c5bc:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   2c5be:	68eb      	ldr	r3, [r5, #12]
   2c5c0:	f3c3 3286 	ubfx	r2, r3, #14, #7
   2c5c4:	4316      	orrs	r6, r2
	event->poller = NULL;
   2c5c6:	2000      	movs	r0, #0
	event->state |= state;
   2c5c8:	f366 3394 	bfi	r3, r6, #14, #7
	event->poller = NULL;
   2c5cc:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   2c5ce:	60eb      	str	r3, [r5, #12]
	return retcode;
   2c5d0:	e03e      	b.n	2c650 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   2c5d2:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   2c5d6:	f1b3 3fff 	cmp.w	r3, #4294967295
   2c5da:	bf08      	it	eq
   2c5dc:	f112 0f02 	cmneq.w	r2, #2
   2c5e0:	d032      	beq.n	2c648 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2c5e2:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   2c5e6:	4640      	mov	r0, r8
   2c5e8:	f7ff fe46 	bl	2c278 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2c5ec:	2e08      	cmp	r6, #8
   2c5ee:	bf0c      	ite	eq
   2c5f0:	f06f 0303 	mvneq.w	r3, #3
   2c5f4:	2300      	movne	r3, #0
   2c5f6:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2c5f8:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2c5fc:	06db      	lsls	r3, r3, #27
   2c5fe:	d109      	bne.n	2c614 <signal_poll_event+0x74>
   2c600:	f854 7c48 	ldr.w	r7, [r4, #-72]
   2c604:	b937      	cbnz	r7, 2c614 <signal_poll_event+0x74>
	z_ready_thread(thread);
   2c606:	4640      	mov	r0, r8
   2c608:	f7ff fdbb 	bl	2c182 <z_ready_thread>
		poller->is_polling = false;
   2c60c:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2c60e:	e7d6      	b.n	2c5be <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   2c610:	2b02      	cmp	r3, #2
   2c612:	d001      	beq.n	2c618 <signal_poll_event+0x78>
		poller->is_polling = false;
   2c614:	2300      	movs	r3, #0
   2c616:	e7d1      	b.n	2c5bc <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2c618:	7823      	ldrb	r3, [r4, #0]
   2c61a:	2b00      	cmp	r3, #0
   2c61c:	d0cf      	beq.n	2c5be <signal_poll_event+0x1e>
   2c61e:	f854 7c04 	ldr.w	r7, [r4, #-4]
   2c622:	2f00      	cmp	r7, #0
   2c624:	d0f2      	beq.n	2c60c <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   2c626:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   2c62a:	f1a4 0914 	sub.w	r9, r4, #20
   2c62e:	f104 0014 	add.w	r0, r4, #20
   2c632:	f7ff fe82 	bl	2c33a <z_abort_timeout>
		twork->poll_result = 0;
   2c636:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   2c63a:	4649      	mov	r1, r9
   2c63c:	4638      	mov	r0, r7
   2c63e:	f7ff fcdf 	bl	2c000 <z_work_submit_to_queue>
		poller->is_polling = false;
   2c642:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   2c646:	e7ba      	b.n	2c5be <signal_poll_event+0x1e>
		poller->is_polling = false;
   2c648:	2300      	movs	r3, #0
   2c64a:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   2c64c:	f06f 000a 	mvn.w	r0, #10
}
   2c650:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002c654 <clear_event_registrations>:
	while (num_events--) {
   2c654:	2314      	movs	r3, #20
{
   2c656:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c658:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   2c65c:	2400      	movs	r4, #0
	switch (event->type) {
   2c65e:	f44f 768b 	mov.w	r6, #278	; 0x116
	while (num_events--) {
   2c662:	b901      	cbnz	r1, 2c666 <clear_event_registrations+0x12>
}
   2c664:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   2c666:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   2c66a:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   2c66e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2c672:	2b08      	cmp	r3, #8
   2c674:	f1a0 0714 	sub.w	r7, r0, #20
   2c678:	d80c      	bhi.n	2c694 <clear_event_registrations+0x40>
   2c67a:	fa26 f303 	lsr.w	r3, r6, r3
   2c67e:	07db      	lsls	r3, r3, #31
   2c680:	d508      	bpl.n	2c694 <clear_event_registrations+0x40>
	return node->next != NULL;
   2c682:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   2c686:	b12b      	cbz	r3, 2c694 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   2c688:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   2c68c:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   2c68e:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   2c690:	e940 4405 	strd	r4, r4, [r0, #-20]
   2c694:	f382 8811 	msr	BASEPRI, r2
   2c698:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2c69c:	f04f 0340 	mov.w	r3, #64	; 0x40
   2c6a0:	f3ef 8211 	mrs	r2, BASEPRI
   2c6a4:	f383 8812 	msr	BASEPRI_MAX, r3
   2c6a8:	f3bf 8f6f 	isb	sy
   2c6ac:	3901      	subs	r1, #1
   2c6ae:	4638      	mov	r0, r7
   2c6b0:	e7d7      	b.n	2c662 <clear_event_registrations+0xe>

0002c6b2 <k_poll_event_init>:
{
   2c6b2:	b510      	push	{r4, lr}
	event->type = type;
   2c6b4:	0552      	lsls	r2, r2, #21
   2c6b6:	0209      	lsls	r1, r1, #8
   2c6b8:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   2c6bc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
   2c6c0:	430a      	orrs	r2, r1
   2c6c2:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   2c6c4:	2400      	movs	r4, #0
	event->type = type;
   2c6c6:	430a      	orrs	r2, r1
	event->obj = obj;
   2c6c8:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   2c6cc:	6084      	str	r4, [r0, #8]
}
   2c6ce:	bd10      	pop	{r4, pc}

0002c6d0 <z_handle_obj_poll_events>:
{
   2c6d0:	4603      	mov	r3, r0
	return list->head == list;
   2c6d2:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2c6d4:	4283      	cmp	r3, r0
   2c6d6:	d008      	beq.n	2c6ea <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   2c6d8:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2c6dc:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2c6de:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2c6e0:	2300      	movs	r3, #0
	node->prev = NULL;
   2c6e2:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2c6e6:	f7ff bf5b 	b.w	2c5a0 <signal_poll_event>
}
   2c6ea:	4770      	bx	lr

0002c6ec <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   2c6ec:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   2c6ee:	e9c0 0000 	strd	r0, r0, [r0]
   2c6f2:	6083      	str	r3, [r0, #8]
}
   2c6f4:	4770      	bx	lr

0002c6f6 <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   2c6f6:	2300      	movs	r3, #0
   2c6f8:	6083      	str	r3, [r0, #8]
}
   2c6fa:	4770      	bx	lr

0002c6fc <k_free>:
	if (ptr != NULL) {
   2c6fc:	b120      	cbz	r0, 2c708 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2c6fe:	1f01      	subs	r1, r0, #4
   2c700:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2c704:	f7ff babc 	b.w	2bc80 <k_heap_free>
}
   2c708:	4770      	bx	lr

0002c70a <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2c70a:	4770      	bx	lr
